
ntp_test.elf:     file format elf32-littlenios2
ntp_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000188

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000366d4 memsz 0x000366d4 flags r-x
    LOAD off    0x000376f4 vaddr 0x040366f4 paddr 0x04038534 align 2**12
         filesz 0x00001e40 memsz 0x00001e40 flags rw-
    LOAD off    0x0003a374 vaddr 0x0403a374 paddr 0x0403a374 align 2**12
         filesz 0x00000000 memsz 0x00009700 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000311b0  04000188  04000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000053bc  04031338  04031338  00032338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e40  040366f4  04038534  000376f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009700  0403a374  0403a374  0003a374  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00039534  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001c58  00000000  00000000  00039560  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000057bc  00000000  00000000  0003b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00068367  00000000  00000000  00040974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000144fb  00000000  00000000  000a8cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000495db  00000000  00000000  000bd1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00005d4c  00000000  00000000  001067b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000a6b3  00000000  00000000  0010c500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002847a  00000000  00000000  00116bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0013f030  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001ba0  00000000  00000000  0013f090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0014b247  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0014b24d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0014b250  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0014b251  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0014b255  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0014b259  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0014b25d  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0014b266  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0014b26f  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0014b278  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000026  00000000  00000000  0014b283  2**0
                  CONTENTS, READONLY
 28 .jdi          00003e55  00000000  00000000  0014b2a9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000188 l    d  .text	00000000 .text
04031338 l    d  .rodata	00000000 .rodata
040366f4 l    d  .rwdata	00000000 .rwdata
0403a374 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 init_ntp.c
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 ntp_client.c
00000000 l    df *ABS*	00000000 ntp_data_gram.c
00000000 l    df *ABS*	00000000 target_clock.c
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 ctime.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 gmtime.c
00000000 l    df *ABS*	00000000 gmtime_r.c
00000000 l    df *ABS*	00000000 impure.c
0403670c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 lcltime.c
00000000 l    df *ABS*	00000000 lcltime_r.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mktm_r.c
04032108 l     O .rodata	00000060 mon_lengths
040383ec l     O .rwdata	00000008 year_lengths
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strftime.c
040036e4 l     F .text	0000018c iso_year_adjust
04032a6c l     O .rodata	0000001c dname_len
04032a50 l     O .rodata	0000001c dname
04032ab8 l     O .rodata	00000030 mname_len
04032a88 l     O .rodata	00000030 mname
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tzlock.c
00000000 l    df *ABS*	00000000 tzvars.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
040047b0 l     F .text	00000058 __sprint_r
04032b56 l     O .rodata	00000010 blanks.3452
04032b46 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04006814 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abs.c
00000000 l    df *ABS*	00000000 asctime.c
00000000 l    df *ABS*	00000000 asctime_r.c
04032bac l     O .rodata	00000015 day_name.1821
04032b88 l     O .rodata	00000024 mon_name.1822
00000000 l    df *ABS*	00000000 dtoa.c
04006a84 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04008480 l     F .text	00000058 std
0400858c l     F .text	00000008 __fp_lock
04008594 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettzinfo.c
04036f14 l     O .rwdata	00000040 tzinfo
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 labs.c
00000000 l    df *ABS*	00000000 locale.c
04038400 l     O .rwdata	00000004 charset
04032be0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04032d28 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0400c5c4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400d6f0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
0400e224 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04038404 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_settod.c
0400e54c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0403a3c8 l     O .bss	00000004 locks
04038410 l     O .rwdata	00000004 lockid
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0403a3d0 l     O .bss	00000004 locks
04038414 l     O .rwdata	00000004 lockid
00000000 l    df *ABS*	00000000 os_core.c
0400ebc0 l     F .text	00000038 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0400fb2c l     F .text	000000b4 OS_FlagBlock
0400fc20 l     F .text	00000090 OS_FlagTaskRdy
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04036f60 l     O .rwdata	0000106c jtag_uart
04037fcc l     O .rwdata	00000030 sgdma_rx
04037ffc l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04013448 l     F .text	000000b4 altera_avalon_jtag_uart_timeout
040135c4 l     F .text	000001a0 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
04013dc4 l     F .text	0000005c alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04014248 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
0403a42b l     O .bss	00000001 tse_system_count.4413
0403a42a l     O .bss	00000001 is_init.4593
00000000 l    df *ABS*	00000000 altera_avalon_tse_system_info.c
00000000 l    df *ABS*	00000000 ins_tse_mac.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
0403a440 l     O .bss	00000004 nclosers
0403a6e0 l     O .bss	0000003c closers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
00000000 l    df *ABS*	00000000 in_utils.c
0403a71c l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
0401a678 l     F .text	00000044 dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
0401c73c l       .text	00000000 done
0401c5cc l       .text	00000000 asm1
0401c6f8 l       .text	00000000 loop0
0401c5f4 l       .text	00000000 loop
0401c714 l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
0403a4ac l     O .bss	00000004 cpu_statusreg
0403a4a8 l     O .bss	00000004 kbd_init.3735
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
0403a4e0 l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
0401e69c l     F .text	00000074 sockargs
0401ea20 l     F .text	00000184 t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04025f44 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04026000 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040262ec l     F .text	00000070 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 allports.c
0403a510 l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
0403a51c l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
0403a534 l     O .bss	00000004 arp_timer
0403a538 l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
0403851c l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
0403a568 l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
04038520 l     O .rwdata	00000004 iCounter.4493
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
0403a734 l     O .bss	0000001e nearBuf.4136
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 icmp.c
04036458 l     O .rodata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
04036571 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 refill.c
040312ac l     F .text	0000001c lflush
040433e0 g     O .bss	00000014 soq
04009bd4 g     F .text	00000094 _mprec_log10
04014388 g     F .text	0000006c alt_tse_get_mac_info
04038462 g     O .rwdata	00000002 OSTaskNameSize
04009cc0 g     F .text	00000088 __any_on
0400b8d8 g     F .text	00000070 _isatty_r
04032d00 g     O .rodata	00000028 __mprec_tinytens
04028dc8 g     F .text	000004cc ip_write_internal
0400e32c g     F .text	000000a8 alt_main
04030a6c g     F .text	0000008c strcpy
040069e0 g     F .text	00000014 asctime
0401bf0c g     F .text	00000078 pk_free
04002f4c g     F .text	000000a0 _puts_r
0404358c g     O .bss	00000100 alt_irq
0403827c g     O .rwdata	00000009 rtp_priority
0400b948 g     F .text	00000078 _lseek_r
0402faac g     F .text	00000218 icmp_timex
0401d74c g     F .text	00000024 m_freem
0402ea20 g     F .text	0000004c vgetc
0401c764 g     F .text	00000004 clock_c
0403a4f8 g     O .bss	00000004 tcp_optionbuf
040281cc g     F .text	00000048 if_getbynum
04010944 g     F .text	00000068 OS_MemInit
0403a488 g     O .bss	00000004 dsc_releases
0403a498 g     O .bss	00000004 dsc_rlyerrs
0401a3e4 g     F .text	00000054 TK_OSTaskQuery
0401c5ac g       .text	00000000 asm_cksum
0401458c g     F .text	000000a4 marvell_cfg_rgmii
04038534 g       *ABS*	00000000 __flash_rwdata_start
04012fac g     F .text	00000024 OSTimeSet
0402e988 g     F .text	00000098 vgetc_locked
0401ccdc g     F .text	00000008 post_task_setup
04029a10 g     F .text	0000021c ipr_stats
04024fd0 g     F .text	0000010c tcp_attach
040384b4 g     O .rwdata	00000004 reqlist_len
0401d154 g     F .text	00000080 tcp_tick
0401a048 g     F .text	00000058 print_ipad
0401a438 g     F .text	00000088 tcp_wakeup
0400d0e4 g     F .text	00000088 __eqdf2
0403a444 g     O .bss	00000004 igmp_timers_are_running
04021d94 g     F .text	000000bc tcp_pulloutofband
040143f4 g     F .text	00000008 alt_tse_phy_print_profile
0400f214 g     F .text	0000038c OSEventPendMulti
04043a74 g       *ABS*	00000000 __alt_heap_start
04026a40 g     F .text	00000004 OSTaskCreateHook
0401a6f0 g     F .text	00000028 dhc_ifacedone
04014760 g     F .text	0000006c marvell_phy_cfg
0402af2c g     F .text	000001d4 ip_rcv
0402e7a0 g     F .text	000000fc vfseek
04020a54 g     F .text	00000084 soqremque
0402bf9c g     F .text	000004a4 udpdemux
04016e70 g     F .text	0000009c tse_mac_close
04002ed4 g     F .text	00000044 printf
0403a53c g     O .bss	00000004 rt_mib
0403843a g     O .rwdata	00000002 OSMboxEn
0401a740 g     F .text	00000018 dhc_state_init
04030f90 g     F .text	00000024 vsprintf
04013cb4 g     F .text	00000080 alt_avalon_sgdma_do_sync_transfer
0400f5a0 g     F .text	00000040 OSIntEnter
0400b258 g     F .text	00000068 __sseek
040084e8 g     F .text	000000a4 __sinit
0402b124 g     F .text	000000cc in_delmulti
0400b458 g     F .text	00000130 __swbuf_r
0403a38c g     O .bss	00000004 _daylight
0403a554 g     O .bss	00000004 so_evtmap_create
0403844a g     O .rwdata	00000002 OSQEn
0402e528 g     F .text	0000006c in_pcballoc
040384d0 g     O .rwdata	00000002 socket_defaults
04009330 g     F .text	00000084 _setlocale_r
04027a98 g     F .text	000002ec send_arp
040085e8 g     F .text	00000068 __sfmoreglue
0402f440 g     F .text	00000254 vfopen_locked
0400e758 g     F .text	00000060 __malloc_unlock
04026a4c g     F .text	00000004 OSTaskStatHook
04026c54 g     F .text	00000038 prep_modules
040192a0 g     F .text	000000b4 bsd_i_sockoptlen
0403a3d8 g     O .bss	00000001 OSLockNesting
040384ac g     O .rwdata	00000004 xids
04003070 g     F .text	00000674 strerror
040168fc g     F .text	00000478 getPHYSpeed
0402f3a0 g     F .text	00000040 vfclose
04043480 g     O .bss	0000002c tcb
04038488 g     O .rwdata	00000002 OSDataSize
040266a8 g     F .text	00000010 alt_remap_cached
0403a3d9 g     O .bss	00000001 OSRunning
040271e0 g     F .text	00000204 grat_arp
04000e88 g     F .text	00000024 get_ip_addr
0402ddd0 g     F .text	00000090 inet_pton
04028108 g     F .text	00000060 reg_type
04042f84 g     O .bss	000000f0 dhc_states
04019094 g     F .text	00000144 igmp_fasttimo
0402e5a4 g     F .text	0000002c vunlink_flag_open_files
0401a8fc g     F .text	00000058 dhc_halt
04013e20 g     F .text	00000170 alt_avalon_sgdma_construct_descriptor_burst
0403a47c g     O .bss	00000004 dsc_acks
040434ac g     O .bss	000000e0 tcpstat
0402a134 g     F .text	00000200 ip_reasm_copy_queued_fragments_into_reassy_buffer
0401d424 g     F .text	00000058 dtom
0402384c g     F .text	000000b4 tcp_setpersist
0401ed70 g     F .text	00000110 t_getsockopt
040096e8 g     F .text	000000e0 memmove
0403a48c g     O .bss	00000004 dsc_naks
0401d770 g     F .text	00000364 ip_output
04026a50 g     F .text	00000004 OSInitHookBegin
0402fa6c g     F .text	00000040 icmp_du
040384a8 g     O .rwdata	00000004 num_net_tasks
0403a578 g     O .bss	00000004 vfiles
04038480 g     O .rwdata	00000002 OSTmrSize
0402d548 g     F .text	000000b8 dhc_main_ipset
040085d8 g     F .text	00000010 _cleanup
0402a334 g     F .text	000001d8 ip_reasm_process_first_fragment
0400b00c g     F .text	000000bc snprintf
04009d48 g     F .text	000000bc _Balloc
04000f38 g     F .text	00000250 NTPTask
0403a3dc g     O .bss	00000004 OSIdleCtr
04014adc g     F .text	0000010c alt_tse_phy_set_adv_1000
04038498 g     O .rwdata	00000001 max_mac_system
0402cc40 g     F .text	000002f0 ip_setmoptions
0400d1f4 g     F .text	00000088 __gtdf2
040160f8 g     F .text	00000344 alt_tse_system_add_sys
0402d86c g     F .text	00000008 md_fseek
04026a1c g       .text	00000000 OSStartTsk
04001d7c g     F .text	00000010 __errno
0400f98c g     F .text	0000019c OS_TCBInit
0402a8d4 g     F .text	00000048 ip_reassm
0401b100 g     F .text	000000cc dhc_reclaim
0404386c g     O .bss	00000010 udp_mib
04000000 g     F .entry	0000001c __reset
0401e60c g     F .text	00000090 t_shutdown
0401ebb4 g     F .text	000000e4 t_recvfrom
04038486 g     O .rwdata	00000002 OSTmrWheelTblSize
0402cf30 g     F .text	0000060c u_mctest_run
04014068 g     F .text	00000048 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
04001a74 g     F .text	00000108 lcddisplaytime_task
0402b334 g     F .text	0000008c prep_ifaces
04000020 g       *ABS*	00000000 __flash_exceptions_start
0403a460 g     O .bss	00000001 to_netmain
0401bf84 g     F .text	00000088 pk_alloc
04038426 g     O .rwdata	00000002 OSEventSize
0403a3e0 g     O .bss	00000001 OSPrioHighRdy
0400b864 g     F .text	00000074 _fstat_r
0403a5c0 g     O .bss	00000120 tse_mac_device
0401a0a0 g     F .text	00000058 tk_nettick
04026a44 g     F .text	00000004 OSTaskDelHook
0403a394 g     O .bss	00000004 errno
04030978 g     F .text	00000014 __srget
04021598 g     F .text	000000a8 in_pcbnotify
040269fc g       .text	00000000 OSStartHighRdy
04043074 g     O .bss	00000014 lilfreeq
040006cc g     F .text	000004c8 alt_uCOSIIErrorHandler
0402b300 g     F .text	00000010 evtmap_setup
040124d4 g     F .text	0000017c OSTaskCreateExt
0403a464 g     O .bss	00000004 tcp_sleep_timeout
04020bec g     F .text	00000114 sbdrop
040092f4 g     F .text	00000018 labs
0403a550 g     O .bss	00000004 net_system_exit
0404387c g     O .bss	00000068 icmp_mib
040243b8 g     F .text	00000038 tcp_getseq
0402b428 g     F .text	00000088 ip_raw_alloc
04014ea0 g     F .text	00000418 alt_tse_phy_set_common_speed
040106f8 g     F .text	0000002c OSFlagPendGetFlagsRdy
04038466 g     O .rwdata	00000002 OSTaskStatStkSize
04042a58 g     O .bss	00000010 pmac_groups
0401ac30 g     F .text	000004d0 dhc_request
04020148 g     F .text	00000490 soreceive
0400fd88 g     F .text	000001a4 OSFlagAccept
04011228 g     F .text	00000058 OSQFlush
04010e84 g     F .text	000000b0 OSQAccept
0403a3b8 g     O .bss	00000004 alt_argv
040403dc g       *ABS*	00000000 _gp
040299e4 g     F .text	0000002c ip_reasm_send_icmp_timex
04026728 g     F .text	00000128 usleep
0402ef0c g     F .text	00000040 vfflush
04043388 g     O .bss	00000040 resid_semaphore
04019e64 g     F .text	00000104 hexdump
040297f0 g     F .text	00000060 ip_reasm_incr_mem_useage
0401cdbc g     F .text	0000000c calloc2
04018ef4 g     F .text	00000034 igmp_leavegroup
040123ac g     F .text	00000128 OSTaskCreate
040120d4 g     F .text	000002d8 OSTaskChangePrio
0403a3d4 g     O .bss	00000004 alt_heapsem
040243f0 g     F .text	000000b4 tcp_close
0400fb28 g     F .text	00000004 OSDebugInit
04012650 g     F .text	00000280 OSTaskDel
0402e648 g     F .text	00000050 vferror
04001c18 g     F .text	00000148 setup_phy
040266e0 g     F .text	00000048 alt_uncached_malloc
0401429c g     F .text	0000001c tse_mac_initTransInfo2
0402bd40 g     F .text	00000080 udp_alloc
040380e4 g     O .rwdata	00000180 alt_fd_list
0403f754 g     O .bss	00000370 OSFlagTbl
0403a4e4 g     O .bss	00000008 mbstat
04030828 g     F .text	00000090 _getc_r
04030790 g     F .text	00000098 getc
0400e9b8 g     F .text	00000050 OS_EventTaskRemove
0402c610 g     F .text	000000bc igmpv2_chk_set_timer
0401a3dc g     F .text	00000008 TK_OSTimeDly
04026128 g     F .text	00000094 alt_find_dev
04009648 g     F .text	000000a0 memcpy
04014c9c g     F .text	0000001c tse_mac_setMIImode
0403a494 g     O .bss	00000004 dsc_rebind
0402711c g     F .text	00000070 task_stats
0401e57c g     F .text	0000001c DOMAIN_CHECK
0401d14c g     F .text	00000008 in_broadcast
04038450 g     O .rwdata	00000002 OSRdyTblSize
04014490 g     F .text	0000001c alt_tse_phy_rd_mdio_addr
0403a574 g     O .bss	00000004 vfsystems
0402bc64 g     F .text	00000088 udp_socket
0403a434 g     O .bss	00000004 MaxMtu
040218a8 g     F .text	000000f0 sock_selscan
04017734 g     F .text	000000c8 triple_speed_ethernet_init
040085cc g     F .text	0000000c _cleanup_r
0400d38c g     F .text	000000f8 __floatsidf
040296f4 g     F .text	00000054 ip_reasm_match_frag_with_ire
04021240 g     F .text	00000014 socantrcvmore
04016dd8 g     F .text	00000098 tse_mac_sTxWrite
04002ec0 g     F .text	00000014 perror
0402635c g     F .text	0000008c alt_io_redirect
0400d304 g     F .text	00000088 __ltdf2
0403a4c0 g     O .bss	00000004 netq_intmask
0402d9a8 g     F .text	0000001c hextoa
04031338 g       *ABS*	00000000 __DTOR_END__
0401e8b8 g     F .text	00000168 t_send
04025e3c g     F .text	000000f0 alt_close
0403a4ec g     O .bss	00000002 select_wait
04002fec g     F .text	00000014 puts
04019bf8 g     F .text	00000030 std_out
04000dcc g     F .text	000000bc NTPInitialTask
04042a78 g     O .bss	00000030 tse_iniche_dev_driver_data
0402eb3c g     F .text	000000c8 vfslookup_locked
040200dc g     F .text	0000006c soaccept
0400efb0 g     F .text	00000128 OSEventNameGet
04038434 g     O .rwdata	00000002 OSFlagMax
04026968 g     F .text	00000008 altera_nios2_irq_init
040433f4 g     O .bss	0000003c tcpmib
0401e508 g     F .text	00000074 t_errno
0402b6bc g     F .text	000000c4 ip_raw_open
0401aab8 g     F .text	000000dc dhc_decline
04009b24 g     F .text	000000b0 __ratio
0400f5e0 g     F .text	000000d0 OSIntExit
04038518 g     O .rwdata	00000004 ipRoutes
0402ea6c g     F .text	0000001c vfeof
040249bc g     F .text	00000014 tcp_canceltimers
0401a954 g     F .text	00000130 dhc_buildheader
0403846e g     O .rwdata	00000002 OSTCBSize
04013fd8 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0403a3e1 g     O .bss	00000001 OSPrioCur
0403e754 g     O .bss	00001000 NTPCommandQTbl
040137ec g     F .text	000001c8 altera_avalon_jtag_uart_read
04001f4c g     F .text	00000014 malloc
0403a570 g     O .bss	00000004 inpcb_cachemiss
04002f18 g     F .text	00000034 _printf_r
0402deb8 g     F .text	00000070 inet46_addr
0403a56c g     O .bss	00000004 inpcb_cachehits
0400d82c g     F .text	00000008 __udivsi3
040380a4 g     O .rwdata	0000000b tcp_outflags
04042aa8 g     O .bss	00000130 tse
0400e120 g     F .text	00000084 isatty
040144ac g     F .text	000000e0 alt_tse_sys_enable_mdio_sharing
04038454 g     O .rwdata	00000002 OSStkWidth
04032c10 g     O .rodata	000000c8 __mprec_tens
0402f3e0 g     F .text	00000060 vf_alloc_and_link_vop
04038448 g     O .rwdata	00000002 OSPtrSize
0403a540 g     O .bss	00000004 ipr_curr_mem
04018518 g     F .text	0000005c exit_hook
0403a448 g     O .bss	00000004 igmp_cticks
04014344 g     F .text	00000044 alt_tse_get_mac_info_index
0403a4d4 g     O .bss	00000004 mheap_sem_ptr
04021b78 g     F .text	0000001c ip4_tcpmss
0400930c g     F .text	00000008 __locale_charset
04038428 g     O .rwdata	00000002 OSEventTblSize
040437f0 g     O .bss	00000014 netlist
0403a3a4 g     O .bss	00000008 alt_timezone
0401fd34 g     F .text	00000084 soshutdown
04026970 g       .text	00000000 OSCtxSw
04026c8c g     F .text	00000034 packet_check
0401ab94 g     F .text	0000009c dhc_setip
0402fa34 g     F .text	00000038 alt_icache_flush
04043430 g     O .bss	00000014 mbufq
0401f5e0 g     F .text	0000001c soabort
0403a380 g     O .bss	00000004 __malloc_top_pad
0403a3e4 g     O .bss	00000004 OSTCBList
0401c1d0 g     F .text	000000c4 qdel
04026cc0 g     F .text	00000120 station_state
0402b780 g     F .text	000000f4 rt_lookup
0403a504 g     O .bss	00000004 alt_fd_list_lock
040383fc g     O .rwdata	00000004 __mb_cur_max
04018ac0 g     F .text	00000244 igmp_validate
04009314 g     F .text	0000000c _localeconv_r
040185e0 g     F .text	000001bc ip_startup
0401f134 g     F .text	000001e4 t_accept
040212cc g     F .text	00000050 soisdisconnecting
0400a440 g     F .text	0000003c __i2b
04008ccc g     F .text	0000049c __sfvwrite_r
04013c80 g     F .text	0000001c alt_avalon_sgdma_stop
04017f38 g     F .text	00000284 pktdemux
0403fac4 g     O .bss	00000c30 OSMemTbl
0403a3e8 g     O .bss	00000001 OSTickStepState
0400e428 g     F .text	00000124 settimeofday
04001b7c g     F .text	00000094 setclock
040147cc g     F .text	0000008c alt_tse_phy_wr_mdio_reg
0401c828 g     F .text	000000a4 kbhit
0401ee80 g     F .text	0000011c t_setsockopt
04003000 g     F .text	00000070 _sbrk_r
04038264 g     O .rwdata	00000018 icmpdu_types
04015edc g     F .text	0000021c alt_tse_mac_group_init
0402edac g     F .text	00000160 vunlink
040171a0 g     F .text	0000046c tse_mac_init
0403844c g     O .rwdata	00000002 OSQMax
04019968 g     F .text	00000048 ccksum
0402ef4c g     F .text	00000064 vf_alloc_buffer
0403a564 g     O .bss	00000004 cachedRoute
040384b8 g     O .rwdata	00000004 lilbufs
040406f4 g     O .bss	00000800 OSTaskStatStk
0402d874 g     F .text	00000008 md_ftell
040199b0 g     F .text	0000001c cksum
04010b60 g     F .text	000000d4 OSMemNameGet
040205d8 g     F .text	000000e8 sofree
0403a43c g     O .bss	00000004 ifNumber
0403842c g     O .rwdata	00000002 OSFlagEn
0400b9c0 g     F .text	00000078 _read_r
04038472 g     O .rwdata	00000002 OSTimeTickHookEn
0402f760 g     F .text	00000028 alt_dcache_flush
0401156c g     F .text	000000dc OSQPost
0400fbe0 g     F .text	00000040 OS_FlagUnlink
04036f54 g     O .rwdata	0000000c __lc_ctype
040384f8 g     O .rwdata	00000004 alt_max_fd
0400eb98 g     F .text	00000028 OS_MemCopy
040384c0 g     O .rwdata	00000004 bigbufs
04024f28 g     F .text	000000a8 tcp_disconnect
0400ece4 g     F .text	0000009c OS_Sched
0400dc68 g     F .text	00000138 __unpack_d
0400b740 g     F .text	00000110 _fclose_r
04010af4 g     F .text	0000006c OSMemGet
04012ad4 g     F .text	00000150 OSTaskNameSet
0400844c g     F .text	00000034 fflush
0403a384 g     O .bss	00000004 __malloc_max_sbrked_mem
0403a3ec g     O .bss	00000004 OSCtxSwCtr
04042efc g     O .bss	00000064 igmpstats
04026a60 g     F .text	00000004 OSTimeTickHook
0401b1cc g     F .text	000000d0 dhc_rx_offer
04019608 g     F .text	000000e4 bsd_getsockopt
04038436 g     O .rwdata	00000002 OSFlagNameSize
04043854 g     O .bss	00000018 ire_stats
04025c98 g     F .text	00000110 udp_soinput
0401c294 g     F .text	00000060 putq
0400ea08 g     F .text	00000060 OS_EventTaskRemoveMulti
0403a45c g     O .bss	00000004 iniche_net_ready
0400ca54 g     F .text	00000074 __adddf3
0400e910 g     F .text	000000a8 OS_EventTaskWaitMulti
0402e698 g     F .text	0000004c isvfile
0401f9b8 g     F .text	000002a4 sosetopt
0401a17c g     F .text	000000cc netmain
04021b94 g     F .text	000000ac tcp_mss
04009a04 g     F .text	00000120 __b2d
0402db38 g     F .text	00000298 parse_ipad
0402e59c g     F .text	00000008 get_vfopen_error
0403844e g     O .rwdata	00000002 OSQSize
0400c014 g     F .text	000005b0 __umoddi3
0400e290 g     F .text	0000009c lseek
04026fd8 g     F .text	0000013c inet_timer
04011ba4 g     F .text	000001a8 OSSemPend
04016584 g     F .text	00000280 alt_tse_phy_add_profile_default
040152e4 g     F .text	000002a8 alt_tse_phy_get_cap
040383e0 g     O .rwdata	00000004 _global_impure_ptr
04019a00 g     F .text	00000094 print_eth
0402f694 g     F .text	0000005c vfopen
04026568 g     F .text	0000011c alt_read
0400a9a8 g     F .text	000005f4 _realloc_r
04000bd0 g     F .text	00000180 alt_NetworkErrorHandler
04038438 g     O .rwdata	00000002 OSLowestPrio
04043a74 g       *ABS*	00000000 __bss_end
04026264 g     F .text	00000088 alt_iic_isr_register
04013d34 g     F .text	00000090 alt_avalon_sgdma_do_async_transfer
0401d650 g     F .text	000000fc m_free
04026a5c g     F .text	00000004 OSTCBInitHook
04016f0c g     F .text	00000024 tse_mac_stats
0401bd98 g     F .text	00000174 pk_validate
0403847e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0400e5e0 g     F .text	000000c0 alt_tick
0402e034 g     F .text	0000016c in_pcblookup
0401bc90 g     F .text	00000050 find_opt
0403a754 g     O .bss	00002000 NTPInitialTaskStk
0400ba38 g     F .text	000005dc __udivdi3
0401dad4 g     F .text	0000012c m_getnbuf
0401bce8 g     F .text	000000b0 dump_buf_estats
04015828 g     F .text	00000154 alt_tse_phy_check_link
0403a530 g     O .bss	00000004 arpRepsOut
04038420 g     O .rwdata	00000002 OSEventEn
04032cd8 g     O .rodata	00000028 __mprec_bigtens
0400a69c g     F .text	00000120 __s2b
0403847a g     O .rwdata	00000002 OSTmrCfgNameSize
0400d55c g     F .text	00000194 __floatunsidf
04026e38 g     F .text	000000b0 netmain_init
04014630 g     F .text	00000098 marvell_cfg_sgmii
04014cf4 g     F .text	000001ac alt_tse_phy_restart_an
04009924 g     F .text	00000060 __mcmp
0403a478 g     O .bss	00000004 dsc_requests
0402466c g     F .text	00000350 tcp_respond
040258e8 g     F .text	000001d8 udp4_sockbind
04038530 g     O .rwdata	00000004 __ctype_ptr
04001f14 g     F .text	00000008 gmtime_r
0403a4c4 g     O .bss	00000004 old_mode
04018f28 g     F .text	0000016c igmp_joingroup
0401d1d4 g     F .text	000001c8 so_icmpdu
040085b4 g     F .text	00000018 __fp_lock_all
0403a584 g     O .bss	00000004 vfs_dir_stale
040261c8 g     F .text	00000018 alt_ic_irq_enabled
04042a68 g     O .bss	00000010 pphy_profiles
0402a064 g     F .text	000000d0 ip_reasm_process_timer_tick
0402e5f4 g     F .text	00000054 vclearerr
04019354 g     F .text	000000d8 bsd_setsockopt
0401d0e0 g     F .text	0000002c mbuf_len
0400fcb0 g     F .text	00000070 OS_FlagInit
0400e5ac g     F .text	00000034 alt_alarm_stop
0402e89c g     F .text	000000ec strippath
040384b0 g     O .rwdata	00000004 reqlist
0401a4c0 g     F .text	00000118 tcp_sleep
04030ee8 g     F .text	00000024 strtol
0401b7d8 g     F .text	0000044c dhc_upcall
04024e6c g     F .text	000000bc tcp_usrclosed
0403848c g     O .rwdata	00000004 ethernet_1_name
0403a4b0 g     O .bss	00000004 cticks_factor
0403845c g     O .rwdata	00000002 OSTaskIdleStkSize
0402e210 g     F .text	00000178 in_pcbbind
0403a508 g     O .bss	00000004 alt_irq_active
04011914 g     F .text	0000004c OSSemAccept
04010d2c g     F .text	00000058 OSMemPut
04010a10 g     F .text	000000e4 OSMemCreate
0403a3f0 g     O .bss	00000004 OSIdleCtrMax
040000ec g     F .exceptions	0000009c alt_irq_handler
040380bc g     O .rwdata	00000028 alt_dev_null
040384d2 g     O .rwdata	00000001 tcprexmtthresh
04038470 g     O .rwdata	00000002 OSTicksPerSec
04028168 g     F .text	00000064 if_killsocks
04029524 g     F .text	00000110 ip_write
0402aba8 g     F .text	00000384 ip_rcv_phase2
0401eba4 g     F .text	00000008 t_getsockname
0401ef9c g     F .text	00000198 t_connect
040384cc g     O .rwdata	00000004 TCPTV_MSL
04043088 g     O .bss	00000010 memestats
04016804 g     F .text	000000f8 alt_tse_phy_init
0401c7f4 g     F .text	00000028 getch
0403835c g     O .rwdata	00000080 vfs_root_path
0401ebac g     F .text	00000008 t_getpeername
040141c4 g     F .text	00000034 alt_avalon_sgdma_check_descriptor_status
04029850 g     F .text	00000060 ip_reasm_decr_mem_useage
04020d90 g     F .text	00000088 soreserve
04026970 g       .text	00000000 OSIntCtxSw
040047a4 g     F .text	00000004 __tz_unlock
0401cdc8 g     F .text	000000d0 npalloc
04025f2c g     F .text	00000018 alt_dcache_flush_all
040097f0 g     F .text	00000070 __hi0bits
0403a560 g     O .bss	00000004 ipraw_eps
0401c00c g     F .text	000001c4 pk_init
0402d8d0 g     F .text	000000d8 md_fread
04030774 g     F .text	0000001c calloc
040177fc g     F .text	000001e0 tse_mac_raw_send
0400d484 g     F .text	000000d8 __fixdfsi
0404368c g     O .bss	00000064 intimers
04020d64 g     F .text	0000002c sbrelease
040216e0 g     F .text	0000008c ifd_clr
04020b08 g     F .text	00000050 sbdroprecord
04019a94 g     F .text	00000034 uslash
04026850 g     F .text	00000118 alt_write
0403a52c g     O .bss	00000004 arpRepsIn
0401aa84 g     F .text	00000034 dhc_get_srv_ipaddr
04026ee8 g     F .text	00000084 in_timerset
0403a3f4 g     O .bss	00000004 OSTCBFreeList
04038534 g       *ABS*	00000000 __ram_rwdata_end
04011d4c g     F .text	0000012c OSSemPendAbort
04023900 g     F .text	00000a5c tcp_output
0403a50c g     O .bss	00000004 activehost
040384f0 g     O .rwdata	00000008 alt_dev_list
04019ac8 g     F .text	00000130 parse_args
0403a4c8 g     O .bss	00000004 global_TCPwakeup_setIndx
040087a4 g     F .text	00000058 _fputc_r
04017d04 g     F .text	00000014 write
04013c50 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
0401cce4 g     F .text	000000a8 npfree
0400a8c0 g     F .text	000000e8 _putc_r
04027688 g     F .text	00000200 arpReply
040199cc g     F .text	00000034 nextarg
04038474 g     O .rwdata	00000002 OSVersionNbr
0402a50c g     F .text	000003c8 ip_reasm_process_subsequent_fragments
04038528 g     O .rwdata	00000004 pton_error
0403a46c g     O .bss	00000004 dsc_errors
040383f4 g     O .rwdata	00000008 _tzname
040001d4 g     F .text	000004f8 alt_NTPErrorHandler
04042bd8 g     O .bss	00000014 rcvdq
0402176c g     F .text	00000040 tcp_notify
040366f4 g       *ABS*	00000000 __ram_rodata_end
0400de88 g     F .text	00000090 fstat
04001dc4 g     F .text	0000002c fprintf
0401f63c g     F .text	00000098 soconnect
0402b3c0 g     F .text	00000028 ip_raw_maxalloc
04001d60 g     F .text	0000001c ctime
040143fc g     F .text	00000028 DP83848C_link_status_read
0401b29c g     F .text	0000026c dhc_discover
0402e1a0 g     F .text	00000038 in_setpeeraddr
0403841c g     O .rwdata	00000004 OSEndiannessTest
0401c740 g     F .text	00000024 clock_init
0402ea88 g     F .text	000000b4 vfgets
0402795c g     F .text	0000013c et_send
0400a57c g     F .text	00000120 __pow5mult
0403a398 g     O .bss	00000004 __nlocale_changed
0400d834 g     F .text	00000008 __umodsi3
0402de60 g     F .text	00000058 inet_addr
04029794 g     F .text	0000005c ip_reasm_check_mem_useage
0401fc5c g     F .text	000000d8 sorflush
04030f20 g     F .text	00000020 vprintf
0404319c g     O .bss	000000fc global_tcb_ext
04028708 g     F .text	000002d0 ip_fragment_lc
04042bec g     O .bss	00000300 netstatic
0401f3a8 g     F .text	00000104 t_bind
04014028 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
0403842e g     O .rwdata	00000002 OSFlagGrpSize
0401c36c g     F .text	0000009c udp_close
04013b8c g     F .text	00000010 alt_avalon_sgdma_register_callback
0401cedc g     F .text	00000120 alt_iniche_init
04043a74 g       *ABS*	00000000 end
0401c92c g     F .text	00000060 UNLOCK_NET_RESOURCE
0401ec98 g     F .text	000000d8 t_recv
0401760c g     F .text	00000128 prep_tse_mac
0402ec50 g     F .text	00000128 vfread
040181bc g     F .text	000000c4 netclose
0403075c g     F .text	0000000c _atoi_r
0401643c g     F .text	00000148 alt_tse_phy_add_profile
040384dc g     O .rwdata	00000004 tcp_keepintvl
040134fc g     F .text	000000c8 altera_avalon_jtag_uart_init
0400f8fc g     F .text	00000090 OS_TaskStat
0403a470 g     O .bss	00000004 dsc_discovers
0403805c g     O .rwdata	00000018 tcp_protosw
04031334 g       *ABS*	00000000 __CTOR_LIST__
0403a580 g     O .bss	00000004 vfopen_error
06000000 g       *ABS*	00000000 __alt_stack_pointer
0403a4fc g     O .bss	00000004 tcp_maxidle
0403a49c g     O .bss	00000004 firstudp
04013c30 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
040141f8 g     F .text	00000050 alt_avalon_timer_sc_init
0400d8d4 g     F .text	00000080 __clzsi2
0400b0c8 g     F .text	000000b4 _snprintf_r
040139b4 g     F .text	000001d8 altera_avalon_jtag_uart_write
04014120 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
040084d8 g     F .text	00000004 __sfp_lock_acquire
04009564 g     F .text	000000e4 memchr
0400eb78 g     F .text	00000020 OS_MemClr
04004808 g     F .text	00001eac ___vfprintf_internal_r
04026a64 g     F .text	000001cc OSTaskStkInit
0400b1f0 g     F .text	00000060 _sprintf_r
040140b0 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
040089b8 g     F .text	00000314 _free_r
0402c6cc g     F .text	0000009c igmpv2_chk4_rtr_alert_opt
0401e598 g     F .text	00000074 t_socketclose
0400ea68 g     F .text	000000f4 OS_EventTaskRdy
0403092c g     F .text	0000004c __srget_r
04006818 g     F .text	000001b0 __call_exitprocs
040015f0 g     F .text	00000430 encode_ntp_data
040179dc g     F .text	000001cc tse_sgdmaRx_isr
0403a3f8 g     O .bss	00000001 OSCPUUsage
04042eec g     O .bss	00000010 nets
0401ca40 g     F .text	000000cc LOCK_NET_RESOURCE
0401a640 g     F .text	00000038 dhc_resetip
0403a39c g     O .bss	00000004 __mlocale_changed
04016f30 g     F .text	00000160 tse_mac_rcv
0401f4ac g     F .text	00000078 t_socket
040383e8 g     O .rwdata	00000004 __malloc_sbrk_base
04000188 g     F .text	0000004c _start
04028058 g     F .text	00000038 etainit
0403a3c0 g     O .bss	00000004 _alt_tick_rate
04026c4c g     F .text	00000008 mcastlist
04011280 g     F .text	000001c4 OSQPend
04043098 g     O .bss	000000f0 pktlog
0402c8ac g     F .text	000000f0 igmpv2_process_report
04021640 g     F .text	0000003c ifd_isset
0402b874 g     F .text	00000124 del_route
04014158 g     F .text	0000006c alt_avalon_sgdma_open
040047a8 g     F .text	00000008 _user_strerror
04012fd0 g     F .text	000000a4 OSTimeDly
04000f30 g     F .text	00000008 get_mac_addr
0401f540 g     F .text	000000a0 solisten
0400a10c g     F .text	0000014c __lshift
0403a3c4 g     O .bss	00000004 _alt_nticks
04014424 g     F .text	0000006c alt_tse_phy_rd_mdio_reg
04017ccc g     F .text	00000038 read
040132bc g     F .text	000000fc alt_sys_init
04024380 g     F .text	00000014 tcp_quench
04019c70 g     F .text	0000013c ns_printf
04028090 g     F .text	00000078 isbcast
0401cb0c g     F .text	00000178 TK_NEWTASK
04030fb4 g     F .text	00000134 __register_exitproc
0403a3f9 g     O .bss	00000001 OSTaskCtr
04029748 g     F .text	0000004c ip_reasm_determine_type_of_frag
0403a428 g     O .bss	00000001 phy_profile_count
04030af8 g     F .text	000000f0 strncmp
040142f8 g     F .text	0000004c alt_tse_get_mac_group_index
04013074 g     F .text	00000120 OSTimeDlyHMSM
040266b8 g     F .text	00000028 alt_remap_uncached
0402b64c g     F .text	00000070 ip_raw_close
0400a258 g     F .text	000001e8 __multiply
040382ac g     O .rwdata	000000b0 mdlist
04013414 g     F .text	00000034 altera_avalon_jtag_uart_close
040191d8 g     F .text	000000c8 igmp_input
04029294 g     F .text	00000084 ip_raw_write
040366f4 g       *ABS*	00000000 __ram_rwdata_start
0402efb0 g     F .text	0000023c vfwrite_locked
04030be8 g     F .text	000000bc strncpy
04031338 g       *ABS*	00000000 __ram_rodata_start
0403a474 g     O .bss	00000004 dsc_offers
0403a598 g     O .bss	00000028 __malloc_current_mallinfo
04038422 g     O .rwdata	00000002 OSEventMax
0402d9c4 g     F .text	00000028 inet_setport
04009e04 g     F .text	0000017c __d2b
04011e78 g     F .text	000000b4 OSSemPost
04021e50 g     F .text	00000108 tcp_dooptions
0402131c g     F .text	000000a4 soisconnected
04001a20 g     F .text	00000054 init_ntp_data_gram
0400f6f8 g     F .text	00000058 OSSchedUnlock
0402b310 g     F .text	00000024 netexit
0403a458 g     O .bss	00000004 nettick_wakes
04014858 g     F .text	00000024 alt_tse_phy_wr_mdio_addr
0403a4f0 g     O .bss	00000001 tcpprintfs
04026f6c g     F .text	0000006c in_timerkill
0402c99c g     F .text	000000d4 igmpv2_input
0403a484 g     O .bss	00000004 dsc_declines
04013404 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
04019c28 g     F .text	0000001c do_trap
0402f954 g     F .text	000000e0 alt_get_fd
0401956c g     F .text	0000009c bsd_ioctl
0403a3fc g     O .bss	00000004 OSMemFreeList
0400f750 g     F .text	00000064 OSStatInit
0401dc00 g     F .text	00000140 tcp_rcv
04019c44 g     F .text	0000002c panic
0403a588 g     O .bss	00000004 vfs_open_files
0402f6f8 g     F .text	00000068 alt_busy_sleep
04017d64 g     F .text	00000140 ip2mac
0400fd20 g     F .text	00000068 OSFlagQuery
0400dda0 g     F .text	000000c8 __fpcmp_parts_d
040217ac g     F .text	000000fc sock_select
0402d600 g     F .text	000001ec dhc_setup
0402435c g     F .text	00000024 tcp_init
0403a4cc g     O .bss	00000004 cticks
0403a461 g     O .bss	00000001 to_nettick
04038458 g     O .rwdata	00000002 OSTaskCreateExtEn
0400b6d0 g     F .text	00000070 _close_r
04018280 g     F .text	00000238 Netinit
0401ced8 g     F .text	00000004 prep_armintcp
0402b1f0 g     F .text	00000110 in_addmulti
040245d0 g     F .text	0000009c tcp_template
0401558c g     F .text	00000280 alt_tse_phy_get_common_speed
0401d10c g     F .text	00000020 remque
04030f0c g     F .text	00000014 _vprintf_r
04021f58 g     F .text	0000027c tcp_reass
0402df28 g     F .text	0000010c tcp_cksum
040256bc g     F .text	0000022c udp4_socksend
0402f268 g     F .text	00000138 vfclose_locked
040216b4 g     F .text	0000002c ifd_set
040308b8 g     F .text	00000074 memcmp
0400e888 g     F .text	00000004 OS_Dummy
040133e4 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0401a718 g     F .text	00000028 dhc_set_state
0403a438 g     O .bss	00000004 NDEBUG
04043a74 g       *ABS*	00000000 __alt_stack_base
040133d8 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
04020ae8 g     F .text	00000020 sbreserve
0403a429 g     O .bss	00000001 mac_group_count
0402b4b0 g     F .text	0000019c ip_raw_input
04001e24 g     F .text	0000009c _fwrite_r
040384bc g     O .rwdata	00000004 lilbufsiz
0402167c g     F .text	00000038 ifd_get
040211d8 g     F .text	00000068 sbwakeup
040066d8 g     F .text	0000013c __swsetup_r
04040ef4 g     O .bss	000001e0 OSQTbl
04021c40 g     F .text	00000154 tcp_xmit_timer
04017090 g     F .text	00000110 tse_sgdma_read_init
0400ce8c g     F .text	00000258 __divdf3
04008650 g     F .text	000000f0 __sfp
04000eac g     F .text	00000084 generate_mac_addr
040284b0 g     F .text	000000b8 ip_bldhead
04009c68 g     F .text	00000058 __copybits
04020fe4 g     F .text	00000084 sbappend
04036b0c g     O .rwdata	00000408 __malloc_av_
040084e4 g     F .text	00000004 __sinit_lock_release
0403a400 g     O .bss	00000004 OSTCBHighRdy
0400cac8 g     F .text	000003c4 __muldf3
04029318 g     F .text	0000020c ip_write2
0400b33c g     F .text	00000060 __sread
04038514 g     O .rwdata	00000004 arp_ageout
0403a404 g     O .bss	00000004 OSQFreeList
04015c28 g     F .text	000002b4 alt_tse_mac_get_phy
04029634 g     F .text	000000c0 ip_init
0402f8a4 g     F .text	000000b0 alt_find_file
0402b3e8 g     F .text	00000040 ip_raw_free
04027888 g     F .text	000000d4 make_arp_entry
04025f4c g     F .text	000000b4 alt_dev_llist_insert
0400e7b8 g     F .text	000000c8 __malloc_lock
04001df0 g     F .text	00000034 _fprintf_r
0400e3d4 g     F .text	00000054 sbrk
040255a8 g     F .text	0000002c udp_lookup
04013c9c g     F .text	00000018 alt_avalon_sgdma_start
0400f0d8 g     F .text	0000013c OSEventNameSet
04008250 g     F .text	000001fc _fflush_r
04014be8 g     F .text	0000003c alt_tse_mac_set_duplex
0400b61c g     F .text	000000b4 _calloc_r
0403a408 g     O .bss	00000001 OSRdyGrp
0402d830 g     F .text	00000008 md_fopen
04038074 g     O .rwdata	00000018 udp_protosw
040047a0 g     F .text	00000004 __tz_lock
0402e1d8 g     F .text	00000038 in_setsockaddr
0400df18 g     F .text	00000208 gettimeofday
0403a374 g       *ABS*	00000000 __bss_start
040069f4 g     F .text	00000090 asctime_r
04020f44 g     F .text	000000a0 sbappendrecord
04043804 g     O .bss	00000050 ip_mib
04001f1c g     F .text	00000014 localtime
040026a0 g     F .text	00000098 memset
0401f5fc g     F .text	00000040 sodisconnect
04000d50 g     F .text	0000007c main
0403a3bc g     O .bss	00000004 alt_envp
0403a388 g     O .bss	00000004 __malloc_max_total_mem
0401cffc g     F .text	000000e4 m_adj
040133f4 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0400b588 g     F .text	0000001c __swbuf
0402d87c g     F .text	0000004c md_fgetc
04032e76 g     O .rodata	00000100 OSUnMapTbl
04028568 g     F .text	000001a0 ip_dump
0401a248 g     F .text	0000018c tk_stats
0403849c g     O .rwdata	00000008 alt_iniche_dev_list
0403a374 g     O .bss	00000001 to_ntp_task
04038490 g     O .rwdata	00000008 alt_sgdma_list
04038452 g     O .rwdata	00000002 OSSemEn
0403a4b4 g     O .bss	00000004 OS_TPS
0401df4c g     F .text	00000490 rawip_usrreq
04010724 g     F .text	00000220 OSFlagPost
0400b250 g     F .text	00000008 __sclose
0402daac g     F .text	00000020 print46_addr
06000000 g       *ABS*	00000000 __alt_heap_limit
0403a37c g     O .bss	00000004 lcd_sem
0400b850 g     F .text	00000014 fclose
0400e88c g     F .text	00000084 OS_EventTaskWait
04030ca4 g     F .text	00000244 _strtol_r
04019f68 g     F .text	000000e0 print_uptime
0400ec50 g     F .text	00000094 OS_TaskStatStkChk
040438e4 g     O .bss	00000190 _atexit0
040128d0 g     F .text	000000b8 OSTaskDelReq
04006c9c g     F .text	000015b4 _dtoa_r
04001f60 g     F .text	00000740 _malloc_r
0402d8c8 g     F .text	00000008 md_unlink
04014cb8 g     F .text	0000003c tse_mac_SwReset
0402e4cc g     F .text	00000038 in_pcbdetach
040384fc g     O .rwdata	00000004 alt_errno
04038524 g     O .rwdata	00000004 mdlist_size
0400ed80 g     F .text	00000054 OSStart
0402d53c g     F .text	0000000c u_mctest_init
0400e6a0 g     F .text	00000028 __env_unlock
04009230 g     F .text	000000b8 _fwalk
04012c24 g     F .text	00000118 OSTaskResume
040109ac g     F .text	00000064 OSMemQuery
0402d9ec g     F .text	000000c0 convert_ip
04027448 g     F .text	0000014c find_oldest_arp
04038464 g     O .rwdata	00000002 OSTaskStatEn
0403a524 g     O .bss	00000004 arpReqsIn
0402ed78 g     F .text	00000034 vf_free_buffer
0402f788 g     F .text	0000011c alt_fcntl
0403843e g     O .rwdata	00000002 OSMemMax
04011648 g     F .text	000000e0 OSQPostFront
0401c81c g     F .text	0000000c dtrap
040384c8 g     O .rwdata	00000004 kb_last
0400a7bc g     F .text	00000104 putc
0400d76c g     F .text	00000060 __divsi3
040152b8 g     F .text	0000002c alt_tse_mac_set_common_speed
0403a409 g     O .bss	00000003 OSRdyTbl
04038418 g     O .rwdata	00000002 OSDebugEn
04032d34 g     O .rodata	00000014 __thenan_df
04018574 g     F .text	0000006c ip_exit
0400888c g     F .text	0000012c _malloc_trim_r
04031338 g       *ABS*	00000000 __CTOR_END__
04038430 g     O .rwdata	00000002 OSFlagNodeSize
0403a468 g     O .bss	00000004 dhc_conn
0401c768 g     F .text	0000003c cticks_hook
04038478 g     O .rwdata	00000002 OSTmrCfgMax
04026c30 g     F .text	0000001c sysuptime
0400b39c g     F .text	000000bc strcmp
04029f30 g     F .text	00000134 ip_reasm_delete_ire
04010f34 g     F .text	00000108 OSQCreate
0401c7c4 g     F .text	00000030 irq_Mask
04012988 g     F .text	0000014c OSTaskNameGet
0403a514 g     O .bss	00000004 nextppp
0403a4a4 g     O .bss	00000004 irq_level
04017ea4 g     F .text	00000094 fixup_subnet_mask
04031338 g       *ABS*	00000000 __flash_rodata_start
04011728 g     F .text	00000180 OSQPostOpt
0400f7b4 g     F .text	00000114 OSTimeTick
04028214 g     F .text	000000cc ip_copypkt
0401a6bc g     F .text	00000034 dhc_alldone
04038460 g     O .rwdata	00000002 OSTaskMax
04031338 g       *ABS*	00000000 __DTOR_LIST__
04011960 g     F .text	000000a0 OSSemCreate
0403a44c g     O .bss	00000004 igmp_all_hosts_group
04038484 g     O .rwdata	00000002 OSTmrWheelSize
04020ad8 g     F .text	00000010 sbselqueue
0403a454 g     O .bss	00000004 netmain_wakes
04027ee0 g     F .text	00000178 arprcv
0401a5d8 g     F .text	00000050 TK_OSTaskResume
04018814 g     F .text	000002ac igmp_print_stats
0400d16c g     F .text	00000088 __nedf2
0401d57c g     F .text	0000006c pffindtype
0403845a g     O .rwdata	00000002 OSTaskDelEn
040384e0 g     O .rwdata	00000004 tcp_sendspace
0402e6e4 g     F .text	000000bc vftell
04042f60 g     O .bss	00000012 eth_prt_buf
04011f2c g     F .text	00000074 OSSemQuery
0401103c g     F .text	000001ec OSQDel
04011444 g     F .text	00000128 OSQPendAbort
040133b8 g     F .text	00000020 alt_irq_init
0401580c g     F .text	0000001c alt_tse_mac_get_common_speed
040433c8 g     O .bss	00000018 app_semaphore
04026684 g     F .text	00000024 alt_release_fd
0401c8cc g     F .text	00000060 post_app_sem
0401879c g     F .text	00000078 igmp_init
0400b17c g     F .text	00000074 sprintf
04032d48 g     O .rodata	00000100 __clz_tab
0403a490 g     O .bss	00000004 dsc_renew
0402d83c g     F .text	00000030 md_fwrite
0403a3a0 g     O .bss	00000004 _PathLocale
0403a4b8 g     O .bss	00000004 tcp_sleep_count
0401d12c g     F .text	00000020 insque
04030748 g     F .text	00000014 atexit
0403a57c g     O .bss	00000004 vfsfiles
0400b5a4 g     F .text	00000078 _write_r
04030f40 g     F .text	00000050 _vsprintf_r
0402bdc0 g     F .text	000001dc udp_send
0400f6b0 g     F .text	00000048 OSSchedLock
04018d04 g     F .text	000001f0 igmp_send
040093b4 g     F .text	0000001c setlocale
0400ff2c g     F .text	00000090 OSFlagCreate
0401c7a4 g     F .text	00000020 irq_Unmask
0401f318 g     F .text	00000090 t_listen
040383dc g     O .rwdata	00000004 _impure_ptr
0403a3b4 g     O .bss	00000004 alt_argc
040250dc g     F .text	000004c8 tcp_usrreq
04025ac0 g     F .text	000001d8 udp_usrreq
0401ce98 g     F .text	00000040 ncpalloc
04042978 g     O .bss	000000e0 ethernet_1_if
040260c4 g     F .text	00000064 _do_dtors
0403842a g     O .rwdata	00000002 OSEventMultiEn
0403850c g     O .rwdata	00000004 pingdelay
04027e98 g     F .text	00000048 arp_send_pending
0402c440 g     F .text	000001d0 igmpv1_input
040310e8 g     F .text	000001c4 __srefill_r
0401cc84 g     F .text	00000058 pre_task_setup
0403a4d8 g     O .bss	00000004 rcvdq_sem_ptr
040196ec g     F .text	000000d8 bsd_getsockname
040298d4 g     F .text	00000110 ip_reasm_mark_compact_rfq
0400ffbc g     F .text	000001b4 OSFlagDel
0403a40c g     O .bss	00000004 OSEventFreeList
0401a628 g     F .text	00000018 dhc_set_callback
04000020 g       .exceptions	00000000 alt_irq_entry
0403a520 g     O .bss	00000004 arpcache
0402fcc4 g     F .text	000002ac icmp_destun
0402b100 g     F .text	00000024 lookup_mcast
04001c10 g     F .text	00000008 SOFT_PHY_link_status_read
0402ec04 g     F .text	0000004c vfslookup
0402a91c g     F .text	0000028c ip_demux
04009984 g     F .text	00000080 __ulp
0400af9c g     F .text	00000040 __isinfd
0403a4bc g     O .bss	00000004 tcp_wakeup_count
040103b8 g     F .text	00000340 OSFlagPend
04038476 g     O .rwdata	00000002 OSTmrEn
0400859c g     F .text	00000018 __fp_unlock_all
0401c98c g     F .text	000000b4 wait_app_sem
04008740 g     F .text	00000064 fputc
040384a4 g     O .rwdata	00000004 ipmcfail_str
0403a4d0 g     O .bss	00000004 memtrapsize
0401dd40 g     F .text	000001e0 m_copy
040384e8 g     O .rwdata	00000008 alt_fs_list
04000b94 g     F .text	0000003c alt_ucosii_check_return_code
04043444 g     O .bss	00000014 mfreeq
0400ebf8 g     F .text	00000034 OS_StrCopy
0401f524 g     F .text	0000001c sobind
0402d7ec g     F .text	00000044 init_memdev
0401d47c g     F .text	00000100 nptcp_init
0403a3ac g     O .bss	00000008 alt_resettime
0403a390 g     O .bss	00000004 _timezone
04001f30 g     F .text	00000008 localtime_r
04038440 g     O .rwdata	00000002 OSMemNameSize
04043298 g     O .bss	000000f0 global_TCPwakeup_set
04026a54 g     F .text	00000004 OSInitHookEnd
04021268 g     F .text	00000064 soisdisconnected
04000020 g       *ABS*	00000000 __ram_exceptions_start
04003870 g     F .text	00000ebc strftime
040273e4 g     F .text	00000064 arp_free_pending
0403846c g     O .rwdata	00000002 OSTCBPrioTblMax
04009320 g     F .text	00000010 localeconv
040206c0 g     F .text	0000022c soclose
04043188 g     O .bss	00000014 bigfreeq
04038468 g     O .rwdata	00000002 OSTaskStatStkChkEn
04038508 g     O .rwdata	00000004 prompt
040384d8 g     O .rwdata	00000004 tcp_keepidle
0401487c g     F .text	0000010c alt_tse_phy_set_adv_10
0401e3dc g     F .text	0000012c rawip_soinput
0403a378 g     O .bss	00000004 NTPCommandQ
04026260 g     F .text	00000004 alt_ic_isr_register
0402f1ec g     F .text	0000007c vfwrite
0403843c g     O .rwdata	00000002 OSMemEn
04020a14 g     F .text	00000040 soqinsque
0403a558 g     O .bss	00000004 so_evtmap_delete
04001ec0 g     F .text	00000040 fwrite
04038446 g     O .rwdata	00000002 OSMutexEn
0403a544 g     O .bss	00000004 h_ireq
04038534 g       *ABS*	00000000 _edata
040289d8 g     F .text	000003f0 ip_fragment
04017bb8 g     F .text	00000114 iniche_devices_init
04043458 g     O .bss	00000028 tcp_saveti
04019dac g     F .text	000000b8 con_page
04043a74 g       *ABS*	00000000 _end
0401f6e4 g     F .text	000002d4 sogetopt
0403a410 g     O .bss	00000001 OSIntNesting
04015a58 g     F .text	000001d0 alt_tse_mac_associate_phy
0403802c g     O .rwdata	00000030 nettasks
0401bce0 g     F .text	00000008 pk_get_max_intrsafe_buf_len
040282e0 g     F .text	00000158 iproute
0401d39c g     F .text	00000088 np_stripoptions
0403a55c g     O .bss	00000001 so_evtmap
04000188 g       *ABS*	00000000 __ram_exceptions_end
04013764 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
040087fc g     F .text	00000074 _fputs_r
04013194 g     F .text	00000104 OSTimeDlyResume
0402b998 g     F .text	00000278 add_route
0401028c g     F .text	0000012c OSFlagNameSet
04017d18 g     F .text	0000004c c_older
04020d00 g     F .text	00000064 sbflush
0402d838 g     F .text	00000004 md_fclose
0401a3d4 g     F .text	00000008 tk_yield
04012d3c g     F .text	0000011c OSTaskStkChk
04026220 g     F .text	00000040 alt_ic_irq_disable
0401fdb8 g     F .text	00000324 sosend
04038442 g     O .rwdata	00000002 OSMemSize
04028438 g     F .text	00000078 ip_mymach
04013f90 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
0400b2c0 g     F .text	0000007c __swrite
0403a4a0 g     O .bss	00000004 cticks_initialized
04038510 g     O .rwdata	00000004 deflength
040383e4 g     O .rwdata	00000004 __malloc_trim_threshold
0401e710 g     F .text	000001a8 t_sendto
04002e54 g     F .text	0000006c _perror_r
0403a414 g     O .bss	00000004 OSTCBCur
040208ec g     F .text	00000128 socreate
04001d8c g     F .text	00000038 exit
040436f0 g     O .bss	00000100 arp_table
040011cc g     F .text	00000424 decode_ntp_data
0403a594 g     O .bss	00000004 icmpdu_hook
04038444 g     O .rwdata	00000002 OSMemTblSize
04009168 g     F .text	000000c8 _fwalk_reent
04027114 g     F .text	00000008 create_apptasks
040384d4 g     O .rwdata	00000004 tcp_ttl
04009f80 g     F .text	0000018c __mdiff
0401cd8c g     F .text	00000030 ncpfree
0400d7cc g     F .text	00000060 __modsi3
0403a430 g     O .bss	00000004 MaxLnh
04014c80 g     F .text	0000001c tse_mac_setGMIImode
0402dacc g     F .text	0000006c inet_ntop
0402bcec g     F .text	00000014 udp_maxalloc
040146c8 g     F .text	00000098 marvell_cfg_gmii
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040084dc g     F .text	00000004 __sfp_lock_release
0400edd4 g     F .text	000001dc OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
0401597c g     F .text	000000dc alt_tse_phy_cfg_pcs
04011fd0 g     F .text	00000104 OSTaskQuery
040366f4 g     O .rwdata	00000018 ntp_task
04026de0 g     F .text	00000058 icmp_port_du
0403a500 g     O .bss	00000004 tcp_iss
04010d84 g     F .text	00000050 OS_QInit
04030768 g     F .text	0000000c atoi
040384c4 g     O .rwdata	00000004 bigbufsiz
0400ec2c g     F .text	00000024 OS_StrLen
04024394 g     F .text	00000024 tcp_putseq
04010c34 g     F .text	000000f8 OSMemNameSet
04036470 g     O .rodata	00000101 _ctype_
04021068 g     F .text	00000170 sbappendaddr
0403a58c g     O .bss	00000004 vfs_total_rw_space
0402cb3c g     F .text	0000008c ip_getmoptions
0403845e g     O .rwdata	00000002 OSTaskProfileEn
0402bc10 g     F .text	00000054 udpswap
0403a418 g     O .bss	00000004 OSTime
0403a4dc g     O .bss	00000004 nextslow
04024cb0 g     F .text	000001bc tcp_slowtimo
04024544 g     F .text	0000008c tcp_newtcpcb
04027d84 g     F .text	00000114 send_via_arp
0401bc24 g     F .text	0000006c dhc_init
040298b0 g     F .text	00000024 ip_reasm_find_ire
040410d4 g     O .bss	00000800 OSTaskIdleStk
0402e5d0 g     F .text	00000024 isvfile_locked
0400afdc g     F .text	00000030 __isnand
0400de68 g     F .text	00000020 _exit
0401942c g     F .text	00000044 bsd_select
04025da8 g     F .text	00000094 alt_alarm_start
04010170 g     F .text	0000011c OSFlagNameGet
0402bd00 g     F .text	00000040 udp_free
0401c2f4 g     F .text	00000078 getq
0402f6f0 g     F .text	00000008 prep_vfs
04013298 g     F .text	00000024 OSTimeGet
04038504 g     O .rwdata	00000004 name
04001f00 g     F .text	00000014 gmtime
04020b58 g     F .text	00000094 sbdropend
0400d83c g     F .text	00000098 __muldi3
040093d0 g     F .text	00000194 __smakebuf_r
04027594 g     F .text	000000f4 cb_arpent_tmo
0400472c g     F .text	00000074 strlen
0402ca70 g     F .text	000000cc IPADDR_TO_NETP
04019568 g     F .text	00000004 bsd_inet_ntoa
04026a48 g     F .text	00000004 OSTaskSwHook
040263e8 g     F .text	00000180 open
0401c408 g     F .text	000001a4 udp_open
040418d4 g     O .bss	00000b40 OSEventTbl
04021254 g     F .text	00000014 socantsendmore
0403a590 g     O .bss	00000004 vfs_total_dyna_files
0400d27c g     F .text	00000088 __gedf2
04042414 g     O .bss	00000510 OSTCBTbl
0403a528 g     O .bss	00000004 arpReqsOut
040118a8 g     F .text	0000006c OSSemSet
0403852c g     O .rwdata	00000004 http_root_path
0401a758 g     F .text	000001a4 dhc_extract_opts
04029c2c g     F .text	00000304 ip_reasm_compute_overlap
040069c8 g     F .text	00000018 abs
04016d74 g     F .text	00000064 tse_mac_aRxRead
040261bc g     F .text	0000000c alt_icache_flush_all
0403098c g     F .text	000000e0 strchr
04001188 g     F .text	00000044 NTPCreateOSDataStructs
04042f72 g     O .bss	00000012 ipreturn
0403a54c g     O .bss	00000004 port_prep
040380af g     O .rwdata	0000000d tcp_backoff
040213c0 g     F .text	00000020 soisconnecting
04008870 g     F .text	0000001c fputs
04038500 g     O .rwdata	00000004 alt_priority_mask
0402c768 g     F .text	00000144 igmpv2_process_query
04021998 g     F .text	000001e0 t_select
04011a00 g     F .text	000001a4 OSSemDel
040255d4 g     F .text	000000e8 udp4_sockaddr
0403a41c g     O .bss	00000004 OSFlagFreeList
0402e388 g     F .text	00000144 in_pcbconnect
0403a4f4 g     O .bss	00000004 dropline
0403a548 g     O .bss	00000004 ire_cticks
040261e0 g     F .text	00000040 alt_ic_irq_enable
04038424 g     O .rwdata	00000002 OSEventNameSize
040066b4 g     F .text	00000024 __vfprintf_internal
0401a0f8 g     F .text	00000084 tk_netmain
0402e504 g     F .text	00000024 in_pcbdisconnect
0403a420 g     O .bss	00000001 OSStatRdy
04042924 g     O .bss	00000054 OSTCBPrioTbl
0400e6c8 g     F .text	00000090 __env_lock
0403846a g     O .rwdata	00000002 OSTaskSwHookEn
04038288 g     O .rwdata	00000024 mdio
04014c24 g     F .text	0000005c alt_tse_mac_set_speed
0401989c g     F .text	000000cc bsd_accept
040140d8 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
040384e4 g     O .rwdata	00000004 tcp_recvspace
0403c754 g     O .bss	00002000 lcddisplaytime_task_stack
0400c9d4 g     F .text	00000080 __subdf3
040255a4 g     F .text	00000004 tcpinit
0403a450 g     O .bss	00000004 igmp_all_rtrs_group
0401df20 g     F .text	0000002c rawip_lookup
0402718c g     F .text	00000054 fcntl
04009860 g     F .text	000000c4 __lo0bits
04020e18 g     F .text	0000012c sbcompress
04002738 g     F .text	00000234 __tzcalc_limits
04038408 g     O .rwdata	00000008 alt_alarm_list
040244a4 g     F .text	000000a0 tcp_drop
04038432 g     O .rwdata	00000002 OSFlagWidth
04026060 g     F .text	00000064 _do_ctors
04014988 g     F .text	00000154 alt_tse_phy_set_adv_100
040249d0 g     F .text	000002e0 tcp_timers
040184b8 g     F .text	00000060 if_netnumber
0402cbc8 g     F .text	00000078 ip_freemoptions
0401f6d4 g     F .text	00000010 sohasoutofband
040221d4 g     F .text	00001678 tcp_input
040197c4 g     F .text	000000d8 bsd_getpeername
04019470 g     F .text	000000f8 bsd_recvfrom
04017ba8 g     F .text	00000010 close
0403a480 g     O .bss	00000004 dsc_bpreplys
0403a3cc g     O .bss	00000004 alt_envsem
0403a424 g     O .bss	00000004 OSIdleCtrRun
0400e880 g     F .text	00000008 OSVersion
0403847c g     O .rwdata	00000002 OSTmrCfgWheelSize
0400e1a4 g     F .text	00000080 alt_load
04011fa0 g     F .text	00000030 OS_TaskStkClr
0402e594 g     F .text	00000008 set_vfopen_error
0400d954 g     F .text	00000314 __pack_d
04038456 g     O .rwdata	00000002 OSTaskCreateEn
040142b8 g     F .text	00000040 alt_tse_get_system_index
0403808c g     O .rwdata	00000018 rawip_protosw
040213e0 g     F .text	0000003c sbwait
0400eb5c g     F .text	0000001c OS_EventWaitListInit
0401b508 g     F .text	000002d0 dhc_second
04013b9c g     F .text	00000094 alt_avalon_sgdma_init
0403a518 g     O .bss	00000004 port_1s_callout
040092e8 g     F .text	0000000c __gettzinfo
04026a58 g     F .text	00000004 OSTaskIdleHook
0400296c g     F .text	000004e8 _mktm_r
04001f38 g     F .text	00000014 free
040084e0 g     F .text	00000004 __sinit_lock_acquire
0403a42c g     O .bss	00000001 number_of_tse_mac
0400a47c g     F .text	00000100 __multadd
04012e58 g     F .text	00000154 OSTaskSuspend
040097c8 g     F .text	00000028 _Bfree
04014284 g     F .text	00000018 no_printf
0402141c g     F .text	0000017c sonewconn
0402ff70 g     F .text	000007d8 icmprcv
0401d5e8 g     F .text	00000068 pffindproto
0400f8c8 g     F .text	00000034 OS_TaskIdle
04038482 g     O .rwdata	00000002 OSTmrTblSize
04010dd4 g     F .text	000000b0 OSQQuery



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406214 	ori	at,at,392
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defffe04 	addi	sp,sp,-8
 40000f0:	dfc00115 	stw	ra,4(sp)
 40000f4:	dc000015 	stw	r16,0(sp)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000f8:	400f5a00 	call	400f5a0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40000fc:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000100:	2880004c 	andi	r2,r5,1
 4000104:	1005003a 	cmpeq	r2,r2,zero
 4000108:	04010134 	movhi	r16,1028
 400010c:	840d6304 	addi	r16,r16,13708
 4000110:	10001126 	beq	r2,zero,4000158 <alt_irq_handler+0x6c>
 4000114:	00c00044 	movi	r3,1
 4000118:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 400011c:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000120:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 4000124:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000128:	103ffc26 	beq	r2,zero,400011c <alt_irq_handler+0x30>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	200490fa 	slli	r2,r4,3
 4000130:	1405883a 	add	r2,r2,r16
 4000134:	11000117 	ldw	r4,4(r2)
 4000138:	10c00017 	ldw	r3,0(r2)
 400013c:	183ee83a 	callr	r3
 4000140:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 4000144:	10000c26 	beq	r2,zero,4000178 <alt_irq_handler+0x8c>
 4000148:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400014c:	2880004c 	andi	r2,r5,1
 4000150:	1005003a 	cmpeq	r2,r2,zero
 4000154:	103fef1e 	bne	r2,zero,4000114 <alt_irq_handler+0x28>
 4000158:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400015c:	200490fa 	slli	r2,r4,3
 4000160:	1405883a 	add	r2,r2,r16
 4000164:	11000117 	ldw	r4,4(r2)
 4000168:	10c00017 	ldw	r3,0(r2)
 400016c:	183ee83a 	callr	r3
 4000170:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 4000174:	103ff41e 	bne	r2,zero,4000148 <alt_irq_handler+0x5c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 4000178:	dfc00117 	ldw	ra,4(sp)
 400017c:	dc000017 	ldw	r16,0(sp)
 4000180:	dec00204 	addi	sp,sp,8

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	400f5e01 	jmpi	400f5e0 <OSIntExit>

Disassembly of section .text:

04000188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 400018c:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000190:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 4000194:	00bffd16 	blt	zero,r2,400018c <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000198:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 400019c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001a0:	06810134 	movhi	gp,1028
    ori gp, gp, %lo(_gp)
 40001a4:	d680f714 	ori	gp,gp,988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001a8:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 40001ac:	10a8dd14 	ori	r2,r2,41844

    movhi r3, %hi(__bss_end)
 40001b0:	00c10134 	movhi	r3,1028
    ori r3, r3, %lo(__bss_end)
 40001b4:	18ce9d14 	ori	r3,r3,14964

    beq r2, r3, 1f
 40001b8:	10c00326 	beq	r2,r3,40001c8 <_start+0x40>

0:
    stw zero, (r2)
 40001bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001c4:	10fffd36 	bltu	r2,r3,40001bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001c8:	400e1a40 	call	400e1a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001cc:	400e32c0 	call	400e32c <alt_main>

040001d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001d0:	003fff06 	br	40001d0 <alt_after_alt_main>

040001d4 <alt_NTPErrorHandler>:
}
   
   
void alt_NTPErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
 40001d4:	defffc04 	addi	sp,sp,-16
 40001d8:	dc000015 	stw	r16,0(sp)
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
 40001dc:	24003fcc 	andi	r16,r4,255
}
   
   
void alt_NTPErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
 40001e0:	dc400115 	stw	r17,4(sp)
 40001e4:	dfc00315 	stw	ra,12(sp)
 40001e8:	dc800215 	stw	r18,8(sp)
 40001ec:	2823883a 	mov	r17,r5
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
 40001f0:	8000061e 	bne	r16,zero,400020c <alt_NTPErrorHandler+0x38>
      //default:
         //printf("\n[NTP]: See STDERR (FAULT_LEVEL is Unknown).\n");
         //fprintf(stderr, "\n[NTP] FAULT_LEVEL is unknown!?!\n");
   //}
   //while(1); /* Correct Program Flow never gets here. */
}
 40001f4:	dfc00317 	ldw	ra,12(sp)
 40001f8:	dc800217 	ldw	r18,8(sp)
 40001fc:	dc400117 	ldw	r17,4(sp)
 4000200:	dc000017 	ldw	r16,0(sp)
 4000204:	dec00404 	addi	sp,sp,16
 4000208:	f800283a 	ret
      return;
   }

   fault_level = (error_code == OS_NO_ERR) ? NONE : SYSTEM;
   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 400020c:	400f6b00 	call	400f6b0 <OSSchedLock>
   switch (error_code)
 4000210:	00800784 	movi	r2,30
 4000214:	8080a526 	beq	r16,r2,40004ac <alt_NTPErrorHandler+0x2d8>
 4000218:	00803fc4 	movi	r2,255
 400021c:	80807f26 	beq	r16,r2,400041c <alt_NTPErrorHandler+0x248>
         fprintf(stderr,"\n[NTP]: Attempted to post to a full message queue.");
         break;
      
      default:
         fault_level = SYSTEM;
         printf("\n[NTP]: See STDERR.\n");    
 4000220:	010100f4 	movhi	r4,1027
 4000224:	2104f904 	addi	r4,r4,5092
         fprintf(stderr, "\n[NTP]: Error_code %d!", error_code);        
 4000228:	04810134 	movhi	r18,1028
 400022c:	94a0f704 	addi	r18,r18,-31780
         fprintf(stderr,"\n[NTP]: Attempted to post to a full message queue.");
         break;
      
      default:
         fault_level = SYSTEM;
         printf("\n[NTP]: See STDERR.\n");    
 4000230:	4002fec0 	call	4002fec <puts>
         fprintf(stderr, "\n[NTP]: Error_code %d!", error_code);        
 4000234:	90c00017 	ldw	r3,0(r18)
 4000238:	014100f4 	movhi	r5,1027
 400023c:	2944fe04 	addi	r5,r5,5112
 4000240:	800d883a 	mov	r6,r16
 4000244:	19000317 	ldw	r4,12(r3)
 4000248:	4001dc40 	call	4001dc4 <fprintf>
         perror("\n[NTP]:  ERRNO: ");
 400024c:	010100f4 	movhi	r4,1027
 4000250:	21050404 	addi	r4,r4,5136
 4000254:	4002ec00 	call	4002ec0 <perror>
   }
  printf("[Program Error]: See STDERR\n");
 4000258:	010100f4 	movhi	r4,1027
 400025c:	2104e504 	addi	r4,r4,5012
 4000260:	4002fec0 	call	4002fec <puts>
  switch (error_code) {
 4000264:	00c01904 	movi	r3,100
 4000268:	1c008036 	bltu	r3,r16,400046c <alt_NTPErrorHandler+0x298>
 400026c:	8405883a 	add	r2,r16,r16
 4000270:	1085883a 	add	r2,r2,r2
 4000274:	00c10034 	movhi	r3,1024
 4000278:	18c0a204 	addi	r3,r3,648
 400027c:	10c5883a 	add	r2,r2,r3
 4000280:	11000017 	ldw	r4,0(r2)
 4000284:	2000683a 	jmp	r4
 4000288:	0400046c 	andhi	r16,zero,17
 400028c:	0400060c 	andi	r16,zero,24
 4000290:	0400062c 	andhi	r16,zero,24
 4000294:	0400064c 	andi	r16,zero,25
 4000298:	0400066c 	andhi	r16,zero,25
 400029c:	0400046c 	andhi	r16,zero,17
 40002a0:	0400046c 	andhi	r16,zero,17
 40002a4:	0400046c 	andhi	r16,zero,17
 40002a8:	0400046c 	andhi	r16,zero,17
 40002ac:	0400046c 	andhi	r16,zero,17
 40002b0:	0400068c 	andi	r16,zero,26
 40002b4:	0400046c 	andhi	r16,zero,17
 40002b8:	0400046c 	andhi	r16,zero,17
 40002bc:	0400046c 	andhi	r16,zero,17
 40002c0:	0400046c 	andhi	r16,zero,17
 40002c4:	0400046c 	andhi	r16,zero,17
 40002c8:	0400046c 	andhi	r16,zero,17
 40002cc:	0400046c 	andhi	r16,zero,17
 40002d0:	0400046c 	andhi	r16,zero,17
 40002d4:	0400046c 	andhi	r16,zero,17
 40002d8:	040006ac 	andhi	r16,zero,26
 40002dc:	0400046c 	andhi	r16,zero,17
 40002e0:	0400046c 	andhi	r16,zero,17
 40002e4:	0400046c 	andhi	r16,zero,17
 40002e8:	0400046c 	andhi	r16,zero,17
 40002ec:	0400046c 	andhi	r16,zero,17
 40002f0:	0400046c 	andhi	r16,zero,17
 40002f4:	0400046c 	andhi	r16,zero,17
 40002f8:	0400046c 	andhi	r16,zero,17
 40002fc:	0400046c 	andhi	r16,zero,17
 4000300:	040004dc 	xori	r16,zero,19
 4000304:	0400046c 	andhi	r16,zero,17
 4000308:	0400046c 	andhi	r16,zero,17
 400030c:	0400046c 	andhi	r16,zero,17
 4000310:	0400046c 	andhi	r16,zero,17
 4000314:	0400046c 	andhi	r16,zero,17
 4000318:	0400046c 	andhi	r16,zero,17
 400031c:	0400046c 	andhi	r16,zero,17
 4000320:	0400046c 	andhi	r16,zero,17
 4000324:	0400046c 	andhi	r16,zero,17
 4000328:	040004fc 	xorhi	r16,zero,19
 400032c:	0400046c 	andhi	r16,zero,17
 4000330:	0400051c 	xori	r16,zero,20
 4000334:	0400046c 	andhi	r16,zero,17
 4000338:	0400046c 	andhi	r16,zero,17
 400033c:	0400046c 	andhi	r16,zero,17
 4000340:	0400046c 	andhi	r16,zero,17
 4000344:	0400046c 	andhi	r16,zero,17
 4000348:	0400046c 	andhi	r16,zero,17
 400034c:	0400046c 	andhi	r16,zero,17
 4000350:	0400046c 	andhi	r16,zero,17
 4000354:	0400046c 	andhi	r16,zero,17
 4000358:	0400046c 	andhi	r16,zero,17
 400035c:	0400046c 	andhi	r16,zero,17
 4000360:	0400046c 	andhi	r16,zero,17
 4000364:	0400046c 	andhi	r16,zero,17
 4000368:	0400046c 	andhi	r16,zero,17
 400036c:	0400046c 	andhi	r16,zero,17
 4000370:	0400046c 	andhi	r16,zero,17
 4000374:	0400046c 	andhi	r16,zero,17
 4000378:	0400046c 	andhi	r16,zero,17
 400037c:	04000554 	movui	r16,21
 4000380:	04000574 	movhi	r16,21
 4000384:	0400046c 	andhi	r16,zero,17
 4000388:	04000594 	movui	r16,22
 400038c:	0400046c 	andhi	r16,zero,17
 4000390:	040005b4 	movhi	r16,22
 4000394:	0400046c 	andhi	r16,zero,17
 4000398:	0400046c 	andhi	r16,zero,17
 400039c:	0400046c 	andhi	r16,zero,17
 40003a0:	0400046c 	andhi	r16,zero,17
 40003a4:	0400046c 	andhi	r16,zero,17
 40003a8:	0400046c 	andhi	r16,zero,17
 40003ac:	0400046c 	andhi	r16,zero,17
 40003b0:	0400046c 	andhi	r16,zero,17
 40003b4:	0400046c 	andhi	r16,zero,17
 40003b8:	0400046c 	andhi	r16,zero,17
 40003bc:	0400046c 	andhi	r16,zero,17
 40003c0:	0400046c 	andhi	r16,zero,17
 40003c4:	0400046c 	andhi	r16,zero,17
 40003c8:	0400046c 	andhi	r16,zero,17
 40003cc:	0400046c 	andhi	r16,zero,17
 40003d0:	0400046c 	andhi	r16,zero,17
 40003d4:	0400046c 	andhi	r16,zero,17
 40003d8:	0400046c 	andhi	r16,zero,17
 40003dc:	0400046c 	andhi	r16,zero,17
 40003e0:	0400046c 	andhi	r16,zero,17
 40003e4:	0400046c 	andhi	r16,zero,17
 40003e8:	0400046c 	andhi	r16,zero,17
 40003ec:	0400046c 	andhi	r16,zero,17
 40003f0:	0400046c 	andhi	r16,zero,17
 40003f4:	0400046c 	andhi	r16,zero,17
 40003f8:	0400046c 	andhi	r16,zero,17
 40003fc:	0400046c 	andhi	r16,zero,17
 4000400:	0400046c 	andhi	r16,zero,17
 4000404:	0400046c 	andhi	r16,zero,17
 4000408:	0400046c 	andhi	r16,zero,17
 400040c:	0400046c 	andhi	r16,zero,17
 4000410:	0400046c 	andhi	r16,zero,17
 4000414:	0400046c 	andhi	r16,zero,17
 4000418:	040005ec 	andhi	r16,zero,23
   switch (error_code)
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
         printf("\n[NTP]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[NTP]: %s", (char *)expanded_diagnosis_ptr);
 400041c:	04810134 	movhi	r18,1028
 4000420:	94a0f704 	addi	r18,r18,-31780
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
   switch (error_code)
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
         printf("\n[NTP]: See STDERR for expanded diagnosis translation.");    
 4000424:	010100f4 	movhi	r4,1027
 4000428:	2104ce04 	addi	r4,r4,4920
 400042c:	4002ed40 	call	4002ed4 <printf>
         fprintf(stderr, "\n[NTP]: %s", (char *)expanded_diagnosis_ptr);
 4000430:	90c00017 	ldw	r3,0(r18)
 4000434:	880d883a 	mov	r6,r17
 4000438:	014100f4 	movhi	r5,1027
 400043c:	2944dc04 	addi	r5,r5,4976
 4000440:	19000317 	ldw	r4,12(r3)
 4000444:	4001dc40 	call	4001dc4 <fprintf>
		 fprintf(stderr, "\n[NTP]: Error_code %d!\n", error_code);
 4000448:	90c00017 	ldw	r3,0(r18)
 400044c:	800d883a 	mov	r6,r16
 4000450:	014100f4 	movhi	r5,1027
 4000454:	2944df04 	addi	r5,r5,4988
 4000458:	19000317 	ldw	r4,12(r3)
 400045c:	4001dc40 	call	4001dc4 <fprintf>
         fault_level = SYSTEM;
         printf("\n[NTP]: See STDERR.\n");    
         fprintf(stderr, "\n[NTP]: Error_code %d!", error_code);        
         perror("\n[NTP]:  ERRNO: ");
   }
  printf("[Program Error]: See STDERR\n");
 4000460:	010100f4 	movhi	r4,1027
 4000464:	2104e504 	addi	r4,r4,5012
 4000468:	4002fec0 	call	4002fec <puts>
      break;
    case OS_ERR_NOT_MUTEX_OWNER:
      fprintf(stderr, "Attempted to post a mutex that is not owned by the task\n");
      break;
    default:
      fprintf(stderr, "Unknown Error\n");
 400046c:	90800017 	ldw	r2,0(r18)
 4000470:	010100f4 	movhi	r4,1027
 4000474:	2105d504 	addi	r4,r4,5972
 4000478:	01400044 	movi	r5,1
 400047c:	11c00317 	ldw	r7,12(r2)
 4000480:	01800384 	movi	r6,14
 4000484:	4001ec00 	call	4001ec0 <fwrite>
      break;
  }
  fprintf(stderr, "Program is terminating.\n");
 4000488:	90800017 	ldw	r2,0(r18)
 400048c:	010100f4 	movhi	r4,1027
 4000490:	2105d904 	addi	r4,r4,5988
 4000494:	01400044 	movi	r5,1
 4000498:	11c00317 	ldw	r7,12(r2)
 400049c:	01800604 	movi	r6,24
 40004a0:	4001ec00 	call	4001ec0 <fwrite>
  exit(0);
 40004a4:	0009883a 	mov	r4,zero
 40004a8:	4001d8c0 	call	4001d8c <exit>
		 fprintf(stderr, "\n[NTP]: Error_code %d!\n", error_code);
         break;
         
      case OS_Q_FULL:
         fault_level = NONE;
         fprintf(stderr,"\n[NTP]: Attempted to post to a full message queue.");
 40004ac:	04810134 	movhi	r18,1028
 40004b0:	94a0f704 	addi	r18,r18,-31780
 40004b4:	90800017 	ldw	r2,0(r18)
 40004b8:	010100f4 	movhi	r4,1027
 40004bc:	2104ec04 	addi	r4,r4,5040
 40004c0:	01400044 	movi	r5,1
 40004c4:	11c00317 	ldw	r7,12(r2)
 40004c8:	01800c84 	movi	r6,50
 40004cc:	4001ec00 	call	4001ec0 <fwrite>
         fault_level = SYSTEM;
         printf("\n[NTP]: See STDERR.\n");    
         fprintf(stderr, "\n[NTP]: Error_code %d!", error_code);        
         perror("\n[NTP]:  ERRNO: ");
   }
  printf("[Program Error]: See STDERR\n");
 40004d0:	010100f4 	movhi	r4,1027
 40004d4:	2104e504 	addi	r4,r4,5012
 40004d8:	4002fec0 	call	4002fec <puts>
      break;
    case OS_TASK_DEL_ISR:
      fprintf(stderr, "Attempted to delete a task from an ISR\n");
      break;
    case OS_Q_FULL:
      fprintf(stderr, "Attempted to post to a full message queue\n");
 40004dc:	90800017 	ldw	r2,0(r18)
 40004e0:	010100f4 	movhi	r4,1027
 40004e4:	2105bb04 	addi	r4,r4,5868
 40004e8:	01400044 	movi	r5,1
 40004ec:	11c00317 	ldw	r7,12(r2)
 40004f0:	01800a84 	movi	r6,42
 40004f4:	4001ec00 	call	4001ec0 <fwrite>
 40004f8:	003fe306 	br	4000488 <alt_NTPErrorHandler+0x2b4>
         perror("\n[NTP]:  ERRNO: ");
   }
  printf("[Program Error]: See STDERR\n");
  switch (error_code) {
    case OS_PRIO_EXIST:
      fprintf(stderr, "Attempted to assign a task priority that is aready in use.\n");
 40004fc:	90800017 	ldw	r2,0(r18)
 4000500:	010100f4 	movhi	r4,1027
 4000504:	21050904 	addi	r4,r4,5156
 4000508:	01400044 	movi	r5,1
 400050c:	11c00317 	ldw	r7,12(r2)
 4000510:	01800ec4 	movi	r6,59
 4000514:	4001ec00 	call	4001ec0 <fwrite>
 4000518:	003fdb06 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_PRIO_INVALID:
      fprintf(stderr, "Specified a task priority higher than the allowed maximum.\n");
 400051c:	90800017 	ldw	r2,0(r18)
 4000520:	010100f4 	movhi	r4,1027
 4000524:	21051804 	addi	r4,r4,5216
 4000528:	01400044 	movi	r5,1
 400052c:	11c00317 	ldw	r7,12(r2)
 4000530:	01800ec4 	movi	r6,59
 4000534:	4001ec00 	call	4001ec0 <fwrite>
      fprintf(stderr, "Task can not be assigned a priority higher than %d\n",OS_LOWEST_PRIO);
 4000538:	90c00017 	ldw	r3,0(r18)
 400053c:	014100f4 	movhi	r5,1027
 4000540:	29452704 	addi	r5,r5,5276
 4000544:	01800504 	movi	r6,20
 4000548:	19000317 	ldw	r4,12(r3)
 400054c:	4001dc40 	call	4001dc4 <fprintf>
 4000550:	003fcd06 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_TASK_DEL_IDLE:
      fprintf(stderr, "Attempted to delete the IDLE task\n");
      break;
    case OS_TASK_DEL_ERR:
      fprintf(stderr, "Attempted to delete a task that does not exist\n");
 4000554:	90800017 	ldw	r2,0(r18)
 4000558:	010100f4 	movhi	r4,1027
 400055c:	2105a504 	addi	r4,r4,5780
 4000560:	01400044 	movi	r5,1
 4000564:	11c00317 	ldw	r7,12(r2)
 4000568:	01800bc4 	movi	r6,47
 400056c:	4001ec00 	call	4001ec0 <fwrite>
 4000570:	003fc506 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_ERR_PEND_ISR:
      fprintf(stderr, "Attempting to pending for a resource in an ISR\n");
      break;
    case OS_TASK_DEL_IDLE:
      fprintf(stderr, "Attempted to delete the IDLE task\n");
 4000574:	90800017 	ldw	r2,0(r18)
 4000578:	010100f4 	movhi	r4,1027
 400057c:	21059c04 	addi	r4,r4,5744
 4000580:	01400044 	movi	r5,1
 4000584:	11c00317 	ldw	r7,12(r2)
 4000588:	01800884 	movi	r6,34
 400058c:	4001ec00 	call	4001ec0 <fwrite>
 4000590:	003fbd06 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_TASK_DEL_ERR:
      fprintf(stderr, "Attempted to delete a task that does not exist\n");
      break;
    case OS_TASK_DEL_ISR:
      fprintf(stderr, "Attempted to delete a task from an ISR\n");
 4000594:	90800017 	ldw	r2,0(r18)
 4000598:	010100f4 	movhi	r4,1027
 400059c:	2105b104 	addi	r4,r4,5828
 40005a0:	01400044 	movi	r5,1
 40005a4:	11c00317 	ldw	r7,12(r2)
 40005a8:	018009c4 	movi	r6,39
 40005ac:	4001ec00 	call	4001ec0 <fwrite>
 40005b0:	003fb506 	br	4000488 <alt_NTPErrorHandler+0x2b4>
    case OS_PRIO_INVALID:
      fprintf(stderr, "Specified a task priority higher than the allowed maximum.\n");
      fprintf(stderr, "Task can not be assigned a priority higher than %d\n",OS_LOWEST_PRIO);
      break;
    case OS_NO_MORE_TCB:
      fprintf(stderr, "Task Control Blocks have been exhausted\n");
 40005b4:	90800017 	ldw	r2,0(r18)
 40005b8:	010100f4 	movhi	r4,1027
 40005bc:	21053404 	addi	r4,r4,5328
 40005c0:	01400044 	movi	r5,1
 40005c4:	11c00317 	ldw	r7,12(r2)
 40005c8:	01800a04 	movi	r6,40
 40005cc:	4001ec00 	call	4001ec0 <fwrite>
      fprintf(stderr, "The current max number of task is %d\n",OS_MAX_TASKS);
 40005d0:	90c00017 	ldw	r3,0(r18)
 40005d4:	014100f4 	movhi	r5,1027
 40005d8:	29453f04 	addi	r5,r5,5372
 40005dc:	01800284 	movi	r6,10
 40005e0:	19000317 	ldw	r4,12(r3)
 40005e4:	4001dc40 	call	4001dc4 <fprintf>
 40005e8:	003fa706 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_Q_FULL:
      fprintf(stderr, "Attempted to post to a full message queue\n");
      break;
    case OS_ERR_NOT_MUTEX_OWNER:
      fprintf(stderr, "Attempted to post a mutex that is not owned by the task\n");
 40005ec:	90800017 	ldw	r2,0(r18)
 40005f0:	010100f4 	movhi	r4,1027
 40005f4:	2105c604 	addi	r4,r4,5912
 40005f8:	01400044 	movi	r5,1
 40005fc:	11c00317 	ldw	r7,12(r2)
 4000600:	01800e04 	movi	r6,56
 4000604:	4001ec00 	call	4001ec0 <fwrite>
 4000608:	003f9f06 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_MBOX_FULL:
      fprintf(stderr, "Attempted a Post to a Mailbox that already contains a message\n");
      break;
    case OS_ERR_EVENT_TYPE:
      fprintf(stderr, "Attempted to access a resource that doesn't match the required data type\n");
 400060c:	90800017 	ldw	r2,0(r18)
 4000610:	010100f4 	movhi	r4,1027
 4000614:	21055904 	addi	r4,r4,5476
 4000618:	01400044 	movi	r5,1
 400061c:	11c00317 	ldw	r7,12(r2)
 4000620:	01801244 	movi	r6,73
 4000624:	4001ec00 	call	4001ec0 <fwrite>
 4000628:	003f9706 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_TIMEOUT:
      fprintf(stderr, "Resource not received in specified time\n");
      break;
    case OS_ERR_PEND_ISR:
      fprintf(stderr, "Attempting to pending for a resource in an ISR\n");
 400062c:	90800017 	ldw	r2,0(r18)
 4000630:	010100f4 	movhi	r4,1027
 4000634:	21059004 	addi	r4,r4,5696
 4000638:	01400044 	movi	r5,1
 400063c:	11c00317 	ldw	r7,12(r2)
 4000640:	01800bc4 	movi	r6,47
 4000644:	4001ec00 	call	4001ec0 <fwrite>
 4000648:	003f8f06 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_ERR_PEVENT_NULL:
      fprintf(stderr, "Attempting access a resource that is pointing to NULL\n");
      break;
    case OS_ERR_POST_NULL_PTR:
      fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
 400064c:	90800017 	ldw	r2,0(r18)
 4000650:	010100f4 	movhi	r4,1027
 4000654:	21057a04 	addi	r4,r4,5608
 4000658:	01400044 	movi	r5,1
 400065c:	11c00317 	ldw	r7,12(r2)
 4000660:	01800a44 	movi	r6,41
 4000664:	4001ec00 	call	4001ec0 <fwrite>
 4000668:	003f8706 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_ERR_EVENT_TYPE:
      fprintf(stderr, "Attempted to access a resource that doesn't match the required data type\n");
      break;
    case OS_ERR_PEVENT_NULL:
      fprintf(stderr, "Attempting access a resource that is pointing to NULL\n");
 400066c:	90800017 	ldw	r2,0(r18)
 4000670:	010100f4 	movhi	r4,1027
 4000674:	21056c04 	addi	r4,r4,5552
 4000678:	01400044 	movi	r5,1
 400067c:	11c00317 	ldw	r7,12(r2)
 4000680:	01800d84 	movi	r6,54
 4000684:	4001ec00 	call	4001ec0 <fwrite>
 4000688:	003f7f06 	br	4000488 <alt_NTPErrorHandler+0x2b4>
      break;
    case OS_ERR_POST_NULL_PTR:
      fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
      break;
    case OS_TIMEOUT:
      fprintf(stderr, "Resource not received in specified time\n");
 400068c:	90800017 	ldw	r2,0(r18)
 4000690:	010100f4 	movhi	r4,1027
 4000694:	21058504 	addi	r4,r4,5652
 4000698:	01400044 	movi	r5,1
 400069c:	11c00317 	ldw	r7,12(r2)
 40006a0:	01800a04 	movi	r6,40
 40006a4:	4001ec00 	call	4001ec0 <fwrite>
 40006a8:	003f7706 	br	4000488 <alt_NTPErrorHandler+0x2b4>
    case OS_NO_MORE_TCB:
      fprintf(stderr, "Task Control Blocks have been exhausted\n");
      fprintf(stderr, "The current max number of task is %d\n",OS_MAX_TASKS);
      break;
    case OS_MBOX_FULL:
      fprintf(stderr, "Attempted a Post to a Mailbox that already contains a message\n");
 40006ac:	90800017 	ldw	r2,0(r18)
 40006b0:	010100f4 	movhi	r4,1027
 40006b4:	21054904 	addi	r4,r4,5412
 40006b8:	01400044 	movi	r5,1
 40006bc:	11c00317 	ldw	r7,12(r2)
 40006c0:	01800f84 	movi	r6,62
 40006c4:	4001ec00 	call	4001ec0 <fwrite>
 40006c8:	003f6f06 	br	4000488 <alt_NTPErrorHandler+0x2b4>

040006cc <alt_uCOSIIErrorHandler>:
#include "includes.h"
#include "alt_error_handler.h"
#include "stdlib.h"

void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 40006cc:	defffc04 	addi	sp,sp,-16
 40006d0:	dc000015 	stw	r16,0(sp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
 40006d4:	24003fcc 	andi	r16,r4,255
#include "includes.h"
#include "alt_error_handler.h"
#include "stdlib.h"

void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 40006d8:	dc400115 	stw	r17,4(sp)
 40006dc:	dfc00315 	stw	ra,12(sp)
 40006e0:	dc800215 	stw	r18,8(sp)
 40006e4:	2823883a 	mov	r17,r5
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
 40006e8:	8000061e 	bne	r16,zero,4000704 <alt_uCOSIIErrorHandler+0x38>
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
   }
   while(1); /* Correct Program Flow never gets here. */
}
 40006ec:	dfc00317 	ldw	ra,12(sp)
 40006f0:	dc800217 	ldw	r18,8(sp)
 40006f4:	dc400117 	ldw	r17,4(sp)
 40006f8:	dc000017 	ldw	r16,0(sp)
 40006fc:	dec00404 	addi	sp,sp,16
 4000700:	f800283a 	ret
   {
      return;
   }
   
   fault_level = SYSTEM;  
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 4000704:	400f6b00 	call	400f6b0 <OSSchedLock>
      
   switch (error_code)
 4000708:	00800a04 	movi	r2,40
 400070c:	80802a26 	beq	r16,r2,40007b8 <alt_uCOSIIErrorHandler+0xec>
 4000710:	14004b36 	bltu	r2,r16,4000840 <alt_uCOSIIErrorHandler+0x174>
 4000714:	00800104 	movi	r2,4
 4000718:	8080a626 	beq	r16,r2,40009b4 <alt_uCOSIIErrorHandler+0x2e8>
 400071c:	14007b36 	bltu	r2,r16,400090c <alt_uCOSIIErrorHandler+0x240>
 4000720:	00800084 	movi	r2,2
 4000724:	80806f26 	beq	r16,r2,40008e4 <alt_uCOSIIErrorHandler+0x218>
 4000728:	14006436 	bltu	r2,r16,40008bc <alt_uCOSIIErrorHandler+0x1f0>
 400072c:	00800044 	movi	r2,1
 4000730:	80804c1e 	bne	r16,r2,4000864 <alt_uCOSIIErrorHandler+0x198>
         fault_level = NONE;
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
         break;
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
         fprintf(stderr, 
 4000734:	04810134 	movhi	r18,1028
 4000738:	94a0f704 	addi	r18,r18,-31780
 400073c:	90800017 	ldw	r2,0(r18)
 4000740:	010100f4 	movhi	r4,1027
 4000744:	21061d04 	addi	r4,r4,6260
 4000748:	800b883a 	mov	r5,r16
 400074c:	11c00317 	ldw	r7,12(r2)
 4000750:	01801244 	movi	r6,73
 4000754:	4001ec00 	call	4001ec0 <fwrite>

/* Process the error based on the fault level, reenable scheduler if appropriate. */  
   switch (fault_level) {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
 4000758:	010100f4 	movhi	r4,1027
 400075c:	2106ef04 	addi	r4,r4,7100
 4000760:	4002ed40 	call	4002ed4 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
 4000764:	90c00017 	ldw	r3,0(r18)
 4000768:	010100f4 	movhi	r4,1027
 400076c:	2106fc04 	addi	r4,r4,7152
 4000770:	01400044 	movi	r5,1
 4000774:	19c00317 	ldw	r7,12(r3)
 4000778:	01800904 	movi	r6,36
 400077c:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
 4000780:	90c00017 	ldw	r3,0(r18)
 4000784:	01400044 	movi	r5,1
 4000788:	01800a04 	movi	r6,40
 400078c:	19c00317 	ldw	r7,12(r3)
 4000790:	010100f4 	movhi	r4,1027
 4000794:	21070604 	addi	r4,r4,7192
 4000798:	4001ec00 	call	4001ec0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 400079c:	400f6f80 	call	400f6f8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 40007a0:	01003fc4 	movi	r4,255
 40007a4:	40126500 	call	4012650 <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 40007a8:	000b883a 	mov	r5,zero
 40007ac:	8009883a 	mov	r4,r16
 40007b0:	40006cc0 	call	40006cc <alt_uCOSIIErrorHandler>
 40007b4:	003fff06 	br	40007b4 <alt_uCOSIIErrorHandler+0xe8>
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
      
   switch (error_code)
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
 40007b8:	04810134 	movhi	r18,1028
 40007bc:	94a0f704 	addi	r18,r18,-31780
 40007c0:	90800017 	ldw	r2,0(r18)
 40007c4:	010100f4 	movhi	r4,1027
 40007c8:	2105e004 	addi	r4,r4,6016
 40007cc:	01400044 	movi	r5,1
 40007d0:	11c00317 	ldw	r7,12(r2)
 40007d4:	01800c44 	movi	r6,49
 40007d8:	4001ec00 	call	4001ec0 <fwrite>
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
         break;
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 40007dc:	010100f4 	movhi	r4,1027
 40007e0:	21069704 	addi	r4,r4,6748
 40007e4:	4002ed40 	call	4002ed4 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
 40007e8:	90c00017 	ldw	r3,0(r18)
 40007ec:	010100f4 	movhi	r4,1027
 40007f0:	2106a504 	addi	r4,r4,6804
 40007f4:	01400044 	movi	r5,1
 40007f8:	19c00317 	ldw	r7,12(r3)
 40007fc:	01800984 	movi	r6,38
 4000800:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
 4000804:	90c00017 	ldw	r3,0(r18)
 4000808:	010100f4 	movhi	r4,1027
 400080c:	2106af04 	addi	r4,r4,6844
 4000810:	01400044 	movi	r5,1
 4000814:	19c00317 	ldw	r7,12(r3)
 4000818:	01800bc4 	movi	r6,47
 400081c:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
 4000820:	90c00017 	ldw	r3,0(r18)
 4000824:	010100f4 	movhi	r4,1027
 4000828:	2106bb04 	addi	r4,r4,6892
 400082c:	01400044 	movi	r5,1
 4000830:	19c00317 	ldw	r7,12(r3)
 4000834:	01800cc4 	movi	r6,51
 4000838:	4001ec00 	call	4001ec0 <fwrite>
 400083c:	003fff06 	br	400083c <alt_uCOSIIErrorHandler+0x170>
   }
   
   fault_level = SYSTEM;  
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
      
   switch (error_code)
 4000840:	00801004 	movi	r2,64
 4000844:	8080b326 	beq	r16,r2,4000b14 <alt_uCOSIIErrorHandler+0x448>
 4000848:	14009c36 	bltu	r2,r16,4000abc <alt_uCOSIIErrorHandler+0x3f0>
 400084c:	00800f44 	movi	r2,61
 4000850:	80809026 	beq	r16,r2,4000a94 <alt_uCOSIIErrorHandler+0x3c8>
 4000854:	00800f84 	movi	r2,62
 4000858:	80808426 	beq	r16,r2,4000a6c <alt_uCOSIIErrorHandler+0x3a0>
 400085c:	00800a84 	movi	r2,42
 4000860:	80805e26 	beq	r16,r2,40009dc <alt_uCOSIIErrorHandler+0x310>
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
                 (char *)expanded_diagnosis_ptr);
         break;           
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
         fprintf(stderr, "\n[MicroC/OS-II]:");
 4000864:	04810134 	movhi	r18,1028
 4000868:	94a0f704 	addi	r18,r18,-31780
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
                 (char *)expanded_diagnosis_ptr);
         break;           
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
 400086c:	010100f4 	movhi	r4,1027
 4000870:	21067104 	addi	r4,r4,6596
 4000874:	4002fec0 	call	4002fec <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
 4000878:	90c00017 	ldw	r3,0(r18)
 400087c:	010100f4 	movhi	r4,1027
 4000880:	21067f04 	addi	r4,r4,6652
 4000884:	01400044 	movi	r5,1
 4000888:	19c00317 	ldw	r7,12(r3)
 400088c:	01800404 	movi	r6,16
 4000890:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
 4000894:	90c00017 	ldw	r3,0(r18)
 4000898:	800d883a 	mov	r6,r16
 400089c:	014100f4 	movhi	r5,1027
 40008a0:	29468404 	addi	r5,r5,6672
 40008a4:	19000317 	ldw	r4,12(r3)
 40008a8:	4001dc40 	call	4001dc4 <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
 40008ac:	010100f4 	movhi	r4,1027
 40008b0:	21068904 	addi	r4,r4,6692
 40008b4:	4002ec00 	call	4002ec0 <perror>
 40008b8:	003fc806 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
         break;
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
 40008bc:	04810134 	movhi	r18,1028
 40008c0:	94a0f704 	addi	r18,r18,-31780
 40008c4:	90800017 	ldw	r2,0(r18)
 40008c8:	010100f4 	movhi	r4,1027
 40008cc:	21057a04 	addi	r4,r4,5608
 40008d0:	01400044 	movi	r5,1
 40008d4:	11c00317 	ldw	r7,12(r2)
 40008d8:	01800a44 	movi	r6,41
 40008dc:	4001ec00 	call	4001ec0 <fwrite>
 40008e0:	003f9d06 	br	4000758 <alt_uCOSIIErrorHandler+0x8c>
      case OS_TIMEOUT:
         fault_level = NONE;
         fprintf(stderr, "Resource not received in specified time\n");
         break;
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
 40008e4:	04810134 	movhi	r18,1028
 40008e8:	94a0f704 	addi	r18,r18,-31780
 40008ec:	90800017 	ldw	r2,0(r18)
 40008f0:	010100f4 	movhi	r4,1027
 40008f4:	21063d04 	addi	r4,r4,6388
 40008f8:	01400044 	movi	r5,1
 40008fc:	11c00317 	ldw	r7,12(r2)
 4000900:	01800b04 	movi	r6,44
 4000904:	4001ec00 	call	4001ec0 <fwrite>
 4000908:	003fb406 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
   }
   
   fault_level = SYSTEM;  
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
      
   switch (error_code)
 400090c:	00800504 	movi	r2,20
 4000910:	80804c26 	beq	r16,r2,4000a44 <alt_uCOSIIErrorHandler+0x378>
 4000914:	00800784 	movi	r2,30
 4000918:	80804026 	beq	r16,r2,4000a1c <alt_uCOSIIErrorHandler+0x350>
 400091c:	00800284 	movi	r2,10
 4000920:	80bfd01e 	bne	r16,r2,4000864 <alt_uCOSIIErrorHandler+0x198>
         fault_level = TASK;
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
         break;
      case OS_TIMEOUT:
         fault_level = NONE;
         fprintf(stderr, "Resource not received in specified time\n");
 4000924:	04810134 	movhi	r18,1028
 4000928:	94a0f704 	addi	r18,r18,-31780
 400092c:	90800017 	ldw	r2,0(r18)
 4000930:	010100f4 	movhi	r4,1027
 4000934:	21058504 	addi	r4,r4,5652
 4000938:	01400044 	movi	r5,1
 400093c:	11c00317 	ldw	r7,12(r2)
 4000940:	01800a04 	movi	r6,40
 4000944:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
 4000948:	90800017 	ldw	r2,0(r18)
 400094c:	010100f4 	movhi	r4,1027
 4000950:	2106c804 	addi	r4,r4,6944
 4000954:	01400044 	movi	r5,1
 4000958:	11c00317 	ldw	r7,12(r2)
 400095c:	01800904 	movi	r6,36
 4000960:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
 4000964:	90c00017 	ldw	r3,0(r18)
 4000968:	010100f4 	movhi	r4,1027
 400096c:	2106d204 	addi	r4,r4,6984
 4000970:	01400044 	movi	r5,1
 4000974:	19c00317 	ldw	r7,12(r3)
 4000978:	01800c84 	movi	r6,50
 400097c:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, 
 4000980:	90c00017 	ldw	r3,0(r18)
 4000984:	010100f4 	movhi	r4,1027
 4000988:	2106df04 	addi	r4,r4,7036
 400098c:	01400044 	movi	r5,1
 4000990:	19c00317 	ldw	r7,12(r3)
 4000994:	01800f84 	movi	r6,62
 4000998:	4001ec00 	call	4001ec0 <fwrite>
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
   }
   while(1); /* Correct Program Flow never gets here. */
}
 400099c:	dfc00317 	ldw	ra,12(sp)
 40009a0:	dc800217 	ldw	r18,8(sp)
 40009a4:	dc400117 	ldw	r17,4(sp)
 40009a8:	dc000017 	ldw	r16,0(sp)
 40009ac:	dec00404 	addi	sp,sp,16
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
         fprintf(stderr, 
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
 40009b0:	400f6f81 	jmpi	400f6f8 <OSSchedUnlock>
         fault_level = TASK;
         fprintf(stderr, 
"Attempted to access a resource with no match for the required data type.\n");
         break;
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
 40009b4:	04810134 	movhi	r18,1028
 40009b8:	94a0f704 	addi	r18,r18,-31780
 40009bc:	90800017 	ldw	r2,0(r18)
 40009c0:	010100f4 	movhi	r4,1027
 40009c4:	21063004 	addi	r4,r4,6336
 40009c8:	01400044 	movi	r5,1
 40009cc:	11c00317 	ldw	r7,12(r2)
 40009d0:	01800c44 	movi	r6,49
 40009d4:	4001ec00 	call	4001ec0 <fwrite>
 40009d8:	003f8006 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
         break;
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
 40009dc:	04810134 	movhi	r18,1028
 40009e0:	94a0f704 	addi	r18,r18,-31780
 40009e4:	90800017 	ldw	r2,0(r18)
 40009e8:	010100f4 	movhi	r4,1027
 40009ec:	2105ed04 	addi	r4,r4,6068
 40009f0:	01400044 	movi	r5,1
 40009f4:	11c00317 	ldw	r7,12(r2)
 40009f8:	01800c44 	movi	r6,49
 40009fc:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
 4000a00:	90c00017 	ldw	r3,0(r18)
 4000a04:	014100f4 	movhi	r5,1027
 4000a08:	2945fa04 	addi	r5,r5,6120
 4000a0c:	01800504 	movi	r6,20
 4000a10:	19000317 	ldw	r4,12(r3)
 4000a14:	4001dc40 	call	4001dc4 <fprintf>
 4000a18:	003f7006 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
         break;
      case OS_Q_FULL:
         fault_level = NONE;
         fprintf(stderr, "Attempted to post to a full message queue\n");
 4000a1c:	04810134 	movhi	r18,1028
 4000a20:	94a0f704 	addi	r18,r18,-31780
 4000a24:	90800017 	ldw	r2,0(r18)
 4000a28:	010100f4 	movhi	r4,1027
 4000a2c:	2105bb04 	addi	r4,r4,5868
 4000a30:	01400044 	movi	r5,1
 4000a34:	11c00317 	ldw	r7,12(r2)
 4000a38:	01800a84 	movi	r6,42
 4000a3c:	4001ec00 	call	4001ec0 <fwrite>
 4000a40:	003fc106 	br	4000948 <alt_uCOSIIErrorHandler+0x27c>
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
         break;
      case OS_MBOX_FULL:
         fault_level = NONE;
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
 4000a44:	04810134 	movhi	r18,1028
 4000a48:	94a0f704 	addi	r18,r18,-31780
 4000a4c:	90800017 	ldw	r2,0(r18)
 4000a50:	010100f4 	movhi	r4,1027
 4000a54:	21061004 	addi	r4,r4,6208
 4000a58:	01400044 	movi	r5,1
 4000a5c:	11c00317 	ldw	r7,12(r2)
 4000a60:	01800c84 	movi	r6,50
 4000a64:	4001ec00 	call	4001ec0 <fwrite>
 4000a68:	003fb706 	br	4000948 <alt_uCOSIIErrorHandler+0x27c>
         break;
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
         break;
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
 4000a6c:	04810134 	movhi	r18,1028
 4000a70:	94a0f704 	addi	r18,r18,-31780
 4000a74:	90800017 	ldw	r2,0(r18)
 4000a78:	010100f4 	movhi	r4,1027
 4000a7c:	21059c04 	addi	r4,r4,5744
 4000a80:	01400044 	movi	r5,1
 4000a84:	11c00317 	ldw	r7,12(r2)
 4000a88:	01800884 	movi	r6,34
 4000a8c:	4001ec00 	call	4001ec0 <fwrite>
 4000a90:	003f5206 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
         break;
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
 4000a94:	04810134 	movhi	r18,1028
 4000a98:	94a0f704 	addi	r18,r18,-31780
 4000a9c:	90800017 	ldw	r2,0(r18)
 4000aa0:	010100f4 	movhi	r4,1027
 4000aa4:	2105a504 	addi	r4,r4,5780
 4000aa8:	01400044 	movi	r5,1
 4000aac:	11c00317 	ldw	r7,12(r2)
 4000ab0:	01800bc4 	movi	r6,47
 4000ab4:	4001ec00 	call	4001ec0 <fwrite>
 4000ab8:	003fa306 	br	4000948 <alt_uCOSIIErrorHandler+0x27c>
   }
   
   fault_level = SYSTEM;  
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
      
   switch (error_code)
 4000abc:	00801904 	movi	r2,100
 4000ac0:	80802a26 	beq	r16,r2,4000b6c <alt_uCOSIIErrorHandler+0x4a0>
 4000ac4:	00803fc4 	movi	r2,255
 4000ac8:	80801c26 	beq	r16,r2,4000b3c <alt_uCOSIIErrorHandler+0x470>
 4000acc:	00801084 	movi	r2,66
 4000ad0:	80bf641e 	bne	r16,r2,4000864 <alt_uCOSIIErrorHandler+0x198>
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
            OS_LOWEST_PRIO);
         break;
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
 4000ad4:	04810134 	movhi	r18,1028
 4000ad8:	94a0f704 	addi	r18,r18,-31780
 4000adc:	90800017 	ldw	r2,0(r18)
 4000ae0:	010100f4 	movhi	r4,1027
 4000ae4:	21053404 	addi	r4,r4,5328
 4000ae8:	01400044 	movi	r5,1
 4000aec:	11c00317 	ldw	r7,12(r2)
 4000af0:	01800a04 	movi	r6,40
 4000af4:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
 4000af8:	90c00017 	ldw	r3,0(r18)
 4000afc:	014100f4 	movhi	r5,1027
 4000b00:	29460704 	addi	r5,r5,6172
 4000b04:	01800284 	movi	r6,10
 4000b08:	19000317 	ldw	r4,12(r3)
 4000b0c:	4001dc40 	call	4001dc4 <fprintf>
 4000b10:	003f3206 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
         break;
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
 4000b14:	04810134 	movhi	r18,1028
 4000b18:	94a0f704 	addi	r18,r18,-31780
 4000b1c:	90800017 	ldw	r2,0(r18)
 4000b20:	010100f4 	movhi	r4,1027
 4000b24:	2105b104 	addi	r4,r4,5828
 4000b28:	01400044 	movi	r5,1
 4000b2c:	11c00317 	ldw	r7,12(r2)
 4000b30:	018009c4 	movi	r6,39
 4000b34:	4001ec00 	call	4001ec0 <fwrite>
 4000b38:	003f2806 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
         fault_level = TASK;
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
         break;
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
         printf(
 4000b3c:	010100f4 	movhi	r4,1027
 4000b40:	21065604 	addi	r4,r4,6488
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
 4000b44:	04810134 	movhi	r18,1028
 4000b48:	94a0f704 	addi	r18,r18,-31780
         fault_level = TASK;
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
         break;
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
         printf(
 4000b4c:	4002ed40 	call	4002ed4 <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
 4000b50:	90c00017 	ldw	r3,0(r18)
 4000b54:	880d883a 	mov	r6,r17
 4000b58:	014100f4 	movhi	r5,1027
 4000b5c:	29466604 	addi	r5,r5,6552
 4000b60:	19000317 	ldw	r4,12(r3)
 4000b64:	4001dc40 	call	4001dc4 <fprintf>
 4000b68:	003f1c06 	br	40007dc <alt_uCOSIIErrorHandler+0x110>
         fault_level = NONE;
         fprintf(stderr, "Attempted to post to a full message queue\n");
         break;
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
 4000b6c:	04810134 	movhi	r18,1028
 4000b70:	94a0f704 	addi	r18,r18,-31780
 4000b74:	90800017 	ldw	r2,0(r18)
 4000b78:	010100f4 	movhi	r4,1027
 4000b7c:	21064904 	addi	r4,r4,6436
 4000b80:	01400044 	movi	r5,1
 4000b84:	11c00317 	ldw	r7,12(r2)
 4000b88:	01800c04 	movi	r6,48
 4000b8c:	4001ec00 	call	4001ec0 <fwrite>
 4000b90:	003ef106 	br	4000758 <alt_uCOSIIErrorHandler+0x8c>

04000b94 <alt_ucosii_check_return_code>:
 * integrity issues have occurred during a MicroC/OS-II system call.  If something
 * has occurred, the scheduling is turned off and the error handler is called.
 */

void alt_ucosii_check_return_code(INT8U return_code)
{
 4000b94:	deffff04 	addi	sp,sp,-4
  if(return_code != OS_NO_ERR)
 4000b98:	21003fcc 	andi	r4,r4,255
 * integrity issues have occurred during a MicroC/OS-II system call.  If something
 * has occurred, the scheduling is turned off and the error handler is called.
 */

void alt_ucosii_check_return_code(INT8U return_code)
{
 4000b9c:	dfc00015 	stw	ra,0(sp)
  if(return_code != OS_NO_ERR)
 4000ba0:	2000031e 	bne	r4,zero,4000bb0 <alt_ucosii_check_return_code+0x1c>
  {
    OSSchedLock();  /* Disable Task Switching but still service other IRQs */
	alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[MicroC/OS-II] - Check return code error");
	OSSchedUnlock(); /* Enable Task Switching */
  }
}
 4000ba4:	dfc00017 	ldw	ra,0(sp)
 4000ba8:	dec00104 	addi	sp,sp,4
 4000bac:	f800283a 	ret

void alt_ucosii_check_return_code(INT8U return_code)
{
  if(return_code != OS_NO_ERR)
  {
    OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 4000bb0:	400f6b00 	call	400f6b0 <OSSchedLock>
	alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[MicroC/OS-II] - Check return code error");
 4000bb4:	01003fc4 	movi	r4,255
 4000bb8:	014100f4 	movhi	r5,1027
 4000bbc:	29471104 	addi	r5,r5,7236
 4000bc0:	40006cc0 	call	40006cc <alt_uCOSIIErrorHandler>
	OSSchedUnlock(); /* Enable Task Switching */
  }
}
 4000bc4:	dfc00017 	ldw	ra,0(sp)
 4000bc8:	dec00104 	addi	sp,sp,4
{
  if(return_code != OS_NO_ERR)
  {
    OSSchedLock();  /* Disable Task Switching but still service other IRQs */
	alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[MicroC/OS-II] - Check return code error");
	OSSchedUnlock(); /* Enable Task Switching */
 4000bcc:	400f6f81 	jmpi	400f6f8 <OSSchedUnlock>

04000bd0 <alt_NetworkErrorHandler>:
   }
   while(1); /* Correct Program Flow never gets here. */
}

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 4000bd0:	defffb04 	addi	sp,sp,-20
 4000bd4:	dc800215 	stw	r18,8(sp)
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
 4000bd8:	24803fcc 	andi	r18,r4,255
   }
   while(1); /* Correct Program Flow never gets here. */
}

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 4000bdc:	dc400115 	stw	r17,4(sp)
 4000be0:	dfc00415 	stw	ra,16(sp)
 4000be4:	dcc00315 	stw	r19,12(sp)
 4000be8:	dc000015 	stw	r16,0(sp)
 4000bec:	2823883a 	mov	r17,r5
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
 4000bf0:	9000071e 	bne	r18,zero,4000c10 <alt_NetworkErrorHandler+0x40>
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
   }
   while(1); /* Correct Program Flow never gets here. */
}
 4000bf4:	dfc00417 	ldw	ra,16(sp)
 4000bf8:	dcc00317 	ldw	r19,12(sp)
 4000bfc:	dc800217 	ldw	r18,8(sp)
 4000c00:	dc400117 	ldw	r17,4(sp)
 4000c04:	dc000017 	ldw	r16,0(sp)
 4000c08:	dec00504 	addi	sp,sp,20
 4000c0c:	f800283a 	ret
   }

   fault_level = SYSTEM;   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
 4000c10:	04c03fc4 	movi	r19,255
   {
      return;
   }

   fault_level = SYSTEM;   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  
 4000c14:	400f6b00 	call	400f6b0 <OSSchedLock>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
 4000c18:	94c02626 	beq	r18,r19,4000cb4 <alt_NetworkErrorHandler+0xe4>
   }
   else 
   {
      fault_level = TASK;
      printf("\n[Network]: See STDERR.\n");    
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
 4000c1c:	04010134 	movhi	r16,1028
 4000c20:	8420f704 	addi	r16,r16,-31780
      perror("\n[Network]:  ERRNO: ");
   }
   else 
   {
      fault_level = TASK;
      printf("\n[Network]: See STDERR.\n");    
 4000c24:	010100f4 	movhi	r4,1027
 4000c28:	21076104 	addi	r4,r4,7556
 4000c2c:	4002fec0 	call	4002fec <puts>
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
 4000c30:	80c00017 	ldw	r3,0(r16)
 4000c34:	900d883a 	mov	r6,r18
 4000c38:	014100f4 	movhi	r5,1027
 4000c3c:	29476704 	addi	r5,r5,7580
 4000c40:	19000317 	ldw	r4,12(r3)
 4000c44:	4001dc40 	call	4001dc4 <fprintf>
      perror("\n[Network]:  ERRNO: ");
 4000c48:	010100f4 	movhi	r4,1027
 4000c4c:	21072f04 	addi	r4,r4,7356
 4000c50:	4002ec00 	call	4002ec0 <perror>
   /* Process error based on fault level, reenable scheduler if appropriate. */     
   switch (fault_level) 
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is TASK).");
 4000c54:	010100f4 	movhi	r4,1027
 4000c58:	21076e04 	addi	r4,r4,7608
 4000c5c:	4002ed40 	call	4002ed4 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is TASK");
 4000c60:	80c00017 	ldw	r3,0(r16)
 4000c64:	010100f4 	movhi	r4,1027
 4000c68:	21077a04 	addi	r4,r4,7656
 4000c6c:	01400044 	movi	r5,1
 4000c70:	19c00317 	ldw	r7,12(r3)
 4000c74:	018007c4 	movi	r6,31
 4000c78:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[Network]: Task is being deleted.\n");
 4000c7c:	80c00017 	ldw	r3,0(r16)
 4000c80:	01400044 	movi	r5,1
 4000c84:	018008c4 	movi	r6,35
 4000c88:	19c00317 	ldw	r7,12(r3)
 4000c8c:	010100f4 	movhi	r4,1027
 4000c90:	21078204 	addi	r4,r4,7688
 4000c94:	4001ec00 	call	4001ec0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 4000c98:	400f6f80 	call	400f6f8 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 4000c9c:	9809883a 	mov	r4,r19
 4000ca0:	40126500 	call	4012650 <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 4000ca4:	000b883a 	mov	r5,zero
 4000ca8:	9009883a 	mov	r4,r18
 4000cac:	40006cc0 	call	40006cc <alt_uCOSIIErrorHandler>
 4000cb0:	003fff06 	br	4000cb0 <alt_NetworkErrorHandler+0xe0>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
   {
      fault_level = SYSTEM;
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
 4000cb4:	04010134 	movhi	r16,1028
 4000cb8:	8420f704 	addi	r16,r16,-31780
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
   {
      fault_level = SYSTEM;
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
 4000cbc:	010100f4 	movhi	r4,1027
 4000cc0:	21071c04 	addi	r4,r4,7280
 4000cc4:	4002ed40 	call	4002ed4 <printf>
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
 4000cc8:	80c00017 	ldw	r3,0(r16)
 4000ccc:	880d883a 	mov	r6,r17
 4000cd0:	014100f4 	movhi	r5,1027
 4000cd4:	29472b04 	addi	r5,r5,7340
 4000cd8:	19000317 	ldw	r4,12(r3)
 4000cdc:	4001dc40 	call	4001dc4 <fprintf>
      /* Check errno also in case it has been set. */
      perror("\n[Network]:  ERRNO: ");
 4000ce0:	010100f4 	movhi	r4,1027
 4000ce4:	21072f04 	addi	r4,r4,7356
 4000ce8:	4002ec00 	call	4002ec0 <perror>
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
         break;
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 4000cec:	010100f4 	movhi	r4,1027
 4000cf0:	21073504 	addi	r4,r4,7380
 4000cf4:	4002ed40 	call	4002ed4 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is SYSTEM.");
 4000cf8:	80c00017 	ldw	r3,0(r16)
 4000cfc:	010100f4 	movhi	r4,1027
 4000d00:	21074104 	addi	r4,r4,7428
 4000d04:	01400044 	movi	r5,1
 4000d08:	19c00317 	ldw	r7,12(r3)
 4000d0c:	01800884 	movi	r6,34
 4000d10:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[Network]: FATAL Error, Restart required.");
 4000d14:	80c00017 	ldw	r3,0(r16)
 4000d18:	010100f4 	movhi	r4,1027
 4000d1c:	21074a04 	addi	r4,r4,7464
 4000d20:	01400044 	movi	r5,1
 4000d24:	19c00317 	ldw	r7,12(r3)
 4000d28:	01800a84 	movi	r6,42
 4000d2c:	4001ec00 	call	4001ec0 <fwrite>
         fprintf(stderr, "\n[Network]: Locking scheduler - endless loop.\n");
 4000d30:	80c00017 	ldw	r3,0(r16)
 4000d34:	010100f4 	movhi	r4,1027
 4000d38:	21075504 	addi	r4,r4,7508
 4000d3c:	01400044 	movi	r5,1
 4000d40:	19c00317 	ldw	r7,12(r3)
 4000d44:	01800b84 	movi	r6,46
 4000d48:	4001ec00 	call	4001ec0 <fwrite>
 4000d4c:	003fff06 	br	4000d4c <alt_NetworkErrorHandler+0x17c>

04000d50 <main>:
  alt_uCOSIIErrorHandler(error_code, 0);
  while (1); /* Correct Program Flow should never get here */
}

int main ()
{
 4000d50:	defffa04 	addi	sp,sp,-24
 4000d54:	dfc00515 	stw	ra,20(sp)
  INT8U error_code;

  setup_phy();
 4000d58:	4001c180 	call	4001c18 <setup_phy>

  /* Clear the RTOS timer */
  OSTimeSet(0);
 4000d5c:	0009883a 	mov	r4,zero
 4000d60:	4012fac0 	call	4012fac <OSTimeSet>

  printf("\n\nNTP Client starting up\n\n");
 4000d64:	010100f4 	movhi	r4,1027
 4000d68:	21078b04 	addi	r4,r4,7724
 4000d6c:	4002fec0 	call	4002fec <puts>
  
  /* NTPInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the 
   * RTOS structures and tasks. 
   */  
  error_code = OSTaskCreateExt(NTPInitialTask,
 4000d70:	00c00204 	movi	r3,8
 4000d74:	02010134 	movhi	r8,1028
 4000d78:	4229d504 	addi	r8,r8,-22700
 4000d7c:	41880004 	addi	r6,r8,8192
 4000d80:	180f883a 	mov	r7,r3
 4000d84:	01010034 	movhi	r4,1024
 4000d88:	21037304 	addi	r4,r4,3532
 4000d8c:	000b883a 	mov	r5,zero
 4000d90:	00820004 	movi	r2,2048
 4000d94:	d8c00015 	stw	r3,0(sp)
 4000d98:	da000115 	stw	r8,4(sp)
 4000d9c:	d8800215 	stw	r2,8(sp)
 4000da0:	d8000315 	stw	zero,12(sp)
 4000da4:	d8000415 	stw	zero,16(sp)
 4000da8:	40124d40 	call	40124d4 <OSTaskCreateExt>
                             NTP_INITIAL_TASK_PRIORITY,
                             NTPInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
 4000dac:	11003fcc 	andi	r4,r2,255
 4000db0:	000b883a 	mov	r5,zero
 4000db4:	40006cc0 	call	40006cc <alt_uCOSIIErrorHandler>

/*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */  
  printf("\n\nRTOS starting up\n\n");
 4000db8:	010100f4 	movhi	r4,1027
 4000dbc:	21079204 	addi	r4,r4,7752
 4000dc0:	4002fec0 	call	4002fec <puts>
  OSStart();
 4000dc4:	400ed800 	call	400ed80 <OSStart>
 4000dc8:	003fff06 	br	4000dc8 <main+0x78>

04000dcc <NTPInitialTask>:
/* NTPInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void NTPInitialTask(void *task_data)
{
 4000dcc:	defff904 	addi	sp,sp,-28
 4000dd0:	dfc00615 	stw	ra,24(sp)
 4000dd4:	dc000515 	stw	r16,20(sp)
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
 4000dd8:	401cedc0 	call	401cedc <alt_iniche_init>
  netmain(); 

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 4000ddc:	04010134 	movhi	r16,1028
 4000de0:	84291704 	addi	r16,r16,-23460
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
  netmain(); 
 4000de4:	401a17c0 	call	401a17c <netmain>

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 4000de8:	80c00017 	ldw	r3,0(r16)
 4000dec:	1800041e 	bne	r3,zero,4000e00 <NTPInitialTask+0x34>
    TK_SLEEP(1);
 4000df0:	01000084 	movi	r4,2
 4000df4:	4012fd00 	call	4012fd0 <OSTimeDly>
  netmain(); 

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 4000df8:	80800017 	ldw	r2,0(r16)
 4000dfc:	103ffc26 	beq	r2,zero,4000df0 <NTPInitialTask+0x24>

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nNTP starting up\n");
 4000e00:	010100f4 	movhi	r4,1027
 4000e04:	21079704 	addi	r4,r4,7772
 4000e08:	4002fec0 	call	4002fec <puts>

  /* Create the main ntp task. - create main simple socket server task*/
  TK_NEWTASK(&ntp_task);
 4000e0c:	010100f4 	movhi	r4,1027
 4000e10:	2119bd04 	addi	r4,r4,26356
 4000e14:	401cb0c0 	call	401cb0c <TK_NEWTASK>
  
  /*create os data structures */
  NTPCreateOSDataStructs(); 
 4000e18:	40011880 	call	4001188 <NTPCreateOSDataStructs>

  /* create the other tasks */
  error_code = OSTaskCreateExt(lcddisplaytime_task,
 4000e1c:	02010134 	movhi	r8,1028
 4000e20:	4231d504 	addi	r8,r8,-14508
 4000e24:	00800284 	movi	r2,10
 4000e28:	00c20004 	movi	r3,2048
 4000e2c:	4187ff04 	addi	r6,r8,8188
 4000e30:	100f883a 	mov	r7,r2
 4000e34:	01010034 	movhi	r4,1024
 4000e38:	21069d04 	addi	r4,r4,6772
 4000e3c:	000b883a 	mov	r5,zero
 4000e40:	d8c00215 	stw	r3,8(sp)
 4000e44:	da000115 	stw	r8,4(sp)
 4000e48:	d8800015 	stw	r2,0(sp)
 4000e4c:	d8000315 	stw	zero,12(sp)
 4000e50:	d8000415 	stw	zero,16(sp)
 4000e54:	40124d40 	call	40124d4 <OSTaskCreateExt>
								lcddisplaytime_task_stack,
                             TASK_STACKSIZE,
                             NULL,
                             0);
   
   alt_uCOSIIErrorHandler(error_code, 0);
 4000e58:	11003fcc 	andi	r4,r2,255
 4000e5c:	000b883a 	mov	r5,zero
 4000e60:	40006cc0 	call	40006cc <alt_uCOSIIErrorHandler>
   printf("\n\nNTP LCD Time Display Task Created\n\n");
 4000e64:	010100f4 	movhi	r4,1027
 4000e68:	21079c04 	addi	r4,r4,7792
 4000e6c:	4002fec0 	call	4002fec <puts>
  

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  error_code = OSTaskDel(OS_PRIO_SELF);
 4000e70:	01003fc4 	movi	r4,255
 4000e74:	40126500 	call	4012650 <OSTaskDel>
  alt_uCOSIIErrorHandler(error_code, 0);
 4000e78:	11003fcc 	andi	r4,r2,255
 4000e7c:	000b883a 	mov	r5,zero
 4000e80:	40006cc0 	call	40006cc <alt_uCOSIIErrorHandler>
 4000e84:	003fff06 	br	4000e84 <NTPInitialTask+0xb8>

04000e88 <get_ip_addr>:
    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
 4000e88:	d9000017 	ldw	r4,0(sp)
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
 4000e8c:	28000015 	stw	zero,0(r5)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
 4000e90:	38000015 	stw	zero,0(r7)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
 4000e94:	00800044 	movi	r2,1
                int* use_dhcp)
{

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
 4000e98:	00c04034 	movhi	r3,256
 4000e9c:	18ffffc4 	addi	r3,r3,-1
 4000ea0:	30c00015 	stw	r3,0(r6)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
 4000ea4:	20800015 	stw	r2,0(r4)
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
}
 4000ea8:	f800283a 	ret

04000eac <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
 4000eac:	defffc04 	addi	sp,sp,-16
 4000eb0:	dfc00315 	stw	ra,12(sp)
    
    if (1)
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
        mac_addr[1] = 0x1;
 4000eb4:	00800044 	movi	r2,1
    error_t error = -1;
    
    if (1)
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
 4000eb8:	20000005 	stb	zero,0(r4)
        mac_addr[1] = 0x1;
 4000ebc:	208f883a 	add	r7,r4,r2
        mac_addr[2] = 0x2;
 4000ec0:	00c00084 	movi	r3,2
    
    if (1)
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
        mac_addr[1] = 0x1;
 4000ec4:	38800005 	stb	r2,0(r7)
        mac_addr[2] = 0x2;
 4000ec8:	20d5883a 	add	r10,r4,r3
        
        mac_addr[3] = 0x3;
 4000ecc:	008000c4 	movi	r2,3
    if (1)
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
        mac_addr[1] = 0x1;
        mac_addr[2] = 0x2;
 4000ed0:	50c00005 	stb	r3,0(r10)
        
        mac_addr[3] = 0x3;
 4000ed4:	2093883a 	add	r9,r4,r2
        mac_addr[4] = 0x4;
 4000ed8:	00c00104 	movi	r3,4
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
        mac_addr[1] = 0x1;
        mac_addr[2] = 0x2;
        
        mac_addr[3] = 0x3;
 4000edc:	48800005 	stb	r2,0(r9)
        mac_addr[4] = 0x4;
 4000ee0:	20d1883a 	add	r8,r4,r3
 4000ee4:	40c00005 	stb	r3,0(r8)
        mac_addr[5] = 0x5;
 4000ee8:	00800144 	movi	r2,5
 4000eec:	20800145 	stb	r2,5(r4)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 4000ef0:	48800003 	ldbu	r2,0(r9)
 4000ef4:	21400003 	ldbu	r5,0(r4)
 4000ef8:	39800003 	ldbu	r6,0(r7)
 4000efc:	40c00003 	ldbu	r3,0(r8)
 4000f00:	51c00003 	ldbu	r7,0(r10)
 4000f04:	010100f4 	movhi	r4,1027
 4000f08:	2107a704 	addi	r4,r4,7836
 4000f0c:	d8800015 	stw	r2,0(sp)
 4000f10:	00800144 	movi	r2,5
 4000f14:	d8c00115 	stw	r3,4(sp)
 4000f18:	d8800215 	stw	r2,8(sp)
 4000f1c:	4002ed40 	call	4002ed4 <printf>
        
        error = 0;
    }
  
    return error;    
}
 4000f20:	0005883a 	mov	r2,zero
 4000f24:	dfc00317 	ldw	ra,12(sp)
 4000f28:	dec00404 	addi	sp,sp,16
 4000f2c:	f800283a 	ret

04000f30 <get_mac_addr>:
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
    error_t error = 0;
    error = generate_mac_addr(mac_addr);
 4000f30:	2809883a 	mov	r4,r5
 4000f34:	4000eac1 	jmpi	4000eac <generate_mac_addr>

04000f38 <NTPTask>:
 * is sent and upon receiving a response, the system clock is set.
 */
//void ntp_func(void* pd)
void NTPTask(void* pd)
//void NTPTask(void)
{
 4000f38:	deff8804 	addi	sp,sp,-480
 4000f3c:	dd807415 	stw	r22,464(sp)

  /* The size of addr struct is used several times, so we just get the size once here.*/
  sock_len = sizeof(addr);

  /*Clear all of our data structures*/
  memset (&ntp_send_data, 0, sizeof(ntp_send_data));
 4000f40:	dd801b04 	addi	r22,sp,108
  fd_set     socket_fds;
  int        req_delay = 1; //delay in minutes
  struct timeval timeout = {5, 0}; //timeout in {seconds, microseconds}

  /* The size of addr struct is used several times, so we just get the size once here.*/
  sock_len = sizeof(addr);
 4000f44:	00c00404 	movi	r3,16
 * is sent and upon receiving a response, the system clock is set.
 */
//void ntp_func(void* pd)
void NTPTask(void* pd)
//void NTPTask(void)
{
 4000f48:	df007615 	stw	fp,472(sp)

  /* The size of addr struct is used several times, so we just get the size once here.*/
  sock_len = sizeof(addr);

  /*Clear all of our data structures*/
  memset (&ntp_send_data, 0, sizeof(ntp_send_data));
 4000f4c:	b009883a 	mov	r4,r22
 4000f50:	000b883a 	mov	r5,zero
 4000f54:	01801204 	movi	r6,72
  alt_u8     *send_buffer;
  alt_u8     *recv_buffer;
  alt_u32    sock_len;
  fd_set     socket_fds;
  int        req_delay = 1; //delay in minutes
  struct timeval timeout = {5, 0}; //timeout in {seconds, microseconds}
 4000f58:	00800144 	movi	r2,5
  /* The size of addr struct is used several times, so we just get the size once here.*/
  sock_len = sizeof(addr);

  /*Clear all of our data structures*/
  memset (&ntp_send_data, 0, sizeof(ntp_send_data));
  memset (&ntp_recv_data, 0, sizeof(ntp_recv_data));
 4000f5c:	df000904 	addi	fp,sp,36
 * is sent and upon receiving a response, the system clock is set.
 */
//void ntp_func(void* pd)
void NTPTask(void* pd)
//void NTPTask(void)
{
 4000f60:	dfc07715 	stw	ra,476(sp)
  fd_set     socket_fds;
  int        req_delay = 1; //delay in minutes
  struct timeval timeout = {5, 0}; //timeout in {seconds, microseconds}

  /* The size of addr struct is used several times, so we just get the size once here.*/
  sock_len = sizeof(addr);
 4000f64:	d8c00215 	stw	r3,8(sp)
 * is sent and upon receiving a response, the system clock is set.
 */
//void ntp_func(void* pd)
void NTPTask(void* pd)
//void NTPTask(void)
{
 4000f68:	dd007215 	stw	r20,456(sp)
 4000f6c:	dc406f15 	stw	r17,444(sp)
 4000f70:	dc006e15 	stw	r16,440(sp)
 4000f74:	ddc07515 	stw	r23,468(sp)
 4000f78:	dd407315 	stw	r21,460(sp)
 4000f7c:	dcc07115 	stw	r19,452(sp)
 4000f80:	dc807015 	stw	r18,448(sp)
  alt_u8     *send_buffer;
  alt_u8     *recv_buffer;
  alt_u32    sock_len;
  fd_set     socket_fds;
  int        req_delay = 1; //delay in minutes
  struct timeval timeout = {5, 0}; //timeout in {seconds, microseconds}
 4000f84:	d8800315 	stw	r2,12(sp)
 4000f88:	d8000415 	stw	zero,16(sp)

  /* The size of addr struct is used several times, so we just get the size once here.*/
  sock_len = sizeof(addr);

  /*Clear all of our data structures*/
  memset (&ntp_send_data, 0, sizeof(ntp_send_data));
 4000f8c:	40026a00 	call	40026a0 <memset>
  memset (&ntp_recv_data, 0, sizeof(ntp_recv_data));
 4000f90:	e009883a 	mov	r4,fp
 4000f94:	000b883a 	mov	r5,zero
 4000f98:	01801204 	movi	r6,72
 4000f9c:	40026a00 	call	40026a0 <memset>
  memset (&addr, 0, sock_len);
 4000fa0:	d9800217 	ldw	r6,8(sp)
 4000fa4:	dd000504 	addi	r20,sp,20
 4000fa8:	a009883a 	mov	r4,r20
 4000fac:	000b883a 	mov	r5,zero
 4000fb0:	40026a00 	call	40026a0 <memset>
  ntp_send_data.mode = NTP_CLIENT;

  /* Here we declare our socket. For this example we declare a UDP socket as
   * NTP uses UDP.
   */
  if((socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 4000fb4:	04400084 	movi	r17,2
 * ntp_send_data struct to the NTP format.  Because the ntp_send_data_struct
 * has been zero initialized, all other fields will be sent as zeros. To be a
 * full implementation, other values may need to be set.  Functionally this gets
 * us what we want which is simply the time.
 */
  ntp_send_data.version_number = 3;
 4000fb8:	00c000c4 	movi	r3,3
  ntp_send_data.mode = NTP_CLIENT;

  /* Here we declare our socket. For this example we declare a UDP socket as
   * NTP uses UDP.
   */
  if((socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 4000fbc:	8809883a 	mov	r4,r17
 4000fc0:	880b883a 	mov	r5,r17
 4000fc4:	000d883a 	mov	r6,zero
 * has been zero initialized, all other fields will be sent as zeros. To be a
 * full implementation, other values may need to be set.  Functionally this gets
 * us what we want which is simply the time.
 */
  ntp_send_data.version_number = 3;
  ntp_send_data.mode = NTP_CLIENT;
 4000fc8:	d8c01b85 	stb	r3,110(sp)
 * ntp_send_data struct to the NTP format.  Because the ntp_send_data_struct
 * has been zero initialized, all other fields will be sent as zeros. To be a
 * full implementation, other values may need to be set.  Functionally this gets
 * us what we want which is simply the time.
 */
  ntp_send_data.version_number = 3;
 4000fcc:	d8c01b45 	stb	r3,109(sp)
  ntp_send_data.mode = NTP_CLIENT;

  /* Here we declare our socket. For this example we declare a UDP socket as
   * NTP uses UDP.
   */
  if((socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
 4000fd0:	401f4ac0 	call	401f4ac <t_socket>
 4000fd4:	1021883a 	mov	r16,r2
 4000fd8:	10006616 	blt	r2,zero,4001174 <NTPTask+0x23c>
   * family.  Port number 123 is used for UDP, and finally we are broadcasting
   * this message to any NTP server.  So the IP address is specified as any.
   */
   addr.sin_family = AF_INET;
   addr.sin_port = htons(NTP_PORT_NUM);
   addr.sin_addr.s_addr = htonl(NTP_SERVER_ADDR);
 4000fdc:	00ffa174 	movhi	r3,65157
 4000fe0:	18f557c4 	addi	r3,r3,-10913

   send_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4000fe4:	01000c04 	movi	r4,48
   * going to communicate with.  In this case, we are using the AF_INET protocol
   * family.  Port number 123 is used for UDP, and finally we are broadcasting
   * this message to any NTP server.  So the IP address is specified as any.
   */
   addr.sin_family = AF_INET;
   addr.sin_port = htons(NTP_PORT_NUM);
 4000fe8:	009ec004 	movi	r2,31488
   addr.sin_addr.s_addr = htonl(NTP_SERVER_ADDR);
 4000fec:	d8c00615 	stw	r3,24(sp)
 /* Now we fill information into our sockaddr_in struct about the server we are
   * going to communicate with.  In this case, we are using the AF_INET protocol
   * family.  Port number 123 is used for UDP, and finally we are broadcasting
   * this message to any NTP server.  So the IP address is specified as any.
   */
   addr.sin_family = AF_INET;
 4000ff0:	dc40050d 	sth	r17,20(sp)
   addr.sin_port = htons(NTP_PORT_NUM);
 4000ff4:	d880058d 	sth	r2,22(sp)
   addr.sin_addr.s_addr = htonl(NTP_SERVER_ADDR);

   send_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4000ff8:	4001f4c0 	call	4001f4c <malloc>
   recv_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4000ffc:	01000c04 	movi	r4,48
   */
   addr.sin_family = AF_INET;
   addr.sin_port = htons(NTP_PORT_NUM);
   addr.sin_addr.s_addr = htonl(NTP_SERVER_ADDR);

   send_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4001000:	1027883a 	mov	r19,r2
   recv_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4001004:	4001f4c0 	call	4001f4c <malloc>
 4001008:	1025883a 	mov	r18,r2

   memset(send_buffer, 0x0, NTP_BUFFER_SIZE);
 400100c:	9809883a 	mov	r4,r19
 4001010:	000b883a 	mov	r5,zero
 4001014:	01800c04 	movi	r6,48
 4001018:	40026a00 	call	40026a0 <memset>
   memset(recv_buffer, 0x0, NTP_BUFFER_SIZE);
 400101c:	9009883a 	mov	r4,r18
 4001020:	000b883a 	mov	r5,zero
 4001024:	01800c04 	movi	r6,48
 4001028:	40026a00 	call	40026a0 <memset>
 400102c:	dc402d04 	addi	r17,sp,180
 4001030:	85400044 	addi	r21,r16,1
 4001034:	ddc00304 	addi	r23,sp,12
 4001038:	00001106 	br	4001080 <NTPTask+0x148>
      /* set a timeout on the recieve, so we don't lock up on a missed packet */
      FD_SET(socket_fd, &socket_fds);
      select(socket_fd+1, &socket_fds, NULL, NULL, &timeout);
    }

    if(FD_ISSET(socket_fd, &socket_fds))
 400103c:	8009883a 	mov	r4,r16
 4001040:	880b883a 	mov	r5,r17
 4001044:	40216400 	call	4021640 <ifd_isset>
    {
      if(recvfrom(socket_fd, (void *)recv_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, (int *) &sock_len) < 0)
 4001048:	01800c04 	movi	r6,48
 400104c:	000f883a 	mov	r7,zero
 4001050:	8009883a 	mov	r4,r16
 4001054:	900b883a 	mov	r5,r18
      /* set a timeout on the recieve, so we don't lock up on a missed packet */
      FD_SET(socket_fd, &socket_fds);
      select(socket_fd+1, &socket_fds, NULL, NULL, &timeout);
    }

    if(FD_ISSET(socket_fd, &socket_fds))
 4001058:	1000311e 	bne	r2,zero,4001120 <NTPTask+0x1e8>
     * simplicity we will not implement those requirements, but set the system clock
     * and request the NTP data "req_delay" minutes from the time we get the first
     * NTP data back.
     */

    printf("Will send next NTP Request in %d minutes...\n",req_delay);
 400105c:	010100f4 	movhi	r4,1027
 4001060:	2107e004 	addi	r4,r4,8064
 4001064:	01400044 	movi	r5,1
 4001068:	4002ed40 	call	4002ed4 <printf>
    OSTimeDlyHMSM(0,req_delay,0,0);
 400106c:	000d883a 	mov	r6,zero
 4001070:	000f883a 	mov	r7,zero
 4001074:	0009883a 	mov	r4,zero
 4001078:	01400044 	movi	r5,1
 400107c:	40130740 	call	4013074 <OSTimeDlyHMSM>
   * The NTP packet received is decoded to the ntp_recv_data structure for easy 
   * access.
   */
  while(1)
  {
    encode_ntp_data(send_buffer, &ntp_send_data);
 4001080:	9809883a 	mov	r4,r19
 4001084:	b00b883a 	mov	r5,r22
 4001088:	40015f00 	call	40015f0 <encode_ntp_data>

    FD_ZERO(&socket_fds);

    if(!FD_ISSET(socket_fd, &socket_fds))
 400108c:	8009883a 	mov	r4,r16
 4001090:	880b883a 	mov	r5,r17
   */
  while(1)
  {
    encode_ntp_data(send_buffer, &ntp_send_data);

    FD_ZERO(&socket_fds);
 4001094:	d8002d15 	stw	zero,180(sp)

    if(!FD_ISSET(socket_fd, &socket_fds))
 4001098:	40216400 	call	4021640 <ifd_isset>
    {
      printf("Sending a NTP packet...\n");
 400109c:	010100f4 	movhi	r4,1027
 40010a0:	2107bf04 	addi	r4,r4,7932
  {
    encode_ntp_data(send_buffer, &ntp_send_data);

    FD_ZERO(&socket_fds);

    if(!FD_ISSET(socket_fd, &socket_fds))
 40010a4:	103fe51e 	bne	r2,zero,400103c <NTPTask+0x104>
    {
      printf("Sending a NTP packet...\n");
 40010a8:	4002fec0 	call	4002fec <puts>
      if(sendto(socket_fd, send_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, sock_len) < 0)
 40010ac:	d8800217 	ldw	r2,8(sp)
 40010b0:	8009883a 	mov	r4,r16
 40010b4:	980b883a 	mov	r5,r19
 40010b8:	01800c04 	movi	r6,48
 40010bc:	000f883a 	mov	r7,zero
 40010c0:	d8800115 	stw	r2,4(sp)
 40010c4:	dd000015 	stw	r20,0(sp)
 40010c8:	401e7100 	call	401e710 <t_sendto>
      {
          alt_NTPErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_func] Error sending NTP packet:\n");
 40010cc:	01003fc4 	movi	r4,255
 40010d0:	014100f4 	movhi	r5,1027
 40010d4:	2947c504 	addi	r5,r5,7956
    FD_ZERO(&socket_fds);

    if(!FD_ISSET(socket_fd, &socket_fds))
    {
      printf("Sending a NTP packet...\n");
      if(sendto(socket_fd, send_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, sock_len) < 0)
 40010d8:	10002216 	blt	r2,zero,4001164 <NTPTask+0x22c>
      {
          alt_NTPErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_func] Error sending NTP packet:\n");
      }

      /* set a timeout on the recieve, so we don't lock up on a missed packet */
      FD_SET(socket_fd, &socket_fds);
 40010dc:	8009883a 	mov	r4,r16
 40010e0:	880b883a 	mov	r5,r17
 40010e4:	40216b40 	call	40216b4 <ifd_set>
      select(socket_fd+1, &socket_fds, NULL, NULL, &timeout);
 40010e8:	000d883a 	mov	r6,zero
 40010ec:	000f883a 	mov	r7,zero
 40010f0:	a809883a 	mov	r4,r21
 40010f4:	880b883a 	mov	r5,r17
 40010f8:	ddc00015 	stw	r23,0(sp)
 40010fc:	401942c0 	call	401942c <bsd_select>
    }

    if(FD_ISSET(socket_fd, &socket_fds))
 4001100:	8009883a 	mov	r4,r16
 4001104:	880b883a 	mov	r5,r17
 4001108:	40216400 	call	4021640 <ifd_isset>
    {
      if(recvfrom(socket_fd, (void *)recv_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, (int *) &sock_len) < 0)
 400110c:	01800c04 	movi	r6,48
 4001110:	000f883a 	mov	r7,zero
 4001114:	8009883a 	mov	r4,r16
 4001118:	900b883a 	mov	r5,r18
      /* set a timeout on the recieve, so we don't lock up on a missed packet */
      FD_SET(socket_fd, &socket_fds);
      select(socket_fd+1, &socket_fds, NULL, NULL, &timeout);
    }

    if(FD_ISSET(socket_fd, &socket_fds))
 400111c:	103fcf26 	beq	r2,zero,400105c <NTPTask+0x124>
    {
      if(recvfrom(socket_fd, (void *)recv_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, (int *) &sock_len) < 0)
 4001120:	d8800204 	addi	r2,sp,8
 4001124:	dd000015 	stw	r20,0(sp)
 4001128:	d8800115 	stw	r2,4(sp)
 400112c:	40194700 	call	4019470 <bsd_recvfrom>
      {
          alt_NTPErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_func] Error receiving NTP packet:\n");
 4001130:	01003fc4 	movi	r4,255
 4001134:	014100f4 	movhi	r5,1027
 4001138:	2947cf04 	addi	r5,r5,7996
      select(socket_fd+1, &socket_fds, NULL, NULL, &timeout);
    }

    if(FD_ISSET(socket_fd, &socket_fds))
    {
      if(recvfrom(socket_fd, (void *)recv_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, (int *) &sock_len) < 0)
 400113c:	10000b16 	blt	r2,zero,400116c <NTPTask+0x234>
      {
          alt_NTPErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_func] Error receiving NTP packet:\n");
      }

      printf("Received a NTP response...\n");
 4001140:	010100f4 	movhi	r4,1027
 4001144:	2107d904 	addi	r4,r4,8036
 4001148:	4002fec0 	call	4002fec <puts>
      decode_ntp_data(recv_buffer, &ntp_recv_data);
 400114c:	e00b883a 	mov	r5,fp
 4001150:	9009883a 	mov	r4,r18
 4001154:	40011cc0 	call	40011cc <decode_ntp_data>
      setclock(ntp_recv_data.recv_timestamp1);
 4001158:	d9001217 	ldw	r4,72(sp)
 400115c:	4001b7c0 	call	4001b7c <setclock>
 4001160:	003fbe06 	br	400105c <NTPTask+0x124>
    if(!FD_ISSET(socket_fd, &socket_fds))
    {
      printf("Sending a NTP packet...\n");
      if(sendto(socket_fd, send_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, sock_len) < 0)
      {
          alt_NTPErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_func] Error sending NTP packet:\n");
 4001164:	40001d40 	call	40001d4 <alt_NTPErrorHandler>
 4001168:	003fdc06 	br	40010dc <NTPTask+0x1a4>

    if(FD_ISSET(socket_fd, &socket_fds))
    {
      if(recvfrom(socket_fd, (void *)recv_buffer, NTP_BUFFER_SIZE, 0, (struct sockaddr *)&addr, (int *) &sock_len) < 0)
      {
          alt_NTPErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_func] Error receiving NTP packet:\n");
 400116c:	40001d40 	call	40001d4 <alt_NTPErrorHandler>
 4001170:	003ff306 	br	4001140 <NTPTask+0x208>
  /* Here we declare our socket. For this example we declare a UDP socket as
   * NTP uses UDP.
   */
  if((socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  {
	  alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[ntp_task] Socket creation failed");
 4001174:	01003fc4 	movi	r4,255
 4001178:	014100f4 	movhi	r5,1027
 400117c:	2947b604 	addi	r5,r5,7896
 4001180:	4000bd00 	call	4000bd0 <alt_NetworkErrorHandler>
 4001184:	003f9506 	br	4000fdc <NTPTask+0xa4>

04001188 <NTPCreateOSDataStructs>:
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "NTP" are declared in this file, and created in this function.
 */
void NTPCreateOSDataStructs(void)
{
 4001188:	deffff04 	addi	sp,sp,-4
/*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  NTPCommandQ = OSQCreate(&NTPCommandQTbl[0], NTP_COMMAND_Q_SIZE);
 400118c:	01010134 	movhi	r4,1028
 4001190:	2139d504 	addi	r4,r4,-6316
 4001194:	01410004 	movi	r5,1024
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "NTP" are declared in this file, and created in this function.
 */
void NTPCreateOSDataStructs(void)
{
 4001198:	dfc00015 	stw	ra,0(sp)
/*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  NTPCommandQ = OSQCreate(&NTPCommandQTbl[0], NTP_COMMAND_Q_SIZE);
 400119c:	4010f340 	call	4010f34 <OSQCreate>
 40011a0:	d0a7e715 	stw	r2,-24676(gp)
  if (!NTPCommandQ)
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
 40011a4:	01003fc4 	movi	r4,255
 40011a8:	014100f4 	movhi	r5,1027
 40011ac:	2947ec04 	addi	r5,r5,8112
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  NTPCommandQ = OSQCreate(&NTPCommandQTbl[0], NTP_COMMAND_Q_SIZE);
  if (!NTPCommandQ)
 40011b0:	10000326 	beq	r2,zero,40011c0 <NTPCreateOSDataStructs+0x38>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
     "Failed to create NTPCommandQ.\n");
  }
}
 40011b4:	dfc00017 	ldw	ra,0(sp)
 40011b8:	dec00104 	addi	sp,sp,4
 40011bc:	f800283a 	ret
 40011c0:	dfc00017 	ldw	ra,0(sp)
 40011c4:	dec00104 	addi	sp,sp,4
  * to the LEDManagementTask().
  */
  NTPCommandQ = OSQCreate(&NTPCommandQTbl[0], NTP_COMMAND_Q_SIZE);
  if (!NTPCommandQ)
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
 40011c8:	40006cc1 	jmpi	40006cc <alt_uCOSIIErrorHandler>

040011cc <decode_ntp_data>:
 * The purpose of this function is to convert an NTP buffer area from network
 * byte order to host byte order.
 */
static int convert_ntp_data_to_host(alt_u8 * ntp_buffer)
{
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) = 
 40011cc:	20800017 	ldw	r2,0(r4)
 40011d0:	023fc014 	movui	r8,65280
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 40011d4:	defff704 	addi	sp,sp,-36
 * The purpose of this function is to convert an NTP buffer area from network
 * byte order to host byte order.
 */
static int convert_ntp_data_to_host(alt_u8 * ntp_buffer)
{
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) = 
 40011d8:	1206703a 	and	r3,r2,r8
 40011dc:	100cd23a 	srli	r6,r2,8
 40011e0:	100e963a 	slli	r7,r2,24
 40011e4:	1806923a 	slli	r3,r3,8
 40011e8:	1004d63a 	srli	r2,r2,24
 40011ec:	320c703a 	and	r6,r6,r8
 40011f0:	19c6b03a 	or	r3,r3,r7
 40011f4:	1184b03a 	or	r2,r2,r6
 40011f8:	10c4b03a 	or	r2,r2,r3
 40011fc:	20800015 	stw	r2,0(r4)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 4001200:	df000815 	stw	fp,32(sp)
static int convert_ntp_data_to_host(alt_u8 * ntp_buffer)
{
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer));
  
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer) = 
 4001204:	27000204 	addi	fp,r4,8
 4001208:	e0c00017 	ldw	r3,0(fp)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 400120c:	dd800615 	stw	r22,24(sp)
  ntohl(*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer));
  
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_ROOT_DISP(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_ID(ntp_buffer) = 
 4001210:	25800304 	addi	r22,r4,12
static int convert_ntp_data_to_host(alt_u8 * ntp_buffer)
{
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer));
  
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer) = 
 4001214:	1a04703a 	and	r2,r3,r8
 4001218:	180cd23a 	srli	r6,r3,8
 400121c:	180e963a 	slli	r7,r3,24
 4001220:	1004923a 	slli	r2,r2,8
 4001224:	1806d63a 	srli	r3,r3,24
 4001228:	320c703a 	and	r6,r6,r8
 400122c:	11c4b03a 	or	r2,r2,r7
 4001230:	1986b03a 	or	r3,r3,r6
 4001234:	1886b03a 	or	r3,r3,r2
 4001238:	e0c00015 	stw	r3,0(fp)
  ntohl(*NTP_DATA_GRAM_ROOT_DISP(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_ID(ntp_buffer) = 
 400123c:	b0800017 	ldw	r2,0(r22)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 4001240:	ddc00715 	stw	r23,28(sp)
  ntohl(*NTP_DATA_GRAM_ROOT_DISP(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_ID(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_REF_ID(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer) = 
 4001244:	25c00404 	addi	r23,r4,16
  ntohl(*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer));
  
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_ROOT_DISP(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_ID(ntp_buffer) = 
 4001248:	1206703a 	and	r3,r2,r8
 400124c:	100cd23a 	srli	r6,r2,8
 4001250:	100e963a 	slli	r7,r2,24
 4001254:	1806923a 	slli	r3,r3,8
 4001258:	1004d63a 	srli	r2,r2,24
 400125c:	320c703a 	and	r6,r6,r8
 4001260:	19c6b03a 	or	r3,r3,r7
 4001264:	1184b03a 	or	r2,r2,r6
 4001268:	10c4b03a 	or	r2,r2,r3
 400126c:	b0800015 	stw	r2,0(r22)
  ntohl(*NTP_DATA_GRAM_REF_ID(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer) = 
 4001270:	b8c00017 	ldw	r3,0(r23)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 4001274:	dd000415 	stw	r20,16(sp)
  ntohl(*NTP_DATA_GRAM_REF_ID(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer) = 
 4001278:	25000504 	addi	r20,r4,20
  ntohl(*NTP_DATA_GRAM_ROOT_DISP(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_ID(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_REF_ID(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer) = 
 400127c:	1a04703a 	and	r2,r3,r8
 4001280:	180cd23a 	srli	r6,r3,8
 4001284:	180e963a 	slli	r7,r3,24
 4001288:	1004923a 	slli	r2,r2,8
 400128c:	1806d63a 	srli	r3,r3,24
 4001290:	320c703a 	and	r6,r6,r8
 4001294:	11c4b03a 	or	r2,r2,r7
 4001298:	1986b03a 	or	r3,r3,r6
 400129c:	1886b03a 	or	r3,r3,r2
 40012a0:	b8c00015 	stw	r3,0(r23)
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer) = 
 40012a4:	a0800017 	ldw	r2,0(r20)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 40012a8:	dd400515 	stw	r21,20(sp)
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer) = 
 40012ac:	25400604 	addi	r21,r4,24
  ntohl(*NTP_DATA_GRAM_REF_ID(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer) = 
 40012b0:	1206703a 	and	r3,r2,r8
 40012b4:	100cd23a 	srli	r6,r2,8
 40012b8:	100e963a 	slli	r7,r2,24
 40012bc:	1806923a 	slli	r3,r3,8
 40012c0:	1004d63a 	srli	r2,r2,24
 40012c4:	320c703a 	and	r6,r6,r8
 40012c8:	19c6b03a 	or	r3,r3,r7
 40012cc:	1184b03a 	or	r2,r2,r6
 40012d0:	10c4b03a 	or	r2,r2,r3
 40012d4:	a0800015 	stw	r2,0(r20)
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer) = 
 40012d8:	a8c00017 	ldw	r3,0(r21)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 40012dc:	dc800215 	stw	r18,8(sp)
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer) = 
 40012e0:	24800704 	addi	r18,r4,28
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer) = 
 40012e4:	1a04703a 	and	r2,r3,r8
 40012e8:	180cd23a 	srli	r6,r3,8
 40012ec:	180e963a 	slli	r7,r3,24
 40012f0:	1004923a 	slli	r2,r2,8
 40012f4:	1806d63a 	srli	r3,r3,24
 40012f8:	320c703a 	and	r6,r6,r8
 40012fc:	11c4b03a 	or	r2,r2,r7
 4001300:	1986b03a 	or	r3,r3,r6
 4001304:	1886b03a 	or	r3,r3,r2
 4001308:	a8c00015 	stw	r3,0(r21)
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer) = 
 400130c:	90800017 	ldw	r2,0(r18)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 4001310:	dcc00315 	stw	r19,12(sp)
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer));

 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer) = 
 4001314:	24c00804 	addi	r19,r4,32
  ntohl(*NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer) = 
 4001318:	1206703a 	and	r3,r2,r8
 400131c:	100cd23a 	srli	r6,r2,8
 4001320:	100e963a 	slli	r7,r2,24
 4001324:	1806923a 	slli	r3,r3,8
 4001328:	1004d63a 	srli	r2,r2,24
 400132c:	320c703a 	and	r6,r6,r8
 4001330:	19c6b03a 	or	r3,r3,r7
 4001334:	1184b03a 	or	r2,r2,r6
 4001338:	10c4b03a 	or	r2,r2,r3
 400133c:	90800015 	stw	r2,0(r18)
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer));

 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer) = 
 4001340:	98c00017 	ldw	r3,0(r19)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 4001344:	dc000015 	stw	r16,0(sp)
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer));

 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer) = 
 4001348:	24000904 	addi	r16,r4,36
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer));
 
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer));

 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer) = 
 400134c:	1a04703a 	and	r2,r3,r8
 4001350:	180cd23a 	srli	r6,r3,8
 4001354:	180e963a 	slli	r7,r3,24
 4001358:	1004923a 	slli	r2,r2,8
 400135c:	1806d63a 	srli	r3,r3,24
 4001360:	320c703a 	and	r6,r6,r8
 4001364:	11c4b03a 	or	r2,r2,r7
 4001368:	1986b03a 	or	r3,r3,r6
 400136c:	1886b03a 	or	r3,r3,r2
 4001370:	98c00015 	stw	r3,0(r19)
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer) = 
 4001374:	80800017 	ldw	r2,0(r16)
 * ntp_data_gram_struc.  NTP comes a network byte order in a format described
 * in RFC 2030(SNTP) and RFC 1305(NTP).  Once the ntp_data_gram_struc is loaded
 * the user can access the data in the host byte order.
 */
int decode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 4001378:	dc400115 	stw	r17,4(sp)
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer) = 
 400137c:	24400a04 	addi	r17,r4,40
  ntohl(*NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer));

 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer) = 
 4001380:	1206703a 	and	r3,r2,r8
 4001384:	100cd23a 	srli	r6,r2,8
 4001388:	100e963a 	slli	r7,r2,24
 400138c:	1806923a 	slli	r3,r3,8
 4001390:	1004d63a 	srli	r2,r2,24
 4001394:	320c703a 	and	r6,r6,r8
 4001398:	19c6b03a 	or	r3,r3,r7
 400139c:	1184b03a 	or	r2,r2,r6
 40013a0:	10c4b03a 	or	r2,r2,r3
 40013a4:	80800015 	stw	r2,0(r16)
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer) = 
 40013a8:	89800017 	ldw	r6,0(r17)
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = 
 40013ac:	23800b04 	addi	r14,r4,44
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer) = 
 40013b0:	23c00c04 	addi	r15,r4,48
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer) = 
 40013b4:	3206703a 	and	r3,r6,r8
 40013b8:	300ed23a 	srli	r7,r6,8
 40013bc:	3012963a 	slli	r9,r6,24
 40013c0:	1806923a 	slli	r3,r3,8
 40013c4:	300cd63a 	srli	r6,r6,24
 40013c8:	3a0e703a 	and	r7,r7,r8
 40013cc:	1a46b03a 	or	r3,r3,r9
 40013d0:	31ccb03a 	or	r6,r6,r7
 40013d4:	30ccb03a 	or	r6,r6,r3
 40013d8:	89800015 	stw	r6,0(r17)
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = 
 40013dc:	70c00017 	ldw	r3,0(r14)
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_KEY_ID(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer) = 
 40013e0:	23000d04 	addi	r12,r4,52
  ntohl(*NTP_DATA_GRAM_MSG_DIG1(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer) = 
 40013e4:	23400e04 	addi	r13,r4,56
  ntohl(*NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = 
 40013e8:	1a0c703a 	and	r6,r3,r8
 40013ec:	180ed23a 	srli	r7,r3,8
 40013f0:	1812963a 	slli	r9,r3,24
 40013f4:	300c923a 	slli	r6,r6,8
 40013f8:	1806d63a 	srli	r3,r3,24
 40013fc:	3a0e703a 	and	r7,r7,r8
 4001400:	324cb03a 	or	r6,r6,r9
 4001404:	19c6b03a 	or	r3,r3,r7
 4001408:	1986b03a 	or	r3,r3,r6
 400140c:	70c00015 	stw	r3,0(r14)
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer) = 
 4001410:	79800017 	ldw	r6,0(r15)
  ntohl(*NTP_DATA_GRAM_MSG_DIG1(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_MSG_DIG2(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer) = 
 4001414:	22800f04 	addi	r10,r4,60
  ntohl(*NTP_DATA_GRAM_MSG_DIG3(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer) = 
 4001418:	22c01004 	addi	r11,r4,64
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer) = 
 400141c:	3206703a 	and	r3,r6,r8
 4001420:	300ed23a 	srli	r7,r6,8
 4001424:	3012963a 	slli	r9,r6,24
 4001428:	1806923a 	slli	r3,r3,8
 400142c:	300cd63a 	srli	r6,r6,24
 4001430:	3a0e703a 	and	r7,r7,r8
 4001434:	1a46b03a 	or	r3,r3,r9
 4001438:	31ccb03a 	or	r6,r6,r7
 400143c:	30ccb03a 	or	r6,r6,r3
 4001440:	79800015 	stw	r6,0(r15)
  ntohl(*NTP_DATA_GRAM_KEY_ID(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer) = 
 4001444:	60c00017 	ldw	r3,0(r12)
 ntp_data->msg_digest2      = *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer);
 ntp_data->msg_digest3      = *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer);
 ntp_data->msg_digest4      = *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer);
 
 return 0;
}
 4001448:	0005883a 	mov	r2,zero
  ntohl(*NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer) = 
  ntohl(*NTP_DATA_GRAM_KEY_ID(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer) = 
 400144c:	1a0c703a 	and	r6,r3,r8
 4001450:	180ed23a 	srli	r7,r3,8
 4001454:	1812963a 	slli	r9,r3,24
 4001458:	300c923a 	slli	r6,r6,8
 400145c:	1806d63a 	srli	r3,r3,24
 4001460:	3a0e703a 	and	r7,r7,r8
 4001464:	324cb03a 	or	r6,r6,r9
 4001468:	19c6b03a 	or	r3,r3,r7
 400146c:	1986b03a 	or	r3,r3,r6
 4001470:	60c00015 	stw	r3,0(r12)
  ntohl(*NTP_DATA_GRAM_MSG_DIG1(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer) = 
 4001474:	69800017 	ldw	r6,0(r13)
 4001478:	3206703a 	and	r3,r6,r8
 400147c:	300ed23a 	srli	r7,r6,8
 4001480:	3012963a 	slli	r9,r6,24
 4001484:	1806923a 	slli	r3,r3,8
 4001488:	300cd63a 	srli	r6,r6,24
 400148c:	3a0e703a 	and	r7,r7,r8
 4001490:	1a46b03a 	or	r3,r3,r9
 4001494:	31ccb03a 	or	r6,r6,r7
 4001498:	30ccb03a 	or	r6,r6,r3
 400149c:	69800015 	stw	r6,0(r13)
  ntohl(*NTP_DATA_GRAM_MSG_DIG2(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer) = 
 40014a0:	50c00017 	ldw	r3,0(r10)
 40014a4:	1a0c703a 	and	r6,r3,r8
 40014a8:	180ed23a 	srli	r7,r3,8
 40014ac:	1812963a 	slli	r9,r3,24
 40014b0:	300c923a 	slli	r6,r6,8
 40014b4:	1806d63a 	srli	r3,r3,24
 40014b8:	3a0e703a 	and	r7,r7,r8
 40014bc:	324cb03a 	or	r6,r6,r9
 40014c0:	19c6b03a 	or	r3,r3,r7
 40014c4:	1986b03a 	or	r3,r3,r6
 40014c8:	50c00015 	stw	r3,0(r10)
  ntohl(*NTP_DATA_GRAM_MSG_DIG3(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer) = 
 40014cc:	59800017 	ldw	r6,0(r11)
 40014d0:	3206703a 	and	r3,r6,r8
 40014d4:	300ed23a 	srli	r7,r6,8
 40014d8:	3012963a 	slli	r9,r6,24
 40014dc:	1806923a 	slli	r3,r3,8
 40014e0:	300cd63a 	srli	r6,r6,24
 40014e4:	3a0e703a 	and	r7,r7,r8
 40014e8:	1a46b03a 	or	r3,r3,r9
 40014ec:	31ccb03a 	or	r6,r6,r7
 40014f0:	30ccb03a 	or	r6,r6,r3
 40014f4:	59800015 	stw	r6,0(r11)
{
//Convert the NTP data received to host byte order
 convert_ntp_data_to_host(ntp_buffer);

//NTP Control Header Decode
 ntp_data->leap_indicator = ((*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) >>
 40014f8:	20c00017 	ldw	r3,0(r4)
 40014fc:	1806d7ba 	srli	r3,r3,30
 4001500:	28c00005 	stb	r3,0(r5)
                               NTP_CONT_HEAD_LI_OFST) & 
                               NTP_CONT_HEAD_LI_MSK);
                              
 ntp_data->version_number = ((*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) >>
 4001504:	21800017 	ldw	r6,0(r4)
 4001508:	300cd6fa 	srli	r6,r6,27
 400150c:	318001cc 	andi	r6,r6,7
 4001510:	29800045 	stb	r6,1(r5)
                               NTP_CONT_HEAD_VN_OFST) & 
                               NTP_CONT_HEAD_VN_MSK);

 ntp_data->mode           = ((*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) >>
 4001514:	20c00017 	ldw	r3,0(r4)
 4001518:	1806d63a 	srli	r3,r3,24
 400151c:	18c001cc 	andi	r3,r3,7
 4001520:	28c00085 	stb	r3,2(r5)
                               NTP_CONT_HEAD_MODE_OFST) & 
                               NTP_CONT_HEAD_MODE_MSK); 
                    
 ntp_data->stratum        = ((*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) >>
 4001524:	21800017 	ldw	r6,0(r4)
 4001528:	300cd43a 	srli	r6,r6,16
 400152c:	298000c5 	stb	r6,3(r5)
                               NTP_CONT_HEAD_STRATUM_OFST)& 
                               NTP_CONT_HEAD_STRATUM_MSK);
                       
 ntp_data->poll_interval  = ((*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) >> 
 4001530:	20c00017 	ldw	r3,0(r4)
 4001534:	1806d23a 	srli	r3,r3,8
 4001538:	28c00105 	stb	r3,4(r5)
                               NTP_CONT_HEAD_POLL_OFST) & 
                               NTP_CONT_HEAD_POLL_MSK); 
                             
 ntp_data->precision      = ((*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) >>
 400153c:	21800017 	ldw	r6,0(r4)
 4001540:	29800145 	stb	r6,5(r5)
                               NTP_CONT_HEAD_PRECISION_OFST) & 
                               NTP_CONT_HEAD_PRECISION_MSK); 

//NTP Root Delay Decode
 ntp_data->root_delay       = *NTP_DATA_GRAM_ROOT_DELAY(ntp_buffer);
 4001544:	20c00117 	ldw	r3,4(r4)
 4001548:	28c00215 	stw	r3,8(r5)
//NTP Root Dispersion Decode
 ntp_data->root_dispersion  = *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer);
 400154c:	e1000017 	ldw	r4,0(fp)
 4001550:	29000315 	stw	r4,12(r5)
//NTP Reference ID Decode
 ntp_data->ref_id           = *NTP_DATA_GRAM_REF_ID(ntp_buffer);
 4001554:	b0c00017 	ldw	r3,0(r22)
 4001558:	28c00415 	stw	r3,16(r5)
//NTP Reference Timestamp Decode
 ntp_data->ref_timestamp1   = *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer);
 400155c:	b9000017 	ldw	r4,0(r23)
 4001560:	29000515 	stw	r4,20(r5)
 ntp_data->ref_timestamp2   = *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer);
 4001564:	a0c00017 	ldw	r3,0(r20)
 4001568:	28c00615 	stw	r3,24(r5)
//NTP Originate Timestamp Decode 
 ntp_data->orig_timestamp1  = *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer);
 400156c:	a9000017 	ldw	r4,0(r21)
 4001570:	29000715 	stw	r4,28(r5)
 ntp_data->orig_timestamp2  = *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer);
 4001574:	90c00017 	ldw	r3,0(r18)
 4001578:	28c00815 	stw	r3,32(r5)
//NTP Receive Timestamp Decode 
 ntp_data->recv_timestamp1  = *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer);
 400157c:	99000017 	ldw	r4,0(r19)
 4001580:	29000915 	stw	r4,36(r5)
 ntp_data->recv_timestamp2  = *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer);
 4001584:	80c00017 	ldw	r3,0(r16)
 4001588:	28c00a15 	stw	r3,40(r5)
//NTP Transmit Timestamp Decode 
 ntp_data->trans_timestamp1 = *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer);
 400158c:	89000017 	ldw	r4,0(r17)
 4001590:	29000b15 	stw	r4,44(r5)
 ntp_data->trans_timestamp2 = *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer);
 4001594:	70c00017 	ldw	r3,0(r14)
 4001598:	28c00c15 	stw	r3,48(r5)
//NTP Key ID Decode 
 ntp_data->key_id           = *NTP_DATA_GRAM_KEY_ID(ntp_buffer);
 400159c:	79000017 	ldw	r4,0(r15)
 40015a0:	29000d15 	stw	r4,52(r5)
//NTP Message Digest Decode 
 ntp_data->msg_digest1      = *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer);
 40015a4:	60c00017 	ldw	r3,0(r12)
 40015a8:	28c00e15 	stw	r3,56(r5)
 ntp_data->msg_digest2      = *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer);
 40015ac:	69000017 	ldw	r4,0(r13)
 40015b0:	29000f15 	stw	r4,60(r5)
 ntp_data->msg_digest3      = *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer);
 40015b4:	50c00017 	ldw	r3,0(r10)
 40015b8:	28c01015 	stw	r3,64(r5)
 ntp_data->msg_digest4      = *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer);
 40015bc:	59000017 	ldw	r4,0(r11)
 40015c0:	29001115 	stw	r4,68(r5)
 
 return 0;
}
 40015c4:	df000817 	ldw	fp,32(sp)
 40015c8:	ddc00717 	ldw	r23,28(sp)
 40015cc:	dd800617 	ldw	r22,24(sp)
 40015d0:	dd400517 	ldw	r21,20(sp)
 40015d4:	dd000417 	ldw	r20,16(sp)
 40015d8:	dcc00317 	ldw	r19,12(sp)
 40015dc:	dc800217 	ldw	r18,8(sp)
 40015e0:	dc400117 	ldw	r17,4(sp)
 40015e4:	dc000017 	ldw	r16,0(sp)
 40015e8:	dec00904 	addi	sp,sp,36
 40015ec:	f800283a 	ret

040015f0 <encode_ntp_data>:
 * ntp_data_gram_struc and place it in a NTP buffer in a order ready for 
 * transmission.  
 */
 
 int encode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
 40015f0:	defff804 	addi	sp,sp,-32
 40015f4:	ddc00715 	stw	r23,28(sp)
 40015f8:	dd800615 	stw	r22,24(sp)
 40015fc:	dd400515 	stw	r21,20(sp)
 4001600:	dd000415 	stw	r20,16(sp)
 4001604:	dcc00315 	stw	r19,12(sp)
 4001608:	dc800215 	stw	r18,8(sp)
 400160c:	dc400115 	stw	r17,4(sp)
 4001610:	dc000015 	stw	r16,0(sp)
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
 4001614:	28800003 	ldbu	r2,0(r5)
 4001618:	21800017 	ldw	r6,0(r4)
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->precision << 
                                               NTP_CONT_HEAD_PRECISION_OFST);
//NTP Root Delay Encode
 *NTP_DATA_GRAM_ROOT_DELAY(ntp_buffer)       = ntp_data->root_delay;
//NTP Root Dispersion Encode
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer)        = ntp_data->root_dispersion;
 400161c:	22400204 	addi	r9,r4,8
 */
 
 int encode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
 4001620:	100497ba 	slli	r2,r2,30
//NTP Root Delay Encode
 *NTP_DATA_GRAM_ROOT_DELAY(ntp_buffer)       = ntp_data->root_delay;
//NTP Root Dispersion Encode
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer)        = ntp_data->root_dispersion;
//NTP Reference ID Encode
 *NTP_DATA_GRAM_REF_ID(ntp_buffer)           = ntp_data->ref_id;
 4001624:	22800304 	addi	r10,r4,12
//NTP Reference Timestamp Encode 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer)    = ntp_data->ref_timestamp1;
 4001628:	22c00404 	addi	r11,r4,16
 */
 
 int encode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
 400162c:	308cb03a 	or	r6,r6,r2
 4001630:	21800015 	stw	r6,0(r4)
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
 4001634:	28800043 	ldbu	r2,1(r5)
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer)        = ntp_data->root_dispersion;
//NTP Reference ID Encode
 *NTP_DATA_GRAM_REF_ID(ntp_buffer)           = ntp_data->ref_id;
//NTP Reference Timestamp Encode 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer)    = ntp_data->ref_timestamp1;
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer)   = ntp_data->ref_timestamp2;
 4001638:	23000504 	addi	r12,r4,20
//NTP Originate Timestamp Encode  
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer)   = ntp_data->orig_timestamp1;
 400163c:	23400604 	addi	r13,r4,24
 int encode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
 4001640:	100496fa 	slli	r2,r2,27
//NTP Reference Timestamp Encode 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer)    = ntp_data->ref_timestamp1;
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer)   = ntp_data->ref_timestamp2;
//NTP Originate Timestamp Encode  
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer)   = ntp_data->orig_timestamp1;
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer)  = ntp_data->orig_timestamp2;
 4001644:	23800704 	addi	r14,r4,28
//NTP Receive Timestamp Encode 
 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer)   = ntp_data->recv_timestamp1;
 4001648:	23c00804 	addi	r15,r4,32
 int encode_ntp_data(alt_u8 * ntp_buffer, ntp_struct *ntp_data)
{
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
 400164c:	308cb03a 	or	r6,r6,r2
 4001650:	21800015 	stw	r6,0(r4)
                                               NTP_CONT_HEAD_VN_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->mode << 
 4001654:	28800083 	ldbu	r2,2(r5)
//NTP Originate Timestamp Encode  
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer)   = ntp_data->orig_timestamp1;
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer)  = ntp_data->orig_timestamp2;
//NTP Receive Timestamp Encode 
 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer)   = ntp_data->recv_timestamp1;
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer)  = ntp_data->recv_timestamp2;
 4001658:	24000904 	addi	r16,r4,36
//NTP Transmit Timestamp Encode 
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer)  = ntp_data->trans_timestamp1;
 400165c:	24400a04 	addi	r17,r4,40
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
                                               NTP_CONT_HEAD_VN_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->mode << 
 4001660:	1004963a 	slli	r2,r2,24
//NTP Receive Timestamp Encode 
 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer)   = ntp_data->recv_timestamp1;
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer)  = ntp_data->recv_timestamp2;
//NTP Transmit Timestamp Encode 
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer)  = ntp_data->trans_timestamp1;
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = ntp_data->trans_timestamp2;
 4001664:	24800b04 	addi	r18,r4,44
//NTP Key ID Encode  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer)           = ntp_data->key_id;
 4001668:	24c00c04 	addi	r19,r4,48
//NTP Control Header Encode 
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->leap_indicator << 
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
                                               NTP_CONT_HEAD_VN_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->mode << 
 400166c:	308cb03a 	or	r6,r6,r2
 4001670:	21800015 	stw	r6,0(r4)
                                               NTP_CONT_HEAD_MODE_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->stratum << 
 4001674:	288000c3 	ldbu	r2,3(r5)
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer)  = ntp_data->trans_timestamp1;
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = ntp_data->trans_timestamp2;
//NTP Key ID Encode  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer)           = ntp_data->key_id;
//NTP Message Digest Encode  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer)         = ntp_data->msg_digest1;
 4001678:	25000d04 	addi	r20,r4,52
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer)         = ntp_data->msg_digest2;
 400167c:	25400e04 	addi	r21,r4,56
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
                                               NTP_CONT_HEAD_VN_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->mode << 
                                               NTP_CONT_HEAD_MODE_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->stratum << 
 4001680:	1004943a 	slli	r2,r2,16
//NTP Key ID Encode  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer)           = ntp_data->key_id;
//NTP Message Digest Encode  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer)         = ntp_data->msg_digest1;
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer)         = ntp_data->msg_digest2;
 *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer)         = ntp_data->msg_digest3;
 4001684:	25800f04 	addi	r22,r4,60
 *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer)         = ntp_data->msg_digest4;
 4001688:	25c01004 	addi	r23,r4,64
                                               NTP_CONT_HEAD_LI_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->version_number << 
                                               NTP_CONT_HEAD_VN_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->mode << 
                                               NTP_CONT_HEAD_MODE_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->stratum << 
 400168c:	308cb03a 	or	r6,r6,r2
 4001690:	21800015 	stw	r6,0(r4)
                                               NTP_CONT_HEAD_STRATUM_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->poll_interval << 
 4001694:	28c00107 	ldb	r3,4(r5)
 * byte order to network byte order.
 */

static int convert_ntp_data_to_net(alt_u8 * ntp_buffer)
{
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) = 
 4001698:	01ffc014 	movui	r7,65280
 
//Convert the NTP host data to network byte order 
 convert_ntp_data_to_net(ntp_buffer);
 
 return 0;
}
 400169c:	0005883a 	mov	r2,zero
                                               NTP_CONT_HEAD_VN_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->mode << 
                                               NTP_CONT_HEAD_MODE_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->stratum << 
                                               NTP_CONT_HEAD_STRATUM_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->poll_interval << 
 40016a0:	1806923a 	slli	r3,r3,8
 40016a4:	30ccb03a 	or	r6,r6,r3
 40016a8:	21800015 	stw	r6,0(r4)
                                               NTP_CONT_HEAD_POLL_OFST);
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) |= (ntp_data->precision << 
 40016ac:	28c00147 	ldb	r3,5(r5)
 40016b0:	30ccb03a 	or	r6,r6,r3
 40016b4:	21800015 	stw	r6,0(r4)
                                               NTP_CONT_HEAD_PRECISION_OFST);
//NTP Root Delay Encode
 *NTP_DATA_GRAM_ROOT_DELAY(ntp_buffer)       = ntp_data->root_delay;
 40016b8:	28c00217 	ldw	r3,8(r5)
 40016bc:	20c00115 	stw	r3,4(r4)
//NTP Root Dispersion Encode
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer)        = ntp_data->root_dispersion;
 40016c0:	29800317 	ldw	r6,12(r5)
 40016c4:	49800015 	stw	r6,0(r9)
//NTP Reference ID Encode
 *NTP_DATA_GRAM_REF_ID(ntp_buffer)           = ntp_data->ref_id;
 40016c8:	28c00417 	ldw	r3,16(r5)
 40016cc:	50c00015 	stw	r3,0(r10)
//NTP Reference Timestamp Encode 
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer)    = ntp_data->ref_timestamp1;
 40016d0:	29800517 	ldw	r6,20(r5)
 40016d4:	59800015 	stw	r6,0(r11)
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer)   = ntp_data->ref_timestamp2;
 40016d8:	28c00617 	ldw	r3,24(r5)
 40016dc:	60c00015 	stw	r3,0(r12)
//NTP Originate Timestamp Encode  
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer)   = ntp_data->orig_timestamp1;
 40016e0:	29800717 	ldw	r6,28(r5)
 40016e4:	69800015 	stw	r6,0(r13)
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer)  = ntp_data->orig_timestamp2;
 40016e8:	28c00817 	ldw	r3,32(r5)
 40016ec:	70c00015 	stw	r3,0(r14)
//NTP Receive Timestamp Encode 
 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer)   = ntp_data->recv_timestamp1;
 40016f0:	29800917 	ldw	r6,36(r5)
 40016f4:	79800015 	stw	r6,0(r15)
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer)  = ntp_data->recv_timestamp2;
 40016f8:	28c00a17 	ldw	r3,40(r5)
 40016fc:	80c00015 	stw	r3,0(r16)
//NTP Transmit Timestamp Encode 
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer)  = ntp_data->trans_timestamp1;
 4001700:	29800b17 	ldw	r6,44(r5)
 4001704:	89800015 	stw	r6,0(r17)
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = ntp_data->trans_timestamp2;
 4001708:	28c00c17 	ldw	r3,48(r5)
 400170c:	90c00015 	stw	r3,0(r18)
//NTP Key ID Encode  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer)           = ntp_data->key_id;
 4001710:	29800d17 	ldw	r6,52(r5)
 4001714:	99800015 	stw	r6,0(r19)
//NTP Message Digest Encode  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer)         = ntp_data->msg_digest1;
 4001718:	28c00e17 	ldw	r3,56(r5)
 400171c:	a0c00015 	stw	r3,0(r20)
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer)         = ntp_data->msg_digest2;
 4001720:	29800f17 	ldw	r6,60(r5)
 4001724:	a9800015 	stw	r6,0(r21)
 *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer)         = ntp_data->msg_digest3;
 4001728:	28c01017 	ldw	r3,64(r5)
 400172c:	b0c00015 	stw	r3,0(r22)
 *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer)         = ntp_data->msg_digest4;
 4001730:	29801117 	ldw	r6,68(r5)
 4001734:	b9800015 	stw	r6,0(r23)
 * byte order to network byte order.
 */

static int convert_ntp_data_to_net(alt_u8 * ntp_buffer)
{
 *NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer) = 
 4001738:	20c00017 	ldw	r3,0(r4)
 400173c:	19ca703a 	and	r5,r3,r7
 4001740:	180cd23a 	srli	r6,r3,8
 4001744:	1810963a 	slli	r8,r3,24
 4001748:	280a923a 	slli	r5,r5,8
 400174c:	1806d63a 	srli	r3,r3,24
 4001750:	31cc703a 	and	r6,r6,r7
 4001754:	2a0ab03a 	or	r5,r5,r8
 4001758:	1986b03a 	or	r3,r3,r6
 400175c:	1946b03a 	or	r3,r3,r5
 4001760:	20c00015 	stw	r3,0(r4)
  htonl(*NTP_DATA_GRAM_CONTROL_HEADER(ntp_buffer));
  
 *NTP_DATA_GRAM_ROOT_DISP(ntp_buffer) = 
 4001764:	49000017 	ldw	r4,0(r9)
 4001768:	21c6703a 	and	r3,r4,r7
 400176c:	200ad23a 	srli	r5,r4,8
 4001770:	200c963a 	slli	r6,r4,24
 4001774:	1806923a 	slli	r3,r3,8
 4001778:	2008d63a 	srli	r4,r4,24
 400177c:	29ca703a 	and	r5,r5,r7
 4001780:	1986b03a 	or	r3,r3,r6
 4001784:	2148b03a 	or	r4,r4,r5
 4001788:	20c8b03a 	or	r4,r4,r3
 400178c:	49000015 	stw	r4,0(r9)
  htonl(*NTP_DATA_GRAM_ROOT_DISP(ntp_buffer));
  
 *NTP_DATA_GRAM_REF_ID(ntp_buffer) = 
 4001790:	50c00017 	ldw	r3,0(r10)
 4001794:	19c8703a 	and	r4,r3,r7
 4001798:	180ad23a 	srli	r5,r3,8
 400179c:	180c963a 	slli	r6,r3,24
 40017a0:	2008923a 	slli	r4,r4,8
 40017a4:	1806d63a 	srli	r3,r3,24
 40017a8:	29ca703a 	and	r5,r5,r7
 40017ac:	2188b03a 	or	r4,r4,r6
 40017b0:	1946b03a 	or	r3,r3,r5
 40017b4:	1906b03a 	or	r3,r3,r4
 40017b8:	50c00015 	stw	r3,0(r10)
  htonl(*NTP_DATA_GRAM_REF_ID(ntp_buffer));
  
 *NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer) = 
 40017bc:	59000017 	ldw	r4,0(r11)
 40017c0:	21c6703a 	and	r3,r4,r7
 40017c4:	200ad23a 	srli	r5,r4,8
 40017c8:	200c963a 	slli	r6,r4,24
 40017cc:	1806923a 	slli	r3,r3,8
 40017d0:	2008d63a 	srli	r4,r4,24
 40017d4:	29ca703a 	and	r5,r5,r7
 40017d8:	1986b03a 	or	r3,r3,r6
 40017dc:	2148b03a 	or	r4,r4,r5
 40017e0:	20c8b03a 	or	r4,r4,r3
 40017e4:	59000015 	stw	r4,0(r11)
  htonl(*NTP_DATA_GRAM_REF_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer) = 
 40017e8:	60c00017 	ldw	r3,0(r12)
 40017ec:	19c8703a 	and	r4,r3,r7
 40017f0:	180ad23a 	srli	r5,r3,8
 40017f4:	180c963a 	slli	r6,r3,24
 40017f8:	2008923a 	slli	r4,r4,8
 40017fc:	1806d63a 	srli	r3,r3,24
 4001800:	29ca703a 	and	r5,r5,r7
 4001804:	2188b03a 	or	r4,r4,r6
 4001808:	1946b03a 	or	r3,r3,r5
 400180c:	1906b03a 	or	r3,r3,r4
 4001810:	60c00015 	stw	r3,0(r12)
  htonl(*NTP_DATA_GRAM_REF_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer) = 
 4001814:	69000017 	ldw	r4,0(r13)
 4001818:	21c6703a 	and	r3,r4,r7
 400181c:	200ad23a 	srli	r5,r4,8
 4001820:	200c963a 	slli	r6,r4,24
 4001824:	1806923a 	slli	r3,r3,8
 4001828:	2008d63a 	srli	r4,r4,24
 400182c:	29ca703a 	and	r5,r5,r7
 4001830:	1986b03a 	or	r3,r3,r6
 4001834:	2148b03a 	or	r4,r4,r5
 4001838:	20c8b03a 	or	r4,r4,r3
 400183c:	69000015 	stw	r4,0(r13)
  htonl(*NTP_DATA_GRAM_ORIG_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer) = 
 4001840:	70c00017 	ldw	r3,0(r14)
 4001844:	19c8703a 	and	r4,r3,r7
 4001848:	180ad23a 	srli	r5,r3,8
 400184c:	180c963a 	slli	r6,r3,24
 4001850:	2008923a 	slli	r4,r4,8
 4001854:	1806d63a 	srli	r3,r3,24
 4001858:	29ca703a 	and	r5,r5,r7
 400185c:	2188b03a 	or	r4,r4,r6
 4001860:	1946b03a 	or	r3,r3,r5
 4001864:	1906b03a 	or	r3,r3,r4
 4001868:	70c00015 	stw	r3,0(r14)
  htonl(*NTP_DATA_GRAM_ORIG_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer) = 
 400186c:	79000017 	ldw	r4,0(r15)
 4001870:	21c6703a 	and	r3,r4,r7
 4001874:	200ad23a 	srli	r5,r4,8
 4001878:	200c963a 	slli	r6,r4,24
 400187c:	1806923a 	slli	r3,r3,8
 4001880:	2008d63a 	srli	r4,r4,24
 4001884:	29ca703a 	and	r5,r5,r7
 4001888:	1986b03a 	or	r3,r3,r6
 400188c:	2148b03a 	or	r4,r4,r5
 4001890:	20c8b03a 	or	r4,r4,r3
 4001894:	79000015 	stw	r4,0(r15)
  htonl(*NTP_DATA_GRAM_RECV_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer) = 
 4001898:	80c00017 	ldw	r3,0(r16)
 400189c:	19c8703a 	and	r4,r3,r7
 40018a0:	180ad23a 	srli	r5,r3,8
 40018a4:	180c963a 	slli	r6,r3,24
 40018a8:	2008923a 	slli	r4,r4,8
 40018ac:	1806d63a 	srli	r3,r3,24
 40018b0:	29ca703a 	and	r5,r5,r7
 40018b4:	2188b03a 	or	r4,r4,r6
 40018b8:	1946b03a 	or	r3,r3,r5
 40018bc:	1906b03a 	or	r3,r3,r4
 40018c0:	80c00015 	stw	r3,0(r16)
  htonl(*NTP_DATA_GRAM_RECV_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer) = 
 40018c4:	89000017 	ldw	r4,0(r17)
 40018c8:	21c6703a 	and	r3,r4,r7
 40018cc:	200ad23a 	srli	r5,r4,8
 40018d0:	200c963a 	slli	r6,r4,24
 40018d4:	1806923a 	slli	r3,r3,8
 40018d8:	2008d63a 	srli	r4,r4,24
 40018dc:	29ca703a 	and	r5,r5,r7
 40018e0:	1986b03a 	or	r3,r3,r6
 40018e4:	2148b03a 	or	r4,r4,r5
 40018e8:	20c8b03a 	or	r4,r4,r3
 40018ec:	89000015 	stw	r4,0(r17)
  htonl(*NTP_DATA_GRAM_TRANS_TSTMP_INT(ntp_buffer));
  
 *NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer) = 
 40018f0:	90c00017 	ldw	r3,0(r18)
 40018f4:	19c8703a 	and	r4,r3,r7
 40018f8:	180ad23a 	srli	r5,r3,8
 40018fc:	180c963a 	slli	r6,r3,24
 4001900:	2008923a 	slli	r4,r4,8
 4001904:	1806d63a 	srli	r3,r3,24
 4001908:	29ca703a 	and	r5,r5,r7
 400190c:	2188b03a 	or	r4,r4,r6
 4001910:	1946b03a 	or	r3,r3,r5
 4001914:	1906b03a 	or	r3,r3,r4
 4001918:	90c00015 	stw	r3,0(r18)
  htonl(*NTP_DATA_GRAM_TRANS_TSTMP_FRAC(ntp_buffer));
  
 *NTP_DATA_GRAM_KEY_ID(ntp_buffer) = 
 400191c:	99000017 	ldw	r4,0(r19)
 4001920:	21c6703a 	and	r3,r4,r7
 4001924:	200ad23a 	srli	r5,r4,8
 4001928:	200c963a 	slli	r6,r4,24
 400192c:	1806923a 	slli	r3,r3,8
 4001930:	2008d63a 	srli	r4,r4,24
 4001934:	29ca703a 	and	r5,r5,r7
 4001938:	1986b03a 	or	r3,r3,r6
 400193c:	2148b03a 	or	r4,r4,r5
 4001940:	20c8b03a 	or	r4,r4,r3
 4001944:	99000015 	stw	r4,0(r19)
  htonl(*NTP_DATA_GRAM_KEY_ID(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG1(ntp_buffer) = 
 4001948:	a0c00017 	ldw	r3,0(r20)
 400194c:	19c8703a 	and	r4,r3,r7
 4001950:	180ad23a 	srli	r5,r3,8
 4001954:	180c963a 	slli	r6,r3,24
 4001958:	2008923a 	slli	r4,r4,8
 400195c:	1806d63a 	srli	r3,r3,24
 4001960:	29ca703a 	and	r5,r5,r7
 4001964:	2188b03a 	or	r4,r4,r6
 4001968:	1946b03a 	or	r3,r3,r5
 400196c:	1906b03a 	or	r3,r3,r4
 4001970:	a0c00015 	stw	r3,0(r20)
  htonl(*NTP_DATA_GRAM_MSG_DIG1(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG2(ntp_buffer) = 
 4001974:	a9000017 	ldw	r4,0(r21)
 4001978:	21c6703a 	and	r3,r4,r7
 400197c:	200ad23a 	srli	r5,r4,8
 4001980:	200c963a 	slli	r6,r4,24
 4001984:	1806923a 	slli	r3,r3,8
 4001988:	2008d63a 	srli	r4,r4,24
 400198c:	29ca703a 	and	r5,r5,r7
 4001990:	1986b03a 	or	r3,r3,r6
 4001994:	2148b03a 	or	r4,r4,r5
 4001998:	20c8b03a 	or	r4,r4,r3
 400199c:	a9000015 	stw	r4,0(r21)
  htonl(*NTP_DATA_GRAM_MSG_DIG2(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG3(ntp_buffer) = 
 40019a0:	b0c00017 	ldw	r3,0(r22)
 40019a4:	19c8703a 	and	r4,r3,r7
 40019a8:	180ad23a 	srli	r5,r3,8
 40019ac:	180c963a 	slli	r6,r3,24
 40019b0:	2008923a 	slli	r4,r4,8
 40019b4:	1806d63a 	srli	r3,r3,24
 40019b8:	29ca703a 	and	r5,r5,r7
 40019bc:	2188b03a 	or	r4,r4,r6
 40019c0:	1946b03a 	or	r3,r3,r5
 40019c4:	1906b03a 	or	r3,r3,r4
 40019c8:	b0c00015 	stw	r3,0(r22)
  htonl(*NTP_DATA_GRAM_MSG_DIG3(ntp_buffer));
  
 *NTP_DATA_GRAM_MSG_DIG4(ntp_buffer) = 
 40019cc:	b9000017 	ldw	r4,0(r23)
 40019d0:	21c6703a 	and	r3,r4,r7
 40019d4:	200ad23a 	srli	r5,r4,8
 40019d8:	200c963a 	slli	r6,r4,24
 40019dc:	1806923a 	slli	r3,r3,8
 40019e0:	2008d63a 	srli	r4,r4,24
 40019e4:	29ca703a 	and	r5,r5,r7
 40019e8:	1986b03a 	or	r3,r3,r6
 40019ec:	2148b03a 	or	r4,r4,r5
 40019f0:	20c8b03a 	or	r4,r4,r3
 40019f4:	b9000015 	stw	r4,0(r23)
 
//Convert the NTP host data to network byte order 
 convert_ntp_data_to_net(ntp_buffer);
 
 return 0;
}
 40019f8:	ddc00717 	ldw	r23,28(sp)
 40019fc:	dd800617 	ldw	r22,24(sp)
 4001a00:	dd400517 	ldw	r21,20(sp)
 4001a04:	dd000417 	ldw	r20,16(sp)
 4001a08:	dcc00317 	ldw	r19,12(sp)
 4001a0c:	dc800217 	ldw	r18,8(sp)
 4001a10:	dc400117 	ldw	r17,4(sp)
 4001a14:	dc000017 	ldw	r16,0(sp)
 4001a18:	dec00804 	addi	sp,sp,32
 4001a1c:	f800283a 	ret

04001a20 <init_ntp_data_gram>:
 * The purpose of this function is to initialize a area of memory big enough to
 * hold a NTP data packet and clear the contents.  Care has to be taken when 
 * calling this function as malloc is not tread safe.
 */
alt_u8* init_ntp_data_gram(void)
{
 4001a20:	defffe04 	addi	sp,sp,-8
  alt_u8 *ntp_buffer;

  ntp_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4001a24:	01000c04 	movi	r4,48
 * The purpose of this function is to initialize a area of memory big enough to
 * hold a NTP data packet and clear the contents.  Care has to be taken when 
 * calling this function as malloc is not tread safe.
 */
alt_u8* init_ntp_data_gram(void)
{
 4001a28:	dc000015 	stw	r16,0(sp)
 4001a2c:	dfc00115 	stw	ra,4(sp)
  alt_u8 *ntp_buffer;

  ntp_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);
 4001a30:	4001f4c0 	call	4001f4c <malloc>
 4001a34:	1021883a 	mov	r16,r2

  
  if(ntp_buffer == NULL)
 4001a38:	10000926 	beq	r2,zero,4001a60 <init_ntp_data_gram+0x40>
//    fprintf(lcdDevice, "Memory allocation for NTP buffer failed.\n");
    exit(0);
  }
  else
  {
    memset(ntp_buffer, 0x0, NTP_BUFFER_SIZE);
 4001a3c:	1009883a 	mov	r4,r2
 4001a40:	000b883a 	mov	r5,zero
 4001a44:	01800c04 	movi	r6,48
 4001a48:	40026a00 	call	40026a0 <memset>
  }
 return ntp_buffer;
}
 4001a4c:	8005883a 	mov	r2,r16
 4001a50:	dfc00117 	ldw	ra,4(sp)
 4001a54:	dc000017 	ldw	r16,0(sp)
 4001a58:	dec00204 	addi	sp,sp,8
 4001a5c:	f800283a 	ret
  ntp_buffer = (alt_u8 *)malloc(NTP_BUFFER_SIZE);

  
  if(ntp_buffer == NULL)
  {
    printf("Fatal Error: Program Terminating.  See STDERR\n");
 4001a60:	010100f4 	movhi	r4,1027
 4001a64:	2107f404 	addi	r4,r4,8144
 4001a68:	4002fec0 	call	4002fec <puts>
//    fprintf(lcdDevice, "Memory allocation for NTP buffer failed.\n");
    exit(0);
 4001a6c:	0009883a 	mov	r4,zero
 4001a70:	4001d8c0 	call	4001d8c <exit>

04001a74 <lcddisplaytime_task>:
  struct tm *pt_time_struct = &time_struct;
  alt_u8 char_array1[32];
  alt_u8 char_array2[32];
  INT8U  ucos_retcode = OS_NO_ERR;

  OSSemPend(lcd_sem, 0, &ucos_retcode);
 4001a74:	d127e817 	ldw	r4,-24672(gp)
/*
 * This task is called once a second to update the LCD display with the 
 * current system time.  
 */
void lcddisplaytime_task(void *pdata)
{
 4001a78:	deffe504 	addi	sp,sp,-108
  struct tm *pt_time_struct = &time_struct;
  alt_u8 char_array1[32];
  alt_u8 char_array2[32];
  INT8U  ucos_retcode = OS_NO_ERR;

  OSSemPend(lcd_sem, 0, &ucos_retcode);
 4001a7c:	000b883a 	mov	r5,zero
 4001a80:	d80d883a 	mov	r6,sp
/*
 * This task is called once a second to update the LCD display with the 
 * current system time.  
 */
void lcddisplaytime_task(void *pdata)
{
 4001a84:	dd001915 	stw	r20,100(sp)
 4001a88:	dcc01815 	stw	r19,96(sp)
 4001a8c:	dc801715 	stw	r18,92(sp)
 4001a90:	dc001515 	stw	r16,84(sp)
 4001a94:	dfc01a15 	stw	ra,104(sp)
 4001a98:	dc401615 	stw	r17,88(sp)
  struct timeval time = {0, 0};
 4001a9c:	d8000315 	stw	zero,12(sp)
 4001aa0:	d8000415 	stw	zero,16(sp)
  struct timezone zone = {0, 0};
 4001aa4:	d8000115 	stw	zero,4(sp)
 4001aa8:	d8000215 	stw	zero,8(sp)
  struct tm time_struct;
  struct tm *pt_time_struct = &time_struct;
  alt_u8 char_array1[32];
  alt_u8 char_array2[32];
  INT8U  ucos_retcode = OS_NO_ERR;
 4001aac:	d8000005 	stb	zero,0(sp)
 4001ab0:	dcc00304 	addi	r19,sp,12

  OSSemPend(lcd_sem, 0, &ucos_retcode);
 4001ab4:	4011ba40 	call	4011ba4 <OSSemPend>
 4001ab8:	dd000104 	addi	r20,sp,4
 4001abc:	dc800d04 	addi	r18,sp,52
 4001ac0:	dc000504 	addi	r16,sp,20
 4001ac4:	00001f06 	br	4001b44 <lcddisplaytime_task+0xd0>
    if(gettimeofday(&time, &zone) < 0)
    {
      printf("Error get the time of day %s\n", strerror(errno));
      exit(0);
    }
    OSSchedUnlock();
 4001ac8:	400f6f80 	call	400f6f8 <OSSchedUnlock>
  
    pt_time_struct = gmtime(&time.tv_sec);
 4001acc:	9809883a 	mov	r4,r19
 4001ad0:	4001f000 	call	4001f00 <gmtime>

    strftime(char_array1, 32, "%a %b %d,%Y", pt_time_struct);
 4001ad4:	100f883a 	mov	r7,r2
 4001ad8:	018100f4 	movhi	r6,1027
 4001adc:	31880804 	addi	r6,r6,8224
 4001ae0:	9009883a 	mov	r4,r18
 4001ae4:	01400804 	movi	r5,32
      printf("Error get the time of day %s\n", strerror(errno));
      exit(0);
    }
    OSSchedUnlock();
  
    pt_time_struct = gmtime(&time.tv_sec);
 4001ae8:	1023883a 	mov	r17,r2

    strftime(char_array1, 32, "%a %b %d,%Y", pt_time_struct);
 4001aec:	40038700 	call	4003870 <strftime>
    printf("DATE: %s\n", char_array1);
 4001af0:	900b883a 	mov	r5,r18
 4001af4:	010100f4 	movhi	r4,1027
 4001af8:	21080b04 	addi	r4,r4,8236
 4001afc:	4002ed40 	call	4002ed4 <printf>
    
    strftime(char_array2, 32, "%I:%M:%S %p GMT", pt_time_struct);
 4001b00:	880f883a 	mov	r7,r17
 4001b04:	018100f4 	movhi	r6,1027
 4001b08:	31880e04 	addi	r6,r6,8248
 4001b0c:	8009883a 	mov	r4,r16
 4001b10:	01400804 	movi	r5,32
 4001b14:	40038700 	call	4003870 <strftime>
    printf("TIME: %s\n", char_array2);
 4001b18:	800b883a 	mov	r5,r16
 4001b1c:	010100f4 	movhi	r4,1027
 4001b20:	21081204 	addi	r4,r4,8264
 4001b24:	4002ed40 	call	4002ed4 <printf>

    OSSemPost(lcd_sem);
 4001b28:	d127e817 	ldw	r4,-24672(gp)
 4001b2c:	4011e780 	call	4011e78 <OSSemPost>

    OSTimeDlyHMSM(0,0,10,0);
 4001b30:	000b883a 	mov	r5,zero
 4001b34:	0009883a 	mov	r4,zero
 4001b38:	01800284 	movi	r6,10
 4001b3c:	000f883a 	mov	r7,zero
 4001b40:	40130740 	call	4013074 <OSTimeDlyHMSM>
  OSSemPend(lcd_sem, 0, &ucos_retcode);
    
  while(1)
  {

    OSSchedLock();
 4001b44:	400f6b00 	call	400f6b0 <OSSchedLock>
    if(gettimeofday(&time, &zone) < 0)
 4001b48:	9809883a 	mov	r4,r19
 4001b4c:	a00b883a 	mov	r5,r20
 4001b50:	400df180 	call	400df18 <gettimeofday>
 4001b54:	103fdc0e 	bge	r2,zero,4001ac8 <lcddisplaytime_task+0x54>
    {
      printf("Error get the time of day %s\n", strerror(errno));
 4001b58:	4001d7c0 	call	4001d7c <__errno>
 4001b5c:	11000017 	ldw	r4,0(r2)
 4001b60:	40030700 	call	4003070 <strerror>
 4001b64:	100b883a 	mov	r5,r2
 4001b68:	010100f4 	movhi	r4,1027
 4001b6c:	21080004 	addi	r4,r4,8192
 4001b70:	4002ed40 	call	4002ed4 <printf>
      exit(0);
 4001b74:	0009883a 	mov	r4,zero
 4001b78:	4001d8c0 	call	4001d8c <exit>

04001b7c <setclock>:

/*
 * This function sets the system clock time.  
 */
int setclock(alt_u32 seconds)
{
 4001b7c:	defffa04 	addi	sp,sp,-24
 4001b80:	dc400415 	stw	r17,16(sp)
   * NTP Time is seconds since 1900 
   * Convert to Unix time which is seconds since 1970
   */
  seconds -= NTP_TO_UNIX_TIME;
  
  time.tv_sec = seconds;
 4001b84:	009f15b4 	movhi	r2,31830
 4001b88:	10a06004 	addi	r2,r2,-32384

  printf("Setting System Clock time to: %s\n",ctime(&time.tv_sec));
 4001b8c:	dc400204 	addi	r17,sp,8
   * NTP Time is seconds since 1900 
   * Convert to Unix time which is seconds since 1970
   */
  seconds -= NTP_TO_UNIX_TIME;
  
  time.tv_sec = seconds;
 4001b90:	2087883a 	add	r3,r4,r2

  printf("Setting System Clock time to: %s\n",ctime(&time.tv_sec));
 4001b94:	8809883a 	mov	r4,r17

/*
 * This function sets the system clock time.  
 */
int setclock(alt_u32 seconds)
{
 4001b98:	dfc00515 	stw	ra,20(sp)
   * NTP Time is seconds since 1900 
   * Convert to Unix time which is seconds since 1970
   */
  seconds -= NTP_TO_UNIX_TIME;
  
  time.tv_sec = seconds;
 4001b9c:	d8c00215 	stw	r3,8(sp)
/*
 * This function sets the system clock time.  
 */
int setclock(alt_u32 seconds)
{
  struct timeval time = {0, 0};
 4001ba0:	d8000315 	stw	zero,12(sp)
  struct timezone zone = {0, 0};
 4001ba4:	d8000015 	stw	zero,0(sp)
 4001ba8:	d8000115 	stw	zero,4(sp)
   */
  seconds -= NTP_TO_UNIX_TIME;
  
  time.tv_sec = seconds;

  printf("Setting System Clock time to: %s\n",ctime(&time.tv_sec));
 4001bac:	4001d600 	call	4001d60 <ctime>
 4001bb0:	100b883a 	mov	r5,r2
 4001bb4:	010100f4 	movhi	r4,1027
 4001bb8:	21081504 	addi	r4,r4,8276
 4001bbc:	4002ed40 	call	4002ed4 <printf>
  //settimeofday() can not be called at the same time as gettimeofday()
  OSSchedLock();  
 4001bc0:	400f6b00 	call	400f6b0 <OSSchedLock>
  //settimeofday(&time, &zone);
  if(settimeofday(&time, &zone) < 0)
 4001bc4:	8809883a 	mov	r4,r17
 4001bc8:	d80b883a 	mov	r5,sp
 4001bcc:	400e4280 	call	400e428 <settimeofday>
 4001bd0:	10000616 	blt	r2,zero,4001bec <setclock+0x70>
  {
    printf("Error set the time of day %s\n", strerror(errno));
    exit(0);
  }
  OSSchedUnlock();
 4001bd4:	400f6f80 	call	400f6f8 <OSSchedUnlock>

  return 0;
}
 4001bd8:	0005883a 	mov	r2,zero
 4001bdc:	dfc00517 	ldw	ra,20(sp)
 4001be0:	dc400417 	ldw	r17,16(sp)
 4001be4:	dec00604 	addi	sp,sp,24
 4001be8:	f800283a 	ret
  //settimeofday() can not be called at the same time as gettimeofday()
  OSSchedLock();  
  //settimeofday(&time, &zone);
  if(settimeofday(&time, &zone) < 0)
  {
    printf("Error set the time of day %s\n", strerror(errno));
 4001bec:	4001d7c0 	call	4001d7c <__errno>
 4001bf0:	11000017 	ldw	r4,0(r2)
 4001bf4:	40030700 	call	4003070 <strerror>
 4001bf8:	100b883a 	mov	r5,r2
 4001bfc:	010100f4 	movhi	r4,1027
 4001c00:	21081e04 	addi	r4,r4,8312
 4001c04:	4002ed40 	call	4002ed4 <printf>
    exit(0);
 4001c08:	0009883a 	mov	r4,zero
 4001c0c:	4001d8c0 	call	4001d8c <exit>

04001c10 <SOFT_PHY_link_status_read>:

	/* If duplex == Full */
	// link_status |= 0x1;

	return link_status;
}
 4001c10:	00800204 	movi	r2,8
 4001c14:	f800283a 	ret

04001c18 <setup_phy>:

void setup_phy(void)
{
 4001c18:	deffce04 	addi	sp,sp,-200
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
 4001c1c:	00804034 	movhi	r2,256
 4001c20:	10840004 	addi	r2,r2,4096
 4001c24:	00c10004 	movi	r3,1024
 4001c28:	d8800815 	stw	r2,32(sp)
 4001c2c:	d8c0090d 	sth	r3,36(sp)
 4001c30:	00820004 	movi	r2,2048
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
 4001c34:	00c100f4 	movhi	r3,1027
 4001c38:	18c82604 	addi	r3,r3,8344
	alt_tse_system_desc_mem sys_mem = {TSE_SYSTEM_NO_DESC_MEM()};
	alt_tse_system_shared_fifo sys_sfifo = {TSE_SYSTEM_NO_SHARED_FIFO()};
	alt_tse_system_phy sys_phy = {TSE_SYSTEM_PHY(1, NULL)};//no mdio

	alt_tse_system_add_sys(&sys_mac, &sys_sgdma, &sys_mem, &sys_sfifo, &sys_phy);
 4001c3c:	d9c00d04 	addi	r7,sp,52

	return link_status;
}

void setup_phy(void)
{
 4001c40:	dd003015 	stw	r20,192(sp)
 4001c44:	dcc02f15 	stw	r19,188(sp)
 4001c48:	dc802e15 	stw	r18,184(sp)
 4001c4c:	dc002d15 	stw	r16,180(sp)
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
 4001c50:	05000044 	movi	r20,1
	return link_status;
}

void setup_phy(void)
{
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
 4001c54:	04000044 	movi	r16,1
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
	alt_tse_system_desc_mem sys_mem = {TSE_SYSTEM_NO_DESC_MEM()};
	alt_tse_system_shared_fifo sys_sfifo = {TSE_SYSTEM_NO_SHARED_FIFO()};
	alt_tse_system_phy sys_phy = {TSE_SYSTEM_PHY(1, NULL)};//no mdio
 4001c58:	04c00044 	movi	r19,1

	alt_tse_system_add_sys(&sys_mac, &sys_sgdma, &sys_mem, &sys_sfifo, &sys_phy);
 4001c5c:	d9000804 	addi	r4,sp,32
 4001c60:	d9400504 	addi	r5,sp,20
 4001c64:	d9800104 	addi	r6,sp,4
			0, /* Location of Speed Status (ignored) */
			0, /* Location of Duplex Status (ignored) */
			0, /* Location of Link Status (ignored) */
			0, /* No function pointer */
			&SOFT_PHY_link_status_read /* Function pointer to read from PHY specific status register */
	};
 4001c68:	dc801404 	addi	r18,sp,80
	return link_status;
}

void setup_phy(void)
{
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
 4001c6c:	d880098d 	sth	r2,38(sp)
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
 4001c70:	d8c00515 	stw	r3,20(sp)
 4001c74:	008100f4 	movhi	r2,1027
 4001c78:	10882a04 	addi	r2,r2,8360
	alt_tse_system_desc_mem sys_mem = {TSE_SYSTEM_NO_DESC_MEM()};
	alt_tse_system_shared_fifo sys_sfifo = {TSE_SYSTEM_NO_SHARED_FIFO()};
	alt_tse_system_phy sys_phy = {TSE_SYSTEM_PHY(1, NULL)};//no mdio

	alt_tse_system_add_sys(&sys_mac, &sys_sgdma, &sys_mem, &sys_sfifo, &sys_phy);
 4001c7c:	d8c00304 	addi	r3,sp,12

	return link_status;
}

void setup_phy(void)
{
 4001c80:	dfc03115 	stw	ra,196(sp)
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
	alt_tse_system_desc_mem sys_mem = {TSE_SYSTEM_NO_DESC_MEM()};
	alt_tse_system_shared_fifo sys_sfifo = {TSE_SYSTEM_NO_SHARED_FIFO()};
	alt_tse_system_phy sys_phy = {TSE_SYSTEM_PHY(1, NULL)};//no mdio

	alt_tse_system_add_sys(&sys_mac, &sys_sgdma, &sys_mem, &sys_sfifo, &sys_phy);
 4001c84:	d8c00015 	stw	r3,0(sp)
}

void setup_phy(void)
{
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
 4001c88:	d8800615 	stw	r2,24(sp)
	return link_status;
}

void setup_phy(void)
{
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
 4001c8c:	d8000a05 	stb	zero,40(sp)
 4001c90:	dc000a45 	stb	r16,41(sp)
 4001c94:	d8000a85 	stb	zero,42(sp)
 4001c98:	d8000ac5 	stb	zero,43(sp)
 4001c9c:	dc000b05 	stb	r16,44(sp)
 4001ca0:	d8000b45 	stb	zero,45(sp)
 4001ca4:	dc000b85 	stb	r16,46(sp)
 4001ca8:	d8000bc5 	stb	zero,47(sp)
 4001cac:	d8000c05 	stb	zero,48(sp)
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
 4001cb0:	dd00070d 	sth	r20,28(sp)
	alt_tse_system_desc_mem sys_mem = {TSE_SYSTEM_NO_DESC_MEM()};
 4001cb4:	d8000105 	stb	zero,4(sp)
 4001cb8:	d8000215 	stw	zero,8(sp)
	alt_tse_system_shared_fifo sys_sfifo = {TSE_SYSTEM_NO_SHARED_FIFO()};
 4001cbc:	d8000d05 	stb	zero,52(sp)
 4001cc0:	d8000e15 	stw	zero,56(sp)
 4001cc4:	d8000f15 	stw	zero,60(sp)
 4001cc8:	d8001015 	stw	zero,64(sp)
 4001ccc:	d8001115 	stw	zero,68(sp)
 4001cd0:	d8001215 	stw	zero,72(sp)
 4001cd4:	d8001315 	stw	zero,76(sp)
	alt_tse_system_phy sys_phy = {TSE_SYSTEM_PHY(1, NULL)};//no mdio
 4001cd8:	dcc00315 	stw	r19,12(sp)
 4001cdc:	d8000415 	stw	zero,16(sp)

	alt_tse_system_add_sys(&sys_mac, &sys_sgdma, &sys_mem, &sys_sfifo, &sys_phy);
 4001ce0:	40160f80 	call	40160f8 <alt_tse_system_add_sys>
			0, /* Location of Speed Status (ignored) */
			0, /* Location of Duplex Status (ignored) */
			0, /* Location of Link Status (ignored) */
			0, /* No function pointer */
			&SOFT_PHY_link_status_read /* Function pointer to read from PHY specific status register */
	};
 4001ce4:	9009883a 	mov	r4,r18
 4001ce8:	000b883a 	mov	r5,zero
 4001cec:	01801904 	movi	r6,100
 4001cf0:	40026a00 	call	40026a0 <memset>
 4001cf4:	00c100f4 	movhi	r3,1027
 4001cf8:	18c82e04 	addi	r3,r3,8376
 4001cfc:	1a000203 	ldbu	r8,8(r3)
 4001d00:	18800017 	ldw	r2,0(r3)
 4001d04:	19c00117 	ldw	r7,4(r3)
 4001d08:	d9001644 	addi	r4,sp,89
 4001d0c:	000b883a 	mov	r5,zero
 4001d10:	018011c4 	movi	r6,71
 4001d14:	d9c01515 	stw	r7,84(sp)
 4001d18:	da001605 	stb	r8,88(sp)
 4001d1c:	d8801415 	stw	r2,80(sp)
 4001d20:	40026a00 	call	40026a0 <memset>
 4001d24:	00810034 	movhi	r2,1024
 4001d28:	10870404 	addi	r2,r2,7184

	alt_tse_phy_add_profile(&SOFT_PHY);
 4001d2c:	9009883a 	mov	r4,r18
			0, /* Location of Speed Status (ignored) */
			0, /* Location of Duplex Status (ignored) */
			0, /* Location of Link Status (ignored) */
			0, /* No function pointer */
			&SOFT_PHY_link_status_read /* Function pointer to read from PHY specific status register */
	};
 4001d30:	dcc02815 	stw	r19,160(sp)
 4001d34:	dd002905 	stb	r20,164(sp)
 4001d38:	dc002945 	stb	r16,165(sp)
 4001d3c:	d8802c15 	stw	r2,176(sp)

	alt_tse_phy_add_profile(&SOFT_PHY);
 4001d40:	401643c0 	call	401643c <alt_tse_phy_add_profile>
}
 4001d44:	dfc03117 	ldw	ra,196(sp)
 4001d48:	dd003017 	ldw	r20,192(sp)
 4001d4c:	dcc02f17 	ldw	r19,188(sp)
 4001d50:	dc802e17 	ldw	r18,184(sp)
 4001d54:	dc002d17 	ldw	r16,180(sp)
 4001d58:	dec03204 	addi	sp,sp,200
 4001d5c:	f800283a 	ret

04001d60 <ctime>:
 4001d60:	deffff04 	addi	sp,sp,-4
 4001d64:	dfc00015 	stw	ra,0(sp)
 4001d68:	4001f1c0 	call	4001f1c <localtime>
 4001d6c:	1009883a 	mov	r4,r2
 4001d70:	dfc00017 	ldw	ra,0(sp)
 4001d74:	dec00104 	addi	sp,sp,4
 4001d78:	40069e01 	jmpi	40069e0 <asctime>

04001d7c <__errno>:
 4001d7c:	00c10134 	movhi	r3,1028
 4001d80:	18e0f704 	addi	r3,r3,-31780
 4001d84:	18800017 	ldw	r2,0(r3)
 4001d88:	f800283a 	ret

04001d8c <exit>:
 4001d8c:	defffe04 	addi	sp,sp,-8
 4001d90:	000b883a 	mov	r5,zero
 4001d94:	dc000015 	stw	r16,0(sp)
 4001d98:	dfc00115 	stw	ra,4(sp)
 4001d9c:	2021883a 	mov	r16,r4
 4001da0:	40068180 	call	4006818 <__call_exitprocs>
 4001da4:	00810134 	movhi	r2,1028
 4001da8:	10a0f804 	addi	r2,r2,-31776
 4001dac:	11000017 	ldw	r4,0(r2)
 4001db0:	20800f17 	ldw	r2,60(r4)
 4001db4:	10000126 	beq	r2,zero,4001dbc <exit+0x30>
 4001db8:	103ee83a 	callr	r2
 4001dbc:	8009883a 	mov	r4,r16
 4001dc0:	400de680 	call	400de68 <_exit>

04001dc4 <fprintf>:
 4001dc4:	defffc04 	addi	sp,sp,-16
 4001dc8:	dfc00115 	stw	ra,4(sp)
 4001dcc:	d9800215 	stw	r6,8(sp)
 4001dd0:	d9c00315 	stw	r7,12(sp)
 4001dd4:	d8800204 	addi	r2,sp,8
 4001dd8:	100d883a 	mov	r6,r2
 4001ddc:	d8800015 	stw	r2,0(sp)
 4001de0:	40066b40 	call	40066b4 <__vfprintf_internal>
 4001de4:	dfc00117 	ldw	ra,4(sp)
 4001de8:	dec00404 	addi	sp,sp,16
 4001dec:	f800283a 	ret

04001df0 <_fprintf_r>:
 4001df0:	defffd04 	addi	sp,sp,-12
 4001df4:	2807883a 	mov	r3,r5
 4001df8:	dfc00115 	stw	ra,4(sp)
 4001dfc:	d9c00215 	stw	r7,8(sp)
 4001e00:	d8800204 	addi	r2,sp,8
 4001e04:	300b883a 	mov	r5,r6
 4001e08:	1809883a 	mov	r4,r3
 4001e0c:	100d883a 	mov	r6,r2
 4001e10:	d8800015 	stw	r2,0(sp)
 4001e14:	40066b40 	call	40066b4 <__vfprintf_internal>
 4001e18:	dfc00117 	ldw	ra,4(sp)
 4001e1c:	dec00304 	addi	sp,sp,12
 4001e20:	f800283a 	ret

04001e24 <_fwrite_r>:
 4001e24:	defff604 	addi	sp,sp,-40
 4001e28:	dc400615 	stw	r17,24(sp)
 4001e2c:	39a3383a 	mul	r17,r7,r6
 4001e30:	00800044 	movi	r2,1
 4001e34:	dcc00815 	stw	r19,32(sp)
 4001e38:	dc800715 	stw	r18,28(sp)
 4001e3c:	dc000515 	stw	r16,20(sp)
 4001e40:	dfc00915 	stw	ra,36(sp)
 4001e44:	3825883a 	mov	r18,r7
 4001e48:	3027883a 	mov	r19,r6
 4001e4c:	2021883a 	mov	r16,r4
 4001e50:	d9400015 	stw	r5,0(sp)
 4001e54:	d8800315 	stw	r2,12(sp)
 4001e58:	dc400115 	stw	r17,4(sp)
 4001e5c:	dc400415 	stw	r17,16(sp)
 4001e60:	dec00215 	stw	sp,8(sp)
 4001e64:	20000226 	beq	r4,zero,4001e70 <_fwrite_r+0x4c>
 4001e68:	20800e17 	ldw	r2,56(r4)
 4001e6c:	10001226 	beq	r2,zero,4001eb8 <_fwrite_r+0x94>
 4001e70:	d9400a17 	ldw	r5,40(sp)
 4001e74:	8009883a 	mov	r4,r16
 4001e78:	d9800204 	addi	r6,sp,8
 4001e7c:	4008ccc0 	call	4008ccc <__sfvwrite_r>
 4001e80:	980b883a 	mov	r5,r19
 4001e84:	10000426 	beq	r2,zero,4001e98 <_fwrite_r+0x74>
 4001e88:	d9000417 	ldw	r4,16(sp)
 4001e8c:	8909c83a 	sub	r4,r17,r4
 4001e90:	400d82c0 	call	400d82c <__udivsi3>
 4001e94:	1025883a 	mov	r18,r2
 4001e98:	9005883a 	mov	r2,r18
 4001e9c:	dfc00917 	ldw	ra,36(sp)
 4001ea0:	dcc00817 	ldw	r19,32(sp)
 4001ea4:	dc800717 	ldw	r18,28(sp)
 4001ea8:	dc400617 	ldw	r17,24(sp)
 4001eac:	dc000517 	ldw	r16,20(sp)
 4001eb0:	dec00a04 	addi	sp,sp,40
 4001eb4:	f800283a 	ret
 4001eb8:	40084e80 	call	40084e8 <__sinit>
 4001ebc:	003fec06 	br	4001e70 <_fwrite_r+0x4c>

04001ec0 <fwrite>:
 4001ec0:	00810134 	movhi	r2,1028
 4001ec4:	10a0f704 	addi	r2,r2,-31780
 4001ec8:	2017883a 	mov	r11,r4
 4001ecc:	11000017 	ldw	r4,0(r2)
 4001ed0:	defffe04 	addi	sp,sp,-8
 4001ed4:	3013883a 	mov	r9,r6
 4001ed8:	2805883a 	mov	r2,r5
 4001edc:	d9c00015 	stw	r7,0(sp)
 4001ee0:	580b883a 	mov	r5,r11
 4001ee4:	100d883a 	mov	r6,r2
 4001ee8:	480f883a 	mov	r7,r9
 4001eec:	dfc00115 	stw	ra,4(sp)
 4001ef0:	4001e240 	call	4001e24 <_fwrite_r>
 4001ef4:	dfc00117 	ldw	ra,4(sp)
 4001ef8:	dec00204 	addi	sp,sp,8
 4001efc:	f800283a 	ret

04001f00 <gmtime>:
 4001f00:	00810134 	movhi	r2,1028
 4001f04:	10a0f704 	addi	r2,r2,-31780
 4001f08:	11400017 	ldw	r5,0(r2)
 4001f0c:	29401f04 	addi	r5,r5,124
 4001f10:	4001f141 	jmpi	4001f14 <gmtime_r>

04001f14 <gmtime_r>:
 4001f14:	01800044 	movi	r6,1
 4001f18:	400296c1 	jmpi	400296c <_mktm_r>

04001f1c <localtime>:
 4001f1c:	00810134 	movhi	r2,1028
 4001f20:	10a0f704 	addi	r2,r2,-31780
 4001f24:	11400017 	ldw	r5,0(r2)
 4001f28:	29401f04 	addi	r5,r5,124
 4001f2c:	4001f301 	jmpi	4001f30 <localtime_r>

04001f30 <localtime_r>:
 4001f30:	000d883a 	mov	r6,zero
 4001f34:	400296c1 	jmpi	400296c <_mktm_r>

04001f38 <free>:
 4001f38:	00810134 	movhi	r2,1028
 4001f3c:	10a0f704 	addi	r2,r2,-31780
 4001f40:	200b883a 	mov	r5,r4
 4001f44:	11000017 	ldw	r4,0(r2)
 4001f48:	40089b81 	jmpi	40089b8 <_free_r>

04001f4c <malloc>:
 4001f4c:	00810134 	movhi	r2,1028
 4001f50:	10a0f704 	addi	r2,r2,-31780
 4001f54:	200b883a 	mov	r5,r4
 4001f58:	11000017 	ldw	r4,0(r2)
 4001f5c:	4001f601 	jmpi	4001f60 <_malloc_r>

04001f60 <_malloc_r>:
 4001f60:	defff604 	addi	sp,sp,-40
 4001f64:	28c002c4 	addi	r3,r5,11
 4001f68:	00800584 	movi	r2,22
 4001f6c:	dc800215 	stw	r18,8(sp)
 4001f70:	dfc00915 	stw	ra,36(sp)
 4001f74:	df000815 	stw	fp,32(sp)
 4001f78:	ddc00715 	stw	r23,28(sp)
 4001f7c:	dd800615 	stw	r22,24(sp)
 4001f80:	dd400515 	stw	r21,20(sp)
 4001f84:	dd000415 	stw	r20,16(sp)
 4001f88:	dcc00315 	stw	r19,12(sp)
 4001f8c:	dc400115 	stw	r17,4(sp)
 4001f90:	dc000015 	stw	r16,0(sp)
 4001f94:	2025883a 	mov	r18,r4
 4001f98:	10c01236 	bltu	r2,r3,4001fe4 <_malloc_r+0x84>
 4001f9c:	04400404 	movi	r17,16
 4001fa0:	8940142e 	bgeu	r17,r5,4001ff4 <_malloc_r+0x94>
 4001fa4:	00800304 	movi	r2,12
 4001fa8:	0007883a 	mov	r3,zero
 4001fac:	90800015 	stw	r2,0(r18)
 4001fb0:	1805883a 	mov	r2,r3
 4001fb4:	dfc00917 	ldw	ra,36(sp)
 4001fb8:	df000817 	ldw	fp,32(sp)
 4001fbc:	ddc00717 	ldw	r23,28(sp)
 4001fc0:	dd800617 	ldw	r22,24(sp)
 4001fc4:	dd400517 	ldw	r21,20(sp)
 4001fc8:	dd000417 	ldw	r20,16(sp)
 4001fcc:	dcc00317 	ldw	r19,12(sp)
 4001fd0:	dc800217 	ldw	r18,8(sp)
 4001fd4:	dc400117 	ldw	r17,4(sp)
 4001fd8:	dc000017 	ldw	r16,0(sp)
 4001fdc:	dec00a04 	addi	sp,sp,40
 4001fe0:	f800283a 	ret
 4001fe4:	00bffe04 	movi	r2,-8
 4001fe8:	18a2703a 	and	r17,r3,r2
 4001fec:	883fed16 	blt	r17,zero,4001fa4 <_malloc_r+0x44>
 4001ff0:	897fec36 	bltu	r17,r5,4001fa4 <_malloc_r+0x44>
 4001ff4:	9009883a 	mov	r4,r18
 4001ff8:	400e7b80 	call	400e7b8 <__malloc_lock>
 4001ffc:	00807dc4 	movi	r2,503
 4002000:	14402b2e 	bgeu	r2,r17,40020b0 <_malloc_r+0x150>
 4002004:	8806d27a 	srli	r3,r17,9
 4002008:	18003f1e 	bne	r3,zero,4002108 <_malloc_r+0x1a8>
 400200c:	880cd0fa 	srli	r6,r17,3
 4002010:	300490fa 	slli	r2,r6,3
 4002014:	02c100f4 	movhi	r11,1027
 4002018:	5adac304 	addi	r11,r11,27404
 400201c:	12cb883a 	add	r5,r2,r11
 4002020:	2c000317 	ldw	r16,12(r5)
 4002024:	580f883a 	mov	r7,r11
 4002028:	2c00041e 	bne	r5,r16,400203c <_malloc_r+0xdc>
 400202c:	00000a06 	br	4002058 <_malloc_r+0xf8>
 4002030:	1800860e 	bge	r3,zero,400224c <_malloc_r+0x2ec>
 4002034:	84000317 	ldw	r16,12(r16)
 4002038:	2c000726 	beq	r5,r16,4002058 <_malloc_r+0xf8>
 400203c:	80800117 	ldw	r2,4(r16)
 4002040:	00ffff04 	movi	r3,-4
 4002044:	10c8703a 	and	r4,r2,r3
 4002048:	2447c83a 	sub	r3,r4,r17
 400204c:	008003c4 	movi	r2,15
 4002050:	10fff70e 	bge	r2,r3,4002030 <_malloc_r+0xd0>
 4002054:	31bfffc4 	addi	r6,r6,-1
 4002058:	32400044 	addi	r9,r6,1
 400205c:	028100f4 	movhi	r10,1027
 4002060:	529ac504 	addi	r10,r10,27412
 4002064:	54000217 	ldw	r16,8(r10)
 4002068:	8280a026 	beq	r16,r10,40022ec <_malloc_r+0x38c>
 400206c:	80800117 	ldw	r2,4(r16)
 4002070:	00ffff04 	movi	r3,-4
 4002074:	10ca703a 	and	r5,r2,r3
 4002078:	2c4dc83a 	sub	r6,r5,r17
 400207c:	008003c4 	movi	r2,15
 4002080:	11808316 	blt	r2,r6,4002290 <_malloc_r+0x330>
 4002084:	52800315 	stw	r10,12(r10)
 4002088:	52800215 	stw	r10,8(r10)
 400208c:	30002916 	blt	r6,zero,4002134 <_malloc_r+0x1d4>
 4002090:	8147883a 	add	r3,r16,r5
 4002094:	18800117 	ldw	r2,4(r3)
 4002098:	9009883a 	mov	r4,r18
 400209c:	10800054 	ori	r2,r2,1
 40020a0:	18800115 	stw	r2,4(r3)
 40020a4:	400e7580 	call	400e758 <__malloc_unlock>
 40020a8:	80c00204 	addi	r3,r16,8
 40020ac:	003fc006 	br	4001fb0 <_malloc_r+0x50>
 40020b0:	02c100f4 	movhi	r11,1027
 40020b4:	5adac304 	addi	r11,r11,27404
 40020b8:	8ac5883a 	add	r2,r17,r11
 40020bc:	14000317 	ldw	r16,12(r2)
 40020c0:	580f883a 	mov	r7,r11
 40020c4:	8806d0fa 	srli	r3,r17,3
 40020c8:	14006c26 	beq	r2,r16,400227c <_malloc_r+0x31c>
 40020cc:	80c00117 	ldw	r3,4(r16)
 40020d0:	00bfff04 	movi	r2,-4
 40020d4:	81800317 	ldw	r6,12(r16)
 40020d8:	1886703a 	and	r3,r3,r2
 40020dc:	80c7883a 	add	r3,r16,r3
 40020e0:	18800117 	ldw	r2,4(r3)
 40020e4:	81400217 	ldw	r5,8(r16)
 40020e8:	9009883a 	mov	r4,r18
 40020ec:	10800054 	ori	r2,r2,1
 40020f0:	18800115 	stw	r2,4(r3)
 40020f4:	31400215 	stw	r5,8(r6)
 40020f8:	29800315 	stw	r6,12(r5)
 40020fc:	400e7580 	call	400e758 <__malloc_unlock>
 4002100:	80c00204 	addi	r3,r16,8
 4002104:	003faa06 	br	4001fb0 <_malloc_r+0x50>
 4002108:	00800104 	movi	r2,4
 400210c:	10c0052e 	bgeu	r2,r3,4002124 <_malloc_r+0x1c4>
 4002110:	00800504 	movi	r2,20
 4002114:	10c07836 	bltu	r2,r3,40022f8 <_malloc_r+0x398>
 4002118:	198016c4 	addi	r6,r3,91
 400211c:	300490fa 	slli	r2,r6,3
 4002120:	003fbc06 	br	4002014 <_malloc_r+0xb4>
 4002124:	8804d1ba 	srli	r2,r17,6
 4002128:	11800e04 	addi	r6,r2,56
 400212c:	300490fa 	slli	r2,r6,3
 4002130:	003fb806 	br	4002014 <_malloc_r+0xb4>
 4002134:	00807fc4 	movi	r2,511
 4002138:	1140bb36 	bltu	r2,r5,4002428 <_malloc_r+0x4c8>
 400213c:	2806d0fa 	srli	r3,r5,3
 4002140:	573ffe04 	addi	fp,r10,-8
 4002144:	00800044 	movi	r2,1
 4002148:	180890fa 	slli	r4,r3,3
 400214c:	1807d0ba 	srai	r3,r3,2
 4002150:	e1c00117 	ldw	r7,4(fp)
 4002154:	5909883a 	add	r4,r11,r4
 4002158:	21400217 	ldw	r5,8(r4)
 400215c:	10c4983a 	sll	r2,r2,r3
 4002160:	81000315 	stw	r4,12(r16)
 4002164:	81400215 	stw	r5,8(r16)
 4002168:	388eb03a 	or	r7,r7,r2
 400216c:	2c000315 	stw	r16,12(r5)
 4002170:	24000215 	stw	r16,8(r4)
 4002174:	e1c00115 	stw	r7,4(fp)
 4002178:	4807883a 	mov	r3,r9
 400217c:	4800cd16 	blt	r9,zero,40024b4 <_malloc_r+0x554>
 4002180:	1807d0ba 	srai	r3,r3,2
 4002184:	00800044 	movi	r2,1
 4002188:	10c8983a 	sll	r4,r2,r3
 400218c:	39004436 	bltu	r7,r4,40022a0 <_malloc_r+0x340>
 4002190:	21c4703a 	and	r2,r4,r7
 4002194:	10000a1e 	bne	r2,zero,40021c0 <_malloc_r+0x260>
 4002198:	2109883a 	add	r4,r4,r4
 400219c:	00bfff04 	movi	r2,-4
 40021a0:	4884703a 	and	r2,r9,r2
 40021a4:	3906703a 	and	r3,r7,r4
 40021a8:	12400104 	addi	r9,r2,4
 40021ac:	1800041e 	bne	r3,zero,40021c0 <_malloc_r+0x260>
 40021b0:	2109883a 	add	r4,r4,r4
 40021b4:	3904703a 	and	r2,r7,r4
 40021b8:	4a400104 	addi	r9,r9,4
 40021bc:	103ffc26 	beq	r2,zero,40021b0 <_malloc_r+0x250>
 40021c0:	480490fa 	slli	r2,r9,3
 40021c4:	4819883a 	mov	r12,r9
 40021c8:	023fff04 	movi	r8,-4
 40021cc:	589b883a 	add	r13,r11,r2
 40021d0:	6807883a 	mov	r3,r13
 40021d4:	014003c4 	movi	r5,15
 40021d8:	1c000317 	ldw	r16,12(r3)
 40021dc:	1c00041e 	bne	r3,r16,40021f0 <_malloc_r+0x290>
 40021e0:	0000a706 	br	4002480 <_malloc_r+0x520>
 40021e4:	3000ab0e 	bge	r6,zero,4002494 <_malloc_r+0x534>
 40021e8:	84000317 	ldw	r16,12(r16)
 40021ec:	1c00a426 	beq	r3,r16,4002480 <_malloc_r+0x520>
 40021f0:	80800117 	ldw	r2,4(r16)
 40021f4:	1204703a 	and	r2,r2,r8
 40021f8:	144dc83a 	sub	r6,r2,r17
 40021fc:	29bff90e 	bge	r5,r6,40021e4 <_malloc_r+0x284>
 4002200:	81000317 	ldw	r4,12(r16)
 4002204:	80c00217 	ldw	r3,8(r16)
 4002208:	89400054 	ori	r5,r17,1
 400220c:	8445883a 	add	r2,r16,r17
 4002210:	20c00215 	stw	r3,8(r4)
 4002214:	19000315 	stw	r4,12(r3)
 4002218:	81400115 	stw	r5,4(r16)
 400221c:	1187883a 	add	r3,r2,r6
 4002220:	31000054 	ori	r4,r6,1
 4002224:	50800315 	stw	r2,12(r10)
 4002228:	50800215 	stw	r2,8(r10)
 400222c:	19800015 	stw	r6,0(r3)
 4002230:	11000115 	stw	r4,4(r2)
 4002234:	12800215 	stw	r10,8(r2)
 4002238:	12800315 	stw	r10,12(r2)
 400223c:	9009883a 	mov	r4,r18
 4002240:	400e7580 	call	400e758 <__malloc_unlock>
 4002244:	80c00204 	addi	r3,r16,8
 4002248:	003f5906 	br	4001fb0 <_malloc_r+0x50>
 400224c:	8109883a 	add	r4,r16,r4
 4002250:	20800117 	ldw	r2,4(r4)
 4002254:	80c00217 	ldw	r3,8(r16)
 4002258:	81400317 	ldw	r5,12(r16)
 400225c:	10800054 	ori	r2,r2,1
 4002260:	20800115 	stw	r2,4(r4)
 4002264:	28c00215 	stw	r3,8(r5)
 4002268:	19400315 	stw	r5,12(r3)
 400226c:	9009883a 	mov	r4,r18
 4002270:	400e7580 	call	400e758 <__malloc_unlock>
 4002274:	80c00204 	addi	r3,r16,8
 4002278:	003f4d06 	br	4001fb0 <_malloc_r+0x50>
 400227c:	80800204 	addi	r2,r16,8
 4002280:	14000317 	ldw	r16,12(r2)
 4002284:	143f911e 	bne	r2,r16,40020cc <_malloc_r+0x16c>
 4002288:	1a400084 	addi	r9,r3,2
 400228c:	003f7306 	br	400205c <_malloc_r+0xfc>
 4002290:	88c00054 	ori	r3,r17,1
 4002294:	8445883a 	add	r2,r16,r17
 4002298:	80c00115 	stw	r3,4(r16)
 400229c:	003fdf06 	br	400221c <_malloc_r+0x2bc>
 40022a0:	e4000217 	ldw	r16,8(fp)
 40022a4:	00bfff04 	movi	r2,-4
 40022a8:	80c00117 	ldw	r3,4(r16)
 40022ac:	802d883a 	mov	r22,r16
 40022b0:	18aa703a 	and	r21,r3,r2
 40022b4:	ac401636 	bltu	r21,r17,4002310 <_malloc_r+0x3b0>
 40022b8:	ac49c83a 	sub	r4,r21,r17
 40022bc:	008003c4 	movi	r2,15
 40022c0:	1100130e 	bge	r2,r4,4002310 <_malloc_r+0x3b0>
 40022c4:	88800054 	ori	r2,r17,1
 40022c8:	8447883a 	add	r3,r16,r17
 40022cc:	80800115 	stw	r2,4(r16)
 40022d0:	20800054 	ori	r2,r4,1
 40022d4:	18800115 	stw	r2,4(r3)
 40022d8:	e0c00215 	stw	r3,8(fp)
 40022dc:	9009883a 	mov	r4,r18
 40022e0:	400e7580 	call	400e758 <__malloc_unlock>
 40022e4:	80c00204 	addi	r3,r16,8
 40022e8:	003f3106 	br	4001fb0 <_malloc_r+0x50>
 40022ec:	39c00117 	ldw	r7,4(r7)
 40022f0:	573ffe04 	addi	fp,r10,-8
 40022f4:	003fa006 	br	4002178 <_malloc_r+0x218>
 40022f8:	00801504 	movi	r2,84
 40022fc:	10c06736 	bltu	r2,r3,400249c <_malloc_r+0x53c>
 4002300:	8804d33a 	srli	r2,r17,12
 4002304:	11801b84 	addi	r6,r2,110
 4002308:	300490fa 	slli	r2,r6,3
 400230c:	003f4106 	br	4002014 <_malloc_r+0xb4>
 4002310:	d0a7e917 	ldw	r2,-24668(gp)
 4002314:	d0e00317 	ldw	r3,-32756(gp)
 4002318:	053fffc4 	movi	r20,-1
 400231c:	10800404 	addi	r2,r2,16
 4002320:	88a7883a 	add	r19,r17,r2
 4002324:	1d000326 	beq	r3,r20,4002334 <_malloc_r+0x3d4>
 4002328:	98c3ffc4 	addi	r3,r19,4095
 400232c:	00bc0004 	movi	r2,-4096
 4002330:	18a6703a 	and	r19,r3,r2
 4002334:	9009883a 	mov	r4,r18
 4002338:	980b883a 	mov	r5,r19
 400233c:	40030000 	call	4003000 <_sbrk_r>
 4002340:	1009883a 	mov	r4,r2
 4002344:	15000426 	beq	r2,r20,4002358 <_malloc_r+0x3f8>
 4002348:	854b883a 	add	r5,r16,r21
 400234c:	1029883a 	mov	r20,r2
 4002350:	11405a2e 	bgeu	r2,r5,40024bc <_malloc_r+0x55c>
 4002354:	87000c26 	beq	r16,fp,4002388 <_malloc_r+0x428>
 4002358:	e4000217 	ldw	r16,8(fp)
 400235c:	80c00117 	ldw	r3,4(r16)
 4002360:	00bfff04 	movi	r2,-4
 4002364:	1884703a 	and	r2,r3,r2
 4002368:	14400336 	bltu	r2,r17,4002378 <_malloc_r+0x418>
 400236c:	1449c83a 	sub	r4,r2,r17
 4002370:	008003c4 	movi	r2,15
 4002374:	113fd316 	blt	r2,r4,40022c4 <_malloc_r+0x364>
 4002378:	9009883a 	mov	r4,r18
 400237c:	400e7580 	call	400e758 <__malloc_unlock>
 4002380:	0007883a 	mov	r3,zero
 4002384:	003f0a06 	br	4001fb0 <_malloc_r+0x50>
 4002388:	05c10134 	movhi	r23,1028
 400238c:	bde96604 	addi	r23,r23,-23144
 4002390:	b8800017 	ldw	r2,0(r23)
 4002394:	988d883a 	add	r6,r19,r2
 4002398:	b9800015 	stw	r6,0(r23)
 400239c:	d0e00317 	ldw	r3,-32756(gp)
 40023a0:	00bfffc4 	movi	r2,-1
 40023a4:	18808e26 	beq	r3,r2,40025e0 <_malloc_r+0x680>
 40023a8:	2145c83a 	sub	r2,r4,r5
 40023ac:	3085883a 	add	r2,r6,r2
 40023b0:	b8800015 	stw	r2,0(r23)
 40023b4:	20c001cc 	andi	r3,r4,7
 40023b8:	18005f1e 	bne	r3,zero,4002538 <_malloc_r+0x5d8>
 40023bc:	000b883a 	mov	r5,zero
 40023c0:	a4c5883a 	add	r2,r20,r19
 40023c4:	1083ffcc 	andi	r2,r2,4095
 40023c8:	00c40004 	movi	r3,4096
 40023cc:	1887c83a 	sub	r3,r3,r2
 40023d0:	28e7883a 	add	r19,r5,r3
 40023d4:	9009883a 	mov	r4,r18
 40023d8:	980b883a 	mov	r5,r19
 40023dc:	40030000 	call	4003000 <_sbrk_r>
 40023e0:	1007883a 	mov	r3,r2
 40023e4:	00bfffc4 	movi	r2,-1
 40023e8:	18807a26 	beq	r3,r2,40025d4 <_malloc_r+0x674>
 40023ec:	1d05c83a 	sub	r2,r3,r20
 40023f0:	9885883a 	add	r2,r19,r2
 40023f4:	10c00054 	ori	r3,r2,1
 40023f8:	b8800017 	ldw	r2,0(r23)
 40023fc:	a021883a 	mov	r16,r20
 4002400:	a0c00115 	stw	r3,4(r20)
 4002404:	9885883a 	add	r2,r19,r2
 4002408:	b8800015 	stw	r2,0(r23)
 400240c:	e5000215 	stw	r20,8(fp)
 4002410:	b7003626 	beq	r22,fp,40024ec <_malloc_r+0x58c>
 4002414:	018003c4 	movi	r6,15
 4002418:	35404b36 	bltu	r6,r21,4002548 <_malloc_r+0x5e8>
 400241c:	00800044 	movi	r2,1
 4002420:	a0800115 	stw	r2,4(r20)
 4002424:	003fcd06 	br	400235c <_malloc_r+0x3fc>
 4002428:	2808d27a 	srli	r4,r5,9
 400242c:	2000371e 	bne	r4,zero,400250c <_malloc_r+0x5ac>
 4002430:	2808d0fa 	srli	r4,r5,3
 4002434:	200690fa 	slli	r3,r4,3
 4002438:	1ad1883a 	add	r8,r3,r11
 400243c:	41800217 	ldw	r6,8(r8)
 4002440:	41805b26 	beq	r8,r6,40025b0 <_malloc_r+0x650>
 4002444:	30800117 	ldw	r2,4(r6)
 4002448:	00ffff04 	movi	r3,-4
 400244c:	10c4703a 	and	r2,r2,r3
 4002450:	2880022e 	bgeu	r5,r2,400245c <_malloc_r+0x4fc>
 4002454:	31800217 	ldw	r6,8(r6)
 4002458:	41bffa1e 	bne	r8,r6,4002444 <_malloc_r+0x4e4>
 400245c:	32000317 	ldw	r8,12(r6)
 4002460:	39c00117 	ldw	r7,4(r7)
 4002464:	82000315 	stw	r8,12(r16)
 4002468:	81800215 	stw	r6,8(r16)
 400246c:	070100f4 	movhi	fp,1027
 4002470:	e71ac304 	addi	fp,fp,27404
 4002474:	34000315 	stw	r16,12(r6)
 4002478:	44000215 	stw	r16,8(r8)
 400247c:	003f3e06 	br	4002178 <_malloc_r+0x218>
 4002480:	63000044 	addi	r12,r12,1
 4002484:	608000cc 	andi	r2,r12,3
 4002488:	10005d26 	beq	r2,zero,4002600 <_malloc_r+0x6a0>
 400248c:	18c00204 	addi	r3,r3,8
 4002490:	003f5106 	br	40021d8 <_malloc_r+0x278>
 4002494:	8089883a 	add	r4,r16,r2
 4002498:	003f6d06 	br	4002250 <_malloc_r+0x2f0>
 400249c:	00805504 	movi	r2,340
 40024a0:	10c02036 	bltu	r2,r3,4002524 <_malloc_r+0x5c4>
 40024a4:	8804d3fa 	srli	r2,r17,15
 40024a8:	11801dc4 	addi	r6,r2,119
 40024ac:	300490fa 	slli	r2,r6,3
 40024b0:	003ed806 	br	4002014 <_malloc_r+0xb4>
 40024b4:	48c000c4 	addi	r3,r9,3
 40024b8:	003f3106 	br	4002180 <_malloc_r+0x220>
 40024bc:	05c10134 	movhi	r23,1028
 40024c0:	bde96604 	addi	r23,r23,-23144
 40024c4:	b8800017 	ldw	r2,0(r23)
 40024c8:	988d883a 	add	r6,r19,r2
 40024cc:	b9800015 	stw	r6,0(r23)
 40024d0:	293fb21e 	bne	r5,r4,400239c <_malloc_r+0x43c>
 40024d4:	2083ffcc 	andi	r2,r4,4095
 40024d8:	103fb01e 	bne	r2,zero,400239c <_malloc_r+0x43c>
 40024dc:	e4000217 	ldw	r16,8(fp)
 40024e0:	9d45883a 	add	r2,r19,r21
 40024e4:	10800054 	ori	r2,r2,1
 40024e8:	80800115 	stw	r2,4(r16)
 40024ec:	b8c00017 	ldw	r3,0(r23)
 40024f0:	d0a7ea17 	ldw	r2,-24664(gp)
 40024f4:	10c0012e 	bgeu	r2,r3,40024fc <_malloc_r+0x59c>
 40024f8:	d0e7ea15 	stw	r3,-24664(gp)
 40024fc:	d0a7eb17 	ldw	r2,-24660(gp)
 4002500:	10ff962e 	bgeu	r2,r3,400235c <_malloc_r+0x3fc>
 4002504:	d0e7eb15 	stw	r3,-24660(gp)
 4002508:	003f9406 	br	400235c <_malloc_r+0x3fc>
 400250c:	00800104 	movi	r2,4
 4002510:	11001e36 	bltu	r2,r4,400258c <_malloc_r+0x62c>
 4002514:	2804d1ba 	srli	r2,r5,6
 4002518:	11000e04 	addi	r4,r2,56
 400251c:	200690fa 	slli	r3,r4,3
 4002520:	003fc506 	br	4002438 <_malloc_r+0x4d8>
 4002524:	00815504 	movi	r2,1364
 4002528:	10c01d2e 	bgeu	r2,r3,40025a0 <_malloc_r+0x640>
 400252c:	01801f84 	movi	r6,126
 4002530:	0080fc04 	movi	r2,1008
 4002534:	003eb706 	br	4002014 <_malloc_r+0xb4>
 4002538:	00800204 	movi	r2,8
 400253c:	10cbc83a 	sub	r5,r2,r3
 4002540:	2169883a 	add	r20,r4,r5
 4002544:	003f9e06 	br	40023c0 <_malloc_r+0x460>
 4002548:	00bffe04 	movi	r2,-8
 400254c:	a93ffd04 	addi	r4,r21,-12
 4002550:	2088703a 	and	r4,r4,r2
 4002554:	b10b883a 	add	r5,r22,r4
 4002558:	00c00144 	movi	r3,5
 400255c:	28c00215 	stw	r3,8(r5)
 4002560:	28c00115 	stw	r3,4(r5)
 4002564:	b0800117 	ldw	r2,4(r22)
 4002568:	1080004c 	andi	r2,r2,1
 400256c:	2084b03a 	or	r2,r4,r2
 4002570:	b0800115 	stw	r2,4(r22)
 4002574:	313fdd2e 	bgeu	r6,r4,40024ec <_malloc_r+0x58c>
 4002578:	b1400204 	addi	r5,r22,8
 400257c:	9009883a 	mov	r4,r18
 4002580:	40089b80 	call	40089b8 <_free_r>
 4002584:	e4000217 	ldw	r16,8(fp)
 4002588:	003fd806 	br	40024ec <_malloc_r+0x58c>
 400258c:	00800504 	movi	r2,20
 4002590:	11001536 	bltu	r2,r4,40025e8 <_malloc_r+0x688>
 4002594:	210016c4 	addi	r4,r4,91
 4002598:	200690fa 	slli	r3,r4,3
 400259c:	003fa606 	br	4002438 <_malloc_r+0x4d8>
 40025a0:	8804d4ba 	srli	r2,r17,18
 40025a4:	11801f04 	addi	r6,r2,124
 40025a8:	300490fa 	slli	r2,r6,3
 40025ac:	003e9906 	br	4002014 <_malloc_r+0xb4>
 40025b0:	2009d0ba 	srai	r4,r4,2
 40025b4:	014100f4 	movhi	r5,1027
 40025b8:	295ac304 	addi	r5,r5,27404
 40025bc:	00c00044 	movi	r3,1
 40025c0:	28800117 	ldw	r2,4(r5)
 40025c4:	1906983a 	sll	r3,r3,r4
 40025c8:	10c4b03a 	or	r2,r2,r3
 40025cc:	28800115 	stw	r2,4(r5)
 40025d0:	003fa306 	br	4002460 <_malloc_r+0x500>
 40025d4:	0027883a 	mov	r19,zero
 40025d8:	00c00044 	movi	r3,1
 40025dc:	003f8606 	br	40023f8 <_malloc_r+0x498>
 40025e0:	d1200315 	stw	r4,-32756(gp)
 40025e4:	003f7306 	br	40023b4 <_malloc_r+0x454>
 40025e8:	00801504 	movi	r2,84
 40025ec:	11001936 	bltu	r2,r4,4002654 <_malloc_r+0x6f4>
 40025f0:	2804d33a 	srli	r2,r5,12
 40025f4:	11001b84 	addi	r4,r2,110
 40025f8:	200690fa 	slli	r3,r4,3
 40025fc:	003f8e06 	br	4002438 <_malloc_r+0x4d8>
 4002600:	480b883a 	mov	r5,r9
 4002604:	6807883a 	mov	r3,r13
 4002608:	288000cc 	andi	r2,r5,3
 400260c:	18fffe04 	addi	r3,r3,-8
 4002610:	297fffc4 	addi	r5,r5,-1
 4002614:	10001526 	beq	r2,zero,400266c <_malloc_r+0x70c>
 4002618:	18800217 	ldw	r2,8(r3)
 400261c:	10fffa26 	beq	r2,r3,4002608 <_malloc_r+0x6a8>
 4002620:	2109883a 	add	r4,r4,r4
 4002624:	393f1e36 	bltu	r7,r4,40022a0 <_malloc_r+0x340>
 4002628:	203f1d26 	beq	r4,zero,40022a0 <_malloc_r+0x340>
 400262c:	21c4703a 	and	r2,r4,r7
 4002630:	10000226 	beq	r2,zero,400263c <_malloc_r+0x6dc>
 4002634:	6013883a 	mov	r9,r12
 4002638:	003ee106 	br	40021c0 <_malloc_r+0x260>
 400263c:	2109883a 	add	r4,r4,r4
 4002640:	3904703a 	and	r2,r7,r4
 4002644:	63000104 	addi	r12,r12,4
 4002648:	103ffc26 	beq	r2,zero,400263c <_malloc_r+0x6dc>
 400264c:	6013883a 	mov	r9,r12
 4002650:	003edb06 	br	40021c0 <_malloc_r+0x260>
 4002654:	00805504 	movi	r2,340
 4002658:	11000836 	bltu	r2,r4,400267c <_malloc_r+0x71c>
 400265c:	2804d3fa 	srli	r2,r5,15
 4002660:	11001dc4 	addi	r4,r2,119
 4002664:	200690fa 	slli	r3,r4,3
 4002668:	003f7306 	br	4002438 <_malloc_r+0x4d8>
 400266c:	0104303a 	nor	r2,zero,r4
 4002670:	388e703a 	and	r7,r7,r2
 4002674:	e1c00115 	stw	r7,4(fp)
 4002678:	003fe906 	br	4002620 <_malloc_r+0x6c0>
 400267c:	00815504 	movi	r2,1364
 4002680:	1100032e 	bgeu	r2,r4,4002690 <_malloc_r+0x730>
 4002684:	01001f84 	movi	r4,126
 4002688:	00c0fc04 	movi	r3,1008
 400268c:	003f6a06 	br	4002438 <_malloc_r+0x4d8>
 4002690:	2804d4ba 	srli	r2,r5,18
 4002694:	11001f04 	addi	r4,r2,124
 4002698:	200690fa 	slli	r3,r4,3
 400269c:	003f6606 	br	4002438 <_malloc_r+0x4d8>

040026a0 <memset>:
 40026a0:	008000c4 	movi	r2,3
 40026a4:	29403fcc 	andi	r5,r5,255
 40026a8:	2007883a 	mov	r3,r4
 40026ac:	1180022e 	bgeu	r2,r6,40026b8 <memset+0x18>
 40026b0:	2084703a 	and	r2,r4,r2
 40026b4:	10000826 	beq	r2,zero,40026d8 <memset+0x38>
 40026b8:	30000526 	beq	r6,zero,40026d0 <memset+0x30>
 40026bc:	2805883a 	mov	r2,r5
 40026c0:	30cd883a 	add	r6,r6,r3
 40026c4:	18800005 	stb	r2,0(r3)
 40026c8:	18c00044 	addi	r3,r3,1
 40026cc:	19bffd1e 	bne	r3,r6,40026c4 <memset+0x24>
 40026d0:	2005883a 	mov	r2,r4
 40026d4:	f800283a 	ret
 40026d8:	2804923a 	slli	r2,r5,8
 40026dc:	020003c4 	movi	r8,15
 40026e0:	200f883a 	mov	r7,r4
 40026e4:	2884b03a 	or	r2,r5,r2
 40026e8:	1006943a 	slli	r3,r2,16
 40026ec:	10c6b03a 	or	r3,r2,r3
 40026f0:	41800a2e 	bgeu	r8,r6,400271c <memset+0x7c>
 40026f4:	4005883a 	mov	r2,r8
 40026f8:	31bffc04 	addi	r6,r6,-16
 40026fc:	38c00015 	stw	r3,0(r7)
 4002700:	38c00115 	stw	r3,4(r7)
 4002704:	38c00215 	stw	r3,8(r7)
 4002708:	38c00315 	stw	r3,12(r7)
 400270c:	39c00404 	addi	r7,r7,16
 4002710:	11bff936 	bltu	r2,r6,40026f8 <memset+0x58>
 4002714:	008000c4 	movi	r2,3
 4002718:	1180052e 	bgeu	r2,r6,4002730 <memset+0x90>
 400271c:	31bfff04 	addi	r6,r6,-4
 4002720:	008000c4 	movi	r2,3
 4002724:	38c00015 	stw	r3,0(r7)
 4002728:	39c00104 	addi	r7,r7,4
 400272c:	11bffb36 	bltu	r2,r6,400271c <memset+0x7c>
 4002730:	3807883a 	mov	r3,r7
 4002734:	003fe006 	br	40026b8 <memset+0x18>

04002738 <__tzcalc_limits>:
 4002738:	defff504 	addi	sp,sp,-44
 400273c:	dcc00415 	stw	r19,16(sp)
 4002740:	dc800315 	stw	r18,12(sp)
 4002744:	dfc00a15 	stw	ra,40(sp)
 4002748:	df000915 	stw	fp,36(sp)
 400274c:	ddc00815 	stw	r23,32(sp)
 4002750:	dd800715 	stw	r22,28(sp)
 4002754:	dd400615 	stw	r21,24(sp)
 4002758:	dd000515 	stw	r20,20(sp)
 400275c:	dc400215 	stw	r17,8(sp)
 4002760:	dc000115 	stw	r16,4(sp)
 4002764:	2025883a 	mov	r18,r4
 4002768:	40092e80 	call	40092e8 <__gettzinfo>
 400276c:	1027883a 	mov	r19,r2
 4002770:	0081ec44 	movi	r2,1969
 4002774:	14806e0e 	bge	r2,r18,4002930 <__tzcalc_limits+0x1f8>
 4002778:	943e1384 	addi	r16,r18,-1970
 400277c:	90be13c4 	addi	r2,r18,-1969
 4002780:	1005d0ba 	srai	r2,r2,2
 4002784:	84005b64 	muli	r16,r16,365
 4002788:	913e24c4 	addi	r4,r18,-1901
 400278c:	9c800115 	stw	r18,4(r19)
 4002790:	01401904 	movi	r5,100
 4002794:	80a1883a 	add	r16,r16,r2
 4002798:	400d76c0 	call	400d76c <__divsi3>
 400279c:	913e6fc4 	addi	r4,r18,-1601
 40027a0:	01406404 	movi	r5,400
 40027a4:	80a1c83a 	sub	r16,r16,r2
 40027a8:	400d76c0 	call	400d76c <__divsi3>
 40027ac:	9009883a 	mov	r4,r18
 40027b0:	01406404 	movi	r5,400
 40027b4:	80ad883a 	add	r22,r16,r2
 40027b8:	400d7cc0 	call	400d7cc <__modsi3>
 40027bc:	9009883a 	mov	r4,r18
 40027c0:	01401904 	movi	r5,100
 40027c4:	1023883a 	mov	r17,r2
 40027c8:	400d7cc0 	call	400d7cc <__modsi3>
 40027cc:	90c000cc 	andi	r3,r18,3
 40027d0:	1004c03a 	cmpne	r2,r2,zero
 40027d4:	182ec03a 	cmpne	r23,r3,zero
 40027d8:	d8800015 	stw	r2,0(sp)
 40027dc:	8839003a 	cmpeq	fp,r17,zero
 40027e0:	9825883a 	mov	r18,r19
 40027e4:	0029883a 	mov	r20,zero
 40027e8:	90c00207 	ldb	r3,8(r18)
 40027ec:	00801284 	movi	r2,74
 40027f0:	18804726 	beq	r3,r2,4002910 <__tzcalc_limits+0x1d8>
 40027f4:	00801104 	movi	r2,68
 40027f8:	18804f26 	beq	r3,r2,4002938 <__tzcalc_limits+0x200>
 40027fc:	b8003e26 	beq	r23,zero,40028f8 <__tzcalc_limits+0x1c0>
 4002800:	e0004026 	beq	fp,zero,4002904 <__tzcalc_limits+0x1cc>
 4002804:	044100f4 	movhi	r17,1027
 4002808:	8c484e04 	addi	r17,r17,8504
 400280c:	91400317 	ldw	r5,12(r18)
 4002810:	00800044 	movi	r2,1
 4002814:	1140520e 	bge	r2,r5,4002960 <__tzcalc_limits+0x228>
 4002818:	1009883a 	mov	r4,r2
 400281c:	8807883a 	mov	r3,r17
 4002820:	b021883a 	mov	r16,r22
 4002824:	18800017 	ldw	r2,0(r3)
 4002828:	21000044 	addi	r4,r4,1
 400282c:	18c00104 	addi	r3,r3,4
 4002830:	80a1883a 	add	r16,r16,r2
 4002834:	293ffb1e 	bne	r5,r4,4002824 <__tzcalc_limits+0xec>
 4002838:	2945883a 	add	r2,r5,r5
 400283c:	10ab883a 	add	r21,r2,r2
 4002840:	81000104 	addi	r4,r16,4
 4002844:	014001c4 	movi	r5,7
 4002848:	400d7cc0 	call	400d7cc <__modsi3>
 400284c:	90c00517 	ldw	r3,20(r18)
 4002850:	1889c83a 	sub	r4,r3,r2
 4002854:	20004016 	blt	r4,zero,4002958 <__tzcalc_limits+0x220>
 4002858:	90800417 	ldw	r2,16(r18)
 400285c:	8d47883a 	add	r3,r17,r21
 4002860:	18ffff17 	ldw	r3,-4(r3)
 4002864:	108001e4 	muli	r2,r2,7
 4002868:	10bffe44 	addi	r2,r2,-7
 400286c:	2085883a 	add	r2,r4,r2
 4002870:	10c00216 	blt	r2,r3,400287c <__tzcalc_limits+0x144>
 4002874:	10bffe44 	addi	r2,r2,-7
 4002878:	10fffe0e 	bge	r2,r3,4002874 <__tzcalc_limits+0x13c>
 400287c:	808b883a 	add	r5,r16,r2
 4002880:	90c00617 	ldw	r3,24(r18)
 4002884:	91000817 	ldw	r4,32(r18)
 4002888:	00800074 	movhi	r2,1
 400288c:	10946004 	addi	r2,r2,20864
 4002890:	2885383a 	mul	r2,r5,r2
 4002894:	1907883a 	add	r3,r3,r4
 4002898:	a5000044 	addi	r20,r20,1
 400289c:	10c5883a 	add	r2,r2,r3
 40028a0:	90800715 	stw	r2,28(r18)
 40028a4:	00800084 	movi	r2,2
 40028a8:	94800704 	addi	r18,r18,28
 40028ac:	a0bfce1e 	bne	r20,r2,40027e8 <__tzcalc_limits+0xb0>
 40028b0:	98800717 	ldw	r2,28(r19)
 40028b4:	98c00e17 	ldw	r3,56(r19)
 40028b8:	01000044 	movi	r4,1
 40028bc:	10c4803a 	cmplt	r2,r2,r3
 40028c0:	98800015 	stw	r2,0(r19)
 40028c4:	2005883a 	mov	r2,r4
 40028c8:	dfc00a17 	ldw	ra,40(sp)
 40028cc:	df000917 	ldw	fp,36(sp)
 40028d0:	ddc00817 	ldw	r23,32(sp)
 40028d4:	dd800717 	ldw	r22,28(sp)
 40028d8:	dd400617 	ldw	r21,24(sp)
 40028dc:	dd000517 	ldw	r20,20(sp)
 40028e0:	dcc00417 	ldw	r19,16(sp)
 40028e4:	dc800317 	ldw	r18,12(sp)
 40028e8:	dc400217 	ldw	r17,8(sp)
 40028ec:	dc000117 	ldw	r16,4(sp)
 40028f0:	dec00b04 	addi	sp,sp,44
 40028f4:	f800283a 	ret
 40028f8:	d8800017 	ldw	r2,0(sp)
 40028fc:	103fc11e 	bne	r2,zero,4002804 <__tzcalc_limits+0xcc>
 4002900:	e03fc01e 	bne	fp,zero,4002804 <__tzcalc_limits+0xcc>
 4002904:	044100f4 	movhi	r17,1027
 4002908:	8c484204 	addi	r17,r17,8456
 400290c:	003fbf06 	br	400280c <__tzcalc_limits+0xd4>
 4002910:	90c00517 	ldw	r3,20(r18)
 4002914:	b8000b26 	beq	r23,zero,4002944 <__tzcalc_limits+0x20c>
 4002918:	e0000d26 	beq	fp,zero,4002950 <__tzcalc_limits+0x218>
 400291c:	00800ec4 	movi	r2,59
 4002920:	10c8803a 	cmplt	r4,r2,r3
 4002924:	b0c5883a 	add	r2,r22,r3
 4002928:	208b883a 	add	r5,r4,r2
 400292c:	003fd406 	br	4002880 <__tzcalc_limits+0x148>
 4002930:	0009883a 	mov	r4,zero
 4002934:	003fe306 	br	40028c4 <__tzcalc_limits+0x18c>
 4002938:	90800517 	ldw	r2,20(r18)
 400293c:	b08b883a 	add	r5,r22,r2
 4002940:	003fcf06 	br	4002880 <__tzcalc_limits+0x148>
 4002944:	d8800017 	ldw	r2,0(sp)
 4002948:	103ff41e 	bne	r2,zero,400291c <__tzcalc_limits+0x1e4>
 400294c:	e03ff31e 	bne	fp,zero,400291c <__tzcalc_limits+0x1e4>
 4002950:	0009883a 	mov	r4,zero
 4002954:	003ff306 	br	4002924 <__tzcalc_limits+0x1ec>
 4002958:	210001c4 	addi	r4,r4,7
 400295c:	003fbe06 	br	4002858 <__tzcalc_limits+0x120>
 4002960:	b021883a 	mov	r16,r22
 4002964:	05400104 	movi	r21,4
 4002968:	003fb506 	br	4002840 <__tzcalc_limits+0x108>

0400296c <_mktm_r>:
 400296c:	defff704 	addi	sp,sp,-36
 4002970:	dd400515 	stw	r21,20(sp)
 4002974:	202b883a 	mov	r21,r4
 4002978:	dfc00815 	stw	ra,32(sp)
 400297c:	ddc00715 	stw	r23,28(sp)
 4002980:	dd000415 	stw	r20,16(sp)
 4002984:	302f883a 	mov	r23,r6
 4002988:	dc800215 	stw	r18,8(sp)
 400298c:	dc400115 	stw	r17,4(sp)
 4002990:	dc000015 	stw	r16,0(sp)
 4002994:	2825883a 	mov	r18,r5
 4002998:	dd800615 	stw	r22,24(sp)
 400299c:	dcc00315 	stw	r19,12(sp)
 40029a0:	40092e80 	call	40092e8 <__gettzinfo>
 40029a4:	ac400017 	ldw	r17,0(r21)
 40029a8:	01400074 	movhi	r5,1
 40029ac:	29546004 	addi	r5,r5,20864
 40029b0:	1029883a 	mov	r20,r2
 40029b4:	8809883a 	mov	r4,r17
 40029b8:	400d76c0 	call	400d76c <__divsi3>
 40029bc:	8809883a 	mov	r4,r17
 40029c0:	01400074 	movhi	r5,1
 40029c4:	29546004 	addi	r5,r5,20864
 40029c8:	1021883a 	mov	r16,r2
 40029cc:	400d7cc0 	call	400d7cc <__modsi3>
 40029d0:	1023883a 	mov	r17,r2
 40029d4:	1000050e 	bge	r2,zero,40029ec <_mktm_r+0x80>
 40029d8:	00800074 	movhi	r2,1
 40029dc:	10946004 	addi	r2,r2,20864
 40029e0:	88a3883a 	add	r17,r17,r2
 40029e4:	843fffc4 	addi	r16,r16,-1
 40029e8:	883ffd16 	blt	r17,zero,40029e0 <_mktm_r+0x74>
 40029ec:	00800074 	movhi	r2,1
 40029f0:	10945fc4 	addi	r2,r2,20863
 40029f4:	1440060e 	bge	r2,r17,4002a10 <_mktm_r+0xa4>
 40029f8:	1007883a 	mov	r3,r2
 40029fc:	00bffff4 	movhi	r2,65535
 4002a00:	10aba004 	addi	r2,r2,-20864
 4002a04:	88a3883a 	add	r17,r17,r2
 4002a08:	84000044 	addi	r16,r16,1
 4002a0c:	1c7ffd16 	blt	r3,r17,4002a04 <_mktm_r+0x98>
 4002a10:	8809883a 	mov	r4,r17
 4002a14:	01438404 	movi	r5,3600
 4002a18:	400d76c0 	call	400d76c <__divsi3>
 4002a1c:	90800215 	stw	r2,8(r18)
 4002a20:	8809883a 	mov	r4,r17
 4002a24:	01438404 	movi	r5,3600
 4002a28:	400d7cc0 	call	400d7cc <__modsi3>
 4002a2c:	1009883a 	mov	r4,r2
 4002a30:	01400f04 	movi	r5,60
 4002a34:	1023883a 	mov	r17,r2
 4002a38:	400d76c0 	call	400d76c <__divsi3>
 4002a3c:	90800115 	stw	r2,4(r18)
 4002a40:	8809883a 	mov	r4,r17
 4002a44:	01400f04 	movi	r5,60
 4002a48:	400d7cc0 	call	400d7cc <__modsi3>
 4002a4c:	90800015 	stw	r2,0(r18)
 4002a50:	81000104 	addi	r4,r16,4
 4002a54:	014001c4 	movi	r5,7
 4002a58:	400d7cc0 	call	400d7cc <__modsi3>
 4002a5c:	90800615 	stw	r2,24(r18)
 4002a60:	10003916 	blt	r2,zero,4002b48 <_mktm_r+0x1dc>
 4002a64:	80003b16 	blt	r16,zero,4002b54 <_mktm_r+0x1e8>
 4002a68:	0441ec84 	movi	r17,1970
 4002a6c:	d4e00404 	addi	r19,gp,-32752
 4002a70:	00000206 	br	4002a7c <_mktm_r+0x110>
 4002a74:	80a1c83a 	sub	r16,r16,r2
 4002a78:	8c400044 	addi	r17,r17,1
 4002a7c:	888000cc 	andi	r2,r17,3
 4002a80:	8809883a 	mov	r4,r17
 4002a84:	01401904 	movi	r5,100
 4002a88:	1000031e 	bne	r2,zero,4002a98 <_mktm_r+0x12c>
 4002a8c:	400d7cc0 	call	400d7cc <__modsi3>
 4002a90:	01000044 	movi	r4,1
 4002a94:	1000041e 	bne	r2,zero,4002aa8 <_mktm_r+0x13c>
 4002a98:	8809883a 	mov	r4,r17
 4002a9c:	01406404 	movi	r5,400
 4002aa0:	400d7cc0 	call	400d7cc <__modsi3>
 4002aa4:	1009003a 	cmpeq	r4,r2,zero
 4002aa8:	2105883a 	add	r2,r4,r4
 4002aac:	1085883a 	add	r2,r2,r2
 4002ab0:	14c5883a 	add	r2,r2,r19
 4002ab4:	10800017 	ldw	r2,0(r2)
 4002ab8:	80bfee0e 	bge	r16,r2,4002a74 <_mktm_r+0x108>
 4002abc:	21000c24 	muli	r4,r4,48
 4002ac0:	88be2504 	addi	r2,r17,-1900
 4002ac4:	014100f4 	movhi	r5,1027
 4002ac8:	29484204 	addi	r5,r5,8456
 4002acc:	90800515 	stw	r2,20(r18)
 4002ad0:	94000715 	stw	r16,28(r18)
 4002ad4:	90000415 	stw	zero,16(r18)
 4002ad8:	216d883a 	add	r22,r4,r5
 4002adc:	b0c00017 	ldw	r3,0(r22)
 4002ae0:	80c00916 	blt	r16,r3,4002b08 <_mktm_r+0x19c>
 4002ae4:	28800104 	addi	r2,r5,4
 4002ae8:	2085883a 	add	r2,r4,r2
 4002aec:	01000044 	movi	r4,1
 4002af0:	91000415 	stw	r4,16(r18)
 4002af4:	80e1c83a 	sub	r16,r16,r3
 4002af8:	10c00017 	ldw	r3,0(r2)
 4002afc:	21000044 	addi	r4,r4,1
 4002b00:	10800104 	addi	r2,r2,4
 4002b04:	80fffa0e 	bge	r16,r3,4002af0 <_mktm_r+0x184>
 4002b08:	80800044 	addi	r2,r16,1
 4002b0c:	90800315 	stw	r2,12(r18)
 4002b10:	b8002526 	beq	r23,zero,4002ba8 <_mktm_r+0x23c>
 4002b14:	90000815 	stw	zero,32(r18)
 4002b18:	9005883a 	mov	r2,r18
 4002b1c:	dfc00817 	ldw	ra,32(sp)
 4002b20:	ddc00717 	ldw	r23,28(sp)
 4002b24:	dd800617 	ldw	r22,24(sp)
 4002b28:	dd400517 	ldw	r21,20(sp)
 4002b2c:	dd000417 	ldw	r20,16(sp)
 4002b30:	dcc00317 	ldw	r19,12(sp)
 4002b34:	dc800217 	ldw	r18,8(sp)
 4002b38:	dc400117 	ldw	r17,4(sp)
 4002b3c:	dc000017 	ldw	r16,0(sp)
 4002b40:	dec00904 	addi	sp,sp,36
 4002b44:	f800283a 	ret
 4002b48:	108001c4 	addi	r2,r2,7
 4002b4c:	90800615 	stw	r2,24(r18)
 4002b50:	803fc50e 	bge	r16,zero,4002a68 <_mktm_r+0xfc>
 4002b54:	0441ec84 	movi	r17,1970
 4002b58:	d4e00404 	addi	r19,gp,-32752
 4002b5c:	8c7fffc4 	addi	r17,r17,-1
 4002b60:	888000cc 	andi	r2,r17,3
 4002b64:	8809883a 	mov	r4,r17
 4002b68:	01401904 	movi	r5,100
 4002b6c:	1000031e 	bne	r2,zero,4002b7c <_mktm_r+0x210>
 4002b70:	400d7cc0 	call	400d7cc <__modsi3>
 4002b74:	01000044 	movi	r4,1
 4002b78:	1000041e 	bne	r2,zero,4002b8c <_mktm_r+0x220>
 4002b7c:	8809883a 	mov	r4,r17
 4002b80:	01406404 	movi	r5,400
 4002b84:	400d7cc0 	call	400d7cc <__modsi3>
 4002b88:	1009003a 	cmpeq	r4,r2,zero
 4002b8c:	2105883a 	add	r2,r4,r4
 4002b90:	1085883a 	add	r2,r2,r2
 4002b94:	14c5883a 	add	r2,r2,r19
 4002b98:	10c00017 	ldw	r3,0(r2)
 4002b9c:	80e1883a 	add	r16,r16,r3
 4002ba0:	803fee16 	blt	r16,zero,4002b5c <_mktm_r+0x1f0>
 4002ba4:	003fc506 	br	4002abc <_mktm_r+0x150>
 4002ba8:	40047a00 	call	40047a0 <__tz_lock>
 4002bac:	00810134 	movhi	r2,1028
 4002bb0:	10a8e304 	addi	r2,r2,-23668
 4002bb4:	10c00017 	ldw	r3,0(r2)
 4002bb8:	18000a26 	beq	r3,zero,4002be4 <_mktm_r+0x278>
 4002bbc:	a0800117 	ldw	r2,4(r20)
 4002bc0:	88800326 	beq	r17,r2,4002bd0 <_mktm_r+0x264>
 4002bc4:	8809883a 	mov	r4,r17
 4002bc8:	40027380 	call	4002738 <__tzcalc_limits>
 4002bcc:	10007426 	beq	r2,zero,4002da0 <_mktm_r+0x434>
 4002bd0:	a0800017 	ldw	r2,0(r20)
 4002bd4:	10006b26 	beq	r2,zero,4002d84 <_mktm_r+0x418>
 4002bd8:	a9000017 	ldw	r4,0(r21)
 4002bdc:	a0800717 	ldw	r2,28(r20)
 4002be0:	2080750e 	bge	r4,r2,4002db8 <_mktm_r+0x44c>
 4002be4:	90000815 	stw	zero,32(r18)
 4002be8:	a4c00817 	ldw	r19,32(r20)
 4002bec:	01438404 	movi	r5,3600
 4002bf0:	9809883a 	mov	r4,r19
 4002bf4:	400d7cc0 	call	400d7cc <__modsi3>
 4002bf8:	1009883a 	mov	r4,r2
 4002bfc:	01400f04 	movi	r5,60
 4002c00:	1023883a 	mov	r17,r2
 4002c04:	400d7cc0 	call	400d7cc <__modsi3>
 4002c08:	90c00017 	ldw	r3,0(r18)
 4002c0c:	8809883a 	mov	r4,r17
 4002c10:	01400f04 	movi	r5,60
 4002c14:	1887c83a 	sub	r3,r3,r2
 4002c18:	90c00015 	stw	r3,0(r18)
 4002c1c:	400d76c0 	call	400d76c <__divsi3>
 4002c20:	94000117 	ldw	r16,4(r18)
 4002c24:	9809883a 	mov	r4,r19
 4002c28:	01438404 	movi	r5,3600
 4002c2c:	80a1c83a 	sub	r16,r16,r2
 4002c30:	94000115 	stw	r16,4(r18)
 4002c34:	400d76c0 	call	400d76c <__divsi3>
 4002c38:	91000217 	ldw	r4,8(r18)
 4002c3c:	90c00017 	ldw	r3,0(r18)
 4002c40:	2089c83a 	sub	r4,r4,r2
 4002c44:	00800ec4 	movi	r2,59
 4002c48:	91000215 	stw	r4,8(r18)
 4002c4c:	10c0280e 	bge	r2,r3,4002cf0 <_mktm_r+0x384>
 4002c50:	84000044 	addi	r16,r16,1
 4002c54:	18bff104 	addi	r2,r3,-60
 4002c58:	90800015 	stw	r2,0(r18)
 4002c5c:	94000115 	stw	r16,4(r18)
 4002c60:	00800ec4 	movi	r2,59
 4002c64:	1400410e 	bge	r2,r16,4002d6c <_mktm_r+0x400>
 4002c68:	21000044 	addi	r4,r4,1
 4002c6c:	843ff104 	addi	r16,r16,-60
 4002c70:	94000115 	stw	r16,4(r18)
 4002c74:	91000215 	stw	r4,8(r18)
 4002c78:	008005c4 	movi	r2,23
 4002c7c:	1100220e 	bge	r2,r4,4002d08 <_mktm_r+0x39c>
 4002c80:	90800717 	ldw	r2,28(r18)
 4002c84:	90c00617 	ldw	r3,24(r18)
 4002c88:	10800044 	addi	r2,r2,1
 4002c8c:	18c00044 	addi	r3,r3,1
 4002c90:	90800715 	stw	r2,28(r18)
 4002c94:	00800184 	movi	r2,6
 4002c98:	90c00615 	stw	r3,24(r18)
 4002c9c:	10c0010e 	bge	r2,r3,4002ca4 <_mktm_r+0x338>
 4002ca0:	90000615 	stw	zero,24(r18)
 4002ca4:	91400417 	ldw	r5,16(r18)
 4002ca8:	90c00317 	ldw	r3,12(r18)
 4002cac:	213ffa04 	addi	r4,r4,-24
 4002cb0:	2945883a 	add	r2,r5,r5
 4002cb4:	18c00044 	addi	r3,r3,1
 4002cb8:	1085883a 	add	r2,r2,r2
 4002cbc:	91000215 	stw	r4,8(r18)
 4002cc0:	1585883a 	add	r2,r2,r22
 4002cc4:	90c00315 	stw	r3,12(r18)
 4002cc8:	10800017 	ldw	r2,0(r2)
 4002ccc:	10c0060e 	bge	r2,r3,4002ce8 <_mktm_r+0x37c>
 4002cd0:	1885c83a 	sub	r2,r3,r2
 4002cd4:	29400044 	addi	r5,r5,1
 4002cd8:	90800315 	stw	r2,12(r18)
 4002cdc:	00800304 	movi	r2,12
 4002ce0:	91400415 	stw	r5,16(r18)
 4002ce4:	28803c26 	beq	r5,r2,4002dd8 <_mktm_r+0x46c>
 4002ce8:	40047a40 	call	40047a4 <__tz_unlock>
 4002cec:	003f8a06 	br	4002b18 <_mktm_r+0x1ac>
 4002cf0:	183fdb0e 	bge	r3,zero,4002c60 <_mktm_r+0x2f4>
 4002cf4:	843fffc4 	addi	r16,r16,-1
 4002cf8:	18800f04 	addi	r2,r3,60
 4002cfc:	90800015 	stw	r2,0(r18)
 4002d00:	94000115 	stw	r16,4(r18)
 4002d04:	003fd606 	br	4002c60 <_mktm_r+0x2f4>
 4002d08:	203ff70e 	bge	r4,zero,4002ce8 <_mktm_r+0x37c>
 4002d0c:	90800717 	ldw	r2,28(r18)
 4002d10:	90c00617 	ldw	r3,24(r18)
 4002d14:	10bfffc4 	addi	r2,r2,-1
 4002d18:	18ffffc4 	addi	r3,r3,-1
 4002d1c:	90800715 	stw	r2,28(r18)
 4002d20:	90c00615 	stw	r3,24(r18)
 4002d24:	18003316 	blt	r3,zero,4002df4 <_mktm_r+0x488>
 4002d28:	90800317 	ldw	r2,12(r18)
 4002d2c:	20c00604 	addi	r3,r4,24
 4002d30:	90c00215 	stw	r3,8(r18)
 4002d34:	10bfffc4 	addi	r2,r2,-1
 4002d38:	90800315 	stw	r2,12(r18)
 4002d3c:	103fea1e 	bne	r2,zero,4002ce8 <_mktm_r+0x37c>
 4002d40:	91400417 	ldw	r5,16(r18)
 4002d44:	297fffc4 	addi	r5,r5,-1
 4002d48:	91400415 	stw	r5,16(r18)
 4002d4c:	28002c16 	blt	r5,zero,4002e00 <_mktm_r+0x494>
 4002d50:	2945883a 	add	r2,r5,r5
 4002d54:	1085883a 	add	r2,r2,r2
 4002d58:	1585883a 	add	r2,r2,r22
 4002d5c:	10c00017 	ldw	r3,0(r2)
 4002d60:	90c00315 	stw	r3,12(r18)
 4002d64:	40047a40 	call	40047a4 <__tz_unlock>
 4002d68:	003f6b06 	br	4002b18 <_mktm_r+0x1ac>
 4002d6c:	803fc20e 	bge	r16,zero,4002c78 <_mktm_r+0x30c>
 4002d70:	213fffc4 	addi	r4,r4,-1
 4002d74:	80800f04 	addi	r2,r16,60
 4002d78:	90800115 	stw	r2,4(r18)
 4002d7c:	91000215 	stw	r4,8(r18)
 4002d80:	003fbd06 	br	4002c78 <_mktm_r+0x30c>
 4002d84:	a9000017 	ldw	r4,0(r21)
 4002d88:	a0800717 	ldw	r2,28(r20)
 4002d8c:	20800716 	blt	r4,r2,4002dac <_mktm_r+0x440>
 4002d90:	a4c00f17 	ldw	r19,60(r20)
 4002d94:	00800044 	movi	r2,1
 4002d98:	90800815 	stw	r2,32(r18)
 4002d9c:	003f9306 	br	4002bec <_mktm_r+0x280>
 4002da0:	00bfffc4 	movi	r2,-1
 4002da4:	90800815 	stw	r2,32(r18)
 4002da8:	003f8f06 	br	4002be8 <_mktm_r+0x27c>
 4002dac:	a0800e17 	ldw	r2,56(r20)
 4002db0:	20bff716 	blt	r4,r2,4002d90 <_mktm_r+0x424>
 4002db4:	003f8b06 	br	4002be4 <_mktm_r+0x278>
 4002db8:	a0800e17 	ldw	r2,56(r20)
 4002dbc:	2084403a 	cmpge	r2,r4,r2
 4002dc0:	1007003a 	cmpeq	r3,r2,zero
 4002dc4:	1080005c 	xori	r2,r2,1
 4002dc8:	90800815 	stw	r2,32(r18)
 4002dcc:	183f8626 	beq	r3,zero,4002be8 <_mktm_r+0x27c>
 4002dd0:	a4c00f17 	ldw	r19,60(r20)
 4002dd4:	003f8506 	br	4002bec <_mktm_r+0x280>
 4002dd8:	90800517 	ldw	r2,20(r18)
 4002ddc:	90000415 	stw	zero,16(r18)
 4002de0:	90000715 	stw	zero,28(r18)
 4002de4:	10800044 	addi	r2,r2,1
 4002de8:	90800515 	stw	r2,20(r18)
 4002dec:	40047a40 	call	40047a4 <__tz_unlock>
 4002df0:	003f4906 	br	4002b18 <_mktm_r+0x1ac>
 4002df4:	00800184 	movi	r2,6
 4002df8:	90800615 	stw	r2,24(r18)
 4002dfc:	003fca06 	br	4002d28 <_mktm_r+0x3bc>
 4002e00:	90c00517 	ldw	r3,20(r18)
 4002e04:	014002c4 	movi	r5,11
 4002e08:	91400415 	stw	r5,16(r18)
 4002e0c:	1c3fffc4 	addi	r16,r3,-1
 4002e10:	808000cc 	andi	r2,r16,3
 4002e14:	94000515 	stw	r16,20(r18)
 4002e18:	1000041e 	bne	r2,zero,4002e2c <_mktm_r+0x4c0>
 4002e1c:	8009883a 	mov	r4,r16
 4002e20:	01401904 	movi	r5,100
 4002e24:	400d7cc0 	call	400d7cc <__modsi3>
 4002e28:	1000081e 	bne	r2,zero,4002e4c <_mktm_r+0x4e0>
 4002e2c:	8009883a 	mov	r4,r16
 4002e30:	01406404 	movi	r5,400
 4002e34:	400d7cc0 	call	400d7cc <__modsi3>
 4002e38:	10000426 	beq	r2,zero,4002e4c <_mktm_r+0x4e0>
 4002e3c:	00805b44 	movi	r2,365
 4002e40:	91400417 	ldw	r5,16(r18)
 4002e44:	90800715 	stw	r2,28(r18)
 4002e48:	003fc106 	br	4002d50 <_mktm_r+0x3e4>
 4002e4c:	00805b84 	movi	r2,366
 4002e50:	003ffb06 	br	4002e40 <_mktm_r+0x4d4>

04002e54 <_perror_r>:
 4002e54:	defffe04 	addi	sp,sp,-8
 4002e58:	dc000015 	stw	r16,0(sp)
 4002e5c:	dfc00115 	stw	ra,4(sp)
 4002e60:	2021883a 	mov	r16,r4
 4002e64:	28000326 	beq	r5,zero,4002e74 <_perror_r+0x20>
 4002e68:	28800007 	ldb	r2,0(r5)
 4002e6c:	2809883a 	mov	r4,r5
 4002e70:	10000c1e 	bne	r2,zero,4002ea4 <_perror_r+0x50>
 4002e74:	81000017 	ldw	r4,0(r16)
 4002e78:	40030700 	call	4003070 <strerror>
 4002e7c:	1009883a 	mov	r4,r2
 4002e80:	10000226 	beq	r2,zero,4002e8c <_perror_r+0x38>
 4002e84:	81400317 	ldw	r5,12(r16)
 4002e88:	40088700 	call	4008870 <fputs>
 4002e8c:	81400317 	ldw	r5,12(r16)
 4002e90:	01000284 	movi	r4,10
 4002e94:	dfc00117 	ldw	ra,4(sp)
 4002e98:	dc000017 	ldw	r16,0(sp)
 4002e9c:	dec00204 	addi	sp,sp,8
 4002ea0:	40087401 	jmpi	4008740 <fputc>
 4002ea4:	81400317 	ldw	r5,12(r16)
 4002ea8:	40088700 	call	4008870 <fputs>
 4002eac:	81400317 	ldw	r5,12(r16)
 4002eb0:	010100f4 	movhi	r4,1027
 4002eb4:	21085a04 	addi	r4,r4,8552
 4002eb8:	40088700 	call	4008870 <fputs>
 4002ebc:	003fed06 	br	4002e74 <_perror_r+0x20>

04002ec0 <perror>:
 4002ec0:	00810134 	movhi	r2,1028
 4002ec4:	10a0f704 	addi	r2,r2,-31780
 4002ec8:	200b883a 	mov	r5,r4
 4002ecc:	11000017 	ldw	r4,0(r2)
 4002ed0:	4002e541 	jmpi	4002e54 <_perror_r>

04002ed4 <printf>:
 4002ed4:	defffb04 	addi	sp,sp,-20
 4002ed8:	dfc00115 	stw	ra,4(sp)
 4002edc:	d9400215 	stw	r5,8(sp)
 4002ee0:	d9800315 	stw	r6,12(sp)
 4002ee4:	d9c00415 	stw	r7,16(sp)
 4002ee8:	00810134 	movhi	r2,1028
 4002eec:	10a0f704 	addi	r2,r2,-31780
 4002ef0:	10c00017 	ldw	r3,0(r2)
 4002ef4:	200b883a 	mov	r5,r4
 4002ef8:	d8800204 	addi	r2,sp,8
 4002efc:	19000217 	ldw	r4,8(r3)
 4002f00:	100d883a 	mov	r6,r2
 4002f04:	d8800015 	stw	r2,0(sp)
 4002f08:	40066b40 	call	40066b4 <__vfprintf_internal>
 4002f0c:	dfc00117 	ldw	ra,4(sp)
 4002f10:	dec00504 	addi	sp,sp,20
 4002f14:	f800283a 	ret

04002f18 <_printf_r>:
 4002f18:	defffc04 	addi	sp,sp,-16
 4002f1c:	dfc00115 	stw	ra,4(sp)
 4002f20:	d9800215 	stw	r6,8(sp)
 4002f24:	d9c00315 	stw	r7,12(sp)
 4002f28:	280d883a 	mov	r6,r5
 4002f2c:	21400217 	ldw	r5,8(r4)
 4002f30:	d8c00204 	addi	r3,sp,8
 4002f34:	180f883a 	mov	r7,r3
 4002f38:	d8c00015 	stw	r3,0(sp)
 4002f3c:	40048080 	call	4004808 <___vfprintf_internal_r>
 4002f40:	dfc00117 	ldw	ra,4(sp)
 4002f44:	dec00404 	addi	sp,sp,16
 4002f48:	f800283a 	ret

04002f4c <_puts_r>:
 4002f4c:	defff604 	addi	sp,sp,-40
 4002f50:	dc400715 	stw	r17,28(sp)
 4002f54:	2023883a 	mov	r17,r4
 4002f58:	2809883a 	mov	r4,r5
 4002f5c:	dfc00915 	stw	ra,36(sp)
 4002f60:	dcc00815 	stw	r19,32(sp)
 4002f64:	2827883a 	mov	r19,r5
 4002f68:	400472c0 	call	400472c <strlen>
 4002f6c:	89400217 	ldw	r5,8(r17)
 4002f70:	00c100f4 	movhi	r3,1027
 4002f74:	18c58404 	addi	r3,r3,5648
 4002f78:	01c00044 	movi	r7,1
 4002f7c:	12000044 	addi	r8,r2,1
 4002f80:	d8c00515 	stw	r3,20(sp)
 4002f84:	d9c00615 	stw	r7,24(sp)
 4002f88:	d8c00304 	addi	r3,sp,12
 4002f8c:	01c00084 	movi	r7,2
 4002f90:	8809883a 	mov	r4,r17
 4002f94:	d80d883a 	mov	r6,sp
 4002f98:	d8c00015 	stw	r3,0(sp)
 4002f9c:	dcc00315 	stw	r19,12(sp)
 4002fa0:	da000215 	stw	r8,8(sp)
 4002fa4:	d9c00115 	stw	r7,4(sp)
 4002fa8:	d8800415 	stw	r2,16(sp)
 4002fac:	4008ccc0 	call	4008ccc <__sfvwrite_r>
 4002fb0:	00ffffc4 	movi	r3,-1
 4002fb4:	10000626 	beq	r2,zero,4002fd0 <_puts_r+0x84>
 4002fb8:	1805883a 	mov	r2,r3
 4002fbc:	dfc00917 	ldw	ra,36(sp)
 4002fc0:	dcc00817 	ldw	r19,32(sp)
 4002fc4:	dc400717 	ldw	r17,28(sp)
 4002fc8:	dec00a04 	addi	sp,sp,40
 4002fcc:	f800283a 	ret
 4002fd0:	00c00284 	movi	r3,10
 4002fd4:	1805883a 	mov	r2,r3
 4002fd8:	dfc00917 	ldw	ra,36(sp)
 4002fdc:	dcc00817 	ldw	r19,32(sp)
 4002fe0:	dc400717 	ldw	r17,28(sp)
 4002fe4:	dec00a04 	addi	sp,sp,40
 4002fe8:	f800283a 	ret

04002fec <puts>:
 4002fec:	00810134 	movhi	r2,1028
 4002ff0:	10a0f704 	addi	r2,r2,-31780
 4002ff4:	200b883a 	mov	r5,r4
 4002ff8:	11000017 	ldw	r4,0(r2)
 4002ffc:	4002f4c1 	jmpi	4002f4c <_puts_r>

04003000 <_sbrk_r>:
 4003000:	defffd04 	addi	sp,sp,-12
 4003004:	dc000015 	stw	r16,0(sp)
 4003008:	04010134 	movhi	r16,1028
 400300c:	8428e504 	addi	r16,r16,-23660
 4003010:	dc400115 	stw	r17,4(sp)
 4003014:	80000015 	stw	zero,0(r16)
 4003018:	2023883a 	mov	r17,r4
 400301c:	2809883a 	mov	r4,r5
 4003020:	dfc00215 	stw	ra,8(sp)
 4003024:	400e3d40 	call	400e3d4 <sbrk>
 4003028:	1007883a 	mov	r3,r2
 400302c:	00bfffc4 	movi	r2,-1
 4003030:	18800626 	beq	r3,r2,400304c <_sbrk_r+0x4c>
 4003034:	1805883a 	mov	r2,r3
 4003038:	dfc00217 	ldw	ra,8(sp)
 400303c:	dc400117 	ldw	r17,4(sp)
 4003040:	dc000017 	ldw	r16,0(sp)
 4003044:	dec00304 	addi	sp,sp,12
 4003048:	f800283a 	ret
 400304c:	80800017 	ldw	r2,0(r16)
 4003050:	103ff826 	beq	r2,zero,4003034 <_sbrk_r+0x34>
 4003054:	88800015 	stw	r2,0(r17)
 4003058:	1805883a 	mov	r2,r3
 400305c:	dfc00217 	ldw	ra,8(sp)
 4003060:	dc400117 	ldw	r17,4(sp)
 4003064:	dc000017 	ldw	r16,0(sp)
 4003068:	dec00304 	addi	sp,sp,12
 400306c:	f800283a 	ret

04003070 <strerror>:
 4003070:	deffff04 	addi	sp,sp,-4
 4003074:	00802184 	movi	r2,134
 4003078:	dfc00015 	stw	ra,0(sp)
 400307c:	200b883a 	mov	r5,r4
 4003080:	11008e36 	bltu	r2,r4,40032bc <strerror+0x24c>
 4003084:	2105883a 	add	r2,r4,r4
 4003088:	1085883a 	add	r2,r2,r2
 400308c:	00c10034 	movhi	r3,1024
 4003090:	18cc2804 	addi	r3,r3,12448
 4003094:	10c5883a 	add	r2,r2,r3
 4003098:	11000017 	ldw	r4,0(r2)
 400309c:	2000683a 	jmp	r4
 40030a0:	040032bc 	xorhi	r16,zero,202
 40030a4:	040032f4 	movhi	r16,203
 40030a8:	04003300 	call	400330 <OSCtxSw_SWITCH_PC+0x4002f0>
 40030ac:	0400330c 	andi	r16,zero,204
 40030b0:	04003318 	cmpnei	r16,zero,204
 40030b4:	04003324 	muli	r16,zero,204
 40030b8:	04003330 	cmpltui	r16,zero,204
 40030bc:	0400333c 	xorhi	r16,zero,204
 40030c0:	04003348 	cmpgei	r16,zero,205
 40030c4:	04003354 	movui	r16,205
 40030c8:	04003360 	cmpeqi	r16,zero,205
 40030cc:	0400336c 	andhi	r16,zero,205
 40030d0:	04003378 	rdprs	r16,zero,205
 40030d4:	04003384 	movi	r16,206
 40030d8:	04003390 	cmplti	r16,zero,206
 40030dc:	0400339c 	xori	r16,zero,206
 40030e0:	040033a8 	cmpgeui	r16,zero,206
 40030e4:	040033b4 	movhi	r16,206
 40030e8:	040033c0 	call	40033c <OSCtxSw_SWITCH_PC+0x4002fc>
 40030ec:	040033cc 	andi	r16,zero,207
 40030f0:	040033d8 	cmpnei	r16,zero,207
 40030f4:	040033e4 	muli	r16,zero,207
 40030f8:	040033f0 	cmpltui	r16,zero,207
 40030fc:	040033fc 	xorhi	r16,zero,207
 4003100:	04003408 	cmpgei	r16,zero,208
 4003104:	04003414 	movui	r16,208
 4003108:	04003420 	cmpeqi	r16,zero,208
 400310c:	0400342c 	andhi	r16,zero,208
 4003110:	04003438 	rdprs	r16,zero,208
 4003114:	04003444 	movi	r16,209
 4003118:	04003450 	cmplti	r16,zero,209
 400311c:	0400345c 	xori	r16,zero,209
 4003120:	04003468 	cmpgeui	r16,zero,209
 4003124:	04003474 	movhi	r16,209
 4003128:	04003480 	call	400348 <OSCtxSw_SWITCH_PC+0x400308>
 400312c:	0400348c 	andi	r16,zero,210
 4003130:	04003498 	cmpnei	r16,zero,210
 4003134:	040032bc 	xorhi	r16,zero,202
 4003138:	040032bc 	xorhi	r16,zero,202
 400313c:	040032bc 	xorhi	r16,zero,202
 4003140:	040032bc 	xorhi	r16,zero,202
 4003144:	040032bc 	xorhi	r16,zero,202
 4003148:	040032bc 	xorhi	r16,zero,202
 400314c:	040032bc 	xorhi	r16,zero,202
 4003150:	040032bc 	xorhi	r16,zero,202
 4003154:	040034a4 	muli	r16,zero,210
 4003158:	040034b0 	cmpltui	r16,zero,210
 400315c:	040032bc 	xorhi	r16,zero,202
 4003160:	040032bc 	xorhi	r16,zero,202
 4003164:	040032bc 	xorhi	r16,zero,202
 4003168:	040032bc 	xorhi	r16,zero,202
 400316c:	040032bc 	xorhi	r16,zero,202
 4003170:	040032bc 	xorhi	r16,zero,202
 4003174:	040032bc 	xorhi	r16,zero,202
 4003178:	040032bc 	xorhi	r16,zero,202
 400317c:	040032bc 	xorhi	r16,zero,202
 4003180:	040032bc 	xorhi	r16,zero,202
 4003184:	040032bc 	xorhi	r16,zero,202
 4003188:	040032bc 	xorhi	r16,zero,202
 400318c:	040032bc 	xorhi	r16,zero,202
 4003190:	040034bc 	xorhi	r16,zero,210
 4003194:	040032bc 	xorhi	r16,zero,202
 4003198:	040034c8 	cmpgei	r16,zero,211
 400319c:	040034d4 	movui	r16,211
 40031a0:	040034e0 	cmpeqi	r16,zero,211
 40031a4:	040034ec 	andhi	r16,zero,211
 40031a8:	040034f8 	rdprs	r16,zero,211
 40031ac:	04003504 	movi	r16,212
 40031b0:	04003510 	cmplti	r16,zero,212
 40031b4:	0400351c 	xori	r16,zero,212
 40031b8:	04003528 	cmpgeui	r16,zero,212
 40031bc:	04003534 	movhi	r16,212
 40031c0:	040032bc 	xorhi	r16,zero,202
 40031c4:	040032bc 	xorhi	r16,zero,202
 40031c8:	04003540 	call	400354 <OSCtxSw_SWITCH_PC+0x400314>
 40031cc:	040032bc 	xorhi	r16,zero,202
 40031d0:	040032bc 	xorhi	r16,zero,202
 40031d4:	0400354c 	andi	r16,zero,213
 40031d8:	040032bc 	xorhi	r16,zero,202
 40031dc:	040032bc 	xorhi	r16,zero,202
 40031e0:	040032bc 	xorhi	r16,zero,202
 40031e4:	040032bc 	xorhi	r16,zero,202
 40031e8:	040032bc 	xorhi	r16,zero,202
 40031ec:	04003558 	cmpnei	r16,zero,213
 40031f0:	04003564 	muli	r16,zero,213
 40031f4:	04003570 	cmpltui	r16,zero,213
 40031f8:	0400357c 	xorhi	r16,zero,213
 40031fc:	04003588 	cmpgei	r16,zero,214
 4003200:	04003594 	movui	r16,214
 4003204:	040035a0 	cmpeqi	r16,zero,214
 4003208:	040035ac 	andhi	r16,zero,214
 400320c:	040035b8 	rdprs	r16,zero,214
 4003210:	040035c4 	movi	r16,215
 4003214:	040032bc 	xorhi	r16,zero,202
 4003218:	040032bc 	xorhi	r16,zero,202
 400321c:	040035d0 	cmplti	r16,zero,215
 4003220:	040032bc 	xorhi	r16,zero,202
 4003224:	040032bc 	xorhi	r16,zero,202
 4003228:	040032bc 	xorhi	r16,zero,202
 400322c:	040032bc 	xorhi	r16,zero,202
 4003230:	040032bc 	xorhi	r16,zero,202
 4003234:	040032bc 	xorhi	r16,zero,202
 4003238:	040032bc 	xorhi	r16,zero,202
 400323c:	040032bc 	xorhi	r16,zero,202
 4003240:	040032bc 	xorhi	r16,zero,202
 4003244:	040035dc 	xori	r16,zero,215
 4003248:	040035e8 	cmpgeui	r16,zero,215
 400324c:	040035f4 	movhi	r16,215
 4003250:	04003600 	call	400360 <OSCtxSw_SWITCH_PC+0x400320>
 4003254:	0400360c 	andi	r16,zero,216
 4003258:	04003618 	cmpnei	r16,zero,216
 400325c:	04003624 	muli	r16,zero,216
 4003260:	04003630 	cmpltui	r16,zero,216
 4003264:	0400363c 	xorhi	r16,zero,216
 4003268:	04003648 	cmpgei	r16,zero,217
 400326c:	04003654 	movui	r16,217
 4003270:	04003660 	cmpeqi	r16,zero,217
 4003274:	0400366c 	andhi	r16,zero,217
 4003278:	04003678 	rdprs	r16,zero,217
 400327c:	04003684 	movi	r16,218
 4003280:	04003690 	cmplti	r16,zero,218
 4003284:	0400369c 	xori	r16,zero,218
 4003288:	040036a8 	cmpgeui	r16,zero,218
 400328c:	040036b4 	movhi	r16,218
 4003290:	040036c0 	call	40036c <OSCtxSw_SWITCH_PC+0x40032c>
 4003294:	040032bc 	xorhi	r16,zero,202
 4003298:	040032bc 	xorhi	r16,zero,202
 400329c:	040036cc 	andi	r16,zero,219
 40032a0:	040036d8 	cmpnei	r16,zero,219
 40032a4:	040032bc 	xorhi	r16,zero,202
 40032a8:	040032bc 	xorhi	r16,zero,202
 40032ac:	040032bc 	xorhi	r16,zero,202
 40032b0:	040032bc 	xorhi	r16,zero,202
 40032b4:	040032bc 	xorhi	r16,zero,202
 40032b8:	040032e8 	cmpgeui	r16,zero,203
 40032bc:	2809883a 	mov	r4,r5
 40032c0:	40047a80 	call	40047a8 <_user_strerror>
 40032c4:	10000326 	beq	r2,zero,40032d4 <strerror+0x264>
 40032c8:	dfc00017 	ldw	ra,0(sp)
 40032cc:	dec00104 	addi	sp,sp,4
 40032d0:	f800283a 	ret
 40032d4:	008100f4 	movhi	r2,1027
 40032d8:	108ce204 	addi	r2,r2,13192
 40032dc:	dfc00017 	ldw	ra,0(sp)
 40032e0:	dec00104 	addi	sp,sp,4
 40032e4:	f800283a 	ret
 40032e8:	008100f4 	movhi	r2,1027
 40032ec:	10891604 	addi	r2,r2,9304
 40032f0:	003ff506 	br	40032c8 <strerror+0x258>
 40032f4:	008100f4 	movhi	r2,1027
 40032f8:	10886604 	addi	r2,r2,8600
 40032fc:	003ff206 	br	40032c8 <strerror+0x258>
 4003300:	008100f4 	movhi	r2,1027
 4003304:	10886904 	addi	r2,r2,8612
 4003308:	003fef06 	br	40032c8 <strerror+0x258>
 400330c:	008100f4 	movhi	r2,1027
 4003310:	10887004 	addi	r2,r2,8640
 4003314:	003fec06 	br	40032c8 <strerror+0x258>
 4003318:	008100f4 	movhi	r2,1027
 400331c:	10887404 	addi	r2,r2,8656
 4003320:	003fe906 	br	40032c8 <strerror+0x258>
 4003324:	008100f4 	movhi	r2,1027
 4003328:	10887a04 	addi	r2,r2,8680
 400332c:	003fe606 	br	40032c8 <strerror+0x258>
 4003330:	008100f4 	movhi	r2,1027
 4003334:	10887d04 	addi	r2,r2,8692
 4003338:	003fe306 	br	40032c8 <strerror+0x258>
 400333c:	008100f4 	movhi	r2,1027
 4003340:	10888404 	addi	r2,r2,8720
 4003344:	003fe006 	br	40032c8 <strerror+0x258>
 4003348:	008100f4 	movhi	r2,1027
 400334c:	10888904 	addi	r2,r2,8740
 4003350:	003fdd06 	br	40032c8 <strerror+0x258>
 4003354:	008100f4 	movhi	r2,1027
 4003358:	10889504 	addi	r2,r2,8788
 400335c:	003fda06 	br	40032c8 <strerror+0x258>
 4003360:	008100f4 	movhi	r2,1027
 4003364:	10889904 	addi	r2,r2,8804
 4003368:	003fd706 	br	40032c8 <strerror+0x258>
 400336c:	008100f4 	movhi	r2,1027
 4003370:	1088a404 	addi	r2,r2,8848
 4003374:	003fd406 	br	40032c8 <strerror+0x258>
 4003378:	008100f4 	movhi	r2,1027
 400337c:	1088a904 	addi	r2,r2,8868
 4003380:	003fd106 	br	40032c8 <strerror+0x258>
 4003384:	008100f4 	movhi	r2,1027
 4003388:	1088ae04 	addi	r2,r2,8888
 400338c:	003fce06 	br	40032c8 <strerror+0x258>
 4003390:	008100f4 	movhi	r2,1027
 4003394:	1088b304 	addi	r2,r2,8908
 4003398:	003fcb06 	br	40032c8 <strerror+0x258>
 400339c:	008100f4 	movhi	r2,1027
 40033a0:	1088b604 	addi	r2,r2,8920
 40033a4:	003fc806 	br	40032c8 <strerror+0x258>
 40033a8:	008100f4 	movhi	r2,1027
 40033ac:	1088bc04 	addi	r2,r2,8944
 40033b0:	003fc506 	br	40032c8 <strerror+0x258>
 40033b4:	008100f4 	movhi	r2,1027
 40033b8:	1088c204 	addi	r2,r2,8968
 40033bc:	003fc206 	br	40032c8 <strerror+0x258>
 40033c0:	008100f4 	movhi	r2,1027
 40033c4:	1088c504 	addi	r2,r2,8980
 40033c8:	003fbf06 	br	40032c8 <strerror+0x258>
 40033cc:	008100f4 	movhi	r2,1027
 40033d0:	1088ca04 	addi	r2,r2,9000
 40033d4:	003fbc06 	br	40032c8 <strerror+0x258>
 40033d8:	008100f4 	movhi	r2,1027
 40033dc:	1088ce04 	addi	r2,r2,9016
 40033e0:	003fb906 	br	40032c8 <strerror+0x258>
 40033e4:	008100f4 	movhi	r2,1027
 40033e8:	1088de04 	addi	r2,r2,9080
 40033ec:	003fb606 	br	40032c8 <strerror+0x258>
 40033f0:	008100f4 	movhi	r2,1027
 40033f4:	1088e204 	addi	r2,r2,9096
 40033f8:	003fb306 	br	40032c8 <strerror+0x258>
 40033fc:	008100f4 	movhi	r2,1027
 4003400:	1088f004 	addi	r2,r2,9152
 4003404:	003fb006 	br	40032c8 <strerror+0x258>
 4003408:	008100f4 	movhi	r2,1027
 400340c:	1088f804 	addi	r2,r2,9184
 4003410:	003fad06 	br	40032c8 <strerror+0x258>
 4003414:	008100f4 	movhi	r2,1027
 4003418:	1088fd04 	addi	r2,r2,9204
 400341c:	003faa06 	br	40032c8 <strerror+0x258>
 4003420:	008100f4 	movhi	r2,1027
 4003424:	10890304 	addi	r2,r2,9228
 4003428:	003fa706 	br	40032c8 <strerror+0x258>
 400342c:	008100f4 	movhi	r2,1027
 4003430:	10890704 	addi	r2,r2,9244
 4003434:	003fa406 	br	40032c8 <strerror+0x258>
 4003438:	008100f4 	movhi	r2,1027
 400343c:	10891004 	addi	r2,r2,9280
 4003440:	003fa106 	br	40032c8 <strerror+0x258>
 4003444:	008100f4 	movhi	r2,1027
 4003448:	10891a04 	addi	r2,r2,9320
 400344c:	003f9e06 	br	40032c8 <strerror+0x258>
 4003450:	008100f4 	movhi	r2,1027
 4003454:	10891e04 	addi	r2,r2,9336
 4003458:	003f9b06 	br	40032c8 <strerror+0x258>
 400345c:	008100f4 	movhi	r2,1027
 4003460:	10892404 	addi	r2,r2,9360
 4003464:	003f9806 	br	40032c8 <strerror+0x258>
 4003468:	008100f4 	movhi	r2,1027
 400346c:	10892804 	addi	r2,r2,9376
 4003470:	003f9506 	br	40032c8 <strerror+0x258>
 4003474:	008100f4 	movhi	r2,1027
 4003478:	10892b04 	addi	r2,r2,9388
 400347c:	003f9206 	br	40032c8 <strerror+0x258>
 4003480:	008100f4 	movhi	r2,1027
 4003484:	10892f04 	addi	r2,r2,9404
 4003488:	003f8f06 	br	40032c8 <strerror+0x258>
 400348c:	008100f4 	movhi	r2,1027
 4003490:	10893404 	addi	r2,r2,9424
 4003494:	003f8c06 	br	40032c8 <strerror+0x258>
 4003498:	008100f4 	movhi	r2,1027
 400349c:	10893b04 	addi	r2,r2,9452
 40034a0:	003f8906 	br	40032c8 <strerror+0x258>
 40034a4:	008100f4 	movhi	r2,1027
 40034a8:	10894004 	addi	r2,r2,9472
 40034ac:	003f8606 	br	40032c8 <strerror+0x258>
 40034b0:	008100f4 	movhi	r2,1027
 40034b4:	10894904 	addi	r2,r2,9508
 40034b8:	003f8306 	br	40032c8 <strerror+0x258>
 40034bc:	008100f4 	movhi	r2,1027
 40034c0:	10894b04 	addi	r2,r2,9516
 40034c4:	003f8006 	br	40032c8 <strerror+0x258>
 40034c8:	008100f4 	movhi	r2,1027
 40034cc:	10894f04 	addi	r2,r2,9532
 40034d0:	003f7d06 	br	40032c8 <strerror+0x258>
 40034d4:	008100f4 	movhi	r2,1027
 40034d8:	10895504 	addi	r2,r2,9556
 40034dc:	003f7a06 	br	40032c8 <strerror+0x258>
 40034e0:	008100f4 	movhi	r2,1027
 40034e4:	10895a04 	addi	r2,r2,9576
 40034e8:	003f7706 	br	40032c8 <strerror+0x258>
 40034ec:	008100f4 	movhi	r2,1027
 40034f0:	10896204 	addi	r2,r2,9608
 40034f4:	003f7406 	br	40032c8 <strerror+0x258>
 40034f8:	008100f4 	movhi	r2,1027
 40034fc:	10896504 	addi	r2,r2,9620
 4003500:	003f7106 	br	40032c8 <strerror+0x258>
 4003504:	008100f4 	movhi	r2,1027
 4003508:	10896a04 	addi	r2,r2,9640
 400350c:	003f6e06 	br	40032c8 <strerror+0x258>
 4003510:	008100f4 	movhi	r2,1027
 4003514:	10897004 	addi	r2,r2,9664
 4003518:	003f6b06 	br	40032c8 <strerror+0x258>
 400351c:	008100f4 	movhi	r2,1027
 4003520:	10897404 	addi	r2,r2,9680
 4003524:	003f6806 	br	40032c8 <strerror+0x258>
 4003528:	008100f4 	movhi	r2,1027
 400352c:	10897804 	addi	r2,r2,9696
 4003530:	003f6506 	br	40032c8 <strerror+0x258>
 4003534:	008100f4 	movhi	r2,1027
 4003538:	10897d04 	addi	r2,r2,9716
 400353c:	003f6206 	br	40032c8 <strerror+0x258>
 4003540:	008100f4 	movhi	r2,1027
 4003544:	10898604 	addi	r2,r2,9752
 4003548:	003f5f06 	br	40032c8 <strerror+0x258>
 400354c:	008100f4 	movhi	r2,1027
 4003550:	10898b04 	addi	r2,r2,9772
 4003554:	003f5c06 	br	40032c8 <strerror+0x258>
 4003558:	008100f4 	movhi	r2,1027
 400355c:	10898e04 	addi	r2,r2,9784
 4003560:	003f5906 	br	40032c8 <strerror+0x258>
 4003564:	008100f4 	movhi	r2,1027
 4003568:	10899804 	addi	r2,r2,9824
 400356c:	003f5606 	br	40032c8 <strerror+0x258>
 4003570:	008100f4 	movhi	r2,1027
 4003574:	1089a204 	addi	r2,r2,9864
 4003578:	003f5306 	br	40032c8 <strerror+0x258>
 400357c:	008100f4 	movhi	r2,1027
 4003580:	1089aa04 	addi	r2,r2,9896
 4003584:	003f5006 	br	40032c8 <strerror+0x258>
 4003588:	008100f4 	movhi	r2,1027
 400358c:	1089ba04 	addi	r2,r2,9960
 4003590:	003f4d06 	br	40032c8 <strerror+0x258>
 4003594:	008100f4 	movhi	r2,1027
 4003598:	1089c404 	addi	r2,r2,10000
 400359c:	003f4a06 	br	40032c8 <strerror+0x258>
 40035a0:	008100f4 	movhi	r2,1027
 40035a4:	1089cb04 	addi	r2,r2,10028
 40035a8:	003f4706 	br	40032c8 <strerror+0x258>
 40035ac:	008100f4 	movhi	r2,1027
 40035b0:	1089cf04 	addi	r2,r2,10044
 40035b4:	003f4406 	br	40032c8 <strerror+0x258>
 40035b8:	008100f4 	movhi	r2,1027
 40035bc:	1089d404 	addi	r2,r2,10064
 40035c0:	003f4106 	br	40032c8 <strerror+0x258>
 40035c4:	008100f4 	movhi	r2,1027
 40035c8:	1089db04 	addi	r2,r2,10092
 40035cc:	003f3e06 	br	40032c8 <strerror+0x258>
 40035d0:	008100f4 	movhi	r2,1027
 40035d4:	108a3b04 	addi	r2,r2,10476
 40035d8:	003f3b06 	br	40032c8 <strerror+0x258>
 40035dc:	008100f4 	movhi	r2,1027
 40035e0:	1089e104 	addi	r2,r2,10116
 40035e4:	003f3806 	br	40032c8 <strerror+0x258>
 40035e8:	008100f4 	movhi	r2,1027
 40035ec:	1089e804 	addi	r2,r2,10144
 40035f0:	003f3506 	br	40032c8 <strerror+0x258>
 40035f4:	008100f4 	movhi	r2,1027
 40035f8:	1089f404 	addi	r2,r2,10192
 40035fc:	003f3206 	br	40032c8 <strerror+0x258>
 4003600:	008100f4 	movhi	r2,1027
 4003604:	1089fc04 	addi	r2,r2,10224
 4003608:	003f2f06 	br	40032c8 <strerror+0x258>
 400360c:	008100f4 	movhi	r2,1027
 4003610:	108a0404 	addi	r2,r2,10256
 4003614:	003f2c06 	br	40032c8 <strerror+0x258>
 4003618:	008100f4 	movhi	r2,1027
 400361c:	108a0a04 	addi	r2,r2,10280
 4003620:	003f2906 	br	40032c8 <strerror+0x258>
 4003624:	008100f4 	movhi	r2,1027
 4003628:	108a1304 	addi	r2,r2,10316
 400362c:	003f2606 	br	40032c8 <strerror+0x258>
 4003630:	008100f4 	movhi	r2,1027
 4003634:	108a1804 	addi	r2,r2,10336
 4003638:	003f2306 	br	40032c8 <strerror+0x258>
 400363c:	008100f4 	movhi	r2,1027
 4003640:	108a1e04 	addi	r2,r2,10360
 4003644:	003f2006 	br	40032c8 <strerror+0x258>
 4003648:	008100f4 	movhi	r2,1027
 400364c:	10894304 	addi	r2,r2,9484
 4003650:	003f1d06 	br	40032c8 <strerror+0x258>
 4003654:	008100f4 	movhi	r2,1027
 4003658:	1088e704 	addi	r2,r2,9116
 400365c:	003f1a06 	br	40032c8 <strerror+0x258>
 4003660:	008100f4 	movhi	r2,1027
 4003664:	10886004 	addi	r2,r2,8576
 4003668:	003f1706 	br	40032c8 <strerror+0x258>
 400366c:	008100f4 	movhi	r2,1027
 4003670:	1088d204 	addi	r2,r2,9032
 4003674:	003f1406 	br	40032c8 <strerror+0x258>
 4003678:	008100f4 	movhi	r2,1027
 400367c:	10890b04 	addi	r2,r2,9260
 4003680:	003f1106 	br	40032c8 <strerror+0x258>
 4003684:	008100f4 	movhi	r2,1027
 4003688:	1088d604 	addi	r2,r2,9048
 400368c:	003f0e06 	br	40032c8 <strerror+0x258>
 4003690:	008100f4 	movhi	r2,1027
 4003694:	10888e04 	addi	r2,r2,8760
 4003698:	003f0b06 	br	40032c8 <strerror+0x258>
 400369c:	008100f4 	movhi	r2,1027
 40036a0:	10889c04 	addi	r2,r2,8816
 40036a4:	003f0806 	br	40032c8 <strerror+0x258>
 40036a8:	008100f4 	movhi	r2,1027
 40036ac:	10885b04 	addi	r2,r2,8556
 40036b0:	003f0506 	br	40032c8 <strerror+0x258>
 40036b4:	008100f4 	movhi	r2,1027
 40036b8:	10898104 	addi	r2,r2,9732
 40036bc:	003f0206 	br	40032c8 <strerror+0x258>
 40036c0:	008100f4 	movhi	r2,1027
 40036c4:	108a2d04 	addi	r2,r2,10420
 40036c8:	003eff06 	br	40032c8 <strerror+0x258>
 40036cc:	008100f4 	movhi	r2,1027
 40036d0:	108a3404 	addi	r2,r2,10448
 40036d4:	003efc06 	br	40032c8 <strerror+0x258>
 40036d8:	008100f4 	movhi	r2,1027
 40036dc:	108a2704 	addi	r2,r2,10396
 40036e0:	003ef906 	br	40032c8 <strerror+0x258>

040036e4 <iso_year_adjust>:
 40036e4:	defffc04 	addi	sp,sp,-16
 40036e8:	dc000015 	stw	r16,0(sp)
 40036ec:	24000517 	ldw	r16,20(r4)
 40036f0:	dc800215 	stw	r18,8(sp)
 40036f4:	dc400115 	stw	r17,4(sp)
 40036f8:	808000cc 	andi	r2,r16,3
 40036fc:	dfc00315 	stw	ra,12(sp)
 4003700:	2023883a 	mov	r17,r4
 4003704:	8024803a 	cmplt	r18,r16,zero
 4003708:	10001e1e 	bne	r2,zero,4003784 <iso_year_adjust+0xa0>
 400370c:	9000541e 	bne	r18,zero,4003860 <iso_year_adjust+0x17c>
 4003710:	013fe704 	movi	r4,-100
 4003714:	2409883a 	add	r4,r4,r16
 4003718:	01401904 	movi	r5,100
 400371c:	400d7cc0 	call	400d7cc <__modsi3>
 4003720:	10001826 	beq	r2,zero,4003784 <iso_year_adjust+0xa0>
 4003724:	88800717 	ldw	r2,28(r17)
 4003728:	88c00617 	ldw	r3,24(r17)
 400372c:	01000044 	movi	r4,1
 4003730:	1004913a 	slli	r2,r2,4
 4003734:	18c7883a 	add	r3,r3,r3
 4003738:	10c5883a 	add	r2,r2,r3
 400373c:	2089883a 	add	r4,r4,r2
 4003740:	00c00844 	movi	r3,33
 4003744:	19001d0e 	bge	r3,r4,40037bc <iso_year_adjust+0xd8>
 4003748:	0085b184 	movi	r2,5830
 400374c:	1100240e 	bge	r2,r4,40037e0 <iso_year_adjust+0xfc>
 4003750:	0085b544 	movi	r2,5845
 4003754:	20802a26 	beq	r4,r2,4003800 <iso_year_adjust+0x11c>
 4003758:	0085b5c4 	movi	r2,5847
 400375c:	20802826 	beq	r4,r2,4003800 <iso_year_adjust+0x11c>
 4003760:	0085b4c4 	movi	r2,5843
 4003764:	20802626 	beq	r4,r2,4003800 <iso_year_adjust+0x11c>
 4003768:	0005883a 	mov	r2,zero
 400376c:	dfc00317 	ldw	ra,12(sp)
 4003770:	dc800217 	ldw	r18,8(sp)
 4003774:	dc400117 	ldw	r17,4(sp)
 4003778:	dc000017 	ldw	r16,0(sp)
 400377c:	dec00404 	addi	sp,sp,16
 4003780:	f800283a 	ret
 4003784:	9000381e 	bne	r18,zero,4003868 <iso_year_adjust+0x184>
 4003788:	013fe704 	movi	r4,-100
 400378c:	2409883a 	add	r4,r4,r16
 4003790:	01406404 	movi	r5,400
 4003794:	400d7cc0 	call	400d7cc <__modsi3>
 4003798:	1009003a 	cmpeq	r4,r2,zero
 400379c:	88800717 	ldw	r2,28(r17)
 40037a0:	88c00617 	ldw	r3,24(r17)
 40037a4:	1004913a 	slli	r2,r2,4
 40037a8:	18c7883a 	add	r3,r3,r3
 40037ac:	10c5883a 	add	r2,r2,r3
 40037b0:	2089883a 	add	r4,r4,r2
 40037b4:	00c00844 	movi	r3,33
 40037b8:	193fe316 	blt	r3,r4,4003748 <iso_year_adjust+0x64>
 40037bc:	00800804 	movi	r2,32
 40037c0:	20801616 	blt	r4,r2,400381c <iso_year_adjust+0x138>
 40037c4:	00bfffc4 	movi	r2,-1
 40037c8:	dfc00317 	ldw	ra,12(sp)
 40037cc:	dc800217 	ldw	r18,8(sp)
 40037d0:	dc400117 	ldw	r17,4(sp)
 40037d4:	dc000017 	ldw	r16,0(sp)
 40037d8:	dec00404 	addi	sp,sp,16
 40037dc:	f800283a 	ret
 40037e0:	0085b084 	movi	r2,5826
 40037e4:	2080060e 	bge	r4,r2,4003800 <iso_year_adjust+0x11c>
 40037e8:	0085a884 	movi	r2,5794
 40037ec:	20800426 	beq	r4,r2,4003800 <iso_year_adjust+0x11c>
 40037f0:	20bfdd16 	blt	r4,r2,4003768 <iso_year_adjust+0x84>
 40037f4:	20fa5384 	addi	r3,r4,-5810
 40037f8:	00800084 	movi	r2,2
 40037fc:	10ffda36 	bltu	r2,r3,4003768 <iso_year_adjust+0x84>
 4003800:	00800044 	movi	r2,1
 4003804:	dfc00317 	ldw	ra,12(sp)
 4003808:	dc800217 	ldw	r18,8(sp)
 400380c:	dc400117 	ldw	r17,4(sp)
 4003810:	dc000017 	ldw	r16,0(sp)
 4003814:	dec00404 	addi	sp,sp,16
 4003818:	f800283a 	ret
 400381c:	00800344 	movi	r2,13
 4003820:	1100090e 	bge	r2,r4,4003848 <iso_year_adjust+0x164>
 4003824:	00800404 	movi	r2,16
 4003828:	20bfcf16 	blt	r4,r2,4003768 <iso_year_adjust+0x84>
 400382c:	00800444 	movi	r2,17
 4003830:	113fe40e 	bge	r2,r4,40037c4 <iso_year_adjust+0xe0>
 4003834:	20fff904 	addi	r3,r4,-28
 4003838:	00800044 	movi	r2,1
 400383c:	10ffe12e 	bgeu	r2,r3,40037c4 <iso_year_adjust+0xe0>
 4003840:	0005883a 	mov	r2,zero
 4003844:	003fc906 	br	400376c <iso_year_adjust+0x88>
 4003848:	00800284 	movi	r2,10
 400384c:	20bfdd0e 	bge	r4,r2,40037c4 <iso_year_adjust+0xe0>
 4003850:	00800044 	movi	r2,1
 4003854:	113fdb2e 	bgeu	r2,r4,40037c4 <iso_year_adjust+0xe0>
 4003858:	0005883a 	mov	r2,zero
 400385c:	003fc306 	br	400376c <iso_year_adjust+0x88>
 4003860:	0101db04 	movi	r4,1900
 4003864:	003fab06 	br	4003714 <iso_year_adjust+0x30>
 4003868:	0101db04 	movi	r4,1900
 400386c:	003fc706 	br	400378c <iso_year_adjust+0xa8>

04003870 <strftime>:
 4003870:	defff304 	addi	sp,sp,-52
 4003874:	ddc00a15 	stw	r23,40(sp)
 4003878:	dd000715 	stw	r20,28(sp)
 400387c:	dc800515 	stw	r18,20(sp)
 4003880:	dc000315 	stw	r16,12(sp)
 4003884:	dfc00c15 	stw	ra,48(sp)
 4003888:	df000b15 	stw	fp,44(sp)
 400388c:	dd800915 	stw	r22,36(sp)
 4003890:	dd400815 	stw	r21,32(sp)
 4003894:	dcc00615 	stw	r19,24(sp)
 4003898:	dc400415 	stw	r17,16(sp)
 400389c:	2025883a 	mov	r18,r4
 40038a0:	2829883a 	mov	r20,r5
 40038a4:	382f883a 	mov	r23,r7
 40038a8:	0021883a 	mov	r16,zero
 40038ac:	31000003 	ldbu	r4,0(r6)
 40038b0:	20c03fcc 	andi	r3,r4,255
 40038b4:	18c0201c 	xori	r3,r3,128
 40038b8:	18ffe004 	addi	r3,r3,-128
 40038bc:	18000d26 	beq	r3,zero,40038f4 <strftime+0x84>
 40038c0:	00800944 	movi	r2,37
 40038c4:	18800f26 	beq	r3,r2,4003904 <strftime+0x94>
 40038c8:	a0bfffc4 	addi	r2,r20,-1
 40038cc:	8080c82e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 40038d0:	9405883a 	add	r2,r18,r16
 40038d4:	11000005 	stb	r4,0(r2)
 40038d8:	31800044 	addi	r6,r6,1
 40038dc:	31000003 	ldbu	r4,0(r6)
 40038e0:	84000044 	addi	r16,r16,1
 40038e4:	20c03fcc 	andi	r3,r4,255
 40038e8:	18c0201c 	xori	r3,r3,128
 40038ec:	18ffe004 	addi	r3,r3,-128
 40038f0:	183ff31e 	bne	r3,zero,40038c0 <strftime+0x50>
 40038f4:	a000bf26 	beq	r20,zero,4003bf4 <strftime+0x384>
 40038f8:	8485883a 	add	r2,r16,r18
 40038fc:	10000005 	stb	zero,0(r2)
 4003900:	0000bc06 	br	4003bf4 <strftime+0x384>
 4003904:	31400043 	ldbu	r5,1(r6)
 4003908:	00801144 	movi	r2,69
 400390c:	35800044 	addi	r22,r6,1
 4003910:	28c03fcc 	andi	r3,r5,255
 4003914:	18c0201c 	xori	r3,r3,128
 4003918:	18ffe004 	addi	r3,r3,-128
 400391c:	18808a26 	beq	r3,r2,4003b48 <strftime+0x2d8>
 4003920:	008013c4 	movi	r2,79
 4003924:	18808826 	beq	r3,r2,4003b48 <strftime+0x2d8>
 4003928:	28bff6c4 	addi	r2,r5,-37
 400392c:	10803fcc 	andi	r2,r2,255
 4003930:	00c01544 	movi	r3,85
 4003934:	18808036 	bltu	r3,r2,4003b38 <strftime+0x2c8>
 4003938:	1085883a 	add	r2,r2,r2
 400393c:	1085883a 	add	r2,r2,r2
 4003940:	00c10034 	movhi	r3,1024
 4003944:	18ce5504 	addi	r3,r3,14676
 4003948:	10c5883a 	add	r2,r2,r3
 400394c:	11000017 	ldw	r4,0(r2)
 4003950:	2000683a 	jmp	r4
 4003954:	04003c28 	cmpgeui	r16,zero,240
 4003958:	04003b38 	rdprs	r16,zero,236
 400395c:	04003b38 	rdprs	r16,zero,236
 4003960:	04003b38 	rdprs	r16,zero,236
 4003964:	04003b38 	rdprs	r16,zero,236
 4003968:	04003b38 	rdprs	r16,zero,236
 400396c:	04003b38 	rdprs	r16,zero,236
 4003970:	04003b38 	rdprs	r16,zero,236
 4003974:	04003b38 	rdprs	r16,zero,236
 4003978:	04003b38 	rdprs	r16,zero,236
 400397c:	04003b38 	rdprs	r16,zero,236
 4003980:	04003b38 	rdprs	r16,zero,236
 4003984:	04003b38 	rdprs	r16,zero,236
 4003988:	04003b38 	rdprs	r16,zero,236
 400398c:	04003b38 	rdprs	r16,zero,236
 4003990:	04003b38 	rdprs	r16,zero,236
 4003994:	04003b38 	rdprs	r16,zero,236
 4003998:	04003b38 	rdprs	r16,zero,236
 400399c:	04003b38 	rdprs	r16,zero,236
 40039a0:	04003b38 	rdprs	r16,zero,236
 40039a4:	04003b38 	rdprs	r16,zero,236
 40039a8:	04003b38 	rdprs	r16,zero,236
 40039ac:	04003b38 	rdprs	r16,zero,236
 40039b0:	04003b38 	rdprs	r16,zero,236
 40039b4:	04003b38 	rdprs	r16,zero,236
 40039b8:	04003b38 	rdprs	r16,zero,236
 40039bc:	04003b38 	rdprs	r16,zero,236
 40039c0:	04003b38 	rdprs	r16,zero,236
 40039c4:	04003c4c 	andi	r16,zero,241
 40039c8:	04003cd4 	movui	r16,243
 40039cc:	04003d5c 	xori	r16,zero,245
 40039d0:	04004288 	cmpgei	r16,zero,266
 40039d4:	04003b38 	rdprs	r16,zero,236
 40039d8:	04003dbc 	xorhi	r16,zero,246
 40039dc:	04003b54 	movui	r16,237
 40039e0:	04004434 	movhi	r16,272
 40039e4:	04004310 	cmplti	r16,zero,268
 40039e8:	04003b38 	rdprs	r16,zero,236
 40039ec:	04003b38 	rdprs	r16,zero,236
 40039f0:	04003b38 	rdprs	r16,zero,236
 40039f4:	04003de8 	cmpgeui	r16,zero,247
 40039f8:	04003b38 	rdprs	r16,zero,236
 40039fc:	04003b38 	rdprs	r16,zero,236
 4003a00:	04003b38 	rdprs	r16,zero,236
 4003a04:	04003b38 	rdprs	r16,zero,236
 4003a08:	04003e88 	cmpgei	r16,zero,250
 4003a0c:	04003e14 	movui	r16,248
 4003a10:	04003f04 	movi	r16,252
 4003a14:	04003e40 	call	4003e4 <OSCtxSw_SWITCH_PC+0x4003a4>
 4003a18:	04003eb8 	rdprs	r16,zero,250
 4003a1c:	04003ee8 	cmpgeui	r16,zero,251
 4003a20:	04003f04 	movi	r16,252
 4003a24:	04003f3c 	xorhi	r16,zero,252
 4003a28:	04003f60 	cmpeqi	r16,zero,253
 4003a2c:	04003b38 	rdprs	r16,zero,236
 4003a30:	04003b38 	rdprs	r16,zero,236
 4003a34:	04003b38 	rdprs	r16,zero,236
 4003a38:	04003b38 	rdprs	r16,zero,236
 4003a3c:	04003b38 	rdprs	r16,zero,236
 4003a40:	04003b38 	rdprs	r16,zero,236
 4003a44:	04003ff4 	movhi	r16,255
 4003a48:	0400410c 	andi	r16,zero,260
 4003a4c:	0400404c 	andi	r16,zero,257
 4003a50:	04004070 	cmpltui	r16,zero,257
 4003a54:	04004070 	cmpltui	r16,zero,257
 4003a58:	04003b38 	rdprs	r16,zero,236
 4003a5c:	040040b0 	cmpltui	r16,zero,258
 4003a60:	0400410c 	andi	r16,zero,260
 4003a64:	04003b38 	rdprs	r16,zero,236
 4003a68:	04004404 	movi	r16,272
 4003a6c:	04004434 	movhi	r16,272
 4003a70:	04004310 	cmplti	r16,zero,268
 4003a74:	04004370 	cmpltui	r16,zero,269
 4003a78:	040043a0 	cmpeqi	r16,zero,270
 4003a7c:	04003b38 	rdprs	r16,zero,236
 4003a80:	040043c4 	movi	r16,271
 4003a84:	04003b38 	rdprs	r16,zero,236
 4003a88:	04004164 	muli	r16,zero,261
 4003a8c:	04003b38 	rdprs	r16,zero,236
 4003a90:	04004210 	cmplti	r16,zero,264
 4003a94:	04004234 	movhi	r16,264
 4003a98:	04003b38 	rdprs	r16,zero,236
 4003a9c:	04004260 	cmpeqi	r16,zero,265
 4003aa0:	04004288 	cmpgei	r16,zero,266
 4003aa4:	040042d4 	movui	r16,267
 4003aa8:	04003aac 	andhi	r16,zero,234
 4003aac:	b8800817 	ldw	r2,32(r23)
 4003ab0:	10002316 	blt	r2,zero,4003b40 <strftime+0x2d0>
 4003ab4:	a0bffec4 	addi	r2,r20,-5
 4003ab8:	80804d2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003abc:	40092e80 	call	40092e8 <__gettzinfo>
 4003ac0:	1023883a 	mov	r17,r2
 4003ac4:	40047a00 	call	40047a0 <__tz_lock>
 4003ac8:	b8800817 	ldw	r2,32(r23)
 4003acc:	0082d80e 	bge	zero,r2,4004630 <strftime+0xdc0>
 4003ad0:	00800f04 	movi	r2,60
 4003ad4:	8885883a 	add	r2,r17,r2
 4003ad8:	14400017 	ldw	r17,0(r2)
 4003adc:	40047a40 	call	40047a4 <__tz_unlock>
 4003ae0:	01400f04 	movi	r5,60
 4003ae4:	0463c83a 	sub	r17,zero,r17
 4003ae8:	8809883a 	mov	r4,r17
 4003aec:	400d76c0 	call	400d76c <__divsi3>
 4003af0:	1009883a 	mov	r4,r2
 4003af4:	40092f40 	call	40092f4 <labs>
 4003af8:	1027883a 	mov	r19,r2
 4003afc:	8809883a 	mov	r4,r17
 4003b00:	01438404 	movi	r5,3600
 4003b04:	400d76c0 	call	400d76c <__divsi3>
 4003b08:	9809883a 	mov	r4,r19
 4003b0c:	01400f04 	movi	r5,60
 4003b10:	942b883a 	add	r21,r18,r16
 4003b14:	1023883a 	mov	r17,r2
 4003b18:	400d7cc0 	call	400d7cc <__modsi3>
 4003b1c:	880d883a 	mov	r6,r17
 4003b20:	a809883a 	mov	r4,r21
 4003b24:	100f883a 	mov	r7,r2
 4003b28:	014100f4 	movhi	r5,1027
 4003b2c:	294a5f04 	addi	r5,r5,10620
 4003b30:	84000144 	addi	r16,r16,5
 4003b34:	400b17c0 	call	400b17c <sprintf>
 4003b38:	b0800007 	ldb	r2,0(r22)
 4003b3c:	103f6d26 	beq	r2,zero,40038f4 <strftime+0x84>
 4003b40:	b1800044 	addi	r6,r22,1
 4003b44:	003f5906 	br	40038ac <strftime+0x3c>
 4003b48:	31400083 	ldbu	r5,2(r6)
 4003b4c:	35800084 	addi	r22,r6,2
 4003b50:	003f7506 	br	4003928 <strftime+0xb8>
 4003b54:	bc400517 	ldw	r17,20(r23)
 4003b58:	b809883a 	mov	r4,r23
 4003b5c:	40036e40 	call	40036e4 <iso_year_adjust>
 4003b60:	1027883a 	mov	r19,r2
 4003b64:	8d7e2510 	cmplti	r21,r17,-1900
 4003b68:	8802c816 	blt	r17,zero,400468c <strftime+0xe1c>
 4003b6c:	8809883a 	mov	r4,r17
 4003b70:	01401904 	movi	r5,100
 4003b74:	400d76c0 	call	400d76c <__divsi3>
 4003b78:	170004c4 	addi	fp,r2,19
 4003b7c:	01401904 	movi	r5,100
 4003b80:	8809883a 	mov	r4,r17
 4003b84:	400d7cc0 	call	400d7cc <__modsi3>
 4003b88:	100b883a 	mov	r5,r2
 4003b8c:	98028616 	blt	r19,zero,40045a8 <strftime+0xd38>
 4003b90:	04c2880e 	bge	zero,r19,40045b4 <strftime+0xd44>
 4003b94:	a808c03a 	cmpne	r4,r21,zero
 4003b98:	2002651e 	bne	r4,zero,4004530 <strftime+0xcc0>
 4003b9c:	02000084 	movi	r8,2
 4003ba0:	2cc7883a 	add	r3,r5,r19
 4003ba4:	00bfffc4 	movi	r2,-1
 4003ba8:	18826726 	beq	r3,r2,4004548 <strftime+0xcd8>
 4003bac:	00801904 	movi	r2,100
 4003bb0:	1880021e 	bne	r3,r2,4003bbc <strftime+0x34c>
 4003bb4:	e7000044 	addi	fp,fp,1
 4003bb8:	0007883a 	mov	r3,zero
 4003bbc:	2002651e 	bne	r4,zero,4004554 <strftime+0xce4>
 4003bc0:	01c100f4 	movhi	r7,1027
 4003bc4:	39cce204 	addi	r7,r7,13192
 4003bc8:	9409883a 	add	r4,r18,r16
 4003bcc:	a40bc83a 	sub	r5,r20,r16
 4003bd0:	018100f4 	movhi	r6,1027
 4003bd4:	318a5104 	addi	r6,r6,10564
 4003bd8:	da000015 	stw	r8,0(sp)
 4003bdc:	df000115 	stw	fp,4(sp)
 4003be0:	d8c00215 	stw	r3,8(sp)
 4003be4:	400b00c0 	call	400b00c <snprintf>
 4003be8:	80a1883a 	add	r16,r16,r2
 4003bec:	853fd236 	bltu	r16,r20,4003b38 <strftime+0x2c8>
 4003bf0:	0021883a 	mov	r16,zero
 4003bf4:	8005883a 	mov	r2,r16
 4003bf8:	dfc00c17 	ldw	ra,48(sp)
 4003bfc:	df000b17 	ldw	fp,44(sp)
 4003c00:	ddc00a17 	ldw	r23,40(sp)
 4003c04:	dd800917 	ldw	r22,36(sp)
 4003c08:	dd400817 	ldw	r21,32(sp)
 4003c0c:	dd000717 	ldw	r20,28(sp)
 4003c10:	dcc00617 	ldw	r19,24(sp)
 4003c14:	dc800517 	ldw	r18,20(sp)
 4003c18:	dc400417 	ldw	r17,16(sp)
 4003c1c:	dc000317 	ldw	r16,12(sp)
 4003c20:	dec00d04 	addi	sp,sp,52
 4003c24:	f800283a 	ret
 4003c28:	a0bfffc4 	addi	r2,r20,-1
 4003c2c:	80bff02e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003c30:	9407883a 	add	r3,r18,r16
 4003c34:	00800944 	movi	r2,37
 4003c38:	18800005 	stb	r2,0(r3)
 4003c3c:	b0800007 	ldb	r2,0(r22)
 4003c40:	84000044 	addi	r16,r16,1
 4003c44:	103fbe1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003c48:	003f2a06 	br	40038f4 <strftime+0x84>
 4003c4c:	b8800617 	ldw	r2,24(r23)
 4003c50:	024100f4 	movhi	r9,1027
 4003c54:	4a4a9b04 	addi	r9,r9,10860
 4003c58:	1089883a 	add	r4,r2,r2
 4003c5c:	2105883a 	add	r2,r4,r4
 4003c60:	1245883a 	add	r2,r2,r9
 4003c64:	10c00017 	ldw	r3,0(r2)
 4003c68:	00ffb50e 	bge	zero,r3,4003b40 <strftime+0x2d0>
 4003c6c:	a1ffffc4 	addi	r7,r20,-1
 4003c70:	81ffdf2e 	bgeu	r16,r7,4003bf0 <strftime+0x380>
 4003c74:	848b883a 	add	r5,r16,r18
 4003c78:	000d883a 	mov	r6,zero
 4003c7c:	020100f4 	movhi	r8,1027
 4003c80:	420a9404 	addi	r8,r8,10832
 4003c84:	00000206 	br	4003c90 <strftime+0x420>
 4003c88:	29400044 	addi	r5,r5,1
 4003c8c:	81ffd82e 	bgeu	r16,r7,4003bf0 <strftime+0x380>
 4003c90:	2105883a 	add	r2,r4,r4
 4003c94:	1205883a 	add	r2,r2,r8
 4003c98:	10c00017 	ldw	r3,0(r2)
 4003c9c:	84000044 	addi	r16,r16,1
 4003ca0:	1987883a 	add	r3,r3,r6
 4003ca4:	18800003 	ldbu	r2,0(r3)
 4003ca8:	31800044 	addi	r6,r6,1
 4003cac:	28800005 	stb	r2,0(r5)
 4003cb0:	b8800617 	ldw	r2,24(r23)
 4003cb4:	1089883a 	add	r4,r2,r2
 4003cb8:	2105883a 	add	r2,r4,r4
 4003cbc:	1245883a 	add	r2,r2,r9
 4003cc0:	10c00017 	ldw	r3,0(r2)
 4003cc4:	30fff016 	blt	r6,r3,4003c88 <strftime+0x418>
 4003cc8:	b0800007 	ldb	r2,0(r22)
 4003ccc:	103f9c1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003cd0:	003f0806 	br	40038f4 <strftime+0x84>
 4003cd4:	b8800417 	ldw	r2,16(r23)
 4003cd8:	024100f4 	movhi	r9,1027
 4003cdc:	4a4aae04 	addi	r9,r9,10936
 4003ce0:	1089883a 	add	r4,r2,r2
 4003ce4:	2105883a 	add	r2,r4,r4
 4003ce8:	1245883a 	add	r2,r2,r9
 4003cec:	10c00017 	ldw	r3,0(r2)
 4003cf0:	00ff930e 	bge	zero,r3,4003b40 <strftime+0x2d0>
 4003cf4:	a1ffffc4 	addi	r7,r20,-1
 4003cf8:	81ffbd2e 	bgeu	r16,r7,4003bf0 <strftime+0x380>
 4003cfc:	940b883a 	add	r5,r18,r16
 4003d00:	000d883a 	mov	r6,zero
 4003d04:	020100f4 	movhi	r8,1027
 4003d08:	420aa204 	addi	r8,r8,10888
 4003d0c:	00000206 	br	4003d18 <strftime+0x4a8>
 4003d10:	29400044 	addi	r5,r5,1
 4003d14:	81ffb62e 	bgeu	r16,r7,4003bf0 <strftime+0x380>
 4003d18:	2105883a 	add	r2,r4,r4
 4003d1c:	1205883a 	add	r2,r2,r8
 4003d20:	10c00017 	ldw	r3,0(r2)
 4003d24:	84000044 	addi	r16,r16,1
 4003d28:	30c7883a 	add	r3,r6,r3
 4003d2c:	18800003 	ldbu	r2,0(r3)
 4003d30:	31800044 	addi	r6,r6,1
 4003d34:	28800005 	stb	r2,0(r5)
 4003d38:	b8800417 	ldw	r2,16(r23)
 4003d3c:	1089883a 	add	r4,r2,r2
 4003d40:	2105883a 	add	r2,r4,r4
 4003d44:	1245883a 	add	r2,r2,r9
 4003d48:	10c00017 	ldw	r3,0(r2)
 4003d4c:	30fff016 	blt	r6,r3,4003d10 <strftime+0x4a0>
 4003d50:	b0800007 	ldb	r2,0(r22)
 4003d54:	103f7a1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003d58:	003ee606 	br	40038f4 <strftime+0x84>
 4003d5c:	b9000517 	ldw	r4,20(r23)
 4003d60:	247e2510 	cmplti	r17,r4,-1900
 4003d64:	20024216 	blt	r4,zero,4004670 <strftime+0xe00>
 4003d68:	01401904 	movi	r5,100
 4003d6c:	400d76c0 	call	400d76c <__divsi3>
 4003d70:	10c004c4 	addi	r3,r2,19
 4003d74:	8804c03a 	cmpne	r2,r17,zero
 4003d78:	1001c91e 	bne	r2,zero,40044a0 <strftime+0xc30>
 4003d7c:	01c100f4 	movhi	r7,1027
 4003d80:	39cce204 	addi	r7,r7,13192
 4003d84:	00800084 	movi	r2,2
 4003d88:	1445c83a 	sub	r2,r2,r17
 4003d8c:	9409883a 	add	r4,r18,r16
 4003d90:	a40bc83a 	sub	r5,r20,r16
 4003d94:	018100f4 	movhi	r6,1027
 4003d98:	318a4504 	addi	r6,r6,10516
 4003d9c:	d8800015 	stw	r2,0(sp)
 4003da0:	d8c00115 	stw	r3,4(sp)
 4003da4:	400b00c0 	call	400b00c <snprintf>
 4003da8:	80a1883a 	add	r16,r16,r2
 4003dac:	853f902e 	bgeu	r16,r20,4003bf0 <strftime+0x380>
 4003db0:	b0800007 	ldb	r2,0(r22)
 4003db4:	103f621e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003db8:	003ece06 	br	40038f4 <strftime+0x84>
 4003dbc:	9409883a 	add	r4,r18,r16
 4003dc0:	a40bc83a 	sub	r5,r20,r16
 4003dc4:	018100f4 	movhi	r6,1027
 4003dc8:	318a4e04 	addi	r6,r6,10552
 4003dcc:	b80f883a 	mov	r7,r23
 4003dd0:	40038700 	call	4003870 <strftime>
 4003dd4:	103f8626 	beq	r2,zero,4003bf0 <strftime+0x380>
 4003dd8:	80a1883a 	add	r16,r16,r2
 4003ddc:	b0800007 	ldb	r2,0(r22)
 4003de0:	103f571e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003de4:	003ec306 	br	40038f4 <strftime+0x84>
 4003de8:	a0bfff84 	addi	r2,r20,-2
 4003dec:	80bf802e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003df0:	b9800117 	ldw	r6,4(r23)
 4003df4:	9409883a 	add	r4,r18,r16
 4003df8:	014100f4 	movhi	r5,1027
 4003dfc:	294a4704 	addi	r5,r5,10524
 4003e00:	400b17c0 	call	400b17c <sprintf>
 4003e04:	b0800007 	ldb	r2,0(r22)
 4003e08:	84000084 	addi	r16,r16,2
 4003e0c:	103f4c1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003e10:	003eb806 	br	40038f4 <strftime+0x84>
 4003e14:	a0bfff84 	addi	r2,r20,-2
 4003e18:	80bf752e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003e1c:	b9800017 	ldw	r6,0(r23)
 4003e20:	9409883a 	add	r4,r18,r16
 4003e24:	014100f4 	movhi	r5,1027
 4003e28:	294a4704 	addi	r5,r5,10524
 4003e2c:	400b17c0 	call	400b17c <sprintf>
 4003e30:	b0800007 	ldb	r2,0(r22)
 4003e34:	84000084 	addi	r16,r16,2
 4003e38:	103f411e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003e3c:	003ead06 	br	40038f4 <strftime+0x84>
 4003e40:	a0bfff84 	addi	r2,r20,-2
 4003e44:	80bf6a2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003e48:	b9000717 	ldw	r4,28(r23)
 4003e4c:	b8800617 	ldw	r2,24(r23)
 4003e50:	014001c4 	movi	r5,7
 4003e54:	2089c83a 	sub	r4,r4,r2
 4003e58:	2149883a 	add	r4,r4,r5
 4003e5c:	9423883a 	add	r17,r18,r16
 4003e60:	400d76c0 	call	400d76c <__divsi3>
 4003e64:	8809883a 	mov	r4,r17
 4003e68:	100d883a 	mov	r6,r2
 4003e6c:	014100f4 	movhi	r5,1027
 4003e70:	294a4704 	addi	r5,r5,10524
 4003e74:	400b17c0 	call	400b17c <sprintf>
 4003e78:	b0800007 	ldb	r2,0(r22)
 4003e7c:	84000084 	addi	r16,r16,2
 4003e80:	103f2f1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003e84:	003e9b06 	br	40038f4 <strftime+0x84>
 4003e88:	a0bffec4 	addi	r2,r20,-5
 4003e8c:	80bf582e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003e90:	b9800217 	ldw	r6,8(r23)
 4003e94:	b9c00117 	ldw	r7,4(r23)
 4003e98:	9409883a 	add	r4,r18,r16
 4003e9c:	014100f4 	movhi	r5,1027
 4003ea0:	294a5604 	addi	r5,r5,10584
 4003ea4:	400b17c0 	call	400b17c <sprintf>
 4003ea8:	b0800007 	ldb	r2,0(r22)
 4003eac:	84000144 	addi	r16,r16,5
 4003eb0:	103f231e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003eb4:	003e8f06 	br	40038f4 <strftime+0x84>
 4003eb8:	a0bfff84 	addi	r2,r20,-2
 4003ebc:	80bf4c2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003ec0:	b809883a 	mov	r4,r23
 4003ec4:	40036e40 	call	40036e4 <iso_year_adjust>
 4003ec8:	1007883a 	mov	r3,r2
 4003ecc:	b8800617 	ldw	r2,24(r23)
 4003ed0:	10018a1e 	bne	r2,zero,40044fc <strftime+0xc8c>
 4003ed4:	07000184 	movi	fp,6
 4003ed8:	bd400717 	ldw	r21,28(r23)
 4003edc:	00c1b90e 	bge	zero,r3,40045c4 <strftime+0xd54>
 4003ee0:	01800044 	movi	r6,1
 4003ee4:	00010206 	br	40042f0 <strftime+0xa80>
 4003ee8:	a0bfff84 	addi	r2,r20,-2
 4003eec:	80bf402e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003ef0:	b8800617 	ldw	r2,24(r23)
 4003ef4:	10017e26 	beq	r2,zero,40044f0 <strftime+0xc80>
 4003ef8:	b9000717 	ldw	r4,28(r23)
 4003efc:	10bfffc4 	addi	r2,r2,-1
 4003f00:	003fd306 	br	4003e50 <strftime+0x5e0>
 4003f04:	a0bffe04 	addi	r2,r20,-8
 4003f08:	80bf392e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4003f0c:	b9800217 	ldw	r6,8(r23)
 4003f10:	b9c00117 	ldw	r7,4(r23)
 4003f14:	b8800017 	ldw	r2,0(r23)
 4003f18:	9409883a 	add	r4,r18,r16
 4003f1c:	014100f4 	movhi	r5,1027
 4003f20:	294a5904 	addi	r5,r5,10596
 4003f24:	d8800015 	stw	r2,0(sp)
 4003f28:	400b17c0 	call	400b17c <sprintf>
 4003f2c:	b0800007 	ldb	r2,0(r22)
 4003f30:	84000204 	addi	r16,r16,8
 4003f34:	103f021e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003f38:	003e6e06 	br	40038f4 <strftime+0x84>
 4003f3c:	9409883a 	add	r4,r18,r16
 4003f40:	a40bc83a 	sub	r5,r20,r16
 4003f44:	018100f4 	movhi	r6,1027
 4003f48:	318a5d04 	addi	r6,r6,10612
 4003f4c:	b80f883a 	mov	r7,r23
 4003f50:	40038700 	call	4003870 <strftime>
 4003f54:	103f2626 	beq	r2,zero,4003bf0 <strftime+0x380>
 4003f58:	80a1883a 	add	r16,r16,r2
 4003f5c:	003f9f06 	br	4003ddc <strftime+0x56c>
 4003f60:	b8800817 	ldw	r2,32(r23)
 4003f64:	103ef616 	blt	r2,zero,4003b40 <strftime+0x2d0>
 4003f68:	40047a00 	call	40047a0 <__tz_lock>
 4003f6c:	b8800817 	ldw	r2,32(r23)
 4003f70:	00c10134 	movhi	r3,1028
 4003f74:	18e0fd04 	addi	r3,r3,-31756
 4003f78:	0084803a 	cmplt	r2,zero,r2
 4003f7c:	100490ba 	slli	r2,r2,2
 4003f80:	10c5883a 	add	r2,r2,r3
 4003f84:	11000017 	ldw	r4,0(r2)
 4003f88:	400472c0 	call	400472c <strlen>
 4003f8c:	1011883a 	mov	r8,r2
 4003f90:	0080140e 	bge	zero,r2,4003fe4 <strftime+0x774>
 4003f94:	a1ffffc4 	addi	r7,r20,-1
 4003f98:	81c17a2e 	bgeu	r16,r7,4004584 <strftime+0xd14>
 4003f9c:	940d883a 	add	r6,r18,r16
 4003fa0:	000b883a 	mov	r5,zero
 4003fa4:	00000206 	br	4003fb0 <strftime+0x740>
 4003fa8:	31800044 	addi	r6,r6,1
 4003fac:	81c1752e 	bgeu	r16,r7,4004584 <strftime+0xd14>
 4003fb0:	b8800817 	ldw	r2,32(r23)
 4003fb4:	01010134 	movhi	r4,1028
 4003fb8:	2120fd04 	addi	r4,r4,-31756
 4003fbc:	84000044 	addi	r16,r16,1
 4003fc0:	0084803a 	cmplt	r2,zero,r2
 4003fc4:	100490ba 	slli	r2,r2,2
 4003fc8:	1105883a 	add	r2,r2,r4
 4003fcc:	10c00017 	ldw	r3,0(r2)
 4003fd0:	1947883a 	add	r3,r3,r5
 4003fd4:	18800003 	ldbu	r2,0(r3)
 4003fd8:	29400044 	addi	r5,r5,1
 4003fdc:	30800005 	stb	r2,0(r6)
 4003fe0:	417ff11e 	bne	r8,r5,4003fa8 <strftime+0x738>
 4003fe4:	40047a40 	call	40047a4 <__tz_unlock>
 4003fe8:	b0800007 	ldb	r2,0(r22)
 4003fec:	103ed41e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4003ff0:	003e4006 	br	40038f4 <strftime+0x84>
 4003ff4:	a1bfffc4 	addi	r6,r20,-1
 4003ff8:	9409883a 	add	r4,r18,r16
 4003ffc:	000b883a 	mov	r5,zero
 4004000:	01c000c4 	movi	r7,3
 4004004:	81befa2e 	bgeu	r16,r6,4003bf0 <strftime+0x380>
 4004008:	b8800617 	ldw	r2,24(r23)
 400400c:	020100f4 	movhi	r8,1027
 4004010:	420a9404 	addi	r8,r8,10832
 4004014:	84000044 	addi	r16,r16,1
 4004018:	1085883a 	add	r2,r2,r2
 400401c:	1085883a 	add	r2,r2,r2
 4004020:	1205883a 	add	r2,r2,r8
 4004024:	10c00017 	ldw	r3,0(r2)
 4004028:	1947883a 	add	r3,r3,r5
 400402c:	18800003 	ldbu	r2,0(r3)
 4004030:	29400044 	addi	r5,r5,1
 4004034:	20800005 	stb	r2,0(r4)
 4004038:	21000044 	addi	r4,r4,1
 400403c:	29fff11e 	bne	r5,r7,4004004 <strftime+0x794>
 4004040:	b0800007 	ldb	r2,0(r22)
 4004044:	103ebe1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004048:	003e2a06 	br	40038f4 <strftime+0x84>
 400404c:	9409883a 	add	r4,r18,r16
 4004050:	a40bc83a 	sub	r5,r20,r16
 4004054:	018100f4 	movhi	r6,1027
 4004058:	318a6204 	addi	r6,r6,10632
 400405c:	b80f883a 	mov	r7,r23
 4004060:	40038700 	call	4003870 <strftime>
 4004064:	103ee226 	beq	r2,zero,4003bf0 <strftime+0x380>
 4004068:	80a1883a 	add	r16,r16,r2
 400406c:	003f5b06 	br	4003ddc <strftime+0x56c>
 4004070:	a0bfff84 	addi	r2,r20,-2
 4004074:	80bede2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4004078:	28c03fcc 	andi	r3,r5,255
 400407c:	18c0201c 	xori	r3,r3,128
 4004080:	18ffe004 	addi	r3,r3,-128
 4004084:	00801904 	movi	r2,100
 4004088:	18814126 	beq	r3,r2,4004590 <strftime+0xd20>
 400408c:	014100f4 	movhi	r5,1027
 4004090:	294a4904 	addi	r5,r5,10532
 4004094:	b9800317 	ldw	r6,12(r23)
 4004098:	9409883a 	add	r4,r18,r16
 400409c:	84000084 	addi	r16,r16,2
 40040a0:	400b17c0 	call	400b17c <sprintf>
 40040a4:	b0800007 	ldb	r2,0(r22)
 40040a8:	103ea51e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 40040ac:	003e1106 	br	40038f4 <strftime+0x84>
 40040b0:	a0bfff84 	addi	r2,r20,-2
 40040b4:	80bece2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 40040b8:	b809883a 	mov	r4,r23
 40040bc:	40036e40 	call	40036e4 <iso_year_adjust>
 40040c0:	b9000517 	ldw	r4,20(r23)
 40040c4:	1023883a 	mov	r17,r2
 40040c8:	20017f16 	blt	r4,zero,40046c8 <strftime+0xe58>
 40040cc:	01401904 	movi	r5,100
 40040d0:	400d7cc0 	call	400d7cc <__modsi3>
 40040d4:	1009883a 	mov	r4,r2
 40040d8:	88015016 	blt	r17,zero,400461c <strftime+0xdac>
 40040dc:	0440030e 	bge	zero,r17,40040ec <strftime+0x87c>
 40040e0:	b8c00517 	ldw	r3,20(r23)
 40040e4:	00be2504 	movi	r2,-1900
 40040e8:	18811d16 	blt	r3,r2,4004560 <strftime+0xcf0>
 40040ec:	2449883a 	add	r4,r4,r17
 40040f0:	01401904 	movi	r5,100
 40040f4:	400d7cc0 	call	400d7cc <__modsi3>
 40040f8:	11001904 	addi	r4,r2,100
 40040fc:	01401904 	movi	r5,100
 4004100:	9423883a 	add	r17,r18,r16
 4004104:	400d7cc0 	call	400d7cc <__modsi3>
 4004108:	003f5606 	br	4003e64 <strftime+0x5f4>
 400410c:	a1bfffc4 	addi	r6,r20,-1
 4004110:	9409883a 	add	r4,r18,r16
 4004114:	000b883a 	mov	r5,zero
 4004118:	01c000c4 	movi	r7,3
 400411c:	81beb42e 	bgeu	r16,r6,4003bf0 <strftime+0x380>
 4004120:	b8800417 	ldw	r2,16(r23)
 4004124:	020100f4 	movhi	r8,1027
 4004128:	420aa204 	addi	r8,r8,10888
 400412c:	84000044 	addi	r16,r16,1
 4004130:	1085883a 	add	r2,r2,r2
 4004134:	1085883a 	add	r2,r2,r2
 4004138:	1205883a 	add	r2,r2,r8
 400413c:	10c00017 	ldw	r3,0(r2)
 4004140:	1947883a 	add	r3,r3,r5
 4004144:	18800003 	ldbu	r2,0(r3)
 4004148:	29400044 	addi	r5,r5,1
 400414c:	20800005 	stb	r2,0(r4)
 4004150:	21000044 	addi	r4,r4,1
 4004154:	29fff11e 	bne	r5,r7,400411c <strftime+0x8ac>
 4004158:	b0800007 	ldb	r2,0(r22)
 400415c:	103e781e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004160:	003de406 	br	40038f4 <strftime+0x84>
 4004164:	a0bffd44 	addi	r2,r20,-11
 4004168:	80bea12e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 400416c:	b9000217 	ldw	r4,8(r23)
 4004170:	2000e41e 	bne	r4,zero,4004504 <strftime+0xc94>
 4004174:	00800c44 	movi	r2,49
 4004178:	9409883a 	add	r4,r18,r16
 400417c:	80c00044 	addi	r3,r16,1
 4004180:	20800005 	stb	r2,0(r4)
 4004184:	90c7883a 	add	r3,r18,r3
 4004188:	00800c84 	movi	r2,50
 400418c:	84400084 	addi	r17,r16,2
 4004190:	18800005 	stb	r2,0(r3)
 4004194:	04000e84 	movi	r16,58
 4004198:	9445883a 	add	r2,r18,r17
 400419c:	14000005 	stb	r16,0(r2)
 40041a0:	b9800117 	ldw	r6,4(r23)
 40041a4:	89000044 	addi	r4,r17,1
 40041a8:	9109883a 	add	r4,r18,r4
 40041ac:	014100f4 	movhi	r5,1027
 40041b0:	294a4704 	addi	r5,r5,10524
 40041b4:	400b17c0 	call	400b17c <sprintf>
 40041b8:	88c000c4 	addi	r3,r17,3
 40041bc:	90c7883a 	add	r3,r18,r3
 40041c0:	1c000005 	stb	r16,0(r3)
 40041c4:	b9800017 	ldw	r6,0(r23)
 40041c8:	89000104 	addi	r4,r17,4
 40041cc:	9109883a 	add	r4,r18,r4
 40041d0:	014100f4 	movhi	r5,1027
 40041d4:	294a4704 	addi	r5,r5,10524
 40041d8:	400b17c0 	call	400b17c <sprintf>
 40041dc:	88c00184 	addi	r3,r17,6
 40041e0:	90c7883a 	add	r3,r18,r3
 40041e4:	00800804 	movi	r2,32
 40041e8:	18800005 	stb	r2,0(r3)
 40041ec:	b9000217 	ldw	r4,8(r23)
 40041f0:	008002c4 	movi	r2,11
 40041f4:	88c001c4 	addi	r3,r17,7
 40041f8:	1100b80e 	bge	r2,r4,40044dc <strftime+0xc6c>
 40041fc:	90c7883a 	add	r3,r18,r3
 4004200:	00801404 	movi	r2,80
 4004204:	89000204 	addi	r4,r17,8
 4004208:	18800005 	stb	r2,0(r3)
 400420c:	00007606 	br	40043e8 <strftime+0xb78>
 4004210:	a0bfffc4 	addi	r2,r20,-1
 4004214:	80be762e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4004218:	9407883a 	add	r3,r18,r16
 400421c:	00800244 	movi	r2,9
 4004220:	18800005 	stb	r2,0(r3)
 4004224:	b0800007 	ldb	r2,0(r22)
 4004228:	84000044 	addi	r16,r16,1
 400422c:	103e441e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004230:	003db006 	br	40038f4 <strftime+0x84>
 4004234:	a0bfffc4 	addi	r2,r20,-1
 4004238:	80be6d2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 400423c:	b8c00617 	ldw	r3,24(r23)
 4004240:	18009f26 	beq	r3,zero,40044c0 <strftime+0xc50>
 4004244:	9405883a 	add	r2,r18,r16
 4004248:	18c00c04 	addi	r3,r3,48
 400424c:	10c00005 	stb	r3,0(r2)
 4004250:	b0800007 	ldb	r2,0(r22)
 4004254:	84000044 	addi	r16,r16,1
 4004258:	103e391e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 400425c:	003da506 	br	40038f4 <strftime+0x84>
 4004260:	a0bfffc4 	addi	r2,r20,-1
 4004264:	80be622e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4004268:	b8800617 	ldw	r2,24(r23)
 400426c:	9407883a 	add	r3,r18,r16
 4004270:	84000044 	addi	r16,r16,1
 4004274:	10800c04 	addi	r2,r2,48
 4004278:	18800005 	stb	r2,0(r3)
 400427c:	b0800007 	ldb	r2,0(r22)
 4004280:	103e2f1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004284:	003d9b06 	br	40038f4 <strftime+0x84>
 4004288:	a0bffe04 	addi	r2,r20,-8
 400428c:	80be582e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4004290:	b9000517 	ldw	r4,20(r23)
 4004294:	bc400417 	ldw	r17,16(r23)
 4004298:	bcc00317 	ldw	r19,12(r23)
 400429c:	20010e16 	blt	r4,zero,40046d8 <strftime+0xe68>
 40042a0:	01401904 	movi	r5,100
 40042a4:	400d7cc0 	call	400d7cc <__modsi3>
 40042a8:	89800044 	addi	r6,r17,1
 40042ac:	9409883a 	add	r4,r18,r16
 40042b0:	980f883a 	mov	r7,r19
 40042b4:	014100f4 	movhi	r5,1027
 40042b8:	294a4a04 	addi	r5,r5,10536
 40042bc:	d8800015 	stw	r2,0(sp)
 40042c0:	400b17c0 	call	400b17c <sprintf>
 40042c4:	b0800007 	ldb	r2,0(r22)
 40042c8:	84000204 	addi	r16,r16,8
 40042cc:	103e1c1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 40042d0:	003d8806 	br	40038f4 <strftime+0x84>
 40042d4:	a0bfff84 	addi	r2,r20,-2
 40042d8:	80be452e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 40042dc:	b9000517 	ldw	r4,20(r23)
 40042e0:	20010116 	blt	r4,zero,40046e8 <strftime+0xe78>
 40042e4:	01401904 	movi	r5,100
 40042e8:	400d7cc0 	call	400d7cc <__modsi3>
 40042ec:	100d883a 	mov	r6,r2
 40042f0:	9409883a 	add	r4,r18,r16
 40042f4:	014100f4 	movhi	r5,1027
 40042f8:	294a4704 	addi	r5,r5,10524
 40042fc:	400b17c0 	call	400b17c <sprintf>
 4004300:	b0800007 	ldb	r2,0(r22)
 4004304:	84000084 	addi	r16,r16,2
 4004308:	103e0d1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 400430c:	003d7906 	br	40038f4 <strftime+0x84>
 4004310:	a0bfff84 	addi	r2,r20,-2
 4004314:	80be362e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4004318:	b9000217 	ldw	r4,8(r23)
 400431c:	20005526 	beq	r4,zero,4004474 <strftime+0xc04>
 4004320:	00800304 	movi	r2,12
 4004324:	20805326 	beq	r4,r2,4004474 <strftime+0xc04>
 4004328:	28c03fcc 	andi	r3,r5,255
 400432c:	18c0201c 	xori	r3,r3,128
 4004330:	18ffe004 	addi	r3,r3,-128
 4004334:	00801244 	movi	r2,73
 4004338:	1880ca26 	beq	r3,r2,4004664 <strftime+0xdf4>
 400433c:	04c100f4 	movhi	r19,1027
 4004340:	9cca4904 	addi	r19,r19,10532
 4004344:	01400304 	movi	r5,12
 4004348:	400d7cc0 	call	400d7cc <__modsi3>
 400434c:	9423883a 	add	r17,r18,r16
 4004350:	8809883a 	mov	r4,r17
 4004354:	980b883a 	mov	r5,r19
 4004358:	100d883a 	mov	r6,r2
 400435c:	400b17c0 	call	400b17c <sprintf>
 4004360:	b0800007 	ldb	r2,0(r22)
 4004364:	84000084 	addi	r16,r16,2
 4004368:	103df51e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 400436c:	003d6106 	br	40038f4 <strftime+0x84>
 4004370:	a0bfff84 	addi	r2,r20,-2
 4004374:	80be1e2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 4004378:	b9800417 	ldw	r6,16(r23)
 400437c:	9409883a 	add	r4,r18,r16
 4004380:	014100f4 	movhi	r5,1027
 4004384:	294a4704 	addi	r5,r5,10524
 4004388:	31800044 	addi	r6,r6,1
 400438c:	400b17c0 	call	400b17c <sprintf>
 4004390:	b0800007 	ldb	r2,0(r22)
 4004394:	84000084 	addi	r16,r16,2
 4004398:	103de91e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 400439c:	003d5506 	br	40038f4 <strftime+0x84>
 40043a0:	a0bfffc4 	addi	r2,r20,-1
 40043a4:	80be122e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 40043a8:	9407883a 	add	r3,r18,r16
 40043ac:	00800284 	movi	r2,10
 40043b0:	18800005 	stb	r2,0(r3)
 40043b4:	b0800007 	ldb	r2,0(r22)
 40043b8:	84000044 	addi	r16,r16,1
 40043bc:	103de01e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 40043c0:	003d4c06 	br	40038f4 <strftime+0x84>
 40043c4:	a0bfff84 	addi	r2,r20,-2
 40043c8:	80be092e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 40043cc:	b8c00217 	ldw	r3,8(r23)
 40043d0:	008002c4 	movi	r2,11
 40043d4:	10c03516 	blt	r2,r3,40044ac <strftime+0xc3c>
 40043d8:	9407883a 	add	r3,r18,r16
 40043dc:	00801044 	movi	r2,65
 40043e0:	81000044 	addi	r4,r16,1
 40043e4:	18800005 	stb	r2,0(r3)
 40043e8:	00801344 	movi	r2,77
 40043ec:	9107883a 	add	r3,r18,r4
 40043f0:	18800005 	stb	r2,0(r3)
 40043f4:	b0800007 	ldb	r2,0(r22)
 40043f8:	24000044 	addi	r16,r4,1
 40043fc:	103dd01e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004400:	003d3c06 	br	40038f4 <strftime+0x84>
 4004404:	a0bfff44 	addi	r2,r20,-3
 4004408:	80bdf92e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 400440c:	b9800717 	ldw	r6,28(r23)
 4004410:	9409883a 	add	r4,r18,r16
 4004414:	014100f4 	movhi	r5,1027
 4004418:	294a5404 	addi	r5,r5,10576
 400441c:	31800044 	addi	r6,r6,1
 4004420:	400b17c0 	call	400b17c <sprintf>
 4004424:	b0800007 	ldb	r2,0(r22)
 4004428:	840000c4 	addi	r16,r16,3
 400442c:	103dc41e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004430:	003d3006 	br	40038f4 <strftime+0x84>
 4004434:	a0bfff84 	addi	r2,r20,-2
 4004438:	80bded2e 	bgeu	r16,r2,4003bf0 <strftime+0x380>
 400443c:	28c03fcc 	andi	r3,r5,255
 4004440:	18c0201c 	xori	r3,r3,128
 4004444:	18ffe004 	addi	r3,r3,-128
 4004448:	00801ac4 	movi	r2,107
 400444c:	18805326 	beq	r3,r2,400459c <strftime+0xd2c>
 4004450:	014100f4 	movhi	r5,1027
 4004454:	294a4704 	addi	r5,r5,10524
 4004458:	b9800217 	ldw	r6,8(r23)
 400445c:	9409883a 	add	r4,r18,r16
 4004460:	84000084 	addi	r16,r16,2
 4004464:	400b17c0 	call	400b17c <sprintf>
 4004468:	b0800007 	ldb	r2,0(r22)
 400446c:	103db41e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 4004470:	003d2006 	br	40038f4 <strftime+0x84>
 4004474:	9409883a 	add	r4,r18,r16
 4004478:	80c00044 	addi	r3,r16,1
 400447c:	00800c44 	movi	r2,49
 4004480:	20800005 	stb	r2,0(r4)
 4004484:	90c7883a 	add	r3,r18,r3
 4004488:	00800c84 	movi	r2,50
 400448c:	18800005 	stb	r2,0(r3)
 4004490:	b0800007 	ldb	r2,0(r22)
 4004494:	84000084 	addi	r16,r16,2
 4004498:	103da91e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 400449c:	003d1506 	br	40038f4 <strftime+0x84>
 40044a0:	01c100f4 	movhi	r7,1027
 40044a4:	39ca4404 	addi	r7,r7,10512
 40044a8:	003e3606 	br	4003d84 <strftime+0x514>
 40044ac:	9407883a 	add	r3,r18,r16
 40044b0:	00801404 	movi	r2,80
 40044b4:	81000044 	addi	r4,r16,1
 40044b8:	18800005 	stb	r2,0(r3)
 40044bc:	003fca06 	br	40043e8 <strftime+0xb78>
 40044c0:	9407883a 	add	r3,r18,r16
 40044c4:	00800dc4 	movi	r2,55
 40044c8:	18800005 	stb	r2,0(r3)
 40044cc:	b0800007 	ldb	r2,0(r22)
 40044d0:	84000044 	addi	r16,r16,1
 40044d4:	103d9a1e 	bne	r2,zero,4003b40 <strftime+0x2d0>
 40044d8:	003d0606 	br	40038f4 <strftime+0x84>
 40044dc:	90c7883a 	add	r3,r18,r3
 40044e0:	00801044 	movi	r2,65
 40044e4:	89000204 	addi	r4,r17,8
 40044e8:	18800005 	stb	r2,0(r3)
 40044ec:	003fbe06 	br	40043e8 <strftime+0xb78>
 40044f0:	b9000717 	ldw	r4,28(r23)
 40044f4:	00800184 	movi	r2,6
 40044f8:	003e5506 	br	4003e50 <strftime+0x5e0>
 40044fc:	173fffc4 	addi	fp,r2,-1
 4004500:	003e7506 	br	4003ed8 <strftime+0x668>
 4004504:	01400304 	movi	r5,12
 4004508:	217f1a26 	beq	r4,r5,4004174 <strftime+0x904>
 400450c:	400d7cc0 	call	400d7cc <__modsi3>
 4004510:	9423883a 	add	r17,r18,r16
 4004514:	8809883a 	mov	r4,r17
 4004518:	100d883a 	mov	r6,r2
 400451c:	014100f4 	movhi	r5,1027
 4004520:	294a4704 	addi	r5,r5,10524
 4004524:	400b17c0 	call	400b17c <sprintf>
 4004528:	84400084 	addi	r17,r16,2
 400452c:	003f1906 	br	4004194 <strftime+0x924>
 4004530:	00800084 	movi	r2,2
 4004534:	04ffffc4 	movi	r19,-1
 4004538:	1551c83a 	sub	r8,r2,r21
 400453c:	2cc7883a 	add	r3,r5,r19
 4004540:	00bfffc4 	movi	r2,-1
 4004544:	18bd991e 	bne	r3,r2,4003bac <strftime+0x33c>
 4004548:	e0f9883a 	add	fp,fp,r3
 400454c:	00c018c4 	movi	r3,99
 4004550:	203d9b26 	beq	r4,zero,4003bc0 <strftime+0x350>
 4004554:	01c100f4 	movhi	r7,1027
 4004558:	39ca4404 	addi	r7,r7,10512
 400455c:	003d9a06 	br	4003bc8 <strftime+0x358>
 4004560:	047fffc4 	movi	r17,-1
 4004564:	2449883a 	add	r4,r4,r17
 4004568:	01401904 	movi	r5,100
 400456c:	400d7cc0 	call	400d7cc <__modsi3>
 4004570:	11001904 	addi	r4,r2,100
 4004574:	01401904 	movi	r5,100
 4004578:	9423883a 	add	r17,r18,r16
 400457c:	400d7cc0 	call	400d7cc <__modsi3>
 4004580:	003e3806 	br	4003e64 <strftime+0x5f4>
 4004584:	40047a40 	call	40047a4 <__tz_unlock>
 4004588:	0021883a 	mov	r16,zero
 400458c:	003d9906 	br	4003bf4 <strftime+0x384>
 4004590:	014100f4 	movhi	r5,1027
 4004594:	294a4704 	addi	r5,r5,10524
 4004598:	003ebe06 	br	4004094 <strftime+0x824>
 400459c:	014100f4 	movhi	r5,1027
 40045a0:	294a4904 	addi	r5,r5,10532
 40045a4:	003fac06 	br	4004458 <strftime+0xbe8>
 40045a8:	b8c00517 	ldw	r3,20(r23)
 40045ac:	00be2504 	movi	r2,-1900
 40045b0:	10c0270e 	bge	r2,r3,4004650 <strftime+0xde0>
 40045b4:	00800084 	movi	r2,2
 40045b8:	1551c83a 	sub	r8,r2,r21
 40045bc:	a808c03a 	cmpne	r4,r21,zero
 40045c0:	003d7706 	br	4003ba0 <strftime+0x330>
 40045c4:	18001c26 	beq	r3,zero,4004638 <strftime+0xdc8>
 40045c8:	bc400517 	ldw	r17,20(r23)
 40045cc:	8826803a 	cmplt	r19,r17,zero
 40045d0:	9800501e 	bne	r19,zero,4004714 <strftime+0xea4>
 40045d4:	00bfe6c4 	movi	r2,-101
 40045d8:	1445883a 	add	r2,r2,r17
 40045dc:	108000cc 	andi	r2,r2,3
 40045e0:	1000451e 	bne	r2,zero,40046f8 <strftime+0xe88>
 40045e4:	98004f1e 	bne	r19,zero,4004724 <strftime+0xeb4>
 40045e8:	013fe6c4 	movi	r4,-101
 40045ec:	2449883a 	add	r4,r4,r17
 40045f0:	01401904 	movi	r5,100
 40045f4:	400d7cc0 	call	400d7cc <__modsi3>
 40045f8:	10003f26 	beq	r2,zero,40046f8 <strftime+0xe88>
 40045fc:	01000044 	movi	r4,1
 4004600:	e545c83a 	sub	r2,fp,r21
 4004604:	1105c83a 	sub	r2,r2,r4
 4004608:	00c00104 	movi	r3,4
 400460c:	188c803a 	cmplt	r6,r3,r2
 4004610:	01000d44 	movi	r4,53
 4004614:	218dc83a 	sub	r6,r4,r6
 4004618:	003f3506 	br	40042f0 <strftime+0xa80>
 400461c:	b8c00517 	ldw	r3,20(r23)
 4004620:	00be2504 	movi	r2,-1900
 4004624:	10feb116 	blt	r2,r3,40040ec <strftime+0x87c>
 4004628:	04400044 	movi	r17,1
 400462c:	003eaf06 	br	40040ec <strftime+0x87c>
 4004630:	00800804 	movi	r2,32
 4004634:	003d2706 	br	4003ad4 <strftime+0x264>
 4004638:	af09c83a 	sub	r4,r21,fp
 400463c:	21000284 	addi	r4,r4,10
 4004640:	014001c4 	movi	r5,7
 4004644:	400d76c0 	call	400d76c <__divsi3>
 4004648:	100d883a 	mov	r6,r2
 400464c:	003f2806 	br	40042f0 <strftime+0xa80>
 4004650:	05400044 	movi	r21,1
 4004654:	a827883a 	mov	r19,r21
 4004658:	a811883a 	mov	r8,r21
 400465c:	a809883a 	mov	r4,r21
 4004660:	003d4f06 	br	4003ba0 <strftime+0x330>
 4004664:	04c100f4 	movhi	r19,1027
 4004668:	9cca4704 	addi	r19,r19,10524
 400466c:	003f3506 	br	4004344 <strftime+0xad4>
 4004670:	2101db04 	addi	r4,r4,1900
 4004674:	40069c80 	call	40069c8 <abs>
 4004678:	1009883a 	mov	r4,r2
 400467c:	01401904 	movi	r5,100
 4004680:	400d76c0 	call	400d76c <__divsi3>
 4004684:	1007883a 	mov	r3,r2
 4004688:	003dba06 	br	4003d74 <strftime+0x504>
 400468c:	8901db04 	addi	r4,r17,1900
 4004690:	40069c80 	call	40069c8 <abs>
 4004694:	1009883a 	mov	r4,r2
 4004698:	01401904 	movi	r5,100
 400469c:	400d76c0 	call	400d76c <__divsi3>
 40046a0:	bc400517 	ldw	r17,20(r23)
 40046a4:	1039883a 	mov	fp,r2
 40046a8:	883d340e 	bge	r17,zero,4003b7c <strftime+0x30c>
 40046ac:	8901db04 	addi	r4,r17,1900
 40046b0:	40069c80 	call	40069c8 <abs>
 40046b4:	01401904 	movi	r5,100
 40046b8:	1009883a 	mov	r4,r2
 40046bc:	400d7cc0 	call	400d7cc <__modsi3>
 40046c0:	100b883a 	mov	r5,r2
 40046c4:	003d3106 	br	4003b8c <strftime+0x31c>
 40046c8:	2101db04 	addi	r4,r4,1900
 40046cc:	40069c80 	call	40069c8 <abs>
 40046d0:	1009883a 	mov	r4,r2
 40046d4:	003e7d06 	br	40040cc <strftime+0x85c>
 40046d8:	2101db04 	addi	r4,r4,1900
 40046dc:	40069c80 	call	40069c8 <abs>
 40046e0:	1009883a 	mov	r4,r2
 40046e4:	003eee06 	br	40042a0 <strftime+0xa30>
 40046e8:	2101db04 	addi	r4,r4,1900
 40046ec:	40069c80 	call	40069c8 <abs>
 40046f0:	1009883a 	mov	r4,r2
 40046f4:	003efb06 	br	40042e4 <strftime+0xa74>
 40046f8:	9800081e 	bne	r19,zero,400471c <strftime+0xeac>
 40046fc:	013fe6c4 	movi	r4,-101
 4004700:	2449883a 	add	r4,r4,r17
 4004704:	01406404 	movi	r5,400
 4004708:	400d7cc0 	call	400d7cc <__modsi3>
 400470c:	1009003a 	cmpeq	r4,r2,zero
 4004710:	003fbb06 	br	4004600 <strftime+0xd90>
 4004714:	0081dac4 	movi	r2,1899
 4004718:	003faf06 	br	40045d8 <strftime+0xd68>
 400471c:	0101dac4 	movi	r4,1899
 4004720:	003ff706 	br	4004700 <strftime+0xe90>
 4004724:	0101dac4 	movi	r4,1899
 4004728:	003fb006 	br	40045ec <strftime+0xd7c>

0400472c <strlen>:
 400472c:	208000cc 	andi	r2,r4,3
 4004730:	2011883a 	mov	r8,r4
 4004734:	1000161e 	bne	r2,zero,4004790 <strlen+0x64>
 4004738:	20c00017 	ldw	r3,0(r4)
 400473c:	017fbff4 	movhi	r5,65279
 4004740:	297fbfc4 	addi	r5,r5,-257
 4004744:	01e02074 	movhi	r7,32897
 4004748:	39e02004 	addi	r7,r7,-32640
 400474c:	1945883a 	add	r2,r3,r5
 4004750:	11c4703a 	and	r2,r2,r7
 4004754:	00c6303a 	nor	r3,zero,r3
 4004758:	1886703a 	and	r3,r3,r2
 400475c:	18000c1e 	bne	r3,zero,4004790 <strlen+0x64>
 4004760:	280d883a 	mov	r6,r5
 4004764:	380b883a 	mov	r5,r7
 4004768:	21000104 	addi	r4,r4,4
 400476c:	20800017 	ldw	r2,0(r4)
 4004770:	1187883a 	add	r3,r2,r6
 4004774:	1946703a 	and	r3,r3,r5
 4004778:	0084303a 	nor	r2,zero,r2
 400477c:	10c4703a 	and	r2,r2,r3
 4004780:	103ff926 	beq	r2,zero,4004768 <strlen+0x3c>
 4004784:	20800007 	ldb	r2,0(r4)
 4004788:	10000326 	beq	r2,zero,4004798 <strlen+0x6c>
 400478c:	21000044 	addi	r4,r4,1
 4004790:	20800007 	ldb	r2,0(r4)
 4004794:	103ffd1e 	bne	r2,zero,400478c <strlen+0x60>
 4004798:	2205c83a 	sub	r2,r4,r8
 400479c:	f800283a 	ret

040047a0 <__tz_lock>:
 40047a0:	f800283a 	ret

040047a4 <__tz_unlock>:
 40047a4:	f800283a 	ret

040047a8 <_user_strerror>:
 40047a8:	0005883a 	mov	r2,zero
 40047ac:	f800283a 	ret

040047b0 <__sprint_r>:
 40047b0:	30800217 	ldw	r2,8(r6)
 40047b4:	defffe04 	addi	sp,sp,-8
 40047b8:	dc000015 	stw	r16,0(sp)
 40047bc:	dfc00115 	stw	ra,4(sp)
 40047c0:	3021883a 	mov	r16,r6
 40047c4:	0007883a 	mov	r3,zero
 40047c8:	1000061e 	bne	r2,zero,40047e4 <__sprint_r+0x34>
 40047cc:	1805883a 	mov	r2,r3
 40047d0:	30000115 	stw	zero,4(r6)
 40047d4:	dfc00117 	ldw	ra,4(sp)
 40047d8:	dc000017 	ldw	r16,0(sp)
 40047dc:	dec00204 	addi	sp,sp,8
 40047e0:	f800283a 	ret
 40047e4:	4008ccc0 	call	4008ccc <__sfvwrite_r>
 40047e8:	1007883a 	mov	r3,r2
 40047ec:	1805883a 	mov	r2,r3
 40047f0:	80000115 	stw	zero,4(r16)
 40047f4:	80000215 	stw	zero,8(r16)
 40047f8:	dfc00117 	ldw	ra,4(sp)
 40047fc:	dc000017 	ldw	r16,0(sp)
 4004800:	dec00204 	addi	sp,sp,8
 4004804:	f800283a 	ret

04004808 <___vfprintf_internal_r>:
 4004808:	defea404 	addi	sp,sp,-1392
 400480c:	dd815815 	stw	r22,1376(sp)
 4004810:	dc015215 	stw	r16,1352(sp)
 4004814:	d9c15115 	stw	r7,1348(sp)
 4004818:	dfc15b15 	stw	ra,1388(sp)
 400481c:	df015a15 	stw	fp,1384(sp)
 4004820:	ddc15915 	stw	r23,1380(sp)
 4004824:	dd415715 	stw	r21,1372(sp)
 4004828:	dd015615 	stw	r20,1368(sp)
 400482c:	dcc15515 	stw	r19,1364(sp)
 4004830:	dc815415 	stw	r18,1360(sp)
 4004834:	dc415315 	stw	r17,1356(sp)
 4004838:	282d883a 	mov	r22,r5
 400483c:	3021883a 	mov	r16,r6
 4004840:	d9014f15 	stw	r4,1340(sp)
 4004844:	40093140 	call	4009314 <_localeconv_r>
 4004848:	10800017 	ldw	r2,0(r2)
 400484c:	d9c15117 	ldw	r7,1348(sp)
 4004850:	d8814915 	stw	r2,1316(sp)
 4004854:	d8814f17 	ldw	r2,1340(sp)
 4004858:	10000226 	beq	r2,zero,4004864 <___vfprintf_internal_r+0x5c>
 400485c:	10800e17 	ldw	r2,56(r2)
 4004860:	10020d26 	beq	r2,zero,4005098 <___vfprintf_internal_r+0x890>
 4004864:	b080030b 	ldhu	r2,12(r22)
 4004868:	1080020c 	andi	r2,r2,8
 400486c:	10020e26 	beq	r2,zero,40050a8 <___vfprintf_internal_r+0x8a0>
 4004870:	b0800417 	ldw	r2,16(r22)
 4004874:	10020c26 	beq	r2,zero,40050a8 <___vfprintf_internal_r+0x8a0>
 4004878:	b200030b 	ldhu	r8,12(r22)
 400487c:	00800284 	movi	r2,10
 4004880:	40c0068c 	andi	r3,r8,26
 4004884:	18802f1e 	bne	r3,r2,4004944 <___vfprintf_internal_r+0x13c>
 4004888:	b080038f 	ldh	r2,14(r22)
 400488c:	10002d16 	blt	r2,zero,4004944 <___vfprintf_internal_r+0x13c>
 4004890:	b240038b 	ldhu	r9,14(r22)
 4004894:	b2800717 	ldw	r10,28(r22)
 4004898:	b2c00917 	ldw	r11,36(r22)
 400489c:	d9014f17 	ldw	r4,1340(sp)
 40048a0:	dc402904 	addi	r17,sp,164
 40048a4:	d8804004 	addi	r2,sp,256
 40048a8:	00c10004 	movi	r3,1024
 40048ac:	423fff4c 	andi	r8,r8,65533
 40048b0:	800d883a 	mov	r6,r16
 40048b4:	880b883a 	mov	r5,r17
 40048b8:	da002c0d 	sth	r8,176(sp)
 40048bc:	da402c8d 	sth	r9,178(sp)
 40048c0:	da803015 	stw	r10,192(sp)
 40048c4:	dac03215 	stw	r11,200(sp)
 40048c8:	d8802d15 	stw	r2,180(sp)
 40048cc:	d8c02e15 	stw	r3,184(sp)
 40048d0:	d8802915 	stw	r2,164(sp)
 40048d4:	d8c02b15 	stw	r3,172(sp)
 40048d8:	d8002f15 	stw	zero,188(sp)
 40048dc:	40048080 	call	4004808 <___vfprintf_internal_r>
 40048e0:	d8814b15 	stw	r2,1324(sp)
 40048e4:	10000416 	blt	r2,zero,40048f8 <___vfprintf_internal_r+0xf0>
 40048e8:	d9014f17 	ldw	r4,1340(sp)
 40048ec:	880b883a 	mov	r5,r17
 40048f0:	40082500 	call	4008250 <_fflush_r>
 40048f4:	1002321e 	bne	r2,zero,40051c0 <___vfprintf_internal_r+0x9b8>
 40048f8:	d8802c0b 	ldhu	r2,176(sp)
 40048fc:	1080100c 	andi	r2,r2,64
 4004900:	10000326 	beq	r2,zero,4004910 <___vfprintf_internal_r+0x108>
 4004904:	b080030b 	ldhu	r2,12(r22)
 4004908:	10801014 	ori	r2,r2,64
 400490c:	b080030d 	sth	r2,12(r22)
 4004910:	d8814b17 	ldw	r2,1324(sp)
 4004914:	dfc15b17 	ldw	ra,1388(sp)
 4004918:	df015a17 	ldw	fp,1384(sp)
 400491c:	ddc15917 	ldw	r23,1380(sp)
 4004920:	dd815817 	ldw	r22,1376(sp)
 4004924:	dd415717 	ldw	r21,1372(sp)
 4004928:	dd015617 	ldw	r20,1368(sp)
 400492c:	dcc15517 	ldw	r19,1364(sp)
 4004930:	dc815417 	ldw	r18,1360(sp)
 4004934:	dc415317 	ldw	r17,1356(sp)
 4004938:	dc015217 	ldw	r16,1352(sp)
 400493c:	dec15c04 	addi	sp,sp,1392
 4004940:	f800283a 	ret
 4004944:	0005883a 	mov	r2,zero
 4004948:	0007883a 	mov	r3,zero
 400494c:	dd401904 	addi	r21,sp,100
 4004950:	d8814215 	stw	r2,1288(sp)
 4004954:	802f883a 	mov	r23,r16
 4004958:	d8c14315 	stw	r3,1292(sp)
 400495c:	d8014b15 	stw	zero,1324(sp)
 4004960:	d8014815 	stw	zero,1312(sp)
 4004964:	d8014415 	stw	zero,1296(sp)
 4004968:	d8014715 	stw	zero,1308(sp)
 400496c:	dd400c15 	stw	r21,48(sp)
 4004970:	d8000e15 	stw	zero,56(sp)
 4004974:	d8000d15 	stw	zero,52(sp)
 4004978:	b8800007 	ldb	r2,0(r23)
 400497c:	10001926 	beq	r2,zero,40049e4 <___vfprintf_internal_r+0x1dc>
 4004980:	00c00944 	movi	r3,37
 4004984:	10c01726 	beq	r2,r3,40049e4 <___vfprintf_internal_r+0x1dc>
 4004988:	b821883a 	mov	r16,r23
 400498c:	00000106 	br	4004994 <___vfprintf_internal_r+0x18c>
 4004990:	10c00326 	beq	r2,r3,40049a0 <___vfprintf_internal_r+0x198>
 4004994:	84000044 	addi	r16,r16,1
 4004998:	80800007 	ldb	r2,0(r16)
 400499c:	103ffc1e 	bne	r2,zero,4004990 <___vfprintf_internal_r+0x188>
 40049a0:	85e7c83a 	sub	r19,r16,r23
 40049a4:	98000e26 	beq	r19,zero,40049e0 <___vfprintf_internal_r+0x1d8>
 40049a8:	dc800e17 	ldw	r18,56(sp)
 40049ac:	dc400d17 	ldw	r17,52(sp)
 40049b0:	008001c4 	movi	r2,7
 40049b4:	94e5883a 	add	r18,r18,r19
 40049b8:	8c400044 	addi	r17,r17,1
 40049bc:	adc00015 	stw	r23,0(r21)
 40049c0:	dc800e15 	stw	r18,56(sp)
 40049c4:	acc00115 	stw	r19,4(r21)
 40049c8:	dc400d15 	stw	r17,52(sp)
 40049cc:	14428b16 	blt	r2,r17,40053fc <___vfprintf_internal_r+0xbf4>
 40049d0:	ad400204 	addi	r21,r21,8
 40049d4:	d9014b17 	ldw	r4,1324(sp)
 40049d8:	24c9883a 	add	r4,r4,r19
 40049dc:	d9014b15 	stw	r4,1324(sp)
 40049e0:	802f883a 	mov	r23,r16
 40049e4:	b8800007 	ldb	r2,0(r23)
 40049e8:	10013c26 	beq	r2,zero,4004edc <___vfprintf_internal_r+0x6d4>
 40049ec:	bdc00044 	addi	r23,r23,1
 40049f0:	d8000405 	stb	zero,16(sp)
 40049f4:	b8c00007 	ldb	r3,0(r23)
 40049f8:	04ffffc4 	movi	r19,-1
 40049fc:	d8014c15 	stw	zero,1328(sp)
 4004a00:	d8014a15 	stw	zero,1320(sp)
 4004a04:	d8c14d15 	stw	r3,1332(sp)
 4004a08:	bdc00044 	addi	r23,r23,1
 4004a0c:	d9414d17 	ldw	r5,1332(sp)
 4004a10:	00801604 	movi	r2,88
 4004a14:	28fff804 	addi	r3,r5,-32
 4004a18:	10c06036 	bltu	r2,r3,4004b9c <___vfprintf_internal_r+0x394>
 4004a1c:	18c5883a 	add	r2,r3,r3
 4004a20:	1085883a 	add	r2,r2,r2
 4004a24:	00c10034 	movhi	r3,1024
 4004a28:	18d28e04 	addi	r3,r3,19000
 4004a2c:	10c5883a 	add	r2,r2,r3
 4004a30:	11000017 	ldw	r4,0(r2)
 4004a34:	2000683a 	jmp	r4
 4004a38:	040059ac 	andhi	r16,zero,358
 4004a3c:	04004b9c 	xori	r16,zero,302
 4004a40:	04004b9c 	xori	r16,zero,302
 4004a44:	04005998 	cmpnei	r16,zero,358
 4004a48:	04004b9c 	xori	r16,zero,302
 4004a4c:	04004b9c 	xori	r16,zero,302
 4004a50:	04004b9c 	xori	r16,zero,302
 4004a54:	04004b9c 	xori	r16,zero,302
 4004a58:	04004b9c 	xori	r16,zero,302
 4004a5c:	04004b9c 	xori	r16,zero,302
 4004a60:	04005778 	rdprs	r16,zero,349
 4004a64:	04005988 	cmpgei	r16,zero,358
 4004a68:	04004b9c 	xori	r16,zero,302
 4004a6c:	04005790 	cmplti	r16,zero,350
 4004a70:	04005a24 	muli	r16,zero,360
 4004a74:	04004b9c 	xori	r16,zero,302
 4004a78:	04005a10 	cmplti	r16,zero,360
 4004a7c:	040059d8 	cmpnei	r16,zero,359
 4004a80:	040059d8 	cmpnei	r16,zero,359
 4004a84:	040059d8 	cmpnei	r16,zero,359
 4004a88:	040059d8 	cmpnei	r16,zero,359
 4004a8c:	040059d8 	cmpnei	r16,zero,359
 4004a90:	040059d8 	cmpnei	r16,zero,359
 4004a94:	040059d8 	cmpnei	r16,zero,359
 4004a98:	040059d8 	cmpnei	r16,zero,359
 4004a9c:	040059d8 	cmpnei	r16,zero,359
 4004aa0:	04004b9c 	xori	r16,zero,302
 4004aa4:	04004b9c 	xori	r16,zero,302
 4004aa8:	04004b9c 	xori	r16,zero,302
 4004aac:	04004b9c 	xori	r16,zero,302
 4004ab0:	04004b9c 	xori	r16,zero,302
 4004ab4:	04004b9c 	xori	r16,zero,302
 4004ab8:	04004b9c 	xori	r16,zero,302
 4004abc:	04004b9c 	xori	r16,zero,302
 4004ac0:	04004b9c 	xori	r16,zero,302
 4004ac4:	04004b9c 	xori	r16,zero,302
 4004ac8:	040051f4 	movhi	r16,327
 4004acc:	04005860 	cmpeqi	r16,zero,353
 4004ad0:	04004b9c 	xori	r16,zero,302
 4004ad4:	04005860 	cmpeqi	r16,zero,353
 4004ad8:	04004b9c 	xori	r16,zero,302
 4004adc:	04004b9c 	xori	r16,zero,302
 4004ae0:	04004b9c 	xori	r16,zero,302
 4004ae4:	04004b9c 	xori	r16,zero,302
 4004ae8:	040059c4 	movi	r16,359
 4004aec:	04004b9c 	xori	r16,zero,302
 4004af0:	04004b9c 	xori	r16,zero,302
 4004af4:	040052a8 	cmpgeui	r16,zero,330
 4004af8:	04004b9c 	xori	r16,zero,302
 4004afc:	04004b9c 	xori	r16,zero,302
 4004b00:	04004b9c 	xori	r16,zero,302
 4004b04:	04004b9c 	xori	r16,zero,302
 4004b08:	04004b9c 	xori	r16,zero,302
 4004b0c:	040052f4 	movhi	r16,331
 4004b10:	04004b9c 	xori	r16,zero,302
 4004b14:	04004b9c 	xori	r16,zero,302
 4004b18:	04005914 	movui	r16,356
 4004b1c:	04004b9c 	xori	r16,zero,302
 4004b20:	04004b9c 	xori	r16,zero,302
 4004b24:	04004b9c 	xori	r16,zero,302
 4004b28:	04004b9c 	xori	r16,zero,302
 4004b2c:	04004b9c 	xori	r16,zero,302
 4004b30:	04004b9c 	xori	r16,zero,302
 4004b34:	04004b9c 	xori	r16,zero,302
 4004b38:	04004b9c 	xori	r16,zero,302
 4004b3c:	04004b9c 	xori	r16,zero,302
 4004b40:	04004b9c 	xori	r16,zero,302
 4004b44:	040058e8 	cmpgeui	r16,zero,355
 4004b48:	04005200 	call	400520 <OSCtxSw_SWITCH_PC+0x4004e0>
 4004b4c:	04005860 	cmpeqi	r16,zero,353
 4004b50:	04005860 	cmpeqi	r16,zero,353
 4004b54:	04005860 	cmpeqi	r16,zero,353
 4004b58:	0400584c 	andi	r16,zero,353
 4004b5c:	04005200 	call	400520 <OSCtxSw_SWITCH_PC+0x4004e0>
 4004b60:	04004b9c 	xori	r16,zero,302
 4004b64:	04004b9c 	xori	r16,zero,302
 4004b68:	040057d4 	movui	r16,351
 4004b6c:	04004b9c 	xori	r16,zero,302
 4004b70:	040057a4 	muli	r16,zero,350
 4004b74:	040052b4 	movhi	r16,330
 4004b78:	04005804 	movi	r16,352
 4004b7c:	040057f0 	cmpltui	r16,zero,351
 4004b80:	04004b9c 	xori	r16,zero,302
 4004b84:	04005a80 	call	4005a8 <OSCtxSw_SWITCH_PC+0x400568>
 4004b88:	04004b9c 	xori	r16,zero,302
 4004b8c:	04005300 	call	400530 <OSCtxSw_SWITCH_PC+0x4004f0>
 4004b90:	04004b9c 	xori	r16,zero,302
 4004b94:	04004b9c 	xori	r16,zero,302
 4004b98:	04005978 	rdprs	r16,zero,357
 4004b9c:	d9014d17 	ldw	r4,1332(sp)
 4004ba0:	2000ce26 	beq	r4,zero,4004edc <___vfprintf_internal_r+0x6d4>
 4004ba4:	01400044 	movi	r5,1
 4004ba8:	d9800f04 	addi	r6,sp,60
 4004bac:	d9c14015 	stw	r7,1280(sp)
 4004bb0:	d9414515 	stw	r5,1300(sp)
 4004bb4:	d9814115 	stw	r6,1284(sp)
 4004bb8:	280f883a 	mov	r7,r5
 4004bbc:	d9000f05 	stb	r4,60(sp)
 4004bc0:	d8000405 	stb	zero,16(sp)
 4004bc4:	d8014615 	stw	zero,1304(sp)
 4004bc8:	d8c14c17 	ldw	r3,1328(sp)
 4004bcc:	1880008c 	andi	r2,r3,2
 4004bd0:	1005003a 	cmpeq	r2,r2,zero
 4004bd4:	d8815015 	stw	r2,1344(sp)
 4004bd8:	1000031e 	bne	r2,zero,4004be8 <___vfprintf_internal_r+0x3e0>
 4004bdc:	d9014517 	ldw	r4,1300(sp)
 4004be0:	21000084 	addi	r4,r4,2
 4004be4:	d9014515 	stw	r4,1300(sp)
 4004be8:	d9414c17 	ldw	r5,1328(sp)
 4004bec:	2940210c 	andi	r5,r5,132
 4004bf0:	d9414e15 	stw	r5,1336(sp)
 4004bf4:	28002d1e 	bne	r5,zero,4004cac <___vfprintf_internal_r+0x4a4>
 4004bf8:	d9814a17 	ldw	r6,1320(sp)
 4004bfc:	d8814517 	ldw	r2,1300(sp)
 4004c00:	30a1c83a 	sub	r16,r6,r2
 4004c04:	0400290e 	bge	zero,r16,4004cac <___vfprintf_internal_r+0x4a4>
 4004c08:	00800404 	movi	r2,16
 4004c0c:	1404580e 	bge	r2,r16,4005d70 <___vfprintf_internal_r+0x1568>
 4004c10:	dc800e17 	ldw	r18,56(sp)
 4004c14:	dc400d17 	ldw	r17,52(sp)
 4004c18:	1027883a 	mov	r19,r2
 4004c1c:	070100f4 	movhi	fp,1027
 4004c20:	e70ad584 	addi	fp,fp,11094
 4004c24:	050001c4 	movi	r20,7
 4004c28:	00000306 	br	4004c38 <___vfprintf_internal_r+0x430>
 4004c2c:	843ffc04 	addi	r16,r16,-16
 4004c30:	ad400204 	addi	r21,r21,8
 4004c34:	9c00130e 	bge	r19,r16,4004c84 <___vfprintf_internal_r+0x47c>
 4004c38:	94800404 	addi	r18,r18,16
 4004c3c:	8c400044 	addi	r17,r17,1
 4004c40:	af000015 	stw	fp,0(r21)
 4004c44:	acc00115 	stw	r19,4(r21)
 4004c48:	dc800e15 	stw	r18,56(sp)
 4004c4c:	dc400d15 	stw	r17,52(sp)
 4004c50:	a47ff60e 	bge	r20,r17,4004c2c <___vfprintf_internal_r+0x424>
 4004c54:	d9014f17 	ldw	r4,1340(sp)
 4004c58:	b00b883a 	mov	r5,r22
 4004c5c:	d9800c04 	addi	r6,sp,48
 4004c60:	d9c15115 	stw	r7,1348(sp)
 4004c64:	40047b00 	call	40047b0 <__sprint_r>
 4004c68:	d9c15117 	ldw	r7,1348(sp)
 4004c6c:	10009e1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4004c70:	843ffc04 	addi	r16,r16,-16
 4004c74:	dc800e17 	ldw	r18,56(sp)
 4004c78:	dc400d17 	ldw	r17,52(sp)
 4004c7c:	dd401904 	addi	r21,sp,100
 4004c80:	9c3fed16 	blt	r19,r16,4004c38 <___vfprintf_internal_r+0x430>
 4004c84:	9425883a 	add	r18,r18,r16
 4004c88:	8c400044 	addi	r17,r17,1
 4004c8c:	008001c4 	movi	r2,7
 4004c90:	af000015 	stw	fp,0(r21)
 4004c94:	ac000115 	stw	r16,4(r21)
 4004c98:	dc800e15 	stw	r18,56(sp)
 4004c9c:	dc400d15 	stw	r17,52(sp)
 4004ca0:	1441f516 	blt	r2,r17,4005478 <___vfprintf_internal_r+0xc70>
 4004ca4:	ad400204 	addi	r21,r21,8
 4004ca8:	00000206 	br	4004cb4 <___vfprintf_internal_r+0x4ac>
 4004cac:	dc800e17 	ldw	r18,56(sp)
 4004cb0:	dc400d17 	ldw	r17,52(sp)
 4004cb4:	d8800407 	ldb	r2,16(sp)
 4004cb8:	10000b26 	beq	r2,zero,4004ce8 <___vfprintf_internal_r+0x4e0>
 4004cbc:	00800044 	movi	r2,1
 4004cc0:	94800044 	addi	r18,r18,1
 4004cc4:	8c400044 	addi	r17,r17,1
 4004cc8:	a8800115 	stw	r2,4(r21)
 4004ccc:	d8c00404 	addi	r3,sp,16
 4004cd0:	008001c4 	movi	r2,7
 4004cd4:	a8c00015 	stw	r3,0(r21)
 4004cd8:	dc800e15 	stw	r18,56(sp)
 4004cdc:	dc400d15 	stw	r17,52(sp)
 4004ce0:	1441da16 	blt	r2,r17,400544c <___vfprintf_internal_r+0xc44>
 4004ce4:	ad400204 	addi	r21,r21,8
 4004ce8:	d9015017 	ldw	r4,1344(sp)
 4004cec:	20000b1e 	bne	r4,zero,4004d1c <___vfprintf_internal_r+0x514>
 4004cf0:	d8800444 	addi	r2,sp,17
 4004cf4:	94800084 	addi	r18,r18,2
 4004cf8:	8c400044 	addi	r17,r17,1
 4004cfc:	a8800015 	stw	r2,0(r21)
 4004d00:	00c00084 	movi	r3,2
 4004d04:	008001c4 	movi	r2,7
 4004d08:	a8c00115 	stw	r3,4(r21)
 4004d0c:	dc800e15 	stw	r18,56(sp)
 4004d10:	dc400d15 	stw	r17,52(sp)
 4004d14:	1441c216 	blt	r2,r17,4005420 <___vfprintf_internal_r+0xc18>
 4004d18:	ad400204 	addi	r21,r21,8
 4004d1c:	d9414e17 	ldw	r5,1336(sp)
 4004d20:	00802004 	movi	r2,128
 4004d24:	2880b126 	beq	r5,r2,4004fec <___vfprintf_internal_r+0x7e4>
 4004d28:	d8c14617 	ldw	r3,1304(sp)
 4004d2c:	19e1c83a 	sub	r16,r3,r7
 4004d30:	0400260e 	bge	zero,r16,4004dcc <___vfprintf_internal_r+0x5c4>
 4004d34:	00800404 	movi	r2,16
 4004d38:	1403c90e 	bge	r2,r16,4005c60 <___vfprintf_internal_r+0x1458>
 4004d3c:	1027883a 	mov	r19,r2
 4004d40:	070100f4 	movhi	fp,1027
 4004d44:	e70ad184 	addi	fp,fp,11078
 4004d48:	050001c4 	movi	r20,7
 4004d4c:	00000306 	br	4004d5c <___vfprintf_internal_r+0x554>
 4004d50:	843ffc04 	addi	r16,r16,-16
 4004d54:	ad400204 	addi	r21,r21,8
 4004d58:	9c00130e 	bge	r19,r16,4004da8 <___vfprintf_internal_r+0x5a0>
 4004d5c:	94800404 	addi	r18,r18,16
 4004d60:	8c400044 	addi	r17,r17,1
 4004d64:	af000015 	stw	fp,0(r21)
 4004d68:	acc00115 	stw	r19,4(r21)
 4004d6c:	dc800e15 	stw	r18,56(sp)
 4004d70:	dc400d15 	stw	r17,52(sp)
 4004d74:	a47ff60e 	bge	r20,r17,4004d50 <___vfprintf_internal_r+0x548>
 4004d78:	d9014f17 	ldw	r4,1340(sp)
 4004d7c:	b00b883a 	mov	r5,r22
 4004d80:	d9800c04 	addi	r6,sp,48
 4004d84:	d9c15115 	stw	r7,1348(sp)
 4004d88:	40047b00 	call	40047b0 <__sprint_r>
 4004d8c:	d9c15117 	ldw	r7,1348(sp)
 4004d90:	1000551e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4004d94:	843ffc04 	addi	r16,r16,-16
 4004d98:	dc800e17 	ldw	r18,56(sp)
 4004d9c:	dc400d17 	ldw	r17,52(sp)
 4004da0:	dd401904 	addi	r21,sp,100
 4004da4:	9c3fed16 	blt	r19,r16,4004d5c <___vfprintf_internal_r+0x554>
 4004da8:	9425883a 	add	r18,r18,r16
 4004dac:	8c400044 	addi	r17,r17,1
 4004db0:	008001c4 	movi	r2,7
 4004db4:	af000015 	stw	fp,0(r21)
 4004db8:	ac000115 	stw	r16,4(r21)
 4004dbc:	dc800e15 	stw	r18,56(sp)
 4004dc0:	dc400d15 	stw	r17,52(sp)
 4004dc4:	14418216 	blt	r2,r17,40053d0 <___vfprintf_internal_r+0xbc8>
 4004dc8:	ad400204 	addi	r21,r21,8
 4004dcc:	d9014c17 	ldw	r4,1328(sp)
 4004dd0:	2080400c 	andi	r2,r4,256
 4004dd4:	10004a1e 	bne	r2,zero,4004f00 <___vfprintf_internal_r+0x6f8>
 4004dd8:	d9414117 	ldw	r5,1284(sp)
 4004ddc:	91e5883a 	add	r18,r18,r7
 4004de0:	8c400044 	addi	r17,r17,1
 4004de4:	008001c4 	movi	r2,7
 4004de8:	a9400015 	stw	r5,0(r21)
 4004dec:	a9c00115 	stw	r7,4(r21)
 4004df0:	dc800e15 	stw	r18,56(sp)
 4004df4:	dc400d15 	stw	r17,52(sp)
 4004df8:	14416716 	blt	r2,r17,4005398 <___vfprintf_internal_r+0xb90>
 4004dfc:	a8c00204 	addi	r3,r21,8
 4004e00:	d9814c17 	ldw	r6,1328(sp)
 4004e04:	3080010c 	andi	r2,r6,4
 4004e08:	10002826 	beq	r2,zero,4004eac <___vfprintf_internal_r+0x6a4>
 4004e0c:	d8814a17 	ldw	r2,1320(sp)
 4004e10:	d9014517 	ldw	r4,1300(sp)
 4004e14:	1121c83a 	sub	r16,r2,r4
 4004e18:	0400240e 	bge	zero,r16,4004eac <___vfprintf_internal_r+0x6a4>
 4004e1c:	00800404 	movi	r2,16
 4004e20:	14044f0e 	bge	r2,r16,4005f60 <___vfprintf_internal_r+0x1758>
 4004e24:	dc400d17 	ldw	r17,52(sp)
 4004e28:	1027883a 	mov	r19,r2
 4004e2c:	070100f4 	movhi	fp,1027
 4004e30:	e70ad584 	addi	fp,fp,11094
 4004e34:	050001c4 	movi	r20,7
 4004e38:	00000306 	br	4004e48 <___vfprintf_internal_r+0x640>
 4004e3c:	843ffc04 	addi	r16,r16,-16
 4004e40:	18c00204 	addi	r3,r3,8
 4004e44:	9c00110e 	bge	r19,r16,4004e8c <___vfprintf_internal_r+0x684>
 4004e48:	94800404 	addi	r18,r18,16
 4004e4c:	8c400044 	addi	r17,r17,1
 4004e50:	1f000015 	stw	fp,0(r3)
 4004e54:	1cc00115 	stw	r19,4(r3)
 4004e58:	dc800e15 	stw	r18,56(sp)
 4004e5c:	dc400d15 	stw	r17,52(sp)
 4004e60:	a47ff60e 	bge	r20,r17,4004e3c <___vfprintf_internal_r+0x634>
 4004e64:	d9014f17 	ldw	r4,1340(sp)
 4004e68:	b00b883a 	mov	r5,r22
 4004e6c:	d9800c04 	addi	r6,sp,48
 4004e70:	40047b00 	call	40047b0 <__sprint_r>
 4004e74:	10001c1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4004e78:	843ffc04 	addi	r16,r16,-16
 4004e7c:	dc800e17 	ldw	r18,56(sp)
 4004e80:	dc400d17 	ldw	r17,52(sp)
 4004e84:	d8c01904 	addi	r3,sp,100
 4004e88:	9c3fef16 	blt	r19,r16,4004e48 <___vfprintf_internal_r+0x640>
 4004e8c:	9425883a 	add	r18,r18,r16
 4004e90:	8c400044 	addi	r17,r17,1
 4004e94:	008001c4 	movi	r2,7
 4004e98:	1f000015 	stw	fp,0(r3)
 4004e9c:	1c000115 	stw	r16,4(r3)
 4004ea0:	dc800e15 	stw	r18,56(sp)
 4004ea4:	dc400d15 	stw	r17,52(sp)
 4004ea8:	1440cb16 	blt	r2,r17,40051d8 <___vfprintf_internal_r+0x9d0>
 4004eac:	d8814a17 	ldw	r2,1320(sp)
 4004eb0:	d9414517 	ldw	r5,1300(sp)
 4004eb4:	1140010e 	bge	r2,r5,4004ebc <___vfprintf_internal_r+0x6b4>
 4004eb8:	2805883a 	mov	r2,r5
 4004ebc:	d9814b17 	ldw	r6,1324(sp)
 4004ec0:	308d883a 	add	r6,r6,r2
 4004ec4:	d9814b15 	stw	r6,1324(sp)
 4004ec8:	90013b1e 	bne	r18,zero,40053b8 <___vfprintf_internal_r+0xbb0>
 4004ecc:	d9c14017 	ldw	r7,1280(sp)
 4004ed0:	dd401904 	addi	r21,sp,100
 4004ed4:	d8000d15 	stw	zero,52(sp)
 4004ed8:	003ea706 	br	4004978 <___vfprintf_internal_r+0x170>
 4004edc:	d8800e17 	ldw	r2,56(sp)
 4004ee0:	10053f1e 	bne	r2,zero,40063e0 <___vfprintf_internal_r+0x1bd8>
 4004ee4:	d8000d15 	stw	zero,52(sp)
 4004ee8:	b080030b 	ldhu	r2,12(r22)
 4004eec:	1080100c 	andi	r2,r2,64
 4004ef0:	103e8726 	beq	r2,zero,4004910 <___vfprintf_internal_r+0x108>
 4004ef4:	00bfffc4 	movi	r2,-1
 4004ef8:	d8814b15 	stw	r2,1324(sp)
 4004efc:	003e8406 	br	4004910 <___vfprintf_internal_r+0x108>
 4004f00:	d9814d17 	ldw	r6,1332(sp)
 4004f04:	00801944 	movi	r2,101
 4004f08:	11806e16 	blt	r2,r6,40050c4 <___vfprintf_internal_r+0x8bc>
 4004f0c:	d9414717 	ldw	r5,1308(sp)
 4004f10:	00c00044 	movi	r3,1
 4004f14:	1943430e 	bge	r3,r5,4005c24 <___vfprintf_internal_r+0x141c>
 4004f18:	d8814117 	ldw	r2,1284(sp)
 4004f1c:	94800044 	addi	r18,r18,1
 4004f20:	8c400044 	addi	r17,r17,1
 4004f24:	a8800015 	stw	r2,0(r21)
 4004f28:	008001c4 	movi	r2,7
 4004f2c:	a8c00115 	stw	r3,4(r21)
 4004f30:	dc800e15 	stw	r18,56(sp)
 4004f34:	dc400d15 	stw	r17,52(sp)
 4004f38:	1441ca16 	blt	r2,r17,4005664 <___vfprintf_internal_r+0xe5c>
 4004f3c:	a8c00204 	addi	r3,r21,8
 4004f40:	d9014917 	ldw	r4,1316(sp)
 4004f44:	00800044 	movi	r2,1
 4004f48:	94800044 	addi	r18,r18,1
 4004f4c:	8c400044 	addi	r17,r17,1
 4004f50:	18800115 	stw	r2,4(r3)
 4004f54:	008001c4 	movi	r2,7
 4004f58:	19000015 	stw	r4,0(r3)
 4004f5c:	dc800e15 	stw	r18,56(sp)
 4004f60:	dc400d15 	stw	r17,52(sp)
 4004f64:	1441b616 	blt	r2,r17,4005640 <___vfprintf_internal_r+0xe38>
 4004f68:	1cc00204 	addi	r19,r3,8
 4004f6c:	d9014217 	ldw	r4,1288(sp)
 4004f70:	d9414317 	ldw	r5,1292(sp)
 4004f74:	000d883a 	mov	r6,zero
 4004f78:	000f883a 	mov	r7,zero
 4004f7c:	400d16c0 	call	400d16c <__nedf2>
 4004f80:	10017426 	beq	r2,zero,4005554 <___vfprintf_internal_r+0xd4c>
 4004f84:	d9414717 	ldw	r5,1308(sp)
 4004f88:	d9814117 	ldw	r6,1284(sp)
 4004f8c:	8c400044 	addi	r17,r17,1
 4004f90:	2c85883a 	add	r2,r5,r18
 4004f94:	14bfffc4 	addi	r18,r2,-1
 4004f98:	28bfffc4 	addi	r2,r5,-1
 4004f9c:	30c00044 	addi	r3,r6,1
 4004fa0:	98800115 	stw	r2,4(r19)
 4004fa4:	008001c4 	movi	r2,7
 4004fa8:	98c00015 	stw	r3,0(r19)
 4004fac:	dc800e15 	stw	r18,56(sp)
 4004fb0:	dc400d15 	stw	r17,52(sp)
 4004fb4:	14418e16 	blt	r2,r17,40055f0 <___vfprintf_internal_r+0xde8>
 4004fb8:	9cc00204 	addi	r19,r19,8
 4004fbc:	d9414817 	ldw	r5,1312(sp)
 4004fc0:	d8800804 	addi	r2,sp,32
 4004fc4:	8c400044 	addi	r17,r17,1
 4004fc8:	9165883a 	add	r18,r18,r5
 4004fcc:	98800015 	stw	r2,0(r19)
 4004fd0:	008001c4 	movi	r2,7
 4004fd4:	99400115 	stw	r5,4(r19)
 4004fd8:	dc800e15 	stw	r18,56(sp)
 4004fdc:	dc400d15 	stw	r17,52(sp)
 4004fe0:	1440ed16 	blt	r2,r17,4005398 <___vfprintf_internal_r+0xb90>
 4004fe4:	98c00204 	addi	r3,r19,8
 4004fe8:	003f8506 	br	4004e00 <___vfprintf_internal_r+0x5f8>
 4004fec:	d9814a17 	ldw	r6,1320(sp)
 4004ff0:	d8814517 	ldw	r2,1300(sp)
 4004ff4:	30a1c83a 	sub	r16,r6,r2
 4004ff8:	043f4b0e 	bge	zero,r16,4004d28 <___vfprintf_internal_r+0x520>
 4004ffc:	00800404 	movi	r2,16
 4005000:	1404340e 	bge	r2,r16,40060d4 <___vfprintf_internal_r+0x18cc>
 4005004:	1027883a 	mov	r19,r2
 4005008:	070100f4 	movhi	fp,1027
 400500c:	e70ad184 	addi	fp,fp,11078
 4005010:	050001c4 	movi	r20,7
 4005014:	00000306 	br	4005024 <___vfprintf_internal_r+0x81c>
 4005018:	843ffc04 	addi	r16,r16,-16
 400501c:	ad400204 	addi	r21,r21,8
 4005020:	9c00130e 	bge	r19,r16,4005070 <___vfprintf_internal_r+0x868>
 4005024:	94800404 	addi	r18,r18,16
 4005028:	8c400044 	addi	r17,r17,1
 400502c:	af000015 	stw	fp,0(r21)
 4005030:	acc00115 	stw	r19,4(r21)
 4005034:	dc800e15 	stw	r18,56(sp)
 4005038:	dc400d15 	stw	r17,52(sp)
 400503c:	a47ff60e 	bge	r20,r17,4005018 <___vfprintf_internal_r+0x810>
 4005040:	d9014f17 	ldw	r4,1340(sp)
 4005044:	b00b883a 	mov	r5,r22
 4005048:	d9800c04 	addi	r6,sp,48
 400504c:	d9c15115 	stw	r7,1348(sp)
 4005050:	40047b00 	call	40047b0 <__sprint_r>
 4005054:	d9c15117 	ldw	r7,1348(sp)
 4005058:	103fa31e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 400505c:	843ffc04 	addi	r16,r16,-16
 4005060:	dc800e17 	ldw	r18,56(sp)
 4005064:	dc400d17 	ldw	r17,52(sp)
 4005068:	dd401904 	addi	r21,sp,100
 400506c:	9c3fed16 	blt	r19,r16,4005024 <___vfprintf_internal_r+0x81c>
 4005070:	9425883a 	add	r18,r18,r16
 4005074:	8c400044 	addi	r17,r17,1
 4005078:	008001c4 	movi	r2,7
 400507c:	af000015 	stw	fp,0(r21)
 4005080:	ac000115 	stw	r16,4(r21)
 4005084:	dc800e15 	stw	r18,56(sp)
 4005088:	dc400d15 	stw	r17,52(sp)
 400508c:	14416116 	blt	r2,r17,4005614 <___vfprintf_internal_r+0xe0c>
 4005090:	ad400204 	addi	r21,r21,8
 4005094:	003f2406 	br	4004d28 <___vfprintf_internal_r+0x520>
 4005098:	d9014f17 	ldw	r4,1340(sp)
 400509c:	40084e80 	call	40084e8 <__sinit>
 40050a0:	d9c15117 	ldw	r7,1348(sp)
 40050a4:	003def06 	br	4004864 <___vfprintf_internal_r+0x5c>
 40050a8:	d9014f17 	ldw	r4,1340(sp)
 40050ac:	b00b883a 	mov	r5,r22
 40050b0:	d9c15115 	stw	r7,1348(sp)
 40050b4:	40066d80 	call	40066d8 <__swsetup_r>
 40050b8:	d9c15117 	ldw	r7,1348(sp)
 40050bc:	103dee26 	beq	r2,zero,4004878 <___vfprintf_internal_r+0x70>
 40050c0:	003f8c06 	br	4004ef4 <___vfprintf_internal_r+0x6ec>
 40050c4:	d9014217 	ldw	r4,1288(sp)
 40050c8:	d9414317 	ldw	r5,1292(sp)
 40050cc:	000d883a 	mov	r6,zero
 40050d0:	000f883a 	mov	r7,zero
 40050d4:	400d0e40 	call	400d0e4 <__eqdf2>
 40050d8:	1000f21e 	bne	r2,zero,40054a4 <___vfprintf_internal_r+0xc9c>
 40050dc:	008100f4 	movhi	r2,1027
 40050e0:	108ad104 	addi	r2,r2,11076
 40050e4:	94800044 	addi	r18,r18,1
 40050e8:	8c400044 	addi	r17,r17,1
 40050ec:	a8800015 	stw	r2,0(r21)
 40050f0:	00c00044 	movi	r3,1
 40050f4:	008001c4 	movi	r2,7
 40050f8:	a8c00115 	stw	r3,4(r21)
 40050fc:	dc800e15 	stw	r18,56(sp)
 4005100:	dc400d15 	stw	r17,52(sp)
 4005104:	1442fa16 	blt	r2,r17,4005cf0 <___vfprintf_internal_r+0x14e8>
 4005108:	a8c00204 	addi	r3,r21,8
 400510c:	d8800517 	ldw	r2,20(sp)
 4005110:	d9014717 	ldw	r4,1308(sp)
 4005114:	11015c0e 	bge	r2,r4,4005688 <___vfprintf_internal_r+0xe80>
 4005118:	dc400d17 	ldw	r17,52(sp)
 400511c:	d9814917 	ldw	r6,1316(sp)
 4005120:	00800044 	movi	r2,1
 4005124:	94800044 	addi	r18,r18,1
 4005128:	8c400044 	addi	r17,r17,1
 400512c:	18800115 	stw	r2,4(r3)
 4005130:	008001c4 	movi	r2,7
 4005134:	19800015 	stw	r6,0(r3)
 4005138:	dc800e15 	stw	r18,56(sp)
 400513c:	dc400d15 	stw	r17,52(sp)
 4005140:	14431016 	blt	r2,r17,4005d84 <___vfprintf_internal_r+0x157c>
 4005144:	18c00204 	addi	r3,r3,8
 4005148:	d8814717 	ldw	r2,1308(sp)
 400514c:	143fffc4 	addi	r16,r2,-1
 4005150:	043f2b0e 	bge	zero,r16,4004e00 <___vfprintf_internal_r+0x5f8>
 4005154:	00800404 	movi	r2,16
 4005158:	1402a20e 	bge	r2,r16,4005be4 <___vfprintf_internal_r+0x13dc>
 400515c:	dc400d17 	ldw	r17,52(sp)
 4005160:	1027883a 	mov	r19,r2
 4005164:	070100f4 	movhi	fp,1027
 4005168:	e70ad184 	addi	fp,fp,11078
 400516c:	050001c4 	movi	r20,7
 4005170:	00000306 	br	4005180 <___vfprintf_internal_r+0x978>
 4005174:	18c00204 	addi	r3,r3,8
 4005178:	843ffc04 	addi	r16,r16,-16
 400517c:	9c029c0e 	bge	r19,r16,4005bf0 <___vfprintf_internal_r+0x13e8>
 4005180:	94800404 	addi	r18,r18,16
 4005184:	8c400044 	addi	r17,r17,1
 4005188:	1f000015 	stw	fp,0(r3)
 400518c:	1cc00115 	stw	r19,4(r3)
 4005190:	dc800e15 	stw	r18,56(sp)
 4005194:	dc400d15 	stw	r17,52(sp)
 4005198:	a47ff60e 	bge	r20,r17,4005174 <___vfprintf_internal_r+0x96c>
 400519c:	d9014f17 	ldw	r4,1340(sp)
 40051a0:	b00b883a 	mov	r5,r22
 40051a4:	d9800c04 	addi	r6,sp,48
 40051a8:	40047b00 	call	40047b0 <__sprint_r>
 40051ac:	103f4e1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40051b0:	dc800e17 	ldw	r18,56(sp)
 40051b4:	dc400d17 	ldw	r17,52(sp)
 40051b8:	d8c01904 	addi	r3,sp,100
 40051bc:	003fee06 	br	4005178 <___vfprintf_internal_r+0x970>
 40051c0:	d8802c0b 	ldhu	r2,176(sp)
 40051c4:	00ffffc4 	movi	r3,-1
 40051c8:	d8c14b15 	stw	r3,1324(sp)
 40051cc:	1080100c 	andi	r2,r2,64
 40051d0:	103dcc1e 	bne	r2,zero,4004904 <___vfprintf_internal_r+0xfc>
 40051d4:	003dce06 	br	4004910 <___vfprintf_internal_r+0x108>
 40051d8:	d9014f17 	ldw	r4,1340(sp)
 40051dc:	b00b883a 	mov	r5,r22
 40051e0:	d9800c04 	addi	r6,sp,48
 40051e4:	40047b00 	call	40047b0 <__sprint_r>
 40051e8:	103f3f1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40051ec:	dc800e17 	ldw	r18,56(sp)
 40051f0:	003f2e06 	br	4004eac <___vfprintf_internal_r+0x6a4>
 40051f4:	d9414c17 	ldw	r5,1328(sp)
 40051f8:	29400414 	ori	r5,r5,16
 40051fc:	d9414c15 	stw	r5,1328(sp)
 4005200:	d9814c17 	ldw	r6,1328(sp)
 4005204:	3080080c 	andi	r2,r6,32
 4005208:	10014f1e 	bne	r2,zero,4005748 <___vfprintf_internal_r+0xf40>
 400520c:	d8c14c17 	ldw	r3,1328(sp)
 4005210:	1880040c 	andi	r2,r3,16
 4005214:	1002ea1e 	bne	r2,zero,4005dc0 <___vfprintf_internal_r+0x15b8>
 4005218:	d9014c17 	ldw	r4,1328(sp)
 400521c:	2080100c 	andi	r2,r4,64
 4005220:	1002e726 	beq	r2,zero,4005dc0 <___vfprintf_internal_r+0x15b8>
 4005224:	3880000f 	ldh	r2,0(r7)
 4005228:	39c00104 	addi	r7,r7,4
 400522c:	d9c14015 	stw	r7,1280(sp)
 4005230:	1023d7fa 	srai	r17,r2,31
 4005234:	1021883a 	mov	r16,r2
 4005238:	88037216 	blt	r17,zero,4006004 <___vfprintf_internal_r+0x17fc>
 400523c:	01000044 	movi	r4,1
 4005240:	98000416 	blt	r19,zero,4005254 <___vfprintf_internal_r+0xa4c>
 4005244:	d8c14c17 	ldw	r3,1328(sp)
 4005248:	00bfdfc4 	movi	r2,-129
 400524c:	1886703a 	and	r3,r3,r2
 4005250:	d8c14c15 	stw	r3,1328(sp)
 4005254:	8444b03a 	or	r2,r16,r17
 4005258:	1002261e 	bne	r2,zero,4005af4 <___vfprintf_internal_r+0x12ec>
 400525c:	9802251e 	bne	r19,zero,4005af4 <___vfprintf_internal_r+0x12ec>
 4005260:	20803fcc 	andi	r2,r4,255
 4005264:	10029b26 	beq	r2,zero,4005cd4 <___vfprintf_internal_r+0x14cc>
 4005268:	d8c01904 	addi	r3,sp,100
 400526c:	dd000f04 	addi	r20,sp,60
 4005270:	d8c14115 	stw	r3,1284(sp)
 4005274:	d8c14117 	ldw	r3,1284(sp)
 4005278:	dcc14515 	stw	r19,1300(sp)
 400527c:	a0c5c83a 	sub	r2,r20,r3
 4005280:	11c00a04 	addi	r7,r2,40
 4005284:	99c0010e 	bge	r19,r7,400528c <___vfprintf_internal_r+0xa84>
 4005288:	d9c14515 	stw	r7,1300(sp)
 400528c:	dcc14615 	stw	r19,1304(sp)
 4005290:	d8800407 	ldb	r2,16(sp)
 4005294:	103e4c26 	beq	r2,zero,4004bc8 <___vfprintf_internal_r+0x3c0>
 4005298:	d8814517 	ldw	r2,1300(sp)
 400529c:	10800044 	addi	r2,r2,1
 40052a0:	d8814515 	stw	r2,1300(sp)
 40052a4:	003e4806 	br	4004bc8 <___vfprintf_internal_r+0x3c0>
 40052a8:	d9814c17 	ldw	r6,1328(sp)
 40052ac:	31800414 	ori	r6,r6,16
 40052b0:	d9814c15 	stw	r6,1328(sp)
 40052b4:	d8c14c17 	ldw	r3,1328(sp)
 40052b8:	1880080c 	andi	r2,r3,32
 40052bc:	1001271e 	bne	r2,zero,400575c <___vfprintf_internal_r+0xf54>
 40052c0:	d9414c17 	ldw	r5,1328(sp)
 40052c4:	2880040c 	andi	r2,r5,16
 40052c8:	1002b61e 	bne	r2,zero,4005da4 <___vfprintf_internal_r+0x159c>
 40052cc:	d9814c17 	ldw	r6,1328(sp)
 40052d0:	3080100c 	andi	r2,r6,64
 40052d4:	1002b326 	beq	r2,zero,4005da4 <___vfprintf_internal_r+0x159c>
 40052d8:	3c00000b 	ldhu	r16,0(r7)
 40052dc:	0009883a 	mov	r4,zero
 40052e0:	39c00104 	addi	r7,r7,4
 40052e4:	0023883a 	mov	r17,zero
 40052e8:	d9c14015 	stw	r7,1280(sp)
 40052ec:	d8000405 	stb	zero,16(sp)
 40052f0:	003fd306 	br	4005240 <___vfprintf_internal_r+0xa38>
 40052f4:	d9014c17 	ldw	r4,1328(sp)
 40052f8:	21000414 	ori	r4,r4,16
 40052fc:	d9014c15 	stw	r4,1328(sp)
 4005300:	d9414c17 	ldw	r5,1328(sp)
 4005304:	2880080c 	andi	r2,r5,32
 4005308:	1001081e 	bne	r2,zero,400572c <___vfprintf_internal_r+0xf24>
 400530c:	d8c14c17 	ldw	r3,1328(sp)
 4005310:	1880040c 	andi	r2,r3,16
 4005314:	1002b01e 	bne	r2,zero,4005dd8 <___vfprintf_internal_r+0x15d0>
 4005318:	d9014c17 	ldw	r4,1328(sp)
 400531c:	2080100c 	andi	r2,r4,64
 4005320:	1002ad26 	beq	r2,zero,4005dd8 <___vfprintf_internal_r+0x15d0>
 4005324:	3c00000b 	ldhu	r16,0(r7)
 4005328:	01000044 	movi	r4,1
 400532c:	39c00104 	addi	r7,r7,4
 4005330:	0023883a 	mov	r17,zero
 4005334:	d9c14015 	stw	r7,1280(sp)
 4005338:	d8000405 	stb	zero,16(sp)
 400533c:	003fc006 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005340:	d9014f17 	ldw	r4,1340(sp)
 4005344:	b00b883a 	mov	r5,r22
 4005348:	d9800c04 	addi	r6,sp,48
 400534c:	40047b00 	call	40047b0 <__sprint_r>
 4005350:	103ee51e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005354:	dc800e17 	ldw	r18,56(sp)
 4005358:	d8c01904 	addi	r3,sp,100
 400535c:	d9814c17 	ldw	r6,1328(sp)
 4005360:	3080004c 	andi	r2,r6,1
 4005364:	1005003a 	cmpeq	r2,r2,zero
 4005368:	103ea51e 	bne	r2,zero,4004e00 <___vfprintf_internal_r+0x5f8>
 400536c:	00800044 	movi	r2,1
 4005370:	dc400d17 	ldw	r17,52(sp)
 4005374:	18800115 	stw	r2,4(r3)
 4005378:	d8814917 	ldw	r2,1316(sp)
 400537c:	94800044 	addi	r18,r18,1
 4005380:	8c400044 	addi	r17,r17,1
 4005384:	18800015 	stw	r2,0(r3)
 4005388:	008001c4 	movi	r2,7
 400538c:	dc800e15 	stw	r18,56(sp)
 4005390:	dc400d15 	stw	r17,52(sp)
 4005394:	14421e0e 	bge	r2,r17,4005c10 <___vfprintf_internal_r+0x1408>
 4005398:	d9014f17 	ldw	r4,1340(sp)
 400539c:	b00b883a 	mov	r5,r22
 40053a0:	d9800c04 	addi	r6,sp,48
 40053a4:	40047b00 	call	40047b0 <__sprint_r>
 40053a8:	103ecf1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40053ac:	dc800e17 	ldw	r18,56(sp)
 40053b0:	d8c01904 	addi	r3,sp,100
 40053b4:	003e9206 	br	4004e00 <___vfprintf_internal_r+0x5f8>
 40053b8:	d9014f17 	ldw	r4,1340(sp)
 40053bc:	b00b883a 	mov	r5,r22
 40053c0:	d9800c04 	addi	r6,sp,48
 40053c4:	40047b00 	call	40047b0 <__sprint_r>
 40053c8:	103ec026 	beq	r2,zero,4004ecc <___vfprintf_internal_r+0x6c4>
 40053cc:	003ec606 	br	4004ee8 <___vfprintf_internal_r+0x6e0>
 40053d0:	d9014f17 	ldw	r4,1340(sp)
 40053d4:	b00b883a 	mov	r5,r22
 40053d8:	d9800c04 	addi	r6,sp,48
 40053dc:	d9c15115 	stw	r7,1348(sp)
 40053e0:	40047b00 	call	40047b0 <__sprint_r>
 40053e4:	d9c15117 	ldw	r7,1348(sp)
 40053e8:	103ebf1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40053ec:	dc800e17 	ldw	r18,56(sp)
 40053f0:	dc400d17 	ldw	r17,52(sp)
 40053f4:	dd401904 	addi	r21,sp,100
 40053f8:	003e7406 	br	4004dcc <___vfprintf_internal_r+0x5c4>
 40053fc:	d9014f17 	ldw	r4,1340(sp)
 4005400:	b00b883a 	mov	r5,r22
 4005404:	d9800c04 	addi	r6,sp,48
 4005408:	d9c15115 	stw	r7,1348(sp)
 400540c:	40047b00 	call	40047b0 <__sprint_r>
 4005410:	d9c15117 	ldw	r7,1348(sp)
 4005414:	103eb41e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005418:	dd401904 	addi	r21,sp,100
 400541c:	003d6d06 	br	40049d4 <___vfprintf_internal_r+0x1cc>
 4005420:	d9014f17 	ldw	r4,1340(sp)
 4005424:	b00b883a 	mov	r5,r22
 4005428:	d9800c04 	addi	r6,sp,48
 400542c:	d9c15115 	stw	r7,1348(sp)
 4005430:	40047b00 	call	40047b0 <__sprint_r>
 4005434:	d9c15117 	ldw	r7,1348(sp)
 4005438:	103eab1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 400543c:	dc800e17 	ldw	r18,56(sp)
 4005440:	dc400d17 	ldw	r17,52(sp)
 4005444:	dd401904 	addi	r21,sp,100
 4005448:	003e3406 	br	4004d1c <___vfprintf_internal_r+0x514>
 400544c:	d9014f17 	ldw	r4,1340(sp)
 4005450:	b00b883a 	mov	r5,r22
 4005454:	d9800c04 	addi	r6,sp,48
 4005458:	d9c15115 	stw	r7,1348(sp)
 400545c:	40047b00 	call	40047b0 <__sprint_r>
 4005460:	d9c15117 	ldw	r7,1348(sp)
 4005464:	103ea01e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005468:	dc800e17 	ldw	r18,56(sp)
 400546c:	dc400d17 	ldw	r17,52(sp)
 4005470:	dd401904 	addi	r21,sp,100
 4005474:	003e1c06 	br	4004ce8 <___vfprintf_internal_r+0x4e0>
 4005478:	d9014f17 	ldw	r4,1340(sp)
 400547c:	b00b883a 	mov	r5,r22
 4005480:	d9800c04 	addi	r6,sp,48
 4005484:	d9c15115 	stw	r7,1348(sp)
 4005488:	40047b00 	call	40047b0 <__sprint_r>
 400548c:	d9c15117 	ldw	r7,1348(sp)
 4005490:	103e951e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005494:	dc800e17 	ldw	r18,56(sp)
 4005498:	dc400d17 	ldw	r17,52(sp)
 400549c:	dd401904 	addi	r21,sp,100
 40054a0:	003e0406 	br	4004cb4 <___vfprintf_internal_r+0x4ac>
 40054a4:	d9000517 	ldw	r4,20(sp)
 40054a8:	0102520e 	bge	zero,r4,4005df4 <___vfprintf_internal_r+0x15ec>
 40054ac:	d9814717 	ldw	r6,1308(sp)
 40054b0:	21807a16 	blt	r4,r6,400569c <___vfprintf_internal_r+0xe94>
 40054b4:	d8814117 	ldw	r2,1284(sp)
 40054b8:	91a5883a 	add	r18,r18,r6
 40054bc:	8c400044 	addi	r17,r17,1
 40054c0:	a8800015 	stw	r2,0(r21)
 40054c4:	008001c4 	movi	r2,7
 40054c8:	a9800115 	stw	r6,4(r21)
 40054cc:	dc800e15 	stw	r18,56(sp)
 40054d0:	dc400d15 	stw	r17,52(sp)
 40054d4:	1442f616 	blt	r2,r17,40060b0 <___vfprintf_internal_r+0x18a8>
 40054d8:	a8c00204 	addi	r3,r21,8
 40054dc:	d9414717 	ldw	r5,1308(sp)
 40054e0:	2161c83a 	sub	r16,r4,r5
 40054e4:	043f9d0e 	bge	zero,r16,400535c <___vfprintf_internal_r+0xb54>
 40054e8:	00800404 	movi	r2,16
 40054ec:	1402130e 	bge	r2,r16,4005d3c <___vfprintf_internal_r+0x1534>
 40054f0:	dc400d17 	ldw	r17,52(sp)
 40054f4:	1027883a 	mov	r19,r2
 40054f8:	070100f4 	movhi	fp,1027
 40054fc:	e70ad184 	addi	fp,fp,11078
 4005500:	050001c4 	movi	r20,7
 4005504:	00000306 	br	4005514 <___vfprintf_internal_r+0xd0c>
 4005508:	18c00204 	addi	r3,r3,8
 400550c:	843ffc04 	addi	r16,r16,-16
 4005510:	9c020d0e 	bge	r19,r16,4005d48 <___vfprintf_internal_r+0x1540>
 4005514:	94800404 	addi	r18,r18,16
 4005518:	8c400044 	addi	r17,r17,1
 400551c:	1f000015 	stw	fp,0(r3)
 4005520:	1cc00115 	stw	r19,4(r3)
 4005524:	dc800e15 	stw	r18,56(sp)
 4005528:	dc400d15 	stw	r17,52(sp)
 400552c:	a47ff60e 	bge	r20,r17,4005508 <___vfprintf_internal_r+0xd00>
 4005530:	d9014f17 	ldw	r4,1340(sp)
 4005534:	b00b883a 	mov	r5,r22
 4005538:	d9800c04 	addi	r6,sp,48
 400553c:	40047b00 	call	40047b0 <__sprint_r>
 4005540:	103e691e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005544:	dc800e17 	ldw	r18,56(sp)
 4005548:	dc400d17 	ldw	r17,52(sp)
 400554c:	d8c01904 	addi	r3,sp,100
 4005550:	003fee06 	br	400550c <___vfprintf_internal_r+0xd04>
 4005554:	d8814717 	ldw	r2,1308(sp)
 4005558:	143fffc4 	addi	r16,r2,-1
 400555c:	043e970e 	bge	zero,r16,4004fbc <___vfprintf_internal_r+0x7b4>
 4005560:	00800404 	movi	r2,16
 4005564:	1400180e 	bge	r2,r16,40055c8 <___vfprintf_internal_r+0xdc0>
 4005568:	1029883a 	mov	r20,r2
 400556c:	070100f4 	movhi	fp,1027
 4005570:	e70ad184 	addi	fp,fp,11078
 4005574:	054001c4 	movi	r21,7
 4005578:	00000306 	br	4005588 <___vfprintf_internal_r+0xd80>
 400557c:	9cc00204 	addi	r19,r19,8
 4005580:	843ffc04 	addi	r16,r16,-16
 4005584:	a400120e 	bge	r20,r16,40055d0 <___vfprintf_internal_r+0xdc8>
 4005588:	94800404 	addi	r18,r18,16
 400558c:	8c400044 	addi	r17,r17,1
 4005590:	9f000015 	stw	fp,0(r19)
 4005594:	9d000115 	stw	r20,4(r19)
 4005598:	dc800e15 	stw	r18,56(sp)
 400559c:	dc400d15 	stw	r17,52(sp)
 40055a0:	ac7ff60e 	bge	r21,r17,400557c <___vfprintf_internal_r+0xd74>
 40055a4:	d9014f17 	ldw	r4,1340(sp)
 40055a8:	b00b883a 	mov	r5,r22
 40055ac:	d9800c04 	addi	r6,sp,48
 40055b0:	40047b00 	call	40047b0 <__sprint_r>
 40055b4:	103e4c1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40055b8:	dc800e17 	ldw	r18,56(sp)
 40055bc:	dc400d17 	ldw	r17,52(sp)
 40055c0:	dcc01904 	addi	r19,sp,100
 40055c4:	003fee06 	br	4005580 <___vfprintf_internal_r+0xd78>
 40055c8:	070100f4 	movhi	fp,1027
 40055cc:	e70ad184 	addi	fp,fp,11078
 40055d0:	9425883a 	add	r18,r18,r16
 40055d4:	8c400044 	addi	r17,r17,1
 40055d8:	008001c4 	movi	r2,7
 40055dc:	9f000015 	stw	fp,0(r19)
 40055e0:	9c000115 	stw	r16,4(r19)
 40055e4:	dc800e15 	stw	r18,56(sp)
 40055e8:	dc400d15 	stw	r17,52(sp)
 40055ec:	147e720e 	bge	r2,r17,4004fb8 <___vfprintf_internal_r+0x7b0>
 40055f0:	d9014f17 	ldw	r4,1340(sp)
 40055f4:	b00b883a 	mov	r5,r22
 40055f8:	d9800c04 	addi	r6,sp,48
 40055fc:	40047b00 	call	40047b0 <__sprint_r>
 4005600:	103e391e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005604:	dc800e17 	ldw	r18,56(sp)
 4005608:	dc400d17 	ldw	r17,52(sp)
 400560c:	dcc01904 	addi	r19,sp,100
 4005610:	003e6a06 	br	4004fbc <___vfprintf_internal_r+0x7b4>
 4005614:	d9014f17 	ldw	r4,1340(sp)
 4005618:	b00b883a 	mov	r5,r22
 400561c:	d9800c04 	addi	r6,sp,48
 4005620:	d9c15115 	stw	r7,1348(sp)
 4005624:	40047b00 	call	40047b0 <__sprint_r>
 4005628:	d9c15117 	ldw	r7,1348(sp)
 400562c:	103e2e1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005630:	dc800e17 	ldw	r18,56(sp)
 4005634:	dc400d17 	ldw	r17,52(sp)
 4005638:	dd401904 	addi	r21,sp,100
 400563c:	003dba06 	br	4004d28 <___vfprintf_internal_r+0x520>
 4005640:	d9014f17 	ldw	r4,1340(sp)
 4005644:	b00b883a 	mov	r5,r22
 4005648:	d9800c04 	addi	r6,sp,48
 400564c:	40047b00 	call	40047b0 <__sprint_r>
 4005650:	103e251e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005654:	dc800e17 	ldw	r18,56(sp)
 4005658:	dc400d17 	ldw	r17,52(sp)
 400565c:	dcc01904 	addi	r19,sp,100
 4005660:	003e4206 	br	4004f6c <___vfprintf_internal_r+0x764>
 4005664:	d9014f17 	ldw	r4,1340(sp)
 4005668:	b00b883a 	mov	r5,r22
 400566c:	d9800c04 	addi	r6,sp,48
 4005670:	40047b00 	call	40047b0 <__sprint_r>
 4005674:	103e1c1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005678:	dc800e17 	ldw	r18,56(sp)
 400567c:	dc400d17 	ldw	r17,52(sp)
 4005680:	d8c01904 	addi	r3,sp,100
 4005684:	003e2e06 	br	4004f40 <___vfprintf_internal_r+0x738>
 4005688:	d9414c17 	ldw	r5,1328(sp)
 400568c:	2880004c 	andi	r2,r5,1
 4005690:	1005003a 	cmpeq	r2,r2,zero
 4005694:	103dda1e 	bne	r2,zero,4004e00 <___vfprintf_internal_r+0x5f8>
 4005698:	003e9f06 	br	4005118 <___vfprintf_internal_r+0x910>
 400569c:	d8c14117 	ldw	r3,1284(sp)
 40056a0:	9125883a 	add	r18,r18,r4
 40056a4:	8c400044 	addi	r17,r17,1
 40056a8:	008001c4 	movi	r2,7
 40056ac:	a8c00015 	stw	r3,0(r21)
 40056b0:	a9000115 	stw	r4,4(r21)
 40056b4:	dc800e15 	stw	r18,56(sp)
 40056b8:	dc400d15 	stw	r17,52(sp)
 40056bc:	14426616 	blt	r2,r17,4006058 <___vfprintf_internal_r+0x1850>
 40056c0:	a8c00204 	addi	r3,r21,8
 40056c4:	d9414917 	ldw	r5,1316(sp)
 40056c8:	00800044 	movi	r2,1
 40056cc:	94800044 	addi	r18,r18,1
 40056d0:	8c400044 	addi	r17,r17,1
 40056d4:	18800115 	stw	r2,4(r3)
 40056d8:	008001c4 	movi	r2,7
 40056dc:	19400015 	stw	r5,0(r3)
 40056e0:	dc800e15 	stw	r18,56(sp)
 40056e4:	dc400d15 	stw	r17,52(sp)
 40056e8:	2021883a 	mov	r16,r4
 40056ec:	14425016 	blt	r2,r17,4006030 <___vfprintf_internal_r+0x1828>
 40056f0:	19400204 	addi	r5,r3,8
 40056f4:	d9814717 	ldw	r6,1308(sp)
 40056f8:	8c400044 	addi	r17,r17,1
 40056fc:	dc400d15 	stw	r17,52(sp)
 4005700:	3107c83a 	sub	r3,r6,r4
 4005704:	d9014117 	ldw	r4,1284(sp)
 4005708:	90e5883a 	add	r18,r18,r3
 400570c:	28c00115 	stw	r3,4(r5)
 4005710:	8105883a 	add	r2,r16,r4
 4005714:	28800015 	stw	r2,0(r5)
 4005718:	008001c4 	movi	r2,7
 400571c:	dc800e15 	stw	r18,56(sp)
 4005720:	147f1d16 	blt	r2,r17,4005398 <___vfprintf_internal_r+0xb90>
 4005724:	28c00204 	addi	r3,r5,8
 4005728:	003db506 	br	4004e00 <___vfprintf_internal_r+0x5f8>
 400572c:	3c000017 	ldw	r16,0(r7)
 4005730:	3c400117 	ldw	r17,4(r7)
 4005734:	39800204 	addi	r6,r7,8
 4005738:	01000044 	movi	r4,1
 400573c:	d9814015 	stw	r6,1280(sp)
 4005740:	d8000405 	stb	zero,16(sp)
 4005744:	003ebe06 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005748:	3c000017 	ldw	r16,0(r7)
 400574c:	3c400117 	ldw	r17,4(r7)
 4005750:	38800204 	addi	r2,r7,8
 4005754:	d8814015 	stw	r2,1280(sp)
 4005758:	003eb706 	br	4005238 <___vfprintf_internal_r+0xa30>
 400575c:	3c000017 	ldw	r16,0(r7)
 4005760:	3c400117 	ldw	r17,4(r7)
 4005764:	39000204 	addi	r4,r7,8
 4005768:	d9014015 	stw	r4,1280(sp)
 400576c:	0009883a 	mov	r4,zero
 4005770:	d8000405 	stb	zero,16(sp)
 4005774:	003eb206 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005778:	38c00017 	ldw	r3,0(r7)
 400577c:	39c00104 	addi	r7,r7,4
 4005780:	d8c14a15 	stw	r3,1320(sp)
 4005784:	1800d10e 	bge	r3,zero,4005acc <___vfprintf_internal_r+0x12c4>
 4005788:	00c7c83a 	sub	r3,zero,r3
 400578c:	d8c14a15 	stw	r3,1320(sp)
 4005790:	d9014c17 	ldw	r4,1328(sp)
 4005794:	b8c00007 	ldb	r3,0(r23)
 4005798:	21000114 	ori	r4,r4,4
 400579c:	d9014c15 	stw	r4,1328(sp)
 40057a0:	003c9806 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 40057a4:	d9814c17 	ldw	r6,1328(sp)
 40057a8:	3080080c 	andi	r2,r6,32
 40057ac:	1001f026 	beq	r2,zero,4005f70 <___vfprintf_internal_r+0x1768>
 40057b0:	d9014b17 	ldw	r4,1324(sp)
 40057b4:	38800017 	ldw	r2,0(r7)
 40057b8:	39c00104 	addi	r7,r7,4
 40057bc:	d9c14015 	stw	r7,1280(sp)
 40057c0:	2007d7fa 	srai	r3,r4,31
 40057c4:	d9c14017 	ldw	r7,1280(sp)
 40057c8:	11000015 	stw	r4,0(r2)
 40057cc:	10c00115 	stw	r3,4(r2)
 40057d0:	003c6906 	br	4004978 <___vfprintf_internal_r+0x170>
 40057d4:	b8c00007 	ldb	r3,0(r23)
 40057d8:	00801b04 	movi	r2,108
 40057dc:	18824f26 	beq	r3,r2,400611c <___vfprintf_internal_r+0x1914>
 40057e0:	d9414c17 	ldw	r5,1328(sp)
 40057e4:	29400414 	ori	r5,r5,16
 40057e8:	d9414c15 	stw	r5,1328(sp)
 40057ec:	003c8506 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 40057f0:	d9814c17 	ldw	r6,1328(sp)
 40057f4:	b8c00007 	ldb	r3,0(r23)
 40057f8:	31800814 	ori	r6,r6,32
 40057fc:	d9814c15 	stw	r6,1328(sp)
 4005800:	003c8006 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 4005804:	d8814c17 	ldw	r2,1328(sp)
 4005808:	3c000017 	ldw	r16,0(r7)
 400580c:	00c01e04 	movi	r3,120
 4005810:	10800094 	ori	r2,r2,2
 4005814:	d8814c15 	stw	r2,1328(sp)
 4005818:	39c00104 	addi	r7,r7,4
 400581c:	014100f4 	movhi	r5,1027
 4005820:	294aba04 	addi	r5,r5,10984
 4005824:	00800c04 	movi	r2,48
 4005828:	0023883a 	mov	r17,zero
 400582c:	01000084 	movi	r4,2
 4005830:	d9c14015 	stw	r7,1280(sp)
 4005834:	d8c14d15 	stw	r3,1332(sp)
 4005838:	d9414415 	stw	r5,1296(sp)
 400583c:	d8800445 	stb	r2,17(sp)
 4005840:	d8c00485 	stb	r3,18(sp)
 4005844:	d8000405 	stb	zero,16(sp)
 4005848:	003e7d06 	br	4005240 <___vfprintf_internal_r+0xa38>
 400584c:	d8814c17 	ldw	r2,1328(sp)
 4005850:	b8c00007 	ldb	r3,0(r23)
 4005854:	10801014 	ori	r2,r2,64
 4005858:	d8814c15 	stw	r2,1328(sp)
 400585c:	003c6906 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 4005860:	d9414c17 	ldw	r5,1328(sp)
 4005864:	2880020c 	andi	r2,r5,8
 4005868:	1001df26 	beq	r2,zero,4005fe8 <___vfprintf_internal_r+0x17e0>
 400586c:	39800017 	ldw	r6,0(r7)
 4005870:	38800204 	addi	r2,r7,8
 4005874:	d8814015 	stw	r2,1280(sp)
 4005878:	d9814215 	stw	r6,1288(sp)
 400587c:	39c00117 	ldw	r7,4(r7)
 4005880:	d9c14315 	stw	r7,1292(sp)
 4005884:	d9014217 	ldw	r4,1288(sp)
 4005888:	d9414317 	ldw	r5,1292(sp)
 400588c:	400af9c0 	call	400af9c <__isinfd>
 4005890:	10021726 	beq	r2,zero,40060f0 <___vfprintf_internal_r+0x18e8>
 4005894:	d9014217 	ldw	r4,1288(sp)
 4005898:	d9414317 	ldw	r5,1292(sp)
 400589c:	000d883a 	mov	r6,zero
 40058a0:	000f883a 	mov	r7,zero
 40058a4:	400d3040 	call	400d304 <__ltdf2>
 40058a8:	1002ca16 	blt	r2,zero,40063d4 <___vfprintf_internal_r+0x1bcc>
 40058ac:	d9414d17 	ldw	r5,1332(sp)
 40058b0:	008011c4 	movi	r2,71
 40058b4:	11420a16 	blt	r2,r5,40060e0 <___vfprintf_internal_r+0x18d8>
 40058b8:	018100f4 	movhi	r6,1027
 40058bc:	318abf04 	addi	r6,r6,11004
 40058c0:	d9814115 	stw	r6,1284(sp)
 40058c4:	d9014c17 	ldw	r4,1328(sp)
 40058c8:	00c000c4 	movi	r3,3
 40058cc:	00bfdfc4 	movi	r2,-129
 40058d0:	2088703a 	and	r4,r4,r2
 40058d4:	180f883a 	mov	r7,r3
 40058d8:	d8c14515 	stw	r3,1300(sp)
 40058dc:	d9014c15 	stw	r4,1328(sp)
 40058e0:	d8014615 	stw	zero,1304(sp)
 40058e4:	003e6a06 	br	4005290 <___vfprintf_internal_r+0xa88>
 40058e8:	38800017 	ldw	r2,0(r7)
 40058ec:	00c00044 	movi	r3,1
 40058f0:	39c00104 	addi	r7,r7,4
 40058f4:	d9c14015 	stw	r7,1280(sp)
 40058f8:	d9000f04 	addi	r4,sp,60
 40058fc:	180f883a 	mov	r7,r3
 4005900:	d8c14515 	stw	r3,1300(sp)
 4005904:	d9014115 	stw	r4,1284(sp)
 4005908:	d8800f05 	stb	r2,60(sp)
 400590c:	d8000405 	stb	zero,16(sp)
 4005910:	003cac06 	br	4004bc4 <___vfprintf_internal_r+0x3bc>
 4005914:	014100f4 	movhi	r5,1027
 4005918:	294ac504 	addi	r5,r5,11028
 400591c:	d9414415 	stw	r5,1296(sp)
 4005920:	d9814c17 	ldw	r6,1328(sp)
 4005924:	3080080c 	andi	r2,r6,32
 4005928:	1000f926 	beq	r2,zero,4005d10 <___vfprintf_internal_r+0x1508>
 400592c:	3c000017 	ldw	r16,0(r7)
 4005930:	3c400117 	ldw	r17,4(r7)
 4005934:	38800204 	addi	r2,r7,8
 4005938:	d8814015 	stw	r2,1280(sp)
 400593c:	d9414c17 	ldw	r5,1328(sp)
 4005940:	2880004c 	andi	r2,r5,1
 4005944:	1005003a 	cmpeq	r2,r2,zero
 4005948:	1000b31e 	bne	r2,zero,4005c18 <___vfprintf_internal_r+0x1410>
 400594c:	8444b03a 	or	r2,r16,r17
 4005950:	1000b126 	beq	r2,zero,4005c18 <___vfprintf_internal_r+0x1410>
 4005954:	d9814d17 	ldw	r6,1332(sp)
 4005958:	29400094 	ori	r5,r5,2
 400595c:	00800c04 	movi	r2,48
 4005960:	01000084 	movi	r4,2
 4005964:	d9414c15 	stw	r5,1328(sp)
 4005968:	d8800445 	stb	r2,17(sp)
 400596c:	d9800485 	stb	r6,18(sp)
 4005970:	d8000405 	stb	zero,16(sp)
 4005974:	003e3206 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005978:	018100f4 	movhi	r6,1027
 400597c:	318aba04 	addi	r6,r6,10984
 4005980:	d9814415 	stw	r6,1296(sp)
 4005984:	003fe606 	br	4005920 <___vfprintf_internal_r+0x1118>
 4005988:	00800ac4 	movi	r2,43
 400598c:	d8800405 	stb	r2,16(sp)
 4005990:	b8c00007 	ldb	r3,0(r23)
 4005994:	003c1b06 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 4005998:	d8814c17 	ldw	r2,1328(sp)
 400599c:	b8c00007 	ldb	r3,0(r23)
 40059a0:	10800054 	ori	r2,r2,1
 40059a4:	d8814c15 	stw	r2,1328(sp)
 40059a8:	003c1606 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 40059ac:	d8800407 	ldb	r2,16(sp)
 40059b0:	1000461e 	bne	r2,zero,4005acc <___vfprintf_internal_r+0x12c4>
 40059b4:	00800804 	movi	r2,32
 40059b8:	d8800405 	stb	r2,16(sp)
 40059bc:	b8c00007 	ldb	r3,0(r23)
 40059c0:	003c1006 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 40059c4:	d9814c17 	ldw	r6,1328(sp)
 40059c8:	b8c00007 	ldb	r3,0(r23)
 40059cc:	31800214 	ori	r6,r6,8
 40059d0:	d9814c15 	stw	r6,1328(sp)
 40059d4:	003c0b06 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 40059d8:	0007883a 	mov	r3,zero
 40059dc:	01000244 	movi	r4,9
 40059e0:	188002a4 	muli	r2,r3,10
 40059e4:	b8c00007 	ldb	r3,0(r23)
 40059e8:	d9814d17 	ldw	r6,1332(sp)
 40059ec:	bdc00044 	addi	r23,r23,1
 40059f0:	d8c14d15 	stw	r3,1332(sp)
 40059f4:	d9414d17 	ldw	r5,1332(sp)
 40059f8:	3085883a 	add	r2,r6,r2
 40059fc:	10fff404 	addi	r3,r2,-48
 4005a00:	28bff404 	addi	r2,r5,-48
 4005a04:	20bff62e 	bgeu	r4,r2,40059e0 <___vfprintf_internal_r+0x11d8>
 4005a08:	d8c14a15 	stw	r3,1320(sp)
 4005a0c:	003bff06 	br	4004a0c <___vfprintf_internal_r+0x204>
 4005a10:	d9414c17 	ldw	r5,1328(sp)
 4005a14:	b8c00007 	ldb	r3,0(r23)
 4005a18:	29402014 	ori	r5,r5,128
 4005a1c:	d9414c15 	stw	r5,1328(sp)
 4005a20:	003bf806 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 4005a24:	b8c00007 	ldb	r3,0(r23)
 4005a28:	00800a84 	movi	r2,42
 4005a2c:	bdc00044 	addi	r23,r23,1
 4005a30:	18831526 	beq	r3,r2,4006688 <___vfprintf_internal_r+0x1e80>
 4005a34:	d8c14d15 	stw	r3,1332(sp)
 4005a38:	18bff404 	addi	r2,r3,-48
 4005a3c:	00c00244 	movi	r3,9
 4005a40:	18827836 	bltu	r3,r2,4006424 <___vfprintf_internal_r+0x1c1c>
 4005a44:	000d883a 	mov	r6,zero
 4005a48:	308002a4 	muli	r2,r6,10
 4005a4c:	b9800007 	ldb	r6,0(r23)
 4005a50:	d9414d17 	ldw	r5,1332(sp)
 4005a54:	bdc00044 	addi	r23,r23,1
 4005a58:	d9814d15 	stw	r6,1332(sp)
 4005a5c:	d9014d17 	ldw	r4,1332(sp)
 4005a60:	1145883a 	add	r2,r2,r5
 4005a64:	11bff404 	addi	r6,r2,-48
 4005a68:	20bff404 	addi	r2,r4,-48
 4005a6c:	18bff62e 	bgeu	r3,r2,4005a48 <___vfprintf_internal_r+0x1240>
 4005a70:	3027883a 	mov	r19,r6
 4005a74:	303be50e 	bge	r6,zero,4004a0c <___vfprintf_internal_r+0x204>
 4005a78:	04ffffc4 	movi	r19,-1
 4005a7c:	003be306 	br	4004a0c <___vfprintf_internal_r+0x204>
 4005a80:	d8000405 	stb	zero,16(sp)
 4005a84:	39800017 	ldw	r6,0(r7)
 4005a88:	39c00104 	addi	r7,r7,4
 4005a8c:	d9c14015 	stw	r7,1280(sp)
 4005a90:	d9814115 	stw	r6,1284(sp)
 4005a94:	3001c926 	beq	r6,zero,40061bc <___vfprintf_internal_r+0x19b4>
 4005a98:	98000e16 	blt	r19,zero,4005ad4 <___vfprintf_internal_r+0x12cc>
 4005a9c:	d9014117 	ldw	r4,1284(sp)
 4005aa0:	000b883a 	mov	r5,zero
 4005aa4:	980d883a 	mov	r6,r19
 4005aa8:	40095640 	call	4009564 <memchr>
 4005aac:	10025926 	beq	r2,zero,4006414 <___vfprintf_internal_r+0x1c0c>
 4005ab0:	d8c14117 	ldw	r3,1284(sp)
 4005ab4:	10cfc83a 	sub	r7,r2,r3
 4005ab8:	99c19e16 	blt	r19,r7,4006134 <___vfprintf_internal_r+0x192c>
 4005abc:	d9c14515 	stw	r7,1300(sp)
 4005ac0:	38000916 	blt	r7,zero,4005ae8 <___vfprintf_internal_r+0x12e0>
 4005ac4:	d8014615 	stw	zero,1304(sp)
 4005ac8:	003df106 	br	4005290 <___vfprintf_internal_r+0xa88>
 4005acc:	b8c00007 	ldb	r3,0(r23)
 4005ad0:	003bcc06 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 4005ad4:	d9014117 	ldw	r4,1284(sp)
 4005ad8:	400472c0 	call	400472c <strlen>
 4005adc:	d8814515 	stw	r2,1300(sp)
 4005ae0:	100f883a 	mov	r7,r2
 4005ae4:	103ff70e 	bge	r2,zero,4005ac4 <___vfprintf_internal_r+0x12bc>
 4005ae8:	d8014515 	stw	zero,1300(sp)
 4005aec:	d8014615 	stw	zero,1304(sp)
 4005af0:	003de706 	br	4005290 <___vfprintf_internal_r+0xa88>
 4005af4:	20c03fcc 	andi	r3,r4,255
 4005af8:	00800044 	movi	r2,1
 4005afc:	18802d26 	beq	r3,r2,4005bb4 <___vfprintf_internal_r+0x13ac>
 4005b00:	18800e36 	bltu	r3,r2,4005b3c <___vfprintf_internal_r+0x1334>
 4005b04:	00800084 	movi	r2,2
 4005b08:	1880fa26 	beq	r3,r2,4005ef4 <___vfprintf_internal_r+0x16ec>
 4005b0c:	010100f4 	movhi	r4,1027
 4005b10:	210aca04 	addi	r4,r4,11048
 4005b14:	400472c0 	call	400472c <strlen>
 4005b18:	100f883a 	mov	r7,r2
 4005b1c:	dcc14515 	stw	r19,1300(sp)
 4005b20:	9880010e 	bge	r19,r2,4005b28 <___vfprintf_internal_r+0x1320>
 4005b24:	d8814515 	stw	r2,1300(sp)
 4005b28:	008100f4 	movhi	r2,1027
 4005b2c:	108aca04 	addi	r2,r2,11048
 4005b30:	dcc14615 	stw	r19,1304(sp)
 4005b34:	d8814115 	stw	r2,1284(sp)
 4005b38:	003dd506 	br	4005290 <___vfprintf_internal_r+0xa88>
 4005b3c:	d9401904 	addi	r5,sp,100
 4005b40:	dd000f04 	addi	r20,sp,60
 4005b44:	d9414115 	stw	r5,1284(sp)
 4005b48:	880a977a 	slli	r5,r17,29
 4005b4c:	d9814117 	ldw	r6,1284(sp)
 4005b50:	8004d0fa 	srli	r2,r16,3
 4005b54:	8806d0fa 	srli	r3,r17,3
 4005b58:	810001cc 	andi	r4,r16,7
 4005b5c:	2884b03a 	or	r2,r5,r2
 4005b60:	31bfffc4 	addi	r6,r6,-1
 4005b64:	21000c04 	addi	r4,r4,48
 4005b68:	d9814115 	stw	r6,1284(sp)
 4005b6c:	10cab03a 	or	r5,r2,r3
 4005b70:	31000005 	stb	r4,0(r6)
 4005b74:	1021883a 	mov	r16,r2
 4005b78:	1823883a 	mov	r17,r3
 4005b7c:	283ff21e 	bne	r5,zero,4005b48 <___vfprintf_internal_r+0x1340>
 4005b80:	d8c14c17 	ldw	r3,1328(sp)
 4005b84:	1880004c 	andi	r2,r3,1
 4005b88:	1005003a 	cmpeq	r2,r2,zero
 4005b8c:	103db91e 	bne	r2,zero,4005274 <___vfprintf_internal_r+0xa6c>
 4005b90:	20803fcc 	andi	r2,r4,255
 4005b94:	1080201c 	xori	r2,r2,128
 4005b98:	10bfe004 	addi	r2,r2,-128
 4005b9c:	00c00c04 	movi	r3,48
 4005ba0:	10fdb426 	beq	r2,r3,4005274 <___vfprintf_internal_r+0xa6c>
 4005ba4:	31bfffc4 	addi	r6,r6,-1
 4005ba8:	d9814115 	stw	r6,1284(sp)
 4005bac:	30c00005 	stb	r3,0(r6)
 4005bb0:	003db006 	br	4005274 <___vfprintf_internal_r+0xa6c>
 4005bb4:	88800068 	cmpgeui	r2,r17,1
 4005bb8:	10002c1e 	bne	r2,zero,4005c6c <___vfprintf_internal_r+0x1464>
 4005bbc:	8800021e 	bne	r17,zero,4005bc8 <___vfprintf_internal_r+0x13c0>
 4005bc0:	00800244 	movi	r2,9
 4005bc4:	14002936 	bltu	r2,r16,4005c6c <___vfprintf_internal_r+0x1464>
 4005bc8:	d90018c4 	addi	r4,sp,99
 4005bcc:	dd000f04 	addi	r20,sp,60
 4005bd0:	d9014115 	stw	r4,1284(sp)
 4005bd4:	d9014117 	ldw	r4,1284(sp)
 4005bd8:	80800c04 	addi	r2,r16,48
 4005bdc:	20800005 	stb	r2,0(r4)
 4005be0:	003da406 	br	4005274 <___vfprintf_internal_r+0xa6c>
 4005be4:	dc400d17 	ldw	r17,52(sp)
 4005be8:	070100f4 	movhi	fp,1027
 4005bec:	e70ad184 	addi	fp,fp,11078
 4005bf0:	9425883a 	add	r18,r18,r16
 4005bf4:	8c400044 	addi	r17,r17,1
 4005bf8:	008001c4 	movi	r2,7
 4005bfc:	1f000015 	stw	fp,0(r3)
 4005c00:	1c000115 	stw	r16,4(r3)
 4005c04:	dc800e15 	stw	r18,56(sp)
 4005c08:	dc400d15 	stw	r17,52(sp)
 4005c0c:	147de216 	blt	r2,r17,4005398 <___vfprintf_internal_r+0xb90>
 4005c10:	18c00204 	addi	r3,r3,8
 4005c14:	003c7a06 	br	4004e00 <___vfprintf_internal_r+0x5f8>
 4005c18:	01000084 	movi	r4,2
 4005c1c:	d8000405 	stb	zero,16(sp)
 4005c20:	003d8706 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005c24:	d9814c17 	ldw	r6,1328(sp)
 4005c28:	30c4703a 	and	r2,r6,r3
 4005c2c:	1005003a 	cmpeq	r2,r2,zero
 4005c30:	103cb926 	beq	r2,zero,4004f18 <___vfprintf_internal_r+0x710>
 4005c34:	d9014117 	ldw	r4,1284(sp)
 4005c38:	94800044 	addi	r18,r18,1
 4005c3c:	8c400044 	addi	r17,r17,1
 4005c40:	008001c4 	movi	r2,7
 4005c44:	a9000015 	stw	r4,0(r21)
 4005c48:	a8c00115 	stw	r3,4(r21)
 4005c4c:	dc800e15 	stw	r18,56(sp)
 4005c50:	dc400d15 	stw	r17,52(sp)
 4005c54:	147e6616 	blt	r2,r17,40055f0 <___vfprintf_internal_r+0xde8>
 4005c58:	acc00204 	addi	r19,r21,8
 4005c5c:	003cd706 	br	4004fbc <___vfprintf_internal_r+0x7b4>
 4005c60:	070100f4 	movhi	fp,1027
 4005c64:	e70ad184 	addi	fp,fp,11078
 4005c68:	003c4f06 	br	4004da8 <___vfprintf_internal_r+0x5a0>
 4005c6c:	dd000f04 	addi	r20,sp,60
 4005c70:	dc801904 	addi	r18,sp,100
 4005c74:	8009883a 	mov	r4,r16
 4005c78:	880b883a 	mov	r5,r17
 4005c7c:	01800284 	movi	r6,10
 4005c80:	000f883a 	mov	r7,zero
 4005c84:	400c0140 	call	400c014 <__umoddi3>
 4005c88:	12000c04 	addi	r8,r2,48
 4005c8c:	94bfffc4 	addi	r18,r18,-1
 4005c90:	8009883a 	mov	r4,r16
 4005c94:	880b883a 	mov	r5,r17
 4005c98:	01800284 	movi	r6,10
 4005c9c:	000f883a 	mov	r7,zero
 4005ca0:	92000005 	stb	r8,0(r18)
 4005ca4:	400ba380 	call	400ba38 <__udivdi3>
 4005ca8:	1009883a 	mov	r4,r2
 4005cac:	1021883a 	mov	r16,r2
 4005cb0:	18800068 	cmpgeui	r2,r3,1
 4005cb4:	1823883a 	mov	r17,r3
 4005cb8:	103fee1e 	bne	r2,zero,4005c74 <___vfprintf_internal_r+0x146c>
 4005cbc:	1800021e 	bne	r3,zero,4005cc8 <___vfprintf_internal_r+0x14c0>
 4005cc0:	00800244 	movi	r2,9
 4005cc4:	113feb36 	bltu	r2,r4,4005c74 <___vfprintf_internal_r+0x146c>
 4005cc8:	94bfffc4 	addi	r18,r18,-1
 4005ccc:	dc814115 	stw	r18,1284(sp)
 4005cd0:	003fc006 	br	4005bd4 <___vfprintf_internal_r+0x13cc>
 4005cd4:	d9014c17 	ldw	r4,1328(sp)
 4005cd8:	2080004c 	andi	r2,r4,1
 4005cdc:	10009a1e 	bne	r2,zero,4005f48 <___vfprintf_internal_r+0x1740>
 4005ce0:	d9401904 	addi	r5,sp,100
 4005ce4:	dd000f04 	addi	r20,sp,60
 4005ce8:	d9414115 	stw	r5,1284(sp)
 4005cec:	003d6106 	br	4005274 <___vfprintf_internal_r+0xa6c>
 4005cf0:	d9014f17 	ldw	r4,1340(sp)
 4005cf4:	b00b883a 	mov	r5,r22
 4005cf8:	d9800c04 	addi	r6,sp,48
 4005cfc:	40047b00 	call	40047b0 <__sprint_r>
 4005d00:	103c791e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005d04:	dc800e17 	ldw	r18,56(sp)
 4005d08:	d8c01904 	addi	r3,sp,100
 4005d0c:	003cff06 	br	400510c <___vfprintf_internal_r+0x904>
 4005d10:	d8c14c17 	ldw	r3,1328(sp)
 4005d14:	1880040c 	andi	r2,r3,16
 4005d18:	1000711e 	bne	r2,zero,4005ee0 <___vfprintf_internal_r+0x16d8>
 4005d1c:	d9014c17 	ldw	r4,1328(sp)
 4005d20:	2080100c 	andi	r2,r4,64
 4005d24:	10006e26 	beq	r2,zero,4005ee0 <___vfprintf_internal_r+0x16d8>
 4005d28:	3c00000b 	ldhu	r16,0(r7)
 4005d2c:	0023883a 	mov	r17,zero
 4005d30:	39c00104 	addi	r7,r7,4
 4005d34:	d9c14015 	stw	r7,1280(sp)
 4005d38:	003f0006 	br	400593c <___vfprintf_internal_r+0x1134>
 4005d3c:	dc400d17 	ldw	r17,52(sp)
 4005d40:	070100f4 	movhi	fp,1027
 4005d44:	e70ad184 	addi	fp,fp,11078
 4005d48:	9425883a 	add	r18,r18,r16
 4005d4c:	8c400044 	addi	r17,r17,1
 4005d50:	008001c4 	movi	r2,7
 4005d54:	1f000015 	stw	fp,0(r3)
 4005d58:	1c000115 	stw	r16,4(r3)
 4005d5c:	dc800e15 	stw	r18,56(sp)
 4005d60:	dc400d15 	stw	r17,52(sp)
 4005d64:	147d7616 	blt	r2,r17,4005340 <___vfprintf_internal_r+0xb38>
 4005d68:	18c00204 	addi	r3,r3,8
 4005d6c:	003d7b06 	br	400535c <___vfprintf_internal_r+0xb54>
 4005d70:	dc800e17 	ldw	r18,56(sp)
 4005d74:	dc400d17 	ldw	r17,52(sp)
 4005d78:	070100f4 	movhi	fp,1027
 4005d7c:	e70ad584 	addi	fp,fp,11094
 4005d80:	003bc006 	br	4004c84 <___vfprintf_internal_r+0x47c>
 4005d84:	d9014f17 	ldw	r4,1340(sp)
 4005d88:	b00b883a 	mov	r5,r22
 4005d8c:	d9800c04 	addi	r6,sp,48
 4005d90:	40047b00 	call	40047b0 <__sprint_r>
 4005d94:	103c541e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005d98:	dc800e17 	ldw	r18,56(sp)
 4005d9c:	d8c01904 	addi	r3,sp,100
 4005da0:	003ce906 	br	4005148 <___vfprintf_internal_r+0x940>
 4005da4:	3c000017 	ldw	r16,0(r7)
 4005da8:	0009883a 	mov	r4,zero
 4005dac:	39c00104 	addi	r7,r7,4
 4005db0:	0023883a 	mov	r17,zero
 4005db4:	d9c14015 	stw	r7,1280(sp)
 4005db8:	d8000405 	stb	zero,16(sp)
 4005dbc:	003d2006 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005dc0:	38800017 	ldw	r2,0(r7)
 4005dc4:	39c00104 	addi	r7,r7,4
 4005dc8:	d9c14015 	stw	r7,1280(sp)
 4005dcc:	1023d7fa 	srai	r17,r2,31
 4005dd0:	1021883a 	mov	r16,r2
 4005dd4:	003d1806 	br	4005238 <___vfprintf_internal_r+0xa30>
 4005dd8:	3c000017 	ldw	r16,0(r7)
 4005ddc:	01000044 	movi	r4,1
 4005de0:	39c00104 	addi	r7,r7,4
 4005de4:	0023883a 	mov	r17,zero
 4005de8:	d9c14015 	stw	r7,1280(sp)
 4005dec:	d8000405 	stb	zero,16(sp)
 4005df0:	003d1306 	br	4005240 <___vfprintf_internal_r+0xa38>
 4005df4:	008100f4 	movhi	r2,1027
 4005df8:	108ad104 	addi	r2,r2,11076
 4005dfc:	94800044 	addi	r18,r18,1
 4005e00:	8c400044 	addi	r17,r17,1
 4005e04:	a8800015 	stw	r2,0(r21)
 4005e08:	00c00044 	movi	r3,1
 4005e0c:	008001c4 	movi	r2,7
 4005e10:	a8c00115 	stw	r3,4(r21)
 4005e14:	dc800e15 	stw	r18,56(sp)
 4005e18:	dc400d15 	stw	r17,52(sp)
 4005e1c:	1440ca16 	blt	r2,r17,4006148 <___vfprintf_internal_r+0x1940>
 4005e20:	a8c00204 	addi	r3,r21,8
 4005e24:	2000061e 	bne	r4,zero,4005e40 <___vfprintf_internal_r+0x1638>
 4005e28:	d9414717 	ldw	r5,1308(sp)
 4005e2c:	2800041e 	bne	r5,zero,4005e40 <___vfprintf_internal_r+0x1638>
 4005e30:	d9814c17 	ldw	r6,1328(sp)
 4005e34:	3080004c 	andi	r2,r6,1
 4005e38:	1005003a 	cmpeq	r2,r2,zero
 4005e3c:	103bf01e 	bne	r2,zero,4004e00 <___vfprintf_internal_r+0x5f8>
 4005e40:	00800044 	movi	r2,1
 4005e44:	dc400d17 	ldw	r17,52(sp)
 4005e48:	18800115 	stw	r2,4(r3)
 4005e4c:	d8814917 	ldw	r2,1316(sp)
 4005e50:	94800044 	addi	r18,r18,1
 4005e54:	8c400044 	addi	r17,r17,1
 4005e58:	18800015 	stw	r2,0(r3)
 4005e5c:	008001c4 	movi	r2,7
 4005e60:	dc800e15 	stw	r18,56(sp)
 4005e64:	dc400d15 	stw	r17,52(sp)
 4005e68:	1440ca16 	blt	r2,r17,4006194 <___vfprintf_internal_r+0x198c>
 4005e6c:	18c00204 	addi	r3,r3,8
 4005e70:	0121c83a 	sub	r16,zero,r4
 4005e74:	0400500e 	bge	zero,r16,4005fb8 <___vfprintf_internal_r+0x17b0>
 4005e78:	00800404 	movi	r2,16
 4005e7c:	1400800e 	bge	r2,r16,4006080 <___vfprintf_internal_r+0x1878>
 4005e80:	1027883a 	mov	r19,r2
 4005e84:	070100f4 	movhi	fp,1027
 4005e88:	e70ad184 	addi	fp,fp,11078
 4005e8c:	050001c4 	movi	r20,7
 4005e90:	00000306 	br	4005ea0 <___vfprintf_internal_r+0x1698>
 4005e94:	18c00204 	addi	r3,r3,8
 4005e98:	843ffc04 	addi	r16,r16,-16
 4005e9c:	9c007a0e 	bge	r19,r16,4006088 <___vfprintf_internal_r+0x1880>
 4005ea0:	94800404 	addi	r18,r18,16
 4005ea4:	8c400044 	addi	r17,r17,1
 4005ea8:	1f000015 	stw	fp,0(r3)
 4005eac:	1cc00115 	stw	r19,4(r3)
 4005eb0:	dc800e15 	stw	r18,56(sp)
 4005eb4:	dc400d15 	stw	r17,52(sp)
 4005eb8:	a47ff60e 	bge	r20,r17,4005e94 <___vfprintf_internal_r+0x168c>
 4005ebc:	d9014f17 	ldw	r4,1340(sp)
 4005ec0:	b00b883a 	mov	r5,r22
 4005ec4:	d9800c04 	addi	r6,sp,48
 4005ec8:	40047b00 	call	40047b0 <__sprint_r>
 4005ecc:	103c061e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005ed0:	dc800e17 	ldw	r18,56(sp)
 4005ed4:	dc400d17 	ldw	r17,52(sp)
 4005ed8:	d8c01904 	addi	r3,sp,100
 4005edc:	003fee06 	br	4005e98 <___vfprintf_internal_r+0x1690>
 4005ee0:	3c000017 	ldw	r16,0(r7)
 4005ee4:	0023883a 	mov	r17,zero
 4005ee8:	39c00104 	addi	r7,r7,4
 4005eec:	d9c14015 	stw	r7,1280(sp)
 4005ef0:	003e9206 	br	400593c <___vfprintf_internal_r+0x1134>
 4005ef4:	d9401904 	addi	r5,sp,100
 4005ef8:	dd000f04 	addi	r20,sp,60
 4005efc:	d9414115 	stw	r5,1284(sp)
 4005f00:	d9814417 	ldw	r6,1296(sp)
 4005f04:	880a973a 	slli	r5,r17,28
 4005f08:	8004d13a 	srli	r2,r16,4
 4005f0c:	810003cc 	andi	r4,r16,15
 4005f10:	3109883a 	add	r4,r6,r4
 4005f14:	2884b03a 	or	r2,r5,r2
 4005f18:	21400003 	ldbu	r5,0(r4)
 4005f1c:	d9014117 	ldw	r4,1284(sp)
 4005f20:	8806d13a 	srli	r3,r17,4
 4005f24:	1021883a 	mov	r16,r2
 4005f28:	213fffc4 	addi	r4,r4,-1
 4005f2c:	d9014115 	stw	r4,1284(sp)
 4005f30:	d9814117 	ldw	r6,1284(sp)
 4005f34:	10c8b03a 	or	r4,r2,r3
 4005f38:	1823883a 	mov	r17,r3
 4005f3c:	31400005 	stb	r5,0(r6)
 4005f40:	203fef1e 	bne	r4,zero,4005f00 <___vfprintf_internal_r+0x16f8>
 4005f44:	003ccb06 	br	4005274 <___vfprintf_internal_r+0xa6c>
 4005f48:	00800c04 	movi	r2,48
 4005f4c:	d98018c4 	addi	r6,sp,99
 4005f50:	dd000f04 	addi	r20,sp,60
 4005f54:	d88018c5 	stb	r2,99(sp)
 4005f58:	d9814115 	stw	r6,1284(sp)
 4005f5c:	003cc506 	br	4005274 <___vfprintf_internal_r+0xa6c>
 4005f60:	dc400d17 	ldw	r17,52(sp)
 4005f64:	070100f4 	movhi	fp,1027
 4005f68:	e70ad584 	addi	fp,fp,11094
 4005f6c:	003bc706 	br	4004e8c <___vfprintf_internal_r+0x684>
 4005f70:	d9414c17 	ldw	r5,1328(sp)
 4005f74:	2880040c 	andi	r2,r5,16
 4005f78:	10007c26 	beq	r2,zero,400616c <___vfprintf_internal_r+0x1964>
 4005f7c:	38800017 	ldw	r2,0(r7)
 4005f80:	39c00104 	addi	r7,r7,4
 4005f84:	d9c14015 	stw	r7,1280(sp)
 4005f88:	d9814b17 	ldw	r6,1324(sp)
 4005f8c:	d9c14017 	ldw	r7,1280(sp)
 4005f90:	11800015 	stw	r6,0(r2)
 4005f94:	003a7806 	br	4004978 <___vfprintf_internal_r+0x170>
 4005f98:	d9014f17 	ldw	r4,1340(sp)
 4005f9c:	b00b883a 	mov	r5,r22
 4005fa0:	d9800c04 	addi	r6,sp,48
 4005fa4:	40047b00 	call	40047b0 <__sprint_r>
 4005fa8:	103bcf1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4005fac:	dc800e17 	ldw	r18,56(sp)
 4005fb0:	dc400d17 	ldw	r17,52(sp)
 4005fb4:	d8c01904 	addi	r3,sp,100
 4005fb8:	d9014717 	ldw	r4,1308(sp)
 4005fbc:	d9414117 	ldw	r5,1284(sp)
 4005fc0:	8c400044 	addi	r17,r17,1
 4005fc4:	9125883a 	add	r18,r18,r4
 4005fc8:	008001c4 	movi	r2,7
 4005fcc:	19400015 	stw	r5,0(r3)
 4005fd0:	19000115 	stw	r4,4(r3)
 4005fd4:	dc800e15 	stw	r18,56(sp)
 4005fd8:	dc400d15 	stw	r17,52(sp)
 4005fdc:	147cee16 	blt	r2,r17,4005398 <___vfprintf_internal_r+0xb90>
 4005fe0:	18c00204 	addi	r3,r3,8
 4005fe4:	003b8606 	br	4004e00 <___vfprintf_internal_r+0x5f8>
 4005fe8:	38c00017 	ldw	r3,0(r7)
 4005fec:	39000204 	addi	r4,r7,8
 4005ff0:	d9014015 	stw	r4,1280(sp)
 4005ff4:	d8c14215 	stw	r3,1288(sp)
 4005ff8:	39c00117 	ldw	r7,4(r7)
 4005ffc:	d9c14315 	stw	r7,1292(sp)
 4006000:	003e2006 	br	4005884 <___vfprintf_internal_r+0x107c>
 4006004:	0005883a 	mov	r2,zero
 4006008:	1409c83a 	sub	r4,r2,r16
 400600c:	1105803a 	cmpltu	r2,r2,r4
 4006010:	044bc83a 	sub	r5,zero,r17
 4006014:	2885c83a 	sub	r2,r5,r2
 4006018:	2021883a 	mov	r16,r4
 400601c:	1023883a 	mov	r17,r2
 4006020:	01000044 	movi	r4,1
 4006024:	00800b44 	movi	r2,45
 4006028:	d8800405 	stb	r2,16(sp)
 400602c:	003c8406 	br	4005240 <___vfprintf_internal_r+0xa38>
 4006030:	d9014f17 	ldw	r4,1340(sp)
 4006034:	b00b883a 	mov	r5,r22
 4006038:	d9800c04 	addi	r6,sp,48
 400603c:	40047b00 	call	40047b0 <__sprint_r>
 4006040:	103ba91e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 4006044:	dc800e17 	ldw	r18,56(sp)
 4006048:	dc400d17 	ldw	r17,52(sp)
 400604c:	d9000517 	ldw	r4,20(sp)
 4006050:	d9401904 	addi	r5,sp,100
 4006054:	003da706 	br	40056f4 <___vfprintf_internal_r+0xeec>
 4006058:	d9014f17 	ldw	r4,1340(sp)
 400605c:	b00b883a 	mov	r5,r22
 4006060:	d9800c04 	addi	r6,sp,48
 4006064:	40047b00 	call	40047b0 <__sprint_r>
 4006068:	103b9f1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 400606c:	dc800e17 	ldw	r18,56(sp)
 4006070:	dc400d17 	ldw	r17,52(sp)
 4006074:	d9000517 	ldw	r4,20(sp)
 4006078:	d8c01904 	addi	r3,sp,100
 400607c:	003d9106 	br	40056c4 <___vfprintf_internal_r+0xebc>
 4006080:	070100f4 	movhi	fp,1027
 4006084:	e70ad184 	addi	fp,fp,11078
 4006088:	9425883a 	add	r18,r18,r16
 400608c:	8c400044 	addi	r17,r17,1
 4006090:	008001c4 	movi	r2,7
 4006094:	1f000015 	stw	fp,0(r3)
 4006098:	1c000115 	stw	r16,4(r3)
 400609c:	dc800e15 	stw	r18,56(sp)
 40060a0:	dc400d15 	stw	r17,52(sp)
 40060a4:	147fbc16 	blt	r2,r17,4005f98 <___vfprintf_internal_r+0x1790>
 40060a8:	18c00204 	addi	r3,r3,8
 40060ac:	003fc206 	br	4005fb8 <___vfprintf_internal_r+0x17b0>
 40060b0:	d9014f17 	ldw	r4,1340(sp)
 40060b4:	b00b883a 	mov	r5,r22
 40060b8:	d9800c04 	addi	r6,sp,48
 40060bc:	40047b00 	call	40047b0 <__sprint_r>
 40060c0:	103b891e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40060c4:	dc800e17 	ldw	r18,56(sp)
 40060c8:	d9000517 	ldw	r4,20(sp)
 40060cc:	d8c01904 	addi	r3,sp,100
 40060d0:	003d0206 	br	40054dc <___vfprintf_internal_r+0xcd4>
 40060d4:	070100f4 	movhi	fp,1027
 40060d8:	e70ad184 	addi	fp,fp,11078
 40060dc:	003be406 	br	4005070 <___vfprintf_internal_r+0x868>
 40060e0:	008100f4 	movhi	r2,1027
 40060e4:	108ac004 	addi	r2,r2,11008
 40060e8:	d8814115 	stw	r2,1284(sp)
 40060ec:	003df506 	br	40058c4 <___vfprintf_internal_r+0x10bc>
 40060f0:	d9014217 	ldw	r4,1288(sp)
 40060f4:	d9414317 	ldw	r5,1292(sp)
 40060f8:	400afdc0 	call	400afdc <__isnand>
 40060fc:	10003926 	beq	r2,zero,40061e4 <___vfprintf_internal_r+0x19dc>
 4006100:	d9414d17 	ldw	r5,1332(sp)
 4006104:	008011c4 	movi	r2,71
 4006108:	1140ce16 	blt	r2,r5,4006444 <___vfprintf_internal_r+0x1c3c>
 400610c:	018100f4 	movhi	r6,1027
 4006110:	318ac104 	addi	r6,r6,11012
 4006114:	d9814115 	stw	r6,1284(sp)
 4006118:	003dea06 	br	40058c4 <___vfprintf_internal_r+0x10bc>
 400611c:	d9014c17 	ldw	r4,1328(sp)
 4006120:	bdc00044 	addi	r23,r23,1
 4006124:	b8c00007 	ldb	r3,0(r23)
 4006128:	21000814 	ori	r4,r4,32
 400612c:	d9014c15 	stw	r4,1328(sp)
 4006130:	003a3406 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 4006134:	dcc14515 	stw	r19,1300(sp)
 4006138:	98011016 	blt	r19,zero,400657c <___vfprintf_internal_r+0x1d74>
 400613c:	980f883a 	mov	r7,r19
 4006140:	d8014615 	stw	zero,1304(sp)
 4006144:	003c5206 	br	4005290 <___vfprintf_internal_r+0xa88>
 4006148:	d9014f17 	ldw	r4,1340(sp)
 400614c:	b00b883a 	mov	r5,r22
 4006150:	d9800c04 	addi	r6,sp,48
 4006154:	40047b00 	call	40047b0 <__sprint_r>
 4006158:	103b631e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 400615c:	dc800e17 	ldw	r18,56(sp)
 4006160:	d9000517 	ldw	r4,20(sp)
 4006164:	d8c01904 	addi	r3,sp,100
 4006168:	003f2e06 	br	4005e24 <___vfprintf_internal_r+0x161c>
 400616c:	d8c14c17 	ldw	r3,1328(sp)
 4006170:	1880100c 	andi	r2,r3,64
 4006174:	1000a026 	beq	r2,zero,40063f8 <___vfprintf_internal_r+0x1bf0>
 4006178:	38800017 	ldw	r2,0(r7)
 400617c:	39c00104 	addi	r7,r7,4
 4006180:	d9c14015 	stw	r7,1280(sp)
 4006184:	d9014b17 	ldw	r4,1324(sp)
 4006188:	d9c14017 	ldw	r7,1280(sp)
 400618c:	1100000d 	sth	r4,0(r2)
 4006190:	0039f906 	br	4004978 <___vfprintf_internal_r+0x170>
 4006194:	d9014f17 	ldw	r4,1340(sp)
 4006198:	b00b883a 	mov	r5,r22
 400619c:	d9800c04 	addi	r6,sp,48
 40061a0:	40047b00 	call	40047b0 <__sprint_r>
 40061a4:	103b501e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40061a8:	dc800e17 	ldw	r18,56(sp)
 40061ac:	dc400d17 	ldw	r17,52(sp)
 40061b0:	d9000517 	ldw	r4,20(sp)
 40061b4:	d8c01904 	addi	r3,sp,100
 40061b8:	003f2d06 	br	4005e70 <___vfprintf_internal_r+0x1668>
 40061bc:	00800184 	movi	r2,6
 40061c0:	14c09a36 	bltu	r2,r19,400642c <___vfprintf_internal_r+0x1c24>
 40061c4:	dcc14515 	stw	r19,1300(sp)
 40061c8:	9800010e 	bge	r19,zero,40061d0 <___vfprintf_internal_r+0x19c8>
 40061cc:	d8014515 	stw	zero,1300(sp)
 40061d0:	008100f4 	movhi	r2,1027
 40061d4:	108ac304 	addi	r2,r2,11020
 40061d8:	980f883a 	mov	r7,r19
 40061dc:	d8814115 	stw	r2,1284(sp)
 40061e0:	003a7806 	br	4004bc4 <___vfprintf_internal_r+0x3bc>
 40061e4:	00bfffc4 	movi	r2,-1
 40061e8:	9880e226 	beq	r19,r2,4006574 <___vfprintf_internal_r+0x1d6c>
 40061ec:	d9414d17 	ldw	r5,1332(sp)
 40061f0:	008019c4 	movi	r2,103
 40061f4:	2880dc26 	beq	r5,r2,4006568 <___vfprintf_internal_r+0x1d60>
 40061f8:	008011c4 	movi	r2,71
 40061fc:	2880da26 	beq	r5,r2,4006568 <___vfprintf_internal_r+0x1d60>
 4006200:	d9414c17 	ldw	r5,1328(sp)
 4006204:	d9014317 	ldw	r4,1292(sp)
 4006208:	d9814217 	ldw	r6,1288(sp)
 400620c:	29404014 	ori	r5,r5,256
 4006210:	d9414c15 	stw	r5,1328(sp)
 4006214:	2000cc16 	blt	r4,zero,4006548 <___vfprintf_internal_r+0x1d40>
 4006218:	3021883a 	mov	r16,r6
 400621c:	2023883a 	mov	r17,r4
 4006220:	0039883a 	mov	fp,zero
 4006224:	d9414d17 	ldw	r5,1332(sp)
 4006228:	00801984 	movi	r2,102
 400622c:	2880b726 	beq	r5,r2,400650c <___vfprintf_internal_r+0x1d04>
 4006230:	00801184 	movi	r2,70
 4006234:	2880b526 	beq	r5,r2,400650c <___vfprintf_internal_r+0x1d04>
 4006238:	00801944 	movi	r2,101
 400623c:	2880c826 	beq	r5,r2,4006560 <___vfprintf_internal_r+0x1d58>
 4006240:	00801144 	movi	r2,69
 4006244:	2880c626 	beq	r5,r2,4006560 <___vfprintf_internal_r+0x1d58>
 4006248:	9829883a 	mov	r20,r19
 400624c:	d9014f17 	ldw	r4,1340(sp)
 4006250:	d8800504 	addi	r2,sp,20
 4006254:	880d883a 	mov	r6,r17
 4006258:	d8800115 	stw	r2,4(sp)
 400625c:	d8c00604 	addi	r3,sp,24
 4006260:	d8800704 	addi	r2,sp,28
 4006264:	800b883a 	mov	r5,r16
 4006268:	01c00084 	movi	r7,2
 400626c:	d8c00215 	stw	r3,8(sp)
 4006270:	d8800315 	stw	r2,12(sp)
 4006274:	dd000015 	stw	r20,0(sp)
 4006278:	4006c9c0 	call	4006c9c <_dtoa_r>
 400627c:	d9814d17 	ldw	r6,1332(sp)
 4006280:	d8814115 	stw	r2,1284(sp)
 4006284:	008019c4 	movi	r2,103
 4006288:	30809526 	beq	r6,r2,40064e0 <___vfprintf_internal_r+0x1cd8>
 400628c:	d8c14d17 	ldw	r3,1332(sp)
 4006290:	008011c4 	movi	r2,71
 4006294:	18809226 	beq	r3,r2,40064e0 <___vfprintf_internal_r+0x1cd8>
 4006298:	d9414117 	ldw	r5,1284(sp)
 400629c:	d9814d17 	ldw	r6,1332(sp)
 40062a0:	00801984 	movi	r2,102
 40062a4:	2d25883a 	add	r18,r5,r20
 40062a8:	30808626 	beq	r6,r2,40064c4 <___vfprintf_internal_r+0x1cbc>
 40062ac:	00801184 	movi	r2,70
 40062b0:	30808426 	beq	r6,r2,40064c4 <___vfprintf_internal_r+0x1cbc>
 40062b4:	000d883a 	mov	r6,zero
 40062b8:	000f883a 	mov	r7,zero
 40062bc:	880b883a 	mov	r5,r17
 40062c0:	8009883a 	mov	r4,r16
 40062c4:	400d0e40 	call	400d0e4 <__eqdf2>
 40062c8:	1000751e 	bne	r2,zero,40064a0 <___vfprintf_internal_r+0x1c98>
 40062cc:	9005883a 	mov	r2,r18
 40062d0:	dc800715 	stw	r18,28(sp)
 40062d4:	d9014117 	ldw	r4,1284(sp)
 40062d8:	d9414d17 	ldw	r5,1332(sp)
 40062dc:	00c019c4 	movi	r3,103
 40062e0:	1125c83a 	sub	r18,r2,r4
 40062e4:	28c06826 	beq	r5,r3,4006488 <___vfprintf_internal_r+0x1c80>
 40062e8:	008011c4 	movi	r2,71
 40062ec:	28806626 	beq	r5,r2,4006488 <___vfprintf_internal_r+0x1c80>
 40062f0:	d9000517 	ldw	r4,20(sp)
 40062f4:	d8c14d17 	ldw	r3,1332(sp)
 40062f8:	00801944 	movi	r2,101
 40062fc:	10c05516 	blt	r2,r3,4006454 <___vfprintf_internal_r+0x1c4c>
 4006300:	213fffc4 	addi	r4,r4,-1
 4006304:	d9000515 	stw	r4,20(sp)
 4006308:	d8c00805 	stb	r3,32(sp)
 400630c:	2021883a 	mov	r16,r4
 4006310:	2000c116 	blt	r4,zero,4006618 <___vfprintf_internal_r+0x1e10>
 4006314:	00800ac4 	movi	r2,43
 4006318:	d8800845 	stb	r2,33(sp)
 400631c:	00800244 	movi	r2,9
 4006320:	1400af0e 	bge	r2,r16,40065e0 <___vfprintf_internal_r+0x1dd8>
 4006324:	1027883a 	mov	r19,r2
 4006328:	dc400b84 	addi	r17,sp,46
 400632c:	8009883a 	mov	r4,r16
 4006330:	01400284 	movi	r5,10
 4006334:	400d7cc0 	call	400d7cc <__modsi3>
 4006338:	10800c04 	addi	r2,r2,48
 400633c:	8c7fffc4 	addi	r17,r17,-1
 4006340:	8009883a 	mov	r4,r16
 4006344:	01400284 	movi	r5,10
 4006348:	88800005 	stb	r2,0(r17)
 400634c:	400d76c0 	call	400d76c <__divsi3>
 4006350:	1021883a 	mov	r16,r2
 4006354:	98bff516 	blt	r19,r2,400632c <___vfprintf_internal_r+0x1b24>
 4006358:	10c00c04 	addi	r3,r2,48
 400635c:	d88009c4 	addi	r2,sp,39
 4006360:	108001c4 	addi	r2,r2,7
 4006364:	897fffc4 	addi	r5,r17,-1
 4006368:	88ffffc5 	stb	r3,-1(r17)
 400636c:	2880a72e 	bgeu	r5,r2,400660c <___vfprintf_internal_r+0x1e04>
 4006370:	1009883a 	mov	r4,r2
 4006374:	d9800804 	addi	r6,sp,32
 4006378:	d8c00884 	addi	r3,sp,34
 400637c:	28800003 	ldbu	r2,0(r5)
 4006380:	29400044 	addi	r5,r5,1
 4006384:	18800005 	stb	r2,0(r3)
 4006388:	18c00044 	addi	r3,r3,1
 400638c:	293ffb36 	bltu	r5,r4,400637c <___vfprintf_internal_r+0x1b74>
 4006390:	1987c83a 	sub	r3,r3,r6
 4006394:	00800044 	movi	r2,1
 4006398:	d8c14815 	stw	r3,1312(sp)
 400639c:	90cf883a 	add	r7,r18,r3
 40063a0:	1480960e 	bge	r2,r18,40065fc <___vfprintf_internal_r+0x1df4>
 40063a4:	39c00044 	addi	r7,r7,1
 40063a8:	d9c14515 	stw	r7,1300(sp)
 40063ac:	38003416 	blt	r7,zero,4006480 <___vfprintf_internal_r+0x1c78>
 40063b0:	e0803fcc 	andi	r2,fp,255
 40063b4:	1080201c 	xori	r2,r2,128
 40063b8:	10bfe004 	addi	r2,r2,-128
 40063bc:	10004e26 	beq	r2,zero,40064f8 <___vfprintf_internal_r+0x1cf0>
 40063c0:	00800b44 	movi	r2,45
 40063c4:	dc814715 	stw	r18,1308(sp)
 40063c8:	d8014615 	stw	zero,1304(sp)
 40063cc:	d8800405 	stb	r2,16(sp)
 40063d0:	003bb106 	br	4005298 <___vfprintf_internal_r+0xa90>
 40063d4:	00800b44 	movi	r2,45
 40063d8:	d8800405 	stb	r2,16(sp)
 40063dc:	003d3306 	br	40058ac <___vfprintf_internal_r+0x10a4>
 40063e0:	d9014f17 	ldw	r4,1340(sp)
 40063e4:	b00b883a 	mov	r5,r22
 40063e8:	d9800c04 	addi	r6,sp,48
 40063ec:	40047b00 	call	40047b0 <__sprint_r>
 40063f0:	103abd1e 	bne	r2,zero,4004ee8 <___vfprintf_internal_r+0x6e0>
 40063f4:	003abb06 	br	4004ee4 <___vfprintf_internal_r+0x6dc>
 40063f8:	38800017 	ldw	r2,0(r7)
 40063fc:	39c00104 	addi	r7,r7,4
 4006400:	d9c14015 	stw	r7,1280(sp)
 4006404:	d9414b17 	ldw	r5,1324(sp)
 4006408:	d9c14017 	ldw	r7,1280(sp)
 400640c:	11400015 	stw	r5,0(r2)
 4006410:	00395906 	br	4004978 <___vfprintf_internal_r+0x170>
 4006414:	980f883a 	mov	r7,r19
 4006418:	dcc14515 	stw	r19,1300(sp)
 400641c:	d8014615 	stw	zero,1304(sp)
 4006420:	003b9b06 	br	4005290 <___vfprintf_internal_r+0xa88>
 4006424:	0027883a 	mov	r19,zero
 4006428:	00397806 	br	4004a0c <___vfprintf_internal_r+0x204>
 400642c:	00c100f4 	movhi	r3,1027
 4006430:	18cac304 	addi	r3,r3,11020
 4006434:	100f883a 	mov	r7,r2
 4006438:	d8814515 	stw	r2,1300(sp)
 400643c:	d8c14115 	stw	r3,1284(sp)
 4006440:	0039e006 	br	4004bc4 <___vfprintf_internal_r+0x3bc>
 4006444:	008100f4 	movhi	r2,1027
 4006448:	108ac204 	addi	r2,r2,11016
 400644c:	d8814115 	stw	r2,1284(sp)
 4006450:	003d1c06 	br	40058c4 <___vfprintf_internal_r+0x10bc>
 4006454:	d9414d17 	ldw	r5,1332(sp)
 4006458:	00801984 	movi	r2,102
 400645c:	28804926 	beq	r5,r2,4006584 <___vfprintf_internal_r+0x1d7c>
 4006460:	200f883a 	mov	r7,r4
 4006464:	24805716 	blt	r4,r18,40065c4 <___vfprintf_internal_r+0x1dbc>
 4006468:	d9414c17 	ldw	r5,1328(sp)
 400646c:	2880004c 	andi	r2,r5,1
 4006470:	10000126 	beq	r2,zero,4006478 <___vfprintf_internal_r+0x1c70>
 4006474:	21c00044 	addi	r7,r4,1
 4006478:	d9c14515 	stw	r7,1300(sp)
 400647c:	383fcc0e 	bge	r7,zero,40063b0 <___vfprintf_internal_r+0x1ba8>
 4006480:	d8014515 	stw	zero,1300(sp)
 4006484:	003fca06 	br	40063b0 <___vfprintf_internal_r+0x1ba8>
 4006488:	d9000517 	ldw	r4,20(sp)
 400648c:	00bfff04 	movi	r2,-4
 4006490:	1100480e 	bge	r2,r4,40065b4 <___vfprintf_internal_r+0x1dac>
 4006494:	99004716 	blt	r19,r4,40065b4 <___vfprintf_internal_r+0x1dac>
 4006498:	d8c14d15 	stw	r3,1332(sp)
 400649c:	003ff006 	br	4006460 <___vfprintf_internal_r+0x1c58>
 40064a0:	d8800717 	ldw	r2,28(sp)
 40064a4:	14bf8b2e 	bgeu	r2,r18,40062d4 <___vfprintf_internal_r+0x1acc>
 40064a8:	9007883a 	mov	r3,r18
 40064ac:	01000c04 	movi	r4,48
 40064b0:	11000005 	stb	r4,0(r2)
 40064b4:	10800044 	addi	r2,r2,1
 40064b8:	d8800715 	stw	r2,28(sp)
 40064bc:	18bffc1e 	bne	r3,r2,40064b0 <___vfprintf_internal_r+0x1ca8>
 40064c0:	003f8406 	br	40062d4 <___vfprintf_internal_r+0x1acc>
 40064c4:	d8814117 	ldw	r2,1284(sp)
 40064c8:	10c00007 	ldb	r3,0(r2)
 40064cc:	00800c04 	movi	r2,48
 40064d0:	18805b26 	beq	r3,r2,4006640 <___vfprintf_internal_r+0x1e38>
 40064d4:	d9000517 	ldw	r4,20(sp)
 40064d8:	9125883a 	add	r18,r18,r4
 40064dc:	003f7506 	br	40062b4 <___vfprintf_internal_r+0x1aac>
 40064e0:	d9014c17 	ldw	r4,1328(sp)
 40064e4:	2080004c 	andi	r2,r4,1
 40064e8:	1005003a 	cmpeq	r2,r2,zero
 40064ec:	103f6a26 	beq	r2,zero,4006298 <___vfprintf_internal_r+0x1a90>
 40064f0:	d8800717 	ldw	r2,28(sp)
 40064f4:	003f7706 	br	40062d4 <___vfprintf_internal_r+0x1acc>
 40064f8:	d9c14515 	stw	r7,1300(sp)
 40064fc:	38004d16 	blt	r7,zero,4006634 <___vfprintf_internal_r+0x1e2c>
 4006500:	dc814715 	stw	r18,1308(sp)
 4006504:	d8014615 	stw	zero,1304(sp)
 4006508:	003b6106 	br	4005290 <___vfprintf_internal_r+0xa88>
 400650c:	d9014f17 	ldw	r4,1340(sp)
 4006510:	d8800504 	addi	r2,sp,20
 4006514:	d8800115 	stw	r2,4(sp)
 4006518:	d8c00604 	addi	r3,sp,24
 400651c:	d8800704 	addi	r2,sp,28
 4006520:	800b883a 	mov	r5,r16
 4006524:	880d883a 	mov	r6,r17
 4006528:	01c000c4 	movi	r7,3
 400652c:	d8c00215 	stw	r3,8(sp)
 4006530:	d8800315 	stw	r2,12(sp)
 4006534:	dcc00015 	stw	r19,0(sp)
 4006538:	9829883a 	mov	r20,r19
 400653c:	4006c9c0 	call	4006c9c <_dtoa_r>
 4006540:	d8814115 	stw	r2,1284(sp)
 4006544:	003f5106 	br	400628c <___vfprintf_internal_r+0x1a84>
 4006548:	d8c14217 	ldw	r3,1288(sp)
 400654c:	d9014317 	ldw	r4,1292(sp)
 4006550:	07000b44 	movi	fp,45
 4006554:	1821883a 	mov	r16,r3
 4006558:	2460003c 	xorhi	r17,r4,32768
 400655c:	003f3106 	br	4006224 <___vfprintf_internal_r+0x1a1c>
 4006560:	9d000044 	addi	r20,r19,1
 4006564:	003f3906 	br	400624c <___vfprintf_internal_r+0x1a44>
 4006568:	983f251e 	bne	r19,zero,4006200 <___vfprintf_internal_r+0x19f8>
 400656c:	04c00044 	movi	r19,1
 4006570:	003f2306 	br	4006200 <___vfprintf_internal_r+0x19f8>
 4006574:	04c00184 	movi	r19,6
 4006578:	003f2106 	br	4006200 <___vfprintf_internal_r+0x19f8>
 400657c:	d8014515 	stw	zero,1300(sp)
 4006580:	003eee06 	br	400613c <___vfprintf_internal_r+0x1934>
 4006584:	200f883a 	mov	r7,r4
 4006588:	0100370e 	bge	zero,r4,4006668 <___vfprintf_internal_r+0x1e60>
 400658c:	9800031e 	bne	r19,zero,400659c <___vfprintf_internal_r+0x1d94>
 4006590:	d9814c17 	ldw	r6,1328(sp)
 4006594:	3080004c 	andi	r2,r6,1
 4006598:	103fb726 	beq	r2,zero,4006478 <___vfprintf_internal_r+0x1c70>
 400659c:	20800044 	addi	r2,r4,1
 40065a0:	98a7883a 	add	r19,r19,r2
 40065a4:	dcc14515 	stw	r19,1300(sp)
 40065a8:	980f883a 	mov	r7,r19
 40065ac:	983f800e 	bge	r19,zero,40063b0 <___vfprintf_internal_r+0x1ba8>
 40065b0:	003fb306 	br	4006480 <___vfprintf_internal_r+0x1c78>
 40065b4:	d9814d17 	ldw	r6,1332(sp)
 40065b8:	31bfff84 	addi	r6,r6,-2
 40065bc:	d9814d15 	stw	r6,1332(sp)
 40065c0:	003f4c06 	br	40062f4 <___vfprintf_internal_r+0x1aec>
 40065c4:	0100180e 	bge	zero,r4,4006628 <___vfprintf_internal_r+0x1e20>
 40065c8:	00800044 	movi	r2,1
 40065cc:	1485883a 	add	r2,r2,r18
 40065d0:	d8814515 	stw	r2,1300(sp)
 40065d4:	100f883a 	mov	r7,r2
 40065d8:	103f750e 	bge	r2,zero,40063b0 <___vfprintf_internal_r+0x1ba8>
 40065dc:	003fa806 	br	4006480 <___vfprintf_internal_r+0x1c78>
 40065e0:	80c00c04 	addi	r3,r16,48
 40065e4:	00800c04 	movi	r2,48
 40065e8:	d8c008c5 	stb	r3,35(sp)
 40065ec:	d9800804 	addi	r6,sp,32
 40065f0:	d8c00904 	addi	r3,sp,36
 40065f4:	d8800885 	stb	r2,34(sp)
 40065f8:	003f6506 	br	4006390 <___vfprintf_internal_r+0x1b88>
 40065fc:	d9014c17 	ldw	r4,1328(sp)
 4006600:	2084703a 	and	r2,r4,r2
 4006604:	103f9c26 	beq	r2,zero,4006478 <___vfprintf_internal_r+0x1c70>
 4006608:	003f6606 	br	40063a4 <___vfprintf_internal_r+0x1b9c>
 400660c:	d9800804 	addi	r6,sp,32
 4006610:	d8c00884 	addi	r3,sp,34
 4006614:	003f5e06 	br	4006390 <___vfprintf_internal_r+0x1b88>
 4006618:	00800b44 	movi	r2,45
 400661c:	0121c83a 	sub	r16,zero,r4
 4006620:	d8800845 	stb	r2,33(sp)
 4006624:	003f3d06 	br	400631c <___vfprintf_internal_r+0x1b14>
 4006628:	00800084 	movi	r2,2
 400662c:	1105c83a 	sub	r2,r2,r4
 4006630:	003fe606 	br	40065cc <___vfprintf_internal_r+0x1dc4>
 4006634:	d8014515 	stw	zero,1300(sp)
 4006638:	dc814715 	stw	r18,1308(sp)
 400663c:	003fb106 	br	4006504 <___vfprintf_internal_r+0x1cfc>
 4006640:	000d883a 	mov	r6,zero
 4006644:	000f883a 	mov	r7,zero
 4006648:	8009883a 	mov	r4,r16
 400664c:	880b883a 	mov	r5,r17
 4006650:	400d16c0 	call	400d16c <__nedf2>
 4006654:	103f9f26 	beq	r2,zero,40064d4 <___vfprintf_internal_r+0x1ccc>
 4006658:	00800044 	movi	r2,1
 400665c:	1509c83a 	sub	r4,r2,r20
 4006660:	d9000515 	stw	r4,20(sp)
 4006664:	003f9b06 	br	40064d4 <___vfprintf_internal_r+0x1ccc>
 4006668:	98000d1e 	bne	r19,zero,40066a0 <___vfprintf_internal_r+0x1e98>
 400666c:	d8c14c17 	ldw	r3,1328(sp)
 4006670:	1880004c 	andi	r2,r3,1
 4006674:	10000a1e 	bne	r2,zero,40066a0 <___vfprintf_internal_r+0x1e98>
 4006678:	01000044 	movi	r4,1
 400667c:	200f883a 	mov	r7,r4
 4006680:	d9014515 	stw	r4,1300(sp)
 4006684:	003f4a06 	br	40063b0 <___vfprintf_internal_r+0x1ba8>
 4006688:	3cc00017 	ldw	r19,0(r7)
 400668c:	39c00104 	addi	r7,r7,4
 4006690:	983d0e0e 	bge	r19,zero,4005acc <___vfprintf_internal_r+0x12c4>
 4006694:	b8c00007 	ldb	r3,0(r23)
 4006698:	04ffffc4 	movi	r19,-1
 400669c:	0038d906 	br	4004a04 <___vfprintf_internal_r+0x1fc>
 40066a0:	9cc00084 	addi	r19,r19,2
 40066a4:	dcc14515 	stw	r19,1300(sp)
 40066a8:	980f883a 	mov	r7,r19
 40066ac:	983f400e 	bge	r19,zero,40063b0 <___vfprintf_internal_r+0x1ba8>
 40066b0:	003f7306 	br	4006480 <___vfprintf_internal_r+0x1c78>

040066b4 <__vfprintf_internal>:
 40066b4:	00810134 	movhi	r2,1028
 40066b8:	10a0f704 	addi	r2,r2,-31780
 40066bc:	2013883a 	mov	r9,r4
 40066c0:	11000017 	ldw	r4,0(r2)
 40066c4:	2805883a 	mov	r2,r5
 40066c8:	300f883a 	mov	r7,r6
 40066cc:	480b883a 	mov	r5,r9
 40066d0:	100d883a 	mov	r6,r2
 40066d4:	40048081 	jmpi	4004808 <___vfprintf_internal_r>

040066d8 <__swsetup_r>:
 40066d8:	00810134 	movhi	r2,1028
 40066dc:	10a0f704 	addi	r2,r2,-31780
 40066e0:	10c00017 	ldw	r3,0(r2)
 40066e4:	defffd04 	addi	sp,sp,-12
 40066e8:	dc400115 	stw	r17,4(sp)
 40066ec:	dc000015 	stw	r16,0(sp)
 40066f0:	dfc00215 	stw	ra,8(sp)
 40066f4:	2023883a 	mov	r17,r4
 40066f8:	2821883a 	mov	r16,r5
 40066fc:	18000226 	beq	r3,zero,4006708 <__swsetup_r+0x30>
 4006700:	18800e17 	ldw	r2,56(r3)
 4006704:	10001f26 	beq	r2,zero,4006784 <__swsetup_r+0xac>
 4006708:	8100030b 	ldhu	r4,12(r16)
 400670c:	2080020c 	andi	r2,r4,8
 4006710:	10002826 	beq	r2,zero,40067b4 <__swsetup_r+0xdc>
 4006714:	81400417 	ldw	r5,16(r16)
 4006718:	28001d26 	beq	r5,zero,4006790 <__swsetup_r+0xb8>
 400671c:	2080004c 	andi	r2,r4,1
 4006720:	1005003a 	cmpeq	r2,r2,zero
 4006724:	10000b26 	beq	r2,zero,4006754 <__swsetup_r+0x7c>
 4006728:	2080008c 	andi	r2,r4,2
 400672c:	10001226 	beq	r2,zero,4006778 <__swsetup_r+0xa0>
 4006730:	0005883a 	mov	r2,zero
 4006734:	80800215 	stw	r2,8(r16)
 4006738:	28000b26 	beq	r5,zero,4006768 <__swsetup_r+0x90>
 400673c:	0005883a 	mov	r2,zero
 4006740:	dfc00217 	ldw	ra,8(sp)
 4006744:	dc400117 	ldw	r17,4(sp)
 4006748:	dc000017 	ldw	r16,0(sp)
 400674c:	dec00304 	addi	sp,sp,12
 4006750:	f800283a 	ret
 4006754:	80800517 	ldw	r2,20(r16)
 4006758:	80000215 	stw	zero,8(r16)
 400675c:	0085c83a 	sub	r2,zero,r2
 4006760:	80800615 	stw	r2,24(r16)
 4006764:	283ff51e 	bne	r5,zero,400673c <__swsetup_r+0x64>
 4006768:	2080200c 	andi	r2,r4,128
 400676c:	103ff326 	beq	r2,zero,400673c <__swsetup_r+0x64>
 4006770:	00bfffc4 	movi	r2,-1
 4006774:	003ff206 	br	4006740 <__swsetup_r+0x68>
 4006778:	80800517 	ldw	r2,20(r16)
 400677c:	80800215 	stw	r2,8(r16)
 4006780:	003fed06 	br	4006738 <__swsetup_r+0x60>
 4006784:	1809883a 	mov	r4,r3
 4006788:	40084e80 	call	40084e8 <__sinit>
 400678c:	003fde06 	br	4006708 <__swsetup_r+0x30>
 4006790:	20c0a00c 	andi	r3,r4,640
 4006794:	00808004 	movi	r2,512
 4006798:	18bfe026 	beq	r3,r2,400671c <__swsetup_r+0x44>
 400679c:	8809883a 	mov	r4,r17
 40067a0:	800b883a 	mov	r5,r16
 40067a4:	40093d00 	call	40093d0 <__smakebuf_r>
 40067a8:	8100030b 	ldhu	r4,12(r16)
 40067ac:	81400417 	ldw	r5,16(r16)
 40067b0:	003fda06 	br	400671c <__swsetup_r+0x44>
 40067b4:	2080040c 	andi	r2,r4,16
 40067b8:	103fed26 	beq	r2,zero,4006770 <__swsetup_r+0x98>
 40067bc:	2080010c 	andi	r2,r4,4
 40067c0:	10001226 	beq	r2,zero,400680c <__swsetup_r+0x134>
 40067c4:	81400c17 	ldw	r5,48(r16)
 40067c8:	28000526 	beq	r5,zero,40067e0 <__swsetup_r+0x108>
 40067cc:	80801004 	addi	r2,r16,64
 40067d0:	28800226 	beq	r5,r2,40067dc <__swsetup_r+0x104>
 40067d4:	8809883a 	mov	r4,r17
 40067d8:	40089b80 	call	40089b8 <_free_r>
 40067dc:	80000c15 	stw	zero,48(r16)
 40067e0:	8080030b 	ldhu	r2,12(r16)
 40067e4:	81400417 	ldw	r5,16(r16)
 40067e8:	80000115 	stw	zero,4(r16)
 40067ec:	10bff6cc 	andi	r2,r2,65499
 40067f0:	8080030d 	sth	r2,12(r16)
 40067f4:	81400015 	stw	r5,0(r16)
 40067f8:	8080030b 	ldhu	r2,12(r16)
 40067fc:	10800214 	ori	r2,r2,8
 4006800:	113fffcc 	andi	r4,r2,65535
 4006804:	8080030d 	sth	r2,12(r16)
 4006808:	003fc306 	br	4006718 <__swsetup_r+0x40>
 400680c:	81400417 	ldw	r5,16(r16)
 4006810:	003ff906 	br	40067f8 <__swsetup_r+0x120>

04006814 <register_fini>:
 4006814:	f800283a 	ret

04006818 <__call_exitprocs>:
 4006818:	00810134 	movhi	r2,1028
 400681c:	10a0f804 	addi	r2,r2,-31776
 4006820:	10800017 	ldw	r2,0(r2)
 4006824:	defff304 	addi	sp,sp,-52
 4006828:	df000b15 	stw	fp,44(sp)
 400682c:	d8800115 	stw	r2,4(sp)
 4006830:	00810034 	movhi	r2,1024
 4006834:	1087ce04 	addi	r2,r2,7992
 4006838:	1005003a 	cmpeq	r2,r2,zero
 400683c:	d8800215 	stw	r2,8(sp)
 4006840:	d8800117 	ldw	r2,4(sp)
 4006844:	dd400815 	stw	r21,32(sp)
 4006848:	dd000715 	stw	r20,28(sp)
 400684c:	10805204 	addi	r2,r2,328
 4006850:	dfc00c15 	stw	ra,48(sp)
 4006854:	ddc00a15 	stw	r23,40(sp)
 4006858:	dd800915 	stw	r22,36(sp)
 400685c:	dcc00615 	stw	r19,24(sp)
 4006860:	dc800515 	stw	r18,20(sp)
 4006864:	dc400415 	stw	r17,16(sp)
 4006868:	dc000315 	stw	r16,12(sp)
 400686c:	282b883a 	mov	r21,r5
 4006870:	2039883a 	mov	fp,r4
 4006874:	d8800015 	stw	r2,0(sp)
 4006878:	2829003a 	cmpeq	r20,r5,zero
 400687c:	d8800117 	ldw	r2,4(sp)
 4006880:	14405217 	ldw	r17,328(r2)
 4006884:	88001026 	beq	r17,zero,40068c8 <__call_exitprocs+0xb0>
 4006888:	ddc00017 	ldw	r23,0(sp)
 400688c:	88800117 	ldw	r2,4(r17)
 4006890:	8c802204 	addi	r18,r17,136
 4006894:	143fffc4 	addi	r16,r2,-1
 4006898:	80000916 	blt	r16,zero,40068c0 <__call_exitprocs+0xa8>
 400689c:	05bfffc4 	movi	r22,-1
 40068a0:	a000151e 	bne	r20,zero,40068f8 <__call_exitprocs+0xe0>
 40068a4:	8409883a 	add	r4,r16,r16
 40068a8:	2105883a 	add	r2,r4,r4
 40068ac:	1485883a 	add	r2,r2,r18
 40068b0:	10c02017 	ldw	r3,128(r2)
 40068b4:	a8c01126 	beq	r21,r3,40068fc <__call_exitprocs+0xe4>
 40068b8:	843fffc4 	addi	r16,r16,-1
 40068bc:	85bff81e 	bne	r16,r22,40068a0 <__call_exitprocs+0x88>
 40068c0:	d8800217 	ldw	r2,8(sp)
 40068c4:	10003126 	beq	r2,zero,400698c <__call_exitprocs+0x174>
 40068c8:	dfc00c17 	ldw	ra,48(sp)
 40068cc:	df000b17 	ldw	fp,44(sp)
 40068d0:	ddc00a17 	ldw	r23,40(sp)
 40068d4:	dd800917 	ldw	r22,36(sp)
 40068d8:	dd400817 	ldw	r21,32(sp)
 40068dc:	dd000717 	ldw	r20,28(sp)
 40068e0:	dcc00617 	ldw	r19,24(sp)
 40068e4:	dc800517 	ldw	r18,20(sp)
 40068e8:	dc400417 	ldw	r17,16(sp)
 40068ec:	dc000317 	ldw	r16,12(sp)
 40068f0:	dec00d04 	addi	sp,sp,52
 40068f4:	f800283a 	ret
 40068f8:	8409883a 	add	r4,r16,r16
 40068fc:	88c00117 	ldw	r3,4(r17)
 4006900:	2105883a 	add	r2,r4,r4
 4006904:	1445883a 	add	r2,r2,r17
 4006908:	18ffffc4 	addi	r3,r3,-1
 400690c:	11800217 	ldw	r6,8(r2)
 4006910:	1c001526 	beq	r3,r16,4006968 <__call_exitprocs+0x150>
 4006914:	10000215 	stw	zero,8(r2)
 4006918:	303fe726 	beq	r6,zero,40068b8 <__call_exitprocs+0xa0>
 400691c:	00c00044 	movi	r3,1
 4006920:	1c06983a 	sll	r3,r3,r16
 4006924:	90804017 	ldw	r2,256(r18)
 4006928:	8cc00117 	ldw	r19,4(r17)
 400692c:	1884703a 	and	r2,r3,r2
 4006930:	10001426 	beq	r2,zero,4006984 <__call_exitprocs+0x16c>
 4006934:	90804117 	ldw	r2,260(r18)
 4006938:	1884703a 	and	r2,r3,r2
 400693c:	10000c1e 	bne	r2,zero,4006970 <__call_exitprocs+0x158>
 4006940:	2105883a 	add	r2,r4,r4
 4006944:	1485883a 	add	r2,r2,r18
 4006948:	11400017 	ldw	r5,0(r2)
 400694c:	e009883a 	mov	r4,fp
 4006950:	303ee83a 	callr	r6
 4006954:	88800117 	ldw	r2,4(r17)
 4006958:	98bfc81e 	bne	r19,r2,400687c <__call_exitprocs+0x64>
 400695c:	b8800017 	ldw	r2,0(r23)
 4006960:	147fd526 	beq	r2,r17,40068b8 <__call_exitprocs+0xa0>
 4006964:	003fc506 	br	400687c <__call_exitprocs+0x64>
 4006968:	8c000115 	stw	r16,4(r17)
 400696c:	003fea06 	br	4006918 <__call_exitprocs+0x100>
 4006970:	2105883a 	add	r2,r4,r4
 4006974:	1485883a 	add	r2,r2,r18
 4006978:	11000017 	ldw	r4,0(r2)
 400697c:	303ee83a 	callr	r6
 4006980:	003ff406 	br	4006954 <__call_exitprocs+0x13c>
 4006984:	303ee83a 	callr	r6
 4006988:	003ff206 	br	4006954 <__call_exitprocs+0x13c>
 400698c:	88800117 	ldw	r2,4(r17)
 4006990:	1000081e 	bne	r2,zero,40069b4 <__call_exitprocs+0x19c>
 4006994:	89000017 	ldw	r4,0(r17)
 4006998:	20000726 	beq	r4,zero,40069b8 <__call_exitprocs+0x1a0>
 400699c:	b9000015 	stw	r4,0(r23)
 40069a0:	8809883a 	mov	r4,r17
 40069a4:	4001f380 	call	4001f38 <free>
 40069a8:	bc400017 	ldw	r17,0(r23)
 40069ac:	883fb71e 	bne	r17,zero,400688c <__call_exitprocs+0x74>
 40069b0:	003fc506 	br	40068c8 <__call_exitprocs+0xb0>
 40069b4:	89000017 	ldw	r4,0(r17)
 40069b8:	882f883a 	mov	r23,r17
 40069bc:	2023883a 	mov	r17,r4
 40069c0:	883fb21e 	bne	r17,zero,400688c <__call_exitprocs+0x74>
 40069c4:	003fc006 	br	40068c8 <__call_exitprocs+0xb0>

040069c8 <abs>:
 40069c8:	20000216 	blt	r4,zero,40069d4 <abs+0xc>
 40069cc:	2005883a 	mov	r2,r4
 40069d0:	f800283a 	ret
 40069d4:	0109c83a 	sub	r4,zero,r4
 40069d8:	2005883a 	mov	r2,r4
 40069dc:	f800283a 	ret

040069e0 <asctime>:
 40069e0:	00810134 	movhi	r2,1028
 40069e4:	10a0f704 	addi	r2,r2,-31780
 40069e8:	11400017 	ldw	r5,0(r2)
 40069ec:	29401804 	addi	r5,r5,96
 40069f0:	40069f41 	jmpi	40069f4 <asctime_r>

040069f4 <asctime_r>:
 40069f4:	20800617 	ldw	r2,24(r4)
 40069f8:	20c00417 	ldw	r3,16(r4)
 40069fc:	22400517 	ldw	r9,20(r4)
 4006a00:	108f883a 	add	r7,r2,r2
 4006a04:	22800317 	ldw	r10,12(r4)
 4006a08:	22c00217 	ldw	r11,8(r4)
 4006a0c:	23000117 	ldw	r12,4(r4)
 4006a10:	23400017 	ldw	r13,0(r4)
 4006a14:	18d1883a 	add	r8,r3,r3
 4006a18:	388f883a 	add	r7,r7,r2
 4006a1c:	018100f4 	movhi	r6,1027
 4006a20:	318aeb04 	addi	r6,r6,11180
 4006a24:	defff904 	addi	sp,sp,-28
 4006a28:	40d1883a 	add	r8,r8,r3
 4006a2c:	398d883a 	add	r6,r7,r6
 4006a30:	01c100f4 	movhi	r7,1027
 4006a34:	39cae204 	addi	r7,r7,11144
 4006a38:	dc400515 	stw	r17,20(sp)
 4006a3c:	4a41db04 	addi	r9,r9,1900
 4006a40:	2823883a 	mov	r17,r5
 4006a44:	2809883a 	mov	r4,r5
 4006a48:	41cf883a 	add	r7,r8,r7
 4006a4c:	014100f4 	movhi	r5,1027
 4006a50:	294ada04 	addi	r5,r5,11112
 4006a54:	dfc00615 	stw	ra,24(sp)
 4006a58:	da800015 	stw	r10,0(sp)
 4006a5c:	dac00115 	stw	r11,4(sp)
 4006a60:	db000215 	stw	r12,8(sp)
 4006a64:	db400315 	stw	r13,12(sp)
 4006a68:	da400415 	stw	r9,16(sp)
 4006a6c:	400b17c0 	call	400b17c <sprintf>
 4006a70:	8805883a 	mov	r2,r17
 4006a74:	dfc00617 	ldw	ra,24(sp)
 4006a78:	dc400517 	ldw	r17,20(sp)
 4006a7c:	dec00704 	addi	sp,sp,28
 4006a80:	f800283a 	ret

04006a84 <quorem>:
 4006a84:	28c00417 	ldw	r3,16(r5)
 4006a88:	20800417 	ldw	r2,16(r4)
 4006a8c:	defff604 	addi	sp,sp,-40
 4006a90:	ddc00715 	stw	r23,28(sp)
 4006a94:	dd400515 	stw	r21,20(sp)
 4006a98:	dfc00915 	stw	ra,36(sp)
 4006a9c:	df000815 	stw	fp,32(sp)
 4006aa0:	dd800615 	stw	r22,24(sp)
 4006aa4:	dd000415 	stw	r20,16(sp)
 4006aa8:	dcc00315 	stw	r19,12(sp)
 4006aac:	dc800215 	stw	r18,8(sp)
 4006ab0:	dc400115 	stw	r17,4(sp)
 4006ab4:	dc000015 	stw	r16,0(sp)
 4006ab8:	202f883a 	mov	r23,r4
 4006abc:	282b883a 	mov	r21,r5
 4006ac0:	10c07416 	blt	r2,r3,4006c94 <quorem+0x210>
 4006ac4:	1c7fffc4 	addi	r17,r3,-1
 4006ac8:	8c45883a 	add	r2,r17,r17
 4006acc:	1085883a 	add	r2,r2,r2
 4006ad0:	2c000504 	addi	r16,r5,20
 4006ad4:	24c00504 	addi	r19,r4,20
 4006ad8:	14ed883a 	add	r22,r2,r19
 4006adc:	80a5883a 	add	r18,r16,r2
 4006ae0:	b7000017 	ldw	fp,0(r22)
 4006ae4:	91400017 	ldw	r5,0(r18)
 4006ae8:	e009883a 	mov	r4,fp
 4006aec:	29400044 	addi	r5,r5,1
 4006af0:	400d82c0 	call	400d82c <__udivsi3>
 4006af4:	1029883a 	mov	r20,r2
 4006af8:	10003c1e 	bne	r2,zero,4006bec <quorem+0x168>
 4006afc:	a80b883a 	mov	r5,r21
 4006b00:	b809883a 	mov	r4,r23
 4006b04:	40099240 	call	4009924 <__mcmp>
 4006b08:	10002b16 	blt	r2,zero,4006bb8 <quorem+0x134>
 4006b0c:	a5000044 	addi	r20,r20,1
 4006b10:	980f883a 	mov	r7,r19
 4006b14:	0011883a 	mov	r8,zero
 4006b18:	0009883a 	mov	r4,zero
 4006b1c:	81400017 	ldw	r5,0(r16)
 4006b20:	38c00017 	ldw	r3,0(r7)
 4006b24:	84000104 	addi	r16,r16,4
 4006b28:	28bfffcc 	andi	r2,r5,65535
 4006b2c:	2085883a 	add	r2,r4,r2
 4006b30:	11bfffcc 	andi	r6,r2,65535
 4006b34:	193fffcc 	andi	r4,r3,65535
 4006b38:	1004d43a 	srli	r2,r2,16
 4006b3c:	280ad43a 	srli	r5,r5,16
 4006b40:	2189c83a 	sub	r4,r4,r6
 4006b44:	2209883a 	add	r4,r4,r8
 4006b48:	1806d43a 	srli	r3,r3,16
 4006b4c:	288b883a 	add	r5,r5,r2
 4006b50:	200dd43a 	srai	r6,r4,16
 4006b54:	28bfffcc 	andi	r2,r5,65535
 4006b58:	1887c83a 	sub	r3,r3,r2
 4006b5c:	1987883a 	add	r3,r3,r6
 4006b60:	3900000d 	sth	r4,0(r7)
 4006b64:	38c0008d 	sth	r3,2(r7)
 4006b68:	2808d43a 	srli	r4,r5,16
 4006b6c:	39c00104 	addi	r7,r7,4
 4006b70:	1811d43a 	srai	r8,r3,16
 4006b74:	943fe92e 	bgeu	r18,r16,4006b1c <quorem+0x98>
 4006b78:	8c45883a 	add	r2,r17,r17
 4006b7c:	1085883a 	add	r2,r2,r2
 4006b80:	9885883a 	add	r2,r19,r2
 4006b84:	10c00017 	ldw	r3,0(r2)
 4006b88:	18000b1e 	bne	r3,zero,4006bb8 <quorem+0x134>
 4006b8c:	113fff04 	addi	r4,r2,-4
 4006b90:	9900082e 	bgeu	r19,r4,4006bb4 <quorem+0x130>
 4006b94:	10bfff17 	ldw	r2,-4(r2)
 4006b98:	10000326 	beq	r2,zero,4006ba8 <quorem+0x124>
 4006b9c:	00000506 	br	4006bb4 <quorem+0x130>
 4006ba0:	20800017 	ldw	r2,0(r4)
 4006ba4:	1000031e 	bne	r2,zero,4006bb4 <quorem+0x130>
 4006ba8:	213fff04 	addi	r4,r4,-4
 4006bac:	8c7fffc4 	addi	r17,r17,-1
 4006bb0:	993ffb36 	bltu	r19,r4,4006ba0 <quorem+0x11c>
 4006bb4:	bc400415 	stw	r17,16(r23)
 4006bb8:	a005883a 	mov	r2,r20
 4006bbc:	dfc00917 	ldw	ra,36(sp)
 4006bc0:	df000817 	ldw	fp,32(sp)
 4006bc4:	ddc00717 	ldw	r23,28(sp)
 4006bc8:	dd800617 	ldw	r22,24(sp)
 4006bcc:	dd400517 	ldw	r21,20(sp)
 4006bd0:	dd000417 	ldw	r20,16(sp)
 4006bd4:	dcc00317 	ldw	r19,12(sp)
 4006bd8:	dc800217 	ldw	r18,8(sp)
 4006bdc:	dc400117 	ldw	r17,4(sp)
 4006be0:	dc000017 	ldw	r16,0(sp)
 4006be4:	dec00a04 	addi	sp,sp,40
 4006be8:	f800283a 	ret
 4006bec:	980f883a 	mov	r7,r19
 4006bf0:	8011883a 	mov	r8,r16
 4006bf4:	0013883a 	mov	r9,zero
 4006bf8:	000d883a 	mov	r6,zero
 4006bfc:	40c00017 	ldw	r3,0(r8)
 4006c00:	39000017 	ldw	r4,0(r7)
 4006c04:	42000104 	addi	r8,r8,4
 4006c08:	18bfffcc 	andi	r2,r3,65535
 4006c0c:	a085383a 	mul	r2,r20,r2
 4006c10:	1806d43a 	srli	r3,r3,16
 4006c14:	217fffcc 	andi	r5,r4,65535
 4006c18:	3085883a 	add	r2,r6,r2
 4006c1c:	11bfffcc 	andi	r6,r2,65535
 4006c20:	a0c7383a 	mul	r3,r20,r3
 4006c24:	1004d43a 	srli	r2,r2,16
 4006c28:	298bc83a 	sub	r5,r5,r6
 4006c2c:	2a4b883a 	add	r5,r5,r9
 4006c30:	2008d43a 	srli	r4,r4,16
 4006c34:	1887883a 	add	r3,r3,r2
 4006c38:	280dd43a 	srai	r6,r5,16
 4006c3c:	18bfffcc 	andi	r2,r3,65535
 4006c40:	2089c83a 	sub	r4,r4,r2
 4006c44:	2189883a 	add	r4,r4,r6
 4006c48:	3900008d 	sth	r4,2(r7)
 4006c4c:	3940000d 	sth	r5,0(r7)
 4006c50:	180cd43a 	srli	r6,r3,16
 4006c54:	39c00104 	addi	r7,r7,4
 4006c58:	2013d43a 	srai	r9,r4,16
 4006c5c:	923fe72e 	bgeu	r18,r8,4006bfc <quorem+0x178>
 4006c60:	e03fa61e 	bne	fp,zero,4006afc <quorem+0x78>
 4006c64:	b0ffff04 	addi	r3,r22,-4
 4006c68:	98c0082e 	bgeu	r19,r3,4006c8c <quorem+0x208>
 4006c6c:	b0bfff17 	ldw	r2,-4(r22)
 4006c70:	10000326 	beq	r2,zero,4006c80 <quorem+0x1fc>
 4006c74:	00000506 	br	4006c8c <quorem+0x208>
 4006c78:	18800017 	ldw	r2,0(r3)
 4006c7c:	1000031e 	bne	r2,zero,4006c8c <quorem+0x208>
 4006c80:	18ffff04 	addi	r3,r3,-4
 4006c84:	8c7fffc4 	addi	r17,r17,-1
 4006c88:	98fffb36 	bltu	r19,r3,4006c78 <quorem+0x1f4>
 4006c8c:	bc400415 	stw	r17,16(r23)
 4006c90:	003f9a06 	br	4006afc <quorem+0x78>
 4006c94:	0005883a 	mov	r2,zero
 4006c98:	003fc806 	br	4006bbc <quorem+0x138>

04006c9c <_dtoa_r>:
 4006c9c:	22001017 	ldw	r8,64(r4)
 4006ca0:	deffda04 	addi	sp,sp,-152
 4006ca4:	dd402115 	stw	r21,132(sp)
 4006ca8:	dd002015 	stw	r20,128(sp)
 4006cac:	dc801e15 	stw	r18,120(sp)
 4006cb0:	dc401d15 	stw	r17,116(sp)
 4006cb4:	dfc02515 	stw	ra,148(sp)
 4006cb8:	df002415 	stw	fp,144(sp)
 4006cbc:	ddc02315 	stw	r23,140(sp)
 4006cc0:	dd802215 	stw	r22,136(sp)
 4006cc4:	dcc01f15 	stw	r19,124(sp)
 4006cc8:	dc001c15 	stw	r16,112(sp)
 4006ccc:	d9001615 	stw	r4,88(sp)
 4006cd0:	3023883a 	mov	r17,r6
 4006cd4:	2829883a 	mov	r20,r5
 4006cd8:	d9c01715 	stw	r7,92(sp)
 4006cdc:	dc802817 	ldw	r18,160(sp)
 4006ce0:	302b883a 	mov	r21,r6
 4006ce4:	40000a26 	beq	r8,zero,4006d10 <_dtoa_r+0x74>
 4006ce8:	20801117 	ldw	r2,68(r4)
 4006cec:	400b883a 	mov	r5,r8
 4006cf0:	40800115 	stw	r2,4(r8)
 4006cf4:	20c01117 	ldw	r3,68(r4)
 4006cf8:	00800044 	movi	r2,1
 4006cfc:	10c4983a 	sll	r2,r2,r3
 4006d00:	40800215 	stw	r2,8(r8)
 4006d04:	40097c80 	call	40097c8 <_Bfree>
 4006d08:	d8c01617 	ldw	r3,88(sp)
 4006d0c:	18001015 	stw	zero,64(r3)
 4006d10:	8800a316 	blt	r17,zero,4006fa0 <_dtoa_r+0x304>
 4006d14:	90000015 	stw	zero,0(r18)
 4006d18:	a8dffc2c 	andhi	r3,r21,32752
 4006d1c:	009ffc34 	movhi	r2,32752
 4006d20:	18809126 	beq	r3,r2,4006f68 <_dtoa_r+0x2cc>
 4006d24:	000d883a 	mov	r6,zero
 4006d28:	000f883a 	mov	r7,zero
 4006d2c:	a009883a 	mov	r4,r20
 4006d30:	a80b883a 	mov	r5,r21
 4006d34:	dd001215 	stw	r20,72(sp)
 4006d38:	dd401315 	stw	r21,76(sp)
 4006d3c:	400d16c0 	call	400d16c <__nedf2>
 4006d40:	1000171e 	bne	r2,zero,4006da0 <_dtoa_r+0x104>
 4006d44:	d9802717 	ldw	r6,156(sp)
 4006d48:	00800044 	movi	r2,1
 4006d4c:	30800015 	stw	r2,0(r6)
 4006d50:	d8802917 	ldw	r2,164(sp)
 4006d54:	10029b26 	beq	r2,zero,40077c4 <_dtoa_r+0xb28>
 4006d58:	d9002917 	ldw	r4,164(sp)
 4006d5c:	008100f4 	movhi	r2,1027
 4006d60:	108ad144 	addi	r2,r2,11077
 4006d64:	10ffffc4 	addi	r3,r2,-1
 4006d68:	20800015 	stw	r2,0(r4)
 4006d6c:	1805883a 	mov	r2,r3
 4006d70:	dfc02517 	ldw	ra,148(sp)
 4006d74:	df002417 	ldw	fp,144(sp)
 4006d78:	ddc02317 	ldw	r23,140(sp)
 4006d7c:	dd802217 	ldw	r22,136(sp)
 4006d80:	dd402117 	ldw	r21,132(sp)
 4006d84:	dd002017 	ldw	r20,128(sp)
 4006d88:	dcc01f17 	ldw	r19,124(sp)
 4006d8c:	dc801e17 	ldw	r18,120(sp)
 4006d90:	dc401d17 	ldw	r17,116(sp)
 4006d94:	dc001c17 	ldw	r16,112(sp)
 4006d98:	dec02604 	addi	sp,sp,152
 4006d9c:	f800283a 	ret
 4006da0:	d9001617 	ldw	r4,88(sp)
 4006da4:	d9401217 	ldw	r5,72(sp)
 4006da8:	d8800104 	addi	r2,sp,4
 4006dac:	a80d883a 	mov	r6,r21
 4006db0:	d9c00204 	addi	r7,sp,8
 4006db4:	d8800015 	stw	r2,0(sp)
 4006db8:	4009e040 	call	4009e04 <__d2b>
 4006dbc:	d8800715 	stw	r2,28(sp)
 4006dc0:	a804d53a 	srli	r2,r21,20
 4006dc4:	1101ffcc 	andi	r4,r2,2047
 4006dc8:	20008626 	beq	r4,zero,4006fe4 <_dtoa_r+0x348>
 4006dcc:	d8c01217 	ldw	r3,72(sp)
 4006dd0:	00800434 	movhi	r2,16
 4006dd4:	10bfffc4 	addi	r2,r2,-1
 4006dd8:	ddc00117 	ldw	r23,4(sp)
 4006ddc:	a884703a 	and	r2,r21,r2
 4006de0:	1811883a 	mov	r8,r3
 4006de4:	124ffc34 	orhi	r9,r2,16368
 4006de8:	25bf0044 	addi	r22,r4,-1023
 4006dec:	d8000815 	stw	zero,32(sp)
 4006df0:	0005883a 	mov	r2,zero
 4006df4:	00cffe34 	movhi	r3,16376
 4006df8:	480b883a 	mov	r5,r9
 4006dfc:	4009883a 	mov	r4,r8
 4006e00:	180f883a 	mov	r7,r3
 4006e04:	100d883a 	mov	r6,r2
 4006e08:	400c9d40 	call	400c9d4 <__subdf3>
 4006e0c:	0218dbf4 	movhi	r8,25455
 4006e10:	4210d844 	addi	r8,r8,17249
 4006e14:	024ff4f4 	movhi	r9,16339
 4006e18:	4a61e9c4 	addi	r9,r9,-30809
 4006e1c:	480f883a 	mov	r7,r9
 4006e20:	400d883a 	mov	r6,r8
 4006e24:	180b883a 	mov	r5,r3
 4006e28:	1009883a 	mov	r4,r2
 4006e2c:	400cac80 	call	400cac8 <__muldf3>
 4006e30:	0222d874 	movhi	r8,35681
 4006e34:	42322cc4 	addi	r8,r8,-14157
 4006e38:	024ff1f4 	movhi	r9,16327
 4006e3c:	4a628a04 	addi	r9,r9,-30168
 4006e40:	480f883a 	mov	r7,r9
 4006e44:	400d883a 	mov	r6,r8
 4006e48:	180b883a 	mov	r5,r3
 4006e4c:	1009883a 	mov	r4,r2
 4006e50:	400ca540 	call	400ca54 <__adddf3>
 4006e54:	b009883a 	mov	r4,r22
 4006e58:	1021883a 	mov	r16,r2
 4006e5c:	1823883a 	mov	r17,r3
 4006e60:	400d38c0 	call	400d38c <__floatsidf>
 4006e64:	021427f4 	movhi	r8,20639
 4006e68:	421e7ec4 	addi	r8,r8,31227
 4006e6c:	024ff4f4 	movhi	r9,16339
 4006e70:	4a5104c4 	addi	r9,r9,17427
 4006e74:	480f883a 	mov	r7,r9
 4006e78:	400d883a 	mov	r6,r8
 4006e7c:	180b883a 	mov	r5,r3
 4006e80:	1009883a 	mov	r4,r2
 4006e84:	400cac80 	call	400cac8 <__muldf3>
 4006e88:	180f883a 	mov	r7,r3
 4006e8c:	880b883a 	mov	r5,r17
 4006e90:	100d883a 	mov	r6,r2
 4006e94:	8009883a 	mov	r4,r16
 4006e98:	400ca540 	call	400ca54 <__adddf3>
 4006e9c:	1009883a 	mov	r4,r2
 4006ea0:	180b883a 	mov	r5,r3
 4006ea4:	1021883a 	mov	r16,r2
 4006ea8:	1823883a 	mov	r17,r3
 4006eac:	400d4840 	call	400d484 <__fixdfsi>
 4006eb0:	000d883a 	mov	r6,zero
 4006eb4:	000f883a 	mov	r7,zero
 4006eb8:	8009883a 	mov	r4,r16
 4006ebc:	880b883a 	mov	r5,r17
 4006ec0:	d8800d15 	stw	r2,52(sp)
 4006ec4:	400d3040 	call	400d304 <__ltdf2>
 4006ec8:	10031716 	blt	r2,zero,4007b28 <_dtoa_r+0xe8c>
 4006ecc:	d8c00d17 	ldw	r3,52(sp)
 4006ed0:	00800584 	movi	r2,22
 4006ed4:	10c1482e 	bgeu	r2,r3,40073f8 <_dtoa_r+0x75c>
 4006ed8:	01000044 	movi	r4,1
 4006edc:	d9000c15 	stw	r4,48(sp)
 4006ee0:	bd85c83a 	sub	r2,r23,r22
 4006ee4:	11bfffc4 	addi	r6,r2,-1
 4006ee8:	30030b16 	blt	r6,zero,4007b18 <_dtoa_r+0xe7c>
 4006eec:	d9800a15 	stw	r6,40(sp)
 4006ef0:	d8001115 	stw	zero,68(sp)
 4006ef4:	d8c00d17 	ldw	r3,52(sp)
 4006ef8:	1802ff16 	blt	r3,zero,4007af8 <_dtoa_r+0xe5c>
 4006efc:	d9000a17 	ldw	r4,40(sp)
 4006f00:	d8c00915 	stw	r3,36(sp)
 4006f04:	d8001015 	stw	zero,64(sp)
 4006f08:	20c9883a 	add	r4,r4,r3
 4006f0c:	d9000a15 	stw	r4,40(sp)
 4006f10:	d9001717 	ldw	r4,92(sp)
 4006f14:	00800244 	movi	r2,9
 4006f18:	11004636 	bltu	r2,r4,4007034 <_dtoa_r+0x398>
 4006f1c:	00800144 	movi	r2,5
 4006f20:	11020416 	blt	r2,r4,4007734 <_dtoa_r+0xa98>
 4006f24:	04400044 	movi	r17,1
 4006f28:	d8c01717 	ldw	r3,92(sp)
 4006f2c:	00800144 	movi	r2,5
 4006f30:	10c1ed36 	bltu	r2,r3,40076e8 <_dtoa_r+0xa4c>
 4006f34:	18c5883a 	add	r2,r3,r3
 4006f38:	1085883a 	add	r2,r2,r2
 4006f3c:	00c10034 	movhi	r3,1024
 4006f40:	18dbd404 	addi	r3,r3,28496
 4006f44:	10c5883a 	add	r2,r2,r3
 4006f48:	11000017 	ldw	r4,0(r2)
 4006f4c:	2000683a 	jmp	r4
 4006f50:	0400703c 	xorhi	r16,zero,448
 4006f54:	0400703c 	xorhi	r16,zero,448
 4006f58:	04007a3c 	xorhi	r16,zero,488
 4006f5c:	04007a14 	movui	r16,488
 4006f60:	04007a58 	cmpnei	r16,zero,489
 4006f64:	04007a64 	muli	r16,zero,489
 4006f68:	d9002717 	ldw	r4,156(sp)
 4006f6c:	0089c3c4 	movi	r2,9999
 4006f70:	20800015 	stw	r2,0(r4)
 4006f74:	a0001026 	beq	r20,zero,4006fb8 <_dtoa_r+0x31c>
 4006f78:	00c100f4 	movhi	r3,1027
 4006f7c:	18caf404 	addi	r3,r3,11216
 4006f80:	d9802917 	ldw	r6,164(sp)
 4006f84:	303f7926 	beq	r6,zero,4006d6c <_dtoa_r+0xd0>
 4006f88:	188000c7 	ldb	r2,3(r3)
 4006f8c:	190000c4 	addi	r4,r3,3
 4006f90:	1000101e 	bne	r2,zero,4006fd4 <_dtoa_r+0x338>
 4006f94:	d8802917 	ldw	r2,164(sp)
 4006f98:	11000015 	stw	r4,0(r2)
 4006f9c:	003f7306 	br	4006d6c <_dtoa_r+0xd0>
 4006fa0:	00a00034 	movhi	r2,32768
 4006fa4:	10bfffc4 	addi	r2,r2,-1
 4006fa8:	00c00044 	movi	r3,1
 4006fac:	88aa703a 	and	r21,r17,r2
 4006fb0:	90c00015 	stw	r3,0(r18)
 4006fb4:	003f5806 	br	4006d18 <_dtoa_r+0x7c>
 4006fb8:	00800434 	movhi	r2,16
 4006fbc:	10bfffc4 	addi	r2,r2,-1
 4006fc0:	a884703a 	and	r2,r21,r2
 4006fc4:	103fec1e 	bne	r2,zero,4006f78 <_dtoa_r+0x2dc>
 4006fc8:	00c100f4 	movhi	r3,1027
 4006fcc:	18caf104 	addi	r3,r3,11204
 4006fd0:	003feb06 	br	4006f80 <_dtoa_r+0x2e4>
 4006fd4:	d8802917 	ldw	r2,164(sp)
 4006fd8:	19000204 	addi	r4,r3,8
 4006fdc:	11000015 	stw	r4,0(r2)
 4006fe0:	003f6206 	br	4006d6c <_dtoa_r+0xd0>
 4006fe4:	ddc00117 	ldw	r23,4(sp)
 4006fe8:	d8800217 	ldw	r2,8(sp)
 4006fec:	01000804 	movi	r4,32
 4006ff0:	b8c10c84 	addi	r3,r23,1074
 4006ff4:	18a3883a 	add	r17,r3,r2
 4006ff8:	2441b80e 	bge	r4,r17,40076dc <_dtoa_r+0xa40>
 4006ffc:	00c01004 	movi	r3,64
 4007000:	1c47c83a 	sub	r3,r3,r17
 4007004:	88bff804 	addi	r2,r17,-32
 4007008:	a8c6983a 	sll	r3,r21,r3
 400700c:	a084d83a 	srl	r2,r20,r2
 4007010:	1888b03a 	or	r4,r3,r2
 4007014:	400d55c0 	call	400d55c <__floatunsidf>
 4007018:	1011883a 	mov	r8,r2
 400701c:	00bf8434 	movhi	r2,65040
 4007020:	01000044 	movi	r4,1
 4007024:	10d3883a 	add	r9,r2,r3
 4007028:	8dbef344 	addi	r22,r17,-1075
 400702c:	d9000815 	stw	r4,32(sp)
 4007030:	003f6f06 	br	4006df0 <_dtoa_r+0x154>
 4007034:	d8001715 	stw	zero,92(sp)
 4007038:	04400044 	movi	r17,1
 400703c:	00bfffc4 	movi	r2,-1
 4007040:	00c00044 	movi	r3,1
 4007044:	d8800e15 	stw	r2,56(sp)
 4007048:	d8002615 	stw	zero,152(sp)
 400704c:	d8800f15 	stw	r2,60(sp)
 4007050:	d8c00b15 	stw	r3,44(sp)
 4007054:	1021883a 	mov	r16,r2
 4007058:	d8801617 	ldw	r2,88(sp)
 400705c:	10001115 	stw	zero,68(r2)
 4007060:	d8801617 	ldw	r2,88(sp)
 4007064:	11401117 	ldw	r5,68(r2)
 4007068:	1009883a 	mov	r4,r2
 400706c:	4009d480 	call	4009d48 <_Balloc>
 4007070:	d8c01617 	ldw	r3,88(sp)
 4007074:	d8800515 	stw	r2,20(sp)
 4007078:	18801015 	stw	r2,64(r3)
 400707c:	00800384 	movi	r2,14
 4007080:	14006836 	bltu	r2,r16,4007224 <_dtoa_r+0x588>
 4007084:	8805003a 	cmpeq	r2,r17,zero
 4007088:	1000661e 	bne	r2,zero,4007224 <_dtoa_r+0x588>
 400708c:	d9000d17 	ldw	r4,52(sp)
 4007090:	0102300e 	bge	zero,r4,4007954 <_dtoa_r+0xcb8>
 4007094:	208003cc 	andi	r2,r4,15
 4007098:	100490fa 	slli	r2,r2,3
 400709c:	2025d13a 	srai	r18,r4,4
 40070a0:	00c100f4 	movhi	r3,1027
 40070a4:	18cb0404 	addi	r3,r3,11280
 40070a8:	10c5883a 	add	r2,r2,r3
 40070ac:	90c0040c 	andi	r3,r18,16
 40070b0:	14000017 	ldw	r16,0(r2)
 40070b4:	14400117 	ldw	r17,4(r2)
 40070b8:	18036a1e 	bne	r3,zero,4007e64 <_dtoa_r+0x11c8>
 40070bc:	05800084 	movi	r22,2
 40070c0:	90001026 	beq	r18,zero,4007104 <_dtoa_r+0x468>
 40070c4:	04c100f4 	movhi	r19,1027
 40070c8:	9ccb3604 	addi	r19,r19,11480
 40070cc:	9080004c 	andi	r2,r18,1
 40070d0:	1005003a 	cmpeq	r2,r2,zero
 40070d4:	1000081e 	bne	r2,zero,40070f8 <_dtoa_r+0x45c>
 40070d8:	99800017 	ldw	r6,0(r19)
 40070dc:	99c00117 	ldw	r7,4(r19)
 40070e0:	880b883a 	mov	r5,r17
 40070e4:	8009883a 	mov	r4,r16
 40070e8:	400cac80 	call	400cac8 <__muldf3>
 40070ec:	1021883a 	mov	r16,r2
 40070f0:	b5800044 	addi	r22,r22,1
 40070f4:	1823883a 	mov	r17,r3
 40070f8:	9025d07a 	srai	r18,r18,1
 40070fc:	9cc00204 	addi	r19,r19,8
 4007100:	903ff21e 	bne	r18,zero,40070cc <_dtoa_r+0x430>
 4007104:	a80b883a 	mov	r5,r21
 4007108:	a009883a 	mov	r4,r20
 400710c:	880f883a 	mov	r7,r17
 4007110:	800d883a 	mov	r6,r16
 4007114:	400ce8c0 	call	400ce8c <__divdf3>
 4007118:	1029883a 	mov	r20,r2
 400711c:	182b883a 	mov	r21,r3
 4007120:	d8c00c17 	ldw	r3,48(sp)
 4007124:	1805003a 	cmpeq	r2,r3,zero
 4007128:	1000081e 	bne	r2,zero,400714c <_dtoa_r+0x4b0>
 400712c:	0005883a 	mov	r2,zero
 4007130:	00cffc34 	movhi	r3,16368
 4007134:	180f883a 	mov	r7,r3
 4007138:	a009883a 	mov	r4,r20
 400713c:	a80b883a 	mov	r5,r21
 4007140:	100d883a 	mov	r6,r2
 4007144:	400d3040 	call	400d304 <__ltdf2>
 4007148:	1003fe16 	blt	r2,zero,4008144 <_dtoa_r+0x14a8>
 400714c:	b009883a 	mov	r4,r22
 4007150:	400d38c0 	call	400d38c <__floatsidf>
 4007154:	180b883a 	mov	r5,r3
 4007158:	1009883a 	mov	r4,r2
 400715c:	a00d883a 	mov	r6,r20
 4007160:	a80f883a 	mov	r7,r21
 4007164:	400cac80 	call	400cac8 <__muldf3>
 4007168:	0011883a 	mov	r8,zero
 400716c:	02500734 	movhi	r9,16412
 4007170:	1009883a 	mov	r4,r2
 4007174:	180b883a 	mov	r5,r3
 4007178:	480f883a 	mov	r7,r9
 400717c:	400d883a 	mov	r6,r8
 4007180:	400ca540 	call	400ca54 <__adddf3>
 4007184:	d9000f17 	ldw	r4,60(sp)
 4007188:	102d883a 	mov	r22,r2
 400718c:	00bf3034 	movhi	r2,64704
 4007190:	18b9883a 	add	fp,r3,r2
 4007194:	e02f883a 	mov	r23,fp
 4007198:	20028f1e 	bne	r4,zero,4007bd8 <_dtoa_r+0xf3c>
 400719c:	0005883a 	mov	r2,zero
 40071a0:	00d00534 	movhi	r3,16404
 40071a4:	a009883a 	mov	r4,r20
 40071a8:	a80b883a 	mov	r5,r21
 40071ac:	180f883a 	mov	r7,r3
 40071b0:	100d883a 	mov	r6,r2
 40071b4:	400c9d40 	call	400c9d4 <__subdf3>
 40071b8:	1009883a 	mov	r4,r2
 40071bc:	e00f883a 	mov	r7,fp
 40071c0:	180b883a 	mov	r5,r3
 40071c4:	b00d883a 	mov	r6,r22
 40071c8:	1025883a 	mov	r18,r2
 40071cc:	1827883a 	mov	r19,r3
 40071d0:	400d1f40 	call	400d1f4 <__gtdf2>
 40071d4:	00834f16 	blt	zero,r2,4007f14 <_dtoa_r+0x1278>
 40071d8:	e0e0003c 	xorhi	r3,fp,32768
 40071dc:	9009883a 	mov	r4,r18
 40071e0:	980b883a 	mov	r5,r19
 40071e4:	180f883a 	mov	r7,r3
 40071e8:	b00d883a 	mov	r6,r22
 40071ec:	400d3040 	call	400d304 <__ltdf2>
 40071f0:	1000080e 	bge	r2,zero,4007214 <_dtoa_r+0x578>
 40071f4:	0027883a 	mov	r19,zero
 40071f8:	0025883a 	mov	r18,zero
 40071fc:	d8802617 	ldw	r2,152(sp)
 4007200:	df000517 	ldw	fp,20(sp)
 4007204:	d8000615 	stw	zero,24(sp)
 4007208:	0084303a 	nor	r2,zero,r2
 400720c:	d8800d15 	stw	r2,52(sp)
 4007210:	00019b06 	br	4007880 <_dtoa_r+0xbe4>
 4007214:	d9801217 	ldw	r6,72(sp)
 4007218:	d8801317 	ldw	r2,76(sp)
 400721c:	3029883a 	mov	r20,r6
 4007220:	102b883a 	mov	r21,r2
 4007224:	d8c00217 	ldw	r3,8(sp)
 4007228:	18008516 	blt	r3,zero,4007440 <_dtoa_r+0x7a4>
 400722c:	d9000d17 	ldw	r4,52(sp)
 4007230:	00800384 	movi	r2,14
 4007234:	11008216 	blt	r2,r4,4007440 <_dtoa_r+0x7a4>
 4007238:	200490fa 	slli	r2,r4,3
 400723c:	d9802617 	ldw	r6,152(sp)
 4007240:	00c100f4 	movhi	r3,1027
 4007244:	18cb0404 	addi	r3,r3,11280
 4007248:	10c5883a 	add	r2,r2,r3
 400724c:	14800017 	ldw	r18,0(r2)
 4007250:	14c00117 	ldw	r19,4(r2)
 4007254:	30031e16 	blt	r6,zero,4007ed0 <_dtoa_r+0x1234>
 4007258:	d9000517 	ldw	r4,20(sp)
 400725c:	d8c00f17 	ldw	r3,60(sp)
 4007260:	a823883a 	mov	r17,r21
 4007264:	a021883a 	mov	r16,r20
 4007268:	192b883a 	add	r21,r3,r4
 400726c:	2039883a 	mov	fp,r4
 4007270:	00000f06 	br	40072b0 <_dtoa_r+0x614>
 4007274:	0005883a 	mov	r2,zero
 4007278:	00d00934 	movhi	r3,16420
 400727c:	5009883a 	mov	r4,r10
 4007280:	580b883a 	mov	r5,r11
 4007284:	180f883a 	mov	r7,r3
 4007288:	100d883a 	mov	r6,r2
 400728c:	400cac80 	call	400cac8 <__muldf3>
 4007290:	180b883a 	mov	r5,r3
 4007294:	000d883a 	mov	r6,zero
 4007298:	000f883a 	mov	r7,zero
 400729c:	1009883a 	mov	r4,r2
 40072a0:	1021883a 	mov	r16,r2
 40072a4:	1823883a 	mov	r17,r3
 40072a8:	400d16c0 	call	400d16c <__nedf2>
 40072ac:	10004526 	beq	r2,zero,40073c4 <_dtoa_r+0x728>
 40072b0:	900d883a 	mov	r6,r18
 40072b4:	980f883a 	mov	r7,r19
 40072b8:	8009883a 	mov	r4,r16
 40072bc:	880b883a 	mov	r5,r17
 40072c0:	400ce8c0 	call	400ce8c <__divdf3>
 40072c4:	180b883a 	mov	r5,r3
 40072c8:	1009883a 	mov	r4,r2
 40072cc:	400d4840 	call	400d484 <__fixdfsi>
 40072d0:	1009883a 	mov	r4,r2
 40072d4:	1029883a 	mov	r20,r2
 40072d8:	400d38c0 	call	400d38c <__floatsidf>
 40072dc:	180f883a 	mov	r7,r3
 40072e0:	9009883a 	mov	r4,r18
 40072e4:	980b883a 	mov	r5,r19
 40072e8:	100d883a 	mov	r6,r2
 40072ec:	400cac80 	call	400cac8 <__muldf3>
 40072f0:	180f883a 	mov	r7,r3
 40072f4:	880b883a 	mov	r5,r17
 40072f8:	8009883a 	mov	r4,r16
 40072fc:	100d883a 	mov	r6,r2
 4007300:	400c9d40 	call	400c9d4 <__subdf3>
 4007304:	1015883a 	mov	r10,r2
 4007308:	a0800c04 	addi	r2,r20,48
 400730c:	e0800005 	stb	r2,0(fp)
 4007310:	e7000044 	addi	fp,fp,1
 4007314:	1817883a 	mov	r11,r3
 4007318:	e57fd61e 	bne	fp,r21,4007274 <_dtoa_r+0x5d8>
 400731c:	500d883a 	mov	r6,r10
 4007320:	180f883a 	mov	r7,r3
 4007324:	5009883a 	mov	r4,r10
 4007328:	180b883a 	mov	r5,r3
 400732c:	400ca540 	call	400ca54 <__adddf3>
 4007330:	100d883a 	mov	r6,r2
 4007334:	9009883a 	mov	r4,r18
 4007338:	980b883a 	mov	r5,r19
 400733c:	180f883a 	mov	r7,r3
 4007340:	1021883a 	mov	r16,r2
 4007344:	1823883a 	mov	r17,r3
 4007348:	400d3040 	call	400d304 <__ltdf2>
 400734c:	10000816 	blt	r2,zero,4007370 <_dtoa_r+0x6d4>
 4007350:	980b883a 	mov	r5,r19
 4007354:	800d883a 	mov	r6,r16
 4007358:	880f883a 	mov	r7,r17
 400735c:	9009883a 	mov	r4,r18
 4007360:	400d0e40 	call	400d0e4 <__eqdf2>
 4007364:	1000171e 	bne	r2,zero,40073c4 <_dtoa_r+0x728>
 4007368:	a080004c 	andi	r2,r20,1
 400736c:	10001526 	beq	r2,zero,40073c4 <_dtoa_r+0x728>
 4007370:	d8800d17 	ldw	r2,52(sp)
 4007374:	d8800415 	stw	r2,16(sp)
 4007378:	e009883a 	mov	r4,fp
 400737c:	213fffc4 	addi	r4,r4,-1
 4007380:	20c00007 	ldb	r3,0(r4)
 4007384:	00800e44 	movi	r2,57
 4007388:	1880081e 	bne	r3,r2,40073ac <_dtoa_r+0x710>
 400738c:	d8800517 	ldw	r2,20(sp)
 4007390:	113ffa1e 	bne	r2,r4,400737c <_dtoa_r+0x6e0>
 4007394:	d8c00417 	ldw	r3,16(sp)
 4007398:	d9800517 	ldw	r6,20(sp)
 400739c:	00800c04 	movi	r2,48
 40073a0:	18c00044 	addi	r3,r3,1
 40073a4:	d8c00415 	stw	r3,16(sp)
 40073a8:	30800005 	stb	r2,0(r6)
 40073ac:	20800003 	ldbu	r2,0(r4)
 40073b0:	d8c00417 	ldw	r3,16(sp)
 40073b4:	27000044 	addi	fp,r4,1
 40073b8:	10800044 	addi	r2,r2,1
 40073bc:	d8c00d15 	stw	r3,52(sp)
 40073c0:	20800005 	stb	r2,0(r4)
 40073c4:	d9001617 	ldw	r4,88(sp)
 40073c8:	d9400717 	ldw	r5,28(sp)
 40073cc:	40097c80 	call	40097c8 <_Bfree>
 40073d0:	e0000005 	stb	zero,0(fp)
 40073d4:	d9800d17 	ldw	r6,52(sp)
 40073d8:	d8c02717 	ldw	r3,156(sp)
 40073dc:	d9002917 	ldw	r4,164(sp)
 40073e0:	30800044 	addi	r2,r6,1
 40073e4:	18800015 	stw	r2,0(r3)
 40073e8:	20029c26 	beq	r4,zero,4007e5c <_dtoa_r+0x11c0>
 40073ec:	d8c00517 	ldw	r3,20(sp)
 40073f0:	27000015 	stw	fp,0(r4)
 40073f4:	003e5d06 	br	4006d6c <_dtoa_r+0xd0>
 40073f8:	d9800d17 	ldw	r6,52(sp)
 40073fc:	00c100f4 	movhi	r3,1027
 4007400:	18cb0404 	addi	r3,r3,11280
 4007404:	d9001217 	ldw	r4,72(sp)
 4007408:	300490fa 	slli	r2,r6,3
 400740c:	d9401317 	ldw	r5,76(sp)
 4007410:	10c5883a 	add	r2,r2,r3
 4007414:	12000017 	ldw	r8,0(r2)
 4007418:	12400117 	ldw	r9,4(r2)
 400741c:	400d883a 	mov	r6,r8
 4007420:	480f883a 	mov	r7,r9
 4007424:	400d3040 	call	400d304 <__ltdf2>
 4007428:	1000030e 	bge	r2,zero,4007438 <_dtoa_r+0x79c>
 400742c:	d8800d17 	ldw	r2,52(sp)
 4007430:	10bfffc4 	addi	r2,r2,-1
 4007434:	d8800d15 	stw	r2,52(sp)
 4007438:	d8000c15 	stw	zero,48(sp)
 400743c:	003ea806 	br	4006ee0 <_dtoa_r+0x244>
 4007440:	d9000b17 	ldw	r4,44(sp)
 4007444:	202cc03a 	cmpne	r22,r4,zero
 4007448:	b000c71e 	bne	r22,zero,4007768 <_dtoa_r+0xacc>
 400744c:	dc001117 	ldw	r16,68(sp)
 4007450:	dc801017 	ldw	r18,64(sp)
 4007454:	0027883a 	mov	r19,zero
 4007458:	04000b0e 	bge	zero,r16,4007488 <_dtoa_r+0x7ec>
 400745c:	d8c00a17 	ldw	r3,40(sp)
 4007460:	00c0090e 	bge	zero,r3,4007488 <_dtoa_r+0x7ec>
 4007464:	8005883a 	mov	r2,r16
 4007468:	1c011316 	blt	r3,r16,40078b8 <_dtoa_r+0xc1c>
 400746c:	d9000a17 	ldw	r4,40(sp)
 4007470:	d9801117 	ldw	r6,68(sp)
 4007474:	80a1c83a 	sub	r16,r16,r2
 4007478:	2089c83a 	sub	r4,r4,r2
 400747c:	308dc83a 	sub	r6,r6,r2
 4007480:	d9000a15 	stw	r4,40(sp)
 4007484:	d9801115 	stw	r6,68(sp)
 4007488:	d8801017 	ldw	r2,64(sp)
 400748c:	0080150e 	bge	zero,r2,40074e4 <_dtoa_r+0x848>
 4007490:	d8c00b17 	ldw	r3,44(sp)
 4007494:	1805003a 	cmpeq	r2,r3,zero
 4007498:	1001c91e 	bne	r2,zero,4007bc0 <_dtoa_r+0xf24>
 400749c:	04800e0e 	bge	zero,r18,40074d8 <_dtoa_r+0x83c>
 40074a0:	d9001617 	ldw	r4,88(sp)
 40074a4:	980b883a 	mov	r5,r19
 40074a8:	900d883a 	mov	r6,r18
 40074ac:	400a57c0 	call	400a57c <__pow5mult>
 40074b0:	d9001617 	ldw	r4,88(sp)
 40074b4:	d9800717 	ldw	r6,28(sp)
 40074b8:	100b883a 	mov	r5,r2
 40074bc:	1027883a 	mov	r19,r2
 40074c0:	400a2580 	call	400a258 <__multiply>
 40074c4:	d9001617 	ldw	r4,88(sp)
 40074c8:	d9400717 	ldw	r5,28(sp)
 40074cc:	1023883a 	mov	r17,r2
 40074d0:	40097c80 	call	40097c8 <_Bfree>
 40074d4:	dc400715 	stw	r17,28(sp)
 40074d8:	d9001017 	ldw	r4,64(sp)
 40074dc:	248dc83a 	sub	r6,r4,r18
 40074e0:	30010e1e 	bne	r6,zero,400791c <_dtoa_r+0xc80>
 40074e4:	d9001617 	ldw	r4,88(sp)
 40074e8:	04400044 	movi	r17,1
 40074ec:	880b883a 	mov	r5,r17
 40074f0:	400a4400 	call	400a440 <__i2b>
 40074f4:	d9800917 	ldw	r6,36(sp)
 40074f8:	1025883a 	mov	r18,r2
 40074fc:	0180040e 	bge	zero,r6,4007510 <_dtoa_r+0x874>
 4007500:	d9001617 	ldw	r4,88(sp)
 4007504:	100b883a 	mov	r5,r2
 4007508:	400a57c0 	call	400a57c <__pow5mult>
 400750c:	1025883a 	mov	r18,r2
 4007510:	d8801717 	ldw	r2,92(sp)
 4007514:	8880f30e 	bge	r17,r2,40078e4 <_dtoa_r+0xc48>
 4007518:	0023883a 	mov	r17,zero
 400751c:	d9800917 	ldw	r6,36(sp)
 4007520:	30019e1e 	bne	r6,zero,4007b9c <_dtoa_r+0xf00>
 4007524:	00c00044 	movi	r3,1
 4007528:	d9000a17 	ldw	r4,40(sp)
 400752c:	20c5883a 	add	r2,r4,r3
 4007530:	10c007cc 	andi	r3,r2,31
 4007534:	1800841e 	bne	r3,zero,4007748 <_dtoa_r+0xaac>
 4007538:	00800704 	movi	r2,28
 400753c:	d9000a17 	ldw	r4,40(sp)
 4007540:	d9801117 	ldw	r6,68(sp)
 4007544:	80a1883a 	add	r16,r16,r2
 4007548:	2089883a 	add	r4,r4,r2
 400754c:	308d883a 	add	r6,r6,r2
 4007550:	d9000a15 	stw	r4,40(sp)
 4007554:	d9801115 	stw	r6,68(sp)
 4007558:	d8801117 	ldw	r2,68(sp)
 400755c:	0080050e 	bge	zero,r2,4007574 <_dtoa_r+0x8d8>
 4007560:	d9400717 	ldw	r5,28(sp)
 4007564:	d9001617 	ldw	r4,88(sp)
 4007568:	100d883a 	mov	r6,r2
 400756c:	400a10c0 	call	400a10c <__lshift>
 4007570:	d8800715 	stw	r2,28(sp)
 4007574:	d8c00a17 	ldw	r3,40(sp)
 4007578:	00c0050e 	bge	zero,r3,4007590 <_dtoa_r+0x8f4>
 400757c:	d9001617 	ldw	r4,88(sp)
 4007580:	900b883a 	mov	r5,r18
 4007584:	180d883a 	mov	r6,r3
 4007588:	400a10c0 	call	400a10c <__lshift>
 400758c:	1025883a 	mov	r18,r2
 4007590:	d9000c17 	ldw	r4,48(sp)
 4007594:	2005003a 	cmpeq	r2,r4,zero
 4007598:	10016f26 	beq	r2,zero,4007b58 <_dtoa_r+0xebc>
 400759c:	d9000f17 	ldw	r4,60(sp)
 40075a0:	0102170e 	bge	zero,r4,4007e00 <_dtoa_r+0x1164>
 40075a4:	d9800b17 	ldw	r6,44(sp)
 40075a8:	3005003a 	cmpeq	r2,r6,zero
 40075ac:	1000881e 	bne	r2,zero,40077d0 <_dtoa_r+0xb34>
 40075b0:	0400050e 	bge	zero,r16,40075c8 <_dtoa_r+0x92c>
 40075b4:	d9001617 	ldw	r4,88(sp)
 40075b8:	980b883a 	mov	r5,r19
 40075bc:	800d883a 	mov	r6,r16
 40075c0:	400a10c0 	call	400a10c <__lshift>
 40075c4:	1027883a 	mov	r19,r2
 40075c8:	8804c03a 	cmpne	r2,r17,zero
 40075cc:	1002541e 	bne	r2,zero,4007f20 <_dtoa_r+0x1284>
 40075d0:	980b883a 	mov	r5,r19
 40075d4:	dd800517 	ldw	r22,20(sp)
 40075d8:	dcc00615 	stw	r19,24(sp)
 40075dc:	a700004c 	andi	fp,r20,1
 40075e0:	2827883a 	mov	r19,r5
 40075e4:	d9000717 	ldw	r4,28(sp)
 40075e8:	900b883a 	mov	r5,r18
 40075ec:	4006a840 	call	4006a84 <quorem>
 40075f0:	d9000717 	ldw	r4,28(sp)
 40075f4:	d9400617 	ldw	r5,24(sp)
 40075f8:	1023883a 	mov	r17,r2
 40075fc:	8dc00c04 	addi	r23,r17,48
 4007600:	40099240 	call	4009924 <__mcmp>
 4007604:	d9001617 	ldw	r4,88(sp)
 4007608:	900b883a 	mov	r5,r18
 400760c:	980d883a 	mov	r6,r19
 4007610:	1029883a 	mov	r20,r2
 4007614:	4009f800 	call	4009f80 <__mdiff>
 4007618:	102b883a 	mov	r21,r2
 400761c:	10800317 	ldw	r2,12(r2)
 4007620:	1001281e 	bne	r2,zero,4007ac4 <_dtoa_r+0xe28>
 4007624:	d9000717 	ldw	r4,28(sp)
 4007628:	a80b883a 	mov	r5,r21
 400762c:	40099240 	call	4009924 <__mcmp>
 4007630:	d9001617 	ldw	r4,88(sp)
 4007634:	1021883a 	mov	r16,r2
 4007638:	a80b883a 	mov	r5,r21
 400763c:	40097c80 	call	40097c8 <_Bfree>
 4007640:	8000041e 	bne	r16,zero,4007654 <_dtoa_r+0x9b8>
 4007644:	d8801717 	ldw	r2,92(sp)
 4007648:	1000021e 	bne	r2,zero,4007654 <_dtoa_r+0x9b8>
 400764c:	e004c03a 	cmpne	r2,fp,zero
 4007650:	10011726 	beq	r2,zero,4007ab0 <_dtoa_r+0xe14>
 4007654:	a0010616 	blt	r20,zero,4007a70 <_dtoa_r+0xdd4>
 4007658:	a000041e 	bne	r20,zero,400766c <_dtoa_r+0x9d0>
 400765c:	d8c01717 	ldw	r3,92(sp)
 4007660:	1800021e 	bne	r3,zero,400766c <_dtoa_r+0x9d0>
 4007664:	e004c03a 	cmpne	r2,fp,zero
 4007668:	10010126 	beq	r2,zero,4007a70 <_dtoa_r+0xdd4>
 400766c:	04023d16 	blt	zero,r16,4007f64 <_dtoa_r+0x12c8>
 4007670:	b5c00005 	stb	r23,0(r22)
 4007674:	d9800517 	ldw	r6,20(sp)
 4007678:	d9000f17 	ldw	r4,60(sp)
 400767c:	b5800044 	addi	r22,r22,1
 4007680:	3105883a 	add	r2,r6,r4
 4007684:	b0806526 	beq	r22,r2,400781c <_dtoa_r+0xb80>
 4007688:	d9400717 	ldw	r5,28(sp)
 400768c:	d9001617 	ldw	r4,88(sp)
 4007690:	01800284 	movi	r6,10
 4007694:	000f883a 	mov	r7,zero
 4007698:	400a47c0 	call	400a47c <__multadd>
 400769c:	d8800715 	stw	r2,28(sp)
 40076a0:	d8800617 	ldw	r2,24(sp)
 40076a4:	14c10c26 	beq	r2,r19,4007ad8 <_dtoa_r+0xe3c>
 40076a8:	d9400617 	ldw	r5,24(sp)
 40076ac:	d9001617 	ldw	r4,88(sp)
 40076b0:	01800284 	movi	r6,10
 40076b4:	000f883a 	mov	r7,zero
 40076b8:	400a47c0 	call	400a47c <__multadd>
 40076bc:	d9001617 	ldw	r4,88(sp)
 40076c0:	980b883a 	mov	r5,r19
 40076c4:	01800284 	movi	r6,10
 40076c8:	000f883a 	mov	r7,zero
 40076cc:	d8800615 	stw	r2,24(sp)
 40076d0:	400a47c0 	call	400a47c <__multadd>
 40076d4:	1027883a 	mov	r19,r2
 40076d8:	003fc206 	br	40075e4 <_dtoa_r+0x948>
 40076dc:	2445c83a 	sub	r2,r4,r17
 40076e0:	a088983a 	sll	r4,r20,r2
 40076e4:	003e4b06 	br	4007014 <_dtoa_r+0x378>
 40076e8:	01bfffc4 	movi	r6,-1
 40076ec:	00800044 	movi	r2,1
 40076f0:	d9800e15 	stw	r6,56(sp)
 40076f4:	d9800f15 	stw	r6,60(sp)
 40076f8:	d8800b15 	stw	r2,44(sp)
 40076fc:	d8c01617 	ldw	r3,88(sp)
 4007700:	008005c4 	movi	r2,23
 4007704:	18001115 	stw	zero,68(r3)
 4007708:	1580082e 	bgeu	r2,r22,400772c <_dtoa_r+0xa90>
 400770c:	00c00104 	movi	r3,4
 4007710:	0009883a 	mov	r4,zero
 4007714:	18c7883a 	add	r3,r3,r3
 4007718:	18800504 	addi	r2,r3,20
 400771c:	21000044 	addi	r4,r4,1
 4007720:	b0bffc2e 	bgeu	r22,r2,4007714 <_dtoa_r+0xa78>
 4007724:	d9801617 	ldw	r6,88(sp)
 4007728:	31001115 	stw	r4,68(r6)
 400772c:	dc000f17 	ldw	r16,60(sp)
 4007730:	003e4b06 	br	4007060 <_dtoa_r+0x3c4>
 4007734:	d9801717 	ldw	r6,92(sp)
 4007738:	0023883a 	mov	r17,zero
 400773c:	31bfff04 	addi	r6,r6,-4
 4007740:	d9801715 	stw	r6,92(sp)
 4007744:	003df806 	br	4006f28 <_dtoa_r+0x28c>
 4007748:	00800804 	movi	r2,32
 400774c:	10c9c83a 	sub	r4,r2,r3
 4007750:	00c00104 	movi	r3,4
 4007754:	19005a16 	blt	r3,r4,40078c0 <_dtoa_r+0xc24>
 4007758:	008000c4 	movi	r2,3
 400775c:	113f7e16 	blt	r2,r4,4007558 <_dtoa_r+0x8bc>
 4007760:	20800704 	addi	r2,r4,28
 4007764:	003f7506 	br	400753c <_dtoa_r+0x8a0>
 4007768:	d9801717 	ldw	r6,92(sp)
 400776c:	00800044 	movi	r2,1
 4007770:	1180a10e 	bge	r2,r6,40079f8 <_dtoa_r+0xd5c>
 4007774:	d9800f17 	ldw	r6,60(sp)
 4007778:	d8c01017 	ldw	r3,64(sp)
 400777c:	30bfffc4 	addi	r2,r6,-1
 4007780:	1881c616 	blt	r3,r2,4007e9c <_dtoa_r+0x1200>
 4007784:	18a5c83a 	sub	r18,r3,r2
 4007788:	d8800f17 	ldw	r2,60(sp)
 400778c:	10026216 	blt	r2,zero,4008118 <_dtoa_r+0x147c>
 4007790:	dc001117 	ldw	r16,68(sp)
 4007794:	1007883a 	mov	r3,r2
 4007798:	d9800a17 	ldw	r6,40(sp)
 400779c:	d8801117 	ldw	r2,68(sp)
 40077a0:	d9001617 	ldw	r4,88(sp)
 40077a4:	30cd883a 	add	r6,r6,r3
 40077a8:	10c5883a 	add	r2,r2,r3
 40077ac:	01400044 	movi	r5,1
 40077b0:	d9800a15 	stw	r6,40(sp)
 40077b4:	d8801115 	stw	r2,68(sp)
 40077b8:	400a4400 	call	400a440 <__i2b>
 40077bc:	1027883a 	mov	r19,r2
 40077c0:	003f2506 	br	4007458 <_dtoa_r+0x7bc>
 40077c4:	00c100f4 	movhi	r3,1027
 40077c8:	18cad104 	addi	r3,r3,11076
 40077cc:	003d6706 	br	4006d6c <_dtoa_r+0xd0>
 40077d0:	dd800517 	ldw	r22,20(sp)
 40077d4:	04000044 	movi	r16,1
 40077d8:	00000706 	br	40077f8 <_dtoa_r+0xb5c>
 40077dc:	d9400717 	ldw	r5,28(sp)
 40077e0:	d9001617 	ldw	r4,88(sp)
 40077e4:	01800284 	movi	r6,10
 40077e8:	000f883a 	mov	r7,zero
 40077ec:	400a47c0 	call	400a47c <__multadd>
 40077f0:	d8800715 	stw	r2,28(sp)
 40077f4:	84000044 	addi	r16,r16,1
 40077f8:	d9000717 	ldw	r4,28(sp)
 40077fc:	900b883a 	mov	r5,r18
 4007800:	4006a840 	call	4006a84 <quorem>
 4007804:	15c00c04 	addi	r23,r2,48
 4007808:	b5c00005 	stb	r23,0(r22)
 400780c:	d8c00f17 	ldw	r3,60(sp)
 4007810:	b5800044 	addi	r22,r22,1
 4007814:	80fff116 	blt	r16,r3,40077dc <_dtoa_r+0xb40>
 4007818:	d8000615 	stw	zero,24(sp)
 400781c:	d9400717 	ldw	r5,28(sp)
 4007820:	d9001617 	ldw	r4,88(sp)
 4007824:	01800044 	movi	r6,1
 4007828:	400a10c0 	call	400a10c <__lshift>
 400782c:	1009883a 	mov	r4,r2
 4007830:	900b883a 	mov	r5,r18
 4007834:	d8800715 	stw	r2,28(sp)
 4007838:	40099240 	call	4009924 <__mcmp>
 400783c:	00803c0e 	bge	zero,r2,4007930 <_dtoa_r+0xc94>
 4007840:	b009883a 	mov	r4,r22
 4007844:	213fffc4 	addi	r4,r4,-1
 4007848:	21400003 	ldbu	r5,0(r4)
 400784c:	00800e44 	movi	r2,57
 4007850:	28c03fcc 	andi	r3,r5,255
 4007854:	18c0201c 	xori	r3,r3,128
 4007858:	18ffe004 	addi	r3,r3,-128
 400785c:	1881981e 	bne	r3,r2,4007ec0 <_dtoa_r+0x1224>
 4007860:	d9800517 	ldw	r6,20(sp)
 4007864:	21bff71e 	bne	r4,r6,4007844 <_dtoa_r+0xba8>
 4007868:	d8800d17 	ldw	r2,52(sp)
 400786c:	37000044 	addi	fp,r6,1
 4007870:	10800044 	addi	r2,r2,1
 4007874:	d8800d15 	stw	r2,52(sp)
 4007878:	00800c44 	movi	r2,49
 400787c:	30800005 	stb	r2,0(r6)
 4007880:	d9001617 	ldw	r4,88(sp)
 4007884:	900b883a 	mov	r5,r18
 4007888:	40097c80 	call	40097c8 <_Bfree>
 400788c:	983ecd26 	beq	r19,zero,40073c4 <_dtoa_r+0x728>
 4007890:	d8c00617 	ldw	r3,24(sp)
 4007894:	18000426 	beq	r3,zero,40078a8 <_dtoa_r+0xc0c>
 4007898:	1cc00326 	beq	r3,r19,40078a8 <_dtoa_r+0xc0c>
 400789c:	d9001617 	ldw	r4,88(sp)
 40078a0:	180b883a 	mov	r5,r3
 40078a4:	40097c80 	call	40097c8 <_Bfree>
 40078a8:	d9001617 	ldw	r4,88(sp)
 40078ac:	980b883a 	mov	r5,r19
 40078b0:	40097c80 	call	40097c8 <_Bfree>
 40078b4:	003ec306 	br	40073c4 <_dtoa_r+0x728>
 40078b8:	1805883a 	mov	r2,r3
 40078bc:	003eeb06 	br	400746c <_dtoa_r+0x7d0>
 40078c0:	d9800a17 	ldw	r6,40(sp)
 40078c4:	d8c01117 	ldw	r3,68(sp)
 40078c8:	20bfff04 	addi	r2,r4,-4
 40078cc:	308d883a 	add	r6,r6,r2
 40078d0:	1887883a 	add	r3,r3,r2
 40078d4:	80a1883a 	add	r16,r16,r2
 40078d8:	d9800a15 	stw	r6,40(sp)
 40078dc:	d8c01115 	stw	r3,68(sp)
 40078e0:	003f1d06 	br	4007558 <_dtoa_r+0x8bc>
 40078e4:	a03f0c1e 	bne	r20,zero,4007518 <_dtoa_r+0x87c>
 40078e8:	00800434 	movhi	r2,16
 40078ec:	10bfffc4 	addi	r2,r2,-1
 40078f0:	a884703a 	and	r2,r21,r2
 40078f4:	103f081e 	bne	r2,zero,4007518 <_dtoa_r+0x87c>
 40078f8:	a89ffc2c 	andhi	r2,r21,32752
 40078fc:	103f0626 	beq	r2,zero,4007518 <_dtoa_r+0x87c>
 4007900:	d8c01117 	ldw	r3,68(sp)
 4007904:	d9000a17 	ldw	r4,40(sp)
 4007908:	18c00044 	addi	r3,r3,1
 400790c:	21000044 	addi	r4,r4,1
 4007910:	d8c01115 	stw	r3,68(sp)
 4007914:	d9000a15 	stw	r4,40(sp)
 4007918:	003f0006 	br	400751c <_dtoa_r+0x880>
 400791c:	d9400717 	ldw	r5,28(sp)
 4007920:	d9001617 	ldw	r4,88(sp)
 4007924:	400a57c0 	call	400a57c <__pow5mult>
 4007928:	d8800715 	stw	r2,28(sp)
 400792c:	003eed06 	br	40074e4 <_dtoa_r+0x848>
 4007930:	1000021e 	bne	r2,zero,400793c <_dtoa_r+0xca0>
 4007934:	b880004c 	andi	r2,r23,1
 4007938:	103fc11e 	bne	r2,zero,4007840 <_dtoa_r+0xba4>
 400793c:	b5bfffc4 	addi	r22,r22,-1
 4007940:	b0c00007 	ldb	r3,0(r22)
 4007944:	00800c04 	movi	r2,48
 4007948:	18bffc26 	beq	r3,r2,400793c <_dtoa_r+0xca0>
 400794c:	b7000044 	addi	fp,r22,1
 4007950:	003fcb06 	br	4007880 <_dtoa_r+0xbe4>
 4007954:	d9800d17 	ldw	r6,52(sp)
 4007958:	018fc83a 	sub	r7,zero,r6
 400795c:	3801f726 	beq	r7,zero,400813c <_dtoa_r+0x14a0>
 4007960:	398003cc 	andi	r6,r7,15
 4007964:	300c90fa 	slli	r6,r6,3
 4007968:	014100f4 	movhi	r5,1027
 400796c:	294b0404 	addi	r5,r5,11280
 4007970:	d9001217 	ldw	r4,72(sp)
 4007974:	314d883a 	add	r6,r6,r5
 4007978:	30c00117 	ldw	r3,4(r6)
 400797c:	30800017 	ldw	r2,0(r6)
 4007980:	d9401317 	ldw	r5,76(sp)
 4007984:	3821d13a 	srai	r16,r7,4
 4007988:	100d883a 	mov	r6,r2
 400798c:	180f883a 	mov	r7,r3
 4007990:	400cac80 	call	400cac8 <__muldf3>
 4007994:	1011883a 	mov	r8,r2
 4007998:	1813883a 	mov	r9,r3
 400799c:	1029883a 	mov	r20,r2
 40079a0:	182b883a 	mov	r21,r3
 40079a4:	8001e526 	beq	r16,zero,400813c <_dtoa_r+0x14a0>
 40079a8:	05800084 	movi	r22,2
 40079ac:	044100f4 	movhi	r17,1027
 40079b0:	8c4b3604 	addi	r17,r17,11480
 40079b4:	8080004c 	andi	r2,r16,1
 40079b8:	1005003a 	cmpeq	r2,r2,zero
 40079bc:	1000081e 	bne	r2,zero,40079e0 <_dtoa_r+0xd44>
 40079c0:	89800017 	ldw	r6,0(r17)
 40079c4:	89c00117 	ldw	r7,4(r17)
 40079c8:	480b883a 	mov	r5,r9
 40079cc:	4009883a 	mov	r4,r8
 40079d0:	400cac80 	call	400cac8 <__muldf3>
 40079d4:	1011883a 	mov	r8,r2
 40079d8:	b5800044 	addi	r22,r22,1
 40079dc:	1813883a 	mov	r9,r3
 40079e0:	8021d07a 	srai	r16,r16,1
 40079e4:	8c400204 	addi	r17,r17,8
 40079e8:	803ff21e 	bne	r16,zero,40079b4 <_dtoa_r+0xd18>
 40079ec:	4029883a 	mov	r20,r8
 40079f0:	482b883a 	mov	r21,r9
 40079f4:	003dca06 	br	4007120 <_dtoa_r+0x484>
 40079f8:	d9000817 	ldw	r4,32(sp)
 40079fc:	2005003a 	cmpeq	r2,r4,zero
 4007a00:	1001f61e 	bne	r2,zero,40081dc <_dtoa_r+0x1540>
 4007a04:	dc001117 	ldw	r16,68(sp)
 4007a08:	dc801017 	ldw	r18,64(sp)
 4007a0c:	18c10cc4 	addi	r3,r3,1075
 4007a10:	003f6106 	br	4007798 <_dtoa_r+0xafc>
 4007a14:	d8000b15 	stw	zero,44(sp)
 4007a18:	d9802617 	ldw	r6,152(sp)
 4007a1c:	d8c00d17 	ldw	r3,52(sp)
 4007a20:	30800044 	addi	r2,r6,1
 4007a24:	18ad883a 	add	r22,r3,r2
 4007a28:	b13fffc4 	addi	r4,r22,-1
 4007a2c:	d9000e15 	stw	r4,56(sp)
 4007a30:	0581f60e 	bge	zero,r22,400820c <_dtoa_r+0x1570>
 4007a34:	dd800f15 	stw	r22,60(sp)
 4007a38:	003f3006 	br	40076fc <_dtoa_r+0xa60>
 4007a3c:	d8000b15 	stw	zero,44(sp)
 4007a40:	d9002617 	ldw	r4,152(sp)
 4007a44:	0101eb0e 	bge	zero,r4,40081f4 <_dtoa_r+0x1558>
 4007a48:	202d883a 	mov	r22,r4
 4007a4c:	d9000e15 	stw	r4,56(sp)
 4007a50:	d9000f15 	stw	r4,60(sp)
 4007a54:	003f2906 	br	40076fc <_dtoa_r+0xa60>
 4007a58:	01800044 	movi	r6,1
 4007a5c:	d9800b15 	stw	r6,44(sp)
 4007a60:	003ff706 	br	4007a40 <_dtoa_r+0xda4>
 4007a64:	01000044 	movi	r4,1
 4007a68:	d9000b15 	stw	r4,44(sp)
 4007a6c:	003fea06 	br	4007a18 <_dtoa_r+0xd7c>
 4007a70:	04000c0e 	bge	zero,r16,4007aa4 <_dtoa_r+0xe08>
 4007a74:	d9400717 	ldw	r5,28(sp)
 4007a78:	d9001617 	ldw	r4,88(sp)
 4007a7c:	01800044 	movi	r6,1
 4007a80:	400a10c0 	call	400a10c <__lshift>
 4007a84:	1009883a 	mov	r4,r2
 4007a88:	900b883a 	mov	r5,r18
 4007a8c:	d8800715 	stw	r2,28(sp)
 4007a90:	40099240 	call	4009924 <__mcmp>
 4007a94:	0081e00e 	bge	zero,r2,4008218 <_dtoa_r+0x157c>
 4007a98:	bdc00044 	addi	r23,r23,1
 4007a9c:	00800e84 	movi	r2,58
 4007aa0:	b881a226 	beq	r23,r2,400812c <_dtoa_r+0x1490>
 4007aa4:	b7000044 	addi	fp,r22,1
 4007aa8:	b5c00005 	stb	r23,0(r22)
 4007aac:	003f7406 	br	4007880 <_dtoa_r+0xbe4>
 4007ab0:	00800e44 	movi	r2,57
 4007ab4:	b8819d26 	beq	r23,r2,400812c <_dtoa_r+0x1490>
 4007ab8:	053ffa0e 	bge	zero,r20,4007aa4 <_dtoa_r+0xe08>
 4007abc:	8dc00c44 	addi	r23,r17,49
 4007ac0:	003ff806 	br	4007aa4 <_dtoa_r+0xe08>
 4007ac4:	d9001617 	ldw	r4,88(sp)
 4007ac8:	a80b883a 	mov	r5,r21
 4007acc:	04000044 	movi	r16,1
 4007ad0:	40097c80 	call	40097c8 <_Bfree>
 4007ad4:	003edf06 	br	4007654 <_dtoa_r+0x9b8>
 4007ad8:	d9001617 	ldw	r4,88(sp)
 4007adc:	980b883a 	mov	r5,r19
 4007ae0:	01800284 	movi	r6,10
 4007ae4:	000f883a 	mov	r7,zero
 4007ae8:	400a47c0 	call	400a47c <__multadd>
 4007aec:	1027883a 	mov	r19,r2
 4007af0:	d8800615 	stw	r2,24(sp)
 4007af4:	003ebb06 	br	40075e4 <_dtoa_r+0x948>
 4007af8:	d9801117 	ldw	r6,68(sp)
 4007afc:	d8800d17 	ldw	r2,52(sp)
 4007b00:	d8000915 	stw	zero,36(sp)
 4007b04:	308dc83a 	sub	r6,r6,r2
 4007b08:	0087c83a 	sub	r3,zero,r2
 4007b0c:	d9801115 	stw	r6,68(sp)
 4007b10:	d8c01015 	stw	r3,64(sp)
 4007b14:	003cfe06 	br	4006f10 <_dtoa_r+0x274>
 4007b18:	018dc83a 	sub	r6,zero,r6
 4007b1c:	d9801115 	stw	r6,68(sp)
 4007b20:	d8000a15 	stw	zero,40(sp)
 4007b24:	003cf306 	br	4006ef4 <_dtoa_r+0x258>
 4007b28:	d9000d17 	ldw	r4,52(sp)
 4007b2c:	400d38c0 	call	400d38c <__floatsidf>
 4007b30:	880b883a 	mov	r5,r17
 4007b34:	8009883a 	mov	r4,r16
 4007b38:	180f883a 	mov	r7,r3
 4007b3c:	100d883a 	mov	r6,r2
 4007b40:	400d16c0 	call	400d16c <__nedf2>
 4007b44:	103ce126 	beq	r2,zero,4006ecc <_dtoa_r+0x230>
 4007b48:	d9800d17 	ldw	r6,52(sp)
 4007b4c:	31bfffc4 	addi	r6,r6,-1
 4007b50:	d9800d15 	stw	r6,52(sp)
 4007b54:	003cdd06 	br	4006ecc <_dtoa_r+0x230>
 4007b58:	d9000717 	ldw	r4,28(sp)
 4007b5c:	900b883a 	mov	r5,r18
 4007b60:	40099240 	call	4009924 <__mcmp>
 4007b64:	103e8d0e 	bge	r2,zero,400759c <_dtoa_r+0x900>
 4007b68:	d9400717 	ldw	r5,28(sp)
 4007b6c:	d9001617 	ldw	r4,88(sp)
 4007b70:	01800284 	movi	r6,10
 4007b74:	000f883a 	mov	r7,zero
 4007b78:	400a47c0 	call	400a47c <__multadd>
 4007b7c:	d9800d17 	ldw	r6,52(sp)
 4007b80:	d8800715 	stw	r2,28(sp)
 4007b84:	31bfffc4 	addi	r6,r6,-1
 4007b88:	d9800d15 	stw	r6,52(sp)
 4007b8c:	b001a71e 	bne	r22,zero,400822c <_dtoa_r+0x1590>
 4007b90:	d8800e17 	ldw	r2,56(sp)
 4007b94:	d8800f15 	stw	r2,60(sp)
 4007b98:	003e8006 	br	400759c <_dtoa_r+0x900>
 4007b9c:	90800417 	ldw	r2,16(r18)
 4007ba0:	1085883a 	add	r2,r2,r2
 4007ba4:	1085883a 	add	r2,r2,r2
 4007ba8:	1485883a 	add	r2,r2,r18
 4007bac:	11000417 	ldw	r4,16(r2)
 4007bb0:	40097f00 	call	40097f0 <__hi0bits>
 4007bb4:	00c00804 	movi	r3,32
 4007bb8:	1887c83a 	sub	r3,r3,r2
 4007bbc:	003e5a06 	br	4007528 <_dtoa_r+0x88c>
 4007bc0:	d9400717 	ldw	r5,28(sp)
 4007bc4:	d9801017 	ldw	r6,64(sp)
 4007bc8:	d9001617 	ldw	r4,88(sp)
 4007bcc:	400a57c0 	call	400a57c <__pow5mult>
 4007bd0:	d8800715 	stw	r2,28(sp)
 4007bd4:	003e4306 	br	40074e4 <_dtoa_r+0x848>
 4007bd8:	d9800f17 	ldw	r6,60(sp)
 4007bdc:	d8800d17 	ldw	r2,52(sp)
 4007be0:	d9800315 	stw	r6,12(sp)
 4007be4:	d8800415 	stw	r2,16(sp)
 4007be8:	d8c00b17 	ldw	r3,44(sp)
 4007bec:	1805003a 	cmpeq	r2,r3,zero
 4007bf0:	1000e21e 	bne	r2,zero,4007f7c <_dtoa_r+0x12e0>
 4007bf4:	d9000317 	ldw	r4,12(sp)
 4007bf8:	0005883a 	mov	r2,zero
 4007bfc:	00cff834 	movhi	r3,16352
 4007c00:	200c90fa 	slli	r6,r4,3
 4007c04:	010100f4 	movhi	r4,1027
 4007c08:	210b0404 	addi	r4,r4,11280
 4007c0c:	180b883a 	mov	r5,r3
 4007c10:	310d883a 	add	r6,r6,r4
 4007c14:	327fff17 	ldw	r9,-4(r6)
 4007c18:	323ffe17 	ldw	r8,-8(r6)
 4007c1c:	1009883a 	mov	r4,r2
 4007c20:	480f883a 	mov	r7,r9
 4007c24:	400d883a 	mov	r6,r8
 4007c28:	400ce8c0 	call	400ce8c <__divdf3>
 4007c2c:	180b883a 	mov	r5,r3
 4007c30:	b00d883a 	mov	r6,r22
 4007c34:	b80f883a 	mov	r7,r23
 4007c38:	1009883a 	mov	r4,r2
 4007c3c:	400c9d40 	call	400c9d4 <__subdf3>
 4007c40:	a80b883a 	mov	r5,r21
 4007c44:	a009883a 	mov	r4,r20
 4007c48:	d8c01915 	stw	r3,100(sp)
 4007c4c:	d8801815 	stw	r2,96(sp)
 4007c50:	400d4840 	call	400d484 <__fixdfsi>
 4007c54:	1009883a 	mov	r4,r2
 4007c58:	1027883a 	mov	r19,r2
 4007c5c:	400d38c0 	call	400d38c <__floatsidf>
 4007c60:	a80b883a 	mov	r5,r21
 4007c64:	a009883a 	mov	r4,r20
 4007c68:	180f883a 	mov	r7,r3
 4007c6c:	100d883a 	mov	r6,r2
 4007c70:	400c9d40 	call	400c9d4 <__subdf3>
 4007c74:	d9801817 	ldw	r6,96(sp)
 4007c78:	1823883a 	mov	r17,r3
 4007c7c:	d8801415 	stw	r2,80(sp)
 4007c80:	302d883a 	mov	r22,r6
 4007c84:	d9800517 	ldw	r6,20(sp)
 4007c88:	9cc00c04 	addi	r19,r19,48
 4007c8c:	dc401515 	stw	r17,84(sp)
 4007c90:	d8c01917 	ldw	r3,100(sp)
 4007c94:	34c00005 	stb	r19,0(r6)
 4007c98:	d8800517 	ldw	r2,20(sp)
 4007c9c:	d9401917 	ldw	r5,100(sp)
 4007ca0:	d9801417 	ldw	r6,80(sp)
 4007ca4:	b009883a 	mov	r4,r22
 4007ca8:	880f883a 	mov	r7,r17
 4007cac:	182f883a 	mov	r23,r3
 4007cb0:	17000044 	addi	fp,r2,1
 4007cb4:	400d1f40 	call	400d1f4 <__gtdf2>
 4007cb8:	00804e16 	blt	zero,r2,4007df4 <_dtoa_r+0x1158>
 4007cbc:	d9801417 	ldw	r6,80(sp)
 4007cc0:	0005883a 	mov	r2,zero
 4007cc4:	00cffc34 	movhi	r3,16368
 4007cc8:	180b883a 	mov	r5,r3
 4007ccc:	880f883a 	mov	r7,r17
 4007cd0:	1009883a 	mov	r4,r2
 4007cd4:	400c9d40 	call	400c9d4 <__subdf3>
 4007cd8:	d9401917 	ldw	r5,100(sp)
 4007cdc:	180f883a 	mov	r7,r3
 4007ce0:	b009883a 	mov	r4,r22
 4007ce4:	100d883a 	mov	r6,r2
 4007ce8:	400d1f40 	call	400d1f4 <__gtdf2>
 4007cec:	00bda216 	blt	zero,r2,4007378 <_dtoa_r+0x6dc>
 4007cf0:	d8c00317 	ldw	r3,12(sp)
 4007cf4:	00800044 	movi	r2,1
 4007cf8:	10c01216 	blt	r2,r3,4007d44 <_dtoa_r+0x10a8>
 4007cfc:	003d4506 	br	4007214 <_dtoa_r+0x578>
 4007d00:	d9801417 	ldw	r6,80(sp)
 4007d04:	0005883a 	mov	r2,zero
 4007d08:	00cffc34 	movhi	r3,16368
 4007d0c:	180b883a 	mov	r5,r3
 4007d10:	880f883a 	mov	r7,r17
 4007d14:	1009883a 	mov	r4,r2
 4007d18:	400c9d40 	call	400c9d4 <__subdf3>
 4007d1c:	d9c01b17 	ldw	r7,108(sp)
 4007d20:	180b883a 	mov	r5,r3
 4007d24:	1009883a 	mov	r4,r2
 4007d28:	b00d883a 	mov	r6,r22
 4007d2c:	400d3040 	call	400d304 <__ltdf2>
 4007d30:	103d9116 	blt	r2,zero,4007378 <_dtoa_r+0x6dc>
 4007d34:	d9800517 	ldw	r6,20(sp)
 4007d38:	d9000317 	ldw	r4,12(sp)
 4007d3c:	3105883a 	add	r2,r6,r4
 4007d40:	e0bd3426 	beq	fp,r2,4007214 <_dtoa_r+0x578>
 4007d44:	04500934 	movhi	r17,16420
 4007d48:	0021883a 	mov	r16,zero
 4007d4c:	b80b883a 	mov	r5,r23
 4007d50:	b009883a 	mov	r4,r22
 4007d54:	800d883a 	mov	r6,r16
 4007d58:	880f883a 	mov	r7,r17
 4007d5c:	400cac80 	call	400cac8 <__muldf3>
 4007d60:	d9401517 	ldw	r5,84(sp)
 4007d64:	d9001417 	ldw	r4,80(sp)
 4007d68:	880f883a 	mov	r7,r17
 4007d6c:	000d883a 	mov	r6,zero
 4007d70:	d8801a15 	stw	r2,104(sp)
 4007d74:	d8c01b15 	stw	r3,108(sp)
 4007d78:	400cac80 	call	400cac8 <__muldf3>
 4007d7c:	180b883a 	mov	r5,r3
 4007d80:	1009883a 	mov	r4,r2
 4007d84:	1823883a 	mov	r17,r3
 4007d88:	1021883a 	mov	r16,r2
 4007d8c:	400d4840 	call	400d484 <__fixdfsi>
 4007d90:	1009883a 	mov	r4,r2
 4007d94:	102b883a 	mov	r21,r2
 4007d98:	400d38c0 	call	400d38c <__floatsidf>
 4007d9c:	880b883a 	mov	r5,r17
 4007da0:	8009883a 	mov	r4,r16
 4007da4:	180f883a 	mov	r7,r3
 4007da8:	100d883a 	mov	r6,r2
 4007dac:	400c9d40 	call	400c9d4 <__subdf3>
 4007db0:	1021883a 	mov	r16,r2
 4007db4:	d9001b17 	ldw	r4,108(sp)
 4007db8:	1823883a 	mov	r17,r3
 4007dbc:	dc001415 	stw	r16,80(sp)
 4007dc0:	ad400c04 	addi	r21,r21,48
 4007dc4:	dc401515 	stw	r17,84(sp)
 4007dc8:	d8801a17 	ldw	r2,104(sp)
 4007dcc:	e5400005 	stb	r21,0(fp)
 4007dd0:	202f883a 	mov	r23,r4
 4007dd4:	d9c01b17 	ldw	r7,108(sp)
 4007dd8:	d9001417 	ldw	r4,80(sp)
 4007ddc:	880b883a 	mov	r5,r17
 4007de0:	100d883a 	mov	r6,r2
 4007de4:	102d883a 	mov	r22,r2
 4007de8:	e7000044 	addi	fp,fp,1
 4007dec:	400d3040 	call	400d304 <__ltdf2>
 4007df0:	103fc30e 	bge	r2,zero,4007d00 <_dtoa_r+0x1064>
 4007df4:	d9000417 	ldw	r4,16(sp)
 4007df8:	d9000d15 	stw	r4,52(sp)
 4007dfc:	003d7106 	br	40073c4 <_dtoa_r+0x728>
 4007e00:	d9801717 	ldw	r6,92(sp)
 4007e04:	00800084 	movi	r2,2
 4007e08:	11bde60e 	bge	r2,r6,40075a4 <_dtoa_r+0x908>
 4007e0c:	203cfb1e 	bne	r4,zero,40071fc <_dtoa_r+0x560>
 4007e10:	d9001617 	ldw	r4,88(sp)
 4007e14:	900b883a 	mov	r5,r18
 4007e18:	01800144 	movi	r6,5
 4007e1c:	000f883a 	mov	r7,zero
 4007e20:	400a47c0 	call	400a47c <__multadd>
 4007e24:	d9000717 	ldw	r4,28(sp)
 4007e28:	100b883a 	mov	r5,r2
 4007e2c:	1025883a 	mov	r18,r2
 4007e30:	40099240 	call	4009924 <__mcmp>
 4007e34:	00bcf10e 	bge	zero,r2,40071fc <_dtoa_r+0x560>
 4007e38:	d8c00d17 	ldw	r3,52(sp)
 4007e3c:	d9000517 	ldw	r4,20(sp)
 4007e40:	d8000615 	stw	zero,24(sp)
 4007e44:	18c00044 	addi	r3,r3,1
 4007e48:	d8c00d15 	stw	r3,52(sp)
 4007e4c:	00800c44 	movi	r2,49
 4007e50:	27000044 	addi	fp,r4,1
 4007e54:	20800005 	stb	r2,0(r4)
 4007e58:	003e8906 	br	4007880 <_dtoa_r+0xbe4>
 4007e5c:	d8c00517 	ldw	r3,20(sp)
 4007e60:	003bc206 	br	4006d6c <_dtoa_r+0xd0>
 4007e64:	018100f4 	movhi	r6,1027
 4007e68:	318b3604 	addi	r6,r6,11480
 4007e6c:	30c00917 	ldw	r3,36(r6)
 4007e70:	30800817 	ldw	r2,32(r6)
 4007e74:	d9001217 	ldw	r4,72(sp)
 4007e78:	d9401317 	ldw	r5,76(sp)
 4007e7c:	180f883a 	mov	r7,r3
 4007e80:	100d883a 	mov	r6,r2
 4007e84:	400ce8c0 	call	400ce8c <__divdf3>
 4007e88:	948003cc 	andi	r18,r18,15
 4007e8c:	058000c4 	movi	r22,3
 4007e90:	1029883a 	mov	r20,r2
 4007e94:	182b883a 	mov	r21,r3
 4007e98:	003c8906 	br	40070c0 <_dtoa_r+0x424>
 4007e9c:	d9001017 	ldw	r4,64(sp)
 4007ea0:	d9800917 	ldw	r6,36(sp)
 4007ea4:	0025883a 	mov	r18,zero
 4007ea8:	1105c83a 	sub	r2,r2,r4
 4007eac:	2089883a 	add	r4,r4,r2
 4007eb0:	308d883a 	add	r6,r6,r2
 4007eb4:	d9001015 	stw	r4,64(sp)
 4007eb8:	d9800915 	stw	r6,36(sp)
 4007ebc:	003e3206 	br	4007788 <_dtoa_r+0xaec>
 4007ec0:	28800044 	addi	r2,r5,1
 4007ec4:	27000044 	addi	fp,r4,1
 4007ec8:	20800005 	stb	r2,0(r4)
 4007ecc:	003e6c06 	br	4007880 <_dtoa_r+0xbe4>
 4007ed0:	d8800f17 	ldw	r2,60(sp)
 4007ed4:	00bce016 	blt	zero,r2,4007258 <_dtoa_r+0x5bc>
 4007ed8:	d9800f17 	ldw	r6,60(sp)
 4007edc:	303cc51e 	bne	r6,zero,40071f4 <_dtoa_r+0x558>
 4007ee0:	0005883a 	mov	r2,zero
 4007ee4:	00d00534 	movhi	r3,16404
 4007ee8:	980b883a 	mov	r5,r19
 4007eec:	180f883a 	mov	r7,r3
 4007ef0:	9009883a 	mov	r4,r18
 4007ef4:	100d883a 	mov	r6,r2
 4007ef8:	400cac80 	call	400cac8 <__muldf3>
 4007efc:	180b883a 	mov	r5,r3
 4007f00:	a80f883a 	mov	r7,r21
 4007f04:	1009883a 	mov	r4,r2
 4007f08:	a00d883a 	mov	r6,r20
 4007f0c:	400d27c0 	call	400d27c <__gedf2>
 4007f10:	103cb80e 	bge	r2,zero,40071f4 <_dtoa_r+0x558>
 4007f14:	0027883a 	mov	r19,zero
 4007f18:	0025883a 	mov	r18,zero
 4007f1c:	003fc606 	br	4007e38 <_dtoa_r+0x119c>
 4007f20:	99400117 	ldw	r5,4(r19)
 4007f24:	d9001617 	ldw	r4,88(sp)
 4007f28:	4009d480 	call	4009d48 <_Balloc>
 4007f2c:	99800417 	ldw	r6,16(r19)
 4007f30:	11000304 	addi	r4,r2,12
 4007f34:	99400304 	addi	r5,r19,12
 4007f38:	318d883a 	add	r6,r6,r6
 4007f3c:	318d883a 	add	r6,r6,r6
 4007f40:	31800204 	addi	r6,r6,8
 4007f44:	1023883a 	mov	r17,r2
 4007f48:	40096480 	call	4009648 <memcpy>
 4007f4c:	d9001617 	ldw	r4,88(sp)
 4007f50:	880b883a 	mov	r5,r17
 4007f54:	01800044 	movi	r6,1
 4007f58:	400a10c0 	call	400a10c <__lshift>
 4007f5c:	100b883a 	mov	r5,r2
 4007f60:	003d9c06 	br	40075d4 <_dtoa_r+0x938>
 4007f64:	00800e44 	movi	r2,57
 4007f68:	b8807026 	beq	r23,r2,400812c <_dtoa_r+0x1490>
 4007f6c:	b8800044 	addi	r2,r23,1
 4007f70:	b7000044 	addi	fp,r22,1
 4007f74:	b0800005 	stb	r2,0(r22)
 4007f78:	003e4106 	br	4007880 <_dtoa_r+0xbe4>
 4007f7c:	d8800317 	ldw	r2,12(sp)
 4007f80:	018100f4 	movhi	r6,1027
 4007f84:	318b0404 	addi	r6,r6,11280
 4007f88:	b009883a 	mov	r4,r22
 4007f8c:	100e90fa 	slli	r7,r2,3
 4007f90:	b80b883a 	mov	r5,r23
 4007f94:	398f883a 	add	r7,r7,r6
 4007f98:	38bffe17 	ldw	r2,-8(r7)
 4007f9c:	d9800517 	ldw	r6,20(sp)
 4007fa0:	38ffff17 	ldw	r3,-4(r7)
 4007fa4:	37000044 	addi	fp,r6,1
 4007fa8:	180f883a 	mov	r7,r3
 4007fac:	100d883a 	mov	r6,r2
 4007fb0:	400cac80 	call	400cac8 <__muldf3>
 4007fb4:	a80b883a 	mov	r5,r21
 4007fb8:	a009883a 	mov	r4,r20
 4007fbc:	182f883a 	mov	r23,r3
 4007fc0:	102d883a 	mov	r22,r2
 4007fc4:	400d4840 	call	400d484 <__fixdfsi>
 4007fc8:	1009883a 	mov	r4,r2
 4007fcc:	1027883a 	mov	r19,r2
 4007fd0:	400d38c0 	call	400d38c <__floatsidf>
 4007fd4:	a80b883a 	mov	r5,r21
 4007fd8:	a009883a 	mov	r4,r20
 4007fdc:	180f883a 	mov	r7,r3
 4007fe0:	100d883a 	mov	r6,r2
 4007fe4:	400c9d40 	call	400c9d4 <__subdf3>
 4007fe8:	180b883a 	mov	r5,r3
 4007fec:	d8c00517 	ldw	r3,20(sp)
 4007ff0:	9cc00c04 	addi	r19,r19,48
 4007ff4:	1009883a 	mov	r4,r2
 4007ff8:	1cc00005 	stb	r19,0(r3)
 4007ffc:	2021883a 	mov	r16,r4
 4008000:	d9000317 	ldw	r4,12(sp)
 4008004:	00800044 	movi	r2,1
 4008008:	2823883a 	mov	r17,r5
 400800c:	20802226 	beq	r4,r2,4008098 <_dtoa_r+0x13fc>
 4008010:	1029883a 	mov	r20,r2
 4008014:	0005883a 	mov	r2,zero
 4008018:	00d00934 	movhi	r3,16420
 400801c:	180f883a 	mov	r7,r3
 4008020:	100d883a 	mov	r6,r2
 4008024:	880b883a 	mov	r5,r17
 4008028:	8009883a 	mov	r4,r16
 400802c:	400cac80 	call	400cac8 <__muldf3>
 4008030:	180b883a 	mov	r5,r3
 4008034:	1009883a 	mov	r4,r2
 4008038:	1823883a 	mov	r17,r3
 400803c:	1021883a 	mov	r16,r2
 4008040:	400d4840 	call	400d484 <__fixdfsi>
 4008044:	1009883a 	mov	r4,r2
 4008048:	102b883a 	mov	r21,r2
 400804c:	400d38c0 	call	400d38c <__floatsidf>
 4008050:	880b883a 	mov	r5,r17
 4008054:	8009883a 	mov	r4,r16
 4008058:	180f883a 	mov	r7,r3
 400805c:	100d883a 	mov	r6,r2
 4008060:	400c9d40 	call	400c9d4 <__subdf3>
 4008064:	180b883a 	mov	r5,r3
 4008068:	d8c00517 	ldw	r3,20(sp)
 400806c:	1009883a 	mov	r4,r2
 4008070:	ad400c04 	addi	r21,r21,48
 4008074:	1d05883a 	add	r2,r3,r20
 4008078:	15400005 	stb	r21,0(r2)
 400807c:	2021883a 	mov	r16,r4
 4008080:	d9000317 	ldw	r4,12(sp)
 4008084:	a5000044 	addi	r20,r20,1
 4008088:	2823883a 	mov	r17,r5
 400808c:	a13fe11e 	bne	r20,r4,4008014 <_dtoa_r+0x1378>
 4008090:	e505883a 	add	r2,fp,r20
 4008094:	173fffc4 	addi	fp,r2,-1
 4008098:	0025883a 	mov	r18,zero
 400809c:	04cff834 	movhi	r19,16352
 40080a0:	b009883a 	mov	r4,r22
 40080a4:	b80b883a 	mov	r5,r23
 40080a8:	900d883a 	mov	r6,r18
 40080ac:	980f883a 	mov	r7,r19
 40080b0:	400ca540 	call	400ca54 <__adddf3>
 40080b4:	180b883a 	mov	r5,r3
 40080b8:	1009883a 	mov	r4,r2
 40080bc:	800d883a 	mov	r6,r16
 40080c0:	880f883a 	mov	r7,r17
 40080c4:	400d3040 	call	400d304 <__ltdf2>
 40080c8:	103cab16 	blt	r2,zero,4007378 <_dtoa_r+0x6dc>
 40080cc:	0009883a 	mov	r4,zero
 40080d0:	980b883a 	mov	r5,r19
 40080d4:	b80f883a 	mov	r7,r23
 40080d8:	b00d883a 	mov	r6,r22
 40080dc:	400c9d40 	call	400c9d4 <__subdf3>
 40080e0:	180b883a 	mov	r5,r3
 40080e4:	880f883a 	mov	r7,r17
 40080e8:	1009883a 	mov	r4,r2
 40080ec:	800d883a 	mov	r6,r16
 40080f0:	400d1f40 	call	400d1f4 <__gtdf2>
 40080f4:	00bc470e 	bge	zero,r2,4007214 <_dtoa_r+0x578>
 40080f8:	00c00c04 	movi	r3,48
 40080fc:	e73fffc4 	addi	fp,fp,-1
 4008100:	e0800007 	ldb	r2,0(fp)
 4008104:	10fffd26 	beq	r2,r3,40080fc <_dtoa_r+0x1460>
 4008108:	d9800417 	ldw	r6,16(sp)
 400810c:	e7000044 	addi	fp,fp,1
 4008110:	d9800d15 	stw	r6,52(sp)
 4008114:	003cab06 	br	40073c4 <_dtoa_r+0x728>
 4008118:	d8c00f17 	ldw	r3,60(sp)
 400811c:	d9001117 	ldw	r4,68(sp)
 4008120:	20e1c83a 	sub	r16,r4,r3
 4008124:	0007883a 	mov	r3,zero
 4008128:	003d9b06 	br	4007798 <_dtoa_r+0xafc>
 400812c:	00800e44 	movi	r2,57
 4008130:	b0800005 	stb	r2,0(r22)
 4008134:	b5800044 	addi	r22,r22,1
 4008138:	003dc106 	br	4007840 <_dtoa_r+0xba4>
 400813c:	05800084 	movi	r22,2
 4008140:	003bf706 	br	4007120 <_dtoa_r+0x484>
 4008144:	d9000f17 	ldw	r4,60(sp)
 4008148:	013c000e 	bge	zero,r4,400714c <_dtoa_r+0x4b0>
 400814c:	d9800e17 	ldw	r6,56(sp)
 4008150:	01bc300e 	bge	zero,r6,4007214 <_dtoa_r+0x578>
 4008154:	0005883a 	mov	r2,zero
 4008158:	00d00934 	movhi	r3,16420
 400815c:	a80b883a 	mov	r5,r21
 4008160:	180f883a 	mov	r7,r3
 4008164:	a009883a 	mov	r4,r20
 4008168:	100d883a 	mov	r6,r2
 400816c:	400cac80 	call	400cac8 <__muldf3>
 4008170:	b1000044 	addi	r4,r22,1
 4008174:	1021883a 	mov	r16,r2
 4008178:	1823883a 	mov	r17,r3
 400817c:	400d38c0 	call	400d38c <__floatsidf>
 4008180:	880b883a 	mov	r5,r17
 4008184:	8009883a 	mov	r4,r16
 4008188:	180f883a 	mov	r7,r3
 400818c:	100d883a 	mov	r6,r2
 4008190:	400cac80 	call	400cac8 <__muldf3>
 4008194:	0011883a 	mov	r8,zero
 4008198:	02500734 	movhi	r9,16412
 400819c:	180b883a 	mov	r5,r3
 40081a0:	480f883a 	mov	r7,r9
 40081a4:	1009883a 	mov	r4,r2
 40081a8:	400d883a 	mov	r6,r8
 40081ac:	400ca540 	call	400ca54 <__adddf3>
 40081b0:	102d883a 	mov	r22,r2
 40081b4:	00bf3034 	movhi	r2,64704
 40081b8:	10ef883a 	add	r23,r2,r3
 40081bc:	d8800d17 	ldw	r2,52(sp)
 40081c0:	d8c00e17 	ldw	r3,56(sp)
 40081c4:	8029883a 	mov	r20,r16
 40081c8:	10bfffc4 	addi	r2,r2,-1
 40081cc:	882b883a 	mov	r21,r17
 40081d0:	d8800415 	stw	r2,16(sp)
 40081d4:	d8c00315 	stw	r3,12(sp)
 40081d8:	003e8306 	br	4007be8 <_dtoa_r+0xf4c>
 40081dc:	d8800117 	ldw	r2,4(sp)
 40081e0:	dc001117 	ldw	r16,68(sp)
 40081e4:	dc801017 	ldw	r18,64(sp)
 40081e8:	00c00d84 	movi	r3,54
 40081ec:	1887c83a 	sub	r3,r3,r2
 40081f0:	003d6906 	br	4007798 <_dtoa_r+0xafc>
 40081f4:	01800044 	movi	r6,1
 40081f8:	3021883a 	mov	r16,r6
 40081fc:	d9800f15 	stw	r6,60(sp)
 4008200:	d9802615 	stw	r6,152(sp)
 4008204:	d9800e15 	stw	r6,56(sp)
 4008208:	003b9306 	br	4007058 <_dtoa_r+0x3bc>
 400820c:	b021883a 	mov	r16,r22
 4008210:	dd800f15 	stw	r22,60(sp)
 4008214:	003b9006 	br	4007058 <_dtoa_r+0x3bc>
 4008218:	103e221e 	bne	r2,zero,4007aa4 <_dtoa_r+0xe08>
 400821c:	b880004c 	andi	r2,r23,1
 4008220:	1005003a 	cmpeq	r2,r2,zero
 4008224:	103e1f1e 	bne	r2,zero,4007aa4 <_dtoa_r+0xe08>
 4008228:	003e1b06 	br	4007a98 <_dtoa_r+0xdfc>
 400822c:	d9001617 	ldw	r4,88(sp)
 4008230:	980b883a 	mov	r5,r19
 4008234:	01800284 	movi	r6,10
 4008238:	000f883a 	mov	r7,zero
 400823c:	400a47c0 	call	400a47c <__multadd>
 4008240:	d8c00e17 	ldw	r3,56(sp)
 4008244:	1027883a 	mov	r19,r2
 4008248:	d8c00f15 	stw	r3,60(sp)
 400824c:	003cd306 	br	400759c <_dtoa_r+0x900>

04008250 <_fflush_r>:
 4008250:	defffb04 	addi	sp,sp,-20
 4008254:	dcc00315 	stw	r19,12(sp)
 4008258:	dc800215 	stw	r18,8(sp)
 400825c:	dfc00415 	stw	ra,16(sp)
 4008260:	dc400115 	stw	r17,4(sp)
 4008264:	dc000015 	stw	r16,0(sp)
 4008268:	2027883a 	mov	r19,r4
 400826c:	2825883a 	mov	r18,r5
 4008270:	20000226 	beq	r4,zero,400827c <_fflush_r+0x2c>
 4008274:	20800e17 	ldw	r2,56(r4)
 4008278:	10005626 	beq	r2,zero,40083d4 <_fflush_r+0x184>
 400827c:	9100030b 	ldhu	r4,12(r18)
 4008280:	20ffffcc 	andi	r3,r4,65535
 4008284:	18e0001c 	xori	r3,r3,32768
 4008288:	18e00004 	addi	r3,r3,-32768
 400828c:	1880020c 	andi	r2,r3,8
 4008290:	1000261e 	bne	r2,zero,400832c <_fflush_r+0xdc>
 4008294:	90c00117 	ldw	r3,4(r18)
 4008298:	20820014 	ori	r2,r4,2048
 400829c:	9080030d 	sth	r2,12(r18)
 40082a0:	1009883a 	mov	r4,r2
 40082a4:	00c0400e 	bge	zero,r3,40083a8 <_fflush_r+0x158>
 40082a8:	92000a17 	ldw	r8,40(r18)
 40082ac:	40004026 	beq	r8,zero,40083b0 <_fflush_r+0x160>
 40082b0:	2084000c 	andi	r2,r4,4096
 40082b4:	10005326 	beq	r2,zero,4008404 <_fflush_r+0x1b4>
 40082b8:	94001417 	ldw	r16,80(r18)
 40082bc:	9080030b 	ldhu	r2,12(r18)
 40082c0:	1080010c 	andi	r2,r2,4
 40082c4:	1000481e 	bne	r2,zero,40083e8 <_fflush_r+0x198>
 40082c8:	91400717 	ldw	r5,28(r18)
 40082cc:	9809883a 	mov	r4,r19
 40082d0:	800d883a 	mov	r6,r16
 40082d4:	000f883a 	mov	r7,zero
 40082d8:	403ee83a 	callr	r8
 40082dc:	8080261e 	bne	r16,r2,4008378 <_fflush_r+0x128>
 40082e0:	9080030b 	ldhu	r2,12(r18)
 40082e4:	91000417 	ldw	r4,16(r18)
 40082e8:	90000115 	stw	zero,4(r18)
 40082ec:	10bdffcc 	andi	r2,r2,63487
 40082f0:	10ffffcc 	andi	r3,r2,65535
 40082f4:	18c4000c 	andi	r3,r3,4096
 40082f8:	9080030d 	sth	r2,12(r18)
 40082fc:	91000015 	stw	r4,0(r18)
 4008300:	18002b26 	beq	r3,zero,40083b0 <_fflush_r+0x160>
 4008304:	0007883a 	mov	r3,zero
 4008308:	1805883a 	mov	r2,r3
 400830c:	94001415 	stw	r16,80(r18)
 4008310:	dfc00417 	ldw	ra,16(sp)
 4008314:	dcc00317 	ldw	r19,12(sp)
 4008318:	dc800217 	ldw	r18,8(sp)
 400831c:	dc400117 	ldw	r17,4(sp)
 4008320:	dc000017 	ldw	r16,0(sp)
 4008324:	dec00504 	addi	sp,sp,20
 4008328:	f800283a 	ret
 400832c:	94400417 	ldw	r17,16(r18)
 4008330:	88001f26 	beq	r17,zero,40083b0 <_fflush_r+0x160>
 4008334:	90800017 	ldw	r2,0(r18)
 4008338:	18c000cc 	andi	r3,r3,3
 400833c:	94400015 	stw	r17,0(r18)
 4008340:	1461c83a 	sub	r16,r2,r17
 4008344:	18002526 	beq	r3,zero,40083dc <_fflush_r+0x18c>
 4008348:	0005883a 	mov	r2,zero
 400834c:	90800215 	stw	r2,8(r18)
 4008350:	0400170e 	bge	zero,r16,40083b0 <_fflush_r+0x160>
 4008354:	90c00917 	ldw	r3,36(r18)
 4008358:	91400717 	ldw	r5,28(r18)
 400835c:	880d883a 	mov	r6,r17
 4008360:	800f883a 	mov	r7,r16
 4008364:	9809883a 	mov	r4,r19
 4008368:	183ee83a 	callr	r3
 400836c:	88a3883a 	add	r17,r17,r2
 4008370:	80a1c83a 	sub	r16,r16,r2
 4008374:	00bff616 	blt	zero,r2,4008350 <_fflush_r+0x100>
 4008378:	9080030b 	ldhu	r2,12(r18)
 400837c:	00ffffc4 	movi	r3,-1
 4008380:	10801014 	ori	r2,r2,64
 4008384:	9080030d 	sth	r2,12(r18)
 4008388:	1805883a 	mov	r2,r3
 400838c:	dfc00417 	ldw	ra,16(sp)
 4008390:	dcc00317 	ldw	r19,12(sp)
 4008394:	dc800217 	ldw	r18,8(sp)
 4008398:	dc400117 	ldw	r17,4(sp)
 400839c:	dc000017 	ldw	r16,0(sp)
 40083a0:	dec00504 	addi	sp,sp,20
 40083a4:	f800283a 	ret
 40083a8:	90800f17 	ldw	r2,60(r18)
 40083ac:	00bfbe16 	blt	zero,r2,40082a8 <_fflush_r+0x58>
 40083b0:	0007883a 	mov	r3,zero
 40083b4:	1805883a 	mov	r2,r3
 40083b8:	dfc00417 	ldw	ra,16(sp)
 40083bc:	dcc00317 	ldw	r19,12(sp)
 40083c0:	dc800217 	ldw	r18,8(sp)
 40083c4:	dc400117 	ldw	r17,4(sp)
 40083c8:	dc000017 	ldw	r16,0(sp)
 40083cc:	dec00504 	addi	sp,sp,20
 40083d0:	f800283a 	ret
 40083d4:	40084e80 	call	40084e8 <__sinit>
 40083d8:	003fa806 	br	400827c <_fflush_r+0x2c>
 40083dc:	90800517 	ldw	r2,20(r18)
 40083e0:	90800215 	stw	r2,8(r18)
 40083e4:	003fda06 	br	4008350 <_fflush_r+0x100>
 40083e8:	90800117 	ldw	r2,4(r18)
 40083ec:	90c00c17 	ldw	r3,48(r18)
 40083f0:	80a1c83a 	sub	r16,r16,r2
 40083f4:	183fb426 	beq	r3,zero,40082c8 <_fflush_r+0x78>
 40083f8:	90800f17 	ldw	r2,60(r18)
 40083fc:	80a1c83a 	sub	r16,r16,r2
 4008400:	003fb106 	br	40082c8 <_fflush_r+0x78>
 4008404:	91400717 	ldw	r5,28(r18)
 4008408:	9809883a 	mov	r4,r19
 400840c:	000d883a 	mov	r6,zero
 4008410:	01c00044 	movi	r7,1
 4008414:	403ee83a 	callr	r8
 4008418:	1021883a 	mov	r16,r2
 400841c:	00bfffc4 	movi	r2,-1
 4008420:	80800226 	beq	r16,r2,400842c <_fflush_r+0x1dc>
 4008424:	92000a17 	ldw	r8,40(r18)
 4008428:	003fa406 	br	40082bc <_fflush_r+0x6c>
 400842c:	98c00017 	ldw	r3,0(r19)
 4008430:	00800744 	movi	r2,29
 4008434:	18bfde26 	beq	r3,r2,40083b0 <_fflush_r+0x160>
 4008438:	9080030b 	ldhu	r2,12(r18)
 400843c:	8007883a 	mov	r3,r16
 4008440:	10801014 	ori	r2,r2,64
 4008444:	9080030d 	sth	r2,12(r18)
 4008448:	003fcf06 	br	4008388 <_fflush_r+0x138>

0400844c <fflush>:
 400844c:	01410074 	movhi	r5,1025
 4008450:	29609404 	addi	r5,r5,-32176
 4008454:	2007883a 	mov	r3,r4
 4008458:	20000526 	beq	r4,zero,4008470 <fflush+0x24>
 400845c:	00810134 	movhi	r2,1028
 4008460:	10a0f704 	addi	r2,r2,-31780
 4008464:	11000017 	ldw	r4,0(r2)
 4008468:	180b883a 	mov	r5,r3
 400846c:	40082501 	jmpi	4008250 <_fflush_r>
 4008470:	00810134 	movhi	r2,1028
 4008474:	10a0f804 	addi	r2,r2,-31776
 4008478:	11000017 	ldw	r4,0(r2)
 400847c:	40091681 	jmpi	4009168 <_fwalk_reent>

04008480 <std>:
 4008480:	00810074 	movhi	r2,1025
 4008484:	10ac9404 	addi	r2,r2,-19888
 4008488:	20800b15 	stw	r2,44(r4)
 400848c:	00810074 	movhi	r2,1025
 4008490:	10accf04 	addi	r2,r2,-19652
 4008494:	20800815 	stw	r2,32(r4)
 4008498:	00c10074 	movhi	r3,1025
 400849c:	18ecb004 	addi	r3,r3,-19776
 40084a0:	00810074 	movhi	r2,1025
 40084a4:	10ac9604 	addi	r2,r2,-19880
 40084a8:	2140030d 	sth	r5,12(r4)
 40084ac:	2180038d 	sth	r6,14(r4)
 40084b0:	20c00915 	stw	r3,36(r4)
 40084b4:	20800a15 	stw	r2,40(r4)
 40084b8:	20000015 	stw	zero,0(r4)
 40084bc:	20000115 	stw	zero,4(r4)
 40084c0:	20000215 	stw	zero,8(r4)
 40084c4:	20000415 	stw	zero,16(r4)
 40084c8:	20000515 	stw	zero,20(r4)
 40084cc:	20000615 	stw	zero,24(r4)
 40084d0:	21000715 	stw	r4,28(r4)
 40084d4:	f800283a 	ret

040084d8 <__sfp_lock_acquire>:
 40084d8:	f800283a 	ret

040084dc <__sfp_lock_release>:
 40084dc:	f800283a 	ret

040084e0 <__sinit_lock_acquire>:
 40084e0:	f800283a 	ret

040084e4 <__sinit_lock_release>:
 40084e4:	f800283a 	ret

040084e8 <__sinit>:
 40084e8:	20800e17 	ldw	r2,56(r4)
 40084ec:	defffd04 	addi	sp,sp,-12
 40084f0:	dc400115 	stw	r17,4(sp)
 40084f4:	dc000015 	stw	r16,0(sp)
 40084f8:	dfc00215 	stw	ra,8(sp)
 40084fc:	04400044 	movi	r17,1
 4008500:	01400104 	movi	r5,4
 4008504:	000d883a 	mov	r6,zero
 4008508:	2021883a 	mov	r16,r4
 400850c:	2200bb04 	addi	r8,r4,748
 4008510:	200f883a 	mov	r7,r4
 4008514:	10000526 	beq	r2,zero,400852c <__sinit+0x44>
 4008518:	dfc00217 	ldw	ra,8(sp)
 400851c:	dc400117 	ldw	r17,4(sp)
 4008520:	dc000017 	ldw	r16,0(sp)
 4008524:	dec00304 	addi	sp,sp,12
 4008528:	f800283a 	ret
 400852c:	21000117 	ldw	r4,4(r4)
 4008530:	00810074 	movhi	r2,1025
 4008534:	10a17304 	addi	r2,r2,-31284
 4008538:	00c000c4 	movi	r3,3
 400853c:	80800f15 	stw	r2,60(r16)
 4008540:	80c0b915 	stw	r3,740(r16)
 4008544:	8200ba15 	stw	r8,744(r16)
 4008548:	84400e15 	stw	r17,56(r16)
 400854c:	8000b815 	stw	zero,736(r16)
 4008550:	40084800 	call	4008480 <std>
 4008554:	81000217 	ldw	r4,8(r16)
 4008558:	880d883a 	mov	r6,r17
 400855c:	800f883a 	mov	r7,r16
 4008560:	01400284 	movi	r5,10
 4008564:	40084800 	call	4008480 <std>
 4008568:	81000317 	ldw	r4,12(r16)
 400856c:	800f883a 	mov	r7,r16
 4008570:	01400484 	movi	r5,18
 4008574:	01800084 	movi	r6,2
 4008578:	dfc00217 	ldw	ra,8(sp)
 400857c:	dc400117 	ldw	r17,4(sp)
 4008580:	dc000017 	ldw	r16,0(sp)
 4008584:	dec00304 	addi	sp,sp,12
 4008588:	40084801 	jmpi	4008480 <std>

0400858c <__fp_lock>:
 400858c:	0005883a 	mov	r2,zero
 4008590:	f800283a 	ret

04008594 <__fp_unlock>:
 4008594:	0005883a 	mov	r2,zero
 4008598:	f800283a 	ret

0400859c <__fp_unlock_all>:
 400859c:	00810134 	movhi	r2,1028
 40085a0:	10a0f704 	addi	r2,r2,-31780
 40085a4:	11000017 	ldw	r4,0(r2)
 40085a8:	01410074 	movhi	r5,1025
 40085ac:	29616504 	addi	r5,r5,-31340
 40085b0:	40092301 	jmpi	4009230 <_fwalk>

040085b4 <__fp_lock_all>:
 40085b4:	00810134 	movhi	r2,1028
 40085b8:	10a0f704 	addi	r2,r2,-31780
 40085bc:	11000017 	ldw	r4,0(r2)
 40085c0:	01410074 	movhi	r5,1025
 40085c4:	29616304 	addi	r5,r5,-31348
 40085c8:	40092301 	jmpi	4009230 <_fwalk>

040085cc <_cleanup_r>:
 40085cc:	01410074 	movhi	r5,1025
 40085d0:	296e1404 	addi	r5,r5,-18352
 40085d4:	40092301 	jmpi	4009230 <_fwalk>

040085d8 <_cleanup>:
 40085d8:	00810134 	movhi	r2,1028
 40085dc:	10a0f804 	addi	r2,r2,-31776
 40085e0:	11000017 	ldw	r4,0(r2)
 40085e4:	40085cc1 	jmpi	40085cc <_cleanup_r>

040085e8 <__sfmoreglue>:
 40085e8:	defffc04 	addi	sp,sp,-16
 40085ec:	dc400115 	stw	r17,4(sp)
 40085f0:	2c401724 	muli	r17,r5,92
 40085f4:	dc800215 	stw	r18,8(sp)
 40085f8:	2825883a 	mov	r18,r5
 40085fc:	89400304 	addi	r5,r17,12
 4008600:	dc000015 	stw	r16,0(sp)
 4008604:	dfc00315 	stw	ra,12(sp)
 4008608:	4001f600 	call	4001f60 <_malloc_r>
 400860c:	0021883a 	mov	r16,zero
 4008610:	880d883a 	mov	r6,r17
 4008614:	000b883a 	mov	r5,zero
 4008618:	10000626 	beq	r2,zero,4008634 <__sfmoreglue+0x4c>
 400861c:	11000304 	addi	r4,r2,12
 4008620:	14800115 	stw	r18,4(r2)
 4008624:	10000015 	stw	zero,0(r2)
 4008628:	11000215 	stw	r4,8(r2)
 400862c:	1021883a 	mov	r16,r2
 4008630:	40026a00 	call	40026a0 <memset>
 4008634:	8005883a 	mov	r2,r16
 4008638:	dfc00317 	ldw	ra,12(sp)
 400863c:	dc800217 	ldw	r18,8(sp)
 4008640:	dc400117 	ldw	r17,4(sp)
 4008644:	dc000017 	ldw	r16,0(sp)
 4008648:	dec00404 	addi	sp,sp,16
 400864c:	f800283a 	ret

04008650 <__sfp>:
 4008650:	defffd04 	addi	sp,sp,-12
 4008654:	00810134 	movhi	r2,1028
 4008658:	10a0f804 	addi	r2,r2,-31776
 400865c:	dc000015 	stw	r16,0(sp)
 4008660:	14000017 	ldw	r16,0(r2)
 4008664:	dc400115 	stw	r17,4(sp)
 4008668:	dfc00215 	stw	ra,8(sp)
 400866c:	80800e17 	ldw	r2,56(r16)
 4008670:	2023883a 	mov	r17,r4
 4008674:	10002626 	beq	r2,zero,4008710 <__sfp+0xc0>
 4008678:	8400b804 	addi	r16,r16,736
 400867c:	80800117 	ldw	r2,4(r16)
 4008680:	81000217 	ldw	r4,8(r16)
 4008684:	10ffffc4 	addi	r3,r2,-1
 4008688:	18000916 	blt	r3,zero,40086b0 <__sfp+0x60>
 400868c:	2080030f 	ldh	r2,12(r4)
 4008690:	10000b26 	beq	r2,zero,40086c0 <__sfp+0x70>
 4008694:	017fffc4 	movi	r5,-1
 4008698:	00000206 	br	40086a4 <__sfp+0x54>
 400869c:	2080030f 	ldh	r2,12(r4)
 40086a0:	10000726 	beq	r2,zero,40086c0 <__sfp+0x70>
 40086a4:	18ffffc4 	addi	r3,r3,-1
 40086a8:	21001704 	addi	r4,r4,92
 40086ac:	197ffb1e 	bne	r3,r5,400869c <__sfp+0x4c>
 40086b0:	80800017 	ldw	r2,0(r16)
 40086b4:	10001926 	beq	r2,zero,400871c <__sfp+0xcc>
 40086b8:	1021883a 	mov	r16,r2
 40086bc:	003fef06 	br	400867c <__sfp+0x2c>
 40086c0:	00bfffc4 	movi	r2,-1
 40086c4:	00c00044 	movi	r3,1
 40086c8:	2080038d 	sth	r2,14(r4)
 40086cc:	20c0030d 	sth	r3,12(r4)
 40086d0:	20000015 	stw	zero,0(r4)
 40086d4:	20000215 	stw	zero,8(r4)
 40086d8:	20000115 	stw	zero,4(r4)
 40086dc:	20000415 	stw	zero,16(r4)
 40086e0:	20000515 	stw	zero,20(r4)
 40086e4:	20000615 	stw	zero,24(r4)
 40086e8:	20000c15 	stw	zero,48(r4)
 40086ec:	20000d15 	stw	zero,52(r4)
 40086f0:	20001115 	stw	zero,68(r4)
 40086f4:	20001215 	stw	zero,72(r4)
 40086f8:	2005883a 	mov	r2,r4
 40086fc:	dfc00217 	ldw	ra,8(sp)
 4008700:	dc400117 	ldw	r17,4(sp)
 4008704:	dc000017 	ldw	r16,0(sp)
 4008708:	dec00304 	addi	sp,sp,12
 400870c:	f800283a 	ret
 4008710:	8009883a 	mov	r4,r16
 4008714:	40084e80 	call	40084e8 <__sinit>
 4008718:	003fd706 	br	4008678 <__sfp+0x28>
 400871c:	8809883a 	mov	r4,r17
 4008720:	01400104 	movi	r5,4
 4008724:	40085e80 	call	40085e8 <__sfmoreglue>
 4008728:	80800015 	stw	r2,0(r16)
 400872c:	103fe21e 	bne	r2,zero,40086b8 <__sfp+0x68>
 4008730:	00800304 	movi	r2,12
 4008734:	0009883a 	mov	r4,zero
 4008738:	88800015 	stw	r2,0(r17)
 400873c:	003fee06 	br	40086f8 <__sfp+0xa8>

04008740 <fputc>:
 4008740:	defffc04 	addi	sp,sp,-16
 4008744:	dc800215 	stw	r18,8(sp)
 4008748:	04810134 	movhi	r18,1028
 400874c:	94a0f704 	addi	r18,r18,-31780
 4008750:	90c00017 	ldw	r3,0(r18)
 4008754:	dc400115 	stw	r17,4(sp)
 4008758:	dc000015 	stw	r16,0(sp)
 400875c:	dfc00315 	stw	ra,12(sp)
 4008760:	2021883a 	mov	r16,r4
 4008764:	2823883a 	mov	r17,r5
 4008768:	18000326 	beq	r3,zero,4008778 <fputc+0x38>
 400876c:	18800e17 	ldw	r2,56(r3)
 4008770:	1809883a 	mov	r4,r3
 4008774:	10000926 	beq	r2,zero,400879c <fputc+0x5c>
 4008778:	91000017 	ldw	r4,0(r18)
 400877c:	800b883a 	mov	r5,r16
 4008780:	880d883a 	mov	r6,r17
 4008784:	dfc00317 	ldw	ra,12(sp)
 4008788:	dc800217 	ldw	r18,8(sp)
 400878c:	dc400117 	ldw	r17,4(sp)
 4008790:	dc000017 	ldw	r16,0(sp)
 4008794:	dec00404 	addi	sp,sp,16
 4008798:	400a8c01 	jmpi	400a8c0 <_putc_r>
 400879c:	40084e80 	call	40084e8 <__sinit>
 40087a0:	003ff506 	br	4008778 <fputc+0x38>

040087a4 <_fputc_r>:
 40087a4:	defffc04 	addi	sp,sp,-16
 40087a8:	dc800215 	stw	r18,8(sp)
 40087ac:	dc400115 	stw	r17,4(sp)
 40087b0:	dc000015 	stw	r16,0(sp)
 40087b4:	dfc00315 	stw	ra,12(sp)
 40087b8:	2021883a 	mov	r16,r4
 40087bc:	2823883a 	mov	r17,r5
 40087c0:	3025883a 	mov	r18,r6
 40087c4:	20000226 	beq	r4,zero,40087d0 <_fputc_r+0x2c>
 40087c8:	20800e17 	ldw	r2,56(r4)
 40087cc:	10000926 	beq	r2,zero,40087f4 <_fputc_r+0x50>
 40087d0:	8009883a 	mov	r4,r16
 40087d4:	880b883a 	mov	r5,r17
 40087d8:	900d883a 	mov	r6,r18
 40087dc:	dfc00317 	ldw	ra,12(sp)
 40087e0:	dc800217 	ldw	r18,8(sp)
 40087e4:	dc400117 	ldw	r17,4(sp)
 40087e8:	dc000017 	ldw	r16,0(sp)
 40087ec:	dec00404 	addi	sp,sp,16
 40087f0:	400a8c01 	jmpi	400a8c0 <_putc_r>
 40087f4:	40084e80 	call	40084e8 <__sinit>
 40087f8:	003ff506 	br	40087d0 <_fputc_r+0x2c>

040087fc <_fputs_r>:
 40087fc:	defff804 	addi	sp,sp,-32
 4008800:	dc000515 	stw	r16,20(sp)
 4008804:	2021883a 	mov	r16,r4
 4008808:	2809883a 	mov	r4,r5
 400880c:	dc400615 	stw	r17,24(sp)
 4008810:	dfc00715 	stw	ra,28(sp)
 4008814:	3023883a 	mov	r17,r6
 4008818:	d9400015 	stw	r5,0(sp)
 400881c:	400472c0 	call	400472c <strlen>
 4008820:	00c00044 	movi	r3,1
 4008824:	d8800115 	stw	r2,4(sp)
 4008828:	d8c00315 	stw	r3,12(sp)
 400882c:	d8800415 	stw	r2,16(sp)
 4008830:	dec00215 	stw	sp,8(sp)
 4008834:	80000326 	beq	r16,zero,4008844 <_fputs_r+0x48>
 4008838:	80800e17 	ldw	r2,56(r16)
 400883c:	8009883a 	mov	r4,r16
 4008840:	10000926 	beq	r2,zero,4008868 <_fputs_r+0x6c>
 4008844:	8009883a 	mov	r4,r16
 4008848:	880b883a 	mov	r5,r17
 400884c:	d9800204 	addi	r6,sp,8
 4008850:	4008ccc0 	call	4008ccc <__sfvwrite_r>
 4008854:	dfc00717 	ldw	ra,28(sp)
 4008858:	dc400617 	ldw	r17,24(sp)
 400885c:	dc000517 	ldw	r16,20(sp)
 4008860:	dec00804 	addi	sp,sp,32
 4008864:	f800283a 	ret
 4008868:	40084e80 	call	40084e8 <__sinit>
 400886c:	003ff506 	br	4008844 <_fputs_r+0x48>

04008870 <fputs>:
 4008870:	01810134 	movhi	r6,1028
 4008874:	31a0f704 	addi	r6,r6,-31780
 4008878:	2007883a 	mov	r3,r4
 400887c:	31000017 	ldw	r4,0(r6)
 4008880:	280d883a 	mov	r6,r5
 4008884:	180b883a 	mov	r5,r3
 4008888:	40087fc1 	jmpi	40087fc <_fputs_r>

0400888c <_malloc_trim_r>:
 400888c:	defffb04 	addi	sp,sp,-20
 4008890:	dcc00315 	stw	r19,12(sp)
 4008894:	04c100f4 	movhi	r19,1027
 4008898:	9cdac304 	addi	r19,r19,27404
 400889c:	dc800215 	stw	r18,8(sp)
 40088a0:	dc400115 	stw	r17,4(sp)
 40088a4:	dc000015 	stw	r16,0(sp)
 40088a8:	2823883a 	mov	r17,r5
 40088ac:	2025883a 	mov	r18,r4
 40088b0:	dfc00415 	stw	ra,16(sp)
 40088b4:	400e7b80 	call	400e7b8 <__malloc_lock>
 40088b8:	98800217 	ldw	r2,8(r19)
 40088bc:	9009883a 	mov	r4,r18
 40088c0:	000b883a 	mov	r5,zero
 40088c4:	10c00117 	ldw	r3,4(r2)
 40088c8:	00bfff04 	movi	r2,-4
 40088cc:	18a0703a 	and	r16,r3,r2
 40088d0:	8463c83a 	sub	r17,r16,r17
 40088d4:	8c43fbc4 	addi	r17,r17,4079
 40088d8:	8822d33a 	srli	r17,r17,12
 40088dc:	0083ffc4 	movi	r2,4095
 40088e0:	8c7fffc4 	addi	r17,r17,-1
 40088e4:	8822933a 	slli	r17,r17,12
 40088e8:	1440060e 	bge	r2,r17,4008904 <_malloc_trim_r+0x78>
 40088ec:	40030000 	call	4003000 <_sbrk_r>
 40088f0:	98c00217 	ldw	r3,8(r19)
 40088f4:	9009883a 	mov	r4,r18
 40088f8:	044bc83a 	sub	r5,zero,r17
 40088fc:	80c7883a 	add	r3,r16,r3
 4008900:	10c00926 	beq	r2,r3,4008928 <_malloc_trim_r+0x9c>
 4008904:	400e7580 	call	400e758 <__malloc_unlock>
 4008908:	0005883a 	mov	r2,zero
 400890c:	dfc00417 	ldw	ra,16(sp)
 4008910:	dcc00317 	ldw	r19,12(sp)
 4008914:	dc800217 	ldw	r18,8(sp)
 4008918:	dc400117 	ldw	r17,4(sp)
 400891c:	dc000017 	ldw	r16,0(sp)
 4008920:	dec00504 	addi	sp,sp,20
 4008924:	f800283a 	ret
 4008928:	9009883a 	mov	r4,r18
 400892c:	40030000 	call	4003000 <_sbrk_r>
 4008930:	844dc83a 	sub	r6,r16,r17
 4008934:	00ffffc4 	movi	r3,-1
 4008938:	9009883a 	mov	r4,r18
 400893c:	000b883a 	mov	r5,zero
 4008940:	01c10134 	movhi	r7,1028
 4008944:	39e96604 	addi	r7,r7,-23144
 4008948:	31800054 	ori	r6,r6,1
 400894c:	10c00926 	beq	r2,r3,4008974 <_malloc_trim_r+0xe8>
 4008950:	38800017 	ldw	r2,0(r7)
 4008954:	98c00217 	ldw	r3,8(r19)
 4008958:	9009883a 	mov	r4,r18
 400895c:	1445c83a 	sub	r2,r2,r17
 4008960:	38800015 	stw	r2,0(r7)
 4008964:	19800115 	stw	r6,4(r3)
 4008968:	400e7580 	call	400e758 <__malloc_unlock>
 400896c:	00800044 	movi	r2,1
 4008970:	003fe606 	br	400890c <_malloc_trim_r+0x80>
 4008974:	40030000 	call	4003000 <_sbrk_r>
 4008978:	99800217 	ldw	r6,8(r19)
 400897c:	100f883a 	mov	r7,r2
 4008980:	9009883a 	mov	r4,r18
 4008984:	1187c83a 	sub	r3,r2,r6
 4008988:	008003c4 	movi	r2,15
 400898c:	19400054 	ori	r5,r3,1
 4008990:	10ffdc0e 	bge	r2,r3,4008904 <_malloc_trim_r+0x78>
 4008994:	00810134 	movhi	r2,1028
 4008998:	10a0fa04 	addi	r2,r2,-31768
 400899c:	10c00017 	ldw	r3,0(r2)
 40089a0:	00810134 	movhi	r2,1028
 40089a4:	10a96604 	addi	r2,r2,-23144
 40089a8:	31400115 	stw	r5,4(r6)
 40089ac:	38c7c83a 	sub	r3,r7,r3
 40089b0:	10c00015 	stw	r3,0(r2)
 40089b4:	003fd306 	br	4008904 <_malloc_trim_r+0x78>

040089b8 <_free_r>:
 40089b8:	defffd04 	addi	sp,sp,-12
 40089bc:	dc400115 	stw	r17,4(sp)
 40089c0:	dc000015 	stw	r16,0(sp)
 40089c4:	dfc00215 	stw	ra,8(sp)
 40089c8:	2821883a 	mov	r16,r5
 40089cc:	2023883a 	mov	r17,r4
 40089d0:	28005a26 	beq	r5,zero,4008b3c <_free_r+0x184>
 40089d4:	400e7b80 	call	400e7b8 <__malloc_lock>
 40089d8:	823ffe04 	addi	r8,r16,-8
 40089dc:	41400117 	ldw	r5,4(r8)
 40089e0:	00bfff84 	movi	r2,-2
 40089e4:	028100f4 	movhi	r10,1027
 40089e8:	529ac304 	addi	r10,r10,27404
 40089ec:	288e703a 	and	r7,r5,r2
 40089f0:	41cd883a 	add	r6,r8,r7
 40089f4:	30c00117 	ldw	r3,4(r6)
 40089f8:	51000217 	ldw	r4,8(r10)
 40089fc:	00bfff04 	movi	r2,-4
 4008a00:	1892703a 	and	r9,r3,r2
 4008a04:	5017883a 	mov	r11,r10
 4008a08:	31006726 	beq	r6,r4,4008ba8 <_free_r+0x1f0>
 4008a0c:	2880004c 	andi	r2,r5,1
 4008a10:	1005003a 	cmpeq	r2,r2,zero
 4008a14:	32400115 	stw	r9,4(r6)
 4008a18:	10001a1e 	bne	r2,zero,4008a84 <_free_r+0xcc>
 4008a1c:	000b883a 	mov	r5,zero
 4008a20:	3247883a 	add	r3,r6,r9
 4008a24:	18800117 	ldw	r2,4(r3)
 4008a28:	1080004c 	andi	r2,r2,1
 4008a2c:	1000231e 	bne	r2,zero,4008abc <_free_r+0x104>
 4008a30:	280ac03a 	cmpne	r5,r5,zero
 4008a34:	3a4f883a 	add	r7,r7,r9
 4008a38:	2800451e 	bne	r5,zero,4008b50 <_free_r+0x198>
 4008a3c:	31000217 	ldw	r4,8(r6)
 4008a40:	008100f4 	movhi	r2,1027
 4008a44:	109ac504 	addi	r2,r2,27412
 4008a48:	20807b26 	beq	r4,r2,4008c38 <_free_r+0x280>
 4008a4c:	30800317 	ldw	r2,12(r6)
 4008a50:	3a07883a 	add	r3,r7,r8
 4008a54:	19c00015 	stw	r7,0(r3)
 4008a58:	11000215 	stw	r4,8(r2)
 4008a5c:	20800315 	stw	r2,12(r4)
 4008a60:	38800054 	ori	r2,r7,1
 4008a64:	40800115 	stw	r2,4(r8)
 4008a68:	28001a26 	beq	r5,zero,4008ad4 <_free_r+0x11c>
 4008a6c:	8809883a 	mov	r4,r17
 4008a70:	dfc00217 	ldw	ra,8(sp)
 4008a74:	dc400117 	ldw	r17,4(sp)
 4008a78:	dc000017 	ldw	r16,0(sp)
 4008a7c:	dec00304 	addi	sp,sp,12
 4008a80:	400e7581 	jmpi	400e758 <__malloc_unlock>
 4008a84:	80bffe17 	ldw	r2,-8(r16)
 4008a88:	50c00204 	addi	r3,r10,8
 4008a8c:	4091c83a 	sub	r8,r8,r2
 4008a90:	41000217 	ldw	r4,8(r8)
 4008a94:	388f883a 	add	r7,r7,r2
 4008a98:	20c06126 	beq	r4,r3,4008c20 <_free_r+0x268>
 4008a9c:	40800317 	ldw	r2,12(r8)
 4008aa0:	3247883a 	add	r3,r6,r9
 4008aa4:	000b883a 	mov	r5,zero
 4008aa8:	11000215 	stw	r4,8(r2)
 4008aac:	20800315 	stw	r2,12(r4)
 4008ab0:	18800117 	ldw	r2,4(r3)
 4008ab4:	1080004c 	andi	r2,r2,1
 4008ab8:	103fdd26 	beq	r2,zero,4008a30 <_free_r+0x78>
 4008abc:	38800054 	ori	r2,r7,1
 4008ac0:	3a07883a 	add	r3,r7,r8
 4008ac4:	280ac03a 	cmpne	r5,r5,zero
 4008ac8:	40800115 	stw	r2,4(r8)
 4008acc:	19c00015 	stw	r7,0(r3)
 4008ad0:	283fe61e 	bne	r5,zero,4008a6c <_free_r+0xb4>
 4008ad4:	00807fc4 	movi	r2,511
 4008ad8:	11c01f2e 	bgeu	r2,r7,4008b58 <_free_r+0x1a0>
 4008adc:	3806d27a 	srli	r3,r7,9
 4008ae0:	1800481e 	bne	r3,zero,4008c04 <_free_r+0x24c>
 4008ae4:	3804d0fa 	srli	r2,r7,3
 4008ae8:	100690fa 	slli	r3,r2,3
 4008aec:	1acd883a 	add	r6,r3,r11
 4008af0:	31400217 	ldw	r5,8(r6)
 4008af4:	31405926 	beq	r6,r5,4008c5c <_free_r+0x2a4>
 4008af8:	28800117 	ldw	r2,4(r5)
 4008afc:	00ffff04 	movi	r3,-4
 4008b00:	10c4703a 	and	r2,r2,r3
 4008b04:	3880022e 	bgeu	r7,r2,4008b10 <_free_r+0x158>
 4008b08:	29400217 	ldw	r5,8(r5)
 4008b0c:	317ffa1e 	bne	r6,r5,4008af8 <_free_r+0x140>
 4008b10:	29800317 	ldw	r6,12(r5)
 4008b14:	41800315 	stw	r6,12(r8)
 4008b18:	41400215 	stw	r5,8(r8)
 4008b1c:	8809883a 	mov	r4,r17
 4008b20:	2a000315 	stw	r8,12(r5)
 4008b24:	32000215 	stw	r8,8(r6)
 4008b28:	dfc00217 	ldw	ra,8(sp)
 4008b2c:	dc400117 	ldw	r17,4(sp)
 4008b30:	dc000017 	ldw	r16,0(sp)
 4008b34:	dec00304 	addi	sp,sp,12
 4008b38:	400e7581 	jmpi	400e758 <__malloc_unlock>
 4008b3c:	dfc00217 	ldw	ra,8(sp)
 4008b40:	dc400117 	ldw	r17,4(sp)
 4008b44:	dc000017 	ldw	r16,0(sp)
 4008b48:	dec00304 	addi	sp,sp,12
 4008b4c:	f800283a 	ret
 4008b50:	31000217 	ldw	r4,8(r6)
 4008b54:	003fbd06 	br	4008a4c <_free_r+0x94>
 4008b58:	3806d0fa 	srli	r3,r7,3
 4008b5c:	00800044 	movi	r2,1
 4008b60:	51400117 	ldw	r5,4(r10)
 4008b64:	180890fa 	slli	r4,r3,3
 4008b68:	1807d0ba 	srai	r3,r3,2
 4008b6c:	22c9883a 	add	r4,r4,r11
 4008b70:	21800217 	ldw	r6,8(r4)
 4008b74:	10c4983a 	sll	r2,r2,r3
 4008b78:	41000315 	stw	r4,12(r8)
 4008b7c:	41800215 	stw	r6,8(r8)
 4008b80:	288ab03a 	or	r5,r5,r2
 4008b84:	22000215 	stw	r8,8(r4)
 4008b88:	8809883a 	mov	r4,r17
 4008b8c:	51400115 	stw	r5,4(r10)
 4008b90:	32000315 	stw	r8,12(r6)
 4008b94:	dfc00217 	ldw	ra,8(sp)
 4008b98:	dc400117 	ldw	r17,4(sp)
 4008b9c:	dc000017 	ldw	r16,0(sp)
 4008ba0:	dec00304 	addi	sp,sp,12
 4008ba4:	400e7581 	jmpi	400e758 <__malloc_unlock>
 4008ba8:	2880004c 	andi	r2,r5,1
 4008bac:	3a4d883a 	add	r6,r7,r9
 4008bb0:	1000071e 	bne	r2,zero,4008bd0 <_free_r+0x218>
 4008bb4:	80bffe17 	ldw	r2,-8(r16)
 4008bb8:	4091c83a 	sub	r8,r8,r2
 4008bbc:	41000317 	ldw	r4,12(r8)
 4008bc0:	40c00217 	ldw	r3,8(r8)
 4008bc4:	308d883a 	add	r6,r6,r2
 4008bc8:	20c00215 	stw	r3,8(r4)
 4008bcc:	19000315 	stw	r4,12(r3)
 4008bd0:	00810134 	movhi	r2,1028
 4008bd4:	10a0f904 	addi	r2,r2,-31772
 4008bd8:	11000017 	ldw	r4,0(r2)
 4008bdc:	30c00054 	ori	r3,r6,1
 4008be0:	52000215 	stw	r8,8(r10)
 4008be4:	40c00115 	stw	r3,4(r8)
 4008be8:	313fa036 	bltu	r6,r4,4008a6c <_free_r+0xb4>
 4008bec:	00810134 	movhi	r2,1028
 4008bf0:	10a8e004 	addi	r2,r2,-23680
 4008bf4:	11400017 	ldw	r5,0(r2)
 4008bf8:	8809883a 	mov	r4,r17
 4008bfc:	400888c0 	call	400888c <_malloc_trim_r>
 4008c00:	003f9a06 	br	4008a6c <_free_r+0xb4>
 4008c04:	00800104 	movi	r2,4
 4008c08:	10c0072e 	bgeu	r2,r3,4008c28 <_free_r+0x270>
 4008c0c:	00800504 	movi	r2,20
 4008c10:	10c01936 	bltu	r2,r3,4008c78 <_free_r+0x2c0>
 4008c14:	188016c4 	addi	r2,r3,91
 4008c18:	100690fa 	slli	r3,r2,3
 4008c1c:	003fb306 	br	4008aec <_free_r+0x134>
 4008c20:	01400044 	movi	r5,1
 4008c24:	003f7e06 	br	4008a20 <_free_r+0x68>
 4008c28:	3804d1ba 	srli	r2,r7,6
 4008c2c:	10800e04 	addi	r2,r2,56
 4008c30:	100690fa 	slli	r3,r2,3
 4008c34:	003fad06 	br	4008aec <_free_r+0x134>
 4008c38:	22000315 	stw	r8,12(r4)
 4008c3c:	22000215 	stw	r8,8(r4)
 4008c40:	3a05883a 	add	r2,r7,r8
 4008c44:	38c00054 	ori	r3,r7,1
 4008c48:	11c00015 	stw	r7,0(r2)
 4008c4c:	41000215 	stw	r4,8(r8)
 4008c50:	40c00115 	stw	r3,4(r8)
 4008c54:	41000315 	stw	r4,12(r8)
 4008c58:	003f8406 	br	4008a6c <_free_r+0xb4>
 4008c5c:	1005d0ba 	srai	r2,r2,2
 4008c60:	00c00044 	movi	r3,1
 4008c64:	51000117 	ldw	r4,4(r10)
 4008c68:	1886983a 	sll	r3,r3,r2
 4008c6c:	20c8b03a 	or	r4,r4,r3
 4008c70:	51000115 	stw	r4,4(r10)
 4008c74:	003fa706 	br	4008b14 <_free_r+0x15c>
 4008c78:	00801504 	movi	r2,84
 4008c7c:	10c00436 	bltu	r2,r3,4008c90 <_free_r+0x2d8>
 4008c80:	3804d33a 	srli	r2,r7,12
 4008c84:	10801b84 	addi	r2,r2,110
 4008c88:	100690fa 	slli	r3,r2,3
 4008c8c:	003f9706 	br	4008aec <_free_r+0x134>
 4008c90:	00805504 	movi	r2,340
 4008c94:	10c00436 	bltu	r2,r3,4008ca8 <_free_r+0x2f0>
 4008c98:	3804d3fa 	srli	r2,r7,15
 4008c9c:	10801dc4 	addi	r2,r2,119
 4008ca0:	100690fa 	slli	r3,r2,3
 4008ca4:	003f9106 	br	4008aec <_free_r+0x134>
 4008ca8:	00815504 	movi	r2,1364
 4008cac:	10c0032e 	bgeu	r2,r3,4008cbc <_free_r+0x304>
 4008cb0:	00801f84 	movi	r2,126
 4008cb4:	00c0fc04 	movi	r3,1008
 4008cb8:	003f8c06 	br	4008aec <_free_r+0x134>
 4008cbc:	3804d4ba 	srli	r2,r7,18
 4008cc0:	10801f04 	addi	r2,r2,124
 4008cc4:	100690fa 	slli	r3,r2,3
 4008cc8:	003f8806 	br	4008aec <_free_r+0x134>

04008ccc <__sfvwrite_r>:
 4008ccc:	30800217 	ldw	r2,8(r6)
 4008cd0:	defff504 	addi	sp,sp,-44
 4008cd4:	df000915 	stw	fp,36(sp)
 4008cd8:	dd800715 	stw	r22,28(sp)
 4008cdc:	dc800315 	stw	r18,12(sp)
 4008ce0:	dfc00a15 	stw	ra,40(sp)
 4008ce4:	ddc00815 	stw	r23,32(sp)
 4008ce8:	dd400615 	stw	r21,24(sp)
 4008cec:	dd000515 	stw	r20,20(sp)
 4008cf0:	dcc00415 	stw	r19,16(sp)
 4008cf4:	dc400215 	stw	r17,8(sp)
 4008cf8:	dc000115 	stw	r16,4(sp)
 4008cfc:	302d883a 	mov	r22,r6
 4008d00:	2039883a 	mov	fp,r4
 4008d04:	2825883a 	mov	r18,r5
 4008d08:	10001c26 	beq	r2,zero,4008d7c <__sfvwrite_r+0xb0>
 4008d0c:	29c0030b 	ldhu	r7,12(r5)
 4008d10:	3880020c 	andi	r2,r7,8
 4008d14:	10002726 	beq	r2,zero,4008db4 <__sfvwrite_r+0xe8>
 4008d18:	28800417 	ldw	r2,16(r5)
 4008d1c:	10002526 	beq	r2,zero,4008db4 <__sfvwrite_r+0xe8>
 4008d20:	3880008c 	andi	r2,r7,2
 4008d24:	b5400017 	ldw	r21,0(r22)
 4008d28:	10002826 	beq	r2,zero,4008dcc <__sfvwrite_r+0x100>
 4008d2c:	0021883a 	mov	r16,zero
 4008d30:	0023883a 	mov	r17,zero
 4008d34:	880d883a 	mov	r6,r17
 4008d38:	e009883a 	mov	r4,fp
 4008d3c:	00810004 	movi	r2,1024
 4008d40:	80006e26 	beq	r16,zero,4008efc <__sfvwrite_r+0x230>
 4008d44:	800f883a 	mov	r7,r16
 4008d48:	91400717 	ldw	r5,28(r18)
 4008d4c:	1400012e 	bgeu	r2,r16,4008d54 <__sfvwrite_r+0x88>
 4008d50:	100f883a 	mov	r7,r2
 4008d54:	90c00917 	ldw	r3,36(r18)
 4008d58:	183ee83a 	callr	r3
 4008d5c:	1007883a 	mov	r3,r2
 4008d60:	80a1c83a 	sub	r16,r16,r2
 4008d64:	88a3883a 	add	r17,r17,r2
 4008d68:	00806d0e 	bge	zero,r2,4008f20 <__sfvwrite_r+0x254>
 4008d6c:	b0800217 	ldw	r2,8(r22)
 4008d70:	10c5c83a 	sub	r2,r2,r3
 4008d74:	b0800215 	stw	r2,8(r22)
 4008d78:	103fee1e 	bne	r2,zero,4008d34 <__sfvwrite_r+0x68>
 4008d7c:	0009883a 	mov	r4,zero
 4008d80:	2005883a 	mov	r2,r4
 4008d84:	dfc00a17 	ldw	ra,40(sp)
 4008d88:	df000917 	ldw	fp,36(sp)
 4008d8c:	ddc00817 	ldw	r23,32(sp)
 4008d90:	dd800717 	ldw	r22,28(sp)
 4008d94:	dd400617 	ldw	r21,24(sp)
 4008d98:	dd000517 	ldw	r20,20(sp)
 4008d9c:	dcc00417 	ldw	r19,16(sp)
 4008da0:	dc800317 	ldw	r18,12(sp)
 4008da4:	dc400217 	ldw	r17,8(sp)
 4008da8:	dc000117 	ldw	r16,4(sp)
 4008dac:	dec00b04 	addi	sp,sp,44
 4008db0:	f800283a 	ret
 4008db4:	40066d80 	call	40066d8 <__swsetup_r>
 4008db8:	1000e41e 	bne	r2,zero,400914c <__sfvwrite_r+0x480>
 4008dbc:	91c0030b 	ldhu	r7,12(r18)
 4008dc0:	b5400017 	ldw	r21,0(r22)
 4008dc4:	3880008c 	andi	r2,r7,2
 4008dc8:	103fd81e 	bne	r2,zero,4008d2c <__sfvwrite_r+0x60>
 4008dcc:	3880004c 	andi	r2,r7,1
 4008dd0:	1005003a 	cmpeq	r2,r2,zero
 4008dd4:	10005726 	beq	r2,zero,4008f34 <__sfvwrite_r+0x268>
 4008dd8:	0029883a 	mov	r20,zero
 4008ddc:	002f883a 	mov	r23,zero
 4008de0:	a0004226 	beq	r20,zero,4008eec <__sfvwrite_r+0x220>
 4008de4:	3880800c 	andi	r2,r7,512
 4008de8:	94000217 	ldw	r16,8(r18)
 4008dec:	10008b26 	beq	r2,zero,400901c <__sfvwrite_r+0x350>
 4008df0:	800d883a 	mov	r6,r16
 4008df4:	a400a536 	bltu	r20,r16,400908c <__sfvwrite_r+0x3c0>
 4008df8:	3881200c 	andi	r2,r7,1152
 4008dfc:	10002726 	beq	r2,zero,4008e9c <__sfvwrite_r+0x1d0>
 4008e00:	90800517 	ldw	r2,20(r18)
 4008e04:	92000417 	ldw	r8,16(r18)
 4008e08:	91400017 	ldw	r5,0(r18)
 4008e0c:	1087883a 	add	r3,r2,r2
 4008e10:	1887883a 	add	r3,r3,r2
 4008e14:	1808d7fa 	srli	r4,r3,31
 4008e18:	2a21c83a 	sub	r16,r5,r8
 4008e1c:	80800044 	addi	r2,r16,1
 4008e20:	20c9883a 	add	r4,r4,r3
 4008e24:	2027d07a 	srai	r19,r4,1
 4008e28:	a085883a 	add	r2,r20,r2
 4008e2c:	980d883a 	mov	r6,r19
 4008e30:	9880022e 	bgeu	r19,r2,4008e3c <__sfvwrite_r+0x170>
 4008e34:	1027883a 	mov	r19,r2
 4008e38:	100d883a 	mov	r6,r2
 4008e3c:	3881000c 	andi	r2,r7,1024
 4008e40:	1000b826 	beq	r2,zero,4009124 <__sfvwrite_r+0x458>
 4008e44:	300b883a 	mov	r5,r6
 4008e48:	e009883a 	mov	r4,fp
 4008e4c:	4001f600 	call	4001f60 <_malloc_r>
 4008e50:	10003126 	beq	r2,zero,4008f18 <__sfvwrite_r+0x24c>
 4008e54:	91400417 	ldw	r5,16(r18)
 4008e58:	1009883a 	mov	r4,r2
 4008e5c:	800d883a 	mov	r6,r16
 4008e60:	1023883a 	mov	r17,r2
 4008e64:	40096480 	call	4009648 <memcpy>
 4008e68:	90c0030b 	ldhu	r3,12(r18)
 4008e6c:	00beffc4 	movi	r2,-1025
 4008e70:	1886703a 	and	r3,r3,r2
 4008e74:	18c02014 	ori	r3,r3,128
 4008e78:	90c0030d 	sth	r3,12(r18)
 4008e7c:	9c07c83a 	sub	r3,r19,r16
 4008e80:	8c05883a 	add	r2,r17,r16
 4008e84:	a00d883a 	mov	r6,r20
 4008e88:	a021883a 	mov	r16,r20
 4008e8c:	90800015 	stw	r2,0(r18)
 4008e90:	90c00215 	stw	r3,8(r18)
 4008e94:	94400415 	stw	r17,16(r18)
 4008e98:	94c00515 	stw	r19,20(r18)
 4008e9c:	91000017 	ldw	r4,0(r18)
 4008ea0:	b80b883a 	mov	r5,r23
 4008ea4:	a023883a 	mov	r17,r20
 4008ea8:	40096e80 	call	40096e8 <memmove>
 4008eac:	90c00217 	ldw	r3,8(r18)
 4008eb0:	90800017 	ldw	r2,0(r18)
 4008eb4:	a027883a 	mov	r19,r20
 4008eb8:	1c07c83a 	sub	r3,r3,r16
 4008ebc:	1405883a 	add	r2,r2,r16
 4008ec0:	90c00215 	stw	r3,8(r18)
 4008ec4:	a021883a 	mov	r16,r20
 4008ec8:	90800015 	stw	r2,0(r18)
 4008ecc:	b0800217 	ldw	r2,8(r22)
 4008ed0:	1405c83a 	sub	r2,r2,r16
 4008ed4:	b0800215 	stw	r2,8(r22)
 4008ed8:	103fa826 	beq	r2,zero,4008d7c <__sfvwrite_r+0xb0>
 4008edc:	a469c83a 	sub	r20,r20,r17
 4008ee0:	91c0030b 	ldhu	r7,12(r18)
 4008ee4:	bcef883a 	add	r23,r23,r19
 4008ee8:	a03fbe1e 	bne	r20,zero,4008de4 <__sfvwrite_r+0x118>
 4008eec:	adc00017 	ldw	r23,0(r21)
 4008ef0:	ad000117 	ldw	r20,4(r21)
 4008ef4:	ad400204 	addi	r21,r21,8
 4008ef8:	003fb906 	br	4008de0 <__sfvwrite_r+0x114>
 4008efc:	ac400017 	ldw	r17,0(r21)
 4008f00:	ac000117 	ldw	r16,4(r21)
 4008f04:	ad400204 	addi	r21,r21,8
 4008f08:	003f8a06 	br	4008d34 <__sfvwrite_r+0x68>
 4008f0c:	91400417 	ldw	r5,16(r18)
 4008f10:	e009883a 	mov	r4,fp
 4008f14:	40089b80 	call	40089b8 <_free_r>
 4008f18:	00800304 	movi	r2,12
 4008f1c:	e0800015 	stw	r2,0(fp)
 4008f20:	9080030b 	ldhu	r2,12(r18)
 4008f24:	013fffc4 	movi	r4,-1
 4008f28:	10801014 	ori	r2,r2,64
 4008f2c:	9080030d 	sth	r2,12(r18)
 4008f30:	003f9306 	br	4008d80 <__sfvwrite_r+0xb4>
 4008f34:	0027883a 	mov	r19,zero
 4008f38:	002f883a 	mov	r23,zero
 4008f3c:	d8000015 	stw	zero,0(sp)
 4008f40:	0029883a 	mov	r20,zero
 4008f44:	98001e26 	beq	r19,zero,4008fc0 <__sfvwrite_r+0x2f4>
 4008f48:	d8c00017 	ldw	r3,0(sp)
 4008f4c:	1804c03a 	cmpne	r2,r3,zero
 4008f50:	10005e26 	beq	r2,zero,40090cc <__sfvwrite_r+0x400>
 4008f54:	9821883a 	mov	r16,r19
 4008f58:	a4c0012e 	bgeu	r20,r19,4008f60 <__sfvwrite_r+0x294>
 4008f5c:	a021883a 	mov	r16,r20
 4008f60:	91000017 	ldw	r4,0(r18)
 4008f64:	90800417 	ldw	r2,16(r18)
 4008f68:	91800217 	ldw	r6,8(r18)
 4008f6c:	91c00517 	ldw	r7,20(r18)
 4008f70:	1100022e 	bgeu	r2,r4,4008f7c <__sfvwrite_r+0x2b0>
 4008f74:	31e3883a 	add	r17,r6,r7
 4008f78:	8c001616 	blt	r17,r16,4008fd4 <__sfvwrite_r+0x308>
 4008f7c:	81c03816 	blt	r16,r7,4009060 <__sfvwrite_r+0x394>
 4008f80:	90c00917 	ldw	r3,36(r18)
 4008f84:	91400717 	ldw	r5,28(r18)
 4008f88:	e009883a 	mov	r4,fp
 4008f8c:	b80d883a 	mov	r6,r23
 4008f90:	183ee83a 	callr	r3
 4008f94:	1023883a 	mov	r17,r2
 4008f98:	00bfe10e 	bge	zero,r2,4008f20 <__sfvwrite_r+0x254>
 4008f9c:	a469c83a 	sub	r20,r20,r17
 4008fa0:	a0001826 	beq	r20,zero,4009004 <__sfvwrite_r+0x338>
 4008fa4:	b0800217 	ldw	r2,8(r22)
 4008fa8:	1445c83a 	sub	r2,r2,r17
 4008fac:	b0800215 	stw	r2,8(r22)
 4008fb0:	103f7226 	beq	r2,zero,4008d7c <__sfvwrite_r+0xb0>
 4008fb4:	9c67c83a 	sub	r19,r19,r17
 4008fb8:	bc6f883a 	add	r23,r23,r17
 4008fbc:	983fe21e 	bne	r19,zero,4008f48 <__sfvwrite_r+0x27c>
 4008fc0:	adc00017 	ldw	r23,0(r21)
 4008fc4:	acc00117 	ldw	r19,4(r21)
 4008fc8:	ad400204 	addi	r21,r21,8
 4008fcc:	d8000015 	stw	zero,0(sp)
 4008fd0:	003fdc06 	br	4008f44 <__sfvwrite_r+0x278>
 4008fd4:	b80b883a 	mov	r5,r23
 4008fd8:	880d883a 	mov	r6,r17
 4008fdc:	40096e80 	call	40096e8 <memmove>
 4008fe0:	90c00017 	ldw	r3,0(r18)
 4008fe4:	e009883a 	mov	r4,fp
 4008fe8:	900b883a 	mov	r5,r18
 4008fec:	1c47883a 	add	r3,r3,r17
 4008ff0:	90c00015 	stw	r3,0(r18)
 4008ff4:	40082500 	call	4008250 <_fflush_r>
 4008ff8:	103fc91e 	bne	r2,zero,4008f20 <__sfvwrite_r+0x254>
 4008ffc:	a469c83a 	sub	r20,r20,r17
 4009000:	a03fe81e 	bne	r20,zero,4008fa4 <__sfvwrite_r+0x2d8>
 4009004:	e009883a 	mov	r4,fp
 4009008:	900b883a 	mov	r5,r18
 400900c:	40082500 	call	4008250 <_fflush_r>
 4009010:	103fc31e 	bne	r2,zero,4008f20 <__sfvwrite_r+0x254>
 4009014:	d8000015 	stw	zero,0(sp)
 4009018:	003fe206 	br	4008fa4 <__sfvwrite_r+0x2d8>
 400901c:	91000017 	ldw	r4,0(r18)
 4009020:	90800417 	ldw	r2,16(r18)
 4009024:	1100022e 	bgeu	r2,r4,4009030 <__sfvwrite_r+0x364>
 4009028:	8023883a 	mov	r17,r16
 400902c:	85003136 	bltu	r16,r20,40090f4 <__sfvwrite_r+0x428>
 4009030:	91c00517 	ldw	r7,20(r18)
 4009034:	a1c01836 	bltu	r20,r7,4009098 <__sfvwrite_r+0x3cc>
 4009038:	90c00917 	ldw	r3,36(r18)
 400903c:	91400717 	ldw	r5,28(r18)
 4009040:	e009883a 	mov	r4,fp
 4009044:	b80d883a 	mov	r6,r23
 4009048:	183ee83a 	callr	r3
 400904c:	1021883a 	mov	r16,r2
 4009050:	00bfb30e 	bge	zero,r2,4008f20 <__sfvwrite_r+0x254>
 4009054:	1023883a 	mov	r17,r2
 4009058:	1027883a 	mov	r19,r2
 400905c:	003f9b06 	br	4008ecc <__sfvwrite_r+0x200>
 4009060:	b80b883a 	mov	r5,r23
 4009064:	800d883a 	mov	r6,r16
 4009068:	40096e80 	call	40096e8 <memmove>
 400906c:	90c00217 	ldw	r3,8(r18)
 4009070:	90800017 	ldw	r2,0(r18)
 4009074:	8023883a 	mov	r17,r16
 4009078:	1c07c83a 	sub	r3,r3,r16
 400907c:	1405883a 	add	r2,r2,r16
 4009080:	90c00215 	stw	r3,8(r18)
 4009084:	90800015 	stw	r2,0(r18)
 4009088:	003fc406 	br	4008f9c <__sfvwrite_r+0x2d0>
 400908c:	a00d883a 	mov	r6,r20
 4009090:	a021883a 	mov	r16,r20
 4009094:	003f8106 	br	4008e9c <__sfvwrite_r+0x1d0>
 4009098:	b80b883a 	mov	r5,r23
 400909c:	a00d883a 	mov	r6,r20
 40090a0:	40096e80 	call	40096e8 <memmove>
 40090a4:	90c00217 	ldw	r3,8(r18)
 40090a8:	90800017 	ldw	r2,0(r18)
 40090ac:	a021883a 	mov	r16,r20
 40090b0:	1d07c83a 	sub	r3,r3,r20
 40090b4:	1505883a 	add	r2,r2,r20
 40090b8:	a023883a 	mov	r17,r20
 40090bc:	a027883a 	mov	r19,r20
 40090c0:	90c00215 	stw	r3,8(r18)
 40090c4:	90800015 	stw	r2,0(r18)
 40090c8:	003f8006 	br	4008ecc <__sfvwrite_r+0x200>
 40090cc:	b809883a 	mov	r4,r23
 40090d0:	01400284 	movi	r5,10
 40090d4:	980d883a 	mov	r6,r19
 40090d8:	40095640 	call	4009564 <memchr>
 40090dc:	10001726 	beq	r2,zero,400913c <__sfvwrite_r+0x470>
 40090e0:	15c5c83a 	sub	r2,r2,r23
 40090e4:	15000044 	addi	r20,r2,1
 40090e8:	00800044 	movi	r2,1
 40090ec:	d8800015 	stw	r2,0(sp)
 40090f0:	003f9806 	br	4008f54 <__sfvwrite_r+0x288>
 40090f4:	b80b883a 	mov	r5,r23
 40090f8:	800d883a 	mov	r6,r16
 40090fc:	40096e80 	call	40096e8 <memmove>
 4009100:	90c00017 	ldw	r3,0(r18)
 4009104:	e009883a 	mov	r4,fp
 4009108:	900b883a 	mov	r5,r18
 400910c:	1c07883a 	add	r3,r3,r16
 4009110:	90c00015 	stw	r3,0(r18)
 4009114:	8027883a 	mov	r19,r16
 4009118:	40082500 	call	4008250 <_fflush_r>
 400911c:	103f6b26 	beq	r2,zero,4008ecc <__sfvwrite_r+0x200>
 4009120:	003f7f06 	br	4008f20 <__sfvwrite_r+0x254>
 4009124:	400b883a 	mov	r5,r8
 4009128:	e009883a 	mov	r4,fp
 400912c:	400a9a80 	call	400a9a8 <_realloc_r>
 4009130:	103f7626 	beq	r2,zero,4008f0c <__sfvwrite_r+0x240>
 4009134:	1023883a 	mov	r17,r2
 4009138:	003f5006 	br	4008e7c <__sfvwrite_r+0x1b0>
 400913c:	00c00044 	movi	r3,1
 4009140:	9d000044 	addi	r20,r19,1
 4009144:	d8c00015 	stw	r3,0(sp)
 4009148:	003f8206 	br	4008f54 <__sfvwrite_r+0x288>
 400914c:	9080030b 	ldhu	r2,12(r18)
 4009150:	00c00244 	movi	r3,9
 4009154:	013fffc4 	movi	r4,-1
 4009158:	10801014 	ori	r2,r2,64
 400915c:	9080030d 	sth	r2,12(r18)
 4009160:	e0c00015 	stw	r3,0(fp)
 4009164:	003f0606 	br	4008d80 <__sfvwrite_r+0xb4>

04009168 <_fwalk_reent>:
 4009168:	defff704 	addi	sp,sp,-36
 400916c:	dcc00315 	stw	r19,12(sp)
 4009170:	24c0b804 	addi	r19,r4,736
 4009174:	dd800615 	stw	r22,24(sp)
 4009178:	dd400515 	stw	r21,20(sp)
 400917c:	dfc00815 	stw	ra,32(sp)
 4009180:	ddc00715 	stw	r23,28(sp)
 4009184:	dd000415 	stw	r20,16(sp)
 4009188:	dc800215 	stw	r18,8(sp)
 400918c:	dc400115 	stw	r17,4(sp)
 4009190:	dc000015 	stw	r16,0(sp)
 4009194:	202b883a 	mov	r21,r4
 4009198:	282d883a 	mov	r22,r5
 400919c:	40084d80 	call	40084d8 <__sfp_lock_acquire>
 40091a0:	98002126 	beq	r19,zero,4009228 <_fwalk_reent+0xc0>
 40091a4:	002f883a 	mov	r23,zero
 40091a8:	9c800117 	ldw	r18,4(r19)
 40091ac:	9c000217 	ldw	r16,8(r19)
 40091b0:	90bfffc4 	addi	r2,r18,-1
 40091b4:	10000d16 	blt	r2,zero,40091ec <_fwalk_reent+0x84>
 40091b8:	0023883a 	mov	r17,zero
 40091bc:	053fffc4 	movi	r20,-1
 40091c0:	8080030f 	ldh	r2,12(r16)
 40091c4:	8c400044 	addi	r17,r17,1
 40091c8:	10000626 	beq	r2,zero,40091e4 <_fwalk_reent+0x7c>
 40091cc:	8080038f 	ldh	r2,14(r16)
 40091d0:	800b883a 	mov	r5,r16
 40091d4:	a809883a 	mov	r4,r21
 40091d8:	15000226 	beq	r2,r20,40091e4 <_fwalk_reent+0x7c>
 40091dc:	b03ee83a 	callr	r22
 40091e0:	b8aeb03a 	or	r23,r23,r2
 40091e4:	84001704 	addi	r16,r16,92
 40091e8:	947ff51e 	bne	r18,r17,40091c0 <_fwalk_reent+0x58>
 40091ec:	9cc00017 	ldw	r19,0(r19)
 40091f0:	983fed1e 	bne	r19,zero,40091a8 <_fwalk_reent+0x40>
 40091f4:	40084dc0 	call	40084dc <__sfp_lock_release>
 40091f8:	b805883a 	mov	r2,r23
 40091fc:	dfc00817 	ldw	ra,32(sp)
 4009200:	ddc00717 	ldw	r23,28(sp)
 4009204:	dd800617 	ldw	r22,24(sp)
 4009208:	dd400517 	ldw	r21,20(sp)
 400920c:	dd000417 	ldw	r20,16(sp)
 4009210:	dcc00317 	ldw	r19,12(sp)
 4009214:	dc800217 	ldw	r18,8(sp)
 4009218:	dc400117 	ldw	r17,4(sp)
 400921c:	dc000017 	ldw	r16,0(sp)
 4009220:	dec00904 	addi	sp,sp,36
 4009224:	f800283a 	ret
 4009228:	002f883a 	mov	r23,zero
 400922c:	003ff106 	br	40091f4 <_fwalk_reent+0x8c>

04009230 <_fwalk>:
 4009230:	defff804 	addi	sp,sp,-32
 4009234:	dcc00315 	stw	r19,12(sp)
 4009238:	24c0b804 	addi	r19,r4,736
 400923c:	dd400515 	stw	r21,20(sp)
 4009240:	dfc00715 	stw	ra,28(sp)
 4009244:	dd800615 	stw	r22,24(sp)
 4009248:	dd000415 	stw	r20,16(sp)
 400924c:	dc800215 	stw	r18,8(sp)
 4009250:	dc400115 	stw	r17,4(sp)
 4009254:	dc000015 	stw	r16,0(sp)
 4009258:	282b883a 	mov	r21,r5
 400925c:	40084d80 	call	40084d8 <__sfp_lock_acquire>
 4009260:	98001f26 	beq	r19,zero,40092e0 <_fwalk+0xb0>
 4009264:	002d883a 	mov	r22,zero
 4009268:	9c800117 	ldw	r18,4(r19)
 400926c:	9c000217 	ldw	r16,8(r19)
 4009270:	90bfffc4 	addi	r2,r18,-1
 4009274:	10000c16 	blt	r2,zero,40092a8 <_fwalk+0x78>
 4009278:	0023883a 	mov	r17,zero
 400927c:	053fffc4 	movi	r20,-1
 4009280:	8080030f 	ldh	r2,12(r16)
 4009284:	8c400044 	addi	r17,r17,1
 4009288:	10000526 	beq	r2,zero,40092a0 <_fwalk+0x70>
 400928c:	8080038f 	ldh	r2,14(r16)
 4009290:	8009883a 	mov	r4,r16
 4009294:	15000226 	beq	r2,r20,40092a0 <_fwalk+0x70>
 4009298:	a83ee83a 	callr	r21
 400929c:	b0acb03a 	or	r22,r22,r2
 40092a0:	84001704 	addi	r16,r16,92
 40092a4:	947ff61e 	bne	r18,r17,4009280 <_fwalk+0x50>
 40092a8:	9cc00017 	ldw	r19,0(r19)
 40092ac:	983fee1e 	bne	r19,zero,4009268 <_fwalk+0x38>
 40092b0:	40084dc0 	call	40084dc <__sfp_lock_release>
 40092b4:	b005883a 	mov	r2,r22
 40092b8:	dfc00717 	ldw	ra,28(sp)
 40092bc:	dd800617 	ldw	r22,24(sp)
 40092c0:	dd400517 	ldw	r21,20(sp)
 40092c4:	dd000417 	ldw	r20,16(sp)
 40092c8:	dcc00317 	ldw	r19,12(sp)
 40092cc:	dc800217 	ldw	r18,8(sp)
 40092d0:	dc400117 	ldw	r17,4(sp)
 40092d4:	dc000017 	ldw	r16,0(sp)
 40092d8:	dec00804 	addi	sp,sp,32
 40092dc:	f800283a 	ret
 40092e0:	002d883a 	mov	r22,zero
 40092e4:	003ff206 	br	40092b0 <_fwalk+0x80>

040092e8 <__gettzinfo>:
 40092e8:	008100f4 	movhi	r2,1027
 40092ec:	109bc504 	addi	r2,r2,28436
 40092f0:	f800283a 	ret

040092f4 <labs>:
 40092f4:	20000216 	blt	r4,zero,4009300 <labs+0xc>
 40092f8:	2005883a 	mov	r2,r4
 40092fc:	f800283a 	ret
 4009300:	0109c83a 	sub	r4,zero,r4
 4009304:	2005883a 	mov	r2,r4
 4009308:	f800283a 	ret

0400930c <__locale_charset>:
 400930c:	d0a00917 	ldw	r2,-32732(gp)
 4009310:	f800283a 	ret

04009314 <_localeconv_r>:
 4009314:	008100f4 	movhi	r2,1027
 4009318:	108af804 	addi	r2,r2,11232
 400931c:	f800283a 	ret

04009320 <localeconv>:
 4009320:	00810134 	movhi	r2,1028
 4009324:	10a0f704 	addi	r2,r2,-31780
 4009328:	11000017 	ldw	r4,0(r2)
 400932c:	40093141 	jmpi	4009314 <_localeconv_r>

04009330 <_setlocale_r>:
 4009330:	defffc04 	addi	sp,sp,-16
 4009334:	00c100f4 	movhi	r3,1027
 4009338:	18cc1004 	addi	r3,r3,12352
 400933c:	dc800215 	stw	r18,8(sp)
 4009340:	dc400115 	stw	r17,4(sp)
 4009344:	dc000015 	stw	r16,0(sp)
 4009348:	2023883a 	mov	r17,r4
 400934c:	2825883a 	mov	r18,r5
 4009350:	dfc00315 	stw	ra,12(sp)
 4009354:	3021883a 	mov	r16,r6
 4009358:	3009883a 	mov	r4,r6
 400935c:	180b883a 	mov	r5,r3
 4009360:	30000926 	beq	r6,zero,4009388 <_setlocale_r+0x58>
 4009364:	400b39c0 	call	400b39c <strcmp>
 4009368:	8009883a 	mov	r4,r16
 400936c:	014100f4 	movhi	r5,1027
 4009370:	294ce204 	addi	r5,r5,13192
 4009374:	10000b1e 	bne	r2,zero,40093a4 <_setlocale_r+0x74>
 4009378:	8c000d15 	stw	r16,52(r17)
 400937c:	8c800c15 	stw	r18,48(r17)
 4009380:	00c100f4 	movhi	r3,1027
 4009384:	18cc1004 	addi	r3,r3,12352
 4009388:	1805883a 	mov	r2,r3
 400938c:	dfc00317 	ldw	ra,12(sp)
 4009390:	dc800217 	ldw	r18,8(sp)
 4009394:	dc400117 	ldw	r17,4(sp)
 4009398:	dc000017 	ldw	r16,0(sp)
 400939c:	dec00404 	addi	sp,sp,16
 40093a0:	f800283a 	ret
 40093a4:	400b39c0 	call	400b39c <strcmp>
 40093a8:	0007883a 	mov	r3,zero
 40093ac:	103ff226 	beq	r2,zero,4009378 <_setlocale_r+0x48>
 40093b0:	003ff506 	br	4009388 <_setlocale_r+0x58>

040093b4 <setlocale>:
 40093b4:	01810134 	movhi	r6,1028
 40093b8:	31a0f704 	addi	r6,r6,-31780
 40093bc:	2007883a 	mov	r3,r4
 40093c0:	31000017 	ldw	r4,0(r6)
 40093c4:	280d883a 	mov	r6,r5
 40093c8:	180b883a 	mov	r5,r3
 40093cc:	40093301 	jmpi	4009330 <_setlocale_r>

040093d0 <__smakebuf_r>:
 40093d0:	2880030b 	ldhu	r2,12(r5)
 40093d4:	deffed04 	addi	sp,sp,-76
 40093d8:	dc401015 	stw	r17,64(sp)
 40093dc:	1080008c 	andi	r2,r2,2
 40093e0:	dc000f15 	stw	r16,60(sp)
 40093e4:	dfc01215 	stw	ra,72(sp)
 40093e8:	dc801115 	stw	r18,68(sp)
 40093ec:	2821883a 	mov	r16,r5
 40093f0:	2023883a 	mov	r17,r4
 40093f4:	10000b26 	beq	r2,zero,4009424 <__smakebuf_r+0x54>
 40093f8:	28c010c4 	addi	r3,r5,67
 40093fc:	00800044 	movi	r2,1
 4009400:	28800515 	stw	r2,20(r5)
 4009404:	28c00415 	stw	r3,16(r5)
 4009408:	28c00015 	stw	r3,0(r5)
 400940c:	dfc01217 	ldw	ra,72(sp)
 4009410:	dc801117 	ldw	r18,68(sp)
 4009414:	dc401017 	ldw	r17,64(sp)
 4009418:	dc000f17 	ldw	r16,60(sp)
 400941c:	dec01304 	addi	sp,sp,76
 4009420:	f800283a 	ret
 4009424:	2940038f 	ldh	r5,14(r5)
 4009428:	28002116 	blt	r5,zero,40094b0 <__smakebuf_r+0xe0>
 400942c:	d80d883a 	mov	r6,sp
 4009430:	400b8640 	call	400b864 <_fstat_r>
 4009434:	10001e16 	blt	r2,zero,40094b0 <__smakebuf_r+0xe0>
 4009438:	d8800117 	ldw	r2,4(sp)
 400943c:	00e00014 	movui	r3,32768
 4009440:	113c000c 	andi	r4,r2,61440
 4009444:	20c03126 	beq	r4,r3,400950c <__smakebuf_r+0x13c>
 4009448:	8080030b 	ldhu	r2,12(r16)
 400944c:	00c80004 	movi	r3,8192
 4009450:	10820014 	ori	r2,r2,2048
 4009454:	8080030d 	sth	r2,12(r16)
 4009458:	20c01e26 	beq	r4,r3,40094d4 <__smakebuf_r+0x104>
 400945c:	04810004 	movi	r18,1024
 4009460:	8809883a 	mov	r4,r17
 4009464:	900b883a 	mov	r5,r18
 4009468:	4001f600 	call	4001f60 <_malloc_r>
 400946c:	1009883a 	mov	r4,r2
 4009470:	10003126 	beq	r2,zero,4009538 <__smakebuf_r+0x168>
 4009474:	80c0030b 	ldhu	r3,12(r16)
 4009478:	00810074 	movhi	r2,1025
 400947c:	10a17304 	addi	r2,r2,-31284
 4009480:	88800f15 	stw	r2,60(r17)
 4009484:	18c02014 	ori	r3,r3,128
 4009488:	84800515 	stw	r18,20(r16)
 400948c:	80c0030d 	sth	r3,12(r16)
 4009490:	81000415 	stw	r4,16(r16)
 4009494:	81000015 	stw	r4,0(r16)
 4009498:	dfc01217 	ldw	ra,72(sp)
 400949c:	dc801117 	ldw	r18,68(sp)
 40094a0:	dc401017 	ldw	r17,64(sp)
 40094a4:	dc000f17 	ldw	r16,60(sp)
 40094a8:	dec01304 	addi	sp,sp,76
 40094ac:	f800283a 	ret
 40094b0:	80c0030b 	ldhu	r3,12(r16)
 40094b4:	1880200c 	andi	r2,r3,128
 40094b8:	10000426 	beq	r2,zero,40094cc <__smakebuf_r+0xfc>
 40094bc:	04801004 	movi	r18,64
 40094c0:	18820014 	ori	r2,r3,2048
 40094c4:	8080030d 	sth	r2,12(r16)
 40094c8:	003fe506 	br	4009460 <__smakebuf_r+0x90>
 40094cc:	04810004 	movi	r18,1024
 40094d0:	003ffb06 	br	40094c0 <__smakebuf_r+0xf0>
 40094d4:	8140038f 	ldh	r5,14(r16)
 40094d8:	8809883a 	mov	r4,r17
 40094dc:	400b8d80 	call	400b8d8 <_isatty_r>
 40094e0:	103fde26 	beq	r2,zero,400945c <__smakebuf_r+0x8c>
 40094e4:	8080030b 	ldhu	r2,12(r16)
 40094e8:	80c010c4 	addi	r3,r16,67
 40094ec:	04810004 	movi	r18,1024
 40094f0:	10800054 	ori	r2,r2,1
 40094f4:	8080030d 	sth	r2,12(r16)
 40094f8:	00800044 	movi	r2,1
 40094fc:	80c00415 	stw	r3,16(r16)
 4009500:	80800515 	stw	r2,20(r16)
 4009504:	80c00015 	stw	r3,0(r16)
 4009508:	003fd506 	br	4009460 <__smakebuf_r+0x90>
 400950c:	80c00a17 	ldw	r3,40(r16)
 4009510:	00810074 	movhi	r2,1025
 4009514:	10ac9604 	addi	r2,r2,-19880
 4009518:	18bfcb1e 	bne	r3,r2,4009448 <__smakebuf_r+0x78>
 400951c:	8080030b 	ldhu	r2,12(r16)
 4009520:	00c10004 	movi	r3,1024
 4009524:	1825883a 	mov	r18,r3
 4009528:	10c4b03a 	or	r2,r2,r3
 400952c:	8080030d 	sth	r2,12(r16)
 4009530:	80c01315 	stw	r3,76(r16)
 4009534:	003fca06 	br	4009460 <__smakebuf_r+0x90>
 4009538:	8100030b 	ldhu	r4,12(r16)
 400953c:	2080800c 	andi	r2,r4,512
 4009540:	103fb21e 	bne	r2,zero,400940c <__smakebuf_r+0x3c>
 4009544:	80c010c4 	addi	r3,r16,67
 4009548:	21000094 	ori	r4,r4,2
 400954c:	00800044 	movi	r2,1
 4009550:	80800515 	stw	r2,20(r16)
 4009554:	8100030d 	sth	r4,12(r16)
 4009558:	80c00415 	stw	r3,16(r16)
 400955c:	80c00015 	stw	r3,0(r16)
 4009560:	003faa06 	br	400940c <__smakebuf_r+0x3c>

04009564 <memchr>:
 4009564:	008000c4 	movi	r2,3
 4009568:	29403fcc 	andi	r5,r5,255
 400956c:	2007883a 	mov	r3,r4
 4009570:	1180022e 	bgeu	r2,r6,400957c <memchr+0x18>
 4009574:	2084703a 	and	r2,r4,r2
 4009578:	10000b26 	beq	r2,zero,40095a8 <memchr+0x44>
 400957c:	313fffc4 	addi	r4,r6,-1
 4009580:	3000051e 	bne	r6,zero,4009598 <memchr+0x34>
 4009584:	00002c06 	br	4009638 <memchr+0xd4>
 4009588:	213fffc4 	addi	r4,r4,-1
 400958c:	00bfffc4 	movi	r2,-1
 4009590:	18c00044 	addi	r3,r3,1
 4009594:	20802826 	beq	r4,r2,4009638 <memchr+0xd4>
 4009598:	18800003 	ldbu	r2,0(r3)
 400959c:	28bffa1e 	bne	r5,r2,4009588 <memchr+0x24>
 40095a0:	1805883a 	mov	r2,r3
 40095a4:	f800283a 	ret
 40095a8:	0011883a 	mov	r8,zero
 40095ac:	0007883a 	mov	r3,zero
 40095b0:	01c00104 	movi	r7,4
 40095b4:	4004923a 	slli	r2,r8,8
 40095b8:	18c00044 	addi	r3,r3,1
 40095bc:	1151883a 	add	r8,r2,r5
 40095c0:	19fffc1e 	bne	r3,r7,40095b4 <memchr+0x50>
 40095c4:	02bfbff4 	movhi	r10,65279
 40095c8:	52bfbfc4 	addi	r10,r10,-257
 40095cc:	02602074 	movhi	r9,32897
 40095d0:	4a602004 	addi	r9,r9,-32640
 40095d4:	02c000c4 	movi	r11,3
 40095d8:	20800017 	ldw	r2,0(r4)
 40095dc:	31bfff04 	addi	r6,r6,-4
 40095e0:	200f883a 	mov	r7,r4
 40095e4:	1204f03a 	xor	r2,r2,r8
 40095e8:	1287883a 	add	r3,r2,r10
 40095ec:	1a46703a 	and	r3,r3,r9
 40095f0:	0084303a 	nor	r2,zero,r2
 40095f4:	10c4703a 	and	r2,r2,r3
 40095f8:	10000b26 	beq	r2,zero,4009628 <memchr+0xc4>
 40095fc:	20800003 	ldbu	r2,0(r4)
 4009600:	28800f26 	beq	r5,r2,4009640 <memchr+0xdc>
 4009604:	20800043 	ldbu	r2,1(r4)
 4009608:	21c00044 	addi	r7,r4,1
 400960c:	28800c26 	beq	r5,r2,4009640 <memchr+0xdc>
 4009610:	20800083 	ldbu	r2,2(r4)
 4009614:	21c00084 	addi	r7,r4,2
 4009618:	28800926 	beq	r5,r2,4009640 <memchr+0xdc>
 400961c:	208000c3 	ldbu	r2,3(r4)
 4009620:	21c000c4 	addi	r7,r4,3
 4009624:	28800626 	beq	r5,r2,4009640 <memchr+0xdc>
 4009628:	21000104 	addi	r4,r4,4
 400962c:	59bfea36 	bltu	r11,r6,40095d8 <memchr+0x74>
 4009630:	2007883a 	mov	r3,r4
 4009634:	003fd106 	br	400957c <memchr+0x18>
 4009638:	0005883a 	mov	r2,zero
 400963c:	f800283a 	ret
 4009640:	3805883a 	mov	r2,r7
 4009644:	f800283a 	ret

04009648 <memcpy>:
 4009648:	01c003c4 	movi	r7,15
 400964c:	2007883a 	mov	r3,r4
 4009650:	3980032e 	bgeu	r7,r6,4009660 <memcpy+0x18>
 4009654:	2904b03a 	or	r2,r5,r4
 4009658:	108000cc 	andi	r2,r2,3
 400965c:	10000926 	beq	r2,zero,4009684 <memcpy+0x3c>
 4009660:	30000626 	beq	r6,zero,400967c <memcpy+0x34>
 4009664:	30cd883a 	add	r6,r6,r3
 4009668:	28800003 	ldbu	r2,0(r5)
 400966c:	29400044 	addi	r5,r5,1
 4009670:	18800005 	stb	r2,0(r3)
 4009674:	18c00044 	addi	r3,r3,1
 4009678:	30fffb1e 	bne	r6,r3,4009668 <memcpy+0x20>
 400967c:	2005883a 	mov	r2,r4
 4009680:	f800283a 	ret
 4009684:	3811883a 	mov	r8,r7
 4009688:	200f883a 	mov	r7,r4
 400968c:	28c00017 	ldw	r3,0(r5)
 4009690:	31bffc04 	addi	r6,r6,-16
 4009694:	38c00015 	stw	r3,0(r7)
 4009698:	28800117 	ldw	r2,4(r5)
 400969c:	38800115 	stw	r2,4(r7)
 40096a0:	28c00217 	ldw	r3,8(r5)
 40096a4:	38c00215 	stw	r3,8(r7)
 40096a8:	28800317 	ldw	r2,12(r5)
 40096ac:	29400404 	addi	r5,r5,16
 40096b0:	38800315 	stw	r2,12(r7)
 40096b4:	39c00404 	addi	r7,r7,16
 40096b8:	41bff436 	bltu	r8,r6,400968c <memcpy+0x44>
 40096bc:	008000c4 	movi	r2,3
 40096c0:	1180072e 	bgeu	r2,r6,40096e0 <memcpy+0x98>
 40096c4:	1007883a 	mov	r3,r2
 40096c8:	28800017 	ldw	r2,0(r5)
 40096cc:	31bfff04 	addi	r6,r6,-4
 40096d0:	29400104 	addi	r5,r5,4
 40096d4:	38800015 	stw	r2,0(r7)
 40096d8:	39c00104 	addi	r7,r7,4
 40096dc:	19bffa36 	bltu	r3,r6,40096c8 <memcpy+0x80>
 40096e0:	3807883a 	mov	r3,r7
 40096e4:	003fde06 	br	4009660 <memcpy+0x18>

040096e8 <memmove>:
 40096e8:	2807883a 	mov	r3,r5
 40096ec:	2011883a 	mov	r8,r4
 40096f0:	29000c2e 	bgeu	r5,r4,4009724 <memmove+0x3c>
 40096f4:	298f883a 	add	r7,r5,r6
 40096f8:	21c00a2e 	bgeu	r4,r7,4009724 <memmove+0x3c>
 40096fc:	30000726 	beq	r6,zero,400971c <memmove+0x34>
 4009700:	2187883a 	add	r3,r4,r6
 4009704:	198dc83a 	sub	r6,r3,r6
 4009708:	39ffffc4 	addi	r7,r7,-1
 400970c:	38800003 	ldbu	r2,0(r7)
 4009710:	18ffffc4 	addi	r3,r3,-1
 4009714:	18800005 	stb	r2,0(r3)
 4009718:	19bffb1e 	bne	r3,r6,4009708 <memmove+0x20>
 400971c:	2005883a 	mov	r2,r4
 4009720:	f800283a 	ret
 4009724:	01c003c4 	movi	r7,15
 4009728:	39800a36 	bltu	r7,r6,4009754 <memmove+0x6c>
 400972c:	303ffb26 	beq	r6,zero,400971c <memmove+0x34>
 4009730:	400f883a 	mov	r7,r8
 4009734:	320d883a 	add	r6,r6,r8
 4009738:	28800003 	ldbu	r2,0(r5)
 400973c:	29400044 	addi	r5,r5,1
 4009740:	38800005 	stb	r2,0(r7)
 4009744:	39c00044 	addi	r7,r7,1
 4009748:	39bffb1e 	bne	r7,r6,4009738 <memmove+0x50>
 400974c:	2005883a 	mov	r2,r4
 4009750:	f800283a 	ret
 4009754:	1904b03a 	or	r2,r3,r4
 4009758:	108000cc 	andi	r2,r2,3
 400975c:	103ff31e 	bne	r2,zero,400972c <memmove+0x44>
 4009760:	3811883a 	mov	r8,r7
 4009764:	180b883a 	mov	r5,r3
 4009768:	200f883a 	mov	r7,r4
 400976c:	28c00017 	ldw	r3,0(r5)
 4009770:	31bffc04 	addi	r6,r6,-16
 4009774:	38c00015 	stw	r3,0(r7)
 4009778:	28800117 	ldw	r2,4(r5)
 400977c:	38800115 	stw	r2,4(r7)
 4009780:	28c00217 	ldw	r3,8(r5)
 4009784:	38c00215 	stw	r3,8(r7)
 4009788:	28800317 	ldw	r2,12(r5)
 400978c:	29400404 	addi	r5,r5,16
 4009790:	38800315 	stw	r2,12(r7)
 4009794:	39c00404 	addi	r7,r7,16
 4009798:	41bff436 	bltu	r8,r6,400976c <memmove+0x84>
 400979c:	008000c4 	movi	r2,3
 40097a0:	1180072e 	bgeu	r2,r6,40097c0 <memmove+0xd8>
 40097a4:	1007883a 	mov	r3,r2
 40097a8:	28800017 	ldw	r2,0(r5)
 40097ac:	31bfff04 	addi	r6,r6,-4
 40097b0:	29400104 	addi	r5,r5,4
 40097b4:	38800015 	stw	r2,0(r7)
 40097b8:	39c00104 	addi	r7,r7,4
 40097bc:	19bffa36 	bltu	r3,r6,40097a8 <memmove+0xc0>
 40097c0:	3811883a 	mov	r8,r7
 40097c4:	003fd906 	br	400972c <memmove+0x44>

040097c8 <_Bfree>:
 40097c8:	28000826 	beq	r5,zero,40097ec <_Bfree+0x24>
 40097cc:	28800117 	ldw	r2,4(r5)
 40097d0:	21001317 	ldw	r4,76(r4)
 40097d4:	1085883a 	add	r2,r2,r2
 40097d8:	1085883a 	add	r2,r2,r2
 40097dc:	1105883a 	add	r2,r2,r4
 40097e0:	10c00017 	ldw	r3,0(r2)
 40097e4:	28c00015 	stw	r3,0(r5)
 40097e8:	11400015 	stw	r5,0(r2)
 40097ec:	f800283a 	ret

040097f0 <__hi0bits>:
 40097f0:	20bfffec 	andhi	r2,r4,65535
 40097f4:	10001426 	beq	r2,zero,4009848 <__hi0bits+0x58>
 40097f8:	0007883a 	mov	r3,zero
 40097fc:	20bfc02c 	andhi	r2,r4,65280
 4009800:	1000021e 	bne	r2,zero,400980c <__hi0bits+0x1c>
 4009804:	2008923a 	slli	r4,r4,8
 4009808:	18c00204 	addi	r3,r3,8
 400980c:	20bc002c 	andhi	r2,r4,61440
 4009810:	1000021e 	bne	r2,zero,400981c <__hi0bits+0x2c>
 4009814:	2008913a 	slli	r4,r4,4
 4009818:	18c00104 	addi	r3,r3,4
 400981c:	20b0002c 	andhi	r2,r4,49152
 4009820:	1000031e 	bne	r2,zero,4009830 <__hi0bits+0x40>
 4009824:	2105883a 	add	r2,r4,r4
 4009828:	18c00084 	addi	r3,r3,2
 400982c:	1089883a 	add	r4,r2,r2
 4009830:	20000316 	blt	r4,zero,4009840 <__hi0bits+0x50>
 4009834:	2090002c 	andhi	r2,r4,16384
 4009838:	10000626 	beq	r2,zero,4009854 <__hi0bits+0x64>
 400983c:	18c00044 	addi	r3,r3,1
 4009840:	1805883a 	mov	r2,r3
 4009844:	f800283a 	ret
 4009848:	2008943a 	slli	r4,r4,16
 400984c:	00c00404 	movi	r3,16
 4009850:	003fea06 	br	40097fc <__hi0bits+0xc>
 4009854:	00c00804 	movi	r3,32
 4009858:	1805883a 	mov	r2,r3
 400985c:	f800283a 	ret

04009860 <__lo0bits>:
 4009860:	20c00017 	ldw	r3,0(r4)
 4009864:	188001cc 	andi	r2,r3,7
 4009868:	10000a26 	beq	r2,zero,4009894 <__lo0bits+0x34>
 400986c:	1880004c 	andi	r2,r3,1
 4009870:	1005003a 	cmpeq	r2,r2,zero
 4009874:	10002126 	beq	r2,zero,40098fc <__lo0bits+0x9c>
 4009878:	1880008c 	andi	r2,r3,2
 400987c:	1000251e 	bne	r2,zero,4009914 <__lo0bits+0xb4>
 4009880:	1804d0ba 	srli	r2,r3,2
 4009884:	01400084 	movi	r5,2
 4009888:	20800015 	stw	r2,0(r4)
 400988c:	2805883a 	mov	r2,r5
 4009890:	f800283a 	ret
 4009894:	18bfffcc 	andi	r2,r3,65535
 4009898:	10001526 	beq	r2,zero,40098f0 <__lo0bits+0x90>
 400989c:	000b883a 	mov	r5,zero
 40098a0:	18803fcc 	andi	r2,r3,255
 40098a4:	1000021e 	bne	r2,zero,40098b0 <__lo0bits+0x50>
 40098a8:	1806d23a 	srli	r3,r3,8
 40098ac:	29400204 	addi	r5,r5,8
 40098b0:	188003cc 	andi	r2,r3,15
 40098b4:	1000021e 	bne	r2,zero,40098c0 <__lo0bits+0x60>
 40098b8:	1806d13a 	srli	r3,r3,4
 40098bc:	29400104 	addi	r5,r5,4
 40098c0:	188000cc 	andi	r2,r3,3
 40098c4:	1000021e 	bne	r2,zero,40098d0 <__lo0bits+0x70>
 40098c8:	1806d0ba 	srli	r3,r3,2
 40098cc:	29400084 	addi	r5,r5,2
 40098d0:	1880004c 	andi	r2,r3,1
 40098d4:	1000031e 	bne	r2,zero,40098e4 <__lo0bits+0x84>
 40098d8:	1806d07a 	srli	r3,r3,1
 40098dc:	18000a26 	beq	r3,zero,4009908 <__lo0bits+0xa8>
 40098e0:	29400044 	addi	r5,r5,1
 40098e4:	2805883a 	mov	r2,r5
 40098e8:	20c00015 	stw	r3,0(r4)
 40098ec:	f800283a 	ret
 40098f0:	1806d43a 	srli	r3,r3,16
 40098f4:	01400404 	movi	r5,16
 40098f8:	003fe906 	br	40098a0 <__lo0bits+0x40>
 40098fc:	000b883a 	mov	r5,zero
 4009900:	2805883a 	mov	r2,r5
 4009904:	f800283a 	ret
 4009908:	01400804 	movi	r5,32
 400990c:	2805883a 	mov	r2,r5
 4009910:	f800283a 	ret
 4009914:	1804d07a 	srli	r2,r3,1
 4009918:	01400044 	movi	r5,1
 400991c:	20800015 	stw	r2,0(r4)
 4009920:	003fda06 	br	400988c <__lo0bits+0x2c>

04009924 <__mcmp>:
 4009924:	20800417 	ldw	r2,16(r4)
 4009928:	28c00417 	ldw	r3,16(r5)
 400992c:	10cfc83a 	sub	r7,r2,r3
 4009930:	38000c1e 	bne	r7,zero,4009964 <__mcmp+0x40>
 4009934:	18c5883a 	add	r2,r3,r3
 4009938:	1085883a 	add	r2,r2,r2
 400993c:	10c00504 	addi	r3,r2,20
 4009940:	21000504 	addi	r4,r4,20
 4009944:	28cb883a 	add	r5,r5,r3
 4009948:	2085883a 	add	r2,r4,r2
 400994c:	10bfff04 	addi	r2,r2,-4
 4009950:	297fff04 	addi	r5,r5,-4
 4009954:	11800017 	ldw	r6,0(r2)
 4009958:	28c00017 	ldw	r3,0(r5)
 400995c:	30c0031e 	bne	r6,r3,400996c <__mcmp+0x48>
 4009960:	20bffa36 	bltu	r4,r2,400994c <__mcmp+0x28>
 4009964:	3805883a 	mov	r2,r7
 4009968:	f800283a 	ret
 400996c:	30c00336 	bltu	r6,r3,400997c <__mcmp+0x58>
 4009970:	01c00044 	movi	r7,1
 4009974:	3805883a 	mov	r2,r7
 4009978:	f800283a 	ret
 400997c:	01ffffc4 	movi	r7,-1
 4009980:	003ff806 	br	4009964 <__mcmp+0x40>

04009984 <__ulp>:
 4009984:	295ffc2c 	andhi	r5,r5,32752
 4009988:	013f3034 	movhi	r4,64704
 400998c:	290b883a 	add	r5,r5,r4
 4009990:	0145c83a 	sub	r2,zero,r5
 4009994:	1007d53a 	srai	r3,r2,20
 4009998:	000d883a 	mov	r6,zero
 400999c:	0140040e 	bge	zero,r5,40099b0 <__ulp+0x2c>
 40099a0:	280f883a 	mov	r7,r5
 40099a4:	3807883a 	mov	r3,r7
 40099a8:	3005883a 	mov	r2,r6
 40099ac:	f800283a 	ret
 40099b0:	008004c4 	movi	r2,19
 40099b4:	193ffb04 	addi	r4,r3,-20
 40099b8:	10c00c0e 	bge	r2,r3,40099ec <__ulp+0x68>
 40099bc:	008007c4 	movi	r2,31
 40099c0:	1107c83a 	sub	r3,r2,r4
 40099c4:	00800784 	movi	r2,30
 40099c8:	01400044 	movi	r5,1
 40099cc:	11000216 	blt	r2,r4,40099d8 <__ulp+0x54>
 40099d0:	00800044 	movi	r2,1
 40099d4:	10ca983a 	sll	r5,r2,r3
 40099d8:	000f883a 	mov	r7,zero
 40099dc:	280d883a 	mov	r6,r5
 40099e0:	3807883a 	mov	r3,r7
 40099e4:	3005883a 	mov	r2,r6
 40099e8:	f800283a 	ret
 40099ec:	00800234 	movhi	r2,8
 40099f0:	10cfd83a 	sra	r7,r2,r3
 40099f4:	000d883a 	mov	r6,zero
 40099f8:	3005883a 	mov	r2,r6
 40099fc:	3807883a 	mov	r3,r7
 4009a00:	f800283a 	ret

04009a04 <__b2d>:
 4009a04:	20800417 	ldw	r2,16(r4)
 4009a08:	defff904 	addi	sp,sp,-28
 4009a0c:	dd000415 	stw	r20,16(sp)
 4009a10:	1085883a 	add	r2,r2,r2
 4009a14:	25000504 	addi	r20,r4,20
 4009a18:	1085883a 	add	r2,r2,r2
 4009a1c:	dc000015 	stw	r16,0(sp)
 4009a20:	a0a1883a 	add	r16,r20,r2
 4009a24:	dd400515 	stw	r21,20(sp)
 4009a28:	857fff17 	ldw	r21,-4(r16)
 4009a2c:	dc400115 	stw	r17,4(sp)
 4009a30:	dfc00615 	stw	ra,24(sp)
 4009a34:	a809883a 	mov	r4,r21
 4009a38:	2823883a 	mov	r17,r5
 4009a3c:	dcc00315 	stw	r19,12(sp)
 4009a40:	dc800215 	stw	r18,8(sp)
 4009a44:	40097f00 	call	40097f0 <__hi0bits>
 4009a48:	100b883a 	mov	r5,r2
 4009a4c:	00800804 	movi	r2,32
 4009a50:	1145c83a 	sub	r2,r2,r5
 4009a54:	88800015 	stw	r2,0(r17)
 4009a58:	00800284 	movi	r2,10
 4009a5c:	80ffff04 	addi	r3,r16,-4
 4009a60:	11401416 	blt	r2,r5,4009ab4 <__b2d+0xb0>
 4009a64:	008002c4 	movi	r2,11
 4009a68:	1149c83a 	sub	r4,r2,r5
 4009a6c:	a0c02736 	bltu	r20,r3,4009b0c <__b2d+0x108>
 4009a70:	000d883a 	mov	r6,zero
 4009a74:	28800544 	addi	r2,r5,21
 4009a78:	a906d83a 	srl	r3,r21,r4
 4009a7c:	a884983a 	sll	r2,r21,r2
 4009a80:	1ccffc34 	orhi	r19,r3,16368
 4009a84:	11a4b03a 	or	r18,r2,r6
 4009a88:	9005883a 	mov	r2,r18
 4009a8c:	9807883a 	mov	r3,r19
 4009a90:	dfc00617 	ldw	ra,24(sp)
 4009a94:	dd400517 	ldw	r21,20(sp)
 4009a98:	dd000417 	ldw	r20,16(sp)
 4009a9c:	dcc00317 	ldw	r19,12(sp)
 4009aa0:	dc800217 	ldw	r18,8(sp)
 4009aa4:	dc400117 	ldw	r17,4(sp)
 4009aa8:	dc000017 	ldw	r16,0(sp)
 4009aac:	dec00704 	addi	sp,sp,28
 4009ab0:	f800283a 	ret
 4009ab4:	a0c00e36 	bltu	r20,r3,4009af0 <__b2d+0xec>
 4009ab8:	293ffd44 	addi	r4,r5,-11
 4009abc:	000d883a 	mov	r6,zero
 4009ac0:	20000f26 	beq	r4,zero,4009b00 <__b2d+0xfc>
 4009ac4:	00800804 	movi	r2,32
 4009ac8:	110bc83a 	sub	r5,r2,r4
 4009acc:	a0c01236 	bltu	r20,r3,4009b18 <__b2d+0x114>
 4009ad0:	000f883a 	mov	r7,zero
 4009ad4:	a904983a 	sll	r2,r21,r4
 4009ad8:	3146d83a 	srl	r3,r6,r5
 4009adc:	3108983a 	sll	r4,r6,r4
 4009ae0:	108ffc34 	orhi	r2,r2,16368
 4009ae4:	18a6b03a 	or	r19,r3,r2
 4009ae8:	3924b03a 	or	r18,r7,r4
 4009aec:	003fe606 	br	4009a88 <__b2d+0x84>
 4009af0:	293ffd44 	addi	r4,r5,-11
 4009af4:	81bffe17 	ldw	r6,-8(r16)
 4009af8:	80fffe04 	addi	r3,r16,-8
 4009afc:	203ff11e 	bne	r4,zero,4009ac4 <__b2d+0xc0>
 4009b00:	accffc34 	orhi	r19,r21,16368
 4009b04:	3025883a 	mov	r18,r6
 4009b08:	003fdf06 	br	4009a88 <__b2d+0x84>
 4009b0c:	18bfff17 	ldw	r2,-4(r3)
 4009b10:	110cd83a 	srl	r6,r2,r4
 4009b14:	003fd706 	br	4009a74 <__b2d+0x70>
 4009b18:	18bfff17 	ldw	r2,-4(r3)
 4009b1c:	114ed83a 	srl	r7,r2,r5
 4009b20:	003fec06 	br	4009ad4 <__b2d+0xd0>

04009b24 <__ratio>:
 4009b24:	defff904 	addi	sp,sp,-28
 4009b28:	dc400215 	stw	r17,8(sp)
 4009b2c:	2823883a 	mov	r17,r5
 4009b30:	d80b883a 	mov	r5,sp
 4009b34:	dfc00615 	stw	ra,24(sp)
 4009b38:	dd000515 	stw	r20,20(sp)
 4009b3c:	dcc00415 	stw	r19,16(sp)
 4009b40:	dc800315 	stw	r18,12(sp)
 4009b44:	2025883a 	mov	r18,r4
 4009b48:	4009a040 	call	4009a04 <__b2d>
 4009b4c:	8809883a 	mov	r4,r17
 4009b50:	d9400104 	addi	r5,sp,4
 4009b54:	1027883a 	mov	r19,r2
 4009b58:	1829883a 	mov	r20,r3
 4009b5c:	4009a040 	call	4009a04 <__b2d>
 4009b60:	89000417 	ldw	r4,16(r17)
 4009b64:	91c00417 	ldw	r7,16(r18)
 4009b68:	d9800117 	ldw	r6,4(sp)
 4009b6c:	180b883a 	mov	r5,r3
 4009b70:	390fc83a 	sub	r7,r7,r4
 4009b74:	1009883a 	mov	r4,r2
 4009b78:	d8800017 	ldw	r2,0(sp)
 4009b7c:	380e917a 	slli	r7,r7,5
 4009b80:	2011883a 	mov	r8,r4
 4009b84:	1185c83a 	sub	r2,r2,r6
 4009b88:	11c5883a 	add	r2,r2,r7
 4009b8c:	1006953a 	slli	r3,r2,20
 4009b90:	2813883a 	mov	r9,r5
 4009b94:	00800d0e 	bge	zero,r2,4009bcc <__ratio+0xa8>
 4009b98:	1d29883a 	add	r20,r3,r20
 4009b9c:	a00b883a 	mov	r5,r20
 4009ba0:	480f883a 	mov	r7,r9
 4009ba4:	9809883a 	mov	r4,r19
 4009ba8:	400d883a 	mov	r6,r8
 4009bac:	400ce8c0 	call	400ce8c <__divdf3>
 4009bb0:	dfc00617 	ldw	ra,24(sp)
 4009bb4:	dd000517 	ldw	r20,20(sp)
 4009bb8:	dcc00417 	ldw	r19,16(sp)
 4009bbc:	dc800317 	ldw	r18,12(sp)
 4009bc0:	dc400217 	ldw	r17,8(sp)
 4009bc4:	dec00704 	addi	sp,sp,28
 4009bc8:	f800283a 	ret
 4009bcc:	28d3c83a 	sub	r9,r5,r3
 4009bd0:	003ff206 	br	4009b9c <__ratio+0x78>

04009bd4 <_mprec_log10>:
 4009bd4:	defffe04 	addi	sp,sp,-8
 4009bd8:	008005c4 	movi	r2,23
 4009bdc:	dc000015 	stw	r16,0(sp)
 4009be0:	dfc00115 	stw	ra,4(sp)
 4009be4:	2021883a 	mov	r16,r4
 4009be8:	11000c16 	blt	r2,r4,4009c1c <_mprec_log10+0x48>
 4009bec:	200490fa 	slli	r2,r4,3
 4009bf0:	00c100f4 	movhi	r3,1027
 4009bf4:	18cb0404 	addi	r3,r3,11280
 4009bf8:	10c5883a 	add	r2,r2,r3
 4009bfc:	12400117 	ldw	r9,4(r2)
 4009c00:	12000017 	ldw	r8,0(r2)
 4009c04:	4807883a 	mov	r3,r9
 4009c08:	4005883a 	mov	r2,r8
 4009c0c:	dfc00117 	ldw	ra,4(sp)
 4009c10:	dc000017 	ldw	r16,0(sp)
 4009c14:	dec00204 	addi	sp,sp,8
 4009c18:	f800283a 	ret
 4009c1c:	0011883a 	mov	r8,zero
 4009c20:	024ffc34 	movhi	r9,16368
 4009c24:	0005883a 	mov	r2,zero
 4009c28:	00d00934 	movhi	r3,16420
 4009c2c:	480b883a 	mov	r5,r9
 4009c30:	4009883a 	mov	r4,r8
 4009c34:	180f883a 	mov	r7,r3
 4009c38:	100d883a 	mov	r6,r2
 4009c3c:	400cac80 	call	400cac8 <__muldf3>
 4009c40:	843fffc4 	addi	r16,r16,-1
 4009c44:	1011883a 	mov	r8,r2
 4009c48:	1813883a 	mov	r9,r3
 4009c4c:	803ff51e 	bne	r16,zero,4009c24 <_mprec_log10+0x50>
 4009c50:	4005883a 	mov	r2,r8
 4009c54:	4807883a 	mov	r3,r9
 4009c58:	dfc00117 	ldw	ra,4(sp)
 4009c5c:	dc000017 	ldw	r16,0(sp)
 4009c60:	dec00204 	addi	sp,sp,8
 4009c64:	f800283a 	ret

04009c68 <__copybits>:
 4009c68:	297fffc4 	addi	r5,r5,-1
 4009c6c:	30800417 	ldw	r2,16(r6)
 4009c70:	280bd17a 	srai	r5,r5,5
 4009c74:	31800504 	addi	r6,r6,20
 4009c78:	1085883a 	add	r2,r2,r2
 4009c7c:	294b883a 	add	r5,r5,r5
 4009c80:	294b883a 	add	r5,r5,r5
 4009c84:	1085883a 	add	r2,r2,r2
 4009c88:	290b883a 	add	r5,r5,r4
 4009c8c:	3087883a 	add	r3,r6,r2
 4009c90:	29400104 	addi	r5,r5,4
 4009c94:	30c0052e 	bgeu	r6,r3,4009cac <__copybits+0x44>
 4009c98:	30800017 	ldw	r2,0(r6)
 4009c9c:	31800104 	addi	r6,r6,4
 4009ca0:	20800015 	stw	r2,0(r4)
 4009ca4:	21000104 	addi	r4,r4,4
 4009ca8:	30fffb36 	bltu	r6,r3,4009c98 <__copybits+0x30>
 4009cac:	2140032e 	bgeu	r4,r5,4009cbc <__copybits+0x54>
 4009cb0:	20000015 	stw	zero,0(r4)
 4009cb4:	21000104 	addi	r4,r4,4
 4009cb8:	217ffd36 	bltu	r4,r5,4009cb0 <__copybits+0x48>
 4009cbc:	f800283a 	ret

04009cc0 <__any_on>:
 4009cc0:	20800417 	ldw	r2,16(r4)
 4009cc4:	2807d17a 	srai	r3,r5,5
 4009cc8:	21000504 	addi	r4,r4,20
 4009ccc:	10c00d0e 	bge	r2,r3,4009d04 <__any_on+0x44>
 4009cd0:	1085883a 	add	r2,r2,r2
 4009cd4:	1085883a 	add	r2,r2,r2
 4009cd8:	208d883a 	add	r6,r4,r2
 4009cdc:	2180182e 	bgeu	r4,r6,4009d40 <__any_on+0x80>
 4009ce0:	30bfff17 	ldw	r2,-4(r6)
 4009ce4:	30ffff04 	addi	r3,r6,-4
 4009ce8:	1000041e 	bne	r2,zero,4009cfc <__any_on+0x3c>
 4009cec:	20c0142e 	bgeu	r4,r3,4009d40 <__any_on+0x80>
 4009cf0:	18ffff04 	addi	r3,r3,-4
 4009cf4:	18800017 	ldw	r2,0(r3)
 4009cf8:	103ffc26 	beq	r2,zero,4009cec <__any_on+0x2c>
 4009cfc:	00800044 	movi	r2,1
 4009d00:	f800283a 	ret
 4009d04:	18800a0e 	bge	r3,r2,4009d30 <__any_on+0x70>
 4009d08:	294007cc 	andi	r5,r5,31
 4009d0c:	28000826 	beq	r5,zero,4009d30 <__any_on+0x70>
 4009d10:	18c5883a 	add	r2,r3,r3
 4009d14:	1085883a 	add	r2,r2,r2
 4009d18:	208d883a 	add	r6,r4,r2
 4009d1c:	30c00017 	ldw	r3,0(r6)
 4009d20:	1944d83a 	srl	r2,r3,r5
 4009d24:	1144983a 	sll	r2,r2,r5
 4009d28:	18bff41e 	bne	r3,r2,4009cfc <__any_on+0x3c>
 4009d2c:	003feb06 	br	4009cdc <__any_on+0x1c>
 4009d30:	18c5883a 	add	r2,r3,r3
 4009d34:	1085883a 	add	r2,r2,r2
 4009d38:	208d883a 	add	r6,r4,r2
 4009d3c:	003fe706 	br	4009cdc <__any_on+0x1c>
 4009d40:	0005883a 	mov	r2,zero
 4009d44:	f800283a 	ret

04009d48 <_Balloc>:
 4009d48:	20c01317 	ldw	r3,76(r4)
 4009d4c:	defffb04 	addi	sp,sp,-20
 4009d50:	dcc00315 	stw	r19,12(sp)
 4009d54:	dc800215 	stw	r18,8(sp)
 4009d58:	dfc00415 	stw	ra,16(sp)
 4009d5c:	2825883a 	mov	r18,r5
 4009d60:	dc400115 	stw	r17,4(sp)
 4009d64:	dc000015 	stw	r16,0(sp)
 4009d68:	2027883a 	mov	r19,r4
 4009d6c:	01800404 	movi	r6,16
 4009d70:	01400104 	movi	r5,4
 4009d74:	18001726 	beq	r3,zero,4009dd4 <_Balloc+0x8c>
 4009d78:	01400044 	movi	r5,1
 4009d7c:	9485883a 	add	r2,r18,r18
 4009d80:	2ca2983a 	sll	r17,r5,r18
 4009d84:	1085883a 	add	r2,r2,r2
 4009d88:	10c7883a 	add	r3,r2,r3
 4009d8c:	1c000017 	ldw	r16,0(r3)
 4009d90:	8c4d883a 	add	r6,r17,r17
 4009d94:	318d883a 	add	r6,r6,r6
 4009d98:	9809883a 	mov	r4,r19
 4009d9c:	31800504 	addi	r6,r6,20
 4009da0:	80001226 	beq	r16,zero,4009dec <_Balloc+0xa4>
 4009da4:	80800017 	ldw	r2,0(r16)
 4009da8:	18800015 	stw	r2,0(r3)
 4009dac:	80000415 	stw	zero,16(r16)
 4009db0:	80000315 	stw	zero,12(r16)
 4009db4:	8005883a 	mov	r2,r16
 4009db8:	dfc00417 	ldw	ra,16(sp)
 4009dbc:	dcc00317 	ldw	r19,12(sp)
 4009dc0:	dc800217 	ldw	r18,8(sp)
 4009dc4:	dc400117 	ldw	r17,4(sp)
 4009dc8:	dc000017 	ldw	r16,0(sp)
 4009dcc:	dec00504 	addi	sp,sp,20
 4009dd0:	f800283a 	ret
 4009dd4:	400b61c0 	call	400b61c <_calloc_r>
 4009dd8:	1007883a 	mov	r3,r2
 4009ddc:	0021883a 	mov	r16,zero
 4009de0:	98801315 	stw	r2,76(r19)
 4009de4:	103fe41e 	bne	r2,zero,4009d78 <_Balloc+0x30>
 4009de8:	003ff206 	br	4009db4 <_Balloc+0x6c>
 4009dec:	400b61c0 	call	400b61c <_calloc_r>
 4009df0:	103ff026 	beq	r2,zero,4009db4 <_Balloc+0x6c>
 4009df4:	1021883a 	mov	r16,r2
 4009df8:	14800115 	stw	r18,4(r2)
 4009dfc:	14400215 	stw	r17,8(r2)
 4009e00:	003fea06 	br	4009dac <_Balloc+0x64>

04009e04 <__d2b>:
 4009e04:	defff504 	addi	sp,sp,-44
 4009e08:	dcc00515 	stw	r19,20(sp)
 4009e0c:	04c00044 	movi	r19,1
 4009e10:	dc000215 	stw	r16,8(sp)
 4009e14:	2821883a 	mov	r16,r5
 4009e18:	980b883a 	mov	r5,r19
 4009e1c:	ddc00915 	stw	r23,36(sp)
 4009e20:	dd800815 	stw	r22,32(sp)
 4009e24:	dd400715 	stw	r21,28(sp)
 4009e28:	dd000615 	stw	r20,24(sp)
 4009e2c:	dc800415 	stw	r18,16(sp)
 4009e30:	dc400315 	stw	r17,12(sp)
 4009e34:	dfc00a15 	stw	ra,40(sp)
 4009e38:	3023883a 	mov	r17,r6
 4009e3c:	382d883a 	mov	r22,r7
 4009e40:	ddc00b17 	ldw	r23,44(sp)
 4009e44:	4009d480 	call	4009d48 <_Balloc>
 4009e48:	1025883a 	mov	r18,r2
 4009e4c:	00a00034 	movhi	r2,32768
 4009e50:	10bfffc4 	addi	r2,r2,-1
 4009e54:	8888703a 	and	r4,r17,r2
 4009e58:	202ad53a 	srli	r21,r4,20
 4009e5c:	00800434 	movhi	r2,16
 4009e60:	10bfffc4 	addi	r2,r2,-1
 4009e64:	8886703a 	and	r3,r17,r2
 4009e68:	a829003a 	cmpeq	r20,r21,zero
 4009e6c:	800b883a 	mov	r5,r16
 4009e70:	d8c00115 	stw	r3,4(sp)
 4009e74:	94000504 	addi	r16,r18,20
 4009e78:	a000021e 	bne	r20,zero,4009e84 <__d2b+0x80>
 4009e7c:	18c00434 	orhi	r3,r3,16
 4009e80:	d8c00115 	stw	r3,4(sp)
 4009e84:	28002726 	beq	r5,zero,4009f24 <__d2b+0x120>
 4009e88:	d809883a 	mov	r4,sp
 4009e8c:	d9400015 	stw	r5,0(sp)
 4009e90:	40098600 	call	4009860 <__lo0bits>
 4009e94:	100d883a 	mov	r6,r2
 4009e98:	10003526 	beq	r2,zero,4009f70 <__d2b+0x16c>
 4009e9c:	d8c00117 	ldw	r3,4(sp)
 4009ea0:	00800804 	movi	r2,32
 4009ea4:	1185c83a 	sub	r2,r2,r6
 4009ea8:	d9000017 	ldw	r4,0(sp)
 4009eac:	1886983a 	sll	r3,r3,r2
 4009eb0:	1906b03a 	or	r3,r3,r4
 4009eb4:	90c00515 	stw	r3,20(r18)
 4009eb8:	d8c00117 	ldw	r3,4(sp)
 4009ebc:	1986d83a 	srl	r3,r3,r6
 4009ec0:	d8c00115 	stw	r3,4(sp)
 4009ec4:	180b003a 	cmpeq	r5,r3,zero
 4009ec8:	00800084 	movi	r2,2
 4009ecc:	114bc83a 	sub	r5,r2,r5
 4009ed0:	80c00115 	stw	r3,4(r16)
 4009ed4:	91400415 	stw	r5,16(r18)
 4009ed8:	a0001a1e 	bne	r20,zero,4009f44 <__d2b+0x140>
 4009edc:	3545883a 	add	r2,r6,r21
 4009ee0:	10bef344 	addi	r2,r2,-1075
 4009ee4:	00c00d44 	movi	r3,53
 4009ee8:	b0800015 	stw	r2,0(r22)
 4009eec:	1987c83a 	sub	r3,r3,r6
 4009ef0:	b8c00015 	stw	r3,0(r23)
 4009ef4:	9005883a 	mov	r2,r18
 4009ef8:	dfc00a17 	ldw	ra,40(sp)
 4009efc:	ddc00917 	ldw	r23,36(sp)
 4009f00:	dd800817 	ldw	r22,32(sp)
 4009f04:	dd400717 	ldw	r21,28(sp)
 4009f08:	dd000617 	ldw	r20,24(sp)
 4009f0c:	dcc00517 	ldw	r19,20(sp)
 4009f10:	dc800417 	ldw	r18,16(sp)
 4009f14:	dc400317 	ldw	r17,12(sp)
 4009f18:	dc000217 	ldw	r16,8(sp)
 4009f1c:	dec00b04 	addi	sp,sp,44
 4009f20:	f800283a 	ret
 4009f24:	d9000104 	addi	r4,sp,4
 4009f28:	40098600 	call	4009860 <__lo0bits>
 4009f2c:	11800804 	addi	r6,r2,32
 4009f30:	d8800117 	ldw	r2,4(sp)
 4009f34:	94c00415 	stw	r19,16(r18)
 4009f38:	980b883a 	mov	r5,r19
 4009f3c:	90800515 	stw	r2,20(r18)
 4009f40:	a03fe626 	beq	r20,zero,4009edc <__d2b+0xd8>
 4009f44:	2945883a 	add	r2,r5,r5
 4009f48:	1085883a 	add	r2,r2,r2
 4009f4c:	1405883a 	add	r2,r2,r16
 4009f50:	113fff17 	ldw	r4,-4(r2)
 4009f54:	30fef384 	addi	r3,r6,-1074
 4009f58:	2820917a 	slli	r16,r5,5
 4009f5c:	b0c00015 	stw	r3,0(r22)
 4009f60:	40097f00 	call	40097f0 <__hi0bits>
 4009f64:	80a1c83a 	sub	r16,r16,r2
 4009f68:	bc000015 	stw	r16,0(r23)
 4009f6c:	003fe106 	br	4009ef4 <__d2b+0xf0>
 4009f70:	d8800017 	ldw	r2,0(sp)
 4009f74:	90800515 	stw	r2,20(r18)
 4009f78:	d8c00117 	ldw	r3,4(sp)
 4009f7c:	003fd106 	br	4009ec4 <__d2b+0xc0>

04009f80 <__mdiff>:
 4009f80:	defffb04 	addi	sp,sp,-20
 4009f84:	dc000015 	stw	r16,0(sp)
 4009f88:	2821883a 	mov	r16,r5
 4009f8c:	dc800215 	stw	r18,8(sp)
 4009f90:	300b883a 	mov	r5,r6
 4009f94:	2025883a 	mov	r18,r4
 4009f98:	8009883a 	mov	r4,r16
 4009f9c:	dc400115 	stw	r17,4(sp)
 4009fa0:	dfc00415 	stw	ra,16(sp)
 4009fa4:	dcc00315 	stw	r19,12(sp)
 4009fa8:	3023883a 	mov	r17,r6
 4009fac:	40099240 	call	4009924 <__mcmp>
 4009fb0:	10004226 	beq	r2,zero,400a0bc <__mdiff+0x13c>
 4009fb4:	10005016 	blt	r2,zero,400a0f8 <__mdiff+0x178>
 4009fb8:	0027883a 	mov	r19,zero
 4009fbc:	81400117 	ldw	r5,4(r16)
 4009fc0:	9009883a 	mov	r4,r18
 4009fc4:	4009d480 	call	4009d48 <_Balloc>
 4009fc8:	1019883a 	mov	r12,r2
 4009fcc:	82800417 	ldw	r10,16(r16)
 4009fd0:	88800417 	ldw	r2,16(r17)
 4009fd4:	81800504 	addi	r6,r16,20
 4009fd8:	5287883a 	add	r3,r10,r10
 4009fdc:	1085883a 	add	r2,r2,r2
 4009fe0:	18c7883a 	add	r3,r3,r3
 4009fe4:	1085883a 	add	r2,r2,r2
 4009fe8:	8a000504 	addi	r8,r17,20
 4009fec:	64c00315 	stw	r19,12(r12)
 4009ff0:	30db883a 	add	r13,r6,r3
 4009ff4:	4097883a 	add	r11,r8,r2
 4009ff8:	61c00504 	addi	r7,r12,20
 4009ffc:	0013883a 	mov	r9,zero
 400a000:	31000017 	ldw	r4,0(r6)
 400a004:	41400017 	ldw	r5,0(r8)
 400a008:	42000104 	addi	r8,r8,4
 400a00c:	20bfffcc 	andi	r2,r4,65535
 400a010:	28ffffcc 	andi	r3,r5,65535
 400a014:	10c5c83a 	sub	r2,r2,r3
 400a018:	1245883a 	add	r2,r2,r9
 400a01c:	2008d43a 	srli	r4,r4,16
 400a020:	280ad43a 	srli	r5,r5,16
 400a024:	1007d43a 	srai	r3,r2,16
 400a028:	3880000d 	sth	r2,0(r7)
 400a02c:	2149c83a 	sub	r4,r4,r5
 400a030:	20c9883a 	add	r4,r4,r3
 400a034:	3900008d 	sth	r4,2(r7)
 400a038:	31800104 	addi	r6,r6,4
 400a03c:	39c00104 	addi	r7,r7,4
 400a040:	2013d43a 	srai	r9,r4,16
 400a044:	42ffee36 	bltu	r8,r11,400a000 <__mdiff+0x80>
 400a048:	33400c2e 	bgeu	r6,r13,400a07c <__mdiff+0xfc>
 400a04c:	30800017 	ldw	r2,0(r6)
 400a050:	31800104 	addi	r6,r6,4
 400a054:	10ffffcc 	andi	r3,r2,65535
 400a058:	1a47883a 	add	r3,r3,r9
 400a05c:	1004d43a 	srli	r2,r2,16
 400a060:	1809d43a 	srai	r4,r3,16
 400a064:	38c0000d 	sth	r3,0(r7)
 400a068:	1105883a 	add	r2,r2,r4
 400a06c:	3880008d 	sth	r2,2(r7)
 400a070:	1013d43a 	srai	r9,r2,16
 400a074:	39c00104 	addi	r7,r7,4
 400a078:	337ff436 	bltu	r6,r13,400a04c <__mdiff+0xcc>
 400a07c:	38bfff17 	ldw	r2,-4(r7)
 400a080:	38ffff04 	addi	r3,r7,-4
 400a084:	1000041e 	bne	r2,zero,400a098 <__mdiff+0x118>
 400a088:	18ffff04 	addi	r3,r3,-4
 400a08c:	18800017 	ldw	r2,0(r3)
 400a090:	52bfffc4 	addi	r10,r10,-1
 400a094:	103ffc26 	beq	r2,zero,400a088 <__mdiff+0x108>
 400a098:	6005883a 	mov	r2,r12
 400a09c:	62800415 	stw	r10,16(r12)
 400a0a0:	dfc00417 	ldw	ra,16(sp)
 400a0a4:	dcc00317 	ldw	r19,12(sp)
 400a0a8:	dc800217 	ldw	r18,8(sp)
 400a0ac:	dc400117 	ldw	r17,4(sp)
 400a0b0:	dc000017 	ldw	r16,0(sp)
 400a0b4:	dec00504 	addi	sp,sp,20
 400a0b8:	f800283a 	ret
 400a0bc:	9009883a 	mov	r4,r18
 400a0c0:	000b883a 	mov	r5,zero
 400a0c4:	4009d480 	call	4009d48 <_Balloc>
 400a0c8:	1019883a 	mov	r12,r2
 400a0cc:	00800044 	movi	r2,1
 400a0d0:	60800415 	stw	r2,16(r12)
 400a0d4:	6005883a 	mov	r2,r12
 400a0d8:	60000515 	stw	zero,20(r12)
 400a0dc:	dfc00417 	ldw	ra,16(sp)
 400a0e0:	dcc00317 	ldw	r19,12(sp)
 400a0e4:	dc800217 	ldw	r18,8(sp)
 400a0e8:	dc400117 	ldw	r17,4(sp)
 400a0ec:	dc000017 	ldw	r16,0(sp)
 400a0f0:	dec00504 	addi	sp,sp,20
 400a0f4:	f800283a 	ret
 400a0f8:	880d883a 	mov	r6,r17
 400a0fc:	04c00044 	movi	r19,1
 400a100:	8023883a 	mov	r17,r16
 400a104:	3021883a 	mov	r16,r6
 400a108:	003fac06 	br	4009fbc <__mdiff+0x3c>

0400a10c <__lshift>:
 400a10c:	defff904 	addi	sp,sp,-28
 400a110:	28800417 	ldw	r2,16(r5)
 400a114:	dc000015 	stw	r16,0(sp)
 400a118:	3021d17a 	srai	r16,r6,5
 400a11c:	28c00217 	ldw	r3,8(r5)
 400a120:	10800044 	addi	r2,r2,1
 400a124:	dc400115 	stw	r17,4(sp)
 400a128:	80a3883a 	add	r17,r16,r2
 400a12c:	dd400515 	stw	r21,20(sp)
 400a130:	dd000415 	stw	r20,16(sp)
 400a134:	dc800215 	stw	r18,8(sp)
 400a138:	dfc00615 	stw	ra,24(sp)
 400a13c:	2825883a 	mov	r18,r5
 400a140:	dcc00315 	stw	r19,12(sp)
 400a144:	3029883a 	mov	r20,r6
 400a148:	202b883a 	mov	r21,r4
 400a14c:	29400117 	ldw	r5,4(r5)
 400a150:	1c40030e 	bge	r3,r17,400a160 <__lshift+0x54>
 400a154:	18c7883a 	add	r3,r3,r3
 400a158:	29400044 	addi	r5,r5,1
 400a15c:	1c7ffd16 	blt	r3,r17,400a154 <__lshift+0x48>
 400a160:	a809883a 	mov	r4,r21
 400a164:	4009d480 	call	4009d48 <_Balloc>
 400a168:	1027883a 	mov	r19,r2
 400a16c:	11400504 	addi	r5,r2,20
 400a170:	0400090e 	bge	zero,r16,400a198 <__lshift+0x8c>
 400a174:	2805883a 	mov	r2,r5
 400a178:	0007883a 	mov	r3,zero
 400a17c:	18c00044 	addi	r3,r3,1
 400a180:	10000015 	stw	zero,0(r2)
 400a184:	10800104 	addi	r2,r2,4
 400a188:	80fffc1e 	bne	r16,r3,400a17c <__lshift+0x70>
 400a18c:	8405883a 	add	r2,r16,r16
 400a190:	1085883a 	add	r2,r2,r2
 400a194:	288b883a 	add	r5,r5,r2
 400a198:	90800417 	ldw	r2,16(r18)
 400a19c:	91000504 	addi	r4,r18,20
 400a1a0:	a18007cc 	andi	r6,r20,31
 400a1a4:	1085883a 	add	r2,r2,r2
 400a1a8:	1085883a 	add	r2,r2,r2
 400a1ac:	208f883a 	add	r7,r4,r2
 400a1b0:	30001e26 	beq	r6,zero,400a22c <__lshift+0x120>
 400a1b4:	00800804 	movi	r2,32
 400a1b8:	1191c83a 	sub	r8,r2,r6
 400a1bc:	0007883a 	mov	r3,zero
 400a1c0:	20800017 	ldw	r2,0(r4)
 400a1c4:	1184983a 	sll	r2,r2,r6
 400a1c8:	1884b03a 	or	r2,r3,r2
 400a1cc:	28800015 	stw	r2,0(r5)
 400a1d0:	20c00017 	ldw	r3,0(r4)
 400a1d4:	21000104 	addi	r4,r4,4
 400a1d8:	29400104 	addi	r5,r5,4
 400a1dc:	1a06d83a 	srl	r3,r3,r8
 400a1e0:	21fff736 	bltu	r4,r7,400a1c0 <__lshift+0xb4>
 400a1e4:	28c00015 	stw	r3,0(r5)
 400a1e8:	18000126 	beq	r3,zero,400a1f0 <__lshift+0xe4>
 400a1ec:	8c400044 	addi	r17,r17,1
 400a1f0:	88bfffc4 	addi	r2,r17,-1
 400a1f4:	98800415 	stw	r2,16(r19)
 400a1f8:	a809883a 	mov	r4,r21
 400a1fc:	900b883a 	mov	r5,r18
 400a200:	40097c80 	call	40097c8 <_Bfree>
 400a204:	9805883a 	mov	r2,r19
 400a208:	dfc00617 	ldw	ra,24(sp)
 400a20c:	dd400517 	ldw	r21,20(sp)
 400a210:	dd000417 	ldw	r20,16(sp)
 400a214:	dcc00317 	ldw	r19,12(sp)
 400a218:	dc800217 	ldw	r18,8(sp)
 400a21c:	dc400117 	ldw	r17,4(sp)
 400a220:	dc000017 	ldw	r16,0(sp)
 400a224:	dec00704 	addi	sp,sp,28
 400a228:	f800283a 	ret
 400a22c:	20800017 	ldw	r2,0(r4)
 400a230:	21000104 	addi	r4,r4,4
 400a234:	28800015 	stw	r2,0(r5)
 400a238:	29400104 	addi	r5,r5,4
 400a23c:	21ffec2e 	bgeu	r4,r7,400a1f0 <__lshift+0xe4>
 400a240:	20800017 	ldw	r2,0(r4)
 400a244:	21000104 	addi	r4,r4,4
 400a248:	28800015 	stw	r2,0(r5)
 400a24c:	29400104 	addi	r5,r5,4
 400a250:	21fff636 	bltu	r4,r7,400a22c <__lshift+0x120>
 400a254:	003fe606 	br	400a1f0 <__lshift+0xe4>

0400a258 <__multiply>:
 400a258:	defff904 	addi	sp,sp,-28
 400a25c:	dcc00315 	stw	r19,12(sp)
 400a260:	dc800215 	stw	r18,8(sp)
 400a264:	2cc00417 	ldw	r19,16(r5)
 400a268:	34800417 	ldw	r18,16(r6)
 400a26c:	dd000415 	stw	r20,16(sp)
 400a270:	dc400115 	stw	r17,4(sp)
 400a274:	dfc00615 	stw	ra,24(sp)
 400a278:	dd400515 	stw	r21,20(sp)
 400a27c:	dc000015 	stw	r16,0(sp)
 400a280:	2823883a 	mov	r17,r5
 400a284:	3029883a 	mov	r20,r6
 400a288:	9c80040e 	bge	r19,r18,400a29c <__multiply+0x44>
 400a28c:	9027883a 	mov	r19,r18
 400a290:	2c800417 	ldw	r18,16(r5)
 400a294:	2829883a 	mov	r20,r5
 400a298:	3023883a 	mov	r17,r6
 400a29c:	88800217 	ldw	r2,8(r17)
 400a2a0:	9ca1883a 	add	r16,r19,r18
 400a2a4:	89400117 	ldw	r5,4(r17)
 400a2a8:	1400010e 	bge	r2,r16,400a2b0 <__multiply+0x58>
 400a2ac:	29400044 	addi	r5,r5,1
 400a2b0:	4009d480 	call	4009d48 <_Balloc>
 400a2b4:	102b883a 	mov	r21,r2
 400a2b8:	8405883a 	add	r2,r16,r16
 400a2bc:	1085883a 	add	r2,r2,r2
 400a2c0:	a9000504 	addi	r4,r21,20
 400a2c4:	209d883a 	add	r14,r4,r2
 400a2c8:	2380042e 	bgeu	r4,r14,400a2dc <__multiply+0x84>
 400a2cc:	2005883a 	mov	r2,r4
 400a2d0:	10000015 	stw	zero,0(r2)
 400a2d4:	10800104 	addi	r2,r2,4
 400a2d8:	13bffd36 	bltu	r2,r14,400a2d0 <__multiply+0x78>
 400a2dc:	9485883a 	add	r2,r18,r18
 400a2e0:	9cc7883a 	add	r3,r19,r19
 400a2e4:	a1800504 	addi	r6,r20,20
 400a2e8:	1085883a 	add	r2,r2,r2
 400a2ec:	8b400504 	addi	r13,r17,20
 400a2f0:	18c7883a 	add	r3,r3,r3
 400a2f4:	309f883a 	add	r15,r6,r2
 400a2f8:	68d7883a 	add	r11,r13,r3
 400a2fc:	33c03b2e 	bgeu	r6,r15,400a3ec <__multiply+0x194>
 400a300:	2019883a 	mov	r12,r4
 400a304:	30800017 	ldw	r2,0(r6)
 400a308:	127fffcc 	andi	r9,r2,65535
 400a30c:	48001826 	beq	r9,zero,400a370 <__multiply+0x118>
 400a310:	6811883a 	mov	r8,r13
 400a314:	600f883a 	mov	r7,r12
 400a318:	0015883a 	mov	r10,zero
 400a31c:	40c00017 	ldw	r3,0(r8)
 400a320:	39400017 	ldw	r5,0(r7)
 400a324:	42000104 	addi	r8,r8,4
 400a328:	193fffcc 	andi	r4,r3,65535
 400a32c:	4909383a 	mul	r4,r9,r4
 400a330:	1806d43a 	srli	r3,r3,16
 400a334:	28bfffcc 	andi	r2,r5,65535
 400a338:	5085883a 	add	r2,r10,r2
 400a33c:	2089883a 	add	r4,r4,r2
 400a340:	48c7383a 	mul	r3,r9,r3
 400a344:	280ad43a 	srli	r5,r5,16
 400a348:	2004d43a 	srli	r2,r4,16
 400a34c:	3900000d 	sth	r4,0(r7)
 400a350:	1947883a 	add	r3,r3,r5
 400a354:	10c5883a 	add	r2,r2,r3
 400a358:	3880008d 	sth	r2,2(r7)
 400a35c:	1014d43a 	srli	r10,r2,16
 400a360:	39c00104 	addi	r7,r7,4
 400a364:	42ffed36 	bltu	r8,r11,400a31c <__multiply+0xc4>
 400a368:	3a800015 	stw	r10,0(r7)
 400a36c:	30800017 	ldw	r2,0(r6)
 400a370:	1012d43a 	srli	r9,r2,16
 400a374:	48001926 	beq	r9,zero,400a3dc <__multiply+0x184>
 400a378:	60800017 	ldw	r2,0(r12)
 400a37c:	6811883a 	mov	r8,r13
 400a380:	600f883a 	mov	r7,r12
 400a384:	0015883a 	mov	r10,zero
 400a388:	100b883a 	mov	r5,r2
 400a38c:	41000017 	ldw	r4,0(r8)
 400a390:	2806d43a 	srli	r3,r5,16
 400a394:	3880000d 	sth	r2,0(r7)
 400a398:	20bfffcc 	andi	r2,r4,65535
 400a39c:	4885383a 	mul	r2,r9,r2
 400a3a0:	50c7883a 	add	r3,r10,r3
 400a3a4:	2008d43a 	srli	r4,r4,16
 400a3a8:	10c5883a 	add	r2,r2,r3
 400a3ac:	3880008d 	sth	r2,2(r7)
 400a3b0:	39c00104 	addi	r7,r7,4
 400a3b4:	39400017 	ldw	r5,0(r7)
 400a3b8:	4909383a 	mul	r4,r9,r4
 400a3bc:	1004d43a 	srli	r2,r2,16
 400a3c0:	28ffffcc 	andi	r3,r5,65535
 400a3c4:	20c9883a 	add	r4,r4,r3
 400a3c8:	1105883a 	add	r2,r2,r4
 400a3cc:	42000104 	addi	r8,r8,4
 400a3d0:	1014d43a 	srli	r10,r2,16
 400a3d4:	42ffed36 	bltu	r8,r11,400a38c <__multiply+0x134>
 400a3d8:	38800015 	stw	r2,0(r7)
 400a3dc:	31800104 	addi	r6,r6,4
 400a3e0:	33c0022e 	bgeu	r6,r15,400a3ec <__multiply+0x194>
 400a3e4:	63000104 	addi	r12,r12,4
 400a3e8:	003fc606 	br	400a304 <__multiply+0xac>
 400a3ec:	0400090e 	bge	zero,r16,400a414 <__multiply+0x1bc>
 400a3f0:	70bfff17 	ldw	r2,-4(r14)
 400a3f4:	70ffff04 	addi	r3,r14,-4
 400a3f8:	10000326 	beq	r2,zero,400a408 <__multiply+0x1b0>
 400a3fc:	00000506 	br	400a414 <__multiply+0x1bc>
 400a400:	18800017 	ldw	r2,0(r3)
 400a404:	1000031e 	bne	r2,zero,400a414 <__multiply+0x1bc>
 400a408:	843fffc4 	addi	r16,r16,-1
 400a40c:	18ffff04 	addi	r3,r3,-4
 400a410:	803ffb1e 	bne	r16,zero,400a400 <__multiply+0x1a8>
 400a414:	a805883a 	mov	r2,r21
 400a418:	ac000415 	stw	r16,16(r21)
 400a41c:	dfc00617 	ldw	ra,24(sp)
 400a420:	dd400517 	ldw	r21,20(sp)
 400a424:	dd000417 	ldw	r20,16(sp)
 400a428:	dcc00317 	ldw	r19,12(sp)
 400a42c:	dc800217 	ldw	r18,8(sp)
 400a430:	dc400117 	ldw	r17,4(sp)
 400a434:	dc000017 	ldw	r16,0(sp)
 400a438:	dec00704 	addi	sp,sp,28
 400a43c:	f800283a 	ret

0400a440 <__i2b>:
 400a440:	defffd04 	addi	sp,sp,-12
 400a444:	dc000015 	stw	r16,0(sp)
 400a448:	04000044 	movi	r16,1
 400a44c:	dc800115 	stw	r18,4(sp)
 400a450:	2825883a 	mov	r18,r5
 400a454:	800b883a 	mov	r5,r16
 400a458:	dfc00215 	stw	ra,8(sp)
 400a45c:	4009d480 	call	4009d48 <_Balloc>
 400a460:	14000415 	stw	r16,16(r2)
 400a464:	14800515 	stw	r18,20(r2)
 400a468:	dfc00217 	ldw	ra,8(sp)
 400a46c:	dc800117 	ldw	r18,4(sp)
 400a470:	dc000017 	ldw	r16,0(sp)
 400a474:	dec00304 	addi	sp,sp,12
 400a478:	f800283a 	ret

0400a47c <__multadd>:
 400a47c:	defffa04 	addi	sp,sp,-24
 400a480:	dc800215 	stw	r18,8(sp)
 400a484:	2c800417 	ldw	r18,16(r5)
 400a488:	dd000415 	stw	r20,16(sp)
 400a48c:	dcc00315 	stw	r19,12(sp)
 400a490:	dc000015 	stw	r16,0(sp)
 400a494:	dfc00515 	stw	ra,20(sp)
 400a498:	3821883a 	mov	r16,r7
 400a49c:	dc400115 	stw	r17,4(sp)
 400a4a0:	2827883a 	mov	r19,r5
 400a4a4:	2029883a 	mov	r20,r4
 400a4a8:	2a000504 	addi	r8,r5,20
 400a4ac:	000f883a 	mov	r7,zero
 400a4b0:	40800017 	ldw	r2,0(r8)
 400a4b4:	39c00044 	addi	r7,r7,1
 400a4b8:	10ffffcc 	andi	r3,r2,65535
 400a4bc:	1987383a 	mul	r3,r3,r6
 400a4c0:	1004d43a 	srli	r2,r2,16
 400a4c4:	1c07883a 	add	r3,r3,r16
 400a4c8:	180ad43a 	srli	r5,r3,16
 400a4cc:	1185383a 	mul	r2,r2,r6
 400a4d0:	18ffffcc 	andi	r3,r3,65535
 400a4d4:	1145883a 	add	r2,r2,r5
 400a4d8:	1008943a 	slli	r4,r2,16
 400a4dc:	1020d43a 	srli	r16,r2,16
 400a4e0:	20c9883a 	add	r4,r4,r3
 400a4e4:	41000015 	stw	r4,0(r8)
 400a4e8:	42000104 	addi	r8,r8,4
 400a4ec:	3cbff016 	blt	r7,r18,400a4b0 <__multadd+0x34>
 400a4f0:	80000826 	beq	r16,zero,400a514 <__multadd+0x98>
 400a4f4:	98800217 	ldw	r2,8(r19)
 400a4f8:	90800f0e 	bge	r18,r2,400a538 <__multadd+0xbc>
 400a4fc:	9485883a 	add	r2,r18,r18
 400a500:	1085883a 	add	r2,r2,r2
 400a504:	14c5883a 	add	r2,r2,r19
 400a508:	90c00044 	addi	r3,r18,1
 400a50c:	14000515 	stw	r16,20(r2)
 400a510:	98c00415 	stw	r3,16(r19)
 400a514:	9805883a 	mov	r2,r19
 400a518:	dfc00517 	ldw	ra,20(sp)
 400a51c:	dd000417 	ldw	r20,16(sp)
 400a520:	dcc00317 	ldw	r19,12(sp)
 400a524:	dc800217 	ldw	r18,8(sp)
 400a528:	dc400117 	ldw	r17,4(sp)
 400a52c:	dc000017 	ldw	r16,0(sp)
 400a530:	dec00604 	addi	sp,sp,24
 400a534:	f800283a 	ret
 400a538:	99400117 	ldw	r5,4(r19)
 400a53c:	a009883a 	mov	r4,r20
 400a540:	29400044 	addi	r5,r5,1
 400a544:	4009d480 	call	4009d48 <_Balloc>
 400a548:	99800417 	ldw	r6,16(r19)
 400a54c:	99400304 	addi	r5,r19,12
 400a550:	11000304 	addi	r4,r2,12
 400a554:	318d883a 	add	r6,r6,r6
 400a558:	318d883a 	add	r6,r6,r6
 400a55c:	31800204 	addi	r6,r6,8
 400a560:	1023883a 	mov	r17,r2
 400a564:	40096480 	call	4009648 <memcpy>
 400a568:	980b883a 	mov	r5,r19
 400a56c:	a009883a 	mov	r4,r20
 400a570:	40097c80 	call	40097c8 <_Bfree>
 400a574:	8827883a 	mov	r19,r17
 400a578:	003fe006 	br	400a4fc <__multadd+0x80>

0400a57c <__pow5mult>:
 400a57c:	defffa04 	addi	sp,sp,-24
 400a580:	308000cc 	andi	r2,r6,3
 400a584:	dd000415 	stw	r20,16(sp)
 400a588:	dcc00315 	stw	r19,12(sp)
 400a58c:	dc000015 	stw	r16,0(sp)
 400a590:	dfc00515 	stw	ra,20(sp)
 400a594:	dc800215 	stw	r18,8(sp)
 400a598:	dc400115 	stw	r17,4(sp)
 400a59c:	3021883a 	mov	r16,r6
 400a5a0:	2027883a 	mov	r19,r4
 400a5a4:	2829883a 	mov	r20,r5
 400a5a8:	10002b1e 	bne	r2,zero,400a658 <__pow5mult+0xdc>
 400a5ac:	8025d0ba 	srai	r18,r16,2
 400a5b0:	90001b26 	beq	r18,zero,400a620 <__pow5mult+0xa4>
 400a5b4:	9c001217 	ldw	r16,72(r19)
 400a5b8:	8000081e 	bne	r16,zero,400a5dc <__pow5mult+0x60>
 400a5bc:	00003006 	br	400a680 <__pow5mult+0x104>
 400a5c0:	800b883a 	mov	r5,r16
 400a5c4:	800d883a 	mov	r6,r16
 400a5c8:	9809883a 	mov	r4,r19
 400a5cc:	90001426 	beq	r18,zero,400a620 <__pow5mult+0xa4>
 400a5d0:	80800017 	ldw	r2,0(r16)
 400a5d4:	10001b26 	beq	r2,zero,400a644 <__pow5mult+0xc8>
 400a5d8:	1021883a 	mov	r16,r2
 400a5dc:	9080004c 	andi	r2,r18,1
 400a5e0:	1005003a 	cmpeq	r2,r2,zero
 400a5e4:	9025d07a 	srai	r18,r18,1
 400a5e8:	800d883a 	mov	r6,r16
 400a5ec:	9809883a 	mov	r4,r19
 400a5f0:	a00b883a 	mov	r5,r20
 400a5f4:	103ff21e 	bne	r2,zero,400a5c0 <__pow5mult+0x44>
 400a5f8:	400a2580 	call	400a258 <__multiply>
 400a5fc:	a00b883a 	mov	r5,r20
 400a600:	9809883a 	mov	r4,r19
 400a604:	1023883a 	mov	r17,r2
 400a608:	40097c80 	call	40097c8 <_Bfree>
 400a60c:	8829883a 	mov	r20,r17
 400a610:	800b883a 	mov	r5,r16
 400a614:	800d883a 	mov	r6,r16
 400a618:	9809883a 	mov	r4,r19
 400a61c:	903fec1e 	bne	r18,zero,400a5d0 <__pow5mult+0x54>
 400a620:	a005883a 	mov	r2,r20
 400a624:	dfc00517 	ldw	ra,20(sp)
 400a628:	dd000417 	ldw	r20,16(sp)
 400a62c:	dcc00317 	ldw	r19,12(sp)
 400a630:	dc800217 	ldw	r18,8(sp)
 400a634:	dc400117 	ldw	r17,4(sp)
 400a638:	dc000017 	ldw	r16,0(sp)
 400a63c:	dec00604 	addi	sp,sp,24
 400a640:	f800283a 	ret
 400a644:	400a2580 	call	400a258 <__multiply>
 400a648:	80800015 	stw	r2,0(r16)
 400a64c:	1021883a 	mov	r16,r2
 400a650:	10000015 	stw	zero,0(r2)
 400a654:	003fe106 	br	400a5dc <__pow5mult+0x60>
 400a658:	1085883a 	add	r2,r2,r2
 400a65c:	00c100f4 	movhi	r3,1027
 400a660:	18cb4a04 	addi	r3,r3,11560
 400a664:	1085883a 	add	r2,r2,r2
 400a668:	10c5883a 	add	r2,r2,r3
 400a66c:	11bfff17 	ldw	r6,-4(r2)
 400a670:	000f883a 	mov	r7,zero
 400a674:	400a47c0 	call	400a47c <__multadd>
 400a678:	1029883a 	mov	r20,r2
 400a67c:	003fcb06 	br	400a5ac <__pow5mult+0x30>
 400a680:	9809883a 	mov	r4,r19
 400a684:	01409c44 	movi	r5,625
 400a688:	400a4400 	call	400a440 <__i2b>
 400a68c:	98801215 	stw	r2,72(r19)
 400a690:	1021883a 	mov	r16,r2
 400a694:	10000015 	stw	zero,0(r2)
 400a698:	003fd006 	br	400a5dc <__pow5mult+0x60>

0400a69c <__s2b>:
 400a69c:	defff904 	addi	sp,sp,-28
 400a6a0:	dcc00315 	stw	r19,12(sp)
 400a6a4:	dc800215 	stw	r18,8(sp)
 400a6a8:	2827883a 	mov	r19,r5
 400a6ac:	2025883a 	mov	r18,r4
 400a6b0:	01400244 	movi	r5,9
 400a6b4:	39000204 	addi	r4,r7,8
 400a6b8:	dd000415 	stw	r20,16(sp)
 400a6bc:	dc400115 	stw	r17,4(sp)
 400a6c0:	dfc00615 	stw	ra,24(sp)
 400a6c4:	dd400515 	stw	r21,20(sp)
 400a6c8:	dc000015 	stw	r16,0(sp)
 400a6cc:	3829883a 	mov	r20,r7
 400a6d0:	3023883a 	mov	r17,r6
 400a6d4:	400d76c0 	call	400d76c <__divsi3>
 400a6d8:	00c00044 	movi	r3,1
 400a6dc:	1880350e 	bge	r3,r2,400a7b4 <__s2b+0x118>
 400a6e0:	000b883a 	mov	r5,zero
 400a6e4:	18c7883a 	add	r3,r3,r3
 400a6e8:	29400044 	addi	r5,r5,1
 400a6ec:	18bffd16 	blt	r3,r2,400a6e4 <__s2b+0x48>
 400a6f0:	9009883a 	mov	r4,r18
 400a6f4:	4009d480 	call	4009d48 <_Balloc>
 400a6f8:	1011883a 	mov	r8,r2
 400a6fc:	d8800717 	ldw	r2,28(sp)
 400a700:	00c00044 	movi	r3,1
 400a704:	01800244 	movi	r6,9
 400a708:	40800515 	stw	r2,20(r8)
 400a70c:	40c00415 	stw	r3,16(r8)
 400a710:	3440260e 	bge	r6,r17,400a7ac <__s2b+0x110>
 400a714:	3021883a 	mov	r16,r6
 400a718:	99ab883a 	add	r21,r19,r6
 400a71c:	9c05883a 	add	r2,r19,r16
 400a720:	11c00007 	ldb	r7,0(r2)
 400a724:	400b883a 	mov	r5,r8
 400a728:	9009883a 	mov	r4,r18
 400a72c:	39fff404 	addi	r7,r7,-48
 400a730:	01800284 	movi	r6,10
 400a734:	400a47c0 	call	400a47c <__multadd>
 400a738:	84000044 	addi	r16,r16,1
 400a73c:	1011883a 	mov	r8,r2
 400a740:	8c3ff61e 	bne	r17,r16,400a71c <__s2b+0x80>
 400a744:	ac45883a 	add	r2,r21,r17
 400a748:	117ffe04 	addi	r5,r2,-8
 400a74c:	880d883a 	mov	r6,r17
 400a750:	35000c0e 	bge	r6,r20,400a784 <__s2b+0xe8>
 400a754:	a185c83a 	sub	r2,r20,r6
 400a758:	2821883a 	mov	r16,r5
 400a75c:	28a3883a 	add	r17,r5,r2
 400a760:	81c00007 	ldb	r7,0(r16)
 400a764:	400b883a 	mov	r5,r8
 400a768:	9009883a 	mov	r4,r18
 400a76c:	39fff404 	addi	r7,r7,-48
 400a770:	01800284 	movi	r6,10
 400a774:	400a47c0 	call	400a47c <__multadd>
 400a778:	84000044 	addi	r16,r16,1
 400a77c:	1011883a 	mov	r8,r2
 400a780:	847ff71e 	bne	r16,r17,400a760 <__s2b+0xc4>
 400a784:	4005883a 	mov	r2,r8
 400a788:	dfc00617 	ldw	ra,24(sp)
 400a78c:	dd400517 	ldw	r21,20(sp)
 400a790:	dd000417 	ldw	r20,16(sp)
 400a794:	dcc00317 	ldw	r19,12(sp)
 400a798:	dc800217 	ldw	r18,8(sp)
 400a79c:	dc400117 	ldw	r17,4(sp)
 400a7a0:	dc000017 	ldw	r16,0(sp)
 400a7a4:	dec00704 	addi	sp,sp,28
 400a7a8:	f800283a 	ret
 400a7ac:	99400284 	addi	r5,r19,10
 400a7b0:	003fe706 	br	400a750 <__s2b+0xb4>
 400a7b4:	000b883a 	mov	r5,zero
 400a7b8:	003fcd06 	br	400a6f0 <__s2b+0x54>

0400a7bc <putc>:
 400a7bc:	defffc04 	addi	sp,sp,-16
 400a7c0:	dc800215 	stw	r18,8(sp)
 400a7c4:	04810134 	movhi	r18,1028
 400a7c8:	94a0f704 	addi	r18,r18,-31780
 400a7cc:	90c00017 	ldw	r3,0(r18)
 400a7d0:	dc400115 	stw	r17,4(sp)
 400a7d4:	dc000015 	stw	r16,0(sp)
 400a7d8:	dfc00315 	stw	ra,12(sp)
 400a7dc:	2023883a 	mov	r17,r4
 400a7e0:	2821883a 	mov	r16,r5
 400a7e4:	18000226 	beq	r3,zero,400a7f0 <putc+0x34>
 400a7e8:	18800e17 	ldw	r2,56(r3)
 400a7ec:	10001126 	beq	r2,zero,400a834 <putc+0x78>
 400a7f0:	80800217 	ldw	r2,8(r16)
 400a7f4:	10ffffc4 	addi	r3,r2,-1
 400a7f8:	80c00215 	stw	r3,8(r16)
 400a7fc:	18001316 	blt	r3,zero,400a84c <putc+0x90>
 400a800:	80800017 	ldw	r2,0(r16)
 400a804:	14400005 	stb	r17,0(r2)
 400a808:	80c00017 	ldw	r3,0(r16)
 400a80c:	18800044 	addi	r2,r3,1
 400a810:	18c00003 	ldbu	r3,0(r3)
 400a814:	80800015 	stw	r2,0(r16)
 400a818:	1805883a 	mov	r2,r3
 400a81c:	dfc00317 	ldw	ra,12(sp)
 400a820:	dc800217 	ldw	r18,8(sp)
 400a824:	dc400117 	ldw	r17,4(sp)
 400a828:	dc000017 	ldw	r16,0(sp)
 400a82c:	dec00404 	addi	sp,sp,16
 400a830:	f800283a 	ret
 400a834:	1809883a 	mov	r4,r3
 400a838:	40084e80 	call	40084e8 <__sinit>
 400a83c:	80800217 	ldw	r2,8(r16)
 400a840:	10ffffc4 	addi	r3,r2,-1
 400a844:	80c00215 	stw	r3,8(r16)
 400a848:	183fed0e 	bge	r3,zero,400a800 <putc+0x44>
 400a84c:	80800617 	ldw	r2,24(r16)
 400a850:	18800f16 	blt	r3,r2,400a890 <putc+0xd4>
 400a854:	80800017 	ldw	r2,0(r16)
 400a858:	14400005 	stb	r17,0(r2)
 400a85c:	81000017 	ldw	r4,0(r16)
 400a860:	00800284 	movi	r2,10
 400a864:	20c00003 	ldbu	r3,0(r4)
 400a868:	18801226 	beq	r3,r2,400a8b4 <putc+0xf8>
 400a86c:	20800044 	addi	r2,r4,1
 400a870:	80800015 	stw	r2,0(r16)
 400a874:	1805883a 	mov	r2,r3
 400a878:	dfc00317 	ldw	ra,12(sp)
 400a87c:	dc800217 	ldw	r18,8(sp)
 400a880:	dc400117 	ldw	r17,4(sp)
 400a884:	dc000017 	ldw	r16,0(sp)
 400a888:	dec00404 	addi	sp,sp,16
 400a88c:	f800283a 	ret
 400a890:	91000017 	ldw	r4,0(r18)
 400a894:	880b883a 	mov	r5,r17
 400a898:	800d883a 	mov	r6,r16
 400a89c:	dfc00317 	ldw	ra,12(sp)
 400a8a0:	dc800217 	ldw	r18,8(sp)
 400a8a4:	dc400117 	ldw	r17,4(sp)
 400a8a8:	dc000017 	ldw	r16,0(sp)
 400a8ac:	dec00404 	addi	sp,sp,16
 400a8b0:	400b4581 	jmpi	400b458 <__swbuf_r>
 400a8b4:	91000017 	ldw	r4,0(r18)
 400a8b8:	180b883a 	mov	r5,r3
 400a8bc:	003ff606 	br	400a898 <putc+0xdc>

0400a8c0 <_putc_r>:
 400a8c0:	defffc04 	addi	sp,sp,-16
 400a8c4:	dc400215 	stw	r17,8(sp)
 400a8c8:	dc000115 	stw	r16,4(sp)
 400a8cc:	dfc00315 	stw	ra,12(sp)
 400a8d0:	2021883a 	mov	r16,r4
 400a8d4:	2823883a 	mov	r17,r5
 400a8d8:	20000226 	beq	r4,zero,400a8e4 <_putc_r+0x24>
 400a8dc:	20800e17 	ldw	r2,56(r4)
 400a8e0:	10001026 	beq	r2,zero,400a924 <_putc_r+0x64>
 400a8e4:	30800217 	ldw	r2,8(r6)
 400a8e8:	10ffffc4 	addi	r3,r2,-1
 400a8ec:	30c00215 	stw	r3,8(r6)
 400a8f0:	18001316 	blt	r3,zero,400a940 <_putc_r+0x80>
 400a8f4:	30800017 	ldw	r2,0(r6)
 400a8f8:	14400005 	stb	r17,0(r2)
 400a8fc:	30c00017 	ldw	r3,0(r6)
 400a900:	18800044 	addi	r2,r3,1
 400a904:	18c00003 	ldbu	r3,0(r3)
 400a908:	30800015 	stw	r2,0(r6)
 400a90c:	1805883a 	mov	r2,r3
 400a910:	dfc00317 	ldw	ra,12(sp)
 400a914:	dc400217 	ldw	r17,8(sp)
 400a918:	dc000117 	ldw	r16,4(sp)
 400a91c:	dec00404 	addi	sp,sp,16
 400a920:	f800283a 	ret
 400a924:	d9800015 	stw	r6,0(sp)
 400a928:	40084e80 	call	40084e8 <__sinit>
 400a92c:	d9800017 	ldw	r6,0(sp)
 400a930:	30800217 	ldw	r2,8(r6)
 400a934:	10ffffc4 	addi	r3,r2,-1
 400a938:	30c00215 	stw	r3,8(r6)
 400a93c:	183fed0e 	bge	r3,zero,400a8f4 <_putc_r+0x34>
 400a940:	30800617 	ldw	r2,24(r6)
 400a944:	18800e16 	blt	r3,r2,400a980 <_putc_r+0xc0>
 400a948:	30800017 	ldw	r2,0(r6)
 400a94c:	14400005 	stb	r17,0(r2)
 400a950:	31000017 	ldw	r4,0(r6)
 400a954:	00800284 	movi	r2,10
 400a958:	20c00003 	ldbu	r3,0(r4)
 400a95c:	18800f26 	beq	r3,r2,400a99c <_putc_r+0xdc>
 400a960:	20800044 	addi	r2,r4,1
 400a964:	30800015 	stw	r2,0(r6)
 400a968:	1805883a 	mov	r2,r3
 400a96c:	dfc00317 	ldw	ra,12(sp)
 400a970:	dc400217 	ldw	r17,8(sp)
 400a974:	dc000117 	ldw	r16,4(sp)
 400a978:	dec00404 	addi	sp,sp,16
 400a97c:	f800283a 	ret
 400a980:	8009883a 	mov	r4,r16
 400a984:	880b883a 	mov	r5,r17
 400a988:	dfc00317 	ldw	ra,12(sp)
 400a98c:	dc400217 	ldw	r17,8(sp)
 400a990:	dc000117 	ldw	r16,4(sp)
 400a994:	dec00404 	addi	sp,sp,16
 400a998:	400b4581 	jmpi	400b458 <__swbuf_r>
 400a99c:	8009883a 	mov	r4,r16
 400a9a0:	180b883a 	mov	r5,r3
 400a9a4:	003ff806 	br	400a988 <_putc_r+0xc8>

0400a9a8 <_realloc_r>:
 400a9a8:	defff404 	addi	sp,sp,-48
 400a9ac:	dd800815 	stw	r22,32(sp)
 400a9b0:	dc800415 	stw	r18,16(sp)
 400a9b4:	dc400315 	stw	r17,12(sp)
 400a9b8:	dfc00b15 	stw	ra,44(sp)
 400a9bc:	df000a15 	stw	fp,40(sp)
 400a9c0:	ddc00915 	stw	r23,36(sp)
 400a9c4:	dd400715 	stw	r21,28(sp)
 400a9c8:	dd000615 	stw	r20,24(sp)
 400a9cc:	dcc00515 	stw	r19,20(sp)
 400a9d0:	dc000215 	stw	r16,8(sp)
 400a9d4:	2825883a 	mov	r18,r5
 400a9d8:	3023883a 	mov	r17,r6
 400a9dc:	202d883a 	mov	r22,r4
 400a9e0:	2800c926 	beq	r5,zero,400ad08 <_realloc_r+0x360>
 400a9e4:	400e7b80 	call	400e7b8 <__malloc_lock>
 400a9e8:	943ffe04 	addi	r16,r18,-8
 400a9ec:	88c002c4 	addi	r3,r17,11
 400a9f0:	00800584 	movi	r2,22
 400a9f4:	82000117 	ldw	r8,4(r16)
 400a9f8:	10c01b2e 	bgeu	r2,r3,400aa68 <_realloc_r+0xc0>
 400a9fc:	00bffe04 	movi	r2,-8
 400aa00:	188e703a 	and	r7,r3,r2
 400aa04:	3839883a 	mov	fp,r7
 400aa08:	38001a16 	blt	r7,zero,400aa74 <_realloc_r+0xcc>
 400aa0c:	e4401936 	bltu	fp,r17,400aa74 <_realloc_r+0xcc>
 400aa10:	013fff04 	movi	r4,-4
 400aa14:	4126703a 	and	r19,r8,r4
 400aa18:	99c02616 	blt	r19,r7,400aab4 <_realloc_r+0x10c>
 400aa1c:	802b883a 	mov	r21,r16
 400aa20:	9829883a 	mov	r20,r19
 400aa24:	84000204 	addi	r16,r16,8
 400aa28:	a80f883a 	mov	r7,r21
 400aa2c:	a70dc83a 	sub	r6,r20,fp
 400aa30:	008003c4 	movi	r2,15
 400aa34:	1180c136 	bltu	r2,r6,400ad3c <_realloc_r+0x394>
 400aa38:	38800117 	ldw	r2,4(r7)
 400aa3c:	a549883a 	add	r4,r20,r21
 400aa40:	1080004c 	andi	r2,r2,1
 400aa44:	a084b03a 	or	r2,r20,r2
 400aa48:	38800115 	stw	r2,4(r7)
 400aa4c:	20c00117 	ldw	r3,4(r4)
 400aa50:	18c00054 	ori	r3,r3,1
 400aa54:	20c00115 	stw	r3,4(r4)
 400aa58:	b009883a 	mov	r4,r22
 400aa5c:	400e7580 	call	400e758 <__malloc_unlock>
 400aa60:	8023883a 	mov	r17,r16
 400aa64:	00000606 	br	400aa80 <_realloc_r+0xd8>
 400aa68:	01c00404 	movi	r7,16
 400aa6c:	3839883a 	mov	fp,r7
 400aa70:	e47fe72e 	bgeu	fp,r17,400aa10 <_realloc_r+0x68>
 400aa74:	00800304 	movi	r2,12
 400aa78:	0023883a 	mov	r17,zero
 400aa7c:	b0800015 	stw	r2,0(r22)
 400aa80:	8805883a 	mov	r2,r17
 400aa84:	dfc00b17 	ldw	ra,44(sp)
 400aa88:	df000a17 	ldw	fp,40(sp)
 400aa8c:	ddc00917 	ldw	r23,36(sp)
 400aa90:	dd800817 	ldw	r22,32(sp)
 400aa94:	dd400717 	ldw	r21,28(sp)
 400aa98:	dd000617 	ldw	r20,24(sp)
 400aa9c:	dcc00517 	ldw	r19,20(sp)
 400aaa0:	dc800417 	ldw	r18,16(sp)
 400aaa4:	dc400317 	ldw	r17,12(sp)
 400aaa8:	dc000217 	ldw	r16,8(sp)
 400aaac:	dec00c04 	addi	sp,sp,48
 400aab0:	f800283a 	ret
 400aab4:	008100f4 	movhi	r2,1027
 400aab8:	109ac304 	addi	r2,r2,27404
 400aabc:	12400217 	ldw	r9,8(r2)
 400aac0:	84cd883a 	add	r6,r16,r19
 400aac4:	802b883a 	mov	r21,r16
 400aac8:	3240b926 	beq	r6,r9,400adb0 <_realloc_r+0x408>
 400aacc:	31400117 	ldw	r5,4(r6)
 400aad0:	00bfff84 	movi	r2,-2
 400aad4:	2884703a 	and	r2,r5,r2
 400aad8:	1185883a 	add	r2,r2,r6
 400aadc:	10c00117 	ldw	r3,4(r2)
 400aae0:	18c0004c 	andi	r3,r3,1
 400aae4:	1807003a 	cmpeq	r3,r3,zero
 400aae8:	1800a326 	beq	r3,zero,400ad78 <_realloc_r+0x3d0>
 400aaec:	2908703a 	and	r4,r5,r4
 400aaf0:	9929883a 	add	r20,r19,r4
 400aaf4:	a1c0a30e 	bge	r20,r7,400ad84 <_realloc_r+0x3dc>
 400aaf8:	4080004c 	andi	r2,r8,1
 400aafc:	1000551e 	bne	r2,zero,400ac54 <_realloc_r+0x2ac>
 400ab00:	80800017 	ldw	r2,0(r16)
 400ab04:	80afc83a 	sub	r23,r16,r2
 400ab08:	b8c00117 	ldw	r3,4(r23)
 400ab0c:	00bfff04 	movi	r2,-4
 400ab10:	1884703a 	and	r2,r3,r2
 400ab14:	30002e26 	beq	r6,zero,400abd0 <_realloc_r+0x228>
 400ab18:	3240b926 	beq	r6,r9,400ae00 <_realloc_r+0x458>
 400ab1c:	98a9883a 	add	r20,r19,r2
 400ab20:	2509883a 	add	r4,r4,r20
 400ab24:	d9000015 	stw	r4,0(sp)
 400ab28:	21c02a16 	blt	r4,r7,400abd4 <_realloc_r+0x22c>
 400ab2c:	30800317 	ldw	r2,12(r6)
 400ab30:	30c00217 	ldw	r3,8(r6)
 400ab34:	01400904 	movi	r5,36
 400ab38:	99bfff04 	addi	r6,r19,-4
 400ab3c:	18800315 	stw	r2,12(r3)
 400ab40:	10c00215 	stw	r3,8(r2)
 400ab44:	b9000317 	ldw	r4,12(r23)
 400ab48:	b8800217 	ldw	r2,8(r23)
 400ab4c:	b82b883a 	mov	r21,r23
 400ab50:	bc000204 	addi	r16,r23,8
 400ab54:	20800215 	stw	r2,8(r4)
 400ab58:	11000315 	stw	r4,12(r2)
 400ab5c:	2980e436 	bltu	r5,r6,400aef0 <_realloc_r+0x548>
 400ab60:	008004c4 	movi	r2,19
 400ab64:	9009883a 	mov	r4,r18
 400ab68:	8011883a 	mov	r8,r16
 400ab6c:	11800f2e 	bgeu	r2,r6,400abac <_realloc_r+0x204>
 400ab70:	90800017 	ldw	r2,0(r18)
 400ab74:	ba000404 	addi	r8,r23,16
 400ab78:	91000204 	addi	r4,r18,8
 400ab7c:	b8800215 	stw	r2,8(r23)
 400ab80:	90c00117 	ldw	r3,4(r18)
 400ab84:	008006c4 	movi	r2,27
 400ab88:	b8c00315 	stw	r3,12(r23)
 400ab8c:	1180072e 	bgeu	r2,r6,400abac <_realloc_r+0x204>
 400ab90:	90c00217 	ldw	r3,8(r18)
 400ab94:	ba000604 	addi	r8,r23,24
 400ab98:	91000404 	addi	r4,r18,16
 400ab9c:	b8c00415 	stw	r3,16(r23)
 400aba0:	90800317 	ldw	r2,12(r18)
 400aba4:	b8800515 	stw	r2,20(r23)
 400aba8:	3140e726 	beq	r6,r5,400af48 <_realloc_r+0x5a0>
 400abac:	20800017 	ldw	r2,0(r4)
 400abb0:	dd000017 	ldw	r20,0(sp)
 400abb4:	b80f883a 	mov	r7,r23
 400abb8:	40800015 	stw	r2,0(r8)
 400abbc:	20c00117 	ldw	r3,4(r4)
 400abc0:	40c00115 	stw	r3,4(r8)
 400abc4:	20800217 	ldw	r2,8(r4)
 400abc8:	40800215 	stw	r2,8(r8)
 400abcc:	003f9706 	br	400aa2c <_realloc_r+0x84>
 400abd0:	98a9883a 	add	r20,r19,r2
 400abd4:	a1c01f16 	blt	r20,r7,400ac54 <_realloc_r+0x2ac>
 400abd8:	b8c00317 	ldw	r3,12(r23)
 400abdc:	b8800217 	ldw	r2,8(r23)
 400abe0:	99bfff04 	addi	r6,r19,-4
 400abe4:	01400904 	movi	r5,36
 400abe8:	b82b883a 	mov	r21,r23
 400abec:	18800215 	stw	r2,8(r3)
 400abf0:	10c00315 	stw	r3,12(r2)
 400abf4:	bc000204 	addi	r16,r23,8
 400abf8:	2980c336 	bltu	r5,r6,400af08 <_realloc_r+0x560>
 400abfc:	008004c4 	movi	r2,19
 400ac00:	9009883a 	mov	r4,r18
 400ac04:	8011883a 	mov	r8,r16
 400ac08:	11800f2e 	bgeu	r2,r6,400ac48 <_realloc_r+0x2a0>
 400ac0c:	90800017 	ldw	r2,0(r18)
 400ac10:	ba000404 	addi	r8,r23,16
 400ac14:	91000204 	addi	r4,r18,8
 400ac18:	b8800215 	stw	r2,8(r23)
 400ac1c:	90c00117 	ldw	r3,4(r18)
 400ac20:	008006c4 	movi	r2,27
 400ac24:	b8c00315 	stw	r3,12(r23)
 400ac28:	1180072e 	bgeu	r2,r6,400ac48 <_realloc_r+0x2a0>
 400ac2c:	90c00217 	ldw	r3,8(r18)
 400ac30:	ba000604 	addi	r8,r23,24
 400ac34:	91000404 	addi	r4,r18,16
 400ac38:	b8c00415 	stw	r3,16(r23)
 400ac3c:	90800317 	ldw	r2,12(r18)
 400ac40:	b8800515 	stw	r2,20(r23)
 400ac44:	3140c726 	beq	r6,r5,400af64 <_realloc_r+0x5bc>
 400ac48:	20800017 	ldw	r2,0(r4)
 400ac4c:	b80f883a 	mov	r7,r23
 400ac50:	003fd906 	br	400abb8 <_realloc_r+0x210>
 400ac54:	880b883a 	mov	r5,r17
 400ac58:	b009883a 	mov	r4,r22
 400ac5c:	4001f600 	call	4001f60 <_malloc_r>
 400ac60:	1023883a 	mov	r17,r2
 400ac64:	10002526 	beq	r2,zero,400acfc <_realloc_r+0x354>
 400ac68:	80800117 	ldw	r2,4(r16)
 400ac6c:	00ffff84 	movi	r3,-2
 400ac70:	893ffe04 	addi	r4,r17,-8
 400ac74:	10c4703a 	and	r2,r2,r3
 400ac78:	8085883a 	add	r2,r16,r2
 400ac7c:	20809526 	beq	r4,r2,400aed4 <_realloc_r+0x52c>
 400ac80:	99bfff04 	addi	r6,r19,-4
 400ac84:	01c00904 	movi	r7,36
 400ac88:	39804536 	bltu	r7,r6,400ada0 <_realloc_r+0x3f8>
 400ac8c:	008004c4 	movi	r2,19
 400ac90:	9009883a 	mov	r4,r18
 400ac94:	880b883a 	mov	r5,r17
 400ac98:	11800f2e 	bgeu	r2,r6,400acd8 <_realloc_r+0x330>
 400ac9c:	90800017 	ldw	r2,0(r18)
 400aca0:	89400204 	addi	r5,r17,8
 400aca4:	91000204 	addi	r4,r18,8
 400aca8:	88800015 	stw	r2,0(r17)
 400acac:	90c00117 	ldw	r3,4(r18)
 400acb0:	008006c4 	movi	r2,27
 400acb4:	88c00115 	stw	r3,4(r17)
 400acb8:	1180072e 	bgeu	r2,r6,400acd8 <_realloc_r+0x330>
 400acbc:	90c00217 	ldw	r3,8(r18)
 400acc0:	89400404 	addi	r5,r17,16
 400acc4:	91000404 	addi	r4,r18,16
 400acc8:	88c00215 	stw	r3,8(r17)
 400accc:	90800317 	ldw	r2,12(r18)
 400acd0:	88800315 	stw	r2,12(r17)
 400acd4:	31c09126 	beq	r6,r7,400af1c <_realloc_r+0x574>
 400acd8:	20800017 	ldw	r2,0(r4)
 400acdc:	28800015 	stw	r2,0(r5)
 400ace0:	20c00117 	ldw	r3,4(r4)
 400ace4:	28c00115 	stw	r3,4(r5)
 400ace8:	20800217 	ldw	r2,8(r4)
 400acec:	28800215 	stw	r2,8(r5)
 400acf0:	900b883a 	mov	r5,r18
 400acf4:	b009883a 	mov	r4,r22
 400acf8:	40089b80 	call	40089b8 <_free_r>
 400acfc:	b009883a 	mov	r4,r22
 400ad00:	400e7580 	call	400e758 <__malloc_unlock>
 400ad04:	003f5e06 	br	400aa80 <_realloc_r+0xd8>
 400ad08:	300b883a 	mov	r5,r6
 400ad0c:	dfc00b17 	ldw	ra,44(sp)
 400ad10:	df000a17 	ldw	fp,40(sp)
 400ad14:	ddc00917 	ldw	r23,36(sp)
 400ad18:	dd800817 	ldw	r22,32(sp)
 400ad1c:	dd400717 	ldw	r21,28(sp)
 400ad20:	dd000617 	ldw	r20,24(sp)
 400ad24:	dcc00517 	ldw	r19,20(sp)
 400ad28:	dc800417 	ldw	r18,16(sp)
 400ad2c:	dc400317 	ldw	r17,12(sp)
 400ad30:	dc000217 	ldw	r16,8(sp)
 400ad34:	dec00c04 	addi	sp,sp,48
 400ad38:	4001f601 	jmpi	4001f60 <_malloc_r>
 400ad3c:	38800117 	ldw	r2,4(r7)
 400ad40:	e54b883a 	add	r5,fp,r21
 400ad44:	31000054 	ori	r4,r6,1
 400ad48:	1080004c 	andi	r2,r2,1
 400ad4c:	1704b03a 	or	r2,r2,fp
 400ad50:	38800115 	stw	r2,4(r7)
 400ad54:	29000115 	stw	r4,4(r5)
 400ad58:	2987883a 	add	r3,r5,r6
 400ad5c:	18800117 	ldw	r2,4(r3)
 400ad60:	29400204 	addi	r5,r5,8
 400ad64:	b009883a 	mov	r4,r22
 400ad68:	10800054 	ori	r2,r2,1
 400ad6c:	18800115 	stw	r2,4(r3)
 400ad70:	40089b80 	call	40089b8 <_free_r>
 400ad74:	003f3806 	br	400aa58 <_realloc_r+0xb0>
 400ad78:	000d883a 	mov	r6,zero
 400ad7c:	0009883a 	mov	r4,zero
 400ad80:	003f5d06 	br	400aaf8 <_realloc_r+0x150>
 400ad84:	30c00217 	ldw	r3,8(r6)
 400ad88:	30800317 	ldw	r2,12(r6)
 400ad8c:	800f883a 	mov	r7,r16
 400ad90:	84000204 	addi	r16,r16,8
 400ad94:	10c00215 	stw	r3,8(r2)
 400ad98:	18800315 	stw	r2,12(r3)
 400ad9c:	003f2306 	br	400aa2c <_realloc_r+0x84>
 400ada0:	8809883a 	mov	r4,r17
 400ada4:	900b883a 	mov	r5,r18
 400ada8:	40096e80 	call	40096e8 <memmove>
 400adac:	003fd006 	br	400acf0 <_realloc_r+0x348>
 400adb0:	30800117 	ldw	r2,4(r6)
 400adb4:	e0c00404 	addi	r3,fp,16
 400adb8:	1108703a 	and	r4,r2,r4
 400adbc:	9905883a 	add	r2,r19,r4
 400adc0:	10ff4d16 	blt	r2,r3,400aaf8 <_realloc_r+0x150>
 400adc4:	1705c83a 	sub	r2,r2,fp
 400adc8:	870b883a 	add	r5,r16,fp
 400adcc:	10800054 	ori	r2,r2,1
 400add0:	28800115 	stw	r2,4(r5)
 400add4:	80c00117 	ldw	r3,4(r16)
 400add8:	008100f4 	movhi	r2,1027
 400addc:	109ac304 	addi	r2,r2,27404
 400ade0:	b009883a 	mov	r4,r22
 400ade4:	18c0004c 	andi	r3,r3,1
 400ade8:	e0c6b03a 	or	r3,fp,r3
 400adec:	11400215 	stw	r5,8(r2)
 400adf0:	80c00115 	stw	r3,4(r16)
 400adf4:	400e7580 	call	400e758 <__malloc_unlock>
 400adf8:	84400204 	addi	r17,r16,8
 400adfc:	003f2006 	br	400aa80 <_realloc_r+0xd8>
 400ae00:	98a9883a 	add	r20,r19,r2
 400ae04:	2509883a 	add	r4,r4,r20
 400ae08:	e0800404 	addi	r2,fp,16
 400ae0c:	d9000115 	stw	r4,4(sp)
 400ae10:	20bf7016 	blt	r4,r2,400abd4 <_realloc_r+0x22c>
 400ae14:	b8c00317 	ldw	r3,12(r23)
 400ae18:	b8800217 	ldw	r2,8(r23)
 400ae1c:	99bfff04 	addi	r6,r19,-4
 400ae20:	01400904 	movi	r5,36
 400ae24:	18800215 	stw	r2,8(r3)
 400ae28:	10c00315 	stw	r3,12(r2)
 400ae2c:	bc400204 	addi	r17,r23,8
 400ae30:	29804136 	bltu	r5,r6,400af38 <_realloc_r+0x590>
 400ae34:	008004c4 	movi	r2,19
 400ae38:	9009883a 	mov	r4,r18
 400ae3c:	880f883a 	mov	r7,r17
 400ae40:	11800f2e 	bgeu	r2,r6,400ae80 <_realloc_r+0x4d8>
 400ae44:	90800017 	ldw	r2,0(r18)
 400ae48:	b9c00404 	addi	r7,r23,16
 400ae4c:	91000204 	addi	r4,r18,8
 400ae50:	b8800215 	stw	r2,8(r23)
 400ae54:	90c00117 	ldw	r3,4(r18)
 400ae58:	008006c4 	movi	r2,27
 400ae5c:	b8c00315 	stw	r3,12(r23)
 400ae60:	1180072e 	bgeu	r2,r6,400ae80 <_realloc_r+0x4d8>
 400ae64:	90c00217 	ldw	r3,8(r18)
 400ae68:	b9c00604 	addi	r7,r23,24
 400ae6c:	91000404 	addi	r4,r18,16
 400ae70:	b8c00415 	stw	r3,16(r23)
 400ae74:	90800317 	ldw	r2,12(r18)
 400ae78:	b8800515 	stw	r2,20(r23)
 400ae7c:	31404026 	beq	r6,r5,400af80 <_realloc_r+0x5d8>
 400ae80:	20800017 	ldw	r2,0(r4)
 400ae84:	38800015 	stw	r2,0(r7)
 400ae88:	20c00117 	ldw	r3,4(r4)
 400ae8c:	38c00115 	stw	r3,4(r7)
 400ae90:	20800217 	ldw	r2,8(r4)
 400ae94:	38800215 	stw	r2,8(r7)
 400ae98:	d8c00117 	ldw	r3,4(sp)
 400ae9c:	bf0b883a 	add	r5,r23,fp
 400aea0:	b009883a 	mov	r4,r22
 400aea4:	1f05c83a 	sub	r2,r3,fp
 400aea8:	10800054 	ori	r2,r2,1
 400aeac:	28800115 	stw	r2,4(r5)
 400aeb0:	b8c00117 	ldw	r3,4(r23)
 400aeb4:	008100f4 	movhi	r2,1027
 400aeb8:	109ac304 	addi	r2,r2,27404
 400aebc:	11400215 	stw	r5,8(r2)
 400aec0:	18c0004c 	andi	r3,r3,1
 400aec4:	e0c6b03a 	or	r3,fp,r3
 400aec8:	b8c00115 	stw	r3,4(r23)
 400aecc:	400e7580 	call	400e758 <__malloc_unlock>
 400aed0:	003eeb06 	br	400aa80 <_realloc_r+0xd8>
 400aed4:	20800117 	ldw	r2,4(r4)
 400aed8:	00ffff04 	movi	r3,-4
 400aedc:	800f883a 	mov	r7,r16
 400aee0:	10c4703a 	and	r2,r2,r3
 400aee4:	98a9883a 	add	r20,r19,r2
 400aee8:	84000204 	addi	r16,r16,8
 400aeec:	003ecf06 	br	400aa2c <_realloc_r+0x84>
 400aef0:	900b883a 	mov	r5,r18
 400aef4:	8009883a 	mov	r4,r16
 400aef8:	40096e80 	call	40096e8 <memmove>
 400aefc:	dd000017 	ldw	r20,0(sp)
 400af00:	b80f883a 	mov	r7,r23
 400af04:	003ec906 	br	400aa2c <_realloc_r+0x84>
 400af08:	900b883a 	mov	r5,r18
 400af0c:	8009883a 	mov	r4,r16
 400af10:	40096e80 	call	40096e8 <memmove>
 400af14:	b80f883a 	mov	r7,r23
 400af18:	003ec406 	br	400aa2c <_realloc_r+0x84>
 400af1c:	90c00417 	ldw	r3,16(r18)
 400af20:	89400604 	addi	r5,r17,24
 400af24:	91000604 	addi	r4,r18,24
 400af28:	88c00415 	stw	r3,16(r17)
 400af2c:	90800517 	ldw	r2,20(r18)
 400af30:	88800515 	stw	r2,20(r17)
 400af34:	003f6806 	br	400acd8 <_realloc_r+0x330>
 400af38:	900b883a 	mov	r5,r18
 400af3c:	8809883a 	mov	r4,r17
 400af40:	40096e80 	call	40096e8 <memmove>
 400af44:	003fd406 	br	400ae98 <_realloc_r+0x4f0>
 400af48:	90c00417 	ldw	r3,16(r18)
 400af4c:	91000604 	addi	r4,r18,24
 400af50:	ba000804 	addi	r8,r23,32
 400af54:	b8c00615 	stw	r3,24(r23)
 400af58:	90800517 	ldw	r2,20(r18)
 400af5c:	b8800715 	stw	r2,28(r23)
 400af60:	003f1206 	br	400abac <_realloc_r+0x204>
 400af64:	90c00417 	ldw	r3,16(r18)
 400af68:	91000604 	addi	r4,r18,24
 400af6c:	ba000804 	addi	r8,r23,32
 400af70:	b8c00615 	stw	r3,24(r23)
 400af74:	90800517 	ldw	r2,20(r18)
 400af78:	b8800715 	stw	r2,28(r23)
 400af7c:	003f3206 	br	400ac48 <_realloc_r+0x2a0>
 400af80:	90c00417 	ldw	r3,16(r18)
 400af84:	91000604 	addi	r4,r18,24
 400af88:	b9c00804 	addi	r7,r23,32
 400af8c:	b8c00615 	stw	r3,24(r23)
 400af90:	90800517 	ldw	r2,20(r18)
 400af94:	b8800715 	stw	r2,28(r23)
 400af98:	003fb906 	br	400ae80 <_realloc_r+0x4d8>

0400af9c <__isinfd>:
 400af9c:	200d883a 	mov	r6,r4
 400afa0:	0109c83a 	sub	r4,zero,r4
 400afa4:	2188b03a 	or	r4,r4,r6
 400afa8:	2008d7fa 	srli	r4,r4,31
 400afac:	00a00034 	movhi	r2,32768
 400afb0:	10bfffc4 	addi	r2,r2,-1
 400afb4:	1144703a 	and	r2,r2,r5
 400afb8:	2088b03a 	or	r4,r4,r2
 400afbc:	009ffc34 	movhi	r2,32752
 400afc0:	1105c83a 	sub	r2,r2,r4
 400afc4:	0087c83a 	sub	r3,zero,r2
 400afc8:	10c4b03a 	or	r2,r2,r3
 400afcc:	1004d7fa 	srli	r2,r2,31
 400afd0:	00c00044 	movi	r3,1
 400afd4:	1885c83a 	sub	r2,r3,r2
 400afd8:	f800283a 	ret

0400afdc <__isnand>:
 400afdc:	200d883a 	mov	r6,r4
 400afe0:	0109c83a 	sub	r4,zero,r4
 400afe4:	2188b03a 	or	r4,r4,r6
 400afe8:	2008d7fa 	srli	r4,r4,31
 400afec:	00a00034 	movhi	r2,32768
 400aff0:	10bfffc4 	addi	r2,r2,-1
 400aff4:	1144703a 	and	r2,r2,r5
 400aff8:	2088b03a 	or	r4,r4,r2
 400affc:	009ffc34 	movhi	r2,32752
 400b000:	1105c83a 	sub	r2,r2,r4
 400b004:	1004d7fa 	srli	r2,r2,31
 400b008:	f800283a 	ret

0400b00c <snprintf>:
 400b00c:	deffe404 	addi	sp,sp,-112
 400b010:	dc001815 	stw	r16,96(sp)
 400b014:	2011883a 	mov	r8,r4
 400b018:	2821883a 	mov	r16,r5
 400b01c:	dfc01a15 	stw	ra,104(sp)
 400b020:	dc401915 	stw	r17,100(sp)
 400b024:	d9c01b15 	stw	r7,108(sp)
 400b028:	01010134 	movhi	r4,1028
 400b02c:	2120f704 	addi	r4,r4,-31780
 400b030:	00ffffc4 	movi	r3,-1
 400b034:	24400017 	ldw	r17,0(r4)
 400b038:	28002016 	blt	r5,zero,400b0bc <snprintf+0xb0>
 400b03c:	0007883a 	mov	r3,zero
 400b040:	28000126 	beq	r5,zero,400b048 <snprintf+0x3c>
 400b044:	28ffffc4 	addi	r3,r5,-1
 400b048:	d8801b04 	addi	r2,sp,108
 400b04c:	21000017 	ldw	r4,0(r4)
 400b050:	d8800015 	stw	r2,0(sp)
 400b054:	100f883a 	mov	r7,r2
 400b058:	00808204 	movi	r2,520
 400b05c:	d880040d 	sth	r2,16(sp)
 400b060:	d9400104 	addi	r5,sp,4
 400b064:	00bfffc4 	movi	r2,-1
 400b068:	d8c00615 	stw	r3,24(sp)
 400b06c:	d8c00315 	stw	r3,12(sp)
 400b070:	da000515 	stw	r8,20(sp)
 400b074:	d880048d 	sth	r2,18(sp)
 400b078:	da000115 	stw	r8,4(sp)
 400b07c:	40048080 	call	4004808 <___vfprintf_internal_r>
 400b080:	1007883a 	mov	r3,r2
 400b084:	00bfffc4 	movi	r2,-1
 400b088:	18800916 	blt	r3,r2,400b0b0 <snprintf+0xa4>
 400b08c:	80000226 	beq	r16,zero,400b098 <snprintf+0x8c>
 400b090:	d8800117 	ldw	r2,4(sp)
 400b094:	10000005 	stb	zero,0(r2)
 400b098:	1805883a 	mov	r2,r3
 400b09c:	dfc01a17 	ldw	ra,104(sp)
 400b0a0:	dc401917 	ldw	r17,100(sp)
 400b0a4:	dc001817 	ldw	r16,96(sp)
 400b0a8:	dec01c04 	addi	sp,sp,112
 400b0ac:	f800283a 	ret
 400b0b0:	008022c4 	movi	r2,139
 400b0b4:	88800015 	stw	r2,0(r17)
 400b0b8:	003ff406 	br	400b08c <snprintf+0x80>
 400b0bc:	008022c4 	movi	r2,139
 400b0c0:	88800015 	stw	r2,0(r17)
 400b0c4:	003ff406 	br	400b098 <snprintf+0x8c>

0400b0c8 <_snprintf_r>:
 400b0c8:	deffe504 	addi	sp,sp,-108
 400b0cc:	dc401915 	stw	r17,100(sp)
 400b0d0:	dc001815 	stw	r16,96(sp)
 400b0d4:	dfc01a15 	stw	ra,104(sp)
 400b0d8:	3021883a 	mov	r16,r6
 400b0dc:	00ffffc4 	movi	r3,-1
 400b0e0:	2023883a 	mov	r17,r4
 400b0e4:	2811883a 	mov	r8,r5
 400b0e8:	30002116 	blt	r6,zero,400b170 <_snprintf_r+0xa8>
 400b0ec:	0007883a 	mov	r3,zero
 400b0f0:	30000126 	beq	r6,zero,400b0f8 <_snprintf_r+0x30>
 400b0f4:	30ffffc4 	addi	r3,r6,-1
 400b0f8:	d8801b04 	addi	r2,sp,108
 400b0fc:	d8800015 	stw	r2,0(sp)
 400b100:	380d883a 	mov	r6,r7
 400b104:	100f883a 	mov	r7,r2
 400b108:	00808204 	movi	r2,520
 400b10c:	d880040d 	sth	r2,16(sp)
 400b110:	8809883a 	mov	r4,r17
 400b114:	00bfffc4 	movi	r2,-1
 400b118:	d9400104 	addi	r5,sp,4
 400b11c:	d8c00615 	stw	r3,24(sp)
 400b120:	d8c00315 	stw	r3,12(sp)
 400b124:	da000515 	stw	r8,20(sp)
 400b128:	d880048d 	sth	r2,18(sp)
 400b12c:	da000115 	stw	r8,4(sp)
 400b130:	40048080 	call	4004808 <___vfprintf_internal_r>
 400b134:	1007883a 	mov	r3,r2
 400b138:	00bfffc4 	movi	r2,-1
 400b13c:	18800916 	blt	r3,r2,400b164 <_snprintf_r+0x9c>
 400b140:	80000226 	beq	r16,zero,400b14c <_snprintf_r+0x84>
 400b144:	d8800117 	ldw	r2,4(sp)
 400b148:	10000005 	stb	zero,0(r2)
 400b14c:	1805883a 	mov	r2,r3
 400b150:	dfc01a17 	ldw	ra,104(sp)
 400b154:	dc401917 	ldw	r17,100(sp)
 400b158:	dc001817 	ldw	r16,96(sp)
 400b15c:	dec01b04 	addi	sp,sp,108
 400b160:	f800283a 	ret
 400b164:	008022c4 	movi	r2,139
 400b168:	88800015 	stw	r2,0(r17)
 400b16c:	003ff406 	br	400b140 <_snprintf_r+0x78>
 400b170:	008022c4 	movi	r2,139
 400b174:	20800015 	stw	r2,0(r4)
 400b178:	003ff406 	br	400b14c <_snprintf_r+0x84>

0400b17c <sprintf>:
 400b17c:	deffe504 	addi	sp,sp,-108
 400b180:	2013883a 	mov	r9,r4
 400b184:	dfc01815 	stw	ra,96(sp)
 400b188:	d9801915 	stw	r6,100(sp)
 400b18c:	d9c01a15 	stw	r7,104(sp)
 400b190:	d8801904 	addi	r2,sp,100
 400b194:	d8800015 	stw	r2,0(sp)
 400b198:	00810134 	movhi	r2,1028
 400b19c:	10a0f704 	addi	r2,r2,-31780
 400b1a0:	11000017 	ldw	r4,0(r2)
 400b1a4:	d9c00017 	ldw	r7,0(sp)
 400b1a8:	00808204 	movi	r2,520
 400b1ac:	00e00034 	movhi	r3,32768
 400b1b0:	18ffffc4 	addi	r3,r3,-1
 400b1b4:	280d883a 	mov	r6,r5
 400b1b8:	d880040d 	sth	r2,16(sp)
 400b1bc:	d9400104 	addi	r5,sp,4
 400b1c0:	00bfffc4 	movi	r2,-1
 400b1c4:	d8c00615 	stw	r3,24(sp)
 400b1c8:	d8c00315 	stw	r3,12(sp)
 400b1cc:	da400515 	stw	r9,20(sp)
 400b1d0:	d880048d 	sth	r2,18(sp)
 400b1d4:	da400115 	stw	r9,4(sp)
 400b1d8:	40048080 	call	4004808 <___vfprintf_internal_r>
 400b1dc:	d8c00117 	ldw	r3,4(sp)
 400b1e0:	18000005 	stb	zero,0(r3)
 400b1e4:	dfc01817 	ldw	ra,96(sp)
 400b1e8:	dec01b04 	addi	sp,sp,108
 400b1ec:	f800283a 	ret

0400b1f0 <_sprintf_r>:
 400b1f0:	deffe604 	addi	sp,sp,-104
 400b1f4:	2813883a 	mov	r9,r5
 400b1f8:	dfc01815 	stw	ra,96(sp)
 400b1fc:	d9c01915 	stw	r7,100(sp)
 400b200:	d8801904 	addi	r2,sp,100
 400b204:	d8800015 	stw	r2,0(sp)
 400b208:	100f883a 	mov	r7,r2
 400b20c:	00808204 	movi	r2,520
 400b210:	00e00034 	movhi	r3,32768
 400b214:	18ffffc4 	addi	r3,r3,-1
 400b218:	d880040d 	sth	r2,16(sp)
 400b21c:	d9400104 	addi	r5,sp,4
 400b220:	00bfffc4 	movi	r2,-1
 400b224:	d8c00615 	stw	r3,24(sp)
 400b228:	d8c00315 	stw	r3,12(sp)
 400b22c:	da400515 	stw	r9,20(sp)
 400b230:	d880048d 	sth	r2,18(sp)
 400b234:	da400115 	stw	r9,4(sp)
 400b238:	40048080 	call	4004808 <___vfprintf_internal_r>
 400b23c:	d8c00117 	ldw	r3,4(sp)
 400b240:	18000005 	stb	zero,0(r3)
 400b244:	dfc01817 	ldw	ra,96(sp)
 400b248:	dec01a04 	addi	sp,sp,104
 400b24c:	f800283a 	ret

0400b250 <__sclose>:
 400b250:	2940038f 	ldh	r5,14(r5)
 400b254:	400b6d01 	jmpi	400b6d0 <_close_r>

0400b258 <__sseek>:
 400b258:	defffe04 	addi	sp,sp,-8
 400b25c:	dc000015 	stw	r16,0(sp)
 400b260:	2821883a 	mov	r16,r5
 400b264:	2940038f 	ldh	r5,14(r5)
 400b268:	dfc00115 	stw	ra,4(sp)
 400b26c:	400b9480 	call	400b948 <_lseek_r>
 400b270:	1007883a 	mov	r3,r2
 400b274:	00bfffc4 	movi	r2,-1
 400b278:	18800926 	beq	r3,r2,400b2a0 <__sseek+0x48>
 400b27c:	8080030b 	ldhu	r2,12(r16)
 400b280:	80c01415 	stw	r3,80(r16)
 400b284:	10840014 	ori	r2,r2,4096
 400b288:	8080030d 	sth	r2,12(r16)
 400b28c:	1805883a 	mov	r2,r3
 400b290:	dfc00117 	ldw	ra,4(sp)
 400b294:	dc000017 	ldw	r16,0(sp)
 400b298:	dec00204 	addi	sp,sp,8
 400b29c:	f800283a 	ret
 400b2a0:	8080030b 	ldhu	r2,12(r16)
 400b2a4:	10bbffcc 	andi	r2,r2,61439
 400b2a8:	8080030d 	sth	r2,12(r16)
 400b2ac:	1805883a 	mov	r2,r3
 400b2b0:	dfc00117 	ldw	ra,4(sp)
 400b2b4:	dc000017 	ldw	r16,0(sp)
 400b2b8:	dec00204 	addi	sp,sp,8
 400b2bc:	f800283a 	ret

0400b2c0 <__swrite>:
 400b2c0:	2880030b 	ldhu	r2,12(r5)
 400b2c4:	defffb04 	addi	sp,sp,-20
 400b2c8:	dcc00315 	stw	r19,12(sp)
 400b2cc:	1080400c 	andi	r2,r2,256
 400b2d0:	dc800215 	stw	r18,8(sp)
 400b2d4:	dc400115 	stw	r17,4(sp)
 400b2d8:	dc000015 	stw	r16,0(sp)
 400b2dc:	3027883a 	mov	r19,r6
 400b2e0:	3825883a 	mov	r18,r7
 400b2e4:	dfc00415 	stw	ra,16(sp)
 400b2e8:	2821883a 	mov	r16,r5
 400b2ec:	000d883a 	mov	r6,zero
 400b2f0:	01c00084 	movi	r7,2
 400b2f4:	2023883a 	mov	r17,r4
 400b2f8:	10000226 	beq	r2,zero,400b304 <__swrite+0x44>
 400b2fc:	2940038f 	ldh	r5,14(r5)
 400b300:	400b9480 	call	400b948 <_lseek_r>
 400b304:	8080030b 	ldhu	r2,12(r16)
 400b308:	8140038f 	ldh	r5,14(r16)
 400b30c:	8809883a 	mov	r4,r17
 400b310:	10bbffcc 	andi	r2,r2,61439
 400b314:	980d883a 	mov	r6,r19
 400b318:	900f883a 	mov	r7,r18
 400b31c:	8080030d 	sth	r2,12(r16)
 400b320:	dfc00417 	ldw	ra,16(sp)
 400b324:	dcc00317 	ldw	r19,12(sp)
 400b328:	dc800217 	ldw	r18,8(sp)
 400b32c:	dc400117 	ldw	r17,4(sp)
 400b330:	dc000017 	ldw	r16,0(sp)
 400b334:	dec00504 	addi	sp,sp,20
 400b338:	400b5a41 	jmpi	400b5a4 <_write_r>

0400b33c <__sread>:
 400b33c:	defffe04 	addi	sp,sp,-8
 400b340:	dc000015 	stw	r16,0(sp)
 400b344:	2821883a 	mov	r16,r5
 400b348:	2940038f 	ldh	r5,14(r5)
 400b34c:	dfc00115 	stw	ra,4(sp)
 400b350:	400b9c00 	call	400b9c0 <_read_r>
 400b354:	1007883a 	mov	r3,r2
 400b358:	10000816 	blt	r2,zero,400b37c <__sread+0x40>
 400b35c:	80801417 	ldw	r2,80(r16)
 400b360:	10c5883a 	add	r2,r2,r3
 400b364:	80801415 	stw	r2,80(r16)
 400b368:	1805883a 	mov	r2,r3
 400b36c:	dfc00117 	ldw	ra,4(sp)
 400b370:	dc000017 	ldw	r16,0(sp)
 400b374:	dec00204 	addi	sp,sp,8
 400b378:	f800283a 	ret
 400b37c:	8080030b 	ldhu	r2,12(r16)
 400b380:	10bbffcc 	andi	r2,r2,61439
 400b384:	8080030d 	sth	r2,12(r16)
 400b388:	1805883a 	mov	r2,r3
 400b38c:	dfc00117 	ldw	ra,4(sp)
 400b390:	dc000017 	ldw	r16,0(sp)
 400b394:	dec00204 	addi	sp,sp,8
 400b398:	f800283a 	ret

0400b39c <strcmp>:
 400b39c:	2144b03a 	or	r2,r4,r5
 400b3a0:	108000cc 	andi	r2,r2,3
 400b3a4:	10001d1e 	bne	r2,zero,400b41c <strcmp+0x80>
 400b3a8:	200f883a 	mov	r7,r4
 400b3ac:	28800017 	ldw	r2,0(r5)
 400b3b0:	21000017 	ldw	r4,0(r4)
 400b3b4:	280d883a 	mov	r6,r5
 400b3b8:	2080161e 	bne	r4,r2,400b414 <strcmp+0x78>
 400b3bc:	023fbff4 	movhi	r8,65279
 400b3c0:	423fbfc4 	addi	r8,r8,-257
 400b3c4:	2207883a 	add	r3,r4,r8
 400b3c8:	01602074 	movhi	r5,32897
 400b3cc:	29602004 	addi	r5,r5,-32640
 400b3d0:	1946703a 	and	r3,r3,r5
 400b3d4:	0104303a 	nor	r2,zero,r4
 400b3d8:	10c4703a 	and	r2,r2,r3
 400b3dc:	10001c1e 	bne	r2,zero,400b450 <strcmp+0xb4>
 400b3e0:	4013883a 	mov	r9,r8
 400b3e4:	2811883a 	mov	r8,r5
 400b3e8:	00000106 	br	400b3f0 <strcmp+0x54>
 400b3ec:	1800181e 	bne	r3,zero,400b450 <strcmp+0xb4>
 400b3f0:	39c00104 	addi	r7,r7,4
 400b3f4:	39000017 	ldw	r4,0(r7)
 400b3f8:	31800104 	addi	r6,r6,4
 400b3fc:	31400017 	ldw	r5,0(r6)
 400b400:	2245883a 	add	r2,r4,r9
 400b404:	1204703a 	and	r2,r2,r8
 400b408:	0106303a 	nor	r3,zero,r4
 400b40c:	1886703a 	and	r3,r3,r2
 400b410:	217ff626 	beq	r4,r5,400b3ec <strcmp+0x50>
 400b414:	3809883a 	mov	r4,r7
 400b418:	300b883a 	mov	r5,r6
 400b41c:	20c00007 	ldb	r3,0(r4)
 400b420:	1800051e 	bne	r3,zero,400b438 <strcmp+0x9c>
 400b424:	00000606 	br	400b440 <strcmp+0xa4>
 400b428:	21000044 	addi	r4,r4,1
 400b42c:	20c00007 	ldb	r3,0(r4)
 400b430:	29400044 	addi	r5,r5,1
 400b434:	18000226 	beq	r3,zero,400b440 <strcmp+0xa4>
 400b438:	28800007 	ldb	r2,0(r5)
 400b43c:	18bffa26 	beq	r3,r2,400b428 <strcmp+0x8c>
 400b440:	20c00003 	ldbu	r3,0(r4)
 400b444:	28800003 	ldbu	r2,0(r5)
 400b448:	1885c83a 	sub	r2,r3,r2
 400b44c:	f800283a 	ret
 400b450:	0005883a 	mov	r2,zero
 400b454:	f800283a 	ret

0400b458 <__swbuf_r>:
 400b458:	defffc04 	addi	sp,sp,-16
 400b45c:	dc400215 	stw	r17,8(sp)
 400b460:	dc000115 	stw	r16,4(sp)
 400b464:	dfc00315 	stw	ra,12(sp)
 400b468:	2023883a 	mov	r17,r4
 400b46c:	2821883a 	mov	r16,r5
 400b470:	20000226 	beq	r4,zero,400b47c <__swbuf_r+0x24>
 400b474:	20800e17 	ldw	r2,56(r4)
 400b478:	10002f26 	beq	r2,zero,400b538 <__swbuf_r+0xe0>
 400b47c:	3080030b 	ldhu	r2,12(r6)
 400b480:	30c00617 	ldw	r3,24(r6)
 400b484:	1080020c 	andi	r2,r2,8
 400b488:	30c00215 	stw	r3,8(r6)
 400b48c:	10002226 	beq	r2,zero,400b518 <__swbuf_r+0xc0>
 400b490:	30c00417 	ldw	r3,16(r6)
 400b494:	18002026 	beq	r3,zero,400b518 <__swbuf_r+0xc0>
 400b498:	31000017 	ldw	r4,0(r6)
 400b49c:	30800517 	ldw	r2,20(r6)
 400b4a0:	20c7c83a 	sub	r3,r4,r3
 400b4a4:	18802f0e 	bge	r3,r2,400b564 <__swbuf_r+0x10c>
 400b4a8:	19400044 	addi	r5,r3,1
 400b4ac:	30800217 	ldw	r2,8(r6)
 400b4b0:	84003fcc 	andi	r16,r16,255
 400b4b4:	20c00044 	addi	r3,r4,1
 400b4b8:	10bfffc4 	addi	r2,r2,-1
 400b4bc:	30800215 	stw	r2,8(r6)
 400b4c0:	24000005 	stb	r16,0(r4)
 400b4c4:	30800517 	ldw	r2,20(r6)
 400b4c8:	30c00015 	stw	r3,0(r6)
 400b4cc:	11400c26 	beq	r2,r5,400b500 <__swbuf_r+0xa8>
 400b4d0:	3080030b 	ldhu	r2,12(r6)
 400b4d4:	1080004c 	andi	r2,r2,1
 400b4d8:	1005003a 	cmpeq	r2,r2,zero
 400b4dc:	10000626 	beq	r2,zero,400b4f8 <__swbuf_r+0xa0>
 400b4e0:	8005883a 	mov	r2,r16
 400b4e4:	dfc00317 	ldw	ra,12(sp)
 400b4e8:	dc400217 	ldw	r17,8(sp)
 400b4ec:	dc000117 	ldw	r16,4(sp)
 400b4f0:	dec00404 	addi	sp,sp,16
 400b4f4:	f800283a 	ret
 400b4f8:	00800284 	movi	r2,10
 400b4fc:	80bff81e 	bne	r16,r2,400b4e0 <__swbuf_r+0x88>
 400b500:	8809883a 	mov	r4,r17
 400b504:	300b883a 	mov	r5,r6
 400b508:	40082500 	call	4008250 <_fflush_r>
 400b50c:	103ff426 	beq	r2,zero,400b4e0 <__swbuf_r+0x88>
 400b510:	043fffc4 	movi	r16,-1
 400b514:	003ff206 	br	400b4e0 <__swbuf_r+0x88>
 400b518:	300b883a 	mov	r5,r6
 400b51c:	8809883a 	mov	r4,r17
 400b520:	d9800015 	stw	r6,0(sp)
 400b524:	40066d80 	call	40066d8 <__swsetup_r>
 400b528:	d9800017 	ldw	r6,0(sp)
 400b52c:	1000061e 	bne	r2,zero,400b548 <__swbuf_r+0xf0>
 400b530:	30c00417 	ldw	r3,16(r6)
 400b534:	003fd806 	br	400b498 <__swbuf_r+0x40>
 400b538:	d9800015 	stw	r6,0(sp)
 400b53c:	40084e80 	call	40084e8 <__sinit>
 400b540:	d9800017 	ldw	r6,0(sp)
 400b544:	003fcd06 	br	400b47c <__swbuf_r+0x24>
 400b548:	3080030b 	ldhu	r2,12(r6)
 400b54c:	00c00244 	movi	r3,9
 400b550:	043fffc4 	movi	r16,-1
 400b554:	10801014 	ori	r2,r2,64
 400b558:	3080030d 	sth	r2,12(r6)
 400b55c:	88c00015 	stw	r3,0(r17)
 400b560:	003fdf06 	br	400b4e0 <__swbuf_r+0x88>
 400b564:	300b883a 	mov	r5,r6
 400b568:	8809883a 	mov	r4,r17
 400b56c:	d9800015 	stw	r6,0(sp)
 400b570:	40082500 	call	4008250 <_fflush_r>
 400b574:	d9800017 	ldw	r6,0(sp)
 400b578:	103fe51e 	bne	r2,zero,400b510 <__swbuf_r+0xb8>
 400b57c:	31000017 	ldw	r4,0(r6)
 400b580:	01400044 	movi	r5,1
 400b584:	003fc906 	br	400b4ac <__swbuf_r+0x54>

0400b588 <__swbuf>:
 400b588:	01810134 	movhi	r6,1028
 400b58c:	31a0f704 	addi	r6,r6,-31780
 400b590:	2007883a 	mov	r3,r4
 400b594:	31000017 	ldw	r4,0(r6)
 400b598:	280d883a 	mov	r6,r5
 400b59c:	180b883a 	mov	r5,r3
 400b5a0:	400b4581 	jmpi	400b458 <__swbuf_r>

0400b5a4 <_write_r>:
 400b5a4:	defffd04 	addi	sp,sp,-12
 400b5a8:	dc000015 	stw	r16,0(sp)
 400b5ac:	04010134 	movhi	r16,1028
 400b5b0:	8428e504 	addi	r16,r16,-23660
 400b5b4:	dc400115 	stw	r17,4(sp)
 400b5b8:	80000015 	stw	zero,0(r16)
 400b5bc:	2023883a 	mov	r17,r4
 400b5c0:	2809883a 	mov	r4,r5
 400b5c4:	300b883a 	mov	r5,r6
 400b5c8:	380d883a 	mov	r6,r7
 400b5cc:	dfc00215 	stw	ra,8(sp)
 400b5d0:	4017d040 	call	4017d04 <write>
 400b5d4:	1007883a 	mov	r3,r2
 400b5d8:	00bfffc4 	movi	r2,-1
 400b5dc:	18800626 	beq	r3,r2,400b5f8 <_write_r+0x54>
 400b5e0:	1805883a 	mov	r2,r3
 400b5e4:	dfc00217 	ldw	ra,8(sp)
 400b5e8:	dc400117 	ldw	r17,4(sp)
 400b5ec:	dc000017 	ldw	r16,0(sp)
 400b5f0:	dec00304 	addi	sp,sp,12
 400b5f4:	f800283a 	ret
 400b5f8:	80800017 	ldw	r2,0(r16)
 400b5fc:	103ff826 	beq	r2,zero,400b5e0 <_write_r+0x3c>
 400b600:	88800015 	stw	r2,0(r17)
 400b604:	1805883a 	mov	r2,r3
 400b608:	dfc00217 	ldw	ra,8(sp)
 400b60c:	dc400117 	ldw	r17,4(sp)
 400b610:	dc000017 	ldw	r16,0(sp)
 400b614:	dec00304 	addi	sp,sp,12
 400b618:	f800283a 	ret

0400b61c <_calloc_r>:
 400b61c:	298b383a 	mul	r5,r5,r6
 400b620:	defffe04 	addi	sp,sp,-8
 400b624:	dc000015 	stw	r16,0(sp)
 400b628:	dfc00115 	stw	ra,4(sp)
 400b62c:	4001f600 	call	4001f60 <_malloc_r>
 400b630:	1021883a 	mov	r16,r2
 400b634:	01c00904 	movi	r7,36
 400b638:	10000d26 	beq	r2,zero,400b670 <_calloc_r+0x54>
 400b63c:	10ffff17 	ldw	r3,-4(r2)
 400b640:	1009883a 	mov	r4,r2
 400b644:	00bfff04 	movi	r2,-4
 400b648:	1886703a 	and	r3,r3,r2
 400b64c:	1887883a 	add	r3,r3,r2
 400b650:	180d883a 	mov	r6,r3
 400b654:	000b883a 	mov	r5,zero
 400b658:	38c01736 	bltu	r7,r3,400b6b8 <_calloc_r+0x9c>
 400b65c:	008004c4 	movi	r2,19
 400b660:	10c00836 	bltu	r2,r3,400b684 <_calloc_r+0x68>
 400b664:	20000215 	stw	zero,8(r4)
 400b668:	20000015 	stw	zero,0(r4)
 400b66c:	20000115 	stw	zero,4(r4)
 400b670:	8005883a 	mov	r2,r16
 400b674:	dfc00117 	ldw	ra,4(sp)
 400b678:	dc000017 	ldw	r16,0(sp)
 400b67c:	dec00204 	addi	sp,sp,8
 400b680:	f800283a 	ret
 400b684:	008006c4 	movi	r2,27
 400b688:	80000015 	stw	zero,0(r16)
 400b68c:	80000115 	stw	zero,4(r16)
 400b690:	81000204 	addi	r4,r16,8
 400b694:	10fff32e 	bgeu	r2,r3,400b664 <_calloc_r+0x48>
 400b698:	80000215 	stw	zero,8(r16)
 400b69c:	80000315 	stw	zero,12(r16)
 400b6a0:	81000404 	addi	r4,r16,16
 400b6a4:	19ffef1e 	bne	r3,r7,400b664 <_calloc_r+0x48>
 400b6a8:	81000604 	addi	r4,r16,24
 400b6ac:	80000415 	stw	zero,16(r16)
 400b6b0:	80000515 	stw	zero,20(r16)
 400b6b4:	003feb06 	br	400b664 <_calloc_r+0x48>
 400b6b8:	40026a00 	call	40026a0 <memset>
 400b6bc:	8005883a 	mov	r2,r16
 400b6c0:	dfc00117 	ldw	ra,4(sp)
 400b6c4:	dc000017 	ldw	r16,0(sp)
 400b6c8:	dec00204 	addi	sp,sp,8
 400b6cc:	f800283a 	ret

0400b6d0 <_close_r>:
 400b6d0:	defffd04 	addi	sp,sp,-12
 400b6d4:	dc000015 	stw	r16,0(sp)
 400b6d8:	04010134 	movhi	r16,1028
 400b6dc:	8428e504 	addi	r16,r16,-23660
 400b6e0:	dc400115 	stw	r17,4(sp)
 400b6e4:	80000015 	stw	zero,0(r16)
 400b6e8:	2023883a 	mov	r17,r4
 400b6ec:	2809883a 	mov	r4,r5
 400b6f0:	dfc00215 	stw	ra,8(sp)
 400b6f4:	4017ba80 	call	4017ba8 <close>
 400b6f8:	1007883a 	mov	r3,r2
 400b6fc:	00bfffc4 	movi	r2,-1
 400b700:	18800626 	beq	r3,r2,400b71c <_close_r+0x4c>
 400b704:	1805883a 	mov	r2,r3
 400b708:	dfc00217 	ldw	ra,8(sp)
 400b70c:	dc400117 	ldw	r17,4(sp)
 400b710:	dc000017 	ldw	r16,0(sp)
 400b714:	dec00304 	addi	sp,sp,12
 400b718:	f800283a 	ret
 400b71c:	80800017 	ldw	r2,0(r16)
 400b720:	103ff826 	beq	r2,zero,400b704 <_close_r+0x34>
 400b724:	88800015 	stw	r2,0(r17)
 400b728:	1805883a 	mov	r2,r3
 400b72c:	dfc00217 	ldw	ra,8(sp)
 400b730:	dc400117 	ldw	r17,4(sp)
 400b734:	dc000017 	ldw	r16,0(sp)
 400b738:	dec00304 	addi	sp,sp,12
 400b73c:	f800283a 	ret

0400b740 <_fclose_r>:
 400b740:	defffc04 	addi	sp,sp,-16
 400b744:	dc400115 	stw	r17,4(sp)
 400b748:	dc000015 	stw	r16,0(sp)
 400b74c:	dfc00315 	stw	ra,12(sp)
 400b750:	dc800215 	stw	r18,8(sp)
 400b754:	2821883a 	mov	r16,r5
 400b758:	2023883a 	mov	r17,r4
 400b75c:	28002926 	beq	r5,zero,400b804 <_fclose_r+0xc4>
 400b760:	40084d80 	call	40084d8 <__sfp_lock_acquire>
 400b764:	88000226 	beq	r17,zero,400b770 <_fclose_r+0x30>
 400b768:	88800e17 	ldw	r2,56(r17)
 400b76c:	10002d26 	beq	r2,zero,400b824 <_fclose_r+0xe4>
 400b770:	8080030f 	ldh	r2,12(r16)
 400b774:	10002226 	beq	r2,zero,400b800 <_fclose_r+0xc0>
 400b778:	8809883a 	mov	r4,r17
 400b77c:	800b883a 	mov	r5,r16
 400b780:	40082500 	call	4008250 <_fflush_r>
 400b784:	1025883a 	mov	r18,r2
 400b788:	80800b17 	ldw	r2,44(r16)
 400b78c:	10000426 	beq	r2,zero,400b7a0 <_fclose_r+0x60>
 400b790:	81400717 	ldw	r5,28(r16)
 400b794:	8809883a 	mov	r4,r17
 400b798:	103ee83a 	callr	r2
 400b79c:	10002a16 	blt	r2,zero,400b848 <_fclose_r+0x108>
 400b7a0:	8080030b 	ldhu	r2,12(r16)
 400b7a4:	1080200c 	andi	r2,r2,128
 400b7a8:	1000231e 	bne	r2,zero,400b838 <_fclose_r+0xf8>
 400b7ac:	81400c17 	ldw	r5,48(r16)
 400b7b0:	28000526 	beq	r5,zero,400b7c8 <_fclose_r+0x88>
 400b7b4:	80801004 	addi	r2,r16,64
 400b7b8:	28800226 	beq	r5,r2,400b7c4 <_fclose_r+0x84>
 400b7bc:	8809883a 	mov	r4,r17
 400b7c0:	40089b80 	call	40089b8 <_free_r>
 400b7c4:	80000c15 	stw	zero,48(r16)
 400b7c8:	81401117 	ldw	r5,68(r16)
 400b7cc:	28000326 	beq	r5,zero,400b7dc <_fclose_r+0x9c>
 400b7d0:	8809883a 	mov	r4,r17
 400b7d4:	40089b80 	call	40089b8 <_free_r>
 400b7d8:	80001115 	stw	zero,68(r16)
 400b7dc:	8000030d 	sth	zero,12(r16)
 400b7e0:	40084dc0 	call	40084dc <__sfp_lock_release>
 400b7e4:	9005883a 	mov	r2,r18
 400b7e8:	dfc00317 	ldw	ra,12(sp)
 400b7ec:	dc800217 	ldw	r18,8(sp)
 400b7f0:	dc400117 	ldw	r17,4(sp)
 400b7f4:	dc000017 	ldw	r16,0(sp)
 400b7f8:	dec00404 	addi	sp,sp,16
 400b7fc:	f800283a 	ret
 400b800:	40084dc0 	call	40084dc <__sfp_lock_release>
 400b804:	0025883a 	mov	r18,zero
 400b808:	9005883a 	mov	r2,r18
 400b80c:	dfc00317 	ldw	ra,12(sp)
 400b810:	dc800217 	ldw	r18,8(sp)
 400b814:	dc400117 	ldw	r17,4(sp)
 400b818:	dc000017 	ldw	r16,0(sp)
 400b81c:	dec00404 	addi	sp,sp,16
 400b820:	f800283a 	ret
 400b824:	8809883a 	mov	r4,r17
 400b828:	40084e80 	call	40084e8 <__sinit>
 400b82c:	8080030f 	ldh	r2,12(r16)
 400b830:	103fd11e 	bne	r2,zero,400b778 <_fclose_r+0x38>
 400b834:	003ff206 	br	400b800 <_fclose_r+0xc0>
 400b838:	81400417 	ldw	r5,16(r16)
 400b83c:	8809883a 	mov	r4,r17
 400b840:	40089b80 	call	40089b8 <_free_r>
 400b844:	003fd906 	br	400b7ac <_fclose_r+0x6c>
 400b848:	04bfffc4 	movi	r18,-1
 400b84c:	003fd406 	br	400b7a0 <_fclose_r+0x60>

0400b850 <fclose>:
 400b850:	00810134 	movhi	r2,1028
 400b854:	10a0f704 	addi	r2,r2,-31780
 400b858:	200b883a 	mov	r5,r4
 400b85c:	11000017 	ldw	r4,0(r2)
 400b860:	400b7401 	jmpi	400b740 <_fclose_r>

0400b864 <_fstat_r>:
 400b864:	defffd04 	addi	sp,sp,-12
 400b868:	dc000015 	stw	r16,0(sp)
 400b86c:	04010134 	movhi	r16,1028
 400b870:	8428e504 	addi	r16,r16,-23660
 400b874:	dc400115 	stw	r17,4(sp)
 400b878:	80000015 	stw	zero,0(r16)
 400b87c:	2023883a 	mov	r17,r4
 400b880:	2809883a 	mov	r4,r5
 400b884:	300b883a 	mov	r5,r6
 400b888:	dfc00215 	stw	ra,8(sp)
 400b88c:	400de880 	call	400de88 <fstat>
 400b890:	1007883a 	mov	r3,r2
 400b894:	00bfffc4 	movi	r2,-1
 400b898:	18800626 	beq	r3,r2,400b8b4 <_fstat_r+0x50>
 400b89c:	1805883a 	mov	r2,r3
 400b8a0:	dfc00217 	ldw	ra,8(sp)
 400b8a4:	dc400117 	ldw	r17,4(sp)
 400b8a8:	dc000017 	ldw	r16,0(sp)
 400b8ac:	dec00304 	addi	sp,sp,12
 400b8b0:	f800283a 	ret
 400b8b4:	80800017 	ldw	r2,0(r16)
 400b8b8:	103ff826 	beq	r2,zero,400b89c <_fstat_r+0x38>
 400b8bc:	88800015 	stw	r2,0(r17)
 400b8c0:	1805883a 	mov	r2,r3
 400b8c4:	dfc00217 	ldw	ra,8(sp)
 400b8c8:	dc400117 	ldw	r17,4(sp)
 400b8cc:	dc000017 	ldw	r16,0(sp)
 400b8d0:	dec00304 	addi	sp,sp,12
 400b8d4:	f800283a 	ret

0400b8d8 <_isatty_r>:
 400b8d8:	defffd04 	addi	sp,sp,-12
 400b8dc:	dc000015 	stw	r16,0(sp)
 400b8e0:	04010134 	movhi	r16,1028
 400b8e4:	8428e504 	addi	r16,r16,-23660
 400b8e8:	dc400115 	stw	r17,4(sp)
 400b8ec:	80000015 	stw	zero,0(r16)
 400b8f0:	2023883a 	mov	r17,r4
 400b8f4:	2809883a 	mov	r4,r5
 400b8f8:	dfc00215 	stw	ra,8(sp)
 400b8fc:	400e1200 	call	400e120 <isatty>
 400b900:	1007883a 	mov	r3,r2
 400b904:	00bfffc4 	movi	r2,-1
 400b908:	18800626 	beq	r3,r2,400b924 <_isatty_r+0x4c>
 400b90c:	1805883a 	mov	r2,r3
 400b910:	dfc00217 	ldw	ra,8(sp)
 400b914:	dc400117 	ldw	r17,4(sp)
 400b918:	dc000017 	ldw	r16,0(sp)
 400b91c:	dec00304 	addi	sp,sp,12
 400b920:	f800283a 	ret
 400b924:	80800017 	ldw	r2,0(r16)
 400b928:	103ff826 	beq	r2,zero,400b90c <_isatty_r+0x34>
 400b92c:	88800015 	stw	r2,0(r17)
 400b930:	1805883a 	mov	r2,r3
 400b934:	dfc00217 	ldw	ra,8(sp)
 400b938:	dc400117 	ldw	r17,4(sp)
 400b93c:	dc000017 	ldw	r16,0(sp)
 400b940:	dec00304 	addi	sp,sp,12
 400b944:	f800283a 	ret

0400b948 <_lseek_r>:
 400b948:	defffd04 	addi	sp,sp,-12
 400b94c:	dc000015 	stw	r16,0(sp)
 400b950:	04010134 	movhi	r16,1028
 400b954:	8428e504 	addi	r16,r16,-23660
 400b958:	dc400115 	stw	r17,4(sp)
 400b95c:	80000015 	stw	zero,0(r16)
 400b960:	2023883a 	mov	r17,r4
 400b964:	2809883a 	mov	r4,r5
 400b968:	300b883a 	mov	r5,r6
 400b96c:	380d883a 	mov	r6,r7
 400b970:	dfc00215 	stw	ra,8(sp)
 400b974:	400e2900 	call	400e290 <lseek>
 400b978:	1007883a 	mov	r3,r2
 400b97c:	00bfffc4 	movi	r2,-1
 400b980:	18800626 	beq	r3,r2,400b99c <_lseek_r+0x54>
 400b984:	1805883a 	mov	r2,r3
 400b988:	dfc00217 	ldw	ra,8(sp)
 400b98c:	dc400117 	ldw	r17,4(sp)
 400b990:	dc000017 	ldw	r16,0(sp)
 400b994:	dec00304 	addi	sp,sp,12
 400b998:	f800283a 	ret
 400b99c:	80800017 	ldw	r2,0(r16)
 400b9a0:	103ff826 	beq	r2,zero,400b984 <_lseek_r+0x3c>
 400b9a4:	88800015 	stw	r2,0(r17)
 400b9a8:	1805883a 	mov	r2,r3
 400b9ac:	dfc00217 	ldw	ra,8(sp)
 400b9b0:	dc400117 	ldw	r17,4(sp)
 400b9b4:	dc000017 	ldw	r16,0(sp)
 400b9b8:	dec00304 	addi	sp,sp,12
 400b9bc:	f800283a 	ret

0400b9c0 <_read_r>:
 400b9c0:	defffd04 	addi	sp,sp,-12
 400b9c4:	dc000015 	stw	r16,0(sp)
 400b9c8:	04010134 	movhi	r16,1028
 400b9cc:	8428e504 	addi	r16,r16,-23660
 400b9d0:	dc400115 	stw	r17,4(sp)
 400b9d4:	80000015 	stw	zero,0(r16)
 400b9d8:	2023883a 	mov	r17,r4
 400b9dc:	2809883a 	mov	r4,r5
 400b9e0:	300b883a 	mov	r5,r6
 400b9e4:	380d883a 	mov	r6,r7
 400b9e8:	dfc00215 	stw	ra,8(sp)
 400b9ec:	4017ccc0 	call	4017ccc <read>
 400b9f0:	1007883a 	mov	r3,r2
 400b9f4:	00bfffc4 	movi	r2,-1
 400b9f8:	18800626 	beq	r3,r2,400ba14 <_read_r+0x54>
 400b9fc:	1805883a 	mov	r2,r3
 400ba00:	dfc00217 	ldw	ra,8(sp)
 400ba04:	dc400117 	ldw	r17,4(sp)
 400ba08:	dc000017 	ldw	r16,0(sp)
 400ba0c:	dec00304 	addi	sp,sp,12
 400ba10:	f800283a 	ret
 400ba14:	80800017 	ldw	r2,0(r16)
 400ba18:	103ff826 	beq	r2,zero,400b9fc <_read_r+0x3c>
 400ba1c:	88800015 	stw	r2,0(r17)
 400ba20:	1805883a 	mov	r2,r3
 400ba24:	dfc00217 	ldw	ra,8(sp)
 400ba28:	dc400117 	ldw	r17,4(sp)
 400ba2c:	dc000017 	ldw	r16,0(sp)
 400ba30:	dec00304 	addi	sp,sp,12
 400ba34:	f800283a 	ret

0400ba38 <__udivdi3>:
 400ba38:	defff004 	addi	sp,sp,-64
 400ba3c:	2005883a 	mov	r2,r4
 400ba40:	3011883a 	mov	r8,r6
 400ba44:	df000e15 	stw	fp,56(sp)
 400ba48:	dd000a15 	stw	r20,40(sp)
 400ba4c:	dc000615 	stw	r16,24(sp)
 400ba50:	dfc00f15 	stw	ra,60(sp)
 400ba54:	ddc00d15 	stw	r23,52(sp)
 400ba58:	dd800c15 	stw	r22,48(sp)
 400ba5c:	dd400b15 	stw	r21,44(sp)
 400ba60:	dcc00915 	stw	r19,36(sp)
 400ba64:	dc800815 	stw	r18,32(sp)
 400ba68:	dc400715 	stw	r17,28(sp)
 400ba6c:	4021883a 	mov	r16,r8
 400ba70:	1039883a 	mov	fp,r2
 400ba74:	2829883a 	mov	r20,r5
 400ba78:	38003b1e 	bne	r7,zero,400bb68 <__udivdi3+0x130>
 400ba7c:	2a005c36 	bltu	r5,r8,400bbf0 <__udivdi3+0x1b8>
 400ba80:	4000a626 	beq	r8,zero,400bd1c <__udivdi3+0x2e4>
 400ba84:	00bfffd4 	movui	r2,65535
 400ba88:	14009e36 	bltu	r2,r16,400bd04 <__udivdi3+0x2cc>
 400ba8c:	00803fc4 	movi	r2,255
 400ba90:	14013d36 	bltu	r2,r16,400bf88 <__udivdi3+0x550>
 400ba94:	000b883a 	mov	r5,zero
 400ba98:	0005883a 	mov	r2,zero
 400ba9c:	8084d83a 	srl	r2,r16,r2
 400baa0:	010100f4 	movhi	r4,1027
 400baa4:	210b5204 	addi	r4,r4,11592
 400baa8:	01800804 	movi	r6,32
 400baac:	1105883a 	add	r2,r2,r4
 400bab0:	10c00003 	ldbu	r3,0(r2)
 400bab4:	28c7883a 	add	r3,r5,r3
 400bab8:	30edc83a 	sub	r22,r6,r3
 400babc:	b000ee1e 	bne	r22,zero,400be78 <__udivdi3+0x440>
 400bac0:	802ad43a 	srli	r21,r16,16
 400bac4:	00800044 	movi	r2,1
 400bac8:	a423c83a 	sub	r17,r20,r16
 400bacc:	85ffffcc 	andi	r23,r16,65535
 400bad0:	d8800315 	stw	r2,12(sp)
 400bad4:	8809883a 	mov	r4,r17
 400bad8:	a80b883a 	mov	r5,r21
 400badc:	400d82c0 	call	400d82c <__udivsi3>
 400bae0:	8809883a 	mov	r4,r17
 400bae4:	a80b883a 	mov	r5,r21
 400bae8:	102d883a 	mov	r22,r2
 400baec:	400d8340 	call	400d834 <__umodsi3>
 400baf0:	1004943a 	slli	r2,r2,16
 400baf4:	e006d43a 	srli	r3,fp,16
 400baf8:	bda3383a 	mul	r17,r23,r22
 400bafc:	10c4b03a 	or	r2,r2,r3
 400bb00:	1440042e 	bgeu	r2,r17,400bb14 <__udivdi3+0xdc>
 400bb04:	1405883a 	add	r2,r2,r16
 400bb08:	b5bfffc4 	addi	r22,r22,-1
 400bb0c:	14000136 	bltu	r2,r16,400bb14 <__udivdi3+0xdc>
 400bb10:	14413d36 	bltu	r2,r17,400c008 <__udivdi3+0x5d0>
 400bb14:	1463c83a 	sub	r17,r2,r17
 400bb18:	8809883a 	mov	r4,r17
 400bb1c:	a80b883a 	mov	r5,r21
 400bb20:	400d82c0 	call	400d82c <__udivsi3>
 400bb24:	8809883a 	mov	r4,r17
 400bb28:	a80b883a 	mov	r5,r21
 400bb2c:	1029883a 	mov	r20,r2
 400bb30:	400d8340 	call	400d834 <__umodsi3>
 400bb34:	1004943a 	slli	r2,r2,16
 400bb38:	bd09383a 	mul	r4,r23,r20
 400bb3c:	e0ffffcc 	andi	r3,fp,65535
 400bb40:	10c4b03a 	or	r2,r2,r3
 400bb44:	1100042e 	bgeu	r2,r4,400bb58 <__udivdi3+0x120>
 400bb48:	8085883a 	add	r2,r16,r2
 400bb4c:	a53fffc4 	addi	r20,r20,-1
 400bb50:	14000136 	bltu	r2,r16,400bb58 <__udivdi3+0x120>
 400bb54:	11012036 	bltu	r2,r4,400bfd8 <__udivdi3+0x5a0>
 400bb58:	b004943a 	slli	r2,r22,16
 400bb5c:	d9000317 	ldw	r4,12(sp)
 400bb60:	a084b03a 	or	r2,r20,r2
 400bb64:	00001506 	br	400bbbc <__udivdi3+0x184>
 400bb68:	380d883a 	mov	r6,r7
 400bb6c:	29c06236 	bltu	r5,r7,400bcf8 <__udivdi3+0x2c0>
 400bb70:	00bfffd4 	movui	r2,65535
 400bb74:	11c05a36 	bltu	r2,r7,400bce0 <__udivdi3+0x2a8>
 400bb78:	00803fc4 	movi	r2,255
 400bb7c:	11c0fc36 	bltu	r2,r7,400bf70 <__udivdi3+0x538>
 400bb80:	000b883a 	mov	r5,zero
 400bb84:	0005883a 	mov	r2,zero
 400bb88:	3084d83a 	srl	r2,r6,r2
 400bb8c:	010100f4 	movhi	r4,1027
 400bb90:	210b5204 	addi	r4,r4,11592
 400bb94:	01c00804 	movi	r7,32
 400bb98:	1105883a 	add	r2,r2,r4
 400bb9c:	10c00003 	ldbu	r3,0(r2)
 400bba0:	28c7883a 	add	r3,r5,r3
 400bba4:	38efc83a 	sub	r23,r7,r3
 400bba8:	b800691e 	bne	r23,zero,400bd50 <__udivdi3+0x318>
 400bbac:	35000136 	bltu	r6,r20,400bbb4 <__udivdi3+0x17c>
 400bbb0:	e4005136 	bltu	fp,r16,400bcf8 <__udivdi3+0x2c0>
 400bbb4:	00800044 	movi	r2,1
 400bbb8:	0009883a 	mov	r4,zero
 400bbbc:	2007883a 	mov	r3,r4
 400bbc0:	dfc00f17 	ldw	ra,60(sp)
 400bbc4:	df000e17 	ldw	fp,56(sp)
 400bbc8:	ddc00d17 	ldw	r23,52(sp)
 400bbcc:	dd800c17 	ldw	r22,48(sp)
 400bbd0:	dd400b17 	ldw	r21,44(sp)
 400bbd4:	dd000a17 	ldw	r20,40(sp)
 400bbd8:	dcc00917 	ldw	r19,36(sp)
 400bbdc:	dc800817 	ldw	r18,32(sp)
 400bbe0:	dc400717 	ldw	r17,28(sp)
 400bbe4:	dc000617 	ldw	r16,24(sp)
 400bbe8:	dec01004 	addi	sp,sp,64
 400bbec:	f800283a 	ret
 400bbf0:	00bfffd4 	movui	r2,65535
 400bbf4:	12005036 	bltu	r2,r8,400bd38 <__udivdi3+0x300>
 400bbf8:	00803fc4 	movi	r2,255
 400bbfc:	1200e836 	bltu	r2,r8,400bfa0 <__udivdi3+0x568>
 400bc00:	000b883a 	mov	r5,zero
 400bc04:	0005883a 	mov	r2,zero
 400bc08:	8084d83a 	srl	r2,r16,r2
 400bc0c:	010100f4 	movhi	r4,1027
 400bc10:	210b5204 	addi	r4,r4,11592
 400bc14:	01800804 	movi	r6,32
 400bc18:	1105883a 	add	r2,r2,r4
 400bc1c:	10c00003 	ldbu	r3,0(r2)
 400bc20:	28c7883a 	add	r3,r5,r3
 400bc24:	30cbc83a 	sub	r5,r6,r3
 400bc28:	28000626 	beq	r5,zero,400bc44 <__udivdi3+0x20c>
 400bc2c:	3145c83a 	sub	r2,r6,r5
 400bc30:	e084d83a 	srl	r2,fp,r2
 400bc34:	a146983a 	sll	r3,r20,r5
 400bc38:	e178983a 	sll	fp,fp,r5
 400bc3c:	8160983a 	sll	r16,r16,r5
 400bc40:	18a8b03a 	or	r20,r3,r2
 400bc44:	802ad43a 	srli	r21,r16,16
 400bc48:	a009883a 	mov	r4,r20
 400bc4c:	85ffffcc 	andi	r23,r16,65535
 400bc50:	a80b883a 	mov	r5,r21
 400bc54:	400d82c0 	call	400d82c <__udivsi3>
 400bc58:	a009883a 	mov	r4,r20
 400bc5c:	a80b883a 	mov	r5,r21
 400bc60:	102d883a 	mov	r22,r2
 400bc64:	400d8340 	call	400d834 <__umodsi3>
 400bc68:	1004943a 	slli	r2,r2,16
 400bc6c:	e006d43a 	srli	r3,fp,16
 400bc70:	bda3383a 	mul	r17,r23,r22
 400bc74:	10c4b03a 	or	r2,r2,r3
 400bc78:	1440042e 	bgeu	r2,r17,400bc8c <__udivdi3+0x254>
 400bc7c:	1405883a 	add	r2,r2,r16
 400bc80:	b5bfffc4 	addi	r22,r22,-1
 400bc84:	14000136 	bltu	r2,r16,400bc8c <__udivdi3+0x254>
 400bc88:	1440d536 	bltu	r2,r17,400bfe0 <__udivdi3+0x5a8>
 400bc8c:	1463c83a 	sub	r17,r2,r17
 400bc90:	8809883a 	mov	r4,r17
 400bc94:	a80b883a 	mov	r5,r21
 400bc98:	400d82c0 	call	400d82c <__udivsi3>
 400bc9c:	8809883a 	mov	r4,r17
 400bca0:	a80b883a 	mov	r5,r21
 400bca4:	1029883a 	mov	r20,r2
 400bca8:	400d8340 	call	400d834 <__umodsi3>
 400bcac:	1004943a 	slli	r2,r2,16
 400bcb0:	bd09383a 	mul	r4,r23,r20
 400bcb4:	e0ffffcc 	andi	r3,fp,65535
 400bcb8:	10c4b03a 	or	r2,r2,r3
 400bcbc:	1100042e 	bgeu	r2,r4,400bcd0 <__udivdi3+0x298>
 400bcc0:	8085883a 	add	r2,r16,r2
 400bcc4:	a53fffc4 	addi	r20,r20,-1
 400bcc8:	14000136 	bltu	r2,r16,400bcd0 <__udivdi3+0x298>
 400bccc:	1100c736 	bltu	r2,r4,400bfec <__udivdi3+0x5b4>
 400bcd0:	b004943a 	slli	r2,r22,16
 400bcd4:	0009883a 	mov	r4,zero
 400bcd8:	a084b03a 	or	r2,r20,r2
 400bcdc:	003fb706 	br	400bbbc <__udivdi3+0x184>
 400bce0:	00804034 	movhi	r2,256
 400bce4:	10bfffc4 	addi	r2,r2,-1
 400bce8:	11c0a436 	bltu	r2,r7,400bf7c <__udivdi3+0x544>
 400bcec:	01400404 	movi	r5,16
 400bcf0:	2805883a 	mov	r2,r5
 400bcf4:	003fa406 	br	400bb88 <__udivdi3+0x150>
 400bcf8:	0005883a 	mov	r2,zero
 400bcfc:	0009883a 	mov	r4,zero
 400bd00:	003fae06 	br	400bbbc <__udivdi3+0x184>
 400bd04:	00804034 	movhi	r2,256
 400bd08:	10bfffc4 	addi	r2,r2,-1
 400bd0c:	1400a136 	bltu	r2,r16,400bf94 <__udivdi3+0x55c>
 400bd10:	01400404 	movi	r5,16
 400bd14:	2805883a 	mov	r2,r5
 400bd18:	003f6006 	br	400ba9c <__udivdi3+0x64>
 400bd1c:	01000044 	movi	r4,1
 400bd20:	000b883a 	mov	r5,zero
 400bd24:	400d82c0 	call	400d82c <__udivsi3>
 400bd28:	1021883a 	mov	r16,r2
 400bd2c:	00bfffd4 	movui	r2,65535
 400bd30:	143ff436 	bltu	r2,r16,400bd04 <__udivdi3+0x2cc>
 400bd34:	003f5506 	br	400ba8c <__udivdi3+0x54>
 400bd38:	00804034 	movhi	r2,256
 400bd3c:	10bfffc4 	addi	r2,r2,-1
 400bd40:	12009a36 	bltu	r2,r8,400bfac <__udivdi3+0x574>
 400bd44:	01400404 	movi	r5,16
 400bd48:	2805883a 	mov	r2,r5
 400bd4c:	003fae06 	br	400bc08 <__udivdi3+0x1d0>
 400bd50:	3dc5c83a 	sub	r2,r7,r23
 400bd54:	35c8983a 	sll	r4,r6,r23
 400bd58:	8086d83a 	srl	r3,r16,r2
 400bd5c:	a0a2d83a 	srl	r17,r20,r2
 400bd60:	e084d83a 	srl	r2,fp,r2
 400bd64:	20eab03a 	or	r21,r4,r3
 400bd68:	a82cd43a 	srli	r22,r21,16
 400bd6c:	a5c6983a 	sll	r3,r20,r23
 400bd70:	8809883a 	mov	r4,r17
 400bd74:	b00b883a 	mov	r5,r22
 400bd78:	1886b03a 	or	r3,r3,r2
 400bd7c:	d8c00215 	stw	r3,8(sp)
 400bd80:	400d82c0 	call	400d82c <__udivsi3>
 400bd84:	8809883a 	mov	r4,r17
 400bd88:	b00b883a 	mov	r5,r22
 400bd8c:	1029883a 	mov	r20,r2
 400bd90:	400d8340 	call	400d834 <__umodsi3>
 400bd94:	a8ffffcc 	andi	r3,r21,65535
 400bd98:	d8c00515 	stw	r3,20(sp)
 400bd9c:	d9000217 	ldw	r4,8(sp)
 400bda0:	d9400517 	ldw	r5,20(sp)
 400bda4:	1004943a 	slli	r2,r2,16
 400bda8:	2006d43a 	srli	r3,r4,16
 400bdac:	85e0983a 	sll	r16,r16,r23
 400bdb0:	2d23383a 	mul	r17,r5,r20
 400bdb4:	10c4b03a 	or	r2,r2,r3
 400bdb8:	dc000015 	stw	r16,0(sp)
 400bdbc:	1440032e 	bgeu	r2,r17,400bdcc <__udivdi3+0x394>
 400bdc0:	1545883a 	add	r2,r2,r21
 400bdc4:	a53fffc4 	addi	r20,r20,-1
 400bdc8:	15407f2e 	bgeu	r2,r21,400bfc8 <__udivdi3+0x590>
 400bdcc:	1463c83a 	sub	r17,r2,r17
 400bdd0:	8809883a 	mov	r4,r17
 400bdd4:	b00b883a 	mov	r5,r22
 400bdd8:	400d82c0 	call	400d82c <__udivsi3>
 400bddc:	8809883a 	mov	r4,r17
 400bde0:	b00b883a 	mov	r5,r22
 400bde4:	1021883a 	mov	r16,r2
 400bde8:	400d8340 	call	400d834 <__umodsi3>
 400bdec:	d8c00517 	ldw	r3,20(sp)
 400bdf0:	d9000217 	ldw	r4,8(sp)
 400bdf4:	1004943a 	slli	r2,r2,16
 400bdf8:	1c0f383a 	mul	r7,r3,r16
 400bdfc:	20ffffcc 	andi	r3,r4,65535
 400be00:	10e2b03a 	or	r17,r2,r3
 400be04:	89c0032e 	bgeu	r17,r7,400be14 <__udivdi3+0x3dc>
 400be08:	8d63883a 	add	r17,r17,r21
 400be0c:	843fffc4 	addi	r16,r16,-1
 400be10:	8d40692e 	bgeu	r17,r21,400bfb8 <__udivdi3+0x580>
 400be14:	a008943a 	slli	r4,r20,16
 400be18:	d9400017 	ldw	r5,0(sp)
 400be1c:	89e3c83a 	sub	r17,r17,r7
 400be20:	8110b03a 	or	r8,r16,r4
 400be24:	280cd43a 	srli	r6,r5,16
 400be28:	28ffffcc 	andi	r3,r5,65535
 400be2c:	40bfffcc 	andi	r2,r8,65535
 400be30:	400ad43a 	srli	r5,r8,16
 400be34:	10d3383a 	mul	r9,r2,r3
 400be38:	1185383a 	mul	r2,r2,r6
 400be3c:	28c7383a 	mul	r3,r5,r3
 400be40:	4808d43a 	srli	r4,r9,16
 400be44:	298b383a 	mul	r5,r5,r6
 400be48:	10c5883a 	add	r2,r2,r3
 400be4c:	2089883a 	add	r4,r4,r2
 400be50:	20c0022e 	bgeu	r4,r3,400be5c <__udivdi3+0x424>
 400be54:	00800074 	movhi	r2,1
 400be58:	288b883a 	add	r5,r5,r2
 400be5c:	2004d43a 	srli	r2,r4,16
 400be60:	288b883a 	add	r5,r5,r2
 400be64:	89403f36 	bltu	r17,r5,400bf64 <__udivdi3+0x52c>
 400be68:	89403926 	beq	r17,r5,400bf50 <__udivdi3+0x518>
 400be6c:	4005883a 	mov	r2,r8
 400be70:	0009883a 	mov	r4,zero
 400be74:	003f5106 	br	400bbbc <__udivdi3+0x184>
 400be78:	85a0983a 	sll	r16,r16,r22
 400be7c:	3585c83a 	sub	r2,r6,r22
 400be80:	a0a2d83a 	srl	r17,r20,r2
 400be84:	802ad43a 	srli	r21,r16,16
 400be88:	e084d83a 	srl	r2,fp,r2
 400be8c:	a586983a 	sll	r3,r20,r22
 400be90:	8809883a 	mov	r4,r17
 400be94:	a80b883a 	mov	r5,r21
 400be98:	1886b03a 	or	r3,r3,r2
 400be9c:	d8c00115 	stw	r3,4(sp)
 400bea0:	400d82c0 	call	400d82c <__udivsi3>
 400bea4:	8809883a 	mov	r4,r17
 400bea8:	a80b883a 	mov	r5,r21
 400beac:	d8800415 	stw	r2,16(sp)
 400beb0:	400d8340 	call	400d834 <__umodsi3>
 400beb4:	d9000117 	ldw	r4,4(sp)
 400beb8:	d9400417 	ldw	r5,16(sp)
 400bebc:	1004943a 	slli	r2,r2,16
 400bec0:	85ffffcc 	andi	r23,r16,65535
 400bec4:	2006d43a 	srli	r3,r4,16
 400bec8:	b963383a 	mul	r17,r23,r5
 400becc:	10c4b03a 	or	r2,r2,r3
 400bed0:	1440042e 	bgeu	r2,r17,400bee4 <__udivdi3+0x4ac>
 400bed4:	297fffc4 	addi	r5,r5,-1
 400bed8:	1405883a 	add	r2,r2,r16
 400bedc:	d9400415 	stw	r5,16(sp)
 400bee0:	1400442e 	bgeu	r2,r16,400bff4 <__udivdi3+0x5bc>
 400bee4:	1463c83a 	sub	r17,r2,r17
 400bee8:	8809883a 	mov	r4,r17
 400beec:	a80b883a 	mov	r5,r21
 400bef0:	400d82c0 	call	400d82c <__udivsi3>
 400bef4:	8809883a 	mov	r4,r17
 400bef8:	a80b883a 	mov	r5,r21
 400befc:	1029883a 	mov	r20,r2
 400bf00:	400d8340 	call	400d834 <__umodsi3>
 400bf04:	d9400117 	ldw	r5,4(sp)
 400bf08:	1004943a 	slli	r2,r2,16
 400bf0c:	bd09383a 	mul	r4,r23,r20
 400bf10:	28ffffcc 	andi	r3,r5,65535
 400bf14:	10c6b03a 	or	r3,r2,r3
 400bf18:	1900062e 	bgeu	r3,r4,400bf34 <__udivdi3+0x4fc>
 400bf1c:	1c07883a 	add	r3,r3,r16
 400bf20:	a53fffc4 	addi	r20,r20,-1
 400bf24:	1c000336 	bltu	r3,r16,400bf34 <__udivdi3+0x4fc>
 400bf28:	1900022e 	bgeu	r3,r4,400bf34 <__udivdi3+0x4fc>
 400bf2c:	a53fffc4 	addi	r20,r20,-1
 400bf30:	1c07883a 	add	r3,r3,r16
 400bf34:	d9400417 	ldw	r5,16(sp)
 400bf38:	e5b8983a 	sll	fp,fp,r22
 400bf3c:	1923c83a 	sub	r17,r3,r4
 400bf40:	2804943a 	slli	r2,r5,16
 400bf44:	a0a8b03a 	or	r20,r20,r2
 400bf48:	dd000315 	stw	r20,12(sp)
 400bf4c:	003ee106 	br	400bad4 <__udivdi3+0x9c>
 400bf50:	2004943a 	slli	r2,r4,16
 400bf54:	e5c8983a 	sll	r4,fp,r23
 400bf58:	48ffffcc 	andi	r3,r9,65535
 400bf5c:	10c5883a 	add	r2,r2,r3
 400bf60:	20bfc22e 	bgeu	r4,r2,400be6c <__udivdi3+0x434>
 400bf64:	40bfffc4 	addi	r2,r8,-1
 400bf68:	0009883a 	mov	r4,zero
 400bf6c:	003f1306 	br	400bbbc <__udivdi3+0x184>
 400bf70:	01400204 	movi	r5,8
 400bf74:	2805883a 	mov	r2,r5
 400bf78:	003f0306 	br	400bb88 <__udivdi3+0x150>
 400bf7c:	01400604 	movi	r5,24
 400bf80:	2805883a 	mov	r2,r5
 400bf84:	003f0006 	br	400bb88 <__udivdi3+0x150>
 400bf88:	01400204 	movi	r5,8
 400bf8c:	2805883a 	mov	r2,r5
 400bf90:	003ec206 	br	400ba9c <__udivdi3+0x64>
 400bf94:	01400604 	movi	r5,24
 400bf98:	2805883a 	mov	r2,r5
 400bf9c:	003ebf06 	br	400ba9c <__udivdi3+0x64>
 400bfa0:	01400204 	movi	r5,8
 400bfa4:	2805883a 	mov	r2,r5
 400bfa8:	003f1706 	br	400bc08 <__udivdi3+0x1d0>
 400bfac:	01400604 	movi	r5,24
 400bfb0:	2805883a 	mov	r2,r5
 400bfb4:	003f1406 	br	400bc08 <__udivdi3+0x1d0>
 400bfb8:	89ff962e 	bgeu	r17,r7,400be14 <__udivdi3+0x3dc>
 400bfbc:	8d63883a 	add	r17,r17,r21
 400bfc0:	843fffc4 	addi	r16,r16,-1
 400bfc4:	003f9306 	br	400be14 <__udivdi3+0x3dc>
 400bfc8:	147f802e 	bgeu	r2,r17,400bdcc <__udivdi3+0x394>
 400bfcc:	a53fffc4 	addi	r20,r20,-1
 400bfd0:	1545883a 	add	r2,r2,r21
 400bfd4:	003f7d06 	br	400bdcc <__udivdi3+0x394>
 400bfd8:	a53fffc4 	addi	r20,r20,-1
 400bfdc:	003ede06 	br	400bb58 <__udivdi3+0x120>
 400bfe0:	b5bfffc4 	addi	r22,r22,-1
 400bfe4:	1405883a 	add	r2,r2,r16
 400bfe8:	003f2806 	br	400bc8c <__udivdi3+0x254>
 400bfec:	a53fffc4 	addi	r20,r20,-1
 400bff0:	003f3706 	br	400bcd0 <__udivdi3+0x298>
 400bff4:	147fbb2e 	bgeu	r2,r17,400bee4 <__udivdi3+0x4ac>
 400bff8:	297fffc4 	addi	r5,r5,-1
 400bffc:	1405883a 	add	r2,r2,r16
 400c000:	d9400415 	stw	r5,16(sp)
 400c004:	003fb706 	br	400bee4 <__udivdi3+0x4ac>
 400c008:	b5bfffc4 	addi	r22,r22,-1
 400c00c:	1405883a 	add	r2,r2,r16
 400c010:	003ec006 	br	400bb14 <__udivdi3+0xdc>

0400c014 <__umoddi3>:
 400c014:	defff104 	addi	sp,sp,-60
 400c018:	dd800b15 	stw	r22,44(sp)
 400c01c:	dd000915 	stw	r20,36(sp)
 400c020:	dc000515 	stw	r16,20(sp)
 400c024:	dfc00e15 	stw	ra,56(sp)
 400c028:	df000d15 	stw	fp,52(sp)
 400c02c:	ddc00c15 	stw	r23,48(sp)
 400c030:	dd400a15 	stw	r21,40(sp)
 400c034:	dcc00815 	stw	r19,32(sp)
 400c038:	dc800715 	stw	r18,28(sp)
 400c03c:	dc400615 	stw	r17,24(sp)
 400c040:	3021883a 	mov	r16,r6
 400c044:	202d883a 	mov	r22,r4
 400c048:	2829883a 	mov	r20,r5
 400c04c:	38002b1e 	bne	r7,zero,400c0fc <__umoddi3+0xe8>
 400c050:	29805036 	bltu	r5,r6,400c194 <__umoddi3+0x180>
 400c054:	30008a26 	beq	r6,zero,400c280 <__umoddi3+0x26c>
 400c058:	00bfffd4 	movui	r2,65535
 400c05c:	14008236 	bltu	r2,r16,400c268 <__umoddi3+0x254>
 400c060:	00803fc4 	movi	r2,255
 400c064:	14013636 	bltu	r2,r16,400c540 <__umoddi3+0x52c>
 400c068:	000b883a 	mov	r5,zero
 400c06c:	0005883a 	mov	r2,zero
 400c070:	8084d83a 	srl	r2,r16,r2
 400c074:	010100f4 	movhi	r4,1027
 400c078:	210b5204 	addi	r4,r4,11592
 400c07c:	01800804 	movi	r6,32
 400c080:	1105883a 	add	r2,r2,r4
 400c084:	10c00003 	ldbu	r3,0(r2)
 400c088:	28c7883a 	add	r3,r5,r3
 400c08c:	30efc83a 	sub	r23,r6,r3
 400c090:	b800941e 	bne	r23,zero,400c2e4 <__umoddi3+0x2d0>
 400c094:	802ad43a 	srli	r21,r16,16
 400c098:	a423c83a 	sub	r17,r20,r16
 400c09c:	0039883a 	mov	fp,zero
 400c0a0:	853fffcc 	andi	r20,r16,65535
 400c0a4:	8809883a 	mov	r4,r17
 400c0a8:	a80b883a 	mov	r5,r21
 400c0ac:	400d82c0 	call	400d82c <__udivsi3>
 400c0b0:	8809883a 	mov	r4,r17
 400c0b4:	a80b883a 	mov	r5,r21
 400c0b8:	a0a3383a 	mul	r17,r20,r2
 400c0bc:	400d8340 	call	400d834 <__umodsi3>
 400c0c0:	1004943a 	slli	r2,r2,16
 400c0c4:	b006d43a 	srli	r3,r22,16
 400c0c8:	10c4b03a 	or	r2,r2,r3
 400c0cc:	1440032e 	bgeu	r2,r17,400c0dc <__umoddi3+0xc8>
 400c0d0:	1405883a 	add	r2,r2,r16
 400c0d4:	14000136 	bltu	r2,r16,400c0dc <__umoddi3+0xc8>
 400c0d8:	14413536 	bltu	r2,r17,400c5b0 <__umoddi3+0x59c>
 400c0dc:	1463c83a 	sub	r17,r2,r17
 400c0e0:	8809883a 	mov	r4,r17
 400c0e4:	a80b883a 	mov	r5,r21
 400c0e8:	400d82c0 	call	400d82c <__udivsi3>
 400c0ec:	8809883a 	mov	r4,r17
 400c0f0:	a0a3383a 	mul	r17,r20,r2
 400c0f4:	a80b883a 	mov	r5,r21
 400c0f8:	00004d06 	br	400c230 <__umoddi3+0x21c>
 400c0fc:	380d883a 	mov	r6,r7
 400c100:	29c0102e 	bgeu	r5,r7,400c144 <__umoddi3+0x130>
 400c104:	2011883a 	mov	r8,r4
 400c108:	2813883a 	mov	r9,r5
 400c10c:	4005883a 	mov	r2,r8
 400c110:	4807883a 	mov	r3,r9
 400c114:	dfc00e17 	ldw	ra,56(sp)
 400c118:	df000d17 	ldw	fp,52(sp)
 400c11c:	ddc00c17 	ldw	r23,48(sp)
 400c120:	dd800b17 	ldw	r22,44(sp)
 400c124:	dd400a17 	ldw	r21,40(sp)
 400c128:	dd000917 	ldw	r20,36(sp)
 400c12c:	dcc00817 	ldw	r19,32(sp)
 400c130:	dc800717 	ldw	r18,28(sp)
 400c134:	dc400617 	ldw	r17,24(sp)
 400c138:	dc000517 	ldw	r16,20(sp)
 400c13c:	dec00f04 	addi	sp,sp,60
 400c140:	f800283a 	ret
 400c144:	00bfffd4 	movui	r2,65535
 400c148:	11c05a36 	bltu	r2,r7,400c2b4 <__umoddi3+0x2a0>
 400c14c:	00803fc4 	movi	r2,255
 400c150:	11c0fe36 	bltu	r2,r7,400c54c <__umoddi3+0x538>
 400c154:	000b883a 	mov	r5,zero
 400c158:	0005883a 	mov	r2,zero
 400c15c:	3084d83a 	srl	r2,r6,r2
 400c160:	010100f4 	movhi	r4,1027
 400c164:	210b5204 	addi	r4,r4,11592
 400c168:	01c00804 	movi	r7,32
 400c16c:	1105883a 	add	r2,r2,r4
 400c170:	10c00003 	ldbu	r3,0(r2)
 400c174:	28c7883a 	add	r3,r5,r3
 400c178:	38ebc83a 	sub	r21,r7,r3
 400c17c:	a800851e 	bne	r21,zero,400c394 <__umoddi3+0x380>
 400c180:	35005236 	bltu	r6,r20,400c2cc <__umoddi3+0x2b8>
 400c184:	b400512e 	bgeu	r22,r16,400c2cc <__umoddi3+0x2b8>
 400c188:	b011883a 	mov	r8,r22
 400c18c:	a013883a 	mov	r9,r20
 400c190:	003fde06 	br	400c10c <__umoddi3+0xf8>
 400c194:	00bfffd4 	movui	r2,65535
 400c198:	11804036 	bltu	r2,r6,400c29c <__umoddi3+0x288>
 400c19c:	00803fc4 	movi	r2,255
 400c1a0:	1180ed36 	bltu	r2,r6,400c558 <__umoddi3+0x544>
 400c1a4:	000b883a 	mov	r5,zero
 400c1a8:	0005883a 	mov	r2,zero
 400c1ac:	8084d83a 	srl	r2,r16,r2
 400c1b0:	010100f4 	movhi	r4,1027
 400c1b4:	210b5204 	addi	r4,r4,11592
 400c1b8:	01800804 	movi	r6,32
 400c1bc:	1105883a 	add	r2,r2,r4
 400c1c0:	10c00003 	ldbu	r3,0(r2)
 400c1c4:	28c7883a 	add	r3,r5,r3
 400c1c8:	30c7c83a 	sub	r3,r6,r3
 400c1cc:	1800bf1e 	bne	r3,zero,400c4cc <__umoddi3+0x4b8>
 400c1d0:	0039883a 	mov	fp,zero
 400c1d4:	802ad43a 	srli	r21,r16,16
 400c1d8:	a009883a 	mov	r4,r20
 400c1dc:	85ffffcc 	andi	r23,r16,65535
 400c1e0:	a80b883a 	mov	r5,r21
 400c1e4:	400d82c0 	call	400d82c <__udivsi3>
 400c1e8:	a009883a 	mov	r4,r20
 400c1ec:	a80b883a 	mov	r5,r21
 400c1f0:	b8a3383a 	mul	r17,r23,r2
 400c1f4:	400d8340 	call	400d834 <__umodsi3>
 400c1f8:	1004943a 	slli	r2,r2,16
 400c1fc:	b006d43a 	srli	r3,r22,16
 400c200:	10c4b03a 	or	r2,r2,r3
 400c204:	1440032e 	bgeu	r2,r17,400c214 <__umoddi3+0x200>
 400c208:	1405883a 	add	r2,r2,r16
 400c20c:	14000136 	bltu	r2,r16,400c214 <__umoddi3+0x200>
 400c210:	1440e536 	bltu	r2,r17,400c5a8 <__umoddi3+0x594>
 400c214:	1463c83a 	sub	r17,r2,r17
 400c218:	8809883a 	mov	r4,r17
 400c21c:	a80b883a 	mov	r5,r21
 400c220:	400d82c0 	call	400d82c <__udivsi3>
 400c224:	8809883a 	mov	r4,r17
 400c228:	b8a3383a 	mul	r17,r23,r2
 400c22c:	a80b883a 	mov	r5,r21
 400c230:	400d8340 	call	400d834 <__umodsi3>
 400c234:	1004943a 	slli	r2,r2,16
 400c238:	b0ffffcc 	andi	r3,r22,65535
 400c23c:	10c4b03a 	or	r2,r2,r3
 400c240:	1440042e 	bgeu	r2,r17,400c254 <__umoddi3+0x240>
 400c244:	1405883a 	add	r2,r2,r16
 400c248:	14000236 	bltu	r2,r16,400c254 <__umoddi3+0x240>
 400c24c:	1440012e 	bgeu	r2,r17,400c254 <__umoddi3+0x240>
 400c250:	1405883a 	add	r2,r2,r16
 400c254:	1445c83a 	sub	r2,r2,r17
 400c258:	1724d83a 	srl	r18,r2,fp
 400c25c:	0013883a 	mov	r9,zero
 400c260:	9011883a 	mov	r8,r18
 400c264:	003fa906 	br	400c10c <__umoddi3+0xf8>
 400c268:	00804034 	movhi	r2,256
 400c26c:	10bfffc4 	addi	r2,r2,-1
 400c270:	1400b036 	bltu	r2,r16,400c534 <__umoddi3+0x520>
 400c274:	01400404 	movi	r5,16
 400c278:	2805883a 	mov	r2,r5
 400c27c:	003f7c06 	br	400c070 <__umoddi3+0x5c>
 400c280:	01000044 	movi	r4,1
 400c284:	000b883a 	mov	r5,zero
 400c288:	400d82c0 	call	400d82c <__udivsi3>
 400c28c:	1021883a 	mov	r16,r2
 400c290:	00bfffd4 	movui	r2,65535
 400c294:	143ff436 	bltu	r2,r16,400c268 <__umoddi3+0x254>
 400c298:	003f7106 	br	400c060 <__umoddi3+0x4c>
 400c29c:	00804034 	movhi	r2,256
 400c2a0:	10bfffc4 	addi	r2,r2,-1
 400c2a4:	1180af36 	bltu	r2,r6,400c564 <__umoddi3+0x550>
 400c2a8:	01400404 	movi	r5,16
 400c2ac:	2805883a 	mov	r2,r5
 400c2b0:	003fbe06 	br	400c1ac <__umoddi3+0x198>
 400c2b4:	00804034 	movhi	r2,256
 400c2b8:	10bfffc4 	addi	r2,r2,-1
 400c2bc:	11c0ac36 	bltu	r2,r7,400c570 <__umoddi3+0x55c>
 400c2c0:	01400404 	movi	r5,16
 400c2c4:	2805883a 	mov	r2,r5
 400c2c8:	003fa406 	br	400c15c <__umoddi3+0x148>
 400c2cc:	b409c83a 	sub	r4,r22,r16
 400c2d0:	b105803a 	cmpltu	r2,r22,r4
 400c2d4:	a187c83a 	sub	r3,r20,r6
 400c2d8:	18a9c83a 	sub	r20,r3,r2
 400c2dc:	202d883a 	mov	r22,r4
 400c2e0:	003fa906 	br	400c188 <__umoddi3+0x174>
 400c2e4:	85e0983a 	sll	r16,r16,r23
 400c2e8:	35c5c83a 	sub	r2,r6,r23
 400c2ec:	a0a2d83a 	srl	r17,r20,r2
 400c2f0:	802ad43a 	srli	r21,r16,16
 400c2f4:	b084d83a 	srl	r2,r22,r2
 400c2f8:	a5c6983a 	sll	r3,r20,r23
 400c2fc:	8809883a 	mov	r4,r17
 400c300:	a80b883a 	mov	r5,r21
 400c304:	1886b03a 	or	r3,r3,r2
 400c308:	d8c00115 	stw	r3,4(sp)
 400c30c:	853fffcc 	andi	r20,r16,65535
 400c310:	400d82c0 	call	400d82c <__udivsi3>
 400c314:	8809883a 	mov	r4,r17
 400c318:	a80b883a 	mov	r5,r21
 400c31c:	a0a3383a 	mul	r17,r20,r2
 400c320:	400d8340 	call	400d834 <__umodsi3>
 400c324:	d9000117 	ldw	r4,4(sp)
 400c328:	1004943a 	slli	r2,r2,16
 400c32c:	b839883a 	mov	fp,r23
 400c330:	2006d43a 	srli	r3,r4,16
 400c334:	10c4b03a 	or	r2,r2,r3
 400c338:	1440022e 	bgeu	r2,r17,400c344 <__umoddi3+0x330>
 400c33c:	1405883a 	add	r2,r2,r16
 400c340:	1400962e 	bgeu	r2,r16,400c59c <__umoddi3+0x588>
 400c344:	1463c83a 	sub	r17,r2,r17
 400c348:	8809883a 	mov	r4,r17
 400c34c:	a80b883a 	mov	r5,r21
 400c350:	400d82c0 	call	400d82c <__udivsi3>
 400c354:	8809883a 	mov	r4,r17
 400c358:	a80b883a 	mov	r5,r21
 400c35c:	a0a3383a 	mul	r17,r20,r2
 400c360:	400d8340 	call	400d834 <__umodsi3>
 400c364:	d9400117 	ldw	r5,4(sp)
 400c368:	1004943a 	slli	r2,r2,16
 400c36c:	28ffffcc 	andi	r3,r5,65535
 400c370:	10c4b03a 	or	r2,r2,r3
 400c374:	1440042e 	bgeu	r2,r17,400c388 <__umoddi3+0x374>
 400c378:	1405883a 	add	r2,r2,r16
 400c37c:	14000236 	bltu	r2,r16,400c388 <__umoddi3+0x374>
 400c380:	1440012e 	bgeu	r2,r17,400c388 <__umoddi3+0x374>
 400c384:	1405883a 	add	r2,r2,r16
 400c388:	b5ec983a 	sll	r22,r22,r23
 400c38c:	1463c83a 	sub	r17,r2,r17
 400c390:	003f4406 	br	400c0a4 <__umoddi3+0x90>
 400c394:	3d4fc83a 	sub	r7,r7,r21
 400c398:	3546983a 	sll	r3,r6,r21
 400c39c:	81c4d83a 	srl	r2,r16,r7
 400c3a0:	a1e2d83a 	srl	r17,r20,r7
 400c3a4:	a54c983a 	sll	r6,r20,r21
 400c3a8:	18aeb03a 	or	r23,r3,r2
 400c3ac:	b828d43a 	srli	r20,r23,16
 400c3b0:	b1c4d83a 	srl	r2,r22,r7
 400c3b4:	8809883a 	mov	r4,r17
 400c3b8:	a00b883a 	mov	r5,r20
 400c3bc:	308cb03a 	or	r6,r6,r2
 400c3c0:	d9c00315 	stw	r7,12(sp)
 400c3c4:	d9800215 	stw	r6,8(sp)
 400c3c8:	400d82c0 	call	400d82c <__udivsi3>
 400c3cc:	8809883a 	mov	r4,r17
 400c3d0:	a00b883a 	mov	r5,r20
 400c3d4:	1039883a 	mov	fp,r2
 400c3d8:	400d8340 	call	400d834 <__umodsi3>
 400c3dc:	b8ffffcc 	andi	r3,r23,65535
 400c3e0:	d8c00415 	stw	r3,16(sp)
 400c3e4:	d9000217 	ldw	r4,8(sp)
 400c3e8:	d9400417 	ldw	r5,16(sp)
 400c3ec:	1004943a 	slli	r2,r2,16
 400c3f0:	2006d43a 	srli	r3,r4,16
 400c3f4:	8560983a 	sll	r16,r16,r21
 400c3f8:	2f23383a 	mul	r17,r5,fp
 400c3fc:	10c4b03a 	or	r2,r2,r3
 400c400:	dc000015 	stw	r16,0(sp)
 400c404:	b56c983a 	sll	r22,r22,r21
 400c408:	1440032e 	bgeu	r2,r17,400c418 <__umoddi3+0x404>
 400c40c:	15c5883a 	add	r2,r2,r23
 400c410:	e73fffc4 	addi	fp,fp,-1
 400c414:	15c05d2e 	bgeu	r2,r23,400c58c <__umoddi3+0x578>
 400c418:	1463c83a 	sub	r17,r2,r17
 400c41c:	8809883a 	mov	r4,r17
 400c420:	a00b883a 	mov	r5,r20
 400c424:	400d82c0 	call	400d82c <__udivsi3>
 400c428:	8809883a 	mov	r4,r17
 400c42c:	a00b883a 	mov	r5,r20
 400c430:	1021883a 	mov	r16,r2
 400c434:	400d8340 	call	400d834 <__umodsi3>
 400c438:	d8c00417 	ldw	r3,16(sp)
 400c43c:	d9000217 	ldw	r4,8(sp)
 400c440:	1004943a 	slli	r2,r2,16
 400c444:	1c23383a 	mul	r17,r3,r16
 400c448:	20ffffcc 	andi	r3,r4,65535
 400c44c:	10ceb03a 	or	r7,r2,r3
 400c450:	3c40032e 	bgeu	r7,r17,400c460 <__umoddi3+0x44c>
 400c454:	3dcf883a 	add	r7,r7,r23
 400c458:	843fffc4 	addi	r16,r16,-1
 400c45c:	3dc0472e 	bgeu	r7,r23,400c57c <__umoddi3+0x568>
 400c460:	e004943a 	slli	r2,fp,16
 400c464:	d9400017 	ldw	r5,0(sp)
 400c468:	3c4fc83a 	sub	r7,r7,r17
 400c46c:	8084b03a 	or	r2,r16,r2
 400c470:	28ffffcc 	andi	r3,r5,65535
 400c474:	280cd43a 	srli	r6,r5,16
 400c478:	100ad43a 	srli	r5,r2,16
 400c47c:	10bfffcc 	andi	r2,r2,65535
 400c480:	10d1383a 	mul	r8,r2,r3
 400c484:	28c7383a 	mul	r3,r5,r3
 400c488:	1185383a 	mul	r2,r2,r6
 400c48c:	4008d43a 	srli	r4,r8,16
 400c490:	298b383a 	mul	r5,r5,r6
 400c494:	10c5883a 	add	r2,r2,r3
 400c498:	2089883a 	add	r4,r4,r2
 400c49c:	20c0022e 	bgeu	r4,r3,400c4a8 <__umoddi3+0x494>
 400c4a0:	00800074 	movhi	r2,1
 400c4a4:	288b883a 	add	r5,r5,r2
 400c4a8:	2004d43a 	srli	r2,r4,16
 400c4ac:	2008943a 	slli	r4,r4,16
 400c4b0:	40ffffcc 	andi	r3,r8,65535
 400c4b4:	288b883a 	add	r5,r5,r2
 400c4b8:	20c9883a 	add	r4,r4,r3
 400c4bc:	39400b36 	bltu	r7,r5,400c4ec <__umoddi3+0x4d8>
 400c4c0:	39403d26 	beq	r7,r5,400c5b8 <__umoddi3+0x5a4>
 400c4c4:	394bc83a 	sub	r5,r7,r5
 400c4c8:	00000f06 	br	400c508 <__umoddi3+0x4f4>
 400c4cc:	30c5c83a 	sub	r2,r6,r3
 400c4d0:	1839883a 	mov	fp,r3
 400c4d4:	b084d83a 	srl	r2,r22,r2
 400c4d8:	a0c6983a 	sll	r3,r20,r3
 400c4dc:	8720983a 	sll	r16,r16,fp
 400c4e0:	b72c983a 	sll	r22,r22,fp
 400c4e4:	18a8b03a 	or	r20,r3,r2
 400c4e8:	003f3a06 	br	400c1d4 <__umoddi3+0x1c0>
 400c4ec:	d8c00017 	ldw	r3,0(sp)
 400c4f0:	20c5c83a 	sub	r2,r4,r3
 400c4f4:	2089803a 	cmpltu	r4,r4,r2
 400c4f8:	2dc7c83a 	sub	r3,r5,r23
 400c4fc:	1907c83a 	sub	r3,r3,r4
 400c500:	38cbc83a 	sub	r5,r7,r3
 400c504:	1009883a 	mov	r4,r2
 400c508:	b105c83a 	sub	r2,r22,r4
 400c50c:	b087803a 	cmpltu	r3,r22,r2
 400c510:	28c7c83a 	sub	r3,r5,r3
 400c514:	d9400317 	ldw	r5,12(sp)
 400c518:	1544d83a 	srl	r2,r2,r21
 400c51c:	1948983a 	sll	r4,r3,r5
 400c520:	1d46d83a 	srl	r3,r3,r21
 400c524:	20a4b03a 	or	r18,r4,r2
 400c528:	9011883a 	mov	r8,r18
 400c52c:	1813883a 	mov	r9,r3
 400c530:	003ef606 	br	400c10c <__umoddi3+0xf8>
 400c534:	01400604 	movi	r5,24
 400c538:	2805883a 	mov	r2,r5
 400c53c:	003ecc06 	br	400c070 <__umoddi3+0x5c>
 400c540:	01400204 	movi	r5,8
 400c544:	2805883a 	mov	r2,r5
 400c548:	003ec906 	br	400c070 <__umoddi3+0x5c>
 400c54c:	01400204 	movi	r5,8
 400c550:	2805883a 	mov	r2,r5
 400c554:	003f0106 	br	400c15c <__umoddi3+0x148>
 400c558:	01400204 	movi	r5,8
 400c55c:	2805883a 	mov	r2,r5
 400c560:	003f1206 	br	400c1ac <__umoddi3+0x198>
 400c564:	01400604 	movi	r5,24
 400c568:	2805883a 	mov	r2,r5
 400c56c:	003f0f06 	br	400c1ac <__umoddi3+0x198>
 400c570:	01400604 	movi	r5,24
 400c574:	2805883a 	mov	r2,r5
 400c578:	003ef806 	br	400c15c <__umoddi3+0x148>
 400c57c:	3c7fb82e 	bgeu	r7,r17,400c460 <__umoddi3+0x44c>
 400c580:	843fffc4 	addi	r16,r16,-1
 400c584:	3dcf883a 	add	r7,r7,r23
 400c588:	003fb506 	br	400c460 <__umoddi3+0x44c>
 400c58c:	147fa22e 	bgeu	r2,r17,400c418 <__umoddi3+0x404>
 400c590:	e73fffc4 	addi	fp,fp,-1
 400c594:	15c5883a 	add	r2,r2,r23
 400c598:	003f9f06 	br	400c418 <__umoddi3+0x404>
 400c59c:	147f692e 	bgeu	r2,r17,400c344 <__umoddi3+0x330>
 400c5a0:	1405883a 	add	r2,r2,r16
 400c5a4:	003f6706 	br	400c344 <__umoddi3+0x330>
 400c5a8:	1405883a 	add	r2,r2,r16
 400c5ac:	003f1906 	br	400c214 <__umoddi3+0x200>
 400c5b0:	1405883a 	add	r2,r2,r16
 400c5b4:	003ec906 	br	400c0dc <__umoddi3+0xc8>
 400c5b8:	b13fcc36 	bltu	r22,r4,400c4ec <__umoddi3+0x4d8>
 400c5bc:	000b883a 	mov	r5,zero
 400c5c0:	003fd106 	br	400c508 <__umoddi3+0x4f4>

0400c5c4 <_fpadd_parts>:
 400c5c4:	defff804 	addi	sp,sp,-32
 400c5c8:	dcc00315 	stw	r19,12(sp)
 400c5cc:	2027883a 	mov	r19,r4
 400c5d0:	21000017 	ldw	r4,0(r4)
 400c5d4:	00c00044 	movi	r3,1
 400c5d8:	dd400515 	stw	r21,20(sp)
 400c5dc:	dd000415 	stw	r20,16(sp)
 400c5e0:	ddc00715 	stw	r23,28(sp)
 400c5e4:	dd800615 	stw	r22,24(sp)
 400c5e8:	dc800215 	stw	r18,8(sp)
 400c5ec:	dc400115 	stw	r17,4(sp)
 400c5f0:	dc000015 	stw	r16,0(sp)
 400c5f4:	282b883a 	mov	r21,r5
 400c5f8:	3029883a 	mov	r20,r6
 400c5fc:	1900632e 	bgeu	r3,r4,400c78c <_fpadd_parts+0x1c8>
 400c600:	28800017 	ldw	r2,0(r5)
 400c604:	1880812e 	bgeu	r3,r2,400c80c <_fpadd_parts+0x248>
 400c608:	00c00104 	movi	r3,4
 400c60c:	20c0dc26 	beq	r4,r3,400c980 <_fpadd_parts+0x3bc>
 400c610:	10c07e26 	beq	r2,r3,400c80c <_fpadd_parts+0x248>
 400c614:	00c00084 	movi	r3,2
 400c618:	10c06726 	beq	r2,r3,400c7b8 <_fpadd_parts+0x1f4>
 400c61c:	20c07b26 	beq	r4,r3,400c80c <_fpadd_parts+0x248>
 400c620:	9dc00217 	ldw	r23,8(r19)
 400c624:	28c00217 	ldw	r3,8(r5)
 400c628:	9c400317 	ldw	r17,12(r19)
 400c62c:	2bc00317 	ldw	r15,12(r5)
 400c630:	b8cdc83a 	sub	r6,r23,r3
 400c634:	9c800417 	ldw	r18,16(r19)
 400c638:	2c000417 	ldw	r16,16(r5)
 400c63c:	3009883a 	mov	r4,r6
 400c640:	30009716 	blt	r6,zero,400c8a0 <_fpadd_parts+0x2dc>
 400c644:	00800fc4 	movi	r2,63
 400c648:	11806b16 	blt	r2,r6,400c7f8 <_fpadd_parts+0x234>
 400c64c:	0100a40e 	bge	zero,r4,400c8e0 <_fpadd_parts+0x31c>
 400c650:	35bff804 	addi	r22,r6,-32
 400c654:	b000bc16 	blt	r22,zero,400c948 <_fpadd_parts+0x384>
 400c658:	8596d83a 	srl	r11,r16,r22
 400c65c:	0019883a 	mov	r12,zero
 400c660:	0013883a 	mov	r9,zero
 400c664:	01000044 	movi	r4,1
 400c668:	0015883a 	mov	r10,zero
 400c66c:	b000be16 	blt	r22,zero,400c968 <_fpadd_parts+0x3a4>
 400c670:	2590983a 	sll	r8,r4,r22
 400c674:	000f883a 	mov	r7,zero
 400c678:	00bfffc4 	movi	r2,-1
 400c67c:	3889883a 	add	r4,r7,r2
 400c680:	408b883a 	add	r5,r8,r2
 400c684:	21cd803a 	cmpltu	r6,r4,r7
 400c688:	314b883a 	add	r5,r6,r5
 400c68c:	7904703a 	and	r2,r15,r4
 400c690:	8146703a 	and	r3,r16,r5
 400c694:	10c4b03a 	or	r2,r2,r3
 400c698:	10000226 	beq	r2,zero,400c6a4 <_fpadd_parts+0xe0>
 400c69c:	02400044 	movi	r9,1
 400c6a0:	0015883a 	mov	r10,zero
 400c6a4:	5a5eb03a 	or	r15,r11,r9
 400c6a8:	62a0b03a 	or	r16,r12,r10
 400c6ac:	99400117 	ldw	r5,4(r19)
 400c6b0:	a8800117 	ldw	r2,4(r21)
 400c6b4:	28806e26 	beq	r5,r2,400c870 <_fpadd_parts+0x2ac>
 400c6b8:	28006626 	beq	r5,zero,400c854 <_fpadd_parts+0x290>
 400c6bc:	7c45c83a 	sub	r2,r15,r17
 400c6c0:	7889803a 	cmpltu	r4,r15,r2
 400c6c4:	8487c83a 	sub	r3,r16,r18
 400c6c8:	1909c83a 	sub	r4,r3,r4
 400c6cc:	100d883a 	mov	r6,r2
 400c6d0:	200f883a 	mov	r7,r4
 400c6d4:	38007716 	blt	r7,zero,400c8b4 <_fpadd_parts+0x2f0>
 400c6d8:	a5c00215 	stw	r23,8(r20)
 400c6dc:	a1c00415 	stw	r7,16(r20)
 400c6e0:	a0000115 	stw	zero,4(r20)
 400c6e4:	a1800315 	stw	r6,12(r20)
 400c6e8:	a2000317 	ldw	r8,12(r20)
 400c6ec:	a2400417 	ldw	r9,16(r20)
 400c6f0:	00bfffc4 	movi	r2,-1
 400c6f4:	408b883a 	add	r5,r8,r2
 400c6f8:	2a09803a 	cmpltu	r4,r5,r8
 400c6fc:	488d883a 	add	r6,r9,r2
 400c700:	01c40034 	movhi	r7,4096
 400c704:	39ffffc4 	addi	r7,r7,-1
 400c708:	218d883a 	add	r6,r4,r6
 400c70c:	39801736 	bltu	r7,r6,400c76c <_fpadd_parts+0x1a8>
 400c710:	31c06526 	beq	r6,r7,400c8a8 <_fpadd_parts+0x2e4>
 400c714:	a3000217 	ldw	r12,8(r20)
 400c718:	4209883a 	add	r4,r8,r8
 400c71c:	00bfffc4 	movi	r2,-1
 400c720:	220f803a 	cmpltu	r7,r4,r8
 400c724:	4a4b883a 	add	r5,r9,r9
 400c728:	394f883a 	add	r7,r7,r5
 400c72c:	2095883a 	add	r10,r4,r2
 400c730:	3897883a 	add	r11,r7,r2
 400c734:	510d803a 	cmpltu	r6,r10,r4
 400c738:	6099883a 	add	r12,r12,r2
 400c73c:	32d7883a 	add	r11,r6,r11
 400c740:	00840034 	movhi	r2,4096
 400c744:	10bfffc4 	addi	r2,r2,-1
 400c748:	2011883a 	mov	r8,r4
 400c74c:	3813883a 	mov	r9,r7
 400c750:	a1000315 	stw	r4,12(r20)
 400c754:	a1c00415 	stw	r7,16(r20)
 400c758:	a3000215 	stw	r12,8(r20)
 400c75c:	12c00336 	bltu	r2,r11,400c76c <_fpadd_parts+0x1a8>
 400c760:	58bfed1e 	bne	r11,r2,400c718 <_fpadd_parts+0x154>
 400c764:	00bfff84 	movi	r2,-2
 400c768:	12bfeb2e 	bgeu	r2,r10,400c718 <_fpadd_parts+0x154>
 400c76c:	a2800417 	ldw	r10,16(r20)
 400c770:	008000c4 	movi	r2,3
 400c774:	00c80034 	movhi	r3,8192
 400c778:	18ffffc4 	addi	r3,r3,-1
 400c77c:	a2400317 	ldw	r9,12(r20)
 400c780:	a0800015 	stw	r2,0(r20)
 400c784:	1a802336 	bltu	r3,r10,400c814 <_fpadd_parts+0x250>
 400c788:	a027883a 	mov	r19,r20
 400c78c:	9805883a 	mov	r2,r19
 400c790:	ddc00717 	ldw	r23,28(sp)
 400c794:	dd800617 	ldw	r22,24(sp)
 400c798:	dd400517 	ldw	r21,20(sp)
 400c79c:	dd000417 	ldw	r20,16(sp)
 400c7a0:	dcc00317 	ldw	r19,12(sp)
 400c7a4:	dc800217 	ldw	r18,8(sp)
 400c7a8:	dc400117 	ldw	r17,4(sp)
 400c7ac:	dc000017 	ldw	r16,0(sp)
 400c7b0:	dec00804 	addi	sp,sp,32
 400c7b4:	f800283a 	ret
 400c7b8:	20fff41e 	bne	r4,r3,400c78c <_fpadd_parts+0x1c8>
 400c7bc:	31000015 	stw	r4,0(r6)
 400c7c0:	98800117 	ldw	r2,4(r19)
 400c7c4:	30800115 	stw	r2,4(r6)
 400c7c8:	98c00217 	ldw	r3,8(r19)
 400c7cc:	30c00215 	stw	r3,8(r6)
 400c7d0:	98800317 	ldw	r2,12(r19)
 400c7d4:	30800315 	stw	r2,12(r6)
 400c7d8:	98c00417 	ldw	r3,16(r19)
 400c7dc:	30c00415 	stw	r3,16(r6)
 400c7e0:	98800117 	ldw	r2,4(r19)
 400c7e4:	28c00117 	ldw	r3,4(r5)
 400c7e8:	3027883a 	mov	r19,r6
 400c7ec:	10c4703a 	and	r2,r2,r3
 400c7f0:	30800115 	stw	r2,4(r6)
 400c7f4:	003fe506 	br	400c78c <_fpadd_parts+0x1c8>
 400c7f8:	1dc02616 	blt	r3,r23,400c894 <_fpadd_parts+0x2d0>
 400c7fc:	0023883a 	mov	r17,zero
 400c800:	182f883a 	mov	r23,r3
 400c804:	0025883a 	mov	r18,zero
 400c808:	003fa806 	br	400c6ac <_fpadd_parts+0xe8>
 400c80c:	a827883a 	mov	r19,r21
 400c810:	003fde06 	br	400c78c <_fpadd_parts+0x1c8>
 400c814:	01800044 	movi	r6,1
 400c818:	500497fa 	slli	r2,r10,31
 400c81c:	4808d07a 	srli	r4,r9,1
 400c820:	518ad83a 	srl	r5,r10,r6
 400c824:	a2000217 	ldw	r8,8(r20)
 400c828:	1108b03a 	or	r4,r2,r4
 400c82c:	0007883a 	mov	r3,zero
 400c830:	4984703a 	and	r2,r9,r6
 400c834:	208cb03a 	or	r6,r4,r2
 400c838:	28ceb03a 	or	r7,r5,r3
 400c83c:	42000044 	addi	r8,r8,1
 400c840:	a027883a 	mov	r19,r20
 400c844:	a1c00415 	stw	r7,16(r20)
 400c848:	a2000215 	stw	r8,8(r20)
 400c84c:	a1800315 	stw	r6,12(r20)
 400c850:	003fce06 	br	400c78c <_fpadd_parts+0x1c8>
 400c854:	8bc5c83a 	sub	r2,r17,r15
 400c858:	8889803a 	cmpltu	r4,r17,r2
 400c85c:	9407c83a 	sub	r3,r18,r16
 400c860:	1909c83a 	sub	r4,r3,r4
 400c864:	100d883a 	mov	r6,r2
 400c868:	200f883a 	mov	r7,r4
 400c86c:	003f9906 	br	400c6d4 <_fpadd_parts+0x110>
 400c870:	8bc5883a 	add	r2,r17,r15
 400c874:	1449803a 	cmpltu	r4,r2,r17
 400c878:	9407883a 	add	r3,r18,r16
 400c87c:	20c9883a 	add	r4,r4,r3
 400c880:	a1400115 	stw	r5,4(r20)
 400c884:	a5c00215 	stw	r23,8(r20)
 400c888:	a0800315 	stw	r2,12(r20)
 400c88c:	a1000415 	stw	r4,16(r20)
 400c890:	003fb606 	br	400c76c <_fpadd_parts+0x1a8>
 400c894:	001f883a 	mov	r15,zero
 400c898:	0021883a 	mov	r16,zero
 400c89c:	003f8306 	br	400c6ac <_fpadd_parts+0xe8>
 400c8a0:	018dc83a 	sub	r6,zero,r6
 400c8a4:	003f6706 	br	400c644 <_fpadd_parts+0x80>
 400c8a8:	00bfff84 	movi	r2,-2
 400c8ac:	117faf36 	bltu	r2,r5,400c76c <_fpadd_parts+0x1a8>
 400c8b0:	003f9806 	br	400c714 <_fpadd_parts+0x150>
 400c8b4:	0005883a 	mov	r2,zero
 400c8b8:	1189c83a 	sub	r4,r2,r6
 400c8bc:	1105803a 	cmpltu	r2,r2,r4
 400c8c0:	01cbc83a 	sub	r5,zero,r7
 400c8c4:	2885c83a 	sub	r2,r5,r2
 400c8c8:	01800044 	movi	r6,1
 400c8cc:	a1800115 	stw	r6,4(r20)
 400c8d0:	a5c00215 	stw	r23,8(r20)
 400c8d4:	a1000315 	stw	r4,12(r20)
 400c8d8:	a0800415 	stw	r2,16(r20)
 400c8dc:	003f8206 	br	400c6e8 <_fpadd_parts+0x124>
 400c8e0:	203f7226 	beq	r4,zero,400c6ac <_fpadd_parts+0xe8>
 400c8e4:	35bff804 	addi	r22,r6,-32
 400c8e8:	b9af883a 	add	r23,r23,r6
 400c8ec:	b0003116 	blt	r22,zero,400c9b4 <_fpadd_parts+0x3f0>
 400c8f0:	959ad83a 	srl	r13,r18,r22
 400c8f4:	001d883a 	mov	r14,zero
 400c8f8:	000f883a 	mov	r7,zero
 400c8fc:	01000044 	movi	r4,1
 400c900:	0011883a 	mov	r8,zero
 400c904:	b0002516 	blt	r22,zero,400c99c <_fpadd_parts+0x3d8>
 400c908:	2594983a 	sll	r10,r4,r22
 400c90c:	0013883a 	mov	r9,zero
 400c910:	00bfffc4 	movi	r2,-1
 400c914:	4889883a 	add	r4,r9,r2
 400c918:	508b883a 	add	r5,r10,r2
 400c91c:	224d803a 	cmpltu	r6,r4,r9
 400c920:	314b883a 	add	r5,r6,r5
 400c924:	8904703a 	and	r2,r17,r4
 400c928:	9146703a 	and	r3,r18,r5
 400c92c:	10c4b03a 	or	r2,r2,r3
 400c930:	10000226 	beq	r2,zero,400c93c <_fpadd_parts+0x378>
 400c934:	01c00044 	movi	r7,1
 400c938:	0011883a 	mov	r8,zero
 400c93c:	69e2b03a 	or	r17,r13,r7
 400c940:	7224b03a 	or	r18,r14,r8
 400c944:	003f5906 	br	400c6ac <_fpadd_parts+0xe8>
 400c948:	8407883a 	add	r3,r16,r16
 400c94c:	008007c4 	movi	r2,31
 400c950:	1185c83a 	sub	r2,r2,r6
 400c954:	1886983a 	sll	r3,r3,r2
 400c958:	7996d83a 	srl	r11,r15,r6
 400c95c:	8198d83a 	srl	r12,r16,r6
 400c960:	1ad6b03a 	or	r11,r3,r11
 400c964:	003f3e06 	br	400c660 <_fpadd_parts+0x9c>
 400c968:	2006d07a 	srli	r3,r4,1
 400c96c:	008007c4 	movi	r2,31
 400c970:	1185c83a 	sub	r2,r2,r6
 400c974:	1890d83a 	srl	r8,r3,r2
 400c978:	218e983a 	sll	r7,r4,r6
 400c97c:	003f3e06 	br	400c678 <_fpadd_parts+0xb4>
 400c980:	113f821e 	bne	r2,r4,400c78c <_fpadd_parts+0x1c8>
 400c984:	28c00117 	ldw	r3,4(r5)
 400c988:	98800117 	ldw	r2,4(r19)
 400c98c:	10ff7f26 	beq	r2,r3,400c78c <_fpadd_parts+0x1c8>
 400c990:	04c100f4 	movhi	r19,1027
 400c994:	9ccb4d04 	addi	r19,r19,11572
 400c998:	003f7c06 	br	400c78c <_fpadd_parts+0x1c8>
 400c99c:	2006d07a 	srli	r3,r4,1
 400c9a0:	008007c4 	movi	r2,31
 400c9a4:	1185c83a 	sub	r2,r2,r6
 400c9a8:	1894d83a 	srl	r10,r3,r2
 400c9ac:	2192983a 	sll	r9,r4,r6
 400c9b0:	003fd706 	br	400c910 <_fpadd_parts+0x34c>
 400c9b4:	9487883a 	add	r3,r18,r18
 400c9b8:	008007c4 	movi	r2,31
 400c9bc:	1185c83a 	sub	r2,r2,r6
 400c9c0:	1886983a 	sll	r3,r3,r2
 400c9c4:	899ad83a 	srl	r13,r17,r6
 400c9c8:	919cd83a 	srl	r14,r18,r6
 400c9cc:	1b5ab03a 	or	r13,r3,r13
 400c9d0:	003fc906 	br	400c8f8 <_fpadd_parts+0x334>

0400c9d4 <__subdf3>:
 400c9d4:	deffea04 	addi	sp,sp,-88
 400c9d8:	dcc01415 	stw	r19,80(sp)
 400c9dc:	dcc00404 	addi	r19,sp,16
 400c9e0:	2011883a 	mov	r8,r4
 400c9e4:	2813883a 	mov	r9,r5
 400c9e8:	dc401315 	stw	r17,76(sp)
 400c9ec:	d809883a 	mov	r4,sp
 400c9f0:	980b883a 	mov	r5,r19
 400c9f4:	dc400904 	addi	r17,sp,36
 400c9f8:	dfc01515 	stw	ra,84(sp)
 400c9fc:	da400115 	stw	r9,4(sp)
 400ca00:	d9c00315 	stw	r7,12(sp)
 400ca04:	da000015 	stw	r8,0(sp)
 400ca08:	d9800215 	stw	r6,8(sp)
 400ca0c:	400dc680 	call	400dc68 <__unpack_d>
 400ca10:	d9000204 	addi	r4,sp,8
 400ca14:	880b883a 	mov	r5,r17
 400ca18:	400dc680 	call	400dc68 <__unpack_d>
 400ca1c:	d8800a17 	ldw	r2,40(sp)
 400ca20:	880b883a 	mov	r5,r17
 400ca24:	9809883a 	mov	r4,r19
 400ca28:	d9800e04 	addi	r6,sp,56
 400ca2c:	1080005c 	xori	r2,r2,1
 400ca30:	d8800a15 	stw	r2,40(sp)
 400ca34:	400c5c40 	call	400c5c4 <_fpadd_parts>
 400ca38:	1009883a 	mov	r4,r2
 400ca3c:	400d9540 	call	400d954 <__pack_d>
 400ca40:	dfc01517 	ldw	ra,84(sp)
 400ca44:	dcc01417 	ldw	r19,80(sp)
 400ca48:	dc401317 	ldw	r17,76(sp)
 400ca4c:	dec01604 	addi	sp,sp,88
 400ca50:	f800283a 	ret

0400ca54 <__adddf3>:
 400ca54:	deffea04 	addi	sp,sp,-88
 400ca58:	dcc01415 	stw	r19,80(sp)
 400ca5c:	dcc00404 	addi	r19,sp,16
 400ca60:	2011883a 	mov	r8,r4
 400ca64:	2813883a 	mov	r9,r5
 400ca68:	dc401315 	stw	r17,76(sp)
 400ca6c:	d809883a 	mov	r4,sp
 400ca70:	980b883a 	mov	r5,r19
 400ca74:	dc400904 	addi	r17,sp,36
 400ca78:	dfc01515 	stw	ra,84(sp)
 400ca7c:	da400115 	stw	r9,4(sp)
 400ca80:	d9c00315 	stw	r7,12(sp)
 400ca84:	da000015 	stw	r8,0(sp)
 400ca88:	d9800215 	stw	r6,8(sp)
 400ca8c:	400dc680 	call	400dc68 <__unpack_d>
 400ca90:	d9000204 	addi	r4,sp,8
 400ca94:	880b883a 	mov	r5,r17
 400ca98:	400dc680 	call	400dc68 <__unpack_d>
 400ca9c:	d9800e04 	addi	r6,sp,56
 400caa0:	9809883a 	mov	r4,r19
 400caa4:	880b883a 	mov	r5,r17
 400caa8:	400c5c40 	call	400c5c4 <_fpadd_parts>
 400caac:	1009883a 	mov	r4,r2
 400cab0:	400d9540 	call	400d954 <__pack_d>
 400cab4:	dfc01517 	ldw	ra,84(sp)
 400cab8:	dcc01417 	ldw	r19,80(sp)
 400cabc:	dc401317 	ldw	r17,76(sp)
 400cac0:	dec01604 	addi	sp,sp,88
 400cac4:	f800283a 	ret

0400cac8 <__muldf3>:
 400cac8:	deffe004 	addi	sp,sp,-128
 400cacc:	dc401815 	stw	r17,96(sp)
 400cad0:	dc400404 	addi	r17,sp,16
 400cad4:	2011883a 	mov	r8,r4
 400cad8:	2813883a 	mov	r9,r5
 400cadc:	dc001715 	stw	r16,92(sp)
 400cae0:	d809883a 	mov	r4,sp
 400cae4:	880b883a 	mov	r5,r17
 400cae8:	dc000904 	addi	r16,sp,36
 400caec:	dfc01f15 	stw	ra,124(sp)
 400caf0:	da400115 	stw	r9,4(sp)
 400caf4:	d9c00315 	stw	r7,12(sp)
 400caf8:	da000015 	stw	r8,0(sp)
 400cafc:	d9800215 	stw	r6,8(sp)
 400cb00:	ddc01e15 	stw	r23,120(sp)
 400cb04:	dd801d15 	stw	r22,116(sp)
 400cb08:	dd401c15 	stw	r21,112(sp)
 400cb0c:	dd001b15 	stw	r20,108(sp)
 400cb10:	dcc01a15 	stw	r19,104(sp)
 400cb14:	dc801915 	stw	r18,100(sp)
 400cb18:	400dc680 	call	400dc68 <__unpack_d>
 400cb1c:	d9000204 	addi	r4,sp,8
 400cb20:	800b883a 	mov	r5,r16
 400cb24:	400dc680 	call	400dc68 <__unpack_d>
 400cb28:	d9000417 	ldw	r4,16(sp)
 400cb2c:	00800044 	movi	r2,1
 400cb30:	1100102e 	bgeu	r2,r4,400cb74 <__muldf3+0xac>
 400cb34:	d8c00917 	ldw	r3,36(sp)
 400cb38:	10c0062e 	bgeu	r2,r3,400cb54 <__muldf3+0x8c>
 400cb3c:	00800104 	movi	r2,4
 400cb40:	20800a26 	beq	r4,r2,400cb6c <__muldf3+0xa4>
 400cb44:	1880cc26 	beq	r3,r2,400ce78 <__muldf3+0x3b0>
 400cb48:	00800084 	movi	r2,2
 400cb4c:	20800926 	beq	r4,r2,400cb74 <__muldf3+0xac>
 400cb50:	1880191e 	bne	r3,r2,400cbb8 <__muldf3+0xf0>
 400cb54:	d8c00a17 	ldw	r3,40(sp)
 400cb58:	d8800517 	ldw	r2,20(sp)
 400cb5c:	8009883a 	mov	r4,r16
 400cb60:	10c4c03a 	cmpne	r2,r2,r3
 400cb64:	d8800a15 	stw	r2,40(sp)
 400cb68:	00000706 	br	400cb88 <__muldf3+0xc0>
 400cb6c:	00800084 	movi	r2,2
 400cb70:	1880c326 	beq	r3,r2,400ce80 <__muldf3+0x3b8>
 400cb74:	d8800517 	ldw	r2,20(sp)
 400cb78:	d8c00a17 	ldw	r3,40(sp)
 400cb7c:	8809883a 	mov	r4,r17
 400cb80:	10c4c03a 	cmpne	r2,r2,r3
 400cb84:	d8800515 	stw	r2,20(sp)
 400cb88:	400d9540 	call	400d954 <__pack_d>
 400cb8c:	dfc01f17 	ldw	ra,124(sp)
 400cb90:	ddc01e17 	ldw	r23,120(sp)
 400cb94:	dd801d17 	ldw	r22,116(sp)
 400cb98:	dd401c17 	ldw	r21,112(sp)
 400cb9c:	dd001b17 	ldw	r20,108(sp)
 400cba0:	dcc01a17 	ldw	r19,104(sp)
 400cba4:	dc801917 	ldw	r18,100(sp)
 400cba8:	dc401817 	ldw	r17,96(sp)
 400cbac:	dc001717 	ldw	r16,92(sp)
 400cbb0:	dec02004 	addi	sp,sp,128
 400cbb4:	f800283a 	ret
 400cbb8:	dd800717 	ldw	r22,28(sp)
 400cbbc:	dc800c17 	ldw	r18,48(sp)
 400cbc0:	002b883a 	mov	r21,zero
 400cbc4:	0023883a 	mov	r17,zero
 400cbc8:	a80b883a 	mov	r5,r21
 400cbcc:	b00d883a 	mov	r6,r22
 400cbd0:	880f883a 	mov	r7,r17
 400cbd4:	ddc00817 	ldw	r23,32(sp)
 400cbd8:	dcc00d17 	ldw	r19,52(sp)
 400cbdc:	9009883a 	mov	r4,r18
 400cbe0:	400d83c0 	call	400d83c <__muldi3>
 400cbe4:	001b883a 	mov	r13,zero
 400cbe8:	680f883a 	mov	r7,r13
 400cbec:	b009883a 	mov	r4,r22
 400cbf0:	000b883a 	mov	r5,zero
 400cbf4:	980d883a 	mov	r6,r19
 400cbf8:	b82d883a 	mov	r22,r23
 400cbfc:	002f883a 	mov	r23,zero
 400cc00:	db401615 	stw	r13,88(sp)
 400cc04:	d8801315 	stw	r2,76(sp)
 400cc08:	d8c01415 	stw	r3,80(sp)
 400cc0c:	dcc01515 	stw	r19,84(sp)
 400cc10:	400d83c0 	call	400d83c <__muldi3>
 400cc14:	b00d883a 	mov	r6,r22
 400cc18:	000b883a 	mov	r5,zero
 400cc1c:	9009883a 	mov	r4,r18
 400cc20:	b80f883a 	mov	r7,r23
 400cc24:	1021883a 	mov	r16,r2
 400cc28:	1823883a 	mov	r17,r3
 400cc2c:	400d83c0 	call	400d83c <__muldi3>
 400cc30:	8085883a 	add	r2,r16,r2
 400cc34:	140d803a 	cmpltu	r6,r2,r16
 400cc38:	88c7883a 	add	r3,r17,r3
 400cc3c:	30cd883a 	add	r6,r6,r3
 400cc40:	1029883a 	mov	r20,r2
 400cc44:	302b883a 	mov	r21,r6
 400cc48:	da801317 	ldw	r10,76(sp)
 400cc4c:	dac01417 	ldw	r11,80(sp)
 400cc50:	db001517 	ldw	r12,84(sp)
 400cc54:	db401617 	ldw	r13,88(sp)
 400cc58:	3440612e 	bgeu	r6,r17,400cde0 <__muldf3+0x318>
 400cc5c:	0009883a 	mov	r4,zero
 400cc60:	5105883a 	add	r2,r10,r4
 400cc64:	128d803a 	cmpltu	r6,r2,r10
 400cc68:	5d07883a 	add	r3,r11,r20
 400cc6c:	30cd883a 	add	r6,r6,r3
 400cc70:	0021883a 	mov	r16,zero
 400cc74:	04400044 	movi	r17,1
 400cc78:	1025883a 	mov	r18,r2
 400cc7c:	3027883a 	mov	r19,r6
 400cc80:	32c06236 	bltu	r6,r11,400ce0c <__muldf3+0x344>
 400cc84:	59807a26 	beq	r11,r6,400ce70 <__muldf3+0x3a8>
 400cc88:	680b883a 	mov	r5,r13
 400cc8c:	b80f883a 	mov	r7,r23
 400cc90:	6009883a 	mov	r4,r12
 400cc94:	b00d883a 	mov	r6,r22
 400cc98:	400d83c0 	call	400d83c <__muldi3>
 400cc9c:	1009883a 	mov	r4,r2
 400cca0:	000f883a 	mov	r7,zero
 400cca4:	1545883a 	add	r2,r2,r21
 400cca8:	1111803a 	cmpltu	r8,r2,r4
 400ccac:	19c7883a 	add	r3,r3,r7
 400ccb0:	40c7883a 	add	r3,r8,r3
 400ccb4:	88cb883a 	add	r5,r17,r3
 400ccb8:	d8c00617 	ldw	r3,24(sp)
 400ccbc:	8089883a 	add	r4,r16,r2
 400ccc0:	d8800b17 	ldw	r2,44(sp)
 400ccc4:	18c00104 	addi	r3,r3,4
 400ccc8:	240d803a 	cmpltu	r6,r4,r16
 400cccc:	10c7883a 	add	r3,r2,r3
 400ccd0:	2013883a 	mov	r9,r4
 400ccd4:	d8800a17 	ldw	r2,40(sp)
 400ccd8:	d9000517 	ldw	r4,20(sp)
 400ccdc:	314d883a 	add	r6,r6,r5
 400cce0:	3015883a 	mov	r10,r6
 400cce4:	2088c03a 	cmpne	r4,r4,r2
 400cce8:	00880034 	movhi	r2,8192
 400ccec:	10bfffc4 	addi	r2,r2,-1
 400ccf0:	d9000f15 	stw	r4,60(sp)
 400ccf4:	d8c01015 	stw	r3,64(sp)
 400ccf8:	1180162e 	bgeu	r2,r6,400cd54 <__muldf3+0x28c>
 400ccfc:	1811883a 	mov	r8,r3
 400cd00:	101f883a 	mov	r15,r2
 400cd04:	980497fa 	slli	r2,r19,31
 400cd08:	9016d07a 	srli	r11,r18,1
 400cd0c:	500697fa 	slli	r3,r10,31
 400cd10:	480cd07a 	srli	r6,r9,1
 400cd14:	500ed07a 	srli	r7,r10,1
 400cd18:	12d6b03a 	or	r11,r2,r11
 400cd1c:	00800044 	movi	r2,1
 400cd20:	198cb03a 	or	r6,r3,r6
 400cd24:	4888703a 	and	r4,r9,r2
 400cd28:	9818d07a 	srli	r12,r19,1
 400cd2c:	001b883a 	mov	r13,zero
 400cd30:	03a00034 	movhi	r14,32768
 400cd34:	3013883a 	mov	r9,r6
 400cd38:	3815883a 	mov	r10,r7
 400cd3c:	4091883a 	add	r8,r8,r2
 400cd40:	20000226 	beq	r4,zero,400cd4c <__muldf3+0x284>
 400cd44:	5b64b03a 	or	r18,r11,r13
 400cd48:	63a6b03a 	or	r19,r12,r14
 400cd4c:	7abfed36 	bltu	r15,r10,400cd04 <__muldf3+0x23c>
 400cd50:	da001015 	stw	r8,64(sp)
 400cd54:	00840034 	movhi	r2,4096
 400cd58:	10bfffc4 	addi	r2,r2,-1
 400cd5c:	12801436 	bltu	r2,r10,400cdb0 <__muldf3+0x2e8>
 400cd60:	da001017 	ldw	r8,64(sp)
 400cd64:	101f883a 	mov	r15,r2
 400cd68:	4a45883a 	add	r2,r9,r9
 400cd6c:	124d803a 	cmpltu	r6,r2,r9
 400cd70:	5287883a 	add	r3,r10,r10
 400cd74:	9497883a 	add	r11,r18,r18
 400cd78:	5c8f803a 	cmpltu	r7,r11,r18
 400cd7c:	9cd9883a 	add	r12,r19,r19
 400cd80:	01000044 	movi	r4,1
 400cd84:	30cd883a 	add	r6,r6,r3
 400cd88:	3b0f883a 	add	r7,r7,r12
 400cd8c:	423fffc4 	addi	r8,r8,-1
 400cd90:	1013883a 	mov	r9,r2
 400cd94:	3015883a 	mov	r10,r6
 400cd98:	111ab03a 	or	r13,r2,r4
 400cd9c:	98003016 	blt	r19,zero,400ce60 <__muldf3+0x398>
 400cda0:	5825883a 	mov	r18,r11
 400cda4:	3827883a 	mov	r19,r7
 400cda8:	7abfef2e 	bgeu	r15,r10,400cd68 <__muldf3+0x2a0>
 400cdac:	da001015 	stw	r8,64(sp)
 400cdb0:	00803fc4 	movi	r2,255
 400cdb4:	488e703a 	and	r7,r9,r2
 400cdb8:	00802004 	movi	r2,128
 400cdbc:	0007883a 	mov	r3,zero
 400cdc0:	0011883a 	mov	r8,zero
 400cdc4:	38801826 	beq	r7,r2,400ce28 <__muldf3+0x360>
 400cdc8:	008000c4 	movi	r2,3
 400cdcc:	d9000e04 	addi	r4,sp,56
 400cdd0:	da801215 	stw	r10,72(sp)
 400cdd4:	d8800e15 	stw	r2,56(sp)
 400cdd8:	da401115 	stw	r9,68(sp)
 400cddc:	003f6a06 	br	400cb88 <__muldf3+0xc0>
 400cde0:	89802126 	beq	r17,r6,400ce68 <__muldf3+0x3a0>
 400cde4:	0009883a 	mov	r4,zero
 400cde8:	5105883a 	add	r2,r10,r4
 400cdec:	128d803a 	cmpltu	r6,r2,r10
 400cdf0:	5d07883a 	add	r3,r11,r20
 400cdf4:	30cd883a 	add	r6,r6,r3
 400cdf8:	0021883a 	mov	r16,zero
 400cdfc:	0023883a 	mov	r17,zero
 400ce00:	1025883a 	mov	r18,r2
 400ce04:	3027883a 	mov	r19,r6
 400ce08:	32ff9e2e 	bgeu	r6,r11,400cc84 <__muldf3+0x1bc>
 400ce0c:	00800044 	movi	r2,1
 400ce10:	8089883a 	add	r4,r16,r2
 400ce14:	240d803a 	cmpltu	r6,r4,r16
 400ce18:	344d883a 	add	r6,r6,r17
 400ce1c:	2021883a 	mov	r16,r4
 400ce20:	3023883a 	mov	r17,r6
 400ce24:	003f9806 	br	400cc88 <__muldf3+0x1c0>
 400ce28:	403fe71e 	bne	r8,zero,400cdc8 <__muldf3+0x300>
 400ce2c:	01004004 	movi	r4,256
 400ce30:	4904703a 	and	r2,r9,r4
 400ce34:	10c4b03a 	or	r2,r2,r3
 400ce38:	103fe31e 	bne	r2,zero,400cdc8 <__muldf3+0x300>
 400ce3c:	94c4b03a 	or	r2,r18,r19
 400ce40:	103fe126 	beq	r2,zero,400cdc8 <__muldf3+0x300>
 400ce44:	49c5883a 	add	r2,r9,r7
 400ce48:	1251803a 	cmpltu	r8,r2,r9
 400ce4c:	4291883a 	add	r8,r8,r10
 400ce50:	013fc004 	movi	r4,-256
 400ce54:	1112703a 	and	r9,r2,r4
 400ce58:	4015883a 	mov	r10,r8
 400ce5c:	003fda06 	br	400cdc8 <__muldf3+0x300>
 400ce60:	6813883a 	mov	r9,r13
 400ce64:	003fce06 	br	400cda0 <__muldf3+0x2d8>
 400ce68:	143f7c36 	bltu	r2,r16,400cc5c <__muldf3+0x194>
 400ce6c:	003fdd06 	br	400cde4 <__muldf3+0x31c>
 400ce70:	12bf852e 	bgeu	r2,r10,400cc88 <__muldf3+0x1c0>
 400ce74:	003fe506 	br	400ce0c <__muldf3+0x344>
 400ce78:	00800084 	movi	r2,2
 400ce7c:	20bf351e 	bne	r4,r2,400cb54 <__muldf3+0x8c>
 400ce80:	010100f4 	movhi	r4,1027
 400ce84:	210b4d04 	addi	r4,r4,11572
 400ce88:	003f3f06 	br	400cb88 <__muldf3+0xc0>

0400ce8c <__divdf3>:
 400ce8c:	deffed04 	addi	sp,sp,-76
 400ce90:	dcc01115 	stw	r19,68(sp)
 400ce94:	dcc00404 	addi	r19,sp,16
 400ce98:	2011883a 	mov	r8,r4
 400ce9c:	2813883a 	mov	r9,r5
 400cea0:	dc000e15 	stw	r16,56(sp)
 400cea4:	d809883a 	mov	r4,sp
 400cea8:	980b883a 	mov	r5,r19
 400ceac:	dc000904 	addi	r16,sp,36
 400ceb0:	dfc01215 	stw	ra,72(sp)
 400ceb4:	da400115 	stw	r9,4(sp)
 400ceb8:	d9c00315 	stw	r7,12(sp)
 400cebc:	da000015 	stw	r8,0(sp)
 400cec0:	d9800215 	stw	r6,8(sp)
 400cec4:	dc801015 	stw	r18,64(sp)
 400cec8:	dc400f15 	stw	r17,60(sp)
 400cecc:	400dc680 	call	400dc68 <__unpack_d>
 400ced0:	d9000204 	addi	r4,sp,8
 400ced4:	800b883a 	mov	r5,r16
 400ced8:	400dc680 	call	400dc68 <__unpack_d>
 400cedc:	d9000417 	ldw	r4,16(sp)
 400cee0:	00800044 	movi	r2,1
 400cee4:	11000b2e 	bgeu	r2,r4,400cf14 <__divdf3+0x88>
 400cee8:	d9400917 	ldw	r5,36(sp)
 400ceec:	1140762e 	bgeu	r2,r5,400d0c8 <__divdf3+0x23c>
 400cef0:	d8800517 	ldw	r2,20(sp)
 400cef4:	d8c00a17 	ldw	r3,40(sp)
 400cef8:	01800104 	movi	r6,4
 400cefc:	10c4f03a 	xor	r2,r2,r3
 400cf00:	d8800515 	stw	r2,20(sp)
 400cf04:	21800226 	beq	r4,r6,400cf10 <__divdf3+0x84>
 400cf08:	00800084 	movi	r2,2
 400cf0c:	2080141e 	bne	r4,r2,400cf60 <__divdf3+0xd4>
 400cf10:	29000926 	beq	r5,r4,400cf38 <__divdf3+0xac>
 400cf14:	9809883a 	mov	r4,r19
 400cf18:	400d9540 	call	400d954 <__pack_d>
 400cf1c:	dfc01217 	ldw	ra,72(sp)
 400cf20:	dcc01117 	ldw	r19,68(sp)
 400cf24:	dc801017 	ldw	r18,64(sp)
 400cf28:	dc400f17 	ldw	r17,60(sp)
 400cf2c:	dc000e17 	ldw	r16,56(sp)
 400cf30:	dec01304 	addi	sp,sp,76
 400cf34:	f800283a 	ret
 400cf38:	010100f4 	movhi	r4,1027
 400cf3c:	210b4d04 	addi	r4,r4,11572
 400cf40:	400d9540 	call	400d954 <__pack_d>
 400cf44:	dfc01217 	ldw	ra,72(sp)
 400cf48:	dcc01117 	ldw	r19,68(sp)
 400cf4c:	dc801017 	ldw	r18,64(sp)
 400cf50:	dc400f17 	ldw	r17,60(sp)
 400cf54:	dc000e17 	ldw	r16,56(sp)
 400cf58:	dec01304 	addi	sp,sp,76
 400cf5c:	f800283a 	ret
 400cf60:	29805b26 	beq	r5,r6,400d0d0 <__divdf3+0x244>
 400cf64:	28802d26 	beq	r5,r2,400d01c <__divdf3+0x190>
 400cf68:	d8c00617 	ldw	r3,24(sp)
 400cf6c:	d8800b17 	ldw	r2,44(sp)
 400cf70:	d9c00817 	ldw	r7,32(sp)
 400cf74:	dc400d17 	ldw	r17,52(sp)
 400cf78:	188bc83a 	sub	r5,r3,r2
 400cf7c:	d9800717 	ldw	r6,28(sp)
 400cf80:	dc000c17 	ldw	r16,48(sp)
 400cf84:	d9400615 	stw	r5,24(sp)
 400cf88:	3c403836 	bltu	r7,r17,400d06c <__divdf3+0x1e0>
 400cf8c:	89c03626 	beq	r17,r7,400d068 <__divdf3+0x1dc>
 400cf90:	0015883a 	mov	r10,zero
 400cf94:	001d883a 	mov	r14,zero
 400cf98:	02c40034 	movhi	r11,4096
 400cf9c:	001f883a 	mov	r15,zero
 400cfa0:	003f883a 	mov	ra,zero
 400cfa4:	04800f44 	movi	r18,61
 400cfa8:	00000f06 	br	400cfe8 <__divdf3+0x15c>
 400cfac:	601d883a 	mov	r14,r12
 400cfb0:	681f883a 	mov	r15,r13
 400cfb4:	400d883a 	mov	r6,r8
 400cfb8:	100f883a 	mov	r7,r2
 400cfbc:	3191883a 	add	r8,r6,r6
 400cfc0:	5808d07a 	srli	r4,r11,1
 400cfc4:	4185803a 	cmpltu	r2,r8,r6
 400cfc8:	39d3883a 	add	r9,r7,r7
 400cfcc:	28c6b03a 	or	r3,r5,r3
 400cfd0:	1245883a 	add	r2,r2,r9
 400cfd4:	1815883a 	mov	r10,r3
 400cfd8:	2017883a 	mov	r11,r4
 400cfdc:	400d883a 	mov	r6,r8
 400cfe0:	100f883a 	mov	r7,r2
 400cfe4:	fc801726 	beq	ra,r18,400d044 <__divdf3+0x1b8>
 400cfe8:	580a97fa 	slli	r5,r11,31
 400cfec:	5006d07a 	srli	r3,r10,1
 400cff0:	ffc00044 	addi	ra,ra,1
 400cff4:	3c7ff136 	bltu	r7,r17,400cfbc <__divdf3+0x130>
 400cff8:	3411c83a 	sub	r8,r6,r16
 400cffc:	3205803a 	cmpltu	r2,r6,r8
 400d000:	3c53c83a 	sub	r9,r7,r17
 400d004:	7298b03a 	or	r12,r14,r10
 400d008:	7adab03a 	or	r13,r15,r11
 400d00c:	4885c83a 	sub	r2,r9,r2
 400d010:	89ffe61e 	bne	r17,r7,400cfac <__divdf3+0x120>
 400d014:	343fe936 	bltu	r6,r16,400cfbc <__divdf3+0x130>
 400d018:	003fe406 	br	400cfac <__divdf3+0x120>
 400d01c:	9809883a 	mov	r4,r19
 400d020:	d9800415 	stw	r6,16(sp)
 400d024:	400d9540 	call	400d954 <__pack_d>
 400d028:	dfc01217 	ldw	ra,72(sp)
 400d02c:	dcc01117 	ldw	r19,68(sp)
 400d030:	dc801017 	ldw	r18,64(sp)
 400d034:	dc400f17 	ldw	r17,60(sp)
 400d038:	dc000e17 	ldw	r16,56(sp)
 400d03c:	dec01304 	addi	sp,sp,76
 400d040:	f800283a 	ret
 400d044:	00803fc4 	movi	r2,255
 400d048:	7090703a 	and	r8,r14,r2
 400d04c:	00802004 	movi	r2,128
 400d050:	0007883a 	mov	r3,zero
 400d054:	0013883a 	mov	r9,zero
 400d058:	40800d26 	beq	r8,r2,400d090 <__divdf3+0x204>
 400d05c:	dbc00815 	stw	r15,32(sp)
 400d060:	db800715 	stw	r14,28(sp)
 400d064:	003fab06 	br	400cf14 <__divdf3+0x88>
 400d068:	343fc92e 	bgeu	r6,r16,400cf90 <__divdf3+0x104>
 400d06c:	3185883a 	add	r2,r6,r6
 400d070:	1189803a 	cmpltu	r4,r2,r6
 400d074:	39c7883a 	add	r3,r7,r7
 400d078:	20c9883a 	add	r4,r4,r3
 400d07c:	297fffc4 	addi	r5,r5,-1
 400d080:	100d883a 	mov	r6,r2
 400d084:	200f883a 	mov	r7,r4
 400d088:	d9400615 	stw	r5,24(sp)
 400d08c:	003fc006 	br	400cf90 <__divdf3+0x104>
 400d090:	483ff21e 	bne	r9,zero,400d05c <__divdf3+0x1d0>
 400d094:	01004004 	movi	r4,256
 400d098:	7104703a 	and	r2,r14,r4
 400d09c:	10c4b03a 	or	r2,r2,r3
 400d0a0:	103fee1e 	bne	r2,zero,400d05c <__divdf3+0x1d0>
 400d0a4:	31c4b03a 	or	r2,r6,r7
 400d0a8:	103fec26 	beq	r2,zero,400d05c <__divdf3+0x1d0>
 400d0ac:	7205883a 	add	r2,r14,r8
 400d0b0:	1391803a 	cmpltu	r8,r2,r14
 400d0b4:	43d1883a 	add	r8,r8,r15
 400d0b8:	013fc004 	movi	r4,-256
 400d0bc:	111c703a 	and	r14,r2,r4
 400d0c0:	401f883a 	mov	r15,r8
 400d0c4:	003fe506 	br	400d05c <__divdf3+0x1d0>
 400d0c8:	8009883a 	mov	r4,r16
 400d0cc:	003f9206 	br	400cf18 <__divdf3+0x8c>
 400d0d0:	9809883a 	mov	r4,r19
 400d0d4:	d8000715 	stw	zero,28(sp)
 400d0d8:	d8000815 	stw	zero,32(sp)
 400d0dc:	d8000615 	stw	zero,24(sp)
 400d0e0:	003f8d06 	br	400cf18 <__divdf3+0x8c>

0400d0e4 <__eqdf2>:
 400d0e4:	deffef04 	addi	sp,sp,-68
 400d0e8:	dc400f15 	stw	r17,60(sp)
 400d0ec:	dc400404 	addi	r17,sp,16
 400d0f0:	2005883a 	mov	r2,r4
 400d0f4:	2807883a 	mov	r3,r5
 400d0f8:	dc000e15 	stw	r16,56(sp)
 400d0fc:	d809883a 	mov	r4,sp
 400d100:	880b883a 	mov	r5,r17
 400d104:	dc000904 	addi	r16,sp,36
 400d108:	d8c00115 	stw	r3,4(sp)
 400d10c:	d8800015 	stw	r2,0(sp)
 400d110:	d9800215 	stw	r6,8(sp)
 400d114:	dfc01015 	stw	ra,64(sp)
 400d118:	d9c00315 	stw	r7,12(sp)
 400d11c:	400dc680 	call	400dc68 <__unpack_d>
 400d120:	d9000204 	addi	r4,sp,8
 400d124:	800b883a 	mov	r5,r16
 400d128:	400dc680 	call	400dc68 <__unpack_d>
 400d12c:	d8800417 	ldw	r2,16(sp)
 400d130:	00c00044 	movi	r3,1
 400d134:	180d883a 	mov	r6,r3
 400d138:	1880062e 	bgeu	r3,r2,400d154 <__eqdf2+0x70>
 400d13c:	d8800917 	ldw	r2,36(sp)
 400d140:	8809883a 	mov	r4,r17
 400d144:	800b883a 	mov	r5,r16
 400d148:	1880022e 	bgeu	r3,r2,400d154 <__eqdf2+0x70>
 400d14c:	400dda00 	call	400dda0 <__fpcmp_parts_d>
 400d150:	100d883a 	mov	r6,r2
 400d154:	3005883a 	mov	r2,r6
 400d158:	dfc01017 	ldw	ra,64(sp)
 400d15c:	dc400f17 	ldw	r17,60(sp)
 400d160:	dc000e17 	ldw	r16,56(sp)
 400d164:	dec01104 	addi	sp,sp,68
 400d168:	f800283a 	ret

0400d16c <__nedf2>:
 400d16c:	deffef04 	addi	sp,sp,-68
 400d170:	dc400f15 	stw	r17,60(sp)
 400d174:	dc400404 	addi	r17,sp,16
 400d178:	2005883a 	mov	r2,r4
 400d17c:	2807883a 	mov	r3,r5
 400d180:	dc000e15 	stw	r16,56(sp)
 400d184:	d809883a 	mov	r4,sp
 400d188:	880b883a 	mov	r5,r17
 400d18c:	dc000904 	addi	r16,sp,36
 400d190:	d8c00115 	stw	r3,4(sp)
 400d194:	d8800015 	stw	r2,0(sp)
 400d198:	d9800215 	stw	r6,8(sp)
 400d19c:	dfc01015 	stw	ra,64(sp)
 400d1a0:	d9c00315 	stw	r7,12(sp)
 400d1a4:	400dc680 	call	400dc68 <__unpack_d>
 400d1a8:	d9000204 	addi	r4,sp,8
 400d1ac:	800b883a 	mov	r5,r16
 400d1b0:	400dc680 	call	400dc68 <__unpack_d>
 400d1b4:	d8800417 	ldw	r2,16(sp)
 400d1b8:	00c00044 	movi	r3,1
 400d1bc:	180d883a 	mov	r6,r3
 400d1c0:	1880062e 	bgeu	r3,r2,400d1dc <__nedf2+0x70>
 400d1c4:	d8800917 	ldw	r2,36(sp)
 400d1c8:	8809883a 	mov	r4,r17
 400d1cc:	800b883a 	mov	r5,r16
 400d1d0:	1880022e 	bgeu	r3,r2,400d1dc <__nedf2+0x70>
 400d1d4:	400dda00 	call	400dda0 <__fpcmp_parts_d>
 400d1d8:	100d883a 	mov	r6,r2
 400d1dc:	3005883a 	mov	r2,r6
 400d1e0:	dfc01017 	ldw	ra,64(sp)
 400d1e4:	dc400f17 	ldw	r17,60(sp)
 400d1e8:	dc000e17 	ldw	r16,56(sp)
 400d1ec:	dec01104 	addi	sp,sp,68
 400d1f0:	f800283a 	ret

0400d1f4 <__gtdf2>:
 400d1f4:	deffef04 	addi	sp,sp,-68
 400d1f8:	dc400f15 	stw	r17,60(sp)
 400d1fc:	dc400404 	addi	r17,sp,16
 400d200:	2005883a 	mov	r2,r4
 400d204:	2807883a 	mov	r3,r5
 400d208:	dc000e15 	stw	r16,56(sp)
 400d20c:	d809883a 	mov	r4,sp
 400d210:	880b883a 	mov	r5,r17
 400d214:	dc000904 	addi	r16,sp,36
 400d218:	d8c00115 	stw	r3,4(sp)
 400d21c:	d8800015 	stw	r2,0(sp)
 400d220:	d9800215 	stw	r6,8(sp)
 400d224:	dfc01015 	stw	ra,64(sp)
 400d228:	d9c00315 	stw	r7,12(sp)
 400d22c:	400dc680 	call	400dc68 <__unpack_d>
 400d230:	d9000204 	addi	r4,sp,8
 400d234:	800b883a 	mov	r5,r16
 400d238:	400dc680 	call	400dc68 <__unpack_d>
 400d23c:	d8800417 	ldw	r2,16(sp)
 400d240:	00c00044 	movi	r3,1
 400d244:	01bfffc4 	movi	r6,-1
 400d248:	1880062e 	bgeu	r3,r2,400d264 <__gtdf2+0x70>
 400d24c:	d8800917 	ldw	r2,36(sp)
 400d250:	8809883a 	mov	r4,r17
 400d254:	800b883a 	mov	r5,r16
 400d258:	1880022e 	bgeu	r3,r2,400d264 <__gtdf2+0x70>
 400d25c:	400dda00 	call	400dda0 <__fpcmp_parts_d>
 400d260:	100d883a 	mov	r6,r2
 400d264:	3005883a 	mov	r2,r6
 400d268:	dfc01017 	ldw	ra,64(sp)
 400d26c:	dc400f17 	ldw	r17,60(sp)
 400d270:	dc000e17 	ldw	r16,56(sp)
 400d274:	dec01104 	addi	sp,sp,68
 400d278:	f800283a 	ret

0400d27c <__gedf2>:
 400d27c:	deffef04 	addi	sp,sp,-68
 400d280:	dc400f15 	stw	r17,60(sp)
 400d284:	dc400404 	addi	r17,sp,16
 400d288:	2005883a 	mov	r2,r4
 400d28c:	2807883a 	mov	r3,r5
 400d290:	dc000e15 	stw	r16,56(sp)
 400d294:	d809883a 	mov	r4,sp
 400d298:	880b883a 	mov	r5,r17
 400d29c:	dc000904 	addi	r16,sp,36
 400d2a0:	d8c00115 	stw	r3,4(sp)
 400d2a4:	d8800015 	stw	r2,0(sp)
 400d2a8:	d9800215 	stw	r6,8(sp)
 400d2ac:	dfc01015 	stw	ra,64(sp)
 400d2b0:	d9c00315 	stw	r7,12(sp)
 400d2b4:	400dc680 	call	400dc68 <__unpack_d>
 400d2b8:	d9000204 	addi	r4,sp,8
 400d2bc:	800b883a 	mov	r5,r16
 400d2c0:	400dc680 	call	400dc68 <__unpack_d>
 400d2c4:	d8800417 	ldw	r2,16(sp)
 400d2c8:	00c00044 	movi	r3,1
 400d2cc:	01bfffc4 	movi	r6,-1
 400d2d0:	1880062e 	bgeu	r3,r2,400d2ec <__gedf2+0x70>
 400d2d4:	d8800917 	ldw	r2,36(sp)
 400d2d8:	8809883a 	mov	r4,r17
 400d2dc:	800b883a 	mov	r5,r16
 400d2e0:	1880022e 	bgeu	r3,r2,400d2ec <__gedf2+0x70>
 400d2e4:	400dda00 	call	400dda0 <__fpcmp_parts_d>
 400d2e8:	100d883a 	mov	r6,r2
 400d2ec:	3005883a 	mov	r2,r6
 400d2f0:	dfc01017 	ldw	ra,64(sp)
 400d2f4:	dc400f17 	ldw	r17,60(sp)
 400d2f8:	dc000e17 	ldw	r16,56(sp)
 400d2fc:	dec01104 	addi	sp,sp,68
 400d300:	f800283a 	ret

0400d304 <__ltdf2>:
 400d304:	deffef04 	addi	sp,sp,-68
 400d308:	dc400f15 	stw	r17,60(sp)
 400d30c:	dc400404 	addi	r17,sp,16
 400d310:	2005883a 	mov	r2,r4
 400d314:	2807883a 	mov	r3,r5
 400d318:	dc000e15 	stw	r16,56(sp)
 400d31c:	d809883a 	mov	r4,sp
 400d320:	880b883a 	mov	r5,r17
 400d324:	dc000904 	addi	r16,sp,36
 400d328:	d8c00115 	stw	r3,4(sp)
 400d32c:	d8800015 	stw	r2,0(sp)
 400d330:	d9800215 	stw	r6,8(sp)
 400d334:	dfc01015 	stw	ra,64(sp)
 400d338:	d9c00315 	stw	r7,12(sp)
 400d33c:	400dc680 	call	400dc68 <__unpack_d>
 400d340:	d9000204 	addi	r4,sp,8
 400d344:	800b883a 	mov	r5,r16
 400d348:	400dc680 	call	400dc68 <__unpack_d>
 400d34c:	d8800417 	ldw	r2,16(sp)
 400d350:	00c00044 	movi	r3,1
 400d354:	180d883a 	mov	r6,r3
 400d358:	1880062e 	bgeu	r3,r2,400d374 <__ltdf2+0x70>
 400d35c:	d8800917 	ldw	r2,36(sp)
 400d360:	8809883a 	mov	r4,r17
 400d364:	800b883a 	mov	r5,r16
 400d368:	1880022e 	bgeu	r3,r2,400d374 <__ltdf2+0x70>
 400d36c:	400dda00 	call	400dda0 <__fpcmp_parts_d>
 400d370:	100d883a 	mov	r6,r2
 400d374:	3005883a 	mov	r2,r6
 400d378:	dfc01017 	ldw	ra,64(sp)
 400d37c:	dc400f17 	ldw	r17,60(sp)
 400d380:	dc000e17 	ldw	r16,56(sp)
 400d384:	dec01104 	addi	sp,sp,68
 400d388:	f800283a 	ret

0400d38c <__floatsidf>:
 400d38c:	2006d7fa 	srli	r3,r4,31
 400d390:	defff604 	addi	sp,sp,-40
 400d394:	008000c4 	movi	r2,3
 400d398:	dfc00915 	stw	ra,36(sp)
 400d39c:	dcc00815 	stw	r19,32(sp)
 400d3a0:	dc800715 	stw	r18,28(sp)
 400d3a4:	dc400615 	stw	r17,24(sp)
 400d3a8:	dc000515 	stw	r16,20(sp)
 400d3ac:	d8800015 	stw	r2,0(sp)
 400d3b0:	d8c00115 	stw	r3,4(sp)
 400d3b4:	20000f1e 	bne	r4,zero,400d3f4 <__floatsidf+0x68>
 400d3b8:	00800084 	movi	r2,2
 400d3bc:	d8800015 	stw	r2,0(sp)
 400d3c0:	d809883a 	mov	r4,sp
 400d3c4:	400d9540 	call	400d954 <__pack_d>
 400d3c8:	1009883a 	mov	r4,r2
 400d3cc:	180b883a 	mov	r5,r3
 400d3d0:	2005883a 	mov	r2,r4
 400d3d4:	2807883a 	mov	r3,r5
 400d3d8:	dfc00917 	ldw	ra,36(sp)
 400d3dc:	dcc00817 	ldw	r19,32(sp)
 400d3e0:	dc800717 	ldw	r18,28(sp)
 400d3e4:	dc400617 	ldw	r17,24(sp)
 400d3e8:	dc000517 	ldw	r16,20(sp)
 400d3ec:	dec00a04 	addi	sp,sp,40
 400d3f0:	f800283a 	ret
 400d3f4:	00800f04 	movi	r2,60
 400d3f8:	1807003a 	cmpeq	r3,r3,zero
 400d3fc:	d8800215 	stw	r2,8(sp)
 400d400:	18001126 	beq	r3,zero,400d448 <__floatsidf+0xbc>
 400d404:	0027883a 	mov	r19,zero
 400d408:	2025883a 	mov	r18,r4
 400d40c:	d9000315 	stw	r4,12(sp)
 400d410:	dcc00415 	stw	r19,16(sp)
 400d414:	400d8d40 	call	400d8d4 <__clzsi2>
 400d418:	11000744 	addi	r4,r2,29
 400d41c:	013fe80e 	bge	zero,r4,400d3c0 <__floatsidf+0x34>
 400d420:	10bfff44 	addi	r2,r2,-3
 400d424:	10000c16 	blt	r2,zero,400d458 <__floatsidf+0xcc>
 400d428:	90a2983a 	sll	r17,r18,r2
 400d42c:	0021883a 	mov	r16,zero
 400d430:	d8800217 	ldw	r2,8(sp)
 400d434:	dc400415 	stw	r17,16(sp)
 400d438:	dc000315 	stw	r16,12(sp)
 400d43c:	1105c83a 	sub	r2,r2,r4
 400d440:	d8800215 	stw	r2,8(sp)
 400d444:	003fde06 	br	400d3c0 <__floatsidf+0x34>
 400d448:	00a00034 	movhi	r2,32768
 400d44c:	20800a26 	beq	r4,r2,400d478 <__floatsidf+0xec>
 400d450:	0109c83a 	sub	r4,zero,r4
 400d454:	003feb06 	br	400d404 <__floatsidf+0x78>
 400d458:	9006d07a 	srli	r3,r18,1
 400d45c:	008007c4 	movi	r2,31
 400d460:	1105c83a 	sub	r2,r2,r4
 400d464:	1886d83a 	srl	r3,r3,r2
 400d468:	9922983a 	sll	r17,r19,r4
 400d46c:	9120983a 	sll	r16,r18,r4
 400d470:	1c62b03a 	or	r17,r3,r17
 400d474:	003fee06 	br	400d430 <__floatsidf+0xa4>
 400d478:	0009883a 	mov	r4,zero
 400d47c:	01707834 	movhi	r5,49632
 400d480:	003fd306 	br	400d3d0 <__floatsidf+0x44>

0400d484 <__fixdfsi>:
 400d484:	defff804 	addi	sp,sp,-32
 400d488:	2005883a 	mov	r2,r4
 400d48c:	2807883a 	mov	r3,r5
 400d490:	d809883a 	mov	r4,sp
 400d494:	d9400204 	addi	r5,sp,8
 400d498:	d8c00115 	stw	r3,4(sp)
 400d49c:	d8800015 	stw	r2,0(sp)
 400d4a0:	dfc00715 	stw	ra,28(sp)
 400d4a4:	400dc680 	call	400dc68 <__unpack_d>
 400d4a8:	d8c00217 	ldw	r3,8(sp)
 400d4ac:	00800084 	movi	r2,2
 400d4b0:	1880051e 	bne	r3,r2,400d4c8 <__fixdfsi+0x44>
 400d4b4:	0007883a 	mov	r3,zero
 400d4b8:	1805883a 	mov	r2,r3
 400d4bc:	dfc00717 	ldw	ra,28(sp)
 400d4c0:	dec00804 	addi	sp,sp,32
 400d4c4:	f800283a 	ret
 400d4c8:	00800044 	movi	r2,1
 400d4cc:	10fff92e 	bgeu	r2,r3,400d4b4 <__fixdfsi+0x30>
 400d4d0:	00800104 	movi	r2,4
 400d4d4:	18800426 	beq	r3,r2,400d4e8 <__fixdfsi+0x64>
 400d4d8:	d8c00417 	ldw	r3,16(sp)
 400d4dc:	183ff516 	blt	r3,zero,400d4b4 <__fixdfsi+0x30>
 400d4e0:	00800784 	movi	r2,30
 400d4e4:	10c0080e 	bge	r2,r3,400d508 <__fixdfsi+0x84>
 400d4e8:	d8800317 	ldw	r2,12(sp)
 400d4ec:	1000121e 	bne	r2,zero,400d538 <__fixdfsi+0xb4>
 400d4f0:	00e00034 	movhi	r3,32768
 400d4f4:	18ffffc4 	addi	r3,r3,-1
 400d4f8:	1805883a 	mov	r2,r3
 400d4fc:	dfc00717 	ldw	ra,28(sp)
 400d500:	dec00804 	addi	sp,sp,32
 400d504:	f800283a 	ret
 400d508:	00800f04 	movi	r2,60
 400d50c:	10d1c83a 	sub	r8,r2,r3
 400d510:	40bff804 	addi	r2,r8,-32
 400d514:	d9800517 	ldw	r6,20(sp)
 400d518:	d9c00617 	ldw	r7,24(sp)
 400d51c:	10000816 	blt	r2,zero,400d540 <__fixdfsi+0xbc>
 400d520:	3888d83a 	srl	r4,r7,r2
 400d524:	d8800317 	ldw	r2,12(sp)
 400d528:	2007883a 	mov	r3,r4
 400d52c:	103fe226 	beq	r2,zero,400d4b8 <__fixdfsi+0x34>
 400d530:	0107c83a 	sub	r3,zero,r4
 400d534:	003fe006 	br	400d4b8 <__fixdfsi+0x34>
 400d538:	00e00034 	movhi	r3,32768
 400d53c:	003fde06 	br	400d4b8 <__fixdfsi+0x34>
 400d540:	39c7883a 	add	r3,r7,r7
 400d544:	008007c4 	movi	r2,31
 400d548:	1205c83a 	sub	r2,r2,r8
 400d54c:	1886983a 	sll	r3,r3,r2
 400d550:	3208d83a 	srl	r4,r6,r8
 400d554:	1908b03a 	or	r4,r3,r4
 400d558:	003ff206 	br	400d524 <__fixdfsi+0xa0>

0400d55c <__floatunsidf>:
 400d55c:	defff204 	addi	sp,sp,-56
 400d560:	dfc00d15 	stw	ra,52(sp)
 400d564:	ddc00c15 	stw	r23,48(sp)
 400d568:	dd800b15 	stw	r22,44(sp)
 400d56c:	dd400a15 	stw	r21,40(sp)
 400d570:	dd000915 	stw	r20,36(sp)
 400d574:	dcc00815 	stw	r19,32(sp)
 400d578:	dc800715 	stw	r18,28(sp)
 400d57c:	dc400615 	stw	r17,24(sp)
 400d580:	dc000515 	stw	r16,20(sp)
 400d584:	d8000115 	stw	zero,4(sp)
 400d588:	20000f1e 	bne	r4,zero,400d5c8 <__floatunsidf+0x6c>
 400d58c:	00800084 	movi	r2,2
 400d590:	d8800015 	stw	r2,0(sp)
 400d594:	d809883a 	mov	r4,sp
 400d598:	400d9540 	call	400d954 <__pack_d>
 400d59c:	dfc00d17 	ldw	ra,52(sp)
 400d5a0:	ddc00c17 	ldw	r23,48(sp)
 400d5a4:	dd800b17 	ldw	r22,44(sp)
 400d5a8:	dd400a17 	ldw	r21,40(sp)
 400d5ac:	dd000917 	ldw	r20,36(sp)
 400d5b0:	dcc00817 	ldw	r19,32(sp)
 400d5b4:	dc800717 	ldw	r18,28(sp)
 400d5b8:	dc400617 	ldw	r17,24(sp)
 400d5bc:	dc000517 	ldw	r16,20(sp)
 400d5c0:	dec00e04 	addi	sp,sp,56
 400d5c4:	f800283a 	ret
 400d5c8:	008000c4 	movi	r2,3
 400d5cc:	00c00f04 	movi	r3,60
 400d5d0:	002f883a 	mov	r23,zero
 400d5d4:	202d883a 	mov	r22,r4
 400d5d8:	d8800015 	stw	r2,0(sp)
 400d5dc:	d8c00215 	stw	r3,8(sp)
 400d5e0:	d9000315 	stw	r4,12(sp)
 400d5e4:	ddc00415 	stw	r23,16(sp)
 400d5e8:	400d8d40 	call	400d8d4 <__clzsi2>
 400d5ec:	12400744 	addi	r9,r2,29
 400d5f0:	48000b16 	blt	r9,zero,400d620 <__floatunsidf+0xc4>
 400d5f4:	483fe726 	beq	r9,zero,400d594 <__floatunsidf+0x38>
 400d5f8:	10bfff44 	addi	r2,r2,-3
 400d5fc:	10002e16 	blt	r2,zero,400d6b8 <__floatunsidf+0x15c>
 400d600:	b0a2983a 	sll	r17,r22,r2
 400d604:	0021883a 	mov	r16,zero
 400d608:	d8800217 	ldw	r2,8(sp)
 400d60c:	dc400415 	stw	r17,16(sp)
 400d610:	dc000315 	stw	r16,12(sp)
 400d614:	1245c83a 	sub	r2,r2,r9
 400d618:	d8800215 	stw	r2,8(sp)
 400d61c:	003fdd06 	br	400d594 <__floatunsidf+0x38>
 400d620:	0255c83a 	sub	r10,zero,r9
 400d624:	51bff804 	addi	r6,r10,-32
 400d628:	30001b16 	blt	r6,zero,400d698 <__floatunsidf+0x13c>
 400d62c:	b9a8d83a 	srl	r20,r23,r6
 400d630:	002b883a 	mov	r21,zero
 400d634:	000f883a 	mov	r7,zero
 400d638:	01000044 	movi	r4,1
 400d63c:	0011883a 	mov	r8,zero
 400d640:	30002516 	blt	r6,zero,400d6d8 <__floatunsidf+0x17c>
 400d644:	21a6983a 	sll	r19,r4,r6
 400d648:	0025883a 	mov	r18,zero
 400d64c:	00bfffc4 	movi	r2,-1
 400d650:	9089883a 	add	r4,r18,r2
 400d654:	988b883a 	add	r5,r19,r2
 400d658:	248d803a 	cmpltu	r6,r4,r18
 400d65c:	314b883a 	add	r5,r6,r5
 400d660:	b104703a 	and	r2,r22,r4
 400d664:	b946703a 	and	r3,r23,r5
 400d668:	10c4b03a 	or	r2,r2,r3
 400d66c:	10000226 	beq	r2,zero,400d678 <__floatunsidf+0x11c>
 400d670:	01c00044 	movi	r7,1
 400d674:	0011883a 	mov	r8,zero
 400d678:	d9000217 	ldw	r4,8(sp)
 400d67c:	a1c4b03a 	or	r2,r20,r7
 400d680:	aa06b03a 	or	r3,r21,r8
 400d684:	2249c83a 	sub	r4,r4,r9
 400d688:	d8c00415 	stw	r3,16(sp)
 400d68c:	d9000215 	stw	r4,8(sp)
 400d690:	d8800315 	stw	r2,12(sp)
 400d694:	003fbf06 	br	400d594 <__floatunsidf+0x38>
 400d698:	bdc7883a 	add	r3,r23,r23
 400d69c:	008007c4 	movi	r2,31
 400d6a0:	1285c83a 	sub	r2,r2,r10
 400d6a4:	1886983a 	sll	r3,r3,r2
 400d6a8:	b2a8d83a 	srl	r20,r22,r10
 400d6ac:	baaad83a 	srl	r21,r23,r10
 400d6b0:	1d28b03a 	or	r20,r3,r20
 400d6b4:	003fdf06 	br	400d634 <__floatunsidf+0xd8>
 400d6b8:	b006d07a 	srli	r3,r22,1
 400d6bc:	008007c4 	movi	r2,31
 400d6c0:	1245c83a 	sub	r2,r2,r9
 400d6c4:	1886d83a 	srl	r3,r3,r2
 400d6c8:	ba62983a 	sll	r17,r23,r9
 400d6cc:	b260983a 	sll	r16,r22,r9
 400d6d0:	1c62b03a 	or	r17,r3,r17
 400d6d4:	003fcc06 	br	400d608 <__floatunsidf+0xac>
 400d6d8:	2006d07a 	srli	r3,r4,1
 400d6dc:	008007c4 	movi	r2,31
 400d6e0:	1285c83a 	sub	r2,r2,r10
 400d6e4:	18a6d83a 	srl	r19,r3,r2
 400d6e8:	22a4983a 	sll	r18,r4,r10
 400d6ec:	003fd706 	br	400d64c <__floatunsidf+0xf0>

0400d6f0 <udivmodsi4>:
 400d6f0:	29001b2e 	bgeu	r5,r4,400d760 <udivmodsi4+0x70>
 400d6f4:	28001a16 	blt	r5,zero,400d760 <udivmodsi4+0x70>
 400d6f8:	00800044 	movi	r2,1
 400d6fc:	0007883a 	mov	r3,zero
 400d700:	01c007c4 	movi	r7,31
 400d704:	00000306 	br	400d714 <udivmodsi4+0x24>
 400d708:	19c01326 	beq	r3,r7,400d758 <udivmodsi4+0x68>
 400d70c:	18c00044 	addi	r3,r3,1
 400d710:	28000416 	blt	r5,zero,400d724 <udivmodsi4+0x34>
 400d714:	294b883a 	add	r5,r5,r5
 400d718:	1085883a 	add	r2,r2,r2
 400d71c:	293ffa36 	bltu	r5,r4,400d708 <udivmodsi4+0x18>
 400d720:	10000d26 	beq	r2,zero,400d758 <udivmodsi4+0x68>
 400d724:	0007883a 	mov	r3,zero
 400d728:	21400236 	bltu	r4,r5,400d734 <udivmodsi4+0x44>
 400d72c:	2149c83a 	sub	r4,r4,r5
 400d730:	1886b03a 	or	r3,r3,r2
 400d734:	1004d07a 	srli	r2,r2,1
 400d738:	280ad07a 	srli	r5,r5,1
 400d73c:	103ffa1e 	bne	r2,zero,400d728 <udivmodsi4+0x38>
 400d740:	30000226 	beq	r6,zero,400d74c <udivmodsi4+0x5c>
 400d744:	2005883a 	mov	r2,r4
 400d748:	f800283a 	ret
 400d74c:	1809883a 	mov	r4,r3
 400d750:	2005883a 	mov	r2,r4
 400d754:	f800283a 	ret
 400d758:	0007883a 	mov	r3,zero
 400d75c:	003ff806 	br	400d740 <udivmodsi4+0x50>
 400d760:	00800044 	movi	r2,1
 400d764:	0007883a 	mov	r3,zero
 400d768:	003fef06 	br	400d728 <udivmodsi4+0x38>

0400d76c <__divsi3>:
 400d76c:	defffe04 	addi	sp,sp,-8
 400d770:	dc000015 	stw	r16,0(sp)
 400d774:	dfc00115 	stw	ra,4(sp)
 400d778:	0021883a 	mov	r16,zero
 400d77c:	20000c16 	blt	r4,zero,400d7b0 <__divsi3+0x44>
 400d780:	000d883a 	mov	r6,zero
 400d784:	28000e16 	blt	r5,zero,400d7c0 <__divsi3+0x54>
 400d788:	400d6f00 	call	400d6f0 <udivmodsi4>
 400d78c:	1007883a 	mov	r3,r2
 400d790:	8005003a 	cmpeq	r2,r16,zero
 400d794:	1000011e 	bne	r2,zero,400d79c <__divsi3+0x30>
 400d798:	00c7c83a 	sub	r3,zero,r3
 400d79c:	1805883a 	mov	r2,r3
 400d7a0:	dfc00117 	ldw	ra,4(sp)
 400d7a4:	dc000017 	ldw	r16,0(sp)
 400d7a8:	dec00204 	addi	sp,sp,8
 400d7ac:	f800283a 	ret
 400d7b0:	0109c83a 	sub	r4,zero,r4
 400d7b4:	04000044 	movi	r16,1
 400d7b8:	000d883a 	mov	r6,zero
 400d7bc:	283ff20e 	bge	r5,zero,400d788 <__divsi3+0x1c>
 400d7c0:	014bc83a 	sub	r5,zero,r5
 400d7c4:	8021003a 	cmpeq	r16,r16,zero
 400d7c8:	003fef06 	br	400d788 <__divsi3+0x1c>

0400d7cc <__modsi3>:
 400d7cc:	deffff04 	addi	sp,sp,-4
 400d7d0:	dfc00015 	stw	ra,0(sp)
 400d7d4:	01800044 	movi	r6,1
 400d7d8:	2807883a 	mov	r3,r5
 400d7dc:	20000416 	blt	r4,zero,400d7f0 <__modsi3+0x24>
 400d7e0:	28000c16 	blt	r5,zero,400d814 <__modsi3+0x48>
 400d7e4:	dfc00017 	ldw	ra,0(sp)
 400d7e8:	dec00104 	addi	sp,sp,4
 400d7ec:	400d6f01 	jmpi	400d6f0 <udivmodsi4>
 400d7f0:	0109c83a 	sub	r4,zero,r4
 400d7f4:	28000b16 	blt	r5,zero,400d824 <__modsi3+0x58>
 400d7f8:	180b883a 	mov	r5,r3
 400d7fc:	01800044 	movi	r6,1
 400d800:	400d6f00 	call	400d6f0 <udivmodsi4>
 400d804:	0085c83a 	sub	r2,zero,r2
 400d808:	dfc00017 	ldw	ra,0(sp)
 400d80c:	dec00104 	addi	sp,sp,4
 400d810:	f800283a 	ret
 400d814:	014bc83a 	sub	r5,zero,r5
 400d818:	dfc00017 	ldw	ra,0(sp)
 400d81c:	dec00104 	addi	sp,sp,4
 400d820:	400d6f01 	jmpi	400d6f0 <udivmodsi4>
 400d824:	0147c83a 	sub	r3,zero,r5
 400d828:	003ff306 	br	400d7f8 <__modsi3+0x2c>

0400d82c <__udivsi3>:
 400d82c:	000d883a 	mov	r6,zero
 400d830:	400d6f01 	jmpi	400d6f0 <udivmodsi4>

0400d834 <__umodsi3>:
 400d834:	01800044 	movi	r6,1
 400d838:	400d6f01 	jmpi	400d6f0 <udivmodsi4>

0400d83c <__muldi3>:
 400d83c:	2011883a 	mov	r8,r4
 400d840:	427fffcc 	andi	r9,r8,65535
 400d844:	4018d43a 	srli	r12,r8,16
 400d848:	32bfffcc 	andi	r10,r6,65535
 400d84c:	3016d43a 	srli	r11,r6,16
 400d850:	4a85383a 	mul	r2,r9,r10
 400d854:	6295383a 	mul	r10,r12,r10
 400d858:	4ad3383a 	mul	r9,r9,r11
 400d85c:	113fffcc 	andi	r4,r2,65535
 400d860:	1004d43a 	srli	r2,r2,16
 400d864:	4a93883a 	add	r9,r9,r10
 400d868:	3807883a 	mov	r3,r7
 400d86c:	1245883a 	add	r2,r2,r9
 400d870:	280f883a 	mov	r7,r5
 400d874:	180b883a 	mov	r5,r3
 400d878:	1006943a 	slli	r3,r2,16
 400d87c:	defffd04 	addi	sp,sp,-12
 400d880:	dc800215 	stw	r18,8(sp)
 400d884:	1907883a 	add	r3,r3,r4
 400d888:	dc400115 	stw	r17,4(sp)
 400d88c:	dc000015 	stw	r16,0(sp)
 400d890:	4165383a 	mul	r18,r8,r5
 400d894:	31e3383a 	mul	r17,r6,r7
 400d898:	1012d43a 	srli	r9,r2,16
 400d89c:	62d9383a 	mul	r12,r12,r11
 400d8a0:	181f883a 	mov	r15,r3
 400d8a4:	1280022e 	bgeu	r2,r10,400d8b0 <__muldi3+0x74>
 400d8a8:	00800074 	movhi	r2,1
 400d8ac:	6099883a 	add	r12,r12,r2
 400d8b0:	624d883a 	add	r6,r12,r9
 400d8b4:	9187883a 	add	r3,r18,r6
 400d8b8:	88c7883a 	add	r3,r17,r3
 400d8bc:	7805883a 	mov	r2,r15
 400d8c0:	dc800217 	ldw	r18,8(sp)
 400d8c4:	dc400117 	ldw	r17,4(sp)
 400d8c8:	dc000017 	ldw	r16,0(sp)
 400d8cc:	dec00304 	addi	sp,sp,12
 400d8d0:	f800283a 	ret

0400d8d4 <__clzsi2>:
 400d8d4:	00bfffd4 	movui	r2,65535
 400d8d8:	11000e36 	bltu	r2,r4,400d914 <__clzsi2+0x40>
 400d8dc:	00803fc4 	movi	r2,255
 400d8e0:	01400204 	movi	r5,8
 400d8e4:	0007883a 	mov	r3,zero
 400d8e8:	11001036 	bltu	r2,r4,400d92c <__clzsi2+0x58>
 400d8ec:	000b883a 	mov	r5,zero
 400d8f0:	20c6d83a 	srl	r3,r4,r3
 400d8f4:	008100f4 	movhi	r2,1027
 400d8f8:	108b5204 	addi	r2,r2,11592
 400d8fc:	1887883a 	add	r3,r3,r2
 400d900:	18800003 	ldbu	r2,0(r3)
 400d904:	00c00804 	movi	r3,32
 400d908:	2885883a 	add	r2,r5,r2
 400d90c:	1885c83a 	sub	r2,r3,r2
 400d910:	f800283a 	ret
 400d914:	01400404 	movi	r5,16
 400d918:	00804034 	movhi	r2,256
 400d91c:	10bfffc4 	addi	r2,r2,-1
 400d920:	2807883a 	mov	r3,r5
 400d924:	113ff22e 	bgeu	r2,r4,400d8f0 <__clzsi2+0x1c>
 400d928:	01400604 	movi	r5,24
 400d92c:	2807883a 	mov	r3,r5
 400d930:	20c6d83a 	srl	r3,r4,r3
 400d934:	008100f4 	movhi	r2,1027
 400d938:	108b5204 	addi	r2,r2,11592
 400d93c:	1887883a 	add	r3,r3,r2
 400d940:	18800003 	ldbu	r2,0(r3)
 400d944:	00c00804 	movi	r3,32
 400d948:	2885883a 	add	r2,r5,r2
 400d94c:	1885c83a 	sub	r2,r3,r2
 400d950:	f800283a 	ret

0400d954 <__pack_d>:
 400d954:	20c00017 	ldw	r3,0(r4)
 400d958:	defffd04 	addi	sp,sp,-12
 400d95c:	dc000015 	stw	r16,0(sp)
 400d960:	dc800215 	stw	r18,8(sp)
 400d964:	dc400115 	stw	r17,4(sp)
 400d968:	00800044 	movi	r2,1
 400d96c:	22000317 	ldw	r8,12(r4)
 400d970:	001f883a 	mov	r15,zero
 400d974:	22400417 	ldw	r9,16(r4)
 400d978:	24000117 	ldw	r16,4(r4)
 400d97c:	10c0552e 	bgeu	r2,r3,400dad4 <__pack_d+0x180>
 400d980:	00800104 	movi	r2,4
 400d984:	18804f26 	beq	r3,r2,400dac4 <__pack_d+0x170>
 400d988:	00800084 	movi	r2,2
 400d98c:	18800226 	beq	r3,r2,400d998 <__pack_d+0x44>
 400d990:	4244b03a 	or	r2,r8,r9
 400d994:	10001a1e 	bne	r2,zero,400da00 <__pack_d+0xac>
 400d998:	000d883a 	mov	r6,zero
 400d99c:	000f883a 	mov	r7,zero
 400d9a0:	0011883a 	mov	r8,zero
 400d9a4:	00800434 	movhi	r2,16
 400d9a8:	10bfffc4 	addi	r2,r2,-1
 400d9ac:	301d883a 	mov	r14,r6
 400d9b0:	3884703a 	and	r2,r7,r2
 400d9b4:	400a953a 	slli	r5,r8,20
 400d9b8:	79bffc2c 	andhi	r6,r15,65520
 400d9bc:	308cb03a 	or	r6,r6,r2
 400d9c0:	00e00434 	movhi	r3,32784
 400d9c4:	18ffffc4 	addi	r3,r3,-1
 400d9c8:	800497fa 	slli	r2,r16,31
 400d9cc:	30c6703a 	and	r3,r6,r3
 400d9d0:	1946b03a 	or	r3,r3,r5
 400d9d4:	01600034 	movhi	r5,32768
 400d9d8:	297fffc4 	addi	r5,r5,-1
 400d9dc:	194a703a 	and	r5,r3,r5
 400d9e0:	288ab03a 	or	r5,r5,r2
 400d9e4:	2807883a 	mov	r3,r5
 400d9e8:	7005883a 	mov	r2,r14
 400d9ec:	dc800217 	ldw	r18,8(sp)
 400d9f0:	dc400117 	ldw	r17,4(sp)
 400d9f4:	dc000017 	ldw	r16,0(sp)
 400d9f8:	dec00304 	addi	sp,sp,12
 400d9fc:	f800283a 	ret
 400da00:	21000217 	ldw	r4,8(r4)
 400da04:	00bf0084 	movi	r2,-1022
 400da08:	20803f16 	blt	r4,r2,400db08 <__pack_d+0x1b4>
 400da0c:	0080ffc4 	movi	r2,1023
 400da10:	11002c16 	blt	r2,r4,400dac4 <__pack_d+0x170>
 400da14:	00803fc4 	movi	r2,255
 400da18:	408c703a 	and	r6,r8,r2
 400da1c:	00802004 	movi	r2,128
 400da20:	0007883a 	mov	r3,zero
 400da24:	000f883a 	mov	r7,zero
 400da28:	2280ffc4 	addi	r10,r4,1023
 400da2c:	30801e26 	beq	r6,r2,400daa8 <__pack_d+0x154>
 400da30:	00801fc4 	movi	r2,127
 400da34:	4089883a 	add	r4,r8,r2
 400da38:	220d803a 	cmpltu	r6,r4,r8
 400da3c:	324d883a 	add	r6,r6,r9
 400da40:	2011883a 	mov	r8,r4
 400da44:	3013883a 	mov	r9,r6
 400da48:	00880034 	movhi	r2,8192
 400da4c:	10bfffc4 	addi	r2,r2,-1
 400da50:	12400d36 	bltu	r2,r9,400da88 <__pack_d+0x134>
 400da54:	4804963a 	slli	r2,r9,24
 400da58:	400cd23a 	srli	r6,r8,8
 400da5c:	480ed23a 	srli	r7,r9,8
 400da60:	013fffc4 	movi	r4,-1
 400da64:	118cb03a 	or	r6,r2,r6
 400da68:	01400434 	movhi	r5,16
 400da6c:	297fffc4 	addi	r5,r5,-1
 400da70:	3104703a 	and	r2,r6,r4
 400da74:	3946703a 	and	r3,r7,r5
 400da78:	5201ffcc 	andi	r8,r10,2047
 400da7c:	100d883a 	mov	r6,r2
 400da80:	180f883a 	mov	r7,r3
 400da84:	003fc706 	br	400d9a4 <__pack_d+0x50>
 400da88:	480897fa 	slli	r4,r9,31
 400da8c:	4004d07a 	srli	r2,r8,1
 400da90:	4806d07a 	srli	r3,r9,1
 400da94:	52800044 	addi	r10,r10,1
 400da98:	2084b03a 	or	r2,r4,r2
 400da9c:	1011883a 	mov	r8,r2
 400daa0:	1813883a 	mov	r9,r3
 400daa4:	003feb06 	br	400da54 <__pack_d+0x100>
 400daa8:	383fe11e 	bne	r7,zero,400da30 <__pack_d+0xdc>
 400daac:	01004004 	movi	r4,256
 400dab0:	4104703a 	and	r2,r8,r4
 400dab4:	10c4b03a 	or	r2,r2,r3
 400dab8:	103fe326 	beq	r2,zero,400da48 <__pack_d+0xf4>
 400dabc:	3005883a 	mov	r2,r6
 400dac0:	003fdc06 	br	400da34 <__pack_d+0xe0>
 400dac4:	000d883a 	mov	r6,zero
 400dac8:	000f883a 	mov	r7,zero
 400dacc:	0201ffc4 	movi	r8,2047
 400dad0:	003fb406 	br	400d9a4 <__pack_d+0x50>
 400dad4:	0005883a 	mov	r2,zero
 400dad8:	00c00234 	movhi	r3,8
 400dadc:	408cb03a 	or	r6,r8,r2
 400dae0:	48ceb03a 	or	r7,r9,r3
 400dae4:	013fffc4 	movi	r4,-1
 400dae8:	01400434 	movhi	r5,16
 400daec:	297fffc4 	addi	r5,r5,-1
 400daf0:	3104703a 	and	r2,r6,r4
 400daf4:	3946703a 	and	r3,r7,r5
 400daf8:	100d883a 	mov	r6,r2
 400dafc:	180f883a 	mov	r7,r3
 400db00:	0201ffc4 	movi	r8,2047
 400db04:	003fa706 	br	400d9a4 <__pack_d+0x50>
 400db08:	1109c83a 	sub	r4,r2,r4
 400db0c:	00800e04 	movi	r2,56
 400db10:	11004316 	blt	r2,r4,400dc20 <__pack_d+0x2cc>
 400db14:	21fff804 	addi	r7,r4,-32
 400db18:	38004516 	blt	r7,zero,400dc30 <__pack_d+0x2dc>
 400db1c:	49d8d83a 	srl	r12,r9,r7
 400db20:	001b883a 	mov	r13,zero
 400db24:	0023883a 	mov	r17,zero
 400db28:	01400044 	movi	r5,1
 400db2c:	0025883a 	mov	r18,zero
 400db30:	38004716 	blt	r7,zero,400dc50 <__pack_d+0x2fc>
 400db34:	29d6983a 	sll	r11,r5,r7
 400db38:	0015883a 	mov	r10,zero
 400db3c:	00bfffc4 	movi	r2,-1
 400db40:	5089883a 	add	r4,r10,r2
 400db44:	588b883a 	add	r5,r11,r2
 400db48:	228d803a 	cmpltu	r6,r4,r10
 400db4c:	314b883a 	add	r5,r6,r5
 400db50:	4104703a 	and	r2,r8,r4
 400db54:	4946703a 	and	r3,r9,r5
 400db58:	10c4b03a 	or	r2,r2,r3
 400db5c:	10000226 	beq	r2,zero,400db68 <__pack_d+0x214>
 400db60:	04400044 	movi	r17,1
 400db64:	0025883a 	mov	r18,zero
 400db68:	00803fc4 	movi	r2,255
 400db6c:	644eb03a 	or	r7,r12,r17
 400db70:	3892703a 	and	r9,r7,r2
 400db74:	00802004 	movi	r2,128
 400db78:	6c90b03a 	or	r8,r13,r18
 400db7c:	0015883a 	mov	r10,zero
 400db80:	48801626 	beq	r9,r2,400dbdc <__pack_d+0x288>
 400db84:	01001fc4 	movi	r4,127
 400db88:	3905883a 	add	r2,r7,r4
 400db8c:	11cd803a 	cmpltu	r6,r2,r7
 400db90:	320d883a 	add	r6,r6,r8
 400db94:	100f883a 	mov	r7,r2
 400db98:	00840034 	movhi	r2,4096
 400db9c:	10bfffc4 	addi	r2,r2,-1
 400dba0:	3011883a 	mov	r8,r6
 400dba4:	0007883a 	mov	r3,zero
 400dba8:	11801b36 	bltu	r2,r6,400dc18 <__pack_d+0x2c4>
 400dbac:	4004963a 	slli	r2,r8,24
 400dbb0:	3808d23a 	srli	r4,r7,8
 400dbb4:	400ad23a 	srli	r5,r8,8
 400dbb8:	1813883a 	mov	r9,r3
 400dbbc:	1108b03a 	or	r4,r2,r4
 400dbc0:	00bfffc4 	movi	r2,-1
 400dbc4:	00c00434 	movhi	r3,16
 400dbc8:	18ffffc4 	addi	r3,r3,-1
 400dbcc:	208c703a 	and	r6,r4,r2
 400dbd0:	28ce703a 	and	r7,r5,r3
 400dbd4:	4a01ffcc 	andi	r8,r9,2047
 400dbd8:	003f7206 	br	400d9a4 <__pack_d+0x50>
 400dbdc:	503fe91e 	bne	r10,zero,400db84 <__pack_d+0x230>
 400dbe0:	01004004 	movi	r4,256
 400dbe4:	3904703a 	and	r2,r7,r4
 400dbe8:	0007883a 	mov	r3,zero
 400dbec:	10c4b03a 	or	r2,r2,r3
 400dbf0:	10000626 	beq	r2,zero,400dc0c <__pack_d+0x2b8>
 400dbf4:	3a45883a 	add	r2,r7,r9
 400dbf8:	11cd803a 	cmpltu	r6,r2,r7
 400dbfc:	320d883a 	add	r6,r6,r8
 400dc00:	100f883a 	mov	r7,r2
 400dc04:	3011883a 	mov	r8,r6
 400dc08:	0007883a 	mov	r3,zero
 400dc0c:	00840034 	movhi	r2,4096
 400dc10:	10bfffc4 	addi	r2,r2,-1
 400dc14:	123fe52e 	bgeu	r2,r8,400dbac <__pack_d+0x258>
 400dc18:	00c00044 	movi	r3,1
 400dc1c:	003fe306 	br	400dbac <__pack_d+0x258>
 400dc20:	0009883a 	mov	r4,zero
 400dc24:	0013883a 	mov	r9,zero
 400dc28:	000b883a 	mov	r5,zero
 400dc2c:	003fe406 	br	400dbc0 <__pack_d+0x26c>
 400dc30:	4a47883a 	add	r3,r9,r9
 400dc34:	008007c4 	movi	r2,31
 400dc38:	1105c83a 	sub	r2,r2,r4
 400dc3c:	1886983a 	sll	r3,r3,r2
 400dc40:	4118d83a 	srl	r12,r8,r4
 400dc44:	491ad83a 	srl	r13,r9,r4
 400dc48:	1b18b03a 	or	r12,r3,r12
 400dc4c:	003fb506 	br	400db24 <__pack_d+0x1d0>
 400dc50:	2806d07a 	srli	r3,r5,1
 400dc54:	008007c4 	movi	r2,31
 400dc58:	1105c83a 	sub	r2,r2,r4
 400dc5c:	1896d83a 	srl	r11,r3,r2
 400dc60:	2914983a 	sll	r10,r5,r4
 400dc64:	003fb506 	br	400db3c <__pack_d+0x1e8>

0400dc68 <__unpack_d>:
 400dc68:	20c00117 	ldw	r3,4(r4)
 400dc6c:	22400017 	ldw	r9,0(r4)
 400dc70:	00800434 	movhi	r2,16
 400dc74:	10bfffc4 	addi	r2,r2,-1
 400dc78:	1808d53a 	srli	r4,r3,20
 400dc7c:	180cd7fa 	srli	r6,r3,31
 400dc80:	1894703a 	and	r10,r3,r2
 400dc84:	2201ffcc 	andi	r8,r4,2047
 400dc88:	281b883a 	mov	r13,r5
 400dc8c:	4817883a 	mov	r11,r9
 400dc90:	29800115 	stw	r6,4(r5)
 400dc94:	5019883a 	mov	r12,r10
 400dc98:	40001e1e 	bne	r8,zero,400dd14 <__unpack_d+0xac>
 400dc9c:	4a84b03a 	or	r2,r9,r10
 400dca0:	10001926 	beq	r2,zero,400dd08 <__unpack_d+0xa0>
 400dca4:	4804d63a 	srli	r2,r9,24
 400dca8:	500c923a 	slli	r6,r10,8
 400dcac:	013f0084 	movi	r4,-1022
 400dcb0:	00c40034 	movhi	r3,4096
 400dcb4:	18ffffc4 	addi	r3,r3,-1
 400dcb8:	118cb03a 	or	r6,r2,r6
 400dcbc:	008000c4 	movi	r2,3
 400dcc0:	480a923a 	slli	r5,r9,8
 400dcc4:	68800015 	stw	r2,0(r13)
 400dcc8:	69000215 	stw	r4,8(r13)
 400dccc:	19800b36 	bltu	r3,r6,400dcfc <__unpack_d+0x94>
 400dcd0:	200f883a 	mov	r7,r4
 400dcd4:	1811883a 	mov	r8,r3
 400dcd8:	2945883a 	add	r2,r5,r5
 400dcdc:	1149803a 	cmpltu	r4,r2,r5
 400dce0:	3187883a 	add	r3,r6,r6
 400dce4:	20c9883a 	add	r4,r4,r3
 400dce8:	100b883a 	mov	r5,r2
 400dcec:	200d883a 	mov	r6,r4
 400dcf0:	39ffffc4 	addi	r7,r7,-1
 400dcf4:	413ff82e 	bgeu	r8,r4,400dcd8 <__unpack_d+0x70>
 400dcf8:	69c00215 	stw	r7,8(r13)
 400dcfc:	69800415 	stw	r6,16(r13)
 400dd00:	69400315 	stw	r5,12(r13)
 400dd04:	f800283a 	ret
 400dd08:	00800084 	movi	r2,2
 400dd0c:	28800015 	stw	r2,0(r5)
 400dd10:	f800283a 	ret
 400dd14:	0081ffc4 	movi	r2,2047
 400dd18:	40800f26 	beq	r8,r2,400dd58 <__unpack_d+0xf0>
 400dd1c:	480cd63a 	srli	r6,r9,24
 400dd20:	5006923a 	slli	r3,r10,8
 400dd24:	4804923a 	slli	r2,r9,8
 400dd28:	0009883a 	mov	r4,zero
 400dd2c:	30c6b03a 	or	r3,r6,r3
 400dd30:	01440034 	movhi	r5,4096
 400dd34:	110cb03a 	or	r6,r2,r4
 400dd38:	423f0044 	addi	r8,r8,-1023
 400dd3c:	194eb03a 	or	r7,r3,r5
 400dd40:	008000c4 	movi	r2,3
 400dd44:	69c00415 	stw	r7,16(r13)
 400dd48:	6a000215 	stw	r8,8(r13)
 400dd4c:	68800015 	stw	r2,0(r13)
 400dd50:	69800315 	stw	r6,12(r13)
 400dd54:	f800283a 	ret
 400dd58:	4a84b03a 	or	r2,r9,r10
 400dd5c:	1000031e 	bne	r2,zero,400dd6c <__unpack_d+0x104>
 400dd60:	00800104 	movi	r2,4
 400dd64:	28800015 	stw	r2,0(r5)
 400dd68:	f800283a 	ret
 400dd6c:	0009883a 	mov	r4,zero
 400dd70:	01400234 	movhi	r5,8
 400dd74:	4904703a 	and	r2,r9,r4
 400dd78:	5146703a 	and	r3,r10,r5
 400dd7c:	10c4b03a 	or	r2,r2,r3
 400dd80:	10000526 	beq	r2,zero,400dd98 <__unpack_d+0x130>
 400dd84:	00800044 	movi	r2,1
 400dd88:	68800015 	stw	r2,0(r13)
 400dd8c:	6b000415 	stw	r12,16(r13)
 400dd90:	6ac00315 	stw	r11,12(r13)
 400dd94:	f800283a 	ret
 400dd98:	68000015 	stw	zero,0(r13)
 400dd9c:	003ffb06 	br	400dd8c <__unpack_d+0x124>

0400dda0 <__fpcmp_parts_d>:
 400dda0:	21800017 	ldw	r6,0(r4)
 400dda4:	00c00044 	movi	r3,1
 400dda8:	19800a2e 	bgeu	r3,r6,400ddd4 <__fpcmp_parts_d+0x34>
 400ddac:	28800017 	ldw	r2,0(r5)
 400ddb0:	1880082e 	bgeu	r3,r2,400ddd4 <__fpcmp_parts_d+0x34>
 400ddb4:	00c00104 	movi	r3,4
 400ddb8:	30c02626 	beq	r6,r3,400de54 <__fpcmp_parts_d+0xb4>
 400ddbc:	10c02226 	beq	r2,r3,400de48 <__fpcmp_parts_d+0xa8>
 400ddc0:	00c00084 	movi	r3,2
 400ddc4:	30c00526 	beq	r6,r3,400dddc <__fpcmp_parts_d+0x3c>
 400ddc8:	10c0071e 	bne	r2,r3,400dde8 <__fpcmp_parts_d+0x48>
 400ddcc:	20800117 	ldw	r2,4(r4)
 400ddd0:	1000091e 	bne	r2,zero,400ddf8 <__fpcmp_parts_d+0x58>
 400ddd4:	00800044 	movi	r2,1
 400ddd8:	f800283a 	ret
 400dddc:	10c01a1e 	bne	r2,r3,400de48 <__fpcmp_parts_d+0xa8>
 400dde0:	0005883a 	mov	r2,zero
 400dde4:	f800283a 	ret
 400dde8:	22000117 	ldw	r8,4(r4)
 400ddec:	28800117 	ldw	r2,4(r5)
 400ddf0:	40800326 	beq	r8,r2,400de00 <__fpcmp_parts_d+0x60>
 400ddf4:	403ff726 	beq	r8,zero,400ddd4 <__fpcmp_parts_d+0x34>
 400ddf8:	00bfffc4 	movi	r2,-1
 400ddfc:	f800283a 	ret
 400de00:	20c00217 	ldw	r3,8(r4)
 400de04:	28800217 	ldw	r2,8(r5)
 400de08:	10fffa16 	blt	r2,r3,400ddf4 <__fpcmp_parts_d+0x54>
 400de0c:	18800916 	blt	r3,r2,400de34 <__fpcmp_parts_d+0x94>
 400de10:	21c00417 	ldw	r7,16(r4)
 400de14:	28c00417 	ldw	r3,16(r5)
 400de18:	21800317 	ldw	r6,12(r4)
 400de1c:	28800317 	ldw	r2,12(r5)
 400de20:	19fff436 	bltu	r3,r7,400ddf4 <__fpcmp_parts_d+0x54>
 400de24:	38c00526 	beq	r7,r3,400de3c <__fpcmp_parts_d+0x9c>
 400de28:	38c00236 	bltu	r7,r3,400de34 <__fpcmp_parts_d+0x94>
 400de2c:	19ffec1e 	bne	r3,r7,400dde0 <__fpcmp_parts_d+0x40>
 400de30:	30bfeb2e 	bgeu	r6,r2,400dde0 <__fpcmp_parts_d+0x40>
 400de34:	403fe71e 	bne	r8,zero,400ddd4 <__fpcmp_parts_d+0x34>
 400de38:	003fef06 	br	400ddf8 <__fpcmp_parts_d+0x58>
 400de3c:	11bffa2e 	bgeu	r2,r6,400de28 <__fpcmp_parts_d+0x88>
 400de40:	403fe426 	beq	r8,zero,400ddd4 <__fpcmp_parts_d+0x34>
 400de44:	003fec06 	br	400ddf8 <__fpcmp_parts_d+0x58>
 400de48:	28800117 	ldw	r2,4(r5)
 400de4c:	103fe11e 	bne	r2,zero,400ddd4 <__fpcmp_parts_d+0x34>
 400de50:	003fe906 	br	400ddf8 <__fpcmp_parts_d+0x58>
 400de54:	11bfdd1e 	bne	r2,r6,400ddcc <__fpcmp_parts_d+0x2c>
 400de58:	28c00117 	ldw	r3,4(r5)
 400de5c:	20800117 	ldw	r2,4(r4)
 400de60:	1885c83a 	sub	r2,r3,r2
 400de64:	f800283a 	ret

0400de68 <_exit>:
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400de68:	00810134 	movhi	r2,1028
 400de6c:	10a8f644 	addi	r2,r2,-23591
 400de70:	10000005 	stb	zero,0(r2)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400de74:	20000226 	beq	r4,zero,400de80 <_exit+0x18>
    ALT_SIM_FAIL();
 400de78:	002af070 	cmpltui	zero,zero,43969
 400de7c:	003fff06 	br	400de7c <_exit+0x14>
  } else {
    ALT_SIM_PASS();
 400de80:	002af0b0 	cmpltui	zero,zero,43970
 400de84:	003ffd06 	br	400de7c <_exit+0x14>

0400de88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400de88:	deffff04 	addi	sp,sp,-4
 400de8c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400de90:	20c00324 	muli	r3,r4,12
 400de94:	20001116 	blt	r4,zero,400dedc <fstat+0x54>
 400de98:	00810134 	movhi	r2,1028
 400de9c:	10a03904 	addi	r2,r2,-32540
 400dea0:	1889883a 	add	r4,r3,r2
  
  if (fd)
 400dea4:	20000d26 	beq	r4,zero,400dedc <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400dea8:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400deac:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400deb0:	10800817 	ldw	r2,32(r2)
 400deb4:	10000326 	beq	r2,zero,400dec4 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 400deb8:	dfc00017 	ldw	ra,0(sp)
 400debc:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
 400dec0:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400dec4:	00880004 	movi	r2,8192
 400dec8:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 400decc:	1805883a 	mov	r2,r3
 400ded0:	dfc00017 	ldw	ra,0(sp)
 400ded4:	dec00104 	addi	sp,sp,4
 400ded8:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 400dedc:	00810134 	movhi	r2,1028
 400dee0:	10a13f04 	addi	r2,r2,-31492
 400dee4:	10800017 	ldw	r2,0(r2)
 400dee8:	00c10134 	movhi	r3,1028
 400deec:	18e8e504 	addi	r3,r3,-23660
 400def0:	10000226 	beq	r2,zero,400defc <fstat+0x74>
 400def4:	103ee83a 	callr	r2
 400def8:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400defc:	00801444 	movi	r2,81
 400df00:	18800015 	stw	r2,0(r3)
 400df04:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
 400df08:	1805883a 	mov	r2,r3
 400df0c:	dfc00017 	ldw	ra,0(sp)
 400df10:	dec00104 	addi	sp,sp,4
 400df14:	f800283a 	ret

0400df18 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 400df18:	defff704 	addi	sp,sp,-36
 400df1c:	dfc00815 	stw	ra,32(sp)
 400df20:	df000715 	stw	fp,28(sp)
 400df24:	dc000615 	stw	r16,24(sp)
 400df28:	df000604 	addi	fp,sp,24
 400df2c:	e13ffd15 	stw	r4,-12(fp)
 400df30:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 400df34:	e0bffe17 	ldw	r2,-8(fp)
 400df38:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400df3c:	00810134 	movhi	r2,1028
 400df40:	10a8f104 	addi	r2,r2,-23612
 400df44:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 400df48:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400df4c:	00810134 	movhi	r2,1028
 400df50:	10a8f004 	addi	r2,r2,-23616
 400df54:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 400df58:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 400df5c:	e0bffa17 	ldw	r2,-24(fp)
 400df60:	1005003a 	cmpeq	r2,r2,zero
 400df64:	1000651e 	bne	r2,zero,400e0fc <gettimeofday+0x1e4>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 400df68:	d0a7f417 	ldw	r2,-24624(gp)
 400df6c:	1009883a 	mov	r4,r2
 400df70:	e0fffb17 	ldw	r3,-20(fp)
 400df74:	e0bffa17 	ldw	r2,-24(fp)
 400df78:	1885203a 	divu	r2,r3,r2
 400df7c:	2085883a 	add	r2,r4,r2
 400df80:	1007883a 	mov	r3,r2
 400df84:	e0bffd17 	ldw	r2,-12(fp)
 400df88:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 400df8c:	00810134 	movhi	r2,1028
 400df90:	10a8ec04 	addi	r2,r2,-23632
 400df94:	10800017 	ldw	r2,0(r2)
 400df98:	1021883a 	mov	r16,r2
 400df9c:	e17ffb17 	ldw	r5,-20(fp)
 400dfa0:	000d883a 	mov	r6,zero
 400dfa4:	00c003f4 	movhi	r3,15
 400dfa8:	18d09004 	addi	r3,r3,16960
 400dfac:	e0bffa17 	ldw	r2,-24(fp)
 400dfb0:	1889203a 	divu	r4,r3,r2
 400dfb4:	2005883a 	mov	r2,r4
 400dfb8:	0007883a 	mov	r3,zero
 400dfbc:	2809883a 	mov	r4,r5
 400dfc0:	300b883a 	mov	r5,r6
 400dfc4:	100d883a 	mov	r6,r2
 400dfc8:	180f883a 	mov	r7,r3
 400dfcc:	400d83c0 	call	400d83c <__muldi3>
 400dfd0:	1009883a 	mov	r4,r2
 400dfd4:	180b883a 	mov	r5,r3
 400dfd8:	2005883a 	mov	r2,r4
 400dfdc:	2807883a 	mov	r3,r5
 400dfe0:	1009883a 	mov	r4,r2
 400dfe4:	180b883a 	mov	r5,r3
 400dfe8:	018003f4 	movhi	r6,15
 400dfec:	31909004 	addi	r6,r6,16960
 400dff0:	000f883a 	mov	r7,zero
 400dff4:	400c0140 	call	400c014 <__umoddi3>
 400dff8:	1009883a 	mov	r4,r2
 400dffc:	180b883a 	mov	r5,r3
 400e000:	2005883a 	mov	r2,r4
 400e004:	2807883a 	mov	r3,r5
 400e008:	8085883a 	add	r2,r16,r2
 400e00c:	1007883a 	mov	r3,r2
 400e010:	e0bffd17 	ldw	r2,-12(fp)
 400e014:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 400e018:	00001506 	br	400e070 <gettimeofday+0x158>
      if (ptimeval->tv_sec <= 0)
 400e01c:	e0bffd17 	ldw	r2,-12(fp)
 400e020:	10800017 	ldw	r2,0(r2)
 400e024:	10800048 	cmpgei	r2,r2,1
 400e028:	1000051e 	bne	r2,zero,400e040 <gettimeofday+0x128>
      {
          ptimeval->tv_sec = 0;
 400e02c:	e0bffd17 	ldw	r2,-12(fp)
 400e030:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 400e034:	e0bffd17 	ldw	r2,-12(fp)
 400e038:	10000115 	stw	zero,4(r2)
          break;
 400e03c:	00001d06 	br	400e0b4 <gettimeofday+0x19c>
      }
      else
      {
          ptimeval->tv_sec--;
 400e040:	e0bffd17 	ldw	r2,-12(fp)
 400e044:	10800017 	ldw	r2,0(r2)
 400e048:	10ffffc4 	addi	r3,r2,-1
 400e04c:	e0bffd17 	ldw	r2,-12(fp)
 400e050:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 400e054:	e0bffd17 	ldw	r2,-12(fp)
 400e058:	10c00117 	ldw	r3,4(r2)
 400e05c:	008003f4 	movhi	r2,15
 400e060:	10909004 	addi	r2,r2,16960
 400e064:	1887883a 	add	r3,r3,r2
 400e068:	e0bffd17 	ldw	r2,-12(fp)
 400e06c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 400e070:	e0bffd17 	ldw	r2,-12(fp)
 400e074:	10800117 	ldw	r2,4(r2)
 400e078:	1004803a 	cmplt	r2,r2,zero
 400e07c:	103fe71e 	bne	r2,zero,400e01c <gettimeofday+0x104>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 400e080:	00000c06 	br	400e0b4 <gettimeofday+0x19c>
      ptimeval->tv_sec++;
 400e084:	e0bffd17 	ldw	r2,-12(fp)
 400e088:	10800017 	ldw	r2,0(r2)
 400e08c:	10c00044 	addi	r3,r2,1
 400e090:	e0bffd17 	ldw	r2,-12(fp)
 400e094:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 400e098:	e0bffd17 	ldw	r2,-12(fp)
 400e09c:	10c00117 	ldw	r3,4(r2)
 400e0a0:	00bffc74 	movhi	r2,65521
 400e0a4:	10af7004 	addi	r2,r2,-16960
 400e0a8:	1887883a 	add	r3,r3,r2
 400e0ac:	e0bffd17 	ldw	r2,-12(fp)
 400e0b0:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 400e0b4:	e0bffd17 	ldw	r2,-12(fp)
 400e0b8:	10c00117 	ldw	r3,4(r2)
 400e0bc:	008003f4 	movhi	r2,15
 400e0c0:	10908fc4 	addi	r2,r2,16959
 400e0c4:	10ffef16 	blt	r2,r3,400e084 <gettimeofday+0x16c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 400e0c8:	e0bffc17 	ldw	r2,-16(fp)
 400e0cc:	1005003a 	cmpeq	r2,r2,zero
 400e0d0:	1000081e 	bne	r2,zero,400e0f4 <gettimeofday+0x1dc>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 400e0d4:	d0e7f217 	ldw	r3,-24632(gp)
 400e0d8:	e0bffc17 	ldw	r2,-16(fp)
 400e0dc:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 400e0e0:	00810134 	movhi	r2,1028
 400e0e4:	10a8ea04 	addi	r2,r2,-23640
 400e0e8:	10c00017 	ldw	r3,0(r2)
 400e0ec:	e0bffc17 	ldw	r2,-16(fp)
 400e0f0:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 400e0f4:	e03fff15 	stw	zero,-4(fp)
 400e0f8:	00000206 	br	400e104 <gettimeofday+0x1ec>
  }

  return -ENOTSUP;
 400e0fc:	00bfde84 	movi	r2,-134
 400e100:	e0bfff15 	stw	r2,-4(fp)
 400e104:	e0bfff17 	ldw	r2,-4(fp)
}
 400e108:	e037883a 	mov	sp,fp
 400e10c:	dfc00217 	ldw	ra,8(sp)
 400e110:	df000117 	ldw	fp,4(sp)
 400e114:	dc000017 	ldw	r16,0(sp)
 400e118:	dec00304 	addi	sp,sp,12
 400e11c:	f800283a 	ret

0400e120 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400e120:	defff004 	addi	sp,sp,-64
 400e124:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e128:	20c00324 	muli	r3,r4,12
 400e12c:	20000f16 	blt	r4,zero,400e16c <isatty+0x4c>
 400e130:	00810134 	movhi	r2,1028
 400e134:	10a03904 	addi	r2,r2,-32540
 400e138:	1885883a 	add	r2,r3,r2
  
  if (fd)
 400e13c:	10000b26 	beq	r2,zero,400e16c <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400e140:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400e144:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400e148:	10c00817 	ldw	r3,32(r2)
 400e14c:	00800044 	movi	r2,1
 400e150:	18000326 	beq	r3,zero,400e160 <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400e154:	400de880 	call	400de88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400e158:	d8c00117 	ldw	r3,4(sp)
 400e15c:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 400e160:	dfc00f17 	ldw	ra,60(sp)
 400e164:	dec01004 	addi	sp,sp,64
 400e168:	f800283a 	ret
 400e16c:	00810134 	movhi	r2,1028
 400e170:	10a13f04 	addi	r2,r2,-31492
 400e174:	10800017 	ldw	r2,0(r2)
 400e178:	00c10134 	movhi	r3,1028
 400e17c:	18e8e504 	addi	r3,r3,-23660
 400e180:	10000226 	beq	r2,zero,400e18c <isatty+0x6c>
 400e184:	103ee83a 	callr	r2
 400e188:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e18c:	00801444 	movi	r2,81
 400e190:	18800015 	stw	r2,0(r3)
 400e194:	0005883a 	mov	r2,zero
    return 0;
  }
}
 400e198:	dfc00f17 	ldw	ra,60(sp)
 400e19c:	dec01004 	addi	sp,sp,64
 400e1a0:	f800283a 	ret

0400e1a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400e1a4:	defffe04 	addi	sp,sp,-8
 400e1a8:	dfc00115 	stw	ra,4(sp)
 400e1ac:	df000015 	stw	fp,0(sp)
 400e1b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400e1b4:	01010134 	movhi	r4,1028
 400e1b8:	21214d04 	addi	r4,r4,-31436
 400e1bc:	014100f4 	movhi	r5,1027
 400e1c0:	2959bd04 	addi	r5,r5,26356
 400e1c4:	01810134 	movhi	r6,1028
 400e1c8:	31a14d04 	addi	r6,r6,-31436
 400e1cc:	400e2240 	call	400e224 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400e1d0:	01010034 	movhi	r4,1024
 400e1d4:	21000804 	addi	r4,r4,32
 400e1d8:	01410034 	movhi	r5,1024
 400e1dc:	29400804 	addi	r5,r5,32
 400e1e0:	01810034 	movhi	r6,1024
 400e1e4:	31806204 	addi	r6,r6,392
 400e1e8:	400e2240 	call	400e224 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400e1ec:	010100f4 	movhi	r4,1027
 400e1f0:	2104ce04 	addi	r4,r4,4920
 400e1f4:	014100f4 	movhi	r5,1027
 400e1f8:	2944ce04 	addi	r5,r5,4920
 400e1fc:	018100f4 	movhi	r6,1027
 400e200:	3199bd04 	addi	r6,r6,26356
 400e204:	400e2240 	call	400e224 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400e208:	4025f2c0 	call	4025f2c <alt_dcache_flush_all>
  alt_icache_flush_all();
 400e20c:	40261bc0 	call	40261bc <alt_icache_flush_all>
}
 400e210:	e037883a 	mov	sp,fp
 400e214:	dfc00117 	ldw	ra,4(sp)
 400e218:	df000017 	ldw	fp,0(sp)
 400e21c:	dec00204 	addi	sp,sp,8
 400e220:	f800283a 	ret

0400e224 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400e224:	defffc04 	addi	sp,sp,-16
 400e228:	df000315 	stw	fp,12(sp)
 400e22c:	df000304 	addi	fp,sp,12
 400e230:	e13ffd15 	stw	r4,-12(fp)
 400e234:	e17ffe15 	stw	r5,-8(fp)
 400e238:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400e23c:	e0fffe17 	ldw	r3,-8(fp)
 400e240:	e0bffd17 	ldw	r2,-12(fp)
 400e244:	18800e26 	beq	r3,r2,400e280 <alt_load_section+0x5c>
  {
    while( to != end )
 400e248:	00000a06 	br	400e274 <alt_load_section+0x50>
    {
      *to++ = *from++;
 400e24c:	e0bffd17 	ldw	r2,-12(fp)
 400e250:	10c00017 	ldw	r3,0(r2)
 400e254:	e0bffe17 	ldw	r2,-8(fp)
 400e258:	10c00015 	stw	r3,0(r2)
 400e25c:	e0bffe17 	ldw	r2,-8(fp)
 400e260:	10800104 	addi	r2,r2,4
 400e264:	e0bffe15 	stw	r2,-8(fp)
 400e268:	e0bffd17 	ldw	r2,-12(fp)
 400e26c:	10800104 	addi	r2,r2,4
 400e270:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400e274:	e0fffe17 	ldw	r3,-8(fp)
 400e278:	e0bfff17 	ldw	r2,-4(fp)
 400e27c:	18bff31e 	bne	r3,r2,400e24c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 400e280:	e037883a 	mov	sp,fp
 400e284:	df000017 	ldw	fp,0(sp)
 400e288:	dec00104 	addi	sp,sp,4
 400e28c:	f800283a 	ret

0400e290 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400e290:	defffe04 	addi	sp,sp,-8
 400e294:	dfc00115 	stw	ra,4(sp)
 400e298:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e29c:	20001f16 	blt	r4,zero,400e31c <lseek+0x8c>
 400e2a0:	20c00324 	muli	r3,r4,12
 400e2a4:	00810134 	movhi	r2,1028
 400e2a8:	10a03904 	addi	r2,r2,-32540
 400e2ac:	1889883a 	add	r4,r3,r2
  
  if (fd) 
 400e2b0:	20001c26 	beq	r4,zero,400e324 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400e2b4:	20800017 	ldw	r2,0(r4)
 400e2b8:	10800717 	ldw	r2,28(r2)
 400e2bc:	10000626 	beq	r2,zero,400e2d8 <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400e2c0:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 400e2c4:	10000516 	blt	r2,zero,400e2dc <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
 400e2c8:	dfc00117 	ldw	ra,4(sp)
 400e2cc:	dc000017 	ldw	r16,0(sp)
 400e2d0:	dec00204 	addi	sp,sp,8
 400e2d4:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400e2d8:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 400e2dc:	00a1c83a 	sub	r16,zero,r2
 400e2e0:	00810134 	movhi	r2,1028
 400e2e4:	10a13f04 	addi	r2,r2,-31492
 400e2e8:	10800017 	ldw	r2,0(r2)
 400e2ec:	10000826 	beq	r2,zero,400e310 <lseek+0x80>
 400e2f0:	103ee83a 	callr	r2
 400e2f4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
 400e2f8:	00bfffc4 	movi	r2,-1
 400e2fc:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
 400e300:	dfc00117 	ldw	ra,4(sp)
 400e304:	dc000017 	ldw	r16,0(sp)
 400e308:	dec00204 	addi	sp,sp,8
 400e30c:	f800283a 	ret
 400e310:	00c10134 	movhi	r3,1028
 400e314:	18e8e504 	addi	r3,r3,-23660
 400e318:	003ff706 	br	400e2f8 <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e31c:	04001444 	movi	r16,81
 400e320:	003fef06 	br	400e2e0 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
 400e324:	00bfebc4 	movi	r2,-81
 400e328:	003fec06 	br	400e2dc <lseek+0x4c>

0400e32c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400e32c:	defffd04 	addi	sp,sp,-12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400e330:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400e334:	dfc00215 	stw	ra,8(sp)
 400e338:	dcc00115 	stw	r19,4(sp)
 400e33c:	dc400015 	stw	r17,0(sp)
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400e340:	04c00044 	movi	r19,1
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400e344:	40133b80 	call	40133b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400e348:	400edd40 	call	400edd4 <OSInit>
 400e34c:	9809883a 	mov	r4,r19
 400e350:	40119600 	call	4011960 <OSSemCreate>
 400e354:	00c10134 	movhi	r3,1028
 400e358:	18e8f304 	addi	r3,r3,-23604
 400e35c:	9809883a 	mov	r4,r19
 400e360:	18800015 	stw	r2,0(r3)
 400e364:	40119600 	call	4011960 <OSSemCreate>
 400e368:	00c10134 	movhi	r3,1028
 400e36c:	18e8f504 	addi	r3,r3,-23596
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 400e370:	9809883a 	mov	r4,r19
 400e374:	18800015 	stw	r2,0(r3)
 400e378:	40119600 	call	4011960 <OSSemCreate>
 400e37c:	00c10134 	movhi	r3,1028
 400e380:	18e94104 	addi	r3,r3,-23292
 400e384:	18800015 	stw	r2,0(r3)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400e388:	40132bc0 	call	40132bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400e38c:	010100f4 	movhi	r4,1027
 400e390:	210b9204 	addi	r4,r4,11848
 400e394:	200b883a 	mov	r5,r4
 400e398:	200d883a 	mov	r6,r4
 400e39c:	402635c0 	call	402635c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400e3a0:	40260600 	call	4026060 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400e3a4:	010100b4 	movhi	r4,1026
 400e3a8:	21183104 	addi	r4,r4,24772
 400e3ac:	40307480 	call	4030748 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400e3b0:	d167f717 	ldw	r5,-24612(gp)
 400e3b4:	d1a7f817 	ldw	r6,-24608(gp)
 400e3b8:	d127f617 	ldw	r4,-24616(gp)
 400e3bc:	4000d500 	call	4000d50 <main>
 400e3c0:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
 400e3c4:	9809883a 	mov	r4,r19
 400e3c8:	4017ba80 	call	4017ba8 <close>
  exit (result);
 400e3cc:	8809883a 	mov	r4,r17
 400e3d0:	4001d8c0 	call	4001d8c <exit>

0400e3d4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e3d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e3d8:	00bfff84 	movi	r2,-2
 400e3dc:	2884703a 	and	r2,r5,r2
 400e3e0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400e3e4:	d0e00a17 	ldw	r3,-32728(gp)
 400e3e8:	00bfff04 	movi	r2,-4
 400e3ec:	18c000c4 	addi	r3,r3,3
 400e3f0:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400e3f4:	1909883a 	add	r4,r3,r4
 400e3f8:	00818034 	movhi	r2,1536
 400e3fc:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400e400:	d0e00a15 	stw	r3,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400e404:	1100042e 	bgeu	r2,r4,400e418 <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e408:	2801703a 	wrctl	status,r5
 400e40c:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 400e410:	1805883a 	mov	r2,r3
 400e414:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 400e418:	d1200a15 	stw	r4,-32728(gp)
 400e41c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 400e420:	1805883a 	mov	r2,r3
 400e424:	f800283a 	ret

0400e428 <settimeofday>:
 * alt_syscall.h
 */
 
int ALT_SETTIMEOFDAY (const struct timeval  *t,
                      const struct timezone *tz)
{
 400e428:	defff904 	addi	sp,sp,-28
 400e42c:	dfc00615 	stw	ra,24(sp)
 400e430:	df000515 	stw	fp,20(sp)
 400e434:	df000504 	addi	fp,sp,20
 400e438:	e13ffd15 	stw	r4,-12(fp)
 400e43c:	e17ffe15 	stw	r5,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400e440:	00810134 	movhi	r2,1028
 400e444:	10a8f104 	addi	r2,r2,-23612
 400e448:	10800017 	ldw	r2,0(r2)
  alt_u32 nticks    = alt_nticks ();
 400e44c:	e0bffc15 	stw	r2,-16(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400e450:	00810134 	movhi	r2,1028
 400e454:	10a8f004 	addi	r2,r2,-23616
 400e458:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 400e45c:	e0bffb15 	stw	r2,-20(fp)

  /* If there is a system clock available, update the current time */

  if (tick_rate)
 400e460:	e0bffb17 	ldw	r2,-20(fp)
 400e464:	1005003a 	cmpeq	r2,r2,zero
 400e468:	10002c1e 	bne	r2,zero,400e51c <settimeofday+0xf4>
  {
    alt_resettime.tv_sec  = t->tv_sec - nticks/tick_rate;
 400e46c:	e0bffd17 	ldw	r2,-12(fp)
 400e470:	10800017 	ldw	r2,0(r2)
 400e474:	1009883a 	mov	r4,r2
 400e478:	e0fffc17 	ldw	r3,-16(fp)
 400e47c:	e0bffb17 	ldw	r2,-20(fp)
 400e480:	1885203a 	divu	r2,r3,r2
 400e484:	2085c83a 	sub	r2,r4,r2
 400e488:	1007883a 	mov	r3,r2
 400e48c:	00810134 	movhi	r2,1028
 400e490:	10a8eb04 	addi	r2,r2,-23636
 400e494:	10c00015 	stw	r3,0(r2)
    alt_resettime.tv_usec = t->tv_usec - 
 400e498:	e0bffd17 	ldw	r2,-12(fp)
 400e49c:	10800117 	ldw	r2,4(r2)
 400e4a0:	100b883a 	mov	r5,r2
 400e4a4:	00c003f4 	movhi	r3,15
 400e4a8:	18d09004 	addi	r3,r3,16960
 400e4ac:	e0bffb17 	ldw	r2,-20(fp)
 400e4b0:	1887203a 	divu	r3,r3,r2
 400e4b4:	e0bffc17 	ldw	r2,-16(fp)
 400e4b8:	1889383a 	mul	r4,r3,r2
 400e4bc:	008003f4 	movhi	r2,15
 400e4c0:	10909004 	addi	r2,r2,16960
 400e4c4:	2087203a 	divu	r3,r4,r2
 400e4c8:	008003f4 	movhi	r2,15
 400e4cc:	10909004 	addi	r2,r2,16960
 400e4d0:	1885383a 	mul	r2,r3,r2
 400e4d4:	2085c83a 	sub	r2,r4,r2
 400e4d8:	2885c83a 	sub	r2,r5,r2
 400e4dc:	1007883a 	mov	r3,r2
 400e4e0:	00810134 	movhi	r2,1028
 400e4e4:	10a8eb04 	addi	r2,r2,-23636
 400e4e8:	10c00115 	stw	r3,4(r2)
      ((nticks*(ALT_US/tick_rate))%ALT_US);

    alt_timezone.tz_minuteswest = tz->tz_minuteswest;
 400e4ec:	e0bffe17 	ldw	r2,-8(fp)
 400e4f0:	10c00017 	ldw	r3,0(r2)
 400e4f4:	00810134 	movhi	r2,1028
 400e4f8:	10a8e904 	addi	r2,r2,-23644
 400e4fc:	10c00015 	stw	r3,0(r2)
    alt_timezone.tz_dsttime     = tz->tz_dsttime;
 400e500:	e0bffe17 	ldw	r2,-8(fp)
 400e504:	10c00117 	ldw	r3,4(r2)
 400e508:	00810134 	movhi	r2,1028
 400e50c:	10a8e904 	addi	r2,r2,-23644
 400e510:	10c00115 	stw	r3,4(r2)
    
    return 0;
 400e514:	e03fff15 	stw	zero,-4(fp)
 400e518:	00000606 	br	400e534 <settimeofday+0x10c>
  }
  
  /* There's no system clock available */

  ALT_ERRNO = ENOSYS;
 400e51c:	400e54c0 	call	400e54c <alt_get_errno>
 400e520:	1007883a 	mov	r3,r2
 400e524:	00801604 	movi	r2,88
 400e528:	18800015 	stw	r2,0(r3)
  return -1;
 400e52c:	00bfffc4 	movi	r2,-1
 400e530:	e0bfff15 	stw	r2,-4(fp)
 400e534:	e0bfff17 	ldw	r2,-4(fp)
}
 400e538:	e037883a 	mov	sp,fp
 400e53c:	dfc00117 	ldw	ra,4(sp)
 400e540:	df000017 	ldw	fp,0(sp)
 400e544:	dec00204 	addi	sp,sp,8
 400e548:	f800283a 	ret

0400e54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e54c:	defffd04 	addi	sp,sp,-12
 400e550:	dfc00215 	stw	ra,8(sp)
 400e554:	df000115 	stw	fp,4(sp)
 400e558:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400e55c:	00810134 	movhi	r2,1028
 400e560:	10a13f04 	addi	r2,r2,-31492
 400e564:	10800017 	ldw	r2,0(r2)
 400e568:	1005003a 	cmpeq	r2,r2,zero
 400e56c:	1000061e 	bne	r2,zero,400e588 <alt_get_errno+0x3c>
 400e570:	00810134 	movhi	r2,1028
 400e574:	10a13f04 	addi	r2,r2,-31492
 400e578:	10800017 	ldw	r2,0(r2)
 400e57c:	103ee83a 	callr	r2
 400e580:	e0bfff15 	stw	r2,-4(fp)
 400e584:	00000306 	br	400e594 <alt_get_errno+0x48>
 400e588:	00810134 	movhi	r2,1028
 400e58c:	10a8e504 	addi	r2,r2,-23660
 400e590:	e0bfff15 	stw	r2,-4(fp)
 400e594:	e0bfff17 	ldw	r2,-4(fp)
}
 400e598:	e037883a 	mov	sp,fp
 400e59c:	dfc00117 	ldw	ra,4(sp)
 400e5a0:	df000017 	ldw	fp,0(sp)
 400e5a4:	dec00204 	addi	sp,sp,8
 400e5a8:	f800283a 	ret

0400e5ac <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e5ac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e5b0:	00bfff84 	movi	r2,-2
 400e5b4:	3084703a 	and	r2,r6,r2
 400e5b8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400e5bc:	21400017 	ldw	r5,0(r4)
 400e5c0:	20800117 	ldw	r2,4(r4)
 400e5c4:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
 400e5c8:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400e5cc:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
 400e5d0:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
 400e5d4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e5d8:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 400e5dc:	f800283a 	ret

0400e5e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400e5e0:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400e5e4:	d0a7fa17 	ldw	r2,-24600(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400e5e8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400e5ec:	d4200b17 	ldw	r16,-32724(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400e5f0:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400e5f4:	10800044 	addi	r2,r2,1
 400e5f8:	d4a00b04 	addi	r18,gp,-32724
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400e5fc:	dfc00315 	stw	ra,12(sp)
 400e600:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400e604:	d0a7fa15 	stw	r2,-24600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400e608:	84800d26 	beq	r16,r18,400e640 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400e60c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 400e610:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400e614:	10000326 	beq	r2,zero,400e624 <alt_tick+0x44>
 400e618:	d0a7fa17 	ldw	r2,-24600(gp)
 400e61c:	1000011e 	bne	r2,zero,400e624 <alt_tick+0x44>
    {
      alarm->rollover = 0;
 400e620:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400e624:	d0e7fa17 	ldw	r3,-24600(gp)
 400e628:	80800217 	ldw	r2,8(r16)
 400e62c:	18800236 	bltu	r3,r2,400e638 <alt_tick+0x58>
 400e630:	80800403 	ldbu	r2,16(r16)
 400e634:	10000826 	beq	r2,zero,400e658 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 400e638:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400e63c:	84bff31e 	bne	r16,r18,400e60c <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 400e640:	dfc00317 	ldw	ra,12(sp)
 400e644:	dc800217 	ldw	r18,8(sp)
 400e648:	dc400117 	ldw	r17,4(sp)
 400e64c:	dc000017 	ldw	r16,0(sp)
 400e650:	dec00404 	addi	sp,sp,16

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400e654:	400f7b41 	jmpi	400f7b4 <OSTimeTick>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
 400e658:	81000517 	ldw	r4,20(r16)
 400e65c:	80c00317 	ldw	r3,12(r16)
 400e660:	183ee83a 	callr	r3
 400e664:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400e668:	10000926 	beq	r2,zero,400e690 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 400e66c:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400e670:	d0e7fa17 	ldw	r3,-24600(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 400e674:	2085883a 	add	r2,r4,r2
 400e678:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400e67c:	10ffee2e 	bgeu	r2,r3,400e638 <alt_tick+0x58>
        {
          alarm->rollover = 1;
 400e680:	00800044 	movi	r2,1
 400e684:	80800405 	stb	r2,16(r16)
 400e688:	8821883a 	mov	r16,r17
 400e68c:	003feb06 	br	400e63c <alt_tick+0x5c>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
 400e690:	8009883a 	mov	r4,r16
 400e694:	400e5ac0 	call	400e5ac <alt_alarm_stop>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 400e698:	8821883a 	mov	r16,r17
 400e69c:	003fe706 	br	400e63c <alt_tick+0x5c>

0400e6a0 <__env_unlock>:
 */

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 400e6a0:	d0a7fb17 	ldw	r2,-24596(gp)
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 400e6a4:	10ffffc4 	addi	r3,r2,-1
 */

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 400e6a8:	10000226 	beq	r2,zero,400e6b4 <__env_unlock+0x14>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 400e6ac:	d0e7fb15 	stw	r3,-24596(gp)
 400e6b0:	18000126 	beq	r3,zero,400e6b8 <__env_unlock+0x18>
 400e6b4:	f800283a 	ret
  {
    lockid = -1;
    OSSemPost( alt_envsem );
 400e6b8:	d127fc17 	ldw	r4,-24592(gp)
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  {
    lockid = -1;
 400e6bc:	00bfffc4 	movi	r2,-1
 400e6c0:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 400e6c4:	4011e781 	jmpi	4011e78 <OSSemPost>

0400e6c8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 400e6c8:	deffe104 	addi	sp,sp,-124
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e6cc:	d9400204 	addi	r5,sp,8
 400e6d0:	01003fc4 	movi	r4,255
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 400e6d4:	dfc01e15 	stw	ra,120(sp)
 400e6d8:	dc001d15 	stw	r16,116(sp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e6dc:	4011fd00 	call	4011fd0 <OSTaskQuery>
  if (err != OS_NO_ERR)
 400e6e0:	10803fcc 	andi	r2,r2,255

  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400e6e4:	d9400084 	addi	r5,sp,2
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
 400e6e8:	10000426 	beq	r2,zero,400e6fc <__env_lock+0x34>
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400e6ec:	dfc01e17 	ldw	ra,120(sp)
 400e6f0:	dc001d17 	ldw	r16,116(sp)
 400e6f4:	dec01f04 	addi	sp,sp,124
 400e6f8:	f800283a 	ret

  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400e6fc:	d127fc17 	ldw	r4,-24592(gp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e700:	d8000005 	stb	zero,0(sp)
  if (err != OS_NO_ERR)
    return;

  id = tcb.OSTCBPrio;
 400e704:	dc000e83 	ldbu	r16,58(sp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400e708:	4011f2c0 	call	4011f2c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 400e70c:	d8c001c3 	ldbu	r3,7(sp)
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 400e710:	000b883a 	mov	r5,zero
 400e714:	d80d883a 	mov	r6,sp
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 400e718:	18000226 	beq	r3,zero,400e724 <__env_lock+0x5c>
 400e71c:	d0a00d17 	ldw	r2,-32716(gp)
 400e720:	80800926 	beq	r16,r2,400e748 <__env_lock+0x80>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 400e724:	d127fc17 	ldw	r4,-24592(gp)
 400e728:	4011ba40 	call	4011ba4 <OSSemPend>
    locks  = 1;
 400e72c:	00800044 	movi	r2,1
 400e730:	d0a7fb15 	stw	r2,-24596(gp)
    lockid = id;
 400e734:	d4200d15 	stw	r16,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400e738:	dfc01e17 	ldw	ra,120(sp)
 400e73c:	dc001d17 	ldw	r16,116(sp)
 400e740:	dec01f04 	addi	sp,sp,124
 400e744:	f800283a 	ret
  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  {
    /* we do; just count the recursion */

    locks++;
 400e748:	d0a7fb17 	ldw	r2,-24596(gp)
 400e74c:	10800044 	addi	r2,r2,1
 400e750:	d0a7fb15 	stw	r2,-24596(gp)
 400e754:	003fe506 	br	400e6ec <__env_lock+0x24>

0400e758 <__malloc_unlock>:

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
 400e758:	00810134 	movhi	r2,1028
 400e75c:	10a8f644 	addi	r2,r2,-23591
 400e760:	11000003 	ldbu	r4,0(r2)
 400e764:	00c00044 	movi	r3,1
 400e768:	20c00126 	beq	r4,r3,400e770 <__malloc_unlock+0x18>
 400e76c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e770:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e774:	00bfff84 	movi	r2,-2
 400e778:	2884703a 	and	r2,r5,r2
 400e77c:	1001703a 	wrctl	status,r2
      return;

  OS_ENTER_CRITICAL();
  if (locks == 0)
 400e780:	d0e7fd17 	ldw	r3,-24588(gp)
      OS_EXIT_CRITICAL();
      return;
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 400e784:	1905c83a 	sub	r2,r3,r4

  if (OSRunning != OS_TRUE)
      return;

  OS_ENTER_CRITICAL();
  if (locks == 0)
 400e788:	18000726 	beq	r3,zero,400e7a8 <__malloc_unlock+0x50>
      OS_EXIT_CRITICAL();
      return;
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 400e78c:	d0a7fd15 	stw	r2,-24588(gp)
 400e790:	1000071e 	bne	r2,zero,400e7b0 <__malloc_unlock+0x58>
  {
    lockid = -1;
 400e794:	00bfffc4 	movi	r2,-1
 400e798:	d0a00e15 	stw	r2,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e79c:	2801703a 	wrctl	status,r5
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 400e7a0:	d127fe17 	ldw	r4,-24584(gp)
 400e7a4:	4011e781 	jmpi	4011e78 <OSSemPost>
 400e7a8:	2801703a 	wrctl	status,r5
 400e7ac:	f800283a 	ret
 400e7b0:	2801703a 	wrctl	status,r5
 400e7b4:	f800283a 	ret

0400e7b8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 400e7b8:	deffe004 	addi	sp,sp,-128
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
 400e7bc:	00810134 	movhi	r2,1028
 400e7c0:	10a8f644 	addi	r2,r2,-23591
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 400e7c4:	dfc01f15 	stw	ra,124(sp)
 400e7c8:	dc401e15 	stw	r17,120(sp)
 400e7cc:	dc001d15 	stw	r16,116(sp)
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
 400e7d0:	14000003 	ldbu	r16,0(r2)
 400e7d4:	00800044 	movi	r2,1
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e7d8:	d9400204 	addi	r5,sp,8
 400e7dc:	01003fc4 	movi	r4,255
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
 400e7e0:	80800526 	beq	r16,r2,400e7f8 <__malloc_lock+0x40>
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400e7e4:	dfc01f17 	ldw	ra,124(sp)
 400e7e8:	dc401e17 	ldw	r17,120(sp)
 400e7ec:	dc001d17 	ldw	r16,116(sp)
 400e7f0:	dec02004 	addi	sp,sp,128
 400e7f4:	f800283a 	ret
  if (OSRunning != OS_TRUE)
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e7f8:	4011fd00 	call	4011fd0 <OSTaskQuery>
  if (err != OS_NO_ERR)
 400e7fc:	10803fcc 	andi	r2,r2,255

  id = tcb.OSTCBPrio;
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400e800:	d9400084 	addi	r5,sp,2
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
 400e804:	103ff71e 	bne	r2,zero,400e7e4 <__malloc_lock+0x2c>

  id = tcb.OSTCBPrio;
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400e808:	d127fe17 	ldw	r4,-24584(gp)

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;

  id = tcb.OSTCBPrio;
 400e80c:	dc400e83 	ldbu	r17,58(sp)
  if (OSRunning != OS_TRUE)
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e810:	d8000005 	stb	zero,0(sp)

  id = tcb.OSTCBPrio;
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400e814:	4011f2c0 	call	4011f2c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e818:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e81c:	00bfff84 	movi	r2,-2
 400e820:	2084703a 	and	r2,r4,r2
 400e824:	1001703a 	wrctl	status,r2
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 400e828:	d8c0008b 	ldhu	r3,2(sp)
 400e82c:	1800021e 	bne	r3,zero,400e838 <__malloc_lock+0x80>
 400e830:	d0a00e17 	ldw	r2,-32712(gp)
 400e834:	88800d26 	beq	r17,r2,400e86c <__malloc_lock+0xb4>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e838:	2001703a 	wrctl	status,r4
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 400e83c:	d127fe17 	ldw	r4,-24584(gp)
 400e840:	000b883a 	mov	r5,zero
 400e844:	d80d883a 	mov	r6,sp
 400e848:	4011ba40 	call	4011ba4 <OSSemPend>
    locks  = 1;
 400e84c:	00800044 	movi	r2,1
 400e850:	d0a7fd15 	stw	r2,-24588(gp)
    lockid = id;
 400e854:	d4600e15 	stw	r17,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400e858:	dfc01f17 	ldw	ra,124(sp)
 400e85c:	dc401e17 	ldw	r17,120(sp)
 400e860:	dc001d17 	ldw	r16,116(sp)
 400e864:	dec02004 	addi	sp,sp,128
 400e868:	f800283a 	ret
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  {
    /* we do; just count the recursion */
    locks++;
 400e86c:	d0a7fd17 	ldw	r2,-24588(gp)
 400e870:	1405883a 	add	r2,r2,r16
 400e874:	d0a7fd15 	stw	r2,-24588(gp)
 400e878:	2001703a 	wrctl	status,r4
 400e87c:	003fd906 	br	400e7e4 <__malloc_lock+0x2c>

0400e880 <OSVersion>:
*/

INT16U  OSVersion (void)
{
    return (OS_VERSION);
}
 400e880:	00804784 	movi	r2,286
 400e884:	f800283a 	ret

0400e888 <OS_Dummy>:
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
}
 400e888:	f800283a 	ret

0400e88c <OS_EventTaskWait>:
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 400e88c:	d0a80e17 	ldw	r2,-24520(gp)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400e890:	11400d03 	ldbu	r5,52(r2)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 400e894:	11000715 	stw	r4,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400e898:	10c00d43 	ldbu	r3,53(r2)
 400e89c:	290b883a 	add	r5,r5,r4
 400e8a0:	29400204 	addi	r5,r5,8
 400e8a4:	288000c3 	ldbu	r2,3(r5)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400e8a8:	21800283 	ldbu	r6,10(r4)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400e8ac:	10c4b03a 	or	r2,r2,r3
 400e8b0:	288000c5 	stb	r2,3(r5)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400e8b4:	d0e80e17 	ldw	r3,-24520(gp)
 400e8b8:	18800d83 	ldbu	r2,54(r3)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400e8bc:	d0e80b44 	addi	r3,gp,-24531


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400e8c0:	308cb03a 	or	r6,r6,r2
 400e8c4:	21800285 	stb	r6,10(r4)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400e8c8:	d1a80e17 	ldw	r6,-24520(gp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400e8cc:	31000d03 	ldbu	r4,52(r6)
 400e8d0:	30800d43 	ldbu	r2,53(r6)
 400e8d4:	20c9883a 	add	r4,r4,r3
 400e8d8:	21400003 	ldbu	r5,0(r4)
 400e8dc:	0084303a 	nor	r2,zero,r2
 400e8e0:	1144703a 	and	r2,r2,r5
    if (OSRdyTbl[y] == 0) {
 400e8e4:	10c03fcc 	andi	r3,r2,255
 400e8e8:	18c0201c 	xori	r3,r3,128
 400e8ec:	18ffe004 	addi	r3,r3,-128

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400e8f0:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
 400e8f4:	1800051e 	bne	r3,zero,400e90c <OS_EventTaskWait+0x80>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400e8f8:	30800d83 	ldbu	r2,54(r6)
 400e8fc:	d0e80b03 	ldbu	r3,-24532(gp)
 400e900:	0084303a 	nor	r2,zero,r2
 400e904:	10c4703a 	and	r2,r2,r3
 400e908:	d0a80b05 	stb	r2,-24532(gp)
 400e90c:	f800283a 	ret

0400e910 <OS_EventTaskWaitMulti>:
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 400e910:	d1e80e17 	ldw	r7,-24520(gp)
 400e914:	38000715 	stw	zero,28(r7)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
 400e918:	21800017 	ldw	r6,0(r4)
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 400e91c:	39000815 	stw	r4,32(r7)

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400e920:	30001326 	beq	r6,zero,400e970 <OS_EventTaskWaitMulti+0x60>
 400e924:	2011883a 	mov	r8,r4
 400e928:	00000106 	br	400e930 <OS_EventTaskWaitMulti+0x20>
 400e92c:	d1e80e17 	ldw	r7,-24520(gp)
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400e930:	39000d03 	ldbu	r4,52(r7)
 400e934:	38c00d43 	ldbu	r3,53(r7)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400e938:	31400283 	ldbu	r5,10(r6)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400e93c:	2189883a 	add	r4,r4,r6
 400e940:	21000204 	addi	r4,r4,8
 400e944:	208000c3 	ldbu	r2,3(r4)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
 400e948:	42000104 	addi	r8,r8,4
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400e94c:	10c4b03a 	or	r2,r2,r3
 400e950:	208000c5 	stb	r2,3(r4)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400e954:	d0e80e17 	ldw	r3,-24520(gp)
 400e958:	18800d83 	ldbu	r2,54(r3)
 400e95c:	288ab03a 	or	r5,r5,r2
 400e960:	31400285 	stb	r5,10(r6)
        pevents++;
        pevent = *pevents;
 400e964:	41800017 	ldw	r6,0(r8)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400e968:	303ff01e 	bne	r6,zero,400e92c <OS_EventTaskWaitMulti+0x1c>
 400e96c:	d1e80e17 	ldw	r7,-24520(gp)
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400e970:	39000d03 	ldbu	r4,52(r7)
 400e974:	d0e80b44 	addi	r3,gp,-24531
 400e978:	38800d43 	ldbu	r2,53(r7)
 400e97c:	20c9883a 	add	r4,r4,r3
 400e980:	21400003 	ldbu	r5,0(r4)
 400e984:	0084303a 	nor	r2,zero,r2
 400e988:	1144703a 	and	r2,r2,r5
    if (OSRdyTbl[y] == 0) {
 400e98c:	10c03fcc 	andi	r3,r2,255
 400e990:	18c0201c 	xori	r3,r3,128
 400e994:	18ffe004 	addi	r3,r3,-128
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400e998:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
 400e99c:	1800051e 	bne	r3,zero,400e9b4 <OS_EventTaskWaitMulti+0xa4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400e9a0:	38800d83 	ldbu	r2,54(r7)
 400e9a4:	d0e80b03 	ldbu	r3,-24532(gp)
 400e9a8:	0084303a 	nor	r2,zero,r2
 400e9ac:	10c4703a 	and	r2,r2,r3
 400e9b0:	d0a80b05 	stb	r2,-24532(gp)
 400e9b4:	f800283a 	ret

0400e9b8 <OS_EventTaskRemove>:
{
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400e9b8:	20c00d03 	ldbu	r3,52(r4)
 400e9bc:	20800d43 	ldbu	r2,53(r4)
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400e9c0:	200d883a 	mov	r6,r4
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400e9c4:	1947883a 	add	r3,r3,r5
 400e9c8:	18c00204 	addi	r3,r3,8
 400e9cc:	190000c3 	ldbu	r4,3(r3)
 400e9d0:	0084303a 	nor	r2,zero,r2
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400e9d4:	280f883a 	mov	r7,r5
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400e9d8:	1104703a 	and	r2,r2,r4
    if (pevent->OSEventTbl[y] == 0) {
 400e9dc:	11403fcc 	andi	r5,r2,255
 400e9e0:	2940201c 	xori	r5,r5,128
 400e9e4:	297fe004 	addi	r5,r5,-128
{
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400e9e8:	188000c5 	stb	r2,3(r3)
    if (pevent->OSEventTbl[y] == 0) {
 400e9ec:	2800051e 	bne	r5,zero,400ea04 <OS_EventTaskRemove+0x4c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 400e9f0:	30800d83 	ldbu	r2,54(r6)
 400e9f4:	38c00283 	ldbu	r3,10(r7)
 400e9f8:	0084303a 	nor	r2,zero,r2
 400e9fc:	10c4703a 	and	r2,r2,r3
 400ea00:	38800285 	stb	r2,10(r7)
 400ea04:	f800283a 	ret

0400ea08 <OS_EventTaskRemoveMulti>:

    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
 400ea08:	29800017 	ldw	r6,0(r5)
#endif


    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
 400ea0c:	20c00d43 	ldbu	r3,53(r4)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 400ea10:	20800d03 	ldbu	r2,52(r4)
    bity    =  ptcb->OSTCBBitY;
 400ea14:	21000d83 	ldbu	r4,54(r4)
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400ea18:	30001226 	beq	r6,zero,400ea64 <OS_EventTaskRemoveMulti+0x5c>
 400ea1c:	12003fcc 	andi	r8,r2,255
 400ea20:	00ce303a 	nor	r7,zero,r3
 400ea24:	0112303a 	nor	r9,zero,r4
        pevent->OSEventTbl[y]  &= ~bitx;
 400ea28:	4185883a 	add	r2,r8,r6
 400ea2c:	10800204 	addi	r2,r2,8
 400ea30:	10c000c3 	ldbu	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
 400ea34:	29400104 	addi	r5,r5,4
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
 400ea38:	38c6703a 	and	r3,r7,r3
        if (pevent->OSEventTbl[y] == 0) {
 400ea3c:	19003fcc 	andi	r4,r3,255
 400ea40:	2100201c 	xori	r4,r4,128
 400ea44:	213fe004 	addi	r4,r4,-128
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
 400ea48:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 400ea4c:	2000031e 	bne	r4,zero,400ea5c <OS_EventTaskRemoveMulti+0x54>
            pevent->OSEventGrp &= ~bity;
 400ea50:	30800283 	ldbu	r2,10(r6)
 400ea54:	4884703a 	and	r2,r9,r2
 400ea58:	30800285 	stb	r2,10(r6)
        }
        pevents++;
        pevent = *pevents;
 400ea5c:	29800017 	ldw	r6,0(r5)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400ea60:	303ff11e 	bne	r6,zero,400ea28 <OS_EventTaskRemoveMulti+0x20>
 400ea64:	f800283a 	ret

0400ea68 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 400ea68:	defffc04 	addi	sp,sp,-16
 400ea6c:	dc800215 	stw	r18,8(sp)
 400ea70:	dc400115 	stw	r17,4(sp)
 400ea74:	dc000015 	stw	r16,0(sp)
 400ea78:	dfc00315 	stw	ra,12(sp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 400ea7c:	20800283 	ldbu	r2,10(r4)
 400ea80:	024100f4 	movhi	r9,1027
 400ea84:	4a4b9d84 	addi	r9,r9,11894
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 400ea88:	2025883a 	mov	r18,r4
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 400ea8c:	1245883a 	add	r2,r2,r9
 400ea90:	11000003 	ldbu	r4,0(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400ea94:	018c303a 	nor	r6,zero,r6
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 400ea98:	22003fcc 	andi	r8,r4,255
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400ea9c:	4485883a 	add	r2,r8,r18
 400eaa0:	10c002c3 	ldbu	r3,11(r2)
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400eaa4:	d0a80b44 	addi	r2,gp,-24531
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400eaa8:	200890fa 	slli	r4,r4,3
 400eaac:	1a47883a 	add	r3,r3,r9
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400eab0:	4091883a 	add	r8,r8,r2
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400eab4:	18800003 	ldbu	r2,0(r3)
 400eab8:	00c10134 	movhi	r3,1028
 400eabc:	18ca4904 	addi	r3,r3,10532
 400eac0:	2089883a 	add	r4,r4,r2
 400eac4:	24403fcc 	andi	r17,r4,255
 400eac8:	8c45883a 	add	r2,r17,r17
 400eacc:	1085883a 	add	r2,r2,r2
 400ead0:	10c5883a 	add	r2,r2,r3
 400ead4:	14000017 	ldw	r16,0(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400ead8:	80c00c03 	ldbu	r3,48(r16)
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 400eadc:	81400915 	stw	r5,36(r16)
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400eae0:	8009883a 	mov	r4,r16
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400eae4:	30cc703a 	and	r6,r6,r3
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 400eae8:	30803fcc 	andi	r2,r6,255
 400eaec:	1080020c 	andi	r2,r2,8
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 400eaf0:	81c00c45 	stb	r7,49(r16)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400eaf4:	81800c05 	stb	r6,48(r16)
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400eaf8:	900b883a 	mov	r5,r18
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 400eafc:	80000b8d 	sth	zero,46(r16)
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 400eb00:	1000081e 	bne	r2,zero,400eb24 <OS_EventTaskRdy+0xbc>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 400eb04:	80c00d83 	ldbu	r3,54(r16)
 400eb08:	d0a80b03 	ldbu	r2,-24532(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400eb0c:	41800003 	ldbu	r6,0(r8)
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 400eb10:	10c4b03a 	or	r2,r2,r3
 400eb14:	d0a80b05 	stb	r2,-24532(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400eb18:	80c00d43 	ldbu	r3,53(r16)
 400eb1c:	30ccb03a 	or	r6,r6,r3
 400eb20:	41800005 	stb	r6,0(r8)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400eb24:	400e9b80 	call	400e9b8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 400eb28:	80800817 	ldw	r2,32(r16)
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400eb2c:	8009883a 	mov	r4,r16
 400eb30:	100b883a 	mov	r5,r2
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 400eb34:	10000226 	beq	r2,zero,400eb40 <OS_EventTaskRdy+0xd8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400eb38:	400ea080 	call	400ea08 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 400eb3c:	84800715 	stw	r18,28(r16)
    }
#endif

    return (prio);
}
 400eb40:	8805883a 	mov	r2,r17
 400eb44:	dfc00317 	ldw	ra,12(sp)
 400eb48:	dc800217 	ldw	r18,8(sp)
 400eb4c:	dc400117 	ldw	r17,4(sp)
 400eb50:	dc000017 	ldw	r16,0(sp)
 400eb54:	dec00404 	addi	sp,sp,16
 400eb58:	f800283a 	ret

0400eb5c <OS_EventWaitListInit>:
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 400eb5c:	20000285 	stb	zero,10(r4)
    ptbl               = &pevent->OSEventTbl[0];
 400eb60:	210002c4 	addi	r4,r4,11

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *ptbl++ = 0;
 400eb64:	20000005 	stb	zero,0(r4)
 400eb68:	21000044 	addi	r4,r4,1
 400eb6c:	20000045 	stb	zero,1(r4)
 400eb70:	20000005 	stb	zero,0(r4)
    }
}
 400eb74:	f800283a 	ret

0400eb78 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400eb78:	28bfffcc 	andi	r2,r5,65535
 400eb7c:	10000526 	beq	r2,zero,400eb94 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
 400eb80:	297fffc4 	addi	r5,r5,-1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400eb84:	28bfffcc 	andi	r2,r5,65535
        *pdest++ = (INT8U)0;
 400eb88:	20000005 	stb	zero,0(r4)
 400eb8c:	21000044 	addi	r4,r4,1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400eb90:	103ffb1e 	bne	r2,zero,400eb80 <OS_MemClr+0x8>
 400eb94:	f800283a 	ret

0400eb98 <OS_MemCopy>:
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400eb98:	30bfffcc 	andi	r2,r6,65535
 400eb9c:	10000726 	beq	r2,zero,400ebbc <OS_MemCopy+0x24>
        *pdest++ = *psrc++;
 400eba0:	28800003 	ldbu	r2,0(r5)
        size--;
 400eba4:	31bfffc4 	addi	r6,r6,-1
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400eba8:	30ffffcc 	andi	r3,r6,65535
        *pdest++ = *psrc++;
 400ebac:	20800005 	stb	r2,0(r4)
 400ebb0:	29400044 	addi	r5,r5,1
 400ebb4:	21000044 	addi	r4,r4,1
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400ebb8:	183ff91e 	bne	r3,zero,400eba0 <OS_MemCopy+0x8>
 400ebbc:	f800283a 	ret

0400ebc0 <OS_SchedNew>:
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 400ebc0:	d0a80b03 	ldbu	r2,-24532(gp)
 400ebc4:	018100f4 	movhi	r6,1027
 400ebc8:	318b9d84 	addi	r6,r6,11894
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 400ebcc:	d1280b44 	addi	r4,gp,-24531
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 400ebd0:	1185883a 	add	r2,r2,r6
 400ebd4:	11400003 	ldbu	r5,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 400ebd8:	2907883a 	add	r3,r5,r4
 400ebdc:	18800003 	ldbu	r2,0(r3)
 400ebe0:	280a90fa 	slli	r5,r5,3
 400ebe4:	1185883a 	add	r2,r2,r6
 400ebe8:	10c00003 	ldbu	r3,0(r2)
 400ebec:	28cb883a 	add	r5,r5,r3
 400ebf0:	d1680105 	stb	r5,-24572(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 400ebf4:	f800283a 	ret

0400ebf8 <OS_StrCopy>:
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400ebf8:	28800003 	ldbu	r2,0(r5)
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 400ebfc:	2007883a 	mov	r3,r4
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400ec00:	10000826 	beq	r2,zero,400ec24 <OS_StrCopy+0x2c>
        *pdest++ = *psrc++;
 400ec04:	20800005 	stb	r2,0(r4)
 400ec08:	29400044 	addi	r5,r5,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400ec0c:	28800003 	ldbu	r2,0(r5)
        *pdest++ = *psrc++;
 400ec10:	21000044 	addi	r4,r4,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400ec14:	103ffb1e 	bne	r2,zero,400ec04 <OS_StrCopy+0xc>
 400ec18:	20c5c83a 	sub	r2,r4,r3
 400ec1c:	10803fcc 	andi	r2,r2,255
 400ec20:	2007883a 	mov	r3,r4
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 400ec24:	18000005 	stb	zero,0(r3)
    return (len);
}
 400ec28:	f800283a 	ret

0400ec2c <OS_StrLen>:
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400ec2c:	20800003 	ldbu	r2,0(r4)
 400ec30:	10000626 	beq	r2,zero,400ec4c <OS_StrLen+0x20>
 400ec34:	2007883a 	mov	r3,r4
        psrc++;
 400ec38:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400ec3c:	18800003 	ldbu	r2,0(r3)
 400ec40:	103ffd1e 	bne	r2,zero,400ec38 <OS_StrLen+0xc>
 400ec44:	1905c83a 	sub	r2,r3,r4
 400ec48:	10803fcc 	andi	r2,r2,255
        psrc++;
        len++;
    }
    return (len);
}
 400ec4c:	f800283a 	ret

0400ec50 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 400ec50:	defff904 	addi	sp,sp,-28
 400ec54:	dcc00515 	stw	r19,20(sp)
 400ec58:	dc800415 	stw	r18,16(sp)
 400ec5c:	dc400315 	stw	r17,12(sp)
 400ec60:	dc000215 	stw	r16,8(sp)
 400ec64:	dfc00615 	stw	ra,24(sp)
 400ec68:	0021883a 	mov	r16,zero
 400ec6c:	04410134 	movhi	r17,1028
 400ec70:	8c4a4904 	addi	r17,r17,10532
 400ec74:	04c00044 	movi	r19,1
 400ec78:	04800544 	movi	r18,21
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
        err = OSTaskStkChk(prio, &stk_data);
 400ec7c:	8009883a 	mov	r4,r16
 400ec80:	d80b883a 	mov	r5,sp
 400ec84:	4012d3c0 	call	4012d3c <OSTaskStkChk>
        if (err == OS_ERR_NONE) {
 400ec88:	10803fcc 	andi	r2,r2,255
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400ec8c:	84000044 	addi	r16,r16,1
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
        err = OSTaskStkChk(prio, &stk_data);
        if (err == OS_ERR_NONE) {
 400ec90:	10000b1e 	bne	r2,zero,400ecc0 <OS_TaskStatStkChk+0x70>
            ptcb = OSTCBPrioTbl[prio];
 400ec94:	89400017 	ldw	r5,0(r17)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 400ec98:	28000926 	beq	r5,zero,400ecc0 <OS_TaskStatStkChk+0x70>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 400ec9c:	2cc00826 	beq	r5,r19,400ecc0 <OS_TaskStatStkChk+0x70>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400eca0:	28800317 	ldw	r2,12(r5)
 400eca4:	29000217 	ldw	r4,8(r5)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400eca8:	d8c00117 	ldw	r3,4(sp)
            ptcb = OSTCBPrioTbl[prio];
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400ecac:	1085883a 	add	r2,r2,r2
 400ecb0:	1085883a 	add	r2,r2,r2
 400ecb4:	2089883a 	add	r4,r4,r2
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400ecb8:	28c01215 	stw	r3,72(r5)
            ptcb = OSTCBPrioTbl[prio];
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400ecbc:	29001115 	stw	r4,68(r5)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400ecc0:	8c400104 	addi	r17,r17,4
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400ecc4:	84bfed1e 	bne	r16,r18,400ec7c <OS_TaskStatStkChk+0x2c>
#endif
                }
            }
        }
    }
}
 400ecc8:	dfc00617 	ldw	ra,24(sp)
 400eccc:	dcc00517 	ldw	r19,20(sp)
 400ecd0:	dc800417 	ldw	r18,16(sp)
 400ecd4:	dc400317 	ldw	r17,12(sp)
 400ecd8:	dc000217 	ldw	r16,8(sp)
 400ecdc:	dec00704 	addi	sp,sp,28
 400ece0:	f800283a 	ret

0400ece4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 400ece4:	defffe04 	addi	sp,sp,-8
 400ece8:	dfc00115 	stw	ra,4(sp)
 400ecec:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ecf0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ecf4:	00bfff84 	movi	r2,-2
 400ecf8:	8084703a 	and	r2,r16,r2
 400ecfc:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 400ed00:	d0e80d03 	ldbu	r3,-24524(gp)
 400ed04:	1800021e 	bne	r3,zero,400ed10 <OS_Sched+0x2c>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 400ed08:	d0a7ff03 	ldbu	r2,-24580(gp)
 400ed0c:	10000526 	beq	r2,zero,400ed24 <OS_Sched+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ed10:	8001703a 	wrctl	status,r16
                OS_TASK_SW();                          /* Perform a context switch                     */
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 400ed14:	dfc00117 	ldw	ra,4(sp)
 400ed18:	dc000017 	ldw	r16,0(sp)
 400ed1c:	dec00204 	addi	sp,sp,8
 400ed20:	f800283a 	ret


    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
 400ed24:	400ebc00 	call	400ebc0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 400ed28:	d1280103 	ldbu	r4,-24572(gp)
 400ed2c:	d1680143 	ldbu	r5,-24571(gp)
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400ed30:	00c10134 	movhi	r3,1028
 400ed34:	18ca4904 	addi	r3,r3,10532
 400ed38:	2105883a 	add	r2,r4,r4
 400ed3c:	1085883a 	add	r2,r2,r2
 400ed40:	10c5883a 	add	r2,r2,r3

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 400ed44:	217ff226 	beq	r4,r5,400ed10 <OS_Sched+0x2c>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400ed48:	10800017 	ldw	r2,0(r2)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400ed4c:	d1280417 	ldw	r4,-24560(gp)
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 400ed50:	10c00e17 	ldw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400ed54:	21000044 	addi	r4,r4,1
    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400ed58:	d0a80915 	stw	r2,-24540(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 400ed5c:	18c00044 	addi	r3,r3,1
 400ed60:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400ed64:	d1280415 	stw	r4,-24560(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 400ed68:	40269700 	call	4026970 <OSCtxSw>
 400ed6c:	8001703a 	wrctl	status,r16
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 400ed70:	dfc00117 	ldw	ra,4(sp)
 400ed74:	dc000017 	ldw	r16,0(sp)
 400ed78:	dec00204 	addi	sp,sp,8
 400ed7c:	f800283a 	ret

0400ed80 <OSStart>:
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
 400ed80:	d0a7ff43 	ldbu	r2,-24579(gp)
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 400ed84:	deffff04 	addi	sp,sp,-4
 400ed88:	dfc00015 	stw	ra,0(sp)
    if (OSRunning == OS_FALSE) {
 400ed8c:	10000326 	beq	r2,zero,400ed9c <OSStart+0x1c>
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
        OSTCBCur      = OSTCBHighRdy;
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    }
}
 400ed90:	dfc00017 	ldw	ra,0(sp)
 400ed94:	dec00104 	addi	sp,sp,4
 400ed98:	f800283a 	ret
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 400ed9c:	400ebc00 	call	400ebc0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 400eda0:	d1680103 	ldbu	r5,-24572(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400eda4:	00c10134 	movhi	r3,1028
 400eda8:	18ca4904 	addi	r3,r3,10532
 400edac:	2945883a 	add	r2,r5,r5
 400edb0:	1085883a 	add	r2,r2,r2
 400edb4:	10c5883a 	add	r2,r2,r3
 400edb8:	11000017 	ldw	r4,0(r2)

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
 400edbc:	d1680145 	stb	r5,-24571(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
        OSTCBCur      = OSTCBHighRdy;
 400edc0:	d1280e15 	stw	r4,-24520(gp)
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400edc4:	d1280915 	stw	r4,-24540(gp)
        OSTCBCur      = OSTCBHighRdy;
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    }
}
 400edc8:	dfc00017 	ldw	ra,0(sp)
 400edcc:	dec00104 	addi	sp,sp,4
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
        OSTCBCur      = OSTCBHighRdy;
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 400edd0:	40269fc1 	jmpi	40269fc <OSStartHighRdy>

0400edd4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 400edd4:	defff704 	addi	sp,sp,-36
 400edd8:	dfc00815 	stw	ra,32(sp)
 400eddc:	dc000615 	stw	r16,24(sp)
 400ede0:	dc400715 	stw	r17,28(sp)
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 400ede4:	4026a500 	call	4026a50 <OSInitHookBegin>


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
 400ede8:	d0a80b44 	addi	r2,gp,-24531
 400edec:	10000085 	stb	zero,2(r2)
 400edf0:	10000045 	stb	zero,1(r2)
*/

static  void  OS_InitMisc (void)
{
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 400edf4:	d0280f15 	stw	zero,-24516(gp)
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 400edf8:	01010134 	movhi	r4,1028
 400edfc:	21090504 	addi	r4,r4,9236
 400ee00:	01414404 	movi	r5,1296
{
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 400ee04:	d0280d05 	stb	zero,-24524(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 400ee08:	d027ff05 	stb	zero,-24580(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 400ee0c:	d0280745 	stb	zero,-24547(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 400ee10:	d027ff45 	stb	zero,-24579(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 400ee14:	d0280415 	stw	zero,-24560(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 400ee18:	d0280015 	stw	zero,-24576(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 400ee1c:	d0281215 	stw	zero,-24504(gp)
    OSIdleCtrMax  = 0L;
 400ee20:	d0280515 	stw	zero,-24556(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 400ee24:	d0281105 	stb	zero,-24508(gp)
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 400ee28:	d0280b05 	stb	zero,-24532(gp)
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
 400ee2c:	d0280b45 	stb	zero,-24531(gp)
    }

    OSPrioCur     = 0;
 400ee30:	d0280145 	stb	zero,-24571(gp)
    OSPrioHighRdy = 0;
 400ee34:	d0280105 	stb	zero,-24572(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 400ee38:	d0280915 	stw	zero,-24540(gp)
    OSTCBCur      = (OS_TCB *)0;
 400ee3c:	d0280e15 	stw	zero,-24520(gp)
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 400ee40:	400eb780 	call	400eb78 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 400ee44:	01010134 	movhi	r4,1028
 400ee48:	210a4904 	addi	r4,r4,10532
 400ee4c:	01401504 	movi	r5,84
 400ee50:	400eb780 	call	400eb78 <OS_MemClr>
 400ee54:	00810134 	movhi	r2,1028
 400ee58:	10892004 	addi	r2,r2,9344
 400ee5c:	10c12904 	addi	r3,r2,1188
 400ee60:	04000fc4 	movi	r16,63
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        ptcb1->OSTCBNext = ptcb2;
 400ee64:	10bfea15 	stw	r2,-88(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 400ee68:	143ff805 	stb	r16,-32(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400ee6c:	103ff845 	stb	zero,-31(r2)
#endif
        ptcb1++;
        ptcb2++;
 400ee70:	10801b04 	addi	r2,r2,108

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400ee74:	10fffb1e 	bne	r2,r3,400ee64 <OSInit+0x90>
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    OSTCBFreeList           = &OSTCBTbl[0];
 400ee78:	10febc04 	addi	r3,r2,-1296

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400ee7c:	10bfe504 	addi	r2,r2,-108
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400ee80:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    OSTCBFreeList           = &OSTCBTbl[0];
 400ee84:	d0e80615 	stw	r3,-24552(gp)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 400ee88:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 400ee8c:	14001305 	stb	r16,76(r2)
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 400ee90:	01010134 	movhi	r4,1028
 400ee94:	21063504 	addi	r4,r4,6356
 400ee98:	0142d004 	movi	r5,2880
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 400ee9c:	d0280215 	stw	zero,-24568(gp)
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 400eea0:	400eb780 	call	400eb78 <OS_MemClr>
 400eea4:	01010134 	movhi	r4,1028
 400eea8:	21064104 	addi	r4,r4,6404
 400eeac:	800b883a 	mov	r5,r16
 400eeb0:	2082c404 	addi	r2,r4,2832
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400eeb4:	203ff405 	stb	zero,-48(r4)
        pevent1->OSEventPtr     = pevent2;
 400eeb8:	213ff515 	stw	r4,-44(r4)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 400eebc:	217ff785 	stb	r5,-34(r4)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 400eec0:	203ff7c5 	stb	zero,-33(r4)
#endif
        pevent1++;
        pevent2++;
 400eec4:	21000c04 	addi	r4,r4,48


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400eec8:	20bffa1e 	bne	r4,r2,400eeb4 <OSInit+0xe0>
 400eecc:	20bff404 	addi	r2,r4,-48
    pevent1->OSEventPtr             = (OS_EVENT *)0;
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 400eed0:	20fd3004 	addi	r3,r4,-2880
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    pevent1->OSEventPtr             = (OS_EVENT *)0;
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 400eed4:	11400385 	stb	r5,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 400eed8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 400eedc:	d0e80c15 	stw	r3,-24528(gp)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 400eee0:	203ff405 	stb	zero,-48(r4)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 400eee4:	10000115 	stw	zero,4(r2)
    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 400eee8:	400fcb00 	call	400fcb0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 400eeec:	40109440 	call	4010944 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 400eef0:	4010d840 	call	4010d84 <OS_QInit>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 400eef4:	00c10134 	movhi	r3,1028
 400eef8:	18c43504 	addi	r3,r3,4308
 400eefc:	1981ff04 	addi	r6,r3,2044
 400ef00:	01c00504 	movi	r7,20
 400ef04:	04008004 	movi	r16,512
 400ef08:	044000c4 	movi	r17,3
 400ef0c:	01010074 	movhi	r4,1025
 400ef10:	213e3204 	addi	r4,r4,-1848
 400ef14:	000b883a 	mov	r5,zero
 400ef18:	00bfffd4 	movui	r2,65535
 400ef1c:	d8c00115 	stw	r3,4(sp)
 400ef20:	d8800015 	stw	r2,0(sp)
 400ef24:	dc000215 	stw	r16,8(sp)
 400ef28:	d8000315 	stw	zero,12(sp)
 400ef2c:	dc400415 	stw	r17,16(sp)
 400ef30:	40124d40 	call	40124d4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 400ef34:	01000504 	movi	r4,20
 400ef38:	d90d883a 	add	r6,sp,r4
 400ef3c:	014100f4 	movhi	r5,1027
 400ef40:	294b9604 	addi	r5,r5,11864
 400ef44:	4012ad40 	call	4012ad4 <OSTaskNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 400ef48:	00c10134 	movhi	r3,1028
 400ef4c:	18c1bd04 	addi	r3,r3,1780
 400ef50:	1981ff04 	addi	r6,r3,2044
 400ef54:	01c004c4 	movi	r7,19
 400ef58:	01010074 	movhi	r4,1025
 400ef5c:	213e3f04 	addi	r4,r4,-1796
 400ef60:	000b883a 	mov	r5,zero
 400ef64:	00bfff94 	movui	r2,65534
 400ef68:	d8c00115 	stw	r3,4(sp)
 400ef6c:	d8800015 	stw	r2,0(sp)
 400ef70:	dc000215 	stw	r16,8(sp)
 400ef74:	dc400415 	stw	r17,16(sp)
 400ef78:	d8000315 	stw	zero,12(sp)
 400ef7c:	40124d40 	call	40124d4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 400ef80:	010004c4 	movi	r4,19
 400ef84:	014100f4 	movhi	r5,1027
 400ef88:	294b9a04 	addi	r5,r5,11880
 400ef8c:	d9800504 	addi	r6,sp,20
 400ef90:	4012ad40 	call	4012ad4 <OSTaskNameSet>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 400ef94:	4026a540 	call	4026a54 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 400ef98:	400fb280 	call	400fb28 <OSDebugInit>
#endif
}
 400ef9c:	dfc00817 	ldw	ra,32(sp)
 400efa0:	dc400717 	ldw	r17,28(sp)
 400efa4:	dc000617 	ldw	r16,24(sp)
 400efa8:	dec00904 	addi	sp,sp,36
 400efac:	f800283a 	ret

0400efb0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400efb0:	defffd04 	addi	sp,sp,-12
 400efb4:	dc400115 	stw	r17,4(sp)
 400efb8:	3023883a 	mov	r17,r6
 400efbc:	dfc00215 	stw	ra,8(sp)
 400efc0:	dc000015 	stw	r16,0(sp)
 400efc4:	200d883a 	mov	r6,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400efc8:	88003c26 	beq	r17,zero,400f0bc <OSEventNameGet+0x10c>
        return (0);
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400efcc:	20002926 	beq	r4,zero,400f074 <OSEventNameGet+0xc4>
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400efd0:	28003126 	beq	r5,zero,400f098 <OSEventNameGet+0xe8>
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400efd4:	d0a80d03 	ldbu	r2,-24524(gp)
 400efd8:	10000926 	beq	r2,zero,400f000 <OSEventNameGet+0x50>
        *perr  = OS_ERR_NAME_GET_ISR;
 400efdc:	0007883a 	mov	r3,zero
 400efe0:	00800444 	movi	r2,17
 400efe4:	88800005 	stb	r2,0(r17)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400efe8:	1805883a 	mov	r2,r3
 400efec:	dfc00217 	ldw	ra,8(sp)
 400eff0:	dc400117 	ldw	r17,4(sp)
 400eff4:	dc000017 	ldw	r16,0(sp)
 400eff8:	dec00304 	addi	sp,sp,12
 400effc:	f800283a 	ret
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr  = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    switch (pevent->OSEventType) {
 400f000:	20800003 	ldbu	r2,0(r4)
 400f004:	00c000c4 	movi	r3,3
 400f008:	10bfffc4 	addi	r2,r2,-1
 400f00c:	18801036 	bltu	r3,r2,400f050 <OSEventNameGet+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f010:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f014:	00bfff84 	movi	r2,-2
 400f018:	8084703a 	and	r2,r16,r2
 400f01c:	1001703a 	wrctl	status,r2
        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 400f020:	2809883a 	mov	r4,r5
 400f024:	31400384 	addi	r5,r6,14
 400f028:	400ebf80 	call	400ebf8 <OS_StrCopy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f02c:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
 400f030:	10c03fcc 	andi	r3,r2,255
}
 400f034:	1805883a 	mov	r2,r3
             return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400f038:	88000005 	stb	zero,0(r17)
    return (len);
}
 400f03c:	dfc00217 	ldw	ra,8(sp)
 400f040:	dc400117 	ldw	r17,4(sp)
 400f044:	dc000017 	ldw	r16,0(sp)
 400f048:	dec00304 	addi	sp,sp,12
 400f04c:	f800283a 	ret
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400f050:	0007883a 	mov	r3,zero
 400f054:	00800044 	movi	r2,1
 400f058:	88800005 	stb	r2,0(r17)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400f05c:	1805883a 	mov	r2,r3
 400f060:	dfc00217 	ldw	ra,8(sp)
 400f064:	dc400117 	ldw	r17,4(sp)
 400f068:	dc000017 	ldw	r16,0(sp)
 400f06c:	dec00304 	addi	sp,sp,12
 400f070:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return (0);
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
        *perr = OS_ERR_PEVENT_NULL;
 400f074:	0007883a 	mov	r3,zero
 400f078:	00800104 	movi	r2,4
 400f07c:	88800005 	stb	r2,0(r17)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400f080:	1805883a 	mov	r2,r3
 400f084:	dfc00217 	ldw	ra,8(sp)
 400f088:	dc400117 	ldw	r17,4(sp)
 400f08c:	dc000017 	ldw	r16,0(sp)
 400f090:	dec00304 	addi	sp,sp,12
 400f094:	f800283a 	ret
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 400f098:	0007883a 	mov	r3,zero
 400f09c:	00800304 	movi	r2,12
 400f0a0:	88800005 	stb	r2,0(r17)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400f0a4:	1805883a 	mov	r2,r3
 400f0a8:	dfc00217 	ldw	ra,8(sp)
 400f0ac:	dc400117 	ldw	r17,4(sp)
 400f0b0:	dc000017 	ldw	r16,0(sp)
 400f0b4:	dec00304 	addi	sp,sp,12
 400f0b8:	f800283a 	ret
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f0bc:	0007883a 	mov	r3,zero
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400f0c0:	1805883a 	mov	r2,r3
 400f0c4:	dfc00217 	ldw	ra,8(sp)
 400f0c8:	dc400117 	ldw	r17,4(sp)
 400f0cc:	dc000017 	ldw	r16,0(sp)
 400f0d0:	dec00304 	addi	sp,sp,12
 400f0d4:	f800283a 	ret

0400f0d8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400f0d8:	defffb04 	addi	sp,sp,-20
 400f0dc:	dc800215 	stw	r18,8(sp)
 400f0e0:	dc400115 	stw	r17,4(sp)
 400f0e4:	dc000015 	stw	r16,0(sp)
 400f0e8:	dfc00415 	stw	ra,16(sp)
 400f0ec:	dcc00315 	stw	r19,12(sp)
 400f0f0:	3021883a 	mov	r16,r6
 400f0f4:	2023883a 	mov	r17,r4
 400f0f8:	2825883a 	mov	r18,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f0fc:	30001426 	beq	r6,zero,400f150 <OSEventNameSet+0x78>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400f100:	20002c26 	beq	r4,zero,400f1b4 <OSEventNameSet+0xdc>
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400f104:	28003426 	beq	r5,zero,400f1d8 <OSEventNameSet+0x100>
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400f108:	d0a80d03 	ldbu	r2,-24524(gp)
 400f10c:	1000171e 	bne	r2,zero,400f16c <OSEventNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    switch (pevent->OSEventType) {
 400f110:	20800003 	ldbu	r2,0(r4)
 400f114:	00c000c4 	movi	r3,3
 400f118:	10bfffc4 	addi	r2,r2,-1
 400f11c:	18801c36 	bltu	r3,r2,400f190 <OSEventNameSet+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f120:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f124:	00bfff84 	movi	r2,-2
 400f128:	9884703a 	and	r2,r19,r2
 400f12c:	1001703a 	wrctl	status,r2
        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 400f130:	2809883a 	mov	r4,r5
 400f134:	400ec2c0 	call	400ec2c <OS_StrLen>
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 400f138:	10803fcc 	andi	r2,r2,255
 400f13c:	00c007c4 	movi	r3,31
 400f140:	18802e2e 	bgeu	r3,r2,400f1fc <OSEventNameSet+0x124>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f144:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 400f148:	008002c4 	movi	r2,11
 400f14c:	80800005 	stb	r2,0(r16)
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400f150:	dfc00417 	ldw	ra,16(sp)
 400f154:	dcc00317 	ldw	r19,12(sp)
 400f158:	dc800217 	ldw	r18,8(sp)
 400f15c:	dc400117 	ldw	r17,4(sp)
 400f160:	dc000017 	ldw	r16,0(sp)
 400f164:	dec00504 	addi	sp,sp,20
 400f168:	f800283a 	ret
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_SET_ISR;
 400f16c:	00800484 	movi	r2,18
 400f170:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400f174:	dfc00417 	ldw	ra,16(sp)
 400f178:	dcc00317 	ldw	r19,12(sp)
 400f17c:	dc800217 	ldw	r18,8(sp)
 400f180:	dc400117 	ldw	r17,4(sp)
 400f184:	dc000017 	ldw	r16,0(sp)
 400f188:	dec00504 	addi	sp,sp,20
 400f18c:	f800283a 	ret
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400f190:	00800044 	movi	r2,1
 400f194:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400f198:	dfc00417 	ldw	ra,16(sp)
 400f19c:	dcc00317 	ldw	r19,12(sp)
 400f1a0:	dc800217 	ldw	r18,8(sp)
 400f1a4:	dc400117 	ldw	r17,4(sp)
 400f1a8:	dc000017 	ldw	r16,0(sp)
 400f1ac:	dec00504 	addi	sp,sp,20
 400f1b0:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
        *perr = OS_ERR_PEVENT_NULL;
 400f1b4:	00800104 	movi	r2,4
 400f1b8:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400f1bc:	dfc00417 	ldw	ra,16(sp)
 400f1c0:	dcc00317 	ldw	r19,12(sp)
 400f1c4:	dc800217 	ldw	r18,8(sp)
 400f1c8:	dc400117 	ldw	r17,4(sp)
 400f1cc:	dc000017 	ldw	r16,0(sp)
 400f1d0:	dec00504 	addi	sp,sp,20
 400f1d4:	f800283a 	ret
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 400f1d8:	00800304 	movi	r2,12
 400f1dc:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400f1e0:	dfc00417 	ldw	ra,16(sp)
 400f1e4:	dcc00317 	ldw	r19,12(sp)
 400f1e8:	dc800217 	ldw	r18,8(sp)
 400f1ec:	dc400117 	ldw	r17,4(sp)
 400f1f0:	dc000017 	ldw	r16,0(sp)
 400f1f4:	dec00504 	addi	sp,sp,20
 400f1f8:	f800283a 	ret
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 400f1fc:	89000384 	addi	r4,r17,14
 400f200:	900b883a 	mov	r5,r18
 400f204:	400ebf80 	call	400ebf8 <OS_StrCopy>
 400f208:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400f20c:	80000005 	stb	zero,0(r16)
 400f210:	003fcf06 	br	400f150 <OSEventNameSet+0x78>

0400f214 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 400f214:	defff804 	addi	sp,sp,-32
 400f218:	dcc00315 	stw	r19,12(sp)
 400f21c:	dcc00817 	ldw	r19,32(sp)
 400f220:	dc800215 	stw	r18,8(sp)
 400f224:	dc400115 	stw	r17,4(sp)
 400f228:	dc000015 	stw	r16,0(sp)
 400f22c:	dfc00715 	stw	ra,28(sp)
 400f230:	dd800615 	stw	r22,24(sp)
 400f234:	dd400515 	stw	r21,20(sp)
 400f238:	dd000415 	stw	r20,16(sp)
 400f23c:	2021883a 	mov	r16,r4
 400f240:	2823883a 	mov	r17,r5
 400f244:	3025883a 	mov	r18,r6
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 400f248:	98002726 	beq	r19,zero,400f2e8 <OSEventPendMulti+0xd4>
        return (0);
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 400f24c:	20001426 	beq	r4,zero,400f2a0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 400f250:	28001326 	beq	r5,zero,400f2a0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 400f254:	30001226 	beq	r6,zero,400f2a0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 400f258:	28000015 	stw	zero,0(r5)

    pevents     =  pevents_pend;
    pevent      = *pevents;
 400f25c:	21000017 	ldw	r4,0(r4)
 400f260:	2005883a 	mov	r2,r4
    while  (pevent != (OS_EVENT *)0) {
 400f264:	20000826 	beq	r4,zero,400f288 <OSEventPendMulti+0x74>
 400f268:	8007883a 	mov	r3,r16
 400f26c:	01400084 	movi	r5,2
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 400f270:	10800003 	ldbu	r2,0(r2)
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 400f274:	18c00104 	addi	r3,r3,4
   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 400f278:	10bfffc4 	addi	r2,r2,-1
 400f27c:	28801636 	bltu	r5,r2,400f2d8 <OSEventPendMulti+0xc4>
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
        pevent = *pevents;
 400f280:	18800017 	ldw	r2,0(r3)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 400f284:	103ffa1e 	bne	r2,zero,400f270 <OSEventPendMulti+0x5c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 400f288:	d0a80d03 	ldbu	r2,-24524(gp)
 400f28c:	10001826 	beq	r2,zero,400f2f0 <OSEventPendMulti+0xdc>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 400f290:	00800084 	movi	r2,2
 400f294:	0007883a 	mov	r3,zero
 400f298:	98800005 	stb	r2,0(r19)
 400f29c:	00000306 	br	400f2ac <OSEventPendMulti+0x98>
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
       *perr =  OS_ERR_PEVENT_NULL;
 400f2a0:	00800104 	movi	r2,4
 400f2a4:	0007883a 	mov	r3,zero
 400f2a8:	98800005 	stb	r2,0(r19)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
}
 400f2ac:	1805883a 	mov	r2,r3
 400f2b0:	dfc00717 	ldw	ra,28(sp)
 400f2b4:	dd800617 	ldw	r22,24(sp)
 400f2b8:	dd400517 	ldw	r21,20(sp)
 400f2bc:	dd000417 	ldw	r20,16(sp)
 400f2c0:	dcc00317 	ldw	r19,12(sp)
 400f2c4:	dc800217 	ldw	r18,8(sp)
 400f2c8:	dc400117 	ldw	r17,4(sp)
 400f2cc:	dc000017 	ldw	r16,0(sp)
 400f2d0:	dec00804 	addi	sp,sp,32
 400f2d4:	f800283a 	ret
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 400f2d8:	00800044 	movi	r2,1
 400f2dc:	0007883a 	mov	r3,zero
 400f2e0:	98800005 	stb	r2,0(r19)
 400f2e4:	003ff106 	br	400f2ac <OSEventPendMulti+0x98>
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 400f2e8:	0007883a 	mov	r3,zero
 400f2ec:	003fef06 	br	400f2ac <OSEventPendMulti+0x98>

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
        return (0);
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 400f2f0:	d0a7ff03 	ldbu	r2,-24580(gp)
 400f2f4:	10000426 	beq	r2,zero,400f308 <OSEventPendMulti+0xf4>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 400f2f8:	00800344 	movi	r2,13
 400f2fc:	0007883a 	mov	r3,zero
 400f300:	98800005 	stb	r2,0(r19)
 400f304:	003fe906 	br	400f2ac <OSEventPendMulti+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f308:	0029303a 	rdctl	r20,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f30c:	00bfff84 	movi	r2,-2
 400f310:	a084703a 	and	r2,r20,r2
 400f314:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
 400f318:	200b883a 	mov	r5,r4
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400f31c:	20007a26 	beq	r4,zero,400f508 <OSEventPendMulti+0x2f4>
 400f320:	8011883a 	mov	r8,r16
 400f324:	0007883a 	mov	r3,zero
 400f328:	002b883a 	mov	r21,zero
 400f32c:	0013883a 	mov	r9,zero
        switch (pevent->OSEventType) {
 400f330:	29000003 	ldbu	r4,0(r5)
 400f334:	00800084 	movi	r2,2
 400f338:	20800926 	beq	r4,r2,400f360 <OSEventPendMulti+0x14c>
 400f33c:	008000c4 	movi	r2,3
 400f340:	20804c26 	beq	r4,r2,400f474 <OSEventPendMulti+0x260>
 400f344:	00800044 	movi	r2,1
 400f348:	20805526 	beq	r4,r2,400f4a0 <OSEventPendMulti+0x28c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f34c:	a001703a 	wrctl	status,r20

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400f350:	88000015 	stw	zero,0(r17)
                *perr        =  OS_ERR_EVENT_TYPE;
                 return (events_rdy_nbr);
 400f354:	a8ffffcc 	andi	r3,r21,65535
            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
                *perr        =  OS_ERR_EVENT_TYPE;
 400f358:	98800005 	stb	r2,0(r19)
 400f35c:	003fd306 	br	400f2ac <OSEventPendMulti+0x98>
                 break;
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 400f360:	29800117 	ldw	r6,4(r5)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 400f364:	3080058b 	ldhu	r2,22(r6)
 400f368:	10005726 	beq	r2,zero,400f4c8 <OSEventPendMulti+0x2b4>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400f36c:	30800417 	ldw	r2,16(r6)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 400f370:	31000217 	ldw	r4,8(r6)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400f374:	10c00017 	ldw	r3,0(r2)
 400f378:	10800104 	addi	r2,r2,4
 400f37c:	30800415 	stw	r2,16(r6)
 400f380:	90c00015 	stw	r3,0(r18)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 400f384:	11005426 	beq	r2,r4,400f4d8 <OSEventPendMulti+0x2c4>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400f388:	3080058b 	ldhu	r2,22(r6)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 400f38c:	89400015 	stw	r5,0(r17)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400f390:	94800104 	addi	r18,r18,4
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400f394:	10bfffc4 	addi	r2,r2,-1
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 400f398:	8c400104 	addi	r17,r17,4
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;
 400f39c:	ad400044 	addi	r21,r21,1
 400f3a0:	00c00044 	movi	r3,1
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400f3a4:	3080058d 	sth	r2,22(r6)
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
                *perr        =  OS_ERR_EVENT_TYPE;
                 return (events_rdy_nbr);
        }
        pevents++;
 400f3a8:	42000104 	addi	r8,r8,4
        pevent = *pevents;
 400f3ac:	41400017 	ldw	r5,0(r8)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400f3b0:	283fdf1e 	bne	r5,zero,400f330 <OSEventPendMulti+0x11c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 400f3b4:	18c03fcc 	andi	r3,r3,255
 400f3b8:	00800044 	movi	r2,1
 400f3bc:	18806126 	beq	r3,r2,400f544 <OSEventPendMulti+0x330>
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 400f3c0:	d1680e17 	ldw	r5,-24520(gp)
 400f3c4:	00ffe004 	movi	r3,-128
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 400f3c8:	8009883a 	mov	r4,r16
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 400f3cc:	28800c03 	ldbu	r2,48(r5)
 400f3d0:	10c4b03a 	or	r2,r2,r3
 400f3d4:	1244b03a 	or	r2,r2,r9
 400f3d8:	28800c05 	stb	r2,48(r5)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400f3dc:	d0e80e17 	ldw	r3,-24520(gp)
 400f3e0:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 400f3e4:	d0a80e17 	ldw	r2,-24520(gp)
 400f3e8:	11c00b8d 	sth	r7,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 400f3ec:	400e9100 	call	400e910 <OS_EventTaskWaitMulti>
 400f3f0:	a001703a 	wrctl	status,r20

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 400f3f4:	400ece40 	call	400ece4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f3f8:	002d303a 	rdctl	r22,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f3fc:	00bfff84 	movi	r2,-2
 400f400:	b084703a 	and	r2,r22,r2
 400f404:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 400f408:	d1280e17 	ldw	r4,-24520(gp)
 400f40c:	20c00c43 	ldbu	r3,49(r4)
 400f410:	18003626 	beq	r3,zero,400f4ec <OSEventPendMulti+0x2d8>
 400f414:	00800084 	movi	r2,2
 400f418:	18803426 	beq	r3,r2,400f4ec <OSEventPendMulti+0x2d8>
             }
			 break;

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400f41c:	800b883a 	mov	r5,r16
 400f420:	400ea080 	call	400ea08 <OS_EventTaskRemoveMulti>
 400f424:	d1280e17 	ldw	r4,-24520(gp)
 400f428:	0029883a 	mov	r20,zero
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 400f42c:	20c00c43 	ldbu	r3,49(r4)
 400f430:	18003826 	beq	r3,zero,400f514 <OSEventPendMulti+0x300>
 400f434:	00800084 	movi	r2,2
 400f438:	18804726 	beq	r3,r2,400f558 <OSEventPendMulti+0x344>
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
             break;
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 400f43c:	90000015 	stw	zero,0(r18)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 400f440:	00800284 	movi	r2,10
 400f444:	98800005 	stb	r2,0(r19)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 400f448:	d0a80e17 	ldw	r2,-24520(gp)
 400f44c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 400f450:	d0e80e17 	ldw	r3,-24520(gp)
 400f454:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 400f458:	d0a80e17 	ldw	r2,-24520(gp)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 400f45c:	10000915 	stw	zero,36(r2)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 400f460:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400f464:	10000815 	stw	zero,32(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f468:	b001703a 	wrctl	status,r22
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 400f46c:	a8ffffcc 	andi	r3,r21,65535
 400f470:	003f8e06 	br	400f2ac <OSEventPendMulti+0x98>
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 400f474:	2880020b 	ldhu	r2,8(r5)
 400f478:	10001526 	beq	r2,zero,400f4d0 <OSEventPendMulti+0x2bc>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400f47c:	89400015 	stw	r5,0(r17)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 400f480:	10bfffc4 	addi	r2,r2,-1
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400f484:	90000015 	stw	zero,0(r18)
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400f488:	8c400104 	addi	r17,r17,4
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400f48c:	94800104 	addi	r18,r18,4
                      events_rdy_nbr++;
 400f490:	ad400044 	addi	r21,r21,1
 400f494:	00c00044 	movi	r3,1
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 400f498:	2880020d 	sth	r2,8(r5)
 400f49c:	003fc206 	br	400f3a8 <OSEventPendMulti+0x194>
                 break;
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 400f4a0:	28800117 	ldw	r2,4(r5)
 400f4a4:	10000f26 	beq	r2,zero,400f4e4 <OSEventPendMulti+0x2d0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 400f4a8:	90800015 	stw	r2,0(r18)
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 400f4ac:	89400015 	stw	r5,0(r17)

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 400f4b0:	94800104 	addi	r18,r18,4
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 400f4b4:	8c400104 	addi	r17,r17,4
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;
 400f4b8:	256b883a 	add	r21,r4,r21
 400f4bc:	00c00044 	movi	r3,1
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
                     pevent->OSEventPtr  = (void *)0;
 400f4c0:	28000115 	stw	zero,4(r5)
 400f4c4:	003fb806 	br	400f3a8 <OSEventPendMulti+0x194>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 400f4c8:	4a400114 	ori	r9,r9,4
 400f4cc:	003fb606 	br	400f3a8 <OSEventPendMulti+0x194>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 400f4d0:	4a400054 	ori	r9,r9,1
 400f4d4:	003fb406 	br	400f3a8 <OSEventPendMulti+0x194>
                 pq = (OS_Q *)pevent->OSEventPtr;
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 400f4d8:	30800117 	ldw	r2,4(r6)
 400f4dc:	30800415 	stw	r2,16(r6)
 400f4e0:	003fa906 	br	400f388 <OSEventPendMulti+0x174>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 400f4e4:	4a400094 	ori	r9,r9,2
 400f4e8:	003faf06 	br	400f3a8 <OSEventPendMulti+0x194>
    OS_ENTER_CRITICAL();

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 400f4ec:	25000717 	ldw	r20,28(r4)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 400f4f0:	a0002126 	beq	r20,zero,400f578 <OSEventPendMulti+0x364>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400f4f4:	8d000015 	stw	r20,0(r17)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;
 400f4f8:	ad400044 	addi	r21,r21,1
    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400f4fc:	8c400104 	addi	r17,r17,4
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 400f500:	88000015 	stw	zero,0(r17)
 400f504:	003fc906 	br	400f42c <OSEventPendMulti+0x218>

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
 400f508:	002b883a 	mov	r21,zero
 400f50c:	0013883a 	mov	r9,zero
 400f510:	003fab06 	br	400f3c0 <OSEventPendMulti+0x1ac>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 400f514:	a0c00003 	ldbu	r3,0(r20)
 400f518:	18000426 	beq	r3,zero,400f52c <OSEventPendMulti+0x318>
 400f51c:	00800084 	movi	r2,2
 400f520:	10c0112e 	bgeu	r2,r3,400f568 <OSEventPendMulti+0x354>
 400f524:	008000c4 	movi	r2,3
 400f528:	18801a26 	beq	r3,r2,400f594 <OSEventPendMulti+0x380>
 400f52c:	b001703a 	wrctl	status,r22

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 400f530:	88000015 	stw	zero,0(r17)
                     *perr        =  OS_ERR_EVENT_TYPE;
 400f534:	00800044 	movi	r2,1
                      return (events_rdy_nbr);
 400f538:	a8ffffcc 	andi	r3,r21,65535
                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
 400f53c:	98800005 	stb	r2,0(r19)
 400f540:	003f5a06 	br	400f2ac <OSEventPendMulti+0x98>
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 400f544:	88000015 	stw	zero,0(r17)
 400f548:	a001703a 	wrctl	status,r20
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
 400f54c:	a8ffffcc 	andi	r3,r21,65535
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 400f550:	98000005 	stb	zero,0(r19)
 400f554:	003f5506 	br	400f2ac <OSEventPendMulti+0x98>
             }
            *perr = OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 400f558:	90000015 	stw	zero,0(r18)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 400f55c:	00800384 	movi	r2,14
 400f560:	98800005 	stb	r2,0(r19)
 400f564:	003fb806 	br	400f448 <OSEventPendMulti+0x234>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 400f568:	20800917 	ldw	r2,36(r4)
 400f56c:	90800015 	stw	r2,0(r18)
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
             }
            *perr = OS_ERR_NONE;
 400f570:	98000005 	stb	zero,0(r19)
 400f574:	003fb406 	br	400f448 <OSEventPendMulti+0x234>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 400f578:	00800044 	movi	r2,1
 400f57c:	20800c45 	stb	r2,49(r4)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400f580:	d1280e17 	ldw	r4,-24520(gp)
 400f584:	800b883a 	mov	r5,r16
 400f588:	400ea080 	call	400ea08 <OS_EventTaskRemoveMulti>
 400f58c:	d1280e17 	ldw	r4,-24520(gp)
 400f590:	003fa606 	br	400f42c <OSEventPendMulti+0x218>
    switch (OSTCBCur->OSTCBStatPend) {
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 400f594:	90000015 	stw	zero,0(r18)
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
             }
            *perr = OS_ERR_NONE;
 400f598:	98000005 	stb	zero,0(r19)
 400f59c:	003faa06 	br	400f448 <OSEventPendMulti+0x234>

0400f5a0 <OSIntEnter>:
{
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
#endif

    if (OSRunning == OS_TRUE) {
 400f5a0:	d127ff43 	ldbu	r4,-24579(gp)
 400f5a4:	00800044 	movi	r2,1
 400f5a8:	20800126 	beq	r4,r2,400f5b0 <OSIntEnter+0x10>
 400f5ac:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f5b0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f5b4:	00bfff84 	movi	r2,-2
 400f5b8:	2884703a 	and	r2,r5,r2
 400f5bc:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSIntNesting < 255u) {
 400f5c0:	d0e80d03 	ldbu	r3,-24524(gp)
 400f5c4:	00803fc4 	movi	r2,255
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 400f5c8:	1909883a 	add	r4,r3,r4
    OS_CPU_SR  cpu_sr = 0;
#endif

    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting < 255u) {
 400f5cc:	18c03fcc 	andi	r3,r3,255
 400f5d0:	18800126 	beq	r3,r2,400f5d8 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 400f5d4:	d1280d05 	stb	r4,-24524(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f5d8:	2801703a 	wrctl	status,r5
 400f5dc:	f800283a 	ret

0400f5e0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 400f5e0:	defffd04 	addi	sp,sp,-12
 400f5e4:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
 400f5e8:	d427ff43 	ldbu	r16,-24579(gp)
 400f5ec:	00800044 	movi	r2,1
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 400f5f0:	dfc00215 	stw	ra,8(sp)
 400f5f4:	dc400115 	stw	r17,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
 400f5f8:	80800526 	beq	r16,r2,400f610 <OSIntExit+0x30>
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400f5fc:	dfc00217 	ldw	ra,8(sp)
 400f600:	dc400117 	ldw	r17,4(sp)
 400f604:	dc000017 	ldw	r16,0(sp)
 400f608:	dec00304 	addi	sp,sp,12
 400f60c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f610:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f614:	00bfff84 	movi	r2,-2
 400f618:	8884703a 	and	r2,r17,r2
 400f61c:	1001703a 	wrctl	status,r2



    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400f620:	d0e80d03 	ldbu	r3,-24524(gp)
            OSIntNesting--;
 400f624:	18bfffc4 	addi	r2,r3,-1
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 400f628:	11003fcc 	andi	r4,r2,255



    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400f62c:	1800081e 	bne	r3,zero,400f650 <OSIntExit+0x70>
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 400f630:	d0a7ff03 	ldbu	r2,-24580(gp)
 400f634:	10000a26 	beq	r2,zero,400f660 <OSIntExit+0x80>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f638:	8801703a 	wrctl	status,r17
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400f63c:	dfc00217 	ldw	ra,8(sp)
 400f640:	dc400117 	ldw	r17,4(sp)
 400f644:	dc000017 	ldw	r16,0(sp)
 400f648:	dec00304 	addi	sp,sp,12
 400f64c:	f800283a 	ret


    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
            OSIntNesting--;
 400f650:	d0a80d05 	stb	r2,-24524(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 400f654:	203ff626 	beq	r4,zero,400f630 <OSIntExit+0x50>
 400f658:	8801703a 	wrctl	status,r17
 400f65c:	003ff706 	br	400f63c <OSIntExit+0x5c>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
 400f660:	400ebc00 	call	400ebc0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400f664:	d1280103 	ldbu	r4,-24572(gp)
 400f668:	d1680143 	ldbu	r5,-24571(gp)
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400f66c:	00c10134 	movhi	r3,1028
 400f670:	18ca4904 	addi	r3,r3,10532
 400f674:	2105883a 	add	r2,r4,r4
 400f678:	1085883a 	add	r2,r2,r2
 400f67c:	10c5883a 	add	r2,r2,r3
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400f680:	217fed26 	beq	r4,r5,400f638 <OSIntExit+0x58>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400f684:	10800017 	ldw	r2,0(r2)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400f688:	d1280417 	ldw	r4,-24560(gp)
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 400f68c:	10c00e17 	ldw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400f690:	2409883a 	add	r4,r4,r16
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400f694:	d0a80915 	stw	r2,-24540(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 400f698:	1c07883a 	add	r3,r3,r16
 400f69c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400f6a0:	d1280415 	stw	r4,-24560(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 400f6a4:	40269700 	call	4026970 <OSCtxSw>
 400f6a8:	8801703a 	wrctl	status,r17
 400f6ac:	003fe306 	br	400f63c <OSIntExit+0x5c>

0400f6b0 <OSSchedLock>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 400f6b0:	d127ff43 	ldbu	r4,-24579(gp)
 400f6b4:	00800044 	movi	r2,1
 400f6b8:	20800126 	beq	r4,r2,400f6c0 <OSSchedLock+0x10>
 400f6bc:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f6c0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f6c4:	00bfff84 	movi	r2,-2
 400f6c8:	2884703a 	and	r2,r5,r2
 400f6cc:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400f6d0:	d0e80d03 	ldbu	r3,-24524(gp)
 400f6d4:	1800061e 	bne	r3,zero,400f6f0 <OSSchedLock+0x40>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400f6d8:	d0e7ff03 	ldbu	r3,-24580(gp)
 400f6dc:	00803fc4 	movi	r2,255
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400f6e0:	1909883a 	add	r4,r3,r4


    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
        OS_ENTER_CRITICAL();
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400f6e4:	18c03fcc 	andi	r3,r3,255
 400f6e8:	18800126 	beq	r3,r2,400f6f0 <OSSchedLock+0x40>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400f6ec:	d127ff05 	stb	r4,-24580(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f6f0:	2801703a 	wrctl	status,r5
 400f6f4:	f800283a 	ret

0400f6f8 <OSSchedUnlock>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400f6f8:	d0e7ff43 	ldbu	r3,-24579(gp)
 400f6fc:	00800044 	movi	r2,1
 400f700:	18800126 	beq	r3,r2,400f708 <OSSchedUnlock+0x10>
 400f704:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f708:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f70c:	00bfff84 	movi	r2,-2
 400f710:	2884703a 	and	r2,r5,r2
 400f714:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400f718:	d0e7ff03 	ldbu	r3,-24580(gp)
            OSLockNesting--;                               /* Decrement lock nesting level             */
 400f71c:	18bfffc4 	addi	r2,r3,-1
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 400f720:	11003fcc 	andi	r4,r2,255



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
        OS_ENTER_CRITICAL();
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400f724:	18000626 	beq	r3,zero,400f740 <OSSchedUnlock+0x48>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 400f728:	d0a7ff05 	stb	r2,-24580(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 400f72c:	2000061e 	bne	r4,zero,400f748 <OSSchedUnlock+0x50>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 400f730:	d0a80d03 	ldbu	r2,-24524(gp)
 400f734:	1000041e 	bne	r2,zero,400f748 <OSSchedUnlock+0x50>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f738:	2801703a 	wrctl	status,r5
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 400f73c:	400ece41 	jmpi	400ece4 <OS_Sched>
 400f740:	2801703a 	wrctl	status,r5
 400f744:	f800283a 	ret
 400f748:	2801703a 	wrctl	status,r5
 400f74c:	f800283a 	ret

0400f750 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 400f750:	defffe04 	addi	sp,sp,-8
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 400f754:	01000084 	movi	r4,2
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 400f758:	dfc00115 	stw	ra,4(sp)
 400f75c:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 400f760:	4012fd00 	call	4012fd0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f764:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f768:	043fff84 	movi	r16,-2
 400f76c:	1c04703a 	and	r2,r3,r16
 400f770:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 400f774:	d0280015 	stw	zero,-24576(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f778:	1801703a 	wrctl	status,r3
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 400f77c:	01000284 	movi	r4,10
 400f780:	4012fd00 	call	4012fd0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f784:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f788:	2420703a 	and	r16,r4,r16
 400f78c:	8001703a 	wrctl	status,r16
    OS_ENTER_CRITICAL();
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 400f790:	d0e80017 	ldw	r3,-24576(gp)
    OSStatRdy    = OS_TRUE;
 400f794:	00800044 	movi	r2,1
 400f798:	d0a81105 	stb	r2,-24508(gp)
    OS_ENTER_CRITICAL();
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    OS_ENTER_CRITICAL();
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 400f79c:	d0e80515 	stw	r3,-24556(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f7a0:	2001703a 	wrctl	status,r4
    OSStatRdy    = OS_TRUE;
    OS_EXIT_CRITICAL();
}
 400f7a4:	dfc00117 	ldw	ra,4(sp)
 400f7a8:	dc000017 	ldw	r16,0(sp)
 400f7ac:	dec00204 	addi	sp,sp,8
 400f7b0:	f800283a 	ret

0400f7b4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 400f7b4:	deffff04 	addi	sp,sp,-4
 400f7b8:	dfc00015 	stw	ra,0(sp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 400f7bc:	4026a600 	call	4026a60 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f7c0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f7c4:	00bfff84 	movi	r2,-2
 400f7c8:	2084703a 	and	r2,r4,r2
 400f7cc:	1001703a 	wrctl	status,r2
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    OSTime++;
 400f7d0:	d0e80f17 	ldw	r3,-24516(gp)
 400f7d4:	18c00044 	addi	r3,r3,1
 400f7d8:	d0e80f15 	stw	r3,-24516(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f7dc:	2001703a 	wrctl	status,r4
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 400f7e0:	d0e7ff43 	ldbu	r3,-24579(gp)
 400f7e4:	00800044 	movi	r2,1
 400f7e8:	18800326 	beq	r3,r2,400f7f8 <OSTimeTick+0x44>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 400f7ec:	dfc00017 	ldw	ra,0(sp)
 400f7f0:	dec00104 	addi	sp,sp,4
 400f7f4:	f800283a 	ret
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 400f7f8:	d1280303 	ldbu	r4,-24564(gp)
 400f7fc:	20fffb26 	beq	r4,r3,400f7ec <OSTimeTick+0x38>
 400f800:	20c02b2e 	bgeu	r4,r3,400f8b0 <OSTimeTick+0xfc>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 400f804:	d1a80217 	ldw	r6,-24568(gp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400f808:	00800504 	movi	r2,20
 400f80c:	30c00c83 	ldbu	r3,50(r6)
 400f810:	1880171e 	bne	r3,r2,400f870 <OSTimeTick+0xbc>
 400f814:	003ff506 	br	400f7ec <OSTimeTick+0x38>
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 400f818:	00800044 	movi	r2,1
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 400f81c:	30c00c05 	stb	r3,48(r6)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 400f820:	30800c45 	stb	r2,49(r6)
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 400f824:	30800c03 	ldbu	r2,48(r6)
 400f828:	1080020c 	andi	r2,r2,8
 400f82c:	10000b1e 	bne	r2,zero,400f85c <OSTimeTick+0xa8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 400f830:	30c00d83 	ldbu	r3,54(r6)
 400f834:	d0a80b03 	ldbu	r2,-24532(gp)
 400f838:	10c4b03a 	or	r2,r2,r3
 400f83c:	d0a80b05 	stb	r2,-24532(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400f840:	31000d03 	ldbu	r4,52(r6)
 400f844:	d0e80b44 	addi	r3,gp,-24531
 400f848:	31400d43 	ldbu	r5,53(r6)
 400f84c:	20c9883a 	add	r4,r4,r3
 400f850:	20800003 	ldbu	r2,0(r4)
 400f854:	1144b03a 	or	r2,r2,r5
 400f858:	20800005 	stb	r2,0(r4)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 400f85c:	31800517 	ldw	r6,20(r6)
 400f860:	3801703a 	wrctl	status,r7
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400f864:	30c00c83 	ldbu	r3,50(r6)
 400f868:	00800504 	movi	r2,20
 400f86c:	18bfdf26 	beq	r3,r2,400f7ec <OSTimeTick+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f870:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f874:	00bfff84 	movi	r2,-2
 400f878:	3884703a 	and	r2,r7,r2
 400f87c:	1001703a 	wrctl	status,r2
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 400f880:	30c00b8b 	ldhu	r3,46(r6)
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 400f884:	18bfffc4 	addi	r2,r3,-1
 400f888:	113fffcc 	andi	r4,r2,65535
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 400f88c:	183ff326 	beq	r3,zero,400f85c <OSTimeTick+0xa8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 400f890:	30800b8d 	sth	r2,46(r6)
 400f894:	203ff11e 	bne	r4,zero,400f85c <OSTimeTick+0xa8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400f898:	30800c03 	ldbu	r2,48(r6)
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 400f89c:	10c0320c 	andi	r3,r2,200
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400f8a0:	10800dcc 	andi	r2,r2,55
 400f8a4:	103fdc1e 	bne	r2,zero,400f818 <OSTimeTick+0x64>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400f8a8:	30000c45 	stb	zero,49(r6)
 400f8ac:	003fdd06 	br	400f824 <OSTimeTick+0x70>
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 400f8b0:	00800084 	movi	r2,2
 400f8b4:	20800226 	beq	r4,r2,400f8c0 <OSTimeTick+0x10c>
                 OSTickStepState = OS_TICK_STEP_WAIT;
                 break;

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
 400f8b8:	d0280305 	stb	zero,-24564(gp)
 400f8bc:	003fd106 	br	400f804 <OSTimeTick+0x50>
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
                 break;

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
                 OSTickStepState = OS_TICK_STEP_WAIT;
 400f8c0:	d0e80305 	stb	r3,-24564(gp)
 400f8c4:	003fcf06 	br	400f804 <OSTimeTick+0x50>

0400f8c8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 400f8c8:	defffe04 	addi	sp,sp,-8
 400f8cc:	dc000015 	stw	r16,0(sp)
 400f8d0:	dfc00115 	stw	ra,4(sp)
 400f8d4:	043fff84 	movi	r16,-2
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f8d8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f8dc:	2406703a 	and	r3,r4,r16
 400f8e0:	1801703a 	wrctl	status,r3


    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtr++;
 400f8e4:	d0a80017 	ldw	r2,-24576(gp)
 400f8e8:	10800044 	addi	r2,r2,1
 400f8ec:	d0a80015 	stw	r2,-24576(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f8f0:	2001703a 	wrctl	status,r4
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 400f8f4:	4026a580 	call	4026a58 <OSTaskIdleHook>
 400f8f8:	003ff706 	br	400f8d8 <OS_TaskIdle+0x10>

0400f8fc <OS_TaskStat>:
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400f8fc:	d0a81103 	ldbu	r2,-24508(gp)
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 400f900:	deffff04 	addi	sp,sp,-4
 400f904:	dfc00015 	stw	ra,0(sp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400f908:	1000041e 	bne	r2,zero,400f91c <OS_TaskStat+0x20>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 400f90c:	01000504 	movi	r4,20
 400f910:	4012fd00 	call	4012fd0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400f914:	d0a81103 	ldbu	r2,-24508(gp)
 400f918:	103ffc26 	beq	r2,zero,400f90c <OS_TaskStat+0x10>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 400f91c:	d1680517 	ldw	r5,-24556(gp)
 400f920:	00801904 	movi	r2,100
 400f924:	288b203a 	divu	r5,r5,r2
 400f928:	d1680515 	stw	r5,-24556(gp)
    if (OSIdleCtrMax == 0L) {
 400f92c:	28001226 	beq	r5,zero,400f978 <OS_TaskStat+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f930:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f934:	00bfff84 	movi	r2,-2
 400f938:	2084703a 	and	r2,r4,r2
 400f93c:	1001703a 	wrctl	status,r2
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
    }
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 400f940:	d0e80017 	ldw	r3,-24576(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 400f944:	d0280015 	stw	zero,-24576(gp)
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
    }
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 400f948:	d0e81215 	stw	r3,-24504(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f94c:	2001703a 	wrctl	status,r4
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 400f950:	1947203a 	divu	r3,r3,r5
 400f954:	00801904 	movi	r2,100
 400f958:	10c5c83a 	sub	r2,r2,r3
 400f95c:	d0a80705 	stb	r2,-24548(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 400f960:	4026a4c0 	call	4026a4c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 400f964:	400ec500 	call	400ec50 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 400f968:	01000284 	movi	r4,10
 400f96c:	4012fd00 	call	4012fd0 <OSTimeDly>
 400f970:	d1680517 	ldw	r5,-24556(gp)
 400f974:	003fee06 	br	400f930 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    if (OSIdleCtrMax == 0L) {
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
 400f978:	01003fc4 	movi	r4,255
    while (OSStatRdy == OS_FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    if (OSIdleCtrMax == 0L) {
        OSCPUUsage = 0;
 400f97c:	d0280705 	stb	zero,-24548(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 400f980:	4012e580 	call	4012e58 <OSTaskSuspend>
 400f984:	d1680517 	ldw	r5,-24556(gp)
 400f988:	003fe906 	br	400f930 <OS_TaskStat+0x34>

0400f98c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 400f98c:	defffc04 	addi	sp,sp,-16
 400f990:	da800617 	ldw	r10,24(sp)
 400f994:	2011883a 	mov	r8,r4
 400f998:	2813883a 	mov	r9,r5
 400f99c:	dfc00315 	stw	ra,12(sp)
 400f9a0:	dc800215 	stw	r18,8(sp)
 400f9a4:	dc400115 	stw	r17,4(sp)
 400f9a8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f9ac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f9b0:	04bfff84 	movi	r18,-2
 400f9b4:	1c84703a 	and	r2,r3,r18
 400f9b8:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 400f9bc:	d4680617 	ldw	r17,-24552(gp)
    if (ptcb != (OS_TCB *)0) {
 400f9c0:	8800081e 	bne	r17,zero,400f9e4 <OS_TCBInit+0x58>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f9c4:	1801703a 	wrctl	status,r3
 400f9c8:	00801084 	movi	r2,66
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
}
 400f9cc:	dfc00317 	ldw	ra,12(sp)
 400f9d0:	dc800217 	ldw	r18,8(sp)
 400f9d4:	dc400117 	ldw	r17,4(sp)
 400f9d8:	dc000017 	ldw	r16,0(sp)
 400f9dc:	dec00404 	addi	sp,sp,16
 400f9e0:	f800283a 	ret


    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 400f9e4:	88800517 	ldw	r2,20(r17)
 400f9e8:	d0a80615 	stw	r2,-24552(gp)
 400f9ec:	1801703a 	wrctl	status,r3
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 400f9f0:	24003fcc 	andi	r16,r4,255
 400f9f4:	8006d0fa 	srli	r3,r16,3
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 400f9f8:	208001cc 	andi	r2,r4,7
 400f9fc:	88800cc5 	stb	r2,51(r17)
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 400fa00:	88c00d05 	stb	r3,52(r17)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 400fa04:	19403fcc 	andi	r5,r3,255
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 400fa08:	10803fcc 	andi	r2,r2,255
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 400fa0c:	01000044 	movi	r4,1
 400fa10:	214a983a 	sll	r5,r4,r5
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 400fa14:	2088983a 	sll	r4,r4,r2
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 400fa18:	d8800517 	ldw	r2,20(sp)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 400fa1c:	d8c00417 	ldw	r3,16(sp)
    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 400fa20:	8a400015 	stw	r9,0(r17)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 400fa24:	88800115 	stw	r2,4(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 400fa28:	00800fc4 	movi	r2,63
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 400fa2c:	88c00315 	stw	r3,12(r17)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 400fa30:	89800215 	stw	r6,8(r17)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 400fa34:	8a80040d 	sth	r10,16(r17)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 400fa38:	89c0048d 	sth	r7,18(r17)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 400fa3c:	89400d85 	stb	r5,54(r17)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 400fa40:	89000d45 	stb	r4,53(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 400fa44:	88801305 	stb	r2,76(r17)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 400fa48:	8a000c85 	stb	r8,50(r17)
#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif

        OSTCBInitHook(ptcb);
 400fa4c:	8809883a 	mov	r4,r17
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 400fa50:	88000c05 	stb	zero,48(r17)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 400fa54:	88000c45 	stb	zero,49(r17)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 400fa58:	88000b8d 	sth	zero,46(r17)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 400fa5c:	88000dc5 	stb	zero,55(r17)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 400fa60:	88000715 	stw	zero,28(r17)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 400fa64:	88000815 	stw	zero,32(r17)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 400fa68:	88000a15 	stw	zero,40(r17)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 400fa6c:	88000915 	stw	zero,36(r17)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 400fa70:	88000e15 	stw	zero,56(r17)
        ptcb->OSTCBCyclesStart = 0L;
 400fa74:	88001015 	stw	zero,64(r17)
        ptcb->OSTCBCyclesTot   = 0L;
 400fa78:	88000f15 	stw	zero,60(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 400fa7c:	88001115 	stw	zero,68(r17)
        ptcb->OSTCBStkUsed     = 0L;
 400fa80:	88001215 	stw	zero,72(r17)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 400fa84:	88001345 	stb	zero,77(r17)
#endif

        OSTCBInitHook(ptcb);
 400fa88:	4026a5c0 	call	4026a5c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 400fa8c:	8809883a 	mov	r4,r17
 400fa90:	4026a400 	call	4026a40 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fa94:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fa98:	3c84703a 	and	r2,r7,r18
 400fa9c:	1001703a 	wrctl	status,r2
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 400faa0:	d0a80743 	ldbu	r2,-24547(gp)
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
 400faa4:	8421883a 	add	r16,r16,r16
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 400faa8:	d0e80217 	ldw	r3,-24568(gp)
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
 400faac:	8421883a 	add	r16,r16,r16
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 400fab0:	11800044 	addi	r6,r2,1
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
 400fab4:	00810134 	movhi	r2,1028
 400fab8:	108a4904 	addi	r2,r2,10532
 400fabc:	80a1883a 	add	r16,r16,r2
 400fac0:	84400015 	stw	r17,0(r16)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 400fac4:	d1280b03 	ldbu	r4,-24532(gp)
        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 400fac8:	88000615 	stw	zero,24(r17)

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 400facc:	88c00515 	stw	r3,20(r17)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
 400fad0:	18000126 	beq	r3,zero,400fad8 <OS_TCBInit+0x14c>
            OSTCBList->OSTCBPrev = ptcb;
 400fad4:	1c400615 	stw	r17,24(r3)
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 400fad8:	88800d83 	ldbu	r2,54(r17)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400fadc:	d0e80b44 	addi	r3,gp,-24531
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
 400fae0:	d4680215 	stw	r17,-24568(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 400fae4:	2084b03a 	or	r2,r4,r2
 400fae8:	d0a80b05 	stb	r2,-24532(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400faec:	89000d03 	ldbu	r4,52(r17)
 400faf0:	89400d43 	ldbu	r5,53(r17)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 400faf4:	d1a80745 	stb	r6,-24547(gp)
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400faf8:	20c9883a 	add	r4,r4,r3
 400fafc:	20800003 	ldbu	r2,0(r4)
 400fb00:	1144b03a 	or	r2,r2,r5
 400fb04:	20800005 	stb	r2,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fb08:	3801703a 	wrctl	status,r7
 400fb0c:	0005883a 	mov	r2,zero
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
}
 400fb10:	dfc00317 	ldw	ra,12(sp)
 400fb14:	dc800217 	ldw	r18,8(sp)
 400fb18:	dc400117 	ldw	r17,4(sp)
 400fb1c:	dc000017 	ldw	r16,0(sp)
 400fb20:	dec00404 	addi	sp,sp,16
 400fb24:	f800283a 	ret

0400fb28 <OSDebugInit>:
    ptemp = (void *)&OSVersionNbr;

    ptemp = (void *)&OSDataSize;

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 400fb28:	f800283a 	ret

0400fb2c <OS_FlagBlock>:
{
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 400fb2c:	02010134 	movhi	r8,1028
 400fb30:	42290504 	addi	r8,r8,-23532
 400fb34:	42400017 	ldw	r9,0(r8)
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 400fb38:	da800017 	ldw	r10,0(sp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 400fb3c:	48800c03 	ldbu	r2,48(r9)
 400fb40:	10800814 	ori	r2,r2,32
 400fb44:	48800c05 	stb	r2,48(r9)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 400fb48:	40c00017 	ldw	r3,0(r8)
    pgrp->OSFlagWaitList = (void *)pnode;

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    if (OSRdyTbl[y] == 0x00) {
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 400fb4c:	02410134 	movhi	r9,1028
 400fb50:	4a690204 	addi	r9,r9,-23544
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 400fb54:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 400fb58:	40800017 	ldw	r2,0(r8)
 400fb5c:	12800b8d 	sth	r10,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 400fb60:	11400a15 	stw	r5,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 400fb64:	29c00485 	stb	r7,18(r5)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 400fb68:	42000017 	ldw	r8,0(r8)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 400fb6c:	2980040d 	sth	r6,16(r5)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 400fb70:	2a000215 	stw	r8,8(r5)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 400fb74:	20800117 	ldw	r2,4(r4)
    pnode->OSFlagNodePrev     = (void *)0;
 400fb78:	28000115 	stw	zero,4(r5)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 400fb7c:	29000315 	stw	r4,12(r5)
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 400fb80:	28800015 	stw	r2,0(r5)
    pnode->OSFlagNodePrev     = (void *)0;
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400fb84:	20800117 	ldw	r2,4(r4)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 400fb88:	10000126 	beq	r2,zero,400fb90 <OS_FlagBlock+0x64>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 400fb8c:	11400115 	stw	r5,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 400fb90:	21400115 	stw	r5,4(r4)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 400fb94:	41000d03 	ldbu	r4,52(r8)
 400fb98:	00c10134 	movhi	r3,1028
 400fb9c:	18e90244 	addi	r3,r3,-23543
 400fba0:	40800d43 	ldbu	r2,53(r8)
 400fba4:	20c9883a 	add	r4,r4,r3
 400fba8:	21400003 	ldbu	r5,0(r4)
 400fbac:	0084303a 	nor	r2,zero,r2
 400fbb0:	1144703a 	and	r2,r2,r5
    if (OSRdyTbl[y] == 0x00) {
 400fbb4:	10c03fcc 	andi	r3,r2,255
 400fbb8:	18c0201c 	xori	r3,r3,128
 400fbbc:	18ffe004 	addi	r3,r3,-128
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    }
    pgrp->OSFlagWaitList = (void *)pnode;

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 400fbc0:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0x00) {
 400fbc4:	1800051e 	bne	r3,zero,400fbdc <OS_FlagBlock+0xb0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 400fbc8:	40800d83 	ldbu	r2,54(r8)
 400fbcc:	48c00003 	ldbu	r3,0(r9)
 400fbd0:	0084303a 	nor	r2,zero,r2
 400fbd4:	10c4703a 	and	r2,r2,r3
 400fbd8:	48800005 	stb	r2,0(r9)
 400fbdc:	f800283a 	ret

0400fbe0 <OS_FlagUnlink>:
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 400fbe0:	20800117 	ldw	r2,4(r4)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 400fbe4:	20c00017 	ldw	r3,0(r4)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 400fbe8:	10000626 	beq	r2,zero,400fc04 <OS_FlagUnlink+0x24>
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
        if (pnode_next != (OS_FLAG_NODE *)0) {
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 400fbec:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 400fbf0:	18000126 	beq	r3,zero,400fbf8 <OS_FlagUnlink+0x18>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 400fbf4:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 400fbf8:	20800217 	ldw	r2,8(r4)
 400fbfc:	10000a15 	stw	zero,40(r2)
#endif
}
 400fc00:	f800283a 	ret

    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 400fc04:	20800317 	ldw	r2,12(r4)
 400fc08:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 400fc0c:	183ffa26 	beq	r3,zero,400fbf8 <OS_FlagUnlink+0x18>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 400fc10:	20800217 	ldw	r2,8(r4)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
        if (pnode_next != (OS_FLAG_NODE *)0) {
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 400fc14:	18000115 	stw	zero,4(r3)
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 400fc18:	10000a15 	stw	zero,40(r2)
#endif
}
 400fc1c:	f800283a 	ret

0400fc20 <OS_FlagTaskRdy>:
{
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 400fc20:	21800217 	ldw	r6,8(r4)
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 400fc24:	defffe04 	addi	sp,sp,-8
 400fc28:	dc000015 	stw	r16,0(sp)
 400fc2c:	dfc00115 	stw	ra,4(sp)


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400fc30:	30800c03 	ldbu	r2,48(r6)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 400fc34:	02010134 	movhi	r8,1028
 400fc38:	42290204 	addi	r8,r8,-23544
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 400fc3c:	200f883a 	mov	r7,r4


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400fc40:	108037cc 	andi	r2,r2,223
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 400fc44:	10c03fcc 	andi	r3,r2,255
 400fc48:	0021883a 	mov	r16,zero
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 400fc4c:	31400b0d 	sth	r5,44(r6)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 400fc50:	30000c45 	stb	zero,49(r6)


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 400fc54:	30800c05 	stb	r2,48(r6)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
 400fc58:	30000b8d 	sth	zero,46(r6)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 400fc5c:	18000d1e 	bne	r3,zero,400fc94 <OS_FlagTaskRdy+0x74>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 400fc60:	30800d83 	ldbu	r2,54(r6)
 400fc64:	40c00003 	ldbu	r3,0(r8)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400fc68:	04000044 	movi	r16,1
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 400fc6c:	10c4b03a 	or	r2,r2,r3
 400fc70:	40800005 	stb	r2,0(r8)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400fc74:	31000d03 	ldbu	r4,52(r6)
 400fc78:	00c10134 	movhi	r3,1028
 400fc7c:	18e90244 	addi	r3,r3,-23543
 400fc80:	31400d43 	ldbu	r5,53(r6)
 400fc84:	20c9883a 	add	r4,r4,r3
 400fc88:	20800003 	ldbu	r2,0(r4)
 400fc8c:	1144b03a 	or	r2,r2,r5
 400fc90:	20800005 	stb	r2,0(r4)
        sched                   = OS_TRUE;
    } else {
        sched                   = OS_FALSE;
    }
    OS_FlagUnlink(pnode);
 400fc94:	3809883a 	mov	r4,r7
 400fc98:	400fbe00 	call	400fbe0 <OS_FlagUnlink>
    return (sched);
}
 400fc9c:	8005883a 	mov	r2,r16
 400fca0:	dfc00117 	ldw	ra,4(sp)
 400fca4:	dc000017 	ldw	r16,0(sp)
 400fca8:	dec00204 	addi	sp,sp,8
 400fcac:	f800283a 	ret

0400fcb0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 400fcb0:	deffff04 	addi	sp,sp,-4
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 400fcb4:	0140dc04 	movi	r5,880
 400fcb8:	01010134 	movhi	r4,1028
 400fcbc:	213dd504 	addi	r4,r4,-2220
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 400fcc0:	dfc00015 	stw	ra,0(sp)
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 400fcc4:	400eb780 	call	400eb78 <OS_MemClr>
 400fcc8:	01410134 	movhi	r5,1028
 400fccc:	297de004 	addi	r5,r5,-2176
 400fcd0:	2880d104 	addi	r2,r5,836
 400fcd4:	01800fc4 	movi	r6,63
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400fcd8:	283ff505 	stb	zero,-44(r5)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 400fcdc:	297ff615 	stw	r5,-40(r5)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 400fce0:	29bff785 	stb	r6,-34(r5)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 400fce4:	283ff7c5 	stb	zero,-33(r5)
#endif
        pgrp1++;
        pgrp2++;
 400fce8:	29400b04 	addi	r5,r5,44


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 400fcec:	28bffa1e 	bne	r5,r2,400fcd8 <OS_FlagInit+0x28>
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 400fcf0:	293f2404 	addi	r4,r5,-880
 400fcf4:	00810134 	movhi	r2,1028
 400fcf8:	10a90704 	addi	r2,r2,-23524


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 400fcfc:	28fff504 	addi	r3,r5,-44
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 400fd00:	11000015 	stw	r4,0(r2)
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 400fd04:	19800285 	stb	r6,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 400fd08:	180002c5 	stb	zero,11(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400fd0c:	283ff505 	stb	zero,-44(r5)
    pgrp1->OSFlagWaitList = (void *)0;
 400fd10:	18000115 	stw	zero,4(r3)
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
#endif
}
 400fd14:	dfc00017 	ldw	ra,0(sp)
 400fd18:	dec00104 	addi	sp,sp,4
 400fd1c:	f800283a 	ret

0400fd20 <OSFlagQuery>:
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 400fd20:	000d883a 	mov	r6,zero
 400fd24:	28000826 	beq	r5,zero,400fd48 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400fd28:	000d883a 	mov	r6,zero

#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 400fd2c:	20000826 	beq	r4,zero,400fd50 <OSFlagQuery+0x30>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 400fd30:	20c00003 	ldbu	r3,0(r4)
 400fd34:	00800144 	movi	r2,5
        *perr = OS_ERR_EVENT_TYPE;
 400fd38:	000d883a 	mov	r6,zero
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 400fd3c:	18800826 	beq	r3,r2,400fd60 <OSFlagQuery+0x40>
        *perr = OS_ERR_EVENT_TYPE;
 400fd40:	00800044 	movi	r2,1
 400fd44:	28800005 	stb	r2,0(r5)
    OS_ENTER_CRITICAL();
    flags = pgrp->OSFlagFlags;
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (flags);                               /* Return the current value of the event flags       */
}
 400fd48:	3005883a 	mov	r2,r6
 400fd4c:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400fd50:	00801b84 	movi	r2,110
 400fd54:	28800005 	stb	r2,0(r5)
    OS_ENTER_CRITICAL();
    flags = pgrp->OSFlagFlags;
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (flags);                               /* Return the current value of the event flags       */
}
 400fd58:	3005883a 	mov	r2,r6
 400fd5c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fd60:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fd64:	00ffff84 	movi	r3,-2
 400fd68:	10c6703a 	and	r3,r2,r3
 400fd6c:	1801703a 	wrctl	status,r3
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
        *perr = OS_ERR_EVENT_TYPE;
        return ((OS_FLAGS)0);
    }
    OS_ENTER_CRITICAL();
    flags = pgrp->OSFlagFlags;
 400fd70:	20c0020b 	ldhu	r3,8(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fd74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (flags);                               /* Return the current value of the event flags       */
 400fd78:	180d883a 	mov	r6,r3
}
 400fd7c:	3005883a 	mov	r2,r6
        return ((OS_FLAGS)0);
    }
    OS_ENTER_CRITICAL();
    flags = pgrp->OSFlagFlags;
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400fd80:	28000005 	stb	zero,0(r5)
    return (flags);                               /* Return the current value of the event flags       */
}
 400fd84:	f800283a 	ret

0400fd88 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 400fd88:	3011883a 	mov	r8,r6
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400fd8c:	38001e26 	beq	r7,zero,400fe08 <OSFlagAccept+0x80>
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400fd90:	20002326 	beq	r4,zero,400fe20 <OSFlagAccept+0x98>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400fd94:	20c00003 	ldbu	r3,0(r4)
 400fd98:	00800144 	movi	r2,5
 400fd9c:	18800526 	beq	r3,r2,400fdb4 <OSFlagAccept+0x2c>
        *perr = OS_ERR_EVENT_TYPE;
 400fda0:	00800044 	movi	r2,1
 400fda4:	0007883a 	mov	r3,zero
 400fda8:	38800005 	stb	r2,0(r7)
             flags_rdy = (OS_FLAGS)0;
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
             break;
    }
    return (flags_rdy);
}
 400fdac:	1805883a 	mov	r2,r3
 400fdb0:	f800283a 	ret
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
        *perr = OS_ERR_EVENT_TYPE;
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 400fdb4:	00bfe004 	movi	r2,-128
 400fdb8:	3084703a 	and	r2,r6,r2
 400fdbc:	10803fcc 	andi	r2,r2,255
 400fdc0:	1000141e 	bne	r2,zero,400fe14 <OSFlagAccept+0x8c>
 400fdc4:	0017883a 	mov	r11,zero
        consume    = OS_TRUE;
    } else {
        consume    = OS_FALSE;
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 400fdc8:	38000005 	stb	zero,0(r7)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fdcc:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fdd0:	00bfff84 	movi	r2,-2
 400fdd4:	5084703a 	and	r2,r10,r2
 400fdd8:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (wait_type) {
 400fddc:	41803fcc 	andi	r6,r8,255
 400fde0:	02000044 	movi	r8,1
 400fde4:	32001e26 	beq	r6,r8,400fe60 <OSFlagAccept+0xd8>
 400fde8:	32001236 	bltu	r6,r8,400fe34 <OSFlagAccept+0xac>
 400fdec:	00800084 	movi	r2,2
 400fdf0:	30803426 	beq	r6,r2,400fec4 <OSFlagAccept+0x13c>
 400fdf4:	008000c4 	movi	r2,3
 400fdf8:	30802926 	beq	r6,r2,400fea0 <OSFlagAccept+0x118>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fdfc:	5001703a 	wrctl	status,r10
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 400fe00:	00801bc4 	movi	r2,111
 400fe04:	38800005 	stb	r2,0(r7)
 400fe08:	0007883a 	mov	r3,zero
             break;
    }
    return (flags_rdy);
}
 400fe0c:	1805883a 	mov	r2,r3
 400fe10:	f800283a 	ret
        *perr = OS_ERR_EVENT_TYPE;
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
        wait_type &= ~OS_FLAG_CONSUME;
 400fe14:	32001fcc 	andi	r8,r6,127
 400fe18:	02c00044 	movi	r11,1
 400fe1c:	003fea06 	br	400fdc8 <OSFlagAccept+0x40>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400fe20:	0007883a 	mov	r3,zero
 400fe24:	00801b84 	movi	r2,110
 400fe28:	38800005 	stb	r2,0(r7)
             flags_rdy = (OS_FLAGS)0;
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
             break;
    }
    return (flags_rdy);
}
 400fe2c:	1805883a 	mov	r2,r3
 400fe30:	f800283a 	ret
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400fe34:	2240020b 	ldhu	r9,8(r4)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400fe38:	28ffffcc 	andi	r3,r5,65535
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400fe3c:	0244303a 	nor	r2,zero,r9
 400fe40:	1144703a 	and	r2,r2,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400fe44:	11bfffcc 	andi	r6,r2,65535
 400fe48:	19802926 	beq	r3,r6,400fef0 <OSFlagAccept+0x168>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400fe4c:	00801c04 	movi	r2,112
 400fe50:	38800005 	stb	r2,0(r7)
 400fe54:	5001703a 	wrctl	status,r10
 400fe58:	3007883a 	mov	r3,r6
 400fe5c:	003fd306 	br	400fdac <OSFlagAccept+0x24>
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400fe60:	2240020b 	ldhu	r9,8(r4)
 400fe64:	0244303a 	nor	r2,zero,r9
 400fe68:	1146703a 	and	r3,r2,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400fe6c:	18bfffcc 	andi	r2,r3,65535
 400fe70:	10a0001c 	xori	r2,r2,32768
 400fe74:	10a00004 	addi	r2,r2,-32768
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400fe78:	1811883a 	mov	r8,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400fe7c:	10000526 	beq	r2,zero,400fe94 <OSFlagAccept+0x10c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400fe80:	58803fcc 	andi	r2,r11,255
 400fe84:	11801f26 	beq	r2,r6,400ff04 <OSFlagAccept+0x17c>
 400fe88:	5001703a 	wrctl	status,r10
 400fe8c:	40ffffcc 	andi	r3,r8,65535
 400fe90:	003fc606 	br	400fdac <OSFlagAccept+0x24>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400fe94:	00801c04 	movi	r2,112
 400fe98:	38800005 	stb	r2,0(r7)
 400fe9c:	003ffa06 	br	400fe88 <OSFlagAccept+0x100>
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400fea0:	2180020b 	ldhu	r6,8(r4)
 400fea4:	2986703a 	and	r3,r5,r6
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400fea8:	1a7fffcc 	andi	r9,r3,65535
 400feac:	48001826 	beq	r9,zero,400ff10 <OSFlagAccept+0x188>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400feb0:	58803fcc 	andi	r2,r11,255
 400feb4:	12001926 	beq	r2,r8,400ff1c <OSFlagAccept+0x194>
 400feb8:	5001703a 	wrctl	status,r10
 400febc:	4807883a 	mov	r3,r9
 400fec0:	003fba06 	br	400fdac <OSFlagAccept+0x24>
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400fec4:	2240020b 	ldhu	r9,8(r4)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400fec8:	28ffffcc 	andi	r3,r5,65535
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400fecc:	2a44703a 	and	r2,r5,r9
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400fed0:	11bfffcc 	andi	r6,r2,65535
 400fed4:	19bfdd1e 	bne	r3,r6,400fe4c <OSFlagAccept+0xc4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400fed8:	58803fcc 	andi	r2,r11,255
 400fedc:	123fdd1e 	bne	r2,r8,400fe54 <OSFlagAccept+0xcc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400fee0:	0144303a 	nor	r2,zero,r5
 400fee4:	1244703a 	and	r2,r2,r9
 400fee8:	2080020d 	sth	r2,8(r4)
 400feec:	003fd906 	br	400fe54 <OSFlagAccept+0xcc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400fef0:	58803fcc 	andi	r2,r11,255
 400fef4:	123fd71e 	bne	r2,r8,400fe54 <OSFlagAccept+0xcc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400fef8:	2a44b03a 	or	r2,r5,r9
 400fefc:	2080020d 	sth	r2,8(r4)
 400ff00:	003fd406 	br	400fe54 <OSFlagAccept+0xcc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400ff04:	1a44b03a 	or	r2,r3,r9
 400ff08:	2080020d 	sth	r2,8(r4)
 400ff0c:	003fde06 	br	400fe88 <OSFlagAccept+0x100>
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400ff10:	00801c04 	movi	r2,112
 400ff14:	38800005 	stb	r2,0(r7)
 400ff18:	003fe706 	br	400feb8 <OSFlagAccept+0x130>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400ff1c:	00c4303a 	nor	r2,zero,r3
 400ff20:	1184703a 	and	r2,r2,r6
 400ff24:	2080020d 	sth	r2,8(r4)
 400ff28:	003fe306 	br	400feb8 <OSFlagAccept+0x130>

0400ff2c <OSFlagCreate>:
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 400ff2c:	000d883a 	mov	r6,zero
 400ff30:	28001826 	beq	r5,zero,400ff94 <OSFlagCreate+0x68>
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 400ff34:	00810134 	movhi	r2,1028
 400ff38:	10a90404 	addi	r2,r2,-23536
 400ff3c:	10c00003 	ldbu	r3,0(r2)
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 400ff40:	000d883a 	mov	r6,zero
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 400ff44:	1800151e 	bne	r3,zero,400ff9c <OSFlagCreate+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ff48:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff4c:	00bfff84 	movi	r2,-2
 400ff50:	3884703a 	and	r2,r7,r2
 400ff54:	1001703a 	wrctl	status,r2
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
        return ((OS_FLAG_GRP *)0);
    }
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 400ff58:	00c10134 	movhi	r3,1028
 400ff5c:	18e90704 	addi	r3,r3,-23524
 400ff60:	19800017 	ldw	r6,0(r3)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 400ff64:	30001126 	beq	r6,zero,400ffac <OSFlagCreate+0x80>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 400ff68:	30800117 	ldw	r2,4(r6)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 400ff6c:	3100020d 	sth	r4,8(r6)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 400ff70:	30000115 	stw	zero,4(r6)
    }
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 400ff74:	18800015 	stw	r2,0(r3)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 400ff78:	00c00144 	movi	r3,5
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 400ff7c:	00800fc4 	movi	r2,63
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 400ff80:	30c00005 	stb	r3,0(r6)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 400ff84:	30800285 	stb	r2,10(r6)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400ff88:	300002c5 	stb	zero,11(r6)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ff8c:	3801703a 	wrctl	status,r7
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 400ff90:	28000005 	stb	zero,0(r5)
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
}
 400ff94:	3005883a 	mov	r2,r6
 400ff98:	f800283a 	ret
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 400ff9c:	00800404 	movi	r2,16
 400ffa0:	28800005 	stb	r2,0(r5)
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
}
 400ffa4:	3005883a 	mov	r2,r6
 400ffa8:	f800283a 	ret
 400ffac:	3801703a 	wrctl	status,r7
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 400ffb0:	00801c84 	movi	r2,114
 400ffb4:	28800005 	stb	r2,0(r5)
 400ffb8:	003ff606 	br	400ff94 <OSFlagCreate+0x68>

0400ffbc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 400ffbc:	defffb04 	addi	sp,sp,-20
 400ffc0:	dc000115 	stw	r16,4(sp)
 400ffc4:	dfc00415 	stw	ra,16(sp)
 400ffc8:	dc800315 	stw	r18,12(sp)
 400ffcc:	dc400215 	stw	r17,8(sp)
 400ffd0:	2021883a 	mov	r16,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400ffd4:	30000a26 	beq	r6,zero,4010000 <OSFlagDel+0x44>
        return (pgrp);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400ffd8:	20002d26 	beq	r4,zero,4010090 <OSFlagDel+0xd4>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400ffdc:	00810134 	movhi	r2,1028
 400ffe0:	10a90404 	addi	r2,r2,-23536
 400ffe4:	10c00003 	ldbu	r3,0(r2)
 400ffe8:	18000c1e 	bne	r3,zero,401001c <OSFlagDel+0x60>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
        return (pgrp);
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 400ffec:	20c00003 	ldbu	r3,0(r4)
 400fff0:	00800144 	movi	r2,5
 400fff4:	18801226 	beq	r3,r2,4010040 <OSFlagDel+0x84>
        *perr = OS_ERR_EVENT_TYPE;
 400fff8:	00800044 	movi	r2,1
 400fffc:	30800005 	stb	r2,0(r6)
             *perr                = OS_ERR_INVALID_OPT;
             pgrp_return          = pgrp;
             break;
    }
    return (pgrp_return);
}
 4010000:	8005883a 	mov	r2,r16
 4010004:	dfc00417 	ldw	ra,16(sp)
 4010008:	dc800317 	ldw	r18,12(sp)
 401000c:	dc400217 	ldw	r17,8(sp)
 4010010:	dc000117 	ldw	r16,4(sp)
 4010014:	dec00504 	addi	sp,sp,20
 4010018:	f800283a 	ret
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 401001c:	008003c4 	movi	r2,15
 4010020:	30800005 	stb	r2,0(r6)
             *perr                = OS_ERR_INVALID_OPT;
             pgrp_return          = pgrp;
             break;
    }
    return (pgrp_return);
}
 4010024:	8005883a 	mov	r2,r16
 4010028:	dfc00417 	ldw	ra,16(sp)
 401002c:	dc800317 	ldw	r18,12(sp)
 4010030:	dc400217 	ldw	r17,8(sp)
 4010034:	dc000117 	ldw	r16,4(sp)
 4010038:	dec00504 	addi	sp,sp,20
 401003c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010040:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010044:	00bfff84 	movi	r2,-2
 4010048:	9084703a 	and	r2,r18,r2
 401004c:	1001703a 	wrctl	status,r2
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (pgrp);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 4010050:	20c00117 	ldw	r3,4(r4)
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 4010054:	29403fcc 	andi	r5,r5,255
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (pgrp);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 4010058:	1804c03a 	cmpne	r2,r3,zero
 401005c:	100f883a 	mov	r7,r2
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 4010060:	2800051e 	bne	r5,zero,4010078 <OSFlagDel+0xbc>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 4010064:	10002826 	beq	r2,zero,4010108 <OSFlagDel+0x14c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010068:	9001703a 	wrctl	status,r18
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 401006c:	00801244 	movi	r2,73
 4010070:	30800005 	stb	r2,0(r6)
 4010074:	003fe206 	br	4010000 <OSFlagDel+0x44>
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 4010078:	00800044 	movi	r2,1
 401007c:	28800726 	beq	r5,r2,401009c <OSFlagDel+0xe0>
 4010080:	9001703a 	wrctl	status,r18
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
             break;

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 4010084:	008001c4 	movi	r2,7
 4010088:	30800005 	stb	r2,0(r6)
 401008c:	003fdc06 	br	4010000 <OSFlagDel+0x44>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return (pgrp);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010090:	00801b84 	movi	r2,110
 4010094:	30800005 	stb	r2,0(r6)
 4010098:	003fd906 	br	4010000 <OSFlagDel+0x44>
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 401009c:	38002826 	beq	r7,zero,4010140 <OSFlagDel+0x184>
                 pgrp_return          = pgrp;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40100a0:	1823883a 	mov	r17,r3
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 40100a4:	8809883a 	mov	r4,r17
 40100a8:	000b883a 	mov	r5,zero
 40100ac:	d9800015 	stw	r6,0(sp)
 40100b0:	400fc200 	call	400fc20 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 40100b4:	88c00017 	ldw	r3,0(r17)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 40100b8:	d9800017 	ldw	r6,0(sp)
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 40100bc:	1823883a 	mov	r17,r3
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 40100c0:	183ff81e 	bne	r3,zero,40100a4 <OSFlagDel+0xe8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 40100c4:	00800fc4 	movi	r2,63
 40100c8:	80800285 	stb	r2,10(r16)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 40100cc:	800002c5 	stb	zero,11(r16)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40100d0:	80000005 	stb	zero,0(r16)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 40100d4:	00810134 	movhi	r2,1028
 40100d8:	10a90704 	addi	r2,r2,-23524
 40100dc:	10c00017 	ldw	r3,0(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 40100e0:	8000020d 	sth	zero,8(r16)
             OSFlagFreeList       = pgrp;
 40100e4:	14000015 	stw	r16,0(r2)
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 40100e8:	80c00115 	stw	r3,4(r16)
 40100ec:	9001703a 	wrctl	status,r18
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
             OSFlagFreeList       = pgrp;
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
                 OS_Sched();                               /* Find highest priority task ready to run  */
 40100f0:	d9800015 	stw	r6,0(sp)
 40100f4:	400ece40 	call	400ece4 <OS_Sched>
 40100f8:	d9800017 	ldw	r6,0(sp)
             }
             *perr = OS_ERR_NONE;
 40100fc:	0021883a 	mov	r16,zero
 4010100:	30000005 	stb	zero,0(r6)
 4010104:	003fbe06 	br	4010000 <OSFlagDel+0x44>
    }
    switch (opt) {
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 4010108:	00800fc4 	movi	r2,63
 401010c:	20800285 	stb	r2,10(r4)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4010110:	200002c5 	stb	zero,11(r4)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4010114:	20000005 	stb	zero,0(r4)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 4010118:	00810134 	movhi	r2,1028
 401011c:	10a90704 	addi	r2,r2,-23524
 4010120:	10c00017 	ldw	r3,0(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4010124:	2000020d 	sth	zero,8(r4)
                 OSFlagFreeList       = pgrp;
 4010128:	11000015 	stw	r4,0(r2)
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 401012c:	20c00115 	stw	r3,4(r4)
 4010130:	9001703a 	wrctl	status,r18
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
                 OSFlagFreeList       = pgrp;
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 4010134:	0021883a 	mov	r16,zero
 4010138:	30000005 	stb	zero,0(r6)
 401013c:	003fb006 	br	4010000 <OSFlagDel+0x44>
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 4010140:	00800fc4 	movi	r2,63
 4010144:	20800285 	stb	r2,10(r4)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4010148:	200002c5 	stb	zero,11(r4)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 401014c:	20000005 	stb	zero,0(r4)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4010150:	00810134 	movhi	r2,1028
 4010154:	10a90704 	addi	r2,r2,-23524
 4010158:	10c00017 	ldw	r3,0(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 401015c:	2000020d 	sth	zero,8(r4)
             OSFlagFreeList       = pgrp;
 4010160:	11000015 	stw	r4,0(r2)
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4010164:	20c00115 	stw	r3,4(r4)
 4010168:	9001703a 	wrctl	status,r18
 401016c:	003fe306 	br	40100fc <OSFlagDel+0x140>

04010170 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4010170:	defffd04 	addi	sp,sp,-12
 4010174:	dc000015 	stw	r16,0(sp)
 4010178:	3021883a 	mov	r16,r6
 401017c:	dfc00215 	stw	ra,8(sp)
 4010180:	dc400115 	stw	r17,4(sp)
 4010184:	200d883a 	mov	r6,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010188:	80003226 	beq	r16,zero,4010254 <OSFlagNameGet+0xe4>
        return (0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 401018c:	20001f26 	beq	r4,zero,401020c <OSFlagNameGet+0x9c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010190:	28002726 	beq	r5,zero,4010230 <OSFlagNameGet+0xc0>
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010194:	00810134 	movhi	r2,1028
 4010198:	10a90404 	addi	r2,r2,-23536
 401019c:	10c00003 	ldbu	r3,0(r2)
 40101a0:	18000926 	beq	r3,zero,40101c8 <OSFlagNameGet+0x58>
        *perr = OS_ERR_NAME_GET_ISR;
 40101a4:	00800444 	movi	r2,17
 40101a8:	0007883a 	mov	r3,zero
 40101ac:	80800005 	stb	r2,0(r16)
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 40101b0:	1805883a 	mov	r2,r3
 40101b4:	dfc00217 	ldw	ra,8(sp)
 40101b8:	dc400117 	ldw	r17,4(sp)
 40101bc:	dc000017 	ldw	r16,0(sp)
 40101c0:	dec00304 	addi	sp,sp,12
 40101c4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40101c8:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40101cc:	00bfff84 	movi	r2,-2
 40101d0:	8884703a 	and	r2,r17,r2
 40101d4:	1001703a 	wrctl	status,r2
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 40101d8:	20c00003 	ldbu	r3,0(r4)
 40101dc:	00800144 	movi	r2,5
 40101e0:	18802326 	beq	r3,r2,4010270 <OSFlagNameGet+0x100>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40101e4:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 40101e8:	0007883a 	mov	r3,zero
 40101ec:	00800044 	movi	r2,1
 40101f0:	80800005 	stb	r2,0(r16)
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 40101f4:	1805883a 	mov	r2,r3
 40101f8:	dfc00217 	ldw	ra,8(sp)
 40101fc:	dc400117 	ldw	r17,4(sp)
 4010200:	dc000017 	ldw	r16,0(sp)
 4010204:	dec00304 	addi	sp,sp,12
 4010208:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return (0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401020c:	0007883a 	mov	r3,zero
 4010210:	00801b84 	movi	r2,110
 4010214:	80800005 	stb	r2,0(r16)
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4010218:	1805883a 	mov	r2,r3
 401021c:	dfc00217 	ldw	ra,8(sp)
 4010220:	dc400117 	ldw	r17,4(sp)
 4010224:	dc000017 	ldw	r16,0(sp)
 4010228:	dec00304 	addi	sp,sp,12
 401022c:	f800283a 	ret
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 4010230:	0007883a 	mov	r3,zero
 4010234:	00800304 	movi	r2,12
 4010238:	80800005 	stb	r2,0(r16)
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 401023c:	1805883a 	mov	r2,r3
 4010240:	dfc00217 	ldw	ra,8(sp)
 4010244:	dc400117 	ldw	r17,4(sp)
 4010248:	dc000017 	ldw	r16,0(sp)
 401024c:	dec00304 	addi	sp,sp,12
 4010250:	f800283a 	ret
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010254:	0007883a 	mov	r3,zero
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4010258:	1805883a 	mov	r2,r3
 401025c:	dfc00217 	ldw	ra,8(sp)
 4010260:	dc400117 	ldw	r17,4(sp)
 4010264:	dc000017 	ldw	r16,0(sp)
 4010268:	dec00304 	addi	sp,sp,12
 401026c:	f800283a 	ret
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return (0);
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 4010270:	2809883a 	mov	r4,r5
 4010274:	31400284 	addi	r5,r6,10
 4010278:	400ebf80 	call	400ebf8 <OS_StrCopy>
 401027c:	8801703a 	wrctl	status,r17
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
 4010280:	10c03fcc 	andi	r3,r2,255
        *perr = OS_ERR_EVENT_TYPE;
        return (0);
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010284:	80000005 	stb	zero,0(r16)
 4010288:	003fc906 	br	40101b0 <OSFlagNameGet+0x40>

0401028c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 401028c:	defffb04 	addi	sp,sp,-20
 4010290:	dc800215 	stw	r18,8(sp)
 4010294:	dc400115 	stw	r17,4(sp)
 4010298:	dc000015 	stw	r16,0(sp)
 401029c:	dfc00415 	stw	ra,16(sp)
 40102a0:	dcc00315 	stw	r19,12(sp)
 40102a4:	3021883a 	mov	r16,r6
 40102a8:	2023883a 	mov	r17,r4
 40102ac:	2825883a 	mov	r18,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40102b0:	30000826 	beq	r6,zero,40102d4 <OSFlagNameSet+0x48>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 40102b4:	20001f26 	beq	r4,zero,4010334 <OSFlagNameSet+0xa8>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return;
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40102b8:	28002726 	beq	r5,zero,4010358 <OSFlagNameSet+0xcc>
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40102bc:	00810134 	movhi	r2,1028
 40102c0:	10a90404 	addi	r2,r2,-23536
 40102c4:	10c00003 	ldbu	r3,0(r2)
 40102c8:	18000926 	beq	r3,zero,40102f0 <OSFlagNameSet+0x64>
        *perr = OS_ERR_NAME_SET_ISR;
 40102cc:	00800484 	movi	r2,18
 40102d0:	30800005 	stb	r2,0(r6)
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 40102d4:	dfc00417 	ldw	ra,16(sp)
 40102d8:	dcc00317 	ldw	r19,12(sp)
 40102dc:	dc800217 	ldw	r18,8(sp)
 40102e0:	dc400117 	ldw	r17,4(sp)
 40102e4:	dc000017 	ldw	r16,0(sp)
 40102e8:	dec00504 	addi	sp,sp,20
 40102ec:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40102f0:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40102f4:	00bfff84 	movi	r2,-2
 40102f8:	9884703a 	and	r2,r19,r2
 40102fc:	1001703a 	wrctl	status,r2
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4010300:	20c00003 	ldbu	r3,0(r4)
 4010304:	00800144 	movi	r2,5
 4010308:	18801c26 	beq	r3,r2,401037c <OSFlagNameSet+0xf0>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401030c:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4010310:	00800044 	movi	r2,1
 4010314:	30800005 	stb	r2,0(r6)
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 4010318:	dfc00417 	ldw	ra,16(sp)
 401031c:	dcc00317 	ldw	r19,12(sp)
 4010320:	dc800217 	ldw	r18,8(sp)
 4010324:	dc400117 	ldw	r17,4(sp)
 4010328:	dc000017 	ldw	r16,0(sp)
 401032c:	dec00504 	addi	sp,sp,20
 4010330:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010334:	00801b84 	movi	r2,110
 4010338:	30800005 	stb	r2,0(r6)
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 401033c:	dfc00417 	ldw	ra,16(sp)
 4010340:	dcc00317 	ldw	r19,12(sp)
 4010344:	dc800217 	ldw	r18,8(sp)
 4010348:	dc400117 	ldw	r17,4(sp)
 401034c:	dc000017 	ldw	r16,0(sp)
 4010350:	dec00504 	addi	sp,sp,20
 4010354:	f800283a 	ret
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return;
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 4010358:	00800304 	movi	r2,12
 401035c:	30800005 	stb	r2,0(r6)
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 4010360:	dfc00417 	ldw	ra,16(sp)
 4010364:	dcc00317 	ldw	r19,12(sp)
 4010368:	dc800217 	ldw	r18,8(sp)
 401036c:	dc400117 	ldw	r17,4(sp)
 4010370:	dc000017 	ldw	r16,0(sp)
 4010374:	dec00504 	addi	sp,sp,20
 4010378:	f800283a 	ret
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 401037c:	2809883a 	mov	r4,r5
 4010380:	400ec2c0 	call	400ec2c <OS_StrLen>
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 4010384:	10803fcc 	andi	r2,r2,255
 4010388:	00c007c4 	movi	r3,31
 401038c:	18800636 	bltu	r3,r2,40103a8 <OSFlagNameSet+0x11c>
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
        return;
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4010390:	89000284 	addi	r4,r17,10
 4010394:	900b883a 	mov	r5,r18
 4010398:	400ebf80 	call	400ebf8 <OS_StrCopy>
 401039c:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40103a0:	80000005 	stb	zero,0(r16)
 40103a4:	003fcb06 	br	40102d4 <OSFlagNameSet+0x48>
 40103a8:	9801703a 	wrctl	status,r19
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 40103ac:	00801cc4 	movi	r2,115
 40103b0:	80800005 	stb	r2,0(r16)
 40103b4:	003fc706 	br	40102d4 <OSFlagNameSet+0x48>

040103b8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 40103b8:	defff204 	addi	sp,sp,-56
 40103bc:	dc400715 	stw	r17,28(sp)
 40103c0:	dc400e17 	ldw	r17,56(sp)
 40103c4:	dc000615 	stw	r16,24(sp)
 40103c8:	dfc00d15 	stw	ra,52(sp)
 40103cc:	2021883a 	mov	r16,r4
 40103d0:	dd800c15 	stw	r22,48(sp)
 40103d4:	3809883a 	mov	r4,r7
 40103d8:	dd400b15 	stw	r21,44(sp)
 40103dc:	dd000a15 	stw	r20,40(sp)
 40103e0:	dcc00915 	stw	r19,36(sp)
 40103e4:	dc800815 	stw	r18,32(sp)
 40103e8:	300f883a 	mov	r7,r6
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40103ec:	88002626 	beq	r17,zero,4010488 <OSFlagPend+0xd0>
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 40103f0:	80002126 	beq	r16,zero,4010478 <OSFlagPend+0xc0>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40103f4:	00810134 	movhi	r2,1028
 40103f8:	10a90404 	addi	r2,r2,-23536
 40103fc:	10c00003 	ldbu	r3,0(r2)
 4010400:	18000e26 	beq	r3,zero,401043c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 4010404:	00800084 	movi	r2,2
 4010408:	0007883a 	mov	r3,zero
 401040c:	88800005 	stb	r2,0(r17)
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    return (flags_rdy);
}
 4010410:	1805883a 	mov	r2,r3
 4010414:	dfc00d17 	ldw	ra,52(sp)
 4010418:	dd800c17 	ldw	r22,48(sp)
 401041c:	dd400b17 	ldw	r21,44(sp)
 4010420:	dd000a17 	ldw	r20,40(sp)
 4010424:	dcc00917 	ldw	r19,36(sp)
 4010428:	dc800817 	ldw	r18,32(sp)
 401042c:	dc400717 	ldw	r17,28(sp)
 4010430:	dc000617 	ldw	r16,24(sp)
 4010434:	dec00e04 	addi	sp,sp,56
 4010438:	f800283a 	ret
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
        return ((OS_FLAGS)0);
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 401043c:	00810134 	movhi	r2,1028
 4010440:	10a8f604 	addi	r2,r2,-23592
 4010444:	10c00003 	ldbu	r3,0(r2)
 4010448:	1800071e 	bne	r3,zero,4010468 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
        return ((OS_FLAGS)0);
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 401044c:	80c00003 	ldbu	r3,0(r16)
 4010450:	00800144 	movi	r2,5
 4010454:	18800e26 	beq	r3,r2,4010490 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 4010458:	00800044 	movi	r2,1
 401045c:	0007883a 	mov	r3,zero
 4010460:	88800005 	stb	r2,0(r17)
 4010464:	003fea06 	br	4010410 <OSFlagPend+0x58>
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
        return ((OS_FLAGS)0);
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 4010468:	00800344 	movi	r2,13
 401046c:	0007883a 	mov	r3,zero
 4010470:	88800005 	stb	r2,0(r17)
 4010474:	003fe606 	br	4010410 <OSFlagPend+0x58>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010478:	00801b84 	movi	r2,110
 401047c:	0007883a 	mov	r3,zero
 4010480:	88800005 	stb	r2,0(r17)
 4010484:	003fe206 	br	4010410 <OSFlagPend+0x58>
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4010488:	0007883a 	mov	r3,zero
 401048c:	003fe006 	br	4010410 <OSFlagPend+0x58>
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
        *perr = OS_ERR_EVENT_TYPE;
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4010490:	00bfe004 	movi	r2,-128
 4010494:	3084703a 	and	r2,r6,r2
 4010498:	10803fcc 	andi	r2,r2,255
 401049c:	1000121e 	bne	r2,zero,40104e8 <OSFlagPend+0x130>
 40104a0:	002d883a 	mov	r22,zero
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40104a4:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40104a8:	00bfff84 	movi	r2,-2
 40104ac:	9884703a 	and	r2,r19,r2
 40104b0:	1001703a 	wrctl	status,r2
    } else {
        consume    = OS_FALSE;
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (wait_type) {
 40104b4:	3c803fcc 	andi	r18,r7,255
 40104b8:	00c00044 	movi	r3,1
 40104bc:	90c01d26 	beq	r18,r3,4010534 <OSFlagPend+0x17c>
 40104c0:	90c00c36 	bltu	r18,r3,40104f4 <OSFlagPend+0x13c>
 40104c4:	00800084 	movi	r2,2
 40104c8:	90804f26 	beq	r18,r2,4010608 <OSFlagPend+0x250>
 40104cc:	008000c4 	movi	r2,3
 40104d0:	90806426 	beq	r18,r2,4010664 <OSFlagPend+0x2ac>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40104d4:	9801703a 	wrctl	status,r19
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 40104d8:	00801bc4 	movi	r2,111
 40104dc:	0007883a 	mov	r3,zero
 40104e0:	88800005 	stb	r2,0(r17)
 40104e4:	003fca06 	br	4010410 <OSFlagPend+0x58>
        *perr = OS_ERR_EVENT_TYPE;
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 40104e8:	31c01fcc 	andi	r7,r6,127
 40104ec:	05800044 	movi	r22,1
 40104f0:	003fec06 	br	40104a4 <OSFlagPend+0xec>
             }
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 40104f4:	81c0020b 	ldhu	r7,8(r16)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40104f8:	29bfffcc 	andi	r6,r5,65535
 40104fc:	01c4303a 	nor	r2,zero,r7
 4010500:	1144703a 	and	r2,r2,r5
 4010504:	10bfffcc 	andi	r2,r2,65535
 4010508:	30801c1e 	bne	r6,r2,401057c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401050c:	b0803fcc 	andi	r2,r22,255
 4010510:	10c06926 	beq	r2,r3,40106b8 <OSFlagPend+0x300>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4010514:	00810134 	movhi	r2,1028
 4010518:	10a90504 	addi	r2,r2,-23532
 401051c:	10c00017 	ldw	r3,0(r2)
 4010520:	19400b0d 	sth	r5,44(r3)
 4010524:	9801703a 	wrctl	status,r19
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
 4010528:	3007883a 	mov	r3,r6
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 401052c:	88000005 	stb	zero,0(r17)
 4010530:	003fb706 	br	4010410 <OSFlagPend+0x58>
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4010534:	80c0020b 	ldhu	r3,8(r16)
 4010538:	00c4303a 	nor	r2,zero,r3
 401053c:	114e703a 	and	r7,r2,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4010540:	38bfffcc 	andi	r2,r7,65535
 4010544:	10a0001c 	xori	r2,r2,32768
 4010548:	10a00004 	addi	r2,r2,-32768
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 401054c:	380d883a 	mov	r6,r7
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4010550:	10002a26 	beq	r2,zero,40105fc <OSFlagPend+0x244>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010554:	b0803fcc 	andi	r2,r22,255
 4010558:	14805426 	beq	r2,r18,40106ac <OSFlagPend+0x2f4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 401055c:	00810134 	movhi	r2,1028
 4010560:	10a90504 	addi	r2,r2,-23532
 4010564:	10c00017 	ldw	r3,0(r2)
 4010568:	19c00b0d 	sth	r7,44(r3)
 401056c:	9801703a 	wrctl	status,r19
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
 4010570:	30ffffcc 	andi	r3,r6,65535
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4010574:	88000005 	stb	zero,0(r17)
 4010578:	003fa506 	br	4010410 <OSFlagPend+0x58>
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 401057c:	20bfffcc 	andi	r2,r4,65535
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4010580:	8009883a 	mov	r4,r16
 4010584:	d9400104 	addi	r5,sp,4
 4010588:	900f883a 	mov	r7,r18
 401058c:	d8800015 	stw	r2,0(sp)
 4010590:	400fb2c0 	call	400fb2c <OS_FlagBlock>
 4010594:	9801703a 	wrctl	status,r19
             flags_rdy = (OS_FLAGS)0;
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
             return (flags_rdy);
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 4010598:	400ece40 	call	400ece4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401059c:	002b303a 	rdctl	r21,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40105a0:	00bfff84 	movi	r2,-2
 40105a4:	a884703a 	and	r2,r21,r2
 40105a8:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 40105ac:	05010134 	movhi	r20,1028
 40105b0:	a5290504 	addi	r20,r20,-23532
 40105b4:	a0800017 	ldw	r2,0(r20)
 40105b8:	14c00c43 	ldbu	r19,49(r2)
 40105bc:	98001d1e 	bne	r19,zero,4010634 <OSFlagPend+0x27c>
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
                 break;
        }
        return (flags_rdy);
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 40105c0:	11800b0b 	ldhu	r6,44(r2)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 40105c4:	b0c03fcc 	andi	r3,r22,255
 40105c8:	00800044 	movi	r2,1
 40105cc:	1880071e 	bne	r3,r2,40105ec <OSFlagPend+0x234>
        switch (wait_type) {
 40105d0:	1c80322e 	bgeu	r3,r18,401069c <OSFlagPend+0x2e4>
 40105d4:	008000c4 	movi	r2,3
 40105d8:	14803e36 	bltu	r2,r18,40106d4 <OSFlagPend+0x31c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 40105dc:	80c0020b 	ldhu	r3,8(r16)
 40105e0:	0184303a 	nor	r2,zero,r6
 40105e4:	10c4703a 	and	r2,r2,r3
 40105e8:	8080020d 	sth	r2,8(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40105ec:	a801703a 	wrctl	status,r21
                 return ((OS_FLAGS)0);
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    return (flags_rdy);
 40105f0:	30ffffcc 	andi	r3,r6,65535
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 40105f4:	88000005 	stb	zero,0(r17)
 40105f8:	003f8506 	br	4010410 <OSFlagPend+0x58>
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 40105fc:	20bfffcc 	andi	r2,r4,65535
 4010600:	29bfffcc 	andi	r6,r5,65535
 4010604:	003fde06 	br	4010580 <OSFlagPend+0x1c8>
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 4010608:	81c0020b 	ldhu	r7,8(r16)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 401060c:	29bfffcc 	andi	r6,r5,65535
 4010610:	29c4703a 	and	r2,r5,r7
 4010614:	10bfffcc 	andi	r2,r2,65535
 4010618:	30bfd81e 	bne	r6,r2,401057c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 401061c:	b0803fcc 	andi	r2,r22,255
 4010620:	10ffbc1e 	bne	r2,r3,4010514 <OSFlagPend+0x15c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4010624:	0144303a 	nor	r2,zero,r5
 4010628:	11c4703a 	and	r2,r2,r7
 401062c:	8080020d 	sth	r2,8(r16)
 4010630:	003fb806 	br	4010514 <OSFlagPend+0x15c>
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    OS_ENTER_CRITICAL();
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
        pend_stat                = OSTCBCur->OSTCBStatPend;
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4010634:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4010638:	d9000104 	addi	r4,sp,4
 401063c:	400fbe00 	call	400fbe0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4010640:	a0800017 	ldw	r2,0(r20)
 4010644:	10000c05 	stb	zero,48(r2)
 4010648:	a801703a 	wrctl	status,r21
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
        switch (pend_stat) {
 401064c:	00800084 	movi	r2,2
 4010650:	98801c26 	beq	r19,r2,40106c4 <OSFlagPend+0x30c>
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
                 break;

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4010654:	00800284 	movi	r2,10
 4010658:	0007883a 	mov	r3,zero
 401065c:	88800005 	stb	r2,0(r17)
 4010660:	003f6b06 	br	4010410 <OSFlagPend+0x58>
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4010664:	81c0020b 	ldhu	r7,8(r16)
 4010668:	29cc703a 	and	r6,r5,r7
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 401066c:	323fffcc 	andi	r8,r6,65535
 4010670:	403fe226 	beq	r8,zero,40105fc <OSFlagPend+0x244>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010674:	b0803fcc 	andi	r2,r22,255
 4010678:	10c01b26 	beq	r2,r3,40106e8 <OSFlagPend+0x330>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 401067c:	00810134 	movhi	r2,1028
 4010680:	10a90504 	addi	r2,r2,-23532
 4010684:	10c00017 	ldw	r3,0(r2)
 4010688:	19800b0d 	sth	r6,44(r3)
 401068c:	9801703a 	wrctl	status,r19
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
 4010690:	4007883a 	mov	r3,r8
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4010694:	88000005 	stb	zero,0(r17)
 4010698:	003f5d06 	br	4010410 <OSFlagPend+0x58>
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 401069c:	8080020b 	ldhu	r2,8(r16)
 40106a0:	1184b03a 	or	r2,r2,r6
 40106a4:	8080020d 	sth	r2,8(r16)
 40106a8:	003fd006 	br	40105ec <OSFlagPend+0x234>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 40106ac:	38c4b03a 	or	r2,r7,r3
 40106b0:	8080020d 	sth	r2,8(r16)
 40106b4:	003fa906 	br	401055c <OSFlagPend+0x1a4>
#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 40106b8:	29c4b03a 	or	r2,r5,r7
 40106bc:	8080020d 	sth	r2,8(r16)
 40106c0:	003f9406 	br	4010514 <OSFlagPend+0x15c>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
        switch (pend_stat) {
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 40106c4:	00800384 	movi	r2,14
 40106c8:	0007883a 	mov	r3,zero
 40106cc:	88800005 	stb	r2,0(r17)
 40106d0:	003f4f06 	br	4010410 <OSFlagPend+0x58>
 40106d4:	a801703a 	wrctl	status,r21
                 pgrp->OSFlagFlags |=  flags_rdy;
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 40106d8:	00801bc4 	movi	r2,111
 40106dc:	0007883a 	mov	r3,zero
 40106e0:	88800005 	stb	r2,0(r17)
 40106e4:	003f4a06 	br	4010410 <OSFlagPend+0x58>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 40106e8:	0184303a 	nor	r2,zero,r6
 40106ec:	11c4703a 	and	r2,r2,r7
 40106f0:	8080020d 	sth	r2,8(r16)
 40106f4:	003fe106 	br	401067c <OSFlagPend+0x2c4>

040106f8 <OSFlagPendGetFlagsRdy>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40106f8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40106fc:	00bfff84 	movi	r2,-2
 4010700:	2884703a 	and	r2,r5,r2
 4010704:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    flags = OSTCBCur->OSTCBFlagsRdy;
 4010708:	00c10134 	movhi	r3,1028
 401070c:	18e90504 	addi	r3,r3,-23532
 4010710:	19000017 	ldw	r4,0(r3)
 4010714:	20800b0b 	ldhu	r2,44(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010718:	2801703a 	wrctl	status,r5
    OS_EXIT_CRITICAL();
    return (flags);
}
 401071c:	10bfffcc 	andi	r2,r2,65535
 4010720:	f800283a 	ret

04010724 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 4010724:	defff804 	addi	sp,sp,-32
 4010728:	dcc00315 	stw	r19,12(sp)
 401072c:	dc400115 	stw	r17,4(sp)
 4010730:	dfc00715 	stw	ra,28(sp)
 4010734:	dd800615 	stw	r22,24(sp)
 4010738:	dd400515 	stw	r21,20(sp)
 401073c:	dd000415 	stw	r20,16(sp)
 4010740:	dc800215 	stw	r18,8(sp)
 4010744:	dc000015 	stw	r16,0(sp)
 4010748:	3827883a 	mov	r19,r7
 401074c:	2023883a 	mov	r17,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4010750:	38002326 	beq	r7,zero,40107e0 <OSFlagPost+0xbc>
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 4010754:	20001126 	beq	r4,zero,401079c <OSFlagPost+0x78>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 4010758:	20c00003 	ldbu	r3,0(r4)
 401075c:	00800144 	movi	r2,5
 4010760:	18801226 	beq	r3,r2,40107ac <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 4010764:	00800044 	movi	r2,1
 4010768:	0007883a 	mov	r3,zero
 401076c:	38800005 	stb	r2,0(r7)
    OS_ENTER_CRITICAL();
    flags_cur = pgrp->OSFlagFlags;
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    return (flags_cur);
}
 4010770:	1805883a 	mov	r2,r3
 4010774:	dfc00717 	ldw	ra,28(sp)
 4010778:	dd800617 	ldw	r22,24(sp)
 401077c:	dd400517 	ldw	r21,20(sp)
 4010780:	dd000417 	ldw	r20,16(sp)
 4010784:	dcc00317 	ldw	r19,12(sp)
 4010788:	dc800217 	ldw	r18,8(sp)
 401078c:	dc400117 	ldw	r17,4(sp)
 4010790:	dc000017 	ldw	r16,0(sp)
 4010794:	dec00804 	addi	sp,sp,32
 4010798:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return ((OS_FLAGS)0);
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 401079c:	00801b84 	movi	r2,110
 40107a0:	0007883a 	mov	r3,zero
 40107a4:	38800005 	stb	r2,0(r7)
 40107a8:	003ff106 	br	4010770 <OSFlagPost+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40107ac:	002b303a 	rdctl	r21,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40107b0:	00bfff84 	movi	r2,-2
 40107b4:	a884703a 	and	r2,r21,r2
 40107b8:	1001703a 	wrctl	status,r2
        *perr = OS_ERR_EVENT_TYPE;
        return ((OS_FLAGS)0);
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (opt) {
 40107bc:	31803fcc 	andi	r6,r6,255
 40107c0:	30000926 	beq	r6,zero,40107e8 <OSFlagPost+0xc4>
 40107c4:	00800044 	movi	r2,1
 40107c8:	30803626 	beq	r6,r2,40108a4 <OSFlagPost+0x180>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40107cc:	a801703a 	wrctl	status,r21
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
             break;

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 40107d0:	00801c44 	movi	r2,113
 40107d4:	0007883a 	mov	r3,zero
 40107d8:	38800005 	stb	r2,0(r7)
 40107dc:	003fe406 	br	4010770 <OSFlagPost+0x4c>
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 40107e0:	0007883a 	mov	r3,zero
 40107e4:	003fe206 	br	4010770 <OSFlagPost+0x4c>
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (opt) {
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 40107e8:	2180020b 	ldhu	r6,8(r4)
 40107ec:	0144303a 	nor	r2,zero,r5
 40107f0:	1184703a 	and	r2,r2,r6
 40107f4:	100d883a 	mov	r6,r2
 40107f8:	2080020d 	sth	r2,8(r4)
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40107fc:	89000117 	ldw	r4,4(r17)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4010800:	20004b26 	beq	r4,zero,4010930 <OSFlagPost+0x20c>
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4010804:	2025883a 	mov	r18,r4
 4010808:	002d883a 	mov	r22,zero
 401080c:	05000044 	movi	r20,1
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
 4010810:	94000483 	ldbu	r16,18(r18)
 4010814:	85001426 	beq	r16,r20,4010868 <OSFlagPost+0x144>
 4010818:	85000936 	bltu	r16,r20,4010840 <OSFlagPost+0x11c>
 401081c:	00800084 	movi	r2,2
 4010820:	80802526 	beq	r16,r2,40108b8 <OSFlagPost+0x194>
 4010824:	008000c4 	movi	r2,3
 4010828:	80802e26 	beq	r16,r2,40108e4 <OSFlagPost+0x1c0>
 401082c:	a801703a 	wrctl	status,r21
                 }
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4010830:	00801bc4 	movi	r2,111
 4010834:	0007883a 	mov	r3,zero
 4010838:	98800005 	stb	r2,0(r19)
 401083c:	003fcc06 	br	4010770 <OSFlagPost+0x4c>
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4010840:	8980020b 	ldhu	r6,8(r17)
                 }
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4010844:	9140040b 	ldhu	r5,16(r18)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4010848:	0184303a 	nor	r2,zero,r6
 401084c:	1144703a 	and	r2,r2,r5
 4010850:	10bfffcc 	andi	r2,r2,65535
 4010854:	28801d26 	beq	r5,r2,40108cc <OSFlagPost+0x1a8>
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 4010858:	91000017 	ldw	r4,0(r18)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 401085c:	20002726 	beq	r4,zero,40108fc <OSFlagPost+0x1d8>
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 4010860:	2025883a 	mov	r18,r4
 4010864:	003fea06 	br	4010810 <OSFlagPost+0xec>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4010868:	8980020b 	ldhu	r6,8(r17)
 401086c:	9080040b 	ldhu	r2,16(r18)
 4010870:	0186303a 	nor	r3,zero,r6
 4010874:	1886703a 	and	r3,r3,r2
                 if (flags_rdy != (OS_FLAGS)0) {
 4010878:	193fffcc 	andi	r4,r3,65535
 401087c:	2120001c 	xori	r4,r4,32768
 4010880:	21200004 	addi	r4,r4,-32768
 4010884:	203ff426 	beq	r4,zero,4010858 <OSFlagPost+0x134>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4010888:	197fffcc 	andi	r5,r3,65535
 401088c:	9009883a 	mov	r4,r18
 4010890:	400fc200 	call	400fc20 <OS_FlagTaskRdy>
                     if (rdy == OS_TRUE) {
 4010894:	10803fcc 	andi	r2,r2,255
 4010898:	143fef1e 	bne	r2,r16,4010858 <OSFlagPost+0x134>
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
 401089c:	05800044 	movi	r22,1
 40108a0:	003fed06 	br	4010858 <OSFlagPost+0x134>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
             break;

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 40108a4:	2180020b 	ldhu	r6,8(r4)
 40108a8:	2984b03a 	or	r2,r5,r6
 40108ac:	100d883a 	mov	r6,r2
 40108b0:	2080020d 	sth	r2,8(r4)
 40108b4:	003fd106 	br	40107fc <OSFlagPost+0xd8>
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40108b8:	9080040b 	ldhu	r2,16(r18)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40108bc:	88c0020b 	ldhu	r3,8(r17)
 40108c0:	117fffcc 	andi	r5,r2,65535
 40108c4:	10c4703a 	and	r2,r2,r3
 40108c8:	28bfe31e 	bne	r5,r2,4010858 <OSFlagPost+0x134>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40108cc:	9009883a 	mov	r4,r18
 40108d0:	400fc200 	call	400fc20 <OS_FlagTaskRdy>
                     if (rdy == OS_TRUE) {
 40108d4:	10803fcc 	andi	r2,r2,255
 40108d8:	153fdf1e 	bne	r2,r20,4010858 <OSFlagPost+0x134>
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
 40108dc:	05800044 	movi	r22,1
 40108e0:	003fdd06 	br	4010858 <OSFlagPost+0x134>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40108e4:	8980020b 	ldhu	r6,8(r17)
 40108e8:	9080040b 	ldhu	r2,16(r18)
 40108ec:	3084703a 	and	r2,r6,r2
                 if (flags_rdy != (OS_FLAGS)0) {
 40108f0:	117fffcc 	andi	r5,r2,65535
 40108f4:	283fd826 	beq	r5,zero,4010858 <OSFlagPost+0x134>
 40108f8:	003ff406 	br	40108cc <OSFlagPost+0x1a8>
 40108fc:	a801703a 	wrctl	status,r21
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4010900:	b0c03fcc 	andi	r3,r22,255
 4010904:	00800044 	movi	r2,1
 4010908:	18800b26 	beq	r3,r2,4010938 <OSFlagPost+0x214>
 401090c:	8980020b 	ldhu	r6,8(r17)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010910:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010914:	00bfff84 	movi	r2,-2
 4010918:	1884703a 	and	r2,r3,r2
 401091c:	1001703a 	wrctl	status,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010920:	1801703a 	wrctl	status,r3
    }
    OS_ENTER_CRITICAL();
    flags_cur = pgrp->OSFlagFlags;
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    return (flags_cur);
 4010924:	30ffffcc 	andi	r3,r6,65535
        OS_Sched();
    }
    OS_ENTER_CRITICAL();
    flags_cur = pgrp->OSFlagFlags;
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 4010928:	98000005 	stb	zero,0(r19)
 401092c:	003f9006 	br	4010770 <OSFlagPost+0x4c>
 4010930:	a801703a 	wrctl	status,r21
 4010934:	003ff606 	br	4010910 <OSFlagPost+0x1ec>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
        OS_Sched();
 4010938:	400ece40 	call	400ece4 <OS_Sched>
 401093c:	8980020b 	ldhu	r6,8(r17)
 4010940:	003ff306 	br	4010910 <OSFlagPost+0x1ec>

04010944 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4010944:	deffff04 	addi	sp,sp,-4
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4010948:	01430c04 	movi	r5,3120
 401094c:	01010134 	movhi	r4,1028
 4010950:	213eb104 	addi	r4,r4,-1340
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4010954:	dfc00015 	stw	ra,0(sp)
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4010958:	400eb780 	call	400eb78 <OS_MemClr>
 401095c:	00c10134 	movhi	r3,1028
 4010960:	18febe04 	addi	r3,r3,-1288
 4010964:	1882ff04 	addi	r2,r3,3068
 4010968:	01400fc4 	movi	r5,63
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 401096c:	18fff415 	stw	r3,-48(r3)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4010970:	197ff805 	stb	r5,-32(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4010974:	183ff845 	stb	zero,-31(r3)
 4010978:	18c00d04 	addi	r3,r3,52
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 401097c:	18bffb1e 	bne	r3,r2,401096c <OS_MemInit+0x28>
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4010980:	193cf404 	addi	r4,r3,-3120
 4010984:	00810134 	movhi	r2,1028
 4010988:	10a8ff04 	addi	r2,r2,-23556
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 401098c:	18fff304 	addi	r3,r3,-52
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4010990:	11000015 	stw	r4,0(r2)
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4010994:	19400505 	stb	r5,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4010998:	18000545 	stb	zero,21(r3)
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 401099c:	18000115 	stw	zero,4(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
#endif
}
 40109a0:	dfc00017 	ldw	ra,0(sp)
 40109a4:	dec00104 	addi	sp,sp,4
 40109a8:	f800283a 	ret

040109ac <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 40109ac:	2011883a 	mov	r8,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 40109b0:	00801804 	movi	r2,96
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 40109b4:	280f883a 	mov	r7,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 40109b8:	20001426 	beq	r4,zero,4010a0c <OSMemQuery+0x60>
        return (OS_ERR_MEM_INVALID_PMEM);
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 40109bc:	00801844 	movi	r2,97
 40109c0:	28001226 	beq	r5,zero,4010a0c <OSMemQuery+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40109c4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40109c8:	00bfff84 	movi	r2,-2
 40109cc:	3084703a 	and	r2,r6,r2
 40109d0:	1001703a 	wrctl	status,r2
    }
#endif
    OS_ENTER_CRITICAL();
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 40109d4:	20c00217 	ldw	r3,8(r4)
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
        return (OS_ERR_MEM_INVALID_PDATA);
    }
#endif
    OS_ENTER_CRITICAL();
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 40109d8:	21000017 	ldw	r4,0(r4)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 40109dc:	28c00215 	stw	r3,8(r5)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 40109e0:	40800317 	ldw	r2,12(r8)
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
        return (OS_ERR_MEM_INVALID_PDATA);
    }
#endif
    OS_ENTER_CRITICAL();
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 40109e4:	29000015 	stw	r4,0(r5)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 40109e8:	41400117 	ldw	r5,4(r8)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 40109ec:	38800315 	stw	r2,12(r7)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 40109f0:	40c00417 	ldw	r3,16(r8)
        return (OS_ERR_MEM_INVALID_PDATA);
    }
#endif
    OS_ENTER_CRITICAL();
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 40109f4:	39400115 	stw	r5,4(r7)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 40109f8:	38c00415 	stw	r3,16(r7)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40109fc:	3001703a 	wrctl	status,r6
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4010a00:	10c5c83a 	sub	r2,r2,r3
 4010a04:	38800515 	stw	r2,20(r7)
 4010a08:	0005883a 	mov	r2,zero
    return (OS_ERR_NONE);
}
 4010a0c:	f800283a 	ret

04010a10 <OSMemCreate>:
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010a10:	38002d26 	beq	r7,zero,4010ac8 <OSMemCreate+0xb8>
        return ((OS_MEM *)0);
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 4010a14:	20002726 	beq	r4,zero,4010ab4 <OSMemCreate+0xa4>
        *perr = OS_ERR_MEM_INVALID_ADDR;
        return ((OS_MEM *)0);
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 4010a18:	208000cc 	andi	r2,r4,3
 4010a1c:	1000251e 	bne	r2,zero,4010ab4 <OSMemCreate+0xa4>
        *perr = OS_ERR_MEM_INVALID_ADDR;
        return ((OS_MEM *)0);
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4010a20:	02000044 	movi	r8,1
 4010a24:	41402b2e 	bgeu	r8,r5,4010ad4 <OSMemCreate+0xc4>
        *perr = OS_ERR_MEM_INVALID_BLKS;
        return ((OS_MEM *)0);
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4010a28:	008000c4 	movi	r2,3
 4010a2c:	11801c2e 	bgeu	r2,r6,4010aa0 <OSMemCreate+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010a30:	0013303a 	rdctl	r9,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010a34:	00bfff84 	movi	r2,-2
 4010a38:	4884703a 	and	r2,r9,r2
 4010a3c:	1001703a 	wrctl	status,r2
        *perr = OS_ERR_MEM_INVALID_SIZE;
        return ((OS_MEM *)0);
    }
#endif
    OS_ENTER_CRITICAL();
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4010a40:	00c10134 	movhi	r3,1028
 4010a44:	18e8ff04 	addi	r3,r3,-23556
 4010a48:	1a800017 	ldw	r10,0(r3)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 4010a4c:	50002526 	beq	r10,zero,4010ae4 <OSMemCreate+0xd4>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 4010a50:	50800117 	ldw	r2,4(r10)
 4010a54:	18800015 	stw	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010a58:	4801703a 	wrctl	status,r9
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 4010a5c:	2007883a 	mov	r3,r4
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 4010a60:	2a000626 	beq	r5,r8,4010a7c <OSMemCreate+0x6c>
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
 4010a64:	2185883a 	add	r2,r4,r6
    for (i = 0; i < (nblks - 1); i++) {
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 4010a68:	42000044 	addi	r8,r8,1
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 4010a6c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 4010a70:	1007883a 	mov	r3,r2
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 4010a74:	1185883a 	add	r2,r2,r6
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 4010a78:	417ffb1e 	bne	r8,r5,4010a68 <OSMemCreate+0x58>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 4010a7c:	18000015 	stw	zero,0(r3)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4010a80:	51000115 	stw	r4,4(r10)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    pmem->OSMemNBlks    = nblks;
 4010a84:	51400315 	stw	r5,12(r10)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4010a88:	51800215 	stw	r6,8(r10)
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4010a8c:	51000015 	stw	r4,0(r10)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 4010a90:	51400415 	stw	r5,16(r10)
    pmem->OSMemNBlks    = nblks;
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    *perr               = OS_ERR_NONE;
 4010a94:	38000005 	stb	zero,0(r7)
    return (pmem);
}
 4010a98:	5005883a 	mov	r2,r10
 4010a9c:	f800283a 	ret
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
        *perr = OS_ERR_MEM_INVALID_BLKS;
        return ((OS_MEM *)0);
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
        *perr = OS_ERR_MEM_INVALID_SIZE;
 4010aa0:	0015883a 	mov	r10,zero
 4010aa4:	00801704 	movi	r2,92
 4010aa8:	38800005 	stb	r2,0(r7)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    pmem->OSMemNBlks    = nblks;
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    *perr               = OS_ERR_NONE;
    return (pmem);
}
 4010aac:	5005883a 	mov	r2,r10
 4010ab0:	f800283a 	ret
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
        *perr = OS_ERR_MEM_INVALID_ADDR;
        return ((OS_MEM *)0);
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4010ab4:	0015883a 	mov	r10,zero
 4010ab8:	00801884 	movi	r2,98
 4010abc:	38800005 	stb	r2,0(r7)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    pmem->OSMemNBlks    = nblks;
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    *perr               = OS_ERR_NONE;
    return (pmem);
}
 4010ac0:	5005883a 	mov	r2,r10
 4010ac4:	f800283a 	ret
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010ac8:	0015883a 	mov	r10,zero
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    pmem->OSMemNBlks    = nblks;
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    *perr               = OS_ERR_NONE;
    return (pmem);
}
 4010acc:	5005883a 	mov	r2,r10
 4010ad0:	f800283a 	ret
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
        *perr = OS_ERR_MEM_INVALID_ADDR;
        return ((OS_MEM *)0);
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
        *perr = OS_ERR_MEM_INVALID_BLKS;
 4010ad4:	008016c4 	movi	r2,91
 4010ad8:	0015883a 	mov	r10,zero
 4010adc:	38800005 	stb	r2,0(r7)
 4010ae0:	003fed06 	br	4010a98 <OSMemCreate+0x88>
 4010ae4:	4801703a 	wrctl	status,r9
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
        *perr = OS_ERR_MEM_INVALID_PART;
 4010ae8:	00801684 	movi	r2,90
 4010aec:	38800005 	stb	r2,0(r7)
 4010af0:	003fe906 	br	4010a98 <OSMemCreate+0x88>

04010af4 <OSMemGet>:
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010af4:	0007883a 	mov	r3,zero
 4010af8:	28000f26 	beq	r5,zero,4010b38 <OSMemGet+0x44>
        return ((void *)0);
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010afc:	0007883a 	mov	r3,zero

#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return ((void *)0);
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 4010b00:	20001426 	beq	r4,zero,4010b54 <OSMemGet+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010b04:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010b08:	00bfff84 	movi	r2,-2
 4010b0c:	3084703a 	and	r2,r6,r2
 4010b10:	1001703a 	wrctl	status,r2
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return ((void *)0);
    }
#endif
    OS_ENTER_CRITICAL();
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 4010b14:	20c00417 	ldw	r3,16(r4)
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 4010b18:	18bfffc4 	addi	r2,r3,-1
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return ((void *)0);
    }
#endif
    OS_ENTER_CRITICAL();
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 4010b1c:	18000826 	beq	r3,zero,4010b40 <OSMemGet+0x4c>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 4010b20:	20c00117 	ldw	r3,4(r4)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 4010b24:	20800415 	stw	r2,16(r4)
    }
#endif
    OS_ENTER_CRITICAL();
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 4010b28:	18800017 	ldw	r2,0(r3)
 4010b2c:	20800115 	stw	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010b30:	3001703a 	wrctl	status,r6
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 4010b34:	28000005 	stb	zero,0(r5)
        return (pblk);                                /*      Return memory block to caller            */
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    return ((void *)0);                               /*      Return NULL pointer to caller            */
}
 4010b38:	1805883a 	mov	r2,r3
 4010b3c:	f800283a 	ret
 4010b40:	3001703a 	wrctl	status,r6
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
        return (pblk);                                /*      Return memory block to caller            */
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 4010b44:	00801744 	movi	r2,93
 4010b48:	0007883a 	mov	r3,zero
 4010b4c:	28800005 	stb	r2,0(r5)
 4010b50:	003ff906 	br	4010b38 <OSMemGet+0x44>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return ((void *)0);
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010b54:	00801804 	movi	r2,96
 4010b58:	28800005 	stb	r2,0(r5)
 4010b5c:	003ff606 	br	4010b38 <OSMemGet+0x44>

04010b60 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4010b60:	defffd04 	addi	sp,sp,-12
 4010b64:	dfc00215 	stw	ra,8(sp)
 4010b68:	dc000115 	stw	r16,4(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010b6c:	0011883a 	mov	r8,zero
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4010b70:	200f883a 	mov	r7,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010b74:	30000b26 	beq	r6,zero,4010ba4 <OSMemNameGet+0x44>
        return (0);
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010b78:	0011883a 	mov	r8,zero

#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return (0);
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4010b7c:	20001f26 	beq	r4,zero,4010bfc <OSMemNameGet+0x9c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 4010b80:	0011883a 	mov	r8,zero
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010b84:	28002426 	beq	r5,zero,4010c18 <OSMemNameGet+0xb8>
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010b88:	00810134 	movhi	r2,1028
 4010b8c:	10a90404 	addi	r2,r2,-23536
 4010b90:	10c00003 	ldbu	r3,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
 4010b94:	0011883a 	mov	r8,zero
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010b98:	18000726 	beq	r3,zero,4010bb8 <OSMemNameGet+0x58>
        *perr = OS_ERR_NAME_GET_ISR;
 4010b9c:	00800444 	movi	r2,17
 4010ba0:	30800005 	stb	r2,0(r6)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4010ba4:	4005883a 	mov	r2,r8
 4010ba8:	dfc00217 	ldw	ra,8(sp)
 4010bac:	dc000117 	ldw	r16,4(sp)
 4010bb0:	dec00304 	addi	sp,sp,12
 4010bb4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010bb8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010bbc:	00bfff84 	movi	r2,-2
 4010bc0:	8084703a 	and	r2,r16,r2
 4010bc4:	1001703a 	wrctl	status,r2
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4010bc8:	2809883a 	mov	r4,r5
 4010bcc:	39400504 	addi	r5,r7,20
 4010bd0:	d9800015 	stw	r6,0(sp)
 4010bd4:	400ebf80 	call	400ebf8 <OS_StrCopy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010bd8:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010bdc:	d9800017 	ldw	r6,0(sp)
    return (len);
 4010be0:	12003fcc 	andi	r8,r2,255
}
 4010be4:	4005883a 	mov	r2,r8
        return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010be8:	30000005 	stb	zero,0(r6)
    return (len);
}
 4010bec:	dfc00217 	ldw	ra,8(sp)
 4010bf0:	dc000117 	ldw	r16,4(sp)
 4010bf4:	dec00304 	addi	sp,sp,12
 4010bf8:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return (0);
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010bfc:	00801804 	movi	r2,96
 4010c00:	30800005 	stb	r2,0(r6)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4010c04:	4005883a 	mov	r2,r8
 4010c08:	dfc00217 	ldw	ra,8(sp)
 4010c0c:	dc000117 	ldw	r16,4(sp)
 4010c10:	dec00304 	addi	sp,sp,12
 4010c14:	f800283a 	ret
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return (0);
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 4010c18:	00800304 	movi	r2,12
 4010c1c:	30800005 	stb	r2,0(r6)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4010c20:	4005883a 	mov	r2,r8
 4010c24:	dfc00217 	ldw	ra,8(sp)
 4010c28:	dc000117 	ldw	r16,4(sp)
 4010c2c:	dec00304 	addi	sp,sp,12
 4010c30:	f800283a 	ret

04010c34 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4010c34:	defffb04 	addi	sp,sp,-20
 4010c38:	dc800215 	stw	r18,8(sp)
 4010c3c:	dc400115 	stw	r17,4(sp)
 4010c40:	dc000015 	stw	r16,0(sp)
 4010c44:	dfc00415 	stw	ra,16(sp)
 4010c48:	dcc00315 	stw	r19,12(sp)
 4010c4c:	3023883a 	mov	r17,r6
 4010c50:	2025883a 	mov	r18,r4
 4010c54:	2821883a 	mov	r16,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010c58:	30000826 	beq	r6,zero,4010c7c <OSMemNameSet+0x48>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4010c5c:	20001b26 	beq	r4,zero,4010ccc <OSMemNameSet+0x98>
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return;
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010c60:	28002326 	beq	r5,zero,4010cf0 <OSMemNameSet+0xbc>
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010c64:	00810134 	movhi	r2,1028
 4010c68:	10a90404 	addi	r2,r2,-23536
 4010c6c:	10c00003 	ldbu	r3,0(r2)
 4010c70:	18000926 	beq	r3,zero,4010c98 <OSMemNameSet+0x64>
        *perr = OS_ERR_NAME_SET_ISR;
 4010c74:	00800484 	movi	r2,18
 4010c78:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4010c7c:	dfc00417 	ldw	ra,16(sp)
 4010c80:	dcc00317 	ldw	r19,12(sp)
 4010c84:	dc800217 	ldw	r18,8(sp)
 4010c88:	dc400117 	ldw	r17,4(sp)
 4010c8c:	dc000017 	ldw	r16,0(sp)
 4010c90:	dec00504 	addi	sp,sp,20
 4010c94:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010c98:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010c9c:	00bfff84 	movi	r2,-2
 4010ca0:	9884703a 	and	r2,r19,r2
 4010ca4:	1001703a 	wrctl	status,r2
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4010ca8:	2809883a 	mov	r4,r5
 4010cac:	400ec2c0 	call	400ec2c <OS_StrLen>
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4010cb0:	10803fcc 	andi	r2,r2,255
 4010cb4:	00c007c4 	movi	r3,31
 4010cb8:	1880162e 	bgeu	r3,r2,4010d14 <OSMemNameSet+0xe0>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010cbc:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4010cc0:	008018c4 	movi	r2,99
 4010cc4:	88800005 	stb	r2,0(r17)
 4010cc8:	003fec06 	br	4010c7c <OSMemNameSet+0x48>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010ccc:	00801804 	movi	r2,96
 4010cd0:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4010cd4:	dfc00417 	ldw	ra,16(sp)
 4010cd8:	dcc00317 	ldw	r19,12(sp)
 4010cdc:	dc800217 	ldw	r18,8(sp)
 4010ce0:	dc400117 	ldw	r17,4(sp)
 4010ce4:	dc000017 	ldw	r16,0(sp)
 4010ce8:	dec00504 	addi	sp,sp,20
 4010cec:	f800283a 	ret
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
        *perr = OS_ERR_MEM_INVALID_PMEM;
        return;
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
 4010cf0:	00800304 	movi	r2,12
 4010cf4:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4010cf8:	dfc00417 	ldw	ra,16(sp)
 4010cfc:	dcc00317 	ldw	r19,12(sp)
 4010d00:	dc800217 	ldw	r18,8(sp)
 4010d04:	dc400117 	ldw	r17,4(sp)
 4010d08:	dc000017 	ldw	r16,0(sp)
 4010d0c:	dec00504 	addi	sp,sp,20
 4010d10:	f800283a 	ret
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4010d14:	91000504 	addi	r4,r18,20
 4010d18:	800b883a 	mov	r5,r16
 4010d1c:	400ebf80 	call	400ebf8 <OS_StrCopy>
 4010d20:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010d24:	88000005 	stb	zero,0(r17)
 4010d28:	003fd406 	br	4010c7c <OSMemNameSet+0x48>

04010d2c <OSMemPut>:
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4010d2c:	00801804 	movi	r2,96
 4010d30:	20001326 	beq	r4,zero,4010d80 <OSMemPut+0x54>
        return (OS_ERR_MEM_INVALID_PMEM);
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4010d34:	008017c4 	movi	r2,95
 4010d38:	28001126 	beq	r5,zero,4010d80 <OSMemPut+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010d3c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010d40:	00bfff84 	movi	r2,-2
 4010d44:	3884703a 	and	r2,r7,r2
 4010d48:	1001703a 	wrctl	status,r2
        return (OS_ERR_MEM_INVALID_PBLK);
    }
#endif
    OS_ENTER_CRITICAL();
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4010d4c:	20c00417 	ldw	r3,16(r4)
 4010d50:	20800317 	ldw	r2,12(r4)
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    pmem->OSMemFreeList = pblk;
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4010d54:	19800044 	addi	r6,r3,1
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
        return (OS_ERR_MEM_INVALID_PBLK);
    }
#endif
    OS_ENTER_CRITICAL();
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4010d58:	18800336 	bltu	r3,r2,4010d68 <OSMemPut+0x3c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010d5c:	3801703a 	wrctl	status,r7
 4010d60:	00801784 	movi	r2,94
 4010d64:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4010d68:	20800117 	ldw	r2,4(r4)
    pmem->OSMemFreeList = pblk;
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4010d6c:	21800415 	stw	r6,16(r4)
    OS_ENTER_CRITICAL();
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4010d70:	28800015 	stw	r2,0(r5)
    pmem->OSMemFreeList = pblk;
 4010d74:	21400115 	stw	r5,4(r4)
 4010d78:	3801703a 	wrctl	status,r7
 4010d7c:	0005883a 	mov	r2,zero
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
}
 4010d80:	f800283a 	ret

04010d84 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4010d84:	deffff04 	addi	sp,sp,-4
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4010d88:	01010134 	movhi	r4,1028
 4010d8c:	2103bd04 	addi	r4,r4,3828
 4010d90:	01407804 	movi	r5,480
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4010d94:	dfc00015 	stw	ra,0(sp)
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4010d98:	400eb780 	call	400eb78 <OS_MemClr>
 4010d9c:	01010134 	movhi	r4,1028
 4010da0:	2103c304 	addi	r4,r4,3852
 4010da4:	20807204 	addi	r2,r4,456
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
        pq1->OSQPtr = pq2;
 4010da8:	213ffa15 	stw	r4,-24(r4)
        pq1++;
        pq2++;
 4010dac:	21000604 	addi	r4,r4,24


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4010db0:	20bffd1e 	bne	r4,r2,4010da8 <OS_QInit+0x24>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    OSQFreeList = &OSQTbl[0];
 4010db4:	20ff8804 	addi	r3,r4,-480
 4010db8:	00810134 	movhi	r2,1028
 4010dbc:	10a90104 	addi	r2,r2,-23548
 4010dc0:	10c00015 	stw	r3,0(r2)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 4010dc4:	203ffa15 	stw	zero,-24(r4)
    OSQFreeList = &OSQTbl[0];
#endif
}
 4010dc8:	dfc00017 	ldw	ra,0(sp)
 4010dcc:	dec00104 	addi	sp,sp,4
 4010dd0:	f800283a 	ret

04010dd4 <OSQQuery>:
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4010dd4:	20002926 	beq	r4,zero,4010e7c <OSQQuery+0xa8>
        return (OS_ERR_PEVENT_NULL);
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4010dd8:	28002626 	beq	r5,zero,4010e74 <OSQQuery+0xa0>
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4010ddc:	20c00003 	ldbu	r3,0(r4)
 4010de0:	00800084 	movi	r2,2
 4010de4:	18800226 	beq	r3,r2,4010df0 <OSQQuery+0x1c>
 4010de8:	00800044 	movi	r2,1
 4010dec:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010df0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010df4:	00bfff84 	movi	r2,-2
 4010df8:	3084703a 	and	r2,r6,r2
 4010dfc:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 4010e00:	20c00283 	ldbu	r3,10(r4)
 4010e04:	28c002c5 	stb	r3,11(r5)
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *pdest++ = *psrc++;
 4010e08:	208002c3 	ldbu	r2,11(r4)
 4010e0c:	28800205 	stb	r2,8(r5)
 4010e10:	20c00303 	ldbu	r3,12(r4)
 4010e14:	28c00245 	stb	r3,9(r5)
 4010e18:	20800343 	ldbu	r2,13(r4)
 4010e1c:	28800285 	stb	r2,10(r5)
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4010e20:	21000117 	ldw	r4,4(r4)
    if (pq->OSQEntries > 0) {
 4010e24:	2080058b 	ldhu	r2,22(r4)
 4010e28:	10000a26 	beq	r2,zero,4010e54 <OSQQuery+0x80>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4010e2c:	20800417 	ldw	r2,16(r4)
 4010e30:	10c00017 	ldw	r3,0(r2)
    } else {
        p_q_data->OSMsg = (void *)0;
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4010e34:	2080058b 	ldhu	r2,22(r4)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    if (pq->OSQEntries > 0) {
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4010e38:	28c00015 	stw	r3,0(r5)
    } else {
        p_q_data->OSMsg = (void *)0;
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4010e3c:	2880010d 	sth	r2,4(r5)
    p_q_data->OSQSize = pq->OSQSize;
 4010e40:	20c0050b 	ldhu	r3,20(r4)
 4010e44:	28c0018d 	sth	r3,6(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010e48:	3001703a 	wrctl	status,r6
 4010e4c:	0005883a 	mov	r2,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4010e50:	f800283a 	ret
    if (pq->OSQEntries > 0) {
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    } else {
        p_q_data->OSMsg = (void *)0;
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4010e54:	2080058b 	ldhu	r2,22(r4)
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    if (pq->OSQEntries > 0) {
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    } else {
        p_q_data->OSMsg = (void *)0;
 4010e58:	28000015 	stw	zero,0(r5)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4010e5c:	2880010d 	sth	r2,4(r5)
    p_q_data->OSQSize = pq->OSQSize;
 4010e60:	20c0050b 	ldhu	r3,20(r4)
 4010e64:	28c0018d 	sth	r3,6(r5)
 4010e68:	3001703a 	wrctl	status,r6
 4010e6c:	0005883a 	mov	r2,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4010e70:	f800283a 	ret

#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4010e74:	00800244 	movi	r2,9
 4010e78:	f800283a 	ret
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4010e7c:	00800104 	movi	r2,4
 4010e80:	f800283a 	ret

04010e84 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4010e84:	280f883a 	mov	r7,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010e88:	28002426 	beq	r5,zero,4010f1c <OSQAccept+0x98>
        return ((void *)0);
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4010e8c:	20002626 	beq	r4,zero,4010f28 <OSQAccept+0xa4>
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4010e90:	20c00003 	ldbu	r3,0(r4)
 4010e94:	00800084 	movi	r2,2
 4010e98:	1880171e 	bne	r3,r2,4010ef8 <OSQAccept+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010e9c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010ea0:	00bfff84 	movi	r2,-2
 4010ea4:	4084703a 	and	r2,r8,r2
 4010ea8:	1001703a 	wrctl	status,r2
        *perr = OS_ERR_EVENT_TYPE;
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4010eac:	21800117 	ldw	r6,4(r4)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4010eb0:	3080058b 	ldhu	r2,22(r6)
 4010eb4:	1000061e 	bne	r2,zero,4010ed0 <OSQAccept+0x4c>
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
            pq->OSQOut = pq->OSQStart;
        }
        *perr = OS_ERR_NONE;
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4010eb8:	008007c4 	movi	r2,31
 4010ebc:	28800005 	stb	r2,0(r5)
 4010ec0:	0009883a 	mov	r4,zero
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010ec4:	4001703a 	wrctl	status,r8
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
}
 4010ec8:	2005883a 	mov	r2,r4
 4010ecc:	f800283a 	ret
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4010ed0:	31000417 	ldw	r4,16(r6)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4010ed4:	31400217 	ldw	r5,8(r6)
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4010ed8:	10bfffc4 	addi	r2,r2,-1
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4010edc:	20c00104 	addi	r3,r4,4
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4010ee0:	3080058d 	sth	r2,22(r6)
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4010ee4:	30c00415 	stw	r3,16(r6)
 4010ee8:	21000017 	ldw	r4,0(r4)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4010eec:	19400726 	beq	r3,r5,4010f0c <OSQAccept+0x88>
            pq->OSQOut = pq->OSQStart;
        }
        *perr = OS_ERR_NONE;
 4010ef0:	38000005 	stb	zero,0(r7)
 4010ef4:	003ff306 	br	4010ec4 <OSQAccept+0x40>
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
        *perr = OS_ERR_EVENT_TYPE;
 4010ef8:	0009883a 	mov	r4,zero
 4010efc:	00800044 	movi	r2,1
 4010f00:	28800005 	stb	r2,0(r5)
        *perr = OS_ERR_Q_EMPTY;
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
}
 4010f04:	2005883a 	mov	r2,r4
 4010f08:	f800283a 	ret
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
            pq->OSQOut = pq->OSQStart;
 4010f0c:	30800117 	ldw	r2,4(r6)
 4010f10:	30800415 	stw	r2,16(r6)
        }
        *perr = OS_ERR_NONE;
 4010f14:	38000005 	stb	zero,0(r7)
 4010f18:	003fea06 	br	4010ec4 <OSQAccept+0x40>
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010f1c:	0009883a 	mov	r4,zero
        *perr = OS_ERR_Q_EMPTY;
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
}
 4010f20:	2005883a 	mov	r2,r4
 4010f24:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return ((void *)0);
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
 4010f28:	00800104 	movi	r2,4
 4010f2c:	28800005 	stb	r2,0(r5)
 4010f30:	003fe506 	br	4010ec8 <OSQAccept+0x44>

04010f34 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4010f34:	defffe04 	addi	sp,sp,-8
 4010f38:	dc000015 	stw	r16,0(sp)
 4010f3c:	dfc00115 	stw	ra,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4010f40:	00810134 	movhi	r2,1028
 4010f44:	10a90404 	addi	r2,r2,-23536
 4010f48:	10c00003 	ldbu	r3,0(r2)
 4010f4c:	0021883a 	mov	r16,zero
 4010f50:	18000526 	beq	r3,zero,4010f68 <OSQCreate+0x34>
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
        }
    }
    return (pevent);
}
 4010f54:	8005883a 	mov	r2,r16
 4010f58:	dfc00117 	ldw	ra,4(sp)
 4010f5c:	dc000017 	ldw	r16,0(sp)
 4010f60:	dec00204 	addi	sp,sp,8
 4010f64:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010f68:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010f6c:	01bfff84 	movi	r6,-2
 4010f70:	1984703a 	and	r2,r3,r6
 4010f74:	1001703a 	wrctl	status,r2

    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4010f78:	02010134 	movhi	r8,1028
 4010f7c:	42290304 	addi	r8,r8,-23540
 4010f80:	44000017 	ldw	r16,0(r8)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4010f84:	80002526 	beq	r16,zero,401101c <OSQCreate+0xe8>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4010f88:	80800117 	ldw	r2,4(r16)
 4010f8c:	40800015 	stw	r2,0(r8)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010f90:	1801703a 	wrctl	status,r3
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010f94:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010f98:	3984703a 	and	r2,r7,r6
 4010f9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
        OS_ENTER_CRITICAL();
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4010fa0:	01810134 	movhi	r6,1028
 4010fa4:	31a90104 	addi	r6,r6,-23548
 4010fa8:	30c00017 	ldw	r3,0(r6)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4010fac:	18001d26 	beq	r3,zero,4011024 <OSQCreate+0xf0>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4010fb0:	18800017 	ldw	r2,0(r3)
 4010fb4:	30800015 	stw	r2,0(r6)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010fb8:	3801703a 	wrctl	status,r7
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
            pq->OSQEnd             = &start[size];
 4010fbc:	28bfffcc 	andi	r2,r5,65535
 4010fc0:	1085883a 	add	r2,r2,r2
 4010fc4:	1085883a 	add	r2,r2,r2
 4010fc8:	2085883a 	add	r2,r4,r2
            pq->OSQIn              = start;
            pq->OSQOut             = start;
            pq->OSQSize            = size;
 4010fcc:	1940050d 	sth	r5,20(r3)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
            pq->OSQEnd             = &start[size];
 4010fd0:	18800215 	stw	r2,8(r3)
            pq->OSQIn              = start;
            pq->OSQOut             = start;
 4010fd4:	19000415 	stw	r4,16(r3)
            pq->OSQSize            = size;
            pq->OSQEntries         = 0;
 4010fd8:	1800058d 	sth	zero,22(r3)
        OS_ENTER_CRITICAL();
        pq = OSQFreeList;                        /* Get a free queue control block                     */
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 4010fdc:	19000115 	stw	r4,4(r3)
            pq->OSQEnd             = &start[size];
            pq->OSQIn              = start;
 4010fe0:	19000315 	stw	r4,12(r3)
            pq->OSQOut             = start;
            pq->OSQSize            = size;
            pq->OSQEntries         = 0;
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4010fe4:	00800084 	movi	r2,2
 4010fe8:	80800005 	stb	r2,0(r16)
            pevent->OSEventCnt     = 0;
            pevent->OSEventPtr     = pq;
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4010fec:	00800fc4 	movi	r2,63
 4010ff0:	80800385 	stb	r2,14(r16)
            pq->OSQOut             = start;
            pq->OSQSize            = size;
            pq->OSQEntries         = 0;
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
            pevent->OSEventCnt     = 0;
            pevent->OSEventPtr     = pq;
 4010ff4:	80c00115 	stw	r3,4(r16)
            pq->OSQIn              = start;
            pq->OSQOut             = start;
            pq->OSQSize            = size;
            pq->OSQEntries         = 0;
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
            pevent->OSEventCnt     = 0;
 4010ff8:	8000020d 	sth	zero,8(r16)
            pevent->OSEventPtr     = pq;
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4010ffc:	800003c5 	stb	zero,15(r16)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 4011000:	8009883a 	mov	r4,r16
 4011004:	400eb5c0 	call	400eb5c <OS_EventWaitListInit>
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
        }
    }
    return (pevent);
}
 4011008:	8005883a 	mov	r2,r16
 401100c:	dfc00117 	ldw	ra,4(sp)
 4011010:	dc000017 	ldw	r16,0(sp)
 4011014:	dec00204 	addi	sp,sp,8
 4011018:	f800283a 	ret
 401101c:	1801703a 	wrctl	status,r3
 4011020:	003fcc06 	br	4010f54 <OSQCreate+0x20>
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
            pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4011024:	40800017 	ldw	r2,0(r8)
            OSEventFreeList    = pevent;
 4011028:	44000015 	stw	r16,0(r8)
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
            pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 401102c:	80800115 	stw	r2,4(r16)
 4011030:	3801703a 	wrctl	status,r7
 4011034:	0021883a 	mov	r16,zero
 4011038:	003fc606 	br	4010f54 <OSQCreate+0x20>

0401103c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401103c:	defffc04 	addi	sp,sp,-16
 4011040:	dc400115 	stw	r17,4(sp)
 4011044:	dc000015 	stw	r16,0(sp)
 4011048:	dfc00315 	stw	ra,12(sp)
 401104c:	dc800215 	stw	r18,8(sp)
 4011050:	3023883a 	mov	r17,r6
 4011054:	2021883a 	mov	r16,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4011058:	30000626 	beq	r6,zero,4011074 <OSQDel+0x38>
        return (pevent);
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401105c:	20002c26 	beq	r4,zero,4011110 <OSQDel+0xd4>
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4011060:	20c00003 	ldbu	r3,0(r4)
 4011064:	00800084 	movi	r2,2
 4011068:	18800926 	beq	r3,r2,4011090 <OSQDel+0x54>
        *perr = OS_ERR_EVENT_TYPE;
 401106c:	00800044 	movi	r2,1
 4011070:	30800005 	stb	r2,0(r6)
             *perr                  = OS_ERR_INVALID_OPT;
             pevent_return          = pevent;
             break;
    }
    return (pevent_return);
}
 4011074:	8005883a 	mov	r2,r16
 4011078:	dfc00317 	ldw	ra,12(sp)
 401107c:	dc800217 	ldw	r18,8(sp)
 4011080:	dc400117 	ldw	r17,4(sp)
 4011084:	dc000017 	ldw	r16,0(sp)
 4011088:	dec00404 	addi	sp,sp,16
 401108c:	f800283a 	ret
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (pevent);
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4011090:	00810134 	movhi	r2,1028
 4011094:	10a90404 	addi	r2,r2,-23536
 4011098:	10c00003 	ldbu	r3,0(r2)
 401109c:	18000926 	beq	r3,zero,40110c4 <OSQDel+0x88>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 40110a0:	008003c4 	movi	r2,15
 40110a4:	30800005 	stb	r2,0(r6)
             *perr                  = OS_ERR_INVALID_OPT;
             pevent_return          = pevent;
             break;
    }
    return (pevent_return);
}
 40110a8:	8005883a 	mov	r2,r16
 40110ac:	dfc00317 	ldw	ra,12(sp)
 40110b0:	dc800217 	ldw	r18,8(sp)
 40110b4:	dc400117 	ldw	r17,4(sp)
 40110b8:	dc000017 	ldw	r16,0(sp)
 40110bc:	dec00404 	addi	sp,sp,16
 40110c0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40110c4:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40110c8:	00bfff84 	movi	r2,-2
 40110cc:	9084703a 	and	r2,r18,r2
 40110d0:	1001703a 	wrctl	status,r2
 40110d4:	20c00283 	ldbu	r3,10(r4)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 40110d8:	29403fcc 	andi	r5,r5,255
 40110dc:	1806c03a 	cmpne	r3,r3,zero
 40110e0:	2800051e 	bne	r5,zero,40110f8 <OSQDel+0xbc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 40110e4:	18002a26 	beq	r3,zero,4011190 <OSQDel+0x154>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40110e8:	9001703a 	wrctl	status,r18
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40110ec:	00801244 	movi	r2,73
 40110f0:	30800005 	stb	r2,0(r6)
 40110f4:	003fdf06 	br	4011074 <OSQDel+0x38>
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 40110f8:	00800044 	movi	r2,1
 40110fc:	28800726 	beq	r5,r2,401111c <OSQDel+0xe0>
 4011100:	9001703a 	wrctl	status,r18
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
             break;

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4011104:	008001c4 	movi	r2,7
 4011108:	30800005 	stb	r2,0(r6)
 401110c:	003fd906 	br	4011074 <OSQDel+0x38>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return (pevent);
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
 4011110:	00800104 	movi	r2,4
 4011114:	30800005 	stb	r2,0(r6)
 4011118:	003fd606 	br	4011074 <OSQDel+0x38>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 401111c:	18003026 	beq	r3,zero,40111e0 <OSQDel+0x1a4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 4011120:	8009883a 	mov	r4,r16
 4011124:	000b883a 	mov	r5,zero
 4011128:	01800104 	movi	r6,4
 401112c:	000f883a 	mov	r7,zero
 4011130:	400ea680 	call	400ea68 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4011134:	80c00283 	ldbu	r3,10(r16)
 4011138:	183ff91e 	bne	r3,zero,4011120 <OSQDel+0xe4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 401113c:	00800fc4 	movi	r2,63
 4011140:	80800385 	stb	r2,14(r16)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4011144:	800003c5 	stb	zero,15(r16)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
             pq->OSQPtr             = OSQFreeList;
 4011148:	01010134 	movhi	r4,1028
 401114c:	21290104 	addi	r4,r4,-23548
 4011150:	20800017 	ldw	r2,0(r4)
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
             pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 4011154:	80c00117 	ldw	r3,4(r16)
             pq->OSQPtr             = OSQFreeList;
             OSQFreeList            = pq;
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011158:	01410134 	movhi	r5,1028
 401115c:	29690304 	addi	r5,r5,-23540
             pevent->OSEventCnt     = 0;
 4011160:	8000020d 	sth	zero,8(r16)
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
             pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
             pq->OSQPtr             = OSQFreeList;
 4011164:	18800015 	stw	r2,0(r3)
             OSQFreeList            = pq;
 4011168:	20c00015 	stw	r3,0(r4)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 401116c:	80000005 	stb	zero,0(r16)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011170:	28800017 	ldw	r2,0(r5)
             pevent->OSEventCnt     = 0;
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4011174:	2c000015 	stw	r16,0(r5)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
             pq->OSQPtr             = OSQFreeList;
             OSQFreeList            = pq;
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011178:	80800115 	stw	r2,4(r16)
 401117c:	9001703a 	wrctl	status,r18
             pevent->OSEventCnt     = 0;
             OSEventFreeList        = pevent;              /* Get next free event control block        */
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4011180:	400ece40 	call	400ece4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4011184:	0021883a 	mov	r16,zero
 4011188:	88000005 	stb	zero,0(r17)
 401118c:	003fb906 	br	4011074 <OSQDel+0x38>
    }
    switch (opt) {
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4011190:	00800fc4 	movi	r2,63
 4011194:	20800385 	stb	r2,14(r4)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4011198:	200003c5 	stb	zero,15(r4)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
                 pq->OSQPtr             = OSQFreeList;
 401119c:	01010134 	movhi	r4,1028
 40111a0:	21290104 	addi	r4,r4,-23548
 40111a4:	20800017 	ldw	r2,0(r4)
             if (tasks_waiting == OS_FALSE) {
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
                 pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 40111a8:	80c00117 	ldw	r3,4(r16)
                 pq->OSQPtr             = OSQFreeList;
                 OSQFreeList            = pq;
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 40111ac:	01410134 	movhi	r5,1028
 40111b0:	29690304 	addi	r5,r5,-23540
                 pevent->OSEventCnt     = 0;
 40111b4:	8000020d 	sth	zero,8(r16)
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
                 pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
                 pq->OSQPtr             = OSQFreeList;
 40111b8:	18800015 	stw	r2,0(r3)
                 OSQFreeList            = pq;
 40111bc:	20c00015 	stw	r3,0(r4)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40111c0:	80000005 	stb	zero,0(r16)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 40111c4:	28800017 	ldw	r2,0(r5)
                 pevent->OSEventCnt     = 0;
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 40111c8:	2c000015 	stw	r16,0(r5)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
                 pq->OSQPtr             = OSQFreeList;
                 OSQFreeList            = pq;
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 40111cc:	80800115 	stw	r2,4(r16)
 40111d0:	9001703a 	wrctl	status,r18
                 pevent->OSEventCnt     = 0;
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 40111d4:	0021883a 	mov	r16,zero
 40111d8:	30000005 	stb	zero,0(r6)
 40111dc:	003fa506 	br	4011074 <OSQDel+0x38>
        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 40111e0:	00800fc4 	movi	r2,63
 40111e4:	20800385 	stb	r2,14(r4)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 40111e8:	200003c5 	stb	zero,15(r4)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
             pq->OSQPtr             = OSQFreeList;
 40111ec:	01010134 	movhi	r4,1028
 40111f0:	21290104 	addi	r4,r4,-23548
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
             pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 40111f4:	80800117 	ldw	r2,4(r16)
             pq->OSQPtr             = OSQFreeList;
 40111f8:	20c00017 	ldw	r3,0(r4)
             OSQFreeList            = pq;
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 40111fc:	01410134 	movhi	r5,1028
 4011200:	29690304 	addi	r5,r5,-23540
             pevent->OSEventCnt     = 0;
 4011204:	8000020d 	sth	zero,8(r16)
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
             pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
             pq->OSQPtr             = OSQFreeList;
 4011208:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 401120c:	20800015 	stw	r2,0(r4)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011210:	80000005 	stb	zero,0(r16)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011214:	28800017 	ldw	r2,0(r5)
             pevent->OSEventCnt     = 0;
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4011218:	2c000015 	stw	r16,0(r5)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
             pq->OSQPtr             = OSQFreeList;
             OSQFreeList            = pq;
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 401121c:	80800115 	stw	r2,4(r16)
 4011220:	9001703a 	wrctl	status,r18
 4011224:	003fd706 	br	4011184 <OSQDel+0x148>

04011228 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 4011228:	200b883a 	mov	r5,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401122c:	01000104 	movi	r4,4
 4011230:	28000426 	beq	r5,zero,4011244 <OSQFlush+0x1c>
        return (OS_ERR_PEVENT_NULL);
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4011234:	28c00003 	ldbu	r3,0(r5)
 4011238:	00800084 	movi	r2,2
 401123c:	01000044 	movi	r4,1
 4011240:	18800226 	beq	r3,r2,401124c <OSQFlush+0x24>
    pq->OSQIn      = pq->OSQStart;
    pq->OSQOut     = pq->OSQStart;
    pq->OSQEntries = 0;
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011244:	2005883a 	mov	r2,r4
 4011248:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401124c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011250:	00bfff84 	movi	r2,-2
 4011254:	2084703a 	and	r2,r4,r2
 4011258:	1001703a 	wrctl	status,r2
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
#endif
    OS_ENTER_CRITICAL();
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 401125c:	28c00117 	ldw	r3,4(r5)
    pq->OSQIn      = pq->OSQStart;
 4011260:	18800117 	ldw	r2,4(r3)
    pq->OSQOut     = pq->OSQStart;
    pq->OSQEntries = 0;
 4011264:	1800058d 	sth	zero,22(r3)
    }
#endif
    OS_ENTER_CRITICAL();
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    pq->OSQIn      = pq->OSQStart;
    pq->OSQOut     = pq->OSQStart;
 4011268:	18800415 	stw	r2,16(r3)
        return (OS_ERR_EVENT_TYPE);
    }
#endif
    OS_ENTER_CRITICAL();
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    pq->OSQIn      = pq->OSQStart;
 401126c:	18800315 	stw	r2,12(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011270:	2001703a 	wrctl	status,r4
 4011274:	0009883a 	mov	r4,zero
    pq->OSQOut     = pq->OSQStart;
    pq->OSQEntries = 0;
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011278:	2005883a 	mov	r2,r4
 401127c:	f800283a 	ret

04011280 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4011280:	defff904 	addi	sp,sp,-28
 4011284:	dc400115 	stw	r17,4(sp)
 4011288:	dc000015 	stw	r16,0(sp)
 401128c:	dfc00615 	stw	ra,24(sp)
 4011290:	dd400515 	stw	r21,20(sp)
 4011294:	dd000415 	stw	r20,16(sp)
 4011298:	dcc00315 	stw	r19,12(sp)
 401129c:	dc800215 	stw	r18,8(sp)
 40112a0:	3023883a 	mov	r17,r6
 40112a4:	280f883a 	mov	r7,r5
 40112a8:	2021883a 	mov	r16,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40112ac:	30005226 	beq	r6,zero,40113f8 <OSQPend+0x178>
        return ((void *)0);
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 40112b0:	20005c26 	beq	r4,zero,4011424 <OSQPend+0x1a4>
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 40112b4:	24800003 	ldbu	r18,0(r4)
 40112b8:	00800084 	movi	r2,2
 40112bc:	9080271e 	bne	r18,r2,401135c <OSQPend+0xdc>
        *perr = OS_ERR_EVENT_TYPE;
        return ((void *)0);
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 40112c0:	00810134 	movhi	r2,1028
 40112c4:	10a90404 	addi	r2,r2,-23536
 40112c8:	10c00003 	ldbu	r3,0(r2)
 40112cc:	18004f1e 	bne	r3,zero,401140c <OSQPend+0x18c>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
        return ((void *)0);
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 40112d0:	00810134 	movhi	r2,1028
 40112d4:	10a8f604 	addi	r2,r2,-23592
 40112d8:	10c00003 	ldbu	r3,0(r2)
 40112dc:	18001b1e 	bne	r3,zero,401134c <OSQPend+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40112e0:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40112e4:	057fff84 	movi	r21,-2
 40112e8:	9d44703a 	and	r2,r19,r21
 40112ec:	1001703a 	wrctl	status,r2
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 40112f0:	21800117 	ldw	r6,4(r4)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 40112f4:	3080058b 	ldhu	r2,22(r6)
 40112f8:	10001c26 	beq	r2,zero,401136c <OSQPend+0xec>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 40112fc:	31000417 	ldw	r4,16(r6)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4011300:	31400217 	ldw	r5,8(r6)
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4011304:	10bfffc4 	addi	r2,r2,-1
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4011308:	20c00104 	addi	r3,r4,4
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 401130c:	3080058d 	sth	r2,22(r6)
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4011310:	30c00415 	stw	r3,16(r6)
 4011314:	21000017 	ldw	r4,0(r4)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4011318:	19403f26 	beq	r3,r5,4011418 <OSQPend+0x198>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401131c:	9801703a 	wrctl	status,r19
            pq->OSQOut = pq->OSQStart;
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4011320:	88000005 	stb	zero,0(r17)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
}
 4011324:	2005883a 	mov	r2,r4
 4011328:	dfc00617 	ldw	ra,24(sp)
 401132c:	dd400517 	ldw	r21,20(sp)
 4011330:	dd000417 	ldw	r20,16(sp)
 4011334:	dcc00317 	ldw	r19,12(sp)
 4011338:	dc800217 	ldw	r18,8(sp)
 401133c:	dc400117 	ldw	r17,4(sp)
 4011340:	dc000017 	ldw	r16,0(sp)
 4011344:	dec00704 	addi	sp,sp,28
 4011348:	f800283a 	ret
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
        return ((void *)0);
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 401134c:	00800344 	movi	r2,13
 4011350:	0009883a 	mov	r4,zero
 4011354:	30800005 	stb	r2,0(r6)
 4011358:	003ff206 	br	4011324 <OSQPend+0xa4>
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
        *perr = OS_ERR_EVENT_TYPE;
 401135c:	00800044 	movi	r2,1
 4011360:	0009883a 	mov	r4,zero
 4011364:	30800005 	stb	r2,0(r6)
 4011368:	003fee06 	br	4011324 <OSQPend+0xa4>
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
        return (pmsg);                           /* Return message received                            */
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 401136c:	05010134 	movhi	r20,1028
 4011370:	a5290504 	addi	r20,r20,-23532
 4011374:	a1400017 	ldw	r5,0(r20)
 4011378:	28800c03 	ldbu	r2,48(r5)
 401137c:	10800114 	ori	r2,r2,4
 4011380:	28800c05 	stb	r2,48(r5)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4011384:	a0c00017 	ldw	r3,0(r20)
 4011388:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 401138c:	a0800017 	ldw	r2,0(r20)
 4011390:	11c00b8d 	sth	r7,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4011394:	400e88c0 	call	400e88c <OS_EventTaskWait>
 4011398:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 401139c:	400ece40 	call	400ece4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40113a0:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40113a4:	9d44703a 	and	r2,r19,r21
 40113a8:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 40113ac:	a1000017 	ldw	r4,0(r20)
 40113b0:	20800c43 	ldbu	r2,49(r4)
 40113b4:	10001226 	beq	r2,zero,4011400 <OSQPend+0x180>
 40113b8:	14801e26 	beq	r2,r18,4011434 <OSQPend+0x1b4>
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
             break;

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 40113bc:	800b883a 	mov	r5,r16
 40113c0:	400e9b80 	call	400e9b8 <OS_EventTaskRemove>
             pmsg = (void *)0;
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 40113c4:	00800284 	movi	r2,10
 40113c8:	88800005 	stb	r2,0(r17)
 40113cc:	0009883a 	mov	r4,zero
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 40113d0:	a0800017 	ldw	r2,0(r20)
 40113d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 40113d8:	a0c00017 	ldw	r3,0(r20)
 40113dc:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 40113e0:	a0800017 	ldw	r2,0(r20)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 40113e4:	10000915 	stw	zero,36(r2)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 40113e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40113ec:	10000815 	stw	zero,32(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40113f0:	9801703a 	wrctl	status,r19
 40113f4:	003fcb06 	br	4011324 <OSQPend+0xa4>
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40113f8:	0009883a 	mov	r4,zero
 40113fc:	003fc906 	br	4011324 <OSQPend+0xa4>
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 4011400:	21000917 	ldw	r4,36(r4)
            *perr =  OS_ERR_NONE;
 4011404:	88000005 	stb	zero,0(r17)
 4011408:	003ff106 	br	40113d0 <OSQPend+0x150>
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
        *perr = OS_ERR_EVENT_TYPE;
        return ((void *)0);
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 401140c:	0009883a 	mov	r4,zero
 4011410:	34800005 	stb	r18,0(r6)
 4011414:	003fc306 	br	4011324 <OSQPend+0xa4>
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
            pq->OSQOut = pq->OSQStart;
 4011418:	30800117 	ldw	r2,4(r6)
 401141c:	30800415 	stw	r2,16(r6)
 4011420:	003fbe06 	br	401131c <OSQPend+0x9c>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return ((void *)0);
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
 4011424:	00800104 	movi	r2,4
 4011428:	0009883a 	mov	r4,zero
 401142c:	30800005 	stb	r2,0(r6)
 4011430:	003fbc06 	br	4011324 <OSQPend+0xa4>
            *perr =  OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4011434:	00800384 	movi	r2,14
 4011438:	0009883a 	mov	r4,zero
 401143c:	88800005 	stb	r2,0(r17)
 4011440:	003fe306 	br	40113d0 <OSQPend+0x150>

04011444 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4011444:	defffb04 	addi	sp,sp,-20
 4011448:	dc400115 	stw	r17,4(sp)
 401144c:	dc000015 	stw	r16,0(sp)
 4011450:	dfc00415 	stw	ra,16(sp)
 4011454:	dcc00315 	stw	r19,12(sp)
 4011458:	dc800215 	stw	r18,8(sp)
 401145c:	3023883a 	mov	r17,r6
 4011460:	2021883a 	mov	r16,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4011464:	30001b26 	beq	r6,zero,40114d4 <OSQPendAbort+0x90>
        return (0);
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4011468:	20000e26 	beq	r4,zero,40114a4 <OSQPendAbort+0x60>
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 401146c:	21c00003 	ldbu	r7,0(r4)
 4011470:	00800084 	movi	r2,2
 4011474:	38802026 	beq	r7,r2,40114f8 <OSQPendAbort+0xb4>
        *perr = OS_ERR_EVENT_TYPE;
 4011478:	00800044 	movi	r2,1
 401147c:	0021883a 	mov	r16,zero
 4011480:	30800005 	stb	r2,0(r6)
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (0);                                            /* No tasks waiting on queue                */
}
 4011484:	8005883a 	mov	r2,r16
 4011488:	dfc00417 	ldw	ra,16(sp)
 401148c:	dcc00317 	ldw	r19,12(sp)
 4011490:	dc800217 	ldw	r18,8(sp)
 4011494:	dc400117 	ldw	r17,4(sp)
 4011498:	dc000017 	ldw	r16,0(sp)
 401149c:	dec00504 	addi	sp,sp,20
 40114a0:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return (0);
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
 40114a4:	00800104 	movi	r2,4
 40114a8:	30800005 	stb	r2,0(r6)
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (0);                                            /* No tasks waiting on queue                */
}
 40114ac:	8005883a 	mov	r2,r16
 40114b0:	dfc00417 	ldw	ra,16(sp)
 40114b4:	dcc00317 	ldw	r19,12(sp)
 40114b8:	dc800217 	ldw	r18,8(sp)
 40114bc:	dc400117 	ldw	r17,4(sp)
 40114c0:	dc000017 	ldw	r16,0(sp)
 40114c4:	dec00504 	addi	sp,sp,20
 40114c8:	f800283a 	ret
 40114cc:	9801703a 	wrctl	status,r19
        OS_Sched();                                        /* Find HPT ready to run                    */
        *perr = OS_ERR_PEND_ABORT;
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40114d0:	30000005 	stb	zero,0(r6)
 40114d4:	0021883a 	mov	r16,zero
    return (0);                                            /* No tasks waiting on queue                */
}
 40114d8:	8005883a 	mov	r2,r16
 40114dc:	dfc00417 	ldw	ra,16(sp)
 40114e0:	dcc00317 	ldw	r19,12(sp)
 40114e4:	dc800217 	ldw	r18,8(sp)
 40114e8:	dc400117 	ldw	r17,4(sp)
 40114ec:	dc000017 	ldw	r16,0(sp)
 40114f0:	dec00504 	addi	sp,sp,20
 40114f4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40114f8:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40114fc:	00bfff84 	movi	r2,-2
 4011500:	9884703a 	and	r2,r19,r2
 4011504:	1001703a 	wrctl	status,r2
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4011508:	20c00283 	ldbu	r3,10(r4)
 401150c:	183fef26 	beq	r3,zero,40114cc <OSQPendAbort+0x88>
        nbr_tasks = 0;
        switch (opt) {
 4011510:	28803fcc 	andi	r2,r5,255
 4011514:	04800044 	movi	r18,1
 4011518:	14800926 	beq	r2,r18,4011540 <OSQPendAbort+0xfc>
                 }
                 break;
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 401151c:	000b883a 	mov	r5,zero
 4011520:	01800104 	movi	r6,4
 4011524:	400ea680 	call	400ea68 <OS_EventTaskRdy>
 4011528:	9021883a 	mov	r16,r18
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401152c:	9801703a 	wrctl	status,r19
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 4011530:	400ece40 	call	400ece4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4011534:	00800384 	movi	r2,14
 4011538:	88800005 	stb	r2,0(r17)
 401153c:	003fd106 	br	4011484 <OSQPendAbort+0x40>
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
 4011540:	0025883a 	mov	r18,zero
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4011544:	8009883a 	mov	r4,r16
 4011548:	000b883a 	mov	r5,zero
 401154c:	01800104 	movi	r6,4
 4011550:	01c00084 	movi	r7,2
 4011554:	400ea680 	call	400ea68 <OS_EventTaskRdy>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4011558:	80c00283 	ldbu	r3,10(r16)
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
 401155c:	94800044 	addi	r18,r18,1
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4011560:	183ff81e 	bne	r3,zero,4011544 <OSQPendAbort+0x100>
 4011564:	94003fcc 	andi	r16,r18,255
 4011568:	003ff006 	br	401152c <OSQPendAbort+0xe8>

0401156c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 401156c:	defffe04 	addi	sp,sp,-8
 4011570:	dfc00115 	stw	ra,4(sp)
 4011574:	dc000015 	stw	r16,0(sp)
 4011578:	280f883a 	mov	r7,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 401157c:	20001f26 	beq	r4,zero,40115fc <OSQPost+0x90>
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4011580:	20c00003 	ldbu	r3,0(r4)
 4011584:	00800084 	movi	r2,2
 4011588:	18800526 	beq	r3,r2,40115a0 <OSQPost+0x34>
 401158c:	00800044 	movi	r2,1
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
        pq->OSQIn = pq->OSQStart;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011590:	dfc00117 	ldw	ra,4(sp)
 4011594:	dc000017 	ldw	r16,0(sp)
 4011598:	dec00204 	addi	sp,sp,8
 401159c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40115a0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40115a4:	00bfff84 	movi	r2,-2
 40115a8:	8084703a 	and	r2,r16,r2
 40115ac:	1001703a 	wrctl	status,r2
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 40115b0:	20c00283 	ldbu	r3,10(r4)
 40115b4:	18000a1e 	bne	r3,zero,40115e0 <OSQPost+0x74>
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
        return (OS_ERR_NONE);
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 40115b8:	21800117 	ldw	r6,4(r4)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 40115bc:	3100058b 	ldhu	r4,22(r6)
 40115c0:	3080050b 	ldhu	r2,20(r6)
 40115c4:	20801236 	bltu	r4,r2,4011610 <OSQPost+0xa4>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40115c8:	8001703a 	wrctl	status,r16
 40115cc:	00800784 	movi	r2,30
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
        pq->OSQIn = pq->OSQStart;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 40115d0:	dfc00117 	ldw	ra,4(sp)
 40115d4:	dc000017 	ldw	r16,0(sp)
 40115d8:	dec00204 	addi	sp,sp,8
 40115dc:	f800283a 	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40115e0:	01800104 	movi	r6,4
 40115e4:	000f883a 	mov	r7,zero
 40115e8:	400ea680 	call	400ea68 <OS_EventTaskRdy>
 40115ec:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 40115f0:	400ece40 	call	400ece4 <OS_Sched>
 40115f4:	0005883a 	mov	r2,zero
 40115f8:	003fe506 	br	4011590 <OSQPost+0x24>
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 40115fc:	00800104 	movi	r2,4
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
        pq->OSQIn = pq->OSQStart;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011600:	dfc00117 	ldw	ra,4(sp)
 4011604:	dc000017 	ldw	r16,0(sp)
 4011608:	dec00204 	addi	sp,sp,8
 401160c:	f800283a 	ret
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 4011610:	30800317 	ldw	r2,12(r6)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4011614:	31400217 	ldw	r5,8(r6)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4011618:	21000044 	addi	r4,r4,1
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 401161c:	10c00104 	addi	r3,r2,4
 4011620:	11c00015 	stw	r7,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4011624:	3100058d 	sth	r4,22(r6)
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 4011628:	30c00315 	stw	r3,12(r6)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 401162c:	19400326 	beq	r3,r5,401163c <OSQPost+0xd0>
 4011630:	8001703a 	wrctl	status,r16
 4011634:	0005883a 	mov	r2,zero
 4011638:	003fd506 	br	4011590 <OSQPost+0x24>
        pq->OSQIn = pq->OSQStart;
 401163c:	30800117 	ldw	r2,4(r6)
 4011640:	30800315 	stw	r2,12(r6)
 4011644:	003ffa06 	br	4011630 <OSQPost+0xc4>

04011648 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4011648:	defffe04 	addi	sp,sp,-8
 401164c:	dfc00115 	stw	ra,4(sp)
 4011650:	dc000015 	stw	r16,0(sp)
 4011654:	280f883a 	mov	r7,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011658:	20001f26 	beq	r4,zero,40116d8 <OSQPostFront+0x90>
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401165c:	20c00003 	ldbu	r3,0(r4)
 4011660:	00800084 	movi	r2,2
 4011664:	18800526 	beq	r3,r2,401167c <OSQPostFront+0x34>
 4011668:	00800044 	movi	r2,1
    pq->OSQOut--;
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 401166c:	dfc00117 	ldw	ra,4(sp)
 4011670:	dc000017 	ldw	r16,0(sp)
 4011674:	dec00204 	addi	sp,sp,8
 4011678:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401167c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011680:	00bfff84 	movi	r2,-2
 4011684:	8084703a 	and	r2,r16,r2
 4011688:	1001703a 	wrctl	status,r2
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 401168c:	20c00283 	ldbu	r3,10(r4)
 4011690:	18000a1e 	bne	r3,zero,40116bc <OSQPostFront+0x74>
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
        return (OS_ERR_NONE);
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4011694:	21000117 	ldw	r4,4(r4)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4011698:	20c0058b 	ldhu	r3,22(r4)
 401169c:	2080050b 	ldhu	r2,20(r4)
 40116a0:	18801236 	bltu	r3,r2,40116ec <OSQPostFront+0xa4>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40116a4:	8001703a 	wrctl	status,r16
 40116a8:	00800784 	movi	r2,30
    pq->OSQOut--;
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 40116ac:	dfc00117 	ldw	ra,4(sp)
 40116b0:	dc000017 	ldw	r16,0(sp)
 40116b4:	dec00204 	addi	sp,sp,8
 40116b8:	f800283a 	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40116bc:	01800104 	movi	r6,4
 40116c0:	000f883a 	mov	r7,zero
 40116c4:	400ea680 	call	400ea68 <OS_EventTaskRdy>
 40116c8:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 40116cc:	400ece40 	call	400ece4 <OS_Sched>
 40116d0:	0005883a 	mov	r2,zero
 40116d4:	003fe506 	br	401166c <OSQPostFront+0x24>
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40116d8:	00800104 	movi	r2,4
    pq->OSQOut--;
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 40116dc:	dfc00117 	ldw	ra,4(sp)
 40116e0:	dc000017 	ldw	r16,0(sp)
 40116e4:	dec00204 	addi	sp,sp,8
 40116e8:	f800283a 	ret
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 40116ec:	20c00417 	ldw	r3,16(r4)
 40116f0:	20800117 	ldw	r2,4(r4)
 40116f4:	18800926 	beq	r3,r2,401171c <OSQPostFront+0xd4>
        pq->OSQOut = pq->OSQEnd;
    }
    pq->OSQOut--;
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40116f8:	2080058b 	ldhu	r2,22(r4)
        return (OS_ERR_Q_FULL);
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
        pq->OSQOut = pq->OSQEnd;
    }
    pq->OSQOut--;
 40116fc:	18ffff04 	addi	r3,r3,-4
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 4011700:	19c00015 	stw	r7,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4011704:	10800044 	addi	r2,r2,1
 4011708:	2080058d 	sth	r2,22(r4)
        return (OS_ERR_Q_FULL);
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
        pq->OSQOut = pq->OSQEnd;
    }
    pq->OSQOut--;
 401170c:	20c00415 	stw	r3,16(r4)
 4011710:	8001703a 	wrctl	status,r16
 4011714:	0005883a 	mov	r2,zero
 4011718:	003fd406 	br	401166c <OSQPostFront+0x24>
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
        pq->OSQOut = pq->OSQEnd;
 401171c:	20c00217 	ldw	r3,8(r4)
 4011720:	20c00415 	stw	r3,16(r4)
 4011724:	003ff406 	br	40116f8 <OSQPostFront+0xb0>

04011728 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 4011728:	defffb04 	addi	sp,sp,-20
 401172c:	dc400115 	stw	r17,4(sp)
 4011730:	dc000015 	stw	r16,0(sp)
 4011734:	dfc00415 	stw	ra,16(sp)
 4011738:	dcc00315 	stw	r19,12(sp)
 401173c:	dc800215 	stw	r18,8(sp)
 4011740:	2021883a 	mov	r16,r4
 4011744:	2823883a 	mov	r17,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011748:	20003126 	beq	r4,zero,4011810 <OSQPostOpt+0xe8>
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401174c:	21c00003 	ldbu	r7,0(r4)
 4011750:	00800084 	movi	r2,2
 4011754:	38800826 	beq	r7,r2,4011778 <OSQPostOpt+0x50>
 4011758:	00800044 	movi	r2,1
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 401175c:	dfc00417 	ldw	ra,16(sp)
 4011760:	dcc00317 	ldw	r19,12(sp)
 4011764:	dc800217 	ldw	r18,8(sp)
 4011768:	dc400117 	ldw	r17,4(sp)
 401176c:	dc000017 	ldw	r16,0(sp)
 4011770:	dec00504 	addi	sp,sp,20
 4011774:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011778:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401177c:	00bfff84 	movi	r2,-2
 4011780:	9884703a 	and	r2,r19,r2
 4011784:	1001703a 	wrctl	status,r2
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4011788:	20c00283 	ldbu	r3,10(r4)
 401178c:	18000d1e 	bne	r3,zero,40117c4 <OSQPostOpt+0x9c>
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
            OS_Sched();                               /* Find highest priority task ready to run       */
        }
        return (OS_ERR_NONE);
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4011790:	21400117 	ldw	r5,4(r4)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4011794:	28c0058b 	ldhu	r3,22(r5)
 4011798:	2880050b 	ldhu	r2,20(r5)
 401179c:	18802836 	bltu	r3,r2,4011840 <OSQPostOpt+0x118>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40117a0:	9801703a 	wrctl	status,r19
 40117a4:	00800784 	movi	r2,30
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 40117a8:	dfc00417 	ldw	ra,16(sp)
 40117ac:	dcc00317 	ldw	r19,12(sp)
 40117b0:	dc800217 	ldw	r18,8(sp)
 40117b4:	dc400117 	ldw	r17,4(sp)
 40117b8:	dc000017 	ldw	r16,0(sp)
 40117bc:	dec00504 	addi	sp,sp,20
 40117c0:	f800283a 	ret
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 40117c4:	34803fcc 	andi	r18,r6,255
 40117c8:	9080004c 	andi	r2,r18,1
 40117cc:	1005003a 	cmpeq	r2,r2,zero
 40117d0:	1000171e 	bne	r2,zero,4011830 <OSQPostOpt+0x108>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40117d4:	8009883a 	mov	r4,r16
 40117d8:	880b883a 	mov	r5,r17
 40117dc:	01800104 	movi	r6,4
 40117e0:	000f883a 	mov	r7,zero
 40117e4:	400ea680 	call	400ea68 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 40117e8:	80c00283 	ldbu	r3,10(r16)
 40117ec:	183ff91e 	bne	r3,zero,40117d4 <OSQPostOpt+0xac>
 40117f0:	9801703a 	wrctl	status,r19
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 40117f4:	9080010c 	andi	r2,r18,4
 40117f8:	10000226 	beq	r2,zero,4011804 <OSQPostOpt+0xdc>
 40117fc:	0005883a 	mov	r2,zero
 4011800:	003fd606 	br	401175c <OSQPostOpt+0x34>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4011804:	400ece40 	call	400ece4 <OS_Sched>
 4011808:	0005883a 	mov	r2,zero
 401180c:	003fd306 	br	401175c <OSQPostOpt+0x34>
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011810:	00800104 	movi	r2,4
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011814:	dfc00417 	ldw	ra,16(sp)
 4011818:	dcc00317 	ldw	r19,12(sp)
 401181c:	dc800217 	ldw	r18,8(sp)
 4011820:	dc400117 	ldw	r17,4(sp)
 4011824:	dc000017 	ldw	r16,0(sp)
 4011828:	dec00504 	addi	sp,sp,20
 401182c:	f800283a 	ret
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4011830:	01800104 	movi	r6,4
 4011834:	000f883a 	mov	r7,zero
 4011838:	400ea680 	call	400ea68 <OS_EventTaskRdy>
 401183c:	003fec06 	br	40117f0 <OSQPostOpt+0xc8>
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4011840:	3984703a 	and	r2,r7,r6
 4011844:	10000c26 	beq	r2,zero,4011878 <OSQPostOpt+0x150>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4011848:	28c00417 	ldw	r3,16(r5)
 401184c:	28800117 	ldw	r2,4(r5)
 4011850:	18801226 	beq	r3,r2,401189c <OSQPostOpt+0x174>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
        }
        pq->OSQOut--;
 4011854:	18bfff04 	addi	r2,r3,-4
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4011858:	14400015 	stw	r17,0(r2)
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
        }
        pq->OSQOut--;
 401185c:	28800415 	stw	r2,16(r5)
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
            pq->OSQIn = pq->OSQStart;
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4011860:	2880058b 	ldhu	r2,22(r5)
 4011864:	10800044 	addi	r2,r2,1
 4011868:	2880058d 	sth	r2,22(r5)
 401186c:	9801703a 	wrctl	status,r19
 4011870:	0005883a 	mov	r2,zero
 4011874:	003fb906 	br	401175c <OSQPostOpt+0x34>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
        }
        pq->OSQOut--;
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4011878:	28800317 	ldw	r2,12(r5)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 401187c:	29000217 	ldw	r4,8(r5)
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
        }
        pq->OSQOut--;
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4011880:	10c00104 	addi	r3,r2,4
 4011884:	14400015 	stw	r17,0(r2)
 4011888:	28c00315 	stw	r3,12(r5)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 401188c:	193ff41e 	bne	r3,r4,4011860 <OSQPostOpt+0x138>
            pq->OSQIn = pq->OSQStart;
 4011890:	28800117 	ldw	r2,4(r5)
 4011894:	28800315 	stw	r2,12(r5)
 4011898:	003ff106 	br	4011860 <OSQPostOpt+0x138>
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 401189c:	28c00217 	ldw	r3,8(r5)
 40118a0:	28c00415 	stw	r3,16(r5)
 40118a4:	003feb06 	br	4011854 <OSQPostOpt+0x12c>

040118a8 <OSSemSet>:
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40118a8:	30001326 	beq	r6,zero,40118f8 <OSSemSet+0x50>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40118ac:	20001326 	beq	r4,zero,40118fc <OSSemSet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40118b0:	20c00003 	ldbu	r3,0(r4)
 40118b4:	008000c4 	movi	r2,3
 40118b8:	18800326 	beq	r3,r2,40118c8 <OSSemSet+0x20>
        *perr = OS_ERR_EVENT_TYPE;
 40118bc:	00800044 	movi	r2,1
 40118c0:	30800005 	stb	r2,0(r6)
 40118c4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40118c8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40118cc:	00bfff84 	movi	r2,-2
 40118d0:	1884703a 	and	r2,r3,r2
 40118d4:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    *perr = OS_ERR_NONE;
 40118d8:	30000005 	stb	zero,0(r6)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 40118dc:	2080020b 	ldhu	r2,8(r4)
 40118e0:	1000091e 	bne	r2,zero,4011908 <OSSemSet+0x60>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 40118e4:	20800283 	ldbu	r2,10(r4)
 40118e8:	10000726 	beq	r2,zero,4011908 <OSSemSet+0x60>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 40118ec:	00801244 	movi	r2,73
 40118f0:	30800005 	stb	r2,0(r6)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40118f4:	1801703a 	wrctl	status,r3
 40118f8:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
 40118fc:	00800104 	movi	r2,4
 4011900:	30800005 	stb	r2,0(r6)
 4011904:	f800283a 	ret
    *perr = OS_ERR_NONE;
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4011908:	2140020d 	sth	r5,8(r4)
 401190c:	1801703a 	wrctl	status,r3
 4011910:	003ff906 	br	40118f8 <OSSemSet+0x50>

04011914 <OSSemAccept>:
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011914:	20000326 	beq	r4,zero,4011924 <OSSemAccept+0x10>
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4011918:	20c00003 	ldbu	r3,0(r4)
 401191c:	008000c4 	movi	r2,3
 4011920:	18800226 	beq	r3,r2,401192c <OSSemAccept+0x18>
    cnt = pevent->OSEventCnt;
    if (cnt > 0) {                                    /* See if resource is available                  */
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4011924:	0005883a 	mov	r2,zero
}
 4011928:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401192c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011930:	00bfff84 	movi	r2,-2
 4011934:	3084703a 	and	r2,r6,r2
 4011938:	1001703a 	wrctl	status,r2
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (0);
    }
    OS_ENTER_CRITICAL();
    cnt = pevent->OSEventCnt;
 401193c:	20c0020b 	ldhu	r3,8(r4)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4011940:	18bfffcc 	andi	r2,r3,65535
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4011944:	197fffc4 	addi	r5,r3,-1
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (0);
    }
    OS_ENTER_CRITICAL();
    cnt = pevent->OSEventCnt;
    if (cnt > 0) {                                    /* See if resource is available                  */
 4011948:	1000021e 	bne	r2,zero,4011954 <OSSemAccept+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401194c:	3001703a 	wrctl	status,r6
 4011950:	f800283a 	ret
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4011954:	2140020d 	sth	r5,8(r4)
 4011958:	3001703a 	wrctl	status,r6
 401195c:	f800283a 	ret

04011960 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 4011960:	defffe04 	addi	sp,sp,-8
 4011964:	dc000015 	stw	r16,0(sp)
 4011968:	dfc00115 	stw	ra,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401196c:	00810134 	movhi	r2,1028
 4011970:	10a90404 	addi	r2,r2,-23536
 4011974:	10c00003 	ldbu	r3,0(r2)
 4011978:	0021883a 	mov	r16,zero
 401197c:	18000526 	beq	r3,zero,4011994 <OSSemCreate+0x34>
        pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    }
    return (pevent);
}
 4011980:	8005883a 	mov	r2,r16
 4011984:	dfc00117 	ldw	ra,4(sp)
 4011988:	dc000017 	ldw	r16,0(sp)
 401198c:	dec00204 	addi	sp,sp,8
 4011990:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011994:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011998:	00bfff84 	movi	r2,-2
 401199c:	2884703a 	and	r2,r5,r2
 40119a0:	1001703a 	wrctl	status,r2

    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 40119a4:	00c10134 	movhi	r3,1028
 40119a8:	18e90304 	addi	r3,r3,-23540
 40119ac:	1c000017 	ldw	r16,0(r3)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 40119b0:	80001126 	beq	r16,zero,40119f8 <OSSemCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 40119b4:	80800117 	ldw	r2,4(r16)
 40119b8:	18800015 	stw	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40119bc:	2801703a 	wrctl	status,r5
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 40119c0:	008000c4 	movi	r2,3
 40119c4:	80800005 	stb	r2,0(r16)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 40119c8:	00800fc4 	movi	r2,63
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 40119cc:	8100020d 	sth	r4,8(r16)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 40119d0:	80800385 	stb	r2,14(r16)
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 40119d4:	80000115 	stw	zero,4(r16)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
        pevent->OSEventName[1] = OS_ASCII_NUL;
 40119d8:	800003c5 	stb	zero,15(r16)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 40119dc:	8009883a 	mov	r4,r16
 40119e0:	400eb5c0 	call	400eb5c <OS_EventWaitListInit>
    }
    return (pevent);
}
 40119e4:	8005883a 	mov	r2,r16
 40119e8:	dfc00117 	ldw	ra,4(sp)
 40119ec:	dc000017 	ldw	r16,0(sp)
 40119f0:	dec00204 	addi	sp,sp,8
 40119f4:	f800283a 	ret
 40119f8:	2801703a 	wrctl	status,r5
 40119fc:	003fe006 	br	4011980 <OSSemCreate+0x20>

04011a00 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4011a00:	defffc04 	addi	sp,sp,-16
 4011a04:	dc400115 	stw	r17,4(sp)
 4011a08:	dc000015 	stw	r16,0(sp)
 4011a0c:	dfc00315 	stw	ra,12(sp)
 4011a10:	dc800215 	stw	r18,8(sp)
 4011a14:	3023883a 	mov	r17,r6
 4011a18:	2021883a 	mov	r16,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4011a1c:	30000626 	beq	r6,zero,4011a38 <OSSemDel+0x38>
        return (pevent);
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4011a20:	20002c26 	beq	r4,zero,4011ad4 <OSSemDel+0xd4>
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4011a24:	20c00003 	ldbu	r3,0(r4)
 4011a28:	008000c4 	movi	r2,3
 4011a2c:	18800926 	beq	r3,r2,4011a54 <OSSemDel+0x54>
        *perr = OS_ERR_EVENT_TYPE;
 4011a30:	00800044 	movi	r2,1
 4011a34:	30800005 	stb	r2,0(r6)
             *perr                  = OS_ERR_INVALID_OPT;
             pevent_return          = pevent;
             break;
    }
    return (pevent_return);
}
 4011a38:	8005883a 	mov	r2,r16
 4011a3c:	dfc00317 	ldw	ra,12(sp)
 4011a40:	dc800217 	ldw	r18,8(sp)
 4011a44:	dc400117 	ldw	r17,4(sp)
 4011a48:	dc000017 	ldw	r16,0(sp)
 4011a4c:	dec00404 	addi	sp,sp,16
 4011a50:	f800283a 	ret
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (pevent);
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4011a54:	00810134 	movhi	r2,1028
 4011a58:	10a90404 	addi	r2,r2,-23536
 4011a5c:	10c00003 	ldbu	r3,0(r2)
 4011a60:	18000926 	beq	r3,zero,4011a88 <OSSemDel+0x88>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 4011a64:	008003c4 	movi	r2,15
 4011a68:	30800005 	stb	r2,0(r6)
             *perr                  = OS_ERR_INVALID_OPT;
             pevent_return          = pevent;
             break;
    }
    return (pevent_return);
}
 4011a6c:	8005883a 	mov	r2,r16
 4011a70:	dfc00317 	ldw	ra,12(sp)
 4011a74:	dc800217 	ldw	r18,8(sp)
 4011a78:	dc400117 	ldw	r17,4(sp)
 4011a7c:	dc000017 	ldw	r16,0(sp)
 4011a80:	dec00404 	addi	sp,sp,16
 4011a84:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011a88:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011a8c:	00bfff84 	movi	r2,-2
 4011a90:	9084703a 	and	r2,r18,r2
 4011a94:	1001703a 	wrctl	status,r2
 4011a98:	20c00283 	ldbu	r3,10(r4)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 4011a9c:	29403fcc 	andi	r5,r5,255
 4011aa0:	1806c03a 	cmpne	r3,r3,zero
 4011aa4:	2800051e 	bne	r5,zero,4011abc <OSSemDel+0xbc>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4011aa8:	18002426 	beq	r3,zero,4011b3c <OSSemDel+0x13c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011aac:	9001703a 	wrctl	status,r18
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4011ab0:	00801244 	movi	r2,73
 4011ab4:	30800005 	stb	r2,0(r6)
 4011ab8:	003fdf06 	br	4011a38 <OSSemDel+0x38>
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 4011abc:	00800044 	movi	r2,1
 4011ac0:	28800726 	beq	r5,r2,4011ae0 <OSSemDel+0xe0>
 4011ac4:	9001703a 	wrctl	status,r18
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
             break;

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4011ac8:	008001c4 	movi	r2,7
 4011acc:	30800005 	stb	r2,0(r6)
 4011ad0:	003fd906 	br	4011a38 <OSSemDel+0x38>
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return (pevent);
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
 4011ad4:	00800104 	movi	r2,4
 4011ad8:	30800005 	stb	r2,0(r6)
 4011adc:	003fd606 	br	4011a38 <OSSemDel+0x38>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4011ae0:	18002426 	beq	r3,zero,4011b74 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4011ae4:	8009883a 	mov	r4,r16
 4011ae8:	000b883a 	mov	r5,zero
 4011aec:	01800044 	movi	r6,1
 4011af0:	000f883a 	mov	r7,zero
 4011af4:	400ea680 	call	400ea68 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4011af8:	80c00283 	ldbu	r3,10(r16)
 4011afc:	183ff91e 	bne	r3,zero,4011ae4 <OSSemDel+0xe4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4011b00:	00800fc4 	movi	r2,63
 4011b04:	80800385 	stb	r2,14(r16)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4011b08:	800003c5 	stb	zero,15(r16)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011b0c:	80000005 	stb	zero,0(r16)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011b10:	00810134 	movhi	r2,1028
 4011b14:	10a90304 	addi	r2,r2,-23540
 4011b18:	10c00017 	ldw	r3,0(r2)
             pevent->OSEventCnt     = 0;
 4011b1c:	8000020d 	sth	zero,8(r16)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4011b20:	14000015 	stw	r16,0(r2)
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
             pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011b24:	80c00115 	stw	r3,4(r16)
 4011b28:	9001703a 	wrctl	status,r18
             pevent->OSEventCnt     = 0;
             OSEventFreeList        = pevent;              /* Get next free event control block        */
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4011b2c:	400ece40 	call	400ece4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4011b30:	0021883a 	mov	r16,zero
 4011b34:	88000005 	stb	zero,0(r17)
 4011b38:	003fbf06 	br	4011a38 <OSSemDel+0x38>
    }
    switch (opt) {
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4011b3c:	00800fc4 	movi	r2,63
 4011b40:	20800385 	stb	r2,14(r4)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4011b44:	200003c5 	stb	zero,15(r4)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011b48:	20000005 	stb	zero,0(r4)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4011b4c:	00810134 	movhi	r2,1028
 4011b50:	10a90304 	addi	r2,r2,-23540
 4011b54:	10c00017 	ldw	r3,0(r2)
                 pevent->OSEventCnt     = 0;
 4011b58:	2000020d 	sth	zero,8(r4)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4011b5c:	11000015 	stw	r4,0(r2)
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
                 pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4011b60:	20c00115 	stw	r3,4(r4)
 4011b64:	9001703a 	wrctl	status,r18
                 pevent->OSEventCnt     = 0;
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4011b68:	0021883a 	mov	r16,zero
 4011b6c:	30000005 	stb	zero,0(r6)
 4011b70:	003fb106 	br	4011a38 <OSSemDel+0x38>
        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4011b74:	00800fc4 	movi	r2,63
 4011b78:	20800385 	stb	r2,14(r4)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4011b7c:	200003c5 	stb	zero,15(r4)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011b80:	20000005 	stb	zero,0(r4)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011b84:	00810134 	movhi	r2,1028
 4011b88:	10a90304 	addi	r2,r2,-23540
 4011b8c:	10c00017 	ldw	r3,0(r2)
             pevent->OSEventCnt     = 0;
 4011b90:	2000020d 	sth	zero,8(r4)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4011b94:	11000015 	stw	r4,0(r2)
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
             pevent->OSEventName[1] = OS_ASCII_NUL;
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011b98:	20c00115 	stw	r3,4(r4)
 4011b9c:	9001703a 	wrctl	status,r18
 4011ba0:	003fe306 	br	4011b30 <OSSemDel+0x130>

04011ba4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4011ba4:	defffa04 	addi	sp,sp,-24
 4011ba8:	dc000015 	stw	r16,0(sp)
 4011bac:	3021883a 	mov	r16,r6
 4011bb0:	dc400115 	stw	r17,4(sp)
 4011bb4:	dfc00515 	stw	ra,20(sp)
 4011bb8:	dd000415 	stw	r20,16(sp)
 4011bbc:	dcc00315 	stw	r19,12(sp)
 4011bc0:	dc800215 	stw	r18,8(sp)
 4011bc4:	280d883a 	mov	r6,r5
 4011bc8:	2023883a 	mov	r17,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4011bcc:	80000626 	beq	r16,zero,4011be8 <OSSemPend+0x44>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011bd0:	20002226 	beq	r4,zero,4011c5c <OSSemPend+0xb8>
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4011bd4:	20c00003 	ldbu	r3,0(r4)
 4011bd8:	008000c4 	movi	r2,3
 4011bdc:	18800a26 	beq	r3,r2,4011c08 <OSSemPend+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 4011be0:	00800044 	movi	r2,1
 4011be4:	80800005 	stb	r2,0(r16)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 4011be8:	dfc00517 	ldw	ra,20(sp)
 4011bec:	dd000417 	ldw	r20,16(sp)
 4011bf0:	dcc00317 	ldw	r19,12(sp)
 4011bf4:	dc800217 	ldw	r18,8(sp)
 4011bf8:	dc400117 	ldw	r17,4(sp)
 4011bfc:	dc000017 	ldw	r16,0(sp)
 4011c00:	dec00604 	addi	sp,sp,24
 4011c04:	f800283a 	ret
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4011c08:	00810134 	movhi	r2,1028
 4011c0c:	10a90404 	addi	r2,r2,-23536
 4011c10:	10c00003 	ldbu	r3,0(r2)
 4011c14:	1800071e 	bne	r3,zero,4011c34 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
        return;
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4011c18:	00810134 	movhi	r2,1028
 4011c1c:	10a8f604 	addi	r2,r2,-23592
 4011c20:	10c00003 	ldbu	r3,0(r2)
 4011c24:	18001726 	beq	r3,zero,4011c84 <OSSemPend+0xe0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4011c28:	00800344 	movi	r2,13
 4011c2c:	80800005 	stb	r2,0(r16)
 4011c30:	003fed06 	br	4011be8 <OSSemPend+0x44>
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4011c34:	00800084 	movi	r2,2
 4011c38:	80800005 	stb	r2,0(r16)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 4011c3c:	dfc00517 	ldw	ra,20(sp)
 4011c40:	dd000417 	ldw	r20,16(sp)
 4011c44:	dcc00317 	ldw	r19,12(sp)
 4011c48:	dc800217 	ldw	r18,8(sp)
 4011c4c:	dc400117 	ldw	r17,4(sp)
 4011c50:	dc000017 	ldw	r16,0(sp)
 4011c54:	dec00604 	addi	sp,sp,24
 4011c58:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
 4011c5c:	00800104 	movi	r2,4
 4011c60:	80800005 	stb	r2,0(r16)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 4011c64:	dfc00517 	ldw	ra,20(sp)
 4011c68:	dd000417 	ldw	r20,16(sp)
 4011c6c:	dcc00317 	ldw	r19,12(sp)
 4011c70:	dc800217 	ldw	r18,8(sp)
 4011c74:	dc400117 	ldw	r17,4(sp)
 4011c78:	dc000017 	ldw	r16,0(sp)
 4011c7c:	dec00604 	addi	sp,sp,24
 4011c80:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011c84:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011c88:	053fff84 	movi	r20,-2
 4011c8c:	9d04703a 	and	r2,r19,r20
 4011c90:	1001703a 	wrctl	status,r2
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
        return;
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 4011c94:	2080020b 	ldhu	r2,8(r4)
 4011c98:	10000526 	beq	r2,zero,4011cb0 <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4011c9c:	10bfffc4 	addi	r2,r2,-1
 4011ca0:	2080020d 	sth	r2,8(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ca4:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4011ca8:	80000005 	stb	zero,0(r16)
 4011cac:	003fce06 	br	4011be8 <OSSemPend+0x44>
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4011cb0:	04810134 	movhi	r18,1028
 4011cb4:	94a90504 	addi	r18,r18,-23532
 4011cb8:	91400017 	ldw	r5,0(r18)
 4011cbc:	28800c03 	ldbu	r2,48(r5)
 4011cc0:	10800054 	ori	r2,r2,1
 4011cc4:	28800c05 	stb	r2,48(r5)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4011cc8:	90c00017 	ldw	r3,0(r18)
 4011ccc:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4011cd0:	90800017 	ldw	r2,0(r18)
 4011cd4:	11800b8d 	sth	r6,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4011cd8:	400e88c0 	call	400e88c <OS_EventTaskWait>
 4011cdc:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4011ce0:	400ece40 	call	400ece4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ce4:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011ce8:	9d04703a 	and	r2,r19,r20
 4011cec:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4011cf0:	91000017 	ldw	r4,0(r18)
 4011cf4:	20c00c43 	ldbu	r3,49(r4)
 4011cf8:	18000f26 	beq	r3,zero,4011d38 <OSSemPend+0x194>
 4011cfc:	00800084 	movi	r2,2
 4011d00:	18800f26 	beq	r3,r2,4011d40 <OSSemPend+0x19c>
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
             break;

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 4011d04:	880b883a 	mov	r5,r17
 4011d08:	400e9b80 	call	400e9b8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4011d0c:	00800284 	movi	r2,10
 4011d10:	80800005 	stb	r2,0(r16)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4011d14:	90800017 	ldw	r2,0(r18)
 4011d18:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4011d1c:	90c00017 	ldw	r3,0(r18)
 4011d20:	18000c45 	stb	zero,49(r3)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4011d24:	90800017 	ldw	r2,0(r18)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4011d28:	10000815 	stw	zero,32(r2)
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4011d2c:	10000715 	stw	zero,28(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011d30:	9801703a 	wrctl	status,r19
 4011d34:	003fac06 	br	4011be8 <OSSemPend+0x44>
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 4011d38:	80000005 	stb	zero,0(r16)
 4011d3c:	003ff506 	br	4011d14 <OSSemPend+0x170>
             break;

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4011d40:	00800384 	movi	r2,14
 4011d44:	80800005 	stb	r2,0(r16)
 4011d48:	003ff206 	br	4011d14 <OSSemPend+0x170>

04011d4c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4011d4c:	defffb04 	addi	sp,sp,-20
 4011d50:	dc400115 	stw	r17,4(sp)
 4011d54:	dc000015 	stw	r16,0(sp)
 4011d58:	dfc00415 	stw	ra,16(sp)
 4011d5c:	dcc00315 	stw	r19,12(sp)
 4011d60:	dc800215 	stw	r18,8(sp)
 4011d64:	3023883a 	mov	r17,r6
 4011d68:	2021883a 	mov	r16,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4011d6c:	30001b26 	beq	r6,zero,4011ddc <OSSemPendAbort+0x90>
        return (0);
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011d70:	20000e26 	beq	r4,zero,4011dac <OSSemPendAbort+0x60>
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4011d74:	20c00003 	ldbu	r3,0(r4)
 4011d78:	008000c4 	movi	r2,3
 4011d7c:	18802026 	beq	r3,r2,4011e00 <OSSemPendAbort+0xb4>
        *perr = OS_ERR_EVENT_TYPE;
 4011d80:	00800044 	movi	r2,1
 4011d84:	0021883a 	mov	r16,zero
 4011d88:	30800005 	stb	r2,0(r6)
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (0);                                       /* No tasks waiting on semaphore                 */
}
 4011d8c:	8005883a 	mov	r2,r16
 4011d90:	dfc00417 	ldw	ra,16(sp)
 4011d94:	dcc00317 	ldw	r19,12(sp)
 4011d98:	dc800217 	ldw	r18,8(sp)
 4011d9c:	dc400117 	ldw	r17,4(sp)
 4011da0:	dc000017 	ldw	r16,0(sp)
 4011da4:	dec00504 	addi	sp,sp,20
 4011da8:	f800283a 	ret
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return (0);
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
 4011dac:	00800104 	movi	r2,4
 4011db0:	30800005 	stb	r2,0(r6)
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (0);                                       /* No tasks waiting on semaphore                 */
}
 4011db4:	8005883a 	mov	r2,r16
 4011db8:	dfc00417 	ldw	ra,16(sp)
 4011dbc:	dcc00317 	ldw	r19,12(sp)
 4011dc0:	dc800217 	ldw	r18,8(sp)
 4011dc4:	dc400117 	ldw	r17,4(sp)
 4011dc8:	dc000017 	ldw	r16,0(sp)
 4011dcc:	dec00504 	addi	sp,sp,20
 4011dd0:	f800283a 	ret
 4011dd4:	9801703a 	wrctl	status,r19
        OS_Sched();                                   /* Find HPT ready to run                         */
        *perr = OS_ERR_PEND_ABORT;
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4011dd8:	30000005 	stb	zero,0(r6)
 4011ddc:	0021883a 	mov	r16,zero
    return (0);                                       /* No tasks waiting on semaphore                 */
}
 4011de0:	8005883a 	mov	r2,r16
 4011de4:	dfc00417 	ldw	ra,16(sp)
 4011de8:	dcc00317 	ldw	r19,12(sp)
 4011dec:	dc800217 	ldw	r18,8(sp)
 4011df0:	dc400117 	ldw	r17,4(sp)
 4011df4:	dc000017 	ldw	r16,0(sp)
 4011df8:	dec00504 	addi	sp,sp,20
 4011dfc:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011e00:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e04:	00bfff84 	movi	r2,-2
 4011e08:	9884703a 	and	r2,r19,r2
 4011e0c:	1001703a 	wrctl	status,r2
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        *perr = OS_ERR_EVENT_TYPE;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 4011e10:	20c00283 	ldbu	r3,10(r4)
 4011e14:	183fef26 	beq	r3,zero,4011dd4 <OSSemPendAbort+0x88>
        nbr_tasks = 0;
        switch (opt) {
 4011e18:	28803fcc 	andi	r2,r5,255
 4011e1c:	04800044 	movi	r18,1
 4011e20:	14800a26 	beq	r2,r18,4011e4c <OSSemPendAbort+0x100>
                 }
                 break;
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4011e24:	000b883a 	mov	r5,zero
 4011e28:	900d883a 	mov	r6,r18
 4011e2c:	01c00084 	movi	r7,2
 4011e30:	400ea680 	call	400ea68 <OS_EventTaskRdy>
 4011e34:	9021883a 	mov	r16,r18
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011e38:	9801703a 	wrctl	status,r19
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4011e3c:	400ece40 	call	400ece4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4011e40:	00800384 	movi	r2,14
 4011e44:	88800005 	stb	r2,0(r17)
 4011e48:	003fd006 	br	4011d8c <OSSemPendAbort+0x40>
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
 4011e4c:	0025883a 	mov	r18,zero
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4011e50:	8009883a 	mov	r4,r16
 4011e54:	000b883a 	mov	r5,zero
 4011e58:	01800044 	movi	r6,1
 4011e5c:	01c00084 	movi	r7,2
 4011e60:	400ea680 	call	400ea68 <OS_EventTaskRdy>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4011e64:	80c00283 	ldbu	r3,10(r16)
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
 4011e68:	94800044 	addi	r18,r18,1
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4011e6c:	183ff81e 	bne	r3,zero,4011e50 <OSSemPendAbort+0x104>
 4011e70:	94003fcc 	andi	r16,r18,255
 4011e74:	003ff006 	br	4011e38 <OSSemPendAbort+0xec>

04011e78 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4011e78:	defffe04 	addi	sp,sp,-8
 4011e7c:	dfc00115 	stw	ra,4(sp)
 4011e80:	dc000015 	stw	r16,0(sp)
 4011e84:	2011883a 	mov	r8,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011e88:	01400104 	movi	r5,4
 4011e8c:	20000426 	beq	r4,zero,4011ea0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4011e90:	20c00003 	ldbu	r3,0(r4)
 4011e94:	008000c4 	movi	r2,3
 4011e98:	01400044 	movi	r5,1
 4011e9c:	18800526 	beq	r3,r2,4011eb4 <OSSemPost+0x3c>
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
 4011ea0:	2805883a 	mov	r2,r5
 4011ea4:	dfc00117 	ldw	ra,4(sp)
 4011ea8:	dc000017 	ldw	r16,0(sp)
 4011eac:	dec00204 	addi	sp,sp,8
 4011eb0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011eb4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011eb8:	00bfff84 	movi	r2,-2
 4011ebc:	8084703a 	and	r2,r16,r2
 4011ec0:	1001703a 	wrctl	status,r2
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4011ec4:	20800283 	ldbu	r2,10(r4)
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4011ec8:	000b883a 	mov	r5,zero
 4011ecc:	01800044 	movi	r6,1
 4011ed0:	000f883a 	mov	r7,zero
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4011ed4:	10000c1e 	bne	r2,zero,4011f08 <OSSemPost+0x90>
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4011ed8:	2080020b 	ldhu	r2,8(r4)
 4011edc:	00ffffd4 	movui	r3,65535
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4011ee0:	11000044 	addi	r4,r2,1
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4011ee4:	10bfffcc 	andi	r2,r2,65535
 4011ee8:	10c00c1e 	bne	r2,r3,4011f1c <OSSemPost+0xa4>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011eec:	8001703a 	wrctl	status,r16
 4011ef0:	01400c84 	movi	r5,50
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
 4011ef4:	2805883a 	mov	r2,r5
 4011ef8:	dfc00117 	ldw	ra,4(sp)
 4011efc:	dc000017 	ldw	r16,0(sp)
 4011f00:	dec00204 	addi	sp,sp,8
 4011f04:	f800283a 	ret
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4011f08:	400ea680 	call	400ea68 <OS_EventTaskRdy>
 4011f0c:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4011f10:	400ece40 	call	400ece4 <OS_Sched>
 4011f14:	000b883a 	mov	r5,zero
 4011f18:	003fe106 	br	4011ea0 <OSSemPost+0x28>
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4011f1c:	4100020d 	sth	r4,8(r8)
 4011f20:	8001703a 	wrctl	status,r16
 4011f24:	000b883a 	mov	r5,zero
 4011f28:	003fdd06 	br	4011ea0 <OSSemPost+0x28>

04011f2c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4011f2c:	200d883a 	mov	r6,r4
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4011f30:	01000104 	movi	r4,4
 4011f34:	30000626 	beq	r6,zero,4011f50 <OSSemQuery+0x24>
        return (OS_ERR_PEVENT_NULL);
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4011f38:	01000244 	movi	r4,9
 4011f3c:	28000426 	beq	r5,zero,4011f50 <OSSemQuery+0x24>
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4011f40:	30c00003 	ldbu	r3,0(r6)
 4011f44:	008000c4 	movi	r2,3
 4011f48:	01000044 	movi	r4,1
 4011f4c:	18800226 	beq	r3,r2,4011f58 <OSSemQuery+0x2c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011f50:	2005883a 	mov	r2,r4
 4011f54:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011f58:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011f5c:	00bfff84 	movi	r2,-2
 4011f60:	2084703a 	and	r2,r4,r2
 4011f64:	1001703a 	wrctl	status,r2
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4011f68:	30c00283 	ldbu	r3,10(r6)
 4011f6c:	28c00145 	stb	r3,5(r5)
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *pdest++ = *psrc++;
 4011f70:	308002c3 	ldbu	r2,11(r6)
 4011f74:	28800085 	stb	r2,2(r5)
 4011f78:	30c00303 	ldbu	r3,12(r6)
 4011f7c:	28c000c5 	stb	r3,3(r5)
 4011f80:	30800343 	ldbu	r2,13(r6)
 4011f84:	28800105 	stb	r2,4(r5)
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4011f88:	30c0020b 	ldhu	r3,8(r6)
 4011f8c:	28c0000d 	sth	r3,0(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011f90:	2001703a 	wrctl	status,r4
 4011f94:	0009883a 	mov	r4,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011f98:	2005883a 	mov	r2,r4
 4011f9c:	f800283a 	ret

04011fa0 <OS_TaskStkClr>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 4011fa0:	31bfffcc 	andi	r6,r6,65535
 4011fa4:	3080004c 	andi	r2,r6,1
 4011fa8:	1005003a 	cmpeq	r2,r2,zero
 4011fac:	1000071e 	bne	r2,zero,4011fcc <OS_TaskStkClr+0x2c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 4011fb0:	3080008c 	andi	r2,r6,2
 4011fb4:	10000526 	beq	r2,zero,4011fcc <OS_TaskStkClr+0x2c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4011fb8:	28000426 	beq	r5,zero,4011fcc <OS_TaskStkClr+0x2c>
                size--;
 4011fbc:	297fffc4 	addi	r5,r5,-1
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 4011fc0:	20000015 	stw	zero,0(r4)
 4011fc4:	21000104 	addi	r4,r4,4
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4011fc8:	283ffc1e 	bne	r5,zero,4011fbc <OS_TaskStkClr+0x1c>
 4011fcc:	f800283a 	ret

04011fd0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 4011fd0:	defffe04 	addi	sp,sp,-8
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4011fd4:	21003fcc 	andi	r4,r4,255
 4011fd8:	00800504 	movi	r2,20
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 4011fdc:	dfc00115 	stw	ra,4(sp)
 4011fe0:	dc000015 	stw	r16,0(sp)
 4011fe4:	280d883a 	mov	r6,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4011fe8:	1100072e 	bgeu	r2,r4,4012008 <OSTaskQuery+0x38>
        if (prio != OS_PRIO_SELF) {
 4011fec:	00803fc4 	movi	r2,255
 4011ff0:	20800526 	beq	r4,r2,4012008 <OSTaskQuery+0x38>
 4011ff4:	00800a84 	movi	r2,42
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4011ff8:	dfc00117 	ldw	ra,4(sp)
 4011ffc:	dc000017 	ldw	r16,0(sp)
 4012000:	dec00204 	addi	sp,sp,8
 4012004:	f800283a 	ret
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 4012008:	30002726 	beq	r6,zero,40120a8 <OSTaskQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401200c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012010:	00bfff84 	movi	r2,-2
 4012014:	8084703a 	and	r2,r16,r2
 4012018:	1001703a 	wrctl	status,r2
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 401201c:	00c03fc4 	movi	r3,255
 4012020:	20c01526 	beq	r4,r3,4012078 <OSTaskQuery+0xa8>
        prio = OSTCBCur->OSTCBPrio;
    }
    ptcb = OSTCBPrioTbl[prio];
 4012024:	2105883a 	add	r2,r4,r4
 4012028:	1085883a 	add	r2,r2,r2
 401202c:	00c10134 	movhi	r3,1028
 4012030:	18ca4904 	addi	r3,r3,10532
 4012034:	10c5883a 	add	r2,r2,r3
 4012038:	11400017 	ldw	r5,0(r2)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 401203c:	2800061e 	bne	r5,zero,4012058 <OSTaskQuery+0x88>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012040:	8001703a 	wrctl	status,r16
 4012044:	00800a44 	movi	r2,41
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4012048:	dfc00117 	ldw	ra,4(sp)
 401204c:	dc000017 	ldw	r16,0(sp)
 4012050:	dec00204 	addi	sp,sp,8
 4012054:	f800283a 	ret
    ptcb = OSTCBPrioTbl[prio];
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 4012058:	00800044 	movi	r2,1
 401205c:	2880171e 	bne	r5,r2,40120bc <OSTaskQuery+0xec>
 4012060:	8001703a 	wrctl	status,r16
 4012064:	008010c4 	movi	r2,67
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4012068:	dfc00117 	ldw	ra,4(sp)
 401206c:	dc000017 	ldw	r16,0(sp)
 4012070:	dec00204 	addi	sp,sp,8
 4012074:	f800283a 	ret
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
        prio = OSTCBCur->OSTCBPrio;
 4012078:	00810134 	movhi	r2,1028
 401207c:	10a90504 	addi	r2,r2,-23532
 4012080:	10c00017 	ldw	r3,0(r2)
 4012084:	19000c83 	ldbu	r4,50(r3)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012088:	00c10134 	movhi	r3,1028
 401208c:	18ca4904 	addi	r3,r3,10532
 4012090:	2105883a 	add	r2,r4,r4
 4012094:	1085883a 	add	r2,r2,r2
 4012098:	10c5883a 	add	r2,r2,r3
 401209c:	11400017 	ldw	r5,0(r2)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 40120a0:	283fe726 	beq	r5,zero,4012040 <OSTaskQuery+0x70>
 40120a4:	003fec06 	br	4012058 <OSTaskQuery+0x88>
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 40120a8:	00800244 	movi	r2,9
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 40120ac:	dfc00117 	ldw	ra,4(sp)
 40120b0:	dc000017 	ldw	r16,0(sp)
 40120b4:	dec00204 	addi	sp,sp,8
 40120b8:	f800283a 	ret
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 40120bc:	3009883a 	mov	r4,r6
 40120c0:	01801b04 	movi	r6,108
 40120c4:	400eb980 	call	400eb98 <OS_MemCopy>
 40120c8:	8001703a 	wrctl	status,r16
 40120cc:	0005883a 	mov	r2,zero
 40120d0:	003fdd06 	br	4012048 <OSTaskQuery+0x78>

040120d4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 40120d4:	defffa04 	addi	sp,sp,-24
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 40120d8:	21003fcc 	andi	r4,r4,255
 40120dc:	00c004c4 	movi	r3,19
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 40120e0:	dfc00515 	stw	ra,20(sp)
 40120e4:	dd000415 	stw	r20,16(sp)
 40120e8:	dcc00315 	stw	r19,12(sp)
 40120ec:	dc800215 	stw	r18,8(sp)
 40120f0:	dc400115 	stw	r17,4(sp)
 40120f4:	dc000015 	stw	r16,0(sp)
 40120f8:	2813883a 	mov	r9,r5
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 40120fc:	19000b2e 	bgeu	r3,r4,401212c <OSTaskChangePrio+0x58>
        if (oldprio != OS_PRIO_SELF) {
 4012100:	00803fc4 	movi	r2,255
 4012104:	20800926 	beq	r4,r2,401212c <OSTaskChangePrio+0x58>
    ptcb->OSTCBX    = x_new;
    ptcb->OSTCBBitY = bity_new;
    ptcb->OSTCBBitX = bitx_new;
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
        OS_Sched();                                         /* Find new highest priority task          */
 4012108:	00800a84 	movi	r2,42
    }
    return (OS_ERR_NONE);
}
 401210c:	dfc00517 	ldw	ra,20(sp)
 4012110:	dd000417 	ldw	r20,16(sp)
 4012114:	dcc00317 	ldw	r19,12(sp)
 4012118:	dc800217 	ldw	r18,8(sp)
 401211c:	dc400117 	ldw	r17,4(sp)
 4012120:	dc000017 	ldw	r16,0(sp)
 4012124:	dec00604 	addi	sp,sp,24
 4012128:	f800283a 	ret
    if (oldprio >= OS_LOWEST_PRIO) {
        if (oldprio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 401212c:	49803fcc 	andi	r6,r9,255
 4012130:	19bff536 	bltu	r3,r6,4012108 <OSTaskChangePrio+0x34>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012134:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012138:	00bfff84 	movi	r2,-2
 401213c:	5084703a 	and	r2,r10,r2
 4012140:	1001703a 	wrctl	status,r2
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 4012144:	3187883a 	add	r3,r6,r6
 4012148:	18c7883a 	add	r3,r3,r3
 401214c:	02010134 	movhi	r8,1028
 4012150:	420a4904 	addi	r8,r8,10532
 4012154:	1a0f883a 	add	r7,r3,r8
 4012158:	38800017 	ldw	r2,0(r7)
 401215c:	10000a26 	beq	r2,zero,4012188 <OSTaskChangePrio+0xb4>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012160:	5001703a 	wrctl	status,r10
 4012164:	00800a04 	movi	r2,40
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
        OS_Sched();                                         /* Find new highest priority task          */
    }
    return (OS_ERR_NONE);
}
 4012168:	dfc00517 	ldw	ra,20(sp)
 401216c:	dd000417 	ldw	r20,16(sp)
 4012170:	dcc00317 	ldw	r19,12(sp)
 4012174:	dc800217 	ldw	r18,8(sp)
 4012178:	dc400117 	ldw	r17,4(sp)
 401217c:	dc000017 	ldw	r16,0(sp)
 4012180:	dec00604 	addi	sp,sp,24
 4012184:	f800283a 	ret
    OS_ENTER_CRITICAL();
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 4012188:	00803fc4 	movi	r2,255
 401218c:	20800826 	beq	r4,r2,40121b0 <OSTaskChangePrio+0xdc>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    }
    ptcb = OSTCBPrioTbl[oldprio];
 4012190:	2105883a 	add	r2,r4,r4
 4012194:	1085883a 	add	r2,r2,r2
 4012198:	1205883a 	add	r2,r2,r8
 401219c:	12000017 	ldw	r8,0(r2)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 40121a0:	4000081e 	bne	r8,zero,40121c4 <OSTaskChangePrio+0xf0>
 40121a4:	5001703a 	wrctl	status,r10
 40121a8:	00800a44 	movi	r2,41
 40121ac:	003fd706 	br	401210c <OSTaskChangePrio+0x38>
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 40121b0:	00810134 	movhi	r2,1028
 40121b4:	10a90504 	addi	r2,r2,-23532
 40121b8:	10c00017 	ldw	r3,0(r2)
 40121bc:	19000c83 	ldbu	r4,50(r3)
 40121c0:	003ff306 	br	4012190 <OSTaskChangePrio+0xbc>
    ptcb = OSTCBPrioTbl[oldprio];
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 40121c4:	00c00044 	movi	r3,1
 40121c8:	40c0031e 	bne	r8,r3,40121d8 <OSTaskChangePrio+0x104>
 40121cc:	5001703a 	wrctl	status,r10
 40121d0:	008010c4 	movi	r2,67
 40121d4:	003fcd06 	br	401210c <OSTaskChangePrio+0x38>
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 40121d8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 40121dc:	3a000015 	stw	r8,0(r7)
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
    bitx_old              =  ptcb->OSTCBBitX;
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 40121e0:	43800d03 	ldbu	r14,52(r8)
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 40121e4:	3026d0fa 	srli	r19,r6,3
    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
    bitx_old              =  ptcb->OSTCBBitX;
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 40121e8:	05010134 	movhi	r20,1028
 40121ec:	a5290244 	addi	r20,r20,-23543
 40121f0:	7523883a 	add	r17,r14,r20
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    x_new                 = (INT8U)(newprio & 0x07);
 40121f4:	2c8001cc 	andi	r18,r5,7

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
    bitx_old              =  ptcb->OSTCBBitX;
 40121f8:	41c00d43 	ldbu	r7,53(r8)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 40121fc:	89000003 	ldbu	r4,0(r17)
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    x_new                 = (INT8U)(newprio & 0x07);
    bity_new              = (INT8U)(1 << y_new);
    bitx_new              = (INT8U)(1 << x_new);
 4012200:	90803fcc 	andi	r2,r18,255
        return (OS_ERR_TASK_NOT_EXIST);
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    x_new                 = (INT8U)(newprio & 0x07);
    bity_new              = (INT8U)(1 << y_new);
 4012204:	9bc03fcc 	andi	r15,r19,255
    bitx_new              = (INT8U)(1 << x_new);
 4012208:	18a0983a 	sll	r16,r3,r2
        return (OS_ERR_TASK_NOT_EXIST);
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    x_new                 = (INT8U)(newprio & 0x07);
    bity_new              = (INT8U)(1 << y_new);
 401220c:	1bcc983a 	sll	r6,r3,r15
    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
    bitx_old              =  ptcb->OSTCBBitX;
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4012210:	3904703a 	and	r2,r7,r4
 4012214:	10803fcc 	andi	r2,r2,255
        return (OS_ERR_TASK_NOT_EXIST);
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    x_new                 = (INT8U)(newprio & 0x07);
    bity_new              = (INT8U)(1 << y_new);
 4012218:	301b883a 	mov	r13,r6
    bitx_new              = (INT8U)(1 << x_new);
 401221c:	8019883a 	mov	r12,r16
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
 4012220:	42c00d83 	ldbu	r11,54(r8)
    bitx_old              =  ptcb->OSTCBBitX;
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4012224:	10001426 	beq	r2,zero,4012278 <OSTaskChangePrio+0x1a4>
         OSRdyTbl[y_old] &= ~bitx_old;
 4012228:	01c4303a 	nor	r2,zero,r7
 401222c:	1104703a 	and	r2,r2,r4
         if (OSRdyTbl[y_old] == 0) {
 4012230:	10c03fcc 	andi	r3,r2,255
 4012234:	18c0201c 	xori	r3,r3,128
 4012238:	18ffe004 	addi	r3,r3,-128
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    y_old                 =  ptcb->OSTCBY;
    bity_old              =  ptcb->OSTCBBitY;
    bitx_old              =  ptcb->OSTCBBitX;
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
         OSRdyTbl[y_old] &= ~bitx_old;
 401223c:	88800005 	stb	r2,0(r17)
         if (OSRdyTbl[y_old] == 0) {
 4012240:	1800571e 	bne	r3,zero,40123a0 <OSTaskChangePrio+0x2cc>
             OSRdyGrp &= ~bity_old;
 4012244:	01410134 	movhi	r5,1028
 4012248:	29690204 	addi	r5,r5,-23544
 401224c:	28c00003 	ldbu	r3,0(r5)
 4012250:	02c4303a 	nor	r2,zero,r11
 4012254:	10c4703a 	and	r2,r2,r3
 4012258:	28800005 	stb	r2,0(r5)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
         OSRdyTbl[y_new] |= bitx_new;
 401225c:	7d05883a 	add	r2,r15,r20
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
         OSRdyTbl[y_old] &= ~bitx_old;
         if (OSRdyTbl[y_old] == 0) {
             OSRdyGrp &= ~bity_old;
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4012260:	28c00003 	ldbu	r3,0(r5)
         OSRdyTbl[y_new] |= bitx_new;
 4012264:	11000003 	ldbu	r4,0(r2)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
         OSRdyTbl[y_old] &= ~bitx_old;
         if (OSRdyTbl[y_old] == 0) {
             OSRdyGrp &= ~bity_old;
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4012268:	30c6b03a 	or	r3,r6,r3
         OSRdyTbl[y_new] |= bitx_new;
 401226c:	8108b03a 	or	r4,r16,r4
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
         OSRdyTbl[y_old] &= ~bitx_old;
         if (OSRdyTbl[y_old] == 0) {
             OSRdyGrp &= ~bity_old;
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4012270:	28c00005 	stb	r3,0(r5)
         OSRdyTbl[y_new] |= bitx_new;
 4012274:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 4012278:	41800717 	ldw	r6,28(r8)
    if (pevent != (OS_EVENT *)0) {
 401227c:	30001626 	beq	r6,zero,40122d8 <OSTaskChangePrio+0x204>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4012280:	7187883a 	add	r3,r14,r6
 4012284:	18c00204 	addi	r3,r3,8
 4012288:	190000c3 	ldbu	r4,3(r3)
 401228c:	01c4303a 	nor	r2,zero,r7
 4012290:	1104703a 	and	r2,r2,r4
        if (pevent->OSEventTbl[y_old] == 0) {
 4012294:	11403fcc 	andi	r5,r2,255
 4012298:	2940201c 	xori	r5,r5,128
 401229c:	297fe004 	addi	r5,r5,-128
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 40122a0:	188000c5 	stb	r2,3(r3)
        if (pevent->OSEventTbl[y_old] == 0) {
 40122a4:	28003c1e 	bne	r5,zero,4012398 <OSTaskChangePrio+0x2c4>
            pevent->OSEventGrp    &= ~bity_old;
 40122a8:	31000283 	ldbu	r4,10(r6)
 40122ac:	02c4303a 	nor	r2,zero,r11
 40122b0:	1104703a 	and	r2,r2,r4
 40122b4:	1009883a 	mov	r4,r2
 40122b8:	30800285 	stb	r2,10(r6)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
        pevent->OSEventTbl[y_new] |= bitx_new;
 40122bc:	7985883a 	add	r2,r15,r6
 40122c0:	10800204 	addi	r2,r2,8
 40122c4:	10c000c3 	ldbu	r3,3(r2)
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
        if (pevent->OSEventTbl[y_old] == 0) {
            pevent->OSEventGrp    &= ~bity_old;
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 40122c8:	2348b03a 	or	r4,r4,r13
 40122cc:	31000285 	stb	r4,10(r6)
        pevent->OSEventTbl[y_new] |= bitx_new;
 40122d0:	60c6b03a 	or	r3,r12,r3
 40122d4:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 40122d8:	41800817 	ldw	r6,32(r8)
 40122dc:	30001e26 	beq	r6,zero,4012358 <OSTaskChangePrio+0x284>
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
 40122e0:	31400017 	ldw	r5,0(r6)
        while (pevent != (OS_EVENT *)0) {
 40122e4:	28001c26 	beq	r5,zero,4012358 <OSTaskChangePrio+0x284>
 40122e8:	01ce303a 	nor	r7,zero,r7
 40122ec:	02d6303a 	nor	r11,zero,r11
 40122f0:	00000e06 	br	401232c <OSTaskChangePrio+0x258>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
            if (pevent->OSEventTbl[y_old] == 0) {
                pevent->OSEventGrp    &= ~bity_old;
 40122f4:	29000283 	ldbu	r4,10(r5)
 40122f8:	5904703a 	and	r2,r11,r4
 40122fc:	1009883a 	mov	r4,r2
 4012300:	28800285 	stb	r2,10(r5)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
            pevent->OSEventTbl[y_new] |= bitx_new;
 4012304:	7945883a 	add	r2,r15,r5
 4012308:	10800204 	addi	r2,r2,8
 401230c:	10c000c3 	ldbu	r3,3(r2)
        while (pevent != (OS_EVENT *)0) {
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
            if (pevent->OSEventTbl[y_old] == 0) {
                pevent->OSEventGrp    &= ~bity_old;
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 4012310:	2348b03a 	or	r4,r4,r13
            pevent->OSEventTbl[y_new] |= bitx_new;
            pevents++;
 4012314:	31800104 	addi	r6,r6,4
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
            if (pevent->OSEventTbl[y_old] == 0) {
                pevent->OSEventGrp    &= ~bity_old;
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
            pevent->OSEventTbl[y_new] |= bitx_new;
 4012318:	60c6b03a 	or	r3,r12,r3
        while (pevent != (OS_EVENT *)0) {
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
            if (pevent->OSEventTbl[y_old] == 0) {
                pevent->OSEventGrp    &= ~bity_old;
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 401231c:	29000285 	stb	r4,10(r5)
            pevent->OSEventTbl[y_new] |= bitx_new;
 4012320:	10c000c5 	stb	r3,3(r2)
            pevents++;
            pevent                     = *pevents;
 4012324:	31400017 	ldw	r5,0(r6)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4012328:	28000b26 	beq	r5,zero,4012358 <OSTaskChangePrio+0x284>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 401232c:	7145883a 	add	r2,r14,r5
 4012330:	10800204 	addi	r2,r2,8
 4012334:	10c000c3 	ldbu	r3,3(r2)
 4012338:	38c6703a 	and	r3,r7,r3
            if (pevent->OSEventTbl[y_old] == 0) {
 401233c:	19003fcc 	andi	r4,r3,255
 4012340:	2100201c 	xori	r4,r4,128
 4012344:	213fe004 	addi	r4,r4,-128
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4012348:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 401234c:	203fe926 	beq	r4,zero,40122f4 <OSTaskChangePrio+0x220>
 4012350:	29000283 	ldbu	r4,10(r5)
 4012354:	003feb06 	br	4012304 <OSTaskChangePrio+0x230>

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    ptcb->OSTCBY    = y_new;
    ptcb->OSTCBX    = x_new;
    ptcb->OSTCBBitY = bity_new;
    ptcb->OSTCBBitX = bitx_new;
 4012358:	43000d45 	stb	r12,53(r8)
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 401235c:	42400c85 	stb	r9,50(r8)
    ptcb->OSTCBY    = y_new;
 4012360:	44c00d05 	stb	r19,52(r8)
    ptcb->OSTCBX    = x_new;
 4012364:	44800cc5 	stb	r18,51(r8)
    ptcb->OSTCBBitY = bity_new;
 4012368:	43400d85 	stb	r13,54(r8)
 401236c:	5001703a 	wrctl	status,r10
    ptcb->OSTCBBitX = bitx_new;
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4012370:	00810134 	movhi	r2,1028
 4012374:	10a8f644 	addi	r2,r2,-23591
 4012378:	11000003 	ldbu	r4,0(r2)
 401237c:	00c00044 	movi	r3,1
 4012380:	20c00226 	beq	r4,r3,401238c <OSTaskChangePrio+0x2b8>
        OS_Sched();                                         /* Find new highest priority task          */
 4012384:	0005883a 	mov	r2,zero
 4012388:	003f6006 	br	401210c <OSTaskChangePrio+0x38>
 401238c:	400ece40 	call	400ece4 <OS_Sched>
 4012390:	0005883a 	mov	r2,zero
 4012394:	003f5d06 	br	401210c <OSTaskChangePrio+0x38>
 4012398:	31000283 	ldbu	r4,10(r6)
 401239c:	003fc706 	br	40122bc <OSTaskChangePrio+0x1e8>
 40123a0:	01410134 	movhi	r5,1028
 40123a4:	29690204 	addi	r5,r5,-23544
 40123a8:	003fac06 	br	401225c <OSTaskChangePrio+0x188>

040123ac <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 40123ac:	defff804 	addi	sp,sp,-32
 40123b0:	dc000315 	stw	r16,12(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40123b4:	00800504 	movi	r2,20
 40123b8:	3c003fcc 	andi	r16,r7,255
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 40123bc:	dfc00715 	stw	ra,28(sp)
 40123c0:	dcc00615 	stw	r19,24(sp)
 40123c4:	dc800515 	stw	r18,20(sp)
 40123c8:	dc400415 	stw	r17,16(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40123cc:	1400082e 	bgeu	r2,r16,40123f0 <OSTaskCreate+0x44>
 40123d0:	00800a84 	movi	r2,42
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
}
 40123d4:	dfc00717 	ldw	ra,28(sp)
 40123d8:	dcc00617 	ldw	r19,24(sp)
 40123dc:	dc800517 	ldw	r18,20(sp)
 40123e0:	dc400417 	ldw	r17,16(sp)
 40123e4:	dc000317 	ldw	r16,12(sp)
 40123e8:	dec00804 	addi	sp,sp,32
 40123ec:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40123f0:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40123f4:	047fff84 	movi	r17,-2
 40123f8:	4444703a 	and	r2,r8,r17
 40123fc:	1001703a 	wrctl	status,r2
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4012400:	00c10134 	movhi	r3,1028
 4012404:	18e90404 	addi	r3,r3,-23536
 4012408:	18800003 	ldbu	r2,0(r3)
 401240c:	10000926 	beq	r2,zero,4012434 <OSTaskCreate+0x88>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012410:	4001703a 	wrctl	status,r8
 4012414:	00800f04 	movi	r2,60
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
}
 4012418:	dfc00717 	ldw	ra,28(sp)
 401241c:	dcc00617 	ldw	r19,24(sp)
 4012420:	dc800517 	ldw	r18,20(sp)
 4012424:	dc400417 	ldw	r17,16(sp)
 4012428:	dc000317 	ldw	r16,12(sp)
 401242c:	dec00804 	addi	sp,sp,32
 4012430:	f800283a 	ret
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4012434:	8405883a 	add	r2,r16,r16
 4012438:	1085883a 	add	r2,r2,r2
 401243c:	00c10134 	movhi	r3,1028
 4012440:	18ca4904 	addi	r3,r3,10532
 4012444:	10e5883a 	add	r18,r2,r3
 4012448:	91c00017 	ldw	r7,0(r18)
 401244c:	38000326 	beq	r7,zero,401245c <OSTaskCreate+0xb0>
 4012450:	4001703a 	wrctl	status,r8
 4012454:	00800a04 	movi	r2,40
 4012458:	003fde06 	br	40123d4 <OSTaskCreate+0x28>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 401245c:	04c00044 	movi	r19,1
 4012460:	94c00015 	stw	r19,0(r18)
 4012464:	4001703a 	wrctl	status,r8
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 4012468:	4026a640 	call	4026a64 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 401246c:	100b883a 	mov	r5,r2
 4012470:	8009883a 	mov	r4,r16
 4012474:	000d883a 	mov	r6,zero
 4012478:	000f883a 	mov	r7,zero
 401247c:	d8000015 	stw	zero,0(sp)
 4012480:	d8000115 	stw	zero,4(sp)
 4012484:	d8000215 	stw	zero,8(sp)
 4012488:	400f98c0 	call	400f98c <OS_TCBInit>
        if (err == OS_ERR_NONE) {
 401248c:	14003fcc 	andi	r16,r2,255
 4012490:	8000061e 	bne	r16,zero,40124ac <OSTaskCreate+0x100>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 4012494:	00810134 	movhi	r2,1028
 4012498:	10a8f644 	addi	r2,r2,-23591
 401249c:	10c00003 	ldbu	r3,0(r2)
 40124a0:	1cc00926 	beq	r3,r19,40124c8 <OSTaskCreate+0x11c>
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
            OS_EXIT_CRITICAL();
        }
        return (err);
 40124a4:	8005883a 	mov	r2,r16
 40124a8:	003fca06 	br	40123d4 <OSTaskCreate+0x28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40124ac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40124b0:	1c44703a 	and	r2,r3,r17
 40124b4:	1001703a 	wrctl	status,r2
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
                OS_Sched();
            }
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 40124b8:	90000015 	stw	zero,0(r18)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40124bc:	1801703a 	wrctl	status,r3
            OS_EXIT_CRITICAL();
        }
        return (err);
 40124c0:	8005883a 	mov	r2,r16
 40124c4:	003fc306 	br	40123d4 <OSTaskCreate+0x28>
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
                OS_Sched();
 40124c8:	400ece40 	call	400ece4 <OS_Sched>
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
            OS_EXIT_CRITICAL();
        }
        return (err);
 40124cc:	8005883a 	mov	r2,r16
 40124d0:	003fc006 	br	40123d4 <OSTaskCreate+0x28>

040124d4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 40124d4:	defff304 	addi	sp,sp,-52
 40124d8:	dc400415 	stw	r17,16(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40124dc:	00800504 	movi	r2,20
 40124e0:	3c403fcc 	andi	r17,r7,255
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 40124e4:	dd800915 	stw	r22,36(sp)
 40124e8:	dd400815 	stw	r21,32(sp)
 40124ec:	dd000715 	stw	r20,28(sp)
 40124f0:	dcc00615 	stw	r19,24(sp)
 40124f4:	dc800515 	stw	r18,20(sp)
 40124f8:	dc000315 	stw	r16,12(sp)
 40124fc:	dfc00c15 	stw	ra,48(sp)
 4012500:	df000b15 	stw	fp,44(sp)
 4012504:	ddc00a15 	stw	r23,40(sp)
 4012508:	2025883a 	mov	r18,r4
 401250c:	2827883a 	mov	r19,r5
 4012510:	3029883a 	mov	r20,r6
 4012514:	dd800f17 	ldw	r22,60(sp)
 4012518:	dd400d0b 	ldhu	r21,52(sp)
 401251c:	dc00110b 	ldhu	r16,68(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4012520:	14400d2e 	bgeu	r2,r17,4012558 <OSTaskCreateExt+0x84>
 4012524:	00800a84 	movi	r2,42
        }
        return (err);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
}
 4012528:	dfc00c17 	ldw	ra,48(sp)
 401252c:	df000b17 	ldw	fp,44(sp)
 4012530:	ddc00a17 	ldw	r23,40(sp)
 4012534:	dd800917 	ldw	r22,36(sp)
 4012538:	dd400817 	ldw	r21,32(sp)
 401253c:	dd000717 	ldw	r20,28(sp)
 4012540:	dcc00617 	ldw	r19,24(sp)
 4012544:	dc800517 	ldw	r18,20(sp)
 4012548:	dc400417 	ldw	r17,16(sp)
 401254c:	dc000317 	ldw	r16,12(sp)
 4012550:	dec00d04 	addi	sp,sp,52
 4012554:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012558:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401255c:	05ffff84 	movi	r23,-2
 4012560:	2dc4703a 	and	r2,r5,r23
 4012564:	1001703a 	wrctl	status,r2
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4012568:	00c10134 	movhi	r3,1028
 401256c:	18e90404 	addi	r3,r3,-23536
 4012570:	18800003 	ldbu	r2,0(r3)
 4012574:	10000326 	beq	r2,zero,4012584 <OSTaskCreateExt+0xb0>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012578:	2801703a 	wrctl	status,r5
 401257c:	00800f04 	movi	r2,60
 4012580:	003fe906 	br	4012528 <OSTaskCreateExt+0x54>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4012584:	8c45883a 	add	r2,r17,r17
 4012588:	1085883a 	add	r2,r2,r2
 401258c:	00c10134 	movhi	r3,1028
 4012590:	18ca4904 	addi	r3,r3,10532
 4012594:	10f9883a 	add	fp,r2,r3
 4012598:	e1000017 	ldw	r4,0(fp)
 401259c:	20000326 	beq	r4,zero,40125ac <OSTaskCreateExt+0xd8>
 40125a0:	2801703a 	wrctl	status,r5
 40125a4:	00800a04 	movi	r2,40
 40125a8:	003fdf06 	br	4012528 <OSTaskCreateExt+0x54>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 40125ac:	00800044 	movi	r2,1
 40125b0:	e0800015 	stw	r2,0(fp)
 40125b4:	2801703a 	wrctl	status,r5
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 40125b8:	d9000e17 	ldw	r4,56(sp)
 40125bc:	843fffcc 	andi	r16,r16,65535
 40125c0:	800d883a 	mov	r6,r16
 40125c4:	b00b883a 	mov	r5,r22
 40125c8:	4011fa00 	call	4011fa0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 40125cc:	800f883a 	mov	r7,r16
 40125d0:	9009883a 	mov	r4,r18
 40125d4:	980b883a 	mov	r5,r19
 40125d8:	a00d883a 	mov	r6,r20
 40125dc:	4026a640 	call	4026a64 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 40125e0:	100b883a 	mov	r5,r2
 40125e4:	d9800e17 	ldw	r6,56(sp)
 40125e8:	d8801017 	ldw	r2,64(sp)
 40125ec:	8809883a 	mov	r4,r17
 40125f0:	a9ffffcc 	andi	r7,r21,65535
 40125f4:	dc000215 	stw	r16,8(sp)
 40125f8:	dd800015 	stw	r22,0(sp)
 40125fc:	d8800115 	stw	r2,4(sp)
 4012600:	400f98c0 	call	400f98c <OS_TCBInit>
        if (err == OS_ERR_NONE) {
 4012604:	14003fcc 	andi	r16,r2,255
 4012608:	8000071e 	bne	r16,zero,4012628 <OSTaskCreateExt+0x154>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 401260c:	00810134 	movhi	r2,1028
 4012610:	10a8f644 	addi	r2,r2,-23591
 4012614:	10c00003 	ldbu	r3,0(r2)
 4012618:	00800044 	movi	r2,1
 401261c:	18800926 	beq	r3,r2,4012644 <OSTaskCreateExt+0x170>
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
            OS_EXIT_CRITICAL();
        }
        return (err);
 4012620:	8005883a 	mov	r2,r16
 4012624:	003fc006 	br	4012528 <OSTaskCreateExt+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012628:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401262c:	1dc4703a 	and	r2,r3,r23
 4012630:	1001703a 	wrctl	status,r2
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
                OS_Sched();
            }
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 4012634:	e0000015 	stw	zero,0(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012638:	1801703a 	wrctl	status,r3
            OS_EXIT_CRITICAL();
        }
        return (err);
 401263c:	8005883a 	mov	r2,r16
 4012640:	003fb906 	br	4012528 <OSTaskCreateExt+0x54>

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
                OS_Sched();
 4012644:	400ece40 	call	400ece4 <OS_Sched>
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
            OS_EXIT_CRITICAL();
        }
        return (err);
 4012648:	8005883a 	mov	r2,r16
 401264c:	003fb606 	br	4012528 <OSTaskCreateExt+0x54>

04012650 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 4012650:	defffb04 	addi	sp,sp,-20
 4012654:	dfc00415 	stw	ra,16(sp)
 4012658:	dcc00315 	stw	r19,12(sp)
 401265c:	dc800215 	stw	r18,8(sp)
 4012660:	dc400115 	stw	r17,4(sp)
 4012664:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR     cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 4012668:	00810134 	movhi	r2,1028
 401266c:	10a90404 	addi	r2,r2,-23536
 4012670:	10c00003 	ldbu	r3,0(r2)
 4012674:	1800891e 	bne	r3,zero,401289c <OSTaskDel+0x24c>
        return (OS_ERR_TASK_DEL_ISR);
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4012678:	21003fcc 	andi	r4,r4,255
 401267c:	00800504 	movi	r2,20
 4012680:	20802926 	beq	r4,r2,4012728 <OSTaskDel+0xd8>
        return (OS_ERR_TASK_DEL_IDLE);
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 4012684:	008004c4 	movi	r2,19
 4012688:	1100862e 	bgeu	r2,r4,40128a4 <OSTaskDel+0x254>
        if (prio != OS_PRIO_SELF) {
 401268c:	00803fc4 	movi	r2,255
 4012690:	20800826 	beq	r4,r2,40126b4 <OSTaskDel+0x64>
 4012694:	00800a84 	movi	r2,42
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
        OS_Sched();                                     /* Find new highest priority task              */
    }
    return (OS_ERR_NONE);
}
 4012698:	dfc00417 	ldw	ra,16(sp)
 401269c:	dcc00317 	ldw	r19,12(sp)
 40126a0:	dc800217 	ldw	r18,8(sp)
 40126a4:	dc400117 	ldw	r17,4(sp)
 40126a8:	dc000017 	ldw	r16,0(sp)
 40126ac:	dec00504 	addi	sp,sp,20
 40126b0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40126b4:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40126b8:	00bfff84 	movi	r2,-2
 40126bc:	9084703a 	and	r2,r18,r2
 40126c0:	1001703a 	wrctl	status,r2
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 40126c4:	00c10134 	movhi	r3,1028
 40126c8:	18e90504 	addi	r3,r3,-23532
 40126cc:	18800017 	ldw	r2,0(r3)
 40126d0:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
 40126d4:	2105883a 	add	r2,r4,r4
 40126d8:	1085883a 	add	r2,r2,r2
 40126dc:	00c10134 	movhi	r3,1028
 40126e0:	18ca4904 	addi	r3,r3,10532
 40126e4:	10e3883a 	add	r17,r2,r3
 40126e8:	8c000017 	ldw	r16,0(r17)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 40126ec:	8000091e 	bne	r16,zero,4012714 <OSTaskDel+0xc4>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40126f0:	9001703a 	wrctl	status,r18
 40126f4:	008010c4 	movi	r2,67
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
        OS_Sched();                                     /* Find new highest priority task              */
    }
    return (OS_ERR_NONE);
}
 40126f8:	dfc00417 	ldw	ra,16(sp)
 40126fc:	dcc00317 	ldw	r19,12(sp)
 4012700:	dc800217 	ldw	r18,8(sp)
 4012704:	dc400117 	ldw	r17,4(sp)
 4012708:	dc000017 	ldw	r16,0(sp)
 401270c:	dec00504 	addi	sp,sp,20
 4012710:	f800283a 	ret
    ptcb = OSTCBPrioTbl[prio];
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 4012714:	00800044 	movi	r2,1
 4012718:	80800b1e 	bne	r16,r2,4012748 <OSTaskDel+0xf8>
 401271c:	9001703a 	wrctl	status,r18
 4012720:	00800f44 	movi	r2,61
 4012724:	003fdc06 	br	4012698 <OSTaskDel+0x48>


    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
        return (OS_ERR_TASK_DEL_ISR);
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4012728:	00800f84 	movi	r2,62
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
        OS_Sched();                                     /* Find new highest priority task              */
    }
    return (OS_ERR_NONE);
}
 401272c:	dfc00417 	ldw	ra,16(sp)
 4012730:	dcc00317 	ldw	r19,12(sp)
 4012734:	dc800217 	ldw	r18,8(sp)
 4012738:	dc400117 	ldw	r17,4(sp)
 401273c:	dc000017 	ldw	r16,0(sp)
 4012740:	dec00504 	addi	sp,sp,20
 4012744:	f800283a 	ret
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 4012748:	81000d03 	ldbu	r4,52(r16)
 401274c:	01410134 	movhi	r5,1028
 4012750:	29690244 	addi	r5,r5,-23543
 4012754:	80c00d43 	ldbu	r3,53(r16)
 4012758:	2149883a 	add	r4,r4,r5
 401275c:	20800003 	ldbu	r2,0(r4)
 4012760:	00c6303a 	nor	r3,zero,r3
 4012764:	1886703a 	and	r3,r3,r2
 4012768:	20c00005 	stb	r3,0(r4)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 401276c:	80800d03 	ldbu	r2,52(r16)
 4012770:	1145883a 	add	r2,r2,r5
 4012774:	10c00003 	ldbu	r3,0(r2)
 4012778:	1800071e 	bne	r3,zero,4012798 <OSTaskDel+0x148>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 401277c:	00810134 	movhi	r2,1028
 4012780:	10a90204 	addi	r2,r2,-23544
 4012784:	80c00d83 	ldbu	r3,54(r16)
 4012788:	11000003 	ldbu	r4,0(r2)
 401278c:	00c6303a 	nor	r3,zero,r3
 4012790:	1906703a 	and	r3,r3,r4
 4012794:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 4012798:	81400717 	ldw	r5,28(r16)
 401279c:	28000226 	beq	r5,zero,40127a8 <OSTaskDel+0x158>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 40127a0:	8009883a 	mov	r4,r16
 40127a4:	400e9b80 	call	400e9b8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 40127a8:	81400817 	ldw	r5,32(r16)
 40127ac:	28000226 	beq	r5,zero,40127b8 <OSTaskDel+0x168>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 40127b0:	8009883a 	mov	r4,r16
 40127b4:	400ea080 	call	400ea08 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 40127b8:	81000a17 	ldw	r4,40(r16)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 40127bc:	20000126 	beq	r4,zero,40127c4 <OSTaskDel+0x174>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 40127c0:	400fbe00 	call	400fbe0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 40127c4:	80000c05 	stb	zero,48(r16)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 40127c8:	80000c45 	stb	zero,49(r16)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 40127cc:	04c10134 	movhi	r19,1028
 40127d0:	9ce8f604 	addi	r19,r19,-23592
 40127d4:	99000003 	ldbu	r4,0(r19)
 40127d8:	00803fc4 	movi	r2,255
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 40127dc:	80000b8d 	sth	zero,46(r16)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 40127e0:	20c03fcc 	andi	r3,r4,255
 40127e4:	18800226 	beq	r3,r2,40127f0 <OSTaskDel+0x1a0>
        OSLockNesting++;
 40127e8:	20800044 	addi	r2,r4,1
 40127ec:	98800005 	stb	r2,0(r19)
 40127f0:	9001703a 	wrctl	status,r18
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 40127f4:	400e8880 	call	400e888 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40127f8:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40127fc:	00bfff84 	movi	r2,-2
 4012800:	9084703a 	and	r2,r18,r2
 4012804:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4012808:	98800003 	ldbu	r2,0(r19)
 401280c:	10000226 	beq	r2,zero,4012818 <OSTaskDel+0x1c8>
        OSLockNesting--;
 4012810:	10bfffc4 	addi	r2,r2,-1
 4012814:	98800005 	stb	r2,0(r19)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 4012818:	8009883a 	mov	r4,r16
 401281c:	4026a440 	call	4026a44 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 4012820:	00c10134 	movhi	r3,1028
 4012824:	18e8fe44 	addi	r3,r3,-23559
 4012828:	18800003 	ldbu	r2,0(r3)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 401282c:	88000015 	stw	zero,0(r17)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
        OSLockNesting--;
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    OSTaskCtr--;                                        /* One less task being managed                 */
 4012830:	10bfffc4 	addi	r2,r2,-1
 4012834:	18800005 	stb	r2,0(r3)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 4012838:	81000617 	ldw	r4,24(r16)
 401283c:	20001e26 	beq	r4,zero,40128b8 <OSTaskDel+0x268>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
        OSTCBList                  = ptcb->OSTCBNext;
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4012840:	80800517 	ldw	r2,20(r16)
 4012844:	20800515 	stw	r2,20(r4)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 4012848:	80c00517 	ldw	r3,20(r16)
 401284c:	19000615 	stw	r4,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 4012850:	00c10134 	movhi	r3,1028
 4012854:	18e8fd04 	addi	r3,r3,-23564
 4012858:	18800017 	ldw	r2,0(r3)
 401285c:	80800515 	stw	r2,20(r16)
    OSTCBFreeList     = ptcb;
 4012860:	1c000015 	stw	r16,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 4012864:	00800fc4 	movi	r2,63
 4012868:	80801305 	stb	r2,76(r16)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 401286c:	80001345 	stb	zero,77(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012870:	9001703a 	wrctl	status,r18
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4012874:	00810134 	movhi	r2,1028
 4012878:	10a8f644 	addi	r2,r2,-23591
 401287c:	11000003 	ldbu	r4,0(r2)
 4012880:	00c00044 	movi	r3,1
 4012884:	20c00226 	beq	r4,r3,4012890 <OSTaskDel+0x240>
        OS_Sched();                                     /* Find new highest priority task              */
 4012888:	0005883a 	mov	r2,zero
 401288c:	003f8206 	br	4012698 <OSTaskDel+0x48>
 4012890:	400ece40 	call	400ece4 <OS_Sched>
 4012894:	0005883a 	mov	r2,zero
 4012898:	003f7f06 	br	4012698 <OSTaskDel+0x48>
    OS_CPU_SR     cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 401289c:	00801004 	movi	r2,64
 40128a0:	003f7d06 	br	4012698 <OSTaskDel+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40128a4:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40128a8:	00bfff84 	movi	r2,-2
 40128ac:	9084703a 	and	r2,r18,r2
 40128b0:	1001703a 	wrctl	status,r2
 40128b4:	003f8706 	br	40126d4 <OSTaskDel+0x84>
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    OSTaskCtr--;                                        /* One less task being managed                 */
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 40128b8:	80c00517 	ldw	r3,20(r16)
        OSTCBList                  = ptcb->OSTCBNext;
 40128bc:	00810134 	movhi	r2,1028
 40128c0:	10a8f904 	addi	r2,r2,-23580
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    OSTaskCtr--;                                        /* One less task being managed                 */
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 40128c4:	18000615 	stw	zero,24(r3)
        OSTCBList                  = ptcb->OSTCBNext;
 40128c8:	10c00015 	stw	r3,0(r2)
 40128cc:	003fe006 	br	4012850 <OSTaskDel+0x200>

040128d0 <OSTaskDelReq>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 40128d0:	20c03fcc 	andi	r3,r4,255
 40128d4:	00800504 	movi	r2,20
 40128d8:	18801126 	beq	r3,r2,4012920 <OSTaskDelReq+0x50>
        return (OS_ERR_TASK_DEL_IDLE);
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 40128dc:	008004c4 	movi	r2,19
 40128e0:	10c0112e 	bgeu	r2,r3,4012928 <OSTaskDelReq+0x58>
        if (prio != OS_PRIO_SELF) {
 40128e4:	00803fc4 	movi	r2,255
 40128e8:	18800226 	beq	r3,r2,40128f4 <OSTaskDelReq+0x24>
 40128ec:	00800a84 	movi	r2,42
 40128f0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40128f4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40128f8:	00bfff84 	movi	r2,-2
 40128fc:	2884703a 	and	r2,r5,r2
 4012900:	1001703a 	wrctl	status,r2
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 4012904:	00c10134 	movhi	r3,1028
 4012908:	18e90504 	addi	r3,r3,-23532
 401290c:	18800017 	ldw	r2,0(r3)
 4012910:	10c00dc3 	ldbu	r3,55(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012914:	2801703a 	wrctl	status,r5
        OS_EXIT_CRITICAL();
        return (stat);
 4012918:	1805883a 	mov	r2,r3
 401291c:	f800283a 	ret
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 4012920:	00800f84 	movi	r2,62
 4012924:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012928:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401292c:	00bfff84 	movi	r2,-2
 4012930:	2084703a 	and	r2,r4,r2
 4012934:	1001703a 	wrctl	status,r2
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
        OS_EXIT_CRITICAL();
        return (stat);
    }
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];
 4012938:	18c7883a 	add	r3,r3,r3
 401293c:	18c7883a 	add	r3,r3,r3
 4012940:	00810134 	movhi	r2,1028
 4012944:	108a4904 	addi	r2,r2,10532
 4012948:	1887883a 	add	r3,r3,r2
 401294c:	18c00017 	ldw	r3,0(r3)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 4012950:	1800031e 	bne	r3,zero,4012960 <OSTaskDelReq+0x90>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012954:	2001703a 	wrctl	status,r4
 4012958:	008010c4 	movi	r2,67
 401295c:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 4012960:	00800044 	movi	r2,1
 4012964:	1880031e 	bne	r3,r2,4012974 <OSTaskDelReq+0xa4>
 4012968:	2001703a 	wrctl	status,r4
 401296c:	00800f44 	movi	r2,61
 4012970:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 4012974:	00800fc4 	movi	r2,63
 4012978:	18800dc5 	stb	r2,55(r3)
 401297c:	2001703a 	wrctl	status,r4
 4012980:	0005883a 	mov	r2,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 4012984:	f800283a 	ret

04012988 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4012988:	defffd04 	addi	sp,sp,-12
 401298c:	dfc00215 	stw	ra,8(sp)
 4012990:	dc000115 	stw	r16,4(sp)
 4012994:	280f883a 	mov	r7,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4012998:	30003e26 	beq	r6,zero,4012a94 <OSTaskNameGet+0x10c>
        return (0);
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 401299c:	21003fcc 	andi	r4,r4,255
 40129a0:	00800504 	movi	r2,20
 40129a4:	11000a2e 	bgeu	r2,r4,40129d0 <OSTaskNameGet+0x48>
        if (prio != OS_PRIO_SELF) {
 40129a8:	00803fc4 	movi	r2,255
 40129ac:	20800826 	beq	r4,r2,40129d0 <OSTaskNameGet+0x48>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 40129b0:	0007883a 	mov	r3,zero
 40129b4:	00800a84 	movi	r2,42
 40129b8:	30800005 	stb	r2,0(r6)
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 40129bc:	1805883a 	mov	r2,r3
 40129c0:	dfc00217 	ldw	ra,8(sp)
 40129c4:	dc000117 	ldw	r16,4(sp)
 40129c8:	dec00304 	addi	sp,sp,12
 40129cc:	f800283a 	ret
        if (prio != OS_PRIO_SELF) {
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
            return (0);
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 40129d0:	38000c26 	beq	r7,zero,4012a04 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 40129d4:	00810134 	movhi	r2,1028
 40129d8:	10a90404 	addi	r2,r2,-23536
 40129dc:	10c00003 	ldbu	r3,0(r2)
 40129e0:	18001026 	beq	r3,zero,4012a24 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 40129e4:	00800444 	movi	r2,17
 40129e8:	0007883a 	mov	r3,zero
 40129ec:	30800005 	stb	r2,0(r6)
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 40129f0:	1805883a 	mov	r2,r3
 40129f4:	dfc00217 	ldw	ra,8(sp)
 40129f8:	dc000117 	ldw	r16,4(sp)
 40129fc:	dec00304 	addi	sp,sp,12
 4012a00:	f800283a 	ret
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
            return (0);
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 4012a04:	0007883a 	mov	r3,zero
 4012a08:	00800304 	movi	r2,12
 4012a0c:	30800005 	stb	r2,0(r6)
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4012a10:	1805883a 	mov	r2,r3
 4012a14:	dfc00217 	ldw	ra,8(sp)
 4012a18:	dc000117 	ldw	r16,4(sp)
 4012a1c:	dec00304 	addi	sp,sp,12
 4012a20:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012a24:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012a28:	00bfff84 	movi	r2,-2
 4012a2c:	8084703a 	and	r2,r16,r2
 4012a30:	1001703a 	wrctl	status,r2
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 4012a34:	00c03fc4 	movi	r3,255
 4012a38:	20c01c26 	beq	r4,r3,4012aac <OSTaskNameGet+0x124>
        prio = OSTCBCur->OSTCBPrio;
    }
    ptcb = OSTCBPrioTbl[prio];
 4012a3c:	2105883a 	add	r2,r4,r4
 4012a40:	1085883a 	add	r2,r2,r2
 4012a44:	00c10134 	movhi	r3,1028
 4012a48:	18ca4904 	addi	r3,r3,10532
 4012a4c:	10c5883a 	add	r2,r2,r3
 4012a50:	11400017 	ldw	r5,0(r2)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 4012a54:	28001a26 	beq	r5,zero,4012ac0 <OSTaskNameGet+0x138>
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4012a58:	00800044 	movi	r2,1
 4012a5c:	28801826 	beq	r5,r2,4012ac0 <OSTaskNameGet+0x138>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 4012a60:	3809883a 	mov	r4,r7
 4012a64:	29401304 	addi	r5,r5,76
 4012a68:	d9800015 	stw	r6,0(sp)
 4012a6c:	400ebf80 	call	400ebf8 <OS_StrCopy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a70:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012a74:	d9800017 	ldw	r6,0(sp)
    return (len);
 4012a78:	10c03fcc 	andi	r3,r2,255
}
 4012a7c:	1805883a 	mov	r2,r3
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012a80:	30000005 	stb	zero,0(r6)
    return (len);
}
 4012a84:	dfc00217 	ldw	ra,8(sp)
 4012a88:	dc000117 	ldw	r16,4(sp)
 4012a8c:	dec00304 	addi	sp,sp,12
 4012a90:	f800283a 	ret
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4012a94:	0007883a 	mov	r3,zero
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 4012a98:	1805883a 	mov	r2,r3
 4012a9c:	dfc00217 	ldw	ra,8(sp)
 4012aa0:	dc000117 	ldw	r16,4(sp)
 4012aa4:	dec00304 	addi	sp,sp,12
 4012aa8:	f800283a 	ret
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
        prio = OSTCBCur->OSTCBPrio;
 4012aac:	00810134 	movhi	r2,1028
 4012ab0:	10a90504 	addi	r2,r2,-23532
 4012ab4:	10c00017 	ldw	r3,0(r2)
 4012ab8:	19000c83 	ldbu	r4,50(r3)
 4012abc:	003fdf06 	br	4012a3c <OSTaskNameGet+0xb4>
 4012ac0:	8001703a 	wrctl	status,r16
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4012ac4:	008010c4 	movi	r2,67
 4012ac8:	0007883a 	mov	r3,zero
 4012acc:	30800005 	stb	r2,0(r6)
 4012ad0:	003fc706 	br	40129f0 <OSTaskNameGet+0x68>

04012ad4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4012ad4:	defffb04 	addi	sp,sp,-20
 4012ad8:	dc000115 	stw	r16,4(sp)
 4012adc:	dfc00415 	stw	ra,16(sp)
 4012ae0:	dc800315 	stw	r18,12(sp)
 4012ae4:	dc400215 	stw	r17,8(sp)
 4012ae8:	2821883a 	mov	r16,r5
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4012aec:	30000726 	beq	r6,zero,4012b0c <OSTaskNameSet+0x38>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 4012af0:	21003fcc 	andi	r4,r4,255
 4012af4:	00800504 	movi	r2,20
 4012af8:	11000a2e 	bgeu	r2,r4,4012b24 <OSTaskNameSet+0x50>
        if (prio != OS_PRIO_SELF) {
 4012afc:	00803fc4 	movi	r2,255
 4012b00:	20800826 	beq	r4,r2,4012b24 <OSTaskNameSet+0x50>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 4012b04:	00800a84 	movi	r2,42
 4012b08:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4012b0c:	dfc00417 	ldw	ra,16(sp)
 4012b10:	dc800317 	ldw	r18,12(sp)
 4012b14:	dc400217 	ldw	r17,8(sp)
 4012b18:	dc000117 	ldw	r16,4(sp)
 4012b1c:	dec00504 	addi	sp,sp,20
 4012b20:	f800283a 	ret
        if (prio != OS_PRIO_SELF) {
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
            return;
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 4012b24:	80000c26 	beq	r16,zero,4012b58 <OSTaskNameSet+0x84>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 4012b28:	00810134 	movhi	r2,1028
 4012b2c:	10a90404 	addi	r2,r2,-23536
 4012b30:	10c00003 	ldbu	r3,0(r2)
 4012b34:	18001026 	beq	r3,zero,4012b78 <OSTaskNameSet+0xa4>
        *perr = OS_ERR_NAME_SET_ISR;
 4012b38:	00800484 	movi	r2,18
 4012b3c:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4012b40:	dfc00417 	ldw	ra,16(sp)
 4012b44:	dc800317 	ldw	r18,12(sp)
 4012b48:	dc400217 	ldw	r17,8(sp)
 4012b4c:	dc000117 	ldw	r16,4(sp)
 4012b50:	dec00504 	addi	sp,sp,20
 4012b54:	f800283a 	ret
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
            return;
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 4012b58:	00800304 	movi	r2,12
 4012b5c:	30800005 	stb	r2,0(r6)
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4012b60:	dfc00417 	ldw	ra,16(sp)
 4012b64:	dc800317 	ldw	r18,12(sp)
 4012b68:	dc400217 	ldw	r17,8(sp)
 4012b6c:	dc000117 	ldw	r16,4(sp)
 4012b70:	dec00504 	addi	sp,sp,20
 4012b74:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012b78:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012b7c:	00bfff84 	movi	r2,-2
 4012b80:	9084703a 	and	r2,r18,r2
 4012b84:	1001703a 	wrctl	status,r2
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 4012b88:	00c03fc4 	movi	r3,255
 4012b8c:	20c01c26 	beq	r4,r3,4012c00 <OSTaskNameSet+0x12c>
        prio = OSTCBCur->OSTCBPrio;
    }
    ptcb = OSTCBPrioTbl[prio];
 4012b90:	2105883a 	add	r2,r4,r4
 4012b94:	1085883a 	add	r2,r2,r2
 4012b98:	00c10134 	movhi	r3,1028
 4012b9c:	18ca4904 	addi	r3,r3,10532
 4012ba0:	10c5883a 	add	r2,r2,r3
 4012ba4:	14400017 	ldw	r17,0(r2)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 4012ba8:	88001a26 	beq	r17,zero,4012c14 <OSTaskNameSet+0x140>
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 4012bac:	00800044 	movi	r2,1
 4012bb0:	88801826 	beq	r17,r2,4012c14 <OSTaskNameSet+0x140>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return;
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 4012bb4:	8009883a 	mov	r4,r16
 4012bb8:	d9800015 	stw	r6,0(sp)
 4012bbc:	400ec2c0 	call	400ec2c <OS_StrLen>
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 4012bc0:	10803fcc 	andi	r2,r2,255
 4012bc4:	00c007c4 	movi	r3,31
 4012bc8:	d9800017 	ldw	r6,0(sp)
 4012bcc:	1880042e 	bgeu	r3,r2,4012be0 <OSTaskNameSet+0x10c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012bd0:	9001703a 	wrctl	status,r18
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 4012bd4:	00801044 	movi	r2,65
 4012bd8:	30800005 	stb	r2,0(r6)
 4012bdc:	003fcb06 	br	4012b0c <OSTaskNameSet+0x38>
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 4012be0:	89001304 	addi	r4,r17,76
 4012be4:	800b883a 	mov	r5,r16
 4012be8:	d9800015 	stw	r6,0(sp)
 4012bec:	400ebf80 	call	400ebf8 <OS_StrCopy>
 4012bf0:	9001703a 	wrctl	status,r18
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012bf4:	d9800017 	ldw	r6,0(sp)
 4012bf8:	30000005 	stb	zero,0(r6)
 4012bfc:	003fc306 	br	4012b0c <OSTaskNameSet+0x38>
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
        prio = OSTCBCur->OSTCBPrio;
 4012c00:	00810134 	movhi	r2,1028
 4012c04:	10a90504 	addi	r2,r2,-23532
 4012c08:	10c00017 	ldw	r3,0(r2)
 4012c0c:	19000c83 	ldbu	r4,50(r3)
 4012c10:	003fdf06 	br	4012b90 <OSTaskNameSet+0xbc>
 4012c14:	9001703a 	wrctl	status,r18
        *perr = OS_ERR_TASK_NOT_EXIST;
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4012c18:	008010c4 	movi	r2,67
 4012c1c:	30800005 	stb	r2,0(r6)
 4012c20:	003fba06 	br	4012b0c <OSTaskNameSet+0x38>

04012c24 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 4012c24:	deffff04 	addi	sp,sp,-4
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 4012c28:	20c03fcc 	andi	r3,r4,255
 4012c2c:	008004c4 	movi	r2,19
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 4012c30:	dfc00015 	stw	ra,0(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 4012c34:	10c0042e 	bgeu	r2,r3,4012c48 <OSTaskResume+0x24>
 4012c38:	00800a84 	movi	r2,42
        }
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
}
 4012c3c:	dfc00017 	ldw	ra,0(sp)
 4012c40:	dec00104 	addi	sp,sp,4
 4012c44:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012c48:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012c4c:	00bfff84 	movi	r2,-2
 4012c50:	3884703a 	and	r2,r7,r2
 4012c54:	1001703a 	wrctl	status,r2
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];
 4012c58:	18c7883a 	add	r3,r3,r3
 4012c5c:	18c7883a 	add	r3,r3,r3
 4012c60:	00810134 	movhi	r2,1028
 4012c64:	108a4904 	addi	r2,r2,10532
 4012c68:	1887883a 	add	r3,r3,r2
 4012c6c:	19800017 	ldw	r6,0(r3)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 4012c70:	3000051e 	bne	r6,zero,4012c88 <OSTaskResume+0x64>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012c74:	3801703a 	wrctl	status,r7
 4012c78:	00801184 	movi	r2,70
        }
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
}
 4012c7c:	dfc00017 	ldw	ra,0(sp)
 4012c80:	dec00104 	addi	sp,sp,4
 4012c84:	f800283a 	ret
    ptcb = OSTCBPrioTbl[prio];
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 4012c88:	02000044 	movi	r8,1
 4012c8c:	3200031e 	bne	r6,r8,4012c9c <OSTaskResume+0x78>
 4012c90:	3801703a 	wrctl	status,r7
 4012c94:	008010c4 	movi	r2,67
 4012c98:	003fe806 	br	4012c3c <OSTaskResume+0x18>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 4012c9c:	31000c03 	ldbu	r4,48(r6)
 4012ca0:	2080020c 	andi	r2,r4,8
 4012ca4:	1000031e 	bne	r2,zero,4012cb4 <OSTaskResume+0x90>
 4012ca8:	3801703a 	wrctl	status,r7
 4012cac:	00801104 	movi	r2,68
 4012cb0:	003fe206 	br	4012c3c <OSTaskResume+0x18>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 4012cb4:	00fffdc4 	movi	r3,-9
 4012cb8:	20c6703a 	and	r3,r4,r3
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4012cbc:	18803fcc 	andi	r2,r3,255
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 4012cc0:	30c00c05 	stb	r3,48(r6)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4012cc4:	10001a1e 	bne	r2,zero,4012d30 <OSTaskResume+0x10c>
            if (ptcb->OSTCBDly == 0) {
 4012cc8:	30800b8b 	ldhu	r2,46(r6)
 4012ccc:	1000181e 	bne	r2,zero,4012d30 <OSTaskResume+0x10c>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 4012cd0:	01410134 	movhi	r5,1028
 4012cd4:	29690204 	addi	r5,r5,-23544
 4012cd8:	28c00003 	ldbu	r3,0(r5)
 4012cdc:	30800d83 	ldbu	r2,54(r6)
 4012ce0:	10c4b03a 	or	r2,r2,r3
 4012ce4:	28800005 	stb	r2,0(r5)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4012ce8:	31000d03 	ldbu	r4,52(r6)
 4012cec:	00c10134 	movhi	r3,1028
 4012cf0:	18e90244 	addi	r3,r3,-23543
 4012cf4:	31400d43 	ldbu	r5,53(r6)
 4012cf8:	20c9883a 	add	r4,r4,r3
 4012cfc:	20800003 	ldbu	r2,0(r4)
 4012d00:	1144b03a 	or	r2,r2,r5
 4012d04:	20800005 	stb	r2,0(r4)
 4012d08:	3801703a 	wrctl	status,r7
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 4012d0c:	00810134 	movhi	r2,1028
 4012d10:	10a8f644 	addi	r2,r2,-23591
 4012d14:	10c00003 	ldbu	r3,0(r2)
 4012d18:	1a000226 	beq	r3,r8,4012d24 <OSTaskResume+0x100>
 4012d1c:	0005883a 	mov	r2,zero
 4012d20:	003fc606 	br	4012c3c <OSTaskResume+0x18>
                    OS_Sched();                               /* Find new highest priority task        */
 4012d24:	400ece40 	call	400ece4 <OS_Sched>
 4012d28:	0005883a 	mov	r2,zero
 4012d2c:	003fc306 	br	4012c3c <OSTaskResume+0x18>
 4012d30:	3801703a 	wrctl	status,r7
 4012d34:	0005883a 	mov	r2,zero
 4012d38:	003fc006 	br	4012c3c <OSTaskResume+0x18>

04012d3c <OSTaskStkChk>:
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 4012d3c:	21003fcc 	andi	r4,r4,255
 4012d40:	00800504 	movi	r2,20
 4012d44:	1100042e 	bgeu	r2,r4,4012d58 <OSTaskStkChk+0x1c>
        if (prio != OS_PRIO_SELF) {
 4012d48:	00803fc4 	movi	r2,255
 4012d4c:	20800226 	beq	r4,r2,4012d58 <OSTaskStkChk+0x1c>
 4012d50:	00800a84 	movi	r2,42
 4012d54:	f800283a 	ret
            return (OS_ERR_PRIO_INVALID);
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 4012d58:	28002626 	beq	r5,zero,4012df4 <OSTaskStkChk+0xb8>
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 4012d5c:	28000015 	stw	zero,0(r5)
    p_stk_data->OSUsed = 0;
 4012d60:	28000115 	stw	zero,4(r5)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012d64:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012d68:	00bfff84 	movi	r2,-2
 4012d6c:	3084703a 	and	r2,r6,r2
 4012d70:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 4012d74:	00c03fc4 	movi	r3,255
 4012d78:	20c01226 	beq	r4,r3,4012dc4 <OSTaskStkChk+0x88>
        prio = OSTCBCur->OSTCBPrio;
    }
    ptcb = OSTCBPrioTbl[prio];
 4012d7c:	2105883a 	add	r2,r4,r4
 4012d80:	1085883a 	add	r2,r2,r2
 4012d84:	00c10134 	movhi	r3,1028
 4012d88:	18ca4904 	addi	r3,r3,10532
 4012d8c:	10c5883a 	add	r2,r2,r3
 4012d90:	11000017 	ldw	r4,0(r2)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4012d94:	2000031e 	bne	r4,zero,4012da4 <OSTaskStkChk+0x68>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012d98:	3001703a 	wrctl	status,r6
 4012d9c:	008010c4 	movi	r2,67
 4012da0:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {
 4012da4:	00800044 	movi	r2,1
 4012da8:	20bffb26 	beq	r4,r2,4012d98 <OSTaskStkChk+0x5c>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 4012dac:	2080040b 	ldhu	r2,16(r4)
 4012db0:	1080004c 	andi	r2,r2,1
 4012db4:	1000111e 	bne	r2,zero,4012dfc <OSTaskStkChk+0xc0>
 4012db8:	3001703a 	wrctl	status,r6
 4012dbc:	00801144 	movi	r2,69
 4012dc0:	f800283a 	ret
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    p_stk_data->OSUsed = 0;
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
        prio = OSTCBCur->OSTCBPrio;
 4012dc4:	00810134 	movhi	r2,1028
 4012dc8:	10a90504 	addi	r2,r2,-23532
 4012dcc:	10c00017 	ldw	r3,0(r2)
 4012dd0:	19000c83 	ldbu	r4,50(r3)
    }
    ptcb = OSTCBPrioTbl[prio];
 4012dd4:	00c10134 	movhi	r3,1028
 4012dd8:	18ca4904 	addi	r3,r3,10532
 4012ddc:	2105883a 	add	r2,r4,r4
 4012de0:	1085883a 	add	r2,r2,r2
 4012de4:	10c5883a 	add	r2,r2,r3
 4012de8:	11000017 	ldw	r4,0(r2)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4012dec:	203fea26 	beq	r4,zero,4012d98 <OSTaskStkChk+0x5c>
 4012df0:	003fec06 	br	4012da4 <OSTaskStkChk+0x68>
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 4012df4:	00800244 	movi	r2,9
 4012df8:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    }
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
 4012dfc:	20c00217 	ldw	r3,8(r4)
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    }
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
 4012e00:	21c00317 	ldw	r7,12(r4)
 4012e04:	3001703a 	wrctl	status,r6
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4012e08:	18800017 	ldw	r2,0(r3)
 4012e0c:	10000f1e 	bne	r2,zero,4012e4c <OSTaskStkChk+0x110>
 4012e10:	18c00104 	addi	r3,r3,4
 4012e14:	0009883a 	mov	r4,zero
 4012e18:	18800017 	ldw	r2,0(r3)
        nfree++;
 4012e1c:	21000044 	addi	r4,r4,1
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4012e20:	18c00104 	addi	r3,r3,4
 4012e24:	103ffc26 	beq	r2,zero,4012e18 <OSTaskStkChk+0xdc>
 4012e28:	2105883a 	add	r2,r4,r4
 4012e2c:	1087883a 	add	r3,r2,r2
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 4012e30:	3905c83a 	sub	r2,r7,r4
 4012e34:	1085883a 	add	r2,r2,r2
 4012e38:	1085883a 	add	r2,r2,r2
 4012e3c:	28800115 	stw	r2,4(r5)
 4012e40:	0005883a 	mov	r2,zero
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4012e44:	28c00015 	stw	r3,0(r5)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    return (OS_ERR_NONE);
}
 4012e48:	f800283a 	ret
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4012e4c:	0009883a 	mov	r4,zero
 4012e50:	0007883a 	mov	r3,zero
 4012e54:	003ff606 	br	4012e30 <OSTaskStkChk+0xf4>

04012e58 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4012e58:	deffff04 	addi	sp,sp,-4
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 4012e5c:	21403fcc 	andi	r5,r4,255
 4012e60:	00800504 	movi	r2,20
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4012e64:	dfc00015 	stw	ra,0(sp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 4012e68:	28802226 	beq	r5,r2,4012ef4 <OSTaskSuspend+0x9c>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4012e6c:	008004c4 	movi	r2,19
 4012e70:	1140432e 	bgeu	r2,r5,4012f80 <OSTaskSuspend+0x128>
        if (prio != OS_PRIO_SELF) {
 4012e74:	00803fc4 	movi	r2,255
 4012e78:	28800426 	beq	r5,r2,4012e8c <OSTaskSuspend+0x34>
 4012e7c:	00800a84 	movi	r2,42
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
        OS_Sched();                                             /* Find new highest priority task      */
    }
    return (OS_ERR_NONE);
}
 4012e80:	dfc00017 	ldw	ra,0(sp)
 4012e84:	dec00104 	addi	sp,sp,4
 4012e88:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012e8c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012e90:	00bfff84 	movi	r2,-2
 4012e94:	4084703a 	and	r2,r8,r2
 4012e98:	1001703a 	wrctl	status,r2
        }
    }
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
        prio = OSTCBCur->OSTCBPrio;
 4012e9c:	00c10134 	movhi	r3,1028
 4012ea0:	18e90504 	addi	r3,r3,-23532
 4012ea4:	18800017 	ldw	r2,0(r3)
 4012ea8:	01c00044 	movi	r7,1
 4012eac:	11400c83 	ldbu	r5,50(r2)
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
        self = OS_TRUE;
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    }
    ptcb = OSTCBPrioTbl[prio];
 4012eb0:	2945883a 	add	r2,r5,r5
 4012eb4:	1085883a 	add	r2,r2,r2
 4012eb8:	00c10134 	movhi	r3,1028
 4012ebc:	18ca4904 	addi	r3,r3,10532
 4012ec0:	10c5883a 	add	r2,r2,r3
 4012ec4:	11800017 	ldw	r6,0(r2)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 4012ec8:	3000051e 	bne	r6,zero,4012ee0 <OSTaskSuspend+0x88>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012ecc:	4001703a 	wrctl	status,r8
 4012ed0:	00801204 	movi	r2,72
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
        OS_Sched();                                             /* Find new highest priority task      */
    }
    return (OS_ERR_NONE);
}
 4012ed4:	dfc00017 	ldw	ra,0(sp)
 4012ed8:	dec00104 	addi	sp,sp,4
 4012edc:	f800283a 	ret
    ptcb = OSTCBPrioTbl[prio];
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 4012ee0:	02400044 	movi	r9,1
 4012ee4:	3240071e 	bne	r6,r9,4012f04 <OSTaskSuspend+0xac>
 4012ee8:	4001703a 	wrctl	status,r8
 4012eec:	008010c4 	movi	r2,67
 4012ef0:	003fe306 	br	4012e80 <OSTaskSuspend+0x28>
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 4012ef4:	008011c4 	movi	r2,71
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
        OS_Sched();                                             /* Find new highest priority task      */
    }
    return (OS_ERR_NONE);
}
 4012ef8:	dfc00017 	ldw	ra,0(sp)
 4012efc:	dec00104 	addi	sp,sp,4
 4012f00:	f800283a 	ret
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 4012f04:	31000d03 	ldbu	r4,52(r6)
 4012f08:	00c10134 	movhi	r3,1028
 4012f0c:	18e90244 	addi	r3,r3,-23543
 4012f10:	30800d43 	ldbu	r2,53(r6)
 4012f14:	20c9883a 	add	r4,r4,r3
 4012f18:	21400003 	ldbu	r5,0(r4)
 4012f1c:	0084303a 	nor	r2,zero,r2
 4012f20:	1144703a 	and	r2,r2,r5
    if (OSRdyTbl[y] == 0) {
 4012f24:	10c03fcc 	andi	r3,r2,255
 4012f28:	18c0201c 	xori	r3,r3,128
 4012f2c:	18ffe004 	addi	r3,r3,-128
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 4012f30:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
 4012f34:	1800071e 	bne	r3,zero,4012f54 <OSTaskSuspend+0xfc>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 4012f38:	00810134 	movhi	r2,1028
 4012f3c:	10a90204 	addi	r2,r2,-23544
 4012f40:	30c00d83 	ldbu	r3,54(r6)
 4012f44:	11000003 	ldbu	r4,0(r2)
 4012f48:	00c6303a 	nor	r3,zero,r3
 4012f4c:	1906703a 	and	r3,r3,r4
 4012f50:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 4012f54:	30800c03 	ldbu	r2,48(r6)
 4012f58:	10800214 	ori	r2,r2,8
 4012f5c:	30800c05 	stb	r2,48(r6)
 4012f60:	4001703a 	wrctl	status,r8
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 4012f64:	38803fcc 	andi	r2,r7,255
 4012f68:	12400226 	beq	r2,r9,4012f74 <OSTaskSuspend+0x11c>
        OS_Sched();                                             /* Find new highest priority task      */
 4012f6c:	0005883a 	mov	r2,zero
 4012f70:	003fc306 	br	4012e80 <OSTaskSuspend+0x28>
 4012f74:	400ece40 	call	400ece4 <OS_Sched>
 4012f78:	0005883a 	mov	r2,zero
 4012f7c:	003fc006 	br	4012e80 <OSTaskSuspend+0x28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012f80:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012f84:	00bfff84 	movi	r2,-2
 4012f88:	4084703a 	and	r2,r8,r2
 4012f8c:	1001703a 	wrctl	status,r2
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
        prio = OSTCBCur->OSTCBPrio;
        self = OS_TRUE;
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 4012f90:	00c10134 	movhi	r3,1028
 4012f94:	18e90504 	addi	r3,r3,-23532
 4012f98:	19000017 	ldw	r4,0(r3)
 4012f9c:	20800c83 	ldbu	r2,50(r4)
 4012fa0:	2885003a 	cmpeq	r2,r5,r2
 4012fa4:	100f883a 	mov	r7,r2
 4012fa8:	003fc106 	br	4012eb0 <OSTaskSuspend+0x58>

04012fac <OSTimeSet>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012fac:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012fb0:	00bfff84 	movi	r2,-2
 4012fb4:	2884703a 	and	r2,r5,r2
 4012fb8:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    OSTime = ticks;
 4012fbc:	00c10134 	movhi	r3,1028
 4012fc0:	18e90604 	addi	r3,r3,-23528
 4012fc4:	19000015 	stw	r4,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012fc8:	2801703a 	wrctl	status,r5
    OS_EXIT_CRITICAL();
}
 4012fcc:	f800283a 	ret

04012fd0 <OSTimeDly>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4012fd0:	00810134 	movhi	r2,1028
 4012fd4:	10a90404 	addi	r2,r2,-23536
 4012fd8:	10c00003 	ldbu	r3,0(r2)
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 4012fdc:	200f883a 	mov	r7,r4


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 4012fe0:	20bfffcc 	andi	r2,r4,65535
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4012fe4:	1800011e 	bne	r3,zero,4012fec <OSTimeDly+0x1c>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 4012fe8:	1000011e 	bne	r2,zero,4012ff0 <OSTimeDly+0x20>
 4012fec:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012ff0:	0013303a 	rdctl	r9,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012ff4:	00bfff84 	movi	r2,-2
 4012ff8:	4884703a 	and	r2,r9,r2
 4012ffc:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 4013000:	00c10134 	movhi	r3,1028
 4013004:	18e90504 	addi	r3,r3,-23532
 4013008:	19800017 	ldw	r6,0(r3)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 401300c:	00c10134 	movhi	r3,1028
 4013010:	18e90244 	addi	r3,r3,-23543
        if (OSRdyTbl[y] == 0) {
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4013014:	02010134 	movhi	r8,1028
 4013018:	42290204 	addi	r8,r8,-23544
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 401301c:	31000d03 	ldbu	r4,52(r6)
 4013020:	30800d43 	ldbu	r2,53(r6)
 4013024:	20c9883a 	add	r4,r4,r3
 4013028:	21400003 	ldbu	r5,0(r4)
 401302c:	0084303a 	nor	r2,zero,r2
 4013030:	1144703a 	and	r2,r2,r5
        if (OSRdyTbl[y] == 0) {
 4013034:	10c03fcc 	andi	r3,r2,255
 4013038:	18c0201c 	xori	r3,r3,128
 401303c:	18ffe004 	addi	r3,r3,-128
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4013040:	20800005 	stb	r2,0(r4)
        if (OSRdyTbl[y] == 0) {
 4013044:	18000326 	beq	r3,zero,4013054 <OSTimeDly+0x84>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4013048:	31c00b8d 	sth	r7,46(r6)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401304c:	4801703a 	wrctl	status,r9
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 4013050:	400ece41 	jmpi	400ece4 <OS_Sched>
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
        if (OSRdyTbl[y] == 0) {
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4013054:	30800d83 	ldbu	r2,54(r6)
 4013058:	40c00003 	ldbu	r3,0(r8)
 401305c:	0084303a 	nor	r2,zero,r2
 4013060:	10c4703a 	and	r2,r2,r3
 4013064:	40800005 	stb	r2,0(r8)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4013068:	31c00b8d 	sth	r7,46(r6)
 401306c:	4801703a 	wrctl	status,r9
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 4013070:	400ece41 	jmpi	400ece4 <OS_Sched>

04013074 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 4013074:	defffe04 	addi	sp,sp,-8
 4013078:	dfc00115 	stw	ra,4(sp)
 401307c:	dc000015 	stw	r16,0(sp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4013080:	00810134 	movhi	r2,1028
 4013084:	10a90404 	addi	r2,r2,-23536
 4013088:	10c00003 	ldbu	r3,0(r2)
 401308c:	1800151e 	bne	r3,zero,40130e4 <OSTimeDlyHMSM+0x70>
        return (OS_ERR_TIME_DLY_ISR);
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4013090:	21003fcc 	andi	r4,r4,255
 4013094:	20003726 	beq	r4,zero,4013174 <OSTimeDlyHMSM+0x100>
 4013098:	29403fcc 	andi	r5,r5,255
                    return (OS_ERR_TIME_ZERO_DLY);
                }
            }
        }
    }
    if (minutes > 59) {
 401309c:	00800ec4 	movi	r2,59
 40130a0:	11400b36 	bltu	r2,r5,40130d0 <OSTimeDlyHMSM+0x5c>
 40130a4:	31803fcc 	andi	r6,r6,255
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    }
    if (seconds > 59) {
 40130a8:	00800ec4 	movi	r2,59
 40130ac:	11802c36 	bltu	r2,r6,4013160 <OSTimeDlyHMSM+0xec>
 40130b0:	38ffffcc 	andi	r3,r7,65535
        return (OS_ERR_TIME_INVALID_SECONDS);
    }
    if (ms > 999) {
 40130b4:	0080f9c4 	movi	r2,999
 40130b8:	10c00f2e 	bgeu	r2,r3,40130f8 <OSTimeDlyHMSM+0x84>
 40130bc:	008014c4 	movi	r2,83
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
}
 40130c0:	dfc00117 	ldw	ra,4(sp)
 40130c4:	dc000017 	ldw	r16,0(sp)
 40130c8:	dec00204 	addi	sp,sp,8
 40130cc:	f800283a 	ret
                    return (OS_ERR_TIME_ZERO_DLY);
                }
            }
        }
    }
    if (minutes > 59) {
 40130d0:	00801444 	movi	r2,81
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
}
 40130d4:	dfc00117 	ldw	ra,4(sp)
 40130d8:	dc000017 	ldw	r16,0(sp)
 40130dc:	dec00204 	addi	sp,sp,8
 40130e0:	f800283a 	ret
{
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40130e4:	00801544 	movi	r2,85
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
}
 40130e8:	dfc00117 	ldw	ra,4(sp)
 40130ec:	dc000017 	ldw	r16,0(sp)
 40130f0:	dec00204 	addi	sp,sp,8
 40130f4:	f800283a 	ret
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 40130f8:	28800f24 	muli	r2,r5,60
 40130fc:	21038424 	muli	r4,r4,3600
 4013100:	18c01924 	muli	r3,r3,100
 4013104:	2089883a 	add	r4,r4,r2
 4013108:	2189883a 	add	r4,r4,r6
 401310c:	21001924 	muli	r4,r4,100
 4013110:	18c07d04 	addi	r3,r3,500
 4013114:	0080fa04 	movi	r2,1000
 4013118:	1887203a 	divu	r3,r3,r2
 401311c:	20c9883a 	add	r4,r4,r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 4013120:	2020d43a 	srli	r16,r4,16
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
 4013124:	213fffcc 	andi	r4,r4,65535
 4013128:	4012fd00 	call	4012fd0 <OSTimeDly>
    while (loops > 0) {
 401312c:	80000726 	beq	r16,zero,401314c <OSTimeDlyHMSM+0xd8>
        OSTimeDly((INT16U)32768u);
 4013130:	01200014 	movui	r4,32768
 4013134:	4012fd00 	call	4012fd0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 4013138:	01200014 	movui	r4,32768
        loops--;
 401313c:	843fffc4 	addi	r16,r16,-1
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
 4013140:	4012fd00 	call	4012fd0 <OSTimeDly>
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 4013144:	80bfffcc 	andi	r2,r16,65535
 4013148:	103ff91e 	bne	r2,zero,4013130 <OSTimeDlyHMSM+0xbc>
 401314c:	0005883a 	mov	r2,zero
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
}
 4013150:	dfc00117 	ldw	ra,4(sp)
 4013154:	dc000017 	ldw	r16,0(sp)
 4013158:	dec00204 	addi	sp,sp,8
 401315c:	f800283a 	ret
        }
    }
    if (minutes > 59) {
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    }
    if (seconds > 59) {
 4013160:	00801484 	movi	r2,82
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
}
 4013164:	dfc00117 	ldw	ra,4(sp)
 4013168:	dc000017 	ldw	r16,0(sp)
 401316c:	dec00204 	addi	sp,sp,8
 4013170:	f800283a 	ret
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return (OS_ERR_TIME_DLY_ISR);
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
        if (minutes == 0) {
 4013174:	29403fcc 	andi	r5,r5,255
 4013178:	283fc81e 	bne	r5,zero,401309c <OSTimeDlyHMSM+0x28>
            if (seconds == 0) {
 401317c:	31803fcc 	andi	r6,r6,255
 4013180:	303fc91e 	bne	r6,zero,40130a8 <OSTimeDlyHMSM+0x34>
                if (ms == 0) {
 4013184:	38ffffcc 	andi	r3,r7,65535
 4013188:	183fca1e 	bne	r3,zero,40130b4 <OSTimeDlyHMSM+0x40>
 401318c:	00801504 	movi	r2,84
 4013190:	003fd006 	br	40130d4 <OSTimeDlyHMSM+0x60>

04013194 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 4013194:	deffff04 	addi	sp,sp,-4
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio >= OS_LOWEST_PRIO) {
 4013198:	20c03fcc 	andi	r3,r4,255
 401319c:	008004c4 	movi	r2,19
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 40131a0:	dfc00015 	stw	ra,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio >= OS_LOWEST_PRIO) {
 40131a4:	10c0042e 	bgeu	r2,r3,40131b8 <OSTimeDlyResume+0x24>
 40131a8:	00800a84 	movi	r2,42
        OS_Sched();                                            /* See if this is new highest priority  */
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
}
 40131ac:	dfc00017 	ldw	ra,0(sp)
 40131b0:	dec00104 	addi	sp,sp,4
 40131b4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40131b8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40131bc:	00bfff84 	movi	r2,-2
 40131c0:	3884703a 	and	r2,r7,r2
 40131c4:	1001703a 	wrctl	status,r2

    if (prio >= OS_LOWEST_PRIO) {
        return (OS_ERR_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 40131c8:	18c7883a 	add	r3,r3,r3
 40131cc:	18c7883a 	add	r3,r3,r3
 40131d0:	00810134 	movhi	r2,1028
 40131d4:	108a4904 	addi	r2,r2,10532
 40131d8:	1887883a 	add	r3,r3,r2
 40131dc:	19800017 	ldw	r6,0(r3)
    if (ptcb == (OS_TCB *)0) {
 40131e0:	3000051e 	bne	r6,zero,40131f8 <OSTimeDlyResume+0x64>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40131e4:	3801703a 	wrctl	status,r7
 40131e8:	008010c4 	movi	r2,67
        OS_Sched();                                            /* See if this is new highest priority  */
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
}
 40131ec:	dfc00017 	ldw	ra,0(sp)
 40131f0:	dec00104 	addi	sp,sp,4
 40131f4:	f800283a 	ret
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    if (ptcb == (OS_TCB *)0) {
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    }
    if (ptcb == OS_TCB_RESERVED) {
 40131f8:	00c00044 	movi	r3,1
 40131fc:	30fff926 	beq	r6,r3,40131e4 <OSTimeDlyResume+0x50>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 4013200:	30800b8b 	ldhu	r2,46(r6)
 4013204:	1000031e 	bne	r2,zero,4013214 <OSTimeDlyResume+0x80>
 4013208:	3801703a 	wrctl	status,r7
 401320c:	00801404 	movi	r2,80
 4013210:	003fe606 	br	40131ac <OSTimeDlyResume+0x18>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4013214:	31000c03 	ldbu	r4,48(r6)
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 4013218:	30000b8d 	sth	zero,46(r6)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 401321c:	20800dcc 	andi	r2,r4,55
 4013220:	10001826 	beq	r2,zero,4013284 <OSTimeDlyResume+0xf0>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 4013224:	2080320c 	andi	r2,r4,200
 4013228:	30800c05 	stb	r2,48(r6)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 401322c:	30c00c45 	stb	r3,49(r6)
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 4013230:	30800c03 	ldbu	r2,48(r6)
 4013234:	1080020c 	andi	r2,r2,8
 4013238:	1000141e 	bne	r2,zero,401328c <OSTimeDlyResume+0xf8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 401323c:	01410134 	movhi	r5,1028
 4013240:	29690204 	addi	r5,r5,-23544
 4013244:	28c00003 	ldbu	r3,0(r5)
 4013248:	30800d83 	ldbu	r2,54(r6)
 401324c:	10c4b03a 	or	r2,r2,r3
 4013250:	28800005 	stb	r2,0(r5)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4013254:	31000d03 	ldbu	r4,52(r6)
 4013258:	00c10134 	movhi	r3,1028
 401325c:	18e90244 	addi	r3,r3,-23543
 4013260:	31400d43 	ldbu	r5,53(r6)
 4013264:	20c9883a 	add	r4,r4,r3
 4013268:	20800003 	ldbu	r2,0(r4)
 401326c:	1144b03a 	or	r2,r2,r5
 4013270:	20800005 	stb	r2,0(r4)
 4013274:	3801703a 	wrctl	status,r7
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 4013278:	400ece40 	call	400ece4 <OS_Sched>
 401327c:	0005883a 	mov	r2,zero
 4013280:	003fca06 	br	40131ac <OSTimeDlyResume+0x18>
    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 4013284:	30000c45 	stb	zero,49(r6)
 4013288:	003fe906 	br	4013230 <OSTimeDlyResume+0x9c>
 401328c:	3801703a 	wrctl	status,r7
 4013290:	0005883a 	mov	r2,zero
 4013294:	003fc506 	br	40131ac <OSTimeDlyResume+0x18>

04013298 <OSTimeGet>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013298:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401329c:	00bfff84 	movi	r2,-2
 40132a0:	2084703a 	and	r2,r4,r2
 40132a4:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    ticks = OSTime;
 40132a8:	00c10134 	movhi	r3,1028
 40132ac:	18e90604 	addi	r3,r3,-23528
 40132b0:	18800017 	ldw	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40132b4:	2001703a 	wrctl	status,r4
    OS_EXIT_CRITICAL();
    return (ticks);
}
 40132b8:	f800283a 	ret

040132bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40132bc:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
 40132c0:	01c01904 	movi	r7,100
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40132c4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
 40132c8:	01004034 	movhi	r4,256
 40132cc:	21052004 	addi	r4,r4,5248
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40132d0:	040100f4 	movhi	r16,1027
 40132d4:	841be204 	addi	r16,r16,28552
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
 40132d8:	000b883a 	mov	r5,zero
 40132dc:	018000c4 	movi	r6,3
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40132e0:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
 40132e4:	40141f80 	call	40141f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40132e8:	000d883a 	mov	r6,zero
 40132ec:	8009883a 	mov	r4,r16
 40132f0:	000b883a 	mov	r5,zero
 40132f4:	40134fc0 	call	40134fc <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40132f8:	813ff604 	addi	r4,r16,-40
 40132fc:	01410134 	movhi	r5,1028
 4013300:	29613c04 	addi	r5,r5,-31504
 4013304:	4025f4c0 	call	4025f4c <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
 4013308:	04000044 	movi	r16,1
 401330c:	800d883a 	mov	r6,r16
 4013310:	010100f4 	movhi	r4,1027
 4013314:	211ff304 	addi	r4,r4,32716
 4013318:	000b883a 	mov	r5,zero
 401331c:	4013b9c0 	call	4013b9c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
 4013320:	010100f4 	movhi	r4,1027
 4013324:	211fff04 	addi	r4,r4,32764
 4013328:	000b883a 	mov	r5,zero
 401332c:	01800084 	movi	r6,2
 4013330:	4013b9c0 	call	4013b9c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    TRIPLE_SPEED_ETHERNET_INIT ( ETHERNET_1, ethernet_1);
 4013334:	01c10134 	movhi	r7,1028
 4013338:	39e90b04 	addi	r7,r7,-23508
 401333c:	38c00003 	ldbu	r3,0(r7)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013340:	01810134 	movhi	r6,1028
 4013344:	31a12704 	addi	r6,r6,-31588
  entry->next     = list->next;
 4013348:	32000017 	ldw	r8,0(r6)
 401334c:	19403fcc 	andi	r5,r3,255
 4013350:	29400324 	muli	r5,r5,12
 4013354:	01010134 	movhi	r4,1028
 4013358:	210a5e04 	addi	r4,r4,10616
 401335c:	00810134 	movhi	r2,1028
 4013360:	108a9e04 	addi	r2,r2,10872
 4013364:	288b883a 	add	r5,r5,r2
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013368:	21800115 	stw	r6,4(r4)
 401336c:	d0a02c17 	ldw	r2,-32592(gp)
  entry->next     = list->next;

  list->next->previous = entry;
 4013370:	41000115 	stw	r4,4(r8)
 4013374:	1c07883a 	add	r3,r3,r16
 4013378:	38c00005 	stb	r3,0(r7)
 401337c:	00c10074 	movhi	r3,1025
 4013380:	18ddcd04 	addi	r3,r3,30516
 4013384:	20800215 	stw	r2,8(r4)
  list->next           = entry;
 4013388:	31000015 	stw	r4,0(r6)
 401338c:	20c00315 	stw	r3,12(r4)
 4013390:	00804034 	movhi	r2,256
 4013394:	10840004 	addi	r2,r2,4096
 4013398:	28000205 	stb	zero,8(r5)
 401339c:	29000015 	stw	r4,0(r5)
 40133a0:	28800115 	stw	r2,4(r5)

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 40133a4:	22000015 	stw	r8,0(r4)
}
 40133a8:	dfc00117 	ldw	ra,4(sp)
 40133ac:	dc000017 	ldw	r16,0(sp)
 40133b0:	dec00204 	addi	sp,sp,8
 40133b4:	f800283a 	ret

040133b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40133b8:	deffff04 	addi	sp,sp,-4
 40133bc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 40133c0:	40269680 	call	4026968 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40133c4:	00800044 	movi	r2,1
 40133c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40133cc:	dfc00017 	ldw	ra,0(sp)
 40133d0:	dec00104 	addi	sp,sp,4
 40133d4:	f800283a 	ret

040133d8 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40133d8:	21000017 	ldw	r4,0(r4)
 40133dc:	21000a04 	addi	r4,r4,40
 40133e0:	40137641 	jmpi	4013764 <altera_avalon_jtag_uart_ioctl>

040133e4 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40133e4:	20800017 	ldw	r2,0(r4)
 40133e8:	21400217 	ldw	r5,8(r4)
 40133ec:	11000a04 	addi	r4,r2,40
 40133f0:	40134141 	jmpi	4013414 <altera_avalon_jtag_uart_close>

040133f4 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40133f4:	20800017 	ldw	r2,0(r4)
 40133f8:	21c00217 	ldw	r7,8(r4)
 40133fc:	11000a04 	addi	r4,r2,40
 4013400:	40139b41 	jmpi	40139b4 <altera_avalon_jtag_uart_write>

04013404 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4013404:	20800017 	ldw	r2,0(r4)
 4013408:	21c00217 	ldw	r7,8(r4)
 401340c:	11000a04 	addi	r4,r2,40
 4013410:	40137ec1 	jmpi	40137ec <altera_avalon_jtag_uart_read>

04013414 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013414:	21800f17 	ldw	r6,60(r4)
 4013418:	2950000c 	andi	r5,r5,16384
 401341c:	280b003a 	cmpeq	r5,r5,zero
 4013420:	20801017 	ldw	r2,64(r4)
 4013424:	11800626 	beq	r2,r6,4013440 <altera_avalon_jtag_uart_close+0x2c>
 4013428:	20c00917 	ldw	r3,36(r4)
 401342c:	20800117 	ldw	r2,4(r4)
 4013430:	1880032e 	bgeu	r3,r2,4013440 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4013434:	283ffa1e 	bne	r5,zero,4013420 <altera_avalon_jtag_uart_close+0xc>
 4013438:	00bffd44 	movi	r2,-11
 401343c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4013440:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
 4013444:	f800283a 	ret

04013448 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4013448:	20c00017 	ldw	r3,0(r4)
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401344c:	defffe04 	addi	sp,sp,-8
 4013450:	dfc00115 	stw	ra,4(sp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4013454:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4013458:	1081000c 	andi	r2,r2,1024
 401345c:	1000161e 	bne	r2,zero,40134b8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4013460:	20c00917 	ldw	r3,36(r4)
 4013464:	00a00034 	movhi	r2,32768
 4013468:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
 401346c:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4013470:	10c00b36 	bltu	r2,r3,40134a0 <altera_avalon_jtag_uart_timeout+0x58>
    sp->host_inactive++;
    
    if (sp->host_inactive >= sp->timeout) {
 4013474:	20800117 	ldw	r2,4(r4)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    sp->host_inactive++;
 4013478:	21400915 	stw	r5,36(r4)
    
    if (sp->host_inactive >= sp->timeout) {
 401347c:	28800836 	bltu	r5,r2,40134a0 <altera_avalon_jtag_uart_timeout+0x58>
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4013480:	00810134 	movhi	r2,1028
 4013484:	10a8f644 	addi	r2,r2,-23591
 4013488:	10c00003 	ldbu	r3,0(r2)
  {
    OSFlagPost (group, flags, opt, &err);
 401348c:	01400104 	movi	r5,4
 4013490:	01800044 	movi	r6,1
 4013494:	d80f883a 	mov	r7,sp
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 4013498:	21000c17 	ldw	r4,48(r4)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 401349c:	1800101e 	bne	r3,zero,40134e0 <altera_avalon_jtag_uart_timeout+0x98>
    }
  }

  return alt_ticks_per_second();
}
 40134a0:	00c10134 	movhi	r3,1028
 40134a4:	18e8f004 	addi	r3,r3,-23616
 40134a8:	18800017 	ldw	r2,0(r3)
 40134ac:	dfc00117 	ldw	ra,4(sp)
 40134b0:	dec00204 	addi	sp,sp,8
 40134b4:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40134b8:	20800817 	ldw	r2,32(r4)
 40134bc:	10810014 	ori	r2,r2,1024
 40134c0:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40134c4:	00c10134 	movhi	r3,1028
 40134c8:	18e8f004 	addi	r3,r3,-23616
 40134cc:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
 40134d0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40134d4:	dfc00117 	ldw	ra,4(sp)
 40134d8:	dec00204 	addi	sp,sp,8
 40134dc:	f800283a 	ret
  {
    OSFlagPost (group, flags, opt, &err);
 40134e0:	40107240 	call	4010724 <OSFlagPost>
 40134e4:	00c10134 	movhi	r3,1028
 40134e8:	18e8f004 	addi	r3,r3,-23616
 40134ec:	18800017 	ldw	r2,0(r3)
 40134f0:	dfc00117 	ldw	ra,4(sp)
 40134f4:	dec00204 	addi	sp,sp,8
 40134f8:	f800283a 	ret

040134fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40134fc:	defff904 	addi	sp,sp,-28
 4013500:	dd000515 	stw	r20,20(sp)
 4013504:	dc400315 	stw	r17,12(sp)
 4013508:	2829883a 	mov	r20,r5
 401350c:	2023883a 	mov	r17,r4

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 4013510:	d9400104 	addi	r5,sp,4
 4013514:	0009883a 	mov	r4,zero
 4013518:	dfc00615 	stw	ra,24(sp)
 401351c:	dc800415 	stw	r18,16(sp)
 4013520:	dc000215 	stw	r16,8(sp)
 4013524:	3025883a 	mov	r18,r6
 4013528:	04000044 	movi	r16,1
 401352c:	400ff2c0 	call	400ff2c <OSFlagCreate>
 4013530:	88800c15 	stw	r2,48(r17)
 4013534:	8009883a 	mov	r4,r16
 4013538:	40119600 	call	4011960 <OSSemCreate>
 401353c:	88800a15 	stw	r2,40(r17)
 4013540:	8009883a 	mov	r4,r16
 4013544:	40119600 	call	4011960 <OSSemCreate>
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4013548:	88c00017 	ldw	r3,0(r17)
 401354c:	88800b15 	stw	r2,44(r17)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013550:	8c000815 	stw	r16,32(r17)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4013554:	1c000135 	stwio	r16,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4013558:	a009883a 	mov	r4,r20
 401355c:	900b883a 	mov	r5,r18
 4013560:	01810074 	movhi	r6,1025
 4013564:	318d7104 	addi	r6,r6,13764
 4013568:	880f883a 	mov	r7,r17
 401356c:	d8000015 	stw	zero,0(sp)
 4013570:	40262600 	call	4026260 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4013574:	00c10134 	movhi	r3,1028
 4013578:	18e8f004 	addi	r3,r3,-23616
 401357c:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4013580:	88000915 	stw	zero,36(r17)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4013584:	89000204 	addi	r4,r17,8
 4013588:	01810074 	movhi	r6,1025
 401358c:	318d1204 	addi	r6,r6,13384
 4013590:	880f883a 	mov	r7,r17
 4013594:	4025da80 	call	4025da8 <alt_alarm_start>
 4013598:	1000030e 	bge	r2,zero,40135a8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401359c:	00a00034 	movhi	r2,32768
 40135a0:	10bfffc4 	addi	r2,r2,-1
 40135a4:	88800115 	stw	r2,4(r17)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40135a8:	dfc00617 	ldw	ra,24(sp)
 40135ac:	dd000517 	ldw	r20,20(sp)
 40135b0:	dc800417 	ldw	r18,16(sp)
 40135b4:	dc400317 	ldw	r17,12(sp)
 40135b8:	dc000217 	ldw	r16,8(sp)
 40135bc:	dec00704 	addi	sp,sp,28
 40135c0:	f800283a 	ret

040135c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40135c4:	defff804 	addi	sp,sp,-32
 40135c8:	dc800315 	stw	r18,12(sp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
 40135cc:	24800017 	ldw	r18,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40135d0:	dd400615 	stw	r21,24(sp)
 40135d4:	dc000115 	stw	r16,4(sp)
 40135d8:	dfc00715 	stw	ra,28(sp)
 40135dc:	dd000515 	stw	r20,20(sp)
 40135e0:	dcc00415 	stw	r19,16(sp)
 40135e4:	dc400215 	stw	r17,8(sp)
 40135e8:	2021883a 	mov	r16,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
 40135ec:	95400104 	addi	r21,r18,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40135f0:	ad000037 	ldwio	r20,0(r21)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40135f4:	a080c00c 	andi	r2,r20,768
 40135f8:	10004826 	beq	r2,zero,401371c <altera_avalon_jtag_uart_irq+0x158>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40135fc:	a080400c 	andi	r2,r20,256
 4013600:	10002026 	beq	r2,zero,4013684 <altera_avalon_jtag_uart_irq+0xc0>
 4013604:	82000e17 	ldw	r8,56(r16)
 4013608:	04400074 	movhi	r17,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401360c:	80800d17 	ldw	r2,52(r16)
        if (next == sp->rx_out)
 4013610:	10800044 	addi	r2,r2,1
 4013614:	1081ffcc 	andi	r2,r2,2047
 4013618:	12001826 	beq	r2,r8,401367c <altera_avalon_jtag_uart_irq+0xb8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401361c:	94400037 	ldwio	r17,0(r18)
{
  INT8U err;

  if (OSRunning)
  {
    OSFlagPost (group, flags, opt, &err);
 4013620:	01400044 	movi	r5,1
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4013624:	88a0000c 	andi	r2,r17,32768
 4013628:	280d883a 	mov	r6,r5
 401362c:	d80f883a 	mov	r7,sp
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4013630:	04c10134 	movhi	r19,1028
 4013634:	9ce8f644 	addi	r19,r19,-23591
 4013638:	10001026 	beq	r2,zero,401367c <altera_avalon_jtag_uart_irq+0xb8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401363c:	80800d17 	ldw	r2,52(r16)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013640:	80c00d17 	ldw	r3,52(r16)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 4013644:	81000c17 	ldw	r4,48(r16)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4013648:	1405883a 	add	r2,r2,r16
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401364c:	1947883a 	add	r3,r3,r5
 4013650:	18c1ffcc 	andi	r3,r3,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4013654:	14401105 	stb	r17,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013658:	80c00d15 	stw	r3,52(r16)
 401365c:	98800003 	ldbu	r2,0(r19)
 4013660:	103fea26 	beq	r2,zero,401360c <altera_avalon_jtag_uart_irq+0x48>
  {
    OSFlagPost (group, flags, opt, &err);
 4013664:	40107240 	call	4010724 <OSFlagPost>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013668:	80800d17 	ldw	r2,52(r16)
 401366c:	82000e17 	ldw	r8,56(r16)
        if (next == sp->rx_out)
 4013670:	10800044 	addi	r2,r2,1
 4013674:	1081ffcc 	andi	r2,r2,2047
 4013678:	123fe81e 	bne	r2,r8,401361c <altera_avalon_jtag_uart_irq+0x58>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401367c:	88bfffec 	andhi	r2,r17,65535
 4013680:	1000311e 	bne	r2,zero,4013748 <altera_avalon_jtag_uart_irq+0x184>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4013684:	a080800c 	andi	r2,r20,512
 4013688:	103fd926 	beq	r2,zero,40135f0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401368c:	a022d43a 	srli	r17,r20,16

      while (space > 0 && sp->tx_out != sp->tx_in)
 4013690:	883fd726 	beq	r17,zero,40135f0 <altera_avalon_jtag_uart_irq+0x2c>
 4013694:	80c01017 	ldw	r3,64(r16)
 4013698:	80800f17 	ldw	r2,60(r16)
 401369c:	10c01526 	beq	r2,r3,40136f4 <altera_avalon_jtag_uart_irq+0x130>
 40136a0:	04c10134 	movhi	r19,1028
 40136a4:	9ce8f644 	addi	r19,r19,-23591
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40136a8:	80801017 	ldw	r2,64(r16)
 40136ac:	1405883a 	add	r2,r2,r16
 40136b0:	10c21107 	ldb	r3,2116(r2)
 40136b4:	90c00035 	stwio	r3,0(r18)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40136b8:	80801017 	ldw	r2,64(r16)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40136bc:	8c7fffc4 	addi	r17,r17,-1
 40136c0:	01400084 	movi	r5,2

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40136c4:	10800044 	addi	r2,r2,1
 40136c8:	1081ffcc 	andi	r2,r2,2047
 40136cc:	80801015 	stw	r2,64(r16)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 40136d0:	98c00003 	ldbu	r3,0(r19)
  {
    OSFlagPost (group, flags, opt, &err);
 40136d4:	01800044 	movi	r6,1
 40136d8:	d80f883a 	mov	r7,sp

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 40136dc:	81000c17 	ldw	r4,48(r16)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 40136e0:	1800171e 	bne	r3,zero,4013740 <altera_avalon_jtag_uart_irq+0x17c>
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40136e4:	883fc226 	beq	r17,zero,40135f0 <altera_avalon_jtag_uart_irq+0x2c>
 40136e8:	80c01017 	ldw	r3,64(r16)
 40136ec:	80800f17 	ldw	r2,60(r16)
 40136f0:	18bfed1e 	bne	r3,r2,40136a8 <altera_avalon_jtag_uart_irq+0xe4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40136f4:	80800817 	ldw	r2,32(r16)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40136f8:	81000017 	ldw	r4,0(r16)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40136fc:	00ffff44 	movi	r3,-3
 4013700:	10c4703a 	and	r2,r2,r3
 4013704:	80800815 	stw	r2,32(r16)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013708:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401370c:	a8c00037 	ldwio	r3,0(r21)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4013710:	ad000037 	ldwio	r20,0(r21)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4013714:	a080c00c 	andi	r2,r20,768
 4013718:	103fb81e 	bne	r2,zero,40135fc <altera_avalon_jtag_uart_irq+0x38>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401371c:	dfc00717 	ldw	ra,28(sp)
 4013720:	dd400617 	ldw	r21,24(sp)
 4013724:	dd000517 	ldw	r20,20(sp)
 4013728:	dcc00417 	ldw	r19,16(sp)
 401372c:	dc800317 	ldw	r18,12(sp)
 4013730:	dc400217 	ldw	r17,8(sp)
 4013734:	dc000117 	ldw	r16,4(sp)
 4013738:	dec00804 	addi	sp,sp,32
 401373c:	f800283a 	ret
  {
    OSFlagPost (group, flags, opt, &err);
 4013740:	40107240 	call	4010724 <OSFlagPost>
 4013744:	003fe706 	br	40136e4 <altera_avalon_jtag_uart_irq+0x120>
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013748:	80800817 	ldw	r2,32(r16)
 401374c:	00ffff84 	movi	r3,-2
 4013750:	10c4703a 	and	r2,r2,r3
 4013754:	80800815 	stw	r2,32(r16)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4013758:	a8800035 	stwio	r2,0(r21)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401375c:	a8c00037 	ldwio	r3,0(r21)
 4013760:	003fc806 	br	4013684 <altera_avalon_jtag_uart_irq+0xc0>

04013764 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
 4013764:	009a8044 	movi	r2,27137
 4013768:	28800f26 	beq	r5,r2,40137a8 <altera_avalon_jtag_uart_ioctl+0x44>
 401376c:	009a8084 	movi	r2,27138
 4013770:	28800326 	beq	r5,r2,4013780 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4013774:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
 4013778:	1805883a 	mov	r2,r3
 401377c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4013780:	21400117 	ldw	r5,4(r4)
 4013784:	00a00034 	movhi	r2,32768
 4013788:	10bfffc4 	addi	r2,r2,-1
 401378c:	28bff926 	beq	r5,r2,4013774 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4013790:	20800917 	ldw	r2,36(r4)
 4013794:	0007883a 	mov	r3,zero
 4013798:	1145803a 	cmpltu	r2,r2,r5
 401379c:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
 40137a0:	1805883a 	mov	r2,r3
 40137a4:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40137a8:	20c00117 	ldw	r3,4(r4)
 40137ac:	00a00034 	movhi	r2,32768
 40137b0:	10bfffc4 	addi	r2,r2,-1
 40137b4:	18bfef26 	beq	r3,r2,4013774 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40137b8:	31800017 	ldw	r6,0(r6)
 40137bc:	10bfff44 	addi	r2,r2,-3
 40137c0:	30ffff84 	addi	r3,r6,-2
 40137c4:	10c00436 	bltu	r2,r3,40137d8 <altera_avalon_jtag_uart_ioctl+0x74>
 40137c8:	0007883a 	mov	r3,zero
 40137cc:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
 40137d0:	1805883a 	mov	r2,r3
 40137d4:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40137d8:	01a00034 	movhi	r6,32768
 40137dc:	31bfff84 	addi	r6,r6,-2
 40137e0:	0007883a 	mov	r3,zero
 40137e4:	21800115 	stw	r6,4(r4)
 40137e8:	003ff906 	br	40137d0 <altera_avalon_jtag_uart_ioctl+0x6c>

040137ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40137ec:	defff204 	addi	sp,sp,-56
 40137f0:	dcc00715 	stw	r19,28(sp)
 40137f4:	2027883a 	mov	r19,r4

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 40137f8:	21000a17 	ldw	r4,40(r4)
 40137fc:	dd400915 	stw	r21,36(sp)
 4013800:	d9400215 	stw	r5,8(sp)
 4013804:	302b883a 	mov	r21,r6
 4013808:	000b883a 	mov	r5,zero
 401380c:	d9800104 	addi	r6,sp,4
 4013810:	dfc00d15 	stw	ra,52(sp)
 4013814:	df000c15 	stw	fp,48(sp)
 4013818:	ddc00b15 	stw	r23,44(sp)
 401381c:	dd800a15 	stw	r22,40(sp)
 4013820:	dd000815 	stw	r20,32(sp)
 4013824:	dc800615 	stw	r18,24(sp)
 4013828:	dc400515 	stw	r17,20(sp)
 401382c:	dc000415 	stw	r16,16(sp)
 4013830:	d9c00315 	stw	r7,12(sp)
 4013834:	4011ba40 	call	4011ba4 <OSSemPend>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4013838:	05405b0e 	bge	zero,r21,40139a8 <altera_avalon_jtag_uart_read+0x1bc>
 401383c:	dd000217 	ldw	r20,8(sp)
 4013840:	07020004 	movi	fp,2048
 4013844:	9dc01104 	addi	r23,r19,68

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
 4013848:	9c400e17 	ldw	r17,56(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401384c:	9d800d17 	ldw	r22,52(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4013850:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
 4013854:	b4400136 	bltu	r22,r17,401385c <altera_avalon_jtag_uart_read+0x70>
        n = in - out;
 4013858:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 401385c:	a009883a 	mov	r4,r20
 4013860:	bc4b883a 	add	r5,r23,r17
 4013864:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
 4013868:	80000826 	beq	r16,zero,401388c <altera_avalon_jtag_uart_read+0xa0>
        break; /* No more data available */

      if (n > space)
 401386c:	ac002936 	bltu	r21,r16,4013914 <altera_avalon_jtag_uart_read+0x128>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 4013870:	40096480 	call	4009648 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013874:	8445883a 	add	r2,r16,r17
 4013878:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
 401387c:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013880:	98800e15 	stw	r2,56(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
 4013884:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
 4013888:	057fef16 	blt	zero,r21,4013848 <altera_avalon_jtag_uart_read+0x5c>

    /* If we read any data then return it */
    if (ptr != buffer)
 401388c:	d8c00217 	ldw	r3,8(sp)
 4013890:	a0c02c1e 	bne	r20,r3,4013944 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4013894:	d8800317 	ldw	r2,12(sp)
 4013898:	1410000c 	andi	r16,r2,16384
 401389c:	80000d1e 	bne	r16,zero,40138d4 <altera_avalon_jtag_uart_read+0xe8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 40138a0:	00810134 	movhi	r2,1028
 40138a4:	10a8f644 	addi	r2,r2,-23591
 40138a8:	11000003 	ldbu	r4,0(r2)
 40138ac:	00c00044 	movi	r3,1
 40138b0:	20c03326 	beq	r4,r3,4013980 <altera_avalon_jtag_uart_read+0x194>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40138b4:	98800d17 	ldw	r2,52(r19)
 40138b8:	b080031e 	bne	r22,r2,40138c8 <altera_avalon_jtag_uart_read+0xdc>
 40138bc:	98c00917 	ldw	r3,36(r19)
 40138c0:	98800117 	ldw	r2,4(r19)
 40138c4:	18bffb36 	bltu	r3,r2,40138b4 <altera_avalon_jtag_uart_read+0xc8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40138c8:	98800d17 	ldw	r2,52(r19)
 40138cc:	b0800126 	beq	r22,r2,40138d4 <altera_avalon_jtag_uart_read+0xe8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40138d0:	057fda16 	blt	zero,r21,401383c <altera_avalon_jtag_uart_read+0x50>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 40138d4:	99000a17 	ldw	r4,40(r19)
 40138d8:	4011e780 	call	4011e78 <OSSemPost>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 40138dc:	8000301e 	bne	r16,zero,40139a0 <altera_avalon_jtag_uart_read+0x1b4>
 40138e0:	00bffec4 	movi	r2,-5
    return -EWOULDBLOCK;
  else
    return -EIO;
}
 40138e4:	dfc00d17 	ldw	ra,52(sp)
 40138e8:	df000c17 	ldw	fp,48(sp)
 40138ec:	ddc00b17 	ldw	r23,44(sp)
 40138f0:	dd800a17 	ldw	r22,40(sp)
 40138f4:	dd400917 	ldw	r21,36(sp)
 40138f8:	dd000817 	ldw	r20,32(sp)
 40138fc:	dcc00717 	ldw	r19,28(sp)
 4013900:	dc800617 	ldw	r18,24(sp)
 4013904:	dc400517 	ldw	r17,20(sp)
 4013908:	dc000417 	ldw	r16,16(sp)
 401390c:	dec00e04 	addi	sp,sp,56
 4013910:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 4013914:	99401104 	addi	r5,r19,68
 4013918:	a009883a 	mov	r4,r20
 401391c:	a80d883a 	mov	r6,r21
 4013920:	894b883a 	add	r5,r17,r5
 4013924:	40096480 	call	4009648 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013928:	ac47883a 	add	r3,r21,r17
 401392c:	18c1ffcc 	andi	r3,r3,2047
 4013930:	98c00e15 	stw	r3,56(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4013934:	d8c00217 	ldw	r3,8(sp)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
 4013938:	a569883a 	add	r20,r20,r21
      space -= n;
 401393c:	002b883a 	mov	r21,zero
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4013940:	a0ffd426 	beq	r20,r3,4013894 <altera_avalon_jtag_uart_read+0xa8>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 4013944:	99000a17 	ldw	r4,40(r19)
 4013948:	4011e780 	call	4011e78 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401394c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013950:	00bfff84 	movi	r2,-2
 4013954:	2084703a 	and	r2,r4,r2
 4013958:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401395c:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013960:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4013964:	18c00054 	ori	r3,r3,1
 4013968:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401396c:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013970:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
 4013974:	d8c00217 	ldw	r3,8(sp)
 4013978:	a0c5c83a 	sub	r2,r20,r3
 401397c:	003fd906 	br	40138e4 <altera_avalon_jtag_uart_read+0xf8>
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4013980:	99000c17 	ldw	r4,48(r19)
 4013984:	d8c00104 	addi	r3,sp,4
 4013988:	01400144 	movi	r5,5
 401398c:	018020c4 	movi	r6,131
 4013990:	000f883a 	mov	r7,zero
 4013994:	d8c00015 	stw	r3,0(sp)
 4013998:	40103b80 	call	40103b8 <OSFlagPend>
 401399c:	003fca06 	br	40138c8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 40139a0:	00bffd44 	movi	r2,-11
 40139a4:	003fcf06 	br	40138e4 <altera_avalon_jtag_uart_read+0xf8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40139a8:	d8800317 	ldw	r2,12(sp)
 40139ac:	1410000c 	andi	r16,r2,16384
 40139b0:	003fc806 	br	40138d4 <altera_avalon_jtag_uart_read+0xe8>

040139b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40139b4:	defff504 	addi	sp,sp,-44
 40139b8:	dc000215 	stw	r16,8(sp)
 40139bc:	2021883a 	mov	r16,r4
 40139c0:	21000b17 	ldw	r4,44(r4)
 40139c4:	dcc00515 	stw	r19,20(sp)
 40139c8:	3027883a 	mov	r19,r6
 40139cc:	ddc00915 	stw	r23,36(sp)
 40139d0:	dd000615 	stw	r20,24(sp)
 40139d4:	282f883a 	mov	r23,r5
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40139d8:	9d000048 	cmpgei	r20,r19,1
 40139dc:	d9800104 	addi	r6,sp,4
 40139e0:	000b883a 	mov	r5,zero
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40139e4:	dd800815 	stw	r22,32(sp)
 40139e8:	dfc00a15 	stw	ra,40(sp)
 40139ec:	dd400715 	stw	r21,28(sp)
 40139f0:	dc800415 	stw	r18,16(sp)
 40139f4:	dc400315 	stw	r17,12(sp)
 40139f8:	382d883a 	mov	r22,r7
 40139fc:	4011ba40 	call	4011ba4 <OSSemPend>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013a00:	a0005a26 	beq	r20,zero,4013b6c <altera_avalon_jtag_uart_write+0x1b8>
 4013a04:	b82b883a 	mov	r21,r23
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4013a08:	84800f17 	ldw	r18,60(r16)
      out = sp->tx_out;
 4013a0c:	84401017 	ldw	r17,64(r16)

      if (in < out)
 4013a10:	9440452e 	bgeu	r18,r17,4013b28 <altera_avalon_jtag_uart_write+0x174>
        n = out - 1 - in;
 4013a14:	8c85c83a 	sub	r2,r17,r18
 4013a18:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
 4013a1c:	30002826 	beq	r6,zero,4013ac0 <altera_avalon_jtag_uart_write+0x10c>
        break;

      if (n > count)
 4013a20:	3023883a 	mov	r17,r6
 4013a24:	9980012e 	bgeu	r19,r6,4013a2c <altera_avalon_jtag_uart_write+0x78>
 4013a28:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 4013a2c:	81021104 	addi	r4,r16,2116
 4013a30:	a80b883a 	mov	r5,r21
 4013a34:	2489883a 	add	r4,r4,r18
 4013a38:	880d883a 	mov	r6,r17
 4013a3c:	40096480 	call	4009648 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013a40:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
 4013a44:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4013a48:	18c1ffcc 	andi	r3,r3,2047
 4013a4c:	9d000048 	cmpgei	r20,r19,1
 4013a50:	80c00f15 	stw	r3,60(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
 4013a54:	ac6b883a 	add	r21,r21,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013a58:	a03feb1e 	bne	r20,zero,4013a08 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013a5c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013a60:	00bfff84 	movi	r2,-2
 4013a64:	2084703a 	and	r2,r4,r2
 4013a68:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013a6c:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013a70:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013a74:	18c00094 	ori	r3,r3,2
 4013a78:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013a7c:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013a80:	2001703a 	wrctl	status,r4

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 4013a84:	81000b17 	ldw	r4,44(r16)
 4013a88:	4011e780 	call	4011e78 <OSSemPost>

  if (ptr != start)
 4013a8c:	bd403926 	beq	r23,r21,4013b74 <altera_avalon_jtag_uart_write+0x1c0>
    return ptr - start;
 4013a90:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
 4013a94:	dfc00a17 	ldw	ra,40(sp)
 4013a98:	ddc00917 	ldw	r23,36(sp)
 4013a9c:	dd800817 	ldw	r22,32(sp)
 4013aa0:	dd400717 	ldw	r21,28(sp)
 4013aa4:	dd000617 	ldw	r20,24(sp)
 4013aa8:	dcc00517 	ldw	r19,20(sp)
 4013aac:	dc800417 	ldw	r18,16(sp)
 4013ab0:	dc400317 	ldw	r17,12(sp)
 4013ab4:	dc000217 	ldw	r16,8(sp)
 4013ab8:	dec00b04 	addi	sp,sp,44
 4013abc:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013ac0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013ac4:	00bfff84 	movi	r2,-2
 4013ac8:	2084703a 	and	r2,r4,r2
 4013acc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013ad0:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013ad4:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4013ad8:	18c00094 	ori	r3,r3,2
 4013adc:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4013ae0:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013ae4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
 4013ae8:	b090000c 	andi	r2,r22,16384
 4013aec:	103fe51e 	bne	r2,zero,4013a84 <altera_avalon_jtag_uart_write+0xd0>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4013af0:	00810134 	movhi	r2,1028
 4013af4:	10a8f644 	addi	r2,r2,-23591
 4013af8:	11000003 	ldbu	r4,0(r2)
 4013afc:	00c00044 	movi	r3,1
 4013b00:	20c01026 	beq	r4,r3,4013b44 <altera_avalon_jtag_uart_write+0x190>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4013b04:	80801017 	ldw	r2,64(r16)
 4013b08:	1440031e 	bne	r2,r17,4013b18 <altera_avalon_jtag_uart_write+0x164>
 4013b0c:	80c00917 	ldw	r3,36(r16)
 4013b10:	80800117 	ldw	r2,4(r16)
 4013b14:	18bffb36 	bltu	r3,r2,4013b04 <altera_avalon_jtag_uart_write+0x150>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4013b18:	80801017 	ldw	r2,64(r16)
 4013b1c:	147fd926 	beq	r2,r17,4013a84 <altera_avalon_jtag_uart_write+0xd0>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013b20:	a03fb91e 	bne	r20,zero,4013a08 <altera_avalon_jtag_uart_write+0x54>
 4013b24:	003fcd06 	br	4013a5c <altera_avalon_jtag_uart_write+0xa8>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
 4013b28:	88000326 	beq	r17,zero,4013b38 <altera_avalon_jtag_uart_write+0x184>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4013b2c:	00820004 	movi	r2,2048
 4013b30:	148dc83a 	sub	r6,r2,r18
 4013b34:	003fb906 	br	4013a1c <altera_avalon_jtag_uart_write+0x68>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4013b38:	0081ffc4 	movi	r2,2047
 4013b3c:	148dc83a 	sub	r6,r2,r18
 4013b40:	003fb606 	br	4013a1c <altera_avalon_jtag_uart_write+0x68>
 4013b44:	81000c17 	ldw	r4,48(r16)
 4013b48:	d8800104 	addi	r2,sp,4
 4013b4c:	01400184 	movi	r5,6
 4013b50:	018020c4 	movi	r6,131
 4013b54:	000f883a 	mov	r7,zero
 4013b58:	d8800015 	stw	r2,0(sp)
 4013b5c:	40103b80 	call	40103b8 <OSFlagPend>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4013b60:	80801017 	ldw	r2,64(r16)
 4013b64:	147fee1e 	bne	r2,r17,4013b20 <altera_avalon_jtag_uart_write+0x16c>
 4013b68:	003fc606 	br	4013a84 <altera_avalon_jtag_uart_write+0xd0>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4013b6c:	b82b883a 	mov	r21,r23
 4013b70:	003fba06 	br	4013a5c <altera_avalon_jtag_uart_write+0xa8>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
 4013b74:	b090000c 	andi	r2,r22,16384
 4013b78:	1000021e 	bne	r2,zero,4013b84 <altera_avalon_jtag_uart_write+0x1d0>
 4013b7c:	00bffec4 	movi	r2,-5
 4013b80:	003fc406 	br	4013a94 <altera_avalon_jtag_uart_write+0xe0>
 4013b84:	00bffd44 	movi	r2,-11
 4013b88:	003fc206 	br	4013a94 <altera_avalon_jtag_uart_write+0xe0>

04013b8c <alt_avalon_sgdma_register_callback>:
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
  dev->callback_context = context;
  dev->chain_control    = chain_control;
 4013b8c:	21800b15 	stw	r6,44(r4)
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
 4013b90:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
 4013b94:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
}
 4013b98:	f800283a 	ret

04013b9c <alt_avalon_sgdma_init>:

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013b9c:	20c00317 	ldw	r3,12(r4)
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4013ba0:	defffb04 	addi	sp,sp,-20

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013ba4:	01c00404 	movi	r7,16
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4013ba8:	dd400315 	stw	r21,12(sp)
 4013bac:	dcc00215 	stw	r19,8(sp)
 4013bb0:	dc400115 	stw	r17,4(sp)
 4013bb4:	282b883a 	mov	r21,r5
 4013bb8:	2023883a 	mov	r17,r4

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013bbc:	19c7883a 	add	r3,r3,r7
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4013bc0:	3027883a 	mov	r19,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013bc4:	01400074 	movhi	r5,1
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4013bc8:	dfc00415 	stw	ra,16(sp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013bcc:	19400035 	stwio	r5,0(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013bd0:	20800317 	ldw	r2,12(r4)
 4013bd4:	11c5883a 	add	r2,r2,r7
 4013bd8:	11400035 	stwio	r5,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 4013bdc:	20c00317 	ldw	r3,12(r4)
 4013be0:	19c7883a 	add	r3,r3,r7
 4013be4:	18000035 	stwio	zero,0(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4013be8:	21400317 	ldw	r5,12(r4)
 4013bec:	00803fc4 	movi	r2,255
 4013bf0:	28800035 	stwio	r2,0(r5)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 4013bf4:	d1602d04 	addi	r5,gp,-32588
 4013bf8:	4025f4c0 	call	4025f4c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 4013bfc:	880f883a 	mov	r7,r17
 4013c00:	a809883a 	mov	r4,r21
 4013c04:	980b883a 	mov	r5,r19
 4013c08:	01810074 	movhi	r6,1025
 4013c0c:	318f7104 	addi	r6,r6,15812
 4013c10:	d8000015 	stw	zero,0(sp)
 4013c14:	40262600 	call	4026260 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 4013c18:	dfc00417 	ldw	ra,16(sp)
 4013c1c:	dd400317 	ldw	r21,12(sp)
 4013c20:	dcc00217 	ldw	r19,8(sp)
 4013c24:	dc400117 	ldw	r17,4(sp)
 4013c28:	dec00504 	addi	sp,sp,20
 4013c2c:	f800283a 	ret

04013c30 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013c30:	20800317 	ldw	r2,12(r4)
 4013c34:	10800404 	addi	r2,r2,16
 4013c38:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013c3c:	013fff34 	movhi	r4,65532
 4013c40:	213fffc4 	addi	r4,r4,-1
 4013c44:	1906703a 	and	r3,r3,r4
 4013c48:	10c00035 	stwio	r3,0(r2)
  
  return;
}
 4013c4c:	f800283a 	ret

04013c50 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013c50:	21800317 	ldw	r6,12(r4)
 4013c54:	31800404 	addi	r6,r6,16
 4013c58:	30c00037 	ldwio	r3,0(r6)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 4013c5c:	00a00434 	movhi	r2,32784
 4013c60:	10bfffc4 	addi	r2,r2,-1
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013c64:	280a953a 	slli	r5,r5,20
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 4013c68:	1886703a 	and	r3,r3,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013c6c:	295ffc2c 	andhi	r5,r5,32752
 4013c70:	29400134 	orhi	r5,r5,4
 4013c74:	1946b03a 	or	r3,r3,r5
 4013c78:	30c00035 	stwio	r3,0(r6)
  
  return;
}
 4013c7c:	f800283a 	ret

04013c80 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013c80:	20800317 	ldw	r2,12(r4)
 4013c84:	10800404 	addi	r2,r2,16
 4013c88:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013c8c:	013ff7c4 	movi	r4,-33
 4013c90:	1906703a 	and	r3,r3,r4
 4013c94:	10c00035 	stwio	r3,0(r2)
}
 4013c98:	f800283a 	ret

04013c9c <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013c9c:	20c00317 	ldw	r3,12(r4)
 4013ca0:	18c00404 	addi	r3,r3,16
 4013ca4:	18800037 	ldwio	r2,0(r3)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013ca8:	10800814 	ori	r2,r2,32
 4013cac:	18800035 	stwio	r2,0(r3)
}
 4013cb0:	f800283a 	ret

04013cb4 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4013cb4:	200d883a 	mov	r6,r4
 4013cb8:	21000317 	ldw	r4,12(r4)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4013cbc:	20800037 	ldwio	r2,0(r4)
 4013cc0:	1080040c 	andi	r2,r2,16
 4013cc4:	103ffd1e 	bne	r2,zero,4013cbc <alt_avalon_sgdma_do_sync_transfer+0x8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013cc8:	20800437 	ldwio	r2,16(r4)
 4013ccc:	00fff7c4 	movi	r3,-33
 4013cd0:	10c4703a 	and	r2,r2,r3
 4013cd4:	20800435 	stwio	r2,16(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4013cd8:	31000317 	ldw	r4,12(r6)
 4013cdc:	00803fc4 	movi	r2,255
 4013ce0:	20800035 	stwio	r2,0(r4)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4013ce4:	30c00317 	ldw	r3,12(r6)
 4013ce8:	19400835 	stwio	r5,32(r3)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013cec:	31000317 	ldw	r4,12(r6)
 4013cf0:	20800437 	ldwio	r2,16(r4)
 4013cf4:	10801814 	ori	r2,r2,96
 4013cf8:	20800435 	stwio	r2,16(r4)
 4013cfc:	31000317 	ldw	r4,12(r6)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4013d00:	20800037 	ldwio	r2,0(r4)
 4013d04:	1080040c 	andi	r2,r2,16
 4013d08:	103ffd1e 	bne	r2,zero,4013d00 <alt_avalon_sgdma_do_sync_transfer+0x4c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 4013d0c:	20800437 	ldwio	r2,16(r4)
 4013d10:	00fff7c4 	movi	r3,-33
 4013d14:	10c4703a 	and	r2,r2,r3
 4013d18:	20800435 	stwio	r2,16(r4)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 4013d1c:	31000317 	ldw	r4,12(r6)
 4013d20:	20800037 	ldwio	r2,0(r4)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4013d24:	00c03fc4 	movi	r3,255
 4013d28:	20c00035 	stwio	r3,0(r4)

  return status;
}
 4013d2c:	10803fcc 	andi	r2,r2,255
 4013d30:	f800283a 	ret

04013d34 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4013d34:	200d883a 	mov	r6,r4
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4013d38:	21000317 	ldw	r4,12(r4)
 4013d3c:	20800037 	ldwio	r2,0(r4)
 4013d40:	00fffc04 	movi	r3,-16
 4013d44:	1080040c 	andi	r2,r2,16
 4013d48:	10000226 	beq	r2,zero,4013d54 <alt_avalon_sgdma_do_async_transfer+0x20>
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
 4013d4c:	1805883a 	mov	r2,r3
 4013d50:	f800283a 	ret
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4013d54:	20800437 	ldwio	r2,16(r4)
 4013d58:	00fff7c4 	movi	r3,-33
 4013d5c:	10c4703a 	and	r2,r2,r3
 4013d60:	20800435 	stwio	r2,16(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4013d64:	31000317 	ldw	r4,12(r6)
 4013d68:	00803fc4 	movi	r2,255
 4013d6c:	20800035 	stwio	r2,0(r4)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4013d70:	30c00317 	ldw	r3,12(r6)
 4013d74:	19400835 	stwio	r5,32(r3)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 4013d78:	30800917 	ldw	r2,36(r6)
 4013d7c:	10000926 	beq	r2,zero,4013da4 <alt_avalon_sgdma_do_async_transfer+0x70>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013d80:	31000317 	ldw	r4,12(r6)
 4013d84:	20c00437 	ldwio	r3,16(r4)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013d88:	30800b17 	ldw	r2,44(r6)
 4013d8c:	10801814 	ori	r2,r2,96
 4013d90:	1886b03a 	or	r3,r3,r2
 4013d94:	20c00435 	stwio	r3,16(r4)
 4013d98:	0007883a 	mov	r3,zero
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
 4013d9c:	1805883a 	mov	r2,r3
 4013da0:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013da4:	30800317 	ldw	r2,12(r6)
 4013da8:	10c00437 	ldwio	r3,16(r2)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013dac:	013ffbc4 	movi	r4,-17
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 4013db0:	18c01814 	ori	r3,r3,96
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4013db4:	1906703a 	and	r3,r3,r4
 4013db8:	10c00435 	stwio	r3,16(r2)
 4013dbc:	0007883a 	mov	r3,zero
 4013dc0:	003fe206 	br	4013d4c <alt_avalon_sgdma_do_async_transfer+0x18>

04013dc4 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 4013dc4:	200b883a 	mov	r5,r4
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 4013dc8:	21000317 	ldw	r4,12(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 4013dcc:	defffe04 	addi	sp,sp,-8
 4013dd0:	dfc00115 	stw	ra,4(sp)
 4013dd4:	dc000015 	stw	r16,0(sp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 4013dd8:	20800437 	ldwio	r2,16(r4)
 4013ddc:	10a00034 	orhi	r2,r2,32768
 4013de0:	20800435 	stwio	r2,16(r4)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4013de4:	28c00317 	ldw	r3,12(r5)
 4013de8:	18800437 	ldwio	r2,16(r3)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 4013dec:	28c00917 	ldw	r3,36(r5)
 4013df0:	18000726 	beq	r3,zero,4013e10 <alt_avalon_sgdma_irq+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013df4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013df8:	00bfff84 	movi	r2,-2
 4013dfc:	8084703a 	and	r2,r16,r2
 4013e00:	1001703a 	wrctl	status,r2
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
 4013e04:	29000a17 	ldw	r4,40(r5)
 4013e08:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013e0c:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
 4013e10:	dfc00117 	ldw	ra,4(sp)
 4013e14:	dc000017 	ldw	r16,0(sp)
 4013e18:	dec00204 	addi	sp,sp,8
 4013e1c:	f800283a 	ret

04013e20 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 4013e20:	defff604 	addi	sp,sp,-40
 4013e24:	ddc00815 	stw	r23,32(sp)
 4013e28:	dd800715 	stw	r22,28(sp)
 4013e2c:	dd400615 	stw	r21,24(sp)
 4013e30:	df000915 	stw	fp,36(sp)
 4013e34:	dd000515 	stw	r20,20(sp)
 4013e38:	dcc00415 	stw	r19,16(sp)
 4013e3c:	dc800315 	stw	r18,12(sp)
 4013e40:	dc400215 	stw	r17,8(sp)
 4013e44:	dc000115 	stw	r16,4(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 4013e48:	288007c3 	ldbu	r2,31(r5)
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 4013e4c:	d8c00b17 	ldw	r3,44(sp)
 4013e50:	da000c17 	ldw	r8,48(sp)
 4013e54:	da400d17 	ldw	r9,52(sp)
 4013e58:	dd400e17 	ldw	r21,56(sp)
 4013e5c:	dd800f17 	ldw	r22,60(sp)
 4013e60:	da800a0b 	ldhu	r10,40(sp)
 4013e64:	dac01003 	ldbu	r11,64(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 4013e68:	10801fcc 	andi	r2,r2,127
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 4013e6c:	202f883a 	mov	r23,r4
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 4013e70:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 4013e74:	3022d63a 	srli	r17,r6,24
  desc->write_addr               = write_addr;
 4013e78:	3824d63a 	srli	r18,r7,24
  desc->next                     = (alt_u32 *) next;
 4013e7c:	2826d63a 	srli	r19,r5,24
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
 4013e80:	5028d23a 	srli	r20,r10,8
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 4013e84:	3008d23a 	srli	r4,r6,8
 4013e88:	3018d43a 	srli	r12,r6,16
  desc->write_addr               = write_addr;
 4013e8c:	381ad23a 	srli	r13,r7,8
 4013e90:	381cd43a 	srli	r14,r7,16
  desc->next                     = (alt_u32 *) next;
 4013e94:	281ed23a 	srli	r15,r5,8
 4013e98:	2820d43a 	srli	r16,r5,16
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4013e9c:	d8000005 	stb	zero,0(sp)
 4013ea0:	00bfe044 	movi	r2,-127
 4013ea4:	1807003a 	cmpeq	r3,r3,zero
 4013ea8:	4010c03a 	cmpne	r8,r8,zero
 4013eac:	4812c03a 	cmpne	r9,r9,zero
 4013eb0:	10c7c83a 	sub	r3,r2,r3
 4013eb4:	5f0003cc 	andi	fp,r11,15
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 4013eb8:	b9000045 	stb	r4,1(r23)
 4013ebc:	bb000085 	stb	r12,2(r23)
 4013ec0:	bc4000c5 	stb	r17,3(r23)
  desc->write_addr               = write_addr;
 4013ec4:	bb400245 	stb	r13,9(r23)
 4013ec8:	bb800285 	stb	r14,10(r23)
 4013ecc:	bc8002c5 	stb	r18,11(r23)
  desc->next                     = (alt_u32 *) next;
 4013ed0:	bbc00445 	stb	r15,17(r23)
 4013ed4:	bc000485 	stb	r16,18(r23)
 4013ed8:	bcc004c5 	stb	r19,19(r23)
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
 4013edc:	bd000645 	stb	r20,25(r23)
  desc->actual_bytes_transferred = 0;
  desc->status                   = 0x0;

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 4013ee0:	bd400685 	stb	r21,26(r23)
  desc->write_burst              = write_burst;
 4013ee4:	bd8006c5 	stb	r22,27(r23)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4013ee8:	4211883a 	add	r8,r8,r8
 4013eec:	480490ba 	slli	r2,r9,2
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 4013ef0:	b9800005 	stb	r6,0(r23)
  desc->write_addr               = write_addr;
 4013ef4:	b9c00205 	stb	r7,8(r23)
  desc->next                     = (alt_u32 *) next;
 4013ef8:	b9400405 	stb	r5,16(r23)
  desc->read_addr_pad            = 0x0;
 4013efc:	b8000105 	stb	zero,4(r23)
 4013f00:	b8000145 	stb	zero,5(r23)
 4013f04:	b8000185 	stb	zero,6(r23)
 4013f08:	b80001c5 	stb	zero,7(r23)
  desc->write_addr_pad           = 0x0;
 4013f0c:	b8000305 	stb	zero,12(r23)
 4013f10:	b8000345 	stb	zero,13(r23)
 4013f14:	b8000385 	stb	zero,14(r23)
 4013f18:	b80003c5 	stb	zero,15(r23)
  desc->next_pad                 = 0x0;
 4013f1c:	b8000505 	stb	zero,20(r23)
 4013f20:	b8000545 	stb	zero,21(r23)
 4013f24:	b8000585 	stb	zero,22(r23)
 4013f28:	b80005c5 	stb	zero,23(r23)
  desc->bytes_to_transfer        = length_or_eop;
 4013f2c:	ba800605 	stb	r10,24(r23)
  desc->actual_bytes_transferred = 0;
 4013f30:	b8000705 	stb	zero,28(r23)
 4013f34:	b8000745 	stb	zero,29(r23)
  desc->status                   = 0x0;
 4013f38:	b8000785 	stb	zero,30(r23)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4013f3c:	58000226 	beq	r11,zero,4013f48 <alt_avalon_sgdma_construct_descriptor_burst+0x128>
 4013f40:	e03890fa 	slli	fp,fp,3
 4013f44:	df000005 	stb	fp,0(sp)
 4013f48:	d9000003 	ldbu	r4,0(sp)
 4013f4c:	4084b03a 	or	r2,r8,r2
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
 4013f50:	01400804 	movi	r5,32
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4013f54:	1906b03a 	or	r3,r3,r4
 4013f58:	10c4b03a 	or	r2,r2,r3
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
 4013f5c:	b809883a 	mov	r4,r23
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 4013f60:	b88007c5 	stb	r2,31(r23)
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
}
 4013f64:	df000917 	ldw	fp,36(sp)
 4013f68:	ddc00817 	ldw	r23,32(sp)
 4013f6c:	dd800717 	ldw	r22,28(sp)
 4013f70:	dd400617 	ldw	r21,24(sp)
 4013f74:	dd000517 	ldw	r20,20(sp)
 4013f78:	dcc00417 	ldw	r19,16(sp)
 4013f7c:	dc800317 	ldw	r18,12(sp)
 4013f80:	dc400217 	ldw	r17,8(sp)
 4013f84:	dc000117 	ldw	r16,4(sp)
 4013f88:	dec00a04 	addi	sp,sp,40
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
 4013f8c:	40266b81 	jmpi	40266b8 <alt_remap_uncached>

04013f90 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 4013f90:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 4013f94:	d8c0080b 	ldhu	r3,32(sp)
 4013f98:	d8800917 	ldw	r2,36(sp)
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 4013f9c:	da000c03 	ldbu	r8,48(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 4013fa0:	d8c00015 	stw	r3,0(sp)
 4013fa4:	d8800115 	stw	r2,4(sp)
 4013fa8:	d8c00b17 	ldw	r3,44(sp)
 4013fac:	d8800a17 	ldw	r2,40(sp)
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 4013fb0:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 4013fb4:	d8c00315 	stw	r3,12(sp)
 4013fb8:	d8800215 	stw	r2,8(sp)
 4013fbc:	da000615 	stw	r8,24(sp)
 4013fc0:	d8000415 	stw	zero,16(sp)
 4013fc4:	d8000515 	stw	zero,20(sp)
 4013fc8:	4013e200 	call	4013e20 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 4013fcc:	dfc00717 	ldw	ra,28(sp)
 4013fd0:	dec00804 	addi	sp,sp,32
 4013fd4:	f800283a 	ret

04013fd8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 4013fd8:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
 4013fdc:	38ffffcc 	andi	r3,r7,65535
 4013fe0:	d8800a17 	ldw	r2,40(sp)
 4013fe4:	d8c00015 	stw	r3,0(sp)
 4013fe8:	d8c00817 	ldw	r3,32(sp)
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 4013fec:	da000c03 	ldbu	r8,48(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4013ff0:	d8800115 	stw	r2,4(sp)
 4013ff4:	d8c00215 	stw	r3,8(sp)
 4013ff8:	d8800917 	ldw	r2,36(sp)
 4013ffc:	d8c00b17 	ldw	r3,44(sp)
 4014000:	000f883a 	mov	r7,zero
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 4014004:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4014008:	d8800315 	stw	r2,12(sp)
 401400c:	d8c00415 	stw	r3,16(sp)
 4014010:	da000615 	stw	r8,24(sp)
 4014014:	d8000515 	stw	zero,20(sp)
 4014018:	4013e200 	call	4013e20 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 401401c:	dfc00717 	ldw	ra,28(sp)
 4014020:	dec00804 	addi	sp,sp,32
 4014024:	f800283a 	ret

04014028 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 4014028:	defffa04 	addi	sp,sp,-24
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 401402c:	d8800617 	ldw	r2,24(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 4014030:	da000903 	ldbu	r8,36(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 4014034:	d8c00717 	ldw	r3,28(sp)
 4014038:	d8800015 	stw	r2,0(sp)
 401403c:	d8800817 	ldw	r2,32(sp)
 4014040:	39ffffcc 	andi	r7,r7,65535
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 4014044:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 4014048:	d8c00115 	stw	r3,4(sp)
 401404c:	d8800215 	stw	r2,8(sp)
 4014050:	da000415 	stw	r8,16(sp)
 4014054:	d8000315 	stw	zero,12(sp)
 4014058:	4013fd80 	call	4013fd8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 401405c:	dfc00517 	ldw	ra,20(sp)
 4014060:	dec00604 	addi	sp,sp,24
 4014064:	f800283a 	ret

04014068 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 4014068:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
 401406c:	d8800817 	ldw	r2,32(sp)
 4014070:	d8c00917 	ldw	r3,36(sp)
 4014074:	3a3fffcc 	andi	r8,r7,65535
 4014078:	300f883a 	mov	r7,r6
 401407c:	000d883a 	mov	r6,zero
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 4014080:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4014084:	da000015 	stw	r8,0(sp)
 4014088:	d8800315 	stw	r2,12(sp)
 401408c:	d8c00515 	stw	r3,20(sp)
 4014090:	d8000115 	stw	zero,4(sp)
 4014094:	d8000215 	stw	zero,8(sp)
 4014098:	d8000415 	stw	zero,16(sp)
 401409c:	d8000615 	stw	zero,24(sp)
 40140a0:	4013e200 	call	4013e20 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 40140a4:	dfc00717 	ldw	ra,28(sp)
 40140a8:	dec00804 	addi	sp,sp,32
 40140ac:	f800283a 	ret

040140b0 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 40140b0:	defffd04 	addi	sp,sp,-12
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 40140b4:	d8800317 	ldw	r2,12(sp)
 40140b8:	39ffffcc 	andi	r7,r7,65535
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 40140bc:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 40140c0:	d8000115 	stw	zero,4(sp)
 40140c4:	d8800015 	stw	r2,0(sp)
 40140c8:	40140680 	call	4014068 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 40140cc:	dfc00217 	ldw	ra,8(sp)
 40140d0:	dec00304 	addi	sp,sp,12
 40140d4:	f800283a 	ret

040140d8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 40140d8:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
 40140dc:	d8800917 	ldw	r2,36(sp)
 40140e0:	d8c00a17 	ldw	r3,40(sp)
 40140e4:	da00080b 	ldhu	r8,32(sp)
 40140e8:	d8800215 	stw	r2,8(sp)
 40140ec:	d8c00315 	stw	r3,12(sp)
 40140f0:	d8800b17 	ldw	r2,44(sp)
 40140f4:	d8c00c17 	ldw	r3,48(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 40140f8:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
 40140fc:	da000015 	stw	r8,0(sp)
 4014100:	d8800415 	stw	r2,16(sp)
 4014104:	d8c00515 	stw	r3,20(sp)
 4014108:	d8000115 	stw	zero,4(sp)
 401410c:	d8000615 	stw	zero,24(sp)
 4014110:	4013e200 	call	4013e20 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 4014114:	dfc00717 	ldw	ra,28(sp)
 4014118:	dec00804 	addi	sp,sp,32
 401411c:	f800283a 	ret

04014120 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 4014120:	defffa04 	addi	sp,sp,-24
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 4014124:	d880060b 	ldhu	r2,24(sp)
 4014128:	d8c00717 	ldw	r3,28(sp)
 401412c:	da000817 	ldw	r8,32(sp)
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 4014130:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 4014134:	d8c00115 	stw	r3,4(sp)
 4014138:	da000215 	stw	r8,8(sp)
 401413c:	d8800015 	stw	r2,0(sp)
 4014140:	d8000315 	stw	zero,12(sp)
 4014144:	d8000415 	stw	zero,16(sp)
 4014148:	40140d80 	call	40140d8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 401414c:	dfc00517 	ldw	ra,20(sp)
 4014150:	dec00604 	addi	sp,sp,24
 4014154:	f800283a 	ret

04014158 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 4014158:	defffe04 	addi	sp,sp,-8
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 401415c:	d1602d04 	addi	r5,gp,-32588
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 4014160:	dc000015 	stw	r16,0(sp)
 4014164:	dfc00115 	stw	ra,4(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 4014168:	40261280 	call	4026128 <alt_find_dev>
 401416c:	1021883a 	mov	r16,r2

  if (NULL == dev) {
 4014170:	10000526 	beq	r2,zero,4014188 <alt_avalon_sgdma_open+0x30>
    ALT_ERRNO = ENODEV;
  }

  return dev;
}
 4014174:	8005883a 	mov	r2,r16
 4014178:	dfc00117 	ldw	ra,4(sp)
 401417c:	dc000017 	ldw	r16,0(sp)
 4014180:	dec00204 	addi	sp,sp,8
 4014184:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4014188:	00810134 	movhi	r2,1028
 401418c:	10a13f04 	addi	r2,r2,-31492
 4014190:	10800017 	ldw	r2,0(r2)
 4014194:	00c10134 	movhi	r3,1028
 4014198:	18e8e504 	addi	r3,r3,-23660
 401419c:	10000226 	beq	r2,zero,40141a8 <alt_avalon_sgdma_open+0x50>
 40141a0:	103ee83a 	callr	r2
 40141a4:	1007883a 	mov	r3,r2
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);

  if (NULL == dev) {
    ALT_ERRNO = ENODEV;
 40141a8:	008004c4 	movi	r2,19
 40141ac:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
 40141b0:	8005883a 	mov	r2,r16
 40141b4:	dfc00117 	ldw	ra,4(sp)
 40141b8:	dc000017 	ldw	r16,0(sp)
 40141bc:	dec00204 	addi	sp,sp,8
 40141c0:	f800283a 	ret

040141c4 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 40141c4:	208007a3 	ldbuio	r2,30(r4)
 40141c8:	00fffec4 	movi	r3,-5
 40141cc:	10801fcc 	andi	r2,r2,127
 40141d0:	10000226 	beq	r2,zero,40141dc <alt_avalon_sgdma_check_descriptor_status+0x18>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
 40141d4:	1805883a 	mov	r2,r3
 40141d8:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 40141dc:	208007e3 	ldbuio	r2,31(r4)
 40141e0:	00ffe244 	movi	r3,-119
 40141e4:	1080200c 	andi	r2,r2,128
 40141e8:	103ffa1e 	bne	r2,zero,40141d4 <alt_avalon_sgdma_check_descriptor_status+0x10>
 40141ec:	0007883a 	mov	r3,zero
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
 40141f0:	1805883a 	mov	r2,r3
 40141f4:	f800283a 	ret

040141f8 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40141f8:	02010134 	movhi	r8,1028
 40141fc:	4228f004 	addi	r8,r8,-23616
 4014200:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4014204:	defffe04 	addi	sp,sp,-8
 4014208:	3807883a 	mov	r3,r7
 401420c:	dfc00115 	stw	ra,4(sp)
 4014210:	200f883a 	mov	r7,r4
 4014214:	1000011e 	bne	r2,zero,401421c <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
 4014218:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401421c:	008001c4 	movi	r2,7
 4014220:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4014224:	2809883a 	mov	r4,r5
 4014228:	300b883a 	mov	r5,r6
 401422c:	01810074 	movhi	r6,1025
 4014230:	31909204 	addi	r6,r6,16968
 4014234:	d8000015 	stw	zero,0(sp)
 4014238:	40262600 	call	4026260 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401423c:	dfc00117 	ldw	ra,4(sp)
 4014240:	dec00204 	addi	sp,sp,8
 4014244:	f800283a 	ret

04014248 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4014248:	defffe04 	addi	sp,sp,-8
 401424c:	dfc00115 	stw	ra,4(sp)
 4014250:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4014254:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4014258:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401425c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014260:	00bfff84 	movi	r2,-2
 4014264:	8084703a 	and	r2,r16,r2
 4014268:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 401426c:	400e5e00 	call	400e5e0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014270:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 4014274:	dfc00117 	ldw	ra,4(sp)
 4014278:	dc000017 	ldw	r16,0(sp)
 401427c:	dec00204 	addi	sp,sp,8
 4014280:	f800283a 	ret

04014284 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 4014284:	defffd04 	addi	sp,sp,-12
 4014288:	d9400015 	stw	r5,0(sp)
 401428c:	d9800115 	stw	r6,4(sp)
 4014290:	d9c00215 	stw	r7,8(sp)
 4014294:	dec00304 	addi	sp,sp,12
 4014298:	f800283a 	ret

0401429c <tse_mac_initTransInfo2>:
                                        alt_32 cfgflags) {
                                              
        mi->base     = (np_tse_mac*)mac_base;
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
        mi->cfgflags = cfgflags;     
 401429c:	d8800017 	ldw	r2,0(sp)
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
                                              
        mi->base     = (np_tse_mac*)mac_base;
 40142a0:	21400015 	stw	r5,0(r4)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
 40142a4:	21800115 	stw	r6,4(r4)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
        mi->cfgflags = cfgflags;     
 40142a8:	20800415 	stw	r2,16(r4)
        return SUCCESS;
}
 40142ac:	0005883a 	mov	r2,zero
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
                                              
        mi->base     = (np_tse_mac*)mac_base;
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
 40142b0:	21c00215 	stw	r7,8(r4)
        mi->cfgflags = cfgflags;     
        return SUCCESS;
}
 40142b4:	f800283a 	ret

040142b8 <alt_tse_get_system_index>:
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 40142b8:	d1602f03 	ldbu	r5,-32580(gp)
 40142bc:	28000a26 	beq	r5,zero,40142e8 <alt_tse_get_system_index+0x30>
        if(psys_info == &tse_mac_device[i]) {
 40142c0:	00810134 	movhi	r2,1028
 40142c4:	10a97004 	addi	r2,r2,-23104
 40142c8:	20800926 	beq	r4,r2,40142f0 <alt_tse_get_system_index+0x38>
 40142cc:	1007883a 	mov	r3,r2
 40142d0:	0005883a 	mov	r2,zero
 40142d4:	00000106 	br	40142dc <alt_tse_get_system_index+0x24>
 40142d8:	19000426 	beq	r3,r4,40142ec <alt_tse_get_system_index+0x34>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 40142dc:	10800044 	addi	r2,r2,1
        if(psys_info == &tse_mac_device[i]) {
 40142e0:	18c01204 	addi	r3,r3,72
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 40142e4:	117ffc1e 	bne	r2,r5,40142d8 <alt_tse_get_system_index+0x20>
 40142e8:	00bfffc4 	movi	r2,-1
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
}
 40142ec:	f800283a 	ret
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
        if(psys_info == &tse_mac_device[i]) {
 40142f0:	0005883a 	mov	r2,zero
 40142f4:	f800283a 	ret

040142f8 <alt_tse_get_mac_group_index>:
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 40142f8:	d1a81343 	ldbu	r6,-24499(gp)
 40142fc:	30000c26 	beq	r6,zero,4014330 <alt_tse_get_mac_group_index+0x38>
        if(pmac_group == pmac_groups[i]) {
 4014300:	00c10134 	movhi	r3,1028
 4014304:	18ca9604 	addi	r3,r3,10840
 4014308:	18800017 	ldw	r2,0(r3)
 401430c:	20800b26 	beq	r4,r2,401433c <alt_tse_get_mac_group_index+0x44>
 4014310:	18c00104 	addi	r3,r3,4
 4014314:	000b883a 	mov	r5,zero
 4014318:	00000306 	br	4014328 <alt_tse_get_mac_group_index+0x30>
 401431c:	18800017 	ldw	r2,0(r3)
 4014320:	18c00104 	addi	r3,r3,4
 4014324:	11000326 	beq	r2,r4,4014334 <alt_tse_get_mac_group_index+0x3c>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 4014328:	29400044 	addi	r5,r5,1
 401432c:	29bffb1e 	bne	r5,r6,401431c <alt_tse_get_mac_group_index+0x24>
 4014330:	017fffc4 	movi	r5,-1
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
}
 4014334:	2805883a 	mov	r2,r5
 4014338:	f800283a 	ret
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
        if(pmac_group == pmac_groups[i]) {
 401433c:	000b883a 	mov	r5,zero
 4014340:	003ffc06 	br	4014334 <alt_tse_get_mac_group_index+0x3c>

04014344 <alt_tse_get_mac_info_index>:
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 4014344:	20c00317 	ldw	r3,12(r4)
 4014348:	19800003 	ldbu	r6,0(r3)
 401434c:	30000926 	beq	r6,zero,4014374 <alt_tse_get_mac_info_index+0x30>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 4014350:	18800117 	ldw	r2,4(r3)
 4014354:	20800a26 	beq	r4,r2,4014380 <alt_tse_get_mac_info_index+0x3c>
 4014358:	000b883a 	mov	r5,zero
 401435c:	00000306 	br	401436c <alt_tse_get_mac_info_index+0x28>
 4014360:	18800217 	ldw	r2,8(r3)
 4014364:	18c00104 	addi	r3,r3,4
 4014368:	20800326 	beq	r4,r2,4014378 <alt_tse_get_mac_info_index+0x34>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 401436c:	29400044 	addi	r5,r5,1
 4014370:	29bffb1e 	bne	r5,r6,4014360 <alt_tse_get_mac_info_index+0x1c>
 4014374:	017fffc4 	movi	r5,-1
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
}
 4014378:	2805883a 	mov	r2,r5
 401437c:	f800283a 	ret
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 4014380:	000b883a 	mov	r5,zero
 4014384:	003ffc06 	br	4014378 <alt_tse_get_mac_info_index+0x34>

04014388 <alt_tse_get_mac_info>:
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
 4014388:	d2e81343 	ldbu	r11,-24499(gp)
 401438c:	58001626 	beq	r11,zero,40143e8 <alt_tse_get_mac_info+0x60>
 4014390:	0015883a 	mov	r10,zero
 4014394:	02410134 	movhi	r9,1028
 4014398:	4a4a9604 	addi	r9,r9,10840
        pmac_group = pmac_groups[i];
 401439c:	49400017 	ldw	r5,0(r9)
        for(j = 0; j < pmac_group->channel; j++) {
 40143a0:	2a000003 	ldbu	r8,0(r5)
 40143a4:	40000d26 	beq	r8,zero,40143dc <alt_tse_get_mac_info+0x54>
            pmac_info = pmac_group->pmac_info[j];
 40143a8:	29800117 	ldw	r6,4(r5)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 40143ac:	30800217 	ldw	r2,8(r6)
 40143b0:	10c00017 	ldw	r3,0(r2)
 40143b4:	20c00d26 	beq	r4,r3,40143ec <alt_tse_get_mac_info+0x64>
 40143b8:	000f883a 	mov	r7,zero
 40143bc:	00000506 	br	40143d4 <alt_tse_get_mac_info+0x4c>
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
            pmac_info = pmac_group->pmac_info[j];
 40143c0:	29800217 	ldw	r6,8(r5)
 40143c4:	29400104 	addi	r5,r5,4
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 40143c8:	30800217 	ldw	r2,8(r6)
 40143cc:	10c00017 	ldw	r3,0(r2)
 40143d0:	19000626 	beq	r3,r4,40143ec <alt_tse_get_mac_info+0x64>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
 40143d4:	39c00044 	addi	r7,r7,1
 40143d8:	3a3ff91e 	bne	r7,r8,40143c0 <alt_tse_get_mac_info+0x38>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
 40143dc:	52800044 	addi	r10,r10,1
 40143e0:	4a400104 	addi	r9,r9,4
 40143e4:	5abfed1e 	bne	r11,r10,401439c <alt_tse_get_mac_info+0x14>
 40143e8:	000d883a 	mov	r6,zero
            }
        }        
    }
    
    return 0;
}
 40143ec:	3005883a 	mov	r2,r6
 40143f0:	f800283a 	ret

040143f4 <alt_tse_phy_print_profile>:
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
}
 40143f4:	d0a81303 	ldbu	r2,-24500(gp)
 40143f8:	f800283a 	ret

040143fc <DP83848C_link_status_read>:
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
	alt_u32 link_status = 0;
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 40143fc:	2100b037 	ldwio	r4,704(r4)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
 4014400:	00c00204 	movi	r3,8
 4014404:	2080008c 	andi	r2,r4,2
 4014408:	1000011e 	bne	r2,zero,4014410 <DP83848C_link_status_read+0x14>
 401440c:	00c00104 	movi	r3,4
	else {
		link_status |= 0x4;
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
 4014410:	2080010c 	andi	r2,r4,4
 4014414:	10000126 	beq	r2,zero,401441c <DP83848C_link_status_read+0x20>
		link_status |= 0x1;
 4014418:	18c00054 	ori	r3,r3,1
	}
	
	return link_status;
}
 401441c:	1805883a 	mov	r2,r3
 4014420:	f800283a 	ret

04014424 <alt_tse_phy_rd_mdio_reg>:
alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4014424:	20800617 	ldw	r2,24(r4)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4014428:	39c03fcc 	andi	r7,r7,255
alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 401442c:	11000317 	ldw	r4,12(r2)
 4014430:	20800117 	ldw	r2,4(r4)
 4014434:	10c00217 	ldw	r3,8(r2)
 4014438:	18c00017 	ldw	r3,0(r3)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 401443c:	38001226 	beq	r7,zero,4014488 <alt_tse_phy_rd_mdio_reg+0x64>
 4014440:	0011883a 	mov	r8,zero
 4014444:	0009883a 	mov	r4,zero
    {
        bit_mask <<= 1;
 4014448:	4205883a 	add	r2,r8,r8
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 401444c:	21000044 	addi	r4,r4,1
    {
        bit_mask <<= 1;
        bit_mask |= 0x01;        
 4014450:	12000054 	ori	r8,r2,1
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4014454:	21fffc1e 	bne	r4,r7,4014448 <alt_tse_phy_rd_mdio_reg+0x24>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 4014458:	28803fcc 	andi	r2,r5,255
 401445c:	1085883a 	add	r2,r2,r2
 4014460:	1085883a 	add	r2,r2,r2
 4014464:	18c0a004 	addi	r3,r3,640
 4014468:	1887883a 	add	r3,r3,r2
 401446c:	18800037 	ldwio	r2,0(r3)
 4014470:	30c03fcc 	andi	r3,r6,255
 4014474:	10bfffcc 	andi	r2,r2,65535
 4014478:	10c5d83a 	sra	r2,r2,r3
 401447c:	10bfffcc 	andi	r2,r2,65535
    
    /* shifting read data */
    temp_data >>= lsb_num;
    
    return (temp_data & bit_mask);
}
 4014480:	1204703a 	and	r2,r2,r8
 4014484:	f800283a 	ret
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4014488:	0011883a 	mov	r8,zero
 401448c:	003ff206 	br	4014458 <alt_tse_phy_rd_mdio_reg+0x34>

04014490 <alt_tse_phy_rd_mdio_addr>:
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4014490:	20800617 	ldw	r2,24(r4)
 4014494:	10c00317 	ldw	r3,12(r2)
 4014498:	19000117 	ldw	r4,4(r3)
 401449c:	20800217 	ldw	r2,8(r4)
 40144a0:	10c00017 	ldw	r3,0(r2)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
}
 40144a4:	18801037 	ldwio	r2,64(r3)
 40144a8:	f800283a 	ret

040144ac <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 40144ac:	deffff04 	addi	sp,sp,-4
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 40144b0:	2b403fcc 	andi	r13,r5,255
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 40144b4:	dfc00015 	stw	ra,0(sp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 40144b8:	68003026 	beq	r13,zero,401457c <alt_tse_sys_enable_mdio_sharing+0xd0>
		psys_mac = psys_mac_list[i];
 40144bc:	22000017 	ldw	r8,0(r4)
		
		if(psys_mac == 0) {
 40144c0:	40001a26 	beq	r8,zero,401452c <alt_tse_sys_enable_mdio_sharing+0x80>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 40144c4:	d2602f03 	ldbu	r9,-32580(gp)
 40144c8:	0017883a 	mov	r11,zero
 40144cc:	4b000048 	cmpgei	r12,r9,1
 40144d0:	60001126 	beq	r12,zero,4014518 <alt_tse_sys_enable_mdio_sharing+0x6c>
		psys_mac = psys_mac_list[i];
		
		if(psys_mac == 0) {
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 40144d4:	000f883a 	mov	r7,zero
 40144d8:	01810134 	movhi	r6,1028
 40144dc:	31a97004 	addi	r6,r6,-23104
 40144e0:	02800044 	movi	r10,1
 40144e4:	00000206 	br	40144f0 <alt_tse_sys_enable_mdio_sharing+0x44>
		}
		
		for(j = 0; j < max_mac_system; j++) {
 40144e8:	31801204 	addi	r6,r6,72
 40144ec:	3a400a26 	beq	r7,r9,4014518 <alt_tse_sys_enable_mdio_sharing+0x6c>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 40144f0:	40c00017 	ldw	r3,0(r8)
 40144f4:	30800017 	ldw	r2,0(r6)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 40144f8:	39c00044 	addi	r7,r7,1
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 40144fc:	18bffa1e 	bne	r3,r2,40144e8 <alt_tse_sys_enable_mdio_sharing+0x3c>
				if(tse_mac_device[j].tse_multichannel_mac) {
 4014500:	308002c3 	ldbu	r2,11(r6)
 4014504:	1000131e 	bne	r2,zero,4014554 <alt_tse_sys_enable_mdio_sharing+0xa8>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
 4014508:	32800345 	stb	r10,13(r6)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 401450c:	31400385 	stb	r5,14(r6)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 4014510:	31801204 	addi	r6,r6,72
 4014514:	3a7ff61e 	bne	r7,r9,40144f0 <alt_tse_sys_enable_mdio_sharing+0x44>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 4014518:	5ac00044 	addi	r11,r11,1
 401451c:	6ac01726 	beq	r13,r11,401457c <alt_tse_sys_enable_mdio_sharing+0xd0>
		psys_mac = psys_mac_list[i];
 4014520:	22000117 	ldw	r8,4(r4)
 4014524:	21000104 	addi	r4,r4,4
		
		if(psys_mac == 0) {
 4014528:	403fe91e 	bne	r8,zero,40144d0 <alt_tse_sys_enable_mdio_sharing+0x24>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 401452c:	010100f4 	movhi	r4,1027
 4014530:	210be204 	addi	r4,r4,12168
 4014534:	4002fec0 	call	4002fec <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 4014538:	010100f4 	movhi	r4,1027
 401453c:	210bec04 	addi	r4,r4,12208
 4014540:	4002fec0 	call	4002fec <puts>
 4014544:	00bfffc4 	movi	r2,-1
			}
		}	
	}
	
	return SUCCESS;
}
 4014548:	dfc00017 	ldw	ra,0(sp)
 401454c:	dec00104 	addi	sp,sp,4
 4014550:	f800283a 	ret
		
		for(j = 0; j < max_mac_system; j++) {
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
				if(tse_mac_device[j].tse_multichannel_mac) {
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 4014554:	010100f4 	movhi	r4,1027
 4014558:	210c0004 	addi	r4,r4,12288
 401455c:	4002fec0 	call	4002fec <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 4014560:	010100f4 	movhi	r4,1027
 4014564:	210c1104 	addi	r4,r4,12356
 4014568:	4002fec0 	call	4002fec <puts>
 401456c:	00bfffc4 	movi	r2,-1
			}
		}	
	}
	
	return SUCCESS;
}
 4014570:	dfc00017 	ldw	ra,0(sp)
 4014574:	dec00104 	addi	sp,sp,4
 4014578:	f800283a 	ret
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 401457c:	0005883a 	mov	r2,zero
			}
		}	
	}
	
	return SUCCESS;
}
 4014580:	dfc00017 	ldw	ra,0(sp)
 4014584:	dec00104 	addi	sp,sp,4
 4014588:	f800283a 	ret

0401458c <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 401458c:	defffc04 	addi	sp,sp,-16
 4014590:	dcc00215 	stw	r19,8(sp)
 4014594:	dc800115 	stw	r18,4(sp)
 4014598:	dfc00315 	stw	ra,12(sp)
 401459c:	dc000015 	stw	r16,0(sp)
 40145a0:	2025883a 	mov	r18,r4
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 40145a4:	24c0bb04 	addi	r19,r4,748
 40145a8:	9c000037 	ldwio	r16,0(r19)
    dat &= 0xfff0;
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 40145ac:	010100f4 	movhi	r4,1027
 40145b0:	210c2004 	addi	r4,r4,12416
 40145b4:	4002fec0 	call	4002fec <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 40145b8:	00fffc04 	movi	r3,-16
 40145bc:	80e0703a 	and	r16,r16,r3
 40145c0:	840002d4 	ori	r16,r16,11
 40145c4:	843fffcc 	andi	r16,r16,65535
 40145c8:	9c000035 	stwio	r16,0(r19)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 40145cc:	010100f4 	movhi	r4,1027
 40145d0:	210c2f04 	addi	r4,r4,12476
 40145d4:	4002fec0 	call	4002fec <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 40145d8:	9100b404 	addi	r4,r18,720
 40145dc:	20800037 	ldwio	r2,0(r4)
    dat &= ~0x82;
 40145e0:	00ffdf44 	movi	r3,-131
 40145e4:	10c4703a 	and	r2,r2,r3
    dat |= 0x82;
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 40145e8:	10802094 	ori	r2,r2,130
 40145ec:	10bfffcc 	andi	r2,r2,65535
 40145f0:	20800035 	stwio	r2,0(r4)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 40145f4:	010100f4 	movhi	r4,1027
 40145f8:	210c3904 	addi	r4,r4,12516
 40145fc:	4002fec0 	call	4002fec <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 4014600:	9480a004 	addi	r18,r18,640
 4014604:	90800037 	ldwio	r2,0(r18)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 4014608:	10bfffcc 	andi	r2,r2,65535
 401460c:	10a00014 	ori	r2,r2,32768
 4014610:	90800035 	stwio	r2,0(r18)
    
    return 1;
    
}
 4014614:	00800044 	movi	r2,1
 4014618:	dfc00317 	ldw	ra,12(sp)
 401461c:	dcc00217 	ldw	r19,8(sp)
 4014620:	dc800117 	ldw	r18,4(sp)
 4014624:	dc000017 	ldw	r16,0(sp)
 4014628:	dec00404 	addi	sp,sp,16
 401462c:	f800283a 	ret

04014630 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 4014630:	defffc04 	addi	sp,sp,-16
 4014634:	dcc00215 	stw	r19,8(sp)
 4014638:	dc800115 	stw	r18,4(sp)
 401463c:	dfc00315 	stw	ra,12(sp)
 4014640:	dc000015 	stw	r16,0(sp)
 4014644:	2025883a 	mov	r18,r4
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 4014648:	24c0bb04 	addi	r19,r4,748
 401464c:	9c000037 	ldwio	r16,0(r19)
    dat &= 0xfff0;

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 4014650:	010100f4 	movhi	r4,1027
 4014654:	210c3e04 	addi	r4,r4,12536
 4014658:	4002fec0 	call	4002fec <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 401465c:	00fffc04 	movi	r3,-16
 4014660:	80e0703a 	and	r16,r16,r3
 4014664:	84000114 	ori	r16,r16,4
 4014668:	843fffcc 	andi	r16,r16,65535
 401466c:	9c000035 	stwio	r16,0(r19)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 4014670:	010100f4 	movhi	r4,1027
 4014674:	210c5304 	addi	r4,r4,12620
 4014678:	4002fec0 	call	4002fec <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 401467c:	90c0b404 	addi	r3,r18,720
 4014680:	18800037 	ldwio	r2,0(r3)
    dat &= ~0x82;
    IOWR(&pmac->mdio1.reg14, 0, dat);
 4014684:	10bfdf4c 	andi	r2,r2,65405
 4014688:	18800035 	stwio	r2,0(r3)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 401468c:	010100f4 	movhi	r4,1027
 4014690:	210c3904 	addi	r4,r4,12516
 4014694:	4002fec0 	call	4002fec <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 4014698:	9480a004 	addi	r18,r18,640
 401469c:	90800037 	ldwio	r2,0(r18)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 40146a0:	10bfffcc 	andi	r2,r2,65535
 40146a4:	10a00014 	ori	r2,r2,32768
 40146a8:	90800035 	stwio	r2,0(r18)
    
    return 1;
}
 40146ac:	00800044 	movi	r2,1
 40146b0:	dfc00317 	ldw	ra,12(sp)
 40146b4:	dcc00217 	ldw	r19,8(sp)
 40146b8:	dc800117 	ldw	r18,4(sp)
 40146bc:	dc000017 	ldw	r16,0(sp)
 40146c0:	dec00404 	addi	sp,sp,16
 40146c4:	f800283a 	ret

040146c8 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 40146c8:	defffc04 	addi	sp,sp,-16
 40146cc:	dcc00215 	stw	r19,8(sp)
 40146d0:	dc800115 	stw	r18,4(sp)
 40146d4:	dfc00315 	stw	ra,12(sp)
 40146d8:	dc000015 	stw	r16,0(sp)
 40146dc:	2025883a 	mov	r18,r4
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 40146e0:	24c0bb04 	addi	r19,r4,748
 40146e4:	9c000037 	ldwio	r16,0(r19)
    dat &= 0xfff0;

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 40146e8:	010100f4 	movhi	r4,1027
 40146ec:	210c5d04 	addi	r4,r4,12660
 40146f0:	4002fec0 	call	4002fec <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 40146f4:	00fffc04 	movi	r3,-16
 40146f8:	80e0703a 	and	r16,r16,r3
 40146fc:	840003d4 	ori	r16,r16,15
 4014700:	843fffcc 	andi	r16,r16,65535
 4014704:	9c000035 	stwio	r16,0(r19)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 4014708:	010100f4 	movhi	r4,1027
 401470c:	210c5304 	addi	r4,r4,12620
 4014710:	4002fec0 	call	4002fec <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 4014714:	90c0b404 	addi	r3,r18,720
 4014718:	18800037 	ldwio	r2,0(r3)
    dat &= ~0x82;
    IOWR(&pmac->mdio1.reg14, 0, dat);
 401471c:	10bfdf4c 	andi	r2,r2,65405
 4014720:	18800035 	stwio	r2,0(r3)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 4014724:	010100f4 	movhi	r4,1027
 4014728:	210c3904 	addi	r4,r4,12516
 401472c:	4002fec0 	call	4002fec <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 4014730:	9480a004 	addi	r18,r18,640
 4014734:	90800037 	ldwio	r2,0(r18)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 4014738:	10bfffcc 	andi	r2,r2,65535
 401473c:	10a00014 	ori	r2,r2,32768
 4014740:	90800035 	stwio	r2,0(r18)
    
    return 1;
}
 4014744:	00800044 	movi	r2,1
 4014748:	dfc00317 	ldw	ra,12(sp)
 401474c:	dcc00217 	ldw	r19,8(sp)
 4014750:	dc800117 	ldw	r18,4(sp)
 4014754:	dc000017 	ldw	r16,0(sp)
 4014758:	dec00404 	addi	sp,sp,16
 401475c:	f800283a 	ret

04014760 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 4014760:	defffd04 	addi	sp,sp,-12
 4014764:	dc000015 	stw	r16,0(sp)
 4014768:	dfc00215 	stw	ra,8(sp)
 401476c:	dc400115 	stw	r17,4(sp)
 4014770:	2021883a 	mov	r16,r4
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
 4014774:	2080a137 	ldwio	r2,644(r4)
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 4014778:	010100f4 	movhi	r4,1027
 401477c:	210c6904 	addi	r4,r4,12708
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
 4014780:	1080080c 	andi	r2,r2,32
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 4014784:	8440a004 	addi	r17,r16,640
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
 4014788:	10000a1e 	bne	r2,zero,40147b4 <marvell_phy_cfg+0x54>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 401478c:	4002fec0 	call	4002fec <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 4014790:	00c01e04 	movi	r3,120
 4014794:	80c0b035 	stwio	r3,704(r16)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 4014798:	010100f4 	movhi	r4,1027
 401479c:	210c3904 	addi	r4,r4,12516
 40147a0:	4002fec0 	call	4002fec <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 40147a4:	88c00037 	ldwio	r3,0(r17)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
 40147a8:	18ffffcc 	andi	r3,r3,65535
 40147ac:	18e00014 	ori	r3,r3,32768
 40147b0:	80c0a035 	stwio	r3,640(r16)
    }
    
    return 0;
}
 40147b4:	0005883a 	mov	r2,zero
 40147b8:	dfc00217 	ldw	ra,8(sp)
 40147bc:	dc400117 	ldw	r17,4(sp)
 40147c0:	dc000017 	ldw	r16,0(sp)
 40147c4:	dec00304 	addi	sp,sp,12
 40147c8:	f800283a 	ret

040147cc <alt_tse_phy_wr_mdio_reg>:
{
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 40147cc:	20800617 	ldw	r2,24(r4)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 40147d0:	39c03fcc 	andi	r7,r7,255
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 40147d4:	da00000b 	ldhu	r8,0(sp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 40147d8:	11000317 	ldw	r4,12(r2)
 40147dc:	20800117 	ldw	r2,4(r4)
 40147e0:	10c00217 	ldw	r3,8(r2)
 40147e4:	1a400017 	ldw	r9,0(r3)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 40147e8:	38001926 	beq	r7,zero,4014850 <alt_tse_phy_wr_mdio_reg+0x84>
 40147ec:	0005883a 	mov	r2,zero
 40147f0:	0009883a 	mov	r4,zero
    {
        bit_mask <<= 1;
 40147f4:	1085883a 	add	r2,r2,r2
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 40147f8:	21000044 	addi	r4,r4,1
    {
        bit_mask <<= 1;
        bit_mask |= 0x01;        
 40147fc:	10800054 	ori	r2,r2,1
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4014800:	393ffc1e 	bne	r7,r4,40147f4 <alt_tse_phy_wr_mdio_reg+0x28>
 4014804:	31003fcc 	andi	r4,r6,255
 4014808:	10ffffcc 	andi	r3,r2,65535
 401480c:	40bfffcc 	andi	r2,r8,65535
 4014810:	1906983a 	sll	r3,r3,r4
 4014814:	1104983a 	sll	r2,r2,r4
 4014818:	00cc303a 	nor	r6,zero,r3
 401481c:	188e703a 	and	r7,r3,r2
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 4014820:	28803fcc 	andi	r2,r5,255
 4014824:	1085883a 	add	r2,r2,r2
 4014828:	4900a004 	addi	r4,r9,640
 401482c:	1085883a 	add	r2,r2,r2
 4014830:	2089883a 	add	r4,r4,r2
 4014834:	20c00037 	ldwio	r3,0(r4)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 4014838:	1986703a 	and	r3,r3,r6
 401483c:	19c6b03a 	or	r3,r3,r7
 4014840:	18ffffcc 	andi	r3,r3,65535
 4014844:	20c00035 	stwio	r3,0(r4)
    
    return SUCCESS;
    
}
 4014848:	0005883a 	mov	r2,zero
 401484c:	f800283a 	ret
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4014850:	01bfffc4 	movi	r6,-1
 4014854:	003ff206 	br	4014820 <alt_tse_phy_wr_mdio_reg+0x54>

04014858 <alt_tse_phy_wr_mdio_addr>:
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4014858:	21800617 	ldw	r6,24(r4)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 401485c:	29403fcc 	andi	r5,r5,255
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4014860:	30800317 	ldw	r2,12(r6)
 4014864:	10c00117 	ldw	r3,4(r2)
 4014868:	19000217 	ldw	r4,8(r3)
 401486c:	20800017 	ldw	r2,0(r4)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 4014870:	11401035 	stwio	r5,64(r2)
    
    return SUCCESS;
}
 4014874:	0005883a 	mov	r2,zero
 4014878:	f800283a 	ret

0401487c <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 401487c:	defffb04 	addi	sp,sp,-20
 4014880:	dc000115 	stw	r16,4(sp)
 4014884:	2021883a 	mov	r16,r4
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 4014888:	21000617 	ldw	r4,24(r4)
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 401488c:	dc400215 	stw	r17,8(sp)
 4014890:	dfc00415 	stw	ra,16(sp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 4014894:	24400317 	ldw	r17,12(r4)
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 4014898:	dcc00315 	stw	r19,12(sp)
 401489c:	2827883a 	mov	r19,r5
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 40148a0:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40148a4:	8809883a 	mov	r4,r17
 40148a8:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 40148ac:	8009883a 	mov	r4,r16
 40148b0:	40144900 	call	4014490 <alt_tse_phy_rd_mdio_addr>
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 40148b4:	81400003 	ldbu	r5,0(r16)
 40148b8:	8009883a 	mov	r4,r16
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 40148bc:	1023883a 	mov	r17,r2
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 40148c0:	9cc03fcc 	andi	r19,r19,255
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 40148c4:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 40148c8:	01400044 	movi	r5,1
 40148cc:	8009883a 	mov	r4,r16
 40148d0:	280f883a 	mov	r7,r5
 40148d4:	01800304 	movi	r6,12
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 40148d8:	98001e26 	beq	r19,zero,4014954 <alt_tse_phy_set_adv_10+0xd8>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 40148dc:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 40148e0:	10803fcc 	andi	r2,r2,255
 40148e4:	8009883a 	mov	r4,r16
 40148e8:	01400104 	movi	r5,4
 40148ec:	01800184 	movi	r6,6
 40148f0:	01c00044 	movi	r7,1
 40148f4:	d8800015 	stw	r2,0(sp)
 40148f8:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 40148fc:	01400044 	movi	r5,1
 4014900:	280f883a 	mov	r7,r5
 4014904:	8009883a 	mov	r4,r16
 4014908:	018002c4 	movi	r6,11
 401490c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 4014910:	10803fcc 	andi	r2,r2,255
 4014914:	8009883a 	mov	r4,r16
 4014918:	01400104 	movi	r5,4
 401491c:	01800144 	movi	r6,5
 4014920:	01c00044 	movi	r7,1
 4014924:	d8800015 	stw	r2,0(sp)
 4014928:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401492c:	8009883a 	mov	r4,r16
 4014930:	89403fcc 	andi	r5,r17,255
 4014934:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
}
 4014938:	0005883a 	mov	r2,zero
 401493c:	dfc00417 	ldw	ra,16(sp)
 4014940:	dcc00317 	ldw	r19,12(sp)
 4014944:	dc400217 	ldw	r17,8(sp)
 4014948:	dc000117 	ldw	r16,4(sp)
 401494c:	dec00504 	addi	sp,sp,20
 4014950:	f800283a 	ret
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 4014954:	8009883a 	mov	r4,r16
 4014958:	01400104 	movi	r5,4
 401495c:	01800184 	movi	r6,6
 4014960:	01c00044 	movi	r7,1
 4014964:	d8000015 	stw	zero,0(sp)
 4014968:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 401496c:	8009883a 	mov	r4,r16
 4014970:	01400104 	movi	r5,4
 4014974:	01800144 	movi	r6,5
 4014978:	01c00044 	movi	r7,1
 401497c:	d8000015 	stw	zero,0(sp)
 4014980:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
 4014984:	003fe906 	br	401492c <alt_tse_phy_set_adv_10+0xb0>

04014988 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 4014988:	defffb04 	addi	sp,sp,-20
 401498c:	dc000115 	stw	r16,4(sp)
 4014990:	2021883a 	mov	r16,r4
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 4014994:	21000617 	ldw	r4,24(r4)
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 4014998:	dc400215 	stw	r17,8(sp)
 401499c:	dfc00415 	stw	ra,16(sp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 40149a0:	24400317 	ldw	r17,12(r4)
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 40149a4:	dcc00315 	stw	r19,12(sp)
 40149a8:	2827883a 	mov	r19,r5
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 40149ac:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40149b0:	8809883a 	mov	r4,r17
 40149b4:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 40149b8:	8009883a 	mov	r4,r16
 40149bc:	40144900 	call	4014490 <alt_tse_phy_rd_mdio_addr>
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 40149c0:	81400003 	ldbu	r5,0(r16)
 40149c4:	8009883a 	mov	r4,r16
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 40149c8:	1023883a 	mov	r17,r2
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 40149cc:	9cc03fcc 	andi	r19,r19,255
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 40149d0:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 40149d4:	01400044 	movi	r5,1
 40149d8:	8009883a 	mov	r4,r16
 40149dc:	280f883a 	mov	r7,r5
 40149e0:	018003c4 	movi	r6,15
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 40149e4:	98002a26 	beq	r19,zero,4014a90 <alt_tse_phy_set_adv_100+0x108>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 40149e8:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 40149ec:	10803fcc 	andi	r2,r2,255
 40149f0:	8009883a 	mov	r4,r16
 40149f4:	01400104 	movi	r5,4
 40149f8:	01800244 	movi	r6,9
 40149fc:	01c00044 	movi	r7,1
 4014a00:	d8800015 	stw	r2,0(sp)
 4014a04:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 4014a08:	01400044 	movi	r5,1
 4014a0c:	280f883a 	mov	r7,r5
 4014a10:	8009883a 	mov	r4,r16
 4014a14:	01800384 	movi	r6,14
 4014a18:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 4014a1c:	10803fcc 	andi	r2,r2,255
 4014a20:	8009883a 	mov	r4,r16
 4014a24:	01400104 	movi	r5,4
 4014a28:	01800204 	movi	r6,8
 4014a2c:	01c00044 	movi	r7,1
 4014a30:	d8800015 	stw	r2,0(sp)
 4014a34:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 4014a38:	01400044 	movi	r5,1
 4014a3c:	280f883a 	mov	r7,r5
 4014a40:	8009883a 	mov	r4,r16
 4014a44:	01800344 	movi	r6,13
 4014a48:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 4014a4c:	10803fcc 	andi	r2,r2,255
 4014a50:	8009883a 	mov	r4,r16
 4014a54:	01400104 	movi	r5,4
 4014a58:	018001c4 	movi	r6,7
 4014a5c:	01c00044 	movi	r7,1
 4014a60:	d8800015 	stw	r2,0(sp)
 4014a64:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 4014a68:	8009883a 	mov	r4,r16
 4014a6c:	89403fcc 	andi	r5,r17,255
 4014a70:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
}
 4014a74:	0005883a 	mov	r2,zero
 4014a78:	dfc00417 	ldw	ra,16(sp)
 4014a7c:	dcc00317 	ldw	r19,12(sp)
 4014a80:	dc400217 	ldw	r17,8(sp)
 4014a84:	dc000117 	ldw	r16,4(sp)
 4014a88:	dec00504 	addi	sp,sp,20
 4014a8c:	f800283a 	ret
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 4014a90:	8009883a 	mov	r4,r16
 4014a94:	01400104 	movi	r5,4
 4014a98:	01800244 	movi	r6,9
 4014a9c:	01c00044 	movi	r7,1
 4014aa0:	d8000015 	stw	zero,0(sp)
 4014aa4:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 4014aa8:	8009883a 	mov	r4,r16
 4014aac:	01400104 	movi	r5,4
 4014ab0:	01800204 	movi	r6,8
 4014ab4:	01c00044 	movi	r7,1
 4014ab8:	d8000015 	stw	zero,0(sp)
 4014abc:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 4014ac0:	8009883a 	mov	r4,r16
 4014ac4:	01400104 	movi	r5,4
 4014ac8:	018001c4 	movi	r6,7
 4014acc:	01c00044 	movi	r7,1
 4014ad0:	d8000015 	stw	zero,0(sp)
 4014ad4:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
 4014ad8:	003fe306 	br	4014a68 <alt_tse_phy_set_adv_100+0xe0>

04014adc <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 4014adc:	defffb04 	addi	sp,sp,-20
 4014ae0:	dc000115 	stw	r16,4(sp)
 4014ae4:	2021883a 	mov	r16,r4
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 4014ae8:	21000617 	ldw	r4,24(r4)
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 4014aec:	dc400215 	stw	r17,8(sp)
 4014af0:	dfc00415 	stw	ra,16(sp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 4014af4:	24400317 	ldw	r17,12(r4)
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 4014af8:	dcc00315 	stw	r19,12(sp)
 4014afc:	2827883a 	mov	r19,r5
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4014b00:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4014b04:	8809883a 	mov	r4,r17
 4014b08:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4014b0c:	8009883a 	mov	r4,r16
 4014b10:	40144900 	call	4014490 <alt_tse_phy_rd_mdio_addr>
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4014b14:	81400003 	ldbu	r5,0(r16)
 4014b18:	8009883a 	mov	r4,r16
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4014b1c:	1023883a 	mov	r17,r2
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 4014b20:	9cc03fcc 	andi	r19,r19,255
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4014b24:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 4014b28:	01800344 	movi	r6,13
 4014b2c:	8009883a 	mov	r4,r16
 4014b30:	014003c4 	movi	r5,15
 4014b34:	01c00044 	movi	r7,1
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 4014b38:	98001e26 	beq	r19,zero,4014bb4 <alt_tse_phy_set_adv_1000+0xd8>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 4014b3c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 4014b40:	01400244 	movi	r5,9
 4014b44:	280d883a 	mov	r6,r5
 4014b48:	10803fcc 	andi	r2,r2,255
 4014b4c:	8009883a 	mov	r4,r16
 4014b50:	01c00044 	movi	r7,1
 4014b54:	d8800015 	stw	r2,0(sp)
 4014b58:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 4014b5c:	8009883a 	mov	r4,r16
 4014b60:	014003c4 	movi	r5,15
 4014b64:	01800304 	movi	r6,12
 4014b68:	01c00044 	movi	r7,1
 4014b6c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 4014b70:	10803fcc 	andi	r2,r2,255
 4014b74:	8009883a 	mov	r4,r16
 4014b78:	01400244 	movi	r5,9
 4014b7c:	01800204 	movi	r6,8
 4014b80:	01c00044 	movi	r7,1
 4014b84:	d8800015 	stw	r2,0(sp)
 4014b88:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 4014b8c:	8009883a 	mov	r4,r16
 4014b90:	89403fcc 	andi	r5,r17,255
 4014b94:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
}
 4014b98:	0005883a 	mov	r2,zero
 4014b9c:	dfc00417 	ldw	ra,16(sp)
 4014ba0:	dcc00317 	ldw	r19,12(sp)
 4014ba4:	dc400217 	ldw	r17,8(sp)
 4014ba8:	dc000117 	ldw	r16,4(sp)
 4014bac:	dec00504 	addi	sp,sp,20
 4014bb0:	f800283a 	ret
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 4014bb4:	01400244 	movi	r5,9
 4014bb8:	280d883a 	mov	r6,r5
 4014bbc:	8009883a 	mov	r4,r16
 4014bc0:	01c00044 	movi	r7,1
 4014bc4:	d8000015 	stw	zero,0(sp)
 4014bc8:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 4014bcc:	8009883a 	mov	r4,r16
 4014bd0:	01400244 	movi	r5,9
 4014bd4:	01800204 	movi	r6,8
 4014bd8:	01c00044 	movi	r7,1
 4014bdc:	d8000015 	stw	zero,0(sp)
 4014be0:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
 4014be4:	003fe906 	br	4014b8c <alt_tse_phy_set_adv_1000+0xb0>

04014be8 <alt_tse_mac_set_duplex>:
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4014be8:	21000204 	addi	r4,r4,8
 4014bec:	21800037 	ldwio	r6,0(r4)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 4014bf0:	29403fcc 	andi	r5,r5,255
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 4014bf4:	30810014 	ori	r2,r6,1024
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 4014bf8:	2800041e 	bne	r5,zero,4014c0c <alt_tse_mac_set_duplex+0x24>
  }
  else {
    return ENP_PARAM;
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 4014bfc:	20800035 	stwio	r2,0(r4)
 4014c00:	0007883a 	mov	r3,zero
  return SUCCESS;

}
 4014c04:	1805883a 	mov	r2,r3
 4014c08:	f800283a 	ret
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 4014c0c:	00800044 	movi	r2,1
 4014c10:	00fffd84 	movi	r3,-10
 4014c14:	28bffb1e 	bne	r5,r2,4014c04 <alt_tse_mac_set_duplex+0x1c>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 4014c18:	00beffc4 	movi	r2,-1025
 4014c1c:	3084703a 	and	r2,r6,r2
 4014c20:	003ff606 	br	4014bfc <alt_tse_mac_set_duplex+0x14>

04014c24 <alt_tse_mac_set_speed>:
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4014c24:	21000204 	addi	r4,r4,8
 4014c28:	21800037 	ldwio	r6,0(r4)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4014c2c:	00bf8034 	movhi	r2,65024
 4014c30:	10bfffc4 	addi	r2,r2,-1
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 4014c34:	30c00214 	ori	r3,r6,8
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4014c38:	1886703a 	and	r3,r3,r2
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 4014c3c:	29403fcc 	andi	r5,r5,255
 4014c40:	00800084 	movi	r2,2
 4014c44:	28800526 	beq	r5,r2,4014c5c <alt_tse_mac_set_speed+0x38>
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4014c48:	00ff8034 	movhi	r3,65024
 4014c4c:	18fffdc4 	addi	r3,r3,-9
  if(speed == TSE_PHY_SPEED_1000) {
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 4014c50:	00800044 	movi	r2,1
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4014c54:	30c6703a 	and	r3,r6,r3
  if(speed == TSE_PHY_SPEED_1000) {
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 4014c58:	2880031e 	bne	r5,r2,4014c68 <alt_tse_mac_set_speed+0x44>
  }  
  else {
    return ENP_PARAM;
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 4014c5c:	20c00035 	stwio	r3,0(r4)
 4014c60:	0005883a 	mov	r2,zero
  return SUCCESS;
}
 4014c64:	f800283a 	ret
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 4014c68:	00bffdc4 	movi	r2,-9
 4014c6c:	3086703a 	and	r3,r6,r2
  else if(speed == TSE_PHY_SPEED_100) {
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 4014c70:	00bffd84 	movi	r2,-10
 4014c74:	283ffb1e 	bne	r5,zero,4014c64 <alt_tse_mac_set_speed+0x40>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4014c78:	18c08034 	orhi	r3,r3,512
 4014c7c:	003ff706 	br	4014c5c <alt_tse_mac_set_speed+0x38>

04014c80 <tse_mac_setGMIImode>:
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4014c80:	00800204 	movi	r2,8
 4014c84:	2089883a 	add	r4,r4,r2
 4014c88:	20c00037 	ldwio	r3,0(r4)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 4014c8c:	1886b03a 	or	r3,r3,r2
 4014c90:	20c00035 	stwio	r3,0(r4)
  return SUCCESS;
}
 4014c94:	0005883a 	mov	r2,zero
 4014c98:	f800283a 	ret

04014c9c <tse_mac_setMIImode>:
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4014c9c:	21000204 	addi	r4,r4,8
 4014ca0:	20800037 	ldwio	r2,0(r4)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 4014ca4:	00fffdc4 	movi	r3,-9
 4014ca8:	10c4703a 	and	r2,r2,r3
 4014cac:	20800035 	stwio	r2,0(r4)
  return SUCCESS;
}
 4014cb0:	0005883a 	mov	r2,zero
 4014cb4:	f800283a 	ret

04014cb8 <tse_mac_SwReset>:
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4014cb8:	21400204 	addi	r5,r4,8
 4014cbc:	29800037 	ldwio	r6,0(r5)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 4014cc0:	00880204 	movi	r2,8200
 4014cc4:	20800235 	stwio	r2,8(r4)
 4014cc8:	0007883a 	mov	r3,zero
 4014ccc:	0109c404 	movi	r4,10000
 4014cd0:	00000206 	br	4014cdc <tse_mac_SwReset+0x24>

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 4014cd4:	19000426 	beq	r3,r4,4014ce8 <tse_mac_SwReset+0x30>
 4014cd8:	18c00044 	addi	r3,r3,1
 4014cdc:	28800037 	ldwio	r2,0(r5)
 4014ce0:	1088000c 	andi	r2,r2,8192
 4014ce4:	103ffb1e 	bne	r2,zero,4014cd4 <tse_mac_SwReset+0x1c>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 4014ce8:	29800035 	stwio	r6,0(r5)
    return SUCCESS;
}
 4014cec:	0005883a 	mov	r2,zero
 4014cf0:	f800283a 	ret

04014cf4 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 4014cf4:	defff704 	addi	sp,sp,-36
 4014cf8:	dc000115 	stw	r16,4(sp)
 4014cfc:	2021883a 	mov	r16,r4
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 4014d00:	21000617 	ldw	r4,24(r4)
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 4014d04:	dc400215 	stw	r17,8(sp)
 4014d08:	dfc00815 	stw	ra,32(sp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 4014d0c:	24400317 	ldw	r17,12(r4)
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 4014d10:	dd800715 	stw	r22,28(sp)
 4014d14:	dd400615 	stw	r21,24(sp)
 4014d18:	dd000515 	stw	r20,20(sp)
 4014d1c:	282b883a 	mov	r21,r5
 4014d20:	dc800315 	stw	r18,12(sp)
 4014d24:	dcc00415 	stw	r19,16(sp)
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4014d28:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4014d2c:	8809883a 	mov	r4,r17
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4014d30:	1025883a 	mov	r18,r2
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4014d34:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4014d38:	8009883a 	mov	r4,r16
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4014d3c:	1023883a 	mov	r17,r2
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4014d40:	40144900 	call	4014490 <alt_tse_phy_rd_mdio_addr>
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4014d44:	81400003 	ldbu	r5,0(r16)
 4014d48:	8009883a 	mov	r4,r16
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4014d4c:	05000044 	movi	r20,1
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4014d50:	102d883a 	mov	r22,r2
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4014d54:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4014d58:	018000c4 	movi	r6,3
 4014d5c:	8009883a 	mov	r4,r16
 4014d60:	a00b883a 	mov	r5,r20
 4014d64:	a00f883a 	mov	r7,r20
 4014d68:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4014d6c:	10003e26 	beq	r2,zero,4014e68 <alt_tse_phy_restart_an+0x174>
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 4014d70:	8cc03fcc 	andi	r19,r17,255
 4014d74:	94803fcc 	andi	r18,r18,255
		
		return TSE_PHY_AN_NOT_CAPABLE;
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 4014d78:	8009883a 	mov	r4,r16
 4014d7c:	000b883a 	mov	r5,zero
 4014d80:	01800304 	movi	r6,12
 4014d84:	a00f883a 	mov	r7,r20
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 4014d88:	9cc0201c 	xori	r19,r19,128
 4014d8c:	9480201c 	xori	r18,r18,128
		
		return TSE_PHY_AN_NOT_CAPABLE;
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 4014d90:	dd000015 	stw	r20,0(sp)
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 4014d94:	9cffe004 	addi	r19,r19,-128
		
		return TSE_PHY_AN_NOT_CAPABLE;
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 4014d98:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 4014d9c:	94bfe004 	addi	r18,r18,-128
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 4014da0:	a00f883a 	mov	r7,r20
 4014da4:	8009883a 	mov	r4,r16
 4014da8:	000b883a 	mov	r5,zero
 4014dac:	01800244 	movi	r6,9
 4014db0:	dd000015 	stw	r20,0(sp)
 4014db4:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 4014db8:	010100f4 	movhi	r4,1027
 4014dbc:	210c8204 	addi	r4,r4,12808
 4014dc0:	980b883a 	mov	r5,r19
 4014dc4:	900d883a 	mov	r6,r18
 4014dc8:	4002ed40 	call	4002ed4 <printf>
 4014dcc:	0023883a 	mov	r17,zero
 4014dd0:	00000106 	br	4014dd8 <alt_tse_phy_restart_an+0xe4>
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
        if(timeout++ > timeout_threshold) {
 4014dd4:	8c400044 	addi	r17,r17,1
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 4014dd8:	01400044 	movi	r5,1
 4014ddc:	8009883a 	mov	r4,r16
 4014de0:	01800144 	movi	r6,5
 4014de4:	280f883a 	mov	r7,r5
 4014de8:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4014dec:	1000141e 	bne	r2,zero,4014e40 <alt_tse_phy_restart_an+0x14c>
        if(timeout++ > timeout_threshold) {
 4014df0:	ac7ff82e 	bgeu	r21,r17,4014dd4 <alt_tse_phy_restart_an+0xe0>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 4014df4:	980b883a 	mov	r5,r19
 4014df8:	900d883a 	mov	r6,r18
 4014dfc:	010100f4 	movhi	r4,1027
 4014e00:	210c9404 	addi	r4,r4,12880
 4014e04:	4002ed40 	call	4002ed4 <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4014e08:	8009883a 	mov	r4,r16
 4014e0c:	b1403fcc 	andi	r5,r22,255
 4014e10:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
 4014e14:	00bfffc4 	movi	r2,-1
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
    
    return TSE_PHY_AN_COMPLETE;
}
 4014e18:	dfc00817 	ldw	ra,32(sp)
 4014e1c:	dd800717 	ldw	r22,28(sp)
 4014e20:	dd400617 	ldw	r21,24(sp)
 4014e24:	dd000517 	ldw	r20,20(sp)
 4014e28:	dcc00417 	ldw	r19,16(sp)
 4014e2c:	dc800317 	ldw	r18,12(sp)
 4014e30:	dc400217 	ldw	r17,8(sp)
 4014e34:	dc000117 	ldw	r16,4(sp)
 4014e38:	dec00904 	addi	sp,sp,36
 4014e3c:	f800283a 	ret
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 4014e40:	980b883a 	mov	r5,r19
 4014e44:	900d883a 	mov	r6,r18
 4014e48:	010100f4 	movhi	r4,1027
 4014e4c:	210ca004 	addi	r4,r4,12928
 4014e50:	4002ed40 	call	4002ed4 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4014e54:	8009883a 	mov	r4,r16
 4014e58:	b1403fcc 	andi	r5,r22,255
 4014e5c:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
 4014e60:	0005883a 	mov	r2,zero
 4014e64:	003fec06 	br	4014e18 <alt_tse_phy_restart_an+0x124>
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 4014e68:	89403fcc 	andi	r5,r17,255
 4014e6c:	91803fcc 	andi	r6,r18,255
 4014e70:	2940201c 	xori	r5,r5,128
 4014e74:	3180201c 	xori	r6,r6,128
 4014e78:	297fe004 	addi	r5,r5,-128
 4014e7c:	31bfe004 	addi	r6,r6,-128
 4014e80:	010100f4 	movhi	r4,1027
 4014e84:	210c7204 	addi	r4,r4,12744
 4014e88:	4002ed40 	call	4002ed4 <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4014e8c:	8009883a 	mov	r4,r16
 4014e90:	b1403fcc 	andi	r5,r22,255
 4014e94:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
 4014e98:	00bfff84 	movi	r2,-2
 4014e9c:	003fde06 	br	4014e18 <alt_tse_phy_restart_an+0x124>

04014ea0 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 4014ea0:	defff104 	addi	sp,sp,-60
 4014ea4:	dd800b15 	stw	r22,44(sp)
 4014ea8:	dcc00815 	stw	r19,32(sp)
 4014eac:	202d883a 	mov	r22,r4
 4014eb0:	dfc00e15 	stw	ra,56(sp)
 4014eb4:	df000d15 	stw	fp,52(sp)
 4014eb8:	ddc00c15 	stw	r23,48(sp)
 4014ebc:	dd400a15 	stw	r21,40(sp)
 4014ec0:	dd000915 	stw	r20,36(sp)
 4014ec4:	dc800715 	stw	r18,28(sp)
 4014ec8:	dc400615 	stw	r17,24(sp)
 4014ecc:	dc000515 	stw	r16,20(sp)
 4014ed0:	2827883a 	mov	r19,r5
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_system_info *psys = 0;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4014ed4:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
 4014ed8:	1009883a 	mov	r4,r2
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4014edc:	b0800117 	ldw	r2,4(r22)
 4014ee0:	10c00217 	ldw	r3,8(r2)
 4014ee4:	18c00017 	ldw	r3,0(r3)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4014ee8:	18801004 	addi	r2,r3,64
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4014eec:	d8c00115 	stw	r3,4(sp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4014ef0:	d8800315 	stw	r2,12(sp)
 4014ef4:	10c00037 	ldwio	r3,0(r2)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 4014ef8:	00800084 	movi	r2,2
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4014efc:	d8c00215 	stw	r3,8(sp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 4014f00:	14c0e136 	bltu	r2,r19,4015288 <alt_tse_phy_set_common_speed+0x3e8>
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 4014f04:	b0800003 	ldbu	r2,0(r22)
 4014f08:	1000da26 	beq	r2,zero,4015274 <alt_tse_phy_set_common_speed+0x3d4>
 4014f0c:	21003fcc 	andi	r4,r4,255
 4014f10:	2100201c 	xori	r4,r4,128
 4014f14:	213fe004 	addi	r4,r4,-128
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
 4014f18:	b025883a 	mov	r18,r22
 4014f1c:	0029883a 	mov	r20,zero
 4014f20:	d9000415 	stw	r4,16(sp)
 4014f24:	00001f06 	br	4014fa4 <alt_tse_phy_set_common_speed+0x104>
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 4014f28:	88800103 	ldbu	r2,4(r17)
 4014f2c:	1000291e 	bne	r2,zero,4014fd4 <alt_tse_phy_set_common_speed+0x134>
 4014f30:	88800017 	ldw	r2,0(r17)
 4014f34:	00c04034 	movhi	r3,256
 4014f38:	18ffc004 	addi	r3,r3,-256
 4014f3c:	10c4703a 	and	r2,r2,r3
 4014f40:	1000241e 	bne	r2,zero,4014fd4 <alt_tse_phy_set_common_speed+0x134>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 4014f44:	00800084 	movi	r2,2
 4014f48:	9880be26 	beq	r19,r2,4015244 <alt_tse_phy_set_common_speed+0x3a4>
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
            return TSE_PHY_SPEED_NO_COMMON;
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4014f4c:	04000044 	movi	r16,1
 4014f50:	8809883a 	mov	r4,r17
 4014f54:	800b883a 	mov	r5,r16
 4014f58:	018000c4 	movi	r6,3
 4014f5c:	800f883a 	mov	r7,r16
        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 4014f60:	002b883a 	mov	r21,zero
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
            return TSE_PHY_SPEED_NO_COMMON;
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4014f64:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4014f68:	1000221e 	bne	r2,zero,4014ff4 <alt_tse_phy_set_common_speed+0x154>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 4014f6c:	a8803fcc 	andi	r2,r21,255
 4014f70:	1005003a 	cmpeq	r2,r2,zero
 4014f74:	10008b26 	beq	r2,zero,40151a4 <alt_tse_phy_set_common_speed+0x304>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 4014f78:	98bfffcc 	andi	r2,r19,65535
 4014f7c:	8809883a 	mov	r4,r17
 4014f80:	800f883a 	mov	r7,r16
 4014f84:	000b883a 	mov	r5,zero
 4014f88:	01800344 	movi	r6,13
 4014f8c:	d8800015 	stw	r2,0(sp)
 4014f90:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 4014f94:	b0800003 	ldbu	r2,0(r22)
 4014f98:	a5000044 	addi	r20,r20,1
 4014f9c:	94800104 	addi	r18,r18,4
 4014fa0:	a0803a0e 	bge	r20,r2,401508c <alt_tse_phy_set_common_speed+0x1ec>
        pmac_info = pmac_group->pmac_info[i];
 4014fa4:	94000117 	ldw	r16,4(r18)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4014fa8:	8009883a 	mov	r4,r16
 4014fac:	40143440 	call	4014344 <alt_tse_get_mac_info_index>

        pphy = pmac_info->pphy_info;
 4014fb0:	84400117 	ldw	r17,4(r16)
        
        /* if no PHY connected */
        if(!pphy) {
 4014fb4:	883ff726 	beq	r17,zero,4014f94 <alt_tse_phy_set_common_speed+0xf4>
        }
        
        psys = pmac_info->psys_info; 
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4014fb8:	89400003 	ldbu	r5,0(r17)
 4014fbc:	8809883a 	mov	r4,r17
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
        pmac_info = pmac_group->pmac_info[i];
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4014fc0:	102f883a 	mov	r23,r2
        /* if no PHY connected */
        if(!pphy) {
            continue;
        }
        
        psys = pmac_info->psys_info; 
 4014fc4:	87000217 	ldw	fp,8(r16)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4014fc8:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 4014fcc:	88c000c3 	ldbu	r3,3(r17)
 4014fd0:	183fd526 	beq	r3,zero,4014f28 <alt_tse_phy_set_common_speed+0x88>
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
            return TSE_PHY_SPEED_NO_COMMON;
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4014fd4:	04000044 	movi	r16,1
 4014fd8:	8809883a 	mov	r4,r17
 4014fdc:	800b883a 	mov	r5,r16
 4014fe0:	018000c4 	movi	r6,3
 4014fe4:	800f883a 	mov	r7,r16
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
            return TSE_PHY_SPEED_NO_COMMON;
 4014fe8:	05400044 	movi	r21,1
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4014fec:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4014ff0:	103fde26 	beq	r2,zero,4014f6c <alt_tse_phy_set_common_speed+0xcc>
            /* continue to next PHY */
            continue;
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 4014ff4:	00800084 	movi	r2,2
 4014ff8:	98807326 	beq	r19,r2,40151c8 <alt_tse_phy_set_common_speed+0x328>
            alt_tse_phy_set_adv_1000(pphy, 1);
            alt_tse_phy_set_adv_100(pphy, 1);
            alt_tse_phy_set_adv_10(pphy, 1);
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 4014ffc:	9c008326 	beq	r19,r16,401520c <alt_tse_phy_set_common_speed+0x36c>
            alt_tse_phy_set_adv_1000(pphy, 0);
            alt_tse_phy_set_adv_100(pphy, 1);
            alt_tse_phy_set_adv_10(pphy, 1);
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 4015000:	98003e1e 	bne	r19,zero,40150fc <alt_tse_phy_set_common_speed+0x25c>
            alt_tse_phy_set_adv_1000(pphy, 0);
 4015004:	8809883a 	mov	r4,r17
 4015008:	000b883a 	mov	r5,zero
 401500c:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 4015010:	8809883a 	mov	r4,r17
 4015014:	000b883a 	mov	r5,zero
 4015018:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 401501c:	8809883a 	mov	r4,r17
 4015020:	800b883a 	mov	r5,r16
 4015024:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
            alt_tse_phy_set_adv_100(pphy, 0);
            alt_tse_phy_set_adv_10(pphy, 0);
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 4015028:	04000044 	movi	r16,1
 401502c:	8809883a 	mov	r4,r17
 4015030:	800b883a 	mov	r5,r16
 4015034:	01800144 	movi	r6,5
 4015038:	800f883a 	mov	r7,r16
 401503c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015040:	1007883a 	mov	r3,r2
 4015044:	14003e26 	beq	r2,r16,4015140 <alt_tse_phy_set_common_speed+0x2a0>
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 4015048:	8809883a 	mov	r4,r17
 401504c:	01400044 	movi	r5,1
 4015050:	000d883a 	mov	r6,zero
 4015054:	01c00404 	movi	r7,16
 4015058:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 401505c:	b9803fcc 	andi	r6,r23,255
 4015060:	d9400417 	ldw	r5,16(sp)
 4015064:	3180201c 	xori	r6,r6,128
 4015068:	100f883a 	mov	r7,r2
 401506c:	31bfe004 	addi	r6,r6,-128
 4015070:	010100f4 	movhi	r4,1027
 4015074:	210cd704 	addi	r4,r4,13148
 4015078:	4002ed40 	call	4002ed4 <printf>
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 401507c:	b0800003 	ldbu	r2,0(r22)
 4015080:	a5000044 	addi	r20,r20,1
 4015084:	94800104 	addi	r18,r18,4
 4015088:	a0bfc616 	blt	r20,r2,4014fa4 <alt_tse_phy_set_common_speed+0x104>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 401508c:	00800084 	movi	r2,2
 4015090:	98806826 	beq	r19,r2,4015234 <alt_tse_phy_set_common_speed+0x394>
 4015094:	00800044 	movi	r2,1
 4015098:	98806826 	beq	r19,r2,401523c <alt_tse_phy_set_common_speed+0x39c>
 401509c:	01800284 	movi	r6,10
 40150a0:	d9400417 	ldw	r5,16(sp)
 40150a4:	010100f4 	movhi	r4,1027
 40150a8:	210ce304 	addi	r4,r4,13196
 40150ac:	4002ed40 	call	4002ed4 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 40150b0:	d9000117 	ldw	r4,4(sp)
 40150b4:	99403fcc 	andi	r5,r19,255
 40150b8:	4014c240 	call	4014c24 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 40150bc:	d8800217 	ldw	r2,8(sp)
 40150c0:	d8c00317 	ldw	r3,12(sp)
 40150c4:	18800035 	stwio	r2,0(r3)
        
    return common_speed;
}
 40150c8:	9805883a 	mov	r2,r19
 40150cc:	dfc00e17 	ldw	ra,56(sp)
 40150d0:	df000d17 	ldw	fp,52(sp)
 40150d4:	ddc00c17 	ldw	r23,48(sp)
 40150d8:	dd800b17 	ldw	r22,44(sp)
 40150dc:	dd400a17 	ldw	r21,40(sp)
 40150e0:	dd000917 	ldw	r20,36(sp)
 40150e4:	dcc00817 	ldw	r19,32(sp)
 40150e8:	dc800717 	ldw	r18,28(sp)
 40150ec:	dc400617 	ldw	r17,24(sp)
 40150f0:	dc000517 	ldw	r16,20(sp)
 40150f4:	dec00f04 	addi	sp,sp,60
 40150f8:	f800283a 	ret
            alt_tse_phy_set_adv_1000(pphy, 0);
            alt_tse_phy_set_adv_100(pphy, 0);
            alt_tse_phy_set_adv_10(pphy, 1);
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 40150fc:	000b883a 	mov	r5,zero
 4015100:	8809883a 	mov	r4,r17
 4015104:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 4015108:	8809883a 	mov	r4,r17
 401510c:	000b883a 	mov	r5,zero
 4015110:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 4015114:	8809883a 	mov	r4,r17
 4015118:	000b883a 	mov	r5,zero
 401511c:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 4015120:	04000044 	movi	r16,1
 4015124:	8809883a 	mov	r4,r17
 4015128:	800b883a 	mov	r5,r16
 401512c:	01800144 	movi	r6,5
 4015130:	800f883a 	mov	r7,r16
 4015134:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015138:	1007883a 	mov	r3,r2
 401513c:	143fc21e 	bne	r2,r16,4015048 <alt_tse_phy_set_common_speed+0x1a8>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 4015140:	a8803fcc 	andi	r2,r21,255
 4015144:	1005003a 	cmpeq	r2,r2,zero
 4015148:	1000291e 	bne	r2,zero,40151f0 <alt_tse_phy_set_common_speed+0x350>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 401514c:	88800517 	ldw	r2,20(r17)
 4015150:	8809883a 	mov	r4,r17
 4015154:	01c00084 	movi	r7,2
 4015158:	118015c3 	ldbu	r6,87(r2)
 401515c:	11401583 	ldbu	r5,86(r2)
 4015160:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 4015164:	10803fcc 	andi	r2,r2,255
 4015168:	98800426 	beq	r19,r2,401517c <alt_tse_phy_set_common_speed+0x2dc>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 401516c:	8809883a 	mov	r4,r17
 4015170:	01400134 	movhi	r5,4
 4015174:	29742404 	addi	r5,r5,-12144
 4015178:	4014cf40 	call	4014cf4 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 401517c:	88800517 	ldw	r2,20(r17)
 4015180:	8809883a 	mov	r4,r17
 4015184:	01c00044 	movi	r7,1
 4015188:	11801603 	ldbu	r6,88(r2)
 401518c:	11401583 	ldbu	r5,86(r2)
 4015190:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 4015194:	e1000017 	ldw	r4,0(fp)
 4015198:	11403fcc 	andi	r5,r2,255
 401519c:	4014be80 	call	4014be8 <alt_tse_mac_set_duplex>
 40151a0:	003fa906 	br	4015048 <alt_tse_phy_set_common_speed+0x1a8>
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 40151a4:	9c05d83a 	sra	r2,r19,r16
 40151a8:	8809883a 	mov	r4,r17
 40151ac:	000b883a 	mov	r5,zero
 40151b0:	10bfffcc 	andi	r2,r2,65535
 40151b4:	01800184 	movi	r6,6
 40151b8:	800f883a 	mov	r7,r16
 40151bc:	d8800015 	stw	r2,0(sp)
 40151c0:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
 40151c4:	003f6c06 	br	4014f78 <alt_tse_phy_set_common_speed+0xd8>
            continue;
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
            alt_tse_phy_set_adv_1000(pphy, 1);
 40151c8:	8809883a 	mov	r4,r17
 40151cc:	800b883a 	mov	r5,r16
 40151d0:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 40151d4:	8809883a 	mov	r4,r17
 40151d8:	800b883a 	mov	r5,r16
 40151dc:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 40151e0:	8809883a 	mov	r4,r17
 40151e4:	800b883a 	mov	r5,r16
 40151e8:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
 40151ec:	003f8e06 	br	4015028 <alt_tse_phy_set_common_speed+0x188>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 40151f0:	88800517 	ldw	r2,20(r17)
 40151f4:	180f883a 	mov	r7,r3
 40151f8:	8809883a 	mov	r4,r17
 40151fc:	118015c3 	ldbu	r6,87(r2)
 4015200:	11401583 	ldbu	r5,86(r2)
 4015204:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015208:	003fd606 	br	4015164 <alt_tse_phy_set_common_speed+0x2c4>
            alt_tse_phy_set_adv_1000(pphy, 1);
            alt_tse_phy_set_adv_100(pphy, 1);
            alt_tse_phy_set_adv_10(pphy, 1);
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
            alt_tse_phy_set_adv_1000(pphy, 0);
 401520c:	8809883a 	mov	r4,r17
 4015210:	000b883a 	mov	r5,zero
 4015214:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 4015218:	8809883a 	mov	r4,r17
 401521c:	980b883a 	mov	r5,r19
 4015220:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 4015224:	8809883a 	mov	r4,r17
 4015228:	980b883a 	mov	r5,r19
 401522c:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
 4015230:	003f7d06 	br	4015028 <alt_tse_phy_set_common_speed+0x188>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 4015234:	0180fa04 	movi	r6,1000
 4015238:	003f9906 	br	40150a0 <alt_tse_phy_set_common_speed+0x200>
 401523c:	01801904 	movi	r6,100
 4015240:	003f9706 	br	40150a0 <alt_tse_phy_set_common_speed+0x200>
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 4015244:	d9400417 	ldw	r5,16(sp)
 4015248:	b9803fcc 	andi	r6,r23,255
 401524c:	3180201c 	xori	r6,r6,128
 4015250:	31bfe004 	addi	r6,r6,-128
 4015254:	010100f4 	movhi	r4,1027
 4015258:	210cc004 	addi	r4,r4,13056
 401525c:	4002ed40 	call	4002ed4 <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 4015260:	d8800217 	ldw	r2,8(sp)
 4015264:	d8c00317 	ldw	r3,12(sp)
 4015268:	18800035 	stwio	r2,0(r3)
 401526c:	04ffffc4 	movi	r19,-1
 4015270:	003f9506 	br	40150c8 <alt_tse_phy_set_common_speed+0x228>
 4015274:	21003fcc 	andi	r4,r4,255
 4015278:	2100201c 	xori	r4,r4,128
 401527c:	213fe004 	addi	r4,r4,-128
 4015280:	d9000415 	stw	r4,16(sp)
 4015284:	003f8106 	br	401508c <alt_tse_phy_set_common_speed+0x1ec>
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 4015288:	21403fcc 	andi	r5,r4,255
 401528c:	2940201c 	xori	r5,r5,128
 4015290:	297fe004 	addi	r5,r5,-128
 4015294:	980d883a 	mov	r6,r19
 4015298:	010100f4 	movhi	r4,1027
 401529c:	210cac04 	addi	r4,r4,12976
 40152a0:	4002ed40 	call	4002ed4 <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 40152a4:	d8800217 	ldw	r2,8(sp)
 40152a8:	d8c00117 	ldw	r3,4(sp)
 40152ac:	18801035 	stwio	r2,64(r3)
 40152b0:	04ffffc4 	movi	r19,-1
 40152b4:	003f8406 	br	40150c8 <alt_tse_phy_set_common_speed+0x228>

040152b8 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 40152b8:	defffe04 	addi	sp,sp,-8
 40152bc:	dc400015 	stw	r17,0(sp)
 40152c0:	dfc00115 	stw	ra,4(sp)
 40152c4:	2823883a 	mov	r17,r5
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 40152c8:	40143880 	call	4014388 <alt_tse_get_mac_info>
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 40152cc:	11000317 	ldw	r4,12(r2)
 40152d0:	880b883a 	mov	r5,r17
}
 40152d4:	dfc00117 	ldw	ra,4(sp)
 40152d8:	dc400017 	ldw	r17,0(sp)
 40152dc:	dec00204 	addi	sp,sp,8
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 40152e0:	4014ea01 	jmpi	4014ea0 <alt_tse_phy_set_common_speed>

040152e4 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 40152e4:	defffb04 	addi	sp,sp,-20
 40152e8:	dc000015 	stw	r16,0(sp)
 40152ec:	2021883a 	mov	r16,r4
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 40152f0:	21000617 	ldw	r4,24(r4)
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 40152f4:	dc400115 	stw	r17,4(sp)
 40152f8:	dfc00415 	stw	ra,16(sp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 40152fc:	24400317 	ldw	r17,12(r4)
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 4015300:	dcc00315 	stw	r19,12(sp)
 4015304:	dc800215 	stw	r18,8(sp)
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015308:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 401530c:	8809883a 	mov	r4,r17
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015310:	1025883a 	mov	r18,r2
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 4015314:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4015318:	8009883a 	mov	r4,r16
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 401531c:	1023883a 	mov	r17,r2
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4015320:	40144900 	call	4014490 <alt_tse_phy_rd_mdio_addr>
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4015324:	81400003 	ldbu	r5,0(r16)
 4015328:	8009883a 	mov	r4,r16
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401532c:	1027883a 	mov	r19,r2
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4015330:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 4015334:	01400044 	movi	r5,1
 4015338:	8009883a 	mov	r4,r16
 401533c:	018000c4 	movi	r6,3
 4015340:	280f883a 	mov	r7,r5
 4015344:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015348:	10008226 	beq	r2,zero,4015554 <alt_tse_phy_get_cap+0x270>
        
        return TSE_PHY_AN_NOT_CAPABLE;
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 401534c:	01400134 	movhi	r5,4
 4015350:	29742404 	addi	r5,r5,-12144
 4015354:	8009883a 	mov	r4,r16
 4015358:	4014cf40 	call	4014cf4 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 401535c:	01400044 	movi	r5,1
 4015360:	280f883a 	mov	r7,r5
 4015364:	8009883a 	mov	r4,r16
 4015368:	01800144 	movi	r6,5
 401536c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 4015370:	014003c4 	movi	r5,15
 4015374:	280d883a 	mov	r6,r5
 4015378:	8009883a 	mov	r4,r16
 401537c:	01c00044 	movi	r7,1
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 4015380:	1022c03a 	cmpne	r17,r2,zero
        return_value = TSE_PHY_AN_NOT_COMPLETE;
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 4015384:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015388:	80800045 	stb	r2,1(r16)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 401538c:	8009883a 	mov	r4,r16
 4015390:	014003c4 	movi	r5,15
 4015394:	01800384 	movi	r6,14
 4015398:	01c00044 	movi	r7,1
 401539c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40153a0:	80800085 	stb	r2,2(r16)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 40153a4:	8009883a 	mov	r4,r16
 40153a8:	014003c4 	movi	r5,15
 40153ac:	01800344 	movi	r6,13
 40153b0:	01c00044 	movi	r7,1
 40153b4:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40153b8:	808000c5 	stb	r2,3(r16)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 40153bc:	8009883a 	mov	r4,r16
 40153c0:	014003c4 	movi	r5,15
 40153c4:	01800304 	movi	r6,12
 40153c8:	01c00044 	movi	r7,1
 40153cc:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 40153d0:	01400044 	movi	r5,1
 40153d4:	280f883a 	mov	r7,r5
 40153d8:	8009883a 	mov	r4,r16
 40153dc:	018003c4 	movi	r6,15
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 40153e0:	80800105 	stb	r2,4(r16)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 40153e4:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 40153e8:	01400044 	movi	r5,1
 40153ec:	280f883a 	mov	r7,r5
 40153f0:	8009883a 	mov	r4,r16
 40153f4:	01800384 	movi	r6,14
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 40153f8:	80800145 	stb	r2,5(r16)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 40153fc:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 4015400:	01400044 	movi	r5,1
 4015404:	280f883a 	mov	r7,r5
 4015408:	8009883a 	mov	r4,r16
 401540c:	01800344 	movi	r6,13
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 4015410:	80800185 	stb	r2,6(r16)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 4015414:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 4015418:	01400044 	movi	r5,1
 401541c:	280f883a 	mov	r7,r5
 4015420:	8009883a 	mov	r4,r16
 4015424:	01800284 	movi	r6,10
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 4015428:	808001c5 	stb	r2,7(r16)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 401542c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 4015430:	01400044 	movi	r5,1
 4015434:	280f883a 	mov	r7,r5
 4015438:	8009883a 	mov	r4,r16
 401543c:	01800244 	movi	r6,9
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 4015440:	80800205 	stb	r2,8(r16)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 4015444:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 4015448:	01400044 	movi	r5,1
 401544c:	280f883a 	mov	r7,r5
 4015450:	8009883a 	mov	r4,r16
 4015454:	01800304 	movi	r6,12
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 4015458:	80800245 	stb	r2,9(r16)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 401545c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 4015460:	01400044 	movi	r5,1
 4015464:	280f883a 	mov	r7,r5
 4015468:	8009883a 	mov	r4,r16
 401546c:	018002c4 	movi	r6,11
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 4015470:	80800285 	stb	r2,10(r16)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 4015474:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015478:	808002c5 	stb	r2,11(r16)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 401547c:	8009883a 	mov	r4,r16
 4015480:	01400284 	movi	r5,10
 4015484:	018002c4 	movi	r6,11
 4015488:	01c00044 	movi	r7,1
 401548c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 4015490:	01400284 	movi	r5,10
 4015494:	280d883a 	mov	r6,r5
 4015498:	8009883a 	mov	r4,r16
 401549c:	01c00044 	movi	r7,1
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 40154a0:	80800305 	stb	r2,12(r16)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 40154a4:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40154a8:	80800345 	stb	r2,13(r16)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 40154ac:	8009883a 	mov	r4,r16
 40154b0:	01400144 	movi	r5,5
 40154b4:	01800244 	movi	r6,9
 40154b8:	01c00044 	movi	r7,1
 40154bc:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40154c0:	80800385 	stb	r2,14(r16)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 40154c4:	8009883a 	mov	r4,r16
 40154c8:	01400144 	movi	r5,5
 40154cc:	01800204 	movi	r6,8
 40154d0:	01c00044 	movi	r7,1
 40154d4:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40154d8:	808003c5 	stb	r2,15(r16)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 40154dc:	8009883a 	mov	r4,r16
 40154e0:	01400144 	movi	r5,5
 40154e4:	018001c4 	movi	r6,7
 40154e8:	01c00044 	movi	r7,1
 40154ec:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40154f0:	80800405 	stb	r2,16(r16)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 40154f4:	8009883a 	mov	r4,r16
 40154f8:	01400144 	movi	r5,5
 40154fc:	01800184 	movi	r6,6
 4015500:	01c00044 	movi	r7,1
 4015504:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 4015508:	01400144 	movi	r5,5
 401550c:	8009883a 	mov	r4,r16
 4015510:	280d883a 	mov	r6,r5
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 4015514:	80800445 	stb	r2,17(r16)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 4015518:	01c00044 	movi	r7,1
 401551c:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4015520:	80800485 	stb	r2,18(r16)
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
    tse_dprintf(6, "\n");
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4015524:	8009883a 	mov	r4,r16
 4015528:	99403fcc 	andi	r5,r19,255
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 401552c:	8c7fffc4 	addi	r17,r17,-1
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
    tse_dprintf(6, "\n");
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4015530:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
    
}
 4015534:	8805883a 	mov	r2,r17
 4015538:	dfc00417 	ldw	ra,16(sp)
 401553c:	dcc00317 	ldw	r19,12(sp)
 4015540:	dc800217 	ldw	r18,8(sp)
 4015544:	dc400117 	ldw	r17,4(sp)
 4015548:	dc000017 	ldw	r16,0(sp)
 401554c:	dec00504 	addi	sp,sp,20
 4015550:	f800283a 	ret
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 4015554:	89403fcc 	andi	r5,r17,255
 4015558:	91803fcc 	andi	r6,r18,255
 401555c:	2940201c 	xori	r5,r5,128
 4015560:	3180201c 	xori	r6,r6,128
 4015564:	297fe004 	addi	r5,r5,-128
 4015568:	31bfe004 	addi	r6,r6,-128
 401556c:	010100f4 	movhi	r4,1027
 4015570:	210c7204 	addi	r4,r4,12744
 4015574:	4002ed40 	call	4002ed4 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4015578:	8009883a 	mov	r4,r16
 401557c:	99403fcc 	andi	r5,r19,255
 4015580:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
 4015584:	047fff84 	movi	r17,-2
 4015588:	003fea06 	br	4015534 <alt_tse_phy_get_cap+0x250>

0401558c <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 401558c:	defff504 	addi	sp,sp,-44
 4015590:	dd000515 	stw	r20,20(sp)
 4015594:	dfc00a15 	stw	ra,40(sp)
 4015598:	2029883a 	mov	r20,r4
 401559c:	df000915 	stw	fp,36(sp)
 40155a0:	ddc00815 	stw	r23,32(sp)
 40155a4:	dd800715 	stw	r22,28(sp)
 40155a8:	dd400615 	stw	r21,24(sp)
 40155ac:	dcc00415 	stw	r19,16(sp)
 40155b0:	dc800315 	stw	r18,12(sp)
 40155b4:	dc400215 	stw	r17,8(sp)
 40155b8:	dc000115 	stw	r16,4(sp)
	alt_u8 none_an_complete = 1;
    
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40155bc:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
 40155c0:	d8800005 	stb	r2,0(sp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 40155c4:	a2000003 	ldbu	r8,0(r20)
 40155c8:	40006626 	beq	r8,zero,4015764 <alt_tse_phy_get_common_speed+0x1d8>
 40155cc:	a023883a 	mov	r17,r20
 40155d0:	0025883a 	mov	r18,zero
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
 40155d4:	88800117 	ldw	r2,4(r17)
        
        /* run only if PHY connected */
        if(pphy) {
            alt_tse_phy_set_adv_1000(pphy, 1);
 40155d8:	01400044 	movi	r5,1
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 40155dc:	9165883a 	add	r18,r18,r5
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
 40155e0:	14000117 	ldw	r16,4(r2)
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 40155e4:	8c400104 	addi	r17,r17,4
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* run only if PHY connected */
        if(pphy) {
            alt_tse_phy_set_adv_1000(pphy, 1);
 40155e8:	8009883a 	mov	r4,r16
    for(i = 0; i < pmac_group->channel; i++) {
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* run only if PHY connected */
        if(pphy) {
 40155ec:	80000826 	beq	r16,zero,4015610 <alt_tse_phy_get_common_speed+0x84>
            alt_tse_phy_set_adv_1000(pphy, 1);
 40155f0:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 40155f4:	8009883a 	mov	r4,r16
 40155f8:	01400044 	movi	r5,1
 40155fc:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 4015600:	8009883a 	mov	r4,r16
 4015604:	01400044 	movi	r5,1
 4015608:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
 401560c:	a2000003 	ldbu	r8,0(r20)
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 4015610:	923ff016 	blt	r18,r8,40155d4 <alt_tse_phy_get_common_speed+0x48>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 4015614:	40005326 	beq	r8,zero,4015764 <alt_tse_phy_get_common_speed+0x1d8>
 4015618:	05800044 	movi	r22,1
 401561c:	b039883a 	mov	fp,r22
 4015620:	a025883a 	mov	r18,r20
 4015624:	0027883a 	mov	r19,zero
 4015628:	b02b883a 	mov	r21,r22
 401562c:	b02f883a 	mov	r23,r22
 4015630:	00002306 	br	40156c0 <alt_tse_phy_get_common_speed+0x134>
        }
        
        none_an_complete = 0;
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 4015634:	88c00003 	ldbu	r3,0(r17)
 4015638:	00800044 	movi	r2,1
 401563c:	18804426 	beq	r3,r2,4015750 <alt_tse_phy_get_common_speed+0x1c4>
            common_1000 = 0;
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 4015640:	00800084 	movi	r2,2
 4015644:	18804426 	beq	r3,r2,4015758 <alt_tse_phy_get_common_speed+0x1cc>
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 4015648:	80800183 	ldbu	r2,6(r16)
 401564c:	830003c3 	ldbu	r12,15(r16)
 4015650:	810001c3 	ldbu	r4,7(r16)
 4015654:	82c00403 	ldbu	r11,16(r16)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 4015658:	82000443 	ldbu	r8,17(r16)
 401565c:	83400483 	ldbu	r13,18(r16)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 4015660:	81c00143 	ldbu	r7,5(r16)
 4015664:	82800383 	ldbu	r10,14(r16)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 4015668:	80c00283 	ldbu	r3,10(r16)
 401566c:	814002c3 	ldbu	r5,11(r16)
            common_100 = 0;
            common_10 = 0;            
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 4015670:	818000c3 	ldbu	r6,3(r16)
 4015674:	82400303 	ldbu	r9,12(r16)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 4015678:	1304703a 	and	r2,r2,r12
 401567c:	22c8703a 	and	r4,r4,r11
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 4015680:	1a06703a 	and	r3,r3,r8
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 4015684:	1104b03a 	or	r2,r2,r4
 4015688:	3a8e703a 	and	r7,r7,r10
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 401568c:	2b4a703a 	and	r5,r5,r13
 4015690:	a2000003 	ldbu	r8,0(r20)
            common_100 = 0;
            common_10 = 0;            
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 4015694:	324c703a 	and	r6,r6,r9
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 4015698:	11c4b03a 	or	r2,r2,r7
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 401569c:	1946b03a 	or	r3,r3,r5
            common_100 = 0;
            common_10 = 0;            
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 40156a0:	356a703a 	and	r21,r6,r21
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 40156a4:	15ac703a 	and	r22,r2,r22
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 40156a8:	1f38703a 	and	fp,r3,fp
 40156ac:	002f883a 	mov	r23,zero
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 40156b0:	9cc00044 	addi	r19,r19,1
 40156b4:	94800104 	addi	r18,r18,4
 40156b8:	04000044 	movi	r16,1
 40156bc:	9a000b0e 	bge	r19,r8,40156ec <alt_tse_phy_get_common_speed+0x160>

        pmac_info = pmac_group->pmac_info[i];
 40156c0:	94400117 	ldw	r17,4(r18)
        pphy = pmac_info->pphy_info;
 40156c4:	8c000117 	ldw	r16,4(r17)
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 40156c8:	8009883a 	mov	r4,r16

        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
 40156cc:	803ff826 	beq	r16,zero,40156b0 <alt_tse_phy_get_common_speed+0x124>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 40156d0:	40152e40 	call	40152e4 <alt_tse_phy_get_cap>
 40156d4:	103fd726 	beq	r2,zero,4015634 <alt_tse_phy_get_common_speed+0xa8>
 40156d8:	a2000003 	ldbu	r8,0(r20)
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 40156dc:	9cc00044 	addi	r19,r19,1
 40156e0:	94800104 	addi	r18,r18,4
 40156e4:	04000044 	movi	r16,1
 40156e8:	9a3ff516 	blt	r19,r8,40156c0 <alt_tse_phy_get_common_speed+0x134>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 40156ec:	b8803fcc 	andi	r2,r23,255
 40156f0:	14001c26 	beq	r2,r16,4015764 <alt_tse_phy_get_common_speed+0x1d8>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
    }
    else if(common_1000) {
 40156f4:	a8803fcc 	andi	r2,r21,255
 40156f8:	10002326 	beq	r2,zero,4015788 <alt_tse_phy_get_common_speed+0x1fc>
        common_speed = TSE_PHY_SPEED_1000;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 40156fc:	d8800003 	ldbu	r2,0(sp)
 4015700:	010100f4 	movhi	r4,1027
 4015704:	210d0604 	addi	r4,r4,13336
 4015708:	0180fa04 	movi	r6,1000
 401570c:	11403fcc 	andi	r5,r2,255
 4015710:	2940201c 	xori	r5,r5,128
 4015714:	297fe004 	addi	r5,r5,-128
 4015718:	4002ed40 	call	4002ed4 <printf>
 401571c:	00800084 	movi	r2,2
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }

    return common_speed;
}
 4015720:	dfc00a17 	ldw	ra,40(sp)
 4015724:	df000917 	ldw	fp,36(sp)
 4015728:	ddc00817 	ldw	r23,32(sp)
 401572c:	dd800717 	ldw	r22,28(sp)
 4015730:	dd400617 	ldw	r21,24(sp)
 4015734:	dd000517 	ldw	r20,20(sp)
 4015738:	dcc00417 	ldw	r19,16(sp)
 401573c:	dc800317 	ldw	r18,12(sp)
 4015740:	dc400217 	ldw	r17,8(sp)
 4015744:	dc000117 	ldw	r16,4(sp)
 4015748:	dec00b04 	addi	sp,sp,44
 401574c:	f800283a 	ret
        }
        
        none_an_complete = 0;
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 4015750:	002b883a 	mov	r21,zero
 4015754:	003fbc06 	br	4015648 <alt_tse_phy_get_common_speed+0xbc>
            common_1000 = 0;
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 4015758:	002d883a 	mov	r22,zero
 401575c:	0039883a 	mov	fp,zero
 4015760:	003fb906 	br	4015648 <alt_tse_phy_get_common_speed+0xbc>
    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 4015764:	d8800003 	ldbu	r2,0(sp)
 4015768:	010100f4 	movhi	r4,1027
 401576c:	210cf404 	addi	r4,r4,13264
 4015770:	11403fcc 	andi	r5,r2,255
 4015774:	2940201c 	xori	r5,r5,128
 4015778:	297fe004 	addi	r5,r5,-128
 401577c:	4002ed40 	call	4002ed4 <printf>
 4015780:	00bfffc4 	movi	r2,-1
 4015784:	003fe606 	br	4015720 <alt_tse_phy_get_common_speed+0x194>
    }
    else if(common_1000) {
        common_speed = TSE_PHY_SPEED_1000;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
    }
    else if(common_100) {
 4015788:	b0803fcc 	andi	r2,r22,255
 401578c:	10000c1e 	bne	r2,zero,40157c0 <alt_tse_phy_get_common_speed+0x234>
        common_speed = TSE_PHY_SPEED_100;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
    }
    else if(common_10) {
 4015790:	e0803fcc 	andi	r2,fp,255
 4015794:	10001426 	beq	r2,zero,40157e8 <alt_tse_phy_get_common_speed+0x25c>
        common_speed = TSE_PHY_SPEED_10;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 4015798:	d8800003 	ldbu	r2,0(sp)
 401579c:	010100f4 	movhi	r4,1027
 40157a0:	210d0604 	addi	r4,r4,13336
 40157a4:	01800284 	movi	r6,10
 40157a8:	11403fcc 	andi	r5,r2,255
 40157ac:	2940201c 	xori	r5,r5,128
 40157b0:	297fe004 	addi	r5,r5,-128
 40157b4:	4002ed40 	call	4002ed4 <printf>
 40157b8:	0005883a 	mov	r2,zero
 40157bc:	003fd806 	br	4015720 <alt_tse_phy_get_common_speed+0x194>
        common_speed = TSE_PHY_SPEED_1000;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
    }
    else if(common_100) {
        common_speed = TSE_PHY_SPEED_100;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 40157c0:	d8800003 	ldbu	r2,0(sp)
 40157c4:	010100f4 	movhi	r4,1027
 40157c8:	210d0604 	addi	r4,r4,13336
 40157cc:	01801904 	movi	r6,100
 40157d0:	11403fcc 	andi	r5,r2,255
 40157d4:	2940201c 	xori	r5,r5,128
 40157d8:	297fe004 	addi	r5,r5,-128
 40157dc:	4002ed40 	call	4002ed4 <printf>
 40157e0:	8005883a 	mov	r2,r16
 40157e4:	003fce06 	br	4015720 <alt_tse_phy_get_common_speed+0x194>
        common_speed = TSE_PHY_SPEED_10;
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 40157e8:	d8800003 	ldbu	r2,0(sp)
 40157ec:	010100f4 	movhi	r4,1027
 40157f0:	210d1304 	addi	r4,r4,13388
 40157f4:	11403fcc 	andi	r5,r2,255
 40157f8:	2940201c 	xori	r5,r5,128
 40157fc:	297fe004 	addi	r5,r5,-128
 4015800:	4002ed40 	call	4002ed4 <printf>
 4015804:	00bfffc4 	movi	r2,-1
 4015808:	003fc506 	br	4015720 <alt_tse_phy_get_common_speed+0x194>

0401580c <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 401580c:	deffff04 	addi	sp,sp,-4
 4015810:	dfc00015 	stw	ra,0(sp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 4015814:	40143880 	call	4014388 <alt_tse_get_mac_info>
    return alt_tse_phy_get_common_speed(pmac_group);
 4015818:	11000317 	ldw	r4,12(r2)
}
 401581c:	dfc00017 	ldw	ra,0(sp)
 4015820:	dec00104 	addi	sp,sp,4
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
    return alt_tse_phy_get_common_speed(pmac_group);
 4015824:	401558c1 	jmpi	401558c <alt_tse_phy_get_common_speed>

04015828 <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 4015828:	defff904 	addi	sp,sp,-28
 401582c:	dc000015 	stw	r16,0(sp)
 4015830:	2021883a 	mov	r16,r4

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 4015834:	21000617 	ldw	r4,24(r4)
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 4015838:	dc400115 	stw	r17,4(sp)
 401583c:	dfc00615 	stw	ra,24(sp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 4015840:	24400317 	ldw	r17,12(r4)
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 4015844:	dd400515 	stw	r21,20(sp)
 4015848:	dd000415 	stw	r20,16(sp)
 401584c:	dcc00315 	stw	r19,12(sp)
 4015850:	2829883a 	mov	r20,r5
 4015854:	dc800215 	stw	r18,8(sp)
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015858:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 401585c:	8809883a 	mov	r4,r17
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015860:	1027883a 	mov	r19,r2
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 4015864:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4015868:	8009883a 	mov	r4,r16
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 401586c:	1023883a 	mov	r17,r2
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 4015870:	40144900 	call	4014490 <alt_tse_phy_rd_mdio_addr>
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4015874:	81400003 	ldbu	r5,0(r16)
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 4015878:	8c803fcc 	andi	r18,r17,255
 401587c:	9c403fcc 	andi	r17,r19,255
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4015880:	8009883a 	mov	r4,r16
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 4015884:	9480201c 	xori	r18,r18,128
 4015888:	8c40201c 	xori	r17,r17,128
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401588c:	102b883a 	mov	r21,r2
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 4015890:	94bfe004 	addi	r18,r18,-128
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 4015894:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 4015898:	8c7fe004 	addi	r17,r17,-128
 401589c:	880d883a 	mov	r6,r17
 40158a0:	900b883a 	mov	r5,r18
 40158a4:	010100f4 	movhi	r4,1027
 40158a8:	210d2004 	addi	r4,r4,13440
 40158ac:	4002ed40 	call	4002ed4 <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 40158b0:	01c00044 	movi	r7,1
 40158b4:	8009883a 	mov	r4,r16
 40158b8:	000b883a 	mov	r5,zero
 40158bc:	01800384 	movi	r6,14
 40158c0:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40158c4:	01400044 	movi	r5,1
 40158c8:	280f883a 	mov	r7,r5
 40158cc:	8009883a 	mov	r4,r16
 40158d0:	01800144 	movi	r6,5
 40158d4:	1000141e 	bne	r2,zero,4015928 <alt_tse_phy_check_link+0x100>
 40158d8:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 40158dc:	10001226 	beq	r2,zero,4015928 <alt_tse_phy_check_link+0x100>
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
	
            return TSE_PHY_AN_NOT_COMPLETE;
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 40158e0:	900b883a 	mov	r5,r18
 40158e4:	880d883a 	mov	r6,r17
 40158e8:	010100f4 	movhi	r4,1027
 40158ec:	210d4c04 	addi	r4,r4,13616
 40158f0:	4002ed40 	call	4002ed4 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 40158f4:	8009883a 	mov	r4,r16
 40158f8:	a9403fcc 	andi	r5,r21,255
 40158fc:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
 4015900:	0005883a 	mov	r2,zero
    
    return TSE_PHY_AN_COMPLETE; 
}
 4015904:	dfc00617 	ldw	ra,24(sp)
 4015908:	dd400517 	ldw	r21,20(sp)
 401590c:	dd000417 	ldw	r20,16(sp)
 4015910:	dcc00317 	ldw	r19,12(sp)
 4015914:	dc800217 	ldw	r18,8(sp)
 4015918:	dc400117 	ldw	r17,4(sp)
 401591c:	dc000017 	ldw	r16,0(sp)
 4015920:	dec00704 	addi	sp,sp,28
 4015924:	f800283a 	ret
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 4015928:	880d883a 	mov	r6,r17
 401592c:	900b883a 	mov	r5,r18
 4015930:	010100f4 	movhi	r4,1027
 4015934:	210d2b04 	addi	r4,r4,13484
 4015938:	4002ed40 	call	4002ed4 <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
 401593c:	8009883a 	mov	r4,r16
 4015940:	a00b883a 	mov	r5,r20
 4015944:	4014cf40 	call	4014cf4 <alt_tse_phy_restart_an>
 4015948:	1027883a 	mov	r19,r2
 401594c:	00bfffc4 	movi	r2,-1
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 4015950:	900b883a 	mov	r5,r18
 4015954:	880d883a 	mov	r6,r17
 4015958:	010100f4 	movhi	r4,1027
 401595c:	210d3f04 	addi	r4,r4,13564
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
 4015960:	98bfdf1e 	bne	r19,r2,40158e0 <alt_tse_phy_check_link+0xb8>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 4015964:	4002ed40 	call	4002ed4 <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 4015968:	8009883a 	mov	r4,r16
 401596c:	a9403fcc 	andi	r5,r21,255
 4015970:	40148580 	call	4014858 <alt_tse_phy_wr_mdio_addr>
 4015974:	9805883a 	mov	r2,r19
 4015978:	003fe206 	br	4015904 <alt_tse_phy_check_link+0xdc>

0401597c <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 401597c:	defffa04 	addi	sp,sp,-24
 4015980:	dc400115 	stw	r17,4(sp)
 4015984:	dc000015 	stw	r16,0(sp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 4015988:	24400317 	ldw	r17,12(r4)
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 401598c:	24000217 	ldw	r16,8(r4)
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 4015990:	dfc00515 	stw	ra,20(sp)
 4015994:	dcc00315 	stw	r19,12(sp)
 4015998:	dc800215 	stw	r18,8(sp)
 401599c:	dd000415 	stw	r20,16(sp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 40159a0:	84c00017 	ldw	r19,0(r16)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 40159a4:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40159a8:	8809883a 	mov	r4,r17

    if(psys->tse_pcs_ena) {
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 40159ac:	14803fcc 	andi	r18,r2,255
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40159b0:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>

    if(psys->tse_pcs_ena) {
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 40159b4:	14403fcc 	andi	r17,r2,255
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);

    if(psys->tse_pcs_ena) {
 40159b8:	808003c3 	ldbu	r2,15(r16)
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 40159bc:	9480201c 	xori	r18,r18,128
 40159c0:	8c40201c 	xori	r17,r17,128
 40159c4:	94bfe004 	addi	r18,r18,-128
 40159c8:	8c7fe004 	addi	r17,r17,-128
 40159cc:	010100f4 	movhi	r4,1027
 40159d0:	210d5704 	addi	r4,r4,13660
 40159d4:	880b883a 	mov	r5,r17
 40159d8:	900d883a 	mov	r6,r18
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);

    if(psys->tse_pcs_ena) {
 40159dc:	1000091e 	bne	r2,zero,4015a04 <alt_tse_phy_cfg_pcs+0x88>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
        }
    }
    
    return SUCCESS;
}
 40159e0:	0005883a 	mov	r2,zero
 40159e4:	dfc00517 	ldw	ra,20(sp)
 40159e8:	dd000417 	ldw	r20,16(sp)
 40159ec:	dcc00317 	ldw	r19,12(sp)
 40159f0:	dc800217 	ldw	r18,8(sp)
 40159f4:	dc400117 	ldw	r17,4(sp)
 40159f8:	dc000017 	ldw	r16,0(sp)
 40159fc:	dec00604 	addi	sp,sp,24
 4015a00:	f800283a 	ret
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);

    if(psys->tse_pcs_ena) {
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 4015a04:	4002ed40 	call	4002ed4 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 4015a08:	9d009437 	ldwio	r20,592(r19)
        
        if(psys->tse_pcs_sgmii) {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 4015a0c:	010100f4 	movhi	r4,1027
 4015a10:	210d6504 	addi	r4,r4,13716
    if(psys->tse_pcs_ena) {
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
        
        if(psys->tse_pcs_sgmii) {
 4015a14:	80800403 	ldbu	r2,16(r16)
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 4015a18:	880b883a 	mov	r5,r17
 4015a1c:	900d883a 	mov	r6,r18
    if(psys->tse_pcs_ena) {
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
        
        if(psys->tse_pcs_sgmii) {
 4015a20:	10000426 	beq	r2,zero,4015a34 <alt_tse_phy_cfg_pcs+0xb8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 4015a24:	4002ed40 	call	4002ed4 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 4015a28:	a0c000d4 	ori	r3,r20,3
 4015a2c:	98c09435 	stwio	r3,592(r19)
 4015a30:	003feb06 	br	40159e0 <alt_tse_phy_cfg_pcs+0x64>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 4015a34:	880b883a 	mov	r5,r17
 4015a38:	900d883a 	mov	r6,r18
 4015a3c:	010100f4 	movhi	r4,1027
 4015a40:	210d7104 	addi	r4,r4,13764
 4015a44:	4002ed40 	call	4002ed4 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 4015a48:	00ffff04 	movi	r3,-4
 4015a4c:	a0c6703a 	and	r3,r20,r3
 4015a50:	98c09435 	stwio	r3,592(r19)
 4015a54:	003fe206 	br	40159e0 <alt_tse_phy_cfg_pcs+0x64>

04015a58 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 4015a58:	defffa04 	addi	sp,sp,-24
 4015a5c:	dc400115 	stw	r17,4(sp)
 4015a60:	2023883a 	mov	r17,r4
 4015a64:	dd000415 	stw	r20,16(sp)
 4015a68:	dcc00315 	stw	r19,12(sp)
 4015a6c:	dfc00515 	stw	ra,20(sp)
 4015a70:	2827883a 	mov	r19,r5
 4015a74:	dc800215 	stw	r18,8(sp)
 4015a78:	dc000015 	stw	r16,0(sp)
    alt_tse_system_info *psys = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4015a7c:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 4015a80:	89400003 	ldbu	r5,0(r17)
    alt_tse_system_info *psys = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4015a84:	1029883a 	mov	r20,r2
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 4015a88:	28001d26 	beq	r5,zero,4015b00 <alt_tse_mac_associate_phy+0xa8>
        pmac_info = pmac_group->pmac_info[i];
 4015a8c:	8c800117 	ldw	r18,4(r17)
        psys = pmac_info->psys_info;
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 4015a90:	99800003 	ldbu	r6,0(r19)
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
        pmac_info = pmac_group->pmac_info[i];
        psys = pmac_info->psys_info;
 4015a94:	94000217 	ldw	r16,8(r18)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 4015a98:	80801017 	ldw	r2,64(r16)
 4015a9c:	11802826 	beq	r2,r6,4015b40 <alt_tse_mac_associate_phy+0xe8>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
	        sys_info_index = alt_tse_get_system_index(psys);
	        
            pmac_info->pphy_info = pphy;
            pphy->pmac_info = pmac_info;
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 4015aa0:	8807883a 	mov	r3,r17
 4015aa4:	0009883a 	mov	r4,zero
 4015aa8:	00000506 	br	4015ac0 <alt_tse_mac_associate_phy+0x68>
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
        pmac_info = pmac_group->pmac_info[i];
 4015aac:	1c800217 	ldw	r18,8(r3)
        psys = pmac_info->psys_info;
 4015ab0:	18c00104 	addi	r3,r3,4
 4015ab4:	94000217 	ldw	r16,8(r18)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 4015ab8:	80801017 	ldw	r2,64(r16)
 4015abc:	11802026 	beq	r2,r6,4015b40 <alt_tse_mac_associate_phy+0xe8>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 4015ac0:	21000044 	addi	r4,r4,1
 4015ac4:	217ff91e 	bne	r4,r5,4015aac <alt_tse_mac_associate_phy+0x54>
 4015ac8:	8809883a 	mov	r4,r17
 4015acc:	0007883a 	mov	r3,zero
 4015ad0:	01bfffc4 	movi	r6,-1
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
            pmac_info = pmac_group->pmac_info[i];
 4015ad4:	24800117 	ldw	r18,4(r4)
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
 4015ad8:	18c00044 	addi	r3,r3,1
 4015adc:	21000104 	addi	r4,r4,4
            pmac_info = pmac_group->pmac_info[i];
            psys = pmac_info->psys_info;
 4015ae0:	94000217 	ldw	r16,8(r18)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
 4015ae4:	80800517 	ldw	r2,20(r16)
 4015ae8:	10000426 	beq	r2,zero,4015afc <alt_tse_mac_associate_phy+0xa4>
 4015aec:	80800617 	ldw	r2,24(r16)
 4015af0:	10000226 	beq	r2,zero,4015afc <alt_tse_mac_associate_phy+0xa4>
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 4015af4:	80801017 	ldw	r2,64(r16)
 4015af8:	11802d26 	beq	r2,r6,4015bb0 <alt_tse_mac_associate_phy+0x158>
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
 4015afc:	197ff51e 	bne	r3,r5,4015ad4 <alt_tse_mac_associate_phy+0x7c>
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
    	pphy->pmac_info = 0;
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 4015b00:	a1403fcc 	andi	r5,r20,255
 4015b04:	2940201c 	xori	r5,r5,128
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
    	pphy->pmac_info = 0;
 4015b08:	98000615 	stw	zero,24(r19)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 4015b0c:	297fe004 	addi	r5,r5,-128
 4015b10:	010100f4 	movhi	r4,1027
 4015b14:	210d9e04 	addi	r4,r4,13944
 4015b18:	4002ed40 	call	4002ed4 <printf>
 4015b1c:	00bfffc4 	movi	r2,-1
        return_value = TSE_PHY_MAP_ERROR;
    }
    
    return return_value;
}
 4015b20:	dfc00517 	ldw	ra,20(sp)
 4015b24:	dd000417 	ldw	r20,16(sp)
 4015b28:	dcc00317 	ldw	r19,12(sp)
 4015b2c:	dc800217 	ldw	r18,8(sp)
 4015b30:	dc400117 	ldw	r17,4(sp)
 4015b34:	dc000017 	ldw	r16,0(sp)
 4015b38:	dec00604 	addi	sp,sp,24
 4015b3c:	f800283a 	ret
        pmac_info = pmac_group->pmac_info[i];
        psys = pmac_info->psys_info;
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015b40:	9009883a 	mov	r4,r18
 4015b44:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
	        sys_info_index = alt_tse_get_system_index(psys);
 4015b48:	8009883a 	mov	r4,r16
        pmac_info = pmac_group->pmac_info[i];
        psys = pmac_info->psys_info;
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015b4c:	1023883a 	mov	r17,r2
	        sys_info_index = alt_tse_get_system_index(psys);
 4015b50:	40142b80 	call	40142b8 <alt_tse_get_system_index>
	        
            pmac_info->pphy_info = pphy;
            pphy->pmac_info = pmac_info;
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 4015b54:	a1403fcc 	andi	r5,r20,255
 4015b58:	89803fcc 	andi	r6,r17,255
 4015b5c:	11c03fcc 	andi	r7,r2,255
 4015b60:	2940201c 	xori	r5,r5,128
 4015b64:	3180201c 	xori	r6,r6,128
 4015b68:	39c0201c 	xori	r7,r7,128
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
	        sys_info_index = alt_tse_get_system_index(psys);
	        
            pmac_info->pphy_info = pphy;
            pphy->pmac_info = pmac_info;
 4015b6c:	9c800615 	stw	r18,24(r19)
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
	        sys_info_index = alt_tse_get_system_index(psys);
	        
            pmac_info->pphy_info = pphy;
 4015b70:	94c00115 	stw	r19,4(r18)
            pphy->pmac_info = pmac_info;
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 4015b74:	297fe004 	addi	r5,r5,-128
 4015b78:	31bfe004 	addi	r6,r6,-128
 4015b7c:	39ffe004 	addi	r7,r7,-128
 4015b80:	010100f4 	movhi	r4,1027
 4015b84:	210d7d04 	addi	r4,r4,13812
 4015b88:	4002ed40 	call	4002ed4 <printf>
 4015b8c:	0005883a 	mov	r2,zero
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
        return_value = TSE_PHY_MAP_ERROR;
    }
    
    return return_value;
}
 4015b90:	dfc00517 	ldw	ra,20(sp)
 4015b94:	dd000417 	ldw	r20,16(sp)
 4015b98:	dcc00317 	ldw	r19,12(sp)
 4015b9c:	dc800217 	ldw	r18,8(sp)
 4015ba0:	dc400117 	ldw	r17,4(sp)
 4015ba4:	dc000017 	ldw	r16,0(sp)
 4015ba8:	dec00604 	addi	sp,sp,24
 4015bac:	f800283a 	ret
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015bb0:	9009883a 	mov	r4,r18
 4015bb4:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
                sys_info_index = alt_tse_get_system_index(psys);
 4015bb8:	8009883a 	mov	r4,r16
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4015bbc:	1023883a 	mov	r17,r2
                sys_info_index = alt_tse_get_system_index(psys);
 4015bc0:	40142b80 	call	40142b8 <alt_tse_get_system_index>
                
                pmac_info->pphy_info = pphy;
 4015bc4:	94c00115 	stw	r19,4(r18)
                pphy->pmac_info = pmac_info;
                psys->tse_phy_mdio_address = pphy->mdio_address;
 4015bc8:	98c00003 	ldbu	r3,0(r19)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 4015bcc:	a1403fcc 	andi	r5,r20,255
 4015bd0:	89803fcc 	andi	r6,r17,255
 4015bd4:	11c03fcc 	andi	r7,r2,255
 4015bd8:	2940201c 	xori	r5,r5,128
 4015bdc:	3180201c 	xori	r6,r6,128
 4015be0:	39c0201c 	xori	r7,r7,128
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
                sys_info_index = alt_tse_get_system_index(psys);
                
                pmac_info->pphy_info = pphy;
                pphy->pmac_info = pmac_info;
 4015be4:	9c800615 	stw	r18,24(r19)
                psys->tse_phy_mdio_address = pphy->mdio_address;
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 4015be8:	297fe004 	addi	r5,r5,-128
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
                sys_info_index = alt_tse_get_system_index(psys);
                
                pmac_info->pphy_info = pphy;
                pphy->pmac_info = pmac_info;
                psys->tse_phy_mdio_address = pphy->mdio_address;
 4015bec:	80c01015 	stw	r3,64(r16)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 4015bf0:	31bfe004 	addi	r6,r6,-128
 4015bf4:	39ffe004 	addi	r7,r7,-128
 4015bf8:	010100f4 	movhi	r4,1027
 4015bfc:	210d8d04 	addi	r4,r4,13876
 4015c00:	4002ed40 	call	4002ed4 <printf>
 4015c04:	0005883a 	mov	r2,zero
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
        return_value = TSE_PHY_MAP_ERROR;
    }
    
    return return_value;
}
 4015c08:	dfc00517 	ldw	ra,20(sp)
 4015c0c:	dd000417 	ldw	r20,16(sp)
 4015c10:	dcc00317 	ldw	r19,12(sp)
 4015c14:	dc800217 	ldw	r18,8(sp)
 4015c18:	dc400117 	ldw	r17,4(sp)
 4015c1c:	dc000017 	ldw	r16,0(sp)
 4015c20:	dec00604 	addi	sp,sp,24
 4015c24:	f800283a 	ret

04015c28 <alt_tse_mac_get_phy>:
    
    alt_tse_phy_info *pphy = 0;
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_system_info *psys = 0;
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4015c28:	20800117 	ldw	r2,4(r4)
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 4015c2c:	defff104 	addi	sp,sp,-60
 4015c30:	dd400a15 	stw	r21,40(sp)
    
    alt_tse_phy_info *pphy = 0;
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_system_info *psys = 0;
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4015c34:	10c00217 	ldw	r3,8(r2)
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 4015c38:	dd000915 	stw	r20,36(sp)
 4015c3c:	dfc00e15 	stw	ra,56(sp)
    
    alt_tse_phy_info *pphy = 0;
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_system_info *psys = 0;
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4015c40:	18c00017 	ldw	r3,0(r3)
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 4015c44:	df000d15 	stw	fp,52(sp)
 4015c48:	ddc00c15 	stw	r23,48(sp)
 4015c4c:	dd800b15 	stw	r22,44(sp)
 4015c50:	dcc00815 	stw	r19,32(sp)
 4015c54:	dc800715 	stw	r18,28(sp)
 4015c58:	dc400615 	stw	r17,24(sp)
 4015c5c:	dc000515 	stw	r16,20(sp)
 4015c60:	202b883a 	mov	r21,r4
    
    alt_tse_phy_info *pphy = 0;
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_system_info *psys = 0;
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4015c64:	d8c00115 	stw	r3,4(sp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4015c68:	1d001004 	addi	r20,r3,64
 4015c6c:	a0800037 	ldwio	r2,0(r20)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4015c70:	0027883a 	mov	r19,zero
    alt_tse_system_info *psys = 0;
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4015c74:	d8800415 	stw	r2,16(sp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4015c78:	d8000315 	stw	zero,12(sp)
 4015c7c:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
 4015c80:	1039883a 	mov	fp,r2
 4015c84:	d8800117 	ldw	r2,4(sp)
 4015c88:	d8000205 	stb	zero,8(sp)
 4015c8c:	1580a204 	addi	r22,r2,648
 4015c90:	15c0a304 	addi	r23,r2,652
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 4015c94:	a4c00035 	stwio	r19,0(r20)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 4015c98:	b4800037 	ldwio	r18,0(r22)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 4015c9c:	bc000037 	ldwio	r16,0(r23)
        
        /* PHY found */
        if (phyid != phyid2)
 4015ca0:	94002c26 	beq	r18,r16,4015d54 <alt_tse_mac_get_phy+0x12c>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 4015ca4:	01000704 	movi	r4,28
 4015ca8:	4001f4c0 	call	4001f4c <malloc>
 4015cac:	1023883a 	mov	r17,r2
            if(!pphy) {
 4015cb0:	10007626 	beq	r2,zero,4015e8c <alt_tse_mac_get_phy+0x264>
            
            /* store PHY address */
            pphy->mdio_address = phyadd;

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 4015cb4:	8005d2ba 	srai	r2,r16,10
 4015cb8:	900691ba 	slli	r3,r18,6
            model_number = (phyid2 >> 4) & 0x3f;
 4015cbc:	8009d13a 	srai	r4,r16,4
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 4015cc0:	d1e81303 	ldbu	r7,-24500(gp)
            
            /* store PHY address */
            pphy->mdio_address = phyadd;

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 4015cc4:	10800fcc 	andi	r2,r2,63
 4015cc8:	1886b03a 	or	r3,r3,r2
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
                return ALTERA_TSE_MALLOC_FAILED;
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 4015ccc:	8cc00005 	stb	r19,0(r17)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
            model_number = (phyid2 >> 4) & 0x3f;
 4015cd0:	21000fcc 	andi	r4,r4,63
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 4015cd4:	38000a26 	beq	r7,zero,4015d00 <alt_tse_mac_get_phy+0xd8>
 4015cd8:	21003fcc 	andi	r4,r4,255
 4015cdc:	000d883a 	mov	r6,zero
 4015ce0:	01410134 	movhi	r5,1028
 4015ce4:	294a9a04 	addi	r5,r5,10856
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 4015ce8:	2a000017 	ldw	r8,0(r5)
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 4015cec:	31800044 	addi	r6,r6,1
 4015cf0:	29400104 	addi	r5,r5,4
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 4015cf4:	40801417 	ldw	r2,80(r8)
 4015cf8:	18803526 	beq	r3,r2,4015dd0 <alt_tse_mac_get_phy+0x1a8>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 4015cfc:	39bffa1e 	bne	r7,r6,4015ce8 <alt_tse_mac_get_phy+0xc0>
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
                pphy->pphy_profile = 0;
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 4015d00:	e1803fcc 	andi	r6,fp,255
 4015d04:	3180201c 	xori	r6,r6,128
 4015d08:	980b883a 	mov	r5,r19
 4015d0c:	010100f4 	movhi	r4,1027
 4015d10:	210e1904 	addi	r4,r4,14436
 4015d14:	31bfe004 	addi	r6,r6,-128
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
                pphy->pphy_profile = 0;
 4015d18:	88000515 	stw	zero,20(r17)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 4015d1c:	4002ed40 	call	4002ed4 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 4015d20:	010100f4 	movhi	r4,1027
 4015d24:	210e2a04 	addi	r4,r4,14504
 4015d28:	4002fec0 	call	4002fec <puts>
                return_value++;
 4015d2c:	d8800317 	ldw	r2,12(sp)
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 4015d30:	a809883a 	mov	r4,r21
 4015d34:	880b883a 	mov	r5,r17
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
                pphy->pphy_profile = 0;
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
                return_value++;
 4015d38:	10800044 	addi	r2,r2,1
 4015d3c:	d8800315 	stw	r2,12(sp)
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 4015d40:	4015a580 	call	4015a58 <alt_tse_mac_associate_phy>
 4015d44:	10003126 	beq	r2,zero,4015e0c <alt_tse_mac_get_phy+0x1e4>
            	}
            }
            
            tse_dprintf(6, "\n");
	            
            phy_info_count++;
 4015d48:	d8800203 	ldbu	r2,8(sp)
 4015d4c:	10800044 	addi	r2,r2,1
 4015d50:	d8800205 	stb	r2,8(sp)
 4015d54:	9cc00044 	addi	r19,r19,1
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 4015d58:	00800804 	movi	r2,32
 4015d5c:	98bfcd1e 	bne	r19,r2,4015c94 <alt_tse_mac_get_phy+0x6c>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 4015d60:	d8800203 	ldbu	r2,8(sp)
 4015d64:	a9c00003 	ldbu	r7,0(r21)
 4015d68:	11803fcc 	andi	r6,r2,255
 4015d6c:	3180201c 	xori	r6,r6,128
 4015d70:	31bfe004 	addi	r6,r6,-128
 4015d74:	39800726 	beq	r7,r6,4015d94 <alt_tse_mac_get_phy+0x16c>
        if(phy_info_count == 0) {
 4015d78:	3000511e 	bne	r6,zero,4015ec0 <alt_tse_mac_get_phy+0x298>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 4015d7c:	e1403fcc 	andi	r5,fp,255
 4015d80:	2940201c 	xori	r5,r5,128
 4015d84:	297fe004 	addi	r5,r5,-128
 4015d88:	010100f4 	movhi	r4,1027
 4015d8c:	210dee04 	addi	r4,r4,14264
 4015d90:	4002ed40 	call	4002ed4 <printf>
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 4015d94:	d8800417 	ldw	r2,16(sp)
 4015d98:	a0800035 	stwio	r2,0(r20)
    
    return return_value;
}
 4015d9c:	d8800317 	ldw	r2,12(sp)
 4015da0:	dfc00e17 	ldw	ra,56(sp)
 4015da4:	df000d17 	ldw	fp,52(sp)
 4015da8:	ddc00c17 	ldw	r23,48(sp)
 4015dac:	dd800b17 	ldw	r22,44(sp)
 4015db0:	dd400a17 	ldw	r21,40(sp)
 4015db4:	dd000917 	ldw	r20,36(sp)
 4015db8:	dcc00817 	ldw	r19,32(sp)
 4015dbc:	dc800717 	ldw	r18,28(sp)
 4015dc0:	dc400617 	ldw	r17,24(sp)
 4015dc4:	dc000517 	ldw	r16,20(sp)
 4015dc8:	dec00f04 	addi	sp,sp,60
 4015dcc:	f800283a 	ret
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 4015dd0:	40801503 	ldbu	r2,84(r8)
 4015dd4:	20bfc91e 	bne	r4,r2,4015cfc <alt_tse_mac_get_phy+0xd4>
                {
                    pphy->pphy_profile = pphy_profiles[i];
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 4015dd8:	e1c03fcc 	andi	r7,fp,255
 4015ddc:	39c0201c 	xori	r7,r7,128
 4015de0:	400b883a 	mov	r5,r8
 4015de4:	010100f4 	movhi	r4,1027
 4015de8:	210dde04 	addi	r4,r4,14200
 4015dec:	980d883a 	mov	r6,r19
 4015df0:	39ffe004 	addi	r7,r7,-128
            for(i = 0; i < phy_profile_count; i++) {
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
                {
                    pphy->pphy_profile = pphy_profiles[i];
 4015df4:	8a000515 	stw	r8,20(r17)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 4015df8:	4002ed40 	call	4002ed4 <printf>
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 4015dfc:	a809883a 	mov	r4,r21
 4015e00:	880b883a 	mov	r5,r17
 4015e04:	4015a580 	call	4015a58 <alt_tse_mac_associate_phy>
 4015e08:	103fcf1e 	bne	r2,zero,4015d48 <alt_tse_mac_get_phy+0x120>
            	
            	pmac_info = pphy->pmac_info;
            	psys = pmac_info->psys_info;
 4015e0c:	88800617 	ldw	r2,24(r17)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 4015e10:	01800384 	movi	r6,14
 4015e14:	01c00044 	movi	r7,1
 4015e18:	000b883a 	mov	r5,zero
 4015e1c:	8809883a 	mov	r4,r17
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
            	
            	pmac_info = pphy->pmac_info;
            	psys = pmac_info->psys_info;
 4015e20:	14000217 	ldw	r16,8(r2)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 4015e24:	d8000015 	stw	zero,0(sp)
 4015e28:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
 4015e2c:	8809883a 	mov	r4,r17
 4015e30:	01400044 	movi	r5,1
 4015e34:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
 4015e38:	8809883a 	mov	r4,r17
 4015e3c:	01400044 	movi	r5,1
 4015e40:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
 4015e44:	8809883a 	mov	r4,r17
 4015e48:	01400044 	movi	r5,1
 4015e4c:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 4015e50:	8809883a 	mov	r4,r17
 4015e54:	014003f4 	movhi	r5,15
 4015e58:	29509004 	addi	r5,r5,16960
 4015e5c:	4014cf40 	call	4014cf4 <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
 4015e60:	88800517 	ldw	r2,20(r17)
 4015e64:	10000426 	beq	r2,zero,4015e78 <alt_tse_mac_get_phy+0x250>
		            if(pphy->pphy_profile->phy_cfg) {
 4015e68:	10801717 	ldw	r2,92(r2)
 4015e6c:	10000226 	beq	r2,zero,4015e78 <alt_tse_mac_get_phy+0x250>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
 4015e70:	d9000117 	ldw	r4,4(sp)
 4015e74:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
 4015e78:	80801117 	ldw	r2,68(r16)
 4015e7c:	103fb226 	beq	r2,zero,4015d48 <alt_tse_mac_get_phy+0x120>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
            		psys->tse_phy_cfg(pmac_group_base);
 4015e80:	d9000117 	ldw	r4,4(sp)
 4015e84:	103ee83a 	callr	r2
 4015e88:	003faf06 	br	4015d48 <alt_tse_mac_get_phy+0x120>
        /* PHY found */
        if (phyid != phyid2)
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
            if(!pphy) {
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 4015e8c:	d8800203 	ldbu	r2,8(sp)
 4015e90:	e1403fcc 	andi	r5,fp,255
 4015e94:	2940201c 	xori	r5,r5,128
 4015e98:	11803fcc 	andi	r6,r2,255
 4015e9c:	3180201c 	xori	r6,r6,128
 4015ea0:	297fe004 	addi	r5,r5,-128
 4015ea4:	31bfe004 	addi	r6,r6,-128
 4015ea8:	010100f4 	movhi	r4,1027
 4015eac:	210dcf04 	addi	r4,r4,14140
 4015eb0:	4002ed40 	call	4002ed4 <printf>
 4015eb4:	00bfffc4 	movi	r2,-1
 4015eb8:	d8800315 	stw	r2,12(sp)
 4015ebc:	003fb706 	br	4015d9c <alt_tse_mac_get_phy+0x174>
    if(pmac_group->channel != phy_info_count) {
        if(phy_info_count == 0) {
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 4015ec0:	e1403fcc 	andi	r5,fp,255
 4015ec4:	2940201c 	xori	r5,r5,128
 4015ec8:	297fe004 	addi	r5,r5,-128
 4015ecc:	010100f4 	movhi	r4,1027
 4015ed0:	210dfa04 	addi	r4,r4,14312
 4015ed4:	4002ed40 	call	4002ed4 <printf>
 4015ed8:	003fae06 	br	4015d94 <alt_tse_mac_get_phy+0x16c>

04015edc <alt_tse_mac_group_init>:

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 4015edc:	d1a02f03 	ldbu	r6,-32580(gp)
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 4015ee0:	defff904 	addi	sp,sp,-28
 4015ee4:	dfc00615 	stw	ra,24(sp)
 4015ee8:	dd000515 	stw	r20,20(sp)
 4015eec:	dcc00415 	stw	r19,16(sp)
 4015ef0:	dc800315 	stw	r18,12(sp)
 4015ef4:	dc400215 	stw	r17,8(sp)
 4015ef8:	dc000115 	stw	r16,4(sp)
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    alt_tse_system_info *psys = 0;

    /* reset number of MAC group */
    mac_group_count = 0;
 4015efc:	d0281345 	stb	zero,-24499(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 4015f00:	30005426 	beq	r6,zero,4016054 <alt_tse_mac_group_init+0x178>
 4015f04:	0029883a 	mov	r20,zero
 4015f08:	0025883a 	mov	r18,zero
 4015f0c:	0005883a 	mov	r2,zero
 4015f10:	04c10134 	movhi	r19,1028
 4015f14:	9ce97004 	addi	r19,r19,-23104
        psys = &tse_mac_device[i];
 4015f18:	10801224 	muli	r2,r2,72
 4015f1c:	14e3883a 	add	r17,r2,r19

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
 4015f20:	88c00517 	ldw	r3,20(r17)
 4015f24:	18004526 	beq	r3,zero,401603c <alt_tse_mac_group_init+0x160>
 4015f28:	88800617 	ldw	r2,24(r17)
 4015f2c:	10004326 	beq	r2,zero,401603c <alt_tse_mac_group_init+0x160>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 4015f30:	d1681343 	ldbu	r5,-24499(gp)
 4015f34:	89800017 	ldw	r6,0(r17)
 4015f38:	010100f4 	movhi	r4,1027
 4015f3c:	210e3704 	addi	r4,r4,14556
 4015f40:	4002ed40 	call	4002ed4 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 4015f44:	01000504 	movi	r4,20
 4015f48:	4001f4c0 	call	4001f4c <malloc>
 4015f4c:	1021883a 	mov	r16,r2
            if(!pmac_group) {
 4015f50:	10006326 	beq	r2,zero,40160e0 <alt_tse_mac_group_init+0x204>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
                return ALTERA_TSE_MALLOC_FAILED;
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 4015f54:	888002c3 	ldbu	r2,11(r17)
 4015f58:	10004026 	beq	r2,zero,401605c <alt_tse_mac_group_init+0x180>
                pmac_group->channel = psys->tse_num_of_channel;
 4015f5c:	88800303 	ldbu	r2,12(r17)
 4015f60:	80800005 	stb	r2,0(r16)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 4015f64:	81400003 	ldbu	r5,0(r16)
 4015f68:	28002726 	beq	r5,zero,4016008 <alt_tse_mac_group_init+0x12c>
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
            }
            else {
                pmac_group->channel = 1;
 4015f6c:	000d883a 	mov	r6,zero
 4015f70:	04400044 	movi	r17,1
 4015f74:	00000d06 	br	4015fac <alt_tse_mac_group_init+0xd0>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
                    if(pmac_info->psys_info->tse_maclite_gige) {
 4015f78:	18800283 	ldbu	r2,10(r3)
 4015f7c:	10001f26 	beq	r2,zero,4015ffc <alt_tse_mac_group_init+0x120>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 4015f80:	00800084 	movi	r2,2
 4015f84:	20800005 	stb	r2,0(r4)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 4015f88:	81400003 	ldbu	r5,0(r16)
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 4015f8c:	3185883a 	add	r2,r6,r6
 4015f90:	1085883a 	add	r2,r2,r2
 4015f94:	880d883a 	mov	r6,r17
 4015f98:	1405883a 	add	r2,r2,r16
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 4015f9c:	28c03fcc 	andi	r3,r5,255
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 4015fa0:	11000115 	stw	r4,4(r2)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 4015fa4:	8c400044 	addi	r17,r17,1
 4015fa8:	30c0170e 	bge	r6,r3,4016008 <alt_tse_mac_group_init+0x12c>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 4015fac:	01000404 	movi	r4,16
 4015fb0:	d9800015 	stw	r6,0(sp)
 4015fb4:	4001f4c0 	call	4001f4c <malloc>
                
                pmac_info->pmac_group = pmac_group;
                
                pmac_info->pphy_info = 0;
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 4015fb8:	d9800017 	ldw	r6,0(sp)
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 4015fbc:	1009883a 	mov	r4,r2
                
                pmac_info->pmac_group = pmac_group;
                
                pmac_info->pphy_info = 0;
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 4015fc0:	348b883a 	add	r5,r6,r18
 4015fc4:	28801224 	muli	r2,r5,72
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
                if(!pmac_info) {
 4015fc8:	20003826 	beq	r4,zero,40160ac <alt_tse_mac_group_init+0x1d0>
                
                pmac_info->pmac_group = pmac_group;
                
                pmac_info->pphy_info = 0;
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 4015fcc:	14c7883a 	add	r3,r2,r19
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
 4015fd0:	18800517 	ldw	r2,20(r3)
                if(!pmac_info) {
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
                    return ALTERA_TSE_MALLOC_FAILED;
                }
                
                pmac_info->pmac_group = pmac_group;
 4015fd4:	24000315 	stw	r16,12(r4)
                
                pmac_info->pphy_info = 0;
 4015fd8:	20000115 	stw	zero,4(r4)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 4015fdc:	20c00215 	stw	r3,8(r4)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
 4015fe0:	10002326 	beq	r2,zero,4016070 <alt_tse_mac_group_init+0x194>
 4015fe4:	18800617 	ldw	r2,24(r3)
 4015fe8:	10002126 	beq	r2,zero,4016070 <alt_tse_mac_group_init+0x194>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 4015fec:	18800243 	ldbu	r2,9(r3)
 4015ff0:	103fe11e 	bne	r2,zero,4015f78 <alt_tse_mac_group_init+0x9c>
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 4015ff4:	20000005 	stb	zero,0(r4)
 4015ff8:	003fe306 	br	4015f88 <alt_tse_mac_group_init+0xac>
                if(pmac_info->psys_info->tse_en_maclite) {
                    if(pmac_info->psys_info->tse_maclite_gige) {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 4015ffc:	00800044 	movi	r2,1
 4016000:	20800005 	stb	r2,0(r4)
 4016004:	003fe006 	br	4015f88 <alt_tse_mac_group_init+0xac>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 4016008:	d1281343 	ldbu	r4,-24499(gp)
 401600c:	00c10134 	movhi	r3,1028
 4016010:	18ca9604 	addi	r3,r3,10840
 4016014:	d1a02f03 	ldbu	r6,-32580(gp)
 4016018:	20803fcc 	andi	r2,r4,255
 401601c:	1085883a 	add	r2,r2,r2
 4016020:	1085883a 	add	r2,r2,r2
 4016024:	10c5883a 	add	r2,r2,r3
            
            mac_group_count++;

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 4016028:	a14b883a 	add	r5,r20,r5
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
            
            mac_group_count++;
 401602c:	21000044 	addi	r4,r4,1
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 4016030:	14000015 	stw	r16,0(r2)
            
            mac_group_count++;
 4016034:	d1281345 	stb	r4,-24499(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 4016038:	2d3fffc4 	addi	r20,r5,-1

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 401603c:	a5000044 	addi	r20,r20,1
 4016040:	a0803fcc 	andi	r2,r20,255
 4016044:	1080201c 	xori	r2,r2,128
 4016048:	10bfe004 	addi	r2,r2,-128
 401604c:	1025883a 	mov	r18,r2
 4016050:	11bfb116 	blt	r2,r6,4015f18 <alt_tse_mac_group_init+0x3c>
 4016054:	0005883a 	mov	r2,zero
 4016058:	00000906 	br	4016080 <alt_tse_mac_group_init+0x1a4>
                pmac_group->channel = psys->tse_num_of_channel;
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
            }
            else if(psys->tse_mdio_shared) {
 401605c:	88800343 	ldbu	r2,13(r17)
 4016060:	10000f1e 	bne	r2,zero,40160a0 <alt_tse_mac_group_init+0x1c4>
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
            }
            else {
                pmac_group->channel = 1;
 4016064:	00800044 	movi	r2,1
 4016068:	80800005 	stb	r2,0(r16)
 401606c:	003fbf06 	br	4015f6c <alt_tse_mac_group_init+0x90>
                
                pmac_info->psys_info = &tse_mac_device[i + j];
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 4016070:	010100f4 	movhi	r4,1027
 4016074:	210e6304 	addi	r4,r4,14732
 4016078:	4002ed40 	call	4002ed4 <printf>
 401607c:	00bfffc4 	movi	r2,-1
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
}
 4016080:	dfc00617 	ldw	ra,24(sp)
 4016084:	dd000517 	ldw	r20,20(sp)
 4016088:	dcc00417 	ldw	r19,16(sp)
 401608c:	dc800317 	ldw	r18,12(sp)
 4016090:	dc400217 	ldw	r17,8(sp)
 4016094:	dc000117 	ldw	r16,4(sp)
 4016098:	dec00704 	addi	sp,sp,28
 401609c:	f800283a 	ret
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
            }
            else if(psys->tse_mdio_shared) {
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 40160a0:	88800383 	ldbu	r2,14(r17)
 40160a4:	80800005 	stb	r2,0(r16)
 40160a8:	003fae06 	br	4015f64 <alt_tse_mac_group_init+0x88>
            
            for(j = 0; j < pmac_group->channel; j++) {
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
                if(!pmac_info) {
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 40160ac:	d1681343 	ldbu	r5,-24499(gp)
 40160b0:	010100f4 	movhi	r4,1027
 40160b4:	210e5104 	addi	r4,r4,14660
 40160b8:	4002ed40 	call	4002ed4 <printf>
 40160bc:	00bfffc4 	movi	r2,-1
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
}
 40160c0:	dfc00617 	ldw	ra,24(sp)
 40160c4:	dd000517 	ldw	r20,20(sp)
 40160c8:	dcc00417 	ldw	r19,16(sp)
 40160cc:	dc800317 	ldw	r18,12(sp)
 40160d0:	dc400217 	ldw	r17,8(sp)
 40160d4:	dc000117 	ldw	r16,4(sp)
 40160d8:	dec00704 	addi	sp,sp,28
 40160dc:	f800283a 	ret
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
            if(!pmac_group) {
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 40160e0:	d1681343 	ldbu	r5,-24499(gp)
 40160e4:	010100f4 	movhi	r4,1027
 40160e8:	210e4304 	addi	r4,r4,14604
 40160ec:	4002ed40 	call	4002ed4 <printf>
 40160f0:	00bfffc4 	movi	r2,-1
 40160f4:	003fe206 	br	4016080 <alt_tse_mac_group_init+0x1a4>

040160f8 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
 40160f8:	defff504 	addi	sp,sp,-44
 40160fc:	dc400215 	stw	r17,8(sp)
 4016100:	dfc00a15 	stw	ra,40(sp)
 4016104:	df000915 	stw	fp,36(sp)
 4016108:	ddc00815 	stw	r23,32(sp)
 401610c:	dd800715 	stw	r22,28(sp)
 4016110:	dd400615 	stw	r21,24(sp)
 4016114:	dd000515 	stw	r20,20(sp)
 4016118:	dcc00415 	stw	r19,16(sp)
 401611c:	dc800315 	stw	r18,12(sp)
 4016120:	dc000115 	stw	r16,4(sp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
 4016124:	20800303 	ldbu	r2,12(r4)
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
 4016128:	2023883a 	mov	r17,r4
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
 401612c:	1000a026 	beq	r2,zero,40163b0 <alt_tse_system_add_sys+0x2b8>
		loop_end = 1;
	}
	else if(pmac->tse_num_of_channel > 0) {
		loop_end = pmac->tse_num_of_channel; 
 4016130:	d8800015 	stw	r2,0(sp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
 4016134:	1000a126 	beq	r2,zero,40163bc <alt_tse_system_add_sys+0x2c4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 4016138:	d0e813c7 	ldb	r3,-24497(gp)
 401613c:	008000c4 	movi	r2,3
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
		}
		
		/* Point to next structure */
		psgdma++;
 4016140:	2827883a 	mov	r19,r5
 4016144:	302d883a 	mov	r22,r6
 4016148:	3825883a 	mov	r18,r7
 401614c:	dd400b17 	ldw	r21,44(sp)
 4016150:	0039883a 	mov	fp,zero
 4016154:	002f883a 	mov	r23,zero
	}

	for(i = 0; i < loop_end; i++) {
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 4016158:	10c07616 	blt	r2,r3,4016334 <alt_tse_system_add_sys+0x23c>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 401615c:	18c01224 	muli	r3,r3,72
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
 4016160:	8900010b 	ldhu	r4,4(r17)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 4016164:	01410134 	movhi	r5,1028
 4016168:	29697004 	addi	r5,r5,-23104
 401616c:	1961883a 	add	r16,r3,r5
 4016170:	88800017 	ldw	r2,0(r17)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
 4016174:	8100010d 	sth	r4,4(r16)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
 4016178:	88c0018b 	ldhu	r3,6(r17)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 401617c:	15c5883a 	add	r2,r2,r23
 4016180:	80800015 	stw	r2,0(r16)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
 4016184:	80c0018d 	sth	r3,6(r16)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
 4016188:	88800203 	ldbu	r2,8(r17)
 401618c:	81000204 	addi	r4,r16,8
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
 4016190:	81400304 	addi	r5,r16,12
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
 4016194:	80800205 	stb	r2,8(r16)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
 4016198:	88c00243 	ldbu	r3,9(r17)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 401619c:	05010134 	movhi	r20,1028
 40161a0:	a5297004 	addi	r20,r20,-23104
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
 40161a4:	20c00045 	stb	r3,1(r4)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
 40161a8:	88800283 	ldbu	r2,10(r17)
 40161ac:	20800085 	stb	r2,2(r4)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
 40161b0:	88c002c3 	ldbu	r3,11(r17)
 40161b4:	20c000c5 	stb	r3,3(r4)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
 40161b8:	88800303 	ldbu	r2,12(r17)
 40161bc:	80800305 	stb	r2,12(r16)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
 40161c0:	88c00343 	ldbu	r3,13(r17)
 40161c4:	28c00045 	stb	r3,1(r5)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
 40161c8:	88800383 	ldbu	r2,14(r17)
 40161cc:	28800085 	stb	r2,2(r5)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
 40161d0:	88c003c3 	ldbu	r3,15(r17)
 40161d4:	28c000c5 	stb	r3,3(r5)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
 40161d8:	88800403 	ldbu	r2,16(r17)
 40161dc:	80800405 	stb	r2,16(r16)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
 40161e0:	98008326 	beq	r19,zero,40163f0 <alt_tse_system_add_sys+0x2f8>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
 40161e4:	99000017 	ldw	r4,0(r19)
 40161e8:	400472c0 	call	400472c <strlen>
 40161ec:	11000044 	addi	r4,r2,1
 40161f0:	4001f4c0 	call	4001f4c <malloc>
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
 40161f4:	d16813c7 	ldb	r5,-24497(gp)
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
 40161f8:	80800515 	stw	r2,20(r16)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
 40161fc:	28801224 	muli	r2,r5,72
 4016200:	1505883a 	add	r2,r2,r20
 4016204:	11000517 	ldw	r4,20(r2)
 4016208:	20008226 	beq	r4,zero,4016414 <alt_tse_system_add_sys+0x31c>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
	        return ALTERA_TSE_MALLOC_FAILED;
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
 401620c:	99400017 	ldw	r5,0(r19)
 4016210:	4030a6c0 	call	4030a6c <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 4016214:	99000117 	ldw	r4,4(r19)
 4016218:	d42813c7 	ldb	r16,-24497(gp)
 401621c:	400472c0 	call	400472c <strlen>
 4016220:	11000044 	addi	r4,r2,1
 4016224:	4001f4c0 	call	4001f4c <malloc>
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 4016228:	d16813c7 	ldb	r5,-24497(gp)
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
	        return ALTERA_TSE_MALLOC_FAILED;
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 401622c:	84001224 	muli	r16,r16,72
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 4016230:	28c01224 	muli	r3,r5,72
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
	        return ALTERA_TSE_MALLOC_FAILED;
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 4016234:	8521883a 	add	r16,r16,r20
 4016238:	80800615 	stw	r2,24(r16)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 401623c:	1d07883a 	add	r3,r3,r20
 4016240:	19000617 	ldw	r4,24(r3)
 4016244:	20007826 	beq	r4,zero,4016428 <alt_tse_system_add_sys+0x330>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
	        return ALTERA_TSE_MALLOC_FAILED;
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
 4016248:	99400117 	ldw	r5,4(r19)
 401624c:	4030a6c0 	call	4030a6c <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
 4016250:	d1a813c3 	ldbu	r6,-24497(gp)
 4016254:	98c0020b 	ldhu	r3,8(r19)
 4016258:	30803fcc 	andi	r2,r6,255
 401625c:	1080201c 	xori	r2,r2,128
 4016260:	10bfe004 	addi	r2,r2,-128
 4016264:	11401224 	muli	r5,r2,72
 4016268:	2d09883a 	add	r4,r5,r20
 401626c:	20c0070d 	sth	r3,28(r4)
 4016270:	20c00704 	addi	r3,r4,28
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
 4016274:	b0004b26 	beq	r22,zero,40163a4 <alt_tse_system_add_sys+0x2ac>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
 4016278:	b0800003 	ldbu	r2,0(r22)
 401627c:	18800085 	stb	r2,2(r3)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
 4016280:	b0c00117 	ldw	r3,4(r22)
 4016284:	20c00815 	stw	r3,32(r4)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
 4016288:	90003b26 	beq	r18,zero,4016378 <alt_tse_system_add_sys+0x280>
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 401628c:	90c00003 	ldbu	r3,0(r18)
 4016290:	00810134 	movhi	r2,1028
 4016294:	10a97004 	addi	r2,r2,-23104
 4016298:	2889883a 	add	r4,r5,r2
 401629c:	20c00905 	stb	r3,36(r4)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
 40162a0:	90800117 	ldw	r2,4(r18)
 40162a4:	20800a15 	stw	r2,40(r4)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
 40162a8:	90c00217 	ldw	r3,8(r18)
 40162ac:	20c00b15 	stw	r3,44(r4)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 40162b0:	90800317 	ldw	r2,12(r18)
 40162b4:	20800c15 	stw	r2,48(r4)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
 40162b8:	90c00417 	ldw	r3,16(r18)
 40162bc:	20c00d15 	stw	r3,52(r4)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
 40162c0:	90800517 	ldw	r2,20(r18)
 40162c4:	20800e15 	stw	r2,56(r4)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 40162c8:	90c00617 	ldw	r3,24(r18)
 40162cc:	20c00f15 	stw	r3,60(r4)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
 40162d0:	a8002226 	beq	r21,zero,401635c <alt_tse_system_add_sys+0x264>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
 40162d4:	a8800017 	ldw	r2,0(r21)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
 40162d8:	a9000117 	ldw	r4,4(r21)
		if(pphy == 0) {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
 40162dc:	01c10134 	movhi	r7,1028
 40162e0:	39e97004 	addi	r7,r7,-23104
 40162e4:	29c7883a 	add	r3,r5,r7
 40162e8:	18801015 	stw	r2,64(r3)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
 40162ec:	19001115 	stw	r4,68(r3)
		}
		
		/* Point to next structure */
		psgdma++;
		if(pmem) pmem++;
 40162f0:	b0000126 	beq	r22,zero,40162f8 <alt_tse_system_add_sys+0x200>
 40162f4:	b5800204 	addi	r22,r22,8
		if(pfifo) pfifo++;
 40162f8:	90000126 	beq	r18,zero,4016300 <alt_tse_system_add_sys+0x208>
 40162fc:	94800704 	addi	r18,r18,28
		if(pphy) pphy++;
 4016300:	a8000126 	beq	r21,zero,4016308 <alt_tse_system_add_sys+0x210>
 4016304:	ad400204 	addi	r21,r21,8
		
		tse_system_count++;
 4016308:	30800044 	addi	r2,r6,1
		max_mac_system = tse_system_count;
 401630c:	d0a02f05 	stb	r2,-32580(gp)
		psgdma++;
		if(pmem) pmem++;
		if(pfifo) pfifo++;
		if(pphy) pphy++;
		
		tse_system_count++;
 4016310:	d0a813c5 	stb	r2,-24497(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
 4016314:	d8800017 	ldw	r2,0(sp)
 4016318:	e7000044 	addi	fp,fp,1
 401631c:	bdc10004 	addi	r23,r23,1024
 4016320:	e080260e 	bge	fp,r2,40163bc <alt_tse_system_add_sys+0x2c4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 4016324:	d0e813c7 	ldb	r3,-24497(gp)
 4016328:	008000c4 	movi	r2,3
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
		}
		
		/* Point to next structure */
		psgdma++;
 401632c:	9cc00304 	addi	r19,r19,12
	}

	for(i = 0; i < loop_end; i++) {
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 4016330:	10ff8a0e 	bge	r2,r3,401615c <alt_tse_system_add_sys+0x64>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 4016334:	010100f4 	movhi	r4,1027
 4016338:	210e7204 	addi	r4,r4,14792
 401633c:	4002fec0 	call	4002fec <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 4016340:	d1a813c7 	ldb	r6,-24497(gp)
 4016344:	010100f4 	movhi	r4,1027
 4016348:	210e8204 	addi	r4,r4,14856
 401634c:	01400104 	movi	r5,4
 4016350:	4002ed40 	call	4002ed4 <printf>
 4016354:	d0e813c7 	ldb	r3,-24497(gp)
 4016358:	003f8006 	br	401615c <alt_tse_system_add_sys+0x64>
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
 401635c:	01c10134 	movhi	r7,1028
 4016360:	39e97004 	addi	r7,r7,-23104
 4016364:	29c7883a 	add	r3,r5,r7
 4016368:	00bfffc4 	movi	r2,-1
 401636c:	18801015 	stw	r2,64(r3)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
 4016370:	18001115 	stw	zero,68(r3)
 4016374:	003fde06 	br	40162f0 <alt_tse_system_add_sys+0x1f8>
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 4016378:	01c10134 	movhi	r7,1028
 401637c:	39e97004 	addi	r7,r7,-23104
 4016380:	29c5883a 	add	r2,r5,r7
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 4016384:	10000f15 	stw	zero,60(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 4016388:	10000905 	stb	zero,36(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
 401638c:	10000a15 	stw	zero,40(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
 4016390:	10000b15 	stw	zero,44(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 4016394:	10000c15 	stw	zero,48(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
 4016398:	10000d15 	stw	zero,52(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
 401639c:	10000e15 	stw	zero,56(r2)
 40163a0:	003fcb06 	br	40162d0 <alt_tse_system_add_sys+0x1d8>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
 40163a4:	18000085 	stb	zero,2(r3)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
 40163a8:	20000815 	stw	zero,32(r4)
 40163ac:	003fb606 	br	4016288 <alt_tse_system_add_sys+0x190>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
		}
		
		/* Point to next structure */
		psgdma++;
 40163b0:	00c00044 	movi	r3,1
 40163b4:	d8c00015 	stw	r3,0(sp)
 40163b8:	003f5f06 	br	4016138 <alt_tse_system_add_sys+0x40>
 40163bc:	0005883a 	mov	r2,zero
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
	
}
 40163c0:	dfc00a17 	ldw	ra,40(sp)
 40163c4:	df000917 	ldw	fp,36(sp)
 40163c8:	ddc00817 	ldw	r23,32(sp)
 40163cc:	dd800717 	ldw	r22,28(sp)
 40163d0:	dd400617 	ldw	r21,24(sp)
 40163d4:	dd000517 	ldw	r20,20(sp)
 40163d8:	dcc00417 	ldw	r19,16(sp)
 40163dc:	dc800317 	ldw	r18,12(sp)
 40163e0:	dc400217 	ldw	r17,8(sp)
 40163e4:	dc000117 	ldw	r16,4(sp)
 40163e8:	dec00b04 	addi	sp,sp,44
 40163ec:	f800283a 	ret
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
 40163f0:	010100f4 	movhi	r4,1027
 40163f4:	210e9104 	addi	r4,r4,14916
 40163f8:	4002fec0 	call	4002fec <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 40163fc:	d16813c7 	ldb	r5,-24497(gp)
 4016400:	010100f4 	movhi	r4,1027
 4016404:	210e9c04 	addi	r4,r4,14960
 4016408:	4002ed40 	call	4002ed4 <printf>
 401640c:	00bfffc4 	movi	r2,-1
 4016410:	003feb06 	br	40163c0 <alt_tse_system_add_sys+0x2c8>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
 4016414:	010100f4 	movhi	r4,1027
 4016418:	210eb404 	addi	r4,r4,15056
 401641c:	4002ed40 	call	4002ed4 <printf>
 4016420:	00bfffc4 	movi	r2,-1
 4016424:	003fe606 	br	40163c0 <alt_tse_system_add_sys+0x2c8>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
 4016428:	010100f4 	movhi	r4,1027
 401642c:	210ec704 	addi	r4,r4,15132
 4016430:	4002ed40 	call	4002ed4 <printf>
 4016434:	00bfffc4 	movi	r2,-1
 4016438:	003fe106 	br	40163c0 <alt_tse_system_add_sys+0x2c8>

0401643c <alt_tse_phy_add_profile>:
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 401643c:	d1e81303 	ldbu	r7,-24500(gp)
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 4016440:	defffa04 	addi	sp,sp,-24
 4016444:	dc000015 	stw	r16,0(sp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 4016448:	3c003fcc 	andi	r16,r7,255
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 401644c:	dcc00315 	stw	r19,12(sp)
 4016450:	dfc00515 	stw	ra,20(sp)
 4016454:	dd000415 	stw	r20,16(sp)
 4016458:	dc800215 	stw	r18,8(sp)
 401645c:	dc400115 	stw	r17,4(sp)
 4016460:	2027883a 	mov	r19,r4
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 4016464:	80003f26 	beq	r16,zero,4016564 <alt_tse_phy_add_profile+0x128>
 4016468:	05010134 	movhi	r20,1028
 401646c:	a50a9a04 	addi	r20,r20,10856
 4016470:	0025883a 	mov	r18,zero
 4016474:	a023883a 	mov	r17,r20
 4016478:	00000206 	br	4016484 <alt_tse_phy_add_profile+0x48>
 401647c:	3c003fcc 	andi	r16,r7,255
 4016480:	9400130e 	bge	r18,r16,40164d0 <alt_tse_phy_add_profile+0x94>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 4016484:	88c00017 	ldw	r3,0(r17)
 4016488:	98801417 	ldw	r2,80(r19)
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 401648c:	94800044 	addi	r18,r18,1
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 4016490:	19401417 	ldw	r5,80(r3)
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 4016494:	8c400104 	addi	r17,r17,4
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 4016498:	28bff81e 	bne	r5,r2,401647c <alt_tse_phy_add_profile+0x40>
 401649c:	18801503 	ldbu	r2,84(r3)
 40164a0:	98c01503 	ldbu	r3,84(r19)
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 40164a4:	010100f4 	movhi	r4,1027
 40164a8:	210eda04 	addi	r4,r4,15208
 40164ac:	100d883a 	mov	r6,r2
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 40164b0:	10fff21e 	bne	r2,r3,401647c <alt_tse_phy_add_profile+0x40>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 40164b4:	4002ed40 	call	4002ed4 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 40164b8:	010100f4 	movhi	r4,1027
 40164bc:	210eee04 	addi	r4,r4,15288
 40164c0:	4002fec0 	call	4002fec <puts>
 40164c4:	d1e81303 	ldbu	r7,-24500(gp)
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 40164c8:	3c003fcc 	andi	r16,r7,255
 40164cc:	943fed16 	blt	r18,r16,4016484 <alt_tse_phy_add_profile+0x48>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 40164d0:	01001904 	movi	r4,100
 40164d4:	4001f4c0 	call	4001f4c <malloc>
    if(!pphy_profiles[phy_profile_count]) {
 40164d8:	d1681303 	ldbu	r5,-24500(gp)
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 40164dc:	8407883a 	add	r3,r16,r16
 40164e0:	18c7883a 	add	r3,r3,r3
    if(!pphy_profiles[phy_profile_count]) {
 40164e4:	2949883a 	add	r4,r5,r5
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 40164e8:	1d07883a 	add	r3,r3,r20
    if(!pphy_profiles[phy_profile_count]) {
 40164ec:	2109883a 	add	r4,r4,r4
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 40164f0:	18800015 	stw	r2,0(r3)
    if(!pphy_profiles[phy_profile_count]) {
 40164f4:	2509883a 	add	r4,r4,r20
 40164f8:	21000017 	ldw	r4,0(r4)
 40164fc:	20001c26 	beq	r4,zero,4016570 <alt_tse_phy_add_profile+0x134>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
        return ALTERA_TSE_MALLOC_FAILED;
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 4016500:	980b883a 	mov	r5,r19
 4016504:	01801904 	movi	r6,100
 4016508:	40096480 	call	4009648 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 401650c:	d0e81303 	ldbu	r3,-24500(gp)
 4016510:	00810134 	movhi	r2,1028
 4016514:	108a9a04 	addi	r2,r2,10856
 4016518:	980b883a 	mov	r5,r19
 401651c:	18c7883a 	add	r3,r3,r3
 4016520:	18c7883a 	add	r3,r3,r3
 4016524:	1887883a 	add	r3,r3,r2
 4016528:	19000017 	ldw	r4,0(r3)
 401652c:	4030a6c0 	call	4030a6c <strcpy>
    
    phy_profile_count++;
 4016530:	d0e81303 	ldbu	r3,-24500(gp)
 4016534:	18c00044 	addi	r3,r3,1
    
    return phy_profile_count - 1;
 4016538:	18803fcc 	andi	r2,r3,255

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
    
    phy_profile_count++;
 401653c:	d0e81305 	stb	r3,-24500(gp)
    
    return phy_profile_count - 1;
 4016540:	10bfffc4 	addi	r2,r2,-1
}
 4016544:	dfc00517 	ldw	ra,20(sp)
 4016548:	dd000417 	ldw	r20,16(sp)
 401654c:	dcc00317 	ldw	r19,12(sp)
 4016550:	dc800217 	ldw	r18,8(sp)
 4016554:	dc400117 	ldw	r17,4(sp)
 4016558:	dc000017 	ldw	r16,0(sp)
 401655c:	dec00604 	addi	sp,sp,24
 4016560:	f800283a 	ret
 4016564:	05010134 	movhi	r20,1028
 4016568:	a50a9a04 	addi	r20,r20,10856
 401656c:	003fd806 	br	40164d0 <alt_tse_phy_add_profile+0x94>
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
    if(!pphy_profiles[phy_profile_count]) {
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 4016570:	010100f4 	movhi	r4,1027
 4016574:	210f0604 	addi	r4,r4,15384
 4016578:	4002ed40 	call	4002ed4 <printf>
 401657c:	00bfffc4 	movi	r2,-1
 4016580:	003ff006 	br	4016544 <alt_tse_phy_add_profile+0x108>

04016584 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 4016584:	deff9204 	addi	sp,sp,-440
 4016588:	dc806615 	stw	r18,408(sp)
                            0x11,                   /* Location of Status Register                                   */
                            14,                     /* Location of Speed Status                                      */
                            13,                     /* Location of Duplex Status                                     */
                            10,                     /* Location of Link Status                                       */
                            &marvell_phy_cfg        /* Function pointer to configure Marvell PHY                     */
                           };
 401658c:	04801904 	movi	r18,100
 4016590:	d9004b04 	addi	r4,sp,300
 4016594:	900d883a 	mov	r6,r18
 4016598:	000b883a 	mov	r5,zero
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 401659c:	dfc06d15 	stw	ra,436(sp)
 40165a0:	df006c15 	stw	fp,432(sp)
 40165a4:	ddc06b15 	stw	r23,428(sp)
 40165a8:	dd806a15 	stw	r22,424(sp)
 40165ac:	dd406915 	stw	r21,420(sp)
 40165b0:	dd006815 	stw	r20,416(sp)
 40165b4:	dcc06715 	stw	r19,412(sp)
 40165b8:	dc406515 	stw	r17,404(sp)
 40165bc:	dc006415 	stw	r16,400(sp)
                            0x11,                   /* Location of Status Register                                   */
                            14,                     /* Location of Speed Status                                      */
                            13,                     /* Location of Duplex Status                                     */
                            10,                     /* Location of Link Status                                       */
                            &marvell_phy_cfg        /* Function pointer to configure Marvell PHY                     */
                           };
 40165c0:	40026a00 	call	40026a0 <memset>
 40165c4:	00c100f4 	movhi	r3,1027
 40165c8:	18cff304 	addi	r3,r3,16332
 40165cc:	1a400317 	ldw	r9,12(r3)
 40165d0:	19c00117 	ldw	r7,4(r3)
 40165d4:	1a000217 	ldw	r8,8(r3)
 40165d8:	18800017 	ldw	r2,0(r3)
 40165dc:	d9004f04 	addi	r4,sp,316
 40165e0:	000b883a 	mov	r5,zero
 40165e4:	01801004 	movi	r6,64
 40165e8:	d9c04c15 	stw	r7,304(sp)
 40165ec:	da004d15 	stw	r8,308(sp)
 40165f0:	da404e15 	stw	r9,312(sp)
 40165f4:	d8804b15 	stw	r2,300(sp)
 40165f8:	40026a00 	call	40026a0 <memset>
 40165fc:	05400084 	movi	r21,2
 4016600:	05000444 	movi	r20,17
 4016604:	04000344 	movi	r16,13
 4016608:	04c00284 	movi	r19,10
 401660c:	059410c4 	movi	r22,20547
 4016610:	05c00384 	movi	r23,14
 4016614:	07010074 	movhi	fp,1025
 4016618:	e711d804 	addi	fp,fp,18272
                            0x11,                            /* Location of Status Register                                   */
                            14,                              /* Location of Speed Status                                      */
                            13,                              /* Location of Duplex Status                                     */
                            10,                              /* Location of Link Status                                       */
                            &marvell_phy_cfg                 /* Function pointer to configure Marvell PHY                     */
                           };
 401661c:	d809883a 	mov	r4,sp
 4016620:	900d883a 	mov	r6,r18
 4016624:	000b883a 	mov	r5,zero
                            0x11,                   /* Location of Status Register                                   */
                            14,                     /* Location of Speed Status                                      */
                            13,                     /* Location of Duplex Status                                     */
                            10,                     /* Location of Link Status                                       */
                            &marvell_phy_cfg        /* Function pointer to configure Marvell PHY                     */
                           };
 4016628:	00800304 	movi	r2,12
 401662c:	ddc060c5 	stb	r23,387(sp)
 4016630:	dc006105 	stb	r16,388(sp)
 4016634:	d8806005 	stb	r2,384(sp)
 4016638:	dd805f15 	stw	r22,380(sp)
 401663c:	dd406045 	stb	r21,385(sp)
 4016640:	dd006085 	stb	r20,386(sp)
 4016644:	dcc06145 	stb	r19,389(sp)
 4016648:	df006215 	stw	fp,392(sp)
                            0x11,                            /* Location of Status Register                                   */
                            14,                              /* Location of Speed Status                                      */
                            13,                              /* Location of Duplex Status                                     */
                            10,                              /* Location of Link Status                                       */
                            &marvell_phy_cfg                 /* Function pointer to configure Marvell PHY                     */
                           };
 401664c:	40026a00 	call	40026a0 <memset>
 4016650:	00c100f4 	movhi	r3,1027
 4016654:	18d00704 	addi	r3,r3,16412
 4016658:	1b000603 	ldbu	r12,24(r3)
 401665c:	1ac00517 	ldw	r11,20(r3)
 4016660:	19c00117 	ldw	r7,4(r3)
 4016664:	1a000217 	ldw	r8,8(r3)
 4016668:	1a400317 	ldw	r9,12(r3)
 401666c:	1a800417 	ldw	r10,16(r3)
 4016670:	18800017 	ldw	r2,0(r3)
 4016674:	d9000644 	addi	r4,sp,25
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 4016678:	dca3883a 	add	r17,sp,r18
                            0x11,                            /* Location of Status Register                                   */
                            14,                              /* Location of Speed Status                                      */
                            13,                              /* Location of Duplex Status                                     */
                            10,                              /* Location of Link Status                                       */
                            &marvell_phy_cfg                 /* Function pointer to configure Marvell PHY                     */
                           };
 401667c:	000b883a 	mov	r5,zero
 4016680:	01800dc4 	movi	r6,55
 4016684:	dac00515 	stw	r11,20(sp)
 4016688:	db000605 	stb	r12,24(sp)
 401668c:	d9c00115 	stw	r7,4(sp)
 4016690:	da000215 	stw	r8,8(sp)
 4016694:	da400315 	stw	r9,12(sp)
 4016698:	da800415 	stw	r10,16(sp)
 401669c:	d8800015 	stw	r2,0(sp)
 40166a0:	40026a00 	call	40026a0 <memset>
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 40166a4:	8809883a 	mov	r4,r17
 40166a8:	900d883a 	mov	r6,r18
 40166ac:	000b883a 	mov	r5,zero
                            0x11,                            /* Location of Status Register                                   */
                            14,                              /* Location of Speed Status                                      */
                            13,                              /* Location of Duplex Status                                     */
                            10,                              /* Location of Link Status                                       */
                            &marvell_phy_cfg                 /* Function pointer to configure Marvell PHY                     */
                           };
 40166b0:	ddc015c5 	stb	r23,87(sp)
 40166b4:	dc001605 	stb	r16,88(sp)
 40166b8:	dc001505 	stb	r16,84(sp)
 40166bc:	dd801415 	stw	r22,80(sp)
 40166c0:	df001715 	stw	fp,92(sp)
 40166c4:	dd401545 	stb	r21,85(sp)
 40166c8:	dd001585 	stb	r20,86(sp)
 40166cc:	dcc01645 	stb	r19,89(sp)
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 40166d0:	40026a00 	call	40026a0 <memset>
 40166d4:	00c100f4 	movhi	r3,1027
 40166d8:	18d01b04 	addi	r3,r3,16492
 40166dc:	1a800403 	ldbu	r10,16(r3)
 40166e0:	19c00117 	ldw	r7,4(r3)
 40166e4:	1a000217 	ldw	r8,8(r3)
 40166e8:	1a400317 	ldw	r9,12(r3)
 40166ec:	18800017 	ldw	r2,0(r3)
 40166f0:	d9001d44 	addi	r4,sp,117
 40166f4:	000b883a 	mov	r5,zero
 40166f8:	01800fc4 	movi	r6,63
 40166fc:	d9c01a15 	stw	r7,104(sp)
 4016700:	da001b15 	stw	r8,108(sp)
 4016704:	da401c15 	stw	r9,112(sp)
 4016708:	da801d05 	stb	r10,116(sp)
 401670c:	d8801915 	stw	r2,100(sp)
 4016710:	40026a00 	call	40026a0 <memset>
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 4016714:	ddc03204 	addi	r23,sp,200
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 4016718:	008001c4 	movi	r2,7
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 401671c:	900d883a 	mov	r6,r18
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 4016720:	04000234 	movhi	r16,8
 4016724:	840005c4 	addi	r16,r16,23
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 4016728:	b809883a 	mov	r4,r23
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 401672c:	d8802e05 	stb	r2,184(sp)
 4016730:	00c00044 	movi	r3,1
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 4016734:	000b883a 	mov	r5,zero
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 4016738:	008000c4 	movi	r2,3
 401673c:	d8c02f05 	stb	r3,188(sp)
 4016740:	dcc02e45 	stb	r19,185(sp)
 4016744:	dd002e85 	stb	r20,186(sp)
 4016748:	d8802ec5 	stb	r2,187(sp)
 401674c:	dd402f45 	stb	r21,189(sp)
 4016750:	dc002d15 	stw	r16,180(sp)
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 4016754:	40026a00 	call	40026a0 <memset>
 4016758:	00c100f4 	movhi	r3,1027
 401675c:	18d02f04 	addi	r3,r3,16572
 4016760:	1a80040b 	ldhu	r10,16(r3)
 4016764:	19c00117 	ldw	r7,4(r3)
 4016768:	1a000217 	ldw	r8,8(r3)
 401676c:	1a400317 	ldw	r9,12(r3)
 4016770:	18800017 	ldw	r2,0(r3)
 4016774:	000b883a 	mov	r5,zero
 4016778:	01800f84 	movi	r6,62
 401677c:	d9003684 	addi	r4,sp,218
 4016780:	d9c03315 	stw	r7,204(sp)
 4016784:	da003415 	stw	r8,208(sp)
 4016788:	da403515 	stw	r9,212(sp)
 401678c:	da80360d 	sth	r10,216(sp)
 4016790:	d8803215 	stw	r2,200(sp)
 4016794:	40026a00 	call	40026a0 <memset>
 4016798:	00c10074 	movhi	r3,1025
 401679c:	18d0ff04 	addi	r3,r3,17404
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 40167a0:	d9004b04 	addi	r4,sp,300
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 40167a4:	00800244 	movi	r2,9
 40167a8:	d8c04a15 	stw	r3,296(sp)
 40167ac:	dc004615 	stw	r16,280(sp)
 40167b0:	d8804705 	stb	r2,284(sp)
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 40167b4:	401643c0 	call	401643c <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 40167b8:	d809883a 	mov	r4,sp
 40167bc:	401643c0 	call	401643c <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 40167c0:	8809883a 	mov	r4,r17
 40167c4:	401643c0 	call	401643c <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 40167c8:	b809883a 	mov	r4,r23
 40167cc:	401643c0 	call	401643c <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
}
 40167d0:	d0a81303 	ldbu	r2,-24500(gp)
 40167d4:	dfc06d17 	ldw	ra,436(sp)
 40167d8:	df006c17 	ldw	fp,432(sp)
 40167dc:	ddc06b17 	ldw	r23,428(sp)
 40167e0:	dd806a17 	ldw	r22,424(sp)
 40167e4:	dd406917 	ldw	r21,420(sp)
 40167e8:	dd006817 	ldw	r20,416(sp)
 40167ec:	dcc06717 	ldw	r19,412(sp)
 40167f0:	dc806617 	ldw	r18,408(sp)
 40167f4:	dc406517 	ldw	r17,404(sp)
 40167f8:	dc006417 	ldw	r16,400(sp)
 40167fc:	dec06e04 	addi	sp,sp,440
 4016800:	f800283a 	ret

04016804 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 4016804:	defffb04 	addi	sp,sp,-20
 4016808:	dfc00415 	stw	ra,16(sp)
 401680c:	dcc00315 	stw	r19,12(sp)
 4016810:	dc800215 	stw	r18,8(sp)
 4016814:	dc400115 	stw	r17,4(sp)
 4016818:	dc000015 	stw	r16,0(sp)
    
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 401681c:	40165840 	call	4016584 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 4016820:	40143f40 	call	40143f4 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 4016824:	4015edc0 	call	4015edc <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 4016828:	d0e81343 	ldbu	r3,-24499(gp)
 401682c:	18002126 	beq	r3,zero,40168b4 <alt_tse_phy_init+0xb0>
 4016830:	000d883a 	mov	r6,zero
 4016834:	000b883a 	mov	r5,zero
 4016838:	04800044 	movi	r18,1
 401683c:	04c10134 	movhi	r19,1028
 4016840:	9cca9604 	addi	r19,r19,10840
        pmac_group = pmac_groups[i];
 4016844:	2945883a 	add	r2,r5,r5
 4016848:	1085883a 	add	r2,r2,r2
 401684c:	14c5883a 	add	r2,r2,r19
 4016850:	14400017 	ldw	r17,0(r2)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 4016854:	88c00117 	ldw	r3,4(r17)
 4016858:	18800217 	ldw	r2,8(r3)
 401685c:	11000203 	ldbu	r4,8(r2)
 4016860:	20001c26 	beq	r4,zero,40168d4 <alt_tse_phy_init+0xd0>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 4016864:	8809883a 	mov	r4,r17
 4016868:	4015c280 	call	4015c28 <alt_tse_mac_get_phy>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 401686c:	88800003 	ldbu	r2,0(r17)
 4016870:	10002026 	beq	r2,zero,40168f4 <alt_tse_phy_init+0xf0>
 4016874:	0005883a 	mov	r2,zero
 4016878:	04000044 	movi	r16,1
            pmac_info = pmac_group->pmac_info[j];
            
            alt_tse_phy_cfg_pcs(pmac_info);
 401687c:	1085883a 	add	r2,r2,r2
 4016880:	1085883a 	add	r2,r2,r2
 4016884:	1445883a 	add	r2,r2,r17
 4016888:	11000117 	ldw	r4,4(r2)
 401688c:	401597c0 	call	401597c <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 4016890:	88c00003 	ldbu	r3,0(r17)
            pmac_info = pmac_group->pmac_info[j];
            
            alt_tse_phy_cfg_pcs(pmac_info);
 4016894:	8005883a 	mov	r2,r16
 4016898:	84000044 	addi	r16,r16,1
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 401689c:	10fff716 	blt	r2,r3,401687c <alt_tse_phy_init+0x78>
 40168a0:	81bfffc4 	addi	r6,r16,-1
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 40168a4:	d0a81343 	ldbu	r2,-24499(gp)
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 40168a8:	900b883a 	mov	r5,r18
 40168ac:	94800044 	addi	r18,r18,1
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 40168b0:	28bfe416 	blt	r5,r2,4016844 <alt_tse_phy_init+0x40>
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
}
 40168b4:	0005883a 	mov	r2,zero
 40168b8:	dfc00417 	ldw	ra,16(sp)
 40168bc:	dcc00317 	ldw	r19,12(sp)
 40168c0:	dc800217 	ldw	r18,8(sp)
 40168c4:	dc400117 	ldw	r17,4(sp)
 40168c8:	dc000017 	ldw	r16,0(sp)
 40168cc:	dec00504 	addi	sp,sp,20
 40168d0:	f800283a 	ret
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 40168d4:	31803fcc 	andi	r6,r6,255
 40168d8:	3180201c 	xori	r6,r6,128
 40168dc:	31bfe004 	addi	r6,r6,-128
 40168e0:	010100f4 	movhi	r4,1027
 40168e4:	210f1504 	addi	r4,r4,15444
 40168e8:	4002ed40 	call	4002ed4 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 40168ec:	88800003 	ldbu	r2,0(r17)
 40168f0:	103fe01e 	bne	r2,zero,4016874 <alt_tse_phy_init+0x70>
 40168f4:	000d883a 	mov	r6,zero
 40168f8:	003fea06 	br	40168a4 <alt_tse_phy_init+0xa0>

040168fc <getPHYSpeed>:
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = 0;
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 40168fc:	d0a81383 	ldbu	r2,-24498(gp)
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 4016900:	defff704 	addi	sp,sp,-36
 4016904:	dc800315 	stw	r18,12(sp)
 4016908:	dfc00815 	stw	ra,32(sp)
 401690c:	dd800715 	stw	r22,28(sp)
 4016910:	dd400615 	stw	r21,24(sp)
 4016914:	dd000515 	stw	r20,20(sp)
 4016918:	dcc00415 	stw	r19,16(sp)
 401691c:	dc400215 	stw	r17,8(sp)
 4016920:	dc000115 	stw	r16,4(sp)
 4016924:	2025883a 	mov	r18,r4
    alt_8 mac_info_index = 0;
    alt_8 mac_group_index = 0;
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 4016928:	10001a26 	beq	r2,zero,4016994 <getPHYSpeed+0x98>
        alt_tse_phy_init();
        is_init = 1;
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 401692c:	9009883a 	mov	r4,r18
 4016930:	40143880 	call	4014388 <alt_tse_get_mac_info>
 4016934:	1023883a 	mov	r17,r2
    
    if(pmac_info == 0) {
 4016938:	10001d1e 	bne	r2,zero,40169b0 <getPHYSpeed+0xb4>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 401693c:	010100f4 	movhi	r4,1027
 4016940:	210f2b04 	addi	r4,r4,15532
 4016944:	014100f4 	movhi	r5,1027
 4016948:	294f4304 	addi	r5,r5,15628
 401694c:	018100f4 	movhi	r6,1027
 4016950:	318f4404 	addi	r6,r6,15632
 4016954:	4002ed40 	call	4002ed4 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 4016958:	010100f4 	movhi	r4,1027
 401695c:	210f4604 	addi	r4,r4,15640
 4016960:	4002fec0 	call	4002fec <puts>
 4016964:	04000144 	movi	r16,5
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
}
 4016968:	8005883a 	mov	r2,r16
 401696c:	dfc00817 	ldw	ra,32(sp)
 4016970:	dd800717 	ldw	r22,28(sp)
 4016974:	dd400617 	ldw	r21,24(sp)
 4016978:	dd000517 	ldw	r20,20(sp)
 401697c:	dcc00417 	ldw	r19,16(sp)
 4016980:	dc800317 	ldw	r18,12(sp)
 4016984:	dc400217 	ldw	r17,8(sp)
 4016988:	dc000117 	ldw	r16,4(sp)
 401698c:	dec00904 	addi	sp,sp,36
 4016990:	f800283a 	ret
    alt_8 mac_group_index = 0;
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
        alt_tse_phy_init();
 4016994:	40168040 	call	4016804 <alt_tse_phy_init>
        is_init = 1;
 4016998:	00c00044 	movi	r3,1
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 401699c:	9009883a 	mov	r4,r18
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
        alt_tse_phy_init();
        is_init = 1;
 40169a0:	d0e81385 	stb	r3,-24498(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 40169a4:	40143880 	call	4014388 <alt_tse_get_mac_info>
 40169a8:	1023883a 	mov	r17,r2
    
    if(pmac_info == 0) {
 40169ac:	103fe326 	beq	r2,zero,401693c <getPHYSpeed+0x40>
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
        return result;
    }
    
    pphy = pmac_info->pphy_info;
    pmac_group = pmac_info->pmac_group;
 40169b0:	14000317 	ldw	r16,12(r2)
    psys = pmac_info->psys_info;
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 40169b4:	1009883a 	mov	r4,r2
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
        return result;
    }
    
    pphy = pmac_info->pphy_info;
 40169b8:	14c00117 	ldw	r19,4(r2)
    pmac_group = pmac_info->pmac_group;
    psys = pmac_info->psys_info;
 40169bc:	15000217 	ldw	r20,8(r2)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 40169c0:	40143440 	call	4014344 <alt_tse_get_mac_info_index>
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40169c4:	8009883a 	mov	r4,r16
    
    pphy = pmac_info->pphy_info;
    pmac_group = pmac_info->pmac_group;
    psys = pmac_info->psys_info;
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 40169c8:	102d883a 	mov	r22,r2
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 40169cc:	40142f80 	call	40142f8 <alt_tse_get_mac_group_index>
 40169d0:	102b883a 	mov	r21,r2
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 40169d4:	80800117 	ldw	r2,4(r16)
 40169d8:	11000217 	ldw	r4,8(r2)
 40169dc:	20c00203 	ldbu	r3,8(r4)
 40169e0:	18001226 	beq	r3,zero,4016a2c <getPHYSpeed+0x130>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 40169e4:	24000017 	ldw	r16,0(r4)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 40169e8:	9800231e 	bne	r19,zero,4016a78 <getPHYSpeed+0x17c>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 40169ec:	a9403fcc 	andi	r5,r21,255
 40169f0:	b1803fcc 	andi	r6,r22,255
 40169f4:	2940201c 	xori	r5,r5,128
 40169f8:	3180201c 	xori	r6,r6,128
 40169fc:	297fe004 	addi	r5,r5,-128
 4016a00:	31bfe004 	addi	r6,r6,-128
 4016a04:	010100f4 	movhi	r4,1027
 4016a08:	210f7b04 	addi	r4,r4,15852
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016a0c:	008100f4 	movhi	r2,1027
 4016a10:	108f4404 	addi	r2,r2,15632
 4016a14:	01c100f4 	movhi	r7,1027
 4016a18:	39cf4304 	addi	r7,r7,15628
 4016a1c:	d8800015 	stw	r2,0(sp)
 4016a20:	04000144 	movi	r16,5
 4016a24:	4002ed40 	call	4002ed4 <printf>
 4016a28:	003fcf06 	br	4016968 <getPHYSpeed+0x6c>
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 4016a2c:	010003f4 	movhi	r4,15
 4016a30:	21109004 	addi	r4,r4,16960
 4016a34:	40267280 	call	4026728 <usleep>
        if(psys->tse_phy_cfg) {
 4016a38:	a0c01117 	ldw	r3,68(r20)
 4016a3c:	18002226 	beq	r3,zero,4016ac8 <getPHYSpeed+0x1cc>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 4016a40:	a9403fcc 	andi	r5,r21,255
 4016a44:	b1803fcc 	andi	r6,r22,255
 4016a48:	2940201c 	xori	r5,r5,128
 4016a4c:	3180201c 	xori	r6,r6,128
 4016a50:	297fe004 	addi	r5,r5,-128
 4016a54:	31bfe004 	addi	r6,r6,-128
 4016a58:	010100f4 	movhi	r4,1027
 4016a5c:	210f5704 	addi	r4,r4,15708
 4016a60:	4002ed40 	call	4002ed4 <printf>
        	result = psys->tse_phy_cfg(pmac);
 4016a64:	a0c01117 	ldw	r3,68(r20)
 4016a68:	9009883a 	mov	r4,r18
 4016a6c:	183ee83a 	callr	r3
 4016a70:	14003fcc 	andi	r16,r2,255
 4016a74:	003fbc06 	br	4016968 <getPHYSpeed+0x6c>
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 4016a78:	89000003 	ldbu	r4,0(r17)
 4016a7c:	00800044 	movi	r2,1
 4016a80:	20801d26 	beq	r4,r2,4016af8 <getPHYSpeed+0x1fc>
			alt_tse_phy_set_adv_1000(pphy, 0);
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 4016a84:	00800084 	movi	r2,2
 4016a88:	20802326 	beq	r4,r2,4016b18 <getPHYSpeed+0x21c>
			alt_tse_phy_set_adv_10(pphy, 0);
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 4016a8c:	9809883a 	mov	r4,r19
 4016a90:	01400134 	movhi	r5,4
 4016a94:	29742404 	addi	r5,r5,-12144
 4016a98:	40158280 	call	4015828 <alt_tse_phy_check_link>
 4016a9c:	00ffffc4 	movi	r3,-1
 4016aa0:	10c0281e 	bne	r2,r3,4016b44 <getPHYSpeed+0x248>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016aa4:	a9403fcc 	andi	r5,r21,255
 4016aa8:	b1803fcc 	andi	r6,r22,255
 4016aac:	2940201c 	xori	r5,r5,128
 4016ab0:	3180201c 	xori	r6,r6,128
 4016ab4:	297fe004 	addi	r5,r5,-128
 4016ab8:	31bfe004 	addi	r6,r6,-128
 4016abc:	010100f4 	movhi	r4,1027
 4016ac0:	210f8c04 	addi	r4,r4,15920
 4016ac4:	003fd106 	br	4016a0c <getPHYSpeed+0x110>
        if(psys->tse_phy_cfg) {
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
        	result = psys->tse_phy_cfg(pmac);
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016ac8:	a9403fcc 	andi	r5,r21,255
 4016acc:	2940201c 	xori	r5,r5,128
 4016ad0:	297fe004 	addi	r5,r5,-128
 4016ad4:	010100f4 	movhi	r4,1027
 4016ad8:	210f6904 	addi	r4,r4,15780
 4016adc:	018100f4 	movhi	r6,1027
 4016ae0:	318f4304 	addi	r6,r6,15628
 4016ae4:	01c100f4 	movhi	r7,1027
 4016ae8:	39cf4404 	addi	r7,r7,15632
 4016aec:	4002ed40 	call	4002ed4 <printf>
 4016af0:	04000144 	movi	r16,5
 4016af4:	003f9c06 	br	4016968 <getPHYSpeed+0x6c>
            return result;
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
			alt_tse_phy_set_adv_1000(pphy, 0);
 4016af8:	9809883a 	mov	r4,r19
 4016afc:	000b883a 	mov	r5,zero
 4016b00:	4014adc0 	call	4014adc <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 4016b04:	9809883a 	mov	r4,r19
 4016b08:	01400134 	movhi	r5,4
 4016b0c:	29742404 	addi	r5,r5,-12144
 4016b10:	4014cf40 	call	4014cf4 <alt_tse_phy_restart_an>
 4016b14:	003fdd06 	br	4016a8c <getPHYSpeed+0x190>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
			alt_tse_phy_set_adv_100(pphy, 0);
 4016b18:	9809883a 	mov	r4,r19
 4016b1c:	000b883a 	mov	r5,zero
 4016b20:	40149880 	call	4014988 <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
 4016b24:	9809883a 	mov	r4,r19
 4016b28:	000b883a 	mov	r5,zero
 4016b2c:	401487c0 	call	401487c <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 4016b30:	9809883a 	mov	r4,r19
 4016b34:	01400134 	movhi	r5,4
 4016b38:	29742404 	addi	r5,r5,-12144
 4016b3c:	4014cf40 	call	4014cf4 <alt_tse_phy_restart_an>
 4016b40:	003fd206 	br	4016a8c <getPHYSpeed+0x190>
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 4016b44:	98800003 	ldbu	r2,0(r19)
 4016b48:	80801035 	stwio	r2,64(r16)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 4016b4c:	04400044 	movi	r17,1
 4016b50:	9809883a 	mov	r4,r19
 4016b54:	000b883a 	mov	r5,zero
 4016b58:	01800384 	movi	r6,14
 4016b5c:	880f883a 	mov	r7,r17
 4016b60:	d8000015 	stw	zero,0(sp)
 4016b64:	40147cc0 	call	40147cc <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 4016b68:	98800517 	ldw	r2,20(r19)
 4016b6c:	10006626 	beq	r2,zero,4016d08 <getPHYSpeed+0x40c>
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
 4016b70:	10c01817 	ldw	r3,96(r2)
 4016b74:	18002326 	beq	r3,zero,4016c04 <getPHYSpeed+0x308>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
 4016b78:	8009883a 	mov	r4,r16
 4016b7c:	183ee83a 	callr	r3
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 4016b80:	11803fcc 	andi	r6,r2,255
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
 4016b84:	100b883a 	mov	r5,r2
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 4016b88:	3080008c 	andi	r2,r6,2
 4016b8c:	10003026 	beq	r2,zero,4016c50 <getPHYSpeed+0x354>
 4016b90:	05000084 	movi	r20,2
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
				
				if(result & ALT_TSE_E_INVALID_SPEED)
 4016b94:	ac803fcc 	andi	r18,r21,255
 4016b98:	b4403fcc 	andi	r17,r22,255
 4016b9c:	9480201c 	xori	r18,r18,128
 4016ba0:	8c40201c 	xori	r17,r17,128
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 4016ba4:	28c0004c 	andi	r3,r5,1
				
				if(result & ALT_TSE_E_INVALID_SPEED)
 4016ba8:	94bfe004 	addi	r18,r18,-128
 4016bac:	8c7fe004 	addi	r17,r17,-128
 4016bb0:	a1003fcc 	andi	r4,r20,255
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016bb4:	00800084 	movi	r2,2
 4016bb8:	20802926 	beq	r4,r2,4016c60 <getPHYSpeed+0x364>
 4016bbc:	00800044 	movi	r2,1
 4016bc0:	20804a26 	beq	r4,r2,4016cec <getPHYSpeed+0x3f0>
 4016bc4:	2000291e 	bne	r4,zero,4016c6c <getPHYSpeed+0x370>
 4016bc8:	01c100f4 	movhi	r7,1027
 4016bcc:	39cfd404 	addi	r7,r7,16208
 4016bd0:	18c03fcc 	andi	r3,r3,255
 4016bd4:	00800044 	movi	r2,1
 4016bd8:	18805c26 	beq	r3,r2,4016d4c <getPHYSpeed+0x450>
 4016bdc:	3021883a 	mov	r16,r6
 4016be0:	008100f4 	movhi	r2,1027
 4016be4:	108fd704 	addi	r2,r2,16220
 4016be8:	900b883a 	mov	r5,r18
 4016bec:	880d883a 	mov	r6,r17
 4016bf0:	010100f4 	movhi	r4,1027
 4016bf4:	210fd904 	addi	r4,r4,16228
 4016bf8:	d8800015 	stw	r2,0(sp)
 4016bfc:	4002ed40 	call	4002ed4 <printf>
 4016c00:	003f5906 	br	4016968 <getPHYSpeed+0x6c>
				if(result & ALT_TSE_E_INVALID_SPEED)
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
 4016c04:	11401583 	ldbu	r5,86(r2)
 4016c08:	28001b1e 	bne	r5,zero,4016c78 <getPHYSpeed+0x37c>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 4016c0c:	ac803fcc 	andi	r18,r21,255
 4016c10:	b4403fcc 	andi	r17,r22,255
 4016c14:	9480201c 	xori	r18,r18,128
 4016c18:	8c40201c 	xori	r17,r17,128
 4016c1c:	94bfe004 	addi	r18,r18,-128
 4016c20:	8c7fe004 	addi	r17,r17,-128
 4016c24:	010100f4 	movhi	r4,1027
 4016c28:	210fbb04 	addi	r4,r4,16108
 4016c2c:	900b883a 	mov	r5,r18
 4016c30:	880d883a 	mov	r6,r17
 4016c34:	4002ed40 	call	4002ed4 <printf>
 4016c38:	04000144 	movi	r16,5
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4016c3c:	01c100f4 	movhi	r7,1027
 4016c40:	39cf4304 	addi	r7,r7,15628
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016c44:	008100f4 	movhi	r2,1027
 4016c48:	108f4404 	addi	r2,r2,15632
 4016c4c:	003fe606 	br	4016be8 <getPHYSpeed+0x2ec>
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 4016c50:	3080010c 	andi	r2,r6,4
 4016c54:	10002826 	beq	r2,zero,4016cf8 <getPHYSpeed+0x3fc>
 4016c58:	8829883a 	mov	r20,r17
 4016c5c:	003fcd06 	br	4016b94 <getPHYSpeed+0x298>
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016c60:	01c100f4 	movhi	r7,1027
 4016c64:	39cfd204 	addi	r7,r7,16200
 4016c68:	003fd906 	br	4016bd0 <getPHYSpeed+0x2d4>
 4016c6c:	01c100f4 	movhi	r7,1027
 4016c70:	39cfd504 	addi	r7,r7,16212
 4016c74:	003fd606 	br	4016bd0 <getPHYSpeed+0x2d4>
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 4016c78:	118015c3 	ldbu	r6,87(r2)
 4016c7c:	04000084 	movi	r16,2
 4016c80:	9809883a 	mov	r4,r19
 4016c84:	800f883a 	mov	r7,r16
 4016c88:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
 4016c8c:	1029883a 	mov	r20,r2
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 4016c90:	98800517 	ldw	r2,20(r19)
 4016c94:	9809883a 	mov	r4,r19
 4016c98:	880f883a 	mov	r7,r17
 4016c9c:	11801603 	ldbu	r6,88(r2)
 4016ca0:	11401583 	ldbu	r5,86(r2)
 4016ca4:	40144240 	call	4014424 <alt_tse_phy_rd_mdio_reg>
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4016ca8:	1140004c 	andi	r5,r2,1
 4016cac:	a1003fcc 	andi	r4,r20,255
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 4016cb0:	1007883a 	mov	r3,r2
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4016cb4:	280d883a 	mov	r6,r5
 4016cb8:	24002b26 	beq	r4,r16,4016d68 <getPHYSpeed+0x46c>
 4016cbc:	24402726 	beq	r4,r17,4016d5c <getPHYSpeed+0x460>
 4016cc0:	2005003a 	cmpeq	r2,r4,zero
 4016cc4:	100490fa 	slli	r2,r2,3
 4016cc8:	ac803fcc 	andi	r18,r21,255
 4016ccc:	b4403fcc 	andi	r17,r22,255
 4016cd0:	308ab03a 	or	r5,r6,r2
 4016cd4:	9480201c 	xori	r18,r18,128
 4016cd8:	8c40201c 	xori	r17,r17,128
 4016cdc:	94bfe004 	addi	r18,r18,-128
 4016ce0:	8c7fe004 	addi	r17,r17,-128
 4016ce4:	29803fcc 	andi	r6,r5,255
 4016ce8:	003fb206 	br	4016bb4 <getPHYSpeed+0x2b8>
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016cec:	01c100f4 	movhi	r7,1027
 4016cf0:	39cf4304 	addi	r7,r7,15628
 4016cf4:	003fb606 	br	4016bd0 <getPHYSpeed+0x2d4>
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 4016cf8:	3080020c 	andi	r2,r6,8
 4016cfc:	10001126 	beq	r2,zero,4016d44 <getPHYSpeed+0x448>
 4016d00:	0029883a 	mov	r20,zero
 4016d04:	003fa306 	br	4016b94 <getPHYSpeed+0x298>
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 4016d08:	ac803fcc 	andi	r18,r21,255
 4016d0c:	b4403fcc 	andi	r17,r22,255
 4016d10:	9480201c 	xori	r18,r18,128
 4016d14:	8c40201c 	xori	r17,r17,128
 4016d18:	94bfe004 	addi	r18,r18,-128
 4016d1c:	8c7fe004 	addi	r17,r17,-128
 4016d20:	010100f4 	movhi	r4,1027
 4016d24:	210fa004 	addi	r4,r4,16000
 4016d28:	900b883a 	mov	r5,r18
 4016d2c:	880d883a 	mov	r6,r17
 4016d30:	4002ed40 	call	4002ed4 <printf>
 4016d34:	04000144 	movi	r16,5
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4016d38:	01c100f4 	movhi	r7,1027
 4016d3c:	39cf4304 	addi	r7,r7,15628
 4016d40:	003fc006 	br	4016c44 <getPHYSpeed+0x348>
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 4016d44:	050000c4 	movi	r20,3
 4016d48:	003f9206 	br	4016b94 <getPHYSpeed+0x298>
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4016d4c:	3021883a 	mov	r16,r6
 4016d50:	008100f4 	movhi	r2,1027
 4016d54:	108f4404 	addi	r2,r2,15632
 4016d58:	003fa306 	br	4016be8 <getPHYSpeed+0x2ec>
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4016d5c:	29800114 	ori	r6,r5,4
 4016d60:	0005883a 	mov	r2,zero
 4016d64:	003fd806 	br	4016cc8 <getPHYSpeed+0x3cc>
 4016d68:	290cb03a 	or	r6,r5,r4
 4016d6c:	0005883a 	mov	r2,zero
 4016d70:	003fd506 	br	4016cc8 <getPHYSpeed+0x3cc>

04016d74 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
 4016d74:	21000217 	ldw	r4,8(r4)
 4016d78:	deffff04 	addi	sp,sp,-4
 4016d7c:	000d883a 	mov	r6,zero
 4016d80:	01c003f4 	movhi	r7,15
 4016d84:	39d09044 	addi	r7,r7,16961
 4016d88:	dfc00015 	stw	ra,0(sp)
 4016d8c:	00000106 	br	4016d94 <tse_mac_aRxRead+0x20>
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 4016d90:	31c00a26 	beq	r6,r7,4016dbc <tse_mac_aRxRead+0x48>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 4016d94:	20c00317 	ldw	r3,12(r4)
 4016d98:	18800037 	ldwio	r2,0(r3)
 4016d9c:	1080040c 	andi	r2,r2,16
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 4016da0:	31800044 	addi	r6,r6,1
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 4016da4:	103ffa1e 	bne	r2,zero,4016d90 <tse_mac_aRxRead+0x1c>
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
 4016da8:	4013d340 	call	4013d34 <alt_avalon_sgdma_do_async_transfer>
 4016dac:	0005883a 	mov	r2,zero
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);

 
  return SUCCESS;
}
 4016db0:	dfc00017 	ldw	ra,0(sp)
 4016db4:	dec00104 	addi	sp,sp,4
 4016db8:	f800283a 	ret
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
 4016dbc:	010100f4 	movhi	r4,1027
 4016dc0:	210fe504 	addi	r4,r4,16276
 4016dc4:	4002fec0 	call	4002fec <puts>
 4016dc8:	00bffa84 	movi	r2,-22
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);

 
  return SUCCESS;
}
 4016dcc:	dfc00017 	ldw	ra,0(sp)
 4016dd0:	dec00104 	addi	sp,sp,4
 4016dd4:	f800283a 	ret

04016dd8 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
 4016dd8:	21800117 	ldw	r6,4(r4)
 4016ddc:	defffe04 	addi	sp,sp,-8
 4016de0:	dc000015 	stw	r16,0(sp)
 4016de4:	200f883a 	mov	r7,r4
 4016de8:	2821883a 	mov	r16,r5
 4016dec:	0009883a 	mov	r4,zero
 4016df0:	014003f4 	movhi	r5,15
 4016df4:	29509044 	addi	r5,r5,16961
 4016df8:	dfc00115 	stw	ra,4(sp)
 4016dfc:	00000106 	br	4016e04 <tse_mac_sTxWrite+0x2c>
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 4016e00:	21401326 	beq	r4,r5,4016e50 <tse_mac_sTxWrite+0x78>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 4016e04:	30c00317 	ldw	r3,12(r6)
 4016e08:	18800037 	ldwio	r2,0(r3)
 4016e0c:	1080040c 	andi	r2,r2,16
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 4016e10:	21000044 	addi	r4,r4,1
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 4016e14:	103ffa1e 	bne	r2,zero,4016e00 <tse_mac_sTxWrite+0x28>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
 4016e18:	18000435 	stwio	zero,16(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
 4016e1c:	38800117 	ldw	r2,4(r7)
 4016e20:	00c03fc4 	movi	r3,255
 4016e24:	11000317 	ldw	r4,12(r2)
 4016e28:	20c00035 	stwio	r3,0(r4)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
 4016e2c:	39000117 	ldw	r4,4(r7)
 4016e30:	800b883a 	mov	r5,r16
 4016e34:	4013cb40 	call	4013cb4 <alt_avalon_sgdma_do_sync_transfer>
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
 4016e38:	80c00737 	ldwio	r3,28(r16)

  return actualBytesTransferred;
 4016e3c:	18bfffcc 	andi	r2,r3,65535
}
 4016e40:	dfc00117 	ldw	ra,4(sp)
 4016e44:	dc000017 	ldw	r16,0(sp)
 4016e48:	dec00204 	addi	sp,sp,8
 4016e4c:	f800283a 	ret
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
 4016e50:	010100f4 	movhi	r4,1027
 4016e54:	210fec04 	addi	r4,r4,16304
 4016e58:	4002fec0 	call	4002fec <puts>
 4016e5c:	00bffa84 	movi	r2,-22
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);

  return actualBytesTransferred;
}
 4016e60:	dfc00117 	ldw	ra,4(sp)
 4016e64:	dc000017 	ldw	r16,0(sp)
 4016e68:	dec00204 	addi	sp,sp,8
 4016e6c:	f800283a 	ret

04016e70 <tse_mac_close>:
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 4016e70:	defffc04 	addi	sp,sp,-16
 4016e74:	dc800115 	stw	r18,4(sp)
  int state;
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
 4016e78:	2125883a 	add	r18,r4,r4
 4016e7c:	00810134 	movhi	r2,1028
 4016e80:	108bbb04 	addi	r2,r2,12012
 4016e84:	94a5883a 	add	r18,r18,r18
 4016e88:	90a5883a 	add	r18,r18,r2
 4016e8c:	90c00017 	ldw	r3,0(r18)
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 4016e90:	dc400015 	stw	r17,0(sp)
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    

  /* disable the interrupt in the OS*/
  alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma, 0, 0, 0);
 4016e94:	24401324 	muli	r17,r4,76
 4016e98:	00810134 	movhi	r2,1028
 4016e9c:	108aaa04 	addi	r2,r2,10920
int tse_mac_close(int iface)
{
  int state;
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
 4016ea0:	19402717 	ldw	r5,156(r3)

  /* disable the interrupt in the OS*/
  alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma, 0, 0, 0);
 4016ea4:	88a3883a 	add	r17,r17,r2
 4016ea8:	89000317 	ldw	r4,12(r17)
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 4016eac:	dcc00215 	stw	r19,8(sp)
  int state;
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
 4016eb0:	04c00084 	movi	r19,2
 4016eb4:	2cc00615 	stw	r19,24(r5)

  /* disable the interrupt in the OS*/
  alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma, 0, 0, 0);
 4016eb8:	000d883a 	mov	r6,zero
 4016ebc:	000b883a 	mov	r5,zero
 4016ec0:	000f883a 	mov	r7,zero
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 4016ec4:	dfc00315 	stw	ra,12(sp)
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    

  /* disable the interrupt in the OS*/
  alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma, 0, 0, 0);
 4016ec8:	4013b8c0 	call	4013b8c <alt_avalon_sgdma_register_callback>
   
  /* Disable Receive path on the device*/
  state = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 4016ecc:	88c00117 	ldw	r3,4(r17)
 4016ed0:	18c00204 	addi	r3,r3,8
 4016ed4:	18800037 	ldwio	r2,0(r3)
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,state & ~ALTERA_TSEMAC_CMD_RX_ENA_MSK); 
 4016ed8:	013fff44 	movi	r4,-3
 4016edc:	1104703a 	and	r2,r2,r4
 4016ee0:	18800035 	stwio	r2,0(r3)
  
  /* status = down */                                     
  nets[iface]->n_mib->ifOperStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;     
 4016ee4:	91000017 	ldw	r4,0(r18)

  return SUCCESS;
}
 4016ee8:	0005883a 	mov	r2,zero
  /* Disable Receive path on the device*/
  state = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,state & ~ALTERA_TSEMAC_CMD_RX_ENA_MSK); 
  
  /* status = down */                                     
  nets[iface]->n_mib->ifOperStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;     
 4016eec:	20c02717 	ldw	r3,156(r4)
 4016ef0:	1cc00715 	stw	r19,28(r3)

  return SUCCESS;
}
 4016ef4:	dfc00317 	ldw	ra,12(sp)
 4016ef8:	dcc00217 	ldw	r19,8(sp)
 4016efc:	dc800117 	ldw	r18,4(sp)
 4016f00:	dc400017 	ldw	r17,0(sp)
 4016f04:	dec00404 	addi	sp,sp,16
 4016f08:	f800283a 	ret

04016f0c <tse_mac_stats>:
#endif
  } /* while (descriptor terminated by EOP) */
} 

int tse_mac_stats(void * pio, int iface)
{
 4016f0c:	deffff04 	addi	sp,sp,-4
   ns_printf(pio, "tse_mac_stats(), stats will be added later!\n");
 4016f10:	014100f4 	movhi	r5,1027
 4016f14:	29504304 	addi	r5,r5,16652
#endif
  } /* while (descriptor terminated by EOP) */
} 

int tse_mac_stats(void * pio, int iface)
{
 4016f18:	dfc00015 	stw	ra,0(sp)
   ns_printf(pio, "tse_mac_stats(), stats will be added later!\n");
 4016f1c:	4019c700 	call	4019c70 <ns_printf>
   return SUCCESS;
}
 4016f20:	0005883a 	mov	r2,zero
 4016f24:	dfc00017 	ldw	ra,0(sp)
 4016f28:	dec00104 	addi	sp,sp,4
 4016f2c:	f800283a 	ret

04016f30 <tse_mac_rcv>:
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
 4016f30:	20c00e17 	ldw	r3,56(r4)
 4016f34:	21400f17 	ldw	r5,60(r4)
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

ALT_INLINE void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
 4016f38:	defffd04 	addi	sp,sp,-12
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
 4016f3c:	1804917a 	slli	r2,r3,5
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

ALT_INLINE void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
 4016f40:	dc000015 	stw	r16,0(sp)
 4016f44:	2021883a 	mov	r16,r4
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
 4016f48:	1145883a 	add	r2,r2,r5
 4016f4c:	11001004 	addi	r4,r2,64
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

ALT_INLINE void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
 4016f50:	dfc00215 	stw	ra,8(sp)
 4016f54:	dc400115 	stw	r17,4(sp)
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
 4016f58:	81001015 	stw	r4,64(r16)
    &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
  
  /* Grab status bits from descriptor under test. Bypass cache */
  desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
 4016f5c:	10801704 	addi	r2,r2,92
 4016f60:	11c00037 	ldwio	r7,0(r2)
  while ( desc_status & 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
 4016f64:	1200002b 	ldhuio	r8,0(r2)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
    rx_packet->nb_plen = pklen - 14;
    rx_packet->nb_tstamp = cticks;
 4016f68:	00810134 	movhi	r2,1028
 4016f6c:	10a93304 	addi	r2,r2,-23348
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
 4016f70:	18c7883a 	add	r3,r3,r3
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4016f74:	83000817 	ldw	r12,32(r16)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
 4016f78:	18c7883a 	add	r3,r3,r3
 4016f7c:	1c07883a 	add	r3,r3,r16
 4016f80:	19801117 	ldw	r6,68(r3)
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4016f84:	62402717 	ldw	r9,156(r12)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
    
    if( (desc_status & 
 4016f88:	380fd43a 	srai	r7,r7,16
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 4016f8c:	31400117 	ldw	r5,4(r6)
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4016f90:	48c00917 	ldw	r3,36(r9)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
    rx_packet->nb_plen = pklen - 14;
    rx_packet->nb_tstamp = cticks;
 4016f94:	12c00017 	ldw	r11,0(r2)
    rx_packet->net = tse_ptr->netp;
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
 4016f98:	2a80038b 	ldhu	r10,14(r5)
  while ( desc_status & 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
 4016f9c:	40bfff84 	addi	r2,r8,-2
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4016fa0:	1887883a 	add	r3,r3,r2
 4016fa4:	48c00915 	stw	r3,36(r9)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
    rx_packet->nb_plen = pklen - 14;
 4016fa8:	423ffc04 	addi	r8,r8,-16
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 4016fac:	29400404 	addi	r5,r5,16
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
    
    if( (desc_status & 
 4016fb0:	39c01fcc 	andi	r7,r7,127
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
 4016fb4:	01017f04 	movi	r4,1532
    rx_packet->nb_tstamp = cticks;
    rx_packet->net = tse_ptr->netp;
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
 4016fb8:	3280080d 	sth	r10,32(r6)
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 4016fbc:	31400315 	stw	r5,12(r6)
    rx_packet->nb_plen = pklen - 14;
 4016fc0:	32000415 	stw	r8,16(r6)
    rx_packet->nb_tstamp = cticks;
 4016fc4:	32c00515 	stw	r11,20(r6)
    rx_packet->net = tse_ptr->netp;
 4016fc8:	33000615 	stw	r12,24(r6)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
    
    if( (desc_status & 
 4016fcc:	3800131e 	bne	r7,zero,401701c <tse_mac_rcv+0xec>
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
 4016fd0:	401bf840 	call	401bf84 <pk_alloc>
 4016fd4:	1023883a 	mov	r17,r2
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
        dprintf("No free buffers for rx\n");
 4016fd8:	010100f4 	movhi	r4,1027
 4016fdc:	21104f04 	addi	r4,r4,16700
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
 4016fe0:	10002326 	beq	r2,zero,4017070 <tse_mac_rcv+0x140>
        dprintf("No free buffers for rx\n");
        tse_ptr->netp->n_mib->ifInDiscards++;
      }
      else {
        putq(&rcvdq, tse_ptr->pkt_array[tse_ptr->chain_loop]);
 4016fe4:	80800e17 	ldw	r2,56(r16)
 4016fe8:	01010134 	movhi	r4,1028
 4016fec:	210af604 	addi	r4,r4,11224
 4016ff0:	1085883a 	add	r2,r2,r2
 4016ff4:	1085883a 	add	r2,r2,r2
 4016ff8:	1405883a 	add	r2,r2,r16
 4016ffc:	11401117 	ldw	r5,68(r2)
 4017000:	401c2940 	call	401c294 <putq>
        tse_ptr->pkt_array[tse_ptr->chain_loop] = replacement_pkt;
 4017004:	81400e17 	ldw	r5,56(r16)
 4017008:	2945883a 	add	r2,r5,r5
 401700c:	1085883a 	add	r2,r2,r2
 4017010:	1405883a 	add	r2,r2,r16
 4017014:	14401115 	stw	r17,68(r2)
 4017018:	00000406 	br	401702c <tse_mac_rcv+0xfc>
      }
    } /* if(descriptor had no errors) */ 
    else {
      dprintf("RX descriptor reported error. packet dropped\n");
 401701c:	010100f4 	movhi	r4,1027
 4017020:	21105504 	addi	r4,r4,16724
 4017024:	4002fec0 	call	4002fec <puts>
 4017028:	81400e17 	ldw	r5,56(r16)
    }     
             
    uncached_packet_payload = (alt_u32 *)alt_remap_cached(tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
 401702c:	2945883a 	add	r2,r5,r5
 4017030:	1085883a 	add	r2,r2,r2
 4017034:	1405883a 	add	r2,r2,r16
 4017038:	10c01117 	ldw	r3,68(r2)
 401703c:	01400104 	movi	r5,4
 4017040:	19000117 	ldw	r4,4(r3)
 4017044:	40266a80 	call	40266a8 <alt_remap_cached>
    /* 
     * Re-cycle previously constructed SGDMA buffer directly rather
     * than calling the SGDMA utility routines. This saves some call/return
     * overhead and only does cache-bypass writes of what we need
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->write_addr, 0, 
 4017048:	80c01017 	ldw	r3,64(r16)
 401704c:	18800235 	stwio	r2,8(r3)
     *   |31...24|23..16|15.....................0|
     *   |control|status|actual_bytes_transferred|
     * 
     * Set relevant control bits and ensure the rest are cleared.
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0, 
 4017050:	81001017 	ldw	r4,64(r16)
 4017054:	00a04034 	movhi	r2,33024
 4017058:	20800735 	stwio	r2,28(r4)
    
    /* Grab next descriptor status */
    desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
#endif
  } /* while (descriptor terminated by EOP) */
} 
 401705c:	dfc00217 	ldw	ra,8(sp)
 4017060:	dc400117 	ldw	r17,4(sp)
 4017064:	dc000017 	ldw	r16,0(sp)
 4017068:	dec00304 	addi	sp,sp,12
 401706c:	f800283a 	ret
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
        dprintf("No free buffers for rx\n");
 4017070:	4002fec0 	call	4002fec <puts>
        tse_ptr->netp->n_mib->ifInDiscards++;
 4017074:	80c00817 	ldw	r3,32(r16)
 4017078:	81400e17 	ldw	r5,56(r16)
 401707c:	19002717 	ldw	r4,156(r3)
 4017080:	20800c17 	ldw	r2,48(r4)
 4017084:	10800044 	addi	r2,r2,1
 4017088:	20800c15 	stw	r2,48(r4)
 401708c:	003fe706 	br	401702c <tse_mac_rcv+0xfc>

04017090 <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(ins_tse_info* tse_ptr)
{     
 4017090:	defffc04 	addi	sp,sp,-16
 4017094:	dc400215 	stw	r17,8(sp)
 4017098:	dc000115 	stw	r16,4(sp)
 401709c:	dfc00315 	stw	ra,12(sp)
 40170a0:	2021883a 	mov	r16,r4
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
 40170a4:	20000e15 	stw	zero,56(r4)
 40170a8:	0023883a 	mov	r17,zero
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
 40170ac:	01017f04 	movi	r4,1532
 40170b0:	401bf840 	call	401bf84 <pk_alloc>
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
 40170b4:	80c00e17 	ldw	r3,56(r16)
{     
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
 40170b8:	8c49883a 	add	r4,r17,r17
 40170bc:	2109883a 	add	r4,r4,r4
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
 40170c0:	18c7883a 	add	r3,r3,r3
{     
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
 40170c4:	2409883a 	add	r4,r4,r16
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
 40170c8:	18c7883a 	add	r3,r3,r3
{     
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
 40170cc:	20801115 	stw	r2,68(r4)
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
 40170d0:	1c07883a 	add	r3,r3,r16
 40170d4:	18801117 	ldw	r2,68(r3)
      return ENP_NOBUFFER;
    }
    
    // ensure bit-31 of tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff is clear before passing
    // to SGDMA Driver
    uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
 40170d8:	01400104 	movi	r5,4
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
 40170dc:	10002126 	beq	r2,zero,4017164 <tse_sgdma_read_init+0xd4>
      return ENP_NOBUFFER;
    }
    
    // ensure bit-31 of tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff is clear before passing
    // to SGDMA Driver
    uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
 40170e0:	11000117 	ldw	r4,4(r2)
 40170e4:	40266a80 	call	40266a8 <alt_remap_cached>

    alt_avalon_sgdma_construct_stream_to_mem_desc(
 40170e8:	81000e17 	ldw	r4,56(r16)
 40170ec:	80c00f17 	ldw	r3,60(r16)
 40170f0:	100d883a 	mov	r6,r2
 40170f4:	2008917a 	slli	r4,r4,5
 40170f8:	000f883a 	mov	r7,zero
 40170fc:	d8000015 	stw	zero,0(sp)
 4017100:	20c9883a 	add	r4,r4,r3
 4017104:	21401804 	addi	r5,r4,96
 4017108:	21001004 	addi	r4,r4,64
 401710c:	40140b00 	call	40140b0 <alt_avalon_sgdma_construct_stream_to_mem_desc>
 */
int tse_sgdma_read_init(ins_tse_info* tse_ptr)
{     
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
 4017110:	80800e17 	ldw	r2,56(r16)
 4017114:	14400044 	addi	r17,r2,1
 4017118:	84400e15 	stw	r17,56(r16)
 401711c:	047fe30e 	bge	zero,r17,40170ac <tse_sgdma_read_init+0x1c>
            0,                          // read until EOP
            0);                         // don't write to constant address

  } // for

  dprintf("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n", 
 4017120:	880b883a 	mov	r5,r17
 4017124:	010100f4 	movhi	r4,1027
 4017128:	21107204 	addi	r4,r4,16840
 401712c:	4002ed40 	call	4002ed4 <printf>
    tse_ptr->chain_loop);
   
  tse_ptr->chain_loop = 0;
  tse_ptr->currdescriptor_ptr =  &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
 4017130:	81400f17 	ldw	r5,60(r16)
  } // for

  dprintf("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n", 
    tse_ptr->chain_loop);
   
  tse_ptr->chain_loop = 0;
 4017134:	80000e15 	stw	zero,56(r16)
  tse_ptr->currdescriptor_ptr =  &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];

  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->currdescriptor_ptr);
 4017138:	81000104 	addi	r4,r16,4

  dprintf("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n", 
    tse_ptr->chain_loop);
   
  tse_ptr->chain_loop = 0;
  tse_ptr->currdescriptor_ptr =  &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
 401713c:	29401004 	addi	r5,r5,64
 4017140:	81401015 	stw	r5,64(r16)

  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->currdescriptor_ptr);
 4017144:	4016d740 	call	4016d74 <tse_mac_aRxRead>
 4017148:	000b883a 	mov	r5,zero
  
  return SUCCESS;
}
 401714c:	2805883a 	mov	r2,r5
 4017150:	dfc00317 	ldw	ra,12(sp)
 4017154:	dc400217 	ldw	r17,8(sp)
 4017158:	dc000117 	ldw	r16,4(sp)
 401715c:	dec00404 	addi	sp,sp,16
 4017160:	f800283a 	ret
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
    {
      dprintf("[tse_sgdma_read_init] Fatal error: No free packet buffers for RX\n");
 4017164:	010100f4 	movhi	r4,1027
 4017168:	21106104 	addi	r4,r4,16772
 401716c:	4002fec0 	call	4002fec <puts>
      tse_ptr->netp->n_mib->ifInDiscards++;
 4017170:	80c00817 	ldw	r3,32(r16)
 4017174:	017ffac4 	movi	r5,-21
 4017178:	19002717 	ldw	r4,156(r3)
 401717c:	20800c17 	ldw	r2,48(r4)
 4017180:	10800044 	addi	r2,r2,1
 4017184:	20800c15 	stw	r2,48(r4)
  tse_ptr->currdescriptor_ptr =  &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];

  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->currdescriptor_ptr);
  
  return SUCCESS;
}
 4017188:	2805883a 	mov	r2,r5
 401718c:	dfc00317 	ldw	ra,12(sp)
 4017190:	dc400217 	ldw	r17,8(sp)
 4017194:	dc000117 	ldw	r16,4(sp)
 4017198:	dec00404 	addi	sp,sp,16
 401719c:	f800283a 	ret

040171a0 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 40171a0:	defff704 	addi	sp,sp,-36
 40171a4:	dc800415 	stw	r18,16(sp)
   int status = SUCCESS;
   
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 40171a8:	24801324 	muli	r18,r4,76
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 40171ac:	dcc00515 	stw	r19,20(sp)
   int status = SUCCESS;
   
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 40171b0:	04c10134 	movhi	r19,1028
 40171b4:	9ccaaa04 	addi	r19,r19,10920
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 40171b8:	dc000215 	stw	r16,8(sp)
   int status = SUCCESS;
   
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 40171bc:	94e1883a 	add	r16,r18,r19
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 40171c0:	dc400315 	stw	r17,12(sp)
   int status = SUCCESS;
   
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 40171c4:	84401217 	ldw	r17,72(r16)
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 40171c8:	dd000615 	stw	r20,24(sp)
 40171cc:	2029883a 	mov	r20,r4
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
   
   dprintf("[tse_mac_init]\n");
 40171d0:	010100f4 	movhi	r4,1027
 40171d4:	21108304 	addi	r4,r4,16908
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 40171d8:	dfc00815 	stw	ra,32(sp)
 40171dc:	dd400715 	stw	r21,28(sp)
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
   
   dprintf("[tse_mac_init]\n");
 40171e0:	4002fec0 	call	4002fec <puts>
#ifdef PRINTIF
    dprintf("tse_mac_init %d\n", iface);
#endif    

    if (tse_hw->ext_desc_mem == 1) {
 40171e4:	88c00783 	ldbu	r3,30(r17)
 40171e8:	00800044 	movi	r2,1
 40171ec:	1880d726 	beq	r3,r2,401754c <tse_mac_init+0x3ac>
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
    }
    else {
        unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
 40171f0:	01002804 	movi	r4,160
 40171f4:	40266e00 	call	40266e0 <alt_uncached_malloc>
 40171f8:	1007883a 	mov	r3,r2
    
        while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 40171fc:	108007cc 	andi	r2,r2,31
 4017200:	10000326 	beq	r2,zero,4017210 <tse_mac_init+0x70>
        {
            temp_desc++;
 4017204:	18c00044 	addi	r3,r3,1
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
    }
    else {
        unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
    
        while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 4017208:	188007cc 	andi	r2,r3,31
 401720c:	103ffd1e 	bne	r2,zero,4017204 <tse_mac_init+0x64>
        {
            temp_desc++;
        }
        tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
 4017210:	94c5883a 	add	r2,r18,r19
 4017214:	10c00f15 	stw	r3,60(r2)
    }

   
   /* Get the Rx and Tx SGDMA addresses */
   sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
 4017218:	89000517 	ldw	r4,20(r17)
 401721c:	40141580 	call	4014158 <alt_avalon_sgdma_open>
 4017220:	1021883a 	mov	r16,r2
   
   if(!sgdma_tx_dev) {
 4017224:	1000ef26 	beq	r2,zero,40175e4 <tse_mac_init+0x444>
      dprintf("[triple_speed_ethernet_init] Error opening TX SGDMA\n");
      return ENP_RESOURCE;
   }
  
   sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
 4017228:	89000617 	ldw	r4,24(r17)
 401722c:	40141580 	call	4014158 <alt_avalon_sgdma_open>
   if(!sgdma_rx_dev) {
 4017230:	1000f126 	beq	r2,zero,40175f8 <tse_mac_init+0x458>
      dprintf("[triple_speed_ethernet_init] Error opening RX SGDMA\n");
      return ENP_RESOURCE;
   }

   /* Initialize mtip_mac_trans_info structure with values from <system.h>*/
   tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 4017234:	d8000015 	stw	zero,0(sp)
 4017238:	89400017 	ldw	r5,0(r17)
 401723c:	91000104 	addi	r4,r18,4
 4017240:	24c9883a 	add	r4,r4,r19
 4017244:	800d883a 	mov	r6,r16
 4017248:	100f883a 	mov	r7,r2
                                   (unsigned int)sgdma_tx_dev,            
                                   (unsigned int)sgdma_rx_dev,
                                   0);

   /* Reset RX-side SGDMA */
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,
 401724c:	94e1883a 	add	r16,r18,r19
      dprintf("[triple_speed_ethernet_init] Error opening RX SGDMA\n");
      return ENP_RESOURCE;
   }

   /* Initialize mtip_mac_trans_info structure with values from <system.h>*/
   tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 4017250:	401429c0 	call	401429c <tse_mac_initTransInfo2>
                                   (unsigned int)sgdma_tx_dev,            
                                   (unsigned int)sgdma_rx_dev,
                                   0);

   /* Reset RX-side SGDMA */
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,
 4017254:	80c00317 	ldw	r3,12(r16)
 4017258:	00800074 	movhi	r2,1
 401725c:	19000317 	ldw	r4,12(r3)
 4017260:	20800435 	stwio	r2,16(r4)
     ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
 4017264:	80c00317 	ldw	r3,12(r16)
 4017268:	18800317 	ldw	r2,12(r3)
 401726c:	10000435 	stwio	zero,16(r2)
   
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
 4017270:	88c0070b 	ldhu	r3,28(r17)
   ifp = tse[iface].netp;

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
 4017274:	81000117 	ldw	r4,4(r16)
   /* Reset RX-side SGDMA */
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,
     ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
   
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
 4017278:	80c00915 	stw	r3,36(r16)
   ifp = tse[iface].netp;

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
 401727c:	40168fc0 	call	40168fc <getPHYSpeed>
   speed = (result >> 1) & 0x07;
   duplex = result & 0x01;
    
   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 4017280:	80c00117 	ldw	r3,4(r16)
   
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
   ifp = tse[iface].netp;

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
 4017284:	102b883a 	mov	r21,r2
   speed = (result >> 1) & 0x07;
   duplex = result & 0x01;
    
   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 4017288:	008800c4 	movi	r2,8195
 401728c:	18800235 	stwio	r2,8(r3)
 4017290:	81000117 	ldw	r4,4(r16)
 4017294:	000b883a 	mov	r5,zero
 4017298:	00c9c484 	movi	r3,10002
 401729c:	21000204 	addi	r4,r4,8
 40172a0:	00000206 	br	40172ac <tse_mac_init+0x10c>
                             mmac_cc_RX_ENA_mask);
  
   x=0;
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
 40172a4:	29400044 	addi	r5,r5,1
 40172a8:	28c0ab26 	beq	r5,r3,4017558 <tse_mac_init+0x3b8>
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 40172ac:	20800037 	ldwio	r2,0(r4)
 40172b0:	1088000c 	andi	r2,r2,8192
 40172b4:	103ffb1e 	bne	r2,zero,40172a4 <tse_mac_init+0x104>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
       break;
     }
   }
   if(x >= 10000) {
 40172b8:	0089c3c4 	movi	r2,9999
 40172bc:	1140a616 	blt	r2,r5,4017558 <tse_mac_init+0x3b8>
     dprintf("TSEMAC SW reset bit never cleared!\n");
   }

   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 40172c0:	94c5883a 	add	r2,r18,r19
 40172c4:	10c00117 	ldw	r3,4(r2)
 40172c8:	19800237 	ldwio	r6,8(r3)
   if( (dat & 0x03) != 0 ) {
 40172cc:	308000cc 	andi	r2,r6,3
 40172d0:	10007226 	beq	r2,zero,401749c <tse_mac_init+0x2fc>
     dprintf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
 40172d4:	300b883a 	mov	r5,r6
 40172d8:	010100f4 	movhi	r4,1027
 40172dc:	2110aa04 	addi	r4,r4,17064
 40172e0:	4002ed40 	call	4002ed4 <printf>
  
    /* Hack code to determine the Channel number <- Someone please fix this ugly code in the future */
    extern alt_u8 mac_group_count;
    extern alt_tse_mac_group *pmac_groups[TSE_MAX_MAC_IN_SYSTEM];
      
    if(tse_hw->use_shared_fifo == 1) {
 40172e4:	88c00903 	ldbu	r3,36(r17)
 40172e8:	00800044 	movi	r2,1
 40172ec:	18807126 	beq	r3,r2,40174b4 <tse_mac_init+0x314>
      IOWR_ALTERA_MULTI_CHAN_FIFO_SEC_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,tse_hw->tse_shared_fifo_rx_depth);
      IOWR_ALTERA_MULTI_CHAN_FIFO_ALMOST_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,((tse_hw->tse_shared_fifo_rx_depth) - 140));
  }
  else {
      // Initialize MAC registers
      IOWR_ALTERA_TSEMAC_FRM_LENGTH(tse[iface].mi.base, ALTERA_TSE_MAC_MAX_FRAME_LENGTH); 
 40172f0:	94cb883a 	add	r5,r18,r19
 40172f4:	28c00117 	ldw	r3,4(r5)
 40172f8:	00817b84 	movi	r2,1518
 40172fc:	18800535 	stwio	r2,20(r3)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 4017300:	29800117 	ldw	r6,4(r5)
 4017304:	01000204 	movi	r4,8
 4017308:	31000b35 	stwio	r4,44(r6)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(tse[iface].mi.base, 8);
 401730c:	28800117 	ldw	r2,4(r5)
 4017310:	11000c35 	stwio	r4,48(r2)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 4017314:	28c00117 	ldw	r3,4(r5)
 4017318:	19000d35 	stwio	r4,52(r3)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(tse[iface].mi.base,  3);
 401731c:	29800117 	ldw	r6,4(r5)
 4017320:	00c000c4 	movi	r3,3
 4017324:	30c00e35 	stwio	r3,56(r6)
      IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_tx_depth - 16); //1024/4;  
 4017328:	8880010b 	ldhu	r2,4(r17)
 401732c:	29000117 	ldw	r4,4(r5)
 4017330:	10bffc04 	addi	r2,r2,-16
 4017334:	20800935 	stwio	r2,36(r4)
      IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(tse[iface].mi.base,  0); //32/4; // start transmit when there are 48 bytes
 4017338:	28c00117 	ldw	r3,4(r5)
 401733c:	18000a35 	stwio	zero,40(r3)
      IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_rx_depth - 16); //4000/4);
 4017340:	8880018b 	ldhu	r2,6(r17)
 4017344:	29000117 	ldw	r4,4(r5)
 4017348:	10bffc04 	addi	r2,r2,-16
 401734c:	20800735 	stwio	r2,28(r4)
      IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(tse[iface].mi.base,  0);
 4017350:	28c00117 	ldw	r3,4(r5)
 4017354:	18000835 	stwio	zero,32(r3)
      tse[iface].rxShift16OK = 0;
    }
  } /* if(ETHHDR_BIAS == 0) */
 
  if(ETHHDR_BIAS == 2) {
    IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 4017358:	94cd883a 	add	r6,r18,r19
 401735c:	30c00117 	ldw	r3,4(r6)
 4017360:	00800134 	movhi	r2,4
 4017364:	18803a35 	stwio	r2,232(r3)
 
    /*
     * check if the MAC supports the 16-bit shift option allowing us
     * to send BIASed frames without copying. Used by the send function later.
     */
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
 4017368:	30c00117 	ldw	r3,4(r6)
 401736c:	18803a37 	ldwio	r2,232(r3)
 4017370:	1080012c 	andhi	r2,r2,4
 4017374:	10008426 	beq	r2,zero,4017588 <tse_mac_init+0x3e8>
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
 4017378:	01000044 	movi	r4,1
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
      return ENP_LOGIC;
    }
  
    /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 401737c:	00808034 	movhi	r2,512
     * check if the MAC supports the 16-bit shift option allowing us
     * to send BIASed frames without copying. Used by the send function later.
     */
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
 4017380:	31000a15 	stw	r4,40(r6)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
      return ENP_LOGIC;
    }
  
    /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 4017384:	18803b35 	stwio	r2,236(r3)
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
 4017388:	30c00117 	ldw	r3,4(r6)
 401738c:	18803b37 	ldwio	r2,236(r3)
 4017390:	1080802c 	andhi	r2,r2,512
 4017394:	10008b26 	beq	r2,zero,40175c4 <tse_mac_init+0x424>
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
   ifp = tse[iface].netp;

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
   speed = (result >> 1) & 0x07;
 4017398:	a805d07a 	srai	r2,r21,1
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
 401739c:	31000b15 	stw	r4,44(r6)
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
   ifp = tse[iface].netp;

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
   speed = (result >> 1) & 0x07;
 40173a0:	10c001cc 	andi	r3,r2,7
        ALTERA_TSEMAC_CMD_NO_LENGTH_CHECK_MSK |
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
 40173a4:	19007226 	beq	r3,r4,4017570 <tse_mac_init+0x3d0>
    dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 100 Mbps */
  else if(speed == 0x02) {
 40173a8:	00800084 	movi	r2,2
 40173ac:	18800226 	beq	r3,r2,40173b8 <tse_mac_init+0x218>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 10 Mbps */
  else if(speed == 0x04) {
 40173b0:	00800104 	movi	r2,4
 40173b4:	18807126 	beq	r3,r2,401757c <tse_mac_init+0x3dc>
 40173b8:	00c14034 	movhi	r3,1280
 40173bc:	18c080c4 	addi	r3,r3,515
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 40173c0:	a880004c 	andi	r2,r21,1
 40173c4:	1000011e 	bne	r2,zero,40173cc <tse_mac_init+0x22c>
    dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 40173c8:	18c10014 	ori	r3,r3,1024
  /* Full Duplex */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
  }
          
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 40173cc:	94e3883a 	add	r17,r18,r19
 40173d0:	88800117 	ldw	r2,4(r17)
 40173d4:	10c00235 	stwio	r3,8(r2)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
 40173d8:	88c00117 	ldw	r3,4(r17)
 40173dc:	19400237 	ldwio	r5,8(r3)
 40173e0:	010100f4 	movhi	r4,1027
 40173e4:	2110f604 	addi	r4,r4,17368
 40173e8:	4002ed40 	call	4002ed4 <printf>
  IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
  
                          
#ifdef ALT_INICHE
   /* Set the MAC address */  
   IOWR_ALTERA_TSEMAC_MAC_0(tse[iface].mi.base,
 40173ec:	89400643 	ldbu	r5,25(r17)
 40173f0:	88c00683 	ldbu	r3,26(r17)
 40173f4:	890006c3 	ldbu	r4,27(r17)
 40173f8:	280a923a 	slli	r5,r5,8
 40173fc:	88800603 	ldbu	r2,24(r17)
 4017400:	2008963a 	slli	r4,r4,24
 4017404:	1806943a 	slli	r3,r3,16
 4017408:	89800117 	ldw	r6,4(r17)
 401740c:	1144b03a 	or	r2,r2,r5
 4017410:	1906b03a 	or	r3,r3,r4
 4017414:	10c4b03a 	or	r2,r2,r3
 4017418:	30800335 	stwio	r2,12(r6)
                           ((int)((unsigned char) tse[iface].mac_addr[0]) | 
                            (int)((unsigned char) tse[iface].mac_addr[1] <<  8) |
                            (int)((unsigned char) tse[iface].mac_addr[2] << 16) | 
                            (int)((unsigned char) tse[iface].mac_addr[3] << 24)));
  
   IOWR_ALTERA_TSEMAC_MAC_1(tse[iface].mi.base, 
 401741c:	88c00743 	ldbu	r3,29(r17)
 4017420:	89000703 	ldbu	r4,28(r17)
 4017424:	89400117 	ldw	r5,4(r17)
 4017428:	1806923a 	slli	r3,r3,8
 401742c:	20c8b03a 	or	r4,r4,r3
 4017430:	29000435 	stwio	r4,16(r5)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
 4017434:	a505883a 	add	r2,r20,r20
 4017438:	00c10134 	movhi	r3,1028
 401743c:	18cbbb04 	addi	r3,r3,12012
 4017440:	1085883a 	add	r2,r2,r2
 4017444:	10c5883a 	add	r2,r2,r3
 4017448:	11400017 	ldw	r5,0(r2)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
   
   /* Install SGDMA (RX) interrupt handler */
   alt_avalon_sgdma_register_callback(
 401744c:	89000317 	ldw	r4,12(r17)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
 4017450:	00c00044 	movi	r3,1
 4017454:	28802717 	ldw	r2,156(r5)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
   
   /* Install SGDMA (RX) interrupt handler */
   alt_avalon_sgdma_register_callback(
 4017458:	01800644 	movi	r6,25
 401745c:	01410074 	movhi	r5,1025
 4017460:	295e7704 	addi	r5,r5,31196

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
 4017464:	10c00715 	stw	r3,28(r2)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
 4017468:	10c00615 	stw	r3,24(r2)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
   
   /* Install SGDMA (RX) interrupt handler */
   alt_avalon_sgdma_register_callback(
 401746c:	880f883a 	mov	r7,r17
 4017470:	4013b8c0 	call	4013b8c <alt_avalon_sgdma_register_callback>
        tse[iface].mi.rx_sgdma,
        (alt_avalon_sgdma_callback)&tse_sgdmaRx_isr,
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,
        (void*)(&tse[iface]));
    
  status = tse_sgdma_read_init(&tse[iface]);
 4017474:	8809883a 	mov	r4,r17
  
  return status;
}
 4017478:	dfc00817 	ldw	ra,32(sp)
 401747c:	dd400717 	ldw	r21,28(sp)
 4017480:	dd000617 	ldw	r20,24(sp)
 4017484:	dcc00517 	ldw	r19,20(sp)
 4017488:	dc800417 	ldw	r18,16(sp)
 401748c:	dc400317 	ldw	r17,12(sp)
 4017490:	dc000217 	ldw	r16,8(sp)
 4017494:	dec00904 	addi	sp,sp,36
        tse[iface].mi.rx_sgdma,
        (alt_avalon_sgdma_callback)&tse_sgdmaRx_isr,
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,
        (void*)(&tse[iface]));
    
  status = tse_sgdma_read_init(&tse[iface]);
 4017498:	40170901 	jmpi	4017090 <tse_sgdma_read_init>
   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
   if( (dat & 0x03) != 0 ) {
     dprintf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
   } 
   else {
     dprintf("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat);
 401749c:	010100f4 	movhi	r4,1027
 40174a0:	2110be04 	addi	r4,r4,17144
 40174a4:	4002ed40 	call	4002ed4 <printf>
  
    /* Hack code to determine the Channel number <- Someone please fix this ugly code in the future */
    extern alt_u8 mac_group_count;
    extern alt_tse_mac_group *pmac_groups[TSE_MAX_MAC_IN_SYSTEM];
      
    if(tse_hw->use_shared_fifo == 1) {
 40174a8:	88c00903 	ldbu	r3,36(r17)
 40174ac:	00800044 	movi	r2,1
 40174b0:	18bf8f1e 	bne	r3,r2,40172f0 <tse_mac_init+0x150>
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 40174b4:	00810134 	movhi	r2,1028
 40174b8:	10a90a44 	addi	r2,r2,-23511
 40174bc:	12c00003 	ldbu	r11,0(r2)
 40174c0:	58001a26 	beq	r11,zero,401752c <tse_mac_init+0x38c>
 40174c4:	0015883a 	mov	r10,zero
 40174c8:	02410134 	movhi	r9,1028
 40174cc:	4a4a9604 	addi	r9,r9,10840
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 40174d0:	4a000017 	ldw	r8,0(r9)
 40174d4:	41c00003 	ldbu	r7,0(r8)
 40174d8:	38000e26 	beq	r7,zero,4017514 <tse_mac_init+0x374>
 40174dc:	400b883a 	mov	r5,r8
 40174e0:	0009883a 	mov	r4,zero
 40174e4:	00000206 	br	40174f0 <tse_mac_init+0x350>
 40174e8:	21000044 	addi	r4,r4,1
 40174ec:	21c0090e 	bge	r4,r7,4017514 <tse_mac_init+0x374>
          if (pmac_groups[channel_loop]->pmac_info[mac_loop]->psys_info == tse_hw) {
 40174f0:	28c00117 	ldw	r3,4(r5)
            tse[iface].channel = mac_loop;
 40174f4:	94cd883a 	add	r6,r18,r19
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 40174f8:	29400104 	addi	r5,r5,4
          if (pmac_groups[channel_loop]->pmac_info[mac_loop]->psys_info == tse_hw) {
 40174fc:	18800217 	ldw	r2,8(r3)
 4017500:	88bff91e 	bne	r17,r2,40174e8 <tse_mac_init+0x348>
            tse[iface].channel = mac_loop;
 4017504:	31000d15 	stw	r4,52(r6)
 4017508:	41c00003 	ldbu	r7,0(r8)
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 401750c:	21000044 	addi	r4,r4,1
 4017510:	21fff716 	blt	r4,r7,40174f0 <tse_mac_init+0x350>
      
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 4017514:	52800044 	addi	r10,r10,1
 4017518:	4a400104 	addi	r9,r9,4
 401751c:	5abfec1e 	bne	r11,r10,40174d0 <tse_mac_init+0x330>
      }
    }
    /* End of Hack code */
  

  if(tse_hw->use_shared_fifo == 1) {
 4017520:	88c00903 	ldbu	r3,36(r17)
 4017524:	00800044 	movi	r2,1
 4017528:	18bf711e 	bne	r3,r2,40172f0 <tse_mac_init+0x150>
      IOWR_ALTERA_MULTI_CHAN_FIFO_SEC_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,tse_hw->tse_shared_fifo_rx_depth);
 401752c:	89000d17 	ldw	r4,52(r17)
 4017530:	88c00f17 	ldw	r3,60(r17)
 4017534:	20c00035 	stwio	r3,0(r4)
      IOWR_ALTERA_MULTI_CHAN_FIFO_ALMOST_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,((tse_hw->tse_shared_fifo_rx_depth) - 140));
 4017538:	88800f17 	ldw	r2,60(r17)
 401753c:	88c00d17 	ldw	r3,52(r17)
 4017540:	10bfdd04 	addi	r2,r2,-140
 4017544:	18800235 	stwio	r2,8(r3)
 4017548:	003f8306 	br	4017358 <tse_mac_init+0x1b8>
#ifdef PRINTIF
    dprintf("tse_mac_init %d\n", iface);
#endif    

    if (tse_hw->ext_desc_mem == 1) {
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
 401754c:	88800817 	ldw	r2,32(r17)
 4017550:	80800f15 	stw	r2,60(r16)
 4017554:	003f3006 	br	4017218 <tse_mac_init+0x78>
     if( x++ > 10000 ) {
       break;
     }
   }
   if(x >= 10000) {
     dprintf("TSEMAC SW reset bit never cleared!\n");
 4017558:	010100f4 	movhi	r4,1027
 401755c:	2110a104 	addi	r4,r4,17028
 4017560:	d9400115 	stw	r5,4(sp)
 4017564:	4002fec0 	call	4002fec <puts>
 4017568:	d9400117 	ldw	r5,4(sp)
 401756c:	003f5406 	br	40172c0 <tse_mac_init+0x120>
        ALTERA_TSEMAC_CMD_NO_LENGTH_CHECK_MSK |
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
 4017570:	00c14034 	movhi	r3,1280
 4017574:	18c082c4 	addi	r3,r3,523
 4017578:	003f9106 	br	40173c0 <tse_mac_init+0x220>
  else if(speed == 0x02) {
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
  }
  /* 10 Mbps */
  else if(speed == 0x04) {
 401757c:	00c1c034 	movhi	r3,1792
 4017580:	18c080c4 	addi	r3,r3,515
 4017584:	003f8e06 	br	40173c0 <tse_mac_init+0x220>
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
    } 
    else {
      tse[iface].txShift16OK = 0;
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
 4017588:	010100f4 	movhi	r4,1027
 401758c:	2110c604 	addi	r4,r4,17176
 4017590:	01400084 	movi	r5,2
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
    } 
    else {
      tse[iface].txShift16OK = 0;
 4017594:	30000a15 	stw	zero,40(r6)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
 4017598:	4002ed40 	call	4002ed4 <printf>
 401759c:	00bffd44 	movi	r2,-11
        (void*)(&tse[iface]));
    
  status = tse_sgdma_read_init(&tse[iface]);
  
  return status;
}
 40175a0:	dfc00817 	ldw	ra,32(sp)
 40175a4:	dd400717 	ldw	r21,28(sp)
 40175a8:	dd000617 	ldw	r20,24(sp)
 40175ac:	dcc00517 	ldw	r19,20(sp)
 40175b0:	dc800417 	ldw	r18,16(sp)
 40175b4:	dc400317 	ldw	r17,12(sp)
 40175b8:	dc000217 	ldw	r16,8(sp)
 40175bc:	dec00904 	addi	sp,sp,36
 40175c0:	f800283a 	ret
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
    } 
    else {
      tse[iface].rxShift16OK = 0;
 40175c4:	94c5883a 	add	r2,r18,r19
      dprintf("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETHHDR_BIAS);
 40175c8:	010100f4 	movhi	r4,1027
 40175cc:	2110de04 	addi	r4,r4,17272
 40175d0:	01400084 	movi	r5,2
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
    } 
    else {
      tse[iface].rxShift16OK = 0;
 40175d4:	10000b15 	stw	zero,44(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETHHDR_BIAS);
 40175d8:	4002ed40 	call	4002ed4 <printf>
 40175dc:	00bffd44 	movi	r2,-11
 40175e0:	003fef06 	br	40175a0 <tse_mac_init+0x400>
   
   /* Get the Rx and Tx SGDMA addresses */
   sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
   
   if(!sgdma_tx_dev) {
      dprintf("[triple_speed_ethernet_init] Error opening TX SGDMA\n");
 40175e4:	010100f4 	movhi	r4,1027
 40175e8:	21108704 	addi	r4,r4,16924
 40175ec:	4002fec0 	call	4002fec <puts>
 40175f0:	00bffa84 	movi	r2,-22
 40175f4:	003fea06 	br	40175a0 <tse_mac_init+0x400>
      return ENP_RESOURCE;
   }
  
   sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
   if(!sgdma_rx_dev) {
      dprintf("[triple_speed_ethernet_init] Error opening RX SGDMA\n");
 40175f8:	010100f4 	movhi	r4,1027
 40175fc:	21109404 	addi	r4,r4,16976
 4017600:	4002fec0 	call	4002fec <puts>
 4017604:	00bffa84 	movi	r2,-22
 4017608:	003fe506 	br	40175a0 <tse_mac_init+0x400>

0401760c <prep_tse_mac>:
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
 401760c:	defffb04 	addi	sp,sp,-20
 4017610:	dcc00215 	stw	r19,8(sp)
 4017614:	2027883a 	mov	r19,r4
 4017618:	dd400315 	stw	r21,12(sp)
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
 401761c:	010100f4 	movhi	r4,1027
 4017620:	21110204 	addi	r4,r4,17416
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
 4017624:	282b883a 	mov	r21,r5
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
 4017628:	980b883a 	mov	r5,r19
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
 401762c:	dfc00415 	stw	ra,16(sp)
 4017630:	dc400115 	stw	r17,4(sp)
 4017634:	dc000015 	stw	r16,0(sp)
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
 4017638:	4002ed40 	call	4002ed4 <printf>
    {
        tse[index].sem = 0; /*Tx IDLE*/
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
 401763c:	9cc7883a 	add	r3,r19,r19
 4017640:	00810134 	movhi	r2,1028
 4017644:	108bbb04 	addi	r2,r2,12012
 4017648:	18c7883a 	add	r3,r3,r3
 401764c:	1887883a 	add	r3,r3,r2
 4017650:	1c000017 	ldw	r16,0(r3)
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
    {
        tse[index].sem = 0; /*Tx IDLE*/
 4017654:	99401324 	muli	r5,r19,76
 4017658:	01810134 	movhi	r6,1028
 401765c:	318aaa04 	addi	r6,r6,10920
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
 4017660:	00810134 	movhi	r2,1028
 4017664:	10a93304 	addi	r2,r2,-23348
    {
        tse[index].sem = 0; /*Tx IDLE*/
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
 4017668:	81002717 	ldw	r4,156(r16)
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
    {
        tse[index].sem = 0; /*Tx IDLE*/
 401766c:	29a3883a 	add	r17,r5,r6
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
 4017670:	10c00017 	ldw	r3,0(r2)
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
    {
        tse[index].sem = 0; /*Tx IDLE*/
 4017674:	88000c15 	stw	zero,48(r17)
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
 4017678:	81c02a17 	ldw	r7,168(r16)
        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
 401767c:	008100f4 	movhi	r2,1027
 4017680:	10910704 	addi	r2,r2,17436
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
 4017684:	20c00815 	stw	r3,32(r4)
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
 4017688:	20800115 	stw	r2,4(r4)
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
 401768c:	00c00404 	movi	r3,16
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */
 4017690:	00817a84 	movi	r2,1514
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
 4017694:	80c00815 	stw	r3,32(r16)
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */
 4017698:	80800915 	stw	r2,36(r16)

        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
 401769c:	00c10074 	movhi	r3,1025
 40176a0:	18dc6804 	addi	r3,r3,29088
        ifp->pkt_send =     NULL;
        ifp->raw_send =     tse_mac_raw_send;
 40176a4:	00810074 	movhi	r2,1025
 40176a8:	109dff04 	addi	r2,r2,30716

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
 40176ac:	29400604 	addi	r5,r5,24
 40176b0:	298b883a 	add	r5,r5,r6
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
 40176b4:	02000184 	movi	r8,6
    {
        tse[index].sem = 0; /*Tx IDLE*/
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
 40176b8:	01800084 	movi	r6,2
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
 40176bc:	39c00214 	ori	r7,r7,8
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */

        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
 40176c0:	80c00215 	stw	r3,8(r16)
        ifp->pkt_send =     NULL;
        ifp->raw_send =     tse_mac_raw_send;
 40176c4:	80800315 	stw	r2,12(r16)
        ifp->n_close =      tse_mac_close;
 40176c8:	00c10074 	movhi	r3,1025
 40176cc:	18db9c04 	addi	r3,r3,28272
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
 40176d0:	00810074 	movhi	r2,1025
 40176d4:	109bc304 	addi	r2,r2,28428
        tse[index].sem = 0; /*Tx IDLE*/
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
 40176d8:	21800715 	stw	r6,28(r4)
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
 40176dc:	22000215 	stw	r8,8(r4)
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
    #endif
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
 40176e0:	21400515 	stw	r5,20(r4)
    {
        tse[index].sem = 0; /*Tx IDLE*/
        tse[index].tse = (void *)psys_info;

        ifp = nets[index];
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
 40176e4:	21800615 	stw	r6,24(r4)

        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
        ifp->pkt_send =     NULL;
        ifp->raw_send =     tse_mac_raw_send;
        ifp->n_close =      tse_mac_close;
 40176e8:	80c00515 	stw	r3,20(r16)
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
 40176ec:	80800715 	stw	r2,28(r16)
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
 40176f0:	81c02a15 	stw	r7,168(r16)
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
 40176f4:	82001115 	stw	r8,68(r16)
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */

        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
        ifp->pkt_send =     NULL;
 40176f8:	80000415 	stw	zero,16(r16)
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
    
    #ifdef ALT_INICHE
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
 40176fc:	8009883a 	mov	r4,r16
{
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
    {
        tse[index].sem = 0; /*Tx IDLE*/
        tse[index].tse = (void *)psys_info;
 4017700:	8d401215 	stw	r21,72(r17)
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
    
    #ifdef ALT_INICHE
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
 4017704:	4000f300 	call	4000f30 <get_mac_addr>
    
        index++;
   }
 
   return index;
}
 4017708:	98800044 	addi	r2,r19,1
    #endif /* ALT_INICHE */
    
        /* set cross-pointers between iface and tse structs */
        tse[index].index = index;
        tse[index].netp = ifp;
        ifp->n_local = (void*)(&tse[index]);
 401770c:	84402815 	stw	r17,160(r16)
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
    #endif /* ALT_INICHE */
    
        /* set cross-pointers between iface and tse structs */
        tse[index].index = index;
 4017710:	8cc00015 	stw	r19,0(r17)
        tse[index].netp = ifp;
 4017714:	8c000815 	stw	r16,32(r17)
    
        index++;
   }
 
   return index;
}
 4017718:	dfc00417 	ldw	ra,16(sp)
 401771c:	dd400317 	ldw	r21,12(sp)
 4017720:	dcc00217 	ldw	r19,8(sp)
 4017724:	dc400117 	ldw	r17,4(sp)
 4017728:	dc000017 	ldw	r16,0(sp)
 401772c:	dec00504 	addi	sp,sp,20
 4017730:	f800283a 	ret

04017734 <triple_speed_ethernet_init>:
    #ifdef PRINTIF
        dprintf("triple_speed_ethernet_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 4017734:	d1a81403 	ldbu	r6,-24496(gp)
 * @Return ENP_HARDWARE on error, otherwise return SUCCESS
 */

error_t triple_speed_ethernet_init(
    alt_iniche_dev              *p_dev)
{
 4017738:	deffff04 	addi	sp,sp,-4
 401773c:	dfc00015 	stw	ra,0(sp)
    #ifdef PRINTIF
        dprintf("triple_speed_ethernet_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 4017740:	30000e26 	beq	r6,zero,401777c <triple_speed_ethernet_init+0x48>
 4017744:	000b883a 	mov	r5,zero
 4017748:	000f883a 	mov	r7,zero
 401774c:	00c10134 	movhi	r3,1028
 4017750:	18ca9e04 	addi	r3,r3,10872
 4017754:	00000206 	br	4017760 <triple_speed_ethernet_init+0x2c>
 4017758:	18c00304 	addi	r3,r3,12
 401775c:	29800626 	beq	r5,r6,4017778 <triple_speed_ethernet_init+0x44>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
 4017760:	18800017 	ldw	r2,0(r3)
    #ifdef PRINTIF
        dprintf("triple_speed_ethernet_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 4017764:	29400044 	addi	r5,r5,1
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
 4017768:	20bffb1e 	bne	r4,r2,4017758 <triple_speed_ethernet_init+0x24>
 401776c:	180f883a 	mov	r7,r3
    #ifdef PRINTIF
        dprintf("triple_speed_ethernet_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 4017770:	18c00304 	addi	r3,r3,12
 4017774:	29bffa1e 	bne	r5,r6,4017760 <triple_speed_ethernet_init+0x2c>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
            p_driver_data = &tse_iniche_dev_driver_data[i];
        }
    }
    /* If pointer could not found */
    if(p_driver_data == 0) {
 4017778:	3800041e 	bne	r7,zero,401778c <triple_speed_ethernet_init+0x58>
        return ENP_HARDWARE;
    }
    
    prep_tse_mac(p_dev->if_num, psys_info + p_driver_data->hw_channel_number);
    
    return SUCCESS;
 401777c:	00bff744 	movi	r2,-35
}
 4017780:	dfc00017 	ldw	ra,0(sp)
 4017784:	dec00104 	addi	sp,sp,4
 4017788:	f800283a 	ret
    if(p_driver_data == 0) {
        return ENP_HARDWARE;
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 401778c:	00810134 	movhi	r2,1028
 4017790:	10a12604 	addi	r2,r2,-31592
 4017794:	12000003 	ldbu	r8,0(r2)
 4017798:	403ff826 	beq	r8,zero,401777c <triple_speed_ethernet_init+0x48>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
 401779c:	39800117 	ldw	r6,4(r7)
 40177a0:	000b883a 	mov	r5,zero
 40177a4:	0013883a 	mov	r9,zero
 40177a8:	00c10134 	movhi	r3,1028
 40177ac:	18e97004 	addi	r3,r3,-23104
 40177b0:	00000206 	br	40177bc <triple_speed_ethernet_init+0x88>
    if(p_driver_data == 0) {
        return ENP_HARDWARE;
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 40177b4:	18c01204 	addi	r3,r3,72
 40177b8:	2a000626 	beq	r5,r8,40177d4 <triple_speed_ethernet_init+0xa0>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
 40177bc:	18800017 	ldw	r2,0(r3)
    if(p_driver_data == 0) {
        return ENP_HARDWARE;
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 40177c0:	29400044 	addi	r5,r5,1
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
 40177c4:	11bffb1e 	bne	r2,r6,40177b4 <triple_speed_ethernet_init+0x80>
 40177c8:	1813883a 	mov	r9,r3
    if(p_driver_data == 0) {
        return ENP_HARDWARE;
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 40177cc:	18c01204 	addi	r3,r3,72
 40177d0:	2a3ffa1e 	bne	r5,r8,40177bc <triple_speed_ethernet_init+0x88>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
            psys_info = &tse_mac_device[i];
        }
    }
    /* If pointer could not found */
    if(psys_info == 0) {
 40177d4:	483fe926 	beq	r9,zero,401777c <triple_speed_ethernet_init+0x48>
        return ENP_HARDWARE;
    }
    
    prep_tse_mac(p_dev->if_num, psys_info + p_driver_data->hw_channel_number);
 40177d8:	39400203 	ldbu	r5,8(r7)
 40177dc:	21000517 	ldw	r4,20(r4)
 40177e0:	29401224 	muli	r5,r5,72
 40177e4:	2a4b883a 	add	r5,r5,r9
 40177e8:	401760c0 	call	401760c <prep_tse_mac>
 40177ec:	0005883a 	mov	r2,zero
    
    return SUCCESS;
}
 40177f0:	dfc00017 	ldw	ra,0(sp)
 40177f4:	dec00104 	addi	sp,sp,4
 40177f8:	f800283a 	ret

040177fc <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned data_bytes)
{
 40177fc:	defe6f04 	addi	sp,sp,-1604
 4017800:	dc418b15 	stw	r17,1580(sp)
   int result,i,tx_length;
   unsigned len = data_bytes;

   ins_tse_info* tse_ptr = (ins_tse_info*) net->n_local;
 4017804:	24402817 	ldw	r17,160(r4)
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned data_bytes)
{
 4017808:	dcc18d15 	stw	r19,1588(sp)
 401780c:	dc818c15 	stw	r18,1584(sp)
   int result,i,tx_length;
   unsigned len = data_bytes;

   ins_tse_info* tse_ptr = (ins_tse_info*) net->n_local;

   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse_ptr->tse;
 4017810:	8cc01217 	ldw	r19,72(r17)
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned data_bytes)
{
 4017814:	dc018a15 	stw	r16,1576(sp)
 4017818:	2025883a 	mov	r18,r4
 401781c:	3021883a 	mov	r16,r6
 4017820:	dfc19015 	stw	ra,1600(sp)
 4017824:	dd418f15 	stw	r21,1596(sp)
 4017828:	dd018e15 	stw	r20,1592(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401782c:	002b303a 	rdctl	r21,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017830:	00bfff84 	movi	r2,-2
 4017834:	a884703a 	and	r2,r21,r2
 4017838:	1001703a 	wrctl	status,r2
   char buf2[1560];

   OS_ENTER_CRITICAL();
   mi = &tse_ptr->mi;
   
   if(tse_ptr->sem!=0) /* Tx is busy*/
 401783c:	88c00c17 	ldw	r3,48(r17)
 4017840:	1800601e 	bne	r3,zero,40179c4 <tse_mac_raw_send+0x1c8>
      dprintf("raw_send CALLED AGAIN!!!\n");
      OS_EXIT_CRITICAL();
      return ENP_RESOURCE;
   }
 
   tse_ptr->sem = 1;  
 4017844:	00800044 	movi	r2,1

   if(((unsigned long)data & 0x03) == 0) 
 4017848:	28c000cc 	andi	r3,r5,3
      dprintf("raw_send CALLED AGAIN!!!\n");
      OS_EXIT_CRITICAL();
      return ENP_RESOURCE;
   }
 
   tse_ptr->sem = 1;  
 401784c:	88800c15 	stw	r2,48(r17)

   if(((unsigned long)data & 0x03) == 0) 
 4017850:	18002a1e 	bne	r3,zero,40178fc <tse_mac_raw_send+0x100>
   { 
      /* 32-bit aligned start, then header starts ETHHDR_BIAS later => 16 bit shift is ok */    
      ActualData = (unsigned int*)data;  /* base driver will detect 16-bit shift. */
 4017854:	2809883a 	mov	r4,r5
      }
      ActualData = (unsigned int*)buf2;
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
 4017858:	01400104 	movi	r5,4
 401785c:	40266a80 	call	40266a8 <alt_remap_cached>

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 4017860:	9a000903 	ldbu	r8,36(r19)
      }
      ActualData = (unsigned int*)buf2;
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
 4017864:	100b883a 	mov	r5,r2

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 4017868:	00800044 	movi	r2,1
   int cpu_sr;
   /* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
   char buf2[1560];

   OS_ENTER_CRITICAL();
   mi = &tse_ptr->mi;
 401786c:	8d000104 	addi	r20,r17,4
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 4017870:	40803526 	beq	r8,r2,4017948 <tse_mac_raw_send+0x14c>
           0);                                       // atlantic channel (don't know/don't care: set to 0)

        tx_length = tse_mac_sTxWrite(mi,tse_ptr->desc);
        result = 0;
   }
   else if( len > ALTERA_TSE_MIN_MTU_SIZE ) {    
 4017874:	00800384 	movi	r2,14
 4017878:	1400352e 	bgeu	r2,r16,4017950 <tse_mac_raw_send+0x154>

       /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
 401787c:	89000f17 	ldw	r4,60(r17)
 4017880:	00800044 	movi	r2,1
 4017884:	280d883a 	mov	r6,r5
 4017888:	81ffffcc 	andi	r7,r16,65535
 401788c:	21400804 	addi	r5,r4,32
 4017890:	d8800215 	stw	r2,8(sp)
 4017894:	d8000015 	stw	zero,0(sp)
 4017898:	d8800115 	stw	r2,4(sp)
 401789c:	d8000315 	stw	zero,12(sp)
 40178a0:	40140280 	call	4014028 <alt_avalon_sgdma_construct_mem_to_stream_desc>
           1,                                        // generate sop
           1,                                        // generate endofpacket signal
           0);                                       // atlantic channel (don't know/don't care: set to 0)
                  
    
       tx_length = tse_mac_sTxWrite(mi,tse_ptr->desc);
 40178a4:	89400f17 	ldw	r5,60(r17)
 40178a8:	a009883a 	mov	r4,r20
 40178ac:	4016dd80 	call	4016dd8 <tse_mac_sTxWrite>
      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 40178b0:	91002717 	ldw	r4,156(r18)
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
      tse_ptr->sem = 0;
 40178b4:	88000c15 	stw	zero,48(r17)
      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 40178b8:	20c00f17 	ldw	r3,60(r4)
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
 40178bc:	20801017 	ldw	r2,64(r4)
      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 40178c0:	1c07883a 	add	r3,r3,r16
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
 40178c4:	10800044 	addi	r2,r2,1
 40178c8:	20801015 	stw	r2,64(r4)
      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 40178cc:	20c00f15 	stw	r3,60(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40178d0:	a801703a 	wrctl	status,r21
 40178d4:	0005883a 	mov	r2,zero
      tse_ptr->sem = 0;

      OS_EXIT_CRITICAL();
      return SUCCESS;  /*success */
   }
}
 40178d8:	dfc19017 	ldw	ra,1600(sp)
 40178dc:	dd418f17 	ldw	r21,1596(sp)
 40178e0:	dd018e17 	ldw	r20,1592(sp)
 40178e4:	dcc18d17 	ldw	r19,1588(sp)
 40178e8:	dc818c17 	ldw	r18,1584(sp)
 40178ec:	dc418b17 	ldw	r17,1580(sp)
 40178f0:	dc018a17 	ldw	r16,1576(sp)
 40178f4:	dec19104 	addi	sp,sp,1604
 40178f8:	f800283a 	ret
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
 40178fc:	30000a26 	beq	r6,zero,4017928 <tse_mac_raw_send+0x12c>
   tse_ptr->sem = 1;  

   if(((unsigned long)data & 0x03) == 0) 
   { 
      /* 32-bit aligned start, then header starts ETHHDR_BIAS later => 16 bit shift is ok */    
      ActualData = (unsigned int*)data;  /* base driver will detect 16-bit shift. */
 4017900:	000d883a 	mov	r6,zero
 4017904:	0005883a 	mov	r2,zero
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
         buf2[i] = IORD_8DIRECT(&data[i], 0);
 4017908:	2885883a 	add	r2,r5,r2
 401790c:	11000023 	ldbuio	r4,0(r2)
 4017910:	d8800404 	addi	r2,sp,16
 4017914:	1187883a 	add	r3,r2,r6
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
 4017918:	31800044 	addi	r6,r6,1
         buf2[i] = IORD_8DIRECT(&data[i], 0);
 401791c:	19000005 	stb	r4,0(r3)
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
 4017920:	3005883a 	mov	r2,r6
 4017924:	343ff81e 	bne	r6,r16,4017908 <tse_mac_raw_send+0x10c>
      }
      ActualData = (unsigned int*)buf2;
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
 4017928:	01400104 	movi	r5,4
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
         buf2[i] = IORD_8DIRECT(&data[i], 0);
      }
      ActualData = (unsigned int*)buf2;
 401792c:	d9000404 	addi	r4,sp,16
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
 4017930:	40266a80 	call	40266a8 <alt_remap_cached>

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 4017934:	9a000903 	ldbu	r8,36(r19)
      }
      ActualData = (unsigned int*)buf2;
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
 4017938:	100b883a 	mov	r5,r2

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 401793c:	00800044 	movi	r2,1
   int cpu_sr;
   /* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
   char buf2[1560];

   OS_ENTER_CRITICAL();
   mi = &tse_ptr->mi;
 4017940:	8d000104 	addi	r20,r17,4
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 4017944:	40bfcb1e 	bne	r8,r2,4017874 <tse_mac_raw_send+0x78>
 4017948:	00800384 	movi	r2,14
 401794c:	14000d36 	bltu	r2,r16,4017984 <tse_mac_raw_send+0x188>
       result = -3;
   }

   if(result < 0)   /* SGDMA not available */
   {
      dprintf("raw_send() SGDMA not available, ret=%d, len=%d\n",result, len);
 4017950:	800d883a 	mov	r6,r16
 4017954:	010100f4 	movhi	r4,1027
 4017958:	21111404 	addi	r4,r4,17488
 401795c:	017fff44 	movi	r5,-3
 4017960:	4002ed40 	call	4002ed4 <printf>
      net->n_mib->ifOutDiscards++;
 4017964:	90c02717 	ldw	r3,156(r18)
      tse_ptr->sem = 0;
 4017968:	88000c15 	stw	zero,48(r17)
   }

   if(result < 0)   /* SGDMA not available */
   {
      dprintf("raw_send() SGDMA not available, ret=%d, len=%d\n",result, len);
      net->n_mib->ifOutDiscards++;
 401796c:	18801217 	ldw	r2,72(r3)
 4017970:	10800044 	addi	r2,r2,1
 4017974:	18801215 	stw	r2,72(r3)
 4017978:	a801703a 	wrctl	status,r21
 401797c:	00bffa84 	movi	r2,-22
 4017980:	003fd506 	br	40178d8 <tse_mac_raw_send+0xdc>
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 4017984:	88800d17 	ldw	r2,52(r17)
 4017988:	98c00b17 	ldw	r3,44(r19)
 401798c:	1085883a 	add	r2,r2,r2
 4017990:	1085883a 	add	r2,r2,r2
 4017994:	10c5883a 	add	r2,r2,r3
 4017998:	11000037 	ldwio	r4,0(r2)
 401799c:	00c00344 	movi	r3,13
 40179a0:	193fb616 	blt	r3,r4,401787c <tse_mac_raw_send+0x80>
   {
        /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
 40179a4:	89000f17 	ldw	r4,60(r17)
 40179a8:	280d883a 	mov	r6,r5
 40179ac:	81ffffcc 	andi	r7,r16,65535
 40179b0:	21400804 	addi	r5,r4,32
 40179b4:	da000215 	stw	r8,8(sp)
 40179b8:	d8000015 	stw	zero,0(sp)
 40179bc:	da000115 	stw	r8,4(sp)
 40179c0:	003fb606 	br	401789c <tse_mac_raw_send+0xa0>
   OS_ENTER_CRITICAL();
   mi = &tse_ptr->mi;
   
   if(tse_ptr->sem!=0) /* Tx is busy*/
   {
      dprintf("raw_send CALLED AGAIN!!!\n");
 40179c4:	010100f4 	movhi	r4,1027
 40179c8:	21110d04 	addi	r4,r4,17460
 40179cc:	4002fec0 	call	4002fec <puts>
 40179d0:	a801703a 	wrctl	status,r21
 40179d4:	00bffa84 	movi	r2,-22
 40179d8:	003fbf06 	br	40178d8 <tse_mac_raw_send+0xdc>

040179dc <tse_sgdmaRx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_sgdmaRx_isr(void * context)
{
 40179dc:	defffb04 	addi	sp,sp,-20
 40179e0:	dc000015 	stw	r16,0(sp)
 40179e4:	2021883a 	mov	r16,r4
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  sgdma_status = IORD_ALTERA_AVALON_SGDMA_STATUS(tse_ptr->mi.rx_sgdma->base);
 40179e8:	21000317 	ldw	r4,12(r4)
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_sgdmaRx_isr(void * context)
{
 40179ec:	dc800215 	stw	r18,8(sp)
  ins_tse_info* tse_ptr = (ins_tse_info *) context; 
  alt_u8 sgdma_status;
  
  /* Capture whether there are existing packets on stack rcv queue */
  int initial_rcvdq_len = rcvdq.q_len;
 40179f0:	04810134 	movhi	r18,1028
 40179f4:	948af604 	addi	r18,r18,11224
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_sgdmaRx_isr(void * context)
{
 40179f8:	dcc00315 	stw	r19,12(sp)
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  sgdma_status = IORD_ALTERA_AVALON_SGDMA_STATUS(tse_ptr->mi.rx_sgdma->base);
 40179fc:	20c00317 	ldw	r3,12(r4)
{
  ins_tse_info* tse_ptr = (ins_tse_info *) context; 
  alt_u8 sgdma_status;
  
  /* Capture whether there are existing packets on stack rcv queue */
  int initial_rcvdq_len = rcvdq.q_len;
 4017a00:	94c00217 	ldw	r19,8(r18)
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_sgdmaRx_isr(void * context)
{
 4017a04:	dfc00415 	stw	ra,16(sp)
 4017a08:	dc400115 	stw	r17,4(sp)
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  sgdma_status = IORD_ALTERA_AVALON_SGDMA_STATUS(tse_ptr->mi.rx_sgdma->base);
 4017a0c:	18800037 	ldwio	r2,0(r3)
  
  /* Why are we here; should we be? */
  if(sgdma_status & (ALTERA_AVALON_SGDMA_STATUS_CHAIN_COMPLETED_MSK | 
 4017a10:	1080030c 	andi	r2,r2,12
 4017a14:	1000071e 	bne	r2,zero,4017a34 <tse_sgdmaRx_isr+0x58>
    /* Wake up Niche stack if there are new packets are on queue */
    if ((rcvdq.q_len) > initial_rcvdq_len) {
      SignalPktDemux();
    }  
  } /* if (valid SGDMA interrupt) */
}
 4017a18:	dfc00417 	ldw	ra,16(sp)
 4017a1c:	dcc00317 	ldw	r19,12(sp)
 4017a20:	dc800217 	ldw	r18,8(sp)
 4017a24:	dc400117 	ldw	r17,4(sp)
 4017a28:	dc000017 	ldw	r16,0(sp)
 4017a2c:	dec00504 	addi	sp,sp,20
 4017a30:	f800283a 	ret
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
 4017a34:	80c00e17 	ldw	r3,56(r16)
 4017a38:	81400f17 	ldw	r5,60(r16)
 4017a3c:	1804917a 	slli	r2,r3,5
 4017a40:	1145883a 	add	r2,r2,r5
 4017a44:	11001004 	addi	r4,r2,64
 4017a48:	81001015 	stw	r4,64(r16)
    &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
  
  /* Grab status bits from descriptor under test. Bypass cache */
  desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
 4017a4c:	10801704 	addi	r2,r2,92
 4017a50:	11c00037 	ldwio	r7,0(r2)
  while ( desc_status & 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
 4017a54:	1200002b 	ldhuio	r8,0(r2)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
    rx_packet->nb_plen = pklen - 14;
    rx_packet->nb_tstamp = cticks;
 4017a58:	00810134 	movhi	r2,1028
 4017a5c:	10a93304 	addi	r2,r2,-23348
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
 4017a60:	18c7883a 	add	r3,r3,r3
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4017a64:	83000817 	ldw	r12,32(r16)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
 4017a68:	18c7883a 	add	r3,r3,r3
 4017a6c:	1c07883a 	add	r3,r3,r16
 4017a70:	19801117 	ldw	r6,68(r3)
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4017a74:	62402717 	ldw	r9,156(r12)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
    
    if( (desc_status & 
 4017a78:	380fd43a 	srai	r7,r7,16
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 4017a7c:	31400117 	ldw	r5,4(r6)
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4017a80:	48c00917 	ldw	r3,36(r9)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
    rx_packet->nb_plen = pklen - 14;
    rx_packet->nb_tstamp = cticks;
 4017a84:	12c00017 	ldw	r11,0(r2)
    rx_packet->net = tse_ptr->netp;
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
 4017a88:	2a80038b 	ldhu	r10,14(r5)
  while ( desc_status & 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
 4017a8c:	40bfff84 	addi	r2,r8,-2
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 4017a90:	1887883a 	add	r3,r3,r2
 4017a94:	48c00915 	stw	r3,36(r9)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
    rx_packet->nb_plen = pklen - 14;
 4017a98:	423ffc04 	addi	r8,r8,-16
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 4017a9c:	29400404 	addi	r5,r5,16
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
    
    if( (desc_status & 
 4017aa0:	39c01fcc 	andi	r7,r7,127
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
 4017aa4:	01017f04 	movi	r4,1532
    rx_packet->nb_tstamp = cticks;
    rx_packet->net = tse_ptr->netp;
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
 4017aa8:	3280080d 	sth	r10,32(r6)
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 4017aac:	31400315 	stw	r5,12(r6)
    rx_packet->nb_plen = pklen - 14;
 4017ab0:	32000415 	stw	r8,16(r6)
    rx_packet->nb_tstamp = cticks;
 4017ab4:	32c00515 	stw	r11,20(r6)
    rx_packet->net = tse_ptr->netp;
 4017ab8:	33000615 	stw	r12,24(r6)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
    rx_packet->type = eth->e_type;
    
    if( (desc_status & 
 4017abc:	3800121e 	bne	r7,zero,4017b08 <tse_sgdmaRx_isr+0x12c>
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
 4017ac0:	401bf840 	call	401bf84 <pk_alloc>
 4017ac4:	1023883a 	mov	r17,r2
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
        dprintf("No free buffers for rx\n");
 4017ac8:	010100f4 	movhi	r4,1027
 4017acc:	21104f04 	addi	r4,r4,16700
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
 4017ad0:	10002d26 	beq	r2,zero,4017b88 <tse_sgdmaRx_isr+0x1ac>
        dprintf("No free buffers for rx\n");
        tse_ptr->netp->n_mib->ifInDiscards++;
      }
      else {
        putq(&rcvdq, tse_ptr->pkt_array[tse_ptr->chain_loop]);
 4017ad4:	80800e17 	ldw	r2,56(r16)
 4017ad8:	9009883a 	mov	r4,r18
 4017adc:	1085883a 	add	r2,r2,r2
 4017ae0:	1085883a 	add	r2,r2,r2
 4017ae4:	1405883a 	add	r2,r2,r16
 4017ae8:	11401117 	ldw	r5,68(r2)
 4017aec:	401c2940 	call	401c294 <putq>
        tse_ptr->pkt_array[tse_ptr->chain_loop] = replacement_pkt;
 4017af0:	81400e17 	ldw	r5,56(r16)
 4017af4:	2945883a 	add	r2,r5,r5
 4017af8:	1085883a 	add	r2,r2,r2
 4017afc:	1405883a 	add	r2,r2,r16
 4017b00:	14401115 	stw	r17,68(r2)
 4017b04:	00000406 	br	4017b18 <tse_sgdmaRx_isr+0x13c>
      }
    } /* if(descriptor had no errors) */ 
    else {
      dprintf("RX descriptor reported error. packet dropped\n");
 4017b08:	010100f4 	movhi	r4,1027
 4017b0c:	21105504 	addi	r4,r4,16724
 4017b10:	4002fec0 	call	4002fec <puts>
 4017b14:	81400e17 	ldw	r5,56(r16)
    }     
             
    uncached_packet_payload = (alt_u32 *)alt_remap_cached(tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
 4017b18:	2945883a 	add	r2,r5,r5
 4017b1c:	1085883a 	add	r2,r2,r2
 4017b20:	1405883a 	add	r2,r2,r16
 4017b24:	10c01117 	ldw	r3,68(r2)
 4017b28:	01400104 	movi	r5,4
 4017b2c:	19000117 	ldw	r4,4(r3)
 4017b30:	40266a80 	call	40266a8 <alt_remap_cached>
    /* 
     * Re-cycle previously constructed SGDMA buffer directly rather
     * than calling the SGDMA utility routines. This saves some call/return
     * overhead and only does cache-bypass writes of what we need
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->write_addr, 0, 
 4017b34:	80c01017 	ldw	r3,64(r16)
 4017b38:	18800235 	stwio	r2,8(r3)
     *   |31...24|23..16|15.....................0|
     *   |control|status|actual_bytes_transferred|
     * 
     * Set relevant control bits and ensure the rest are cleared.
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0, 
 4017b3c:	81001017 	ldw	r4,64(r16)
 4017b40:	00a04034 	movhi	r2,33024
 4017b44:	20800735 	stwio	r2,28(r4)
        tse_ptr->mi.rx_sgdma, 
        &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
    }
#else
    /* Re-start SGDMA (always, if we have a single descriptor) */
    alt_avalon_sgdma_do_async_transfer(
 4017b48:	81400f17 	ldw	r5,60(r16)
 4017b4c:	81000317 	ldw	r4,12(r16)
 4017b50:	29401004 	addi	r5,r5,64
 4017b54:	4013d340 	call	4013d34 <alt_avalon_sgdma_do_async_transfer>
      tse_ptr->mi.rx_sgdma, 
      &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
#endif
  
    /* Wake up Niche stack if there are new packets are on queue */
    if ((rcvdq.q_len) > initial_rcvdq_len) {
 4017b58:	90c00217 	ldw	r3,8(r18)
 4017b5c:	98ffae0e 	bge	r19,r3,4017a18 <tse_sgdmaRx_isr+0x3c>
      SignalPktDemux();
 4017b60:	00810134 	movhi	r2,1028
 4017b64:	10a93604 	addi	r2,r2,-23336
 4017b68:	11000017 	ldw	r4,0(r2)
    }  
  } /* if (valid SGDMA interrupt) */
}
 4017b6c:	dfc00417 	ldw	ra,16(sp)
 4017b70:	dcc00317 	ldw	r19,12(sp)
 4017b74:	dc800217 	ldw	r18,8(sp)
 4017b78:	dc400117 	ldw	r17,4(sp)
 4017b7c:	dc000017 	ldw	r16,0(sp)
 4017b80:	dec00504 	addi	sp,sp,20
      &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
#endif
  
    /* Wake up Niche stack if there are new packets are on queue */
    if ((rcvdq.q_len) > initial_rcvdq_len) {
      SignalPktDemux();
 4017b84:	4011e781 	jmpi	4011e78 <OSSemPost>
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
        dprintf("No free buffers for rx\n");
 4017b88:	4002fec0 	call	4002fec <puts>
        tse_ptr->netp->n_mib->ifInDiscards++;
 4017b8c:	80c00817 	ldw	r3,32(r16)
 4017b90:	81400e17 	ldw	r5,56(r16)
 4017b94:	19002717 	ldw	r4,156(r3)
 4017b98:	20800c17 	ldw	r2,48(r4)
 4017b9c:	10800044 	addi	r2,r2,1
 4017ba0:	20800c15 	stw	r2,48(r4)
 4017ba4:	003fdc06 	br	4017b18 <tse_sgdmaRx_isr+0x13c>

04017ba8 <close>:
 * sockets.
 */
 
int close (int fd)
{
  return (fd < ALT_MAX_FD) ? alt_close (fd) : t_socketclose ((long) fd);
 4017ba8:	008007c4 	movi	r2,31
 4017bac:	11000116 	blt	r2,r4,4017bb4 <close+0xc>
 4017bb0:	4025e3c1 	jmpi	4025e3c <alt_close>
 4017bb4:	401e5981 	jmpi	401e598 <t_socketclose>

04017bb8 <iniche_devices_init>:
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
 4017bb8:	defff204 	addi	sp,sp,-56
 4017bbc:	dc000515 	stw	r16,20(sp)
                                netmask,
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
 4017bc0:	d4203017 	ldw	r16,-32576(gp)
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
 4017bc4:	ddc00c15 	stw	r23,48(sp)
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));
 4017bc8:	d5e03004 	addi	r23,gp,-32576
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
 4017bcc:	dcc00815 	stw	r19,32(sp)
 4017bd0:	dfc00d15 	stw	ra,52(sp)
 4017bd4:	dd800b15 	stw	r22,44(sp)
 4017bd8:	dd400a15 	stw	r21,40(sp)
 4017bdc:	dd000915 	stw	r20,36(sp)
 4017be0:	dc800715 	stw	r18,28(sp)
 4017be4:	dc400615 	stw	r17,24(sp)
 4017be8:	2027883a 	mov	r19,r4
    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
 4017bec:	85c02b26 	beq	r16,r23,4017c9c <iniche_devices_init+0xe4>
 4017bf0:	2105883a 	add	r2,r4,r4
 4017bf4:	1085883a 	add	r2,r2,r2
 4017bf8:	00c10134 	movhi	r3,1028
 4017bfc:	18cbbb04 	addi	r3,r3,12012
 4017c00:	10e5883a 	add	r18,r2,r3
 4017c04:	dd800404 	addi	r22,sp,16
 4017c08:	dd400204 	addi	r21,sp,8
 4017c0c:	dd000304 	addi	r20,sp,12
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
        p_dev->if_num = if_count;
        p_dev->p_net = nets[p_dev->if_num];
 4017c10:	90800017 	ldw	r2,0(r18)

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
 4017c14:	80c00317 	ldw	r3,12(r16)
    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
        p_dev->if_num = if_count;
 4017c18:	84c00515 	stw	r19,20(r16)
        p_dev->p_net = nets[p_dev->if_num];

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
 4017c1c:	8009883a 	mov	r4,r16
    while (p_dev != p_dev_list_end)
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
        p_dev->if_num = if_count;
        p_dev->p_net = nets[p_dev->if_num];
 4017c20:	80800615 	stw	r2,24(r16)

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
 4017c24:	84000415 	stw	r16,16(r16)
        p_dev->if_num = if_count;
        p_dev->p_net = nets[p_dev->if_num];

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
 4017c28:	183ee83a 	callr	r3

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
 4017c2c:	b00b883a 	mov	r5,r22
 4017c30:	8009883a 	mov	r4,r16
 4017c34:	d9800104 	addi	r6,sp,4
 4017c38:	a80f883a 	mov	r7,r21

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
 4017c3c:	84400617 	ldw	r17,24(r16)
#endif  /* IGMPv1 or IGMPv2 */
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
 4017c40:	9cc00044 	addi	r19,r19,1
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
 4017c44:	94800104 	addi	r18,r18,4
        (*(p_dev->init_func))(p_dev);

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
 4017c48:	dd000015 	stw	r20,0(sp)
 4017c4c:	4000e880 	call	4000e88 <get_ip_addr>
 4017c50:	10001026 	beq	r2,zero,4017c94 <iniche_devices_init+0xdc>
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
 4017c54:	d8800317 	ldw	r2,12(sp)
                p_net->n_flags |= NF_DHCPC;
            }
#endif
            p_net->n_ipaddr = ipaddr;
 4017c58:	d8c00417 	ldw	r3,16(sp)
            p_net->snmask = netmask;
 4017c5c:	d9000117 	ldw	r4,4(sp)
            p_net->n_defgw = gw;
 4017c60:	d9400217 	ldw	r5,8(sp)
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
 4017c64:	10000326 	beq	r2,zero,4017c74 <iniche_devices_init+0xbc>
                p_net->n_flags |= NF_DHCPC;
 4017c68:	88802a17 	ldw	r2,168(r17)
 4017c6c:	10804014 	ori	r2,r2,256
 4017c70:	88802a15 	stw	r2,168(r17)
            p_net->snmask = netmask;
            p_net->n_defgw = gw;
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
#if defined (IGMP_V1) || defined (IGMP_V2)
            p_net->igmp_oper_mode = IGMP_MODE_DEFAULT;
 4017c74:	00800084 	movi	r2,2
 4017c78:	88802f05 	stb	r2,188(r17)
#endif
            p_net->n_ipaddr = ipaddr;
            p_net->snmask = netmask;
            p_net->n_defgw = gw;
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
 4017c7c:	008100b4 	movhi	r2,1026
 4017c80:	109b1304 	addi	r2,r2,27724
             */
            if (use_dhcp) {
                p_net->n_flags |= NF_DHCPC;
            }
#endif
            p_net->n_ipaddr = ipaddr;
 4017c84:	88c00a15 	stw	r3,40(r17)
            p_net->snmask = netmask;
 4017c88:	89000c15 	stw	r4,48(r17)
            p_net->n_defgw = gw;
 4017c8c:	89400d15 	stw	r5,52(r17)
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
 4017c90:	88802b15 	stw	r2,172(r17)
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
 4017c94:	84000017 	ldw	r16,0(r16)
    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
 4017c98:	bc3fdd1e 	bne	r23,r16,4017c10 <iniche_devices_init+0x58>
        if_count++;
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
    }

    return (if_count);
}
 4017c9c:	9805883a 	mov	r2,r19
 4017ca0:	dfc00d17 	ldw	ra,52(sp)
 4017ca4:	ddc00c17 	ldw	r23,48(sp)
 4017ca8:	dd800b17 	ldw	r22,44(sp)
 4017cac:	dd400a17 	ldw	r21,40(sp)
 4017cb0:	dd000917 	ldw	r20,36(sp)
 4017cb4:	dcc00817 	ldw	r19,32(sp)
 4017cb8:	dc800717 	ldw	r18,28(sp)
 4017cbc:	dc400617 	ldw	r17,24(sp)
 4017cc0:	dc000517 	ldw	r16,20(sp)
 4017cc4:	dec00e04 	addi	sp,sp,56
 4017cc8:	f800283a 	ret

04017ccc <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 4017ccc:	defffd04 	addi	sp,sp,-12
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
 4017cd0:	008007c4 	movi	r2,31
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 4017cd4:	dfc00215 	stw	ra,8(sp)
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
 4017cd8:	000f883a 	mov	r7,zero
 4017cdc:	11000316 	blt	r2,r4,4017cec <read+0x20>
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
}
 4017ce0:	dfc00217 	ldw	ra,8(sp)
 4017ce4:	dec00304 	addi	sp,sp,12
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
 4017ce8:	40265681 	jmpi	4026568 <alt_read>
 4017cec:	d8000015 	stw	zero,0(sp)
 4017cf0:	d8000115 	stw	zero,4(sp)
 4017cf4:	40194700 	call	4019470 <bsd_recvfrom>
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
}
 4017cf8:	dfc00217 	ldw	ra,8(sp)
 4017cfc:	dec00304 	addi	sp,sp,12
 4017d00:	f800283a 	ret

04017d04 <write>:
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
  if (fd < ALT_MAX_FD)
 4017d04:	008007c4 	movi	r2,31
  {
    return alt_write (fd, ptr, len);
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
 4017d08:	000f883a 	mov	r7,zero
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
  if (fd < ALT_MAX_FD)
 4017d0c:	11000116 	blt	r2,r4,4017d14 <write+0x10>
  {
    return alt_write (fd, ptr, len);
 4017d10:	40268501 	jmpi	4026850 <alt_write>
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
 4017d14:	401e8b81 	jmpi	401e8b8 <t_send>

04017d18 <c_older>:

u_long
c_older(u_long ct1, u_long ct2)
{

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 4017d18:	00810134 	movhi	r2,1028
 4017d1c:	10a93304 	addi	r2,r2,-23348
 4017d20:	10800017 	ldw	r2,0(r2)
 4017d24:	2007883a 	mov	r3,r4
 4017d28:	10000316 	blt	r2,zero,4017d38 <c_older+0x20>
 4017d2c:	28c00736 	bltu	r5,r3,4017d4c <c_older+0x34>
   the larger value is then the oldest */
   if (ct1 >= ct2)
      return(ct1);
   else
      return(ct2);
}
 4017d30:	1805883a 	mov	r2,r3
 4017d34:	f800283a 	ret

u_long
c_older(u_long ct1, u_long ct2)
{

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 4017d38:	1100072e 	bgeu	r2,r4,4017d58 <c_older+0x40>
 4017d3c:	20800136 	bltu	r4,r2,4017d44 <c_older+0x2c>
 4017d40:	28bffa2e 	bgeu	r5,r2,4017d2c <c_older+0x14>
 4017d44:	2007883a 	mov	r3,r4
 4017d48:	217ff92e 	bgeu	r4,r5,4017d30 <c_older+0x18>
 4017d4c:	2807883a 	mov	r3,r5
   the larger value is then the oldest */
   if (ct1 >= ct2)
      return(ct1);
   else
      return(ct2);
}
 4017d50:	1805883a 	mov	r2,r3
 4017d54:	f800283a 	ret

u_long
c_older(u_long ct1, u_long ct2)
{

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 4017d58:	117ff836 	bltu	r2,r5,4017d3c <c_older+0x24>
 4017d5c:	28fff42e 	bgeu	r5,r3,4017d30 <c_older+0x18>
 4017d60:	003ffa06 	br	4017d4c <c_older+0x34>

04017d64 <ip2mac>:
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
 4017d64:	defffc04 	addi	sp,sp,-16
 4017d68:	dc400115 	stw	r17,4(sp)
 4017d6c:	2023883a 	mov	r17,r4
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
 4017d70:	21000617 	ldw	r4,24(r4)
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
 4017d74:	dc000015 	stw	r16,0(sp)
 4017d78:	dc800215 	stw	r18,8(sp)
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
 4017d7c:	21c02717 	ldw	r7,156(r4)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
 4017d80:	04800084 	movi	r18,2
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
 4017d84:	dfc00315 	stw	ra,12(sp)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
 4017d88:	3c000617 	ldw	r16,24(r7)
 4017d8c:	84803d26 	beq	r16,r18,4017e84 <ip2mac+0x120>
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 4017d90:	20800817 	ldw	r2,32(r4)
 4017d94:	1000121e 	bne	r2,zero,4017de0 <ip2mac+0x7c>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
       (ifmib->ifType == SLIP))
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
 4017d98:	38c01017 	ldw	r3,64(r7)
      ifmib->ifOutOctets += pkt->nb_plen;
 4017d9c:	38800f17 	ldw	r2,60(r7)
 4017da0:	89800417 	ldw	r6,16(r17)

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
 4017da4:	21400417 	ldw	r5,16(r4)
   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
       (ifmib->ifType == SLIP))
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
 4017da8:	18c00044 	addi	r3,r3,1
      ifmib->ifOutOctets += pkt->nb_plen;
 4017dac:	1185883a 	add	r2,r2,r6
 4017db0:	38800f15 	stw	r2,60(r7)
   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
       (ifmib->ifType == SLIP))
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
 4017db4:	38c01015 	stw	r3,64(r7)
      ifmib->ifOutOctets += pkt->nb_plen;

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
 4017db8:	28001a26 	beq	r5,zero,4017e24 <ip2mac+0xc0>
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
 4017dbc:	8809883a 	mov	r4,r17
 4017dc0:	283ee83a 	callr	r5
 4017dc4:	0005883a 	mov	r2,zero
   return(send_via_arp(pkt, dest_ip));
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
 4017dc8:	dfc00317 	ldw	ra,12(sp)
 4017dcc:	dc800217 	ldw	r18,8(sp)
 4017dd0:	dc400117 	ldw	r17,4(sp)
 4017dd4:	dc000017 	ldw	r16,0(sp)
 4017dd8:	dec00404 	addi	sp,sp,16
 4017ddc:	f800283a 	ret
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 4017de0:	38c00217 	ldw	r3,8(r7)
 4017de4:	008005c4 	movi	r2,23
 4017de8:	18bfeb26 	beq	r3,r2,4017d98 <ip2mac+0x34>
 4017dec:	00800704 	movi	r2,28
 4017df0:	18bfe926 	beq	r3,r2,4017d98 <ip2mac+0x34>
   }

   /* don't allow unicast sends if NIC iface has no IP address. This
    * is to prevent DHCP clients from sending prior to assignment.
    */
   if (pkt->net->n_ipaddr == 0L)
 4017df4:	20800a17 	ldw	r2,40(r4)
 4017df8:	1000031e 	bne	r2,zero,4017e08 <ip2mac+0xa4>
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
 4017dfc:	88c00717 	ldw	r3,28(r17)
 4017e00:	00bfffc4 	movi	r2,-1
 4017e04:	1880171e 	bne	r3,r2,4017e64 <ip2mac+0x100>
         return ENP_SENDERR;
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
 4017e08:	8809883a 	mov	r4,r17
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
 4017e0c:	dfc00317 	ldw	ra,12(sp)
 4017e10:	dc800217 	ldw	r18,8(sp)
 4017e14:	dc400117 	ldw	r17,4(sp)
 4017e18:	dc000017 	ldw	r16,0(sp)
 4017e1c:	dec00404 	addi	sp,sp,16
         return ENP_SENDERR;
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
 4017e20:	4027d841 	jmpi	4027d84 <send_via_arp>
      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
      else  /* no packet send; try raw send */
      {
         pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 4017e24:	20c00317 	ldw	r3,12(r4)
 4017e28:	89400317 	ldw	r5,12(r17)
 4017e2c:	183ee83a 	callr	r3
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4017e30:	01000084 	movi	r4,2
 4017e34:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 4017e38:	8809883a 	mov	r4,r17
 4017e3c:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4017e40:	01000084 	movi	r4,2
 4017e44:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4017e48:	0005883a 	mov	r2,zero
   return(send_via_arp(pkt, dest_ip));
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
 4017e4c:	dfc00317 	ldw	ra,12(sp)
 4017e50:	dc800217 	ldw	r18,8(sp)
 4017e54:	dc400117 	ldw	r17,4(sp)
 4017e58:	dc000017 	ldw	r16,0(sp)
 4017e5c:	dec00404 	addi	sp,sp,16
 4017e60:	f800283a 	ret
    */
   if (pkt->net->n_ipaddr == 0L)
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4017e64:	9009883a 	mov	r4,r18
 4017e68:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 4017e6c:	8809883a 	mov	r4,r17
 4017e70:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4017e74:	9009883a 	mov	r4,r18
 4017e78:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4017e7c:	00bff884 	movi	r2,-30
 4017e80:	003fd106 	br	4017dc8 <ip2mac+0x64>
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4017e84:	8009883a 	mov	r4,r16
 4017e88:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 4017e8c:	8809883a 	mov	r4,r17
 4017e90:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4017e94:	8009883a 	mov	r4,r16
 4017e98:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4017e9c:	00bff7c4 	movi	r2,-33
 4017ea0:	003fc906 	br	4017dc8 <ip2mac+0x64>

04017ea4 <fixup_subnet_mask>:
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
 4017ea4:	defffd04 	addi	sp,sp,-12
 4017ea8:	dc000015 	stw	r16,0(sp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
 4017eac:	2121883a 	add	r16,r4,r4
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
 4017eb0:	dc400115 	stw	r17,4(sp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
 4017eb4:	8405883a 	add	r2,r16,r16
 4017eb8:	04410134 	movhi	r17,1028
 4017ebc:	8c4bbb04 	addi	r17,r17,12012
 4017ec0:	1445883a 	add	r2,r2,r17
 4017ec4:	10800017 	ldw	r2,0(r2)
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
 4017ec8:	dfc00215 	stw	ra,8(sp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
 4017ecc:	10c00c17 	ldw	r3,48(r2)
 4017ed0:	1800141e 	bne	r3,zero,4017f24 <fixup_subnet_mask+0x80>
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
 4017ed4:	10c00a17 	ldw	r3,40(r2)
 4017ed8:	01403fc4 	movi	r5,255
 4017edc:	1880200c 	andi	r2,r3,128
      smask = 0xFF000000L;
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
 4017ee0:	1900300c 	andi	r4,r3,192

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
 4017ee4:	10000b26 	beq	r2,zero,4017f14 <fixup_subnet_mask+0x70>
      smask = 0xFF000000L;
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
 4017ee8:	00802004 	movi	r2,128
      smask = 0xFFFF0000L;
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
 4017eec:	18c0380c 	andi	r3,r3,224
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
      smask = 0xFF000000L;
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
 4017ef0:	017fffd4 	movui	r5,65535
 4017ef4:	20800726 	beq	r4,r2,4017f14 <fixup_subnet_mask+0x70>
      smask = 0xFFFF0000L;
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
 4017ef8:	00803004 	movi	r2,192
 4017efc:	01404034 	movhi	r5,256
 4017f00:	297fffc4 	addi	r5,r5,-1
 4017f04:	18800326 	beq	r3,r2,4017f14 <fixup_subnet_mask+0x70>
      smask = 0xFFFFFF00L;
   else
   {
      dtrap();    /* bad logic or setup values */
 4017f08:	401c81c0 	call	401c81c <dtrap>
 4017f0c:	01404034 	movhi	r5,256
 4017f10:	297fffc4 	addi	r5,r5,-1
      smask = 0xFFFFFF00L;
   }
   nets[netnum]->snmask = htonl(smask);
 4017f14:	8405883a 	add	r2,r16,r16
 4017f18:	1445883a 	add	r2,r2,r17
 4017f1c:	10c00017 	ldw	r3,0(r2)
 4017f20:	19400c15 	stw	r5,48(r3)
}
 4017f24:	dfc00217 	ldw	ra,8(sp)
 4017f28:	dc400117 	ldw	r17,4(sp)
 4017f2c:	dc000017 	ldw	r16,0(sp)
 4017f30:	dec00304 	addi	sp,sp,12
 4017f34:	f800283a 	ret

04017f38 <pktdemux>:
 * RETURNS: void
 */

void
pktdemux()
{
 4017f38:	defff904 	addi	sp,sp,-28
 4017f3c:	dd400515 	stw	r21,20(sp)
 4017f40:	dd000415 	stw	r20,16(sp)
 4017f44:	dfc00615 	stw	ra,24(sp)
 4017f48:	dcc00315 	stw	r19,12(sp)
 4017f4c:	dc800215 	stw	r18,8(sp)
 4017f50:	dc400115 	stw	r17,4(sp)
 4017f54:	dc000015 	stw	r16,0(sp)
 4017f58:	0029883a 	mov	r20,zero
 4017f5c:	05410134 	movhi	r21,1028
 4017f60:	ad4af604 	addi	r21,r21,11224
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */

   while (rcvdq.q_len)
 4017f64:	a8800217 	ldw	r2,8(r21)
 4017f68:	10003926 	beq	r2,zero,4018050 <pktdemux+0x118>
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
 4017f6c:	00810134 	movhi	r2,1028
 4017f70:	108c6204 	addi	r2,r2,12680
 4017f74:	10c00217 	ldw	r3,8(r2)
 4017f78:	1d006b16 	blt	r3,r20,4018128 <pktdemux+0x1f0>
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
 4017f7c:	01000044 	movi	r4,1
 4017f80:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
 4017f84:	01010134 	movhi	r4,1028
 4017f88:	210af604 	addi	r4,r4,11224
 4017f8c:	401c2f40 	call	401c2f4 <getq>
 4017f90:	1025883a 	mov	r18,r2
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 4017f94:	01000044 	movi	r4,1
   pkts = 0;   /* packets per loop */

   while (rcvdq.q_len)
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
 4017f98:	a5000044 	addi	r20,r20,1

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
      pkt = (PACKET)q_deq(&rcvdq);
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 4017f9c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
 4017fa0:	90006c26 	beq	r18,zero,4018154 <pktdemux+0x21c>
      ifc = pkt->net;
 4017fa4:	94c00617 	ldw	r19,24(r18)

      mib = ifc->n_mib;
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
 4017fa8:	91400117 	ldw	r5,4(r18)
 4017fac:	9809883a 	mov	r4,r19
 4017fb0:	29400084 	addi	r5,r5,2
      pkt = (PACKET)q_deq(&rcvdq);
      UNLOCK_NET_RESOURCE(RXQ_RESID);
      if (!pkt) panic("pktdemux: got null pkt");
      ifc = pkt->net;

      mib = ifc->n_mib;
 4017fb4:	9c002717 	ldw	r16,156(r19)
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
 4017fb8:	40280900 	call	4028090 <isbcast>
 4017fbc:	10004a26 	beq	r2,zero,40180e8 <pktdemux+0x1b0>
         mib->ifInNUcastPkts++;
 4017fc0:	80800b17 	ldw	r2,44(r16)
      else
         mib->ifInUcastPkts++;

      if(mib->ifAdminStatus == NI_DOWN)
 4017fc4:	84400617 	ldw	r17,24(r16)
      ifc = pkt->net;

      mib = ifc->n_mib;
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
         mib->ifInNUcastPkts++;
 4017fc8:	10800044 	addi	r2,r2,1
 4017fcc:	80800b15 	stw	r2,44(r16)
      else
         mib->ifInUcastPkts++;

      if(mib->ifAdminStatus == NI_DOWN)
 4017fd0:	00800084 	movi	r2,2
 4017fd4:	88804a26 	beq	r17,r2,4018100 <pktdemux+0x1c8>
         mib->ifInDiscards++;
         continue;      /* next packet */
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
 4017fd8:	90c00117 	ldw	r3,4(r18)
 4017fdc:	00801344 	movi	r2,77
 4017fe0:	193fff07 	ldb	r4,-4(r3)
 4017fe4:	2080041e 	bne	r4,r2,4017ff8 <pktdemux+0xc0>
 4017fe8:	90800217 	ldw	r2,8(r18)
 4017fec:	1885883a 	add	r2,r3,r2
 4017ff0:	10c00007 	ldb	r3,0(r2)
 4017ff4:	19000426 	beq	r3,r4,4018008 <pktdemux+0xd0>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
      {
         dtrap();
 4017ff8:	401c81c0 	call	401c81c <dtrap>
         panic("pktdemux: corrupt pkt");
 4017ffc:	010100f4 	movhi	r4,1027
 4018000:	21112604 	addi	r4,r4,17560
 4018004:	4019c440 	call	4019c44 <panic>
         }
      }
#endif   /* LOSSY_IO */

      /* see if driver set pkt->nb_prot and pkt->type */
      if((ifc->n_flags & NF_NBPROT) == 0)
 4018008:	98802a17 	ldw	r2,168(r19)
 401800c:	1080020c 	andi	r2,r2,8
 4018010:	1000271e 	bne	r2,zero,40180b0 <pktdemux+0x178>
          * probably the right thing to do, but because of this historic
          * inconsistency we don't try to fix it here - the longer size
          * turns out to be harmless since the IP layer fixes the size
          * based on the IP header length field.
          */
         switch(ifc->n_mib->ifType)
 4018014:	98802717 	ldw	r2,156(r19)
 4018018:	00c00184 	movi	r3,6
 401801c:	11400217 	ldw	r5,8(r2)
 4018020:	28c01426 	beq	r5,r3,4018074 <pktdemux+0x13c>
         case PPPOE:
            /* do not change type yet, for PPPoE */
            break;
#endif   /* USE_PPPOE */
         default:    /* driver bug? */
            dprintf("pktdemux: bad Iface type %ld\n",ifc->n_mib->ifType);
 4018024:	010100f4 	movhi	r4,1027
 4018028:	21112c04 	addi	r4,r4,17584
 401802c:	4002ed40 	call	4002ed4 <printf>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4018030:	01000084 	movi	r4,2
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4018034:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(pkt);           /* return to free buffer */
 4018038:	9009883a 	mov	r4,r18
 401803c:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4018040:	01000084 	movi	r4,2
 4018044:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */

   while (rcvdq.q_len)
 4018048:	a8800217 	ldw	r2,8(r21)
 401804c:	103fc71e 	bne	r2,zero,4017f6c <pktdemux+0x34>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         break;
      }
      continue;
   }
}
 4018050:	dfc00617 	ldw	ra,24(sp)
 4018054:	dd400517 	ldw	r21,20(sp)
 4018058:	dd000417 	ldw	r20,16(sp)
 401805c:	dcc00317 	ldw	r19,12(sp)
 4018060:	dc800217 	ldw	r18,8(sp)
 4018064:	dc400117 	ldw	r17,4(sp)
 4018068:	dc000017 	ldw	r16,0(sp)
 401806c:	dec00704 	addi	sp,sp,28
 4018070:	f800283a 	ret
          */
         switch(ifc->n_mib->ifType)
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
 4018074:	91400117 	ldw	r5,4(r18)
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 4018078:	91800617 	ldw	r6,24(r18)
          */
         switch(ifc->n_mib->ifType)
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
 401807c:	28c00084 	addi	r3,r5,2
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 4018080:	18800307 	ldb	r2,12(r3)
 4018084:	19c00343 	ldbu	r7,13(r3)
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 4018088:	31000817 	ldw	r4,32(r6)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 401808c:	1004923a 	slli	r2,r2,8
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 4018090:	290b883a 	add	r5,r5,r4
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 4018094:	11c5883a 	add	r2,r2,r7
 4018098:	10bfffcc 	andi	r2,r2,65535
 401809c:	1006923a 	slli	r3,r2,8
 40180a0:	1004d23a 	srli	r2,r2,8
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 40180a4:	91400315 	stw	r5,12(r18)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 40180a8:	10c4b03a 	or	r2,r2,r3
 40180ac:	9080080d 	sth	r2,32(r18)
            continue;
         }
      }

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
 40180b0:	90c0080b 	ldhu	r3,32(r18)
 40180b4:	00800204 	movi	r2,8
 40180b8:	18802a26 	beq	r3,r2,4018164 <pktdemux+0x22c>
 40180bc:	00818204 	movi	r2,1544
 40180c0:	18802f26 	beq	r3,r2,4018180 <pktdemux+0x248>
         UNLOCK_NET_RESOURCE(NET_RESID);
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
 40180c4:	d0a81717 	ldw	r2,-24484(gp)
 40180c8:	1081000c 	andi	r2,r2,1024
 40180cc:	1000331e 	bne	r2,zero,401819c <pktdemux+0x264>
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
 40180d0:	98c02717 	ldw	r3,156(r19)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 40180d4:	01000084 	movi	r4,2
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
 40180d8:	18800e17 	ldw	r2,56(r3)
 40180dc:	10800044 	addi	r2,r2,1
 40180e0:	18800e15 	stw	r2,56(r3)
 40180e4:	003fd306 	br	4018034 <pktdemux+0xfc>
      mib = ifc->n_mib;
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
         mib->ifInNUcastPkts++;
      else
         mib->ifInUcastPkts++;
 40180e8:	80800a17 	ldw	r2,40(r16)

      if(mib->ifAdminStatus == NI_DOWN)
 40180ec:	84400617 	ldw	r17,24(r16)
      mib = ifc->n_mib;
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
         mib->ifInNUcastPkts++;
      else
         mib->ifInUcastPkts++;
 40180f0:	10800044 	addi	r2,r2,1
 40180f4:	80800a15 	stw	r2,40(r16)

      if(mib->ifAdminStatus == NI_DOWN)
 40180f8:	00800084 	movi	r2,2
 40180fc:	88bfb61e 	bne	r17,r2,4017fd8 <pktdemux+0xa0>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4018100:	8809883a 	mov	r4,r17
 4018104:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(pkt);  /* dump packet from downed interface */
 4018108:	9009883a 	mov	r4,r18
 401810c:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4018110:	8809883a 	mov	r4,r17
 4018114:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         mib->ifInDiscards++;
 4018118:	80800c17 	ldw	r2,48(r16)
 401811c:	10800044 	addi	r2,r2,1
 4018120:	80800c15 	stw	r2,48(r16)
 4018124:	003f8f06 	br	4017f64 <pktdemux+0x2c>
      if (pkts++ > bigfreeq.q_len)
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
 4018128:	401a3d40 	call	401a3d4 <tk_yield>
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
 401812c:	01000044 	movi	r4,1
 4018130:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
 4018134:	01010134 	movhi	r4,1028
 4018138:	210af604 	addi	r4,r4,11224
 401813c:	401c2f40 	call	401c2f4 <getq>
 4018140:	1025883a 	mov	r18,r2
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 4018144:	01000044 	movi	r4,1
      if (pkts++ > bigfreeq.q_len)
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
 4018148:	0029883a 	mov	r20,zero

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
      pkt = (PACKET)q_deq(&rcvdq);
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 401814c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
 4018150:	903f941e 	bne	r18,zero,4017fa4 <pktdemux+0x6c>
 4018154:	010100f4 	movhi	r4,1027
 4018158:	21112004 	addi	r4,r4,17536
 401815c:	4019c440 	call	4019c44 <panic>
 4018160:	003f9006 	br	4017fa4 <pktdemux+0x6c>

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
      {
      case IPTP:     /* IP type */
         LOCK_NET_RESOURCE(NET_RESID);
 4018164:	0009883a 	mov	r4,zero
 4018168:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
#ifdef SHARED_IPADDRS
         add_share_route(pkt);
#endif /* SHARED_IPADDRS */
#ifdef IP_V4
         ip_rcv(pkt);
 401816c:	9009883a 	mov	r4,r18
 4018170:	402af2c0 	call	402af2c <ip_rcv>
            /* don't care, it's IPv4 */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif
		UNLOCK_NET_RESOURCE(NET_RESID);
 4018174:	0009883a 	mov	r4,zero
 4018178:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401817c:	003f7906 	br	4017f64 <pktdemux+0x2c>
         break;
#ifdef INCLUDE_ARP
      case ARPTP:       /* ARP type */
         LOCK_NET_RESOURCE(NET_RESID);
 4018180:	0009883a 	mov	r4,zero
 4018184:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         arprcv(pkt);
 4018188:	9009883a 	mov	r4,r18
 401818c:	4027ee00 	call	4027ee0 <arprcv>
         UNLOCK_NET_RESOURCE(NET_RESID);
 4018190:	0009883a 	mov	r4,zero
 4018194:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4018198:	003f7206 	br	4017f64 <pktdemux+0x2c>
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
 401819c:	180a923a 	slli	r5,r3,8
 40181a0:	1804d23a 	srli	r2,r3,8
 40181a4:	010100f4 	movhi	r4,1027
 40181a8:	21113404 	addi	r4,r4,17616
 40181ac:	297fc00c 	andi	r5,r5,65280
 40181b0:	114ab03a 	or	r5,r2,r5
 40181b4:	4002ed40 	call	4002ed4 <printf>
 40181b8:	003fc506 	br	40180d0 <pktdemux+0x198>

040181bc <netclose>:
{
   NET ifp;
   int index = 0;

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 40181bc:	d0a81717 	ldw	r2,-24484(gp)
 * RETURNS: 
 */

void
netclose()
{
 40181c0:	defffc04 	addi	sp,sp,-16
 40181c4:	dfc00315 	stw	ra,12(sp)
   NET ifp;
   int index = 0;

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 40181c8:	1080010c 	andi	r2,r2,4
 * RETURNS: 
 */

void
netclose()
{
 40181cc:	dc800215 	stw	r18,8(sp)
 40181d0:	dc400115 	stw	r17,4(sp)
 40181d4:	dc000015 	stw	r16,0(sp)
   NET ifp;
   int index = 0;

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 40181d8:	1000251e 	bne	r2,zero,4018270 <netclose+0xb4>
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 40181dc:	00810134 	movhi	r2,1028
 40181e0:	108dfc04 	addi	r2,r2,14320
 40181e4:	10800017 	ldw	r2,0(r2)
 40181e8:	10001b26 	beq	r2,zero,4018258 <netclose+0x9c>
 40181ec:	1021883a 	mov	r16,r2
 40181f0:	0025883a 	mov	r18,zero
 40181f4:	00000906 	br	401821c <netclose+0x60>
   {
      if (ifp->n_close)
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
 40181f8:	80802717 	ldw	r2,156(r16)
 40181fc:	11400117 	ldw	r5,4(r2)
 4018200:	4002ed40 	call	4002ed4 <printf>
         (*(ifp->n_close))(index++);
 4018204:	80c00517 	ldw	r3,20(r16)
 4018208:	9009883a 	mov	r4,r18
 401820c:	8825883a 	mov	r18,r17
 4018210:	183ee83a 	callr	r3

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 4018214:	84000017 	ldw	r16,0(r16)
 4018218:	80000f26 	beq	r16,zero,4018258 <netclose+0x9c>
   {
      if (ifp->n_close)
 401821c:	80800517 	ldw	r2,20(r16)
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
 4018220:	010100f4 	movhi	r4,1027
 4018224:	21114104 	addi	r4,r4,17668
         (*(ifp->n_close))(index++);
 4018228:	94400044 	addi	r17,r18,1
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
   {
      if (ifp->n_close)
 401822c:	103ff21e 	bne	r2,zero,40181f8 <netclose+0x3c>
         (*(ifp->n_close))(index++);
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
 4018230:	d0a81717 	ldw	r2,-24484(gp)
#endif
         index++;
 4018234:	94800044 	addi	r18,r18,1
         (*(ifp->n_close))(index++);
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
 4018238:	81400104 	addi	r5,r16,4
 401823c:	1080010c 	andi	r2,r2,4
 4018240:	010100f4 	movhi	r4,1027
 4018244:	21114804 	addi	r4,r4,17696
 4018248:	103ff226 	beq	r2,zero,4018214 <netclose+0x58>
 401824c:	4002ed40 	call	4002ed4 <printf>

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 4018250:	84000017 	ldw	r16,0(r16)
 4018254:	803ff11e 	bne	r16,zero,401821c <netclose+0x60>
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
#endif
         index++;
      }
   }
}
 4018258:	dfc00317 	ldw	ra,12(sp)
 401825c:	dc800217 	ldw	r18,8(sp)
 4018260:	dc400117 	ldw	r17,4(sp)
 4018264:	dc000017 	ldw	r16,0(sp)
 4018268:	dec00404 	addi	sp,sp,16
 401826c:	f800283a 	ret
{
   NET ifp;
   int index = 0;

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 4018270:	010100f4 	movhi	r4,1027
 4018274:	21113c04 	addi	r4,r4,17648
 4018278:	4002fec0 	call	4002fec <puts>
 401827c:	003fd706 	br	40181dc <netclose+0x20>

04018280 <Netinit>:
 * a non-zero error code
 */

int
Netinit()
{
 4018280:	defffa04 	addi	sp,sp,-24
 4018284:	dcc00315 	stw	r19,12(sp)
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 4018288:	04c10134 	movhi	r19,1028
 401828c:	9ce90f04 	addi	r19,r19,-23492
 4018290:	98800017 	ldw	r2,0(r19)
 * a non-zero error code
 */

int
Netinit()
{
 4018294:	dfc00515 	stw	ra,20(sp)
 4018298:	dd000415 	stw	r20,16(sp)
 401829c:	dc800215 	stw	r18,8(sp)
 40182a0:	dc400115 	stw	r17,4(sp)
 40182a4:	dc000015 	stw	r16,0(sp)
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 40182a8:	0080220e 	bge	zero,r2,4018334 <Netinit+0xb4>
 40182ac:	d1681517 	ldw	r5,-24492(gp)
 40182b0:	d1a81617 	ldw	r6,-24488(gp)
 40182b4:	1013883a 	mov	r9,r2
 40182b8:	0011883a 	mov	r8,zero
 40182bc:	01c10134 	movhi	r7,1028
 40182c0:	39cbbb04 	addi	r7,r7,12012
 40182c4:	02800184 	movi	r10,6
 40182c8:	03017a84 	movi	r12,1514
 40182cc:	02c00404 	movi	r11,16
 40182d0:	00000906 	br	40182f8 <Netinit+0x78>
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
 40182d4:	20c00817 	ldw	r3,32(r4)
 40182d8:	1940010e 	bge	r3,r5,40182e0 <Netinit+0x60>
 40182dc:	2807883a 	mov	r3,r5
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
 40182e0:	20800917 	ldw	r2,36(r4)
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
 40182e4:	180b883a 	mov	r5,r3
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
 40182e8:	1180010e 	bge	r2,r6,40182f0 <Netinit+0x70>
 40182ec:	3005883a 	mov	r2,r6
 40182f0:	100d883a 	mov	r6,r2
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 40182f4:	42400d0e 	bge	r8,r9,401832c <Netinit+0xac>
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
 40182f8:	39000017 	ldw	r4,0(r7)
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 40182fc:	42000044 	addi	r8,r8,1
 4018300:	39c00104 	addi	r7,r7,4
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
 4018304:	20802717 	ldw	r2,156(r4)
 4018308:	10c00217 	ldw	r3,8(r2)
 401830c:	1abff11e 	bne	r3,r10,40182d4 <Netinit+0x54>
      {
         if (nets[i]->n_mtu == 0)   /* let device code override */
 4018310:	20800917 	ldw	r2,36(r4)
 4018314:	1000011e 	bne	r2,zero,401831c <Netinit+0x9c>
            nets[i]->n_mtu = 1514;
 4018318:	23000915 	stw	r12,36(r4)

         if (nets[i]->n_lnh == 0)
 401831c:	20800817 	ldw	r2,32(r4)
 4018320:	103fec1e 	bne	r2,zero,40182d4 <Netinit+0x54>
         {
#ifdef IEEE_802_3
            nets[i]->n_lnh = ETHHDR_SIZE + sizeof(struct snap_hdr);
#else
            nets[i]->n_lnh = ETHHDR_SIZE;
 4018324:	22c00815 	stw	r11,32(r4)
 4018328:	003fea06 	br	40182d4 <Netinit+0x54>
 401832c:	d0a81615 	stw	r2,-24488(gp)
 4018330:	d0e81515 	stw	r3,-24492(gp)
      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
 4018334:	00810134 	movhi	r2,1028
 4018338:	108af604 	addi	r2,r2,11224
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 401833c:	01000084 	movi	r4,2
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
 4018340:	10000315 	stw	zero,12(r2)
      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
 4018344:	10000115 	stw	zero,4(r2)
 4018348:	10000015 	stw	zero,0(r2)
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
 401834c:	10000215 	stw	zero,8(r2)
 4018350:	10000415 	stw	zero,16(r2)

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4018354:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   e = pk_init();
 4018358:	401c00c0 	call	401c00c <pk_init>
 401835c:	1029883a 	mov	r20,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4018360:	01000084 	movi	r4,2
 4018364:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   if (e)   /* report error (memory ran out?) */
 4018368:	a0000926 	beq	r20,zero,4018390 <Netinit+0x110>
   /* Install dynamic iface menu */
   install_menu(&dynif_menu[0]);
#endif /* DYNAMIC_IFACES && IN_MENUS */

   return(0);
}
 401836c:	a005883a 	mov	r2,r20
 4018370:	dfc00517 	ldw	ra,20(sp)
 4018374:	dd000417 	ldw	r20,16(sp)
 4018378:	dcc00317 	ldw	r19,12(sp)
 401837c:	dc800217 	ldw	r18,8(sp)
 4018380:	dc400117 	ldw	r17,4(sp)
 4018384:	dc000017 	ldw	r16,0(sp)
 4018388:	dec00604 	addi	sp,sp,24
 401838c:	f800283a 	ret
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   if (e)   /* report error (memory ran out?) */
      return e;

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */
 4018390:	010100b4 	movhi	r4,1026
 4018394:	21206f04 	addi	r4,r4,-32324
 4018398:	40185180 	call	4018518 <exit_hook>

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
 401839c:	98800017 	ldw	r2,0(r19)
 40183a0:	00bff20e 	bge	zero,r2,401836c <Netinit+0xec>
 40183a4:	0023883a 	mov	r17,zero
 40183a8:	04010134 	movhi	r16,1028
 40183ac:	840bbb04 	addi	r16,r16,12012
 40183b0:	04800c44 	movi	r18,49
 40183b4:	00002606 	br	4018450 <Netinit+0x1d0>
         }
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
 40183b8:	81000017 	ldw	r4,0(r16)
 40183bc:	01800184 	movi	r6,6
 40183c0:	20802717 	ldw	r2,156(r4)
 40183c4:	10c00217 	ldw	r3,8(r2)
 40183c8:	19803126 	beq	r3,r6,4018490 <Netinit+0x210>

         /* set ifAdminStatus in case init() routine forgot to. IfOperStatus
          * is not nessecarily up at this point, as in the case of a modem which
          * is now in autoanswer mode.
          */
         nets[i]->n_mib->ifAdminStatus = NI_UP;
 40183cc:	21402717 	ldw	r5,156(r4)
 40183d0:	00800044 	movi	r2,1
 40183d4:	28800615 	stw	r2,24(r5)

         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
 40183d8:	20c00107 	ldb	r3,4(r4)
 40183dc:	18000b1e 	bne	r3,zero,401840c <Netinit+0x18c>
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
 40183e0:	28800217 	ldw	r2,8(r5)
 40183e4:	11802e26 	beq	r2,r6,40184a0 <Netinit+0x220>
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
               nets[i]->name[1] = 't';
            }
            else
            {
               nets[i]->name[0] = 'i';    /* "if1", "if2", etc. */
 40183e8:	00801a44 	movi	r2,105
 40183ec:	20800105 	stb	r2,4(r4)
               nets[i]->name[1] = 'f';
 40183f0:	80c00017 	ldw	r3,0(r16)
 40183f4:	00801984 	movi	r2,102
 40183f8:	18800145 	stb	r2,5(r3)
            }
            nets[i]->name[2] = (char)(i + '1');
 40183fc:	80800017 	ldw	r2,0(r16)
 4018400:	14800185 	stb	r18,6(r2)
            nets[i]->name[3] = '\0';
 4018404:	80c00017 	ldw	r3,0(r16)
 4018408:	180001c5 	stb	zero,7(r3)
         }
      }
      /* check on subnet routing - if no mask then make one */
      fixup_subnet_mask(i);      /* make mask for this net */
 401840c:	8809883a 	mov	r4,r17
 4018410:	4017ea40 	call	4017ea4 <fixup_subnet_mask>

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
 4018414:	81400017 	ldw	r5,0(r16)
 4018418:	29000a17 	ldw	r4,40(r5)
 401841c:	20000726 	beq	r4,zero,401843c <Netinit+0x1bc>
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 4018420:	28800c17 	ldw	r2,48(r5)
 4018424:	0086303a 	nor	r3,zero,r2
 4018428:	20c6b03a 	or	r3,r4,r3
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
 401842c:	2084703a 	and	r2,r4,r2
         nets[i]->n_subnetbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 4018430:	28c01015 	stw	r3,64(r5)

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
 4018434:	28800f15 	stw	r2,60(r5)
      fixup_subnet_mask(i);      /* make mask for this net */

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 4018438:	28c00e15 	stw	r3,56(r5)

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
 401843c:	98800017 	ldw	r2,0(r19)
 4018440:	8c400044 	addi	r17,r17,1
 4018444:	84000104 	addi	r16,r16,4
 4018448:	94800044 	addi	r18,r18,1
 401844c:	88bfc70e 	bge	r17,r2,401836c <Netinit+0xec>
   {
      if (nets[i]->n_init != NULL)  /* If iface has init routine... */
 4018450:	80800017 	ldw	r2,0(r16)
 4018454:	10800217 	ldw	r2,8(r2)
 4018458:	103fec26 	beq	r2,zero,401840c <Netinit+0x18c>
      {
         if ((e = (*nets[i]->n_init)(i)) != 0)  /* call init routine */
 401845c:	8809883a 	mov	r4,r17
 4018460:	103ee83a 	callr	r2
 4018464:	103fd426 	beq	r2,zero,40183b8 <Netinit+0x138>
         {
            dprintf("init error %d on net[%d]\n", e, i);
 4018468:	010100f4 	movhi	r4,1027
 401846c:	21114f04 	addi	r4,r4,17724
 4018470:	100b883a 	mov	r5,r2
 4018474:	880d883a 	mov	r6,r17
 4018478:	4002ed40 	call	4002ed4 <printf>
            nets[i]->n_mib->ifOperStatus = NI_DOWN;
 401847c:	80c00017 	ldw	r3,0(r16)
 4018480:	00800084 	movi	r2,2
 4018484:	19002717 	ldw	r4,156(r3)
 4018488:	20800715 	stw	r2,28(r4)
 401848c:	003feb06 	br	401843c <Netinit+0x1bc>
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
            nets[i]->n_flags |= NF_BCAST;
 4018490:	20802a17 	ldw	r2,168(r4)
 4018494:	10800054 	ori	r2,r2,1
 4018498:	20802a15 	stw	r2,168(r4)
 401849c:	003fcb06 	br	40183cc <Netinit+0x14c>
         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
            {
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
 40184a0:	00801944 	movi	r2,101
 40184a4:	20800105 	stb	r2,4(r4)
               nets[i]->name[1] = 't';
 40184a8:	80c00017 	ldw	r3,0(r16)
 40184ac:	00801d04 	movi	r2,116
 40184b0:	18800145 	stb	r2,5(r3)
 40184b4:	003fd106 	br	40183fc <Netinit+0x17c>

040184b8 <if_netnumber>:
if_netnumber(NET nptr)
{
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 40184b8:	00810134 	movhi	r2,1028
 40184bc:	108dfc04 	addi	r2,r2,14320
 40184c0:	10800017 	ldw	r2,0(r2)
 * RETURNS: net index for passed net pointer
 */

int
if_netnumber(NET nptr)
{
 40184c4:	deffff04 	addi	sp,sp,-4
 40184c8:	dfc00015 	stw	ra,0(sp)
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 40184cc:	10000726 	beq	r2,zero,40184ec <if_netnumber+0x34>
   {
      if(ifp == nptr)
 40184d0:	11000926 	beq	r2,r4,40184f8 <if_netnumber+0x40>
 40184d4:	0007883a 	mov	r3,zero
 40184d8:	00000106 	br	40184e0 <if_netnumber+0x28>
 40184dc:	20800a26 	beq	r4,r2,4018508 <if_netnumber+0x50>
if_netnumber(NET nptr)
{
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 40184e0:	10800017 	ldw	r2,0(r2)
 40184e4:	18c00044 	addi	r3,r3,1
 40184e8:	103ffc1e 	bne	r2,zero,40184dc <if_netnumber+0x24>
   {
      if(ifp == nptr)
        return (int)i;
   }

   panic("bad net ptr");
 40184ec:	010100f4 	movhi	r4,1027
 40184f0:	21115604 	addi	r4,r4,17752
 40184f4:	4019c440 	call	4019c44 <panic>
 40184f8:	0005883a 	mov	r2,zero
   return 0;
}
 40184fc:	dfc00017 	ldw	ra,0(sp)
 4018500:	dec00104 	addi	sp,sp,4
 4018504:	f800283a 	ret
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
   {
      if(ifp == nptr)
 4018508:	1805883a 	mov	r2,r3
        return (int)i;
   }

   panic("bad net ptr");
   return 0;
}
 401850c:	dfc00017 	ldw	ra,0(sp)
 4018510:	dec00104 	addi	sp,sp,4
 4018514:	f800283a 	ret

04018518 <exit_hook>:
 */

void
exit_hook(void (*func)(void))
{
   if (nclosers >= (NUMCLOSERS-1))
 4018518:	d0e81917 	ldw	r3,-24476(gp)
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
 401851c:	defffe04 	addi	sp,sp,-8
   if (nclosers >= (NUMCLOSERS-1))
 4018520:	00800344 	movi	r2,13
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
 4018524:	dc000015 	stw	r16,0(sp)
 4018528:	dfc00115 	stw	ra,4(sp)
 401852c:	2021883a 	mov	r16,r4
   if (nclosers >= (NUMCLOSERS-1))
      panic("exit_hook");
 4018530:	010100f4 	movhi	r4,1027
 4018534:	21115904 	addi	r4,r4,17764
 */

void
exit_hook(void (*func)(void))
{
   if (nclosers >= (NUMCLOSERS-1))
 4018538:	10c0020e 	bge	r2,r3,4018544 <exit_hook+0x2c>
      panic("exit_hook");
 401853c:	4019c440 	call	4019c44 <panic>
 4018540:	d0e81917 	ldw	r3,-24476(gp)

   closers[++nclosers] = func;
 4018544:	18800044 	addi	r2,r3,1
 4018548:	1087883a 	add	r3,r2,r2
 401854c:	01010134 	movhi	r4,1028
 4018550:	2129b804 	addi	r4,r4,-22816
 4018554:	18c7883a 	add	r3,r3,r3
 4018558:	1907883a 	add	r3,r3,r4
 401855c:	1c000015 	stw	r16,0(r3)
 4018560:	d0a81915 	stw	r2,-24476(gp)
}
 4018564:	dfc00117 	ldw	ra,4(sp)
 4018568:	dc000017 	ldw	r16,0(sp)
 401856c:	dec00204 	addi	sp,sp,8
 4018570:	f800283a 	ret

04018574 <ip_exit>:
 * RETURNS: void
 */

void
ip_exit()
{
 4018574:	defffd04 	addi	sp,sp,-12
 4018578:	dc400115 	stw	r17,4(sp)
   int   n;

   for (n=nclosers; n; n--)
 401857c:	d4681917 	ldw	r17,-24476(gp)
 * RETURNS: void
 */

void
ip_exit()
{
 4018580:	dfc00215 	stw	ra,8(sp)
 4018584:	dc000015 	stw	r16,0(sp)
   int   n;

   for (n=nclosers; n; n--)
 4018588:	88001026 	beq	r17,zero,40185cc <ip_exit+0x58>
 401858c:	8c45883a 	add	r2,r17,r17
 4018590:	1085883a 	add	r2,r2,r2
 4018594:	00c10134 	movhi	r3,1028
 4018598:	18e9b804 	addi	r3,r3,-22816
 401859c:	10e1883a 	add	r16,r2,r3
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
 40185a0:	81400017 	ldw	r5,0(r16)
 40185a4:	010100f4 	movhi	r4,1027
 40185a8:	21115c04 	addi	r4,r4,17776
void
ip_exit()
{
   int   n;

   for (n=nclosers; n; n--)
 40185ac:	8c7fffc4 	addi	r17,r17,-1
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
 40185b0:	4002ed40 	call	4002ed4 <printf>
#endif
      if(closers[n])
 40185b4:	80800017 	ldw	r2,0(r16)
 40185b8:	10000226 	beq	r2,zero,40185c4 <ip_exit+0x50>
      {
         (*closers[n])();
 40185bc:	103ee83a 	callr	r2
         closers[n] = NULL;
 40185c0:	80000015 	stw	zero,0(r16)
void
ip_exit()
{
   int   n;

   for (n=nclosers; n; n--)
 40185c4:	843fff04 	addi	r16,r16,-4
 40185c8:	883ff51e 	bne	r17,zero,40185a0 <ip_exit+0x2c>
      {
         (*closers[n])();
         closers[n] = NULL;
      }
   }
}
 40185cc:	dfc00217 	ldw	ra,8(sp)
 40185d0:	dc400117 	ldw	r17,4(sp)
 40185d4:	dc000017 	ldw	r16,0(sp)
 40185d8:	dec00304 	addi	sp,sp,12
 40185dc:	f800283a 	ret

040185e0 <ip_startup>:
 * RETURNS: returns NULL if OK, or text of an error message 
 */

char *   
ip_startup()
{
 40185e0:	defffc04 	addi	sp,sp,-16
 40185e4:	dc800215 	stw	r18,8(sp)
 40185e8:	04810134 	movhi	r18,1028
 40185ec:	948bbb04 	addi	r18,r18,12012
 40185f0:	dc400115 	stw	r17,4(sp)
 40185f4:	dc000015 	stw	r16,0(sp)
 40185f8:	dfc00315 	stw	ra,12(sp)
 40185fc:	04010134 	movhi	r16,1028
 4018600:	840afb04 	addi	r16,r16,11244
 4018604:	94400404 	addi	r17,r18,16

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
 4018608:	80801204 	addi	r2,r16,72
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
 401860c:	94000015 	stw	r16,0(r18)
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
 4018610:	800b883a 	mov	r5,r16

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
 4018614:	80802715 	stw	r2,156(r16)

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
 4018618:	01010134 	movhi	r4,1028
 401861c:	210dfc04 	addi	r4,r4,14320
 4018620:	94800104 	addi	r18,r18,4
 4018624:	401c2940 	call	401c294 <putq>
 4018628:	84003004 	addi	r16,r16,192
{
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
 401862c:	947ff61e 	bne	r18,r17,4018608 <ip_startup+0x28>
      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);
 4018630:	d1281817 	ldw	r4,-24480(gp)
 4018634:	402b3340 	call	402b334 <prep_ifaces>
 4018638:	1007883a 	mov	r3,r2
 401863c:	d0a81815 	stw	r2,-24480(gp)

   if (ifNumber < 1)    /* no static interfaces? */
 4018640:	10002626 	beq	r2,zero,40186dc <ip_startup+0xfc>
      return("unable to find any working interfaces");
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 4018644:	1023883a 	mov	r17,r2
 4018648:	008000c4 	movi	r2,3
 401864c:	10c00d16 	blt	r2,r3,4018684 <ip_startup+0xa4>
 4018650:	18c5883a 	add	r2,r3,r3
 4018654:	1085883a 	add	r2,r2,r2
 4018658:	90fffc04 	addi	r3,r18,-16
 401865c:	10e1883a 	add	r16,r2,r3
 4018660:	04800104 	movi	r18,4
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
 4018664:	81400017 	ldw	r5,0(r16)
 4018668:	01010134 	movhi	r4,1028
 401866c:	210dfc04 	addi	r4,r4,14320
      return("unable to find any working interfaces");
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 4018670:	8c400044 	addi	r17,r17,1
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
 4018674:	401c1d00 	call	401c1d0 <qdel>
      nets[i] = NULL;               /* remove from array */
 4018678:	80000015 	stw	zero,0(r16)
      return("unable to find any working interfaces");
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 401867c:	84000104 	addi	r16,r16,4
 4018680:	8cbff81e 	bne	r17,r18,4018664 <ip_startup+0x84>
   /* The sequence of events when initing the net & interface systems 
    * is very important. Be very carefull about altering the order of 
    * the following statements. 
    */
   /* once these are done, we should call ip_exit before quiting IP */
   clock_init();           /* start clock system */
 4018684:	401c7400 	call	401c740 <clock_init>
   exit_hook(clock_c);
 4018688:	010100b4 	movhi	r4,1026
 401868c:	2131d904 	addi	r4,r4,-14492
 4018690:	40185180 	call	4018518 <exit_hook>

   e = Netinit();    /* start net interface(s) */
 4018694:	40182800 	call	4018280 <Netinit>
   if (e)
 4018698:	10000826 	beq	r2,zero,40186bc <ip_startup+0xdc>
 401869c:	008100f4 	movhi	r2,1027
 40186a0:	10916d04 	addi	r2,r2,17844
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
}
 40186a4:	dfc00317 	ldw	ra,12(sp)
 40186a8:	dc800217 	ldw	r18,8(sp)
 40186ac:	dc400117 	ldw	r17,4(sp)
 40186b0:	dc000017 	ldw	r16,0(sp)
 40186b4:	dec00404 	addi	sp,sp,16
 40186b8:	f800283a 	ret
   {
      return("unable to initialize net");
   }

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
 40186bc:	40280580 	call	4028058 <etainit>
   if (e)
 40186c0:	10000e1e 	bne	r2,zero,40186fc <ip_startup+0x11c>
      return("unable to initialize arp");
   }
#endif

#ifdef IP_V4
   e = ip_init();       /* start up IP layer */
 40186c4:	40296340 	call	4029634 <ip_init>
   if (e)
 40186c8:	10001526 	beq	r2,zero,4018720 <ip_startup+0x140>
   {
      ip_exit();
 40186cc:	40185740 	call	4018574 <ip_exit>
 40186d0:	008100f4 	movhi	r2,1027
 40186d4:	10917b04 	addi	r2,r2,17900
 40186d8:	003ff206 	br	40186a4 <ip_startup+0xc4>
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);

   if (ifNumber < 1)    /* no static interfaces? */
 40186dc:	008100f4 	movhi	r2,1027
 40186e0:	10916304 	addi	r2,r2,17804
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
}
 40186e4:	dfc00317 	ldw	ra,12(sp)
 40186e8:	dc800217 	ldw	r18,8(sp)
 40186ec:	dc400117 	ldw	r17,4(sp)
 40186f0:	dc000017 	ldw	r16,0(sp)
 40186f4:	dec00404 	addi	sp,sp,16
 40186f8:	f800283a 	ret

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
   if (e)
   {
      ip_exit();
 40186fc:	40185740 	call	4018574 <ip_exit>
 4018700:	008100f4 	movhi	r2,1027
 4018704:	10917404 	addi	r2,r2,17872
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
}
 4018708:	dfc00317 	ldw	ra,12(sp)
 401870c:	dc800217 	ldw	r18,8(sp)
 4018710:	dc400117 	ldw	r17,4(sp)
 4018714:	dc000017 	ldw	r16,0(sp)
 4018718:	dec00404 	addi	sp,sp,16
 401871c:	f800283a 	ret

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Join the All hosts group on every interface that IP multicast is
    * supported
    */
   e = igmp_init();         /* Initialize igmp */
 4018720:	401879c0 	call	401879c <igmp_init>
   if (e)
 4018724:	1000171e 	bne	r2,zero,4018784 <ip_startup+0x1a4>
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
 4018728:	d0e81817 	ldw	r3,-24480(gp)
 401872c:	00c00f0e 	bge	zero,r3,401876c <ip_startup+0x18c>
    */
   e = igmp_init();         /* Initialize igmp */
   if (e)
   {
      ip_exit();
      return(ipmcfail_str);
 4018730:	0023883a 	mov	r17,zero
 4018734:	04010134 	movhi	r16,1028
 4018738:	840bbb04 	addi	r16,r16,12012
   }

   for (i = 0; i < (int)ifNumber; i++)
   {
      if (nets[i]->n_mcastlist != NULL)
 401873c:	81400017 	ldw	r5,0(r16)
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
 4018740:	01800104 	movi	r6,4
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
 4018744:	8c400044 	addi	r17,r17,1
   {
      if (nets[i]->n_mcastlist != NULL)
 4018748:	28802b17 	ldw	r2,172(r5)
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
 401874c:	01010134 	movhi	r4,1028
 4018750:	21291304 	addi	r4,r4,-23476
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
 4018754:	81a1883a 	add	r16,r16,r6
   {
      if (nets[i]->n_mcastlist != NULL)
 4018758:	10000326 	beq	r2,zero,4018768 <ip_startup+0x188>
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
 401875c:	402b1f00 	call	402b1f0 <in_addmulti>
 4018760:	10000826 	beq	r2,zero,4018784 <ip_startup+0x1a4>
 4018764:	d0e81817 	ldw	r3,-24480(gp)
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
 4018768:	88fff416 	blt	r17,r3,401873c <ip_startup+0x15c>
      }
   }
#endif /* IP_MULTICAST and (IGMPv1 or IGMPv2) */   

#ifdef INCLUDE_TCP
   e = tcpinit();
 401876c:	40255a40 	call	40255a4 <tcpinit>
   if (e)
 4018770:	10000726 	beq	r2,zero,4018790 <ip_startup+0x1b0>
   {
      ip_exit();
 4018774:	40185740 	call	4018574 <ip_exit>
 4018778:	008100f4 	movhi	r2,1027
 401877c:	10918104 	addi	r2,r2,17924
 4018780:	003fc806 	br	40186a4 <ip_startup+0xc4>
   for (i = 0; i < (int)ifNumber; i++)
   {
      if (nets[i]->n_mcastlist != NULL)
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
      {
         ip_exit();
 4018784:	40185740 	call	4018574 <ip_exit>
         return(ipmcfail_str);
 4018788:	d0a03217 	ldw	r2,-32568(gp)
 401878c:	003fc506 	br	40186a4 <ip_startup+0xc4>
   /* setup event map for (UDP and TCP) socket library's events (such as 
    * those used by tcp_sleep () and tcp_wakeup ()).  These events either 
    * map into operating system primitives such as events or semaphores, 
    * or into task suspend and task resume mechanisms.
    */
   evtmap_setup ();
 4018790:	402b3000 	call	402b300 <evtmap_setup>
 4018794:	0005883a 	mov	r2,zero
 4018798:	003fc206 	br	40186a4 <ip_startup+0xc4>

0401879c <igmp_init>:
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 401879c:	00810134 	movhi	r2,1028
 40187a0:	108dfc04 	addi	r2,r2,14320
 40187a4:	11000017 	ldw	r4,0(r2)
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
 40187a8:	00c04034 	movhi	r3,256
 40187ac:	18c03804 	addi	r3,r3,224
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
 40187b0:	00808034 	movhi	r2,512
 40187b4:	10803804 	addi	r2,r2,224
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
 40187b8:	d0e81c15 	stw	r3,-24464(gp)
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
 40187bc:	d0a81d15 	stw	r2,-24460(gp)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 40187c0:	20000c26 	beq	r4,zero,40187f4 <igmp_init+0x58>
 40187c4:	2005883a 	mov	r2,r4
 40187c8:	01000044 	movi	r4,1
 40187cc:	00000406 	br	40187e0 <igmp_init+0x44>
      {
         ifp->igmpv1_rtr_present = 1;
      }
      else
      {
         ifp->igmpv1_rtr_present = 0;
 40187d0:	10002d05 	stb	zero,180(r2)
         /* not really required, only referred to if IGMPv1 router is 
          * "present" */
         ifp->igmpv1_query_rcvd_time = 0;
 40187d4:	10002e15 	stw	zero,184(r2)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 40187d8:	10800017 	ldw	r2,0(r2)
 40187dc:	10000526 	beq	r2,zero,40187f4 <igmp_init+0x58>
   {
      if (ifp->igmp_oper_mode == IGMP_MODE_V1)
 40187e0:	10c02f03 	ldbu	r3,188(r2)
 40187e4:	193ffa1e 	bne	r3,r4,40187d0 <igmp_init+0x34>
      {
         ifp->igmpv1_rtr_present = 1;
 40187e8:	10c02d05 	stb	r3,180(r2)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 40187ec:	10800017 	ldw	r2,0(r2)
 40187f0:	103ffb1e 	bne	r2,zero,40187e0 <igmp_init+0x44>
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 40187f4:	00810134 	movhi	r2,1028
 40187f8:	10a93304 	addi	r2,r2,-23348
 40187fc:	10c00017 	ldw	r3,0(r2)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;

   return IGMP_OK;
}
 4018800:	0005883a 	mov	r2,zero
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;

   /* there are no timers running initially */
   igmp_timers_are_running = 0;
 4018804:	d0281a15 	stw	zero,-24472(gp)
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 4018808:	18c00504 	addi	r3,r3,20
 401880c:	d0e81b15 	stw	r3,-24468(gp)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;

   return IGMP_OK;
}
 4018810:	f800283a 	ret

04018814 <igmp_print_stats>:
   
int igmp_print_stats (void * pio)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4018814:	00810134 	movhi	r2,1028
 4018818:	108dfc04 	addi	r2,r2,14320
 401881c:	10800017 	ldw	r2,0(r2)
 *
 * OUTPUT: This function always returns IGMP_OK.
 */
   
int igmp_print_stats (void * pio)
{  
 4018820:	defffa04 	addi	sp,sp,-24
 4018824:	dc400315 	stw	r17,12(sp)
 4018828:	dfc00515 	stw	ra,20(sp)
 401882c:	dc800415 	stw	r18,16(sp)
 4018830:	dc000215 	stw	r16,8(sp)
 4018834:	2023883a 	mov	r17,r4
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4018838:	10002a26 	beq	r2,zero,40188e4 <igmp_print_stats+0xd0>
 401883c:	1021883a 	mov	r16,r2
 4018840:	04800044 	movi	r18,1
 4018844:	00001206 	br	4018890 <igmp_print_stats+0x7c>
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
 4018848:	81802d03 	ldbu	r6,180(r16)
 401884c:	01c100f4 	movhi	r7,1027
 4018850:	39d19804 	addi	r7,r7,18016
 4018854:	34800226 	beq	r6,r18,4018860 <igmp_print_stats+0x4c>
 4018858:	01c100f4 	movhi	r7,1027
 401885c:	39d19a04 	addi	r7,r7,18024
 4018860:	00c10134 	movhi	r3,1028
 4018864:	18e93304 	addi	r3,r3,-23348
 4018868:	80802e17 	ldw	r2,184(r16)
 401886c:	1a000017 	ldw	r8,0(r3)
 4018870:	8809883a 	mov	r4,r17
 4018874:	014100f4 	movhi	r5,1027
 4018878:	29519c04 	addi	r5,r5,18032
 401887c:	d8800015 	stw	r2,0(sp)
 4018880:	da000115 	stw	r8,4(sp)
 4018884:	4019c700 	call	4019c70 <ns_printf>
   
int igmp_print_stats (void * pio)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4018888:	84000017 	ldw	r16,0(r16)
 401888c:	80001526 	beq	r16,zero,40188e4 <igmp_print_stats+0xd0>
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
 4018890:	81c02f03 	ldbu	r7,188(r16)
 4018894:	008100f4 	movhi	r2,1027
 4018898:	10919104 	addi	r2,r2,17988
 401889c:	3c800226 	beq	r7,r18,40188a8 <igmp_print_stats+0x94>
 40188a0:	008100f4 	movhi	r2,1027
 40188a4:	10919204 	addi	r2,r2,17992
 40188a8:	8809883a 	mov	r4,r17
 40188ac:	014100f4 	movhi	r5,1027
 40188b0:	29519304 	addi	r5,r5,17996
 40188b4:	81800104 	addi	r6,r16,4
 40188b8:	d8800015 	stw	r2,0(sp)
 40188bc:	4019c700 	call	4019c70 <ns_printf>
                 ifp->name, 
                 ifp->igmp_oper_mode, 
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 40188c0:	80c02f03 	ldbu	r3,188(r16)
 40188c4:	00800084 	movi	r2,2
                    ifp->igmpv1_rtr_present,
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
 40188c8:	8809883a 	mov	r4,r17
 40188cc:	014100f4 	movhi	r5,1027
 40188d0:	29458404 	addi	r5,r5,5648
                 ifp->name, 
                 ifp->igmp_oper_mode, 
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 40188d4:	18bfdc26 	beq	r3,r2,4018848 <igmp_print_stats+0x34>
                    ifp->igmpv1_rtr_present,
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
 40188d8:	4019c700 	call	4019c70 <ns_printf>
   
int igmp_print_stats (void * pio)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40188dc:	84000017 	ldw	r16,0(r16)
 40188e0:	803feb1e 	bne	r16,zero,4018890 <igmp_print_stats+0x7c>
      }
      else ns_printf (pio, "\n");
   }   

   /* rx and timer statistics */
   ns_printf (pio, "[Rx ] IGMP messages rcvd: %lu, timers running: %lu\n", igmpstats.igmp_total_rcvd, igmp_timers_are_running);
 40188e4:	04010134 	movhi	r16,1028
 40188e8:	840bbf04 	addi	r16,r16,12028
 40188ec:	d1e81a17 	ldw	r7,-24472(gp)
 40188f0:	81800017 	ldw	r6,0(r16)
 40188f4:	8809883a 	mov	r4,r17
 40188f8:	014100f4 	movhi	r5,1027
 40188fc:	2951a704 	addi	r5,r5,18076
 4018900:	4019c700 	call	4019c70 <ns_printf>
   
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v1-mode links): %lu\n", igmpstats.igmpv1mode_v1_queries_rcvd);
 4018904:	81800117 	ldw	r6,4(r16)
 4018908:	8809883a 	mov	r4,r17
 401890c:	014100f4 	movhi	r5,1027
 4018910:	2951b404 	addi	r5,r5,18128
 4018914:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Reports rcvd: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd);
 4018918:	81800217 	ldw	r6,8(r16)
 401891c:	8809883a 	mov	r4,r17
 4018920:	014100f4 	movhi	r5,1027
 4018924:	2951c504 	addi	r5,r5,18196
 4018928:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer);
 401892c:	81800317 	ldw	r6,12(r16)
 4018930:	8809883a 	mov	r4,r17
 4018934:	014100f4 	movhi	r5,1027
 4018938:	2951d104 	addi	r5,r5,18244
 401893c:	4019c700 	call	4019c70 <ns_printf>
      
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v2-mode links): %lu\n", igmpstats.igmpv2mode_v1_queries_rcvd);
 4018940:	81800417 	ldw	r6,16(r16)
 4018944:	8809883a 	mov	r4,r17
 4018948:	014100f4 	movhi	r5,1027
 401894c:	2951e404 	addi	r5,r5,18320
 4018950:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 General Queries rcvd: %lu, Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_general_queries_rcvd, igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd);
 4018954:	81c00617 	ldw	r7,24(r16)
 4018958:	81800517 	ldw	r6,20(r16)
 401895c:	8809883a 	mov	r4,r17
 4018960:	014100f4 	movhi	r5,1027
 4018964:	2951f504 	addi	r5,r5,18388
 4018968:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer);   
 401896c:	81800717 	ldw	r6,28(r16)
 4018970:	8809883a 	mov	r4,r17
 4018974:	014100f4 	movhi	r5,1027
 4018978:	2951d104 	addi	r5,r5,18244
 401897c:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd with no local timer: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_no_timer);
 4018980:	81800817 	ldw	r6,32(r16)
 4018984:	8809883a 	mov	r4,r17
 4018988:	014100f4 	movhi	r5,1027
 401898c:	29520804 	addi	r5,r5,18464
 4018990:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 Leave Group messages rcvd: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_rcvd);
 4018994:	81800917 	ldw	r6,36(r16)
 4018998:	8809883a 	mov	r4,r17
 401899c:	014100f4 	movhi	r5,1027
 40189a0:	29521904 	addi	r5,r5,18532
 40189a4:	4019c700 	call	4019c70 <ns_printf>
   
   /* tx statistics */
   ns_printf (pio, "[Tx ] IGMPv2 Leave Group messages sent: %lu, Membership Reports sent: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_sent, igmpstats.igmpv2mode_v2_reports_sent);
 40189a8:	81c01817 	ldw	r7,96(r16)
 40189ac:	81801717 	ldw	r6,92(r16)
 40189b0:	8809883a 	mov	r4,r17
 40189b4:	014100f4 	movhi	r5,1027
 40189b8:	29522504 	addi	r5,r5,18580
 40189bc:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Tx ] IGMPv1 Host Membership Reports sent: %lu\n", igmpstats.igmp_v1_reports_sent);
 40189c0:	81801617 	ldw	r6,88(r16)
 40189c4:	8809883a 	mov	r4,r17
 40189c8:	014100f4 	movhi	r5,1027
 40189cc:	29523804 	addi	r5,r5,18656
 40189d0:	4019c700 	call	4019c70 <ns_printf>

   /* error statistics */
   ns_printf (pio, "[Err] IGMP packets rcvd with bad length: %lu\n", igmpstats.igmp_badlen_rcvd);
 40189d4:	81800a17 	ldw	r6,40(r16)
 40189d8:	8809883a 	mov	r4,r17
 40189dc:	014100f4 	movhi	r5,1027
 40189e0:	29524404 	addi	r5,r5,18704
 40189e4:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets rcvd with bad checksum: %lu\n", igmpstats.igmp_badsum_rcvd);
 40189e8:	81800b17 	ldw	r6,44(r16)
 40189ec:	8809883a 	mov	r4,r17
 40189f0:	014100f4 	movhi	r5,1027
 40189f4:	29525004 	addi	r5,r5,18752
 40189f8:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] Packet buffer allocation failures: %lu, Bad IGMP Oper Mode config: %lu\n",igmpstats.igmp_pkt_alloc_fail, igmpstats.igmp_bad_oper_mode);
 40189fc:	81800c17 	ldw	r6,48(r16)
 4018a00:	81c00d17 	ldw	r7,52(r16)
 4018a04:	8809883a 	mov	r4,r17
 4018a08:	014100f4 	movhi	r5,1027
 4018a0c:	29525c04 	addi	r5,r5,18800
 4018a10:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMP Queries rcvd: %lu, Bad IGMP Reports rcvd: %lu\n", igmpstats.igmp_bad_queries_rcvd, igmpstats.igmp_bad_reports_rcvd); 
 4018a14:	81c00f17 	ldw	r7,60(r16)
 4018a18:	81800e17 	ldw	r6,56(r16)
 4018a1c:	8809883a 	mov	r4,r17
 4018a20:	014100f4 	movhi	r5,1027
 4018a24:	29527004 	addi	r5,r5,18880
 4018a28:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMPv2 Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd);
 4018a2c:	81801117 	ldw	r6,68(r16)
 4018a30:	8809883a 	mov	r4,r17
 4018a34:	014100f4 	movhi	r5,1027
 4018a38:	29528004 	addi	r5,r5,18944
 4018a3c:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] IGMPv2 Group-Specific Queries rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd);
 4018a40:	81801217 	ldw	r6,72(r16)
 4018a44:	8809883a 	mov	r4,r17
 4018a48:	014100f4 	movhi	r5,1027
 4018a4c:	29528d04 	addi	r5,r5,18996
 4018a50:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] IGMP Membership Reports rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd);
 4018a54:	81801317 	ldw	r6,76(r16)
 4018a58:	8809883a 	mov	r4,r17
 4018a5c:	014100f4 	movhi	r5,1027
 4018a60:	2952a004 	addi	r5,r5,19072
 4018a64:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] Number of IGMPv2 messages rcvd without Router Alert option: %lu\n", igmpstats.igmpv2mode_v2_rtr_alert_missing); 
 4018a68:	81801417 	ldw	r6,80(r16)
 4018a6c:	8809883a 	mov	r4,r17
 4018a70:	014100f4 	movhi	r5,1027
 4018a74:	2952b104 	addi	r5,r5,19140
 4018a78:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v1-mode links: %lu\n", igmpstats.igmpv1mode_unknown_pkttype);
 4018a7c:	81801017 	ldw	r6,64(r16)
 4018a80:	8809883a 	mov	r4,r17
 4018a84:	014100f4 	movhi	r5,1027
 4018a88:	2952c304 	addi	r5,r5,19212
 4018a8c:	4019c700 	call	4019c70 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v2-mode links: %lu\n", igmpstats.igmpv2mode_unknown_pkttype);
 4018a90:	81801517 	ldw	r6,84(r16)
 4018a94:	8809883a 	mov	r4,r17
 4018a98:	014100f4 	movhi	r5,1027
 4018a9c:	2952d304 	addi	r5,r5,19276
 4018aa0:	4019c700 	call	4019c70 <ns_printf>
   
   return IGMP_OK;
}
 4018aa4:	0005883a 	mov	r2,zero
 4018aa8:	dfc00517 	ldw	ra,20(sp)
 4018aac:	dc800417 	ldw	r18,16(sp)
 4018ab0:	dc400317 	ldw	r17,12(sp)
 4018ab4:	dc000217 	ldw	r16,8(sp)
 4018ab8:	dec00604 	addi	sp,sp,24
 4018abc:	f800283a 	ret

04018ac0 <igmp_validate>:
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
 4018ac0:	defffb04 	addi	sp,sp,-20
 4018ac4:	dcc00315 	stw	r19,12(sp)
   u_short xsum;  
   u_char type;
   ip_addr mcgrp_addr;
   u_char resp_time;

   pip = ip_head (p);
 4018ac8:	24c00317 	ldw	r19,12(r4)
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
 4018acc:	dc400115 	stw	r17,4(sp)
 4018ad0:	dfc00415 	stw	ra,16(sp)
 4018ad4:	dc800215 	stw	r18,8(sp)
 4018ad8:	dc000015 	stw	r16,0(sp)

   pip = ip_head (p);

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
 4018adc:	98800003 	ldbu	r2,0(r19)

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
 4018ae0:	20c00417 	ldw	r3,16(r4)
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
 4018ae4:	2023883a 	mov	r17,r4

   pip = ip_head (p);

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
 4018ae8:	108003cc 	andi	r2,r2,15
 4018aec:	1085883a 	add	r2,r2,r2

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
 4018af0:	18fffe04 	addi	r3,r3,-8

   pip = ip_head (p);

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
 4018af4:	1085883a 	add	r2,r2,r2

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
 4018af8:	10c05c1e 	bne	r2,r3,4018c6c <igmp_validate+0x1ac>
      ++igmpstats.igmp_badlen_rcvd;
      return ENP_BAD_HEADER;
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
 4018afc:	14e1883a 	add	r16,r2,r19
   osum = igmp->igmp_cksum;
 4018b00:	8480008b 	ldhu	r18,2(r16)
   igmp->igmp_cksum = 0;
   xsum = ~cksum(igmp, igmplen>>1);
 4018b04:	8009883a 	mov	r4,r16
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
   osum = igmp->igmp_cksum;
   igmp->igmp_cksum = 0;
 4018b08:	8000008d 	sth	zero,2(r16)
   xsum = ~cksum(igmp, igmplen>>1);
 4018b0c:	01400104 	movi	r5,4
 4018b10:	40199b00 	call	40199b0 <cksum>
   if (xsum != osum)
 4018b14:	0084303a 	nor	r2,zero,r2
 4018b18:	10bfffcc 	andi	r2,r2,65535
 4018b1c:	90ffffcc 	andi	r3,r18,65535
 4018b20:	1880601e 	bne	r3,r2,4018ca4 <igmp_validate+0x1e4>
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
   mcgrp_addr = ntohl(igmp->igmp_group); 
 4018b24:	81800117 	ldw	r6,4(r16)
      return ENP_BAD_HEADER;
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
 4018b28:	82000003 	ldbu	r8,0(r16)
   mcgrp_addr = ntohl(igmp->igmp_group); 
 4018b2c:	3006d23a 	srli	r3,r6,8
 4018b30:	30bfc00c 	andi	r2,r6,65280
 4018b34:	300a963a 	slli	r5,r6,24
 4018b38:	1004923a 	slli	r2,r2,8
 4018b3c:	3008d63a 	srli	r4,r6,24
 4018b40:	18ffc00c 	andi	r3,r3,65280
 4018b44:	1144b03a 	or	r2,r2,r5
 4018b48:	20c8b03a 	or	r4,r4,r3
 4018b4c:	208eb03a 	or	r7,r4,r2
   resp_time = igmp->igmp_code;
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
 4018b50:	41403fcc 	andi	r5,r8,255
 4018b54:	00800444 	movi	r2,17
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
   mcgrp_addr = ntohl(igmp->igmp_group); 
   resp_time = igmp->igmp_code;
 4018b58:	81000043 	ldbu	r4,1(r16)
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
 4018b5c:	28802426 	beq	r5,r2,4018bf0 <igmp_validate+0x130>
   
   /* check to ensure that a received IGMPv1 or v2 Report has the 
    * same IP host group address in its IP destination field and 
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
 4018b60:	00800484 	movi	r2,18
 4018b64:	28800f26 	beq	r5,r2,4018ba4 <igmp_validate+0xe4>
 4018b68:	00800584 	movi	r2,22
 4018b6c:	28800d26 	beq	r5,r2,4018ba4 <igmp_validate+0xe4>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018b70:	40bffa84 	addi	r2,r8,-22
 4018b74:	10803fcc 	andi	r2,r2,255
 4018b78:	00c00044 	movi	r3,1
 4018b7c:	18802a2e 	bgeu	r3,r2,4018c28 <igmp_validate+0x168>
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
         return ENP_BAD_HEADER;
 4018b80:	0009883a 	mov	r4,zero
   }
#endif   

   /* validation successful */
   return IGMP_OK;
}
 4018b84:	2005883a 	mov	r2,r4
 4018b88:	dfc00417 	ldw	ra,16(sp)
 4018b8c:	dcc00317 	ldw	r19,12(sp)
 4018b90:	dc800217 	ldw	r18,8(sp)
 4018b94:	dc400117 	ldw	r17,4(sp)
 4018b98:	dc000017 	ldw	r16,0(sp)
 4018b9c:	dec00504 	addi	sp,sp,20
 4018ba0:	f800283a 	ret
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
 4018ba4:	98800417 	ldw	r2,16(r19)
 4018ba8:	3080031e 	bne	r6,r2,4018bb8 <igmp_validate+0xf8>
 4018bac:	38fc002c 	andhi	r3,r7,61440
 4018bb0:	00b80034 	movhi	r2,57344
 4018bb4:	18bfee26 	beq	r3,r2,4018b70 <igmp_validate+0xb0>
          (!IN_MULTICAST(mcgrp_addr)))
      {
         ++igmpstats.igmp_bad_reports_rcvd;
 4018bb8:	00c10134 	movhi	r3,1028
 4018bbc:	18cbbf04 	addi	r3,r3,12028
 4018bc0:	18800f17 	ldw	r2,60(r3)
 4018bc4:	013ff804 	movi	r4,-32
 4018bc8:	10800044 	addi	r2,r2,1
 4018bcc:	18800f15 	stw	r2,60(r3)
   }
#endif   

   /* validation successful */
   return IGMP_OK;
}
 4018bd0:	2005883a 	mov	r2,r4
 4018bd4:	dfc00417 	ldw	ra,16(sp)
 4018bd8:	dcc00317 	ldw	r19,12(sp)
 4018bdc:	dc800217 	ldw	r18,8(sp)
 4018be0:	dc400117 	ldw	r17,4(sp)
 4018be4:	dc000017 	ldw	r16,0(sp)
 4018be8:	dec00504 	addi	sp,sp,20
 4018bec:	f800283a 	ret
   mcgrp_addr = ntohl(igmp->igmp_group); 
   resp_time = igmp->igmp_code;
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
   {
      if ((resp_time == 0) || /* IGMPv1 Query */
 4018bf0:	21403fcc 	andi	r5,r4,255
 4018bf4:	2809003a 	cmpeq	r4,r5,zero
 4018bf8:	2000161e 	bne	r4,zero,4018c54 <igmp_validate+0x194>
 4018bfc:	38001526 	beq	r7,zero,4018c54 <igmp_validate+0x194>
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
 4018c00:	88800617 	ldw	r2,24(r17)
 4018c04:	00c00044 	movi	r3,1
 4018c08:	11002f03 	ldbu	r4,188(r2)
 4018c0c:	20c03426 	beq	r4,r3,4018ce0 <igmp_validate+0x220>
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
 4018c10:	38fc002c 	andhi	r3,r7,61440
 4018c14:	00b80034 	movhi	r2,57344
 4018c18:	18802a1e 	bne	r3,r2,4018cc4 <igmp_validate+0x204>
 4018c1c:	d0a81c17 	ldw	r2,-24464(gp)
 4018c20:	30802826 	beq	r6,r2,4018cc4 <igmp_validate+0x204>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018c24:	283fd626 	beq	r5,zero,4018b80 <igmp_validate+0xc0>
       (type == IGMPv2_MEMBERSHIP_REPORT) ||
       ((type == IGMP_HOST_MEMBERSHIP_QUERY) && (igmp->igmp_code > 0)))
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
 4018c28:	9809883a 	mov	r4,r19
 4018c2c:	402c6cc0 	call	402c6cc <igmpv2_chk4_rtr_alert_opt>
 4018c30:	10803fcc 	andi	r2,r2,255
 4018c34:	103fd21e 	bne	r2,zero,4018b80 <igmp_validate+0xc0>
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
 4018c38:	00c10134 	movhi	r3,1028
 4018c3c:	18cbbf04 	addi	r3,r3,12028
 4018c40:	18801417 	ldw	r2,80(r3)
 4018c44:	013ff804 	movi	r4,-32
 4018c48:	10800044 	addi	r2,r2,1
 4018c4c:	18801415 	stw	r2,80(r3)
 4018c50:	003fcc06 	br	4018b84 <igmp_validate+0xc4>
          ((resp_time > 0) && (mcgrp_addr == 0))) /* IGMPv2 General Query */     
      {
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
 4018c54:	98c00417 	ldw	r3,16(r19)
 4018c58:	d0a81c17 	ldw	r2,-24464(gp)
 4018c5c:	1880221e 	bne	r3,r2,4018ce8 <igmp_validate+0x228>
            ++igmpstats.igmp_bad_queries_rcvd;
            return ENP_BAD_HEADER;
         }     
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
 4018c60:	203fc71e 	bne	r4,zero,4018b80 <igmp_validate+0xc0>
 4018c64:	383ff026 	beq	r7,zero,4018c28 <igmp_validate+0x168>
 4018c68:	003fe506 	br	4018c00 <igmp_validate+0x140>
   igmplen = p->nb_plen - ip_hlen (pip);

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
   {
      ++igmpstats.igmp_badlen_rcvd;
 4018c6c:	00c10134 	movhi	r3,1028
 4018c70:	18cbbf04 	addi	r3,r3,12028
 4018c74:	18800a17 	ldw	r2,40(r3)
 4018c78:	013ff804 	movi	r4,-32
 4018c7c:	10800044 	addi	r2,r2,1
 4018c80:	18800a15 	stw	r2,40(r3)
   }
#endif   

   /* validation successful */
   return IGMP_OK;
}
 4018c84:	2005883a 	mov	r2,r4
 4018c88:	dfc00417 	ldw	ra,16(sp)
 4018c8c:	dcc00317 	ldw	r19,12(sp)
 4018c90:	dc800217 	ldw	r18,8(sp)
 4018c94:	dc400117 	ldw	r17,4(sp)
 4018c98:	dc000017 	ldw	r16,0(sp)
 4018c9c:	dec00504 	addi	sp,sp,20
 4018ca0:	f800283a 	ret
   igmp->igmp_cksum = 0;
   xsum = ~cksum(igmp, igmplen>>1);
   if (xsum != osum)
   {
      igmp->igmp_cksum = osum;
      ++igmpstats.igmp_badsum_rcvd;
 4018ca4:	00c10134 	movhi	r3,1028
 4018ca8:	18cbbf04 	addi	r3,r3,12028
 4018cac:	18800b17 	ldw	r2,44(r3)
 4018cb0:	013ff804 	movi	r4,-32
   osum = igmp->igmp_cksum;
   igmp->igmp_cksum = 0;
   xsum = ~cksum(igmp, igmplen>>1);
   if (xsum != osum)
   {
      igmp->igmp_cksum = osum;
 4018cb4:	8480008d 	sth	r18,2(r16)
      ++igmpstats.igmp_badsum_rcvd;
 4018cb8:	10800044 	addi	r2,r2,1
 4018cbc:	18800b15 	stw	r2,44(r3)
 4018cc0:	003fb006 	br	4018b84 <igmp_validate+0xc4>
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
         {
            ++igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd;
 4018cc4:	00c10134 	movhi	r3,1028
 4018cc8:	18cbbf04 	addi	r3,r3,12028
 4018ccc:	18801117 	ldw	r2,68(r3)
 4018cd0:	013ff804 	movi	r4,-32
 4018cd4:	10800044 	addi	r2,r2,1
 4018cd8:	18801115 	stw	r2,68(r3)
 4018cdc:	003fa906 	br	4018b84 <igmp_validate+0xc4>
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
 4018ce0:	013ff804 	movi	r4,-32
 4018ce4:	003fa706 	br	4018b84 <igmp_validate+0xc4>
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
         {
            ++igmpstats.igmp_bad_queries_rcvd;
 4018ce8:	00c10134 	movhi	r3,1028
 4018cec:	18cbbf04 	addi	r3,r3,12028
 4018cf0:	18800e17 	ldw	r2,56(r3)
 4018cf4:	013ff804 	movi	r4,-32
 4018cf8:	10800044 	addi	r2,r2,1
 4018cfc:	18800e15 	stw	r2,56(r3)
 4018d00:	003fa006 	br	4018b84 <igmp_validate+0xc4>

04018d04 <igmp_send>:
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
 4018d04:	00810134 	movhi	r2,1028
 4018d08:	10a90c04 	addi	r2,r2,-23504
 4018d0c:	11800017 	ldw	r6,0(r2)
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
 4018d10:	deffe104 	addi	sp,sp,-124

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018d14:	20fffa84 	addi	r3,r4,-22
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
 4018d18:	dd401c15 	stw	r21,112(sp)

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018d1c:	00800044 	movi	r2,1
 4018d20:	1d403fcc 	andi	r21,r3,255
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
 4018d24:	dd801d15 	stw	r22,116(sp)
 4018d28:	dcc01a15 	stw	r19,104(sp)
 4018d2c:	dc001715 	stw	r16,92(sp)
 4018d30:	dfc01e15 	stw	ra,120(sp)
 4018d34:	dd001b15 	stw	r20,108(sp)
 4018d38:	dc801915 	stw	r18,100(sp)
 4018d3c:	dc401815 	stw	r17,96(sp)
 4018d40:	2827883a 	mov	r19,r5
 4018d44:	202d883a 	mov	r22,r4
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
 4018d48:	34000704 	addi	r16,r6,28
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018d4c:	15405b2e 	bgeu	r2,r21,4018ebc <igmp_send+0x1b8>
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   int i;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
 4018d50:	00800504 	movi	r2,20
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
 4018d54:	01000084 	movi	r4,2
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   int i;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
 4018d58:	d8800005 	stb	r2,0(sp)
 4018d5c:	d8000045 	stb	zero,1(sp)
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
 4018d60:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   p = pk_alloc (reqd_len);
 4018d64:	81003fcc 	andi	r4,r16,255
 4018d68:	401bf840 	call	401bf84 <pk_alloc>
 4018d6c:	1025883a 	mov	r18,r2
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 4018d70:	01000084 	movi	r4,2
 4018d74:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   
   /* log an error and return if the allocation fails */   
   if (!p)
 4018d78:	90005826 	beq	r18,zero,4018edc <igmp_send+0x1d8>
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
   pip->ip_src = inm->inm_netp->n_ipaddr;
 4018d7c:	98800117 	ldw	r2,4(r19)
      ++igmpstats.igmp_pkt_alloc_fail;
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
 4018d80:	91000317 	ldw	r4,12(r18)
   pip->ip_src = inm->inm_netp->n_ipaddr;
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
 4018d84:	b5003fcc 	andi	r20,r22,255
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
   pip->ip_src = inm->inm_netp->n_ipaddr;
 4018d88:	10c00a17 	ldw	r3,40(r2)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
 4018d8c:	008005c4 	movi	r2,23
      return;
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
   pip->ip_src = inm->inm_netp->n_ipaddr;
 4018d90:	20c00315 	stw	r3,12(r4)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
 4018d94:	a0803f26 	beq	r20,r2,4018e94 <igmp_send+0x190>
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
   }
   else
      pip->ip_dest = inm->inm_addr;
 4018d98:	98800017 	ldw	r2,0(r19)
   
   p->fhost = pip->ip_dest;

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
 4018d9c:	24400504 	addi	r17,r4,20
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
   }
   else
      pip->ip_dest = inm->inm_addr;
 4018da0:	20800415 	stw	r2,16(r4)
   
   p->fhost = pip->ip_dest;
 4018da4:	20c00417 	ldw	r3,16(r4)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018da8:	00800044 	movi	r2,1
      pip->ip_dest = igmp_all_rtrs_group;
   }
   else
      pip->ip_dest = inm->inm_addr;
   
   p->fhost = pip->ip_dest;
 4018dac:	90c00715 	stw	r3,28(r18)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018db0:	15403f2e 	bgeu	r2,r21,4018eb0 <igmp_send+0x1ac>
 4018db4:	d8ab883a 	add	r21,sp,r2
   else 
      optp = &(opts [1]);
   /* point to the start of the IGMP header */
   igmp = (struct igmp *) tmpp;
   
   igmp->igmp_type = type;
 4018db8:	8d800005 	stb	r22,0(r17)
   igmp->igmp_code = 0;
 4018dbc:	88000045 	stb	zero,1(r17)
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
 4018dc0:	98800017 	ldw	r2,0(r19)
   igmp->igmp_cksum = 0;
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
 4018dc4:	8809883a 	mov	r4,r17
 4018dc8:	01400104 	movi	r5,4
   igmp->igmp_code = 0;
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
   igmp->igmp_cksum = 0;
 4018dcc:	8800008d 	sth	zero,2(r17)
   igmp->igmp_type = type;
   igmp->igmp_code = 0;
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
 4018dd0:	88800115 	stw	r2,4(r17)
   igmp->igmp_cksum = 0;
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
 4018dd4:	40199b00 	call	40199b0 <cksum>
 4018dd8:	0084303a 	nor	r2,zero,r2

   imop = &simo;
   MEMSET(imop, 0, sizeof(simo));
 4018ddc:	dc000104 	addi	r16,sp,4
 4018de0:	8009883a 	mov	r4,r16
 4018de4:	000b883a 	mov	r5,zero
 4018de8:	01801604 	movi	r6,88
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
   igmp->igmp_cksum = 0;
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
 4018dec:	8880008d 	sth	r2,2(r17)

   imop = &simo;
   MEMSET(imop, 0, sizeof(simo));
 4018df0:	40026a00 	call	40026a0 <memset>
   imop->imo_multicast_netp = inm->inm_netp;
   imop->imo_multicast_ttl = 1;
 4018df4:	00800044 	movi	r2,1
   igmp->igmp_cksum = 0;
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);

   imop = &simo;
   MEMSET(imop, 0, sizeof(simo));
   imop->imo_multicast_netp = inm->inm_netp;
 4018df8:	98c00117 	ldw	r3,4(r19)
   imop->imo_multicast_ttl = 1;
 4018dfc:	d8800205 	stb	r2,8(sp)
   /* we do not want our own reports to be looped back */
   imop->imo_multicast_loop = 0;
 4018e00:	d8000245 	stb	zero,9(sp)

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
   p->nb_plen = sizeof(struct igmp);
 4018e04:	00800204 	movi	r2,8
   imop->imo_multicast_loop = 0;

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
 4018e08:	94400315 	stw	r17,12(r18)
   p->nb_plen = sizeof(struct igmp);
 4018e0c:	90800415 	stw	r2,16(r18)
   p->imo = imop;
 4018e10:	94000b15 	stw	r16,44(r18)
   
   i = ip_write2 (IGMP_PROT, p, optp);
 4018e14:	900b883a 	mov	r5,r18
 4018e18:	a80d883a 	mov	r6,r21
 4018e1c:	01000084 	movi	r4,2
   igmp->igmp_cksum = 0;
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);

   imop = &simo;
   MEMSET(imop, 0, sizeof(simo));
   imop->imo_multicast_netp = inm->inm_netp;
 4018e20:	d8c00115 	stw	r3,4(sp)
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
   p->nb_plen = sizeof(struct igmp);
   p->imo = imop;
   
   i = ip_write2 (IGMP_PROT, p, optp);
 4018e24:	40293180 	call	4029318 <ip_write2>

   if (type == IGMPv2_LEAVE_GROUP)
 4018e28:	00c005c4 	movi	r3,23
 4018e2c:	a0c01326 	beq	r20,r3,4018e7c <igmp_send+0x178>
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
 4018e30:	00800584 	movi	r2,22
 4018e34:	a0802326 	beq	r20,r2,4018ec4 <igmp_send+0x1c0>
      ++igmpstats.igmpv2mode_v2_reports_sent;
   else if (type == IGMP_HOST_MEMBERSHIP_REPORT)
 4018e38:	00800484 	movi	r2,18
 4018e3c:	a080051e 	bne	r20,r2,4018e54 <igmp_send+0x150>
      ++igmpstats.igmp_v1_reports_sent;
 4018e40:	00c10134 	movhi	r3,1028
 4018e44:	18cbbf04 	addi	r3,r3,12028
 4018e48:	18801617 	ldw	r2,88(r3)
 4018e4c:	10800044 	addi	r2,r2,1
 4018e50:	18801615 	stw	r2,88(r3)
}
 4018e54:	dfc01e17 	ldw	ra,120(sp)
 4018e58:	dd801d17 	ldw	r22,116(sp)
 4018e5c:	dd401c17 	ldw	r21,112(sp)
 4018e60:	dd001b17 	ldw	r20,108(sp)
 4018e64:	dcc01a17 	ldw	r19,104(sp)
 4018e68:	dc801917 	ldw	r18,100(sp)
 4018e6c:	dc401817 	ldw	r17,96(sp)
 4018e70:	dc001717 	ldw	r16,92(sp)
 4018e74:	dec01f04 	addi	sp,sp,124
 4018e78:	f800283a 	ret
   p->imo = imop;
   
   i = ip_write2 (IGMP_PROT, p, optp);

   if (type == IGMPv2_LEAVE_GROUP)
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
 4018e7c:	00c10134 	movhi	r3,1028
 4018e80:	18cbbf04 	addi	r3,r3,12028
 4018e84:	18801717 	ldw	r2,92(r3)
 4018e88:	10800044 	addi	r2,r2,1
 4018e8c:	18801715 	stw	r2,92(r3)
 4018e90:	003ff006 	br	4018e54 <igmp_send+0x150>
   pip->ip_src = inm->inm_netp->n_ipaddr;
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
 4018e94:	d0a81d17 	ldw	r2,-24460(gp)
   else
      pip->ip_dest = inm->inm_addr;
   
   p->fhost = pip->ip_dest;

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
 4018e98:	24400504 	addi	r17,r4,20
   pip->ip_src = inm->inm_netp->n_ipaddr;
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
 4018e9c:	20800415 	stw	r2,16(r4)
   }
   else
      pip->ip_dest = inm->inm_addr;
   
   p->fhost = pip->ip_dest;
 4018ea0:	20c00417 	ldw	r3,16(r4)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018ea4:	00800044 	movi	r2,1
      pip->ip_dest = igmp_all_rtrs_group;
   }
   else
      pip->ip_dest = inm->inm_addr;
   
   p->fhost = pip->ip_dest;
 4018ea8:	90c00715 	stw	r3,28(r18)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 4018eac:	157fc136 	bltu	r2,r21,4018db4 <igmp_send+0xb0>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      /* provide space for ip_write2 () to write option-related data */
      tmpp += IP_RTR_ALERT_OPT_SIZE;
 4018eb0:	24400604 	addi	r17,r4,24
 4018eb4:	d82b883a 	mov	r21,sp
 4018eb8:	003fbf06 	br	4018db8 <igmp_send+0xb4>
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
   if ((type == IGMPv2_LEAVE_GROUP) || 
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
 4018ebc:	34000804 	addi	r16,r6,32
 4018ec0:	003fa306 	br	4018d50 <igmp_send+0x4c>
   i = ip_write2 (IGMP_PROT, p, optp);

   if (type == IGMPv2_LEAVE_GROUP)
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
      ++igmpstats.igmpv2mode_v2_reports_sent;
 4018ec4:	00c10134 	movhi	r3,1028
 4018ec8:	18cbbf04 	addi	r3,r3,12028
 4018ecc:	18801817 	ldw	r2,96(r3)
 4018ed0:	10800044 	addi	r2,r2,1
 4018ed4:	18801815 	stw	r2,96(r3)
 4018ed8:	003fde06 	br	4018e54 <igmp_send+0x150>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
   
   /* log an error and return if the allocation fails */   
   if (!p)
   {
      ++igmpstats.igmp_pkt_alloc_fail;
 4018edc:	00c10134 	movhi	r3,1028
 4018ee0:	18cbbf04 	addi	r3,r3,12028
 4018ee4:	18800c17 	ldw	r2,48(r3)
 4018ee8:	10800044 	addi	r2,r2,1
 4018eec:	18800c15 	stw	r2,48(r3)
 4018ef0:	003fd806 	br	4018e54 <igmp_send+0x150>

04018ef4 <igmp_leavegroup>:

void igmp_leavegroup (struct in_multi * inm)
{
   NET ifp;

   ifp = inm->inm_netp;
 4018ef4:	21400117 	ldw	r5,4(r4)

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
 4018ef8:	00800084 	movi	r2,2
 4018efc:	28c02f03 	ldbu	r3,188(r5)
 4018f00:	18800126 	beq	r3,r2,4018f08 <igmp_leavegroup+0x14>
 4018f04:	f800283a 	ret
 4018f08:	28802d03 	ldbu	r2,180(r5)
 4018f0c:	103ffd1e 	bne	r2,zero,4018f04 <igmp_leavegroup+0x10>
       !ifp->igmpv1_rtr_present)
   {
      if (inm->last2send_report == IGMP_TRUE)
 4018f10:	20c00403 	ldbu	r3,16(r4)
 4018f14:	00800044 	movi	r2,1
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
 4018f18:	200b883a 	mov	r5,r4
 4018f1c:	010005c4 	movi	r4,23
   ifp = inm->inm_netp;

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
       !ifp->igmpv1_rtr_present)
   {
      if (inm->last2send_report == IGMP_TRUE)
 4018f20:	18bff81e 	bne	r3,r2,4018f04 <igmp_leavegroup+0x10>
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
 4018f24:	4018d041 	jmpi	4018d04 <igmp_send>

04018f28 <igmp_joingroup>:

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;

   if (inm->inm_addr == igmp_all_hosts_group)
 4018f28:	20c00017 	ldw	r3,0(r4)
 4018f2c:	d0a81c17 	ldw	r2,-24464(gp)
 *
 * OUTPUT: None.
 */
 
void igmp_joingroup(struct in_multi * inm)
{
 4018f30:	defffd04 	addi	sp,sp,-12
 4018f34:	dc400115 	stw	r17,4(sp)
 4018f38:	dc000015 	stw	r16,0(sp)
 4018f3c:	dfc00215 	stw	ra,8(sp)
 4018f40:	2021883a 	mov	r16,r4
   NET ifp;

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;
 4018f44:	24400117 	ldw	r17,4(r4)

   if (inm->inm_addr == igmp_all_hosts_group)
 4018f48:	18804926 	beq	r3,r2,4019070 <igmp_joingroup+0x148>
      inm->inm_timer = 0;
   }
   else 
   {
      /* send unsolicited membership report in appropriate format */
      if (ifp->igmpv1_rtr_present)
 4018f4c:	88802d03 	ldbu	r2,180(r17)
      {
         /* always true for IGMPv1, may be true for IGMPv2 */
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 4018f50:	01000484 	movi	r4,18
 4018f54:	800b883a 	mov	r5,r16
      inm->inm_timer = 0;
   }
   else 
   {
      /* send unsolicited membership report in appropriate format */
      if (ifp->igmpv1_rtr_present)
 4018f58:	10002e26 	beq	r2,zero,4019014 <igmp_joingroup+0xec>
      {
         /* always true for IGMPv1, may be true for IGMPv2 */
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 4018f5c:	4018d040 	call	4018d04 <igmp_send>
         /* set a delay timer (with a duration of 
          * IGMP_MAX_HOST_REPORT_DELAY) for a second unsolicited report */
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 4018f60:	00810134 	movhi	r2,1028
 4018f64:	108bbb04 	addi	r2,r2,12012
 4018f68:	11400017 	ldw	r5,0(r2)
 4018f6c:	81000017 	ldw	r4,0(r16)
 4018f70:	00810134 	movhi	r2,1028
 4018f74:	108e0104 	addi	r2,r2,14340
 4018f78:	28c00a17 	ldw	r3,40(r5)
 4018f7c:	21ffc00c 	andi	r7,r4,65280
 4018f80:	2010d23a 	srli	r8,r4,8
 4018f84:	180cd23a 	srli	r6,r3,8
 4018f88:	197fc00c 	andi	r5,r3,65280
 4018f8c:	1814963a 	slli	r10,r3,24
 4018f90:	2016963a 	slli	r11,r4,24
 4018f94:	280a923a 	slli	r5,r5,8
 4018f98:	1806d63a 	srli	r3,r3,24
 4018f9c:	380e923a 	slli	r7,r7,8
 4018fa0:	2008d63a 	srli	r4,r4,24
 4018fa4:	12400217 	ldw	r9,8(r2)
 4018fa8:	31bfc00c 	andi	r6,r6,65280
      }
      else
      {
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
         /* the delay time duration is the Unsolicited Report Interval */
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
 4018fac:	1986b03a 	or	r3,r3,r6
 4018fb0:	2a8ab03a 	or	r5,r5,r10
 4018fb4:	423fc00c 	andi	r8,r8,65280
 4018fb8:	1946b03a 	or	r3,r3,r5
 4018fbc:	2208b03a 	or	r4,r4,r8
 4018fc0:	3aceb03a 	or	r7,r7,r11
 4018fc4:	1a47883a 	add	r3,r3,r9
 4018fc8:	21c8b03a 	or	r4,r4,r7
 4018fcc:	1907883a 	add	r3,r3,r4
 4018fd0:	00800c84 	movi	r2,50
 4018fd4:	1885203a 	divu	r2,r3,r2
 4018fd8:	10800ca4 	muli	r2,r2,50
 4018fdc:	1887c83a 	sub	r3,r3,r2
 4018fe0:	18c00044 	addi	r3,r3,1
 4018fe4:	80c00315 	stw	r3,12(r16)
      }
      
      /* for IGMPv2, indicate that we were the last to send 
       * a Report for this multicast group (relevant for 
       * IGMPv2 only). */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 4018fe8:	88c02f03 	ldbu	r3,188(r17)
 4018fec:	00800084 	movi	r2,2
 4018ff0:	18802526 	beq	r3,r2,4019088 <igmp_joingroup+0x160>
      {
         inm->last2send_report = IGMP_TRUE;
      }

      ++igmp_timers_are_running;
 4018ff4:	d0a81a17 	ldw	r2,-24472(gp)
 4018ff8:	10800044 	addi	r2,r2,1
 4018ffc:	d0a81a15 	stw	r2,-24472(gp)
   }
   
   return;
}     
 4019000:	dfc00217 	ldw	ra,8(sp)
 4019004:	dc400117 	ldw	r17,4(sp)
 4019008:	dc000017 	ldw	r16,0(sp)
 401900c:	dec00304 	addi	sp,sp,12
 4019010:	f800283a 	ret
          * IGMP_MAX_HOST_REPORT_DELAY) for a second unsolicited report */
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
      }
      else
      {
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 4019014:	01000584 	movi	r4,22
 4019018:	800b883a 	mov	r5,r16
 401901c:	4018d040 	call	4018d04 <igmp_send>
         /* the delay time duration is the Unsolicited Report Interval */
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
 4019020:	00810134 	movhi	r2,1028
 4019024:	108bbb04 	addi	r2,r2,12012
 4019028:	11400017 	ldw	r5,0(r2)
 401902c:	81000017 	ldw	r4,0(r16)
 4019030:	00810134 	movhi	r2,1028
 4019034:	108e0104 	addi	r2,r2,14340
 4019038:	28c00a17 	ldw	r3,40(r5)
 401903c:	21ffc00c 	andi	r7,r4,65280
 4019040:	2010d23a 	srli	r8,r4,8
 4019044:	180cd23a 	srli	r6,r3,8
 4019048:	197fc00c 	andi	r5,r3,65280
 401904c:	1814963a 	slli	r10,r3,24
 4019050:	2016963a 	slli	r11,r4,24
 4019054:	280a923a 	slli	r5,r5,8
 4019058:	1806d63a 	srli	r3,r3,24
 401905c:	380e923a 	slli	r7,r7,8
 4019060:	2008d63a 	srli	r4,r4,24
 4019064:	12400217 	ldw	r9,8(r2)
 4019068:	31bfc00c 	andi	r6,r6,65280
 401906c:	003fcf06 	br	4018fac <igmp_joingroup+0x84>
    * address is "attached" */
   ifp = inm->inm_netp;

   if (inm->inm_addr == igmp_all_hosts_group)
   {
      inm->inm_timer = 0;
 4019070:	20000315 	stw	zero,12(r4)

      ++igmp_timers_are_running;
   }
   
   return;
}     
 4019074:	dfc00217 	ldw	ra,8(sp)
 4019078:	dc400117 	ldw	r17,4(sp)
 401907c:	dc000017 	ldw	r16,0(sp)
 4019080:	dec00304 	addi	sp,sp,12
 4019084:	f800283a 	ret
      /* for IGMPv2, indicate that we were the last to send 
       * a Report for this multicast group (relevant for 
       * IGMPv2 only). */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
      {
         inm->last2send_report = IGMP_TRUE;
 4019088:	00800044 	movi	r2,1
 401908c:	80800405 	stb	r2,16(r16)
 4019090:	003fd806 	br	4018ff4 <igmp_joingroup+0xcc>

04019094 <igmp_fasttimo>:
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
 4019094:	defffb04 	addi	sp,sp,-20
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
 4019098:	0009883a 	mov	r4,zero
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
 401909c:	dfc00415 	stw	ra,16(sp)
 40190a0:	dcc00315 	stw	r19,12(sp)
 40190a4:	dc800215 	stw	r18,8(sp)
 40190a8:	dc400115 	stw	r17,4(sp)
 40190ac:	dc000015 	stw	r16,0(sp)
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
 40190b0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   
   /*
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
 40190b4:	d0a81a17 	ldw	r2,-24472(gp)
 40190b8:	10003c26 	beq	r2,zero,40191ac <igmp_fasttimo+0x118>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40190bc:	00810134 	movhi	r2,1028
 40190c0:	108dfc04 	addi	r2,r2,14320
 40190c4:	10800017 	ldw	r2,0(r2)
 40190c8:	10004026 	beq	r2,zero,40191cc <igmp_fasttimo+0x138>
 40190cc:	1023883a 	mov	r17,r2
 40190d0:	04c10134 	movhi	r19,1028
 40190d4:	9ce93304 	addi	r19,r19,-23348
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 40190d8:	8c002c17 	ldw	r16,176(r17)
 40190dc:	80001526 	beq	r16,zero,4019134 <igmp_fasttimo+0xa0>
 40190e0:	04a71014 	movui	r18,40000
      {
         /* skip IPv6 entries */
         if (inm->inm_addr == 0) 
 40190e4:	80800017 	ldw	r2,0(r16)
 40190e8:	10001026 	beq	r2,zero,401912c <igmp_fasttimo+0x98>
               continue;

         if (inm->inm_timer == 0)   /* timer not set */
 40190ec:	80800317 	ldw	r2,12(r16)
 40190f0:	10000e26 	beq	r2,zero,401912c <igmp_fasttimo+0x98>
         {
            /* do nothing */
         }
         else if (--inm->inm_timer == 0)  /* timer expired */
 40190f4:	10bfffc4 	addi	r2,r2,-1
 40190f8:	80800315 	stw	r2,12(r16)
 40190fc:	10000b1e 	bne	r2,zero,401912c <igmp_fasttimo+0x98>
         {
            /* send membership report in appropriate format */
            if (ifp->igmpv1_rtr_present)
 4019100:	88802d03 	ldbu	r2,180(r17)
 4019104:	10001826 	beq	r2,zero,4019168 <igmp_fasttimo+0xd4>
            {
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 4019108:	01000484 	movi	r4,18
 401910c:	800b883a 	mov	r5,r16
 4019110:	4018d040 	call	4018d04 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 4019114:	88c02f03 	ldbu	r3,188(r17)
 4019118:	00800084 	movi	r2,2
 401911c:	18801826 	beq	r3,r2,4019180 <igmp_fasttimo+0xec>
                  }
               }  
            }

            /* decrement the count of running IGMP timers */
            --igmp_timers_are_running;
 4019120:	d0a81a17 	ldw	r2,-24472(gp)
 4019124:	10bfffc4 	addi	r2,r2,-1
 4019128:	d0a81a15 	stw	r2,-24472(gp)
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 401912c:	84000517 	ldw	r16,20(r16)
 4019130:	803fec1e 	bne	r16,zero,40190e4 <igmp_fasttimo+0x50>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4019134:	8c400017 	ldw	r17,0(r17)
 4019138:	883fe71e 	bne	r17,zero,40190d8 <igmp_fasttimo+0x44>
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 401913c:	98800017 	ldw	r2,0(r19)

   UNLOCK_NET_RESOURCE (NET_RESID);
 4019140:	0009883a 	mov	r4,zero
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 4019144:	10800504 	addi	r2,r2,20
 4019148:	d0a81b15 	stw	r2,-24468(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
   
   return;
}
 401914c:	dfc00417 	ldw	ra,16(sp)
 4019150:	dcc00317 	ldw	r19,12(sp)
 4019154:	dc800217 	ldw	r18,8(sp)
 4019158:	dc400117 	ldw	r17,4(sp)
 401915c:	dc000017 	ldw	r16,0(sp)
 4019160:	dec00504 	addi	sp,sp,20

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;

   UNLOCK_NET_RESOURCE (NET_RESID);
 4019164:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
            }
            else
            {
               igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 4019168:	01000584 	movi	r4,22
 401916c:	800b883a 	mov	r5,r16
 4019170:	4018d040 	call	4018d04 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 4019174:	88c02f03 	ldbu	r3,188(r17)
 4019178:	00800084 	movi	r2,2
 401917c:	18bfe81e 	bne	r3,r2,4019120 <igmp_fasttimo+0x8c>
            {
               inm->last2send_report = IGMP_TRUE;
 4019180:	00800044 	movi	r2,1
 4019184:	80800405 	stb	r2,16(r16)
               
               if (ifp->igmpv1_rtr_present)
 4019188:	88c02d03 	ldbu	r3,180(r17)
 401918c:	183fe426 	beq	r3,zero,4019120 <igmp_fasttimo+0x8c>
               {
                  if (cticks > (ifp->igmpv1_query_rcvd_time + (IGMPv1_RTR_PRESENT_TMO * TPS)))
 4019190:	88802e17 	ldw	r2,184(r17)
 4019194:	98c00017 	ldw	r3,0(r19)
 4019198:	1485883a 	add	r2,r2,r18
 401919c:	10ffe02e 	bgeu	r2,r3,4019120 <igmp_fasttimo+0x8c>
                     /* we haven't heard from the IGMPv1 router for a duration
                      * greater than or equal to Version 1 Router Present Timeout 
                      * (400 seconds), and will now update the igmpv1_rtr_present 
                      * variable to reflect that.
                      */
                     ifp->igmpv1_rtr_present = IGMP_FALSE;
 40191a0:	88002d05 	stb	zero,180(r17)
                     ifp->igmpv1_query_rcvd_time = 0;
 40191a4:	88002e15 	stw	zero,184(r17)
 40191a8:	003fdd06 	br	4019120 <igmp_fasttimo+0x8c>
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
 40191ac:	0009883a 	mov	r4,zero
   igmp_cticks = cticks + TPS/PR_FASTHZ;

   UNLOCK_NET_RESOURCE (NET_RESID);
   
   return;
}
 40191b0:	dfc00417 	ldw	ra,16(sp)
 40191b4:	dcc00317 	ldw	r19,12(sp)
 40191b8:	dc800217 	ldw	r18,8(sp)
 40191bc:	dc400117 	ldw	r17,4(sp)
 40191c0:	dc000017 	ldw	r16,0(sp)
 40191c4:	dec00504 	addi	sp,sp,20

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;

   UNLOCK_NET_RESOURCE (NET_RESID);
 40191c8:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>
 40191cc:	04c10134 	movhi	r19,1028
 40191d0:	9ce93304 	addi	r19,r19,-23348
 40191d4:	003fd906 	br	401913c <igmp_fasttimo+0xa8>

040191d8 <igmp_input>:
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
 40191d8:	defffc04 	addi	sp,sp,-16
 40191dc:	dc800215 	stw	r18,8(sp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
 40191e0:	04810134 	movhi	r18,1028
 40191e4:	948bbf04 	addi	r18,r18,12028
 40191e8:	90800017 	ldw	r2,0(r18)
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
 40191ec:	dc400115 	stw	r17,4(sp)
 40191f0:	dc000015 	stw	r16,0(sp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
 40191f4:	10800044 	addi	r2,r2,1
 40191f8:	90800015 	stw	r2,0(r18)
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
 40191fc:	2023883a 	mov	r17,r4
 4019200:	dfc00315 	stw	ra,12(sp)
     
   ++igmpstats.igmp_total_rcvd;
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 4019204:	4018ac00 	call	4018ac0 <igmp_validate>
 4019208:	1021883a 	mov	r16,r2
         break;
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 401920c:	01000084 	movi	r4,2
     
   ++igmpstats.igmp_total_rcvd;
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 4019210:	1000091e 	bne	r2,zero,4019238 <igmp_input+0x60>
   /* determine the operating mode for IGMP on the ingress link */
   mode = p->net->igmp_oper_mode;
   
   /* feed packet to IGMPv1 or IGMPv2 code based on the operating
    * mode of the ingress link */
   switch (mode)
 4019214:	88c00617 	ldw	r3,24(r17)
 4019218:	00800044 	movi	r2,1
 401921c:	18c02f03 	ldbu	r3,188(r3)
 4019220:	18801126 	beq	r3,r2,4019268 <igmp_input+0x90>
 4019224:	19001726 	beq	r3,r4,4019284 <igmp_input+0xac>
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
#endif
      default:
         ++igmpstats.igmp_bad_oper_mode;     
 4019228:	90800d17 	ldw	r2,52(r18)
 401922c:	043fffc4 	movi	r16,-1
 4019230:	10800044 	addi	r2,r2,1
 4019234:	90800d15 	stw	r2,52(r18)
         break;
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4019238:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 401923c:	8809883a 	mov	r4,r17
 4019240:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4019244:	01000084 	movi	r4,2
 4019248:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      
   return rc;
}
 401924c:	8005883a 	mov	r2,r16
 4019250:	dfc00317 	ldw	ra,12(sp)
 4019254:	dc800217 	ldw	r18,8(sp)
 4019258:	dc400117 	ldw	r17,4(sp)
 401925c:	dc000017 	ldw	r16,0(sp)
 4019260:	dec00404 	addi	sp,sp,16
 4019264:	f800283a 	ret
    * mode of the ingress link */
   switch (mode)
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
 4019268:	8809883a 	mov	r4,r17
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
      
   return rc;
}
 401926c:	dfc00317 	ldw	ra,12(sp)
 4019270:	dc800217 	ldw	r18,8(sp)
 4019274:	dc400117 	ldw	r17,4(sp)
 4019278:	dc000017 	ldw	r16,0(sp)
 401927c:	dec00404 	addi	sp,sp,16
    * mode of the ingress link */
   switch (mode)
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
 4019280:	402c4401 	jmpi	402c440 <igmpv1_input>
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
 4019284:	8809883a 	mov	r4,r17
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
      
   return rc;
}
 4019288:	dfc00317 	ldw	ra,12(sp)
 401928c:	dc800217 	ldw	r18,8(sp)
 4019290:	dc400117 	ldw	r17,4(sp)
 4019294:	dc000017 	ldw	r16,0(sp)
 4019298:	dec00404 	addi	sp,sp,16
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
 401929c:	402c99c1 	jmpi	402c99c <igmpv2_input>

040192a0 <bsd_i_sockoptlen>:
bsd_i_sockoptlen(int level,
                 int name)
{
   USE_ARG(level);

   switch (name)
 40192a0:	00800804 	movi	r2,32
 40192a4:	28801326 	beq	r5,r2,40192f4 <bsd_i_sockoptlen+0x54>
 40192a8:	1140080e 	bge	r2,r5,40192cc <bsd_i_sockoptlen+0x2c>
 40192ac:	00840184 	movi	r2,4102
 40192b0:	1140120e 	bge	r2,r5,40192fc <bsd_i_sockoptlen+0x5c>
 40192b4:	00840204 	movi	r2,4104
 40192b8:	11400e0e 	bge	r2,r5,40192f4 <bsd_i_sockoptlen+0x54>
 40192bc:	00840584 	movi	r2,4118
 40192c0:	28800c26 	beq	r5,r2,40192f4 <bsd_i_sockoptlen+0x54>
 40192c4:	0005883a 	mov	r2,zero
 40192c8:	f800283a 	ret
 40192cc:	008002c4 	movi	r2,11
 40192d0:	11401316 	blt	r2,r5,4019320 <bsd_i_sockoptlen+0x80>
 40192d4:	00800284 	movi	r2,10
 40192d8:	28801c0e 	bge	r5,r2,401934c <bsd_i_sockoptlen+0xac>
 40192dc:	008000c4 	movi	r2,3
 40192e0:	28bff816 	blt	r5,r2,40192c4 <bsd_i_sockoptlen+0x24>
 40192e4:	00800104 	movi	r2,4
 40192e8:	1140020e 	bge	r2,r5,40192f4 <bsd_i_sockoptlen+0x54>
 40192ec:	00800204 	movi	r2,8
 40192f0:	28bff416 	blt	r5,r2,40192c4 <bsd_i_sockoptlen+0x24>
 40192f4:	00800104 	movi	r2,4
 40192f8:	f800283a 	ret
 40192fc:	00840144 	movi	r2,4101
 4019300:	2880100e 	bge	r5,r2,4019344 <bsd_i_sockoptlen+0xa4>
 4019304:	00804004 	movi	r2,256
 4019308:	28bffa26 	beq	r5,r2,40192f4 <bsd_i_sockoptlen+0x54>
 401930c:	1140090e 	bge	r2,r5,4019334 <bsd_i_sockoptlen+0x94>
 4019310:	28fbffc4 	addi	r3,r5,-4097
 4019314:	00800044 	movi	r2,1
 4019318:	10ffea36 	bltu	r2,r3,40192c4 <bsd_i_sockoptlen+0x24>
 401931c:	003ff506 	br	40192f4 <bsd_i_sockoptlen+0x54>
 4019320:	00800344 	movi	r2,13
 4019324:	1140050e 	bge	r2,r5,401933c <bsd_i_sockoptlen+0x9c>
 4019328:	00800404 	movi	r2,16
 401932c:	28bfe51e 	bne	r5,r2,40192c4 <bsd_i_sockoptlen+0x24>
 4019330:	003ff006 	br	40192f4 <bsd_i_sockoptlen+0x54>
 4019334:	00802004 	movi	r2,128
 4019338:	28bfe21e 	bne	r5,r2,40192c4 <bsd_i_sockoptlen+0x24>
      /* this option is type ip_addr */
      return sizeof(ip_addr);
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      /* these options are type u_char */
      return sizeof(u_char);
 401933c:	00800204 	movi	r2,8
   default:
      /* we don't know what type these options are */
      return 0;
   }
   
}
 4019340:	f800283a 	ret
bsd_i_sockoptlen(int level,
                 int name)
{
   USE_ARG(level);

   switch (name)
 4019344:	00800084 	movi	r2,2
 4019348:	f800283a 	ret
      /* this option is a struct linger */
      return sizeof(struct linger);
   case SO_RCVTIMEO:
   case SO_SNDTIMEO:
      /* these options are type short */
      return sizeof(short);
 401934c:	00800044 	movi	r2,1
 4019350:	f800283a 	ret

04019354 <bsd_setsockopt>:
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 4019354:	defff904 	addi	sp,sp,-28
 4019358:	dcc00315 	stw	r19,12(sp)
   struct socket * so;

   so = LONG2SO(s);
 401935c:	20bff804 	addi	r2,r4,-32
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 4019360:	dcc00717 	ldw	r19,28(sp)
   struct socket * so;

   so = LONG2SO(s);
 4019364:	1085883a 	add	r2,r2,r2
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 4019368:	dd400515 	stw	r21,20(sp)
 401936c:	dd000415 	stw	r20,16(sp)
 4019370:	dc800215 	stw	r18,8(sp)
 4019374:	dc400115 	stw	r17,4(sp)
 4019378:	dc000015 	stw	r16,0(sp)
 401937c:	dfc00615 	stw	ra,24(sp)
   struct socket * so;

   so = LONG2SO(s);
 4019380:	10a1883a 	add	r16,r2,r2
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 4019384:	2029883a 	mov	r20,r4
   struct socket * so;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019388:	00810134 	movhi	r2,1028
 401938c:	108cf804 	addi	r2,r2,13280
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 4019390:	2823883a 	mov	r17,r5
 4019394:	3025883a 	mov	r18,r6
 4019398:	382b883a 	mov	r21,r7
   struct socket * so;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401939c:	80800326 	beq	r16,r2,40193ac <bsd_setsockopt+0x58>
 40193a0:	10800017 	ldw	r2,0(r2)
 40193a4:	103ffd1e 	bne	r2,zero,401939c <bsd_setsockopt+0x48>
 40193a8:	80801e1e 	bne	r16,r2,4019424 <bsd_setsockopt+0xd0>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
 40193ac:	8809883a 	mov	r4,r17
 40193b0:	900b883a 	mov	r5,r18
 40193b4:	40192a00 	call	40192a0 <bsd_i_sockoptlen>
 40193b8:	98800e16 	blt	r19,r2,40193f4 <bsd_setsockopt+0xa0>
   {
      so->so_error = EFAULT;
      return -1;
   }

   return t_setsockopt(s, level, name, opt, optlen);
 40193bc:	a009883a 	mov	r4,r20
 40193c0:	880b883a 	mov	r5,r17
 40193c4:	900d883a 	mov	r6,r18
 40193c8:	a80f883a 	mov	r7,r21
 40193cc:	dcc00715 	stw	r19,28(sp)
}
 40193d0:	dfc00617 	ldw	ra,24(sp)
 40193d4:	dd400517 	ldw	r21,20(sp)
 40193d8:	dd000417 	ldw	r20,16(sp)
 40193dc:	dcc00317 	ldw	r19,12(sp)
 40193e0:	dc800217 	ldw	r18,8(sp)
 40193e4:	dc400117 	ldw	r17,4(sp)
 40193e8:	dc000017 	ldw	r16,0(sp)
 40193ec:	dec00704 	addi	sp,sp,28
   {
      so->so_error = EFAULT;
      return -1;
   }

   return t_setsockopt(s, level, name, opt, optlen);
 40193f0:	401ee801 	jmpi	401ee80 <t_setsockopt>
   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
   {
      so->so_error = EFAULT;
 40193f4:	00800384 	movi	r2,14
 40193f8:	80800615 	stw	r2,24(r16)
      return -1;
   }

   return t_setsockopt(s, level, name, opt, optlen);
}
 40193fc:	00bfffc4 	movi	r2,-1
 4019400:	dfc00617 	ldw	ra,24(sp)
 4019404:	dd400517 	ldw	r21,20(sp)
 4019408:	dd000417 	ldw	r20,16(sp)
 401940c:	dcc00317 	ldw	r19,12(sp)
 4019410:	dc800217 	ldw	r18,8(sp)
 4019414:	dc400117 	ldw	r17,4(sp)
 4019418:	dc000017 	ldw	r16,0(sp)
 401941c:	dec00704 	addi	sp,sp,28
 4019420:	f800283a 	ret
               void * opt, int optlen)
{
   struct socket * so;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019424:	401c81c0 	call	401c81c <dtrap>
 4019428:	003ff406 	br	40193fc <bsd_setsockopt+0xa8>

0401942c <bsd_select>:
bsd_select(int nfds,
           fd_set * readfds,
           fd_set * writefds,
           fd_set * exceptfds,
           BSD_TIMEVAL_T * timeout)
{
 401942c:	d8c00017 	ldw	r3,0(sp)
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
      }
      ltv += (timeout->tv_sec * TPS);
 4019430:	0100fa04 	movi	r4,1000
   long ltv;    /* timeout expressed in ticks */
   long tps;    /* local copy of TPS */

   USE_ARG(nfds);

   if (timeout != NULL)
 4019434:	00bfffc4 	movi	r2,-1
 4019438:	18000826 	beq	r3,zero,401945c <bsd_select+0x30>
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
      }
      ltv += (timeout->tv_sec * TPS);
 401943c:	18800117 	ldw	r2,4(r3)
 4019440:	18c00017 	ldw	r3,0(r3)
 4019444:	10807d04 	addi	r2,r2,500
 4019448:	1105283a 	div	r2,r2,r4
 401944c:	10801924 	muli	r2,r2,100
 4019450:	18c01924 	muli	r3,r3,100
 4019454:	1105283a 	div	r2,r2,r4
 4019458:	1885883a 	add	r2,r3,r2
       * NULL timeout: wait indefinitely in t_select()
       */
      ltv = -1;
   }

   return (t_select(readfds, writefds, exceptfds, ltv));
 401945c:	2809883a 	mov	r4,r5
 4019460:	300b883a 	mov	r5,r6
 4019464:	380d883a 	mov	r6,r7
 4019468:	100f883a 	mov	r7,r2
 401946c:	40219981 	jmpi	4021998 <t_select>

04019470 <bsd_recvfrom>:
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 4019470:	defff304 	addi	sp,sp,-52
 4019474:	dd000b15 	stw	r20,44(sp)
 4019478:	dc400815 	stw	r17,32(sp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
   int lret;

   so = LONG2SO(s);
 401947c:	20bff804 	addi	r2,r4,-32
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 4019480:	dd000d17 	ldw	r20,52(sp)
 4019484:	dc400e17 	ldw	r17,56(sp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
   int lret;

   so = LONG2SO(s);
 4019488:	1085883a 	add	r2,r2,r2
 401948c:	1087883a 	add	r3,r2,r2
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 4019490:	dfc00c15 	stw	ra,48(sp)
 4019494:	dcc00a15 	stw	r19,40(sp)
 4019498:	dc800915 	stw	r18,36(sp)
 401949c:	dc000715 	stw	r16,28(sp)
   struct sockaddr lfrom;
   int lfromlen = 0;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40194a0:	00810134 	movhi	r2,1028
 40194a4:	108cf804 	addi	r2,r2,13280
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 40194a8:	3011883a 	mov	r8,r6
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
 40194ac:	d8000215 	stw	zero,8(sp)
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40194b0:	18800326 	beq	r3,r2,40194c0 <bsd_recvfrom+0x50>
 40194b4:	10800017 	ldw	r2,0(r2)
 40194b8:	103ffd1e 	bne	r2,zero,40194b0 <bsd_recvfrom+0x40>
 40194bc:	1880231e 	bne	r3,r2,401954c <bsd_recvfrom+0xdc>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (from != NULL)
 40194c0:	a021003a 	cmpeq	r16,r20,zero
 40194c4:	8000031e 	bne	r16,zero,40194d4 <bsd_recvfrom+0x64>
   {
      if (fromlen == NULL)
 40194c8:	88002326 	beq	r17,zero,4019558 <bsd_recvfrom+0xe8>
      {
         so->so_error = EFAULT;
         return -1;
      }
      lfromlen = *fromlen;
 40194cc:	89800017 	ldw	r6,0(r17)
 40194d0:	d9800215 	stw	r6,8(sp)
   }

   lret = t_recvfrom(s, (char *)buf, len, flags, &lfrom, &lfromlen );
 40194d4:	d8800204 	addi	r2,sp,8
 40194d8:	400d883a 	mov	r6,r8
 40194dc:	dc800304 	addi	r18,sp,12
 40194e0:	dc800015 	stw	r18,0(sp)
 40194e4:	d8800115 	stw	r2,4(sp)
 40194e8:	401ebb40 	call	401ebb4 <t_recvfrom>
 40194ec:	1027883a 	mov	r19,r2
    * sockaddr_in), which is all that t_recvfrom() can return as a peer
    * name.
    * For IPV6 addresses or dual IPV4/IPV6 stack, the max size copied
    * is sizeof(struct sockaddr_in6)
    */
   if ((lret != -1) && (from != NULL))
 40194f0:	00bfffc4 	movi	r2,-1
 40194f4:	98800926 	beq	r19,r2,401951c <bsd_recvfrom+0xac>
 40194f8:	8000081e 	bne	r16,zero,401951c <bsd_recvfrom+0xac>
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
 40194fc:	d9800217 	ldw	r6,8(sp)
 4019500:	00800404 	movi	r2,16
 4019504:	11800e36 	bltu	r2,r6,4019540 <bsd_recvfrom+0xd0>
#else
      if (lfromlen > sizeof(struct sockaddr_in6))
         lfromlen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(from, &lfrom, lfromlen);
 4019508:	a009883a 	mov	r4,r20
 401950c:	900b883a 	mov	r5,r18
 4019510:	40096480 	call	4009648 <memcpy>
      *fromlen = lfromlen;
 4019514:	d8c00217 	ldw	r3,8(sp)
 4019518:	88c00015 	stw	r3,0(r17)
   }

   return lret;
}
 401951c:	9805883a 	mov	r2,r19
 4019520:	dfc00c17 	ldw	ra,48(sp)
 4019524:	dd000b17 	ldw	r20,44(sp)
 4019528:	dcc00a17 	ldw	r19,40(sp)
 401952c:	dc800917 	ldw	r18,36(sp)
 4019530:	dc400817 	ldw	r17,32(sp)
 4019534:	dc000717 	ldw	r16,28(sp)
 4019538:	dec00d04 	addi	sp,sp,52
 401953c:	f800283a 	ret
    */
   if ((lret != -1) && (from != NULL))
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
         lfromlen = sizeof(struct sockaddr_in);
 4019540:	100d883a 	mov	r6,r2
 4019544:	d8800215 	stw	r2,8(sp)
 4019548:	003fef06 	br	4019508 <bsd_recvfrom+0x98>
   struct sockaddr lfrom;
   int lfromlen = 0;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401954c:	401c81c0 	call	401c81c <dtrap>
 4019550:	04ffffc4 	movi	r19,-1
 4019554:	003ff106 	br	401951c <bsd_recvfrom+0xac>
    */
   if (from != NULL)
   {
      if (fromlen == NULL)
      {
         so->so_error = EFAULT;
 4019558:	00800384 	movi	r2,14
 401955c:	04ffffc4 	movi	r19,-1
 4019560:	18800615 	stw	r2,24(r3)
 4019564:	003fed06 	br	401951c <bsd_recvfrom+0xac>

04019568 <bsd_inet_ntoa>:
 *          printable representation of in
 */
char *
bsd_inet_ntoa(struct in_addr in)
{
   return print_ipad(in.s_addr);
 4019568:	401a0481 	jmpi	401a048 <print_ipad>

0401956c <bsd_ioctl>:
 *          available via bsd_errno(s).
 */
int
bsd_ioctl(BSD_SOCKET s, 
          unsigned long request, ...)
{
 401956c:	defffa04 	addi	sp,sp,-24
 4019570:	dfc00315 	stw	ra,12(sp)
 4019574:	d9800415 	stw	r6,16(sp)
 4019578:	d9c00515 	stw	r7,20(sp)
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
 401957c:	20bff804 	addi	r2,r4,-32
 4019580:	1085883a 	add	r2,r2,r2
 4019584:	1087883a 	add	r3,r2,r2
   SOC_CHECK(so);
 4019588:	00810134 	movhi	r2,1028
 401958c:	108cf804 	addi	r2,r2,13280
 4019590:	18800326 	beq	r3,r2,40195a0 <bsd_ioctl+0x34>
 4019594:	10800017 	ldw	r2,0(r2)
 4019598:	103ffd1e 	bne	r2,zero,4019590 <bsd_ioctl+0x24>
 401959c:	1880171e 	bne	r3,r2,40195fc <bsd_ioctl+0x90>

   va_start(argptr, request);
 40195a0:	d8800404 	addi	r2,sp,16
 40195a4:	d8800215 	stw	r2,8(sp)

   switch (request)
 40195a8:	00840584 	movi	r2,4118
 40195ac:	28800626 	beq	r5,r2,40195c8 <bsd_ioctl+0x5c>
   case FIONBIO:
      iarg = va_arg(argptr, int);
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
   default:
      so->so_error = EINVAL;
 40195b0:	00800584 	movi	r2,22
 40195b4:	18800615 	stw	r2,24(r3)
 40195b8:	00bfffc4 	movi	r2,-1
      return -1;
   }
}
 40195bc:	dfc00317 	ldw	ra,12(sp)
 40195c0:	dec00604 	addi	sp,sp,24
 40195c4:	f800283a 	ret
   va_start(argptr, request);

   switch (request)
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
 40195c8:	d8c00417 	ldw	r3,16(sp)
 40195cc:	d8800504 	addi	r2,sp,20
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
 40195d0:	280d883a 	mov	r6,r5
   va_start(argptr, request);

   switch (request)
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
 40195d4:	d8800215 	stw	r2,8(sp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
 40195d8:	017fffc4 	movi	r5,-1
 40195dc:	d9c00104 	addi	r7,sp,4
 40195e0:	00800104 	movi	r2,4
   va_start(argptr, request);

   switch (request)
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
 40195e4:	d8c00115 	stw	r3,4(sp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
 40195e8:	d8800015 	stw	r2,0(sp)
 40195ec:	401ee800 	call	401ee80 <t_setsockopt>
   default:
      so->so_error = EINVAL;
      return -1;
   }
}
 40195f0:	dfc00317 	ldw	ra,12(sp)
 40195f4:	dec00604 	addi	sp,sp,24
 40195f8:	f800283a 	ret
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40195fc:	401c81c0 	call	401c81c <dtrap>
 4019600:	00bfffc4 	movi	r2,-1
 4019604:	003fed06 	br	40195bc <bsd_ioctl+0x50>

04019608 <bsd_getsockopt>:
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 4019608:	defff704 	addi	sp,sp,-36
 401960c:	dc800315 	stw	r18,12(sp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
 4019610:	20bff804 	addi	r2,r4,-32
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 4019614:	dc800917 	ldw	r18,36(sp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
 4019618:	1085883a 	add	r2,r2,r2
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 401961c:	dd800715 	stw	r22,28(sp)
 4019620:	dd400615 	stw	r21,24(sp)
 4019624:	dd000515 	stw	r20,20(sp)
 4019628:	dcc00415 	stw	r19,16(sp)
 401962c:	dc000115 	stw	r16,4(sp)
 4019630:	dfc00815 	stw	ra,32(sp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
 4019634:	10a1883a 	add	r16,r2,r2
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 4019638:	dc400215 	stw	r17,8(sp)
 401963c:	202b883a 	mov	r21,r4
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019640:	00810134 	movhi	r2,1028
 4019644:	108cf804 	addi	r2,r2,13280
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 4019648:	2827883a 	mov	r19,r5
 401964c:	3029883a 	mov	r20,r6
 4019650:	382d883a 	mov	r22,r7
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019654:	80800326 	beq	r16,r2,4019664 <bsd_getsockopt+0x5c>
 4019658:	10800017 	ldw	r2,0(r2)
 401965c:	103ffd1e 	bne	r2,zero,4019654 <bsd_getsockopt+0x4c>
 4019660:	80801f1e 	bne	r16,r2,40196e0 <bsd_getsockopt+0xd8>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
   if ((optlen == NULL) || (*optlen < loptlen))
 4019664:	90000626 	beq	r18,zero,4019680 <bsd_getsockopt+0x78>
   SOC_CHECK(so);

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
 4019668:	9809883a 	mov	r4,r19
 401966c:	a00b883a 	mov	r5,r20
 4019670:	40192a00 	call	40192a0 <bsd_i_sockoptlen>
 4019674:	1023883a 	mov	r17,r2
   if ((optlen == NULL) || (*optlen < loptlen))
 4019678:	90800017 	ldw	r2,0(r18)
 401967c:	14400e0e 	bge	r2,r17,40196b8 <bsd_getsockopt+0xb0>
   {
      so->so_error = EFAULT;
 4019680:	00800384 	movi	r2,14
 4019684:	00ffffc4 	movi	r3,-1
 4019688:	80800615 	stw	r2,24(r16)
      *optlen = loptlen;
   }

   return e;
   
}
 401968c:	1805883a 	mov	r2,r3
 4019690:	dfc00817 	ldw	ra,32(sp)
 4019694:	dd800717 	ldw	r22,28(sp)
 4019698:	dd400617 	ldw	r21,24(sp)
 401969c:	dd000517 	ldw	r20,20(sp)
 40196a0:	dcc00417 	ldw	r19,16(sp)
 40196a4:	dc800317 	ldw	r18,12(sp)
 40196a8:	dc400217 	ldw	r17,8(sp)
 40196ac:	dc000117 	ldw	r16,4(sp)
 40196b0:	dec00904 	addi	sp,sp,36
 40196b4:	f800283a 	ret
   {
      so->so_error = EFAULT;
      return -1;
   }

   e = t_getsockopt(s, level, name, opt, loptlen);
 40196b8:	a809883a 	mov	r4,r21
 40196bc:	980b883a 	mov	r5,r19
 40196c0:	a00d883a 	mov	r6,r20
 40196c4:	b00f883a 	mov	r7,r22
 40196c8:	dc400015 	stw	r17,0(sp)
 40196cc:	401ed700 	call	401ed70 <t_getsockopt>
 40196d0:	1007883a 	mov	r3,r2

   /* if it worked, copy the option length back for the caller's use */
   if (e == 0)
 40196d4:	103fed1e 	bne	r2,zero,401968c <bsd_getsockopt+0x84>
   {
      *optlen = loptlen;
 40196d8:	94400015 	stw	r17,0(r18)
 40196dc:	003feb06 	br	401968c <bsd_getsockopt+0x84>
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40196e0:	401c81c0 	call	401c81c <dtrap>
 40196e4:	00ffffc4 	movi	r3,-1
 40196e8:	003fe806 	br	401968c <bsd_getsockopt+0x84>

040196ec <bsd_getsockname>:
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 40196ec:	20bff804 	addi	r2,r4,-32
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 40196f0:	defff604 	addi	sp,sp,-40
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 40196f4:	1085883a 	add	r2,r2,r2
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 40196f8:	dcc00815 	stw	r19,32(sp)
 40196fc:	dc000515 	stw	r16,20(sp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 4019700:	1087883a 	add	r3,r2,r2
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 4019704:	dfc00915 	stw	ra,36(sp)
 4019708:	dc800715 	stw	r18,28(sp)
 401970c:	dc400615 	stw	r17,24(sp)
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019710:	00810134 	movhi	r2,1028
 4019714:	108cf804 	addi	r2,r2,13280
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 4019718:	2827883a 	mov	r19,r5
 401971c:	3021883a 	mov	r16,r6
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019720:	18800326 	beq	r3,r2,4019730 <bsd_getsockname+0x44>
 4019724:	10800017 	ldw	r2,0(r2)
 4019728:	103ffd1e 	bne	r2,zero,4019720 <bsd_getsockname+0x34>
 401972c:	18801e1e 	bne	r3,r2,40197a8 <bsd_getsockname+0xbc>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 4019730:	80002026 	beq	r16,zero,40197b4 <bsd_getsockname+0xc8>
   {
      so->so_error = EFAULT;
      return -1;
   }
   lnamelen = *namelen;
 4019734:	80800017 	ldw	r2,0(r16)

   lret = t_getsockname(s, &lname, &lnamelen);
 4019738:	dc400104 	addi	r17,sp,4
 401973c:	880b883a 	mov	r5,r17
 4019740:	d80d883a 	mov	r6,sp
   if (namelen == NULL)
   {
      so->so_error = EFAULT;
      return -1;
   }
   lnamelen = *namelen;
 4019744:	d8800015 	stw	r2,0(sp)

   lret = t_getsockname(s, &lname, &lnamelen);
 4019748:	401eba40 	call	401eba4 <t_getsockname>
 401974c:	1025883a 	mov	r18,r2
    * copied length back to the caller.  
    * For IPV6 addresses, or for a dual IPV4/IPV6 stack, 
    * the max size copied is sizeof(struct sockaddr_in6)
    *
    */
   if (lret != -1)
 4019750:	00bfffc4 	movi	r2,-1
 4019754:	90800926 	beq	r18,r2,401977c <bsd_getsockname+0x90>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 4019758:	d8800017 	ldw	r2,0(sp)
 401975c:	01800404 	movi	r6,16
 4019760:	30800e36 	bltu	r6,r2,401979c <bsd_getsockname+0xb0>
         lnamelen = sizeof(struct sockaddr_in);
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);
#endif
      MEMCPY(name, &lname, lnamelen);
 4019764:	9809883a 	mov	r4,r19
 4019768:	880b883a 	mov	r5,r17
 401976c:	100d883a 	mov	r6,r2
 4019770:	40096480 	call	4009648 <memcpy>
      *namelen = lnamelen;
 4019774:	d8c00017 	ldw	r3,0(sp)
 4019778:	80c00015 	stw	r3,0(r16)
   }

   return lret;
}
 401977c:	9005883a 	mov	r2,r18
 4019780:	dfc00917 	ldw	ra,36(sp)
 4019784:	dcc00817 	ldw	r19,32(sp)
 4019788:	dc800717 	ldw	r18,28(sp)
 401978c:	dc400617 	ldw	r17,24(sp)
 4019790:	dc000517 	ldw	r16,20(sp)
 4019794:	dec00a04 	addi	sp,sp,40
 4019798:	f800283a 	ret
    */
   if (lret != -1)
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
         lnamelen = sizeof(struct sockaddr_in);
 401979c:	3005883a 	mov	r2,r6
 40197a0:	d9800015 	stw	r6,0(sp)
 40197a4:	003fef06 	br	4019764 <bsd_getsockname+0x78>
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40197a8:	401c81c0 	call	401c81c <dtrap>
 40197ac:	04bfffc4 	movi	r18,-1
 40197b0:	003ff206 	br	401977c <bsd_getsockname+0x90>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
   {
      so->so_error = EFAULT;
 40197b4:	00800384 	movi	r2,14
 40197b8:	04bfffc4 	movi	r18,-1
 40197bc:	18800615 	stw	r2,24(r3)
 40197c0:	003fee06 	br	401977c <bsd_getsockname+0x90>

040197c4 <bsd_getpeername>:
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 40197c4:	20bff804 	addi	r2,r4,-32
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 40197c8:	defff604 	addi	sp,sp,-40
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 40197cc:	1085883a 	add	r2,r2,r2
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 40197d0:	dcc00815 	stw	r19,32(sp)
 40197d4:	dc000515 	stw	r16,20(sp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 40197d8:	1087883a 	add	r3,r2,r2
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 40197dc:	dfc00915 	stw	ra,36(sp)
 40197e0:	dc800715 	stw	r18,28(sp)
 40197e4:	dc400615 	stw	r17,24(sp)
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40197e8:	00810134 	movhi	r2,1028
 40197ec:	108cf804 	addi	r2,r2,13280
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 40197f0:	2827883a 	mov	r19,r5
 40197f4:	3021883a 	mov	r16,r6
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40197f8:	18800326 	beq	r3,r2,4019808 <bsd_getpeername+0x44>
 40197fc:	10800017 	ldw	r2,0(r2)
 4019800:	103ffd1e 	bne	r2,zero,40197f8 <bsd_getpeername+0x34>
 4019804:	18801e1e 	bne	r3,r2,4019880 <bsd_getpeername+0xbc>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 4019808:	80002026 	beq	r16,zero,401988c <bsd_getpeername+0xc8>
   {
      so->so_error = EFAULT;
      return -1;
   }
   lnamelen = *namelen;
 401980c:	80800017 	ldw	r2,0(r16)

   lret = t_getpeername(s, &lname, &lnamelen);
 4019810:	dc400104 	addi	r17,sp,4
 4019814:	880b883a 	mov	r5,r17
 4019818:	d80d883a 	mov	r6,sp
   if (namelen == NULL)
   {
      so->so_error = EFAULT;
      return -1;
   }
   lnamelen = *namelen;
 401981c:	d8800015 	stw	r2,0(sp)

   lret = t_getpeername(s, &lname, &lnamelen);
 4019820:	401ebac0 	call	401ebac <t_getpeername>
 4019824:	1025883a 	mov	r18,r2
    * t_getpeername() can return as a peer address, and pass the
    * copied length back to the caller.  
    * For IPV6 addresses, or for dual IPV4/IPV6 stack, 
    * the max size is sizeof(struct sockaddr_in6)
    */
   if (lret != -1)
 4019828:	00bfffc4 	movi	r2,-1
 401982c:	90800926 	beq	r18,r2,4019854 <bsd_getpeername+0x90>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 4019830:	d8800017 	ldw	r2,0(sp)
 4019834:	01800404 	movi	r6,16
 4019838:	30800e36 	bltu	r6,r2,4019874 <bsd_getpeername+0xb0>
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(name, &lname, lnamelen);
 401983c:	9809883a 	mov	r4,r19
 4019840:	880b883a 	mov	r5,r17
 4019844:	100d883a 	mov	r6,r2
 4019848:	40096480 	call	4009648 <memcpy>
      *namelen = lnamelen;
 401984c:	d8c00017 	ldw	r3,0(sp)
 4019850:	80c00015 	stw	r3,0(r16)
   }

   return lret;
}
 4019854:	9005883a 	mov	r2,r18
 4019858:	dfc00917 	ldw	ra,36(sp)
 401985c:	dcc00817 	ldw	r19,32(sp)
 4019860:	dc800717 	ldw	r18,28(sp)
 4019864:	dc400617 	ldw	r17,24(sp)
 4019868:	dc000517 	ldw	r16,20(sp)
 401986c:	dec00a04 	addi	sp,sp,40
 4019870:	f800283a 	ret
    */
   if (lret != -1)
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
         lnamelen = sizeof(struct sockaddr_in);
 4019874:	3005883a 	mov	r2,r6
 4019878:	d9800015 	stw	r6,0(sp)
 401987c:	003fef06 	br	401983c <bsd_getpeername+0x78>
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 4019880:	401c81c0 	call	401c81c <dtrap>
 4019884:	04bfffc4 	movi	r18,-1
 4019888:	003ff206 	br	4019854 <bsd_getpeername+0x90>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
   {
      so->so_error = EFAULT;
 401988c:	00800384 	movi	r2,14
 4019890:	04bfffc4 	movi	r18,-1
 4019894:	18800615 	stw	r2,24(r3)
 4019898:	003fee06 	br	4019854 <bsd_getpeername+0x90>

0401989c <bsd_accept>:
{
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
 401989c:	20bff804 	addi	r2,r4,-32
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 40198a0:	defff704 	addi	sp,sp,-36
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
 40198a4:	1085883a 	add	r2,r2,r2
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 40198a8:	dc800615 	stw	r18,24(sp)
 40198ac:	dc000415 	stw	r16,16(sp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
 40198b0:	1087883a 	add	r3,r2,r2
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 40198b4:	dfc00815 	stw	ra,32(sp)
 40198b8:	dcc00715 	stw	r19,28(sp)
 40198bc:	dc400515 	stw	r17,20(sp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40198c0:	00810134 	movhi	r2,1028
 40198c4:	108cf804 	addi	r2,r2,13280
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 40198c8:	2825883a 	mov	r18,r5
 40198cc:	3021883a 	mov	r16,r6
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 40198d0:	18800326 	beq	r3,r2,40198e0 <bsd_accept+0x44>
 40198d4:	10800017 	ldw	r2,0(r2)
 40198d8:	103ffd1e 	bne	r2,zero,40198d0 <bsd_accept+0x34>
 40198dc:	18801b1e 	bne	r3,r2,401994c <bsd_accept+0xb0>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (addr != NULL)
 40198e0:	9023003a 	cmpeq	r17,r18,zero
 40198e4:	8800011e 	bne	r17,zero,40198ec <bsd_accept+0x50>
   {
      if (addrlen == 0)
 40198e8:	80001b26 	beq	r16,zero,4019958 <bsd_accept+0xbc>
         so->so_error = EFAULT;
         return -1;
      }
   }

   lret = t_accept(s, &laddr, addrlen);
 40198ec:	d80b883a 	mov	r5,sp
 40198f0:	800d883a 	mov	r6,r16
 40198f4:	401f1340 	call	401f134 <t_accept>
 40198f8:	1027883a 	mov	r19,r2
    * address: copy the peer's address back into the buffer, but limit
    * the copy to the lesser of the buffer's length and sizeof(struct
    * sockaddr_in), which is all that t_accept() can return as a peer
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
 40198fc:	00bfffc4 	movi	r2,-1
 4019900:	98800726 	beq	r19,r2,4019920 <bsd_accept+0x84>
 4019904:	8800061e 	bne	r17,zero,4019920 <bsd_accept+0x84>
   {
      if (*addrlen > sizeof(struct sockaddr_in))
 4019908:	81800017 	ldw	r6,0(r16)
 401990c:	00800404 	movi	r2,16
 4019910:	11800b36 	bltu	r2,r6,4019940 <bsd_accept+0xa4>
         *addrlen = sizeof(struct sockaddr_in);
      MEMCPY(addr, &laddr, *addrlen);
 4019914:	9009883a 	mov	r4,r18
 4019918:	d80b883a 	mov	r5,sp
 401991c:	40096480 	call	4009648 <memcpy>
   }

   return lret;
}
 4019920:	9805883a 	mov	r2,r19
 4019924:	dfc00817 	ldw	ra,32(sp)
 4019928:	dcc00717 	ldw	r19,28(sp)
 401992c:	dc800617 	ldw	r18,24(sp)
 4019930:	dc400517 	ldw	r17,20(sp)
 4019934:	dc000417 	ldw	r16,16(sp)
 4019938:	dec00904 	addi	sp,sp,36
 401993c:	f800283a 	ret
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
   {
      if (*addrlen > sizeof(struct sockaddr_in))
         *addrlen = sizeof(struct sockaddr_in);
 4019940:	100d883a 	mov	r6,r2
 4019944:	80800015 	stw	r2,0(r16)
 4019948:	003ff206 	br	4019914 <bsd_accept+0x78>
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401994c:	401c81c0 	call	401c81c <dtrap>
 4019950:	04ffffc4 	movi	r19,-1
 4019954:	003ff206 	br	4019920 <bsd_accept+0x84>
    */
   if (addr != NULL)
   {
      if (addrlen == 0)
      {
         so->so_error = EFAULT;
 4019958:	00800384 	movi	r2,14
 401995c:	04ffffc4 	movi	r19,-1
 4019960:	18800615 	stw	r2,24(r3)
 4019964:	003fee06 	br	4019920 <bsd_accept+0x84>

04019968 <ccksum>:
{
   unsigned short *addr = (unsigned short *)ptr;
   unsigned long sum = 0;
   int count = (int)words;

   while (--count >= 0)
 4019968:	28bfffc4 	addi	r2,r5,-1
 401996c:	10000e16 	blt	r2,zero,40199a8 <ccksum+0x40>
 */

unsigned short
ccksum (void *ptr, unsigned words)
{
   unsigned short *addr = (unsigned short *)ptr;
 4019970:	0007883a 	mov	r3,zero
 4019974:	000d883a 	mov	r6,zero
   int count = (int)words;

   while (--count >= 0)
   {
      /*  This is the inner loop */
      sum += *addr++;
 4019978:	2080000b 	ldhu	r2,0(r4)
 401997c:	31800044 	addi	r6,r6,1
 4019980:	21000084 	addi	r4,r4,2
 4019984:	1887883a 	add	r3,r3,r2
{
   unsigned short *addr = (unsigned short *)ptr;
   unsigned long sum = 0;
   int count = (int)words;

   while (--count >= 0)
 4019988:	29bffb1e 	bne	r5,r6,4019978 <ccksum+0x10>
 401998c:	1804d43a 	srli	r2,r3,16
 4019990:	18ffffcc 	andi	r3,r3,65535
 4019994:	1887883a 	add	r3,r3,r2
 4019998:	1808d43a 	srli	r4,r3,16
 401999c:	1907883a 	add	r3,r3,r4
 40199a0:	18bfffcc 	andi	r2,r3,65535
   sum = (sum & 0xffff) + (sum >> 16);
   sum = (sum & 0xffff) + (sum >> 16);

   /* checksum = ~sum; *//* removed for MIT IP stack */
   return ((unsigned short)sum);
}
 40199a4:	f800283a 	ret
{
   unsigned short *addr = (unsigned short *)ptr;
   unsigned long sum = 0;
   int count = (int)words;

   while (--count >= 0)
 40199a8:	0005883a 	mov	r2,zero
 40199ac:	f800283a 	ret

040199b0 <cksum>:
 *    3 = user-supplied alternate implementation
 */

unsigned short
cksum (void *ptr, unsigned count)
{
 40199b0:	deffff04 	addi	sp,sp,-4
 40199b4:	dfc00015 	stw	ra,0(sp)
      case 1:
      default:
         return (ccksum(ptr, count));
 #ifndef C_CHECKSUM
      case 2:
         return (asm_cksum(ptr, count));
 40199b8:	401c5ac0 	call	401c5ac <asm_cksum>
#else
#endif
         return (alt_cksum(ptr, count));
#endif
   }
}
 40199bc:	10bfffcc 	andi	r2,r2,65535
 40199c0:	dfc00017 	ldw	ra,0(sp)
 40199c4:	dec00104 	addi	sp,sp,4
 40199c8:	f800283a 	ret

040199cc <nextarg>:
 */

char *   
nextarg(char * argp)
{
   while (*argp > ' ')argp++; /* scan past current arg */
 40199cc:	20c00007 	ldb	r3,0(r4)
 40199d0:	00800804 	movi	r2,32
 40199d4:	10c0030e 	bge	r2,r3,40199e4 <nextarg+0x18>
 40199d8:	21000044 	addi	r4,r4,1
 40199dc:	20c00007 	ldb	r3,0(r4)
 40199e0:	10fffd16 	blt	r2,r3,40199d8 <nextarg+0xc>
      while (*argp == ' ')argp++;   /* scan past spaces */
 40199e4:	00800804 	movi	r2,32
 40199e8:	1880031e 	bne	r3,r2,40199f8 <nextarg+0x2c>
 40199ec:	21000044 	addi	r4,r4,1
 40199f0:	20800007 	ldb	r2,0(r4)
 40199f4:	10fffd26 	beq	r2,r3,40199ec <nextarg+0x20>
      return (argp);
}
 40199f8:	2005883a 	mov	r2,r4
 40199fc:	f800283a 	ret

04019a00 <print_eth>:

char     eth_prt_buf[18];  /* buffer for return */

char *   
print_eth(char * addr, char spacer)
{
 4019a00:	28803fcc 	andi	r2,r5,255
 4019a04:	1080201c 	xori	r2,r2,128
 4019a08:	10bfe004 	addi	r2,r2,-128
 4019a0c:	1015003a 	cmpeq	r10,r2,zero
 4019a10:	000f883a 	mov	r7,zero
 4019a14:	00c10134 	movhi	r3,1028
 4019a18:	18cbd804 	addi	r3,r3,12128
 4019a1c:	02400e44 	movi	r9,57
 4019a20:	03000104 	movi	r12,4
 4019a24:	02c00184 	movi	r11,6

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
 4019a28:	20800003 	ldbu	r2,0(r4)
      if (*out > '9')   /* need to make it A-F? */
         (*out) += 7;
      out++;
 4019a2c:	1a000044 	addi	r8,r3,1

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
 4019a30:	1004d13a 	srli	r2,r2,4
      if (*out > '9')   /* need to make it A-F? */
         (*out) += 7;
 4019a34:	11800dc4 	addi	r6,r2,55

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
 4019a38:	10800c04 	addi	r2,r2,48
 4019a3c:	18800005 	stb	r2,0(r3)
      if (*out > '9')   /* need to make it A-F? */
 4019a40:	4880010e 	bge	r9,r2,4019a48 <print_eth+0x48>
         (*out) += 7;
 4019a44:	19800005 	stb	r6,0(r3)
      out++;

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
 4019a48:	20800003 	ldbu	r2,0(r4)
      out++;

      /* optional spacer character */
      if (spacer && i < 5)
         *out++ = spacer;
      addr++;
 4019a4c:	21000044 	addi	r4,r4,1
      if (*out > '9')   /* need to make it A-F? */
         (*out) += 7;
      out++;

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
 4019a50:	108003cc 	andi	r2,r2,15
      if (*out > '9')   /* need to make it A-F? */
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
 4019a54:	11800dc4 	addi	r6,r2,55
      if (*out > '9')   /* need to make it A-F? */
         (*out) += 7;
      out++;

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
 4019a58:	10800c04 	addi	r2,r2,48
 4019a5c:	18800045 	stb	r2,1(r3)
      if (*out > '9')   /* need to make it A-F? */
 4019a60:	4880010e 	bge	r9,r2,4019a68 <print_eth+0x68>
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
 4019a64:	19800045 	stb	r6,1(r3)
      out++;
 4019a68:	18c00084 	addi	r3,r3,2

      /* optional spacer character */
      if (spacer && i < 5)
 4019a6c:	5000031e 	bne	r10,zero,4019a7c <print_eth+0x7c>
 4019a70:	61c00216 	blt	r12,r7,4019a7c <print_eth+0x7c>
         *out++ = spacer;
 4019a74:	41400045 	stb	r5,1(r8)
 4019a78:	40c00084 	addi	r3,r8,2
{
   int   i;
   char *   out   =  eth_prt_buf;

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
 4019a7c:	39c00044 	addi	r7,r7,1
 4019a80:	3affe91e 	bne	r7,r11,4019a28 <print_eth+0x28>
         *out++ = spacer;
      addr++;
   }
   *out = 0;
   return eth_prt_buf;
}
 4019a84:	00810134 	movhi	r2,1028
 4019a88:	108bd804 	addi	r2,r2,12128
      /* optional spacer character */
      if (spacer && i < 5)
         *out++ = spacer;
      addr++;
   }
   *out = 0;
 4019a8c:	18000005 	stb	zero,0(r3)
   return eth_prt_buf;
}
 4019a90:	f800283a 	ret

04019a94 <uslash>:
char *   
uslash(char * path)
{
   char *   cp;

   for (cp = path; *cp; cp++)
 4019a94:	20800007 	ldb	r2,0(r4)
 4019a98:	10000726 	beq	r2,zero,4019ab8 <uslash+0x24>
 4019a9c:	2007883a 	mov	r3,r4
 4019aa0:	01401704 	movi	r5,92
 4019aa4:	01800bc4 	movi	r6,47
      if (*cp == '\\')
 4019aa8:	11400526 	beq	r2,r5,4019ac0 <uslash+0x2c>
char *   
uslash(char * path)
{
   char *   cp;

   for (cp = path; *cp; cp++)
 4019aac:	18c00044 	addi	r3,r3,1
 4019ab0:	18800007 	ldb	r2,0(r3)
 4019ab4:	103ffc1e 	bne	r2,zero,4019aa8 <uslash+0x14>
      if (*cp == '\\')
      *cp = '/';
   return path;
}
 4019ab8:	2005883a 	mov	r2,r4
 4019abc:	f800283a 	ret
{
   char *   cp;

   for (cp = path; *cp; cp++)
      if (*cp == '\\')
      *cp = '/';
 4019ac0:	19800005 	stb	r6,0(r3)
 4019ac4:	003ff906 	br	4019aac <uslash+0x18>

04019ac8 <parse_args>:
   }
   return  0;
}

char **parse_args(char *buf, int argc, int *pargc_index)
{
 4019ac8:	defffb04 	addi	sp,sp,-20
 4019acc:	dc800215 	stw	r18,8(sp)
 4019ad0:	dc400115 	stw	r17,4(sp)
 4019ad4:	dc000015 	stw	r16,0(sp)
 4019ad8:	dfc00415 	stw	ra,16(sp)
 4019adc:	dcc00315 	stw	r19,12(sp)
 4019ae0:	3021883a 	mov	r16,r6
 4019ae4:	2023883a 	mov	r17,r4
 4019ae8:	2825883a 	mov	r18,r5
   /* This routine assumes buf is a null terminated string */
   int i;
   int len;
   char *bp = buf;
   char **pargv = NULL;
   *pargc_index = 0;
 4019aec:	30000015 	stw	zero,0(r6)
   if (buf == NULL)
 4019af0:	2000091e 	bne	r4,zero,4019b18 <parse_args+0x50>
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
 4019af4:	000b883a 	mov	r5,zero
      printf("pargv[%d] = %s\n", i, pargv[i]);
   }
#endif

   return (pargv);
}
 4019af8:	2805883a 	mov	r2,r5
 4019afc:	dfc00417 	ldw	ra,16(sp)
 4019b00:	dcc00317 	ldw	r19,12(sp)
 4019b04:	dc800217 	ldw	r18,8(sp)
 4019b08:	dc400117 	ldw	r17,4(sp)
 4019b0c:	dc000017 	ldw	r16,0(sp)
 4019b10:	dec00504 	addi	sp,sp,20
 4019b14:	f800283a 	ret
   *pargc_index = 0;
   if (buf == NULL)
   {
      return (NULL);
   }
   len = strlen(buf);
 4019b18:	400472c0 	call	400472c <strlen>
 4019b1c:	1027883a 	mov	r19,r2
   if (len <= 0)
 4019b20:	00bff40e 	bge	zero,r2,4019af4 <parse_args+0x2c>
   {
      return (NULL);
   }
   pargv = (char **) npalloc(argc * sizeof(char *));
 4019b24:	9489883a 	add	r4,r18,r18
 4019b28:	2109883a 	add	r4,r4,r4
 4019b2c:	401cdc80 	call	401cdc8 <npalloc>
 4019b30:	100b883a 	mov	r5,r2
   if (pargv == NULL)
 4019b34:	103fef26 	beq	r2,zero,4019af4 <parse_args+0x2c>
   {
      return (NULL);
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
 4019b38:	88c00007 	ldb	r3,0(r17)
 4019b3c:	00800804 	movi	r2,32
 4019b40:	18802b1e 	bne	r3,r2,4019bf0 <parse_args+0x128>
 4019b44:	1805883a 	mov	r2,r3
 4019b48:	8809883a 	mov	r4,r17
   {
      bp++;
 4019b4c:	21000044 	addi	r4,r4,1
   if (pargv == NULL)
   {
      return (NULL);
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
 4019b50:	20c00007 	ldb	r3,0(r4)
 4019b54:	18bffd26 	beq	r3,r2,4019b4c <parse_args+0x84>
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
 4019b58:	18001826 	beq	r3,zero,4019bbc <parse_args+0xf4>
 4019b5c:	80c00017 	ldw	r3,0(r16)
 4019b60:	1c80160e 	bge	r3,r18,4019bbc <parse_args+0xf4>
   {
      pargv[(*pargc_index)] = bp;
 4019b64:	18c5883a 	add	r2,r3,r3
 4019b68:	1085883a 	add	r2,r2,r2
 4019b6c:	1145883a 	add	r2,r2,r5
      (*pargc_index)++;
 4019b70:	18c00044 	addi	r3,r3,1
 4019b74:	80c00015 	stw	r3,0(r16)
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   {
      pargv[(*pargc_index)] = bp;
 4019b78:	11000015 	stw	r4,0(r2)
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
 4019b7c:	20800007 	ldb	r2,0(r4)
 4019b80:	00c00804 	movi	r3,32
 4019b84:	10c00626 	beq	r2,r3,4019ba0 <parse_args+0xd8>
 4019b88:	1000021e 	bne	r2,zero,4019b94 <parse_args+0xcc>
 4019b8c:	00001606 	br	4019be8 <parse_args+0x120>
 4019b90:	10000826 	beq	r2,zero,4019bb4 <parse_args+0xec>
      {
         bp++; 
 4019b94:	21000044 	addi	r4,r4,1
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   {
      pargv[(*pargc_index)] = bp;
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
 4019b98:	20800007 	ldb	r2,0(r4)
 4019b9c:	10fffc1e 	bne	r2,r3,4019b90 <parse_args+0xc8>
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
 4019ba0:	21000044 	addi	r4,r4,1
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
 4019ba4:	20c00007 	ldb	r3,0(r4)
 4019ba8:	00800804 	movi	r2,32
 4019bac:	18bfea1e 	bne	r3,r2,4019b58 <parse_args+0x90>
 4019bb0:	003ffb06 	br	4019ba0 <parse_args+0xd8>
 4019bb4:	1007883a 	mov	r3,r2
 4019bb8:	003fe706 	br	4019b58 <parse_args+0x90>
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
 4019bbc:	8809883a 	mov	r4,r17
 4019bc0:	0007883a 	mov	r3,zero
 4019bc4:	01800804 	movi	r6,32
 4019bc8:	00000206 	br	4019bd4 <parse_args+0x10c>
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
 4019bcc:	21000044 	addi	r4,r4,1
 4019bd0:	98ffc926 	beq	r19,r3,4019af8 <parse_args+0x30>
   {
      if (buf[i] == ' ')
 4019bd4:	20800007 	ldb	r2,0(r4)
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
 4019bd8:	18c00044 	addi	r3,r3,1
   {
      if (buf[i] == ' ')
 4019bdc:	11bffb1e 	bne	r2,r6,4019bcc <parse_args+0x104>
         buf[i] = '\0';
 4019be0:	20000005 	stb	zero,0(r4)
 4019be4:	003ff906 	br	4019bcc <parse_args+0x104>
 4019be8:	20c00007 	ldb	r3,0(r4)
 4019bec:	003fda06 	br	4019b58 <parse_args+0x90>
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
 4019bf0:	8809883a 	mov	r4,r17
 4019bf4:	003fd806 	br	4019b58 <parse_args+0x90>

04019bf8 <std_out>:
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
 4019bf8:	defffe04 	addi	sp,sp,-8
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
 4019bfc:	010100f4 	movhi	r4,1027
 4019c00:	2104de04 	addi	r4,r4,4984
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
 4019c04:	dc400015 	stw	r17,0(sp)
 4019c08:	dfc00115 	stw	ra,4(sp)
 4019c0c:	3023883a 	mov	r17,r6
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
 4019c10:	4002ed40 	call	4002ed4 <printf>
   USE_ARG(s);
   return len;
}
 4019c14:	8805883a 	mov	r2,r17
 4019c18:	dfc00117 	ldw	ra,4(sp)
 4019c1c:	dc400017 	ldw	r17,0(sp)
 4019c20:	dec00204 	addi	sp,sp,8
 4019c24:	f800283a 	ret

04019c28 <do_trap>:
 * RETURNS: 0
 */

int
do_trap(void)
{
 4019c28:	deffff04 	addi	sp,sp,-4
 4019c2c:	dfc00015 	stw	ra,0(sp)
   dtrap();
 4019c30:	401c81c0 	call	401c81c <dtrap>
   return 0;
}
 4019c34:	0005883a 	mov	r2,zero
 4019c38:	dfc00017 	ldw	ra,0(sp)
 4019c3c:	dec00104 	addi	sp,sp,4
 4019c40:	f800283a 	ret

04019c44 <panic>:
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
 4019c44:	deffff04 	addi	sp,sp,-4
 4019c48:	200b883a 	mov	r5,r4
   dprintf("panic: %s\n", msg);
 4019c4c:	010100f4 	movhi	r4,1027
 4019c50:	2112e304 	addi	r4,r4,19340
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
 4019c54:	dfc00015 	stw	ra,0(sp)
   dprintf("panic: %s\n", msg);
 4019c58:	4002ed40 	call	4002ed4 <printf>
   dtrap();                   /* try to hook debugger */
 4019c5c:	401c81c0 	call	401c81c <dtrap>
   netexit(1);                /* try to clean up */
 4019c60:	01000044 	movi	r4,1
}
 4019c64:	dfc00017 	ldw	ra,0(sp)
 4019c68:	dec00104 	addi	sp,sp,4
void
panic(char * msg)
{
   dprintf("panic: %s\n", msg);
   dtrap();                   /* try to hook debugger */
   netexit(1);                /* try to clean up */
 4019c6c:	402b3101 	jmpi	402b310 <netexit>

04019c70 <ns_printf>:
 */
#ifndef ns_printf

int 
ns_printf(void * vio, char * format, ...)
{
 4019c70:	defff804 	addi	sp,sp,-32
 4019c74:	dc000115 	stw	r16,4(sp)
 4019c78:	2021883a 	mov	r16,r4
 4019c7c:	dfc00515 	stw	ra,20(sp)
 4019c80:	dcc00415 	stw	r19,16(sp)
 4019c84:	dc800315 	stw	r18,12(sp)
 4019c88:	dc400215 	stw	r17,8(sp)
 4019c8c:	d9800615 	stw	r6,24(sp)
 4019c90:	d9c00715 	stw	r7,28(sp)
 4019c94:	2823883a 	mov	r17,r5
   int * next_arg=(int *)  &format;
   next_arg +=  sizeof(char *)/sizeof(int) ;
#endif   /* NATIVE_PRINTF || PRINTF_STRING */

   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
 4019c98:	20000e1e 	bne	r4,zero,4019cd4 <ns_printf+0x64>
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
 4019c9c:	d8800604 	addi	r2,sp,24
      ret_value = vprintf(format,argList);
 4019ca0:	8809883a 	mov	r4,r17
 4019ca4:	100b883a 	mov	r5,r2
   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
 4019ca8:	d8800015 	stw	r2,0(sp)
      ret_value = vprintf(format,argList);
 4019cac:	4030f200 	call	4030f20 <vprintf>
 4019cb0:	1023883a 	mov	r17,r2
    * that some packets get a chance to get received 
    */
   tk_yield();

   return ret_value ;
}
 4019cb4:	8805883a 	mov	r2,r17
 4019cb8:	dfc00517 	ldw	ra,20(sp)
 4019cbc:	dcc00417 	ldw	r19,16(sp)
 4019cc0:	dc800317 	ldw	r18,12(sp)
 4019cc4:	dc400217 	ldw	r17,8(sp)
 4019cc8:	dc000117 	ldw	r16,4(sp)
 4019ccc:	dec00804 	addi	sp,sp,32
 4019cd0:	f800283a 	ret
      return strlen(format);
#endif   /* NATIVE_PRINTF */
   }

   /* Check if the output function is set */
   if (pio->out == NULL)
 4019cd4:	20800117 	ldw	r2,4(r4)
 4019cd8:	1000091e 	bne	r2,zero,4019d00 <ns_printf+0x90>
 4019cdc:	047fffc4 	movi	r17,-1
    * that some packets get a chance to get received 
    */
   tk_yield();

   return ret_value ;
}
 4019ce0:	8805883a 	mov	r2,r17
 4019ce4:	dfc00517 	ldw	ra,20(sp)
 4019ce8:	dcc00417 	ldw	r19,16(sp)
 4019cec:	dc800317 	ldw	r18,12(sp)
 4019cf0:	dc400217 	ldw	r17,8(sp)
 4019cf4:	dc000117 	ldw	r16,4(sp)
 4019cf8:	dec00804 	addi	sp,sp,32
 4019cfc:	f800283a 	ret

   /* Allocate memory for the output string 
    * If the format string is greater than MAXIOSIZE, then
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
 4019d00:	2809883a 	mov	r4,r5
 4019d04:	400472c0 	call	400472c <strlen>
 4019d08:	1007883a 	mov	r3,r2
   if (ret_value >= MAXIOSIZE)
 4019d0c:	008026c4 	movi	r2,155
 4019d10:	10c01b16 	blt	r2,r3,4019d80 <ns_printf+0x110>
 4019d14:	04c02704 	movi	r19,156
 4019d18:	9809883a 	mov	r4,r19
   {
      buf_size += ret_value ;
   }

   outbuf=(char *)npalloc(buf_size); 
 4019d1c:	401cdc80 	call	401cdc8 <npalloc>
 4019d20:	1025883a 	mov	r18,r2

   if (outbuf == NULL)
 4019d24:	10001f26 	beq	r2,zero,4019da4 <ns_printf+0x134>

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
 4019d28:	d8800604 	addi	r2,sp,24
   ret_value = vsprintf(outbuf,format,argList);
 4019d2c:	9009883a 	mov	r4,r18
 4019d30:	100d883a 	mov	r6,r2
 4019d34:	880b883a 	mov	r5,r17

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
 4019d38:	d8800015 	stw	r2,0(sp)
   ret_value = vsprintf(outbuf,format,argList);
 4019d3c:	4030f900 	call	4030f90 <vsprintf>
#endif   /* PRINTF_STDARG */
#endif   /* NATIVE_PRINTF */

#ifdef NATIVE_PRINTF
   /* Check if we have overwritten the output buffer */
   if ((int)strlen(outbuf) > buf_size)
 4019d40:	9009883a 	mov	r4,r18
 4019d44:	400472c0 	call	400472c <strlen>
 4019d48:	98801016 	blt	r19,r2,4019d8c <ns_printf+0x11c>
      panic("ns_printf:Buffer overflow");
      outbuf[buf_size-1]=0;   /* Null terminate the string */
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
 4019d4c:	84400217 	ldw	r17,8(r16)
 4019d50:	9009883a 	mov	r4,r18
 4019d54:	400472c0 	call	400472c <strlen>
 4019d58:	80c00117 	ldw	r3,4(r16)
 4019d5c:	100d883a 	mov	r6,r2
 4019d60:	8809883a 	mov	r4,r17
 4019d64:	900b883a 	mov	r5,r18
 4019d68:	183ee83a 	callr	r3

   /* Free memory for the output string */
   npfree(outbuf); 
 4019d6c:	9009883a 	mov	r4,r18
      panic("ns_printf:Buffer overflow");
      outbuf[buf_size-1]=0;   /* Null terminate the string */
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
 4019d70:	1023883a 	mov	r17,r2

   /* Free memory for the output string */
   npfree(outbuf); 
 4019d74:	401cce40 	call	401cce4 <npfree>

   /* since ns_printf() can get called repeatedly down in the bowels 
    * of a single command interpretting function, spin tk_yield() so 
    * that some packets get a chance to get received 
    */
   tk_yield();
 4019d78:	401a3d40 	call	401a3d4 <tk_yield>
 4019d7c:	003fcd06 	br	4019cb4 <ns_printf+0x44>
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
   if (ret_value >= MAXIOSIZE)
   {
      buf_size += ret_value ;
 4019d80:	1cc02704 	addi	r19,r3,156
 4019d84:	9809883a 	mov	r4,r19
 4019d88:	003fe406 	br	4019d1c <ns_printf+0xac>
       */
      /* Yes , we have overwritten. Truncate the output string.
       * Some memory in the heap has been corrupted, but it is too
       * late to rectify.
       */
      panic("ns_printf:Buffer overflow");
 4019d8c:	010100f4 	movhi	r4,1027
 4019d90:	2112e604 	addi	r4,r4,19352
 4019d94:	4019c440 	call	4019c44 <panic>
      outbuf[buf_size-1]=0;   /* Null terminate the string */
 4019d98:	94c5883a 	add	r2,r18,r19
 4019d9c:	103fffc5 	stb	zero,-1(r2)
 4019da0:	003fea06 	br	4019d4c <ns_printf+0xdc>
      buf_size += ret_value ;
   }

   outbuf=(char *)npalloc(buf_size); 

   if (outbuf == NULL)
 4019da4:	047fff84 	movi	r17,-2
 4019da8:	003fc206 	br	4019cb4 <ns_printf+0x44>

04019dac <con_page>:
con_page(void * vio, int lines)
{
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */

   if (lines % 20 == 0)   /* Time to get user input */
 4019dac:	00800504 	movi	r2,20
 4019db0:	2885283a 	div	r2,r5,r2
 4019db4:	10800524 	muli	r2,r2,20
 * RETURNS: 1 if we got a break, 0 to keep printing
 */

int
con_page(void * vio, int lines)
{
 4019db8:	defffd04 	addi	sp,sp,-12
 4019dbc:	dc400115 	stw	r17,4(sp)
 4019dc0:	dfc00215 	stw	ra,8(sp)
 4019dc4:	dc000015 	stw	r16,0(sp)
 4019dc8:	2023883a 	mov	r17,r4
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */

   if (lines % 20 == 0)   /* Time to get user input */
 4019dcc:	2880191e 	bne	r5,r2,4019e34 <con_page+0x88>
   {
      if (pio && pio->getch)   /*if i/p func is supplied*/
 4019dd0:	20001826 	beq	r4,zero,4019e34 <con_page+0x88>
 4019dd4:	20800317 	ldw	r2,12(r4)
 4019dd8:	10001626 	beq	r2,zero,4019e34 <con_page+0x88>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");
 4019ddc:	014100f4 	movhi	r5,1027
 4019de0:	2952ed04 	addi	r5,r5,19380
 4019de4:	4019c700 	call	4019c70 <ns_printf>
 4019de8:	00000106 	br	4019df0 <con_page+0x44>

         do 
         {
            ch = (pio->getch)(pio->id);
            if (ch == 0)
               tk_yield();    /* Give timeslice to other processes */
 4019dec:	401a3d40 	call	401a3d4 <tk_yield>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");

         do 
         {
            ch = (pio->getch)(pio->id);
 4019df0:	89000217 	ldw	r4,8(r17)
 4019df4:	88c00317 	ldw	r3,12(r17)
 4019df8:	183ee83a 	callr	r3
 4019dfc:	1021883a 	mov	r16,r2
            if (ch == 0)
 4019e00:	103ffa26 	beq	r2,zero,4019dec <con_page+0x40>
               tk_yield();    /* Give timeslice to other processes */
         } while (ch == 0) ;

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
 4019e04:	00bfffc4 	movi	r2,-1
 4019e08:	80801026 	beq	r16,r2,4019e4c <con_page+0xa0>
            return 1 ;

         ns_printf(pio,"\n");
 4019e0c:	8809883a 	mov	r4,r17
 4019e10:	014100f4 	movhi	r5,1027
 4019e14:	29458404 	addi	r5,r5,5648
 4019e18:	4019c700 	call	4019c70 <ns_printf>
 4019e1c:	808006e0 	cmpeqi	r2,r16,27
         if (ch == 27)   /* ESC key pressed */
            return 1 ;
      }
   }
   return  0;
}
 4019e20:	dfc00217 	ldw	ra,8(sp)
 4019e24:	dc400117 	ldw	r17,4(sp)
 4019e28:	dc000017 	ldw	r16,0(sp)
 4019e2c:	dec00304 	addi	sp,sp,12
 4019e30:	f800283a 	ret

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
            return 1 ;

         ns_printf(pio,"\n");
 4019e34:	0005883a 	mov	r2,zero
         if (ch == 27)   /* ESC key pressed */
            return 1 ;
      }
   }
   return  0;
}
 4019e38:	dfc00217 	ldw	ra,8(sp)
 4019e3c:	dc400117 	ldw	r17,4(sp)
 4019e40:	dc000017 	ldw	r16,0(sp)
 4019e44:	dec00304 	addi	sp,sp,12
 4019e48:	f800283a 	ret
            if (ch == 0)
               tk_yield();    /* Give timeslice to other processes */
         } while (ch == 0) ;

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
 4019e4c:	00800044 	movi	r2,1
         if (ch == 27)   /* ESC key pressed */
            return 1 ;
      }
   }
   return  0;
}
 4019e50:	dfc00217 	ldw	ra,8(sp)
 4019e54:	dc400117 	ldw	r17,4(sp)
 4019e58:	dc000017 	ldw	r16,0(sp)
 4019e5c:	dec00304 	addi	sp,sp,12
 4019e60:	f800283a 	ret

04019e64 <hexdump>:

#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
 4019e64:	defff904 	addi	sp,sp,-28
 4019e68:	dcc00315 	stw	r19,12(sp)
 4019e6c:	dc800215 	stw	r18,8(sp)
 4019e70:	dfc00615 	stw	ra,24(sp)
 4019e74:	dd400515 	stw	r21,20(sp)
 4019e78:	dd000415 	stw	r20,16(sp)
 4019e7c:	dc400115 	stw	r17,4(sp)
 4019e80:	dc000015 	stw	r16,0(sp)
 4019e84:	3027883a 	mov	r19,r6
 4019e88:	2025883a 	mov	r18,r4
   u_char * data  =  (u_char *)buffer;
   unsigned int count;
   char  c;

   while (len)
 4019e8c:	30002d26 	beq	r6,zero,4019f44 <hexdump+0xe0>
#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
   u_char * data  =  (u_char *)buffer;
 4019e90:	2823883a 	mov	r17,r5

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
         ns_printf(pio, "%02x ", *(data + count));
 4019e94:	89800003 	ldbu	r6,0(r17)
 4019e98:	9009883a 	mov	r4,r18
 4019e9c:	014100f4 	movhi	r5,1027
 4019ea0:	2952f904 	addi	r5,r5,19428
 4019ea4:	4019c700 	call	4019c70 <ns_printf>
 4019ea8:	04000044 	movi	r16,1
 4019eac:	8445883a 	add	r2,r16,r17
 4019eb0:	9009883a 	mov	r4,r18
 4019eb4:	014100f4 	movhi	r5,1027
 4019eb8:	2952f904 	addi	r5,r5,19428
   char  c;

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4019ebc:	84c0052e 	bgeu	r16,r19,4019ed4 <hexdump+0x70>
         ns_printf(pio, "%02x ", *(data + count));
 4019ec0:	11800003 	ldbu	r6,0(r2)
   char  c;

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4019ec4:	84000044 	addi	r16,r16,1
         ns_printf(pio, "%02x ", *(data + count));
 4019ec8:	4019c700 	call	4019c70 <ns_printf>
   char  c;

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4019ecc:	00c00404 	movi	r3,16
 4019ed0:	80fff61e 	bne	r16,r3,4019eac <hexdump+0x48>
 4019ed4:	0021883a 	mov	r16,zero
 4019ed8:	05401784 	movi	r21,94
 4019edc:	05000404 	movi	r20,16
 4019ee0:	00000106 	br	4019ee8 <hexdump+0x84>
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4019ee4:	84c00f2e 	bgeu	r16,r19,4019f24 <hexdump+0xc0>
      {
         c = *(data + count);
 4019ee8:	8445883a 	add	r2,r16,r17
 4019eec:	10c00003 	ldbu	r3,0(r2)
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
 4019ef0:	01800b84 	movi	r6,46
 4019ef4:	18bff804 	addi	r2,r3,-32
 4019ef8:	10803fcc 	andi	r2,r2,255
 4019efc:	a8800336 	bltu	r21,r2,4019f0c <hexdump+0xa8>
 4019f00:	19803fcc 	andi	r6,r3,255
 4019f04:	3180201c 	xori	r6,r6,128
 4019f08:	31bfe004 	addi	r6,r6,-128
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4019f0c:	84000044 	addi	r16,r16,1
      {
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
 4019f10:	9009883a 	mov	r4,r18
 4019f14:	014100f4 	movhi	r5,1027
 4019f18:	2952fb04 	addi	r5,r5,19436
 4019f1c:	4019c700 	call	4019c70 <ns_printf>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4019f20:	853ff01e 	bne	r16,r20,4019ee4 <hexdump+0x80>
      {
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
      }
      ns_printf(pio,"\n");
      len -= count;
 4019f24:	9c27c83a 	sub	r19,r19,r16
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
      {
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
      }
      ns_printf(pio,"\n");
 4019f28:	9009883a 	mov	r4,r18
 4019f2c:	014100f4 	movhi	r5,1027
 4019f30:	29458404 	addi	r5,r5,5648
 4019f34:	4019c700 	call	4019c70 <ns_printf>
{
   u_char * data  =  (u_char *)buffer;
   unsigned int count;
   char  c;

   while (len)
 4019f38:	98000226 	beq	r19,zero,4019f44 <hexdump+0xe0>
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
      }
      ns_printf(pio,"\n");
      len -= count;
      data += count;
 4019f3c:	8c23883a 	add	r17,r17,r16
 4019f40:	003fd406 	br	4019e94 <hexdump+0x30>
   }
}
 4019f44:	dfc00617 	ldw	ra,24(sp)
 4019f48:	dd400517 	ldw	r21,20(sp)
 4019f4c:	dd000417 	ldw	r20,16(sp)
 4019f50:	dcc00317 	ldw	r19,12(sp)
 4019f54:	dc800217 	ldw	r18,8(sp)
 4019f58:	dc400117 	ldw	r17,4(sp)
 4019f5c:	dc000017 	ldw	r16,0(sp)
 4019f60:	dec00704 	addi	sp,sp,28
 4019f64:	f800283a 	ret

04019f68 <print_uptime>:
char *   
print_uptime(unsigned long timetick)
{
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
 4019f68:	00801904 	movi	r2,100
 4019f6c:	2097203a 	divu	r11,r4,r2
   seconds = (unsigned)(timetick%60);
 4019f70:	00c00f04 	movi	r3,60
 4019f74:	58cf203a 	divu	r7,r11,r3
   timetick = timetick/60;    /* turn timetick into minutes */
   minutes = (unsigned)(timetick%60);
 4019f78:	38c7203a 	divu	r3,r7,r3
   timetick = timetick/60;    /* turn timetick into hours */
   hours = (unsigned)(timetick%24);
 4019f7c:	00800604 	movi	r2,24
 4019f80:	1885203a 	divu	r2,r3,r2
 4019f84:	12800624 	muli	r10,r2,24
print_uptime(unsigned long timetick)
{
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
   seconds = (unsigned)(timetick%60);
 4019f88:	3a000f24 	muli	r8,r7,60
   timetick = timetick/60;    /* turn timetick into minutes */
   minutes = (unsigned)(timetick%60);
 4019f8c:	1a400f24 	muli	r9,r3,60

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
 4019f90:	defffd04 	addi	sp,sp,-12
   timetick = timetick/100;   /* turn timetick into seconds */
   seconds = (unsigned)(timetick%60);
   timetick = timetick/60;    /* turn timetick into minutes */
   minutes = (unsigned)(timetick%60);
   timetick = timetick/60;    /* turn timetick into hours */
   hours = (unsigned)(timetick%24);
 4019f94:	1a87c83a 	sub	r3,r3,r10
print_uptime(unsigned long timetick)
{
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
   seconds = (unsigned)(timetick%60);
 4019f98:	5a17c83a 	sub	r11,r11,r8

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
 4019f9c:	dfc00215 	stw	ra,8(sp)
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
   seconds = (unsigned)(timetick%60);
   timetick = timetick/60;    /* turn timetick into minutes */
   minutes = (unsigned)(timetick%60);
 4019fa0:	3a51c83a 	sub	r8,r7,r9
   timetick = timetick/60;    /* turn timetick into hours */
   hours = (unsigned)(timetick%24);
   timetick = timetick/24;    /* turn timetick into days */

   if (timetick)  /* Is there a whole number of days? */
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
 4019fa4:	100d883a 	mov	r6,r2
 4019fa8:	01010134 	movhi	r4,1028
 4019fac:	2129c704 	addi	r4,r4,-22756
 4019fb0:	014100f4 	movhi	r5,1027
 4019fb4:	2952fc04 	addi	r5,r5,19440
 4019fb8:	180f883a 	mov	r7,r3
   minutes = (unsigned)(timetick%60);
   timetick = timetick/60;    /* turn timetick into hours */
   hours = (unsigned)(timetick%24);
   timetick = timetick/24;    /* turn timetick into days */

   if (timetick)  /* Is there a whole number of days? */
 4019fbc:	10001a1e 	bne	r2,zero,401a028 <print_uptime+0xc0>
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
    timetick, hours, minutes, seconds);
   else if (hours)
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
 4019fc0:	180d883a 	mov	r6,r3
 4019fc4:	400f883a 	mov	r7,r8
 4019fc8:	01010134 	movhi	r4,1028
 4019fcc:	2129c704 	addi	r4,r4,-22756
 4019fd0:	014100f4 	movhi	r5,1027
 4019fd4:	29530204 	addi	r5,r5,19464
   timetick = timetick/24;    /* turn timetick into days */

   if (timetick)  /* Is there a whole number of days? */
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
    timetick, hours, minutes, seconds);
   else if (hours)
 4019fd8:	18000726 	beq	r3,zero,4019ff8 <print_uptime+0x90>
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
 4019fdc:	dac00015 	stw	r11,0(sp)
 4019fe0:	400b17c0 	call	400b17c <sprintf>
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
   return tistring;
}
 4019fe4:	00810134 	movhi	r2,1028
 4019fe8:	10a9c704 	addi	r2,r2,-22756
 4019fec:	dfc00217 	ldw	ra,8(sp)
 4019ff0:	dec00304 	addi	sp,sp,12
 4019ff4:	f800283a 	ret
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
    timetick, hours, minutes, seconds);
   else if (hours)
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
 4019ff8:	400d883a 	mov	r6,r8
 4019ffc:	580f883a 	mov	r7,r11
 401a000:	01010134 	movhi	r4,1028
 401a004:	2129c704 	addi	r4,r4,-22756
 401a008:	014100f4 	movhi	r5,1027
 401a00c:	29530704 	addi	r5,r5,19484
 401a010:	400b17c0 	call	400b17c <sprintf>
   return tistring;
}
 401a014:	00810134 	movhi	r2,1028
 401a018:	10a9c704 	addi	r2,r2,-22756
 401a01c:	dfc00217 	ldw	ra,8(sp)
 401a020:	dec00304 	addi	sp,sp,12
 401a024:	f800283a 	ret
   timetick = timetick/60;    /* turn timetick into hours */
   hours = (unsigned)(timetick%24);
   timetick = timetick/24;    /* turn timetick into days */

   if (timetick)  /* Is there a whole number of days? */
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
 401a028:	da000015 	stw	r8,0(sp)
 401a02c:	dac00115 	stw	r11,4(sp)
 401a030:	400b17c0 	call	400b17c <sprintf>
   else if (hours)
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
   return tistring;
}
 401a034:	00810134 	movhi	r2,1028
 401a038:	10a9c704 	addi	r2,r2,-22756
 401a03c:	dfc00217 	ldw	ra,8(sp)
 401a040:	dec00304 	addi	sp,sp,12
 401a044:	f800283a 	ret

0401a048 <print_ipad>:
print_ipad(unsigned long ipaddr)
{
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
 401a048:	200ed23a 	srli	r7,r4,8
 401a04c:	2004d43a 	srli	r2,r4,16

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
 401a050:	defffc04 	addi	sp,sp,-16
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
 401a054:	2006d63a 	srli	r3,r4,24

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
 401a058:	dc400215 	stw	r17,8(sp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
 401a05c:	04410134 	movhi	r17,1028
 401a060:	8c4bdc84 	addi	r17,r17,12146
 401a064:	21803fcc 	andi	r6,r4,255
 401a068:	10803fcc 	andi	r2,r2,255
 401a06c:	39c03fcc 	andi	r7,r7,255
 401a070:	8809883a 	mov	r4,r17
 401a074:	014100f4 	movhi	r5,1027
 401a078:	29530c04 	addi	r5,r5,19504

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
 401a07c:	dfc00315 	stw	ra,12(sp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
   sprintf(ipreturn, "%u.%u.%u.%u", 
 401a080:	d8800015 	stw	r2,0(sp)
 401a084:	d8c00115 	stw	r3,4(sp)
 401a088:	400b17c0 	call	400b17c <sprintf>
    ip.ip.ipchar[1],
    ip.ip.ipchar[2],
    ip.ip.ipchar[3]);

   return ipreturn;
}
 401a08c:	8805883a 	mov	r2,r17
 401a090:	dfc00317 	ldw	ra,12(sp)
 401a094:	dc400217 	ldw	r17,8(sp)
 401a098:	dec00404 	addi	sp,sp,16
 401a09c:	f800283a 	ret

0401a0a0 <tk_nettick>:

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 401a0a0:	d0a82017 	ldw	r2,-24448(gp)
extern   int dhc_second(void);
#endif

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
 401a0a4:	deffff04 	addi	sp,sp,-4
 401a0a8:	dfc00015 	stw	ra,0(sp)
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 401a0ac:	1000051e 	bne	r2,zero,401a0c4 <tk_nettick+0x24>
       * request and then we receive a NAK. At this point the DHCP
       * client is reset to INIT state and dhc_second() needs to be
       * run to restart it.
       */
#ifdef DHCP_CLIENT
      dhc_second();
 401a0b0:	401b5080 	call	401b508 <dhc_second>
#endif
      TK_SLEEP(1);
 401a0b4:	01000084 	movi	r4,2
 401a0b8:	4012fd00 	call	4012fd0 <OSTimeDly>

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 401a0bc:	d0a82017 	ldw	r2,-24448(gp)
 401a0c0:	103ffb26 	beq	r2,zero,401a0b0 <tk_nettick+0x10>
      TK_SLEEP(1);
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
 401a0c4:	01000084 	movi	r4,2
 401a0c8:	4012fd00 	call	4012fd0 <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
 401a0cc:	d0a81f17 	ldw	r2,-24452(gp)
 401a0d0:	10800044 	addi	r2,r2,1
 401a0d4:	d0a81f15 	stw	r2,-24452(gp)
      inet_timer();  /* let various timeouts occur */
 401a0d8:	4026fd80 	call	4026fd8 <inet_timer>
      TK_SLEEP(1);
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
 401a0dc:	01000084 	movi	r4,2
 401a0e0:	4012fd00 	call	4012fd0 <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
 401a0e4:	d0a81f17 	ldw	r2,-24452(gp)
 401a0e8:	10800044 	addi	r2,r2,1
 401a0ec:	d0a81f15 	stw	r2,-24452(gp)
      inet_timer();  /* let various timeouts occur */
 401a0f0:	4026fd80 	call	4026fd8 <inet_timer>
 401a0f4:	003ff306 	br	401a0c4 <tk_nettick+0x24>

0401a0f8 <tk_netmain>:
 * RETURNS: n/a
 */

#ifndef NO_INET_STACK
TK_ENTRY(tk_netmain)
{
 401a0f8:	defffc04 	addi	sp,sp,-16
 401a0fc:	dc400215 	stw	r17,8(sp)
 401a100:	dc000115 	stw	r16,4(sp)
 401a104:	dfc00315 	stw	ra,12(sp)
   netmain_init(); /* initialize all modules */
 401a108:	4026e380 	call	4026e38 <netmain_init>

   iniche_net_ready = TRUE;    /* let the other threads spin */
 401a10c:	00800044 	movi	r2,1
 401a110:	d0a82015 	stw	r2,-24448(gp)
 401a114:	04410134 	movhi	r17,1028
 401a118:	8c693604 	addi	r17,r17,-23336
 401a11c:	04010134 	movhi	r16,1028
 401a120:	840af604 	addi	r16,r16,11224

   for (;;)
   {
      TK_NETRX_BLOCK();
 401a124:	89000017 	ldw	r4,0(r17)
 401a128:	01401904 	movi	r5,100
 401a12c:	d80d883a 	mov	r6,sp
 401a130:	4011ba40 	call	4011ba4 <OSSemPend>
 401a134:	d8c00003 	ldbu	r3,0(sp)
 401a138:	18000326 	beq	r3,zero,401a148 <tk_netmain+0x50>
 401a13c:	00800284 	movi	r2,10
 401a140:	18800126 	beq	r3,r2,401a148 <tk_netmain+0x50>
 401a144:	401c81c0 	call	401c81c <dtrap>
      netmain_wakes++;  /* count wakeups */
 401a148:	d0a81e17 	ldw	r2,-24456(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
 401a14c:	80c00217 	ldw	r3,8(r16)
   iniche_net_ready = TRUE;    /* let the other threads spin */

   for (;;)
   {
      TK_NETRX_BLOCK();
      netmain_wakes++;  /* count wakeups */
 401a150:	10800044 	addi	r2,r2,1
 401a154:	d0a81e15 	stw	r2,-24456(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
 401a158:	183ff226 	beq	r3,zero,401a124 <tk_netmain+0x2c>
         pktdemux();
 401a15c:	4017f380 	call	4017f38 <pktdemux>

   iniche_net_ready = TRUE;    /* let the other threads spin */

   for (;;)
   {
      TK_NETRX_BLOCK();
 401a160:	89000017 	ldw	r4,0(r17)
 401a164:	01401904 	movi	r5,100
 401a168:	d80d883a 	mov	r6,sp
 401a16c:	4011ba40 	call	4011ba4 <OSSemPend>
 401a170:	d8c00003 	ldbu	r3,0(sp)
 401a174:	183ff426 	beq	r3,zero,401a148 <tk_netmain+0x50>
 401a178:	003ff006 	br	401a13c <tk_netmain+0x44>

0401a17c <netmain>:
 * RETURNS: 
 */

int
netmain(void)
{
 401a17c:	defffc04 	addi	sp,sp,-16
 401a180:	dfc00315 	stw	ra,12(sp)
 401a184:	dc800215 	stw	r18,8(sp)
 401a188:	dc400115 	stw	r17,4(sp)
 401a18c:	dc000015 	stw	r16,0(sp)
   int   i;
   int   e;

   iniche_net_ready = FALSE;
 401a190:	d0282015 	stw	zero,-24448(gp)

   e = prep_modules();
 401a194:	4026c540 	call	4026c54 <prep_modules>

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
 401a198:	d0e03317 	ldw	r3,-32564(gp)
 401a19c:	00c01a0e 	bge	zero,r3,401a208 <netmain+0x8c>
 401a1a0:	04810134 	movhi	r18,1028
 401a1a4:	94a00b04 	addi	r18,r18,-32724
 401a1a8:	0023883a 	mov	r17,zero
 401a1ac:	9021883a 	mov	r16,r18
 401a1b0:	00000306 	br	401a1c0 <netmain+0x44>
 401a1b4:	d0a03317 	ldw	r2,-32564(gp)
 401a1b8:	8c400044 	addi	r17,r17,1
 401a1bc:	8880120e 	bge	r17,r2,401a208 <netmain+0x8c>
   {
      e = TK_NEWTASK(&nettasks[i]);
 401a1c0:	8009883a 	mov	r4,r16
 401a1c4:	401cb0c0 	call	401cb0c <TK_NEWTASK>
   iniche_net_ready = FALSE;

   e = prep_modules();

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
 401a1c8:	84000604 	addi	r16,r16,24
   {
      e = TK_NEWTASK(&nettasks[i]);
      if (e != 0)
 401a1cc:	103ff926 	beq	r2,zero,401a1b4 <netmain+0x38>
      {
         dprintf("task create error\n");
 401a1d0:	010100f4 	movhi	r4,1027
 401a1d4:	21130f04 	addi	r4,r4,19516
 401a1d8:	4002fec0 	call	4002fec <puts>
         panic((char *)&nettasks[i].name);
 401a1dc:	89000624 	muli	r4,r17,24
 401a1e0:	21000104 	addi	r4,r4,4
 401a1e4:	2489883a 	add	r4,r4,r18
 401a1e8:	4019c440 	call	4019c44 <panic>
 401a1ec:	00bfffc4 	movi	r2,-1
   return -1;
#else
   return 0;
#endif
#endif   /* NO_INET_STACK */
}
 401a1f0:	dfc00317 	ldw	ra,12(sp)
 401a1f4:	dc800217 	ldw	r18,8(sp)
 401a1f8:	dc400117 	ldw	r17,4(sp)
 401a1fc:	dc000017 	ldw	r16,0(sp)
 401a200:	dec00404 	addi	sp,sp,16
 401a204:	f800283a 	ret
         panic((char *)&nettasks[i].name);
         return -1;  /* compiler warnings */
      }
   }
   
   e = create_apptasks();
 401a208:	40271140 	call	4027114 <create_apptasks>
   if (e != 0) 
 401a20c:	1000061e 	bne	r2,zero,401a228 <netmain+0xac>
   return -1;
#else
   return 0;
#endif
#endif   /* NO_INET_STACK */
}
 401a210:	dfc00317 	ldw	ra,12(sp)
 401a214:	dc800217 	ldw	r18,8(sp)
 401a218:	dc400117 	ldw	r17,4(sp)
 401a21c:	dc000017 	ldw	r16,0(sp)
 401a220:	dec00404 	addi	sp,sp,16
 401a224:	f800283a 	ret
   }
   
   e = create_apptasks();
   if (e != 0) 
   {
      dprintf("task create error\n");
 401a228:	010100f4 	movhi	r4,1027
 401a22c:	21130f04 	addi	r4,r4,19516
 401a230:	4002fec0 	call	4002fec <puts>
      panic("netmain");
 401a234:	010100f4 	movhi	r4,1027
 401a238:	21131404 	addi	r4,r4,19536
 401a23c:	4019c440 	call	4019c44 <panic>
 401a240:	00bfffc4 	movi	r2,-1
 401a244:	003ff206 	br	401a210 <netmain+0x94>

0401a248 <tk_stats>:
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
 401a248:	defff004 	addi	sp,sp,-64
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
 401a24c:	014100f4 	movhi	r5,1027
 401a250:	29531c04 	addi	r5,r5,19568
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
 401a254:	dfc00f15 	stw	ra,60(sp)
 401a258:	dd000e15 	stw	r20,56(sp)
 401a25c:	dcc00d15 	stw	r19,52(sp)
 401a260:	dc800c15 	stw	r18,48(sp)
 401a264:	dc400b15 	stw	r17,44(sp)
 401a268:	2025883a 	mov	r18,r4
 401a26c:	dc000a15 	stw	r16,40(sp)
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
 401a270:	4019c700 	call	4019c70 <ns_printf>

#ifdef NO_INICHE_EXTENSIONS
   ns_printf(pio, "Context switches; Delay:  %lu\n",
 401a274:	00c10134 	movhi	r3,1028
 401a278:	18e8fb04 	addi	r3,r3,-23572
 401a27c:	19800017 	ldw	r6,0(r3)
 401a280:	014100f4 	movhi	r5,1027
 401a284:	29532204 	addi	r5,r5,19592
 401a288:	9009883a 	mov	r4,r18
 401a28c:	4019c700 	call	4019c70 <ns_printf>
#else
   ns_printf(pio, "Context switches; Delay:  %lu, Interrupt: %lu\n",
      OSCtxSwCtr, OSCtxIntCtr);
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");
 401a290:	04410134 	movhi	r17,1028
 401a294:	8c4a4904 	addi	r17,r17,10532
 401a298:	9009883a 	mov	r4,r18
 401a29c:	014100f4 	movhi	r5,1027
 401a2a0:	29532a04 	addi	r5,r5,19624
 401a2a4:	4019c700 	call	4019c70 <ns_printf>
 401a2a8:	8cc01504 	addi	r19,r17,84
 401a2ac:	dd000144 	addi	r20,sp,5
 401a2b0:	00000206 	br	401a2bc <tk_stats+0x74>
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
 401a2b4:	8c400104 	addi	r17,r17,4
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 401a2b8:	8cc02626 	beq	r17,r19,401a354 <tk_stats+0x10c>
   {
      /* get pointer to TCB and see if entry is in use and not a mutex */
      tcb = OSTCBPrioTbl[t];
 401a2bc:	8c000017 	ldw	r16,0(r17)
      if ((tcb == NULL) || (tcb == (OS_TCB *)1))
 401a2c0:	00800044 	movi	r2,1
 401a2c4:	143ffb2e 	bgeu	r2,r16,401a2b4 <tk_stats+0x6c>
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);
 401a2c8:	81000c83 	ldbu	r4,50(r16)
 401a2cc:	a00b883a 	mov	r5,r20
 401a2d0:	d9800104 	addi	r6,sp,4
 401a2d4:	40129880 	call	4012988 <OSTaskNameGet>

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
 401a2d8:	81c00c83 	ldbu	r7,50(r16)
 401a2dc:	80800c03 	ldbu	r2,48(r16)
 401a2e0:	9009883a 	mov	r4,r18
 401a2e4:	014100f4 	movhi	r5,1027
 401a2e8:	29533a04 	addi	r5,r5,19688
 401a2ec:	a00d883a 	mov	r6,r20
 401a2f0:	d8800015 	stw	r2,0(sp)
 401a2f4:	4019c700 	call	4019c70 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
 401a2f8:	80c00217 	ldw	r3,8(r16)
 401a2fc:	18003026 	beq	r3,zero,401a3c0 <tk_stats+0x178>
 401a300:	81000317 	ldw	r4,12(r16)
 401a304:	20002e26 	beq	r4,zero,401a3c0 <tk_stats+0x178>
      {
         sp = tcb->OSTCBStkBottom + 1;
         while(*sp == 0)
 401a308:	18800117 	ldw	r2,4(r3)
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
      {
         sp = tcb->OSTCBStkBottom + 1;
 401a30c:	19c00104 	addi	r7,r3,4
         while(*sp == 0)
 401a310:	1000031e 	bne	r2,zero,401a320 <tk_stats+0xd8>
            sp++;
 401a314:	39c00104 	addi	r7,r7,4
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
      {
         sp = tcb->OSTCBStkBottom + 1;
         while(*sp == 0)
 401a318:	38800017 	ldw	r2,0(r7)
 401a31c:	103ffd26 	beq	r2,zero,401a314 <tk_stats+0xcc>
            sp++;
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
         ns_printf(pio, "%6d,      %6d\n",
 401a320:	38cfc83a 	sub	r7,r7,r3
 401a324:	380fd0ba 	srai	r7,r7,2
 401a328:	210d883a 	add	r6,r4,r4
 401a32c:	318d883a 	add	r6,r6,r6
 401a330:	21cfc83a 	sub	r7,r4,r7
 401a334:	39cf883a 	add	r7,r7,r7
 401a338:	39cf883a 	add	r7,r7,r7
 401a33c:	9009883a 	mov	r4,r18
 401a340:	014100f4 	movhi	r5,1027
 401a344:	29534204 	addi	r5,r5,19720
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
 401a348:	8c400104 	addi	r17,r17,4
            sp++;
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
         ns_printf(pio, "%6d,      %6d\n",
 401a34c:	4019c700 	call	4019c70 <ns_printf>
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 401a350:	8cffda1e 	bne	r17,r19,401a2bc <tk_stats+0x74>
      {
         ns_printf(pio, "No stack data\n");
      }
   }

   ns_printf(pio, "tcp_sleep_count = %lu, tcp_wakeup_count = %lu\n",
 401a354:	00c10134 	movhi	r3,1028
 401a358:	18e92f04 	addi	r3,r3,-23364
 401a35c:	00810134 	movhi	r2,1028
 401a360:	10a92e04 	addi	r2,r2,-23368
 401a364:	19c00017 	ldw	r7,0(r3)
 401a368:	11800017 	ldw	r6,0(r2)
 401a36c:	9009883a 	mov	r4,r18
 401a370:	014100f4 	movhi	r5,1027
 401a374:	29534a04 	addi	r5,r5,19752
 401a378:	4019c700 	call	4019c70 <ns_printf>
                  tcp_sleep_count, tcp_wakeup_count);
   ns_printf(pio, "global_TCPwakeup_setIndx = %d, tcp_sleep_timeout = %lu\n",
 401a37c:	00c10134 	movhi	r3,1028
 401a380:	18e93204 	addi	r3,r3,-23352
 401a384:	19800017 	ldw	r6,0(r3)
 401a388:	d1e82217 	ldw	r7,-24440(gp)
 401a38c:	9009883a 	mov	r4,r18
 401a390:	014100f4 	movhi	r5,1027
 401a394:	29535604 	addi	r5,r5,19800
 401a398:	4019c700 	call	4019c70 <ns_printf>
                  global_TCPwakeup_setIndx, tcp_sleep_timeout);

   return 0;
}
 401a39c:	0005883a 	mov	r2,zero
 401a3a0:	dfc00f17 	ldw	ra,60(sp)
 401a3a4:	dd000e17 	ldw	r20,56(sp)
 401a3a8:	dcc00d17 	ldw	r19,52(sp)
 401a3ac:	dc800c17 	ldw	r18,48(sp)
 401a3b0:	dc400b17 	ldw	r17,44(sp)
 401a3b4:	dc000a17 	ldw	r16,40(sp)
 401a3b8:	dec01004 	addi	sp,sp,64
 401a3bc:	f800283a 	ret
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
 401a3c0:	9009883a 	mov	r4,r18
 401a3c4:	014100f4 	movhi	r5,1027
 401a3c8:	29534604 	addi	r5,r5,19736
 401a3cc:	4019c700 	call	4019c70 <ns_printf>
 401a3d0:	003fb806 	br	401a2b4 <tk_stats+0x6c>

0401a3d4 <tk_yield>:
{
   /* To ensure cycles to the lower priority tasks we should really
    * delay by two ticks, but that really hurts performance on some
    * long-tick targets. One tick works better overall....
    */
   OSTimeDly(1);
 401a3d4:	01000044 	movi	r4,1
 401a3d8:	4012fd01 	jmpi	4012fd0 <OSTimeDly>

0401a3dc <TK_OSTimeDly>:



void TK_OSTimeDly(void)
{
   OSTimeDly(2);
 401a3dc:	01000084 	movi	r4,2
 401a3e0:	4012fd01 	jmpi	4012fd0 <OSTimeDly>

0401a3e4 <TK_OSTaskQuery>:
}



u_char TK_OSTaskQuery(void)
{
 401a3e4:	deffe404 	addi	sp,sp,-112
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
 401a3e8:	01003fc4 	movi	r4,255
 401a3ec:	d80b883a 	mov	r5,sp
}



u_char TK_OSTaskQuery(void)
{
 401a3f0:	dfc01b15 	stw	ra,108(sp)
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
 401a3f4:	4011fd00 	call	4011fd0 <OSTaskQuery>

   if (err == OS_NO_ERR)
 401a3f8:	10803fcc 	andi	r2,r2,255
   {
      task_prio = task_data.OSTCBPrio;
   }
   else
   {
      dprintf("ChronOS API call failure, unable to identify task!");
 401a3fc:	010100f4 	movhi	r4,1027
 401a400:	21136404 	addi	r4,r4,19856
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);

   if (err == OS_NO_ERR)
 401a404:	1000041e 	bne	r2,zero,401a418 <TK_OSTaskQuery+0x34>
      dprintf("ChronOS API call failure, unable to identify task!");
      panic("TK_OSTaskQuery");
      return 0;
   }
   
   return task_prio;
 401a408:	d8800c83 	ldbu	r2,50(sp)
}
 401a40c:	dfc01b17 	ldw	ra,108(sp)
 401a410:	dec01c04 	addi	sp,sp,112
 401a414:	f800283a 	ret
   {
      task_prio = task_data.OSTCBPrio;
   }
   else
   {
      dprintf("ChronOS API call failure, unable to identify task!");
 401a418:	4002ed40 	call	4002ed4 <printf>
      panic("TK_OSTaskQuery");
 401a41c:	010100f4 	movhi	r4,1027
 401a420:	21137104 	addi	r4,r4,19908
 401a424:	4019c440 	call	4019c44 <panic>
 401a428:	0005883a 	mov	r2,zero
      return 0;
   }
   
   return task_prio;
}
 401a42c:	dfc01b17 	ldw	ra,108(sp)
 401a430:	dec01c04 	addi	sp,sp,112
 401a434:	f800283a 	ret

0401a438 <tcp_wakeup>:
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
 401a438:	defffb04 	addi	sp,sp,-20
 401a43c:	dc000015 	stw	r16,0(sp)
   int i;

   OSSchedLock();
 401a440:	04010134 	movhi	r16,1028
 401a444:	840ca604 	addi	r16,r16,12952
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
 401a448:	dcc00315 	stw	r19,12(sp)
 401a44c:	dc800215 	stw	r18,8(sp)
 401a450:	dc400115 	stw	r17,4(sp)
 401a454:	dfc00415 	stw	ra,16(sp)
 401a458:	2025883a 	mov	r18,r4
 401a45c:	84403c04 	addi	r17,r16,240
   int i;

   OSSchedLock();
 401a460:	400f6b00 	call	400f6b0 <OSSchedLock>
 401a464:	04c10134 	movhi	r19,1028
 401a468:	9ce92f04 	addi	r19,r19,-23364

   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
 401a46c:	80800017 	ldw	r2,0(r16)
 401a470:	10000226 	beq	r2,zero,401a47c <tcp_wakeup+0x44>
 401a474:	80800117 	ldw	r2,4(r16)
 401a478:	14800926 	beq	r2,r18,401a4a0 <tcp_wakeup+0x68>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
         global_TCPwakeup_set[i].soc_event = NULL;

         tcp_wakeup_count++;
 401a47c:	84000304 	addi	r16,r16,12
{
   int i;

   OSSchedLock();

   for (i = 0; i < GLOBWAKE_SZ; i++)
 401a480:	847ffa1e 	bne	r16,r17,401a46c <tcp_wakeup+0x34>
         tcp_wakeup_count++;
      }
   }

   OSSchedUnlock();
}
 401a484:	dfc00417 	ldw	ra,16(sp)
 401a488:	dcc00317 	ldw	r19,12(sp)
 401a48c:	dc800217 	ldw	r18,8(sp)
 401a490:	dc400117 	ldw	r17,4(sp)
 401a494:	dc000017 	ldw	r16,0(sp)
 401a498:	dec00504 	addi	sp,sp,20

         tcp_wakeup_count++;
      }
   }

   OSSchedUnlock();
 401a49c:	400f6f81 	jmpi	400f6f8 <OSSchedUnlock>
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
          (global_TCPwakeup_set[i].soc_event == event))
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);
 401a4a0:	81000217 	ldw	r4,8(r16)
 401a4a4:	4011e780 	call	4011e78 <OSSemPost>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
         global_TCPwakeup_set[i].soc_event = NULL;

         tcp_wakeup_count++;
 401a4a8:	98c00017 	ldw	r3,0(r19)
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
 401a4ac:	80000015 	stw	zero,0(r16)
         global_TCPwakeup_set[i].soc_event = NULL;
 401a4b0:	80000115 	stw	zero,4(r16)

         tcp_wakeup_count++;
 401a4b4:	18c00044 	addi	r3,r3,1
 401a4b8:	98c00015 	stw	r3,0(r19)
 401a4bc:	003fef06 	br	401a47c <tcp_wakeup+0x44>

0401a4c0 <tcp_sleep>:
 *
 * RETURN: none
 */
void
tcp_sleep(void * event)
{
 401a4c0:	defffd04 	addi	sp,sp,-12
 401a4c4:	00c10134 	movhi	r3,1028
 401a4c8:	18cca704 	addi	r3,r3,12956
 401a4cc:	dc000115 	stw	r16,4(sp)
 401a4d0:	200d883a 	mov	r6,r4
 401a4d4:	000b883a 	mov	r5,zero
 401a4d8:	02010134 	movhi	r8,1028
 401a4dc:	42292e04 	addi	r8,r8,-23368
 401a4e0:	1c3fff04 	addi	r16,r3,-4
 401a4e4:	dfc00215 	stw	ra,8(sp)
 401a4e8:	00000406 	br	401a4fc <tcp_sleep+0x3c>
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
 401a4ec:	29400044 	addi	r5,r5,1
 401a4f0:	00800504 	movi	r2,20
 401a4f4:	84000304 	addi	r16,r16,12
 401a4f8:	28802026 	beq	r5,r2,401a57c <tcp_sleep+0xbc>
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
 401a4fc:	18800017 	ldw	r2,0(r3)
tcp_sleep(void * event)
{
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
 401a500:	18c00304 	addi	r3,r3,12
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
 401a504:	103ff91e 	bne	r2,zero,401a4ec <tcp_sleep+0x2c>
      {
         global_TCPwakeup_set[i].soc_event = event;
         global_TCPwakeup_set[i].ctick = cticks;
         if (i > global_TCPwakeup_setIndx)
 401a508:	01c10134 	movhi	r7,1028
 401a50c:	39e93204 	addi	r7,r7,-23352
   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
      {
         global_TCPwakeup_set[i].soc_event = event;
         global_TCPwakeup_set[i].ctick = cticks;
 401a510:	00810134 	movhi	r2,1028
 401a514:	10a93304 	addi	r2,r2,-23348
 401a518:	10c00017 	ldw	r3,0(r2)
         if (i > global_TCPwakeup_setIndx)
 401a51c:	39000017 	ldw	r4,0(r7)

   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
      {
         global_TCPwakeup_set[i].soc_event = event;
 401a520:	81800115 	stw	r6,4(r16)
         global_TCPwakeup_set[i].ctick = cticks;
 401a524:	80c00015 	stw	r3,0(r16)
         if (i > global_TCPwakeup_setIndx)
 401a528:	21401216 	blt	r4,r5,401a574 <tcp_sleep+0xb4>
            global_TCPwakeup_setIndx = i;

         tcp_sleep_count++;
 401a52c:	40800017 	ldw	r2,0(r8)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
 401a530:	0009883a 	mov	r4,zero
         global_TCPwakeup_set[i].soc_event = event;
         global_TCPwakeup_set[i].ctick = cticks;
         if (i > global_TCPwakeup_setIndx)
            global_TCPwakeup_setIndx = i;

         tcp_sleep_count++;
 401a534:	10800044 	addi	r2,r2,1
 401a538:	40800015 	stw	r2,0(r8)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
 401a53c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
 401a540:	81000217 	ldw	r4,8(r16)
 401a544:	01401904 	movi	r5,100
 401a548:	d80d883a 	mov	r6,sp
 401a54c:	4011ba40 	call	4011ba4 <OSSemPend>
         if (err == 10)
 401a550:	d8c00003 	ldbu	r3,0(sp)
 401a554:	00800284 	movi	r2,10
 401a558:	18801426 	beq	r3,r2,401a5ac <tcp_sleep+0xec>
    */
   global_TCPwakeup_setIndx = i;

   UNLOCK_NET_RESOURCE(NET_RESID);
   TK_YIELD();
   LOCK_NET_RESOURCE(NET_RESID);
 401a55c:	0009883a 	mov	r4,zero
 401a560:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
}
 401a564:	dfc00217 	ldw	ra,8(sp)
 401a568:	dc000117 	ldw	r16,4(sp)
 401a56c:	dec00304 	addi	sp,sp,12
 401a570:	f800283a 	ret
      if (global_TCPwakeup_set[i].soc_event == NULL)
      {
         global_TCPwakeup_set[i].soc_event = event;
         global_TCPwakeup_set[i].ctick = cticks;
         if (i > global_TCPwakeup_setIndx)
            global_TCPwakeup_setIndx = i;
 401a574:	39400015 	stw	r5,0(r7)
 401a578:	003fec06 	br	401a52c <tcp_sleep+0x6c>

   /* The table is full. Try calling TK_YIELD() and hope for the best.
    * The user should increase the size of the table.
    * We'll record the max index for debugging purposes.
    */
   global_TCPwakeup_setIndx = i;
 401a57c:	00810134 	movhi	r2,1028
 401a580:	10a93204 	addi	r2,r2,-23352
 401a584:	11400015 	stw	r5,0(r2)

   UNLOCK_NET_RESOURCE(NET_RESID);
 401a588:	0009883a 	mov	r4,zero
 401a58c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   TK_YIELD();
 401a590:	401a3d40 	call	401a3d4 <tk_yield>
   LOCK_NET_RESOURCE(NET_RESID);
 401a594:	0009883a 	mov	r4,zero
 401a598:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
}
 401a59c:	dfc00217 	ldw	ra,8(sp)
 401a5a0:	dc000117 	ldw	r16,4(sp)
 401a5a4:	dec00304 	addi	sp,sp,12
 401a5a8:	f800283a 	ret

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
         if (err == 10)
         {
            ++tcp_sleep_timeout;
 401a5ac:	d0a82217 	ldw	r2,-24440(gp)

            /* clear the entry */
            global_TCPwakeup_set[i].ctick = 0;
 401a5b0:	80000015 	stw	zero,0(r16)
            global_TCPwakeup_set[i].soc_event = NULL;
 401a5b4:	80000115 	stw	zero,4(r16)

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
         if (err == 10)
         {
            ++tcp_sleep_timeout;
 401a5b8:	10800044 	addi	r2,r2,1
    */
   global_TCPwakeup_setIndx = i;

   UNLOCK_NET_RESOURCE(NET_RESID);
   TK_YIELD();
   LOCK_NET_RESOURCE(NET_RESID);
 401a5bc:	0009883a 	mov	r4,zero

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
         if (err == 10)
         {
            ++tcp_sleep_timeout;
 401a5c0:	d0a82215 	stw	r2,-24440(gp)
    */
   global_TCPwakeup_setIndx = i;

   UNLOCK_NET_RESOURCE(NET_RESID);
   TK_YIELD();
   LOCK_NET_RESOURCE(NET_RESID);
 401a5c4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
}
 401a5c8:	dfc00217 	ldw	ra,8(sp)
 401a5cc:	dc000117 	ldw	r16,4(sp)
 401a5d0:	dec00304 	addi	sp,sp,12
 401a5d4:	f800283a 	ret

0401a5d8 <TK_OSTaskResume>:
}



void TK_OSTaskResume(u_char * Id)
{
 401a5d8:	deffff04 	addi	sp,sp,-4
 401a5dc:	dfc00015 	stw	ra,0(sp)
INT8U err;

   err = OSTaskResume(*Id);
 401a5e0:	21000003 	ldbu	r4,0(r4)
 401a5e4:	4012c240 	call	4012c24 <OSTaskResume>
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
 401a5e8:	10c03fcc 	andi	r3,r2,255
 401a5ec:	18000b26 	beq	r3,zero,401a61c <TK_OSTaskResume+0x44>
 401a5f0:	00801104 	movi	r2,68
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
 401a5f4:	010100f4 	movhi	r4,1027
 401a5f8:	21137504 	addi	r4,r4,19924
INT8U err;

   err = OSTaskResume(*Id);
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
 401a5fc:	18800726 	beq	r3,r2,401a61c <TK_OSTaskResume+0x44>
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
 401a600:	4002fec0 	call	4002fec <puts>
      dtrap();
 401a604:	401c81c0 	call	401c81c <dtrap>
      panic("TK_OSTaskResume");      
 401a608:	010100f4 	movhi	r4,1027
 401a60c:	21138204 	addi	r4,r4,19976
   }
#endif
}
 401a610:	dfc00017 	ldw	ra,0(sp)
 401a614:	dec00104 	addi	sp,sp,4
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
      dtrap();
      panic("TK_OSTaskResume");      
 401a618:	4019c441 	jmpi	4019c44 <panic>
   }
#endif
}
 401a61c:	dfc00017 	ldw	ra,0(sp)
 401a620:	dec00104 	addi	sp,sp,4
 401a624:	f800283a 	ret

0401a628 <dhc_set_callback>:
 */

void
dhc_set_callback(int iface, int (*routine)(int,int) )
{
   dhc_states[iface].callback = routine;
 401a628:	21000f24 	muli	r4,r4,60
 401a62c:	00810134 	movhi	r2,1028
 401a630:	108bef04 	addi	r2,r2,12220
 401a634:	2089883a 	add	r4,r4,r2
 401a638:	21400015 	stw	r5,0(r4)
}
 401a63c:	f800283a 	ret

0401a640 <dhc_resetip>:

int
dhc_resetip(int iface)
{
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
 401a640:	2109883a 	add	r4,r4,r4
 401a644:	00810134 	movhi	r2,1028
 401a648:	108bbb04 	addi	r2,r2,12012
 401a64c:	2109883a 	add	r4,r4,r4
 401a650:	2089883a 	add	r4,r4,r2
 401a654:	20c00017 	ldw	r3,0(r4)
   nets[iface]->n_netbr    = 0;
   nets[iface]->n_netbr42  = 0;
   nets[iface]->n_subnetbr = 0;

   return 0;   /* return OK code */
}
 401a658:	0005883a 	mov	r2,zero
   nets[iface]->n_defgw  = 0;

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
   nets[iface]->n_netbr42  = 0;
   nets[iface]->n_subnetbr = 0;
 401a65c:	18001015 	stw	zero,64(r3)

int
dhc_resetip(int iface)
{
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
 401a660:	18000a15 	stw	zero,40(r3)
   nets[iface]->snmask   = 0;
 401a664:	18000c15 	stw	zero,48(r3)
   nets[iface]->n_defgw  = 0;
 401a668:	18000d15 	stw	zero,52(r3)

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
 401a66c:	18000e15 	stw	zero,56(r3)
   nets[iface]->n_netbr42  = 0;
 401a670:	18000f15 	stw	zero,60(r3)
   nets[iface]->n_subnetbr = 0;

   return 0;   /* return OK code */
}
 401a674:	f800283a 	ret

0401a678 <dh_getlong>:
static   long dh_getlong( u_char *ptr )
{
     long  v;
     u_char * p2 =  (u_char *)&v;

   *p2++ = *ptr++;
 401a678:	00c00044 	movi	r3,1
 401a67c:	21400003 	ldbu	r5,0(r4)
 401a680:	20c5883a 	add	r2,r4,r3
   *p2++ = *ptr++;
 401a684:	11800003 	ldbu	r6,0(r2)
 401a688:	10c9883a 	add	r4,r2,r3
   *p2++ = *ptr++;
   *p2++ = *ptr++;
 401a68c:	21c00043 	ldbu	r7,1(r4)
     long  v;
     u_char * p2 =  (u_char *)&v;

   *p2++ = *ptr++;
   *p2++ = *ptr++;
   *p2++ = *ptr++;
 401a690:	22000003 	ldbu	r8,0(r4)
 *
 * RETURNS: the extracted 32 bit value
 */

static   long dh_getlong( u_char *ptr )
{
 401a694:	deffff04 	addi	sp,sp,-4
     long  v;
     u_char * p2 =  (u_char *)&v;

   *p2++ = *ptr++;
 401a698:	d9400005 	stb	r5,0(sp)
 401a69c:	d8c5883a 	add	r2,sp,r3
   *p2++ = *ptr++;
 401a6a0:	11800005 	stb	r6,0(r2)
 401a6a4:	10c5883a 	add	r2,r2,r3
   *p2++ = *ptr++;
   *p2++ = *ptr++;
 401a6a8:	11c00045 	stb	r7,1(r2)
     long  v;
     u_char * p2 =  (u_char *)&v;

   *p2++ = *ptr++;
   *p2++ = *ptr++;
   *p2++ = *ptr++;
 401a6ac:	12000005 	stb	r8,0(r2)
   *p2++ = *ptr++;

   return v;
}
 401a6b0:	d8800017 	ldw	r2,0(sp)
 401a6b4:	dec00104 	addi	sp,sp,4
 401a6b8:	f800283a 	ret

0401a6bc <dhc_alldone>:
 * otherwise. 
 */

int 
dhc_alldone(void)
{
 401a6bc:	00c10134 	movhi	r3,1028
 401a6c0:	18cbe104 	addi	r3,r3,12164
 401a6c4:	01400184 	movi	r5,6
 401a6c8:	19003c04 	addi	r4,r3,240
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 401a6cc:	18800017 	ldw	r2,0(r3)
 401a6d0:	18c00f04 	addi	r3,r3,60
 401a6d4:	10000126 	beq	r2,zero,401a6dc <dhc_alldone+0x20>
 401a6d8:	1140031e 	bne	r2,r5,401a6e8 <dhc_alldone+0x2c>

int 
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
 401a6dc:	193ffb1e 	bne	r3,r4,401a6cc <dhc_alldone+0x10>
 401a6e0:	00800044 	movi	r2,1
      {
         return FALSE ;
      }
   }
   return TRUE ;
}
 401a6e4:	f800283a 	ret
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 401a6e8:	0005883a 	mov	r2,zero
 401a6ec:	f800283a 	ret

0401a6f0 <dhc_ifacedone>:
 */

int 
dhc_ifacedone(int iface)
{
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
 401a6f0:	21000f24 	muli	r4,r4,60
 401a6f4:	00810134 	movhi	r2,1028
 401a6f8:	108be104 	addi	r2,r2,12164
 401a6fc:	00c00044 	movi	r3,1
 401a700:	2089883a 	add	r4,r4,r2
 401a704:	21000017 	ldw	r4,0(r4)
 401a708:	20000126 	beq	r4,zero,401a710 <dhc_ifacedone+0x20>
 401a70c:	20c001a0 	cmpeqi	r3,r4,6
   }
   else
   {
      return FALSE ;
   }
}
 401a710:	1805883a 	mov	r2,r3
 401a714:	f800283a 	ret

0401a718 <dhc_set_state>:
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
   dhc_states[iface].state = state; /* Set the new state */
 401a718:	20800f24 	muli	r2,r4,60
 401a71c:	00c10134 	movhi	r3,1028
 401a720:	18cbe104 	addi	r3,r3,12164
 401a724:	10c5883a 	add	r2,r2,r3
   dhc_states[iface].tries = 0;     /* Reset the number of tries */

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
 401a728:	10c00e17 	ldw	r3,56(r2)
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
   dhc_states[iface].state = state; /* Set the new state */
 401a72c:	11400015 	stw	r5,0(r2)
   dhc_states[iface].tries = 0;     /* Reset the number of tries */
 401a730:	10000115 	stw	zero,4(r2)

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
 401a734:	18000126 	beq	r3,zero,401a73c <dhc_set_state+0x24>
      dhc_states[iface].callback(iface,state);
 401a738:	1800683a 	jmp	r3
 401a73c:	f800283a 	ret

0401a740 <dhc_state_init>:
 */

void 
dhc_state_init(int iface, int init_flag)
{
   int state = (init_flag == TRUE) ? DHCS_INIT : DHCS_INITREBOOT;
 401a740:	00800044 	movi	r2,1
 401a744:	2807883a 	mov	r3,r5
 401a748:	28800126 	beq	r5,r2,401a750 <dhc_state_init+0x10>
 401a74c:	00c00084 	movi	r3,2
   
   dhc_set_state(iface, state);
 401a750:	180b883a 	mov	r5,r3
 401a754:	401a7181 	jmpi	401a718 <dhc_set_state>

0401a758 <dhc_extract_opts>:
{
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
 401a758:	21000f24 	muli	r4,r4,60
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
 401a75c:	defff604 	addi	sp,sp,-40
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
 401a760:	00810134 	movhi	r2,1028
 401a764:	108be104 	addi	r2,r2,12164
 401a768:	2089883a 	add	r4,r4,r2
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
 401a76c:	dc800215 	stw	r18,8(sp)
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
 401a770:	2c804e04 	addi	r18,r5,312
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
 401a774:	dc000015 	stw	r16,0(sp)
 401a778:	dfc00915 	stw	ra,36(sp)
 401a77c:	df000815 	stw	fp,32(sp)
 401a780:	ddc00715 	stw	r23,28(sp)
 401a784:	dd800615 	stw	r22,24(sp)
 401a788:	dd400515 	stw	r21,20(sp)
 401a78c:	dd000415 	stw	r20,16(sp)
 401a790:	dcc00315 	stw	r19,12(sp)
 401a794:	dc400115 	stw	r17,4(sp)
 401a798:	2821883a 	mov	r16,r5
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
 401a79c:	20000a15 	stw	zero,40(r4)
   dhc_states[iface].defgw = 0; 
 401a7a0:	20000b15 	stw	zero,44(r4)
   dhc_states[iface].lease = 0; 
 401a7a4:	20000515 	stw	zero,20(r4)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 401a7a8:	91400e36 	bltu	r18,r5,401a7e4 <dhc_extract_opts+0x8c>
 401a7ac:	202d883a 	mov	r22,r4
 401a7b0:	07000044 	movi	fp,1
 401a7b4:	050000c4 	movi	r20,3
   {
      switch (*opts++)
 401a7b8:	80800003 	ldbu	r2,0(r16)
 401a7bc:	84000044 	addi	r16,r16,1
 401a7c0:	100b883a 	mov	r5,r2
 401a7c4:	15001526 	beq	r2,r20,401a81c <dhc_extract_opts+0xc4>
 401a7c8:	a0800936 	bltu	r20,r2,401a7f0 <dhc_extract_opts+0x98>
 401a7cc:	10000426 	beq	r2,zero,401a7e0 <dhc_extract_opts+0x88>
 401a7d0:	17004326 	beq	r2,fp,401a8e0 <dhc_extract_opts+0x188>
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
         break;
      default:
         opts += ((*opts) + 1);
 401a7d4:	80800003 	ldbu	r2,0(r16)
 401a7d8:	8085883a 	add	r2,r16,r2
 401a7dc:	14000044 	addi	r16,r2,1
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 401a7e0:	943ff52e 	bgeu	r18,r16,401a7b8 <dhc_extract_opts+0x60>
      default:
         opts += ((*opts) + 1);
         break;
      }
   }
   dtrap();
 401a7e4:	401c81c0 	call	401c81c <dtrap>
 401a7e8:	00bfffc4 	movi	r2,-1
 401a7ec:	00003006 	br	401a8b0 <dhc_extract_opts+0x158>
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
   {
      switch (*opts++)
 401a7f0:	00800cc4 	movi	r2,51
 401a7f4:	28801426 	beq	r5,r2,401a848 <dhc_extract_opts+0xf0>
 401a7f8:	00803fc4 	movi	r2,255
 401a7fc:	28802b26 	beq	r5,r2,401a8ac <dhc_extract_opts+0x154>
 401a800:	00800184 	movi	r2,6
 401a804:	28bff31e 	bne	r5,r2,401a7d4 <dhc_extract_opts+0x7c>
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
 401a808:	80c00003 	ldbu	r3,0(r16)
         opts++;
         dhc_states[iface].lease = htonl(dh_getlong(opts));
         opts += 4;
         break;
      case DHOP_DNSRV:
         optlen = *opts++;
 401a80c:	80800044 	addi	r2,r16,1
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
 401a810:	10e1883a 	add	r16,r2,r3
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 401a814:	943fe82e 	bgeu	r18,r16,401a7b8 <dhc_extract_opts+0x60>
 401a818:	003ff206 	br	401a7e4 <dhc_extract_opts+0x8c>
         dhc_states[iface].snmask = dh_getlong(opts);
         opts += 4;
         break;
      case DHOP_ROUTER:
         optlen = *opts++;
         if (optlen >= 4)
 401a81c:	84400003 	ldbu	r17,0(r16)
         opts++;
         dhc_states[iface].snmask = dh_getlong(opts);
         opts += 4;
         break;
      case DHOP_ROUTER:
         optlen = *opts++;
 401a820:	85400044 	addi	r21,r16,1
         if (optlen >= 4)
 401a824:	14400336 	bltu	r2,r17,401a834 <dhc_extract_opts+0xdc>
            dhc_states[iface].defgw = dh_getlong(opts);
         opts += optlen;
 401a828:	ac61883a 	add	r16,r21,r17
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 401a82c:	943fe22e 	bgeu	r18,r16,401a7b8 <dhc_extract_opts+0x60>
 401a830:	003fec06 	br	401a7e4 <dhc_extract_opts+0x8c>
         opts += 4;
         break;
      case DHOP_ROUTER:
         optlen = *opts++;
         if (optlen >= 4)
            dhc_states[iface].defgw = dh_getlong(opts);
 401a834:	a809883a 	mov	r4,r21
 401a838:	401a6780 	call	401a678 <dh_getlong>
         opts += optlen;
 401a83c:	ac61883a 	add	r16,r21,r17
         opts += 4;
         break;
      case DHOP_ROUTER:
         optlen = *opts++;
         if (optlen >= 4)
            dhc_states[iface].defgw = dh_getlong(opts);
 401a840:	b0800b15 	stw	r2,44(r22)
 401a844:	003ff906 	br	401a82c <dhc_extract_opts+0xd4>
         opts += optlen;
         break;
      case DHOP_LEASE:
         opts++;
 401a848:	85400044 	addi	r21,r16,1
         dhc_states[iface].lease = htonl(dh_getlong(opts));
 401a84c:	a809883a 	mov	r4,r21
 401a850:	401a6780 	call	401a678 <dh_getlong>
 401a854:	a809883a 	mov	r4,r21
 401a858:	1027883a 	mov	r19,r2
 401a85c:	401a6780 	call	401a678 <dh_getlong>
 401a860:	a809883a 	mov	r4,r21
 401a864:	102f883a 	mov	r23,r2
 401a868:	401a6780 	call	401a678 <dh_getlong>
 401a86c:	1023883a 	mov	r17,r2
 401a870:	a809883a 	mov	r4,r21
 401a874:	401a6780 	call	401a678 <dh_getlong>
 401a878:	b82fd23a 	srai	r23,r23,8
 401a87c:	8c7fc00c 	andi	r17,r17,65280
 401a880:	9826d63a 	srli	r19,r19,24
 401a884:	8822923a 	slli	r17,r17,8
 401a888:	1004963a 	slli	r2,r2,24
 401a88c:	bdffc00c 	andi	r23,r23,65280
 401a890:	9de6b03a 	or	r19,r19,r23
 401a894:	88a2b03a 	or	r17,r17,r2
 401a898:	9c66b03a 	or	r19,r19,r17
         opts += 4;
 401a89c:	84000144 	addi	r16,r16,5
            dhc_states[iface].defgw = dh_getlong(opts);
         opts += optlen;
         break;
      case DHOP_LEASE:
         opts++;
         dhc_states[iface].lease = htonl(dh_getlong(opts));
 401a8a0:	b4c00515 	stw	r19,20(r22)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 401a8a4:	943fc42e 	bgeu	r18,r16,401a7b8 <dhc_extract_opts+0x60>
 401a8a8:	003fce06 	br	401a7e4 <dhc_extract_opts+0x8c>
   {
      switch (*opts++)
 401a8ac:	0005883a 	mov	r2,zero
         break;
      }
   }
   dtrap();
   return -1;
}
 401a8b0:	dfc00917 	ldw	ra,36(sp)
 401a8b4:	df000817 	ldw	fp,32(sp)
 401a8b8:	ddc00717 	ldw	r23,28(sp)
 401a8bc:	dd800617 	ldw	r22,24(sp)
 401a8c0:	dd400517 	ldw	r21,20(sp)
 401a8c4:	dd000417 	ldw	r20,16(sp)
 401a8c8:	dcc00317 	ldw	r19,12(sp)
 401a8cc:	dc800217 	ldw	r18,8(sp)
 401a8d0:	dc400117 	ldw	r17,4(sp)
 401a8d4:	dc000017 	ldw	r16,0(sp)
 401a8d8:	dec00a04 	addi	sp,sp,40
 401a8dc:	f800283a 	ret
      case DHOP_PAD:
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
      case DHOP_SNMASK:
         opts++;
 401a8e0:	8085883a 	add	r2,r16,r2
         dhc_states[iface].snmask = dh_getlong(opts);
 401a8e4:	1009883a 	mov	r4,r2
         opts += 4;
 401a8e8:	14000104 	addi	r16,r2,4
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
      case DHOP_SNMASK:
         opts++;
         dhc_states[iface].snmask = dh_getlong(opts);
 401a8ec:	401a6780 	call	401a678 <dh_getlong>
 401a8f0:	b0800a15 	stw	r2,40(r22)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 401a8f4:	943fb02e 	bgeu	r18,r16,401a7b8 <dhc_extract_opts+0x60>
 401a8f8:	003fba06 	br	401a7e4 <dhc_extract_opts+0x8c>

0401a8fc <dhc_halt>:
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
 401a8fc:	defffe04 	addi	sp,sp,-8
   {
      dtrap();
      return;
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
 401a900:	01800f04 	movi	r6,60
 */

void
dhc_halt(int iface)
{
   if (iface < 0 || iface > MAXNETS)
 401a904:	00800104 	movi	r2,4
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
 401a908:	dfc00115 	stw	ra,4(sp)
 401a90c:	dc000015 	stw	r16,0(sp)
   {
      dtrap();
      return;
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
 401a910:	000b883a 	mov	r5,zero
 401a914:	2187383a 	mul	r3,r4,r6
 */

void
dhc_halt(int iface)
{
   if (iface < 0 || iface > MAXNETS)
 401a918:	1100042e 	bgeu	r2,r4,401a92c <dhc_halt+0x30>
      return;
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
   dhc_states[iface].state = DHCS_UNUSED;
}
 401a91c:	dfc00117 	ldw	ra,4(sp)
 401a920:	dc000017 	ldw	r16,0(sp)
 401a924:	dec00204 	addi	sp,sp,8
void
dhc_halt(int iface)
{
   if (iface < 0 || iface > MAXNETS)
   {
      dtrap();
 401a928:	401c81c1 	jmpi	401c81c <dtrap>
      return;
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
 401a92c:	04010134 	movhi	r16,1028
 401a930:	840be104 	addi	r16,r16,12164
 401a934:	1c21883a 	add	r16,r3,r16
 401a938:	8009883a 	mov	r4,r16
 401a93c:	40026a00 	call	40026a0 <memset>
   dhc_states[iface].state = DHCS_UNUSED;
 401a940:	80000015 	stw	zero,0(r16)
}
 401a944:	dfc00117 	ldw	ra,4(sp)
 401a948:	dc000017 	ldw	r16,0(sp)
 401a94c:	dec00204 	addi	sp,sp,8
 401a950:	f800283a 	ret

0401a954 <dhc_buildheader>:
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
 401a954:	defffd04 	addi	sp,sp,-12
 401a958:	dc000015 	stw	r16,0(sp)
 401a95c:	2821883a 	mov	r16,r5
 401a960:	dc400115 	stw	r17,4(sp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
 401a964:	000b883a 	mov	r5,zero
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
 401a968:	2023883a 	mov	r17,r4
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
 401a96c:	01804b04 	movi	r6,300
 401a970:	8009883a 	mov	r4,r16
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
 401a974:	dfc00215 	stw	ra,8(sp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
 401a978:	40026a00 	call	40026a0 <memset>
   outbp->op = BOOTREQUEST;

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
 401a97c:	8c4b883a 	add	r5,r17,r17
dhc_buildheader(int iface, struct bootp * outbp)
{
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
   outbp->op = BOOTREQUEST;
 401a980:	01800044 	movi	r6,1

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
 401a984:	02010134 	movhi	r8,1028
 401a988:	420bbb04 	addi	r8,r8,12012
 401a98c:	2945883a 	add	r2,r5,r5
dhc_buildheader(int iface, struct bootp * outbp)
{
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
   outbp->op = BOOTREQUEST;
 401a990:	81800005 	stb	r6,0(r16)

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
 401a994:	1205883a 	add	r2,r2,r8
 401a998:	10c00017 	ldw	r3,0(r2)
 401a99c:	008005c4 	movi	r2,23
 401a9a0:	19002717 	ldw	r4,156(r3)
 401a9a4:	20c00217 	ldw	r3,8(r4)
 401a9a8:	18800b26 	beq	r3,r2,401a9d8 <dhc_buildheader+0x84>
 401a9ac:	00800704 	movi	r2,28
 401a9b0:	18800926 	beq	r3,r2,401a9d8 <dhc_buildheader+0x84>
 401a9b4:	00800184 	movi	r2,6
 401a9b8:	18802e26 	beq	r3,r2,401aa74 <dhc_buildheader+0x120>
   outbp->secs = dhc_states[iface].secs;
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
   {
      dtrap();
 401a9bc:	401c81c0 	call	401c81c <dtrap>
 401a9c0:	00bffd44 	movi	r2,-11
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);

   /* return success */
   return 0;
}
 401a9c4:	dfc00217 	ldw	ra,8(sp)
 401a9c8:	dc400117 	ldw	r17,4(sp)
 401a9cc:	dc000017 	ldw	r16,0(sp)
 401a9d0:	dec00304 	addi	sp,sp,12
 401a9d4:	f800283a 	ret
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
   break;
   case PPP:
   case SLIP:
      outbp->htype = LINEHWTYPE;    /* line type for PPP or SLIP */
 401a9d8:	00800504 	movi	r2,20
 401a9dc:	80800045 	stb	r2,1(r16)
      default:
      dtrap();
      return ENP_LOGIC;             /* this shouldn't happen */
   }

   addrlen = min(16, nets[iface]->n_hal);
 401a9e0:	2945883a 	add	r2,r5,r5
 401a9e4:	1205883a 	add	r2,r2,r8
 401a9e8:	10c00017 	ldw	r3,0(r2)
 401a9ec:	00800404 	movi	r2,16
 401a9f0:	19801117 	ldw	r6,68(r3)
 401a9f4:	1180012e 	bgeu	r2,r6,401a9fc <dhc_buildheader+0xa8>
 401a9f8:	100d883a 	mov	r6,r2
   outbp->hlen = (u_char)addrlen;
   outbp->hops = 0;
   if(dhc_states[iface].state == DHCS_RENEWING) 
 401a9fc:	89c00f24 	muli	r7,r17,60
 401aa00:	02410134 	movhi	r9,1028
 401aa04:	4a4be104 	addi	r9,r9,12164
      dtrap();
      return ENP_LOGIC;             /* this shouldn't happen */
   }

   addrlen = min(16, nets[iface]->n_hal);
   outbp->hlen = (u_char)addrlen;
 401aa08:	81800085 	stb	r6,2(r16)
   outbp->hops = 0;
 401aa0c:	800000c5 	stb	zero,3(r16)
   if(dhc_states[iface].state == DHCS_RENEWING) 
 401aa10:	3a45883a 	add	r2,r7,r9
 401aa14:	11000017 	ldw	r4,0(r2)
 401aa18:	00c001c4 	movi	r3,7
 401aa1c:	20c01726 	beq	r4,r3,401aa7c <dhc_buildheader+0x128>
      outbp->flags = 0; /* Renewing needs unicast */
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
 401aa20:	00802004 	movi	r2,128
 401aa24:	8080028d 	sth	r2,10(r16)
   outbp->xid = dhc_states[iface].xid;
   outbp->secs = dhc_states[iface].secs;
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
 401aa28:	2945883a 	add	r2,r5,r5
 401aa2c:	1205883a 	add	r2,r2,r8
 401aa30:	11000017 	ldw	r4,0(r2)
   outbp->hops = 0;
   if(dhc_states[iface].state == DHCS_RENEWING) 
      outbp->flags = 0; /* Renewing needs unicast */
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
   outbp->xid = dhc_states[iface].xid;
 401aa34:	3a47883a 	add	r3,r7,r9
   outbp->secs = dhc_states[iface].secs;
 401aa38:	1940030b 	ldhu	r5,12(r3)
   outbp->hops = 0;
   if(dhc_states[iface].state == DHCS_RENEWING) 
      outbp->flags = 0; /* Renewing needs unicast */
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
   outbp->xid = dhc_states[iface].xid;
 401aa3c:	18800217 	ldw	r2,8(r3)
   outbp->secs = dhc_states[iface].secs;
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
 401aa40:	21c01717 	ldw	r7,92(r4)
   if(dhc_states[iface].state == DHCS_RENEWING) 
      outbp->flags = 0; /* Renewing needs unicast */
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
   outbp->xid = dhc_states[iface].xid;
   outbp->secs = dhc_states[iface].secs;
 401aa44:	8140020d 	sth	r5,8(r16)
   outbp->hops = 0;
   if(dhc_states[iface].state == DHCS_RENEWING) 
      outbp->flags = 0; /* Renewing needs unicast */
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
   outbp->xid = dhc_states[iface].xid;
 401aa48:	80800115 	stw	r2,4(r16)
   outbp->secs = dhc_states[iface].secs;
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
 401aa4c:	383fdb26 	beq	r7,zero,401a9bc <dhc_buildheader+0x68>
   {
      dtrap();
      return ENP_LOGIC;
   }
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);
 401aa50:	81000704 	addi	r4,r16,28
 401aa54:	380b883a 	mov	r5,r7
 401aa58:	40096480 	call	4009648 <memcpy>
 401aa5c:	0005883a 	mov	r2,zero

   /* return success */
   return 0;
}
 401aa60:	dfc00217 	ldw	ra,8(sp)
 401aa64:	dc400117 	ldw	r17,4(sp)
 401aa68:	dc000017 	ldw	r16,0(sp)
 401aa6c:	dec00304 	addi	sp,sp,12
 401aa70:	f800283a 	ret

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
   {
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
 401aa74:	81800045 	stb	r6,1(r16)
 401aa78:	003fd906 	br	401a9e0 <dhc_buildheader+0x8c>

   addrlen = min(16, nets[iface]->n_hal);
   outbp->hlen = (u_char)addrlen;
   outbp->hops = 0;
   if(dhc_states[iface].state == DHCS_RENEWING) 
      outbp->flags = 0; /* Renewing needs unicast */
 401aa7c:	8000028d 	sth	zero,10(r16)
 401aa80:	003fe906 	br	401aa28 <dhc_buildheader+0xd4>

0401aa84 <dhc_get_srv_ipaddr>:
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
 401aa84:	deffff04 	addi	sp,sp,-4
 401aa88:	200b883a 	mov	r5,r4
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
 401aa8c:	01000d84 	movi	r4,54
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
 401aa90:	dfc00015 	stw	ra,0(sp)
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
 401aa94:	401bc900 	call	401bc90 <find_opt>
   {
      opts++;
      optlen = *opts;
      opts++;
      srv_ipaddr = dh_getlong(opts);
 401aa98:	11000084 	addi	r4,r2,2
{
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
 401aa9c:	10000326 	beq	r2,zero,401aaac <dhc_get_srv_ipaddr+0x28>
      srv_ipaddr = dh_getlong(opts);
      opts += optlen;
   }

   return (srv_ipaddr);
} 
 401aaa0:	dfc00017 	ldw	ra,0(sp)
 401aaa4:	dec00104 	addi	sp,sp,4
   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
   {
      opts++;
      optlen = *opts;
      opts++;
      srv_ipaddr = dh_getlong(opts);
 401aaa8:	401a6781 	jmpi	401a678 <dh_getlong>
      opts += optlen;
   }

   return (srv_ipaddr);
} 
 401aaac:	dfc00017 	ldw	ra,0(sp)
 401aab0:	dec00104 	addi	sp,sp,4
 401aab4:	f800283a 	ret

0401aab8 <dhc_decline>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
 401aab8:	defffa04 	addi	sp,sp,-24
 401aabc:	dd000415 	stw	r20,16(sp)
 401aac0:	dc400115 	stw	r17,4(sp)
 401aac4:	2029883a 	mov	r20,r4
 401aac8:	2823883a 	mov	r17,r5
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
 401aacc:	3009883a 	mov	r4,r6
 401aad0:	000b883a 	mov	r5,zero
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
 401aad4:	dcc00315 	stw	r19,12(sp)
 401aad8:	dc800215 	stw	r18,8(sp)
 401aadc:	dfc00515 	stw	ra,20(sp)
 401aae0:	3025883a 	mov	r18,r6
 401aae4:	dc000015 	stw	r16,0(sp)
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
 401aae8:	402bd400 	call	402bd40 <udp_alloc>
 401aaec:	1027883a 	mov	r19,r2
   if (!pkt) 
      return ENP_NOMEM;
   pkt->nb_plen = bplen;

   outbp = (struct bootp *)pkt->nb_prot;
   MEMCPY(outbp, bp, bplen);
 401aaf0:	900d883a 	mov	r6,r18
 401aaf4:	880b883a 	mov	r5,r17
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
   if (!pkt) 
 401aaf8:	00fffb04 	movi	r3,-20
 401aafc:	10001c26 	beq	r2,zero,401ab70 <dhc_decline+0xb8>
      return ENP_NOMEM;
   pkt->nb_plen = bplen;

   outbp = (struct bootp *)pkt->nb_prot;
 401ab00:	14000317 	ldw	r16,12(r2)

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
   if (!pkt) 
      return ENP_NOMEM;
   pkt->nb_plen = bplen;
 401ab04:	14800415 	stw	r18,16(r2)

   outbp = (struct bootp *)pkt->nb_prot;
   MEMCPY(outbp, bp, bplen);
 401ab08:	8009883a 	mov	r4,r16
 401ab0c:	40096480 	call	4009648 <memcpy>
   outbp->op = BOOTREQUEST;
 401ab10:	00c00044 	movi	r3,1
 401ab14:	80c00005 	stb	r3,0(r16)

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
 401ab18:	81403c04 	addi	r5,r16,240
 401ab1c:	01000d44 	movi	r4,53
 401ab20:	401bc900 	call	401bc90 <find_opt>
   opts += 2;     /* point to actual op code */
   *opts = DHCP_DECLINE;   /* overwrite op code */

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
   pkt->net = nets[iface];    /* send out caller speced net */
 401ab24:	a507883a 	add	r3,r20,r20
   outbp->op = BOOTREQUEST;

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
   opts += 2;     /* point to actual op code */
   *opts = DHCP_DECLINE;   /* overwrite op code */
 401ab28:	01000104 	movi	r4,4
 401ab2c:	11000085 	stb	r4,2(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
   pkt->net = nets[iface];    /* send out caller speced net */
 401ab30:	18c7883a 	add	r3,r3,r3
 401ab34:	00810134 	movhi	r2,1028
 401ab38:	108bbb04 	addi	r2,r2,12012
 401ab3c:	1887883a 	add	r3,r3,r2
 401ab40:	19000017 	ldw	r4,0(r3)
   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
   opts += 2;     /* point to actual op code */
   *opts = DHCP_DECLINE;   /* overwrite op code */

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
 401ab44:	00bfffc4 	movi	r2,-1
 401ab48:	98800715 	stw	r2,28(r19)
   pkt->net = nets[iface];    /* send out caller speced net */
 401ab4c:	99000615 	stw	r4,24(r19)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 401ab50:	980d883a 	mov	r6,r19
 401ab54:	010010c4 	movi	r4,67
 401ab58:	01401104 	movi	r5,68
 401ab5c:	402bdc00 	call	402bdc0 <udp_send>
   dsc_declines++;   /* count declines sent */
 401ab60:	d0a82a17 	ldw	r2,-24408(gp)
 401ab64:	0007883a 	mov	r3,zero
 401ab68:	10800044 	addi	r2,r2,1
 401ab6c:	d0a82a15 	stw	r2,-24408(gp)
   return 0;
}
 401ab70:	1805883a 	mov	r2,r3
 401ab74:	dfc00517 	ldw	ra,20(sp)
 401ab78:	dd000417 	ldw	r20,16(sp)
 401ab7c:	dcc00317 	ldw	r19,12(sp)
 401ab80:	dc800217 	ldw	r18,8(sp)
 401ab84:	dc400117 	ldw	r17,4(sp)
 401ab88:	dc000017 	ldw	r16,0(sp)
 401ab8c:	dec00604 	addi	sp,sp,24
 401ab90:	f800283a 	ret

0401ab94 <dhc_setip>:
 */

int
dhc_setip(int iface)
{
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 401ab94:	21800f24 	muli	r6,r4,60
 401ab98:	2105883a 	add	r2,r4,r4
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
 401ab9c:	defffd04 	addi	sp,sp,-12
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 401aba0:	1085883a 	add	r2,r2,r2
 401aba4:	00c10134 	movhi	r3,1028
 401aba8:	18cbe104 	addi	r3,r3,12164
 401abac:	01410134 	movhi	r5,1028
 401abb0:	294bbb04 	addi	r5,r5,12012
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
 401abb4:	dc400115 	stw	r17,4(sp)
 401abb8:	dc000015 	stw	r16,0(sp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 401abbc:	1163883a 	add	r17,r2,r5
 401abc0:	30e1883a 	add	r16,r6,r3
 401abc4:	80800917 	ldw	r2,36(r16)
 401abc8:	89800017 	ldw	r6,0(r17)
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
 401abcc:	dfc00215 	stw	ra,8(sp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 401abd0:	30800a15 	stw	r2,40(r6)
   nets[iface]->snmask   = dhc_states[iface].snmask;
 401abd4:	80c00a17 	ldw	r3,40(r16)
 401abd8:	30c00c15 	stw	r3,48(r6)
   nets[iface]->n_defgw  = dhc_states[iface].defgw;
 401abdc:	80800b17 	ldw	r2,44(r16)
 401abe0:	30800d15 	stw	r2,52(r6)

   if ( nets[iface]->snmask == 0 )
 401abe4:	1800041e 	bne	r3,zero,401abf8 <dhc_setip+0x64>
   {
      fixup_subnet_mask(iface);
 401abe8:	4017ea40 	call	4017ea4 <fixup_subnet_mask>
      dhc_states[iface].snmask = nets[iface]->snmask; 
 401abec:	89800017 	ldw	r6,0(r17)
 401abf0:	30800c17 	ldw	r2,48(r6)
 401abf4:	80800a15 	stw	r2,40(r16)
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 401abf8:	30c00c17 	ldw	r3,48(r6)
 401abfc:	31000a17 	ldw	r4,40(r6)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;

   return 0;   /* return OK code */
}
 401ac00:	0005883a 	mov	r2,zero
      fixup_subnet_mask(iface);
      dhc_states[iface].snmask = nets[iface]->snmask; 
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 401ac04:	00ca303a 	nor	r5,zero,r3
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
 401ac08:	20c6703a 	and	r3,r4,r3
      fixup_subnet_mask(iface);
      dhc_states[iface].snmask = nets[iface]->snmask; 
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 401ac0c:	2148b03a 	or	r4,r4,r5
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 401ac10:	31001015 	stw	r4,64(r6)
      dhc_states[iface].snmask = nets[iface]->snmask; 
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
 401ac14:	30c00f15 	stw	r3,60(r6)
      fixup_subnet_mask(iface);
      dhc_states[iface].snmask = nets[iface]->snmask; 
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 401ac18:	31000e15 	stw	r4,56(r6)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;

   return 0;   /* return OK code */
}
 401ac1c:	dfc00217 	ldw	ra,8(sp)
 401ac20:	dc400117 	ldw	r17,4(sp)
 401ac24:	dc000017 	ldw	r16,0(sp)
 401ac28:	dec00304 	addi	sp,sp,12
 401ac2c:	f800283a 	ret

0401ac30 <dhc_request>:
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
 401ac30:	defff404 	addi	sp,sp,-48
 401ac34:	dc400315 	stw	r17,12(sp)
 401ac38:	dc000215 	stw	r16,8(sp)
 401ac3c:	2023883a 	mov	r17,r4
 401ac40:	2821883a 	mov	r16,r5
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
 401ac44:	01008904 	movi	r4,548
 401ac48:	000b883a 	mov	r5,zero
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
 401ac4c:	dd400715 	stw	r21,28(sp)
 401ac50:	dfc00b15 	stw	ra,44(sp)
 401ac54:	df000a15 	stw	fp,40(sp)
 401ac58:	ddc00915 	stw	r23,36(sp)
 401ac5c:	dd800815 	stw	r22,32(sp)
 401ac60:	dd000615 	stw	r20,24(sp)
 401ac64:	dcc00515 	stw	r19,20(sp)
 401ac68:	dc800415 	stw	r18,16(sp)
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
 401ac6c:	402bd400 	call	402bd40 <udp_alloc>
 401ac70:	102b883a 	mov	r21,r2
   if (!pkt) 
 401ac74:	10011f26 	beq	r2,zero,401b0f4 <dhc_request+0x4c4>
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
 401ac78:	00803b04 	movi	r2,236

   if ( xid_flag == TRUE )
 401ac7c:	04800044 	movi	r18,1

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
   if (!pkt) 
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
 401ac80:	a8800415 	stw	r2,16(r21)

   if ( xid_flag == TRUE )
 401ac84:	8480ea26 	beq	r16,r18,401b030 <dhc_request+0x400>
      dhc_states[iface].xid  = xids++;
      dhc_states[iface].secs = 0;
   }

   /* build a BOOTP request header */
   outbp = (struct bootp *)pkt->nb_prot;
 401ac88:	ad000317 	ldw	r20,12(r21)
   e     = dhc_buildheader(iface,outbp);
 401ac8c:	8809883a 	mov	r4,r17
 401ac90:	a00b883a 	mov	r5,r20
 401ac94:	401a9540 	call	401a954 <dhc_buildheader>
 401ac98:	d8800115 	stw	r2,4(sp)
   if (e)
 401ac9c:	1000721e 	bne	r2,zero,401ae68 <dhc_request+0x238>
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401aca0:	8f000f24 	muli	fp,r17,60
   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
   opts    = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;
 401aca4:	00c000c4 	movi	r3,3
      return e;

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
   opts    = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
 401aca8:	00800d44 	movi	r2,53
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;
 401acac:	a0c03c85 	stb	r3,242(r20)

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401acb0:	00c10134 	movhi	r3,1028
 401acb4:	18cbe104 	addi	r3,r3,12164
      return e;

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
   opts    = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
 401acb8:	a0803c05 	stb	r2,240(r20)
   *opts++ = 1;   /* length of option field */
 401acbc:	a4803c45 	stb	r18,241(r20)
   *opts++ = DHCP_REQUEST;

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401acc0:	e0cd883a 	add	r6,fp,r3
 401acc4:	30c00017 	ldw	r3,0(r6)
   e     = dhc_buildheader(iface,outbp);
   if (e)
      return e;

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 401acc8:	0098d534 	movhi	r2,25428
 401accc:	10a098c4 	addi	r2,r2,-32157
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401acd0:	01c000c4 	movi	r7,3
 401acd4:	18ffff84 	addi	r3,r3,-2
   e     = dhc_buildheader(iface,outbp);
   if (e)
      return e;

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 401acd8:	a0803b15 	stw	r2,236(r20)
   opts    = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_REQUEST;
 401acdc:	a4003cc4 	addi	r16,r20,243

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401ace0:	38c0b72e 	bgeu	r7,r3,401afc0 <dhc_request+0x390>
       (dhc_states[iface].state == DHCS_INITREBOOT))
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
   }
   if (dhc_states[iface].snmask)
 401ace4:	30800a17 	ldw	r2,40(r6)
 401ace8:	10009b1e 	bne	r2,zero,401af58 <dhc_request+0x328>
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
   }
   if (dhc_states[iface].defgw)
 401acec:	30800b17 	ldw	r2,44(r6)
 401acf0:	10007f1e 	bne	r2,zero,401aef0 <dhc_request+0x2c0>
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
 401acf4:	30800517 	ldw	r2,20(r6)
 401acf8:	1000681e 	bne	r2,zero,401ae9c <dhc_request+0x26c>
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 401acfc:	d0a03617 	ldw	r2,-32552(gp)
 401ad00:	0080100e 	bge	zero,r2,401ad44 <dhc_request+0x114>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 401ad04:	00800dc4 	movi	r2,55
 401ad08:	80800005 	stb	r2,0(r16)
      *opts++ = (u_char)reqlist_len ;
 401ad0c:	d0e03617 	ldw	r3,-32552(gp)
 401ad10:	80c00045 	stb	r3,1(r16)

      for (i=0 ; i < reqlist_len ; i++ )
 401ad14:	d0a03617 	ldw	r2,-32552(gp)
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;
 401ad18:	84000084 	addi	r16,r16,2

      for (i=0 ; i < reqlist_len ; i++ )
 401ad1c:	0080090e 	bge	zero,r2,401ad44 <dhc_request+0x114>
 401ad20:	0009883a 	mov	r4,zero
 401ad24:	d0e03504 	addi	r3,gp,-32556
         *opts++ = reqlist[i];
 401ad28:	18800003 	ldbu	r2,0(r3)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 401ad2c:	21000044 	addi	r4,r4,1
 401ad30:	18c00044 	addi	r3,r3,1
         *opts++ = reqlist[i];
 401ad34:	80800005 	stb	r2,0(r16)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 401ad38:	d0a03617 	ldw	r2,-32552(gp)
         *opts++ = reqlist[i];
 401ad3c:	84000044 	addi	r16,r16,1
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 401ad40:	20bff916 	blt	r4,r2,401ad28 <dhc_request+0xf8>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
 401ad44:	00c10134 	movhi	r3,1028
 401ad48:	18cbe104 	addi	r3,r3,12164
 401ad4c:	e0ed883a 	add	r22,fp,r3
 401ad50:	b1400017 	ldw	r5,0(r22)
 401ad54:	01800044 	movi	r6,1
 401ad58:	28bffe44 	addi	r2,r5,-7
 401ad5c:	3080be2e 	bgeu	r6,r2,401b058 <dhc_request+0x428>
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401ad60:	28bfff04 	addi	r2,r5,-4
 401ad64:	8c6f883a 	add	r23,r17,r17
 401ad68:	3080c52e 	bgeu	r6,r2,401b080 <dhc_request+0x450>
   /* add hostname (code 12) */
   PUT_STRING_OPT(opts, 12, dhc_hostname()); 
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
 401ad6c:	01401a44 	movi	r5,105
 401ad70:	00801444 	movi	r2,81
 401ad74:	00c00184 	movi	r3,6
 401ad78:	80800005 	stb	r2,0(r16)
 401ad7c:	80c00045 	stb	r3,1(r16)
 401ad80:	81400085 	stb	r5,2(r16)
 401ad84:	81000084 	addi	r4,r16,2
 401ad88:	00801944 	movi	r2,101
 401ad8c:	00c01b84 	movi	r3,110
 401ad90:	20800145 	stb	r2,5(r4)
 401ad94:	20c00045 	stb	r3,1(r4)
 401ad98:	008018c4 	movi	r2,99
 401ad9c:	00c01a04 	movi	r3,104
 401ada0:	20c00105 	stb	r3,4(r4)
 401ada4:	21400085 	stb	r5,2(r4)
 401ada8:	208000c5 	stb	r2,3(r4)
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
 401adac:	00800f04 	movi	r2,60
 401adb0:	80800205 	stb	r2,8(r16)
 401adb4:	04810134 	movhi	r18,1028
 401adb8:	94a14104 	addi	r18,r18,-31484
 401adbc:	91000017 	ldw	r4,0(r18)
 401adc0:	84c00284 	addi	r19,r16,10
 401adc4:	400472c0 	call	400472c <strlen>
 401adc8:	80800245 	stb	r2,9(r16)
 401adcc:	91400017 	ldw	r5,0(r18)
 401add0:	9809883a 	mov	r4,r19
 401add4:	100d883a 	mov	r6,r2
 401add8:	1023883a 	mov	r17,r2
 401addc:	4030be80 	call	4030be8 <strncpy>

   *opts++ = DHOP_END;  /* Mark the end of options */
 401ade0:	00bfffc4 	movi	r2,-1
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
 401ade4:	9c67883a 	add	r19,r19,r17

   *opts++ = DHOP_END;  /* Mark the end of options */
 401ade8:	98800005 	stb	r2,0(r19)

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
 401adec:	b0c00017 	ldw	r3,0(r22)
 401adf0:	008001c4 	movi	r2,7
 401adf4:	1880bc26 	beq	r3,r2,401b0e8 <dhc_request+0x4b8>
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
   }
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
 401adf8:	00bfffc4 	movi	r2,-1
 401adfc:	a8800715 	stw	r2,28(r21)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
 401ae00:	00c10134 	movhi	r3,1028
 401ae04:	18cbbb04 	addi	r3,r3,12012
 401ae08:	bdc5883a 	add	r2,r23,r23
 401ae0c:	10c5883a 	add	r2,r2,r3
 401ae10:	11000017 	ldw	r4,0(r2)
   pkt->nb_plen = (char *)opts - (char *)outbp;
 401ae14:	98c00044 	addi	r3,r19,1
 401ae18:	1d07c83a 	sub	r3,r3,r20
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
 401ae1c:	a9000615 	stw	r4,24(r21)
   pkt->nb_plen = (char *)opts - (char *)outbp;
 401ae20:	a8c00415 	stw	r3,16(r21)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 401ae24:	a80d883a 	mov	r6,r21
 401ae28:	010010c4 	movi	r4,67
 401ae2c:	01401104 	movi	r5,68
 401ae30:	402bdc00 	call	402bdc0 <udp_send>
   dsc_requests++;

   dhc_states[iface].last_tick = cticks;
 401ae34:	00810134 	movhi	r2,1028
 401ae38:	108be104 	addi	r2,r2,12164
 401ae3c:	e08b883a 	add	r5,fp,r2
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
   pkt->nb_plen = (char *)opts - (char *)outbp;
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_requests++;
 401ae40:	d0e82717 	ldw	r3,-24420(gp)

   dhc_states[iface].last_tick = cticks;
   dhc_states[iface].tries++;
 401ae44:	29000117 	ldw	r4,4(r5)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
   pkt->nb_plen = (char *)opts - (char *)outbp;
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_requests++;

   dhc_states[iface].last_tick = cticks;
 401ae48:	00810134 	movhi	r2,1028
 401ae4c:	10a93304 	addi	r2,r2,-23348
 401ae50:	11800017 	ldw	r6,0(r2)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
   pkt->nb_plen = (char *)opts - (char *)outbp;
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_requests++;
 401ae54:	18c00044 	addi	r3,r3,1

   dhc_states[iface].last_tick = cticks;
   dhc_states[iface].tries++;
 401ae58:	21000044 	addi	r4,r4,1
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
   pkt->nb_plen = (char *)opts - (char *)outbp;
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_requests++;
 401ae5c:	d0e82715 	stw	r3,-24420(gp)

   dhc_states[iface].last_tick = cticks;
   dhc_states[iface].tries++;
 401ae60:	29000115 	stw	r4,4(r5)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
   pkt->nb_plen = (char *)opts - (char *)outbp;
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_requests++;

   dhc_states[iface].last_tick = cticks;
 401ae64:	29800415 	stw	r6,16(r5)
   dhc_states[iface].tries++;

   return 0;   /* return OK code */
}
 401ae68:	d8800117 	ldw	r2,4(sp)
 401ae6c:	dfc00b17 	ldw	ra,44(sp)
 401ae70:	df000a17 	ldw	fp,40(sp)
 401ae74:	ddc00917 	ldw	r23,36(sp)
 401ae78:	dd800817 	ldw	r22,32(sp)
 401ae7c:	dd400717 	ldw	r21,28(sp)
 401ae80:	dd000617 	ldw	r20,24(sp)
 401ae84:	dcc00517 	ldw	r19,20(sp)
 401ae88:	dc800417 	ldw	r18,16(sp)
 401ae8c:	dc400317 	ldw	r17,12(sp)
 401ae90:	dc000217 	ldw	r16,8(sp)
 401ae94:	dec00c04 	addi	sp,sp,48
 401ae98:	f800283a 	ret
   }
#endif

   if (dhc_states[iface].lease)
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
 401ae9c:	00800cc4 	movi	r2,51
 401aea0:	80800005 	stb	r2,0(r16)
 401aea4:	00c00104 	movi	r3,4
 401aea8:	00810134 	movhi	r2,1028
 401aeac:	108be104 	addi	r2,r2,12164
 401aeb0:	e1400504 	addi	r5,fp,20
 401aeb4:	80c00045 	stb	r3,1(r16)
 401aeb8:	288b883a 	add	r5,r5,r2
 401aebc:	28c00003 	ldbu	r3,0(r5)
 401aec0:	81000084 	addi	r4,r16,2
 401aec4:	20c000c5 	stb	r3,3(r4)
 401aec8:	28800043 	ldbu	r2,1(r5)
 401aecc:	20800085 	stb	r2,2(r4)
 401aed0:	28c00083 	ldbu	r3,2(r5)
 401aed4:	20c00045 	stb	r3,1(r4)
 401aed8:	288000c3 	ldbu	r2,3(r5)
 401aedc:	80800085 	stb	r2,2(r16)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 401aee0:	d0a03617 	ldw	r2,-32552(gp)
   }
#endif

   if (dhc_states[iface].lease)
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
 401aee4:	84000184 	addi	r16,r16,6
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 401aee8:	00bf8616 	blt	zero,r2,401ad04 <dhc_request+0xd4>
 401aeec:	003f9506 	br	401ad44 <dhc_request+0x114>
      opt_ip = ntohl(dhc_states[iface].snmask);
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
   }
   if (dhc_states[iface].defgw)
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
 401aef0:	1008d23a 	srli	r4,r2,8
 401aef4:	10ffc00c 	andi	r3,r2,65280
 401aef8:	100a963a 	slli	r5,r2,24
 401aefc:	1806923a 	slli	r3,r3,8
 401af00:	1004d63a 	srli	r2,r2,24
 401af04:	213fc00c 	andi	r4,r4,65280
 401af08:	1946b03a 	or	r3,r3,r5
 401af0c:	1104b03a 	or	r2,r2,r4
 401af10:	10c4b03a 	or	r2,r2,r3
 401af14:	d8800015 	stw	r2,0(sp)
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
 401af18:	00800104 	movi	r2,4
 401af1c:	81c00005 	stb	r7,0(r16)
 401af20:	80800045 	stb	r2,1(r16)
 401af24:	d8800003 	ldbu	r2,0(sp)
 401af28:	81000084 	addi	r4,r16,2
 401af2c:	208000c5 	stb	r2,3(r4)
 401af30:	d8c00043 	ldbu	r3,1(sp)
 401af34:	20c00085 	stb	r3,2(r4)
 401af38:	d8800083 	ldbu	r2,2(sp)
 401af3c:	20800045 	stb	r2,1(r4)
 401af40:	d8c000c3 	ldbu	r3,3(sp)
 401af44:	80c00085 	stb	r3,2(r16)
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
 401af48:	30800517 	ldw	r2,20(r6)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
   }
   if (dhc_states[iface].defgw)
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
 401af4c:	84000184 	addi	r16,r16,6
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
 401af50:	103f6a26 	beq	r2,zero,401acfc <dhc_request+0xcc>
 401af54:	003fd106 	br	401ae9c <dhc_request+0x26c>
      opt_ip = ntohl(dhc_states[iface].ipaddr);
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
   }
   if (dhc_states[iface].snmask)
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
 401af58:	1008d23a 	srli	r4,r2,8
 401af5c:	10ffc00c 	andi	r3,r2,65280
 401af60:	100a963a 	slli	r5,r2,24
 401af64:	1806923a 	slli	r3,r3,8
 401af68:	1004d63a 	srli	r2,r2,24
 401af6c:	213fc00c 	andi	r4,r4,65280
 401af70:	1946b03a 	or	r3,r3,r5
 401af74:	1104b03a 	or	r2,r2,r4
 401af78:	10c4b03a 	or	r2,r2,r3
 401af7c:	d8800015 	stw	r2,0(sp)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
 401af80:	00800104 	movi	r2,4
 401af84:	84800005 	stb	r18,0(r16)
 401af88:	80800045 	stb	r2,1(r16)
 401af8c:	d8800003 	ldbu	r2,0(sp)
 401af90:	81000084 	addi	r4,r16,2
 401af94:	208000c5 	stb	r2,3(r4)
 401af98:	d8c00043 	ldbu	r3,1(sp)
 401af9c:	20c00085 	stb	r3,2(r4)
 401afa0:	d8800083 	ldbu	r2,2(sp)
 401afa4:	20800045 	stb	r2,1(r4)
 401afa8:	d8c000c3 	ldbu	r3,3(sp)
 401afac:	80c00085 	stb	r3,2(r16)
   }
   if (dhc_states[iface].defgw)
 401afb0:	30800b17 	ldw	r2,44(r6)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
   }
   if (dhc_states[iface].snmask)
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
 401afb4:	84000184 	addi	r16,r16,6
   }
   if (dhc_states[iface].defgw)
 401afb8:	103f4e26 	beq	r2,zero,401acf4 <dhc_request+0xc4>
 401afbc:	003fcc06 	br	401aef0 <dhc_request+0x2c0>
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
       (dhc_states[iface].state == DHCS_REQUESTING) ||
       (dhc_states[iface].state == DHCS_REBOOTING) ||
       (dhc_states[iface].state == DHCS_INITREBOOT))
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
 401afc0:	30800917 	ldw	r2,36(r6)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
 401afc4:	a4003e44 	addi	r16,r20,249
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
       (dhc_states[iface].state == DHCS_REQUESTING) ||
       (dhc_states[iface].state == DHCS_REBOOTING) ||
       (dhc_states[iface].state == DHCS_INITREBOOT))
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
 401afc8:	1008d23a 	srli	r4,r2,8
 401afcc:	10ffc00c 	andi	r3,r2,65280
 401afd0:	100a963a 	slli	r5,r2,24
 401afd4:	1806923a 	slli	r3,r3,8
 401afd8:	1004d63a 	srli	r2,r2,24
 401afdc:	213fc00c 	andi	r4,r4,65280
 401afe0:	1946b03a 	or	r3,r3,r5
 401afe4:	1104b03a 	or	r2,r2,r4
 401afe8:	10c4b03a 	or	r2,r2,r3
 401afec:	d8800015 	stw	r2,0(sp)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
 401aff0:	00c00c84 	movi	r3,50
 401aff4:	00800104 	movi	r2,4
 401aff8:	a0c03cc5 	stb	r3,243(r20)
 401affc:	a0803d05 	stb	r2,244(r20)
 401b000:	d8800003 	ldbu	r2,0(sp)
 401b004:	a1003d44 	addi	r4,r20,245
 401b008:	208000c5 	stb	r2,3(r4)
 401b00c:	d8c00043 	ldbu	r3,1(sp)
 401b010:	20c00085 	stb	r3,2(r4)
 401b014:	d8800083 	ldbu	r2,2(sp)
 401b018:	20800045 	stb	r2,1(r4)
 401b01c:	d8c000c3 	ldbu	r3,3(sp)
 401b020:	a0c03d45 	stb	r3,245(r20)
   }
   if (dhc_states[iface].snmask)
 401b024:	30800a17 	ldw	r2,40(r6)
 401b028:	103f3026 	beq	r2,zero,401acec <dhc_request+0xbc>
 401b02c:	003fca06 	br	401af58 <dhc_request+0x328>
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;

   if ( xid_flag == TRUE )
   {
      dhc_states[iface].xid  = xids++;
 401b030:	d1603417 	ldw	r5,-32560(gp)
 401b034:	88c00f24 	muli	r3,r17,60
 401b038:	00810134 	movhi	r2,1028
 401b03c:	108be104 	addi	r2,r2,12164
 401b040:	2c89883a 	add	r4,r5,r18
 401b044:	1887883a 	add	r3,r3,r2
 401b048:	d1203415 	stw	r4,-32560(gp)
      dhc_states[iface].secs = 0;
 401b04c:	1800030d 	sth	zero,12(r3)
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;

   if ( xid_flag == TRUE )
   {
      dhc_states[iface].xid  = xids++;
 401b050:	19400215 	stw	r5,8(r3)
 401b054:	003f0c06 	br	401ac88 <dhc_request+0x58>

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
       || (dhc_states[iface].state == DHCS_REBINDING))
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
 401b058:	8c6f883a 	add	r23,r17,r17
 401b05c:	00c10134 	movhi	r3,1028
 401b060:	18cbbb04 	addi	r3,r3,12012
 401b064:	bdc5883a 	add	r2,r23,r23
 401b068:	10c5883a 	add	r2,r2,r3
 401b06c:	10c00017 	ldw	r3,0(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401b070:	28bfff04 	addi	r2,r5,-4

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
       || (dhc_states[iface].state == DHCS_REBINDING))
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
 401b074:	19000a17 	ldw	r4,40(r3)
 401b078:	a1000315 	stw	r4,12(r20)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 401b07c:	30bf3b36 	bltu	r6,r2,401ad6c <dhc_request+0x13c>
       (dhc_states[iface].state == DHCS_REQUESTING))
   {
      opt_ip = ntohl(dhc_states[iface].srv_ipaddr);
 401b080:	b0800d17 	ldw	r2,52(r22)
 401b084:	1008d23a 	srli	r4,r2,8
 401b088:	10ffc00c 	andi	r3,r2,65280
 401b08c:	100a963a 	slli	r5,r2,24
 401b090:	1806923a 	slli	r3,r3,8
 401b094:	1004d63a 	srli	r2,r2,24
 401b098:	213fc00c 	andi	r4,r4,65280
 401b09c:	1946b03a 	or	r3,r3,r5
 401b0a0:	1104b03a 	or	r2,r2,r4
 401b0a4:	10c4b03a 	or	r2,r2,r3
 401b0a8:	d8800015 	stw	r2,0(sp)
      PUT_IP_OPT(opts, DHOP_SERVER, opt_ip);
 401b0ac:	00c00d84 	movi	r3,54
 401b0b0:	00800104 	movi	r2,4
 401b0b4:	80c00005 	stb	r3,0(r16)
 401b0b8:	80800045 	stb	r2,1(r16)
 401b0bc:	d8800003 	ldbu	r2,0(sp)
 401b0c0:	81000084 	addi	r4,r16,2
 401b0c4:	208000c5 	stb	r2,3(r4)
 401b0c8:	d8c00043 	ldbu	r3,1(sp)
 401b0cc:	20c00085 	stb	r3,2(r4)
 401b0d0:	d8800083 	ldbu	r2,2(sp)
 401b0d4:	20800045 	stb	r2,1(r4)
 401b0d8:	d8c000c3 	ldbu	r3,3(sp)
 401b0dc:	80c00085 	stb	r3,2(r16)
 401b0e0:	84000184 	addi	r16,r16,6
 401b0e4:	003f2106 	br	401ad6c <dhc_request+0x13c>
   *opts++ = DHOP_END;  /* Mark the end of options */

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
 401b0e8:	b0800d17 	ldw	r2,52(r22)
 401b0ec:	a8800715 	stw	r2,28(r21)
 401b0f0:	003f4306 	br	401ae00 <dhc_request+0x1d0>
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
   if (!pkt) 
 401b0f4:	00bffb04 	movi	r2,-20
 401b0f8:	d8800115 	stw	r2,4(sp)
 401b0fc:	003f5a06 	br	401ae68 <dhc_request+0x238>

0401b100 <dhc_reclaim>:
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
 401b100:	defffd04 	addi	sp,sp,-12
 401b104:	dc000115 	stw	r16,4(sp)
 401b108:	2021883a 	mov	r16,r4
   {
      dtrap();    /* programming bug? */
      return ENP_LOGIC;
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
 401b10c:	21000f24 	muli	r4,r4,60
 401b110:	00c10134 	movhi	r3,1028
 401b114:	18cbe104 	addi	r3,r3,12164

int   
dhc_reclaim(int iface)
{
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
 401b118:	8405883a 	add	r2,r16,r16
   {
      dtrap();    /* programming bug? */
      return ENP_LOGIC;
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
 401b11c:	20c9883a 	add	r4,r4,r3

int   
dhc_reclaim(int iface)
{
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
 401b120:	1085883a 	add	r2,r2,r2
 401b124:	00c10134 	movhi	r3,1028
 401b128:	18cbbb04 	addi	r3,r3,12012
 401b12c:	10c5883a 	add	r2,r2,r3
 401b130:	10800017 	ldw	r2,0(r2)
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
 401b134:	dfc00215 	stw	ra,8(sp)
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
 401b138:	10c00a17 	ldw	r3,40(r2)
 401b13c:	18001d26 	beq	r3,zero,401b1b4 <dhc_reclaim+0xb4>
   {
      dtrap();    /* programming bug? */
      return ENP_LOGIC;
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
 401b140:	20c00915 	stw	r3,36(r4)
   dhc_states[iface].snmask = nets[iface]->snmask;
 401b144:	10c00c17 	ldw	r3,48(r2)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
 401b148:	21800c17 	ldw	r6,48(r4)
      dtrap();    /* programming bug? */
      return ENP_LOGIC;
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
   dhc_states[iface].snmask = nets[iface]->snmask;
 401b14c:	20c00a15 	stw	r3,40(r4)
   dhc_states[iface].defgw  = nets[iface]->n_defgw;
 401b150:	10800d17 	ldw	r2,52(r2)
 401b154:	20800b15 	stw	r2,44(r4)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
 401b158:	30000926 	beq	r6,zero,401b180 <dhc_reclaim+0x80>
   {
      if (dhc_states[iface].srv_ipaddr)
 401b15c:	20800d17 	ldw	r2,52(r4)
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
 401b160:	017fffc4 	movi	r5,-1
 401b164:	800f883a 	mov	r7,r16
 401b168:	1009883a 	mov	r4,r2
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
   {
      if (dhc_states[iface].srv_ipaddr)
 401b16c:	10000a26 	beq	r2,zero,401b198 <dhc_reclaim+0x98>
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
 401b170:	00800084 	movi	r2,2
 401b174:	d8800015 	stw	r2,0(sp)
 401b178:	402b9980 	call	402b998 <add_route>
 401b17c:	10000626 	beq	r2,zero,401b198 <dhc_reclaim+0x98>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 401b180:	8009883a 	mov	r4,r16
 401b184:	01400044 	movi	r5,1
}
 401b188:	dfc00217 	ldw	ra,8(sp)
 401b18c:	dc000117 	ldw	r16,4(sp)
 401b190:	dec00304 	addi	sp,sp,12
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 401b194:	401ac301 	jmpi	401ac30 <dhc_request>
      else
      {
         /* DHCP relay IP address is set, but DHCP Server IP address is
          * not set ! How can this happen ?
          */
         dtrap();
 401b198:	401c81c0 	call	401c81c <dtrap>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 401b19c:	8009883a 	mov	r4,r16
 401b1a0:	01400044 	movi	r5,1
}
 401b1a4:	dfc00217 	ldw	ra,8(sp)
 401b1a8:	dc000117 	ldw	r16,4(sp)
 401b1ac:	dec00304 	addi	sp,sp,12
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 401b1b0:	401ac301 	jmpi	401ac30 <dhc_request>
dhc_reclaim(int iface)
{
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
   {
      dtrap();    /* programming bug? */
 401b1b4:	401c81c0 	call	401c81c <dtrap>
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
}
 401b1b8:	00bffd44 	movi	r2,-11
 401b1bc:	dfc00217 	ldw	ra,8(sp)
 401b1c0:	dc000117 	ldw	r16,4(sp)
 401b1c4:	dec00304 	addi	sp,sp,12
 401b1c8:	f800283a 	ret

0401b1cc <dhc_rx_offer>:
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 401b1cc:	20c00f24 	muli	r3,r4,60
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 401b1d0:	defffa04 	addi	sp,sp,-24
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 401b1d4:	00810134 	movhi	r2,1028
 401b1d8:	108be104 	addi	r2,r2,12164
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 401b1dc:	dd000415 	stw	r20,16(sp)
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 401b1e0:	18a9883a 	add	r20,r3,r2
 401b1e4:	a1c00217 	ldw	r7,8(r20)
 401b1e8:	28800117 	ldw	r2,4(r5)
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 401b1ec:	dcc00315 	stw	r19,12(sp)
 401b1f0:	dc800215 	stw	r18,8(sp)
 401b1f4:	dc400115 	stw	r17,4(sp)
 401b1f8:	dc000015 	stw	r16,0(sp)
 401b1fc:	dfc00515 	stw	ra,20(sp)
 401b200:	2821883a 	mov	r16,r5
 401b204:	2023883a 	mov	r17,r4

   if (dhc_states[iface].xid != bp->xid)
      return ENP_NOT_MINE;

   opts = &bp->options[4];    /* examine options after cookie */
   e = dhc_extract_opts(iface,opts);
 401b208:	29403c04 	addi	r5,r5,240
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 401b20c:	04800084 	movi	r18,2
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 401b210:	3027883a 	mov	r19,r6
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 401b214:	38800926 	beq	r7,r2,401b23c <dhc_rx_offer+0x70>
   }
   dhc_states[iface].ipaddr = bp->yiaddr;

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
}
 401b218:	9005883a 	mov	r2,r18
 401b21c:	dfc00517 	ldw	ra,20(sp)
 401b220:	dd000417 	ldw	r20,16(sp)
 401b224:	dcc00317 	ldw	r19,12(sp)
 401b228:	dc800217 	ldw	r18,8(sp)
 401b22c:	dc400117 	ldw	r17,4(sp)
 401b230:	dc000017 	ldw	r16,0(sp)
 401b234:	dec00604 	addi	sp,sp,24
 401b238:	f800283a 	ret

   if (dhc_states[iface].xid != bp->xid)
      return ENP_NOT_MINE;

   opts = &bp->options[4];    /* examine options after cookie */
   e = dhc_extract_opts(iface,opts);
 401b23c:	401a7580 	call	401a758 <dhc_extract_opts>
 401b240:	1025883a 	mov	r18,r2
   if (e)   /* parse error? */
 401b244:	1000081e 	bne	r2,zero,401b268 <dhc_rx_offer+0x9c>
   {
      dtrap();
      return e;
   }
   if (!bp->yiaddr)  /* require an IP address */
 401b248:	80800417 	ldw	r2,16(r16)
   {
      dhc_decline(iface,bp, bplen);
 401b24c:	8809883a 	mov	r4,r17
 401b250:	800b883a 	mov	r5,r16
 401b254:	980d883a 	mov	r6,r19
 401b258:	04800084 	movi	r18,2
   if (e)   /* parse error? */
   {
      dtrap();
      return e;
   }
   if (!bp->yiaddr)  /* require an IP address */
 401b25c:	1000041e 	bne	r2,zero,401b270 <dhc_rx_offer+0xa4>
   {
      dhc_decline(iface,bp, bplen);
 401b260:	401aab80 	call	401aab8 <dhc_decline>
 401b264:	003fec06 	br	401b218 <dhc_rx_offer+0x4c>

   opts = &bp->options[4];    /* examine options after cookie */
   e = dhc_extract_opts(iface,opts);
   if (e)   /* parse error? */
   {
      dtrap();
 401b268:	401c81c0 	call	401c81c <dtrap>
 401b26c:	003fea06 	br	401b218 <dhc_rx_offer+0x4c>
      return ENP_NOT_MINE;
   }
   dhc_states[iface].ipaddr = bp->yiaddr;

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
 401b270:	8809883a 	mov	r4,r17
 401b274:	000b883a 	mov	r5,zero
   if (!bp->yiaddr)  /* require an IP address */
   {
      dhc_decline(iface,bp, bplen);
      return ENP_NOT_MINE;
   }
   dhc_states[iface].ipaddr = bp->yiaddr;
 401b278:	a0800915 	stw	r2,36(r20)

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
}
 401b27c:	dfc00517 	ldw	ra,20(sp)
 401b280:	dd000417 	ldw	r20,16(sp)
 401b284:	dcc00317 	ldw	r19,12(sp)
 401b288:	dc800217 	ldw	r18,8(sp)
 401b28c:	dc400117 	ldw	r17,4(sp)
 401b290:	dc000017 	ldw	r16,0(sp)
 401b294:	dec00604 	addi	sp,sp,24
      return ENP_NOT_MINE;
   }
   dhc_states[iface].ipaddr = bp->yiaddr;

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
 401b298:	401ac301 	jmpi	401ac30 <dhc_request>

0401b29c <dhc_discover>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 401b29c:	defff604 	addi	sp,sp,-40
 401b2a0:	dc000215 	stw	r16,8(sp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 401b2a4:	04004b04 	movi	r16,300
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 401b2a8:	dcc00515 	stw	r19,20(sp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 401b2ac:	000b883a 	mov	r5,zero
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 401b2b0:	2027883a 	mov	r19,r4
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 401b2b4:	8009883a 	mov	r4,r16
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 401b2b8:	dc800415 	stw	r18,16(sp)
 401b2bc:	dfc00915 	stw	ra,36(sp)
 401b2c0:	dd800815 	stw	r22,32(sp)
 401b2c4:	dd400715 	stw	r21,28(sp)
 401b2c8:	dd000615 	stw	r20,24(sp)
 401b2cc:	dc400315 	stw	r17,12(sp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 401b2d0:	402bd400 	call	402bd40 <udp_alloc>
 401b2d4:	1025883a 	mov	r18,r2
   if (!pkt) 
 401b2d8:	10008926 	beq	r2,zero,401b500 <dhc_discover+0x264>
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp);

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
 401b2dc:	d0e03417 	ldw	r3,-32560(gp)
 401b2e0:	9d400f24 	muli	r21,r19,60

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
   if (!pkt) 
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp);
 401b2e4:	14000415 	stw	r16,16(r2)

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
 401b2e8:	05810134 	movhi	r22,1028
 401b2ec:	b58be104 	addi	r22,r22,12164
 401b2f0:	18800044 	addi	r2,r3,1
 401b2f4:	ada1883a 	add	r16,r21,r22
 401b2f8:	d0a03415 	stw	r2,-32560(gp)
 401b2fc:	80c00215 	stw	r3,8(r16)
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
 401b300:	4026c300 	call	4026c30 <sysuptime>

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
 401b304:	94400317 	ldw	r17,12(r18)
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp);

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
 401b308:	00c01904 	movi	r3,100
 401b30c:	10c5203a 	divu	r2,r2,r3

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
   e = dhc_buildheader(iface,outbp);
 401b310:	9809883a 	mov	r4,r19
 401b314:	880b883a 	mov	r5,r17
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp);

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
 401b318:	8080030d 	sth	r2,12(r16)

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
   e = dhc_buildheader(iface,outbp);
 401b31c:	401a9540 	call	401a954 <dhc_buildheader>
 401b320:	1029883a 	mov	r20,r2
   if (!pkt) 
      return ENP_NOMEM;
   pkt->nb_plen = sizeof(struct bootp);

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
 401b324:	00c00044 	movi	r3,1
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
   e = dhc_buildheader(iface,outbp);
   if (e)
 401b328:	1000501e 	bne	r2,zero,401b46c <dhc_discover+0x1d0>
      return e;

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
   opts = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
 401b32c:	00800d44 	movi	r2,53
 401b330:	88803c05 	stb	r2,240(r17)
   e = dhc_buildheader(iface,outbp);
   if (e)
      return e;

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 401b334:	0098d534 	movhi	r2,25428
 401b338:	10a098c4 	addi	r2,r2,-32157
   opts = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_DISCOVER;
 401b33c:	88c03c85 	stb	r3,242(r17)
   e = dhc_buildheader(iface,outbp);
   if (e)
      return e;

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 401b340:	88803b15 	stw	r2,236(r17)
   opts = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
 401b344:	88c03c45 	stb	r3,241(r17)
   *opts++ = DHCP_DISCOVER;
   leasetime = -1L ;    /* ask for infinite lease */
 401b348:	00bfffc4 	movi	r2,-1
 401b34c:	d8800115 	stw	r2,4(sp)
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 401b350:	02000104 	movi	r8,4
 401b354:	00800cc4 	movi	r2,51
 401b358:	88803cc5 	stb	r2,243(r17)
 401b35c:	8a003d05 	stb	r8,244(r17)
 401b360:	d8800103 	ldbu	r2,4(sp)
 401b364:	89403d44 	addi	r5,r17,245

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 401b368:	9ccf883a 	add	r7,r19,r19
   opts = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_DISCOVER;
   leasetime = -1L ;    /* ask for infinite lease */
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 401b36c:	288000c5 	stb	r2,3(r5)
 401b370:	d8800143 	ldbu	r2,5(sp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 401b374:	02410134 	movhi	r9,1028
 401b378:	4a4bbb04 	addi	r9,r9,12012
 401b37c:	39c9883a 	add	r4,r7,r7
   opts = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_DISCOVER;
   leasetime = -1L ;    /* ask for infinite lease */
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 401b380:	28800085 	stb	r2,2(r5)
 401b384:	d8800183 	ldbu	r2,6(sp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 401b388:	2249883a 	add	r4,r4,r9
   opts = &outbp->options[4];    /* encode options after cookie */
   *opts++ = DHOP_TYPE;
   *opts++ = 1;   /* length of option field */
   *opts++ = DHCP_DISCOVER;
   leasetime = -1L ;    /* ask for infinite lease */
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 401b38c:	89803e44 	addi	r6,r17,249
 401b390:	28800045 	stb	r2,1(r5)
 401b394:	d8c001c3 	ldbu	r3,7(sp)
 401b398:	88c03d45 	stb	r3,245(r17)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 401b39c:	20800017 	ldw	r2,0(r4)
 401b3a0:	10800a17 	ldw	r2,40(r2)
 401b3a4:	10003c1e 	bne	r2,zero,401b498 <dhc_discover+0x1fc>
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 401b3a8:	d0a03617 	ldw	r2,-32552(gp)
 401b3ac:	0080100e 	bge	zero,r2,401b3f0 <dhc_discover+0x154>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 401b3b0:	00800dc4 	movi	r2,55
 401b3b4:	30800005 	stb	r2,0(r6)
      *opts++ = (u_char)reqlist_len ;
 401b3b8:	d0e03617 	ldw	r3,-32552(gp)
 401b3bc:	30c00045 	stb	r3,1(r6)

      for (i=0 ; i < reqlist_len ; i++ )
 401b3c0:	d0a03617 	ldw	r2,-32552(gp)
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;
 401b3c4:	31800084 	addi	r6,r6,2

      for (i=0 ; i < reqlist_len ; i++ )
 401b3c8:	0080090e 	bge	zero,r2,401b3f0 <dhc_discover+0x154>
 401b3cc:	0009883a 	mov	r4,zero
 401b3d0:	d0e03504 	addi	r3,gp,-32556
         *opts++ = reqlist[i];
 401b3d4:	18800003 	ldbu	r2,0(r3)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 401b3d8:	21000044 	addi	r4,r4,1
 401b3dc:	18c00044 	addi	r3,r3,1
         *opts++ = reqlist[i];
 401b3e0:	30800005 	stb	r2,0(r6)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 401b3e4:	d0a03617 	ldw	r2,-32552(gp)
         *opts++ = reqlist[i];
 401b3e8:	31800044 	addi	r6,r6,1
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 401b3ec:	20bff916 	blt	r4,r2,401b3d4 <dhc_discover+0x138>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   *opts++ = DHOP_END;
 401b3f0:	00bfffc4 	movi	r2,-1
 401b3f4:	30800005 	stb	r2,0(r6)
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
   pkt->net = nets[iface];    /* send out caller spec'ed net */
 401b3f8:	39c7883a 	add	r3,r7,r7

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
 401b3fc:	04410134 	movhi	r17,1028
 401b400:	8c693304 	addi	r17,r17,-23348
 401b404:	88800017 	ldw	r2,0(r17)
 401b408:	ada1883a 	add	r16,r21,r22

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
   pkt->net = nets[iface];    /* send out caller spec'ed net */
 401b40c:	1a47883a 	add	r3,r3,r9
 401b410:	19000017 	ldw	r4,0(r3)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
 401b414:	81400017 	ldw	r5,0(r16)

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
 401b418:	80800415 	stw	r2,16(r16)
   pkt->net = nets[iface];    /* send out caller spec'ed net */

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
 401b41c:	00c00104 	movi	r3,4
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
 401b420:	00bfffc4 	movi	r2,-1
 401b424:	90800715 	stw	r2,28(r18)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
 401b428:	91000615 	stw	r4,24(r18)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
 401b42c:	28c00326 	beq	r5,r3,401b43c <dhc_discover+0x1a0>
      dhc_set_state(iface, DHCS_SELECTING);
 401b430:	9809883a 	mov	r4,r19
 401b434:	180b883a 	mov	r5,r3
 401b438:	401a7180 	call	401a718 <dhc_set_state>

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 401b43c:	010010c4 	movi	r4,67
 401b440:	900d883a 	mov	r6,r18
 401b444:	01401104 	movi	r5,68
 401b448:	402bdc00 	call	402bdc0 <udp_send>
   dsc_discovers++;
 401b44c:	d0a82517 	ldw	r2,-24428(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
   dhc_states[iface].tries++;
 401b450:	80c00117 	ldw	r3,4(r16)

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_discovers++;

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
 401b454:	89000017 	ldw	r4,0(r17)
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
      dhc_set_state(iface, DHCS_SELECTING);

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_discovers++;
 401b458:	10800044 	addi	r2,r2,1

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
   dhc_states[iface].tries++;
 401b45c:	18c00044 	addi	r3,r3,1
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
      dhc_set_state(iface, DHCS_SELECTING);

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_discovers++;
 401b460:	d0a82515 	stw	r2,-24428(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
   dhc_states[iface].tries++;
 401b464:	80c00115 	stw	r3,4(r16)

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
   dsc_discovers++;

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
 401b468:	81000415 	stw	r4,16(r16)
   dhc_states[iface].tries++;

   return 0;
}
 401b46c:	a005883a 	mov	r2,r20
 401b470:	dfc00917 	ldw	ra,36(sp)
 401b474:	dd800817 	ldw	r22,32(sp)
 401b478:	dd400717 	ldw	r21,28(sp)
 401b47c:	dd000617 	ldw	r20,24(sp)
 401b480:	dcc00517 	ldw	r19,20(sp)
 401b484:	dc800417 	ldw	r18,16(sp)
 401b488:	dc400317 	ldw	r17,12(sp)
 401b48c:	dc000217 	ldw	r16,8(sp)
 401b490:	dec00a04 	addi	sp,sp,40
 401b494:	f800283a 	ret
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
   {
      ip_addr my_ip = htonl(nets[iface]->n_ipaddr);
 401b498:	1008d23a 	srli	r4,r2,8
 401b49c:	10ffc00c 	andi	r3,r2,65280
 401b4a0:	100a963a 	slli	r5,r2,24
 401b4a4:	1806923a 	slli	r3,r3,8
 401b4a8:	1004d63a 	srli	r2,r2,24
 401b4ac:	213fc00c 	andi	r4,r4,65280
 401b4b0:	1946b03a 	or	r3,r3,r5
 401b4b4:	1104b03a 	or	r2,r2,r4
 401b4b8:	10c4b03a 	or	r2,r2,r3
 401b4bc:	d8800015 	stw	r2,0(sp)
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
 401b4c0:	00c00c84 	movi	r3,50
 401b4c4:	88c03e45 	stb	r3,249(r17)
 401b4c8:	8a003e85 	stb	r8,250(r17)
 401b4cc:	d8800003 	ldbu	r2,0(sp)
 401b4d0:	89003ec4 	addi	r4,r17,251
 401b4d4:	89803fc4 	addi	r6,r17,255
 401b4d8:	208000c5 	stb	r2,3(r4)
 401b4dc:	d8c00043 	ldbu	r3,1(sp)
 401b4e0:	20c00085 	stb	r3,2(r4)
 401b4e4:	d8800083 	ldbu	r2,2(sp)
 401b4e8:	20800045 	stb	r2,1(r4)
 401b4ec:	d8c000c3 	ldbu	r3,3(sp)
 401b4f0:	88c03ec5 	stb	r3,251(r17)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 401b4f4:	d0a03617 	ldw	r2,-32552(gp)
 401b4f8:	00bfad16 	blt	zero,r2,401b3b0 <dhc_discover+0x114>
 401b4fc:	003fbc06 	br	401b3f0 <dhc_discover+0x154>
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
   if (!pkt) 
 401b500:	053ffb04 	movi	r20,-20
 401b504:	003fd906 	br	401b46c <dhc_discover+0x1d0>

0401b508 <dhc_second>:
 * RETURNS: Returns 0 or ENP_ error code 
 */

int
dhc_second(void)
{
 401b508:	defffc04 	addi	sp,sp,-16
 401b50c:	dc800215 	stw	r18,8(sp)
 401b510:	dc400115 	stw	r17,4(sp)
 401b514:	dfc00315 	stw	ra,12(sp)
 401b518:	dc000015 	stw	r16,0(sp)
 401b51c:	0023883a 	mov	r17,zero
 401b520:	04810134 	movhi	r18,1028
 401b524:	948be104 	addi	r18,r18,12164
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
   {
      switch (dhc_states[iface].state)
 401b528:	91400017 	ldw	r5,0(r18)
 401b52c:	00800204 	movi	r2,8
 401b530:	11402336 	bltu	r2,r5,401b5c0 <dhc_second+0xb8>
 401b534:	2945883a 	add	r2,r5,r5
 401b538:	1085883a 	add	r2,r2,r2
 401b53c:	00c100b4 	movhi	r3,1026
 401b540:	18ed5404 	addi	r3,r3,-19120
 401b544:	10c5883a 	add	r2,r2,r3
 401b548:	11000017 	ldw	r4,0(r2)
 401b54c:	2000683a 	jmp	r4
 401b550:	0401b5c0 	call	401b5c <OSCtxSw_SWITCH_PC+0x401b1c>
 401b554:	0401b5f0 	cmpltui	r16,zero,1751
 401b558:	0401b620 	cmpeqi	r16,zero,1752
 401b55c:	0401b650 	cmplti	r16,zero,1753
 401b560:	0401b650 	cmplti	r16,zero,1753
 401b564:	0401b650 	cmplti	r16,zero,1753
 401b568:	0401b6dc 	xori	r16,zero,1755
 401b56c:	0401b574 	movhi	r16,1749
 401b570:	0401b730 	cmpltui	r16,zero,1756
            dsc_renew++;
         }
         break;
      case DHCS_RENEWING:
         /* Test for lease expiry. The REBIND timer. */
         if ( (dhc_states[iface].t2*TPS+dhc_states[iface].lease_start) > cticks )
 401b574:	90800717 	ldw	r2,28(r18)
 401b578:	91000817 	ldw	r4,32(r18)
 401b57c:	00c10134 	movhi	r3,1028
 401b580:	18e93304 	addi	r3,r3,-23348
 401b584:	10801924 	muli	r2,r2,100
 401b588:	19400017 	ldw	r5,0(r3)
 401b58c:	1105883a 	add	r2,r2,r4
 401b590:	28806f36 	bltu	r5,r2,401b750 <dhc_second+0x248>
         {
            /* No Response has come from the Server that assigned our 
             * IP. Hence send a broadcast packet to see if we can 
             * lease this IP from some other server 
             */
            dhc_set_state(iface,DHCS_REBINDING);
 401b594:	01400204 	movi	r5,8
 401b598:	8809883a 	mov	r4,r17
 401b59c:	401a7180 	call	401a718 <dhc_set_state>
            e = dhc_request(iface,TRUE);  /* broadcast */
 401b5a0:	8809883a 	mov	r4,r17
 401b5a4:	01400044 	movi	r5,1
 401b5a8:	401ac300 	call	401ac30 <dhc_request>
 401b5ac:	1021883a 	mov	r16,r2
            if (e)
 401b5b0:	1000871e 	bne	r2,zero,401b7d0 <dhc_second+0x2c8>
            {
               dtrap();
               return e;
            }
            dsc_rebind++;
 401b5b4:	d0a82e17 	ldw	r2,-24392(gp)
 401b5b8:	10800044 	addi	r2,r2,1
 401b5bc:	d0a82e15 	stw	r2,-24392(gp)
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 401b5c0:	8c400044 	addi	r17,r17,1
 401b5c4:	00800104 	movi	r2,4
 401b5c8:	94800f04 	addi	r18,r18,60
 401b5cc:	88bfd61e 	bne	r17,r2,401b528 <dhc_second+0x20>
 401b5d0:	0021883a 	mov	r16,zero
      default:
         continue;
      }
   }
   return 0;
}
 401b5d4:	8005883a 	mov	r2,r16
 401b5d8:	dfc00317 	ldw	ra,12(sp)
 401b5dc:	dc800217 	ldw	r18,8(sp)
 401b5e0:	dc400117 	ldw	r17,4(sp)
 401b5e4:	dc000017 	ldw	r16,0(sp)
 401b5e8:	dec00404 	addi	sp,sp,16
 401b5ec:	f800283a 	ret
   for (iface = 0; iface < MAXNETS; iface++)
   {
      switch (dhc_states[iface].state)
      {
      case DHCS_INIT:         /* Send a discover packet */
         e = dhc_discover(iface);
 401b5f0:	8809883a 	mov	r4,r17
 401b5f4:	401b29c0 	call	401b29c <dhc_discover>
 401b5f8:	1021883a 	mov	r16,r2
         /* Error while sending a discover packet */
         if (e)
 401b5fc:	1000741e 	bne	r2,zero,401b7d0 <dhc_second+0x2c8>
         {
            dtrap();
            return e;
         }
         dhc_set_state(iface,DHCS_SELECTING);
 401b600:	8809883a 	mov	r4,r17
 401b604:	01400104 	movi	r5,4
 401b608:	401a7180 	call	401a718 <dhc_set_state>
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 401b60c:	8c400044 	addi	r17,r17,1
 401b610:	00800104 	movi	r2,4
 401b614:	94800f04 	addi	r18,r18,60
 401b618:	88bfc31e 	bne	r17,r2,401b528 <dhc_second+0x20>
 401b61c:	003fec06 	br	401b5d0 <dhc_second+0xc8>
            return e;
         }
         dhc_set_state(iface,DHCS_SELECTING);
         break;
      case DHCS_INITREBOOT:   /* Send a request packet */
         e = dhc_reclaim(iface);
 401b620:	8809883a 	mov	r4,r17
 401b624:	401b1000 	call	401b100 <dhc_reclaim>
 401b628:	1021883a 	mov	r16,r2
         if (e)
 401b62c:	1000681e 	bne	r2,zero,401b7d0 <dhc_second+0x2c8>
         {
            dtrap();
            return e;
         }
         dhc_set_state(iface,DHCS_REBOOTING);
 401b630:	8809883a 	mov	r4,r17
 401b634:	014000c4 	movi	r5,3
 401b638:	401a7180 	call	401a718 <dhc_set_state>
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 401b63c:	8c400044 	addi	r17,r17,1
 401b640:	00800104 	movi	r2,4
 401b644:	94800f04 	addi	r18,r18,60
 401b648:	88bfb71e 	bne	r17,r2,401b528 <dhc_second+0x20>
 401b64c:	003fe006 	br	401b5d0 <dhc_second+0xc8>
         /* Send discover packet on timeout */
      case DHCS_REBOOTING:
      case DHCS_REQUESTING:
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;
 401b650:	94000117 	ldw	r16,4(r18)

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
 401b654:	008000c4 	movi	r2,3
 401b658:	1400500e 	bge	r2,r16,401b79c <dhc_second+0x294>
 401b65c:	04000104 	movi	r16,4
 401b660:	01864004 	movi	r6,6400
            tries= DHC_MAX_TRIES;
         if ( cticks > (dhc_states[iface].last_tick + 
 401b664:	90800417 	ldw	r2,16(r18)
 401b668:	00c10134 	movhi	r3,1028
 401b66c:	18e93304 	addi	r3,r3,-23348
 401b670:	19000017 	ldw	r4,0(r3)
 401b674:	3085883a 	add	r2,r6,r2
 401b678:	1100072e 	bgeu	r2,r4,401b698 <dhc_second+0x190>
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
 401b67c:	00800104 	movi	r2,4
 401b680:	28804926 	beq	r5,r2,401b7a8 <dhc_second+0x2a0>
 401b684:	00800144 	movi	r2,5
 401b688:	28804a26 	beq	r5,r2,401b7b4 <dhc_second+0x2ac>
 401b68c:	008000c4 	movi	r2,3
 401b690:	28804c26 	beq	r5,r2,401b7c4 <dhc_second+0x2bc>
               break;
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
               break;
            default:
               dtrap(); /* bogus state */
 401b694:	401c81c0 	call	401c81c <dtrap>
               break;
            }
         }
         if ( tries == DHC_MAX_TRIES && 
 401b698:	00800104 	movi	r2,4
 401b69c:	80bfc81e 	bne	r16,r2,401b5c0 <dhc_second+0xb8>
 401b6a0:	90800017 	ldw	r2,0(r18)
 401b6a4:	143fc626 	beq	r2,r16,401b5c0 <dhc_second+0xb8>
            }
         }
         else
         {
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
 401b6a8:	01400244 	movi	r5,9
 401b6ac:	8809883a 	mov	r4,r17
 401b6b0:	401a7180 	call	401a718 <dhc_set_state>
            dhc_resetip(iface);
 401b6b4:	8809883a 	mov	r4,r17
 401b6b8:	401a6400 	call	401a640 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 401b6bc:	01400044 	movi	r5,1
 401b6c0:	8809883a 	mov	r4,r17
 401b6c4:	401a7180 	call	401a718 <dhc_set_state>
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 401b6c8:	8c400044 	addi	r17,r17,1
 401b6cc:	00800104 	movi	r2,4
 401b6d0:	94800f04 	addi	r18,r18,60
 401b6d4:	88bf941e 	bne	r17,r2,401b528 <dhc_second+0x20>
 401b6d8:	003fbd06 	br	401b5d0 <dhc_second+0xc8>
         }
         break;

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
 401b6dc:	90c00617 	ldw	r3,24(r18)
 401b6e0:	00bfffc4 	movi	r2,-1
 401b6e4:	18bfb626 	beq	r3,r2,401b5c0 <dhc_second+0xb8>
 401b6e8:	18c01924 	muli	r3,r3,100
 401b6ec:	91400817 	ldw	r5,32(r18)
 401b6f0:	00810134 	movhi	r2,1028
 401b6f4:	10a93304 	addi	r2,r2,-23348
 401b6f8:	11000017 	ldw	r4,0(r2)
 401b6fc:	1947883a 	add	r3,r3,r5
 401b700:	193faf2e 	bgeu	r3,r4,401b5c0 <dhc_second+0xb8>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
         {
            /* Time to renew. Send a UNICAST to the DHCP server */
            dhc_set_state(iface,DHCS_RENEWING);
 401b704:	014001c4 	movi	r5,7
 401b708:	8809883a 	mov	r4,r17
 401b70c:	401a7180 	call	401a718 <dhc_set_state>
            e = dhc_reclaim(iface); /* unicast */ 
 401b710:	8809883a 	mov	r4,r17
 401b714:	401b1000 	call	401b100 <dhc_reclaim>
 401b718:	1021883a 	mov	r16,r2
            if (e)
 401b71c:	10002c1e 	bne	r2,zero,401b7d0 <dhc_second+0x2c8>
            {
               dtrap();
               return e;
            }
            dsc_renew++;
 401b720:	d0a82d17 	ldw	r2,-24396(gp)
 401b724:	10800044 	addi	r2,r2,1
 401b728:	d0a82d15 	stw	r2,-24396(gp)
 401b72c:	003fa406 	br	401b5c0 <dhc_second+0xb8>
         }
         break;
      case DHCS_REBINDING:
         /* Check for timeout. Retry if we didn't get a ACK/NAK response. */

         if ( (dhc_states[iface].lease*TPS+dhc_states[iface].lease_start) > cticks )
 401b730:	90800517 	ldw	r2,20(r18)
 401b734:	91000817 	ldw	r4,32(r18)
 401b738:	00c10134 	movhi	r3,1028
 401b73c:	18e93304 	addi	r3,r3,-23348
 401b740:	10801924 	muli	r2,r2,100
 401b744:	19400017 	ldw	r5,0(r3)
 401b748:	1105883a 	add	r2,r2,r4
 401b74c:	28bfd62e 	bgeu	r5,r2,401b6a8 <dhc_second+0x1a0>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
 401b750:	91000417 	ldw	r4,16(r18)
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
 401b754:	00c5dbc4 	movi	r3,5999
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
 401b758:	1105c83a 	sub	r2,r2,r4
 401b75c:	1004d07a 	srli	r2,r2,1
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
 401b760:	18800a2e 	bgeu	r3,r2,401b78c <dhc_second+0x284>
               half_time = 60*TPS;
            if ( dhc_states[iface].last_tick + half_time < cticks )
 401b764:	1105883a 	add	r2,r2,r4
 401b768:	117f952e 	bgeu	r2,r5,401b5c0 <dhc_second+0xb8>
            {
               dhc_request(iface,FALSE);
 401b76c:	8809883a 	mov	r4,r17
 401b770:	000b883a 	mov	r5,zero
 401b774:	401ac300 	call	401ac30 <dhc_request>
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 401b778:	8c400044 	addi	r17,r17,1
 401b77c:	00800104 	movi	r2,4
 401b780:	94800f04 	addi	r18,r18,60
 401b784:	88bf681e 	bne	r17,r2,401b528 <dhc_second+0x20>
 401b788:	003f9106 	br	401b5d0 <dhc_second+0xc8>
             */
            half_time = (dhc_states[iface].lease_start +
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
 401b78c:	0085dc04 	movi	r2,6000
               half_time = 60*TPS;
            if ( dhc_states[iface].last_tick + half_time < cticks )
 401b790:	1105883a 	add	r2,r2,r4
 401b794:	117f8a2e 	bgeu	r2,r5,401b5c0 <dhc_second+0xb8>
 401b798:	003ff406 	br	401b76c <dhc_second+0x264>
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
 401b79c:	00806404 	movi	r2,400
 401b7a0:	140c983a 	sll	r6,r2,r16
 401b7a4:	003faf06 	br	401b664 <dhc_second+0x15c>
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
            {
            case DHCS_SELECTING:
               dhc_discover(iface);
 401b7a8:	8809883a 	mov	r4,r17
 401b7ac:	401b29c0 	call	401b29c <dhc_discover>
 401b7b0:	003fb906 	br	401b698 <dhc_second+0x190>
               break;
            case DHCS_REQUESTING:
               dhc_request(iface,FALSE);
 401b7b4:	8809883a 	mov	r4,r17
 401b7b8:	000b883a 	mov	r5,zero
 401b7bc:	401ac300 	call	401ac30 <dhc_request>
 401b7c0:	003fb506 	br	401b698 <dhc_second+0x190>
               break;
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
 401b7c4:	8809883a 	mov	r4,r17
 401b7c8:	401b1000 	call	401b100 <dhc_reclaim>
 401b7cc:	003fb206 	br	401b698 <dhc_second+0x190>
             */
            dhc_set_state(iface,DHCS_REBINDING);
            e = dhc_request(iface,TRUE);  /* broadcast */
            if (e)
            {
               dtrap();
 401b7d0:	401c81c0 	call	401c81c <dtrap>
 401b7d4:	003f7f06 	br	401b5d4 <dhc_second+0xcc>

0401b7d8 <dhc_upcall>:
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
 401b7d8:	defff604 	addi	sp,sp,-40
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
 401b7dc:	00bfff44 	movi	r2,-3
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
 401b7e0:	dc400115 	stw	r17,4(sp)
 401b7e4:	dc000015 	stw	r16,0(sp)
 401b7e8:	dfc00915 	stw	ra,36(sp)
 401b7ec:	df000815 	stw	fp,32(sp)
 401b7f0:	ddc00715 	stw	r23,28(sp)
 401b7f4:	dd800615 	stw	r22,24(sp)
 401b7f8:	dd400515 	stw	r21,20(sp)
 401b7fc:	dd000415 	stw	r20,16(sp)
 401b800:	dcc00315 	stw	r19,12(sp)
 401b804:	dc800215 	stw	r18,8(sp)
 401b808:	2023883a 	mov	r17,r4
   struct bootp * bp;
   int      len      =  pkt->nb_plen;  /* len of UDP data - the bootp/dhcp struct */
 401b80c:	24000417 	ldw	r16,16(r4)
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
 401b810:	2880931e 	bne	r5,r2,401ba60 <dhc_upcall+0x288>
      dtrap();
      return ENP_LOGIC;    /* internal logic error */
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
 401b814:	21000617 	ldw	r4,24(r4)
   if (dhc_states[iface].state == DHCS_UNUSED)
 401b818:	05010134 	movhi	r20,1028
 401b81c:	a50be104 	addi	r20,r20,12164
      dtrap();
      return ENP_LOGIC;    /* internal logic error */
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
 401b820:	40184b80 	call	40184b8 <if_netnumber>
   if (dhc_states[iface].state == DHCS_UNUSED)
 401b824:	14800f24 	muli	r18,r2,60
      dtrap();
      return ENP_LOGIC;    /* internal logic error */
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
 401b828:	1027883a 	mov	r19,r2
   if (dhc_states[iface].state == DHCS_UNUSED)
 401b82c:	9505883a 	add	r2,r18,r20
 401b830:	10c00017 	ldw	r3,0(r2)
 401b834:	18001526 	beq	r3,zero,401b88c <dhc_upcall+0xb4>
      return ENP_NOT_MINE;

   bp = (struct bootp *)pkt->nb_prot;

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 401b838:	00803ac4 	movi	r2,235
   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
   if (dhc_states[iface].state == DHCS_UNUSED)
      return ENP_NOT_MINE;

   bp = (struct bootp *)pkt->nb_prot;
 401b83c:	8d400317 	ldw	r21,12(r17)

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 401b840:	14001436 	bltu	r2,r16,401b894 <dhc_upcall+0xbc>
       (bp->op != BOOTREPLY) ||
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
   {
      dtrap();
 401b844:	401c81c0 	call	401c81c <dtrap>
      dsc_errors++;
 401b848:	d0a82417 	ldw	r2,-24432(gp)
 401b84c:	01000084 	movi	r4,2
 401b850:	10800044 	addi	r2,r2,1
 401b854:	d0a82415 	stw	r2,-24432(gp)
      dhc_states[iface].t1    = DHC_INFINITY ;
   }

   udp_free(pkt);
   return 0;
}
 401b858:	2005883a 	mov	r2,r4
 401b85c:	dfc00917 	ldw	ra,36(sp)
 401b860:	df000817 	ldw	fp,32(sp)
 401b864:	ddc00717 	ldw	r23,28(sp)
 401b868:	dd800617 	ldw	r22,24(sp)
 401b86c:	dd400517 	ldw	r21,20(sp)
 401b870:	dd000417 	ldw	r20,16(sp)
 401b874:	dcc00317 	ldw	r19,12(sp)
 401b878:	dc800217 	ldw	r18,8(sp)
 401b87c:	dc400117 	ldw	r17,4(sp)
 401b880:	dc000017 	ldw	r16,0(sp)
 401b884:	dec00a04 	addi	sp,sp,40
 401b888:	f800283a 	ret
      dhc_set_state(iface,DHCS_BOUND);
      dhc_states[iface].t1    = DHC_INFINITY ;
   }

   udp_free(pkt);
   return 0;
 401b88c:	01000084 	movi	r4,2
 401b890:	003ff106 	br	401b858 <dhc_upcall+0x80>
      return ENP_NOT_MINE;

   bp = (struct bootp *)pkt->nb_prot;

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 401b894:	a8c00003 	ldbu	r3,0(r21)
 401b898:	00800084 	movi	r2,2
 401b89c:	18bfe91e 	bne	r3,r2,401b844 <dhc_upcall+0x6c>
 401b8a0:	a8c03b17 	ldw	r3,236(r21)
 401b8a4:	0098d534 	movhi	r2,25428
 401b8a8:	10a098c4 	addi	r2,r2,-32157
 401b8ac:	18bfe51e 	bne	r3,r2,401b844 <dhc_upcall+0x6c>
      dsc_errors++;
      return ENP_NOT_MINE;
   }

   /* punt offers or replys which are not for me */
   if(MEMCMP(bp->chaddr, pkt->net->mib.ifPhysAddress, pkt->net->n_hal))
 401b8b0:	88800617 	ldw	r2,24(r17)
 401b8b4:	a9000704 	addi	r4,r21,28
 401b8b8:	11801117 	ldw	r6,68(r2)
 401b8bc:	11401717 	ldw	r5,92(r2)
 401b8c0:	40308b80 	call	40308b8 <memcmp>
 401b8c4:	103ff11e 	bne	r2,zero,401b88c <dhc_upcall+0xb4>
      return ENP_NOT_MINE;    /* not an error, just ignore it */

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
 401b8c8:	af003c04 	addi	fp,r21,240
 401b8cc:	04000d44 	movi	r16,53
 401b8d0:	8009883a 	mov	r4,r16
 401b8d4:	e00b883a 	mov	r5,fp
 401b8d8:	401bc900 	call	401bc90 <find_opt>
 401b8dc:	1007883a 	mov	r3,r2
   if (opts && *opts == DHOP_TYPE)
 401b8e0:	10000226 	beq	r2,zero,401b8ec <dhc_upcall+0x114>
 401b8e4:	10800003 	ldbu	r2,0(r2)
 401b8e8:	14001e26 	beq	r2,r16,401b964 <dhc_upcall+0x18c>
   {
      dhcptype = *(opts+2);
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
 401b8ec:	002d883a 	mov	r22,zero
   }

   if (isdhcp(bp))
 401b8f0:	a8800003 	ldbu	r2,0(r21)
 401b8f4:	1080010c 	andi	r2,r2,4
 401b8f8:	10005c26 	beq	r2,zero,401ba6c <dhc_upcall+0x294>
   {
      switch (dhcptype)
 401b8fc:	00800104 	movi	r2,4
 401b900:	15801d16 	blt	r2,r22,401b978 <dhc_upcall+0x1a0>
 401b904:	008000c4 	movi	r2,3
 401b908:	b0801d0e 	bge	r22,r2,401b980 <dhc_upcall+0x1a8>
 401b90c:	00800044 	movi	r2,1
 401b910:	b0801b26 	beq	r22,r2,401b980 <dhc_upcall+0x1a8>
      case DHCP_RELEASE:
         dsc_errors++;     /* these should only be upcalled to a server */
         return ENP_NOT_MINE;
      }

      switch (dhc_states[iface].state)
 401b914:	9505883a 	add	r2,r18,r20
 401b918:	10800017 	ldw	r2,0(r2)
 401b91c:	00c00204 	movi	r3,8
 401b920:	18801c36 	bltu	r3,r2,401b994 <dhc_upcall+0x1bc>
 401b924:	1085883a 	add	r2,r2,r2
 401b928:	1085883a 	add	r2,r2,r2
 401b92c:	00c100b4 	movhi	r3,1026
 401b930:	18ee5004 	addi	r3,r3,-18112
 401b934:	10c5883a 	add	r2,r2,r3
 401b938:	11000017 	ldw	r4,0(r2)
 401b93c:	2000683a 	jmp	r4
 401b940:	0401b994 	movui	r16,1766
 401b944:	0401b980 	call	401b98 <OSCtxSw_SWITCH_PC+0x401b58>
 401b948:	0401b980 	call	401b98 <OSCtxSw_SWITCH_PC+0x401b58>
 401b94c:	0401b9b8 	rdprs	r16,zero,1766
 401b950:	0401b9f0 	cmpltui	r16,zero,1767
 401b954:	0401ba1c 	xori	r16,zero,1768
 401b958:	0401b980 	call	401b98 <OSCtxSw_SWITCH_PC+0x401b58>
 401b95c:	0401ba1c 	xori	r16,zero,1768
 401b960:	0401ba1c 	xori	r16,zero,1768
   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
   if (opts && *opts == DHOP_TYPE)
   {
      dhcptype = *(opts+2);
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
 401b964:	a8800003 	ldbu	r2,0(r21)

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
   if (opts && *opts == DHOP_TYPE)
   {
      dhcptype = *(opts+2);
 401b968:	1d800083 	ldbu	r22,2(r3)
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
 401b96c:	10800114 	ori	r2,r2,4
 401b970:	a8800005 	stb	r2,0(r21)
 401b974:	003fde06 	br	401b8f0 <dhc_upcall+0x118>
   }

   if (isdhcp(bp))
   {
      switch (dhcptype)
 401b978:	008001c4 	movi	r2,7
 401b97c:	b0bfe51e 	bne	r22,r2,401b914 <dhc_upcall+0x13c>
             * only receive ACK or NAK, and in REQUESTING state we
             * should only receive ACK or NAK or OFFER; these are
             * accounted for above, so we log whatever this is as an
             * error and discard it with no change to our state.
             */
            dsc_errors++;
 401b980:	d0a82417 	ldw	r2,-24432(gp)
 401b984:	01000084 	movi	r4,2
 401b988:	10800044 	addi	r2,r2,1
 401b98c:	d0a82415 	stw	r2,-24432(gp)
 401b990:	003fb106 	br	401b858 <dhc_upcall+0x80>
            return ENP_NOT_MINE;
         }
         break;
      default:    /* bad state */
         dtrap();
 401b994:	401c81c0 	call	401c81c <dtrap>
         dhc_set_state(iface,DHCS_INIT);
 401b998:	9809883a 	mov	r4,r19
 401b99c:	01400044 	movi	r5,1
 401b9a0:	401a7180 	call	401a718 <dhc_set_state>
         dsc_errors++;
 401b9a4:	d0a82417 	ldw	r2,-24432(gp)
 401b9a8:	013fffc4 	movi	r4,-1
 401b9ac:	10800044 	addi	r2,r2,1
 401b9b0:	d0a82415 	stw	r2,-24432(gp)
 401b9b4:	003fa806 	br	401b858 <dhc_upcall+0x80>
            dsc_rlyerrs++;
            dsc_errors++;
            return ENP_NOT_MINE;
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
 401b9b8:	01000144 	movi	r4,5
 401b9bc:	b1006626 	beq	r22,r4,401bb58 <dhc_upcall+0x380>
               dhc_states[iface].rly_ipaddr = 0;

            dhc_setip(iface);
            dhc_set_state(iface,DHCS_BOUND);
         }
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
 401b9c0:	00800184 	movi	r2,6
 401b9c4:	b0805d26 	beq	r22,r2,401bb3c <dhc_upcall+0x364>
         {
            /* In REQUESTING state, we might receive a retransmitted
             * OFFER, which we should discard, but it's not an error,
             * so we log it.
             */
            if ((dhc_states[iface].state == DHCS_REQUESTING) &&
 401b9c8:	9505883a 	add	r2,r18,r20
 401b9cc:	10c00017 	ldw	r3,0(r2)
 401b9d0:	193feb1e 	bne	r3,r4,401b980 <dhc_upcall+0x1a8>
 401b9d4:	00800084 	movi	r2,2
 401b9d8:	b0bfe91e 	bne	r22,r2,401b980 <dhc_upcall+0x1a8>
                (dhcptype == DHCP_OFFER))
            {
               dsc_offers++;
 401b9dc:	d0a82617 	ldw	r2,-24424(gp)
 401b9e0:	b009883a 	mov	r4,r22
 401b9e4:	10800044 	addi	r2,r2,1
 401b9e8:	d0a82615 	stw	r2,-24424(gp)
 401b9ec:	003f9a06 	br	401b858 <dhc_upcall+0x80>
            in responding, we might get OFFER pkts when are in BOUND state */
         dsc_errors++;     /* these should only be upcalled to a server */
         return ENP_NOT_MINE;
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
 401b9f0:	01000084 	movi	r4,2
 401b9f4:	b1003126 	beq	r22,r4,401babc <dhc_upcall+0x2e4>
             * Report an error and remain in SELECTING state, so that 
             * an OFFER packet from another DHCP server can be 
             * accepted. If we timeout waiting for a OFFER packet, 
             * then dhc_second() will transition to DHCS_INIT state. 
             */
            dsc_errors++;
 401b9f8:	d0a82417 	ldw	r2,-24432(gp)
            if ( dhcptype == DHCP_NAK ) 
 401b9fc:	00c00184 	movi	r3,6
             * Report an error and remain in SELECTING state, so that 
             * an OFFER packet from another DHCP server can be 
             * accepted. If we timeout waiting for a OFFER packet, 
             * then dhc_second() will transition to DHCS_INIT state. 
             */
            dsc_errors++;
 401ba00:	10800044 	addi	r2,r2,1
 401ba04:	d0a82415 	stw	r2,-24432(gp)
            if ( dhcptype == DHCP_NAK ) 
 401ba08:	b0ffa01e 	bne	r22,r3,401b88c <dhc_upcall+0xb4>
               dsc_naks++;
 401ba0c:	d0a82c17 	ldw	r2,-24400(gp)
 401ba10:	10800044 	addi	r2,r2,1
 401ba14:	d0a82c15 	stw	r2,-24400(gp)
 401ba18:	003f8f06 	br	401b858 <dhc_upcall+0x80>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
 401ba1c:	952f883a 	add	r23,r18,r20
 401ba20:	bc000d17 	ldw	r16,52(r23)
 401ba24:	e009883a 	mov	r4,fp
 401ba28:	401aa840 	call	401aa84 <dhc_get_srv_ipaddr>
 401ba2c:	80bfd41e 	bne	r16,r2,401b980 <dhc_upcall+0x1a8>
             dhc_get_srv_ipaddr(&bp->options[4]) )
         {
            dsc_errors++;
            return ENP_NOT_MINE;
         }
         if (dhc_states[iface].rly_ipaddr &&
 401ba30:	b8c00c17 	ldw	r3,48(r23)
 401ba34:	183fe026 	beq	r3,zero,401b9b8 <dhc_upcall+0x1e0>
 401ba38:	88800717 	ldw	r2,28(r17)
 401ba3c:	18bfde26 	beq	r3,r2,401b9b8 <dhc_upcall+0x1e0>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
         {
            dsc_rlyerrs++;
 401ba40:	d0e82f17 	ldw	r3,-24388(gp)
            dsc_errors++;
 401ba44:	d0a82417 	ldw	r2,-24432(gp)
 401ba48:	01000084 	movi	r4,2
            return ENP_NOT_MINE;
         }
         if (dhc_states[iface].rly_ipaddr &&
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
         {
            dsc_rlyerrs++;
 401ba4c:	18c00044 	addi	r3,r3,1
            dsc_errors++;
 401ba50:	10800044 	addi	r2,r2,1
            return ENP_NOT_MINE;
         }
         if (dhc_states[iface].rly_ipaddr &&
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
         {
            dsc_rlyerrs++;
 401ba54:	d0e82f15 	stw	r3,-24388(gp)
            dsc_errors++;
 401ba58:	d0a82415 	stw	r2,-24432(gp)
 401ba5c:	003f7e06 	br	401b858 <dhc_upcall+0x80>
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
   {
      dtrap();
 401ba60:	401c81c0 	call	401c81c <dtrap>
 401ba64:	013ffd44 	movi	r4,-11
 401ba68:	003f7b06 	br	401b858 <dhc_upcall+0x80>
         return -1;
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
 401ba6c:	d0a82917 	ldw	r2,-24412(gp)
      dhc_extract_opts(iface,&bp->options[4]);
 401ba70:	e00b883a 	mov	r5,fp
 401ba74:	9809883a 	mov	r4,r19
         return -1;
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
 401ba78:	10800044 	addi	r2,r2,1
 401ba7c:	d0a82915 	stw	r2,-24412(gp)
      dhc_extract_opts(iface,&bp->options[4]);
 401ba80:	401a7580 	call	401a758 <dhc_extract_opts>
      dhc_states[iface].ipaddr = bp->yiaddr;
 401ba84:	a8c00417 	ldw	r3,16(r21)
 401ba88:	9521883a 	add	r16,r18,r20
      dhc_setip(iface);
 401ba8c:	9809883a 	mov	r4,r19
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
      dhc_extract_opts(iface,&bp->options[4]);
      dhc_states[iface].ipaddr = bp->yiaddr;
 401ba90:	80c00915 	stw	r3,36(r16)
      dhc_setip(iface);
 401ba94:	401ab940 	call	401ab94 <dhc_setip>

      /* Set values so that DHCP State Machine remains happy */
      dhc_set_state(iface,DHCS_BOUND);
 401ba98:	01400184 	movi	r5,6
 401ba9c:	9809883a 	mov	r4,r19
 401baa0:	401a7180 	call	401a718 <dhc_set_state>
      dhc_states[iface].t1    = DHC_INFINITY ;
 401baa4:	00bfffc4 	movi	r2,-1
 401baa8:	80800615 	stw	r2,24(r16)
   }

   udp_free(pkt);
 401baac:	8809883a 	mov	r4,r17
 401bab0:	402bd000 	call	402bd00 <udp_free>
 401bab4:	0009883a 	mov	r4,zero
 401bab8:	003f6706 	br	401b858 <dhc_upcall+0x80>
         return ENP_NOT_MINE;
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
         {
            dsc_offers++;
 401babc:	d0a82617 	ldw	r2,-24424(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
 401bac0:	e009883a 	mov	r4,fp
 401bac4:	9521883a 	add	r16,r18,r20
         return ENP_NOT_MINE;
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
         {
            dsc_offers++;
 401bac8:	10800044 	addi	r2,r2,1
 401bacc:	d0a82615 	stw	r2,-24424(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
 401bad0:	401aa840 	call	401aa84 <dhc_get_srv_ipaddr>
 401bad4:	80800d15 	stw	r2,52(r16)
            if (dhc_states[iface].srv_ipaddr == 0 )
 401bad8:	1000061e 	bne	r2,zero,401baf4 <dhc_upcall+0x31c>
            {
               dtrap(); /* didn't receive server-identifier option */
 401badc:	401c81c0 	call	401c81c <dtrap>
               dsc_errors++;
 401bae0:	d0a82417 	ldw	r2,-24432(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 401bae4:	88c00717 	ldw	r3,28(r17)
            dsc_offers++;
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
            if (dhc_states[iface].srv_ipaddr == 0 )
            {
               dtrap(); /* didn't receive server-identifier option */
               dsc_errors++;
 401bae8:	10800044 	addi	r2,r2,1
 401baec:	d0a82415 	stw	r2,-24432(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 401baf0:	80c00d15 	stw	r3,52(r16)
            }

            if (bp->hops)
 401baf4:	a88000c3 	ldbu	r2,3(r21)
 401baf8:	10004826 	beq	r2,zero,401bc1c <dhc_upcall+0x444>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 401bafc:	88800717 	ldw	r2,28(r17)
 401bb00:	80800c15 	stw	r2,48(r16)
            }
            else
               dhc_states[iface].rly_ipaddr = 0;

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
 401bb04:	89800417 	ldw	r6,16(r17)
 401bb08:	a80b883a 	mov	r5,r21
 401bb0c:	9809883a 	mov	r4,r19
 401bb10:	401b1cc0 	call	401b1cc <dhc_rx_offer>
            if (e)
 401bb14:	10003d26 	beq	r2,zero,401bc0c <dhc_upcall+0x434>
            {
               dsc_errors++;
 401bb18:	d0a82417 	ldw	r2,-24432(gp)
               dhc_set_state(iface,DHCS_INIT);
 401bb1c:	01400044 	movi	r5,1
 401bb20:	9809883a 	mov	r4,r19
               dhc_states[iface].rly_ipaddr = 0;

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
            if (e)
            {
               dsc_errors++;
 401bb24:	1145883a 	add	r2,r2,r5
 401bb28:	d0a82415 	stw	r2,-24432(gp)
               dhc_set_state(iface,DHCS_INIT);
 401bb2c:	401a7180 	call	401a718 <dhc_set_state>
               dtrap();
 401bb30:	401c81c0 	call	401c81c <dtrap>
 401bb34:	01000084 	movi	r4,2
 401bb38:	003f4706 	br	401b858 <dhc_upcall+0x80>
            dhc_setip(iface);
            dhc_set_state(iface,DHCS_BOUND);
         }
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
         {
            dhc_set_state(iface,DHCS_INIT);
 401bb3c:	9809883a 	mov	r4,r19
 401bb40:	01400044 	movi	r5,1
 401bb44:	401a7180 	call	401a718 <dhc_set_state>
            dsc_naks++;
 401bb48:	d0a82c17 	ldw	r2,-24400(gp)
 401bb4c:	10800044 	addi	r2,r2,1
 401bb50:	d0a82c15 	stw	r2,-24400(gp)
 401bb54:	003fd506 	br	401baac <dhc_upcall+0x2d4>
            return ENP_NOT_MINE;
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
         {
            dsc_acks++;
 401bb58:	d0a82817 	ldw	r2,-24416(gp)
            dhc_extract_opts(iface,&bp->options[4]);
 401bb5c:	9809883a 	mov	r4,r19
 401bb60:	e00b883a 	mov	r5,fp
            return ENP_NOT_MINE;
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
         {
            dsc_acks++;
 401bb64:	10800044 	addi	r2,r2,1
 401bb68:	d0a82815 	stw	r2,-24416(gp)
            dhc_extract_opts(iface,&bp->options[4]);
 401bb6c:	401a7580 	call	401a758 <dhc_extract_opts>
            if ( dhc_states[iface].lease == DHC_INFINITY )
 401bb70:	9509883a 	add	r4,r18,r20
 401bb74:	20c00517 	ldw	r3,20(r4)
 401bb78:	00bfffc4 	movi	r2,-1
 401bb7c:	18801e26 	beq	r3,r2,401bbf8 <dhc_upcall+0x420>
               dhc_states[iface].t2 = DHC_INFINITY ;
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
 401bb80:	1804d0fa 	srli	r2,r3,3
               dhc_states[iface].t1 = DHC_INFINITY ;
               dhc_states[iface].t2 = DHC_INFINITY ;
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
 401bb84:	1806d07a 	srli	r3,r3,1
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
 401bb88:	108001e4 	muli	r2,r2,7
               dhc_states[iface].t1 = DHC_INFINITY ;
               dhc_states[iface].t2 = DHC_INFINITY ;
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
 401bb8c:	20c00615 	stw	r3,24(r4)
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
 401bb90:	20800715 	stw	r2,28(r4)
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
 401bb94:	00810134 	movhi	r2,1028
 401bb98:	10a93304 	addi	r2,r2,-23348
 401bb9c:	10c00017 	ldw	r3,0(r2)
 401bba0:	9521883a 	add	r16,r18,r20
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
 401bba4:	e009883a 	mov	r4,fp
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
 401bba8:	80c00815 	stw	r3,32(r16)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
 401bbac:	401aa840 	call	401aa84 <dhc_get_srv_ipaddr>
 401bbb0:	80800d15 	stw	r2,52(r16)
            if (dhc_states[iface].srv_ipaddr == 0 )
 401bbb4:	1000061e 	bne	r2,zero,401bbd0 <dhc_upcall+0x3f8>
            {
               dtrap(); /* didn't receive server-identifier option */
 401bbb8:	401c81c0 	call	401c81c <dtrap>
               dsc_errors++;
 401bbbc:	d0a82417 	ldw	r2,-24432(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 401bbc0:	88c00717 	ldw	r3,28(r17)
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
            if (dhc_states[iface].srv_ipaddr == 0 )
            {
               dtrap(); /* didn't receive server-identifier option */
               dsc_errors++;
 401bbc4:	10800044 	addi	r2,r2,1
 401bbc8:	d0a82415 	stw	r2,-24432(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 401bbcc:	80c00d15 	stw	r3,52(r16)
            }
            if (bp->hops)
 401bbd0:	a88000c3 	ldbu	r2,3(r21)
 401bbd4:	10000b26 	beq	r2,zero,401bc04 <dhc_upcall+0x42c>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 401bbd8:	88800717 	ldw	r2,28(r17)
 401bbdc:	80800c15 	stw	r2,48(r16)
            }
            else
               dhc_states[iface].rly_ipaddr = 0;

            dhc_setip(iface);
 401bbe0:	9809883a 	mov	r4,r19
 401bbe4:	401ab940 	call	401ab94 <dhc_setip>
            dhc_set_state(iface,DHCS_BOUND);
 401bbe8:	01400184 	movi	r5,6
 401bbec:	9809883a 	mov	r4,r19
 401bbf0:	401a7180 	call	401a718 <dhc_set_state>
 401bbf4:	003fad06 	br	401baac <dhc_upcall+0x2d4>
            dsc_acks++;
            dhc_extract_opts(iface,&bp->options[4]);
            if ( dhc_states[iface].lease == DHC_INFINITY )
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
               dhc_states[iface].t2 = DHC_INFINITY ;
 401bbf8:	20c00715 	stw	r3,28(r4)
         {
            dsc_acks++;
            dhc_extract_opts(iface,&bp->options[4]);
            if ( dhc_states[iface].lease == DHC_INFINITY )
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
 401bbfc:	20c00615 	stw	r3,24(r4)
 401bc00:	003fe406 	br	401bb94 <dhc_upcall+0x3bc>
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 401bc04:	80000c15 	stw	zero,48(r16)
 401bc08:	003ff506 	br	401bbe0 <dhc_upcall+0x408>
               dhc_set_state(iface,DHCS_INIT);
               dtrap();
               return ENP_NOT_MINE;
            }
            else
               dhc_set_state(iface,DHCS_REQUESTING);
 401bc0c:	9809883a 	mov	r4,r19
 401bc10:	01400144 	movi	r5,5
 401bc14:	401a7180 	call	401a718 <dhc_set_state>
 401bc18:	003fa406 	br	401baac <dhc_upcall+0x2d4>
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 401bc1c:	80000c15 	stw	zero,48(r16)
 401bc20:	003fb806 	br	401bb04 <dhc_upcall+0x32c>

0401bc24 <dhc_init>:
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
 401bc24:	defffe04 	addi	sp,sp,-8
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
 401bc28:	00bfff44 	movi	r2,-3
 401bc2c:	0009883a 	mov	r4,zero
 401bc30:	014010c4 	movi	r5,67
 401bc34:	01801104 	movi	r6,68
 401bc38:	01c100b4 	movhi	r7,1026
 401bc3c:	39edf604 	addi	r7,r7,-18472
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
 401bc40:	dfc00115 	stw	ra,4(sp)
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
 401bc44:	d8800015 	stw	r2,0(sp)
 401bc48:	401c4080 	call	401c408 <udp_open>
 401bc4c:	d0a82315 	stw	r2,-24436(gp)
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
 401bc50:	10000b26 	beq	r2,zero,401bc80 <dhc_init+0x5c>
 401bc54:	00810134 	movhi	r2,1028
 401bc58:	108be104 	addi	r2,r2,12164
 401bc5c:	10c03c04 	addi	r3,r2,240
      return ENP_RESOURCE;

   for (i = 0; i < MAXNETS; i++)
   {
      dhc_states[i].state = DHCS_UNUSED;
 401bc60:	10000015 	stw	zero,0(r2)
      dhc_states[i].tries = 0;
 401bc64:	10000115 	stw	zero,4(r2)
 401bc68:	10800f04 	addi	r2,r2,60
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
      return ENP_RESOURCE;

   for (i = 0; i < MAXNETS; i++)
 401bc6c:	10fffc1e 	bne	r2,r3,401bc60 <dhc_init+0x3c>
 401bc70:	0005883a 	mov	r2,zero
      dhc_states[i].state = DHCS_UNUSED;
      dhc_states[i].tries = 0;
   }

   return 0;
}
 401bc74:	dfc00117 	ldw	ra,4(sp)
 401bc78:	dec00204 	addi	sp,sp,8
 401bc7c:	f800283a 	ret
   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
 401bc80:	00bffa84 	movi	r2,-22
      dhc_states[i].state = DHCS_UNUSED;
      dhc_states[i].tries = 0;
   }

   return 0;
}
 401bc84:	dfc00117 	ldw	ra,4(sp)
 401bc88:	dec00204 	addi	sp,sp,8
 401bc8c:	f800283a 	ret

0401bc90 <find_opt>:
 */

u_char * 
find_opt(u_char opcode, u_char * opts)
{
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */
 401bc90:	28c04e04 	addi	r3,r5,312

   while (opts < end)
 401bc94:	28c00b2e 	bgeu	r5,r3,401bcc4 <find_opt+0x34>
   {
      if (*opts == opcode) /* found it */
 401bc98:	28800003 	ldbu	r2,0(r5)
 401bc9c:	21003fcc 	andi	r4,r4,255
 401bca0:	20800926 	beq	r4,r2,401bcc8 <find_opt+0x38>
         return opts;
      if (*opts == DHOP_END)  /* end of options; opcode not found */
 401bca4:	01803fc4 	movi	r6,255
 401bca8:	11800626 	beq	r2,r6,401bcc4 <find_opt+0x34>
         return NULL;
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
 401bcac:	1000081e 	bne	r2,zero,401bcd0 <find_opt+0x40>
         opts++;
 401bcb0:	29400044 	addi	r5,r5,1
u_char * 
find_opt(u_char opcode, u_char * opts)
{
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */

   while (opts < end)
 401bcb4:	28c0032e 	bgeu	r5,r3,401bcc4 <find_opt+0x34>
   {
      if (*opts == opcode) /* found it */
 401bcb8:	28800003 	ldbu	r2,0(r5)
 401bcbc:	11000226 	beq	r2,r4,401bcc8 <find_opt+0x38>
         return opts;
      if (*opts == DHOP_END)  /* end of options; opcode not found */
 401bcc0:	11bffa1e 	bne	r2,r6,401bcac <find_opt+0x1c>
u_char * 
find_opt(u_char opcode, u_char * opts)
{
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */

   while (opts < end)
 401bcc4:	000b883a 	mov	r5,zero
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
   }
   /* no DHOP_END option?? */
   return NULL;
}
 401bcc8:	2805883a 	mov	r2,r5
 401bccc:	f800283a 	ret
      if (*opts == DHOP_END)  /* end of options; opcode not found */
         return NULL;
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
         opts++;
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
 401bcd0:	28800043 	ldbu	r2,1(r5)
 401bcd4:	1145883a 	add	r2,r2,r5
 401bcd8:	11400084 	addi	r5,r2,2
 401bcdc:	003ff506 	br	401bcb4 <find_opt+0x24>

0401bce0 <pk_get_max_intrsafe_buf_len>:
 */

unsigned pk_get_max_intrsafe_buf_len(void)
{
   return bigbufsiz;
}
 401bce0:	d0a03a17 	ldw	r2,-32536(gp)
 401bce4:	f800283a 	ret

0401bce8 <dump_buf_estats>:
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
 401bce8:	defff904 	addi	sp,sp,-28
 401bcec:	dcc00515 	stw	r19,20(sp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
 401bcf0:	04c00084 	movi	r19,2
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
 401bcf4:	dc400415 	stw	r17,16(sp)
 401bcf8:	2023883a 	mov	r17,r4
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
 401bcfc:	9809883a 	mov	r4,r19
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
 401bd00:	dfc00615 	stw	ra,24(sp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
 401bd04:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   ENTER_CRIT_SECTION(&memestats);
 401bd08:	401c7c40 	call	401c7c4 <irq_Mask>
   MEMCPY (&mlocal, &memestats, sizeof(memestats));
 401bd0c:	00810134 	movhi	r2,1028
 401bd10:	108c2204 	addi	r2,r2,12424
 401bd14:	10c00017 	ldw	r3,0(r2)
 401bd18:	11800317 	ldw	r6,12(r2)
 401bd1c:	11000117 	ldw	r4,4(r2)
 401bd20:	11400217 	ldw	r5,8(r2)
 401bd24:	d8c00015 	stw	r3,0(sp)
 401bd28:	d9800315 	stw	r6,12(sp)
 401bd2c:	d9400215 	stw	r5,8(sp)
 401bd30:	d9000115 	stw	r4,4(sp)
   EXIT_CRIT_SECTION(&memestats);
 401bd34:	401c7a40 	call	401c7a4 <irq_Unmask>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401bd38:	9809883a 	mov	r4,r19
 401bd3c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   ns_printf(pio, "Regular buffer error statistics:\n");
 401bd40:	014100f4 	movhi	r5,1027
 401bd44:	29538604 	addi	r5,r5,19992
 401bd48:	8809883a 	mov	r4,r17
 401bd4c:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio, "Bad buffer length %lu, Guard band violations %lu\n",mlocal[BAD_REGULAR_BUF_LEN_ERR],mlocal[GUARD_BAND_VIOLATED_ERR]);
 401bd50:	d9800017 	ldw	r6,0(sp)
 401bd54:	d9c00117 	ldw	r7,4(sp)
 401bd58:	8809883a 	mov	r4,r17
 401bd5c:	014100f4 	movhi	r5,1027
 401bd60:	29538f04 	addi	r5,r5,20028
 401bd64:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio, "Multiple frees %lu, Inconsistent location %lu\n",mlocal[MULTIPLE_FREE_ERR],mlocal[INCONSISTENT_LOCATION_ERR]);
 401bd68:	d9800217 	ldw	r6,8(sp)
 401bd6c:	d9c00317 	ldw	r7,12(sp)
 401bd70:	8809883a 	mov	r4,r17
 401bd74:	014100f4 	movhi	r5,1027
 401bd78:	29539c04 	addi	r5,r5,20080
 401bd7c:	4019c700 	call	4019c70 <ns_printf>

   return 0;
}
 401bd80:	0005883a 	mov	r2,zero
 401bd84:	dfc00617 	ldw	ra,24(sp)
 401bd88:	dcc00517 	ldw	r19,20(sp)
 401bd8c:	dc400417 	ldw	r17,16(sp)
 401bd90:	dec00704 	addi	sp,sp,28
 401bd94:	f800283a 	ret

0401bd98 <pk_validate>:
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
 401bd98:	20800017 	ldw	r2,0(r4)
 * OUTPUT: 0 if the buffer being freed was successfully validated, or
 * -1 if the validation failed.
 */

int pk_validate(PACKET pkt)   /* check if pk_free() can free the pkt */
{
 401bd9c:	defffe04 	addi	sp,sp,-8
 401bda0:	dc000015 	stw	r16,0(sp)
 401bda4:	dfc00115 	stw	ra,4(sp)
 401bda8:	2021883a 	mov	r16,r4
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
 401bdac:	10000226 	beq	r2,zero,401bdb8 <pk_validate+0x20>
 401bdb0:	20800917 	ldw	r2,36(r4)
 401bdb4:	10004c1e 	bne	r2,zero,401bee8 <pk_validate+0x150>
   }
   else  
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
 401bdb8:	80c00217 	ldw	r3,8(r16)
 401bdbc:	d0a03a17 	ldw	r2,-32536(gp)
 401bdc0:	18802b26 	beq	r3,r2,401be70 <pk_validate+0xd8>
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
               return -1;
            }
         EXIT_CRIT_SECTION(&bigfreeq);
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
 401bdc4:	d0a03817 	ldw	r2,-32544(gp)
 401bdc8:	18803a1e 	bne	r3,r2,401beb4 <pk_validate+0x11c>
      {
         ENTER_CRIT_SECTION(&lilfreeq);
 401bdcc:	401c7c40 	call	401c7c4 <irq_Mask>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 401bdd0:	00810134 	movhi	r2,1028
 401bdd4:	108c1d04 	addi	r2,r2,12404
 401bdd8:	00000106 	br	401bde0 <pk_validate+0x48>
            if (p == pkt)
 401bddc:	80801326 	beq	r16,r2,401be2c <pk_validate+0x94>
         EXIT_CRIT_SECTION(&bigfreeq);
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
      {
         ENTER_CRIT_SECTION(&lilfreeq);
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 401bde0:	10800017 	ldw	r2,0(r2)
 401bde4:	103ffd1e 	bne	r2,zero,401bddc <pk_validate+0x44>
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
            EXIT_CRIT_SECTION(&lilfreeq);
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
            return -1;
         }
         EXIT_CRIT_SECTION(&lilfreeq);
 401bde8:	401c7a40 	call	401c7a4 <irq_Unmask>
#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
   {
      if (*(pkt->nb_buff - j) != 'M')
 401bdec:	81000117 	ldw	r4,4(r16)
 401bdf0:	00c01344 	movi	r3,77
 401bdf4:	20bfff04 	addi	r2,r4,-4
 401bdf8:	11800007 	ldb	r6,0(r2)
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
         return -1;
 401bdfc:	10800044 	addi	r2,r2,1
#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
   {
      if (*(pkt->nb_buff - j) != 'M')
 401be00:	30c0231e 	bne	r6,r3,401be90 <pk_validate+0xf8>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
 401be04:	20bffc1e 	bne	r4,r2,401bdf8 <pk_validate+0x60>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
         return -1;
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
 401be08:	80800217 	ldw	r2,8(r16)
 401be0c:	1105883a 	add	r2,r2,r4
 401be10:	10c00007 	ldb	r3,0(r2)
 401be14:	19801e1e 	bne	r3,r6,401be90 <pk_validate+0xf8>
 401be18:	0005883a 	mov	r2,zero
      return -1;
   }
#endif /* NPDEBUG */

   return 0;
}
 401be1c:	dfc00117 	ldw	ra,4(sp)
 401be20:	dc000017 	ldw	r16,0(sp)
 401be24:	dec00204 	addi	sp,sp,8
 401be28:	f800283a 	ret
      {
         ENTER_CRIT_SECTION(&lilfreeq);
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
            if (p == pkt)
         {
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
 401be2c:	800b883a 	mov	r5,r16
 401be30:	010100f4 	movhi	r4,1027
 401be34:	2113b204 	addi	r4,r4,20168
 401be38:	4002ed40 	call	4002ed4 <printf>
            EXIT_CRIT_SECTION(&lilfreeq);
 401be3c:	401c7a40 	call	401c7a4 <irq_Unmask>
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 401be40:	401c7c40 	call	401c7c4 <irq_Mask>
 401be44:	00c10134 	movhi	r3,1028
 401be48:	18cc2204 	addi	r3,r3,12424
 401be4c:	18800217 	ldw	r2,8(r3)
 401be50:	10800044 	addi	r2,r2,1
 401be54:	18800215 	stw	r2,8(r3)
 401be58:	401c7a40 	call	401c7a4 <irq_Unmask>
 401be5c:	00bfffc4 	movi	r2,-1
      return -1;
   }
#endif /* NPDEBUG */

   return 0;
}
 401be60:	dfc00117 	ldw	ra,4(sp)
 401be64:	dc000017 	ldw	r16,0(sp)
 401be68:	dec00204 	addi	sp,sp,8
 401be6c:	f800283a 	ret
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
      {
         ENTER_CRIT_SECTION(&bigfreeq);
 401be70:	401c7c40 	call	401c7c4 <irq_Mask>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 401be74:	00810134 	movhi	r2,1028
 401be78:	108c6204 	addi	r2,r2,12680
 401be7c:	00000106 	br	401be84 <pk_validate+0xec>
            if (p == pkt)
 401be80:	80801526 	beq	r16,r2,401bed8 <pk_validate+0x140>
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
      {
         ENTER_CRIT_SECTION(&bigfreeq);
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 401be84:	10800017 	ldw	r2,0(r2)
 401be88:	103ffd1e 	bne	r2,zero,401be80 <pk_validate+0xe8>
 401be8c:	003fd606 	br	401bde8 <pk_validate+0x50>
         return -1;
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
   {
      INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 401be90:	401c7c40 	call	401c7c4 <irq_Mask>
 401be94:	00c10134 	movhi	r3,1028
 401be98:	18cc2204 	addi	r3,r3,12424
 401be9c:	18800117 	ldw	r2,4(r3)
 401bea0:	10800044 	addi	r2,r2,1
 401bea4:	18800115 	stw	r2,4(r3)
 401bea8:	401c7a40 	call	401c7a4 <irq_Unmask>
 401beac:	00bfffc4 	movi	r2,-1
 401beb0:	003fda06 	br	401be1c <pk_validate+0x84>
         EXIT_CRIT_SECTION(&lilfreeq);
      }
      else
      {
         /* log an error */
         INCR_SHARED_VAR (memestats, BAD_REGULAR_BUF_LEN_ERR, 1);
 401beb4:	401c7c40 	call	401c7c4 <irq_Mask>
 401beb8:	00c10134 	movhi	r3,1028
 401bebc:	18cc2204 	addi	r3,r3,12424
 401bec0:	18800017 	ldw	r2,0(r3)
 401bec4:	10800044 	addi	r2,r2,1
 401bec8:	18800015 	stw	r2,0(r3)
 401becc:	401c7a40 	call	401c7a4 <irq_Unmask>
 401bed0:	00bfffc4 	movi	r2,-1
 401bed4:	003fd106 	br	401be1c <pk_validate+0x84>
      {
         ENTER_CRIT_SECTION(&bigfreeq);
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
            if (p == pkt)
            {
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
 401bed8:	800b883a 	mov	r5,r16
 401bedc:	010100f4 	movhi	r4,1027
 401bee0:	2113a804 	addi	r4,r4,20128
 401bee4:	003fd406 	br	401be38 <pk_validate+0xa0>
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
   {
      INCR_SHARED_VAR (memestats, INCONSISTENT_LOCATION_ERR, 1);   
 401bee8:	401c7c40 	call	401c7c4 <irq_Mask>
 401beec:	00c10134 	movhi	r3,1028
 401bef0:	18cc2204 	addi	r3,r3,12424
 401bef4:	18800317 	ldw	r2,12(r3)
 401bef8:	10800044 	addi	r2,r2,1
 401befc:	18800315 	stw	r2,12(r3)
 401bf00:	401c7a40 	call	401c7a4 <irq_Unmask>
 401bf04:	00bfffc4 	movi	r2,-1
 401bf08:	003fc406 	br	401be1c <pk_validate+0x84>

0401bf0c <pk_free>:
 *
 * OUTPUT: None.
 */

void pk_free(PACKET pkt)   /* PACKET to place in free queue */
{
 401bf0c:	defffe04 	addi	sp,sp,-8
 401bf10:	dc000015 	stw	r16,0(sp)
 401bf14:	dfc00115 	stw	ra,4(sp)
 401bf18:	2021883a 	mov	r16,r4
      PACKET pknext;
      pknext = pkt->pk_next;
#endif /* LINKED_PKTS */

      /* validate the pkt before freeing */
      e = pk_validate(pkt);
 401bf1c:	401bd980 	call	401bd98 <pk_validate>
      if (e)
 401bf20:	1000051e 	bne	r2,zero,401bf38 <pk_free+0x2c>
            continue; /* skip this pkt, examine the next pkt */
         }
#endif
         return;
      }
      if (pkt->inuse-- > 1)   /* more than 1 owner? */
 401bf24:	81000917 	ldw	r4,36(r16)
 401bf28:	00800044 	movi	r2,1
 401bf2c:	20ffffc4 	addi	r3,r4,-1
 401bf30:	80c00915 	stw	r3,36(r16)
 401bf34:	1100042e 	bgeu	r2,r4,401bf48 <pk_free+0x3c>
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
 401bf38:	dfc00117 	ldw	ra,4(sp)
 401bf3c:	dc000017 	ldw	r16,0(sp)
 401bf40:	dec00204 	addi	sp,sp,8
 401bf44:	f800283a 	ret
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
 401bf48:	80c00217 	ldw	r3,8(r16)
 401bf4c:	d0a03a17 	ldw	r2,-32536(gp)
            q_add(&bigfreeq, (qp)pkt);
 401bf50:	800b883a 	mov	r5,r16
 401bf54:	01010134 	movhi	r4,1028
 401bf58:	210c6204 	addi	r4,r4,12680
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
 401bf5c:	18800526 	beq	r3,r2,401bf74 <pk_free+0x68>
            q_add(&bigfreeq, (qp)pkt);
         else if (pkt->nb_blen == lilbufsiz)
 401bf60:	d0a03817 	ldw	r2,-32544(gp)
            q_add(&lilfreeq, (qp)pkt);
 401bf64:	800b883a 	mov	r5,r16
 401bf68:	01010134 	movhi	r4,1028
 401bf6c:	210c1d04 	addi	r4,r4,12404
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
            q_add(&bigfreeq, (qp)pkt);
         else if (pkt->nb_blen == lilbufsiz)
 401bf70:	18bff11e 	bne	r3,r2,401bf38 <pk_free+0x2c>
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
 401bf74:	dfc00117 	ldw	ra,4(sp)
 401bf78:	dc000017 	ldw	r16,0(sp)
 401bf7c:	dec00204 	addi	sp,sp,8
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
            q_add(&bigfreeq, (qp)pkt);
         else if (pkt->nb_blen == lilbufsiz)
            q_add(&lilfreeq, (qp)pkt);
 401bf80:	401c2941 	jmpi	401c294 <putq>

0401bf84 <pk_alloc>:

PACKET pk_alloc(unsigned len)
{
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
 401bf84:	d0a03a17 	ldw	r2,-32536(gp)
 * OUTPUT: 0 if the request cannot be satisfied, or a pointer to the struct
 * netbuf structure that corresponds to the just allocated data buffer.
 */

PACKET pk_alloc(unsigned len)
{
 401bf88:	deffff04 	addi	sp,sp,-4
 401bf8c:	dfc00015 	stw	ra,0(sp)
 401bf90:	2007883a 	mov	r3,r4
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
 401bf94:	000b883a 	mov	r5,zero
 401bf98:	1100042e 	bgeu	r2,r4,401bfac <pk_alloc+0x28>

   p->inuse = 1;  /* initially buffer in use by 1 user */

   /* note that 'type' and 'fhost' fields are not set in pk_alloc () */
   return(p);
}
 401bf9c:	2805883a 	mov	r2,r5
 401bfa0:	dfc00017 	ldw	ra,0(sp)
 401bfa4:	dec00104 	addi	sp,sp,4
 401bfa8:	f800283a 	ret
      return(NULL);
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
 401bfac:	d0a03817 	ldw	r2,-32544(gp)
 401bfb0:	01410134 	movhi	r5,1028
 401bfb4:	294c1d04 	addi	r5,r5,12404
         p = (PACKET)getq(&bigfreeq);
 401bfb8:	01010134 	movhi	r4,1028
 401bfbc:	210c6204 	addi	r4,r4,12680
      return(NULL);
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
 401bfc0:	10c00236 	bltu	r2,r3,401bfcc <pk_alloc+0x48>
 401bfc4:	28800217 	ldw	r2,8(r5)
 401bfc8:	10000e1e 	bne	r2,zero,401c004 <pk_alloc+0x80>
         p = (PACKET)getq(&bigfreeq);
      else
         p = (PACKET)getq(&lilfreeq);
 401bfcc:	401c2f40 	call	401c2f4 <getq>
 401bfd0:	100b883a 	mov	r5,r2

      if (!p)
 401bfd4:	103ff126 	beq	r2,zero,401bf9c <pk_alloc+0x18>
         return NULL;
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
 401bfd8:	00810134 	movhi	r2,1028
 401bfdc:	10a90c04 	addi	r2,r2,-23504
 401bfe0:	11000017 	ldw	r4,0(r2)
 401bfe4:	28c00117 	ldw	r3,4(r5)
   p->nexthop = NULL;      /* no next hop  */
   p->nb_pmtu = 1240;      /* Set minimum IPv6 Path MTU */
#endif   /* IP_V6 */
#endif /* LINKED_PKTS */

   p->inuse = 1;  /* initially buffer in use by 1 user */
 401bfe8:	00800044 	movi	r2,1
 401bfec:	28800915 	stw	r2,36(r5)

      if (!p)
         return NULL;
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
 401bff0:	1907883a 	add	r3,r3,r4
   p->nb_plen = 0;   /* no protocol data there yet */
 401bff4:	28000415 	stw	zero,16(r5)
   p->net = NULL;
 401bff8:	28000615 	stw	zero,24(r5)

      if (!p)
         return NULL;
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
 401bffc:	28c00315 	stw	r3,12(r5)
 401c000:	003fe606 	br	401bf9c <pk_alloc+0x18>
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
         p = (PACKET)getq(&bigfreeq);
      else
         p = (PACKET)getq(&lilfreeq);
 401c004:	2809883a 	mov	r4,r5
 401c008:	003ff006 	br	401bfcc <pk_alloc+0x48>

0401c00c <pk_init>:

int pk_init (void)
{
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
 401c00c:	d0e03917 	ldw	r3,-32540(gp)
 401c010:	d1203717 	ldw	r4,-32548(gp)
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
 401c014:	defffa04 	addi	sp,sp,-24
 401c018:	dd000415 	stw	r20,16(sp)
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
 401c01c:	1929883a 	add	r20,r3,r4
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
 401c020:	dfc00515 	stw	ra,20(sp)
 401c024:	dcc00315 	stw	r19,12(sp)
 401c028:	dc800215 	stw	r18,8(sp)
 401c02c:	dc400115 	stw	r17,4(sp)
 401c030:	dc000015 	stw	r16,0(sp)
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
 401c034:	a0004b26 	beq	r20,zero,401c164 <pk_init+0x158>
 401c038:	0025883a 	mov	r18,zero
 401c03c:	04c10134 	movhi	r19,1028
 401c040:	9ccc2604 	addi	r19,r19,12440
 401c044:	04401344 	movi	r17,77
 401c048:	00001d06 	br	401c0c0 <pk_init+0xb4>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
 401c04c:	d1203a17 	ldw	r4,-32536(gp)
 401c050:	21000144 	addi	r4,r4,5
 401c054:	401ce980 	call	401ce98 <ncpalloc>
#endif
#endif
         if (!(packet->nb_buff))
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
 401c058:	800b883a 	mov	r5,r16
 401c05c:	01010134 	movhi	r4,1028
 401c060:	210c6204 	addi	r4,r4,12680
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
 401c064:	80800115 	stw	r2,4(r16)
            if (!(packet->nb_buff))
 401c068:	10004626 	beq	r2,zero,401c184 <pk_init+0x178>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 401c06c:	14400005 	stb	r17,0(r2)
 401c070:	80800117 	ldw	r2,4(r16)
 401c074:	14400045 	stb	r17,1(r2)
 401c078:	80c00117 	ldw	r3,4(r16)
 401c07c:	1c400085 	stb	r17,2(r3)
 401c080:	80800117 	ldw	r2,4(r16)
 401c084:	144000c5 	stb	r17,3(r2)

            *(packet->nb_buff + bigbufsiz + ALIGN_TYPE) = 'M';
 401c088:	80c00117 	ldw	r3,4(r16)
 401c08c:	d0a03a17 	ldw	r2,-32536(gp)
 401c090:	1887883a 	add	r3,r3,r2
 401c094:	1c400105 	stb	r17,4(r3)
            packet->nb_buff += ALIGN_TYPE;   /* bump buf past MMs */
 401c098:	80800117 	ldw	r2,4(r16)
 401c09c:	10800104 	addi	r2,r2,4
 401c0a0:	80800115 	stw	r2,4(r16)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 401c0a4:	10003726 	beq	r2,zero,401c184 <pk_init+0x178>
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
 401c0a8:	d0a03a17 	ldw	r2,-32536(gp)
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
 401c0ac:	94800044 	addi	r18,r18,1
 401c0b0:	9cc00104 	addi	r19,r19,4
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
 401c0b4:	80800215 	stw	r2,8(r16)
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
 401c0b8:	401c2940 	call	401c294 <putq>
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
 401c0bc:	a4802726 	beq	r20,r18,401c15c <pk_init+0x150>
   {
      packet = (PACKET)NB_ALLOC(sizeof(struct netbuf));
 401c0c0:	01000d04 	movi	r4,52
 401c0c4:	401cdc80 	call	401cdc8 <npalloc>
 401c0c8:	1021883a 	mov	r16,r2
      if (packet == NULL)
 401c0cc:	10002d26 	beq	r2,zero,401c184 <pk_init+0x178>
         goto no_pkt_buf;

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
 401c0d0:	00800f04 	movi	r2,60
 401c0d4:	90803926 	beq	r18,r2,401c1bc <pk_init+0x1b0>
      pktlog[i] = packet;     /* save for debugging */
#endif

      packet->nb_tstamp = 0L;

      if (i < bigbufs)
 401c0d8:	d0a03917 	ldw	r2,-32540(gp)
      if (i >= MAXPACKETS)
      {
         dprintf("pk_init: bad define\n");
         return -1;
      }
      pktlog[i] = packet;     /* save for debugging */
 401c0dc:	9c000015 	stw	r16,0(r19)
#endif

      packet->nb_tstamp = 0L;
 401c0e0:	80000515 	stw	zero,20(r16)

      if (i < bigbufs)
 401c0e4:	90bfd936 	bltu	r18,r2,401c04c <pk_init+0x40>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
 401c0e8:	d1203817 	ldw	r4,-32544(gp)
 401c0ec:	21000144 	addi	r4,r4,5
 401c0f0:	401ce980 	call	401ce98 <ncpalloc>
#endif
#endif
         if (!(packet->nb_buff))
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
         q_add(&lilfreeq, packet);        /* save it in little free queue */
 401c0f4:	800b883a 	mov	r5,r16
 401c0f8:	01010134 	movhi	r4,1028
 401c0fc:	210c1d04 	addi	r4,r4,12404
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
 401c100:	80800115 	stw	r2,4(r16)
            if (!(packet->nb_buff))
 401c104:	10001f26 	beq	r2,zero,401c184 <pk_init+0x178>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 401c108:	14400005 	stb	r17,0(r2)
 401c10c:	80800117 	ldw	r2,4(r16)
 401c110:	14400045 	stb	r17,1(r2)
 401c114:	80c00117 	ldw	r3,4(r16)
 401c118:	1c400085 	stb	r17,2(r3)
 401c11c:	80800117 	ldw	r2,4(r16)
 401c120:	144000c5 	stb	r17,3(r2)

            *(packet->nb_buff + lilbufsiz + ALIGN_TYPE) = 'M';
 401c124:	80c00117 	ldw	r3,4(r16)
 401c128:	d0a03817 	ldw	r2,-32544(gp)
 401c12c:	1887883a 	add	r3,r3,r2
 401c130:	1c400105 	stb	r17,4(r3)
            packet->nb_buff += ALIGN_TYPE;
 401c134:	80800117 	ldw	r2,4(r16)
 401c138:	10800104 	addi	r2,r2,4
 401c13c:	80800115 	stw	r2,4(r16)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 401c140:	10001026 	beq	r2,zero,401c184 <pk_init+0x178>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
 401c144:	d0a03817 	ldw	r2,-32544(gp)
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
 401c148:	94800044 	addi	r18,r18,1
 401c14c:	9cc00104 	addi	r19,r19,4
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
 401c150:	80800215 	stw	r2,8(r16)
         q_add(&lilfreeq, packet);        /* save it in little free queue */
 401c154:	401c2940 	call	401c294 <putq>
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
 401c158:	a4bfd91e 	bne	r20,r18,401c0c0 <pk_init+0xb4>
 401c15c:	d0e03917 	ldw	r3,-32540(gp)
 401c160:	d1203717 	ldw	r4,-32548(gp)
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
         q_add(&lilfreeq, packet);        /* save it in little free queue */
      }
   }
   bigfreeq.q_min = bigbufs;
 401c164:	00810134 	movhi	r2,1028
 401c168:	108c6204 	addi	r2,r2,12680
 401c16c:	10c00415 	stw	r3,16(r2)
   lilfreeq.q_min = lilbufs;
 401c170:	000b883a 	mov	r5,zero
 401c174:	00c10134 	movhi	r3,1028
 401c178:	18cc1d04 	addi	r3,r3,12404
 401c17c:	19000415 	stw	r4,16(r3)
 401c180:	00000506 	br	401c198 <pk_init+0x18c>

   return 0;

no_pkt_buf:
#ifdef NPDEBUG
   dprintf("Netinit: calloc failed getting buffer %d\n", i);
 401c184:	900b883a 	mov	r5,r18
 401c188:	010100f4 	movhi	r4,1027
 401c18c:	2113c104 	addi	r4,r4,20228
 401c190:	4002ed40 	call	4002ed4 <printf>
 401c194:	017fffc4 	movi	r5,-1
#endif
   return(-1);
}
 401c198:	2805883a 	mov	r2,r5
 401c19c:	dfc00517 	ldw	ra,20(sp)
 401c1a0:	dd000417 	ldw	r20,16(sp)
 401c1a4:	dcc00317 	ldw	r19,12(sp)
 401c1a8:	dc800217 	ldw	r18,8(sp)
 401c1ac:	dc400117 	ldw	r17,4(sp)
 401c1b0:	dc000017 	ldw	r16,0(sp)
 401c1b4:	dec00604 	addi	sp,sp,24
 401c1b8:	f800283a 	ret
         goto no_pkt_buf;

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
      {
         dprintf("pk_init: bad define\n");
 401c1bc:	010100f4 	movhi	r4,1027
 401c1c0:	2113bc04 	addi	r4,r4,20208
 401c1c4:	4002fec0 	call	4002fec <puts>
 401c1c8:	017fffc4 	movi	r5,-1
 401c1cc:	003ff206 	br	401c198 <pk_init+0x18c>

0401c1d0 <qdel>:
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
 401c1d0:	defffc04 	addi	sp,sp,-16
 401c1d4:	dc400215 	stw	r17,8(sp)
 401c1d8:	dc000115 	stw	r16,4(sp)
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
 401c1dc:	d9000015 	stw	r4,0(sp)
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
 401c1e0:	dfc00315 	stw	ra,12(sp)
 401c1e4:	2823883a 	mov	r17,r5
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
 401c1e8:	401c7c40 	call	401c7c4 <irq_Mask>
   qptr = q->q_head;
 401c1ec:	d9000017 	ldw	r4,0(sp)
 401c1f0:	24000017 	ldw	r16,0(r4)
   qlast = NULL;
   while (qptr)
 401c1f4:	80000626 	beq	r16,zero,401c210 <qdel+0x40>
   {
      if (qptr == (qp)elt)
 401c1f8:	8440031e 	bne	r16,r17,401c208 <qdel+0x38>
 401c1fc:	00002106 	br	401c284 <qdel+0xb4>
 401c200:	1c400b26 	beq	r3,r17,401c230 <qdel+0x60>
         /* fix queue counters */
         q->q_len--;
         if (q->q_len < q->q_min)
            q->q_min = q->q_len;
         EXIT_CRIT_SECTION(q);   /* restore int state */
         return (qp)elt;   /* success exit point */
 401c204:	1821883a 	mov	r16,r3
      }
      qlast = qptr;
      qptr = qptr->qe_next;
 401c208:	80c00017 	ldw	r3,0(r16)

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
   qptr = q->q_head;
   qlast = NULL;
   while (qptr)
 401c20c:	183ffc1e 	bne	r3,zero,401c200 <qdel+0x30>
         return (qp)elt;   /* success exit point */
      }
      qlast = qptr;
      qptr = qptr->qe_next;
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
 401c210:	401c7a40 	call	401c7a4 <irq_Unmask>
 401c214:	0021883a 	mov	r16,zero
   return NULL;   /* item not found in queue */
}
 401c218:	8005883a 	mov	r2,r16
 401c21c:	dfc00317 	ldw	ra,12(sp)
 401c220:	dc400217 	ldw	r17,8(sp)
 401c224:	dc000117 	ldw	r16,4(sp)
 401c228:	dec00404 	addi	sp,sp,16
 401c22c:	f800283a 	ret
   {
      if (qptr == (qp)elt)
      {
         /* found our item; dequeue it */
         if (qlast)
            qlast->qe_next = qptr->qe_next;
 401c230:	18800017 	ldw	r2,0(r3)
 401c234:	800b883a 	mov	r5,r16
 401c238:	80800015 	stw	r2,0(r16)
 401c23c:	1821883a 	mov	r16,r3
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
 401c240:	20800117 	ldw	r2,4(r4)
 401c244:	14000d26 	beq	r2,r16,401c27c <qdel+0xac>
            q->q_tail = qlast;

         /* fix queue counters */
         q->q_len--;
 401c248:	20800217 	ldw	r2,8(r4)
         if (q->q_len < q->q_min)
 401c24c:	20c00417 	ldw	r3,16(r4)
         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
            q->q_tail = qlast;

         /* fix queue counters */
         q->q_len--;
 401c250:	10bfffc4 	addi	r2,r2,-1
 401c254:	20800215 	stw	r2,8(r4)
         if (q->q_len < q->q_min)
 401c258:	10c0010e 	bge	r2,r3,401c260 <qdel+0x90>
            q->q_min = q->q_len;
 401c25c:	20800415 	stw	r2,16(r4)
         EXIT_CRIT_SECTION(q);   /* restore int state */
 401c260:	401c7a40 	call	401c7a4 <irq_Unmask>
      qlast = qptr;
      qptr = qptr->qe_next;
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
   return NULL;   /* item not found in queue */
}
 401c264:	8005883a 	mov	r2,r16
 401c268:	dfc00317 	ldw	ra,12(sp)
 401c26c:	dc400217 	ldw	r17,8(sp)
 401c270:	dc000117 	ldw	r16,4(sp)
 401c274:	dec00404 	addi	sp,sp,16
 401c278:	f800283a 	ret
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
            q->q_tail = qlast;
 401c27c:	21400115 	stw	r5,4(r4)
 401c280:	003ff106 	br	401c248 <qdel+0x78>
      {
         /* found our item; dequeue it */
         if (qlast)
            qlast->qe_next = qptr->qe_next;
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;
 401c284:	80800017 	ldw	r2,0(r16)
 401c288:	000b883a 	mov	r5,zero
 401c28c:	20800015 	stw	r2,0(r4)
 401c290:	003feb06 	br	401c240 <qdel+0x70>

0401c294 <putq>:

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
 401c294:	defffd04 	addi	sp,sp,-12
   ENTER_CRIT_SECTION(q);
 401c298:	d9000015 	stw	r4,0(sp)
 401c29c:	d9400115 	stw	r5,4(sp)

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
 401c2a0:	dfc00215 	stw	ra,8(sp)
   ENTER_CRIT_SECTION(q);
 401c2a4:	401c7c40 	call	401c7c4 <irq_Mask>
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
 401c2a8:	d9400117 	ldw	r5,4(sp)
 401c2ac:	d9000017 	ldw	r4,0(sp)
 401c2b0:	28000015 	stw	zero,0(r5)
 401c2b4:	20800017 	ldw	r2,0(r4)
 401c2b8:	10000c26 	beq	r2,zero,401c2ec <putq+0x58>
 401c2bc:	20800117 	ldw	r2,4(r4)
 401c2c0:	11400015 	stw	r5,0(r2)
 401c2c4:	20800217 	ldw	r2,8(r4)
 401c2c8:	20c00317 	ldw	r3,12(r4)
 401c2cc:	21400115 	stw	r5,4(r4)
 401c2d0:	10800044 	addi	r2,r2,1
 401c2d4:	20800215 	stw	r2,8(r4)
 401c2d8:	1880010e 	bge	r3,r2,401c2e0 <putq+0x4c>
 401c2dc:	20800315 	stw	r2,12(r4)
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
}
 401c2e0:	dfc00217 	ldw	ra,8(sp)
 401c2e4:	dec00304 	addi	sp,sp,12
{
   ENTER_CRIT_SECTION(q);
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
 401c2e8:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
   ENTER_CRIT_SECTION(q);
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
 401c2ec:	21400015 	stw	r5,0(r4)
 401c2f0:	003ff406 	br	401c2c4 <putq+0x30>

0401c2f4 <getq>:
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
 401c2f4:	defffd04 	addi	sp,sp,-12
 401c2f8:	dc000115 	stw	r16,4(sp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
 401c2fc:	d9000015 	stw	r4,0(sp)
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
 401c300:	dfc00215 	stw	ra,8(sp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
 401c304:	401c7c40 	call	401c7c4 <irq_Mask>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
 401c308:	d9000017 	ldw	r4,0(sp)
 401c30c:	24000017 	ldw	r16,0(r4)
 401c310:	80001326 	beq	r16,zero,401c360 <getq+0x6c>
   {
      EXIT_CRIT_SECTION(q);
      return (0);             /* yes, show none */
   }

   q->q_head = temp->qe_next; /* else unlink */
 401c314:	80800017 	ldw	r2,0(r16)
 401c318:	20800015 	stw	r2,0(r4)
   temp->qe_next = 0;         /* avoid dangling pointers */
 401c31c:	80000015 	stw	zero,0(r16)
   if (q->q_head == 0)        /* queue empty? */
 401c320:	10000d26 	beq	r2,zero,401c358 <getq+0x64>
      q->q_tail = 0;          /* yes, update tail pointer too */
   q->q_len--;                /* update queue length */
 401c324:	20800217 	ldw	r2,8(r4)
   if (q->q_len < q->q_min)
 401c328:	20c00417 	ldw	r3,16(r4)

   q->q_head = temp->qe_next; /* else unlink */
   temp->qe_next = 0;         /* avoid dangling pointers */
   if (q->q_head == 0)        /* queue empty? */
      q->q_tail = 0;          /* yes, update tail pointer too */
   q->q_len--;                /* update queue length */
 401c32c:	10bfffc4 	addi	r2,r2,-1
 401c330:	20800215 	stw	r2,8(r4)
   if (q->q_len < q->q_min)
 401c334:	10c00616 	blt	r2,r3,401c350 <getq+0x5c>
      q->q_min = q->q_len;

   QUEUE_CHECK(q);         /* make sure queue is not corrupted */

   EXIT_CRIT_SECTION(q);   /* restore caller's int state */
 401c338:	401c7a40 	call	401c7a4 <irq_Unmask>

   return ((void*)temp);
 401c33c:	8005883a 	mov	r2,r16
}
 401c340:	dfc00217 	ldw	ra,8(sp)
 401c344:	dc000117 	ldw	r16,4(sp)
 401c348:	dec00304 	addi	sp,sp,12
 401c34c:	f800283a 	ret
   temp->qe_next = 0;         /* avoid dangling pointers */
   if (q->q_head == 0)        /* queue empty? */
      q->q_tail = 0;          /* yes, update tail pointer too */
   q->q_len--;                /* update queue length */
   if (q->q_len < q->q_min)
      q->q_min = q->q_len;
 401c350:	20800415 	stw	r2,16(r4)
 401c354:	003ff806 	br	401c338 <getq+0x44>
   }

   q->q_head = temp->qe_next; /* else unlink */
   temp->qe_next = 0;         /* avoid dangling pointers */
   if (q->q_head == 0)        /* queue empty? */
      q->q_tail = 0;          /* yes, update tail pointer too */
 401c358:	20000115 	stw	zero,4(r4)
 401c35c:	003ff106 	br	401c324 <getq+0x30>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
   {
      EXIT_CRIT_SECTION(q);
 401c360:	401c7a40 	call	401c7a4 <irq_Unmask>
 401c364:	0005883a 	mov	r2,zero
 401c368:	003ff506 	br	401c340 <getq+0x4c>

0401c36c <udp_close>:
 * RETURNS: void
 */

void
udp_close(UDPCONN con)
{
 401c36c:	defffe04 	addi	sp,sp,-8
 401c370:	dc000015 	stw	r16,0(sp)
 401c374:	dfc00115 	stw	ra,4(sp)
 401c378:	2021883a 	mov	r16,r4
   UDPCONN pcon;
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
 401c37c:	20001226 	beq	r4,zero,401c3c8 <udp_close+0x5c>
 401c380:	d0a83017 	ldw	r2,-24384(gp)
 401c384:	10001026 	beq	r2,zero,401c3c8 <udp_close+0x5c>
      dtrap(); /* bad programming! */
      return;
   }
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 401c388:	0009883a 	mov	r4,zero
 401c38c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 401c390:	d0e83017 	ldw	r3,-24384(gp)
 401c394:	18000626 	beq	r3,zero,401c3b0 <udp_close+0x44>
   {
      if (pcon == con)  /* found connection to delete */
 401c398:	80c0031e 	bne	r16,r3,401c3a8 <udp_close+0x3c>
 401c39c:	00001706 	br	401c3fc <udp_close+0x90>
 401c3a0:	80800d26 	beq	r16,r2,401c3d8 <udp_close+0x6c>
      break;
 401c3a4:	1007883a 	mov	r3,r2
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 401c3a8:	18800017 	ldw	r2,0(r3)
 401c3ac:	103ffc1e 	bne	r2,zero,401c3a0 <udp_close+0x34>
      lcon = pcon;   /* remember last connection */
   }

   if (!pcon)
   {
      dtrap(); /* prog error - connenction not in list */
 401c3b0:	401c81c0 	call	401c81c <dtrap>
      lcon->u_next = con->u_next;   /* unlink */
   else
      firstudp = con->u_next; /* remove from head */

   UC_FREE(con);  /* free memory for structure */
   UNLOCK_NET_RESOURCE(NET_RESID);
 401c3b4:	0009883a 	mov	r4,zero
}
 401c3b8:	dfc00117 	ldw	ra,4(sp)
 401c3bc:	dc000017 	ldw	r16,0(sp)
 401c3c0:	dec00204 	addi	sp,sp,8
      lcon->u_next = con->u_next;   /* unlink */
   else
      firstudp = con->u_next; /* remove from head */

   UC_FREE(con);  /* free memory for structure */
   UNLOCK_NET_RESOURCE(NET_RESID);
 401c3c4:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>
}
 401c3c8:	dfc00117 	ldw	ra,4(sp)
 401c3cc:	dc000017 	ldw	r16,0(sp)
 401c3d0:	dec00204 	addi	sp,sp,8
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
   {
      dtrap(); /* bad programming! */
 401c3d4:	401c81c1 	jmpi	401c81c <dtrap>
      UNLOCK_NET_RESOURCE(NET_RESID);
      return;
   }

   if (lcon)   /* in con is not head of list */
      lcon->u_next = con->u_next;   /* unlink */
 401c3d8:	80800017 	ldw	r2,0(r16)
 401c3dc:	18800015 	stw	r2,0(r3)
   else
      firstudp = con->u_next; /* remove from head */

   UC_FREE(con);  /* free memory for structure */
 401c3e0:	8009883a 	mov	r4,r16
 401c3e4:	401cce40 	call	401cce4 <npfree>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401c3e8:	0009883a 	mov	r4,zero
}
 401c3ec:	dfc00117 	ldw	ra,4(sp)
 401c3f0:	dc000017 	ldw	r16,0(sp)
 401c3f4:	dec00204 	addi	sp,sp,8
      lcon->u_next = con->u_next;   /* unlink */
   else
      firstudp = con->u_next; /* remove from head */

   UC_FREE(con);  /* free memory for structure */
   UNLOCK_NET_RESOURCE(NET_RESID);
 401c3f8:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>
   }

   if (lcon)   /* in con is not head of list */
      lcon->u_next = con->u_next;   /* unlink */
   else
      firstudp = con->u_next; /* remove from head */
 401c3fc:	80800017 	ldw	r2,0(r16)
 401c400:	d0a83015 	stw	r2,-24384(gp)
 401c404:	003ff606 	br	401c3e0 <udp_close+0x74>

0401c408 <udp_open>:
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
 401c408:	defff404 	addi	sp,sp,-48
 401c40c:	dd000815 	stw	r20,32(sp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
 401c410:	05010134 	movhi	r20,1028
 401c414:	a5290e04 	addi	r20,r20,-23496
 401c418:	a0800017 	ldw	r2,0(r20)
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
 401c41c:	dd800a15 	stw	r22,40(sp)
 401c420:	dd400915 	stw	r21,36(sp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
 401c424:	1080010c 	andi	r2,r2,4
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
 401c428:	dcc00715 	stw	r19,28(sp)
 401c42c:	dc800615 	stw	r18,24(sp)
 401c430:	dc400515 	stw	r17,20(sp)
 401c434:	dfc00b15 	stw	ra,44(sp)
 401c438:	dc000415 	stw	r16,16(sp)
 401c43c:	2023883a 	mov	r17,r4
 401c440:	382b883a 	mov	r21,r7
 401c444:	2827883a 	mov	r19,r5
 401c448:	3025883a 	mov	r18,r6
 401c44c:	dd800c17 	ldw	r22,48(sp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
 401c450:	1000371e 	bne	r2,zero,401c530 <udp_open+0x128>
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 401c454:	0009883a 	mov	r4,zero
 401c458:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   ocon = NULL;
   for (con = firstudp; con; con = con->u_next)
 401c45c:	d0e83017 	ldw	r3,-24384(gp)
 401c460:	18004526 	beq	r3,zero,401c578 <udp_open+0x170>
 401c464:	923fffcc 	andi	r8,r18,65535
 401c468:	993fffcc 	andi	r4,r19,65535
 401c46c:	00000306 	br	401c47c <udp_open+0x74>
 401c470:	18800017 	ldw	r2,0(r3)
 401c474:	10001026 	beq	r2,zero,401c4b8 <udp_open+0xb0>
 401c478:	1007883a 	mov	r3,r2
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
 401c47c:	1880018b 	ldhu	r2,6(r3)
 401c480:	40bffb1e 	bne	r8,r2,401c470 <udp_open+0x68>
 401c484:	1880020b 	ldhu	r2,8(r3)
 401c488:	20bff91e 	bne	r4,r2,401c470 <udp_open+0x68>
 401c48c:	18800317 	ldw	r2,12(r3)
 401c490:	103ff71e 	bne	r2,zero,401c470 <udp_open+0x68>
 401c494:	18800417 	ldw	r2,16(r3)
 401c498:	88bff51e 	bne	r17,r2,401c470 <udp_open+0x68>
          con->u_lhost == 0 && con->u_fhost == fhost)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
 401c49c:	a0800017 	ldw	r2,0(r20)
 401c4a0:	1080050c 	andi	r2,r2,20
 401c4a4:	10003d1e 	bne	r2,zero,401c59c <udp_open+0x194>
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
         dprintf("UDP: Couldn't allocate conn storage.\n");
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 401c4a8:	0009883a 	mov	r4,zero
 401c4ac:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401c4b0:	0029883a 	mov	r20,zero
 401c4b4:	00001306 	br	401c504 <udp_open+0xfc>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   ocon = NULL;
   for (con = firstudp; con; con = con->u_next)
 401c4b8:	1821883a 	mov	r16,r3
         UNLOCK_NET_RESOURCE(NET_RESID);
         return(NULL);
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
 401c4bc:	01000804 	movi	r4,32
 401c4c0:	401cdc80 	call	401cdc8 <npalloc>
 401c4c4:	1007883a 	mov	r3,r2
   if (con == 0)
 401c4c8:	10002d26 	beq	r2,zero,401c580 <udp_open+0x178>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return(NULL);
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
 401c4cc:	1029883a 	mov	r20,r2
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
      return(NULL);
   }

   if (ocon)   /* ocon is end of list */
 401c4d0:	80002726 	beq	r16,zero,401c570 <udp_open+0x168>
      ocon->u_next = con;  /* add new connection to end */
 401c4d4:	80800015 	stw	r2,0(r16)
   con->u_fport = fsock;
   con->u_lhost = 0;
   con->u_fhost = fhost;
   con->u_rcv   = handler;
   con->u_data  = data;
   con->u_flags = UDPCF_V4;
 401c4d8:	00800044 	movi	r2,1
 401c4dc:	1880010d 	sth	r2,4(r3)
   else  /* no list, start one */
      firstudp = con;

   con->u_next = 0;

   con->u_lport = lsock;      /* fill in connection info */
 401c4e0:	1c80018d 	sth	r18,6(r3)
   con->u_fport = fsock;
 401c4e4:	1cc0020d 	sth	r19,8(r3)
   con->u_lhost = 0;
   con->u_fhost = fhost;
 401c4e8:	1c400415 	stw	r17,16(r3)
   con->u_rcv   = handler;
 401c4ec:	1d400515 	stw	r21,20(r3)
   con->u_data  = data;
 401c4f0:	1d800615 	stw	r22,24(r3)
   if (ocon)   /* ocon is end of list */
      ocon->u_next = con;  /* add new connection to end */
   else  /* no list, start one */
      firstudp = con;

   con->u_next = 0;
 401c4f4:	18000015 	stw	zero,0(r3)

   con->u_lport = lsock;      /* fill in connection info */
   con->u_fport = fsock;
   con->u_lhost = 0;
 401c4f8:	18000315 	stw	zero,12(r3)
   con->u_fhost = fhost;
   con->u_rcv   = handler;
   con->u_data  = data;
   con->u_flags = UDPCF_V4;

   UNLOCK_NET_RESOURCE(NET_RESID);
 401c4fc:	0009883a 	mov	r4,zero
 401c500:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   return(con);
}
 401c504:	a005883a 	mov	r2,r20
 401c508:	dfc00b17 	ldw	ra,44(sp)
 401c50c:	dd800a17 	ldw	r22,40(sp)
 401c510:	dd400917 	ldw	r21,36(sp)
 401c514:	dd000817 	ldw	r20,32(sp)
 401c518:	dcc00717 	ldw	r19,28(sp)
 401c51c:	dc800617 	ldw	r18,24(sp)
 401c520:	dc400517 	ldw	r17,20(sp)
 401c524:	dc000417 	ldw	r16,16(sp)
 401c528:	dec00c04 	addi	sp,sp,48
 401c52c:	f800283a 	ret
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 401c530:	200cd23a 	srli	r6,r4,8
 401c534:	200ed43a 	srli	r7,r4,16
 401c538:	2006d63a 	srli	r3,r4,24
 401c53c:	923fffcc 	andi	r8,r18,65535
 401c540:	28bfffcc 	andi	r2,r5,65535
 401c544:	31803fcc 	andi	r6,r6,255
 401c548:	39c03fcc 	andi	r7,r7,255
 401c54c:	010100f4 	movhi	r4,1027
 401c550:	2113cc04 	addi	r4,r4,20272
 401c554:	89403fcc 	andi	r5,r17,255
 401c558:	d8c00015 	stw	r3,0(sp)
 401c55c:	da000115 	stw	r8,4(sp)
 401c560:	d8800215 	stw	r2,8(sp)
 401c564:	dd800315 	stw	r22,12(sp)
 401c568:	4002ed40 	call	4002ed4 <printf>
 401c56c:	003fb906 	br	401c454 <udp_open+0x4c>
   }

   if (ocon)   /* ocon is end of list */
      ocon->u_next = con;  /* add new connection to end */
   else  /* no list, start one */
      firstudp = con;
 401c570:	d0a83015 	stw	r2,-24384(gp)
 401c574:	003fd806 	br	401c4d8 <udp_open+0xd0>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   ocon = NULL;
   for (con = firstudp; con; con = con->u_next)
 401c578:	0021883a 	mov	r16,zero
 401c57c:	003fcf06 	br	401c4bc <udp_open+0xb4>

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
   if (con == 0)
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
 401c580:	a0800017 	ldw	r2,0(r20)
 401c584:	1080010c 	andi	r2,r2,4
 401c588:	103fc726 	beq	r2,zero,401c4a8 <udp_open+0xa0>
         dprintf("UDP: Couldn't allocate conn storage.\n");
 401c58c:	010100f4 	movhi	r4,1027
 401c590:	2113e304 	addi	r4,r4,20364
 401c594:	4002fec0 	call	4002fec <puts>
 401c598:	003fc306 	br	401c4a8 <udp_open+0xa0>
      if (con->u_lport == lsock && con->u_fport == fsock &&
          con->u_lhost == 0 && con->u_fhost == fhost)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
            dprintf("UDP: Connection already exists.\n");
 401c59c:	010100f4 	movhi	r4,1027
 401c5a0:	2113db04 	addi	r4,r4,20332
 401c5a4:	4002fec0 	call	4002fec <puts>
 401c5a8:	003fbf06 	br	401c4a8 <udp_open+0xa0>

0401c5ac <asm_cksum>:
      .text

      .global	  asm_cksum

asm_cksum:
      mov   r2, zero		       /* accumulator = 0 */
 401c5ac:	0005883a 	mov	r2,zero
      ble   r5, zero, done	       /* count <= 0 ? */
 401c5b0:	0140620e 	bge	zero,r5,401c73c <done>

      mov   r6, zero		       /* carry accumulator */
 401c5b4:	000d883a 	mov	r6,zero

      andi  r3, r4, 2		       /* ptr 32-bit aligned? */
 401c5b8:	20c0008c 	andi	r3,r4,2
      beq   r3, zero, asm1
 401c5bc:	18000326 	beq	r3,zero,401c5cc <asm1>
      ldhu  r2, (r4)		       /* no - process first 16-bits */
 401c5c0:	2080000b 	ldhu	r2,0(r4)
      addi  r4, r4, 2
 401c5c4:	21000084 	addi	r4,r4,2
      subi  r5, r5, 1
 401c5c8:	297fffc4 	addi	r5,r5,-1

0401c5cc <asm1>:
 401c5cc:	02c100b4 	movhi	r11,1026
/*
 * adjust ptr by ((count/2) mod 16) * 4 bytes
 * jump to location: loop0 - (count/2 mod 16) * 4 instructions
 */
asm1:
      movia r11, loop0
 401c5d0:	5af1be04 	addi	r11,r11,-14600
      andi  r9, r5, 1		       /* r9 = last halfword flag */
 401c5d4:	2a40004c 	andi	r9,r5,1
      srai  r5, r5, 1		       /* count = number of words */
 401c5d8:	280bd07a 	srai	r5,r5,1
      andi  r10, r5, 0xf	       /* modulo 16 */
 401c5dc:	2a8003cc 	andi	r10,r5,15
      slli  r10, r10, 2		       /*      * 4 bytes per word */
 401c5e0:	501490ba 	slli	r10,r10,2
      add   r4, r10, r4		       /* adjust ptr */
 401c5e4:	5109883a 	add	r4,r10,r4
      slli  r10, r10, 2		       /*      * 4 instructions per 4 bytes */
 401c5e8:	501490ba 	slli	r10,r10,2
      sub   r11, r11, r10
 401c5ec:	5a97c83a 	sub	r11,r11,r10
      jmp   r11
 401c5f0:	5800683a 	jmp	r11

0401c5f4 <loop>:
      
loop:
      addi  r4, r4, 64		       /* increment data pointer */
 401c5f4:	21001004 	addi	r4,r4,64

      ldw   r7, -64(r4)
 401c5f8:	21fff017 	ldw	r7,-64(r4)
      add   r2, r7, r2
 401c5fc:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c600:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c604:	418d883a 	add	r6,r8,r6

      ldw   r7, -60(r4)
 401c608:	21fff117 	ldw	r7,-60(r4)
      add   r2, r7, r2
 401c60c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c610:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c614:	418d883a 	add	r6,r8,r6

      ldw   r7, -56(r4)
 401c618:	21fff217 	ldw	r7,-56(r4)
      add   r2, r7, r2
 401c61c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c620:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c624:	418d883a 	add	r6,r8,r6

      ldw   r7, -52(r4)
 401c628:	21fff317 	ldw	r7,-52(r4)
      add   r2, r7, r2
 401c62c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c630:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c634:	418d883a 	add	r6,r8,r6

      ldw   r7, -48(r4)
 401c638:	21fff417 	ldw	r7,-48(r4)
      add   r2, r7, r2
 401c63c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c640:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c644:	418d883a 	add	r6,r8,r6

      ldw   r7, -44(r4)
 401c648:	21fff517 	ldw	r7,-44(r4)
      add   r2, r7, r2
 401c64c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c650:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c654:	418d883a 	add	r6,r8,r6

      ldw   r7, -40(r4)
 401c658:	21fff617 	ldw	r7,-40(r4)
      add   r2, r7, r2
 401c65c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c660:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c664:	418d883a 	add	r6,r8,r6

      ldw   r7, -36(r4)
 401c668:	21fff717 	ldw	r7,-36(r4)
      add   r2, r7, r2
 401c66c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c670:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c674:	418d883a 	add	r6,r8,r6

      ldw   r7, -32(r4)
 401c678:	21fff817 	ldw	r7,-32(r4)
      add   r2, r7, r2
 401c67c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c680:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c684:	418d883a 	add	r6,r8,r6

      ldw   r7, -28(r4)
 401c688:	21fff917 	ldw	r7,-28(r4)
      add   r2, r7, r2
 401c68c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c690:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c694:	418d883a 	add	r6,r8,r6

      ldw   r7, -24(r4)
 401c698:	21fffa17 	ldw	r7,-24(r4)
      add   r2, r7, r2
 401c69c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c6a0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c6a4:	418d883a 	add	r6,r8,r6

      ldw   r7, -20(r4)
 401c6a8:	21fffb17 	ldw	r7,-20(r4)
      add   r2, r7, r2
 401c6ac:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c6b0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c6b4:	418d883a 	add	r6,r8,r6

      ldw   r7, -16(r4)
 401c6b8:	21fffc17 	ldw	r7,-16(r4)
      add   r2, r7, r2
 401c6bc:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c6c0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c6c4:	418d883a 	add	r6,r8,r6

      ldw   r7, -12(r4)
 401c6c8:	21fffd17 	ldw	r7,-12(r4)
      add   r2, r7, r2
 401c6cc:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c6d0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c6d4:	418d883a 	add	r6,r8,r6

      ldw   r7, -8(r4)
 401c6d8:	21fffe17 	ldw	r7,-8(r4)
      add   r2, r7, r2
 401c6dc:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c6e0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c6e4:	418d883a 	add	r6,r8,r6

      ldw   r7, -4(r4)
 401c6e8:	21ffff17 	ldw	r7,-4(r4)
      add   r2, r7, r2
 401c6ec:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c6f0:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c6f4:	418d883a 	add	r6,r8,r6

0401c6f8 <loop0>:
loop0:
      subi  r5, r5, 16
 401c6f8:	297ffc04 	addi	r5,r5,-16
      bge   r5, zero, loop
 401c6fc:	283fbd0e 	bge	r5,zero,401c5f4 <loop>
/*
 * process last halfword (if any)
 */
      beq   r9, zero, fold
 401c700:	48000426 	beq	r9,zero,401c714 <fold>
      ldhu  r7, 0(r4)
 401c704:	21c0000b 	ldhu	r7,0(r4)
      add   r2, r7, r2
 401c708:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 401c70c:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 401c710:	418d883a 	add	r6,r8,r6

0401c714 <fold>:
      
fold:
      srli  r7, r2, 16
 401c714:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 401c718:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add the upper and lower halfwords */
 401c71c:	3885883a 	add	r2,r7,r2
      add   r2, r6, r2		    /* add the carries */
 401c720:	3085883a 	add	r2,r6,r2
/* the accumulator is 18 bits */
      srli  r7, r2, 16
 401c724:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 401c728:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add 2 carry bits to lower halfword */
 401c72c:	3885883a 	add	r2,r7,r2
/* the accumulator is 17 bits */
      srli  r7, r2, 16
 401c730:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 401c734:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add carry to lower halfword */
 401c738:	3885883a 	add	r2,r7,r2

0401c73c <done>:

done:
      ret			    		/* r2 = 16-bit checksum */
 401c73c:	f800283a 	ret

0401c740 <clock_init>:
int cticks_factor;
int cticks_initialized = 0;

void clock_init(void)
{
   OS_TPS = OS_TICKS_PER_SEC;
 401c740:	00801904 	movi	r2,100
 401c744:	d0a83615 	stw	r2,-24360(gp)
   cticks_factor = 0;
   cticks = 0;
 401c748:	00c10134 	movhi	r3,1028
 401c74c:	18e93304 	addi	r3,r3,-23348
   cticks_initialized = 1;
 401c750:	00800044 	movi	r2,1

void clock_init(void)
{
   OS_TPS = OS_TICKS_PER_SEC;
   cticks_factor = 0;
   cticks = 0;
 401c754:	18000015 	stw	zero,0(r3)
   cticks_initialized = 1;
 401c758:	d0a83115 	stw	r2,-24380(gp)
int cticks_initialized = 0;

void clock_init(void)
{
   OS_TPS = OS_TICKS_PER_SEC;
   cticks_factor = 0;
 401c75c:	d0283515 	stw	zero,-24364(gp)
   cticks = 0;
   cticks_initialized = 1;
}
 401c760:	f800283a 	ret

0401c764 <clock_c>:
 * NO OP since using RTOS's timer.
 */
void clock_c(void)
{
   /* null */ ;
}
 401c764:	f800283a 	ret

0401c768 <cticks_hook>:
 */

void
cticks_hook(void)
{
   if (cticks_initialized) 
 401c768:	d0a83117 	ldw	r2,-24380(gp)
 401c76c:	10000c26 	beq	r2,zero,401c7a0 <cticks_hook+0x38>
   {
      cticks_factor += TPS;
 401c770:	d0a83517 	ldw	r2,-24364(gp)
      if (cticks_factor >= OS_TPS)
 401c774:	d0e83617 	ldw	r3,-24360(gp)
      {
         cticks++;
 401c778:	01410134 	movhi	r5,1028
 401c77c:	29693304 	addi	r5,r5,-23348
void
cticks_hook(void)
{
   if (cticks_initialized) 
   {
      cticks_factor += TPS;
 401c780:	10801904 	addi	r2,r2,100
      if (cticks_factor >= OS_TPS)
      {
         cticks++;
         cticks_factor -= OS_TPS;
 401c784:	10c9c83a 	sub	r4,r2,r3
void
cticks_hook(void)
{
   if (cticks_initialized) 
   {
      cticks_factor += TPS;
 401c788:	d0a83515 	stw	r2,-24364(gp)
      if (cticks_factor >= OS_TPS)
 401c78c:	10c00416 	blt	r2,r3,401c7a0 <cticks_hook+0x38>
      {
         cticks++;
 401c790:	28800017 	ldw	r2,0(r5)
         cticks_factor -= OS_TPS;
 401c794:	d1283515 	stw	r4,-24364(gp)
   if (cticks_initialized) 
   {
      cticks_factor += TPS;
      if (cticks_factor >= OS_TPS)
      {
         cticks++;
 401c798:	10800044 	addi	r2,r2,1
 401c79c:	28800015 	stw	r2,0(r5)
 401c7a0:	f800283a 	ret

0401c7a4 <irq_Unmask>:

/* Re-Enable Interrupts */
void
irq_Unmask(void)
{
   if (--irq_level == 0)
 401c7a4:	d0a83217 	ldw	r2,-24376(gp)
 401c7a8:	10bfffc4 	addi	r2,r2,-1
 401c7ac:	d0a83215 	stw	r2,-24376(gp)
 401c7b0:	10000126 	beq	r2,zero,401c7b8 <irq_Unmask+0x14>
 401c7b4:	f800283a 	ret
 401c7b8:	d0a83417 	ldw	r2,-24368(gp)
 401c7bc:	1001703a 	wrctl	status,r2
 401c7c0:	f800283a 	ret

0401c7c4 <irq_Mask>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c7c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c7c8:	00bfff84 	movi	r2,-2
 401c7cc:	2084703a 	and	r2,r4,r2
 401c7d0:	1001703a 	wrctl	status,r2
{
   alt_irq_context  local_cpu_statusreg;

   local_cpu_statusreg = alt_irq_disable_all();
	
   if (++irq_level == 1)
 401c7d4:	d0e83217 	ldw	r3,-24376(gp)
 401c7d8:	00800044 	movi	r2,1
 401c7dc:	18c00044 	addi	r3,r3,1
 401c7e0:	d0e83215 	stw	r3,-24376(gp)
 401c7e4:	18800126 	beq	r3,r2,401c7ec <irq_Mask+0x28>
 401c7e8:	f800283a 	ret
   {
      cpu_statusreg = local_cpu_statusreg;
 401c7ec:	d1283415 	stw	r4,-24368(gp)
 401c7f0:	f800283a 	ret

0401c7f4 <getch>:
int 
getch()
{
int chr;

   if(kb_last != EOF)
 401c7f4:	d0a03b17 	ldw	r2,-32532(gp)
 401c7f8:	00ffffc4 	movi	r3,-1
 401c7fc:	10c00226 	beq	r2,r3,401c808 <getch+0x14>
   {
      chr = kb_last;
      kb_last = EOF;
 401c800:	d0e03b15 	stw	r3,-32532(gp)
   }
   else
      chr = getchar();

   return chr;
}
 401c804:	f800283a 	ret
   {
      chr = kb_last;
      kb_last = EOF;
   }
   else
      chr = getchar();
 401c808:	00810134 	movhi	r2,1028
 401c80c:	10a0f704 	addi	r2,r2,-31780
 401c810:	10c00017 	ldw	r3,0(r2)
 401c814:	19000117 	ldw	r4,4(r3)
 401c818:	40307901 	jmpi	4030790 <getc>

0401c81c <dtrap>:

/* dtrap() - function to trap to debugger */
void
dtrap(void)
{
   printf("dtrap - needs breakpoint\n");
 401c81c:	010100f4 	movhi	r4,1027
 401c820:	2113ed04 	addi	r4,r4,20404
 401c824:	4002fec1 	jmpi	4002fec <puts>

0401c828 <kbhit>:
kbhit()
{
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
 401c828:	d0a83317 	ldw	r2,-24372(gp)
   printf("dtrap - needs breakpoint\n");
}

int
kbhit()
{
 401c82c:	deffff04 	addi	sp,sp,-4
 401c830:	dfc00015 	stw	ra,0(sp)
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
 401c834:	01400104 	movi	r5,4
 401c838:	01900004 	movi	r6,16384
 401c83c:	0009883a 	mov	r4,zero
kbhit()
{
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
 401c840:	10000826 	beq	r2,zero,401c864 <kbhit+0x3c>
      kbd_init = 1; 
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
 401c844:	d0e03b17 	ldw	r3,-32532(gp)
 401c848:	00bfffc4 	movi	r2,-1
 401c84c:	01000044 	movi	r4,1
 401c850:	18800e26 	beq	r3,r2,401c88c <kbhit+0x64>
      /* there was a character, and we read it. */
      kb_last = kb;
   }

   return (TRUE);
}
 401c854:	2005883a 	mov	r2,r4
 401c858:	dfc00017 	ldw	ra,0(sp)
 401c85c:	dec00104 	addi	sp,sp,4
 401c860:	f800283a 	ret
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
 401c864:	402718c0 	call	402718c <fcntl>
      {
         printf("F_SETFL failed.\n");
 401c868:	010100f4 	movhi	r4,1027
 401c86c:	2113f404 	addi	r4,r4,20432
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
 401c870:	1000131e 	bne	r2,zero,401c8c0 <kbhit+0x98>
      kbd_init = 1; 
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
 401c874:	d0e03b17 	ldw	r3,-32532(gp)
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
      {
         printf("F_SETFL failed.\n");
         dtrap();
      }
      kbd_init = 1; 
 401c878:	00800044 	movi	r2,1
 401c87c:	d0a83315 	stw	r2,-24372(gp)
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
 401c880:	00bfffc4 	movi	r2,-1
 401c884:	01000044 	movi	r4,1
 401c888:	18bff21e 	bne	r3,r2,401c854 <kbhit+0x2c>
   {
      kb = getchar();
 401c88c:	00810134 	movhi	r2,1028
 401c890:	10a0f704 	addi	r2,r2,-31780
 401c894:	10c00017 	ldw	r3,0(r2)
 401c898:	19000117 	ldw	r4,4(r3)
 401c89c:	40307900 	call	4030790 <getc>
      if (kb < 0)       /* any error means no character present */
 401c8a0:	0009883a 	mov	r4,zero
 401c8a4:	103feb16 	blt	r2,zero,401c854 <kbhit+0x2c>
         return (FALSE);
         
      /* there was a character, and we read it. */
      kb_last = kb;
 401c8a8:	01000044 	movi	r4,1
 401c8ac:	d0a03b15 	stw	r2,-32532(gp)
   }

   return (TRUE);
}
 401c8b0:	2005883a 	mov	r2,r4
 401c8b4:	dfc00017 	ldw	ra,0(sp)
 401c8b8:	dec00104 	addi	sp,sp,4
 401c8bc:	f800283a 	ret
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
      {
         printf("F_SETFL failed.\n");
 401c8c0:	4002fec0 	call	4002fec <puts>
         dtrap();
 401c8c4:	401c81c0 	call	401c81c <dtrap>
 401c8c8:	003fea06 	br	401c874 <kbhit+0x4c>

0401c8cc <post_app_sem>:
{
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
   {
      error = OSSemPost(app_semaphore[semid]);
 401c8cc:	2105883a 	add	r2,r4,r4
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
 401c8d0:	deffff04 	addi	sp,sp,-4
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
   {
      error = OSSemPost(app_semaphore[semid]);
 401c8d4:	1085883a 	add	r2,r2,r2
 401c8d8:	00c10134 	movhi	r3,1028
 401c8dc:	18ccf204 	addi	r3,r3,13256
void
post_app_sem(unsigned long semid)
{
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 401c8e0:	01400144 	movi	r5,5
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
 401c8e4:	dfc00015 	stw	ra,0(sp)
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
   {
      error = OSSemPost(app_semaphore[semid]);
 401c8e8:	10c5883a 	add	r2,r2,r3
void
post_app_sem(unsigned long semid)
{
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 401c8ec:	29000936 	bltu	r5,r4,401c914 <post_app_sem+0x48>
   {
      error = OSSemPost(app_semaphore[semid]);
 401c8f0:	11000017 	ldw	r4,0(r2)
 401c8f4:	4011e780 	call	4011e78 <OSSemPost>
      if (error != OS_NO_ERR)
 401c8f8:	10803fcc 	andi	r2,r2,255
      {
         panic("unlock NET");
 401c8fc:	010100f4 	movhi	r4,1027
 401c900:	2113f804 	addi	r4,r4,20448
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
   {
      error = OSSemPost(app_semaphore[semid]);
      if (error != OS_NO_ERR)
 401c904:	1000061e 	bne	r2,zero,401c920 <post_app_sem+0x54>
         panic("unlock NET");
      }
   }
   else
      dtrap();
}
 401c908:	dfc00017 	ldw	ra,0(sp)
 401c90c:	dec00104 	addi	sp,sp,4
 401c910:	f800283a 	ret
 401c914:	dfc00017 	ldw	ra,0(sp)
 401c918:	dec00104 	addi	sp,sp,4
      {
         panic("unlock NET");
      }
   }
   else
      dtrap();
 401c91c:	401c81c1 	jmpi	401c81c <dtrap>
}
 401c920:	dfc00017 	ldw	ra,0(sp)
 401c924:	dec00104 	addi	sp,sp,4
   if ((0 <= semid) && (semid <= MAX_SEMID))
   {
      error = OSSemPost(app_semaphore[semid]);
      if (error != OS_NO_ERR)
      {
         panic("unlock NET");
 401c928:	4019c441 	jmpi	4019c44 <panic>

0401c92c <UNLOCK_NET_RESOURCE>:
{
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      error = OSSemPost(resid_semaphore[resid]);
 401c92c:	2105883a 	add	r2,r4,r4
      dtrap();
}

void
UNLOCK_NET_RESOURCE(int resid)
{
 401c930:	deffff04 	addi	sp,sp,-4
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      error = OSSemPost(resid_semaphore[resid]);
 401c934:	1085883a 	add	r2,r2,r2
 401c938:	00c10134 	movhi	r3,1028
 401c93c:	18cce204 	addi	r3,r3,13192
void
UNLOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
 401c940:	014003c4 	movi	r5,15
      dtrap();
}

void
UNLOCK_NET_RESOURCE(int resid)
{
 401c944:	dfc00015 	stw	ra,0(sp)
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      error = OSSemPost(resid_semaphore[resid]);
 401c948:	10c5883a 	add	r2,r2,r3
void
UNLOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
 401c94c:	29000936 	bltu	r5,r4,401c974 <UNLOCK_NET_RESOURCE+0x48>
   {
      error = OSSemPost(resid_semaphore[resid]);
 401c950:	11000017 	ldw	r4,0(r2)
 401c954:	4011e780 	call	4011e78 <OSSemPost>
      if (error != OS_NO_ERR)
 401c958:	10803fcc 	andi	r2,r2,255
      {
         panic("unlock NET");
 401c95c:	010100f4 	movhi	r4,1027
 401c960:	2113f804 	addi	r4,r4,20448
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      error = OSSemPost(resid_semaphore[resid]);
      if (error != OS_NO_ERR)
 401c964:	1000061e 	bne	r2,zero,401c980 <UNLOCK_NET_RESOURCE+0x54>
         panic("unlock NET");
      }
   }
   else
      dtrap();
}
 401c968:	dfc00017 	ldw	ra,0(sp)
 401c96c:	dec00104 	addi	sp,sp,4
 401c970:	f800283a 	ret
 401c974:	dfc00017 	ldw	ra,0(sp)
 401c978:	dec00104 	addi	sp,sp,4
      {
         panic("unlock NET");
      }
   }
   else
      dtrap();
 401c97c:	401c81c1 	jmpi	401c81c <dtrap>
}
 401c980:	dfc00017 	ldw	ra,0(sp)
 401c984:	dec00104 	addi	sp,sp,4
   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      error = OSSemPost(resid_semaphore[resid]);
      if (error != OS_NO_ERR)
      {
         panic("unlock NET");
 401c988:	4019c441 	jmpi	4019c44 <panic>

0401c98c <wait_app_sem>:
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
 401c98c:	defffa04 	addi	sp,sp,-24
   INT8U error = 0;
   int   errct = 0;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 401c990:	00800144 	movi	r2,5
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
 401c994:	dfc00515 	stw	ra,20(sp)
 401c998:	dcc00415 	stw	r19,16(sp)
 401c99c:	dc800315 	stw	r18,12(sp)
 401c9a0:	dc400215 	stw	r17,8(sp)
 401c9a4:	dc000115 	stw	r16,4(sp)
   INT8U error = 0;
 401c9a8:	d8000005 	stb	zero,0(sp)
   int   errct = 0;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 401c9ac:	11001836 	bltu	r2,r4,401ca10 <wait_app_sem+0x84>
 401c9b0:	2105883a 	add	r2,r4,r4
 401c9b4:	1085883a 	add	r2,r2,r2
 401c9b8:	00c10134 	movhi	r3,1028
 401c9bc:	18ccf204 	addi	r3,r3,13256
 401c9c0:	10e3883a 	add	r17,r2,r3
 401c9c4:	0021883a 	mov	r16,zero
 401c9c8:	04c00284 	movi	r19,10
 401c9cc:	0480fa44 	movi	r18,1001
 401c9d0:	00000106 	br	401c9d8 <wait_app_sem+0x4c>
         OSSemPend(app_semaphore[semid], 0, &error);
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 401c9d4:	84801626 	beq	r16,r18,401ca30 <wait_app_sem+0xa4>

   if ((0 <= semid) && (semid <= MAX_SEMID))
   {
      do
      {
         OSSemPend(app_semaphore[semid], 0, &error);
 401c9d8:	89000017 	ldw	r4,0(r17)
 401c9dc:	000b883a 	mov	r5,zero
 401c9e0:	d80d883a 	mov	r6,sp
 401c9e4:	4011ba40 	call	4011ba4 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 401c9e8:	d8800003 	ldbu	r2,0(sp)
 401c9ec:	84000044 	addi	r16,r16,1
 401c9f0:	14fff826 	beq	r2,r19,401c9d4 <wait_app_sem+0x48>
         }
      } while (error == 10);
   }
   else
      dtrap();
}
 401c9f4:	dfc00517 	ldw	ra,20(sp)
 401c9f8:	dcc00417 	ldw	r19,16(sp)
 401c9fc:	dc800317 	ldw	r18,12(sp)
 401ca00:	dc400217 	ldw	r17,8(sp)
 401ca04:	dc000117 	ldw	r16,4(sp)
 401ca08:	dec00604 	addi	sp,sp,24
 401ca0c:	f800283a 	ret
            return;
         }
      } while (error == 10);
   }
   else
      dtrap();
 401ca10:	401c81c0 	call	401c81c <dtrap>
}
 401ca14:	dfc00517 	ldw	ra,20(sp)
 401ca18:	dcc00417 	ldw	r19,16(sp)
 401ca1c:	dc800317 	ldw	r18,12(sp)
 401ca20:	dc400217 	ldw	r17,8(sp)
 401ca24:	dc000117 	ldw	r16,4(sp)
 401ca28:	dec00604 	addi	sp,sp,24
 401ca2c:	f800283a 	ret
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
         {
            panic("lock NET");   /* fatal */
 401ca30:	010100f4 	movhi	r4,1027
 401ca34:	2113fb04 	addi	r4,r4,20460
 401ca38:	4019c440 	call	4019c44 <panic>
 401ca3c:	003fed06 	br	401c9f4 <wait_app_sem+0x68>

0401ca40 <LOCK_NET_RESOURCE>:
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
 401ca40:	defffa04 	addi	sp,sp,-24
   INT8U error = 0;
   int   errct = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
 401ca44:	008003c4 	movi	r2,15
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
 401ca48:	dfc00515 	stw	ra,20(sp)
 401ca4c:	dcc00415 	stw	r19,16(sp)
 401ca50:	dc800315 	stw	r18,12(sp)
 401ca54:	dc400215 	stw	r17,8(sp)
 401ca58:	dc000115 	stw	r16,4(sp)
   INT8U error = 0;
 401ca5c:	d8000005 	stb	zero,0(sp)
   int   errct = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
 401ca60:	11001836 	bltu	r2,r4,401cac4 <LOCK_NET_RESOURCE+0x84>
 401ca64:	2105883a 	add	r2,r4,r4
 401ca68:	1085883a 	add	r2,r2,r2
 401ca6c:	00c10134 	movhi	r3,1028
 401ca70:	18cce204 	addi	r3,r3,13192
 401ca74:	10e3883a 	add	r17,r2,r3
 401ca78:	0021883a 	mov	r16,zero
 401ca7c:	04c00284 	movi	r19,10
 401ca80:	0480fa44 	movi	r18,1001
 401ca84:	00000106 	br	401ca8c <LOCK_NET_RESOURCE+0x4c>
         OSSemPend(resid_semaphore[resid], 0, &error);
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 401ca88:	84801626 	beq	r16,r18,401cae4 <LOCK_NET_RESOURCE+0xa4>

   if ((0 <= resid) && (resid <= MAX_RESID))
   {
      do
      {
         OSSemPend(resid_semaphore[resid], 0, &error);
 401ca8c:	89000017 	ldw	r4,0(r17)
 401ca90:	000b883a 	mov	r5,zero
 401ca94:	d80d883a 	mov	r6,sp
 401ca98:	4011ba40 	call	4011ba4 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 401ca9c:	d8800003 	ldbu	r2,0(sp)
 401caa0:	84000044 	addi	r16,r16,1
 401caa4:	14fff826 	beq	r2,r19,401ca88 <LOCK_NET_RESOURCE+0x48>
         }
      } while (error == 10);
   }
   else
      dtrap();
}
 401caa8:	dfc00517 	ldw	ra,20(sp)
 401caac:	dcc00417 	ldw	r19,16(sp)
 401cab0:	dc800317 	ldw	r18,12(sp)
 401cab4:	dc400217 	ldw	r17,8(sp)
 401cab8:	dc000117 	ldw	r16,4(sp)
 401cabc:	dec00604 	addi	sp,sp,24
 401cac0:	f800283a 	ret
            return;
         }
      } while (error == 10);
   }
   else
      dtrap();
 401cac4:	401c81c0 	call	401c81c <dtrap>
}
 401cac8:	dfc00517 	ldw	ra,20(sp)
 401cacc:	dcc00417 	ldw	r19,16(sp)
 401cad0:	dc800317 	ldw	r18,12(sp)
 401cad4:	dc400217 	ldw	r17,8(sp)
 401cad8:	dc000117 	ldw	r16,4(sp)
 401cadc:	dec00604 	addi	sp,sp,24
 401cae0:	f800283a 	ret
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
         {
            panic("lock NET");   /* fatal */
 401cae4:	010100f4 	movhi	r4,1027
 401cae8:	2113fb04 	addi	r4,r4,20460
 401caec:	4019c440 	call	4019c44 <panic>
         }
      } while (error == 10);
   }
   else
      dtrap();
}
 401caf0:	dfc00517 	ldw	ra,20(sp)
 401caf4:	dcc00417 	ldw	r19,16(sp)
 401caf8:	dc800317 	ldw	r18,12(sp)
 401cafc:	dc400217 	ldw	r17,8(sp)
 401cb00:	dc000117 	ldw	r16,4(sp)
 401cb04:	dec00604 	addi	sp,sp,24
 401cb08:	f800283a 	ret

0401cb0c <TK_NEWTASK>:
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
 401cb0c:	deffee04 	addi	sp,sp,-72
 401cb10:	dc000e15 	stw	r16,56(sp)
 401cb14:	2021883a 	mov	r16,r4
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
 401cb18:	21000417 	ldw	r4,16(r4)
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
 401cb1c:	dc801015 	stw	r18,64(sp)
 401cb20:	dc400f15 	stw	r17,60(sp)
 401cb24:	dfc01115 	stw	ra,68(sp)
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
 401cb28:	401cdc80 	call	401cdc8 <npalloc>
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, curr_task, &err);
 401cb2c:	dc800584 	addi	r18,sp,22
TK_NEWTASK(struct inet_taskinfo * nettask)
{
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
 401cb30:	1023883a 	mov	r17,r2
   if(!stack)
      panic("stack alloc");
 401cb34:	010100f4 	movhi	r4,1027
 401cb38:	2113fe04 	addi	r4,r4,20472
{
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
 401cb3c:	10004b26 	beq	r2,zero,401cc6c <TK_NEWTASK+0x160>
      panic("stack alloc");

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
 401cb40:	80c00417 	ldw	r3,16(r16)
 401cb44:	80800317 	ldw	r2,12(r16)
 401cb48:	81000217 	ldw	r4,8(r16)
 401cb4c:	1806d0ba 	srli	r3,r3,2
 401cb50:	11c03fcc 	andi	r7,r2,255
 401cb54:	10bfffcc 	andi	r2,r2,65535
 401cb58:	18cd883a 	add	r6,r3,r3
 401cb5c:	318d883a 	add	r6,r6,r6
 401cb60:	898d883a 	add	r6,r17,r6
 401cb64:	31bfff04 	addi	r6,r6,-4
 401cb68:	000b883a 	mov	r5,zero
 401cb6c:	d8800015 	stw	r2,0(sp)
 401cb70:	008000c4 	movi	r2,3
 401cb74:	d8c00215 	stw	r3,8(sp)
 401cb78:	d8800415 	stw	r2,16(sp)
 401cb7c:	dc400115 	stw	r17,4(sp)
 401cb80:	d8000315 	stw	zero,12(sp)
 401cb84:	40124d40 	call	40124d4 <OSTaskCreateExt>
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
 401cb88:	10c03fcc 	andi	r3,r2,255
   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
      panic("stack alloc");

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
 401cb8c:	d8800545 	stb	r2,21(sp)
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
 401cb90:	00800a04 	movi	r2,40
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, curr_task, &err);
 401cb94:	900b883a 	mov	r5,r18
 401cb98:	d9800504 	addi	r6,sp,20
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
 401cb9c:	18801d26 	beq	r3,r2,401cc14 <TK_NEWTASK+0x108>
             
     printf("You may wish to check your task priority settings in "\
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
 401cba0:	00800a84 	movi	r2,42
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
 401cba4:	010100f4 	movhi	r4,1027
 401cba8:	21144104 	addi	r4,r4,20740
 401cbac:	01c00504 	movi	r7,20
             
     printf("You may wish to check your task priority settings in "\
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
 401cbb0:	18802726 	beq	r3,r2,401cc50 <TK_NEWTASK+0x144>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
 401cbb4:	180b883a 	mov	r5,r3
 401cbb8:	010100f4 	movhi	r4,1027
 401cbbc:	21147d04 	addi	r4,r4,20980
             
     printf("Please modify the tasks priority level, or modify the "\
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
 401cbc0:	18002c1e 	bne	r3,zero,401cc74 <TK_NEWTASK+0x168>
   }

   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, &nettask->name[0], &error);
 401cbc4:	81000303 	ldbu	r4,12(r16)
 401cbc8:	81400117 	ldw	r5,4(r16)
 401cbcc:	d9800544 	addi	r6,sp,21
 401cbd0:	4012ad40 	call	4012ad4 <OSTaskNameSet>

   nettask->stackbase = (char*)stack;
   *nettask->tk_ptr = (INT8U)nettask->priority;  
 401cbd4:	80c00017 	ldw	r3,0(r16)
 401cbd8:	80800317 	ldw	r2,12(r16)
   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, &nettask->name[0], &error);

   nettask->stackbase = (char*)stack;
 401cbdc:	84400515 	stw	r17,20(r16)
   *nettask->tk_ptr = (INT8U)nettask->priority;  

   printf("Created \"%s\" task (Prio: %d)\n",
 401cbe0:	010100f4 	movhi	r4,1027
 401cbe4:	21148b04 	addi	r4,r4,21036
    * display it.
    */
   OSTaskNameSet(nettask->priority, &nettask->name[0], &error);

   nettask->stackbase = (char*)stack;
   *nettask->tk_ptr = (INT8U)nettask->priority;  
 401cbe8:	18800005 	stb	r2,0(r3)

   printf("Created \"%s\" task (Prio: %d)\n",
 401cbec:	81800317 	ldw	r6,12(r16)
 401cbf0:	81400117 	ldw	r5,4(r16)
 401cbf4:	4002ed40 	call	4002ed4 <printf>
 401cbf8:	0005883a 	mov	r2,zero
         (char *)nettask->name, nettask->priority);

   return (0);
}
 401cbfc:	dfc01117 	ldw	ra,68(sp)
 401cc00:	dc801017 	ldw	r18,64(sp)
 401cc04:	dc400f17 	ldw	r17,60(sp)
 401cc08:	dc000e17 	ldw	r16,56(sp)
 401cc0c:	dec01204 	addi	sp,sp,72
 401cc10:	f800283a 	ret
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, curr_task, &err);
 401cc14:	81000303 	ldbu	r4,12(r16)
 401cc18:	40129880 	call	4012988 <OSTaskNameGet>
     curr_task[OS_TASK_NAME_SIZE-1]=0;
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
 401cc1c:	80c00317 	ldw	r3,12(r16)
 401cc20:	81400117 	ldw	r5,4(r16)
 401cc24:	900f883a 	mov	r7,r18
 401cc28:	180d883a 	mov	r6,r3
 401cc2c:	010100f4 	movhi	r4,1027
 401cc30:	21140104 	addi	r4,r4,20484
   if (error == OS_PRIO_EXIST)
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, curr_task, &err);
     curr_task[OS_TASK_NAME_SIZE-1]=0;
 401cc34:	d8000d45 	stb	zero,53(sp)
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
 401cc38:	d8c00015 	stw	r3,0(sp)
 401cc3c:	4002ed40 	call	4002ed4 <printf>
            "already running task \"%s\" (Prio: %d)\n",
             nettask->name, nettask->priority, curr_task, nettask->priority);
             
     printf("You may wish to check your task priority settings in "\
 401cc40:	010100f4 	movhi	r4,1027
 401cc44:	21141904 	addi	r4,r4,20580
 401cc48:	4002fec0 	call	4002fec <puts>
 401cc4c:	003fdd06 	br	401cbc4 <TK_NEWTASK+0xb8>
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
 401cc50:	81400117 	ldw	r5,4(r16)
 401cc54:	81800317 	ldw	r6,12(r16)
 401cc58:	4002ed40 	call	4002ed4 <printf>
            "available priority levels in the system (OS_LOWEST_PRIO = %d)\n\n",
             nettask->name, nettask->priority, OS_LOWEST_PRIO);
             
     printf("Please modify the tasks priority level, or modify the "\
 401cc5c:	010100f4 	movhi	r4,1027
 401cc60:	21145e04 	addi	r4,r4,20856
 401cc64:	4002fec0 	call	4002fec <puts>
 401cc68:	003fd606 	br	401cbc4 <TK_NEWTASK+0xb8>
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
   if(!stack)
      panic("stack alloc");
 401cc6c:	4019c440 	call	4019c44 <panic>
 401cc70:	003fb306 	br	401cb40 <TK_NEWTASK+0x34>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
 401cc74:	81800117 	ldw	r6,4(r16)
 401cc78:	4002ed40 	call	4002ed4 <printf>
 401cc7c:	00bfffc4 	movi	r2,-1
 401cc80:	003fde06 	br	401cbfc <TK_NEWTASK+0xf0>

0401cc84 <pre_task_setup>:
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
 401cc84:	01800784 	movi	r6,30
   lilbufs = MAXLILPKTS;
 401cc88:	00810134 	movhi	r2,1028
 401cc8c:	10a12e04 	addi	r2,r2,-31560
 401cc90:	11800015 	stw	r6,0(r2)
   bigbufsiz = BIGBUFSIZE;
 401cc94:	00c18004 	movi	r3,1536
 401cc98:	00810134 	movhi	r2,1028
 401cc9c:	10a13104 	addi	r2,r2,-31548
 401cca0:	10c00015 	stw	r3,0(r2)
   lilbufsiz = LILBUFSIZE;
 401cca4:	01002004 	movi	r4,128
 401cca8:	00810134 	movhi	r2,1028
 401ccac:	10a12f04 	addi	r2,r2,-31556
 401ccb0:	11000015 	stw	r4,0(r2)

   /* Install callback to prep_armintcp from prep_ifaces() */
   port_prep = prep_armintcp;
 401ccb4:	014100b4 	movhi	r5,1026
 401ccb8:	2973b604 	addi	r5,r5,-12584
 401ccbc:	00810134 	movhi	r2,1028
 401ccc0:	10a95304 	addi	r2,r2,-23220
 401ccc4:	11400015 	stw	r5,0(r2)
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
 401ccc8:	00c10134 	movhi	r3,1028
 401cccc:	18e13004 	addi	r3,r3,-31552

#endif   /* USE_PPP */


   return NULL;
}
 401ccd0:	0005883a 	mov	r2,zero
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
 401ccd4:	19800015 	stw	r6,0(r3)

#endif   /* USE_PPP */


   return NULL;
}
 401ccd8:	f800283a 	ret

0401ccdc <post_task_setup>:

char *
post_task_setup()
{
   return NULL;
}
 401ccdc:	0005883a 	mov	r2,zero
 401cce0:	f800283a 	ret

0401cce4 <npfree>:
   return ptr;      
}

void
npfree(void * ptr)
{
 401cce4:	defffc04 	addi	sp,sp,-16
 401cce8:	dc400215 	stw	r17,8(sp)
 401ccec:	2023883a 	mov	r17,r4
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
 401ccf0:	d1283e17 	ldw	r4,-24328(gp)
 401ccf4:	000b883a 	mov	r5,zero
 401ccf8:	d80d883a 	mov	r6,sp
   return ptr;      
}

void
npfree(void * ptr)
{
 401ccfc:	dfc00315 	stw	ra,12(sp)
 401cd00:	dc000115 	stw	r16,4(sp)
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
 401cd04:	4011ba40 	call	4011ba4 <OSSemPend>
   if (err)
 401cd08:	d8c00003 	ldbu	r3,0(sp)
 401cd0c:	18000e26 	beq	r3,zero,401cd48 <npfree+0x64>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
 401cd10:	00800284 	movi	r2,10
 401cd14:	18800c1e 	bne	r3,r2,401cd48 <npfree+0x64>
      {
         if (errct++ > 1000)
         {
            panic("npfree");    /* fatal? */
            return;
 401cd18:	04000044 	movi	r16,1
 401cd1c:	00000306 	br	401cd2c <npfree+0x48>
      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
      {
         if (errct++ > 1000)
 401cd20:	0080fa44 	movi	r2,1001
 401cd24:	80801126 	beq	r16,r2,401cd6c <npfree+0x88>
 401cd28:	84000044 	addi	r16,r16,1
         {
            panic("npfree");    /* fatal? */
            return;
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 401cd2c:	d1283e17 	ldw	r4,-24328(gp)
 401cd30:	000b883a 	mov	r5,zero
 401cd34:	d80d883a 	mov	r6,sp
 401cd38:	4011ba40 	call	4011ba4 <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
 401cd3c:	d8c00003 	ldbu	r3,0(sp)
 401cd40:	00800284 	movi	r2,10
 401cd44:	18bff626 	beq	r3,r2,401cd20 <npfree+0x3c>
   }
   
#ifdef   MEM_WRAPPERS
   wrap_free((char*)ptr, free);
#else
   free(ptr);
 401cd48:	8809883a 	mov	r4,r17
 401cd4c:	4001f380 	call	4001f38 <free>
#endif

   err = OSSemPost(mheap_sem_ptr);
 401cd50:	d1283e17 	ldw	r4,-24328(gp)
 401cd54:	4011e780 	call	4011e78 <OSSemPost>
 */
   free(ptr);
#endif
#endif

}
 401cd58:	dfc00317 	ldw	ra,12(sp)
 401cd5c:	dc400217 	ldw	r17,8(sp)
 401cd60:	dc000117 	ldw	r16,4(sp)
 401cd64:	dec00404 	addi	sp,sp,16
 401cd68:	f800283a 	ret
       */
      while (err == 10)
      {
         if (errct++ > 1000)
         {
            panic("npfree");    /* fatal? */
 401cd6c:	010100f4 	movhi	r4,1027
 401cd70:	21149304 	addi	r4,r4,21068
 401cd74:	4019c440 	call	4019c44 <panic>
 */
   free(ptr);
#endif
#endif

}
 401cd78:	dfc00317 	ldw	ra,12(sp)
 401cd7c:	dc400217 	ldw	r17,8(sp)
 401cd80:	dc000117 	ldw	r16,4(sp)
 401cd84:	dec00404 	addi	sp,sp,16
 401cd88:	f800283a 	ret

0401cd8c <ncpfree>:

   return ptr;
}

void ncpfree(void *ptr)
{
 401cd8c:	deffff04 	addi	sp,sp,-4
 401cd90:	dfc00015 	stw	ra,0(sp)
   if(ptr) {
      ptr = alt_remap_cached(ptr, sizeof(ptr));
 401cd94:	01400104 	movi	r5,4
   return ptr;
}

void ncpfree(void *ptr)
{
   if(ptr) {
 401cd98:	20000526 	beq	r4,zero,401cdb0 <ncpfree+0x24>
      ptr = alt_remap_cached(ptr, sizeof(ptr));
 401cd9c:	40266a80 	call	40266a8 <alt_remap_cached>
      npfree(ptr);
 401cda0:	1009883a 	mov	r4,r2
   }
}
 401cda4:	dfc00017 	ldw	ra,0(sp)
 401cda8:	dec00104 	addi	sp,sp,4

void ncpfree(void *ptr)
{
   if(ptr) {
      ptr = alt_remap_cached(ptr, sizeof(ptr));
      npfree(ptr);
 401cdac:	401cce41 	jmpi	401cce4 <npfree>
   }
}
 401cdb0:	dfc00017 	ldw	ra,0(sp)
 401cdb4:	dec00104 	addi	sp,sp,4
 401cdb8:	f800283a 	ret

0401cdbc <calloc2>:
 * There is already a function called calloc1() in memio.c,
 * hence use a different function name.
 */
char * 
calloc2(unsigned size)
{
 401cdbc:	200b883a 	mov	r5,r4
   return (calloc(1,size));
 401cdc0:	01000044 	movi	r4,1
 401cdc4:	40307741 	jmpi	4030774 <calloc>

0401cdc8 <npalloc>:
}


char *
npalloc(unsigned size)
{
 401cdc8:	defffc04 	addi	sp,sp,-16
 401cdcc:	dc400215 	stw	r17,8(sp)
 401cdd0:	2023883a 	mov	r17,r4
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
 401cdd4:	d1283e17 	ldw	r4,-24328(gp)
 401cdd8:	000b883a 	mov	r5,zero
 401cddc:	d80d883a 	mov	r6,sp
}


char *
npalloc(unsigned size)
{
 401cde0:	dfc00315 	stw	ra,12(sp)
 401cde4:	dc000115 	stw	r16,4(sp)
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
 401cde8:	4011ba40 	call	4011ba4 <OSSemPend>
   if(err)
 401cdec:	d8c00003 	ldbu	r3,0(sp)
 401cdf0:	18000e26 	beq	r3,zero,401ce2c <npalloc+0x64>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
 401cdf4:	00800284 	movi	r2,10
 401cdf8:	18800c1e 	bne	r3,r2,401ce2c <npalloc+0x64>
      {
         if(errct++ > 1000)
         {
            panic("npalloc");    /* fatal? */
            return NULL;
 401cdfc:	04000044 	movi	r16,1
 401ce00:	00000306 	br	401ce10 <npalloc+0x48>
      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
      {
         if(errct++ > 1000)
 401ce04:	0080fa44 	movi	r2,1001
 401ce08:	80801926 	beq	r16,r2,401ce70 <npalloc+0xa8>
 401ce0c:	84000044 	addi	r16,r16,1
         {
            panic("npalloc");    /* fatal? */
            return NULL;
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 401ce10:	d1283e17 	ldw	r4,-24328(gp)
 401ce14:	000b883a 	mov	r5,zero
 401ce18:	d80d883a 	mov	r6,sp
 401ce1c:	4011ba40 	call	4011ba4 <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
 401ce20:	d8c00003 	ldbu	r3,0(sp)
 401ce24:	00800284 	movi	r2,10
 401ce28:	18bff626 	beq	r3,r2,401ce04 <npalloc+0x3c>
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, calloc2);
#else
   ptr = calloc2(size);
 401ce2c:	8809883a 	mov	r4,r17
 401ce30:	401cdbc0 	call	401cdbc <calloc2>
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
 401ce34:	d1283e17 	ldw	r4,-24328(gp)
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, calloc2);
#else
   ptr = calloc2(size);
 401ce38:	1021883a 	mov	r16,r2
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
 401ce3c:	4011e780 	call	4011e78 <OSSemPost>
#endif
   
   if(!ptr)
 401ce40:	80000526 	beq	r16,zero,401ce58 <npalloc+0x90>
      return NULL;

   MEMSET(ptr, 0, size);
 401ce44:	880d883a 	mov	r6,r17
 401ce48:	8009883a 	mov	r4,r16
 401ce4c:	000b883a 	mov	r5,zero
#else
   ptr = calloc2(size);
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
 401ce50:	d8800005 	stb	r2,0(sp)
#endif
   
   if(!ptr)
      return NULL;

   MEMSET(ptr, 0, size);
 401ce54:	40026a00 	call	40026a0 <memset>
   return ptr;      
}
 401ce58:	8005883a 	mov	r2,r16
 401ce5c:	dfc00317 	ldw	ra,12(sp)
 401ce60:	dc400217 	ldw	r17,8(sp)
 401ce64:	dc000117 	ldw	r16,4(sp)
 401ce68:	dec00404 	addi	sp,sp,16
 401ce6c:	f800283a 	ret
       */
      while(err == 10)
      {
         if(errct++ > 1000)
         {
            panic("npalloc");    /* fatal? */
 401ce70:	010100f4 	movhi	r4,1027
 401ce74:	21149504 	addi	r4,r4,21076
 401ce78:	4019c440 	call	4019c44 <panic>
 401ce7c:	0021883a 	mov	r16,zero
   if(!ptr)
      return NULL;

   MEMSET(ptr, 0, size);
   return ptr;      
}
 401ce80:	8005883a 	mov	r2,r16
 401ce84:	dfc00317 	ldw	ra,12(sp)
 401ce88:	dc400217 	ldw	r17,8(sp)
 401ce8c:	dc000117 	ldw	r16,4(sp)
 401ce90:	dec00404 	addi	sp,sp,16
 401ce94:	f800283a 	ret

0401ce98 <ncpalloc>:
 * contains macro definitions that assign specific memory
 * allocation calls to these routines.
 */
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
 401ce98:	defffe04 	addi	sp,sp,-8
 401ce9c:	dc400015 	stw	r17,0(sp)
 401cea0:	dfc00115 	stw	ra,4(sp)
 401cea4:	2023883a 	mov	r17,r4
   char *ptr = npalloc(size);
 401cea8:	401cdc80 	call	401cdc8 <npalloc>

   if(ptr) {
      ptr = (char *) alt_remap_uncached(ptr, size);
 401ceac:	1009883a 	mov	r4,r2
 401ceb0:	880b883a 	mov	r5,r17
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
   char *ptr = npalloc(size);

   if(ptr) {
 401ceb4:	10000426 	beq	r2,zero,401cec8 <ncpalloc+0x30>
      ptr = (char *) alt_remap_uncached(ptr, size);
   }

   return ptr;
}
 401ceb8:	dfc00117 	ldw	ra,4(sp)
 401cebc:	dc400017 	ldw	r17,0(sp)
 401cec0:	dec00204 	addi	sp,sp,8
char * ncpalloc(unsigned size)
{
   char *ptr = npalloc(size);

   if(ptr) {
      ptr = (char *) alt_remap_uncached(ptr, size);
 401cec4:	40266b81 	jmpi	40266b8 <alt_remap_uncached>
   }

   return ptr;
}
 401cec8:	dfc00117 	ldw	ra,4(sp)
 401cecc:	dc400017 	ldw	r17,0(sp)
 401ced0:	dec00204 	addi	sp,sp,8
 401ced4:	f800283a 	ret

0401ced8 <prep_armintcp>:
 * Call iniche_devices_init, in alt_iniche_dev.c, 
 * to step through all devices and all their respective
 * low-level initialization routines.
 */
#ifdef ALT_INICHE
   ifaces_found = iniche_devices_init(ifaces_found);
 401ced8:	4017bb81 	jmpi	4017bb8 <iniche_devices_init>

0401cedc <alt_iniche_init>:
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
 401cedc:	defffd04 	addi	sp,sp,-12
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
 401cee0:	01000044 	movi	r4,1
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
 401cee4:	dfc00215 	stw	ra,8(sp)
 401cee8:	dc400115 	stw	r17,4(sp)
 401ceec:	dc000015 	stw	r16,0(sp)
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
 401cef0:	40119600 	call	4011960 <OSSemCreate>
 401cef4:	d0a83e15 	stw	r2,-24328(gp)
   if (!mheap_sem_ptr)
 401cef8:	10003826 	beq	r2,zero,401cfdc <alt_iniche_init+0x100>
      panic("mheap_sem_ptr create err"); 

   rcvdq_sem_ptr = OSSemCreate(0);
 401cefc:	0009883a 	mov	r4,zero
 401cf00:	40119600 	call	4011960 <OSSemCreate>
 401cf04:	d0a83f15 	stw	r2,-24324(gp)
   if (!rcvdq_sem_ptr)
 401cf08:	10003826 	beq	r2,zero,401cfec <alt_iniche_init+0x110>
      panic("rcvdq_sem_ptr create err"); 
 401cf0c:	04010134 	movhi	r16,1028
 401cf10:	840ce204 	addi	r16,r16,13192
 401cf14:	84401004 	addi	r17,r16,64

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
   {
      resid_semaphore[i] = OSSemCreate(1);
 401cf18:	01000044 	movi	r4,1
 401cf1c:	40119600 	call	4011960 <OSSemCreate>
 401cf20:	80800015 	stw	r2,0(r16)
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
 401cf24:	010100f4 	movhi	r4,1027
 401cf28:	2114a504 	addi	r4,r4,21140
 401cf2c:	84000104 	addi	r16,r16,4

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
 401cf30:	10002126 	beq	r2,zero,401cfb8 <alt_iniche_init+0xdc>
   rcvdq_sem_ptr = OSSemCreate(0);
   if (!rcvdq_sem_ptr)
      panic("rcvdq_sem_ptr create err"); 

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
 401cf34:	847ff81e 	bne	r16,r17,401cf18 <alt_iniche_init+0x3c>
 401cf38:	04010134 	movhi	r16,1028
 401cf3c:	840cf204 	addi	r16,r16,13256
 401cf40:	84400604 	addi	r17,r16,24
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
   {
      app_semaphore[i] = OSSemCreate(1);
 401cf44:	01000044 	movi	r4,1
 401cf48:	40119600 	call	4011960 <OSSemCreate>
 401cf4c:	80800015 	stw	r2,0(r16)
      if (!app_semaphore[i])
         panic("app_semaphore create err");  
 401cf50:	010100f4 	movhi	r4,1027
 401cf54:	2114ac04 	addi	r4,r4,21168
 401cf58:	84000104 	addi	r16,r16,4
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
   {
      app_semaphore[i] = OSSemCreate(1);
      if (!app_semaphore[i])
 401cf5c:	10001c26 	beq	r2,zero,401cfd0 <alt_iniche_init+0xf4>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
 401cf60:	847ff81e 	bne	r16,r17,401cf44 <alt_iniche_init+0x68>
 401cf64:	04010134 	movhi	r16,1028
 401cf68:	840ca604 	addi	r16,r16,12952
 401cf6c:	84403c04 	addi	r17,r16,240
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      global_TCPwakeup_set[i].ctick = 0;
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
 401cf70:	0009883a 	mov	r4,zero
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      global_TCPwakeup_set[i].ctick = 0;
 401cf74:	80000015 	stw	zero,0(r16)
      global_TCPwakeup_set[i].soc_event = NULL;
 401cf78:	80000115 	stw	zero,4(r16)
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
 401cf7c:	40119600 	call	4011960 <OSSemCreate>
 401cf80:	80800215 	stw	r2,8(r16)
      if (!global_TCPwakeup_set[i].semaphore)
         panic("globwake_semaphore create err");  
 401cf84:	010100f4 	movhi	r4,1027
 401cf88:	2114b304 	addi	r4,r4,21196
 401cf8c:	84000304 	addi	r16,r16,12
   for (i = 0; i < GLOBWAKE_SZ; i++)
   {
      global_TCPwakeup_set[i].ctick = 0;
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
      if (!global_TCPwakeup_set[i].semaphore)
 401cf90:	10000c26 	beq	r2,zero,401cfc4 <alt_iniche_init+0xe8>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
 401cf94:	847ff61e 	bne	r16,r17,401cf70 <alt_iniche_init+0x94>
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
      if (!global_TCPwakeup_set[i].semaphore)
         panic("globwake_semaphore create err");  
   }
   global_TCPwakeup_setIndx = 0;
 401cf98:	00810134 	movhi	r2,1028
 401cf9c:	10a93204 	addi	r2,r2,-23352
 401cfa0:	10000015 	stw	zero,0(r2)
#endif  /* TCPWAKE_RTOS */
}
 401cfa4:	dfc00217 	ldw	ra,8(sp)
 401cfa8:	dc400117 	ldw	r17,4(sp)
 401cfac:	dc000017 	ldw	r16,0(sp)
 401cfb0:	dec00304 	addi	sp,sp,12
 401cfb4:	f800283a 	ret
#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
 401cfb8:	4019c440 	call	4019c44 <panic>
   rcvdq_sem_ptr = OSSemCreate(0);
   if (!rcvdq_sem_ptr)
      panic("rcvdq_sem_ptr create err"); 

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
 401cfbc:	847fd61e 	bne	r16,r17,401cf18 <alt_iniche_init+0x3c>
 401cfc0:	003fdd06 	br	401cf38 <alt_iniche_init+0x5c>
   {
      global_TCPwakeup_set[i].ctick = 0;
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
      if (!global_TCPwakeup_set[i].semaphore)
         panic("globwake_semaphore create err");  
 401cfc4:	4019c440 	call	4019c44 <panic>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
 401cfc8:	847fe91e 	bne	r16,r17,401cf70 <alt_iniche_init+0x94>
 401cfcc:	003ff206 	br	401cf98 <alt_iniche_init+0xbc>
   }
   for (i = 0; i <= MAX_SEMID; i++)
   {
      app_semaphore[i] = OSSemCreate(1);
      if (!app_semaphore[i])
         panic("app_semaphore create err");  
 401cfd0:	4019c440 	call	4019c44 <panic>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
 401cfd4:	847fdb1e 	bne	r16,r17,401cf44 <alt_iniche_init+0x68>
 401cfd8:	003fe206 	br	401cf64 <alt_iniche_init+0x88>
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
   if (!mheap_sem_ptr)
      panic("mheap_sem_ptr create err"); 
 401cfdc:	010100f4 	movhi	r4,1027
 401cfe0:	21149704 	addi	r4,r4,21084
 401cfe4:	4019c440 	call	4019c44 <panic>
 401cfe8:	003fc406 	br	401cefc <alt_iniche_init+0x20>

   rcvdq_sem_ptr = OSSemCreate(0);
   if (!rcvdq_sem_ptr)
      panic("rcvdq_sem_ptr create err"); 
 401cfec:	010100f4 	movhi	r4,1027
 401cff0:	21149e04 	addi	r4,r4,21112
 401cff4:	4019c440 	call	4019c44 <panic>
 401cff8:	003fc406 	br	401cf0c <alt_iniche_init+0x30>

0401cffc <m_adj>:
 * RETURNS: 
 */

void
m_adj(struct mbuf * mp, int len)
{
 401cffc:	200f883a 	mov	r7,r4
   struct mbuf *  m;
   int   count;

   if ((m = mp) == NULL)
 401d000:	20001826 	beq	r4,zero,401d064 <m_adj+0x68>
      return;

   if (len >= 0) 
 401d004:	28001816 	blt	r5,zero,401d068 <m_adj+0x6c>
   {
      while (m != NULL && len > 0) 
 401d008:	0140160e 	bge	zero,r5,401d064 <m_adj+0x68>
      {
         if (m->m_len <= (unsigned)len)
 401d00c:	20c00217 	ldw	r3,8(r4)
 401d010:	280d883a 	mov	r6,r5
 401d014:	28c02136 	bltu	r5,r3,401d09c <m_adj+0xa0>
         {
            len -= m->m_len;
            m->m_len = 0;
            m = m->m_next;
 401d018:	21000617 	ldw	r4,24(r4)
      while (m != NULL && len > 0) 
      {
         if (m->m_len <= (unsigned)len)
         {
            len -= m->m_len;
            m->m_len = 0;
 401d01c:	38000215 	stw	zero,8(r7)
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
 401d020:	20001026 	beq	r4,zero,401d064 <m_adj+0x68>
      {
         if (m->m_len <= (unsigned)len)
         {
            len -= m->m_len;
 401d024:	28cbc83a 	sub	r5,r5,r3
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
 401d028:	0140230e 	bge	zero,r5,401d0b8 <m_adj+0xbc>
      {
         if (m->m_len <= (unsigned)len)
 401d02c:	20c00217 	ldw	r3,8(r4)
 401d030:	280d883a 	mov	r6,r5
 401d034:	28c01a36 	bltu	r5,r3,401d0a0 <m_adj+0xa4>
         {
            len -= m->m_len;
            m->m_len = 0;
 401d038:	20000215 	stw	zero,8(r4)
            m = m->m_next;
 401d03c:	21000617 	ldw	r4,24(r4)
   {
      while (m != NULL && len > 0) 
      {
         if (m->m_len <= (unsigned)len)
         {
            len -= m->m_len;
 401d040:	28cbc83a 	sub	r5,r5,r3
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
 401d044:	203ff81e 	bne	r4,zero,401d028 <m_adj+0x2c>
 401d048:	f800283a 	ret
       */
      for (m = mp; m; m = m->m_next)
      {
         if (m->m_len >= (unsigned)count)
         {
            m->m_len = count;
 401d04c:	20800215 	stw	r2,8(r4)
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
 401d050:	21000617 	ldw	r4,24(r4)
 401d054:	20002126 	beq	r4,zero,401d0dc <m_adj+0xe0>
         m->m_len = 0;
 401d058:	20000215 	stw	zero,8(r4)
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
 401d05c:	21000617 	ldw	r4,24(r4)
 401d060:	203ffd1e 	bne	r4,zero,401d058 <m_adj+0x5c>
 401d064:	f800283a 	ret
       * calculating its length and finding the last mbuf.
       * If the adjustment only affects this mbuf, then just
       * adjust and return.  Otherwise, rescan and truncate
       * after the remaining size.
       */
      len = -len;
 401d068:	200d883a 	mov	r6,r4
 401d06c:	014bc83a 	sub	r5,zero,r5
 401d070:	0009883a 	mov	r4,zero
 401d074:	00000106 	br	401d07c <m_adj+0x80>
      count = 0;
      for (;;) 
      {
         count += m->m_len;
         if (m->m_next == (struct mbuf *)0)
            break;
 401d078:	180d883a 	mov	r6,r3
       */
      len = -len;
      count = 0;
      for (;;) 
      {
         count += m->m_len;
 401d07c:	30800217 	ldw	r2,8(r6)
         if (m->m_next == (struct mbuf *)0)
 401d080:	30c00617 	ldw	r3,24(r6)
       */
      len = -len;
      count = 0;
      for (;;) 
      {
         count += m->m_len;
 401d084:	2089883a 	add	r4,r4,r2
         if (m->m_next == (struct mbuf *)0)
 401d088:	183ffb1e 	bne	r3,zero,401d078 <m_adj+0x7c>
            break;
         m = m->m_next;
      }
      if (m->m_len >= (unsigned)len)
 401d08c:	11400b36 	bltu	r2,r5,401d0bc <m_adj+0xc0>
      {
         m->m_len -= len;
 401d090:	1145c83a 	sub	r2,r2,r5
 401d094:	30800215 	stw	r2,8(r6)
 401d098:	f800283a 	ret
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
 401d09c:	3809883a 	mov	r4,r7
            m = m->m_next;
         }
         else
         {
            m->m_len -= len;
            m->m_data += len;
 401d0a0:	20800317 	ldw	r2,12(r4)
            m->m_len = 0;
            m = m->m_next;
         }
         else
         {
            m->m_len -= len;
 401d0a4:	1987c83a 	sub	r3,r3,r6
 401d0a8:	20c00215 	stw	r3,8(r4)
            m->m_data += len;
 401d0ac:	1185883a 	add	r2,r2,r6
 401d0b0:	20800315 	stw	r2,12(r4)
 401d0b4:	f800283a 	ret
 401d0b8:	f800283a 	ret
      if (m->m_len >= (unsigned)len)
      {
         m->m_len -= len;
         return;
      }
      count -= len;
 401d0bc:	2145c83a 	sub	r2,r4,r5
 401d0c0:	3809883a 	mov	r4,r7
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
      {
         if (m->m_len >= (unsigned)count)
 401d0c4:	20c00217 	ldw	r3,8(r4)
 401d0c8:	18bfe02e 	bgeu	r3,r2,401d04c <m_adj+0x50>
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
 401d0cc:	21000617 	ldw	r4,24(r4)
         if (m->m_len >= (unsigned)count)
         {
            m->m_len = count;
            break;
         }
         count -= m->m_len;
 401d0d0:	10c5c83a 	sub	r2,r2,r3
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
 401d0d4:	203ffb1e 	bne	r4,zero,401d0c4 <m_adj+0xc8>
 401d0d8:	003fdd06 	br	401d050 <m_adj+0x54>
 401d0dc:	f800283a 	ret

0401d0e0 <mbuf_len>:
int
mbuf_len (struct mbuf * m)
{
   int   len   =  0;

   while (m)
 401d0e0:	20000726 	beq	r4,zero,401d100 <mbuf_len+0x20>
 401d0e4:	0007883a 	mov	r3,zero
   {
      len += m->m_len;
 401d0e8:	20800217 	ldw	r2,8(r4)
      m = m->m_next;
 401d0ec:	21000617 	ldw	r4,24(r4)
{
   int   len   =  0;

   while (m)
   {
      len += m->m_len;
 401d0f0:	1887883a 	add	r3,r3,r2
int
mbuf_len (struct mbuf * m)
{
   int   len   =  0;

   while (m)
 401d0f4:	203ffc1e 	bne	r4,zero,401d0e8 <mbuf_len+0x8>
   {
      len += m->m_len;
      m = m->m_next;
   }
   return len;
}
 401d0f8:	1805883a 	mov	r2,r3
 401d0fc:	f800283a 	ret
int
mbuf_len (struct mbuf * m)
{
   int   len   =  0;

   while (m)
 401d100:	0007883a 	mov	r3,zero
   {
      len += m->m_len;
      m = m->m_next;
   }
   return len;
}
 401d104:	1805883a 	mov	r2,r3
 401d108:	f800283a 	ret

0401d10c <remque>:
remque (void * arg)
{
   struct bsdq *  old;

   old = (struct bsdq *)arg;
   if (!old->prev) return;
 401d10c:	20c00117 	ldw	r3,4(r4)
 401d110:	18000526 	beq	r3,zero,401d128 <remque+0x1c>
      old->prev->next = old->next;
 401d114:	20800017 	ldw	r2,0(r4)
 401d118:	18800015 	stw	r2,0(r3)
   if (old->next)
 401d11c:	20800017 	ldw	r2,0(r4)
 401d120:	10000126 	beq	r2,zero,401d128 <remque+0x1c>
      old->next->prev = old->prev;
 401d124:	10c00115 	stw	r3,4(r2)
 401d128:	f800283a 	ret

0401d12c <insque>:
{
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
   prev = (struct bsdq *)p;
   newe->next = prev->next;
 401d12c:	28800017 	ldw	r2,0(r5)
   newe->prev = prev;
 401d130:	21400115 	stw	r5,4(r4)
{
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
   prev = (struct bsdq *)p;
   newe->next = prev->next;
 401d134:	20800015 	stw	r2,0(r4)
   newe->prev = prev;
   prev->next = newe;
 401d138:	29000015 	stw	r4,0(r5)
   if (newe->next)
 401d13c:	20800017 	ldw	r2,0(r4)
 401d140:	10000126 	beq	r2,zero,401d148 <insque+0x1c>
      newe->next->prev = newe;
 401d144:	11000115 	stw	r4,4(r2)
 401d148:	f800283a 	ret

0401d14c <in_broadcast>:
{
   if (ipaddr == 0xffffffff)
      return TRUE;

   return FALSE;
}
 401d14c:	20bfffe0 	cmpeqi	r2,r4,-1
 401d150:	f800283a 	ret

0401d154 <tcp_tick>:

void
tcp_tick()
{
   /* guard against re-entry */
   if (in_tcptick)
 401d154:	d0a84117 	ldw	r2,-24316(gp)
unsigned long nextslow = 0L;     /* next slow tcp timer time */
static int in_tcptick = 0;       /* reentry gaurd */

void
tcp_tick()
{
 401d158:	defffe04 	addi	sp,sp,-8
 401d15c:	dc000015 	stw	r16,0(sp)
 401d160:	dfc00115 	stw	ra,4(sp)
   /* guard against re-entry */
   if (in_tcptick)
      return;
   in_tcptick++;

   LOCK_NET_RESOURCE(NET_RESID);
 401d164:	0009883a 	mov	r4,zero

   if (cticks >= nextslow) /* time to do it again */
 401d168:	04010134 	movhi	r16,1028
 401d16c:	84293304 	addi	r16,r16,-23348

void
tcp_tick()
{
   /* guard against re-entry */
   if (in_tcptick)
 401d170:	10000426 	beq	r2,zero,401d184 <tcp_tick+0x30>
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);

   in_tcptick--;
}
 401d174:	dfc00117 	ldw	ra,4(sp)
 401d178:	dc000017 	ldw	r16,0(sp)
 401d17c:	dec00204 	addi	sp,sp,8
 401d180:	f800283a 	ret
tcp_tick()
{
   /* guard against re-entry */
   if (in_tcptick)
      return;
   in_tcptick++;
 401d184:	00800044 	movi	r2,1
 401d188:	d0a84115 	stw	r2,-24316(gp)

   LOCK_NET_RESOURCE(NET_RESID);
 401d18c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   if (cticks >= nextslow) /* time to do it again */
 401d190:	80c00017 	ldw	r3,0(r16)
 401d194:	d0a84017 	ldw	r2,-24320(gp)
 401d198:	1880092e 	bgeu	r3,r2,401d1c0 <tcp_tick+0x6c>

#ifdef DO_DELAY_ACKS
   tcp_fasttimo();
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);
 401d19c:	0009883a 	mov	r4,zero
 401d1a0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   in_tcptick--;
 401d1a4:	d0a84117 	ldw	r2,-24316(gp)
 401d1a8:	10bfffc4 	addi	r2,r2,-1
 401d1ac:	d0a84115 	stw	r2,-24316(gp)
}
 401d1b0:	dfc00117 	ldw	ra,4(sp)
 401d1b4:	dc000017 	ldw	r16,0(sp)
 401d1b8:	dec00204 	addi	sp,sp,8
 401d1bc:	f800283a 	ret

   LOCK_NET_RESOURCE(NET_RESID);

   if (cticks >= nextslow) /* time to do it again */
   {
      tcp_slowtimo();      /* call routine in BSD tcp_timr.c */
 401d1c0:	4024cb00 	call	4024cb0 <tcp_slowtimo>
#ifdef CSUM_DEMO
      nextslow = cticks + (TPS/5);  /* another 200 ms */
#else
      nextslow = cticks + (TPS/2);  /* another 500 ms */
 401d1c4:	80800017 	ldw	r2,0(r16)
 401d1c8:	10800c84 	addi	r2,r2,50
 401d1cc:	d0a84015 	stw	r2,-24320(gp)
 401d1d0:	003ff206 	br	401d19c <tcp_tick+0x48>

0401d1d4 <so_icmpdu>:
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
 401d1d4:	defffa04 	addi	sp,sp,-24
 401d1d8:	dc400315 	stw	r17,12(sp)
 401d1dc:	dfc00515 	stw	ra,20(sp)
 401d1e0:	dc800415 	stw	r18,16(sp)
 401d1e4:	dc000215 	stw	r16,8(sp)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
 401d1e8:	28c00047 	ldb	r3,1(r5)
 401d1ec:	00800104 	movi	r2,4
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
 401d1f0:	2815883a 	mov	r10,r5
 401d1f4:	2023883a 	mov	r17,r4
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 401d1f8:	2a000617 	ldw	r8,24(r5)
   lhost = htonl(pdp->dip.ip_src);
 401d1fc:	2b000517 	ldw	r12,20(r5)
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 401d200:	2900070b 	ldhu	r4,28(r5)
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 401d204:	2940078b 	ldhu	r5,30(r5)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
 401d208:	18801626 	beq	r3,r2,401d264 <so_icmpdu+0x90>
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 401d20c:	400cd23a 	srli	r6,r8,8
 401d210:	40ffc00c 	andi	r3,r8,65280
 401d214:	400e963a 	slli	r7,r8,24
 401d218:	4004d63a 	srli	r2,r8,24
 401d21c:	1806923a 	slli	r3,r3,8
   lhost = htonl(pdp->dip.ip_src);
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 401d220:	213fffcc 	andi	r4,r4,65535
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 401d224:	297fffcc 	andi	r5,r5,65535
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
   lhost = htonl(pdp->dip.ip_src);
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 401d228:	2010923a 	slli	r8,r4,8
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 401d22c:	2812923a 	slli	r9,r5,8
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 401d230:	31bfc00c 	andi	r6,r6,65280
   lhost = htonl(pdp->dip.ip_src);
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 401d234:	2008d23a 	srli	r4,r4,8
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 401d238:	280ad23a 	srli	r5,r5,8
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
 401d23c:	52800443 	ldbu	r10,17(r10)
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 401d240:	1184b03a 	or	r2,r2,r6
 401d244:	19c6b03a 	or	r3,r3,r7
 401d248:	10d6b03a 	or	r11,r2,r3
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
 401d24c:	00800184 	movi	r2,6
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
   lhost = htonl(pdp->dip.ip_src);
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 401d250:	221ab03a 	or	r13,r4,r8
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 401d254:	2a4cb03a 	or	r6,r5,r9
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
 401d258:	50803326 	beq	r10,r2,401d328 <so_icmpdu+0x154>
         tcp_close(tp);
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
   }   
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
 401d25c:	00800444 	movi	r2,17
 401d260:	50800b26 	beq	r10,r2,401d290 <so_icmpdu+0xbc>
   if (pdp->dcode == DSTFRAG)
      pmtucache_set(pdp->dip.ip_dest, htons(pdp->dno2));
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
 401d264:	01000084 	movi	r4,2
 401d268:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p); /* done with original packet */
 401d26c:	8809883a 	mov	r4,r17
 401d270:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401d274:	01000084 	movi	r4,2
   return;
}
 401d278:	dfc00517 	ldw	ra,20(sp)
 401d27c:	dc800417 	ldw	r18,16(sp)
 401d280:	dc400317 	ldw	r17,12(sp)
 401d284:	dc000217 	ldw	r16,8(sp)
 401d288:	dec00604 	addi	sp,sp,24
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* done with original packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401d28c:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 401d290:	00810134 	movhi	r2,1028
 401d294:	10a92704 	addi	r2,r2,-23396
 401d298:	12000017 	ldw	r8,0(r2)
 401d29c:	403ff126 	beq	r8,zero,401d264 <so_icmpdu+0x90>
 401d2a0:	5808d23a 	srli	r4,r11,8
 401d2a4:	58ffc00c 	andi	r3,r11,65280
 401d2a8:	580a963a 	slli	r5,r11,24
 401d2ac:	1806923a 	slli	r3,r3,8
 401d2b0:	5804d63a 	srli	r2,r11,24
 401d2b4:	213fc00c 	andi	r4,r4,65280
 401d2b8:	1946b03a 	or	r3,r3,r5
 401d2bc:	1104b03a 	or	r2,r2,r4
 401d2c0:	10c6b03a 	or	r3,r2,r3
 401d2c4:	317fffcc 	andi	r5,r6,65535
 401d2c8:	693fffcc 	andi	r4,r13,65535
 401d2cc:	00000206 	br	401d2d8 <so_icmpdu+0x104>
 401d2d0:	42000017 	ldw	r8,0(r8)
 401d2d4:	403fe326 	beq	r8,zero,401d264 <so_icmpdu+0x90>
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
 401d2d8:	4080020b 	ldhu	r2,8(r8)
 401d2dc:	28800126 	beq	r5,r2,401d2e4 <so_icmpdu+0x110>
 401d2e0:	103ffb1e 	bne	r2,zero,401d2d0 <so_icmpdu+0xfc>
 401d2e4:	40800417 	ldw	r2,16(r8)
 401d2e8:	10fff91e 	bne	r2,r3,401d2d0 <so_icmpdu+0xfc>
 401d2ec:	4080018b 	ldhu	r2,6(r8)
 401d2f0:	20bff71e 	bne	r4,r2,401d2d0 <so_icmpdu+0xfc>
         {
            break;   /* found our UDP table entry */
         }
      if (!tmp) 
         goto done;
      so = (struct socket *)tmp->u_data;
 401d2f4:	44000617 	ldw	r16,24(r8)
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
 401d2f8:	00800084 	movi	r2,2
 401d2fc:	80c00987 	ldb	r3,38(r16)
 401d300:	18bfd81e 	bne	r3,r2,401d264 <so_icmpdu+0x90>
         goto done;
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 401d304:	00801bc4 	movi	r2,111
      /* do a select() notify on socket here */
      sorwakeup(so);
 401d308:	81400a04 	addi	r5,r16,40
 401d30c:	8009883a 	mov	r4,r16
         goto done;
      so = (struct socket *)tmp->u_data;
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
         goto done;
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 401d310:	80800615 	stw	r2,24(r16)
      /* do a select() notify on socket here */
      sorwakeup(so);
 401d314:	40211d80 	call	40211d8 <sbwakeup>
      sowwakeup(so);
 401d318:	8009883a 	mov	r4,r16
 401d31c:	81401204 	addi	r5,r16,72
 401d320:	40211d80 	call	40211d8 <sbwakeup>
 401d324:	003fcf06 	br	401d264 <so_icmpdu+0x90>

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
   {
      /* find associated data structs and socket */
      inp = in_pcblookup(&tcb, fhost, fport, lhost, lport, INPLOOKUP_WILDCARD);
 401d328:	6006d23a 	srli	r3,r12,8
 401d32c:	60bfc00c 	andi	r2,r12,65280
 401d330:	6008963a 	slli	r4,r12,24
 401d334:	1004923a 	slli	r2,r2,8
 401d338:	600ed63a 	srli	r7,r12,24
 401d33c:	18ffc00c 	andi	r3,r3,65280
 401d340:	1104b03a 	or	r2,r2,r4
 401d344:	38ceb03a 	or	r7,r7,r3
 401d348:	04800044 	movi	r18,1
 401d34c:	68ffffcc 	andi	r3,r13,65535
 401d350:	388eb03a 	or	r7,r7,r2
 401d354:	580b883a 	mov	r5,r11
 401d358:	31bfffcc 	andi	r6,r6,65535
 401d35c:	01010134 	movhi	r4,1028
 401d360:	210d2004 	addi	r4,r4,13440
 401d364:	d8c00015 	stw	r3,0(sp)
 401d368:	dc800115 	stw	r18,4(sp)
 401d36c:	402e0340 	call	402e034 <in_pcblookup>
      if (inp == 0)
 401d370:	103fbc26 	beq	r2,zero,401d264 <so_icmpdu+0x90>
         goto done;
      so = inp->inp_socket;
 401d374:	14000817 	ldw	r16,32(r2)
      if (so == 0)
 401d378:	803fba26 	beq	r16,zero,401d264 <so_icmpdu+0x90>
         goto done;
      tp = intotcpcb(inp);
 401d37c:	11000917 	ldw	r4,36(r2)
      if (tp)
 401d380:	20000326 	beq	r4,zero,401d390 <so_icmpdu+0x1bc>
      {
         if (tp->t_state <= TCPS_LISTEN)
 401d384:	20800217 	ldw	r2,8(r4)
 401d388:	90bfb60e 	bge	r18,r2,401d264 <so_icmpdu+0x90>
               goto done;
        }
   }
#endif

         tcp_close(tp);
 401d38c:	40243f00 	call	40243f0 <tcp_close>
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 401d390:	00801bc4 	movi	r2,111
 401d394:	80800615 	stw	r2,24(r16)
 401d398:	003fb206 	br	401d264 <so_icmpdu+0x90>

0401d39c <np_stripoptions>:
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
 401d39c:	defffd04 	addi	sp,sp,-12
 401d3a0:	dc400115 	stw	r17,4(sp)
 401d3a4:	dc000015 	stw	r16,0(sp)
 401d3a8:	dfc00215 	stw	ra,8(sp)
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
 401d3ac:	20800003 	ldbu	r2,0(r4)
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
 401d3b0:	2011883a 	mov	r8,r4

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
 401d3b4:	01c00504 	movi	r7,20

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
 401d3b8:	10c03c0c 	andi	r3,r2,240
np_stripoptions(struct ip * ti, struct mbuf * m)
{
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
 401d3bc:	108003cc 	andi	r2,r2,15
 401d3c0:	1085883a 	add	r2,r2,r2
 401d3c4:	1085883a 	add	r2,r2,r2
   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
      return;

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;
 401d3c8:	143ffb04 	addi	r16,r2,-20
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
 401d3cc:	2823883a 	mov	r17,r5

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
 401d3d0:	380d883a 	mov	r6,r7

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
 401d3d4:	18c00154 	ori	r3,r3,5

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
 401d3d8:	2409883a 	add	r4,r4,r16
 401d3dc:	400b883a 	mov	r5,r8

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
 401d3e0:	38800b0e 	bge	r7,r2,401d410 <np_stripoptions+0x74>

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
 401d3e4:	4080008b 	ldhu	r2,2(r8)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
 401d3e8:	40c00005 	stb	r3,0(r8)

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
 401d3ec:	1405c83a 	sub	r2,r2,r16
 401d3f0:	4080008d 	sth	r2,2(r8)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
 401d3f4:	40096e80 	call	40096e8 <memmove>
   m->m_len -= ihlen;
 401d3f8:	88c00217 	ldw	r3,8(r17)
   m->m_data += ihlen;
 401d3fc:	88800317 	ldw	r2,12(r17)
   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
   m->m_len -= ihlen;
 401d400:	1c07c83a 	sub	r3,r3,r16
   m->m_data += ihlen;
 401d404:	1405883a 	add	r2,r2,r16
 401d408:	88800315 	stw	r2,12(r17)
   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
   m->m_len -= ihlen;
 401d40c:	88c00215 	stw	r3,8(r17)
   m->m_data += ihlen;
}
 401d410:	dfc00217 	ldw	ra,8(sp)
 401d414:	dc400117 	ldw	r17,4(sp)
 401d418:	dc000017 	ldw	r16,0(sp)
 401d41c:	dec00304 	addi	sp,sp,12
 401d420:	f800283a 	ret

0401d424 <dtom>:
dtom(void * data)
{
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 401d424:	00810134 	movhi	r2,1028
 401d428:	108d0c04 	addi	r2,r2,13360
 401d42c:	10800017 	ldw	r2,0(r2)
 * RETURNS: 
 */

struct mbuf *  
dtom(void * data)
{
 401d430:	deffff04 	addi	sp,sp,-4
 401d434:	dfc00015 	stw	ra,0(sp)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 401d438:	10000826 	beq	r2,zero,401d45c <dtom+0x38>
   {
      m = (struct mbuf *)qptr;

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
 401d43c:	11400417 	ldw	r5,16(r2)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
   {
      m = (struct mbuf *)qptr;
 401d440:	1007883a 	mov	r3,r2

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
 401d444:	21400336 	bltu	r4,r5,401d454 <dtom+0x30>
 401d448:	10800517 	ldw	r2,20(r2)
 401d44c:	2885883a 	add	r2,r5,r2
 401d450:	20800636 	bltu	r4,r2,401d46c <dtom+0x48>
dtom(void * data)
{
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 401d454:	18800017 	ldw	r2,0(r3)
 401d458:	103ff81e 	bne	r2,zero,401d43c <dtom+0x18>
      else
         continue;

   }

   panic("dtom");    /* data not found in any "in use" mbuf */
 401d45c:	010100f4 	movhi	r4,1027
 401d460:	2114bb04 	addi	r4,r4,21228
 401d464:	4019c440 	call	4019c44 <panic>
 401d468:	0007883a 	mov	r3,zero
   return NULL;
}
 401d46c:	1805883a 	mov	r2,r3
 401d470:	dfc00017 	ldw	ra,0(sp)
 401d474:	dec00104 	addi	sp,sp,4
 401d478:	f800283a 	ret

0401d47c <nptcp_init>:
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
 401d47c:	00810134 	movhi	r2,1028
 401d480:	10a12e04 	addi	r2,r2,-31560
 401d484:	01010134 	movhi	r4,1028
 401d488:	21213004 	addi	r4,r4,-31552
 401d48c:	10c00017 	ldw	r3,0(r2)
 401d490:	21400017 	ldw	r5,0(r4)
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
 401d494:	defffb04 	addi	sp,sp,-20
 401d498:	dc800315 	stw	r18,12(sp)
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
 401d49c:	1947883a 	add	r3,r3,r5
 401d4a0:	18c7883a 	add	r3,r3,r3
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
 401d4a4:	dc400215 	stw	r17,8(sp)
 401d4a8:	dfc00415 	stw	ra,16(sp)
 401d4ac:	dc000115 	stw	r16,4(sp)
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
 401d4b0:	00810134 	movhi	r2,1028
 401d4b4:	108cf804 	addi	r2,r2,13280
   MEMSET(&mbufq, 0, sizeof(mbufq));
 401d4b8:	01010134 	movhi	r4,1028
 401d4bc:	210d0c04 	addi	r4,r4,13360
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
 401d4c0:	04810134 	movhi	r18,1028
 401d4c4:	948d1104 	addi	r18,r18,13380
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
 401d4c8:	1c4000c4 	addi	r17,r3,3
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
 401d4cc:	10000415 	stw	zero,16(r2)
   MEMSET(&mbufq, 0, sizeof(mbufq));
 401d4d0:	20000415 	stw	zero,16(r4)
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
 401d4d4:	10000015 	stw	zero,0(r2)
 401d4d8:	10000115 	stw	zero,4(r2)
 401d4dc:	10000215 	stw	zero,8(r2)
 401d4e0:	10000315 	stw	zero,12(r2)
   MEMSET(&mbufq, 0, sizeof(mbufq));
 401d4e4:	20000015 	stw	zero,0(r4)
 401d4e8:	20000115 	stw	zero,4(r4)
 401d4ec:	20000215 	stw	zero,8(r4)
 401d4f0:	20000315 	stw	zero,12(r4)
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
 401d4f4:	90000015 	stw	zero,0(r18)
 401d4f8:	90000115 	stw	zero,4(r18)
 401d4fc:	90000215 	stw	zero,8(r18)
 401d500:	90000315 	stw	zero,12(r18)
 401d504:	90000415 	stw	zero,16(r18)
   for (i = 0; i < (int)bufcount; i++)
 401d508:	04400f0e 	bge	zero,r17,401d548 <nptcp_init+0xcc>
 401d50c:	0021883a 	mov	r16,zero
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
 401d510:	01000904 	movi	r4,36
 401d514:	401cdc80 	call	401cdc8 <npalloc>
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
   MEMSET(&mbufq, 0, sizeof(mbufq));
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
 401d518:	84000044 	addi	r16,r16,1
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
 401d51c:	100b883a 	mov	r5,r2
      if (!m)  /* malloc error, bail out */
         panic("tcpinit");
 401d520:	010100f4 	movhi	r4,1027
 401d524:	2114bd04 	addi	r4,r4,21236
   MEMSET(&mbufq, 0, sizeof(mbufq));
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
      if (!m)  /* malloc error, bail out */
 401d528:	10001026 	beq	r2,zero,401d56c <nptcp_init+0xf0>
         panic("tcpinit");
      m->m_type = MT_FREE;
 401d52c:	28000815 	stw	zero,32(r5)
      m->m_len = 0;
 401d530:	28000215 	stw	zero,8(r5)
      m->m_data = NULL;
 401d534:	28000315 	stw	zero,12(r5)
      putq(&mfreeq, (qp)m);
 401d538:	01010134 	movhi	r4,1028
 401d53c:	210d1104 	addi	r4,r4,13380
 401d540:	401c2940 	call	401c294 <putq>
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
   MEMSET(&mbufq, 0, sizeof(mbufq));
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
 401d544:	847ff21e 	bne	r16,r17,401d510 <nptcp_init+0x94>
      m->m_type = MT_FREE;
      m->m_len = 0;
      m->m_data = NULL;
      putq(&mfreeq, (qp)m);
   }
   mfreeq.q_min = (int)bufcount;   /* this should match q_max and q_len */
 401d548:	94400415 	stw	r17,16(r18)
   tcpmib.tcpRtoAlgorithm = 4;     /* Van Jacobson's algorithm */
   tcpmib.tcpRtoMin = TCPTV_MIN * 1000;      /* PR_SLOWHZ */
   tcpmib.tcpRtoMax = TCPTV_REXMTMAX * 1000; /* PR_SLOWHZ */
#endif

   tcp_init();    /* call the BSD init in tcp_usr.c */
 401d54c:	402435c0 	call	402435c <tcp_init>
#ifdef TCP_MENUS
   install_menu(&tcpmenu[0]);
#endif   /* IN_MENUS */

   return 0;   /* good return */
}
 401d550:	0005883a 	mov	r2,zero
 401d554:	dfc00417 	ldw	ra,16(sp)
 401d558:	dc800317 	ldw	r18,12(sp)
 401d55c:	dc400217 	ldw	r17,8(sp)
 401d560:	dc000117 	ldw	r16,4(sp)
 401d564:	dec00504 	addi	sp,sp,20
 401d568:	f800283a 	ret
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
      if (!m)  /* malloc error, bail out */
         panic("tcpinit");
 401d56c:	d8800015 	stw	r2,0(sp)
 401d570:	4019c440 	call	4019c44 <panic>
 401d574:	d9400017 	ldw	r5,0(sp)
 401d578:	003fec06 	br	401d52c <nptcp_init+0xb0>

0401d57c <pffindtype>:
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
 401d57c:	deffff04 	addi	sp,sp,-4

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
 401d580:	00800084 	movi	r2,2
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
 401d584:	dfc00015 	stw	ra,0(sp)

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
 401d588:	2080111e 	bne	r4,r2,401d5d0 <pffindtype+0x54>
         dtrap();    /* programming error */
         return NULL;
      }
   }

   if (type == SOCK_STREAM)
 401d58c:	00800044 	movi	r2,1
 401d590:	00c10134 	movhi	r3,1028
 401d594:	18e01704 	addi	r3,r3,-32676
 401d598:	28800326 	beq	r5,r2,401d5a8 <pffindtype+0x2c>
      return &tcp_protosw;
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
 401d59c:	00c10134 	movhi	r3,1028
 401d5a0:	18e01d04 	addi	r3,r3,-32652
 401d5a4:	2900041e 	bne	r5,r4,401d5b8 <pffindtype+0x3c>
   else if(type == SOCK_RAW)
      return &rawip_protosw;
#endif  /* IP_RAW */
   else
      return NULL;
}
 401d5a8:	1805883a 	mov	r2,r3
 401d5ac:	dfc00017 	ldw	ra,0(sp)
 401d5b0:	dec00104 	addi	sp,sp,4
 401d5b4:	f800283a 	ret
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
      return &udp_protosw;
#endif   /* UDP_SOCKETS */
#ifdef IP_RAW
   else if(type == SOCK_RAW)
 401d5b8:	008000c4 	movi	r2,3
 401d5bc:	00c10134 	movhi	r3,1028
 401d5c0:	18e02304 	addi	r3,r3,-32628
 401d5c4:	28bff826 	beq	r5,r2,401d5a8 <pffindtype+0x2c>
 401d5c8:	0007883a 	mov	r3,zero
 401d5cc:	003ff606 	br	401d5a8 <pffindtype+0x2c>
   {
#ifdef IP_V6
      if(domain != AF_INET6)
#endif
      {
         dtrap();    /* programming error */
 401d5d0:	401c81c0 	call	401c81c <dtrap>
 401d5d4:	0007883a 	mov	r3,zero
   else if(type == SOCK_RAW)
      return &rawip_protosw;
#endif  /* IP_RAW */
   else
      return NULL;
}
 401d5d8:	1805883a 	mov	r2,r3
 401d5dc:	dfc00017 	ldw	ra,0(sp)
 401d5e0:	dec00104 	addi	sp,sp,4
 401d5e4:	f800283a 	ret

0401d5e8 <pffindproto>:
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
 401d5e8:	deffff04 	addi	sp,sp,-4
#ifdef IP_RAW
   if (type == SOCK_RAW)
 401d5ec:	008000c4 	movi	r2,3
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
 401d5f0:	dfc00015 	stw	ra,0(sp)
 401d5f4:	2007883a 	mov	r3,r4
#ifdef IP_RAW
   if (type == SOCK_RAW)
 401d5f8:	30800d26 	beq	r6,r2,401d630 <pffindproto+0x48>
      return(pffindtype(domain, type));
#endif

   switch (protocol)
 401d5fc:	00800184 	movi	r2,6
 401d600:	28800826 	beq	r5,r2,401d624 <pffindproto+0x3c>
 401d604:	00800444 	movi	r2,17
 401d608:	28800d26 	beq	r5,r2,401d640 <pffindproto+0x58>
 401d60c:	28000726 	beq	r5,zero,401d62c <pffindproto+0x44>
   case 0:
      /* let protocol default based on socket type */
      break;
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
 401d610:	401c81c0 	call	401c81c <dtrap>
      return NULL;
   }
   return(pffindtype(domain, type));   /* map to findtype */
}
 401d614:	0005883a 	mov	r2,zero
 401d618:	dfc00017 	ldw	ra,0(sp)
 401d61c:	dec00104 	addi	sp,sp,4
 401d620:	f800283a 	ret

   switch (protocol)
   {
#ifdef BSD_SOCKETS
   case IPPROTO_TCP:
      if (type == SOCK_STREAM)
 401d624:	00800044 	movi	r2,1
 401d628:	30bff91e 	bne	r6,r2,401d610 <pffindproto+0x28>
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
      return NULL;
   }
   return(pffindtype(domain, type));   /* map to findtype */
 401d62c:	1809883a 	mov	r4,r3
 401d630:	300b883a 	mov	r5,r6
}
 401d634:	dfc00017 	ldw	ra,0(sp)
 401d638:	dec00104 	addi	sp,sp,4
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
      return NULL;
   }
   return(pffindtype(domain, type));   /* map to findtype */
 401d63c:	401d57c1 	jmpi	401d57c <pffindtype>
         break;
      /* IPPROTO_TCP protocol on non-SOCK_STREAM type socket */
      dtrap();
      return NULL;
   case IPPROTO_UDP:
      if (type == SOCK_DGRAM)
 401d640:	00800084 	movi	r2,2
 401d644:	30bff21e 	bne	r6,r2,401d610 <pffindproto+0x28>
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
      return NULL;
   }
   return(pffindtype(domain, type));   /* map to findtype */
 401d648:	1809883a 	mov	r4,r3
 401d64c:	003ff806 	br	401d630 <pffindproto+0x48>

0401d650 <m_free>:
m_free(struct mbuf * m)
{
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
 401d650:	00810134 	movhi	r2,1028
 401d654:	108d0c04 	addi	r2,r2,13360
 401d658:	10c00217 	ldw	r3,8(r2)
 */


struct mbuf *  
m_free(struct mbuf * m)
{
 401d65c:	defffd04 	addi	sp,sp,-12
 401d660:	dc000015 	stw	r16,0(sp)
 401d664:	dfc00215 	stw	ra,8(sp)
 401d668:	dc400115 	stw	r17,4(sp)
 401d66c:	2021883a 	mov	r16,r4
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
 401d670:	00c02e0e 	bge	zero,r3,401d72c <m_free+0xdc>
      panic("mfree: q_len");

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
 401d674:	81000817 	ldw	r4,32(r16)
 401d678:	00800304 	movi	r2,12
 401d67c:	20ffffc4 	addi	r3,r4,-1
 401d680:	10c0042e 	bgeu	r2,r3,401d694 <m_free+0x44>
   {
      if (m->m_type == MT_FREE)
 401d684:	20002126 	beq	r4,zero,401d70c <m_free+0xbc>
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
         return m->m_next; /* seems harmless, though.... */
      }
      else
         panic("m_free: type");
 401d688:	010100f4 	movhi	r4,1027
 401d68c:	2114c304 	addi	r4,r4,21260
 401d690:	4019c440 	call	4019c44 <panic>
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */

   if (qdel(&mbufq, m) == NULL)
 401d694:	01010134 	movhi	r4,1028
 401d698:	210d0c04 	addi	r4,r4,13360
 401d69c:	800b883a 	mov	r5,r16
      else
         panic("m_free: type");
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */
 401d6a0:	84400617 	ldw	r17,24(r16)

   if (qdel(&mbufq, m) == NULL)
 401d6a4:	401c1d00 	call	401c1d0 <qdel>
 401d6a8:	10002426 	beq	r2,zero,401d73c <m_free+0xec>
      panic("m_free: missing");

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */

   if (m->pkt)
 401d6ac:	80800117 	ldw	r2,4(r16)
   nextptr = m->m_next;    /* remember value to return */

   if (qdel(&mbufq, m) == NULL)
      panic("m_free: missing");

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */
 401d6b0:	80000815 	stw	zero,32(r16)

   if (m->pkt)
 401d6b4:	10000626 	beq	r2,zero,401d6d0 <m_free+0x80>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401d6b8:	01000084 	movi	r4,2
 401d6bc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(m->pkt);     /* free up the netport buffer */
 401d6c0:	81000117 	ldw	r4,4(r16)
 401d6c4:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401d6c8:	01000084 	movi	r4,2
 401d6cc:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   }
   mbstat.frees++;
 401d6d0:	00c10134 	movhi	r3,1028
 401d6d4:	18e93a04 	addi	r3,r3,-23320
 401d6d8:	18800017 	ldw	r2,0(r3)
   putq(&mfreeq, (qp)m);
 401d6dc:	800b883a 	mov	r5,r16
 401d6e0:	01010134 	movhi	r4,1028
 401d6e4:	210d1104 	addi	r4,r4,13380
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(m->pkt);     /* free up the netport buffer */
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   }
   mbstat.frees++;
 401d6e8:	10800044 	addi	r2,r2,1
 401d6ec:	18800015 	stw	r2,0(r3)
   putq(&mfreeq, (qp)m);
 401d6f0:	401c2940 	call	401c294 <putq>
   return nextptr;
}
 401d6f4:	8805883a 	mov	r2,r17
 401d6f8:	dfc00217 	ldw	ra,8(sp)
 401d6fc:	dc400117 	ldw	r17,4(sp)
 401d700:	dc000017 	ldw	r16,0(sp)
 401d704:	dec00304 	addi	sp,sp,12
 401d708:	f800283a 	ret

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
   {
      if (m->m_type == MT_FREE)
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
 401d70c:	401c81c0 	call	401c81c <dtrap>
         return m->m_next; /* seems harmless, though.... */
 401d710:	84400617 	ldw	r17,24(r16)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   }
   mbstat.frees++;
   putq(&mfreeq, (qp)m);
   return nextptr;
}
 401d714:	8805883a 	mov	r2,r17
 401d718:	dfc00217 	ldw	ra,8(sp)
 401d71c:	dc400117 	ldw	r17,4(sp)
 401d720:	dc000017 	ldw	r16,0(sp)
 401d724:	dec00304 	addi	sp,sp,12
 401d728:	f800283a 	ret
{
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
      panic("mfree: q_len");
 401d72c:	010100f4 	movhi	r4,1027
 401d730:	2114bf04 	addi	r4,r4,21244
 401d734:	4019c440 	call	4019c44 <panic>
 401d738:	003fce06 	br	401d674 <m_free+0x24>
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */

   if (qdel(&mbufq, m) == NULL)
      panic("m_free: missing");
 401d73c:	010100f4 	movhi	r4,1027
 401d740:	2114c704 	addi	r4,r4,21276
 401d744:	4019c440 	call	4019c44 <panic>
 401d748:	003fd806 	br	401d6ac <m_free+0x5c>

0401d74c <m_freem>:
 * RETURNS: 
 */

void
m_freem(struct mbuf * m)
{
 401d74c:	deffff04 	addi	sp,sp,-4
 401d750:	dfc00015 	stw	ra,0(sp)
   while (m != NULL)
 401d754:	20000326 	beq	r4,zero,401d764 <m_freem+0x18>
      m = m_free(m);
 401d758:	401d6500 	call	401d650 <m_free>
 401d75c:	1009883a 	mov	r4,r2
 */

void
m_freem(struct mbuf * m)
{
   while (m != NULL)
 401d760:	103ffd1e 	bne	r2,zero,401d758 <m_freem+0xc>
      m = m_free(m);
}
 401d764:	dfc00017 	ldw	ra,0(sp)
 401d768:	dec00104 	addi	sp,sp,4
 401d76c:	f800283a 	ret

0401d770 <ip_output>:
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
 401d770:	defff704 	addi	sp,sp,-36
 401d774:	dc000015 	stw	r16,0(sp)
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
 401d778:	24000617 	ldw	r16,24(r4)
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
 401d77c:	dd800615 	stw	r22,24(sp)
 401d780:	dc800215 	stw	r18,8(sp)
 401d784:	dfc00815 	stw	ra,32(sp)
 401d788:	ddc00715 	stw	r23,28(sp)
 401d78c:	dd400515 	stw	r21,20(sp)
 401d790:	dd000415 	stw	r20,16(sp)
 401d794:	dcc00315 	stw	r19,12(sp)
 401d798:	dc400115 	stw	r17,4(sp)
 401d79c:	2025883a 	mov	r18,r4
 401d7a0:	282d883a 	mov	r22,r5
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
 401d7a4:	80001f26 	beq	r16,zero,401d824 <ip_output+0xb4>
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 401d7a8:	82000217 	ldw	r8,8(r16)
 401d7ac:	00800244 	movi	r2,9
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
            m1->m_len += m2->m_len;
            m1->m_next = m2->m_next;
            m_free(m2);    /* free this m2.... */
            m2 = m1->m_next;  /* ...and thread the next one */
            tcpstat.tcps_oappends++;
 401d7b0:	05410134 	movhi	r21,1028
 401d7b4:	ad4d2b04 	addi	r21,r21,13484
      {
         pkt = m1->pkt;
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
 401d7b8:	400d883a 	mov	r6,r8
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 401d7bc:	12005236 	bltu	r2,r8,401d908 <ip_output+0x198>
      {
         pkt = m1->pkt;
 401d7c0:	91000117 	ldw	r4,4(r18)
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 401d7c4:	90800317 	ldw	r2,12(r18)
 401d7c8:	91400217 	ldw	r5,8(r18)
 401d7cc:	21c00217 	ldw	r7,8(r4)
 401d7d0:	20c00117 	ldw	r3,4(r4)
 401d7d4:	1145883a 	add	r2,r2,r5
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
 401d7d8:	1009883a 	mov	r4,r2

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
      {
         pkt = m1->pkt;
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 401d7dc:	19c7883a 	add	r3,r3,r7
 401d7e0:	1205883a 	add	r2,r2,r8
 401d7e4:	10c0482e 	bgeu	r2,r3,401d908 <ip_output+0x198>
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
 401d7e8:	81400317 	ldw	r5,12(r16)
 401d7ec:	40096480 	call	4009648 <memcpy>
            m1->m_len += m2->m_len;
 401d7f0:	80c00217 	ldw	r3,8(r16)
 401d7f4:	90800217 	ldw	r2,8(r18)
            m1->m_next = m2->m_next;
 401d7f8:	81000617 	ldw	r4,24(r16)
         pkt = m1->pkt;
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
            m1->m_len += m2->m_len;
 401d7fc:	10c5883a 	add	r2,r2,r3
            m1->m_next = m2->m_next;
 401d800:	91000615 	stw	r4,24(r18)
         pkt = m1->pkt;
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
            m1->m_len += m2->m_len;
 401d804:	90800215 	stw	r2,8(r18)
            m1->m_next = m2->m_next;
            m_free(m2);    /* free this m2.... */
 401d808:	8009883a 	mov	r4,r16
 401d80c:	401d6500 	call	401d650 <m_free>
            m2 = m1->m_next;  /* ...and thread the next one */
            tcpstat.tcps_oappends++;
 401d810:	a8c03317 	ldw	r3,204(r21)
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
            m1->m_len += m2->m_len;
            m1->m_next = m2->m_next;
            m_free(m2);    /* free this m2.... */
            m2 = m1->m_next;  /* ...and thread the next one */
 401d814:	94000617 	ldw	r16,24(r18)
            tcpstat.tcps_oappends++;
 401d818:	18c00044 	addi	r3,r3,1
 401d81c:	a8c03315 	stw	r3,204(r21)
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 401d820:	803fe11e 	bne	r16,zero,401d7a8 <ip_output+0x38>
 401d824:	05c10134 	movhi	r23,1028
 401d828:	bde90c04 	addi	r23,r23,-23504
         data->m_data = pkt->nb_prot;
         data->m_len = total;
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
 401d82c:	94400117 	ldw	r17,4(r18)
 401d830:	b8c00017 	ldw	r3,0(r23)
 401d834:	94000317 	ldw	r16,12(r18)
 401d838:	88800117 	ldw	r2,4(r17)
 401d83c:	10c5883a 	add	r2,r2,r3
 401d840:	80802b36 	bltu	r16,r2,401d8f0 <ip_output+0x180>
      panic("ip_output: overflow");

   pkt = data->pkt;

   /* do we have options? */
   if (so_optsPack)
 401d844:	b0000126 	beq	r22,zero,401d84c <ip_output+0xdc>
	   pkt->soxopts = so_optsPack;   /* yup */
 401d848:	8d800c15 	stw	r22,48(r17)
   bip = (struct ip *)data->m_data;
   pkt->fhost = bip->ip_dest;

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
 401d84c:	80c0008b 	ldhu	r3,2(r16)
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
   pkt->fhost = bip->ip_dest;
 401d850:	81000417 	ldw	r4,16(r16)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
 401d854:	00801144 	movi	r2,69
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
 401d858:	180a923a 	slli	r5,r3,8
 401d85c:	1806d23a 	srli	r3,r3,8
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
   pkt->fhost = bip->ip_dest;
 401d860:	89000715 	stw	r4,28(r17)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
 401d864:	80800005 	stb	r2,0(r16)
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
 401d868:	1946b03a 	or	r3,r3,r5
 401d86c:	80c0008d 	sth	r3,2(r16)
   tcpp = (struct tcphdr *)ip_data(bip);
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
 401d870:	8009883a 	mov	r4,r16
 401d874:	402df280 	call	402df28 <tcp_cksum>

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
   pkt->nb_plen = data->m_len - sizeof(struct ip);
 401d878:	90c00217 	ldw	r3,8(r18)
   pkt->fhost = bip->ip_dest;

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
   tcpp = (struct tcphdr *)ip_data(bip);
 401d87c:	84000504 	addi	r16,r16,20
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
 401d880:	8080040d 	sth	r2,16(r16)

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
   pkt->nb_plen = data->m_len - sizeof(struct ip);
 401d884:	18fffb04 	addi	r3,r3,-20
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
 401d888:	8c000315 	stw	r16,12(r17)
   pkt->nb_plen = data->m_len - sizeof(struct ip);

   e = ip_write(IPPROTO_TCP, pkt);
 401d88c:	01000184 	movi	r4,6
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
   pkt->nb_plen = data->m_len - sizeof(struct ip);
 401d890:	88c00415 	stw	r3,16(r17)

   e = ip_write(IPPROTO_TCP, pkt);
 401d894:	880b883a 	mov	r5,r17
 401d898:	40295240 	call	4029524 <ip_write>
 401d89c:	1021883a 	mov	r16,r2

   /* ip_write() is now responsable for data->pkt, so... */
   data->pkt = NULL;
 401d8a0:	90000115 	stw	zero,4(r18)
   m_freem(data);
 401d8a4:	9009883a 	mov	r4,r18
 401d8a8:	401d74c0 	call	401d74c <m_freem>

   if (e < 0)
 401d8ac:	80000d16 	blt	r16,zero,401d8e4 <ip_output+0x174>
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
 401d8b0:	0021883a 	mov	r16,zero
         return 0;
      return e;
   }
   else
      return 0;
}
 401d8b4:	8005883a 	mov	r2,r16
 401d8b8:	dfc00817 	ldw	ra,32(sp)
 401d8bc:	ddc00717 	ldw	r23,28(sp)
 401d8c0:	dd800617 	ldw	r22,24(sp)
 401d8c4:	dd400517 	ldw	r21,20(sp)
 401d8c8:	dd000417 	ldw	r20,16(sp)
 401d8cc:	dcc00317 	ldw	r19,12(sp)
 401d8d0:	dc800217 	ldw	r18,8(sp)
 401d8d4:	dc400117 	ldw	r17,4(sp)
 401d8d8:	dc000017 	ldw	r16,0(sp)
 401d8dc:	dec00904 	addi	sp,sp,36
 401d8e0:	f800283a 	ret

   if (e < 0)
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
 401d8e4:	00bffa84 	movi	r2,-22
 401d8e8:	80bff21e 	bne	r16,r2,401d8b4 <ip_output+0x144>
 401d8ec:	003ff006 	br	401d8b0 <ip_output+0x140>
         data->m_len = total;
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
      panic("ip_output: overflow");
 401d8f0:	010100f4 	movhi	r4,1027
 401d8f4:	2114d604 	addi	r4,r4,21336
 401d8f8:	4019c440 	call	4019c44 <panic>
 401d8fc:	94400117 	ldw	r17,4(r18)
 401d900:	94000317 	ldw	r16,12(r18)
 401d904:	003fcf06 	br	401d844 <ip_output+0xd4>

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
      {
         pkt = m1->pkt;
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 401d908:	9027883a 	mov	r19,r18
 401d90c:	05c10134 	movhi	r23,1028
 401d910:	bde90c04 	addi	r23,r23,-23504
 401d914:	00001f06 	br	401d994 <ip_output+0x224>
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
 401d918:	99000217 	ldw	r4,8(r19)
 401d91c:	8885c83a 	sub	r2,r17,r2
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 401d920:	200d883a 	mov	r6,r4
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
 401d924:	20c000cc 	andi	r3,r4,3
 401d928:	20802e2e 	bgeu	r4,r2,401d9e4 <ip_output+0x274>
 401d92c:	18002d1e 	bne	r3,zero,401d9e4 <ip_output+0x274>
 401d930:	80800117 	ldw	r2,4(r16)
 401d934:	80c00317 	ldw	r3,12(r16)
 401d938:	11400117 	ldw	r5,4(r2)
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 401d93c:	1909c83a 	sub	r4,r3,r4
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
 401d940:	18fff204 	addi	r3,r3,-56
 401d944:	28c0271e 	bne	r5,r3,401d9e4 <ip_output+0x274>
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 401d948:	99400317 	ldw	r5,12(r19)
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
            m2->m_len += m1->m_len;
            m_free(m1);    /* free head (copied) mbuf */
            data = m1 = m2;   /* move other mbufs up the chain */
            m2 = m2->m_next;  /* loop to while(m2) test */
            tcpstat.tcps_oprepends++;
 401d94c:	8025883a 	mov	r18,r16

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 401d950:	40096480 	call	4009648 <memcpy>
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
 401d954:	99000217 	ldw	r4,8(r19)
 401d958:	80c00317 	ldw	r3,12(r16)
            m2->m_len += m1->m_len;
 401d95c:	80800217 	ldw	r2,8(r16)
         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
 401d960:	1907c83a 	sub	r3,r3,r4
            m2->m_len += m1->m_len;
 401d964:	1105883a 	add	r2,r2,r4
 401d968:	80800215 	stw	r2,8(r16)
            m_free(m1);    /* free head (copied) mbuf */
 401d96c:	9809883a 	mov	r4,r19
         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
 401d970:	80c00315 	stw	r3,12(r16)
            m2->m_len += m1->m_len;
            m_free(m1);    /* free head (copied) mbuf */
 401d974:	401d6500 	call	401d650 <m_free>
            data = m1 = m2;   /* move other mbufs up the chain */
            m2 = m2->m_next;  /* loop to while(m2) test */
            tcpstat.tcps_oprepends++;
 401d978:	a8803217 	ldw	r2,200(r21)
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
            m2->m_len += m1->m_len;
            m_free(m1);    /* free head (copied) mbuf */
            data = m1 = m2;   /* move other mbufs up the chain */
            m2 = m2->m_next;  /* loop to while(m2) test */
 401d97c:	81000617 	ldw	r4,24(r16)
            tcpstat.tcps_oprepends++;
 401d980:	8027883a 	mov	r19,r16
 401d984:	10800044 	addi	r2,r2,1
 401d988:	a8803215 	stw	r2,200(r21)
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
 401d98c:	20004d26 	beq	r4,zero,401dac4 <ip_output+0x354>
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 401d990:	2021883a 	mov	r16,r4
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
 401d994:	80800117 	ldw	r2,4(r16)
 401d998:	81400317 	ldw	r5,12(r16)
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
            m2->m_len += m1->m_len;
            m_free(m1);    /* free head (copied) mbuf */
            data = m1 = m2;   /* move other mbufs up the chain */
            m2 = m2->m_next;  /* loop to while(m2) test */
            tcpstat.tcps_oprepends++;
 401d99c:	05410134 	movhi	r21,1028
 401d9a0:	ad4d2b04 	addi	r21,r21,13484
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
 401d9a4:	10c00117 	ldw	r3,4(r2)
         if (e < MaxLnh)
 401d9a8:	b8800017 	ldw	r2,0(r23)
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
 401d9ac:	010100f4 	movhi	r4,1027
 401d9b0:	2114cb04 	addi	r4,r4,21292
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
 401d9b4:	28e3c83a 	sub	r17,r5,r3
         if (e < MaxLnh)
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
 401d9b8:	880d883a 	mov	r6,r17
 401d9bc:	100b883a 	mov	r5,r2

      while (m2)  /* If we still have two or more buffers, more copying: */
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
         if (e < MaxLnh)
 401d9c0:	88bfd50e 	bge	r17,r2,401d918 <ip_output+0x1a8>
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
 401d9c4:	4002ed40 	call	4002ed4 <printf>
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
 401d9c8:	010100f4 	movhi	r4,1027
 401d9cc:	2114d104 	addi	r4,r4,21316
 401d9d0:	4019c440 	call	4019c44 <panic>
 401d9d4:	00810134 	movhi	r2,1028
 401d9d8:	10a90c04 	addi	r2,r2,-23504
 401d9dc:	10800017 	ldw	r2,0(r2)
 401d9e0:	003fcd06 	br	401d918 <ip_output+0x1a8>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
 401d9e4:	9807883a 	mov	r3,r19
 401d9e8:	0029883a 	mov	r20,zero

      if (m2)  /* If all else fails, brute force copy: */
      {
         total = 0;
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
            total += mtmp->m_len;
 401d9ec:	18800217 	ldw	r2,8(r3)
      }

      if (m2)  /* If all else fails, brute force copy: */
      {
         total = 0;
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 401d9f0:	18c00617 	ldw	r3,24(r3)
            total += mtmp->m_len;
 401d9f4:	a0a9883a 	add	r20,r20,r2
      }

      if (m2)  /* If all else fails, brute force copy: */
      {
         total = 0;
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 401d9f8:	183ffc1e 	bne	r3,zero,401d9ec <ip_output+0x27c>
            total += mtmp->m_len;
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401d9fc:	01000084 	movi	r4,2
 401da00:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pkt = pk_alloc(total + HDRSLEN);
 401da04:	a1000e04 	addi	r4,r20,56
 401da08:	401bf840 	call	401bf84 <pk_alloc>
 401da0c:	1023883a 	mov	r17,r2
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401da10:	01000084 	movi	r4,2
 401da14:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         if (!pkt)
 401da18:	88002c26 	beq	r17,zero,401dacc <ip_output+0x35c>
            return ENOBUFS;
         pkt->nb_prot = pkt->nb_buff + MaxLnh;
 401da1c:	88c00117 	ldw	r3,4(r17)
 401da20:	b8800017 	ldw	r2,0(r23)
 401da24:	9821883a 	mov	r16,r19
 401da28:	05410134 	movhi	r21,1028
 401da2c:	ad4d2b04 	addi	r21,r21,13484
 401da30:	188f883a 	add	r7,r3,r2
 401da34:	89c00315 	stw	r7,12(r17)

         mtmp = m1;
         while (mtmp)
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
 401da38:	81400317 	ldw	r5,12(r16)
 401da3c:	81800217 	ldw	r6,8(r16)
 401da40:	3809883a 	mov	r4,r7
 401da44:	40096480 	call	4009648 <memcpy>
            pkt->nb_prot += mtmp->m_len;
 401da48:	80c00217 	ldw	r3,8(r16)
 401da4c:	89c00317 	ldw	r7,12(r17)
            pkt->nb_plen += mtmp->m_len;
 401da50:	88800417 	ldw	r2,16(r17)
            m2 = mtmp;
            mtmp = mtmp->m_next;
            if (m2 != data)   /* save original head */
               m_free(m2);
 401da54:	8009883a 	mov	r4,r16

         mtmp = m1;
         while (mtmp)
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
            pkt->nb_prot += mtmp->m_len;
 401da58:	38cf883a 	add	r7,r7,r3
            pkt->nb_plen += mtmp->m_len;
 401da5c:	10c5883a 	add	r2,r2,r3
 401da60:	88800415 	stw	r2,16(r17)

         mtmp = m1;
         while (mtmp)
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
            pkt->nb_prot += mtmp->m_len;
 401da64:	89c00315 	stw	r7,12(r17)
            pkt->nb_plen += mtmp->m_len;
            m2 = mtmp;
            mtmp = mtmp->m_next;
 401da68:	84c00617 	ldw	r19,24(r16)
            if (m2 != data)   /* save original head */
 401da6c:	94000226 	beq	r18,r16,401da78 <ip_output+0x308>
               m_free(m2);
 401da70:	401d6500 	call	401d650 <m_free>
 401da74:	89c00317 	ldw	r7,12(r17)
            tcpstat.tcps_ocopies++;
 401da78:	a8803417 	ldw	r2,208(r21)
         if (!pkt)
            return ENOBUFS;
         pkt->nb_prot = pkt->nb_buff + MaxLnh;

         mtmp = m1;
         while (mtmp)
 401da7c:	9821883a 	mov	r16,r19
            pkt->nb_plen += mtmp->m_len;
            m2 = mtmp;
            mtmp = mtmp->m_next;
            if (m2 != data)   /* save original head */
               m_free(m2);
            tcpstat.tcps_ocopies++;
 401da80:	10800044 	addi	r2,r2,1
 401da84:	a8803415 	stw	r2,208(r21)
         if (!pkt)
            return ENOBUFS;
         pkt->nb_prot = pkt->nb_buff + MaxLnh;

         mtmp = m1;
         while (mtmp)
 401da88:	983feb1e 	bne	r19,zero,401da38 <ip_output+0x2c8>
            mtmp = mtmp->m_next;
            if (m2 != data)   /* save original head */
               m_free(m2);
            tcpstat.tcps_ocopies++;
         }
         pkt->nb_prot -= total;     /* fix data pointer */
 401da8c:	3d05c83a 	sub	r2,r7,r20
 401da90:	88800315 	stw	r2,12(r17)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401da94:	01000084 	movi	r4,2
 401da98:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(data->pkt);
 401da9c:	91000117 	ldw	r4,4(r18)
 401daa0:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401daa4:	01000084 	movi	r4,2
 401daa8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         data->pkt = pkt;
         data->m_len = pkt->nb_plen;
         data->m_next = NULL;
         data->m_data = pkt->nb_prot;
 401daac:	8c000317 	ldw	r16,12(r17)
         data->m_len = total;
 401dab0:	95000215 	stw	r20,8(r18)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
         pk_free(data->pkt);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         data->pkt = pkt;
 401dab4:	94400115 	stw	r17,4(r18)
         data->m_len = pkt->nb_plen;
         data->m_next = NULL;
         data->m_data = pkt->nb_prot;
 401dab8:	94000315 	stw	r16,12(r18)
         LOCK_NET_RESOURCE(FREEQ_RESID);
         pk_free(data->pkt);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         data->pkt = pkt;
         data->m_len = pkt->nb_plen;
         data->m_next = NULL;
 401dabc:	90000615 	stw	zero,24(r18)
 401dac0:	003f5a06 	br	401d82c <ip_output+0xbc>

   if (e < 0)
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
 401dac4:	8025883a 	mov	r18,r16
 401dac8:	003f5806 	br	401d82c <ip_output+0xbc>
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
            total += mtmp->m_len;
         LOCK_NET_RESOURCE(FREEQ_RESID);
         pkt = pk_alloc(total + HDRSLEN);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         if (!pkt)
 401dacc:	04001a44 	movi	r16,105
 401dad0:	003f7806 	br	401d8b4 <ip_output+0x144>

0401dad4 <m_getnbuf>:
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
 401dad4:	defffb04 	addi	sp,sp,-20
   struct mbuf *  m;
   PACKET pkt = NULL;

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
 401dad8:	20ffffc4 	addi	r3,r4,-1
 401dadc:	00800304 	movi	r2,12
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
 401dae0:	dcc00315 	stw	r19,12(sp)
 401dae4:	dc000015 	stw	r16,0(sp)
 401dae8:	dfc00415 	stw	ra,16(sp)
 401daec:	dc800215 	stw	r18,8(sp)
 401daf0:	dc400115 	stw	r17,4(sp)
 401daf4:	2027883a 	mov	r19,r4
 401daf8:	2821883a 	mov	r16,r5
   struct mbuf *  m;
   PACKET pkt = NULL;

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
 401dafc:	10c02a36 	bltu	r2,r3,401dba8 <m_getnbuf+0xd4>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
 401db00:	8024c03a 	cmpne	r18,r16,zero
 401db04:	90002b1e 	bne	r18,zero,401dbb4 <m_getnbuf+0xe0>
 401db08:	0023883a 	mov	r17,zero
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      if (!pkt)
         return NULL;
   }

   m = (struct mbuf *)getq(&mfreeq);
 401db0c:	01010134 	movhi	r4,1028
 401db10:	210d1104 	addi	r4,r4,13380
 401db14:	401c2f40 	call	401c2f4 <getq>
 401db18:	1009883a 	mov	r4,r2
   if (!m)
 401db1c:	10002f26 	beq	r2,zero,401dbdc <m_getnbuf+0x108>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      if (!pkt)
         return NULL;
   }

   m = (struct mbuf *)getq(&mfreeq);
 401db20:	1021883a 	mov	r16,r2
         pk_free(pkt);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
      }
      return NULL;
   }
   m->m_type = type;
 401db24:	14c00815 	stw	r19,32(r2)
   if (len == 0)
 401db28:	9000151e 	bne	r18,zero,401db80 <m_getnbuf+0xac>
   {
      m->pkt = NULL;
 401db2c:	10000115 	stw	zero,4(r2)
      m->m_base = NULL;    /* caller better fill these in! */
 401db30:	10000415 	stw	zero,16(r2)
      m->m_memsz = 0;
 401db34:	10000515 	stw	zero,20(r2)
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
      m->m_memsz = pkt->nb_blen - HDRSLEN;
   }
   m->m_len = 0;
   m->m_next = m->m_act = NULL;
   mbstat.allocs++;        /* maintain local statistics */
 401db38:	d0a84217 	ldw	r2,-24312(gp)
      m->pkt = pkt;
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
      m->m_memsz = pkt->nb_blen - HDRSLEN;
   }
   m->m_len = 0;
 401db3c:	20000215 	stw	zero,8(r4)
   m->m_next = m->m_act = NULL;
 401db40:	20000715 	stw	zero,28(r4)
   mbstat.allocs++;        /* maintain local statistics */
 401db44:	10800044 	addi	r2,r2,1
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
      m->m_memsz = pkt->nb_blen - HDRSLEN;
   }
   m->m_len = 0;
   m->m_next = m->m_act = NULL;
 401db48:	20000615 	stw	zero,24(r4)
   mbstat.allocs++;        /* maintain local statistics */
   putq(&mbufq, (qp)m);
 401db4c:	200b883a 	mov	r5,r4
 401db50:	01010134 	movhi	r4,1028
 401db54:	210d0c04 	addi	r4,r4,13360
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
      m->m_memsz = pkt->nb_blen - HDRSLEN;
   }
   m->m_len = 0;
   m->m_next = m->m_act = NULL;
   mbstat.allocs++;        /* maintain local statistics */
 401db58:	d0a84215 	stw	r2,-24312(gp)
   putq(&mbufq, (qp)m);
 401db5c:	401c2940 	call	401c294 <putq>
   return m;
}
 401db60:	8005883a 	mov	r2,r16
 401db64:	dfc00417 	ldw	ra,16(sp)
 401db68:	dcc00317 	ldw	r19,12(sp)
 401db6c:	dc800217 	ldw	r18,8(sp)
 401db70:	dc400117 	ldw	r17,4(sp)
 401db74:	dc000017 	ldw	r16,0(sp)
 401db78:	dec00504 	addi	sp,sp,20
 401db7c:	f800283a 	ret
   }
   else
   {
      m->pkt = pkt;
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 401db80:	88800117 	ldw	r2,4(r17)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
 401db84:	88c00217 	ldw	r3,8(r17)
      m->m_base = NULL;    /* caller better fill these in! */
      m->m_memsz = 0;
   }
   else
   {
      m->pkt = pkt;
 401db88:	24400115 	stw	r17,4(r4)
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 401db8c:	10800e04 	addi	r2,r2,56
 401db90:	88800315 	stw	r2,12(r17)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
 401db94:	18fff204 	addi	r3,r3,-56
   }
   else
   {
      m->pkt = pkt;
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 401db98:	20800415 	stw	r2,16(r4)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
 401db9c:	20c00515 	stw	r3,20(r4)
   }
   else
   {
      m->pkt = pkt;
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 401dba0:	20800315 	stw	r2,12(r4)
 401dba4:	003fe406 	br	401db38 <m_getnbuf+0x64>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
 401dba8:	8024c03a 	cmpne	r18,r16,zero
   PACKET pkt = NULL;

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
   {
      dtrap(); /* is this OK? */
 401dbac:	401c81c0 	call	401c81c <dtrap>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
 401dbb0:	903fd526 	beq	r18,zero,401db08 <m_getnbuf+0x34>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401dbb4:	01000084 	movi	r4,2
 401dbb8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pkt = pk_alloc(len + HDRSLEN);
 401dbbc:	81000e04 	addi	r4,r16,56
 401dbc0:	401bf840 	call	401bf84 <pk_alloc>
 401dbc4:	1023883a 	mov	r17,r2

      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401dbc8:	01000084 	movi	r4,2
 401dbcc:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      if (!pkt)
 401dbd0:	883fce1e 	bne	r17,zero,401db0c <m_getnbuf+0x38>
   }
   m->m_len = 0;
   m->m_next = m->m_act = NULL;
   mbstat.allocs++;        /* maintain local statistics */
   putq(&mbufq, (qp)m);
   return m;
 401dbd4:	0021883a 	mov	r16,zero
 401dbd8:	003fe106 	br	401db60 <m_getnbuf+0x8c>
   }

   m = (struct mbuf *)getq(&mfreeq);
   if (!m)
   {
      if (pkt) 
 401dbdc:	883ffd26 	beq	r17,zero,401dbd4 <m_getnbuf+0x100>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401dbe0:	01000084 	movi	r4,2
 401dbe4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 401dbe8:	8809883a 	mov	r4,r17
 401dbec:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401dbf0:	01000084 	movi	r4,2
 401dbf4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401dbf8:	0021883a 	mov	r16,zero
 401dbfc:	003fd806 	br	401db60 <m_getnbuf+0x8c>

0401dc00 <tcp_rcv>:

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
 401dc00:	defffb04 	addi	sp,sp,-20
 401dc04:	dc800215 	stw	r18,8(sp)

   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
 401dc08:	24800317 	ldw	r18,12(r4)

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
 401dc0c:	dcc00315 	stw	r19,12(sp)
 401dc10:	dc400115 	stw	r17,4(sp)
 401dc14:	dfc00415 	stw	ra,16(sp)
 401dc18:	dc000015 	stw	r16,0(sp)
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
   len = ntohs(bip->ip_len);  /* get length in local endian */

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
 401dc1c:	94000003 	ldbu	r16,0(r18)

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
 401dc20:	2023883a 	mov	r17,r4
   len = ntohs(bip->ip_len);  /* get length in local endian */

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   if (tcp_cksum(bip) != tcpp->th_sum)
 401dc24:	9009883a 	mov	r4,r18
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
   len = ntohs(bip->ip_len);  /* get length in local endian */

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
 401dc28:	840003cc 	andi	r16,r16,15
 401dc2c:	8421883a 	add	r16,r16,r16
 401dc30:	8421883a 	add	r16,r16,r16
 401dc34:	84a1883a 	add	r16,r16,r18
   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
   len = ntohs(bip->ip_len);  /* get length in local endian */
 401dc38:	94c0008b 	ldhu	r19,2(r18)

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   if (tcp_cksum(bip) != tcpp->th_sum)
 401dc3c:	402df280 	call	402df28 <tcp_cksum>
 401dc40:	80c0040b 	ldhu	r3,16(r16)
 401dc44:	10bfffcc 	andi	r2,r2,65535
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 401dc48:	01810134 	movhi	r6,1028
 401dc4c:	318cfd04 	addi	r6,r6,13300
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 401dc50:	01c10134 	movhi	r7,1028
 401dc54:	39cd2b04 	addi	r7,r7,13484
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401dc58:	01000084 	movi	r4,2
      pk_free(pkt);  /* punt packet */
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_BAD_HEADER;
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
 401dc5c:	000b883a 	mov	r5,zero
   len = ntohs(bip->ip_len);  /* get length in local endian */

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   if (tcp_cksum(bip) != tcpp->th_sum)
 401dc60:	10c0231e 	bne	r2,r3,401dcf0 <tcp_rcv+0xf0>
      pk_free(pkt);  /* punt packet */
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_BAD_HEADER;
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
 401dc64:	01000044 	movi	r4,1
 401dc68:	401dad40 	call	401dad4 <m_getnbuf>
 401dc6c:	100f883a 	mov	r7,r2
   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
   len = ntohs(bip->ip_len);  /* get length in local endian */
 401dc70:	98bfffcc 	andi	r2,r19,65535
 401dc74:	1010923a 	slli	r8,r2,8
 401dc78:	100ad23a 	srli	r5,r2,8
      return ENP_BAD_HEADER;
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
   if (!m_in){
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401dc7c:	01000084 	movi	r4,2
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_BAD_HEADER;
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
   if (!m_in){
 401dc80:	38002826 	beq	r7,zero,401dd24 <tcp_rcv+0x124>

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 401dc84:	90800003 	ldbu	r2,0(r18)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
 401dc88:	88c00317 	ldw	r3,12(r17)
   m_in->m_len = pkt->nb_plen;
 401dc8c:	89000417 	ldw	r4,16(r17)

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 401dc90:	108003cc 	andi	r2,r2,15

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
 401dc94:	38c00315 	stw	r3,12(r7)
   m_in->m_len = pkt->nb_plen;
 401dc98:	39000215 	stw	r4,8(r7)
   m_in->m_base = pkt->nb_buff;     /* ??? */
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
 401dc9c:	89800217 	ldw	r6,8(r17)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;     /* ??? */
 401dca0:	89000117 	ldw	r4,4(r17)

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 401dca4:	1085883a 	add	r2,r2,r2
   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
   len = ntohs(bip->ip_len);  /* get length in local endian */
 401dca8:	2a06b03a 	or	r3,r5,r8

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 401dcac:	1085883a 	add	r2,r2,r2
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;     /* ??? */
   m_in->m_memsz = pkt->nb_blen;    /* ??? */

   tcp_input(m_in, pkt->net);
 401dcb0:	89400617 	ldw	r5,24(r17)

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 401dcb4:	1887c83a 	sub	r3,r3,r2

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;     /* ??? */
 401dcb8:	39000415 	stw	r4,16(r7)

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 401dcbc:	90c0008d 	sth	r3,2(r18)
   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;     /* ??? */
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
 401dcc0:	39800515 	stw	r6,20(r7)
   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
 401dcc4:	3c400115 	stw	r17,4(r7)
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;     /* ??? */
   m_in->m_memsz = pkt->nb_blen;    /* ??? */

   tcp_input(m_in, pkt->net);
 401dcc8:	3809883a 	mov	r4,r7
 401dccc:	40221d40 	call	40221d4 <tcp_input>
 401dcd0:	0005883a 	mov	r2,zero

   IN_PROFILER(PF_TCP, PF_EXIT);      /* measure time in TCP */

   return 0;
}
 401dcd4:	dfc00417 	ldw	ra,16(sp)
 401dcd8:	dcc00317 	ldw	r19,12(sp)
 401dcdc:	dc800217 	ldw	r18,8(sp)
 401dce0:	dc400117 	ldw	r17,4(sp)
 401dce4:	dc000017 	ldw	r16,0(sp)
 401dce8:	dec00504 	addi	sp,sp,20
 401dcec:	f800283a 	ret
   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   if (tcp_cksum(bip) != tcpp->th_sum)
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 401dcf0:	30800d17 	ldw	r2,52(r6)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 401dcf4:	38c01c17 	ldw	r3,112(r7)
   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   if (tcp_cksum(bip) != tcpp->th_sum)
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 401dcf8:	10800044 	addi	r2,r2,1
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 401dcfc:	18c00044 	addi	r3,r3,1
   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
   if (tcp_cksum(bip) != tcpp->th_sum)
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 401dd00:	30800d15 	stw	r2,52(r6)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 401dd04:	38c01c15 	stw	r3,112(r7)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401dd08:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(pkt);  /* punt packet */
 401dd0c:	8809883a 	mov	r4,r17
 401dd10:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401dd14:	01000084 	movi	r4,2
 401dd18:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401dd1c:	00bff804 	movi	r2,-32
 401dd20:	003fec06 	br	401dcd4 <tcp_rcv+0xd4>
      return ENP_BAD_HEADER;
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
   if (!m_in){
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401dd24:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 401dd28:	8809883a 	mov	r4,r17
 401dd2c:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401dd30:	01000084 	movi	r4,2
 401dd34:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401dd38:	00bffa84 	movi	r2,-22
 401dd3c:	003fe506 	br	401dcd4 <tcp_rcv+0xd4>

0401dd40 <m_copy>:
 * RETURNS: 
 */

struct mbuf *  
m_copy(struct mbuf * m, int off, int len)
{
 401dd40:	defff704 	addi	sp,sp,-36
 401dd44:	dd000415 	stw	r20,16(sp)
 401dd48:	dc400115 	stw	r17,4(sp)
 401dd4c:	dc000015 	stw	r16,0(sp)
 401dd50:	dfc00815 	stw	ra,32(sp)
 401dd54:	ddc00715 	stw	r23,28(sp)
 401dd58:	dd800615 	stw	r22,24(sp)
 401dd5c:	dd400515 	stw	r21,20(sp)
 401dd60:	dcc00315 	stw	r19,12(sp)
 401dd64:	dc800215 	stw	r18,8(sp)
 401dd68:	3029883a 	mov	r20,r6
 401dd6c:	2021883a 	mov	r16,r4
 401dd70:	2823883a 	mov	r17,r5
   struct mbuf *  nb, * head, *  tail;
   int   tocopy;

   if (len == 0)  /* nothing to do */
 401dd74:	30005f26 	beq	r6,zero,401def4 <m_copy+0x1b4>
      return NULL;

#ifdef NPDEBUG
   /* sanity test parms */
   if (off < 0 || (len < 0 && len != M_COPYALL))
 401dd78:	28003516 	blt	r5,zero,401de50 <m_copy+0x110>
 401dd7c:	00bfffc4 	movi	r2,-1
 401dd80:	30803316 	blt	r6,r2,401de50 <m_copy+0x110>
      return NULL;
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
 401dd84:	0440060e 	bge	zero,r17,401dda0 <m_copy+0x60>
   {
      if (!m)
 401dd88:	80003126 	beq	r16,zero,401de50 <m_copy+0x110>
      {
         dtrap();
         return NULL;
      }
      if (off < (int)m->m_len)
 401dd8c:	80800217 	ldw	r2,8(r16)
 401dd90:	88800316 	blt	r17,r2,401dda0 <m_copy+0x60>
         break;
      off -= m->m_len;
 401dd94:	88a3c83a 	sub	r17,r17,r2
      m = m->m_next;
 401dd98:	84000617 	ldw	r16,24(r16)
      return NULL;
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
 401dd9c:	047ffa16 	blt	zero,r17,401dd88 <m_copy+0x48>
      m = m->m_next;
   }

   head = tail = NULL;

   while (len > 0)
 401dda0:	0500540e 	bge	zero,r20,401def4 <m_copy+0x1b4>
   {
      if (m == NULL) /* at end of queue? */
 401dda4:	80005526 	beq	r16,zero,401defc <m_copy+0x1bc>
      {
         panic("m_copy: bad len");
         return NULL;
 401dda8:	002f883a 	mov	r23,zero
 401ddac:	002d883a 	mov	r22,zero
 401ddb0:	00000606 	br	401ddcc <m_copy+0x8c>
      }

      len -= tocopy;
      off = 0;
      if (tail)      /* head & tail are set by first pass thru loop */
         tail->m_next = nb;
 401ddb4:	b4800615 	stw	r18,24(r22)
      else
         head = nb;
      tail = nb;     /* always make new mbuf the tail */
      m = m->m_next;
 401ddb8:	84000617 	ldw	r16,24(r16)
      m = m->m_next;
   }

   head = tail = NULL;

   while (len > 0)
 401ddbc:	0500260e 	bge	zero,r20,401de58 <m_copy+0x118>
      return NULL;
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
 401ddc0:	902d883a 	mov	r22,r18
 401ddc4:	0023883a 	mov	r17,zero

   head = tail = NULL;

   while (len > 0)
   {
      if (m == NULL) /* at end of queue? */
 401ddc8:	80004c26 	beq	r16,zero,401defc <m_copy+0x1bc>
      {
         panic("m_copy: bad len");
         return NULL;
      }
      tocopy = (int)MIN(len, (int)(m->m_len - off));
 401ddcc:	80800217 	ldw	r2,8(r16)
 401ddd0:	1467c83a 	sub	r19,r2,r17
 401ddd4:	a4c0010e 	bge	r20,r19,401dddc <m_copy+0x9c>
 401ddd8:	a027883a 	mov	r19,r20
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
 401dddc:	888000cc 	andi	r2,r17,3
 401dde0:	1000041e 	bne	r2,zero,401ddf4 <m_copy+0xb4>
 401dde4:	80800117 	ldw	r2,4(r16)
 401dde8:	00c00044 	movi	r3,1
 401ddec:	15400917 	ldw	r21,36(r2)
 401ddf0:	a8c02526 	beq	r21,r3,401de88 <m_copy+0x148>
          (m->pkt->inuse != 1))
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
 401ddf4:	81000817 	ldw	r4,32(r16)
 401ddf8:	980b883a 	mov	r5,r19
 401ddfc:	401dad40 	call	401dad4 <m_getnbuf>
 401de00:	1025883a 	mov	r18,r2
 401de04:	10004226 	beq	r2,zero,401df10 <m_copy+0x1d0>
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
 401de08:	81400317 	ldw	r5,12(r16)
 401de0c:	11000317 	ldw	r4,12(r2)
 401de10:	980d883a 	mov	r6,r19
 401de14:	894b883a 	add	r5,r17,r5
 401de18:	40096480 	call	4009648 <memcpy>
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */

         tcpstat.tcps_mcopies++;
 401de1c:	00c10134 	movhi	r3,1028
 401de20:	18cd2b04 	addi	r3,r3,13484
 401de24:	19002e17 	ldw	r4,184(r3)
         tcpstat.tcps_mcopiedbytes += tocopy;
 401de28:	18803017 	ldw	r2,192(r3)
          (m->pkt->inuse != 1))
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */
 401de2c:	94c00215 	stw	r19,8(r18)

         tcpstat.tcps_mcopies++;
 401de30:	21000044 	addi	r4,r4,1
         tcpstat.tcps_mcopiedbytes += tocopy;
 401de34:	9885883a 	add	r2,r19,r2
 401de38:	18803015 	stw	r2,192(r3)
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */

         tcpstat.tcps_mcopies++;
 401de3c:	19002e15 	stw	r4,184(r3)

         tcpstat.tcps_mclones++;
         tcpstat.tcps_mclonedbytes += tocopy;
      }

      len -= tocopy;
 401de40:	a4e9c83a 	sub	r20,r20,r19
      off = 0;
      if (tail)      /* head & tail are set by first pass thru loop */
 401de44:	b03fdb1e 	bne	r22,zero,401ddb4 <m_copy+0x74>
 401de48:	902f883a 	mov	r23,r18
 401de4c:	003fda06 	br	401ddb8 <m_copy+0x78>
   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   {
      if (!m)
      {
         dtrap();
 401de50:	401c81c0 	call	401c81c <dtrap>
 401de54:	002f883a 	mov	r23,zero
   return head;

nospace:
   m_freem (head);
   return NULL;
}
 401de58:	b805883a 	mov	r2,r23
 401de5c:	dfc00817 	ldw	ra,32(sp)
 401de60:	ddc00717 	ldw	r23,28(sp)
 401de64:	dd800617 	ldw	r22,24(sp)
 401de68:	dd400517 	ldw	r21,20(sp)
 401de6c:	dd000417 	ldw	r20,16(sp)
 401de70:	dcc00317 	ldw	r19,12(sp)
 401de74:	dc800217 	ldw	r18,8(sp)
 401de78:	dc400117 	ldw	r17,4(sp)
 401de7c:	dc000017 	ldw	r16,0(sp)
 401de80:	dec00904 	addi	sp,sp,36
 401de84:	f800283a 	ret
      {
         /* Rather than memcpy every mbuf's data, "clone" the data by 
          * making a duplicate of the mbufs involved and bumping the 
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
 401de88:	81000817 	ldw	r4,32(r16)
 401de8c:	000b883a 	mov	r5,zero
 401de90:	401dad40 	call	401dad4 <m_getnbuf>
 401de94:	1025883a 	mov	r18,r2
 401de98:	10001d26 	beq	r2,zero,401df10 <m_copy+0x1d0>
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
 401de9c:	81400117 	ldw	r5,4(r16)
         nb->m_base = m->m_base;
         nb->m_memsz = m->m_memsz;
         nb->m_data = m->m_data + off;
         nb->m_len = tocopy;

         tcpstat.tcps_mclones++;
 401dea0:	01010134 	movhi	r4,1028
 401dea4:	210d2b04 	addi	r4,r4,13484

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
         nb->m_base = m->m_base;
         nb->m_memsz = m->m_memsz;
         nb->m_data = m->m_data + off;
 401dea8:	81c00317 	ldw	r7,12(r16)
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
 401deac:	28800917 	ldw	r2,36(r5)
         nb->m_base = m->m_base;
         nb->m_memsz = m->m_memsz;
         nb->m_data = m->m_data + off;
         nb->m_len = tocopy;

         tcpstat.tcps_mclones++;
 401deb0:	21802f17 	ldw	r6,188(r4)
         tcpstat.tcps_mclonedbytes += tocopy;
 401deb4:	20c03117 	ldw	r3,196(r4)
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
 401deb8:	1545883a 	add	r2,r2,r21
 401debc:	28800915 	stw	r2,36(r5)

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
         nb->m_base = m->m_base;
 401dec0:	82000417 	ldw	r8,16(r16)
         nb->m_memsz = m->m_memsz;
 401dec4:	80800517 	ldw	r2,20(r16)
         nb->m_data = m->m_data + off;
 401dec8:	3c4f883a 	add	r7,r7,r17
         nb->m_len = tocopy;

         tcpstat.tcps_mclones++;
 401decc:	354d883a 	add	r6,r6,r21
         tcpstat.tcps_mclonedbytes += tocopy;
 401ded0:	1cc7883a 	add	r3,r3,r19
 401ded4:	20c03115 	stw	r3,196(r4)
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
 401ded8:	91400115 	stw	r5,4(r18)
         nb->m_base = m->m_base;
 401dedc:	92000415 	stw	r8,16(r18)
         nb->m_memsz = m->m_memsz;
 401dee0:	90800515 	stw	r2,20(r18)
         nb->m_data = m->m_data + off;
 401dee4:	91c00315 	stw	r7,12(r18)
         nb->m_len = tocopy;

         tcpstat.tcps_mclones++;
 401dee8:	21802f15 	stw	r6,188(r4)
         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
         nb->m_base = m->m_base;
         nb->m_memsz = m->m_memsz;
         nb->m_data = m->m_data + off;
         nb->m_len = tocopy;
 401deec:	94c00215 	stw	r19,8(r18)
 401def0:	003fd306 	br	401de40 <m_copy+0x100>

   return head;

nospace:
   m_freem (head);
   return NULL;
 401def4:	002f883a 	mov	r23,zero
 401def8:	003fd706 	br	401de58 <m_copy+0x118>

   while (len > 0)
   {
      if (m == NULL) /* at end of queue? */
      {
         panic("m_copy: bad len");
 401defc:	010100f4 	movhi	r4,1027
 401df00:	2114db04 	addi	r4,r4,21356
 401df04:	4019c440 	call	4019c44 <panic>
 401df08:	002f883a 	mov	r23,zero
 401df0c:	003fd206 	br	401de58 <m_copy+0x118>
   }

   return head;

nospace:
   m_freem (head);
 401df10:	b809883a 	mov	r4,r23
 401df14:	401d74c0 	call	401d74c <m_freem>
 401df18:	002f883a 	mov	r23,zero
 401df1c:	003fce06 	br	401de58 <m_copy+0x118>

0401df20 <rawip_lookup>:
struct ipraw_ep *
rawip_lookup(struct socket * so)
{
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 401df20:	00810134 	movhi	r2,1028
 401df24:	10a95804 	addi	r2,r2,-23200
 401df28:	10c00017 	ldw	r3,0(r2)
 401df2c:	1800031e 	bne	r3,zero,401df3c <rawip_lookup+0x1c>
 401df30:	00000406 	br	401df44 <rawip_lookup+0x24>
 401df34:	18c00017 	ldw	r3,0(r3)
 401df38:	18000226 	beq	r3,zero,401df44 <rawip_lookup+0x24>
      if (tmp->ipr_data == (void*)so)
 401df3c:	18800417 	ldw	r2,16(r3)
 401df40:	113ffc1e 	bne	r2,r4,401df34 <rawip_lookup+0x14>
      return (tmp);

   return NULL;   /* didn't find it */
}
 401df44:	1805883a 	mov	r2,r3
 401df48:	f800283a 	ret

0401df4c <rawip_usrreq>:

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 401df4c:	defff804 	addi	sp,sp,-32
 401df50:	dc000115 	stw	r16,4(sp)
   u_char prot;
   struct ip * pip;
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */
 401df54:	24000717 	ldw	r16,28(r4)

   switch (req) 
 401df58:	00800404 	movi	r2,16

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 401df5c:	dcc00415 	stw	r19,16(sp)
 401df60:	dc800315 	stw	r18,12(sp)
 401df64:	dc400215 	stw	r17,8(sp)
 401df68:	dfc00715 	stw	ra,28(sp)
 401df6c:	dd400615 	stw	r21,24(sp)
 401df70:	dd000515 	stw	r20,20(sp)
 401df74:	2025883a 	mov	r18,r4
 401df78:	2827883a 	mov	r19,r5
 401df7c:	3023883a 	mov	r17,r6
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */

   switch (req) 
 401df80:	14001836 	bltu	r2,r16,401dfe4 <rawip_usrreq+0x98>
 401df84:	8405883a 	add	r2,r16,r16
 401df88:	1085883a 	add	r2,r2,r2
 401df8c:	00c100b4 	movhi	r3,1026
 401df90:	18f7e804 	addi	r3,r3,-8288
 401df94:	10c5883a 	add	r2,r2,r3
 401df98:	11000017 	ldw	r4,0(r2)
 401df9c:	2000683a 	jmp	r4
 401dfa0:	0401e010 	cmplti	r16,zero,1920
 401dfa4:	0401e128 	cmpgeui	r16,zero,1924
 401dfa8:	0401e0d0 	cmplti	r16,zero,1923
 401dfac:	0401dfe4 	muli	r16,zero,1919
 401dfb0:	0401e0d0 	cmplti	r16,zero,1923
 401dfb4:	0401dfe4 	muli	r16,zero,1919
 401dfb8:	0401e0c4 	movi	r16,1923
 401dfbc:	0401dfe4 	muli	r16,zero,1919
 401dfc0:	0401e0c4 	movi	r16,1923
 401dfc4:	0401e0a0 	cmpeqi	r16,zero,1922
 401dfc8:	0401dfe4 	muli	r16,zero,1919
 401dfcc:	0401dfe4 	muli	r16,zero,1919
 401dfd0:	0401dfe4 	muli	r16,zero,1919
 401dfd4:	0401dfe4 	muli	r16,zero,1919
 401dfd8:	0401dfe4 	muli	r16,zero,1919
 401dfdc:	0401e060 	cmpeqi	r16,zero,1921
 401dfe0:	0401e060 	cmpeqi	r16,zero,1921
 401dfe4:	00c017c4 	movi	r3,95
   case PRU_LISTEN:     /* don't support these for raw IP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 401dfe8:	1805883a 	mov	r2,r3
 401dfec:	dfc00717 	ldw	ra,28(sp)
 401dff0:	dd400617 	ldw	r21,24(sp)
 401dff4:	dd000517 	ldw	r20,20(sp)
 401dff8:	dcc00417 	ldw	r19,16(sp)
 401dffc:	dc800317 	ldw	r18,12(sp)
 401e000:	dc400217 	ldw	r17,8(sp)
 401e004:	dc000117 	ldw	r16,4(sp)
 401e008:	dec00804 	addi	sp,sp,32
 401e00c:	f800283a 	ret

   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
 401e010:	91000417 	ldw	r4,16(r18)
 401e014:	2108000c 	andi	r4,r4,8192
 401e018:	402b3c00 	call	402b3c0 <ip_raw_maxalloc>
 401e01c:	90800b15 	stw	r2,44(r18)
 401e020:	90801315 	stw	r2,76(r18)
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
      /* make a raw IP endpoint */
      prot = (u_char)(MBUF2LONG(nam));
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 401e024:	0009883a 	mov	r4,zero
 401e028:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ep = ip_raw_open(prot, 0L, 0L, rawip_soinput, so);
 401e02c:	000b883a 	mov	r5,zero
 401e030:	89003fcc 	andi	r4,r17,255
 401e034:	000d883a 	mov	r6,zero
 401e038:	01c100b4 	movhi	r7,1026
 401e03c:	39f8f704 	addi	r7,r7,-7204
 401e040:	dc800015 	stw	r18,0(sp)
 401e044:	402b6bc0 	call	402b6bc <ip_raw_open>
 401e048:	1023883a 	mov	r17,r2
      LOCK_NET_RESOURCE(NET_RESID);
 401e04c:	0009883a 	mov	r4,zero
 401e050:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      if (!ep)
 401e054:	8800321e 	bne	r17,zero,401e120 <rawip_usrreq+0x1d4>
      }
      return 0;
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
      return 0;
 401e058:	00c00584 	movi	r3,22
 401e05c:	003fe206 	br	401dfe8 <rawip_usrreq+0x9c>
         return(e);
      return 0;
   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 401e060:	303ffd26 	beq	r6,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      sin = mtod(nam, struct sockaddr_in *);
 401e064:	34c00317 	ldw	r19,12(r6)
      if (sin == NULL)
 401e068:	983ffb26 	beq	r19,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      ep = rawip_lookup(so);
 401e06c:	9009883a 	mov	r4,r18
 401e070:	401df200 	call	401df20 <rawip_lookup>
 401e074:	1007883a 	mov	r3,r2
      if (!ep)
 401e078:	103ff726 	beq	r2,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      sin->sin_port = 0;
      nam->m_len = sizeof(*sin);
 401e07c:	00800404 	movi	r2,16
 401e080:	88800215 	stw	r2,8(r17)
      if (req == PRU_SOCKADDR)
 401e084:	008003c4 	movi	r2,15
      if (sin == NULL)
         return(EINVAL);
      ep = rawip_lookup(so);
      if (!ep)
         return(EINVAL);
      sin->sin_port = 0;
 401e088:	9800008d 	sth	zero,2(r19)
      nam->m_len = sizeof(*sin);
      if (req == PRU_SOCKADDR)
 401e08c:	80803226 	beq	r16,r2,401e158 <rawip_usrreq+0x20c>
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
      }
      else /* PRU_PEERADDR */
      {
         sin->sin_addr.s_addr = ep->ipr_faddr;
 401e090:	18800217 	ldw	r2,8(r3)
 401e094:	0007883a 	mov	r3,zero
 401e098:	98800115 	stw	r2,4(r19)
 401e09c:	003fd206 	br	401dfe8 <rawip_usrreq+0x9c>
         sbflush(&so->so_rcv);   /* dump these now */
      }
      return 0;
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 401e0a0:	283fed26 	beq	r5,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);

      ep = rawip_lookup(so);
 401e0a4:	9009883a 	mov	r4,r18
 401e0a8:	401df200 	call	401df20 <rawip_lookup>
 401e0ac:	1029883a 	mov	r20,r2
      if (!ep)
 401e0b0:	10002d1e 	bne	r2,zero,401e168 <rawip_usrreq+0x21c>
      {
         m_free(m);
 401e0b4:	9809883a 	mov	r4,r19
 401e0b8:	401d6500 	call	401d650 <m_free>
 401e0bc:	00c01bc4 	movi	r3,111
 401e0c0:	003fc906 	br	401dfe8 <rawip_usrreq+0x9c>
         sin->sin_addr.s_addr = ep->ipr_faddr;
      }
      return 0;
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 401e0c4:	401c81c0 	call	401c81c <dtrap>
 401e0c8:	0007883a 	mov	r3,zero
 401e0cc:	003fc606 	br	401dfe8 <rawip_usrreq+0x9c>
       * a default address for sending
       */
      /* fall through to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 401e0d0:	303fe126 	beq	r6,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      sin = mtod(nam, struct sockaddr_in *);
 401e0d4:	34c00317 	ldw	r19,12(r6)
      if (sin == NULL)
 401e0d8:	983fdf26 	beq	r19,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      if (nam->m_len != sizeof (*sin))
 401e0dc:	30c00217 	ldw	r3,8(r6)
 401e0e0:	00800404 	movi	r2,16
 401e0e4:	18bfdc1e 	bne	r3,r2,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      ep = rawip_lookup(so);
 401e0e8:	9009883a 	mov	r4,r18
 401e0ec:	401df200 	call	401df20 <rawip_lookup>
 401e0f0:	100b883a 	mov	r5,r2
      if (!ep)
 401e0f4:	103fd826 	beq	r2,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      if (req == PRU_BIND)
 401e0f8:	00800084 	movi	r2,2
 401e0fc:	80802426 	beq	r16,r2,401e190 <rawip_usrreq+0x244>
          *
          * if the caller-supplied address is INADDR_ANY,
          * use the wildcard address; else, use the caller-
          * supplied address
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 401e100:	98c00117 	ldw	r3,4(r19)
 401e104:	1800321e 	bne	r3,zero,401e1d0 <rawip_usrreq+0x284>
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
            so->so_state |= SS_ISCONNECTED;
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
 401e108:	9080088b 	ldhu	r2,34(r18)
         if (sin->sin_addr.s_addr == INADDR_ANY)
            fhost = 0L;
         else
            fhost = sin->sin_addr.s_addr;
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
 401e10c:	28000215 	stw	zero,8(r5)
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
            so->so_state |= SS_ISCONNECTED;
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
 401e110:	10bfff4c 	andi	r2,r2,65533
 401e114:	9080088d 	sth	r2,34(r18)
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
 401e118:	91000a04 	addi	r4,r18,40
 401e11c:	4020d000 	call	4020d00 <sbflush>
 401e120:	0007883a 	mov	r3,zero
 401e124:	003fb006 	br	401dfe8 <rawip_usrreq+0x9c>
      if (!ep)
         return(EINVAL);
      return 0;
   case PRU_DETACH:
      /* delete the raw IP endpoint */
      ep = rawip_lookup(so);
 401e128:	9009883a 	mov	r4,r18
 401e12c:	401df200 	call	401df20 <rawip_lookup>
 401e130:	1021883a 	mov	r16,r2
      if (!ep)
 401e134:	103fc826 	beq	r2,zero,401e058 <rawip_usrreq+0x10c>
         return(EINVAL);
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 401e138:	0009883a 	mov	r4,zero
 401e13c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ip_raw_close(ep);
 401e140:	8009883a 	mov	r4,r16
 401e144:	402b64c0 	call	402b64c <ip_raw_close>
      LOCK_NET_RESOURCE(NET_RESID);
 401e148:	0009883a 	mov	r4,zero
 401e14c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
 401e150:	0007883a 	mov	r3,zero
 401e154:	003fa406 	br	401dfe8 <rawip_usrreq+0x9c>
         return(EINVAL);
      sin->sin_port = 0;
      nam->m_len = sizeof(*sin);
      if (req == PRU_SOCKADDR)
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
 401e158:	18800117 	ldw	r2,4(r3)
 401e15c:	0007883a 	mov	r3,zero
 401e160:	98800115 	stw	r2,4(r19)
 401e164:	003fa006 	br	401dfe8 <rawip_usrreq+0x9c>
         /* may be bogus socket, but more likely the connection may 
         have closed due to ICMP dest unreachable from other side. */
         return(ECONNREFUSED);
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
 401e168:	88002526 	beq	r17,zero,401e200 <rawip_usrreq+0x2b4>
            return (ENOTCONN);
         fhost = ep->ipr_faddr;
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
 401e16c:	9080088b 	ldhu	r2,34(r18)
 401e170:	1080008c 	andi	r2,r2,2
 401e174:	1000201e 	bne	r2,zero,401e1f8 <rawip_usrreq+0x2ac>
            return (EISCONN);
         if (nam->m_len != sizeof (*sin))
 401e178:	88c00217 	ldw	r3,8(r17)
 401e17c:	00800404 	movi	r2,16
 401e180:	18802d26 	beq	r3,r2,401e238 <rawip_usrreq+0x2ec>
         {
            dtrap();
 401e184:	401c81c0 	call	401c81c <dtrap>
 401e188:	00c00584 	movi	r3,22
 401e18c:	003f9606 	br	401dfe8 <rawip_usrreq+0x9c>
          * if the caller-supplied address is INADDR_ANY,
          * don't bind to a specific address; else, 
          * make sure the caller-supplied address is
          * an interface IP address and if so, bind to that
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 401e190:	99000117 	ldw	r4,4(r19)
 401e194:	20001526 	beq	r4,zero,401e1ec <rawip_usrreq+0x2a0>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e198:	00810134 	movhi	r2,1028
 401e19c:	108dfc04 	addi	r2,r2,14320
 401e1a0:	10800017 	ldw	r2,0(r2)
 401e1a4:	10000826 	beq	r2,zero,401e1c8 <rawip_usrreq+0x27c>
 401e1a8:	1007883a 	mov	r3,r2
               if (ifp->n_ipaddr == lhost)
 401e1ac:	10800a17 	ldw	r2,40(r2)
 401e1b0:	1100031e 	bne	r2,r4,401e1c0 <rawip_usrreq+0x274>
 401e1b4:	00000d06 	br	401e1ec <rawip_usrreq+0x2a0>
 401e1b8:	18800a17 	ldw	r2,40(r3)
 401e1bc:	20800b26 	beq	r4,r2,401e1ec <rawip_usrreq+0x2a0>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e1c0:	18c00017 	ldw	r3,0(r3)
 401e1c4:	183ffc1e 	bne	r3,zero,401e1b8 <rawip_usrreq+0x26c>
      }
      return 0;
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
      return 0;
 401e1c8:	00c01f44 	movi	r3,125
 401e1cc:	003f8606 	br	401dfe8 <rawip_usrreq+0x9c>
            fhost = sin->sin_addr.s_addr;
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 401e1d0:	9080088b 	ldhu	r2,34(r18)
         if (sin->sin_addr.s_addr == INADDR_ANY)
            fhost = 0L;
         else
            fhost = sin->sin_addr.s_addr;
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
 401e1d4:	28c00215 	stw	r3,8(r5)
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
            so->so_state |= SS_ISCONNECTED;
 401e1d8:	00fffcc4 	movi	r3,-13
 401e1dc:	10c4703a 	and	r2,r2,r3
 401e1e0:	10800094 	ori	r2,r2,2
 401e1e4:	9080088d 	sth	r2,34(r18)
 401e1e8:	003fcb06 	br	401e118 <rawip_usrreq+0x1cc>
            if (ifp == NULL)
               return(EADDRNOTAVAIL);
         }

         /* bind the endpoint */
         ep->ipr_laddr = lhost;
 401e1ec:	0007883a 	mov	r3,zero
 401e1f0:	29000115 	stw	r4,4(r5)
 401e1f4:	003f7c06 	br	401dfe8 <rawip_usrreq+0x9c>
            return (ENOTCONN);
         fhost = ep->ipr_faddr;
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
 401e1f8:	00c01fc4 	movi	r3,127
 401e1fc:	003f7a06 	br	401dfe8 <rawip_usrreq+0x9c>
         return(ECONNREFUSED);
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
      {
         if (!(so->so_state & SS_ISCONNECTED))
 401e200:	9080088b 	ldhu	r2,34(r18)
 401e204:	1080008c 	andi	r2,r2,2
 401e208:	10000926 	beq	r2,zero,401e230 <rawip_usrreq+0x2e4>
            return (ENOTCONN);
         fhost = ep->ipr_faddr;
 401e20c:	a5400217 	ldw	r21,8(r20)

      /* since our pkt->nb_buff size is tied to max packet size, we 
       * assume our raw IP datagrams are always in one mbuf and that the 
       * mbuf -- but check anyway
       */
      if (m->m_len > (unsigned)ip_raw_maxalloc(so->so_options & SO_HDRINCL))
 401e210:	91000417 	ldw	r4,16(r18)
 401e214:	9c000217 	ldw	r16,8(r19)
 401e218:	2108000c 	andi	r4,r4,8192
 401e21c:	402b3c00 	call	402b3c0 <ip_raw_maxalloc>
 401e220:	1400082e 	bgeu	r2,r16,401e244 <rawip_usrreq+0x2f8>
      {
         dtrap(); /* should never happen */
 401e224:	401c81c0 	call	401c81c <dtrap>
 401e228:	00c01e84 	movi	r3,122
 401e22c:	003f6e06 	br	401dfe8 <rawip_usrreq+0x9c>
         return(ECONNREFUSED);
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
      {
         if (!(so->so_state & SS_ISCONNECTED))
 401e230:	00c02004 	movi	r3,128
 401e234:	003f6c06 	br	401dfe8 <rawip_usrreq+0x9c>
         {
            dtrap();
            return (EINVAL);
         }
         sin = mtod(nam, struct sockaddr_in *);
         fhost = sin->sin_addr.s_addr;
 401e238:	88800317 	ldw	r2,12(r17)
 401e23c:	15400117 	ldw	r21,4(r2)
 401e240:	003ff306 	br	401e210 <rawip_usrreq+0x2c4>
      {
         dtrap(); /* should never happen */
         return EMSGSIZE;  /* try to recover */
      }
      /* get a packet buffer for send */
      pkt = ip_raw_alloc(m->m_len, so->so_options & SO_HDRINCL);
 401e244:	91400417 	ldw	r5,16(r18)
 401e248:	99000217 	ldw	r4,8(r19)
 401e24c:	2948000c 	andi	r5,r5,8192
 401e250:	402b4280 	call	402b428 <ip_raw_alloc>
 401e254:	1023883a 	mov	r17,r2
      if (!pkt)
 401e258:	1000041e 	bne	r2,zero,401e26c <rawip_usrreq+0x320>
      {
         m_free(m);
 401e25c:	9809883a 	mov	r4,r19
 401e260:	401d6500 	call	401d650 <m_free>
 401e264:	00c01a44 	movi	r3,105
 401e268:	003f5f06 	br	401dfe8 <rawip_usrreq+0x9c>
         return ENOBUFS;   /* report buffer shortages */
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 401e26c:	11000317 	ldw	r4,12(r2)
 401e270:	99400317 	ldw	r5,12(r19)
 401e274:	99800217 	ldw	r6,8(r19)
 401e278:	40096480 	call	4009648 <memcpy>
      pkt->nb_plen = m->m_len;
 401e27c:	98c00217 	ldw	r3,8(r19)
      /* finished with mbuf, free it now */
      m_free(m);
 401e280:	9809883a 	mov	r4,r19
      {
         m_free(m);
         return ENOBUFS;   /* report buffer shortages */
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
      pkt->nb_plen = m->m_len;
 401e284:	88c00415 	stw	r3,16(r17)
      /* finished with mbuf, free it now */
      m_free(m);
 401e288:	401d6500 	call	401d650 <m_free>
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
 401e28c:	00bfffc4 	movi	r2,-1
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
      pkt->nb_plen = m->m_len;
      /* finished with mbuf, free it now */
      m_free(m);
      pkt->fhost = fhost;
 401e290:	8d400715 	stw	r21,28(r17)
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
 401e294:	a8802426 	beq	r21,r2,401e328 <rawip_usrreq+0x3dc>
#ifdef IP_MULTICAST

      /* If the socket has an IP moptions structure for multicast options,
       * place a pointer to this structure in the PACKET structure.
       */
      if (so->inp_moptions)
 401e298:	90800317 	ldw	r2,12(r18)
 401e29c:	10000126 	beq	r2,zero,401e2a4 <rawip_usrreq+0x358>
         pkt->imo = so->inp_moptions;
 401e2a0:	88800b15 	stw	r2,44(r17)

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
 401e2a4:	90800417 	ldw	r2,16(r18)
 401e2a8:	1088000c 	andi	r2,r2,8192
 401e2ac:	1000161e 	bne	r2,zero,401e308 <rawip_usrreq+0x3bc>
         e = ip_raw_write(pkt);
         LOCK_NET_RESOURCE(NET_RESID);
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
 401e2b0:	88800317 	ldw	r2,12(r17)
         if (ep->ipr_laddr)
 401e2b4:	a0c00117 	ldw	r3,4(r20)
         e = ip_raw_write(pkt);
         LOCK_NET_RESOURCE(NET_RESID);
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
 401e2b8:	143ffb04 	addi	r16,r2,-20
         if (ep->ipr_laddr)
 401e2bc:	1800041e 	bne	r3,zero,401e2d0 <rawip_usrreq+0x384>
            pip->ip_src = ep->ipr_laddr;
         else
         {
            if (fhost == 0xffffffff)
 401e2c0:	00bfffc4 	movi	r2,-1
 401e2c4:	a880271e 	bne	r21,r2,401e364 <rawip_usrreq+0x418>
               pip->ip_src = pkt->net->n_ipaddr;
 401e2c8:	88800617 	ldw	r2,24(r17)
 401e2cc:	10c00a17 	ldw	r3,40(r2)
 401e2d0:	80c00315 	stw	r3,12(r16)
            else
               pip->ip_src = ip_mymach(fhost);
         }
         pip->ip_dest = fhost;
 401e2d4:	85400415 	stw	r21,16(r16)
         UNLOCK_NET_RESOURCE(NET_RESID);
 401e2d8:	0009883a 	mov	r4,zero
 401e2dc:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         e = ip_write(ep->ipr_prot, pkt);
 401e2e0:	a1000503 	ldbu	r4,20(r20)
 401e2e4:	880b883a 	mov	r5,r17
 401e2e8:	40295240 	call	4029524 <ip_write>
         LOCK_NET_RESOURCE(NET_RESID);
 401e2ec:	0009883a 	mov	r4,zero
            else
               pip->ip_src = ip_mymach(fhost);
         }
         pip->ip_dest = fhost;
         UNLOCK_NET_RESOURCE(NET_RESID);
         e = ip_write(ep->ipr_prot, pkt);
 401e2f0:	1021883a 	mov	r16,r2
         LOCK_NET_RESOURCE(NET_RESID);
 401e2f4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
 401e2f8:	8007883a 	mov	r3,r16
 401e2fc:	043f3a0e 	bge	zero,r16,401dfe8 <rawip_usrreq+0x9c>
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
 401e300:	0007883a 	mov	r3,zero
 401e304:	003f3806 	br	401dfe8 <rawip_usrreq+0x9c>

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 401e308:	0009883a 	mov	r4,zero
 401e30c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         e = ip_raw_write(pkt);
 401e310:	8809883a 	mov	r4,r17
 401e314:	40292940 	call	4029294 <ip_raw_write>
         LOCK_NET_RESOURCE(NET_RESID);
 401e318:	0009883a 	mov	r4,zero
#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
         e = ip_raw_write(pkt);
 401e31c:	1021883a 	mov	r16,r2
         LOCK_NET_RESOURCE(NET_RESID);
 401e320:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
 401e324:	003ff406 	br	401e2f8 <rawip_usrreq+0x3ac>
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
 401e328:	a1000117 	ldw	r4,4(r20)
 401e32c:	20001126 	beq	r4,zero,401e374 <rawip_usrreq+0x428>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e330:	01410134 	movhi	r5,1028
 401e334:	294dfc04 	addi	r5,r5,14320
 401e338:	28800017 	ldw	r2,0(r5)
 401e33c:	103fa226 	beq	r2,zero,401e1c8 <rawip_usrreq+0x27c>
 401e340:	1007883a 	mov	r3,r2
               if (ifp->n_ipaddr == ep->ipr_laddr)
 401e344:	10800a17 	ldw	r2,40(r2)
 401e348:	20800426 	beq	r4,r2,401e35c <rawip_usrreq+0x410>
      if (fhost == 0xffffffff)
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e34c:	18c00017 	ldw	r3,0(r3)
 401e350:	18001826 	beq	r3,zero,401e3b4 <rawip_usrreq+0x468>
               if (ifp->n_ipaddr == ep->ipr_laddr)
 401e354:	18800a17 	ldw	r2,40(r3)
 401e358:	20bffc1e 	bne	r4,r2,401e34c <rawip_usrreq+0x400>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
            if (ifp == NULL)
               return(EADDRNOTAVAIL);
         }
         pkt->net = ifp;
 401e35c:	88c00615 	stw	r3,24(r17)
 401e360:	003fcd06 	br	401e298 <rawip_usrreq+0x34c>
         else
         {
            if (fhost == 0xffffffff)
               pip->ip_src = pkt->net->n_ipaddr;
            else
               pip->ip_src = ip_mymach(fhost);
 401e364:	a809883a 	mov	r4,r21
 401e368:	40284380 	call	4028438 <ip_mymach>
 401e36c:	80800315 	stw	r2,12(r16)
 401e370:	003fd806 	br	401e2d4 <rawip_usrreq+0x388>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e374:	01410134 	movhi	r5,1028
 401e378:	294dfc04 	addi	r5,r5,14320
 401e37c:	28800017 	ldw	r2,0(r5)
 401e380:	103f9126 	beq	r2,zero,401e1c8 <rawip_usrreq+0x27c>
 401e384:	1007883a 	mov	r3,r2
 401e388:	01000044 	movi	r4,1
               if ((ifp->n_flags & NF_BCAST) &&
 401e38c:	18802a17 	ldw	r2,168(r3)
 401e390:	1080004c 	andi	r2,r2,1
 401e394:	1005003a 	cmpeq	r2,r2,zero
 401e398:	1000041e 	bne	r2,zero,401e3ac <rawip_usrreq+0x460>
 401e39c:	18802717 	ldw	r2,156(r3)
 401e3a0:	10000226 	beq	r2,zero,401e3ac <rawip_usrreq+0x460>
 401e3a4:	10800617 	ldw	r2,24(r2)
 401e3a8:	113fec26 	beq	r2,r4,401e35c <rawip_usrreq+0x410>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e3ac:	18c00017 	ldw	r3,0(r3)
 401e3b0:	183ff61e 	bne	r3,zero,401e38c <rawip_usrreq+0x440>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e3b4:	28c00017 	ldw	r3,0(r5)
 401e3b8:	01000044 	movi	r4,1
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 401e3bc:	18802717 	ldw	r2,156(r3)
 401e3c0:	10000226 	beq	r2,zero,401e3cc <rawip_usrreq+0x480>
 401e3c4:	10800617 	ldw	r2,24(r2)
 401e3c8:	113fe426 	beq	r2,r4,401e35c <rawip_usrreq+0x410>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401e3cc:	18c00017 	ldw	r3,0(r3)
 401e3d0:	183ffa1e 	bne	r3,zero,401e3bc <rawip_usrreq+0x470>
      }
      return 0;
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
      return 0;
 401e3d4:	00c01f44 	movi	r3,125
 401e3d8:	003f0306 	br	401dfe8 <rawip_usrreq+0x9c>

0401e3dc <rawip_soinput>:
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
 401e3dc:	defff704 	addi	sp,sp,-36
 401e3e0:	dc400515 	stw	r17,20(sp)
 401e3e4:	dc000415 	stw	r16,16(sp)
 401e3e8:	2823883a 	mov	r17,r5
 401e3ec:	2021883a 	mov	r16,r4
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
 401e3f0:	0009883a 	mov	r4,zero
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
 401e3f4:	dfc00815 	stw	ra,32(sp)
 401e3f8:	dcc00715 	stw	r19,28(sp)
 401e3fc:	dc800615 	stw	r18,24(sp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
 401e400:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 401e404:	88800a17 	ldw	r2,40(r17)
 401e408:	80c00417 	ldw	r3,16(r16)
 401e40c:	89800b17 	ldw	r6,44(r17)
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 401e410:	000b883a 	mov	r5,zero
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 401e414:	10c5883a 	add	r2,r2,r3
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 401e418:	01000044 	movi	r4,1
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 401e41c:	11800a36 	bltu	r2,r6,401e448 <rawip_soinput+0x6c>
       */
      m_in->pkt = NULL;
      /* free only the mbuf itself */
      m_free(m_in);
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 401e420:	0009883a 	mov	r4,zero
 401e424:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401e428:	00801a44 	movi	r2,105

   sorwakeup(so);    /* wake up selects too */

   UNLOCK_NET_RESOURCE(NET_RESID);
   return 0;
}
 401e42c:	dfc00817 	ldw	ra,32(sp)
 401e430:	dcc00717 	ldw	r19,28(sp)
 401e434:	dc800617 	ldw	r18,24(sp)
 401e438:	dc400517 	ldw	r17,20(sp)
 401e43c:	dc000417 	ldw	r16,16(sp)
 401e440:	dec00904 	addi	sp,sp,36
 401e444:	f800283a 	ret
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 401e448:	401dad40 	call	401dad4 <m_getnbuf>
   sin.sin_addr.s_addr = pkt->fhost;
   sin.sin_port = 0;
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 401e44c:	8cc00a04 	addi	r19,r17,40
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 401e450:	1025883a 	mov	r18,r2
   sin.sin_addr.s_addr = pkt->fhost;
   sin.sin_port = 0;
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 401e454:	100d883a 	mov	r6,r2
 401e458:	d80b883a 	mov	r5,sp
 401e45c:	9809883a 	mov	r4,r19
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
   if (!m_in)
 401e460:	103fef26 	beq	r2,zero,401e420 <rawip_soinput+0x44>
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;
 401e464:	81c00217 	ldw	r7,8(r16)
      return ENOBUFS;
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
   m_in->m_base = pkt->nb_buff;
 401e468:	80800117 	ldw	r2,4(r16)
   m_in->m_len = pkt->nb_plen;

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
 401e46c:	88c00417 	ldw	r3,16(r17)
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;
 401e470:	91c00515 	stw	r7,20(r18)
      return ENOBUFS;
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
   m_in->m_base = pkt->nb_buff;
 401e474:	90800415 	stw	r2,16(r18)
   m_in->m_memsz = pkt->nb_blen;
   m_in->m_data = pkt->nb_prot;
 401e478:	82000317 	ldw	r8,12(r16)
   m_in->m_len = pkt->nb_plen;
 401e47c:	81c00417 	ldw	r7,16(r16)

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
 401e480:	18c8000c 	andi	r3,r3,8192

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;
   m_in->m_data = pkt->nb_prot;
 401e484:	92000315 	stw	r8,12(r18)
   m_in->m_len = pkt->nb_plen;
 401e488:	91c00215 	stw	r7,8(r18)
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
 401e48c:	94000115 	stw	r16,4(r18)
   m_in->m_len = pkt->nb_plen;

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
 401e490:	1800091e 	bne	r3,zero,401e4b8 <rawip_soinput+0xdc>
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
 401e494:	80800317 	ldw	r2,12(r16)
 401e498:	10c00003 	ldbu	r3,0(r2)
 401e49c:	18c003cc 	andi	r3,r3,15
 401e4a0:	18c7883a 	add	r3,r3,r3
 401e4a4:	18c7883a 	add	r3,r3,r3
      m_in->m_data += ihl;
      m_in->m_len -= ihl;
 401e4a8:	38c5c83a 	sub	r2,r7,r3
    */
   if (!(so->so_options & SO_HDRINCL))
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
      m_in->m_data += ihl;
 401e4ac:	40c7883a 	add	r3,r8,r3
 401e4b0:	90c00315 	stw	r3,12(r18)
      m_in->m_len -= ihl;
 401e4b4:	90800215 	stw	r2,8(r18)
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 401e4b8:	80c00717 	ldw	r3,28(r16)
   sin.sin_port = 0;
   sin.sin_family = AF_INET;
 401e4bc:	00800084 	movi	r2,2
 401e4c0:	d880000d 	sth	r2,0(sp)
      m_in->m_data += ihl;
      m_in->m_len -= ihl;
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 401e4c4:	d8c00115 	stw	r3,4(sp)
   sin.sin_port = 0;
 401e4c8:	d800008d 	sth	zero,2(sp)
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 401e4cc:	40210680 	call	4021068 <sbappendaddr>
 401e4d0:	1000041e 	bne	r2,zero,401e4e4 <rawip_soinput+0x108>
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
      /* free only the mbuf itself */
      m_free(m_in);
 401e4d4:	9009883a 	mov	r4,r18
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
 401e4d8:	90000115 	stw	zero,4(r18)
      /* free only the mbuf itself */
      m_free(m_in);
 401e4dc:	401d6500 	call	401d650 <m_free>
 401e4e0:	003fcf06 	br	401e420 <rawip_soinput+0x44>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 401e4e4:	9809883a 	mov	r4,r19
 401e4e8:	401a4380 	call	401a438 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 401e4ec:	980b883a 	mov	r5,r19
 401e4f0:	8809883a 	mov	r4,r17
 401e4f4:	40211d80 	call	40211d8 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 401e4f8:	0009883a 	mov	r4,zero
 401e4fc:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401e500:	0005883a 	mov	r2,zero
 401e504:	003fc906 	br	401e42c <rawip_soinput+0x50>

0401e508 <t_errno>:
 */

int
t_errno(long s)
{
   struct socket *so = LONG2SO(s);
 401e508:	20bff804 	addi	r2,r4,-32
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
 401e50c:	defffe04 	addi	sp,sp,-8
   struct socket *so = LONG2SO(s);
 401e510:	1085883a 	add	r2,r2,r2
   struct socket *tmp;
   int errcode = ENOTSOCK;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
 401e514:	0009883a 	mov	r4,zero
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
 401e518:	dc000015 	stw	r16,0(sp)
 401e51c:	dfc00115 	stw	ra,4(sp)
   struct socket *so = LONG2SO(s);
 401e520:	10a1883a 	add	r16,r2,r2
   struct socket *tmp;
   int errcode = ENOTSOCK;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
 401e524:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 401e528:	00810134 	movhi	r2,1028
 401e52c:	108cf804 	addi	r2,r2,13280
   {
      if (tmp == so)  /* found socket, return error */
 401e530:	80800a26 	beq	r16,r2,401e55c <t_errno+0x54>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 401e534:	10800017 	ldw	r2,0(r2)
 401e538:	103ffd1e 	bne	r2,zero,401e530 <t_errno+0x28>
         errcode = so->so_error;
         break;
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 401e53c:	0009883a 	mov	r4,zero
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
   {
      if (tmp == so)  /* found socket, return error */
 401e540:	04001b04 	movi	r16,108
         errcode = so->so_error;
         break;
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 401e544:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   return errcode;
}
 401e548:	8005883a 	mov	r2,r16
 401e54c:	dfc00117 	ldw	ra,4(sp)
 401e550:	dc000017 	ldw	r16,0(sp)
 401e554:	dec00204 	addi	sp,sp,8
 401e558:	f800283a 	ret
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
   {
      if (tmp == so)  /* found socket, return error */
      {
         errcode = so->so_error;
 401e55c:	84000617 	ldw	r16,24(r16)
         break;
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 401e560:	0009883a 	mov	r4,zero
 401e564:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   return errcode;
}
 401e568:	8005883a 	mov	r2,r16
 401e56c:	dfc00117 	ldw	ra,4(sp)
 401e570:	dc000017 	ldw	r16,0(sp)
 401e574:	dec00204 	addi	sp,sp,8
 401e578:	f800283a 	ret

0401e57c <DOMAIN_CHECK>:
#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
 401e57c:	20c00517 	ldw	r3,20(r4)
 401e580:	00800084 	movi	r2,2
 401e584:	18800126 	beq	r3,r2,401e58c <DOMAIN_CHECK+0x10>
 401e588:	f800283a 	ret
 401e58c:	008003c4 	movi	r2,15
 401e590:	117ffd36 	bltu	r2,r5,401e588 <DOMAIN_CHECK+0xc>
      (size < sizeof(struct sockaddr_in)))
   {
      dtrap(); /* programmer passed wrong structure */
 401e594:	401c81c1 	jmpi	401c81c <dtrap>

0401e598 <t_socketclose>:
t_socketclose(long s)
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401e598:	213ff804 	addi	r4,r4,-32
 * RETURNS: 
 */

int
t_socketclose(long s)
{
 401e59c:	defffe04 	addi	sp,sp,-8
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401e5a0:	2109883a 	add	r4,r4,r4
 * RETURNS: 
 */

int
t_socketclose(long s)
{
 401e5a4:	dc400015 	stw	r17,0(sp)
 401e5a8:	dfc00115 	stw	ra,4(sp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401e5ac:	2123883a 	add	r17,r4,r4
   SOC_CHECK(so);
 401e5b0:	00810134 	movhi	r2,1028
 401e5b4:	108cf804 	addi	r2,r2,13280
 401e5b8:	88800326 	beq	r17,r2,401e5c8 <t_socketclose+0x30>
 401e5bc:	10800017 	ldw	r2,0(r2)
 401e5c0:	103ffd1e 	bne	r2,zero,401e5b8 <t_socketclose+0x20>
 401e5c4:	88800e1e 	bne	r17,r2,401e600 <t_socketclose+0x68>
   so->so_error = 0;
 401e5c8:	88000615 	stw	zero,24(r17)
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
 401e5cc:	0009883a 	mov	r4,zero
 401e5d0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   err = soclose(so);
 401e5d4:	8809883a 	mov	r4,r17
 401e5d8:	40206c00 	call	40206c0 <soclose>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401e5dc:	0009883a 	mov	r4,zero
   SOC_CHECK(so);
   so->so_error = 0;
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
   err = soclose(so);
 401e5e0:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(NET_RESID);
 401e5e4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 401e5e8:	8805003a 	cmpeq	r2,r17,zero
 401e5ec:	10bfffc4 	addi	r2,r2,-1
         addressed by so has been freed by this point, jharan 12-10-98 */
      /*      so->so_error = err;   */
      return SOCKET_ERROR;
   }
   return 0;
}
 401e5f0:	dfc00117 	ldw	ra,4(sp)
 401e5f4:	dc400017 	ldw	r17,0(sp)
 401e5f8:	dec00204 	addi	sp,sp,8
 401e5fc:	f800283a 	ret
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401e600:	401c81c0 	call	401c81c <dtrap>
 401e604:	00bfffc4 	movi	r2,-1
 401e608:	003ff906 	br	401e5f0 <t_socketclose+0x58>

0401e60c <t_shutdown>:
t_shutdown(long s, int   how)
{
   struct socket *so;
   int   err;

   so = LONG2SO(s);
 401e60c:	213ff804 	addi	r4,r4,-32
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
 401e610:	defffd04 	addi	sp,sp,-12
   struct socket *so;
   int   err;

   so = LONG2SO(s);
 401e614:	2109883a 	add	r4,r4,r4
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
 401e618:	dc400115 	stw	r17,4(sp)
 401e61c:	dc000015 	stw	r16,0(sp)
 401e620:	dfc00215 	stw	ra,8(sp)
   struct socket *so;
   int   err;

   so = LONG2SO(s);
 401e624:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401e628:	00810134 	movhi	r2,1028
 401e62c:	108cf804 	addi	r2,r2,13280
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
 401e630:	2823883a 	mov	r17,r5
   struct socket *so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401e634:	80800326 	beq	r16,r2,401e644 <t_shutdown+0x38>
 401e638:	10800017 	ldw	r2,0(r2)
 401e63c:	103ffd1e 	bne	r2,zero,401e634 <t_shutdown+0x28>
 401e640:	8080101e 	bne	r16,r2,401e684 <t_shutdown+0x78>
   so->so_error = 0;
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
 401e644:	0009883a 	mov	r4,zero
   struct socket *so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
   so->so_error = 0;
 401e648:	80000615 	stw	zero,24(r16)
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
 401e64c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   err = soshutdown(so, how);
 401e650:	880b883a 	mov	r5,r17
 401e654:	8009883a 	mov	r4,r16
 401e658:	401fd340 	call	401fd34 <soshutdown>
 401e65c:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(NET_RESID);
 401e660:	0009883a 	mov	r4,zero
 401e664:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (err != 0)
 401e668:	8800091e 	bne	r17,zero,401e690 <t_shutdown+0x84>
 401e66c:	0005883a 	mov	r2,zero
   {
      so->so_error = err;
      return SOCKET_ERROR;
   }
   return 0;
}
 401e670:	dfc00217 	ldw	ra,8(sp)
 401e674:	dc400117 	ldw	r17,4(sp)
 401e678:	dc000017 	ldw	r16,0(sp)
 401e67c:	dec00304 	addi	sp,sp,12
 401e680:	f800283a 	ret
{
   struct socket *so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401e684:	401c81c0 	call	401c81c <dtrap>
 401e688:	00bfffc4 	movi	r2,-1
 401e68c:	003ff806 	br	401e670 <t_shutdown+0x64>
   err = soshutdown(so, how);
   UNLOCK_NET_RESOURCE(NET_RESID);

   if (err != 0)
   {
      so->so_error = err;
 401e690:	00bfffc4 	movi	r2,-1
 401e694:	84400615 	stw	r17,24(r16)
 401e698:	003ff506 	br	401e670 <t_shutdown+0x64>

0401e69c <sockargs>:

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
 401e69c:	defffc04 	addi	sp,sp,-16
 401e6a0:	dcc00215 	stw	r19,8(sp)
 401e6a4:	2027883a 	mov	r19,r4
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
 401e6a8:	0009883a 	mov	r4,zero

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
 401e6ac:	dfc00315 	stw	ra,12(sp)
 401e6b0:	dc400115 	stw	r17,4(sp)
 401e6b4:	dc000015 	stw	r16,0(sp)
 401e6b8:	3023883a 	mov	r17,r6
 401e6bc:	2821883a 	mov	r16,r5
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
 401e6c0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   m = m_getwithdata (type, arglen);
 401e6c4:	800b883a 	mov	r5,r16
 401e6c8:	8809883a 	mov	r4,r17
 401e6cc:	401dad40 	call	401dad4 <m_getnbuf>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401e6d0:	0009883a 	mov	r4,zero
   int   type)
{
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
   m = m_getwithdata (type, arglen);
 401e6d4:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(NET_RESID);
 401e6d8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   if (m == NULL)
      return NULL;
   m->m_len = arglen;
   MEMCPY(mtod (m, char *), arg, arglen);
 401e6dc:	980b883a 	mov	r5,r19
 401e6e0:	800d883a 	mov	r6,r16
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
   m = m_getwithdata (type, arglen);
   UNLOCK_NET_RESOURCE(NET_RESID);
   if (m == NULL)
 401e6e4:	88000326 	beq	r17,zero,401e6f4 <sockargs+0x58>
      return NULL;
   m->m_len = arglen;
   MEMCPY(mtod (m, char *), arg, arglen);
 401e6e8:	89000317 	ldw	r4,12(r17)
   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
   m = m_getwithdata (type, arglen);
   UNLOCK_NET_RESOURCE(NET_RESID);
   if (m == NULL)
      return NULL;
   m->m_len = arglen;
 401e6ec:	8c000215 	stw	r16,8(r17)
   MEMCPY(mtod (m, char *), arg, arglen);
 401e6f0:	40096480 	call	4009648 <memcpy>
   return m;
}
 401e6f4:	8805883a 	mov	r2,r17
 401e6f8:	dfc00317 	ldw	ra,12(sp)
 401e6fc:	dcc00217 	ldw	r19,8(sp)
 401e700:	dc400117 	ldw	r17,4(sp)
 401e704:	dc000017 	ldw	r16,0(sp)
 401e708:	dec00404 	addi	sp,sp,16
 401e70c:	f800283a 	ret

0401e710 <t_sendto>:
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
 401e710:	20bff804 	addi	r2,r4,-32
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 401e714:	defff804 	addi	sp,sp,-32
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
 401e718:	1085883a 	add	r2,r2,r2
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 401e71c:	dd000615 	stw	r20,24(sp)
 401e720:	dcc00515 	stw	r19,20(sp)
 401e724:	dc800415 	stw	r18,16(sp)
 401e728:	dc000215 	stw	r16,8(sp)
 401e72c:	dfc00715 	stw	ra,28(sp)
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
 401e730:	10a1883a 	add	r16,r2,r2
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 401e734:	dc400315 	stw	r17,12(sp)
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401e738:	00810134 	movhi	r2,1028
 401e73c:	108cf804 	addi	r2,r2,13280
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 401e740:	2825883a 	mov	r18,r5
 401e744:	3027883a 	mov	r19,r6
 401e748:	3829883a 	mov	r20,r7
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401e74c:	80800326 	beq	r16,r2,401e75c <t_sendto+0x4c>
 401e750:	10800017 	ldw	r2,0(r2)
 401e754:	103ffd1e 	bne	r2,zero,401e74c <t_sendto+0x3c>
 401e758:	8080491e 	bne	r16,r2,401e880 <t_sendto+0x170>
   so->so_error = 0;

   switch (so->so_type)
 401e75c:	80c00987 	ldb	r3,38(r16)
 401e760:	00800084 	movi	r2,2
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
   SOC_CHECK(so);
   so->so_error = 0;
 401e764:	80000615 	stw	zero,24(r16)

   switch (so->so_type)
 401e768:	18801126 	beq	r3,r2,401e7b0 <t_sendto+0xa0>
 401e76c:	008000c4 	movi	r2,3
 401e770:	18802d26 	beq	r3,r2,401e828 <t_sendto+0x118>
 401e774:	00800044 	movi	r2,1
 401e778:	18803026 	beq	r3,r2,401e83c <t_sendto+0x12c>
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
      break;
#endif /* IP_RAW */
   default:
      /* socket has unknown type */
      dtrap();
 401e77c:	401c81c0 	call	401c81c <dtrap>
      so->so_error = EFAULT;
 401e780:	00800384 	movi	r2,14
 401e784:	00ffffc4 	movi	r3,-1
 401e788:	80800615 	stw	r2,24(r16)
      so->so_error = err;
      return SOCKET_ERROR;
   }

   return (len - sendlen);
}
 401e78c:	1805883a 	mov	r2,r3
 401e790:	dfc00717 	ldw	ra,28(sp)
 401e794:	dd000617 	ldw	r20,24(sp)
 401e798:	dcc00517 	ldw	r19,20(sp)
 401e79c:	dc800417 	ldw	r18,16(sp)
 401e7a0:	dc400317 	ldw	r17,12(sp)
 401e7a4:	dc000217 	ldw	r16,8(sp)
 401e7a8:	dec00804 	addi	sp,sp,32
 401e7ac:	f800283a 	ret
       */
      return t_send(s, buf, len, flags);
      /*NOTREACHED*/
   case SOCK_DGRAM:
      /* datagram (UDP) socket -- prepare to check length */
      sendlen = udp_maxalloc();
 401e7b0:	402bcec0 	call	402bcec <udp_maxalloc>
 401e7b4:	d8800115 	stw	r2,4(sp)
   /* fall through for non-stream sockets: SOCK_DGRAM (UDP) and
    * SOCK_RAW (raw IP)
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
 401e7b8:	d8800117 	ldw	r2,4(sp)
 401e7bc:	14c03316 	blt	r2,r19,401e88c <t_sendto+0x17c>
   /* if a sockaddr was passed, wrap it in an mbuf and pas it into the
    * bowels of the BSD code; else assume this is a bound UDP socket
    * and this call came from t_send() below.
    */

   if (to)  /* sockaddr was passed */
 401e7c0:	d8800817 	ldw	r2,32(sp)
 401e7c4:	10002326 	beq	r2,zero,401e854 <t_sendto+0x144>
   {
      name = sockargs(to, tolen, MT_SONAME);
 401e7c8:	d9400917 	ldw	r5,36(sp)
 401e7cc:	1009883a 	mov	r4,r2
 401e7d0:	01800244 	movi	r6,9
 401e7d4:	401e69c0 	call	401e69c <sockargs>
 401e7d8:	1023883a 	mov	r17,r2
      if(name == NULL)
 401e7dc:	10003226 	beq	r2,zero,401e8a8 <t_sendto+0x198>
   else     /* hope user called bind() first... */
      name = NULL;
   
   sendlen = len;

   LOCK_NET_RESOURCE(NET_RESID);
 401e7e0:	0009883a 	mov	r4,zero
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
   
   sendlen = len;
 401e7e4:	dcc00115 	stw	r19,4(sp)

   LOCK_NET_RESOURCE(NET_RESID);
 401e7e8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
 401e7ec:	900d883a 	mov	r6,r18
 401e7f0:	8009883a 	mov	r4,r16
 401e7f4:	880b883a 	mov	r5,r17
 401e7f8:	d9c00104 	addi	r7,sp,4
 401e7fc:	dd000015 	stw	r20,0(sp)
 401e800:	401fdb80 	call	401fdb8 <sosend>

   if (name)
      m_freem(name);
 401e804:	8809883a 	mov	r4,r17
   
   sendlen = len;

   LOCK_NET_RESOURCE(NET_RESID);

   err = sosend (so, name, buf, &sendlen, flags);
 401e808:	1025883a 	mov	r18,r2

   if (name)
      m_freem(name);
 401e80c:	401d74c0 	call	401d74c <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 401e810:	0009883a 	mov	r4,zero
 401e814:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (err != 0)
 401e818:	9000201e 	bne	r18,zero,401e89c <t_sendto+0x18c>
   {
      so->so_error = err;
      return SOCKET_ERROR;
   }

   return (len - sendlen);
 401e81c:	d8800117 	ldw	r2,4(sp)
 401e820:	9887c83a 	sub	r3,r19,r2
 401e824:	003fd906 	br	401e78c <t_sendto+0x7c>
      sendlen = udp_maxalloc();
      break;
#ifdef IP_RAW
   case SOCK_RAW:
      /* raw socket -- prepare to check length */
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
 401e828:	81000417 	ldw	r4,16(r16)
 401e82c:	2108000c 	andi	r4,r4,8192
 401e830:	402b3c00 	call	402b3c0 <ip_raw_maxalloc>
 401e834:	d8800115 	stw	r2,4(sp)
 401e838:	003fdf06 	br	401e7b8 <t_sendto+0xa8>
   {
   case SOCK_STREAM:
      /* this is a stream socket, so pass this request through
       * t_send() for its large-send support.
       */
      return t_send(s, buf, len, flags);
 401e83c:	900b883a 	mov	r5,r18
 401e840:	980d883a 	mov	r6,r19
 401e844:	a00f883a 	mov	r7,r20
 401e848:	401e8b80 	call	401e8b8 <t_send>
 401e84c:	1007883a 	mov	r3,r2
 401e850:	003fce06 	br	401e78c <t_sendto+0x7c>
   else     /* hope user called bind() first... */
      name = NULL;
   
   sendlen = len;

   LOCK_NET_RESOURCE(NET_RESID);
 401e854:	0009883a 	mov	r4,zero
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
   
   sendlen = len;
 401e858:	dcc00115 	stw	r19,4(sp)

   LOCK_NET_RESOURCE(NET_RESID);
 401e85c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
 401e860:	900d883a 	mov	r6,r18
 401e864:	8009883a 	mov	r4,r16
 401e868:	000b883a 	mov	r5,zero
 401e86c:	d9c00104 	addi	r7,sp,4
 401e870:	dd000015 	stw	r20,0(sp)
 401e874:	401fdb80 	call	401fdb8 <sosend>
 401e878:	1025883a 	mov	r18,r2
 401e87c:	003fe406 	br	401e810 <t_sendto+0x100>
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401e880:	401c81c0 	call	401c81c <dtrap>
 401e884:	00ffffc4 	movi	r3,-1
 401e888:	003fc006 	br	401e78c <t_sendto+0x7c>
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
   {
      so->so_error = EMSGSIZE;
 401e88c:	00801e84 	movi	r2,122
 401e890:	00ffffc4 	movi	r3,-1
 401e894:	80800615 	stw	r2,24(r16)
 401e898:	003fbc06 	br	401e78c <t_sendto+0x7c>

   UNLOCK_NET_RESOURCE(NET_RESID);

   if (err != 0)
   {
      so->so_error = err;
 401e89c:	00ffffc4 	movi	r3,-1
 401e8a0:	84800615 	stw	r18,24(r16)
 401e8a4:	003fb906 	br	401e78c <t_sendto+0x7c>
   if (to)  /* sockaddr was passed */
   {
      name = sockargs(to, tolen, MT_SONAME);
      if(name == NULL)
      {
         so->so_error = ENOMEM;
 401e8a8:	00800304 	movi	r2,12
 401e8ac:	00ffffc4 	movi	r3,-1
 401e8b0:	80800615 	stw	r2,24(r16)
 401e8b4:	003fb506 	br	401e78c <t_sendto+0x7c>

0401e8b8 <t_send>:
   int   total_sent  =  0;
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
 401e8b8:	20bff804 	addi	r2,r4,-32
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 401e8bc:	defff404 	addi	sp,sp,-48
   int   total_sent  =  0;
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
 401e8c0:	1085883a 	add	r2,r2,r2
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 401e8c4:	dd400815 	stw	r21,32(sp)
   int   total_sent  =  0;
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
 401e8c8:	10ab883a 	add	r21,r2,r2
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 401e8cc:	a8c0088b 	ldhu	r3,34(r21)
 401e8d0:	00800084 	movi	r2,2
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 401e8d4:	ddc00a15 	stw	r23,40(sp)

   so = LONG2SO(s);
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 401e8d8:	18c0038c 	andi	r3,r3,14
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 401e8dc:	dcc00615 	stw	r19,24(sp)
 401e8e0:	dc800515 	stw	r18,20(sp)
 401e8e4:	dfc00b15 	stw	ra,44(sp)
 401e8e8:	dd800915 	stw	r22,36(sp)
 401e8ec:	dd000715 	stw	r20,28(sp)
 401e8f0:	dc400415 	stw	r17,16(sp)
 401e8f4:	dc000315 	stw	r16,12(sp)
 401e8f8:	2827883a 	mov	r19,r5
 401e8fc:	3025883a 	mov	r18,r6
 401e900:	382f883a 	mov	r23,r7

   so = LONG2SO(s);
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 401e904:	18803d1e 	bne	r3,r2,401e9fc <t_send+0x144>
   so->so_error = 0;

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
 401e908:	a8c00987 	ldb	r3,38(r21)
 401e90c:	00800044 	movi	r2,1
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
   {
      so->so_error = EPIPE;
      return SOCKET_ERROR;
   }
   so->so_error = 0;
 401e910:	a8000615 	stw	zero,24(r21)

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
 401e914:	18801026 	beq	r3,r2,401e958 <t_send+0xa0>
      return(t_sendto(s, buf, len, flags, NULL, 0));
 401e918:	d8000015 	stw	zero,0(sp)
 401e91c:	d8000115 	stw	zero,4(sp)
 401e920:	401e7100 	call	401e710 <t_sendto>
 401e924:	102d883a 	mov	r22,r2
      total_sent += sent;
   }

   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   return total_sent;
}
 401e928:	b005883a 	mov	r2,r22
 401e92c:	dfc00b17 	ldw	ra,44(sp)
 401e930:	ddc00a17 	ldw	r23,40(sp)
 401e934:	dd800917 	ldw	r22,36(sp)
 401e938:	dd400817 	ldw	r21,32(sp)
 401e93c:	dd000717 	ldw	r20,28(sp)
 401e940:	dcc00617 	ldw	r19,24(sp)
 401e944:	dc800517 	ldw	r18,20(sp)
 401e948:	dc400417 	ldw	r17,16(sp)
 401e94c:	dc000317 	ldw	r16,12(sp)
 401e950:	dec00c04 	addi	sp,sp,48
 401e954:	f800283a 	ret
    */
   if (so->so_type != SOCK_STREAM)
      return(t_sendto(s, buf, len, flags, NULL, 0));

   maxpkt = TCP_MSS;
   if(so->so_pcb)
 401e958:	a8800117 	ldw	r2,4(r21)
 401e95c:	10000326 	beq	r2,zero,401e96c <t_send+0xb4>
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
      if(tp->t_maxseg)              /* Make sure it's set */
 401e960:	10800917 	ldw	r2,36(r2)
 401e964:	10800a0b 	ldhu	r2,40(r2)
 401e968:	10001b1e 	bne	r2,zero,401e9d8 <t_send+0x120>
         maxpkt = tp->t_maxseg;
 401e96c:	05016d04 	movi	r20,1460
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
 401e970:	90002926 	beq	r18,zero,401ea18 <t_send+0x160>
 401e974:	002d883a 	mov	r22,zero
   {
      if (len > maxpkt)
 401e978:	a480150e 	bge	r20,r18,401e9d0 <t_send+0x118>
         sendlen = maxpkt;  /* take biggest block we can */
 401e97c:	dd000215 	stw	r20,8(sp)
      else
         sendlen = len;
      sent = sendlen;

      LOCK_NET_RESOURCE(NET_RESID);
 401e980:	0009883a 	mov	r4,zero
   {
      if (len > maxpkt)
         sendlen = maxpkt;  /* take biggest block we can */
      else
         sendlen = len;
      sent = sendlen;
 401e984:	dc000217 	ldw	r16,8(sp)

      LOCK_NET_RESOURCE(NET_RESID);
 401e988:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      e = sosend (so, NULL, buf, &sendlen, flags);
 401e98c:	980d883a 	mov	r6,r19
 401e990:	a809883a 	mov	r4,r21
 401e994:	000b883a 	mov	r5,zero
 401e998:	d9c00204 	addi	r7,sp,8
 401e99c:	ddc00015 	stw	r23,0(sp)
 401e9a0:	401fdb80 	call	401fdb8 <sosend>
 401e9a4:	1023883a 	mov	r17,r2
      UNLOCK_NET_RESOURCE(NET_RESID);
 401e9a8:	0009883a 	mov	r4,zero
      if (sendlen != 0)
         break;         /* break out of while(len) loop */

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
      buf += sent;
 401e9ac:	9c27883a 	add	r19,r19,r16
      len -= sent;
 401e9b0:	9425c83a 	sub	r18,r18,r16
         sendlen = len;
      sent = sendlen;

      LOCK_NET_RESOURCE(NET_RESID);
      e = sosend (so, NULL, buf, &sendlen, flags);
      UNLOCK_NET_RESOURCE(NET_RESID);
 401e9b4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 
      if (e != 0)  /* sock_sendit failed? */
 401e9b8:	8800091e 	bne	r17,zero,401e9e0 <t_send+0x128>
         }
         so->so_error = e;
         return SOCKET_ERROR;
      }
      /* if we can't send anymore, return now */
      if (sendlen != 0)
 401e9bc:	d8800217 	ldw	r2,8(sp)
 401e9c0:	103fd91e 	bne	r2,zero,401e928 <t_send+0x70>

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
      buf += sent;
      len -= sent;
      total_sent += sent;
 401e9c4:	b42d883a 	add	r22,r22,r16
         maxpkt = tp->t_maxseg;
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
 401e9c8:	903fd726 	beq	r18,zero,401e928 <t_send+0x70>
   {
      if (len > maxpkt)
 401e9cc:	a4bfeb16 	blt	r20,r18,401e97c <t_send+0xc4>
         sendlen = maxpkt;  /* take biggest block we can */
      else
         sendlen = len;
 401e9d0:	dc800215 	stw	r18,8(sp)
 401e9d4:	003fea06 	br	401e980 <t_send+0xc8>
   if(so->so_pcb)
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
      if(tp->t_maxseg)              /* Make sure it's set */
         maxpkt = tp->t_maxseg;
 401e9d8:	1029883a 	mov	r20,r2
 401e9dc:	003fe406 	br	401e970 <t_send+0xb8>
      UNLOCK_NET_RESOURCE(NET_RESID);
 
      if (e != 0)  /* sock_sendit failed? */
      {
         /* if we simply ran out of bufs, report back to caller. */
         if ((e == ENOBUFS) || (e == EWOULDBLOCK))
 401e9e0:	00801a44 	movi	r2,105
 401e9e4:	88800926 	beq	r17,r2,401ea0c <t_send+0x154>
 401e9e8:	008002c4 	movi	r2,11
 401e9ec:	88800726 	beq	r17,r2,401ea0c <t_send+0x154>
            {
               so->so_error = 0;
               break;      /* break out of while(len) loop */
            }
         }
         so->so_error = e;
 401e9f0:	05bfffc4 	movi	r22,-1
 401e9f4:	ac400615 	stw	r17,24(r21)
 401e9f8:	003fcb06 	br	401e928 <t_send+0x70>
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
   {
      so->so_error = EPIPE;
 401e9fc:	00800804 	movi	r2,32
 401ea00:	05bfffc4 	movi	r22,-1
 401ea04:	a8800615 	stw	r2,24(r21)
 401ea08:	003fc706 	br	401e928 <t_send+0x70>
            /* if we actually sent something before running out
             * of buffers, report what we sent; 
             * else, report the error and let the application 
             * retry the call later
             */
            if (total_sent != 0)
 401ea0c:	b03ff826 	beq	r22,zero,401e9f0 <t_send+0x138>
            {
               so->so_error = 0;
 401ea10:	a8000615 	stw	zero,24(r21)
 401ea14:	003fc406 	br	401e928 <t_send+0x70>
      if (sendlen != 0)
         break;         /* break out of while(len) loop */

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
      buf += sent;
 401ea18:	002d883a 	mov	r22,zero
 401ea1c:	003fc206 	br	401e928 <t_send+0x70>

0401ea20 <t_getname>:
{
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
 401ea20:	213ff804 	addi	r4,r4,-32
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
 401ea24:	defff904 	addi	sp,sp,-28
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
 401ea28:	2109883a 	add	r4,r4,r4
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
 401ea2c:	dd400515 	stw	r21,20(sp)
 401ea30:	dd000415 	stw	r20,16(sp)
 401ea34:	dc800215 	stw	r18,8(sp)
 401ea38:	dc000015 	stw	r16,0(sp)
 401ea3c:	dfc00615 	stw	ra,24(sp)
 401ea40:	dcc00315 	stw	r19,12(sp)
 401ea44:	dc400115 	stw	r17,4(sp)
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
 401ea48:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401ea4c:	00810134 	movhi	r2,1028
 401ea50:	108cf804 	addi	r2,r2,13280
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
 401ea54:	282b883a 	mov	r21,r5
 401ea58:	3029883a 	mov	r20,r6
 401ea5c:	3825883a 	mov	r18,r7
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401ea60:	80800326 	beq	r16,r2,401ea70 <t_getname+0x50>
 401ea64:	10800017 	ldw	r2,0(r2)
 401ea68:	103ffd1e 	bne	r2,zero,401ea60 <t_getname+0x40>
 401ea6c:	8080371e 	bne	r16,r2,401eb4c <t_getname+0x12c>

   so->so_error = 0;
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
 401ea70:	00800404 	movi	r2,16
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);

   so->so_error = 0;
 401ea74:	80000615 	stw	zero,24(r16)
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
 401ea78:	90802326 	beq	r18,r2,401eb08 <t_getname+0xe8>
   {
      so->so_error = ENOTCONN;
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
 401ea7c:	0009883a 	mov	r4,zero
 401ea80:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 401ea84:	04c00404 	movi	r19,16
 401ea88:	01000244 	movi	r4,9
 401ea8c:	980b883a 	mov	r5,r19
 401ea90:	401dad40 	call	401dad4 <m_getnbuf>
 401ea94:	1023883a 	mov	r17,r2
   if (m == NULL) 
 401ea98:	10003c26 	beq	r2,zero,401eb8c <t_getname+0x16c>
      so->so_error = ENOMEM;
      UNLOCK_NET_RESOURCE(NET_RESID);
      return SOCKET_ERROR;
   }
   so->so_req = opcode;
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
 401ea9c:	80800217 	ldw	r2,8(r16)
   {
      so->so_error = ENOMEM;
      UNLOCK_NET_RESOURCE(NET_RESID);
      return SOCKET_ERROR;
   }
   so->so_req = opcode;
 401eaa0:	84800715 	stw	r18,28(r16)
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
 401eaa4:	8009883a 	mov	r4,r16
 401eaa8:	10c00317 	ldw	r3,12(r2)
 401eaac:	000b883a 	mov	r5,zero
 401eab0:	880d883a 	mov	r6,r17
 401eab4:	183ee83a 	callr	r3
 401eab8:	1025883a 	mov	r18,r2
 401eabc:	10002c1e 	bne	r2,zero,401eb70 <t_getname+0x150>
      goto bad;

#ifdef IP_V4
   if(so->so_domain == AF_INET)
 401eac0:	80c00517 	ldw	r3,20(r16)
 401eac4:	00800084 	movi	r2,2
 401eac8:	18801626 	beq	r3,r2,401eb24 <t_getname+0x104>
   }
#endif   /* IP_V6 */


bad:
   m_freem(m);
 401eacc:	8809883a 	mov	r4,r17
 401ead0:	401d74c0 	call	401d74c <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401ead4:	0009883a 	mov	r4,zero
 401ead8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401eadc:	0007883a 	mov	r3,zero
   {
      so->so_error = err;
      return SOCKET_ERROR;
   }
   return 0;
}
 401eae0:	1805883a 	mov	r2,r3
 401eae4:	dfc00617 	ldw	ra,24(sp)
 401eae8:	dd400517 	ldw	r21,20(sp)
 401eaec:	dd000417 	ldw	r20,16(sp)
 401eaf0:	dcc00317 	ldw	r19,12(sp)
 401eaf4:	dc800217 	ldw	r18,8(sp)
 401eaf8:	dc400117 	ldw	r17,4(sp)
 401eafc:	dc000017 	ldw	r16,0(sp)
 401eb00:	dec00704 	addi	sp,sp,28
 401eb04:	f800283a 	ret
   so = LONG2SO(s);
   SOC_CHECK(so);

   so->so_error = 0;
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
 401eb08:	8080088b 	ldhu	r2,34(r16)
 401eb0c:	1080008c 	andi	r2,r2,2
 401eb10:	103fda1e 	bne	r2,zero,401ea7c <t_getname+0x5c>
   {
      so->so_error = ENOTCONN;
 401eb14:	00802004 	movi	r2,128
 401eb18:	00ffffc4 	movi	r3,-1
 401eb1c:	80800615 	stw	r2,24(r16)
 401eb20:	003fef06 	br	401eae0 <t_getname+0xc0>
      goto bad;

#ifdef IP_V4
   if(so->so_domain == AF_INET)
   {
      if(*addrlen < sizeof(struct sockaddr_in))
 401eb24:	a0c00017 	ldw	r3,0(r20)
 401eb28:	008003c4 	movi	r2,15
 401eb2c:	10c00a36 	bltu	r2,r3,401eb58 <t_getname+0x138>
      {
         dtrap();    /* programming error */
 401eb30:	401c81c0 	call	401c81c <dtrap>
         m_freem(m);
 401eb34:	8809883a 	mov	r4,r17
 401eb38:	401d74c0 	call	401d74c <m_freem>
         UNLOCK_NET_RESOURCE(NET_RESID);
 401eb3c:	0009883a 	mov	r4,zero
 401eb40:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401eb44:	00c00584 	movi	r3,22
 401eb48:	003fe506 	br	401eae0 <t_getname+0xc0>
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401eb4c:	401c81c0 	call	401c81c <dtrap>
 401eb50:	00ffffc4 	movi	r3,-1
 401eb54:	003fe206 	br	401eae0 <t_getname+0xc0>
         dtrap();    /* programming error */
         m_freem(m);
         UNLOCK_NET_RESOURCE(NET_RESID);
         return EINVAL;
      }
      MEMCPY(addr, m->m_data, sizeof(struct sockaddr_in));
 401eb58:	89400317 	ldw	r5,12(r17)
 401eb5c:	a809883a 	mov	r4,r21
 401eb60:	980d883a 	mov	r6,r19
 401eb64:	40096480 	call	4009648 <memcpy>
      *addrlen = sizeof(struct sockaddr_in);
 401eb68:	a4c00015 	stw	r19,0(r20)
 401eb6c:	003fd706 	br	401eacc <t_getname+0xac>
   }
#endif   /* IP_V6 */


bad:
   m_freem(m);
 401eb70:	8809883a 	mov	r4,r17
 401eb74:	401d74c0 	call	401d74c <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401eb78:	0009883a 	mov	r4,zero
 401eb7c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   if (err) 
   {
      so->so_error = err;
 401eb80:	00ffffc4 	movi	r3,-1
 401eb84:	84800615 	stw	r18,24(r16)
 401eb88:	003fd506 	br	401eae0 <t_getname+0xc0>
   }
   LOCK_NET_RESOURCE(NET_RESID);
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
   if (m == NULL) 
   {
      so->so_error = ENOMEM;
 401eb8c:	00800304 	movi	r2,12
 401eb90:	80800615 	stw	r2,24(r16)
      UNLOCK_NET_RESOURCE(NET_RESID);
 401eb94:	0009883a 	mov	r4,zero
 401eb98:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401eb9c:	00ffffc4 	movi	r3,-1
 401eba0:	003fcf06 	br	401eae0 <t_getname+0xc0>

0401eba4 <t_getsockname>:
 */

int 
t_getsockname(long s, struct sockaddr * addr, int * addrlen)
{
   return(t_getname(s, addr, addrlen, PRU_SOCKADDR));
 401eba4:	01c003c4 	movi	r7,15
 401eba8:	401ea201 	jmpi	401ea20 <t_getname>

0401ebac <t_getpeername>:
 */

int
t_getpeername(long s, struct sockaddr * addr, int * addrlen)
{
   return(t_getname(s, addr, addrlen, PRU_PEERADDR));
 401ebac:	01c00404 	movi	r7,16
 401ebb0:	401ea201 	jmpi	401ea20 <t_getname>

0401ebb4 <t_recvfrom>:
   struct socket *   so;
   struct mbuf *     sender = NULL;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
 401ebb4:	213ff804 	addi	r4,r4,-32
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
 401ebb8:	defff804 	addi	sp,sp,-32
   struct socket *   so;
   struct mbuf *     sender = NULL;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
 401ebbc:	2109883a 	add	r4,r4,r4
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
 401ebc0:	dcc00615 	stw	r19,24(sp)
 401ebc4:	dc800515 	stw	r18,20(sp)
 401ebc8:	dc400415 	stw	r17,16(sp)
 401ebcc:	dc000315 	stw	r16,12(sp)
 401ebd0:	dfc00715 	stw	ra,28(sp)
   struct socket *   so;
   struct mbuf *     sender = NULL;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
 401ebd4:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401ebd8:	00810134 	movhi	r2,1028
 401ebdc:	108cf804 	addi	r2,r2,13280
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
 401ebe0:	2823883a 	mov	r17,r5
 401ebe4:	d9800215 	stw	r6,8(sp)
 401ebe8:	3825883a 	mov	r18,r7
   struct socket *   so;
   struct mbuf *     sender = NULL;
 401ebec:	d8000115 	stw	zero,4(sp)
   int   err;
   int   sendlen = len;
 401ebf0:	3027883a 	mov	r19,r6

   so = LONG2SO(s);
   SOC_CHECK(so);
 401ebf4:	80800326 	beq	r16,r2,401ec04 <t_recvfrom+0x50>
 401ebf8:	10800017 	ldw	r2,0(r2)
 401ebfc:	103ffd1e 	bne	r2,zero,401ebf4 <t_recvfrom+0x40>
 401ec00:	80801f1e 	bne	r16,r2,401ec80 <t_recvfrom+0xcc>
   so->so_error = 0;

   LOCK_NET_RESOURCE(NET_RESID);
 401ec04:	0009883a 	mov	r4,zero
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
   SOC_CHECK(so);
   so->so_error = 0;
 401ec08:	80000615 	stw	zero,24(r16)

   LOCK_NET_RESOURCE(NET_RESID);
 401ec0c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   err = soreceive(so, &sender, buf, &len, flags);
 401ec10:	880d883a 	mov	r6,r17
 401ec14:	8009883a 	mov	r4,r16
 401ec18:	d9400104 	addi	r5,sp,4
 401ec1c:	d9c00204 	addi	r7,sp,8
 401ec20:	dc800015 	stw	r18,0(sp)
 401ec24:	40201480 	call	4020148 <soreceive>
 401ec28:	1023883a 	mov	r17,r2

   /* copy sender info from mbuf to sockaddr */
   if (sender)
 401ec2c:	d8800117 	ldw	r2,4(sp)
 401ec30:	10000726 	beq	r2,zero,401ec50 <t_recvfrom+0x9c>
   {
      MEMCPY(from, (mtod(sender, struct sockaddr *)), *fromlen );
 401ec34:	11400317 	ldw	r5,12(r2)
 401ec38:	d8800917 	ldw	r2,36(sp)
 401ec3c:	d9000817 	ldw	r4,32(sp)
 401ec40:	11800017 	ldw	r6,0(r2)
 401ec44:	40096480 	call	4009648 <memcpy>
      m_freem (sender);
 401ec48:	d9000117 	ldw	r4,4(sp)
 401ec4c:	401d74c0 	call	401d74c <m_freem>
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 401ec50:	0009883a 	mov	r4,zero
 401ec54:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if(err)
 401ec58:	88000c1e 	bne	r17,zero,401ec8c <t_recvfrom+0xd8>
      so->so_error = err;
      return SOCKET_ERROR;
   }

   /* OK return: amount of data actually sent */
   return (sendlen - len);
 401ec5c:	d8800217 	ldw	r2,8(sp)
 401ec60:	9885c83a 	sub	r2,r19,r2
}
 401ec64:	dfc00717 	ldw	ra,28(sp)
 401ec68:	dcc00617 	ldw	r19,24(sp)
 401ec6c:	dc800517 	ldw	r18,20(sp)
 401ec70:	dc400417 	ldw	r17,16(sp)
 401ec74:	dc000317 	ldw	r16,12(sp)
 401ec78:	dec00804 	addi	sp,sp,32
 401ec7c:	f800283a 	ret
   struct mbuf *     sender = NULL;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401ec80:	401c81c0 	call	401c81c <dtrap>
 401ec84:	00bfffc4 	movi	r2,-1
 401ec88:	003ff606 	br	401ec64 <t_recvfrom+0xb0>

   UNLOCK_NET_RESOURCE(NET_RESID);

   if(err)
   {
      so->so_error = err;
 401ec8c:	00bfffc4 	movi	r2,-1
 401ec90:	84400615 	stw	r17,24(r16)
 401ec94:	003ff306 	br	401ec64 <t_recvfrom+0xb0>

0401ec98 <t_recv>:
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
 401ec98:	213ff804 	addi	r4,r4,-32
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 401ec9c:	defff904 	addi	sp,sp,-28
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
 401eca0:	2109883a 	add	r4,r4,r4
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 401eca4:	dc000215 	stw	r16,8(sp)
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;

   so = LONG2SO(s);
 401eca8:	2121883a 	add	r16,r4,r4
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 401ecac:	80c0088b 	ldhu	r3,34(r16)
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 401ecb0:	d9800115 	stw	r6,4(sp)

   so = LONG2SO(s);
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 401ecb4:	00800084 	movi	r2,2
 401ecb8:	18c0038c 	andi	r3,r3,14
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 401ecbc:	dcc00515 	stw	r19,20(sp)
 401ecc0:	dc800415 	stw	r18,16(sp)
 401ecc4:	dc400315 	stw	r17,12(sp)
 401ecc8:	dfc00615 	stw	ra,24(sp)
#endif
      return SOCKET_ERROR;
   }
   so->so_error = 0;

   LOCK_NET_RESOURCE(NET_RESID);
 401eccc:	0009883a 	mov	r4,zero
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
   {
      so->so_error = EPIPE;
 401ecd0:	01bfffc4 	movi	r6,-1
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 401ecd4:	2823883a 	mov	r17,r5
 401ecd8:	3825883a 	mov	r18,r7
#ifdef SOCKDEBUG
   char logbuf[10];
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;
 401ecdc:	dcc00117 	ldw	r19,4(sp)

   so = LONG2SO(s);
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 401ece0:	1880171e 	bne	r3,r2,401ed40 <t_recv+0xa8>
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   so->so_error = 0;
 401ece4:	80000615 	stw	zero,24(r16)

   LOCK_NET_RESOURCE(NET_RESID);
 401ece8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
 401ecec:	880d883a 	mov	r6,r17
 401ecf0:	8009883a 	mov	r4,r16
 401ecf4:	000b883a 	mov	r5,zero
 401ecf8:	d9c00104 	addi	r7,sp,4
 401ecfc:	dc800015 	stw	r18,0(sp)
 401ed00:	40201480 	call	4020148 <soreceive>
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
 401ed04:	0009883a 	mov	r4,zero
   so->so_error = 0;

   LOCK_NET_RESOURCE(NET_RESID);
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
 401ed08:	1023883a 	mov	r17,r2
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
 401ed0c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if(err)
   {
      so->so_error = err;
 401ed10:	01bfffc4 	movi	r6,-1
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);

   if(err)
 401ed14:	8800141e 	bne	r17,zero,401ed68 <t_recv+0xd0>
   }

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
 401ed18:	d8800117 	ldw	r2,4(sp)
 401ed1c:	988dc83a 	sub	r6,r19,r2
}
 401ed20:	3005883a 	mov	r2,r6
 401ed24:	dfc00617 	ldw	ra,24(sp)
 401ed28:	dcc00517 	ldw	r19,20(sp)
 401ed2c:	dc800417 	ldw	r18,16(sp)
 401ed30:	dc400317 	ldw	r17,12(sp)
 401ed34:	dc000217 	ldw	r16,8(sp)
 401ed38:	dec00704 	addi	sp,sp,28
 401ed3c:	f800283a 	ret
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
   {
      so->so_error = EPIPE;
 401ed40:	00800804 	movi	r2,32
 401ed44:	80800615 	stw	r2,24(r16)

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
}
 401ed48:	3005883a 	mov	r2,r6
 401ed4c:	dfc00617 	ldw	ra,24(sp)
 401ed50:	dcc00517 	ldw	r19,20(sp)
 401ed54:	dc800417 	ldw	r18,16(sp)
 401ed58:	dc400317 	ldw	r17,12(sp)
 401ed5c:	dc000217 	ldw	r16,8(sp)
 401ed60:	dec00704 	addi	sp,sp,28
 401ed64:	f800283a 	ret
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);

   if(err)
   {
      so->so_error = err;
 401ed68:	84400615 	stw	r17,24(r16)
 401ed6c:	003fec06 	br	401ed20 <t_recv+0x88>

0401ed70 <t_getsockopt>:

{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401ed70:	213ff804 	addi	r4,r4,-32
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
 401ed74:	defffb04 	addi	sp,sp,-20
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401ed78:	2109883a 	add	r4,r4,r4
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
 401ed7c:	dc800315 	stw	r18,12(sp)
 401ed80:	dc400215 	stw	r17,8(sp)
 401ed84:	dc000115 	stw	r16,4(sp)
 401ed88:	dfc00415 	stw	ra,16(sp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401ed8c:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401ed90:	00810134 	movhi	r2,1028
 401ed94:	108cf804 	addi	r2,r2,13280
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
 401ed98:	2825883a 	mov	r18,r5
 401ed9c:	3023883a 	mov	r17,r6
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401eda0:	80800326 	beq	r16,r2,401edb0 <t_getsockopt+0x40>
 401eda4:	10800017 	ldw	r2,0(r2)
 401eda8:	103ffd1e 	bne	r2,zero,401eda0 <t_getsockopt+0x30>
 401edac:	8080251e 	bne	r16,r2,401ee44 <t_getsockopt+0xd4>
   USE_ARG(level);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 401edb0:	0009883a 	mov	r4,zero
 401edb4:	d9c00015 	stw	r7,0(sp)
 401edb8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: getsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 401edbc:	00800044 	movi	r2,1
 401edc0:	d9c00017 	ldw	r7,0(sp)
 401edc4:	90800f26 	beq	r18,r2,401ee04 <t_getsockopt+0x94>
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
 401edc8:	880b883a 	mov	r5,r17
 401edcc:	380d883a 	mov	r6,r7
 401edd0:	8009883a 	mov	r4,r16
 401edd4:	401f6e40 	call	401f6e4 <sogetopt>
 401edd8:	1000241e 	bne	r2,zero,401ee6c <t_getsockopt+0xfc>
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
         return SOCKET_ERROR;
      }
   }   
   so->so_error = 0;
 401eddc:	80000615 	stw	zero,24(r16)

   UNLOCK_NET_RESOURCE (NET_RESID);
 401ede0:	0009883a 	mov	r4,zero
 401ede4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401ede8:	0005883a 	mov	r2,zero
   return 0;
}
 401edec:	dfc00417 	ldw	ra,16(sp)
 401edf0:	dc800317 	ldw	r18,12(sp)
 401edf4:	dc400217 	ldw	r17,8(sp)
 401edf8:	dc000117 	ldw	r16,4(sp)
 401edfc:	dec00504 	addi	sp,sp,20
 401ee00:	f800283a 	ret
   {
      /* level 1 options are for the IP packet level.
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
 401ee04:	00800104 	movi	r2,4
 401ee08:	88800726 	beq	r17,r2,401ee28 <t_getsockopt+0xb8>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
      }
      else if (name == IP_TOS)
 401ee0c:	008000c4 	movi	r2,3
 401ee10:	8880121e 	bne	r17,r2,401ee5c <t_getsockopt+0xec>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
 401ee14:	80801f17 	ldw	r2,124(r16)
 401ee18:	10000826 	beq	r2,zero,401ee3c <t_getsockopt+0xcc>
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
 401ee1c:	10800003 	ldbu	r2,0(r2)
 401ee20:	38800015 	stw	r2,0(r7)
 401ee24:	003fed06 	br	401eddc <t_getsockopt+0x6c>
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
 401ee28:	80801f17 	ldw	r2,124(r16)
 401ee2c:	10000826 	beq	r2,zero,401ee50 <t_getsockopt+0xe0>
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
 401ee30:	10800043 	ldbu	r2,1(r2)
 401ee34:	38800015 	stw	r2,0(r7)
 401ee38:	003fe806 	br	401eddc <t_getsockopt+0x6c>
      }
      else if (name == IP_TOS)
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
 401ee3c:	38000015 	stw	zero,0(r7)
 401ee40:	003fe606 	br	401eddc <t_getsockopt+0x6c>
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401ee44:	401c81c0 	call	401c81c <dtrap>
 401ee48:	00bfffc4 	movi	r2,-1
 401ee4c:	003fe706 	br	401edec <t_getsockopt+0x7c>
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
 401ee50:	00801004 	movi	r2,64
 401ee54:	38800015 	stw	r2,0(r7)
 401ee58:	003fe006 	br	401eddc <t_getsockopt+0x6c>
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
      }
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 401ee5c:	0009883a 	mov	r4,zero
 401ee60:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401ee64:	00bfffc4 	movi	r2,-1
 401ee68:	003fe006 	br	401edec <t_getsockopt+0x7c>
   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
      {
         so->so_error = err;
 401ee6c:	80800615 	stw	r2,24(r16)
         UNLOCK_NET_RESOURCE (NET_RESID);
 401ee70:	0009883a 	mov	r4,zero
 401ee74:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401ee78:	00bfffc4 	movi	r2,-1
 401ee7c:	003fdb06 	br	401edec <t_getsockopt+0x7c>

0401ee80 <t_setsockopt>:
   int arglen)
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401ee80:	213ff804 	addi	r4,r4,-32
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
 401ee84:	defffb04 	addi	sp,sp,-20
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401ee88:	2109883a 	add	r4,r4,r4
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
 401ee8c:	dcc00315 	stw	r19,12(sp)
 401ee90:	dc800215 	stw	r18,8(sp)
 401ee94:	dc400115 	stw	r17,4(sp)
 401ee98:	dc000015 	stw	r16,0(sp)
 401ee9c:	dfc00415 	stw	ra,16(sp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 401eea0:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401eea4:	00810134 	movhi	r2,1028
 401eea8:	108cf804 	addi	r2,r2,13280
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
 401eeac:	2825883a 	mov	r18,r5
 401eeb0:	3023883a 	mov	r17,r6
 401eeb4:	3827883a 	mov	r19,r7
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401eeb8:	80800326 	beq	r16,r2,401eec8 <t_setsockopt+0x48>
 401eebc:	10800017 	ldw	r2,0(r2)
 401eec0:	103ffd1e 	bne	r2,zero,401eeb8 <t_setsockopt+0x38>
 401eec4:	8080281e 	bne	r16,r2,401ef68 <t_setsockopt+0xe8>
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 401eec8:	0009883a 	mov	r4,zero
 401eecc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 401eed0:	00800044 	movi	r2,1
   SOC_CHECK(so);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);

   so->so_error = 0;
 401eed4:	80000615 	stw	zero,24(r16)
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 401eed8:	90800f26 	beq	r18,r2,401ef18 <t_setsockopt+0x98>
   {
      if ((err = sosetopt (so, name, arg)) != 0) 
 401eedc:	880b883a 	mov	r5,r17
 401eee0:	980d883a 	mov	r6,r19
 401eee4:	8009883a 	mov	r4,r16
 401eee8:	401f9b80 	call	401f9b8 <sosetopt>
 401eeec:	1000261e 	bne	r2,zero,401ef88 <t_setsockopt+0x108>
         UNLOCK_NET_RESOURCE (NET_RESID);
         return SOCKET_ERROR;
      }   
   }

   UNLOCK_NET_RESOURCE (NET_RESID);
 401eef0:	0009883a 	mov	r4,zero
 401eef4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401eef8:	0005883a 	mov	r2,zero
   return 0;
}
 401eefc:	dfc00417 	ldw	ra,16(sp)
 401ef00:	dcc00317 	ldw	r19,12(sp)
 401ef04:	dc800217 	ldw	r18,8(sp)
 401ef08:	dc400117 	ldw	r17,4(sp)
 401ef0c:	dc000017 	ldw	r16,0(sp)
 401ef10:	dec00504 	addi	sp,sp,20
 401ef14:	f800283a 	ret
   {
   /* level 1 options are for the IP packet level.
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
 401ef18:	80801f17 	ldw	r2,124(r16)
 401ef1c:	10001526 	beq	r2,zero,401ef74 <t_setsockopt+0xf4>
            UNLOCK_NET_RESOURCE (NET_RESID);
            return SOCKET_ERROR;
         }
      }
      
      if (name == IP_TTL_OPT)
 401ef20:	00800104 	movi	r2,4
 401ef24:	88800826 	beq	r17,r2,401ef48 <t_setsockopt+0xc8>
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
      else
      if (name == IP_TOS)
 401ef28:	008000c4 	movi	r2,3
 401ef2c:	88800a26 	beq	r17,r2,401ef58 <t_setsockopt+0xd8>
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
	   else
	   if (name == IP_SCOPEID)
 401ef30:	00800384 	movi	r2,14
 401ef34:	8880151e 	bne	r17,r2,401ef8c <t_setsockopt+0x10c>
            so->so_optsPack->ip_scopeid = (u_char)(*(u_int *)arg);
 401ef38:	80c01f17 	ldw	r3,124(r16)
 401ef3c:	98800003 	ldbu	r2,0(r19)
 401ef40:	18800115 	stw	r2,4(r3)
 401ef44:	003fea06 	br	401eef0 <t_setsockopt+0x70>
            return SOCKET_ERROR;
         }
      }
      
      if (name == IP_TTL_OPT)
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
 401ef48:	80c01f17 	ldw	r3,124(r16)
 401ef4c:	98800017 	ldw	r2,0(r19)
 401ef50:	18800045 	stb	r2,1(r3)
 401ef54:	003fe606 	br	401eef0 <t_setsockopt+0x70>
      else
      if (name == IP_TOS)
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
 401ef58:	80c01f17 	ldw	r3,124(r16)
 401ef5c:	98800017 	ldw	r2,0(r19)
 401ef60:	18800005 	stb	r2,0(r3)
 401ef64:	003fe206 	br	401eef0 <t_setsockopt+0x70>
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401ef68:	401c81c0 	call	401c81c <dtrap>
 401ef6c:	00bfffc4 	movi	r2,-1
 401ef70:	003fe206 	br	401eefc <t_setsockopt+0x7c>
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
      {
         so->so_optsPack = (struct ip_socopts *) SOCOPT_ALLOC (sizeof(struct ip_socopts *));
 401ef74:	01000104 	movi	r4,4
 401ef78:	401cdc80 	call	401cdc8 <npalloc>
 401ef7c:	80801f15 	stw	r2,124(r16)
         if (!so->so_optsPack) 
 401ef80:	103fe71e 	bne	r2,zero,401ef20 <t_setsockopt+0xa0>
         {
            so->so_error = ENOMEM;
 401ef84:	00800304 	movi	r2,12
 401ef88:	80800615 	stw	r2,24(r16)
            UNLOCK_NET_RESOURCE (NET_RESID);
 401ef8c:	0009883a 	mov	r4,zero
 401ef90:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401ef94:	00bfffc4 	movi	r2,-1
 401ef98:	003fd806 	br	401eefc <t_setsockopt+0x7c>

0401ef9c <t_connect>:
   int   addrlen)
{
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 401ef9c:	213ff804 	addi	r4,r4,-32

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
 401efa0:	defffc04 	addi	sp,sp,-16
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 401efa4:	2109883a 	add	r4,r4,r4

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
 401efa8:	dc800215 	stw	r18,8(sp)
 401efac:	dc400115 	stw	r17,4(sp)
 401efb0:	dc000015 	stw	r16,0(sp)
 401efb4:	dfc00315 	stw	ra,12(sp)
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 401efb8:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401efbc:	00810134 	movhi	r2,1028
 401efc0:	108cf804 	addi	r2,r2,13280

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
 401efc4:	2825883a 	mov	r18,r5
 401efc8:	3023883a 	mov	r17,r6
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401efcc:	80800326 	beq	r16,r2,401efdc <t_connect+0x40>
 401efd0:	10800017 	ldw	r2,0(r2)
 401efd4:	103ffd1e 	bne	r2,zero,401efcc <t_connect+0x30>
 401efd8:	80804b1e 	bne	r16,r2,401f108 <t_connect+0x16c>
   DOMAIN_CHECK(so, addrlen);
 401efdc:	8009883a 	mov	r4,r16
 401efe0:	880b883a 	mov	r5,r17
 401efe4:	401e57c0 	call	401e57c <DOMAIN_CHECK>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits in case this is a 
      poll of a previous request */
   if (so->so_state & SS_NBIO)
 401efe8:	8100088b 	ldhu	r4,34(r16)
 401efec:	20ffffcc 	andi	r3,r4,65535
 401eff0:	1880400c 	andi	r2,r3,256
 401eff4:	10000e26 	beq	r2,zero,401f030 <t_connect+0x94>
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
 401eff8:	1880010c 	andi	r2,r3,4
 401effc:	1000451e 	bne	r2,zero,401f114 <t_connect+0x178>
      {
         so->so_error = EINPROGRESS;
         return SOCKET_ERROR;
      }
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
 401f000:	1880008c 	andi	r2,r3,2
 401f004:	10000826 	beq	r2,zero,401f028 <t_connect+0x8c>
      {
         so->so_error = 0;
 401f008:	0005883a 	mov	r2,zero
 401f00c:	80000615 	stw	zero,24(r16)
/*      printf("t_connect(): so_error = %d\n", so->so_error);*/
      return SOCKET_ERROR;

   }
      return 0;
}
 401f010:	dfc00317 	ldw	ra,12(sp)
 401f014:	dc800217 	ldw	r18,8(sp)
 401f018:	dc400117 	ldw	r17,4(sp)
 401f01c:	dc000017 	ldw	r16,0(sp)
 401f020:	dec00404 	addi	sp,sp,16
 401f024:	f800283a 	ret
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
      {
         so->so_error = 0;
         return 0;
      }
      if (so->so_state & SS_WASCONNECTING)
 401f028:	1888000c 	andi	r2,r3,8192
 401f02c:	1000301e 	bne	r2,zero,401f0f0 <t_connect+0x154>
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
 401f030:	9009883a 	mov	r4,r18
            return SOCKET_ERROR;
      }
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;
 401f034:	80000615 	stw	zero,24(r16)

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
 401f038:	880b883a 	mov	r5,r17
 401f03c:	01800244 	movi	r6,9
 401f040:	401e69c0 	call	401e69c <sockargs>
 401f044:	1025883a 	mov	r18,r2
 401f048:	10003626 	beq	r2,zero,401f124 <t_connect+0x188>
      INET_TRACE (INETM_SOCKET, ("INET: connect, port %d addr %lx\n",
       sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_DEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 401f04c:	0009883a 	mov	r4,zero
 401f050:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   if ((so->so_error = soconnect (so, nam)) != 0)
 401f054:	900b883a 	mov	r5,r18
 401f058:	8009883a 	mov	r4,r16
 401f05c:	401f63c0 	call	401f63c <soconnect>
 401f060:	80800615 	stw	r2,24(r16)
 401f064:	10000e26 	beq	r2,zero,401f0a0 <t_connect+0x104>
 401f068:	80c00617 	ldw	r3,24(r16)
   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   {
      tcp_sleep ((char *)&so->so_timeo);
   }
bad:
   if (so->so_error != EINPROGRESS)
 401f06c:	00801dc4 	movi	r2,119
 401f070:	18800326 	beq	r3,r2,401f080 <t_connect+0xe4>
 401f074:	8100088b 	ldhu	r4,34(r16)
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
 401f078:	20b7fecc 	andi	r2,r4,57339
 401f07c:	8080088d 	sth	r2,34(r16)
   m_freem (nam);
 401f080:	9009883a 	mov	r4,r18
 401f084:	401d74c0 	call	401d74c <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 401f088:	0009883a 	mov	r4,zero
 401f08c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   if (so->so_error)
 401f090:	80800617 	ldw	r2,24(r16)
 401f094:	103fde26 	beq	r2,zero,401f010 <t_connect+0x74>
 401f098:	00bfffc4 	movi	r2,-1
 401f09c:	003fdc06 	br	401f010 <t_connect+0x74>
   if ((so->so_error = soconnect (so, nam)) != 0)
      goto bad;

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
 401f0a0:	8100088b 	ldhu	r4,34(r16)
 401f0a4:	00804104 	movi	r2,260
 401f0a8:	217fffcc 	andi	r5,r4,65535
 401f0ac:	28c0410c 	andi	r3,r5,260
 401f0b0:	18800c26 	beq	r3,r2,401f0e4 <t_connect+0x148>
   }
#endif   /*  NB_CONNECT */
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
 401f0b4:	2880010c 	andi	r2,r5,4
 401f0b8:	103fef26 	beq	r2,zero,401f078 <t_connect+0xdc>
 401f0bc:	84400904 	addi	r17,r16,36
 401f0c0:	00000206 	br	401f0cc <t_connect+0x130>
 401f0c4:	80c00617 	ldw	r3,24(r16)
 401f0c8:	183fe81e 	bne	r3,zero,401f06c <t_connect+0xd0>
   {
      tcp_sleep ((char *)&so->so_timeo);
 401f0cc:	8809883a 	mov	r4,r17
 401f0d0:	401a4c00 	call	401a4c0 <tcp_sleep>
   }
#endif   /*  NB_CONNECT */
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
 401f0d4:	8080088b 	ldhu	r2,34(r16)
 401f0d8:	1080010c 	andi	r2,r2,4
 401f0dc:	103ff91e 	bne	r2,zero,401f0c4 <t_connect+0x128>
 401f0e0:	003fe106 	br	401f068 <t_connect+0xcc>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
   {
      so->so_error = EINPROGRESS;
 401f0e4:	00c01dc4 	movi	r3,119
 401f0e8:	80c00615 	stw	r3,24(r16)
 401f0ec:	003fe406 	br	401f080 <t_connect+0xe4>
         return 0;
      }
      if (so->so_state & SS_WASCONNECTING)
      {
         so->so_state &= ~SS_WASCONNECTING;
         if (so->so_error) /* connect error - maybe timeout */
 401f0f0:	80c00617 	ldw	r3,24(r16)
         so->so_error = 0;
         return 0;
      }
      if (so->so_state & SS_WASCONNECTING)
      {
         so->so_state &= ~SS_WASCONNECTING;
 401f0f4:	20b7ffcc 	andi	r2,r4,57343
 401f0f8:	8080088d 	sth	r2,34(r16)
         if (so->so_error) /* connect error - maybe timeout */
 401f0fc:	183fcc26 	beq	r3,zero,401f030 <t_connect+0x94>
   if (so->so_error != EINPROGRESS)
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
   m_freem (nam);

   UNLOCK_NET_RESOURCE(NET_RESID);
   if (so->so_error)
 401f100:	00bfffc4 	movi	r2,-1
 401f104:	003fc206 	br	401f010 <t_connect+0x74>
{
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401f108:	401c81c0 	call	401c81c <dtrap>
 401f10c:	00bfffc4 	movi	r2,-1
 401f110:	003fbf06 	br	401f010 <t_connect+0x74>
      poll of a previous request */
   if (so->so_state & SS_NBIO)
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
      {
         so->so_error = EINPROGRESS;
 401f114:	00c01dc4 	movi	r3,119
 401f118:	00bfffc4 	movi	r2,-1
 401f11c:	80c00615 	stw	r3,24(r16)
 401f120:	003fbb06 	br	401f010 <t_connect+0x74>
   so->so_error = 0;

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
       == NULL)
   {
      so->so_error = ENOMEM;
 401f124:	00c00304 	movi	r3,12
 401f128:	00bfffc4 	movi	r2,-1
 401f12c:	80c00615 	stw	r3,24(r16)
 401f130:	003fb706 	br	401f010 <t_connect+0x74>

0401f134 <t_accept>:
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 401f134:	213ff804 	addi	r4,r4,-32

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
 401f138:	defffb04 	addi	sp,sp,-20
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 401f13c:	2109883a 	add	r4,r4,r4

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
 401f140:	dcc00315 	stw	r19,12(sp)
 401f144:	dc800215 	stw	r18,8(sp)
 401f148:	dc000015 	stw	r16,0(sp)
 401f14c:	dfc00415 	stw	ra,16(sp)
 401f150:	dc400115 	stw	r17,4(sp)
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 401f154:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401f158:	00810134 	movhi	r2,1028
 401f15c:	108cf804 	addi	r2,r2,13280

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
 401f160:	2827883a 	mov	r19,r5
 401f164:	3025883a 	mov	r18,r6
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401f168:	80800326 	beq	r16,r2,401f178 <t_accept+0x44>
 401f16c:	10800017 	ldw	r2,0(r2)
 401f170:	103ffd1e 	bne	r2,zero,401f168 <t_accept+0x34>
 401f174:	8080531e 	bne	r16,r2,401f2c4 <t_accept+0x190>
   DOMAIN_CHECK(so, *addrlen);
 401f178:	91400017 	ldw	r5,0(r18)
 401f17c:	8009883a 	mov	r4,r16
 401f180:	401e57c0 	call	401e57c <DOMAIN_CHECK>

   so->so_error = 0;
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
 401f184:	80800417 	ldw	r2,16(r16)

   so = LONG2SO(s);
   SOC_CHECK(so);
   DOMAIN_CHECK(so, *addrlen);

   so->so_error = 0;
 401f188:	80000615 	stw	zero,24(r16)
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
 401f18c:	1080008c 	andi	r2,r2,2
 401f190:	10004f26 	beq	r2,zero,401f2d0 <t_accept+0x19c>
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
 401f194:	8080088b 	ldhu	r2,34(r16)
 401f198:	1080400c 	andi	r2,r2,256
 401f19c:	10000226 	beq	r2,zero,401f1a8 <t_accept+0x74>
 401f1a0:	80801e47 	ldb	r2,121(r16)
 401f1a4:	10005226 	beq	r2,zero,401f2f0 <t_accept+0x1bc>
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
 401f1a8:	0009883a 	mov	r4,zero
 401f1ac:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   while (so->so_qlen == 0 && so->so_error == 0)
 401f1b0:	80801e47 	ldb	r2,121(r16)
 401f1b4:	1000101e 	bne	r2,zero,401f1f8 <t_accept+0xc4>
 401f1b8:	80800617 	ldw	r2,24(r16)
 401f1bc:	1000101e 	bne	r2,zero,401f200 <t_accept+0xcc>
   {
      if (so->so_state & SS_CANTRCVMORE)
 401f1c0:	8080088b 	ldhu	r2,34(r16)
 401f1c4:	1080080c 	andi	r2,r2,32
 401f1c8:	1000181e 	bne	r2,zero,401f22c <t_accept+0xf8>
 401f1cc:	84400904 	addi	r17,r16,36
 401f1d0:	00000506 	br	401f1e8 <t_accept+0xb4>
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
   while (so->so_qlen == 0 && so->so_error == 0)
 401f1d4:	80800617 	ldw	r2,24(r16)
 401f1d8:	1000091e 	bne	r2,zero,401f200 <t_accept+0xcc>
   {
      if (so->so_state & SS_CANTRCVMORE)
 401f1dc:	8080088b 	ldhu	r2,34(r16)
 401f1e0:	1080080c 	andi	r2,r2,32
 401f1e4:	1000111e 	bne	r2,zero,401f22c <t_accept+0xf8>
      {
         so->so_error = ECONNABORTED;
         UNLOCK_NET_RESOURCE(NET_RESID);
         return SOCKET_ERROR;
      }
      tcp_sleep ((char *)&so->so_timeo);
 401f1e8:	8809883a 	mov	r4,r17
 401f1ec:	401a4c00 	call	401a4c0 <tcp_sleep>
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
   while (so->so_qlen == 0 && so->so_error == 0)
 401f1f0:	80801e47 	ldb	r2,121(r16)
 401f1f4:	103ff726 	beq	r2,zero,401f1d4 <t_accept+0xa0>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return SOCKET_ERROR;
      }
      tcp_sleep ((char *)&so->so_timeo);
   }
   if (so->so_error)
 401f1f8:	80800617 	ldw	r2,24(r16)
 401f1fc:	10001826 	beq	r2,zero,401f260 <t_accept+0x12c>
   {
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 401f200:	0009883a 	mov	r4,zero
 401f204:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401f208:	00ffffc4 	movi	r3,-1
      MEMCPY(addr, nam->m_data, *addrlen);
   m_freem (nam);
   UNLOCK_NET_RESOURCE(NET_RESID);
   SOC_RANGE(so);
   return SO2LONG(so);
}
 401f20c:	1805883a 	mov	r2,r3
 401f210:	dfc00417 	ldw	ra,16(sp)
 401f214:	dcc00317 	ldw	r19,12(sp)
 401f218:	dc800217 	ldw	r18,8(sp)
 401f21c:	dc400117 	ldw	r17,4(sp)
 401f220:	dc000017 	ldw	r16,0(sp)
 401f224:	dec00504 	addi	sp,sp,20
 401f228:	f800283a 	ret
   LOCK_NET_RESOURCE(NET_RESID);
   while (so->so_qlen == 0 && so->so_error == 0)
   {
      if (so->so_state & SS_CANTRCVMORE)
      {
         so->so_error = ECONNABORTED;
 401f22c:	00801c44 	movi	r2,113
 401f230:	80800615 	stw	r2,24(r16)
         UNLOCK_NET_RESOURCE(NET_RESID);
 401f234:	0009883a 	mov	r4,zero
 401f238:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401f23c:	00ffffc4 	movi	r3,-1
      MEMCPY(addr, nam->m_data, *addrlen);
   m_freem (nam);
   UNLOCK_NET_RESOURCE(NET_RESID);
   SOC_RANGE(so);
   return SO2LONG(so);
}
 401f240:	1805883a 	mov	r2,r3
 401f244:	dfc00417 	ldw	ra,16(sp)
 401f248:	dcc00317 	ldw	r19,12(sp)
 401f24c:	dc800217 	ldw	r18,8(sp)
 401f250:	dc400117 	ldw	r17,4(sp)
 401f254:	dc000017 	ldw	r16,0(sp)
 401f258:	dec00504 	addi	sp,sp,20
 401f25c:	f800283a 	ret
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
      return SOCKET_ERROR;
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 401f260:	01000244 	movi	r4,9
 401f264:	01400404 	movi	r5,16
 401f268:	401dad40 	call	401dad4 <m_getnbuf>
 401f26c:	1023883a 	mov	r17,r2
   if (nam == NULL) 
 401f270:	10002326 	beq	r2,zero,401f300 <t_accept+0x1cc>
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   { 
      struct socket *aso = so->so_q;
 401f274:	84001d17 	ldw	r16,116(r16)
      if (soqremque (aso, 1) == 0)
 401f278:	01400044 	movi	r5,1
 401f27c:	8009883a 	mov	r4,r16
 401f280:	4020a540 	call	4020a54 <soqremque>
 401f284:	10001626 	beq	r2,zero,401f2e0 <t_accept+0x1ac>
         panic("accept");
      so = aso;
   }
   (void)soaccept (so, nam);
 401f288:	8009883a 	mov	r4,r16
 401f28c:	880b883a 	mov	r5,r17
 401f290:	40200dc0 	call	40200dc <soaccept>
      INET_TRACE (INETM_SOCKET, ("INET:accept:done so %lx port %d addr %lx\n",
       so, sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_INET */
   /* return the addressing info in the passed structure */
   if (addr != NULL)
 401f294:	98000426 	beq	r19,zero,401f2a8 <t_accept+0x174>
      MEMCPY(addr, nam->m_data, *addrlen);
 401f298:	91800017 	ldw	r6,0(r18)
 401f29c:	89400317 	ldw	r5,12(r17)
 401f2a0:	9809883a 	mov	r4,r19
 401f2a4:	40096480 	call	4009648 <memcpy>
   m_freem (nam);
 401f2a8:	8809883a 	mov	r4,r17
 401f2ac:	401d74c0 	call	401d74c <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401f2b0:	0009883a 	mov	r4,zero
 401f2b4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   SOC_RANGE(so);
   return SO2LONG(so);
 401f2b8:	8004d0ba 	srli	r2,r16,2
 401f2bc:	10c00804 	addi	r3,r2,32
 401f2c0:	003fd206 	br	401f20c <t_accept+0xd8>
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
   SOC_CHECK(so);
 401f2c4:	401c81c0 	call	401c81c <dtrap>
 401f2c8:	00ffffc4 	movi	r3,-1
 401f2cc:	003fcf06 	br	401f20c <t_accept+0xd8>
   so->so_error = 0;
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
   {
      so->so_error = EINVAL;
 401f2d0:	00800584 	movi	r2,22
 401f2d4:	00ffffc4 	movi	r3,-1
 401f2d8:	80800615 	stw	r2,24(r16)
 401f2dc:	003fcb06 	br	401f20c <t_accept+0xd8>
      return SOCKET_ERROR;
   }
   { 
      struct socket *aso = so->so_q;
      if (soqremque (aso, 1) == 0)
         panic("accept");
 401f2e0:	010100f4 	movhi	r4,1027
 401f2e4:	2114df04 	addi	r4,r4,21372
 401f2e8:	4019c440 	call	4019c44 <panic>
 401f2ec:	003fe606 	br	401f288 <t_accept+0x154>
#endif
      return SOCKET_ERROR;
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
   {
      so->so_error = EWOULDBLOCK;
 401f2f0:	008002c4 	movi	r2,11
 401f2f4:	00ffffc4 	movi	r3,-1
 401f2f8:	80800615 	stw	r2,24(r16)
 401f2fc:	003fc306 	br	401f20c <t_accept+0xd8>
      return SOCKET_ERROR;
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
   if (nam == NULL) 
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 401f300:	0009883a 	mov	r4,zero
 401f304:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      so->so_error = ENOMEM;
 401f308:	00800304 	movi	r2,12
 401f30c:	00ffffc4 	movi	r3,-1
 401f310:	80800615 	stw	r2,24(r16)
 401f314:	003fbd06 	br	401f20c <t_accept+0xd8>

0401f318 <t_listen>:
   int   backlog)
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
 401f318:	213ff804 	addi	r4,r4,-32
 */

int
t_listen(long s, 
   int   backlog)
{
 401f31c:	defffd04 	addi	sp,sp,-12
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
 401f320:	2109883a 	add	r4,r4,r4
 */

int
t_listen(long s, 
   int   backlog)
{
 401f324:	dc400115 	stw	r17,4(sp)
 401f328:	dc000015 	stw	r16,0(sp)
 401f32c:	dfc00215 	stw	ra,8(sp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
 401f330:	2121883a 	add	r16,r4,r4
   SOC_CHECK(so);
 401f334:	00810134 	movhi	r2,1028
 401f338:	108cf804 	addi	r2,r2,13280
 */

int
t_listen(long s, 
   int   backlog)
{
 401f33c:	2823883a 	mov	r17,r5
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
   SOC_CHECK(so);
 401f340:	80800326 	beq	r16,r2,401f350 <t_listen+0x38>
 401f344:	10800017 	ldw	r2,0(r2)
 401f348:	103ffd1e 	bne	r2,zero,401f340 <t_listen+0x28>
 401f34c:	8080101e 	bne	r16,r2,401f390 <t_listen+0x78>
   so->so_error = 0;
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
 401f350:	0009883a 	mov	r4,zero
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
   SOC_CHECK(so);
   so->so_error = 0;
 401f354:	80000615 	stw	zero,24(r16)
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
 401f358:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   err = solisten (so, backlog);
 401f35c:	880b883a 	mov	r5,r17
 401f360:	8009883a 	mov	r4,r16
 401f364:	401f5400 	call	401f540 <solisten>
 401f368:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(NET_RESID);
 401f36c:	0009883a 	mov	r4,zero
 401f370:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 401f374:	8800091e 	bne	r17,zero,401f39c <t_listen+0x84>
 401f378:	0005883a 	mov	r2,zero
   {
      so->so_error = err;
      return SOCKET_ERROR;
   }
   return 0;
}
 401f37c:	dfc00217 	ldw	ra,8(sp)
 401f380:	dc400117 	ldw	r17,4(sp)
 401f384:	dc000017 	ldw	r16,0(sp)
 401f388:	dec00304 	addi	sp,sp,12
 401f38c:	f800283a 	ret
{
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
   SOC_CHECK(so);
 401f390:	401c81c0 	call	401c81c <dtrap>
 401f394:	00bfffc4 	movi	r2,-1
 401f398:	003ff806 	br	401f37c <t_listen+0x64>
   err = solisten (so, backlog);
   UNLOCK_NET_RESOURCE(NET_RESID);

   if (err != 0) 
   {
      so->so_error = err;
 401f39c:	00bfffc4 	movi	r2,-1
 401f3a0:	84400615 	stw	r17,24(r16)
 401f3a4:	003ff506 	br	401f37c <t_listen+0x64>

0401f3a8 <t_bind>:
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
 401f3a8:	213ff804 	addi	r4,r4,-32

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
 401f3ac:	defff804 	addi	sp,sp,-32
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
 401f3b0:	2109883a 	add	r4,r4,r4

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
 401f3b4:	dc800615 	stw	r18,24(sp)
 401f3b8:	dc400515 	stw	r17,20(sp)
 401f3bc:	dc000415 	stw	r16,16(sp)
 401f3c0:	dfc00715 	stw	ra,28(sp)
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
 401f3c4:	2123883a 	add	r17,r4,r4
   SOC_CHECK(so);
 401f3c8:	00810134 	movhi	r2,1028
 401f3cc:	108cf804 	addi	r2,r2,13280

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
 401f3d0:	2825883a 	mov	r18,r5
 401f3d4:	3021883a 	mov	r16,r6
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
   SOC_CHECK(so);
 401f3d8:	88800326 	beq	r17,r2,401f3e8 <t_bind+0x40>
 401f3dc:	10800017 	ldw	r2,0(r2)
 401f3e0:	103ffd1e 	bne	r2,zero,401f3d8 <t_bind+0x30>
 401f3e4:	8880271e 	bne	r17,r2,401f484 <t_bind+0xdc>
   DOMAIN_CHECK(so, addrlen);
 401f3e8:	8809883a 	mov	r4,r17
 401f3ec:	800b883a 	mov	r5,r16
 401f3f0:	401e57c0 	call	401e57c <DOMAIN_CHECK>

   so->so_error = 0;
 401f3f4:	88000615 	stw	zero,24(r17)
   if (addr == (struct sockaddr *)NULL) 
 401f3f8:	90001926 	beq	r18,zero,401f460 <t_bind+0xb8>
 401f3fc:	9009883a 	mov	r4,r18
      sa.sa_family = so->so_domain;
      sap = &sa;
   } else
      sap = addr;

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
 401f400:	800b883a 	mov	r5,r16
 401f404:	01800244 	movi	r6,9
 401f408:	401e69c0 	call	401e69c <sockargs>
 401f40c:	1021883a 	mov	r16,r2
 401f410:	10002226 	beq	r2,zero,401f49c <t_bind+0xf4>
   {
      so->so_error = ENOMEM;
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
 401f414:	0009883a 	mov	r4,zero
 401f418:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   err = sobind (so, nam);
 401f41c:	800b883a 	mov	r5,r16
 401f420:	8809883a 	mov	r4,r17
 401f424:	401f5240 	call	401f524 <sobind>
   m_freem(nam);
 401f428:	8009883a 	mov	r4,r16
   {
      so->so_error = ENOMEM;
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
   err = sobind (so, nam);
 401f42c:	1025883a 	mov	r18,r2
   m_freem(nam);
 401f430:	401d74c0 	call	401d74c <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 401f434:	0009883a 	mov	r4,zero
 401f438:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   if (err) 
 401f43c:	9000141e 	bne	r18,zero,401f490 <t_bind+0xe8>
 401f440:	0007883a 	mov	r3,zero
   {
      so->so_error = err;
      return SOCKET_ERROR;
   }
   return 0;
}
 401f444:	1805883a 	mov	r2,r3
 401f448:	dfc00717 	ldw	ra,28(sp)
 401f44c:	dc800617 	ldw	r18,24(sp)
 401f450:	dc400517 	ldw	r17,20(sp)
 401f454:	dc000417 	ldw	r16,16(sp)
 401f458:	dec00804 	addi	sp,sp,32
 401f45c:	f800283a 	ret
   DOMAIN_CHECK(so, addrlen);

   so->so_error = 0;
   if (addr == (struct sockaddr *)NULL) 
   {
      MEMSET ((void *)&sa, 0, sizeof(sa));
 401f460:	d8000015 	stw	zero,0(sp)
 401f464:	d8000115 	stw	zero,4(sp)
 401f468:	d8000215 	stw	zero,8(sp)
 401f46c:	d8000315 	stw	zero,12(sp)
      addrlen = sizeof(sa);
      sa.sa_family = so->so_domain;
 401f470:	88800517 	ldw	r2,20(r17)
 401f474:	d809883a 	mov	r4,sp
 401f478:	04000404 	movi	r16,16
 401f47c:	d880000d 	sth	r2,0(sp)
 401f480:	003fdf06 	br	401f400 <t_bind+0x58>
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
   SOC_CHECK(so);
 401f484:	401c81c0 	call	401c81c <dtrap>
 401f488:	00ffffc4 	movi	r3,-1
 401f48c:	003fed06 	br	401f444 <t_bind+0x9c>
   err = sobind (so, nam);
   m_freem(nam);
   UNLOCK_NET_RESOURCE(NET_RESID);
   if (err) 
   {
      so->so_error = err;
 401f490:	00ffffc4 	movi	r3,-1
 401f494:	8c800615 	stw	r18,24(r17)
 401f498:	003fea06 	br	401f444 <t_bind+0x9c>
   } else
      sap = addr;

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
   {
      so->so_error = ENOMEM;
 401f49c:	00800304 	movi	r2,12
 401f4a0:	00ffffc4 	movi	r3,-1
 401f4a4:	88800615 	stw	r2,24(r17)
 401f4a8:	003fe606 	br	401f444 <t_bind+0x9c>

0401f4ac <t_socket>:

long
t_socket(int family, 
   int   type, 
   int   proto)
{
 401f4ac:	defffc04 	addi	sp,sp,-16
 401f4b0:	dc400015 	stw	r17,0(sp)
 401f4b4:	2023883a 	mov	r17,r4
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
 401f4b8:	0009883a 	mov	r4,zero

long
t_socket(int family, 
   int   type, 
   int   proto)
{
 401f4bc:	dfc00315 	stw	ra,12(sp)
 401f4c0:	dd400215 	stw	r21,8(sp)
 401f4c4:	dcc00115 	stw	r19,4(sp)
 401f4c8:	302b883a 	mov	r21,r6
 401f4cc:	2827883a 	mov	r19,r5
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
 401f4d0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   if ((so = socreate (family, type, proto)) == NULL) 
 401f4d4:	980b883a 	mov	r5,r19
 401f4d8:	8809883a 	mov	r4,r17
 401f4dc:	a80d883a 	mov	r6,r21
 401f4e0:	40208ec0 	call	40208ec <socreate>
 401f4e4:	1023883a 	mov	r17,r2
      UNLOCK_NET_RESOURCE(NET_RESID);
      return SOCKET_ERROR;
   }
   SOC_RANGE(so);
   so->so_error = 0;
   UNLOCK_NET_RESOURCE(NET_RESID);
 401f4e8:	0009883a 	mov	r4,zero
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
   if ((so = socreate (family, type, proto)) == NULL) 
 401f4ec:	10000a26 	beq	r2,zero,401f518 <t_socket+0x6c>
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
      return SOCKET_ERROR;
   }
   SOC_RANGE(so);
   so->so_error = 0;
 401f4f0:	10000615 	stw	zero,24(r2)
   UNLOCK_NET_RESOURCE(NET_RESID);
 401f4f4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   return SO2LONG(so);
 401f4f8:	8804d0ba 	srli	r2,r17,2
 401f4fc:	10800804 	addi	r2,r2,32
}
 401f500:	dfc00317 	ldw	ra,12(sp)
 401f504:	dd400217 	ldw	r21,8(sp)
 401f508:	dcc00117 	ldw	r19,4(sp)
 401f50c:	dc400017 	ldw	r17,0(sp)
 401f510:	dec00404 	addi	sp,sp,16
 401f514:	f800283a 	ret
   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
   if ((so = socreate (family, type, proto)) == NULL) 
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
 401f518:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 401f51c:	00bfffc4 	movi	r2,-1
 401f520:	003ff706 	br	401f500 <t_socket+0x54>

0401f524 <sobind>:
   struct mbuf *  nam)
{
   int   error;

   so->so_req = PRU_BIND;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 401f524:	20c00217 	ldw	r3,8(r4)
 */

int
sobind(struct socket * so, 
   struct mbuf *  nam)
{
 401f528:	280d883a 	mov	r6,r5
   int   error;

   so->so_req = PRU_BIND;
 401f52c:	00800084 	movi	r2,2
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 401f530:	1a400317 	ldw	r9,12(r3)
 401f534:	000b883a 	mov	r5,zero
sobind(struct socket * so, 
   struct mbuf *  nam)
{
   int   error;

   so->so_req = PRU_BIND;
 401f538:	20800715 	stw	r2,28(r4)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 401f53c:	4800683a 	jmp	r9

0401f540 <solisten>:
   int   backlog)
{
   int   error;

   so->so_req = PRU_LISTEN;
   error = (*so->so_proto->pr_usrreq)(so,
 401f540:	20c00217 	ldw	r3,8(r4)
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 401f544:	defffd04 	addi	sp,sp,-12
   int   error;

   so->so_req = PRU_LISTEN;
 401f548:	008000c4 	movi	r2,3
   error = (*so->so_proto->pr_usrreq)(so,
 401f54c:	19c00317 	ldw	r7,12(r3)
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 401f550:	dc400115 	stw	r17,4(sp)
 401f554:	dc000015 	stw	r16,0(sp)
   int   error;

   so->so_req = PRU_LISTEN;
 401f558:	20800715 	stw	r2,28(r4)
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 401f55c:	2823883a 	mov	r17,r5
 401f560:	dfc00215 	stw	ra,8(sp)
   int   error;

   so->so_req = PRU_LISTEN;
   error = (*so->so_proto->pr_usrreq)(so,
 401f564:	000b883a 	mov	r5,zero
 401f568:	000d883a 	mov	r6,zero
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 401f56c:	2021883a 	mov	r16,r4
   int   error;

   so->so_req = PRU_LISTEN;
   error = (*so->so_proto->pr_usrreq)(so,
 401f570:	383ee83a 	callr	r7
 401f574:	1007883a 	mov	r3,r2
      so->so_q0 = so;
      so->so_options |= SO_ACCEPTCONN;
   }
   if (backlog < 0)
      backlog = 0;
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 401f578:	880b883a 	mov	r5,r17
 401f57c:	01000144 	movi	r4,5
   int   error;

   so->so_req = PRU_LISTEN;
   error = (*so->so_proto->pr_usrreq)(so,
    (struct mbuf *)0, (struct mbuf *)0);
   if (error) 
 401f580:	1000051e 	bne	r2,zero,401f598 <solisten+0x58>
   {
      return (error);
   }
   if (so->so_q == 0) 
 401f584:	80801d17 	ldw	r2,116(r16)
 401f588:	10000e26 	beq	r2,zero,401f5c4 <solisten+0x84>
      so->so_q0 = so;
      so->so_options |= SO_ACCEPTCONN;
   }
   if (backlog < 0)
      backlog = 0;
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 401f58c:	28000a16 	blt	r5,zero,401f5b8 <solisten+0x78>
 401f590:	21400716 	blt	r4,r5,401f5b0 <solisten+0x70>
 401f594:	81401e85 	stb	r5,122(r16)
   return 0;
}
 401f598:	1805883a 	mov	r2,r3
 401f59c:	dfc00217 	ldw	ra,8(sp)
 401f5a0:	dc400117 	ldw	r17,4(sp)
 401f5a4:	dc000017 	ldw	r16,0(sp)
 401f5a8:	dec00304 	addi	sp,sp,12
 401f5ac:	f800283a 	ret
      so->so_q0 = so;
      so->so_options |= SO_ACCEPTCONN;
   }
   if (backlog < 0)
      backlog = 0;
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 401f5b0:	200b883a 	mov	r5,r4
 401f5b4:	003ff706 	br	401f594 <solisten+0x54>
 401f5b8:	000b883a 	mov	r5,zero
 401f5bc:	217ff50e 	bge	r4,r5,401f594 <solisten+0x54>
 401f5c0:	003ffb06 	br	401f5b0 <solisten+0x70>
   }
   if (so->so_q == 0) 
   {
      so->so_q = so;
      so->so_q0 = so;
      so->so_options |= SO_ACCEPTCONN;
 401f5c4:	80800417 	ldw	r2,16(r16)
   {
      return (error);
   }
   if (so->so_q == 0) 
   {
      so->so_q = so;
 401f5c8:	84001d15 	stw	r16,116(r16)
      so->so_q0 = so;
 401f5cc:	84001c15 	stw	r16,112(r16)
      so->so_options |= SO_ACCEPTCONN;
 401f5d0:	10800094 	ori	r2,r2,2
 401f5d4:	80800415 	stw	r2,16(r16)
   }
   if (backlog < 0)
      backlog = 0;
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 401f5d8:	283fed0e 	bge	r5,zero,401f590 <solisten+0x50>
 401f5dc:	003ff606 	br	401f5b8 <solisten+0x78>

0401f5e0 <soabort>:

int
soabort(struct socket * so)
{
   so->so_req = PRU_ABORT;
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 401f5e0:	21400217 	ldw	r5,8(r4)
 */

int
soabort(struct socket * so)
{
   so->so_req = PRU_ABORT;
 401f5e4:	00800284 	movi	r2,10
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 401f5e8:	000d883a 	mov	r6,zero
 401f5ec:	2a400317 	ldw	r9,12(r5)
 401f5f0:	000b883a 	mov	r5,zero
 */

int
soabort(struct socket * so)
{
   so->so_req = PRU_ABORT;
 401f5f4:	20800715 	stw	r2,28(r4)
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 401f5f8:	4800683a 	jmp	r9

0401f5fc <sodisconnect>:
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
 401f5fc:	2080088b 	ldhu	r2,34(r4)
 401f600:	02002004 	movi	r8,128
   {
      error = ENOTCONN;
      goto bad;
   }
   if (so->so_state & SS_ISDISCONNECTING) 
 401f604:	10c0020c 	andi	r3,r2,8
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
 401f608:	1080008c 	andi	r2,r2,2
 401f60c:	10000426 	beq	r2,zero,401f620 <sodisconnect+0x24>
   {
      error = EALREADY;
      goto bad;
   }
   so->so_req = PRU_DISCONNECT;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 401f610:	000b883a 	mov	r5,zero
 401f614:	000d883a 	mov	r6,zero
   if ((so->so_state & SS_ISCONNECTED) == 0) 
   {
      error = ENOTCONN;
      goto bad;
   }
   if (so->so_state & SS_ISDISCONNECTING) 
 401f618:	02001e04 	movi	r8,120
 401f61c:	18000226 	beq	r3,zero,401f628 <sodisconnect+0x2c>
   so->so_req = PRU_DISCONNECT;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);

bad:
   return (error);
}
 401f620:	4005883a 	mov	r2,r8
 401f624:	f800283a 	ret
   {
      error = EALREADY;
      goto bad;
   }
   so->so_req = PRU_DISCONNECT;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 401f628:	20800217 	ldw	r2,8(r4)
   if (so->so_state & SS_ISDISCONNECTING) 
   {
      error = EALREADY;
      goto bad;
   }
   so->so_req = PRU_DISCONNECT;
 401f62c:	00c00184 	movi	r3,6
 401f630:	20c00715 	stw	r3,28(r4)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 401f634:	12400317 	ldw	r9,12(r2)
 401f638:	4800683a 	jmp	r9

0401f63c <soconnect>:
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 401f63c:	20800417 	ldw	r2,16(r4)
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
 401f640:	defffd04 	addi	sp,sp,-12
 401f644:	dc400115 	stw	r17,4(sp)
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 401f648:	1080008c 	andi	r2,r2,2
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
 401f64c:	dc000015 	stw	r16,0(sp)
 401f650:	dfc00215 	stw	ra,8(sp)
 401f654:	2021883a 	mov	r16,r4
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 401f658:	00c017c4 	movi	r3,95
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
 401f65c:	2823883a 	mov	r17,r5
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 401f660:	1000161e 	bne	r2,zero,401f6bc <soconnect+0x80>
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 401f664:	2080088b 	ldhu	r2,34(r4)
 401f668:	1080018c 	andi	r2,r2,6
 401f66c:	10000626 	beq	r2,zero,401f688 <soconnect+0x4c>
 401f670:	20c00217 	ldw	r3,8(r4)
 401f674:	1880010b 	ldhu	r2,4(r3)
 401f678:	1080010c 	andi	r2,r2,4
 401f67c:	10000e1e 	bne	r2,zero,401f6b8 <soconnect+0x7c>
 401f680:	401f5fc0 	call	401f5fc <sodisconnect>
 401f684:	10000c1e 	bne	r2,zero,401f6b8 <soconnect+0x7c>
      error = EISCONN;
   }
   else
   {
      so->so_req = PRU_CONNECT;
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 401f688:	80800217 	ldw	r2,8(r16)
   {
      error = EISCONN;
   }
   else
   {
      so->so_req = PRU_CONNECT;
 401f68c:	00c00104 	movi	r3,4
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 401f690:	8009883a 	mov	r4,r16
 401f694:	12400317 	ldw	r9,12(r2)
 401f698:	880d883a 	mov	r6,r17
 401f69c:	000b883a 	mov	r5,zero
   {
      error = EISCONN;
   }
   else
   {
      so->so_req = PRU_CONNECT;
 401f6a0:	80c00715 	stw	r3,28(r16)
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
   }
   return error;
}
 401f6a4:	dfc00217 	ldw	ra,8(sp)
 401f6a8:	dc400117 	ldw	r17,4(sp)
 401f6ac:	dc000017 	ldw	r16,0(sp)
 401f6b0:	dec00304 	addi	sp,sp,12
      error = EISCONN;
   }
   else
   {
      so->so_req = PRU_CONNECT;
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 401f6b4:	4800683a 	jmp	r9
 401f6b8:	00c01fc4 	movi	r3,127
   }
   return error;
}
 401f6bc:	1805883a 	mov	r2,r3
 401f6c0:	dfc00217 	ldw	ra,8(sp)
 401f6c4:	dc400117 	ldw	r17,4(sp)
 401f6c8:	dc000017 	ldw	r16,0(sp)
 401f6cc:	dec00304 	addi	sp,sp,12
 401f6d0:	f800283a 	ret

0401f6d4 <sohasoutofband>:
 */

void
sohasoutofband(struct socket * so)
{
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
 401f6d4:	00803644 	movi	r2,217
   sorwakeup (so);
 401f6d8:	21400a04 	addi	r5,r4,40
 */

void
sohasoutofband(struct socket * so)
{
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
 401f6dc:	20800615 	stw	r2,24(r4)
   sorwakeup (so);
 401f6e0:	40211d81 	jmpi	40211d8 <sbwakeup>

0401f6e4 <sogetopt>:

int
sogetopt(struct socket * so, 
   int   optname,
   void *   val)
{
 401f6e4:	200f883a 	mov	r7,r4
   int   error =  0;

   /* sanity check the val parameter */
   if (!val)
 401f6e8:	3000a526 	beq	r6,zero,401f980 <sogetopt+0x29c>
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f6ec:	008400c4 	movi	r2,4099
 401f6f0:	28802126 	beq	r5,r2,401f778 <sogetopt+0x94>
 401f6f4:	11400f0e 	bge	r2,r5,401f734 <sogetopt+0x50>
 401f6f8:	00840404 	movi	r2,4112
 401f6fc:	28803726 	beq	r5,r2,401f7dc <sogetopt+0xf8>
 401f700:	1140220e 	bge	r2,r5,401f78c <sogetopt+0xa8>
 401f704:	008404c4 	movi	r2,4115
 401f708:	28806626 	beq	r5,r2,401f8a4 <sogetopt+0x1c0>
 401f70c:	11404e0e 	bge	r2,r5,401f848 <sogetopt+0x164>
 401f710:	008800c4 	movi	r2,8195
 401f714:	28803126 	beq	r5,r2,401f7dc <sogetopt+0xf8>
 401f718:	00880104 	movi	r2,8196
 401f71c:	28809a26 	beq	r5,r2,401f988 <sogetopt+0x2a4>
 401f720:	00840584 	movi	r2,4118
 401f724:	28805826 	beq	r5,r2,401f888 <sogetopt+0x1a4>
 401f728:	02001b44 	movi	r8,109

   default:
      return ENOPROTOOPT;
   }
   return error;     /* no error */
}
 401f72c:	4005883a 	mov	r2,r8
 401f730:	f800283a 	ret
   if (!val)
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f734:	00800404 	movi	r2,16
 401f738:	28800926 	beq	r5,r2,401f760 <sogetopt+0x7c>
 401f73c:	11401f0e 	bge	r2,r5,401f7bc <sogetopt+0xd8>
 401f740:	00804004 	movi	r2,256
 401f744:	28800626 	beq	r5,r2,401f760 <sogetopt+0x7c>
 401f748:	11402e0e 	bge	r2,r5,401f804 <sogetopt+0x120>
 401f74c:	00840044 	movi	r2,4097
 401f750:	28808326 	beq	r5,r2,401f960 <sogetopt+0x27c>
 401f754:	11406c16 	blt	r2,r5,401f908 <sogetopt+0x224>
 401f758:	00808004 	movi	r2,512
 401f75c:	28bff21e 	bne	r5,r2,401f728 <sogetopt+0x44>
   case SO_OOBINLINE:
   case SO_DONTROUTE:
   case SO_REUSEADDR:
   case SO_BROADCAST:
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
 401f760:	38800417 	ldw	r2,16(r7)
 401f764:	0011883a 	mov	r8,zero
 401f768:	1144703a 	and	r2,r2,r5
 401f76c:	30800015 	stw	r2,0(r6)

   default:
      return ENOPROTOOPT;
   }
   return error;     /* no error */
}
 401f770:	4005883a 	mov	r2,r8
 401f774:	f800283a 	ret
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
      break;

   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
 401f778:	20801617 	ldw	r2,88(r4)
 401f77c:	0011883a 	mov	r8,zero
 401f780:	30800015 	stw	r2,0(r6)

   default:
      return ENOPROTOOPT;
   }
   return error;     /* no error */
}
 401f784:	4005883a 	mov	r2,r8
 401f788:	f800283a 	ret
   if (!val)
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f78c:	00840184 	movi	r2,4102
 401f790:	28804d26 	beq	r5,r2,401f8c8 <sogetopt+0x1e4>
 401f794:	1140340e 	bge	r2,r5,401f868 <sogetopt+0x184>
 401f798:	00840204 	movi	r2,4104
 401f79c:	28806c26 	beq	r5,r2,401f950 <sogetopt+0x26c>
 401f7a0:	28805416 	blt	r5,r2,401f8f4 <sogetopt+0x210>
 401f7a4:	00840244 	movi	r2,4105
 401f7a8:	28bfdf1e 	bne	r5,r2,401f728 <sogetopt+0x44>
   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
      break;

   case SO_HOPCNT:
      *(int *)val = so->so_hopcnt;
 401f7ac:	208009c7 	ldb	r2,39(r4)
 401f7b0:	0011883a 	mov	r8,zero
 401f7b4:	30800015 	stw	r2,0(r6)
 401f7b8:	003ff206 	br	401f784 <sogetopt+0xa0>
   if (!val)
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f7bc:	00800204 	movi	r2,8
 401f7c0:	28bfe726 	beq	r5,r2,401f760 <sogetopt+0x7c>
 401f7c4:	11401a0e 	bge	r2,r5,401f830 <sogetopt+0x14c>
 401f7c8:	008002c4 	movi	r2,11
 401f7cc:	117fd616 	blt	r2,r5,401f728 <sogetopt+0x44>
#ifdef IP_MULTICAST

   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      error = ip_getmoptions(optname, so, val);
 401f7d0:	2809883a 	mov	r4,r5
 401f7d4:	380b883a 	mov	r5,r7
 401f7d8:	402cb3c1 	jmpi	402cb3c <ip_getmoptions>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 401f7dc:	38c00987 	ldb	r3,38(r7)
 401f7e0:	00800044 	movi	r2,1
 401f7e4:	1880641e 	bne	r3,r2,401f978 <sogetopt+0x294>
      {
         error = EINVAL;
         break;
      }
      inp = (struct inpcb *)(so->so_pcb);
      tp = intotcpcb(inp);
 401f7e8:	38800117 	ldw	r2,4(r7)
 401f7ec:	11000917 	ldw	r4,36(r2)
      if(!tp)
 401f7f0:	20005f26 	beq	r4,zero,401f970 <sogetopt+0x28c>
      {
         error = ENOTCONN;
         break;
      }
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
 401f7f4:	20800a0b 	ldhu	r2,40(r4)
 401f7f8:	0011883a 	mov	r8,zero
 401f7fc:	30800015 	stw	r2,0(r6)
 401f800:	003fe006 	br	401f784 <sogetopt+0xa0>
   if (!val)
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f804:	00800804 	movi	r2,32
 401f808:	28bfd526 	beq	r5,r2,401f760 <sogetopt+0x7c>
 401f80c:	00802004 	movi	r2,128
 401f810:	28bfc51e 	bne	r5,r2,401f728 <sogetopt+0x44>
         *(u_long *)val = nets[0]->n_ipaddr;
      break;
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
         l->l_onoff = so->so_options & SO_LINGER;
 401f814:	20800417 	ldw	r2,16(r4)
         l->l_linger = so->so_linger;
 401f818:	20c0080f 	ldh	r3,32(r4)
 401f81c:	0011883a 	mov	r8,zero
         *(u_long *)val = nets[0]->n_ipaddr;
      break;
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
         l->l_onoff = so->so_options & SO_LINGER;
 401f820:	1144703a 	and	r2,r2,r5
         l->l_linger = so->so_linger;
 401f824:	30c00115 	stw	r3,4(r6)
         *(u_long *)val = nets[0]->n_ipaddr;
      break;
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
         l->l_onoff = so->so_options & SO_LINGER;
 401f828:	30800015 	stw	r2,0(r6)
 401f82c:	003fd506 	br	401f784 <sogetopt+0xa0>
   if (!val)
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f830:	00800084 	movi	r2,2
 401f834:	28803826 	beq	r5,r2,401f918 <sogetopt+0x234>
 401f838:	00800104 	movi	r2,4
 401f83c:	28bfc826 	beq	r5,r2,401f760 <sogetopt+0x7c>
 401f840:	02001b44 	movi	r8,109
 401f844:	003fb906 	br	401f72c <sogetopt+0x48>
 401f848:	00840444 	movi	r2,4113
 401f84c:	28803826 	beq	r5,r2,401f930 <sogetopt+0x24c>
 401f850:	00840484 	movi	r2,4114
 401f854:	28bfb41e 	bne	r5,r2,401f728 <sogetopt+0x44>
   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
      break;

   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
 401f858:	20801217 	ldw	r2,72(r4)
 401f85c:	0011883a 	mov	r8,zero
 401f860:	30800015 	stw	r2,0(r6)
 401f864:	003fc706 	br	401f784 <sogetopt+0xa0>
   if (!val)
   {
      return ENP_PARAM;
   }

   switch (optname) 
 401f868:	00840104 	movi	r2,4100
 401f86c:	28803426 	beq	r5,r2,401f940 <sogetopt+0x25c>
 401f870:	00840144 	movi	r2,4101
 401f874:	28bfac1e 	bne	r5,r2,401f728 <sogetopt+0x44>
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
      break;
   }
 
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
 401f878:	2080198b 	ldhu	r2,102(r4)
 401f87c:	0011883a 	mov	r8,zero
 401f880:	3080000d 	sth	r2,0(r6)
 401f884:	003fbf06 	br	401f784 <sogetopt+0xa0>
      *(int *)val = so->so_hopcnt;
      break;

   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
 401f888:	2080088b 	ldhu	r2,34(r4)
 401f88c:	1080400c 	andi	r2,r2,256
 401f890:	10002426 	beq	r2,zero,401f924 <sogetopt+0x240>
#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
         *(int *)val = 1;
 401f894:	00800044 	movi	r2,1
 401f898:	0011883a 	mov	r8,zero
 401f89c:	30800015 	stw	r2,0(r6)
 401f8a0:	003fb806 	br	401f784 <sogetopt+0xa0>

   switch (optname) 
   {
   case SO_MYADDR:
      /* Get my IP address. */
      if (so->so_state & SS_ISCONNECTED)
 401f8a4:	2080088b 	ldhu	r2,34(r4)
 401f8a8:	1080008c 	andi	r2,r2,2
 401f8ac:	10000a26 	beq	r2,zero,401f8d8 <sogetopt+0x1f4>
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
 401f8b0:	20800117 	ldw	r2,4(r4)
 401f8b4:	0011883a 	mov	r8,zero
 401f8b8:	10c00a17 	ldw	r3,40(r2)
 401f8bc:	19000a17 	ldw	r4,40(r3)
 401f8c0:	31000015 	stw	r4,0(r6)
 401f8c4:	003faf06 	br	401f784 <sogetopt+0xa0>
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
      break;

   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
 401f8c8:	2080118b 	ldhu	r2,70(r4)
 401f8cc:	0011883a 	mov	r8,zero
 401f8d0:	3080000d 	sth	r2,0(r6)
 401f8d4:	003fab06 	br	401f784 <sogetopt+0xa0>
      if (so->so_state & SS_ISCONNECTED)
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
 401f8d8:	00810134 	movhi	r2,1028
 401f8dc:	108bbb04 	addi	r2,r2,12012
 401f8e0:	10c00017 	ldw	r3,0(r2)
 401f8e4:	0011883a 	mov	r8,zero
 401f8e8:	18800a17 	ldw	r2,40(r3)
 401f8ec:	30800015 	stw	r2,0(r6)
 401f8f0:	003fa406 	br	401f784 <sogetopt+0xa0>
   case SO_TYPE:
      *(int *)val = so->so_type;
      break;

   case SO_ERROR:
      *(int *)val = so->so_error;
 401f8f4:	20800617 	ldw	r2,24(r4)
      so->so_error = 0;
 401f8f8:	0011883a 	mov	r8,zero
   case SO_TYPE:
      *(int *)val = so->so_type;
      break;

   case SO_ERROR:
      *(int *)val = so->so_error;
 401f8fc:	30800015 	stw	r2,0(r6)
      so->so_error = 0;
 401f900:	20000615 	stw	zero,24(r4)
 401f904:	003f9f06 	br	401f784 <sogetopt+0xa0>
   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
      break;

   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
 401f908:	20800b17 	ldw	r2,44(r4)
 401f90c:	0011883a 	mov	r8,zero
 401f910:	30800015 	stw	r2,0(r6)
 401f914:	003f9b06 	br	401f784 <sogetopt+0xa0>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
 401f918:	20800417 	ldw	r2,16(r4)
 401f91c:	1088000c 	andi	r2,r2,8192
 401f920:	103fdc1e 	bne	r2,zero,401f894 <sogetopt+0x1b0>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
 401f924:	0011883a 	mov	r8,zero
 401f928:	30000015 	stw	zero,0(r6)
 401f92c:	003f9506 	br	401f784 <sogetopt+0xa0>
   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
      break;

   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
 401f930:	20800a17 	ldw	r2,40(r4)
 401f934:	0011883a 	mov	r8,zero
 401f938:	30800015 	stw	r2,0(r6)
 401f93c:	003f9106 	br	401f784 <sogetopt+0xa0>
   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
      break;

   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
 401f940:	20800e17 	ldw	r2,56(r4)
 401f944:	0011883a 	mov	r8,zero
 401f948:	30800015 	stw	r2,0(r6)
 401f94c:	003f8d06 	br	401f784 <sogetopt+0xa0>
   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
      break;

   case SO_TYPE:
      *(int *)val = so->so_type;
 401f950:	20800987 	ldb	r2,38(r4)
 401f954:	0011883a 	mov	r8,zero
 401f958:	30800015 	stw	r2,0(r6)
 401f95c:	003f8906 	br	401f784 <sogetopt+0xa0>
   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
      break;

   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
 401f960:	20801317 	ldw	r2,76(r4)
 401f964:	0011883a 	mov	r8,zero
 401f968:	30800015 	stw	r2,0(r6)
 401f96c:	003f8506 	br	401f784 <sogetopt+0xa0>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
 401f970:	02002004 	movi	r8,128
 401f974:	003f8306 	br	401f784 <sogetopt+0xa0>
 401f978:	02000584 	movi	r8,22
 401f97c:	003f8106 	br	401f784 <sogetopt+0xa0>
   void *   val)
{
   int   error =  0;

   /* sanity check the val parameter */
   if (!val)
 401f980:	023ffd84 	movi	r8,-10
 401f984:	003f7f06 	br	401f784 <sogetopt+0xa0>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 401f988:	20c00987 	ldb	r3,38(r4)
 401f98c:	00800044 	movi	r2,1
 401f990:	18bff91e 	bne	r3,r2,401f978 <sogetopt+0x294>
      {
         error = EINVAL;
         break;
      }
      inp = (struct inpcb *)(so->so_pcb);
      tp = intotcpcb(inp);
 401f994:	20800117 	ldw	r2,4(r4)
 401f998:	11000917 	ldw	r4,36(r2)
      if (!tp)
 401f99c:	203ff426 	beq	r4,zero,401f970 <sogetopt+0x28c>
      {
         error = ENP_PARAM;
         break;
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
 401f9a0:	20800b0b 	ldhu	r2,44(r4)
 401f9a4:	1080010c 	andi	r2,r2,4
 401f9a8:	103fde26 	beq	r2,zero,401f924 <sogetopt+0x240>
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
 401f9ac:	0011883a 	mov	r8,zero
 401f9b0:	30c00015 	stw	r3,0(r6)
 401f9b4:	003f7306 	br	401f784 <sogetopt+0xa0>

0401f9b8 <sosetopt>:

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
 401f9b8:	deffff04 	addi	sp,sp,-4
   int   error =  0;

   switch (optname) 
 401f9bc:	00808004 	movi	r2,512

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
 401f9c0:	dfc00015 	stw	ra,0(sp)
 401f9c4:	200f883a 	mov	r7,r4
 401f9c8:	3011883a 	mov	r8,r6
   int   error =  0;

   switch (optname) 
 401f9cc:	28802326 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401f9d0:	1140120e 	bge	r2,r5,401fa1c <sosetopt+0x64>
 401f9d4:	00840504 	movi	r2,4116
 401f9d8:	28805726 	beq	r5,r2,401fb38 <sosetopt+0x180>
 401f9dc:	1140420e 	bge	r2,r5,401fae8 <sosetopt+0x130>
 401f9e0:	008800c4 	movi	r2,8195
 401f9e4:	28804526 	beq	r5,r2,401fafc <sosetopt+0x144>
 401f9e8:	11406b16 	blt	r2,r5,401fb98 <sosetopt+0x1e0>
 401f9ec:	00840544 	movi	r2,4117
 401f9f0:	28800526 	beq	r5,r2,401fa08 <sosetopt+0x50>
 401f9f4:	00840584 	movi	r2,4118
 401f9f8:	28800f1e 	bne	r5,r2,401fa38 <sosetopt+0x80>
      so->so_state &= ~SS_NBIO;
      break;

   case SO_NONBLOCK:    /* set blocking mode according to arg */
      /* sanity check the arg parameter */
      if (!arg)
 401f9fc:	30008e26 	beq	r6,zero,401fc38 <sosetopt+0x280>
      {
         error = ENP_PARAM;
         break;
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 401fa00:	30800017 	ldw	r2,0(r6)
 401fa04:	10004c1e 	bne	r2,zero,401fb38 <sosetopt+0x180>
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
 401fa08:	3880088b 	ldhu	r2,34(r7)
 401fa0c:	0011883a 	mov	r8,zero
 401fa10:	10bfbfcc 	andi	r2,r2,65279
 401fa14:	3880088d 	sth	r2,34(r7)
 401fa18:	00001606 	br	401fa74 <sosetopt+0xbc>
   int   optname,
   void *   arg)
{
   int   error =  0;

   switch (optname) 
 401fa1c:	00800344 	movi	r2,13
 401fa20:	1140210e 	bge	r2,r5,401faa8 <sosetopt+0xf0>
 401fa24:	00800804 	movi	r2,32
 401fa28:	28800c26 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401fa2c:	11400716 	blt	r2,r5,401fa4c <sosetopt+0x94>
 401fa30:	00800404 	movi	r2,16
 401fa34:	28800926 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401fa38:	02001b44 	movi	r8,109
      error = ENOPROTOOPT;
      break;
   }
bad:
   return (error);
}
 401fa3c:	4005883a 	mov	r2,r8
 401fa40:	dfc00017 	ldw	ra,0(sp)
 401fa44:	dec00104 	addi	sp,sp,4
 401fa48:	f800283a 	ret
   int   optname,
   void *   arg)
{
   int   error =  0;

   switch (optname) 
 401fa4c:	00802004 	movi	r2,128
 401fa50:	2880571e 	bne	r5,r2,401fbb0 <sosetopt+0x1f8>
   {
   case SO_LINGER:
      so->so_linger = (short)((struct linger *)arg)->l_linger;
 401fa54:	30800117 	ldw	r2,4(r6)
 401fa58:	2080080d 	sth	r2,32(r4)
   case SO_TCPSACK:
   case SO_NOSLOWSTART:
#ifdef SUPPORT_SO_FULLMSS
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
 401fa5c:	40800017 	ldw	r2,0(r8)
 401fa60:	10000826 	beq	r2,zero,401fa84 <sosetopt+0xcc>
         so->so_options |= optname;
 401fa64:	38800417 	ldw	r2,16(r7)
 401fa68:	0011883a 	mov	r8,zero
 401fa6c:	1144b03a 	or	r2,r2,r5
 401fa70:	38800415 	stw	r2,16(r7)
      error = ENOPROTOOPT;
      break;
   }
bad:
   return (error);
}
 401fa74:	4005883a 	mov	r2,r8
 401fa78:	dfc00017 	ldw	ra,0(sp)
 401fa7c:	dec00104 	addi	sp,sp,4
 401fa80:	f800283a 	ret
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
         so->so_options |= optname;
      else
         so->so_options &= ~optname;
 401fa84:	38800417 	ldw	r2,16(r7)
 401fa88:	0146303a 	nor	r3,zero,r5
 401fa8c:	0011883a 	mov	r8,zero
 401fa90:	10c4703a 	and	r2,r2,r3
 401fa94:	38800415 	stw	r2,16(r7)
      error = ENOPROTOOPT;
      break;
   }
bad:
   return (error);
}
 401fa98:	4005883a 	mov	r2,r8
 401fa9c:	dfc00017 	ldw	ra,0(sp)
 401faa0:	dec00104 	addi	sp,sp,4
 401faa4:	f800283a 	ret
   int   optname,
   void *   arg)
{
   int   error =  0;

   switch (optname) 
 401faa8:	00800244 	movi	r2,9
 401faac:	28802a0e 	bge	r5,r2,401fb58 <sosetopt+0x1a0>
 401fab0:	00800104 	movi	r2,4
 401fab4:	28bfe926 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401fab8:	00800204 	movi	r2,8
 401fabc:	28bfe726 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401fac0:	00800084 	movi	r2,2
 401fac4:	28bfdc1e 	bne	r5,r2,401fa38 <sosetopt+0x80>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 401fac8:	30005b26 	beq	r6,zero,401fc38 <sosetopt+0x280>
      {
         error = ENP_PARAM;
         break;
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
 401facc:	30800017 	ldw	r2,0(r6)
 401fad0:	10005326 	beq	r2,zero,401fc20 <sosetopt+0x268>
         so->so_options |= SO_HDRINCL;
 401fad4:	20800417 	ldw	r2,16(r4)
 401fad8:	0011883a 	mov	r8,zero
 401fadc:	10880014 	ori	r2,r2,8192
 401fae0:	20800415 	stw	r2,16(r4)
 401fae4:	003fe306 	br	401fa74 <sosetopt+0xbc>
   int   optname,
   void *   arg)
{
   int   error =  0;

   switch (optname) 
 401fae8:	00840184 	movi	r2,4102
 401faec:	28803426 	beq	r5,r2,401fbc0 <sosetopt+0x208>
 401faf0:	11401e0e 	bge	r2,r5,401fb6c <sosetopt+0x1b4>
 401faf4:	00840404 	movi	r2,4112
 401faf8:	28bfcf1e 	bne	r5,r2,401fa38 <sosetopt+0x80>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 401fafc:	38c00987 	ldb	r3,38(r7)
 401fb00:	00800044 	movi	r2,1
 401fb04:	1880321e 	bne	r3,r2,401fbd0 <sosetopt+0x218>
      {
         error = EINVAL;
         break;
      }
      inp = (struct inpcb *)(so->so_pcb);
      tp = intotcpcb(inp);
 401fb08:	38800117 	ldw	r2,4(r7)
 401fb0c:	11000917 	ldw	r4,36(r2)
      if(!tp)
 401fb10:	20003726 	beq	r4,zero,401fbf0 <sosetopt+0x238>
      {
         error = ENOTCONN;
         break;
      }
      if (tp->t_state != TCPS_CLOSED)
 401fb14:	20800217 	ldw	r2,8(r4)
 401fb18:	10002d1e 	bne	r2,zero,401fbd0 <sosetopt+0x218>
      {
         error = EINVAL;
         break;
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
 401fb1c:	20800b0b 	ldhu	r2,44(r4)
      if (tp->t_state != TCPS_CLOSED)
      {
         error = EINVAL;
         break;
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
 401fb20:	40c00017 	ldw	r3,0(r8)
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
 401fb24:	0011883a 	mov	r8,zero
 401fb28:	10810014 	ori	r2,r2,1024
 401fb2c:	20800b0d 	sth	r2,44(r4)
      if (tp->t_state != TCPS_CLOSED)
      {
         error = EINVAL;
         break;
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
 401fb30:	20c00a0d 	sth	r3,40(r4)
 401fb34:	003fcf06 	br	401fa74 <sosetopt+0xbc>
         error = ENP_PARAM;
         break;
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
 401fb38:	3880088b 	ldhu	r2,34(r7)
 401fb3c:	0011883a 	mov	r8,zero
 401fb40:	10804014 	ori	r2,r2,256
 401fb44:	3880088d 	sth	r2,34(r7)
      error = ENOPROTOOPT;
      break;
   }
bad:
   return (error);
}
 401fb48:	4005883a 	mov	r2,r8
 401fb4c:	dfc00017 	ldw	ra,0(sp)
 401fb50:	dec00104 	addi	sp,sp,4
 401fb54:	f800283a 	ret
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
 401fb58:	2809883a 	mov	r4,r5
 401fb5c:	380b883a 	mov	r5,r7
      error = ENOPROTOOPT;
      break;
   }
bad:
   return (error);
}
 401fb60:	dfc00017 	ldw	ra,0(sp)
 401fb64:	dec00104 	addi	sp,sp,4
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
 401fb68:	402cc401 	jmpi	402cc40 <ip_setmoptions>
   int   optname,
   void *   arg)
{
   int   error =  0;

   switch (optname) 
 401fb6c:	28fbffc4 	addi	r3,r5,-4097
 401fb70:	00800044 	movi	r2,1
 401fb74:	10ffb036 	bltu	r2,r3,401fa38 <sosetopt+0x80>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
 401fb78:	00840044 	movi	r2,4097
 401fb7c:	28802626 	beq	r5,r2,401fc18 <sosetopt+0x260>
 401fb80:	21000a04 	addi	r4,r4,40
 401fb84:	41400017 	ldw	r5,0(r8)
 401fb88:	4020ae80 	call	4020ae8 <sbreserve>
 401fb8c:	10002c1e 	bne	r2,zero,401fc40 <sosetopt+0x288>
 401fb90:	02001a44 	movi	r8,105
 401fb94:	003fb706 	br	401fa74 <sosetopt+0xbc>
   int   optname,
   void *   arg)
{
   int   error =  0;

   switch (optname) 
 401fb98:	00880104 	movi	r2,8196
 401fb9c:	28800e26 	beq	r5,r2,401fbd8 <sosetopt+0x220>
 401fba0:	00900004 	movi	r2,16384
 401fba4:	28bfad26 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401fba8:	02001b44 	movi	r8,109
 401fbac:	003fa306 	br	401fa3c <sosetopt+0x84>
 401fbb0:	00804004 	movi	r2,256
 401fbb4:	28bfa926 	beq	r5,r2,401fa5c <sosetopt+0xa4>
 401fbb8:	02001b44 	movi	r8,109
 401fbbc:	003f9f06 	br	401fa3c <sosetopt+0x84>
         goto bad;
      }
      break;

   case SO_RCVTIMEO:
      so->so_rcv.sb_timeo = *(short *)arg;
 401fbc0:	3080000b 	ldhu	r2,0(r6)
 401fbc4:	0011883a 	mov	r8,zero
 401fbc8:	2080118d 	sth	r2,70(r4)
 401fbcc:	003fa906 	br	401fa74 <sosetopt+0xbc>
   }
   default:
      error = ENOPROTOOPT;
      break;
   }
bad:
 401fbd0:	02000584 	movi	r8,22
 401fbd4:	003fa706 	br	401fa74 <sosetopt+0xbc>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 401fbd8:	20c00987 	ldb	r3,38(r4)
 401fbdc:	00800044 	movi	r2,1
 401fbe0:	18bffb1e 	bne	r3,r2,401fbd0 <sosetopt+0x218>
      {
         error = EINVAL;
         break;
      }
      inp = (struct inpcb *)(so->so_pcb);
      tp = intotcpcb(inp);
 401fbe4:	20800117 	ldw	r2,4(r4)
 401fbe8:	11000917 	ldw	r4,36(r2)
      if(!tp)
 401fbec:	2000021e 	bne	r4,zero,401fbf8 <sosetopt+0x240>
   }
   default:
      error = ENOPROTOOPT;
      break;
   }
bad:
 401fbf0:	02002004 	movi	r8,128
 401fbf4:	003f9f06 	br	401fa74 <sosetopt+0xbc>
      {
         error = ENOTCONN;
         break;
      }
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 401fbf8:	30000f26 	beq	r6,zero,401fc38 <sosetopt+0x280>
      {
         error = ENP_PARAM;
         break;
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 401fbfc:	30800017 	ldw	r2,0(r6)
 401fc00:	10001126 	beq	r2,zero,401fc48 <sosetopt+0x290>
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
 401fc04:	20800b0b 	ldhu	r2,44(r4)
 401fc08:	0011883a 	mov	r8,zero
 401fc0c:	10800114 	ori	r2,r2,4
 401fc10:	20800b0d 	sth	r2,44(r4)
 401fc14:	003f9706 	br	401fa74 <sosetopt+0xbc>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
 401fc18:	21001204 	addi	r4,r4,72
 401fc1c:	003fd906 	br	401fb84 <sosetopt+0x1cc>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
         so->so_options |= SO_HDRINCL;
      else
         so->so_options &= ~SO_HDRINCL;
 401fc20:	20800417 	ldw	r2,16(r4)
 401fc24:	00f7ffc4 	movi	r3,-8193
 401fc28:	0011883a 	mov	r8,zero
 401fc2c:	10c4703a 	and	r2,r2,r3
 401fc30:	20800415 	stw	r2,16(r4)
 401fc34:	003f8f06 	br	401fa74 <sosetopt+0xbc>
   }
   default:
      error = ENOPROTOOPT;
      break;
   }
bad:
 401fc38:	023ffd84 	movi	r8,-10
 401fc3c:	003f8d06 	br	401fa74 <sosetopt+0xbc>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
 401fc40:	0011883a 	mov	r8,zero
 401fc44:	003f8b06 	br	401fa74 <sosetopt+0xbc>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */
 401fc48:	20800b0b 	ldhu	r2,44(r4)
 401fc4c:	0011883a 	mov	r8,zero
 401fc50:	10bffecc 	andi	r2,r2,65531
 401fc54:	20800b0d 	sth	r2,44(r4)
 401fc58:	003f8606 	br	401fa74 <sosetopt+0xbc>

0401fc5c <sorflush>:
 * on the socket.
 */
void
sorflush(struct socket * so)
{
   struct sockbuf *sb =  &so->so_rcv;
 401fc5c:	21400a04 	addi	r5,r4,40
   int   s;

   sblock(sb);
 401fc60:	28c0070b 	ldhu	r3,28(r5)
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
 401fc64:	defffc04 	addi	sp,sp,-16
 401fc68:	dc400215 	stw	r17,8(sp)
   struct sockbuf *sb =  &so->so_rcv;
   int   s;

   sblock(sb);
 401fc6c:	1880004c 	andi	r2,r3,1
 401fc70:	1005003a 	cmpeq	r2,r2,zero
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
 401fc74:	dfc00315 	stw	ra,12(sp)
 401fc78:	dc000115 	stw	r16,4(sp)
 401fc7c:	2023883a 	mov	r17,r4
   struct sockbuf *sb =  &so->so_rcv;
   int   s;

   sblock(sb);
 401fc80:	10002a1e 	bne	r2,zero,401fd2c <sorflush+0xd0>
 401fc84:	24001104 	addi	r16,r4,68
 401fc88:	8009883a 	mov	r4,r16
 401fc8c:	d9400015 	stw	r5,0(sp)
 401fc90:	401a4c00 	call	401a4c0 <tcp_sleep>
 401fc94:	d9400017 	ldw	r5,0(sp)
 401fc98:	28c0070b 	ldhu	r3,28(r5)
 401fc9c:	1880004c 	andi	r2,r3,1
 401fca0:	103ff91e 	bne	r2,zero,401fc88 <sorflush+0x2c>
 401fca4:	18800054 	ori	r2,r3,1
 401fca8:	2880070d 	sth	r2,28(r5)
   socantrcvmore(so);
 401fcac:	8809883a 	mov	r4,r17
 401fcb0:	d9400015 	stw	r5,0(sp)
 401fcb4:	40212400 	call	4021240 <socantrcvmore>
   sbunlock(sb);
 401fcb8:	d9400017 	ldw	r5,0(sp)
 401fcbc:	8009883a 	mov	r4,r16
 401fcc0:	2880070b 	ldhu	r2,28(r5)
 401fcc4:	10bfff8c 	andi	r2,r2,65534
 401fcc8:	2880070d 	sth	r2,28(r5)
 401fccc:	401a4380 	call	401a438 <tcp_wakeup>
   sbrelease(sb);
 401fcd0:	d9400017 	ldw	r5,0(sp)
 401fcd4:	2809883a 	mov	r4,r5
 401fcd8:	4020d640 	call	4020d64 <sbrelease>
   MEMSET((char *)sb, 0, sizeof (*sb));
 401fcdc:	d9400017 	ldw	r5,0(sp)
   s = so->so_error;
   so->so_error = ESHUTDOWN;
 401fce0:	00801b84 	movi	r2,110
   sorwakeup(so);
 401fce4:	8809883a 	mov	r4,r17

   sblock(sb);
   socantrcvmore(so);
   sbunlock(sb);
   sbrelease(sb);
   MEMSET((char *)sb, 0, sizeof (*sb));
 401fce8:	28000015 	stw	zero,0(r5)
 401fcec:	28000115 	stw	zero,4(r5)
 401fcf0:	28000215 	stw	zero,8(r5)
 401fcf4:	28000315 	stw	zero,12(r5)
 401fcf8:	28000415 	stw	zero,16(r5)
 401fcfc:	28000515 	stw	zero,20(r5)
 401fd00:	28000615 	stw	zero,24(r5)
 401fd04:	28000715 	stw	zero,28(r5)
   s = so->so_error;
 401fd08:	8c000617 	ldw	r16,24(r17)
   so->so_error = ESHUTDOWN;
 401fd0c:	88800615 	stw	r2,24(r17)
   sorwakeup(so);
 401fd10:	40211d80 	call	40211d8 <sbwakeup>
   so->so_error = s;
 401fd14:	8c000615 	stw	r16,24(r17)
}
 401fd18:	dfc00317 	ldw	ra,12(sp)
 401fd1c:	dc400217 	ldw	r17,8(sp)
 401fd20:	dc000117 	ldw	r16,4(sp)
 401fd24:	dec00404 	addi	sp,sp,16
 401fd28:	f800283a 	ret
 401fd2c:	2c000704 	addi	r16,r5,28
 401fd30:	003fdc06 	br	401fca4 <sorflush+0x48>

0401fd34 <soshutdown>:
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
 401fd34:	defffd04 	addi	sp,sp,-12
 401fd38:	dc400115 	stw	r17,4(sp)
   how++;   /* convert 0,1,2 into 1,2,3 */
 401fd3c:	2c400044 	addi	r17,r5,1
   if (how & 1)   /* caller wanted READ or BOTH */
 401fd40:	8880004c 	andi	r2,r17,1
 401fd44:	1005003a 	cmpeq	r2,r2,zero
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
 401fd48:	dc000015 	stw	r16,0(sp)
 401fd4c:	dfc00215 	stw	ra,8(sp)
 401fd50:	2021883a 	mov	r16,r4
   how++;   /* convert 0,1,2 into 1,2,3 */
   if (how & 1)   /* caller wanted READ or BOTH */
 401fd54:	10001626 	beq	r2,zero,401fdb0 <soshutdown+0x7c>
      sorflush(so);

   if (how & 2)   /* caller wanted WRITE or BOTH */
 401fd58:	88c0008c 	andi	r3,r17,2
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
 401fd5c:	81001204 	addi	r4,r16,72
      so->so_req = PRU_SHUTDOWN;
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
   }

   return 0;
}
 401fd60:	0005883a 	mov	r2,zero
{
   how++;   /* convert 0,1,2 into 1,2,3 */
   if (how & 1)   /* caller wanted READ or BOTH */
      sorflush(so);

   if (how & 2)   /* caller wanted WRITE or BOTH */
 401fd64:	1800051e 	bne	r3,zero,401fd7c <soshutdown+0x48>
      so->so_req = PRU_SHUTDOWN;
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
   }

   return 0;
}
 401fd68:	dfc00217 	ldw	ra,8(sp)
 401fd6c:	dc400117 	ldw	r17,4(sp)
 401fd70:	dc000017 	ldw	r16,0(sp)
 401fd74:	dec00304 	addi	sp,sp,12
 401fd78:	f800283a 	ret
   if (how & 1)   /* caller wanted READ or BOTH */
      sorflush(so);

   if (how & 2)   /* caller wanted WRITE or BOTH */
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
 401fd7c:	4020d000 	call	4020d00 <sbflush>
      so->so_req = PRU_SHUTDOWN;
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
 401fd80:	80800217 	ldw	r2,8(r16)
      sorflush(so);

   if (how & 2)   /* caller wanted WRITE or BOTH */
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
      so->so_req = PRU_SHUTDOWN;
 401fd84:	00c001c4 	movi	r3,7
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
 401fd88:	8009883a 	mov	r4,r16
 401fd8c:	12400317 	ldw	r9,12(r2)
 401fd90:	000b883a 	mov	r5,zero
 401fd94:	000d883a 	mov	r6,zero
      sorflush(so);

   if (how & 2)   /* caller wanted WRITE or BOTH */
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
      so->so_req = PRU_SHUTDOWN;
 401fd98:	80c00715 	stw	r3,28(r16)
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
   }

   return 0;
}
 401fd9c:	dfc00217 	ldw	ra,8(sp)
 401fda0:	dc400117 	ldw	r17,4(sp)
 401fda4:	dc000017 	ldw	r16,0(sp)
 401fda8:	dec00304 	addi	sp,sp,12

   if (how & 2)   /* caller wanted WRITE or BOTH */
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
      so->so_req = PRU_SHUTDOWN;
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
 401fdac:	4800683a 	jmp	r9
int
soshutdown(struct socket *so, int how)
{
   how++;   /* convert 0,1,2 into 1,2,3 */
   if (how & 1)   /* caller wanted READ or BOTH */
      sorflush(so);
 401fdb0:	401fc5c0 	call	401fc5c <sorflush>
 401fdb4:	003fe806 	br	401fd58 <soshutdown+0x24>

0401fdb8 <sosend>:
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
 401fdb8:	defff504 	addi	sp,sp,-44
 401fdbc:	dc800315 	stw	r18,12(sp)
   int   len;
   int   error = 0;
   int   dontroute;
   int   first = 1;

   resid = *data_length;
 401fdc0:	3c800017 	ldw	r18,0(r7)
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
 401fdc4:	df000915 	stw	fp,36(sp)
 401fdc8:	ddc00815 	stw	r23,32(sp)
 401fdcc:	dd800715 	stw	r22,28(sp)
 401fdd0:	dd000515 	stw	r20,20(sp)
 401fdd4:	dc000115 	stw	r16,4(sp)
 401fdd8:	dfc00a15 	stw	ra,40(sp)
 401fddc:	dd400615 	stw	r21,24(sp)
 401fde0:	dcc00415 	stw	r19,16(sp)
 401fde4:	dc400215 	stw	r17,8(sp)
 401fde8:	382d883a 	mov	r22,r7
 401fdec:	2021883a 	mov	r16,r4
 401fdf0:	2839883a 	mov	fp,r5
 401fdf4:	302f883a 	mov	r23,r6
 401fdf8:	dd000b17 	ldw	r20,44(sp)
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
 401fdfc:	9000a116 	blt	r18,zero,4020084 <sosend+0x2cc>
      return (EINVAL);

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
 401fe00:	20800217 	ldw	r2,8(r4)
 401fe04:	10c0010b 	ldhu	r3,4(r2)
 401fe08:	18c0004c 	andi	r3,r3,1
 401fe0c:	1805003a 	cmpeq	r2,r3,zero
 401fe10:	1000021e 	bne	r2,zero,401fe1c <sosend+0x64>
 401fe14:	20801317 	ldw	r2,76(r4)
 401fe18:	14804516 	blt	r2,r18,401ff30 <sosend+0x178>
      return (EMSGSIZE);

   dontroute = (flags & MSG_DONTROUTE) &&
 401fe1c:	a080010c 	andi	r2,r20,4
 401fe20:	10003b1e 	bne	r2,zero,401ff10 <sosend+0x158>
 401fe24:	d8000015 	stw	zero,0(sp)
 401fe28:	85401904 	addi	r21,r16,100
               (so->so_proto->pr_flags & PR_ATOMIC);

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
 401fe2c:	80c0190b 	ldhu	r3,100(r16)
 401fe30:	1880004c 	andi	r2,r3,1
 401fe34:	1000331e 	bne	r2,zero,401ff04 <sosend+0x14c>
   do 
   {
      if (so->so_error) 
 401fe38:	84400617 	ldw	r17,24(r16)
               (so->so_proto->pr_flags & PR_ATOMIC);

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
 401fe3c:	18800054 	ori	r2,r3,1
 401fe40:	8080190d 	sth	r2,100(r16)
 401fe44:	100f883a 	mov	r7,r2
   do 
   {
      if (so->so_error) 
 401fe48:	8800901e 	bne	r17,zero,402008c <sosend+0x2d4>
      {
         error = so->so_error;
         so->so_error = 0;          /* ??? */
         goto release;
      }
      if (so->so_state & SS_CANTSENDMORE)
 401fe4c:	8100088b 	ldhu	r4,34(r16)
 401fe50:	2080040c 	andi	r2,r4,16
 401fe54:	10008f1e 	bne	r2,zero,4020094 <sosend+0x2dc>
         snderr(EPIPE);
      if ((so->so_state & SS_ISCONNECTED) == 0) 
 401fe58:	2080008c 	andi	r2,r4,2
 401fe5c:	1000051e 	bne	r2,zero,401fe74 <sosend+0xbc>
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
 401fe60:	80c00217 	ldw	r3,8(r16)
 401fe64:	1880010b 	ldhu	r2,4(r3)
 401fe68:	1080010c 	andi	r2,r2,4
 401fe6c:	10008f1e 	bne	r2,zero,40200ac <sosend+0x2f4>
            snderr(ENOTCONN);
         if (nam == 0)
 401fe70:	e0008c26 	beq	fp,zero,40200a4 <sosend+0x2ec>
            snderr(EDESTADDRREQ);
      }
      if (flags & MSG_OOB)
 401fe74:	a4c0004c 	andi	r19,r20,1
 401fe78:	9804c03a 	cmpne	r2,r19,zero
 401fe7c:	1000411e 	bne	r2,zero,401ff84 <sosend+0x1cc>
         space = 1024;
      else 
      {
         space = (int)sbspace(&so->so_snd);
 401fe80:	80801317 	ldw	r2,76(r16)
 401fe84:	81801217 	ldw	r6,72(r16)
 401fe88:	1185c83a 	sub	r2,r2,r6
 401fe8c:	10002616 	blt	r2,zero,401ff28 <sosend+0x170>
 401fe90:	100b883a 	mov	r5,r2
         if ((sosendallatonce(so) && (space < resid)) ||
 401fe94:	80c00217 	ldw	r3,8(r16)
 401fe98:	1880010b 	ldhu	r2,4(r3)
 401fe9c:	1080004c 	andi	r2,r2,1
 401fea0:	1005003a 	cmpeq	r2,r2,zero
 401fea4:	1000011e 	bne	r2,zero,401feac <sosend+0xf4>
 401fea8:	2c800916 	blt	r5,r18,401fed0 <sosend+0x118>
 401feac:	00815dc4 	movi	r2,1399
 401feb0:	1480060e 	bge	r2,r18,401fecc <sosend+0x114>
 401feb4:	11400516 	blt	r2,r5,401fecc <sosend+0x114>
 401feb8:	1180042e 	bgeu	r2,r6,401fecc <sosend+0x114>
 401febc:	2080400c 	andi	r2,r4,256
 401fec0:	1000021e 	bne	r2,zero,401fecc <sosend+0x114>
 401fec4:	a080080c 	andi	r2,r20,32
 401fec8:	10000526 	beq	r2,zero,401fee0 <sosend+0x128>
            sbunlock(&so->so_snd);
            sbwait(&so->so_snd);
            goto restart;
         }
      }
      if ( space <= 0 ) 
 401fecc:	01402d16 	blt	zero,r5,401ff84 <sosend+0x1cc>
      {
         /* no space in socket send buffer - see if we can wait */
         if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 401fed0:	2080400c 	andi	r2,r4,256
 401fed4:	1000241e 	bne	r2,zero,401ff68 <sosend+0x1b0>
 401fed8:	a080080c 	andi	r2,r20,32
 401fedc:	1000221e 	bne	r2,zero,401ff68 <sosend+0x1b0>
            if (first)     /* report first error */
               error = EWOULDBLOCK;
            goto release;
         }
         /* If blocking socket, let someone else run */
         sbunlock(&so->so_snd);
 401fee0:	38bfff8c 	andi	r2,r7,65534
 401fee4:	8080190d 	sth	r2,100(r16)
 401fee8:	a809883a 	mov	r4,r21
 401feec:	401a4380 	call	401a438 <tcp_wakeup>
         sbwait(&so->so_snd);
 401fef0:	81001204 	addi	r4,r16,72
 401fef4:	40213e00 	call	40213e0 <sbwait>
               (so->so_proto->pr_flags & PR_ATOMIC);

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
 401fef8:	80c0190b 	ldhu	r3,100(r16)
 401fefc:	1880004c 	andi	r2,r3,1
 401ff00:	103fcd26 	beq	r2,zero,401fe38 <sosend+0x80>
 401ff04:	a809883a 	mov	r4,r21
 401ff08:	401a4c00 	call	401a4c0 <tcp_sleep>
 401ff0c:	003fc706 	br	401fe2c <sosend+0x74>
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
      return (EMSGSIZE);

   dontroute = (flags & MSG_DONTROUTE) &&
 401ff10:	80800417 	ldw	r2,16(r16)
 401ff14:	1080040c 	andi	r2,r2,16
 401ff18:	103fc21e 	bne	r2,zero,401fe24 <sosend+0x6c>
 401ff1c:	85401904 	addi	r21,r16,100
 401ff20:	d8c00015 	stw	r3,0(sp)
 401ff24:	003fc106 	br	401fe2c <sosend+0x74>
      }
      if (flags & MSG_OOB)
         space = 1024;
      else 
      {
         space = (int)sbspace(&so->so_snd);
 401ff28:	000b883a 	mov	r5,zero
 401ff2c:	003fd906 	br	401fe94 <sosend+0xdc>
      return (EINVAL);

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
 401ff30:	04401e84 	movi	r17,122
release:
   sbunlock(&so->so_snd);  
   if (head)
      m_freem(head);
   return error;
}
 401ff34:	8805883a 	mov	r2,r17
 401ff38:	dfc00a17 	ldw	ra,40(sp)
 401ff3c:	df000917 	ldw	fp,36(sp)
 401ff40:	ddc00817 	ldw	r23,32(sp)
 401ff44:	dd800717 	ldw	r22,28(sp)
 401ff48:	dd400617 	ldw	r21,24(sp)
 401ff4c:	dd000517 	ldw	r20,20(sp)
 401ff50:	dcc00417 	ldw	r19,16(sp)
 401ff54:	dc800317 	ldw	r18,12(sp)
 401ff58:	dc400217 	ldw	r17,8(sp)
 401ff5c:	dc000117 	ldw	r16,4(sp)
 401ff60:	dec00b04 	addi	sp,sp,44
 401ff64:	f800283a 	ret
   } while ((resid != 0) && (error == 0));

release:
   sbunlock(&so->so_snd);  
   if (head)
      m_freem(head);
 401ff68:	044002c4 	movi	r17,11
      head = (struct mbuf *)NULL;
      first = 0;
   } while ((resid != 0) && (error == 0));

release:
   sbunlock(&so->so_snd);  
 401ff6c:	8080190b 	ldhu	r2,100(r16)
 401ff70:	a809883a 	mov	r4,r21
 401ff74:	10bfff8c 	andi	r2,r2,65534
 401ff78:	8080190d 	sth	r2,100(r16)
 401ff7c:	401a4380 	call	401a438 <tcp_wakeup>
 401ff80:	003fec06 	br	401ff34 <sosend+0x17c>
            sbunlock(&so->so_snd);
            sbwait(&so->so_snd);
            goto restart;
         }
      }
      if ( space <= 0 ) 
 401ff84:	0029883a 	mov	r20,zero
 401ff88:	00000c06 	br	401ffbc <sosend+0x204>
            MEMCPY(m->m_data, data, len);
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
 401ff8c:	401dad40 	call	401dad4 <m_getnbuf>
 401ff90:	1023883a 	mov	r17,r2
            m->m_data = data;
 401ff94:	15c00315 	stw	r23,12(r2)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 401ff98:	b0800017 	ldw	r2,0(r22)
         resid -= len;
         data += len;
 401ff9c:	bcaf883a 	add	r23,r23,r18
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 401ffa0:	1485c83a 	sub	r2,r2,r18
 401ffa4:	b0800015 	stw	r2,0(r22)
         resid -= len;
         data += len;
         m->m_len = len;
 401ffa8:	8c800215 	stw	r18,8(r17)
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
         resid -= len;
         data += len;
 401ffac:	0025883a 	mov	r18,zero
         m->m_len = len;
         if (head == (struct mbuf *)NULL)
 401ffb0:	a0001a26 	beq	r20,zero,402001c <sosend+0x264>
            head = m;
         if (error)
            goto release;
         if (*data_length <= 0)
 401ffb4:	b0800017 	ldw	r2,0(r22)
 401ffb8:	00801b0e 	bge	zero,r2,4020028 <sosend+0x270>
      }

      while (space > 0) 
      {
         len = resid;
         if ( so->so_type == SOCK_STREAM )
 401ffbc:	80c00987 	ldb	r3,38(r16)
 401ffc0:	00800044 	movi	r2,1
            MEMCPY(m->m_data, data, len);
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
 401ffc4:	01000084 	movi	r4,2
 401ffc8:	000b883a 	mov	r5,zero
      }

      while (space > 0) 
      {
         len = resid;
         if ( so->so_type == SOCK_STREAM )
 401ffcc:	18bfef1e 	bne	r3,r2,401ff8c <sosend+0x1d4>
         {
            m = m_getwithdata(MT_TXDATA, len);
 401ffd0:	900b883a 	mov	r5,r18
 401ffd4:	01000084 	movi	r4,2
 401ffd8:	401dad40 	call	401dad4 <m_getnbuf>
 401ffdc:	1023883a 	mov	r17,r2
            if (!m)   
               snderr(ENOBUFS);
            MEMCPY(m->m_data, data, len);
 401ffe0:	b80b883a 	mov	r5,r23
 401ffe4:	900d883a 	mov	r6,r18
      {
         len = resid;
         if ( so->so_type == SOCK_STREAM )
         {
            m = m_getwithdata(MT_TXDATA, len);
            if (!m)   
 401ffe8:	10003226 	beq	r2,zero,40200b4 <sosend+0x2fc>
               snderr(ENOBUFS);
            MEMCPY(m->m_data, data, len);
 401ffec:	11000317 	ldw	r4,12(r2)
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
         resid -= len;
         data += len;
 401fff0:	bcaf883a 	add	r23,r23,r18
         if ( so->so_type == SOCK_STREAM )
         {
            m = m_getwithdata(MT_TXDATA, len);
            if (!m)   
               snderr(ENOBUFS);
            MEMCPY(m->m_data, data, len);
 401fff4:	40096480 	call	4009648 <memcpy>
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 401fff8:	b0800017 	ldw	r2,0(r22)
         {
            m = m_getwithdata(MT_TXDATA, len);
            if (!m)   
               snderr(ENOBUFS);
            MEMCPY(m->m_data, data, len);
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
 401fffc:	80c0190b 	ldhu	r3,100(r16)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 4020000:	1485c83a 	sub	r2,r2,r18
         {
            m = m_getwithdata(MT_TXDATA, len);
            if (!m)   
               snderr(ENOBUFS);
            MEMCPY(m->m_data, data, len);
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
 4020004:	18c02014 	ori	r3,r3,128
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 4020008:	b0800015 	stw	r2,0(r22)
         resid -= len;
         data += len;
         m->m_len = len;
 402000c:	8c800215 	stw	r18,8(r17)
         {
            m = m_getwithdata(MT_TXDATA, len);
            if (!m)   
               snderr(ENOBUFS);
            MEMCPY(m->m_data, data, len);
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
 4020010:	80c0190d 	sth	r3,100(r16)
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
         resid -= len;
         data += len;
 4020014:	0025883a 	mov	r18,zero
         m->m_len = len;
         if (head == (struct mbuf *)NULL)
 4020018:	a03fe61e 	bne	r20,zero,401ffb4 <sosend+0x1fc>
            head = m;
         if (error)
            goto release;
         if (*data_length <= 0)
 402001c:	b0800017 	ldw	r2,0(r22)

         *data_length -= len;
         resid -= len;
         data += len;
         m->m_len = len;
         if (head == (struct mbuf *)NULL)
 4020020:	8829883a 	mov	r20,r17
            head = m;
         if (error)
            goto release;
         if (*data_length <= 0)
 4020024:	00bfe516 	blt	zero,r2,401ffbc <sosend+0x204>
            break;
      }

      if (dontroute)
 4020028:	d8800017 	ldw	r2,0(sp)
 402002c:	1025003a 	cmpeq	r18,r2,zero
 4020030:	9000031e 	bne	r18,zero,4020040 <sosend+0x288>
         so->so_options |= SO_DONTROUTE;
 4020034:	80800417 	ldw	r2,16(r16)
 4020038:	10800414 	ori	r2,r2,16
 402003c:	80800415 	stw	r2,16(r16)

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
 4020040:	9805003a 	cmpeq	r2,r19,zero
 4020044:	1000151e 	bne	r2,zero,402009c <sosend+0x2e4>
 4020048:	00c00384 	movi	r3,14
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
 402004c:	80800217 	ldw	r2,8(r16)
      }

      if (dontroute)
         so->so_options |= SO_DONTROUTE;

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
 4020050:	80c00715 	stw	r3,28(r16)
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
 4020054:	a00b883a 	mov	r5,r20
 4020058:	10c00317 	ldw	r3,12(r2)
 402005c:	e00d883a 	mov	r6,fp
 4020060:	8009883a 	mov	r4,r16
 4020064:	183ee83a 	callr	r3
 4020068:	1023883a 	mov	r17,r2

      if (dontroute)
 402006c:	903fbf1e 	bne	r18,zero,401ff6c <sosend+0x1b4>
         so->so_options &= ~SO_DONTROUTE;
 4020070:	80800417 	ldw	r2,16(r16)
 4020074:	00fffbc4 	movi	r3,-17
 4020078:	10c4703a 	and	r2,r2,r3
 402007c:	80800415 	stw	r2,16(r16)
 4020080:	003fba06 	br	401ff6c <sosend+0x1b4>
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
 4020084:	04400584 	movi	r17,22
 4020088:	003faa06 	br	401ff34 <sosend+0x17c>
   do 
   {
      if (so->so_error) 
      {
         error = so->so_error;
         so->so_error = 0;          /* ??? */
 402008c:	80000615 	stw	zero,24(r16)
 4020090:	003fb606 	br	401ff6c <sosend+0x1b4>
         goto release;
      }
      if (so->so_state & SS_CANTSENDMORE)
 4020094:	04400804 	movi	r17,32
 4020098:	003fb406 	br	401ff6c <sosend+0x1b4>
      }

      if (dontroute)
         so->so_options |= SO_DONTROUTE;

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
 402009c:	00c00244 	movi	r3,9
 40200a0:	003fea06 	br	402004c <sosend+0x294>
         snderr(EPIPE);
      if ((so->so_state & SS_ISCONNECTED) == 0) 
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
            snderr(ENOTCONN);
         if (nam == 0)
 40200a4:	04401e44 	movi	r17,121
 40200a8:	003fb006 	br	401ff6c <sosend+0x1b4>
      }
      if (so->so_state & SS_CANTSENDMORE)
         snderr(EPIPE);
      if ((so->so_state & SS_ISCONNECTED) == 0) 
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
 40200ac:	04402004 	movi	r17,128
 40200b0:	003fae06 	br	401ff6c <sosend+0x1b4>
      head = (struct mbuf *)NULL;
      first = 0;
   } while ((resid != 0) && (error == 0));

release:
   sbunlock(&so->so_snd);  
 40200b4:	8080190b 	ldhu	r2,100(r16)
 40200b8:	a809883a 	mov	r4,r21
 40200bc:	10bfff8c 	andi	r2,r2,65534
 40200c0:	8080190d 	sth	r2,100(r16)
 40200c4:	401a4380 	call	401a438 <tcp_wakeup>
   if (head)
 40200c8:	a0000226 	beq	r20,zero,40200d4 <sosend+0x31c>
      m_freem(head);
 40200cc:	a009883a 	mov	r4,r20
 40200d0:	401d74c0 	call	401d74c <m_freem>
 40200d4:	04401a44 	movi	r17,105
 40200d8:	003f9606 	br	401ff34 <sosend+0x17c>

040200dc <soaccept>:
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
 40200dc:	2080088b 	ldhu	r2,34(r4)
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
 40200e0:	defffd04 	addi	sp,sp,-12
 40200e4:	dc400115 	stw	r17,4(sp)
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
 40200e8:	1080004c 	andi	r2,r2,1
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
 40200ec:	dc000015 	stw	r16,0(sp)
 40200f0:	dfc00215 	stw	ra,8(sp)
 40200f4:	2021883a 	mov	r16,r4
 40200f8:	2823883a 	mov	r17,r5
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
      panic("soaccept");
 40200fc:	010100f4 	movhi	r4,1027
 4020100:	2114e104 	addi	r4,r4,21380
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
 4020104:	1000011e 	bne	r2,zero,402010c <soaccept+0x30>
      panic("soaccept");
 4020108:	4019c440 	call	4019c44 <panic>
   so->so_state &= ~SS_NOFDREF;
   so->so_req = PRU_ACCEPT;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 402010c:	80c00217 	ldw	r3,8(r16)
{
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
      panic("soaccept");
   so->so_state &= ~SS_NOFDREF;
 4020110:	8080088b 	ldhu	r2,34(r16)
   so->so_req = PRU_ACCEPT;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 4020114:	8009883a 	mov	r4,r16
 4020118:	1a400317 	ldw	r9,12(r3)
{
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
      panic("soaccept");
   so->so_state &= ~SS_NOFDREF;
 402011c:	10bfff8c 	andi	r2,r2,65534
   so->so_req = PRU_ACCEPT;
 4020120:	00c00144 	movi	r3,5
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 4020124:	880d883a 	mov	r6,r17
 4020128:	000b883a 	mov	r5,zero
{
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
      panic("soaccept");
   so->so_state &= ~SS_NOFDREF;
 402012c:	8080088d 	sth	r2,34(r16)
   so->so_req = PRU_ACCEPT;
 4020130:	80c00715 	stw	r3,28(r16)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);

   return (error);
}
 4020134:	dfc00217 	ldw	ra,8(sp)
 4020138:	dc400117 	ldw	r17,4(sp)
 402013c:	dc000017 	ldw	r16,0(sp)
 4020140:	dec00304 	addi	sp,sp,12

   if ((so->so_state & SS_NOFDREF) == 0)
      panic("soaccept");
   so->so_state &= ~SS_NOFDREF;
   so->so_req = PRU_ACCEPT;
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 4020144:	4800683a 	jmp	r9

04020148 <soreceive>:
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
 4020148:	defff304 	addi	sp,sp,-52
 402014c:	dd000715 	stw	r20,28(sp)
   struct protosw *  pr =  so->so_proto;
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
 4020150:	2829003a 	cmpeq	r20,r5,zero
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
 4020154:	ddc00a15 	stw	r23,40(sp)
 4020158:	dd800915 	stw	r22,36(sp)
 402015c:	dd400815 	stw	r21,32(sp)
 4020160:	dcc00615 	stw	r19,24(sp)
 4020164:	dc400415 	stw	r17,16(sp)
 4020168:	dc000315 	stw	r16,12(sp)
 402016c:	dfc00c15 	stw	ra,48(sp)
 4020170:	df000b15 	stw	fp,44(sp)
 4020174:	dc800515 	stw	r18,20(sp)
 4020178:	2823883a 	mov	r17,r5
 402017c:	2021883a 	mov	r16,r4
 4020180:	302b883a 	mov	r21,r6
 4020184:	3827883a 	mov	r19,r7
 4020188:	dd800d17 	ldw	r22,52(sp)
   struct mbuf *  m;
   int   len;
   int   error =  0;
   int   offset;
   struct protosw *  pr =  so->so_proto;
 402018c:	25c00217 	ldw	r23,8(r4)
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
 4020190:	a000011e 	bne	r20,zero,4020198 <soreceive+0x50>
      *aname = 0;
 4020194:	28000015 	stw	zero,0(r5)
   if (flags & MSG_OOB) 
 4020198:	b080004c 	andi	r2,r22,1
 402019c:	1005003a 	cmpeq	r2,r2,zero
 40201a0:	1000331e 	bne	r2,zero,4020270 <soreceive+0x128>
   {
      m = m_get (M_WAIT, MT_RXDATA);
 40201a4:	01000044 	movi	r4,1
 40201a8:	000b883a 	mov	r5,zero
 40201ac:	401dad40 	call	401dad4 <m_getnbuf>
 40201b0:	1023883a 	mov	r17,r2
      if (m == NULL)
 40201b4:	10002c26 	beq	r2,zero,4020268 <soreceive+0x120>
         return ENOBUFS;
      lflags = flags & MSG_PEEK;

      so->so_req = PRU_RCVOOB;
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
 40201b8:	b8c00317 	ldw	r3,12(r23)
      m = m_get (M_WAIT, MT_RXDATA);
      if (m == NULL)
         return ENOBUFS;
      lflags = flags & MSG_PEEK;

      so->so_req = PRU_RCVOOB;
 40201bc:	00800344 	movi	r2,13
 40201c0:	80800715 	stw	r2,28(r16)
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
 40201c4:	8009883a 	mov	r4,r16
 40201c8:	b180008c 	andi	r6,r22,2
 40201cc:	880b883a 	mov	r5,r17
 40201d0:	183ee83a 	callr	r3
 40201d4:	1025883a 	mov	r18,r2
      if (error == 0)
 40201d8:	10000f26 	beq	r2,zero,4020218 <soreceive+0xd0>
            m = m_free(m);
         } while (*datalen && (error == 0) && m);
      }

      if (m)
         m_freem(m);
 40201dc:	8809883a 	mov	r4,r17
 40201e0:	401d74c0 	call	401d74c <m_freem>
      }
   }
release:
   sbunlock(&so->so_rcv);
   return (error);
}
 40201e4:	9005883a 	mov	r2,r18
 40201e8:	dfc00c17 	ldw	ra,48(sp)
 40201ec:	df000b17 	ldw	fp,44(sp)
 40201f0:	ddc00a17 	ldw	r23,40(sp)
 40201f4:	dd800917 	ldw	r22,36(sp)
 40201f8:	dd400817 	ldw	r21,32(sp)
 40201fc:	dd000717 	ldw	r20,28(sp)
 4020200:	dcc00617 	ldw	r19,24(sp)
 4020204:	dc800517 	ldw	r18,20(sp)
 4020208:	dc400417 	ldw	r17,16(sp)
 402020c:	dc000317 	ldw	r16,12(sp)
 4020210:	dec00d04 	addi	sp,sp,52
 4020214:	f800283a 	ret
 4020218:	98c00017 	ldw	r3,0(r19)
 402021c:	00000106 	br	4020224 <soreceive+0xdc>

            MEMCPY(data, mtod(m, char*), len);
            data += len;
            *datalen = len;
            m = m_free(m);
         } while (*datalen && (error == 0) && m);
 4020220:	103ff026 	beq	r2,zero,40201e4 <soreceive+0x9c>
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
      if (error == 0)
      {
         do 
         {
            len = *datalen;
 4020224:	88800217 	ldw	r2,8(r17)
            if (len > (int)m->m_len)
               len = m->m_len;

            MEMCPY(data, mtod(m, char*), len);
 4020228:	a809883a 	mov	r4,r21
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
      if (error == 0)
      {
         do 
         {
            len = *datalen;
 402022c:	1821883a 	mov	r16,r3
 4020230:	10c0010e 	bge	r2,r3,4020238 <soreceive+0xf0>
 4020234:	1021883a 	mov	r16,r2
            if (len > (int)m->m_len)
               len = m->m_len;

            MEMCPY(data, mtod(m, char*), len);
 4020238:	89400317 	ldw	r5,12(r17)
 402023c:	800d883a 	mov	r6,r16
            data += len;
 4020240:	ac2b883a 	add	r21,r21,r16
         {
            len = *datalen;
            if (len > (int)m->m_len)
               len = m->m_len;

            MEMCPY(data, mtod(m, char*), len);
 4020244:	40096480 	call	4009648 <memcpy>
            data += len;
            *datalen = len;
            m = m_free(m);
 4020248:	8809883a 	mov	r4,r17
            if (len > (int)m->m_len)
               len = m->m_len;

            MEMCPY(data, mtod(m, char*), len);
            data += len;
            *datalen = len;
 402024c:	9c000015 	stw	r16,0(r19)
            m = m_free(m);
 4020250:	401d6500 	call	401d650 <m_free>
         } while (*datalen && (error == 0) && m);
 4020254:	98c00017 	ldw	r3,0(r19)
               len = m->m_len;

            MEMCPY(data, mtod(m, char*), len);
            data += len;
            *datalen = len;
            m = m_free(m);
 4020258:	1023883a 	mov	r17,r2
         } while (*datalen && (error == 0) && m);
 402025c:	183ff01e 	bne	r3,zero,4020220 <soreceive+0xd8>
      }

      if (m)
 4020260:	103fde1e 	bne	r2,zero,40201dc <soreceive+0x94>
 4020264:	003fdf06 	br	40201e4 <soreceive+0x9c>
   if (aname)
      *aname = 0;
   if (flags & MSG_OOB) 
   {
      m = m_get (M_WAIT, MT_RXDATA);
      if (m == NULL)
 4020268:	04801a44 	movi	r18,105
 402026c:	003fdd06 	br	40201e4 <soreceive+0x9c>
 4020270:	87001104 	addi	fp,r16,68
         m_freem(m);
      return (error);
   }

restart:
   sblock (&so->so_rcv);
 4020274:	80c0110b 	ldhu	r3,68(r16)
 4020278:	1880004c 	andi	r2,r3,1
 402027c:	10001e1e 	bne	r2,zero,40202f8 <soreceive+0x1b0>
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
 4020280:	80800a17 	ldw	r2,40(r16)
         m_freem(m);
      return (error);
   }

restart:
   sblock (&so->so_rcv);
 4020284:	19400054 	ori	r5,r3,1
 4020288:	8140110d 	sth	r5,68(r16)
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
 402028c:	10001d1e 	bne	r2,zero,4020304 <soreceive+0x1bc>
   {
      if (so->so_error) 
 4020290:	84800617 	ldw	r18,24(r16)
 4020294:	9000a61e 	bne	r18,zero,4020530 <soreceive+0x3e8>
      {
         error = so->so_error;
         so->so_error = 0;
         goto release;
      }
      if (so->so_state & SS_CANTRCVMORE)
 4020298:	8100088b 	ldhu	r4,34(r16)
 402029c:	2080080c 	andi	r2,r4,32
 40202a0:	1000791e 	bne	r2,zero,4020488 <soreceive+0x340>
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 40202a4:	2080008c 	andi	r2,r4,2
 40202a8:	1000041e 	bne	r2,zero,40202bc <soreceive+0x174>
 40202ac:	80c00217 	ldw	r3,8(r16)
 40202b0:	1880010b 	ldhu	r2,4(r3)
 40202b4:	1080010c 	andi	r2,r2,4
 40202b8:	1000a61e 	bne	r2,zero,4020554 <soreceive+0x40c>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
      {
         error = ENOTCONN;
         goto release;
      }
      if (*datalen == 0)
 40202bc:	98800017 	ldw	r2,0(r19)
 40202c0:	10007126 	beq	r2,zero,4020488 <soreceive+0x340>
         goto release;
      if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT)) 
 40202c4:	2080400c 	andi	r2,r4,256
 40202c8:	1000751e 	bne	r2,zero,40204a0 <soreceive+0x358>
 40202cc:	b080080c 	andi	r2,r22,32
 40202d0:	1000731e 	bne	r2,zero,40204a0 <soreceive+0x358>
      {
         error = EWOULDBLOCK;
         goto release;
      }
      sbunlock(&so->so_rcv);
 40202d4:	28bfff8c 	andi	r2,r5,65534
 40202d8:	8080110d 	sth	r2,68(r16)
 40202dc:	e009883a 	mov	r4,fp
 40202e0:	401a4380 	call	401a438 <tcp_wakeup>
      sbwait(&so->so_rcv);
 40202e4:	81000a04 	addi	r4,r16,40
 40202e8:	40213e00 	call	40213e0 <sbwait>
         m_freem(m);
      return (error);
   }

restart:
   sblock (&so->so_rcv);
 40202ec:	80c0110b 	ldhu	r3,68(r16)
 40202f0:	1880004c 	andi	r2,r3,1
 40202f4:	103fe226 	beq	r2,zero,4020280 <soreceive+0x138>
 40202f8:	e009883a 	mov	r4,fp
 40202fc:	401a4c00 	call	401a4c0 <tcp_sleep>
 4020300:	003fdc06 	br	4020274 <soreceive+0x12c>
      }
      sbunlock(&so->so_rcv);
      sbwait(&so->so_rcv);
      goto restart;
   }
   m = so->so_rcv.sb_mb;
 4020304:	84801017 	ldw	r18,64(r16)
   if (m == 0)
 4020308:	9000aa26 	beq	r18,zero,40205b4 <soreceive+0x46c>
      panic("sorecv 1");
   nextrecord = m->m_act;
 402030c:	90800717 	ldw	r2,28(r18)
   if (pr->pr_flags & PR_ADDR) 
 4020310:	b8c0010b 	ldhu	r3,4(r23)
      goto restart;
   }
   m = so->so_rcv.sb_mb;
   if (m == 0)
      panic("sorecv 1");
   nextrecord = m->m_act;
 4020314:	d8800015 	stw	r2,0(sp)
   if (pr->pr_flags & PR_ADDR) 
 4020318:	1880008c 	andi	r2,r3,2
 402031c:	10008a26 	beq	r2,zero,4020548 <soreceive+0x400>
   {
      if (m->m_type != MT_SONAME) 
 4020320:	91400817 	ldw	r5,32(r18)
 4020324:	00800244 	movi	r2,9
 4020328:	28800626 	beq	r5,r2,4020344 <soreceive+0x1fc>
      {
         dprintf ("sorecv:type %d not nam", m->m_type);
 402032c:	010100f4 	movhi	r4,1027
 4020330:	2114e704 	addi	r4,r4,21404
 4020334:	4002ed40 	call	4002ed4 <printf>
         panic("sorecv 2");
 4020338:	010100f4 	movhi	r4,1027
 402033c:	2114ed04 	addi	r4,r4,21428
 4020340:	4019c440 	call	4019c44 <panic>
      }
      if (flags & MSG_PEEK) 
 4020344:	b580008c 	andi	r22,r22,2
 4020348:	dd800215 	stw	r22,8(sp)
 402034c:	b0008326 	beq	r22,zero,402055c <soreceive+0x414>
      {
         if (aname)
 4020350:	a000051e 	bne	r20,zero,4020368 <soreceive+0x220>
            *aname = m_copy (m, 0, m->m_len);
 4020354:	91800217 	ldw	r6,8(r18)
 4020358:	9009883a 	mov	r4,r18
 402035c:	000b883a 	mov	r5,zero
 4020360:	401dd400 	call	401dd40 <m_copy>
 4020364:	88800015 	stw	r2,0(r17)
         m = m->m_next;
 4020368:	94800617 	ldw	r18,24(r18)
            m->m_act = nextrecord;
      }
   }
   moff = 0;
   offset = 0;
   while (m && (*datalen > 0) && (error == 0))
 402036c:	90007426 	beq	r18,zero,4020540 <soreceive+0x3f8>
 4020370:	98c00017 	ldw	r3,0(r19)
 4020374:	00c0700e 	bge	zero,r3,4020538 <soreceive+0x3f0>
 4020378:	d9400217 	ldw	r5,8(sp)
 402037c:	d8000115 	stw	zero,4(sp)
 4020380:	0029883a 	mov	r20,zero
 4020384:	282d003a 	cmpeq	r22,r5,zero
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
 4020388:	91000817 	ldw	r4,32(r18)
 402038c:	00800044 	movi	r2,1
 4020390:	20800626 	beq	r4,r2,40203ac <soreceive+0x264>
 4020394:	008000c4 	movi	r2,3
 4020398:	20800426 	beq	r4,r2,40203ac <soreceive+0x264>
         panic("sorecv 3");
 402039c:	010100f4 	movhi	r4,1027
 40203a0:	2114f004 	addi	r4,r4,21440
 40203a4:	4019c440 	call	4019c44 <panic>
 40203a8:	98c00017 	ldw	r3,0(r19)
      len = *datalen;
      so->so_state &= ~SS_RCVATMARK;
 40203ac:	8080088b 	ldhu	r2,34(r16)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
 40203b0:	81001a17 	ldw	r4,104(r16)
   offset = 0;
   while (m && (*datalen > 0) && (error == 0))
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
         panic("sorecv 3");
      len = *datalen;
 40203b4:	180d883a 	mov	r6,r3
      so->so_state &= ~SS_RCVATMARK;
 40203b8:	10bfefcc 	andi	r2,r2,65471
 40203bc:	8080088d 	sth	r2,34(r16)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
 40203c0:	20000426 	beq	r4,zero,40203d4 <soreceive+0x28c>
 40203c4:	d9400117 	ldw	r5,4(sp)
 40203c8:	2145c83a 	sub	r2,r4,r5
 40203cc:	10c0010e 	bge	r2,r3,40203d4 <soreceive+0x28c>
 40203d0:	100d883a 	mov	r6,r2
         len = (int)(so->so_oobmark - offset);
      if (len > (int)(m->m_len - moff))
 40203d4:	90800217 	ldw	r2,8(r18)
 40203d8:	3023883a 	mov	r17,r6
 40203dc:	1505c83a 	sub	r2,r2,r20
 40203e0:	1180010e 	bge	r2,r6,40203e8 <soreceive+0x2a0>
 40203e4:	1023883a 	mov	r17,r2
       * it points to next record) when we drop priority;
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
 40203e8:	91400317 	ldw	r5,12(r18)
 40203ec:	a809883a 	mov	r4,r21
 40203f0:	880d883a 	mov	r6,r17
 40203f4:	a14b883a 	add	r5,r20,r5
 40203f8:	40096480 	call	4009648 <memcpy>
      data += len;
      *datalen -= len;
 40203fc:	98c00017 	ldw	r3,0(r19)
 4020400:	1c47c83a 	sub	r3,r3,r17
 4020404:	98c00015 	stw	r3,0(r19)

      if (len == (int)(m->m_len - moff))
 4020408:	90c00217 	ldw	r3,8(r18)
 402040c:	1d05c83a 	sub	r2,r3,r20
 4020410:	14403626 	beq	r2,r17,40204ec <soreceive+0x3a4>
            if (m)
               m->m_act = nextrecord;
         }
      } else 
      {
         if (flags & MSG_PEEK)
 4020414:	b0002c1e 	bne	r22,zero,40204c8 <soreceive+0x380>
            moff += len;
 4020418:	a469883a 	add	r20,r20,r17
            m->m_data += len;
            m->m_len -= len;
            so->so_rcv.sb_cc -= len;
         }
      }
      if (so->so_oobmark) 
 402041c:	80801a17 	ldw	r2,104(r16)
 4020420:	10002426 	beq	r2,zero,40204b4 <soreceive+0x36c>
      {
         if ((flags & MSG_PEEK) == 0) 
 4020424:	d8c00217 	ldw	r3,8(sp)
 4020428:	18001f1e 	bne	r3,zero,40204a8 <soreceive+0x360>
         {
            so->so_oobmark -= len;
 402042c:	1445c83a 	sub	r2,r2,r17
 4020430:	80801a15 	stw	r2,104(r16)
            if (so->so_oobmark == 0) 
 4020434:	10001f1e 	bne	r2,zero,40204b4 <soreceive+0x36c>
            {
               so->so_state |= SS_RCVATMARK;
 4020438:	8080088b 	ldhu	r2,34(r16)
 402043c:	10801014 	ori	r2,r2,64
 4020440:	8080088d 	sth	r2,34(r16)
      }
   }

   if ((flags & MSG_PEEK) == 0) 
   {
      if (m == 0)
 4020444:	90005726 	beq	r18,zero,40205a4 <soreceive+0x45c>
         so->so_rcv.sb_mb = nextrecord;
      else if (pr->pr_flags & PR_ATOMIC)
 4020448:	b8c0010b 	ldhu	r3,4(r23)
 402044c:	1880004c 	andi	r2,r3,1
 4020450:	1005003a 	cmpeq	r2,r2,zero
 4020454:	10004f26 	beq	r2,zero,4020594 <soreceive+0x44c>
         (void) sbdroprecord(&so->so_rcv);
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
 4020458:	1880020c 	andi	r2,r3,8
 402045c:	10003826 	beq	r2,zero,4020540 <soreceive+0x3f8>
 4020460:	80800117 	ldw	r2,4(r16)
 4020464:	10003626 	beq	r2,zero,4020540 <soreceive+0x3f8>
      {
         so->so_req = PRU_RCVD;
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
 4020468:	b8c00317 	ldw	r3,12(r23)
         so->so_rcv.sb_mb = nextrecord;
      else if (pr->pr_flags & PR_ATOMIC)
         (void) sbdroprecord(&so->so_rcv);
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
      {
         so->so_req = PRU_RCVD;
 402046c:	00800204 	movi	r2,8
 4020470:	80800715 	stw	r2,28(r16)
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
 4020474:	8009883a 	mov	r4,r16
 4020478:	000b883a 	mov	r5,zero
 402047c:	000d883a 	mov	r6,zero
 4020480:	183ee83a 	callr	r3
 4020484:	0025883a 	mov	r18,zero
          (struct mbuf *)0);
      }
   }
release:
   sbunlock(&so->so_rcv);
 4020488:	8080110b 	ldhu	r2,68(r16)
 402048c:	e009883a 	mov	r4,fp
 4020490:	10bfff8c 	andi	r2,r2,65534
 4020494:	8080110d 	sth	r2,68(r16)
 4020498:	401a4380 	call	401a438 <tcp_wakeup>
 402049c:	003f5106 	br	40201e4 <soreceive+0x9c>
         so->so_req = PRU_RCVD;
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
          (struct mbuf *)0);
      }
   }
release:
 40204a0:	048002c4 	movi	r18,11
 40204a4:	003ff806 	br	4020488 <soreceive+0x340>
            {
               so->so_state |= SS_RCVATMARK;
               break;
            }
         } else
            offset += len;
 40204a8:	d9400117 	ldw	r5,4(sp)
 40204ac:	2c4b883a 	add	r5,r5,r17
 40204b0:	d9400115 	stw	r5,4(sp)
            m->m_act = nextrecord;
      }
   }
   moff = 0;
   offset = 0;
   while (m && (*datalen > 0) && (error == 0))
 40204b4:	90002026 	beq	r18,zero,4020538 <soreceive+0x3f0>
 40204b8:	98c00017 	ldw	r3,0(r19)
 40204bc:	00c01e0e 	bge	zero,r3,4020538 <soreceive+0x3f0>
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
      data += len;
 40204c0:	ac6b883a 	add	r21,r21,r17
 40204c4:	003fb006 	br	4020388 <soreceive+0x240>
         if (flags & MSG_PEEK)
            moff += len;
         else 
         {
            m->m_data += len;
            m->m_len -= len;
 40204c8:	1c45c83a 	sub	r2,r3,r17
 40204cc:	90800215 	stw	r2,8(r18)
      {
         if (flags & MSG_PEEK)
            moff += len;
         else 
         {
            m->m_data += len;
 40204d0:	90c00317 	ldw	r3,12(r18)
            m->m_len -= len;
            so->so_rcv.sb_cc -= len;
 40204d4:	80800a17 	ldw	r2,40(r16)
      {
         if (flags & MSG_PEEK)
            moff += len;
         else 
         {
            m->m_data += len;
 40204d8:	1c47883a 	add	r3,r3,r17
            m->m_len -= len;
            so->so_rcv.sb_cc -= len;
 40204dc:	1445c83a 	sub	r2,r2,r17
      {
         if (flags & MSG_PEEK)
            moff += len;
         else 
         {
            m->m_data += len;
 40204e0:	90c00315 	stw	r3,12(r18)
            m->m_len -= len;
            so->so_rcv.sb_cc -= len;
 40204e4:	80800a15 	stw	r2,40(r16)
 40204e8:	003fcc06 	br	402041c <soreceive+0x2d4>
      data += len;
      *datalen -= len;

      if (len == (int)(m->m_len - moff))
      {
         if (flags & MSG_PEEK) 
 40204ec:	b000031e 	bne	r22,zero,40204fc <soreceive+0x3b4>
         {
            m = m->m_next;
 40204f0:	94800617 	ldw	r18,24(r18)
 40204f4:	0029883a 	mov	r20,zero
 40204f8:	003fc806 	br	402041c <soreceive+0x2d4>
            moff = 0;
         } else 
         {
            nextrecord = m->m_act;
            sbfree(&so->so_rcv, m);
 40204fc:	80800a17 	ldw	r2,40(r16)
            {
               MFREE(m, so->so_rcv.sb_mb);
 4020500:	9009883a 	mov	r4,r18
         {
            m = m->m_next;
            moff = 0;
         } else 
         {
            nextrecord = m->m_act;
 4020504:	94800717 	ldw	r18,28(r18)
            sbfree(&so->so_rcv, m);
 4020508:	10c5c83a 	sub	r2,r2,r3
 402050c:	80800a15 	stw	r2,40(r16)
         {
            m = m->m_next;
            moff = 0;
         } else 
         {
            nextrecord = m->m_act;
 4020510:	dc800015 	stw	r18,0(sp)
            sbfree(&so->so_rcv, m);
            {
               MFREE(m, so->so_rcv.sb_mb);
 4020514:	401d6500 	call	401d650 <m_free>
 4020518:	1025883a 	mov	r18,r2
 402051c:	80801015 	stw	r2,64(r16)
               m = so->so_rcv.sb_mb;
            }
            if (m)
 4020520:	103fbe26 	beq	r2,zero,402041c <soreceive+0x2d4>
               m->m_act = nextrecord;
 4020524:	d8800017 	ldw	r2,0(sp)
 4020528:	90800715 	stw	r2,28(r18)
 402052c:	003fbb06 	br	402041c <soreceive+0x2d4>
   if (so->so_rcv.sb_cc == 0) 
   {
      if (so->so_error) 
      {
         error = so->so_error;
         so->so_error = 0;
 4020530:	80000615 	stw	zero,24(r16)
 4020534:	003fd406 	br	4020488 <soreceive+0x340>
         } else
            offset += len;
      }
   }

   if ((flags & MSG_PEEK) == 0) 
 4020538:	d8800217 	ldw	r2,8(sp)
 402053c:	103fc126 	beq	r2,zero,4020444 <soreceive+0x2fc>
         so->so_req = PRU_RCVD;
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
          (struct mbuf *)0);
      }
   }
release:
 4020540:	0025883a 	mov	r18,zero
 4020544:	003fd006 	br	4020488 <soreceive+0x340>
   sbunlock(&so->so_rcv);
 4020548:	b580008c 	andi	r22,r22,2
 402054c:	dd800215 	stw	r22,8(sp)
 4020550:	003f8706 	br	4020370 <soreceive+0x228>
         so->so_error = 0;
         goto release;
      }
      if (so->so_state & SS_CANTRCVMORE)
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 4020554:	04802004 	movi	r18,128
 4020558:	003fcb06 	br	4020488 <soreceive+0x340>
         if (aname)
            *aname = m_copy (m, 0, m->m_len);
         m = m->m_next;
      } else 
      {
         sbfree (&so->so_rcv, m);
 402055c:	80800a17 	ldw	r2,40(r16)
 4020560:	90c00217 	ldw	r3,8(r18)
 4020564:	10c5c83a 	sub	r2,r2,r3
 4020568:	80800a15 	stw	r2,40(r16)
         if (aname) 
 402056c:	a000151e 	bne	r20,zero,40205c4 <soreceive+0x47c>
         {
            *aname = m;
 4020570:	8c800015 	stw	r18,0(r17)
            m = m->m_next;
 4020574:	90800617 	ldw	r2,24(r18)
            (*aname)->m_next = 0;
 4020578:	90000615 	stw	zero,24(r18)
            so->so_rcv.sb_mb = m;
 402057c:	80801015 	stw	r2,64(r16)
 4020580:	1025883a 	mov	r18,r2
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
            m = so->so_rcv.sb_mb;
         }
         if (m)
 4020584:	903faf26 	beq	r18,zero,4020444 <soreceive+0x2fc>
            m->m_act = nextrecord;
 4020588:	d8c00017 	ldw	r3,0(sp)
 402058c:	90c00715 	stw	r3,28(r18)
 4020590:	003f7706 	br	4020370 <soreceive+0x228>
   if ((flags & MSG_PEEK) == 0) 
   {
      if (m == 0)
         so->so_rcv.sb_mb = nextrecord;
      else if (pr->pr_flags & PR_ATOMIC)
         (void) sbdroprecord(&so->so_rcv);
 4020594:	81000a04 	addi	r4,r16,40
 4020598:	4020b080 	call	4020b08 <sbdroprecord>
 402059c:	b8c0010b 	ldhu	r3,4(r23)
 40205a0:	003fad06 	br	4020458 <soreceive+0x310>
   }

   if ((flags & MSG_PEEK) == 0) 
   {
      if (m == 0)
         so->so_rcv.sb_mb = nextrecord;
 40205a4:	d9400017 	ldw	r5,0(sp)
 40205a8:	b8c0010b 	ldhu	r3,4(r23)
 40205ac:	81401015 	stw	r5,64(r16)
 40205b0:	003fa906 	br	4020458 <soreceive+0x310>
      sbwait(&so->so_rcv);
      goto restart;
   }
   m = so->so_rcv.sb_mb;
   if (m == 0)
      panic("sorecv 1");
 40205b4:	010100f4 	movhi	r4,1027
 40205b8:	2114e404 	addi	r4,r4,21392
 40205bc:	4019c440 	call	4019c44 <panic>
 40205c0:	003f5206 	br	402030c <soreceive+0x1c4>
            m = m->m_next;
            (*aname)->m_next = 0;
            so->so_rcv.sb_mb = m;
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
 40205c4:	9009883a 	mov	r4,r18
 40205c8:	401d6500 	call	401d650 <m_free>
 40205cc:	1025883a 	mov	r18,r2
 40205d0:	80801015 	stw	r2,64(r16)
 40205d4:	003feb06 	br	4020584 <soreceive+0x43c>

040205d8 <sofree>:
{
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
 40205d8:	20800117 	ldw	r2,4(r4)
 * RETURNS: 
 */

void
sofree(struct socket * so)
{
 40205dc:	defffe04 	addi	sp,sp,-8
 40205e0:	dc000015 	stw	r16,0(sp)
 40205e4:	dfc00115 	stw	ra,4(sp)
 40205e8:	2021883a 	mov	r16,r4
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
 40205ec:	10000426 	beq	r2,zero,4020600 <sofree+0x28>
   
   if (so_evtmap)  
      (*so_evtmap_delete) (so);
   
   SOC_FREE(so);
}
 40205f0:	dfc00117 	ldw	ra,4(sp)
 40205f4:	dc000017 	ldw	r16,0(sp)
 40205f8:	dec00204 	addi	sp,sp,8
 40205fc:	f800283a 	ret
{
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
 4020600:	2080088b 	ldhu	r2,34(r4)
 4020604:	1080004c 	andi	r2,r2,1
 4020608:	1005003a 	cmpeq	r2,r2,zero
 402060c:	103ff81e 	bne	r2,zero,40205f0 <sofree+0x18>
      return;
   if (so->so_head) 
 4020610:	20801b17 	ldw	r2,108(r4)
 4020614:	10000426 	beq	r2,zero,4020628 <sofree+0x50>
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
 4020618:	000b883a 	mov	r5,zero
 402061c:	4020a540 	call	4020a54 <soqremque>
 4020620:	10001e26 	beq	r2,zero,402069c <sofree+0xc4>
         panic("sofree");
      so->so_head = 0;
 4020624:	80001b15 	stw	zero,108(r16)
   }
   sbrelease(&so->so_snd);
 4020628:	81001204 	addi	r4,r16,72
 402062c:	4020d640 	call	4020d64 <sbrelease>
   sorflush(so);
 4020630:	8009883a 	mov	r4,r16
 4020634:	401fc5c0 	call	401fc5c <sorflush>
      _socket_free_entry (so);
#endif   /* SAVE_SOCK_ENDPOINTS */

#ifdef IP_MULTICAST
   /* multicast opts? */
   if (so->inp_moptions)
 4020638:	81000317 	ldw	r4,12(r16)
 402063c:	20000126 	beq	r4,zero,4020644 <sofree+0x6c>
	   ip_freemoptions(so->inp_moptions);
 4020640:	402cbc80 	call	402cbc8 <ip_freemoptions>
#endif   /* IP_MULTICAST */

   /* IP_TOS opts? */
   if (so->so_optsPack)
 4020644:	81001f17 	ldw	r4,124(r16)
 4020648:	20000126 	beq	r4,zero,4020650 <sofree+0x78>
      SOCOPT_FREE(so->so_optsPack);
 402064c:	401cce40 	call	401cce4 <npfree>
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 4020650:	01010134 	movhi	r4,1028
 4020654:	210cf804 	addi	r4,r4,13280
 4020658:	800b883a 	mov	r5,r16
 402065c:	401c1d00 	call	401c1d0 <qdel>
   
   if (so_evtmap)  
 4020660:	00c10134 	movhi	r3,1028
 4020664:	18e95704 	addi	r3,r3,-23204
 4020668:	18800003 	ldbu	r2,0(r3)
 402066c:	1000051e 	bne	r2,zero,4020684 <sofree+0xac>
      (*so_evtmap_delete) (so);
   
   SOC_FREE(so);
 4020670:	8009883a 	mov	r4,r16
}
 4020674:	dfc00117 	ldw	ra,4(sp)
 4020678:	dc000017 	ldw	r16,0(sp)
 402067c:	dec00204 	addi	sp,sp,8
   qdel(&soq, so);   /* Delete the socket entry from the queue */
   
   if (so_evtmap)  
      (*so_evtmap_delete) (so);
   
   SOC_FREE(so);
 4020680:	401cce41 	jmpi	401cce4 <npfree>
      SOCOPT_FREE(so->so_optsPack);
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
   
   if (so_evtmap)  
      (*so_evtmap_delete) (so);
 4020684:	00810134 	movhi	r2,1028
 4020688:	10a95604 	addi	r2,r2,-23208
 402068c:	10c00017 	ldw	r3,0(r2)
 4020690:	8009883a 	mov	r4,r16
 4020694:	183ee83a 	callr	r3
 4020698:	003ff506 	br	4020670 <sofree+0x98>

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
      return;
   if (so->so_head) 
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
 402069c:	8009883a 	mov	r4,r16
 40206a0:	01400044 	movi	r5,1
 40206a4:	4020a540 	call	4020a54 <soqremque>
 40206a8:	103fde1e 	bne	r2,zero,4020624 <sofree+0x4c>
         panic("sofree");
 40206ac:	010100f4 	movhi	r4,1027
 40206b0:	2114f304 	addi	r4,r4,21452
 40206b4:	4019c440 	call	4019c44 <panic>
      so->so_head = 0;
 40206b8:	80001b15 	stw	zero,108(r16)
 40206bc:	003fda06 	br	4020628 <sofree+0x50>

040206c0 <soclose>:
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 40206c0:	00810134 	movhi	r2,1028
 40206c4:	108cf804 	addi	r2,r2,13280
 40206c8:	10800017 	ldw	r2,0(r2)
 * RETURNS: 
 */

int
soclose(struct socket * so)
{
 40206cc:	defffb04 	addi	sp,sp,-20
 40206d0:	dc000015 	stw	r16,0(sp)
 40206d4:	dfc00415 	stw	ra,16(sp)
 40206d8:	dcc00315 	stw	r19,12(sp)
 40206dc:	dc800215 	stw	r18,8(sp)
 40206e0:	dc400115 	stw	r17,4(sp)
 40206e4:	2021883a 	mov	r16,r4
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 40206e8:	10000326 	beq	r2,zero,40206f8 <soclose+0x38>
   {
      if (so == tmpso)
 40206ec:	80800b26 	beq	r16,r2,402071c <soclose+0x5c>
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 40206f0:	10800017 	ldw	r2,0(r2)
 40206f4:	103ffd1e 	bne	r2,zero,40206ec <soclose+0x2c>
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
   }
   so->so_state |= SS_NOFDREF;
   sofree(so);
   return (error);
 40206f8:	04400584 	movi	r17,22
}
 40206fc:	8805883a 	mov	r2,r17
 4020700:	dfc00417 	ldw	ra,16(sp)
 4020704:	dcc00317 	ldw	r19,12(sp)
 4020708:	dc800217 	ldw	r18,8(sp)
 402070c:	dc400117 	ldw	r17,4(sp)
 4020710:	dc000017 	ldw	r16,0(sp)
 4020714:	dec00504 	addi	sp,sp,20
 4020718:	f800283a 	ret
   if ( tmpso == NULL)
      return EINVAL;
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
 402071c:	80800417 	ldw	r2,16(r16)
 4020720:	1080008c 	andi	r2,r2,2
 4020724:	10001d1e 	bne	r2,zero,402079c <soclose+0xdc>
         (void) soabort(so->so_q0);
      while (so->so_q != so)
         (void) soabort(so->so_q);
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
 4020728:	84800987 	ldb	r18,38(r16)
 402072c:	00c00044 	movi	r3,1
 4020730:	90c02426 	beq	r18,r3,40207c4 <soclose+0x104>
   { 
      so->so_req = PRU_DETACH;
      error = (*so->so_proto->pr_usrreq)(so,
 4020734:	80800217 	ldw	r2,8(r16)
         (void) soabort(so->so_q);
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
   { 
      so->so_req = PRU_DETACH;
 4020738:	80c00715 	stw	r3,28(r16)
      error = (*so->so_proto->pr_usrreq)(so,
 402073c:	8009883a 	mov	r4,r16
 4020740:	10c00317 	ldw	r3,12(r2)
 4020744:	000b883a 	mov	r5,zero
 4020748:	000d883a 	mov	r6,zero
 402074c:	183ee83a 	callr	r3
 4020750:	1023883a 	mov	r17,r2
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
         error = error2;
   }
discard:
   if (so->so_state & SS_NOFDREF)
 4020754:	8080088b 	ldhu	r2,34(r16)
 4020758:	1080004c 	andi	r2,r2,1
 402075c:	1005003a 	cmpeq	r2,r2,zero
 4020760:	10004926 	beq	r2,zero,4020888 <soclose+0x1c8>
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
   }
   so->so_state |= SS_NOFDREF;
 4020764:	8080088b 	ldhu	r2,34(r16)
   sofree(so);
 4020768:	8009883a 	mov	r4,r16
   if (so->so_state & SS_NOFDREF)
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
   }
   so->so_state |= SS_NOFDREF;
 402076c:	10800054 	ori	r2,r2,1
 4020770:	8080088d 	sth	r2,34(r16)
   sofree(so);
 4020774:	40205d80 	call	40205d8 <sofree>
   return (error);
}
 4020778:	8805883a 	mov	r2,r17
 402077c:	dfc00417 	ldw	ra,16(sp)
 4020780:	dcc00317 	ldw	r19,12(sp)
 4020784:	dc800217 	ldw	r18,8(sp)
 4020788:	dc400117 	ldw	r17,4(sp)
 402078c:	dc000017 	ldw	r16,0(sp)
 4020790:	dec00504 	addi	sp,sp,20
 4020794:	f800283a 	ret
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
         (void) soabort(so->so_q0);
 4020798:	401f5e00 	call	401f5e0 <soabort>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
 402079c:	81001c17 	ldw	r4,112(r16)
 40207a0:	813ffd1e 	bne	r16,r4,4020798 <soclose+0xd8>
         (void) soabort(so->so_q0);
      while (so->so_q != so)
 40207a4:	81001d17 	ldw	r4,116(r16)
 40207a8:	813fdf26 	beq	r16,r4,4020728 <soclose+0x68>
         (void) soabort(so->so_q);
 40207ac:	401f5e00 	call	401f5e0 <soabort>
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
         (void) soabort(so->so_q0);
      while (so->so_q != so)
 40207b0:	81001d17 	ldw	r4,116(r16)
 40207b4:	813ffd1e 	bne	r16,r4,40207ac <soclose+0xec>
         (void) soabort(so->so_q);
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
 40207b8:	84800987 	ldb	r18,38(r16)
 40207bc:	00c00044 	movi	r3,1
 40207c0:	90ffdc1e 	bne	r18,r3,4020734 <soclose+0x74>
      error = (*so->so_proto->pr_usrreq)(so,
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
   }

   if (so->so_pcb == 0)
 40207c4:	80800117 	ldw	r2,4(r16)
 40207c8:	10004126 	beq	r2,zero,40208d0 <soclose+0x210>
      goto discard;
   if (so->so_state & SS_ISCONNECTED) 
 40207cc:	80c0088b 	ldhu	r3,34(r16)
 40207d0:	1880008c 	andi	r2,r3,2
 40207d4:	10003526 	beq	r2,zero,40208ac <soclose+0x1ec>
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
 40207d8:	1880020c 	andi	r2,r3,8
 40207dc:	10003e26 	beq	r2,zero,40208d8 <soclose+0x218>
      {
         error = sodisconnect(so);
         if (error)
            goto drop;
      }
      if (so->so_options & SO_LINGER) 
 40207e0:	80800417 	ldw	r2,16(r16)
 40207e4:	1080200c 	andi	r2,r2,128
 40207e8:	10002926 	beq	r2,zero,4020890 <soclose+0x1d0>
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
 40207ec:	8100088b 	ldhu	r4,34(r16)
 40207f0:	00804204 	movi	r2,264
 40207f4:	20c0420c 	andi	r3,r4,264
 40207f8:	18801526 	beq	r3,r2,4020850 <soclose+0x190>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 40207fc:	2080008c 	andi	r2,r4,2
         if ((so->so_state & SS_ISDISCONNECTING) &&
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
 4020800:	04c10134 	movhi	r19,1028
 4020804:	9ce93304 	addi	r19,r19,-23348
 4020808:	8140080b 	ldhu	r5,32(r16)
 402080c:	99000017 	ldw	r4,0(r19)
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 4020810:	10000f26 	beq	r2,zero,4020850 <soclose+0x190>
         if ((so->so_state & SS_ISDISCONNECTING) &&
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
 4020814:	28bfffcc 	andi	r2,r5,65535
 4020818:	10a0001c 	xori	r2,r2,32768
 402081c:	10a00004 	addi	r2,r2,-32768
 4020820:	10801924 	muli	r2,r2,100
 4020824:	1125883a 	add	r18,r2,r4
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 4020828:	2480092e 	bgeu	r4,r18,4020850 <soclose+0x190>
 402082c:	84400904 	addi	r17,r16,36
 4020830:	00000206 	br	402083c <soclose+0x17c>
 4020834:	98800017 	ldw	r2,0(r19)
 4020838:	1480052e 	bgeu	r2,r18,4020850 <soclose+0x190>
         {
            tcp_sleep((char *)&so->so_timeo);
 402083c:	8809883a 	mov	r4,r17
 4020840:	401a4c00 	call	401a4c0 <tcp_sleep>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 4020844:	8080088b 	ldhu	r2,34(r16)
 4020848:	1080008c 	andi	r2,r2,2
 402084c:	103ff91e 	bne	r2,zero,4020834 <soclose+0x174>
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
            return 0;
         }
      }
   }
drop:
 4020850:	0023883a 	mov	r17,zero
   if (so->so_pcb) 
 4020854:	80800117 	ldw	r2,4(r16)
 4020858:	103fbe26 	beq	r2,zero,4020754 <soclose+0x94>
   {
      int   error2;
      so->so_req = PRU_DETACH;
      error2 = (*so->so_proto->pr_usrreq)(so,
 402085c:	80800217 	ldw	r2,8(r16)
   }
drop:
   if (so->so_pcb) 
   {
      int   error2;
      so->so_req = PRU_DETACH;
 4020860:	00c00044 	movi	r3,1
 4020864:	80c00715 	stw	r3,28(r16)
      error2 = (*so->so_proto->pr_usrreq)(so,
 4020868:	11c00317 	ldw	r7,12(r2)
 402086c:	8009883a 	mov	r4,r16
 4020870:	000b883a 	mov	r5,zero
 4020874:	000d883a 	mov	r6,zero
 4020878:	383ee83a 	callr	r7
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
 402087c:	883fb51e 	bne	r17,zero,4020754 <soclose+0x94>
 4020880:	1023883a 	mov	r17,r2
 4020884:	003fb306 	br	4020754 <soclose+0x94>
   }
discard:
   if (so->so_state & SS_NOFDREF)
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
 4020888:	401c81c0 	call	401c81c <dtrap>
 402088c:	003fb506 	br	4020764 <soclose+0xa4>
      {
         /* If socket still has send data just return now, leaving the 
          * socket intact so the data can be sent. Socket should be cleaned
          * up later by timers.
          */
         if(so->so_snd.sb_cc)
 4020890:	80801217 	ldw	r2,72(r16)
 4020894:	103fee26 	beq	r2,zero,4020850 <soclose+0x190>
         {
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
 4020898:	8080088b 	ldhu	r2,34(r16)
 402089c:	0023883a 	mov	r17,zero
 40208a0:	9084b03a 	or	r2,r18,r2
 40208a4:	8080088d 	sth	r2,34(r16)
 40208a8:	003f9406 	br	40206fc <soclose+0x3c>
drop:
   if (so->so_pcb) 
   {
      int   error2;
      so->so_req = PRU_DETACH;
      error2 = (*so->so_proto->pr_usrreq)(so,
 40208ac:	80800217 	ldw	r2,8(r16)
   }
drop:
   if (so->so_pcb) 
   {
      int   error2;
      so->so_req = PRU_DETACH;
 40208b0:	84800715 	stw	r18,28(r16)
      error2 = (*so->so_proto->pr_usrreq)(so,
 40208b4:	8009883a 	mov	r4,r16
 40208b8:	10c00317 	ldw	r3,12(r2)
 40208bc:	000b883a 	mov	r5,zero
 40208c0:	000d883a 	mov	r6,zero
 40208c4:	183ee83a 	callr	r3
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
 40208c8:	1023883a 	mov	r17,r2
 40208cc:	003fa106 	br	4020754 <soclose+0x94>
      error = (*so->so_proto->pr_usrreq)(so,
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
   }

   if (so->so_pcb == 0)
 40208d0:	0023883a 	mov	r17,zero
 40208d4:	003f9f06 	br	4020754 <soclose+0x94>
      goto discard;
   if (so->so_state & SS_ISCONNECTED) 
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
      {
         error = sodisconnect(so);
 40208d8:	8009883a 	mov	r4,r16
 40208dc:	401f5fc0 	call	401f5fc <sodisconnect>
 40208e0:	1023883a 	mov	r17,r2
         if (error)
 40208e4:	103fdb1e 	bne	r2,zero,4020854 <soclose+0x194>
 40208e8:	003fbd06 	br	40207e0 <soclose+0x120>

040208ec <socreate>:
 * RETURNS: 
 */

struct socket *   
socreate (int dom, int type, int proto)
{
 40208ec:	defffa04 	addi	sp,sp,-24
 40208f0:	dd000415 	stw	r20,16(sp)
 40208f4:	dc800215 	stw	r18,8(sp)
 40208f8:	dc000015 	stw	r16,0(sp)
 40208fc:	dfc00515 	stw	ra,20(sp)
 4020900:	dcc00315 	stw	r19,12(sp)
 4020904:	dc400115 	stw	r17,4(sp)
 4020908:	3025883a 	mov	r18,r6
 402090c:	2029883a 	mov	r20,r4
 4020910:	2821883a 	mov	r16,r5
   struct protosw *prp;
   struct socket *so;
   int   error;
   int rc;

   if (proto)
 4020914:	30000f26 	beq	r6,zero,4020954 <socreate+0x68>
      prp = pffindproto(dom, proto, type);
 4020918:	300b883a 	mov	r5,r6
 402091c:	800d883a 	mov	r6,r16
 4020920:	401d5e80 	call	401d5e8 <pffindproto>
 4020924:	1023883a 	mov	r17,r2
   else
      prp = pffindtype(dom, type);
   if (prp == 0)
 4020928:	88000d1e 	bne	r17,zero,4020960 <socreate+0x74>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
 402092c:	0021883a 	mov	r16,zero
   }

   return so;
}
 4020930:	8005883a 	mov	r2,r16
 4020934:	dfc00517 	ldw	ra,20(sp)
 4020938:	dd000417 	ldw	r20,16(sp)
 402093c:	dcc00317 	ldw	r19,12(sp)
 4020940:	dc800217 	ldw	r18,8(sp)
 4020944:	dc400117 	ldw	r17,4(sp)
 4020948:	dc000017 	ldw	r16,0(sp)
 402094c:	dec00604 	addi	sp,sp,24
 4020950:	f800283a 	ret
   int rc;

   if (proto)
      prp = pffindproto(dom, proto, type);
   else
      prp = pffindtype(dom, type);
 4020954:	401d57c0 	call	401d57c <pffindtype>
 4020958:	1023883a 	mov	r17,r2
   if (prp == 0)
 402095c:	883ff326 	beq	r17,zero,402092c <socreate+0x40>
      return NULL;
   if (prp->pr_type != type)
 4020960:	8cc0000f 	ldh	r19,0(r17)
 4020964:	9c3ff11e 	bne	r19,r16,402092c <socreate+0x40>
      return NULL;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 4020968:	01002104 	movi	r4,132
 402096c:	401cdc80 	call	401cdc8 <npalloc>
 4020970:	103fee26 	beq	r2,zero,402092c <socreate+0x40>
 4020974:	1021883a 	mov	r16,r2
      return NULL;
   so->next = NULL;
   putq(&soq,(qp)so);
 4020978:	100b883a 	mov	r5,r2
      return NULL;
   if (prp->pr_type != type)
      return NULL;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
      return NULL;
   so->next = NULL;
 402097c:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);
 4020980:	01010134 	movhi	r4,1028
 4020984:	210cf804 	addi	r4,r4,13280
 4020988:	401c2940 	call	401c294 <putq>

   so->so_options = socket_defaults;
 402098c:	d0a03d0b 	ldhu	r2,-32524(gp)
   so->so_domain = dom;
   so->so_state = 0;
   so->so_type = (char)type;
 4020990:	84c00985 	stb	r19,38(r16)
#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
 4020994:	88c00317 	ldw	r3,12(r17)
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
      return NULL;
   so->next = NULL;
   putq(&soq,(qp)so);

   so->so_options = socket_defaults;
 4020998:	80800415 	stw	r2,16(r16)
   so->so_domain = dom;
 402099c:	85000515 	stw	r20,20(r16)
   so->so_state = 0;
 40209a0:	8000088d 	sth	zero,34(r16)
   so->so_type = (char)type;
   so->so_proto = prp;
 40209a4:	84400215 	stw	r17,8(r16)

#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
 40209a8:	80000315 	stw	zero,12(r16)
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
 40209ac:	80000715 	stw	zero,28(r16)
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
 40209b0:	900d883a 	mov	r6,r18
 40209b4:	8009883a 	mov	r4,r16
 40209b8:	000b883a 	mov	r5,zero
 40209bc:	183ee83a 	callr	r3
   if (error) goto bad;
 40209c0:	10000a1e 	bne	r2,zero,40209ec <socreate+0x100>

   if (so_evtmap)
 40209c4:	00810134 	movhi	r2,1028
 40209c8:	10a95704 	addi	r2,r2,-23204
 40209cc:	10c00003 	ldbu	r3,0(r2)
 40209d0:	183fd726 	beq	r3,zero,4020930 <socreate+0x44>
   {                       
      rc = (*so_evtmap_create) (so);
 40209d4:	00810134 	movhi	r2,1028
 40209d8:	10a95504 	addi	r2,r2,-23212
 40209dc:	10c00017 	ldw	r3,0(r2)
 40209e0:	8009883a 	mov	r4,r16
 40209e4:	183ee83a 	callr	r3
      if (rc != 0)
 40209e8:	10000726 	beq	r2,zero,4020a08 <socreate+0x11c>
      {
bad:   
         so->so_state |= SS_NOFDREF;
 40209ec:	8080088b 	ldhu	r2,34(r16)
         sofree (so);
 40209f0:	8009883a 	mov	r4,r16
   {                       
      rc = (*so_evtmap_create) (so);
      if (rc != 0)
      {
bad:   
         so->so_state |= SS_NOFDREF;
 40209f4:	10800054 	ori	r2,r2,1
 40209f8:	8080088d 	sth	r2,34(r16)
         sofree (so);
 40209fc:	40205d80 	call	40205d8 <sofree>
 4020a00:	0021883a 	mov	r16,zero
 4020a04:	003fca06 	br	4020930 <socreate+0x44>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
 4020a08:	401a3e40 	call	401a3e4 <TK_OSTaskQuery>
 4020a0c:	80802005 	stb	r2,128(r16)
 4020a10:	003fc706 	br	4020930 <socreate+0x44>

04020a14 <soqinsque>:
void
soqinsque(struct socket * head, 
   struct socket *   so,
   int   q)
{
   so->so_head = head;
 4020a14:	29001b15 	stw	r4,108(r5)
   if (q == 0) 
 4020a18:	3000071e 	bne	r6,zero,4020a38 <soqinsque+0x24>
   {
      head->so_q0len++;
 4020a1c:	20801e03 	ldbu	r2,120(r4)
      so->so_q0 = head->so_q0;
 4020a20:	20c01c17 	ldw	r3,112(r4)
   int   q)
{
   so->so_head = head;
   if (q == 0) 
   {
      head->so_q0len++;
 4020a24:	10800044 	addi	r2,r2,1
      so->so_q0 = head->so_q0;
 4020a28:	28c01c15 	stw	r3,112(r5)
      head->so_q0 = so;
 4020a2c:	21401c15 	stw	r5,112(r4)
   int   q)
{
   so->so_head = head;
   if (q == 0) 
   {
      head->so_q0len++;
 4020a30:	20801e05 	stb	r2,120(r4)
 4020a34:	f800283a 	ret
      so->so_q0 = head->so_q0;
      head->so_q0 = so;
   } else 
   {
      head->so_qlen++;
 4020a38:	20801e43 	ldbu	r2,121(r4)
      so->so_q = head->so_q;
 4020a3c:	20c01d17 	ldw	r3,116(r4)
      head->so_q0len++;
      so->so_q0 = head->so_q0;
      head->so_q0 = so;
   } else 
   {
      head->so_qlen++;
 4020a40:	10800044 	addi	r2,r2,1
      so->so_q = head->so_q;
 4020a44:	28c01d15 	stw	r3,116(r5)
      head->so_q = so;
 4020a48:	21401d15 	stw	r5,116(r4)
      head->so_q0len++;
      so->so_q0 = head->so_q0;
      head->so_q0 = so;
   } else 
   {
      head->so_qlen++;
 4020a4c:	20801e45 	stb	r2,121(r4)
 4020a50:	f800283a 	ret

04020a54 <soqremque>:
int
soqremque(struct socket * so, int q)
{
   struct socket *   head, *  prev, *  next;

   head = so->so_head;
 4020a54:	21c01b17 	ldw	r7,108(r4)
 4020a58:	2807003a 	cmpeq	r3,r5,zero
 4020a5c:	380d883a 	mov	r6,r7
   prev = head;
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
 4020a60:	1800061e 	bne	r3,zero,4020a7c <soqremque+0x28>
 4020a64:	30801d17 	ldw	r2,116(r6)
      if (next == so)
 4020a68:	11000626 	beq	r2,r4,4020a84 <soqremque+0x30>
         break;
 4020a6c:	100d883a 	mov	r6,r2
      if (next == head)
 4020a70:	11fffb1e 	bne	r2,r7,4020a60 <soqremque+0xc>
 4020a74:	0005883a 	mov	r2,zero
 4020a78:	f800283a 	ret

   head = so->so_head;
   prev = head;
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
 4020a7c:	30801c17 	ldw	r2,112(r6)
      if (next == so)
 4020a80:	113ffa1e 	bne	r2,r4,4020a6c <soqremque+0x18>
         break;
      if (next == head)
         return (0);
      prev = next;
   }
   if (q == 0) 
 4020a84:	28000a1e 	bne	r5,zero,4020ab0 <soqremque+0x5c>
   {
      prev->so_q0 = next->so_q0;
      head->so_q0len--;
 4020a88:	38801e03 	ldbu	r2,120(r7)
         return (0);
      prev = next;
   }
   if (q == 0) 
   {
      prev->so_q0 = next->so_q0;
 4020a8c:	20c01c17 	ldw	r3,112(r4)
   {
      prev->so_q = next->so_q;
      head->so_qlen--;
   }
   next->so_q0 = next->so_q = 0;
   next->so_head = 0;
 4020a90:	20001b15 	stw	zero,108(r4)
      prev = next;
   }
   if (q == 0) 
   {
      prev->so_q0 = next->so_q0;
      head->so_q0len--;
 4020a94:	10bfffc4 	addi	r2,r2,-1
         return (0);
      prev = next;
   }
   if (q == 0) 
   {
      prev->so_q0 = next->so_q0;
 4020a98:	30c01c15 	stw	r3,112(r6)
      head->so_q0len--;
 4020a9c:	38801e05 	stb	r2,120(r7)
   {
      prev->so_q = next->so_q;
      head->so_qlen--;
   }
   next->so_q0 = next->so_q = 0;
   next->so_head = 0;
 4020aa0:	00800044 	movi	r2,1
   } else 
   {
      prev->so_q = next->so_q;
      head->so_qlen--;
   }
   next->so_q0 = next->so_q = 0;
 4020aa4:	20001d15 	stw	zero,116(r4)
 4020aa8:	20001c15 	stw	zero,112(r4)
   next->so_head = 0;
   return 1;
}
 4020aac:	f800283a 	ret
      prev->so_q0 = next->so_q0;
      head->so_q0len--;
   } else 
   {
      prev->so_q = next->so_q;
      head->so_qlen--;
 4020ab0:	38801e43 	ldbu	r2,121(r7)
   {
      prev->so_q0 = next->so_q0;
      head->so_q0len--;
   } else 
   {
      prev->so_q = next->so_q;
 4020ab4:	20c01d17 	ldw	r3,116(r4)
      head->so_qlen--;
   }
   next->so_q0 = next->so_q = 0;
   next->so_head = 0;
 4020ab8:	20001b15 	stw	zero,108(r4)
      prev->so_q0 = next->so_q0;
      head->so_q0len--;
   } else 
   {
      prev->so_q = next->so_q;
      head->so_qlen--;
 4020abc:	10bfffc4 	addi	r2,r2,-1
   {
      prev->so_q0 = next->so_q0;
      head->so_q0len--;
   } else 
   {
      prev->so_q = next->so_q;
 4020ac0:	30c01d15 	stw	r3,116(r6)
      head->so_qlen--;
 4020ac4:	38801e45 	stb	r2,121(r7)
   }
   next->so_q0 = next->so_q = 0;
   next->so_head = 0;
 4020ac8:	00800044 	movi	r2,1
   } else 
   {
      prev->so_q = next->so_q;
      head->so_qlen--;
   }
   next->so_q0 = next->so_q = 0;
 4020acc:	20001d15 	stw	zero,116(r4)
 4020ad0:	20001c15 	stw	zero,112(r4)
   next->so_head = 0;
   return 1;
}
 4020ad4:	f800283a 	ret

04020ad8 <sbselqueue>:
 */

void
sbselqueue(struct sockbuf * sb)
{
   sb->sb_flags |= SB_SEL;
 4020ad8:	2080070b 	ldhu	r2,28(r4)
 4020adc:	10800214 	ori	r2,r2,8
 4020ae0:	2080070d 	sth	r2,28(r4)
}
 4020ae4:	f800283a 	ret

04020ae8 <sbreserve>:
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
 4020ae8:	2945883a 	add	r2,r5,r5
 4020aec:	00d00004 	movi	r3,16384
{
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
 4020af0:	21400115 	stw	r5,4(r4)
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
 4020af4:	1880012e 	bgeu	r3,r2,4020afc <sbreserve+0x14>
 4020af8:	1805883a 	mov	r2,r3
 4020afc:	20800315 	stw	r2,12(r4)
   return (1);
}
 4020b00:	00800044 	movi	r2,1
 4020b04:	f800283a 	ret

04020b08 <sbdroprecord>:
 * RETURNS: 
 */

void
sbdroprecord(struct sockbuf * sb)
{
 4020b08:	defffe04 	addi	sp,sp,-8
 4020b0c:	dc000015 	stw	r16,0(sp)
 4020b10:	2021883a 	mov	r16,r4
 4020b14:	dfc00115 	stw	ra,4(sp)
   struct mbuf *  m, *  mn;

   ENTER_CRIT_SECTION(sb);
 4020b18:	401c7c40 	call	401c7c4 <irq_Mask>
   m = sb->sb_mb;
 4020b1c:	81000617 	ldw	r4,24(r16)
   if (m)
 4020b20:	20000926 	beq	r4,zero,4020b48 <sbdroprecord+0x40>
   {  sb->sb_mb = m->m_act;
 4020b24:	20800717 	ldw	r2,28(r4)
 4020b28:	80800615 	stw	r2,24(r16)
      do 
      {  sbfree(sb, m);
 4020b2c:	20800217 	ldw	r2,8(r4)
 4020b30:	80c00017 	ldw	r3,0(r16)
 4020b34:	1887c83a 	sub	r3,r3,r2
 4020b38:	80c00015 	stw	r3,0(r16)
         MFREE(m, mn);
 4020b3c:	401d6500 	call	401d650 <m_free>
 4020b40:	1009883a 	mov	r4,r2
      } while ((m = mn) != NULL);
 4020b44:	103ff91e 	bne	r2,zero,4020b2c <sbdroprecord+0x24>
         }
   EXIT_CRIT_SECTION(sb);
}
 4020b48:	dfc00117 	ldw	ra,4(sp)
 4020b4c:	dc000017 	ldw	r16,0(sp)
 4020b50:	dec00204 	addi	sp,sp,8
      do 
      {  sbfree(sb, m);
         MFREE(m, mn);
      } while ((m = mn) != NULL);
         }
   EXIT_CRIT_SECTION(sb);
 4020b54:	401c7a41 	jmpi	401c7a4 <irq_Unmask>

04020b58 <sbdropend>:
 * RETURNS: 
 */

void
sbdropend(struct sockbuf * sb, struct mbuf * m)
{
 4020b58:	defffd04 	addi	sp,sp,-12
 4020b5c:	dfc00215 	stw	ra,8(sp)
 4020b60:	dc400115 	stw	r17,4(sp)
 4020b64:	dc000015 	stw	r16,0(sp)
 4020b68:	2823883a 	mov	r17,r5
 4020b6c:	2021883a 	mov	r16,r4
   struct mbuf *  nmb, *   pmb;
   int   len;
   ENTER_CRIT_SECTION(sb);
 4020b70:	401c7c40 	call	401c7c4 <irq_Mask>
   len = mbuf_len(m);
 4020b74:	8809883a 	mov	r4,r17
 4020b78:	401d0e00 	call	401d0e0 <mbuf_len>
 4020b7c:	1023883a 	mov	r17,r2
   if (len > 0)
 4020b80:	0080030e 	bge	zero,r2,4020b90 <sbdropend+0x38>
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
 4020b84:	81000617 	ldw	r4,24(r16)
 4020b88:	008bc83a 	sub	r5,zero,r2
 4020b8c:	401cffc0 	call	401cffc <m_adj>
   nmb = sb->sb_mb;
 4020b90:	81000617 	ldw	r4,24(r16)
   pmb = NULL;
   if (sb->sb_mb->m_len == 0)
 4020b94:	20800217 	ldw	r2,8(r4)
 4020b98:	1000011e 	bne	r2,zero,4020ba0 <sbdropend+0x48>
      sb->sb_mb = NULL;
 4020b9c:	80000615 	stw	zero,24(r16)
 4020ba0:	0007883a 	mov	r3,zero
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 4020ba4:	10000626 	beq	r2,zero,4020bc0 <sbdropend+0x68>
   {
      pmb = nmb;  /* Remember previous */
      nmb = nmb->m_next;    
 4020ba8:	20800617 	ldw	r2,24(r4)
 4020bac:	2007883a 	mov	r3,r4
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
   nmb = sb->sb_mb;
   pmb = NULL;
   if (sb->sb_mb->m_len == 0)
      sb->sb_mb = NULL;
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 4020bb0:	1009883a 	mov	r4,r2
 4020bb4:	10000526 	beq	r2,zero,4020bcc <sbdropend+0x74>
 4020bb8:	10800217 	ldw	r2,8(r2)
 4020bbc:	103ffa1e 	bne	r2,zero,4020ba8 <sbdropend+0x50>
      pmb = nmb;  /* Remember previous */
      nmb = nmb->m_next;    
   }
   if (nmb && (nmb->m_len == 0)) /* Assume once 0 len found, all the rest */
   {                             /* are zeroes */ 
      if (pmb != NULL)
 4020bc0:	18000126 	beq	r3,zero,4020bc8 <sbdropend+0x70>
         pmb->m_next = NULL;
 4020bc4:	18000615 	stw	zero,24(r3)
      m_freem(nmb);            
 4020bc8:	401d74c0 	call	401d74c <m_freem>
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
 4020bcc:	80800017 	ldw	r2,0(r16)
 4020bd0:	1445c83a 	sub	r2,r2,r17
 4020bd4:	80800015 	stw	r2,0(r16)
   EXIT_CRIT_SECTION(sb);
}
 4020bd8:	dfc00217 	ldw	ra,8(sp)
 4020bdc:	dc400117 	ldw	r17,4(sp)
 4020be0:	dc000017 	ldw	r16,0(sp)
 4020be4:	dec00304 	addi	sp,sp,12
      if (pmb != NULL)
         pmb->m_next = NULL;
      m_freem(nmb);            
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
   EXIT_CRIT_SECTION(sb);
 4020be8:	401c7a41 	jmpi	401c7a4 <irq_Unmask>

04020bec <sbdrop>:
 * RETURNS: 
 */

void
sbdrop(struct sockbuf * sb, int len)
{
 4020bec:	defffc04 	addi	sp,sp,-16
 4020bf0:	dc400115 	stw	r17,4(sp)
 4020bf4:	2023883a 	mov	r17,r4
 4020bf8:	dc000015 	stw	r16,0(sp)
 4020bfc:	dfc00315 	stw	ra,12(sp)
 4020c00:	dc800215 	stw	r18,8(sp)
 4020c04:	2821883a 	mov	r16,r5
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
 4020c08:	401c7c40 	call	401c7c4 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 4020c0c:	89800617 	ldw	r6,24(r17)
 4020c10:	3004c03a 	cmpne	r2,r6,zero
 4020c14:	10003626 	beq	r2,zero,4020cf0 <sbdrop+0x104>
      next = m->m_act;
 4020c18:	34800717 	ldw	r18,28(r6)
   else
      next = NULL;
   while (len > 0) 
 4020c1c:	0400140e 	bge	zero,r16,4020c70 <sbdrop+0x84>
         sb->sb_cc -= len;
         break;
      }
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
 4020c20:	3009883a 	mov	r4,r6
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
   {
      if (m == 0) 
 4020c24:	10000c26 	beq	r2,zero,4020c58 <sbdrop+0x6c>
            panic("sbdrop");
         m = next;
         next = m->m_act;
         continue;
      }
      if (m->m_len > (unsigned)len) 
 4020c28:	30c00217 	ldw	r3,8(r6)
 4020c2c:	80c02736 	bltu	r16,r3,4020ccc <sbdrop+0xe0>
         m->m_data += len;
         sb->sb_cc -= len;
         break;
      }
      len -= m->m_len;
      sbfree (sb, m);
 4020c30:	88800017 	ldw	r2,0(r17)
         m->m_len -= len;
         m->m_data += len;
         sb->sb_cc -= len;
         break;
      }
      len -= m->m_len;
 4020c34:	80e1c83a 	sub	r16,r16,r3
      sbfree (sb, m);
 4020c38:	10c5c83a 	sub	r2,r2,r3
 4020c3c:	88800015 	stw	r2,0(r17)
      MFREE(m, mn);
 4020c40:	401d6500 	call	401d650 <m_free>
 4020c44:	100d883a 	mov	r6,r2
   ENTER_CRIT_SECTION(sb);
   if ((m = sb->sb_mb) != NULL)
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
 4020c48:	0400090e 	bge	zero,r16,4020c70 <sbdrop+0x84>
 4020c4c:	3004c03a 	cmpne	r2,r6,zero
         sb->sb_cc -= len;
         break;
      }
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
 4020c50:	3009883a 	mov	r4,r6
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
   {
      if (m == 0) 
 4020c54:	103ff41e 	bne	r2,zero,4020c28 <sbdrop+0x3c>
      {
         if (next == 0)
            panic("sbdrop");
 4020c58:	010100f4 	movhi	r4,1027
 4020c5c:	2114f504 	addi	r4,r4,21460
      next = NULL;
   while (len > 0) 
   {
      if (m == 0) 
      {
         if (next == 0)
 4020c60:	90002526 	beq	r18,zero,4020cf8 <sbdrop+0x10c>
            panic("sbdrop");
         m = next;
         next = m->m_act;
 4020c64:	900d883a 	mov	r6,r18
 4020c68:	94800717 	ldw	r18,28(r18)
   ENTER_CRIT_SECTION(sb);
   if ((m = sb->sb_mb) != NULL)
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
 4020c6c:	043ff716 	blt	zero,r16,4020c4c <sbdrop+0x60>
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
 4020c70:	3000051e 	bne	r6,zero,4020c88 <sbdrop+0x9c>
 4020c74:	00000e06 	br	4020cb0 <sbdrop+0xc4>
   {
      sbfree(sb, m);
      MFREE(m, mn);
 4020c78:	3009883a 	mov	r4,r6
 4020c7c:	401d6500 	call	401d650 <m_free>
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
 4020c80:	100d883a 	mov	r6,r2
 4020c84:	10000a26 	beq	r2,zero,4020cb0 <sbdrop+0xc4>
 4020c88:	30800217 	ldw	r2,8(r6)
 4020c8c:	103ffa26 	beq	r2,zero,4020c78 <sbdrop+0x8c>
      MFREE(m, mn);
      m = mn;
   }
   if (m) 
   {
      sb->sb_mb = m;
 4020c90:	89800615 	stw	r6,24(r17)
      m->m_act = next;
 4020c94:	34800715 	stw	r18,28(r6)
   } else
      sb->sb_mb = next;
   EXIT_CRIT_SECTION(sb);
}
 4020c98:	dfc00317 	ldw	ra,12(sp)
 4020c9c:	dc800217 	ldw	r18,8(sp)
 4020ca0:	dc400117 	ldw	r17,4(sp)
 4020ca4:	dc000017 	ldw	r16,0(sp)
 4020ca8:	dec00404 	addi	sp,sp,16
   {
      sb->sb_mb = m;
      m->m_act = next;
   } else
      sb->sb_mb = next;
   EXIT_CRIT_SECTION(sb);
 4020cac:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
   if (m) 
   {
      sb->sb_mb = m;
      m->m_act = next;
   } else
      sb->sb_mb = next;
 4020cb0:	8c800615 	stw	r18,24(r17)
   EXIT_CRIT_SECTION(sb);
}
 4020cb4:	dfc00317 	ldw	ra,12(sp)
 4020cb8:	dc800217 	ldw	r18,8(sp)
 4020cbc:	dc400117 	ldw	r17,4(sp)
 4020cc0:	dc000017 	ldw	r16,0(sp)
 4020cc4:	dec00404 	addi	sp,sp,16
   {
      sb->sb_mb = m;
      m->m_act = next;
   } else
      sb->sb_mb = next;
   EXIT_CRIT_SECTION(sb);
 4020cc8:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
         next = m->m_act;
         continue;
      }
      if (m->m_len > (unsigned)len) 
      {
         m->m_len -= len;
 4020ccc:	1c05c83a 	sub	r2,r3,r16
 4020cd0:	30800215 	stw	r2,8(r6)
         m->m_data += len;
 4020cd4:	30c00317 	ldw	r3,12(r6)
         sb->sb_cc -= len;
 4020cd8:	88800017 	ldw	r2,0(r17)
         continue;
      }
      if (m->m_len > (unsigned)len) 
      {
         m->m_len -= len;
         m->m_data += len;
 4020cdc:	1c07883a 	add	r3,r3,r16
         sb->sb_cc -= len;
 4020ce0:	1405c83a 	sub	r2,r2,r16
         continue;
      }
      if (m->m_len > (unsigned)len) 
      {
         m->m_len -= len;
         m->m_data += len;
 4020ce4:	30c00315 	stw	r3,12(r6)
         sb->sb_cc -= len;
 4020ce8:	88800015 	stw	r2,0(r17)
 4020cec:	003fe606 	br	4020c88 <sbdrop+0x9c>
{
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
   if ((m = sb->sb_mb) != NULL)
 4020cf0:	0025883a 	mov	r18,zero
 4020cf4:	003fc906 	br	4020c1c <sbdrop+0x30>
   while (len > 0) 
   {
      if (m == 0) 
      {
         if (next == 0)
            panic("sbdrop");
 4020cf8:	4019c440 	call	4019c44 <panic>
 4020cfc:	003fd906 	br	4020c64 <sbdrop+0x78>

04020d00 <sbflush>:
 * RETURNS: 
 */

void
sbflush(struct sockbuf * sb)
{
 4020d00:	defffe04 	addi	sp,sp,-8
 4020d04:	dc000015 	stw	r16,0(sp)
 4020d08:	2021883a 	mov	r16,r4
 4020d0c:	dfc00115 	stw	ra,4(sp)
   ENTER_CRIT_SECTION(sb);
 4020d10:	401c7c40 	call	401c7c4 <irq_Mask>
   if (sb->sb_flags & SB_LOCK)
 4020d14:	8080070b 	ldhu	r2,28(r16)
 4020d18:	1080004c 	andi	r2,r2,1
 4020d1c:	1005003a 	cmpeq	r2,r2,zero
 4020d20:	1000031e 	bne	r2,zero,4020d30 <sbflush+0x30>
 4020d24:	00000b06 	br	4020d54 <sbflush+0x54>
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
      sbdrop (sb, (int)sb->sb_cc);
 4020d28:	81400017 	ldw	r5,0(r16)
 4020d2c:	4020bec0 	call	4020bec <sbdrop>
sbflush(struct sockbuf * sb)
{
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 4020d30:	80800217 	ldw	r2,8(r16)
      sbdrop (sb, (int)sb->sb_cc);
 4020d34:	8009883a 	mov	r4,r16
sbflush(struct sockbuf * sb)
{
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 4020d38:	103ffb1e 	bne	r2,zero,4020d28 <sbflush+0x28>
 4020d3c:	80800017 	ldw	r2,0(r16)
 4020d40:	103ff91e 	bne	r2,zero,4020d28 <sbflush+0x28>
      sbdrop (sb, (int)sb->sb_cc);
   EXIT_CRIT_SECTION(sb);
}
 4020d44:	dfc00117 	ldw	ra,4(sp)
 4020d48:	dc000017 	ldw	r16,0(sp)
 4020d4c:	dec00204 	addi	sp,sp,8
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
      sbdrop (sb, (int)sb->sb_cc);
   EXIT_CRIT_SECTION(sb);
 4020d50:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
void
sbflush(struct sockbuf * sb)
{
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
 4020d54:	010100f4 	movhi	r4,1027
 4020d58:	2114f704 	addi	r4,r4,21468
 4020d5c:	4019c440 	call	4019c44 <panic>
 4020d60:	003ff306 	br	4020d30 <sbflush+0x30>

04020d64 <sbrelease>:
 * RETURNS: 
 */

void
sbrelease(struct sockbuf * sb)
{
 4020d64:	defffe04 	addi	sp,sp,-8
 4020d68:	dc000015 	stw	r16,0(sp)
 4020d6c:	dfc00115 	stw	ra,4(sp)
 4020d70:	2021883a 	mov	r16,r4
   sbflush(sb);
 4020d74:	4020d000 	call	4020d00 <sbflush>
   sb->sb_hiwat = sb->sb_mbmax = 0;
 4020d78:	80000115 	stw	zero,4(r16)
 4020d7c:	80000315 	stw	zero,12(r16)
}
 4020d80:	dfc00117 	ldw	ra,4(sp)
 4020d84:	dc000017 	ldw	r16,0(sp)
 4020d88:	dec00204 	addi	sp,sp,8
 4020d8c:	f800283a 	ret

04020d90 <soreserve>:

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
 4020d90:	defffc04 	addi	sp,sp,-16
 4020d94:	dc000015 	stw	r16,0(sp)
   if (sbreserve(&so->so_snd, sndcc) == 0)
 4020d98:	24001204 	addi	r16,r4,72

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
 4020d9c:	dcc00215 	stw	r19,8(sp)
 4020da0:	2027883a 	mov	r19,r4
   if (sbreserve(&so->so_snd, sndcc) == 0)
 4020da4:	8009883a 	mov	r4,r16

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
 4020da8:	dc400115 	stw	r17,4(sp)
 4020dac:	dfc00315 	stw	ra,12(sp)
 4020db0:	3023883a 	mov	r17,r6
   if (sbreserve(&so->so_snd, sndcc) == 0)
 4020db4:	4020ae80 	call	4020ae8 <sbreserve>
 4020db8:	00c01a44 	movi	r3,105
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
 4020dbc:	99000a04 	addi	r4,r19,40
 4020dc0:	880b883a 	mov	r5,r17
int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
   if (sbreserve(&so->so_snd, sndcc) == 0)
 4020dc4:	1000071e 	bne	r2,zero,4020de4 <soreserve+0x54>
   return (0);
bad2:
   sbrelease(&so->so_snd);
bad:
   return (ENOBUFS);
}
 4020dc8:	1805883a 	mov	r2,r3
 4020dcc:	dfc00317 	ldw	ra,12(sp)
 4020dd0:	dcc00217 	ldw	r19,8(sp)
 4020dd4:	dc400117 	ldw	r17,4(sp)
 4020dd8:	dc000017 	ldw	r16,0(sp)
 4020ddc:	dec00404 	addi	sp,sp,16
 4020de0:	f800283a 	ret
   u_long   sndcc, 
   u_long   rcvcc)
{
   if (sbreserve(&so->so_snd, sndcc) == 0)
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
 4020de4:	4020ae80 	call	4020ae8 <sbreserve>
      goto bad2;
 4020de8:	0007883a 	mov	r3,zero
   return (0);
bad2:
   sbrelease(&so->so_snd);
 4020dec:	8009883a 	mov	r4,r16
   u_long   sndcc, 
   u_long   rcvcc)
{
   if (sbreserve(&so->so_snd, sndcc) == 0)
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
 4020df0:	103ff51e 	bne	r2,zero,4020dc8 <soreserve+0x38>
      goto bad2;
   return (0);
bad2:
   sbrelease(&so->so_snd);
 4020df4:	4020d640 	call	4020d64 <sbrelease>
 4020df8:	00c01a44 	movi	r3,105
bad:
   return (ENOBUFS);
}
 4020dfc:	1805883a 	mov	r2,r3
 4020e00:	dfc00317 	ldw	ra,12(sp)
 4020e04:	dcc00217 	ldw	r19,8(sp)
 4020e08:	dc400117 	ldw	r17,4(sp)
 4020e0c:	dc000017 	ldw	r16,0(sp)
 4020e10:	dec00404 	addi	sp,sp,16
 4020e14:	f800283a 	ret

04020e18 <sbcompress>:

void
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{
 4020e18:	defffc04 	addi	sp,sp,-16
 4020e1c:	dc800215 	stw	r18,8(sp)
 4020e20:	dc400115 	stw	r17,4(sp)
 4020e24:	dc000015 	stw	r16,0(sp)
 4020e28:	dfc00315 	stw	ra,12(sp)
 4020e2c:	2821883a 	mov	r16,r5
 4020e30:	2025883a 	mov	r18,r4
 4020e34:	3023883a 	mov	r17,r6

   while (m) 
 4020e38:	80002426 	beq	r16,zero,4020ecc <sbcompress+0xb4>
   {
      if (m->m_len == 0) 
 4020e3c:	81800217 	ldw	r6,8(r16)
 4020e40:	30002826 	beq	r6,zero,4020ee4 <sbcompress+0xcc>
      {
         m = m_free(m);
         continue;
      }
      if (m->m_type != MT_RXDATA && 
 4020e44:	81400817 	ldw	r5,32(r16)
 4020e48:	00800044 	movi	r2,1
 4020e4c:	28ffffc4 	addi	r3,r5,-1
 4020e50:	10c0092e 	bgeu	r2,r3,4020e78 <sbcompress+0x60>
 4020e54:	00800244 	movi	r2,9
 4020e58:	28800726 	beq	r5,r2,4020e78 <sbcompress+0x60>
          m->m_type != MT_TXDATA && 
          m->m_type != MT_SONAME) 
      {
         dprintf ("sbcomp:bad type %d\n", m->m_type);
 4020e5c:	010100f4 	movhi	r4,1027
 4020e60:	2114f904 	addi	r4,r4,21476
 4020e64:	4002ed40 	call	4002ed4 <printf>
         panic ("sbcomp:bad");
 4020e68:	010100f4 	movhi	r4,1027
 4020e6c:	2114fe04 	addi	r4,r4,21496
 4020e70:	4019c440 	call	4019c44 <panic>
 4020e74:	81800217 	ldw	r6,8(r16)
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
 4020e78:	88001e26 	beq	r17,zero,4020ef4 <sbcompress+0xdc>
 4020e7c:	9080070b 	ldhu	r2,28(r18)
 4020e80:	1080200c 	andi	r2,r2,128
 4020e84:	10000826 	beq	r2,zero,4020ea8 <sbcompress+0x90>
 4020e88:	8a000317 	ldw	r8,12(r17)
 4020e8c:	88800417 	ldw	r2,16(r17)
 4020e90:	89c00217 	ldw	r7,8(r17)
 4020e94:	88c00517 	ldw	r3,20(r17)
 4020e98:	4085c83a 	sub	r2,r8,r2
 4020e9c:	3989883a 	add	r4,r7,r6
 4020ea0:	1887c83a 	sub	r3,r3,r2
 4020ea4:	20c01836 	bltu	r4,r3,4020f08 <sbcompress+0xf0>
         sballoc(sb, m);
         n->m_len += m->m_len;
         m = m_free(m);
         continue;
      }
      sballoc(sb, m);
 4020ea8:	90800017 	ldw	r2,0(r18)
      if (n)
         n->m_next = m;
 4020eac:	8c000615 	stw	r16,24(r17)
         sballoc(sb, m);
         n->m_len += m->m_len;
         m = m_free(m);
         continue;
      }
      sballoc(sb, m);
 4020eb0:	1185883a 	add	r2,r2,r6
 4020eb4:	90800015 	stw	r2,0(r18)
      if (n)
         n->m_next = m;
      else
         sb->sb_mb = m;
      n = m;
      m = m->m_next;
 4020eb8:	80800617 	ldw	r2,24(r16)
      n->m_next = 0;
 4020ebc:	8023883a 	mov	r17,r16
 4020ec0:	80000615 	stw	zero,24(r16)
 4020ec4:	1021883a 	mov	r16,r2
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{

   while (m) 
 4020ec8:	803fdc1e 	bne	r16,zero,4020e3c <sbcompress+0x24>
         sb->sb_mb = m;
      n = m;
      m = m->m_next;
      n->m_next = 0;
   }
}
 4020ecc:	dfc00317 	ldw	ra,12(sp)
 4020ed0:	dc800217 	ldw	r18,8(sp)
 4020ed4:	dc400117 	ldw	r17,4(sp)
 4020ed8:	dc000017 	ldw	r16,0(sp)
 4020edc:	dec00404 	addi	sp,sp,16
 4020ee0:	f800283a 	ret

   while (m) 
   {
      if (m->m_len == 0) 
      {
         m = m_free(m);
 4020ee4:	8009883a 	mov	r4,r16
 4020ee8:	401d6500 	call	401d650 <m_free>
 4020eec:	1021883a 	mov	r16,r2
 4020ef0:	003fd106 	br	4020e38 <sbcompress+0x20>
         sballoc(sb, m);
         n->m_len += m->m_len;
         m = m_free(m);
         continue;
      }
      sballoc(sb, m);
 4020ef4:	90800017 	ldw	r2,0(r18)
      if (n)
         n->m_next = m;
      else
         sb->sb_mb = m;
 4020ef8:	94000615 	stw	r16,24(r18)
         sballoc(sb, m);
         n->m_len += m->m_len;
         m = m_free(m);
         continue;
      }
      sballoc(sb, m);
 4020efc:	1185883a 	add	r2,r2,r6
 4020f00:	90800015 	stw	r2,0(r18)
 4020f04:	003fec06 	br	4020eb8 <sbcompress+0xa0>
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
          ((n->m_len + m->m_len) <
          n->m_memsz - (n->m_data - n->m_base) ) ) 
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
 4020f08:	81400317 	ldw	r5,12(r16)
 4020f0c:	41c9883a 	add	r4,r8,r7
 4020f10:	40096480 	call	4009648 <memcpy>
         sballoc(sb, m);
 4020f14:	80800217 	ldw	r2,8(r16)
 4020f18:	90c00017 	ldw	r3,0(r18)
         n->m_len += m->m_len;
         m = m_free(m);
 4020f1c:	8009883a 	mov	r4,r16
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
          ((n->m_len + m->m_len) <
          n->m_memsz - (n->m_data - n->m_base) ) ) 
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
         sballoc(sb, m);
 4020f20:	1887883a 	add	r3,r3,r2
 4020f24:	90c00015 	stw	r3,0(r18)
         n->m_len += m->m_len;
 4020f28:	80c00217 	ldw	r3,8(r16)
 4020f2c:	88800217 	ldw	r2,8(r17)
 4020f30:	10c5883a 	add	r2,r2,r3
 4020f34:	88800215 	stw	r2,8(r17)
         m = m_free(m);
 4020f38:	401d6500 	call	401d650 <m_free>
 4020f3c:	1021883a 	mov	r16,r2
 4020f40:	003fbd06 	br	4020e38 <sbcompress+0x20>

04020f44 <sbappendrecord>:
 */

void
sbappendrecord(struct sockbuf * sb, 
   struct mbuf *  m0)
{
 4020f44:	defffd04 	addi	sp,sp,-12
 4020f48:	dc400115 	stw	r17,4(sp)
 4020f4c:	dc000015 	stw	r16,0(sp)
 4020f50:	dfc00215 	stw	ra,8(sp)
 4020f54:	2821883a 	mov	r16,r5
 4020f58:	2023883a 	mov	r17,r4
   struct mbuf *  m;

   if (m0 == 0)
 4020f5c:	28001626 	beq	r5,zero,4020fb8 <sbappendrecord+0x74>
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
 4020f60:	401c7c40 	call	401c7c4 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 4020f64:	89000617 	ldw	r4,24(r17)
 4020f68:	2000021e 	bne	r4,zero,4020f74 <sbappendrecord+0x30>
 4020f6c:	00001706 	br	4020fcc <sbappendrecord+0x88>
      while (m->m_act)
 4020f70:	1009883a 	mov	r4,r2
 4020f74:	20800717 	ldw	r2,28(r4)
 4020f78:	103ffd1e 	bne	r2,zero,4020f70 <sbappendrecord+0x2c>
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 4020f7c:	88800017 	ldw	r2,0(r17)
 4020f80:	80c00217 	ldw	r3,8(r16)
   if (m)
      m->m_act = m0;
 4020f84:	24000715 	stw	r16,28(r4)
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 4020f88:	10c5883a 	add	r2,r2,r3
 4020f8c:	88800015 	stw	r2,0(r17)
   if (m)
      m->m_act = m0;
   else
      sb->sb_mb = m0;
   m = m0->m_next;
 4020f90:	81400617 	ldw	r5,24(r16)
   m0->m_next = 0;
   sbcompress(sb, m, m0);
 4020f94:	8809883a 	mov	r4,r17
 4020f98:	800d883a 	mov	r6,r16
   if (m)
      m->m_act = m0;
   else
      sb->sb_mb = m0;
   m = m0->m_next;
   m0->m_next = 0;
 4020f9c:	80000615 	stw	zero,24(r16)
   sbcompress(sb, m, m0);
 4020fa0:	4020e180 	call	4020e18 <sbcompress>
   EXIT_CRIT_SECTION(sb);
}
 4020fa4:	dfc00217 	ldw	ra,8(sp)
 4020fa8:	dc400117 	ldw	r17,4(sp)
 4020fac:	dc000017 	ldw	r16,0(sp)
 4020fb0:	dec00304 	addi	sp,sp,12
   else
      sb->sb_mb = m0;
   m = m0->m_next;
   m0->m_next = 0;
   sbcompress(sb, m, m0);
   EXIT_CRIT_SECTION(sb);
 4020fb4:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
}
 4020fb8:	dfc00217 	ldw	ra,8(sp)
 4020fbc:	dc400117 	ldw	r17,4(sp)
 4020fc0:	dc000017 	ldw	r16,0(sp)
 4020fc4:	dec00304 	addi	sp,sp,12
 4020fc8:	f800283a 	ret
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 4020fcc:	88800017 	ldw	r2,0(r17)
 4020fd0:	80c00217 	ldw	r3,8(r16)
   if (m)
      m->m_act = m0;
   else
      sb->sb_mb = m0;
 4020fd4:	8c000615 	stw	r16,24(r17)
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 4020fd8:	10c5883a 	add	r2,r2,r3
 4020fdc:	88800015 	stw	r2,0(r17)
 4020fe0:	003feb06 	br	4020f90 <sbappendrecord+0x4c>

04020fe4 <sbappend>:
 * RETURNS: 
 */

void
sbappend(struct sockbuf * sb, struct mbuf * m)
{
 4020fe4:	defffd04 	addi	sp,sp,-12
 4020fe8:	dc400115 	stw	r17,4(sp)
 4020fec:	dc000015 	stw	r16,0(sp)
 4020ff0:	dfc00215 	stw	ra,8(sp)
 4020ff4:	2823883a 	mov	r17,r5
 4020ff8:	2021883a 	mov	r16,r4
   struct mbuf *  n;

   if (m == 0)
 4020ffc:	28001526 	beq	r5,zero,4021054 <sbappend+0x70>
      return;
   ENTER_CRIT_SECTION(sb);
 4021000:	401c7c40 	call	401c7c4 <irq_Mask>
   if ((n = sb->sb_mb) != NULL) 
 4021004:	80800617 	ldw	r2,24(r16)
 4021008:	1000021e 	bne	r2,zero,4021014 <sbappend+0x30>
 402100c:	00000806 	br	4021030 <sbappend+0x4c>
   {
      while (n->m_act)
 4021010:	3005883a 	mov	r2,r6
 4021014:	11800717 	ldw	r6,28(r2)
 4021018:	303ffd1e 	bne	r6,zero,4021010 <sbappend+0x2c>
         n = n->m_act;
      while (n->m_next)
 402101c:	11800617 	ldw	r6,24(r2)
 4021020:	30000326 	beq	r6,zero,4021030 <sbappend+0x4c>
   if (m == 0)
      return;
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
 4021024:	3005883a 	mov	r2,r6
         n = n->m_act;
      while (n->m_next)
 4021028:	11800617 	ldw	r6,24(r2)
 402102c:	303ffd1e 	bne	r6,zero,4021024 <sbappend+0x40>
         n = n->m_next;
   }
   sbcompress(sb, m, n);
 4021030:	8009883a 	mov	r4,r16
 4021034:	880b883a 	mov	r5,r17
 4021038:	100d883a 	mov	r6,r2
 402103c:	4020e180 	call	4020e18 <sbcompress>
   EXIT_CRIT_SECTION(sb);
}
 4021040:	dfc00217 	ldw	ra,8(sp)
 4021044:	dc400117 	ldw	r17,4(sp)
 4021048:	dc000017 	ldw	r16,0(sp)
 402104c:	dec00304 	addi	sp,sp,12
         n = n->m_act;
      while (n->m_next)
         n = n->m_next;
   }
   sbcompress(sb, m, n);
   EXIT_CRIT_SECTION(sb);
 4021050:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
}
 4021054:	dfc00217 	ldw	ra,8(sp)
 4021058:	dc400117 	ldw	r17,4(sp)
 402105c:	dc000017 	ldw	r16,0(sp)
 4021060:	dec00304 	addi	sp,sp,12
 4021064:	f800283a 	ret

04021068 <sbappendaddr>:

int
sbappendaddr(struct sockbuf * sb, 
   struct sockaddr * asa,
   struct mbuf *  m0)
{
 4021068:	defffb04 	addi	sp,sp,-20
 402106c:	dc800215 	stw	r18,8(sp)
 4021070:	3025883a 	mov	r18,r6
 4021074:	dc400115 	stw	r17,4(sp)
 4021078:	dc000015 	stw	r16,0(sp)
 402107c:	dfc00415 	stw	ra,16(sp)
 4021080:	dcc00315 	stw	r19,12(sp)
 4021084:	2023883a 	mov	r17,r4
 4021088:	2821883a 	mov	r16,r5
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
 402108c:	401c7c40 	call	401c7c4 <irq_Mask>
   for (m = m0; m; m = m->m_next)
 4021090:	90004926 	beq	r18,zero,40211b8 <sbappendaddr+0x150>
 4021094:	9007883a 	mov	r3,r18
 4021098:	01000404 	movi	r4,16
      space += m->m_len;
 402109c:	18800217 	ldw	r2,8(r3)
{
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
 40210a0:	18c00617 	ldw	r3,24(r3)
      space += m->m_len;
 40210a4:	2089883a 	add	r4,r4,r2
{
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
 40210a8:	183ffc1e 	bne	r3,zero,402109c <sbappendaddr+0x34>
      space += m->m_len;
   if (space > (int)sbspace(sb))
 40210ac:	88c00117 	ldw	r3,4(r17)
 40210b0:	88800017 	ldw	r2,0(r17)
 40210b4:	1887c83a 	sub	r3,r3,r2
 40210b8:	18003b16 	blt	r3,zero,40211a8 <sbappendaddr+0x140>
 40210bc:	19003116 	blt	r3,r4,4021184 <sbappendaddr+0x11c>
   {
      EXIT_CRIT_SECTION(sb);
      return (0);
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
 40210c0:	04c00404 	movi	r19,16
 40210c4:	980b883a 	mov	r5,r19
 40210c8:	01000244 	movi	r4,9
 40210cc:	401dad40 	call	401dad4 <m_getnbuf>
 40210d0:	100b883a 	mov	r5,r2
 40210d4:	10002b26 	beq	r2,zero,4021184 <sbappendaddr+0x11c>
   {
      EXIT_CRIT_SECTION(sb);
      return 0;
   }
   *mtod(m, struct sockaddr *) = *asa;
 40210d8:	80c0000b 	ldhu	r3,0(r16)
 40210dc:	11000317 	ldw	r4,12(r2)
 40210e0:	20c0000d 	sth	r3,0(r4)
 40210e4:	8080008b 	ldhu	r2,2(r16)
 40210e8:	2080008d 	sth	r2,2(r4)
 40210ec:	80c0010b 	ldhu	r3,4(r16)
 40210f0:	20c0010d 	sth	r3,4(r4)
 40210f4:	8080018b 	ldhu	r2,6(r16)
 40210f8:	2080018d 	sth	r2,6(r4)
 40210fc:	80c0020b 	ldhu	r3,8(r16)
 4021100:	20c0020d 	sth	r3,8(r4)
 4021104:	8080028b 	ldhu	r2,10(r16)
 4021108:	2080028d 	sth	r2,10(r4)
 402110c:	80c0030b 	ldhu	r3,12(r16)
 4021110:	20c0030d 	sth	r3,12(r4)
 4021114:	8080038b 	ldhu	r2,14(r16)
 4021118:	2080038d 	sth	r2,14(r4)
   m->m_len = sizeof (*asa);
 402111c:	2cc00215 	stw	r19,8(r5)
   sballoc (sb, m);
 4021120:	88800017 	ldw	r2,0(r17)
   if ((n = sb->sb_mb) != NULL) 
 4021124:	88c00617 	ldw	r3,24(r17)
      EXIT_CRIT_SECTION(sb);
      return 0;
   }
   *mtod(m, struct sockaddr *) = *asa;
   m->m_len = sizeof (*asa);
   sballoc (sb, m);
 4021128:	10800404 	addi	r2,r2,16
 402112c:	88800015 	stw	r2,0(r17)
   if ((n = sb->sb_mb) != NULL) 
 4021130:	1800021e 	bne	r3,zero,402113c <sbappendaddr+0xd4>
 4021134:	00002606 	br	40211d0 <sbappendaddr+0x168>
   {
      while (n->m_act)
 4021138:	1007883a 	mov	r3,r2
 402113c:	18800717 	ldw	r2,28(r3)
 4021140:	103ffd1e 	bne	r2,zero,4021138 <sbappendaddr+0xd0>
         n = n->m_act;
      n->m_act = m;
 4021144:	19400715 	stw	r5,28(r3)
   } else
      sb->sb_mb = m;
   if (m->m_next)
 4021148:	29800617 	ldw	r6,24(r5)
 402114c:	30001826 	beq	r6,zero,40211b0 <sbappendaddr+0x148>
      m = m->m_next;
   if (m0)
 4021150:	90000326 	beq	r18,zero,4021160 <sbappendaddr+0xf8>
      sbcompress(sb, m0, m);
 4021154:	8809883a 	mov	r4,r17
 4021158:	900b883a 	mov	r5,r18
 402115c:	4020e180 	call	4020e18 <sbcompress>

   EXIT_CRIT_SECTION(sb);
 4021160:	401c7a40 	call	401c7a4 <irq_Unmask>
 4021164:	00800044 	movi	r2,1
   return (1);
}
 4021168:	dfc00417 	ldw	ra,16(sp)
 402116c:	dcc00317 	ldw	r19,12(sp)
 4021170:	dc800217 	ldw	r18,8(sp)
 4021174:	dc400117 	ldw	r17,4(sp)
 4021178:	dc000017 	ldw	r16,0(sp)
 402117c:	dec00504 	addi	sp,sp,20
 4021180:	f800283a 	ret
      EXIT_CRIT_SECTION(sb);
      return (0);
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
   {
      EXIT_CRIT_SECTION(sb);
 4021184:	401c7a40 	call	401c7a4 <irq_Unmask>
 4021188:	0005883a 	mov	r2,zero
   if (m0)
      sbcompress(sb, m0, m);

   EXIT_CRIT_SECTION(sb);
   return (1);
}
 402118c:	dfc00417 	ldw	ra,16(sp)
 4021190:	dcc00317 	ldw	r19,12(sp)
 4021194:	dc800217 	ldw	r18,8(sp)
 4021198:	dc400117 	ldw	r17,4(sp)
 402119c:	dc000017 	ldw	r16,0(sp)
 40211a0:	dec00504 	addi	sp,sp,20
 40211a4:	f800283a 	ret
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
      space += m->m_len;
   if (space > (int)sbspace(sb))
 40211a8:	0007883a 	mov	r3,zero
 40211ac:	003fc306 	br	40210bc <sbappendaddr+0x54>
      while (n->m_act)
         n = n->m_act;
      n->m_act = m;
   } else
      sb->sb_mb = m;
   if (m->m_next)
 40211b0:	280d883a 	mov	r6,r5
 40211b4:	003fe606 	br	4021150 <sbappendaddr+0xe8>
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
      space += m->m_len;
   if (space > (int)sbspace(sb))
 40211b8:	88c00117 	ldw	r3,4(r17)
 40211bc:	88800017 	ldw	r2,0(r17)
{
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
 40211c0:	01000404 	movi	r4,16
      space += m->m_len;
   if (space > (int)sbspace(sb))
 40211c4:	1887c83a 	sub	r3,r3,r2
 40211c8:	183fbc0e 	bge	r3,zero,40210bc <sbappendaddr+0x54>
 40211cc:	003ff606 	br	40211a8 <sbappendaddr+0x140>
   {
      while (n->m_act)
         n = n->m_act;
      n->m_act = m;
   } else
      sb->sb_mb = m;
 40211d0:	89400615 	stw	r5,24(r17)
 40211d4:	003fdc06 	br	4021148 <sbappendaddr+0xe0>

040211d8 <sbwakeup>:
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
   if (sb->sb_flags & SB_SEL) 
 40211d8:	28c0070b 	ldhu	r3,28(r5)
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
 40211dc:	defffe04 	addi	sp,sp,-8
   if (sb->sb_flags & SB_SEL) 
   {
      select_wait = 0;
 40211e0:	01810134 	movhi	r6,1028
 40211e4:	31a93b04 	addi	r6,r6,-23316
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
   if (sb->sb_flags & SB_SEL) 
 40211e8:	1880020c 	andi	r2,r3,8
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
 40211ec:	dfc00115 	stw	ra,4(sp)
   if (sb->sb_flags & SB_SEL) 
   {
      select_wait = 0;
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
 40211f0:	3009883a 	mov	r4,r6
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
   if (sb->sb_flags & SB_SEL) 
 40211f4:	1000091e 	bne	r2,zero,402121c <sbwakeup+0x44>
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
 40211f8:	1880010c 	andi	r2,r3,4
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
 40211fc:	2809883a 	mov	r4,r5
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
 4021200:	1000031e 	bne	r2,zero,4021210 <sbwakeup+0x38>
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
   }
#endif   /* SOCK_WAKEALWAYS */
}
 4021204:	dfc00117 	ldw	ra,4(sp)
 4021208:	dec00204 	addi	sp,sp,8
 402120c:	f800283a 	ret
 4021210:	dfc00117 	ldw	ra,4(sp)
 4021214:	dec00204 	addi	sp,sp,8
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
 4021218:	401a4381 	jmpi	401a438 <tcp_wakeup>
void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
   if (sb->sb_flags & SB_SEL) 
   {
      select_wait = 0;
 402121c:	3000000d 	sth	zero,0(r6)
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
 4021220:	d9400015 	stw	r5,0(sp)
 4021224:	401a4380 	call	401a438 <tcp_wakeup>
#else
      tcp_wakeup2 (so->owner);
#endif      
      sb->sb_flags &= ~SB_SEL;
 4021228:	d9400017 	ldw	r5,0(sp)
 402122c:	2880070b 	ldhu	r2,28(r5)
 4021230:	10bffdcc 	andi	r2,r2,65527
 4021234:	10ffffcc 	andi	r3,r2,65535
 4021238:	2880070d 	sth	r2,28(r5)
 402123c:	003fee06 	br	40211f8 <sbwakeup+0x20>

04021240 <socantrcvmore>:
 */

void
socantrcvmore(struct socket * so)
{
   so->so_state |= SS_CANTRCVMORE;
 4021240:	2080088b 	ldhu	r2,34(r4)
   sorwakeup(so);
 4021244:	21400a04 	addi	r5,r4,40
 */

void
socantrcvmore(struct socket * so)
{
   so->so_state |= SS_CANTRCVMORE;
 4021248:	10800814 	ori	r2,r2,32
 402124c:	2080088d 	sth	r2,34(r4)
   sorwakeup(so);
 4021250:	40211d81 	jmpi	40211d8 <sbwakeup>

04021254 <socantsendmore>:
 */

void
socantsendmore(struct socket * so)
{
   so->so_state |= SS_CANTSENDMORE;
 4021254:	2080088b 	ldhu	r2,34(r4)
   sowwakeup(so);
 4021258:	21401204 	addi	r5,r4,72
 */

void
socantsendmore(struct socket * so)
{
   so->so_state |= SS_CANTSENDMORE;
 402125c:	10800414 	ori	r2,r2,16
 4021260:	2080088d 	sth	r2,34(r4)
   sowwakeup(so);
 4021264:	40211d81 	jmpi	40211d8 <sbwakeup>

04021268 <soisdisconnected>:
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
 4021268:	defffe04 	addi	sp,sp,-8
 402126c:	dc000015 	stw	r16,0(sp)
 4021270:	2021883a 	mov	r16,r4
   if (so->so_state & SS_ISCONNECTING)
 4021274:	80c0088b 	ldhu	r3,34(r16)
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
 4021278:	dfc00115 	stw	ra,4(sp)
   if (so->so_state & SS_ISCONNECTING)
      so->so_state |= SS_WASCONNECTING;
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
   tcp_wakeup ((char *)&so->so_timeo);
 402127c:	21000904 	addi	r4,r4,36
 */

void
soisdisconnected(struct socket * so)
{
   if (so->so_state & SS_ISCONNECTING)
 4021280:	1880010c 	andi	r2,r3,4
      so->so_state |= SS_WASCONNECTING;
 4021284:	19480014 	ori	r5,r3,8192
 */

void
soisdisconnected(struct socket * so)
{
   if (so->so_state & SS_ISCONNECTING)
 4021288:	10000226 	beq	r2,zero,4021294 <soisdisconnected+0x2c>
      so->so_state |= SS_WASCONNECTING;
 402128c:	8140088d 	sth	r5,34(r16)
 4021290:	2807883a 	mov	r3,r5
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
 4021294:	00bffc44 	movi	r2,-15
 4021298:	1884703a 	and	r2,r3,r2
 402129c:	10800c14 	ori	r2,r2,48
 40212a0:	8080088d 	sth	r2,34(r16)
   tcp_wakeup ((char *)&so->so_timeo);
 40212a4:	401a4380 	call	401a438 <tcp_wakeup>
   sowwakeup (so);
 40212a8:	81401204 	addi	r5,r16,72
 40212ac:	8009883a 	mov	r4,r16
 40212b0:	40211d80 	call	40211d8 <sbwakeup>
   sorwakeup (so);
 40212b4:	8009883a 	mov	r4,r16
 40212b8:	81400a04 	addi	r5,r16,40
}
 40212bc:	dfc00117 	ldw	ra,4(sp)
 40212c0:	dc000017 	ldw	r16,0(sp)
 40212c4:	dec00204 	addi	sp,sp,8
      so->so_state |= SS_WASCONNECTING;
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
   tcp_wakeup ((char *)&so->so_timeo);
   sowwakeup (so);
   sorwakeup (so);
 40212c8:	40211d81 	jmpi	40211d8 <sbwakeup>

040212cc <soisdisconnecting>:
 */

void
soisdisconnecting(struct socket * so)
{
   so->so_state &= ~SS_ISCONNECTING;
 40212cc:	2080088b 	ldhu	r2,34(r4)
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
 40212d0:	00fffec4 	movi	r3,-5
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
 40212d4:	defffe04 	addi	sp,sp,-8
   so->so_state &= ~SS_ISCONNECTING;
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
 40212d8:	10c4703a 	and	r2,r2,r3
 40212dc:	10800e14 	ori	r2,r2,56
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
 40212e0:	dc400015 	stw	r17,0(sp)
 40212e4:	2023883a 	mov	r17,r4
   so->so_state &= ~SS_ISCONNECTING;
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
 40212e8:	8880088d 	sth	r2,34(r17)
   tcp_wakeup  ((char *)&so->so_timeo);   
 40212ec:	21000904 	addi	r4,r4,36
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
 40212f0:	dfc00115 	stw	ra,4(sp)
   so->so_state &= ~SS_ISCONNECTING;
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
   tcp_wakeup  ((char *)&so->so_timeo);   
 40212f4:	401a4380 	call	401a438 <tcp_wakeup>
   sowwakeup (so);
 40212f8:	89401204 	addi	r5,r17,72
 40212fc:	8809883a 	mov	r4,r17
 4021300:	40211d80 	call	40211d8 <sbwakeup>
   sorwakeup (so);
 4021304:	8809883a 	mov	r4,r17
 4021308:	89400a04 	addi	r5,r17,40
}
 402130c:	dfc00117 	ldw	ra,4(sp)
 4021310:	dc400017 	ldw	r17,0(sp)
 4021314:	dec00204 	addi	sp,sp,8
{
   so->so_state &= ~SS_ISCONNECTING;
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
   tcp_wakeup  ((char *)&so->so_timeo);   
   sowwakeup (so);
   sorwakeup (so);
 4021318:	40211d81 	jmpi	40211d8 <sbwakeup>

0402131c <soisconnected>:
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
 402131c:	defffd04 	addi	sp,sp,-12
 4021320:	dc400115 	stw	r17,4(sp)
   struct socket *   head  =  so->so_head;
 4021324:	24401b17 	ldw	r17,108(r4)
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
 4021328:	dc000015 	stw	r16,0(sp)
 402132c:	dfc00215 	stw	ra,8(sp)
 4021330:	2021883a 	mov	r16,r4
   struct socket *   head  =  so->so_head;

   if (head) 
   {
      if (soqremque(so, 0) == 0)
 4021334:	000b883a 	mov	r5,zero
void
soisconnected(struct socket * so)
{
   struct socket *   head  =  so->so_head;

   if (head) 
 4021338:	88000d26 	beq	r17,zero,4021370 <soisconnected+0x54>
   {
      if (soqremque(so, 0) == 0)
 402133c:	4020a540 	call	4020a54 <soqremque>
         panic("soisconnected");
 4021340:	010100f4 	movhi	r4,1027
 4021344:	21150104 	addi	r4,r4,21508
{
   struct socket *   head  =  so->so_head;

   if (head) 
   {
      if (soqremque(so, 0) == 0)
 4021348:	10001b26 	beq	r2,zero,40213b8 <soisconnected+0x9c>
         panic("soisconnected");
      soqinsque(head, so, 1);
 402134c:	01800044 	movi	r6,1
 4021350:	800b883a 	mov	r5,r16
 4021354:	8809883a 	mov	r4,r17
 4021358:	4020a140 	call	4020a14 <soqinsque>
      sorwakeup(head);
 402135c:	8809883a 	mov	r4,r17
 4021360:	89400a04 	addi	r5,r17,40
 4021364:	40211d80 	call	40211d8 <sbwakeup>
      tcp_wakeup ((char *)&head->so_timeo);
 4021368:	89000904 	addi	r4,r17,36
 402136c:	401a4380 	call	401a438 <tcp_wakeup>
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 4021370:	8080088b 	ldhu	r2,34(r16)
   so->so_state |= SS_ISCONNECTED;
 4021374:	00fffcc4 	movi	r3,-13
   so->so_error = 0;
   tcp_wakeup  ((char *)&so->so_timeo);
 4021378:	81000904 	addi	r4,r16,36
      sorwakeup(head);
      tcp_wakeup ((char *)&head->so_timeo);
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
   so->so_state |= SS_ISCONNECTED;
 402137c:	10c4703a 	and	r2,r2,r3
 4021380:	10800094 	ori	r2,r2,2
 4021384:	8080088d 	sth	r2,34(r16)
   so->so_error = 0;
 4021388:	80000615 	stw	zero,24(r16)
   tcp_wakeup  ((char *)&so->so_timeo);
 402138c:	401a4380 	call	401a438 <tcp_wakeup>
   sorwakeup (so);
 4021390:	81400a04 	addi	r5,r16,40
 4021394:	8009883a 	mov	r4,r16
 4021398:	40211d80 	call	40211d8 <sbwakeup>
   sowwakeup (so);
 402139c:	8009883a 	mov	r4,r16
 40213a0:	81401204 	addi	r5,r16,72
}
 40213a4:	dfc00217 	ldw	ra,8(sp)
 40213a8:	dc400117 	ldw	r17,4(sp)
 40213ac:	dc000017 	ldw	r16,0(sp)
 40213b0:	dec00304 	addi	sp,sp,12
   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
   so->so_state |= SS_ISCONNECTED;
   so->so_error = 0;
   tcp_wakeup  ((char *)&so->so_timeo);
   sorwakeup (so);
   sowwakeup (so);
 40213b4:	40211d81 	jmpi	40211d8 <sbwakeup>
   struct socket *   head  =  so->so_head;

   if (head) 
   {
      if (soqremque(so, 0) == 0)
         panic("soisconnected");
 40213b8:	4019c440 	call	4019c44 <panic>
 40213bc:	003fe306 	br	402134c <soisconnected+0x30>

040213c0 <soisconnecting>:
 */

void
soisconnecting(struct socket * so)
{
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
 40213c0:	2140088b 	ldhu	r5,34(r4)
   so->so_state |= SS_ISCONNECTING;
 40213c4:	01bffd44 	movi	r6,-11
 * RETURNS: 
 */

void
soisconnecting(struct socket * so)
{
 40213c8:	2007883a 	mov	r3,r4
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
   so->so_state |= SS_ISCONNECTING;
 40213cc:	298a703a 	and	r5,r5,r6
 40213d0:	29400114 	ori	r5,r5,4
   tcp_wakeup ((char *)&so->so_timeo);
 40213d4:	21000904 	addi	r4,r4,36

void
soisconnecting(struct socket * so)
{
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
   so->so_state |= SS_ISCONNECTING;
 40213d8:	1940088d 	sth	r5,34(r3)
   tcp_wakeup ((char *)&so->so_timeo);
 40213dc:	401a4381 	jmpi	401a438 <tcp_wakeup>

040213e0 <sbwait>:
 */

void
sbwait(struct sockbuf * sb)
{
   sb->sb_flags |= SB_WAIT;
 40213e0:	2080070b 	ldhu	r2,28(r4)
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
 40213e4:	defffe04 	addi	sp,sp,-8
 40213e8:	dc000015 	stw	r16,0(sp)
   sb->sb_flags |= SB_WAIT;
 40213ec:	10800114 	ori	r2,r2,4
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
 40213f0:	2021883a 	mov	r16,r4
   sb->sb_flags |= SB_WAIT;
 40213f4:	2080070d 	sth	r2,28(r4)
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
 40213f8:	dfc00115 	stw	ra,4(sp)
   sb->sb_flags |= SB_WAIT;
   tcp_sleep ((char *)&sb->sb_cc);
 40213fc:	401a4c00 	call	401a4c0 <tcp_sleep>
   sb->sb_flags &= ~SB_WAIT;
 4021400:	8080070b 	ldhu	r2,28(r16)
 4021404:	10bffecc 	andi	r2,r2,65531
 4021408:	8080070d 	sth	r2,28(r16)
}
 402140c:	dfc00117 	ldw	ra,4(sp)
 4021410:	dc000017 	ldw	r16,0(sp)
 4021414:	dec00204 	addi	sp,sp,8
 4021418:	f800283a 	ret

0402141c <sonewconn>:
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
 402141c:	defffc04 	addi	sp,sp,-16
 4021420:	dc400115 	stw	r17,4(sp)
 4021424:	dc000015 	stw	r16,0(sp)
 4021428:	dfc00315 	stw	ra,12(sp)
 402142c:	dc800215 	stw	r18,8(sp)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
 4021430:	20801e87 	ldb	r2,122(r4)
 4021434:	21801e47 	ldb	r6,121(r4)
 4021438:	21c01e07 	ldb	r7,120(r4)
 402143c:	1087883a 	add	r3,r2,r2
 4021440:	1887883a 	add	r3,r3,r2
 4021444:	180ad7fa 	srli	r5,r3,31
 4021448:	31cd883a 	add	r6,r6,r7
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
 402144c:	2021883a 	mov	r16,r4
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
 4021450:	28cb883a 	add	r5,r5,r3
 4021454:	280bd07a 	srai	r5,r5,1
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 4021458:	01002104 	movi	r4,132
   return (so);
   
bad2:
   (void) soqremque (so, 0);
   qdel(&soq, so);   /* Delete the socket entry from the queue */
   SOC_FREE(so);  /* Free the socket structure */
 402145c:	0023883a 	mov	r17,zero
sonewconn(struct socket * head)
{
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
 4021460:	2980070e 	bge	r5,r6,4021480 <sonewconn+0x64>
   (void) soqremque (so, 0);
   qdel(&soq, so);   /* Delete the socket entry from the queue */
   SOC_FREE(so);  /* Free the socket structure */
bad:
   return ((struct socket *)0);
}
 4021464:	8805883a 	mov	r2,r17
 4021468:	dfc00317 	ldw	ra,12(sp)
 402146c:	dc800217 	ldw	r18,8(sp)
 4021470:	dc400117 	ldw	r17,4(sp)
 4021474:	dc000017 	ldw	r16,0(sp)
 4021478:	dec00404 	addi	sp,sp,16
 402147c:	f800283a 	ret
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 4021480:	401cdc80 	call	401cdc8 <npalloc>
 4021484:	1025883a 	mov	r18,r2
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
 4021488:	01010134 	movhi	r4,1028
 402148c:	210cf804 	addi	r4,r4,13280
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 4021490:	103ff426 	beq	r2,zero,4021464 <sonewconn+0x48>
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
 4021494:	100b883a 	mov	r5,r2

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
      goto bad;
   so->next = NULL;
 4021498:	10000015 	stw	zero,0(r2)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 402149c:	1023883a 	mov	r17,r2
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
 40214a0:	401c2940 	call	401c294 <putq>
   so->so_type = head->so_type;
 40214a4:	80c00983 	ldbu	r3,38(r16)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
 40214a8:	81000417 	ldw	r4,16(r16)
   so->so_linger = head->so_linger;
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
 40214ac:	8140088b 	ldhu	r5,34(r16)
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
   so->so_type = head->so_type;
 40214b0:	90c00985 	stb	r3,38(r18)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
   so->so_linger = head->so_linger;
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
   so->so_proto = head->so_proto;
   so->so_timeo = head->so_timeo;
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
 40214b4:	00810134 	movhi	r2,1028
 40214b8:	10a13904 	addi	r2,r2,-31516
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
 40214bc:	00c10134 	movhi	r3,1028
 40214c0:	18e13804 	addi	r3,r3,-31520
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
   so->so_linger = head->so_linger;
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
   so->so_proto = head->so_proto;
   so->so_timeo = head->so_timeo;
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
 40214c4:	12400017 	ldw	r9,0(r2)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
 40214c8:	1a000017 	ldw	r8,0(r3)
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
   so->so_type = head->so_type;
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
   so->so_linger = head->so_linger;
 40214cc:	8180080b 	ldhu	r6,32(r16)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
   so->so_proto = head->so_proto;
 40214d0:	80c00217 	ldw	r3,8(r16)
   so->so_timeo = head->so_timeo;
 40214d4:	81c0090b 	ldhu	r7,36(r16)
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
   so->so_type = head->so_type;
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
 40214d8:	00bfff44 	movi	r2,-3
 40214dc:	2088703a 	and	r4,r4,r2
   so->so_linger = head->so_linger;
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
 40214e0:	29400054 	ori	r5,r5,1
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
      goto bad;
   so->next = NULL;
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
   so->so_type = head->so_type;
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
 40214e4:	91000415 	stw	r4,16(r18)
   so->so_linger = head->so_linger;
 40214e8:	9180080d 	sth	r6,32(r18)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
 40214ec:	9140088d 	sth	r5,34(r18)
   so->so_proto = head->so_proto;
 40214f0:	90c00215 	stw	r3,8(r18)
   so->so_timeo = head->so_timeo;
 40214f4:	91c0090d 	sth	r7,36(r18)
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
   soqinsque (head, so, 0);
 40214f8:	8009883a 	mov	r4,r16
 40214fc:	900b883a 	mov	r5,r18
 4021500:	000d883a 	mov	r6,zero
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
   so->so_linger = head->so_linger;
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
   so->so_proto = head->so_proto;
   so->so_timeo = head->so_timeo;
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
 4021504:	92400b15 	stw	r9,44(r18)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
 4021508:	92001315 	stw	r8,76(r18)
   soqinsque (head, so, 0);
 402150c:	4020a140 	call	4020a14 <soqinsque>
   so->so_req = PRU_ATTACH;
   so->so_domain = head->so_domain;

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
 4021510:	90800217 	ldw	r2,8(r18)
   so->so_timeo = head->so_timeo;
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
   soqinsque (head, so, 0);
   so->so_req = PRU_ATTACH;
   so->so_domain = head->so_domain;
 4021514:	80c00517 	ldw	r3,20(r16)
   so->so_proto = head->so_proto;
   so->so_timeo = head->so_timeo;
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
   soqinsque (head, so, 0);
   so->so_req = PRU_ATTACH;
 4021518:	90000715 	stw	zero,28(r18)
   so->so_domain = head->so_domain;

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
 402151c:	11c00317 	ldw	r7,12(r2)
   so->so_timeo = head->so_timeo;
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
   soqinsque (head, so, 0);
   so->so_req = PRU_ATTACH;
   so->so_domain = head->so_domain;
 4021520:	90c00515 	stw	r3,20(r18)

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
 4021524:	000d883a 	mov	r6,zero
 4021528:	9009883a 	mov	r4,r18
 402152c:	000b883a 	mov	r5,zero
 4021530:	383ee83a 	callr	r7
 4021534:	10000d1e 	bne	r2,zero,402156c <sonewconn+0x150>
      goto bad2;
   if (so_evtmap)
 4021538:	00810134 	movhi	r2,1028
 402153c:	10a95704 	addi	r2,r2,-23204
 4021540:	10c00003 	ldbu	r3,0(r2)
   {
      rc = (*so_evtmap_create) (so);                       
 4021544:	9009883a 	mov	r4,r18
   so->so_req = PRU_ATTACH;
   so->so_domain = head->so_domain;

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
      goto bad2;
   if (so_evtmap)
 4021548:	183fc626 	beq	r3,zero,4021464 <sonewconn+0x48>
   {
      rc = (*so_evtmap_create) (so);                       
 402154c:	00810134 	movhi	r2,1028
 4021550:	10a95504 	addi	r2,r2,-23212
 4021554:	10c00017 	ldw	r3,0(r2)
 4021558:	183ee83a 	callr	r3
      if (rc != 0) goto bad2;
 402155c:	1000031e 	bne	r2,zero,402156c <sonewconn+0x150>
      so->owner = head->owner;
 4021560:	80802003 	ldbu	r2,128(r16)
 4021564:	90802005 	stb	r2,128(r18)
 4021568:	003fbe06 	br	4021464 <sonewconn+0x48>
   }
   return (so);
   
bad2:
   (void) soqremque (so, 0);
 402156c:	9009883a 	mov	r4,r18
 4021570:	000b883a 	mov	r5,zero
 4021574:	4020a540 	call	4020a54 <soqremque>
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 4021578:	900b883a 	mov	r5,r18
 402157c:	01010134 	movhi	r4,1028
 4021580:	210cf804 	addi	r4,r4,13280
 4021584:	401c1d00 	call	401c1d0 <qdel>
   SOC_FREE(so);  /* Free the socket structure */
 4021588:	9009883a 	mov	r4,r18
 402158c:	401cce40 	call	401cce4 <npfree>
 4021590:	0023883a 	mov	r17,zero
 4021594:	003fb306 	br	4021464 <sonewconn+0x48>

04021598 <in_pcbnotify>:
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 4021598:	22000017 	ldw	r8,0(r4)
void
in_pcbnotify(struct inpcb * head, 
   struct in_addr *  dst,
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
 402159c:	defff804 	addi	sp,sp,-32
 40215a0:	dd800615 	stw	r22,24(sp)
 40215a4:	dd400515 	stw	r21,20(sp)
 40215a8:	dc800215 	stw	r18,8(sp)
 40215ac:	dc400115 	stw	r17,4(sp)
 40215b0:	dfc00715 	stw	ra,28(sp)
 40215b4:	dd000415 	stw	r20,16(sp)
 40215b8:	dcc00315 	stw	r19,12(sp)
 40215bc:	dc000015 	stw	r16,0(sp)
 40215c0:	2023883a 	mov	r17,r4
 40215c4:	2825883a 	mov	r18,r5
 40215c8:	302d883a 	mov	r22,r6
 40215cc:	382b883a 	mov	r21,r7
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 40215d0:	22000826 	beq	r4,r8,40215f4 <in_pcbnotify+0x5c>
 40215d4:	3029003a 	cmpeq	r20,r6,zero
 40215d8:	3827003a 	cmpeq	r19,r7,zero
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 40215dc:	40c00317 	ldw	r3,12(r8)
 40215e0:	90800017 	ldw	r2,0(r18)
 40215e4:	18800d26 	beq	r3,r2,402161c <in_pcbnotify+0x84>
          inp->inp_socket == 0) 
      {
         inp = inp->inp_next;
 40215e8:	44000017 	ldw	r16,0(r8)
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 40215ec:	8011883a 	mov	r8,r16
 40215f0:	8c3ffa1e 	bne	r17,r16,40215dc <in_pcbnotify+0x44>
      oinp = inp;
      inp = inp->inp_next;
      if (notify)
         (*notify)(oinp);
   }
}
 40215f4:	dfc00717 	ldw	ra,28(sp)
 40215f8:	dd800617 	ldw	r22,24(sp)
 40215fc:	dd400517 	ldw	r21,20(sp)
 4021600:	dd000417 	ldw	r20,16(sp)
 4021604:	dcc00317 	ldw	r19,12(sp)
 4021608:	dc800217 	ldw	r18,8(sp)
 402160c:	dc400117 	ldw	r17,4(sp)
 4021610:	dc000017 	ldw	r16,0(sp)
 4021614:	dec00804 	addi	sp,sp,32
 4021618:	f800283a 	ret
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 402161c:	40800817 	ldw	r2,32(r8)
 4021620:	103ff126 	beq	r2,zero,40215e8 <in_pcbnotify+0x50>
      if (errnum) 
         inp->inp_socket->so_error = errnum;
      oinp = inp;
      inp = inp->inp_next;
      if (notify)
         (*notify)(oinp);
 4021624:	4009883a 	mov	r4,r8
          inp->inp_socket == 0) 
      {
         inp = inp->inp_next;
         continue;
      }
      if (errnum) 
 4021628:	a000011e 	bne	r20,zero,4021630 <in_pcbnotify+0x98>
         inp->inp_socket->so_error = errnum;
 402162c:	15800615 	stw	r22,24(r2)
      oinp = inp;
      inp = inp->inp_next;
 4021630:	44000017 	ldw	r16,0(r8)
      if (notify)
 4021634:	983fed1e 	bne	r19,zero,40215ec <in_pcbnotify+0x54>
         (*notify)(oinp);
 4021638:	a83ee83a 	callr	r21
 402163c:	003feb06 	br	40215ec <in_pcbnotify+0x54>

04021640 <ifd_isset>:
int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 4021640:	29800017 	ldw	r6,0(r5)
 4021644:	30000926 	beq	r6,zero,402166c <ifd_isset+0x2c>
   {
      if (set->fd_array[i] == sock)
 4021648:	28800117 	ldw	r2,4(r5)
 402164c:	20800926 	beq	r4,r2,4021674 <ifd_isset+0x34>
 4021650:	0007883a 	mov	r3,zero
 4021654:	00000306 	br	4021664 <ifd_isset+0x24>
 4021658:	28800217 	ldw	r2,8(r5)
 402165c:	29400104 	addi	r5,r5,4
 4021660:	11000426 	beq	r2,r4,4021674 <ifd_isset+0x34>
int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 4021664:	18c00044 	addi	r3,r3,1
 4021668:	30fffb1e 	bne	r6,r3,4021658 <ifd_isset+0x18>
 402166c:	0005883a 	mov	r2,zero
   {
      if (set->fd_array[i] == sock)
         return TRUE;
   }
   return FALSE;
}
 4021670:	f800283a 	ret
int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 4021674:	00800044 	movi	r2,1
 4021678:	f800283a 	ret

0402167c <ifd_get>:
 */

long
ifd_get(unsigned i, fd_set *set)
{
   if (i < set->fd_count)
 402167c:	28c00017 	ldw	r3,0(r5)
      return set->fd_array[i];
 4021680:	2105883a 	add	r2,r4,r4
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
 4021684:	deffff04 	addi	sp,sp,-4
   if (i < set->fd_count)
      return set->fd_array[i];
 4021688:	1085883a 	add	r2,r2,r2
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
 402168c:	dfc00015 	stw	ra,0(sp)
   if (i < set->fd_count)
      return set->fd_array[i];
 4021690:	1145883a 	add	r2,r2,r5
 */

long
ifd_get(unsigned i, fd_set *set)
{
   if (i < set->fd_count)
 4021694:	20c0042e 	bgeu	r4,r3,40216a8 <ifd_get+0x2c>
      return set->fd_array[i];
 4021698:	10800117 	ldw	r2,4(r2)
#ifdef NPDEBUG
      dtrap();
#endif
      return INVALID_SOCKET;
   }
}
 402169c:	dfc00017 	ldw	ra,0(sp)
 40216a0:	dec00104 	addi	sp,sp,4
 40216a4:	f800283a 	ret
   if (i < set->fd_count)
      return set->fd_array[i];
   else
   {
#ifdef NPDEBUG
      dtrap();
 40216a8:	401c81c0 	call	401c81c <dtrap>
 40216ac:	00bfffc4 	movi	r2,-1
 40216b0:	003ffa06 	br	402169c <ifd_get+0x20>

040216b4 <ifd_set>:
 */

void
ifd_set(long sock, fd_set *set)
{
   if (set->fd_count < FD_SETSIZE)
 40216b4:	28800017 	ldw	r2,0(r5)
      set->fd_array[set->fd_count++] = sock;
 40216b8:	1087883a 	add	r3,r2,r2
 40216bc:	18c7883a 	add	r3,r3,r3
 40216c0:	194d883a 	add	r6,r3,r5
 */

void
ifd_set(long sock, fd_set *set)
{
   if (set->fd_count < FD_SETSIZE)
 40216c4:	00c00fc4 	movi	r3,63
      set->fd_array[set->fd_count++] = sock;
 40216c8:	11c00044 	addi	r7,r2,1
 */

void
ifd_set(long sock, fd_set *set)
{
   if (set->fd_count < FD_SETSIZE)
 40216cc:	18800336 	bltu	r3,r2,40216dc <ifd_set+0x28>
      set->fd_array[set->fd_count++] = sock;
 40216d0:	31000115 	stw	r4,4(r6)
 40216d4:	29c00015 	stw	r7,0(r5)
#ifdef NPDEBUG
   else
      dtrap();
#endif
}
 40216d8:	f800283a 	ret
{
   if (set->fd_count < FD_SETSIZE)
      set->fd_array[set->fd_count++] = sock;
#ifdef NPDEBUG
   else
      dtrap();
 40216dc:	401c81c1 	jmpi	401c81c <dtrap>

040216e0 <ifd_clr>:
void
ifd_clr(long sock, fd_set *set)
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
 40216e0:	2a000017 	ldw	r8,0(r5)
 40216e4:	40000a26 	beq	r8,zero,4021710 <ifd_clr+0x30>
   {
      if (set->fd_array[i] == sock)
 40216e8:	28800117 	ldw	r2,4(r5)
 40216ec:	20801c26 	beq	r4,r2,4021760 <ifd_clr+0x80>
         {
            set->fd_array[i] = set->fd_array[i + 1];
            i++;
         }
         set->fd_count--;
         return;
 40216f0:	2807883a 	mov	r3,r5
 40216f4:	000d883a 	mov	r6,zero
 40216f8:	00000306 	br	4021708 <ifd_clr+0x28>
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
 40216fc:	18800217 	ldw	r2,8(r3)
 4021700:	18c00104 	addi	r3,r3,4
 4021704:	11000326 	beq	r2,r4,4021714 <ifd_clr+0x34>
void
ifd_clr(long sock, fd_set *set)
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
 4021708:	31800044 	addi	r6,r6,1
 402170c:	323ffb1e 	bne	r6,r8,40216fc <ifd_clr+0x1c>
         return;
      }
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
 4021710:	401c81c1 	jmpi	401c81c <dtrap>
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
 4021714:	32400044 	addi	r9,r6,1
      {
         while (i + 1 < set->fd_count)
 4021718:	4a000e2e 	bgeu	r9,r8,4021754 <ifd_clr+0x74>
 402171c:	4a45883a 	add	r2,r9,r9
 4021720:	1085883a 	add	r2,r2,r2
 4021724:	10800104 	addi	r2,r2,4
 4021728:	288f883a 	add	r7,r5,r2
         {
            set->fd_array[i] = set->fd_array[i + 1];
 402172c:	3185883a 	add	r2,r6,r6
 4021730:	39000017 	ldw	r4,0(r7)
 4021734:	1085883a 	add	r2,r2,r2
 4021738:	1145883a 	add	r2,r2,r5

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
      {
         while (i + 1 < set->fd_count)
 402173c:	48c00044 	addi	r3,r9,1
 4021740:	480d883a 	mov	r6,r9
         {
            set->fd_array[i] = set->fd_array[i + 1];
 4021744:	11000115 	stw	r4,4(r2)

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
      {
         while (i + 1 < set->fd_count)
 4021748:	1813883a 	mov	r9,r3
 402174c:	39c00104 	addi	r7,r7,4
 4021750:	1a3ff636 	bltu	r3,r8,402172c <ifd_clr+0x4c>
         {
            set->fd_array[i] = set->fd_array[i + 1];
            i++;
         }
         set->fd_count--;
 4021754:	423fffc4 	addi	r8,r8,-1
 4021758:	2a000015 	stw	r8,0(r5)
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
#endif
}
 402175c:	f800283a 	ret
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
 4021760:	000d883a 	mov	r6,zero
 4021764:	02400044 	movi	r9,1
 4021768:	003feb06 	br	4021718 <ifd_clr+0x38>

0402176c <tcp_notify>:
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
 402176c:	defffe04 	addi	sp,sp,-8
 4021770:	dc400015 	stw	r17,0(sp)
 4021774:	2023883a 	mov	r17,r4
   tcp_wakeup(&inp->inp_socket->so_timeo);
 4021778:	21000817 	ldw	r4,32(r4)
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
 402177c:	dfc00115 	stw	ra,4(sp)
   tcp_wakeup(&inp->inp_socket->so_timeo);
 4021780:	21000904 	addi	r4,r4,36
 4021784:	401a4380 	call	401a438 <tcp_wakeup>
   sorwakeup(inp->inp_socket);
 4021788:	89000817 	ldw	r4,32(r17)
 402178c:	21400a04 	addi	r5,r4,40
 4021790:	40211d80 	call	40211d8 <sbwakeup>
   sowwakeup(inp->inp_socket);
 4021794:	89000817 	ldw	r4,32(r17)
 4021798:	21401204 	addi	r5,r4,72
}
 402179c:	dfc00117 	ldw	ra,4(sp)
 40217a0:	dc400017 	ldw	r17,0(sp)
 40217a4:	dec00204 	addi	sp,sp,8
void
tcp_notify(struct inpcb * inp)
{
   tcp_wakeup(&inp->inp_socket->so_timeo);
   sorwakeup(inp->inp_socket);
   sowwakeup(inp->inp_socket);
 40217a8:	40211d81 	jmpi	40211d8 <sbwakeup>

040217ac <sock_select>:
sock_select(long sock, int flag)
{
   struct socket *   so;
   int   ready =  0;

   so = LONG2SO(sock);
 40217ac:	213ff804 	addi	r4,r4,-32
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
 40217b0:	deffff04 	addi	sp,sp,-4
   struct socket *   so;
   int   ready =  0;

   so = LONG2SO(sock);
 40217b4:	2109883a 	add	r4,r4,r4

   switch (flag) 
 40217b8:	00800044 	movi	r2,1
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
 40217bc:	dfc00015 	stw	ra,0(sp)
   struct socket *   so;
   int   ready =  0;

   so = LONG2SO(sock);
 40217c0:	2109883a 	add	r4,r4,r4

   switch (flag) 
 40217c4:	28801826 	beq	r5,r2,4021828 <sock_select+0x7c>
 40217c8:	00800084 	movi	r2,2
 40217cc:	28802226 	beq	r5,r2,4021858 <sock_select+0xac>
 40217d0:	28000526 	beq	r5,zero,40217e8 <sock_select+0x3c>
          (so->so_error != EWOULDBLOCK))
      {
         ready = 1;
         break;
      }
      sbselqueue(&so->so_rcv);
 40217d4:	0007883a 	mov	r3,zero
      break;
   }

   return ready;
}
 40217d8:	1805883a 	mov	r2,r3
 40217dc:	dfc00017 	ldw	ra,0(sp)
 40217e0:	dec00104 	addi	sp,sp,4
 40217e4:	f800283a 	ret
      }
      sbselqueue (&so->so_snd);
      break;

   case 0:
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
 40217e8:	20801a17 	ldw	r2,104(r4)
 40217ec:	1000091e 	bne	r2,zero,4021814 <sock_select+0x68>
 40217f0:	2080088b 	ldhu	r2,34(r4)
 40217f4:	1080100c 	andi	r2,r2,64
 40217f8:	1000061e 	bne	r2,zero,4021814 <sock_select+0x68>
      {
         ready = 1;
         break;
      }
      if (so->so_error &&
 40217fc:	20c00617 	ldw	r3,24(r4)
 4021800:	18002626 	beq	r3,zero,402189c <sock_select+0xf0>
 4021804:	00801dc4 	movi	r2,119
 4021808:	18802426 	beq	r3,r2,402189c <sock_select+0xf0>
 402180c:	008002c4 	movi	r2,11
 4021810:	18802226 	beq	r3,r2,402189c <sock_select+0xf0>
          (so->so_error != EWOULDBLOCK))
      {
         ready = 1;
         break;
      }
      sbselqueue(&so->so_rcv);
 4021814:	00c00044 	movi	r3,1
      break;
   }

   return ready;
}
 4021818:	1805883a 	mov	r2,r3
 402181c:	dfc00017 	ldw	ra,0(sp)
 4021820:	dec00104 	addi	sp,sp,4
 4021824:	f800283a 	ret

   switch (flag) 
   {
   case SOREAD:
      /* can we read something from so? */
      if (so->so_rcv.sb_cc)
 4021828:	20800a17 	ldw	r2,40(r4)
 402182c:	103ff91e 	bne	r2,zero,4021814 <sock_select+0x68>
      {
         ready = 1;
         break;
      }
      if (so->so_state & SS_CANTRCVMORE)
 4021830:	2080088b 	ldhu	r2,34(r4)
 4021834:	1080080c 	andi	r2,r2,32
 4021838:	103ff61e 	bne	r2,zero,4021814 <sock_select+0x68>
      {  ready = 1;
         break;
      }
      if (so->so_qlen)  /* attach is ready */
 402183c:	20801e47 	ldb	r2,121(r4)
 4021840:	103ff41e 	bne	r2,zero,4021814 <sock_select+0x68>
         }
      }
#endif   /* TCP_ZEROCOPY */

      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
 4021844:	2080110b 	ldhu	r2,68(r4)
 4021848:	0007883a 	mov	r3,zero
 402184c:	10800214 	ori	r2,r2,8
 4021850:	2080110d 	sth	r2,68(r4)
 4021854:	003fe006 	br	40217d8 <sock_select+0x2c>
      break;

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
 4021858:	21801317 	ldw	r6,76(r4)
 402185c:	20c01217 	ldw	r3,72(r4)
 4021860:	30c5c83a 	sub	r2,r6,r3
 4021864:	10000a16 	blt	r2,zero,4021890 <sock_select+0xe4>
 4021868:	30c00926 	beq	r6,r3,4021890 <sock_select+0xe4>
 402186c:	2180088b 	ldhu	r6,34(r4)
 4021870:	3144703a 	and	r2,r6,r5
 4021874:	103fe71e 	bne	r2,zero,4021814 <sock_select+0x68>
 4021878:	20c00217 	ldw	r3,8(r4)
 402187c:	1880010b 	ldhu	r2,4(r3)
 4021880:	1080010c 	andi	r2,r2,4
 4021884:	103fe326 	beq	r2,zero,4021814 <sock_select+0x68>
 4021888:	3080040c 	andi	r2,r6,16
 402188c:	103fe11e 	bne	r2,zero,4021814 <sock_select+0x68>
           ((so)->so_state & SS_CANTSENDMORE)))
      {
         ready = 1;
         break;
      }
      sbselqueue (&so->so_snd);
 4021890:	21001204 	addi	r4,r4,72
 4021894:	4020ad80 	call	4020ad8 <sbselqueue>
 4021898:	003fce06 	br	40217d4 <sock_select+0x28>
          (so->so_error != EWOULDBLOCK))
      {
         ready = 1;
         break;
      }
      sbselqueue(&so->so_rcv);
 402189c:	21000a04 	addi	r4,r4,40
 40218a0:	4020ad80 	call	4020ad8 <sbselqueue>
 40218a4:	003fcb06 	br	40217d4 <sock_select+0x28>

040218a8 <sock_selscan>:
 * RETURNS: 
 */

int
sock_selscan(fd_set * ibits, fd_set * obits)
{
 40218a8:	defff804 	addi	sp,sp,-32
 40218ac:	dd800615 	stw	r22,24(sp)
 40218b0:	dd400515 	stw	r21,20(sp)
 40218b4:	dd000415 	stw	r20,16(sp)
 40218b8:	dcc00315 	stw	r19,12(sp)
 40218bc:	dc800215 	stw	r18,8(sp)
 40218c0:	dfc00715 	stw	ra,28(sp)
 40218c4:	dc400115 	stw	r17,4(sp)
 40218c8:	dc000015 	stw	r16,0(sp)
 40218cc:	2025883a 	mov	r18,r4
 40218d0:	2827883a 	mov	r19,r5
 40218d4:	002b883a 	mov	r21,zero
 40218d8:	002d883a 	mov	r22,zero
 40218dc:	0029883a 	mov	r20,zero
   int   flag  =  0;
   int   num_sel  =  0;

   for (which = 0; which < 3; which++)
   {
      switch (which)
 40218e0:	00c00044 	movi	r3,1
 40218e4:	a8c02826 	beq	r21,r3,4021988 <sock_selscan+0xe0>
 40218e8:	00800084 	movi	r2,2
 40218ec:	a8802826 	beq	r21,r2,4021990 <sock_selscan+0xe8>
 40218f0:	a800011e 	bne	r21,zero,40218f8 <sock_selscan+0x50>
 40218f4:	182d883a 	mov	r22,r3
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
 40218f8:	90800017 	ldw	r2,0(r18)
 40218fc:	0080120e 	bge	zero,r2,4021948 <sock_selscan+0xa0>
 4021900:	9021883a 	mov	r16,r18
 4021904:	0023883a 	mov	r17,zero
 4021908:	00000306 	br	4021918 <sock_selscan+0x70>
 402190c:	90800017 	ldw	r2,0(r18)
 4021910:	84000104 	addi	r16,r16,4
 4021914:	88800c0e 	bge	r17,r2,4021948 <sock_selscan+0xa0>
      {
         if (sock_select (in->fd_array[sock], flag))
 4021918:	81000117 	ldw	r4,4(r16)
 402191c:	b00b883a 	mov	r5,r22
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
 4021920:	8c400044 	addi	r17,r17,1
      {
         if (sock_select (in->fd_array[sock], flag))
 4021924:	40217ac0 	call	40217ac <sock_select>
         {
            FD_SET(in->fd_array[sock], out);
 4021928:	980b883a 	mov	r5,r19
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
      {
         if (sock_select (in->fd_array[sock], flag))
 402192c:	103ff726 	beq	r2,zero,402190c <sock_selscan+0x64>
         {
            FD_SET(in->fd_array[sock], out);
 4021930:	81000117 	ldw	r4,4(r16)
            num_sel++;
 4021934:	a5000044 	addi	r20,r20,1
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
 4021938:	84000104 	addi	r16,r16,4
      {
         if (sock_select (in->fd_array[sock], flag))
         {
            FD_SET(in->fd_array[sock], out);
 402193c:	40216b40 	call	40216b4 <ifd_set>
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
 4021940:	90800017 	ldw	r2,0(r18)
 4021944:	88bff416 	blt	r17,r2,4021918 <sock_selscan+0x70>
   int   which;
   int   sock;
   int   flag  =  0;
   int   num_sel  =  0;

   for (which = 0; which < 3; which++)
 4021948:	ad400044 	addi	r21,r21,1
 402194c:	008000c4 	movi	r2,3
 4021950:	94804104 	addi	r18,r18,260
 4021954:	9cc04104 	addi	r19,r19,260
 4021958:	a8bfe11e 	bne	r21,r2,40218e0 <sock_selscan+0x38>
            num_sel++;
         }
      }
   }
   return num_sel;
}
 402195c:	a005883a 	mov	r2,r20
 4021960:	dfc00717 	ldw	ra,28(sp)
 4021964:	dd800617 	ldw	r22,24(sp)
 4021968:	dd400517 	ldw	r21,20(sp)
 402196c:	dd000417 	ldw	r20,16(sp)
 4021970:	dcc00317 	ldw	r19,12(sp)
 4021974:	dc800217 	ldw	r18,8(sp)
 4021978:	dc400117 	ldw	r17,4(sp)
 402197c:	dc000017 	ldw	r16,0(sp)
 4021980:	dec00804 	addi	sp,sp,32
 4021984:	f800283a 	ret
   for (which = 0; which < 3; which++)
   {
      switch (which)
      {
      case 0:
         flag = SOREAD; break;
 4021988:	05800084 	movi	r22,2
 402198c:	003fda06 	br	40218f8 <sock_selscan+0x50>
   int   flag  =  0;
   int   num_sel  =  0;

   for (which = 0; which < 3; which++)
   {
      switch (which)
 4021990:	002d883a 	mov	r22,zero
 4021994:	003fd806 	br	40218f8 <sock_selscan+0x50>

04021998 <t_select>:
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
 4021998:	defe6b04 	addi	sp,sp,-1620
 402199c:	ddc19215 	stw	r23,1608(sp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;

   MEMSET(&obits, 0, sizeof(obits));
 40219a0:	ddc0c304 	addi	r23,sp,780
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
 40219a4:	df019315 	stw	fp,1612(sp)
 40219a8:	d9418615 	stw	r5,1560(sp)
 40219ac:	2039883a 	mov	fp,r4
 40219b0:	d9818715 	stw	r6,1564(sp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;

   MEMSET(&obits, 0, sizeof(obits));
 40219b4:	000b883a 	mov	r5,zero
 40219b8:	0180c304 	movi	r6,780
 40219bc:	b809883a 	mov	r4,r23
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
 40219c0:	dfc19415 	stw	ra,1616(sp)
 40219c4:	dc418c15 	stw	r17,1584(sp)
 40219c8:	dd819115 	stw	r22,1604(sp)
 40219cc:	3823883a 	mov	r17,r7
 40219d0:	dd419015 	stw	r21,1600(sp)
 40219d4:	dd018f15 	stw	r20,1596(sp)
 40219d8:	dcc18e15 	stw	r19,1592(sp)
 40219dc:	dc818d15 	stw	r18,1588(sp)
 40219e0:	dc018b15 	stw	r16,1580(sp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;

   MEMSET(&obits, 0, sizeof(obits));
 40219e4:	40026a00 	call	40026a0 <memset>
   MEMSET(&ibits, 0, sizeof(ibits));

   if (in)
 40219e8:	e005003a 	cmpeq	r2,fp,zero
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;

   MEMSET(&obits, 0, sizeof(obits));
   MEMSET(&ibits, 0, sizeof(ibits));
 40219ec:	d809883a 	mov	r4,sp
 40219f0:	000b883a 	mov	r5,zero
 40219f4:	0180c304 	movi	r6,780

   if (in)
 40219f8:	d8818815 	stw	r2,1568(sp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;

   MEMSET(&obits, 0, sizeof(obits));
   MEMSET(&ibits, 0, sizeof(ibits));
 40219fc:	40026a00 	call	40026a0 <memset>

   if (in)
 4021a00:	d8818817 	ldw	r2,1568(sp)
 4021a04:	1000041e 	bne	r2,zero,4021a18 <t_select+0x80>
      MEMCPY(&ibits[0], in, sizeof(fd_set));
 4021a08:	d809883a 	mov	r4,sp
 4021a0c:	e00b883a 	mov	r5,fp
 4021a10:	01804104 	movi	r6,260
 4021a14:	40096480 	call	4009648 <memcpy>
   if (out)
 4021a18:	d8818617 	ldw	r2,1560(sp)
 4021a1c:	1005003a 	cmpeq	r2,r2,zero
 4021a20:	d8818915 	stw	r2,1572(sp)
 4021a24:	1000041e 	bne	r2,zero,4021a38 <t_select+0xa0>
      MEMCPY(&ibits[1], out, sizeof(fd_set));
 4021a28:	d9418617 	ldw	r5,1560(sp)
 4021a2c:	d9004104 	addi	r4,sp,260
 4021a30:	01804104 	movi	r6,260
 4021a34:	40096480 	call	4009648 <memcpy>
   if (ex)
 4021a38:	d8818717 	ldw	r2,1564(sp)
 4021a3c:	1005003a 	cmpeq	r2,r2,zero
 4021a40:	d8818a15 	stw	r2,1576(sp)
 4021a44:	1000041e 	bne	r2,zero,4021a58 <t_select+0xc0>
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
 4021a48:	d9418717 	ldw	r5,1564(sp)
 4021a4c:	d9008204 	addi	r4,sp,520
 4021a50:	01804104 	movi	r6,260
 4021a54:	40096480 	call	4009648 <memcpy>
   tmo = cticks + tv;
 4021a58:	05810134 	movhi	r22,1028
 4021a5c:	b5a93304 	addi	r22,r22,-23348
 4021a60:	b0800017 	ldw	r2,0(r22)

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 4021a64:	d8c00017 	ldw	r3,0(sp)
      MEMCPY(&ibits[0], in, sizeof(fd_set));
   if (out)
      MEMCPY(&ibits[1], out, sizeof(fd_set));
   if (ex)
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
   tmo = cticks + tv;
 4021a68:	88a5883a 	add	r18,r17,r2

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 4021a6c:	1800021e 	bne	r3,zero,4021a78 <t_select+0xe0>
 4021a70:	d8804117 	ldw	r2,260(sp)
 4021a74:	10003526 	beq	r2,zero,4021b4c <t_select+0x1b4>

      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
 4021a78:	0009883a 	mov	r4,zero
 4021a7c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
 4021a80:	057fffc4 	movi	r21,-1
 4021a84:	05010134 	movhi	r20,1028
 4021a88:	a5293b04 	addi	r20,r20,-23316
 4021a8c:	04c00044 	movi	r19,1
 4021a90:	00000506 	br	4021aa8 <t_select+0x110>
      while ((retval = sock_selscan(ibits, obits)) == 0)
      {
         if (tv != -1L) 
 4021a94:	8d400226 	beq	r17,r21,4021aa0 <t_select+0x108>
         {
            if (tmo <= cticks)
 4021a98:	b0800017 	ldw	r2,0(r22)
 4021a9c:	1480332e 	bgeu	r2,r18,4021b6c <t_select+0x1d4>
               break;
         }
         select_wait = 1;
 4021aa0:	a4c0000d 	sth	r19,0(r20)
         tcp_sleep (&select_wait);
 4021aa4:	401a4c00 	call	401a4c0 <tcp_sleep>
      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
      while ((retval = sock_selscan(ibits, obits)) == 0)
 4021aa8:	d809883a 	mov	r4,sp
 4021aac:	b80b883a 	mov	r5,r23
 4021ab0:	40218a80 	call	40218a8 <sock_selscan>
 4021ab4:	1021883a 	mov	r16,r2
         {
            if (tmo <= cticks)
               break;
         }
         select_wait = 1;
         tcp_sleep (&select_wait);
 4021ab8:	01010134 	movhi	r4,1028
 4021abc:	21293b04 	addi	r4,r4,-23316
      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
      while ((retval = sock_selscan(ibits, obits)) == 0)
 4021ac0:	103ff426 	beq	r2,zero,4021a94 <t_select+0xfc>
               break;
         }
         select_wait = 1;
         tcp_sleep (&select_wait);
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
 4021ac4:	0009883a 	mov	r4,zero
 4021ac8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   }

   if (retval >= 0)
 4021acc:	80001216 	blt	r16,zero,4021b18 <t_select+0x180>
   {
      if (in)
 4021ad0:	d8818817 	ldw	r2,1568(sp)
 4021ad4:	1000041e 	bne	r2,zero,4021ae8 <t_select+0x150>
         MEMCPY(in, &obits[0], sizeof(fd_set));
 4021ad8:	e009883a 	mov	r4,fp
 4021adc:	b80b883a 	mov	r5,r23
 4021ae0:	01804104 	movi	r6,260
 4021ae4:	40096480 	call	4009648 <memcpy>
      if (out)
 4021ae8:	d8818917 	ldw	r2,1572(sp)
 4021aec:	1000041e 	bne	r2,zero,4021b00 <t_select+0x168>
         MEMCPY(out, &obits[1], sizeof(fd_set));
 4021af0:	d9018617 	ldw	r4,1560(sp)
 4021af4:	b9404104 	addi	r5,r23,260
 4021af8:	01804104 	movi	r6,260
 4021afc:	40096480 	call	4009648 <memcpy>
      if (ex)
 4021b00:	d8818a17 	ldw	r2,1576(sp)
 4021b04:	1000041e 	bne	r2,zero,4021b18 <t_select+0x180>
         MEMCPY(ex, &obits[2], sizeof(fd_set));
 4021b08:	d9018717 	ldw	r4,1564(sp)
 4021b0c:	b9408204 	addi	r5,r23,520
 4021b10:	01804104 	movi	r6,260
 4021b14:	40096480 	call	4009648 <memcpy>
   }
   return retval;
}
 4021b18:	8005883a 	mov	r2,r16
 4021b1c:	dfc19417 	ldw	ra,1616(sp)
 4021b20:	df019317 	ldw	fp,1612(sp)
 4021b24:	ddc19217 	ldw	r23,1608(sp)
 4021b28:	dd819117 	ldw	r22,1604(sp)
 4021b2c:	dd419017 	ldw	r21,1600(sp)
 4021b30:	dd018f17 	ldw	r20,1596(sp)
 4021b34:	dcc18e17 	ldw	r19,1592(sp)
 4021b38:	dc818d17 	ldw	r18,1588(sp)
 4021b3c:	dc418c17 	ldw	r17,1584(sp)
 4021b40:	dc018b17 	ldw	r16,1580(sp)
 4021b44:	dec19504 	addi	sp,sp,1620
 4021b48:	f800283a 	ret
   if (ex)
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
   tmo = cticks + tv;

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 4021b4c:	d8808217 	ldw	r2,520(sp)
 4021b50:	103fc91e 	bne	r2,zero,4021a78 <t_select+0xe0>
       (ibits[2].fd_count == 0))
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
 4021b54:	0440030e 	bge	zero,r17,4021b64 <t_select+0x1cc>
         while (tmo > cticks)
         {
            tk_yield();
         }
#else
         TK_SLEEP(tv);
 4021b58:	89000044 	addi	r4,r17,1
 4021b5c:	213fffcc 	andi	r4,r4,65535
 4021b60:	4012fd00 	call	4012fd0 <OSTimeDly>
      if (in)
         MEMCPY(in, &obits[0], sizeof(fd_set));
      if (out)
         MEMCPY(out, &obits[1], sizeof(fd_set));
      if (ex)
         MEMCPY(ex, &obits[2], sizeof(fd_set));
 4021b64:	0021883a 	mov	r16,zero
 4021b68:	003fd906 	br	4021ad0 <t_select+0x138>
               break;
         }
         select_wait = 1;
         tcp_sleep (&select_wait);
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
 4021b6c:	0009883a 	mov	r4,zero
 4021b70:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4021b74:	003fd606 	br	4021ad0 <t_select+0x138>

04021b78 <ip4_tcpmss>:
int
ip4_tcpmss(struct socket * so)
{
   NET ifp;

   ifp = so->so_pcb->ifp;
 4021b78:	20800117 	ldw	r2,4(r4)
 4021b7c:	10c00a17 	ldw	r3,40(r2)
 4021b80:	19000817 	ldw	r4,32(r3)
 4021b84:	18800917 	ldw	r2,36(r3)
 4021b88:	1105c83a 	sub	r2,r2,r4
   return(ifp->n_mtu - (40 + ifp->n_lnh));
}
 4021b8c:	10bff604 	addi	r2,r2,-40
 4021b90:	f800283a 	ret

04021b94 <tcp_mss>:
 */


int
tcp_mss(struct socket * so)
{
 4021b94:	defffe04 	addi	sp,sp,-8
 4021b98:	dfc00115 	stw	ra,4(sp)
 4021b9c:	dc000015 	stw	r16,0(sp)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
 4021ba0:	2000221e 	bne	r4,zero,4021c2c <tcp_mss+0x98>
       (so->so_pcb == NULL) ||
       (so->so_pcb->ifp == NULL))
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
 4021ba4:	20c00517 	ldw	r3,20(r4)
 4021ba8:	00800084 	movi	r2,2
 4021bac:	18801926 	beq	r3,r2,4021c14 <tcp_mss+0x80>
 4021bb0:	24000117 	ldw	r16,4(r4)
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
 4021bb4:	4021b780 	call	4021b78 <ip4_tcpmss>
   if (mss > TCP_MSS)    /* check upper limit from compile */
      mss = TCP_MSS;

   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
 4021bb8:	80c00917 	ldw	r3,36(r16)
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
 4021bbc:	1009883a 	mov	r4,r2
   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
 4021bc0:	18800b0b 	ldhu	r2,44(r3)
 4021bc4:	1081000c 	andi	r2,r2,1024
 4021bc8:	10000c1e 	bne	r2,zero,4021bfc <tcp_mss+0x68>
      return tp->t_maxseg;    /* yup */
 4021bcc:	00816d04 	movi	r2,1460
 4021bd0:	1100010e 	bge	r2,r4,4021bd8 <tcp_mss+0x44>
 4021bd4:	1009883a 	mov	r4,r2
      
   if (tp->t_maxseg && (mss > tp->t_maxseg))  /* check tcp's mss */
 4021bd8:	18800a0b 	ldhu	r2,40(r3)
 4021bdc:	10000826 	beq	r2,zero,4021c00 <tcp_mss+0x6c>
 4021be0:	1100070e 	bge	r2,r4,4021c00 <tcp_mss+0x6c>
 4021be4:	1009883a 	mov	r4,r2
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
   }

   return mss;
}
 4021be8:	2005883a 	mov	r2,r4
 4021bec:	dfc00117 	ldw	ra,4(sp)
 4021bf0:	dc000017 	ldw	r16,0(sp)
 4021bf4:	dec00204 	addi	sp,sp,8
 4021bf8:	f800283a 	ret
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
      return tp->t_maxseg;    /* yup */
 4021bfc:	19000a0b 	ldhu	r4,40(r3)
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
   }

   return mss;
}
 4021c00:	2005883a 	mov	r2,r4
 4021c04:	dfc00117 	ldw	ra,4(sp)
 4021c08:	dc000017 	ldw	r16,0(sp)
 4021c0c:	dec00204 	addi	sp,sp,8
 4021c10:	f800283a 	ret

   if ((so == NULL) ||
       (so->so_pcb == NULL) ||
       (so->so_pcb->ifp == NULL))
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
 4021c14:	01016d04 	movi	r4,1460
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
   }

   return mss;
}
 4021c18:	2005883a 	mov	r2,r4
 4021c1c:	dfc00117 	ldw	ra,4(sp)
 4021c20:	dc000017 	ldw	r16,0(sp)
 4021c24:	dec00204 	addi	sp,sp,8
 4021c28:	f800283a 	ret
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
 4021c2c:	24000117 	ldw	r16,4(r4)
 4021c30:	803fdc26 	beq	r16,zero,4021ba4 <tcp_mss+0x10>
 4021c34:	80800a17 	ldw	r2,40(r16)
 4021c38:	103fde1e 	bne	r2,zero,4021bb4 <tcp_mss+0x20>
 4021c3c:	003fd906 	br	4021ba4 <tcp_mss+0x10>

04021c40 <tcp_xmit_timer>:
{
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
 4021c40:	20801e17 	ldw	r2,120(r4)
 * RETURNS: 
 */

void
tcp_xmit_timer(struct tcpcb * tp)
{
 4021c44:	200d883a 	mov	r6,r4
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
 4021c48:	10003b26 	beq	r2,zero,4021d38 <tcp_xmit_timer+0xf8>
#endif

   tcpstat.tcps_rttupdated++;
 4021c4c:	01410134 	movhi	r5,1028
 4021c50:	294d2b04 	addi	r5,r5,13484
 4021c54:	28800717 	ldw	r2,28(r5)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
 4021c58:	00c10134 	movhi	r3,1028
 4021c5c:	18e93304 	addi	r3,r3,-23348
 4021c60:	19000017 	ldw	r4,0(r3)

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
#endif

   tcpstat.tcps_rttupdated++;
 4021c64:	10800044 	addi	r2,r2,1
 4021c68:	28800715 	stw	r2,28(r5)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
 4021c6c:	30c01e17 	ldw	r3,120(r6)
   if(tp->t_srtt != 0)
 4021c70:	31402017 	ldw	r5,128(r6)
#endif

   tcpstat.tcps_rttupdated++;

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
 4021c74:	00800c84 	movi	r2,50
 4021c78:	20c9c83a 	sub	r4,r4,r3
 4021c7c:	2085203a 	divu	r2,r4,r2

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
#endif

   tcpstat.tcps_rttupdated++;
 4021c80:	01c00044 	movi	r7,1

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
   if(tp->t_srtt != 0)
 4021c84:	2800161e 	bne	r5,zero,4021ce0 <tcp_xmit_timer+0xa0>
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
 4021c88:	0080370e 	bge	zero,r2,4021d68 <tcp_xmit_timer+0x128>
 4021c8c:	100690fa 	slli	r3,r2,3
 4021c90:	1085883a 	add	r2,r2,r2
         rtt = 1;
      tp->t_srtt = rtt << 3;
 4021c94:	180b883a 	mov	r5,r3
 4021c98:	31402015 	stw	r5,128(r6)
      tp->t_rttvar = rtt << 1;
 4021c9c:	1007883a 	mov	r3,r2
 4021ca0:	30802115 	stw	r2,132(r6)
   }
   tp->t_rttick = 0;       /* clear RT timer */
   tp->t_rxtshift = 0;
   TCPT_RANGESET(tp->t_rxtcur, 
 4021ca4:	2805d0ba 	srai	r2,r5,2
      if(rtt < 1)
         rtt = 1;
      tp->t_srtt = rtt << 3;
      tp->t_rttvar = rtt << 1;
   }
   tp->t_rttick = 0;       /* clear RT timer */
 4021ca8:	30001e15 	stw	zero,120(r6)
   tp->t_rxtshift = 0;
 4021cac:	30000715 	stw	zero,28(r6)
   TCPT_RANGESET(tp->t_rxtcur, 
 4021cb0:	10c5883a 	add	r2,r2,r3
 4021cb4:	1005d07a 	srai	r2,r2,1
 4021cb8:	10ffffcc 	andi	r3,r2,65535
 4021cbc:	18e0001c 	xori	r3,r3,32768
 4021cc0:	18e00004 	addi	r3,r3,-32768
 4021cc4:	00800044 	movi	r2,1
 4021cc8:	30c00815 	stw	r3,32(r6)
 4021ccc:	10c0230e 	bge	r2,r3,4021d5c <tcp_xmit_timer+0x11c>
 4021cd0:	00802004 	movi	r2,128
 4021cd4:	10c0010e 	bge	r2,r3,4021cdc <tcp_xmit_timer+0x9c>
 4021cd8:	30800815 	stw	r2,32(r6)
 4021cdc:	f800283a 	ret

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
   if(tp->t_srtt != 0)
   {
      if(rtt == 0)      /* fast path for small round trip */
 4021ce0:	10001626 	beq	r2,zero,4021d3c <tcp_xmit_timer+0xfc>
       * The following magic is equivalent
       * to the smoothing algorithm in rfc793
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
 4021ce4:	2807d0fa 	srai	r3,r5,3
 4021ce8:	10bfffc4 	addi	r2,r2,-1
 4021cec:	1085883a 	add	r2,r2,r2
 4021cf0:	1085883a 	add	r2,r2,r2
 4021cf4:	10c5c83a 	sub	r2,r2,r3
      if ((tp->t_srtt += delta) <= 0)
 4021cf8:	288b883a 	add	r5,r5,r2
 4021cfc:	31402015 	stw	r5,128(r6)
 4021d00:	01401c0e 	bge	zero,r5,4021d74 <tcp_xmit_timer+0x134>
         tp->t_srtt = 1;
 4021d04:	1009883a 	mov	r4,r2
 4021d08:	10002016 	blt	r2,zero,4021d8c <tcp_xmit_timer+0x14c>
       * (rttvar = rttvar*3/4 + |delta| / 4).
       * This replaces rfc793's wired-in beta.
       */
      if (delta < 0)
         delta = -delta;
      delta -= (short)(tp->t_rttvar >> 1);
 4021d0c:	30c02117 	ldw	r3,132(r6)
      if ((tp->t_rttvar += delta) <= 0)
 4021d10:	1805d07a 	srai	r2,r3,1
 4021d14:	10bfffcc 	andi	r2,r2,65535
 4021d18:	10a0001c 	xori	r2,r2,32768
 4021d1c:	10a00004 	addi	r2,r2,-32768
 4021d20:	2085c83a 	sub	r2,r4,r2
 4021d24:	1887883a 	add	r3,r3,r2
 4021d28:	30c02115 	stw	r3,132(r6)
 4021d2c:	00c0130e 	bge	zero,r3,4021d7c <tcp_xmit_timer+0x13c>
 4021d30:	31402017 	ldw	r5,128(r6)
 4021d34:	003fdb06 	br	4021ca4 <tcp_xmit_timer+0x64>
{
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
 4021d38:	401c81c1 	jmpi	401c81c <dtrap>
   if(tp->t_srtt != 0)
   {
      if(rtt == 0)      /* fast path for small round trip */
      {
         /* if either the rtt or varience is over 1, reduce it. */
         if(tp->t_srtt > 1)
 4021d3c:	3940020e 	bge	r7,r5,4021d48 <tcp_xmit_timer+0x108>
            tp->t_srtt--;
 4021d40:	297fffc4 	addi	r5,r5,-1
 4021d44:	31402015 	stw	r5,128(r6)
         if(tp->t_rttvar > 1)
 4021d48:	30c02117 	ldw	r3,132(r6)
 4021d4c:	38ffd50e 	bge	r7,r3,4021ca4 <tcp_xmit_timer+0x64>
            tp->t_rttvar--;
 4021d50:	18ffffc4 	addi	r3,r3,-1
 4021d54:	30c02115 	stw	r3,132(r6)
 4021d58:	003fd206 	br	4021ca4 <tcp_xmit_timer+0x64>
      tp->t_srtt = rtt << 3;
      tp->t_rttvar = rtt << 1;
   }
   tp->t_rttick = 0;       /* clear RT timer */
   tp->t_rxtshift = 0;
   TCPT_RANGESET(tp->t_rxtcur, 
 4021d5c:	00800084 	movi	r2,2
 4021d60:	30800815 	stw	r2,32(r6)
 4021d64:	f800283a 	ret
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
 4021d68:	00c00204 	movi	r3,8
 4021d6c:	00800084 	movi	r2,2
 4021d70:	003fc806 	br	4021c94 <tcp_xmit_timer+0x54>
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
      if ((tp->t_srtt += delta) <= 0)
         tp->t_srtt = 1;
 4021d74:	31c02015 	stw	r7,128(r6)
 4021d78:	003fe206 	br	4021d04 <tcp_xmit_timer+0xc4>
 4021d7c:	31402017 	ldw	r5,128(r6)
       */
      if (delta < 0)
         delta = -delta;
      delta -= (short)(tp->t_rttvar >> 1);
      if ((tp->t_rttvar += delta) <= 0)
         tp->t_rttvar = 1;
 4021d80:	3807883a 	mov	r3,r7
 4021d84:	31c02115 	stw	r7,132(r6)
 4021d88:	003fc606 	br	4021ca4 <tcp_xmit_timer+0x64>
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
      if ((tp->t_srtt += delta) <= 0)
         tp->t_srtt = 1;
 4021d8c:	0089c83a 	sub	r4,zero,r2
 4021d90:	003fde06 	br	4021d0c <tcp_xmit_timer+0xcc>

04021d94 <tcp_pulloutofband>:
void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
   int   cnt   =  ti->ti_urp  -  1;
 4021d94:	2880098b 	ldhu	r2,38(r5)

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
 4021d98:	defffe04 	addi	sp,sp,-8
 4021d9c:	dc000015 	stw	r16,0(sp)
   int   cnt   =  ti->ti_urp  -  1;
 4021da0:	10bfffc4 	addi	r2,r2,-1

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
 4021da4:	dfc00115 	stw	ra,4(sp)
 4021da8:	3021883a 	mov	r16,r6
   int   cnt   =  ti->ti_urp  -  1;

   /**m = dtom(ti);**/
   while (cnt >= 0) 
 4021dac:	10000d16 	blt	r2,zero,4021de4 <tcp_pulloutofband+0x50>
   {
      if (m->m_len > (unsigned)cnt) 
 4021db0:	30c00217 	ldw	r3,8(r6)
 4021db4:	100f883a 	mov	r7,r2
 4021db8:	10c01036 	bltu	r2,r3,4021dfc <tcp_pulloutofband+0x68>
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
         m->m_len--;
         return;
      }
      cnt -= m->m_len;
      m = m->m_next;
 4021dbc:	34000617 	ldw	r16,24(r6)
      if (m == 0)
 4021dc0:	80000826 	beq	r16,zero,4021de4 <tcp_pulloutofband+0x50>
         tp->t_oobflags |= TCPOOB_HAVEDATA;
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
         m->m_len--;
         return;
      }
      cnt -= m->m_len;
 4021dc4:	10c5c83a 	sub	r2,r2,r3
   struct mbuf *  m)
{
   int   cnt   =  ti->ti_urp  -  1;

   /**m = dtom(ti);**/
   while (cnt >= 0) 
 4021dc8:	10000616 	blt	r2,zero,4021de4 <tcp_pulloutofband+0x50>
   {
      if (m->m_len > (unsigned)cnt) 
 4021dcc:	80c00217 	ldw	r3,8(r16)
 4021dd0:	100f883a 	mov	r7,r2
 4021dd4:	10c00936 	bltu	r2,r3,4021dfc <tcp_pulloutofband+0x68>
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
         m->m_len--;
         return;
      }
      cnt -= m->m_len;
      m = m->m_next;
 4021dd8:	84000617 	ldw	r16,24(r16)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
         m->m_len--;
         return;
      }
      cnt -= m->m_len;
 4021ddc:	10c5c83a 	sub	r2,r2,r3
      m = m->m_next;
      if (m == 0)
 4021de0:	803ff91e 	bne	r16,zero,4021dc8 <tcp_pulloutofband+0x34>
         break;
   }
   panic("tcp_pulloutofband");
 4021de4:	010100f4 	movhi	r4,1027
 4021de8:	21150504 	addi	r4,r4,21524
}
 4021dec:	dfc00117 	ldw	ra,4(sp)
 4021df0:	dc000017 	ldw	r16,0(sp)
 4021df4:	dec00204 	addi	sp,sp,8
      cnt -= m->m_len;
      m = m->m_next;
      if (m == 0)
         break;
   }
   panic("tcp_pulloutofband");
 4021df8:	4019c441 	jmpi	4019c44 <panic>
   while (cnt >= 0) 
   {
      if (m->m_len > (unsigned)cnt) 
      {
         char *   cp =  mtod(m,  char *) +  cnt;
         struct tcpcb * tp =  sototcpcb(so);
 4021dfc:	20800117 	ldw	r2,4(r4)
   /**m = dtom(ti);**/
   while (cnt >= 0) 
   {
      if (m->m_len > (unsigned)cnt) 
      {
         char *   cp =  mtod(m,  char *) +  cnt;
 4021e00:	81000317 	ldw	r4,12(r16)
         struct tcpcb * tp =  sototcpcb(so);
 4021e04:	10c00917 	ldw	r3,36(r2)
   /**m = dtom(ti);**/
   while (cnt >= 0) 
   {
      if (m->m_len > (unsigned)cnt) 
      {
         char *   cp =  mtod(m,  char *) +  cnt;
 4021e08:	3909883a 	add	r4,r7,r4
         struct tcpcb * tp =  sototcpcb(so);

         tp->t_iobc = *cp;
 4021e0c:	21400003 	ldbu	r5,0(r4)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
 4021e10:	18802403 	ldbu	r2,144(r3)
      if (m->m_len > (unsigned)cnt) 
      {
         char *   cp =  mtod(m,  char *) +  cnt;
         struct tcpcb * tp =  sototcpcb(so);

         tp->t_iobc = *cp;
 4021e14:	19402445 	stb	r5,145(r3)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
 4021e18:	10800054 	ori	r2,r2,1
 4021e1c:	18802405 	stb	r2,144(r3)
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
 4021e20:	81800217 	ldw	r6,8(r16)
 4021e24:	21400044 	addi	r5,r4,1
 4021e28:	31cdc83a 	sub	r6,r6,r7
 4021e2c:	31bfffc4 	addi	r6,r6,-1
 4021e30:	40096480 	call	4009648 <memcpy>
         m->m_len--;
 4021e34:	80c00217 	ldw	r3,8(r16)
 4021e38:	18ffffc4 	addi	r3,r3,-1
 4021e3c:	80c00215 	stw	r3,8(r16)
      m = m->m_next;
      if (m == 0)
         break;
   }
   panic("tcp_pulloutofband");
}
 4021e40:	dfc00117 	ldw	ra,4(sp)
 4021e44:	dc000017 	ldw	r16,0(sp)
 4021e48:	dec00204 	addi	sp,sp,8
 4021e4c:	f800283a 	ret

04021e50 <tcp_dooptions>:

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 4021e50:	defff704 	addi	sp,sp,-36
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
 4021e54:	20800d17 	ldw	r2,52(r4)

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 4021e58:	dcc00315 	stw	r19,12(sp)
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
   cnt = om->m_len;
 4021e5c:	2cc00217 	ldw	r19,8(r5)

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 4021e60:	ddc00715 	stw	r23,28(sp)
 4021e64:	dd800615 	stw	r22,24(sp)
 4021e68:	dd400515 	stw	r21,20(sp)
 4021e6c:	dd000415 	stw	r20,16(sp)
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
 4021e70:	15c00817 	ldw	r23,32(r2)

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 4021e74:	dfc00815 	stw	ra,32(sp)
 4021e78:	dc800215 	stw	r18,8(sp)
 4021e7c:	dc400115 	stw	r17,4(sp)
 4021e80:	dc000015 	stw	r16,0(sp)
 4021e84:	2829883a 	mov	r20,r5
 4021e88:	202b883a 	mov	r21,r4
 4021e8c:	302d883a 	mov	r22,r6
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
 4021e90:	28800317 	ldw	r2,12(r5)
   cnt = om->m_len;
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 4021e94:	04c00f0e 	bge	zero,r19,4021ed4 <tcp_dooptions+0x84>
   {
      opt = cp[0];
      if (opt == TCPOPT_EOL)
 4021e98:	10c00003 	ldbu	r3,0(r2)
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
 4021e9c:	1025883a 	mov	r18,r2
   cnt = om->m_len;
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
   {
      opt = cp[0];
      if (opt == TCPOPT_EOL)
 4021ea0:	18000c26 	beq	r3,zero,4021ed4 <tcp_dooptions+0x84>
         break;
      if (opt == TCPOPT_NOP)
 4021ea4:	00800044 	movi	r2,1
 4021ea8:	18802826 	beq	r3,r2,4021f4c <tcp_dooptions+0xfc>
         optlen = 1;
      else 
      {
         optlen = cp[1];
 4021eac:	94400043 	ldbu	r17,1(r18)
         if (optlen <= 0)
 4021eb0:	88000826 	beq	r17,zero,4021ed4 <tcp_dooptions+0x84>
            break;
      }

      switch (opt) 
 4021eb4:	00800084 	movi	r2,2
 4021eb8:	18801226 	beq	r3,r2,4021f04 <tcp_dooptions+0xb4>
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
            continue;
         mssval = *(u_short *)(cp + 2);
         mssval = ntohs(mssval);
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
 4021ebc:	8805883a 	mov	r2,r17
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
   cnt = om->m_len;
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 4021ec0:	9c67c83a 	sub	r19,r19,r17
 4021ec4:	04c0030e 	bge	zero,r19,4021ed4 <tcp_dooptions+0x84>
 4021ec8:	90a5883a 	add	r18,r18,r2
   {
      opt = cp[0];
      if (opt == TCPOPT_EOL)
 4021ecc:	90c00003 	ldbu	r3,0(r18)
 4021ed0:	183ff41e 	bne	r3,zero,4021ea4 <tcp_dooptions+0x54>

      default:
         break;
      }
   }
   (void) m_free(om);
 4021ed4:	a009883a 	mov	r4,r20
         tp->t_flags &= ~TF_TIMESTAMP;
   }
#endif /* TCP_TIMESTAMP */

   return;
}
 4021ed8:	dfc00817 	ldw	ra,32(sp)
 4021edc:	ddc00717 	ldw	r23,28(sp)
 4021ee0:	dd800617 	ldw	r22,24(sp)
 4021ee4:	dd400517 	ldw	r21,20(sp)
 4021ee8:	dd000417 	ldw	r20,16(sp)
 4021eec:	dcc00317 	ldw	r19,12(sp)
 4021ef0:	dc800217 	ldw	r18,8(sp)
 4021ef4:	dc400117 	ldw	r17,4(sp)
 4021ef8:	dc000017 	ldw	r16,0(sp)
 4021efc:	dec00904 	addi	sp,sp,36

      default:
         break;
      }
   }
   (void) m_free(om);
 4021f00:	401d6501 	jmpi	401d650 <m_free>
      switch (opt) 
      {
      case TCPOPT_MAXSEG:
      {
         u_short mssval;
         if (optlen != 4)
 4021f04:	00800104 	movi	r2,4
 4021f08:	88bfec1e 	bne	r17,r2,4021ebc <tcp_dooptions+0x6c>
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
 4021f0c:	b0800843 	ldbu	r2,33(r22)
 4021f10:	10c4703a 	and	r2,r2,r3
 4021f14:	103fe926 	beq	r2,zero,4021ebc <tcp_dooptions+0x6c>
            continue;
         mssval = *(u_short *)(cp + 2);
         mssval = ntohs(mssval);
 4021f18:	9400008b 	ldhu	r16,2(r18)
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
 4021f1c:	b809883a 	mov	r4,r23
         if (optlen != 4)
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
            continue;
         mssval = *(u_short *)(cp + 2);
         mssval = ntohs(mssval);
 4021f20:	8004923a 	slli	r2,r16,8
 4021f24:	8020d23a 	srli	r16,r16,8
 4021f28:	80a0b03a 	or	r16,r16,r2
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
 4021f2c:	4021b940 	call	4021b94 <tcp_mss>
 4021f30:	1009883a 	mov	r4,r2
 4021f34:	80ffffcc 	andi	r3,r16,65535
 4021f38:	10bfffcc 	andi	r2,r2,65535
 4021f3c:	10c0012e 	bgeu	r2,r3,4021f44 <tcp_dooptions+0xf4>
 4021f40:	2021883a 	mov	r16,r4
 4021f44:	ac000a0d 	sth	r16,40(r21)
 4021f48:	003fdc06 	br	4021ebc <tcp_dooptions+0x6c>
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
   {
      opt = cp[0];
      if (opt == TCPOPT_EOL)
         break;
      if (opt == TCPOPT_NOP)
 4021f4c:	1823883a 	mov	r17,r3
 4021f50:	1805883a 	mov	r2,r3
 4021f54:	003fda06 	br	4021ec0 <tcp_dooptions+0x70>

04021f58 <tcp_reass>:
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4021f58:	20800d17 	ldw	r2,52(r4)

int
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
 4021f5c:	defff904 	addi	sp,sp,-28
 4021f60:	dd000515 	stw	r20,20(sp)
 4021f64:	dcc00415 	stw	r19,16(sp)
 4021f68:	dc800315 	stw	r18,12(sp)
 4021f6c:	dfc00615 	stw	ra,24(sp)
 4021f70:	dc400215 	stw	r17,8(sp)
 4021f74:	dc000115 	stw	r16,4(sp)
 4021f78:	2025883a 	mov	r18,r4
 4021f7c:	2827883a 	mov	r19,r5
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4021f80:	15000817 	ldw	r20,32(r2)

   /*
    * Call with ti==0 after become established to
    * force pre-ESTABLISHED data up to user socket.
    */
   if (ti == 0)
 4021f84:	28006526 	beq	r5,zero,402211c <tcp_reass+0x1c4>
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 4021f88:	24000017 	ldw	r16,0(r4)
 4021f8c:	24000a26 	beq	r4,r16,4021fb8 <tcp_reass+0x60>
       q = (struct tcpiphdr *)q->ti_next)
   {
      if (SEQ_GT(q->ti_seq, ti->ti_seq))
 4021f90:	28c00617 	ldw	r3,24(r5)
 4021f94:	80800617 	ldw	r2,24(r16)
 4021f98:	10c5c83a 	sub	r2,r2,r3
 4021f9c:	0080040e 	bge	zero,r2,4021fb0 <tcp_reass+0x58>
 4021fa0:	00000506 	br	4021fb8 <tcp_reass+0x60>
 4021fa4:	80800617 	ldw	r2,24(r16)
 4021fa8:	10c5c83a 	sub	r2,r2,r3
 4021fac:	00800216 	blt	zero,r2,4021fb8 <tcp_reass+0x60>

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
       q = (struct tcpiphdr *)q->ti_next)
 4021fb0:	84000017 	ldw	r16,0(r16)
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 4021fb4:	943ffb1e 	bne	r18,r16,4021fa4 <tcp_reass+0x4c>
   /*
    * If there is a preceding segment, it may provide some of
    * our data already.  If so, drop the data from the incoming
    * segment.  If it provides all of our data, drop us.
    */
   if ((struct tcpiphdr *)q->ti_prev != (struct tcpiphdr *)tp) 
 4021fb8:	84400117 	ldw	r17,4(r16)
 4021fbc:	94402826 	beq	r18,r17,4022060 <tcp_reass+0x108>
   {
      long  i;
      q = (struct tcpiphdr *)q->ti_prev;
      /* conversion to int (in i) handles seq wraparound */
      i = q->ti_seq + q->ti_len - ti->ti_seq;
 4021fc0:	8880028b 	ldhu	r2,10(r17)
 4021fc4:	88c00617 	ldw	r3,24(r17)
 4021fc8:	99000617 	ldw	r4,24(r19)
 4021fcc:	10c5883a 	add	r2,r2,r3
 4021fd0:	1121c83a 	sub	r16,r2,r4
      if (i > 0) 
 4021fd4:	0400210e 	bge	zero,r16,402205c <tcp_reass+0x104>
      {
         if (i >= (long)ti->ti_len) 
 4021fd8:	99c0028b 	ldhu	r7,10(r19)
 4021fdc:	81c01616 	blt	r16,r7,4022038 <tcp_reass+0xe0>
         {
            tcpstat.tcps_rcvduppack++;
 4021fe0:	00c10134 	movhi	r3,1028
 4021fe4:	18cd2b04 	addi	r3,r3,13484
 4021fe8:	19401f17 	ldw	r5,124(r3)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4021fec:	18802017 	ldw	r2,128(r3)
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
 4021ff0:	3009883a 	mov	r4,r6
      i = q->ti_seq + q->ti_len - ti->ti_seq;
      if (i > 0) 
      {
         if (i >= (long)ti->ti_len) 
         {
            tcpstat.tcps_rcvduppack++;
 4021ff4:	29400044 	addi	r5,r5,1
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4021ff8:	11c5883a 	add	r2,r2,r7
 4021ffc:	18802015 	stw	r2,128(r3)
      i = q->ti_seq + q->ti_len - ti->ti_seq;
      if (i > 0) 
      {
         if (i >= (long)ti->ti_len) 
         {
            tcpstat.tcps_rcvduppack++;
 4022000:	19401f15 	stw	r5,124(r3)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
            GOTO_DROP;
 4022004:	008025c4 	movi	r2,151
 4022008:	d0a84615 	stw	r2,-24296(gp)
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
 402200c:	0023883a 	mov	r17,zero
 4022010:	401d74c0 	call	401d74c <m_freem>
   return (0);
}
 4022014:	8805883a 	mov	r2,r17
 4022018:	dfc00617 	ldw	ra,24(sp)
 402201c:	dd000517 	ldw	r20,20(sp)
 4022020:	dcc00417 	ldw	r19,16(sp)
 4022024:	dc800317 	ldw	r18,12(sp)
 4022028:	dc400217 	ldw	r17,8(sp)
 402202c:	dc000117 	ldw	r16,4(sp)
 4022030:	dec00704 	addi	sp,sp,28
 4022034:	f800283a 	ret
         {
            tcpstat.tcps_rcvduppack++;
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
            GOTO_DROP;
         }
         m_adj (ti_mbuf, (int)i);
 4022038:	3009883a 	mov	r4,r6
 402203c:	800b883a 	mov	r5,r16
 4022040:	401cffc0 	call	401cffc <m_adj>
         ti->ti_len -= (short)i;
 4022044:	9880028b 	ldhu	r2,10(r19)
         ti->ti_seq += (tcp_seq)i;
 4022048:	98c00617 	ldw	r3,24(r19)
            tcpstat.tcps_rcvduppack++;
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
            GOTO_DROP;
         }
         m_adj (ti_mbuf, (int)i);
         ti->ti_len -= (short)i;
 402204c:	1405c83a 	sub	r2,r2,r16
         ti->ti_seq += (tcp_seq)i;
 4022050:	1c07883a 	add	r3,r3,r16
            tcpstat.tcps_rcvduppack++;
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
            GOTO_DROP;
         }
         m_adj (ti_mbuf, (int)i);
         ti->ti_len -= (short)i;
 4022054:	9880028d 	sth	r2,10(r19)
         ti->ti_seq += (tcp_seq)i;
 4022058:	98c00615 	stw	r3,24(r19)
      }
      q = (struct tcpiphdr *)(q->ti_next);
 402205c:	8c000017 	ldw	r16,0(r17)
   }
   tcpstat.tcps_rcvoopack++;
 4022060:	00810134 	movhi	r2,1028
 4022064:	108d2b04 	addi	r2,r2,13484
 4022068:	10c02317 	ldw	r3,140(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
 402206c:	11002417 	ldw	r4,144(r2)
 4022070:	9940028b 	ldhu	r5,10(r19)
         ti->ti_len -= (short)i;
         ti->ti_seq += (tcp_seq)i;
      }
      q = (struct tcpiphdr *)(q->ti_next);
   }
   tcpstat.tcps_rcvoopack++;
 4022074:	18c00044 	addi	r3,r3,1
 4022078:	10c02315 	stw	r3,140(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
 402207c:	2149883a 	add	r4,r4,r5
 4022080:	11002415 	stw	r4,144(r2)

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
 4022084:	84802226 	beq	r16,r18,4022110 <tcp_reass+0x1b8>
   {
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
 4022088:	98800617 	ldw	r2,24(r19)
 402208c:	81000617 	ldw	r4,24(r16)
 4022090:	2885883a 	add	r2,r5,r2
 4022094:	110bc83a 	sub	r5,r2,r4
      if (i <= 0)
 4022098:	01401016 	blt	zero,r5,40220dc <tcp_reass+0x184>
 402209c:	00001c06 	br	4022110 <tcp_reass+0x1b8>
         q->ti_seq += i;
         q->ti_len -= (u_short)i;
         m_adj (dtom(q), (int)i);
         break;
      }
      q = (struct tcpiphdr *)q->ti_next;
 40220a0:	84000017 	ldw	r16,0(r16)
      m = dtom(q->ti_prev);
 40220a4:	81000117 	ldw	r4,4(r16)
 40220a8:	401d4240 	call	401d424 <dtom>
      remque (q->ti_prev);
 40220ac:	81000117 	ldw	r4,4(r16)
         q->ti_len -= (u_short)i;
         m_adj (dtom(q), (int)i);
         break;
      }
      q = (struct tcpiphdr *)q->ti_next;
      m = dtom(q->ti_prev);
 40220b0:	1023883a 	mov	r17,r2
      remque (q->ti_prev);
 40220b4:	401d10c0 	call	401d10c <remque>
      m_freem (m);
 40220b8:	8809883a 	mov	r4,r17
 40220bc:	401d74c0 	call	401d74c <m_freem>

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
 40220c0:	94001326 	beq	r18,r16,4022110 <tcp_reass+0x1b8>
   {
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
 40220c4:	9880028b 	ldhu	r2,10(r19)
 40220c8:	98c00617 	ldw	r3,24(r19)
 40220cc:	81000617 	ldw	r4,24(r16)
 40220d0:	10c5883a 	add	r2,r2,r3
 40220d4:	110bc83a 	sub	r5,r2,r4
      if (i <= 0)
 40220d8:	01400d0e 	bge	zero,r5,4022110 <tcp_reass+0x1b8>
         break;
      if (i < (int)(q->ti_len))
 40220dc:	8080028b 	ldhu	r2,10(r16)
 40220e0:	28bfef0e 	bge	r5,r2,40220a0 <tcp_reass+0x148>
      {
         q->ti_seq += i;
         q->ti_len -= (u_short)i;
 40220e4:	8080028b 	ldhu	r2,10(r16)
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
      if (i <= 0)
         break;
      if (i < (int)(q->ti_len))
      {
         q->ti_seq += i;
 40220e8:	2907883a 	add	r3,r5,r4
 40220ec:	80c00615 	stw	r3,24(r16)
         q->ti_len -= (u_short)i;
 40220f0:	1145c83a 	sub	r2,r2,r5
         m_adj (dtom(q), (int)i);
 40220f4:	8009883a 	mov	r4,r16
      if (i <= 0)
         break;
      if (i < (int)(q->ti_len))
      {
         q->ti_seq += i;
         q->ti_len -= (u_short)i;
 40220f8:	8080028d 	sth	r2,10(r16)
         m_adj (dtom(q), (int)i);
 40220fc:	d9400015 	stw	r5,0(sp)
 4022100:	401d4240 	call	401d424 <dtom>
 4022104:	d9400017 	ldw	r5,0(sp)
 4022108:	1009883a 	mov	r4,r2
 402210c:	401cffc0 	call	401cffc <m_adj>
   }

   /*
    * Stick new segment in its place.
    */
   insque(ti, q->ti_prev);
 4022110:	81400117 	ldw	r5,4(r16)
 4022114:	9809883a 	mov	r4,r19
 4022118:	401d12c0 	call	401d12c <insque>
present:
   /*
    * Present data to user, advancing rcv_nxt through
    * completed sequence space.
    */
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
 402211c:	91000217 	ldw	r4,8(r18)
 4022120:	00800084 	movi	r2,2
 4022124:	1100050e 	bge	r2,r4,402213c <tcp_reass+0x1e4>
      return (0);
   ti = tp->seg_next;
 4022128:	94000017 	ldw	r16,0(r18)
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
 402212c:	84800326 	beq	r16,r18,402213c <tcp_reass+0x1e4>
 4022130:	80800617 	ldw	r2,24(r16)
 4022134:	90c01617 	ldw	r3,88(r18)
 4022138:	10c00226 	beq	r2,r3,4022144 <tcp_reass+0x1ec>
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
   return (0);
 402213c:	0023883a 	mov	r17,zero
 4022140:	003fb406 	br	4022014 <tcp_reass+0xbc>
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
      return (0);
   ti = tp->seg_next;
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
      return (0);
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
 4022144:	008000c4 	movi	r2,3
 4022148:	20801e26 	beq	r4,r2,40221c4 <tcp_reass+0x26c>
 402214c:	8080028b 	ldhu	r2,10(r16)
 4022150:	a4c00a04 	addi	r19,r20,40
      return (0);
   do 
   {
      tp->rcv_nxt += ti->ti_len;
 4022154:	1887883a 	add	r3,r3,r2
 4022158:	90c01615 	stw	r3,88(r18)
      flags = ti->ti_flags & TH_FIN;
 402215c:	80800843 	ldbu	r2,33(r16)
      remque(ti);
 4022160:	8009883a 	mov	r4,r16
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
      return (0);
   do 
   {
      tp->rcv_nxt += ti->ti_len;
      flags = ti->ti_flags & TH_FIN;
 4022164:	1440004c 	andi	r17,r2,1
      remque(ti);
 4022168:	401d10c0 	call	401d10c <remque>
      m = dtom(ti);
 402216c:	8009883a 	mov	r4,r16
 4022170:	401d4240 	call	401d424 <dtom>
 4022174:	100b883a 	mov	r5,r2
      ti = (struct tcpiphdr *)ti->ti_next;
      if (so->so_state & SS_CANTRCVMORE)
 4022178:	a080088b 	ldhu	r2,34(r20)
         m_freem (m);
 402217c:	2809883a 	mov	r4,r5
   {
      tp->rcv_nxt += ti->ti_len;
      flags = ti->ti_flags & TH_FIN;
      remque(ti);
      m = dtom(ti);
      ti = (struct tcpiphdr *)ti->ti_next;
 4022180:	84000017 	ldw	r16,0(r16)
      if (so->so_state & SS_CANTRCVMORE)
 4022184:	1080080c 	andi	r2,r2,32
 4022188:	10000726 	beq	r2,zero,40221a8 <tcp_reass+0x250>
         m_freem (m);
 402218c:	401d74c0 	call	401d74c <m_freem>
      else
         sbappend (&so->so_rcv, m);
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
 4022190:	94000826 	beq	r18,r16,40221b4 <tcp_reass+0x25c>
 4022194:	80800617 	ldw	r2,24(r16)
 4022198:	90c01617 	ldw	r3,88(r18)
 402219c:	10c0051e 	bne	r2,r3,40221b4 <tcp_reass+0x25c>
 40221a0:	8080028b 	ldhu	r2,10(r16)
 40221a4:	003feb06 	br	4022154 <tcp_reass+0x1fc>
      m = dtom(ti);
      ti = (struct tcpiphdr *)ti->ti_next;
      if (so->so_state & SS_CANTRCVMORE)
         m_freem (m);
      else
         sbappend (&so->so_rcv, m);
 40221a8:	9809883a 	mov	r4,r19
 40221ac:	4020fe40 	call	4020fe4 <sbappend>
 40221b0:	003ff706 	br	4022190 <tcp_reass+0x238>
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
      sorwakeup(so);
 40221b4:	a009883a 	mov	r4,r20
 40221b8:	980b883a 	mov	r5,r19
 40221bc:	40211d80 	call	40211d8 <sbwakeup>
 40221c0:	003f9406 	br	4022014 <tcp_reass+0xbc>
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
      return (0);
   ti = tp->seg_next;
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
      return (0);
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
 40221c4:	8080028b 	ldhu	r2,10(r16)
 40221c8:	103fe126 	beq	r2,zero,4022150 <tcp_reass+0x1f8>
      sorwakeup(so);
   return (flags);
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
   return (0);
 40221cc:	0023883a 	mov	r17,zero
 40221d0:	003f9006 	br	4022014 <tcp_reass+0xbc>

040221d4 <tcp_input>:
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 40221d4:	deffec04 	addi	sp,sp,-80
 40221d8:	dd000e15 	stw	r20,56(sp)
 40221dc:	dcc00d15 	stw	r19,52(sp)
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 40221e0:	05010134 	movhi	r20,1028
 40221e4:	a50cfd04 	addi	r20,r20,13300
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
 40221e8:	04c10134 	movhi	r19,1028
 40221ec:	9ccd2b04 	addi	r19,r19,13484
 40221f0:	98801917 	ldw	r2,100(r19)
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 40221f4:	a0c00917 	ldw	r3,36(r20)
   {
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
 40221f8:	21800317 	ldw	r6,12(r4)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
 40221fc:	10800044 	addi	r2,r2,1
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 4022200:	18c00044 	addi	r3,r3,1
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 4022204:	dd400f15 	stw	r21,60(sp)
 4022208:	dc000a15 	stw	r16,40(sp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
 402220c:	98801915 	stw	r2,100(r19)
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 4022210:	dfc01315 	stw	ra,76(sp)
 4022214:	df001215 	stw	fp,72(sp)
 4022218:	ddc01115 	stw	r23,68(sp)
 402221c:	dd801015 	stw	r22,64(sp)
 4022220:	dc800c15 	stw	r18,48(sp)
 4022224:	dc400b15 	stw	r17,44(sp)
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 4022228:	a0c00915 	stw	r3,36(r20)
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 402222c:	2021883a 	mov	r16,r4
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
 4022230:	31000003 	ldbu	r4,0(r6)
 4022234:	00801144 	movi	r2,69
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 4022238:	282b883a 	mov	r21,r5
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
 402223c:	11006f36 	bltu	r2,r4,40223fc <tcp_input+0x228>
      {
         np_stripoptions(pip, (struct mbuf *)m);
         pip = mtod(m, struct ip *);
      }
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
 4022240:	80c00217 	ldw	r3,8(r16)
 4022244:	008009c4 	movi	r2,39
 4022248:	10c00f36 	bltu	r2,r3,4022288 <tcp_input+0xb4>
      {
         tcpstat.tcps_rcvshort++;
 402224c:	98801e17 	ldw	r2,120(r19)
 4022250:	10800044 	addi	r2,r2,1
 4022254:	98801e15 	stw	r2,120(r19)
   m_freem(m);
   /* destroy temporarily created socket */
   if (dropsocket)
      (void) soabort(so);
   return;
}
 4022258:	dfc01317 	ldw	ra,76(sp)
 402225c:	df001217 	ldw	fp,72(sp)
 4022260:	ddc01117 	ldw	r23,68(sp)
 4022264:	dd801017 	ldw	r22,64(sp)
 4022268:	dd400f17 	ldw	r21,60(sp)
 402226c:	dd000e17 	ldw	r20,56(sp)
 4022270:	dcc00d17 	ldw	r19,52(sp)
 4022274:	dc800c17 	ldw	r18,48(sp)
 4022278:	dc400b17 	ldw	r17,44(sp)
 402227c:	dc000a17 	ldw	r16,40(sp)
 4022280:	dec01404 	addi	sp,sp,80
 4022284:	f800283a 	ret
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
 4022288:	80c00117 	ldw	r3,4(r16)
      /* The following is needed in the cases where the size of the
       * overlay structure is larger than the size of the ip header.
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
 402228c:	3025883a 	mov	r18,r6
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
      {
         tcpstat.tcps_rcvshort++;
         return;
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
 4022290:	3440008b 	ldhu	r17,2(r6)
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
 4022294:	18800117 	ldw	r2,4(r3)
 4022298:	30805d36 	bltu	r6,r2,4022410 <tcp_input+0x23c>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 402229c:	90800803 	ldbu	r2,32(r18)
   if (off < sizeof (struct tcphdr) || off > tlen) 
 40222a0:	00c004c4 	movi	r3,19
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 40222a4:	1004d13a 	srli	r2,r2,4
 40222a8:	1085883a 	add	r2,r2,r2
 40222ac:	108b883a 	add	r5,r2,r2
   if (off < sizeof (struct tcphdr) || off > tlen) 
 40222b0:	19401b36 	bltu	r3,r5,4022320 <tcp_input+0x14c>
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
 40222b4:	98801d17 	ldw	r2,116(r19)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
 40222b8:	a0c00d17 	ldw	r3,52(r20)
      GOTO_DROP;
 40222bc:	d8000615 	stw	zero,24(sp)
   if (off < sizeof (struct tcphdr) || off > tlen) 
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
 40222c0:	10800044 	addi	r2,r2,1
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
 40222c4:	18c00044 	addi	r3,r3,1
   if (off < sizeof (struct tcphdr) || off > tlen) 
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
 40222c8:	98801d15 	stw	r2,116(r19)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
      GOTO_DROP;
 40222cc:	00805784 	movi	r2,350
 40222d0:	d8000415 	stw	zero,16(sp)
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
 40222d4:	a0c00d15 	stw	r3,52(r20)
      GOTO_DROP;
 40222d8:	d0a84615 	stw	r2,-24296(gp)
#ifdef DO_TCPTRACE
   if (tp && (tp->t_inpcb->inp_socket->so_options & SO_DEBUG))
      tcp_trace("drop: state %d, tcpcb: %x, saveti: %x",
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
 40222dc:	8009883a 	mov	r4,r16
 40222e0:	401d74c0 	call	401d74c <m_freem>
   /* destroy temporarily created socket */
   if (dropsocket)
 40222e4:	d8c00417 	ldw	r3,16(sp)
 40222e8:	183fdb26 	beq	r3,zero,4022258 <tcp_input+0x84>
      (void) soabort(so);
 40222ec:	d9000617 	ldw	r4,24(sp)
   return;
}
 40222f0:	dfc01317 	ldw	ra,76(sp)
 40222f4:	df001217 	ldw	fp,72(sp)
 40222f8:	ddc01117 	ldw	r23,68(sp)
 40222fc:	dd801017 	ldw	r22,64(sp)
 4022300:	dd400f17 	ldw	r21,60(sp)
 4022304:	dd000e17 	ldw	r20,56(sp)
 4022308:	dcc00d17 	ldw	r19,52(sp)
 402230c:	dc800c17 	ldw	r18,48(sp)
 4022310:	dc400b17 	ldw	r17,44(sp)
 4022314:	dc000a17 	ldw	r16,40(sp)
 4022318:	dec01404 	addi	sp,sp,80
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
   /* destroy temporarily created socket */
   if (dropsocket)
      (void) soabort(so);
 402231c:	401f5e01 	jmpi	401f5e0 <soabort>
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
      {
         tcpstat.tcps_rcvshort++;
         return;
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
 4022320:	88bfffcc 	andi	r2,r17,65535
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
   if (off < sizeof (struct tcphdr) || off > tlen) 
 4022324:	117fe316 	blt	r2,r5,40222b4 <tcp_input+0xe0>
      tcpstat.tcps_rcvbadoff++;
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
      GOTO_DROP;
   }
   tlen -= (int)off;
   ti->ti_len = (u_short)tlen;
 4022328:	1145c83a 	sub	r2,r2,r5
   if (off > sizeof (struct tcphdr)) 
 402232c:	00c00504 	movi	r3,20
      tcpstat.tcps_rcvbadoff++;
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
      GOTO_DROP;
   }
   tlen -= (int)off;
   ti->ti_len = (u_short)tlen;
 4022330:	9080028d 	sth	r2,10(r18)
   if (off > sizeof (struct tcphdr)) 
 4022334:	28c0401e 	bne	r5,r3,4022438 <tcp_input+0x264>
 4022338:	d8000715 	stw	zero,28(sp)
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 402233c:	90800617 	ldw	r2,24(r18)
   ti->ti_ack = ntohl(ti->ti_ack);
 4022340:	90c00717 	ldw	r3,28(r18)
   ti->ti_urp = ntohs(ti->ti_urp);
 4022344:	9200098b 	ldhu	r8,38(r18)
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022348:	100cd23a 	srli	r6,r2,8
 402234c:	117fc00c 	andi	r5,r2,65280
   ti->ti_ack = ntohl(ti->ti_ack);
 4022350:	180ed23a 	srli	r7,r3,8
 4022354:	193fc00c 	andi	r4,r3,65280
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022358:	1012963a 	slli	r9,r2,24
   ti->ti_ack = ntohl(ti->ti_ack);
 402235c:	1814963a 	slli	r10,r3,24
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022360:	280a923a 	slli	r5,r5,8
   ti->ti_ack = ntohl(ti->ti_ack);
 4022364:	2008923a 	slli	r4,r4,8
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022368:	1004d63a 	srli	r2,r2,24
   ti->ti_ack = ntohl(ti->ti_ack);
 402236c:	1806d63a 	srli	r3,r3,24
   ti->ti_urp = ntohs(ti->ti_urp);
 4022370:	4016923a 	slli	r11,r8,8
 4022374:	4010d23a 	srli	r8,r8,8
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022378:	31bfc00c 	andi	r6,r6,65280
   ti->ti_ack = ntohl(ti->ti_ack);
 402237c:	39ffc00c 	andi	r7,r7,65280
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022380:	1184b03a 	or	r2,r2,r6
 4022384:	2a4ab03a 	or	r5,r5,r9
   ti->ti_ack = ntohl(ti->ti_ack);
 4022388:	19c6b03a 	or	r3,r3,r7
 402238c:	2288b03a 	or	r4,r4,r10
   }
   tiflags = ti->ti_flags;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 4022390:	114cb03a 	or	r6,r2,r5
   ti->ti_ack = ntohl(ti->ti_ack);
 4022394:	1906b03a 	or	r3,r3,r4
   ti->ti_urp = ntohs(ti->ti_urp);
 4022398:	42d0b03a 	or	r8,r8,r11
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
      m->m_len -= om->m_len;
   }
   tiflags = ti->ti_flags;
 402239c:	95c00843 	ldbu	r23,33(r18)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 40223a0:	91800615 	stw	r6,24(r18)
   ti->ti_ack = ntohl(ti->ti_ack);
 40223a4:	90c00715 	stw	r3,28(r18)
   ti->ti_urp = ntohs(ti->ti_urp);
 40223a8:	9200098d 	sth	r8,38(r18)
 40223ac:	002d883a 	mov	r22,zero
 40223b0:	d8000615 	stw	zero,24(sp)
 40223b4:	d8000415 	stw	zero,16(sp)
 40223b8:	d8000315 	stw	zero,12(sp)
   /*
    * Locate pcb for segment.
    */
findpcb:

   switch(m->pkt->type)
 40223bc:	80800117 	ldw	r2,4(r16)
 40223c0:	00c00204 	movi	r3,8
 40223c4:	1100080b 	ldhu	r4,32(r2)
 40223c8:	20c03926 	beq	r4,r3,40224b0 <tcp_input+0x2dc>
   m_freem(m);
   /* destroy temporarily created socket */
   if (dropsocket)
      (void) soabort(so);
   return;
}
 40223cc:	dfc01317 	ldw	ra,76(sp)
 40223d0:	df001217 	ldw	fp,72(sp)
 40223d4:	ddc01117 	ldw	r23,68(sp)
 40223d8:	dd801017 	ldw	r22,64(sp)
 40223dc:	dd400f17 	ldw	r21,60(sp)
 40223e0:	dd000e17 	ldw	r20,56(sp)
 40223e4:	dcc00d17 	ldw	r19,52(sp)
 40223e8:	dc800c17 	ldw	r18,48(sp)
 40223ec:	dc400b17 	ldw	r17,44(sp)
 40223f0:	dc000a17 	ldw	r16,40(sp)
 40223f4:	dec01404 	addi	sp,sp,80
      inp = ip6_pcblookup(&tcb, &ip6_src, ti->ti_sport, 
         &ip6_dst, ti->ti_dport, INPLOOKUP_WILDCARD);
      break;
#endif   /* IP_V6 */
   default:
      dtrap();
 40223f8:	401c81c1 	jmpi	401c81c <dtrap>
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
      {
         np_stripoptions(pip, (struct mbuf *)m);
 40223fc:	3009883a 	mov	r4,r6
 4022400:	800b883a 	mov	r5,r16
 4022404:	401d39c0 	call	401d39c <np_stripoptions>
         pip = mtod(m, struct ip *);
 4022408:	81800317 	ldw	r6,12(r16)
 402240c:	003f8c06 	br	4022240 <tcp_input+0x6c>
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
      {
         panic("tcp_input");
 4022410:	010100f4 	movhi	r4,1027
 4022414:	21150a04 	addi	r4,r4,21544
 4022418:	4019c440 	call	4019c44 <panic>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 402241c:	90800803 	ldbu	r2,32(r18)
   if (off < sizeof (struct tcphdr) || off > tlen) 
 4022420:	00c004c4 	movi	r3,19
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 4022424:	1004d13a 	srli	r2,r2,4
 4022428:	1085883a 	add	r2,r2,r2
 402242c:	108b883a 	add	r5,r2,r2
   if (off < sizeof (struct tcphdr) || off > tlen) 
 4022430:	197fa02e 	bgeu	r3,r5,40222b4 <tcp_input+0xe0>
 4022434:	003fba06 	br	4022320 <tcp_input+0x14c>
   if (off > sizeof (struct tcphdr)) 
   {
      int olen;      /* length of options field */
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
 4022438:	2c7ffb04 	addi	r17,r5,-20
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
 402243c:	01000044 	movi	r4,1
 4022440:	880b883a 	mov	r5,r17
 4022444:	401dad40 	call	401dad4 <m_getnbuf>
 4022448:	d8800715 	stw	r2,28(sp)
      if (om == 0)
 402244c:	1000cf26 	beq	r2,zero,402278c <tcp_input+0x5b8>
         GOTO_DROP;
      om->m_len = olen;       /* set mbuf length */
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
 4022450:	80800117 	ldw	r2,4(r16)

      olen = off - sizeof (struct tcphdr);   /* get options length */
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
      if (om == 0)
         GOTO_DROP;
      om->m_len = olen;       /* set mbuf length */
 4022454:	d8c00717 	ldw	r3,28(sp)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
 4022458:	1100080b 	ldhu	r4,32(r2)

      olen = off - sizeof (struct tcphdr);   /* get options length */
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
      if (om == 0)
         GOTO_DROP;
      om->m_len = olen;       /* set mbuf length */
 402245c:	1c400215 	stw	r17,8(r3)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
 4022460:	00f76194 	movui	r3,56710
 4022464:	20c00f26 	beq	r4,r3,40224a4 <tcp_input+0x2d0>
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
      else
         op = (u_char*)(m->m_data + 40);  /* past IP + TCP */
 4022468:	80800317 	ldw	r2,12(r16)
 402246c:	11400a04 	addi	r5,r2,40
      MEMCPY(om->m_data, op, olen); /* copy to new mbuf */
 4022470:	d8800717 	ldw	r2,28(sp)
 4022474:	880d883a 	mov	r6,r17
 4022478:	11000317 	ldw	r4,12(r2)
 402247c:	40096480 	call	4009648 <memcpy>

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
 4022480:	d8c00717 	ldw	r3,28(sp)
      m->m_len -= om->m_len;
 4022484:	80800217 	ldw	r2,8(r16)

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
 4022488:	19000217 	ldw	r4,8(r3)
 402248c:	80c00317 	ldw	r3,12(r16)
      m->m_len -= om->m_len;
 4022490:	1105c83a 	sub	r2,r2,r4

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
 4022494:	190d883a 	add	r6,r3,r4
 4022498:	81800315 	stw	r6,12(r16)
      m->m_len -= om->m_len;
 402249c:	80800215 	stw	r2,8(r16)
 40224a0:	003fa606 	br	402233c <tcp_input+0x168>
      if (om == 0)
         GOTO_DROP;
      om->m_len = olen;       /* set mbuf length */
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
 40224a4:	80800317 	ldw	r2,12(r16)
 40224a8:	11400504 	addi	r5,r2,20
 40224ac:	003ff006 	br	4022470 <tcp_input+0x29c>
   switch(m->pkt->type)
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
 40224b0:	80800317 	ldw	r2,12(r16)
      m->m_len -= 40;
 40224b4:	80c00217 	ldw	r3,8(r16)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 40224b8:	91400317 	ldw	r5,12(r18)
 40224bc:	9180050b 	ldhu	r6,20(r18)
 40224c0:	91c00417 	ldw	r7,16(r18)
 40224c4:	9200058b 	ldhu	r8,22(r18)
   switch(m->pkt->type)
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
 40224c8:	10800a04 	addi	r2,r2,40
      m->m_len -= 40;
 40224cc:	18fff604 	addi	r3,r3,-40
   switch(m->pkt->type)
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
 40224d0:	80800315 	stw	r2,12(r16)
      m->m_len -= 40;
 40224d4:	80c00215 	stw	r3,8(r16)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 40224d8:	00800044 	movi	r2,1
 40224dc:	01010134 	movhi	r4,1028
 40224e0:	210d2004 	addi	r4,r4,13440
 40224e4:	da000015 	stw	r8,0(sp)
 40224e8:	d8800115 	stw	r2,4(sp)
 40224ec:	402e0340 	call	402e034 <in_pcblookup>
 40224f0:	1023883a 	mov	r17,r2
    * If the state is CLOSED (i.e., TCB does not exist) then
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
 40224f4:	10028126 	beq	r2,zero,4022efc <tcp_input+0xd28>
      GOTO_DROPWITHRESET;
   tp = intotcpcb (inp);
 40224f8:	15800917 	ldw	r22,36(r2)
   if (tp == 0)
 40224fc:	b0027a26 	beq	r22,zero,4022ee8 <tcp_input+0xd14>
      GOTO_DROPWITHRESET;
   if (tp->t_state == TCPS_CLOSED)
 4022500:	b1800217 	ldw	r6,8(r22)
 4022504:	30027526 	beq	r6,zero,4022edc <tcp_input+0xd08>
      GOTO_DROP;
   so = inp->inp_socket;
 4022508:	10c00817 	ldw	r3,32(r2)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 402250c:	9700088b 	ldhu	fp,34(r18)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
 4022510:	18800417 	ldw	r2,16(r3)
   tp = intotcpcb (inp);
   if (tp == 0)
      GOTO_DROPWITHRESET;
   if (tp->t_state == TCPS_CLOSED)
      GOTO_DROP;
   so = inp->inp_socket;
 4022514:	d8c00615 	stw	r3,24(sp)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
 4022518:	1080008c 	andi	r2,r2,2
 402251c:	1000a01e 	bne	r2,zero,40227a0 <tcp_input+0x5cc>
   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
 4022520:	00810134 	movhi	r2,1028
 4022524:	10a13604 	addi	r2,r2,-31528
 4022528:	10c00017 	ldw	r3,0(r2)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
 402252c:	d8800717 	ldw	r2,28(sp)

   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
 4022530:	b0001d15 	stw	zero,116(r22)
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
 4022534:	b0c00515 	stw	r3,20(r22)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
 4022538:	10000826 	beq	r2,zero,402255c <tcp_input+0x388>
 402253c:	00800044 	movi	r2,1
 4022540:	30800626 	beq	r6,r2,402255c <tcp_input+0x388>
   {
      tcp_dooptions(tp, om, ti);
 4022544:	d9400717 	ldw	r5,28(sp)
 4022548:	900d883a 	mov	r6,r18
 402254c:	b009883a 	mov	r4,r22
 4022550:	4021e500 	call	4021e50 <tcp_dooptions>
 4022554:	b1800217 	ldw	r6,8(r22)
 4022558:	d8000715 	stw	zero,28(sp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 402255c:	d8c00617 	ldw	r3,24(sp)
   {
      tcp_dooptions(tp, om, ti);
      om = 0;
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
 4022560:	90800717 	ldw	r2,28(r18)
 4022564:	b1c00e17 	ldw	r7,56(r22)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 4022568:	1a800b17 	ldw	r10,44(r3)
 402256c:	1a400a17 	ldw	r9,40(r3)
   {
      tcp_dooptions(tp, om, ti);
      om = 0;
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
 4022570:	11c5c83a 	sub	r2,r2,r7
 4022574:	d8800815 	stw	r2,32(sp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 4022578:	5247c83a 	sub	r3,r10,r9
 402257c:	18010816 	blt	r3,zero,40229a0 <tcp_input+0x7cc>
 4022580:	180b883a 	mov	r5,r3
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 4022584:	e0bfffcc 	andi	r2,fp,65535
 4022588:	1006923a 	slli	r3,r2,8
   { long win;

      win = (long)sbspace(&so->so_rcv);
      if (win < 0)
         win = 0;
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 402258c:	b1001917 	ldw	r4,100(r22)
 4022590:	b2001617 	ldw	r8,88(r22)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 4022594:	1004d23a 	srli	r2,r2,8
 4022598:	18ffc00c 	andi	r3,r3,65280
   { long win;

      win = (long)sbspace(&so->so_rcv);
      if (win < 0)
         win = 0;
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 402259c:	2209c83a 	sub	r4,r4,r8
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 40225a0:	10c4b03a 	or	r2,r2,r3
 40225a4:	d8800215 	stw	r2,8(sp)
   { long win;

      win = (long)sbspace(&so->so_rcv);
      if (win < 0)
         win = 0;
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 40225a8:	2140012e 	bgeu	r4,r5,40225b0 <tcp_input+0x3dc>
 40225ac:	2809883a 	mov	r4,r5
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 40225b0:	00800104 	movi	r2,4
   { long win;

      win = (long)sbspace(&so->so_rcv);
      if (win < 0)
         win = 0;
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 40225b4:	b1001515 	stw	r4,84(r22)
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 40225b8:	30808c26 	beq	r6,r2,40227ec <tcp_input+0x618>

         return;
      }
   }

   switch (tp->t_state) 
 40225bc:	00800044 	movi	r2,1
 40225c0:	3080f926 	beq	r6,r2,40229a8 <tcp_input+0x7d4>
 40225c4:	00800084 	movi	r2,2
 40225c8:	30805626 	beq	r6,r2,4022724 <tcp_input+0x550>
 40225cc:	91800617 	ldw	r6,24(r18)
    * States other than LISTEN or SYN_SENT.
    * First check that at least some bytes of segment are within 
    * receive window.  If segment begins before rcv_nxt,
    * drop leading data (and SYN); if nothing left, just ack.
    */
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
 40225d0:	41a3c83a 	sub	r17,r8,r6
   if (todrop > 0) 
 40225d4:	0440250e 	bge	zero,r17,402266c <tcp_input+0x498>
   {
      if (tiflags & TH_SYN) 
 40225d8:	b880008c 	andi	r2,r23,2
 40225dc:	10000b26 	beq	r2,zero,402260c <tcp_input+0x438>
      {
         tiflags &= ~TH_SYN;
         ti->ti_seq++;
         if (ti->ti_urp > 1) 
 40225e0:	9100098b 	ldhu	r4,38(r18)
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
   if (todrop > 0) 
   {
      if (tiflags & TH_SYN) 
      {
         tiflags &= ~TH_SYN;
 40225e4:	00ffff44 	movi	r3,-3
         ti->ti_seq++;
 40225e8:	31800044 	addi	r6,r6,1
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
   if (todrop > 0) 
   {
      if (tiflags & TH_SYN) 
      {
         tiflags &= ~TH_SYN;
 40225ec:	b8ee703a 	and	r23,r23,r3
         ti->ti_seq++;
         if (ti->ti_urp > 1) 
 40225f0:	20bfffcc 	andi	r2,r4,65535
 40225f4:	00c00044 	movi	r3,1
   if (todrop > 0) 
   {
      if (tiflags & TH_SYN) 
      {
         tiflags &= ~TH_SYN;
         ti->ti_seq++;
 40225f8:	91800615 	stw	r6,24(r18)
         if (ti->ti_urp > 1) 
 40225fc:	1881182e 	bgeu	r3,r2,4022a60 <tcp_input+0x88c>
            ti->ti_urp--;
 4022600:	20bfffc4 	addi	r2,r4,-1
 4022604:	9080098d 	sth	r2,38(r18)
         else
            tiflags &= ~TH_URG;
         todrop--;
 4022608:	8c7fffc4 	addi	r17,r17,-1
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
 402260c:	91c0028b 	ldhu	r7,10(r18)
 4022610:	3c40c716 	blt	r7,r17,4022930 <tcp_input+0x75c>
 4022614:	89c10326 	beq	r17,r7,4022a24 <tcp_input+0x850>
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
 4022618:	98802117 	ldw	r2,132(r19)
         tcpstat.tcps_rcvpartdupbyte += todrop;
 402261c:	98c02217 	ldw	r3,136(r19)
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
 4022620:	10800044 	addi	r2,r2,1
         tcpstat.tcps_rcvpartdupbyte += todrop;
 4022624:	1c47883a 	add	r3,r3,r17
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
 4022628:	98802115 	stw	r2,132(r19)
         tcpstat.tcps_rcvpartdupbyte += todrop;
 402262c:	98c02215 	stw	r3,136(r19)
      }
      m_adj(m, todrop);
 4022630:	8009883a 	mov	r4,r16
 4022634:	880b883a 	mov	r5,r17
 4022638:	401cffc0 	call	401cffc <m_adj>
      ti->ti_seq += todrop;
 402263c:	91800617 	ldw	r6,24(r18)
      ti->ti_len -= (u_short)todrop;
 4022640:	9080028b 	ldhu	r2,10(r18)
      if (ti->ti_urp > (u_short)todrop)
 4022644:	9140098b 	ldhu	r5,38(r18)
      {
         tcpstat.tcps_rcvpartduppack++;
         tcpstat.tcps_rcvpartdupbyte += todrop;
      }
      m_adj(m, todrop);
      ti->ti_seq += todrop;
 4022648:	344d883a 	add	r6,r6,r17
      ti->ti_len -= (u_short)todrop;
 402264c:	1445c83a 	sub	r2,r2,r17
      if (ti->ti_urp > (u_short)todrop)
 4022650:	893fffcc 	andi	r4,r17,65535
 4022654:	28ffffcc 	andi	r3,r5,65535
         tcpstat.tcps_rcvpartduppack++;
         tcpstat.tcps_rcvpartdupbyte += todrop;
      }
      m_adj(m, todrop);
      ti->ti_seq += todrop;
      ti->ti_len -= (u_short)todrop;
 4022658:	9080028d 	sth	r2,10(r18)
      {
         tcpstat.tcps_rcvpartduppack++;
         tcpstat.tcps_rcvpartdupbyte += todrop;
      }
      m_adj(m, todrop);
      ti->ti_seq += todrop;
 402265c:	91800615 	stw	r6,24(r18)
      ti->ti_len -= (u_short)todrop;
      if (ti->ti_urp > (u_short)todrop)
 4022660:	20c0cb2e 	bgeu	r4,r3,4022990 <tcp_input+0x7bc>
         ti->ti_urp -= (u_short)todrop;
 4022664:	2c45c83a 	sub	r2,r5,r17
 4022668:	9080098d 	sth	r2,38(r18)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
 402266c:	d8c00617 	ldw	r3,24(sp)
 4022670:	1880088b 	ldhu	r2,34(r3)
 4022674:	1080004c 	andi	r2,r2,1
 4022678:	1005003a 	cmpeq	r2,r2,zero
 402267c:	1000051e 	bne	r2,zero,4022694 <tcp_input+0x4c0>
 4022680:	b0c00217 	ldw	r3,8(r22)
 4022684:	00800144 	movi	r2,5
 4022688:	10c0020e 	bge	r2,r3,4022694 <tcp_input+0x4c0>
 402268c:	91c0028b 	ldhu	r7,10(r18)
 4022690:	3803fa1e 	bne	r7,zero,402367c <tcp_input+0x14a8>

   /*
    * If segment ends after window, drop trailing data
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
 4022694:	9080028f 	ldh	r2,10(r18)
 4022698:	b0c01617 	ldw	r3,88(r22)
 402269c:	b1001517 	ldw	r4,84(r22)
 40226a0:	1185883a 	add	r2,r2,r6
 40226a4:	1907883a 	add	r3,r3,r4
 40226a8:	10e3c83a 	sub	r17,r2,r3
   if (todrop > 0) 
 40226ac:	0441d80e 	bge	zero,r17,4022e10 <tcp_input+0xc3c>
   {
      tcpstat.tcps_rcvpackafterwin++;
 40226b0:	98802517 	ldw	r2,148(r19)
      if (todrop >= (int)ti->ti_len) 
 40226b4:	9100028b 	ldhu	r4,10(r18)
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
   if (todrop > 0) 
   {
      tcpstat.tcps_rcvpackafterwin++;
 40226b8:	01410134 	movhi	r5,1028
 40226bc:	294d2b04 	addi	r5,r5,13484
 40226c0:	10800044 	addi	r2,r2,1
 40226c4:	98802515 	stw	r2,148(r19)
      if (todrop >= (int)ti->ti_len) 
 40226c8:	8901c416 	blt	r17,r4,4022ddc <tcp_input+0xc08>
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
 40226cc:	28802617 	ldw	r2,152(r5)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
 40226d0:	b8c0008c 	andi	r3,r23,2
   if (todrop > 0) 
   {
      tcpstat.tcps_rcvpackafterwin++;
      if (todrop >= (int)ti->ti_len) 
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
 40226d4:	1105883a 	add	r2,r2,r4
 40226d8:	28802615 	stw	r2,152(r5)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
 40226dc:	1801e226 	beq	r3,zero,4022e68 <tcp_input+0xc94>
 40226e0:	b0c00217 	ldw	r3,8(r22)
 40226e4:	00800284 	movi	r2,10
 40226e8:	1881df1e 	bne	r3,r2,4022e68 <tcp_input+0xc94>
 40226ec:	b0c01617 	ldw	r3,88(r22)
 40226f0:	90800617 	ldw	r2,24(r18)
 40226f4:	10c5c83a 	sub	r2,r2,r3
 40226f8:	0081db0e 	bge	zero,r2,4022e68 <tcp_input+0xc94>
             tp->t_state == TCPS_TIME_WAIT &&
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
         {
            iss = (tcp_seq)(tp->rcv_nxt + (TCP_ISSINCR));
 40226fc:	008000b4 	movhi	r2,2
 4022700:	10bd3fc4 	addi	r2,r2,-2817
 4022704:	1887883a 	add	r3,r3,r2
 4022708:	d8c00315 	stw	r3,12(sp)
            if (iss & 0xff000000)
 402270c:	18ffc02c 	andhi	r3,r3,65280
 4022710:	18000126 	beq	r3,zero,4022718 <tcp_input+0x544>
 4022714:	d8000315 	stw	zero,12(sp)
            {
               iss = 0L;
            }
            (void) tcp_close(tp);
 4022718:	b009883a 	mov	r4,r22
 402271c:	40243f00 	call	40243f0 <tcp_close>
 4022720:	003f2606 	br	40223bc <tcp_input+0x1e8>
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
      if ((tiflags & TH_ACK) &&
 4022724:	b940040c 	andi	r5,r23,16
 4022728:	d9400915 	stw	r5,36(sp)
 402272c:	280b003a 	cmpeq	r5,r5,zero
    *   if SYN has been acked change to ESTABLISHED else SYN_RCVD state
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
 4022730:	8d400a15 	stw	r21,40(r17)
      if ((tiflags & TH_ACK) &&
 4022734:	2800b51e 	bne	r5,zero,4022a0c <tcp_input+0x838>
 4022738:	90c00717 	ldw	r3,28(r18)
 402273c:	b0801317 	ldw	r2,76(r22)
 4022740:	1885c83a 	sub	r2,r3,r2
 4022744:	0080030e 	bge	zero,r2,4022754 <tcp_input+0x580>
 4022748:	b0801a17 	ldw	r2,104(r22)
 402274c:	1885c83a 	sub	r2,r3,r2
 4022750:	0080ae0e 	bge	zero,r2,4022a0c <tcp_input+0x838>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
          SEQ_GT(ti->ti_ack, tp->snd_max)))
      {
         GOTO_DROPWITHRESET;
 4022754:	b8c0010c 	andi	r3,r23,4
 4022758:	0080dc04 	movi	r2,880
 402275c:	182b003a 	cmpeq	r21,r3,zero
 4022760:	d0a84615 	stw	r2,-24296(gp)
   tp->t_flags |= TF_ACKNOW;
   (void) tcp_output (tp);
   return;

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 4022764:	a0800d17 	ldw	r2,52(r20)
   if (om) 
 4022768:	d9000717 	ldw	r4,28(sp)
   tp->t_flags |= TF_ACKNOW;
   (void) tcp_output (tp);
   return;

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 402276c:	10800044 	addi	r2,r2,1
 4022770:	a0800d15 	stw	r2,52(r20)
   if (om) 
 4022774:	20000126 	beq	r4,zero,402277c <tcp_input+0x5a8>
   {
      (void) m_free(om);
 4022778:	401d6500 	call	401d650 <m_free>
      om = 0;
   }

   /* Don't reset resets */
   if (tiflags & TH_RST)
 402277c:	a800c01e 	bne	r21,zero,4022a80 <tcp_input+0x8ac>
      GOTO_DROP;
 4022780:	0081ad04 	movi	r2,1716
 4022784:	d0a84615 	stw	r2,-24296(gp)
 4022788:	003ed406 	br	40222dc <tcp_input+0x108>
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
      if (om == 0)
         GOTO_DROP;
 402278c:	00805a84 	movi	r2,362
 4022790:	d8000615 	stw	zero,24(sp)
 4022794:	d8000415 	stw	zero,16(sp)
 4022798:	d0a84615 	stw	r2,-24296(gp)
 402279c:	003ecf06 	br	40222dc <tcp_input+0x108>
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
   {
      so = sonewconn(so);
 40227a0:	1809883a 	mov	r4,r3
 40227a4:	402141c0 	call	402141c <sonewconn>
 40227a8:	d8800615 	stw	r2,24(sp)
      if (so == 0)
 40227ac:	10020326 	beq	r2,zero,4022fbc <tcp_input+0xde8>
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;

      inp = (struct inpcb *)so->so_pcb;
 40227b0:	d9000617 	ldw	r4,24(sp)
      inp->ifp = ifp;      /* save iface to peer */

      switch(so->so_domain)
 40227b4:	00800084 	movi	r2,2
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;

      inp = (struct inpcb *)so->so_pcb;
 40227b8:	24400117 	ldw	r17,4(r4)
      inp->ifp = ifp;      /* save iface to peer */

      switch(so->so_domain)
 40227bc:	20c00517 	ldw	r3,20(r4)
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;

      inp = (struct inpcb *)so->so_pcb;
      inp->ifp = ifp;      /* save iface to peer */
 40227c0:	8d400a15 	stw	r21,40(r17)

      switch(so->so_domain)
 40227c4:	18808926 	beq	r3,r2,40229ec <tcp_input+0x818>
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
 40227c8:	d9400417 	ldw	r5,16(sp)
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
 40227cc:	9080058b 	ldhu	r2,22(r18)
      tp = intotcpcb(inp);
 40227d0:	8d800917 	ldw	r22,36(r17)
      tp->t_state = TCPS_LISTEN;
 40227d4:	01800044 	movi	r6,1
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
 40227d8:	298b883a 	add	r5,r5,r6
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
 40227dc:	8880078d 	sth	r2,30(r17)
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
 40227e0:	d9400415 	stw	r5,16(sp)
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
      tp = intotcpcb(inp);
      tp->t_state = TCPS_LISTEN;
 40227e4:	b1800215 	stw	r6,8(r22)
 40227e8:	003f4d06 	br	4022520 <tcp_input+0x34c>
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 40227ec:	b8c00dcc 	andi	r3,r23,55
 40227f0:	00800404 	movi	r2,16
 40227f4:	18bf751e 	bne	r3,r2,40225cc <tcp_input+0x3f8>
 40227f8:	91800617 	ldw	r6,24(r18)
 40227fc:	323f741e 	bne	r6,r8,40225d0 <tcp_input+0x3fc>
 4022800:	d9400217 	ldw	r5,8(sp)
 4022804:	283f9926 	beq	r5,zero,402266c <tcp_input+0x498>
 4022808:	b0801417 	ldw	r2,80(r22)
 402280c:	28bf971e 	bne	r5,r2,402266c <tcp_input+0x498>
 4022810:	b1400f17 	ldw	r5,60(r22)
 4022814:	b0801a17 	ldw	r2,104(r22)
 4022818:	28bf941e 	bne	r5,r2,402266c <tcp_input+0x498>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
       (ti->ti_seq == tp->rcv_nxt) &&
       (rx_win && rx_win == tp->snd_wnd) &&
       (tp->snd_nxt == tp->snd_max))
   {
      if (ti->ti_len == 0)
 402281c:	90c0028b 	ldhu	r3,10(r18)
 4022820:	1803021e 	bne	r3,zero,402342c <tcp_input+0x1258>
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
 4022824:	90c00717 	ldw	r3,28(r18)
 4022828:	19c5c83a 	sub	r2,r3,r7
 402282c:	00bf8f0e 	bge	zero,r2,402266c <tcp_input+0x498>
 4022830:	1945c83a 	sub	r2,r3,r5
 4022834:	00bf8d16 	blt	zero,r2,402266c <tcp_input+0x498>
 4022838:	b0801b17 	ldw	r2,108(r22)
 402283c:	d8c00217 	ldw	r3,8(sp)
 4022840:	10ff8a36 	bltu	r2,r3,402266c <tcp_input+0x498>
             tp->snd_cwnd >= tp->snd_wnd) 
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
 4022844:	98803517 	ldw	r2,212(r19)
 4022848:	10800044 	addi	r2,r2,1
 402284c:	98803515 	stw	r2,212(r19)
            if (tp->t_rttick && 
 4022850:	b0c01e17 	ldw	r3,120(r22)
 4022854:	18000626 	beq	r3,zero,4022870 <tcp_input+0x69c>
 4022858:	90800717 	ldw	r2,28(r18)
 402285c:	b0c01f17 	ldw	r3,124(r22)
 4022860:	10c5c83a 	sub	r2,r2,r3
 4022864:	0080020e 	bge	zero,r2,4022870 <tcp_input+0x69c>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
            {
               tcp_xmit_timer(tp);
 4022868:	b009883a 	mov	r4,r22
 402286c:	4021c400 	call	4021c40 <tcp_xmit_timer>
            }

            tcpstat.tcps_rcvackpack++;
 4022870:	98c02b17 	ldw	r3,172(r19)
            tcpstat.tcps_rcvackbyte += acked;
 4022874:	98802c17 	ldw	r2,176(r19)
            sbdrop(&so->so_snd, acked);
 4022878:	d9000617 	ldw	r4,24(sp)
            {
               tcp_xmit_timer(tp);
            }

            tcpstat.tcps_rcvackpack++;
            tcpstat.tcps_rcvackbyte += acked;
 402287c:	d9400817 	ldw	r5,32(sp)
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
            {
               tcp_xmit_timer(tp);
            }

            tcpstat.tcps_rcvackpack++;
 4022880:	18c00044 	addi	r3,r3,1
            tcpstat.tcps_rcvackbyte += acked;
            sbdrop(&so->so_snd, acked);
 4022884:	24401204 	addi	r17,r4,72
            {
               tcp_xmit_timer(tp);
            }

            tcpstat.tcps_rcvackpack++;
            tcpstat.tcps_rcvackbyte += acked;
 4022888:	1145883a 	add	r2,r2,r5
 402288c:	98802c15 	stw	r2,176(r19)
            sbdrop(&so->so_snd, acked);
 4022890:	8809883a 	mov	r4,r17
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
            {
               tcp_xmit_timer(tp);
            }

            tcpstat.tcps_rcvackpack++;
 4022894:	98c02b15 	stw	r3,172(r19)
            tcpstat.tcps_rcvackbyte += acked;
            sbdrop(&so->so_snd, acked);
 4022898:	4020bec0 	call	4020bec <sbdrop>
            tp->snd_una = ti->ti_ack;
 402289c:	91c00717 	ldw	r7,28(r18)
            m_freem(m);
 40228a0:	8009883a 	mov	r4,r16
            }

            tcpstat.tcps_rcvackpack++;
            tcpstat.tcps_rcvackbyte += acked;
            sbdrop(&so->so_snd, acked);
            tp->snd_una = ti->ti_ack;
 40228a4:	b1c00e15 	stw	r7,56(r22)
            m_freem(m);
 40228a8:	401d74c0 	call	401d74c <m_freem>
             * If process is waiting for space,
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
 40228ac:	b1c00e17 	ldw	r7,56(r22)
 40228b0:	b0801a17 	ldw	r2,104(r22)
 40228b4:	3882ec26 	beq	r7,r2,4023468 <tcp_input+0x1294>
               tp->t_timer[TCPT_REXMT] = 0;
            else if (tp->t_timer[TCPT_PERSIST] == 0)
 40228b8:	b0800417 	ldw	r2,16(r22)
 40228bc:	1000021e 	bne	r2,zero,40228c8 <tcp_input+0x6f4>
               tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 40228c0:	b0800817 	ldw	r2,32(r22)
 40228c4:	b0800315 	stw	r2,12(r22)

            if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 40228c8:	d8c00617 	ldw	r3,24(sp)
 40228cc:	1880190b 	ldhu	r2,100(r3)
 40228d0:	1080030c 	andi	r2,r2,12
 40228d4:	10000426 	beq	r2,zero,40228e8 <tcp_input+0x714>
               sowwakeup(so);
 40228d8:	880b883a 	mov	r5,r17
 40228dc:	1809883a 	mov	r4,r3
 40228e0:	40211d80 	call	40211d8 <sbwakeup>
 40228e4:	b1c00e17 	ldw	r7,56(r22)

            /* If there is more data in the send buffer, and some is
             * still unsent, then call tcp_output() to try to send it
             */
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
 40228e8:	d9000617 	ldw	r4,24(sp)
 40228ec:	b0800f17 	ldw	r2,60(r22)
 40228f0:	20c01217 	ldw	r3,72(r4)
 40228f4:	11c5c83a 	sub	r2,r2,r7
 40228f8:	10fe572e 	bgeu	r2,r3,4022258 <tcp_input+0x84>
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
            m_freem (m);      /* free the received mbuf */
            tcp_output(tp);   /* send the ack now... */
 40228fc:	b009883a 	mov	r4,r22
   m_freem(m);
   /* destroy temporarily created socket */
   if (dropsocket)
      (void) soabort(so);
   return;
}
 4022900:	dfc01317 	ldw	ra,76(sp)
 4022904:	df001217 	ldw	fp,72(sp)
 4022908:	ddc01117 	ldw	r23,68(sp)
 402290c:	dd801017 	ldw	r22,64(sp)
 4022910:	dd400f17 	ldw	r21,60(sp)
 4022914:	dd000e17 	ldw	r20,56(sp)
 4022918:	dcc00d17 	ldw	r19,52(sp)
 402291c:	dc800c17 	ldw	r18,48(sp)
 4022920:	dc400b17 	ldw	r17,44(sp)
 4022924:	dc000a17 	ldw	r16,40(sp)
 4022928:	dec01404 	addi	sp,sp,80
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
            m_freem (m);      /* free the received mbuf */
            tcp_output(tp);   /* send the ack now... */
 402292c:	40239001 	jmpi	4023900 <tcp_output>
       */
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 4022930:	98801f17 	ldw	r2,124(r19)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4022934:	98c02017 	ldw	r3,128(r19)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 4022938:	b900004c 	andi	r4,r23,1
       */
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 402293c:	10800044 	addi	r2,r2,1
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4022940:	19c7883a 	add	r3,r3,r7
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 4022944:	2009003a 	cmpeq	r4,r4,zero
       */
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 4022948:	98801f15 	stw	r2,124(r19)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 402294c:	98c02015 	stw	r3,128(r19)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 4022950:	2000021e 	bne	r4,zero,402295c <tcp_input+0x788>
 4022954:	38800044 	addi	r2,r7,1
 4022958:	88800626 	beq	r17,r2,4022974 <tcp_input+0x7a0>
 402295c:	b880010c 	andi	r2,r23,4
 4022960:	10016b26 	beq	r2,zero,4022f10 <tcp_input+0xd3c>
 4022964:	b0801617 	ldw	r2,88(r22)
 4022968:	90c00617 	ldw	r3,24(r18)
 402296c:	10bfffc4 	addi	r2,r2,-1
 4022970:	1881451e 	bne	r3,r2,4022e88 <tcp_input+0xcb4>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
         {
            todrop = ti->ti_len;
            tiflags &= ~TH_FIN;
            tp->t_flags |= TF_ACKNOW;
 4022974:	b0c00b0b 	ldhu	r3,44(r22)
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
         {
            todrop = ti->ti_len;
            tiflags &= ~TH_FIN;
 4022978:	00bfff84 	movi	r2,-2
 402297c:	b8ae703a 	and	r23,r23,r2
            tp->t_flags |= TF_ACKNOW;
 4022980:	18c00054 	ori	r3,r3,1
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
         {
            todrop = ti->ti_len;
 4022984:	3823883a 	mov	r17,r7
            tiflags &= ~TH_FIN;
            tp->t_flags |= TF_ACKNOW;
 4022988:	b0c00b0d 	sth	r3,44(r22)
 402298c:	003f2806 	br	4022630 <tcp_input+0x45c>
      ti->ti_len -= (u_short)todrop;
      if (ti->ti_urp > (u_short)todrop)
         ti->ti_urp -= (u_short)todrop;
      else 
      {
         tiflags &= ~TH_URG;
 4022990:	00bff7c4 	movi	r2,-33
 4022994:	b8ae703a 	and	r23,r23,r2
         ti->ti_urp = 0;
 4022998:	9000098d 	sth	zero,38(r18)
 402299c:	003f3306 	br	402266c <tcp_input+0x498>
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 40229a0:	000b883a 	mov	r5,zero
 40229a4:	003ef706 	br	4022584 <tcp_input+0x3b0>
    */
   case TCPS_LISTEN: 
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
 40229a8:	b880010c 	andi	r2,r23,4
 40229ac:	10000726 	beq	r2,zero,40229cc <tcp_input+0x7f8>
            GOTO_DROP;
 40229b0:	0080bec4 	movi	r2,763
 40229b4:	d0a84615 	stw	r2,-24296(gp)
   if (dropsocket)
      (void) soabort(so);
   return;

drop:
   if (om)
 40229b8:	d8800717 	ldw	r2,28(sp)
 40229bc:	103e4726 	beq	r2,zero,40222dc <tcp_input+0x108>
      (void) m_free(om);
 40229c0:	1009883a 	mov	r4,r2
 40229c4:	401d6500 	call	401d650 <m_free>
 40229c8:	003e4406 	br	40222dc <tcp_input+0x108>
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
            GOTO_DROP;
         if (tiflags & TH_ACK)
 40229cc:	b880040c 	andi	r2,r23,16
 40229d0:	d8800915 	stw	r2,36(sp)
 40229d4:	07000404 	movi	fp,16
 40229d8:	10001c26 	beq	r2,zero,4022a4c <tcp_input+0x878>
            GOTO_DROPWITHRESET;
 40229dc:	0080bf44 	movi	r2,765
 40229e0:	302b883a 	mov	r21,r6
 40229e4:	d0a84615 	stw	r2,-24296(gp)
 40229e8:	003f5e06 	br	4022764 <tcp_input+0x590>
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 40229ec:	a8800917 	ldw	r2,36(r21)
 40229f0:	a8c00817 	ldw	r3,32(r21)

      switch(so->so_domain)
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
 40229f4:	91000417 	ldw	r4,16(r18)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 40229f8:	10c5c83a 	sub	r2,r2,r3
 40229fc:	10bff604 	addi	r2,r2,-40

      switch(so->so_domain)
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
 4022a00:	89000415 	stw	r4,16(r17)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 4022a04:	88800615 	stw	r2,24(r17)
 4022a08:	003f6f06 	br	40227c8 <tcp_input+0x5f4>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
          SEQ_GT(ti->ti_ack, tp->snd_max)))
      {
         GOTO_DROPWITHRESET;
      }
      if (tiflags & TH_RST) 
 4022a0c:	b880010c 	andi	r2,r23,4
 4022a10:	10001626 	beq	r2,zero,4022a6c <tcp_input+0x898>
      {
         if (tiflags & TH_ACK)
 4022a14:	2800ed26 	beq	r5,zero,4022dcc <tcp_input+0xbf8>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
         GOTO_DROP;
 4022a18:	0080dd84 	movi	r2,886
 4022a1c:	d0a84615 	stw	r2,-24296(gp)
 4022a20:	003fe506 	br	40229b8 <tcp_input+0x7e4>
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
 4022a24:	b880004c 	andi	r2,r23,1
 4022a28:	1005003a 	cmpeq	r2,r2,zero
 4022a2c:	103efa26 	beq	r2,zero,4022618 <tcp_input+0x444>
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 4022a30:	98801f17 	ldw	r2,124(r19)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4022a34:	98c02017 	ldw	r3,128(r19)
       */
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 4022a38:	10800044 	addi	r2,r2,1
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4022a3c:	1c47883a 	add	r3,r3,r17
       */
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 4022a40:	98801f15 	stw	r2,124(r19)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4022a44:	98c02015 	stw	r3,128(r19)
 4022a48:	003fc406 	br	402295c <tcp_input+0x788>

         if (tiflags & TH_RST)
            GOTO_DROP;
         if (tiflags & TH_ACK)
            GOTO_DROPWITHRESET;
         if ((tiflags & TH_SYN) == 0)
 4022a4c:	b880008c 	andi	r2,r23,2
 4022a50:	1000d81e 	bne	r2,zero,4022db4 <tcp_input+0xbe0>
            GOTO_DROP;
 4022a54:	0080bfc4 	movi	r2,767
 4022a58:	d0a84615 	stw	r2,-24296(gp)
 4022a5c:	003fd606 	br	40229b8 <tcp_input+0x7e4>
         tiflags &= ~TH_SYN;
         ti->ti_seq++;
         if (ti->ti_urp > 1) 
            ti->ti_urp--;
         else
            tiflags &= ~TH_URG;
 4022a60:	00bff7c4 	movi	r2,-33
 4022a64:	b8ae703a 	and	r23,r23,r2
 4022a68:	003ee706 	br	4022608 <tcp_input+0x434>
      {
         if (tiflags & TH_ACK)
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
         GOTO_DROP;
      }
      if ((tiflags & TH_SYN) == 0)
 4022a6c:	b880008c 	andi	r2,r23,2
 4022a70:	1000091e 	bne	r2,zero,4022a98 <tcp_input+0x8c4>
         GOTO_DROP;
 4022a74:	0080de44 	movi	r2,889
 4022a78:	d0a84615 	stw	r2,-24296(gp)
 4022a7c:	003fce06 	br	40229b8 <tcp_input+0x7e4>
    * Generate a RST, dropping incoming segment.
    * Make ACK acceptable to originator of segment.
    * Don't bother to respond if destination was broadcast.
    */
#ifdef IP_V4
   if (in_broadcast(ti->ti_dst.s_addr))
 4022a80:	91000417 	ldw	r4,16(r18)
 4022a84:	401d14c0 	call	401d14c <in_broadcast>
 4022a88:	1000b626 	beq	r2,zero,4022d64 <tcp_input+0xb90>
      GOTO_DROP;
 4022a8c:	0081af44 	movi	r2,1725
 4022a90:	d0a84615 	stw	r2,-24296(gp)
 4022a94:	003e1106 	br	40222dc <tcp_input+0x108>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
         GOTO_DROP;
      }
      if ((tiflags & TH_SYN) == 0)
         GOTO_DROP;
      if (tiflags & TH_ACK) 
 4022a98:	2800051e 	bne	r5,zero,4022ab0 <tcp_input+0x8dc>
      {
         tp->snd_una = ti->ti_ack;
 4022a9c:	91c00717 	ldw	r7,28(r18)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 4022aa0:	b0800f17 	ldw	r2,60(r22)
      }
      if ((tiflags & TH_SYN) == 0)
         GOTO_DROP;
      if (tiflags & TH_ACK) 
      {
         tp->snd_una = ti->ti_ack;
 4022aa4:	b1c00e15 	stw	r7,56(r22)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 4022aa8:	11c5c83a 	sub	r2,r2,r7
 4022aac:	10014c16 	blt	r2,zero,4022fe0 <tcp_input+0xe0c>
            tp->snd_nxt = tp->snd_una;
      }
      tp->t_timer[TCPT_REXMT] = 0;
      tp->irs = ti->ti_seq;
 4022ab0:	90800617 	ldw	r2,24(r18)
      {
         tp->snd_una = ti->ti_ack;
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
            tp->snd_nxt = tp->snd_una;
      }
      tp->t_timer[TCPT_REXMT] = 0;
 4022ab4:	b0000315 	stw	zero,12(r22)
      tp->irs = ti->ti_seq;
      tcp_rcvseqinit(tp);
 4022ab8:	12000044 	addi	r8,r2,1
 4022abc:	b2001915 	stw	r8,100(r22)
         tp->snd_una = ti->ti_ack;
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
            tp->snd_nxt = tp->snd_una;
      }
      tp->t_timer[TCPT_REXMT] = 0;
      tp->irs = ti->ti_seq;
 4022ac0:	b0801815 	stw	r2,96(r22)
      tcp_rcvseqinit(tp);
 4022ac4:	b2001615 	stw	r8,88(r22)
      if (inp->inp_laddr.s_addr != ti->ti_dst.s_addr) 
 4022ac8:	90c00417 	ldw	r3,16(r18)
 4022acc:	88800417 	ldw	r2,16(r17)
 4022ad0:	10c00526 	beq	r2,r3,4022ae8 <tcp_input+0x914>
          * the IP interface may have changed address since we sent our SYN
          * (e.g. PPP brings link up as a result of said SYN and gets new
          * address via IPCP); if so we need to update the inpcb and the
          * TCP header template with the new address.
          */
         if ((m->pkt->net != NULL)
 4022ad4:	80800117 	ldw	r2,4(r16)
 4022ad8:	10800617 	ldw	r2,24(r2)
 4022adc:	10000226 	beq	r2,zero,4022ae8 <tcp_input+0x914>
 4022ae0:	10800a17 	ldw	r2,40(r2)
 4022ae4:	18813826 	beq	r3,r2,4022fc8 <tcp_input+0xdf4>
            inp->inp_laddr = ti->ti_dst;
            if (tp->t_template != NULL)
               tp->t_template->ti_src = ti->ti_dst;
         }
      }
      tp->t_flags |= TF_ACKNOW;
 4022ae8:	b0800b0b 	ldhu	r2,44(r22)
 4022aec:	10800054 	ori	r2,r2,1
 4022af0:	b0800b0d 	sth	r2,44(r22)
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
 4022af4:	2800ac1e 	bne	r5,zero,4022da8 <tcp_input+0xbd4>
 4022af8:	b0800e17 	ldw	r2,56(r22)
 4022afc:	b0c01317 	ldw	r3,76(r22)
 4022b00:	10c5c83a 	sub	r2,r2,r3
 4022b04:	0080a80e 	bge	zero,r2,4022da8 <tcp_input+0xbd4>
      {
         tcpstat.tcps_connects++;
 4022b08:	98800217 	ldw	r2,8(r19)
         tp->t_state = TCPS_ESTABLISHED;
         soisconnected (so);
 4022b0c:	d9000617 	ldw	r4,24(sp)
      }
      tp->t_flags |= TF_ACKNOW;
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
      {
         tcpstat.tcps_connects++;
         tp->t_state = TCPS_ESTABLISHED;
 4022b10:	01800104 	movi	r6,4
         }
      }
      tp->t_flags |= TF_ACKNOW;
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
      {
         tcpstat.tcps_connects++;
 4022b14:	10800044 	addi	r2,r2,1
         tp->t_state = TCPS_ESTABLISHED;
 4022b18:	b1800215 	stw	r6,8(r22)
         }
      }
      tp->t_flags |= TF_ACKNOW;
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
      {
         tcpstat.tcps_connects++;
 4022b1c:	98800215 	stw	r2,8(r19)
         tp->t_state = TCPS_ESTABLISHED;
         soisconnected (so);
 4022b20:	402131c0 	call	402131c <soisconnected>
         tp->t_maxseg = tcp_mss(so);
 4022b24:	d9000617 	ldw	r4,24(sp)
 4022b28:	4021b940 	call	4021b94 <tcp_mss>
 4022b2c:	b0800a0d 	sth	r2,40(r22)
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
 4022b30:	b009883a 	mov	r4,r22
 4022b34:	000b883a 	mov	r5,zero
 4022b38:	800d883a 	mov	r6,r16
 4022b3c:	4021f580 	call	4021f58 <tcp_reass>
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
 4022b40:	b0c01e17 	ldw	r3,120(r22)
 4022b44:	18000226 	beq	r3,zero,4022b50 <tcp_input+0x97c>
         {
            tcp_xmit_timer(tp);
 4022b48:	b009883a 	mov	r4,r22
 4022b4c:	4021c400 	call	4021c40 <tcp_xmit_timer>
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
 4022b50:	91800617 	ldw	r6,24(r18)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
 4022b54:	9140028b 	ldhu	r5,10(r18)
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
 4022b58:	31800044 	addi	r6,r6,1
 4022b5c:	91800615 	stw	r6,24(r18)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
 4022b60:	b0801517 	ldw	r2,84(r22)
 4022b64:	1140142e 	bgeu	r2,r5,4022bb8 <tcp_input+0x9e4>
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
 4022b68:	80c00217 	ldw	r3,8(r16)
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
 4022b6c:	10bfffcc 	andi	r2,r2,65535
 4022b70:	28a3c83a 	sub	r17,r5,r2
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
 4022b74:	18010b26 	beq	r3,zero,4022fa4 <tcp_input+0xdd0>
         {
            m_adj(m, -todrop);
 4022b78:	8009883a 	mov	r4,r16
 4022b7c:	044bc83a 	sub	r5,zero,r17
 4022b80:	401cffc0 	call	401cffc <m_adj>
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
         tiflags &= ~TH_FIN;
         tcpstat.tcps_rcvpackafterwin++;
 4022b84:	98802517 	ldw	r2,148(r19)
         tcpstat.tcps_rcvbyteafterwin += todrop;
 4022b88:	98c02617 	ldw	r3,152(r19)
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
 4022b8c:	b1001517 	ldw	r4,84(r22)
         tiflags &= ~TH_FIN;
         tcpstat.tcps_rcvpackafterwin++;
 4022b90:	10800044 	addi	r2,r2,1
         tcpstat.tcps_rcvbyteafterwin += todrop;
 4022b94:	1c47883a 	add	r3,r3,r17
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
         tiflags &= ~TH_FIN;
         tcpstat.tcps_rcvpackafterwin++;
 4022b98:	98802515 	stw	r2,148(r19)
         tcpstat.tcps_rcvbyteafterwin += todrop;
 4022b9c:	98c02615 	stw	r3,152(r19)
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
         tiflags &= ~TH_FIN;
 4022ba0:	00bfff84 	movi	r2,-2
 4022ba4:	b8ae703a 	and	r23,r23,r2
 4022ba8:	91800617 	ldw	r6,24(r18)
 4022bac:	b880040c 	andi	r2,r23,16
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
 4022bb0:	9100028d 	sth	r4,10(r18)
 4022bb4:	d8800915 	stw	r2,36(sp)
         tiflags &= ~TH_FIN;
         tcpstat.tcps_rcvpackafterwin++;
         tcpstat.tcps_rcvbyteafterwin += todrop;
      }
      tp->snd_wl1 = ti->ti_seq - 1;
 4022bb8:	30bfffc4 	addi	r2,r6,-1
 4022bbc:	b0801115 	stw	r2,68(r22)
      tp->rcv_up = ti->ti_seq;
 4022bc0:	90c00617 	ldw	r3,24(r18)
 4022bc4:	df000917 	ldw	fp,36(sp)
 4022bc8:	d8000515 	stw	zero,20(sp)
 4022bcc:	b0c01715 	stw	r3,92(r22)
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
 4022bd0:	e0000526 	beq	fp,zero,4022be8 <tcp_input+0xa14>
 4022bd4:	b1001117 	ldw	r4,68(r22)
 4022bd8:	90c00617 	ldw	r3,24(r18)
 4022bdc:	20c5c83a 	sub	r2,r4,r3
 4022be0:	10016b16 	blt	r2,zero,4023190 <tcp_input+0xfbc>
 4022be4:	20c16226 	beq	r4,r3,4023170 <tcp_input+0xf9c>
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
 4022be8:	b880080c 	andi	r2,r23,32
 4022bec:	10003b26 	beq	r2,zero,4022cdc <tcp_input+0xb08>
 4022bf0:	9100098b 	ldhu	r4,38(r18)
 4022bf4:	20003926 	beq	r4,zero,4022cdc <tcp_input+0xb08>
 4022bf8:	b0c00217 	ldw	r3,8(r22)
 4022bfc:	00800244 	movi	r2,9
 4022c00:	10c03616 	blt	r2,r3,4022cdc <tcp_input+0xb08>
       * This is a kludge, but if we receive and accept
       * random urgent pointers, we'll crash in
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
 4022c04:	d8800617 	ldw	r2,24(sp)
 4022c08:	11400a17 	ldw	r5,40(r2)
 4022c0c:	00900004 	movi	r2,16384
 4022c10:	2147883a 	add	r3,r4,r5
 4022c14:	10c11f2e 	bgeu	r2,r3,4023094 <tcp_input+0xec0>
 4022c18:	91c0028b 	ldhu	r7,10(r18)
      {
         ti->ti_urp = 0;         /* XXX */
         tiflags &= ~TH_URG;     /* XXX */
 4022c1c:	00bff7c4 	movi	r2,-33
 4022c20:	b8ae703a 	and	r23,r23,r2
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
      {
         ti->ti_urp = 0;         /* XXX */
 4022c24:	9000098d 	sth	zero,38(r18)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 4022c28:	3800331e 	bne	r7,zero,4022cf8 <tcp_input+0xb24>
 4022c2c:	b880004c 	andi	r2,r23,1
 4022c30:	1005003a 	cmpeq	r2,r2,zero
 4022c34:	10003026 	beq	r2,zero,4022cf8 <tcp_input+0xb24>
      }
#endif   /* TCP_ZEROCOPY */
   } 
   else
   {
      m_freem(m);
 4022c38:	8009883a 	mov	r4,r16
 4022c3c:	401d74c0 	call	401d74c <m_freem>
      tiflags &= ~TH_FIN;
 4022c40:	00bfff84 	movi	r2,-2
 4022c44:	b8a0703a 	and	r16,r23,r2

   /*
    * If FIN is received ACK the FIN and let the user know
    * that the connection is closing.
    */
   if (tiflags & TH_FIN) 
 4022c48:	8080004c 	andi	r2,r16,1
 4022c4c:	1005003a 	cmpeq	r2,r2,zero
 4022c50:	10001a1e 	bne	r2,zero,4022cbc <tcp_input+0xae8>
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 4022c54:	b1800217 	ldw	r6,8(r22)
 4022c58:	00800244 	movi	r2,9
 4022c5c:	1181350e 	bge	r2,r6,4023134 <tcp_input+0xf60>
      {
         socantrcvmore(so);
         tp->t_flags |= TF_ACKNOW;
         tp->rcv_nxt++;
      }
      switch (tp->t_state) 
 4022c60:	30ffff44 	addi	r3,r6,-3
 4022c64:	008001c4 	movi	r2,7
 4022c68:	10c01436 	bltu	r2,r3,4022cbc <tcp_input+0xae8>
 4022c6c:	18c5883a 	add	r2,r3,r3
 4022c70:	1085883a 	add	r2,r2,r2
 4022c74:	00c100b4 	movhi	r3,1026
 4022c78:	18cb2204 	addi	r3,r3,11400
 4022c7c:	10c5883a 	add	r2,r2,r3
 4022c80:	11000017 	ldw	r4,0(r2)
 4022c84:	2000683a 	jmp	r4
 4022c88:	04023314 	movui	r16,2252
 4022c8c:	04023314 	movui	r16,2252
 4022c90:	04022cbc 	xorhi	r16,zero,2226
 4022c94:	04023370 	cmpltui	r16,zero,2253
 4022c98:	04022cbc 	xorhi	r16,zero,2226
 4022c9c:	04022cbc 	xorhi	r16,zero,2226
 4022ca0:	0402337c 	xorhi	r16,zero,2253
 4022ca4:	04022ca8 	cmpgeui	r16,zero,2226

      /*
       * In TIME_WAIT state restart the 2 MSL time_wait timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 4022ca8:	00c10134 	movhi	r3,1028
 4022cac:	18e13304 	addi	r3,r3,-31540
 4022cb0:	18800017 	ldw	r2,0(r3)
 4022cb4:	1085883a 	add	r2,r2,r2
 4022cb8:	b0800615 	stw	r2,24(r22)
    ostate, tp, &tcp_saveti);
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
 4022cbc:	d8c00517 	ldw	r3,20(sp)
 4022cc0:	1804c03a 	cmpne	r2,r3,zero
 4022cc4:	103f0d1e 	bne	r2,zero,40228fc <tcp_input+0x728>
 4022cc8:	b0800b0b 	ldhu	r2,44(r22)
 4022ccc:	1080004c 	andi	r2,r2,1
 4022cd0:	1005003a 	cmpeq	r2,r2,zero
 4022cd4:	103f0926 	beq	r2,zero,40228fc <tcp_input+0x728>
 4022cd8:	003d5f06 	br	4022258 <tcp_input+0x84>
      /*
       * If no out of band data is expected,
       * pull receive urgent pointer along
       * with the receive window.
       */
   if (SEQ_GT(tp->rcv_nxt, tp->rcv_up))
 4022cdc:	b0c01617 	ldw	r3,88(r22)
 4022ce0:	b0801717 	ldw	r2,92(r22)
 4022ce4:	1885c83a 	sub	r2,r3,r2
 4022ce8:	0080b20e 	bge	zero,r2,4022fb4 <tcp_input+0xde0>
 4022cec:	91c0028b 	ldhu	r7,10(r18)
      tp->rcv_up = tp->rcv_nxt;
 4022cf0:	b0c01715 	stw	r3,92(r22)
 4022cf4:	003fcc06 	br	4022c28 <tcp_input+0xa54>
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 4022cf8:	b1000217 	ldw	r4,8(r22)
 4022cfc:	00800244 	movi	r2,9
 4022d00:	113fcd16 	blt	r2,r4,4022c38 <tcp_input+0xa64>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
 4022d04:	90c00617 	ldw	r3,24(r18)
 4022d08:	b0801617 	ldw	r2,88(r22)
 4022d0c:	1880021e 	bne	r3,r2,4022d18 <tcp_input+0xb44>
 4022d10:	b0800017 	ldw	r2,0(r22)
 4022d14:	1581ac26 	beq	r2,r22,40233c8 <tcp_input+0x11f4>
#endif /* TCP_SACK */
      }
      else     /* received out of sequence segment */
      {
         /* Drop it in the reassmbly queue */
         tiflags = tcp_reass(tp, ti, m);
 4022d18:	800d883a 	mov	r6,r16
 4022d1c:	900b883a 	mov	r5,r18
 4022d20:	b009883a 	mov	r4,r22
 4022d24:	4021f580 	call	4021f58 <tcp_reass>
 4022d28:	1021883a 	mov	r16,r2
         tp->t_flags |= TF_ACKNOW;
 4022d2c:	b0800b0b 	ldhu	r2,44(r22)
 4022d30:	10800054 	ori	r2,r2,1
 4022d34:	b0800b0d 	sth	r2,44(r22)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
 4022d38:	d9400617 	ldw	r5,24(sp)
 4022d3c:	b0801917 	ldw	r2,100(r22)
 4022d40:	b0c01617 	ldw	r3,88(r22)
 4022d44:	29000b17 	ldw	r4,44(r5)
      if (len > (int)tp->max_rcvd)
 4022d48:	b1402217 	ldw	r5,136(r22)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
 4022d4c:	10c5c83a 	sub	r2,r2,r3
 4022d50:	2085c83a 	sub	r2,r4,r2
      if (len > (int)tp->max_rcvd)
 4022d54:	28bfbc0e 	bge	r5,r2,4022c48 <tcp_input+0xa74>
         tp->max_rcvd = (u_short)len;
 4022d58:	10bfffcc 	andi	r2,r2,65535
 4022d5c:	b0802215 	stw	r2,136(r22)
 4022d60:	003fb906 	br	4022c48 <tcp_input+0xa74>
      IP6CPY(&(m->pkt->ip6_hdr->ip_src), &ip6_src);
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
 4022d64:	b880040c 	andi	r2,r23,16
 4022d68:	1000531e 	bne	r2,zero,4022eb8 <tcp_input+0xce4>
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
   else
   {
      if (tiflags & TH_SYN)
 4022d6c:	b880008c 	andi	r2,r23,2
 4022d70:	10004f26 	beq	r2,zero,4022eb0 <tcp_input+0xcdc>
         ti->ti_seq++;
 4022d74:	91800617 	ldw	r6,24(r18)
 4022d78:	31800044 	addi	r6,r6,1
 4022d7c:	91800615 	stw	r6,24(r18)
      tcp_respond(tp, ti, ti->ti_seq, (tcp_seq)0, TH_RST|TH_ACK, m);
 4022d80:	00800504 	movi	r2,20
 4022d84:	b009883a 	mov	r4,r22
 4022d88:	900b883a 	mov	r5,r18
 4022d8c:	000f883a 	mov	r7,zero
 4022d90:	d8800015 	stw	r2,0(sp)
 4022d94:	dc000115 	stw	r16,4(sp)
 4022d98:	402466c0 	call	402466c <tcp_respond>
   }
   /* destroy temporarily created socket */
   if (dropsocket)
 4022d9c:	d9400417 	ldw	r5,16(sp)
 4022da0:	283d2d26 	beq	r5,zero,4022258 <tcp_input+0x84>
 4022da4:	003d5106 	br	40222ec <tcp_input+0x118>
         if (tp->t_rttick) 
         {
            tcp_xmit_timer(tp);
         }
      } else
         tp->t_state = TCPS_SYN_RECEIVED;
 4022da8:	018000c4 	movi	r6,3
 4022dac:	b1800215 	stw	r6,8(r22)
 4022db0:	003f6706 	br	4022b50 <tcp_input+0x97c>
            GOTO_DROP;
         if (tiflags & TH_ACK)
            GOTO_DROPWITHRESET;
         if ((tiflags & TH_SYN) == 0)
            GOTO_DROP;
         if(in_broadcast(ti->ti_dst.s_addr))
 4022db4:	91000417 	ldw	r4,16(r18)
 4022db8:	401d14c0 	call	401d14c <in_broadcast>
 4022dbc:	10005b26 	beq	r2,zero,4022f2c <tcp_input+0xd58>
            GOTO_DROP;
 4022dc0:	0080c044 	movi	r2,769
 4022dc4:	d0a84615 	stw	r2,-24296(gp)
 4022dc8:	003efb06 	br	40229b8 <tcp_input+0x7e4>
         GOTO_DROPWITHRESET;
      }
      if (tiflags & TH_RST) 
      {
         if (tiflags & TH_ACK)
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
 4022dcc:	b009883a 	mov	r4,r22
 4022dd0:	01401bc4 	movi	r5,111
 4022dd4:	40244a40 	call	40244a4 <tcp_drop>
 4022dd8:	003f0f06 	br	4022a18 <tcp_input+0x844>
            tp->t_flags |= TF_ACKNOW;
            tcpstat.tcps_rcvwinprobe++;
         } else
            goto dropafterack;
      } else
         tcpstat.tcps_rcvbyteafterwin += todrop;
 4022ddc:	28802617 	ldw	r2,152(r5)
 4022de0:	1445883a 	add	r2,r2,r17
 4022de4:	28802615 	stw	r2,152(r5)
      /* XXX work around m_adj bug */
      if (m->m_len) 
 4022de8:	80800217 	ldw	r2,8(r16)
 4022dec:	10010d26 	beq	r2,zero,4023224 <tcp_input+0x1050>
      {
         m_adj(m, -todrop);
 4022df0:	8009883a 	mov	r4,r16
 4022df4:	044bc83a 	sub	r5,zero,r17
 4022df8:	401cffc0 	call	401cffc <m_adj>
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
      }
      ti->ti_len -= (u_short)todrop;
 4022dfc:	9080028b 	ldhu	r2,10(r18)
      tiflags &= ~(TH_PUSH|TH_FIN);
 4022e00:	00fffd84 	movi	r3,-10
 4022e04:	b8ee703a 	and	r23,r23,r3
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
      }
      ti->ti_len -= (u_short)todrop;
 4022e08:	1445c83a 	sub	r2,r2,r17
 4022e0c:	9080028d 	sth	r2,10(r18)
      tiflags &= ~TH_RST;  /* clear reset flag */
      goto dropafterack;   /* send an ack and drop current packet */
   }
#endif /* DOS_RST */

   if (tiflags&TH_RST) 
 4022e10:	b8c0010c 	andi	r3,r23,4
 4022e14:	182b003a 	cmpeq	r21,r3,zero
 4022e18:	a8001e1e 	bne	r21,zero,4022e94 <tcp_input+0xcc0>
   {
      switch (tp->t_state) 
 4022e1c:	b0800217 	ldw	r2,8(r22)
 4022e20:	00c001c4 	movi	r3,7
 4022e24:	10bfff44 	addi	r2,r2,-3
 4022e28:	18801a36 	bltu	r3,r2,4022e94 <tcp_input+0xcc0>
 4022e2c:	1085883a 	add	r2,r2,r2
 4022e30:	1085883a 	add	r2,r2,r2
 4022e34:	00c100b4 	movhi	r3,1026
 4022e38:	18cb9204 	addi	r3,r3,11848
 4022e3c:	10c5883a 	add	r2,r2,r3
 4022e40:	11000017 	ldw	r4,0(r2)
 4022e44:	2000683a 	jmp	r4
 4022e48:	040233b8 	rdprs	r16,zero,2254
 4022e4c:	04023334 	movhi	r16,2252
 4022e50:	04023340 	call	402334 <OSCtxSw_SWITCH_PC+0x4022f4>
 4022e54:	04023340 	call	402334 <OSCtxSw_SWITCH_PC+0x4022f4>
 4022e58:	04023320 	cmpeqi	r16,zero,2252
 4022e5c:	04023320 	cmpeqi	r16,zero,2252
 4022e60:	04023340 	call	402334 <OSCtxSw_SWITCH_PC+0x4022f4>
 4022e64:	04023320 	cmpeqi	r16,zero,2252
          * window edge, and have to drop data and PUSH from
          * incoming segments.  Continue processing, but
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
 4022e68:	b0801517 	ldw	r2,84(r22)
 4022e6c:	1000031e 	bne	r2,zero,4022e7c <tcp_input+0xca8>
 4022e70:	90c00617 	ldw	r3,24(r18)
 4022e74:	b0801617 	ldw	r2,88(r22)
 4022e78:	1880a726 	beq	r3,r2,4023118 <tcp_input+0xf44>
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
      (void) tcp_output(tp);
 4022e7c:	b8c0010c 	andi	r3,r23,4
 4022e80:	182b003a 	cmpeq	r21,r3,zero
dropafterack:
   /*
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
 4022e84:	a800221e 	bne	r21,zero,4022f10 <tcp_input+0xd3c>
      GOTO_DROP;
 4022e88:	0081a904 	movi	r2,1700
 4022e8c:	d0a84615 	stw	r2,-24296(gp)
 4022e90:	003ec906 	br	40229b8 <tcp_input+0x7e4>
     tcp_trace("rcvd SYN in established state - ignoring SYN.\n");
#endif
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
 4022e94:	b880008c 	andi	r2,r23,2
 4022e98:	1000d61e 	bne	r2,zero,40231f4 <tcp_input+0x1020>
#endif /* end of else of DOS_SYN */

   /*
    * If the ACK bit is off we drop the segment and return.
    */
   if ((tiflags & TH_ACK) == 0)
 4022e9c:	bf00040c 	andi	fp,r23,16
 4022ea0:	e000cc1e 	bne	fp,zero,40231d4 <tcp_input+0x1000>
      GOTO_DROP;
 4022ea4:	00812d04 	movi	r2,1204
 4022ea8:	d0a84615 	stw	r2,-24296(gp)
 4022eac:	003ec206 	br	40229b8 <tcp_input+0x7e4>
 4022eb0:	91800617 	ldw	r6,24(r18)
 4022eb4:	003fb206 	br	4022d80 <tcp_input+0xbac>
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
 4022eb8:	91c00717 	ldw	r7,28(r18)
 4022ebc:	00800104 	movi	r2,4
 4022ec0:	b009883a 	mov	r4,r22
 4022ec4:	900b883a 	mov	r5,r18
 4022ec8:	000d883a 	mov	r6,zero
 4022ecc:	d8800015 	stw	r2,0(sp)
 4022ed0:	dc000115 	stw	r16,4(sp)
 4022ed4:	402466c0 	call	402466c <tcp_respond>
 4022ed8:	003fb006 	br	4022d9c <tcp_input+0xbc8>
      GOTO_DROPWITHRESET;
   tp = intotcpcb (inp);
   if (tp == 0)
      GOTO_DROPWITHRESET;
   if (tp->t_state == TCPS_CLOSED)
      GOTO_DROP;
 4022edc:	00806c44 	movi	r2,433
 4022ee0:	d0a84615 	stw	r2,-24296(gp)
 4022ee4:	003eb406 	br	40229b8 <tcp_input+0x7e4>
    */
   if (inp == 0)
      GOTO_DROPWITHRESET;
   tp = intotcpcb (inp);
   if (tp == 0)
      GOTO_DROPWITHRESET;
 4022ee8:	b8c0010c 	andi	r3,r23,4
 4022eec:	00806bc4 	movi	r2,431
 4022ef0:	182b003a 	cmpeq	r21,r3,zero
 4022ef4:	d0a84615 	stw	r2,-24296(gp)
 4022ef8:	003e1a06 	br	4022764 <tcp_input+0x590>
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
      GOTO_DROPWITHRESET;
 4022efc:	b8c0010c 	andi	r3,r23,4
 4022f00:	00806b04 	movi	r2,428
 4022f04:	182b003a 	cmpeq	r21,r3,zero
 4022f08:	d0a84615 	stw	r2,-24296(gp)
 4022f0c:	003e1506 	br	4022764 <tcp_input+0x590>
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
      GOTO_DROP;
   m_freem (m);
 4022f10:	8009883a 	mov	r4,r16
 4022f14:	401d74c0 	call	401d74c <m_freem>
   tp->t_flags |= TF_ACKNOW;
 4022f18:	b0800b0b 	ldhu	r2,44(r22)
   (void) tcp_output (tp);
 4022f1c:	b009883a 	mov	r4,r22
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
      GOTO_DROP;
   m_freem (m);
   tp->t_flags |= TF_ACKNOW;
 4022f20:	10800054 	ori	r2,r2,1
 4022f24:	b0800b0d 	sth	r2,44(r22)
 4022f28:	003e7506 	br	4022900 <tcp_input+0x72c>
            GOTO_DROPWITHRESET;
         if ((tiflags & TH_SYN) == 0)
            GOTO_DROP;
         if(in_broadcast(ti->ti_dst.s_addr))
            GOTO_DROP;
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 4022f2c:	01000244 	movi	r4,9
 4022f30:	e00b883a 	mov	r5,fp
 4022f34:	401dad40 	call	401dad4 <m_getnbuf>
 4022f38:	1029883a 	mov	r20,r2
         if (am == NULL)
 4022f3c:	10011b26 	beq	r2,zero,40233ac <tcp_input+0x11d8>
            GOTO_DROP;

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
 4022f40:	88c00817 	ldw	r3,32(r17)
 4022f44:	00800084 	movi	r2,2
 4022f48:	18c00517 	ldw	r3,20(r3)
 4022f4c:	1880291e 	bne	r3,r2,4022ff4 <tcp_input+0xe20>
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
         sin = mtod(am, struct sockaddr_in *);
 4022f50:	a0800317 	ldw	r2,12(r20)
         sin->sin_family = AF_INET;
         sin->sin_addr = ti->ti_src;
 4022f54:	91000317 	ldw	r4,12(r18)

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
 4022f58:	a7000215 	stw	fp,8(r20)
         sin = mtod(am, struct sockaddr_in *);
         sin->sin_family = AF_INET;
 4022f5c:	10c0000d 	sth	r3,0(r2)
         sin->sin_addr = ti->ti_src;
 4022f60:	11000115 	stw	r4,4(r2)
         sin->sin_port = ti->ti_sport;
 4022f64:	90c0050b 	ldhu	r3,20(r18)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
 4022f68:	8f000417 	ldw	fp,16(r17)
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
         sin = mtod(am, struct sockaddr_in *);
         sin->sin_family = AF_INET;
         sin->sin_addr = ti->ti_src;
         sin->sin_port = ti->ti_sport;
 4022f6c:	10c0008d 	sth	r3,2(r2)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
         if (inp->inp_laddr.s_addr == INADDR_ANY)
 4022f70:	e000021e 	bne	fp,zero,4022f7c <tcp_input+0xda8>
            inp->inp_laddr = ti->ti_dst;
 4022f74:	90800417 	ldw	r2,16(r18)
 4022f78:	88800415 	stw	r2,16(r17)
         if (in_pcbconnect (inp, am)) 
 4022f7c:	8809883a 	mov	r4,r17
 4022f80:	a00b883a 	mov	r5,r20
 4022f84:	402e3880 	call	402e388 <in_pcbconnect>
 4022f88:	10001726 	beq	r2,zero,4022fe8 <tcp_input+0xe14>
         {
            inp->inp_laddr = laddr;
 4022f8c:	8f000415 	stw	fp,16(r17)
            (void) m_free(am);
 4022f90:	a009883a 	mov	r4,r20
 4022f94:	401d6500 	call	401d650 <m_free>
            GOTO_DROP;
 4022f98:	00c0c684 	movi	r3,794
 4022f9c:	d0e84615 	stw	r3,-24296(gp)
 4022fa0:	003e8506 	br	40229b8 <tcp_input+0x7e4>
            m_adj(m, -todrop);
         }
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
 4022fa4:	81000617 	ldw	r4,24(r16)
 4022fa8:	044bc83a 	sub	r5,zero,r17
 4022fac:	401cffc0 	call	401cffc <m_adj>
 4022fb0:	003ef406 	br	4022b84 <tcp_input+0x9b0>
 4022fb4:	91c0028b 	ldhu	r7,10(r18)
 4022fb8:	003f1b06 	br	4022c28 <tcp_input+0xa54>

   if (so->so_options & SO_ACCEPTCONN) 
   {
      so = sonewconn(so);
      if (so == 0)
         GOTO_DROP;
 4022fbc:	00807344 	movi	r2,461
 4022fc0:	d0a84615 	stw	r2,-24296(gp)
 4022fc4:	003e7c06 	br	40229b8 <tcp_input+0x7e4>
         if ((m->pkt->net != NULL)
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
            if (tp->t_template != NULL)
 4022fc8:	b1000c17 	ldw	r4,48(r22)
          */
         if ((m->pkt->net != NULL)
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
 4022fcc:	88c00415 	stw	r3,16(r17)
            if (tp->t_template != NULL)
 4022fd0:	203ec526 	beq	r4,zero,4022ae8 <tcp_input+0x914>
               tp->t_template->ti_src = ti->ti_dst;
 4022fd4:	90800417 	ldw	r2,16(r18)
 4022fd8:	20800315 	stw	r2,12(r4)
 4022fdc:	003ec206 	br	4022ae8 <tcp_input+0x914>
         GOTO_DROP;
      if (tiflags & TH_ACK) 
      {
         tp->snd_una = ti->ti_ack;
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
            tp->snd_nxt = tp->snd_una;
 4022fe0:	b1c00f15 	stw	r7,60(r22)
 4022fe4:	003eb206 	br	4022ab0 <tcp_input+0x8dc>
            inp->inp_laddr = laddr;
            (void) m_free(am);
            GOTO_DROP;
         }
         
         inp->ifp = ifp;      /* set interface for conn.*/
 4022fe8:	8d400a15 	stw	r21,40(r17)
         
         (void) m_free (am);
 4022fec:	a009883a 	mov	r4,r20
 4022ff0:	401d6500 	call	401d650 <m_free>
            }
            (void) m_free(am);
         }
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
 4022ff4:	b009883a 	mov	r4,r22
 4022ff8:	40245d00 	call	40245d0 <tcp_template>
 4022ffc:	b0800c15 	stw	r2,48(r22)
         if (tp->t_template == 0) 
 4023000:	1000bd26 	beq	r2,zero,40232f8 <tcp_input+0x1124>
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
            dropsocket = 0;      /* socket is already gone */
            GOTO_DROP;
         }
         if (om) 
 4023004:	d8c00717 	ldw	r3,28(sp)
 4023008:	18000426 	beq	r3,zero,402301c <tcp_input+0xe48>
         {
            tcp_dooptions(tp, om, ti);
 402300c:	180b883a 	mov	r5,r3
 4023010:	b009883a 	mov	r4,r22
 4023014:	900d883a 	mov	r6,r18
 4023018:	4021e500 	call	4021e50 <tcp_dooptions>
            om = 0;
         }
         if (iss)
 402301c:	d9000317 	ldw	r4,12(sp)
 4023020:	20004e26 	beq	r4,zero,402315c <tcp_input+0xf88>
 4023024:	01410134 	movhi	r5,1028
 4023028:	29694004 	addi	r5,r5,-23296
            tp->iss = iss;
 402302c:	b1001315 	stw	r4,76(r22)
         else
            tp->iss = tcp_iss;
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
 4023030:	28800017 	ldw	r2,0(r5)
 4023034:	00fe9fd4 	movui	r3,64127
         tp->irs = ti->ti_seq;
         tcp_sendseqinit(tp);
         tcp_rcvseqinit(tp);
         tp->t_flags |= TF_ACKNOW;
 4023038:	b1000b0b 	ldhu	r4,44(r22)
         }
         if (iss)
            tp->iss = iss;
         else
            tp->iss = tcp_iss;
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
 402303c:	10c5883a 	add	r2,r2,r3
 4023040:	28800015 	stw	r2,0(r5)
         tp->irs = ti->ti_seq;
 4023044:	90c00617 	ldw	r3,24(r18)
         tcp_sendseqinit(tp);
 4023048:	b0801317 	ldw	r2,76(r22)
         tcp_rcvseqinit(tp);
         tp->t_flags |= TF_ACKNOW;
 402304c:	21000054 	ori	r4,r4,1
         else
            tp->iss = tcp_iss;
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
         tp->irs = ti->ti_seq;
         tcp_sendseqinit(tp);
         tcp_rcvseqinit(tp);
 4023050:	1a000044 	addi	r8,r3,1
            tp->iss = iss;
         else
            tp->iss = tcp_iss;
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
         tp->irs = ti->ti_seq;
         tcp_sendseqinit(tp);
 4023054:	b0800e15 	stw	r2,56(r22)
 4023058:	b0801015 	stw	r2,64(r22)
 402305c:	b0801a15 	stw	r2,104(r22)
 4023060:	b0800f15 	stw	r2,60(r22)
         tcp_rcvseqinit(tp);
 4023064:	b2001915 	stw	r8,100(r22)
         if (iss)
            tp->iss = iss;
         else
            tp->iss = tcp_iss;
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
         tp->irs = ti->ti_seq;
 4023068:	b0c01815 	stw	r3,96(r22)
         tcp_sendseqinit(tp);
         tcp_rcvseqinit(tp);
 402306c:	b2001615 	stw	r8,88(r22)
         tp->t_flags |= TF_ACKNOW;
         tp->t_state = TCPS_SYN_RECEIVED;
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
         dropsocket = 0;      /* committed to socket */
         tcpstat.tcps_accepts++;
 4023070:	98c00117 	ldw	r3,4(r19)
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
         tp->irs = ti->ti_seq;
         tcp_sendseqinit(tp);
         tcp_rcvseqinit(tp);
         tp->t_flags |= TF_ACKNOW;
         tp->t_state = TCPS_SYN_RECEIVED;
 4023074:	018000c4 	movi	r6,3
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 4023078:	00802584 	movi	r2,150
         dropsocket = 0;      /* committed to socket */
         tcpstat.tcps_accepts++;
 402307c:	18c00044 	addi	r3,r3,1
            tp->iss = tcp_iss;
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
         tp->irs = ti->ti_seq;
         tcp_sendseqinit(tp);
         tcp_rcvseqinit(tp);
         tp->t_flags |= TF_ACKNOW;
 4023080:	b1000b0d 	sth	r4,44(r22)
         tp->t_state = TCPS_SYN_RECEIVED;
 4023084:	b1800215 	stw	r6,8(r22)
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 4023088:	b0800515 	stw	r2,20(r22)
         dropsocket = 0;      /* committed to socket */
         tcpstat.tcps_accepts++;
 402308c:	98c00115 	stw	r3,4(r19)
 4023090:	003eaf06 	br	4022b50 <tcp_input+0x97c>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
 4023094:	90c00617 	ldw	r3,24(r18)
 4023098:	b0801717 	ldw	r2,92(r22)
 402309c:	20c7883a 	add	r3,r4,r3
 40230a0:	1885c83a 	sub	r2,r3,r2
 40230a4:	0080100e 	bge	zero,r2,40230e8 <tcp_input+0xf14>
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
         so->so_oobmark = so->so_rcv.sb_cc +
 40230a8:	b0801617 	ldw	r2,88(r22)
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
 40230ac:	b0c01715 	stw	r3,92(r22)
         so->so_oobmark = so->so_rcv.sb_cc +
 40230b0:	1885c83a 	sub	r2,r3,r2
 40230b4:	d8c00617 	ldw	r3,24(sp)
 40230b8:	1145883a 	add	r2,r2,r5
 40230bc:	10bfffc4 	addi	r2,r2,-1
 40230c0:	18801a15 	stw	r2,104(r3)
         (tp->rcv_up - tp->rcv_nxt) - 1;
         if (so->so_oobmark == 0)
 40230c4:	1000031e 	bne	r2,zero,40230d4 <tcp_input+0xf00>
            so->so_state |= SS_RCVATMARK;
 40230c8:	1880088b 	ldhu	r2,34(r3)
 40230cc:	10801014 	ori	r2,r2,64
 40230d0:	1880088d 	sth	r2,34(r3)
         sohasoutofband(so);
 40230d4:	d9000617 	ldw	r4,24(sp)
 40230d8:	401f6d40 	call	401f6d4 <sohasoutofband>
         tp->t_oobflags &= ~(TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 40230dc:	b0802403 	ldbu	r2,144(r22)
 40230e0:	10803f0c 	andi	r2,r2,252
 40230e4:	b0802405 	stb	r2,144(r22)
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
 40230e8:	9080098b 	ldhu	r2,38(r18)
 40230ec:	91c0028b 	ldhu	r7,10(r18)
 40230f0:	38becd36 	bltu	r7,r2,4022c28 <tcp_input+0xa54>
 40230f4:	d9000617 	ldw	r4,24(sp)
 40230f8:	20800417 	ldw	r2,16(r4)
 40230fc:	1080400c 	andi	r2,r2,256
 4023100:	103ec91e 	bne	r2,zero,4022c28 <tcp_input+0xa54>
#ifdef SO_OOBINLINE
       && (so->so_options & SO_OOBINLINE) == 0
#endif
       )
      {
         tcp_pulloutofband(so, ti, m);
 4023104:	900b883a 	mov	r5,r18
 4023108:	800d883a 	mov	r6,r16
 402310c:	4021d940 	call	4021d94 <tcp_pulloutofband>
 4023110:	91c0028b 	ldhu	r7,10(r18)
 4023114:	003ec406 	br	4022c28 <tcp_input+0xa54>
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
         {
            tp->t_flags |= TF_ACKNOW;
 4023118:	b0800b0b 	ldhu	r2,44(r22)
            tcpstat.tcps_rcvwinprobe++;
 402311c:	98c02817 	ldw	r3,160(r19)
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
         {
            tp->t_flags |= TF_ACKNOW;
 4023120:	10800054 	ori	r2,r2,1
            tcpstat.tcps_rcvwinprobe++;
 4023124:	18c00044 	addi	r3,r3,1
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
         {
            tp->t_flags |= TF_ACKNOW;
 4023128:	b0800b0d 	sth	r2,44(r22)
            tcpstat.tcps_rcvwinprobe++;
 402312c:	98c02815 	stw	r3,160(r19)
 4023130:	003f2d06 	br	4022de8 <tcp_input+0xc14>
    */
   if (tiflags & TH_FIN) 
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
      {
         socantrcvmore(so);
 4023134:	d9000617 	ldw	r4,24(sp)
 4023138:	40212400 	call	4021240 <socantrcvmore>
         tp->t_flags |= TF_ACKNOW;
 402313c:	b0800b0b 	ldhu	r2,44(r22)
         tp->rcv_nxt++;
 4023140:	b0c01617 	ldw	r3,88(r22)
 4023144:	b1800217 	ldw	r6,8(r22)
   if (tiflags & TH_FIN) 
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
      {
         socantrcvmore(so);
         tp->t_flags |= TF_ACKNOW;
 4023148:	10800054 	ori	r2,r2,1
         tp->rcv_nxt++;
 402314c:	18c00044 	addi	r3,r3,1
   if (tiflags & TH_FIN) 
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
      {
         socantrcvmore(so);
         tp->t_flags |= TF_ACKNOW;
 4023150:	b0800b0d 	sth	r2,44(r22)
         tp->rcv_nxt++;
 4023154:	b0c01615 	stw	r3,88(r22)
 4023158:	003ec106 	br	4022c60 <tcp_input+0xa8c>
            om = 0;
         }
         if (iss)
            tp->iss = iss;
         else
            tp->iss = tcp_iss;
 402315c:	01410134 	movhi	r5,1028
 4023160:	29694004 	addi	r5,r5,-23296
 4023164:	28800017 	ldw	r2,0(r5)
 4023168:	b0801315 	stw	r2,76(r22)
 402316c:	003fb006 	br	4023030 <tcp_input+0xe5c>
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
 4023170:	b1001217 	ldw	r4,72(r22)
 4023174:	90c00717 	ldw	r3,28(r18)
 4023178:	20c5c83a 	sub	r2,r4,r3
 402317c:	10000416 	blt	r2,zero,4023190 <tcp_input+0xfbc>
 4023180:	20fe991e 	bne	r4,r3,4022be8 <tcp_input+0xa14>
 4023184:	b0801417 	ldw	r2,80(r22)
 4023188:	d9400217 	ldw	r5,8(sp)
 402318c:	117e962e 	bgeu	r2,r5,4022be8 <tcp_input+0xa14>
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
 4023190:	91c0028b 	ldhu	r7,10(r18)
 4023194:	3800031e 	bne	r7,zero,40231a4 <tcp_input+0xfd0>
 4023198:	b0c01217 	ldw	r3,72(r22)
 402319c:	90800717 	ldw	r2,28(r18)
 40231a0:	18802426 	beq	r3,r2,4023234 <tcp_input+0x1060>
          (tp->snd_wl2 == ti->ti_ack) &&
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
      }
      tp->snd_wnd = rx_win;
 40231a4:	d9000217 	ldw	r4,8(sp)
      tp->snd_wl1 = ti->ti_seq;
      tp->snd_wl2 = ti->ti_ack;
      if (tp->snd_wnd > tp->max_sndwnd)
 40231a8:	d9400217 	ldw	r5,8(sp)
          (tp->snd_wl2 == ti->ti_ack) &&
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
      }
      tp->snd_wnd = rx_win;
 40231ac:	b1001415 	stw	r4,80(r22)
      tp->snd_wl1 = ti->ti_seq;
 40231b0:	90800617 	ldw	r2,24(r18)
      tp->snd_wl2 = ti->ti_ack;
      if (tp->snd_wnd > tp->max_sndwnd)
 40231b4:	b1002317 	ldw	r4,140(r22)
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
      }
      tp->snd_wnd = rx_win;
      tp->snd_wl1 = ti->ti_seq;
 40231b8:	b0801115 	stw	r2,68(r22)
      tp->snd_wl2 = ti->ti_ack;
 40231bc:	90c00717 	ldw	r3,28(r18)
 40231c0:	b0c01215 	stw	r3,72(r22)
      if (tp->snd_wnd > tp->max_sndwnd)
 40231c4:	21401236 	bltu	r4,r5,4023210 <tcp_input+0x103c>
 40231c8:	00800044 	movi	r2,1
 40231cc:	d8800515 	stw	r2,20(sp)
 40231d0:	003e8506 	br	4022be8 <tcp_input+0xa14>
      GOTO_DROP;

   /*
    * Ack processing.
    */
   switch (tp->t_state) 
 40231d4:	b0c00217 	ldw	r3,8(r22)
 40231d8:	008000c4 	movi	r2,3
 40231dc:	18803c26 	beq	r3,r2,40232d0 <tcp_input+0x10fc>
 40231e0:	18800216 	blt	r3,r2,40231ec <tcp_input+0x1018>
 40231e4:	00800284 	movi	r2,10
 40231e8:	10c02d0e 	bge	r2,r3,40232a0 <tcp_input+0x10cc>
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
         goto dropafterack;
 40231ec:	d8000515 	stw	zero,20(sp)
 40231f0:	003e7706 	br	4022bd0 <tcp_input+0x9fc>
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
   {
      tp = tcp_drop(tp, ECONNRESET);
 40231f4:	b009883a 	mov	r4,r22
 40231f8:	01401a04 	movi	r5,104
 40231fc:	40244a40 	call	40244a4 <tcp_drop>
 4023200:	102d883a 	mov	r22,r2
      GOTO_DROPWITHRESET;
 4023204:	00812b04 	movi	r2,1196
 4023208:	d0a84615 	stw	r2,-24296(gp)
 402320c:	003d5506 	br	4022764 <tcp_input+0x590>
      }
      tp->snd_wnd = rx_win;
      tp->snd_wl1 = ti->ti_seq;
      tp->snd_wl2 = ti->ti_ack;
      if (tp->snd_wnd > tp->max_sndwnd)
         tp->max_sndwnd = tp->snd_wnd;
 4023210:	d8c00217 	ldw	r3,8(sp)
 4023214:	01000044 	movi	r4,1
 4023218:	d9000515 	stw	r4,20(sp)
 402321c:	b0c02315 	stw	r3,140(r22)
 4023220:	003e7106 	br	4022be8 <tcp_input+0xa14>
         m_adj(m, -todrop);
      }
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
 4023224:	81000617 	ldw	r4,24(r16)
 4023228:	044bc83a 	sub	r5,zero,r17
 402322c:	401cffc0 	call	401cffc <m_adj>
 4023230:	003ef206 	br	4022dfc <tcp_input+0xc28>
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
 4023234:	b0801417 	ldw	r2,80(r22)
 4023238:	d8c00217 	ldw	r3,8(sp)
 402323c:	10ffd92e 	bgeu	r2,r3,40231a4 <tcp_input+0xfd0>
          (tp->snd_wl2 == ti->ti_ack) &&
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
 4023240:	98802d17 	ldw	r2,180(r19)
 4023244:	10800044 	addi	r2,r2,1
 4023248:	98802d15 	stw	r2,180(r19)
 402324c:	003fd506 	br	40231a4 <tcp_input+0xfd0>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 4023250:	b0801a17 	ldw	r2,104(r22)
 4023254:	1885c83a 	sub	r2,r3,r2
 4023258:	00802116 	blt	zero,r2,40232e0 <tcp_input+0x110c>
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
         GOTO_DROPWITHRESET;
      }
      tcpstat.tcps_connects++;
 402325c:	98800217 	ldw	r2,8(r19)
      tp->t_state = TCPS_ESTABLISHED;
      soisconnected(so);
 4023260:	d9000617 	ldw	r4,24(sp)
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
         GOTO_DROPWITHRESET;
      }
      tcpstat.tcps_connects++;
      tp->t_state = TCPS_ESTABLISHED;
 4023264:	01800104 	movi	r6,4
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
         GOTO_DROPWITHRESET;
      }
      tcpstat.tcps_connects++;
 4023268:	10800044 	addi	r2,r2,1
      tp->t_state = TCPS_ESTABLISHED;
 402326c:	b1800215 	stw	r6,8(r22)
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
         GOTO_DROPWITHRESET;
      }
      tcpstat.tcps_connects++;
 4023270:	98800215 	stw	r2,8(r19)
      tp->t_state = TCPS_ESTABLISHED;
      soisconnected(so);
 4023274:	402131c0 	call	402131c <soisconnected>
      tp->t_maxseg = tcp_mss(so);
 4023278:	d9000617 	ldw	r4,24(sp)
 402327c:	4021b940 	call	4021b94 <tcp_mss>
 4023280:	b0800a0d 	sth	r2,40(r22)
      (void) tcp_reass(tp, (struct tcpiphdr *)0, m);
 4023284:	b009883a 	mov	r4,r22
 4023288:	000b883a 	mov	r5,zero
 402328c:	800d883a 	mov	r6,r16
 4023290:	4021f580 	call	4021f58 <tcp_reass>
      tp->snd_wl1 = ti->ti_seq - 1;
 4023294:	90c00617 	ldw	r3,24(r18)
 4023298:	18ffffc4 	addi	r3,r3,-1
 402329c:	b0c01115 	stw	r3,68(r22)
   case TCPS_CLOSE_WAIT:
   case TCPS_CLOSING:
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
 40232a0:	90c00717 	ldw	r3,28(r18)
 40232a4:	b0800e17 	ldw	r2,56(r22)
 40232a8:	18a9c83a 	sub	r20,r3,r2
 40232ac:	0500dc0e 	bge	zero,r20,4023620 <tcp_input+0x144c>
         } else
            tp->t_dupacks = 0;
         break;
      }
      tp->t_dupacks = 0;
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
 40232b0:	b0801a17 	ldw	r2,104(r22)
            }
         } else
            tp->t_dupacks = 0;
         break;
      }
      tp->t_dupacks = 0;
 40232b4:	b0000915 	stw	zero,36(r22)
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
 40232b8:	1885c83a 	sub	r2,r3,r2
 40232bc:	00806c0e 	bge	zero,r2,4023470 <tcp_input+0x129c>
      {
         tcpstat.tcps_rcvacktoomuch++;
 40232c0:	98802a17 	ldw	r2,168(r19)
 40232c4:	10800044 	addi	r2,r2,1
 40232c8:	98802a15 	stw	r2,168(r19)
 40232cc:	003eed06 	br	4022e84 <tcp_input+0xcb0>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 40232d0:	90c00717 	ldw	r3,28(r18)
 40232d4:	b0800e17 	ldw	r2,56(r22)
 40232d8:	10c5c83a 	sub	r2,r2,r3
 40232dc:	00bfdc0e 	bge	zero,r2,4023250 <tcp_input+0x107c>
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 40232e0:	a0800717 	ldw	r2,28(r20)
         GOTO_DROPWITHRESET;
 40232e4:	00c13184 	movi	r3,1222
 40232e8:	d0e84615 	stw	r3,-24296(gp)
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 40232ec:	10800044 	addi	r2,r2,1
 40232f0:	a0800715 	stw	r2,28(r20)
 40232f4:	003d1b06 	br	4022764 <tcp_input+0x590>
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
         if (tp->t_template == 0) 
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
 40232f8:	b009883a 	mov	r4,r22
 40232fc:	01401a44 	movi	r5,105
 4023300:	40244a40 	call	40244a4 <tcp_drop>
            dropsocket = 0;      /* socket is already gone */
            GOTO_DROP;
 4023304:	0080d1c4 	movi	r2,839
 4023308:	d8000415 	stw	zero,16(sp)
 402330c:	d0a84615 	stw	r2,-24296(gp)
 4023310:	003da906 	br	40229b8 <tcp_input+0x7e4>
       * In SYN_RECEIVED and ESTABLISHED STATES
       * enter the CLOSE_WAIT state.
       */
      case TCPS_SYN_RECEIVED:
      case TCPS_ESTABLISHED:
         tp->t_state = TCPS_CLOSE_WAIT;
 4023314:	01800144 	movi	r6,5
 4023318:	b1800215 	stw	r6,8(r22)
 402331c:	003e6706 	br	4022cbc <tcp_input+0xae8>
         GOTO_DROP;
   
      case TCPS_CLOSING:
      case TCPS_LAST_ACK:
      case TCPS_TIME_WAIT:
         SETTP(tp, tcp_close(tp));
 4023320:	b009883a 	mov	r4,r22
 4023324:	40243f00 	call	40243f0 <tcp_close>
         GOTO_DROP;
 4023328:	00c12384 	movi	r3,1166
 402332c:	d0e84615 	stw	r3,-24296(gp)
 4023330:	003da106 	br	40229b8 <tcp_input+0x7e4>
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
         goto close;
   
      case TCPS_ESTABLISHED:
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 4023334:	a0800717 	ldw	r2,28(r20)
 4023338:	10800044 	addi	r2,r2,1
 402333c:	a0800715 	stw	r2,28(r20)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
 4023340:	d9400617 	ldw	r5,24(sp)
 4023344:	00801a04 	movi	r2,104
 4023348:	28800615 	stw	r2,24(r5)
         close:
         tp->t_state = TCPS_CLOSED;
         tcpstat.tcps_drops++;
 402334c:	98800317 	ldw	r2,12(r19)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
         close:
         tp->t_state = TCPS_CLOSED;
 4023350:	b0000215 	stw	zero,8(r22)
         tcpstat.tcps_drops++;
         SETTP(tp, tcp_close(tp));
 4023354:	b009883a 	mov	r4,r22
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
         close:
         tp->t_state = TCPS_CLOSED;
         tcpstat.tcps_drops++;
 4023358:	10800044 	addi	r2,r2,1
 402335c:	98800315 	stw	r2,12(r19)
         SETTP(tp, tcp_close(tp));
 4023360:	40243f00 	call	40243f0 <tcp_close>
#ifdef TCP_ZEROCOPY
         if (so->rx_upcall)
            so->rx_upcall(so, NULL, ECONNRESET);
#endif   /* TCP_ZEROCOPY */
         GOTO_DROP;
 4023364:	00c12204 	movi	r3,1160
 4023368:	d0e84615 	stw	r3,-24296(gp)
 402336c:	003d9206 	br	40229b8 <tcp_input+0x7e4>
       /*
       * If still in FIN_WAIT_1 STATE FIN has not been acked so
       * enter the CLOSING state.
       */
      case TCPS_FIN_WAIT_1:
         tp->t_state = TCPS_CLOSING;
 4023370:	018001c4 	movi	r6,7
 4023374:	b1800215 	stw	r6,8(r22)
 4023378:	003e5006 	br	4022cbc <tcp_input+0xae8>
       * In FIN_WAIT_2 state enter the TIME_WAIT state,
       * starting the time-wait timer, turning off the other 
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
 402337c:	00800284 	movi	r2,10
 4023380:	b0800215 	stw	r2,8(r22)
         tcp_canceltimers(tp);
 4023384:	b009883a 	mov	r4,r22
 4023388:	40249bc0 	call	40249bc <tcp_canceltimers>
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 402338c:	00c10134 	movhi	r3,1028
 4023390:	18e13304 	addi	r3,r3,-31540
 4023394:	18800017 	ldw	r2,0(r3)
         soisdisconnected(so);
 4023398:	d9000617 	ldw	r4,24(sp)
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
         tcp_canceltimers(tp);
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 402339c:	1085883a 	add	r2,r2,r2
 40233a0:	b0800615 	stw	r2,24(r22)
         soisdisconnected(so);
 40233a4:	40212680 	call	4021268 <soisdisconnected>
 40233a8:	003e4406 	br	4022cbc <tcp_input+0xae8>
            GOTO_DROP;
         if(in_broadcast(ti->ti_dst.s_addr))
            GOTO_DROP;
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
         if (am == NULL)
            GOTO_DROP;
 40233ac:	0080c104 	movi	r2,772
 40233b0:	d0a84615 	stw	r2,-24296(gp)
 40233b4:	003d8006 	br	40229b8 <tcp_input+0x7e4>
   {
      switch (tp->t_state) 
      {
   
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
 40233b8:	d9000617 	ldw	r4,24(sp)
 40233bc:	00801bc4 	movi	r2,111
 40233c0:	20800615 	stw	r2,24(r4)
 40233c4:	003fe106 	br	402334c <tcp_input+0x1178>
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
 40233c8:	00800104 	movi	r2,4
 40233cc:	20be521e 	bne	r4,r2,4022d18 <tcp_input+0xb44>
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
 40233d0:	b0800b0b 	ldhu	r2,44(r22)

         tp->rcv_nxt += ti->ti_len;
         tiflags = ti->ti_flags & TH_FIN;
         tcpstat.tcps_rcvpack++;
         tcpstat.tcps_rcvbyte += ti->ti_len;
         sbappend(&so->so_rcv, (m));
 40233d4:	d9400617 	ldw	r5,24(sp)
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
 40233d8:	10800054 	ori	r2,r2,1
 40233dc:	b0800b0d 	sth	r2,44(r22)
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
 40233e0:	91c0028b 	ldhu	r7,10(r18)
         tiflags = ti->ti_flags & TH_FIN;
         tcpstat.tcps_rcvpack++;
         tcpstat.tcps_rcvbyte += ti->ti_len;
         sbappend(&so->so_rcv, (m));
 40233e4:	2c400a04 	addi	r17,r5,40
 40233e8:	8809883a 	mov	r4,r17
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
 40233ec:	19d1883a 	add	r8,r3,r7
 40233f0:	b2001615 	stw	r8,88(r22)
         tiflags = ti->ti_flags & TH_FIN;
         tcpstat.tcps_rcvpack++;
 40233f4:	98c01a17 	ldw	r3,104(r19)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 40233f8:	98801b17 	ldw	r2,108(r19)
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
         tiflags = ti->ti_flags & TH_FIN;
 40233fc:	91800843 	ldbu	r6,33(r18)
         tcpstat.tcps_rcvpack++;
 4023400:	18c00044 	addi	r3,r3,1
         tcpstat.tcps_rcvbyte += ti->ti_len;
 4023404:	11c5883a 	add	r2,r2,r7
         sbappend(&so->so_rcv, (m));
 4023408:	800b883a 	mov	r5,r16
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
         tiflags = ti->ti_flags & TH_FIN;
         tcpstat.tcps_rcvpack++;
         tcpstat.tcps_rcvbyte += ti->ti_len;
 402340c:	98801b15 	stw	r2,108(r19)
            tp->t_flags |= TF_ACKNOW;
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
         tiflags = ti->ti_flags & TH_FIN;
         tcpstat.tcps_rcvpack++;
 4023410:	98c01a15 	stw	r3,104(r19)
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
         tiflags = ti->ti_flags & TH_FIN;
 4023414:	3400004c 	andi	r16,r6,1
         tcpstat.tcps_rcvpack++;
         tcpstat.tcps_rcvbyte += ti->ti_len;
         sbappend(&so->so_rcv, (m));
 4023418:	4020fe40 	call	4020fe4 <sbappend>
         sorwakeup(so);
 402341c:	d9000617 	ldw	r4,24(sp)
 4023420:	880b883a 	mov	r5,r17
 4023424:	40211d80 	call	40211d8 <sbwakeup>
 4023428:	003e4306 	br	4022d38 <tcp_input+0xb64>
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
               (void) tcp_output(tp);
            return;
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
 402342c:	90800717 	ldw	r2,28(r18)
 4023430:	11fc8e1e 	bne	r2,r7,402266c <tcp_input+0x498>
 4023434:	b0800017 	ldw	r2,0(r22)
 4023438:	15bc8c1e 	bne	r2,r22,402266c <tcp_input+0x498>
 402343c:	5245c83a 	sub	r2,r10,r9
 4023440:	1000010e 	bge	r2,zero,4023448 <tcp_input+0x1274>
 4023444:	0005883a 	mov	r2,zero
 4023448:	10fc8836 	bltu	r2,r3,402266c <tcp_input+0x498>
#endif   /* TCP_ZEROCOPY */

         /* this may also be a garden-variety probe received because
          * the socket sendbuf was full.
          */
         if(tp->rcv_wnd == 0)
 402344c:	2000961e 	bne	r4,zero,40236a8 <tcp_input+0x14d4>
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
 4023450:	98802817 	ldw	r2,160(r19)
            m_freem (m);      /* free the received mbuf */
 4023454:	8009883a 	mov	r4,r16
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
 4023458:	10800044 	addi	r2,r2,1
 402345c:	98802815 	stw	r2,160(r19)
            m_freem (m);      /* free the received mbuf */
 4023460:	401d74c0 	call	401d74c <m_freem>
 4023464:	003d2506 	br	40228fc <tcp_input+0x728>
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
               tp->t_timer[TCPT_REXMT] = 0;
 4023468:	b0000315 	stw	zero,12(r22)
 402346c:	003d1606 	br	40228c8 <tcp_input+0x6f4>
      {
         tcpstat.tcps_rcvacktoomuch++;
         goto dropafterack;
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
      tcpstat.tcps_rcvackpack++;
 4023470:	98802b17 	ldw	r2,172(r19)
      tcpstat.tcps_rcvackbyte += acked;
 4023474:	98c02c17 	ldw	r3,176(r19)
      {
         tcpstat.tcps_rcvacktoomuch++;
         goto dropafterack;
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
      tcpstat.tcps_rcvackpack++;
 4023478:	10800044 	addi	r2,r2,1
      tcpstat.tcps_rcvackbyte += acked;
 402347c:	1d07883a 	add	r3,r3,r20
      {
         tcpstat.tcps_rcvacktoomuch++;
         goto dropafterack;
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
      tcpstat.tcps_rcvackpack++;
 4023480:	98802b15 	stw	r2,172(r19)
      tcpstat.tcps_rcvackbyte += acked;
 4023484:	98c02c15 	stw	r3,176(r19)
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
 4023488:	b0801e17 	ldw	r2,120(r22)
 402348c:	10006226 	beq	r2,zero,4023618 <tcp_input+0x1444>
 4023490:	90c00717 	ldw	r3,28(r18)
 4023494:	b0801f17 	ldw	r2,124(r22)
 4023498:	1885c83a 	sub	r2,r3,r2
 402349c:	0080030e 	bge	zero,r2,40234ac <tcp_input+0x12d8>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
         tcp_xmit_timer(tp);
 40234a0:	b009883a 	mov	r4,r22
 40234a4:	4021c400 	call	4021c40 <tcp_xmit_timer>
 40234a8:	90c00717 	ldw	r3,28(r18)
       * If all outstanding data is acked, stop retransmit
       * timer and remember to restart (more output or persist).
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
 40234ac:	b0801a17 	ldw	r2,104(r22)
 40234b0:	1880d026 	beq	r3,r2,40237f4 <tcp_input+0x1620>
      {
         tp->t_timer[TCPT_REXMT] = 0;
         needoutput = 1;
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
 40234b4:	b0800417 	ldw	r2,16(r22)
 40234b8:	1000ca26 	beq	r2,zero,40237e4 <tcp_input+0x1610>
 40234bc:	d8000515 	stw	zero,20(sp)
       * in flight, open exponentially (maxseg per packet).
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
 40234c0:	b1001b17 	ldw	r4,108(r22)
         u_short  incr  =  tp->t_maxseg;

         if (cw > tp->snd_ssthresh)
 40234c4:	b0801c17 	ldw	r2,112(r22)
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
         u_short  incr  =  tp->t_maxseg;
 40234c8:	b0c00a0b 	ldhu	r3,40(r22)

         if (cw > tp->snd_ssthresh)
 40234cc:	1100072e 	bgeu	r2,r4,40234ec <tcp_input+0x1318>
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );
 40234d0:	18bfffcc 	andi	r2,r3,65535
 40234d4:	1085383a 	mul	r2,r2,r2
 40234d8:	00c00404 	movi	r3,16
 40234dc:	1105203a 	divu	r2,r2,r4
 40234e0:	10c0012e 	bgeu	r2,r3,40234e8 <tcp_input+0x1314>
 40234e4:	1805883a 	mov	r2,r3
 40234e8:	1007883a 	mov	r3,r2

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
 40234ec:	18bfffcc 	andi	r2,r3,65535
 40234f0:	2085883a 	add	r2,r4,r2
 40234f4:	00d80004 	movi	r3,24576
 40234f8:	1880012e 	bgeu	r3,r2,4023500 <tcp_input+0x132c>
 40234fc:	1805883a 	mov	r2,r3
      }
      if (acked > (int)so->so_snd.sb_cc) 
 4023500:	d8c00617 	ldw	r3,24(sp)
         u_short  incr  =  tp->t_maxseg;

         if (cw > tp->snd_ssthresh)
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
 4023504:	b0801b15 	stw	r2,108(r22)
      }
      if (acked > (int)so->so_snd.sb_cc) 
 4023508:	19401217 	ldw	r5,72(r3)
 402350c:	2d00bd0e 	bge	r5,r20,4023804 <tcp_input+0x1630>
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
 4023510:	b0801417 	ldw	r2,80(r22)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
 4023514:	d9000617 	ldw	r4,24(sp)

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
      }
      if (acked > (int)so->so_snd.sb_cc) 
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
 4023518:	28ffffcc 	andi	r3,r5,65535
 402351c:	10c5c83a 	sub	r2,r2,r3
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
 4023520:	24401204 	addi	r17,r4,72

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
      }
      if (acked > (int)so->so_snd.sb_cc) 
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
 4023524:	b0801415 	stw	r2,80(r22)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
 4023528:	8809883a 	mov	r4,r17
 402352c:	4020bec0 	call	4020bec <sbdrop>
 4023530:	05000044 	movi	r20,1
         sbdrop(&so->so_snd, acked);
         tp->snd_wnd -= (u_short)acked;
         ourfinisacked = 0;
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 4023534:	d8c00617 	ldw	r3,24(sp)
 4023538:	1880190b 	ldhu	r2,100(r3)
 402353c:	1080030c 	andi	r2,r2,12
 4023540:	10000326 	beq	r2,zero,4023550 <tcp_input+0x137c>
         sowwakeup(so);
 4023544:	880b883a 	mov	r5,r17
 4023548:	1809883a 	mov	r4,r3
 402354c:	40211d80 	call	40211d8 <sbwakeup>

      tp->snd_una = ti->ti_ack;
 4023550:	90c00717 	ldw	r3,28(r18)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 4023554:	b0800f17 	ldw	r2,60(r22)
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
         sowwakeup(so);

      tp->snd_una = ti->ti_ack;
 4023558:	b0c00e15 	stw	r3,56(r22)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 402355c:	10c5c83a 	sub	r2,r2,r3
 4023560:	1000010e 	bge	r2,zero,4023568 <tcp_input+0x1394>
         tp->snd_nxt = tp->snd_una;
 4023564:	b0c00f15 	stw	r3,60(r22)


      switch (tp->t_state) 
 4023568:	b0c00217 	ldw	r3,8(r22)
 402356c:	008001c4 	movi	r2,7
 4023570:	18801b26 	beq	r3,r2,40235e0 <tcp_input+0x140c>
 4023574:	10c01016 	blt	r2,r3,40235b8 <tcp_input+0x13e4>
 4023578:	00800184 	movi	r2,6
 402357c:	18bd941e 	bne	r3,r2,4022bd0 <tcp_input+0x9fc>
       * In FIN_WAIT_1 STATE in addition to the processing
       * for the ESTABLISHED state if our FIN is now acknowledged
       * then enter FIN_WAIT_2.
       */
      case TCPS_FIN_WAIT_1:
         if (ourfinisacked) 
 4023580:	a005003a 	cmpeq	r2,r20,zero
 4023584:	103d931e 	bne	r2,zero,4022bd4 <tcp_input+0xa00>
             * data, then closing user can proceed.
             * Starting the timer is contrary to the
             * specification, but if we don't get a FIN
             * we'll hang forever.
             */
            if (so->so_state & SS_CANTRCVMORE) 
 4023588:	d9000617 	ldw	r4,24(sp)
 402358c:	2080088b 	ldhu	r2,34(r4)
 4023590:	1080080c 	andi	r2,r2,32
 4023594:	10000526 	beq	r2,zero,40235ac <tcp_input+0x13d8>
            {
               soisdisconnected(so);
 4023598:	40212680 	call	4021268 <soisdisconnected>
               tp->t_timer[TCPT_2MSL] = tcp_maxidle;
 402359c:	00810134 	movhi	r2,1028
 40235a0:	10a93f04 	addi	r2,r2,-23300
 40235a4:	10c00017 	ldw	r3,0(r2)
 40235a8:	b0c00615 	stw	r3,24(r22)
            }
            tp->t_state = TCPS_FIN_WAIT_2;
 40235ac:	01800244 	movi	r6,9
 40235b0:	b1800215 	stw	r6,8(r22)
 40235b4:	003d8706 	br	4022bd4 <tcp_input+0xa00>
      tp->snd_una = ti->ti_ack;
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
         tp->snd_nxt = tp->snd_una;


      switch (tp->t_state) 
 40235b8:	00800204 	movi	r2,8
 40235bc:	18809c26 	beq	r3,r2,4023830 <tcp_input+0x165c>
 40235c0:	00800284 	movi	r2,10
 40235c4:	18bd821e 	bne	r3,r2,4022bd0 <tcp_input+0x9fc>
       * In TIME_WAIT state the only thing that should arrive
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 40235c8:	00c10134 	movhi	r3,1028
 40235cc:	18e13304 	addi	r3,r3,-31540
 40235d0:	18800017 	ldw	r2,0(r3)
 40235d4:	1085883a 	add	r2,r2,r2
 40235d8:	b0800615 	stw	r2,24(r22)
 40235dc:	003e2906 	br	4022e84 <tcp_input+0xcb0>
       * the ESTABLISHED state if the ACK acknowledges our FIN
       * then enter the TIME-WAIT state, otherwise ignore
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
 40235e0:	a005003a 	cmpeq	r2,r20,zero
 40235e4:	103d7b1e 	bne	r2,zero,4022bd4 <tcp_input+0xa00>
         {
            tp->t_state = TCPS_TIME_WAIT;
 40235e8:	01800284 	movi	r6,10
            tcp_canceltimers(tp);
 40235ec:	b009883a 	mov	r4,r22
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
         {
            tp->t_state = TCPS_TIME_WAIT;
 40235f0:	b1800215 	stw	r6,8(r22)
            tcp_canceltimers(tp);
 40235f4:	40249bc0 	call	40249bc <tcp_canceltimers>
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 40235f8:	00c10134 	movhi	r3,1028
 40235fc:	18e13304 	addi	r3,r3,-31540
 4023600:	18800017 	ldw	r2,0(r3)
            soisdisconnected(so);
 4023604:	d9000617 	ldw	r4,24(sp)
      case TCPS_CLOSING:
         if (ourfinisacked) 
         {
            tp->t_state = TCPS_TIME_WAIT;
            tcp_canceltimers(tp);
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 4023608:	1085883a 	add	r2,r2,r2
 402360c:	b0800615 	stw	r2,24(r22)
            soisdisconnected(so);
 4023610:	40212680 	call	4021268 <soisdisconnected>
 4023614:	003d6f06 	br	4022bd4 <tcp_input+0xa00>
 4023618:	90c00717 	ldw	r3,28(r18)
 402361c:	003fa306 	br	40234ac <tcp_input+0x12d8>
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
 4023620:	91c0028b 	ldhu	r7,10(r18)
 4023624:	3800031e 	bne	r7,zero,4023634 <tcp_input+0x1460>
 4023628:	b0801417 	ldw	r2,80(r22)
 402362c:	d8c00217 	ldw	r3,8(sp)
 4023630:	18800326 	beq	r3,r2,4023640 <tcp_input+0x146c>
               if (SEQ_GT(onxt, tp->snd_nxt))
                  tp->snd_nxt = onxt;
               GOTO_DROP;
            }
         } else
            tp->t_dupacks = 0;
 4023634:	d8000515 	stw	zero,20(sp)
 4023638:	b0000915 	stw	zero,36(r22)
 402363c:	003d6506 	br	4022bd4 <tcp_input+0xa00>

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
         {
            tcpstat.tcps_rcvdupack++;
 4023640:	98802917 	ldw	r2,164(r19)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 4023644:	b0c00317 	ldw	r3,12(r22)

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
         {
            tcpstat.tcps_rcvdupack++;
 4023648:	10800044 	addi	r2,r2,1
 402364c:	98802915 	stw	r2,164(r19)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 4023650:	183ff826 	beq	r3,zero,4023634 <tcp_input+0x1460>
 4023654:	90c00717 	ldw	r3,28(r18)
 4023658:	b0800e17 	ldw	r2,56(r22)
 402365c:	18bff51e 	bne	r3,r2,4023634 <tcp_input+0x1460>
                ti->ti_ack != tp->snd_una)
            {
               tp->t_dupacks = 0;
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
 4023660:	b0800917 	ldw	r2,36(r22)
 4023664:	d0e03d87 	ldb	r3,-32522(gp)
 4023668:	10800044 	addi	r2,r2,1
 402366c:	b0800915 	stw	r2,36(r22)
 4023670:	10c03d26 	beq	r2,r3,4023768 <tcp_input+0x1594>
      if ((todrop > (int)ti->ti_len) ||
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 4023674:	d8000515 	stw	zero,20(sp)
 4023678:	003d5606 	br	4022bd4 <tcp_input+0xa00>
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   {
      tp = tcp_close(tp);
 402367c:	b009883a 	mov	r4,r22
 4023680:	40243f00 	call	40243f0 <tcp_close>
 4023684:	102d883a 	mov	r22,r2
      tcpstat.tcps_rcvafterclose++;
 4023688:	98802717 	ldw	r2,156(r19)
      GOTO_DROPWITHRESET;
 402368c:	b8c0010c 	andi	r3,r23,4
 4023690:	182b003a 	cmpeq	r21,r3,zero
    */
   if ((so->so_state & SS_NOFDREF) &&
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   {
      tp = tcp_close(tp);
      tcpstat.tcps_rcvafterclose++;
 4023694:	10800044 	addi	r2,r2,1
      GOTO_DROPWITHRESET;
 4023698:	00c10444 	movi	r3,1041
    */
   if ((so->so_state & SS_NOFDREF) &&
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   {
      tp = tcp_close(tp);
      tcpstat.tcps_rcvafterclose++;
 402369c:	98802715 	stw	r2,156(r19)
      GOTO_DROPWITHRESET;
 40236a0:	d0e84615 	stw	r3,-24296(gp)
 40236a4:	003c2f06 	br	4022764 <tcp_input+0x590>
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
 40236a8:	98803617 	ldw	r2,216(r19)
         tp->rcv_nxt += ti->ti_len;
 40236ac:	9180028b 	ldhu	r6,10(r18)
         tcpstat.tcps_rcvpack++;
         tcpstat.tcps_rcvbyte += ti->ti_len;
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 40236b0:	d9400617 	ldw	r5,24(sp)
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
 40236b4:	10800044 	addi	r2,r2,1
 40236b8:	98803615 	stw	r2,216(r19)
         tp->rcv_nxt += ti->ti_len;
 40236bc:	b0c01617 	ldw	r3,88(r22)
         tcpstat.tcps_rcvpack++;
         tcpstat.tcps_rcvbyte += ti->ti_len;
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 40236c0:	2c400a04 	addi	r17,r5,40
 40236c4:	8809883a 	mov	r4,r17
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
         tp->rcv_nxt += ti->ti_len;
 40236c8:	1991883a 	add	r8,r3,r6
 40236cc:	b2001615 	stw	r8,88(r22)
         tcpstat.tcps_rcvpack++;
 40236d0:	98c01a17 	ldw	r3,104(r19)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 40236d4:	98801b17 	ldw	r2,108(r19)
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 40236d8:	800b883a 	mov	r5,r16
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
         tp->rcv_nxt += ti->ti_len;
         tcpstat.tcps_rcvpack++;
 40236dc:	18c00044 	addi	r3,r3,1
         tcpstat.tcps_rcvbyte += ti->ti_len;
 40236e0:	1185883a 	add	r2,r2,r6
 40236e4:	98801b15 	stw	r2,108(r19)
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
         tp->rcv_nxt += ti->ti_len;
         tcpstat.tcps_rcvpack++;
 40236e8:	98c01a15 	stw	r3,104(r19)
         tcpstat.tcps_rcvbyte += ti->ti_len;
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 40236ec:	4020fe40 	call	4020fe4 <sbappend>
         sorwakeup(so);
 40236f0:	d9000617 	ldw	r4,24(sp)
 40236f4:	880b883a 	mov	r5,r17
 40236f8:	40211d80 	call	40211d8 <sbwakeup>
         /*
          * If this is a short packet, then ACK now - with Nagel
          *   congestion avoidance sender won't send more until
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
 40236fc:	b880020c 	andi	r2,r23,8
 4023700:	10001526 	beq	r2,zero,4023758 <tcp_input+0x1584>
            tp->t_flags |= TF_ACKNOW;
 4023704:	b0800b0b 	ldhu	r2,44(r22)
 4023708:	10800054 	ori	r2,r2,1
 402370c:	b0800b0d 	sth	r2,44(r22)
            tp->t_flags |= TF_DELACK;

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
 4023710:	b0c01917 	ldw	r3,100(r22)
 4023714:	b1401617 	ldw	r5,88(r22)
 4023718:	b1001517 	ldw	r4,84(r22)
 402371c:	b0800a0b 	ldhu	r2,40(r22)
 4023720:	1947c83a 	sub	r3,r3,r5
 4023724:	20c9c83a 	sub	r4,r4,r3
 4023728:	1085883a 	add	r2,r2,r2
 402372c:	2080040e 	bge	r4,r2,4023740 <tcp_input+0x156c>
 4023730:	b0800b0b 	ldhu	r2,44(r22)
 4023734:	1080004c 	andi	r2,r2,1
 4023738:	1005003a 	cmpeq	r2,r2,zero
 402373c:	103ac61e 	bne	r2,zero,4022258 <tcp_input+0x84>
               tp->t_flags &= ~TF_ACKNOW;
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
 4023740:	b0800b0b 	ldhu	r2,44(r22)
            tp->t_flags &= ~TF_DELACK;
            tcp_output(tp);   /* send the ack now... */
 4023744:	b009883a 	mov	r4,r22
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
            tp->t_flags &= ~TF_DELACK;
 4023748:	10800054 	ori	r2,r2,1
 402374c:	10bfff4c 	andi	r2,r2,65533
 4023750:	b0800b0d 	sth	r2,44(r22)
 4023754:	003c6a06 	br	4022900 <tcp_input+0x72c>
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
            tp->t_flags |= TF_ACKNOW;
         else
            tp->t_flags |= TF_DELACK;
 4023758:	b0800b0b 	ldhu	r2,44(r22)
 402375c:	10800094 	ori	r2,r2,2
 4023760:	b0800b0d 	sth	r2,44(r22)
 4023764:	003fea06 	br	4023710 <tcp_input+0x153c>
            else if (++tp->t_dupacks == tcprexmtthresh) 
            {
               tcp_seq onxt = tp->snd_nxt;
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
               tp->t_maxseg;
 4023768:	b0801b17 	ldw	r2,108(r22)
 402376c:	b0c01417 	ldw	r3,80(r22)
            {
               tp->t_dupacks = 0;
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
            {
               tcp_seq onxt = tp->snd_nxt;
 4023770:	b4400f17 	ldw	r17,60(r22)
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
               tp->t_maxseg;
 4023774:	b1400a0b 	ldhu	r5,40(r22)
 4023778:	10c0012e 	bgeu	r2,r3,4023780 <tcp_input+0x15ac>
 402377c:	1007883a 	mov	r3,r2
 4023780:	1806d07a 	srli	r3,r3,1
 4023784:	28bfffcc 	andi	r2,r5,65535
 4023788:	1887203a 	divu	r3,r3,r2

               if (win < 2)
 402378c:	193fffcc 	andi	r4,r3,65535
 4023790:	00800044 	movi	r2,1
 4023794:	11000136 	bltu	r2,r4,402379c <tcp_input+0x15c8>
 4023798:	00c00084 	movi	r3,2
                  win = 2;
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
 402379c:	1945383a 	mul	r2,r3,r5

               tp->t_timer[TCPT_REXMT] = 0;
               tp->t_rttick = 0;
 40237a0:	b0001e15 	stw	zero,120(r22)
               tp->snd_nxt = ti->ti_ack;
               tp->snd_cwnd = tp->t_maxseg;
 40237a4:	b1000a0b 	ldhu	r4,40(r22)
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
               tp->t_maxseg;

               if (win < 2)
                  win = 2;
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
 40237a8:	10bfffcc 	andi	r2,r2,65535
 40237ac:	b0801c15 	stw	r2,112(r22)

               tp->t_timer[TCPT_REXMT] = 0;
               tp->t_rttick = 0;
               tp->snd_nxt = ti->ti_ack;
 40237b0:	90c00717 	ldw	r3,28(r18)

               if (win < 2)
                  win = 2;
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);

               tp->t_timer[TCPT_REXMT] = 0;
 40237b4:	b0000315 	stw	zero,12(r22)
               tp->t_rttick = 0;
               tp->snd_nxt = ti->ti_ack;
               tp->snd_cwnd = tp->t_maxseg;
 40237b8:	b1001b15 	stw	r4,108(r22)
                  win = 2;
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);

               tp->t_timer[TCPT_REXMT] = 0;
               tp->t_rttick = 0;
               tp->snd_nxt = ti->ti_ack;
 40237bc:	b0c00f15 	stw	r3,60(r22)
               tp->snd_cwnd = tp->t_maxseg;
               (void) tcp_output(tp);
 40237c0:	b009883a 	mov	r4,r22
 40237c4:	40239000 	call	4023900 <tcp_output>

               if (SEQ_GT(onxt, tp->snd_nxt))
 40237c8:	b0c00f17 	ldw	r3,60(r22)
 40237cc:	88c7c83a 	sub	r3,r17,r3
 40237d0:	00c0010e 	bge	zero,r3,40237d8 <tcp_input+0x1604>
                  tp->snd_nxt = onxt;
 40237d4:	b4400f15 	stw	r17,60(r22)
               GOTO_DROP;
 40237d8:	00814544 	movi	r2,1301
 40237dc:	d0a84615 	stw	r2,-24296(gp)
 40237e0:	003c7506 	br	40229b8 <tcp_input+0x7e4>
      if (ti->ti_ack == tp->snd_max) 
      {
         tp->t_timer[TCPT_REXMT] = 0;
         needoutput = 1;
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 40237e4:	b0800817 	ldw	r2,32(r22)
 40237e8:	d8000515 	stw	zero,20(sp)
 40237ec:	b0800315 	stw	r2,12(r22)
 40237f0:	003f3306 	br	40234c0 <tcp_input+0x12ec>
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
      {
         tp->t_timer[TCPT_REXMT] = 0;
 40237f4:	01000044 	movi	r4,1
 40237f8:	d9000515 	stw	r4,20(sp)
 40237fc:	b0000315 	stw	zero,12(r22)
 4023800:	003f2f06 	br	40234c0 <tcp_input+0x12ec>
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
         ourfinisacked = 1;
      } 
      else 
      {
         sbdrop(&so->so_snd, acked);
 4023804:	d9400617 	ldw	r5,24(sp)
 4023808:	2c401204 	addi	r17,r5,72
 402380c:	8809883a 	mov	r4,r17
 4023810:	a00b883a 	mov	r5,r20
 4023814:	4020bec0 	call	4020bec <sbdrop>
         tp->snd_wnd -= (u_short)acked;
 4023818:	b0801417 	ldw	r2,80(r22)
 402381c:	a0ffffcc 	andi	r3,r20,65535
 4023820:	0029883a 	mov	r20,zero
 4023824:	10c5c83a 	sub	r2,r2,r3
 4023828:	b0801415 	stw	r2,80(r22)
 402382c:	003f4106 	br	4023534 <tcp_input+0x1360>
       * and/or to be acked, as well as for the ack of our FIN.
       * If our FIN is now acknowledged, delete the TCB,
       * enter the closed state and return.
       */
      case TCPS_LAST_ACK:
         if (ourfinisacked) 
 4023830:	a005003a 	cmpeq	r2,r20,zero
 4023834:	103ce71e 	bne	r2,zero,4022bd4 <tcp_input+0xa00>
         {
            SETTP(tp, tcp_close(tp));
 4023838:	b009883a 	mov	r4,r22
 402383c:	40243f00 	call	40243f0 <tcp_close>
            GOTO_DROP;
 4023840:	00c16644 	movi	r3,1433
 4023844:	d0e84615 	stw	r3,-24296(gp)
 4023848:	003c5b06 	br	40229b8 <tcp_input+0x7e4>

0402384c <tcp_setpersist>:
{
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;

   if (tp->t_timer[TCPT_REXMT])
 402384c:	20800317 	ldw	r2,12(r4)
 * RETURNS: NA
 */

void
tcp_setpersist(struct tcpcb * tp)
{
 4023850:	defffc04 	addi	sp,sp,-16
 4023854:	dc000015 	stw	r16,0(sp)
 4023858:	2021883a 	mov	r16,r4
 402385c:	dc800215 	stw	r18,8(sp)
 4023860:	dc400115 	stw	r17,4(sp)
 4023864:	dfc00315 	stw	ra,12(sp)
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;

   if (tp->t_timer[TCPT_REXMT])
      panic("tcp_output REXMT");
 4023868:	010100f4 	movhi	r4,1027
 402386c:	21150d04 	addi	r4,r4,21556
void
tcp_setpersist(struct tcpcb * tp)
{
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 4023870:	84402017 	ldw	r17,128(r16)
 4023874:	84802117 	ldw	r18,132(r16)

   if (tp->t_timer[TCPT_REXMT])
 4023878:	10001f1e 	bne	r2,zero,40238f8 <tcp_setpersist+0xac>
      panic("tcp_output REXMT");
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
 402387c:	8807d0ba 	srai	r3,r17,2
 4023880:	81400717 	ldw	r5,28(r16)
 4023884:	00810134 	movhi	r2,1028
 4023888:	10a02bc4 	addi	r2,r2,-32593
 402388c:	1c87883a 	add	r3,r3,r18
 4023890:	2885883a 	add	r2,r5,r2
 4023894:	11000003 	ldbu	r4,0(r2)
 4023898:	1807d07a 	srai	r3,r3,1
 402389c:	00800244 	movi	r2,9
 40238a0:	01801e04 	movi	r6,120
 40238a4:	1907383a 	mul	r3,r3,r4
 40238a8:	18ffffcc 	andi	r3,r3,65535
 40238ac:	18e0001c 	xori	r3,r3,32768
 40238b0:	18e00004 	addi	r3,r3,-32768
 40238b4:	80c00415 	stw	r3,16(r16)
 40238b8:	10c00c16 	blt	r2,r3,40238ec <tcp_setpersist+0xa0>
 40238bc:	00800284 	movi	r2,10
 40238c0:	80800415 	stw	r2,16(r16)
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
 40238c4:	008002c4 	movi	r2,11
      tp->t_rxtshift++;
 40238c8:	28c00044 	addi	r3,r5,1
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
 40238cc:	11400116 	blt	r2,r5,40238d4 <tcp_setpersist+0x88>
      tp->t_rxtshift++;
 40238d0:	80c00715 	stw	r3,28(r16)

}
 40238d4:	dfc00317 	ldw	ra,12(sp)
 40238d8:	dc800217 	ldw	r18,8(sp)
 40238dc:	dc400117 	ldw	r17,4(sp)
 40238e0:	dc000017 	ldw	r16,0(sp)
 40238e4:	dec00404 	addi	sp,sp,16
 40238e8:	f800283a 	ret
   if (tp->t_timer[TCPT_REXMT])
      panic("tcp_output REXMT");
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
 40238ec:	30fff50e 	bge	r6,r3,40238c4 <tcp_setpersist+0x78>
 40238f0:	81800415 	stw	r6,16(r16)
 40238f4:	003ff306 	br	40238c4 <tcp_setpersist+0x78>
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;

   if (tp->t_timer[TCPT_REXMT])
      panic("tcp_output REXMT");
 40238f8:	4019c440 	call	4019c44 <panic>
 40238fc:	003fdf06 	br	402387c <tcp_setpersist+0x30>

04023900 <tcp_output>:
 */

int
tcp_output(struct tcpcb * tp)
{
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4023900:	20800d17 	ldw	r2,52(r4)
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 4023904:	deffed04 	addi	sp,sp,-76
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 4023908:	20c00e17 	ldw	r3,56(r4)
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 402390c:	dc800b15 	stw	r18,44(sp)
 4023910:	2025883a 	mov	r18,r4
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 4023914:	21001a17 	ldw	r4,104(r4)
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 4023918:	dd800f15 	stw	r22,60(sp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 402391c:	15800817 	ldw	r22,32(r2)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 4023920:	d9000615 	stw	r4,24(sp)
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 4023924:	dfc01215 	stw	ra,72(sp)
 4023928:	df001115 	stw	fp,68(sp)
 402392c:	ddc01015 	stw	r23,64(sp)
 4023930:	dd400e15 	stw	r21,56(sp)
 4023934:	dd000d15 	stw	r20,52(sp)
 4023938:	dcc00c15 	stw	r19,48(sp)
 402393c:	dc400a15 	stw	r17,40(sp)
 4023940:	dc000915 	stw	r16,36(sp)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 4023944:	d8c00515 	stw	r3,20(sp)
 4023948:	1809883a 	mov	r4,r3
 402394c:	d8000315 	stw	zero,12(sp)

again:
   sendalot = 0;
   off = (int)(tp->snd_nxt - tp->snd_una);
 4023950:	90800f17 	ldw	r2,60(r18)
   win = (long)tp->snd_wnd;   /* set basic send window */
 4023954:	94401417 	ldw	r17,80(r18)
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
 4023958:	90c01b17 	ldw	r3,108(r18)
    */
   idle = (tp->snd_max == tp->snd_una);

again:
   sendalot = 0;
   off = (int)(tp->snd_nxt - tp->snd_una);
 402395c:	1105c83a 	sub	r2,r2,r4
 4023960:	d8800415 	stw	r2,16(sp)
   win = (long)tp->snd_wnd;   /* set basic send window */
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
 4023964:	1c40020e 	bge	r3,r17,4023970 <tcp_output+0x70>
   {
      win = (int)(tp->snd_cwnd & ~(ALIGN_TYPE-1)); /* keep data aligned */
 4023968:	00bfff04 	movi	r2,-4
 402396c:	18a2703a 	and	r17,r3,r2
    * If in persist timeout with window of 0, send 1 byte.
    * Otherwise, if window is small but nonzero
    * and timer expired, we will send what we can
    * and go to transmit state.
    */
   if (tp->t_force) 
 4023970:	90800a87 	ldb	r2,42(r18)
 4023974:	10014426 	beq	r2,zero,4023e88 <tcp_output+0x588>
   {
      if (win == 0)
 4023978:	8801411e 	bne	r17,zero,4023e80 <tcp_output+0x580>
 402397c:	04400044 	movi	r17,1
 4023980:	8805883a 	mov	r2,r17
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
 4023984:	b1801217 	ldw	r6,72(r22)
 4023988:	1180012e 	bgeu	r2,r6,4023990 <tcp_output+0x90>
 402398c:	100d883a 	mov	r6,r2
   }

   flags = tcp_outflags[tp->t_state];
 4023990:	90800217 	ldw	r2,8(r18)
 4023994:	00c10134 	movhi	r3,1028
 4023998:	18e02904 	addi	r3,r3,-32604
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
 402399c:	d9400417 	ldw	r5,16(sp)
   }

   flags = tcp_outflags[tp->t_state];
 40239a0:	10c5883a 	add	r2,r2,r3
 40239a4:	15400003 	ldbu	r21,0(r2)
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
 40239a8:	3167c83a 	sub	r19,r6,r5
   }
#else
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
 40239ac:	a8c0008c 	andi	r3,r21,2
 40239b0:	18016526 	beq	r3,zero,4023f48 <tcp_output+0x648>
bld_options(struct tcpcb * tp, u_char * cp, int flags, struct socket * so)
{
   int      len;
   u_short  mss;

   if(tp->t_flags & TF_NOOPT)    /* no options allowed? */
 40239b4:	91400b0b 	ldhu	r5,44(r18)
 40239b8:	2880020c 	andi	r2,r5,8
 40239bc:	1001d326 	beq	r2,zero,402410c <tcp_output+0x80c>
 40239c0:	d8000315 	stw	zero,12(sp)
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
   }
#endif

   if (len < 0)
 40239c4:	98016216 	blt	r19,zero,4023f50 <tcp_output+0x650>
         tp->t_timer[TCPT_REXMT] = 0;
         tp->snd_nxt = tp->snd_una;
      }
   }

   if (len > (int)tp->t_maxseg)
 40239c8:	92000a0b 	ldhu	r8,40(r18)
 40239cc:	44c1660e 	bge	r8,r19,4023f68 <tcp_output+0x668>
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 40239d0:	91800f17 	ldw	r6,60(r18)
 40239d4:	b1c01217 	ldw	r7,72(r22)
         tp->t_timer[TCPT_REXMT] = 0;
         tp->snd_nxt = tp->snd_una;
      }
   }

   if (len > (int)tp->t_maxseg)
 40239d8:	00c00044 	movi	r3,1
 40239dc:	4027883a 	mov	r19,r8
 40239e0:	d8c00215 	stw	r3,8(sp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 40239e4:	34c5883a 	add	r2,r6,r19
 40239e8:	21c7883a 	add	r3,r4,r7
 40239ec:	10c5c83a 	sub	r2,r2,r3
 40239f0:	10016416 	blt	r2,zero,4023f84 <tcp_output+0x684>
      flags &= ~TH_FIN;
   win = (long)(sbspace(&so->so_rcv));
 40239f4:	b2800b17 	ldw	r10,44(r22)
 40239f8:	b2400a17 	ldw	r9,40(r22)
 40239fc:	5245c83a 	sub	r2,r10,r9
 4023a00:	10016616 	blt	r2,zero,4023f9c <tcp_output+0x69c>
 4023a04:	d8800115 	stw	r2,4(sp)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
 4023a08:	a880004c 	andi	r2,r21,1
 4023a0c:	1029003a 	cmpeq	r20,r2,zero
 4023a10:	a000041e 	bne	r20,zero,4023a24 <tcp_output+0x124>
 4023a14:	3800031e 	bne	r7,zero,4023a24 <tcp_output+0x124>
 4023a18:	2880040c 	andi	r2,r5,16
 4023a1c:	10000826 	beq	r2,zero,4023a40 <tcp_output+0x140>
 4023a20:	31000726 	beq	r6,r4,4023a40 <tcp_output+0x140>
      goto send;
   }
   /*
    * Send if we owe peer an ACK.
    */
   if (tp->t_flags & TF_ACKNOW)
 4023a24:	2880004c 	andi	r2,r5,1
 4023a28:	1000051e 	bne	r2,zero,4023a40 <tcp_output+0x140>
      goto send;
   if (flags & (TH_SYN|TH_RST))
 4023a2c:	a880018c 	andi	r2,r21,6
 4023a30:	1000031e 	bne	r2,zero,4023a40 <tcp_output+0x140>
      goto send;
   if (SEQ_GT(tp->snd_up, tp->snd_una))
 4023a34:	90801017 	ldw	r2,64(r18)
 4023a38:	1105c83a 	sub	r2,r2,r4
 4023a3c:	0080b00e 	bge	zero,r2,4023d00 <tcp_output+0x400>
    * No reason to send a segment, just return.
    */
   return (0);

send:
   ENTER_CRIT_SECTION(tp);
 4023a40:	401c7c40 	call	401c7c4 <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
   sendm = so->so_snd.sb_mb;
 4023a44:	b4401817 	ldw	r17,96(r22)
   if (len)
 4023a48:	9800b91e 	bne	r19,zero,4023d30 <tcp_output+0x430>
   {
      /* Grab a header mbuf, attaching a copy of data to be 
       * transmitted, and initialize the header from 
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
 4023a4c:	04410134 	movhi	r17,1028
 4023a50:	8c690c04 	addi	r17,r17,-23504
 4023a54:	89400017 	ldw	r5,0(r17)
 4023a58:	010000c4 	movi	r4,3
 4023a5c:	29400a04 	addi	r5,r5,40
 4023a60:	401dad40 	call	401dad4 <m_getnbuf>
 4023a64:	1029883a 	mov	r20,r2
      if (m ==(struct mbuf *)NULL)
 4023a68:	10021d26 	beq	r2,zero,40242e0 <tcp_output+0x9e0>
         EXIT_CRIT_SECTION(tp);
         return ENOBUFS;
      }

      m->m_len = TCPIPHDRSZ;
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
 4023a6c:	10c00317 	ldw	r3,12(r2)
 4023a70:	89000017 	ldw	r4,0(r17)
      {
         EXIT_CRIT_SECTION(tp);
         return ENOBUFS;
      }

      m->m_len = TCPIPHDRSZ;
 4023a74:	00800a04 	movi	r2,40
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
 4023a78:	9839003a 	cmpeq	fp,r19,zero
         EXIT_CRIT_SECTION(tp);
         return ENOBUFS;
      }

      m->m_len = TCPIPHDRSZ;
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
 4023a7c:	1907883a 	add	r3,r3,r4
      {
         EXIT_CRIT_SECTION(tp);
         return ENOBUFS;
      }

      m->m_len = TCPIPHDRSZ;
 4023a80:	a0800215 	stw	r2,8(r20)
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
 4023a84:	a0c00315 	stw	r3,12(r20)
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
 4023a88:	e001461e 	bne	fp,zero,4023fa4 <tcp_output+0x6a4>
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
 4023a8c:	b1001817 	ldw	r4,96(r22)
 4023a90:	d9400417 	ldw	r5,16(sp)
 4023a94:	980d883a 	mov	r6,r19
 4023a98:	401dd400 	call	401dd40 <m_copy>
 4023a9c:	a0800615 	stw	r2,24(r20)
         if (m->m_next == 0)
 4023aa0:	10022026 	beq	r2,zero,4024324 <tcp_output+0xa24>
 4023aa4:	d9000317 	ldw	r4,12(sp)
 4023aa8:	2020c03a 	cmpne	r16,r4,zero
            EXIT_CRIT_SECTION(tp);
            return ENOBUFS;
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
 4023aac:	401c7a40 	call	401c7a4 <irq_Unmask>

   if (len) 
   {
      if (tp->t_force && len == 1)
 4023ab0:	90800a87 	ldb	r2,42(r18)
 4023ab4:	10000226 	beq	r2,zero,4023ac0 <tcp_output+0x1c0>
 4023ab8:	00800044 	movi	r2,1
 4023abc:	9881f326 	beq	r19,r2,402428c <tcp_output+0x98c>
         tcpstat.tcps_sndprobe++;
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
 4023ac0:	90800f17 	ldw	r2,60(r18)
 4023ac4:	90c01a17 	ldw	r3,104(r18)
 4023ac8:	10c5c83a 	sub	r2,r2,r3
 4023acc:	1001e416 	blt	r2,zero,4024260 <tcp_output+0x960>
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
 4023ad0:	01410134 	movhi	r5,1028
 4023ad4:	294d2b04 	addi	r5,r5,13484
 4023ad8:	28801017 	ldw	r2,64(r5)
         tcpstat.tcps_sndbyte += len;
 4023adc:	28c01117 	ldw	r3,68(r5)
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
 4023ae0:	10800044 	addi	r2,r2,1
         tcpstat.tcps_sndbyte += len;
 4023ae4:	1cc7883a 	add	r3,r3,r19
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
 4023ae8:	28801015 	stw	r2,64(r5)
         tcpstat.tcps_sndbyte += len;
 4023aec:	28c01115 	stw	r3,68(r5)
      tcpstat.tcps_sndurg++;
   else
      tcpstat.tcps_sndwinup++;

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
   if ((char *)ti < m->pkt->nb_buff)
 4023af0:	a0c00117 	ldw	r3,4(r20)
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
      tcpstat.tcps_sndurg++;
   else
      tcpstat.tcps_sndwinup++;

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
 4023af4:	a4400317 	ldw	r17,12(r20)
   if ((char *)ti < m->pkt->nb_buff)
 4023af8:	18800117 	ldw	r2,4(r3)
 4023afc:	88813836 	bltu	r17,r2,4023fe0 <tcp_output+0x6e0>
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
 4023b00:	91400c17 	ldw	r5,48(r18)
 4023b04:	28013b26 	beq	r5,zero,4023ff4 <tcp_output+0x6f4>
      panic("tcp_output");

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
 4023b08:	8809883a 	mov	r4,r17
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 4023b0c:	a880004c 	andi	r2,r21,1
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
      panic("tcp_output");

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
 4023b10:	01800a04 	movi	r6,40
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 4023b14:	d8800715 	stw	r2,28(sp)
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
      panic("tcp_output");

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
 4023b18:	40096480 	call	4009648 <memcpy>
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 4023b1c:	d9000717 	ldw	r4,28(sp)
 4023b20:	2007003a 	cmpeq	r3,r4,zero
 4023b24:	1800da1e 	bne	r3,zero,4023e90 <tcp_output+0x590>
 4023b28:	90800b0b 	ldhu	r2,44(r18)
 4023b2c:	1080040c 	andi	r2,r2,16
 4023b30:	1000d726 	beq	r2,zero,4023e90 <tcp_output+0x590>
 4023b34:	90c00f17 	ldw	r3,60(r18)
 4023b38:	90801a17 	ldw	r2,104(r18)
 4023b3c:	1881d926 	beq	r3,r2,40242a4 <tcp_output+0x9a4>
       tp->snd_nxt == tp->snd_max)
   {
      tp->snd_nxt--;
   }

   ti->ti_seq = htonl(tp->snd_nxt);
 4023b40:	1808d23a 	srli	r4,r3,8
 4023b44:	18bfc00c 	andi	r2,r3,65280
 4023b48:	180a963a 	slli	r5,r3,24
 4023b4c:	1004923a 	slli	r2,r2,8
 4023b50:	1806d63a 	srli	r3,r3,24
 4023b54:	213fc00c 	andi	r4,r4,65280
 4023b58:	1144b03a 	or	r2,r2,r5
 4023b5c:	1906b03a 	or	r3,r3,r4
 4023b60:	1886b03a 	or	r3,r3,r2
 4023b64:	88c00615 	stw	r3,24(r17)
   ti->ti_ack = htonl(tp->rcv_nxt);
 4023b68:	90801617 	ldw	r2,88(r18)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
 4023b6c:	a8c0008c 	andi	r3,r21,2
 4023b70:	1807003a 	cmpeq	r3,r3,zero
 4023b74:	d8c00815 	stw	r3,32(sp)
   {
      tp->snd_nxt--;
   }

   ti->ti_seq = htonl(tp->snd_nxt);
   ti->ti_ack = htonl(tp->rcv_nxt);
 4023b78:	10ffc00c 	andi	r3,r2,65280
 4023b7c:	100a963a 	slli	r5,r2,24
 4023b80:	1008d23a 	srli	r4,r2,8
 4023b84:	1806923a 	slli	r3,r3,8
 4023b88:	1004d63a 	srli	r2,r2,24
 4023b8c:	213fc00c 	andi	r4,r4,65280
 4023b90:	1946b03a 	or	r3,r3,r5
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
 4023b94:	d9400817 	ldw	r5,32(sp)
   {
      tp->snd_nxt--;
   }

   ti->ti_seq = htonl(tp->snd_nxt);
   ti->ti_ack = htonl(tp->rcv_nxt);
 4023b98:	1104b03a 	or	r2,r2,r4
 4023b9c:	10c4b03a 	or	r2,r2,r3
 4023ba0:	88800715 	stw	r2,28(r17)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
 4023ba4:	2800051e 	bne	r5,zero,4023bbc <tcp_output+0x2bc>
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;

      switch(so->so_domain)
 4023ba8:	b0c00517 	ldw	r3,20(r22)
 4023bac:	00800084 	movi	r2,2
    * address.
    */
   if (flags & TH_SYN)
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;
 4023bb0:	b5c00117 	ldw	r23,4(r22)

      switch(so->so_domain)
 4023bb4:	18816626 	beq	r3,r2,4024150 <tcp_output+0x850>
         }
         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();    /* bad domain setting */
 4023bb8:	401c81c0 	call	401c81c <dtrap>
      }
   }

   /* fill in options if any are set */
   if (optlen)
 4023bbc:	8001291e 	bne	r16,zero,4024064 <tcp_output+0x764>
 4023bc0:	01800a04 	movi	r6,40
      mopt->m_len = optlen;
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
   }

   ti->ti_flags = (u_char)flags;
 4023bc4:	8d400845 	stb	r21,33(r17)
   /*
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
 4023bc8:	b0800b17 	ldw	r2,44(r22)
 4023bcc:	d8c00117 	ldw	r3,4(sp)
 4023bd0:	1004d0ba 	srli	r2,r2,2
 4023bd4:	1880030e 	bge	r3,r2,4023be4 <tcp_output+0x2e4>
 4023bd8:	90800a0b 	ldhu	r2,40(r18)
 4023bdc:	1880010e 	bge	r3,r2,4023be4 <tcp_output+0x2e4>
 4023be0:	d8000115 	stw	zero,4(sp)
      win = 0;
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
      win = (long)(tp->rcv_adv - tp->rcv_nxt);

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 4023be4:	00810134 	movhi	r2,1028
 4023be8:	108c6204 	addi	r2,r2,12680
 4023bec:	10c00217 	ldw	r3,8(r2)
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
      win = 0;
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
 4023bf0:	91001917 	ldw	r4,100(r18)
 4023bf4:	90801617 	ldw	r2,88(r18)
      win = (long)(tp->rcv_adv - tp->rcv_nxt);

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 4023bf8:	1801031e 	bne	r3,zero,4024008 <tcp_output+0x708>
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 4023bfc:	91001017 	ldw	r4,64(r18)
 4023c00:	90c00f17 	ldw	r3,60(r18)
      win = 0;
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
      win = (long)(tp->rcv_adv - tp->rcv_nxt);

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 4023c04:	0005883a 	mov	r2,zero
 4023c08:	000b883a 	mov	r5,zero
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
 4023c0c:	2884b03a 	or	r2,r5,r2
 4023c10:	8880088d 	sth	r2,34(r17)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 4023c14:	20c5c83a 	sub	r2,r4,r3
      win = 0;
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
      win = (long)(tp->rcv_adv - tp->rcv_nxt);

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 4023c18:	0021883a 	mov	r16,zero
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 4023c1c:	00810e0e 	bge	zero,r2,4024058 <tcp_output+0x758>
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
 4023c20:	10bfffcc 	andi	r2,r2,65535
 4023c24:	1008923a 	slli	r4,r2,8
      ti->ti_flags |= TH_URG;
 4023c28:	88c00843 	ldbu	r3,33(r17)
      ti->ti_win = htons((u_short)win);
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
 4023c2c:	1004d23a 	srli	r2,r2,8
      ti->ti_flags |= TH_URG;
 4023c30:	18c00814 	ori	r3,r3,32
      ti->ti_win = htons((u_short)win);
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
 4023c34:	1104b03a 	or	r2,r2,r4
 4023c38:	8880098d 	sth	r2,38(r17)
      ti->ti_flags |= TH_URG;
 4023c3c:	88c00845 	stb	r3,33(r17)
   /*
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
 4023c40:	e000041e 	bne	fp,zero,4023c54 <tcp_output+0x354>
 4023c44:	d9000417 	ldw	r4,16(sp)
 4023c48:	b0c01217 	ldw	r3,72(r22)
 4023c4c:	24c5883a 	add	r2,r4,r19
 4023c50:	10c14b26 	beq	r2,r3,4024180 <tcp_output+0x880>

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
 4023c54:	90800a87 	ldb	r2,42(r18)
 4023c58:	10008f26 	beq	r2,zero,4023e98 <tcp_output+0x598>
 4023c5c:	90800417 	ldw	r2,16(r18)
 4023c60:	10008d26 	beq	r2,zero,4023e98 <tcp_output+0x598>
         }
      }
   }
   else
   {
      if (SEQ_GT(tp->snd_nxt + len, tp->snd_max))
 4023c64:	90c00f17 	ldw	r3,60(r18)
 4023c68:	90801a17 	ldw	r2,104(r18)
 4023c6c:	98c7883a 	add	r3,r19,r3
 4023c70:	1885c83a 	sub	r2,r3,r2
 4023c74:	0080010e 	bge	zero,r2,4023c7c <tcp_output+0x37c>
         tp->snd_max = tp->snd_nxt + len;
 4023c78:	90c01a15 	stw	r3,104(r18)
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
 4023c7c:	a0c00317 	ldw	r3,12(r20)
      error = ip_output(m, so->so_optsPack);
 4023c80:	b1401f17 	ldw	r5,124(r22)
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
 4023c84:	9985883a 	add	r2,r19,r6
 4023c88:	1880008d 	sth	r2,2(r3)
      error = ip_output(m, so->so_optsPack);
 4023c8c:	a009883a 	mov	r4,r20
 4023c90:	401d7700 	call	401d770 <ip_output>
 4023c94:	1023883a 	mov	r17,r2
                    (sizeof(struct ipv6) + sizeof(struct tcphdr) + optlen + len),
                    (struct   ip_socopts *)0);          
   }
#endif   /* IP_V6 */

   if (error)
 4023c98:	1001941e 	bne	r2,zero,40242ec <tcp_output+0x9ec>

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 4023c9c:	00810134 	movhi	r2,1028
 4023ca0:	108cfd04 	addi	r2,r2,13300
   tcpstat.tcps_sndtotal++;
 4023ca4:	01410134 	movhi	r5,1028
 4023ca8:	294d2b04 	addi	r5,r5,13484

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 4023cac:	10c00a17 	ldw	r3,40(r2)
   tcpstat.tcps_sndtotal++;
 4023cb0:	29000f17 	ldw	r4,60(r5)

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 4023cb4:	18c00044 	addi	r3,r3,1
   tcpstat.tcps_sndtotal++;
 4023cb8:	21000044 	addi	r4,r4,1

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 4023cbc:	10c00a15 	stw	r3,40(r2)
   tcpstat.tcps_sndtotal++;
 4023cc0:	29000f15 	stw	r4,60(r5)
   /*
    * If this advertises a larger window than any other segment,
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
 4023cc4:	0400060e 	bge	zero,r16,4023ce0 <tcp_output+0x3e0>
 4023cc8:	90c01617 	ldw	r3,88(r18)
 4023ccc:	90801917 	ldw	r2,100(r18)
 4023cd0:	1c07883a 	add	r3,r3,r16
 4023cd4:	1885c83a 	sub	r2,r3,r2
 4023cd8:	0080010e 	bge	zero,r2,4023ce0 <tcp_output+0x3e0>
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
 4023cdc:	90c01915 	stw	r3,100(r18)
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
 4023ce0:	90800b0b 	ldhu	r2,44(r18)
   if (sendalot)
 4023ce4:	d9000217 	ldw	r4,8(sp)
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
 4023ce8:	10bfef0c 	andi	r2,r2,65468
   if (sendalot)
 4023cec:	2006c03a 	cmpne	r3,r4,zero
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
 4023cf0:	90800b0d 	sth	r2,44(r18)
   if (sendalot)
 4023cf4:	18014126 	beq	r3,zero,40241fc <tcp_output+0x8fc>
 4023cf8:	91000e17 	ldw	r4,56(r18)
 4023cfc:	003f1406 	br	4023950 <tcp_output+0x50>
    * If peer's buffer is tiny, then send
    * when window is at least half open.
    * If retransmitting (possibly after persist timer forced us
    * to send into a small window), then must resend.
    */
   if (len)
 4023d00:	98012b26 	beq	r19,zero,40241b0 <tcp_output+0x8b0>
   {
      if (len == (int)tp->t_maxseg)
 4023d04:	9a3f4e26 	beq	r19,r8,4023a40 <tcp_output+0x140>
         goto send;
      if ((idle || tp->t_flags & TF_NODELAY) &&
 4023d08:	d9000617 	ldw	r4,24(sp)
 4023d0c:	d8800517 	ldw	r2,20(sp)
 4023d10:	20800226 	beq	r4,r2,4023d1c <tcp_output+0x41c>
 4023d14:	2880010c 	andi	r2,r5,4
 4023d18:	10011d26 	beq	r2,zero,4024190 <tcp_output+0x890>
 4023d1c:	d8c00417 	ldw	r3,16(sp)
 4023d20:	98c5883a 	add	r2,r19,r3
 4023d24:	11c11a16 	blt	r2,r7,4024190 <tcp_output+0x890>
    * No reason to send a segment, just return.
    */
   return (0);

send:
   ENTER_CRIT_SECTION(tp);
 4023d28:	401c7c40 	call	401c7c4 <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
   sendm = so->so_snd.sb_mb;
 4023d2c:	b4401817 	ldw	r17,96(r22)
   if (len)
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
 4023d30:	88016926 	beq	r17,zero,40242d8 <tcp_output+0x9d8>
      {
         bufoff -= sendm->m_len;
 4023d34:	89000217 	ldw	r4,8(r17)
 4023d38:	d9400417 	ldw	r5,16(sp)
 4023d3c:	2921c83a 	sub	r16,r5,r4
         if (bufoff < 0)   /* if off is in this buffer, break */
 4023d40:	8000040e 	bge	r16,zero,4023d54 <tcp_output+0x454>
 4023d44:	00000706 	br	4023d64 <tcp_output+0x464>
   if (len)
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
      {
         bufoff -= sendm->m_len;
 4023d48:	89000217 	ldw	r4,8(r17)
 4023d4c:	8121c83a 	sub	r16,r16,r4
         if (bufoff < 0)   /* if off is in this buffer, break */
 4023d50:	80000416 	blt	r16,zero,4023d64 <tcp_output+0x464>
            break;
         sendm = sendm->m_next;
 4023d54:	8c400617 	ldw	r17,24(r17)
   bufoff = off;
   sendm = so->so_snd.sb_mb;
   if (len)
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
 4023d58:	883ffb1e 	bne	r17,zero,4023d48 <tcp_output+0x448>
         bufoff -= sendm->m_len;
         if (bufoff < 0)   /* if off is in this buffer, break */
            break;
         sendm = sendm->m_next;
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
 4023d5c:	401c81c0 	call	401c81c <dtrap>
 4023d60:	89000217 	ldw	r4,8(r17)
      bufoff += sendm->m_len; /* index to next data to send in msend */

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
 4023d64:	88800617 	ldw	r2,24(r17)
         if (bufoff < 0)   /* if off is in this buffer, break */
            break;
         sendm = sendm->m_next;
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
      bufoff += sendm->m_len; /* index to next data to send in msend */
 4023d68:	240b883a 	add	r5,r4,r16

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
 4023d6c:	10000626 	beq	r2,zero,4023d88 <tcp_output+0x488>
 4023d70:	24c0050e 	bge	r4,r19,4023d88 <tcp_output+0x488>
      {
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 4023d74:	00bfff84 	movi	r2,-2
 4023d78:	a8aa703a 	and	r21,r21,r2
 4023d7c:	00800044 	movi	r2,1
 4023d80:	d8800215 	stw	r2,8(sp)
 4023d84:	1029883a 	mov	r20,r2
         sendalot = 1;     /* set to send more segments */
      }
      if((flags & TH_FIN) && (so->so_snd.sb_cc > (unsigned)len))
 4023d88:	a000041e 	bne	r20,zero,4023d9c <tcp_output+0x49c>
 4023d8c:	b0801217 	ldw	r2,72(r22)
 4023d90:	9880022e 	bgeu	r19,r2,4023d9c <tcp_output+0x49c>
      {
         /* This can happen on slow links (PPP) which retry the last 
          * segment - the one with the FIN bit attached to data.
          */
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 4023d94:	00bfff84 	movi	r2,-2
 4023d98:	a8aa703a 	and	r21,r21,r2
      }

      /* only send the rest of msend */
      len = min(len, (int)sendm->m_len);
 4023d9c:	24c0010e 	bge	r4,r19,4023da4 <tcp_output+0x4a4>
 4023da0:	2027883a 	mov	r19,r4
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
 4023da4:	280cc03a 	cmpne	r6,r5,zero
 4023da8:	3000051e 	bne	r6,zero,4023dc0 <tcp_output+0x4c0>
 4023dac:	88800317 	ldw	r2,12(r17)
 4023db0:	88c00417 	ldw	r3,16(r17)
 4023db4:	10c5c83a 	sub	r2,r2,r3
 4023db8:	108000cc 	andi	r2,r2,3
 4023dbc:	10000d26 	beq	r2,zero,4023df4 <tcp_output+0x4f4>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
      {
         len = min(len, (int)(sendm->m_len - bufoff));   /* limit len again */
 4023dc0:	2145c83a 	sub	r2,r4,r5
 4023dc4:	14c0010e 	bge	r2,r19,4023dcc <tcp_output+0x4cc>
 4023dc8:	1027883a 	mov	r19,r2
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 4023dcc:	00810134 	movhi	r2,1028
 4023dd0:	10a12f04 	addi	r2,r2,-31556
 4023dd4:	10c00017 	ldw	r3,0(r2)
 4023dd8:	197ff204 	addi	r5,r3,-56
 4023ddc:	2cc0050e 	bge	r5,r19,4023df4 <tcp_output+0x4f4>
 4023de0:	00810134 	movhi	r2,1028
 4023de4:	108c6204 	addi	r2,r2,12680
 4023de8:	11000217 	ldw	r4,8(r2)
 4023dec:	00c00044 	movi	r3,1
 4023df0:	19012f0e 	bge	r3,r4,40242b0 <tcp_output+0x9b0>
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
 4023df4:	9839003a 	cmpeq	fp,r19,zero
 4023df8:	e03f141e 	bne	fp,zero,4023a4c <tcp_output+0x14c>
 4023dfc:	303f131e 	bne	r6,zero,4023a4c <tcp_output+0x14c>
 4023e00:	88800117 	ldw	r2,4(r17)
 4023e04:	00c00044 	movi	r3,1
 4023e08:	15c00917 	ldw	r23,36(r2)
 4023e0c:	b8ff0f1e 	bne	r23,r3,4023a4c <tcp_output+0x14c>
 4023e10:	88800317 	ldw	r2,12(r17)
 4023e14:	88c00417 	ldw	r3,16(r17)
 4023e18:	10c5c83a 	sub	r2,r2,r3
 4023e1c:	108000cc 	andi	r2,r2,3
 4023e20:	103f0a1e 	bne	r2,zero,4023a4c <tcp_output+0x14c>
 4023e24:	d8c00317 	ldw	r3,12(sp)
 4023e28:	1820c03a 	cmpne	r16,r3,zero
 4023e2c:	803f071e 	bne	r16,zero,4023a4c <tcp_output+0x14c>
       (sendm->pkt->inuse == 1) &&
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
       (optlen == 0))
   {
      /* get an empty mbuf to "clone" the data */
      m = m_getnbuf(MT_TXDATA, 0);
 4023e30:	01000084 	movi	r4,2
 4023e34:	000b883a 	mov	r5,zero
 4023e38:	401dad40 	call	401dad4 <m_getnbuf>
 4023e3c:	1029883a 	mov	r20,r2
      if (!m)
 4023e40:	10012726 	beq	r2,zero,40242e0 <tcp_output+0x9e0>
      {
         EXIT_CRIT_SECTION(tp);
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
 4023e44:	88c00117 	ldw	r3,4(r17)
      m->pkt->inuse++;     /* bump packet's use count */
      m->m_base = sendm->m_base; /* clone mbuf members */
      m->m_memsz = sendm->m_memsz;
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
      m->m_data = sendm->m_data - TCPIPHDRSZ;
 4023e48:	89000317 	ldw	r4,12(r17)
         EXIT_CRIT_SECTION(tp);
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
      m->pkt->inuse++;     /* bump packet's use count */
      m->m_base = sendm->m_base; /* clone mbuf members */
 4023e4c:	89c00417 	ldw	r7,16(r17)
      {
         EXIT_CRIT_SECTION(tp);
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
      m->pkt->inuse++;     /* bump packet's use count */
 4023e50:	18800917 	ldw	r2,36(r3)
      m->m_base = sendm->m_base; /* clone mbuf members */
      m->m_memsz = sendm->m_memsz;
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
      m->m_data = sendm->m_data - TCPIPHDRSZ;
 4023e54:	213ff604 	addi	r4,r4,-40
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
      m->pkt->inuse++;     /* bump packet's use count */
      m->m_base = sendm->m_base; /* clone mbuf members */
      m->m_memsz = sendm->m_memsz;
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
 4023e58:	99800a04 	addi	r6,r19,40
      {
         EXIT_CRIT_SECTION(tp);
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
      m->pkt->inuse++;     /* bump packet's use count */
 4023e5c:	15c5883a 	add	r2,r2,r23
 4023e60:	18800915 	stw	r2,36(r3)
      m->m_base = sendm->m_base; /* clone mbuf members */
      m->m_memsz = sendm->m_memsz;
 4023e64:	89400517 	ldw	r5,20(r17)
         EXIT_CRIT_SECTION(tp);
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
      m->pkt->inuse++;     /* bump packet's use count */
      m->m_base = sendm->m_base; /* clone mbuf members */
 4023e68:	a1c00415 	stw	r7,16(r20)
      m->m_memsz = sendm->m_memsz;
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
 4023e6c:	a1800215 	stw	r6,8(r20)
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
      m->pkt->inuse++;     /* bump packet's use count */
      m->m_base = sendm->m_base; /* clone mbuf members */
      m->m_memsz = sendm->m_memsz;
 4023e70:	a1400515 	stw	r5,20(r20)
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
      m->m_data = sendm->m_data - TCPIPHDRSZ;
 4023e74:	a1000315 	stw	r4,12(r20)
      if (!m)
      {
         EXIT_CRIT_SECTION(tp);
         return (ENOBUFS);
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
 4023e78:	a0c00115 	stw	r3,4(r20)
 4023e7c:	003f0b06 	br	4023aac <tcp_output+0x1ac>
   {
      if (win == 0)
         win = 1;
      else 
      {
         tp->t_timer[TCPT_PERSIST] = 0;
 4023e80:	90000415 	stw	zero,16(r18)
         tp->t_rxtshift = 0;
 4023e84:	90000715 	stw	zero,28(r18)
 4023e88:	8805883a 	mov	r2,r17
 4023e8c:	003ebd06 	br	4023984 <tcp_output+0x84>
 4023e90:	90c00f17 	ldw	r3,60(r18)
 4023e94:	003f2a06 	br	4023b40 <tcp_output+0x240>
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
   {
      tcp_seq startseq = tp->snd_nxt;
 4023e98:	91000f17 	ldw	r4,60(r18)

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
 4023e9c:	d9400817 	ldw	r5,32(sp)
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
   {
      tcp_seq startseq = tp->snd_nxt;
 4023ea0:	2007883a 	mov	r3,r4

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
 4023ea4:	2800021e 	bne	r5,zero,4023eb0 <tcp_output+0x5b0>
         tp->snd_nxt++;
 4023ea8:	20c00044 	addi	r3,r4,1
 4023eac:	90c00f15 	stw	r3,60(r18)

      if (flags & TH_FIN)
 4023eb0:	d9400717 	ldw	r5,28(sp)
 4023eb4:	2805003a 	cmpeq	r2,r5,zero
 4023eb8:	1000051e 	bne	r2,zero,4023ed0 <tcp_output+0x5d0>
      {
         tp->snd_nxt++;
         tp->t_flags |= TF_SENTFIN;
 4023ebc:	90800b0b 	ldhu	r2,44(r18)
      if (flags & TH_SYN)
         tp->snd_nxt++;

      if (flags & TH_FIN)
      {
         tp->snd_nxt++;
 4023ec0:	18c00044 	addi	r3,r3,1
 4023ec4:	90c00f15 	stw	r3,60(r18)
         tp->t_flags |= TF_SENTFIN;
 4023ec8:	10800414 	ori	r2,r2,16
 4023ecc:	90800b0d 	sth	r2,44(r18)
      }
      tp->snd_nxt += len;
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
 4023ed0:	90801a17 	ldw	r2,104(r18)
      if (flags & TH_FIN)
      {
         tp->snd_nxt++;
         tp->t_flags |= TF_SENTFIN;
      }
      tp->snd_nxt += len;
 4023ed4:	1cc7883a 	add	r3,r3,r19
 4023ed8:	90c00f15 	stw	r3,60(r18)
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
 4023edc:	1885c83a 	sub	r2,r3,r2
 4023ee0:	00800d0e 	bge	zero,r2,4023f18 <tcp_output+0x618>
         tp->snd_max = tp->snd_nxt;
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
 4023ee4:	90801e17 	ldw	r2,120(r18)
         tp->t_flags |= TF_SENTFIN;
      }
      tp->snd_nxt += len;
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
      {
         tp->snd_max = tp->snd_nxt;
 4023ee8:	90c01a15 	stw	r3,104(r18)
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
 4023eec:	10000a1e 	bne	r2,zero,4023f18 <tcp_output+0x618>
         {
            tp->t_rttick = cticks;
 4023ef0:	00810134 	movhi	r2,1028
 4023ef4:	10a93304 	addi	r2,r2,-23348
 4023ef8:	10c00017 	ldw	r3,0(r2)
            tp->t_rtseq = startseq;
 4023efc:	91001f15 	stw	r4,124(r18)
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
         {
            tp->t_rttick = cticks;
 4023f00:	90c01e15 	stw	r3,120(r18)
            tp->t_rtseq = startseq;
            tcpstat.tcps_segstimed++;
 4023f04:	00c10134 	movhi	r3,1028
 4023f08:	18cd2b04 	addi	r3,r3,13484
 4023f0c:	18800617 	ldw	r2,24(r3)
 4023f10:	10800044 	addi	r2,r2,1
 4023f14:	18800615 	stw	r2,24(r3)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
 4023f18:	90800317 	ldw	r2,12(r18)
 4023f1c:	103f571e 	bne	r2,zero,4023c7c <tcp_output+0x37c>
 4023f20:	90c00f17 	ldw	r3,60(r18)
 4023f24:	90800e17 	ldw	r2,56(r18)
 4023f28:	18bf5426 	beq	r3,r2,4023c7c <tcp_output+0x37c>
          tp->snd_nxt != tp->snd_una) 
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 4023f2c:	90800817 	ldw	r2,32(r18)
         if (tp->t_timer[TCPT_PERSIST]) 
 4023f30:	90c00417 	ldw	r3,16(r18)
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
          tp->snd_nxt != tp->snd_una) 
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 4023f34:	90800315 	stw	r2,12(r18)
         if (tp->t_timer[TCPT_PERSIST]) 
 4023f38:	183f5026 	beq	r3,zero,4023c7c <tcp_output+0x37c>
         {
            tp->t_timer[TCPT_PERSIST] = 0;
 4023f3c:	90000415 	stw	zero,16(r18)
            tp->t_rxtshift = 0;
 4023f40:	90000715 	stw	zero,28(r18)
 4023f44:	003f4d06 	br	4023c7c <tcp_output+0x37c>
 4023f48:	91400b0b 	ldhu	r5,44(r18)
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
   }
#endif

   if (len < 0)
 4023f4c:	983e9e0e 	bge	r19,zero,40239c8 <tcp_output+0xc8>
       * back to (closed) window.  We will enter persist
       * state below.  If the window didn't close completely,
       * just wait for an ACK.
       */
      len = 0;
      if (win == 0) 
 4023f50:	8800021e 	bne	r17,zero,4023f5c <tcp_output+0x65c>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 4023f54:	90000315 	stw	zero,12(r18)
         tp->snd_nxt = tp->snd_una;
 4023f58:	91000f15 	stw	r4,60(r18)
      }
   }

   if (len > (int)tp->t_maxseg)
 4023f5c:	92000a0b 	ldhu	r8,40(r18)
       */
      len = 0;
      if (win == 0) 
      {
         tp->t_timer[TCPT_REXMT] = 0;
         tp->snd_nxt = tp->snd_una;
 4023f60:	0027883a 	mov	r19,zero
      }
   }

   if (len > (int)tp->t_maxseg)
 4023f64:	44fe9a16 	blt	r8,r19,40239d0 <tcp_output+0xd0>
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 4023f68:	91800f17 	ldw	r6,60(r18)
 4023f6c:	b1c01217 	ldw	r7,72(r22)
         tp->t_timer[TCPT_REXMT] = 0;
         tp->snd_nxt = tp->snd_una;
      }
   }

   if (len > (int)tp->t_maxseg)
 4023f70:	d8000215 	stw	zero,8(sp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 4023f74:	34c5883a 	add	r2,r6,r19
 4023f78:	21c7883a 	add	r3,r4,r7
 4023f7c:	10c5c83a 	sub	r2,r2,r3
 4023f80:	103e9c0e 	bge	r2,zero,40239f4 <tcp_output+0xf4>
      flags &= ~TH_FIN;
   win = (long)(sbspace(&so->so_rcv));
 4023f84:	b2800b17 	ldw	r10,44(r22)
 4023f88:	b2400a17 	ldw	r9,40(r22)
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
      flags &= ~TH_FIN;
 4023f8c:	00bfff84 	movi	r2,-2
 4023f90:	a8aa703a 	and	r21,r21,r2
   win = (long)(sbspace(&so->so_rcv));
 4023f94:	5245c83a 	sub	r2,r10,r9
 4023f98:	103e9a0e 	bge	r2,zero,4023a04 <tcp_output+0x104>
 4023f9c:	d8000115 	stw	zero,4(sp)
 4023fa0:	003e9906 	br	4023a08 <tcp_output+0x108>
            EXIT_CRIT_SECTION(tp);
            return ENOBUFS;
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
 4023fa4:	401c7a40 	call	401c7a4 <irq_Unmask>
      {
         tcpstat.tcps_sndpack++;
         tcpstat.tcps_sndbyte += len;
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
 4023fa8:	90800b0b 	ldhu	r2,44(r18)
 4023fac:	1080004c 	andi	r2,r2,1
 4023fb0:	10004c26 	beq	r2,zero,40240e4 <tcp_output+0x7e4>
   {
      tcpstat.tcps_sndacks++;
 4023fb4:	00c10134 	movhi	r3,1028
 4023fb8:	18cd2b04 	addi	r3,r3,13484
 4023fbc:	18801417 	ldw	r2,80(r3)
 4023fc0:	d9000317 	ldw	r4,12(sp)
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
      tcpstat.tcps_sndurg++;
   else
      tcpstat.tcps_sndwinup++;

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
 4023fc4:	a4400317 	ldw	r17,12(r20)
         tcpstat.tcps_sndbyte += len;
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
   {
      tcpstat.tcps_sndacks++;
 4023fc8:	10800044 	addi	r2,r2,1
 4023fcc:	18801415 	stw	r2,80(r3)
      tcpstat.tcps_sndurg++;
   else
      tcpstat.tcps_sndwinup++;

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
   if ((char *)ti < m->pkt->nb_buff)
 4023fd0:	a0c00117 	ldw	r3,4(r20)
 4023fd4:	2020c03a 	cmpne	r16,r4,zero
 4023fd8:	18800117 	ldw	r2,4(r3)
 4023fdc:	88bec82e 	bgeu	r17,r2,4023b00 <tcp_output+0x200>
   {
      panic("tcp_out- packet ptr underflow\n");
 4023fe0:	010100f4 	movhi	r4,1027
 4023fe4:	21151204 	addi	r4,r4,21576
 4023fe8:	4019c440 	call	4019c44 <panic>
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
 4023fec:	91400c17 	ldw	r5,48(r18)
 4023ff0:	283ec51e 	bne	r5,zero,4023b08 <tcp_output+0x208>
      panic("tcp_output");
 4023ff4:	010100f4 	movhi	r4,1027
 4023ff8:	21151a04 	addi	r4,r4,21608
 4023ffc:	4019c440 	call	4019c44 <panic>
 4024000:	91400c17 	ldw	r5,48(r18)
 4024004:	003ec006 	br	4023b08 <tcp_output+0x208>
      win = 0;
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
      win = (long)(tp->rcv_adv - tp->rcv_nxt);

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 4024008:	dc000117 	ldw	r16,4(sp)
 402400c:	2085c83a 	sub	r2,r4,r2
 4024010:	8080010e 	bge	r16,r2,4024018 <tcp_output+0x718>
 4024014:	1021883a 	mov	r16,r2
   {
      win = 0;
   }
   else if(win > (((long)bigfreeq.q_len - 1) * (long)bigbufsiz))
 4024018:	00810134 	movhi	r2,1028
 402401c:	10a13104 	addi	r2,r2,-31548
 4024020:	11000017 	ldw	r4,0(r2)
 4024024:	18ffffc4 	addi	r3,r3,-1
 4024028:	1907383a 	mul	r3,r3,r4
 402402c:	1c00010e 	bge	r3,r16,4024034 <tcp_output+0x734>
   {
      win = ((long)bigfreeq.q_len - 1) * bigbufsiz;
 4024030:	1821883a 	mov	r16,r3
 4024034:	80bfffcc 	andi	r2,r16,65535
 4024038:	100a923a 	slli	r5,r2,8
 402403c:	1004d23a 	srli	r2,r2,8
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 4024040:	91001017 	ldw	r4,64(r18)
 4024044:	90c00f17 	ldw	r3,60(r18)
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
 4024048:	2884b03a 	or	r2,r5,r2
 402404c:	8880088d 	sth	r2,34(r17)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 4024050:	20c5c83a 	sub	r2,r4,r3
 4024054:	00bef216 	blt	zero,r2,4023c20 <tcp_output+0x320>
       * If no urgent pointer to send, then we pull
       * the urgent pointer to the left edge of the send window
       * so that it doesn't drift into the send window on sequence
       * number wraparound.
       */
      tp->snd_up = tp->snd_una;        /* drag it along */
 4024058:	90800e17 	ldw	r2,56(r18)
 402405c:	90801015 	stw	r2,64(r18)
 4024060:	003ef706 	br	4023c40 <tcp_output+0x340>
   /* fill in options if any are set */
   if (optlen)
   {
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
 4024064:	01000084 	movi	r4,2
 4024068:	01404004 	movi	r5,256
 402406c:	401dad40 	call	401dad4 <m_getnbuf>
 4024070:	1021883a 	mov	r16,r2
      if (mopt == NULL) 
 4024074:	1000b026 	beq	r2,zero,4024338 <tcp_output+0xa38>
         m_freem(m);
         return (ENOBUFS);
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
 4024078:	a0800617 	ldw	r2,24(r20)
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
 402407c:	d9000317 	ldw	r4,12(sp)
         m_freem(m);
         return (ENOBUFS);
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
 4024080:	80800615 	stw	r2,24(r16)
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
 4024084:	20c000cc 	andi	r3,r4,3
         return (ENOBUFS);
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
      tcp_mbuf->m_next = mopt;
 4024088:	a4000615 	stw	r16,24(r20)

      /* extend options to aligned address */
      while(optlen & 0x03)
 402408c:	18000926 	beq	r3,zero,40240b4 <tcp_output+0x7b4>
 4024090:	d0a84704 	addi	r2,gp,-24292
 4024094:	2087883a 	add	r3,r4,r2
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
 4024098:	d9400317 	ldw	r5,12(sp)
 402409c:	18000005 	stb	zero,0(r3)
 40240a0:	18c00044 	addi	r3,r3,1
 40240a4:	29400044 	addi	r5,r5,1
      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
 40240a8:	288000cc 	andi	r2,r5,3
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
 40240ac:	d9400315 	stw	r5,12(sp)
      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
 40240b0:	103ff91e 	bne	r2,zero,4024098 <tcp_output+0x798>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
 40240b4:	d9800317 	ldw	r6,12(sp)
 40240b8:	81000317 	ldw	r4,12(r16)
 40240bc:	d1684704 	addi	r5,gp,-24292
 40240c0:	40096480 	call	4009648 <memcpy>
      mopt->m_len = optlen;
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
 40240c4:	d8800317 	ldw	r2,12(sp)
 40240c8:	10c00504 	addi	r3,r2,20
 40240cc:	1806d0ba 	srli	r3,r3,2
      /* extend options to aligned address */
      while(optlen & 0x03)
         tcp_optionbuf[optlen++] = TCPOPT_EOL;

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
      mopt->m_len = optlen;
 40240d0:	80800215 	stw	r2,8(r16)
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
 40240d4:	11800a04 	addi	r6,r2,40
 40240d8:	1806913a 	slli	r3,r3,4
 40240dc:	88c00805 	stb	r3,32(r17)
 40240e0:	003eb806 	br	4023bc4 <tcp_output+0x2c4>
   }
   else if (tp->t_flags & TF_ACKNOW)
   {
      tcpstat.tcps_sndacks++;
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
 40240e4:	a88001cc 	andi	r2,r21,7
 40240e8:	10005126 	beq	r2,zero,4024230 <tcp_output+0x930>
      tcpstat.tcps_sndctrl++;
 40240ec:	01410134 	movhi	r5,1028
 40240f0:	294d2b04 	addi	r5,r5,13484
 40240f4:	28801817 	ldw	r2,96(r5)
 40240f8:	d8c00317 	ldw	r3,12(sp)
 40240fc:	10800044 	addi	r2,r2,1
 4024100:	1820c03a 	cmpne	r16,r3,zero
 4024104:	28801815 	stw	r2,96(r5)
 4024108:	003e7906 	br	4023af0 <tcp_output+0x1f0>
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
 402410c:	d9400317 	ldw	r5,12(sp)
 4024110:	d0a84704 	addi	r2,gp,-24292
      return 0;

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
   {
      mss   =  (u_short)tcp_mss(so);
 4024114:	b009883a 	mov	r4,r22
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
 4024118:	28a1883a 	add	r16,r5,r2
      return 0;

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
   {
      mss   =  (u_short)tcp_mss(so);
 402411c:	4021b940 	call	4021b94 <tcp_mss>

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
 4024120:	1008d23a 	srli	r4,r2,8
      *(cp + 3)  = (u_char) (mss & 0xff);
 4024124:	808000c5 	stb	r2,3(r16)
   {
      mss   =  (u_short)tcp_mss(so);

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
 4024128:	00c00104 	movi	r3,4
   if (flags & TH_SYN)
   {
      mss   =  (u_short)tcp_mss(so);

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
 402412c:	00800084 	movi	r2,2
 4024130:	80800005 	stb	r2,0(r16)
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
 4024134:	80c00045 	stb	r3,1(r16)
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
 4024138:	81000085 	stb	r4,2(r16)
 402413c:	91000e17 	ldw	r4,56(r18)
 4024140:	91400b0b 	ldhu	r5,44(r18)
      *(cp + 3)  = (u_char) (mss & 0xff);
 4024144:	00800104 	movi	r2,4
 4024148:	d8800315 	stw	r2,12(sp)
 402414c:	003e1d06 	br	40239c4 <tcp_output+0xc4>
         }
         }
#endif   /* INCLUDE_PPP */

         /* If this is a SYN (not a SYN/ACK) then set the pmtu */
         if((flags & TH_ACK) == 0)
 4024150:	a880040c 	andi	r2,r21,16
 4024154:	103e991e 	bne	r2,zero,4023bbc <tcp_output+0x2bc>
            inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
            {
               NET ifp;
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
 4024158:	89000417 	ldw	r4,16(r17)
 402415c:	d80b883a 	mov	r5,sp
 4024160:	40282e00 	call	40282e0 <iproute>
               if(ifp)
 4024164:	10006a26 	beq	r2,zero,4024310 <tcp_output+0xa10>
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 4024168:	10c00817 	ldw	r3,32(r2)
 402416c:	10800917 	ldw	r2,36(r2)
 4024170:	10c5c83a 	sub	r2,r2,r3
 4024174:	10bff604 	addi	r2,r2,-40
 4024178:	b8800615 	stw	r2,24(r23)
 402417c:	003e8f06 	br	4023bbc <tcp_output+0x2bc>
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
      ti->ti_flags |= TH_PUSH;
 4024180:	88800843 	ldbu	r2,33(r17)
 4024184:	10800214 	ori	r2,r2,8
 4024188:	88800845 	stb	r2,33(r17)
 402418c:	003eb106 	br	4023c54 <tcp_output+0x354>
      if ((idle || tp->t_flags & TF_NODELAY) &&
          len + off >= (int)so->so_snd.sb_cc)
      {
         goto send;
      }
      if (tp->t_force)
 4024190:	90800a87 	ldb	r2,42(r18)
 4024194:	103ee41e 	bne	r2,zero,4023d28 <tcp_output+0x428>
         goto send;
      if (len >= (int)(tp->max_sndwnd / 2))
 4024198:	90802317 	ldw	r2,140(r18)
 402419c:	1004d07a 	srli	r2,r2,1
 40241a0:	98bee10e 	bge	r19,r2,4023d28 <tcp_output+0x428>
         goto send;
      if (SEQ_LT(tp->snd_nxt, tp->snd_max))
 40241a4:	90801a17 	ldw	r2,104(r18)
 40241a8:	3085c83a 	sub	r2,r6,r2
 40241ac:	103ede16 	blt	r2,zero,4023d28 <tcp_output+0x428>
    * known to peer (as advertised window less
    * next expected input).  If the difference is at least two
    * max size segments or at least 35% of the maximum possible
    * window, then want to send a window update to peer.
    */
   if (win > 0)
 40241b0:	d9000117 	ldw	r4,4(sp)
 40241b4:	01000b0e 	bge	zero,r4,40241e4 <tcp_output+0x8e4>
   {
      int   adv   =  (int)win -  (int)(tp->rcv_adv -  tp->rcv_nxt);
 40241b8:	90c01617 	ldw	r3,88(r18)
 40241bc:	90801917 	ldw	r2,100(r18)
 40241c0:	10c5c83a 	sub	r2,r2,r3
 40241c4:	2087c83a 	sub	r3,r4,r2

      if (so->so_rcv.sb_cc == 0 && adv >= (int)(tp->t_maxseg * 2))
 40241c8:	4800021e 	bne	r9,zero,40241d4 <tcp_output+0x8d4>
 40241cc:	4205883a 	add	r2,r8,r8
 40241d0:	18be1b0e 	bge	r3,r2,4023a40 <tcp_output+0x140>
         goto send;
      if (100 * (u_int)adv / so->so_rcv.sb_hiwat >= 35)
 40241d4:	18801924 	muli	r2,r3,100
 40241d8:	00c00884 	movi	r3,34
 40241dc:	1285203a 	divu	r2,r2,r10
 40241e0:	18be1736 	bltu	r3,r2,4023a40 <tcp_output+0x140>
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
 40241e4:	38000426 	beq	r7,zero,40241f8 <tcp_output+0x8f8>
 40241e8:	90800317 	ldw	r2,12(r18)
 40241ec:	1000021e 	bne	r2,zero,40241f8 <tcp_output+0x8f8>
 40241f0:	90800417 	ldw	r2,16(r18)
 40241f4:	10005426 	beq	r2,zero,4024348 <tcp_output+0xa48>
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
   if (sendalot)
 40241f8:	0023883a 	mov	r17,zero
      goto again;
   return (0);
}
 40241fc:	8805883a 	mov	r2,r17
 4024200:	dfc01217 	ldw	ra,72(sp)
 4024204:	df001117 	ldw	fp,68(sp)
 4024208:	ddc01017 	ldw	r23,64(sp)
 402420c:	dd800f17 	ldw	r22,60(sp)
 4024210:	dd400e17 	ldw	r21,56(sp)
 4024214:	dd000d17 	ldw	r20,52(sp)
 4024218:	dcc00c17 	ldw	r19,48(sp)
 402421c:	dc800b17 	ldw	r18,44(sp)
 4024220:	dc400a17 	ldw	r17,40(sp)
 4024224:	dc000917 	ldw	r16,36(sp)
 4024228:	dec01304 	addi	sp,sp,76
 402422c:	f800283a 	ret
   {
      tcpstat.tcps_sndacks++;
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
      tcpstat.tcps_sndctrl++;
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
 4024230:	90801017 	ldw	r2,64(r18)
 4024234:	90c00e17 	ldw	r3,56(r18)
 4024238:	10c5c83a 	sub	r2,r2,r3
 402423c:	00801e0e 	bge	zero,r2,40242b8 <tcp_output+0x9b8>
      tcpstat.tcps_sndurg++;
 4024240:	01010134 	movhi	r4,1028
 4024244:	210d2b04 	addi	r4,r4,13484
 4024248:	20801617 	ldw	r2,88(r4)
 402424c:	d9400317 	ldw	r5,12(sp)
 4024250:	10800044 	addi	r2,r2,1
 4024254:	2820c03a 	cmpne	r16,r5,zero
 4024258:	20801615 	stw	r2,88(r4)
 402425c:	003e2406 	br	4023af0 <tcp_output+0x1f0>
   {
      if (tp->t_force && len == 1)
         tcpstat.tcps_sndprobe++;
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
      {
         tcpstat.tcps_sndrexmitpack++;
 4024260:	00c10134 	movhi	r3,1028
 4024264:	18cd2b04 	addi	r3,r3,13484
 4024268:	18801217 	ldw	r2,72(r3)
         tcpstat.tcps_sndrexmitbyte += len;
 402426c:	18c01317 	ldw	r3,76(r3)
   {
      if (tp->t_force && len == 1)
         tcpstat.tcps_sndprobe++;
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
      {
         tcpstat.tcps_sndrexmitpack++;
 4024270:	01010134 	movhi	r4,1028
 4024274:	210d2b04 	addi	r4,r4,13484
 4024278:	10800044 	addi	r2,r2,1
         tcpstat.tcps_sndrexmitbyte += len;
 402427c:	1cc7883a 	add	r3,r3,r19
   {
      if (tp->t_force && len == 1)
         tcpstat.tcps_sndprobe++;
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
      {
         tcpstat.tcps_sndrexmitpack++;
 4024280:	20801215 	stw	r2,72(r4)
         tcpstat.tcps_sndrexmitbyte += len;
 4024284:	20c01315 	stw	r3,76(r4)
 4024288:	003e1906 	br	4023af0 <tcp_output+0x1f0>
   EXIT_CRIT_SECTION(tp);

   if (len) 
   {
      if (tp->t_force && len == 1)
         tcpstat.tcps_sndprobe++;
 402428c:	01410134 	movhi	r5,1028
 4024290:	294d2b04 	addi	r5,r5,13484
 4024294:	28801517 	ldw	r2,84(r5)
 4024298:	14c5883a 	add	r2,r2,r19
 402429c:	28801515 	stw	r2,84(r5)
 40242a0:	003e1306 	br	4023af0 <tcp_output+0x1f0>
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
       tp->snd_nxt == tp->snd_max)
   {
      tp->snd_nxt--;
 40242a4:	18ffffc4 	addi	r3,r3,-1
 40242a8:	90c00f15 	stw	r3,60(r18)
 40242ac:	003e2406 	br	4023b40 <tcp_output+0x240>
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 40242b0:	2827883a 	mov	r19,r5
 40242b4:	003ecf06 	br	4023df4 <tcp_output+0x4f4>
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
      tcpstat.tcps_sndctrl++;
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
      tcpstat.tcps_sndurg++;
   else
      tcpstat.tcps_sndwinup++;
 40242b8:	00c10134 	movhi	r3,1028
 40242bc:	18cd2b04 	addi	r3,r3,13484
 40242c0:	18801717 	ldw	r2,92(r3)
 40242c4:	d9000317 	ldw	r4,12(sp)
 40242c8:	10800044 	addi	r2,r2,1
 40242cc:	2020c03a 	cmpne	r16,r4,zero
 40242d0:	18801715 	stw	r2,92(r3)
 40242d4:	003e0606 	br	4023af0 <tcp_output+0x1f0>
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
      {
         bufoff -= sendm->m_len;
         if (bufoff < 0)   /* if off is in this buffer, break */
 40242d8:	dc000417 	ldw	r16,16(sp)
 40242dc:	003e9f06 	br	4023d5c <tcp_output+0x45c>
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
      if (m ==(struct mbuf *)NULL)
      {
         EXIT_CRIT_SECTION(tp);
 40242e0:	401c7a40 	call	401c7a4 <irq_Unmask>
 40242e4:	04401a44 	movi	r17,105
 40242e8:	003fc406 	br	40241fc <tcp_output+0x8fc>
   }
#endif   /* IP_V6 */

   if (error)
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
 40242ec:	00801a44 	movi	r2,105
 40242f0:	88bfc21e 	bne	r17,r2,40241fc <tcp_output+0x8fc>
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
 40242f4:	a0800817 	ldw	r2,32(r20)
 40242f8:	10000826 	beq	r2,zero,402431c <tcp_output+0xa1c>
            m = m->m_next;
         m_freem(m); /* free the mbuf chain */
 40242fc:	a009883a 	mov	r4,r20
 4024300:	401d74c0 	call	401d74c <m_freem>
         tcp_quench(tp->t_inpcb);
 4024304:	91000d17 	ldw	r4,52(r18)
 4024308:	40243800 	call	4024380 <tcp_quench>
 402430c:	003fbb06 	br	40241fc <tcp_output+0x8fc>
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
               if(ifp)
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
               else
                  inp->inp_pmtu = 580;  /* Ugh. */
 4024310:	00809104 	movi	r2,580
 4024314:	b8800615 	stw	r2,24(r23)
 4024318:	003e2806 	br	4023bbc <tcp_output+0x2bc>
   if (error)
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
            m = m->m_next;
 402431c:	a5000617 	ldw	r20,24(r20)
 4024320:	003ff606 	br	40242fc <tcp_output+0x9fc>
      if (len) /* attach any data to send */
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
         if (m->m_next == 0)
         {
            m_freem(m);
 4024324:	a009883a 	mov	r4,r20
 4024328:	401d74c0 	call	401d74c <m_freem>
            EXIT_CRIT_SECTION(tp);
 402432c:	04401a44 	movi	r17,105
 4024330:	401c7a40 	call	401c7a4 <irq_Unmask>
 4024334:	003fb106 	br	40241fc <tcp_output+0x8fc>
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
      if (mopt == NULL) 
      {
         m_freem(m);
 4024338:	a009883a 	mov	r4,r20
 402433c:	401d74c0 	call	401d74c <m_freem>
 4024340:	04401a44 	movi	r17,105
 4024344:	003fad06 	br	40241fc <tcp_output+0x8fc>
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
       tp->t_timer[TCPT_PERSIST] == 0) 
   {
      tp->t_rxtshift = 0;
 4024348:	90000715 	stw	zero,28(r18)
      tcp_setpersist(tp);
 402434c:	9009883a 	mov	r4,r18
 4024350:	402384c0 	call	402384c <tcp_setpersist>
 4024354:	0023883a 	mov	r17,zero
 4024358:	003fa806 	br	40241fc <tcp_output+0x8fc>

0402435c <tcp_init>:

void
tcp_init()
{
   tcp_iss = 1;      /* wrong */
   tcb.inp_next = tcb.inp_prev = &tcb;
 402435c:	00810134 	movhi	r2,1028
 4024360:	108d2004 	addi	r2,r2,13440
 */

void
tcp_init()
{
   tcp_iss = 1;      /* wrong */
 4024364:	01000044 	movi	r4,1
 4024368:	00c10134 	movhi	r3,1028
 402436c:	18e94004 	addi	r3,r3,-23296
 4024370:	19000015 	stw	r4,0(r3)
   tcb.inp_next = tcb.inp_prev = &tcb;
 4024374:	10800015 	stw	r2,0(r2)
 4024378:	10800115 	stw	r2,4(r2)
}
 402437c:	f800283a 	ret

04024380 <tcp_quench>:
 */

void
tcp_quench(struct inpcb * inp)
{
   struct tcpcb * tp =  intotcpcb(inp);
 4024380:	20c00917 	ldw	r3,36(r4)

   if (tp)
 4024384:	18000226 	beq	r3,zero,4024390 <tcp_quench+0x10>
      tp->snd_cwnd = tp->t_maxseg;
 4024388:	18800a0b 	ldhu	r2,40(r3)
 402438c:	18801b15 	stw	r2,108(r3)
 4024390:	f800283a 	ret

04024394 <tcp_putseq>:
u_char *
tcp_putseq(u_char * cp, tcp_seq seq)
{
   int   i;

   cp += 3;                /* do low byte first */
 4024394:	208000c4 	addi	r2,r4,3
 4024398:	1007883a 	mov	r3,r2
 402439c:	213fffc4 	addi	r4,r4,-1
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
 40243a0:	19400005 	stb	r5,0(r3)
 40243a4:	18ffffc4 	addi	r3,r3,-1
      seq >>= 8;
 40243a8:	280ad23a 	srli	r5,r5,8
tcp_putseq(u_char * cp, tcp_seq seq)
{
   int   i;

   cp += 3;                /* do low byte first */
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 40243ac:	193ffc1e 	bne	r3,r4,40243a0 <tcp_putseq+0xc>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
      seq >>= 8;
   }
   return (cp + 5);
}
 40243b0:	10800044 	addi	r2,r2,1
 40243b4:	f800283a 	ret

040243b8 <tcp_getseq>:
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
   {
      seq <<= 8;
 40243b8:	20800003 	ldbu	r2,0(r4)
      seq += (u_long)*(cp++);
 40243bc:	00c00044 	movi	r3,1
 40243c0:	20c9883a 	add	r4,r4,r3
 40243c4:	21400003 	ldbu	r5,0(r4)
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
   {
      seq <<= 8;
 40243c8:	1004923a 	slli	r2,r2,8
      seq += (u_long)*(cp++);
 40243cc:	20c9883a 	add	r4,r4,r3
 40243d0:	21800003 	ldbu	r6,0(r4)
 40243d4:	1145883a 	add	r2,r2,r5
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
   {
      seq <<= 8;
 40243d8:	1004923a 	slli	r2,r2,8
 40243dc:	20c00043 	ldbu	r3,1(r4)
      seq += (u_long)*(cp++);
 40243e0:	1185883a 	add	r2,r2,r6
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
   {
      seq <<= 8;
 40243e4:	1004923a 	slli	r2,r2,8
      seq += (u_long)*(cp++);
   }
   return seq;
}
 40243e8:	10c5883a 	add	r2,r2,r3
 40243ec:	f800283a 	ret

040243f0 <tcp_close>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
 40243f0:	defffa04 	addi	sp,sp,-24
 40243f4:	dcc00315 	stw	r19,12(sp)
 40243f8:	dc000015 	stw	r16,0(sp)
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
 40243fc:	24c00d17 	ldw	r19,52(r4)
   struct socket *   so =  inp->inp_socket;
   struct mbuf *  m;

   t = tp->seg_next;
 4024400:	24000017 	ldw	r16,0(r4)
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
 4024404:	dd000415 	stw	r20,16(sp)
 4024408:	dc800215 	stw	r18,8(sp)
 402440c:	dfc00515 	stw	ra,20(sp)
 4024410:	dc400115 	stw	r17,4(sp)
 4024414:	2025883a 	mov	r18,r4
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
   struct socket *   so =  inp->inp_socket;
 4024418:	9d000817 	ldw	r20,32(r19)
   struct mbuf *  m;

   t = tp->seg_next;
   while (t != (struct tcpiphdr *)tp) 
 402441c:	81000926 	beq	r16,r4,4024444 <tcp_close+0x54>
   {
      t = (struct tcpiphdr *)t->ti_next;
 4024420:	84000017 	ldw	r16,0(r16)
      m = dtom(t->ti_prev);
 4024424:	81000117 	ldw	r4,4(r16)
 4024428:	401d4240 	call	401d424 <dtom>
      remque(t->ti_prev);
 402442c:	81000117 	ldw	r4,4(r16)

   t = tp->seg_next;
   while (t != (struct tcpiphdr *)tp) 
   {
      t = (struct tcpiphdr *)t->ti_next;
      m = dtom(t->ti_prev);
 4024430:	1023883a 	mov	r17,r2
      remque(t->ti_prev);
 4024434:	401d10c0 	call	401d10c <remque>
      m_freem (m);
 4024438:	8809883a 	mov	r4,r17
 402443c:	401d74c0 	call	401d74c <m_freem>
   struct inpcb * inp   =  tp->t_inpcb;
   struct socket *   so =  inp->inp_socket;
   struct mbuf *  m;

   t = tp->seg_next;
   while (t != (struct tcpiphdr *)tp) 
 4024440:	84bff71e 	bne	r16,r18,4024420 <tcp_close+0x30>
      t = (struct tcpiphdr *)t->ti_next;
      m = dtom(t->ti_prev);
      remque(t->ti_prev);
      m_freem (m);
   }
   if (tp->t_template)
 4024444:	91000c17 	ldw	r4,48(r18)
 4024448:	20000126 	beq	r4,zero,4024450 <tcp_close+0x60>
      TPH_FREE (tp->t_template);
 402444c:	401cce40 	call	401cce4 <npfree>
   TCB_FREE (tp);
 4024450:	9009883a 	mov	r4,r18
 4024454:	401cce40 	call	401cce4 <npfree>
   inp->inp_ppcb = 0;
   soisdisconnected(so);
 4024458:	a009883a 	mov	r4,r20
      m_freem (m);
   }
   if (tp->t_template)
      TPH_FREE (tp->t_template);
   TCB_FREE (tp);
   inp->inp_ppcb = 0;
 402445c:	98000915 	stw	zero,36(r19)
   soisdisconnected(so);
 4024460:	40212680 	call	4021268 <soisdisconnected>
   in_pcbdetach(inp);
 4024464:	9809883a 	mov	r4,r19
 4024468:	402e4cc0 	call	402e4cc <in_pcbdetach>
   tcpstat.tcps_closed++;
 402446c:	01010134 	movhi	r4,1028
 4024470:	210d2b04 	addi	r4,r4,13484
 4024474:	20c00517 	ldw	r3,20(r4)
   return ((struct tcpcb *)0);
}
 4024478:	0005883a 	mov	r2,zero
      TPH_FREE (tp->t_template);
   TCB_FREE (tp);
   inp->inp_ppcb = 0;
   soisdisconnected(so);
   in_pcbdetach(inp);
   tcpstat.tcps_closed++;
 402447c:	18c00044 	addi	r3,r3,1
 4024480:	20c00515 	stw	r3,20(r4)
   return ((struct tcpcb *)0);
}
 4024484:	dfc00517 	ldw	ra,20(sp)
 4024488:	dd000417 	ldw	r20,16(sp)
 402448c:	dcc00317 	ldw	r19,12(sp)
 4024490:	dc800217 	ldw	r18,8(sp)
 4024494:	dc400117 	ldw	r17,4(sp)
 4024498:	dc000017 	ldw	r16,0(sp)
 402449c:	dec00604 	addi	sp,sp,24
 40244a0:	f800283a 	ret

040244a4 <tcp_drop>:
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
   struct socket *   so =  tp->t_inpcb->inp_socket;
 40244a4:	20c00d17 	ldw	r3,52(r4)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
 40244a8:	21800217 	ldw	r6,8(r4)
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
 40244ac:	defffc04 	addi	sp,sp,-16
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
 40244b0:	00800084 	movi	r2,2
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
 40244b4:	dc800215 	stw	r18,8(sp)
 40244b8:	dc400115 	stw	r17,4(sp)
 40244bc:	dc000015 	stw	r16,0(sp)
 40244c0:	dfc00315 	stw	ra,12(sp)
      tp->t_state = TCPS_CLOSED;
      (void) tcp_output(tp);
      tcpstat.tcps_drops++;
   }
   else
      tcpstat.tcps_conndrops++;
 40244c4:	01c10134 	movhi	r7,1028
 40244c8:	39cd2b04 	addi	r7,r7,13484
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
 40244cc:	2021883a 	mov	r16,r4
 40244d0:	2825883a 	mov	r18,r5
   struct socket *   so =  tp->t_inpcb->inp_socket;
 40244d4:	1c400817 	ldw	r17,32(r3)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
 40244d8:	11800b16 	blt	r2,r6,4024508 <tcp_drop+0x64>
      tp->t_state = TCPS_CLOSED;
      (void) tcp_output(tp);
      tcpstat.tcps_drops++;
   }
   else
      tcpstat.tcps_conndrops++;
 40244dc:	38800417 	ldw	r2,16(r7)
   so->so_error = err;
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 40244e0:	8009883a 	mov	r4,r16
      (void) tcp_output(tp);
      tcpstat.tcps_drops++;
   }
   else
      tcpstat.tcps_conndrops++;
   so->so_error = err;
 40244e4:	8c800615 	stw	r18,24(r17)
      tp->t_state = TCPS_CLOSED;
      (void) tcp_output(tp);
      tcpstat.tcps_drops++;
   }
   else
      tcpstat.tcps_conndrops++;
 40244e8:	10800044 	addi	r2,r2,1
 40244ec:	38800415 	stw	r2,16(r7)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
}
 40244f0:	dfc00317 	ldw	ra,12(sp)
 40244f4:	dc800217 	ldw	r18,8(sp)
 40244f8:	dc400117 	ldw	r17,4(sp)
 40244fc:	dc000017 	ldw	r16,0(sp)
 4024500:	dec00404 	addi	sp,sp,16
   so->so_error = err;
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 4024504:	40243f01 	jmpi	40243f0 <tcp_close>
{
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
   {
      tp->t_state = TCPS_CLOSED;
 4024508:	20000215 	stw	zero,8(r4)
      (void) tcp_output(tp);
 402450c:	40239000 	call	4023900 <tcp_output>
      tcpstat.tcps_drops++;
 4024510:	00c10134 	movhi	r3,1028
 4024514:	18cd2b04 	addi	r3,r3,13484
 4024518:	18800317 	ldw	r2,12(r3)
   so->so_error = err;
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 402451c:	8009883a 	mov	r4,r16
      (void) tcp_output(tp);
      tcpstat.tcps_drops++;
   }
   else
      tcpstat.tcps_conndrops++;
   so->so_error = err;
 4024520:	8c800615 	stw	r18,24(r17)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
   {
      tp->t_state = TCPS_CLOSED;
      (void) tcp_output(tp);
      tcpstat.tcps_drops++;
 4024524:	10800044 	addi	r2,r2,1
 4024528:	18800315 	stw	r2,12(r3)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
}
 402452c:	dfc00317 	ldw	ra,12(sp)
 4024530:	dc800217 	ldw	r18,8(sp)
 4024534:	dc400117 	ldw	r17,4(sp)
 4024538:	dc000017 	ldw	r16,0(sp)
 402453c:	dec00404 	addi	sp,sp,16
   so->so_error = err;
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 4024540:	40243f01 	jmpi	40243f0 <tcp_close>

04024544 <tcp_newtcpcb>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
 4024544:	defffe04 	addi	sp,sp,-8
 4024548:	dc000015 	stw	r16,0(sp)
 402454c:	2021883a 	mov	r16,r4
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
 4024550:	01002504 	movi	r4,148
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
 4024554:	dfc00115 	stw	ra,4(sp)
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
 4024558:	401cdc80 	call	401cdc8 <npalloc>
 402455c:	1009883a 	mov	r4,r2
   if (tp == NULL)
 4024560:	10001526 	beq	r2,zero,40245b8 <tcp_newtcpcb+0x74>
      return (struct tcpcb *)NULL;
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
   tp->t_maxseg = TCP_MSS;
 4024564:	00816d04 	movi	r2,1460
 4024568:	20800a0d 	sth	r2,40(r4)
    */
   tp->t_srtt = TCPTV_SRTTBASE;
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
 402456c:	00800304 	movi	r2,12
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
 4024570:	00c00604 	movi	r3,24

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
 4024574:	20800815 	stw	r2,32(r4)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
 4024578:	00bfffd4 	movui	r2,65535
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
 402457c:	20c02115 	stw	r3,132(r4)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
 4024580:	20801c15 	stw	r2,112(r4)

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
 4024584:	00c2da04 	movi	r3,2920

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */

   inp->inp_ppcb = (char *)tp;
   return (tp);
}
 4024588:	2005883a 	mov	r2,r4

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
 402458c:	20c01b15 	stw	r3,108(r4)
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */

   inp->inp_ppcb = (char *)tp;
 4024590:	81000915 	stw	r4,36(r16)
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
   if (tp == NULL)
      return (struct tcpcb *)NULL;
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
 4024594:	21000115 	stw	r4,4(r4)
 4024598:	21000015 	stw	r4,0(r4)
   tp->t_maxseg = TCP_MSS;
   tp->t_flags = 0;        /* sends options! */
 402459c:	20000b0d 	sth	zero,44(r4)
   tp->t_inpcb = inp;
 40245a0:	24000d15 	stw	r16,52(r4)
   /*
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
 40245a4:	20002015 	stw	zero,128(r4)

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */

   inp->inp_ppcb = (char *)tp;
   return (tp);
}
 40245a8:	dfc00117 	ldw	ra,4(sp)
 40245ac:	dc000017 	ldw	r16,0(sp)
 40245b0:	dec00204 	addi	sp,sp,8
 40245b4:	f800283a 	ret
{
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
   if (tp == NULL)
 40245b8:	0009883a 	mov	r4,zero

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */

   inp->inp_ppcb = (char *)tp;
   return (tp);
}
 40245bc:	2005883a 	mov	r2,r4
 40245c0:	dfc00117 	ldw	ra,4(sp)
 40245c4:	dc000017 	ldw	r16,0(sp)
 40245c8:	dec00204 	addi	sp,sp,8
 40245cc:	f800283a 	ret

040245d0 <tcp_template>:
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
 40245d0:	defffd04 	addi	sp,sp,-12
 40245d4:	dc000015 	stw	r16,0(sp)
   struct inpcb * inp   =  tp->t_inpcb;
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
 40245d8:	24000c17 	ldw	r16,48(r4)
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
 40245dc:	2007883a 	mov	r3,r4
 40245e0:	dc400115 	stw	r17,4(sp)
 40245e4:	dfc00215 	stw	ra,8(sp)
   struct inpcb * inp   =  tp->t_inpcb;
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
 40245e8:	01000a04 	movi	r4,40
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
   struct inpcb * inp   =  tp->t_inpcb;
 40245ec:	1c400d17 	ldw	r17,52(r3)
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
 40245f0:	80001a26 	beq	r16,zero,402465c <tcp_template+0x8c>
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
      if (n == NULL)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
 40245f4:	00850004 	movi	r2,5120
 40245f8:	8080028d 	sth	r2,10(r16)
   n->ti_src = inp->inp_laddr;
   n->ti_dst = inp->inp_faddr;
   n->ti_sport = inp->inp_lport;
 40245fc:	88c0078b 	ldhu	r3,30(r17)
      if (n == NULL)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
 4024600:	88800417 	ldw	r2,16(r17)
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
      if (n == NULL)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
 4024604:	80000115 	stw	zero,4(r16)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
   n->ti_dst = inp->inp_faddr;
   n->ti_sport = inp->inp_lport;
 4024608:	80c0050d 	sth	r3,20(r16)
      if (n == NULL)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
 402460c:	80800315 	stw	r2,12(r16)
   n->ti_dst = inp->inp_faddr;
   n->ti_sport = inp->inp_lport;
   n->ti_dport = inp->inp_fport;
 4024610:	88c0070b 	ldhu	r3,28(r17)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
   n->ti_dst = inp->inp_faddr;
 4024614:	89000317 	ldw	r4,12(r17)
   n->ti_sport = inp->inp_lport;
   n->ti_dport = inp->inp_fport;
   n->ti_seq = 0;
   n->ti_ack = 0;
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
 4024618:	00801404 	movi	r2,80
 402461c:	80800805 	stb	r2,32(r16)
   n->ti_next = n->ti_prev = 0;
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
   n->ti_dst = inp->inp_faddr;
   n->ti_sport = inp->inp_lport;
   n->ti_dport = inp->inp_fport;
 4024620:	80c0058d 	sth	r3,22(r16)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
   n->ti_dst = inp->inp_faddr;
 4024624:	81000415 	stw	r4,16(r16)
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
      if (n == NULL)
         return (0);
   }
   n->ti_next = n->ti_prev = 0;
 4024628:	80000015 	stw	zero,0(r16)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
   n->ti_src = inp->inp_laddr;
   n->ti_dst = inp->inp_faddr;
   n->ti_sport = inp->inp_lport;
   n->ti_dport = inp->inp_fport;
   n->ti_seq = 0;
 402462c:	80000615 	stw	zero,24(r16)
   n->ti_ack = 0;
 4024630:	80000715 	stw	zero,28(r16)
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
   n->ti_flags = 0;
 4024634:	80000845 	stb	zero,33(r16)
   n->ti_win = 0;
 4024638:	8000088d 	sth	zero,34(r16)
   n->ti_sum = 0;
 402463c:	8000090d 	sth	zero,36(r16)
   n->ti_urp = 0;
 4024640:	8000098d 	sth	zero,38(r16)
   return (n);
}
 4024644:	8005883a 	mov	r2,r16
 4024648:	dfc00217 	ldw	ra,8(sp)
 402464c:	dc400117 	ldw	r17,4(sp)
 4024650:	dc000017 	ldw	r16,0(sp)
 4024654:	dec00304 	addi	sp,sp,12
 4024658:	f800283a 	ret
   struct inpcb * inp   =  tp->t_inpcb;
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
 402465c:	401cdc80 	call	401cdc8 <npalloc>
      if (n == NULL)
 4024660:	103ff826 	beq	r2,zero,4024644 <tcp_template+0x74>
   struct inpcb * inp   =  tp->t_inpcb;
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
 4024664:	1021883a 	mov	r16,r2
 4024668:	003fe206 	br	40245f4 <tcp_template+0x24>

0402466c <tcp_respond>:
   struct tcpiphdr * ti,
   tcp_seq  ack,
   tcp_seq  seq,
   int   flags,
   struct mbuf *  ti_mbuf)
{
 402466c:	defff604 	addi	sp,sp,-40
 4024670:	ddc00715 	stw	r23,28(sp)
 4024674:	dd800615 	stw	r22,24(sp)
 4024678:	dd400515 	stw	r21,20(sp)
 402467c:	dcc00315 	stw	r19,12(sp)
 4024680:	dc800215 	stw	r18,8(sp)
 4024684:	dc400115 	stw	r17,4(sp)
 4024688:	dfc00915 	stw	ra,36(sp)
 402468c:	df000815 	stw	fp,32(sp)
 4024690:	dd000415 	stw	r20,16(sp)
 4024694:	dc000015 	stw	r16,0(sp)
 4024698:	202f883a 	mov	r23,r4
 402469c:	2823883a 	mov	r17,r5
 40246a0:	302d883a 	mov	r22,r6
 40246a4:	382b883a 	mov	r21,r7
 40246a8:	dcc00a17 	ldw	r19,40(sp)
 40246ac:	dc800b17 	ldw	r18,44(sp)
   int      domain;     /* AF_INET or AF_INET6 */
   int      win = 0;    /* window to use in sent packet */
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
 40246b0:	20005726 	beq	r4,zero,4024810 <tcp_respond+0x1a4>
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
 40246b4:	20800d17 	ldw	r2,52(r4)
 40246b8:	10c00817 	ldw	r3,32(r2)
 40246bc:	19000a17 	ldw	r4,40(r3)
 40246c0:	18800b17 	ldw	r2,44(r3)
 40246c4:	1105c83a 	sub	r2,r2,r4
 40246c8:	10005116 	blt	r2,zero,4024810 <tcp_respond+0x1a4>
 40246cc:	1039883a 	mov	fp,r2

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
 40246d0:	98005126 	beq	r19,zero,4024818 <tcp_respond+0x1ac>
      domain = tp->t_inpcb->inp_socket->so_domain;
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
      if(m->pkt->type == IPTP)   /* IPv4 packet */
 40246d4:	90c00117 	ldw	r3,4(r18)
         domain = AF_INET;
      else
         domain = AF_INET6;

      m_freem(m->m_next);
 40246d8:	91000617 	ldw	r4,24(r18)
      domain = tp->t_inpcb->inp_socket->so_domain;
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
      if(m->pkt->type == IPTP)   /* IPv4 packet */
 40246dc:	04000204 	movi	r16,8
 40246e0:	1880080b 	ldhu	r2,32(r3)
 40246e4:	1428c03a 	cmpne	r20,r2,r16
         domain = AF_INET;
      else
         domain = AF_INET6;

      m_freem(m->m_next);
 40246e8:	401d74c0 	call	401d74c <m_freem>
      m->m_next = 0;
      tlen = 0;         /* NO data */
      m->m_len = TCPIPHDRSZ;
      xchg(ti->ti_dport, ti->ti_sport, u_short);
 40246ec:	8880058b 	ldhu	r2,22(r17)
 40246f0:	88c0050b 	ldhu	r3,20(r17)
      if(m->pkt->type == IPTP)
 40246f4:	91000117 	ldw	r4,4(r18)

      m_freem(m->m_next);
      m->m_next = 0;
      tlen = 0;         /* NO data */
      m->m_len = TCPIPHDRSZ;
      xchg(ti->ti_dport, ti->ti_sport, u_short);
 40246f8:	8880050d 	sth	r2,20(r17)
 40246fc:	88c0058d 	sth	r3,22(r17)
      if(m->pkt->type == IPTP)
 4024700:	2140080b 	ldhu	r5,32(r4)
         domain = AF_INET6;

      m_freem(m->m_next);
      m->m_next = 0;
      tlen = 0;         /* NO data */
      m->m_len = TCPIPHDRSZ;
 4024704:	00800a04 	movi	r2,40
 4024708:	90800215 	stw	r2,8(r18)
      domain = tp->t_inpcb->inp_socket->so_domain;
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
      if(m->pkt->type == IPTP)   /* IPv4 packet */
 402470c:	a5000084 	addi	r20,r20,2
         domain = AF_INET;
      else
         domain = AF_INET6;

      m_freem(m->m_next);
      m->m_next = 0;
 4024710:	90000615 	stw	zero,24(r18)
      tlen = 0;         /* NO data */
      m->m_len = TCPIPHDRSZ;
      xchg(ti->ti_dport, ti->ti_sport, u_short);
      if(m->pkt->type == IPTP)
 4024714:	2c003726 	beq	r5,r16,40247f4 <tcp_respond+0x188>
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
      if (flags & TH_RST)  /* count resets in MIB */
 4024718:	9880010c 	andi	r2,r19,4
 402471c:	10002d1e 	bne	r2,zero,40247d4 <tcp_respond+0x168>
 4024720:	9819883a 	mov	r12,r19
 4024724:	001b883a 	mov	r13,zero
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 4024728:	a80ed23a 	srli	r7,r21,8
 402472c:	a97fc00c 	andi	r5,r21,65280
 4024730:	280a923a 	slli	r5,r5,8
 4024734:	a812963a 	slli	r9,r21,24
 4024738:	a804d63a 	srli	r2,r21,24
   ti->ti_ack = htonl(ack);
 402473c:	b010d23a 	srli	r8,r22,8
 4024740:	b13fc00c 	andi	r4,r22,65280
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
   ti->ti_flags = (u_char)flags;
   ti->ti_win = htons((u_short)win);
 4024744:	e1bfffcc 	andi	r6,fp,65535
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
   ti->ti_ack = htonl(ack);
 4024748:	2008923a 	slli	r4,r4,8
 402474c:	b014963a 	slli	r10,r22,24
 4024750:	b006d63a 	srli	r3,r22,24
      if (flags & TH_RST)  /* count resets in MIB */
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 4024754:	39ffc00c 	andi	r7,r7,65280
   ti->ti_ack = htonl(ack);
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
   ti->ti_flags = (u_char)flags;
   ti->ti_win = htons((u_short)win);
 4024758:	3016923a 	slli	r11,r6,8
      if (flags & TH_RST)  /* count resets in MIB */
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 402475c:	11c4b03a 	or	r2,r2,r7
   ti->ti_ack = htonl(ack);
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
   ti->ti_flags = (u_char)flags;
   ti->ti_win = htons((u_short)win);
 4024760:	300cd23a 	srli	r6,r6,8
      if (flags & TH_RST)  /* count resets in MIB */
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 4024764:	2a4ab03a 	or	r5,r5,r9
 4024768:	1144b03a 	or	r2,r2,r5
   ti->ti_ack = htonl(ack);
 402476c:	423fc00c 	andi	r8,r8,65280
 4024770:	1a06b03a 	or	r3,r3,r8
 4024774:	2288b03a 	or	r4,r4,r10
      if (flags & TH_RST)  /* count resets in MIB */
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 4024778:	88800615 	stw	r2,24(r17)
   ti->ti_ack = htonl(ack);
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
 402477c:	00801404 	movi	r2,80
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
   ti->ti_ack = htonl(ack);
 4024780:	1906b03a 	or	r3,r3,r4
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
   ti->ti_flags = (u_char)flags;
   ti->ti_win = htons((u_short)win);
 4024784:	32ccb03a 	or	r6,r6,r11
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
   ti->ti_ack = htonl(ack);
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
 4024788:	88800805 	stb	r2,32(r17)
   ti->ti_flags = (u_char)flags;
   ti->ti_win = htons((u_short)win);
   ti->ti_urp = 0;

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
 402478c:	00800084 	movi	r2,2
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
   ti->ti_ack = htonl(ack);
 4024790:	88c00715 	stw	r3,28(r17)
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
   ti->ti_flags = (u_char)flags;
 4024794:	8b000845 	stb	r12,33(r17)
   ti->ti_win = htons((u_short)win);
 4024798:	8980088d 	sth	r6,34(r17)
   ti->ti_urp = 0;
 402479c:	8800098d 	sth	zero,38(r17)

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
 40247a0:	a0804326 	beq	r20,r2,40248b0 <tcp_respond+0x244>
      default:
         dtrap();
         break;
   }
   return;
}
 40247a4:	dfc00917 	ldw	ra,36(sp)
 40247a8:	df000817 	ldw	fp,32(sp)
 40247ac:	ddc00717 	ldw	r23,28(sp)
 40247b0:	dd800617 	ldw	r22,24(sp)
 40247b4:	dd400517 	ldw	r21,20(sp)
 40247b8:	dd000417 	ldw	r20,16(sp)
 40247bc:	dcc00317 	ldw	r19,12(sp)
 40247c0:	dc800217 	ldw	r18,8(sp)
 40247c4:	dc400117 	ldw	r17,4(sp)
 40247c8:	dc000017 	ldw	r16,0(sp)
 40247cc:	dec00a04 	addi	sp,sp,40

         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();
 40247d0:	401c81c1 	jmpi	401c81c <dtrap>
      m->m_len = TCPIPHDRSZ;
      xchg(ti->ti_dport, ti->ti_sport, u_short);
      if(m->pkt->type == IPTP)
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
      if (flags & TH_RST)  /* count resets in MIB */
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
 40247d4:	00c10134 	movhi	r3,1028
 40247d8:	18ccfd04 	addi	r3,r3,13300
 40247dc:	18800e17 	ldw	r2,56(r3)
 40247e0:	9819883a 	mov	r12,r19
 40247e4:	001b883a 	mov	r13,zero
 40247e8:	10800044 	addi	r2,r2,1
 40247ec:	18800e15 	stw	r2,56(r3)
 40247f0:	003fcd06 	br	4024728 <tcp_respond+0xbc>
      m->m_next = 0;
      tlen = 0;         /* NO data */
      m->m_len = TCPIPHDRSZ;
      xchg(ti->ti_dport, ti->ti_sport, u_short);
      if(m->pkt->type == IPTP)
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
 40247f4:	88800417 	ldw	r2,16(r17)
 40247f8:	88c00317 	ldw	r3,12(r17)
 40247fc:	88800315 	stw	r2,12(r17)
      if (flags & TH_RST)  /* count resets in MIB */
 4024800:	9880010c 	andi	r2,r19,4
      m->m_next = 0;
      tlen = 0;         /* NO data */
      m->m_len = TCPIPHDRSZ;
      xchg(ti->ti_dport, ti->ti_sport, u_short);
      if(m->pkt->type == IPTP)
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
 4024804:	88c00415 	stw	r3,16(r17)
      if (flags & TH_RST)  /* count resets in MIB */
 4024808:	103ff21e 	bne	r2,zero,40247d4 <tcp_respond+0x168>
 402480c:	003fc406 	br	4024720 <tcp_respond+0xb4>
   int      win = 0;    /* window to use in sent packet */
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
 4024810:	0039883a 	mov	fp,zero

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
 4024814:	983faf1e 	bne	r19,zero,40246d4 <tcp_respond+0x68>
   {
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
 4024818:	010000c4 	movi	r4,3
 402481c:	01401004 	movi	r5,64
 4024820:	401dad40 	call	401dad4 <m_getnbuf>
 4024824:	1025883a 	mov	r18,r2
      if (m == NULL)
 4024828:	10004b26 	beq	r2,zero,4024958 <tcp_respond+0x2ec>
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
 402482c:	10800117 	ldw	r2,4(r2)
      m->m_len = TCPIPHDRSZ + tlen;
      /*
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
 4024830:	94000317 	ldw	r16,12(r18)
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
      if (m == NULL)
         return;
      tlen = 1;   /* Keepalives have one byte of data */
      m->m_len = TCPIPHDRSZ + tlen;
 4024834:	00c00a44 	movi	r3,41
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
 4024838:	11000117 	ldw	r4,4(r2)
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
      if (m == NULL)
         return;
      tlen = 1;   /* Keepalives have one byte of data */
      m->m_len = TCPIPHDRSZ + tlen;
 402483c:	90c00215 	stw	r3,8(r18)
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
 4024840:	81003e36 	bltu	r16,r4,402493c <tcp_respond+0x2d0>
      {
         panic("tcp_respond- packet ptr underflow\n");
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
 4024844:	88c00017 	ldw	r3,0(r17)
      ti = tmp_thdr;
      flags = TH_ACK;
      domain = tp->t_inpcb->inp_socket->so_domain;
 4024848:	03400044 	movi	r13,1
 402484c:	03000404 	movi	r12,16
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
      {
         panic("tcp_respond- packet ptr underflow\n");
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
 4024850:	80c00015 	stw	r3,0(r16)
 4024854:	88800117 	ldw	r2,4(r17)
 4024858:	80800115 	stw	r2,4(r16)
 402485c:	88c00217 	ldw	r3,8(r17)
 4024860:	80c00215 	stw	r3,8(r16)
 4024864:	88800317 	ldw	r2,12(r17)
 4024868:	80800315 	stw	r2,12(r16)
 402486c:	88c00417 	ldw	r3,16(r17)
 4024870:	80c00415 	stw	r3,16(r16)
 4024874:	88800517 	ldw	r2,20(r17)
 4024878:	80800515 	stw	r2,20(r16)
 402487c:	88c00617 	ldw	r3,24(r17)
 4024880:	80c00615 	stw	r3,24(r16)
 4024884:	88800717 	ldw	r2,28(r17)
 4024888:	80800715 	stw	r2,28(r16)
 402488c:	88c00817 	ldw	r3,32(r17)
 4024890:	80c00815 	stw	r3,32(r16)
 4024894:	89000917 	ldw	r4,36(r17)
      ti = tmp_thdr;
      flags = TH_ACK;
      domain = tp->t_inpcb->inp_socket->so_domain;
 4024898:	8023883a 	mov	r17,r16
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
      {
         panic("tcp_respond- packet ptr underflow\n");
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
 402489c:	81000915 	stw	r4,36(r16)
      ti = tmp_thdr;
      flags = TH_ACK;
      domain = tp->t_inpcb->inp_socket->so_domain;
 40248a0:	b8800d17 	ldw	r2,52(r23)
 40248a4:	10c00817 	ldw	r3,32(r2)
 40248a8:	1d000517 	ldw	r20,20(r3)
 40248ac:	003f9e06 	br	4024728 <tcp_respond+0xbc>
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
 40248b0:	91400117 	ldw	r5,4(r18)
 40248b4:	00810134 	movhi	r2,1028
 40248b8:	10a90c04 	addi	r2,r2,-23504
 40248bc:	11000017 	ldw	r4,0(r2)
 40248c0:	28c00117 	ldw	r3,4(r5)
      {
         struct ip * pip;

         pip = (struct ip *)((char*)ti+sizeof(struct ipovly)-sizeof(struct ip));

         pip->ip_len = (unshort)(TCPIPHDRSZ + tlen);
 40248c4:	68800a04 	addi	r2,r13,40
 40248c8:	8880008d 	sth	r2,2(r17)
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
 40248cc:	1909883a 	add	r4,r3,r4
 40248d0:	89001436 	bltu	r17,r4,4024924 <tcp_respond+0x2b8>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
 40248d4:	94400315 	stw	r17,12(r18)

         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
 40248d8:	b8002b26 	beq	r23,zero,4024988 <tcp_respond+0x31c>
              m_freem(m);
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
 40248dc:	b9000d17 	ldw	r4,52(r23)
 40248e0:	20001a26 	beq	r4,zero,402494c <tcp_respond+0x2e0>
 40248e4:	21000817 	ldw	r4,32(r4)
 40248e8:	20001826 	beq	r4,zero,402494c <tcp_respond+0x2e0>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
 40248ec:	21401f17 	ldw	r5,124(r4)
 40248f0:	9009883a 	mov	r4,r18
      default:
         dtrap();
         break;
   }
   return;
}
 40248f4:	dfc00917 	ldw	ra,36(sp)
 40248f8:	df000817 	ldw	fp,32(sp)
 40248fc:	ddc00717 	ldw	r23,28(sp)
 4024900:	dd800617 	ldw	r22,24(sp)
 4024904:	dd400517 	ldw	r21,20(sp)
 4024908:	dd000417 	ldw	r20,16(sp)
 402490c:	dcc00317 	ldw	r19,12(sp)
 4024910:	dc800217 	ldw	r18,8(sp)
 4024914:	dc400117 	ldw	r17,4(sp)
 4024918:	dc000017 	ldw	r16,0(sp)
 402491c:	dec00a04 	addi	sp,sp,40
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
 4024920:	401d7701 	jmpi	401d770 <ip_output>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
         }
         else     /* MAC may not fit, adjust pointer and move headers back */
         {
            m->m_data = m->pkt->nb_prot = m->pkt->nb_buff + MaxLnh;  /* new ptr */
 4024924:	29000315 	stw	r4,12(r5)
 4024928:	91000315 	stw	r4,12(r18)
            MEMMOVE(m->m_data, pip, TCPIPHDRSZ);  /* move back tcp/ip headers */
 402492c:	880b883a 	mov	r5,r17
 4024930:	01800a04 	movi	r6,40
 4024934:	40096e80 	call	40096e8 <memmove>
 4024938:	003fe706 	br	40248d8 <tcp_respond+0x26c>
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
      {
         panic("tcp_respond- packet ptr underflow\n");
 402493c:	010100f4 	movhi	r4,1027
 4024940:	21151d04 	addi	r4,r4,21620
 4024944:	4019c440 	call	4019c44 <panic>
 4024948:	003fbe06 	br	4024844 <tcp_respond+0x1d8>
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
 402494c:	9009883a 	mov	r4,r18
 4024950:	000b883a 	mov	r5,zero
 4024954:	003fe706 	br	40248f4 <tcp_respond+0x288>
      default:
         dtrap();
         break;
   }
   return;
}
 4024958:	dfc00917 	ldw	ra,36(sp)
 402495c:	df000817 	ldw	fp,32(sp)
 4024960:	ddc00717 	ldw	r23,28(sp)
 4024964:	dd800617 	ldw	r22,24(sp)
 4024968:	dd400517 	ldw	r21,20(sp)
 402496c:	dd000417 	ldw	r20,16(sp)
 4024970:	dcc00317 	ldw	r19,12(sp)
 4024974:	dc800217 	ldw	r18,8(sp)
 4024978:	dc400117 	ldw	r17,4(sp)
 402497c:	dc000017 	ldw	r16,0(sp)
 4024980:	dec00a04 	addi	sp,sp,40
 4024984:	f800283a 	ret
         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
              m_freem(m);
 4024988:	9009883a 	mov	r4,r18
      default:
         dtrap();
         break;
   }
   return;
}
 402498c:	dfc00917 	ldw	ra,36(sp)
 4024990:	df000817 	ldw	fp,32(sp)
 4024994:	ddc00717 	ldw	r23,28(sp)
 4024998:	dd800617 	ldw	r22,24(sp)
 402499c:	dd400517 	ldw	r21,20(sp)
 40249a0:	dd000417 	ldw	r20,16(sp)
 40249a4:	dcc00317 	ldw	r19,12(sp)
 40249a8:	dc800217 	ldw	r18,8(sp)
 40249ac:	dc400117 	ldw	r17,4(sp)
 40249b0:	dc000017 	ldw	r16,0(sp)
 40249b4:	dec00a04 	addi	sp,sp,40
         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
              m_freem(m);
 40249b8:	401d74c1 	jmpi	401d74c <m_freem>

040249bc <tcp_canceltimers>:
tcp_canceltimers(struct tcpcb * tp)
{
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
      tp->t_timer[i] = 0;
 40249bc:	20000615 	stw	zero,24(r4)
 40249c0:	20000315 	stw	zero,12(r4)
 40249c4:	20000415 	stw	zero,16(r4)
 40249c8:	20000515 	stw	zero,20(r4)
}
 40249cc:	f800283a 	ret

040249d0 <tcp_timers>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
 40249d0:	defffb04 	addi	sp,sp,-20
   int   rexmt;

   switch (timer) 
 40249d4:	01800044 	movi	r6,1
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
 40249d8:	dc000315 	stw	r16,12(sp)
 40249dc:	dfc00415 	stw	ra,16(sp)
 40249e0:	2021883a 	mov	r16,r4
   int   rexmt;

   switch (timer) 
 40249e4:	29804f26 	beq	r5,r6,4024b24 <tcp_timers+0x154>
 40249e8:	3140090e 	bge	r6,r5,4024a10 <tcp_timers+0x40>
 40249ec:	00800084 	movi	r2,2
 40249f0:	28806826 	beq	r5,r2,4024b94 <tcp_timers+0x1c4>
 40249f4:	008000c4 	movi	r2,3
 40249f8:	28805b26 	beq	r5,r2,4024b68 <tcp_timers+0x198>
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
      break;
   }
   return tp;
}
 40249fc:	8005883a 	mov	r2,r16
 4024a00:	dfc00417 	ldw	ra,16(sp)
 4024a04:	dc000317 	ldw	r16,12(sp)
 4024a08:	dec00504 	addi	sp,sp,20
 4024a0c:	f800283a 	ret
struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
   int   rexmt;

   switch (timer) 
 4024a10:	283ffa1e 	bne	r5,zero,40249fc <tcp_timers+0x2c>
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
 4024a14:	00810134 	movhi	r2,1028
 4024a18:	108cfd04 	addi	r2,r2,13300
 4024a1c:	10c00b17 	ldw	r3,44(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
 4024a20:	21400717 	ldw	r5,28(r4)
 4024a24:	02000304 	movi	r8,12
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
 4024a28:	18c00044 	addi	r3,r3,1
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
 4024a2c:	29c00044 	addi	r7,r5,1
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
 4024a30:	10c00b15 	stw	r3,44(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
 4024a34:	21c00715 	stw	r7,28(r4)
 4024a38:	41c07316 	blt	r8,r7,4024c08 <tcp_timers+0x238>
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
         break;
      }
      tcpstat.tcps_rexmttimeo++;
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 4024a3c:	22002017 	ldw	r8,128(r4)
 4024a40:	22402117 	ldw	r9,132(r4)
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024a44:	00810134 	movhi	r2,1028
 4024a48:	10a02bc4 	addi	r2,r2,-32593
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
         break;
      }
      tcpstat.tcps_rexmttimeo++;
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 4024a4c:	4007d0ba 	srai	r3,r8,2
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024a50:	3885883a 	add	r2,r7,r2
 4024a54:	11400003 	ldbu	r5,0(r2)
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
         break;
      }
      tcpstat.tcps_rexmttimeo++;
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 4024a58:	1a47883a 	add	r3,r3,r9
 4024a5c:	1807d07a 	srai	r3,r3,1
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
         break;
      }
      tcpstat.tcps_rexmttimeo++;
 4024a60:	01010134 	movhi	r4,1028
 4024a64:	210d2b04 	addi	r4,r4,13484
 4024a68:	20800a17 	ldw	r2,40(r4)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024a6c:	1947383a 	mul	r3,r3,r5
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
         break;
      }
      tcpstat.tcps_rexmttimeo++;
 4024a70:	10800044 	addi	r2,r2,1
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024a74:	18ffffcc 	andi	r3,r3,65535
 4024a78:	18e0001c 	xori	r3,r3,32768
 4024a7c:	18e00004 	addi	r3,r3,-32768
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
         break;
      }
      tcpstat.tcps_rexmttimeo++;
 4024a80:	20800a15 	stw	r2,40(r4)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024a84:	80c00815 	stw	r3,32(r16)
 4024a88:	30c0780e 	bge	r6,r3,4024c6c <tcp_timers+0x29c>
 4024a8c:	00802004 	movi	r2,128
 4024a90:	10c06816 	blt	r2,r3,4024c34 <tcp_timers+0x264>
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 4024a94:	80800817 	ldw	r2,32(r16)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 4024a98:	00c000c4 	movi	r3,3
      }
      tcpstat.tcps_rexmttimeo++;
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 4024a9c:	80800315 	stw	r2,12(r16)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 4024aa0:	19c0030e 	bge	r3,r7,4024ab0 <tcp_timers+0xe0>
 4024aa4:	80800b0b 	ldhu	r2,44(r16)
 4024aa8:	1080400c 	andi	r2,r2,256
 4024aac:	10006526 	beq	r2,zero,4024c44 <tcp_timers+0x274>
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
 4024ab0:	80800d17 	ldw	r2,52(r16)
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
         tp->t_srtt = 0;
      }
      tp->snd_nxt = tp->snd_una;
 4024ab4:	81000e17 	ldw	r4,56(r16)
      /*
       * If timing a segment in this window, stop the timer.
       */
      tp->t_rttick = 0;
 4024ab8:	80001e15 	stw	zero,120(r16)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
 4024abc:	10c00817 	ldw	r3,32(r2)
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
         tp->t_srtt = 0;
      }
      tp->snd_nxt = tp->snd_una;
 4024ac0:	81000f15 	stw	r4,60(r16)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
 4024ac4:	18800417 	ldw	r2,16(r3)
 4024ac8:	1090000c 	andi	r2,r2,16384
 4024acc:	10000e1e 	bne	r2,zero,4024b08 <tcp_timers+0x138>
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
         win = win / 2 / tp->t_maxseg;
 4024ad0:	80801b17 	ldw	r2,108(r16)
 4024ad4:	80c01417 	ldw	r3,80(r16)
 4024ad8:	81000a0b 	ldhu	r4,40(r16)
 4024adc:	10c05736 	bltu	r2,r3,4024c3c <tcp_timers+0x26c>
 4024ae0:	1806d07a 	srli	r3,r3,1
 4024ae4:	213fffcc 	andi	r4,r4,65535
         if (win < 2)
 4024ae8:	00800044 	movi	r2,1
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
         win = win / 2 / tp->t_maxseg;
 4024aec:	1907203a 	divu	r3,r3,r4
         if (win < 2)
 4024af0:	10c05c2e 	bgeu	r2,r3,4024c64 <tcp_timers+0x294>
 4024af4:	18ffffcc 	andi	r3,r3,65535
            win = 2;
         tp->snd_cwnd = tp->t_maxseg;
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
 4024af8:	80800a0b 	ldhu	r2,40(r16)
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
         win = win / 2 / tp->t_maxseg;
         if (win < 2)
            win = 2;
         tp->snd_cwnd = tp->t_maxseg;
 4024afc:	81001b15 	stw	r4,108(r16)
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
 4024b00:	10c5383a 	mul	r2,r2,r3
 4024b04:	80801c15 	stw	r2,112(r16)
      }
      (void) tcp_output(tp);
 4024b08:	8009883a 	mov	r4,r16
 4024b0c:	40239000 	call	4023900 <tcp_output>
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
      break;
   }
   return tp;
}
 4024b10:	8005883a 	mov	r2,r16
 4024b14:	dfc00417 	ldw	ra,16(sp)
 4024b18:	dc000317 	ldw	r16,12(sp)
 4024b1c:	dec00504 	addi	sp,sp,20
 4024b20:	f800283a 	ret
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
 4024b24:	00c10134 	movhi	r3,1028
 4024b28:	18cd2b04 	addi	r3,r3,13484
 4024b2c:	18800b17 	ldw	r2,44(r3)
      tcp_setpersist(tp);
 4024b30:	d9400215 	stw	r5,8(sp)
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
 4024b34:	1145883a 	add	r2,r2,r5
 4024b38:	18800b15 	stw	r2,44(r3)
      tcp_setpersist(tp);
 4024b3c:	402384c0 	call	402384c <tcp_setpersist>
      tp->t_force = 1;
 4024b40:	d9400217 	ldw	r5,8(sp)
      (void) tcp_output(tp);
 4024b44:	8009883a 	mov	r4,r16
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
      tcp_setpersist(tp);
      tp->t_force = 1;
 4024b48:	81400a85 	stb	r5,42(r16)
      (void) tcp_output(tp);
 4024b4c:	40239000 	call	4023900 <tcp_output>
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
      break;
   }
   return tp;
}
 4024b50:	8005883a 	mov	r2,r16
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
      tcp_setpersist(tp);
      tp->t_force = 1;
      (void) tcp_output(tp);
      tp->t_force = 0;
 4024b54:	80000a85 	stb	zero,42(r16)
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
      break;
   }
   return tp;
}
 4024b58:	dfc00417 	ldw	ra,16(sp)
 4024b5c:	dc000317 	ldw	r16,12(sp)
 4024b60:	dec00504 	addi	sp,sp,20
 4024b64:	f800283a 	ret
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
 4024b68:	20c00217 	ldw	r3,8(r4)
 4024b6c:	00800284 	movi	r2,10
 4024b70:	18800326 	beq	r3,r2,4024b80 <tcp_timers+0x1b0>
 4024b74:	20c01d17 	ldw	r3,116(r4)
 4024b78:	d0a84817 	ldw	r2,-24288(gp)
 4024b7c:	10c0360e 	bge	r2,r3,4024c58 <tcp_timers+0x288>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
      }
      else
         tp = tcp_close(tp);
 4024b80:	8009883a 	mov	r4,r16
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
      break;
   }
   return tp;
}
 4024b84:	dfc00417 	ldw	ra,16(sp)
 4024b88:	dc000317 	ldw	r16,12(sp)
 4024b8c:	dec00504 	addi	sp,sp,20
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
      }
      else
         tp = tcp_close(tp);
 4024b90:	40243f01 	jmpi	40243f0 <tcp_close>
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
 4024b94:	01c10134 	movhi	r7,1028
 4024b98:	39cd2b04 	addi	r7,r7,13484
 4024b9c:	38800c17 	ldw	r2,48(r7)
      if (tp->t_state < TCPS_ESTABLISHED)
 4024ba0:	21800217 	ldw	r6,8(r4)
 4024ba4:	00c000c4 	movi	r3,3
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
 4024ba8:	10800044 	addi	r2,r2,1
 4024bac:	38800c15 	stw	r2,48(r7)
      if (tp->t_state < TCPS_ESTABLISHED)
 4024bb0:	19800c0e 	bge	r3,r6,4024be4 <tcp_timers+0x214>
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 4024bb4:	20800d17 	ldw	r2,52(r4)
 4024bb8:	11400817 	ldw	r5,32(r2)
 4024bbc:	28c00417 	ldw	r3,16(r5)
 4024bc0:	18c0020c 	andi	r3,r3,8
 4024bc4:	18000d26 	beq	r3,zero,4024bfc <tcp_timers+0x22c>
 4024bc8:	00800144 	movi	r2,5
 4024bcc:	11800b16 	blt	r2,r6,4024bfc <tcp_timers+0x22c>
          tp->t_state <= TCPS_CLOSE_WAIT) 
      {
         if (tp->t_idle >= tcp_keepidle + tcp_maxidle)
 4024bd0:	d0e03f17 	ldw	r3,-32516(gp)
 4024bd4:	d1684817 	ldw	r5,-24288(gp)
 4024bd8:	20801d17 	ldw	r2,116(r4)
 4024bdc:	1947883a 	add	r3,r3,r5
 4024be0:	10c02516 	blt	r2,r3,4024c78 <tcp_timers+0x2a8>
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
      break;
      dropit:
      tcpstat.tcps_keepdrops++;
 4024be4:	38800e17 	ldw	r2,56(r7)
      tp = tcp_drop (tp, ETIMEDOUT);
 4024be8:	8009883a 	mov	r4,r16
 4024bec:	01401d04 	movi	r5,116
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
      break;
      dropit:
      tcpstat.tcps_keepdrops++;
 4024bf0:	10800044 	addi	r2,r2,1
 4024bf4:	38800e15 	stw	r2,56(r7)
 4024bf8:	00000a06 	br	4024c24 <tcp_timers+0x254>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
 4024bfc:	d0a03f0f 	ldh	r2,-32516(gp)
 4024c00:	80800515 	stw	r2,20(r16)
 4024c04:	003f7d06 	br	40249fc <tcp_timers+0x2c>
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
         tcpstat.tcps_timeoutdrop++;
 4024c08:	00c10134 	movhi	r3,1028
 4024c0c:	18cd2b04 	addi	r3,r3,13484
 4024c10:	18800917 	ldw	r2,36(r3)
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
 4024c14:	22000715 	stw	r8,28(r4)
         tcpstat.tcps_timeoutdrop++;
         tp = tcp_drop(tp, ETIMEDOUT);
 4024c18:	01401d04 	movi	r5,116
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
         tcpstat.tcps_timeoutdrop++;
 4024c1c:	10800044 	addi	r2,r2,1
 4024c20:	18800915 	stw	r2,36(r3)
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
      break;
   }
   return tp;
}
 4024c24:	dfc00417 	ldw	ra,16(sp)
 4024c28:	dc000317 	ldw	r16,12(sp)
 4024c2c:	dec00504 	addi	sp,sp,20
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
      break;
      dropit:
      tcpstat.tcps_keepdrops++;
      tp = tcp_drop (tp, ETIMEDOUT);
 4024c30:	40244a41 	jmpi	40244a4 <tcp_drop>
         break;
      }
      tcpstat.tcps_rexmttimeo++;
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024c34:	80800815 	stw	r2,32(r16)
 4024c38:	003f9606 	br	4024a94 <tcp_timers+0xc4>
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
         win = win / 2 / tp->t_maxseg;
 4024c3c:	1007883a 	mov	r3,r2
 4024c40:	003fa706 	br	4024ae0 <tcp_timers+0x110>
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
 4024c44:	4005d0ba 	srai	r2,r8,2
         tp->t_srtt = 0;
 4024c48:	80002015 	stw	zero,128(r16)
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
 4024c4c:	4885883a 	add	r2,r9,r2
 4024c50:	80802115 	stw	r2,132(r16)
 4024c54:	003f9606 	br	4024ab0 <tcp_timers+0xe0>
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
 4024c58:	d0a0400f 	ldh	r2,-32512(gp)
 4024c5c:	20800615 	stw	r2,24(r4)
 4024c60:	003f6606 	br	40249fc <tcp_timers+0x2c>
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
         win = win / 2 / tp->t_maxseg;
         if (win < 2)
 4024c64:	00c00084 	movi	r3,2
 4024c68:	003fa306 	br	4024af8 <tcp_timers+0x128>
         break;
      }
      tcpstat.tcps_rexmttimeo++;
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
      rexmt *= tcp_backoff[tp->t_rxtshift];
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4024c6c:	00800084 	movi	r2,2
 4024c70:	80800815 	stw	r2,32(r16)
 4024c74:	003f8706 	br	4024a94 <tcp_timers+0xc4>
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
 4024c78:	38800d17 	ldw	r2,52(r7)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 4024c7c:	21400c17 	ldw	r5,48(r4)
 4024c80:	d8000015 	stw	zero,0(sp)
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
 4024c84:	10800044 	addi	r2,r2,1
 4024c88:	38800d15 	stw	r2,52(r7)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 4024c8c:	21801617 	ldw	r6,88(r4)
 4024c90:	21c00e17 	ldw	r7,56(r4)
 4024c94:	d8000115 	stw	zero,4(sp)
 4024c98:	31bfffc4 	addi	r6,r6,-1
 4024c9c:	39ffffc4 	addi	r7,r7,-1
 4024ca0:	402466c0 	call	402466c <tcp_respond>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
 4024ca4:	d0a0400f 	ldh	r2,-32512(gp)
 4024ca8:	80800515 	stw	r2,20(r16)
 4024cac:	003f5306 	br	40249fc <tcp_timers+0x2c>

04024cb0 <tcp_slowtimo>:
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
 4024cb0:	d0a04017 	ldw	r2,-32512(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 4024cb4:	00c10134 	movhi	r3,1028
 4024cb8:	18ccf804 	addi	r3,r3,13280
 4024cbc:	19000017 	ldw	r4,0(r3)
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
 4024cc0:	100490fa 	slli	r2,r2,3
 * RETURNS: 
 */

void
tcp_slowtimo(void)
{
 4024cc4:	defff604 	addi	sp,sp,-40
 4024cc8:	dfc00915 	stw	ra,36(sp)
 4024ccc:	df000815 	stw	fp,32(sp)
 4024cd0:	ddc00715 	stw	r23,28(sp)
 4024cd4:	dd800615 	stw	r22,24(sp)
 4024cd8:	dd400515 	stw	r21,20(sp)
 4024cdc:	dd000415 	stw	r20,16(sp)
 4024ce0:	dcc00315 	stw	r19,12(sp)
 4024ce4:	dc800215 	stw	r18,8(sp)
 4024ce8:	dc400115 	stw	r17,4(sp)
 4024cec:	dc000015 	stw	r16,0(sp)
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
 4024cf0:	d0a84815 	stw	r2,-24288(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 4024cf4:	20004a26 	beq	r4,zero,4024e20 <tcp_slowtimo+0x170>
 4024cf8:	2023883a 	mov	r17,r4
 4024cfc:	00000c06 	br	4024d30 <tcp_slowtimo+0x80>

         tp->t_idle++;
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
 4024d00:	8c000a04 	addi	r16,r17,40
      if (sb->sb_flags & SB_SEL) 
 4024d04:	8080070b 	ldhu	r2,28(r16)
 4024d08:	1080020c 	andi	r2,r2,8
 4024d0c:	10002f1e 	bne	r2,zero,4024dcc <tcp_slowtimo+0x11c>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
      }
      sb = &so->so_snd;
 4024d10:	8c001204 	addi	r16,r17,72
      if (sb->sb_flags & SB_SEL) 
 4024d14:	8080070b 	ldhu	r2,28(r16)
 4024d18:	1080020c 	andi	r2,r2,8
 4024d1c:	1000371e 	bne	r2,zero,4024dfc <tcp_slowtimo+0x14c>
#endif
         sb->sb_flags &= ~SB_SEL;
      }

      /* wake any thread with a timer going for a connection state change */     
      tcp_wakeup((char*)&so->so_timeo);
 4024d20:	89000904 	addi	r4,r17,36
 4024d24:	401a4380 	call	401a438 <tcp_wakeup>
 4024d28:	a823883a 	mov	r17,r21
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 4024d2c:	a8003c26 	beq	r21,zero,4024e20 <tcp_slowtimo+0x170>

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
 4024d30:	88c00987 	ldb	r3,38(r17)
 4024d34:	00800044 	movi	r2,1
   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
   {
      sonext = so->next;
 4024d38:	8d400017 	ldw	r21,0(r17)

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
 4024d3c:	18bff01e 	bne	r3,r2,4024d00 <tcp_slowtimo+0x50>
      {
         ip = so->so_pcb;
 4024d40:	8cc00117 	ldw	r19,4(r17)
         if (!ip)
 4024d44:	983ff826 	beq	r19,zero,4024d28 <tcp_slowtimo+0x78>
            continue;
         ipnxt = ip->inp_next;

         tp = intotcpcb(so->so_pcb);
 4024d48:	9d000917 	ldw	r20,36(r19)
      if (so->so_type == SOCK_STREAM)
      {
         ip = so->so_pcb;
         if (!ip)
            continue;
         ipnxt = ip->inp_next;
 4024d4c:	9dc00017 	ldw	r23,0(r19)

         tp = intotcpcb(so->so_pcb);
         if (!tp)
 4024d50:	a03ff526 	beq	r20,zero,4024d28 <tcp_slowtimo+0x78>
            continue;
 4024d54:	a021883a 	mov	r16,r20
 4024d58:	0025883a 	mov	r18,zero
 4024d5c:	070004c4 	movi	fp,19
 4024d60:	05800104 	movi	r22,4
 4024d64:	00000306 	br	4024d74 <tcp_slowtimo+0xc4>

         for (i = 0; i < TCPT_NTIMERS; i++) 
 4024d68:	94800044 	addi	r18,r18,1
 4024d6c:	84000104 	addi	r16,r16,4
 4024d70:	95800f26 	beq	r18,r22,4024db0 <tcp_slowtimo+0x100>
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
 4024d74:	80800317 	ldw	r2,12(r16)
 4024d78:	10ffffc4 	addi	r3,r2,-1
 4024d7c:	103ffa26 	beq	r2,zero,4024d68 <tcp_slowtimo+0xb8>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
               (void) tcp_usrreq(so, (struct mbuf *)0, 
 4024d80:	900d883a 	mov	r6,r18
 4024d84:	8809883a 	mov	r4,r17
 4024d88:	000b883a 	mov	r5,zero
         if (!tp)
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
 4024d8c:	80c00315 	stw	r3,12(r16)
 4024d90:	183ff51e 	bne	r3,zero,4024d68 <tcp_slowtimo+0xb8>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
 4024d94:	8f000715 	stw	fp,28(r17)
               (void) tcp_usrreq(so, (struct mbuf *)0, 
 4024d98:	40250dc0 	call	40250dc <tcp_usrreq>
                                 LONG2MBUF((long)i));

               /* If ip disappeared on us, handle it */
               if (ipnxt->inp_prev != ip)
 4024d9c:	b8c00117 	ldw	r3,4(r23)
 4024da0:	98ffe11e 	bne	r19,r3,4024d28 <tcp_slowtimo+0x78>

         tp = intotcpcb(so->so_pcb);
         if (!tp)
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
 4024da4:	94800044 	addi	r18,r18,1
 4024da8:	84000104 	addi	r16,r16,4
 4024dac:	95bff11e 	bne	r18,r22,4024d74 <tcp_slowtimo+0xc4>
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
 4024db0:	a0801d17 	ldw	r2,116(r20)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
 4024db4:	8c000a04 	addi	r16,r17,40
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
 4024db8:	10800044 	addi	r2,r2,1
 4024dbc:	a0801d15 	stw	r2,116(r20)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
      if (sb->sb_flags & SB_SEL) 
 4024dc0:	8080070b 	ldhu	r2,28(r16)
 4024dc4:	1080020c 	andi	r2,r2,8
 4024dc8:	103fd126 	beq	r2,zero,4024d10 <tcp_slowtimo+0x60>
      {
         select_wait = 0;
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 4024dcc:	01010134 	movhi	r4,1028
 4024dd0:	21293b04 	addi	r4,r4,-23316

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
      if (sb->sb_flags & SB_SEL) 
      {
         select_wait = 0;
 4024dd4:	2000000d 	sth	zero,0(r4)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 4024dd8:	401a4380 	call	401a438 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 4024ddc:	8080070b 	ldhu	r2,28(r16)
 4024de0:	00fffdc4 	movi	r3,-9
 4024de4:	10c4703a 	and	r2,r2,r3
 4024de8:	8080070d 	sth	r2,28(r16)
      }
      sb = &so->so_snd;
 4024dec:	8c001204 	addi	r16,r17,72
      if (sb->sb_flags & SB_SEL) 
 4024df0:	8080070b 	ldhu	r2,28(r16)
 4024df4:	1080020c 	andi	r2,r2,8
 4024df8:	103fc926 	beq	r2,zero,4024d20 <tcp_slowtimo+0x70>
      {
         select_wait = 0;         
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 4024dfc:	01010134 	movhi	r4,1028
 4024e00:	21293b04 	addi	r4,r4,-23316
         sb->sb_flags &= ~SB_SEL;
      }
      sb = &so->so_snd;
      if (sb->sb_flags & SB_SEL) 
      {
         select_wait = 0;         
 4024e04:	2000000d 	sth	zero,0(r4)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 4024e08:	401a4380 	call	401a438 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 4024e0c:	8080070b 	ldhu	r2,28(r16)
 4024e10:	00fffdc4 	movi	r3,-9
 4024e14:	10c4703a 	and	r2,r2,r3
 4024e18:	8080070d 	sth	r2,28(r16)
 4024e1c:	003fc006 	br	4024d20 <tcp_slowtimo+0x70>

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
 4024e20:	d0a84917 	ldw	r2,-24284(gp)
 4024e24:	00fe9fd4 	movui	r3,64127
 4024e28:	10c5883a 	add	r2,r2,r3

   if (tcp_iss & 0xff000000)
 4024e2c:	113fc02c 	andhi	r4,r2,65280

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
 4024e30:	d0a84915 	stw	r2,-24284(gp)

   if (tcp_iss & 0xff000000)
 4024e34:	20000126 	beq	r4,zero,4024e3c <tcp_slowtimo+0x18c>
      tcp_iss = 0L;
 4024e38:	d0284915 	stw	zero,-24284(gp)
}
 4024e3c:	dfc00917 	ldw	ra,36(sp)
 4024e40:	df000817 	ldw	fp,32(sp)
 4024e44:	ddc00717 	ldw	r23,28(sp)
 4024e48:	dd800617 	ldw	r22,24(sp)
 4024e4c:	dd400517 	ldw	r21,20(sp)
 4024e50:	dd000417 	ldw	r20,16(sp)
 4024e54:	dcc00317 	ldw	r19,12(sp)
 4024e58:	dc800217 	ldw	r18,8(sp)
 4024e5c:	dc400117 	ldw	r17,4(sp)
 4024e60:	dc000017 	ldw	r16,0(sp)
 4024e64:	dec00a04 	addi	sp,sp,40
 4024e68:	f800283a 	ret

04024e6c <tcp_usrclosed>:

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{

   switch (tp->t_state) 
 4024e6c:	20c00217 	ldw	r3,8(r4)
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
 4024e70:	defffe04 	addi	sp,sp,-8

   switch (tp->t_state) 
 4024e74:	00800144 	movi	r2,5
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
 4024e78:	dc000015 	stw	r16,0(sp)
 4024e7c:	dfc00115 	stw	ra,4(sp)
 4024e80:	2021883a 	mov	r16,r4

   switch (tp->t_state) 
 4024e84:	10c01136 	bltu	r2,r3,4024ecc <tcp_usrclosed+0x60>
 4024e88:	18c5883a 	add	r2,r3,r3
 4024e8c:	1085883a 	add	r2,r2,r2
 4024e90:	00c100b4 	movhi	r3,1026
 4024e94:	18d3a904 	addi	r3,r3,20132
 4024e98:	10c5883a 	add	r2,r2,r3
 4024e9c:	11000017 	ldw	r4,0(r2)
 4024ea0:	2000683a 	jmp	r4
 4024ea4:	04024ebc 	xorhi	r16,zero,2362
 4024ea8:	04024ebc 	xorhi	r16,zero,2362
 4024eac:	04024ebc 	xorhi	r16,zero,2362
 4024eb0:	04024f1c 	xori	r16,zero,2364
 4024eb4:	04024f1c 	xori	r16,zero,2364
 4024eb8:	04024f10 	cmplti	r16,zero,2364
   {
   case TCPS_CLOSED:
   case TCPS_LISTEN:
   case TCPS_SYN_SENT:
      tp->t_state = TCPS_CLOSED;
 4024ebc:	80000215 	stw	zero,8(r16)
      tp = tcp_close(tp);
 4024ec0:	8009883a 	mov	r4,r16
 4024ec4:	40243f00 	call	40243f0 <tcp_close>
 4024ec8:	1021883a 	mov	r16,r2

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
      break;
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
 4024ecc:	80000326 	beq	r16,zero,4024edc <tcp_usrclosed+0x70>
 4024ed0:	80c00217 	ldw	r3,8(r16)
 4024ed4:	00800204 	movi	r2,8
 4024ed8:	10c00516 	blt	r2,r3,4024ef0 <tcp_usrclosed+0x84>
      soisdisconnected(tp->t_inpcb->inp_socket);
   return (tp);
}
 4024edc:	8005883a 	mov	r2,r16
 4024ee0:	dfc00117 	ldw	ra,4(sp)
 4024ee4:	dc000017 	ldw	r16,0(sp)
 4024ee8:	dec00204 	addi	sp,sp,8
 4024eec:	f800283a 	ret
   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
      break;
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
      soisdisconnected(tp->t_inpcb->inp_socket);
 4024ef0:	80800d17 	ldw	r2,52(r16)
 4024ef4:	11000817 	ldw	r4,32(r2)
 4024ef8:	40212680 	call	4021268 <soisdisconnected>
   return (tp);
}
 4024efc:	8005883a 	mov	r2,r16
 4024f00:	dfc00117 	ldw	ra,4(sp)
 4024f04:	dc000017 	ldw	r16,0(sp)
 4024f08:	dec00204 	addi	sp,sp,8
 4024f0c:	f800283a 	ret
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
      break;

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
 4024f10:	00800204 	movi	r2,8
 4024f14:	80800215 	stw	r2,8(r16)
 4024f18:	003fed06 	br	4024ed0 <tcp_usrclosed+0x64>
      tp = tcp_close(tp);
      break;

   case TCPS_SYN_RECEIVED:
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
 4024f1c:	00800184 	movi	r2,6
 4024f20:	80800215 	stw	r2,8(r16)
 4024f24:	003fea06 	br	4024ed0 <tcp_usrclosed+0x64>

04024f28 <tcp_disconnect>:
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4024f28:	20800d17 	ldw	r2,52(r4)

   if (tp->t_state < TCPS_ESTABLISHED)
 4024f2c:	21400217 	ldw	r5,8(r4)
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
 4024f30:	defffd04 	addi	sp,sp,-12
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (tp->t_state < TCPS_ESTABLISHED)
 4024f34:	00c000c4 	movi	r3,3
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
 4024f38:	dc400115 	stw	r17,4(sp)
 4024f3c:	dc000015 	stw	r16,0(sp)
 4024f40:	dfc00215 	stw	ra,8(sp)
 4024f44:	2023883a 	mov	r17,r4
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4024f48:	14000817 	ldw	r16,32(r2)

   if (tp->t_state < TCPS_ESTABLISHED)
 4024f4c:	19401b0e 	bge	r3,r5,4024fbc <tcp_disconnect+0x94>
      tp = tcp_close(tp);
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 4024f50:	80800417 	ldw	r2,16(r16)
 4024f54:	1080200c 	andi	r2,r2,128
 4024f58:	10000326 	beq	r2,zero,4024f68 <tcp_disconnect+0x40>
 4024f5c:	8080080f 	ldh	r2,32(r16)
      tp = tcp_drop(tp, 0);
 4024f60:	000b883a 	mov	r5,zero
{
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (tp->t_state < TCPS_ESTABLISHED)
      tp = tcp_close(tp);
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 4024f64:	10001026 	beq	r2,zero,4024fa8 <tcp_disconnect+0x80>
      tp = tcp_drop(tp, 0);
   else 
   {
      soisdisconnecting(so);
 4024f68:	8009883a 	mov	r4,r16
 4024f6c:	40212cc0 	call	40212cc <soisdisconnecting>
      sbflush(&so->so_rcv);
 4024f70:	81000a04 	addi	r4,r16,40
 4024f74:	4020d000 	call	4020d00 <sbflush>
      tp = tcp_usrclosed(tp);
 4024f78:	8809883a 	mov	r4,r17
 4024f7c:	4024e6c0 	call	4024e6c <tcp_usrclosed>
 4024f80:	1021883a 	mov	r16,r2
      if (tp)
         (void) tcp_output(tp);
 4024f84:	1009883a 	mov	r4,r2
   else 
   {
      soisdisconnecting(so);
      sbflush(&so->so_rcv);
      tp = tcp_usrclosed(tp);
      if (tp)
 4024f88:	10000126 	beq	r2,zero,4024f90 <tcp_disconnect+0x68>
         (void) tcp_output(tp);
 4024f8c:	40239000 	call	4023900 <tcp_output>
   }
   return (tp);
}
 4024f90:	8005883a 	mov	r2,r16
 4024f94:	dfc00217 	ldw	ra,8(sp)
 4024f98:	dc400117 	ldw	r17,4(sp)
 4024f9c:	dc000017 	ldw	r16,0(sp)
 4024fa0:	dec00304 	addi	sp,sp,12
 4024fa4:	f800283a 	ret
 4024fa8:	dfc00217 	ldw	ra,8(sp)
 4024fac:	dc400117 	ldw	r17,4(sp)
 4024fb0:	dc000017 	ldw	r16,0(sp)
 4024fb4:	dec00304 	addi	sp,sp,12
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (tp->t_state < TCPS_ESTABLISHED)
      tp = tcp_close(tp);
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
      tp = tcp_drop(tp, 0);
 4024fb8:	40244a41 	jmpi	40244a4 <tcp_drop>
      tp = tcp_usrclosed(tp);
      if (tp)
         (void) tcp_output(tp);
   }
   return (tp);
}
 4024fbc:	dfc00217 	ldw	ra,8(sp)
 4024fc0:	dc400117 	ldw	r17,4(sp)
 4024fc4:	dc000017 	ldw	r16,0(sp)
 4024fc8:	dec00304 	addi	sp,sp,12
tcp_disconnect(struct tcpcb * tp)
{
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (tp->t_state < TCPS_ESTABLISHED)
      tp = tcp_close(tp);
 4024fcc:	40243f01 	jmpi	40243f0 <tcp_close>

04024fd0 <tcp_attach>:
{
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
 4024fd0:	20801317 	ldw	r2,76(r4)
 * RETURNS: 0 if OK, or nonzero error code.
 */

int
tcp_attach(struct socket * so)
{
 4024fd4:	defffb04 	addi	sp,sp,-20
 4024fd8:	dc800215 	stw	r18,8(sp)
 4024fdc:	dfc00415 	stw	ra,16(sp)
 4024fe0:	dcc00315 	stw	r19,12(sp)
 4024fe4:	dc400115 	stw	r17,4(sp)
 4024fe8:	dc000015 	stw	r16,0(sp)
 4024fec:	2025883a 	mov	r18,r4
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
 4024ff0:	10001026 	beq	r2,zero,4025034 <tcp_attach+0x64>
 4024ff4:	20800b17 	ldw	r2,44(r4)
 4024ff8:	10000e26 	beq	r2,zero,4025034 <tcp_attach+0x64>
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
      if (error)
         return (error);
   }
   error = in_pcballoc(so, &tcb);
 4024ffc:	01410134 	movhi	r5,1028
 4025000:	294d2004 	addi	r5,r5,13440
 4025004:	9009883a 	mov	r4,r18
 4025008:	402e5280 	call	402e528 <in_pcballoc>
 402500c:	1027883a 	mov	r19,r2
   if (error)
 4025010:	10001326 	beq	r2,zero,4025060 <tcp_attach+0x90>
      so->so_state |= nofd;
      return (ENOBUFS);
   }
   tp->t_state = TCPS_CLOSED;
   return (0);
}
 4025014:	9805883a 	mov	r2,r19
 4025018:	dfc00417 	ldw	ra,16(sp)
 402501c:	dcc00317 	ldw	r19,12(sp)
 4025020:	dc800217 	ldw	r18,8(sp)
 4025024:	dc400117 	ldw	r17,4(sp)
 4025028:	dc000017 	ldw	r16,0(sp)
 402502c:	dec00504 	addi	sp,sp,20
 4025030:	f800283a 	ret
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
 4025034:	d1a04217 	ldw	r6,-32504(gp)
 4025038:	d1604117 	ldw	r5,-32508(gp)
 402503c:	4020d900 	call	4020d90 <soreserve>
 4025040:	1027883a 	mov	r19,r2
      if (error)
 4025044:	103ff31e 	bne	r2,zero,4025014 <tcp_attach+0x44>
         return (error);
   }
   error = in_pcballoc(so, &tcb);
 4025048:	01410134 	movhi	r5,1028
 402504c:	294d2004 	addi	r5,r5,13440
 4025050:	9009883a 	mov	r4,r18
 4025054:	402e5280 	call	402e528 <in_pcballoc>
 4025058:	1027883a 	mov	r19,r2
   if (error)
 402505c:	103fed1e 	bne	r2,zero,4025014 <tcp_attach+0x44>
      return (error);
   inp = sotoinpcb(so);
 4025060:	94400117 	ldw	r17,4(r18)
   tp = tcp_newtcpcb(inp);
 4025064:	8809883a 	mov	r4,r17
 4025068:	40245440 	call	4024544 <tcp_newtcpcb>
   if (tp == 0) 
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
      in_pcbdetach(inp);
 402506c:	8809883a 	mov	r4,r17
   error = in_pcballoc(so, &tcb);
   if (error)
      return (error);
   inp = sotoinpcb(so);
   tp = tcp_newtcpcb(inp);
   if (tp == 0) 
 4025070:	1000111e 	bne	r2,zero,40250b8 <tcp_attach+0xe8>
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */
 4025074:	9400088b 	ldhu	r16,34(r18)

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
      in_pcbdetach(inp);
      so->so_state |= nofd;
 4025078:	04c01a44 	movi	r19,105
   tp = tcp_newtcpcb(inp);
   if (tp == 0) 
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
 402507c:	80bfff8c 	andi	r2,r16,65534
 4025080:	9080088d 	sth	r2,34(r18)
      in_pcbdetach(inp);
 4025084:	402e4cc0 	call	402e4cc <in_pcbdetach>
      so->so_state |= nofd;
 4025088:	9080088b 	ldhu	r2,34(r18)
 402508c:	8400004c 	andi	r16,r16,1
 4025090:	80a0b03a 	or	r16,r16,r2
      return (ENOBUFS);
   }
   tp->t_state = TCPS_CLOSED;
   return (0);
}
 4025094:	9805883a 	mov	r2,r19
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
      in_pcbdetach(inp);
      so->so_state |= nofd;
 4025098:	9400088d 	sth	r16,34(r18)
      return (ENOBUFS);
   }
   tp->t_state = TCPS_CLOSED;
   return (0);
}
 402509c:	dfc00417 	ldw	ra,16(sp)
 40250a0:	dcc00317 	ldw	r19,12(sp)
 40250a4:	dc800217 	ldw	r18,8(sp)
 40250a8:	dc400117 	ldw	r17,4(sp)
 40250ac:	dc000017 	ldw	r16,0(sp)
 40250b0:	dec00504 	addi	sp,sp,20
 40250b4:	f800283a 	ret
      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
      in_pcbdetach(inp);
      so->so_state |= nofd;
      return (ENOBUFS);
   }
   tp->t_state = TCPS_CLOSED;
 40250b8:	10000215 	stw	zero,8(r2)
   return (0);
}
 40250bc:	9805883a 	mov	r2,r19
 40250c0:	dfc00417 	ldw	ra,16(sp)
 40250c4:	dcc00317 	ldw	r19,12(sp)
 40250c8:	dc800217 	ldw	r18,8(sp)
 40250cc:	dc400117 	ldw	r17,4(sp)
 40250d0:	dc000017 	ldw	r16,0(sp)
 40250d4:	dec00504 	addi	sp,sp,20
 40250d8:	f800283a 	ret

040250dc <tcp_usrreq>:

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 40250dc:	defff904 	addi	sp,sp,-28
 40250e0:	dc400215 	stw	r17,8(sp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
   inp = sotoinpcb(so);
 40250e4:	24400117 	ldw	r17,4(r4)

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 40250e8:	dcc00415 	stw	r19,16(sp)
 40250ec:	dc000115 	stw	r16,4(sp)
 40250f0:	dfc00615 	stw	ra,24(sp)
 40250f4:	dd000515 	stw	r20,20(sp)
 40250f8:	dc800315 	stw	r18,12(sp)
 40250fc:	2021883a 	mov	r16,r4
 4025100:	2827883a 	mov	r19,r5

#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
 4025104:	20c00717 	ldw	r3,28(r4)
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
 4025108:	88002b26 	beq	r17,zero,40251b8 <tcp_usrreq+0xdc>
         dtrap(); /* programming error? */
         return EINVAL;
      }
   }

   switch (req) 
 402510c:	008004c4 	movi	r2,19
   {
      return (EINVAL);
   }

   if (inp)
      tp = intotcpcb(inp);
 4025110:	8d000917 	ldw	r20,36(r17)
         dtrap(); /* programming error? */
         return EINVAL;
      }
   }

   switch (req) 
 4025114:	10c00d2e 	bgeu	r2,r3,402514c <tcp_usrreq+0x70>
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;

      default:
      panic("tcp_usrreq");
 4025118:	010100f4 	movhi	r4,1027
 402511c:	21152e04 	addi	r4,r4,21688
 4025120:	4019c440 	call	4019c44 <panic>
 4025124:	0025883a 	mov	r18,zero
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
}
 4025128:	9005883a 	mov	r2,r18
 402512c:	dfc00617 	ldw	ra,24(sp)
 4025130:	dd000517 	ldw	r20,20(sp)
 4025134:	dcc00417 	ldw	r19,16(sp)
 4025138:	dc800317 	ldw	r18,12(sp)
 402513c:	dc400217 	ldw	r17,8(sp)
 4025140:	dc000117 	ldw	r16,4(sp)
 4025144:	dec00704 	addi	sp,sp,28
 4025148:	f800283a 	ret
         dtrap(); /* programming error? */
         return EINVAL;
      }
   }

   switch (req) 
 402514c:	18c5883a 	add	r2,r3,r3
 4025150:	1085883a 	add	r2,r2,r2
 4025154:	00c100b4 	movhi	r3,1026
 4025158:	18d45a04 	addi	r3,r3,20840
 402515c:	10c5883a 	add	r2,r2,r3
 4025160:	11000017 	ldw	r4,0(r2)
 4025164:	2000683a 	jmp	r4
 4025168:	04025420 	cmpeqi	r16,zero,2384
 402516c:	04025404 	movi	r16,2384
 4025170:	04025298 	cmpnei	r16,zero,2378
 4025174:	04025280 	call	402528 <OSCtxSw_SWITCH_PC+0x4024e8>
 4025178:	04025328 	cmpgeui	r16,zero,2380
 402517c:	04025238 	rdprs	r16,zero,2376
 4025180:	040251f0 	cmpltui	r16,zero,2375
 4025184:	04025200 	call	402520 <OSCtxSw_SWITCH_PC+0x4024e0>
 4025188:	04025318 	cmpnei	r16,zero,2380
 402518c:	040252e8 	cmpgeui	r16,zero,2379
 4025190:	040253f0 	cmpltui	r16,zero,2383
 4025194:	04025118 	cmpnei	r16,zero,2372
 4025198:	04025380 	call	402538 <OSCtxSw_SWITCH_PC+0x4024f8>
 402519c:	0402538c 	andi	r16,zero,2382
 40251a0:	040252b4 	movhi	r16,2378
 40251a4:	0402543c 	xorhi	r16,zero,2384
 40251a8:	04025428 	cmpgeui	r16,zero,2384
 40251ac:	04025450 	cmplti	r16,zero,2385
 40251b0:	04025118 	cmpnei	r16,zero,2372
 40251b4:	040252d4 	movui	r16,2379
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
 40251b8:	18000226 	beq	r3,zero,40251c4 <tcp_usrreq+0xe8>
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;

      default:
      panic("tcp_usrreq");
 40251bc:	04800584 	movi	r18,22
 40251c0:	003fd906 	br	4025128 <tcp_usrreq+0x4c>
      if (inp) 
      {
         error = EISCONN;
         break;
      }
      error = tcp_attach(so);
 40251c4:	4024fd00 	call	4024fd0 <tcp_attach>
 40251c8:	1025883a 	mov	r18,r2
      if (error)
 40251cc:	103fd61e 	bne	r2,zero,4025128 <tcp_usrreq+0x4c>
         break;
      if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 40251d0:	80800417 	ldw	r2,16(r16)
 40251d4:	1080200c 	andi	r2,r2,128
 40251d8:	103fd326 	beq	r2,zero,4025128 <tcp_usrreq+0x4c>
 40251dc:	8080080f 	ldh	r2,32(r16)
 40251e0:	103fd11e 	bne	r2,zero,4025128 <tcp_usrreq+0x4c>
         so->so_linger = TCP_LINGERTIME;
 40251e4:	00801e04 	movi	r2,120
 40251e8:	8080080d 	sth	r2,32(r16)
 40251ec:	003fce06 	br	4025128 <tcp_usrreq+0x4c>
    * when peer sends FIN and acks ours.
    *
    * SHOULD IMPLEMENT LATER PRU_CONNECT VIA REALLOC TCPCB.
    */
   case PRU_DISCONNECT:
      SETTP(tp, tcp_disconnect(tp));
 40251f0:	a009883a 	mov	r4,r20
 40251f4:	4024f280 	call	4024f28 <tcp_disconnect>
 40251f8:	0025883a 	mov	r18,zero
 40251fc:	003fca06 	br	4025128 <tcp_usrreq+0x4c>

   /*
    * Mark the connection as being incapable of further output.
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
 4025200:	8009883a 	mov	r4,r16
 4025204:	40212540 	call	4021254 <socantsendmore>
      tp = tcp_usrclosed(tp);
 4025208:	a009883a 	mov	r4,r20
 402520c:	4024e6c0 	call	4024e6c <tcp_usrclosed>
      if (tp)
 4025210:	10009126 	beq	r2,zero,4025458 <tcp_usrreq+0x37c>
         error = tcp_output(tp);
 4025214:	1009883a 	mov	r4,r2
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
}
 4025218:	dfc00617 	ldw	ra,24(sp)
 402521c:	dd000517 	ldw	r20,20(sp)
 4025220:	dcc00417 	ldw	r19,16(sp)
 4025224:	dc800317 	ldw	r18,12(sp)
 4025228:	dc400217 	ldw	r17,8(sp)
 402522c:	dc000117 	ldw	r16,4(sp)
 4025230:	dec00704 	addi	sp,sp,28
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
      tp = tcp_usrclosed(tp);
      if (tp)
         error = tcp_output(tp);
 4025234:	40239001 	jmpi	4023900 <tcp_output>
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
 4025238:	81400517 	ldw	r5,20(r16)
 402523c:	00800084 	movi	r2,2
    * done at higher levels; just return the address
    * of the peer, storing through addr.
    */
   case PRU_ACCEPT: 
   {
         struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 4025240:	31c00317 	ldw	r7,12(r6)
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
 4025244:	28808c26 	beq	r5,r2,4025478 <tcp_usrreq+0x39c>
            sin->sin_family = AF_INET;
            sin->sin_port = inp->inp_fport;
            sin->sin_addr = inp->inp_faddr;
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
 4025248:	28ffff84 	addi	r3,r5,-2
 402524c:	00800044 	movi	r2,1
 4025250:	10c0042e 	bgeu	r2,r3,4025264 <tcp_usrreq+0x188>
              !(so->so_domain == AF_INET6)
             )
         {
            dprintf("*** PRU_ACCEPT bad domain = %d\n", so->so_domain);
 4025254:	010100f4 	movhi	r4,1027
 4025258:	21152604 	addi	r4,r4,21656
 402525c:	4002ed40 	call	4002ed4 <printf>
            dtrap();
 4025260:	401c81c0 	call	401c81c <dtrap>
         } 
         TCP_MIB_INC(tcpPassiveOpens);    /* keep MIB stats */
 4025264:	00c10134 	movhi	r3,1028
 4025268:	18ccfd04 	addi	r3,r3,13300
 402526c:	18800517 	ldw	r2,20(r3)
 4025270:	0025883a 	mov	r18,zero
 4025274:	10800044 	addi	r2,r2,1
 4025278:	18800515 	stw	r2,20(r3)
 402527c:	003faa06 	br	4025128 <tcp_usrreq+0x4c>
      break;
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
 4025280:	8880078b 	ldhu	r2,30(r17)
 4025284:	10007626 	beq	r2,zero,4025460 <tcp_usrreq+0x384>
         error = in_pcbbind(inp, (struct mbuf *)0);
      if (error == 0)
         tp->t_state = TCPS_LISTEN;
 4025288:	00800044 	movi	r2,1
 402528c:	0025883a 	mov	r18,zero
 4025290:	a0800215 	stw	r2,8(r20)
 4025294:	003fa406 	br	4025128 <tcp_usrreq+0x4c>
      /* bind is quite different for IPv4 and v6, so we use two 
       * seperate pcbbind routines. so_domain was checked for 
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
 4025298:	88800817 	ldw	r2,32(r17)
 402529c:	00c00084 	movi	r3,2
 40252a0:	11000517 	ldw	r4,20(r2)
 40252a4:	20c0b526 	beq	r4,r3,402557c <tcp_usrreq+0x4a0>
      {
         error = ip6_pcbbind(inp, nam);
         break;
      }
#endif /* IP_V6 */
      dtrap();    /* not v4 or v6? */
 40252a8:	401c81c0 	call	401c81c <dtrap>
 40252ac:	04800584 	movi	r18,22
 40252b0:	003f9d06 	br	4025128 <tcp_usrreq+0x4c>
      if (so->so_pcb == NULL)
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
         break;
      }
      if (sbspace(&so->so_snd) == 0) 
 40252b4:	81001317 	ldw	r4,76(r16)
 40252b8:	80c01217 	ldw	r3,72(r16)
 40252bc:	20c5c83a 	sub	r2,r4,r3
 40252c0:	1000760e 	bge	r2,zero,402549c <tcp_usrreq+0x3c0>
      {
         m_freem(m);
 40252c4:	9809883a 	mov	r4,r19
 40252c8:	401d74c0 	call	401d74c <m_freem>
 40252cc:	04801a44 	movi	r18,105
 40252d0:	003f9506 	br	4025128 <tcp_usrreq+0x4c>
         ip6_setpeeraddr(inp, nam);
#endif
      break;

   case PRU_SLOWTIMO:
      SETTP(tp, tcp_timers(tp, (int)MBUF2LONG(nam)));
 40252d4:	a009883a 	mov	r4,r20
 40252d8:	300b883a 	mov	r5,r6
 40252dc:	40249d00 	call	40249d0 <tcp_timers>
 40252e0:	0025883a 	mov	r18,zero
 40252e4:	003f9006 	br	4025128 <tcp_usrreq+0x4c>
      if (so->so_pcb == NULL)
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
         break;
      }
      sbappend(&so->so_snd, m);
 40252e8:	84001204 	addi	r16,r16,72
 40252ec:	8009883a 	mov	r4,r16
 40252f0:	4020fe40 	call	4020fe4 <sbappend>
      error = tcp_output(tp);
 40252f4:	a009883a 	mov	r4,r20
 40252f8:	40239000 	call	4023900 <tcp_output>
 40252fc:	1025883a 	mov	r18,r2
      if (error == ENOBUFS)
 4025300:	00801a44 	movi	r2,105
 4025304:	90bf881e 	bne	r18,r2,4025128 <tcp_usrreq+0x4c>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 4025308:	8009883a 	mov	r4,r16
 402530c:	980b883a 	mov	r5,r19
 4025310:	4020b580 	call	4020b58 <sbdropend>
 4025314:	003f8406 	br	4025128 <tcp_usrreq+0x4c>

   /*
    * After a receive, possibly send window update to peer.
    */
   case PRU_RCVD:
      (void) tcp_output(tp);
 4025318:	a009883a 	mov	r4,r20
 402531c:	40239000 	call	4023900 <tcp_output>
 4025320:	0025883a 	mov	r18,zero
 4025324:	003f8006 	br	4025128 <tcp_usrreq+0x4c>
    * Enter SYN_SENT state, and mark socket as connecting.
    * Start keep-alive timer, and seed output sequence space.
    * Send initial segment on connection.
    */
   case PRU_CONNECT:
      if (inp->inp_lport == 0) 
 4025328:	8880078b 	ldhu	r2,30(r17)
 402532c:	1000071e 	bne	r2,zero,402534c <tcp_usrreq+0x270>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbbind(inp, (struct mbuf *)0);
 4025330:	8809883a 	mov	r4,r17
 4025334:	000b883a 	mov	r5,zero
 4025338:	d9800015 	stw	r6,0(sp)
 402533c:	402e2100 	call	402e210 <in_pcbbind>
 4025340:	1025883a 	mov	r18,r2
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbbind(inp, (struct mbuf *)0);
#endif   /* end v6 only */

         if (error)
 4025344:	d9800017 	ldw	r6,0(sp)
 4025348:	103f771e 	bne	r2,zero,4025128 <tcp_usrreq+0x4c>
            break;
      }

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbconnect(inp, nam);
 402534c:	300b883a 	mov	r5,r6
 4025350:	8809883a 	mov	r4,r17
 4025354:	402e3880 	call	402e388 <in_pcbconnect>
 4025358:	1025883a 	mov	r18,r2
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbconnect(inp, nam);
#endif   /* end v6 only */

      if (error)
 402535c:	103f721e 	bne	r2,zero,4025128 <tcp_usrreq+0x4c>
         break;
      tp->t_template = tcp_template(tp);
 4025360:	a009883a 	mov	r4,r20
 4025364:	40245d00 	call	40245d0 <tcp_template>
 4025368:	a0800c15 	stw	r2,48(r20)
      if (tp->t_template == 0) 
 402536c:	1000631e 	bne	r2,zero,40254fc <tcp_usrreq+0x420>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
         in_pcbdisconnect(inp);
 4025370:	8809883a 	mov	r4,r17
 4025374:	402e5040 	call	402e504 <in_pcbdisconnect>
 4025378:	04801a44 	movi	r18,105
 402537c:	003f6a06 	br	4025128 <tcp_usrreq+0x4c>
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
      break;

   case PRU_SENSE:
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
 4025380:	401c81c0 	call	401c81c <dtrap>
 4025384:	0025883a 	mov	r18,zero
 4025388:	003f6706 	br	4025128 <tcp_usrreq+0x4c>
      return (0);

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
 402538c:	80801a17 	ldw	r2,104(r16)
 4025390:	1000031e 	bne	r2,zero,40253a0 <tcp_usrreq+0x2c4>
 4025394:	8080088b 	ldhu	r2,34(r16)
 4025398:	1080100c 	andi	r2,r2,64
 402539c:	103f8726 	beq	r2,zero,40251bc <tcp_usrreq+0xe0>
 40253a0:	80800417 	ldw	r2,16(r16)
 40253a4:	1080400c 	andi	r2,r2,256
 40253a8:	103f841e 	bne	r2,zero,40251bc <tcp_usrreq+0xe0>
 40253ac:	a0c02403 	ldbu	r3,144(r20)
 40253b0:	1880008c 	andi	r2,r3,2
 40253b4:	103f811e 	bne	r2,zero,40251bc <tcp_usrreq+0xe0>
       tp->t_oobflags & TCPOOB_HADDATA) 
       {
         error = EINVAL;
         break;
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
 40253b8:	1880004c 	andi	r2,r3,1
 40253bc:	10004d26 	beq	r2,zero,40254f4 <tcp_usrreq+0x418>
      {
         error = EWOULDBLOCK;
         break;
      }
      m->m_len = 1;
 40253c0:	00800044 	movi	r2,1
 40253c4:	98800215 	stw	r2,8(r19)
      *mtod(m, char *) = tp->t_iobc;
 40253c8:	99000317 	ldw	r4,12(r19)
 40253cc:	a0802443 	ldbu	r2,145(r20)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
 40253d0:	30c0008c 	andi	r3,r6,2
      {
         error = EWOULDBLOCK;
         break;
      }
      m->m_len = 1;
      *mtod(m, char *) = tp->t_iobc;
 40253d4:	20800005 	stb	r2,0(r4)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
 40253d8:	18001f1e 	bne	r3,zero,4025458 <tcp_usrreq+0x37c>
         tp->t_oobflags ^= (TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 40253dc:	a0802403 	ldbu	r2,144(r20)
 40253e0:	0025883a 	mov	r18,zero
 40253e4:	108000dc 	xori	r2,r2,3
 40253e8:	a0802405 	stb	r2,144(r20)
 40253ec:	003f4e06 	br	4025128 <tcp_usrreq+0x4c>

   /*
    * Abort the TCP.
    */
   case PRU_ABORT:
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
 40253f0:	a009883a 	mov	r4,r20
 40253f4:	01401c44 	movi	r5,113
 40253f8:	40244a40 	call	40244a4 <tcp_drop>
 40253fc:	0025883a 	mov	r18,zero
 4025400:	003f4906 	br	4025128 <tcp_usrreq+0x4c>
    * do this directly: have to initiate a PRU_DISCONNECT,
    * which may finish later; embryonic TCB's can just
    * be discarded here.
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
 4025404:	a0c00217 	ldw	r3,8(r20)
 4025408:	00800044 	movi	r2,1
 402540c:	10ff7816 	blt	r2,r3,40251f0 <tcp_usrreq+0x114>
         SETTP(tp, tcp_disconnect(tp));
      else
         SETTP(tp, tcp_close(tp));
 4025410:	a009883a 	mov	r4,r20
 4025414:	40243f00 	call	40243f0 <tcp_close>
 4025418:	0025883a 	mov	r18,zero
 402541c:	003f4206 	br	4025128 <tcp_usrreq+0x4c>
         dtrap(); /* programming error? */
         return EINVAL;
      }
   }

   switch (req) 
 4025420:	04801fc4 	movi	r18,127
 4025424:	003f4006 	br	4025128 <tcp_usrreq+0x4c>
      break;         

   case PRU_PEERADDR:
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setpeeraddr(inp, nam);
 4025428:	8809883a 	mov	r4,r17
 402542c:	300b883a 	mov	r5,r6
 4025430:	402e1a00 	call	402e1a0 <in_setpeeraddr>
 4025434:	0025883a 	mov	r18,zero
 4025438:	003f3b06 	br	4025128 <tcp_usrreq+0x4c>
   case PRU_SOCKADDR:

   /* sockaddr and peeraddr have to switch based on IP type */
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setsockaddr(inp, nam);
 402543c:	8809883a 	mov	r4,r17
 4025440:	300b883a 	mov	r5,r6
 4025444:	402e1d80 	call	402e1d8 <in_setsockaddr>
 4025448:	0025883a 	mov	r18,zero
 402544c:	003f3606 	br	4025128 <tcp_usrreq+0x4c>
         dtrap(); /* programming error? */
         return EINVAL;
      }
   }

   switch (req) 
 4025450:	048017c4 	movi	r18,95
 4025454:	003f3406 	br	4025128 <tcp_usrreq+0x4c>
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;

      default:
      panic("tcp_usrreq");
 4025458:	0025883a 	mov	r18,zero
 402545c:	003f3206 	br	4025128 <tcp_usrreq+0x4c>
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
         error = in_pcbbind(inp, (struct mbuf *)0);
 4025460:	8809883a 	mov	r4,r17
 4025464:	000b883a 	mov	r5,zero
 4025468:	402e2100 	call	402e210 <in_pcbbind>
 402546c:	1025883a 	mov	r18,r2
      if (error == 0)
 4025470:	103f8526 	beq	r2,zero,4025288 <tcp_usrreq+0x1ac>
 4025474:	003f2c06 	br	4025128 <tcp_usrreq+0x4c>
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
         {
            nam->m_len = sizeof (struct sockaddr_in);
 4025478:	00800404 	movi	r2,16
            sin->sin_family = AF_INET;
 402547c:	3940000d 	sth	r5,0(r7)
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
         {
            nam->m_len = sizeof (struct sockaddr_in);
 4025480:	30800215 	stw	r2,8(r6)
            sin->sin_family = AF_INET;
            sin->sin_port = inp->inp_fport;
            sin->sin_addr = inp->inp_faddr;
 4025484:	88c00317 	ldw	r3,12(r17)
#ifdef IP_V4
         if (so->so_domain == AF_INET)
         {
            nam->m_len = sizeof (struct sockaddr_in);
            sin->sin_family = AF_INET;
            sin->sin_port = inp->inp_fport;
 4025488:	8880070b 	ldhu	r2,28(r17)
 402548c:	81400517 	ldw	r5,20(r16)
            sin->sin_addr = inp->inp_faddr;
 4025490:	38c00115 	stw	r3,4(r7)
#ifdef IP_V4
         if (so->so_domain == AF_INET)
         {
            nam->m_len = sizeof (struct sockaddr_in);
            sin->sin_family = AF_INET;
            sin->sin_port = inp->inp_fport;
 4025494:	3880008d 	sth	r2,2(r7)
 4025498:	003f6b06 	br	4025248 <tcp_usrreq+0x16c>
      if (so->so_pcb == NULL)
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
         break;
      }
      if (sbspace(&so->so_snd) == 0) 
 402549c:	20ff8926 	beq	r4,r3,40252c4 <tcp_usrreq+0x1e8>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
 40254a0:	84401204 	addi	r17,r16,72
 40254a4:	8809883a 	mov	r4,r17
 40254a8:	4020fe40 	call	4020fe4 <sbappend>
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
 40254ac:	81001217 	ldw	r4,72(r16)
 40254b0:	a0800e17 	ldw	r2,56(r20)
      tp->t_force = 1;
 40254b4:	00c00044 	movi	r3,1
 40254b8:	a0c00a85 	stb	r3,42(r20)
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
 40254bc:	1105883a 	add	r2,r2,r4
 40254c0:	a0801015 	stw	r2,64(r20)
      tp->t_force = 1;
      error = tcp_output(tp);
 40254c4:	a009883a 	mov	r4,r20
 40254c8:	40239000 	call	4023900 <tcp_output>
 40254cc:	1025883a 	mov	r18,r2
      if (error == ENOBUFS)
 40254d0:	00801a44 	movi	r2,105
 40254d4:	90800226 	beq	r18,r2,40254e0 <tcp_usrreq+0x404>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
      tp->t_force = 0;
 40254d8:	a0000a85 	stb	zero,42(r20)
 40254dc:	003f1206 	br	4025128 <tcp_usrreq+0x4c>
      sbappend(&so->so_snd, m);
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
      tp->t_force = 1;
      error = tcp_output(tp);
      if (error == ENOBUFS)
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 40254e0:	8809883a 	mov	r4,r17
 40254e4:	980b883a 	mov	r5,r19
 40254e8:	4020b580 	call	4020b58 <sbdropend>
      tp->t_force = 0;
 40254ec:	a0000a85 	stb	zero,42(r20)
 40254f0:	003f0d06 	br	4025128 <tcp_usrreq+0x4c>
       tp->t_oobflags & TCPOOB_HADDATA) 
       {
         error = EINVAL;
         break;
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
 40254f4:	048002c4 	movi	r18,11
 40254f8:	003f0b06 	br	4025128 <tcp_usrreq+0x4c>

         error = ENOBUFS;
         break;
      }

      soisconnecting(so);
 40254fc:	8009883a 	mov	r4,r16
 4025500:	40213c00 	call	40213c0 <soisconnecting>
      tcpstat.tcps_connattempt++;
 4025504:	00c10134 	movhi	r3,1028
 4025508:	18cd2b04 	addi	r3,r3,13484
 402550c:	18800017 	ldw	r2,0(r3)
      tp->t_state = TCPS_SYN_SENT;
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
      tp->iss = tcp_iss; 
 4025510:	01410134 	movhi	r5,1028
 4025514:	29694004 	addi	r5,r5,-23296
 4025518:	29000017 	ldw	r4,0(r5)
         error = ENOBUFS;
         break;
      }

      soisconnecting(so);
      tcpstat.tcps_connattempt++;
 402551c:	10800044 	addi	r2,r2,1
 4025520:	18800015 	stw	r2,0(r3)
      tp->t_state = TCPS_SYN_SENT;
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
      tp->iss = tcp_iss; 
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
 4025524:	00be9fd4 	movui	r2,64127

      soisconnecting(so);
      tcpstat.tcps_connattempt++;
      tp->t_state = TCPS_SYN_SENT;
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
      tp->iss = tcp_iss; 
 4025528:	a1001315 	stw	r4,76(r20)
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
 402552c:	2085883a 	add	r2,r4,r2
 4025530:	28800015 	stw	r2,0(r5)
         break;
      }

      soisconnecting(so);
      tcpstat.tcps_connattempt++;
      tp->t_state = TCPS_SYN_SENT;
 4025534:	00c00084 	movi	r3,2
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 4025538:	00802584 	movi	r2,150
      tp->iss = tcp_iss; 
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
      tcp_sendseqinit(tp);
 402553c:	a1000e15 	stw	r4,56(r20)
 4025540:	a1001015 	stw	r4,64(r20)
 4025544:	a1001a15 	stw	r4,104(r20)
 4025548:	a1000f15 	stw	r4,60(r20)
         break;
      }

      soisconnecting(so);
      tcpstat.tcps_connattempt++;
      tp->t_state = TCPS_SYN_SENT;
 402554c:	a0c00215 	stw	r3,8(r20)
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 4025550:	a0800515 	stw	r2,20(r20)
      tp->iss = tcp_iss; 
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
      tcp_sendseqinit(tp);
      error = tcp_output(tp);
 4025554:	a009883a 	mov	r4,r20
 4025558:	40239000 	call	4023900 <tcp_output>
 402555c:	1025883a 	mov	r18,r2
      if (!error)
 4025560:	103ef11e 	bne	r2,zero,4025128 <tcp_usrreq+0x4c>
         TCP_MIB_INC(tcpActiveOpens);     /* keep MIB stats */
 4025564:	00c10134 	movhi	r3,1028
 4025568:	18ccfd04 	addi	r3,r3,13300
 402556c:	18800417 	ldw	r2,16(r3)
 4025570:	10800044 	addi	r2,r2,1
 4025574:	18800415 	stw	r2,16(r3)
 4025578:	003eeb06 	br	4025128 <tcp_usrreq+0x4c>
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
      {
         error = in_pcbbind(inp, nam);
 402557c:	8809883a 	mov	r4,r17
 4025580:	300b883a 	mov	r5,r6
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
}
 4025584:	dfc00617 	ldw	ra,24(sp)
 4025588:	dd000517 	ldw	r20,20(sp)
 402558c:	dcc00417 	ldw	r19,16(sp)
 4025590:	dc800317 	ldw	r18,12(sp)
 4025594:	dc400217 	ldw	r17,8(sp)
 4025598:	dc000117 	ldw	r16,4(sp)
 402559c:	dec00704 	addi	sp,sp,28
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
      {
         error = in_pcbbind(inp, nam);
 40255a0:	402e2101 	jmpi	402e210 <in_pcbbind>

040255a4 <tcpinit>:
   tcp_sendspace = (TCP_MSS) * 2;
   tcp_recvspace = (TCP_MSS) * 2;
   TCPTV_MSL =    (4 * PR_SLOWHZ);     /* max seg lifetime default */
#endif

   e = nptcp_init();    /* call the NetPort init in nptcp.c */
 40255a4:	401d47c1 	jmpi	401d47c <nptcp_init>

040255a8 <udp_lookup>:
UDPCONN
udp_lookup(struct socket * so)
{
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 40255a8:	00810134 	movhi	r2,1028
 40255ac:	10a92704 	addi	r2,r2,-23396
 40255b0:	10c00017 	ldw	r3,0(r2)
 40255b4:	1800031e 	bne	r3,zero,40255c4 <udp_lookup+0x1c>
 40255b8:	00000406 	br	40255cc <udp_lookup+0x24>
 40255bc:	18c00017 	ldw	r3,0(r3)
 40255c0:	18000226 	beq	r3,zero,40255cc <udp_lookup+0x24>
      if (tmp->u_data == (void*)so)
 40255c4:	18800617 	ldw	r2,24(r3)
 40255c8:	113ffc1e 	bne	r2,r4,40255bc <udp_lookup+0x14>
      return (tmp);

   return NULL;   /* didn't find it */
}
 40255cc:	1805883a 	mov	r2,r3
 40255d0:	f800283a 	ret

040255d4 <udp4_sockaddr>:
     return(e);
  return 0;
}

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
 40255d4:	defffc04 	addi	sp,sp,-16
 40255d8:	dc000015 	stw	r16,0(sp)
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
 40255dc:	2c000317 	ldw	r16,12(r5)
     return(e);
  return 0;
}

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
 40255e0:	dc800215 	stw	r18,8(sp)
 40255e4:	dc400115 	stw	r17,4(sp)
 40255e8:	dfc00315 	stw	ra,12(sp)
 40255ec:	2823883a 	mov	r17,r5
 40255f0:	3025883a 	mov	r18,r6
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
  if (sin == NULL)
 40255f4:	80002926 	beq	r16,zero,402569c <udp4_sockaddr+0xc8>
     return(EINVAL);
  udpconn = udp_lookup(so);
 40255f8:	40255a80 	call	40255a8 <udp_lookup>
 40255fc:	1009883a 	mov	r4,r2
  if (!udpconn)
 4025600:	10002626 	beq	r2,zero,402569c <udp4_sockaddr+0xc8>
     return(EINVAL);
  nam->m_len = sizeof(*sin);
 4025604:	00800404 	movi	r2,16
  if (req == PRU_SOCKADDR)
 4025608:	00c003c4 	movi	r3,15
  {
     sin->sin_family = AF_INET;
     sin->sin_port = htons(udpconn->u_lport);
     sin->sin_addr.s_addr = udpconn->u_lhost;
 402560c:	000b883a 	mov	r5,zero
  if (sin == NULL)
     return(EINVAL);
  udpconn = udp_lookup(so);
  if (!udpconn)
     return(EINVAL);
  nam->m_len = sizeof(*sin);
 4025610:	88800215 	stw	r2,8(r17)
  if (req == PRU_SOCKADDR)
 4025614:	90c01126 	beq	r18,r3,402565c <udp4_sockaddr+0x88>
     sin->sin_port = htons(udpconn->u_lport);
     sin->sin_addr.s_addr = udpconn->u_lhost;
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
 4025618:	00800084 	movi	r2,2
 402561c:	8080000d 	sth	r2,0(r16)
    sin->sin_port = htons(udpconn->u_fport);
 4025620:	2080020b 	ldhu	r2,8(r4)
    sin->sin_addr.s_addr = udpconn->u_fhost;
 4025624:	20c00417 	ldw	r3,16(r4)
 4025628:	000b883a 	mov	r5,zero
 402562c:	80c00115 	stw	r3,4(r16)
     sin->sin_addr.s_addr = udpconn->u_lhost;
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
    sin->sin_port = htons(udpconn->u_fport);
 4025630:	1006923a 	slli	r3,r2,8
 4025634:	1004d23a 	srli	r2,r2,8
 4025638:	10c4b03a 	or	r2,r2,r3
 402563c:	8080008d 	sth	r2,2(r16)
    sin->sin_addr.s_addr = udpconn->u_fhost;
  }
  return 0;
}
 4025640:	2805883a 	mov	r2,r5
 4025644:	dfc00317 	ldw	ra,12(sp)
 4025648:	dc800217 	ldw	r18,8(sp)
 402564c:	dc400117 	ldw	r17,4(sp)
 4025650:	dc000017 	ldw	r16,0(sp)
 4025654:	dec00404 	addi	sp,sp,16
 4025658:	f800283a 	ret
  if (!udpconn)
     return(EINVAL);
  nam->m_len = sizeof(*sin);
  if (req == PRU_SOCKADDR)
  {
     sin->sin_family = AF_INET;
 402565c:	00800084 	movi	r2,2
 4025660:	8080000d 	sth	r2,0(r16)
     sin->sin_port = htons(udpconn->u_lport);
 4025664:	2080018b 	ldhu	r2,6(r4)
     sin->sin_addr.s_addr = udpconn->u_lhost;
 4025668:	20c00317 	ldw	r3,12(r4)
 402566c:	80c00115 	stw	r3,4(r16)
     return(EINVAL);
  nam->m_len = sizeof(*sin);
  if (req == PRU_SOCKADDR)
  {
     sin->sin_family = AF_INET;
     sin->sin_port = htons(udpconn->u_lport);
 4025670:	1006923a 	slli	r3,r2,8
 4025674:	1004d23a 	srli	r2,r2,8
 4025678:	10c4b03a 	or	r2,r2,r3
 402567c:	8080008d 	sth	r2,2(r16)
    sin->sin_family = AF_INET;
    sin->sin_port = htons(udpconn->u_fport);
    sin->sin_addr.s_addr = udpconn->u_fhost;
  }
  return 0;
}
 4025680:	2805883a 	mov	r2,r5
 4025684:	dfc00317 	ldw	ra,12(sp)
 4025688:	dc800217 	ldw	r18,8(sp)
 402568c:	dc400117 	ldw	r17,4(sp)
 4025690:	dc000017 	ldw	r16,0(sp)
 4025694:	dec00404 	addi	sp,sp,16
 4025698:	f800283a 	ret
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
    sin->sin_port = htons(udpconn->u_fport);
    sin->sin_addr.s_addr = udpconn->u_fhost;
 402569c:	01400584 	movi	r5,22
  }
  return 0;
}
 40256a0:	2805883a 	mov	r2,r5
 40256a4:	dfc00317 	ldw	ra,12(sp)
 40256a8:	dc800217 	ldw	r18,8(sp)
 40256ac:	dc400117 	ldw	r17,4(sp)
 40256b0:	dc000017 	ldw	r16,0(sp)
 40256b4:	dec00404 	addi	sp,sp,16
 40256b8:	f800283a 	ret

040256bc <udp4_socksend>:
  return 0;
}

int udp4_socksend(struct socket *so, struct mbuf *m, 
		struct mbuf *nam ) 
{
 40256bc:	defff904 	addi	sp,sp,-28
 40256c0:	dcc00315 	stw	r19,12(sp)
 40256c4:	dc800215 	stw	r18,8(sp)
 40256c8:	dc400115 	stw	r17,4(sp)
 40256cc:	dc000015 	stw	r16,0(sp)
 40256d0:	dfc00615 	stw	ra,24(sp)
 40256d4:	dd400515 	stw	r21,20(sp)
 40256d8:	dd000415 	stw	r20,16(sp)
 40256dc:	2823883a 	mov	r17,r5
 40256e0:	3021883a 	mov	r16,r6
 40256e4:	2027883a 	mov	r19,r4
  PACKET pkt;
#ifdef MULTI_HOMED
  NET ifp;
#endif

  udpconn = udp_lookup(so);
 40256e8:	40255a80 	call	40255a8 <udp_lookup>
 40256ec:	1025883a 	mov	r18,r2
  if (!udpconn)
 40256f0:	10000c1e 	bne	r2,zero,4025724 <udp4_socksend+0x68>
  {
    m_free(m);
 40256f4:	8809883a 	mov	r4,r17
 40256f8:	401d6500 	call	401d650 <m_free>
 40256fc:	00801bc4 	movi	r2,111
  e = udp_send(fport, udpconn->u_lport, pkt);
  LOCK_NET_RESOURCE(NET_RESID);
  if (e < 0) 
     return(e);
  return 0;
}
 4025700:	dfc00617 	ldw	ra,24(sp)
 4025704:	dd400517 	ldw	r21,20(sp)
 4025708:	dd000417 	ldw	r20,16(sp)
 402570c:	dcc00317 	ldw	r19,12(sp)
 4025710:	dc800217 	ldw	r18,8(sp)
 4025714:	dc400117 	ldw	r17,4(sp)
 4025718:	dc000017 	ldw	r16,0(sp)
 402571c:	dec00704 	addi	sp,sp,28
 4025720:	f800283a 	ret
    /* may be bogus socket, but more likely the connection may 
       have closed due to ICMP dest unreachable from other side. */
    return(ECONNREFUSED);
  }

  if (nam == NULL)  /* no sendto() info passed, must be send() */
 4025724:	8000131e 	bne	r16,zero,4025774 <udp4_socksend+0xb8>
  { 
    if (so->so_state & SS_ISCONNECTED)
 4025728:	9880088b 	ldhu	r2,34(r19)
 402572c:	1080008c 	andi	r2,r2,2
 4025730:	10000e26 	beq	r2,zero,402576c <udp4_socksend+0xb0>
    {
      fport = udpconn->u_fport;
 4025734:	9540020b 	ldhu	r21,8(r18)
      fhost = udpconn->u_fhost;
 4025738:	95000417 	ldw	r20,16(r18)

  /* since our pkt->nb_buff size is tied to max packet size, we 
   * assume our UDP datagrams are always in one mbuf and that the 
   * mbuf 
   */
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
 402573c:	8c000217 	ldw	r16,8(r17)
 4025740:	402bcec0 	call	402bcec <udp_maxalloc>
 4025744:	1400112e 	bgeu	r2,r16,402578c <udp4_socksend+0xd0>
  {
    dtrap(); /* should never happen */
 4025748:	401c81c0 	call	401c81c <dtrap>
 402574c:	00801e84 	movi	r2,122
 4025750:	003feb06 	br	4025700 <udp4_socksend+0x44>
    dtrap();
    return (EINVAL);
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
 4025754:	80800317 	ldw	r2,12(r16)
    fhost = sin->sin_addr.s_addr;
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
 4025758:	1100008b 	ldhu	r4,2(r2)
    return (EINVAL);
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
    fhost = sin->sin_addr.s_addr;
 402575c:	15000117 	ldw	r20,4(r2)
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
 4025760:	20005d1e 	bne	r4,zero,40258d8 <udp4_socksend+0x21c>
      fport = ntohs(sin->sin_port);
    else  /* use port already set in UDP connection */
    {
      if (udpconn->u_fport == 0) /* don't send to port 0 */
 4025764:	9540020b 	ldhu	r21,8(r18)
 4025768:	a83ff41e 	bne	r21,zero,402573c <udp4_socksend+0x80>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
  e = udp_send(fport, udpconn->u_lport, pkt);
  LOCK_NET_RESOURCE(NET_RESID);
 402576c:	00800584 	movi	r2,22
 4025770:	003fe306 	br	4025700 <udp4_socksend+0x44>
      fhost = udpconn->u_fhost;
    }
    else
      return (EINVAL);
  }
  else if(nam->m_len != sizeof (*sin))
 4025774:	80c00217 	ldw	r3,8(r16)
 4025778:	00800404 	movi	r2,16
 402577c:	18bff526 	beq	r3,r2,4025754 <udp4_socksend+0x98>
  {
    dtrap();
 4025780:	401c81c0 	call	401c81c <dtrap>
 4025784:	00800584 	movi	r2,22
 4025788:	003fdd06 	br	4025700 <udp4_socksend+0x44>
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
  {
    dtrap(); /* should never happen */
    return EMSGSIZE;  /* try to recover */
  }
  pkt = udp_alloc(m->m_len, 0);    /* get a NetPort buffer for send */
 402578c:	89000217 	ldw	r4,8(r17)
 4025790:	000b883a 	mov	r5,zero
 4025794:	402bd400 	call	402bd40 <udp_alloc>
 4025798:	1021883a 	mov	r16,r2
  if (!pkt)
 402579c:	1000041e 	bne	r2,zero,40257b0 <udp4_socksend+0xf4>
  {
    m_free(m);
 40257a0:	8809883a 	mov	r4,r17
 40257a4:	401d6500 	call	401d650 <m_free>
 40257a8:	00801a44 	movi	r2,105
 40257ac:	003fd406 	br	4025700 <udp4_socksend+0x44>
    return ENOBUFS;   /* report buffer shortages */
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 40257b0:	11000317 	ldw	r4,12(r2)
 40257b4:	89400317 	ldw	r5,12(r17)
 40257b8:	89800217 	ldw	r6,8(r17)
 40257bc:	40096480 	call	4009648 <memcpy>
  pkt->nb_plen = m->m_len;
 40257c0:	88c00217 	ldw	r3,8(r17)
  /* finished with mbuf, free it now */
  m_free(m);
 40257c4:	8809883a 	mov	r4,r17
  {
    m_free(m);
    return ENOBUFS;   /* report buffer shortages */
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
  pkt->nb_plen = m->m_len;
 40257c8:	80c00415 	stw	r3,16(r16)
  /* finished with mbuf, free it now */
  m_free(m);
 40257cc:	401d6500 	call	401d650 <m_free>
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
 40257d0:	00bfffc4 	movi	r2,-1
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
  pkt->nb_plen = m->m_len;
  /* finished with mbuf, free it now */
  m_free(m);
  pkt->fhost = fhost;
 40257d4:	85000715 	stw	r20,28(r16)
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
 40257d8:	a0801326 	beq	r20,r2,4025828 <udp4_socksend+0x16c>
#ifdef IP_MULTICAST

  /* If the socket has an IP moptions structure for multicast options,
   * place a pointer to this structure in the PACKET structure.
   */
  if (so->inp_moptions)
 40257dc:	98800317 	ldw	r2,12(r19)
 40257e0:	10000126 	beq	r2,zero,40257e8 <udp4_socksend+0x12c>
     pkt->imo = so->inp_moptions;
 40257e4:	80800b15 	stw	r2,44(r16)

#endif   /* IP_MULTICAST */

   /* have we set options? */
   if (so->so_optsPack)
 40257e8:	99001f17 	ldw	r4,124(r19)
 40257ec:	20000126 	beq	r4,zero,40257f4 <udp4_socksend+0x138>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */
 40257f0:	81000c15 	stw	r4,48(r16)

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
 40257f4:	0009883a 	mov	r4,zero
 40257f8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
  e = udp_send(fport, udpconn->u_lport, pkt);
 40257fc:	9140018b 	ldhu	r5,6(r18)
 4025800:	a93fffcc 	andi	r4,r21,65535
 4025804:	800d883a 	mov	r6,r16
 4025808:	402bdc00 	call	402bdc0 <udp_send>
  LOCK_NET_RESOURCE(NET_RESID);
 402580c:	0009883a 	mov	r4,zero
   if (so->so_optsPack)
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
  e = udp_send(fport, udpconn->u_lport, pkt);
 4025810:	1023883a 	mov	r17,r2
  LOCK_NET_RESOURCE(NET_RESID);
 4025814:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
 4025818:	8805883a 	mov	r2,r17
 402581c:	047fb80e 	bge	zero,r17,4025700 <udp4_socksend+0x44>
 4025820:	0005883a 	mov	r2,zero
 4025824:	003fb606 	br	4025700 <udp4_socksend+0x44>
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
 4025828:	91000317 	ldw	r4,12(r18)
 402582c:	20001926 	beq	r4,zero,4025894 <udp4_socksend+0x1d8>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4025830:	01410134 	movhi	r5,1028
 4025834:	294dfc04 	addi	r5,r5,14320
 4025838:	28800017 	ldw	r2,0(r5)
 402583c:	10001326 	beq	r2,zero,402588c <udp4_socksend+0x1d0>
 4025840:	1007883a 	mov	r3,r2
        if (ifp->n_ipaddr == udpconn->u_lhost)
 4025844:	10800a17 	ldw	r2,40(r2)
 4025848:	2080031e 	bne	r4,r2,4025858 <udp4_socksend+0x19c>
 402584c:	00000d06 	br	4025884 <udp4_socksend+0x1c8>
 4025850:	18800a17 	ldw	r2,40(r3)
 4025854:	20800b26 	beq	r4,r2,4025884 <udp4_socksend+0x1c8>
  if (fhost == 0xffffffff)
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4025858:	18c00017 	ldw	r3,0(r3)
 402585c:	183ffc1e 	bne	r3,zero,4025850 <udp4_socksend+0x194>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4025860:	28c00017 	ldw	r3,0(r5)
 4025864:	01000044 	movi	r4,1
 4025868:	00000206 	br	4025874 <udp4_socksend+0x1b8>
 402586c:	18c00017 	ldw	r3,0(r3)
 4025870:	18000626 	beq	r3,zero,402588c <udp4_socksend+0x1d0>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 4025874:	18802717 	ldw	r2,156(r3)
 4025878:	103ffc26 	beq	r2,zero,402586c <udp4_socksend+0x1b0>
 402587c:	10800617 	ldw	r2,24(r2)
 4025880:	113ffa1e 	bne	r2,r4,402586c <udp4_socksend+0x1b0>
          break;
      if (ifp == NULL)
        return(EADDRNOTAVAIL);
    }
    pkt->net = ifp;
 4025884:	80c00615 	stw	r3,24(r16)
 4025888:	003fd406 	br	40257dc <udp4_socksend+0x120>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
  e = udp_send(fport, udpconn->u_lport, pkt);
  LOCK_NET_RESOURCE(NET_RESID);
 402588c:	00801f44 	movi	r2,125
 4025890:	003f9b06 	br	4025700 <udp4_socksend+0x44>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4025894:	01410134 	movhi	r5,1028
 4025898:	294dfc04 	addi	r5,r5,14320
 402589c:	28800017 	ldw	r2,0(r5)
 40258a0:	103ffa26 	beq	r2,zero,402588c <udp4_socksend+0x1d0>
 40258a4:	1007883a 	mov	r3,r2
 40258a8:	01000044 	movi	r4,1
        if ((ifp->n_flags & NF_BCAST) &&
 40258ac:	18802a17 	ldw	r2,168(r3)
 40258b0:	1080004c 	andi	r2,r2,1
 40258b4:	1005003a 	cmpeq	r2,r2,zero
 40258b8:	1000041e 	bne	r2,zero,40258cc <udp4_socksend+0x210>
 40258bc:	18802717 	ldw	r2,156(r3)
 40258c0:	10000226 	beq	r2,zero,40258cc <udp4_socksend+0x210>
 40258c4:	10800617 	ldw	r2,24(r2)
 40258c8:	113fee26 	beq	r2,r4,4025884 <udp4_socksend+0x1c8>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40258cc:	18c00017 	ldw	r3,0(r3)
 40258d0:	183ff61e 	bne	r3,zero,40258ac <udp4_socksend+0x1f0>
 40258d4:	003fe206 	br	4025860 <udp4_socksend+0x1a4>
  {
    sin = mtod(nam, struct sockaddr_in *);
    fhost = sin->sin_addr.s_addr;
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
      fport = ntohs(sin->sin_port);
 40258d8:	2006923a 	slli	r3,r4,8
 40258dc:	2004d23a 	srli	r2,r4,8
 40258e0:	10eab03a 	or	r21,r2,r3
 40258e4:	003f9506 	br	402573c <udp4_socksend+0x80>

040258e8 <udp4_sockbind>:
   }
}

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
 40258e8:	defffa04 	addi	sp,sp,-24
 40258ec:	dc000015 	stw	r16,0(sp)
  u_short  lport;   /* local port (local byte order) */
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
 40258f0:	2c000317 	ldw	r16,12(r5)
   }
}

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
 40258f4:	dd000415 	stw	r20,16(sp)
 40258f8:	dc800215 	stw	r18,8(sp)
 40258fc:	dfc00515 	stw	ra,20(sp)
 4025900:	dcc00315 	stw	r19,12(sp)
 4025904:	dc400115 	stw	r17,4(sp)
 4025908:	3025883a 	mov	r18,r6
 402590c:	2029883a 	mov	r20,r4
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
  if (sin == NULL)
 4025910:	80003126 	beq	r16,zero,40259d8 <udp4_sockbind+0xf0>
    return(EINVAL);
  if (nam->m_len != sizeof (*sin))
 4025914:	28c00217 	ldw	r3,8(r5)
 4025918:	00800404 	movi	r2,16
 402591c:	18802e1e 	bne	r3,r2,40259d8 <udp4_sockbind+0xf0>
    return(EINVAL);
  udpconn = udp_lookup(so);
 4025920:	40255a80 	call	40255a8 <udp_lookup>
 4025924:	1023883a 	mov	r17,r2
  if (!udpconn)
 4025928:	10002b26 	beq	r2,zero,40259d8 <udp4_sockbind+0xf0>
     return(EINVAL);
  if (req == PRU_BIND)
 402592c:	00800084 	movi	r2,2
 4025930:	90803526 	beq	r18,r2,4025a08 <udp4_sockbind+0x120>
    fport = ntohs(sin->sin_port);
    /* if the caller-supplied address is INADDR_ANY,
     * use the wildcard address; else, use the caller-
     * supplied address
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 4025934:	84c00117 	ldw	r19,4(r16)
  else /* PRU_CONNECT */
  {
    /* connect the socket to a remote IP address and
     * UDP port.
     */
    fport = ntohs(sin->sin_port);
 4025938:	8480008b 	ldhu	r18,2(r16)
      fhost = sin->sin_addr.s_addr;
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
 402593c:	9809883a 	mov	r4,r19
 4025940:	40284380 	call	4028438 <ip_mymach>
 4025944:	1021883a 	mov	r16,r2
    if (lhost == 0)
 4025948:	10001a26 	beq	r2,zero,40259b4 <udp4_sockbind+0xcc>
      return(ENETUNREACH);
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
 402594c:	8900018b 	ldhu	r4,6(r17)
    if (lport == 0)
 4025950:	20002a26 	beq	r4,zero,40259fc <udp4_sockbind+0x114>
      lport = udp_socket();
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
    udpconn->u_lport = lport;
    udpconn->u_fhost = fhost;
    udpconn->u_fport = fport;
 4025954:	90bfffcc 	andi	r2,r18,65535
 4025958:	1006923a 	slli	r3,r2,8
 402595c:	1004d23a 	srli	r2,r2,8
    lport = udpconn->u_lport;
    if (lport == 0)
      lport = udp_socket();
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
    udpconn->u_lport = lport;
 4025960:	8900018d 	sth	r4,6(r17)
     */
    lport = udpconn->u_lport;
    if (lport == 0)
      lport = udp_socket();
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
 4025964:	8c000315 	stw	r16,12(r17)
    udpconn->u_lport = lport;
    udpconn->u_fhost = fhost;
    udpconn->u_fport = fport;
 4025968:	10c4b03a 	or	r2,r2,r3
 402596c:	8880020d 	sth	r2,8(r17)
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 4025970:	a0c0088b 	ldhu	r3,34(r20)
    so->so_state |= SS_ISCONNECTED;
 4025974:	00bffcc4 	movi	r2,-13
    if (lport == 0)
      lport = udp_socket();
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
    udpconn->u_lport = lport;
    udpconn->u_fhost = fhost;
 4025978:	8cc00415 	stw	r19,16(r17)
    udpconn->u_fport = fport;
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
    so->so_state |= SS_ISCONNECTED;
 402597c:	1886703a 	and	r3,r3,r2
 4025980:	18c00094 	ori	r3,r3,2
 4025984:	a0c0088d 	sth	r3,34(r20)
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
 4025988:	a1000a04 	addi	r4,r20,40
 402598c:	4020d000 	call	4020d00 <sbflush>
 4025990:	0005883a 	mov	r2,zero
  }
  return 0;
}
 4025994:	dfc00517 	ldw	ra,20(sp)
 4025998:	dd000417 	ldw	r20,16(sp)
 402599c:	dcc00317 	ldw	r19,12(sp)
 40259a0:	dc800217 	ldw	r18,8(sp)
 40259a4:	dc400117 	ldw	r17,4(sp)
 40259a8:	dc000017 	ldw	r16,0(sp)
 40259ac:	dec00604 	addi	sp,sp,24
 40259b0:	f800283a 	ret
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
    if (lhost == 0)
 40259b4:	00801c84 	movi	r2,114
    so->so_state |= SS_ISCONNECTED;
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
  }
  return 0;
}
 40259b8:	dfc00517 	ldw	ra,20(sp)
 40259bc:	dd000417 	ldw	r20,16(sp)
 40259c0:	dcc00317 	ldw	r19,12(sp)
 40259c4:	dc800217 	ldw	r18,8(sp)
 40259c8:	dc400117 	ldw	r17,4(sp)
 40259cc:	dc000017 	ldw	r16,0(sp)
 40259d0:	dec00604 	addi	sp,sp,24
 40259d4:	f800283a 	ret
    udpconn->u_fport = fport;
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
    so->so_state |= SS_ISCONNECTED;
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
 40259d8:	00800584 	movi	r2,22
  }
  return 0;
}
 40259dc:	dfc00517 	ldw	ra,20(sp)
 40259e0:	dd000417 	ldw	r20,16(sp)
 40259e4:	dcc00317 	ldw	r19,12(sp)
 40259e8:	dc800217 	ldw	r18,8(sp)
 40259ec:	dc400117 	ldw	r17,4(sp)
 40259f0:	dc000017 	ldw	r16,0(sp)
 40259f4:	dec00604 	addi	sp,sp,24
 40259f8:	f800283a 	ret
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
    if (lport == 0)
      lport = udp_socket();
 40259fc:	402bc640 	call	402bc64 <udp_socket>
 4025a00:	1009883a 	mov	r4,r2
 4025a04:	003fd306 	br	4025954 <udp4_sockbind+0x6c>
     * if the caller-supplied port is 0, try to get
     * the port from the UDP endpoint, or pick a new
     * unique port; else, use the caller-supplied
     * port
     */
    if (sin->sin_port == 0)
 4025a08:	8080008b 	ldhu	r2,2(r16)
 4025a0c:	1000231e 	bne	r2,zero,4025a9c <udp4_sockbind+0x1b4>
    {
      if (udpconn->u_lport != 0)
 4025a10:	8980018b 	ldhu	r6,6(r17)
 4025a14:	30002526 	beq	r6,zero,4025aac <udp4_sockbind+0x1c4>
    /* if the caller-supplied address is INADDR_ANY,
     * don't bind to a specific address; else, 
     * make sure the caller-supplied address is
     * an interface IP address and if so, bind to that
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 4025a18:	81400117 	ldw	r5,4(r16)
 4025a1c:	28000e26 	beq	r5,zero,4025a58 <udp4_sockbind+0x170>
    else
    {
      lhost = sin->sin_addr.s_addr;
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4025a20:	00810134 	movhi	r2,1028
 4025a24:	108dfc04 	addi	r2,r2,14320
 4025a28:	10800017 	ldw	r2,0(r2)
 4025a2c:	10000826 	beq	r2,zero,4025a50 <udp4_sockbind+0x168>
 4025a30:	1007883a 	mov	r3,r2
        if (ifp->n_ipaddr == lhost)
 4025a34:	10800a17 	ldw	r2,40(r2)
 4025a38:	1140031e 	bne	r2,r5,4025a48 <udp4_sockbind+0x160>
 4025a3c:	00000606 	br	4025a58 <udp4_sockbind+0x170>
 4025a40:	18800a17 	ldw	r2,40(r3)
 4025a44:	28800426 	beq	r5,r2,4025a58 <udp4_sockbind+0x170>
    else
    {
      lhost = sin->sin_addr.s_addr;
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4025a48:	18c00017 	ldw	r3,0(r3)
 4025a4c:	183ffc1e 	bne	r3,zero,4025a40 <udp4_sockbind+0x158>
    udpconn->u_fport = fport;
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
    so->so_state |= SS_ISCONNECTED;
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
 4025a50:	00801f44 	movi	r2,125
 4025a54:	003fcf06 	br	4025994 <udp4_sockbind+0xac>
    }

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
 4025a58:	a0800417 	ldw	r2,16(r20)
 4025a5c:	1080010c 	andi	r2,r2,4
 4025a60:	10000a1e 	bne	r2,zero,4025a8c <udp4_sockbind+0x1a4>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 4025a64:	00810134 	movhi	r2,1028
 4025a68:	10a92704 	addi	r2,r2,-23396
 4025a6c:	10c00017 	ldw	r3,0(r2)
 4025a70:	18000626 	beq	r3,zero,4025a8c <udp4_sockbind+0x1a4>
 4025a74:	313fffcc 	andi	r4,r6,65535
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
 4025a78:	1880018b 	ldhu	r2,6(r3)
 4025a7c:	2080011e 	bne	r4,r2,4025a84 <udp4_sockbind+0x19c>
 4025a80:	88c00d1e 	bne	r17,r3,4025ab8 <udp4_sockbind+0x1d0>

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 4025a84:	18c00017 	ldw	r3,0(r3)
 4025a88:	183ffb1e 	bne	r3,zero,4025a78 <udp4_sockbind+0x190>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
          return(EADDRINUSE);
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
    udpconn->u_lhost = lhost;
 4025a8c:	0005883a 	mov	r2,zero
 4025a90:	89400315 	stw	r5,12(r17)
    if (!(so->so_options & SO_REUSEADDR))
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
          return(EADDRINUSE);
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
 4025a94:	8980018d 	sth	r6,6(r17)
 4025a98:	003fbe06 	br	4025994 <udp4_sockbind+0xac>
      else
        lport = udp_socket();
    }
    else
    {
      lport = ntohs(sin->sin_port);
 4025a9c:	1006923a 	slli	r3,r2,8
 4025aa0:	1004d23a 	srli	r2,r2,8
 4025aa4:	10ccb03a 	or	r6,r2,r3
 4025aa8:	003fdb06 	br	4025a18 <udp4_sockbind+0x130>
    if (sin->sin_port == 0)
    {
      if (udpconn->u_lport != 0)
        lport = udpconn->u_lport;
      else
        lport = udp_socket();
 4025aac:	402bc640 	call	402bc64 <udp_socket>
 4025ab0:	100d883a 	mov	r6,r2
 4025ab4:	003fd806 	br	4025a18 <udp4_sockbind+0x130>
    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
 4025ab8:	00801c04 	movi	r2,112
 4025abc:	003fb506 	br	4025994 <udp4_sockbind+0xac>

04025ac0 <udp_usrreq>:
   struct mbuf *  nam)
{
   UDPCONN udpconn = (UDPCONN)NULL;
   int   req;

   req = so->so_req;    /* get request from socket struct */
 4025ac0:	21c00717 	ldw	r7,28(r4)

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 4025ac4:	defffd04 	addi	sp,sp,-12
   UDPCONN udpconn = (UDPCONN)NULL;
   int   req;

   req = so->so_req;    /* get request from socket struct */

   switch (req) 
 4025ac8:	00800404 	movi	r2,16

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 4025acc:	dc400115 	stw	r17,4(sp)
 4025ad0:	dfc00215 	stw	ra,8(sp)
 4025ad4:	2023883a 	mov	r17,r4
   UDPCONN udpconn = (UDPCONN)NULL;
   int   req;

   req = so->so_req;    /* get request from socket struct */

   switch (req) 
 4025ad8:	11c01836 	bltu	r2,r7,4025b3c <udp_usrreq+0x7c>
 4025adc:	39c5883a 	add	r2,r7,r7
 4025ae0:	1085883a 	add	r2,r2,r2
 4025ae4:	00c100b4 	movhi	r3,1026
 4025ae8:	18d6be04 	addi	r3,r3,23288
 4025aec:	10c5883a 	add	r2,r2,r3
 4025af0:	11000017 	ldw	r4,0(r2)
 4025af4:	2000683a 	jmp	r4
 4025af8:	04025b50 	cmplti	r16,zero,2413
 4025afc:	04025c0c 	andi	r16,zero,2416
 4025b00:	04025be0 	cmpeqi	r16,zero,2415
 4025b04:	04025b3c 	xorhi	r16,zero,2412
 4025b08:	04025be0 	cmpeqi	r16,zero,2415
 4025b0c:	04025b3c 	xorhi	r16,zero,2412
 4025b10:	04025bc8 	cmpgei	r16,zero,2415
 4025b14:	04025b3c 	xorhi	r16,zero,2412
 4025b18:	04025bc8 	cmpgei	r16,zero,2415
 4025b1c:	04025ba4 	muli	r16,zero,2414
 4025b20:	04025b3c 	xorhi	r16,zero,2412
 4025b24:	04025b3c 	xorhi	r16,zero,2412
 4025b28:	04025b3c 	xorhi	r16,zero,2412
 4025b2c:	04025b3c 	xorhi	r16,zero,2412
 4025b30:	04025b3c 	xorhi	r16,zero,2412
 4025b34:	04025b7c 	xorhi	r16,zero,2413
 4025b38:	04025b7c 	xorhi	r16,zero,2413
 4025b3c:	008017c4 	movi	r2,95
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025b40:	dfc00217 	ldw	ra,8(sp)
 4025b44:	dc400117 	ldw	r17,4(sp)
 4025b48:	dec00304 	addi	sp,sp,12
 4025b4c:	f800283a 	ret

   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
 4025b50:	402bcec0 	call	402bcec <udp_maxalloc>

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
 4025b54:	88c00517 	ldw	r3,20(r17)

   switch (req) 
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
 4025b58:	88800b15 	stw	r2,44(r17)
 4025b5c:	88801315 	stw	r2,76(r17)

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
 4025b60:	00800084 	movi	r2,2
 4025b64:	18803526 	beq	r3,r2,4025c3c <udp_usrreq+0x17c>
      return EINVAL;

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
      return 0;
 4025b68:	00800584 	movi	r2,22
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025b6c:	dfc00217 	ldw	ra,8(sp)
 4025b70:	dc400117 	ldw	r17,4(sp)
 4025b74:	dec00304 	addi	sp,sp,12
 4025b78:	f800283a 	ret
      return EINVAL;

   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 4025b7c:	303ffa26 	beq	r6,zero,4025b68 <udp_usrreq+0xa8>
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 4025b80:	88c00517 	ldw	r3,20(r17)
 4025b84:	00800084 	movi	r2,2
 4025b88:	18803c26 	beq	r3,r2,4025c7c <udp_usrreq+0x1bc>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockaddr(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 4025b8c:	401c81c0 	call	401c81c <dtrap>
 4025b90:	00800584 	movi	r2,22
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025b94:	dfc00217 	ldw	ra,8(sp)
 4025b98:	dc400117 	ldw	r17,4(sp)
 4025b9c:	dec00304 	addi	sp,sp,12
 4025ba0:	f800283a 	ret
#endif
      dtrap();   /* invalid address */
      return EINVAL;
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 4025ba4:	283ff026 	beq	r5,zero,4025b68 <udp_usrreq+0xa8>
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 4025ba8:	88c00517 	ldw	r3,20(r17)
 4025bac:	00800084 	movi	r2,2
 4025bb0:	18bff61e 	bne	r3,r2,4025b8c <udp_usrreq+0xcc>
        return udp4_socksend(so, m, nam );
 4025bb4:	8809883a 	mov	r4,r17
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025bb8:	dfc00217 	ldw	ra,8(sp)
 4025bbc:	dc400117 	ldw	r17,4(sp)
 4025bc0:	dec00304 	addi	sp,sp,12
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
        return udp4_socksend(so, m, nam );
 4025bc4:	40256bc1 	jmpi	40256bc <udp4_socksend>
      dtrap();   /* invalid address */
      return EINVAL;

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 4025bc8:	401c81c0 	call	401c81c <dtrap>
 4025bcc:	0005883a 	mov	r2,zero
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025bd0:	dfc00217 	ldw	ra,8(sp)
 4025bd4:	dc400117 	ldw	r17,4(sp)
 4025bd8:	dec00304 	addi	sp,sp,12
 4025bdc:	f800283a 	ret
   case PRU_CONNECT:
      /* Install foreign port for UDP, making a virtual connection */
      /* fall to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 4025be0:	303fe126 	beq	r6,zero,4025b68 <udp_usrreq+0xa8>
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 4025be4:	88c00517 	ldw	r3,20(r17)
 4025be8:	00800084 	movi	r2,2
 4025bec:	18bfe71e 	bne	r3,r2,4025b8c <udp_usrreq+0xcc>
        return udp4_sockbind(so, nam, req );
 4025bf0:	300b883a 	mov	r5,r6
 4025bf4:	8809883a 	mov	r4,r17
 4025bf8:	380d883a 	mov	r6,r7
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025bfc:	dfc00217 	ldw	ra,8(sp)
 4025c00:	dc400117 	ldw	r17,4(sp)
 4025c04:	dec00304 	addi	sp,sp,12
      /* do bind parameters lookups and tests */
      if (nam == NULL)
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
        return udp4_sockbind(so, nam, req );
 4025c08:	40258e81 	jmpi	40258e8 <udp4_sockbind>
      if (!udpconn)
         return(EINVAL);
      return 0;
   case PRU_DETACH:
      /* delete the NetPort UDP connection */
      udpconn = udp_lookup(so);
 4025c0c:	8809883a 	mov	r4,r17
 4025c10:	40255a80 	call	40255a8 <udp_lookup>
 4025c14:	1023883a 	mov	r17,r2
      if (!udpconn)
 4025c18:	103fd326 	beq	r2,zero,4025b68 <udp_usrreq+0xa8>
         return(EINVAL);
      /* unlock the net resource; UDP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 4025c1c:	0009883a 	mov	r4,zero
 4025c20:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      udp_close(udpconn);
 4025c24:	8809883a 	mov	r4,r17
 4025c28:	401c36c0 	call	401c36c <udp_close>
      LOCK_NET_RESOURCE(NET_RESID);
 4025c2c:	0009883a 	mov	r4,zero
 4025c30:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      dtrap();   /* invalid address */
      return EINVAL;

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 4025c34:	0005883a 	mov	r2,zero
 4025c38:	003fe506 	br	4025bd0 <udp_usrreq+0x110>

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
        UNLOCK_NET_RESOURCE(NET_RESID);
 4025c3c:	0009883a 	mov	r4,zero
 4025c40:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
        udpconn = udp_open(0L, 0, udp_socket(), udp_soinput, so);
 4025c44:	402bc640 	call	402bc64 <udp_socket>
 4025c48:	0009883a 	mov	r4,zero
 4025c4c:	11bfffcc 	andi	r6,r2,65535
 4025c50:	000b883a 	mov	r5,zero
 4025c54:	01c100b4 	movhi	r7,1026
 4025c58:	39d72604 	addi	r7,r7,23704
 4025c5c:	dc400015 	stw	r17,0(sp)
 4025c60:	401c4080 	call	401c408 <udp_open>
 4025c64:	1023883a 	mov	r17,r2
        LOCK_NET_RESOURCE(NET_RESID);
 4025c68:	0009883a 	mov	r4,zero
 4025c6c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
        UNLOCK_NET_RESOURCE(NET_RESID);
        udpconn = udp6_open(0L, 0, udp_socket(), udp6_soinput, so);
        LOCK_NET_RESOURCE(NET_RESID);
      }
#endif
      if (!udpconn)
 4025c70:	883fbd26 	beq	r17,zero,4025b68 <udp_usrreq+0xa8>
      dtrap();   /* invalid address */
      return EINVAL;

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 4025c74:	0005883a 	mov	r2,zero
 4025c78:	003fd506 	br	4025bd0 <udp_usrreq+0x110>
   case PRU_PEERADDR:
      if (nam == NULL)
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
        return udp4_sockaddr(so, nam, req );
 4025c7c:	300b883a 	mov	r5,r6
 4025c80:	8809883a 	mov	r4,r17
 4025c84:	380d883a 	mov	r6,r7
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
   }
}
 4025c88:	dfc00217 	ldw	ra,8(sp)
 4025c8c:	dc400117 	ldw	r17,4(sp)
 4025c90:	dec00304 	addi	sp,sp,12
   case PRU_PEERADDR:
      if (nam == NULL)
         return(EINVAL);
#ifdef IP_V4
      if (so->so_domain == AF_INET){
        return udp4_sockaddr(so, nam, req );
 4025c94:	40255d41 	jmpi	40255d4 <udp4_sockaddr>

04025c98 <udp_soinput>:
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
 4025c98:	defff704 	addi	sp,sp,-36
 4025c9c:	dc400515 	stw	r17,20(sp)
 4025ca0:	dc000415 	stw	r16,16(sp)
 4025ca4:	2823883a 	mov	r17,r5
 4025ca8:	2021883a 	mov	r16,r4
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
 4025cac:	0009883a 	mov	r4,zero
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
 4025cb0:	dfc00815 	stw	ra,32(sp)
 4025cb4:	dcc00715 	stw	r19,28(sp)
 4025cb8:	dc800615 	stw	r18,24(sp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
 4025cbc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 4025cc0:	88800a17 	ldw	r2,40(r17)
 4025cc4:	80c00417 	ldw	r3,16(r16)
 4025cc8:	89800b17 	ldw	r6,44(r17)
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 4025ccc:	000b883a 	mov	r5,zero
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 4025cd0:	10c5883a 	add	r2,r2,r3
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 4025cd4:	01000044 	movi	r4,1
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 4025cd8:	11800a36 	bltu	r2,r6,4025d04 <udp_soinput+0x6c>
       */
      m_in->pkt = NULL;
      /* free only the mbuf itself */
      m_free(m_in);
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 4025cdc:	0009883a 	mov	r4,zero
 4025ce0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4025ce4:	00801a44 	movi	r2,105

   sorwakeup(so);    /* wake up selects too */

   UNLOCK_NET_RESOURCE(NET_RESID);
   return 0;
}
 4025ce8:	dfc00817 	ldw	ra,32(sp)
 4025cec:	dcc00717 	ldw	r19,28(sp)
 4025cf0:	dc800617 	ldw	r18,24(sp)
 4025cf4:	dc400517 	ldw	r17,20(sp)
 4025cf8:	dc000417 	ldw	r16,16(sp)
 4025cfc:	dec00904 	addi	sp,sp,36
 4025d00:	f800283a 	ret
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 4025d04:	401dad40 	call	401dad4 <m_getnbuf>
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 4025d08:	8cc00a04 	addi	r19,r17,40
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 4025d0c:	1025883a 	mov	r18,r2
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 4025d10:	100d883a 	mov	r6,r2
 4025d14:	d80b883a 	mov	r5,sp
 4025d18:	9809883a 	mov	r4,r19
      return ENOBUFS;
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
   if (!m_in)
 4025d1c:	103fef26 	beq	r2,zero,4025cdc <udp_soinput+0x44>
      return ENOBUFS;
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
 4025d20:	80800317 	ldw	r2,12(r16)
   m_in->m_len = pkt->nb_plen;
 4025d24:	81c00417 	ldw	r7,16(r16)
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 4025d28:	82000717 	ldw	r8,28(r16)
      return ENOBUFS;
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
 4025d2c:	90800315 	stw	r2,12(r18)
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;
 4025d30:	80c00117 	ldw	r3,4(r16)
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
 4025d34:	91c00215 	stw	r7,8(r18)
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;
 4025d38:	80800217 	ldw	r2,8(r16)

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;
 4025d3c:	90c00415 	stw	r3,16(r18)
   m_in->m_memsz = pkt->nb_blen;

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
 4025d40:	81c00317 	ldw	r7,12(r16)
   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
   m_in->m_data = pkt->nb_prot;
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;
 4025d44:	90800515 	stw	r2,20(r18)
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
 4025d48:	94000115 	stw	r16,4(r18)
   m_in->m_memsz = pkt->nb_blen;

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
 4025d4c:	38fffe0b 	ldhu	r3,-8(r7)
   sin.sin_family = AF_INET;
 4025d50:	00800084 	movi	r2,2
   m_in->m_len = pkt->nb_plen;
   m_in->m_base = pkt->nb_buff;
   m_in->m_memsz = pkt->nb_blen;

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 4025d54:	da000115 	stw	r8,4(sp)
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
 4025d58:	180e923a 	slli	r7,r3,8
 4025d5c:	1806d23a 	srli	r3,r3,8
   sin.sin_family = AF_INET;
 4025d60:	d880000d 	sth	r2,0(sp)
   m_in->m_memsz = pkt->nb_blen;

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
 4025d64:	19c6b03a 	or	r3,r3,r7
 4025d68:	d8c0008d 	sth	r3,2(sp)
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 4025d6c:	40210680 	call	4021068 <sbappendaddr>
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
      /* free only the mbuf itself */
      m_free(m_in);
 4025d70:	9009883a 	mov	r4,r18
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
   sin.sin_port = htons(udpp->ud_srcp);
   sin.sin_family = AF_INET;

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 4025d74:	1000031e 	bne	r2,zero,4025d84 <udp_soinput+0xec>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
 4025d78:	90000115 	stw	zero,4(r18)
      /* free only the mbuf itself */
      m_free(m_in);
 4025d7c:	401d6500 	call	401d650 <m_free>
 4025d80:	003fd606 	br	4025cdc <udp_soinput+0x44>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ENOBUFS;
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 4025d84:	9809883a 	mov	r4,r19
 4025d88:	401a4380 	call	401a438 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 4025d8c:	980b883a 	mov	r5,r19
 4025d90:	8809883a 	mov	r4,r17
 4025d94:	40211d80 	call	40211d8 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 4025d98:	0009883a 	mov	r4,zero
 4025d9c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4025da0:	0005883a 	mov	r2,zero
 4025da4:	003fd006 	br	4025ce8 <udp_soinput+0x50>

04025da8 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 4025da8:	00810134 	movhi	r2,1028
 4025dac:	10a8f004 	addi	r2,r2,-23616
 4025db0:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4025db4:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 4025db8:	00bfde84 	movi	r2,-134
 4025dbc:	1800011e 	bne	r3,zero,4025dc4 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
 4025dc0:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
 4025dc4:	00bffa84 	movi	r2,-22
 4025dc8:	203ffd26 	beq	r4,zero,4025dc0 <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
 4025dcc:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 4025dd0:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025dd4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4025dd8:	00bfff84 	movi	r2,-2
 4025ddc:	3084703a 	and	r2,r6,r2
 4025de0:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4025de4:	00c10134 	movhi	r3,1028
 4025de8:	18e8f104 	addi	r3,r3,-23612
 4025dec:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 4025df0:	20800044 	addi	r2,r4,1
 4025df4:	2885883a 	add	r2,r5,r2
 4025df8:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4025dfc:	11000d2e 	bgeu	r2,r4,4025e34 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
 4025e00:	00800044 	movi	r2,1
 4025e04:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4025e08:	00810134 	movhi	r2,1028
 4025e0c:	10a10204 	addi	r2,r2,-31736
  entry->next     = list->next;
 4025e10:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4025e14:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
 4025e18:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
 4025e1c:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
 4025e20:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 4025e24:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4025e28:	3001703a 	wrctl	status,r6
 4025e2c:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
 4025e30:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
 4025e34:	40000405 	stb	zero,16(r8)
 4025e38:	003ff306 	br	4025e08 <alt_alarm_start+0x60>

04025e3c <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4025e3c:	defffd04 	addi	sp,sp,-12
 4025e40:	dc000015 	stw	r16,0(sp)
 4025e44:	dfc00215 	stw	ra,8(sp)
 4025e48:	dc400115 	stw	r17,4(sp)
 4025e4c:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4025e50:	20001516 	blt	r4,zero,4025ea8 <alt_close+0x6c>
 4025e54:	20c00324 	muli	r3,r4,12
 4025e58:	00810134 	movhi	r2,1028
 4025e5c:	10a03904 	addi	r2,r2,-32540
 4025e60:	1887883a 	add	r3,r3,r2

  if (fd)
 4025e64:	18001026 	beq	r3,zero,4025ea8 <alt_close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4025e68:	18800017 	ldw	r2,0(r3)
 4025e6c:	10800417 	ldw	r2,16(r2)
 4025e70:	10001c26 	beq	r2,zero,4025ee4 <alt_close+0xa8>
 4025e74:	1809883a 	mov	r4,r3
 4025e78:	103ee83a 	callr	r2
 4025e7c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4025e80:	8009883a 	mov	r4,r16
 4025e84:	40266840 	call	4026684 <alt_release_fd>
    if (rval < 0)
 4025e88:	88001b16 	blt	r17,zero,4025ef8 <alt_close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4025e8c:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 4025e90:	1805883a 	mov	r2,r3
 4025e94:	dfc00217 	ldw	ra,8(sp)
 4025e98:	dc400117 	ldw	r17,4(sp)
 4025e9c:	dc000017 	ldw	r16,0(sp)
 4025ea0:	dec00304 	addi	sp,sp,12
 4025ea4:	f800283a 	ret
 4025ea8:	00810134 	movhi	r2,1028
 4025eac:	10a13f04 	addi	r2,r2,-31492
 4025eb0:	10800017 	ldw	r2,0(r2)
 4025eb4:	10000d26 	beq	r2,zero,4025eec <alt_close+0xb0>
 4025eb8:	103ee83a 	callr	r2
 4025ebc:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4025ec0:	00ffffc4 	movi	r3,-1
 4025ec4:	00801444 	movi	r2,81
 4025ec8:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
 4025ecc:	1805883a 	mov	r2,r3
 4025ed0:	dfc00217 	ldw	ra,8(sp)
 4025ed4:	dc400117 	ldw	r17,4(sp)
 4025ed8:	dc000017 	ldw	r16,0(sp)
 4025edc:	dec00304 	addi	sp,sp,12
 4025ee0:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4025ee4:	40266840 	call	4026684 <alt_release_fd>
 4025ee8:	003fe806 	br	4025e8c <alt_close+0x50>
 4025eec:	01010134 	movhi	r4,1028
 4025ef0:	2128e504 	addi	r4,r4,-23660
 4025ef4:	003ff206 	br	4025ec0 <alt_close+0x84>
 4025ef8:	00810134 	movhi	r2,1028
 4025efc:	10a13f04 	addi	r2,r2,-31492
 4025f00:	10800017 	ldw	r2,0(r2)
 4025f04:	10000626 	beq	r2,zero,4025f20 <alt_close+0xe4>
 4025f08:	103ee83a 	callr	r2
 4025f0c:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
 4025f10:	0445c83a 	sub	r2,zero,r17
 4025f14:	00ffffc4 	movi	r3,-1
 4025f18:	20800015 	stw	r2,0(r4)
 4025f1c:	003fdc06 	br	4025e90 <alt_close+0x54>
 4025f20:	01010134 	movhi	r4,1028
 4025f24:	2128e504 	addi	r4,r4,-23660
 4025f28:	003ff906 	br	4025f10 <alt_close+0xd4>

04025f2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4025f2c:	0005883a 	mov	r2,zero
 4025f30:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4025f34:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4025f38:	10800804 	addi	r2,r2,32
 4025f3c:	10fffd1e 	bne	r2,r3,4025f34 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4025f40:	f800283a 	ret

04025f44 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4025f44:	3005883a 	mov	r2,r6
 4025f48:	f800283a 	ret

04025f4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4025f4c:	defff904 	addi	sp,sp,-28
 4025f50:	dfc00615 	stw	ra,24(sp)
 4025f54:	df000515 	stw	fp,20(sp)
 4025f58:	df000504 	addi	fp,sp,20
 4025f5c:	e13ffd15 	stw	r4,-12(fp)
 4025f60:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4025f64:	e0bffd17 	ldw	r2,-12(fp)
 4025f68:	1005003a 	cmpeq	r2,r2,zero
 4025f6c:	1000041e 	bne	r2,zero,4025f80 <alt_dev_llist_insert+0x34>
 4025f70:	e0bffd17 	ldw	r2,-12(fp)
 4025f74:	10800217 	ldw	r2,8(r2)
 4025f78:	1004c03a 	cmpne	r2,r2,zero
 4025f7c:	1000071e 	bne	r2,zero,4025f9c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4025f80:	40260000 	call	4026000 <alt_get_errno>
 4025f84:	1007883a 	mov	r3,r2
 4025f88:	00800584 	movi	r2,22
 4025f8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4025f90:	00bffa84 	movi	r2,-22
 4025f94:	e0bfff15 	stw	r2,-4(fp)
 4025f98:	00001306 	br	4025fe8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4025f9c:	e0fffd17 	ldw	r3,-12(fp)
 4025fa0:	e0bffe17 	ldw	r2,-8(fp)
 4025fa4:	e0bffb15 	stw	r2,-20(fp)
 4025fa8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4025fac:	e0fffc17 	ldw	r3,-16(fp)
 4025fb0:	e0bffb17 	ldw	r2,-20(fp)
 4025fb4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4025fb8:	e0bffb17 	ldw	r2,-20(fp)
 4025fbc:	10c00017 	ldw	r3,0(r2)
 4025fc0:	e0bffc17 	ldw	r2,-16(fp)
 4025fc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4025fc8:	e0bffb17 	ldw	r2,-20(fp)
 4025fcc:	10c00017 	ldw	r3,0(r2)
 4025fd0:	e0bffc17 	ldw	r2,-16(fp)
 4025fd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4025fd8:	e0fffb17 	ldw	r3,-20(fp)
 4025fdc:	e0bffc17 	ldw	r2,-16(fp)
 4025fe0:	18800015 	stw	r2,0(r3)

  return 0;  
 4025fe4:	e03fff15 	stw	zero,-4(fp)
 4025fe8:	e0bfff17 	ldw	r2,-4(fp)
}
 4025fec:	e037883a 	mov	sp,fp
 4025ff0:	dfc00117 	ldw	ra,4(sp)
 4025ff4:	df000017 	ldw	fp,0(sp)
 4025ff8:	dec00204 	addi	sp,sp,8
 4025ffc:	f800283a 	ret

04026000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026000:	defffd04 	addi	sp,sp,-12
 4026004:	dfc00215 	stw	ra,8(sp)
 4026008:	df000115 	stw	fp,4(sp)
 402600c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4026010:	00810134 	movhi	r2,1028
 4026014:	10a13f04 	addi	r2,r2,-31492
 4026018:	10800017 	ldw	r2,0(r2)
 402601c:	1005003a 	cmpeq	r2,r2,zero
 4026020:	1000061e 	bne	r2,zero,402603c <alt_get_errno+0x3c>
 4026024:	00810134 	movhi	r2,1028
 4026028:	10a13f04 	addi	r2,r2,-31492
 402602c:	10800017 	ldw	r2,0(r2)
 4026030:	103ee83a 	callr	r2
 4026034:	e0bfff15 	stw	r2,-4(fp)
 4026038:	00000306 	br	4026048 <alt_get_errno+0x48>
 402603c:	00810134 	movhi	r2,1028
 4026040:	10a8e504 	addi	r2,r2,-23660
 4026044:	e0bfff15 	stw	r2,-4(fp)
 4026048:	e0bfff17 	ldw	r2,-4(fp)
}
 402604c:	e037883a 	mov	sp,fp
 4026050:	dfc00117 	ldw	ra,4(sp)
 4026054:	df000017 	ldw	fp,0(sp)
 4026058:	dec00204 	addi	sp,sp,8
 402605c:	f800283a 	ret

04026060 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4026060:	defffd04 	addi	sp,sp,-12
 4026064:	dfc00215 	stw	ra,8(sp)
 4026068:	df000115 	stw	fp,4(sp)
 402606c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4026070:	00bfff04 	movi	r2,-4
 4026074:	00c100f4 	movhi	r3,1027
 4026078:	18c4ce04 	addi	r3,r3,4920
 402607c:	1885883a 	add	r2,r3,r2
 4026080:	e0bfff15 	stw	r2,-4(fp)
 4026084:	00000606 	br	40260a0 <_do_ctors+0x40>
        (*ctor) (); 
 4026088:	e0bfff17 	ldw	r2,-4(fp)
 402608c:	10800017 	ldw	r2,0(r2)
 4026090:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4026094:	e0bfff17 	ldw	r2,-4(fp)
 4026098:	10bfff04 	addi	r2,r2,-4
 402609c:	e0bfff15 	stw	r2,-4(fp)
 40260a0:	e0ffff17 	ldw	r3,-4(fp)
 40260a4:	008100f4 	movhi	r2,1027
 40260a8:	1084cd04 	addi	r2,r2,4916
 40260ac:	18bff62e 	bgeu	r3,r2,4026088 <_do_ctors+0x28>
        (*ctor) (); 
}
 40260b0:	e037883a 	mov	sp,fp
 40260b4:	dfc00117 	ldw	ra,4(sp)
 40260b8:	df000017 	ldw	fp,0(sp)
 40260bc:	dec00204 	addi	sp,sp,8
 40260c0:	f800283a 	ret

040260c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40260c4:	defffd04 	addi	sp,sp,-12
 40260c8:	dfc00215 	stw	ra,8(sp)
 40260cc:	df000115 	stw	fp,4(sp)
 40260d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40260d4:	00bfff04 	movi	r2,-4
 40260d8:	00c100f4 	movhi	r3,1027
 40260dc:	18c4ce04 	addi	r3,r3,4920
 40260e0:	1885883a 	add	r2,r3,r2
 40260e4:	e0bfff15 	stw	r2,-4(fp)
 40260e8:	00000606 	br	4026104 <_do_dtors+0x40>
        (*dtor) (); 
 40260ec:	e0bfff17 	ldw	r2,-4(fp)
 40260f0:	10800017 	ldw	r2,0(r2)
 40260f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40260f8:	e0bfff17 	ldw	r2,-4(fp)
 40260fc:	10bfff04 	addi	r2,r2,-4
 4026100:	e0bfff15 	stw	r2,-4(fp)
 4026104:	e0ffff17 	ldw	r3,-4(fp)
 4026108:	008100f4 	movhi	r2,1027
 402610c:	1084ce04 	addi	r2,r2,4920
 4026110:	18bff62e 	bgeu	r3,r2,40260ec <_do_dtors+0x28>
        (*dtor) (); 
}
 4026114:	e037883a 	mov	sp,fp
 4026118:	dfc00117 	ldw	ra,4(sp)
 402611c:	df000017 	ldw	fp,0(sp)
 4026120:	dec00204 	addi	sp,sp,8
 4026124:	f800283a 	ret

04026128 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4026128:	defffb04 	addi	sp,sp,-20
 402612c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
 4026130:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4026134:	dcc00315 	stw	r19,12(sp)
 4026138:	dc400115 	stw	r17,4(sp)
 402613c:	dfc00415 	stw	ra,16(sp)
 4026140:	2823883a 	mov	r17,r5
 4026144:	dc800215 	stw	r18,8(sp)
 4026148:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 402614c:	400472c0 	call	400472c <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4026150:	84401126 	beq	r16,r17,4026198 <alt_find_dev+0x70>
 4026154:	14800044 	addi	r18,r2,1
 4026158:	00000206 	br	4026164 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 402615c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4026160:	84400d26 	beq	r16,r17,4026198 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4026164:	81000217 	ldw	r4,8(r16)
 4026168:	980b883a 	mov	r5,r19
 402616c:	900d883a 	mov	r6,r18
 4026170:	40308b80 	call	40308b8 <memcmp>
 4026174:	103ff91e 	bne	r2,zero,402615c <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
 4026178:	8005883a 	mov	r2,r16
 402617c:	dfc00417 	ldw	ra,16(sp)
 4026180:	dcc00317 	ldw	r19,12(sp)
 4026184:	dc800217 	ldw	r18,8(sp)
 4026188:	dc400117 	ldw	r17,4(sp)
 402618c:	dc000017 	ldw	r16,0(sp)
 4026190:	dec00504 	addi	sp,sp,20
 4026194:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4026198:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
 402619c:	8005883a 	mov	r2,r16
 40261a0:	dfc00417 	ldw	ra,16(sp)
 40261a4:	dcc00317 	ldw	r19,12(sp)
 40261a8:	dc800217 	ldw	r18,8(sp)
 40261ac:	dc400117 	ldw	r17,4(sp)
 40261b0:	dc000017 	ldw	r16,0(sp)
 40261b4:	dec00504 	addi	sp,sp,20
 40261b8:	f800283a 	ret

040261bc <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40261bc:	0009883a 	mov	r4,zero
 40261c0:	01440004 	movi	r5,4096
 40261c4:	402fa341 	jmpi	402fa34 <alt_icache_flush>

040261c8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40261c8:	000530fa 	rdctl	r2,ienable
 40261cc:	00c00044 	movi	r3,1
 40261d0:	1946983a 	sll	r3,r3,r5
 40261d4:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
 40261d8:	1004c03a 	cmpne	r2,r2,zero
 40261dc:	f800283a 	ret

040261e0 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40261e0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40261e4:	00bfff84 	movi	r2,-2
 40261e8:	3084703a 	and	r2,r6,r2
 40261ec:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 40261f0:	01010134 	movhi	r4,1028
 40261f4:	21294204 	addi	r4,r4,-23288
 40261f8:	00800044 	movi	r2,1
 40261fc:	20c00017 	ldw	r3,0(r4)
 4026200:	1144983a 	sll	r2,r2,r5
 4026204:	10c4b03a 	or	r2,r2,r3
 4026208:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402620c:	20c00017 	ldw	r3,0(r4)
 4026210:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026214:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 4026218:	0005883a 	mov	r2,zero
 402621c:	f800283a 	ret

04026220 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026220:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026224:	00bfff84 	movi	r2,-2
 4026228:	3084703a 	and	r2,r6,r2
 402622c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 4026230:	01010134 	movhi	r4,1028
 4026234:	21294204 	addi	r4,r4,-23288
 4026238:	00bfff84 	movi	r2,-2
 402623c:	20c00017 	ldw	r3,0(r4)
 4026240:	1144183a 	rol	r2,r2,r5
 4026244:	10c4703a 	and	r2,r2,r3
 4026248:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402624c:	20c00017 	ldw	r3,0(r4)
 4026250:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026254:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 4026258:	0005883a 	mov	r2,zero
 402625c:	f800283a 	ret

04026260 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4026260:	40262641 	jmpi	4026264 <alt_iic_isr_register>

04026264 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4026264:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4026268:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402626c:	dfc00115 	stw	ra,4(sp)
 4026270:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4026274:	023ffa84 	movi	r8,-22
 4026278:	1140050e 	bge	r2,r5,4026290 <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
 402627c:	4005883a 	mov	r2,r8
 4026280:	dfc00117 	ldw	ra,4(sp)
 4026284:	dc000017 	ldw	r16,0(sp)
 4026288:	dec00204 	addi	sp,sp,8
 402628c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026290:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026294:	00bfff84 	movi	r2,-2
 4026298:	8084703a 	and	r2,r16,r2
 402629c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 40262a0:	280690fa 	slli	r3,r5,3
 40262a4:	00810134 	movhi	r2,1028
 40262a8:	108d6304 	addi	r2,r2,13708
 40262ac:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
 40262b0:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 40262b4:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40262b8:	30000826 	beq	r6,zero,40262dc <alt_iic_isr_register+0x78>
 40262bc:	40261e00 	call	40261e0 <alt_ic_irq_enable>
 40262c0:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40262c4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 40262c8:	4005883a 	mov	r2,r8
 40262cc:	dfc00117 	ldw	ra,4(sp)
 40262d0:	dc000017 	ldw	r16,0(sp)
 40262d4:	dec00204 	addi	sp,sp,8
 40262d8:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40262dc:	40262200 	call	4026220 <alt_ic_irq_disable>
 40262e0:	1011883a 	mov	r8,r2
 40262e4:	8001703a 	wrctl	status,r16
 40262e8:	003ff706 	br	40262c8 <alt_iic_isr_register+0x64>

040262ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40262ec:	defffe04 	addi	sp,sp,-8
 40262f0:	dc000015 	stw	r16,0(sp)
 40262f4:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
 40262f8:	2809883a 	mov	r4,r5
 40262fc:	300b883a 	mov	r5,r6
 4026300:	380d883a 	mov	r6,r7
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4026304:	dfc00115 	stw	ra,4(sp)
  int old;

  old = open (name, flags, mode);
 4026308:	40263e80 	call	40263e8 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 402630c:	11400324 	muli	r5,r2,12
 4026310:	00c10134 	movhi	r3,1028
 4026314:	18e03904 	addi	r3,r3,-32540
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4026318:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 402631c:	28cb883a 	add	r5,r5,r3
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
 4026320:	10000a16 	blt	r2,zero,402634c <alt_open_fd+0x60>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4026324:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4026328:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
 402632c:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4026330:	80800215 	stw	r2,8(r16)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4026334:	80c00015 	stw	r3,0(r16)
    fd->priv     = alt_fd_list[old].priv;
 4026338:	81400115 	stw	r5,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
 402633c:	dfc00117 	ldw	ra,4(sp)
 4026340:	dc000017 	ldw	r16,0(sp)
 4026344:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4026348:	40266841 	jmpi	4026684 <alt_release_fd>
  }
} 
 402634c:	dfc00117 	ldw	ra,4(sp)
 4026350:	dc000017 	ldw	r16,0(sp)
 4026354:	dec00204 	addi	sp,sp,8
 4026358:	f800283a 	ret

0402635c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402635c:	defffa04 	addi	sp,sp,-24
 4026360:	dd800415 	stw	r22,16(sp)
 4026364:	dc800215 	stw	r18,8(sp)
 4026368:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402636c:	04807fc4 	movi	r18,511
 4026370:	04010134 	movhi	r16,1028
 4026374:	84203c04 	addi	r16,r16,-32528
 4026378:	05800044 	movi	r22,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402637c:	dd000315 	stw	r20,12(sp)
 4026380:	dc400115 	stw	r17,4(sp)
 4026384:	2829883a 	mov	r20,r5
 4026388:	3023883a 	mov	r17,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402638c:	200b883a 	mov	r5,r4
 4026390:	b00d883a 	mov	r6,r22
 4026394:	8009883a 	mov	r4,r16
 4026398:	900f883a 	mov	r7,r18
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402639c:	dfc00515 	stw	ra,20(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40263a0:	40262ec0 	call	40262ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40263a4:	a00b883a 	mov	r5,r20
 40263a8:	813ffd04 	addi	r4,r16,-12
 40263ac:	900f883a 	mov	r7,r18
 40263b0:	000d883a 	mov	r6,zero
 40263b4:	40262ec0 	call	40262ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40263b8:	81000304 	addi	r4,r16,12
 40263bc:	880b883a 	mov	r5,r17
 40263c0:	b00d883a 	mov	r6,r22
 40263c4:	900f883a 	mov	r7,r18
}  
 40263c8:	dfc00517 	ldw	ra,20(sp)
 40263cc:	dd800417 	ldw	r22,16(sp)
 40263d0:	dd000317 	ldw	r20,12(sp)
 40263d4:	dc800217 	ldw	r18,8(sp)
 40263d8:	dc400117 	ldw	r17,4(sp)
 40263dc:	dc000017 	ldw	r16,0(sp)
 40263e0:	dec00604 	addi	sp,sp,24
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40263e4:	40262ec1 	jmpi	40262ec <alt_open_fd>

040263e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40263e8:	defff904 	addi	sp,sp,-28
 40263ec:	dcc00315 	stw	r19,12(sp)
 40263f0:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40263f4:	01410134 	movhi	r5,1028
 40263f8:	29613c04 	addi	r5,r5,-31504
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40263fc:	dd400515 	stw	r21,20(sp)
 4026400:	dd000415 	stw	r20,16(sp)
 4026404:	dc400115 	stw	r17,4(sp)
 4026408:	dfc00615 	stw	ra,24(sp)
 402640c:	dc800215 	stw	r18,8(sp)
 4026410:	dc000015 	stw	r16,0(sp)
 4026414:	302b883a 	mov	r21,r6
 4026418:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402641c:	40261280 	call	4026128 <alt_find_dev>
 4026420:	1023883a 	mov	r17,r2
 4026424:	10004726 	beq	r2,zero,4026544 <open+0x15c>
 4026428:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 402642c:	8809883a 	mov	r4,r17
 4026430:	402f9540 	call	402f954 <alt_get_fd>
 4026434:	1021883a 	mov	r16,r2
 4026438:	10002d16 	blt	r2,zero,40264f0 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 402643c:	10800324 	muli	r2,r2,12
 4026440:	01410134 	movhi	r5,1028
 4026444:	29603904 	addi	r5,r5,-32540
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4026448:	00d00034 	movhi	r3,16384
 402644c:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4026450:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4026454:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4026458:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 402645c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4026460:	1000121e 	bne	r2,zero,40264ac <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4026464:	00810134 	movhi	r2,1028
 4026468:	10a13e04 	addi	r2,r2,-31496
 402646c:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4026470:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4026474:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4026478:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 402647c:	20800215 	stw	r2,8(r4)
 4026480:	00000206 	br	402648c <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4026484:	29400304 	addi	r5,r5,12
 4026488:	38c00836 	bltu	r7,r3,40264ac <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402648c:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4026490:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4026494:	11bffb1e 	bne	r2,r6,4026484 <open+0x9c>
 4026498:	28800217 	ldw	r2,8(r5)
 402649c:	103ff90e 	bge	r2,zero,4026484 <open+0x9c>
 40264a0:	293ff826 	beq	r5,r4,4026484 <open+0x9c>
 40264a4:	04400344 	movi	r17,13
 40264a8:	00001206 	br	40264f4 <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40264ac:	88800317 	ldw	r2,12(r17)
 40264b0:	10000526 	beq	r2,zero,40264c8 <open+0xe0>
 40264b4:	a00b883a 	mov	r5,r20
 40264b8:	980d883a 	mov	r6,r19
 40264bc:	a80f883a 	mov	r7,r21
 40264c0:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40264c4:	10001516 	blt	r2,zero,402651c <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
 40264c8:	8005883a 	mov	r2,r16
 40264cc:	dfc00617 	ldw	ra,24(sp)
 40264d0:	dd400517 	ldw	r21,20(sp)
 40264d4:	dd000417 	ldw	r20,16(sp)
 40264d8:	dcc00317 	ldw	r19,12(sp)
 40264dc:	dc800217 	ldw	r18,8(sp)
 40264e0:	dc400117 	ldw	r17,4(sp)
 40264e4:	dc000017 	ldw	r16,0(sp)
 40264e8:	dec00704 	addi	sp,sp,28
 40264ec:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 40264f0:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 40264f4:	8009883a 	mov	r4,r16
 40264f8:	40266840 	call	4026684 <alt_release_fd>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 40264fc:	00810134 	movhi	r2,1028
 4026500:	10a13f04 	addi	r2,r2,-31492
 4026504:	10800017 	ldw	r2,0(r2)
 4026508:	10000b26 	beq	r2,zero,4026538 <open+0x150>
 402650c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
 4026510:	043fffc4 	movi	r16,-1
 4026514:	14400015 	stw	r17,0(r2)
 4026518:	003feb06 	br	40264c8 <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 402651c:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4026520:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
 4026524:	40266840 	call	4026684 <alt_release_fd>
 4026528:	00810134 	movhi	r2,1028
 402652c:	10a13f04 	addi	r2,r2,-31492
 4026530:	10800017 	ldw	r2,0(r2)
 4026534:	103ff51e 	bne	r2,zero,402650c <open+0x124>
 4026538:	00810134 	movhi	r2,1028
 402653c:	10a8e504 	addi	r2,r2,-23660
 4026540:	003ff306 	br	4026510 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4026544:	a009883a 	mov	r4,r20
 4026548:	402f8a40 	call	402f8a4 <alt_find_file>
 402654c:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4026550:	10000226 	beq	r2,zero,402655c <open+0x174>
 4026554:	04800044 	movi	r18,1
 4026558:	003fb406 	br	402642c <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
 402655c:	043fffc4 	movi	r16,-1
 4026560:	044004c4 	movi	r17,19
 4026564:	003fe306 	br	40264f4 <open+0x10c>

04026568 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4026568:	defffe04 	addi	sp,sp,-8
 402656c:	dfc00115 	stw	ra,4(sp)
 4026570:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026574:	20002516 	blt	r4,zero,402660c <alt_read+0xa4>
 4026578:	20c00324 	muli	r3,r4,12
 402657c:	00810134 	movhi	r2,1028
 4026580:	10a03904 	addi	r2,r2,-32540
 4026584:	1889883a 	add	r4,r3,r2
  
  if (fd)
 4026588:	20002026 	beq	r4,zero,402660c <alt_read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402658c:	20800217 	ldw	r2,8(r4)
 4026590:	00c00044 	movi	r3,1
 4026594:	108000cc 	andi	r2,r2,3
 4026598:	10c00b26 	beq	r2,r3,40265c8 <alt_read+0x60>
 402659c:	20800017 	ldw	r2,0(r4)
 40265a0:	10800517 	ldw	r2,20(r2)
 40265a4:	10000826 	beq	r2,zero,40265c8 <alt_read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40265a8:	103ee83a 	callr	r2
 40265ac:	1021883a 	mov	r16,r2
 40265b0:	10002716 	blt	r2,zero,4026650 <alt_read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 40265b4:	8005883a 	mov	r2,r16
 40265b8:	dfc00117 	ldw	ra,4(sp)
 40265bc:	dc000017 	ldw	r16,0(sp)
 40265c0:	dec00204 	addi	sp,sp,8
 40265c4:	f800283a 	ret
 40265c8:	00810134 	movhi	r2,1028
 40265cc:	10a13f04 	addi	r2,r2,-31492
 40265d0:	10800017 	ldw	r2,0(r2)
 40265d4:	10000a26 	beq	r2,zero,4026600 <alt_read+0x98>
 40265d8:	103ee83a 	callr	r2
 40265dc:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
 40265e0:	043fffc4 	movi	r16,-1
 40265e4:	00800344 	movi	r2,13
 40265e8:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 40265ec:	8005883a 	mov	r2,r16
 40265f0:	dfc00117 	ldw	ra,4(sp)
 40265f4:	dc000017 	ldw	r16,0(sp)
 40265f8:	dec00204 	addi	sp,sp,8
 40265fc:	f800283a 	ret
 4026600:	00c10134 	movhi	r3,1028
 4026604:	18e8e504 	addi	r3,r3,-23660
 4026608:	003ff506 	br	40265e0 <alt_read+0x78>
 402660c:	00810134 	movhi	r2,1028
 4026610:	10a13f04 	addi	r2,r2,-31492
 4026614:	10800017 	ldw	r2,0(r2)
 4026618:	10000a26 	beq	r2,zero,4026644 <alt_read+0xdc>
 402661c:	103ee83a 	callr	r2
 4026620:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4026624:	00801444 	movi	r2,81
 4026628:	043fffc4 	movi	r16,-1
 402662c:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
 4026630:	8005883a 	mov	r2,r16
 4026634:	dfc00117 	ldw	ra,4(sp)
 4026638:	dc000017 	ldw	r16,0(sp)
 402663c:	dec00204 	addi	sp,sp,8
 4026640:	f800283a 	ret
 4026644:	00c10134 	movhi	r3,1028
 4026648:	18e8e504 	addi	r3,r3,-23660
 402664c:	003ff506 	br	4026624 <alt_read+0xbc>
 4026650:	00810134 	movhi	r2,1028
 4026654:	10a13f04 	addi	r2,r2,-31492
 4026658:	10800017 	ldw	r2,0(r2)
 402665c:	10000626 	beq	r2,zero,4026678 <alt_read+0x110>
 4026660:	103ee83a 	callr	r2
 4026664:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
 4026668:	0405c83a 	sub	r2,zero,r16
 402666c:	043fffc4 	movi	r16,-1
 4026670:	18800015 	stw	r2,0(r3)
 4026674:	003fcf06 	br	40265b4 <alt_read+0x4c>
 4026678:	00c10134 	movhi	r3,1028
 402667c:	18e8e504 	addi	r3,r3,-23660
 4026680:	003ff906 	br	4026668 <alt_read+0x100>

04026684 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 4026684:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
 4026688:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 402668c:	1100050e 	bge	r2,r4,40266a4 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
 4026690:	00810134 	movhi	r2,1028
 4026694:	10a03904 	addi	r2,r2,-32540
 4026698:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
 402669c:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
 40266a0:	10000215 	stw	zero,8(r2)
 40266a4:	f800283a 	ret

040266a8 <alt_remap_cached>:
 */

void* alt_remap_cached (volatile void* ptr, alt_u32 len)
{
  return (void*) (((alt_u32) ptr) & ~BYPASS_DCACHE_MASK);
}
 40266a8:	00a00034 	movhi	r2,32768
 40266ac:	10bfffc4 	addi	r2,r2,-1
 40266b0:	2084703a 	and	r2,r4,r2
 40266b4:	f800283a 	ret

040266b8 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
 40266b8:	defffe04 	addi	sp,sp,-8
 40266bc:	dc000015 	stw	r16,0(sp)
 40266c0:	dfc00115 	stw	ra,4(sp)
 40266c4:	2021883a 	mov	r16,r4
  alt_dcache_flush (ptr, len);
 40266c8:	402f7600 	call	402f760 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
}
 40266cc:	80a00034 	orhi	r2,r16,32768
 40266d0:	dfc00117 	ldw	ra,4(sp)
 40266d4:	dc000017 	ldw	r16,0(sp)
 40266d8:	dec00204 	addi	sp,sp,8
 40266dc:	f800283a 	ret

040266e0 <alt_uncached_malloc>:
/*
 * Allocate a block of uncached memory.
 */

volatile void* alt_uncached_malloc (size_t size)
{
 40266e0:	defffd04 	addi	sp,sp,-12
 40266e4:	dfc00215 	stw	ra,8(sp)
 40266e8:	dc400115 	stw	r17,4(sp)
 40266ec:	dc000015 	stw	r16,0(sp)
 40266f0:	2023883a 	mov	r17,r4
  void* ptr;

  ptr = malloc (size);
 40266f4:	4001f4c0 	call	4001f4c <malloc>

  alt_dcache_flush (ptr, size);
 40266f8:	1009883a 	mov	r4,r2
 40266fc:	880b883a 	mov	r5,r17

volatile void* alt_uncached_malloc (size_t size)
{
  void* ptr;

  ptr = malloc (size);
 4026700:	1021883a 	mov	r16,r2

  alt_dcache_flush (ptr, size);
 4026704:	402f7600 	call	402f760 <alt_dcache_flush>

  return ptr ? (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK) : NULL;
 4026708:	0005883a 	mov	r2,zero
 402670c:	80000126 	beq	r16,zero,4026714 <alt_uncached_malloc+0x34>
 4026710:	80a00034 	orhi	r2,r16,32768
}
 4026714:	dfc00217 	ldw	ra,8(sp)
 4026718:	dc400117 	ldw	r17,4(sp)
 402671c:	dc000017 	ldw	r16,0(sp)
 4026720:	dec00304 	addi	sp,sp,12
 4026724:	f800283a 	ret

04026728 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4026728:	defff804 	addi	sp,sp,-32
 402672c:	dd400515 	stw	r21,20(sp)
 4026730:	dfc00715 	stw	ra,28(sp)
 4026734:	dd800615 	stw	r22,24(sp)
 4026738:	dd000415 	stw	r20,16(sp)
 402673c:	dcc00315 	stw	r19,12(sp)
 4026740:	dc800215 	stw	r18,8(sp)
 4026744:	dc400115 	stw	r17,4(sp)
 4026748:	dc000015 	stw	r16,0(sp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 402674c:	00810134 	movhi	r2,1028
 4026750:	10a8f644 	addi	r2,r2,-23591
 4026754:	10c00003 	ldbu	r3,0(r2)
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4026758:	202b883a 	mov	r21,r4
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 402675c:	18003026 	beq	r3,zero,4026820 <usleep+0xf8>
  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 4026760:	014003f4 	movhi	r5,15
 4026764:	29509004 	addi	r5,r5,16960
 4026768:	2149203a 	divu	r4,r4,r5
 402676c:	2145383a 	mul	r2,r4,r5
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4026770:	00c10134 	movhi	r3,1028
 4026774:	18e8f004 	addi	r3,r3,-23616
 4026778:	1d800017 	ldw	r22,0(r3)
 402677c:	a885c83a 	sub	r2,r21,r2
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4026780:	00ffffd4 	movui	r3,65535
  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 4026784:	b085383a 	mul	r2,r22,r2
 4026788:	b109383a 	mul	r4,r22,r4
 402678c:	1145203a 	divu	r2,r2,r5
 4026790:	20a5883a 	add	r18,r4,r2
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4026794:	1c802c2e 	bgeu	r3,r18,4026848 <usleep+0x120>
 4026798:	00bffff4 	movhi	r2,65535
 402679c:	9021883a 	mov	r16,r18
 40267a0:	1823883a 	mov	r17,r3
 40267a4:	90a7883a 	add	r19,r18,r2
 40267a8:	053ffff4 	movhi	r20,65535
 40267ac:	a5000044 	addi	r20,r20,1
  {
    OSTimeDly(0xffff);
 40267b0:	013fffd4 	movui	r4,65535
 40267b4:	4012fd00 	call	4012fd0 <OSTimeDly>
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 40267b8:	9c45203a 	divu	r2,r19,r17
 40267bc:	1505383a 	mul	r2,r2,r20
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
 40267c0:	8461c83a 	sub	r16,r16,r17
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 40267c4:	9085883a 	add	r2,r18,r2
 40267c8:	1445c83a 	sub	r2,r2,r17
 40267cc:	143ff81e 	bne	r2,r16,40267b0 <usleep+0x88>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 40267d0:	813fffcc 	andi	r4,r16,65535
 40267d4:	4012fd00 	call	4012fd0 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 40267d8:	008003f4 	movhi	r2,15
 40267dc:	10909004 	addi	r2,r2,16960
 40267e0:	1585203a 	divu	r2,r2,r22
 40267e4:	a889203a 	divu	r4,r21,r2
 40267e8:	2089383a 	mul	r4,r4,r2
 40267ec:	a909c83a 	sub	r4,r21,r4
 40267f0:	402f6f80 	call	402f6f8 <alt_busy_sleep>

  return 0;  
}
 40267f4:	0005883a 	mov	r2,zero
 40267f8:	dfc00717 	ldw	ra,28(sp)
 40267fc:	dd800617 	ldw	r22,24(sp)
 4026800:	dd400517 	ldw	r21,20(sp)
 4026804:	dd000417 	ldw	r20,16(sp)
 4026808:	dcc00317 	ldw	r19,12(sp)
 402680c:	dc800217 	ldw	r18,8(sp)
 4026810:	dc400117 	ldw	r17,4(sp)
 4026814:	dc000017 	ldw	r16,0(sp)
 4026818:	dec00804 	addi	sp,sp,32
 402681c:	f800283a 	ret
 4026820:	dfc00717 	ldw	ra,28(sp)
 4026824:	dd800617 	ldw	r22,24(sp)
 4026828:	dd400517 	ldw	r21,20(sp)
 402682c:	dd000417 	ldw	r20,16(sp)
 4026830:	dcc00317 	ldw	r19,12(sp)
 4026834:	dc800217 	ldw	r18,8(sp)
 4026838:	dc400117 	ldw	r17,4(sp)
 402683c:	dc000017 	ldw	r16,0(sp)
 4026840:	dec00804 	addi	sp,sp,32
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
  {
    return alt_busy_sleep (us);
 4026844:	402f6f81 	jmpi	402f6f8 <alt_busy_sleep>
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4026848:	9021883a 	mov	r16,r18
 402684c:	003fe006 	br	40267d0 <usleep+0xa8>

04026850 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4026850:	defffe04 	addi	sp,sp,-8
 4026854:	dfc00115 	stw	ra,4(sp)
 4026858:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402685c:	20002416 	blt	r4,zero,40268f0 <alt_write+0xa0>
 4026860:	20c00324 	muli	r3,r4,12
 4026864:	00810134 	movhi	r2,1028
 4026868:	10a03904 	addi	r2,r2,-32540
 402686c:	1889883a 	add	r4,r3,r2
  
  if (fd)
 4026870:	20001f26 	beq	r4,zero,40268f0 <alt_write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4026874:	20800217 	ldw	r2,8(r4)
 4026878:	108000cc 	andi	r2,r2,3
 402687c:	10000b26 	beq	r2,zero,40268ac <alt_write+0x5c>
 4026880:	20800017 	ldw	r2,0(r4)
 4026884:	10800617 	ldw	r2,24(r2)
 4026888:	10000826 	beq	r2,zero,40268ac <alt_write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402688c:	103ee83a 	callr	r2
 4026890:	1021883a 	mov	r16,r2
 4026894:	10002716 	blt	r2,zero,4026934 <alt_write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4026898:	8005883a 	mov	r2,r16
 402689c:	dfc00117 	ldw	ra,4(sp)
 40268a0:	dc000017 	ldw	r16,0(sp)
 40268a4:	dec00204 	addi	sp,sp,8
 40268a8:	f800283a 	ret
 40268ac:	00810134 	movhi	r2,1028
 40268b0:	10a13f04 	addi	r2,r2,-31492
 40268b4:	10800017 	ldw	r2,0(r2)
 40268b8:	10000a26 	beq	r2,zero,40268e4 <alt_write+0x94>
 40268bc:	103ee83a 	callr	r2
 40268c0:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 40268c4:	043fffc4 	movi	r16,-1
 40268c8:	00800344 	movi	r2,13
 40268cc:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 40268d0:	8005883a 	mov	r2,r16
 40268d4:	dfc00117 	ldw	ra,4(sp)
 40268d8:	dc000017 	ldw	r16,0(sp)
 40268dc:	dec00204 	addi	sp,sp,8
 40268e0:	f800283a 	ret
 40268e4:	00c10134 	movhi	r3,1028
 40268e8:	18e8e504 	addi	r3,r3,-23660
 40268ec:	003ff506 	br	40268c4 <alt_write+0x74>
 40268f0:	00810134 	movhi	r2,1028
 40268f4:	10a13f04 	addi	r2,r2,-31492
 40268f8:	10800017 	ldw	r2,0(r2)
 40268fc:	10000a26 	beq	r2,zero,4026928 <alt_write+0xd8>
 4026900:	103ee83a 	callr	r2
 4026904:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4026908:	00801444 	movi	r2,81
 402690c:	043fffc4 	movi	r16,-1
 4026910:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
 4026914:	8005883a 	mov	r2,r16
 4026918:	dfc00117 	ldw	ra,4(sp)
 402691c:	dc000017 	ldw	r16,0(sp)
 4026920:	dec00204 	addi	sp,sp,8
 4026924:	f800283a 	ret
 4026928:	00c10134 	movhi	r3,1028
 402692c:	18e8e504 	addi	r3,r3,-23660
 4026930:	003ff506 	br	4026908 <alt_write+0xb8>
 4026934:	00810134 	movhi	r2,1028
 4026938:	10a13f04 	addi	r2,r2,-31492
 402693c:	10800017 	ldw	r2,0(r2)
 4026940:	10000626 	beq	r2,zero,402695c <alt_write+0x10c>
 4026944:	103ee83a 	callr	r2
 4026948:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
 402694c:	0405c83a 	sub	r2,zero,r16
 4026950:	043fffc4 	movi	r16,-1
 4026954:	18800015 	stw	r2,0(r3)
 4026958:	003fcf06 	br	4026898 <alt_write+0x48>
 402695c:	00c10134 	movhi	r3,1028
 4026960:	18e8e504 	addi	r3,r3,-23660
 4026964:	003ff906 	br	402694c <alt_write+0xfc>

04026968 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4026968:	000170fa 	wrctl	ienable,zero
}
 402696c:	f800283a 	ret

04026970 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 4026970:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 4026974:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 4026978:	d1280e17 	ldw	r4,-24520(gp)

      stw ra,  0(sp)
 402697c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 4026980:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 4026984:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 4026988:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 402698c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 4026990:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4026994:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 4026998:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 402699c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 40269a0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 40269a4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 40269a8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 40269ac:	4026a480 	call	4026a48 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 40269b0:	d1280917 	ldw	r4,-24540(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 40269b4:	d1680107 	ldb	r5,-24572(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 40269b8:	d1280e15 	stw	r4,-24520(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 40269bc:	d1680145 	stb	r5,-24571(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 40269c0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 40269c4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 40269c8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 40269cc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 40269d0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 40269d4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 40269d8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 40269dc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 40269e0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 40269e4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 40269e8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 40269ec:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 40269f0:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 40269f4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 40269f8:	f800283a 	ret

040269fc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 40269fc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 4026a00:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 4026a04:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 4026a08:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4026a0c:	4026a480 	call	4026a48 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 4026a10:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 4026a14:	d4a7ff45 	stb	r18,-24579(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 4026a18:	003fe506 	br	40269b0 <OSCtxSw+0x40>

04026a1c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 4026a1c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 4026a20:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 4026a24:	10800054 	ori	r2,r2,1
      wrctl status, r2
 4026a28:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 4026a2c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 4026a30:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 4026a34:	dec00204 	addi	sp,sp,8

      callr r2
 4026a38:	103ee83a 	callr	r2

      nop
 4026a3c:	0001883a 	nop

04026a40 <OSTaskCreateHook>:
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 4026a40:	f800283a 	ret

04026a44 <OSTaskDelHook>:
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 4026a44:	f800283a 	ret

04026a48 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
}
 4026a48:	f800283a 	ret

04026a4c <OSTaskStatHook>:
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
}
 4026a4c:	f800283a 	ret

04026a50 <OSInitHookBegin>:
void OSInitHookBegin(void)
{
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 4026a50:	f800283a 	ret

04026a54 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
}
 4026a54:	f800283a 	ret

04026a58 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
}
 4026a58:	f800283a 	ret

04026a5c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
}
 4026a5c:	f800283a 	ret

04026a60 <OSTimeTickHook>:
    }
#endif  
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
 4026a60:	401c7681 	jmpi	401c768 <cticks_hook>

04026a64 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4026a64:	defffc04 	addi	sp,sp,-16
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4026a68:	00bfff04 	movi	r2,-4
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4026a6c:	dc000015 	stw	r16,0(sp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4026a70:	30a0703a 	and	r16,r6,r2
 4026a74:	843f0004 	addi	r16,r16,-1024

   _REENT_INIT_PTR (local_impure_ptr);
 4026a78:	81c0bb04 	addi	r7,r16,748
 4026a7c:	38801704 	addi	r2,r7,92
 4026a80:	38c02e04 	addi	r3,r7,184
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4026a84:	dfc00315 	stw	ra,12(sp)
 4026a88:	dd000215 	stw	r20,8(sp)
 4026a8c:	dc800115 	stw	r18,4(sp)
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));

   _REENT_INIT_PTR (local_impure_ptr);
 4026a90:	80800215 	stw	r2,8(r16)
 4026a94:	80c00315 	stw	r3,12(r16)
 4026a98:	81c00115 	stw	r7,4(r16)
 4026a9c:	80000015 	stw	zero,0(r16)
 4026aa0:	80000415 	stw	zero,16(r16)
 4026aa4:	80800504 	addi	r2,r16,20
 4026aa8:	10000015 	stw	zero,0(r2)
 4026aac:	10000115 	stw	zero,4(r2)
 4026ab0:	10000215 	stw	zero,8(r2)
 4026ab4:	10000315 	stw	zero,12(r2)
 4026ab8:	10000605 	stb	zero,24(r2)
 4026abc:	10000415 	stw	zero,16(r2)
 4026ac0:	10000515 	stw	zero,20(r2)
 4026ac4:	00c100f4 	movhi	r3,1027
 4026ac8:	18cc1004 	addi	r3,r3,12352
 4026acc:	80801f04 	addi	r2,r16,124
 4026ad0:	80c00d15 	stw	r3,52(r16)
 4026ad4:	80000c15 	stw	zero,48(r16)
 4026ad8:	80000e15 	stw	zero,56(r16)
 4026adc:	80000f15 	stw	zero,60(r16)
 4026ae0:	80001015 	stw	zero,64(r16)
 4026ae4:	80001115 	stw	zero,68(r16)
 4026ae8:	80001215 	stw	zero,72(r16)
 4026aec:	80001315 	stw	zero,76(r16)
 4026af0:	80001415 	stw	zero,80(r16)
 4026af4:	80001515 	stw	zero,84(r16)
 4026af8:	80001615 	stw	zero,88(r16)
 4026afc:	80001715 	stw	zero,92(r16)
 4026b00:	80001805 	stb	zero,96(r16)
 4026b04:	10000015 	stw	zero,0(r2)
 4026b08:	10000115 	stw	zero,4(r2)
 4026b0c:	10000215 	stw	zero,8(r2)
 4026b10:	10000315 	stw	zero,12(r2)
 4026b14:	10000415 	stw	zero,16(r2)
 4026b18:	00c00044 	movi	r3,1
 4026b1c:	10000515 	stw	zero,20(r2)
 4026b20:	10000615 	stw	zero,24(r2)
 4026b24:	10000715 	stw	zero,28(r2)
 4026b28:	10000815 	stw	zero,32(r2)
 4026b2c:	008cc384 	movi	r2,13070
 4026b30:	80c02915 	stw	r3,164(r16)
 4026b34:	80802b0d 	sth	r2,172(r16)
 4026b38:	00eaf344 	movi	r3,-21555
 4026b3c:	00848d04 	movi	r2,4660
 4026b40:	80c02b8d 	sth	r3,174(r16)
 4026b44:	80802c0d 	sth	r2,176(r16)
 4026b48:	00f99b44 	movi	r3,-6547
 4026b4c:	00b7bb04 	movi	r2,-8468
 4026b50:	80c02c8d 	sth	r3,178(r16)
 4026b54:	80802d0d 	sth	r2,180(r16)
 4026b58:	00c00144 	movi	r3,5
 4026b5c:	008002c4 	movi	r2,11
 4026b60:	80c02d8d 	sth	r3,182(r16)
 4026b64:	80802e0d 	sth	r2,184(r16)
 4026b68:	80002815 	stw	zero,160(r16)
 4026b6c:	80002a15 	stw	zero,168(r16)
 4026b70:	80002f15 	stw	zero,188(r16)
 4026b74:	80003015 	stw	zero,192(r16)
 4026b78:	80003115 	stw	zero,196(r16)
 4026b7c:	80003215 	stw	zero,200(r16)
 4026b80:	80003315 	stw	zero,204(r16)
 4026b84:	80003415 	stw	zero,208(r16)
 4026b88:	80003e15 	stw	zero,248(r16)
 4026b8c:	80003f15 	stw	zero,252(r16)
 4026b90:	80004015 	stw	zero,256(r16)
 4026b94:	80004115 	stw	zero,260(r16)
 4026b98:	80004215 	stw	zero,264(r16)
 4026b9c:	80004315 	stw	zero,268(r16)
 4026ba0:	80004415 	stw	zero,272(r16)
 4026ba4:	80004515 	stw	zero,276(r16)
 4026ba8:	80004615 	stw	zero,280(r16)
 4026bac:	80004715 	stw	zero,284(r16)
 4026bb0:	80003505 	stb	zero,212(r16)
 4026bb4:	80003705 	stb	zero,220(r16)
 4026bb8:	80003d15 	stw	zero,244(r16)
 4026bbc:	80005215 	stw	zero,328(r16)
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4026bc0:	2025883a 	mov	r18,r4
 4026bc4:	2829883a 	mov	r20,r5
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));

   _REENT_INIT_PTR (local_impure_ptr);
 4026bc8:	80005315 	stw	zero,332(r16)
 4026bcc:	80005415 	stw	zero,336(r16)
 4026bd0:	80005515 	stw	zero,340(r16)
 4026bd4:	8000b515 	stw	zero,724(r16)
 4026bd8:	80007515 	stw	zero,468(r16)
 4026bdc:	8000b715 	stw	zero,732(r16)
 4026be0:	8000b815 	stw	zero,736(r16)
 4026be4:	8000b915 	stw	zero,740(r16)
 4026be8:	8000ba15 	stw	zero,744(r16)
 4026bec:	3809883a 	mov	r4,r7
 4026bf0:	000b883a 	mov	r5,zero
 4026bf4:	01804504 	movi	r6,276
 4026bf8:	40026a00 	call	40026a0 <memset>

   frame_pointer = (INT32U*) local_impure_ptr;
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 4026bfc:	80bff304 	addi	r2,r16,-52
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4026c00:	00c100b4 	movhi	r3,1026
 4026c04:	18da8804 	addi	r3,r3,27168
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 4026c08:	14800c15 	stw	r18,48(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 4026c0c:	15000b15 	stw	r20,44(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 4026c10:	14000a15 	stw	r16,40(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4026c14:	10c00015 	stw	r3,0(r2)
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
}
 4026c18:	dfc00317 	ldw	ra,12(sp)
 4026c1c:	dd000217 	ldw	r20,8(sp)
 4026c20:	dc800117 	ldw	r18,4(sp)
 4026c24:	dc000017 	ldw	r16,0(sp)
 4026c28:	dec00404 	addi	sp,sp,16
 4026c2c:	f800283a 	ret

04026c30 <sysuptime>:
 * RETURNS: 
 */

unsigned long
sysuptime()
{
 4026c30:	00c10134 	movhi	r3,1028
 4026c34:	18e93304 	addi	r3,r3,-23348
 4026c38:	18800017 	ldw	r2,0(r3)
 4026c3c:	01001904 	movi	r4,100
 4026c40:	1105203a 	divu	r2,r2,r4
   return ((cticks/TPS)*100);    /* 100ths of a sec since boot time */
}
 4026c44:	1105383a 	mul	r2,r2,r4
 4026c48:	f800283a 	ret

04026c4c <mcastlist>:
mcastlist(struct in_multi * multi_ptr)
{
   USE_ARG(multi_ptr);

   return 0;
}
 4026c4c:	0005883a 	mov	r2,zero
 4026c50:	f800283a 	ret

04026c54 <prep_modules>:
#ifdef USE_MODEM
extern   int   prep_modem(void);
#endif   /* USE_MODEM */

int prep_modules(void)
{
 4026c54:	deffff04 	addi	sp,sp,-4
 4026c58:	dfc00015 	stw	ra,0(sp)
      panic("prep_modules");
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
 4026c5c:	402f6f00 	call	402f6f0 <prep_vfs>
   if (e != 0)
   {
      dprintf("VFS Module prep failed\n");
 4026c60:	010100f4 	movhi	r4,1027
 4026c64:	21153404 	addi	r4,r4,21712
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
   if (e != 0)
 4026c68:	10000426 	beq	r2,zero,4026c7c <prep_modules+0x28>
   {
      dprintf("VFS Module prep failed\n");
 4026c6c:	4002fec0 	call	4002fec <puts>
      panic("prep_modules");
 4026c70:	010100f4 	movhi	r4,1027
 4026c74:	21153a04 	addi	r4,r4,21736
 4026c78:	4019c440 	call	4019c44 <panic>
      dprintf("sslapp_init() failed\n");
      panic("prep_modules");
   }
#endif
   return 0;
}
 4026c7c:	0005883a 	mov	r2,zero
 4026c80:	dfc00017 	ldw	ra,0(sp)
 4026c84:	dec00104 	addi	sp,sp,4
 4026c88:	f800283a 	ret

04026c8c <packet_check>:
static int inside_pktdemux = 0; 

void
packet_check(void)
{
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
 4026c8c:	d0a84d17 	ldw	r2,-24268(gp)

static int inside_pktdemux = 0; 

void
packet_check(void)
{
 4026c90:	deffff04 	addi	sp,sp,-4
 4026c94:	dfc00015 	stw	ra,0(sp)
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
 4026c98:	1000061e 	bne	r2,zero,4026cb4 <packet_check+0x28>
      return;           /* do not re-enter pktdemux(), packet will wait... */
   inside_pktdemux++;   /* set re-entrany flag */
 4026c9c:	00800044 	movi	r2,1
 4026ca0:	d0a84d15 	stw	r2,-24268(gp)
   pktdemux();          /* process low level packet input */
 4026ca4:	4017f380 	call	4017f38 <pktdemux>
   inside_pktdemux--;   /* clear re-entrany flag */
 4026ca8:	d0a84d17 	ldw	r2,-24268(gp)
 4026cac:	10bfffc4 	addi	r2,r2,-1
 4026cb0:	d0a84d15 	stw	r2,-24268(gp)
}
 4026cb4:	dfc00017 	ldw	ra,0(sp)
 4026cb8:	dec00104 	addi	sp,sp,4
 4026cbc:	f800283a 	ret

04026cc0 <station_state>:
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 4026cc0:	00810134 	movhi	r2,1028
 4026cc4:	108dfc04 	addi	r2,r2,14320
 4026cc8:	10800017 	ldw	r2,0(r2)
 * RETURNS: 
 */

int
station_state(void * pio)
{
 4026ccc:	defffb04 	addi	sp,sp,-20
 4026cd0:	dc400215 	stw	r17,8(sp)
 4026cd4:	dfc00415 	stw	ra,16(sp)
 4026cd8:	dc800315 	stw	r18,12(sp)
 4026cdc:	dc000115 	stw	r16,4(sp)
 4026ce0:	2023883a 	mov	r17,r4
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 4026ce4:	10001c26 	beq	r2,zero,4026d58 <station_state+0x98>
 4026ce8:	1021883a 	mov	r16,r2
 4026cec:	0025883a 	mov	r18,zero
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
 4026cf0:	81000a17 	ldw	r4,40(r16)
 4026cf4:	401a0480 	call	401a048 <print_ipad>
 4026cf8:	81c00104 	addi	r7,r16,4
 4026cfc:	900d883a 	mov	r6,r18
 4026d00:	014100f4 	movhi	r5,1027
 4026d04:	29553e04 	addi	r5,r5,21752
 4026d08:	8809883a 	mov	r4,r17
 4026d0c:	d8800015 	stw	r2,0(sp)
 4026d10:	4019c700 	call	4019c70 <ns_printf>
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
 4026d14:	81000c17 	ldw	r4,48(r16)
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 4026d18:	94800044 	addi	r18,r18,1
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
 4026d1c:	401a0480 	call	401a048 <print_ipad>
 4026d20:	100d883a 	mov	r6,r2
 4026d24:	014100f4 	movhi	r5,1027
 4026d28:	29554504 	addi	r5,r5,21780
 4026d2c:	8809883a 	mov	r4,r17
 4026d30:	4019c700 	call	4019c70 <ns_printf>
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
 4026d34:	81000d17 	ldw	r4,52(r16)
 4026d38:	401a0480 	call	401a048 <print_ipad>
 4026d3c:	100d883a 	mov	r6,r2
 4026d40:	8809883a 	mov	r4,r17
 4026d44:	014100f4 	movhi	r5,1027
 4026d48:	29554804 	addi	r5,r5,21792
 4026d4c:	4019c700 	call	4019c70 <ns_printf>
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 4026d50:	84000017 	ldw	r16,0(r16)
 4026d54:	803fe61e 	bne	r16,zero,4026cf0 <station_state+0x30>
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
   }
#endif   /* NO_INET_STACK */

   ns_printf(pio, "current tick count %lu\n", cticks);
 4026d58:	00810134 	movhi	r2,1028
 4026d5c:	10a93304 	addi	r2,r2,-23348
 4026d60:	11800017 	ldw	r6,0(r2)
 4026d64:	8809883a 	mov	r4,r17
 4026d68:	014100f4 	movhi	r5,1027
 4026d6c:	29554b04 	addi	r5,r5,21804
 4026d70:	4019c700 	call	4019c70 <ns_printf>

   ns_printf(pio, "common delay parameter:  %lu ticks (%lu ms).\n", pingdelay, (pingdelay * TIMEFOR1TICK));
 4026d74:	d1a04c17 	ldw	r6,-32464(gp)
 4026d78:	014100f4 	movhi	r5,1027
 4026d7c:	29555104 	addi	r5,r5,21828
 4026d80:	8809883a 	mov	r4,r17
 4026d84:	31c002a4 	muli	r7,r6,10
 4026d88:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio, "common host parameter: %s\n", print_ipad(activehost));
 4026d8c:	d1284c17 	ldw	r4,-24272(gp)
 4026d90:	401a0480 	call	401a048 <print_ipad>
 4026d94:	100d883a 	mov	r6,r2
 4026d98:	8809883a 	mov	r4,r17
 4026d9c:	014100f4 	movhi	r5,1027
 4026da0:	29555d04 	addi	r5,r5,21876
 4026da4:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio, "common length parameter: %d\n", deflength);
 4026da8:	d1a04d17 	ldw	r6,-32460(gp)
 4026dac:	8809883a 	mov	r4,r17
 4026db0:	014100f4 	movhi	r5,1027
 4026db4:	29556404 	addi	r5,r5,21904
 4026db8:	4019c700 	call	4019c70 <ns_printf>
#ifdef USE_PPP
   ns_printf(pio, "current dial-in user name is %s\n", pppcfg.username);
   ns_printf(pio, "current dial-in password is %s\n", pppcfg.password);
#endif   /* USE_PPP */

   task_stats(pio);
 4026dbc:	8809883a 	mov	r4,r17
 4026dc0:	402711c0 	call	402711c <task_stats>

   return 0;
}
 4026dc4:	0005883a 	mov	r2,zero
 4026dc8:	dfc00417 	ldw	ra,16(sp)
 4026dcc:	dc800317 	ldw	r18,12(sp)
 4026dd0:	dc400217 	ldw	r17,8(sp)
 4026dd4:	dc000117 	ldw	r16,4(sp)
 4026dd8:	dec00504 	addi	sp,sp,20
 4026ddc:	f800283a 	ret

04026de0 <icmp_port_du>:
 * RETURNS: 
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
 4026de0:	defffe04 	addi	sp,sp,-8
 4026de4:	dfc00115 	stw	ra,4(sp)
 4026de8:	dc400015 	stw	r17,0(sp)
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
 4026dec:	28800007 	ldb	r2,0(r5)
 4026df0:	00c10134 	movhi	r3,1028
 4026df4:	18e09904 	addi	r3,r3,-32156
 4026df8:	21000717 	ldw	r4,28(r4)
 4026dfc:	1085883a 	add	r2,r2,r2
 4026e00:	1085883a 	add	r2,r2,r2
 4026e04:	10c5883a 	add	r2,r2,r3
 4026e08:	14400017 	ldw	r17,0(r2)
 4026e0c:	401a0480 	call	401a048 <print_ipad>
 4026e10:	100d883a 	mov	r6,r2
 4026e14:	880b883a 	mov	r5,r17
 4026e18:	010100f4 	movhi	r4,1027
 4026e1c:	21156c04 	addi	r4,r4,21936
 4026e20:	4002ed40 	call	4002ed4 <printf>
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
   dprintf(prompt);
 4026e24:	d1204b17 	ldw	r4,-32468(gp)
}
 4026e28:	dfc00117 	ldw	ra,4(sp)
 4026e2c:	dc400017 	ldw	r17,0(sp)
 4026e30:	dec00204 	addi	sp,sp,8
void
icmp_port_du(PACKET p, struct destun * pdp)
{
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
   dprintf(prompt);
 4026e34:	4002ed41 	jmpi	4002ed4 <printf>

04026e38 <netmain_init>:
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
 4026e38:	d1204a17 	ldw	r4,-32472(gp)
 * RETURNS: 
 */

void 
netmain_init(void)
{
 4026e3c:	defffe04 	addi	sp,sp,-8
 4026e40:	dfc00115 	stw	ra,4(sp)
 4026e44:	dc000015 	stw	r16,0(sp)
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
 4026e48:	4002fec0 	call	4002fec <puts>
   printf("Copyright 1996-2008 by InterNiche Technologies. All rights reserved. \n");
 4026e4c:	010100f4 	movhi	r4,1027
 4026e50:	21157504 	addi	r4,r4,21972
 4026e54:	4002fec0 	call	4002fec <puts>
#ifdef IN_MENUS
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
 4026e58:	401cc840 	call	401cc84 <pre_task_setup>
   if (msg)
      panic(msg);
 4026e5c:	1009883a 	mov	r4,r2
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
   if (msg)
 4026e60:	10000126 	beq	r2,zero,4026e68 <netmain_init+0x30>
      panic(msg);
 4026e64:	4019c440 	call	4019c44 <panic>
      printf("global_log_create() failed\n");
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
 4026e68:	40185e00 	call	40185e0 <ip_startup>
   if (msg)
   {
      printf("inet startup error: %s\n", msg);
 4026e6c:	100b883a 	mov	r5,r2
 4026e70:	010100f4 	movhi	r4,1027
 4026e74:	21158704 	addi	r4,r4,22044
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
   if (msg)
 4026e78:	10000426 	beq	r2,zero,4026e8c <netmain_init+0x54>
   {
      printf("inet startup error: %s\n", msg);
 4026e7c:	4002ed40 	call	4002ed4 <printf>
      panic("IP");
 4026e80:	010100f4 	movhi	r4,1027
 4026e84:	21158d04 	addi	r4,r4,22068
 4026e88:	4019c440 	call	4019c44 <panic>
   }

#if defined(MEMDEV_SIZE) && defined(VFS_FILES)
   init_memdev(); /* init the mem and null test devices */
 4026e8c:	402d7ec0 	call	402d7ec <init_memdev>
#endif

#ifdef IP_MULTICAST
#ifdef INCLUDE_TCP
   /* call the IP multicast test program */
   u_mctest_init();
 4026e90:	402d53c0 	call	402d53c <u_mctest_init>
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 4026e94:	00810134 	movhi	r2,1028
 4026e98:	108dfc04 	addi	r2,r2,14320
 4026e9c:	14000017 	ldw	r16,0(r2)

   /* clear debugging flags. Port can optionally turn them
    * back on in post_task_setup();
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    
 4026ea0:	00c10134 	movhi	r3,1028
 4026ea4:	18e90e04 	addi	r3,r3,-23496
 4026ea8:	18000015 	stw	zero,0(r3)

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 4026eac:	81000a17 	ldw	r4,40(r16)
 4026eb0:	401a0480 	call	401a048 <print_ipad>
 4026eb4:	81400104 	addi	r5,r16,4
 4026eb8:	010100f4 	movhi	r4,1027
 4026ebc:	21158e04 	addi	r4,r4,22072
 4026ec0:	100d883a 	mov	r6,r2
 4026ec4:	4002ed40 	call	4002ed4 <printf>
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
 4026ec8:	401ccdc0 	call	401ccdc <post_task_setup>
   if (msg)
      panic(msg);
 4026ecc:	1009883a 	mov	r4,r2
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
   if (msg)
 4026ed0:	10000126 	beq	r2,zero,4026ed8 <netmain_init+0xa0>
      panic(msg);
 4026ed4:	4019c440 	call	4019c44 <panic>
      panic("prep_modules");
   }
#endif
   USE_ARG(e);    /* Avoid compiler warnings */

} /* end of netmain_init() */
 4026ed8:	dfc00117 	ldw	ra,4(sp)
 4026edc:	dc000017 	ldw	r16,0(sp)
 4026ee0:	dec00204 	addi	sp,sp,8
#ifdef USE_AUTOIP
   Upnp_init();      /* start Auto IP before DHCP client */
#endif   /* USE_AUTOIP */

#ifdef DHCP_CLIENT
   dhc_setup();   /* kick off any DHCP clients */
 4026ee4:	402d6001 	jmpi	402d600 <dhc_setup>

04026ee8 <in_timerset>:
 * RETURNS: timer ID if OK, else if table is full.
 */

long
in_timerset(void (*callback)(long), long msecs, long parm)
{
 4026ee8:	00810134 	movhi	r2,1028
 4026eec:	10a93304 	addi	r2,r2,-23348
 4026ef0:	29401924 	muli	r5,r5,100
 4026ef4:	12400017 	ldw	r9,0(r2)
 4026ef8:	01c10134 	movhi	r7,1028
 4026efc:	39cda304 	addi	r7,r7,13964
 4026f00:	2015883a 	mov	r10,r4
 4026f04:	0007883a 	mov	r3,zero
 4026f08:	01000144 	movi	r4,5
 4026f0c:	3811883a 	mov	r8,r7
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
   {
      if(intimers[i].callback == NULL)
 4026f10:	38800017 	ldw	r2,0(r7)
long
in_timerset(void (*callback)(long), long msecs, long parm)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4026f14:	18c00044 	addi	r3,r3,1
 4026f18:	39c00504 	addi	r7,r7,20
   {
      if(intimers[i].callback == NULL)
 4026f1c:	10000526 	beq	r2,zero,4026f34 <in_timerset+0x4c>
long
in_timerset(void (*callback)(long), long msecs, long parm)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4026f20:	42000504 	addi	r8,r8,20
 4026f24:	193ffa1e 	bne	r3,r4,4026f10 <in_timerset+0x28>
 4026f28:	000f883a 	mov	r7,zero
         numtimers++;
         return (long)&intimers[i];
      }
   }
   return 0;
}
 4026f2c:	3805883a 	mov	r2,r7
 4026f30:	f800283a 	ret
         intimers[i].parm = parm;
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
		 intimers[i].inuse = FALSE;
         numtimers++;
 4026f34:	d0e85017 	ldw	r3,-24256(gp)
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
         intimers[i].parm = parm;
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
 4026f38:	0080fa04 	movi	r2,1000
 4026f3c:	2885203a 	divu	r2,r5,r2
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
		 intimers[i].inuse = FALSE;
         numtimers++;
 4026f40:	18c00044 	addi	r3,r3,1
         return (long)&intimers[i];
 4026f44:	400f883a 	mov	r7,r8
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
         intimers[i].parm = parm;
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
 4026f48:	1249883a 	add	r4,r2,r9
		 intimers[i].inuse = FALSE;
         numtimers++;
 4026f4c:	d0e85015 	stw	r3,-24256(gp)
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
         intimers[i].parm = parm;
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
 4026f50:	40800215 	stw	r2,8(r8)
         numtimers++;
         return (long)&intimers[i];
      }
   }
   return 0;
}
 4026f54:	3805883a 	mov	r2,r7
   for(i = 0; i < NUM_INTIMERS; i++)
   {
      if(intimers[i].callback == NULL)
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
 4026f58:	42800015 	stw	r10,0(r8)
         intimers[i].parm = parm;
 4026f5c:	41800115 	stw	r6,4(r8)
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
 4026f60:	41000315 	stw	r4,12(r8)
		 intimers[i].inuse = FALSE;
 4026f64:	40000415 	stw	zero,16(r8)
         numtimers++;
         return (long)&intimers[i];
      }
   }
   return 0;
}
 4026f68:	f800283a 	ret

04026f6c <in_timerkill>:
 */


int
in_timerkill(long timer)
{
 4026f6c:	deffff04 	addi	sp,sp,-4
 4026f70:	00c10134 	movhi	r3,1028
 4026f74:	18cda304 	addi	r3,r3,13964
 4026f78:	dfc00015 	stw	ra,0(sp)
 4026f7c:	0005883a 	mov	r2,zero
 4026f80:	01800144 	movi	r6,5
 4026f84:	180b883a 	mov	r5,r3
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4026f88:	10800044 	addi	r2,r2,1
   {
      if(timer == (long)&intimers[i])
 4026f8c:	20c00926 	beq	r4,r3,4026fb4 <in_timerkill+0x48>
int
in_timerkill(long timer)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4026f90:	29400504 	addi	r5,r5,20
 4026f94:	18c00504 	addi	r3,r3,20
 4026f98:	11bffb1e 	bne	r2,r6,4026f88 <in_timerkill+0x1c>
         intimers[i].callback = NULL;
         numtimers--;
         return 0;      /* OK return */
      }
   }
   dtrap();    /* timer to kill not found */
 4026f9c:	401c81c0 	call	401c81c <dtrap>
 4026fa0:	00fffd84 	movi	r3,-10
   return ENP_PARAM;
}
 4026fa4:	1805883a 	mov	r2,r3
 4026fa8:	dfc00017 	ldw	ra,0(sp)
 4026fac:	dec00104 	addi	sp,sp,4
 4026fb0:	f800283a 	ret
   for(i = 0; i < NUM_INTIMERS; i++)
   {
      if(timer == (long)&intimers[i])
      {
         intimers[i].callback = NULL;
         numtimers--;
 4026fb4:	d0a85017 	ldw	r2,-24256(gp)
 4026fb8:	0007883a 	mov	r3,zero

   for(i = 0; i < NUM_INTIMERS; i++)
   {
      if(timer == (long)&intimers[i])
      {
         intimers[i].callback = NULL;
 4026fbc:	28000015 	stw	zero,0(r5)
         numtimers--;
 4026fc0:	10bfffc4 	addi	r2,r2,-1
 4026fc4:	d0a85015 	stw	r2,-24256(gp)
         return 0;      /* OK return */
      }
   }
   dtrap();    /* timer to kill not found */
   return ENP_PARAM;
}
 4026fc8:	1805883a 	mov	r2,r3
 4026fcc:	dfc00017 	ldw	ra,0(sp)
 4026fd0:	dec00104 	addi	sp,sp,4
 4026fd4:	f800283a 	ret

04026fd8 <inet_timer>:
 * RETURNS: 
 */

void
inet_timer(void)
{
 4026fd8:	defffa04 	addi	sp,sp,-24
 4026fdc:	dc800215 	stw	r18,8(sp)
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
 4026fe0:	00810134 	movhi	r2,1028
 4026fe4:	10a95204 	addi	r2,r2,-23224
 4026fe8:	04810134 	movhi	r18,1028
 4026fec:	94a93304 	addi	r18,r18,-23348
 4026ff0:	11000017 	ldw	r4,0(r2)
 4026ff4:	90c00017 	ldw	r3,0(r18)
 * RETURNS: 
 */

void
inet_timer(void)
{
 4026ff8:	dfc00515 	stw	ra,20(sp)
 4026ffc:	dd000415 	stw	r20,16(sp)
 4027000:	dcc00315 	stw	r19,12(sp)
 4027004:	dc400115 	stw	r17,4(sp)
 4027008:	dc000015 	stw	r16,0(sp)
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
 402700c:	20c03236 	bltu	r4,r3,40270d8 <inet_timer+0x100>
      ip_reasm_process_timer_tick ();
#endif

#ifdef INCLUDE_TCP
   tcp_tick();          /* run TCP timers */
 4027010:	401d1540 	call	401d154 <tcp_tick>
{
   int   i;
   int   found = 0;  /* number of valid timers found */

   /* if no timers, just return */
   if (numtimers > 0)
 4027014:	d1285017 	ldw	r4,-24256(gp)
 4027018:	0100100e 	bge	zero,r4,402705c <inet_timer+0x84>
 402701c:	04010134 	movhi	r16,1028
 4027020:	840da304 	addi	r16,r16,13964
 4027024:	0023883a 	mov	r17,zero
 4027028:	05000044 	movi	r20,1
 402702c:	84c01904 	addi	r19,r16,100
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
      {
         if (intimers[i].callback)   /* is this timer active? */
 4027030:	81400017 	ldw	r5,0(r16)
 4027034:	28000726 	beq	r5,zero,4027054 <inet_timer+0x7c>
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
 4027038:	80800317 	ldw	r2,12(r16)
 402703c:	90c00017 	ldw	r3,0(r18)
               intimers[i].inuse = TRUE;
               intimers[i].callback(intimers[i].parm);      /* call user routine */
               intimers[i].inuse = FALSE;
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
 4027040:	8c400044 	addi	r17,r17,1
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
      {
         if (intimers[i].callback)   /* is this timer active? */
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
 4027044:	10c0022e 	bgeu	r2,r3,4027050 <inet_timer+0x78>
 4027048:	80800417 	ldw	r2,16(r16)
 402704c:	10001926 	beq	r2,zero,40270b4 <inet_timer+0xdc>
               intimers[i].inuse = TRUE;
               intimers[i].callback(intimers[i].parm);      /* call user routine */
               intimers[i].inuse = FALSE;
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
 4027050:	8900020e 	bge	r17,r4,402705c <inet_timer+0x84>
               break;
 4027054:	84000504 	addi	r16,r16,20

   /* if no timers, just return */
   if (numtimers > 0)
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
 4027058:	84fff51e 	bne	r16,r19,4027030 <inet_timer+0x58>
   check_interval_timers();
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
 402705c:	00810134 	movhi	r2,1028
 4027060:	10a91204 	addi	r2,r2,-23480
 4027064:	10c00017 	ldw	r3,0(r2)
 4027068:	91000017 	ldw	r4,0(r18)
 402706c:	19001c36 	bltu	r3,r4,40270e0 <inet_timer+0x108>
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
 4027070:	d0e84e17 	ldw	r3,-24264(gp)
 4027074:	19000236 	bltu	r3,r4,4027080 <inet_timer+0xa8>
 4027078:	2080fa04 	addi	r2,r4,1000
 402707c:	10c01d2e 	bgeu	r2,r3,40270f4 <inet_timer+0x11c>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
   {
      nextppp = cticks + TPS;

      if (port_1s_callout != NULL)
 4027080:	d0e84f17 	ldw	r3,-24260(gp)

   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
   {
      nextppp = cticks + TPS;
 4027084:	20801904 	addi	r2,r4,100
 4027088:	d0a84e15 	stw	r2,-24264(gp)

      if (port_1s_callout != NULL)
 402708c:	18000126 	beq	r3,zero,4027094 <inet_timer+0xbc>
         (*port_1s_callout)();
 4027090:	183ee83a 	callr	r3
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
 4027094:	dfc00517 	ldw	ra,20(sp)
 4027098:	dd000417 	ldw	r20,16(sp)
 402709c:	dcc00317 	ldw	r19,12(sp)
 40270a0:	dc800217 	ldw	r18,8(sp)
 40270a4:	dc400117 	ldw	r17,4(sp)
 40270a8:	dc000017 	ldw	r16,0(sp)
 40270ac:	dec00604 	addi	sp,sp,24

#ifdef USE_PPP
      ppp_timeisup();
#endif
#ifdef DHCP_CLIENT
      dhc_second();
 40270b0:	401b5081 	jmpi	401b508 <dhc_second>
      {
         if (intimers[i].callback)   /* is this timer active? */
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
 40270b4:	80800217 	ldw	r2,8(r16)
               intimers[i].inuse = TRUE;
               intimers[i].callback(intimers[i].parm);      /* call user routine */
 40270b8:	81000117 	ldw	r4,4(r16)
         if (intimers[i].callback)   /* is this timer active? */
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
               intimers[i].inuse = TRUE;
 40270bc:	85000415 	stw	r20,16(r16)
      {
         if (intimers[i].callback)   /* is this timer active? */
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
 40270c0:	1885883a 	add	r2,r3,r2
 40270c4:	80800315 	stw	r2,12(r16)
               intimers[i].inuse = TRUE;
               intimers[i].callback(intimers[i].parm);      /* call user routine */
 40270c8:	283ee83a 	callr	r5
 40270cc:	d1285017 	ldw	r4,-24256(gp)
               intimers[i].inuse = FALSE;
 40270d0:	80000415 	stw	zero,16(r16)
 40270d4:	003fde06 	br	4027050 <inet_timer+0x78>
inet_timer(void)
{
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
      ip_reasm_process_timer_tick ();
 40270d8:	402a0640 	call	402a064 <ip_reasm_process_timer_tick>
 40270dc:	003fcc06 	br	4027010 <inet_timer+0x38>
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
      igmp_fasttimo();
 40270e0:	40190940 	call	4019094 <igmp_fasttimo>
 40270e4:	00810134 	movhi	r2,1028
 40270e8:	10a93304 	addi	r2,r2,-23348
 40270ec:	11000017 	ldw	r4,0(r2)
 40270f0:	003fdf06 	br	4027070 <inet_timer+0x98>
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
 40270f4:	dfc00517 	ldw	ra,20(sp)
 40270f8:	dd000417 	ldw	r20,16(sp)
 40270fc:	dcc00317 	ldw	r19,12(sp)
 4027100:	dc800217 	ldw	r18,8(sp)
 4027104:	dc400117 	ldw	r17,4(sp)
 4027108:	dc000017 	ldw	r16,0(sp)
 402710c:	dec00604 	addi	sp,sp,24
 4027110:	f800283a 	ret

04027114 <create_apptasks>:
/* 
 * Altera Niche Stack Nios port modification:
 * return error code, if any 
 */
   return e;
}
 4027114:	0005883a 	mov	r2,zero
 4027118:	f800283a 	ret

0402711c <task_stats>:
 */


void
task_stats(void * pio)
{
 402711c:	defffe04 	addi	sp,sp,-8
   ns_printf(pio, "Task wakeups:");
 4027120:	014100f4 	movhi	r5,1027
 4027124:	2955a904 	addi	r5,r5,22180
 */


void
task_stats(void * pio)
{
 4027128:	dfc00115 	stw	ra,4(sp)
 402712c:	dc400015 	stw	r17,0(sp)
 4027130:	2023883a 	mov	r17,r4
   ns_printf(pio, "Task wakeups:");
 4027134:	4019c700 	call	4019c70 <ns_printf>

#ifndef NO_INET_STACK
   ns_printf(pio, "netmain: %lu\n", netmain_wakes);
 4027138:	00c10134 	movhi	r3,1028
 402713c:	18e91504 	addi	r3,r3,-23468
 4027140:	19800017 	ldw	r6,0(r3)
 4027144:	8809883a 	mov	r4,r17
 4027148:	014100f4 	movhi	r5,1027
 402714c:	2955ad04 	addi	r5,r5,22196
 4027150:	4019c700 	call	4019c70 <ns_printf>
#endif
#ifndef NO_INET_TICK
   ns_printf(pio, "nettick: %lu\n", nettick_wakes);
 4027154:	00c10134 	movhi	r3,1028
 4027158:	18e91604 	addi	r3,r3,-23464
 402715c:	19800017 	ldw	r6,0(r3)
 4027160:	8809883a 	mov	r4,r17
 4027164:	014100f4 	movhi	r5,1027
 4027168:	2955b104 	addi	r5,r5,22212
 402716c:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
 4027170:	8809883a 	mov	r4,r17
 4027174:	014100f4 	movhi	r5,1027
 4027178:	29458404 	addi	r5,r5,5648
}
 402717c:	dfc00117 	ldw	ra,4(sp)
 4027180:	dc400017 	ldw	r17,0(sp)
 4027184:	dec00204 	addi	sp,sp,8
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
 4027188:	4019c701 	jmpi	4019c70 <ns_printf>

0402718c <fcntl>:
 * (for files and device drivers) or calls the InterNiche bsd_ioctl for 
 * sockets.
 */
 
int fcntl (int file, int cmd, ...)
{
 402718c:	defffc04 	addi	sp,sp,-16
 4027190:	dfc00115 	stw	ra,4(sp)
 4027194:	d9800215 	stw	r6,8(sp)
 4027198:	d9c00315 	stw	r7,12(sp)
  long     flags;
  va_list  argp;

  if (file < ALT_MAX_FD)
 402719c:	008007c4 	movi	r2,31
 40271a0:	11000716 	blt	r2,r4,40271c0 <fcntl+0x34>
  {
    va_start(argp, cmd);
 40271a4:	d8800204 	addi	r2,sp,8
    flags = va_arg(argp, long);
 40271a8:	10800104 	addi	r2,r2,4
 40271ac:	d8800015 	stw	r2,0(sp)
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
 40271b0:	402f7880 	call	402f788 <alt_fcntl>
    va_start(argp, cmd);
    flags = va_arg(argp, long);
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
  }
}
 40271b4:	dfc00117 	ldw	ra,4(sp)
 40271b8:	dec00404 	addi	sp,sp,16
 40271bc:	f800283a 	ret
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
  }
  else
  {
    va_start(argp, cmd);
 40271c0:	d8800204 	addi	r2,sp,8
    flags = va_arg(argp, long);
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
 40271c4:	11800017 	ldw	r6,0(r2)
    return alt_fcntl(file, cmd, flags);
  }
  else
  {
    va_start(argp, cmd);
    flags = va_arg(argp, long);
 40271c8:	10800104 	addi	r2,r2,4
 40271cc:	d8800015 	stw	r2,0(sp)
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
 40271d0:	401956c0 	call	401956c <bsd_ioctl>
  }
}
 40271d4:	dfc00117 	ldw	ra,4(sp)
 40271d8:	dec00404 	addi	sp,sp,16
 40271dc:	f800283a 	ret

040271e0 <grat_arp>:
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
 40271e0:	defff704 	addi	sp,sp,-36
 40271e4:	dd400515 	stw	r21,20(sp)
 40271e8:	dc400115 	stw	r17,4(sp)
 40271ec:	202b883a 	mov	r21,r4
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
   arppkt = pk_alloc(arpsize);
 40271f0:	04400c04 	movi	r17,48
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 40271f4:	01000084 	movi	r4,2
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
 40271f8:	dfc00815 	stw	ra,32(sp)
 40271fc:	dd800615 	stw	r22,24(sp)
 4027200:	dcc00315 	stw	r19,12(sp)
 4027204:	dc000015 	stw	r16,0(sp)
 4027208:	ddc00715 	stw	r23,28(sp)
 402720c:	2821883a 	mov	r16,r5
 4027210:	dd000415 	stw	r20,16(sp)
 4027214:	dc800215 	stw	r18,8(sp)
   char * ethhdr;
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
 4027218:	ad802717 	ldw	r22,156(r21)
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 402721c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 4027220:	8809883a 	mov	r4,r17
 4027224:	401bf840 	call	401bf84 <pk_alloc>
 4027228:	1027883a 	mov	r19,r2
   if (!arppkt)
 402722c:	10006926 	beq	r2,zero,40273d4 <grat_arp+0x1f4>
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027230:	01000084 	movi	r4,2
 4027234:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 4027238:	99000117 	ldw	r4,4(r19)
   arppkt->nb_plen = arpsize;
 402723c:	9c400415 	stw	r17,16(r19)
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 4027240:	00800204 	movi	r2,8
   arppkt->nb_plen = arpsize;
   arppkt->net = net;

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 4027244:	24400404 	addi	r17,r4,16
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   arppkt->nb_prot = arppkt->nb_buff;
   arppkt->nb_plen = arpsize;
   arppkt->net = net;
 4027248:	9d400615 	stw	r21,24(r19)
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   arppkt->nb_prot = arppkt->nb_buff;
 402724c:	99000315 	stw	r4,12(r19)
   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   
   /* ARP req? */
   if (flag == 0)
 4027250:	802ec03a 	cmpne	r23,r16,zero
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4027254:	01404004 	movi	r5,256
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 4027258:	8880008d 	sth	r2,2(r17)
   arphdr->ar_hln = 6;
 402725c:	00c00184 	movi	r3,6
   arphdr->ar_pln = 4;
 4027260:	00800104 	movi	r2,4
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4027264:	2140040d 	sth	r5,16(r4)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
 4027268:	88c00105 	stb	r3,4(r17)
   arphdr->ar_pln = 4;
 402726c:	88800145 	stb	r2,5(r17)
   arppkt->nb_prot = arppkt->nb_buff;
   arppkt->nb_plen = arpsize;
   arppkt->net = net;

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 4027270:	24000084 	addi	r16,r4,2
   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   
   /* ARP req? */
   if (flag == 0)
 4027274:	b8003e1e 	bne	r23,zero,4027370 <grat_arp+0x190>
      /* yup */
      arphdr->ar_op = ARREQ;
 4027278:	8940018d 	sth	r5,6(r17)
   else
     /* nope */
      arphdr->ar_op = ARREP;
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
 402727c:	a8800a17 	ldw	r2,40(r21)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 4027280:	b1400517 	ldw	r5,20(r22)
 4027284:	05000184 	movi	r20,6
      arphdr->ar_op = ARREQ;
   else
     /* nope */
      arphdr->ar_op = ARREP;
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
 4027288:	88800715 	stw	r2,28(r17)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
 402728c:	a8c00a17 	ldw	r3,40(r21)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 4027290:	8c800204 	addi	r18,r17,8
 4027294:	9009883a 	mov	r4,r18
   else
     /* nope */
      arphdr->ar_op = ARREP;
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
 4027298:	88c00415 	stw	r3,16(r17)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 402729c:	a00d883a 	mov	r6,r20
 40272a0:	40096e80 	call	40096e8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 40272a4:	00ffffc4 	movi	r3,-1
 40272a8:	80c00145 	stb	r3,5(r16)
 40272ac:	80c00005 	stb	r3,0(r16)
 40272b0:	80c00045 	stb	r3,1(r16)
 40272b4:	80c00085 	stb	r3,2(r16)
 40272b8:	80c000c5 	stb	r3,3(r16)
 40272bc:	80c00105 	stb	r3,4(r16)
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 40272c0:	b1400517 	ldw	r5,20(r22)
 40272c4:	8509883a 	add	r4,r16,r20
 40272c8:	a00d883a 	mov	r6,r20
 40272cc:	40096e80 	call	40096e8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 40272d0:	00c00204 	movi	r3,8

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 40272d4:	9009883a 	mov	r4,r18
 40272d8:	900b883a 	mov	r5,r18
 40272dc:	a00d883a 	mov	r6,r20
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 40272e0:	80c00305 	stb	r3,12(r16)
 40272e4:	85000345 	stb	r20,13(r16)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 40272e8:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 40272ec:	89000384 	addi	r4,r17,14
 40272f0:	89400404 	addi	r5,r17,16
 40272f4:	01800104 	movi	r6,4
 40272f8:	40096e80 	call	40096e8 <memmove>

   /* ARP req? */
   if (flag == 0)
 40272fc:	b8001f1e 	bne	r23,zero,402737c <grat_arp+0x19c>
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 4027300:	a00d883a 	mov	r6,r20
 4027304:	89000484 	addi	r4,r17,18
 4027308:	89400504 	addi	r5,r17,20
 402730c:	40096e80 	call	40096e8 <memmove>
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 4027310:	91000404 	addi	r4,r18,16
 4027314:	89400704 	addi	r5,r17,28
 4027318:	01800104 	movi	r6,4
 402731c:	40096e80 	call	40096e8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 4027320:	a8800417 	ldw	r2,16(r21)
 4027324:	10001f26 	beq	r2,zero,40273a4 <grat_arp+0x1c4>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 4027328:	9809883a 	mov	r4,r19
 402732c:	103ee83a 	callr	r2
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(arppkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   }
   arpReqsOut++;
 4027330:	d0a85317 	ldw	r2,-24244(gp)
 4027334:	00c00044 	movi	r3,1
 4027338:	10c5883a 	add	r2,r2,r3
 402733c:	d0a85315 	stw	r2,-24244(gp)
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
}
 4027340:	1805883a 	mov	r2,r3
 4027344:	dfc00817 	ldw	ra,32(sp)
 4027348:	ddc00717 	ldw	r23,28(sp)
 402734c:	dd800617 	ldw	r22,24(sp)
 4027350:	dd400517 	ldw	r21,20(sp)
 4027354:	dd000417 	ldw	r20,16(sp)
 4027358:	dcc00317 	ldw	r19,12(sp)
 402735c:	dc800217 	ldw	r18,8(sp)
 4027360:	dc400117 	ldw	r17,4(sp)
 4027364:	dc000017 	ldw	r16,0(sp)
 4027368:	dec00904 	addi	sp,sp,36
 402736c:	f800283a 	ret
   if (flag == 0)
      /* yup */
      arphdr->ar_op = ARREQ;
   else
     /* nope */
      arphdr->ar_op = ARREP;
 4027370:	00808004 	movi	r2,512
 4027374:	8880018d 	sth	r2,6(r17)
 4027378:	003fc006 	br	402727c <grat_arp+0x9c>
   if (flag == 0)
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
 402737c:	a00d883a 	mov	r6,r20
 4027380:	89000484 	addi	r4,r17,18
 4027384:	900b883a 	mov	r5,r18
 4027388:	40096e80 	call	40096e8 <memmove>
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 402738c:	91000404 	addi	r4,r18,16
 4027390:	89400704 	addi	r5,r17,28
 4027394:	01800104 	movi	r6,4
 4027398:	40096e80 	call	40096e8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 402739c:	a8800417 	ldw	r2,16(r21)
 40273a0:	103fe11e 	bne	r2,zero,4027328 <grat_arp+0x148>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 40273a4:	a8c00317 	ldw	r3,12(r21)
 40273a8:	99400117 	ldw	r5,4(r19)
 40273ac:	99000617 	ldw	r4,24(r19)
 40273b0:	01800c04 	movi	r6,48
 40273b4:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40273b8:	01000084 	movi	r4,2
 40273bc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 40273c0:	9809883a 	mov	r4,r19
 40273c4:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40273c8:	01000084 	movi	r4,2
 40273cc:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 40273d0:	003fd706 	br	4027330 <grat_arp+0x150>
   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
   arppkt = pk_alloc(arpsize);
   if (!arppkt)
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40273d4:	01000084 	movi	r4,2
 40273d8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 40273dc:	00fffa84 	movi	r3,-22
 40273e0:	003fd706 	br	4027340 <grat_arp+0x160>

040273e4 <arp_free_pending>:
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 40273e4:	defffc04 	addi	sp,sp,-16
 40273e8:	dc400115 	stw	r17,4(sp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
 40273ec:	24400417 	ldw	r17,16(r4)
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 40273f0:	dc800215 	stw	r18,8(sp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
   entry->pending = (PACKET)NULL;
 40273f4:	20000415 	stw	zero,16(r4)
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 40273f8:	2025883a 	mov	r18,r4

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
   entry->pending = (PACKET)NULL;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 40273fc:	01000084 	movi	r4,2
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 4027400:	dfc00315 	stw	ra,12(sp)
 4027404:	dc000015 	stw	r16,0(sp)

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
   entry->pending = (PACKET)NULL;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 4027408:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   /* free all pending packets */
   while (tmppkt)
 402740c:	88000626 	beq	r17,zero,4027428 <arp_free_pending+0x44>
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
 4027410:	8c000017 	ldw	r16,0(r17)
      tmppkt->next = (PACKET)NULL;
      pk_free(tmppkt);               /* free current packet */
 4027414:	8809883a 	mov	r4,r17

   /* free all pending packets */
   while (tmppkt)
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
      tmppkt->next = (PACKET)NULL;
 4027418:	88000015 	stw	zero,0(r17)
      pk_free(tmppkt);               /* free current packet */
 402741c:	401bf0c0 	call	401bf0c <pk_free>
 4027420:	8023883a 	mov	r17,r16
   entry->pending = (PACKET)NULL;

   LOCK_NET_RESOURCE(FREEQ_RESID);

   /* free all pending packets */
   while (tmppkt)
 4027424:	803ffa1e 	bne	r16,zero,4027410 <arp_free_pending+0x2c>
      tmppkt = nextpkt;              /* process the next packet */
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027428:	01000084 	movi	r4,2
      tmppkt->next = (PACKET)NULL;
      pk_free(tmppkt);               /* free current packet */
      tmppkt = nextpkt;              /* process the next packet */
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */
 402742c:	90000015 	stw	zero,0(r18)

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
}
 4027430:	dfc00317 	ldw	ra,12(sp)
 4027434:	dc800217 	ldw	r18,8(sp)
 4027438:	dc400117 	ldw	r17,4(sp)
 402743c:	dc000017 	ldw	r16,0(sp)
 4027440:	dec00404 	addi	sp,sp,16
      tmppkt = nextpkt;              /* process the next packet */
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027444:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>

04027448 <find_oldest_arp>:
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
 4027448:	defff804 	addi	sp,sp,-32
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 402744c:	00c10134 	movhi	r3,1028
 4027450:	18cdbc04 	addi	r3,r3,14064
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
 4027454:	dd800615 	stw	r22,24(sp)
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;
 4027458:	00810134 	movhi	r2,1028
 402745c:	10a93304 	addi	r2,r2,-23348

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027460:	1d804004 	addi	r22,r3,256
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
 4027464:	dc800215 	stw	r18,8(sp)
 4027468:	dc400115 	stw	r17,4(sp)
 402746c:	dfc00715 	stw	ra,28(sp)
 4027470:	dd400515 	stw	r21,20(sp)
 4027474:	dd000415 	stw	r20,16(sp)
 4027478:	dcc00315 	stw	r19,12(sp)
 402747c:	dc000015 	stw	r16,0(sp)
 4027480:	2025883a 	mov	r18,r4
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;
 4027484:	14400017 	ldw	r17,0(r2)

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027488:	1d803f2e 	bgeu	r3,r22,4027588 <find_oldest_arp+0x140>
 402748c:	1821883a 	mov	r16,r3
 4027490:	0029883a 	mov	r20,zero
 4027494:	002b883a 	mov	r21,zero
 4027498:	0027883a 	mov	r19,zero
   {
      /* age out old, pending entries */
      if (tp->pending)
 402749c:	80800417 	ldw	r2,16(r16)
 40274a0:	10002926 	beq	r2,zero,4027548 <find_oldest_arp+0x100>
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
 40274a4:	80800517 	ldw	r2,20(r16)
 40274a8:	00c01904 	movi	r3,100
 40274ac:	8885c83a 	sub	r2,r17,r2
 40274b0:	18802036 	bltu	r3,r2,4027534 <find_oldest_arp+0xec>
 40274b4:	81000017 	ldw	r4,0(r16)
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
 40274b8:	24801a26 	beq	r4,r18,4027524 <find_oldest_arp+0xdc>
      {
         exact = tp;
      }
      else if (tp->t_pro_addr != 0)
 40274bc:	20001426 	beq	r4,zero,4027510 <find_oldest_arp+0xc8>
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
 40274c0:	98000326 	beq	r19,zero,40274d0 <find_oldest_arp+0x88>
 40274c4:	80c00617 	ldw	r3,24(r16)
 40274c8:	98800617 	ldw	r2,24(r19)
 40274cc:	1880012e 	bgeu	r3,r2,40274d4 <find_oldest_arp+0x8c>
            oldest = tp;
      }
      else if (!empty)
 40274d0:	8027883a 	mov	r19,r16
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 40274d4:	84000804 	addi	r16,r16,32
 40274d8:	85bff036 	bltu	r16,r22,402749c <find_oldest_arp+0x54>
      }
      else if (!empty)
         empty = tp;          /* grab first empty slot */
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
 40274dc:	a8002726 	beq	r21,zero,402757c <find_oldest_arp+0x134>
 40274e0:	a829883a 	mov	r20,r21
}
 40274e4:	a005883a 	mov	r2,r20
 40274e8:	dfc00717 	ldw	ra,28(sp)
 40274ec:	dd800617 	ldw	r22,24(sp)
 40274f0:	dd400517 	ldw	r21,20(sp)
 40274f4:	dd000417 	ldw	r20,16(sp)
 40274f8:	dcc00317 	ldw	r19,12(sp)
 40274fc:	dc800217 	ldw	r18,8(sp)
 4027500:	dc400117 	ldw	r17,4(sp)
 4027504:	dc000017 	ldw	r16,0(sp)
 4027508:	dec00804 	addi	sp,sp,32
 402750c:	f800283a 	ret
      else if (tp->t_pro_addr != 0)
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
            oldest = tp;
      }
      else if (!empty)
 4027510:	a03ff01e 	bne	r20,zero,40274d4 <find_oldest_arp+0x8c>
 4027514:	8029883a 	mov	r20,r16
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027518:	84000804 	addi	r16,r16,32
 402751c:	85bfdf36 	bltu	r16,r22,402749c <find_oldest_arp+0x54>
 4027520:	003fee06 	br	40274dc <find_oldest_arp+0x94>
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
 4027524:	802b883a 	mov	r21,r16
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027528:	84000804 	addi	r16,r16,32
 402752c:	85bfdb36 	bltu	r16,r22,402749c <find_oldest_arp+0x54>
 4027530:	003fea06 	br	40274dc <find_oldest_arp+0x94>
      if (tp->pending)
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
         {
            arp_free_pending(tp);   /* free pending packets */
 4027534:	8009883a 	mov	r4,r16
 4027538:	40273e40 	call	40273e4 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 402753c:	0009883a 	mov	r4,zero
 4027540:	80000015 	stw	zero,0(r16)
 4027544:	003fdc06 	br	40274b8 <find_oldest_arp+0x70>
         }
      }
      else if ((tp->t_pro_addr != 0) &&
 4027548:	81000017 	ldw	r4,0(r16)
 402754c:	203fda26 	beq	r4,zero,40274b8 <find_oldest_arp+0x70>
 4027550:	80800517 	ldw	r2,20(r16)
 4027554:	d0e04e17 	ldw	r3,-32456(gp)
 4027558:	8885c83a 	sub	r2,r17,r2
 402755c:	10ffd616 	blt	r2,r3,40274b8 <find_oldest_arp+0x70>
 4027560:	80800617 	ldw	r2,24(r16)
 4027564:	00c018c4 	movi	r3,99
 4027568:	8885c83a 	sub	r2,r17,r2
 402756c:	18bfd22e 	bgeu	r3,r2,40274b8 <find_oldest_arp+0x70>
 4027570:	0009883a 	mov	r4,zero
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
               ((int)(lticks - tp->lasttime)   >= TPS))
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
 4027574:	80000015 	stw	zero,0(r16)
 4027578:	003fcf06 	br	40274b8 <find_oldest_arp+0x70>
      }
      else if (!empty)
         empty = tp;          /* grab first empty slot */
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
 402757c:	a03fd91e 	bne	r20,zero,40274e4 <find_oldest_arp+0x9c>
 4027580:	9829883a 	mov	r20,r19
 4027584:	003fd706 	br	40274e4 <find_oldest_arp+0x9c>
 4027588:	0027883a 	mov	r19,zero
 402758c:	9829883a 	mov	r20,r19
 4027590:	003fd406 	br	40274e4 <find_oldest_arp+0x9c>

04027594 <cb_arpent_tmo>:
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
 4027594:	defffb04 	addi	sp,sp,-20
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027598:	01010134 	movhi	r4,1028
 402759c:	210dbc04 	addi	r4,r4,14064
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
 40275a0:	dcc00315 	stw	r19,12(sp)
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;
 40275a4:	00810134 	movhi	r2,1028
 40275a8:	10a93304 	addi	r2,r2,-23348

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 40275ac:	24c04004 	addi	r19,r4,256
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
 40275b0:	dc400115 	stw	r17,4(sp)
 40275b4:	dfc00415 	stw	ra,16(sp)
 40275b8:	dc800215 	stw	r18,8(sp)
 40275bc:	dc000015 	stw	r16,0(sp)
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;
 40275c0:	14400017 	ldw	r17,0(r2)

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 40275c4:	24c0262e 	bgeu	r4,r19,4027660 <cb_arpent_tmo+0xcc>
 40275c8:	2021883a 	mov	r16,r4
 40275cc:	0025883a 	mov	r18,zero
 40275d0:	00000706 	br	40275f0 <cb_arpent_tmo+0x5c>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 40275d4:	80c00617 	ldw	r3,24(r16)
 40275d8:	008018c4 	movi	r2,99
 40275dc:	88c7c83a 	sub	r3,r17,r3
 40275e0:	10c00f2e 	bgeu	r2,r3,4027620 <cb_arpent_tmo+0x8c>
                  ((int)(lticks - tp->lasttime)   >= TPS))
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 40275e4:	80000015 	stw	zero,0(r16)
{
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 40275e8:	84000804 	addi	r16,r16,32
 40275ec:	84c00f2e 	bgeu	r16,r19,402762c <cb_arpent_tmo+0x98>
   {
      if (tp->t_pro_addr != 0)
 40275f0:	80800017 	ldw	r2,0(r16)
 40275f4:	103ffc26 	beq	r2,zero,40275e8 <cb_arpent_tmo+0x54>
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
 40275f8:	80800417 	ldw	r2,16(r16)
 40275fc:	10001626 	beq	r2,zero,4027658 <cb_arpent_tmo+0xc4>
 4027600:	81400517 	ldw	r5,20(r16)
 4027604:	00801904 	movi	r2,100
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
 4027608:	8009883a 	mov	r4,r16
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   {
      if (tp->t_pro_addr != 0)
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
 402760c:	8947c83a 	sub	r3,r17,r5
 4027610:	10c00e36 	bltu	r2,r3,402764c <cb_arpent_tmo+0xb8>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 4027614:	d0a04e17 	ldw	r2,-32456(gp)
 4027618:	8947c83a 	sub	r3,r17,r5
 402761c:	18bfed0e 	bge	r3,r2,40275d4 <cb_arpent_tmo+0x40>
{
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027620:	84000804 	addi	r16,r16,32
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else
            arp_count++;
 4027624:	94800044 	addi	r18,r18,1
{
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027628:	84fff136 	bltu	r16,r19,40275f0 <cb_arpent_tmo+0x5c>
            arp_count++;
      }
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
 402762c:	90000c26 	beq	r18,zero,4027660 <cb_arpent_tmo+0xcc>
      in_timerkill(arp_timer);
      arp_timer = 0;
   }
      
   USE_ARG(arg);
}
 4027630:	dfc00417 	ldw	ra,16(sp)
 4027634:	dcc00317 	ldw	r19,12(sp)
 4027638:	dc800217 	ldw	r18,8(sp)
 402763c:	dc400117 	ldw	r17,4(sp)
 4027640:	dc000017 	ldw	r16,0(sp)
 4027644:	dec00504 	addi	sp,sp,20
 4027648:	f800283a 	ret
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
 402764c:	40273e40 	call	40273e4 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 4027650:	80000015 	stw	zero,0(r16)
 4027654:	003fe406 	br	40275e8 <cb_arpent_tmo+0x54>
 4027658:	81400517 	ldw	r5,20(r16)
 402765c:	003fed06 	br	4027614 <cb_arpent_tmo+0x80>
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
   {
      in_timerkill(arp_timer);
 4027660:	d1285617 	ldw	r4,-24232(gp)
 4027664:	4026f6c0 	call	4026f6c <in_timerkill>
      arp_timer = 0;
 4027668:	d0285615 	stw	zero,-24232(gp)
   }
      
   USE_ARG(arg);
}
 402766c:	dfc00417 	ldw	ra,16(sp)
 4027670:	dcc00317 	ldw	r19,12(sp)
 4027674:	dc800217 	ldw	r18,8(sp)
 4027678:	dc400117 	ldw	r17,4(sp)
 402767c:	dc000017 	ldw	r16,0(sp)
 4027680:	dec00504 	addi	sp,sp,20
 4027684:	f800283a 	ret

04027688 <arpReply>:
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
 4027688:	defff704 	addi	sp,sp,-36
 402768c:	dd000415 	stw	r20,16(sp)
 4027690:	dcc00315 	stw	r19,12(sp)
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
   outpkt = pk_alloc(arpsize);
 4027694:	05000c04 	movi	r20,48
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
 4027698:	2027883a 	mov	r19,r4
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 402769c:	01000084 	movi	r4,2
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
 40276a0:	dfc00815 	stw	ra,32(sp)
 40276a4:	dc400115 	stw	r17,4(sp)
 40276a8:	ddc00715 	stw	r23,28(sp)
 40276ac:	dd800615 	stw	r22,24(sp)
 40276b0:	dd400515 	stw	r21,20(sp)
 40276b4:	dc800215 	stw	r18,8(sp)
 40276b8:	dc000015 	stw	r16,0(sp)
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 40276bc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   outpkt = pk_alloc(arpsize);
 40276c0:	a009883a 	mov	r4,r20
 40276c4:	401bf840 	call	401bf84 <pk_alloc>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40276c8:	01000084 	movi	r4,2
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
   outpkt = pk_alloc(arpsize);
 40276cc:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40276d0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
 40276d4:	02000184 	movi	r8,6
   out->ar_hln = 6;
   out->ar_pln = 4;
   out->ar_op = ARREP;
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
   out->ar_spa = in->ar_tpa;
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
 40276d8:	01800184 	movi	r6,6

   LOCK_NET_RESOURCE(FREEQ_RESID);
   outpkt = pk_alloc(arpsize);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);

   if (!outpkt)
 40276dc:	88005326 	beq	r17,zero,402782c <arpReply+0x1a4>
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
 40276e0:	8d400117 	ldw	r21,4(r17)
   {
      dtrap();
      return;
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
 40276e4:	98c00617 	ldw	r3,24(r19)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
 40276e8:	00800204 	movi	r2,8
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
 40276ec:	ac800084 	addi	r18,r21,2
   {
      dtrap();
      return;
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
 40276f0:	88c00615 	stw	r3,24(r17)

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 40276f4:	9d800317 	ldw	r22,12(r19)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
 40276f8:	92000345 	stb	r8,13(r18)
 40276fc:	90800305 	stb	r2,12(r18)
      in = (struct arp_hdr *)(pkt->nb_prot);
 4027700:	99400317 	ldw	r5,12(r19)
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
 4027704:	8c000117 	ldw	r16,4(r17)
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
 4027708:	00c00204 	movi	r3,8
   out->ar_hln = 6;
   out->ar_pln = 4;
   out->ar_op = ARREP;
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
 402770c:	28800417 	ldw	r2,16(r5)
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
      in = (struct arp_hdr *)(pkt->nb_prot);
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
 4027710:	81000404 	addi	r4,r16,16
      outpkt->nb_plen = arpsize;
 4027714:	8d000415 	stw	r20,16(r17)

   out->ar_pro = ARPIP;
   out->ar_hln = 6;
   out->ar_pln = 4;
   out->ar_op = ARREP;
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
 4027718:	20800715 	stw	r2,28(r4)
   out->ar_spa = in->ar_tpa;
 402771c:	29c00717 	ldw	r7,28(r5)

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4027720:	00804004 	movi	r2,256
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
 4027724:	20c0008d 	sth	r3,2(r4)
   out->ar_hln = 6;
   out->ar_pln = 4;
   out->ar_op = ARREP;
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
   out->ar_spa = in->ar_tpa;
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
 4027728:	85c00904 	addi	r23,r16,36
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
   out->ar_hln = 6;
   out->ar_pln = 4;
   out->ar_op = ARREP;
 402772c:	00c08004 	movi	r3,512

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4027730:	8080040d 	sth	r2,16(r16)
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
   out->ar_hln = 6;
   out->ar_pln = 4;
 4027734:	00800104 	movi	r2,4
   out->ar_op = ARREP;
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
   out->ar_spa = in->ar_tpa;
 4027738:	21c00415 	stw	r7,16(r4)
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
   out->ar_hln = 6;
 402773c:	22000105 	stb	r8,4(r4)
   out->ar_pln = 4;
   out->ar_op = ARREP;
 4027740:	20c0018d 	sth	r3,6(r4)
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
   out->ar_hln = 6;
   out->ar_pln = 4;
 4027744:	20800145 	stb	r2,5(r4)
   out->ar_op = ARREP;
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
   out->ar_spa = in->ar_tpa;
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
 4027748:	29400204 	addi	r5,r5,8
 402774c:	b809883a 	mov	r4,r23
 4027750:	40096e80 	call	40096e8 <memmove>
   MEMMOVE(out->ar_sha, outpkt->net->n_mib->ifPhysAddress, 6);  /* fill in our mac address */
 4027754:	88c00617 	ldw	r3,24(r17)
 4027758:	85000604 	addi	r20,r16,24
 402775c:	a009883a 	mov	r4,r20
 4027760:	18802717 	ldw	r2,156(r3)
 4027764:	01800184 	movi	r6,6
 4027768:	11400517 	ldw	r5,20(r2)
 402776c:	40096e80 	call	40096e8 <memmove>

   /* prepend ethernet unicast header to arp reply */
   MEMMOVE(ethout + ET_DSTOFF, ethin + ET_SRCOFF, 6);
 4027770:	9009883a 	mov	r4,r18
 4027774:	b17ffe04 	addi	r5,r22,-8
 4027778:	01800184 	movi	r6,6
 402777c:	40096e80 	call	40096e8 <memmove>
   MEMMOVE(ethout + ET_SRCOFF, outpkt->net->n_mib->ifPhysAddress, 6);
 4027780:	88c00617 	ldw	r3,24(r17)
 4027784:	a9000204 	addi	r4,r21,8
 4027788:	01800184 	movi	r6,6
 402778c:	18802717 	ldw	r2,156(r3)
 4027790:	11400517 	ldw	r5,20(r2)
 4027794:	40096e80 	call	40096e8 <memmove>

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)out;
      MEMMOVE(&arwp->data[AR_SHA], out->ar_sha, 6);
 4027798:	a009883a 	mov	r4,r20
 402779c:	a00b883a 	mov	r5,r20
 40277a0:	01800184 	movi	r6,6
 40277a4:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &out->ar_spa, 4);
 40277a8:	81000784 	addi	r4,r16,30
 40277ac:	81400804 	addi	r5,r16,32
 40277b0:	01800104 	movi	r6,4
 40277b4:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], out->ar_tha, 6);
 40277b8:	b80b883a 	mov	r5,r23
 40277bc:	81000884 	addi	r4,r16,34
 40277c0:	01800184 	movi	r6,6
 40277c4:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
 40277c8:	81000a04 	addi	r4,r16,40
 40277cc:	81400b04 	addi	r5,r16,44
 40277d0:	01800104 	movi	r6,4
 40277d4:	40096e80 	call	40096e8 <memmove>
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
 40277d8:	88800617 	ldw	r2,24(r17)
   {
      outpkt->nb_prot = outpkt->nb_buff;
      outpkt->net->pkt_send(outpkt);
 40277dc:	8809883a 	mov	r4,r17
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
 40277e0:	10c00417 	ldw	r3,16(r2)
 40277e4:	18001c26 	beq	r3,zero,4027858 <arpReply+0x1d0>
   {
      outpkt->nb_prot = outpkt->nb_buff;
 40277e8:	88800117 	ldw	r2,4(r17)
 40277ec:	88800315 	stw	r2,12(r17)
      outpkt->net->pkt_send(outpkt);
 40277f0:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(outpkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   }
   /* input 'pkt' will be freed by caller */
   arpRepsOut++;
 40277f4:	d0a85517 	ldw	r2,-24236(gp)
 40277f8:	10800044 	addi	r2,r2,1
 40277fc:	d0a85515 	stw	r2,-24236(gp)
}
 4027800:	dfc00817 	ldw	ra,32(sp)
 4027804:	ddc00717 	ldw	r23,28(sp)
 4027808:	dd800617 	ldw	r22,24(sp)
 402780c:	dd400517 	ldw	r21,20(sp)
 4027810:	dd000417 	ldw	r20,16(sp)
 4027814:	dcc00317 	ldw	r19,12(sp)
 4027818:	dc800217 	ldw	r18,8(sp)
 402781c:	dc400117 	ldw	r17,4(sp)
 4027820:	dc000017 	ldw	r16,0(sp)
 4027824:	dec00904 	addi	sp,sp,36
 4027828:	f800283a 	ret
 402782c:	dfc00817 	ldw	ra,32(sp)
 4027830:	ddc00717 	ldw	r23,28(sp)
 4027834:	dd800617 	ldw	r22,24(sp)
 4027838:	dd400517 	ldw	r21,20(sp)
 402783c:	dd000417 	ldw	r20,16(sp)
 4027840:	dcc00317 	ldw	r19,12(sp)
 4027844:	dc800217 	ldw	r18,8(sp)
 4027848:	dc400117 	ldw	r17,4(sp)
 402784c:	dc000017 	ldw	r16,0(sp)
 4027850:	dec00904 	addi	sp,sp,36
   outpkt = pk_alloc(arpsize);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);

   if (!outpkt)
   {
      dtrap();
 4027854:	401c81c1 	jmpi	401c81c <dtrap>
      outpkt->nb_prot = outpkt->nb_buff;
      outpkt->net->pkt_send(outpkt);
   }
   else
   {
      outpkt->net->raw_send(pkt->net, outpkt->nb_buff, outpkt->nb_plen);
 4027858:	10c00317 	ldw	r3,12(r2)
 402785c:	89400117 	ldw	r5,4(r17)
 4027860:	89800417 	ldw	r6,16(r17)
 4027864:	99000617 	ldw	r4,24(r19)
 4027868:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 402786c:	01000084 	movi	r4,2
 4027870:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(outpkt);
 4027874:	8809883a 	mov	r4,r17
 4027878:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402787c:	01000084 	movi	r4,2
 4027880:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4027884:	003fdb06 	br	40277f4 <arpReply+0x16c>

04027888 <make_arp_entry>:
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
 4027888:	defffb04 	addi	sp,sp,-20
   struct arptabent *oldest;
   unsigned long lticks = cticks;
 402788c:	00810134 	movhi	r2,1028
 4027890:	10a93304 	addi	r2,r2,-23348
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
 4027894:	dcc00315 	stw	r19,12(sp)
 4027898:	dc800215 	stw	r18,8(sp)
 402789c:	dc400115 	stw	r17,4(sp)
 40278a0:	dc000015 	stw	r16,0(sp)
 40278a4:	dfc00415 	stw	ra,16(sp)
 40278a8:	2827883a 	mov	r19,r5
   struct arptabent *oldest;
   unsigned long lticks = cticks;
 40278ac:	14400017 	ldw	r17,0(r2)
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
 40278b0:	2025883a 	mov	r18,r4
   struct arptabent *oldest;
   unsigned long lticks = cticks;

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);
 40278b4:	40274480 	call	4027448 <find_oldest_arp>
 40278b8:	1021883a 	mov	r16,r2

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
 40278bc:	10800417 	ldw	r2,16(r2)
 40278c0:	10000426 	beq	r2,zero,40278d4 <make_arp_entry+0x4c>
 40278c4:	80800017 	ldw	r2,0(r16)
   {
      arp_free_pending(oldest);
 40278c8:	8009883a 	mov	r4,r16

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
 40278cc:	90800126 	beq	r18,r2,40278d4 <make_arp_entry+0x4c>
   {
      arp_free_pending(oldest);
 40278d0:	40273e40 	call	40273e4 <arp_free_pending>

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
   oldest->net = net;
   oldest->flags = 0;
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
 40278d4:	80000115 	stw	zero,4(r16)
 40278d8:	8000020d 	sth	zero,8(r16)
   oldest->createtime = oldest->lasttime = lticks;

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
 40278dc:	d0e85617 	ldw	r3,-24232(gp)
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
 40278e0:	010100b4 	movhi	r4,1026
 40278e4:	211d6504 	addi	r4,r4,30100
 40278e8:	0149c404 	movi	r5,10000
 40278ec:	000d883a 	mov	r6,zero
   {
      arp_free_pending(oldest);
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
 40278f0:	84800015 	stw	r18,0(r16)
   oldest->net = net;
 40278f4:	84c00315 	stw	r19,12(r16)
   oldest->flags = 0;
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
   oldest->createtime = oldest->lasttime = lticks;
 40278f8:	84400615 	stw	r17,24(r16)
 40278fc:	84400515 	stw	r17,20(r16)
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
   oldest->net = net;
   oldest->flags = 0;
 4027900:	8000070d 	sth	zero,28(r16)
   oldest->createtime = oldest->lasttime = lticks;

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
 4027904:	18000b26 	beq	r3,zero,4027934 <make_arp_entry+0xac>
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
 4027908:	18800217 	ldw	r2,8(r3)
 402790c:	8885883a 	add	r2,r17,r2
 4027910:	18800315 	stw	r2,12(r3)
              ((struct intimer *)arp_timer)->interval + lticks;
   }

   return oldest;
}
 4027914:	8005883a 	mov	r2,r16
 4027918:	dfc00417 	ldw	ra,16(sp)
 402791c:	dcc00317 	ldw	r19,12(sp)
 4027920:	dc800217 	ldw	r18,8(sp)
 4027924:	dc400117 	ldw	r17,4(sp)
 4027928:	dc000017 	ldw	r16,0(sp)
 402792c:	dec00504 	addi	sp,sp,20
 4027930:	f800283a 	ret
   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
 4027934:	4026ee80 	call	4026ee8 <in_timerset>
 4027938:	d0a85615 	stw	r2,-24232(gp)
      ((struct intimer *)arp_timer)->tmo =
              ((struct intimer *)arp_timer)->interval + lticks;
   }

   return oldest;
}
 402793c:	8005883a 	mov	r2,r16
 4027940:	dfc00417 	ldw	ra,16(sp)
 4027944:	dcc00317 	ldw	r19,12(sp)
 4027948:	dc800217 	ldw	r18,8(sp)
 402794c:	dc400117 	ldw	r17,4(sp)
 4027950:	dc000017 	ldw	r16,0(sp)
 4027954:	dec00504 	addi	sp,sp,20
 4027958:	f800283a 	ret

0402795c <et_send>:
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 402795c:	defff904 	addi	sp,sp,-28
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
   pkt->nb_plen += ETHHDR_SIZE;
 4027960:	20c00417 	ldw	r3,16(r4)
{
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
 4027964:	00810134 	movhi	r2,1028
 4027968:	10a93304 	addi	r2,r2,-23348
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 402796c:	dcc00315 	stw	r19,12(sp)
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
 4027970:	24c00317 	ldw	r19,12(r4)
{
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
 4027974:	11800017 	ldw	r6,0(r2)

int
et_send(PACKET pkt, struct arptabent *tp)
{
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 4027978:	21c00617 	ldw	r7,24(r4)
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
 402797c:	22000117 	ldw	r8,4(r4)
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 4027980:	dc800215 	stw	r18,8(sp)
 4027984:	dc000015 	stw	r16,0(sp)
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
   pkt->nb_plen += ETHHDR_SIZE;
 4027988:	18c00404 	addi	r3,r3,16
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 402798c:	2021883a 	mov	r16,r4
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
 4027990:	98bffc04 	addi	r2,r19,-16
   pkt->nb_plen += ETHHDR_SIZE;
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
 4027994:	9cbffc84 	addi	r18,r19,-14
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 4027998:	dd400515 	stw	r21,20(sp)
 402799c:	dd000415 	stw	r20,16(sp)
 40279a0:	dc400115 	stw	r17,4(sp)
 40279a4:	dfc00615 	stw	ra,24(sp)
 40279a8:	2823883a 	mov	r17,r5
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
      panic("et_send: prepend");
 40279ac:	010100f4 	movhi	r4,1027
 40279b0:	2115b504 	addi	r4,r4,22228
{
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
   int err;

   tp->lasttime = cticks;
 40279b4:	29800615 	stw	r6,24(r5)
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
 40279b8:	80800315 	stw	r2,12(r16)
   pkt->nb_plen += ETHHDR_SIZE;
 40279bc:	80c00415 	stw	r3,16(r16)

int
et_send(PACKET pkt, struct arptabent *tp)
{
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 40279c0:	3d002717 	ldw	r20,156(r7)
   int err;

   tp->lasttime = cticks;
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
   pkt->nb_plen += ETHHDR_SIZE;
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
 40279c4:	05400084 	movi	r21,2
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
 40279c8:	92001b36 	bltu	r18,r8,4027a38 <et_send+0xdc>
      panic("et_send: prepend");

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
 40279cc:	9009883a 	mov	r4,r18
 40279d0:	89400104 	addi	r5,r17,4
 40279d4:	01800184 	movi	r6,6
 40279d8:	40096e80 	call	40096e8 <memmove>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */
 40279dc:	a1400517 	ldw	r5,20(r20)
 40279e0:	993ffe04 	addi	r4,r19,-8
 40279e4:	01800184 	movi	r6,6
 40279e8:	40096e80 	call	40096e8 <memmove>

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
 40279ec:	88c0070b 	ldhu	r3,28(r17)
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
 40279f0:	8009883a 	mov	r4,r16

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
 40279f4:	18c000cc 	andi	r3,r3,3
 40279f8:	1d400226 	beq	r3,r21,4027a04 <et_send+0xa8>
      ET_TYPE_SET(ethhdr, ntohs(ARPIP));
 40279fc:	00800204 	movi	r2,8
 4027a00:	90800305 	stb	r2,12(r18)
 4027a04:	90000345 	stb	zero,13(r18)
      ET_TYPE_SET(ethhdr, len8023);
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
 4027a08:	81c00617 	ldw	r7,24(r16)
 4027a0c:	38800417 	ldw	r2,16(r7)
 4027a10:	10000b26 	beq	r2,zero,4027a40 <et_send+0xe4>
      pk_free(pkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   }

   return (err);
}
 4027a14:	dfc00617 	ldw	ra,24(sp)
 4027a18:	dd400517 	ldw	r21,20(sp)
 4027a1c:	dd000417 	ldw	r20,16(sp)
 4027a20:	dcc00317 	ldw	r19,12(sp)
 4027a24:	dc800217 	ldw	r18,8(sp)
 4027a28:	dc400117 	ldw	r17,4(sp)
 4027a2c:	dc000017 	ldw	r16,0(sp)
 4027a30:	dec00704 	addi	sp,sp,28
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
 4027a34:	1000683a 	jmp	r2
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
      panic("et_send: prepend");
 4027a38:	4019c440 	call	4019c44 <panic>
 4027a3c:	003fe306 	br	40279cc <et_send+0x70>
   if (pkt->net->pkt_send)
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 4027a40:	81400317 	ldw	r5,12(r16)
 4027a44:	81800417 	ldw	r6,16(r16)
 4027a48:	38c00317 	ldw	r3,12(r7)
 4027a4c:	3809883a 	mov	r4,r7
 4027a50:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4027a54:	a809883a 	mov	r4,r21
   if (pkt->net->pkt_send)
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 4027a58:	1023883a 	mov	r17,r2
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4027a5c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 4027a60:	8009883a 	mov	r4,r16
 4027a64:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027a68:	a809883a 	mov	r4,r21
 4027a6c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   }

   return (err);
}
 4027a70:	8805883a 	mov	r2,r17
 4027a74:	dfc00617 	ldw	ra,24(sp)
 4027a78:	dd400517 	ldw	r21,20(sp)
 4027a7c:	dd000417 	ldw	r20,16(sp)
 4027a80:	dcc00317 	ldw	r19,12(sp)
 4027a84:	dc800217 	ldw	r18,8(sp)
 4027a88:	dc400117 	ldw	r17,4(sp)
 4027a8c:	dc000017 	ldw	r16,0(sp)
 4027a90:	dec00704 	addi	sp,sp,28
 4027a94:	f800283a 	ret

04027a98 <send_arp>:
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
 4027a98:	defff604 	addi	sp,sp,-40
 4027a9c:	dd800615 	stw	r22,24(sp)
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
 4027aa0:	25800617 	ldw	r22,24(r4)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
 4027aa4:	00bfffc4 	movi	r2,-1
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
 4027aa8:	ddc00715 	stw	r23,28(sp)
 4027aac:	dcc00315 	stw	r19,12(sp)
 4027ab0:	dc000015 	stw	r16,0(sp)
 4027ab4:	dfc00915 	stw	ra,36(sp)
 4027ab8:	df000815 	stw	fp,32(sp)
 4027abc:	dd400515 	stw	r21,20(sp)
 4027ac0:	dd000415 	stw	r20,16(sp)
 4027ac4:	dc800215 	stw	r18,8(sp)
 4027ac8:	dc400115 	stw	r17,4(sp)
 4027acc:	2027883a 	mov	r19,r4
 4027ad0:	2821883a 	mov	r16,r5
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
   struct arp_hdr *  arphdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 4027ad4:	b5c02717 	ldw	r23,156(r22)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
 4027ad8:	28806726 	beq	r5,r2,4027c78 <send_arp+0x1e0>
 4027adc:	b0800c17 	ldw	r2,48(r22)
 4027ae0:	0084303a 	nor	r2,zero,r2
 4027ae4:	2886703a 	and	r3,r5,r2
 4027ae8:	10c06326 	beq	r2,r3,4027c78 <send_arp+0x1e0>
 4027aec:	2804963a 	slli	r2,r5,24
 4027af0:	00f80034 	movhi	r3,57344
 4027af4:	10bc002c 	andhi	r2,r2,61440
 4027af8:	10c05f26 	beq	r2,r3,4027c78 <send_arp+0x1e0>

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
 4027afc:	20c00717 	ldw	r3,28(r4)
 4027b00:	b0800a17 	ldw	r2,40(r22)
 4027b04:	1880031e 	bne	r3,r2,4027b14 <send_arp+0x7c>
 4027b08:	18c03fcc 	andi	r3,r3,255
 4027b0c:	00801fc4 	movi	r2,127
 4027b10:	18808e1e 	bne	r3,r2,4027d4c <send_arp+0x2b4>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_NO_ROUTE;
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 4027b14:	01000084 	movi	r4,2
   arppkt = pk_alloc(arpsize);
 4027b18:	07000c04 	movi	fp,48
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_NO_ROUTE;
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 4027b1c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 4027b20:	e009883a 	mov	r4,fp
 4027b24:	401bf840 	call	401bf84 <pk_alloc>
 4027b28:	1025883a 	mov	r18,r2
   if (!arppkt)
 4027b2c:	10008f26 	beq	r2,zero,4027d6c <send_arp+0x2d4>
   {
      pk_free(pkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027b30:	01000084 	movi	r4,2
 4027b34:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
   arppkt->nb_plen = arpsize;
   arppkt->net = pkt->net;
 4027b38:	98800617 	ldw	r2,24(r19)
      pk_free(pkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   arppkt->nb_prot = arppkt->nb_buff;
 4027b3c:	90c00117 	ldw	r3,4(r18)
   arppkt->nb_plen = arpsize;
   arppkt->net = pkt->net;

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
 4027b40:	8009883a 	mov	r4,r16
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   arppkt->nb_prot = arppkt->nb_buff;
   arppkt->nb_plen = arpsize;
   arppkt->net = pkt->net;
 4027b44:	90800615 	stw	r2,24(r18)

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
 4027b48:	99400617 	ldw	r5,24(r19)
      pk_free(pkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_RESOURCE;
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   arppkt->nb_prot = arppkt->nb_buff;
 4027b4c:	90c00315 	stw	r3,12(r18)
   arppkt->nb_plen = arpsize;
 4027b50:	97000415 	stw	fp,16(r18)
   arppkt->net = pkt->net;

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
 4027b54:	40278880 	call	4027888 <make_arp_entry>

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 4027b58:	94400117 	ldw	r17,4(r18)
   arppkt->net = pkt->net;

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */
 4027b5c:	14c00415 	stw	r19,16(r2)
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
 4027b60:	05400184 	movi	r21,6

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 4027b64:	88c00404 	addi	r3,r17,16
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
 4027b68:	00800104 	movi	r2,4
 4027b6c:	18800145 	stb	r2,5(r3)
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
 4027b70:	1d400105 	stb	r21,4(r3)
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
 4027b74:	98800617 	ldw	r2,24(r19)

   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
 4027b78:	1c000715 	stw	r16,28(r3)
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 4027b7c:	b9400517 	ldw	r5,20(r23)
   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
 4027b80:	11800a17 	ldw	r6,40(r2)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4027b84:	01004004 	movi	r4,256
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 4027b88:	8cc00604 	addi	r19,r17,24
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 4027b8c:	05000204 	movi	r20,8
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
 4027b90:	19800415 	stw	r6,16(r3)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
 4027b94:	1900018d 	sth	r4,6(r3)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4027b98:	8900040d 	sth	r4,16(r17)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 4027b9c:	1d00008d 	sth	r20,2(r3)
   arphdr->ar_hln = 6;
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 4027ba0:	9809883a 	mov	r4,r19
 4027ba4:	01800184 	movi	r6,6
 4027ba8:	40096e80 	call	40096e8 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 4027bac:	00ffffc4 	movi	r3,-1
 4027bb0:	88c00085 	stb	r3,2(r17)
   oldest = make_arp_entry(dest_ip, pkt->net);

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 4027bb4:	8c000084 	addi	r16,r17,2
   arphdr->ar_pln = 4;
   arphdr->ar_op = ARREQ;
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 4027bb8:	80c00145 	stb	r3,5(r16)
 4027bbc:	80c00045 	stb	r3,1(r16)
 4027bc0:	80c00085 	stb	r3,2(r16)
 4027bc4:	80c000c5 	stb	r3,3(r16)
 4027bc8:	80c00105 	stb	r3,4(r16)
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 4027bcc:	b9400517 	ldw	r5,20(r23)
 4027bd0:	89000204 	addi	r4,r17,8
 4027bd4:	01800184 	movi	r6,6
 4027bd8:	40096e80 	call	40096e8 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 4027bdc:	9809883a 	mov	r4,r19
 4027be0:	980b883a 	mov	r5,r19
 4027be4:	01800184 	movi	r6,6
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 4027be8:	85400345 	stb	r21,13(r16)
 4027bec:	85000305 	stb	r20,12(r16)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 4027bf0:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 4027bf4:	89000784 	addi	r4,r17,30
 4027bf8:	89400804 	addi	r5,r17,32
 4027bfc:	01800104 	movi	r6,4
 4027c00:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 4027c04:	89000884 	addi	r4,r17,34
 4027c08:	89400904 	addi	r5,r17,36
 4027c0c:	01800184 	movi	r6,6
 4027c10:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 4027c14:	89400b04 	addi	r5,r17,44
 4027c18:	89000a04 	addi	r4,r17,40
 4027c1c:	01800104 	movi	r6,4
 4027c20:	40096e80 	call	40096e8 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 4027c24:	b0800417 	ldw	r2,16(r22)
 4027c28:	10003c26 	beq	r2,zero,4027d1c <send_arp+0x284>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 4027c2c:	9009883a 	mov	r4,r18
 4027c30:	103ee83a 	callr	r2
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(arppkt);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
   }
   arpReqsOut++;
 4027c34:	d0a85317 	ldw	r2,-24244(gp)
 4027c38:	00c00044 	movi	r3,1
 4027c3c:	10c5883a 	add	r2,r2,r3
 4027c40:	d0a85315 	stw	r2,-24244(gp)
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
}
 4027c44:	1805883a 	mov	r2,r3
 4027c48:	dfc00917 	ldw	ra,36(sp)
 4027c4c:	df000817 	ldw	fp,32(sp)
 4027c50:	ddc00717 	ldw	r23,28(sp)
 4027c54:	dd800617 	ldw	r22,24(sp)
 4027c58:	dd400517 	ldw	r21,20(sp)
 4027c5c:	dd000417 	ldw	r20,16(sp)
 4027c60:	dcc00317 	ldw	r19,12(sp)
 4027c64:	dc800217 	ldw	r18,8(sp)
 4027c68:	dc400117 	ldw	r17,4(sp)
 4027c6c:	dc000017 	ldw	r16,0(sp)
 4027c70:	dec00a04 	addi	sp,sp,40
 4027c74:	f800283a 	ret
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask))))

#endif /* IP_MULTICAST */
   {
      /* get unused or oldest entry in table */
      oldest = make_arp_entry(dest_ip, pkt->net);
 4027c78:	b00b883a 	mov	r5,r22
 4027c7c:	8009883a 	mov	r4,r16
 4027c80:	40278880 	call	4027888 <make_arp_entry>
 4027c84:	100d883a 	mov	r6,r2

      /* set MAC destination to ethernet broadcast (all FFs) */
      MEMSET(oldest->t_phy_addr, 0xFF, 6);
 4027c88:	00bfffc4 	movi	r2,-1
 4027c8c:	3080020d 	sth	r2,8(r6)
 4027c90:	30800115 	stw	r2,4(r6)
#ifdef IP_MULTICAST
      /* If n_mcastlist routine is defined in the net structure,
         map IP mcast to Ether multicast  */

#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
 4027c94:	98c00617 	ldw	r3,24(r19)
 4027c98:	18802b17 	ldw	r2,172(r3)
 4027c9c:	10000626 	beq	r2,zero,4027cb8 <send_arp+0x220>
 4027ca0:	8006963a 	slli	r3,r16,24
 4027ca4:	00b80034 	movhi	r2,57344
 4027ca8:	800ed63a 	srli	r7,r16,24
 4027cac:	18fc002c 	andhi	r3,r3,61440
 4027cb0:	8008d23a 	srli	r4,r16,8
 4027cb4:	18800e26 	beq	r3,r2,4027cf0 <send_arp+0x258>
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
 4027cb8:	9809883a 	mov	r4,r19
 4027cbc:	300b883a 	mov	r5,r6
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
}
 4027cc0:	dfc00917 	ldw	ra,36(sp)
 4027cc4:	df000817 	ldw	fp,32(sp)
 4027cc8:	ddc00717 	ldw	r23,28(sp)
 4027ccc:	dd800617 	ldw	r22,24(sp)
 4027cd0:	dd400517 	ldw	r21,20(sp)
 4027cd4:	dd000417 	ldw	r20,16(sp)
 4027cd8:	dcc00317 	ldw	r19,12(sp)
 4027cdc:	dc800217 	ldw	r18,8(sp)
 4027ce0:	dc400117 	ldw	r17,4(sp)
 4027ce4:	dc000017 	ldw	r16,0(sp)
 4027ce8:	dec00a04 	addi	sp,sp,40
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
 4027cec:	402795c1 	jmpi	402795c <et_send>
         dest_ip_ptr.l = dest_ip;
         oldest->t_phy_addr[0] = 0x01;
         oldest->t_phy_addr[1] = 0x00;
         oldest->t_phy_addr[2] = 0x5e;
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
 4027cf0:	800ad43a 	srli	r5,r16,16
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
         oldest->t_phy_addr[0] = 0x01;
         oldest->t_phy_addr[1] = 0x00;
         oldest->t_phy_addr[2] = 0x5e;
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
 4027cf4:	21001fcc 	andi	r4,r4,127
#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
         oldest->t_phy_addr[0] = 0x01;
 4027cf8:	00800044 	movi	r2,1
         oldest->t_phy_addr[1] = 0x00;
         oldest->t_phy_addr[2] = 0x5e;
 4027cfc:	00c01784 	movi	r3,94
#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
         oldest->t_phy_addr[0] = 0x01;
 4027d00:	30800105 	stb	r2,4(r6)
         oldest->t_phy_addr[1] = 0x00;
         oldest->t_phy_addr[2] = 0x5e;
 4027d04:	30c00185 	stb	r3,6(r6)
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
 4027d08:	310001c5 	stb	r4,7(r6)
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
 4027d0c:	31400205 	stb	r5,8(r6)
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
 4027d10:	31c00245 	stb	r7,9(r6)
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
         oldest->t_phy_addr[0] = 0x01;
         oldest->t_phy_addr[1] = 0x00;
 4027d14:	30000145 	stb	zero,5(r6)
 4027d18:	003fe706 	br	4027cb8 <send_arp+0x220>
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
      net->pkt_send(arppkt);  /* driver should free arppkt later */
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 4027d1c:	b0c00317 	ldw	r3,12(r22)
 4027d20:	91400117 	ldw	r5,4(r18)
 4027d24:	91000617 	ldw	r4,24(r18)
 4027d28:	e00d883a 	mov	r6,fp
 4027d2c:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4027d30:	01000084 	movi	r4,2
 4027d34:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 4027d38:	9009883a 	mov	r4,r18
 4027d3c:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027d40:	01000084 	movi	r4,2
 4027d44:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4027d48:	003fba06 	br	4027c34 <send_arp+0x19c>
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4027d4c:	01000084 	movi	r4,2
 4027d50:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 4027d54:	9809883a 	mov	r4,r19
 4027d58:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027d5c:	01000084 	movi	r4,2
 4027d60:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4027d64:	00fff7c4 	movi	r3,-33
 4027d68:	003fb606 	br	4027c44 <send_arp+0x1ac>
   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
   arppkt = pk_alloc(arpsize);
   if (!arppkt)
   {
      pk_free(pkt);
 4027d6c:	9809883a 	mov	r4,r19
 4027d70:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027d74:	01000084 	movi	r4,2
 4027d78:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4027d7c:	00fffa84 	movi	r3,-22
 4027d80:	003fb006 	br	4027c44 <send_arp+0x1ac>

04027d84 <send_via_arp>:
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
 4027d84:	defffc04 	addi	sp,sp,-16
   struct arptabent *tp;
   unsigned long lticks = cticks;
 4027d88:	00810134 	movhi	r2,1028
 4027d8c:	10a93304 	addi	r2,r2,-23348
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
 4027d90:	dc400215 	stw	r17,8(sp)
 4027d94:	dc000115 	stw	r16,4(sp)
 4027d98:	dfc00315 	stw	ra,12(sp)
 4027d9c:	2021883a 	mov	r16,r4
   struct arptabent *tp;
   unsigned long lticks = cticks;
 4027da0:	14400017 	ldw	r17,0(r2)
   int err;

   /* don't allow zero dest */
   if (dest_ip == 0)
 4027da4:	28003426 	beq	r5,zero,4027e78 <send_via_arp+0xf4>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return SEND_DROPPED; 
   }

   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
 4027da8:	d0a85717 	ldw	r2,-24228(gp)
 4027dac:	00c01904 	movi	r3,100
 4027db0:	8885c83a 	sub	r2,r17,r2
 4027db4:	18800e2e 	bgeu	r3,r2,4027df0 <send_via_arp+0x6c>
      arpcache = (struct arptabent *)NULL;
 4027db8:	d0285115 	stw	zero,-24252(gp)
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
      tp = arpcache;
   else
   {
      /* scan arp table for an existing entry */
      tp = find_oldest_arp(dest_ip);
 4027dbc:	2809883a 	mov	r4,r5
 4027dc0:	d9400015 	stw	r5,0(sp)
 4027dc4:	40274480 	call	4027448 <find_oldest_arp>
 4027dc8:	1007883a 	mov	r3,r2
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
 4027dcc:	d9400017 	ldw	r5,0(sp)
 4027dd0:	10800017 	ldw	r2,0(r2)
 4027dd4:	28800a26 	beq	r5,r2,4027e00 <send_via_arp+0x7c>
         err = et_send(pkt, tp);
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
 4027dd8:	8009883a 	mov	r4,r16

   return (err);
}
 4027ddc:	dfc00317 	ldw	ra,12(sp)
 4027de0:	dc400217 	ldw	r17,8(sp)
 4027de4:	dc000117 	ldw	r16,4(sp)
 4027de8:	dec00404 	addi	sp,sp,16
         err = et_send(pkt, tp);
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
 4027dec:	4027a981 	jmpi	4027a98 <send_arp>
   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
      arpcache = (struct arptabent *)NULL;

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
 4027df0:	d0e85117 	ldw	r3,-24252(gp)
 4027df4:	183ff126 	beq	r3,zero,4027dbc <send_via_arp+0x38>
 4027df8:	18800017 	ldw	r2,0(r3)
 4027dfc:	28bfef1e 	bne	r5,r2,4027dbc <send_via_arp+0x38>
      tp = find_oldest_arp(dest_ip);
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
   {
      if (tp->pending)  /* arp already pending for this IP? */
 4027e00:	19400417 	ldw	r5,16(r3)
 4027e04:	28001326 	beq	r5,zero,4027e54 <send_via_arp+0xd0>
      {
         if (lilfreeq.q_len < 2)
 4027e08:	00810134 	movhi	r2,1028
 4027e0c:	108c1d04 	addi	r2,r2,12404
 4027e10:	11000217 	ldw	r4,8(r2)
 4027e14:	00c00044 	movi	r3,1
 4027e18:	19000216 	blt	r3,r4,4027e24 <send_via_arp+0xa0>
 4027e1c:	00001606 	br	4027e78 <send_via_arp+0xf4>
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);  /* sorry, we have to dump this one.. */
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027e20:	100b883a 	mov	r5,r2
         else
         {
            PACKET tmppkt=tp->pending;

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
 4027e24:	28800017 	ldw	r2,0(r5)
 4027e28:	103ffd1e 	bne	r2,zero,4027e20 <send_via_arp+0x9c>
               tmppkt = tmppkt->next;
            tmppkt->next = pkt;      /* add new pkt to end of list */
 4027e2c:	2c000015 	stw	r16,0(r5)
            if (pkt->next)
 4027e30:	80800017 	ldw	r2,0(r16)
 4027e34:	10000126 	beq	r2,zero,4027e3c <send_via_arp+0xb8>
            {
               dtrap();              /* chain of pkts to be sent ??? */
 4027e38:	401c81c0 	call	401c81c <dtrap>
 4027e3c:	00800044 	movi	r2,1
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);

   return (err);
}
 4027e40:	dfc00317 	ldw	ra,12(sp)
 4027e44:	dc400217 	ldw	r17,8(sp)
 4027e48:	dc000117 	ldw	r16,4(sp)
 4027e4c:	dec00404 	addi	sp,sp,16
 4027e50:	f800283a 	ret
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
         cachetime = lticks;  /* mark time we cached */
         err = et_send(pkt, tp);
 4027e54:	8009883a 	mov	r4,r16
 4027e58:	180b883a 	mov	r5,r3
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
         cachetime = lticks;  /* mark time we cached */
 4027e5c:	d4685715 	stw	r17,-24228(gp)
            err = ENP_SEND_PENDING; /* packet queued pending ARP reply */
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
 4027e60:	d0e85115 	stw	r3,-24252(gp)
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);

   return (err);
}
 4027e64:	dfc00317 	ldw	ra,12(sp)
 4027e68:	dc400217 	ldw	r17,8(sp)
 4027e6c:	dc000117 	ldw	r16,4(sp)
 4027e70:	dec00404 	addi	sp,sp,16
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
         cachetime = lticks;  /* mark time we cached */
         err = et_send(pkt, tp);
 4027e74:	402795c1 	jmpi	402795c <et_send>
         {
            /* system is depleted of resources - free the
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4027e78:	01000084 	movi	r4,2
 4027e7c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(pkt);  /* sorry, we have to dump this one.. */
 4027e80:	8009883a 	mov	r4,r16
 4027e84:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027e88:	01000084 	movi	r4,2
 4027e8c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4027e90:	00bffa84 	movi	r2,-22
 4027e94:	003fea06 	br	4027e40 <send_via_arp+0xbc>

04027e98 <arp_send_pending>:
   PACKET tmppkt = entry->pending;

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 4027e98:	20c00417 	ldw	r3,16(r4)
 * Clear the list (entry->pending) after sending the packets.
 */

void
arp_send_pending(struct arptabent *entry)
{
 4027e9c:	defffe04 	addi	sp,sp,-8
 4027ea0:	dc000015 	stw	r16,0(sp)
 4027ea4:	dfc00115 	stw	ra,4(sp)
 4027ea8:	2021883a 	mov	r16,r4
   PACKET tmppkt = entry->pending;

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 4027eac:	18000826 	beq	r3,zero,4027ed0 <arp_send_pending+0x38>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
 4027eb0:	18800017 	ldw	r2,0(r3)
      tmppkt->next = (PACKET)NULL;
      et_send(tmppkt, entry);          /* try send again */
 4027eb4:	1809883a 	mov	r4,r3
 4027eb8:	800b883a 	mov	r5,r16
   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
 4027ebc:	80800415 	stw	r2,16(r16)
      tmppkt->next = (PACKET)NULL;
 4027ec0:	18000015 	stw	zero,0(r3)
      et_send(tmppkt, entry);          /* try send again */
 4027ec4:	402795c0 	call	402795c <et_send>
   PACKET tmppkt = entry->pending;

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 4027ec8:	80c00417 	ldw	r3,16(r16)
 4027ecc:	183ff81e 	bne	r3,zero,4027eb0 <arp_send_pending+0x18>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
      tmppkt->next = (PACKET)NULL;
      et_send(tmppkt, entry);          /* try send again */
   }
}
 4027ed0:	dfc00117 	ldw	ra,4(sp)
 4027ed4:	dc000017 	ldw	r16,0(sp)
 4027ed8:	dec00204 	addi	sp,sp,8
 4027edc:	f800283a 	ret

04027ee0 <arprcv>:
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 4027ee0:	defffc04 	addi	sp,sp,-16
 4027ee4:	dc000015 	stw	r16,0(sp)
#ifdef IEEE_802_3
   int      ieee = FALSE;     /* TRUE if received packet is 802.3 */
#endif

   eth = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
   arphdr = (struct arp_hdr *)(pkt->nb_prot);
 4027ee8:	24000317 	ldw	r16,12(r4)
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 4027eec:	dc400115 	stw	r17,4(sp)
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 4027ef0:	01800104 	movi	r6,4
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 4027ef4:	2023883a 	mov	r17,r4
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 4027ef8:	81400604 	addi	r5,r16,24
 4027efc:	81000704 	addi	r4,r16,28
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 4027f00:	dfc00315 	stw	ra,12(sp)
 4027f04:	dc800215 	stw	r18,8(sp)
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 4027f08:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
 4027f0c:	81000504 	addi	r4,r16,20
 4027f10:	81400484 	addi	r5,r16,18
 4027f14:	01800184 	movi	r6,6
 4027f18:	40096e80 	call	40096e8 <memmove>
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 4027f1c:	84800204 	addi	r18,r16,8
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
      MEMMOVE(&arphdr->ar_spa, &arwp->data[AR_SPA], 4);
 4027f20:	01800104 	movi	r6,4
 4027f24:	81000404 	addi	r4,r16,16
 4027f28:	81400384 	addi	r5,r16,14
 4027f2c:	40096e80 	call	40096e8 <memmove>
      MEMMOVE(arphdr->ar_sha, &arwp->data[AR_SHA], 6);
 4027f30:	9009883a 	mov	r4,r18
 4027f34:	900b883a 	mov	r5,r18
 4027f38:	01800184 	movi	r6,6
 4027f3c:	40096e80 	call	40096e8 <memmove>
   }
#endif

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
 4027f40:	88c00617 	ldw	r3,24(r17)
 4027f44:	81000717 	ldw	r4,28(r16)
 4027f48:	18800a17 	ldw	r2,40(r3)
 4027f4c:	20801126 	beq	r4,r2,4027f94 <arprcv+0xb4>
 4027f50:	2004963a 	slli	r2,r4,24
 4027f54:	00f80034 	movhi	r3,57344
 4027f58:	10bc002c 	andhi	r2,r2,61440
 4027f5c:	10c00d26 	beq	r2,r3,4027f94 <arprcv+0xb4>

#ifdef IEEE_802_3_ONLY
drop:
#endif /* IEEE_802_3_ONLY */
   /* fall to here if packet is not in table */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4027f60:	01000084 	movi	r4,2
 4027f64:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(pkt);
 4027f68:	8809883a 	mov	r4,r17
 4027f6c:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027f70:	01000084 	movi	r4,2
 4027f74:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4027f78:	00800084 	movi	r2,2

   return ENP_NOT_MINE;
}
 4027f7c:	dfc00317 	ldw	ra,12(sp)
 4027f80:	dc800217 	ldw	r18,8(sp)
 4027f84:	dc400117 	ldw	r17,4(sp)
 4027f88:	dc000017 	ldw	r16,0(sp)
 4027f8c:	dec00404 	addi	sp,sp,16
 4027f90:	f800283a 	ret
      pk_free(pkt);     /* not for us, dump & ret (proxy here later?) */
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return (ENP_NOT_MINE);
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
 4027f94:	80c0018b 	ldhu	r3,6(r16)
 4027f98:	00804004 	movi	r2,256
 4027f9c:	18802326 	beq	r3,r2,402802c <arprcv+0x14c>
      make_arp_entry(arphdr->ar_spa, pkt->net);
      /* fall thru to arp reply logic to finish our table entry */
   }
   else     /* ARP reply, count and fall thru to logic to update table */
   {
      arpRepsIn++;
 4027fa0:	d0a85417 	ldw	r2,-24240(gp)
 4027fa4:	10800044 	addi	r2,r2,1
 4027fa8:	d0a85415 	stw	r2,-24240(gp)
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027fac:	00c10134 	movhi	r3,1028
 4027fb0:	18cdbc04 	addi	r3,r3,14064
 4027fb4:	19404004 	addi	r5,r3,256
 4027fb8:	197fe92e 	bgeu	r3,r5,4027f60 <arprcv+0x80>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
 4027fbc:	81000417 	ldw	r4,16(r16)
 4027fc0:	18800017 	ldw	r2,0(r3)
 4027fc4:	20802226 	beq	r4,r2,4028050 <arprcv+0x170>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
         pk_free(pkt);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);

         return (0);
 4027fc8:	1821883a 	mov	r16,r3
      arpRepsIn++;
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4027fcc:	84000804 	addi	r16,r16,32
 4027fd0:	817fe32e 	bgeu	r16,r5,4027f60 <arprcv+0x80>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
 4027fd4:	80800017 	ldw	r2,0(r16)
 4027fd8:	113ffc1e 	bne	r2,r4,4027fcc <arprcv+0xec>
            tp->flags |= ET_SNAP;
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
 4027fdc:	81000104 	addi	r4,r16,4
 4027fe0:	900b883a 	mov	r5,r18
 4027fe4:	01800184 	movi	r6,6
 4027fe8:	40096e80 	call	40096e8 <memmove>
         tp->lasttime = cticks;
 4027fec:	00c10134 	movhi	r3,1028
 4027ff0:	18e93304 	addi	r3,r3,-23348
 4027ff4:	18800017 	ldw	r2,0(r3)
         if (tp->pending)     /* packet waiting for this IP entry? */
 4027ff8:	81000417 	ldw	r4,16(r16)
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
         tp->lasttime = cticks;
 4027ffc:	80800615 	stw	r2,24(r16)
         if (tp->pending)     /* packet waiting for this IP entry? */
 4028000:	20000226 	beq	r4,zero,402800c <arprcv+0x12c>
         {
            arp_send_pending(tp);
 4028004:	8009883a 	mov	r4,r16
 4028008:	4027e980 	call	4027e98 <arp_send_pending>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
 402800c:	01000084 	movi	r4,2
 4028010:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 4028014:	8809883a 	mov	r4,r17
 4028018:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402801c:	01000084 	movi	r4,2
 4028020:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4028024:	0005883a 	mov	r2,zero
 4028028:	003fd406 	br	4027f7c <arprcv+0x9c>
      return (ENP_NOT_MINE);
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
   {
      arpReqsIn++;   /* count these */
 402802c:	d0a85217 	ldw	r2,-24248(gp)
      arpReply(pkt); /* send arp reply */
 4028030:	8809883a 	mov	r4,r17
      return (ENP_NOT_MINE);
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
   {
      arpReqsIn++;   /* count these */
 4028034:	10800044 	addi	r2,r2,1
 4028038:	d0a85215 	stw	r2,-24248(gp)
      arpReply(pkt); /* send arp reply */
 402803c:	40276880 	call	4027688 <arpReply>
      /* make partial ARP table entry */
      make_arp_entry(arphdr->ar_spa, pkt->net);
 4028040:	81000417 	ldw	r4,16(r16)
 4028044:	89400617 	ldw	r5,24(r17)
 4028048:	40278880 	call	4027888 <make_arp_entry>
 402804c:	003fd706 	br	4027fac <arprcv+0xcc>

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
 4028050:	1821883a 	mov	r16,r3
 4028054:	003fe106 	br	4027fdc <arprcv+0xfc>

04028058 <etainit>:
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
 4028058:	deffff04 	addi	sp,sp,-4
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
 402805c:	01018204 	movi	r4,1544
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
 4028060:	dfc00015 	stw	ra,0(sp)
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
 4028064:	40281080 	call	4028108 <reg_type>
 4028068:	0007883a 	mov	r3,zero
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
 402806c:	010100f4 	movhi	r4,1027
 4028070:	2115ba04 	addi	r4,r4,22248

int
etainit(void)
{
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
 4028074:	10000226 	beq	r2,zero,4028080 <etainit+0x28>
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
 4028078:	4002fec0 	call	4002fec <puts>
 402807c:	00c00044 	movi	r3,1
#endif
      return (1);
   }
   return (0);
}
 4028080:	1805883a 	mov	r2,r3
 4028084:	dfc00017 	ldw	ra,0(sp)
 4028088:	dec00104 	addi	sp,sp,4
 402808c:	f800283a 	ret

04028090 <isbcast>:
#if (ALIGN_TYPE > 2)
   /* On systems with 32bit alignment requirements we have to make
    * sure our tests are aligned. Specifically, this results in "data
    * abort" errors on the Samsung/ARM port. 
    */
   if((u_long)addr & (ALIGN_TYPE - 1))
 4028090:	288000cc 	andi	r2,r5,3
 4028094:	10000626 	beq	r2,zero,40280b0 <isbcast+0x20>
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
 4028098:	28c0000b 	ldhu	r3,0(r5)
 402809c:	00bfffd4 	movui	r2,65535
 40280a0:	18801026 	beq	r3,r2,40280e4 <isbcast+0x54>
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
         return(FALSE);
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
 40280a4:	000b883a 	mov	r5,zero
      return FALSE;
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
}
 40280a8:	2805883a 	mov	r2,r5
 40280ac:	f800283a 	ret
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
 40280b0:	28c00017 	ldw	r3,0(r5)
 40280b4:	00bfffc4 	movi	r2,-1
         return FALSE;

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
 40280b8:	19bfffcc 	andi	r6,r3,65535
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
 40280bc:	18bff91e 	bne	r3,r2,40280a4 <isbcast+0x14>
         return FALSE;

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
 40280c0:	2880010b 	ldhu	r2,4(r5)
 40280c4:	11bff71e 	bne	r2,r6,40280a4 <isbcast+0x14>
         return(FALSE);
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
 40280c8:	20802717 	ldw	r2,156(r4)
 40280cc:	10c00217 	ldw	r3,8(r2)
 40280d0:	008005c4 	movi	r2,23
 40280d4:	19400718 	cmpnei	r5,r3,28
 40280d8:	18bff226 	beq	r3,r2,40280a4 <isbcast+0x14>
      return FALSE;
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
}
 40280dc:	2805883a 	mov	r2,r5
 40280e0:	f800283a 	ret
   if((u_long)addr & (ALIGN_TYPE - 1))
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
         return(FALSE);
      if ((u_long)(*(u_long*)(addr + 2)) != 0xFFFFFFFF)
 40280e4:	28c00097 	ldw	r3,2(r5)
 40280e8:	00bfffc4 	movi	r2,-1
 40280ec:	18bfed1e 	bne	r3,r2,40280a4 <isbcast+0x14>
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
         return(FALSE);
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
 40280f0:	20802717 	ldw	r2,156(r4)
 40280f4:	10c00217 	ldw	r3,8(r2)
 40280f8:	008005c4 	movi	r2,23
 40280fc:	19400718 	cmpnei	r5,r3,28
 4028100:	18bff61e 	bne	r3,r2,40280dc <isbcast+0x4c>
 4028104:	003fe706 	br	40280a4 <isbcast+0x14>

04028108 <reg_type>:
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028108:	00810134 	movhi	r2,1028
 402810c:	108dfc04 	addi	r2,r2,14320
 4028110:	11400017 	ldw	r5,0(r2)
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
reg_type(unshort type)
{
 4028114:	defffd04 	addi	sp,sp,-12
 4028118:	dc400115 	stw	r17,4(sp)
 402811c:	dfc00215 	stw	ra,8(sp)
 4028120:	dc000015 	stw	r16,0(sp)
 4028124:	2023883a 	mov	r17,r4
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028128:	28000926 	beq	r5,zero,4028150 <reg_type+0x48>
 402812c:	2821883a 	mov	r16,r5
   {
      if (ifp->n_reg_type)    /* make sure call exists */
 4028130:	80800617 	ldw	r2,24(r16)
      {
         e = (ifp->n_reg_type)(type, ifp);
 4028134:	800b883a 	mov	r5,r16
 4028138:	893fffcc 	andi	r4,r17,65535
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      if (ifp->n_reg_type)    /* make sure call exists */
 402813c:	10000226 	beq	r2,zero,4028148 <reg_type+0x40>
      {
         e = (ifp->n_reg_type)(type, ifp);
 4028140:	103ee83a 	callr	r2
         if (e)
 4028144:	1000031e 	bne	r2,zero,4028154 <reg_type+0x4c>
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028148:	84000017 	ldw	r16,0(r16)
 402814c:	803ff81e 	bne	r16,zero,4028130 <reg_type+0x28>
 4028150:	0005883a 	mov	r2,zero
         if (e)
            return e;   /* bails out if error */
      }
   }
   return 0;   /* OK code */
}
 4028154:	dfc00217 	ldw	ra,8(sp)
 4028158:	dc400117 	ldw	r17,4(sp)
 402815c:	dc000017 	ldw	r16,0(sp)
 4028160:	dec00304 	addi	sp,sp,12
 4028164:	f800283a 	ret

04028168 <if_killsocks>:
   struct socket * so;
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
 4028168:	00810134 	movhi	r2,1028
 402816c:	108cf804 	addi	r2,r2,13280
 4028170:	10800017 	ldw	r2,0(r2)
 */

      /* kill this NETs sockets */
void
if_killsocks(NET ifp)
{
 4028174:	defffd04 	addi	sp,sp,-12
 4028178:	dc400115 	stw	r17,4(sp)
 402817c:	dfc00215 	stw	ra,8(sp)
 4028180:	dc000015 	stw	r16,0(sp)
 4028184:	2023883a 	mov	r17,r4
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
   while(so)
 4028188:	10000926 	beq	r2,zero,40281b0 <if_killsocks+0x48>
   {
      if(so->so_pcb)
 402818c:	10c00117 	ldw	r3,4(r2)
 4028190:	000b883a 	mov	r5,zero
 4028194:	18000126 	beq	r3,zero,402819c <if_killsocks+0x34>
         so_ifp = so->so_pcb->ifp;
 4028198:	19400a17 	ldw	r5,40(r3)
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
 402819c:	1009883a 	mov	r4,r2
   {
      if(so->so_pcb)
         so_ifp = so->so_pcb->ifp;
      else
         so_ifp = NULL;
      next = (struct socket *)so->next;
 40281a0:	14000017 	ldw	r16,0(r2)
      if (so_ifp == ifp)
 40281a4:	2c400726 	beq	r5,r17,40281c4 <if_killsocks+0x5c>
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
 40281a8:	8005883a 	mov	r2,r16
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
   while(so)
 40281ac:	803ff71e 	bne	r16,zero,402818c <if_killsocks+0x24>
          */
         soabort(so);
      }
      so = next;
   }
}
 40281b0:	dfc00217 	ldw	ra,8(sp)
 40281b4:	dc400117 	ldw	r17,4(sp)
 40281b8:	dc000017 	ldw	r16,0(sp)
 40281bc:	dec00304 	addi	sp,sp,12
 40281c0:	f800283a 	ret
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
 40281c4:	401f5e00 	call	401f5e0 <soabort>
 40281c8:	003ff706 	br	40281a8 <if_killsocks+0x40>

040281cc <if_getbynum>:

NET
if_getbynum(int ifnum)
{
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40281cc:	00810134 	movhi	r2,1028
 40281d0:	108dfc04 	addi	r2,r2,14320
 40281d4:	10800017 	ldw	r2,0(r2)
 * RETURNS: Returns NET pointer, or NULL if out of range
 */

NET
if_getbynum(int ifnum)
{
 40281d8:	deffff04 	addi	sp,sp,-4
 40281dc:	dfc00015 	stw	ra,0(sp)
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40281e0:	10000726 	beq	r2,zero,4028200 <if_getbynum+0x34>
   {
      if(ifnum-- == 0)
 40281e4:	20000826 	beq	r4,zero,4028208 <if_getbynum+0x3c>
 40281e8:	0007883a 	mov	r3,zero
 40281ec:	00000106 	br	40281f4 <if_getbynum+0x28>
 40281f0:	20c00526 	beq	r4,r3,4028208 <if_getbynum+0x3c>

NET
if_getbynum(int ifnum)
{
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40281f4:	10800017 	ldw	r2,0(r2)
   {
      if(ifnum-- == 0)
 40281f8:	18c00044 	addi	r3,r3,1

NET
if_getbynum(int ifnum)
{
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40281fc:	103ffc1e 	bne	r2,zero,40281f0 <if_getbynum+0x24>
   {
      if(ifnum-- == 0)
         return ifp;
   }
   dtrap();
 4028200:	401c81c0 	call	401c81c <dtrap>
 4028204:	0005883a 	mov	r2,zero
   return NULL;   /* list is not long enough */
}
 4028208:	dfc00017 	ldw	ra,0(sp)
 402820c:	dec00104 	addi	sp,sp,4
 4028210:	f800283a 	ret

04028214 <ip_copypkt>:
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 4028214:	defffc04 	addi	sp,sp,-16
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
 4028218:	20800117 	ldw	r2,4(r4)
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 402821c:	dc400115 	stw	r17,4(sp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
 4028220:	24400317 	ldw	r17,12(r4)
 4028224:	20c00417 	ldw	r3,16(r4)
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 4028228:	dc000015 	stw	r16,0(sp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
 402822c:	88a3c83a 	sub	r17,r17,r2
 4028230:	88e3883a 	add	r17,r17,r3
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 4028234:	2021883a 	mov	r16,r4

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4028238:	01000084 	movi	r4,2
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 402823c:	dfc00315 	stw	ra,12(sp)
 4028240:	dc800215 	stw	r18,8(sp)

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4028244:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   np = pk_alloc(len);
 4028248:	8809883a 	mov	r4,r17
 402824c:	401bf840 	call	401bf84 <pk_alloc>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028250:	01000084 	movi	r4,2
   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
   LOCK_NET_RESOURCE(FREEQ_RESID);
   np = pk_alloc(len);
 4028254:	1025883a 	mov	r18,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028258:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
#endif
      return NULL;
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
 402825c:	880d883a 	mov	r6,r17
   np = pk_alloc(len);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   if (np == NULL)
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
 4028260:	880b883a 	mov	r5,r17
 4028264:	010100f4 	movhi	r4,1027
 4028268:	2115c604 	addi	r4,r4,22296
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
   LOCK_NET_RESOURCE(FREEQ_RESID);
   np = pk_alloc(len);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   if (np == NULL)
 402826c:	90001a26 	beq	r18,zero,40282d8 <ip_copypkt+0xc4>
#endif
      return NULL;
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
 4028270:	91000117 	ldw	r4,4(r18)
 4028274:	81400117 	ldw	r5,4(r16)
 4028278:	40096480 	call	4009648 <memcpy>

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
 402827c:	80c00317 	ldw	r3,12(r16)
 4028280:	81000117 	ldw	r4,4(r16)
 4028284:	90800117 	ldw	r2,4(r18)
   np->nb_plen = p->nb_plen;
   np->net = p->net;
   np->fhost = p->fhost;
   np->type = p->type;
   np->nb_tstamp = p->nb_tstamp;
 4028288:	82400517 	ldw	r9,20(r16)
   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
   np->nb_plen = p->nb_plen;
 402828c:	81400417 	ldw	r5,16(r16)
   np->net = p->net;
 4028290:	81800617 	ldw	r6,24(r16)
   np->fhost = p->fhost;
 4028294:	81c00717 	ldw	r7,28(r16)
   np->type = p->type;
 4028298:	8200080b 	ldhu	r8,32(r16)

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
 402829c:	1907c83a 	sub	r3,r3,r4
 40282a0:	10c5883a 	add	r2,r2,r3
 40282a4:	90800315 	stw	r2,12(r18)
   np->nb_plen = p->nb_plen;
 40282a8:	91400415 	stw	r5,16(r18)
   np->net = p->net;
 40282ac:	91800615 	stw	r6,24(r18)
   np->fhost = p->fhost;
 40282b0:	91c00715 	stw	r7,28(r18)
   np->type = p->type;
 40282b4:	9200080d 	sth	r8,32(r18)
   np->nb_tstamp = p->nb_tstamp;
 40282b8:	92400515 	stw	r9,20(r18)

   /* return pointer to the copy */
   return np;
}
 40282bc:	9005883a 	mov	r2,r18
 40282c0:	dfc00317 	ldw	ra,12(sp)
 40282c4:	dc800217 	ldw	r18,8(sp)
 40282c8:	dc400117 	ldw	r17,4(sp)
 40282cc:	dc000017 	ldw	r16,0(sp)
 40282d0:	dec00404 	addi	sp,sp,16
 40282d4:	f800283a 	ret
   np = pk_alloc(len);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   if (np == NULL)
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
 40282d8:	4002ed40 	call	4002ed4 <printf>
 40282dc:	003ff706 	br	40282bc <ip_copypkt+0xa8>

040282e0 <iproute>:
 * RETURNS: Returns NULL when unable to route, else returns a NET pointer.
 */

NET
iproute(ip_addr host, ip_addr * hop1)
{
 40282e0:	defffa04 	addi	sp,sp,-24
 40282e4:	dc800315 	stw	r18,12(sp)
 40282e8:	dc000115 	stw	r16,4(sp)
 40282ec:	dfc00515 	stw	ra,20(sp)
 40282f0:	dcc00415 	stw	r19,16(sp)
 40282f4:	dc400215 	stw	r17,8(sp)
 40282f8:	2021883a 	mov	r16,r4
 40282fc:	2825883a 	mov	r18,r5
   NET      ifp;
#ifdef IP_ROUTING
   RTMIB    rtp;
#endif   /* IP_ROUTING */

   if (host == 0L)      /* Sanity check parameter. */
 4028300:	2000091e 	bne	r4,zero,4028328 <iproute+0x48>
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
   return((NET)(netlist.q_head));
 4028304:	0009883a 	mov	r4,zero
#endif   /* STRICT_SUBNETTING */
}
 4028308:	2005883a 	mov	r2,r4
 402830c:	dfc00517 	ldw	ra,20(sp)
 4028310:	dcc00417 	ldw	r19,16(sp)
 4028314:	dc800317 	ldw	r18,12(sp)
 4028318:	dc400217 	ldw	r17,8(sp)
 402831c:	dc000117 	ldw	r16,4(sp)
 4028320:	dec00604 	addi	sp,sp,24
 4028324:	f800283a 	ret
    * stack has been initialized (tk_yield() gets called out of the 
    * dialer code as part of PPP initialization), one symptom of 
    * which is the routing table not being present yet. if this 
    * happens, quit. 
    */
   if (rt_mib == NULL)
 4028328:	d0a85817 	ldw	r2,-24224(gp)
 402832c:	103ff526 	beq	r2,zero,4028304 <iproute+0x24>
      return NULL;
#endif   /* BTREE_ROUTING */

   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
 4028330:	04c10134 	movhi	r19,1028
 4028334:	9ce95904 	addi	r19,r19,-23196
 4028338:	99400017 	ldw	r5,0(r19)
 402833c:	28000226 	beq	r5,zero,4028348 <iproute+0x68>
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
 4028340:	28800017 	ldw	r2,0(r5)
 4028344:	20800926 	beq	r4,r2,402836c <iproute+0x8c>
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
         return(cachedRoute->ifp); /* net to send on */
      }
   }

   rtp = rt_lookup(host);
 4028348:	8009883a 	mov	r4,r16
 402834c:	402b7800 	call	402b780 <rt_lookup>
 4028350:	1007883a 	mov	r3,r2
   if(rtp)
 4028354:	10000d26 	beq	r2,zero,402838c <iproute+0xac>
   {
      cachedRoute = rtp;
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
      return(rtp->ifp);             /* return pointer to net */
 4028358:	11000e17 	ldw	r4,56(r2)

   rtp = rt_lookup(host);
   if(rtp)
   {
      cachedRoute = rtp;
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
 402835c:	10800617 	ldw	r2,24(r2)
   }

   rtp = rt_lookup(host);
   if(rtp)
   {
      cachedRoute = rtp;
 4028360:	98c00015 	stw	r3,0(r19)
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
 4028364:	90800015 	stw	r2,0(r18)
 4028368:	003fe706 	br	4028308 <iproute+0x28>
   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
 402836c:	28800617 	ldw	r2,24(r5)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
 4028370:	00c10134 	movhi	r3,1028
 4028374:	18e93304 	addi	r3,r3,-23348
         return(cachedRoute->ifp); /* net to send on */
 4028378:	29000e17 	ldw	r4,56(r5)
   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
 402837c:	90800015 	stw	r2,0(r18)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
 4028380:	18800017 	ldw	r2,0(r3)
 4028384:	28800915 	stw	r2,36(r5)
 4028388:	003fdf06 	br	4028308 <iproute+0x28>
    * the initial state for the for loop that iterates through the
    * list), but only build the iterator for multi-homed systems
    * because single-homed systems are often memory-limited systems as
    * well.  
    */
   ifp = (NET)(netlist.q_head);
 402838c:	00810134 	movhi	r2,1028
 4028390:	108dfc04 	addi	r2,r2,14320
 4028394:	11000017 	ldw	r4,0(r2)
   i = 0;
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
 4028398:	20001426 	beq	r4,zero,40283ec <iproute+0x10c>
 402839c:	2023883a 	mov	r17,r4
 40283a0:	000f883a 	mov	r7,zero
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
 40283a4:	88c00c17 	ldw	r3,48(r17)
 40283a8:	18000526 	beq	r3,zero,40283c0 <iproute+0xe0>
 40283ac:	88800a17 	ldw	r2,40(r17)
 40283b0:	80ca703a 	and	r5,r16,r3
 40283b4:	1886703a 	and	r3,r3,r2
 40283b8:	10000126 	beq	r2,zero,40283c0 <iproute+0xe0>
 40283bc:	19401126 	beq	r3,r5,4028404 <iproute+0x124>
    * well.  
    */
   ifp = (NET)(netlist.q_head);
   i = 0;
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
 40283c0:	8c400017 	ldw	r17,0(r17)
 40283c4:	39c00044 	addi	r7,r7,1
 40283c8:	883ff61e 	bne	r17,zero,40283a4 <iproute+0xc4>
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
 40283cc:	20c00d17 	ldw	r3,52(r4)
 40283d0:	1800081e 	bne	r3,zero,40283f4 <iproute+0x114>
      {
         *hop1 = ifp->n_defgw;
         return ifp;
 40283d4:	2005883a 	mov	r2,r4
 40283d8:	00000206 	br	40283e4 <iproute+0x104>
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
 40283dc:	10c00d17 	ldw	r3,52(r2)
 40283e0:	1800051e 	bne	r3,zero,40283f8 <iproute+0x118>
   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
 40283e4:	10800017 	ldw	r2,0(r2)
 40283e8:	103ffc1e 	bne	r2,zero,40283dc <iproute+0xfc>
   /* if no gateway is set, then change the first hop address to the 
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
 40283ec:	94000015 	stw	r16,0(r18)
 40283f0:	003fc506 	br	4028308 <iproute+0x28>
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
 40283f4:	2005883a 	mov	r2,r4
      {
         *hop1 = ifp->n_defgw;
 40283f8:	1009883a 	mov	r4,r2
 40283fc:	90c00015 	stw	r3,0(r18)
 4028400:	003fc106 	br	4028308 <iproute+0x28>
         (ifp->n_ipaddr != 0) && 
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
      {
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
 4028404:	00800044 	movi	r2,1
 4028408:	8009883a 	mov	r4,r16
 402840c:	017fffc4 	movi	r5,-1
 4028410:	800d883a 	mov	r6,r16
 4028414:	d8800015 	stw	r2,0(sp)
 4028418:	402b9980 	call	402b998 <add_route>
 402841c:	98800015 	stw	r2,0(r19)
#ifdef NPDEBUG
         if (cachedRoute == NULL)
 4028420:	10000326 	beq	r2,zero,4028430 <iproute+0x150>
            dtrap();
#endif   /* NPDEBUG */
#endif   /* IP_ROUTING */
         *hop1 = host;
 4028424:	8809883a 	mov	r4,r17
 4028428:	94000015 	stw	r16,0(r18)
 402842c:	003fb606 	br	4028308 <iproute+0x28>
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
#ifdef NPDEBUG
         if (cachedRoute == NULL)
            dtrap();
 4028430:	401c81c0 	call	401c81c <dtrap>
 4028434:	003ffb06 	br	4028424 <iproute+0x144>

04028438 <ip_mymach>:
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
 4028438:	defffc04 	addi	sp,sp,-16

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
 402843c:	d9400104 	addi	r5,sp,4
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
 4028440:	dc000215 	stw	r16,8(sp)
 4028444:	dfc00315 	stw	ra,12(sp)
 4028448:	2021883a 	mov	r16,r4

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
 402844c:	40282e00 	call	40282e0 <iproute>
   if (tnet == 0)
 4028450:	10000526 	beq	r2,zero,4028468 <ip_mymach+0x30>
      if (NDEBUG & (PROTERR|INFOMSG))
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
#endif   /* NPDEBUG */
      return 0L;
   }
   return tnet->n_ipaddr;
 4028454:	10800a17 	ldw	r2,40(r2)
#endif /* MULTI_HOMED */
}
 4028458:	dfc00317 	ldw	ra,12(sp)
 402845c:	dc000217 	ldw	r16,8(sp)
 4028460:	dec00404 	addi	sp,sp,16
 4028464:	f800283a 	ret
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
   if (tnet == 0)
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
 4028468:	00810134 	movhi	r2,1028
 402846c:	10a90e04 	addi	r2,r2,-23496
 4028470:	10c00017 	ldw	r3,0(r2)
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 4028474:	800cd23a 	srli	r6,r16,8
 4028478:	800ed43a 	srli	r7,r16,16
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
   if (tnet == 0)
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
 402847c:	18c0050c 	andi	r3,r3,20
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 4028480:	8010d63a 	srli	r8,r16,24
 4028484:	81403fcc 	andi	r5,r16,255
 4028488:	31803fcc 	andi	r6,r6,255
 402848c:	39c03fcc 	andi	r7,r7,255
 4028490:	010100f4 	movhi	r4,1027
 4028494:	2115d204 	addi	r4,r4,22344
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
   if (tnet == 0)
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
 4028498:	0005883a 	mov	r2,zero
 402849c:	183fee26 	beq	r3,zero,4028458 <ip_mymach+0x20>
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 40284a0:	da000015 	stw	r8,0(sp)
 40284a4:	4002ed40 	call	4002ed4 <printf>
 40284a8:	0005883a 	mov	r2,zero
 40284ac:	003fea06 	br	4028458 <ip_mymach+0x20>

040284b0 <ip_bldhead>:
{
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
 40284b0:	22000317 	ldw	r8,12(r4)
   p->nb_plen += sizeof(struct ip);
 40284b4:	20800417 	ldw	r2,16(r4)
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
 40284b8:	defffe04 	addi	sp,sp,-8
 40284bc:	dc000015 	stw	r16,0(sp)
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
   p->nb_plen += sizeof(struct ip);
 40284c0:	10800504 	addi	r2,r2,20
{
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
 40284c4:	443ffb04 	addi	r16,r8,-20
   p->nb_plen += sizeof(struct ip);
 40284c8:	20800415 	stw	r2,16(r4)
{
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
 40284cc:	24000315 	stw	r16,12(r4)
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
 40284d0:	dfc00115 	stw	ra,4(sp)
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
   p->nb_plen += sizeof(struct ip);

   pip = (struct ip*)p->nb_prot;

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 40284d4:	00801144 	movi	r2,69
 40284d8:	40bffb05 	stb	r2,-20(r8)
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
   pip->ip_len = htons((unshort)p->nb_plen);
 40284dc:	20c0040b 	ldhu	r3,16(r4)

   pip = (struct ip*)p->nb_prot;

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 40284e0:	297fffcc 	andi	r5,r5,65535
   pip->ip_len = htons((unshort)p->nb_plen);
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */
 40284e4:	81800245 	stb	r6,9(r16)

   pip = (struct ip*)p->nb_prot;

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 40284e8:	2804923a 	slli	r2,r5,8
   pip->ip_len = htons((unshort)p->nb_plen);
 40284ec:	180c923a 	slli	r6,r3,8

   pip = (struct ip*)p->nb_prot;

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 40284f0:	280ad23a 	srli	r5,r5,8
   pip->ip_len = htons((unshort)p->nb_plen);
 40284f4:	1806d23a 	srli	r3,r3,8
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 40284f8:	21000c17 	ldw	r4,48(r4)

   pip = (struct ip*)p->nb_prot;

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 40284fc:	288ab03a 	or	r5,r5,r2
   pip->ip_len = htons((unshort)p->nb_plen);
 4028500:	1986b03a 	or	r3,r3,r6
   p->nb_plen += sizeof(struct ip);

   pip = (struct ip*)p->nb_prot;

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
 4028504:	81c0018d 	sth	r7,6(r16)
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 4028508:	8140010d 	sth	r5,4(r16)
   pip->ip_len = htons((unshort)p->nb_plen);
 402850c:	80c0008d 	sth	r3,2(r16)
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 4028510:	20001126 	beq	r4,zero,4028558 <ip_bldhead+0xa8>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 4028514:	20800043 	ldbu	r2,1(r4)
 4028518:	10000d26 	beq	r2,zero,4028550 <ip_bldhead+0xa0>
         pip->ip_time = sopts->ip_ttl;
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
 402851c:	80800205 	stb	r2,8(r16)
      pip->ip_tos = sopts->ip_tos;
 4028520:	20800003 	ldbu	r2,0(r4)
 4028524:	80800045 	stb	r2,1(r16)
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
      pip->ip_tos = IP_TOS_DEFVAL;
   }
   
   pip->ip_chksum = IPXSUM;      /* clear checksum field for summing */
 4028528:	8000028d 	sth	zero,10(r16)
   pip->ip_chksum = ~cksum(pip, 10);
 402852c:	8009883a 	mov	r4,r16
 4028530:	01400284 	movi	r5,10
 4028534:	40199b00 	call	40199b0 <cksum>
 4028538:	0084303a 	nor	r2,zero,r2
 402853c:	8080028d 	sth	r2,10(r16)
}
 4028540:	dfc00117 	ldw	ra,4(sp)
 4028544:	dc000017 	ldw	r16,0(sp)
 4028548:	dec00204 	addi	sp,sp,8
 402854c:	f800283a 	ret
   {
	  /* yup */
	  if (sopts->ip_ttl)
         pip->ip_time = sopts->ip_ttl;
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
 4028550:	00801004 	movi	r2,64
 4028554:	003ff106 	br	402851c <ip_bldhead+0x6c>
      pip->ip_tos = sopts->ip_tos;
   }
   else
   {
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
 4028558:	00801004 	movi	r2,64
 402855c:	80800205 	stb	r2,8(r16)
      pip->ip_tos = IP_TOS_DEFVAL;
 4028560:	80000045 	stb	zero,1(r16)
 4028564:	003ff006 	br	4028528 <ip_bldhead+0x78>

04028568 <ip_dump>:
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
 4028568:	defff804 	addi	sp,sp,-32
 402856c:	dc000315 	stw	r16,12(sp)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
 4028570:	24000317 	ldw	r16,12(r4)
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
 4028574:	dcc00615 	stw	r19,24(sp)
 4028578:	dc800515 	stw	r18,20(sp)
 402857c:	dc400415 	stw	r17,16(sp)
 4028580:	dfc00715 	stw	ra,28(sp)
   unsigned short xsum, osum;

   pip = ip_head(p);
   osum = pip->ip_chksum;
   pip->ip_chksum = 0;
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
 4028584:	81400003 	ldbu	r5,0(r16)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
   osum = pip->ip_chksum;
 4028588:	84c0028b 	ldhu	r19,10(r16)
   pip->ip_chksum = 0;
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
 402858c:	8009883a 	mov	r4,r16
 4028590:	294003cc 	andi	r5,r5,15
 4028594:	294b883a 	add	r5,r5,r5
 4028598:	294b883a 	add	r5,r5,r5
 402859c:	280ad07a 	srli	r5,r5,1
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
   osum = pip->ip_chksum;
   pip->ip_chksum = 0;
 40285a0:	8000028d 	sth	zero,10(r16)
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);

   if (osum != xsum)          /* trap here if checksum is wrong */
 40285a4:	9c7fffcc 	andi	r17,r19,65535
   unsigned short xsum, osum;

   pip = ip_head(p);
   osum = pip->ip_chksum;
   pip->ip_chksum = 0;
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
 40285a8:	40199b00 	call	40199b0 <cksum>
 40285ac:	0084303a 	nor	r2,zero,r2

   if (osum != xsum)          /* trap here if checksum is wrong */
 40285b0:	14bfffcc 	andi	r18,r2,65535
 40285b4:	8c800126 	beq	r17,r18,40285bc <ip_dump+0x54>
   {
      dtrap();
 40285b8:	401c81c0 	call	401c81c <dtrap>
   /* dtrap() is fatal in the default Windows implementation, so
    * we comment it out */
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
 40285bc:	0009883a 	mov	r4,zero
 40285c0:	014100f4 	movhi	r5,1027
 40285c4:	2955db04 	addi	r5,r5,22380
 40285c8:	4019c700 	call	4019c70 <ns_printf>
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 40285cc:	80c0010b 	ldhu	r3,4(r16)
 40285d0:	8200008b 	ldhu	r8,2(r16)
 40285d4:	81c00043 	ldbu	r7,1(r16)
 40285d8:	1808923a 	slli	r4,r3,8
 40285dc:	4004923a 	slli	r2,r8,8
 40285e0:	1806d23a 	srli	r3,r3,8
 40285e4:	4010d23a 	srli	r8,r8,8
 40285e8:	81800003 	ldbu	r6,0(r16)
 40285ec:	10bfc00c 	andi	r2,r2,65280
 40285f0:	213fc00c 	andi	r4,r4,65280
 40285f4:	1906b03a 	or	r3,r3,r4
 40285f8:	4090b03a 	or	r8,r8,r2
 40285fc:	0009883a 	mov	r4,zero
 4028600:	014100f4 	movhi	r5,1027
 4028604:	2955e004 	addi	r5,r5,22400
 4028608:	d8c00115 	stw	r3,4(sp)
 402860c:	da000015 	stw	r8,0(sp)
 4028610:	4019c700 	call	4019c70 <ns_printf>
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 4028614:	024100f4 	movhi	r9,1027
 4028618:	4a55ec04 	addi	r9,r9,22448
 402861c:	80c0018b 	ldhu	r3,6(r16)
 4028620:	81c00203 	ldbu	r7,8(r16)
 4028624:	81000243 	ldbu	r4,9(r16)
 4028628:	8c803426 	beq	r17,r18,40286fc <ip_dump+0x194>
 402862c:	18ffffcc 	andi	r3,r3,65535
 4028630:	8804923a 	slli	r2,r17,8
 4028634:	180c923a 	slli	r6,r3,8
 4028638:	8810d23a 	srli	r8,r17,8
 402863c:	1806d23a 	srli	r3,r3,8
 4028640:	10bfc00c 	andi	r2,r2,65280
 4028644:	31bfc00c 	andi	r6,r6,65280
 4028648:	4090b03a 	or	r8,r8,r2
 402864c:	198cb03a 	or	r6,r3,r6
 4028650:	20803fcc 	andi	r2,r4,255
 4028654:	39c03fcc 	andi	r7,r7,255
 4028658:	0009883a 	mov	r4,zero
 402865c:	014100f4 	movhi	r5,1027
 4028660:	2955ee04 	addi	r5,r5,22456
 4028664:	da000115 	stw	r8,4(sp)
 4028668:	da400215 	stw	r9,8(sp)
 402866c:	d8800015 	stw	r2,0(sp)
 4028670:	4019c700 	call	4019c70 <ns_printf>
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
    htons(osum), (osum==xsum)?"ok":"bad");
   ns_printf(NULL ,"src: %u.%u.%u.%u  ", PUSH_IPADDR(pip->ip_src));
 4028674:	81800317 	ldw	r6,12(r16)
 4028678:	0009883a 	mov	r4,zero
 402867c:	014100f4 	movhi	r5,1027
 4028680:	2955fe04 	addi	r5,r5,22520
 4028684:	300ed23a 	srli	r7,r6,8
 4028688:	3004d43a 	srli	r2,r6,16
 402868c:	3006d63a 	srli	r3,r6,24
 4028690:	39c03fcc 	andi	r7,r7,255
 4028694:	31803fcc 	andi	r6,r6,255
 4028698:	10803fcc 	andi	r2,r2,255
 402869c:	d8c00115 	stw	r3,4(sp)
 40286a0:	d8800015 	stw	r2,0(sp)
 40286a4:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(NULL ,"dest: %u.%u.%u.%u\n", PUSH_IPADDR(pip->ip_dest));
 40286a8:	81800417 	ldw	r6,16(r16)
 40286ac:	0009883a 	mov	r4,zero
 40286b0:	014100f4 	movhi	r5,1027
 40286b4:	29560304 	addi	r5,r5,22540
 40286b8:	300ed23a 	srli	r7,r6,8
 40286bc:	3004d43a 	srli	r2,r6,16
 40286c0:	3006d63a 	srli	r3,r6,24
 40286c4:	39c03fcc 	andi	r7,r7,255
 40286c8:	31803fcc 	andi	r6,r6,255
 40286cc:	10803fcc 	andi	r2,r2,255
 40286d0:	d8800015 	stw	r2,0(sp)
 40286d4:	d8c00115 	stw	r3,4(sp)
 40286d8:	4019c700 	call	4019c70 <ns_printf>

   pip->ip_chksum = osum;     /* fix what we clobbered */
 40286dc:	84c0028d 	sth	r19,10(r16)
}
 40286e0:	dfc00717 	ldw	ra,28(sp)
 40286e4:	dcc00617 	ldw	r19,24(sp)
 40286e8:	dc800517 	ldw	r18,20(sp)
 40286ec:	dc400417 	ldw	r17,16(sp)
 40286f0:	dc000317 	ldw	r16,12(sp)
 40286f4:	dec00804 	addi	sp,sp,32
 40286f8:	f800283a 	ret

   ns_printf(NULL ,"IP packet header:\n");
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 40286fc:	024100f4 	movhi	r9,1027
 4028700:	4a55ed04 	addi	r9,r9,22452
 4028704:	003fc906 	br	402862c <ip_dump+0xc4>

04028708 <ip_fragment_lc>:
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 4028708:	00c10134 	movhi	r3,1028
 402870c:	18ce0104 	addi	r3,r3,14340
 4028710:	18801017 	ldw	r2,64(r3)
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
 4028714:	22000317 	ldw	r8,12(r4)
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 4028718:	defff304 	addi	sp,sp,-52
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 402871c:	10800044 	addi	r2,r2,1
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 4028720:	dd400815 	stw	r21,32(sp)
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 4028724:	18801015 	stw	r2,64(r3)
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 4028728:	dfc00c15 	stw	ra,48(sp)
 402872c:	df000b15 	stw	fp,44(sp)
 4028730:	ddc00a15 	stw	r23,40(sp)
 4028734:	dd800915 	stw	r22,36(sp)
 4028738:	dd000715 	stw	r20,28(sp)
 402873c:	dcc00615 	stw	r19,24(sp)
 4028740:	dc800515 	stw	r18,20(sp)
 4028744:	dc400415 	stw	r17,16(sp)
 4028748:	dc000315 	stw	r16,12(sp)
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 402874c:	21800617 	ldw	r6,24(r4)
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
 4028750:	40800003 	ldbu	r2,0(r8)
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 4028754:	200f883a 	mov	r7,r4
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 4028758:	31000817 	ldw	r4,32(r6)
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
 402875c:	108003cc 	andi	r2,r2,15
 4028760:	1085883a 	add	r2,r2,r2
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 4028764:	30c00917 	ldw	r3,36(r6)
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
 4028768:	10ab883a 	add	r21,r2,r2
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 402876c:	a909883a 	add	r4,r21,r4
 4028770:	1907c83a 	sub	r3,r3,r4
 4028774:	1a7ffe04 	addi	r9,r3,-8
   if (maxipsize < 64)  /* to small to use */
 4028778:	00800fc4 	movi	r2,63
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 402877c:	d9400115 	stw	r5,4(sp)
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
 4028780:	39400417 	ldw	r5,16(r7)
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
   if (maxipsize < 64)  /* to small to use */
 4028784:	1240912e 	bgeu	r2,r9,40289cc <ip_fragment_lc+0x2c4>
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
   foffset = 0;

   /* Now update from any previous info */
   tmp_fraginfo = ntohs(pip->ip_flgs_foff);     /* get current frag info*/
 4028788:	4080018b 	ldhu	r2,6(r8)
 402878c:	1006923a 	slli	r3,r2,8
 4028790:	1004d23a 	srli	r2,r2,8
 4028794:	10c4b03a 	or	r2,r2,r3
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
 4028798:	11bfffcc 	andi	r6,r2,65535
 402879c:	3107ffcc 	andi	r4,r6,8191
 40287a0:	2000641e 	bne	r4,zero,4028934 <ip_fragment_lc+0x22c>
 40287a4:	0039883a 	mov	fp,zero
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
 40287a8:	2d6fc83a 	sub	r23,r5,r21
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
   e = 0;
   while (left > 1)  /* more data left to send? */
 40287ac:	00800044 	movi	r2,1
 40287b0:	15c0840e 	bge	r2,r23,40289c4 <ip_fragment_lc+0x2bc>
   if (maxipsize < 64)  /* to small to use */
   {
      dtrap();    /* probably bad programming */
      return ENP_LOGIC;
   }
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
 40287b4:	2a45203a 	divu	r2,r5,r9
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
 40287b8:	1147883a 	add	r3,r2,r5
 40287bc:	10800044 	addi	r2,r2,1
 40287c0:	1887203a 	divu	r3,r3,r2
 40287c4:	18c001c4 	addi	r3,r3,7
 40287c8:	00bffe04 	movi	r2,-8
 40287cc:	18a6703a 	and	r19,r3,r2
 40287d0:	3108000c 	andi	r4,r6,8192
 40287d4:	bcedc83a 	sub	r22,r23,r19
 40287d8:	2009003a 	cmpeq	r4,r4,zero
 40287dc:	04c5c83a 	sub	r2,zero,r19
 40287e0:	3823883a 	mov	r17,r7
 40287e4:	b029883a 	mov	r20,r22
 40287e8:	d9000215 	stw	r4,8(sp)
 40287ec:	d8800015 	stw	r2,0(sp)
 40287f0:	00003306 	br	40288c0 <ip_fragment_lc+0x1b8>

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 40287f4:	01000084 	movi	r4,2
 40287f8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
 40287fc:	00810134 	movhi	r2,1028
 4028800:	10a90c04 	addi	r2,r2,-23504
 4028804:	11000017 	ldw	r4,0(r2)
 4028808:	a909883a 	add	r4,r21,r4
 402880c:	2589883a 	add	r4,r4,r22
 4028810:	401bf840 	call	401bf84 <pk_alloc>
 4028814:	1021883a 	mov	r16,r2
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028818:	01000084 	movi	r4,2
 402881c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         if (!pkt2)
 4028820:	80005a26 	beq	r16,zero,402898c <ip_fragment_lc+0x284>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            ip_mib.ipFragFails++;
            return ENP_RESOURCE;
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
 4028824:	88800617 	ldw	r2,24(r17)
         pkt2->fhost = p->fhost;
 4028828:	88c00717 	ldw	r3,28(r17)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
 402882c:	81000317 	ldw	r4,12(r16)
 4028830:	89400317 	ldw	r5,12(r17)
 4028834:	a80d883a 	mov	r6,r21
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            ip_mib.ipFragFails++;
            return ENP_RESOURCE;
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
 4028838:	80800615 	stw	r2,24(r16)
         pkt2->fhost = p->fhost;
 402883c:	80c00715 	stw	r3,28(r16)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
 4028840:	40096480 	call	4009648 <memcpy>
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
 4028844:	89400317 	ldw	r5,12(r17)
 4028848:	81000317 	ldw	r4,12(r16)
 402884c:	a00d883a 	mov	r6,r20
 4028850:	a94b883a 	add	r5,r21,r5
 4028854:	a909883a 	add	r4,r21,r4
 4028858:	2ccb883a 	add	r5,r5,r19
 402885c:	40096480 	call	4009648 <memcpy>
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
      pip->ip_chksum = ~cksum(pip, 10);
 4028860:	9009883a 	mov	r4,r18
 4028864:	01400284 	movi	r5,10
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
 4028868:	9000028d 	sth	zero,10(r18)
      pip->ip_chksum = ~cksum(pip, 10);
 402886c:	40199b00 	call	40199b0 <cksum>

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 4028870:	d9400117 	ldw	r5,4(sp)
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
      pip->ip_chksum = ~cksum(pip, 10);
 4028874:	0084303a 	nor	r2,zero,r2

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 4028878:	8809883a 	mov	r4,r17
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
      pip->ip_chksum = ~cksum(pip, 10);
 402887c:	9080028d 	sth	r2,10(r18)

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 4028880:	4017d640 	call	4017d64 <ip2mac>
      ip_mib.ipFragCreates++;
 4028884:	01010134 	movhi	r4,1028
 4028888:	210e0104 	addi	r4,r4,14340
      pip->ip_chksum = IPXSUM;
      pip->ip_chksum = ~cksum(pip, 10);

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 402888c:	1023883a 	mov	r17,r2
      ip_mib.ipFragCreates++;
 4028890:	20801217 	ldw	r2,72(r4)
 4028894:	00c00044 	movi	r3,1
 4028898:	10c5883a 	add	r2,r2,r3
 402889c:	20801215 	stw	r2,72(r4)
      if (e < 0)
 40288a0:	88002616 	blt	r17,zero,402893c <ip_fragment_lc+0x234>
      {
         if (left > 1) 
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt2);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40288a4:	d8800017 	ldw	r2,0(sp)
 40288a8:	a0a9883a 	add	r20,r20,r2
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
   e = 0;
   while (left > 1)  /* more data left to send? */
 40288ac:	9d05883a 	add	r2,r19,r20
 40288b0:	1880290e 	bge	r3,r2,4028958 <ip_fragment_lc+0x250>
            pk_free(pkt2);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
         }
         return e;
      }
      foffset += fragsize;    /* offset for next fragment */
 40288b4:	e4f9883a 	add	fp,fp,r19
 40288b8:	8023883a 	mov	r17,r16
 40288bc:	b4edc83a 	sub	r22,r22,r19
   pkt2 = p;  /* init these to avoid compiler warnings */
   e = 0;
   while (left > 1)  /* more data left to send? */
   {
      p = pkt2;  /* move next fragment up */
      pip = (struct ip *)(p->nb_prot);
 40288c0:	8c800317 	ldw	r18,12(r17)
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
 40288c4:	b805883a 	mov	r2,r23
 40288c8:	9dc0010e 	bge	r19,r23,40288d0 <ip_fragment_lc+0x1c8>
 40288cc:	9805883a 	mov	r2,r19
      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 40288d0:	01c00044 	movi	r7,1
 40288d4:	3d06803a 	cmplt	r3,r7,r20
   e = 0;
   while (left > 1)  /* more data left to send? */
   {
      p = pkt2;  /* move next fragment up */
      pip = (struct ip *)(p->nb_prot);
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
 40288d8:	a88d883a 	add	r6,r21,r2
      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 40288dc:	1806937a 	slli	r3,r3,13
 40288e0:	e008d0fa 	srli	r4,fp,3
      pip = (struct ip *)(p->nb_prot);
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
      left -= fragsize; /* decrement count of bytes left to send */

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
 40288e4:	30bfffcc 	andi	r2,r6,65535
 40288e8:	100a923a 	slli	r5,r2,8
 40288ec:	1004d23a 	srli	r2,r2,8

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 40288f0:	20c8b03a 	or	r4,r4,r3

      if ( tmp_fraginfo & IP_FLG_MF )             
 40288f4:	d8c00217 	ldw	r3,8(sp)
      pip = (struct ip *)(p->nb_prot);
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
      left -= fragsize; /* decrement count of bytes left to send */

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
 40288f8:	1144b03a 	or	r2,r2,r5
 40288fc:	9080008d 	sth	r2,2(r18)
   e = 0;
   while (left > 1)  /* more data left to send? */
   {
      p = pkt2;  /* move next fragment up */
      pip = (struct ip *)(p->nb_prot);
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
 4028900:	89800415 	stw	r6,16(r17)
 4028904:	b02f883a 	mov	r23,r22
      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 4028908:	2005883a 	mov	r2,r4

      if ( tmp_fraginfo & IP_FLG_MF )             
 402890c:	1800011e 	bne	r3,zero,4028914 <ip_fragment_lc+0x20c>
      {
         /* As flag is set in main packet, it should be set in all
          * fragmented packets also 
          */
         fraginfo |= IP_FLG_MF;
 4028910:	20880014 	ori	r2,r4,8192
      }

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
 4028914:	10bfffcc 	andi	r2,r2,65535
 4028918:	1006923a 	slli	r3,r2,8
 402891c:	1004d23a 	srli	r2,r2,8
 4028920:	10c4b03a 	or	r2,r2,r3
 4028924:	9080018d 	sth	r2,6(r18)
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
 4028928:	3d3fb216 	blt	r7,r20,40287f4 <ip_fragment_lc+0xec>
 402892c:	8821883a 	mov	r16,r17
 4028930:	003fcb06 	br	4028860 <ip_fragment_lc+0x158>
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
   {
      /* When fragmenting an already fragmented packet, we need to
         add the initial offset */
      foffset = (tmp_fraginfo & (~IP_FLG_MASK))  ;
      foffset <<= 3;    /* Multiply by 8 to get "offset in num of bytes" */
 4028934:	203890fa 	slli	fp,r4,3
 4028938:	003f9b06 	br	40287a8 <ip_fragment_lc+0xa0>

      e = ip2mac(p, firsthop);   /* send fragment in p */
      ip_mib.ipFragCreates++;
      if (e < 0)
      {
         if (left > 1) 
 402893c:	1d80060e 	bge	r3,r22,4028958 <ip_fragment_lc+0x250>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4028940:	01000084 	movi	r4,2
 4028944:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(pkt2);
 4028948:	8009883a 	mov	r4,r16
 402894c:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028950:	01000084 	movi	r4,2
 4028954:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         return e;
      }
      foffset += fragsize;    /* offset for next fragment */
   }
   return e;
}
 4028958:	8805883a 	mov	r2,r17
 402895c:	dfc00c17 	ldw	ra,48(sp)
 4028960:	df000b17 	ldw	fp,44(sp)
 4028964:	ddc00a17 	ldw	r23,40(sp)
 4028968:	dd800917 	ldw	r22,36(sp)
 402896c:	dd400817 	ldw	r21,32(sp)
 4028970:	dd000717 	ldw	r20,28(sp)
 4028974:	dcc00617 	ldw	r19,24(sp)
 4028978:	dc800517 	ldw	r18,20(sp)
 402897c:	dc400417 	ldw	r17,16(sp)
 4028980:	dc000317 	ldw	r16,12(sp)
 4028984:	dec00d04 	addi	sp,sp,52
 4028988:	f800283a 	ret
         LOCK_NET_RESOURCE(FREEQ_RESID);
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         if (!pkt2)
         {
            dtrap();
 402898c:	401c81c0 	call	401c81c <dtrap>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4028990:	01000084 	movi	r4,2
 4028994:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(p);
 4028998:	8809883a 	mov	r4,r17
 402899c:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40289a0:	01000084 	movi	r4,2
 40289a4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 40289a8:	01010134 	movhi	r4,1028
 40289ac:	210e0104 	addi	r4,r4,14340
 40289b0:	20801117 	ldw	r2,68(r4)
 40289b4:	047ffa84 	movi	r17,-22
 40289b8:	10800044 	addi	r2,r2,1
 40289bc:	20801115 	stw	r2,68(r4)
 40289c0:	003fe506 	br	4028958 <ip_fragment_lc+0x250>
            pk_free(pkt2);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
         }
         return e;
      }
      foffset += fragsize;    /* offset for next fragment */
 40289c4:	0023883a 	mov	r17,zero
 40289c8:	003fe306 	br	4028958 <ip_fragment_lc+0x250>
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
   if (maxipsize < 64)  /* to small to use */
   {
      dtrap();    /* probably bad programming */
 40289cc:	401c81c0 	call	401c81c <dtrap>
 40289d0:	047ffd44 	movi	r17,-11
 40289d4:	003fe006 	br	4028958 <ip_fragment_lc+0x250>

040289d8 <ip_fragment>:
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 40289d8:	deffec04 	addi	sp,sp,-80
 40289dc:	dc000a15 	stw	r16,40(sp)
   u_short parent_mf;
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
 40289e0:	24000317 	ldw	r16,12(r4)
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 40289e4:	dd400f15 	stw	r21,60(sp)
 40289e8:	dfc01315 	stw	ra,76(sp)
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 40289ec:	8080018b 	ldhu	r2,6(r16)
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 40289f0:	df001215 	stw	fp,72(sp)
 40289f4:	ddc01115 	stw	r23,68(sp)
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 40289f8:	1004923a 	slli	r2,r2,8
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 40289fc:	dd801015 	stw	r22,64(sp)
 4028a00:	dd000e15 	stw	r20,56(sp)
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 4028a04:	1090000c 	andi	r2,r2,16384
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 4028a08:	dcc00d15 	stw	r19,52(sp)
 4028a0c:	dc800c15 	stw	r18,48(sp)
 4028a10:	dc400b15 	stw	r17,44(sp)
 4028a14:	202b883a 	mov	r21,r4
 4028a18:	d9400515 	stw	r5,20(sp)
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 4028a1c:	10002026 	beq	r2,zero,4028aa0 <ip_fragment+0xc8>
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4028a20:	01000084 	movi	r4,2
 4028a24:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(p);
 4028a28:	a809883a 	mov	r4,r21
 4028a2c:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028a30:	01000084 	movi	r4,2
 4028a34:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ip_mib.ipFragFails++;
 4028a38:	00c10134 	movhi	r3,1028
 4028a3c:	18ce0104 	addi	r3,r3,14340
 4028a40:	18801117 	ldw	r2,68(r3)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 4028a44:	aa000617 	ldw	r8,24(r21)
 4028a48:	800d883a 	mov	r6,r16
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      ip_mib.ipFragFails++;
 4028a4c:	10800044 	addi	r2,r2,1
 4028a50:	18801115 	stw	r2,68(r3)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 4028a54:	81000317 	ldw	r4,12(r16)
 4028a58:	41400a17 	ldw	r5,40(r8)
 4028a5c:	01c00104 	movi	r7,4
 4028a60:	da000015 	stw	r8,0(sp)
 4028a64:	0021883a 	mov	r16,zero
 4028a68:	402fcc40 	call	402fcc4 <icmp_destun>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);

   ip_mib.ipFragOKs++;     /* count packets we fragmented */

   return 0;
}
 4028a6c:	8005883a 	mov	r2,r16
 4028a70:	dfc01317 	ldw	ra,76(sp)
 4028a74:	df001217 	ldw	fp,72(sp)
 4028a78:	ddc01117 	ldw	r23,68(sp)
 4028a7c:	dd801017 	ldw	r22,64(sp)
 4028a80:	dd400f17 	ldw	r21,60(sp)
 4028a84:	dd000e17 	ldw	r20,56(sp)
 4028a88:	dcc00d17 	ldw	r19,52(sp)
 4028a8c:	dc800c17 	ldw	r18,48(sp)
 4028a90:	dc400b17 	ldw	r17,44(sp)
 4028a94:	dc000a17 	ldw	r16,40(sp)
 4028a98:	dec01404 	addi	sp,sp,80
 4028a9c:	f800283a 	ret
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
#endif   /* FULL_ICMP */
      return 0;
   }

   maxbuflen = pk_get_max_intrsafe_buf_len ();
 4028aa0:	401bce00 	call	401bce0 <pk_get_max_intrsafe_buf_len>

   /* the maximum amount of data that will be sent to ip2mac ().  Please note that
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));
 4028aa4:	a9000617 	ldw	r4,24(r21)

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
 4028aa8:	80c00003 	ldbu	r3,0(r16)

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 4028aac:	100b883a 	mov	r5,r2
 4028ab0:	20800917 	ldw	r2,36(r4)
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
 4028ab4:	18c003cc 	andi	r3,r3,15
 4028ab8:	18c7883a 	add	r3,r3,r3
 4028abc:	18cd883a 	add	r6,r3,r3

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
 4028ac0:	22000803 	ldbu	r8,32(r4)
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 4028ac4:	31c03fcc 	andi	r7,r6,255
 4028ac8:	11408336 	bltu	r2,r5,4028cd8 <ip_fragment+0x300>
   useable_payload_len &= (~((unsigned short int) 0x07));

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 4028acc:	8080008b 	ldhu	r2,2(r16)
   iphlen = ip_hlen(pip);

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 4028ad0:	29c9c83a 	sub	r4,r5,r7
 4028ad4:	40c03fcc 	andi	r3,r8,255
   useable_payload_len &= (~((unsigned short int) 0x07));

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 4028ad8:	100a923a 	slli	r5,r2,8
 4028adc:	1004d23a 	srli	r2,r2,8
   iphlen = ip_hlen(pip);

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 4028ae0:	20c9c83a 	sub	r4,r4,r3

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
 4028ae4:	00fffe04 	movi	r3,-8

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 4028ae8:	1144b03a 	or	r2,r2,r5
   l2hdr_len = (u_char) p->net->n_lnh;
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
 4028aec:	20c8703a 	and	r4,r4,r3

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 4028af0:	11c5c83a 	sub	r2,r2,r7
   num_frags = (total_payload_len / useable_payload_len);
 4028af4:	10bfffcc 	andi	r2,r2,65535
 4028af8:	273fffcc 	andi	fp,r4,65535
   l2hdr_len = (u_char) p->net->n_lnh;
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
 4028afc:	d900010d 	sth	r4,4(sp)

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
   num_frags = (total_payload_len / useable_payload_len);
 4028b00:	1709203a 	divu	r4,r2,fp
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
 4028b04:	2707383a 	mul	r3,r4,fp

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
   num_frags = (total_payload_len / useable_payload_len);
 4028b08:	200b883a 	mov	r5,r4
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
 4028b0c:	10c5c83a 	sub	r2,r2,r3
 4028b10:	d880040d 	sth	r2,16(sp)
 4028b14:	10bfffcc 	andi	r2,r2,65535
 4028b18:	d8800815 	stw	r2,32(sp)
 4028b1c:	1000701e 	bne	r2,zero,4028ce0 <ip_fragment+0x308>
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
 4028b20:	297fffcc 	andi	r5,r5,65535
 4028b24:	008000c4 	movi	r2,3
 4028b28:	d9400715 	stw	r5,28(sp)
 4028b2c:	1140712e 	bgeu	r2,r5,4028cf4 <ip_fragment+0x31c>
   {
      return (ip_fragment_lc (p, firsthop));
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 4028b30:	8080018b 	ldhu	r2,6(r16)
 4028b34:	1008923a 	slli	r4,r2,8
 4028b38:	1004d23a 	srli	r2,r2,8
 4028b3c:	1104b03a 	or	r2,r2,r4
 4028b40:	10c7ffcc 	andi	r3,r2,8191
 4028b44:	180690fa 	slli	r3,r3,3
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 4028b48:	d9000717 	ldw	r4,28(sp)
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
   {
      return (ip_fragment_lc (p, firsthop));
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 4028b4c:	d8c0030d 	sth	r3,12(sp)
   parent_mf = ((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF);
 4028b50:	10c8000c 	andi	r3,r2,8192
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 4028b54:	20007826 	beq	r4,zero,4028d38 <ip_fragment+0x360>
 4028b58:	35003fcc 	andi	r20,r6,255
 4028b5c:	45803fcc 	andi	r22,r8,255
 4028b60:	b505883a 	add	r2,r22,r20
 4028b64:	1705883a 	add	r2,r2,fp
 4028b68:	d8800215 	stw	r2,8(sp)
 4028b6c:	1807003a 	cmpeq	r3,r3,zero
 4028b70:	20bfffc4 	addi	r2,r4,-1
 4028b74:	002f883a 	mov	r23,zero
 4028b78:	d8c00615 	stw	r3,24(sp)
 4028b7c:	d8800915 	stw	r2,36(sp)
 4028b80:	00004206 	br	4028c8c <ip_fragment+0x2b4>
         {
            amt_to_copy = useable_payload_len;
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
 4028b84:	d9000817 	ldw	r4,32(sp)
 4028b88:	20005026 	beq	r4,zero,4028ccc <ip_fragment+0x2f4>
 4028b8c:	d980040b 	ldhu	r6,16(sp)
 4028b90:	2027883a 	mov	r19,r4
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);
 4028b94:	89000117 	ldw	r4,4(r17)
 4028b98:	a9400317 	ldw	r5,12(r21)
 4028b9c:	9721383a 	mul	r16,r18,fp
 4028ba0:	b109883a 	add	r4,r22,r4
 4028ba4:	a14b883a 	add	r5,r20,r5
 4028ba8:	2c0b883a 	add	r5,r5,r16
 4028bac:	2509883a 	add	r4,r4,r20
 4028bb0:	31bfffcc 	andi	r6,r6,65535
 4028bb4:	40096480 	call	4009648 <memcpy>

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 4028bb8:	d8c0030b 	ldhu	r3,12(sp)
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
         newpkt->nb_plen = iphlen + amt_to_copy;
 4028bbc:	9d0b883a 	add	r5,r19,r20
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
 4028bc0:	280c923a 	slli	r6,r5,8
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 4028bc4:	80e1883a 	add	r16,r16,r3
 4028bc8:	8009d2fa 	srai	r4,r16,11
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
 4028bcc:	2806d23a 	srli	r3,r5,8
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 4028bd0:	8020917a 	slli	r16,r16,5
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
 4028bd4:	89c00117 	ldw	r7,4(r17)
         newpkt->nb_plen = iphlen + amt_to_copy;
         newpkt->net = p->net;
         newpkt->fhost = p->fhost;
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
 4028bd8:	00820004 	movi	r2,2048

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
 4028bdc:	18c03fcc 	andi	r3,r3,255
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 4028be0:	21003fcc 	andi	r4,r4,255
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
         newpkt->nb_plen = iphlen + amt_to_copy;
         newpkt->net = p->net;
         newpkt->fhost = p->fhost;
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
 4028be4:	8880080d 	sth	r2,32(r17)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
 4028be8:	1986b03a 	or	r3,r3,r6
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 4028bec:	2404b03a 	or	r2,r4,r16
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
 4028bf0:	b1e1883a 	add	r16,r22,r7
         newpkt->nb_plen = iphlen + amt_to_copy;
         newpkt->net = p->net;
 4028bf4:	aa000617 	ldw	r8,24(r21)
         newpkt->fhost = p->fhost;
 4028bf8:	aa400717 	ldw	r9,28(r21)
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
 4028bfc:	80c0008d 	sth	r3,2(r16)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
 4028c00:	d8c00917 	ldw	r3,36(sp)
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
         newpkt->nb_plen = iphlen + amt_to_copy;
         newpkt->net = p->net;
 4028c04:	8a000615 	stw	r8,24(r17)
         newpkt->fhost = p->fhost;
 4028c08:	8a400715 	stw	r9,28(r17)
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
 4028c0c:	8c000315 	stw	r16,12(r17)
         newpkt->nb_plen = iphlen + amt_to_copy;
 4028c10:	89400415 	stw	r5,16(r17)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
         newpip->ip_len = htons(newpkt->nb_plen);
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 4028c14:	8080018d 	sth	r2,6(r16)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
 4028c18:	90c00216 	blt	r18,r3,4028c24 <ip_fragment+0x24c>
         {
            newpip->ip_flgs_foff |= htons(IP_FLG_MF);
         }
         else
         {
            if (parent_mf)
 4028c1c:	d9000617 	ldw	r4,24(sp)
 4028c20:	2000021e 	bne	r4,zero,4028c2c <ip_fragment+0x254>
            {
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 4028c24:	10800814 	ori	r2,r2,32
 4028c28:	8080018d 	sth	r2,6(r16)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 4028c2c:	a00ad07a 	srli	r5,r20,1
 4028c30:	8009883a 	mov	r4,r16
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
 4028c34:	8000028d 	sth	zero,10(r16)
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 4028c38:	40199b00 	call	40199b0 <cksum>

         ip_mib.ipFragCreates++;
 4028c3c:	01010134 	movhi	r4,1028
 4028c40:	210e0104 	addi	r4,r4,14340
 4028c44:	20c01217 	ldw	r3,72(r4)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 4028c48:	0084303a 	nor	r2,zero,r2

         ip_mib.ipFragCreates++;

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
 4028c4c:	d9400517 	ldw	r5,20(sp)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 4028c50:	8080028d 	sth	r2,10(r16)

         ip_mib.ipFragCreates++;
 4028c54:	18c00044 	addi	r3,r3,1
 4028c58:	00810134 	movhi	r2,1028
 4028c5c:	108e0104 	addi	r2,r2,14340

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
 4028c60:	8809883a 	mov	r4,r17

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));

         ip_mib.ipFragCreates++;
 4028c64:	10c01215 	stw	r3,72(r2)

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
 4028c68:	4017d640 	call	4017d64 <ip2mac>
 4028c6c:	1021883a 	mov	r16,r2

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));

         ip_mib.ipFragCreates++;
 4028c70:	04410134 	movhi	r17,1028
 4028c74:	8c4e0104 	addi	r17,r17,14340

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
         if (e < 0)
 4028c78:	10004916 	blt	r2,zero,4028da0 <ip_fragment+0x3c8>
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 4028c7c:	d8c00717 	ldw	r3,28(sp)
 4028c80:	bdc00044 	addi	r23,r23,1
 4028c84:	b8bfffcc 	andi	r2,r23,65535
 4028c88:	18802b26 	beq	r3,r2,4028d38 <ip_fragment+0x360>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4028c8c:	01000084 	movi	r4,2
 4028c90:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      newpkt = pk_alloc (useable_payload_len + iphlen + l2hdr_len); 
 4028c94:	d9000217 	ldw	r4,8(sp)
 4028c98:	401bf840 	call	401bf84 <pk_alloc>
 4028c9c:	1023883a 	mov	r17,r2
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028ca0:	01000084 	movi	r4,2
 4028ca4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

      if (newpkt == 0)
 4028ca8:	88003026 	beq	r17,zero,4028d6c <ip_fragment+0x394>
         return ENP_NOBUFFER;
      }
      else
      {
         /* copy the IP header from the original datagram into the fragment */
         MEMCPY((newpkt->nb_buff + l2hdr_len), p->nb_prot, iphlen);
 4028cac:	89000117 	ldw	r4,4(r17)
 4028cb0:	a9400317 	ldw	r5,12(r21)
 4028cb4:	a00d883a 	mov	r6,r20
 4028cb8:	b109883a 	add	r4,r22,r4
 4028cbc:	40096480 	call	4009648 <memcpy>

         /* compute the amount of payload that needs to be copied into each 
          * child fragment */
         if (i < (num_frags - 1))
 4028cc0:	d8c00917 	ldw	r3,36(sp)
 4028cc4:	bcbfffcc 	andi	r18,r23,65535
 4028cc8:	90ffae0e 	bge	r18,r3,4028b84 <ip_fragment+0x1ac>
         {
            amt_to_copy = useable_payload_len;
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
 4028ccc:	d980010b 	ldhu	r6,4(sp)
 4028cd0:	e027883a 	mov	r19,fp
 4028cd4:	003faf06 	br	4028b94 <ip_fragment+0x1bc>
   iphlen = ip_hlen(pip);

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 4028cd8:	100b883a 	mov	r5,r2
 4028cdc:	003f7b06 	br	4028acc <ip_fragment+0xf4>
   num_frags = (total_payload_len / useable_payload_len);
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
   {
      /* we will have one additional (also last) fragment that is smaller than the 
       * other fragments */
      ++num_frags;
 4028ce0:	21400044 	addi	r5,r4,1
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
 4028ce4:	297fffcc 	andi	r5,r5,65535
 4028ce8:	008000c4 	movi	r2,3
 4028cec:	d9400715 	stw	r5,28(sp)
 4028cf0:	117f8f36 	bltu	r2,r5,4028b30 <ip_fragment+0x158>
 4028cf4:	a8800a17 	ldw	r2,40(r21)
 4028cf8:	1080040c 	andi	r2,r2,16
 4028cfc:	103f8c1e 	bne	r2,zero,4028b30 <ip_fragment+0x158>
   {
      return (ip_fragment_lc (p, firsthop));
 4028d00:	d9400517 	ldw	r5,20(sp)
 4028d04:	a809883a 	mov	r4,r21
   UNLOCK_NET_RESOURCE(FREEQ_RESID);

   ip_mib.ipFragOKs++;     /* count packets we fragmented */

   return 0;
}
 4028d08:	dfc01317 	ldw	ra,76(sp)
 4028d0c:	df001217 	ldw	fp,72(sp)
 4028d10:	ddc01117 	ldw	r23,68(sp)
 4028d14:	dd801017 	ldw	r22,64(sp)
 4028d18:	dd400f17 	ldw	r21,60(sp)
 4028d1c:	dd000e17 	ldw	r20,56(sp)
 4028d20:	dcc00d17 	ldw	r19,52(sp)
 4028d24:	dc800c17 	ldw	r18,48(sp)
 4028d28:	dc400b17 	ldw	r17,44(sp)
 4028d2c:	dc000a17 	ldw	r16,40(sp)
 4028d30:	dec01404 	addi	sp,sp,80
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
   {
      return (ip_fragment_lc (p, firsthop));
 4028d34:	40287081 	jmpi	4028708 <ip_fragment_lc>

   } /* end FOR (all child fragments) */

   /* free the parent buffer since all of the data from it have been copied 
    * out into the child fragments */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4028d38:	01000084 	movi	r4,2
 4028d3c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 4028d40:	a809883a 	mov	r4,r21
 4028d44:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028d48:	01000084 	movi	r4,2
 4028d4c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 4028d50:	01010134 	movhi	r4,1028
 4028d54:	210e0104 	addi	r4,r4,14340
 4028d58:	20801017 	ldw	r2,64(r4)
 4028d5c:	0021883a 	mov	r16,zero
 4028d60:	10800044 	addi	r2,r2,1
 4028d64:	20801015 	stw	r2,64(r4)
 4028d68:	003f4006 	br	4028a6c <ip_fragment+0x94>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);

      if (newpkt == 0)
      {
         /* free the packet that we are working with */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4028d6c:	01000084 	movi	r4,2
 4028d70:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(p);
 4028d74:	a809883a 	mov	r4,r21
 4028d78:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028d7c:	01000084 	movi	r4,2
 4028d80:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         ip_mib.ipFragFails++;
 4028d84:	00c10134 	movhi	r3,1028
 4028d88:	18ce0104 	addi	r3,r3,14340
 4028d8c:	18801117 	ldw	r2,68(r3)
 4028d90:	043ffac4 	movi	r16,-21
 4028d94:	10800044 	addi	r2,r2,1
 4028d98:	18801115 	stw	r2,68(r3)
 4028d9c:	003f3306 	br	4028a6c <ip_fragment+0x94>

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
         if (e < 0)
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4028da0:	01000084 	movi	r4,2
 4028da4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(p);
 4028da8:	a809883a 	mov	r4,r21
 4028dac:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028db0:	01000084 	movi	r4,2
 4028db4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 4028db8:	88801117 	ldw	r2,68(r17)
 4028dbc:	10800044 	addi	r2,r2,1
 4028dc0:	88801115 	stw	r2,68(r17)
 4028dc4:	003f2906 	br	4028a6c <ip_fragment+0x94>

04028dc8 <ip_write_internal>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
 4028dc8:	defff904 	addi	sp,sp,-28
 4028dcc:	dc400515 	stw	r17,20(sp)
 4028dd0:	2023883a 	mov	r17,r4
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
 4028dd4:	21000717 	ldw	r4,28(r4)
 4028dd8:	00f80034 	movhi	r3,57344
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
 4028ddc:	dfc00615 	stw	ra,24(sp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
 4028de0:	2004963a 	slli	r2,r4,24
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
 4028de4:	dc000415 	stw	r16,16(sp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
 4028de8:	10bc002c 	andhi	r2,r2,61440
 4028dec:	10c02d26 	beq	r2,r3,4028ea4 <ip_write_internal+0xdc>
   }

#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
 4028df0:	00bfffc4 	movi	r2,-1
 4028df4:	20805626 	beq	r4,r2,4028f50 <ip_write_internal+0x188>
   {
      firsthop = p->fhost;
   }
   else
   {
      p->net = iproute(p->fhost, &firsthop);
 4028df8:	d9400304 	addi	r5,sp,12
 4028dfc:	40282e00 	call	40282e0 <iproute>
 4028e00:	88800615 	stw	r2,24(r17)
      if (p->net == NULL)
 4028e04:	1000ca26 	beq	r2,zero,4029130 <ip_write_internal+0x368>
#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
 4028e08:	00c10134 	movhi	r3,1028
 4028e0c:	18e90e04 	addi	r3,r3,-23496
 4028e10:	18800017 	ldw	r2,0(r3)
 4028e14:	89000717 	ldw	r4,28(r17)
 4028e18:	1080800c 	andi	r2,r2,512
 4028e1c:	1000521e 	bne	r2,zero,4028f68 <ip_write_internal+0x1a0>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
 4028e20:	89400617 	ldw	r5,24(r17)
 4028e24:	28c00a17 	ldw	r3,40(r5)
 4028e28:	19006a1e 	bne	r3,r4,4028fd4 <ip_write_internal+0x20c>
 4028e2c:	18c03fcc 	andi	r3,r3,255
 4028e30:	00801fc4 	movi	r2,127
 4028e34:	18806726 	beq	r3,r2,4028fd4 <ip_write_internal+0x20c>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
   {
      if (!(p->net->n_flags & NF_NBPROT))
 4028e38:	28802a17 	ldw	r2,168(r5)
 4028e3c:	1080020c 	andi	r2,r2,8
 4028e40:	10010326 	beq	r2,zero,4029250 <ip_write_internal+0x488>
         pk_free(p);
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_LOGIC;
      }
      p->type = IPTP;
 4028e44:	00800204 	movi	r2,8
 4028e48:	8880080d 	sth	r2,32(r17)
      UNLOCK_NET_RESOURCE(NET_RESID);
 4028e4c:	0009883a 	mov	r4,zero
 4028e50:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(RXQ_RESID);
 4028e54:	01000044 	movi	r4,1
 4028e58:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      putq(&rcvdq, (q_elt)p);
 4028e5c:	880b883a 	mov	r5,r17
 4028e60:	01010134 	movhi	r4,1028
 4028e64:	210af604 	addi	r4,r4,11224
 4028e68:	401c2940 	call	401c294 <putq>
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 4028e6c:	01000044 	movi	r4,1
 4028e70:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(NET_RESID);
 4028e74:	0009883a 	mov	r4,zero
 4028e78:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);

      SignalPktDemux();
 4028e7c:	00810134 	movhi	r2,1028
 4028e80:	10a93604 	addi	r2,r2,-23336
 4028e84:	11000017 	ldw	r4,0(r2)
 4028e88:	4011e780 	call	4011e78 <OSSemPost>
 4028e8c:	0005883a 	mov	r2,zero
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
      }
   }
}
 4028e90:	dfc00617 	ldw	ra,24(sp)
 4028e94:	dc400517 	ldw	r17,20(sp)
 4028e98:	dc000417 	ldw	r16,16(sp)
 4028e9c:	dec00704 	addi	sp,sp,28
 4028ea0:	f800283a 	ret

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
   {
      if (p->imo != NULL)
 4028ea4:	88800b17 	ldw	r2,44(r17)
 4028ea8:	1000c326 	beq	r2,zero,40291b8 <ip_write_internal+0x3f0>
         if (p->imo->imo_multicast_netp)
 4028eac:	10800017 	ldw	r2,0(r2)
 4028eb0:	10009a26 	beq	r2,zero,402911c <ip_write_internal+0x354>
            p->net = p->imo->imo_multicast_netp;
 4028eb4:	88800615 	stw	r2,24(r17)
               break;
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
 4028eb8:	89400617 	ldw	r5,24(r17)
 4028ebc:	28802b17 	ldw	r2,172(r5)
 4028ec0:	10009b26 	beq	r2,zero,4029130 <ip_write_internal+0x368>
       * If we belong to the destination multicast group
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
 4028ec4:	89000717 	ldw	r4,28(r17)
 4028ec8:	402b1000 	call	402b100 <lookup_mcast>
      if ((inm != NULL) &&
 4028ecc:	10001626 	beq	r2,zero,4028f28 <ip_write_internal+0x160>
 4028ed0:	88800b17 	ldw	r2,44(r17)
 4028ed4:	10000226 	beq	r2,zero,4028ee0 <ip_write_internal+0x118>
 4028ed8:	10800143 	ldbu	r2,5(r2)
 4028edc:	10001226 	beq	r2,zero,4028f28 <ip_write_internal+0x160>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
      {
         p->type = IPTP;
 4028ee0:	00800204 	movi	r2,8
 4028ee4:	8880080d 	sth	r2,32(r17)
         pkt2 = ip_copypkt(p);
 4028ee8:	8809883a 	mov	r4,r17
 4028eec:	40282140 	call	4028214 <ip_copypkt>
 4028ef0:	1021883a 	mov	r16,r2
         if (pkt2)
 4028ef4:	10000c26 	beq	r2,zero,4028f28 <ip_write_internal+0x160>
         {
            LOCK_NET_RESOURCE(RXQ_RESID);
 4028ef8:	01000044 	movi	r4,1
 4028efc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            putq(&rcvdq, (q_elt)pkt2);
 4028f00:	800b883a 	mov	r5,r16
 4028f04:	01010134 	movhi	r4,1028
 4028f08:	210af604 	addi	r4,r4,11224
 4028f0c:	401c2940 	call	401c294 <putq>
            UNLOCK_NET_RESOURCE(RXQ_RESID);
 4028f10:	01000044 	movi	r4,1
 4028f14:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
            SignalPktDemux();
 4028f18:	00810134 	movhi	r2,1028
 4028f1c:	10a93604 	addi	r2,r2,-23336
 4028f20:	11000017 	ldw	r4,0(r2)
 4028f24:	4011e780 	call	4011e78 <OSSemPost>
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
      if ((pip->ip_time == 0) || 
 4028f28:	88800317 	ldw	r2,12(r17)
 4028f2c:	10c00203 	ldbu	r3,8(r2)
 4028f30:	18009526 	beq	r3,zero,4029188 <ip_write_internal+0x3c0>
 4028f34:	89000717 	ldw	r4,28(r17)
 4028f38:	00801fc4 	movi	r2,127
 4028f3c:	20c03fcc 	andi	r3,r4,255
 4028f40:	18809126 	beq	r3,r2,4029188 <ip_write_internal+0x3c0>
 4028f44:	88800617 	ldw	r2,24(r17)
 4028f48:	10c00a17 	ldw	r3,40(r2)
 4028f4c:	20c08e26 	beq	r4,r3,4029188 <ip_write_internal+0x3c0>
#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
 4028f50:	00c10134 	movhi	r3,1028
 4028f54:	18e90e04 	addi	r3,r3,-23496
 4028f58:	18800017 	ldw	r2,0(r3)
#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
   {
      firsthop = p->fhost;
 4028f5c:	d9000315 	stw	r4,12(sp)
#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
 4028f60:	1080800c 	andi	r2,r2,512
 4028f64:	103fae26 	beq	r2,zero,4028e20 <ip_write_internal+0x58>
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 4028f68:	200ed23a 	srli	r7,r4,8
 4028f6c:	2004d43a 	srli	r2,r4,16
 4028f70:	2006d63a 	srli	r3,r4,24
 4028f74:	89400417 	ldw	r5,16(r17)
 4028f78:	21803fcc 	andi	r6,r4,255
 4028f7c:	10803fcc 	andi	r2,r2,255
 4028f80:	39c03fcc 	andi	r7,r7,255
 4028f84:	010100f4 	movhi	r4,1027
 4028f88:	21161804 	addi	r4,r4,22624
 4028f8c:	d8c00115 	stw	r3,4(sp)
 4028f90:	d8800015 	stw	r2,0(sp)
 4028f94:	4002ed40 	call	4002ed4 <printf>
       p->nb_plen, PUSH_IPADDR(p->fhost));
      dprintf(" route %u.%u.%u.%u\n", PUSH_IPADDR(firsthop));
 4028f98:	d9400317 	ldw	r5,12(sp)
 4028f9c:	010100f4 	movhi	r4,1027
 4028fa0:	21162104 	addi	r4,r4,22660
 4028fa4:	280cd23a 	srli	r6,r5,8
 4028fa8:	280ed43a 	srli	r7,r5,16
 4028fac:	2804d63a 	srli	r2,r5,24
 4028fb0:	31803fcc 	andi	r6,r6,255
 4028fb4:	29403fcc 	andi	r5,r5,255
 4028fb8:	39c03fcc 	andi	r7,r7,255
 4028fbc:	d8800015 	stw	r2,0(sp)
 4028fc0:	4002ed40 	call	4002ed4 <printf>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
 4028fc4:	89400617 	ldw	r5,24(r17)
 4028fc8:	89000717 	ldw	r4,28(r17)
 4028fcc:	28c00a17 	ldw	r3,40(r5)
 4028fd0:	193f9626 	beq	r3,r4,4028e2c <ip_write_internal+0x64>

      return SUCCESS;
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
 4028fd4:	8c000a17 	ldw	r16,40(r17)
   /* obtain the length of the largest interrupt-safe buffer that can be 
    * allocated via pk_alloc () */
   maxbuflen = pk_get_max_intrsafe_buf_len ();
 4028fd8:	401bce00 	call	401bce0 <pk_get_max_intrsafe_buf_len>
 4028fdc:	1007883a 	mov	r3,r2

      return SUCCESS;
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
 4028fe0:	8020d13a 	srli	r16,r16,4
 4028fe4:	8400005c 	xori	r16,r16,1
 4028fe8:	8400004c 	andi	r16,r16,1
    * the original buffer is interrupt-safe, we just need to consider the
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
 4028fec:	84003fcc 	andi	r16,r16,255
 4028ff0:	8004c03a 	cmpne	r2,r16,zero
 4028ff4:	1000311e 	bne	r2,zero,40290bc <ip_write_internal+0x2f4>
       limit = MIN(maxbuflen,p->net->n_mtu);
 4028ff8:	88800617 	ldw	r2,24(r17)
 4028ffc:	1809883a 	mov	r4,r3
 4029000:	10c00917 	ldw	r3,36(r2)
 4029004:	19004336 	bltu	r3,r4,4029114 <ip_write_internal+0x34c>
   else
       limit = p->net->n_mtu;

   if ((p->nb_plen + p->net->n_lnh) > limit)
 4029008:	10c00817 	ldw	r3,32(r2)
 402900c:	88800417 	ldw	r2,16(r17)
 4029010:	10c5883a 	add	r2,r2,r3
 4029014:	20802f36 	bltu	r4,r2,40290d4 <ip_write_internal+0x30c>
   }
   else
   {
      /* fragmentation is not required; check to see if we need to copy out of
       * an interrupt-unsafe buffer */ 
      if (!intrsafe_buf)
 4029018:	8004c03a 	cmpne	r2,r16,zero
 402901c:	1000351e 	bne	r2,zero,40290f4 <ip_write_internal+0x32c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4029020:	01000084 	movi	r4,2
 4029024:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         newpkt = pk_alloc(p->nb_plen + p->net->n_lnh);
 4029028:	88800617 	ldw	r2,24(r17)
 402902c:	88c00417 	ldw	r3,16(r17)
 4029030:	11000817 	ldw	r4,32(r2)
 4029034:	1909883a 	add	r4,r3,r4
 4029038:	401bf840 	call	401bf84 <pk_alloc>
 402903c:	1021883a 	mov	r16,r2
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4029040:	01000084 	movi	r4,2
 4029044:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         if (newpkt == 0)
 4029048:	80008a26 	beq	r16,zero,4029274 <ip_write_internal+0x4ac>
            return ENP_NOBUFFER;
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
 402904c:	88c00617 	ldw	r3,24(r17)
 4029050:	81000117 	ldw	r4,4(r16)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
 4029054:	89800417 	ldw	r6,16(r17)
            return ENP_NOBUFFER;
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
 4029058:	18800817 	ldw	r2,32(r3)
 402905c:	2089883a 	add	r4,r4,r2
 4029060:	81000315 	stw	r4,12(r16)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
 4029064:	89400317 	ldw	r5,12(r17)
 4029068:	40096480 	call	4009648 <memcpy>
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
 402906c:	88c00417 	ldw	r3,16(r17)
            newpkt->net = p->net;
 4029070:	88800617 	ldw	r2,24(r17)
            newpkt->fhost = p->fhost;
 4029074:	89000717 	ldw	r4,28(r17)
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
 4029078:	80c00415 	stw	r3,16(r16)
            newpkt->net = p->net;
 402907c:	80800615 	stw	r2,24(r16)
            newpkt->fhost = p->fhost;
 4029080:	81000715 	stw	r4,28(r16)
            /* free the original packet since it is no longer needed */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4029084:	01000084 	movi	r4,2
 4029088:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(p);
 402908c:	8809883a 	mov	r4,r17
 4029090:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4029094:	01000084 	movi	r4,2
 4029098:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            /* send packet to MAC layer. This will try to resolve MAC layer addressing 
             * and send packet. ip2mac() can return SUCCESS, PENDING, or error codes. 
             */
            return(ip2mac(newpkt, firsthop));
 402909c:	d9400317 	ldw	r5,12(sp)
 40290a0:	8009883a 	mov	r4,r16
 40290a4:	4017d640 	call	4017d64 <ip2mac>
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
      }
   }
}
 40290a8:	dfc00617 	ldw	ra,24(sp)
 40290ac:	dc400517 	ldw	r17,20(sp)
 40290b0:	dc000417 	ldw	r16,16(sp)
 40290b4:	dec00704 	addi	sp,sp,28
 40290b8:	f800283a 	ret
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
       limit = MIN(maxbuflen,p->net->n_mtu);
   else
       limit = p->net->n_mtu;
 40290bc:	88800617 	ldw	r2,24(r17)

   if ((p->nb_plen + p->net->n_lnh) > limit)
 40290c0:	10c00817 	ldw	r3,32(r2)
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
       limit = MIN(maxbuflen,p->net->n_mtu);
   else
       limit = p->net->n_mtu;
 40290c4:	11000917 	ldw	r4,36(r2)

   if ((p->nb_plen + p->net->n_lnh) > limit)
 40290c8:	88800417 	ldw	r2,16(r17)
 40290cc:	10c5883a 	add	r2,r2,r3
 40290d0:	20bfd12e 	bgeu	r4,r2,4029018 <ip_write_internal+0x250>
   {
#ifdef IP_FRAGMENTS
      int err;
      err = ip_fragment(p, firsthop);
 40290d4:	d9400317 	ldw	r5,12(sp)
 40290d8:	8809883a 	mov	r4,r17
 40290dc:	40289d80 	call	40289d8 <ip_fragment>
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
      }
   }
}
 40290e0:	dfc00617 	ldw	ra,24(sp)
 40290e4:	dc400517 	ldw	r17,20(sp)
 40290e8:	dc000417 	ldw	r16,16(sp)
 40290ec:	dec00704 	addi	sp,sp,28
 40290f0:	f800283a 	ret
      else
      {
         /* since the packet is in an interrupt-safe buffer, it can be passed to 
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
 40290f4:	d9400317 	ldw	r5,12(sp)
 40290f8:	8809883a 	mov	r4,r17
 40290fc:	4017d640 	call	4017d64 <ip2mac>
      }
   }
}
 4029100:	dfc00617 	ldw	ra,24(sp)
 4029104:	dc400517 	ldw	r17,20(sp)
 4029108:	dc000417 	ldw	r16,16(sp)
 402910c:	dec00704 	addi	sp,sp,28
 4029110:	f800283a 	ret
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
       limit = MIN(maxbuflen,p->net->n_mtu);
 4029114:	1809883a 	mov	r4,r3
 4029118:	003fbb06 	br	4029008 <ip_write_internal+0x240>
   {
      if (p->imo != NULL)
         if (p->imo->imo_multicast_netp)
            p->net = p->imo->imo_multicast_netp;
         else
            p->net = iproute(p->fhost, &firsthop);
 402911c:	d9400304 	addi	r5,sp,12
 4029120:	40282e00 	call	40282e0 <iproute>
 4029124:	88800615 	stw	r2,24(r17)
               break;
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
 4029128:	89400617 	ldw	r5,24(r17)
 402912c:	283f631e 	bne	r5,zero,4028ebc <ip_write_internal+0xf4>
   {
      p->net = iproute(p->fhost, &firsthop);
      if (p->net == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 4029130:	00c10134 	movhi	r3,1028
 4029134:	18e90e04 	addi	r3,r3,-23496
 4029138:	18800017 	ldw	r2,0(r3)
 402913c:	1080840c 	andi	r2,r2,528
 4029140:	1000321e 	bne	r2,zero,402920c <ip_write_internal+0x444>
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
 4029144:	00c10134 	movhi	r3,1028
 4029148:	18ce0104 	addi	r3,r3,14340
 402914c:	18800b17 	ldw	r2,44(r3)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4029150:	01000084 	movi	r4,2
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
 4029154:	10800044 	addi	r2,r2,1
 4029158:	18800b15 	stw	r2,44(r3)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 402915c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(p);
 4029160:	8809883a 	mov	r4,r17
 4029164:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4029168:	01000084 	movi	r4,2
 402916c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4029170:	00bff7c4 	movi	r2,-33
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
      }
   }
}
 4029174:	dfc00617 	ldw	ra,24(sp)
 4029178:	dc400517 	ldw	r17,20(sp)
 402917c:	dc000417 	ldw	r16,16(sp)
 4029180:	dec00704 	addi	sp,sp,28
 4029184:	f800283a 	ret
      pip = (struct ip *)(p->nb_prot);
      if ((pip->ip_time == 0) || 
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
          (p->fhost == p->net->n_ipaddr))
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4029188:	01000084 	movi	r4,2
 402918c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(p);
 4029190:	8809883a 	mov	r4,r17
 4029194:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4029198:	01000084 	movi	r4,2
 402919c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 40291a0:	0005883a 	mov	r2,zero
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
      }
   }
}
 40291a4:	dfc00617 	ldw	ra,24(sp)
 40291a8:	dc400517 	ldw	r17,20(sp)
 40291ac:	dc000417 	ldw	r16,16(sp)
 40291b0:	dec00704 	addi	sp,sp,28
 40291b4:	f800283a 	ret
            p->net = p->imo->imo_multicast_netp;
         else
            p->net = iproute(p->fhost, &firsthop);
      else
      {
         for (i = 0; i < ifNumber; i++)
 40291b8:	00810134 	movhi	r2,1028
 40291bc:	10a90f04 	addi	r2,r2,-23492
 40291c0:	11800017 	ldw	r6,0(r2)
 40291c4:	303fd826 	beq	r6,zero,4029128 <ip_write_internal+0x360>
            if (nets[i]->n_mcastlist)
 40291c8:	00c10134 	movhi	r3,1028
 40291cc:	18cbbb04 	addi	r3,r3,12012
 40291d0:	19000017 	ldw	r4,0(r3)
 40291d4:	20802b17 	ldw	r2,172(r4)
 40291d8:	10000a1e 	bne	r2,zero,4029204 <ip_write_internal+0x43c>
            {
               p->net = nets[i];
               break;
 40291dc:	18c00104 	addi	r3,r3,4
 40291e0:	000b883a 	mov	r5,zero
 40291e4:	00000406 	br	40291f8 <ip_write_internal+0x430>
         else
            p->net = iproute(p->fhost, &firsthop);
      else
      {
         for (i = 0; i < ifNumber; i++)
            if (nets[i]->n_mcastlist)
 40291e8:	19000017 	ldw	r4,0(r3)
 40291ec:	18c00104 	addi	r3,r3,4
 40291f0:	20802b17 	ldw	r2,172(r4)
 40291f4:	1000031e 	bne	r2,zero,4029204 <ip_write_internal+0x43c>
            p->net = p->imo->imo_multicast_netp;
         else
            p->net = iproute(p->fhost, &firsthop);
      else
      {
         for (i = 0; i < ifNumber; i++)
 40291f8:	29400044 	addi	r5,r5,1
 40291fc:	317ffa1e 	bne	r6,r5,40291e8 <ip_write_internal+0x420>
 4029200:	003fc906 	br	4029128 <ip_write_internal+0x360>
            if (nets[i]->n_mcastlist)
            {
               p->net = nets[i];
 4029204:	89000615 	stw	r4,24(r17)
 4029208:	003f2b06 	br	4028eb8 <ip_write_internal+0xf0>
      if (p->net == NULL)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 402920c:	89c00717 	ldw	r7,28(r17)
 4029210:	89800417 	ldw	r6,16(r17)
 4029214:	010100f4 	movhi	r4,1027
 4029218:	21160804 	addi	r4,r4,22560
 402921c:	3804d23a 	srli	r2,r7,8
 4029220:	3806d43a 	srli	r3,r7,16
 4029224:	3810d63a 	srli	r8,r7,24
 4029228:	880b883a 	mov	r5,r17
 402922c:	18c03fcc 	andi	r3,r3,255
 4029230:	39c03fcc 	andi	r7,r7,255
 4029234:	10803fcc 	andi	r2,r2,255
 4029238:	d8c00115 	stw	r3,4(sp)
 402923c:	da000215 	stw	r8,8(sp)
 4029240:	d8800015 	stw	r2,0(sp)
 4029244:	4002ed40 	call	4002ed4 <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
 4029248:	401c81c0 	call	401c81c <dtrap>
 402924c:	003fbd06 	br	4029144 <ip_write_internal+0x37c>
          * IP or ARP protocol header) and nb_type to the protocol
          * type, and set the NF_NBPROT flag in its interfaces'
          * n_flags fields.
          */
#ifdef NPDEBUG
         dtrap();
 4029250:	401c81c0 	call	401c81c <dtrap>
#endif
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4029254:	01000084 	movi	r4,2
 4029258:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(p);
 402925c:	8809883a 	mov	r4,r17
 4029260:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4029264:	01000084 	movi	r4,2
 4029268:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402926c:	00bffd44 	movi	r2,-11
 4029270:	003f0706 	br	4028e90 <ip_write_internal+0xc8>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         if (newpkt == 0)
         {
            /* can't allocate interrupt-safe buffer, so free the packet that 
             * we are working with */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4029274:	01000084 	movi	r4,2
 4029278:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(p);
 402927c:	8809883a 	mov	r4,r17
 4029280:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4029284:	01000084 	movi	r4,2
 4029288:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402928c:	00bffac4 	movi	r2,-21
 4029290:	003eff06 	br	4028e90 <ip_write_internal+0xc8>

04029294 <ip_raw_write>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
 4029294:	defffd04 	addi	sp,sp,-12
 4029298:	dc000015 	stw	r16,0(sp)
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
 402929c:	24000317 	ldw	r16,12(r4)
{
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 40292a0:	00810134 	movhi	r2,1028
 40292a4:	108e0104 	addi	r2,r2,14340
 40292a8:	10c00917 	ldw	r3,36(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
 40292ac:	8180010b 	ldhu	r6,4(r16)
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
 40292b0:	dc400115 	stw	r17,4(sp)
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 40292b4:	18c00044 	addi	r3,r3,1
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
 40292b8:	2023883a 	mov	r17,r4
 40292bc:	dfc00215 	stw	ra,8(sp)
      uid++;
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   pip->ip_chksum = ~cksum(pip, 10);
 40292c0:	01400284 	movi	r5,10
 40292c4:	8009883a 	mov	r4,r16
{
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 40292c8:	10c00915 	stw	r3,36(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
 40292cc:	3000081e 	bne	r6,zero,40292f0 <ip_raw_write+0x5c>
   {
      pip->ip_id = htons((unshort)uid);
 40292d0:	d0a05017 	ldw	r2,-32448(gp)
 40292d4:	10ffffcc 	andi	r3,r2,65535
 40292d8:	180c923a 	slli	r6,r3,8
 40292dc:	1806d23a 	srli	r3,r3,8
      uid++;
 40292e0:	10800044 	addi	r2,r2,1
 40292e4:	d0a05015 	stw	r2,-32448(gp)
   pip = (struct ip*)(p->nb_prot);
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
   {
      pip->ip_id = htons((unshort)uid);
 40292e8:	1986b03a 	or	r3,r3,r6
 40292ec:	80c0010d 	sth	r3,4(r16)
      uid++;
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 40292f0:	8000028d 	sth	zero,10(r16)
   pip->ip_chksum = ~cksum(pip, 10);
 40292f4:	40199b00 	call	40199b0 <cksum>
 40292f8:	0084303a 	nor	r2,zero,r2

   /* do the actual write */
   return (ip_write_internal(p));
 40292fc:	8809883a 	mov	r4,r17
      uid++;
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   pip->ip_chksum = ~cksum(pip, 10);
 4029300:	8080028d 	sth	r2,10(r16)

   /* do the actual write */
   return (ip_write_internal(p));
}
 4029304:	dfc00217 	ldw	ra,8(sp)
 4029308:	dc400117 	ldw	r17,4(sp)
 402930c:	dc000017 	ldw	r16,0(sp)
 4029310:	dec00304 	addi	sp,sp,12
   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   pip->ip_chksum = ~cksum(pip, 10);

   /* do the actual write */
   return (ip_write_internal(p));
 4029314:	4028dc81 	jmpi	4028dc8 <ip_write_internal>

04029318 <ip_write2>:
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4029318:	00c10134 	movhi	r3,1028
 402931c:	18ce0104 	addi	r3,r3,14340
 4029320:	18800917 	ldw	r2,36(r3)
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
 4029324:	defffd04 	addi	sp,sp,-12
 4029328:	dc400115 	stw	r17,4(sp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 402932c:	10800044 	addi	r2,r2,1
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
 4029330:	dfc00215 	stw	ra,8(sp)
 4029334:	dc000015 	stw	r16,0(sp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4029338:	18800915 	stw	r2,36(r3)

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 402933c:	30c00003 	ldbu	r3,0(r6)
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
 4029340:	300f883a 	mov	r7,r6
 4029344:	2823883a 	mov	r17,r5
 4029348:	2015883a 	mov	r10,r4
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 402934c:	18006f26 	beq	r3,zero,402950c <ip_write2+0x1f4>
 4029350:	3005883a 	mov	r2,r6
 4029354:	01400504 	movi	r5,20
 4029358:	01000504 	movi	r4,20
 402935c:	00000206 	br	4029368 <ip_write2+0x50>
 4029360:	10c00003 	ldbu	r3,0(r2)
 4029364:	18000526 	beq	r3,zero,402937c <ip_write2+0x64>
 4029368:	10800044 	addi	r2,r2,1
   {
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
 402936c:	193ffc1e 	bne	r3,r4,4029360 <ip_write2+0x48>
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 4029370:	10c00003 	ldbu	r3,0(r2)
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
 4029374:	29400104 	addi	r5,r5,4
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 4029378:	183ffb1e 	bne	r3,zero,4029368 <ip_write2+0x50>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
 402937c:	2a003fcc 	andi	r8,r5,255
 4029380:	408000cc 	andi	r2,r8,3
 4029384:	10005b26 	beq	r2,zero,40294f4 <ip_write2+0x1dc>
      iphlen_pad = 4 - (iphlen & 0x3);
 4029388:	288000cc 	andi	r2,r5,3
 402938c:	00c00104 	movi	r3,4
 4029390:	1887c83a 	sub	r3,r3,r2
 4029394:	1a403fcc 	andi	r9,r3,255
 4029398:	4251883a 	add	r8,r8,r9
 402939c:	4005d0ba 	srai	r2,r8,2
 40293a0:	400d883a 	mov	r6,r8
 40293a4:	4009883a 	mov	r4,r8
 40293a8:	11401014 	ori	r5,r2,64
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
 40293ac:	88800417 	ldw	r2,16(r17)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
 40293b0:	88c00317 	ldw	r3,12(r17)
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
 40293b4:	1185883a 	add	r2,r2,r6
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
 40293b8:	1921c83a 	sub	r16,r3,r4
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
 40293bc:	88800415 	stw	r2,16(r17)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
 40293c0:	8c000315 	stw	r16,12(r17)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
 40293c4:	81400005 	stb	r5,0(r16)
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 40293c8:	d0e05017 	ldw	r3,-32448(gp)
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 40293cc:	8900040b 	ldhu	r4,16(r17)
   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
 40293d0:	8000018d 	sth	zero,6(r16)
   pip->ip_id = htons((unshort)uid);
   uid++;
 40293d4:	18800044 	addi	r2,r3,1
 40293d8:	d0a05015 	stw	r2,-32448(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
   pip->ip_prot = prot;
 40293dc:	82800245 	stb	r10,9(r16)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40293e0:	89400717 	ldw	r5,28(r17)
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 40293e4:	18ffffcc 	andi	r3,r3,65535
 40293e8:	1804923a 	slli	r2,r3,8
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 40293ec:	200c923a 	slli	r6,r4,8
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40293f0:	280a963a 	slli	r5,r5,24
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 40293f4:	1806d23a 	srli	r3,r3,8
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 40293f8:	2008d23a 	srli	r4,r4,8
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40293fc:	297c002c 	andhi	r5,r5,61440
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 4029400:	1886b03a 	or	r3,r3,r2
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 4029404:	2188b03a 	or	r4,r4,r6
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4029408:	00b80034 	movhi	r2,57344
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 402940c:	80c0010d 	sth	r3,4(r16)
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 4029410:	8100008d 	sth	r4,2(r16)
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 4029414:	8000028d 	sth	zero,10(r16)
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4029418:	28802e26 	beq	r5,r2,40294d4 <ip_write2+0x1bc>
      ttl = p->imo->imo_multicast_ttl;
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
 402941c:	88800c17 	ldw	r2,48(r17)
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
      ttl = p->imo->imo_multicast_ttl;
 4029420:	01001004 	movi	r4,64
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
 4029424:	10003026 	beq	r2,zero,40294e8 <ip_write2+0x1d0>
   {
      if (sopts->ip_ttl)
 4029428:	10c00043 	ldbu	r3,1(r2)
 402942c:	18002726 	beq	r3,zero,40294cc <ip_write2+0x1b4>
         pip->ip_time = sopts->ip_ttl;
 4029430:	80c00205 	stb	r3,8(r16)
      else
         pip->ip_time = ttl;
      pip->ip_tos = sopts->ip_tos;
 4029434:	10800003 	ldbu	r2,0(r2)
 4029438:	80800045 	stb	r2,1(r16)
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 402943c:	88800317 	ldw	r2,12(r17)
 4029440:	38c00003 	ldbu	r3,0(r7)
 4029444:	11400504 	addi	r5,r2,20
 4029448:	18000b26 	beq	r3,zero,4029478 <ip_write2+0x160>
 402944c:	00800504 	movi	r2,20
 4029450:	01012504 	movi	r4,1172
 4029454:	00000206 	br	4029460 <ip_write2+0x148>
 4029458:	38c00003 	ldbu	r3,0(r7)
 402945c:	18000626 	beq	r3,zero,4029478 <ip_write2+0x160>
 4029460:	39c00044 	addi	r7,r7,1
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
 4029464:	18bffc1e 	bne	r3,r2,4029458 <ip_write2+0x140>
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
 4029468:	29000015 	stw	r4,0(r5)
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 402946c:	38c00003 	ldbu	r3,0(r7)
      switch (*optp)
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
 4029470:	29400104 	addi	r5,r5,4
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 4029474:	183ffa1e 	bne	r3,zero,4029460 <ip_write2+0x148>
            break;
      }
   }

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
 4029478:	48000726 	beq	r9,zero,4029498 <ip_write2+0x180>
 402947c:	0009883a 	mov	r4,zero
 4029480:	0007883a 	mov	r3,zero
 4029484:	21000044 	addi	r4,r4,1
 4029488:	1945883a 	add	r2,r3,r5
 402948c:	20c03fcc 	andi	r3,r4,255
 4029490:	10000005 	stb	zero,0(r2)
 4029494:	48fffb1e 	bne	r9,r3,4029484 <ip_write2+0x16c>
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
 4029498:	400ad7fa 	srli	r5,r8,31
 402949c:	8009883a 	mov	r4,r16
 40294a0:	2a0b883a 	add	r5,r5,r8
 40294a4:	280bd07a 	srai	r5,r5,1
 40294a8:	40199b00 	call	40199b0 <cksum>
 40294ac:	0084303a 	nor	r2,zero,r2

   /* do the actual write */
   return (ip_write_internal (p));
 40294b0:	8809883a 	mov	r4,r17

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
 40294b4:	8080028d 	sth	r2,10(r16)

   /* do the actual write */
   return (ip_write_internal (p));
}
 40294b8:	dfc00217 	ldw	ra,8(sp)
 40294bc:	dc400117 	ldw	r17,4(sp)
 40294c0:	dc000017 	ldw	r16,0(sp)
 40294c4:	dec00304 	addi	sp,sp,12
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));

   /* do the actual write */
   return (ip_write_internal (p));
 40294c8:	4028dc81 	jmpi	4028dc8 <ip_write_internal>
   if ((sopts = p->soxopts))
   {
      if (sopts->ip_ttl)
         pip->ip_time = sopts->ip_ttl;
      else
         pip->ip_time = ttl;
 40294cc:	81000205 	stb	r4,8(r16)
 40294d0:	003fd806 	br	4029434 <ip_write2+0x11c>
   pip->ip_len = htons((unshort)(p->nb_plen));
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40294d4:	88800b17 	ldw	r2,44(r17)
 40294d8:	103fd026 	beq	r2,zero,402941c <ip_write2+0x104>
      ttl = p->imo->imo_multicast_ttl;
 40294dc:	11000103 	ldbu	r4,4(r2)
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
 40294e0:	88800c17 	ldw	r2,48(r17)
 40294e4:	103fd01e 	bne	r2,zero,4029428 <ip_write2+0x110>
         pip->ip_time = ttl;
      pip->ip_tos = sopts->ip_tos;
   }
   else
   {
      pip->ip_time = ttl;
 40294e8:	81000205 	stb	r4,8(r16)
      pip->ip_tos = IP_TOS_DEFVAL;
 40294ec:	80000045 	stb	zero,1(r16)
 40294f0:	003fd206 	br	402943c <ip_write2+0x124>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
 40294f4:	4005d0ba 	srai	r2,r8,2
 40294f8:	400d883a 	mov	r6,r8
 40294fc:	4009883a 	mov	r4,r8
 4029500:	11401014 	ori	r5,r2,64
 4029504:	0013883a 	mov	r9,zero
 4029508:	003fa806 	br	40293ac <ip_write2+0x94>
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 402950c:	02000504 	movi	r8,20
 4029510:	400d883a 	mov	r6,r8
 4029514:	4009883a 	mov	r4,r8
 4029518:	01401144 	movi	r5,69
 402951c:	0013883a 	mov	r9,zero
 4029520:	003fa206 	br	40293ac <ip_write2+0x94>

04029524 <ip_write>:

int
ip_write(
   u_char   prot,
   PACKET   p)
{
 4029524:	defffd04 	addi	sp,sp,-12
 4029528:	dc400115 	stw	r17,4(sp)
 402952c:	2823883a 	mov	r17,r5
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4029530:	01410134 	movhi	r5,1028
 4029534:	294e0104 	addi	r5,r5,14340

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
   p->nb_plen += sizeof(struct ip);
 4029538:	88c00417 	ldw	r3,16(r17)
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 402953c:	28800917 	ldw	r2,36(r5)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
 4029540:	89800317 	ldw	r6,12(r17)

int
ip_write(
   u_char   prot,
   PACKET   p)
{
 4029544:	dc000015 	stw	r16,0(sp)

   ip_mib.ipOutRequests++;

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
   p->nb_plen += sizeof(struct ip);
 4029548:	18c00504 	addi	r3,r3,20
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
 402954c:	343ffb04 	addi	r16,r6,-20
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4029550:	10800044 	addi	r2,r2,1
 4029554:	28800915 	stw	r2,36(r5)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
   p->nb_plen += sizeof(struct ip);
 4029558:	88c00415 	stw	r3,16(r17)

int
ip_write(
   u_char   prot,
   PACKET   p)
{
 402955c:	dfc00215 	stw	ra,8(sp)
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
 4029560:	8c000315 	stw	r16,12(r17)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 4029564:	00801144 	movi	r2,69
 4029568:	30bffb05 	stb	r2,-20(r6)
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 402956c:	d0e05017 	ldw	r3,-32448(gp)
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 4029570:	8940040b 	ldhu	r5,16(r17)
   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
 4029574:	8000018d 	sth	zero,6(r16)
   pip->ip_id = htons((unshort)uid);
   uid++;
 4029578:	18800044 	addi	r2,r3,1
 402957c:	d0a05015 	stw	r2,-32448(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
   pip->ip_prot = prot;
 4029580:	81000245 	stb	r4,9(r16)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4029584:	89000717 	ldw	r4,28(r17)
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 4029588:	18ffffcc 	andi	r3,r3,65535
 402958c:	1804923a 	slli	r2,r3,8
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 4029590:	280c923a 	slli	r6,r5,8
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4029594:	2008963a 	slli	r4,r4,24
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 4029598:	1806d23a 	srli	r3,r3,8
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 402959c:	280ad23a 	srli	r5,r5,8
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40295a0:	213c002c 	andhi	r4,r4,61440
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 40295a4:	1886b03a 	or	r3,r3,r2
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 40295a8:	298ab03a 	or	r5,r5,r6
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40295ac:	00b80034 	movhi	r2,57344
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
   pip->ip_id = htons((unshort)uid);
 40295b0:	80c0010d 	sth	r3,4(r16)
   uid++;
   pip->ip_len = htons((unshort)(p->nb_plen));
 40295b4:	8140008d 	sth	r5,2(r16)
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 40295b8:	8000028d 	sth	zero,10(r16)
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 40295bc:	20801526 	beq	r4,r2,4029614 <ip_write+0xf0>
      ttl = p->imo->imo_multicast_ttl;
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 40295c0:	88800c17 	ldw	r2,48(r17)
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
      ttl = p->imo->imo_multicast_ttl;
 40295c4:	01001004 	movi	r4,64
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 40295c8:	10001726 	beq	r2,zero,4029628 <ip_write+0x104>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 40295cc:	10c00043 	ldbu	r3,1(r2)
 40295d0:	18000e26 	beq	r3,zero,402960c <ip_write+0xe8>
         pip->ip_time = sopts->ip_ttl;
 40295d4:	80c00205 	stb	r3,8(r16)
	  else
         pip->ip_time = ttl;
      pip->ip_tos = sopts->ip_tos;
 40295d8:	10800003 	ldbu	r2,0(r2)
 40295dc:	80800045 	stb	r2,1(r16)
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
 40295e0:	8009883a 	mov	r4,r16
 40295e4:	01400284 	movi	r5,10
 40295e8:	40199b00 	call	40199b0 <cksum>
 40295ec:	0084303a 	nor	r2,zero,r2

   /* do the actual write */
   return (ip_write_internal(p));
 40295f0:	8809883a 	mov	r4,r17
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
 40295f4:	8080028d 	sth	r2,10(r16)

   /* do the actual write */
   return (ip_write_internal(p));
}
 40295f8:	dfc00217 	ldw	ra,8(sp)
 40295fc:	dc400117 	ldw	r17,4(sp)
 4029600:	dc000017 	ldw	r16,0(sp)
 4029604:	dec00304 	addi	sp,sp,12
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);

   /* do the actual write */
   return (ip_write_internal(p));
 4029608:	4028dc81 	jmpi	4028dc8 <ip_write_internal>
   {
	  /* yup */
	  if (sopts->ip_ttl)
         pip->ip_time = sopts->ip_ttl;
	  else
         pip->ip_time = ttl;
 402960c:	81000205 	stb	r4,8(r16)
 4029610:	003ff106 	br	40295d8 <ip_write+0xb4>
   pip->ip_len = htons((unshort)(p->nb_plen));
   pip->ip_prot = prot;
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
   ttl = IP_TTL;
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4029614:	88800b17 	ldw	r2,44(r17)
 4029618:	103fe926 	beq	r2,zero,40295c0 <ip_write+0x9c>
      ttl = p->imo->imo_multicast_ttl;
 402961c:	11000103 	ldbu	r4,4(r2)
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 4029620:	88800c17 	ldw	r2,48(r17)
 4029624:	103fe91e 	bne	r2,zero,40295cc <ip_write+0xa8>
      pip->ip_tos = sopts->ip_tos;
   }
   else
   {
	  /* nope */
      pip->ip_time = ttl;
 4029628:	81000205 	stb	r4,8(r16)
      pip->ip_tos = IP_TOS_DEFVAL;
 402962c:	80000045 	stb	zero,1(r16)
 4029630:	003feb06 	br	40295e0 <ip_write+0xbc>

04029634 <ip_init>:
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
 4029634:	defffe04 	addi	sp,sp,-8

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
 4029638:	01000204 	movi	r4,8
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
 402963c:	dc000015 	stw	r16,0(sp)
 4029640:	dfc00115 	stw	ra,4(sp)
#endif
      return(1);
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
 4029644:	04010134 	movhi	r16,1028
 4029648:	840e0104 	addi	r16,r16,14340
int
ip_init(void)
{

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
 402964c:	40281080 	call	4028108 <reg_type>
#endif
      return(1);
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
 4029650:	000b883a 	mov	r5,zero
 4029654:	01801404 	movi	r6,80
 4029658:	8009883a 	mov	r4,r16
int
ip_init(void)
{

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
 402965c:	10000826 	beq	r2,zero,4029680 <ip_init+0x4c>
   {   
#ifdef NPDEBUG
      dprintf("IP_INIT: unable to register type with MAC driver\n");
 4029660:	010100f4 	movhi	r4,1027
 4029664:	21162604 	addi	r4,r4,22680
 4029668:	4002fec0 	call	4002fec <puts>
 402966c:	00800044 	movi	r2,1
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
}
 4029670:	dfc00117 	ldw	ra,4(sp)
 4029674:	dc000017 	ldw	r16,0(sp)
 4029678:	dec00204 	addi	sp,sp,8
 402967c:	f800283a 	ret
#endif
      return(1);
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
 4029680:	40026a00 	call	40026a0 <memset>
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
   ip_mib.ipDefaultTTL = IP_TTL;

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 4029684:	d1204f17 	ldw	r4,-32452(gp)
      return(1);
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
 4029688:	00800084 	movi	r2,2
   ip_mib.ipDefaultTTL = IP_TTL;
 402968c:	00c01004 	movi	r3,64

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 4029690:	21000f24 	muli	r4,r4,60
      return(1);
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
 4029694:	80800015 	stw	r2,0(r16)
   ip_mib.ipDefaultTTL = IP_TTL;
 4029698:	80c00115 	stw	r3,4(r16)

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 402969c:	401cdc80 	call	401cdc8 <npalloc>
      dprintf("IP_INIT ERROR: can't alloc route table\n");
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
 40296a0:	1009883a 	mov	r4,r2
 40296a4:	000b883a 	mov	r5,zero
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
   ip_mib.ipDefaultTTL = IP_TTL;

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 40296a8:	d0a85815 	stw	r2,-24224(gp)
   if (!rt_mib)
 40296ac:	10000c26 	beq	r2,zero,40296e0 <ip_init+0xac>
      dprintf("IP_INIT ERROR: can't alloc route table\n");
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
 40296b0:	d1a04f17 	ldw	r6,-32452(gp)
 40296b4:	31800f24 	muli	r6,r6,60
 40296b8:	40026a00 	call	40026a0 <memset>
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
 40296bc:	00800044 	movi	r2,1
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
 40296c0:	00c01e04 	movi	r3,120
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
 40296c4:	80800015 	stw	r2,0(r16)
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
 40296c8:	0005883a 	mov	r2,zero
 40296cc:	80c00c15 	stw	r3,48(r16)
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
}
 40296d0:	dfc00117 	ldw	ra,4(sp)
 40296d4:	dc000017 	ldw	r16,0(sp)
 40296d8:	dec00204 	addi	sp,sp,8
 40296dc:	f800283a 	ret
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
   if (!rt_mib)
   {
#ifdef NPDEBUG
      dprintf("IP_INIT ERROR: can't alloc route table\n");
 40296e0:	010100f4 	movhi	r4,1027
 40296e4:	21163304 	addi	r4,r4,22732
 40296e8:	4002fec0 	call	4002fec <puts>
 40296ec:	00bffb04 	movi	r2,-20
 40296f0:	003fdf06 	br	4029670 <ip_init+0x3c>

040296f4 <ip_reasm_match_frag_with_ire>:
   prot = pip->ip_prot;
   id = pip->ip_id;

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 40296f4:	d0e85a17 	ldw	r3,-24216(gp)
   IREP tmpp;
 
   src = pip->ip_src;
   dest = pip->ip_dest;
   prot = pip->ip_prot;
   id = pip->ip_id;
 40296f8:	21c0010b 	ldhu	r7,4(r4)
   ip_addr dest;
   u_char prot;
   u_short id;
   IREP tmpp;
 
   src = pip->ip_src;
 40296fc:	21400317 	ldw	r5,12(r4)
   dest = pip->ip_dest;
 4029700:	21800417 	ldw	r6,16(r4)
   prot = pip->ip_prot;
 4029704:	20800243 	ldbu	r2,9(r4)
   id = pip->ip_id;

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029708:	18000d26 	beq	r3,zero,4029740 <ip_reasm_match_frag_with_ire+0x4c>
 402970c:	11003fcc 	andi	r4,r2,255
 4029710:	39ffffcc 	andi	r7,r7,65535
 4029714:	00000206 	br	4029720 <ip_reasm_match_frag_with_ire+0x2c>
 4029718:	18c00017 	ldw	r3,0(r3)
 402971c:	18000826 	beq	r3,zero,4029740 <ip_reasm_match_frag_with_ire+0x4c>
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
 4029720:	18800117 	ldw	r2,4(r3)
 4029724:	28bffc1e 	bne	r5,r2,4029718 <ip_reasm_match_frag_with_ire+0x24>
 4029728:	18800217 	ldw	r2,8(r3)
 402972c:	30bffa1e 	bne	r6,r2,4029718 <ip_reasm_match_frag_with_ire+0x24>
 4029730:	18800383 	ldbu	r2,14(r3)
 4029734:	20bff81e 	bne	r4,r2,4029718 <ip_reasm_match_frag_with_ire+0x24>
 4029738:	1880030b 	ldhu	r2,12(r3)
 402973c:	38bff61e 	bne	r7,r2,4029718 <ip_reasm_match_frag_with_ire+0x24>
         }
      }

   /* no match found */
   return NULL;
}
 4029740:	1805883a 	mov	r2,r3
 4029744:	f800283a 	ret

04029748 <ip_reasm_determine_type_of_frag>:
{
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
 4029748:	2080018b 	ldhu	r2,6(r4)
 402974c:	1006923a 	slli	r3,r2,8
 4029750:	1004d23a 	srli	r2,r2,8
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);

  if (mf == 0)
 4029754:	1908000c 	andi	r4,r3,8192
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);
 4029758:	10c4b03a 	or	r2,r2,r3
 402975c:	1087ffcc 	andi	r2,r2,8191

  if (mf == 0)
 4029760:	2000041e 	bne	r4,zero,4029774 <ip_reasm_determine_type_of_frag+0x2c>
     {
     if (foff == 0) {rc = IP_CP;}
 4029764:	0007883a 	mov	r3,zero
 4029768:	1000071e 	bne	r2,zero,4029788 <ip_reasm_determine_type_of_frag+0x40>
     if (foff == 0) {rc = IP_FF;}
     else {rc = IP_MF;}
     }

  return rc;
}
 402976c:	1805883a 	mov	r2,r3
 4029770:	f800283a 	ret
     if (foff == 0) {rc = IP_CP;}
     else {rc = IP_LF;}
     }
  else
     {
     if (foff == 0) {rc = IP_FF;}
 4029774:	00c00044 	movi	r3,1
 4029778:	103ffc26 	beq	r2,zero,402976c <ip_reasm_determine_type_of_frag+0x24>
 402977c:	00c000c4 	movi	r3,3
     else {rc = IP_MF;}
     }

  return rc;
}
 4029780:	1805883a 	mov	r2,r3
 4029784:	f800283a 	ret
  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);

  if (mf == 0)
     {
     if (foff == 0) {rc = IP_CP;}
 4029788:	00c00144 	movi	r3,5
     if (foff == 0) {rc = IP_FF;}
     else {rc = IP_MF;}
     }

  return rc;
}
 402978c:	1805883a 	mov	r2,r3
 4029790:	f800283a 	ret

04029794 <ip_reasm_check_mem_useage>:
*/

int ip_reasm_check_mem_useage (u_short increment)
{
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 4029794:	d0e85917 	ldw	r3,-24220(gp)
 4029798:	008001b4 	movhi	r2,6
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 402979c:	01410134 	movhi	r5,1028
 40297a0:	294e1504 	addi	r5,r5,14420
*/

int ip_reasm_check_mem_useage (u_short increment)
{
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 40297a4:	10c0102e 	bgeu	r2,r3,40297e8 <ip_reasm_check_mem_useage+0x54>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 40297a8:	28800217 	ldw	r2,8(r5)
 40297ac:	10800044 	addi	r2,r2,1
 40297b0:	28800215 	stw	r2,8(r5)
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 40297b4:	20bfffcc 	andi	r2,r4,65535
 40297b8:	1885883a 	add	r2,r3,r2
 40297bc:	00c001b4 	movhi	r3,6
 40297c0:	0009883a 	mov	r4,zero
 40297c4:	1880062e 	bgeu	r3,r2,40297e0 <ip_reasm_check_mem_useage+0x4c>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
   {
      /* return an error indication */
      ++ire_stats.mem_check_fail;
 40297c8:	00c10134 	movhi	r3,1028
 40297cc:	18ce1504 	addi	r3,r3,14420
 40297d0:	18800317 	ldw	r2,12(r3)
 40297d4:	013ffa84 	movi	r4,-22
 40297d8:	10800044 	addi	r2,r2,1
 40297dc:	18800315 	stw	r2,12(r3)
      return ENP_RESOURCE;
   }

   /* memory limits will not be exceeded with this increment */
   return IPREASM_OK;
}
 40297e0:	2005883a 	mov	r2,r4
 40297e4:	f800283a 	ret
      ++ire_stats.bad_max_mem;
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 40297e8:	18bff21e 	bne	r3,r2,40297b4 <ip_reasm_check_mem_useage+0x20>
 40297ec:	003ff606 	br	40297c8 <ip_reasm_check_mem_useage+0x34>

040297f0 <ip_reasm_incr_mem_useage>:
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 40297f0:	d0a85917 	ldw	r2,-24220(gp)
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
      return ENP_RESOURCE;
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
 40297f4:	213fffcc 	andi	r4,r4,65535
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 40297f8:	014001b4 	movhi	r5,6
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 40297fc:	01c10134 	movhi	r7,1028
 4029800:	39ce1504 	addi	r7,r7,14420
 4029804:	01bffa84 	movi	r6,-22
      return ENP_RESOURCE;
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
 4029808:	1107883a 	add	r3,r2,r4
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 402980c:	28800836 	bltu	r5,r2,4029830 <ip_reasm_incr_mem_useage+0x40>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
 4029810:	01010134 	movhi	r4,1028
 4029814:	210e1504 	addi	r4,r4,14420
 4029818:	01bffa84 	movi	r6,-22
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
      return ENP_RESOURCE;
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
 402981c:	28c00836 	bltu	r5,r3,4029840 <ip_reasm_incr_mem_useage+0x50>
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
      return ENP_RESOURCE;
   }

   ipr_curr_mem += increment;
 4029820:	d0e85915 	stw	r3,-24220(gp)
 4029824:	000d883a 	mov	r6,zero

   /* successfully incremented memory useage counter */
   return IPREASM_OK;
}
 4029828:	3005883a 	mov	r2,r6
 402982c:	f800283a 	ret
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 4029830:	38800217 	ldw	r2,8(r7)
 4029834:	10800044 	addi	r2,r2,1
 4029838:	38800215 	stw	r2,8(r7)
 402983c:	003ffa06 	br	4029828 <ip_reasm_incr_mem_useage+0x38>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
 4029840:	20800417 	ldw	r2,16(r4)
 4029844:	10800044 	addi	r2,r2,1
 4029848:	20800415 	stw	r2,16(r4)
 402984c:	003ff606 	br	4029828 <ip_reasm_incr_mem_useage+0x38>

04029850 <ip_reasm_decr_mem_useage>:
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 4029850:	d0e85917 	ldw	r3,-24220(gp)
 4029854:	008001b4 	movhi	r2,6
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 4029858:	01810134 	movhi	r6,1028
 402985c:	318e1504 	addi	r6,r6,14420
 4029860:	017ffa84 	movi	r5,-22
      return ENP_RESOURCE;
   }
   if (ipr_curr_mem < decrement)
 4029864:	213fffcc 	andi	r4,r4,65535
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 4029868:	10c00936 	bltu	r2,r3,4029890 <ip_reasm_decr_mem_useage+0x40>
   if (ipr_curr_mem < decrement)
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
 402986c:	01810134 	movhi	r6,1028
 4029870:	318e1504 	addi	r6,r6,14420
      return ENP_RESOURCE;
   }

   ipr_curr_mem -= decrement;
 4029874:	1905c83a 	sub	r2,r3,r4
   if (ipr_curr_mem < decrement)
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
 4029878:	017ffa84 	movi	r5,-22
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
      return ENP_RESOURCE;
   }
   if (ipr_curr_mem < decrement)
 402987c:	19000836 	bltu	r3,r4,40298a0 <ip_reasm_decr_mem_useage+0x50>
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
      return ENP_RESOURCE;
   }

   ipr_curr_mem -= decrement;
 4029880:	d0a85915 	stw	r2,-24220(gp)
 4029884:	000b883a 	mov	r5,zero

   /* successfully decremented memory useage counter */
   return IPREASM_OK;
}
 4029888:	2805883a 	mov	r2,r5
 402988c:	f800283a 	ret
{
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 4029890:	30800217 	ldw	r2,8(r6)
 4029894:	10800044 	addi	r2,r2,1
 4029898:	30800215 	stw	r2,8(r6)
 402989c:	003ffa06 	br	4029888 <ip_reasm_decr_mem_useage+0x38>
   if (ipr_curr_mem < decrement)
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
 40298a0:	30800517 	ldw	r2,20(r6)
 40298a4:	10800044 	addi	r2,r2,1
 40298a8:	30800515 	stw	r2,20(r6)
 40298ac:	003ff606 	br	4029888 <ip_reasm_decr_mem_useage+0x38>

040298b0 <ip_reasm_find_ire>:
u_char ip_reasm_find_ire (IREP irep)
{
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 40298b0:	d0a85a17 	ldw	r2,-24216(gp)
 40298b4:	10000326 	beq	r2,zero,40298c4 <ip_reasm_find_ire+0x14>
      {
      if (tmpp == irep) 
 40298b8:	20800426 	beq	r4,r2,40298cc <ip_reasm_find_ire+0x1c>
u_char ip_reasm_find_ire (IREP irep)
{
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 40298bc:	10800017 	ldw	r2,0(r2)
 40298c0:	103ffd1e 	bne	r2,zero,40298b8 <ip_reasm_find_ire+0x8>
 40298c4:	0005883a 	mov	r2,zero
         return IPREASM_TRUE;
         }
      }

   return IPREASM_FALSE;
}
 40298c8:	f800283a 	ret
u_char ip_reasm_find_ire (IREP irep)
{
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 40298cc:	00800044 	movi	r2,1
 40298d0:	f800283a 	ret

040298d4 <ip_reasm_mark_compact_rfq>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in 
the master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_mark_compact_rfq (IREP irep)
{
 40298d4:	defffe04 	addi	sp,sp,-8
 40298d8:	dc000015 	stw	r16,0(sp)
 40298dc:	dfc00115 	stw	ra,4(sp)
 40298e0:	2021883a 	mov	r16,r4
   RFQP rfqp;
   u_short i;
   u_char empty_slot_discovered = IPREASM_FALSE;
   u_char compact = IPREASM_TRUE;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 40298e4:	40298b00 	call	40298b0 <ip_reasm_find_ire>
 40298e8:	10c03fcc 	andi	r3,r2,255
 40298ec:	00800044 	movi	r2,1
 40298f0:	1880311e 	bne	r3,r2,40299b8 <ip_reasm_mark_compact_rfq+0xe4>
   {
      ++ire_stats.bad_irep;
      return ENP_PARAM;
   }

   rfqp = &(irep->rfq);
 40298f4:	81800604 	addi	r6,r16,24

   while (rfqp)
 40298f8:	30002626 	beq	r6,zero,4029994 <ip_reasm_mark_compact_rfq+0xc0>
      {
      irep->flags |= IPR_RFQ_COMPACT;
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
 40298fc:	1811883a 	mov	r8,r3
 4029900:	000f883a 	mov	r7,zero
 4029904:	300b883a 	mov	r5,r6
 4029908:	0009883a 	mov	r4,zero
 402990c:	00000606 	br	4029928 <ip_reasm_mark_compact_rfq+0x54>
            {            
            empty_slot_discovered = IPREASM_TRUE;
            }
         else
            {
            if (empty_slot_discovered) 
 4029910:	10001c26 	beq	r2,zero,4029984 <ip_reasm_mark_compact_rfq+0xb0>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029914:	21000044 	addi	r4,r4,1
 4029918:	20ffffcc 	andi	r3,r4,65535
 402991c:	00800404 	movi	r2,16
 4029920:	29400104 	addi	r5,r5,4
 4029924:	18800a26 	beq	r3,r2,4029950 <ip_reasm_mark_compact_rfq+0x7c>
         {
         if (rfqp->bufp [i] == 0)
 4029928:	28c00117 	ldw	r3,4(r5)
            {            
            empty_slot_discovered = IPREASM_TRUE;
            }
         else
            {
            if (empty_slot_discovered) 
 402992c:	38803fcc 	andi	r2,r7,255
 4029930:	1005003a 	cmpeq	r2,r2,zero

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
         {
         if (rfqp->bufp [i] == 0)
 4029934:	183ff61e 	bne	r3,zero,4029910 <ip_reasm_mark_compact_rfq+0x3c>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029938:	21000044 	addi	r4,r4,1
 402993c:	20ffffcc 	andi	r3,r4,65535
 4029940:	00800404 	movi	r2,16
         {
         if (rfqp->bufp [i] == 0)
 4029944:	01c00044 	movi	r7,1

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029948:	29400104 	addi	r5,r5,4
 402994c:	18bff61e 	bne	r3,r2,4029928 <ip_reasm_mark_compact_rfq+0x54>
               compact = IPREASM_FALSE;
               break;
               }
            }
          }
       rfqp = rfqp->next;
 4029950:	31800017 	ldw	r6,0(r6)
      return ENP_PARAM;
   }

   rfqp = &(irep->rfq);

   while (rfqp)
 4029954:	303feb1e 	bne	r6,zero,4029904 <ip_reasm_mark_compact_rfq+0x30>
            }
          }
       rfqp = rfqp->next;
      }

   if (compact) 
 4029958:	40803fcc 	andi	r2,r8,255
 402995c:	10000d1e 	bne	r2,zero,4029994 <ip_reasm_mark_compact_rfq+0xc0>
      {
      irep->flags |= IPR_RFQ_COMPACT;
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
 4029960:	80802103 	ldbu	r2,132(r16)
 4029964:	0009883a 	mov	r4,zero
 4029968:	10803f8c 	andi	r2,r2,254
 402996c:	80802105 	stb	r2,132(r16)
      }

   return IPREASM_OK;
}
 4029970:	2005883a 	mov	r2,r4
 4029974:	dfc00117 	ldw	ra,4(sp)
 4029978:	dc000017 	ldw	r16,0(sp)
 402997c:	dec00204 	addi	sp,sp,8
 4029980:	f800283a 	ret
               compact = IPREASM_FALSE;
               break;
               }
            }
          }
       rfqp = rfqp->next;
 4029984:	31800017 	ldw	r6,0(r6)
            {            
            empty_slot_discovered = IPREASM_TRUE;
            }
         else
            {
            if (empty_slot_discovered) 
 4029988:	0011883a 	mov	r8,zero
      return ENP_PARAM;
   }

   rfqp = &(irep->rfq);

   while (rfqp)
 402998c:	303fdd1e 	bne	r6,zero,4029904 <ip_reasm_mark_compact_rfq+0x30>
 4029990:	003ff106 	br	4029958 <ip_reasm_mark_compact_rfq+0x84>
       rfqp = rfqp->next;
      }

   if (compact) 
      {
      irep->flags |= IPR_RFQ_COMPACT;
 4029994:	80802103 	ldbu	r2,132(r16)
 4029998:	0009883a 	mov	r4,zero
 402999c:	10800054 	ori	r2,r2,1
 40299a0:	80802105 	stb	r2,132(r16)
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
      }

   return IPREASM_OK;
}
 40299a4:	2005883a 	mov	r2,r4
 40299a8:	dfc00117 	ldw	ra,4(sp)
 40299ac:	dc000017 	ldw	r16,0(sp)
 40299b0:	dec00204 	addi	sp,sp,8
 40299b4:	f800283a 	ret
   u_char empty_slot_discovered = IPREASM_FALSE;
   u_char compact = IPREASM_TRUE;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
   {
      ++ire_stats.bad_irep;
 40299b8:	00c10134 	movhi	r3,1028
 40299bc:	18ce1504 	addi	r3,r3,14420
 40299c0:	18800017 	ldw	r2,0(r3)
 40299c4:	013ffd84 	movi	r4,-10
 40299c8:	10800044 	addi	r2,r2,1
 40299cc:	18800015 	stw	r2,0(r3)
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
      }

   return IPREASM_OK;
}
 40299d0:	2005883a 	mov	r2,r4
 40299d4:	dfc00117 	ldw	ra,4(sp)
 40299d8:	dc000017 	ldw	r16,0(sp)
 40299dc:	dec00204 	addi	sp,sp,8
 40299e0:	f800283a 	ret

040299e4 <ip_reasm_send_icmp_timex>:

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
 40299e4:	20801f17 	ldw	r2,124(r4)
OUTPUT: This function always returns IPREASM_OK.
*/

#ifdef FULL_ICMP
u_long ip_reasm_send_icmp_timex (IREP irep)
{
 40299e8:	deffff04 	addi	sp,sp,-4
 40299ec:	dfc00015 	stw	ra,0(sp)
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
      {
      pip = (struct ip *) irep->l3_hdr;
      icmp_timex (pip, TIMEX_REASSY_FAILED);
 40299f0:	01400044 	movi	r5,1

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
 40299f4:	10000226 	beq	r2,zero,4029a00 <ip_reasm_send_icmp_timex+0x1c>
      {
      pip = (struct ip *) irep->l3_hdr;
      icmp_timex (pip, TIMEX_REASSY_FAILED);
 40299f8:	21002017 	ldw	r4,128(r4)
 40299fc:	402faac0 	call	402faac <icmp_timex>
      }

   return IPREASM_OK;
}
 4029a00:	0005883a 	mov	r2,zero
 4029a04:	dfc00017 	ldw	ra,0(sp)
 4029a08:	dec00104 	addi	sp,sp,4
 4029a0c:	f800283a 	ret

04029a10 <ipr_stats>:

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
 4029a10:	defff104 	addi	sp,sp,-60
   unsigned long ticks_elapsed = cticks;
 4029a14:	00810134 	movhi	r2,1028
 4029a18:	10a93304 	addi	r2,r2,-23348

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
 4029a1c:	dc000a15 	stw	r16,40(sp)
   u_short count = 0;
   RFQP rfqp;
   u_short frag_count = 0;
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
 4029a20:	014100f4 	movhi	r5,1027
 4029a24:	29563d04 	addi	r5,r5,22772
OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
   unsigned long ticks_elapsed = cticks;
 4029a28:	14000017 	ldw	r16,0(r2)

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
 4029a2c:	dfc00e15 	stw	ra,56(sp)
 4029a30:	dcc00d15 	stw	r19,52(sp)
 4029a34:	dc400b15 	stw	r17,44(sp)
 4029a38:	2027883a 	mov	r19,r4
 4029a3c:	dc800c15 	stw	r18,48(sp)
   u_short count = 0;
   RFQP rfqp;
   u_short frag_count = 0;
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
 4029a40:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
 4029a44:	d1a85917 	ldw	r6,-24220(gp)
 4029a48:	00c01904 	movi	r3,100
 4029a4c:	800f883a 	mov	r7,r16
 4029a50:	9809883a 	mov	r4,r19
 4029a54:	80e1203a 	divu	r16,r16,r3
 4029a58:	014100f4 	movhi	r5,1027
 4029a5c:	29564404 	addi	r5,r5,22800
 4029a60:	00802204 	movi	r2,136
 4029a64:	d8c00215 	stw	r3,8(sp)
 4029a68:	dc000015 	stw	r16,0(sp)
 4029a6c:	d8800115 	stw	r2,4(sp)
 4029a70:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
 4029a74:	00c10134 	movhi	r3,1028
 4029a78:	18ce1504 	addi	r3,r3,14420
 4029a7c:	19800117 	ldw	r6,4(r3)
 4029a80:	19c00017 	ldw	r7,0(r3)
 4029a84:	18800217 	ldw	r2,8(r3)
 4029a88:	1a000317 	ldw	r8,12(r3)
 4029a8c:	1a400417 	ldw	r9,16(r3)
 4029a90:	1a800517 	ldw	r10,20(r3)
 4029a94:	014100f4 	movhi	r5,1027
 4029a98:	29565404 	addi	r5,r5,22864
 4029a9c:	9809883a 	mov	r4,r19
 4029aa0:	da000115 	stw	r8,4(sp)
 4029aa4:	da400215 	stw	r9,8(sp)
 4029aa8:	da800315 	stw	r10,12(sp)
 4029aac:	d8800015 	stw	r2,0(sp)
 4029ab0:	4019c700 	call	4019c70 <ns_printf>
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
 4029ab4:	d1a85a17 	ldw	r6,-24216(gp)
 4029ab8:	9809883a 	mov	r4,r19
 4029abc:	014100f4 	movhi	r5,1027
 4029ac0:	29566904 	addi	r5,r5,22948
 4029ac4:	4019c700 	call	4019c70 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029ac8:	d4685a17 	ldw	r17,-24216(gp)
 4029acc:	88005526 	beq	r17,zero,4029c24 <ipr_stats+0x214>
 4029ad0:	0025883a 	mov	r18,zero
 4029ad4:	0021883a 	mov	r16,zero
      {
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
 4029ad8:	89800604 	addi	r6,r17,24
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      ++count;
 4029adc:	94800044 	addi	r18,r18,1
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
 4029ae0:	30001026 	beq	r6,zero,4029b24 <ipr_stats+0x114>
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
 4029ae4:	300b883a 	mov	r5,r6
 4029ae8:	0009883a 	mov	r4,zero
 4029aec:	00000606 	br	4029b08 <ipr_stats+0xf8>
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
            {
            if (rfqp->bufp [i] != 0)
               {
               ++frag_count;            
 4029af0:	84000044 	addi	r16,r16,1
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029af4:	21000044 	addi	r4,r4,1
 4029af8:	20ffffcc 	andi	r3,r4,65535
 4029afc:	00800404 	movi	r2,16
 4029b00:	29400104 	addi	r5,r5,4
 4029b04:	18800526 	beq	r3,r2,4029b1c <ipr_stats+0x10c>
            {
            if (rfqp->bufp [i] != 0)
 4029b08:	28800117 	ldw	r2,4(r5)
 4029b0c:	103ff81e 	bne	r2,zero,4029af0 <ipr_stats+0xe0>
               {
               ++frag_count;            
               }
            else
               {
               if (tmpp->flags & IPR_RFQ_COMPACT)
 4029b10:	88802103 	ldbu	r2,132(r17)
 4029b14:	1080004c 	andi	r2,r2,1
 4029b18:	103ff626 	beq	r2,zero,4029af4 <ipr_stats+0xe4>
                  {
                  break;
                  }
               }
            }
         rfqp = rfqp->next;
 4029b1c:	31800017 	ldw	r6,0(r6)
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
 4029b20:	303ff01e 	bne	r6,zero,4029ae4 <ipr_stats+0xd4>
                  }
               }
            }
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
 4029b24:	88800117 	ldw	r2,4(r17)
 4029b28:	88c00217 	ldw	r3,8(r17)
 4029b2c:	8940030b 	ldhu	r5,12(r17)
 4029b30:	100ed23a 	srli	r7,r2,8
 4029b34:	113fc00c 	andi	r4,r2,65280
 4029b38:	1810d23a 	srli	r8,r3,8
 4029b3c:	19bfc00c 	andi	r6,r3,65280
 4029b40:	1012963a 	slli	r9,r2,24
 4029b44:	1814963a 	slli	r10,r3,24
 4029b48:	2008923a 	slli	r4,r4,8
 4029b4c:	300c923a 	slli	r6,r6,8
 4029b50:	1004d63a 	srli	r2,r2,24
 4029b54:	1806d63a 	srli	r3,r3,24
 4029b58:	39ffc00c 	andi	r7,r7,65280
 4029b5c:	423fc00c 	andi	r8,r8,65280
 4029b60:	2248b03a 	or	r4,r4,r9
 4029b64:	328cb03a 	or	r6,r6,r10
 4029b68:	11c4b03a 	or	r2,r2,r7
 4029b6c:	1a06b03a 	or	r3,r3,r8
 4029b70:	1104b03a 	or	r2,r2,r4
 4029b74:	1986b03a 	or	r3,r3,r6
 4029b78:	2808923a 	slli	r4,r5,8
 4029b7c:	d8800015 	stw	r2,0(sp)
 4029b80:	d8c00115 	stw	r3,4(sp)
 4029b84:	280ad23a 	srli	r5,r5,8
 4029b88:	88800383 	ldbu	r2,14(r17)
 4029b8c:	213fc00c 	andi	r4,r4,65280
 4029b90:	290ab03a 	or	r5,r5,r4
 4029b94:	d9400315 	stw	r5,12(sp)
 4029b98:	d8800215 	stw	r2,8(sp)
 4029b9c:	8880040b 	ldhu	r2,16(r17)
 4029ba0:	880d883a 	mov	r6,r17
 4029ba4:	9809883a 	mov	r4,r19
 4029ba8:	d8800415 	stw	r2,16(sp)
 4029bac:	88c0048b 	ldhu	r3,18(r17)
 4029bb0:	014100f4 	movhi	r5,1027
 4029bb4:	29566f04 	addi	r5,r5,22972
 4029bb8:	81ffffcc 	andi	r7,r16,65535
 4029bbc:	d8c00515 	stw	r3,20(sp)
 4029bc0:	88800517 	ldw	r2,20(r17)
 4029bc4:	d8800615 	stw	r2,24(sp)
 4029bc8:	88c01f17 	ldw	r3,124(r17)
 4029bcc:	d8c00715 	stw	r3,28(sp)
 4029bd0:	8a002017 	ldw	r8,128(r17)
 4029bd4:	da000815 	stw	r8,32(sp)
 4029bd8:	88802103 	ldbu	r2,132(r17)
 4029bdc:	1080004c 	andi	r2,r2,1
 4029be0:	d8800915 	stw	r2,36(sp)
 4029be4:	4019c700 	call	4019c70 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029be8:	8c400017 	ldw	r17,0(r17)
 4029bec:	883fba1e 	bne	r17,zero,4029ad8 <ipr_stats+0xc8>
 4029bf0:	91bfffcc 	andi	r6,r18,65535
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
 4029bf4:	9809883a 	mov	r4,r19
 4029bf8:	014100f4 	movhi	r5,1027
 4029bfc:	29568a04 	addi	r5,r5,23080
 4029c00:	4019c700 	call	4019c70 <ns_printf>

   return IPREASM_OK;
}
 4029c04:	0005883a 	mov	r2,zero
 4029c08:	dfc00e17 	ldw	ra,56(sp)
 4029c0c:	dcc00d17 	ldw	r19,52(sp)
 4029c10:	dc800c17 	ldw	r18,48(sp)
 4029c14:	dc400b17 	ldw	r17,44(sp)
 4029c18:	dc000a17 	ldw	r16,40(sp)
 4029c1c:	dec00f04 	addi	sp,sp,60
 4029c20:	f800283a 	ret
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029c24:	000d883a 	mov	r6,zero
 4029c28:	003ff206 	br	4029bf4 <ipr_stats+0x1e4>

04029c2c <ip_reasm_compute_overlap>:
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
 4029c2c:	defff404 	addi	sp,sp,-48
 4029c30:	dd800815 	stw	r22,32(sp)
 4029c34:	202d883a 	mov	r22,r4
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 4029c38:	2809883a 	mov	r4,r5
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
 4029c3c:	df000a15 	stw	fp,40(sp)
 4029c40:	dc000215 	stw	r16,8(sp)
 4029c44:	dfc00b15 	stw	ra,44(sp)
 4029c48:	ddc00915 	stw	r23,36(sp)
 4029c4c:	dd400715 	stw	r21,28(sp)
 4029c50:	dd000615 	stw	r20,24(sp)
 4029c54:	dcc00515 	stw	r19,20(sp)
 4029c58:	dc800415 	stw	r18,16(sp)
 4029c5c:	dc400315 	stw	r17,12(sp)
 4029c60:	d9400015 	stw	r5,0(sp)
 4029c64:	3039883a 	mov	fp,r6
 4029c68:	d9c00115 	stw	r7,4(sp)
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 4029c6c:	40298b00 	call	40298b0 <ip_reasm_find_ire>
 4029c70:	10803fcc 	andi	r2,r2,255
 4029c74:	04000044 	movi	r16,1
 4029c78:	14001826 	beq	r2,r16,4029cdc <ip_reasm_compute_overlap+0xb0>
      {
      ++ire_stats.bad_irep;
 4029c7c:	00c10134 	movhi	r3,1028
 4029c80:	18ce1504 	addi	r3,r3,14420
 4029c84:	18800017 	ldw	r2,0(r3)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 4029c88:	01000084 	movi	r4,2
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
      {
      ++ire_stats.bad_irep;
 4029c8c:	1405883a 	add	r2,r2,r16
 4029c90:	18800015 	stw	r2,0(r3)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 4029c94:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free (p);
 4029c98:	b009883a 	mov	r4,r22
 4029c9c:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 4029ca0:	01000084 	movi	r4,2
 4029ca4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4029ca8:	8005883a 	mov	r2,r16
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */

   return IPREASM_ACCEPT_FRAG;
}
 4029cac:	dfc00b17 	ldw	ra,44(sp)
 4029cb0:	df000a17 	ldw	fp,40(sp)
 4029cb4:	ddc00917 	ldw	r23,36(sp)
 4029cb8:	dd800817 	ldw	r22,32(sp)
 4029cbc:	dd400717 	ldw	r21,28(sp)
 4029cc0:	dd000617 	ldw	r20,24(sp)
 4029cc4:	dcc00517 	ldw	r19,20(sp)
 4029cc8:	dc800417 	ldw	r18,16(sp)
 4029ccc:	dc400317 	ldw	r17,12(sp)
 4029cd0:	dc000217 	ldw	r16,8(sp)
 4029cd4:	dec00c04 	addi	sp,sp,48
 4029cd8:	f800283a 	ret
      pk_free (p);
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
 4029cdc:	b1000317 	ldw	r4,12(r22)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
   p->nb_plen -= iphlen;
 4029ce0:	b1800417 	ldw	r6,16(r22)

   *frag_offsetp = jrstart;
 4029ce4:	da000c17 	ldw	r8,48(sp)
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 4029ce8:	2080018b 	ldhu	r2,6(r4)
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
 4029cec:	20c00003 	ldbu	r3,0(r4)
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
 4029cf0:	21c0008b 	ldhu	r7,2(r4)
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 4029cf4:	100a923a 	slli	r5,r2,8
 4029cf8:	1004d23a 	srli	r2,r2,8
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
 4029cfc:	18c003cc 	andi	r3,r3,15
 4029d00:	18c7883a 	add	r3,r3,r3
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 4029d04:	1144b03a 	or	r2,r2,r5
 4029d08:	1087ffcc 	andi	r2,r2,8191
 4029d0c:	100a90fa 	slli	r5,r2,3
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
 4029d10:	18c7883a 	add	r3,r3,r3
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
 4029d14:	18803fcc 	andi	r2,r3,255
   p->nb_plen -= iphlen;

   *frag_offsetp = jrstart;
 4029d18:	4140000d 	sth	r5,0(r8)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
   p->nb_plen -= iphlen;
 4029d1c:	308dc83a 	sub	r6,r6,r2
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
 4029d20:	2089883a 	add	r4,r4,r2
   p->nb_plen -= iphlen;

   *frag_offsetp = jrstart;
   *indexp = INVALID_FRAG_INDEX;
 4029d24:	00800404 	movi	r2,16
 4029d28:	e080000d 	sth	r2,0(fp)
   *last_rfqpp = 0;
 4029d2c:	d8800117 	ldw	r2,4(sp)
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);
 4029d30:	da000017 	ldw	r8,0(sp)
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
 4029d34:	b1000315 	stw	r4,12(r22)
   p->nb_plen -= iphlen;

   *frag_offsetp = jrstart;
   *indexp = INVALID_FRAG_INDEX;
   *last_rfqpp = 0;
 4029d38:	10000015 	stw	zero,0(r2)
   *hole_createdp = IPREASM_FALSE;
 4029d3c:	d8800d17 	ldw	r2,52(sp)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
   p->nb_plen -= iphlen;
 4029d40:	b1800415 	stw	r6,16(r22)
   *frag_offsetp = jrstart;
   *indexp = INVALID_FRAG_INDEX;
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);
 4029d44:	45c00604 	addi	r23,r8,24
   p->nb_plen -= iphlen;

   *frag_offsetp = jrstart;
   *indexp = INVALID_FRAG_INDEX;
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;
 4029d48:	10000005 	stb	zero,0(r2)
      return IPREASM_DROP_FRAG_BAD_PARAM;
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 4029d4c:	2829883a 	mov	r20,r5
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);

   while (rfqp)
 4029d50:	b8003e26 	beq	r23,zero,4029e4c <ip_reasm_compute_overlap+0x220>
      }

   jrip = ip_head(p);
   iphlen = ip_hlen (jrip);
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
 4029d54:	38bfffcc 	andi	r2,r7,65535
 4029d58:	1008923a 	slli	r4,r2,8
 4029d5c:	1004d23a 	srli	r2,r2,8
 4029d60:	18c03fcc 	andi	r3,r3,255
 4029d64:	1104b03a 	or	r2,r2,r4
 4029d68:	10c5c83a 	sub	r2,r2,r3
 4029d6c:	2885883a 	add	r2,r5,r2
 4029d70:	157fffc4 	addi	r21,r2,-1
 4029d74:	b825883a 	mov	r18,r23
 4029d78:	b827883a 	mov	r19,r23
 4029d7c:	0023883a 	mov	r17,zero
 4029d80:	00001606 	br	4029ddc <ip_reasm_compute_overlap+0x1b0>
            currstart = rfqp->frag_offset[i];
            currend = currstart + currpkt->nb_plen - 1;

            if (currstart < jrstart)
               {
               if (currend < jrend) /* cases A1 and A2 */
 4029d84:	28ffffcc 	andi	r3,r5,65535
 4029d88:	a8bfffcc 	andi	r2,r21,65535
 4029d8c:	1880372e 	bgeu	r3,r2,4029e6c <ip_reasm_compute_overlap+0x240>
                  {
                  if (currend < jrstart) /* A1 */
 4029d90:	19800d36 	bltu	r3,r6,4029dc8 <ip_reasm_compute_overlap+0x19c>
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
 4029d94:	2d05c83a 	sub	r2,r5,r20
                  p->nb_prot += drop_len;
                  p->nb_plen -= drop_len;
 4029d98:	b1400417 	ldw	r5,16(r22)
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
 4029d9c:	10800044 	addi	r2,r2,1
                  p->nb_prot += drop_len;
 4029da0:	b0c00317 	ldw	r3,12(r22)
 4029da4:	11bfffcc 	andi	r6,r2,65535
                  p->nb_plen -= drop_len;
 4029da8:	298bc83a 	sub	r5,r5,r6
                  jrstart += drop_len;
 4029dac:	1505883a 	add	r2,r2,r20
                  jrend = jrstart + p->nb_plen - 1;
 4029db0:	1149883a 	add	r4,r2,r5
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
                  p->nb_prot += drop_len;
 4029db4:	1987883a 	add	r3,r3,r6
                  p->nb_plen -= drop_len;
                  jrstart += drop_len;
                  jrend = jrstart + p->nb_plen - 1;
 4029db8:	257fffc4 	addi	r21,r4,-1
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
                  p->nb_prot += drop_len;
                  p->nb_plen -= drop_len;
                  jrstart += drop_len;
 4029dbc:	1029883a 	mov	r20,r2
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
                  p->nb_prot += drop_len;
 4029dc0:	b0c00315 	stw	r3,12(r22)
                  p->nb_plen -= drop_len;
 4029dc4:	b1400415 	stw	r5,16(r22)
               *indexp = i;
               *last_rfqpp = rfqp;               
               }
            if (irep->flags & IPR_RFQ_COMPACT)
               {
               break;
 4029dc8:	8c400044 	addi	r17,r17,1

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029dcc:	00800404 	movi	r2,16
               *indexp = i;
               *last_rfqpp = rfqp;               
               }
            if (irep->flags & IPR_RFQ_COMPACT)
               {
               break;
 4029dd0:	94800104 	addi	r18,r18,4
 4029dd4:	9cc00084 	addi	r19,r19,2

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029dd8:	88801726 	beq	r17,r2,4029e38 <ip_reasm_compute_overlap+0x20c>
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
 4029ddc:	94000117 	ldw	r16,4(r18)
 4029de0:	80002a26 	beq	r16,zero,4029e8c <ip_reasm_compute_overlap+0x260>
            {
            currstart = rfqp->frag_offset[i];
 4029de4:	98c0110b 	ldhu	r3,68(r19)
            currend = currstart + currpkt->nb_plen - 1;
 4029de8:	80800417 	ldw	r2,16(r16)

            if (currstart < jrstart)
 4029dec:	a1bfffcc 	andi	r6,r20,65535
 4029df0:	1809883a 	mov	r4,r3
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
            {
            currstart = rfqp->frag_offset[i];
            currend = currstart + currpkt->nb_plen - 1;
 4029df4:	10c5883a 	add	r2,r2,r3
 4029df8:	117fffc4 	addi	r5,r2,-1

            if (currstart < jrstart)
 4029dfc:	19bfe136 	bltu	r3,r6,4029d84 <ip_reasm_compute_overlap+0x158>
                  pk_free (p);
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
                  return IPREASM_DROP_FRAG_DUPLICATE;
                  }
               }
            else if (currstart > jrstart)
 4029e00:	30c0162e 	bgeu	r6,r3,4029e5c <ip_reasm_compute_overlap+0x230>
               {
               if (currend > jrend) /* cases B1 and B2 */
 4029e04:	28ffffcc 	andi	r3,r5,65535
 4029e08:	a8bfffcc 	andi	r2,r21,65535
 4029e0c:	10c0272e 	bgeu	r2,r3,4029eac <ip_reasm_compute_overlap+0x280>
                  {
                  if (currstart > jrend) /* B1 */
 4029e10:	113fed36 	bltu	r2,r4,4029dc8 <ip_reasm_compute_overlap+0x19c>
               else if (currend == jrend) /* F1 */
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
 4029e14:	2187c83a 	sub	r3,r4,r6
                  jrend = jrstart + p->nb_plen - 1;
 4029e18:	1d05883a 	add	r2,r3,r20
 4029e1c:	157fffc4 	addi	r21,r2,-1
               *indexp = i;
               *last_rfqpp = rfqp;               
               }
            if (irep->flags & IPR_RFQ_COMPACT)
               {
               break;
 4029e20:	8c400044 	addi	r17,r17,1

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029e24:	00800404 	movi	r2,16
               else if (currend == jrend) /* F1 */
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
 4029e28:	b0c00415 	stw	r3,16(r22)
               *indexp = i;
               *last_rfqpp = rfqp;               
               }
            if (irep->flags & IPR_RFQ_COMPACT)
               {
               break;
 4029e2c:	94800104 	addi	r18,r18,4
 4029e30:	9cc00084 	addi	r19,r19,2

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029e34:	88bfe91e 	bne	r17,r2,4029ddc <ip_reasm_compute_overlap+0x1b0>
               }
            }
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
 4029e38:	e0c0000b 	ldhu	r3,0(fp)
 4029e3c:	00800404 	movi	r2,16
 4029e40:	18803426 	beq	r3,r2,4029f14 <ip_reasm_compute_overlap+0x2e8>
         {
         *last_rfqpp = rfqp;
         }
      rfqp = rfqp->next;
 4029e44:	bdc00017 	ldw	r23,0(r23)
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);

   while (rfqp)
 4029e48:	b83fca1e 	bne	r23,zero,4029d74 <ip_reasm_compute_overlap+0x148>
      } /* end while (rfqp) */

   /* if no empty slots were found, (*last_rfqpp) will contain a pointer 
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */
 4029e4c:	d8c00c17 	ldw	r3,48(sp)
 4029e50:	00800084 	movi	r2,2
 4029e54:	1d00000d 	sth	r20,0(r3)
 4029e58:	003f9406 	br	4029cac <ip_reasm_compute_overlap+0x80>
                  }
               }
            else
               {
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
 4029e5c:	28ffffcc 	andi	r3,r5,65535
 4029e60:	a8bfffcc 	andi	r2,r21,65535
 4029e64:	18800126 	beq	r3,r2,4029e6c <ip_reasm_compute_overlap+0x240>
                  LOCK_NET_RESOURCE (FREEQ_RESID);
                  pk_free (p);
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
                  return IPREASM_DROP_FRAG_DUPLICATE;
                  }
               else if (currend > jrend) /* case D1 */
 4029e68:	10ffca2e 	bgeu	r2,r3,4029d94 <ip_reasm_compute_overlap+0x168>
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
                  {
                  /* the current fragment is identical to the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 4029e6c:	01000084 	movi	r4,2
 4029e70:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
                  pk_free (p);
 4029e74:	b009883a 	mov	r4,r22
 4029e78:	401bf0c0 	call	401bf0c <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 4029e7c:	01000084 	movi	r4,2
 4029e80:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 4029e84:	0005883a 	mov	r2,zero
 4029e88:	003f8806 	br	4029cac <ip_reasm_compute_overlap+0x80>
                  }
               }
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
 4029e8c:	e0c0000b 	ldhu	r3,0(fp)
 4029e90:	00800404 	movi	r2,16
 4029e94:	18801b26 	beq	r3,r2,4029f04 <ip_reasm_compute_overlap+0x2d8>
               {
               *indexp = i;
               *last_rfqpp = rfqp;               
               }
            if (irep->flags & IPR_RFQ_COMPACT)
 4029e98:	d8c00017 	ldw	r3,0(sp)
 4029e9c:	18802103 	ldbu	r2,132(r3)
 4029ea0:	1080004c 	andi	r2,r2,1
 4029ea4:	103fc826 	beq	r2,zero,4029dc8 <ip_reasm_compute_overlap+0x19c>
 4029ea8:	003fe306 	br	4029e38 <ip_reasm_compute_overlap+0x20c>
                     p->nb_plen = currstart - jrstart;
                     /* start offset remains unchanged, but jrend must be updated */
                     jrend = jrstart + p->nb_plen - 1;
                     }
                  }
               else if (currend == jrend) /* F1 */
 4029eac:	18bfd926 	beq	r3,r2,4029e14 <ip_reasm_compute_overlap+0x1e8>
                  {
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
 4029eb0:	8100020b 	ldhu	r4,8(r16)
 4029eb4:	40298500 	call	4029850 <ip_reasm_decr_mem_useage>
                  irep->rcvd -= currpkt->nb_plen;
 4029eb8:	da000017 	ldw	r8,0(sp)
 4029ebc:	80800417 	ldw	r2,16(r16)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 4029ec0:	01000084 	movi	r4,2
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
                  irep->rcvd -= currpkt->nb_plen;
 4029ec4:	40c0048b 	ldhu	r3,18(r8)
 4029ec8:	1887c83a 	sub	r3,r3,r2
 4029ecc:	40c0048d 	sth	r3,18(r8)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 4029ed0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
                  pk_free (currpkt);
 4029ed4:	8009883a 	mov	r4,r16
 4029ed8:	401bf0c0 	call	401bf0c <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 4029edc:	01000084 	movi	r4,2
 4029ee0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
 4029ee4:	e0c0000b 	ldhu	r3,0(fp)
 4029ee8:	00800404 	movi	r2,16
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
                  irep->rcvd -= currpkt->nb_plen;
                  LOCK_NET_RESOURCE (FREEQ_RESID);
                  pk_free (currpkt);
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
                  rfqp->bufp[i] = 0; /* mark slot as unused */
 4029eec:	90000115 	stw	zero,4(r18)
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
 4029ef0:	18800b26 	beq	r3,r2,4029f20 <ip_reasm_compute_overlap+0x2f4>
                     {
                     *indexp = i;
                     *last_rfqpp = rfqp;
                     }
                  /* we've just created a hole; the array may no longer be "compact" */
                  *hole_createdp = IPREASM_TRUE;
 4029ef4:	d8c00d17 	ldw	r3,52(sp)
 4029ef8:	00800044 	movi	r2,1
 4029efc:	18800005 	stb	r2,0(r3)
 4029f00:	003fb106 	br	4029dc8 <ip_reasm_compute_overlap+0x19c>
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
               {
               *indexp = i;
               *last_rfqpp = rfqp;               
 4029f04:	da000117 	ldw	r8,4(sp)
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
               {
               *indexp = i;
 4029f08:	e440000d 	sth	r17,0(fp)
               *last_rfqpp = rfqp;               
 4029f0c:	45c00015 	stw	r23,0(r8)
 4029f10:	003fe106 	br	4029e98 <ip_reasm_compute_overlap+0x26c>
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
         {
         *last_rfqpp = rfqp;
 4029f14:	da000117 	ldw	r8,4(sp)
 4029f18:	45c00015 	stw	r23,0(r8)
 4029f1c:	003fc906 	br	4029e44 <ip_reasm_compute_overlap+0x218>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
                     {
                     *indexp = i;
                     *last_rfqpp = rfqp;
 4029f20:	d8800117 	ldw	r2,4(sp)
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
                  rfqp->bufp[i] = 0; /* mark slot as unused */
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
                     {
                     *indexp = i;
 4029f24:	e440000d 	sth	r17,0(fp)
                     *last_rfqpp = rfqp;
 4029f28:	15c00015 	stw	r23,0(r2)
 4029f2c:	003ff106 	br	4029ef4 <ip_reasm_compute_overlap+0x2c8>

04029f30 <ip_reasm_delete_ire>:
   IREP tmpp;
   IREP prev_tmpp = 0;

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029f30:	d0e85a17 	ldw	r3,-24216(gp)
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in the 
master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_delete_ire (IREP irep)
{
 4029f34:	defff904 	addi	sp,sp,-28
 4029f38:	dcc00315 	stw	r19,12(sp)
 4029f3c:	dfc00615 	stw	ra,24(sp)
 4029f40:	dd400515 	stw	r21,20(sp)
 4029f44:	dd000415 	stw	r20,16(sp)
 4029f48:	dc800215 	stw	r18,8(sp)
 4029f4c:	dc400115 	stw	r17,4(sp)
 4029f50:	dc000015 	stw	r16,0(sp)
 4029f54:	2027883a 	mov	r19,r4
   IREP tmpp;
   IREP prev_tmpp = 0;

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029f58:	18000626 	beq	r3,zero,4029f74 <ip_reasm_delete_ire+0x44>
      {
      if (tmpp == irep) 
 4029f5c:	1900031e 	bne	r3,r4,4029f6c <ip_reasm_delete_ire+0x3c>
 4029f60:	00003d06 	br	402a058 <ip_reasm_delete_ire+0x128>
 4029f64:	98801326 	beq	r19,r2,4029fb4 <ip_reasm_delete_ire+0x84>
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
 4029f68:	1007883a 	mov	r3,r2
   IREP tmpp;
   IREP prev_tmpp = 0;

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 4029f6c:	18800017 	ldw	r2,0(r3)
 4029f70:	103ffc1e 	bne	r2,zero,4029f64 <ip_reasm_delete_ire+0x34>

   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
      {
      ++ire_stats.bad_irep;
 4029f74:	00c10134 	movhi	r3,1028
 4029f78:	18ce1504 	addi	r3,r3,14420
 4029f7c:	18800017 	ldw	r2,0(r3)
 4029f80:	013ffd84 	movi	r4,-10
 4029f84:	10800044 	addi	r2,r2,1
 4029f88:	18800015 	stw	r2,0(r3)
   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
   IPR_FREE (irep);

   return IPREASM_OK;
}
 4029f8c:	2005883a 	mov	r2,r4
 4029f90:	dfc00617 	ldw	ra,24(sp)
 4029f94:	dd400517 	ldw	r21,20(sp)
 4029f98:	dd000417 	ldw	r20,16(sp)
 4029f9c:	dcc00317 	ldw	r19,12(sp)
 4029fa0:	dc800217 	ldw	r18,8(sp)
 4029fa4:	dc400117 	ldw	r17,4(sp)
 4029fa8:	dc000017 	ldw	r16,0(sp)
 4029fac:	dec00704 	addi	sp,sp,28
 4029fb0:	f800283a 	ret
      {
      if (tmpp == irep) 
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
         else prev_tmpp->next = irep->next;
 4029fb4:	98800017 	ldw	r2,0(r19)
 4029fb8:	18800015 	stw	r2,0(r3)
      return ENP_PARAM;
      }

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);
 4029fbc:	9d400604 	addi	r21,r19,24

   while (rfqp)
 4029fc0:	a8001f26 	beq	r21,zero,402a040 <ip_reasm_delete_ire+0x110>
 4029fc4:	a829883a 	mov	r20,r21
   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
      {
      ++ire_stats.bad_irep;
      return ENP_PARAM;
 4029fc8:	a025883a 	mov	r18,r20
 4029fcc:	0023883a 	mov	r17,zero
 4029fd0:	00000d06 	br	402a008 <ip_reasm_delete_ire+0xd8>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
         {
         if ((p = rfqp->bufp [i]) != 0)
            {
            ip_reasm_decr_mem_useage (p->nb_blen);
 4029fd4:	8100020b 	ldhu	r4,8(r16)
 4029fd8:	40298500 	call	4029850 <ip_reasm_decr_mem_useage>
            LOCK_NET_RESOURCE (FREEQ_RESID);
 4029fdc:	01000084 	movi	r4,2
 4029fe0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free (p);
 4029fe4:	8009883a 	mov	r4,r16
 4029fe8:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
 4029fec:	01000084 	movi	r4,2
 4029ff0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 4029ff4:	8c400044 	addi	r17,r17,1
 4029ff8:	88ffffcc 	andi	r3,r17,65535
 4029ffc:	00800404 	movi	r2,16
 402a000:	94800104 	addi	r18,r18,4
 402a004:	18800526 	beq	r3,r2,402a01c <ip_reasm_delete_ire+0xec>
         {
         if ((p = rfqp->bufp [i]) != 0)
 402a008:	94000117 	ldw	r16,4(r18)
 402a00c:	803ff11e 	bne	r16,zero,4029fd4 <ip_reasm_delete_ire+0xa4>
            pk_free (p);
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 402a010:	98802103 	ldbu	r2,132(r19)
 402a014:	1080004c 	andi	r2,r2,1
 402a018:	103ff626 	beq	r2,zero,4029ff4 <ip_reasm_delete_ire+0xc4>
               }
            }
          }

       prev_rfqp = rfqp;
       rfqp = rfqp->next;
 402a01c:	a4000017 	ldw	r16,0(r20)
       /* the first RFQ is statically allocated, and cannot be freed */
       if (prev_rfqp != first_rfqp)
 402a020:	ad000426 	beq	r21,r20,402a034 <ip_reasm_delete_ire+0x104>
          {
          ip_reasm_decr_mem_useage (sizeof(RFQ));
 402a024:	01001904 	movi	r4,100
 402a028:	40298500 	call	4029850 <ip_reasm_decr_mem_useage>
          IPR_FREE (prev_rfqp);
 402a02c:	a009883a 	mov	r4,r20
 402a030:	401cce40 	call	401cce4 <npfree>

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
 402a034:	80000226 	beq	r16,zero,402a040 <ip_reasm_delete_ire+0x110>
   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
      {
      ++ire_stats.bad_irep;
      return ENP_PARAM;
 402a038:	8029883a 	mov	r20,r16
 402a03c:	003fe206 	br	4029fc8 <ip_reasm_delete_ire+0x98>
          IPR_FREE (prev_rfqp);
          }
      }

   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
 402a040:	01002204 	movi	r4,136
 402a044:	40298500 	call	4029850 <ip_reasm_decr_mem_useage>
   IPR_FREE (irep);
 402a048:	9809883a 	mov	r4,r19
 402a04c:	401cce40 	call	401cce4 <npfree>
 402a050:	0009883a 	mov	r4,zero
 402a054:	003fcd06 	br	4029f8c <ip_reasm_delete_ire+0x5c>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      if (tmpp == irep) 
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
 402a058:	20800017 	ldw	r2,0(r4)
 402a05c:	d0a85a15 	stw	r2,-24216(gp)
 402a060:	003fd606 	br	4029fbc <ip_reasm_delete_ire+0x8c>

0402a064 <ip_reasm_process_timer_tick>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
 402a064:	defffa04 	addi	sp,sp,-24
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 402a068:	0009883a 	mov	r4,zero

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
 402a06c:	dc000015 	stw	r16,0(sp)
 402a070:	dfc00515 	stw	ra,20(sp)
 402a074:	dd000415 	stw	r20,16(sp)
 402a078:	dcc00315 	stw	r19,12(sp)
 402a07c:	dc800215 	stw	r18,8(sp)
 402a080:	dc400115 	stw	r17,4(sp)
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 402a084:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 402a088:	d4285a17 	ldw	r16,-24216(gp)
 402a08c:	80001926 	beq	r16,zero,402a0f4 <ip_reasm_process_timer_tick+0x90>
 402a090:	04801e04 	movi	r18,120
 402a094:	05010134 	movhi	r20,1028
 402a098:	a50e1504 	addi	r20,r20,14420
 402a09c:	04c10134 	movhi	r19,1028
 402a0a0:	9cce0104 	addi	r19,r19,14340
 402a0a4:	00000206 	br	402a0b0 <ip_reasm_process_timer_tick+0x4c>
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
#endif
         ip_reasm_delete_ire (tmpp);
         ++ip_mib.ipReasmFails;
 402a0a8:	8821883a 	mov	r16,r17
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 402a0ac:	88001126 	beq	r17,zero,402a0f4 <ip_reasm_process_timer_tick+0x90>
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
      ++tmpp->age;
 402a0b0:	80800517 	ldw	r2,20(r16)
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
 402a0b4:	8009883a 	mov	r4,r16
   LOCK_NET_RESOURCE (NET_RESID);
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
 402a0b8:	84400017 	ldw	r17,0(r16)
      ++tmpp->age;
 402a0bc:	10800044 	addi	r2,r2,1
 402a0c0:	80800515 	stw	r2,20(r16)
      /* check to see if this entry has reached its max age (expired)? */
      if (tmpp->age == IRE_TMO)
 402a0c4:	14bff81e 	bne	r2,r18,402a0a8 <ip_reasm_process_timer_tick+0x44>
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
 402a0c8:	a0800117 	ldw	r2,4(r20)
 402a0cc:	10800044 	addi	r2,r2,1
 402a0d0:	a0800115 	stw	r2,4(r20)
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
 402a0d4:	40299e40 	call	40299e4 <ip_reasm_send_icmp_timex>
#endif
         ip_reasm_delete_ire (tmpp);
 402a0d8:	8009883a 	mov	r4,r16
 402a0dc:	4029f300 	call	4029f30 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 402a0e0:	98c00f17 	ldw	r3,60(r19)
 402a0e4:	8821883a 	mov	r16,r17
 402a0e8:	18c00044 	addi	r3,r3,1
 402a0ec:	98c00f15 	stw	r3,60(r19)
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 402a0f0:	883fef1e 	bne	r17,zero,402a0b0 <ip_reasm_process_timer_tick+0x4c>
         ++ip_mib.ipReasmFails;
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
 402a0f4:	00c10134 	movhi	r3,1028
 402a0f8:	18e93304 	addi	r3,r3,-23348
 402a0fc:	18800017 	ldw	r2,0(r3)

   UNLOCK_NET_RESOURCE (NET_RESID);
 402a100:	0009883a 	mov	r4,zero
         ++ip_mib.ipReasmFails;
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
 402a104:	10801904 	addi	r2,r2,100
 402a108:	d0a85b15 	stw	r2,-24212(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 402a10c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   return IPREASM_OK;
}
 402a110:	0005883a 	mov	r2,zero
 402a114:	dfc00517 	ldw	ra,20(sp)
 402a118:	dd000417 	ldw	r20,16(sp)
 402a11c:	dcc00317 	ldw	r19,12(sp)
 402a120:	dc800217 	ldw	r18,8(sp)
 402a124:	dc400117 	ldw	r17,4(sp)
 402a128:	dc000017 	ldw	r16,0(sp)
 402a12c:	dec00604 	addi	sp,sp,24
 402a130:	f800283a 	ret

0402a134 <ip_reasm_copy_queued_fragments_into_reassy_buffer>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 402a134:	defff504 	addi	sp,sp,-44
 402a138:	dc000115 	stw	r16,4(sp)
   PACKET p;
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;

   pip = (struct ip *) irep->l3_hdr;
 402a13c:	2c002017 	ldw	r16,128(r5)

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 402a140:	df000915 	stw	fp,36(sp)
 402a144:	ddc00815 	stw	r23,32(sp)
 402a148:	dd800715 	stw	r22,28(sp)
 402a14c:	dd000515 	stw	r20,20(sp)
 402a150:	dfc00a15 	stw	ra,40(sp)
 402a154:	dd400615 	stw	r21,24(sp)
 402a158:	dcc00415 	stw	r19,16(sp)
 402a15c:	dc800315 	stw	r18,12(sp)
 402a160:	dc400215 	stw	r17,8(sp)
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;

   pip = (struct ip *) irep->l3_hdr;
   iphlen = ip_hlen (pip);
 402a164:	80800003 	ldbu	r2,0(r16)

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 402a168:	282d883a 	mov	r22,r5
   pip = (struct ip *) irep->l3_hdr;
   iphlen = ip_hlen (pip);

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
 402a16c:	29401f17 	ldw	r5,124(r5)
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;

   pip = (struct ip *) irep->l3_hdr;
   iphlen = ip_hlen (pip);
 402a170:	108003cc 	andi	r2,r2,15
 402a174:	1085883a 	add	r2,r2,r2
 402a178:	1085883a 	add	r2,r2,r2

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
 402a17c:	8161c83a 	sub	r16,r16,r5

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 402a180:	2039883a 	mov	fp,r4
   pip = (struct ip *) irep->l3_hdr;
   iphlen = ip_hlen (pip);

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
 402a184:	1421883a 	add	r16,r2,r16
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
 402a188:	21000117 	ldw	r4,4(r4)
 402a18c:	84003fcc 	andi	r16,r16,255
 402a190:	800d883a 	mov	r6,r16
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;

   pip = (struct ip *) irep->l3_hdr;
   iphlen = ip_hlen (pip);
 402a194:	d8800005 	stb	r2,0(sp)

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
 402a198:	40096480 	call	4009648 <memcpy>

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;
 402a19c:	e2800117 	ldw	r10,4(fp)
   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
 402a1a0:	b5000604 	addi	r20,r22,24
   writep = reassy_pkt->nb_buff + offset;
 402a1a4:	82af883a 	add	r23,r16,r10

   while (rfqp)
 402a1a8:	a0006026 	beq	r20,zero,402a32c <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1f8>
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
 402a1ac:	002b883a 	mov	r21,zero
 402a1b0:	a023883a 	mov	r17,r20
 402a1b4:	a027883a 	mov	r19,r20
 402a1b8:	0025883a 	mov	r18,zero

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
         {
         if ((p = rfqp->bufp [i]) != 0)
 402a1bc:	8c000117 	ldw	r16,4(r17)
 402a1c0:	80005226 	beq	r16,zero,402a30c <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1d8>
            {
            /* note that rfqp->frag_offset[i] is the true value of the offset field, 
             * and does not require any scaling (like the Fragment Offset field in 
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
 402a1c4:	9900110b 	ldhu	r4,68(r19)
 402a1c8:	81400317 	ldw	r5,12(r16)
 402a1cc:	81800417 	ldw	r6,16(r16)
 402a1d0:	b909883a 	add	r4,r23,r4
 402a1d4:	40096480 	call	4009648 <memcpy>
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
 402a1d8:	a8005226 	beq	r21,zero,402a324 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1f0>
            else
               {
               ip_reasm_decr_mem_useage (p->nb_blen);
 402a1dc:	8100020b 	ldhu	r4,8(r16)
 402a1e0:	40298500 	call	4029850 <ip_reasm_decr_mem_useage>
               LOCK_NET_RESOURCE (FREEQ_RESID);
 402a1e4:	01000084 	movi	r4,2
 402a1e8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
               pk_free (p);
 402a1ec:	8009883a 	mov	r4,r16
 402a1f0:	401bf0c0 	call	401bf0c <pk_free>
               UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a1f4:	01000084 	movi	r4,2
 402a1f8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
               }
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
 402a1fc:	88000115 	stw	zero,4(r17)
   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 402a200:	94800044 	addi	r18,r18,1
 402a204:	90ffffcc 	andi	r3,r18,65535
 402a208:	00800404 	movi	r2,16
 402a20c:	8c400104 	addi	r17,r17,4
 402a210:	9cc00084 	addi	r19,r19,2
 402a214:	18bfe91e 	bne	r3,r2,402a1bc <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x88>
               break;
               }
            }
          }

      rfqp = rfqp->next;
 402a218:	a5000017 	ldw	r20,0(r20)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
 402a21c:	a03fe41e 	bne	r20,zero,402a1b0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x7c>
 402a220:	e2800117 	ldw	r10,4(fp)
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 402a224:	b1001f17 	ldw	r4,124(r22)
 402a228:	b0c02017 	ldw	r3,128(r22)
   reassy_pkt->nb_plen = irep->length + iphlen;
   reassy_pkt->nb_tstamp = cticks;
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 402a22c:	a9400a17 	ldw	r5,40(r21)

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
   reassy_pkt->nb_plen = irep->length + iphlen;
 402a230:	b180040b 	ldhu	r6,16(r22)
   reassy_pkt->nb_tstamp = cticks;
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 402a234:	e1c00a17 	ldw	r7,40(fp)

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
   reassy_pkt->nb_plen = irep->length + iphlen;
 402a238:	dc400003 	ldbu	r17,0(sp)
   reassy_pkt->nb_tstamp = cticks;
 402a23c:	00810134 	movhi	r2,1028
 402a240:	10a93304 	addi	r2,r2,-23348
 402a244:	12000017 	ldw	r8,0(r2)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
   reassy_pkt->net = sav_pkt->net;
 402a248:	aa400617 	ldw	r9,24(r21)
   reassy_pkt->type = sav_pkt->type;
 402a24c:	a880080b 	ldhu	r2,32(r21)
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
   reassy_pkt->nb_plen = irep->length + iphlen;
   reassy_pkt->nb_tstamp = cticks;
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 402a250:	294000cc 	andi	r5,r5,3
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 402a254:	1907c83a 	sub	r3,r3,r4
   reassy_pkt->type = sav_pkt->type;
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
 402a258:	a900020b 	ldhu	r4,8(r21)
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 402a25c:	50c7883a 	add	r3,r10,r3
   reassy_pkt->nb_plen = irep->length + iphlen;
   reassy_pkt->nb_tstamp = cticks;
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 402a260:	394eb03a 	or	r7,r7,r5

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
   reassy_pkt->nb_plen = irep->length + iphlen;
 402a264:	344d883a 	add	r6,r6,r17
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 402a268:	e0c00315 	stw	r3,12(fp)
   reassy_pkt->nb_plen = irep->length + iphlen;
 402a26c:	e1800415 	stw	r6,16(fp)
   reassy_pkt->nb_tstamp = cticks;
 402a270:	e2000515 	stw	r8,20(fp)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 402a274:	e1c00a15 	stw	r7,40(fp)
   reassy_pkt->net = sav_pkt->net;
 402a278:	e2400615 	stw	r9,24(fp)
   reassy_pkt->type = sav_pkt->type;
 402a27c:	e080080d 	sth	r2,32(fp)
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
 402a280:	40298500 	call	4029850 <ip_reasm_decr_mem_useage>
   LOCK_NET_RESOURCE (FREEQ_RESID);
 402a284:	01000084 	movi	r4,2
 402a288:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free (sav_pkt);
 402a28c:	a809883a 	mov	r4,r21
 402a290:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a294:	01000084 	movi	r4,2
 402a298:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
 402a29c:	e4000317 	ldw	r16,12(fp)
   pip->ip_len = htons(reassy_pkt->nb_plen);
 402a2a0:	e0800417 	ldw	r2,16(fp)
 402a2a4:	e0c00443 	ldbu	r3,17(fp)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
 402a2a8:	8100018b 	ldhu	r4,6(r16)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
   pip->ip_len = htons(reassy_pkt->nb_plen);
 402a2ac:	1004923a 	slli	r2,r2,8
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
 402a2b0:	880ad07a 	srli	r5,r17,1
   pip = ip_head(reassy_pkt);
   pip->ip_len = htons(reassy_pkt->nb_plen);
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
 402a2b4:	2100300c 	andi	r4,r4,192
   UNLOCK_NET_RESOURCE (FREEQ_RESID);

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
   pip->ip_len = htons(reassy_pkt->nb_plen);
 402a2b8:	1886b03a 	or	r3,r3,r2
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
 402a2bc:	8100018d 	sth	r4,6(r16)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
   pip->ip_len = htons(reassy_pkt->nb_plen);
 402a2c0:	80c0008d 	sth	r3,2(r16)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
 402a2c4:	8000028d 	sth	zero,10(r16)
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
 402a2c8:	8009883a 	mov	r4,r16
 402a2cc:	40199b00 	call	40199b0 <cksum>
 402a2d0:	0084303a 	nor	r2,zero,r2
 402a2d4:	8080028d 	sth	r2,10(r16)

   return IPREASM_OK;
}
 402a2d8:	0005883a 	mov	r2,zero
 402a2dc:	dfc00a17 	ldw	ra,40(sp)
 402a2e0:	df000917 	ldw	fp,36(sp)
 402a2e4:	ddc00817 	ldw	r23,32(sp)
 402a2e8:	dd800717 	ldw	r22,28(sp)
 402a2ec:	dd400617 	ldw	r21,24(sp)
 402a2f0:	dd000517 	ldw	r20,20(sp)
 402a2f4:	dcc00417 	ldw	r19,16(sp)
 402a2f8:	dc800317 	ldw	r18,12(sp)
 402a2fc:	dc400217 	ldw	r17,8(sp)
 402a300:	dc000117 	ldw	r16,4(sp)
 402a304:	dec00b04 	addi	sp,sp,44
 402a308:	f800283a 	ret
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 402a30c:	b0802103 	ldbu	r2,132(r22)
 402a310:	1080004c 	andi	r2,r2,1
 402a314:	103fba26 	beq	r2,zero,402a200 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xcc>
               break;
               }
            }
          }

      rfqp = rfqp->next;
 402a318:	a5000017 	ldw	r20,0(r20)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
 402a31c:	a03fa41e 	bne	r20,zero,402a1b0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x7c>
 402a320:	003fbf06 	br	402a220 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xec>
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
 402a324:	802b883a 	mov	r21,r16
 402a328:	003fb406 	br	402a1fc <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xc8>
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
 402a32c:	002b883a 	mov	r21,zero
 402a330:	003fbc06 	br	402a224 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xf0>

0402a334 <ip_reasm_process_first_fragment>:
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
 402a334:	defffa04 	addi	sp,sp,-24
 402a338:	dc800215 	stw	r18,8(sp)
 402a33c:	2025883a 	mov	r18,r4
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
 402a340:	21000217 	ldw	r4,8(r4)
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
 402a344:	dd000415 	stw	r20,16(sp)
 402a348:	dfc00515 	stw	ra,20(sp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
 402a34c:	21002204 	addi	r4,r4,136
 402a350:	213fffcc 	andi	r4,r4,65535
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
 402a354:	dcc00315 	stw	r19,12(sp)
 402a358:	dc400115 	stw	r17,4(sp)
 402a35c:	dc000015 	stw	r16,0(sp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
 402a360:	40297940 	call	4029794 <ip_reasm_check_mem_useage>
 402a364:	1029883a 	mov	r20,r2
 402a368:	10001426 	beq	r2,zero,402a3bc <ip_reasm_process_first_fragment+0x88>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 402a36c:	01000084 	movi	r4,2
 402a370:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free (p);
 402a374:	9009883a 	mov	r4,r18
 402a378:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a37c:	01000084 	movi	r4,2
 402a380:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 402a384:	00c10134 	movhi	r3,1028
 402a388:	18ce0104 	addi	r3,r3,14340
 402a38c:	18800f17 	ldw	r2,60(r3)
 402a390:	10800044 	addi	r2,r2,1
 402a394:	18800f15 	stw	r2,60(r3)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));

   return IPREASM_OK;
}
 402a398:	a005883a 	mov	r2,r20
 402a39c:	dfc00517 	ldw	ra,20(sp)
 402a3a0:	dd000417 	ldw	r20,16(sp)
 402a3a4:	dcc00317 	ldw	r19,12(sp)
 402a3a8:	dc800217 	ldw	r18,8(sp)
 402a3ac:	dc400117 	ldw	r17,4(sp)
 402a3b0:	dc000017 	ldw	r16,0(sp)
 402a3b4:	dec00604 	addi	sp,sp,24
 402a3b8:	f800283a 	ret
      return rc;
   }

   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
 402a3bc:	01002204 	movi	r4,136
 402a3c0:	401cdc80 	call	401cdc8 <npalloc>
 402a3c4:	1021883a 	mov	r16,r2
   if (irep == 0) 
 402a3c8:	10004326 	beq	r2,zero,402a4d8 <ip_reasm_process_first_fragment+0x1a4>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      ++ip_mib.ipReasmFails;
      return ENP_RESOURCE;
   }

   pip = ip_head(p);
 402a3cc:	94400317 	ldw	r17,12(r18)
   iphlen = ip_hlen(pip);
 402a3d0:	88800003 	ldbu	r2,0(r17)
   ftype = ip_reasm_determine_type_of_frag (pip);
 402a3d4:	8809883a 	mov	r4,r17
      ++ip_mib.ipReasmFails;
      return ENP_RESOURCE;
   }

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
 402a3d8:	108003cc 	andi	r2,r2,15
 402a3dc:	1085883a 	add	r2,r2,r2
 402a3e0:	10a7883a 	add	r19,r2,r2
   ftype = ip_reasm_determine_type_of_frag (pip);
 402a3e4:	40297480 	call	4029748 <ip_reasm_determine_type_of_frag>
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   total_len = ntohs(pip->ip_len);

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
 402a3e8:	89000317 	ldw	r4,12(r17)
      return ENP_RESOURCE;
   }

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
 402a3ec:	100f883a 	mov	r7,r2
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 402a3f0:	8880018b 	ldhu	r2,6(r17)
   total_len = ntohs(pip->ip_len);

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
 402a3f4:	81000115 	stw	r4,4(r16)
   irep->dest = pip->ip_dest;
 402a3f8:	89400417 	ldw	r5,16(r17)
   }

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 402a3fc:	100c923a 	slli	r6,r2,8
 402a400:	1004d23a 	srli	r2,r2,8
   total_len = ntohs(pip->ip_len);

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
   irep->dest = pip->ip_dest;
 402a404:	81400215 	stw	r5,8(r16)
   irep->prot = pip->ip_prot;
 402a408:	89000243 	ldbu	r4,9(r17)

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   total_len = ntohs(pip->ip_len);
 402a40c:	88c0008b 	ldhu	r3,2(r17)
   }

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 402a410:	1184b03a 	or	r2,r2,r6
 402a414:	1087ffcc 	andi	r2,r2,8191

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
   irep->dest = pip->ip_dest;
   irep->prot = pip->ip_prot;
 402a418:	81000385 	stb	r4,14(r16)
   }

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 402a41c:	100a90fa 	slli	r5,r2,3
   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
   irep->dest = pip->ip_dest;
   irep->prot = pip->ip_prot;
   irep->id = pip->ip_id;
 402a420:	8880010b 	ldhu	r2,4(r17)

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   total_len = ntohs(pip->ip_len);
 402a424:	1808923a 	slli	r4,r3,8
 402a428:	1806d23a 	srli	r3,r3,8
   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
   irep->dest = pip->ip_dest;
   irep->prot = pip->ip_prot;
   irep->id = pip->ip_id;
 402a42c:	8080030d 	sth	r2,12(r16)
   if (ftype == IP_LF)
 402a430:	00800144 	movi	r2,5

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
   total_len = ntohs(pip->ip_len);
 402a434:	1908b03a 	or	r4,r3,r4
   }

   pip = ip_head(p);
   iphlen = ip_hlen(pip);
   ftype = ip_reasm_determine_type_of_frag (pip);
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 402a438:	2811883a 	mov	r8,r5
    * byte order) */
   irep->src = pip->ip_src;
   irep->dest = pip->ip_dest;
   irep->prot = pip->ip_prot;
   irep->id = pip->ip_id;
   if (ftype == IP_LF)
 402a43c:	38801a26 	beq	r7,r2,402a4a8 <ip_reasm_process_first_fragment+0x174>
      {
      irep->length = frag_offset + (total_len - iphlen);
      }
   else if (ftype == IP_FF)
 402a440:	00800044 	movi	r2,1
 402a444:	38801e26 	beq	r7,r2,402a4c0 <ip_reasm_process_first_fragment+0x18c>
 402a448:	98803fcc 	andi	r2,r19,255
 402a44c:	2089c83a 	sub	r4,r4,r2
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
   irep->age = 0;

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
 402a450:	80802103 	ldbu	r2,132(r16)
      irep->l3_hdr = (char *) pip;
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
 402a454:	8100048d 	sth	r4,18(r16)
   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
   irep->rfq.frag_offset[0] = frag_offset;
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 402a458:	99803fcc 	andi	r6,r19,255
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
   irep->age = 0;

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
 402a45c:	10800054 	ori	r2,r2,1
 402a460:	80802105 	stb	r2,132(r16)
   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
   irep->rfq.frag_offset[0] = frag_offset;
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 402a464:	90c00317 	ldw	r3,12(r18)
   p->nb_plen -= iphlen;
 402a468:	91400417 	ldw	r5,16(r18)
   /* insert at start of global IRE list */
   irep->next = h_ireq;
   h_ireq = irep;

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 402a46c:	91000217 	ldw	r4,8(r18)

   p->nb_prot += iphlen;
   p->nb_plen -= iphlen;

   /* insert at start of global IRE list */
   irep->next = h_ireq;
 402a470:	d0a85a17 	ldw	r2,-24216(gp)
   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
   irep->rfq.frag_offset[0] = frag_offset;
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 402a474:	1987883a 	add	r3,r3,r6
   p->nb_plen -= iphlen;
 402a478:	298bc83a 	sub	r5,r5,r6
   /* insert at start of global IRE list */
   irep->next = h_ireq;
   h_ireq = irep;

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 402a47c:	21002204 	addi	r4,r4,136

   p->nb_prot += iphlen;
   p->nb_plen -= iphlen;

   /* insert at start of global IRE list */
   irep->next = h_ireq;
 402a480:	80800015 	stw	r2,0(r16)
   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
   irep->rfq.frag_offset[0] = frag_offset;
 402a484:	8200170d 	sth	r8,92(r16)
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 402a488:	90c00315 	stw	r3,12(r18)
   p->nb_plen -= iphlen;
 402a48c:	91400415 	stw	r5,16(r18)
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
   irep->age = 0;
 402a490:	80000515 	stw	zero,20(r16)

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
 402a494:	84800715 	stw	r18,28(r16)
   /* insert at start of global IRE list */
   irep->next = h_ireq;
   h_ireq = irep;

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 402a498:	213fffcc 	andi	r4,r4,65535
   p->nb_prot += iphlen;
   p->nb_plen -= iphlen;

   /* insert at start of global IRE list */
   irep->next = h_ireq;
   h_ireq = irep;
 402a49c:	d4285a15 	stw	r16,-24216(gp)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 402a4a0:	40297f00 	call	40297f0 <ip_reasm_incr_mem_useage>
 402a4a4:	003fbc06 	br	402a398 <ip_reasm_process_first_fragment+0x64>
   irep->dest = pip->ip_dest;
   irep->prot = pip->ip_prot;
   irep->id = pip->ip_id;
   if (ftype == IP_LF)
      {
      irep->length = frag_offset + (total_len - iphlen);
 402a4a8:	98803fcc 	andi	r2,r19,255
 402a4ac:	2085c83a 	sub	r2,r4,r2
 402a4b0:	2887883a 	add	r3,r5,r2
 402a4b4:	1009883a 	mov	r4,r2
 402a4b8:	80c0040d 	sth	r3,16(r16)
 402a4bc:	003fe406 	br	402a450 <ip_reasm_process_first_fragment+0x11c>
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
 402a4c0:	90800117 	ldw	r2,4(r18)
      irep->l3_hdr = (char *) pip;
 402a4c4:	98c03fcc 	andi	r3,r19,255
 402a4c8:	20c9c83a 	sub	r4,r4,r3
 402a4cc:	84402015 	stw	r17,128(r16)
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
 402a4d0:	80801f15 	stw	r2,124(r16)
 402a4d4:	003fde06 	br	402a450 <ip_reasm_process_first_fragment+0x11c>
   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
   if (irep == 0) 
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 402a4d8:	01000084 	movi	r4,2
 402a4dc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free (p);
 402a4e0:	9009883a 	mov	r4,r18
 402a4e4:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a4e8:	01000084 	movi	r4,2
 402a4ec:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 402a4f0:	00c10134 	movhi	r3,1028
 402a4f4:	18ce0104 	addi	r3,r3,14340
 402a4f8:	18800f17 	ldw	r2,60(r3)
 402a4fc:	053ffa84 	movi	r20,-22
 402a500:	10800044 	addi	r2,r2,1
 402a504:	18800f15 	stw	r2,60(r3)
 402a508:	003fa306 	br	402a398 <ip_reasm_process_first_fragment+0x64>

0402a50c <ip_reasm_process_subsequent_fragments>:
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
 402a50c:	defff504 	addi	sp,sp,-44
 402a510:	dcc00815 	stw	r19,32(sp)
 402a514:	2027883a 	mov	r19,r4
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 402a518:	2809883a 	mov	r4,r5
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
 402a51c:	dc800715 	stw	r18,28(sp)
 402a520:	dc400615 	stw	r17,24(sp)
 402a524:	dfc00a15 	stw	ra,40(sp)
 402a528:	dd000915 	stw	r20,36(sp)
 402a52c:	dc000515 	stw	r16,20(sp)
 402a530:	2825883a 	mov	r18,r5
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 402a534:	40298b00 	call	40298b0 <ip_reasm_find_ire>
 402a538:	14403fcc 	andi	r17,r2,255
 402a53c:	00800044 	movi	r2,1
 402a540:	8880881e 	bne	r17,r2,402a764 <ip_reasm_process_subsequent_fragments+0x258>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      ++ip_mib.ipReasmFails;
      return ENP_PARAM;
      }

   pip = ip_head(p);
 402a544:	9c000317 	ldw	r16,12(r19)
   ftype = ip_reasm_determine_type_of_frag (pip);
 402a548:	8009883a 	mov	r4,r16
 402a54c:	40297480 	call	4029748 <ip_reasm_determine_type_of_frag>
 402a550:	1007883a 	mov	r3,r2
   /* this fragment is a destined for an already queued fragment stream.
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
 402a554:	00800144 	movi	r2,5
 402a558:	18803826 	beq	r3,r2,402a63c <ip_reasm_process_subsequent_fragments+0x130>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
      }
   else if (ftype == IP_FF)
 402a55c:	1c405726 	beq	r3,r17,402a6bc <ip_reasm_process_subsequent_fragments+0x1b0>
      irep->l3_hdr = (char *) pip;
      }

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
 402a560:	d8800284 	addi	r2,sp,10
 402a564:	d8800015 	stw	r2,0(sp)
 402a568:	9809883a 	mov	r4,r19
 402a56c:	d8800204 	addi	r2,sp,8
 402a570:	900b883a 	mov	r5,r18
 402a574:	d9800304 	addi	r6,sp,12
 402a578:	d9c00404 	addi	r7,sp,16
 402a57c:	d8800115 	stw	r2,4(sp)
 402a580:	4029c2c0 	call	4029c2c <ip_reasm_compute_overlap>
 402a584:	1007883a 	mov	r3,r2
 402a588:	00800084 	movi	r2,2
 402a58c:	18805f1e 	bne	r3,r2,402a70c <ip_reasm_process_subsequent_fragments+0x200>
      }

   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
 402a590:	9900020b 	ldhu	r4,8(r19)
 402a594:	40297940 	call	4029794 <ip_reasm_check_mem_useage>
 402a598:	1023883a 	mov	r17,r2
 402a59c:	1000391e 	bne	r2,zero,402a684 <ip_reasm_process_subsequent_fragments+0x178>

   /* the two combinations of index and rfqp are as follows:
    * (1) index = INVALID_FRAG_INDEX, rfqp = non-zero: no empty slot found in RFQ(s),
    *     and rfqp points to the last RFQ that was processed
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
 402a5a0:	d8c0030b 	ldhu	r3,12(sp)
 402a5a4:	00800404 	movi	r2,16
 402a5a8:	18804826 	beq	r3,r2,402a6cc <ip_reasm_process_subsequent_fragments+0x1c0>
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 402a5ac:	d8800417 	ldw	r2,16(sp)
      rfqp->frag_offset[index] = frag_offset;
 402a5b0:	1809883a 	mov	r4,r3
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 402a5b4:	18c7883a 	add	r3,r3,r3
 402a5b8:	18c7883a 	add	r3,r3,r3
      rfqp->frag_offset[index] = frag_offset;
 402a5bc:	2109883a 	add	r4,r4,r4
 402a5c0:	2089883a 	add	r4,r4,r2
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 402a5c4:	1887883a 	add	r3,r3,r2
      rfqp->frag_offset[index] = frag_offset;
 402a5c8:	d880028b 	ldhu	r2,10(sp)
 402a5cc:	0021883a 	mov	r16,zero
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 402a5d0:	1cc00115 	stw	r19,4(r3)
      rfqp->frag_offset[index] = frag_offset;
 402a5d4:	2080110d 	sth	r2,68(r4)
         }
      }
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
 402a5d8:	d8800203 	ldbu	r2,8(sp)
 402a5dc:	1000501e 	bne	r2,zero,402a720 <ip_reasm_process_subsequent_fragments+0x214>

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
 402a5e0:	90c0048b 	ldhu	r3,18(r18)
 402a5e4:	98800417 	ldw	r2,16(r19)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
 402a5e8:	99000217 	ldw	r4,8(r19)

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
 402a5ec:	10c5883a 	add	r2,r2,r3
 402a5f0:	9080048d 	sth	r2,18(r18)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
 402a5f4:	80006d26 	beq	r16,zero,402a7ac <ip_reasm_process_subsequent_fragments+0x2a0>
 402a5f8:	00801904 	movi	r2,100
 402a5fc:	2089883a 	add	r4,r4,r2
 402a600:	213fffcc 	andi	r4,r4,65535
 402a604:	40297f00 	call	40297f0 <ip_reasm_incr_mem_useage>

   if (irep->length != 0)
 402a608:	90c0040b 	ldhu	r3,16(r18)
 402a60c:	18000226 	beq	r3,zero,402a618 <ip_reasm_process_subsequent_fragments+0x10c>
      {
      /* we know the total length of the original unfragmented datagram; 
       * let's check to see if we have all of the bytes... */
      if (irep->rcvd == irep->length)
 402a610:	9080048b 	ldhu	r2,18(r18)
 402a614:	18806926 	beq	r3,r2,402a7bc <ip_reasm_process_subsequent_fragments+0x2b0>
      /* we haven't received the LF (so we don't know the total amount of data in 
       * the original, unfragmented datagram), and therefore reassembly can't complete yet */
      }

   return IPREASM_OK;
}
 402a618:	8805883a 	mov	r2,r17
 402a61c:	dfc00a17 	ldw	ra,40(sp)
 402a620:	dd000917 	ldw	r20,36(sp)
 402a624:	dcc00817 	ldw	r19,32(sp)
 402a628:	dc800717 	ldw	r18,28(sp)
 402a62c:	dc400617 	ldw	r17,24(sp)
 402a630:	dc000517 	ldw	r16,20(sp)
 402a634:	dec00b04 	addi	sp,sp,44
 402a638:	f800283a 	ret
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
 402a63c:	80c0018b 	ldhu	r3,6(r16)
 402a640:	8100008b 	ldhu	r4,2(r16)
 402a644:	80800003 	ldbu	r2,0(r16)
 402a648:	180a923a 	slli	r5,r3,8
 402a64c:	1806d23a 	srli	r3,r3,8
 402a650:	200c923a 	slli	r6,r4,8
 402a654:	2008d23a 	srli	r4,r4,8
 402a658:	1946b03a 	or	r3,r3,r5
 402a65c:	18c7ffcc 	andi	r3,r3,8191
 402a660:	108003cc 	andi	r2,r2,15
 402a664:	180690fa 	slli	r3,r3,3
 402a668:	1085883a 	add	r2,r2,r2
 402a66c:	2188b03a 	or	r4,r4,r6
 402a670:	1085883a 	add	r2,r2,r2
 402a674:	2089c83a 	sub	r4,r4,r2
 402a678:	1907883a 	add	r3,r3,r4
 402a67c:	90c0040d 	sth	r3,16(r18)
 402a680:	003fb706 	br	402a560 <ip_reasm_process_subsequent_fragments+0x54>
   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
      {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 402a684:	01000084 	movi	r4,2
 402a688:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free (p);
 402a68c:	9809883a 	mov	r4,r19
 402a690:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a694:	01000084 	movi	r4,2
 402a698:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ip_reasm_delete_ire (irep);
 402a69c:	9009883a 	mov	r4,r18
 402a6a0:	4029f300 	call	4029f30 <ip_reasm_delete_ire>
      ++ip_mib.ipReasmFails;
 402a6a4:	00c10134 	movhi	r3,1028
 402a6a8:	18ce0104 	addi	r3,r3,14340
 402a6ac:	18800f17 	ldw	r2,60(r3)
 402a6b0:	10800044 	addi	r2,r2,1
 402a6b4:	18800f15 	stw	r2,60(r3)
 402a6b8:	003fd706 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
      }
   else if (ftype == IP_FF)
      {
      irep->l2_hdr = p->nb_buff;
 402a6bc:	98800117 	ldw	r2,4(r19)
      irep->l3_hdr = (char *) pip;
 402a6c0:	94002015 	stw	r16,128(r18)
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
      }
   else if (ftype == IP_FF)
      {
      irep->l2_hdr = p->nb_buff;
 402a6c4:	90801f15 	stw	r2,124(r18)
 402a6c8:	003fa506 	br	402a560 <ip_reasm_process_subsequent_fragments+0x54>
      rfqp->frag_offset[index] = frag_offset;
      }
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
 402a6cc:	99000217 	ldw	r4,8(r19)
 402a6d0:	21001904 	addi	r4,r4,100
 402a6d4:	213fffcc 	andi	r4,r4,65535
 402a6d8:	40297940 	call	4029794 <ip_reasm_check_mem_useage>
 402a6dc:	1021883a 	mov	r16,r2
 402a6e0:	1000551e 	bne	r2,zero,402a838 <ip_reasm_process_subsequent_fragments+0x32c>
         return rc;
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
 402a6e4:	01001904 	movi	r4,100
 402a6e8:	401cdc80 	call	401cdc8 <npalloc>
      if (new_rfqp == 0)
 402a6ec:	10006a26 	beq	r2,zero,402a898 <ip_reasm_process_subsequent_fragments+0x38c>
         return rc;
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
 402a6f0:	1021883a 	mov	r16,r2
         }
      else
         {
         new_rfqp->bufp[0] = p;
         new_rfqp->frag_offset[0] = frag_offset;
         rfqp->next = new_rfqp;
 402a6f4:	d8c00417 	ldw	r3,16(sp)
         return ENP_RESOURCE;
         }
      else
         {
         new_rfqp->bufp[0] = p;
         new_rfqp->frag_offset[0] = frag_offset;
 402a6f8:	d880028b 	ldhu	r2,10(sp)
         ++ip_mib.ipReasmFails;
         return ENP_RESOURCE;
         }
      else
         {
         new_rfqp->bufp[0] = p;
 402a6fc:	84c00115 	stw	r19,4(r16)
         new_rfqp->frag_offset[0] = frag_offset;
         rfqp->next = new_rfqp;
 402a700:	1c000015 	stw	r16,0(r3)
         return ENP_RESOURCE;
         }
      else
         {
         new_rfqp->bufp[0] = p;
         new_rfqp->frag_offset[0] = frag_offset;
 402a704:	8080110d 	sth	r2,68(r16)
 402a708:	003fb306 	br	402a5d8 <ip_reasm_process_subsequent_fragments+0xcc>

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
      {
      switch (rc2)
 402a70c:	18002926 	beq	r3,zero,402a7b4 <ip_reasm_process_subsequent_fragments+0x2a8>
 402a710:	00800044 	movi	r2,1
 402a714:	18bf9e1e 	bne	r3,r2,402a590 <ip_reasm_process_subsequent_fragments+0x84>
 402a718:	047ffd84 	movi	r17,-10
 402a71c:	003fbe06 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
         {
         if ((rc = ip_reasm_mark_compact_rfq (irep)) != IPREASM_OK)
 402a720:	9009883a 	mov	r4,r18
 402a724:	40298d40 	call	40298d4 <ip_reasm_mark_compact_rfq>
 402a728:	1029883a 	mov	r20,r2
 402a72c:	103fac26 	beq	r2,zero,402a5e0 <ip_reasm_process_subsequent_fragments+0xd4>
            {
            /* an error return is due to a bad IRE pointer, which ip_reasm_mark_compact_rfq () logs */
            LOCK_NET_RESOURCE (FREEQ_RESID);
 402a730:	01000084 	movi	r4,2
 402a734:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free (p);
 402a738:	9809883a 	mov	r4,r19
 402a73c:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a740:	01000084 	movi	r4,2
 402a744:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
            ++ip_mib.ipReasmFails;
 402a748:	00c10134 	movhi	r3,1028
 402a74c:	18ce0104 	addi	r3,r3,14340
 402a750:	18800f17 	ldw	r2,60(r3)
 402a754:	a023883a 	mov	r17,r20
 402a758:	10800044 	addi	r2,r2,1
 402a75c:	18800f15 	stw	r2,60(r3)
 402a760:	003fad06 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
      {
      ++ire_stats.bad_irep;
 402a764:	00c10134 	movhi	r3,1028
 402a768:	18ce1504 	addi	r3,r3,14420
 402a76c:	18800017 	ldw	r2,0(r3)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 402a770:	01000084 	movi	r4,2
      pk_free (p);
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
      ++ip_mib.ipReasmFails;
 402a774:	047ffd84 	movi	r17,-10
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
      {
      ++ire_stats.bad_irep;
 402a778:	10800044 	addi	r2,r2,1
 402a77c:	18800015 	stw	r2,0(r3)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 402a780:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free (p);
 402a784:	9809883a 	mov	r4,r19
 402a788:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a78c:	01000084 	movi	r4,2
 402a790:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 402a794:	00c10134 	movhi	r3,1028
 402a798:	18ce0104 	addi	r3,r3,14340
 402a79c:	18800f17 	ldw	r2,60(r3)
 402a7a0:	10800044 	addi	r2,r2,1
 402a7a4:	18800f15 	stw	r2,60(r3)
 402a7a8:	003f9b06 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
 402a7ac:	0005883a 	mov	r2,zero
 402a7b0:	003f9206 	br	402a5fc <ip_reasm_process_subsequent_fragments+0xf0>

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
      {
      switch (rc2)
 402a7b4:	0023883a 	mov	r17,zero
 402a7b8:	003f9706 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
          * Ensure that we allocate space for the data link header, IP header, 
          * and the payload of the original, unfragmented datagram.  We pick 
          * the data link layer and IP headers from the First Fragment (FF), 
          * but we need to adjust some of the fields in the IP header after 
          * reassembly is complete. */
         pip = (struct ip *) irep->l3_hdr;
 402a7bc:	94002017 	ldw	r16,128(r18)
         LOCK_NET_RESOURCE (FREEQ_RESID);
 402a7c0:	01000084 	movi	r4,2
 402a7c4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         reassy_pkt = pk_alloc (irep->length + (irep->l3_hdr - irep->l2_hdr) + ip_hlen (pip));
 402a7c8:	81000003 	ldbu	r4,0(r16)
 402a7cc:	90802017 	ldw	r2,128(r18)
 402a7d0:	91401f17 	ldw	r5,124(r18)
 402a7d4:	90c0040b 	ldhu	r3,16(r18)
 402a7d8:	210003cc 	andi	r4,r4,15
 402a7dc:	1145c83a 	sub	r2,r2,r5
 402a7e0:	2109883a 	add	r4,r4,r4
 402a7e4:	1887883a 	add	r3,r3,r2
 402a7e8:	2109883a 	add	r4,r4,r4
 402a7ec:	1909883a 	add	r4,r3,r4
 402a7f0:	401bf840 	call	401bf84 <pk_alloc>
 402a7f4:	1021883a 	mov	r16,r2
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a7f8:	01000084 	movi	r4,2
 402a7fc:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         if (reassy_pkt == 0)
 402a800:	80001c26 	beq	r16,zero,402a874 <ip_reasm_process_subsequent_fragments+0x368>
            ++ip_mib.ipReasmFails;
            return ENP_NOBUFFER;
            }
         else
            {
            ip_reasm_copy_queued_fragments_into_reassy_buffer (reassy_pkt, irep);
 402a804:	900b883a 	mov	r5,r18
 402a808:	8009883a 	mov	r4,r16
 402a80c:	402a1340 	call	402a134 <ip_reasm_copy_queued_fragments_into_reassy_buffer>
            /* free the IRE structure (and its constituent elements) */
            ip_reasm_delete_ire (irep);
 402a810:	9009883a 	mov	r4,r18
 402a814:	4029f300 	call	4029f30 <ip_reasm_delete_ire>
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
 402a818:	00c10134 	movhi	r3,1028
 402a81c:	18ce0104 	addi	r3,r3,14340
 402a820:	18800e17 	ldw	r2,56(r3)
            ip_demux (reassy_pkt);
 402a824:	8009883a 	mov	r4,r16
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
 402a828:	10800044 	addi	r2,r2,1
 402a82c:	18800e15 	stw	r2,56(r3)
            ip_demux (reassy_pkt);
 402a830:	402a91c0 	call	402a91c <ip_demux>
 402a834:	003f7806 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
         {
         LOCK_NET_RESOURCE (FREEQ_RESID);
 402a838:	01000084 	movi	r4,2
 402a83c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free (p);
 402a840:	9809883a 	mov	r4,r19
 402a844:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a848:	01000084 	movi	r4,2
 402a84c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 402a850:	9009883a 	mov	r4,r18
 402a854:	4029f300 	call	4029f30 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 402a858:	00c10134 	movhi	r3,1028
 402a85c:	18ce0104 	addi	r3,r3,14340
 402a860:	18800f17 	ldw	r2,60(r3)
 402a864:	8023883a 	mov	r17,r16
 402a868:	10800044 	addi	r2,r2,1
 402a86c:	18800f15 	stw	r2,60(r3)
 402a870:	003f6906 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
         if (reassy_pkt == 0)
            {
            /* the following call will delete all queued fragments, including
             * the currently received one */
            ip_reasm_delete_ire (irep);
 402a874:	9009883a 	mov	r4,r18
 402a878:	4029f300 	call	4029f30 <ip_reasm_delete_ire>
            ++ip_mib.ipReasmFails;
 402a87c:	00c10134 	movhi	r3,1028
 402a880:	18ce0104 	addi	r3,r3,14340
 402a884:	18800f17 	ldw	r2,60(r3)
 402a888:	047ffac4 	movi	r17,-21
 402a88c:	10800044 	addi	r2,r2,1
 402a890:	18800f15 	stw	r2,60(r3)
 402a894:	003f6006 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
      if (new_rfqp == 0)
         {
         /* can't store the existing fragment, so we'll drop it */
         LOCK_NET_RESOURCE (FREEQ_RESID);
 402a898:	01000084 	movi	r4,2
 402a89c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free (p);
 402a8a0:	9809883a 	mov	r4,r19
 402a8a4:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 402a8a8:	01000084 	movi	r4,2
 402a8ac:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 402a8b0:	9009883a 	mov	r4,r18
 402a8b4:	4029f300 	call	4029f30 <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 402a8b8:	00c10134 	movhi	r3,1028
 402a8bc:	18ce0104 	addi	r3,r3,14340
 402a8c0:	18800f17 	ldw	r2,60(r3)
 402a8c4:	047ffa84 	movi	r17,-22
 402a8c8:	10800044 	addi	r2,r2,1
 402a8cc:	18800f15 	stw	r2,60(r3)
 402a8d0:	003f5106 	br	402a618 <ip_reasm_process_subsequent_fragments+0x10c>

0402a8d4 <ip_reassm>:
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
 402a8d4:	defffe04 	addi	sp,sp,-8
 402a8d8:	dc000015 	stw	r16,0(sp)
 402a8dc:	2021883a 	mov	r16,r4

   pip = ip_head(p);

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
 402a8e0:	21000317 	ldw	r4,12(r4)
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
 402a8e4:	dfc00115 	stw	ra,4(sp)

   pip = ip_head(p);

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
 402a8e8:	40296f40 	call	40296f4 <ip_reasm_match_frag_with_ire>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
 402a8ec:	100b883a 	mov	r5,r2
   irep = ip_reasm_match_frag_with_ire (pip);

   if (!irep)
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
 402a8f0:	8009883a 	mov	r4,r16

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);

   if (!irep)
 402a8f4:	10000526 	beq	r2,zero,402a90c <ip_reassm+0x38>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
 402a8f8:	8009883a 	mov	r4,r16
         return rc2;
      }
   }

   return IPREASM_OK;
}
 402a8fc:	dfc00117 	ldw	ra,4(sp)
 402a900:	dc000017 	ldw	r16,0(sp)
 402a904:	dec00204 	addi	sp,sp,8
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
 402a908:	402a50c1 	jmpi	402a50c <ip_reasm_process_subsequent_fragments>
         return rc2;
      }
   }

   return IPREASM_OK;
}
 402a90c:	dfc00117 	ldw	ra,4(sp)
 402a910:	dc000017 	ldw	r16,0(sp)
 402a914:	dec00204 	addi	sp,sp,8
   irep = ip_reasm_match_frag_with_ire (pip);

   if (!irep)
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
 402a918:	402a3341 	jmpi	402a334 <ip_reasm_process_first_fragment>

0402a91c <ip_demux>:
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
 402a91c:	defff904 	addi	sp,sp,-28
 402a920:	dc000215 	stw	r16,8(sp)
   int   err;

   /* The packet is verified; the header is correct. Now we have
    * to demultiplex it among our internet connections.
    */
   pip = (struct ip *)(p->nb_prot);
 402a924:	24000317 	ldw	r16,12(r4)
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
 402a928:	dc400315 	stw	r17,12(sp)
 402a92c:	dfc00615 	stw	ra,24(sp)
 402a930:	dcc00515 	stw	r19,20(sp)
 402a934:	dc800415 	stw	r18,16(sp)
    */
   pip = (struct ip *)(p->nb_prot);

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
 402a938:	80c00003 	ldbu	r3,0(r16)
 402a93c:	00801144 	movi	r2,69
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
 402a940:	2023883a 	mov	r17,r4
    */
   pip = (struct ip *)(p->nb_prot);

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
 402a944:	19403fcc 	andi	r5,r3,255
 402a948:	28800426 	beq	r5,r2,402a95c <ip_demux+0x40>
   {
      if((pip->ip_ver_ihl < 0x45) ||
 402a94c:	18bfeec4 	addi	r2,r3,-69
 402a950:	10803fcc 	andi	r2,r2,255
 402a954:	00c00084 	movi	r3,2
 402a958:	18808a36 	bltu	r3,r2,402ab84 <ip_demux+0x268>
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402a95c:	04810134 	movhi	r18,1028
 402a960:	94a90e04 	addi	r18,r18,-23496
 402a964:	90800017 	ldw	r2,0(r18)

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
 402a968:	81000317 	ldw	r4,12(r16)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402a96c:	00c18004 	movi	r3,1536
 402a970:	1081800c 	andi	r2,r2,1536

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
 402a974:	89000715 	stw	r4,28(r17)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402a978:	10c05226 	beq	r2,r3,402aac4 <ip_demux+0x1a8>
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
      if (NDEBUG & DUMP) ip_dump(p);
   }
#endif

   switch (pip->ip_prot)
 402a97c:	80c00243 	ldbu	r3,9(r16)
 402a980:	00800084 	movi	r2,2
 402a984:	18804626 	beq	r3,r2,402aaa0 <ip_demux+0x184>
 402a988:	10c03836 	bltu	r2,r3,402aa6c <ip_demux+0x150>
 402a98c:	00800044 	movi	r2,1
 402a990:	18805f26 	beq	r3,r2,402ab10 <ip_demux+0x1f4>
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
 402a994:	04c10134 	movhi	r19,1028
 402a998:	9cce0104 	addi	r19,r19,14340
 402a99c:	98800817 	ldw	r2,32(r19)
      err = ip_raw_input(p);
 402a9a0:	8809883a 	mov	r4,r17
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
 402a9a4:	10800044 	addi	r2,r2,1
 402a9a8:	98800815 	stw	r2,32(r19)
      err = ip_raw_input(p);
 402a9ac:	402b4b00 	call	402b4b0 <ip_raw_input>
 402a9b0:	1007883a 	mov	r3,r2
#endif /* IP_RAW */
   }

   IN_PROFILER(PF_IP, PF_EXIT);

   if(err != ENP_PARAM)
 402a9b4:	00bffd84 	movi	r2,-10
 402a9b8:	1880241e 	bne	r3,r2,402aa4c <ip_demux+0x130>

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 402a9bc:	81000417 	ldw	r4,16(r16)
 402a9c0:	00bfffc4 	movi	r2,-1
 402a9c4:	20801726 	beq	r4,r2,402aa24 <ip_demux+0x108>
 402a9c8:	2004963a 	slli	r2,r4,24
 402a9cc:	00f80034 	movhi	r3,57344
 402a9d0:	10bc002c 	andhi	r2,r2,61440
 402a9d4:	10c01326 	beq	r2,r3,402aa24 <ip_demux+0x108>
 402a9d8:	8a000617 	ldw	r8,24(r17)
 402a9dc:	40800e17 	ldw	r2,56(r8)
 402a9e0:	20801026 	beq	r4,r2,402aa24 <ip_demux+0x108>
 402a9e4:	40800f17 	ldw	r2,60(r8)
 402a9e8:	20800e26 	beq	r4,r2,402aa24 <ip_demux+0x108>
 402a9ec:	40c01017 	ldw	r3,64(r8)
 402a9f0:	20c00c26 	beq	r4,r3,402aa24 <ip_demux+0x108>
 402a9f4:	40800a17 	ldw	r2,40(r8)
 402a9f8:	18800a26 	beq	r3,r2,402aa24 <ip_demux+0x108>
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402a9fc:	90800017 	ldw	r2,0(r18)
 402aa00:	00c18004 	movi	r3,1536
 402aa04:	1081800c 	andi	r2,r2,1536
 402aa08:	10c05326 	beq	r2,r3,402ab58 <ip_demux+0x23c>
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
         if (NDEBUG & DUMP) ip_dump(p);
      }
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
 402aa0c:	81000317 	ldw	r4,12(r16)
 402aa10:	41400a17 	ldw	r5,40(r8)
 402aa14:	800d883a 	mov	r6,r16
 402aa18:	01c00084 	movi	r7,2
 402aa1c:	da000015 	stw	r8,0(sp)
 402aa20:	402fcc40 	call	402fcc4 <icmp_destun>
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
 402aa24:	98800617 	ldw	r2,24(r19)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402aa28:	01000084 	movi	r4,2
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
 402aa2c:	10800044 	addi	r2,r2,1
 402aa30:	98800615 	stw	r2,24(r19)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402aa34:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 402aa38:	8809883a 	mov	r4,r17
 402aa3c:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402aa40:	01000084 	movi	r4,2
 402aa44:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402aa48:	00c00084 	movi	r3,2
   return ENP_NOT_MINE;
}
 402aa4c:	1805883a 	mov	r2,r3
 402aa50:	dfc00617 	ldw	ra,24(sp)
 402aa54:	dcc00517 	ldw	r19,20(sp)
 402aa58:	dc800417 	ldw	r18,16(sp)
 402aa5c:	dc400317 	ldw	r17,12(sp)
 402aa60:	dc000217 	ldw	r16,8(sp)
 402aa64:	dec00704 	addi	sp,sp,28
 402aa68:	f800283a 	ret
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
      if (NDEBUG & DUMP) ip_dump(p);
   }
#endif

   switch (pip->ip_prot)
 402aa6c:	00800184 	movi	r2,6
 402aa70:	18803026 	beq	r3,r2,402ab34 <ip_demux+0x218>
 402aa74:	00800444 	movi	r2,17
 402aa78:	18bfc61e 	bne	r3,r2,402a994 <ip_demux+0x78>
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
 402aa7c:	04c10134 	movhi	r19,1028
 402aa80:	9cce0104 	addi	r19,r19,14340
 402aa84:	98800817 	ldw	r2,32(r19)
      err = udpdemux(p);
 402aa88:	8809883a 	mov	r4,r17
#endif

   switch (pip->ip_prot)
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
 402aa8c:	10800044 	addi	r2,r2,1
 402aa90:	98800815 	stw	r2,32(r19)
      err = udpdemux(p);
 402aa94:	402bf9c0 	call	402bf9c <udpdemux>
 402aa98:	1007883a 	mov	r3,r2
 402aa9c:	003fc506 	br	402a9b4 <ip_demux+0x98>
      ip_mib.ipInDelivers++;
      err = icmprcv(p);
      break;
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
 402aaa0:	04c10134 	movhi	r19,1028
 402aaa4:	9cce0104 	addi	r19,r19,14340
 402aaa8:	98800817 	ldw	r2,32(r19)
      err = igmp_input(p);
 402aaac:	8809883a 	mov	r4,r17
      ip_mib.ipInDelivers++;
      err = icmprcv(p);
      break;
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
 402aab0:	10800044 	addi	r2,r2,1
 402aab4:	98800815 	stw	r2,32(r19)
      err = igmp_input(p);
 402aab8:	40191d80 	call	40191d8 <igmp_input>
 402aabc:	1007883a 	mov	r3,r2
 402aac0:	003fbc06 	br	402a9b4 <ip_demux+0x98>
   p->fhost = pip->ip_src;

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 402aac4:	81800317 	ldw	r6,12(r16)
 402aac8:	81400243 	ldbu	r5,9(r16)
 402aacc:	010100f4 	movhi	r4,1027
 402aad0:	21169a04 	addi	r4,r4,23144
 402aad4:	300ed23a 	srli	r7,r6,8
 402aad8:	3004d43a 	srli	r2,r6,16
 402aadc:	3006d63a 	srli	r3,r6,24
 402aae0:	39c03fcc 	andi	r7,r7,255
 402aae4:	10803fcc 	andi	r2,r2,255
 402aae8:	31803fcc 	andi	r6,r6,255
 402aaec:	d8c00115 	stw	r3,4(sp)
 402aaf0:	d8800015 	stw	r2,0(sp)
 402aaf4:	4002ed40 	call	4002ed4 <printf>
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
      if (NDEBUG & DUMP) ip_dump(p);
 402aaf8:	90c00017 	ldw	r3,0(r18)
 402aafc:	18c0008c 	andi	r3,r3,2
 402ab00:	183f9e26 	beq	r3,zero,402a97c <ip_demux+0x60>
 402ab04:	8809883a 	mov	r4,r17
 402ab08:	40285680 	call	4028568 <ip_dump>
 402ab0c:	003f9b06 	br	402a97c <ip_demux+0x60>
   case UDP_PROT:
      ip_mib.ipInDelivers++;
      err = udpdemux(p);
      break;
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
 402ab10:	04c10134 	movhi	r19,1028
 402ab14:	9cce0104 	addi	r19,r19,14340
 402ab18:	98800817 	ldw	r2,32(r19)
      err = icmprcv(p);
 402ab1c:	8809883a 	mov	r4,r17
   case UDP_PROT:
      ip_mib.ipInDelivers++;
      err = udpdemux(p);
      break;
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
 402ab20:	10c5883a 	add	r2,r2,r3
 402ab24:	98800815 	stw	r2,32(r19)
      err = icmprcv(p);
 402ab28:	402ff700 	call	402ff70 <icmprcv>
 402ab2c:	1007883a 	mov	r3,r2
 402ab30:	003fa006 	br	402a9b4 <ip_demux+0x98>
      err = igmp_input(p);
      break;
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
 402ab34:	04c10134 	movhi	r19,1028
 402ab38:	9cce0104 	addi	r19,r19,14340
 402ab3c:	98800817 	ldw	r2,32(r19)
      err = tcp_rcv(p);
 402ab40:	8809883a 	mov	r4,r17
      err = igmp_input(p);
      break;
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
 402ab44:	10800044 	addi	r2,r2,1
 402ab48:	98800815 	stw	r2,32(r19)
      err = tcp_rcv(p);
 402ab4c:	401dc000 	call	401dc00 <tcp_rcv>
 402ab50:	1007883a 	mov	r3,r2
 402ab54:	003f9706 	br	402a9b4 <ip_demux+0x98>
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
 402ab58:	81400243 	ldbu	r5,9(r16)
 402ab5c:	010100f4 	movhi	r4,1027
 402ab60:	2116a404 	addi	r4,r4,23184
 402ab64:	4002ed40 	call	4002ed4 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 402ab68:	00c10134 	movhi	r3,1028
 402ab6c:	18e90e04 	addi	r3,r3,-23496
 402ab70:	18800017 	ldw	r2,0(r3)
 402ab74:	1080008c 	andi	r2,r2,2
 402ab78:	1000071e 	bne	r2,zero,402ab98 <ip_demux+0x27c>
 402ab7c:	8a000617 	ldw	r8,24(r17)
 402ab80:	003fa206 	br	402aa0c <ip_demux+0xf0>
   if(pip->ip_ver_ihl != 0x45)
   {
      if((pip->ip_ver_ihl < 0x45) ||
         (pip->ip_ver_ihl > 0x47))
      {
         dprintf("ip_demux: bad IP type 0x%x\n", pip->ip_ver_ihl);
 402ab84:	010100f4 	movhi	r4,1027
 402ab88:	21169304 	addi	r4,r4,23116
 402ab8c:	4002ed40 	call	4002ed4 <printf>
 402ab90:	00fffd44 	movi	r3,-11
 402ab94:	003fad06 	br	402aa4c <ip_demux+0x130>

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
         if (NDEBUG & DUMP) ip_dump(p);
 402ab98:	8809883a 	mov	r4,r17
 402ab9c:	40285680 	call	4028568 <ip_dump>
 402aba0:	8a000617 	ldw	r8,24(r17)
 402aba4:	003f9906 	br	402aa0c <ip_demux+0xf0>

0402aba8 <ip_rcv_phase2>:
   return rcvrc;
}


int ip_rcv_phase2 (PACKET p)
{
 402aba8:	defff804 	addi	sp,sp,-32
 402abac:	dc000215 	stw	r16,8(sp)

   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
 402abb0:	24000317 	ldw	r16,12(r4)
   return rcvrc;
}


int ip_rcv_phase2 (PACKET p)
{
 402abb4:	dc400315 	stw	r17,12(sp)
   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
   nt = p->net;      /* which interface it came in on */
 402abb8:	21400617 	ldw	r5,24(r4)
   return rcvrc;
}


int ip_rcv_phase2 (PACKET p)
{
 402abbc:	2023883a 	mov	r17,r4
   pip = ip_head(p);
   nt = p->net;      /* which interface it came in on */

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 402abc0:	81000417 	ldw	r4,16(r16)
 402abc4:	00b80034 	movhi	r2,57344
   return rcvrc;
}


int ip_rcv_phase2 (PACKET p)
{
 402abc8:	dfc00715 	stw	ra,28(sp)
   pip = ip_head(p);
   nt = p->net;      /* which interface it came in on */

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 402abcc:	22003fcc 	andi	r8,r4,255
 402abd0:	4006963a 	slli	r3,r8,24
   return rcvrc;
}


int ip_rcv_phase2 (PACKET p)
{
 402abd4:	dd000615 	stw	r20,24(sp)
 402abd8:	dcc00515 	stw	r19,20(sp)
   pip = ip_head(p);
   nt = p->net;      /* which interface it came in on */

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 402abdc:	18fc002c 	andhi	r3,r3,61440
   return rcvrc;
}


int ip_rcv_phase2 (PACKET p)
{
 402abe0:	dc800415 	stw	r18,16(sp)
   pip = ip_head(p);
   nt = p->net;      /* which interface it came in on */

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 402abe4:	2012d63a 	srli	r9,r4,24
 402abe8:	200cd23a 	srli	r6,r4,8
 402abec:	18806326 	beq	r3,r2,402ad7c <ip_rcv_phase2+0x1d4>
      else
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
 402abf0:	28c00a17 	ldw	r3,40(r5)
 402abf4:	20c03c26 	beq	r4,r3,402ace8 <ip_rcv_phase2+0x140>
 402abf8:	00bfffc4 	movi	r2,-1
 402abfc:	20803a26 	beq	r4,r2,402ace8 <ip_rcv_phase2+0x140>
 402ac00:	28800e17 	ldw	r2,56(r5)
 402ac04:	20803826 	beq	r4,r2,402ace8 <ip_rcv_phase2+0x140>
 402ac08:	28800f17 	ldw	r2,60(r5)
 402ac0c:	20803626 	beq	r4,r2,402ace8 <ip_rcv_phase2+0x140>
 402ac10:	28801017 	ldw	r2,64(r5)
 402ac14:	20803426 	beq	r4,r2,402ace8 <ip_rcv_phase2+0x140>
 402ac18:	28800c17 	ldw	r2,48(r5)
 402ac1c:	0084303a 	nor	r2,zero,r2
 402ac20:	1884703a 	and	r2,r3,r2
 402ac24:	10003026 	beq	r2,zero,402ace8 <ip_rcv_phase2+0x140>
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402ac28:	00810134 	movhi	r2,1028
 402ac2c:	10a90e04 	addi	r2,r2,-23496
 402ac30:	10c00017 	ldw	r3,0(r2)
 402ac34:	00818004 	movi	r2,1536
 402ac38:	18c1800c 	andi	r3,r3,1536
 402ac3c:	18807326 	beq	r3,r2,402ae0c <ip_rcv_phase2+0x264>

#ifdef IP_ROUTING    /* if multi-homed router, try to route */
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
 402ac40:	04c10134 	movhi	r19,1028
 402ac44:	9cce0104 	addi	r19,r19,14340
 402ac48:	9c800017 	ldw	r18,0(r19)
 402ac4c:	05000084 	movi	r20,2
 402ac50:	9500a626 	beq	r18,r20,402aeec <ip_rcv_phase2+0x344>
         NET outnet;
#ifdef IP_FRAGMENTS
         int err;
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
 402ac54:	98800517 	ldw	r2,20(r19)
 402ac58:	10800044 	addi	r2,r2,1
 402ac5c:	98800515 	stw	r2,20(r19)
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
 402ac60:	80c00203 	ldbu	r3,8(r16)
 402ac64:	00800044 	movi	r2,1
 402ac68:	10c08e2e 	bgeu	r2,r3,402aea4 <ip_rcv_phase2+0x2fc>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
 402ac6c:	81000417 	ldw	r4,16(r16)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
 402ac70:	d9400104 	addi	r5,sp,4
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
 402ac74:	89000715 	stw	r4,28(r17)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
 402ac78:	40282e00 	call	40282e0 <iproute>
 402ac7c:	1011883a 	mov	r8,r2
 402ac80:	1000a526 	beq	r2,zero,402af18 <ip_rcv_phase2+0x370>
         /* Check to see if the packet was is addressed to one of our IP
          * addresses other than the interface it was received on. If so,
          * routing should have returned that interface and we can trap this
          * situation by checking the interfaces IP address.
          */
         if(pip->ip_dest == outnet->n_ipaddr)
 402ac84:	81000417 	ldw	r4,16(r16)
 402ac88:	11400a17 	ldw	r5,40(r2)
 402ac8c:	21401626 	beq	r4,r5,402ace8 <ip_rcv_phase2+0x140>
            goto ours;

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
 402ac90:	10800e17 	ldw	r2,56(r2)
 402ac94:	20801426 	beq	r4,r2,402ace8 <ip_rcv_phase2+0x140>
 402ac98:	88800617 	ldw	r2,24(r17)
 402ac9c:	10c00e17 	ldw	r3,56(r2)
 402aca0:	20c01126 	beq	r4,r3,402ace8 <ip_rcv_phase2+0x140>
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
 402aca4:	88800417 	ldw	r2,16(r17)
 402aca8:	40c00817 	ldw	r3,32(r8)
 402acac:	41000917 	ldw	r4,36(r8)
         {
            goto ours;            
         }

         /* Routed OK, prepare to send */
         p->net = outnet;           /* set iface to send on */
 402acb0:	8a000615 	stw	r8,24(r17)
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
 402acb4:	10c5883a 	add	r2,r2,r3
 402acb8:	20805d2e 	bgeu	r4,r2,402ae30 <ip_rcv_phase2+0x288>
         {
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
 402acbc:	8080018b 	ldhu	r2,6(r16)
 402acc0:	1004923a 	slli	r2,r2,8
 402acc4:	1090000c 	andi	r2,r2,16384
 402acc8:	1000661e 	bne	r2,zero,402ae64 <ip_rcv_phase2+0x2bc>
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
 402accc:	80800203 	ldbu	r2,8(r16)
            err = ip_fragment(p, firsthop);
 402acd0:	8809883a 	mov	r4,r17
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
 402acd4:	10bfffc4 	addi	r2,r2,-1
 402acd8:	80800205 	stb	r2,8(r16)
            err = ip_fragment(p, firsthop);
 402acdc:	d9400117 	ldw	r5,4(sp)
 402ace0:	40289d80 	call	40289d8 <ip_fragment>
 402ace4:	00001306 	br	402ad34 <ip_rcv_phase2+0x18c>
ours:
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
 402ace8:	8080018b 	ldhu	r2,6(r16)
 402acec:	1006923a 	slli	r3,r2,8
 402acf0:	1004d23a 	srli	r2,r2,8
 402acf4:	10c4b03a 	or	r2,r2,r3
 402acf8:	108fffcc 	andi	r2,r2,16383
 402acfc:	10001526 	beq	r2,zero,402ad54 <ip_rcv_phase2+0x1ac>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402ad00:	00810134 	movhi	r2,1028
 402ad04:	10a90e04 	addi	r2,r2,-23496
 402ad08:	10c00017 	ldw	r3,0(r2)
 402ad0c:	00818004 	movi	r2,1536
 402ad10:	18c1800c 	andi	r3,r3,1536
 402ad14:	18802f26 	beq	r3,r2,402add4 <ip_rcv_phase2+0x22c>
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
          PUSH_IPADDR(pip->ip_src));
         ip_dump(p);
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
 402ad18:	00c10134 	movhi	r3,1028
 402ad1c:	18ce0104 	addi	r3,r3,14340
 402ad20:	18800d17 	ldw	r2,52(r3)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
 402ad24:	8809883a 	mov	r4,r17
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
          PUSH_IPADDR(pip->ip_src));
         ip_dump(p);
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
 402ad28:	10800044 	addi	r2,r2,1
 402ad2c:	18800d15 	stw	r2,52(r3)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
 402ad30:	402a8d40 	call	402a8d4 <ip_reassm>
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
}
 402ad34:	dfc00717 	ldw	ra,28(sp)
 402ad38:	dd000617 	ldw	r20,24(sp)
 402ad3c:	dcc00517 	ldw	r19,20(sp)
 402ad40:	dc800417 	ldw	r18,16(sp)
 402ad44:	dc400317 	ldw	r17,12(sp)
 402ad48:	dc000217 	ldw	r16,8(sp)
 402ad4c:	dec00804 	addi	sp,sp,32
 402ad50:	f800283a 	ret
   {
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
 402ad54:	8809883a 	mov	r4,r17
 402ad58:	402a91c0 	call	402a91c <ip_demux>
}
 402ad5c:	dfc00717 	ldw	ra,28(sp)
 402ad60:	dd000617 	ldw	r20,24(sp)
 402ad64:	dcc00517 	ldw	r19,20(sp)
 402ad68:	dc800417 	ldw	r18,16(sp)
 402ad6c:	dc400317 	ldw	r17,12(sp)
 402ad70:	dc000217 	ldw	r16,8(sp)
 402ad74:	dec00804 	addi	sp,sp,32
 402ad78:	f800283a 	ret
      struct in_multi * inm;
      /*
       * See if we belong to the destination multicast group on the
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
 402ad7c:	402b1000 	call	402b100 <lookup_mcast>
      if (inm == NULL) 
 402ad80:	103fd91e 	bne	r2,zero,402ace8 <ip_rcv_phase2+0x140>
      {
         ip_mib.ipOutNoRoutes++;
 402ad84:	00c10134 	movhi	r3,1028
 402ad88:	18ce0104 	addi	r3,r3,14340
 402ad8c:	18800b17 	ldw	r2,44(r3)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 402ad90:	01000084 	movi	r4,2
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
      if (inm == NULL) 
      {
         ip_mib.ipOutNoRoutes++;
 402ad94:	10800044 	addi	r2,r2,1
 402ad98:	18800b15 	stw	r2,44(r3)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 402ad9c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(p);
 402ada0:	8809883a 	mov	r4,r17
 402ada4:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402ada8:	01000084 	movi	r4,2
 402adac:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402adb0:	00800084 	movi	r2,2
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
}
 402adb4:	dfc00717 	ldw	ra,28(sp)
 402adb8:	dd000617 	ldw	r20,24(sp)
 402adbc:	dcc00517 	ldw	r19,20(sp)
 402adc0:	dc800417 	ldw	r18,16(sp)
 402adc4:	dc400317 	ldw	r17,12(sp)
 402adc8:	dc000217 	ldw	r16,8(sp)
 402adcc:	dec00804 	addi	sp,sp,32
 402add0:	f800283a 	ret
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 402add4:	81400317 	ldw	r5,12(r16)
 402add8:	010100f4 	movhi	r4,1027
 402addc:	2116b804 	addi	r4,r4,23264
 402ade0:	280cd23a 	srli	r6,r5,8
 402ade4:	280ed43a 	srli	r7,r5,16
 402ade8:	2804d63a 	srli	r2,r5,24
 402adec:	31803fcc 	andi	r6,r6,255
 402adf0:	29403fcc 	andi	r5,r5,255
 402adf4:	39c03fcc 	andi	r7,r7,255
 402adf8:	d8800015 	stw	r2,0(sp)
 402adfc:	4002ed40 	call	4002ed4 <printf>
          PUSH_IPADDR(pip->ip_src));
         ip_dump(p);
 402ae00:	8809883a 	mov	r4,r17
 402ae04:	40285680 	call	4028568 <ip_dump>
 402ae08:	003fc306 	br	402ad18 <ip_rcv_phase2+0x170>
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 402ae0c:	200ed43a 	srli	r7,r4,16
 402ae10:	400b883a 	mov	r5,r8
 402ae14:	31803fcc 	andi	r6,r6,255
 402ae18:	39c03fcc 	andi	r7,r7,255
 402ae1c:	010100f4 	movhi	r4,1027
 402ae20:	2116ac04 	addi	r4,r4,23216
 402ae24:	da400015 	stw	r9,0(sp)
 402ae28:	4002ed40 	call	4002ed4 <printf>
 402ae2c:	003f8406 	br	402ac40 <ip_rcv_phase2+0x98>
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
 402ae30:	80800203 	ldbu	r2,8(r16)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
 402ae34:	8009883a 	mov	r4,r16
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
 402ae38:	8000028d 	sth	zero,10(r16)
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
 402ae3c:	10bfffc4 	addi	r2,r2,-1
 402ae40:	80800205 	stb	r2,8(r16)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
 402ae44:	01400284 	movi	r5,10
 402ae48:	40199b00 	call	40199b0 <cksum>
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
 402ae4c:	d9400117 	ldw	r5,4(sp)
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
 402ae50:	0084303a 	nor	r2,zero,r2
 402ae54:	8080028d 	sth	r2,10(r16)
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
 402ae58:	8809883a 	mov	r4,r17
 402ae5c:	4017d640 	call	4017d64 <ip2mac>
 402ae60:	003fb406 	br	402ad34 <ip_rcv_phase2+0x18c>
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 402ae64:	81000317 	ldw	r4,12(r16)
 402ae68:	800d883a 	mov	r6,r16
 402ae6c:	01c00104 	movi	r7,4
 402ae70:	da000015 	stw	r8,0(sp)
 402ae74:	402fcc40 	call	402fcc4 <icmp_destun>
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
 402ae78:	98801117 	ldw	r2,68(r19)
               LOCK_NET_RESOURCE(FREEQ_RESID);
 402ae7c:	a009883a 	mov	r4,r20
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
 402ae80:	10800044 	addi	r2,r2,1
 402ae84:	98801115 	stw	r2,68(r19)
               LOCK_NET_RESOURCE(FREEQ_RESID);
 402ae88:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
               pk_free(p);
 402ae8c:	8809883a 	mov	r4,r17
 402ae90:	401bf0c0 	call	401bf0c <pk_free>
               UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402ae94:	a009883a 	mov	r4,r20
 402ae98:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402ae9c:	00bffd44 	movi	r2,-11
 402aea0:	003fa406 	br	402ad34 <ip_rcv_phase2+0x18c>
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 402aea4:	98800a17 	ldw	r2,40(r19)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
 402aea8:	88c00617 	ldw	r3,24(r17)
 402aeac:	800d883a 	mov	r6,r16
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 402aeb0:	10800044 	addi	r2,r2,1
 402aeb4:	98800a15 	stw	r2,40(r19)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
 402aeb8:	81000317 	ldw	r4,12(r16)
 402aebc:	19400a17 	ldw	r5,40(r3)
 402aec0:	01c2c004 	movi	r7,2816
 402aec4:	d8c00015 	stw	r3,0(sp)
 402aec8:	402fcc40 	call	402fcc4 <icmp_destun>
#endif   /* FULL_ICMP */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 402aecc:	a009883a 	mov	r4,r20

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 402aed0:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
            pk_free(p);
 402aed4:	8809883a 	mov	r4,r17
 402aed8:	401bf0c0 	call	401bf0c <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402aedc:	a009883a 	mov	r4,r20
 402aee0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402aee4:	00bff7c4 	movi	r2,-33
 402aee8:	003f9206 	br	402ad34 <ip_rcv_phase2+0x18c>
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 402aeec:	98800a17 	ldw	r2,40(r19)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 402aef0:	9009883a 	mov	r4,r18
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 402aef4:	10800044 	addi	r2,r2,1
 402aef8:	98800a15 	stw	r2,40(r19)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 402aefc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
         pk_free(p);
 402af00:	8809883a 	mov	r4,r17
 402af04:	401bf0c0 	call	401bf0c <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402af08:	9009883a 	mov	r4,r18
 402af0c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402af10:	00bff7c4 	movi	r2,-33
 402af14:	003f8706 	br	402ad34 <ip_rcv_phase2+0x18c>
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
 402af18:	98800b17 	ldw	r2,44(r19)
            LOCK_NET_RESOURCE(FREEQ_RESID);
 402af1c:	a009883a 	mov	r4,r20
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
 402af20:	10800044 	addi	r2,r2,1
 402af24:	98800b15 	stw	r2,44(r19)
 402af28:	003fe906 	br	402aed0 <ip_rcv_phase2+0x328>

0402af2c <ip_rcv>:
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
 402af2c:	defff904 	addi	sp,sp,-28
 402af30:	dd000415 	stw	r20,16(sp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402af34:	05010134 	movhi	r20,1028
 402af38:	a5290e04 	addi	r20,r20,-23496
 402af3c:	a0800017 	ldw	r2,0(r20)
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
 402af40:	dd400515 	stw	r21,20(sp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402af44:	05418004 	movi	r21,1536
 402af48:	1544703a 	and	r2,r2,r21
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
 402af4c:	dc800215 	stw	r18,8(sp)
 402af50:	dfc00615 	stw	ra,24(sp)
 402af54:	dcc00315 	stw	r19,12(sp)
 402af58:	dc400115 	stw	r17,4(sp)
 402af5c:	dc000015 	stw	r16,0(sp)
 402af60:	2025883a 	mov	r18,r4
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402af64:	15404c26 	beq	r2,r21,402b098 <ip_rcv+0x16c>

   IN_PROFILER(PF_IP, PF_ENTRY);

   nt = p->net;      /* which interface it came in on */
   ip_mib.ipInReceives++;
   pip = ip_head(p);
 402af68:	94400317 	ldw	r17,12(r18)
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   nt = p->net;      /* which interface it came in on */
   ip_mib.ipInReceives++;
 402af6c:	04c10134 	movhi	r19,1028
 402af70:	9cce0104 	addi	r19,r19,14340
 402af74:	99000217 	ldw	r4,8(r19)
   pip = ip_head(p);

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
 402af78:	88c0008b 	ldhu	r3,2(r17)
 402af7c:	91400417 	ldw	r5,16(r18)
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   nt = p->net;      /* which interface it came in on */
   ip_mib.ipInReceives++;
 402af80:	21000044 	addi	r4,r4,1
   pip = ip_head(p);

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
 402af84:	1804923a 	slli	r2,r3,8
 402af88:	1806d23a 	srli	r3,r3,8
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   nt = p->net;      /* which interface it came in on */
   ip_mib.ipInReceives++;
 402af8c:	99000215 	stw	r4,8(r19)
   pip = ip_head(p);

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
 402af90:	10bfc00c 	andi	r2,r2,65280
 402af94:	1886b03a 	or	r3,r3,r2
 402af98:	28c04836 	bltu	r5,r3,402b0bc <ip_rcv+0x190>
      return(ENP_BAD_HEADER);
   }

   /* use length from IP header; MAC value may be padded */
   len = htons(pip->ip_len);
   p->nb_plen = len;       /* fix pkt len */
 402af9c:	90c00415 	stw	r3,16(r18)

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
 402afa0:	89400003 	ldbu	r5,0(r17)
 402afa4:	00800104 	movi	r2,4
 402afa8:	2806d13a 	srli	r3,r5,4
 402afac:	1880171e 	bne	r3,r2,402b00c <ip_rcv+0xe0>
   }

   csum = pip->ip_chksum;
   pip->ip_chksum = 0;
   hdrlen = ip_hlen(pip);
   tempsum = ~cksum(pip, hdrlen >> 1);
 402afb0:	294003cc 	andi	r5,r5,15
 402afb4:	294b883a 	add	r5,r5,r5
 402afb8:	294b883a 	add	r5,r5,r5
 402afbc:	280ad07a 	srli	r5,r5,1
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
   }

   csum = pip->ip_chksum;
 402afc0:	8c00028b 	ldhu	r16,10(r17)
   pip->ip_chksum = 0;
   hdrlen = ip_hlen(pip);
   tempsum = ~cksum(pip, hdrlen >> 1);
 402afc4:	8809883a 	mov	r4,r17
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
   }

   csum = pip->ip_chksum;
   pip->ip_chksum = 0;
 402afc8:	8800028d 	sth	zero,10(r17)
   hdrlen = ip_hlen(pip);
   tempsum = ~cksum(pip, hdrlen >> 1);
 402afcc:	40199b00 	call	40199b0 <cksum>

   if (csum != tempsum)
 402afd0:	0084303a 	nor	r2,zero,r2
 402afd4:	10bfffcc 	andi	r2,r2,65535
 402afd8:	80ffffcc 	andi	r3,r16,65535
 402afdc:	1880211e 	bne	r3,r2,402b064 <ip_rcv+0x138>

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
 402afe0:	9009883a 	mov	r4,r18
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
   }

   pip->ip_chksum = csum;
 402afe4:	8c00028d 	sth	r16,10(r17)
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
}
 402afe8:	dfc00617 	ldw	ra,24(sp)
 402afec:	dd400517 	ldw	r21,20(sp)
 402aff0:	dd000417 	ldw	r20,16(sp)
 402aff4:	dcc00317 	ldw	r19,12(sp)
 402aff8:	dc800217 	ldw	r18,8(sp)
 402affc:	dc400117 	ldw	r17,4(sp)
 402b000:	dc000017 	ldw	r16,0(sp)
 402b004:	dec00704 	addi	sp,sp,28

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
 402b008:	402aba81 	jmpi	402aba8 <ip_rcv_phase2>
   p->nb_plen = len;       /* fix pkt len */

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402b00c:	a0800017 	ldw	r2,0(r20)
 402b010:	1081800c 	andi	r2,r2,1536
 402b014:	15403326 	beq	r2,r21,402b0e4 <ip_rcv+0x1b8>
      {
         dprintf("ip_rcv: bad xsum\n");
         if (NDEBUG & DUMP) ip_dump(p);
            }
#endif
      ip_mib.ipInHdrErrors++;
 402b018:	98800317 	ldw	r2,12(r19)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 402b01c:	01000084 	movi	r4,2
      {
         dprintf("ip_rcv: bad xsum\n");
         if (NDEBUG & DUMP) ip_dump(p);
            }
#endif
      ip_mib.ipInHdrErrors++;
 402b020:	10800044 	addi	r2,r2,1
 402b024:	98800315 	stw	r2,12(r19)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 402b028:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(p);
 402b02c:	9009883a 	mov	r4,r18
 402b030:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b034:	01000084 	movi	r4,2
 402b038:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
}
 402b03c:	00bff804 	movi	r2,-32
 402b040:	dfc00617 	ldw	ra,24(sp)
 402b044:	dd400517 	ldw	r21,20(sp)
 402b048:	dd000417 	ldw	r20,16(sp)
 402b04c:	dcc00317 	ldw	r19,12(sp)
 402b050:	dc800217 	ldw	r18,8(sp)
 402b054:	dc400117 	ldw	r17,4(sp)
 402b058:	dc000017 	ldw	r16,0(sp)
 402b05c:	dec00704 	addi	sp,sp,28
 402b060:	f800283a 	ret

   if (csum != tempsum)
   {
      pip->ip_chksum = csum;
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402b064:	a0800017 	ldw	r2,0(r20)
   hdrlen = ip_hlen(pip);
   tempsum = ~cksum(pip, hdrlen >> 1);

   if (csum != tempsum)
   {
      pip->ip_chksum = csum;
 402b068:	8c00028d 	sth	r16,10(r17)
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402b06c:	1081800c 	andi	r2,r2,1536
 402b070:	157fe91e 	bne	r2,r21,402b018 <ip_rcv+0xec>
      {
         dprintf("ip_rcv: bad xsum\n");
 402b074:	010100f4 	movhi	r4,1027
 402b078:	2116d604 	addi	r4,r4,23384
 402b07c:	4002fec0 	call	4002fec <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 402b080:	a0c00017 	ldw	r3,0(r20)
 402b084:	18c0008c 	andi	r3,r3,2
 402b088:	183fe326 	beq	r3,zero,402b018 <ip_rcv+0xec>
 402b08c:	9009883a 	mov	r4,r18
 402b090:	40285680 	call	4028568 <ip_dump>
 402b094:	003fe006 	br	402b018 <ip_rcv+0xec>
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
 402b098:	21000617 	ldw	r4,24(r4)
 402b09c:	94400417 	ldw	r17,16(r18)
 402b0a0:	40184b80 	call	40184b8 <if_netnumber>
 402b0a4:	880b883a 	mov	r5,r17
 402b0a8:	100d883a 	mov	r6,r2
 402b0ac:	010100f4 	movhi	r4,1027
 402b0b0:	2116c104 	addi	r4,r4,23300
 402b0b4:	4002ed40 	call	4002ed4 <printf>
 402b0b8:	003fab06 	br	402af68 <ip_rcv+0x3c>

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402b0bc:	a0800017 	ldw	r2,0(r20)
 402b0c0:	1081800c 	andi	r2,r2,1536
 402b0c4:	157fd41e 	bne	r2,r21,402b018 <ip_rcv+0xec>
      {
         dprintf("ip_rcv: bad pkt len\n");
 402b0c8:	010100f4 	movhi	r4,1027
 402b0cc:	2116ca04 	addi	r4,r4,23336
 402b0d0:	4002fec0 	call	4002fec <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 402b0d4:	a0c00017 	ldw	r3,0(r20)
 402b0d8:	18c0008c 	andi	r3,r3,2
 402b0dc:	183fce26 	beq	r3,zero,402b018 <ip_rcv+0xec>
 402b0e0:	003fea06 	br	402b08c <ip_rcv+0x160>
   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ip_rcv: bad version number\n");
 402b0e4:	010100f4 	movhi	r4,1027
 402b0e8:	2116cf04 	addi	r4,r4,23356
 402b0ec:	4002fec0 	call	4002fec <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 402b0f0:	a0c00017 	ldw	r3,0(r20)
 402b0f4:	18c0008c 	andi	r3,r3,2
 402b0f8:	183fc726 	beq	r3,zero,402b018 <ip_rcv+0xec>
 402b0fc:	003fe306 	br	402b08c <ip_rcv+0x160>

0402b100 <lookup_mcast>:
struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 402b100:	28c02c17 	ldw	r3,176(r5)
 402b104:	1800031e 	bne	r3,zero,402b114 <lookup_mcast+0x14>
 402b108:	00000406 	br	402b11c <lookup_mcast+0x1c>
 402b10c:	18c00517 	ldw	r3,20(r3)
 402b110:	18000226 	beq	r3,zero,402b11c <lookup_mcast+0x1c>
   {
      if(imp->inm_addr == addr)
 402b114:	18800017 	ldw	r2,0(r3)
 402b118:	113ffc1e 	bne	r2,r4,402b10c <lookup_mcast+0xc>
         return imp;
   }
   return NULL;   /* addr not found in mcast list */
}
 402b11c:	1805883a 	mov	r2,r3
 402b120:	f800283a 	ret

0402b124 <in_delmulti>:
 * RETURNS: 
 */

void
in_delmulti(struct in_multi * inm)
{
 402b124:	defffd04 	addi	sp,sp,-12
 402b128:	dc000015 	stw	r16,0(sp)
 402b12c:	2021883a 	mov	r16,r4
 402b130:	dc400115 	stw	r17,4(sp)
 402b134:	dfc00215 	stw	ra,8(sp)
   struct in_multi * p;
   NET         netp = inm->inm_netp;
 402b138:	24400117 	ldw	r17,4(r4)
   int error;

   ENTER_CRIT_SECTION(inm);
 402b13c:	401c7c40 	call	401c7c4 <irq_Mask>
   if (--inm->inm_refcount == 0) 
 402b140:	80800217 	ldw	r2,8(r16)
 402b144:	10bfffc4 	addi	r2,r2,-1
 402b148:	80800215 	stw	r2,8(r16)
 402b14c:	1000131e 	bne	r2,zero,402b19c <in_delmulti+0x78>
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 402b150:	88c02c17 	ldw	r3,176(r17)
 402b154:	18000926 	beq	r3,zero,402b17c <in_delmulti+0x58>
      {
         if(p == inm)   /* inm is first in mc_list */
 402b158:	80c02026 	beq	r16,r3,402b1dc <in_delmulti+0xb8>
         {
            netp->mc_list = p->inm_next;  /* unlink */
            break;
         }
         else if(p->inm_next == inm)   /* inm is next */
 402b15c:	18800517 	ldw	r2,20(r3)
 402b160:	80801926 	beq	r16,r2,402b1c8 <in_delmulti+0xa4>

   ENTER_CRIT_SECTION(inm);
   if (--inm->inm_refcount == 0) 
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 402b164:	10000526 	beq	r2,zero,402b17c <in_delmulti+0x58>
      {
         if(p == inm)   /* inm is first in mc_list */
 402b168:	80801c26 	beq	r16,r2,402b1dc <in_delmulti+0xb8>
         {
            netp->mc_list = p->inm_next;  /* unlink */
            break;
         }
         else if(p->inm_next == inm)   /* inm is next */
 402b16c:	10c00517 	ldw	r3,20(r2)
 402b170:	80c01426 	beq	r16,r3,402b1c4 <in_delmulti+0xa0>
         {
            p->inm_next = inm->inm_next;  /* unlink */
            break;
 402b174:	1805883a 	mov	r2,r3

   ENTER_CRIT_SECTION(inm);
   if (--inm->inm_refcount == 0) 
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 402b178:	103ffb1e 	bne	r2,zero,402b168 <in_delmulti+0x44>
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
 402b17c:	88802b17 	ldw	r2,172(r17)
 402b180:	10000226 	beq	r2,zero,402b18c <in_delmulti+0x68>
         error = netp->n_mcastlist(inm);
 402b184:	8009883a 	mov	r4,r16
 402b188:	103ee83a 	callr	r2
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
 402b18c:	80800017 	ldw	r2,0(r16)
 402b190:	1000071e 	bne	r2,zero,402b1b0 <in_delmulti+0x8c>
#endif      

      IM_FREE(inm);
 402b194:	8009883a 	mov	r4,r16
 402b198:	401cce40 	call	401cce4 <npfree>
   }
   EXIT_CRIT_SECTION(inm);
}
 402b19c:	dfc00217 	ldw	ra,8(sp)
 402b1a0:	dc400117 	ldw	r17,4(sp)
 402b1a4:	dc000017 	ldw	r16,0(sp)
 402b1a8:	dec00304 	addi	sp,sp,12
      if (inm->inm_addr) igmp_leavegroup(inm);
#endif      

      IM_FREE(inm);
   }
   EXIT_CRIT_SECTION(inm);
 402b1ac:	401c7a41 	jmpi	401c7a4 <irq_Unmask>
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
 402b1b0:	8009883a 	mov	r4,r16
 402b1b4:	4018ef40 	call	4018ef4 <igmp_leavegroup>
#endif      

      IM_FREE(inm);
 402b1b8:	8009883a 	mov	r4,r16
 402b1bc:	401cce40 	call	401cce4 <npfree>
 402b1c0:	003ff606 	br	402b19c <in_delmulti+0x78>
         if(p == inm)   /* inm is first in mc_list */
         {
            netp->mc_list = p->inm_next;  /* unlink */
            break;
         }
         else if(p->inm_next == inm)   /* inm is next */
 402b1c4:	1007883a 	mov	r3,r2
         {
            p->inm_next = inm->inm_next;  /* unlink */
 402b1c8:	80800517 	ldw	r2,20(r16)
 402b1cc:	18800515 	stw	r2,20(r3)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
 402b1d0:	88802b17 	ldw	r2,172(r17)
 402b1d4:	103feb1e 	bne	r2,zero,402b184 <in_delmulti+0x60>
 402b1d8:	003fec06 	br	402b18c <in_delmulti+0x68>
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
      {
         if(p == inm)   /* inm is first in mc_list */
         {
            netp->mc_list = p->inm_next;  /* unlink */
 402b1dc:	80800517 	ldw	r2,20(r16)
 402b1e0:	88802c15 	stw	r2,176(r17)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
 402b1e4:	88802b17 	ldw	r2,172(r17)
 402b1e8:	103fe61e 	bne	r2,zero,402b184 <in_delmulti+0x60>
 402b1ec:	003fe706 	br	402b18c <in_delmulti+0x68>

0402b1f0 <in_addmulti>:
 * RETURNS: 
 */

struct in_multi * 
in_addmulti(ip_addr *ap, struct net *netp, int addrtype)
{
 402b1f0:	defffb04 	addi	sp,sp,-20
 402b1f4:	dcc00315 	stw	r19,12(sp)
 402b1f8:	dc800215 	stw	r18,8(sp)
 402b1fc:	dc400115 	stw	r17,4(sp)
 402b200:	dfc00415 	stw	ra,16(sp)
 402b204:	dc000015 	stw	r16,0(sp)
 402b208:	2023883a 	mov	r17,r4
 402b20c:	2825883a 	mov	r18,r5
 402b210:	3027883a 	mov	r19,r6
   struct in_multi *inm = (struct in_multi *)NULL;
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
 402b214:	2000091e 	bne	r4,zero,402b23c <in_addmulti+0x4c>
   }

   EXIT_CRIT_SECTION(netp);
   USE_ARG(error);

   return (inm);
 402b218:	0021883a 	mov	r16,zero
}
 402b21c:	8005883a 	mov	r2,r16
 402b220:	dfc00417 	ldw	ra,16(sp)
 402b224:	dcc00317 	ldw	r19,12(sp)
 402b228:	dc800217 	ldw	r18,8(sp)
 402b22c:	dc400117 	ldw	r17,4(sp)
 402b230:	dc000017 	ldw	r16,0(sp)
 402b234:	dec00504 	addi	sp,sp,20
 402b238:	f800283a 	ret
{
   struct in_multi *inm = (struct in_multi *)NULL;
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
 402b23c:	20800017 	ldw	r2,0(r4)
 402b240:	103ff526 	beq	r2,zero,402b218 <in_addmulti+0x28>
      return ((struct in_multi *)NULL);  

   ENTER_CRIT_SECTION(netp);
 402b244:	401c7c40 	call	401c7c4 <irq_Mask>
#ifdef IP_V6
   if(addrtype == 6)
      inm = v6_lookup_mcast((ip6_addr*)ap, netp);
#endif
#ifdef IP_V4
   if(addrtype != 6)
 402b248:	00800184 	movi	r2,6
 402b24c:	98801126 	beq	r19,r2,402b294 <in_addmulti+0xa4>
      inm = lookup_mcast(*ap, netp);
 402b250:	89000017 	ldw	r4,0(r17)
 402b254:	900b883a 	mov	r5,r18
 402b258:	402b1000 	call	402b100 <lookup_mcast>
 402b25c:	1021883a 	mov	r16,r2
#endif

   if (inm != (struct in_multi *)NULL) 
 402b260:	10000c26 	beq	r2,zero,402b294 <in_addmulti+0xa4>
   {
      /* Found it; just increment the reference count. */
      ++inm->inm_refcount;
 402b264:	10800217 	ldw	r2,8(r2)
 402b268:	10800044 	addi	r2,r2,1
 402b26c:	80800215 	stw	r2,8(r16)
       */
      if (inm->inm_addr) igmp_joingroup(inm);
#endif      
   }

   EXIT_CRIT_SECTION(netp);
 402b270:	401c7a40 	call	401c7a4 <irq_Unmask>
   USE_ARG(error);

   return (inm);
}
 402b274:	8005883a 	mov	r2,r16
 402b278:	dfc00417 	ldw	ra,16(sp)
 402b27c:	dcc00317 	ldw	r19,12(sp)
 402b280:	dc800217 	ldw	r18,8(sp)
 402b284:	dc400117 	ldw	r17,4(sp)
 402b288:	dc000017 	ldw	r16,0(sp)
 402b28c:	dec00504 	addi	sp,sp,20
 402b290:	f800283a 	ret
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
 402b294:	01000604 	movi	r4,24
 402b298:	401cdc80 	call	401cdc8 <npalloc>

      if (inm == (struct in_multi *)NULL) 
 402b29c:	10001526 	beq	r2,zero,402b2f4 <in_addmulti+0x104>
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
 402b2a0:	1021883a 	mov	r16,r2
#ifdef IP_V6
      if(addrtype == 6)
         IP6CPY(&inm->ip6addr, (struct in6_addr *)ap);
#endif
#ifdef IP_V4
      if(addrtype != 6)
 402b2a4:	00800184 	movi	r2,6
 402b2a8:	98800226 	beq	r19,r2,402b2b4 <in_addmulti+0xc4>
         inm->inm_addr = *ap;
 402b2ac:	88800017 	ldw	r2,0(r17)
 402b2b0:	80800015 	stw	r2,0(r16)
#endif
      inm->inm_netp = netp;
      inm->inm_refcount = 1;
      inm->inm_next = netp->mc_list;
 402b2b4:	90c02c17 	ldw	r3,176(r18)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
 402b2b8:	91402b17 	ldw	r5,172(r18)
#ifdef IP_V4
      if(addrtype != 6)
         inm->inm_addr = *ap;
#endif
      inm->inm_netp = netp;
      inm->inm_refcount = 1;
 402b2bc:	00800044 	movi	r2,1
      inm->inm_next = netp->mc_list;
 402b2c0:	80c00515 	stw	r3,20(r16)
#ifdef IP_V4
      if(addrtype != 6)
         inm->inm_addr = *ap;
#endif
      inm->inm_netp = netp;
      inm->inm_refcount = 1;
 402b2c4:	80800215 	stw	r2,8(r16)
#endif
#ifdef IP_V4
      if(addrtype != 6)
         inm->inm_addr = *ap;
#endif
      inm->inm_netp = netp;
 402b2c8:	84800115 	stw	r18,4(r16)
      inm->inm_refcount = 1;
      inm->inm_next = netp->mc_list;
      netp->mc_list = inm;
 402b2cc:	94002c15 	stw	r16,176(r18)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
 402b2d0:	28000226 	beq	r5,zero,402b2dc <in_addmulti+0xec>
         error = netp->n_mcastlist(inm);
 402b2d4:	8009883a 	mov	r4,r16
 402b2d8:	283ee83a 	callr	r5
         error = 0;
#if defined (IGMP_V1) || defined (IGMP_V2)
      /*
       * Let IGMP know that we have joined a new IP multicast group.
       */
      if (inm->inm_addr) igmp_joingroup(inm);
 402b2dc:	80800017 	ldw	r2,0(r16)
 402b2e0:	103fe326 	beq	r2,zero,402b270 <in_addmulti+0x80>
 402b2e4:	8009883a 	mov	r4,r16
 402b2e8:	4018f280 	call	4018f28 <igmp_joingroup>
#endif      
   }

   EXIT_CRIT_SECTION(netp);
 402b2ec:	401c7a40 	call	401c7a4 <irq_Unmask>
 402b2f0:	003fe006 	br	402b274 <in_addmulti+0x84>
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));

      if (inm == (struct in_multi *)NULL) 
      {
         EXIT_CRIT_SECTION(netp);
 402b2f4:	401c7a40 	call	401c7a4 <irq_Unmask>
 402b2f8:	0021883a 	mov	r16,zero
 402b2fc:	003fc706 	br	402b21c <in_addmulti+0x2c>

0402b300 <evtmap_setup>:
#ifdef SOCK_MAP_EVENTS
   so_evtmap = TRUE;
   so_evtmap_create = evtmap_create;
   so_evtmap_delete = evtmap_delete;
#else
   so_evtmap = FALSE;
 402b300:	d0286005 	stb	zero,-24192(gp)
   so_evtmap_create = 0;
 402b304:	d0285e15 	stw	zero,-24200(gp)
   so_evtmap_delete = 0;
 402b308:	d0285f15 	stw	zero,-24196(gp)
#endif   /* SOCK_MAP_EVENTS */ 

}
 402b30c:	f800283a 	ret

0402b310 <netexit>:
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
 402b310:	defffe04 	addi	sp,sp,-8
   net_system_exit = TRUE; /* set flag for shutting down */
 402b314:	00800044 	movi	r2,1
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
 402b318:	dc400015 	stw	r17,0(sp)
 402b31c:	dfc00115 	stw	ra,4(sp)
 402b320:	2023883a 	mov	r17,r4
   net_system_exit = TRUE; /* set flag for shutting down */
 402b324:	d0a85d15 	stw	r2,-24204(gp)
   ip_exit();  /* do the exit_hook()ed stuff */
 402b328:	40185740 	call	4018574 <ip_exit>

   PORT_EXIT_FUNC(err);    /* should not return! */
 402b32c:	8809883a 	mov	r4,r17
 402b330:	4001d8c0 	call	4001d8c <exit>

0402b334 <prep_ifaces>:
 */

int
prep_ifaces(int ifaces_found)
{
   if (port_prep)
 402b334:	d0a85c17 	ldw	r2,-24208(gp)
 * passed value. 
 */

int
prep_ifaces(int ifaces_found)
{
 402b338:	defffe04 	addi	sp,sp,-8
 402b33c:	dc000015 	stw	r16,0(sp)
 402b340:	dfc00115 	stw	ra,4(sp)
 402b344:	2021883a 	mov	r16,r4
   if (port_prep)
 402b348:	10000226 	beq	r2,zero,402b354 <prep_ifaces+0x20>
      ifaces_found = port_prep(ifaces_found);
 402b34c:	103ee83a 	callr	r2
 402b350:	1021883a 	mov	r16,r2

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
 402b354:	00810134 	movhi	r2,1028
 402b358:	10a90f04 	addi	r2,r2,-23492

   initmsg("prepped %u interface%s, initializing...\n", 
 402b35c:	00c00044 	movi	r3,1
 402b360:	018100f4 	movhi	r6,1027
 402b364:	31930604 	addi	r6,r6,19480

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
 402b368:	14000015 	stw	r16,0(r2)

   initmsg("prepped %u interface%s, initializing...\n", 
 402b36c:	80c00926 	beq	r16,r3,402b394 <prep_ifaces+0x60>
 402b370:	010100f4 	movhi	r4,1027
 402b374:	2116db04 	addi	r4,r4,23404
 402b378:	800b883a 	mov	r5,r16
 402b37c:	4002ed40 	call	4002ed4 <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
}
 402b380:	8005883a 	mov	r2,r16
 402b384:	dfc00117 	ldw	ra,4(sp)
 402b388:	dc000017 	ldw	r16,0(sp)
 402b38c:	dec00204 	addi	sp,sp,8
 402b390:	f800283a 	ret
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */

   initmsg("prepped %u interface%s, initializing...\n", 
 402b394:	018100f4 	movhi	r6,1027
 402b398:	318ce204 	addi	r6,r6,13192
 402b39c:	010100f4 	movhi	r4,1027
 402b3a0:	2116db04 	addi	r4,r4,23404
 402b3a4:	800b883a 	mov	r5,r16
 402b3a8:	4002ed40 	call	4002ed4 <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
}
 402b3ac:	8005883a 	mov	r2,r16
 402b3b0:	dfc00117 	ldw	ra,4(sp)
 402b3b4:	dc000017 	ldw	r16,0(sp)
 402b3b8:	dec00204 	addi	sp,sp,8
 402b3bc:	f800283a 	ret

0402b3c0 <ip_raw_maxalloc>:
int
ip_raw_maxalloc(int hdrincl)
{
   int len;

   len = bigbufsiz - MaxLnh;
 402b3c0:	00810134 	movhi	r2,1028
 402b3c4:	10a13104 	addi	r2,r2,-31548
 402b3c8:	00c10134 	movhi	r3,1028
 402b3cc:	18e90c04 	addi	r3,r3,-23504
 402b3d0:	11400017 	ldw	r5,0(r2)
 402b3d4:	18800017 	ldw	r2,0(r3)
 402b3d8:	2885c83a 	sub	r2,r5,r2
   if (!hdrincl)
 402b3dc:	2000011e 	bne	r4,zero,402b3e4 <ip_raw_maxalloc+0x24>
      len -= IPHSIZ;
 402b3e0:	10bffb04 	addi	r2,r2,-20
   return len;
}
 402b3e4:	f800283a 	ret

0402b3e8 <ip_raw_free>:
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
 402b3e8:	defffd04 	addi	sp,sp,-12
 402b3ec:	dcc00115 	stw	r19,4(sp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402b3f0:	04c00084 	movi	r19,2
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
 402b3f4:	dc400015 	stw	r17,0(sp)
 402b3f8:	2023883a 	mov	r17,r4
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402b3fc:	9809883a 	mov	r4,r19
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
 402b400:	dfc00215 	stw	ra,8(sp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402b404:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 402b408:	8809883a 	mov	r4,r17
 402b40c:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b410:	9809883a 	mov	r4,r19
}
 402b414:	dfc00217 	ldw	ra,8(sp)
 402b418:	dcc00117 	ldw	r19,4(sp)
 402b41c:	dc400017 	ldw	r17,0(sp)
 402b420:	dec00304 	addi	sp,sp,12
void
ip_raw_free(PACKET p)
{
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b424:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>

0402b428 <ip_raw_alloc>:
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
 402b428:	defffd04 	addi	sp,sp,-12
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
 402b42c:	20c00044 	addi	r3,r4,1
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
 402b430:	dc400115 	stw	r17,4(sp)
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
 402b434:	00bfff84 	movi	r2,-2
   if (!hdrincl)
 402b438:	2822c03a 	cmpne	r17,r5,zero
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
 402b43c:	dc000015 	stw	r16,0(sp)
 402b440:	dfc00215 	stw	ra,8(sp)
   PACKET p;

   len = (reqlen + 1) & ~1;
   if (!hdrincl)
      len += IPHSIZ;
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402b444:	01000084 	movi	r4,2
ip_raw_alloc(int reqlen, int hdrincl)
{
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
 402b448:	18a0703a 	and	r16,r3,r2
   if (!hdrincl)
 402b44c:	8800011e 	bne	r17,zero,402b454 <ip_raw_alloc+0x2c>
      len += IPHSIZ;
 402b450:	84000504 	addi	r16,r16,20
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402b454:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + MaxLnh);
 402b458:	00810134 	movhi	r2,1028
 402b45c:	10a90c04 	addi	r2,r2,-23504
 402b460:	11000017 	ldw	r4,0(r2)
 402b464:	8109883a 	add	r4,r16,r4
 402b468:	401bf840 	call	401bf84 <pk_alloc>
 402b46c:	1021883a 	mov	r16,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b470:	01000084 	movi	r4,2
 402b474:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   if (p)
 402b478:	80000726 	beq	r16,zero,402b498 <ip_raw_alloc+0x70>
   {
      if (!hdrincl)
 402b47c:	8800061e 	bne	r17,zero,402b498 <ip_raw_alloc+0x70>
      {
         p->nb_prot += IPHSIZ;
 402b480:	80800317 	ldw	r2,12(r16)
         p->nb_plen -= IPHSIZ;
 402b484:	80c00417 	ldw	r3,16(r16)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   if (p)
   {
      if (!hdrincl)
      {
         p->nb_prot += IPHSIZ;
 402b488:	10800504 	addi	r2,r2,20
         p->nb_plen -= IPHSIZ;
 402b48c:	18fffb04 	addi	r3,r3,-20
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
   if (p)
   {
      if (!hdrincl)
      {
         p->nb_prot += IPHSIZ;
 402b490:	80800315 	stw	r2,12(r16)
         p->nb_plen -= IPHSIZ;
 402b494:	80c00415 	stw	r3,16(r16)
      }
   }
   return p;
}
 402b498:	8005883a 	mov	r2,r16
 402b49c:	dfc00217 	ldw	ra,8(sp)
 402b4a0:	dc400117 	ldw	r17,4(sp)
 402b4a4:	dc000017 	ldw	r16,0(sp)
 402b4a8:	dec00304 	addi	sp,sp,12
 402b4ac:	f800283a 	ret

0402b4b0 <ip_raw_input>:
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
 402b4b0:	defff804 	addi	sp,sp,-32
 402b4b4:	dc000015 	stw	r16,0(sp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 402b4b8:	d4286117 	ldw	r16,-24188(gp)
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
 402b4bc:	dd400515 	stw	r21,20(sp)
 402b4c0:	dcc00315 	stw	r19,12(sp)
 402b4c4:	dfc00715 	stw	ra,28(sp)
 402b4c8:	dd800615 	stw	r22,24(sp)
 402b4cc:	dd000415 	stw	r20,16(sp)
 402b4d0:	dc800215 	stw	r18,8(sp)
 402b4d4:	dc400115 	stw	r17,4(sp)
 402b4d8:	202b883a 	mov	r21,r4

   /* start out expecting to not deliver the packet */
   delivered = 0;

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);
 402b4dc:	24c00317 	ldw	r19,12(r4)

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 402b4e0:	80004326 	beq	r16,zero,402b5f0 <ip_raw_input+0x140>
 402b4e4:	0023883a 	mov	r17,zero
 402b4e8:	002d883a 	mov	r22,zero
 402b4ec:	00000406 	br	402b500 <ip_raw_input+0x50>

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
 402b4f0:	98800243 	ldbu	r2,9(r19)
 402b4f4:	18800526 	beq	r3,r2,402b50c <ip_raw_input+0x5c>
               LOCK_NET_RESOURCE(NET_RESID);
               if (err)
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
                  pk_free(p2);
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b4f8:	9021883a 	mov	r16,r18

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 402b4fc:	90002226 	beq	r18,zero,402b588 <ip_raw_input+0xd8>

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
 402b500:	80c00503 	ldbu	r3,20(r16)
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
   {
      /* keep track of next endpoint -- defense against upcall
       * function closing its own endpoint
       */
      next_ep = ep->ipr_next;
 402b504:	84800017 	ldw	r18,0(r16)

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
 402b508:	183ff91e 	bne	r3,zero,402b4f0 <ip_raw_input+0x40>
         continue;
      if (ep->ipr_laddr && ep->ipr_laddr != pip->ip_dest)
 402b50c:	80c00117 	ldw	r3,4(r16)
 402b510:	18000226 	beq	r3,zero,402b51c <ip_raw_input+0x6c>
 402b514:	98800417 	ldw	r2,16(r19)
 402b518:	18bff71e 	bne	r3,r2,402b4f8 <ip_raw_input+0x48>
         continue;
      if (ep->ipr_faddr && ep->ipr_faddr != pip->ip_src)
 402b51c:	80c00217 	ldw	r3,8(r16)
 402b520:	18000226 	beq	r3,zero,402b52c <ip_raw_input+0x7c>
 402b524:	98800317 	ldw	r2,12(r19)
 402b528:	18bff31e 	bne	r3,r2,402b4f8 <ip_raw_input+0x48>
         continue;

      /* if the endpoint has a receive upcall function, 
       * keep track of the endpoint
       */
      if (ep->ipr_rcv != NULL)
 402b52c:	80800317 	ldw	r2,12(r16)
 402b530:	103ff126 	beq	r2,zero,402b4f8 <ip_raw_input+0x48>
          * copy the packet into a new buffer,
          * and pass the new copy to the previously matched 
          * endpoint's upcall function 
          * before we forget the previous endpoint
          */
         if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 402b534:	88002c26 	beq	r17,zero,402b5e8 <ip_raw_input+0x138>
 402b538:	88800317 	ldw	r2,12(r17)
 402b53c:	10002a26 	beq	r2,zero,402b5e8 <ip_raw_input+0x138>
         {
            PACKET p2;

            p2 = ip_copypkt(p);
 402b540:	a809883a 	mov	r4,r21
 402b544:	40282140 	call	4028214 <ip_copypkt>
 402b548:	1029883a 	mov	r20,r2
            if (p2)
 402b54c:	10002626 	beq	r2,zero,402b5e8 <ip_raw_input+0x138>
            {
               UNLOCK_NET_RESOURCE(NET_RESID);
 402b550:	0009883a 	mov	r4,zero
 402b554:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
 402b558:	89400417 	ldw	r5,16(r17)
 402b55c:	88c00317 	ldw	r3,12(r17)
 402b560:	a009883a 	mov	r4,r20
 402b564:	183ee83a 	callr	r3
 402b568:	1023883a 	mov	r17,r2
               LOCK_NET_RESOURCE(NET_RESID);
 402b56c:	0009883a 	mov	r4,zero
 402b570:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
               if (err)
 402b574:	88002d1e 	bne	r17,zero,402b62c <ip_raw_input+0x17c>
 402b578:	8023883a 	mov	r17,r16
 402b57c:	05800044 	movi	r22,1
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
                  pk_free(p2);
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b580:	9021883a 	mov	r16,r18

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 402b584:	903fde1e 	bne	r18,zero,402b500 <ip_raw_input+0x50>
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 402b588:	88001a26 	beq	r17,zero,402b5f4 <ip_raw_input+0x144>
 402b58c:	88800317 	ldw	r2,12(r17)
 402b590:	10001826 	beq	r2,zero,402b5f4 <ip_raw_input+0x144>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 402b594:	0009883a 	mov	r4,zero
 402b598:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
 402b59c:	89400417 	ldw	r5,16(r17)
 402b5a0:	88c00317 	ldw	r3,12(r17)
 402b5a4:	a809883a 	mov	r4,r21
 402b5a8:	183ee83a 	callr	r3
 402b5ac:	1021883a 	mov	r16,r2
      LOCK_NET_RESOURCE(NET_RESID);
 402b5b0:	0009883a 	mov	r4,zero
 402b5b4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      if (err == 0)
 402b5b8:	8000141e 	bne	r16,zero,402b60c <ip_raw_input+0x15c>

   if (!delivered)
      ip_mib.ipInDelivers--;

   return err;
}
 402b5bc:	8005883a 	mov	r2,r16
 402b5c0:	dfc00717 	ldw	ra,28(sp)
 402b5c4:	dd800617 	ldw	r22,24(sp)
 402b5c8:	dd400517 	ldw	r21,20(sp)
 402b5cc:	dd000417 	ldw	r20,16(sp)
 402b5d0:	dcc00317 	ldw	r19,12(sp)
 402b5d4:	dc800217 	ldw	r18,8(sp)
 402b5d8:	dc400117 	ldw	r17,4(sp)
 402b5dc:	dc000017 	ldw	r16,0(sp)
 402b5e0:	dec00804 	addi	sp,sp,32
 402b5e4:	f800283a 	ret
               LOCK_NET_RESOURCE(NET_RESID);
               if (err)
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
                  pk_free(p2);
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b5e8:	8023883a 	mov	r17,r16
 402b5ec:	003fc206 	br	402b4f8 <ip_raw_input+0x48>
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
      LOCK_NET_RESOURCE(NET_RESID);
      if (err == 0)
 402b5f0:	002d883a 	mov	r22,zero
         delivered = 1;
   }
   else
   {
      err = ENP_PARAM;
      ip_mib.ipUnknownProtos++;
 402b5f4:	00c10134 	movhi	r3,1028
 402b5f8:	18ce0104 	addi	r3,r3,14340
 402b5fc:	18800617 	ldw	r2,24(r3)
 402b600:	043ffd84 	movi	r16,-10
 402b604:	10800044 	addi	r2,r2,1
 402b608:	18800615 	stw	r2,24(r3)
   }

   if (!delivered)
 402b60c:	b004c03a 	cmpne	r2,r22,zero
 402b610:	103fea1e 	bne	r2,zero,402b5bc <ip_raw_input+0x10c>
      ip_mib.ipInDelivers--;
 402b614:	00c10134 	movhi	r3,1028
 402b618:	18ce0104 	addi	r3,r3,14340
 402b61c:	18800817 	ldw	r2,32(r3)
 402b620:	10bfffc4 	addi	r2,r2,-1
 402b624:	18800815 	stw	r2,32(r3)
 402b628:	003fe406 	br	402b5bc <ip_raw_input+0x10c>
               UNLOCK_NET_RESOURCE(NET_RESID);
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
               LOCK_NET_RESOURCE(NET_RESID);
               if (err)
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
 402b62c:	01000084 	movi	r4,2
 402b630:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
                  pk_free(p2);
 402b634:	a009883a 	mov	r4,r20
 402b638:	401bf0c0 	call	401bf0c <pk_free>
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402b63c:	01000084 	movi	r4,2
 402b640:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402b644:	8023883a 	mov	r17,r16
 402b648:	003fab06 	br	402b4f8 <ip_raw_input+0x48>

0402b64c <ip_raw_close>:
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
 402b64c:	defffe04 	addi	sp,sp,-8
 402b650:	dc000015 	stw	r16,0(sp)
 402b654:	2021883a 	mov	r16,r4
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
 402b658:	0009883a 	mov	r4,zero
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
 402b65c:	dfc00115 	stw	ra,4(sp)
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
 402b660:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
 402b664:	d0a86117 	ldw	r2,-24188(gp)
        curr_ep != NULL;
 402b668:	10000526 	beq	r2,zero,402b680 <ip_raw_close+0x34>
        curr_ep = curr_ep->ipr_next)
   {
      if (curr_ep == ep)
 402b66c:	1400021e 	bne	r2,r16,402b678 <ip_raw_close+0x2c>
 402b670:	00000906 	br	402b698 <ip_raw_close+0x4c>
 402b674:	80800a26 	beq	r16,r2,402b6a0 <ip_raw_close+0x54>
   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
 402b678:	10800017 	ldw	r2,0(r2)

   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
 402b67c:	103ffd1e 	bne	r2,zero,402b674 <ip_raw_close+0x28>
   {
#ifdef NPDEBUG
      /* caller passed pointer to endpoint not in list 
       * -- not fatal, but may be programming error
       */
      dtrap();
 402b680:	401c81c0 	call	401c81c <dtrap>

   /* free its storage */
   IEP_FREE(curr_ep);

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 402b684:	0009883a 	mov	r4,zero
}
 402b688:	dfc00117 	ldw	ra,4(sp)
 402b68c:	dc000017 	ldw	r16,0(sp)
 402b690:	dec00204 	addi	sp,sp,8

   /* free its storage */
   IEP_FREE(curr_ep);

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 402b694:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>

   /* unlink it from the list */
   if (prev_ep)
      prev_ep = curr_ep->ipr_next;
   else
      ipraw_eps = curr_ep->ipr_next;
 402b698:	80800017 	ldw	r2,0(r16)
 402b69c:	d0a86115 	stw	r2,-24188(gp)

   /* free its storage */
   IEP_FREE(curr_ep);
 402b6a0:	8009883a 	mov	r4,r16
 402b6a4:	401cce40 	call	401cce4 <npfree>

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 402b6a8:	0009883a 	mov	r4,zero
}
 402b6ac:	dfc00117 	ldw	ra,4(sp)
 402b6b0:	dc000017 	ldw	r16,0(sp)
 402b6b4:	dec00204 	addi	sp,sp,8

   /* free its storage */
   IEP_FREE(curr_ep);

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 402b6b8:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>

0402b6bc <ip_raw_open>:
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
 402b6bc:	defffa04 	addi	sp,sp,-24
 402b6c0:	dc400115 	stw	r17,4(sp)
 402b6c4:	2023883a 	mov	r17,r4
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
 402b6c8:	0009883a 	mov	r4,zero
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
 402b6cc:	dfc00515 	stw	ra,20(sp)
 402b6d0:	dd000415 	stw	r20,16(sp)
 402b6d4:	dcc00315 	stw	r19,12(sp)
 402b6d8:	dc800215 	stw	r18,8(sp)
 402b6dc:	dc000015 	stw	r16,0(sp)
 402b6e0:	2825883a 	mov	r18,r5
 402b6e4:	3027883a 	mov	r19,r6
 402b6e8:	3829883a 	mov	r20,r7
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
 402b6ec:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
 402b6f0:	01000604 	movi	r4,24
 402b6f4:	401cdc80 	call	401cdc8 <npalloc>
 402b6f8:	1021883a 	mov	r16,r2
    */
   ep->ipr_next = ipraw_eps;
   ipraw_eps = ep;

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
 402b6fc:	0009883a 	mov	r4,zero

   LOCK_NET_RESOURCE(NET_RESID);

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
   if (ep == NULL)
 402b700:	10001326 	beq	r2,zero,402b750 <ip_raw_open+0x94>
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
   ep->ipr_faddr = faddr;
   ep->ipr_prot = prot;
 402b704:	14400505 	stb	r17,20(r2)
      UNLOCK_NET_RESOURCE(NET_RESID);
      return ep;
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
 402b708:	14800115 	stw	r18,4(r2)
   ep->ipr_faddr = faddr;
 402b70c:	14c00215 	stw	r19,8(r2)
   ep->ipr_data = data;

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
 402b710:	d0a86117 	ldw	r2,-24188(gp)

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
   ep->ipr_faddr = faddr;
   ep->ipr_prot = prot;
   ep->ipr_rcv = handler;
 402b714:	85000315 	stw	r20,12(r16)
   ep->ipr_data = data;

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
 402b718:	80800015 	stw	r2,0(r16)
   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
   ep->ipr_faddr = faddr;
   ep->ipr_prot = prot;
   ep->ipr_rcv = handler;
   ep->ipr_data = data;
 402b71c:	d8800617 	ldw	r2,24(sp)

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
   ipraw_eps = ep;
 402b720:	d4286115 	stw	r16,-24188(gp)
   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
   ep->ipr_faddr = faddr;
   ep->ipr_prot = prot;
   ep->ipr_rcv = handler;
   ep->ipr_data = data;
 402b724:	80800415 	stw	r2,16(r16)
    */
   ep->ipr_next = ipraw_eps;
   ipraw_eps = ep;

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
 402b728:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   return ep;
}
 402b72c:	8005883a 	mov	r2,r16
 402b730:	dfc00517 	ldw	ra,20(sp)
 402b734:	dd000417 	ldw	r20,16(sp)
 402b738:	dcc00317 	ldw	r19,12(sp)
 402b73c:	dc800217 	ldw	r18,8(sp)
 402b740:	dc400117 	ldw	r17,4(sp)
 402b744:	dc000017 	ldw	r16,0(sp)
 402b748:	dec00604 	addi	sp,sp,24
 402b74c:	f800283a 	ret
   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
   if (ep == NULL)
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
 402b750:	00810134 	movhi	r2,1028
 402b754:	10a90e04 	addi	r2,r2,-23496
 402b758:	10c00017 	ldw	r3,0(r2)
         dprintf("IP: Couldn't allocate ep storage.\n");
 402b75c:	010100f4 	movhi	r4,1027
 402b760:	2116e604 	addi	r4,r4,23448
   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
   if (ep == NULL)
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
 402b764:	18c0010c 	andi	r3,r3,4
 402b768:	1800031e 	bne	r3,zero,402b778 <ip_raw_open+0xbc>
         dprintf("IP: Couldn't allocate ep storage.\n");
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 402b76c:	0009883a 	mov	r4,zero
 402b770:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402b774:	003fed06 	br	402b72c <ip_raw_open+0x70>
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
   if (ep == NULL)
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
         dprintf("IP: Couldn't allocate ep storage.\n");
 402b778:	4002fec0 	call	4002fec <puts>
 402b77c:	003ffb06 	br	402b76c <ip_raw_open+0xb0>

0402b780 <rt_lookup>:
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b780:	00810134 	movhi	r2,1028
 402b784:	10a14604 	addi	r2,r2,-31464
 402b788:	11400017 	ldw	r5,0(r2)
 402b78c:	00c10134 	movhi	r3,1028
 402b790:	18e94f04 	addi	r3,r3,-23236
 402b794:	1a000017 	ldw	r8,0(r3)
 402b798:	29400f24 	muli	r5,r5,60
 * entry was found.
 */

RTMIB
rt_lookup(ip_addr host)
{
 402b79c:	2015883a 	mov	r10,r4
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b7a0:	4153883a 	add	r9,r8,r5
 402b7a4:	4240312e 	bgeu	r8,r9,402b86c <rt_lookup+0xec>
 402b7a8:	0017883a 	mov	r11,zero
 402b7ac:	0019883a 	mov	r12,zero
 402b7b0:	00000206 	br	402b7bc <rt_lookup+0x3c>
 402b7b4:	42000f04 	addi	r8,r8,60
 402b7b8:	4240232e 	bgeu	r8,r9,402b848 <rt_lookup+0xc8>
   {
      if (rtp->ipRouteNextHop == 0L)   /* skip over empty entries */
 402b7bc:	40800617 	ldw	r2,24(r8)
 402b7c0:	103ffc26 	beq	r2,zero,402b7b4 <rt_lookup+0x34>
#ifdef RIP_SUPPORT
      /* skip RIP private entries */
      if (rtp->ipRouteFlags & RIP_PRIVATE)
         continue;
#endif
      entry_mask = rtp->ipRouteMask;
 402b7c4:	41800a17 	ldw	r6,40(r8)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
 402b7c8:	40800017 	ldw	r2,0(r8)
 402b7cc:	3286703a 	and	r3,r6,r10
 402b7d0:	3084703a 	and	r2,r6,r2
 402b7d4:	10fff71e 	bne	r2,r3,402b7b4 <rt_lookup+0x34>
 402b7d8:	313fc00c 	andi	r4,r6,65280
 402b7dc:	3006d23a 	srli	r3,r6,8
 402b7e0:	300ad63a 	srli	r5,r6,24
 402b7e4:	2008923a 	slli	r4,r4,8
 402b7e8:	3004963a 	slli	r2,r6,24
 402b7ec:	18ffc00c 	andi	r3,r3,65280
 402b7f0:	1946b03a 	or	r3,r3,r5
 402b7f4:	1104b03a 	or	r2,r2,r4
 402b7f8:	1886b03a 	or	r3,r3,r2
 402b7fc:	000b883a 	mov	r5,zero
 402b800:	01a00034 	movhi	r6,32768
 402b804:	000f883a 	mov	r7,zero
 402b808:	01000804 	movi	r4,32
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
            if (extracted_bit) ++curr_bits_matched;
 402b80c:	1984703a 	and	r2,r3,r6
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 402b810:	39c00044 	addi	r7,r7,1
 402b814:	300cd07a 	srli	r6,r6,1
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
            if (extracted_bit) ++curr_bits_matched;
 402b818:	10000126 	beq	r2,zero,402b820 <rt_lookup+0xa0>
 402b81c:	29400044 	addi	r5,r5,1
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 402b820:	393ffa1e 	bne	r7,r4,402b80c <rt_lookup+0x8c>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
            if (extracted_bit) ++curr_bits_matched;
         }
         if (curr_bits_matched > max_bits_matched)
 402b824:	28c03fcc 	andi	r3,r5,255
 402b828:	60803fcc 	andi	r2,r12,255
 402b82c:	01c00804 	movi	r7,32
 402b830:	10ffe02e 	bgeu	r2,r3,402b7b4 <rt_lookup+0x34>
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
            netmatch = rtp;
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
 402b834:	19c00b26 	beq	r3,r7,402b864 <rt_lookup+0xe4>
 402b838:	4017883a 	mov	r11,r8
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b83c:	42000f04 	addi	r8,r8,60
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
            netmatch = rtp;
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
 402b840:	2819883a 	mov	r12,r5
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b844:	427fdd36 	bltu	r8,r9,402b7bc <rt_lookup+0x3c>
               break;
         }
      }
   }

   if (netmatch)
 402b848:	58000426 	beq	r11,zero,402b85c <rt_lookup+0xdc>
      netmatch->ipRouteAge = cticks;   /* timestamp entry we used */
 402b84c:	00810134 	movhi	r2,1028
 402b850:	10a93304 	addi	r2,r2,-23348
 402b854:	10c00017 	ldw	r3,0(r2)
 402b858:	58c00915 	stw	r3,36(r11)

   return netmatch;
}
 402b85c:	5805883a 	mov	r2,r11
 402b860:	f800283a 	ret
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
            netmatch = rtp;
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
 402b864:	4017883a 	mov	r11,r8
 402b868:	003ff806 	br	402b84c <rt_lookup+0xcc>
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b86c:	0017883a 	mov	r11,zero
 402b870:	003ffa06 	br	402b85c <rt_lookup+0xdc>

0402b874 <del_route>:
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
 402b874:	defff704 	addi	sp,sp,-36

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
 402b878:	00bfffc4 	movi	r2,-1
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
 402b87c:	ddc00715 	stw	r23,28(sp)
 402b880:	dc400115 	stw	r17,4(sp)
 402b884:	dfc00815 	stw	ra,32(sp)
 402b888:	dd800615 	stw	r22,24(sp)
 402b88c:	dd400515 	stw	r21,20(sp)
 402b890:	dd000415 	stw	r20,16(sp)
 402b894:	dcc00315 	stw	r19,12(sp)
 402b898:	dc800215 	stw	r18,8(sp)
 402b89c:	dc000015 	stw	r16,0(sp)
 402b8a0:	2023883a 	mov	r17,r4
 402b8a4:	282f883a 	mov	r23,r5

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
 402b8a8:	30803126 	beq	r6,r2,402b970 <del_route+0xfc>
      ifp = NULL;    /* wildcard */
   else
      ifp = if_getbynum(iface);
 402b8ac:	3009883a 	mov	r4,r6

   if (rt_mib == NULL)     /* Make sure we're up */
 402b8b0:	04c10134 	movhi	r19,1028
 402b8b4:	9ce94f04 	addi	r19,r19,-23236
    * in the nets[] array.
    */
   if(iface == -1)
      ifp = NULL;    /* wildcard */
   else
      ifp = if_getbynum(iface);
 402b8b8:	40281cc0 	call	40281cc <if_getbynum>

   if (rt_mib == NULL)     /* Make sure we're up */
 402b8bc:	9c000017 	ldw	r16,0(r19)
    * in the nets[] array.
    */
   if(iface == -1)
      ifp = NULL;    /* wildcard */
   else
      ifp = if_getbynum(iface);
 402b8c0:	1029883a 	mov	r20,r2

   if (rt_mib == NULL)     /* Make sure we're up */
 402b8c4:	80002f26 	beq	r16,zero,402b984 <del_route+0x110>
      return 0;

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b8c8:	04810134 	movhi	r18,1028
 402b8cc:	94a14604 	addi	r18,r18,-31464
 402b8d0:	90800017 	ldw	r2,0(r18)
 402b8d4:	10800f24 	muli	r2,r2,60
 402b8d8:	8085883a 	add	r2,r16,r2
 402b8dc:	8080292e 	bgeu	r16,r2,402b984 <del_route+0x110>
 402b8e0:	bc6c703a 	and	r22,r23,r17
 402b8e4:	002b883a 	mov	r21,zero
 402b8e8:	a023003a 	cmpeq	r17,r20,zero
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
 402b8ec:	80800617 	ldw	r2,24(r16)
 402b8f0:	10000326 	beq	r2,zero,402b900 <del_route+0x8c>
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
 402b8f4:	8800141e 	bne	r17,zero,402b948 <del_route+0xd4>
 402b8f8:	80800e17 	ldw	r2,56(r16)
 402b8fc:	a0801226 	beq	r20,r2,402b948 <del_route+0xd4>
      ifp = if_getbynum(iface);

   if (rt_mib == NULL)     /* Make sure we're up */
      return 0;

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b900:	90800017 	ldw	r2,0(r18)
 402b904:	98c00017 	ldw	r3,0(r19)
 402b908:	84000f04 	addi	r16,r16,60
 402b90c:	10800f24 	muli	r2,r2,60
 402b910:	10c5883a 	add	r2,r2,r3
 402b914:	80bff536 	bltu	r16,r2,402b8ec <del_route+0x78>
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
         cachedRoute = NULL;
   }
   return retval;
}
 402b918:	a805883a 	mov	r2,r21
 402b91c:	dfc00817 	ldw	ra,32(sp)
 402b920:	ddc00717 	ldw	r23,28(sp)
 402b924:	dd800617 	ldw	r22,24(sp)
 402b928:	dd400517 	ldw	r21,20(sp)
 402b92c:	dd000417 	ldw	r20,16(sp)
 402b930:	dcc00317 	ldw	r19,12(sp)
 402b934:	dc800217 	ldw	r18,8(sp)
 402b938:	dc400117 	ldw	r17,4(sp)
 402b93c:	dc000017 	ldw	r16,0(sp)
 402b940:	dec00904 	addi	sp,sp,36
 402b944:	f800283a 	ret
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
 402b948:	80800017 	ldw	r2,0(r16)
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
 402b94c:	8009883a 	mov	r4,r16
 402b950:	000b883a 	mov	r5,zero
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
 402b954:	b884703a 	and	r2,r23,r2
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
 402b958:	01800f04 	movi	r6,60
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
 402b95c:	15800b26 	beq	r2,r22,402b98c <del_route+0x118>
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
         retval++;
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
 402b960:	d0a86217 	ldw	r2,-24184(gp)
 402b964:	143fe61e 	bne	r2,r16,402b900 <del_route+0x8c>
         cachedRoute = NULL;
 402b968:	d0286215 	stw	zero,-24184(gp)
 402b96c:	003fe406 	br	402b900 <del_route+0x8c>
   if(iface == -1)
      ifp = NULL;    /* wildcard */
   else
      ifp = if_getbynum(iface);

   if (rt_mib == NULL)     /* Make sure we're up */
 402b970:	04c10134 	movhi	r19,1028
 402b974:	9ce94f04 	addi	r19,r19,-23236
 402b978:	9c000017 	ldw	r16,0(r19)

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
 402b97c:	0029883a 	mov	r20,zero
      ifp = NULL;    /* wildcard */
   else
      ifp = if_getbynum(iface);

   if (rt_mib == NULL)     /* Make sure we're up */
 402b980:	803fd11e 	bne	r16,zero,402b8c8 <del_route+0x54>
      return 0;

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402b984:	002b883a 	mov	r21,zero
 402b988:	003fe306 	br	402b918 <del_route+0xa4>
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
 402b98c:	40026a00 	call	40026a0 <memset>
         retval++;
 402b990:	ad400044 	addi	r21,r21,1
 402b994:	003ff206 	br	402b960 <del_route+0xec>

0402b998 <add_route>:
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
 402b998:	defff604 	addi	sp,sp,-40
 402b99c:	dc400115 	stw	r17,4(sp)
 402b9a0:	2023883a 	mov	r17,r4
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
 402b9a4:	3809883a 	mov	r4,r7
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
 402b9a8:	ddc00715 	stw	r23,28(sp)
 402b9ac:	dd800615 	stw	r22,24(sp)
 402b9b0:	dd400515 	stw	r21,20(sp)
 402b9b4:	dd000415 	stw	r20,16(sp)
 402b9b8:	dcc00315 	stw	r19,12(sp)
 402b9bc:	dfc00915 	stw	ra,36(sp)
 402b9c0:	df000815 	stw	fp,32(sp)
 402b9c4:	dc800215 	stw	r18,8(sp)
 402b9c8:	dc000015 	stw	r16,0(sp)
 402b9cc:	382b883a 	mov	r21,r7
 402b9d0:	2829883a 	mov	r20,r5
 402b9d4:	302d883a 	mov	r22,r6
 402b9d8:	ddc00a17 	ldw	r23,40(sp)
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
 402b9dc:	40281cc0 	call	40281cc <if_getbynum>
 402b9e0:	1027883a 	mov	r19,r2
   if(!ifp)
 402b9e4:	10000e1e 	bne	r2,zero,402ba20 <add_route+0x88>
      rtp->ipRouteType = IPRT_INDIRECT;

   rtp->ipRouteAge = cticks;        /* timestamp it */
   rtp->ipRouteMask = mask;
   rtp->ipRouteMetric5 = -1;
   return(rtp);
 402b9e8:	0021883a 	mov	r16,zero
}
 402b9ec:	8005883a 	mov	r2,r16
 402b9f0:	dfc00917 	ldw	ra,36(sp)
 402b9f4:	df000817 	ldw	fp,32(sp)
 402b9f8:	ddc00717 	ldw	r23,28(sp)
 402b9fc:	dd800617 	ldw	r22,24(sp)
 402ba00:	dd400517 	ldw	r21,20(sp)
 402ba04:	dd000417 	ldw	r20,16(sp)
 402ba08:	dcc00317 	ldw	r19,12(sp)
 402ba0c:	dc800217 	ldw	r18,8(sp)
 402ba10:	dc400117 	ldw	r17,4(sp)
 402ba14:	dc000017 	ldw	r16,0(sp)
 402ba18:	dec00a04 	addi	sp,sp,40
 402ba1c:	f800283a 	ret
    */
   ifp = if_getbynum(iface);
   if(!ifp)
      return NULL;

   if (rt_mib == NULL)
 402ba20:	07010134 	movhi	fp,1028
 402ba24:	e7294f04 	addi	fp,fp,-23236
 402ba28:	e4000017 	ldw	r16,0(fp)
 402ba2c:	803fef26 	beq	r16,zero,402b9ec <add_route+0x54>
      return NULL;

   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
 402ba30:	88003226 	beq	r17,zero,402bafc <add_route+0x164>
 402ba34:	a0003126 	beq	r20,zero,402bafc <add_route+0x164>
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402ba38:	00c10134 	movhi	r3,1028
 402ba3c:	18e14604 	addi	r3,r3,-31464
 402ba40:	18800017 	ldw	r2,0(r3)
 402ba44:	10800f24 	muli	r2,r2,60
 402ba48:	8085883a 	add	r2,r16,r2
 402ba4c:	80bfe62e 	bgeu	r16,r2,402b9e8 <add_route+0x50>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
 402ba50:	80800017 	ldw	r2,0(r16)
 402ba54:	88804126 	beq	r17,r2,402bb5c <add_route+0x1c4>
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
         rtp->ipRouteMask = mask;
         rtp->ifp = ifp;
         return(rtp);   /* just update and exit */
 402ba58:	0025883a 	mov	r18,zero
 402ba5c:	00000c06 	br	402ba90 <add_route+0xf8>
      if (!newrt || (newrt->ipRouteProto != 0))
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
         {
            newrt = rtp;   /* record empty route for use */
            newrt->ipRouteProto = 0;
 402ba60:	8025883a 	mov	r18,r16
 402ba64:	80000815 	stw	zero,32(r16)
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 402ba68:	00c10134 	movhi	r3,1028
 402ba6c:	18e14604 	addi	r3,r3,-31464
 402ba70:	18800017 	ldw	r2,0(r3)
 402ba74:	e0c00017 	ldw	r3,0(fp)
 402ba78:	84000f04 	addi	r16,r16,60
 402ba7c:	10800f24 	muli	r2,r2,60
 402ba80:	10c5883a 	add	r2,r2,r3
 402ba84:	8080402e 	bgeu	r16,r2,402bb88 <add_route+0x1f0>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
 402ba88:	80800017 	ldw	r2,0(r16)
 402ba8c:	88803326 	beq	r17,r2,402bb5c <add_route+0x1c4>
         rtp->ipRouteMask = mask;
         rtp->ifp = ifp;
         return(rtp);   /* just update and exit */
      }
      /* if we didn't find empty slot yet, look for good slot to recycle */
      if (!newrt || (newrt->ipRouteProto != 0))
 402ba90:	900b003a 	cmpeq	r5,r18,zero
 402ba94:	2800021e 	bne	r5,zero,402baa0 <add_route+0x108>
 402ba98:	90800817 	ldw	r2,32(r18)
 402ba9c:	103ff226 	beq	r2,zero,402ba68 <add_route+0xd0>
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
 402baa0:	80800617 	ldw	r2,24(r16)
 402baa4:	103fee26 	beq	r2,zero,402ba60 <add_route+0xc8>
            newrt = rtp;   /* record empty route for use */
            newrt->ipRouteProto = 0;
            continue;
         }
         /* else see if the new route has higher priority than this slot: */
         if (rtp_priority[prot] >= rtp_priority[rtp->ipRouteProto])
 402baa8:	80800817 	ldw	r2,32(r16)
 402baac:	01810134 	movhi	r6,1028
 402bab0:	31a09f04 	addi	r6,r6,-32132
 402bab4:	b987883a 	add	r3,r23,r6
 402bab8:	1185883a 	add	r2,r2,r6
 402babc:	19000003 	ldbu	r4,0(r3)
 402bac0:	10c00003 	ldbu	r3,0(r2)
 402bac4:	20ffe836 	bltu	r4,r3,402ba68 <add_route+0xd0>
         {
            if (!newrt)
 402bac8:	28000a1e 	bne	r5,zero,402baf4 <add_route+0x15c>
               newrt = rtp;
               continue;
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
 402bacc:	90800817 	ldw	r2,32(r18)
 402bad0:	1185883a 	add	r2,r2,r6
 402bad4:	10800003 	ldbu	r2,0(r2)
 402bad8:	18800636 	bltu	r3,r2,402baf4 <add_route+0x15c>
                rtp_priority[newrt->ipRouteProto])
            {
               newrt = rtp;   /* save lower priority entry for recycle */
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
 402badc:	18bfe21e 	bne	r3,r2,402ba68 <add_route+0xd0>
                rtp_priority[newrt->ipRouteProto])
            {
               /* if equal priority, keep the older entry for deletion */
               if (c_older(rtp->ipRouteAge, newrt->ipRouteAge) == rtp->ipRouteAge)
 402bae0:	81000917 	ldw	r4,36(r16)
 402bae4:	91400917 	ldw	r5,36(r18)
 402bae8:	4017d180 	call	4017d18 <c_older>
 402baec:	80c00917 	ldw	r3,36(r16)
 402baf0:	10ffdd1e 	bne	r2,r3,402ba68 <add_route+0xd0>
 402baf4:	8025883a 	mov	r18,r16
 402baf8:	003fdb06 	br	402ba68 <add_route+0xd0>
   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
   {
      dtrap();    /* bad configuration? */
 402bafc:	401c81c0 	call	401c81c <dtrap>
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
 402bb00:	8808d23a 	srli	r4,r17,8
 402bb04:	88ffc00c 	andi	r3,r17,65280
 402bb08:	a00ed23a 	srli	r7,r20,8
 402bb0c:	a0bfc00c 	andi	r2,r20,65280
 402bb10:	8810963a 	slli	r8,r17,24
 402bb14:	a012963a 	slli	r9,r20,24
 402bb18:	1806923a 	slli	r3,r3,8
 402bb1c:	1004923a 	slli	r2,r2,8
 402bb20:	880ad63a 	srli	r5,r17,24
 402bb24:	a00cd63a 	srli	r6,r20,24
 402bb28:	213fc00c 	andi	r4,r4,65280
 402bb2c:	39ffc00c 	andi	r7,r7,65280
 402bb30:	290ab03a 	or	r5,r5,r4
 402bb34:	1a06b03a 	or	r3,r3,r8
 402bb38:	31ccb03a 	or	r6,r6,r7
 402bb3c:	1244b03a 	or	r2,r2,r9
 402bb40:	28cab03a 	or	r5,r5,r3
 402bb44:	308cb03a 	or	r6,r6,r2
 402bb48:	010100f4 	movhi	r4,1027
 402bb4c:	2116ef04 	addi	r4,r4,23484
 402bb50:	4002ed40 	call	4002ed4 <printf>
 402bb54:	0021883a 	mov	r16,zero
 402bb58:	003fa406 	br	402b9ec <add_route+0x54>
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
         rtp->ipRouteAge = cticks;           /* timestamp it */
 402bb5c:	00810134 	movhi	r2,1028
 402bb60:	10a93304 	addi	r2,r2,-23348
 402bb64:	10c00017 	ldw	r3,0(r2)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
 402bb68:	a9000044 	addi	r4,r21,1
   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
 402bb6c:	85800615 	stw	r22,24(r16)
         rtp->ipRouteAge = cticks;           /* timestamp it */
 402bb70:	80c00915 	stw	r3,36(r16)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
 402bb74:	81000115 	stw	r4,4(r16)
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
 402bb78:	85c00815 	stw	r23,32(r16)
         rtp->ipRouteMask = mask;
 402bb7c:	85000a15 	stw	r20,40(r16)
         rtp->ifp = ifp;
 402bb80:	84c00e15 	stw	r19,56(r16)
 402bb84:	003f9906 	br	402b9ec <add_route+0x54>
         }
      }
   }

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
 402bb88:	903f9726 	beq	r18,zero,402b9e8 <add_route+0x50>
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
   rtp->ipRouteDest = dest;
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
 402bb8c:	9809883a 	mov	r4,r19
      rtp = newrt;   /* create new entry in lowest priority slot */
   else  /* all slots have higher priority, new entry looses */
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
 402bb90:	94c00e15 	stw	r19,56(r18)
   rtp->ipRouteDest = dest;
 402bb94:	94400015 	stw	r17,0(r18)
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
 402bb98:	40184b80 	call	40184b8 <if_netnumber>
 402bb9c:	10800044 	addi	r2,r2,1
 402bba0:	90800115 	stw	r2,4(r18)
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
 402bba4:	00810134 	movhi	r2,1028
 402bba8:	108e0104 	addi	r2,r2,14340
 402bbac:	10c00117 	ldw	r3,4(r2)
   rtp->ipRouteMetric3 = -1;
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
 402bbb0:	8d0a703a 	and	r5,r17,r20
   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
   rtp->ipRouteDest = dest;
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
   rtp->ipRouteMetric2 = -1;
 402bbb4:	00bfffc4 	movi	r2,-1
   rtp->ipRouteMetric3 = -1;
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
 402bbb8:	a588703a 	and	r4,r20,r22

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
   rtp->ipRouteDest = dest;
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
 402bbbc:	90c00215 	stw	r3,8(r18)
   rtp->ipRouteMetric2 = -1;
   rtp->ipRouteMetric3 = -1;
   rtp->ipRouteMetric4 = -1;
 402bbc0:	90800515 	stw	r2,20(r18)
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */
 402bbc4:	95c00815 	stw	r23,32(r18)
   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
   rtp->ipRouteDest = dest;
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
   rtp->ipRouteMetric2 = -1;
 402bbc8:	90800315 	stw	r2,12(r18)
   rtp->ipRouteMetric3 = -1;
 402bbcc:	90800415 	stw	r2,16(r18)
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
 402bbd0:	95800615 	stw	r22,24(r18)
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
 402bbd4:	29000b26 	beq	r5,r4,402bc04 <add_route+0x26c>
      rtp->ipRouteType = IPRT_DIRECT;
   else
      rtp->ipRouteType = IPRT_INDIRECT;
 402bbd8:	00800104 	movi	r2,4
 402bbdc:	90800715 	stw	r2,28(r18)

   rtp->ipRouteAge = cticks;        /* timestamp it */
 402bbe0:	00810134 	movhi	r2,1028
 402bbe4:	10a93304 	addi	r2,r2,-23348
 402bbe8:	10c00017 	ldw	r3,0(r2)
   rtp->ipRouteMask = mask;
   rtp->ipRouteMetric5 = -1;
 402bbec:	9021883a 	mov	r16,r18
 402bbf0:	00bfffc4 	movi	r2,-1
   if ((dest & mask) == (nexthop & mask))
      rtp->ipRouteType = IPRT_DIRECT;
   else
      rtp->ipRouteType = IPRT_INDIRECT;

   rtp->ipRouteAge = cticks;        /* timestamp it */
 402bbf4:	90c00915 	stw	r3,36(r18)
   rtp->ipRouteMask = mask;
 402bbf8:	95000a15 	stw	r20,40(r18)
   rtp->ipRouteMetric5 = -1;
 402bbfc:	90800b15 	stw	r2,44(r18)
 402bc00:	003f7a06 	br	402b9ec <add_route+0x54>
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
      rtp->ipRouteType = IPRT_DIRECT;
 402bc04:	008000c4 	movi	r2,3
 402bc08:	90800715 	stw	r2,28(r18)
 402bc0c:	003ff406 	br	402bbe0 <add_route+0x248>

0402bc10 <udpswap>:
#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{

   pup->ud_srcp = htons(pup->ud_srcp);
 402bc10:	20c0000b 	ldhu	r3,0(r4)
   pup->ud_dstp = htons(pup->ud_dstp);
 402bc14:	2140008b 	ldhu	r5,2(r4)
   pup->ud_len = htons(pup->ud_len);
 402bc18:	2180010b 	ldhu	r6,4(r4)
   pup->ud_cksum = htons(pup->ud_cksum);
 402bc1c:	2080018b 	ldhu	r2,6(r4)
#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{

   pup->ud_srcp = htons(pup->ud_srcp);
 402bc20:	180e923a 	slli	r7,r3,8
   pup->ud_dstp = htons(pup->ud_dstp);
 402bc24:	2810923a 	slli	r8,r5,8
   pup->ud_len = htons(pup->ud_len);
 402bc28:	3012923a 	slli	r9,r6,8
   pup->ud_cksum = htons(pup->ud_cksum);
 402bc2c:	1014923a 	slli	r10,r2,8
#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{

   pup->ud_srcp = htons(pup->ud_srcp);
 402bc30:	1806d23a 	srli	r3,r3,8
   pup->ud_dstp = htons(pup->ud_dstp);
 402bc34:	280ad23a 	srli	r5,r5,8
   pup->ud_len = htons(pup->ud_len);
 402bc38:	300cd23a 	srli	r6,r6,8
   pup->ud_cksum = htons(pup->ud_cksum);
 402bc3c:	1004d23a 	srli	r2,r2,8
#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{

   pup->ud_srcp = htons(pup->ud_srcp);
 402bc40:	19c6b03a 	or	r3,r3,r7
   pup->ud_dstp = htons(pup->ud_dstp);
 402bc44:	2a0ab03a 	or	r5,r5,r8
   pup->ud_len = htons(pup->ud_len);
 402bc48:	324cb03a 	or	r6,r6,r9
   pup->ud_cksum = htons(pup->ud_cksum);
 402bc4c:	1284b03a 	or	r2,r2,r10
 402bc50:	2080018d 	sth	r2,6(r4)
#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{

   pup->ud_srcp = htons(pup->ud_srcp);
 402bc54:	20c0000d 	sth	r3,0(r4)
   pup->ud_dstp = htons(pup->ud_dstp);
 402bc58:	2140008d 	sth	r5,2(r4)
   pup->ud_len = htons(pup->ud_len);
 402bc5c:	2180010d 	sth	r6,4(r4)
   pup->ud_cksum = htons(pup->ud_cksum);
}
 402bc60:	f800283a 	ret

0402bc64 <udp_socket>:
unshort
udp_socket(void)
{
   UDPCONN tmp;

   if (usocket < MINSOCKET)
 402bc64:	d0a8630b 	ldhu	r2,-24180(gp)
 402bc68:	01012bc4 	movi	r4,1199
 402bc6c:	20800636 	bltu	r4,r2,402bc88 <udp_socket+0x24>
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
 402bc70:	00810134 	movhi	r2,1028
 402bc74:	10a93304 	addi	r2,r2,-23348
 402bc78:	10c00017 	ldw	r3,0(r2)
 402bc7c:	189fffcc 	andi	r2,r3,32767
 402bc80:	d0a8630d 	sth	r2,-24180(gp)
      if (usocket < MINSOCKET)
 402bc84:	2080162e 	bgeu	r4,r2,402bce0 <udp_socket+0x7c>
         usocket += MINSOCKET;
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 402bc88:	00810134 	movhi	r2,1028
 402bc8c:	10a92704 	addi	r2,r2,-23396
 402bc90:	11800017 	ldw	r6,0(r2)
 402bc94:	30000d26 	beq	r6,zero,402bccc <udp_socket+0x68>
 402bc98:	d168630b 	ldhu	r5,-24180(gp)
 402bc9c:	3009883a 	mov	r4,r6
 402bca0:	00000206 	br	402bcac <udp_socket+0x48>
 402bca4:	21000017 	ldw	r4,0(r4)
 402bca8:	20000726 	beq	r4,zero,402bcc8 <udp_socket+0x64>
   {
      if (tmp->u_lport == usocket)
 402bcac:	20c0018b 	ldhu	r3,6(r4)
 402bcb0:	28bfffcc 	andi	r2,r5,65535
 402bcb4:	10fffb1e 	bne	r2,r3,402bca4 <udp_socket+0x40>
      {
         usocket++;     /* bump socket number */
 402bcb8:	3009883a 	mov	r4,r6
      usocket = (unshort)(cticks & 0x7fff);
      if (usocket < MINSOCKET)
         usocket += MINSOCKET;
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 402bcbc:	21000017 	ldw	r4,0(r4)
   {
      if (tmp->u_lport == usocket)
      {
         usocket++;     /* bump socket number */
 402bcc0:	29400044 	addi	r5,r5,1
      usocket = (unshort)(cticks & 0x7fff);
      if (usocket < MINSOCKET)
         usocket += MINSOCKET;
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 402bcc4:	203ff91e 	bne	r4,zero,402bcac <udp_socket+0x48>
 402bcc8:	d168630d 	sth	r5,-24180(gp)
         usocket++;     /* bump socket number */
         tmp = firstudp;   /* restart scan */
         continue;
      }
   }
   return usocket++;
 402bccc:	d0a8630b 	ldhu	r2,-24180(gp)
 402bcd0:	10c00044 	addi	r3,r2,1
}
 402bcd4:	10bfffcc 	andi	r2,r2,65535
         usocket++;     /* bump socket number */
         tmp = firstudp;   /* restart scan */
         continue;
      }
   }
   return usocket++;
 402bcd8:	d0e8630d 	sth	r3,-24180(gp)
}
 402bcdc:	f800283a 	ret
   if (usocket < MINSOCKET)
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
      if (usocket < MINSOCKET)
         usocket += MINSOCKET;
 402bce0:	10812c04 	addi	r2,r2,1200
 402bce4:	d0a8630d 	sth	r2,-24180(gp)
 402bce8:	003fe706 	br	402bc88 <udp_socket+0x24>

0402bcec <udp_maxalloc>:
 *          returned value, the allocation will fail
 */

int
udp_maxalloc(void)
{
 402bcec:	00c10134 	movhi	r3,1028
 402bcf0:	18e13104 	addi	r3,r3,-31548
 402bcf4:	18800017 	ldw	r2,0(r3)
#else
   /* if heap buffers are not available, the largest size of a UDP datagram
    * is constrained by what will fit inside a big buffer */
   return (bigbufsiz - UDPHDRSLEN);
#endif
}
 402bcf8:	10bff704 	addi	r2,r2,-36
 402bcfc:	f800283a 	ret

0402bd00 <udp_free>:
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
 402bd00:	defffd04 	addi	sp,sp,-12
 402bd04:	dcc00115 	stw	r19,4(sp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402bd08:	04c00084 	movi	r19,2
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
 402bd0c:	dc400015 	stw	r17,0(sp)
 402bd10:	2023883a 	mov	r17,r4
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402bd14:	9809883a 	mov	r4,r19
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
 402bd18:	dfc00215 	stw	ra,8(sp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402bd1c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 402bd20:	8809883a 	mov	r4,r17
 402bd24:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402bd28:	9809883a 	mov	r4,r19
}
 402bd2c:	dfc00217 	ldw	ra,8(sp)
 402bd30:	dcc00117 	ldw	r19,4(sp)
 402bd34:	dc400017 	ldw	r17,0(sp)
 402bd38:	dec00304 	addi	sp,sp,12
void
udp_free(PACKET p)
{
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402bd3c:	401c92c1 	jmpi	401c92c <UNLOCK_NET_RESOURCE>

0402bd40 <udp_alloc>:
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
 402bd40:	defffd04 	addi	sp,sp,-12
 402bd44:	dc400015 	stw	r17,0(sp)
 402bd48:	2023883a 	mov	r17,r4
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402bd4c:	01000084 	movi	r4,2
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
 402bd50:	dfc00215 	stw	ra,8(sp)
 402bd54:	dcc00115 	stw	r19,4(sp)
 402bd58:	2827883a 	mov	r19,r5
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402bd5c:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + UDPHDRSLEN + optlen);
 402bd60:	00bfff84 	movi	r2,-2
 402bd64:	8c400244 	addi	r17,r17,9
 402bd68:	88a2703a 	and	r17,r17,r2
 402bd6c:	99000904 	addi	r4,r19,36
 402bd70:	8909883a 	add	r4,r17,r4
 402bd74:	401bf840 	call	401bf84 <pk_alloc>
 402bd78:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402bd7c:	01000084 	movi	r4,2
 402bd80:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (p != (PACKET)NULL)
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
      p->nb_prot += len;
 402bd84:	9809d0ba 	srai	r4,r19,2
   len = (datalen + sizeof(struct udp) + 1) & ~1;
   LOCK_NET_RESOURCE(FREEQ_RESID);
   p = pk_alloc(len + UDPHDRSLEN + optlen);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);

   if (p != (PACKET)NULL)
 402bd88:	88000726 	beq	r17,zero,402bda8 <udp_alloc+0x68>
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
      p->nb_prot += len;
 402bd8c:	88800317 	ldw	r2,12(r17)
      p->nb_plen -= len;
 402bd90:	88c00417 	ldw	r3,16(r17)

   if (p != (PACKET)NULL)
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
      p->nb_prot += len;
 402bd94:	21000704 	addi	r4,r4,28
 402bd98:	1105883a 	add	r2,r2,r4
      p->nb_plen -= len;
 402bd9c:	1907c83a 	sub	r3,r3,r4

   if (p != (PACKET)NULL)
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
      p->nb_prot += len;
 402bda0:	88800315 	stw	r2,12(r17)
      p->nb_plen -= len;
 402bda4:	88c00415 	stw	r3,16(r17)
   }

   return (p);
}
 402bda8:	8805883a 	mov	r2,r17
 402bdac:	dfc00217 	ldw	ra,8(sp)
 402bdb0:	dcc00117 	ldw	r19,4(sp)
 402bdb4:	dc400017 	ldw	r17,0(sp)
 402bdb8:	dec00304 	addi	sp,sp,12
 402bdbc:	f800283a 	ret

0402bdc0 <udp_send>:
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
 402bdc0:	00810134 	movhi	r2,1028
 402bdc4:	10a90e04 	addi	r2,r2,-23496
 402bdc8:	10c00017 	ldw	r3,0(r2)
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
 402bdcc:	defff304 	addi	sp,sp,-52
 402bdd0:	dd000b15 	stw	r20,44(sp)
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
 402bdd4:	18c0410c 	andi	r3,r3,260
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
 402bdd8:	dcc00a15 	stw	r19,40(sp)
 402bddc:	dc400815 	stw	r17,32(sp)
 402bde0:	dfc00c15 	stw	ra,48(sp)
 402bde4:	dc800915 	stw	r18,36(sp)
 402bde8:	dc000715 	stw	r16,28(sp)
 402bdec:	2029883a 	mov	r20,r4
 402bdf0:	2827883a 	mov	r19,r5
 402bdf4:	3023883a 	mov	r17,r6
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
 402bdf8:	18004f1e 	bne	r3,zero,402bf38 <udp_send+0x178>
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 402bdfc:	0009883a 	mov	r4,zero
 402be00:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
   pup = (struct udp*)p->nb_prot;
   udplen = p->nb_plen + sizeof(struct udp);
 402be04:	88c00417 	ldw	r3,16(r17)
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
 402be08:	89000317 	ldw	r4,12(r17)
   pup = (struct udp*)p->nb_prot;
   udplen = p->nb_plen + sizeof(struct udp);
 402be0c:	1c800204 	addi	r18,r3,8
   p->nb_plen = udplen;
   if (udplen & 1) ((char *)pup)[udplen] = 0;
 402be10:	9080004c 	andi	r2,r18,1
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
 402be14:	243ffe04 	addi	r16,r4,-8
   pup = (struct udp*)p->nb_prot;
   udplen = p->nb_plen + sizeof(struct udp);
   p->nb_plen = udplen;
   if (udplen & 1) ((char *)pup)[udplen] = 0;
 402be18:	1005003a 	cmpeq	r2,r2,zero
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
 402be1c:	8c000315 	stw	r16,12(r17)
   pup = (struct udp*)p->nb_prot;
   udplen = p->nb_plen + sizeof(struct udp);
   p->nb_plen = udplen;
 402be20:	8c800415 	stw	r18,16(r17)
   if (udplen & 1) ((char *)pup)[udplen] = 0;
 402be24:	1000021e 	bne	r2,zero,402be30 <udp_send+0x70>
 402be28:	8485883a 	add	r2,r16,r18
 402be2c:	10000005 	stb	zero,0(r2)

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
   pup->ud_srcp = lport;
 402be30:	24fffe0d 	sth	r19,-8(r4)
   pup->ud_dstp = fport;
 402be34:	8500008d 	sth	r20,2(r16)
   pup = (struct udp*)p->nb_prot;
   udplen = p->nb_plen + sizeof(struct udp);
   p->nb_plen = udplen;
   if (udplen & 1) ((char *)pup)[udplen] = 0;

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
 402be38:	8480010d 	sth	r18,4(r16)
   pup->ud_srcp = lport;
   pup->ud_dstp = fport;

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 402be3c:	8009883a 	mov	r4,r16
 402be40:	402bc100 	call	402bc10 <udpswap>
#endif   /* BYTE_ORDER */
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
 402be44:	88c00717 	ldw	r3,28(r17)
 402be48:	00bfffc4 	movi	r2,-1
 402be4c:	18803626 	beq	r3,r2,402bf28 <udp_send+0x168>
   /* set the IP addresses in the IP header. The pseudo header used for
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
 402be50:	1809883a 	mov	r4,r3
 402be54:	40284380 	call	4028438 <ip_mymach>
 402be58:	88c00717 	ldw	r3,28(r17)
 402be5c:	1027883a 	mov	r19,r2
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
   php.ph_prot = UDP_PROT;
 402be60:	00800444 	movi	r2,17
 402be64:	d8800645 	stb	r2,25(sp)
#ifdef NO_UDP_CKSUM
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
 402be68:	d8000605 	stb	zero,24(sp)
   php.ph_prot = UDP_PROT;
   php.ph_len = pup->ud_len;
 402be6c:	8080010b 	ldhu	r2,4(r16)
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 402be70:	d9000404 	addi	r4,sp,16
 402be74:	01400184 	movi	r5,6
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
   php.ph_src = src_ip;
   php.ph_dest = p->fhost;
 402be78:	d8c00515 	stw	r3,20(sp)
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
   php.ph_prot = UDP_PROT;
   php.ph_len = pup->ud_len;
 402be7c:	d880068d 	sth	r2,26(sp)
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
   php.ph_src = src_ip;
 402be80:	dcc00415 	stw	r19,16(sp)
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
   php.ph_prot = UDP_PROT;
   php.ph_len = pup->ud_len;
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 402be84:	40199b00 	call	40199b0 <cksum>
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
 402be88:	91400044 	addi	r5,r18,1
 402be8c:	280bd07a 	srai	r5,r5,1
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
   php.ph_prot = UDP_PROT;
   php.ph_len = pup->ud_len;
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 402be90:	8080018d 	sth	r2,6(r16)
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
 402be94:	8009883a 	mov	r4,r16
 402be98:	40199b00 	call	40199b0 <cksum>
 402be9c:	0084303a 	nor	r2,zero,r2
   if (pup->ud_cksum == 0)
 402bea0:	10ffffcc 	andi	r3,r2,65535
 402bea4:	18e0001c 	xori	r3,r3,32768
 402bea8:	18e00004 	addi	r3,r3,-32768
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
   php.ph_prot = UDP_PROT;
   php.ph_len = pup->ud_len;
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
 402beac:	8080018d 	sth	r2,6(r16)
   if (pup->ud_cksum == 0)
 402beb0:	18001a26 	beq	r3,zero,402bf1c <udp_send+0x15c>
      pup->ud_cksum = 0xffff;
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
 402beb4:	88c00317 	ldw	r3,12(r17)
   pip->ip_src = src_ip;
   pip->ip_dest = p->fhost;

   udp_mib.udpOutDatagrams++;
 402beb8:	01c10134 	movhi	r7,1028
 402bebc:	39ce1b04 	addi	r7,r7,14444

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
   e = ip_write(UDP_PROT, p);
 402bec0:	01000444 	movi	r4,17
   if (pup->ud_cksum == 0)
      pup->ud_cksum = 0xffff;
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
 402bec4:	18fffb04 	addi	r3,r3,-20
   pip->ip_src = src_ip;
 402bec8:	1cc00315 	stw	r19,12(r3)
   pip->ip_dest = p->fhost;
 402becc:	89800717 	ldw	r6,28(r17)

   udp_mib.udpOutDatagrams++;

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
 402bed0:	8c800415 	stw	r18,16(r17)
   e = ip_write(UDP_PROT, p);
 402bed4:	880b883a 	mov	r5,r17
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
   pip->ip_src = src_ip;
   pip->ip_dest = p->fhost;
 402bed8:	19800415 	stw	r6,16(r3)

   udp_mib.udpOutDatagrams++;
 402bedc:	38800317 	ldw	r2,12(r7)
 402bee0:	10800044 	addi	r2,r2,1
 402bee4:	38800315 	stw	r2,12(r7)

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
   e = ip_write(UDP_PROT, p);
 402bee8:	40295240 	call	4029524 <ip_write>
   UNLOCK_NET_RESOURCE(NET_RESID);
 402beec:	0009883a 	mov	r4,zero
   pip->ip_dest = p->fhost;

   udp_mib.udpOutDatagrams++;

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
   e = ip_write(UDP_PROT, p);
 402bef0:	1021883a 	mov	r16,r2
   UNLOCK_NET_RESOURCE(NET_RESID);
 402bef4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   return e;
}
 402bef8:	8005883a 	mov	r2,r16
 402befc:	dfc00c17 	ldw	ra,48(sp)
 402bf00:	dd000b17 	ldw	r20,44(sp)
 402bf04:	dcc00a17 	ldw	r19,40(sp)
 402bf08:	dc800917 	ldw	r18,36(sp)
 402bf0c:	dc400817 	ldw	r17,32(sp)
 402bf10:	dc000717 	ldw	r16,28(sp)
 402bf14:	dec00d04 	addi	sp,sp,52
 402bf18:	f800283a 	ret
   php.ph_prot = UDP_PROT;
   php.ph_len = pup->ud_len;
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
   if (pup->ud_cksum == 0)
      pup->ud_cksum = 0xffff;
 402bf1c:	00bfffc4 	movi	r2,-1
 402bf20:	8080018d 	sth	r2,6(r16)
 402bf24:	003fe306 	br	402beb4 <udp_send+0xf4>
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
   {
      if (!p->net)
 402bf28:	88800617 	ldw	r2,24(r17)
 402bf2c:	10001426 	beq	r2,zero,402bf80 <udp_send+0x1c0>
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
         UNLOCK_NET_RESOURCE(NET_RESID);
         return ENP_NO_IFACE;
      }
      src_ip = p->net->n_ipaddr;
 402bf30:	14c00a17 	ldw	r19,40(r2)
 402bf34:	003fca06 	br	402be60 <udp_send+0xa0>
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 402bf38:	89c00717 	ldw	r7,28(r17)
 402bf3c:	89400417 	ldw	r5,16(r17)
 402bf40:	227fffcc 	andi	r9,r4,65535
 402bf44:	3804d23a 	srli	r2,r7,8
 402bf48:	3806d43a 	srli	r3,r7,16
 402bf4c:	3810d63a 	srli	r8,r7,24
 402bf50:	10803fcc 	andi	r2,r2,255
 402bf54:	18c03fcc 	andi	r3,r3,255
 402bf58:	99bfffcc 	andi	r6,r19,65535
 402bf5c:	39c03fcc 	andi	r7,r7,255
 402bf60:	010100f4 	movhi	r4,1027
 402bf64:	2116fd04 	addi	r4,r4,23540
 402bf68:	d8800015 	stw	r2,0(sp)
 402bf6c:	d8c00115 	stw	r3,4(sp)
 402bf70:	da000215 	stw	r8,8(sp)
 402bf74:	da400315 	stw	r9,12(sp)
 402bf78:	4002ed40 	call	4002ed4 <printf>
 402bf7c:	003f9f06 	br	402bdfc <udp_send+0x3c>
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
   {
      if (!p->net)
      {
         dtrap();    /* programmer forgot to select iface */
 402bf80:	401c81c0 	call	401c81c <dtrap>
         /* it would appear that the callers of udp_send() expect it
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
 402bf84:	8809883a 	mov	r4,r17
 402bf88:	402bd000 	call	402bd00 <udp_free>
         UNLOCK_NET_RESOURCE(NET_RESID);
 402bf8c:	0009883a 	mov	r4,zero
 402bf90:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 402bf94:	043ff784 	movi	r16,-34
 402bf98:	003fd706 	br	402bef8 <udp_send+0x138>

0402bf9c <udpdemux>:
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
 402bf9c:	defff204 	addi	sp,sp,-56
 402bfa0:	dd000b15 	stw	r20,44(sp)
   unsigned short osum, xsum; /* scratch checksum holders */
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
 402bfa4:	25000317 	ldw	r20,12(r4)
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
 402bfa8:	dcc00a15 	stw	r19,40(sp)
 402bfac:	dc800915 	stw	r18,36(sp)
 402bfb0:	dc400815 	stw	r17,32(sp)
 402bfb4:	dfc00d15 	stw	ra,52(sp)
 402bfb8:	dd400c15 	stw	r21,48(sp)
 402bfbc:	dc000715 	stw	r16,28(sp)
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
 402bfc0:	a0800003 	ldbu	r2,0(r20)
   plen = htons(pup->ud_len);

   if (plen > p->nb_plen)
 402bfc4:	21400417 	ldw	r5,16(r4)
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
 402bfc8:	2025883a 	mov	r18,r4
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
 402bfcc:	108003cc 	andi	r2,r2,15
 402bfd0:	1085883a 	add	r2,r2,r2
 402bfd4:	1085883a 	add	r2,r2,r2
 402bfd8:	1523883a 	add	r17,r2,r20
   plen = htons(pup->ud_len);
 402bfdc:	88c0010b 	ldhu	r3,4(r17)
 402bfe0:	1804923a 	slli	r2,r3,8
 402bfe4:	1806d23a 	srli	r3,r3,8
 402bfe8:	10bfc00c 	andi	r2,r2,65280
 402bfec:	18a6b03a 	or	r19,r3,r2

   if (plen > p->nb_plen)
 402bff0:	2cc0cb36 	bltu	r5,r19,402c320 <udpdemux+0x384>
      udp_mib.udpInErrors++;
      udp_free(p);
      return ENP_BAD_HEADER;
   }

   osum = pup->ud_cksum;
 402bff4:	8d40018b 	ldhu	r21,6(r17)
   /* did other guy use checksumming? */
   if (osum)
 402bff8:	ac3fffcc 	andi	r16,r21,65535
 402bffc:	80001d26 	beq	r16,zero,402c074 <udpdemux+0xd8>
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
 402c000:	9880004c 	andi	r2,r19,1
 402c004:	1005003a 	cmpeq	r2,r2,zero
 402c008:	10008d26 	beq	r2,zero,402c240 <udpdemux+0x2a4>
         php.ph_src = p->fhost;
 402c00c:	90800717 	ldw	r2,28(r18)
      php.ph_dest = pip->ip_dest;
      php.ph_zero = 0;
      php.ph_prot = UDP_PROT;
      php.ph_len  = pup->ud_len;

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 402c010:	d9000404 	addi	r4,sp,16
 402c014:	01400184 	movi	r5,6
   osum = pup->ud_cksum;
   /* did other guy use checksumming? */
   if (osum)
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
         php.ph_src = p->fhost;
 402c018:	d8800415 	stw	r2,16(sp)
      php.ph_dest = pip->ip_dest;
      php.ph_zero = 0;
      php.ph_prot = UDP_PROT;
 402c01c:	00800444 	movi	r2,17
   /* did other guy use checksumming? */
   if (osum)
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
         php.ph_src = p->fhost;
      php.ph_dest = pip->ip_dest;
 402c020:	a0c00417 	ldw	r3,16(r20)
      php.ph_zero = 0;
      php.ph_prot = UDP_PROT;
 402c024:	d8800645 	stb	r2,25(sp)
   if (osum)
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
         php.ph_src = p->fhost;
      php.ph_dest = pip->ip_dest;
      php.ph_zero = 0;
 402c028:	d8000605 	stb	zero,24(sp)
      php.ph_prot = UDP_PROT;
      php.ph_len  = pup->ud_len;
 402c02c:	8880010b 	ldhu	r2,4(r17)
   /* did other guy use checksumming? */
   if (osum)
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
         php.ph_src = p->fhost;
      php.ph_dest = pip->ip_dest;
 402c030:	d8c00515 	stw	r3,20(sp)
      php.ph_zero = 0;
      php.ph_prot = UDP_PROT;
      php.ph_len  = pup->ud_len;
 402c034:	d880068d 	sth	r2,26(sp)

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 402c038:	40199b00 	call	40199b0 <cksum>
      xsum = ~cksum(pup, (plen+1)>>1);
 402c03c:	99400044 	addi	r5,r19,1
 402c040:	280ad07a 	srli	r5,r5,1
      php.ph_dest = pip->ip_dest;
      php.ph_zero = 0;
      php.ph_prot = UDP_PROT;
      php.ph_len  = pup->ud_len;

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 402c044:	8880018d 	sth	r2,6(r17)
      xsum = ~cksum(pup, (plen+1)>>1);
 402c048:	8809883a 	mov	r4,r17
 402c04c:	40199b00 	call	40199b0 <cksum>
 402c050:	0086303a 	nor	r3,zero,r2
      if (!xsum)
 402c054:	18bfffcc 	andi	r2,r3,65535
 402c058:	10a0001c 	xori	r2,r2,32768
 402c05c:	10a00004 	addi	r2,r2,-32768
 402c060:	1000751e 	bne	r2,zero,402c238 <udpdemux+0x29c>
 402c064:	00bfffc4 	movi	r2,-1
         xsum = 0xffff;
      pup->ud_cksum = osum;
      if (xsum != osum)
 402c068:	11bfffcc 	andi	r6,r2,65535

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
      xsum = ~cksum(pup, (plen+1)>>1);
      if (!xsum)
         xsum = 0xffff;
      pup->ud_cksum = osum;
 402c06c:	8d40018d 	sth	r21,6(r17)
      if (xsum != osum)
 402c070:	3400861e 	bne	r6,r16,402c28c <udpdemux+0x2f0>
         return ENP_BAD_HEADER;
      }
   }

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 402c074:	8809883a 	mov	r4,r17
 402c078:	402bc100 	call	402bc10 <udpswap>
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
   p->nb_plen -= e;
 402c07c:	a0800003 	ldbu	r2,0(r20)
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c080:	05410134 	movhi	r21,1028
 402c084:	ad690e04 	addi	r21,r21,-23496
   udpswap(pup);
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
   p->nb_plen -= e;
 402c088:	91400417 	ldw	r5,16(r18)
 402c08c:	108003cc 	andi	r2,r2,15
   p->nb_prot += e;
 402c090:	90c00317 	ldw	r3,12(r18)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c094:	a9000017 	ldw	r4,0(r21)
   udpswap(pup);
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
   p->nb_plen -= e;
 402c098:	1085883a 	add	r2,r2,r2
 402c09c:	1085883a 	add	r2,r2,r2
 402c0a0:	10800204 	addi	r2,r2,8
   p->nb_prot += e;
 402c0a4:	1887883a 	add	r3,r3,r2
   udpswap(pup);
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
   p->nb_plen -= e;
 402c0a8:	288bc83a 	sub	r5,r5,r2
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c0ac:	2101400c 	andi	r4,r4,1280
 402c0b0:	00814004 	movi	r2,1280
   udpswap(pup);
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
   p->nb_plen -= e;
 402c0b4:	91400415 	stw	r5,16(r18)
   p->nb_prot += e;
 402c0b8:	90c00315 	stw	r3,12(r18)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c0bc:	20808226 	beq	r4,r2,402c2c8 <udpdemux+0x32c>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
 402c0c0:	00810134 	movhi	r2,1028
 402c0c4:	10a92704 	addi	r2,r2,-23396
 402c0c8:	14000017 	ldw	r16,0(r2)
 402c0cc:	80005f26 	beq	r16,zero,402c24c <udpdemux+0x2b0>
 402c0d0:	a2400417 	ldw	r9,16(r20)
 402c0d4:	4804963a 	slli	r2,r9,24
 402c0d8:	12fc002c 	andhi	r11,r2,61440
 402c0dc:	00000406 	br	402c0f0 <udpdemux+0x154>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
 402c0e0:	8880008b 	ldhu	r2,2(r17)
 402c0e4:	18800426 	beq	r3,r2,402c0f8 <udpdemux+0x15c>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
 402c0e8:	84000017 	ldw	r16,0(r16)
 402c0ec:	80005826 	beq	r16,zero,402c250 <udpdemux+0x2b4>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
 402c0f0:	80c0018b 	ldhu	r3,6(r16)
 402c0f4:	183ffa1e 	bne	r3,zero,402c0e0 <udpdemux+0x144>
         continue;
      if (con->u_fport && (con->u_fport != pup->ud_srcp))
 402c0f8:	80c0020b 	ldhu	r3,8(r16)
 402c0fc:	18000226 	beq	r3,zero,402c108 <udpdemux+0x16c>
 402c100:	8880000b 	ldhu	r2,0(r17)
 402c104:	18bff81e 	bne	r3,r2,402c0e8 <udpdemux+0x14c>
         continue;
      if (con->u_fhost && (con->u_fhost != p->fhost))
 402c108:	80c00417 	ldw	r3,16(r16)
 402c10c:	18000226 	beq	r3,zero,402c118 <udpdemux+0x17c>
 402c110:	90800717 	ldw	r2,28(r18)
 402c114:	18bff41e 	bne	r3,r2,402c0e8 <udpdemux+0x14c>
#ifdef IP_MULTICAST
      /* In the case of multicast, check if there is multicast membership
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
 402c118:	00b80034 	movhi	r2,57344
 402c11c:	58802326 	beq	r11,r2,402c1ac <udpdemux+0x210>
      /* if this endpoint has been bound to a local interface address,
       * make sure the packet was received on that interface address
       */
      if (!IN_MULTICAST(ntohl(pip->ip_dest)))
      {
         if ((con->u_lhost != 0) && (con->u_lhost != pip->ip_dest)) 
 402c120:	80800317 	ldw	r2,12(r16)
 402c124:	10000126 	beq	r2,zero,402c12c <udpdemux+0x190>
 402c128:	48bfef1e 	bne	r9,r2,402c0e8 <udpdemux+0x14c>
 402c12c:	82800517 	ldw	r10,20(r16)
            continue;
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
 402c130:	04410134 	movhi	r17,1028
 402c134:	8c4e1b04 	addi	r17,r17,14444
 402c138:	88800017 	ldw	r2,0(r17)
 402c13c:	10800044 	addi	r2,r2,1
 402c140:	88800015 	stw	r2,0(r17)
      if (con->u_rcv)         /* if upcall address is set... */
 402c144:	50003a26 	beq	r10,zero,402c230 <udpdemux+0x294>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 402c148:	0009883a 	mov	r4,zero
 402c14c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
         e = ((*con->u_rcv)(p, con->u_data));   /* upcall it */
 402c150:	81400617 	ldw	r5,24(r16)
 402c154:	80c00517 	ldw	r3,20(r16)
 402c158:	9009883a 	mov	r4,r18
 402c15c:	183ee83a 	callr	r3
 402c160:	1021883a 	mov	r16,r2
         LOCK_NET_RESOURCE(NET_RESID);
 402c164:	0009883a 	mov	r4,zero
 402c168:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      else
         e = ENP_LOGIC;

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
 402c16c:	80000526 	beq	r16,zero,402c184 <udpdemux+0x1e8>
      {
         udp_mib.udpInErrors++;
 402c170:	88800217 	ldw	r2,8(r17)
         udp_free(p);
 402c174:	9009883a 	mov	r4,r18

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
      {
         udp_mib.udpInErrors++;
 402c178:	10800044 	addi	r2,r2,1
 402c17c:	88800215 	stw	r2,8(r17)
         udp_free(p);
 402c180:	402bd000 	call	402bd00 <udp_free>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
   udp_free(p);
   return ENP_NOT_MINE;
}
 402c184:	8005883a 	mov	r2,r16
 402c188:	dfc00d17 	ldw	ra,52(sp)
 402c18c:	dd400c17 	ldw	r21,48(sp)
 402c190:	dd000b17 	ldw	r20,44(sp)
 402c194:	dcc00a17 	ldw	r19,40(sp)
 402c198:	dc800917 	ldw	r18,36(sp)
 402c19c:	dc400817 	ldw	r17,32(sp)
 402c1a0:	dc000717 	ldw	r16,28(sp)
 402c1a4:	dec00e04 	addi	sp,sp,56
 402c1a8:	f800283a 	ret
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
      {
         struct socket *soptr = (struct socket *)con->u_data;

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
 402c1ac:	82800517 	ldw	r10,20(r16)
 402c1b0:	008100b4 	movhi	r2,1026
 402c1b4:	10972604 	addi	r2,r2,23704
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
      {
         struct socket *soptr = (struct socket *)con->u_data;
 402c1b8:	80c00617 	ldw	r3,24(r16)

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
 402c1bc:	50bfdc1e 	bne	r10,r2,402c130 <udpdemux+0x194>
 402c1c0:	19800317 	ldw	r6,12(r3)
 402c1c4:	303fda26 	beq	r6,zero,402c130 <udpdemux+0x194>
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
 402c1c8:	3200018b 	ldhu	r8,6(r6)
 402c1cc:	403fc626 	beq	r8,zero,402c0e8 <udpdemux+0x14c>
 402c1d0:	0007883a 	mov	r3,zero
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 402c1d4:	18c5883a 	add	r2,r3,r3
 402c1d8:	1085883a 	add	r2,r2,r2
 402c1dc:	1185883a 	add	r2,r2,r6
 402c1e0:	11000217 	ldw	r4,8(r2)
 402c1e4:	91c00617 	ldw	r7,24(r18)
 402c1e8:	000b883a 	mov	r5,zero
 402c1ec:	20800117 	ldw	r2,4(r4)
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
 402c1f0:	29400044 	addi	r5,r5,1
 402c1f4:	28ffffcc 	andi	r3,r5,65535
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 402c1f8:	11c00926 	beq	r2,r7,402c220 <udpdemux+0x284>
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
 402c1fc:	1a3fba26 	beq	r3,r8,402c0e8 <udpdemux+0x14c>
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 402c200:	18c5883a 	add	r2,r3,r3
 402c204:	1085883a 	add	r2,r2,r2
 402c208:	1185883a 	add	r2,r2,r6
 402c20c:	11000217 	ldw	r4,8(r2)
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
 402c210:	29400044 	addi	r5,r5,1
 402c214:	28ffffcc 	andi	r3,r5,65535
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 402c218:	20800117 	ldw	r2,4(r4)
 402c21c:	11fff71e 	bne	r2,r7,402c1fc <udpdemux+0x260>
 402c220:	20800017 	ldw	r2,0(r4)
 402c224:	48bfc226 	beq	r9,r2,402c130 <udpdemux+0x194>
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
 402c228:	1a3ff51e 	bne	r3,r8,402c200 <udpdemux+0x264>
 402c22c:	003fae06 	br	402c0e8 <udpdemux+0x14c>
            continue;
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
      if (con->u_rcv)         /* if upcall address is set... */
 402c230:	043ffd44 	movi	r16,-11
 402c234:	003fce06 	br	402c170 <udpdemux+0x1d4>
      php.ph_zero = 0;
      php.ph_prot = UDP_PROT;
      php.ph_len  = pup->ud_len;

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
      xsum = ~cksum(pup, (plen+1)>>1);
 402c238:	1805883a 	mov	r2,r3
 402c23c:	003f8a06 	br	402c068 <udpdemux+0xcc>

   osum = pup->ud_cksum;
   /* did other guy use checksumming? */
   if (osum)
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
 402c240:	8cc5883a 	add	r2,r17,r19
 402c244:	10000005 	stb	zero,0(r2)
 402c248:	003f7006 	br	402c00c <udpdemux+0x70>
 402c24c:	a2400417 	ldw	r9,16(r20)

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 402c250:	00bfffc4 	movi	r2,-1
 402c254:	48803d1e 	bne	r9,r2,402c34c <udpdemux+0x3b0>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c258:	a8800017 	ldw	r2,0(r21)
 402c25c:	00c14004 	movi	r3,1280
 402c260:	1081400c 	andi	r2,r2,1280
 402c264:	10c02a26 	beq	r2,r3,402c310 <udpdemux+0x374>
         dprintf("UDP: ignoring ip broadcast\n");
#endif
      udp_mib.udpInErrors++;
 402c268:	00c10134 	movhi	r3,1028
 402c26c:	18ce1b04 	addi	r3,r3,14444
 402c270:	18800217 	ldw	r2,8(r3)
      udp_free(p);
 402c274:	9009883a 	mov	r4,r18
 402c278:	04000084 	movi	r16,2
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         dprintf("UDP: ignoring ip broadcast\n");
#endif
      udp_mib.udpInErrors++;
 402c27c:	10800044 	addi	r2,r2,1
 402c280:	18800215 	stw	r2,8(r3)
      udp_free(p);
 402c284:	402bd000 	call	402bd00 <udp_free>
 402c288:	003fbe06 	br	402c184 <udpdemux+0x1e8>
         xsum = 0xffff;
      pup->ud_cksum = osum;
      if (xsum != osum)
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c28c:	04410134 	movhi	r17,1028
 402c290:	8c690e04 	addi	r17,r17,-23496
 402c294:	88800017 	ldw	r2,0(r17)
 402c298:	00c14004 	movi	r3,1280
 402c29c:	1081400c 	andi	r2,r2,1280
 402c2a0:	10c04726 	beq	r2,r3,402c3c0 <udpdemux+0x424>
                    osum, xsum, PUSH_IPADDR(p->fhost));
            if (NDEBUG & DUMP)
               ip_dump(p);
         }
#endif
         udp_mib.udpInErrors++;
 402c2a4:	00c10134 	movhi	r3,1028
 402c2a8:	18ce1b04 	addi	r3,r3,14444
 402c2ac:	18800217 	ldw	r2,8(r3)
         udp_free(p);
 402c2b0:	9009883a 	mov	r4,r18
 402c2b4:	043ff804 	movi	r16,-32
                    osum, xsum, PUSH_IPADDR(p->fhost));
            if (NDEBUG & DUMP)
               ip_dump(p);
         }
#endif
         udp_mib.udpInErrors++;
 402c2b8:	10800044 	addi	r2,r2,1
 402c2bc:	18800215 	stw	r2,8(r3)
         udp_free(p);
 402c2c0:	402bd000 	call	402bd00 <udp_free>
 402c2c4:	003faf06 	br	402c184 <udpdemux+0x1e8>
   p->nb_prot += e;

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 402c2c8:	91800717 	ldw	r6,28(r18)
 402c2cc:	980b883a 	mov	r5,r19
 402c2d0:	010100f4 	movhi	r4,1027
 402c2d4:	21171f04 	addi	r4,r4,23676
 402c2d8:	3004d43a 	srli	r2,r6,16
 402c2dc:	3010d63a 	srli	r8,r6,24
 402c2e0:	300ed23a 	srli	r7,r6,8
 402c2e4:	10803fcc 	andi	r2,r2,255
 402c2e8:	d8800015 	stw	r2,0(sp)
 402c2ec:	da000115 	stw	r8,4(sp)
 402c2f0:	88c0000b 	ldhu	r3,0(r17)
 402c2f4:	31803fcc 	andi	r6,r6,255
 402c2f8:	39c03fcc 	andi	r7,r7,255
 402c2fc:	d8c00215 	stw	r3,8(sp)
 402c300:	8880008b 	ldhu	r2,2(r17)
 402c304:	d8800315 	stw	r2,12(sp)
 402c308:	4002ed40 	call	4002ed4 <printf>
 402c30c:	003f6c06 	br	402c0c0 <udpdemux+0x124>
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         dprintf("UDP: ignoring ip broadcast\n");
 402c310:	010100f4 	movhi	r4,1027
 402c314:	21172904 	addi	r4,r4,23716
 402c318:	4002fec0 	call	4002fec <puts>
 402c31c:	003fd206 	br	402c268 <udpdemux+0x2cc>
#ifdef   NPDEBUG
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c320:	00810134 	movhi	r2,1028
 402c324:	10a90e04 	addi	r2,r2,-23496
 402c328:	10c00017 	ldw	r3,0(r2)
 402c32c:	00814004 	movi	r2,1280
 402c330:	18c1400c 	andi	r3,r3,1280
 402c334:	18bfdb1e 	bne	r3,r2,402c2a4 <udpdemux+0x308>
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
 402c338:	99800204 	addi	r6,r19,8
 402c33c:	010100f4 	movhi	r4,1027
 402c340:	21170704 	addi	r4,r4,23580
 402c344:	4002ed40 	call	4002ed4 <printf>
 402c348:	003fd606 	br	402c2a4 <udpdemux+0x308>

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 402c34c:	90c00617 	ldw	r3,24(r18)
 402c350:	18800e17 	ldw	r2,56(r3)
 402c354:	48bfc026 	beq	r9,r2,402c258 <udpdemux+0x2bc>
 402c358:	18800f17 	ldw	r2,60(r3)
 402c35c:	48bfbe26 	beq	r9,r2,402c258 <udpdemux+0x2bc>
 402c360:	18801017 	ldw	r2,64(r3)
 402c364:	48bfbc26 	beq	r9,r2,402c258 <udpdemux+0x2bc>
      udp_free(p);
      return ENP_NOT_MINE;
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 402c368:	a8800017 	ldw	r2,0(r21)
 402c36c:	00c14004 	movi	r3,1280
 402c370:	1081400c 	andi	r2,r2,1280
 402c374:	10c02626 	beq	r2,r3,402c410 <udpdemux+0x474>
#ifdef FULL_ICMP
   /* send destination unreachable.  Swap back all the swapped information */
   /* so that the destun packet format is correct */

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 402c378:	8809883a 	mov	r4,r17
 402c37c:	402bc100 	call	402bc10 <udpswap>
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
 402c380:	90800617 	ldw	r2,24(r18)
 402c384:	91000717 	ldw	r4,28(r18)
 402c388:	a00d883a 	mov	r6,r20
 402c38c:	11400a17 	ldw	r5,40(r2)
 402c390:	01c000c4 	movi	r7,3
 402c394:	d8800015 	stw	r2,0(sp)
 402c398:	402fcc40 	call	402fcc4 <icmp_destun>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
 402c39c:	00c10134 	movhi	r3,1028
 402c3a0:	18ce1b04 	addi	r3,r3,14444
 402c3a4:	18800117 	ldw	r2,4(r3)
   udp_free(p);
 402c3a8:	9009883a 	mov	r4,r18
 402c3ac:	04000084 	movi	r16,2
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
 402c3b0:	10800044 	addi	r2,r2,1
 402c3b4:	18800115 	stw	r2,4(r3)
   udp_free(p);
 402c3b8:	402bd000 	call	402bd00 <udp_free>
 402c3bc:	003f7106 	br	402c184 <udpdemux+0x1e8>
      if (xsum != osum)
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 402c3c0:	91c00717 	ldw	r7,28(r18)
 402c3c4:	800b883a 	mov	r5,r16
 402c3c8:	010100f4 	movhi	r4,1027
 402c3cc:	21171104 	addi	r4,r4,23620
 402c3d0:	3804d23a 	srli	r2,r7,8
 402c3d4:	3806d43a 	srli	r3,r7,16
 402c3d8:	3810d63a 	srli	r8,r7,24
 402c3dc:	10803fcc 	andi	r2,r2,255
 402c3e0:	18c03fcc 	andi	r3,r3,255
 402c3e4:	39c03fcc 	andi	r7,r7,255
 402c3e8:	d8c00115 	stw	r3,4(sp)
 402c3ec:	d8800015 	stw	r2,0(sp)
 402c3f0:	da000215 	stw	r8,8(sp)
 402c3f4:	4002ed40 	call	4002ed4 <printf>
                    osum, xsum, PUSH_IPADDR(p->fhost));
            if (NDEBUG & DUMP)
 402c3f8:	88c00017 	ldw	r3,0(r17)
 402c3fc:	18c0008c 	andi	r3,r3,2
 402c400:	183fa826 	beq	r3,zero,402c2a4 <udpdemux+0x308>
               ip_dump(p);
 402c404:	9009883a 	mov	r4,r18
 402c408:	40285680 	call	4028568 <ip_dump>
 402c40c:	003fa506 	br	402c2a4 <udpdemux+0x308>
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
   {
      dprintf("UDP: unexpected port %04x\n", pup->ud_dstp);
 402c410:	8940008b 	ldhu	r5,2(r17)
 402c414:	010100f4 	movhi	r4,1027
 402c418:	21173004 	addi	r4,r4,23744
 402c41c:	4002ed40 	call	4002ed4 <printf>
      if (NDEBUG & DUMP) 
 402c420:	00c10134 	movhi	r3,1028
 402c424:	18e90e04 	addi	r3,r3,-23496
 402c428:	18800017 	ldw	r2,0(r3)
 402c42c:	1080008c 	andi	r2,r2,2
 402c430:	103fd126 	beq	r2,zero,402c378 <udpdemux+0x3dc>
         ip_dump(p);
 402c434:	9009883a 	mov	r4,r18
 402c438:	40285680 	call	4028568 <ip_dump>
 402c43c:	003fce06 	br	402c378 <udpdemux+0x3dc>

0402c440 <igmpv1_input>:
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
   int rc;
         
   pip = ip_head (p);
 402c440:	20800317 	ldw	r2,12(r4)
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
 402c444:	defffc04 	addi	sp,sp,-16
 402c448:	dc400115 	stw	r17,4(sp)
 402c44c:	dfc00315 	stw	ra,12(sp)
 402c450:	dc800215 	stw	r18,8(sp)
 402c454:	dc000015 	stw	r16,0(sp)
   struct in_multi * inm;
   NET netp  = p->net;
   int rc;
         
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));
 402c458:	10c00003 	ldbu	r3,0(r2)
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
 402c45c:	2023883a 	mov	r17,r4
   struct igmp *  igmp;
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
 402c460:	21400617 	ldw	r5,24(r4)
   int rc;
         
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));
 402c464:	18c003cc 	andi	r3,r3,15
 402c468:	18c7883a 	add	r3,r3,r3
 402c46c:	18c7883a 	add	r3,r3,r3
 402c470:	1887883a 	add	r3,r3,r2

   switch (igmp->igmp_type) 
 402c474:	19000003 	ldbu	r4,0(r3)
 402c478:	00800444 	movi	r2,17
 402c47c:	20801526 	beq	r4,r2,402c4d4 <igmpv1_input+0x94>
 402c480:	00800484 	movi	r2,18
 402c484:	20804c26 	beq	r4,r2,402c5b8 <igmpv1_input+0x178>
      }
      rc = IGMP_OK;
      break;
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
 402c488:	00c10134 	movhi	r3,1028
 402c48c:	18cbbf04 	addi	r3,r3,12028
 402c490:	18801017 	ldw	r2,64(r3)
 402c494:	043fffc4 	movi	r16,-1
 402c498:	10800044 	addi	r2,r2,1
 402c49c:	18801015 	stw	r2,64(r3)
      break;   
   }

   /* we're done with the received packet; return packet buffer back 
    * to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402c4a0:	01000084 	movi	r4,2
 402c4a4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 402c4a8:	8809883a 	mov	r4,r17
 402c4ac:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402c4b0:	01000084 	movi	r4,2
 402c4b4:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
      
   return rc;
}
 402c4b8:	8005883a 	mov	r2,r16
 402c4bc:	dfc00317 	ldw	ra,12(sp)
 402c4c0:	dc800217 	ldw	r18,8(sp)
 402c4c4:	dc400117 	ldw	r17,4(sp)
 402c4c8:	dc000017 	ldw	r16,0(sp)
 402c4cc:	dec00404 	addi	sp,sp,16
 402c4d0:	f800283a 	ret
   igmp = (struct igmp *) (ip_data (pip));

   switch (igmp->igmp_type) 
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
 402c4d4:	00c10134 	movhi	r3,1028
 402c4d8:	18cbbf04 	addi	r3,r3,12028
 402c4dc:	18800117 	ldw	r2,4(r3)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 402c4e0:	29802c17 	ldw	r6,176(r5)
   igmp = (struct igmp *) (ip_data (pip));

   switch (igmp->igmp_type) 
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
 402c4e4:	10800044 	addi	r2,r2,1
 402c4e8:	18800115 	stw	r2,4(r3)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 402c4ec:	30003026 	beq	r6,zero,402c5b0 <igmpv1_input+0x170>
 402c4f0:	03410134 	movhi	r13,1028
 402c4f4:	6b691104 	addi	r13,r13,-23484
 402c4f8:	00810134 	movhi	r2,1028
 402c4fc:	10a91304 	addi	r2,r2,-23476
 402c500:	00c10134 	movhi	r3,1028
 402c504:	18ce0104 	addi	r3,r3,14340
 402c508:	12400017 	ldw	r9,0(r2)
 402c50c:	1a800217 	ldw	r10,8(r3)
 402c510:	6a000017 	ldw	r8,0(r13)
 402c514:	03010134 	movhi	r12,1028
 402c518:	630bbb04 	addi	r12,r12,12012
 402c51c:	02c00c84 	movi	r11,50
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (inm->inm_addr == 0)
 402c520:	30800017 	ldw	r2,0(r6)
 402c524:	10001f26 	beq	r2,zero,402c5a4 <igmpv1_input+0x164>
            continue;
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 402c528:	12401e26 	beq	r2,r9,402c5a4 <igmpv1_input+0x164>
         {
            if (inm->inm_timer == 0)
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 402c52c:	1006d23a 	srli	r3,r2,8
 402c530:	113fc00c 	andi	r4,r2,65280
 402c534:	100a963a 	slli	r5,r2,24
 402c538:	1004d63a 	srli	r2,r2,24
 402c53c:	18ffc00c 	andi	r3,r3,65280
 402c540:	2008923a 	slli	r4,r4,8
 402c544:	10c4b03a 	or	r2,r2,r3
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
         {
            if (inm->inm_timer == 0)
 402c548:	30c00317 	ldw	r3,12(r6)
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 402c54c:	2148b03a 	or	r4,r4,r5
 402c550:	110eb03a 	or	r7,r2,r4
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
         {
            if (inm->inm_timer == 0)
 402c554:	1800131e 	bne	r3,zero,402c5a4 <igmpv1_input+0x164>
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 402c558:	60c00017 	ldw	r3,0(r12)
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
 402c55c:	42000044 	addi	r8,r8,1
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
         {
            if (inm->inm_timer == 0)
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 402c560:	18800a17 	ldw	r2,40(r3)
 402c564:	1008d23a 	srli	r4,r2,8
 402c568:	10ffc00c 	andi	r3,r2,65280
 402c56c:	100a963a 	slli	r5,r2,24
 402c570:	1806923a 	slli	r3,r3,8
 402c574:	1004d63a 	srli	r2,r2,24
 402c578:	213fc00c 	andi	r4,r4,65280
 402c57c:	1946b03a 	or	r3,r3,r5
 402c580:	1104b03a 	or	r2,r2,r4
 402c584:	10c4b03a 	or	r2,r2,r3
 402c588:	1285883a 	add	r2,r2,r10
 402c58c:	11c5883a 	add	r2,r2,r7
 402c590:	12c7203a 	divu	r3,r2,r11
 402c594:	18c00ca4 	muli	r3,r3,50
 402c598:	10c5c83a 	sub	r2,r2,r3
 402c59c:	10800044 	addi	r2,r2,1
 402c5a0:	30800315 	stw	r2,12(r6)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 402c5a4:	31800517 	ldw	r6,20(r6)
 402c5a8:	303fdd1e 	bne	r6,zero,402c520 <igmpv1_input+0xe0>
 402c5ac:	6a000015 	stw	r8,0(r13)
      }
      rc = IGMP_OK;
      break;
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
 402c5b0:	0021883a 	mov	r16,zero
 402c5b4:	003fba06 	br	402c4a0 <igmpv1_input+0x60>
      }
      rc = IGMP_OK;
      break;

   case IGMP_HOST_MEMBERSHIP_REPORT:
      ++igmpstats.igmpv1mode_v1_reports_rcvd;
 402c5b8:	04810134 	movhi	r18,1028
 402c5bc:	948bbf04 	addi	r18,r18,12028
 402c5c0:	90800217 	ldw	r2,8(r18)
 402c5c4:	10800044 	addi	r2,r2,1
 402c5c8:	90800215 	stw	r2,8(r18)
      /*
       * If we belong to the group being reported and have a 
       * running timer for that group, stop our timer for that 
       * group.
       */
      inm = lookup_mcast(igmp->igmp_group, netp);
 402c5cc:	19000117 	ldw	r4,4(r3)
 402c5d0:	402b1000 	call	402b100 <lookup_mcast>
 402c5d4:	100b883a 	mov	r5,r2
      if (inm != NULL) 
 402c5d8:	103ff526 	beq	r2,zero,402c5b0 <igmpv1_input+0x170>
      {
         if (inm->inm_timer > 0)
 402c5dc:	10800317 	ldw	r2,12(r2)
 402c5e0:	103ff326 	beq	r2,zero,402c5b0 <igmpv1_input+0x170>
         {
            inm->inm_timer = 0;
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 402c5e4:	00810134 	movhi	r2,1028
 402c5e8:	10a91104 	addi	r2,r2,-23484
 402c5ec:	10c00017 	ldw	r3,0(r2)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
 402c5f0:	91000317 	ldw	r4,12(r18)
 402c5f4:	0021883a 	mov	r16,zero
      {
         if (inm->inm_timer > 0)
         {
            inm->inm_timer = 0;
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 402c5f8:	18ffffc4 	addi	r3,r3,-1
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
 402c5fc:	21000044 	addi	r4,r4,1
      {
         if (inm->inm_timer > 0)
         {
            inm->inm_timer = 0;
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 402c600:	10c00015 	stw	r3,0(r2)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
 402c604:	91000315 	stw	r4,12(r18)
      inm = lookup_mcast(igmp->igmp_group, netp);
      if (inm != NULL) 
      {
         if (inm->inm_timer > 0)
         {
            inm->inm_timer = 0;
 402c608:	28000315 	stw	zero,12(r5)
 402c60c:	003fa406 	br	402c4a0 <igmpv1_input+0x60>

0402c610 <igmpv2_chk_set_timer>:

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
 402c610:	20800317 	ldw	r2,12(r4)
 402c614:	2affffcc 	andi	r11,r5,65535
       (inm->inm_timer == 0))
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
 402c618:	00c10134 	movhi	r3,1028
 402c61c:	18e91104 	addi	r3,r3,-23484
 *
 * OUTPUT: None.
 */

void igmpv2_chk_set_timer (struct in_multi * inm, u_short max_resp_time)
{  
 402c620:	2019883a 	mov	r12,r4

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
 402c624:	58802636 	bltu	r11,r2,402c6c0 <igmpv2_chk_set_timer+0xb0>
 402c628:	1000271e 	bne	r2,zero,402c6c8 <igmpv2_chk_set_timer+0xb8>
       (inm->inm_timer == 0))
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
 402c62c:	18800017 	ldw	r2,0(r3)
 402c630:	10800044 	addi	r2,r2,1
 402c634:	18800015 	stw	r2,0(r3)
      inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY (max_resp_time, inm->inm_addr);                     
 402c638:	00810134 	movhi	r2,1028
 402c63c:	108bbb04 	addi	r2,r2,12012
 402c640:	11400017 	ldw	r5,0(r2)
 402c644:	61000017 	ldw	r4,0(r12)
 402c648:	00810134 	movhi	r2,1028
 402c64c:	108e0104 	addi	r2,r2,14340
 402c650:	28c00a17 	ldw	r3,40(r5)
 402c654:	12800217 	ldw	r10,8(r2)
 402c658:	200ed23a 	srli	r7,r4,8
 402c65c:	180ad23a 	srli	r5,r3,8
 402c660:	18bfc00c 	andi	r2,r3,65280
 402c664:	21bfc00c 	andi	r6,r4,65280
 402c668:	1810963a 	slli	r8,r3,24
 402c66c:	1004923a 	slli	r2,r2,8
 402c670:	1806d63a 	srli	r3,r3,24
 402c674:	2012963a 	slli	r9,r4,24
 402c678:	300c923a 	slli	r6,r6,8
 402c67c:	2008d63a 	srli	r4,r4,24
 402c680:	297fc00c 	andi	r5,r5,65280
 402c684:	1204b03a 	or	r2,r2,r8
 402c688:	1946b03a 	or	r3,r3,r5
 402c68c:	39ffc00c 	andi	r7,r7,65280
 402c690:	1886b03a 	or	r3,r3,r2
 402c694:	21c8b03a 	or	r4,r4,r7
 402c698:	324cb03a 	or	r6,r6,r9
 402c69c:	1a87883a 	add	r3,r3,r10
 402c6a0:	2188b03a 	or	r4,r4,r6
 402c6a4:	1907883a 	add	r3,r3,r4
 402c6a8:	1ac5203a 	divu	r2,r3,r11
 402c6ac:	12c5383a 	mul	r2,r2,r11
 402c6b0:	1887c83a 	sub	r3,r3,r2
 402c6b4:	18c00044 	addi	r3,r3,1
 402c6b8:	60c00315 	stw	r3,12(r12)
 402c6bc:	f800283a 	ret
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
       (inm->inm_timer == 0))
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
 402c6c0:	103fdd1e 	bne	r2,zero,402c638 <igmpv2_chk_set_timer+0x28>
 402c6c4:	003fd906 	br	402c62c <igmpv2_chk_set_timer+0x1c>
 402c6c8:	f800283a 	ret

0402c6cc <igmpv2_chk4_rtr_alert_opt>:
   u_long * rtr_alert_optp;
   u_char total_optlen;
   u_char optlen;
   u_char optval;

   total_optlen = ip_hlen (pip) - sizeof (struct ip);
 402c6cc:	20800003 	ldbu	r2,0(r4)
 402c6d0:	108003cc 	andi	r2,r2,15
 402c6d4:	1085883a 	add	r2,r2,r2
 402c6d8:	1085883a 	add	r2,r2,r2
 402c6dc:	11bffb04 	addi	r6,r2,-20

   if (total_optlen > 0)
 402c6e0:	30c03fcc 	andi	r3,r6,255
 402c6e4:	18001126 	beq	r3,zero,402c72c <igmpv2_chk4_rtr_alert_opt+0x60>
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
 402c6e8:	20c00504 	addi	r3,r4,20
 402c6ec:	01c00044 	movi	r7,1
 402c6f0:	02000504 	movi	r8,20
  
      while (total_optlen > 0)
      {
         /* only the lowermost 5 bits are significant */    
         optval = (*optp) & IPOPT_TYPE_MASK;
         switch (optval)
 402c6f4:	18800003 	ldbu	r2,0(r3)
 402c6f8:	108007cc 	andi	r2,r2,31
 402c6fc:	1009883a 	mov	r4,r2
 402c700:	100b883a 	mov	r5,r2
 402c704:	11c00526 	beq	r2,r7,402c71c <igmpv2_chk4_rtr_alert_opt+0x50>
 402c708:	11c00836 	bltu	r2,r7,402c72c <igmpv2_chk4_rtr_alert_opt+0x60>
 402c70c:	12000926 	beq	r2,r8,402c734 <igmpv2_chk4_rtr_alert_opt+0x68>
               else return IGMP_FALSE;
          
            default:
               /* extract the length of the current option, and compute
                * the total length of this option */
               optlen = (*(optp + 1)) + 2;
 402c710:	18800043 	ldbu	r2,1(r3)
 402c714:	11400084 	addi	r5,r2,2
 402c718:	29003fcc 	andi	r4,r5,255
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
         total_optlen -= optlen;
 402c71c:	314dc83a 	sub	r6,r6,r5
   if (total_optlen > 0)
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
  
      while (total_optlen > 0)
 402c720:	30803fcc 	andi	r2,r6,255
               break;
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
 402c724:	1907883a 	add	r3,r3,r4
   if (total_optlen > 0)
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
  
      while (total_optlen > 0)
 402c728:	103ff21e 	bne	r2,zero,402c6f4 <igmpv2_chk4_rtr_alert_opt+0x28>
               break;
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
 402c72c:	0005883a 	mov	r2,zero
      } /* end WHILE */
   }

   /* didn't find IP Alert option in IP header of rcvd packet */
   return IGMP_FALSE;
}
 402c730:	f800283a 	ret
               optlen = 1;
               break;
         
            case IP_RTR_ALERT_OPT:
               rtr_alert_optp = (u_long *) optp; 
               if ((ntohl (*rtr_alert_optp)) == IP_RTR_ALERT_OPT_DATA)
 402c734:	18c00017 	ldw	r3,0(r3)
 402c738:	1804d23a 	srli	r2,r3,8
 402c73c:	193fc00c 	andi	r4,r3,65280
 402c740:	180a963a 	slli	r5,r3,24
 402c744:	2008923a 	slli	r4,r4,8
 402c748:	1806d63a 	srli	r3,r3,24
 402c74c:	10bfc00c 	andi	r2,r2,65280
 402c750:	2148b03a 	or	r4,r4,r5
 402c754:	1886b03a 	or	r3,r3,r2
 402c758:	1906b03a 	or	r3,r3,r4
 402c75c:	00a50134 	movhi	r2,37892
 402c760:	1885003a 	cmpeq	r2,r3,r2
 402c764:	f800283a 	ret

0402c768 <igmpv2_process_query>:
   u_char process_all;
   struct in_multi * inm;
   ip_addr mcgrp_addr;

   netp = p->net;
   pip = ip_head (p);
 402c768:	21400317 	ldw	r5,12(r4)
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_query (PACKET p)
{
 402c76c:	defffc04 	addi	sp,sp,-16
 402c770:	dfc00315 	stw	ra,12(sp)
 402c774:	dc800215 	stw	r18,8(sp)
 402c778:	dc400115 	stw	r17,4(sp)
 402c77c:	dc000015 	stw	r16,0(sp)
   struct in_multi * inm;
   ip_addr mcgrp_addr;

   netp = p->net;
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));
 402c780:	28800003 	ldbu	r2,0(r5)
   u_short max_resp_time;
   u_char process_all;
   struct in_multi * inm;
   ip_addr mcgrp_addr;

   netp = p->net;
 402c784:	21c00617 	ldw	r7,24(r4)
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));
 402c788:	108003cc 	andi	r2,r2,15
 402c78c:	1085883a 	add	r2,r2,r2
 402c790:	1085883a 	add	r2,r2,r2
 402c794:	114d883a 	add	r6,r2,r5
   mcgrp_addr = ntohl(igmp->igmp_group);

   if (igmp->igmp_code == 0)
 402c798:	30c00043 	ldbu	r3,1(r6)
   ip_addr mcgrp_addr;

   netp = p->net;
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));
   mcgrp_addr = ntohl(igmp->igmp_group);
 402c79c:	30800117 	ldw	r2,4(r6)

   if (igmp->igmp_code == 0)
 402c7a0:	1800201e 	bne	r3,zero,402c824 <igmpv2_process_query+0xbc>
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
 402c7a4:	00800044 	movi	r2,1
 402c7a8:	38802d05 	stb	r2,180(r7)
      netp->igmpv1_query_rcvd_time = cticks;      
 402c7ac:	00c10134 	movhi	r3,1028
 402c7b0:	18e93304 	addi	r3,r3,-23348
 402c7b4:	19000017 	ldw	r4,0(r3)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
 402c7b8:	01410134 	movhi	r5,1028
 402c7bc:	294bbf04 	addi	r5,r5,12028
 402c7c0:	04800c84 	movi	r18,50

   if (igmp->igmp_code == 0)
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
      netp->igmpv1_query_rcvd_time = cticks;      
 402c7c4:	39002e15 	stw	r4,184(r7)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
 402c7c8:	28800417 	ldw	r2,16(r5)
 402c7cc:	10800044 	addi	r2,r2,1
 402c7d0:	28800415 	stw	r2,16(r5)
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 402c7d4:	3c002c17 	ldw	r16,176(r7)
 402c7d8:	80000b26 	beq	r16,zero,402c808 <igmpv2_process_query+0xa0>
 402c7dc:	04410134 	movhi	r17,1028
 402c7e0:	8c691304 	addi	r17,r17,-23476
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
 402c7e4:	80c00017 	ldw	r3,0(r16)
 402c7e8:	18000526 	beq	r3,zero,402c800 <igmpv2_process_query+0x98>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 402c7ec:	88800017 	ldw	r2,0(r17)
            igmpv2_chk_set_timer (inm, max_resp_time);
 402c7f0:	8009883a 	mov	r4,r16
 402c7f4:	917fffcc 	andi	r5,r18,65535
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 402c7f8:	18800126 	beq	r3,r2,402c800 <igmpv2_process_query+0x98>
            igmpv2_chk_set_timer (inm, max_resp_time);
 402c7fc:	402c6100 	call	402c610 <igmpv2_chk_set_timer>
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 402c800:	84000517 	ldw	r16,20(r16)
 402c804:	803ff71e 	bne	r16,zero,402c7e4 <igmpv2_process_query+0x7c>
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
}
 402c808:	0005883a 	mov	r2,zero
 402c80c:	dfc00317 	ldw	ra,12(sp)
 402c810:	dc800217 	ldw	r18,8(sp)
 402c814:	dc400117 	ldw	r17,4(sp)
 402c818:	dc000017 	ldw	r16,0(sp)
 402c81c:	dec00404 	addi	sp,sp,16
 402c820:	f800283a 	ret
   }
   else
   {
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
 402c824:	10001526 	beq	r2,zero,402c87c <igmpv2_process_query+0x114>
         process_all = IGMP_TRUE;
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
 402c828:	04410134 	movhi	r17,1028
 402c82c:	8c4bbf04 	addi	r17,r17,12028
 402c830:	88800617 	ldw	r2,24(r17)
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
 402c834:	380b883a 	mov	r5,r7
         process_all = IGMP_TRUE;
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
 402c838:	10800044 	addi	r2,r2,1
 402c83c:	88800615 	stw	r2,24(r17)
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
 402c840:	31000117 	ldw	r4,4(r6)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
 402c844:	34000043 	ldbu	r16,1(r6)
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
 402c848:	402b1000 	call	402b100 <lookup_mcast>
      if (inm != NULL)
 402c84c:	10001326 	beq	r2,zero,402c89c <igmpv2_process_query+0x134>
         igmpv2_chk_set_timer (inm, max_resp_time);
 402c850:	81403fcc 	andi	r5,r16,255
 402c854:	280ad07a 	srli	r5,r5,1
 402c858:	1009883a 	mov	r4,r2
 402c85c:	402c6100 	call	402c610 <igmpv2_chk_set_timer>
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
}
 402c860:	0005883a 	mov	r2,zero
 402c864:	dfc00317 	ldw	ra,12(sp)
 402c868:	dc800217 	ldw	r18,8(sp)
 402c86c:	dc400117 	ldw	r17,4(sp)
 402c870:	dc000017 	ldw	r16,0(sp)
 402c874:	dec00404 	addi	sp,sp,16
 402c878:	f800283a 	ret
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
      {
         /* this is a IGMPv2 General Query */
         ++igmpstats.igmpv2mode_v2_general_queries_rcvd;
 402c87c:	00810134 	movhi	r2,1028
 402c880:	108bbf04 	addi	r2,r2,12028
 402c884:	10c00517 	ldw	r3,20(r2)
 402c888:	18c00044 	addi	r3,r3,1
 402c88c:	10c00515 	stw	r3,20(r2)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
 402c890:	31000043 	ldbu	r4,1(r6)
 402c894:	2024d07a 	srli	r18,r4,1
 402c898:	003fce06 	br	402c7d4 <igmpv2_process_query+0x6c>
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
      if (inm != NULL)
         igmpv2_chk_set_timer (inm, max_resp_time);
      else ++igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd;
 402c89c:	88801217 	ldw	r2,72(r17)
 402c8a0:	10800044 	addi	r2,r2,1
 402c8a4:	88801215 	stw	r2,72(r17)
 402c8a8:	003fd706 	br	402c808 <igmpv2_process_query+0xa0>

0402c8ac <igmpv2_process_report>:
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
   pip = ip_head (p);
 402c8ac:	20c00317 	ldw	r3,12(r4)
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_report (PACKET p)
{
 402c8b0:	defffd04 	addi	sp,sp,-12
 402c8b4:	dc400115 	stw	r17,4(sp)
 402c8b8:	dc000015 	stw	r16,0(sp)
 402c8bc:	dfc00215 	stw	ra,8(sp)
   NET netp;
   struct in_multi * inm;

   netp = p->net;
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));   
 402c8c0:	18800003 	ldbu	r2,0(r3)
   struct igmp * igmp;
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
 402c8c4:	24400617 	ldw	r17,24(r4)
   pip = ip_head (p);
   igmp = (struct igmp *) (ip_data (pip));   
 402c8c8:	108003cc 	andi	r2,r2,15
 402c8cc:	1085883a 	add	r2,r2,r2
 402c8d0:	1085883a 	add	r2,r2,r2
 402c8d4:	10e1883a 	add	r16,r2,r3
    * processing IGMPv2 packets (it has "downgraded" itself because
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
 402c8d8:	81000117 	ldw	r4,4(r16)
 402c8dc:	880b883a 	mov	r5,r17
 402c8e0:	402b1000 	call	402b100 <lookup_mcast>
 402c8e4:	1009883a 	mov	r4,r2
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
 402c8e8:	00c10134 	movhi	r3,1028
 402c8ec:	18cbbf04 	addi	r3,r3,12028
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
   if (inm != NULL) 
 402c8f0:	10002126 	beq	r2,zero,402c978 <igmpv2_process_report+0xcc>
   {
      if (inm->inm_timer != 0)
 402c8f4:	10800317 	ldw	r2,12(r2)
 402c8f8:	1000091e 	bne	r2,zero,402c920 <igmpv2_process_report+0x74>
      else
      {
         /* we don't have a timer running; perhaps the source
          * host has just joined the group, and has sent an
          * unsolicited report */
         ++igmpstats.igmpv2mode_v12_reports_rcvd_no_timer;   
 402c8fc:	18800817 	ldw	r2,32(r3)
 402c900:	10800044 	addi	r2,r2,1
 402c904:	18800815 	stw	r2,32(r3)
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
   }
   
   return IGMP_OK;   
}
 402c908:	0005883a 	mov	r2,zero
 402c90c:	dfc00217 	ldw	ra,8(sp)
 402c910:	dc400117 	ldw	r17,4(sp)
 402c914:	dc000017 	ldw	r16,0(sp)
 402c918:	dec00304 	addi	sp,sp,12
 402c91c:	f800283a 	ret
   if (inm != NULL) 
   {
      if (inm->inm_timer != 0)
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
 402c920:	88802d03 	ldbu	r2,180(r17)
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
         {
            /* cancel timer */
            inm->inm_timer = 0;
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 402c924:	01410134 	movhi	r5,1028
 402c928:	29691104 	addi	r5,r5,-23484
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
 402c92c:	180d883a 	mov	r6,r3
   if (inm != NULL) 
   {
      if (inm->inm_timer != 0)
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
 402c930:	10000326 	beq	r2,zero,402c940 <igmpv2_process_report+0x94>
 402c934:	80c00003 	ldbu	r3,0(r16)
 402c938:	00800584 	movi	r2,22
 402c93c:	18bff226 	beq	r3,r2,402c908 <igmpv2_process_report+0x5c>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
         {
            /* cancel timer */
            inm->inm_timer = 0;
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 402c940:	28800017 	ldw	r2,0(r5)
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
         {
            /* cancel timer */
            inm->inm_timer = 0;
 402c944:	20000315 	stw	zero,12(r4)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 402c948:	10bfffc4 	addi	r2,r2,-1
 402c94c:	28800015 	stw	r2,0(r5)
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
 402c950:	20000405 	stb	zero,16(r4)
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
 402c954:	30800717 	ldw	r2,28(r6)
 402c958:	10800044 	addi	r2,r2,1
 402c95c:	30800715 	stw	r2,28(r6)
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
   }
   
   return IGMP_OK;   
}
 402c960:	0005883a 	mov	r2,zero
 402c964:	dfc00217 	ldw	ra,8(sp)
 402c968:	dc400117 	ldw	r17,4(sp)
 402c96c:	dc000017 	ldw	r16,0(sp)
 402c970:	dec00304 	addi	sp,sp,12
 402c974:	f800283a 	ret
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
 402c978:	18801317 	ldw	r2,76(r3)
 402c97c:	10800044 	addi	r2,r2,1
 402c980:	18801315 	stw	r2,76(r3)
   }
   
   return IGMP_OK;   
}
 402c984:	0005883a 	mov	r2,zero
 402c988:	dfc00217 	ldw	ra,8(sp)
 402c98c:	dc400117 	ldw	r17,4(sp)
 402c990:	dc000017 	ldw	r16,0(sp)
 402c994:	dec00304 	addi	sp,sp,12
 402c998:	f800283a 	ret

0402c99c <igmpv2_input>:
   struct ip * pip;
   int igmplen;
   u_char type;
   int rc;

   pip = ip_head (p);    
 402c99c:	20c00317 	ldw	r3,12(r4)
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
 402c9a0:	defffd04 	addi	sp,sp,-12
 402c9a4:	dc400115 	stw	r17,4(sp)
 402c9a8:	dfc00215 	stw	ra,8(sp)
 402c9ac:	dc000015 	stw	r16,0(sp)
   igmplen = p->nb_plen - ip_hlen (pip);
   igmp = (struct igmp *) (ip_data (pip));   
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;

   switch (type) 
 402c9b0:	18800003 	ldbu	r2,0(r3)
 402c9b4:	01400484 	movi	r5,18
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
 402c9b8:	2023883a 	mov	r17,r4
   igmplen = p->nb_plen - ip_hlen (pip);
   igmp = (struct igmp *) (ip_data (pip));   
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;

   switch (type) 
 402c9bc:	108003cc 	andi	r2,r2,15
 402c9c0:	1085883a 	add	r2,r2,r2
 402c9c4:	1085883a 	add	r2,r2,r2
 402c9c8:	10c5883a 	add	r2,r2,r3
 402c9cc:	10c00003 	ldbu	r3,0(r2)
 402c9d0:	19402026 	beq	r3,r5,402ca54 <igmpv2_input+0xb8>
 402c9d4:	28c01436 	bltu	r5,r3,402ca28 <igmpv2_input+0x8c>
 402c9d8:	00800444 	movi	r2,17
 402c9dc:	18802126 	beq	r3,r2,402ca64 <igmpv2_input+0xc8>
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
         rc = IGMP_OK;
         break;               

      default:     
         ++igmpstats.igmpv2mode_unknown_pkttype;
 402c9e0:	00c10134 	movhi	r3,1028
 402c9e4:	18cbbf04 	addi	r3,r3,12028
 402c9e8:	18801517 	ldw	r2,84(r3)
 402c9ec:	043fffc4 	movi	r16,-1
 402c9f0:	10800044 	addi	r2,r2,1
 402c9f4:	18801515 	stw	r2,84(r3)
         break;
   } /* end SWITCH */

   /* we're done processing the received packet; return packet buffer 
    * back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402c9f8:	01000084 	movi	r4,2
 402c9fc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   pk_free(p);
 402ca00:	8809883a 	mov	r4,r17
 402ca04:	401bf0c0 	call	401bf0c <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402ca08:	01000084 	movi	r4,2
 402ca0c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
   
   return rc;
}
 402ca10:	8005883a 	mov	r2,r16
 402ca14:	dfc00217 	ldw	ra,8(sp)
 402ca18:	dc400117 	ldw	r17,4(sp)
 402ca1c:	dc000017 	ldw	r16,0(sp)
 402ca20:	dec00304 	addi	sp,sp,12
 402ca24:	f800283a 	ret
   igmplen = p->nb_plen - ip_hlen (pip);
   igmp = (struct igmp *) (ip_data (pip));   
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;

   switch (type) 
 402ca28:	00800584 	movi	r2,22
 402ca2c:	18800926 	beq	r3,r2,402ca54 <igmpv2_input+0xb8>
 402ca30:	008005c4 	movi	r2,23
 402ca34:	18bfea1e 	bne	r3,r2,402c9e0 <igmpv2_input+0x44>
          * expect to receive such messages.  However, according to
          * RFC 2236, some implementations of an older version of the 
          * IGMPv2 specification send leave messages to the group 
          * being left.  If we do receive such a message, we will 
          * drop it. */       
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
 402ca38:	00c10134 	movhi	r3,1028
 402ca3c:	18cbbf04 	addi	r3,r3,12028
 402ca40:	18800917 	ldw	r2,36(r3)
 402ca44:	0021883a 	mov	r16,zero
 402ca48:	10800044 	addi	r2,r2,1
 402ca4c:	18800915 	stw	r2,36(r3)
 402ca50:	003fe906 	br	402c9f8 <igmpv2_input+0x5c>
         rc = igmpv2_process_query (p);
         break;

      case IGMP_HOST_MEMBERSHIP_REPORT:
      case IGMPv2_MEMBERSHIP_REPORT:
         rc = igmpv2_process_report (p);
 402ca54:	8809883a 	mov	r4,r17
 402ca58:	402c8ac0 	call	402c8ac <igmpv2_process_report>
 402ca5c:	1021883a 	mov	r16,r2
 402ca60:	003fe506 	br	402c9f8 <igmpv2_input+0x5c>
   type = igmp->igmp_type;

   switch (type) 
   {
      case IGMP_HOST_MEMBERSHIP_QUERY:
         rc = igmpv2_process_query (p);
 402ca64:	402c7680 	call	402c768 <igmpv2_process_query>
 402ca68:	1021883a 	mov	r16,r2
 402ca6c:	003fe206 	br	402c9f8 <igmpv2_input+0x5c>

0402ca70 <IPADDR_TO_NETP>:

void
IPADDR_TO_NETP(ip_addr addr, NET* netp)
{
   u_short  idx   =  0;
   *netp = nets[idx];
 402ca70:	02010134 	movhi	r8,1028
 402ca74:	420bbb04 	addi	r8,r8,12012
 402ca78:	40800017 	ldw	r2,0(r8)
 402ca7c:	28800015 	stw	r2,0(r5)
/*
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
 402ca80:	2000131e 	bne	r4,zero,402cad0 <IPADDR_TO_NETP+0x60>
   {
      for (idx = 0; idx < ifNumber; idx++)
 402ca84:	00810134 	movhi	r2,1028
 402ca88:	10a90f04 	addi	r2,r2,-23492
 402ca8c:	11800017 	ldw	r6,0(r2)
 402ca90:	30002526 	beq	r6,zero,402cb28 <IPADDR_TO_NETP+0xb8>
      {
         if (nets[idx]->n_mcastlist)
 402ca94:	40c00017 	ldw	r3,0(r8)
 402ca98:	18802b17 	ldw	r2,172(r3)
 402ca9c:	1000231e 	bne	r2,zero,402cb2c <IPADDR_TO_NETP+0xbc>
         {
            *netp = nets[idx];
            break;
 402caa0:	0009883a 	mov	r4,zero
 402caa4:	00000306 	br	402cab4 <IPADDR_TO_NETP+0x44>
 */
   if (addr == AADDR) 
   {
      for (idx = 0; idx < ifNumber; idx++)
      {
         if (nets[idx]->n_mcastlist)
 402caa8:	10c00017 	ldw	r3,0(r2)
 402caac:	18802b17 	ldw	r2,172(r3)
 402cab0:	10001e1e 	bne	r2,zero,402cb2c <IPADDR_TO_NETP+0xbc>
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
   {
      for (idx = 0; idx < ifNumber; idx++)
 402cab4:	21000044 	addi	r4,r4,1
 402cab8:	20ffffcc 	andi	r3,r4,65535
      {
         if (nets[idx]->n_mcastlist)
 402cabc:	18c5883a 	add	r2,r3,r3
 402cac0:	1085883a 	add	r2,r2,r2
 402cac4:	1205883a 	add	r2,r2,r8
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
   {
      for (idx = 0; idx < ifNumber; idx++)
 402cac8:	19bff736 	bltu	r3,r6,402caa8 <IPADDR_TO_NETP+0x38>
 402cacc:	f800283a 	ret
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
 402cad0:	10001526 	beq	r2,zero,402cb28 <IPADDR_TO_NETP+0xb8>
 402cad4:	10800a17 	ldw	r2,40(r2)
 402cad8:	20801326 	beq	r4,r2,402cb28 <IPADDR_TO_NETP+0xb8>
      {
         idx++;
         if (idx >= ifNumber)
 402cadc:	00810134 	movhi	r2,1028
 402cae0:	10a90f04 	addi	r2,r2,-23492
 402cae4:	11c00017 	ldw	r7,0(r2)
 402cae8:	00800044 	movi	r2,1
 402caec:	11c0112e 	bgeu	r2,r7,402cb34 <IPADDR_TO_NETP+0xc4>
 402caf0:	1007883a 	mov	r3,r2
         {
            *netp = NULL;
            break;
 402caf4:	100d883a 	mov	r6,r2
 402caf8:	00000306 	br	402cb08 <IPADDR_TO_NETP+0x98>
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
 402cafc:	10800a17 	ldw	r2,40(r2)
 402cb00:	20800926 	beq	r4,r2,402cb28 <IPADDR_TO_NETP+0xb8>
      {
         idx++;
         if (idx >= ifNumber)
 402cb04:	19c00b2e 	bgeu	r3,r7,402cb34 <IPADDR_TO_NETP+0xc4>
         {
            *netp = NULL;
            break;
         }
         else
            *netp = nets[idx];
 402cb08:	18c5883a 	add	r2,r3,r3
 402cb0c:	1085883a 	add	r2,r2,r2
 402cb10:	1205883a 	add	r2,r2,r8
 402cb14:	10800017 	ldw	r2,0(r2)
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
      {
         idx++;
 402cb18:	31800044 	addi	r6,r6,1
         if (idx >= ifNumber)
 402cb1c:	30ffffcc 	andi	r3,r6,65535
         {
            *netp = NULL;
            break;
         }
         else
            *netp = nets[idx];
 402cb20:	28800015 	stw	r2,0(r5)
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
 402cb24:	103ff51e 	bne	r2,zero,402cafc <IPADDR_TO_NETP+0x8c>
 402cb28:	f800283a 	ret
   {
      for (idx = 0; idx < ifNumber; idx++)
      {
         if (nets[idx]->n_mcastlist)
         {
            *netp = nets[idx];
 402cb2c:	28c00015 	stw	r3,0(r5)
 402cb30:	f800283a 	ret
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
      {
         idx++;
         if (idx >= ifNumber)
         {
            *netp = NULL;
 402cb34:	28000015 	stw	zero,0(r5)
 402cb38:	f800283a 	ret

0402cb3c <ip_getmoptions>:
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
 402cb3c:	00800244 	movi	r2,9
ip_getmoptions(int optname, struct socket * so, void * val)
{
   u_char * ttl;
   u_char * loop;
   ip_addr *addr;
   struct ip_moptions*  imo   =  so->inp_moptions;
 402cb40:	28c00317 	ldw	r3,12(r5)
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
 402cb44:	20800d26 	beq	r4,r2,402cb7c <ip_getmoptions+0x40>
 402cb48:	2080030e 	bge	r4,r2,402cb58 <ip_getmoptions+0x1c>
 402cb4c:	00c017c4 	movi	r3,95
      return (0);

      default:
      return (EOPNOTSUPP);
   }
}
 402cb50:	1805883a 	mov	r2,r3
 402cb54:	f800283a 	ret
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
 402cb58:	00800284 	movi	r2,10
 402cb5c:	20801226 	beq	r4,r2,402cba8 <ip_getmoptions+0x6c>
 402cb60:	008002c4 	movi	r2,11
 402cb64:	20bff91e 	bne	r4,r2,402cb4c <ip_getmoptions+0x10>
         *ttl = imo->imo_multicast_ttl;
      return (0);

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
      if (imo == NULL)
 402cb68:	18001426 	beq	r3,zero,402cbbc <ip_getmoptions+0x80>
         *loop = IP_DEFAULT_MULTICAST_LOOP;
      else
         *loop = imo->imo_multicast_loop;
 402cb6c:	18800143 	ldbu	r2,5(r3)
 402cb70:	0007883a 	mov	r3,zero
 402cb74:	30800005 	stb	r2,0(r6)
 402cb78:	003ff506 	br	402cb50 <ip_getmoptions+0x14>
   switch (optname) 
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
      if (imo == NULL || imo->imo_multicast_netp == NULL)
 402cb7c:	18000726 	beq	r3,zero,402cb9c <ip_getmoptions+0x60>
 402cb80:	18800017 	ldw	r2,0(r3)
 402cb84:	10000526 	beq	r2,zero,402cb9c <ip_getmoptions+0x60>
         *addr = AADDR;
      else
         *addr = imo->imo_multicast_netp->n_ipaddr;
 402cb88:	10800a17 	ldw	r2,40(r2)
 402cb8c:	0007883a 	mov	r3,zero
 402cb90:	30800015 	stw	r2,0(r6)
      return (0);

      default:
      return (EOPNOTSUPP);
   }
}
 402cb94:	1805883a 	mov	r2,r3
 402cb98:	f800283a 	ret
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
      if (imo == NULL || imo->imo_multicast_netp == NULL)
         *addr = AADDR;
 402cb9c:	0007883a 	mov	r3,zero
 402cba0:	30000015 	stw	zero,0(r6)
 402cba4:	003fea06 	br	402cb50 <ip_getmoptions+0x14>
         *addr = imo->imo_multicast_netp->n_ipaddr;
      return (0);

   case IP_MULTICAST_TTL:
      ttl = (u_char *)val;
      if (imo == NULL)
 402cba8:	18000426 	beq	r3,zero,402cbbc <ip_getmoptions+0x80>
         *ttl = IP_DEFAULT_MULTICAST_TTL;
      else
         *ttl = imo->imo_multicast_ttl;
 402cbac:	18800103 	ldbu	r2,4(r3)
 402cbb0:	0007883a 	mov	r3,zero
 402cbb4:	30800005 	stb	r2,0(r6)
 402cbb8:	003fe506 	br	402cb50 <ip_getmoptions+0x14>
      return (0);

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
      if (imo == NULL)
         *loop = IP_DEFAULT_MULTICAST_LOOP;
 402cbbc:	00800044 	movi	r2,1
 402cbc0:	30800005 	stb	r2,0(r6)
 402cbc4:	003fe206 	br	402cb50 <ip_getmoptions+0x14>

0402cbc8 <ip_freemoptions>:
 * RETURNS: 
 */

void
ip_freemoptions(struct ip_moptions * imo)
{
 402cbc8:	defffd04 	addi	sp,sp,-12
 402cbcc:	dc000015 	stw	r16,0(sp)
 402cbd0:	dfc00215 	stw	ra,8(sp)
 402cbd4:	dc400115 	stw	r17,4(sp)
 402cbd8:	2021883a 	mov	r16,r4
   u_short  i;

   if (imo != NULL) 
 402cbdc:	20001326 	beq	r4,zero,402cc2c <ip_freemoptions+0x64>
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 402cbe0:	2080018b 	ldhu	r2,6(r4)
 402cbe4:	10000b26 	beq	r2,zero,402cc14 <ip_freemoptions+0x4c>
 402cbe8:	0023883a 	mov	r17,zero
 402cbec:	0007883a 	mov	r3,zero
         in_delmulti(imo->imo_membership[i]);
 402cbf0:	18c5883a 	add	r2,r3,r3
 402cbf4:	1085883a 	add	r2,r2,r2
 402cbf8:	1405883a 	add	r2,r2,r16
 402cbfc:	11000217 	ldw	r4,8(r2)
{
   u_short  i;

   if (imo != NULL) 
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 402cc00:	8c400044 	addi	r17,r17,1
         in_delmulti(imo->imo_membership[i]);
 402cc04:	402b1240 	call	402b124 <in_delmulti>
{
   u_short  i;

   if (imo != NULL) 
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 402cc08:	8080018b 	ldhu	r2,6(r16)
 402cc0c:	88ffffcc 	andi	r3,r17,65535
 402cc10:	18bff736 	bltu	r3,r2,402cbf0 <ip_freemoptions+0x28>
         in_delmulti(imo->imo_membership[i]);
      npfree(imo);
 402cc14:	8009883a 	mov	r4,r16
   }
}
 402cc18:	dfc00217 	ldw	ra,8(sp)
 402cc1c:	dc400117 	ldw	r17,4(sp)
 402cc20:	dc000017 	ldw	r16,0(sp)
 402cc24:	dec00304 	addi	sp,sp,12

   if (imo != NULL) 
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
         in_delmulti(imo->imo_membership[i]);
      npfree(imo);
 402cc28:	401cce41 	jmpi	401cce4 <npfree>
   }
}
 402cc2c:	dfc00217 	ldw	ra,8(sp)
 402cc30:	dc400117 	ldw	r17,4(sp)
 402cc34:	dc000017 	ldw	r16,0(sp)
 402cc38:	dec00304 	addi	sp,sp,12
 402cc3c:	f800283a 	ret

0402cc40 <ip_setmoptions>:
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
 402cc40:	defff904 	addi	sp,sp,-28
 402cc44:	dc400215 	stw	r17,8(sp)
   int   error =  0;
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
   struct ip_moptions * imo   =  so->inp_moptions;
 402cc48:	2c400317 	ldw	r17,12(r5)
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
 402cc4c:	dd000515 	stw	r20,20(sp)
 402cc50:	dcc00415 	stw	r19,16(sp)
 402cc54:	dc800315 	stw	r18,12(sp)
 402cc58:	dc000115 	stw	r16,4(sp)
 402cc5c:	dfc00615 	stw	ra,24(sp)
 402cc60:	2821883a 	mov	r16,r5
 402cc64:	2025883a 	mov	r18,r4
 402cc68:	3027883a 	mov	r19,r6
   int   error =  0;
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
 402cc6c:	d8000015 	stw	zero,0(sp)
   struct ip_moptions * imo   =  so->inp_moptions;
   struct ip_moptions **imop  =  &so->inp_moptions;
 402cc70:	2d000304 	addi	r20,r5,12
   ip_addr addr;


   if (imo == NULL) 
 402cc74:	88000a1e 	bne	r17,zero,402cca0 <ip_setmoptions+0x60>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
 402cc78:	01001604 	movi	r4,88
 402cc7c:	401cdc80 	call	401cdc8 <npalloc>

      if (imo == NULL)
 402cc80:	10008526 	beq	r2,zero,402ce98 <ip_setmoptions+0x258>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
 402cc84:	1023883a 	mov	r17,r2

      if (imo == NULL)
         return (ENOBUFS);
      *imop = imo;
 402cc88:	80800315 	stw	r2,12(r16)
      imo->imo_multicast_netp = NULL;
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
 402cc8c:	00800044 	movi	r2,1
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
 402cc90:	88800145 	stb	r2,5(r17)
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));

      if (imo == NULL)
         return (ENOBUFS);
      *imop = imo;
      imo->imo_multicast_netp = NULL;
 402cc94:	88000015 	stw	zero,0(r17)
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
 402cc98:	88800105 	stb	r2,4(r17)
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
      imo->imo_num_memberships = 0;
 402cc9c:	8800018d 	sth	zero,6(r17)
   }

   switch (optname) 
 402cca0:	913ffdc4 	addi	r4,r18,-9
 402cca4:	00800104 	movi	r2,4
 402cca8:	11000c2e 	bgeu	r2,r4,402ccdc <ip_setmoptions+0x9c>
 402ccac:	040017c4 	movi	r16,95
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
 402ccb0:	88800017 	ldw	r2,0(r17)
 402ccb4:	10001926 	beq	r2,zero,402cd1c <ip_setmoptions+0xdc>
   {
      IM_FREE(*imop);
      *imop = NULL;
   }
   return (error);
}
 402ccb8:	8005883a 	mov	r2,r16
 402ccbc:	dfc00617 	ldw	ra,24(sp)
 402ccc0:	dd000517 	ldw	r20,20(sp)
 402ccc4:	dcc00417 	ldw	r19,16(sp)
 402ccc8:	dc800317 	ldw	r18,12(sp)
 402cccc:	dc400217 	ldw	r17,8(sp)
 402ccd0:	dc000117 	ldw	r16,4(sp)
 402ccd4:	dec00704 	addi	sp,sp,28
 402ccd8:	f800283a 	ret
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
      imo->imo_num_memberships = 0;
   }

   switch (optname) 
 402ccdc:	2105883a 	add	r2,r4,r4
 402cce0:	1085883a 	add	r2,r2,r2
 402cce4:	00c100f4 	movhi	r3,1027
 402cce8:	18f33e04 	addi	r3,r3,-13064
 402ccec:	10c5883a 	add	r2,r2,r3
 402ccf0:	11000017 	ldw	r4,0(r2)
 402ccf4:	2000683a 	jmp	r4
 402ccf8:	0402cd0c 	andi	r16,zero,2868
 402ccfc:	0402cd38 	rdprs	r16,zero,2868
 402cd00:	0402cd48 	cmpgei	r16,zero,2869
 402cd04:	0402cd60 	cmpeqi	r16,zero,2869
 402cd08:	0402cddc 	xori	r16,zero,2871

   case IP_MULTICAST_IF:
      /*
       * Select the interface for outgoing multicast packets.
       */
      addr = *(ip_addr *)val;
 402cd0c:	99000017 	ldw	r4,0(r19)
         /*
          * AADDR is used to remove a previous selection.
          * When no interface is selected, a default one is
          * chosen every time a multicast packet is sent.
          */
      if (addr == AADDR) 
 402cd10:	2000661e 	bne	r4,zero,402ceac <ip_setmoptions+0x26c>
      {
         imo->imo_multicast_netp = NULL;
 402cd14:	0021883a 	mov	r16,zero
 402cd18:	88000015 	stw	zero,0(r17)
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
 402cd1c:	88c00117 	ldw	r3,4(r17)
 402cd20:	00804044 	movi	r2,257
 402cd24:	18bfe41e 	bne	r3,r2,402ccb8 <ip_setmoptions+0x78>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
       imo->imo_num_memberships == 0) 
   {
      IM_FREE(*imop);
 402cd28:	a1000017 	ldw	r4,0(r20)
 402cd2c:	401cce40 	call	401cce4 <npfree>
      *imop = NULL;
 402cd30:	a0000015 	stw	zero,0(r20)
 402cd34:	003fe006 	br	402ccb8 <ip_setmoptions+0x78>

   case IP_MULTICAST_TTL:
      /*
       * Set the IP time-to-live for outgoing multicast packets.
       */
      imo->imo_multicast_ttl = *(u_char *)val;
 402cd38:	98800003 	ldbu	r2,0(r19)
 402cd3c:	0021883a 	mov	r16,zero
 402cd40:	88800105 	stb	r2,4(r17)
 402cd44:	003fda06 	br	402ccb0 <ip_setmoptions+0x70>
   case IP_MULTICAST_LOOP:
      /*
       * Set the loopback flag for outgoing multicast packets.
       * Must be zero or one.
       */
      if (*(u_char *)val > 1) 
 402cd48:	99000003 	ldbu	r4,0(r19)
 402cd4c:	00800044 	movi	r2,1
 402cd50:	20c03fcc 	andi	r3,r4,255
 402cd54:	10c0522e 	bgeu	r2,r3,402cea0 <ip_setmoptions+0x260>
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
         imo->imo_membership[i-1] = imo->imo_membership[i];
      --imo->imo_num_memberships;
      break;
 402cd58:	04000584 	movi	r16,22
 402cd5c:	003fd406 	br	402ccb0 <ip_setmoptions+0x70>
      /*
       * Add a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 402cd60:	98800017 	ldw	r2,0(r19)
 402cd64:	00f80034 	movhi	r3,57344
 402cd68:	1004963a 	slli	r2,r2,24
 402cd6c:	10bc002c 	andhi	r2,r2,61440
 402cd70:	10fff91e 	bne	r2,r3,402cd58 <ip_setmoptions+0x118>
       * If no interface address was provided, use the interface of
       * the route to the given multicast address.
       * For the Iniche stack implementation, look for a default
       * interface that supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 402cd74:	99000117 	ldw	r4,4(r19)
 402cd78:	d80b883a 	mov	r5,sp
 402cd7c:	402ca700 	call	402ca70 <IPADDR_TO_NETP>
      /*
       * See if we found an interface, and confirm that it
       * supports multicast.
       */
      if (netp == NULL || (netp->n_mcastlist) == NULL) 
 402cd80:	d9400017 	ldw	r5,0(sp)
 402cd84:	28005226 	beq	r5,zero,402ced0 <ip_setmoptions+0x290>
 402cd88:	28802b17 	ldw	r2,172(r5)
 402cd8c:	10005026 	beq	r2,zero,402ced0 <ip_setmoptions+0x290>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 402cd90:	8980018b 	ldhu	r6,6(r17)
 402cd94:	30006426 	beq	r6,zero,402cf28 <ip_setmoptions+0x2e8>
 402cd98:	0009883a 	mov	r4,zero
 402cd9c:	0007883a 	mov	r3,zero
 402cda0:	00000306 	br	402cdb0 <ip_setmoptions+0x170>
 402cda4:	21000044 	addi	r4,r4,1
 402cda8:	20ffffcc 	andi	r3,r4,65535
 402cdac:	19804a26 	beq	r3,r6,402ced8 <ip_setmoptions+0x298>
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
 402cdb0:	18c5883a 	add	r2,r3,r3
 402cdb4:	1085883a 	add	r2,r2,r2
 402cdb8:	1445883a 	add	r2,r2,r17
 402cdbc:	10800217 	ldw	r2,8(r2)
 402cdc0:	10c00117 	ldw	r3,4(r2)
 402cdc4:	28fff71e 	bne	r5,r3,402cda4 <ip_setmoptions+0x164>
 402cdc8:	10c00017 	ldw	r3,0(r2)
 402cdcc:	98800017 	ldw	r2,0(r19)
 402cdd0:	18bff41e 	bne	r3,r2,402cda4 <ip_setmoptions+0x164>
 402cdd4:	04001c04 	movi	r16,112
 402cdd8:	003fb506 	br	402ccb0 <ip_setmoptions+0x70>
      /*
       * Drop a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 402cddc:	98800017 	ldw	r2,0(r19)
 402cde0:	00f80034 	movhi	r3,57344
 402cde4:	1004963a 	slli	r2,r2,24
 402cde8:	10bc002c 	andhi	r2,r2,61440
 402cdec:	10ffda1e 	bne	r2,r3,402cd58 <ip_setmoptions+0x118>
       * If an interface address was specified, get a pointer
       * to its ifnet structure. If an interface address was not
       * specified, get a pointer to the first interface that
       * supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 402cdf0:	99000117 	ldw	r4,4(r19)
 402cdf4:	d80b883a 	mov	r5,sp
 402cdf8:	402ca700 	call	402ca70 <IPADDR_TO_NETP>
      if (netp == NULL) 
 402cdfc:	d9c00017 	ldw	r7,0(sp)
 402ce00:	38003326 	beq	r7,zero,402ced0 <ip_setmoptions+0x290>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 402ce04:	8980018b 	ldhu	r6,6(r17)
 402ce08:	30003126 	beq	r6,zero,402ced0 <ip_setmoptions+0x290>
 402ce0c:	0021883a 	mov	r16,zero
 402ce10:	000b883a 	mov	r5,zero
 402ce14:	00000306 	br	402ce24 <ip_setmoptions+0x1e4>
 402ce18:	84000044 	addi	r16,r16,1
 402ce1c:	817fffcc 	andi	r5,r16,65535
 402ce20:	29802b26 	beq	r5,r6,402ced0 <ip_setmoptions+0x290>
      {
         if ((netp == NULL ||
 402ce24:	2945883a 	add	r2,r5,r5
 402ce28:	1085883a 	add	r2,r2,r2
 402ce2c:	1445883a 	add	r2,r2,r17
 402ce30:	11000217 	ldw	r4,8(r2)
 402ce34:	20c00117 	ldw	r3,4(r4)
 402ce38:	38fff71e 	bne	r7,r3,402ce18 <ip_setmoptions+0x1d8>
 402ce3c:	20c00017 	ldw	r3,0(r4)
 402ce40:	98800017 	ldw	r2,0(r19)
 402ce44:	18bff41e 	bne	r3,r2,402ce18 <ip_setmoptions+0x1d8>
             mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i == imo->imo_num_memberships) 
 402ce48:	31402126 	beq	r6,r5,402ced0 <ip_setmoptions+0x290>
      }
      /*
       * Give up the multicast address record to which the
       * membership points.
       */
      in_delmulti(imo->imo_membership[i]);
 402ce4c:	402b1240 	call	402b124 <in_delmulti>
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 402ce50:	89c0018b 	ldhu	r7,6(r17)
 402ce54:	81400044 	addi	r5,r16,1
 402ce58:	293fffcc 	andi	r4,r5,65535
 402ce5c:	38bfffcc 	andi	r2,r7,65535
 402ce60:	2080092e 	bgeu	r4,r2,402ce88 <ip_setmoptions+0x248>
 402ce64:	100d883a 	mov	r6,r2
         imo->imo_membership[i-1] = imo->imo_membership[i];
 402ce68:	2105883a 	add	r2,r4,r4
 402ce6c:	1085883a 	add	r2,r2,r2
 402ce70:	1445883a 	add	r2,r2,r17
 402ce74:	10c00217 	ldw	r3,8(r2)
       */
      in_delmulti(imo->imo_membership[i]);
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 402ce78:	29400044 	addi	r5,r5,1
 402ce7c:	293fffcc 	andi	r4,r5,65535
         imo->imo_membership[i-1] = imo->imo_membership[i];
 402ce80:	10c00115 	stw	r3,4(r2)
       */
      in_delmulti(imo->imo_membership[i]);
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 402ce84:	21bff836 	bltu	r4,r6,402ce68 <ip_setmoptions+0x228>
         imo->imo_membership[i-1] = imo->imo_membership[i];
      --imo->imo_num_memberships;
 402ce88:	38bfffc4 	addi	r2,r7,-1
 402ce8c:	0021883a 	mov	r16,zero
 402ce90:	8880018d 	sth	r2,6(r17)
 402ce94:	003f8606 	br	402ccb0 <ip_setmoptions+0x70>
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));

      if (imo == NULL)
 402ce98:	04001a44 	movi	r16,105
 402ce9c:	003f8606 	br	402ccb8 <ip_setmoptions+0x78>
      if (*(u_char *)val > 1) 
      {
         error = EINVAL;
         break;
      }
      imo->imo_multicast_loop = *(u_char *)(val);
 402cea0:	0021883a 	mov	r16,zero
 402cea4:	89000145 	stb	r4,5(r17)
 402cea8:	003f8106 	br	402ccb0 <ip_setmoptions+0x70>
         /*
          * The selected interface is identified by its local
          * IP address.  Find the interface and confirm that
          * it supports multicasting.
          */
      IPADDR_TO_NETP(addr, &netp);
 402ceac:	d80b883a 	mov	r5,sp
 402ceb0:	402ca700 	call	402ca70 <IPADDR_TO_NETP>
      if ((netp == NULL) || (netp->n_mcastlist) == NULL) 
 402ceb4:	d8c00017 	ldw	r3,0(sp)
 402ceb8:	18000526 	beq	r3,zero,402ced0 <ip_setmoptions+0x290>
 402cebc:	18802b17 	ldw	r2,172(r3)
 402cec0:	10000326 	beq	r2,zero,402ced0 <ip_setmoptions+0x290>
      {
         error = EADDRNOTAVAIL;
         break;
      }
      if (addr != AADDR) 
         imo->imo_multicast_netp = netp;
 402cec4:	0021883a 	mov	r16,zero
 402cec8:	88c00015 	stw	r3,0(r17)
 402cecc:	003f7a06 	br	402ccb8 <ip_setmoptions+0x78>
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
         imo->imo_membership[i-1] = imo->imo_membership[i];
      --imo->imo_num_memberships;
      break;
 402ced0:	04001f44 	movi	r16,125
 402ced4:	003f7606 	br	402ccb0 <ip_setmoptions+0x70>
      if (i < imo->imo_num_memberships) 
      {
         error = EADDRINUSE;
         break;
      }
      if (i == IP_MAX_MEMBERSHIPS) 
 402ced8:	00800504 	movi	r2,20
 402cedc:	1880021e 	bne	r3,r2,402cee8 <ip_setmoptions+0x2a8>
 402cee0:	04002044 	movi	r16,129
 402cee4:	003f7206 	br	402ccb0 <ip_setmoptions+0x70>
 402cee8:	1821883a 	mov	r16,r3
      }
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
 402ceec:	9809883a 	mov	r4,r19
 402cef0:	01800104 	movi	r6,4
 402cef4:	402b1f00 	call	402b1f0 <in_addmulti>
 402cef8:	8407883a 	add	r3,r16,r16
 402cefc:	18c7883a 	add	r3,r3,r3
 402cf00:	1c47883a 	add	r3,r3,r17
 402cf04:	18800215 	stw	r2,8(r3)
 402cf08:	10000526 	beq	r2,zero,402cf20 <ip_setmoptions+0x2e0>
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
      {
         error = ENOBUFS;
         break;
      }
      ++imo->imo_num_memberships;
 402cf0c:	8880018b 	ldhu	r2,6(r17)
 402cf10:	0021883a 	mov	r16,zero
 402cf14:	10800044 	addi	r2,r2,1
 402cf18:	8880018d 	sth	r2,6(r17)
 402cf1c:	003f6406 	br	402ccb0 <ip_setmoptions+0x70>
      }
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
 402cf20:	04001a44 	movi	r16,105
 402cf24:	003f6206 	br	402ccb0 <ip_setmoptions+0x70>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 402cf28:	0021883a 	mov	r16,zero
 402cf2c:	003fef06 	br	402ceec <ip_setmoptions+0x2ac>

0402cf30 <u_mctest_run>:

int u_mctest_run(void * pio)
{
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
 402cf30:	008100f4 	movhi	r2,1027
 402cf34:	1097dd04 	addi	r2,r2,24436
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 402cf38:	defedb04 	addi	sp,sp,-1172
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
 402cf3c:	1340070b 	ldhu	r13,28(r2)
 402cf40:	10c00017 	ldw	r3,0(r2)
 402cf44:	11c00117 	ldw	r7,4(r2)
 402cf48:	12000217 	ldw	r8,8(r2)
 402cf4c:	12400317 	ldw	r9,12(r2)
 402cf50:	12800417 	ldw	r10,16(r2)
 402cf54:	12c00517 	ldw	r11,20(r2)
 402cf58:	13000617 	ldw	r12,24(r2)
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 402cf5c:	dd011f15 	stw	r20,1148(sp)
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 402cf60:	05000084 	movi	r20,2
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 402cf64:	dcc11e15 	stw	r19,1144(sp)
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 402cf68:	a00b883a 	mov	r5,r20
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 402cf6c:	2027883a 	mov	r19,r4
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 402cf70:	000d883a 	mov	r6,zero
 402cf74:	a009883a 	mov	r4,r20
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 402cf78:	dc411c15 	stw	r17,1136(sp)
 402cf7c:	dc011b15 	stw	r16,1132(sp)
 402cf80:	dfc12415 	stw	ra,1168(sp)
 402cf84:	df012315 	stw	fp,1164(sp)
 402cf88:	ddc12215 	stw	r23,1160(sp)
 402cf8c:	dd812115 	stw	r22,1156(sp)
 402cf90:	dd412015 	stw	r21,1152(sp)
 402cf94:	dc811d15 	stw	r18,1140(sp)
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
 402cf98:	d8c01315 	stw	r3,76(sp)
 402cf9c:	d9c01415 	stw	r7,80(sp)
 402cfa0:	da001515 	stw	r8,84(sp)
 402cfa4:	da401615 	stw	r9,88(sp)
 402cfa8:	da801715 	stw	r10,92(sp)
 402cfac:	dac01815 	stw	r11,96(sp)
 402cfb0:	db001915 	stw	r12,100(sp)
 402cfb4:	db401a0d 	sth	r13,104(sp)
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);

   if (s == INVALID_SOCKET) 
 402cfb8:	043fffc4 	movi	r16,-1
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 402cfbc:	401f4ac0 	call	401f4ac <t_socket>
 402cfc0:	1023883a 	mov	r17,r2

   if (s == INVALID_SOCKET) 
 402cfc4:	14015426 	beq	r2,r16,402d518 <u_mctest_run+0x5e8>
      exit(1);
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
 402cfc8:	00800104 	movi	r2,4
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
      exit(1);
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
 402cfcc:	05400044 	movi	r21,1
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
 402cfd0:	100d883a 	mov	r6,r2
 402cfd4:	8809883a 	mov	r4,r17
 402cfd8:	800b883a 	mov	r5,r16
 402cfdc:	d9c00304 	addi	r7,sp,12
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
      exit(1);
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
 402cfe0:	dd400315 	stw	r21,12(sp)
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
 402cfe4:	d8800015 	stw	r2,0(sp)
 402cfe8:	401ee800 	call	401ee80 <t_setsockopt>
   if (iRet == SOCKET_ERROR) 
 402cfec:	14010426 	beq	r2,r16,402d400 <u_mctest_run+0x4d0>
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
   stLocal.sin_port =   htons(TEST_PORT);
 402cff0:	05e00344 	movi	r23,-32755
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
 402cff4:	8809883a 	mov	r4,r17
 402cff8:	d9400704 	addi	r5,sp,28
 402cffc:	01800404 	movi	r6,16
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
 402d000:	dd00070d 	sth	r20,28(sp)
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
 402d004:	d8000815 	stw	zero,32(sp)
   stLocal.sin_port =   htons(TEST_PORT);
 402d008:	ddc0078d 	sth	r23,30(sp)
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
 402d00c:	a02d883a 	mov	r22,r20
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
   stLocal.sin_port =   htons(TEST_PORT);
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
 402d010:	401f3a80 	call	401f3a8 <t_bind>
   if (iRet == SOCKET_ERROR) 
 402d014:	14010226 	beq	r2,r16,402d420 <u_mctest_run+0x4f0>
       t_errno(s));
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
 402d018:	014100f4 	movhi	r5,1027
 402d01c:	29575104 	addi	r5,r5,23876
 402d020:	018100f4 	movhi	r6,1027
 402d024:	31975904 	addi	r6,r6,23908
 402d028:	9809883a 	mov	r4,r19
 402d02c:	4019c700 	call	4019c70 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 402d030:	010100f4 	movhi	r4,1027
 402d034:	21175904 	addi	r4,r4,23908
 402d038:	402de600 	call	402de60 <inet_addr>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d03c:	01010134 	movhi	r4,1028
 402d040:	210afb04 	addi	r4,r4,11244
 402d044:	20c00a17 	ldw	r3,40(r4)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
 402d048:	04800204 	movi	r18,8
 402d04c:	8809883a 	mov	r4,r17
 402d050:	000b883a 	mov	r5,zero
 402d054:	01800304 	movi	r6,12
 402d058:	d9c00504 	addi	r7,sp,20
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 402d05c:	d8800515 	stw	r2,20(sp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d060:	d8c00615 	stw	r3,24(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
 402d064:	dc800015 	stw	r18,0(sp)
 402d068:	401ee800 	call	401ee80 <t_setsockopt>
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 402d06c:	1400f326 	beq	r2,r16,402d43c <u_mctest_run+0x50c>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
                     t_errno(s));
   } 
   tk_yield();
 402d070:	401a3d40 	call	401a3d4 <tk_yield>

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
 402d074:	014100f4 	movhi	r5,1027
 402d078:	29575104 	addi	r5,r5,23876
 402d07c:	018100f4 	movhi	r6,1027
 402d080:	31976904 	addi	r6,r6,23972
 402d084:	9809883a 	mov	r4,r19
 402d088:	4019c700 	call	4019c70 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
 402d08c:	010100f4 	movhi	r4,1027
 402d090:	21176904 	addi	r4,r4,23972
 402d094:	402de600 	call	402de60 <inet_addr>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d098:	01010134 	movhi	r4,1028
 402d09c:	210afb04 	addi	r4,r4,11244
 402d0a0:	20c00a17 	ldw	r3,40(r4)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 402d0a4:	000b883a 	mov	r5,zero
 402d0a8:	8809883a 	mov	r4,r17
 402d0ac:	01800304 	movi	r6,12
 402d0b0:	d9c00504 	addi	r7,sp,20
   tk_yield();

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
 402d0b4:	d8800515 	stw	r2,20(sp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d0b8:	d8c00615 	stw	r3,24(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 402d0bc:	dc800015 	stw	r18,0(sp)
 402d0c0:	401ee800 	call	401ee80 <t_setsockopt>
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 402d0c4:	1400e526 	beq	r2,r16,402d45c <u_mctest_run+0x52c>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
                     t_errno(s));
   }
   tk_yield();
 402d0c8:	401a3d40 	call	401a3d4 <tk_yield>

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
 402d0cc:	014100f4 	movhi	r5,1027
 402d0d0:	29575104 	addi	r5,r5,23876
 402d0d4:	018100f4 	movhi	r6,1027
 402d0d8:	31976c04 	addi	r6,r6,23984
 402d0dc:	9809883a 	mov	r4,r19
 402d0e0:	4019c700 	call	4019c70 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
 402d0e4:	010100f4 	movhi	r4,1027
 402d0e8:	21176c04 	addi	r4,r4,23984
 402d0ec:	402de600 	call	402de60 <inet_addr>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d0f0:	01010134 	movhi	r4,1028
 402d0f4:	210afb04 	addi	r4,r4,11244
 402d0f8:	20c00a17 	ldw	r3,40(r4)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 402d0fc:	000b883a 	mov	r5,zero
 402d100:	8809883a 	mov	r4,r17
 402d104:	01800304 	movi	r6,12
 402d108:	d9c00504 	addi	r7,sp,20
   tk_yield();

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
 402d10c:	d8800515 	stw	r2,20(sp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d110:	d8c00615 	stw	r3,24(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 402d114:	dc800015 	stw	r18,0(sp)
 402d118:	401ee800 	call	401ee80 <t_setsockopt>
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 402d11c:	1400d726 	beq	r2,r16,402d47c <u_mctest_run+0x54c>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
                     t_errno(s));
   }
   tk_yield();
 402d120:	401a3d40 	call	401a3d4 <tk_yield>

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
 402d124:	8809883a 	mov	r4,r17
 402d128:	000b883a 	mov	r5,zero
 402d12c:	01800284 	movi	r6,10
 402d130:	d9c00204 	addi	r7,sp,8
                     t_errno(s));
   }
   tk_yield();

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
 402d134:	dd800205 	stb	r22,8(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
 402d138:	dd400015 	stw	r21,0(sp)
 402d13c:	401ee800 	call	401ee80 <t_setsockopt>
   if (iRet == SOCKET_ERROR) 
 402d140:	1400d626 	beq	r2,r16,402d49c <u_mctest_run+0x56c>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 402d144:	8809883a 	mov	r4,r17
 402d148:	000b883a 	mov	r5,zero
 402d14c:	018002c4 	movi	r6,11
 402d150:	d9c00204 	addi	r7,sp,8
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
 402d154:	dd400205 	stb	r21,8(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 402d158:	dd400015 	stw	r21,0(sp)
 402d15c:	401ee800 	call	401ee80 <t_setsockopt>
   if (iRet == SOCKET_ERROR) 
 402d160:	1400dd26 	beq	r2,r16,402d4d8 <u_mctest_run+0x5a8>
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
 402d164:	010100f4 	movhi	r4,1027
 402d168:	21176904 	addi	r4,r4,23972
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
 402d16c:	dd000f0d 	sth	r20,60(sp)
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
 402d170:	402de600 	call	402de60 <inet_addr>
   stTo.sin_port =        htons(TEST_PORT);
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
 402d174:	014100f4 	movhi	r5,1027
 402d178:	29578904 	addi	r5,r5,24100
 402d17c:	9809883a 	mov	r4,r19
 402d180:	018100f4 	movhi	r6,1027
 402d184:	31976904 	addi	r6,r6,23972
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
   stTo.sin_port =        htons(TEST_PORT);
 402d188:	ddc00f8d 	sth	r23,62(sp)
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
 402d18c:	d8801015 	stw	r2,64(sp)
 402d190:	a839883a 	mov	fp,r21
   stTo.sin_port =        htons(TEST_PORT);
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
 402d194:	4019c700 	call	4019c70 <ns_printf>
 402d198:	002f883a 	mov	r23,zero
 402d19c:	05400404 	movi	r21,16
 402d1a0:	dd001a84 	addi	r20,sp,106
 402d1a4:	dd800b04 	addi	r22,sp,44
   for (i = 0; i < LOOPMAX; i++)
   {
      static int iCounter = 1;

      /* send to the multicast address */
      sprintf(&achOut[16], "%d", iCounter++);
 402d1a8:	d0a05117 	ldw	r2,-32444(gp)
 402d1ac:	d8c01304 	addi	r3,sp,76
 402d1b0:	19000404 	addi	r4,r3,16
 402d1b4:	100d883a 	mov	r6,r2
 402d1b8:	014100f4 	movhi	r5,1027
 402d1bc:	294a5004 	addi	r5,r5,10560
 402d1c0:	10800044 	addi	r2,r2,1
 402d1c4:	d0a05115 	stw	r2,-32444(gp)
 402d1c8:	400b17c0 	call	400b17c <sprintf>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
 402d1cc:	d8800f04 	addi	r2,sp,60
 402d1d0:	000f883a 	mov	r7,zero
 402d1d4:	8809883a 	mov	r4,r17
 402d1d8:	d9401304 	addi	r5,sp,76
 402d1dc:	01800784 	movi	r6,30
 402d1e0:	d8800015 	stw	r2,0(sp)
 402d1e4:	dd400115 	stw	r21,4(sp)
 402d1e8:	401e7100 	call	401e710 <t_sendto>
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
 402d1ec:	1000c216 	blt	r2,zero,402d4f8 <u_mctest_run+0x5c8>
         goto exitloop;
      }

      /* make the socket non-blocking */
      iTmp = 1;
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
 402d1f0:	00800104 	movi	r2,4
 402d1f4:	8809883a 	mov	r4,r17
 402d1f8:	017fffc4 	movi	r5,-1
 402d1fc:	01840584 	movi	r6,4118
 402d200:	d9c00304 	addi	r7,sp,12
 402d204:	d8800015 	stw	r2,0(sp)
         /*     exit(1); */
         goto exitloop;
      }

      /* make the socket non-blocking */
      iTmp = 1;
 402d208:	df000315 	stw	fp,12(sp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
 402d20c:	401ee800 	call	401ee80 <t_setsockopt>
      if (iRet == SOCKET_ERROR) 
 402d210:	00ffffc4 	movi	r3,-1
 402d214:	10c05a26 	beq	r2,r3,402d380 <u_mctest_run+0x450>
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
                        t_errno(s));
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);
 402d218:	04810134 	movhi	r18,1028
 402d21c:	94a93304 	addi	r18,r18,-23348
 402d220:	90800017 	ldw	r2,0(r18)
 402d224:	14007d04 	addi	r16,r2,500

      while (cticks < endtime)
 402d228:	90800017 	ldw	r2,0(r18)
 402d22c:	14001b2e 	bgeu	r2,r16,402d29c <u_mctest_run+0x36c>
      {
         int sa_size = sizeof(struct sockaddr_in);
 402d230:	dd400415 	stw	r21,16(sp)
         tk_yield();
 402d234:	401a3d40 	call	401a3d4 <tk_yield>

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
 402d238:	d8800404 	addi	r2,sp,16
 402d23c:	8809883a 	mov	r4,r17
 402d240:	a00b883a 	mov	r5,r20
 402d244:	01810004 	movi	r6,1024
 402d248:	000f883a 	mov	r7,zero
 402d24c:	d8800115 	stw	r2,4(sp)
 402d250:	dd800015 	stw	r22,0(sp)
 402d254:	401ebb40 	call	401ebb4 <t_recvfrom>
         if (iRet < 0) 
 402d258:	10003d16 	blt	r2,zero,402d350 <u_mctest_run+0x420>
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
               /*     exit(1); */
               goto exitloop;
            }
         }
         if (iRet > 0)
 402d25c:	00bff20e 	bge	zero,r2,402d228 <u_mctest_run+0x2f8>
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
 402d260:	d9000c17 	ldw	r4,48(sp)
 402d264:	401a0480 	call	401a048 <print_ipad>
 402d268:	d8c00b8b 	ldhu	r3,46(sp)
 402d26c:	100d883a 	mov	r6,r2
 402d270:	9809883a 	mov	r4,r19
 402d274:	180e923a 	slli	r7,r3,8
 402d278:	1806d23a 	srli	r3,r3,8
 402d27c:	014100f4 	movhi	r5,1027
 402d280:	2957b404 	addi	r5,r5,24272
 402d284:	39ffc00c 	andi	r7,r7,65280
 402d288:	19ceb03a 	or	r7,r3,r7
 402d28c:	dd000015 	stw	r20,0(sp)
 402d290:	4019c700 	call	4019c70 <ns_printf>
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);

      while (cticks < endtime)
 402d294:	90800017 	ldw	r2,0(r18)
 402d298:	143fe536 	bltu	r2,r16,402d230 <u_mctest_run+0x300>
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
 402d29c:	8809883a 	mov	r4,r17
 402d2a0:	017fffc4 	movi	r5,-1
 402d2a4:	01840584 	movi	r6,4118
 402d2a8:	d9c00204 	addi	r7,sp,8
             ntohs(stFrom.sin_port), achIn);
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
 402d2ac:	d8000205 	stb	zero,8(sp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
 402d2b0:	df000015 	stw	fp,0(sp)
 402d2b4:	401ee800 	call	401ee80 <t_setsockopt>
      if (iRet == SOCKET_ERROR) 
 402d2b8:	013fffc4 	movi	r4,-1
 402d2bc:	11003826 	beq	r2,r4,402d3a0 <u_mctest_run+0x470>
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
   stTo.sin_port =        htons(TEST_PORT);
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
 402d2c0:	bdc00044 	addi	r23,r23,1
 402d2c4:	008000c4 	movi	r2,3
 402d2c8:	b8bfb71e 	bne	r23,r2,402d1a8 <u_mctest_run+0x278>
      }
   }   /* end for(;;) */

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 402d2cc:	010100f4 	movhi	r4,1027
 402d2d0:	21175904 	addi	r4,r4,23908
 402d2d4:	402de600 	call	402de60 <inet_addr>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d2d8:	01010134 	movhi	r4,1028
 402d2dc:	210afb04 	addi	r4,r4,11244
 402d2e0:	20c00a17 	ldw	r3,40(r4)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 402d2e4:	d9c00504 	addi	r7,sp,20
      }
   }   /* end for(;;) */

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 402d2e8:	d8800515 	stw	r2,20(sp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 402d2ec:	8809883a 	mov	r4,r17
 402d2f0:	00800204 	movi	r2,8
 402d2f4:	000b883a 	mov	r5,zero
 402d2f8:	01800344 	movi	r6,13
   }   /* end for(;;) */

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 402d2fc:	d8c00615 	stw	r3,24(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 402d300:	d8800015 	stw	r2,0(sp)
   if (iRet == SOCKET_ERROR) 
 402d304:	043fffc4 	movi	r16,-1

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 402d308:	401ee800 	call	401ee80 <t_setsockopt>
   if (iRet == SOCKET_ERROR) 
 402d30c:	14003426 	beq	r2,r16,402d3e0 <u_mctest_run+0x4b0>
   {
      ns_printf (pio,"t_shutdown failed.  Err: %d\n", t_errno(s));
   }
#endif

   iRet = t_socketclose(s);
 402d310:	8809883a 	mov	r4,r17
 402d314:	401e5980 	call	401e598 <t_socketclose>
   if (iRet == SOCKET_ERROR) 
 402d318:	14002926 	beq	r2,r16,402d3c0 <u_mctest_run+0x490>
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
   }

   return(0);
}  /* end main() */  
 402d31c:	0005883a 	mov	r2,zero
 402d320:	dfc12417 	ldw	ra,1168(sp)
 402d324:	df012317 	ldw	fp,1164(sp)
 402d328:	ddc12217 	ldw	r23,1160(sp)
 402d32c:	dd812117 	ldw	r22,1156(sp)
 402d330:	dd412017 	ldw	r21,1152(sp)
 402d334:	dd011f17 	ldw	r20,1148(sp)
 402d338:	dcc11e17 	ldw	r19,1144(sp)
 402d33c:	dc811d17 	ldw	r18,1140(sp)
 402d340:	dc411c17 	ldw	r17,1136(sp)
 402d344:	dc011b17 	ldw	r16,1132(sp)
 402d348:	dec12504 	addi	sp,sp,1172
 402d34c:	f800283a 	ret
         tk_yield();

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
         if (iRet < 0) 
         {
            if (t_errno(s) != EWOULDBLOCK)
 402d350:	8809883a 	mov	r4,r17
 402d354:	401e5080 	call	401e508 <t_errno>
 402d358:	00c002c4 	movi	r3,11
 402d35c:	10ffb226 	beq	r2,r3,402d228 <u_mctest_run+0x2f8>
            {
               /*      perror("recvfrom() failed\n"); */
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
 402d360:	8809883a 	mov	r4,r17
 402d364:	401e5080 	call	401e508 <t_errno>
 402d368:	100d883a 	mov	r6,r2
 402d36c:	9809883a 	mov	r4,r19
 402d370:	014100f4 	movhi	r5,1027
 402d374:	2957ac04 	addi	r5,r5,24240
 402d378:	4019c700 	call	4019c70 <ns_printf>
 402d37c:	003fd306 	br	402d2cc <u_mctest_run+0x39c>
      /* make the socket non-blocking */
      iTmp = 1;
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
      if (iRet == SOCKET_ERROR) 
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
 402d380:	8809883a 	mov	r4,r17
 402d384:	401e5080 	call	401e508 <t_errno>
 402d388:	100d883a 	mov	r6,r2
 402d38c:	9809883a 	mov	r4,r19
 402d390:	014100f4 	movhi	r5,1027
 402d394:	2957a004 	addi	r5,r5,24192
 402d398:	4019c700 	call	4019c70 <ns_printf>
 402d39c:	003f9e06 	br	402d218 <u_mctest_run+0x2e8>
      /* make the socket blocking */
      cTmp = 0;
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
      if (iRet == SOCKET_ERROR) 
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (0) failed, Err: %d\n",
 402d3a0:	8809883a 	mov	r4,r17
 402d3a4:	401e5080 	call	401e508 <t_errno>
 402d3a8:	100d883a 	mov	r6,r2
 402d3ac:	9809883a 	mov	r4,r19
 402d3b0:	014100f4 	movhi	r5,1027
 402d3b4:	2957bb04 	addi	r5,r5,24300
 402d3b8:	4019c700 	call	4019c70 <ns_printf>
 402d3bc:	003fc006 	br	402d2c0 <u_mctest_run+0x390>
#endif

   iRet = t_socketclose(s);
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
 402d3c0:	8809883a 	mov	r4,r17
 402d3c4:	401e5080 	call	401e508 <t_errno>
 402d3c8:	100d883a 	mov	r6,r2
 402d3cc:	9809883a 	mov	r4,r19
 402d3d0:	014100f4 	movhi	r5,1027
 402d3d4:	2957d404 	addi	r5,r5,24400
 402d3d8:	4019c700 	call	4019c70 <ns_printf>
 402d3dc:	003fcf06 	br	402d31c <u_mctest_run+0x3ec>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_setsockopt() IP_DROP_MEMBERSHIP failed, Err: %d\n",
 402d3e0:	8809883a 	mov	r4,r17
 402d3e4:	401e5080 	call	401e508 <t_errno>
 402d3e8:	100d883a 	mov	r6,r2
 402d3ec:	9809883a 	mov	r4,r19
 402d3f0:	014100f4 	movhi	r5,1027
 402d3f4:	2957c704 	addi	r5,r5,24348
 402d3f8:	4019c700 	call	4019c70 <ns_printf>
 402d3fc:	003fc406 	br	402d310 <u_mctest_run+0x3e0>
   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
 402d400:	8809883a 	mov	r4,r17
 402d404:	401e5080 	call	401e508 <t_errno>
 402d408:	100d883a 	mov	r6,r2
 402d40c:	9809883a 	mov	r4,r19
 402d410:	014100f4 	movhi	r5,1027
 402d414:	29573e04 	addi	r5,r5,23800
 402d418:	4019c700 	call	4019c70 <ns_printf>
 402d41c:	003ef406 	br	402cff0 <u_mctest_run+0xc0>
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
   stLocal.sin_port =   htons(TEST_PORT);
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
   if (iRet == SOCKET_ERROR) 
   {
      printf ("t_bind() failed, Err: %d\n",
 402d420:	8809883a 	mov	r4,r17
 402d424:	401e5080 	call	401e508 <t_errno>
 402d428:	100b883a 	mov	r5,r2
 402d42c:	010100f4 	movhi	r4,1027
 402d430:	21174a04 	addi	r4,r4,23848
 402d434:	4002ed40 	call	4002ed4 <printf>
 402d438:	003ef706 	br	402d018 <u_mctest_run+0xe8>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 402d43c:	8809883a 	mov	r4,r17
 402d440:	401e5080 	call	401e508 <t_errno>
 402d444:	100d883a 	mov	r6,r2
 402d448:	9809883a 	mov	r4,r19
 402d44c:	014100f4 	movhi	r5,1027
 402d450:	29575c04 	addi	r5,r5,23920
 402d454:	4019c700 	call	4019c70 <ns_printf>
 402d458:	003f0506 	br	402d070 <u_mctest_run+0x140>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 402d45c:	8809883a 	mov	r4,r17
 402d460:	401e5080 	call	401e508 <t_errno>
 402d464:	100d883a 	mov	r6,r2
 402d468:	9809883a 	mov	r4,r19
 402d46c:	014100f4 	movhi	r5,1027
 402d470:	29575c04 	addi	r5,r5,23920
 402d474:	4019c700 	call	4019c70 <ns_printf>
 402d478:	003f1306 	br	402d0c8 <u_mctest_run+0x198>
   stMreq.imr_interface = netstatic[0].n_ipaddr;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 402d47c:	8809883a 	mov	r4,r17
 402d480:	401e5080 	call	401e508 <t_errno>
 402d484:	100d883a 	mov	r6,r2
 402d488:	9809883a 	mov	r4,r19
 402d48c:	014100f4 	movhi	r5,1027
 402d490:	29575c04 	addi	r5,r5,23920
 402d494:	4019c700 	call	4019c70 <ns_printf>
 402d498:	003f2106 	br	402d120 <u_mctest_run+0x1f0>
   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
   if (iRet == SOCKET_ERROR) 
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
 402d49c:	8809883a 	mov	r4,r17
 402d4a0:	401e5080 	call	401e508 <t_errno>
 402d4a4:	100d883a 	mov	r6,r2
 402d4a8:	9809883a 	mov	r4,r19
 402d4ac:	014100f4 	movhi	r5,1027
 402d4b0:	29576f04 	addi	r5,r5,23996
 402d4b4:	4019c700 	call	4019c70 <ns_printf>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 402d4b8:	d9c00204 	addi	r7,sp,8
 402d4bc:	8809883a 	mov	r4,r17
 402d4c0:	000b883a 	mov	r5,zero
 402d4c4:	018002c4 	movi	r6,11
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
 402d4c8:	dd400205 	stb	r21,8(sp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 402d4cc:	dd400015 	stw	r21,0(sp)
 402d4d0:	401ee800 	call	401ee80 <t_setsockopt>
   if (iRet == SOCKET_ERROR) 
 402d4d4:	143f231e 	bne	r2,r16,402d164 <u_mctest_run+0x234>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
 402d4d8:	8809883a 	mov	r4,r17
 402d4dc:	401e5080 	call	401e508 <t_errno>
 402d4e0:	100d883a 	mov	r6,r2
 402d4e4:	9809883a 	mov	r4,r19
 402d4e8:	014100f4 	movhi	r5,1027
 402d4ec:	29577c04 	addi	r5,r5,24048
 402d4f0:	4019c700 	call	4019c70 <ns_printf>
 402d4f4:	003f1b06 	br	402d164 <u_mctest_run+0x234>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
      {
         /*      perror("sendto() failed\n"); */
         ns_printf (pio,"t_sendto() failed, Error: %d\n", t_errno(s));
 402d4f8:	8809883a 	mov	r4,r17
 402d4fc:	401e5080 	call	401e508 <t_errno>
 402d500:	100d883a 	mov	r6,r2
 402d504:	9809883a 	mov	r4,r19
 402d508:	014100f4 	movhi	r5,1027
 402d50c:	29579804 	addi	r5,r5,24160
 402d510:	4019c700 	call	4019c70 <ns_printf>
 402d514:	003f6d06 	br	402d2cc <u_mctest_run+0x39c>
   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);

   if (s == INVALID_SOCKET) 
   {
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
 402d518:	1009883a 	mov	r4,r2
 402d51c:	401e5080 	call	401e508 <t_errno>
 402d520:	100d883a 	mov	r6,r2
 402d524:	9809883a 	mov	r4,r19
 402d528:	014100f4 	movhi	r5,1027
 402d52c:	29573704 	addi	r5,r5,23772
 402d530:	4019c700 	call	4019c70 <ns_printf>
      exit(1);
 402d534:	01000044 	movi	r4,1
 402d538:	4001d8c0 	call	4001d8c <exit>

0402d53c <u_mctest_init>:
 * RETURNS: 
 */

void u_mctest_init()
{
   printf("mctest init called\n");
 402d53c:	010100f4 	movhi	r4,1027
 402d540:	2117e504 	addi	r4,r4,24468
 402d544:	4002fec1 	jmpi	4002fec <puts>

0402d548 <dhc_main_ipset>:
dhc_main_ipset(int iface, int state)
{
   if ( state == DHCS_BOUND )
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
 402d548:	2109883a 	add	r4,r4,r4
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
 402d54c:	defffe04 	addi	sp,sp,-8
   if ( state == DHCS_BOUND )
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
 402d550:	2109883a 	add	r4,r4,r4
 402d554:	00810134 	movhi	r2,1028
 402d558:	108bbb04 	addi	r2,r2,12012
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
 402d55c:	dc000015 	stw	r16,0(sp)
   if ( state == DHCS_BOUND )
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
 402d560:	20a1883a 	add	r16,r4,r2
 */

int
dhc_main_ipset(int iface, int state)
{
   if ( state == DHCS_BOUND )
 402d564:	00800184 	movi	r2,6
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
 402d568:	dfc00115 	stw	ra,4(sp)
   if ( state == DHCS_BOUND )
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
 402d56c:	010100f4 	movhi	r4,1027
 402d570:	2117ea04 	addi	r4,r4,24488
 */

int
dhc_main_ipset(int iface, int state)
{
   if ( state == DHCS_BOUND )
 402d574:	28800526 	beq	r5,r2,402d58c <dhc_main_ipset+0x44>
      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
   }
   return 0;
}
 402d578:	0005883a 	mov	r2,zero
 402d57c:	dfc00117 	ldw	ra,4(sp)
 402d580:	dc000017 	ldw	r16,0(sp)
 402d584:	dec00204 	addi	sp,sp,8
 402d588:	f800283a 	ret
dhc_main_ipset(int iface, int state)
{
   if ( state == DHCS_BOUND )
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
 402d58c:	81400017 	ldw	r5,0(r16)
 402d590:	29400104 	addi	r5,r5,4
 402d594:	4002ed40 	call	4002ed4 <printf>
              nets[iface]->name);

      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
 402d598:	80c00017 	ldw	r3,0(r16)
 402d59c:	19000a17 	ldw	r4,40(r3)
 402d5a0:	401a0480 	call	401a048 <print_ipad>
 402d5a4:	100b883a 	mov	r5,r2
 402d5a8:	010100f4 	movhi	r4,1027
 402d5ac:	2117f804 	addi	r4,r4,24544
 402d5b0:	4002ed40 	call	4002ed4 <printf>
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
 402d5b4:	80c00017 	ldw	r3,0(r16)
 402d5b8:	19000c17 	ldw	r4,48(r3)
 402d5bc:	401a0480 	call	401a048 <print_ipad>
 402d5c0:	100b883a 	mov	r5,r2
 402d5c4:	010100f4 	movhi	r4,1027
 402d5c8:	2117fd04 	addi	r4,r4,24564
 402d5cc:	4002ed40 	call	4002ed4 <printf>
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
 402d5d0:	80c00017 	ldw	r3,0(r16)
 402d5d4:	19000d17 	ldw	r4,52(r3)
 402d5d8:	401a0480 	call	401a048 <print_ipad>
 402d5dc:	100b883a 	mov	r5,r2
 402d5e0:	010100f4 	movhi	r4,1027
 402d5e4:	21180204 	addi	r4,r4,24584
 402d5e8:	4002ed40 	call	4002ed4 <printf>
   }
   return 0;
}
 402d5ec:	0005883a 	mov	r2,zero
 402d5f0:	dfc00117 	ldw	ra,4(sp)
 402d5f4:	dc000017 	ldw	r16,0(sp)
 402d5f8:	dec00204 	addi	sp,sp,8
 402d5fc:	f800283a 	ret

0402d600 <dhc_setup>:
 * RETURNS: void
 */

void
dhc_setup(void)
{  
 402d600:	defff204 	addi	sp,sp,-56
 402d604:	dfc00d15 	stw	ra,52(sp)
 402d608:	df000c15 	stw	fp,48(sp)
 402d60c:	ddc00b15 	stw	r23,44(sp)
 402d610:	dd800a15 	stw	r22,40(sp)
 402d614:	dd400915 	stw	r21,36(sp)
 402d618:	dd000815 	stw	r20,32(sp)
 402d61c:	dcc00715 	stw	r19,28(sp)
 402d620:	dc800615 	stw	r18,24(sp)
 402d624:	dc400515 	stw	r17,20(sp)
 402d628:	dc000415 	stw	r16,16(sp)
   ulong    dhcp_started;
   ip_addr  dhcp_saveaddr[STATIC_NETS];
   int      e;
   int      dhcnets = 0;   /* number of nets doing DHCP */

   e = dhc_init();
 402d62c:	401bc240 	call	401bc24 <dhc_init>

   if (e)
 402d630:	1000621e 	bne	r2,zero,402d7bc <dhc_setup+0x1bc>
   {
      printf("Error starting DHCP client code.\n");
      netexit(1);
   }

   dhcp_started = cticks;  /* init timeout */
 402d634:	05410134 	movhi	r21,1028
 402d638:	ad693304 	addi	r21,r21,-23348
 402d63c:	ad800017 	ldw	r22,0(r21)
 402d640:	0021883a 	mov	r16,zero
 402d644:	002f883a 	mov	r23,zero
 402d648:	04410134 	movhi	r17,1028
 402d64c:	8c4bbb04 	addi	r17,r17,12012
 402d650:	d829883a 	mov	r20,sp
 402d654:	04810134 	movhi	r18,1028
 402d658:	948bef04 	addi	r18,r18,12220
 402d65c:	07000104 	movi	fp,4

   for (iface = 0; iface < STATIC_NETS; iface++)
   {
      if (!nets[iface])
 402d660:	88c00017 	ldw	r3,0(r17)
 402d664:	18000e26 	beq	r3,zero,402d6a0 <dhc_setup+0xa0>
#ifdef INCLUDE_NVPARMS
      if (inet_nvparms.ifs[iface].client_dhcp)
         nets[iface]->n_flags |= NF_DHCPC ; /* use DHCP Client on this iface */
#endif   /* INCLUDE_NVPARMS */

      if (!(nets[iface]->n_flags & NF_DHCPC))
 402d668:	18802a17 	ldw	r2,168(r3)
 402d66c:	1080400c 	andi	r2,r2,256
 402d670:	10000b26 	beq	r2,zero,402d6a0 <dhc_setup+0xa0>
         continue;

      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
 402d674:	90800017 	ldw	r2,0(r18)
 402d678:	10005626 	beq	r2,zero,402d7d4 <dhc_setup+0x1d4>
      {
         dhc_set_callback(iface, dhc_main_ipset);
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
 402d67c:	1cc00a17 	ldw	r19,40(r3)

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
 402d680:	9800281e 	bne	r19,zero,402d724 <dhc_setup+0x124>
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
 402d684:	8009883a 	mov	r4,r16
 402d688:	01400044 	movi	r5,1
 402d68c:	401a7400 	call	401a740 <dhc_state_init>
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
 402d690:	401b5080 	call	401b508 <dhc_second>
      if (e)
 402d694:	1000281e 	bne	r2,zero,402d738 <dhc_setup+0x138>
      {
         dhc_set_callback(iface, dhc_main_ipset);
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
 402d698:	a4c00015 	stw	r19,0(r20)
      /* If we are not using Auto IP then we want to block below waiting
       * for DHCP completion. If we are using Auto IP then we want to
       * return and let the Auto IP code handle the DHCP completion.
       * "dhcnets" is a flag which allows this.
       */
      dhcnets++;
 402d69c:	bdc00044 	addi	r23,r23,1
      netexit(1);
   }

   dhcp_started = cticks;  /* init timeout */

   for (iface = 0; iface < STATIC_NETS; iface++)
 402d6a0:	84000044 	addi	r16,r16,1
 402d6a4:	8c400104 	addi	r17,r17,4
 402d6a8:	a5000104 	addi	r20,r20,4
 402d6ac:	94800f04 	addi	r18,r18,60
 402d6b0:	873feb1e 	bne	r16,fp,402d660 <dhc_setup+0x60>
       */
      dhcnets++;
#endif
   }

   if(dhcnets == 0)  /* no nets doing DHCP? */
 402d6b4:	b8000f26 	beq	r23,zero,402d6f4 <dhc_setup+0xf4>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
 402d6b8:	a8800017 	ldw	r2,0(r21)
 402d6bc:	00ccb1c4 	movi	r3,12999
 402d6c0:	1585c83a 	sub	r2,r2,r22
 402d6c4:	18800936 	bltu	r3,r2,402d6ec <dhc_setup+0xec>
 402d6c8:	1821883a 	mov	r16,r3
 402d6cc:	00000506 	br	402d6e4 <dhc_setup+0xe4>
   {
      /* let other tasks spin. This is required, since some systems
       * increment cticks in tasks, or use a polling task to receive
       * packets. Without this activity this loop will never exit.
       */
      tk_yield();
 402d6d0:	401a3d40 	call	401a3d4 <tk_yield>
      pktdemux();
 402d6d4:	4017f380 	call	4017f38 <pktdemux>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
 402d6d8:	a8800017 	ldw	r2,0(r21)
 402d6dc:	1585c83a 	sub	r2,r2,r22
 402d6e0:	80800236 	bltu	r16,r2,402d6ec <dhc_setup+0xec>
 402d6e4:	401a6bc0 	call	401a6bc <dhc_alldone>
 402d6e8:	103ff926 	beq	r2,zero,402d6d0 <dhc_setup+0xd0>
#ifdef SUPERLOOP
      dhc_second ();
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
 402d6ec:	401a6bc0 	call	401a6bc <dhc_alldone>
 402d6f0:	10001826 	beq	r2,zero,402d754 <dhc_setup+0x154>
            dhc_halt(iface);
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
         }
      }
   }
}
 402d6f4:	dfc00d17 	ldw	ra,52(sp)
 402d6f8:	df000c17 	ldw	fp,48(sp)
 402d6fc:	ddc00b17 	ldw	r23,44(sp)
 402d700:	dd800a17 	ldw	r22,40(sp)
 402d704:	dd400917 	ldw	r21,36(sp)
 402d708:	dd000817 	ldw	r20,32(sp)
 402d70c:	dcc00717 	ldw	r19,28(sp)
 402d710:	dc800617 	ldw	r18,24(sp)
 402d714:	dc400517 	ldw	r17,20(sp)
 402d718:	dc000417 	ldw	r16,16(sp)
 402d71c:	dec00e04 	addi	sp,sp,56
 402d720:	f800283a 	ret
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */
 402d724:	8009883a 	mov	r4,r16
 402d728:	000b883a 	mov	r5,zero
 402d72c:	401a7400 	call	401a740 <dhc_state_init>

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
 402d730:	401b5080 	call	401b508 <dhc_second>
      if (e)
 402d734:	103fd826 	beq	r2,zero,402d698 <dhc_setup+0x98>
      {
         printf("Error sending DHCP packet on iface %d.\n", iface);
 402d738:	010100f4 	movhi	r4,1027
 402d73c:	21181004 	addi	r4,r4,24640
 402d740:	800b883a 	mov	r5,r16
 402d744:	4002ed40 	call	4002ed4 <printf>
         netexit(1);
 402d748:	01000044 	movi	r4,1
 402d74c:	402b3100 	call	402b310 <netexit>
 402d750:	003fd106 	br	402d698 <dhc_setup+0x98>
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
 402d754:	0021883a 	mov	r16,zero
 402d758:	010100f4 	movhi	r4,1027
 402d75c:	21181a04 	addi	r4,r4,24680
 402d760:	4002fec0 	call	4002fec <puts>
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
      {
         if (dhc_ifacedone(iface) == FALSE)
 402d764:	8009883a 	mov	r4,r16
 402d768:	401a6f00 	call	401a6f0 <dhc_ifacedone>
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
 402d76c:	04810134 	movhi	r18,1028
 402d770:	948bbb04 	addi	r18,r18,12012
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
      {
         if (dhc_ifacedone(iface) == FALSE)
         {
            dhc_halt(iface);
 402d774:	8009883a 	mov	r4,r16
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
 402d778:	d823883a 	mov	r17,sp
 402d77c:	04c00104 	movi	r19,4
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 402d780:	84000044 	addi	r16,r16,1
      {
         if (dhc_ifacedone(iface) == FALSE)
 402d784:	10000826 	beq	r2,zero,402d7a8 <dhc_setup+0x1a8>

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 402d788:	94800104 	addi	r18,r18,4
 402d78c:	8c400104 	addi	r17,r17,4
 402d790:	84ffd826 	beq	r16,r19,402d6f4 <dhc_setup+0xf4>
      {
         if (dhc_ifacedone(iface) == FALSE)
 402d794:	8009883a 	mov	r4,r16
 402d798:	401a6f00 	call	401a6f0 <dhc_ifacedone>
         {
            dhc_halt(iface);
 402d79c:	8009883a 	mov	r4,r16

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 402d7a0:	84000044 	addi	r16,r16,1
      {
         if (dhc_ifacedone(iface) == FALSE)
 402d7a4:	103ff81e 	bne	r2,zero,402d788 <dhc_setup+0x188>
         {
            dhc_halt(iface);
 402d7a8:	401a8fc0 	call	401a8fc <dhc_halt>
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
 402d7ac:	90c00017 	ldw	r3,0(r18)
 402d7b0:	88800017 	ldw	r2,0(r17)
 402d7b4:	18800a15 	stw	r2,40(r3)
 402d7b8:	003ff306 	br	402d788 <dhc_setup+0x188>

   e = dhc_init();

   if (e)
   {
      printf("Error starting DHCP client code.\n");
 402d7bc:	010100f4 	movhi	r4,1027
 402d7c0:	21180704 	addi	r4,r4,24604
 402d7c4:	4002fec0 	call	4002fec <puts>
      netexit(1);
 402d7c8:	01000044 	movi	r4,1
 402d7cc:	402b3100 	call	402b310 <netexit>
 402d7d0:	003f9806 	br	402d634 <dhc_setup+0x34>
      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
      {
         dhc_set_callback(iface, dhc_main_ipset);
 402d7d4:	8009883a 	mov	r4,r16
 402d7d8:	014100f4 	movhi	r5,1027
 402d7dc:	29755204 	addi	r5,r5,-10936
 402d7e0:	401a6280 	call	401a628 <dhc_set_callback>
 402d7e4:	88c00017 	ldw	r3,0(r17)
 402d7e8:	003fa406 	br	402d67c <dhc_setup+0x7c>

0402d7ec <init_memdev>:

int
init_memdev(void)
{
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 402d7ec:	01410134 	movhi	r5,1028
 402d7f0:	29695d04 	addi	r5,r5,-23180
   vfsystems = &mdio;

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
 402d7f4:	01810134 	movhi	r6,1028
 402d7f8:	31a95f04 	addi	r6,r6,-23172

int
init_memdev(void)
{
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 402d7fc:	29c00017 	ldw	r7,0(r5)
   vfsystems = &mdio;

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
 402d800:	32000017 	ldw	r8,0(r6)
 402d804:	01010134 	movhi	r4,1028
 402d808:	2120ab04 	addi	r4,r4,-32084

int
init_memdev(void)
{
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 402d80c:	00810134 	movhi	r2,1028
 402d810:	10a0a204 	addi	r2,r2,-32120
   vfsystems = &mdio;

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
   vfsfiles = &mdlist[3];
 402d814:	20c02104 	addi	r3,r4,132
int
init_memdev(void)
{
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
   vfsystems = &mdio;
 402d818:	28800015 	stw	r2,0(r5)

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
   vfsfiles = &mdlist[3];
 402d81c:	30c00015 	stw	r3,0(r6)

int
init_memdev(void)
{
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 402d820:	11c00015 	stw	r7,0(r2)
   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
   vfsfiles = &mdlist[3];

   return 0;
}
 402d824:	0005883a 	mov	r2,zero
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
   vfsystems = &mdio;

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
 402d828:	22000015 	stw	r8,0(r4)
   vfsfiles = &mdlist[3];

   return 0;
}
 402d82c:	f800283a 	ret

0402d830 <md_fopen>:
md_fopen(char * name, char * mode)
{
   USE_ARG(mode);
   USE_ARG(name);
   return NULL;
}
 402d830:	0005883a 	mov	r2,zero
 402d834:	f800283a 	ret

0402d838 <md_fclose>:

void   
md_fclose(VFILE * vfd)
{
   USE_ARG(vfd);
}
 402d838:	f800283a 	ret

0402d83c <md_fwrite>:
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   if (vfd->file->name[0] == 'm')   /* memory device */
 402d83c:	38800117 	ldw	r2,4(r7)
 402d840:	0011883a 	mov	r8,zero
      return 0;   /* not writable device */

   vfd->cmploc += (items * size);   /* adjust location */
 402d844:	3149383a 	mul	r4,r6,r5
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   if (vfd->file->name[0] == 'm')   /* memory device */
 402d848:	10c00107 	ldb	r3,4(r2)
 402d84c:	00801b44 	movi	r2,109
 402d850:	18800426 	beq	r3,r2,402d864 <md_fwrite+0x28>
      return 0;   /* not writable device */

   vfd->cmploc += (items * size);   /* adjust location */
 402d854:	38800217 	ldw	r2,8(r7)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
 402d858:	3011883a 	mov	r8,r6
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
   if (vfd->file->name[0] == 'm')   /* memory device */
      return 0;   /* not writable device */

   vfd->cmploc += (items * size);   /* adjust location */
 402d85c:	1105883a 	add	r2,r2,r4
 402d860:	38800215 	stw	r2,8(r7)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
}
 402d864:	4005883a 	mov	r2,r8
 402d868:	f800283a 	ret

0402d86c <md_fseek>:
{
   USE_ARG(vfd);     /* supress compiler warnings */
   USE_ARG(offset);
   USE_ARG(mode);
   return 0;
}
 402d86c:	0005883a 	mov	r2,zero
 402d870:	f800283a 	ret

0402d874 <md_ftell>:
long   
md_ftell(VFILE * vfd)
{
   USE_ARG(vfd);     /* supress compiler warnings */
   return MEMDEV_SIZE;
}
 402d874:	00800834 	movhi	r2,32
 402d878:	f800283a 	ret

0402d87c <md_fgetc>:
md_fgetc(VFILE * vfd)
{
   unsigned location;   /* current offset infile */
   int   retval   =  0;

   location = vfd->cmploc - vfd->file->data;
 402d87c:	21400117 	ldw	r5,4(r4)
 402d880:	21800217 	ldw	r6,8(r4)
   if (location >= vfd->file->real_size)     /* at end of file? */
 402d884:	01ffffc4 	movi	r7,-1
 402d888:	28800617 	ldw	r2,24(r5)
 402d88c:	28c00717 	ldw	r3,28(r5)
 402d890:	3085c83a 	sub	r2,r6,r2
 402d894:	10c0082e 	bgeu	r2,r3,402d8b8 <md_fgetc+0x3c>
      return EOF;

   if (!(vfd->file->flags & VF_NODATA))
 402d898:	2880058f 	ldh	r2,22(r5)
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
         retval = (int)(*vfd->cmploc) & 0xFF ;
 402d89c:	000f883a 	mov	r7,zero

   location = vfd->cmploc - vfd->file->data;
   if (location >= vfd->file->real_size)     /* at end of file? */
      return EOF;

   if (!(vfd->file->flags & VF_NODATA))
 402d8a0:	10000316 	blt	r2,zero,402d8b0 <md_fgetc+0x34>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 402d8a4:	28c00107 	ldb	r3,4(r5)
 402d8a8:	00801b44 	movi	r2,109
 402d8ac:	18800426 	beq	r3,r2,402d8c0 <md_fgetc+0x44>
   }

   /* else for null device or files without data, 
      use whatever is in retval */

   vfd->cmploc++;    /* adjust location */
 402d8b0:	30800044 	addi	r2,r6,1
 402d8b4:	20800215 	stw	r2,8(r4)
   return retval;
}
 402d8b8:	3805883a 	mov	r2,r7
 402d8bc:	f800283a 	ret
      return EOF;

   if (!(vfd->file->flags & VF_NODATA))
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
         retval = (int)(*vfd->cmploc) & 0xFF ;
 402d8c0:	31c00003 	ldbu	r7,0(r6)
 402d8c4:	003ffa06 	br	402d8b0 <md_fgetc+0x34>

0402d8c8 <md_unlink>:
int    
md_unlink(char * filename)
{
   USE_ARG(filename);     /* supress compiler warnings */
   return 0;
}
 402d8c8:	0005883a 	mov	r2,zero
 402d8cc:	f800283a 	ret

0402d8d0 <md_fread>:
 * RETURNS: 
 */

int    
md_fread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402d8d0:	defffc04 	addi	sp,sp,-16
 402d8d4:	dc800215 	stw	r18,8(sp)
 402d8d8:	dc400115 	stw	r17,4(sp)
 402d8dc:	dfc00315 	stw	ra,12(sp)
 402d8e0:	dc000015 	stw	r16,0(sp)
 402d8e4:	3823883a 	mov	r17,r7
 402d8e8:	2825883a 	mov	r18,r5
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
   if(vfd && vfd->file)
 402d8ec:	38002526 	beq	r7,zero,402d984 <md_fread+0xb4>
 402d8f0:	39c00117 	ldw	r7,4(r7)
 402d8f4:	38002426 	beq	r7,zero,402d988 <md_fread+0xb8>
   {
      file_size = vfd->file->real_size; 
 402d8f8:	39400717 	ldw	r5,28(r7)
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
 402d8fc:	8a000217 	ldw	r8,8(r17)
 402d900:	38c00617 	ldw	r3,24(r7)
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */
 402d904:	34a1383a 	mul	r16,r6,r18
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
 402d908:	40c7c83a 	sub	r3,r8,r3
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */

   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
 402d90c:	1c05883a 	add	r2,r3,r16
 402d910:	2880012e 	bgeu	r5,r2,402d918 <md_fread+0x48>
      bcount = ((u_long)file_size - location);
 402d914:	28e1c83a 	sub	r16,r5,r3

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
 402d918:	1940122e 	bgeu	r3,r5,402d964 <md_fread+0x94>
 402d91c:	80bfffec 	andhi	r2,r16,65535
 402d920:	1000101e 	bne	r2,zero,402d964 <md_fread+0x94>
 402d924:	80000f26 	beq	r16,zero,402d964 <md_fread+0x94>
   /* Use VF_NODATA if memory devices have a size, but no
      data. This can be used to measure file read speed
      without introducing an undefined data copy. */
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
 402d928:	3880058f 	ldh	r2,22(r7)
 402d92c:	10000316 	blt	r2,zero,402d93c <md_fread+0x6c>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 402d930:	38c00107 	ldb	r3,4(r7)
 402d934:	00801b44 	movi	r2,109
 402d938:	18801526 	beq	r3,r2,402d990 <md_fread+0xc0>
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
 402d93c:	4405883a 	add	r2,r8,r16
#endif
   
   return ((int)bcount/size);
 402d940:	8487203a 	divu	r3,r16,r18
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
 402d944:	88800215 	stw	r2,8(r17)
#endif
   
   return ((int)bcount/size);
}
 402d948:	1805883a 	mov	r2,r3
 402d94c:	dfc00317 	ldw	ra,12(sp)
 402d950:	dc800217 	ldw	r18,8(sp)
 402d954:	dc400117 	ldw	r17,4(sp)
 402d958:	dc000017 	ldw	r16,0(sp)
 402d95c:	dec00404 	addi	sp,sp,16
 402d960:	f800283a 	ret
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
#endif
   
   return ((int)bcount/size);
 402d964:	0007883a 	mov	r3,zero
}
 402d968:	1805883a 	mov	r2,r3
 402d96c:	dfc00317 	ldw	ra,12(sp)
 402d970:	dc800217 	ldw	r18,8(sp)
 402d974:	dc400117 	ldw	r17,4(sp)
 402d978:	dc000017 	ldw	r16,0(sp)
 402d97c:	dec00404 	addi	sp,sp,16
 402d980:	f800283a 	ret
 402d984:	39c00117 	ldw	r7,4(r7)
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
   if(vfd && vfd->file)
   {
      file_size = vfd->file->real_size; 
 402d988:	01400834 	movhi	r5,32
 402d98c:	003fdb06 	br	402d8fc <md_fread+0x2c>
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
         MEMCPY(buf, vfd->cmploc + MEMDEV_BASE, (unsigned)bcount);
 402d990:	01400834 	movhi	r5,32
 402d994:	414b883a 	add	r5,r8,r5
 402d998:	800d883a 	mov	r6,r16
 402d99c:	40096480 	call	4009648 <memcpy>
 402d9a0:	8a000217 	ldw	r8,8(r17)
 402d9a4:	003fe506 	br	402d93c <md_fread+0x6c>

0402d9a8 <hextoa>:
 */

char
hextoa(int val)
{
   val &= 0x0f;
 402d9a8:	210003cc 	andi	r4,r4,15
   if(val < 10)
 402d9ac:	00800244 	movi	r2,9
      return (char)(val + '0');
 402d9b0:	20c00c04 	addi	r3,r4,48

char
hextoa(int val)
{
   val &= 0x0f;
   if(val < 10)
 402d9b4:	1100010e 	bge	r2,r4,402d9bc <hextoa+0x14>
      return (char)(val + '0');
   else
      return (char)(val + 55);   /* converts 10-15 -> "A-F" */
 402d9b8:	20c00dc4 	addi	r3,r4,55
}
 402d9bc:	1805883a 	mov	r2,r3
 402d9c0:	f800283a 	ret

0402d9c4 <inet_setport>:
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
   if (addr->sa_family == AF_INET)
 402d9c4:	20c0000b 	ldhu	r3,0(r4)
 402d9c8:	00800084 	movi	r2,2
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
      si->sin_port = htons(port);  
 402d9cc:	280dd23a 	srai	r6,r5,8
 402d9d0:	280a923a 	slli	r5,r5,8
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
   if (addr->sa_family == AF_INET)
 402d9d4:	18800126 	beq	r3,r2,402d9dc <inet_setport+0x18>
 402d9d8:	f800283a 	ret
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
      si->sin_port = htons(port);  
 402d9dc:	30803fcc 	andi	r2,r6,255
 402d9e0:	1144b03a 	or	r2,r2,r5
 402d9e4:	2080008d 	sth	r2,2(r4)
 402d9e8:	f800283a 	ret

0402d9ec <convert_ip>:
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
 402d9ec:	21400003 	ldbu	r5,0(r4)
 *Returns:
 *
 */

unsigned long convert_ip(const char *p)
{
 402d9f0:	deffff04 	addi	sp,sp,-4
   const char *cp = p;
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
 402d9f4:	d8000015 	stw	zero,0(sp)
   while(*cp)
 402d9f8:	28c03fcc 	andi	r3,r5,255
 402d9fc:	18c0201c 	xori	r3,r3,128
 402da00:	18ffe004 	addi	r3,r3,-128

unsigned long convert_ip(const char *p)
{
   const char *cp = p;
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
 402da04:	d817883a 	mov	r11,sp
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
 402da08:	18002626 	beq	r3,zero,402daa4 <convert_ip+0xb8>
 402da0c:	000f883a 	mov	r7,zero
 402da10:	0011883a 	mov	r8,zero
 402da14:	02400b84 	movi	r9,46
 402da18:	030000c4 	movi	r12,3
 402da1c:	02800244 	movi	r10,9
 402da20:	00000e06 	br	402da5c <convert_ip+0x70>
            return dw;
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
      {
         v = (v * 10) + (*cp - '0');
 402da24:	40bfffcc 	andi	r2,r8,65535
 402da28:	10c002a4 	muli	r3,r2,10
 402da2c:	28803fcc 	andi	r2,r5,255
 402da30:	1080201c 	xori	r2,r2,128
 402da34:	10bfe004 	addi	r2,r2,-128
         if(n > 3)
         {
            return dw;
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
 402da38:	51800236 	bltu	r10,r6,402da44 <convert_ip+0x58>
      {
         v = (v * 10) + (*cp - '0');
 402da3c:	1885883a 	add	r2,r3,r2
 402da40:	123ff404 	addi	r8,r2,-48
      }
      cp++;
 402da44:	21000044 	addi	r4,r4,1
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
 402da48:	21400003 	ldbu	r5,0(r4)
 402da4c:	28c03fcc 	andi	r3,r5,255
 402da50:	18c0201c 	xori	r3,r3,128
 402da54:	18ffe004 	addi	r3,r3,-128
 402da58:	18000b26 	beq	r3,zero,402da88 <convert_ip+0x9c>
         if(n > 3)
         {
            return dw;
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
 402da5c:	28bff404 	addi	r2,r5,-48
 402da60:	11803fcc 	andi	r6,r2,255
   dw = 0;
   while(*cp)
   {
      if( *cp == '.')
      {
         lpb[n] = (unsigned char) v;
 402da64:	59c5883a 	add	r2,r11,r7
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
   {
      if( *cp == '.')
 402da68:	1a7fee1e 	bne	r3,r9,402da24 <convert_ip+0x38>
      {
         lpb[n] = (unsigned char) v;
         v = 0;
         n++;
 402da6c:	39c00044 	addi	r7,r7,1
   dw = 0;
   while(*cp)
   {
      if( *cp == '.')
      {
         lpb[n] = (unsigned char) v;
 402da70:	12000005 	stb	r8,0(r2)
         v = 0;
         n++;
         if(n > 3)
 402da74:	0011883a 	mov	r8,zero
 402da78:	61fff20e 	bge	r12,r7,402da44 <convert_ip+0x58>
         v = (v * 10) + (*cp - '0');
      }
      cp++;
   }
   lpb[n] = (unsigned char) v;
   return dw;
 402da7c:	d8800017 	ldw	r2,0(sp)
}  /* convert_ip() */
 402da80:	dec00104 	addi	sp,sp,4
 402da84:	f800283a 	ret
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
 402da88:	3805883a 	mov	r2,r7
 402da8c:	4007883a 	mov	r3,r8
      {
         v = (v * 10) + (*cp - '0');
      }
      cp++;
   }
   lpb[n] = (unsigned char) v;
 402da90:	5885883a 	add	r2,r11,r2
 402da94:	10c00005 	stb	r3,0(r2)
   return dw;
 402da98:	d8800017 	ldw	r2,0(sp)
}  /* convert_ip() */
 402da9c:	dec00104 	addi	sp,sp,4
 402daa0:	f800283a 	ret
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
 402daa4:	0005883a 	mov	r2,zero
 402daa8:	003ff906 	br	402da90 <convert_ip+0xa4>

0402daac <print46_addr>:
 *
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
 402daac:	200b883a 	mov	r5,r4
   if (ipaddr->sa_family == AF_INET)
 402dab0:	2100000b 	ldhu	r4,0(r4)
 402dab4:	00c00084 	movi	r3,2
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
}
 402dab8:	0005883a 	mov	r2,zero
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
   if (ipaddr->sa_family == AF_INET)
 402dabc:	20c00126 	beq	r4,r3,402dac4 <print46_addr+0x18>
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
}
 402dac0:	f800283a 	ret
char * print46_addr(struct sockaddr *ipaddr)
{
   if (ipaddr->sa_family == AF_INET)
   {
      struct sockaddr_in * addr = (struct sockaddr_in *)ipaddr;
      return print_ipad(addr->sin_addr.s_addr);
 402dac4:	29000117 	ldw	r4,4(r5)
 402dac8:	401a0481 	jmpi	401a048 <print_ipad>

0402dacc <inet_ntop>:
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
 402dacc:	defffc04 	addi	sp,sp,-16
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
 402dad0:	00800084 	movi	r2,2
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
 402dad4:	dc800215 	stw	r18,8(sp)
 402dad8:	dc000015 	stw	r16,0(sp)
 402dadc:	dfc00315 	stw	ra,12(sp)
 402dae0:	dc400115 	stw	r17,4(sp)
 402dae4:	3025883a 	mov	r18,r6
 402dae8:	3821883a 	mov	r16,r7
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
 402daec:	20800726 	beq	r4,r2,402db0c <inet_ntop+0x40>
      ip4addr = *(u_long*)addr;
      cp = print_ipad(ip4addr);
      if (strlen(cp) < size)
      {
         strcpy(str, cp);
         return (str);
 402daf0:	0005883a 	mov	r2,zero
      }
   }
#endif

   return ((const char *)NULL);
}
 402daf4:	dfc00317 	ldw	ra,12(sp)
 402daf8:	dc800217 	ldw	r18,8(sp)
 402dafc:	dc400117 	ldw	r17,4(sp)
 402db00:	dc000017 	ldw	r16,0(sp)
 402db04:	dec00404 	addi	sp,sp,16
 402db08:	f800283a 	ret
   if (af == AF_INET)
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
      cp = print_ipad(ip4addr);
 402db0c:	29000017 	ldw	r4,0(r5)
 402db10:	401a0480 	call	401a048 <print_ipad>
      if (strlen(cp) < size)
 402db14:	1009883a 	mov	r4,r2
   if (af == AF_INET)
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
      cp = print_ipad(ip4addr);
 402db18:	1023883a 	mov	r17,r2
      if (strlen(cp) < size)
 402db1c:	400472c0 	call	400472c <strlen>
      {
         strcpy(str, cp);
 402db20:	880b883a 	mov	r5,r17
 402db24:	9009883a 	mov	r4,r18
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
      cp = print_ipad(ip4addr);
      if (strlen(cp) < size)
 402db28:	143ff12e 	bgeu	r2,r16,402daf0 <inet_ntop+0x24>
      {
         strcpy(str, cp);
 402db2c:	4030a6c0 	call	4030a6c <strcpy>
         return (str);
 402db30:	9005883a 	mov	r2,r18
 402db34:	003fef06 	br	402daf4 <inet_ntop+0x28>

0402db38 <parse_ipad>:

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
 402db38:	defff704 	addi	sp,sp,-36
 402db3c:	dd800715 	stw	r22,28(sp)
 402db40:	dd000515 	stw	r20,20(sp)
 402db44:	dc400215 	stw	r17,8(sp)
 402db48:	dfc00815 	stw	ra,32(sp)
 402db4c:	dd400615 	stw	r21,24(sp)
 402db50:	dcc00415 	stw	r19,16(sp)
 402db54:	dc800315 	stw	r18,12(sp)
 402db58:	dc000115 	stw	r16,4(sp)
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402db5c:	30c00003 	ldbu	r3,0(r6)

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
 402db60:	202d883a 	mov	r22,r4
 402db64:	3023883a 	mov	r17,r6
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402db68:	19003fcc 	andi	r4,r3,255
 402db6c:	2100201c 	xori	r4,r4,128
 402db70:	213fe004 	addi	r4,r4,-128

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
 402db74:	2829883a 	mov	r20,r5
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402db78:	20006d26 	beq	r4,zero,402dd30 <parse_ipad+0x1f8>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 402db7c:	18bff484 	addi	r2,r3,-46
 402db80:	10803fcc 	andi	r2,r2,255
 402db84:	00c002c4 	movi	r3,11
 402db88:	18805d36 	bltu	r3,r2,402dd00 <parse_ipad+0x1c8>
 402db8c:	00800bc4 	movi	r2,47
 402db90:	20805b26 	beq	r4,r2,402dd00 <parse_ipad+0x1c8>
 402db94:	180f883a 	mov	r7,r3
 402db98:	100d883a 	mov	r6,r2
 402db9c:	880b883a 	mov	r5,r17
 402dba0:	0025883a 	mov	r18,zero
 402dba4:	04000b84 	movi	r16,46
 402dba8:	00000906 	br	402dbd0 <parse_ipad+0x98>
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbac:	28c00003 	ldbu	r3,0(r5)
 402dbb0:	19003fcc 	andi	r4,r3,255
 402dbb4:	2100201c 	xori	r4,r4,128
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 402dbb8:	18bff484 	addi	r2,r3,-46
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbbc:	213fe004 	addi	r4,r4,-128
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 402dbc0:	10803fcc 	andi	r2,r2,255
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbc4:	20000c26 	beq	r4,zero,402dbf8 <parse_ipad+0xc0>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 402dbc8:	38804d36 	bltu	r7,r2,402dd00 <parse_ipad+0x1c8>
 402dbcc:	21804c26 	beq	r4,r6,402dd00 <parse_ipad+0x1c8>
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
         cp++;
 402dbd0:	29400044 	addi	r5,r5,1
   cp = stringin;
   while (*cp)
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
 402dbd4:	243ff51e 	bne	r4,r16,402dbac <parse_ipad+0x74>
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbd8:	28c00003 	ldbu	r3,0(r5)
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
 402dbdc:	94800044 	addi	r18,r18,1
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbe0:	19003fcc 	andi	r4,r3,255
 402dbe4:	2100201c 	xori	r4,r4,128
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 402dbe8:	18bff484 	addi	r2,r3,-46
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbec:	213fe004 	addi	r4,r4,-128
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 402dbf0:	10803fcc 	andi	r2,r2,255
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 402dbf4:	203ff41e 	bne	r4,zero,402dbc8 <parse_ipad+0x90>
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
         cp++;
   }

   if ( dots < 1 || dots > 3 )
 402dbf8:	94ffffc4 	addi	r19,r18,-1
 402dbfc:	00800084 	movi	r2,2
 402dc00:	14c04b36 	bltu	r2,r19,402dd30 <parse_ipad+0x1f8>
      return("string must contain 1 - 3 dots (.)");

   cp = stringin;
   if ((number = atoi(cp)) > 255)   /* set net number */
 402dc04:	8809883a 	mov	r4,r17
 402dc08:	40307680 	call	4030768 <atoi>
 402dc0c:	1009883a 	mov	r4,r2
 402dc10:	00803fc4 	movi	r2,255
 402dc14:	11004916 	blt	r2,r4,402dd3c <parse_ipad+0x204>
      return(toobig);

   retval.c[0] = (u_char)number;

   while (*cp != '.')cp++; /* find dot (end of number) */
 402dc18:	88800007 	ldb	r2,0(r17)

   cp = stringin;
   if ((number = atoi(cp)) > 255)   /* set net number */
      return(toobig);

   retval.c[0] = (u_char)number;
 402dc1c:	00ffc004 	movi	r3,-256
 402dc20:	a8c6703a 	and	r3,r21,r3
 402dc24:	21003fcc 	andi	r4,r4,255
 402dc28:	192ab03a 	or	r21,r3,r4

   while (*cp != '.')cp++; /* find dot (end of number) */
 402dc2c:	14005d26 	beq	r2,r16,402dda4 <parse_ipad+0x26c>
 402dc30:	880d883a 	mov	r6,r17
 402dc34:	00c00b84 	movi	r3,46
 402dc38:	31800044 	addi	r6,r6,1
 402dc3c:	30800007 	ldb	r2,0(r6)
 402dc40:	10fffd1e 	bne	r2,r3,402dc38 <parse_ipad+0x100>
      cp++;             /* point past dot */

   if (dots == 1 || dots == 2) retval.c[1] = 0;
 402dc44:	00800044 	movi	r2,1
      return(toobig);

   retval.c[0] = (u_char)number;

   while (*cp != '.')cp++; /* find dot (end of number) */
      cp++;             /* point past dot */
 402dc48:	34000044 	addi	r16,r6,1

   if (dots == 1 || dots == 2) retval.c[1] = 0;
 402dc4c:	14c0512e 	bgeu	r2,r19,402dd94 <parse_ipad+0x25c>
      else
   {
      number = atoi(cp);
 402dc50:	8009883a 	mov	r4,r16
 402dc54:	d9800015 	stw	r6,0(sp)
 402dc58:	40307680 	call	4030768 <atoi>
      while (*cp != '.')cp++; /* find dot (end of number) */
 402dc5c:	d9800017 	ldw	r6,0(sp)
      cp++;             /* point past dot */

   if (dots == 1 || dots == 2) retval.c[1] = 0;
      else
   {
      number = atoi(cp);
 402dc60:	1009883a 	mov	r4,r2
      while (*cp != '.')cp++; /* find dot (end of number) */
 402dc64:	00c00b84 	movi	r3,46
 402dc68:	30800047 	ldb	r2,1(r6)
 402dc6c:	10c00326 	beq	r2,r3,402dc7c <parse_ipad+0x144>
 402dc70:	84000044 	addi	r16,r16,1
 402dc74:	80800007 	ldb	r2,0(r16)
 402dc78:	10fffd1e 	bne	r2,r3,402dc70 <parse_ipad+0x138>
         cp++;             /* point past dot */
      if (number > 255) return(toobig);
 402dc7c:	00803fc4 	movi	r2,255
 402dc80:	11002e16 	blt	r2,r4,402dd3c <parse_ipad+0x204>
         retval.c[1] = (u_char)number;
 402dc84:	20c03fcc 	andi	r3,r4,255
 402dc88:	1806923a 	slli	r3,r3,8
 402dc8c:	00bffff4 	movhi	r2,65535
 402dc90:	10803fc4 	addi	r2,r2,255
 402dc94:	a884703a 	and	r2,r21,r2
 402dc98:	10eab03a 	or	r21,r2,r3
   if (dots == 1 || dots == 2) retval.c[1] = 0;
      else
   {
      number = atoi(cp);
      while (*cp != '.')cp++; /* find dot (end of number) */
         cp++;             /* point past dot */
 402dc9c:	84000044 	addi	r16,r16,1
      if (number > 255) return(toobig);
         retval.c[1] = (u_char)number;
   }

   if (dots == 1) retval.c[2] = 0;
 402dca0:	00800044 	movi	r2,1
 402dca4:	9080281e 	bne	r18,r2,402dd48 <parse_ipad+0x210>
 402dca8:	00bfc074 	movhi	r2,65281
 402dcac:	10bfffc4 	addi	r2,r2,-1
 402dcb0:	a8aa703a 	and	r21,r21,r2
         cp++;             /* point past dot */
      if (number > 255) return(toobig);
         retval.c[2] = (u_char)number;
   }

   if ((number = atoi(cp)) > 255)
 402dcb4:	8009883a 	mov	r4,r16
 402dcb8:	40307680 	call	4030768 <atoi>
 402dcbc:	1007883a 	mov	r3,r2
 402dcc0:	00803fc4 	movi	r2,255
 402dcc4:	10c01d16 	blt	r2,r3,402dd3c <parse_ipad+0x204>
      return(toobig);
   retval.c[3] = (u_char)number;
 402dcc8:	1804963a 	slli	r2,r3,24
 402dccc:	00c04034 	movhi	r3,256
 402dcd0:	18ffffc4 	addi	r3,r3,-1
 402dcd4:	a8c6703a 	and	r3,r21,r3
 402dcd8:	18aab03a 	or	r21,r3,r2

   if (retval.c[0] < 128) *sbits = 8;
 402dcdc:	a8803fcc 	andi	r2,r21,255
 402dce0:	1080201c 	xori	r2,r2,128
 402dce4:	10bfe004 	addi	r2,r2,-128
 402dce8:	10003016 	blt	r2,zero,402ddac <parse_ipad+0x274>
 402dcec:	00800204 	movi	r2,8
 402dcf0:	a0800015 	stw	r2,0(r20)
      else if(retval.c[0] < 192) *sbits = 16;
      else *sbits = 24;

      *ipout = retval.l;      /* everything went OK, return number */
 402dcf4:	0005883a 	mov	r2,zero
 402dcf8:	b5400015 	stw	r21,0(r22)
 402dcfc:	00000206 	br	402dd08 <parse_ipad+0x1d0>
   return(NULL);        /* return OK code (no error string) */
 402dd00:	008100f4 	movhi	r2,1027
 402dd04:	10983104 	addi	r2,r2,24772
}
 402dd08:	dfc00817 	ldw	ra,32(sp)
 402dd0c:	dd800717 	ldw	r22,28(sp)
 402dd10:	dd400617 	ldw	r21,24(sp)
 402dd14:	dd000517 	ldw	r20,20(sp)
 402dd18:	dcc00417 	ldw	r19,16(sp)
 402dd1c:	dc800317 	ldw	r18,12(sp)
 402dd20:	dc400217 	ldw	r17,8(sp)
 402dd24:	dc000117 	ldw	r16,4(sp)
 402dd28:	dec00904 	addi	sp,sp,36
 402dd2c:	f800283a 	ret
   if (retval.c[0] < 128) *sbits = 8;
      else if(retval.c[0] < 192) *sbits = 16;
      else *sbits = 24;

      *ipout = retval.l;      /* everything went OK, return number */
   return(NULL);        /* return OK code (no error string) */
 402dd30:	008100f4 	movhi	r2,1027
 402dd34:	10983c04 	addi	r2,r2,24816
 402dd38:	003ff306 	br	402dd08 <parse_ipad+0x1d0>
         cp++;             /* point past dot */
      if (number > 255) return(toobig);
         retval.c[2] = (u_char)number;
   }

   if ((number = atoi(cp)) > 255)
 402dd3c:	008100f4 	movhi	r2,1027
 402dd40:	10982804 	addi	r2,r2,24736
 402dd44:	003ff006 	br	402dd08 <parse_ipad+0x1d0>
   }

   if (dots == 1) retval.c[2] = 0;
      else
   {
      number = atoi(cp);
 402dd48:	8009883a 	mov	r4,r16
 402dd4c:	40307680 	call	4030768 <atoi>
 402dd50:	1009883a 	mov	r4,r2
      while (*cp != '.')cp++; /* find dot (end of number) */
 402dd54:	80800007 	ldb	r2,0(r16)
 402dd58:	00c00b84 	movi	r3,46
 402dd5c:	10c00326 	beq	r2,r3,402dd6c <parse_ipad+0x234>
 402dd60:	84000044 	addi	r16,r16,1
 402dd64:	80800007 	ldb	r2,0(r16)
 402dd68:	10fffd1e 	bne	r2,r3,402dd60 <parse_ipad+0x228>
         cp++;             /* point past dot */
      if (number > 255) return(toobig);
 402dd6c:	00803fc4 	movi	r2,255
 402dd70:	113ff216 	blt	r2,r4,402dd3c <parse_ipad+0x204>
         retval.c[2] = (u_char)number;
 402dd74:	20c03fcc 	andi	r3,r4,255
 402dd78:	1806943a 	slli	r3,r3,16
 402dd7c:	00bfc074 	movhi	r2,65281
 402dd80:	10bfffc4 	addi	r2,r2,-1
 402dd84:	a884703a 	and	r2,r21,r2
 402dd88:	10eab03a 	or	r21,r2,r3
   if (dots == 1) retval.c[2] = 0;
      else
   {
      number = atoi(cp);
      while (*cp != '.')cp++; /* find dot (end of number) */
         cp++;             /* point past dot */
 402dd8c:	84000044 	addi	r16,r16,1
 402dd90:	003fc806 	br	402dcb4 <parse_ipad+0x17c>
   retval.c[0] = (u_char)number;

   while (*cp != '.')cp++; /* find dot (end of number) */
      cp++;             /* point past dot */

   if (dots == 1 || dots == 2) retval.c[1] = 0;
 402dd94:	00bffff4 	movhi	r2,65535
 402dd98:	10803fc4 	addi	r2,r2,255
 402dd9c:	a8aa703a 	and	r21,r21,r2
 402dda0:	003fbf06 	br	402dca0 <parse_ipad+0x168>
   if ((number = atoi(cp)) > 255)   /* set net number */
      return(toobig);

   retval.c[0] = (u_char)number;

   while (*cp != '.')cp++; /* find dot (end of number) */
 402dda4:	880d883a 	mov	r6,r17
 402dda8:	003fa606 	br	402dc44 <parse_ipad+0x10c>
   if ((number = atoi(cp)) > 255)
      return(toobig);
   retval.c[3] = (u_char)number;

   if (retval.c[0] < 128) *sbits = 8;
      else if(retval.c[0] < 192) *sbits = 16;
 402ddac:	a8c03fcc 	andi	r3,r21,255
 402ddb0:	00802fc4 	movi	r2,191
 402ddb4:	10c00336 	bltu	r2,r3,402ddc4 <parse_ipad+0x28c>
 402ddb8:	00800404 	movi	r2,16
 402ddbc:	a0800015 	stw	r2,0(r20)
 402ddc0:	003fcc06 	br	402dcf4 <parse_ipad+0x1bc>
      else *sbits = 24;
 402ddc4:	00800604 	movi	r2,24
 402ddc8:	a0800015 	stw	r2,0(r20)
 402ddcc:	003fc906 	br	402dcf4 <parse_ipad+0x1bc>

0402ddd0 <inet_pton>:

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
 402ddd0:	defffc04 	addi	sp,sp,-16
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
 402ddd4:	00800084 	movi	r2,2

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
 402ddd8:	dc000215 	stw	r16,8(sp)
 402dddc:	dfc00315 	stw	ra,12(sp)
 402dde0:	3021883a 	mov	r16,r6
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
 402dde4:	000f883a 	mov	r7,zero

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
 402dde8:	280d883a 	mov	r6,r5
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
 402ddec:	d80b883a 	mov	r5,sp
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
 402ddf0:	20800526 	beq	r4,r2,402de08 <inet_pton+0x38>
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
}
 402ddf4:	3805883a 	mov	r2,r7
 402ddf8:	dfc00317 	ldw	ra,12(sp)
 402ddfc:	dc000217 	ldw	r16,8(sp)
 402de00:	dec00404 	addi	sp,sp,16
 402de04:	f800283a 	ret
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
 402de08:	d9000104 	addi	r4,sp,4
 402de0c:	402db380 	call	402db38 <parse_ipad>
      if(err == NULL)
 402de10:	10000926 	beq	r2,zero,402de38 <inet_pton+0x68>
         return 0;
      }
      else
      {
         /* return failure */
         pton_error = "IPv4 address parse failure";
 402de14:	01c00044 	movi	r7,1
 402de18:	008100f4 	movhi	r2,1027
 402de1c:	10984504 	addi	r2,r2,24852
 402de20:	d0a05315 	stw	r2,-32436(gp)
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
}
 402de24:	3805883a 	mov	r2,r7
 402de28:	dfc00317 	ldw	ra,12(sp)
 402de2c:	dc000217 	ldw	r16,8(sp)
 402de30:	dec00404 	addi	sp,sp,16
 402de34:	f800283a 	ret
      if(err == NULL)
      {
         /* copy the parsed address into caller's buffer, and 
          * return success
          */
         MEMCPY(dst, &ip4addr, sizeof (u_long));
 402de38:	d9000143 	ldbu	r4,5(sp)
 402de3c:	d9400183 	ldbu	r5,6(sp)
 402de40:	d8c001c3 	ldbu	r3,7(sp)
 402de44:	d8800103 	ldbu	r2,4(sp)
 402de48:	000f883a 	mov	r7,zero
 402de4c:	80c000c5 	stb	r3,3(r16)
 402de50:	80800005 	stb	r2,0(r16)
 402de54:	81000045 	stb	r4,1(r16)
 402de58:	81400085 	stb	r5,2(r16)
 402de5c:	003fe506 	br	402ddf4 <inet_pton+0x24>

0402de60 <inet_addr>:
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
 402de60:	defffd04 	addi	sp,sp,-12
 402de64:	200b883a 	mov	r5,r4
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
 402de68:	01010134 	movhi	r4,1028
 402de6c:	2129cd04 	addi	r4,r4,-22732
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
 402de70:	dfc00215 	stw	ra,8(sp)
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
 402de74:	4030a6c0 	call	4030a6c <strcpy>
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
 402de78:	01810134 	movhi	r6,1028
 402de7c:	31a9cd04 	addi	r6,r6,-22732
 402de80:	d9000104 	addi	r4,sp,4
 402de84:	d80b883a 	mov	r5,sp
 402de88:	402db380 	call	402db38 <parse_ipad>
 402de8c:	0007883a 	mov	r3,zero
 402de90:	10000426 	beq	r2,zero,402dea4 <inet_addr+0x44>
   }
   else
   {
      return (u_long)NULL ;
   }
}
 402de94:	1805883a 	mov	r2,r3
 402de98:	dfc00217 	ldw	ra,8(sp)
 402de9c:	dec00304 	addi	sp,sp,12
 402dea0:	f800283a 	ret
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
   {
      return ipaddr ;
 402dea4:	d8c00117 	ldw	r3,4(sp)
   }
   else
   {
      return (u_long)NULL ;
   }
}
 402dea8:	1805883a 	mov	r2,r3
 402deac:	dfc00217 	ldw	ra,8(sp)
 402deb0:	dec00304 	addi	sp,sp,12
 402deb4:	f800283a 	ret

0402deb8 <inet46_addr>:
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 402deb8:	defffe04 	addi	sp,sp,-8
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
 402debc:	00800084 	movi	r2,2
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 402dec0:	dc000015 	stw	r16,0(sp)
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
 402dec4:	2880000d 	sth	r2,0(r5)
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 402dec8:	dfc00115 	stw	ra,4(sp)
 402decc:	2007883a 	mov	r3,r4
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
 402ded0:	18800047 	ldb	r2,1(r3)
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 402ded4:	2821883a 	mov	r16,r5
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
 402ded8:	01400b84 	movi	r5,46
 402dedc:	11400926 	beq	r2,r5,402df04 <inet46_addr+0x4c>
 402dee0:	18800087 	ldb	r2,2(r3)
 402dee4:	11400726 	beq	r2,r5,402df04 <inet46_addr+0x4c>
 402dee8:	188000c7 	ldb	r2,3(r3)
 402deec:	11400526 	beq	r2,r5,402df04 <inet46_addr+0x4c>
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
}
 402def0:	0005883a 	mov	r2,zero
 402def4:	dfc00117 	ldw	ra,4(sp)
 402def8:	dc000017 	ldw	r16,0(sp)
 402defc:	dec00204 	addi	sp,sp,8
 402df00:	f800283a 	ret
   address->sa_family = AF_INET; /* assume IPv4 address by default */

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
   {
      struct sockaddr_in *addr = (struct sockaddr_in *)address;
      addr->sin_addr.s_addr = inet_addr(str);
 402df04:	402de600 	call	402de60 <inet_addr>
 402df08:	80800115 	stw	r2,4(r16)
      addr->sin_family = AF_INET;
 402df0c:	00800084 	movi	r2,2
 402df10:	8080000d 	sth	r2,0(r16)
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
}
 402df14:	0005883a 	mov	r2,zero
 402df18:	dfc00117 	ldw	ra,4(sp)
 402df1c:	dc000017 	ldw	r16,0(sp)
 402df20:	dec00204 	addi	sp,sp,8
 402df24:	f800283a 	ret

0402df28 <tcp_cksum>:
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
 402df28:	defffb04 	addi	sp,sp,-20
   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;

   iphlen = (unshort)ip_hlen(pip);
   tcplen = htons(pip->ip_len) - iphlen;
 402df2c:	20c0008b 	ldhu	r3,2(r4)
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
 402df30:	dcc00315 	stw	r19,12(sp)
 402df34:	dc000015 	stw	r16,0(sp)
 402df38:	dfc00415 	stw	ra,16(sp)
 402df3c:	dc800215 	stw	r18,8(sp)
 402df40:	dc400115 	stw	r17,4(sp)

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;

   iphlen = (unshort)ip_hlen(pip);
 402df44:	20800003 	ldbu	r2,0(r4)
   tcplen = htons(pip->ip_len) - iphlen;
 402df48:	180a923a 	slli	r5,r3,8
 402df4c:	1806d23a 	srli	r3,r3,8
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
 402df50:	200f883a 	mov	r7,r4

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;

   iphlen = (unshort)ip_hlen(pip);
 402df54:	110003cc 	andi	r4,r2,15
 402df58:	2109883a 	add	r4,r4,r4
   tcplen = htons(pip->ip_len) - iphlen;
 402df5c:	1946b03a 	or	r3,r3,r5

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;

   iphlen = (unshort)ip_hlen(pip);
 402df60:	2109883a 	add	r4,r4,r4
   tcplen = htons(pip->ip_len) - iphlen;
 402df64:	1911c83a 	sub	r8,r3,r4
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
 402df68:	41bfffcc 	andi	r6,r8,65535
 402df6c:	30c00184 	addi	r3,r6,6
 402df70:	180bd23a 	srai	r5,r3,8
 402df74:	1806923a 	slli	r3,r3,8
   oddchar = 0;

   iphlen = (unshort)ip_hlen(pip);
   tcplen = htons(pip->ip_len) - iphlen;

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
 402df78:	21e1883a 	add	r16,r4,r7
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
 402df7c:	29403fcc 	andi	r5,r5,255
 402df80:	28cab03a 	or	r5,r5,r3

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
 402df84:	30c0004c 	andi	r3,r6,1

   iphlen = (unshort)ip_hlen(pip);
   tcplen = htons(pip->ip_len) - iphlen;

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
   oldsum = tp->th_sum;       /* Save passed checksum */
 402df88:	84c0040b 	ldhu	r19,16(r16)
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
 402df8c:	8140040d 	sth	r5,16(r16)

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
 402df90:	18001b1e 	bne	r3,zero,402e000 <tcp_cksum+0xd8>
 402df94:	0025883a 	mov	r18,zero
 402df98:	0023883a 	mov	r17,zero

   /* Pass a pointer to the beginning of the IP address area into the IP header
    * the the low level sum routine. Add the size of these two IP addresses to
    * the length, and convert the length to 16 bit words.
    */
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);
 402df9c:	31400204 	addi	r5,r6,8
 402dfa0:	280bd07a 	srai	r5,r5,1
 402dfa4:	813ffe04 	addi	r4,r16,-8
 402dfa8:	40199b00 	call	40199b0 <cksum>
 402dfac:	008a303a 	nor	r5,zero,r2

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
 402dfb0:	98ffffcc 	andi	r3,r19,65535
 402dfb4:	293fffcc 	andi	r4,r5,65535
 402dfb8:	19000226 	beq	r3,r4,402dfc4 <tcp_cksum+0x9c>
 402dfbc:	00bfffd4 	movui	r2,65535
 402dfc0:	18801726 	beq	r3,r2,402e020 <tcp_cksum+0xf8>
 402dfc4:	2007883a 	mov	r3,r4
      newsum = 0xffff;

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
   if (oddchar)
 402dfc8:	88803fcc 	andi	r2,r17,255
 402dfcc:	1080201c 	xori	r2,r2,128
 402dfd0:	10bfe004 	addi	r2,r2,-128
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
      newsum = 0xffff;

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
 402dfd4:	84c0040d 	sth	r19,16(r16)
   if (oddchar)
 402dfd8:	10000126 	beq	r2,zero,402dfe0 <tcp_cksum+0xb8>
      *tcpdata = oddchar;     /* restore odd byte if we zeroed it */
 402dfdc:	94400005 	stb	r17,0(r18)

   IN_PROFILER(PF_TSUM, PF_EXIT);

   return newsum;
}
 402dfe0:	1805883a 	mov	r2,r3
 402dfe4:	dfc00417 	ldw	ra,16(sp)
 402dfe8:	dcc00317 	ldw	r19,12(sp)
 402dfec:	dc800217 	ldw	r18,8(sp)
 402dff0:	dc400117 	ldw	r17,4(sp)
 402dff4:	dc000017 	ldw	r16,0(sp)
 402dff8:	dec00504 	addi	sp,sp,20
 402dffc:	f800283a 	ret
   tp->th_sum = htons(tcplen + 6);

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
   {
      tcpdata = ((char*)pip) + iphlen + tcplen;    /* end of packet */
 402e000:	20bfffcc 	andi	r2,r4,65535
 402e004:	3885883a 	add	r2,r7,r2
 402e008:	11a5883a 	add	r18,r2,r6
      oddchar = *tcpdata;
 402e00c:	94400003 	ldbu	r17,0(r18)
      *tcpdata = '\0';        /* zero out pad byte */
 402e010:	40c00044 	addi	r3,r8,1
 402e014:	19bfffcc 	andi	r6,r3,65535
 402e018:	90000005 	stb	zero,0(r18)
 402e01c:	003fdf06 	br	402df9c <tcp_cksum+0x74>
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
 402e020:	28bfffcc 	andi	r2,r5,65535
 402e024:	10a0001c 	xori	r2,r2,32768
 402e028:	10a00004 	addi	r2,r2,-32768
 402e02c:	103fe626 	beq	r2,zero,402dfc8 <tcp_cksum+0xa0>
 402e030:	003fe406 	br	402dfc4 <tcp_cksum+0x9c>

0402e034 <in_pcblookup>:
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 402e034:	22c00017 	ldw	r11,0(r4)
   u_long   faddr, 
   unshort  xfport,
   u_long   laddr,
   unshort  xlport,
   int   flags)
{
 402e038:	defffe04 	addi	sp,sp,-8
 402e03c:	dc400115 	stw	r17,4(sp)
 402e040:	dc000015 	stw	r16,0(sp)
 402e044:	2011883a 	mov	r8,r4
 402e048:	d8c0020b 	ldhu	r3,8(sp)
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 402e04c:	22c05026 	beq	r4,r11,402e190 <in_pcblookup+0x15c>
 402e050:	d8800317 	ldw	r2,12(sp)
 402e054:	347fffcc 	andi	r17,r6,65535
 402e058:	1a7fffcc 	andi	r9,r3,65535
 402e05c:	1080004c 	andi	r2,r2,1
 402e060:	100d003a 	cmpeq	r6,r2,zero
 402e064:	5809883a 	mov	r4,r11
 402e068:	0015883a 	mov	r10,zero
 402e06c:	040000c4 	movi	r16,3
 402e070:	03000084 	movi	r12,2
 402e074:	381ac03a 	cmpne	r13,r7,zero
 402e078:	281ec03a 	cmpne	r15,r5,zero
 402e07c:	281d003a 	cmpeq	r14,r5,zero
 402e080:	00000206 	br	402e08c <in_pcblookup+0x58>
 402e084:	21000017 	ldw	r4,0(r4)
 402e088:	41001426 	beq	r8,r4,402e0dc <in_pcblookup+0xa8>
   {
      if (inp->inp_lport != lport)
 402e08c:	2080078b 	ldhu	r2,30(r4)
 402e090:	48bffc1e 	bne	r9,r2,402e084 <in_pcblookup+0x50>
         continue;

      /* Skip non IPv4 sockets */
      if(inp->inp_socket->so_domain != AF_INET)
 402e094:	20800817 	ldw	r2,32(r4)
 402e098:	10c00517 	ldw	r3,20(r2)
 402e09c:	1b3ff91e 	bne	r3,r12,402e084 <in_pcblookup+0x50>
         continue;

      wildcard = 0;
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
 402e0a0:	20800417 	ldw	r2,16(r4)
 402e0a4:	10002226 	beq	r2,zero,402e130 <in_pcblookup+0xfc>
      {
         if (laddr == INADDR_ANY)
 402e0a8:	68002f26 	beq	r13,zero,402e168 <in_pcblookup+0x134>
            wildcard++;
         else if (inp->inp_laddr.s_addr != laddr)
 402e0ac:	11fff51e 	bne	r2,r7,402e084 <in_pcblookup+0x50>
      else 
      {
         if (laddr != INADDR_ANY)
            wildcard++;
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
 402e0b0:	20800317 	ldw	r2,12(r4)
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
      {
         if (laddr == INADDR_ANY)
            wildcard++;
         else if (inp->inp_laddr.s_addr != laddr)
            continue;
 402e0b4:	0007883a 	mov	r3,zero
      else 
      {
         if (laddr != INADDR_ANY)
            wildcard++;
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
 402e0b8:	1000201e 	bne	r2,zero,402e13c <in_pcblookup+0x108>
         {
            continue;
         }
      } else 
      {
         if (faddr != INADDR_ANY)
 402e0bc:	70002526 	beq	r14,zero,402e154 <in_pcblookup+0x120>
            wildcard++;
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
 402e0c0:	1800261e 	bne	r3,zero,402e15c <in_pcblookup+0x128>
         continue;
      if (wildcard < matchwild) 
 402e0c4:	1c3fef0e 	bge	r3,r16,402e084 <in_pcblookup+0x50>
      {
         match = inp;
         matchwild = wildcard;
         if (matchwild == 0)
 402e0c8:	18003326 	beq	r3,zero,402e198 <in_pcblookup+0x164>
 402e0cc:	2015883a 	mov	r10,r4
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 402e0d0:	21000017 	ldw	r4,0(r4)
         continue;
      if (wildcard < matchwild) 
      {
         match = inp;
         matchwild = wildcard;
         if (matchwild == 0)
 402e0d4:	1821883a 	mov	r16,r3
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 402e0d8:	413fec1e 	bne	r8,r4,402e08c <in_pcblookup+0x58>
         matchwild = wildcard;
         if (matchwild == 0)
            break;
      }
   }
   if (match == NULL)
 402e0dc:	50000f26 	beq	r10,zero,402e11c <in_pcblookup+0xe8>
      return match;

   if (head->inp_next == match)  /* got cache hit? */
 402e0e0:	5a802326 	beq	r11,r10,402e170 <in_pcblookup+0x13c>
   }
   else
   {
      inpcb_cachemiss++;
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
 402e0e4:	51400017 	ldw	r5,0(r10)
 402e0e8:	50800117 	ldw	r2,4(r10)
 402e0ec:	28800115 	stw	r2,4(r5)
      match->inp_prev->inp_next = match->inp_next;
 402e0f0:	51000117 	ldw	r4,4(r10)
   {
      inpcb_cachehits++;
   }
   else
   {
      inpcb_cachemiss++;
 402e0f4:	d0a86517 	ldw	r2,-24172(gp)
      match->inp_prev->inp_next = match->inp_next;

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
      head->inp_next = match;
      match->inp_prev = head;
 402e0f8:	52000115 	stw	r8,4(r10)
   else
   {
      inpcb_cachemiss++;
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
      match->inp_prev->inp_next = match->inp_next;
 402e0fc:	21400015 	stw	r5,0(r4)

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
 402e100:	40c00017 	ldw	r3,0(r8)
   {
      inpcb_cachehits++;
   }
   else
   {
      inpcb_cachemiss++;
 402e104:	10800044 	addi	r2,r2,1
 402e108:	d0a86515 	stw	r2,-24172(gp)
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
      match->inp_prev->inp_next = match->inp_next;

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
 402e10c:	50c00015 	stw	r3,0(r10)
      head->inp_next = match;
 402e110:	42800015 	stw	r10,0(r8)
      match->inp_prev = head;
      match->inp_next->inp_prev = match;
 402e114:	50800017 	ldw	r2,0(r10)
 402e118:	12800115 	stw	r10,4(r2)
   }
   return (match);
}
 402e11c:	5005883a 	mov	r2,r10
 402e120:	dc400117 	ldw	r17,4(sp)
 402e124:	dc000017 	ldw	r16,0(sp)
 402e128:	dec00204 	addi	sp,sp,8
 402e12c:	f800283a 	ret
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
      {
         if (laddr == INADDR_ANY)
            wildcard++;
         else if (inp->inp_laddr.s_addr != laddr)
            continue;
 402e130:	3806c03a 	cmpne	r3,r7,zero
      else 
      {
         if (laddr != INADDR_ANY)
            wildcard++;
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
 402e134:	20800317 	ldw	r2,12(r4)
 402e138:	103fe026 	beq	r2,zero,402e0bc <in_pcblookup+0x88>
      {
         if (faddr == INADDR_ANY)
 402e13c:	78000526 	beq	r15,zero,402e154 <in_pcblookup+0x120>
            wildcard++;
         else if (inp->inp_faddr.s_addr != faddr ||
 402e140:	117fd01e 	bne	r2,r5,402e084 <in_pcblookup+0x50>
 402e144:	2080070b 	ldhu	r2,28(r4)
 402e148:	88bfce1e 	bne	r17,r2,402e084 <in_pcblookup+0x50>
      } else 
      {
         if (faddr != INADDR_ANY)
            wildcard++;
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
 402e14c:	183fdd26 	beq	r3,zero,402e0c4 <in_pcblookup+0x90>
 402e150:	00000206 	br	402e15c <in_pcblookup+0x128>
            continue;
         }
      } else 
      {
         if (faddr != INADDR_ANY)
            wildcard++;
 402e154:	18c00044 	addi	r3,r3,1
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
 402e158:	183fda26 	beq	r3,zero,402e0c4 <in_pcblookup+0x90>
 402e15c:	303fc91e 	bne	r6,zero,402e084 <in_pcblookup+0x50>
         continue;
      if (wildcard < matchwild) 
 402e160:	1c3fc80e 	bge	r3,r16,402e084 <in_pcblookup+0x50>
 402e164:	003fd806 	br	402e0c8 <in_pcblookup+0x94>
         continue;

      wildcard = 0;
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
      {
         if (laddr == INADDR_ANY)
 402e168:	00c00044 	movi	r3,1
 402e16c:	003ff106 	br	402e134 <in_pcblookup+0x100>
   if (match == NULL)
      return match;

   if (head->inp_next == match)  /* got cache hit? */
   {
      inpcb_cachehits++;
 402e170:	d0a86417 	ldw	r2,-24176(gp)
 402e174:	10800044 	addi	r2,r2,1
 402e178:	d0a86415 	stw	r2,-24176(gp)
      head->inp_next = match;
      match->inp_prev = head;
      match->inp_next->inp_prev = match;
   }
   return (match);
}
 402e17c:	5005883a 	mov	r2,r10
 402e180:	dc400117 	ldw	r17,4(sp)
 402e184:	dc000017 	ldw	r16,0(sp)
 402e188:	dec00204 	addi	sp,sp,8
 402e18c:	f800283a 	ret
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 402e190:	0015883a 	mov	r10,zero
 402e194:	003fe106 	br	402e11c <in_pcblookup+0xe8>
         continue;
      if (wildcard < matchwild) 
      {
         match = inp;
         matchwild = wildcard;
         if (matchwild == 0)
 402e198:	2015883a 	mov	r10,r4
 402e19c:	003fd006 	br	402e0e0 <in_pcblookup+0xac>

0402e1a0 <in_setpeeraddr>:
   struct mbuf *  nam)
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
 402e1a0:	28c00317 	ldw	r3,12(r5)
   struct inpcb * inp,
   struct mbuf *  nam)
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 402e1a4:	00800404 	movi	r2,16
 402e1a8:	28800215 	stw	r2,8(r5)
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
 402e1ac:	18000015 	stw	zero,0(r3)
   sin->sin_family = AF_INET;
 402e1b0:	00800084 	movi	r2,2
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
 402e1b4:	18000115 	stw	zero,4(r3)
   sin->sin_family = AF_INET;
 402e1b8:	1880000d 	sth	r2,0(r3)
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
 402e1bc:	18000215 	stw	zero,8(r3)
 402e1c0:	18000315 	stw	zero,12(r3)
   sin->sin_family = AF_INET;
   sin->sin_port = inp->inp_fport;
   sin->sin_addr = inp->inp_faddr;
 402e1c4:	20800317 	ldw	r2,12(r4)

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
   sin->sin_family = AF_INET;
   sin->sin_port = inp->inp_fport;
 402e1c8:	2140070b 	ldhu	r5,28(r4)
   sin->sin_addr = inp->inp_faddr;
 402e1cc:	18800115 	stw	r2,4(r3)

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
   sin->sin_family = AF_INET;
   sin->sin_port = inp->inp_fport;
 402e1d0:	1940008d 	sth	r5,2(r3)
   sin->sin_addr = inp->inp_faddr;
}
 402e1d4:	f800283a 	ret

0402e1d8 <in_setsockaddr>:
   struct mbuf *  nam)
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
 402e1d8:	28c00317 	ldw	r3,12(r5)
in_setsockaddr(struct inpcb * inp, 
   struct mbuf *  nam)
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 402e1dc:	00800404 	movi	r2,16
 402e1e0:	28800215 	stw	r2,8(r5)
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
 402e1e4:	18000015 	stw	zero,0(r3)
   sin->sin_family = AF_INET;
 402e1e8:	00800084 	movi	r2,2
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
 402e1ec:	18000115 	stw	zero,4(r3)
   sin->sin_family = AF_INET;
 402e1f0:	1880000d 	sth	r2,0(r3)
{
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
 402e1f4:	18000215 	stw	zero,8(r3)
 402e1f8:	18000315 	stw	zero,12(r3)
   sin->sin_family = AF_INET;
   sin->sin_port = inp->inp_lport;
   sin->sin_addr = inp->inp_laddr;
 402e1fc:	20800417 	ldw	r2,16(r4)

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
   sin->sin_family = AF_INET;
   sin->sin_port = inp->inp_lport;
 402e200:	2140078b 	ldhu	r5,30(r4)
   sin->sin_addr = inp->inp_laddr;
 402e204:	18800115 	stw	r2,4(r3)

   nam->m_len = sizeof (*sin);
   sin = mtod(nam, struct sockaddr_in *);
   MEMSET(sin, 0, sizeof (*sin));
   sin->sin_family = AF_INET;
   sin->sin_port = inp->inp_lport;
 402e208:	1940008d 	sth	r5,2(r3)
   sin->sin_addr = inp->inp_laddr;
}
 402e20c:	f800283a 	ret

0402e210 <in_pcbbind>:
   struct inpcb * head  =  inp->inp_head;
   struct sockaddr_in * sin;
   u_short  lport =  0;


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
 402e210:	2080078b 	ldhu	r2,30(r4)

int
in_pcbbind(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 402e214:	defff704 	addi	sp,sp,-36
 402e218:	dd000615 	stw	r20,24(sp)
 402e21c:	dc800415 	stw	r18,16(sp)
 402e220:	dc000215 	stw	r16,8(sp)
 402e224:	dfc00815 	stw	ra,32(sp)
 402e228:	dd400715 	stw	r21,28(sp)
 402e22c:	dcc00515 	stw	r19,20(sp)
 402e230:	dc400315 	stw	r17,12(sp)
 402e234:	2021883a 	mov	r16,r4
   struct socket *   so =  inp->inp_socket;
 402e238:	25000817 	ldw	r20,32(r4)
   struct inpcb * head  =  inp->inp_head;
 402e23c:	24800217 	ldw	r18,8(r4)
   struct sockaddr_in * sin;
   u_short  lport =  0;


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
 402e240:	10003e1e 	bne	r2,zero,402e33c <in_pcbbind+0x12c>
 402e244:	21c00417 	ldw	r7,16(r4)
 402e248:	38003c1e 	bne	r7,zero,402e33c <in_pcbbind+0x12c>
      return (EINVAL);
   if (nam == 0)
 402e24c:	28001c26 	beq	r5,zero,402e2c0 <in_pcbbind+0xb0>
      goto noname;
   sin = mtod(nam, struct sockaddr_in *);
 402e250:	2cc00317 	ldw	r19,12(r5)
   /*
    * removed test here for "if (nam->m_len != sizeof (*sin))"
    * since it really complicatges supporting dual IPv4/v6, and 
    * the 2.0 stack now checks this in t_bind(). -JB-
    */
   if (sin->sin_addr.s_addr != INADDR_ANY) 
 402e254:	99000117 	ldw	r4,4(r19)
 402e258:	20002726 	beq	r4,zero,402e2f8 <in_pcbbind+0xe8>
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
 402e25c:	40284380 	call	4028438 <ip_mymach>
 402e260:	99000117 	ldw	r4,4(r19)
 402e264:	11002426 	beq	r2,r4,402e2f8 <in_pcbbind+0xe8>
 402e268:	00801f44 	movi	r2,125
         lport = htons(head->inp_lport);
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
   }
   inp->inp_lport = lport;
   return (0);
}
 402e26c:	dfc00817 	ldw	ra,32(sp)
 402e270:	dd400717 	ldw	r21,28(sp)
 402e274:	dd000617 	ldw	r20,24(sp)
 402e278:	dcc00517 	ldw	r19,20(sp)
 402e27c:	dc800417 	ldw	r18,16(sp)
 402e280:	dc400317 	ldw	r17,12(sp)
 402e284:	dc000217 	ldw	r16,8(sp)
 402e288:	dec00904 	addi	sp,sp,36
 402e28c:	f800283a 	ret
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
 402e290:	02010004 	movi	r8,1024
 402e294:	9200078d 	sth	r8,30(r18)
         }
         lport = htons(head->inp_lport);
 402e298:	40bfffcc 	andi	r2,r8,65535
 402e29c:	1010923a 	slli	r8,r2,8
 402e2a0:	1004d23a 	srli	r2,r2,8
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 402e2a4:	d8000115 	stw	zero,4(sp)
         if (head->inp_lport++ < IPPORT_RESERVED ||
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
         }
         lport = htons(head->inp_lport);
 402e2a8:	1222b03a 	or	r17,r2,r8
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 402e2ac:	88ffffcc 	andi	r3,r17,65535
 402e2b0:	d8c00015 	stw	r3,0(sp)
 402e2b4:	402e0340 	call	402e034 <in_pcblookup>
 402e2b8:	10002626 	beq	r2,zero,402e354 <in_pcbbind+0x144>
 402e2bc:	81c00417 	ldw	r7,16(r16)
noname:
   if (lport == 0)
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
 402e2c0:	9200078b 	ldhu	r8,30(r18)
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
         }
         lport = htons(head->inp_lport);
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 402e2c4:	9009883a 	mov	r4,r18
 402e2c8:	000b883a 	mov	r5,zero
noname:
   if (lport == 0)
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
 402e2cc:	40800044 	addi	r2,r8,1
 402e2d0:	40ffffcc 	andi	r3,r8,65535
 402e2d4:	9080078d 	sth	r2,30(r18)
 402e2d8:	1011883a 	mov	r8,r2
 402e2dc:	127fffcc 	andi	r9,r2,65535
 402e2e0:	0080ffc4 	movi	r2,1023
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
         }
         lport = htons(head->inp_lport);
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 402e2e4:	000d883a 	mov	r6,zero
noname:
   if (lport == 0)
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
 402e2e8:	10ffe92e 	bgeu	r2,r3,402e290 <in_pcbbind+0x80>
 402e2ec:	0084e204 	movi	r2,5000
 402e2f0:	127fe92e 	bgeu	r2,r9,402e298 <in_pcbbind+0x88>
 402e2f4:	003fe606 	br	402e290 <in_pcbbind+0x80>
   if (sin->sin_addr.s_addr != INADDR_ANY) 
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
      return (EADDRNOTAVAIL);
   }
   lport = sin->sin_port;
 402e2f8:	9c40008b 	ldhu	r17,2(r19)
   if (lport) 
 402e2fc:	8d7fffcc 	andi	r21,r17,65535
 402e300:	a8001126 	beq	r21,zero,402e348 <in_pcbbind+0x138>
   {
      int   wild  =  0;

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 402e304:	a1400417 	ldw	r5,16(r20)
 402e308:	2880010c 	andi	r2,r5,4
 402e30c:	10001426 	beq	r2,zero,402e360 <in_pcbbind+0x150>
 402e310:	0005883a 	mov	r2,zero
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
          (so->so_options & SO_ACCEPTCONN) == 0))
      {
         wild = INPLOOKUP_WILDCARD;
      }
      if (in_pcblookup(head,
 402e314:	200f883a 	mov	r7,r4
 402e318:	000b883a 	mov	r5,zero
 402e31c:	9009883a 	mov	r4,r18
 402e320:	000d883a 	mov	r6,zero
 402e324:	d8800115 	stw	r2,4(sp)
 402e328:	dd400015 	stw	r21,0(sp)
 402e32c:	402e0340 	call	402e034 <in_pcblookup>
 402e330:	10000426 	beq	r2,zero,402e344 <in_pcbbind+0x134>
 402e334:	00801c04 	movi	r2,112
 402e338:	003fcc06 	br	402e26c <in_pcbbind+0x5c>
         }
         lport = htons(head->inp_lport);
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
   }
   inp->inp_lport = lport;
   return (0);
 402e33c:	00800584 	movi	r2,22
 402e340:	003fca06 	br	402e26c <in_pcbbind+0x5c>
 402e344:	99000117 	ldw	r4,4(r19)
          0L, 0, sin->sin_addr.s_addr, lport, wild))
      {
         return (EADDRINUSE);
      }
   }
   inp->inp_laddr = sin->sin_addr;
 402e348:	200f883a 	mov	r7,r4
 402e34c:	81000415 	stw	r4,16(r16)
noname:
   if (lport == 0)
 402e350:	a83fdb26 	beq	r21,zero,402e2c0 <in_pcbbind+0xb0>
            head->inp_lport = IPPORT_RESERVED;
         }
         lport = htons(head->inp_lport);
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
   }
   inp->inp_lport = lport;
 402e354:	0005883a 	mov	r2,zero
 402e358:	8440078d 	sth	r17,30(r16)
 402e35c:	003fc306 	br	402e26c <in_pcbbind+0x5c>
   if (lport) 
   {
      int   wild  =  0;

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 402e360:	a0c00217 	ldw	r3,8(r20)
 402e364:	1880010b 	ldhu	r2,4(r3)
 402e368:	1080010c 	andi	r2,r2,4
 402e36c:	1000021e 	bne	r2,zero,402e378 <in_pcbbind+0x168>
 402e370:	00800044 	movi	r2,1
 402e374:	003fe706 	br	402e314 <in_pcbbind+0x104>
 402e378:	2804d07a 	srli	r2,r5,1
 402e37c:	1080005c 	xori	r2,r2,1
 402e380:	1080004c 	andi	r2,r2,1
 402e384:	003fe306 	br	402e314 <in_pcbbind+0x104>

0402e388 <in_pcbconnect>:
   struct mbuf *  nam)
{
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);

   if (nam->m_len < sizeof (*sin))
 402e388:	28c00217 	ldw	r3,8(r5)
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
 402e38c:	defff904 	addi	sp,sp,-28
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);

   if (nam->m_len < sizeof (*sin))
 402e390:	008003c4 	movi	r2,15
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
 402e394:	dc400415 	stw	r17,16(sp)
 402e398:	dc000315 	stw	r16,12(sp)
 402e39c:	dfc00615 	stw	ra,24(sp)
 402e3a0:	dc800515 	stw	r18,20(sp)
 402e3a4:	2023883a 	mov	r17,r4
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 402e3a8:	2c000317 	ldw	r16,12(r5)

   if (nam->m_len < sizeof (*sin))
 402e3ac:	10c0452e 	bgeu	r2,r3,402e4c4 <in_pcbconnect+0x13c>
      return (EINVAL);
   if (sin->sin_family != AF_INET)
 402e3b0:	80c0000f 	ldh	r3,0(r16)
 402e3b4:	00800084 	movi	r2,2
 402e3b8:	18803c1e 	bne	r3,r2,402e4ac <in_pcbconnect+0x124>
      return (EAFNOSUPPORT);
   if (sin->sin_port == 0)
 402e3bc:	8180008b 	ldhu	r6,2(r16)
 402e3c0:	30002126 	beq	r6,zero,402e448 <in_pcbconnect+0xc0>
    * use the primary local address.
    * If the supplied address is INADDR_BROADCAST,
    * and the primary interface supports broadcast,
    * choose the broadcast address for that interface.
    */
   if (sin->sin_addr.s_addr == INADDR_ANY)
 402e3c4:	81400117 	ldw	r5,4(r16)
 402e3c8:	28001d1e 	bne	r5,zero,402e440 <in_pcbconnect+0xb8>
   {
      if (inp && inp->ifp)
 402e3cc:	20001e26 	beq	r4,zero,402e448 <in_pcbconnect+0xc0>
 402e3d0:	21000a17 	ldw	r4,40(r4)
 402e3d4:	20001c26 	beq	r4,zero,402e448 <in_pcbconnect+0xc0>
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
 402e3d8:	21400a17 	ldw	r5,40(r4)
 402e3dc:	81400115 	stw	r5,4(r16)
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
      return (EADDRNOTAVAIL);


   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 402e3e0:	8c800417 	ldw	r18,16(r17)
 402e3e4:	9000071e 	bne	r18,zero,402e404 <in_pcbconnect+0x7c>
   {
#ifdef MULTI_HOMED
      ip_addr hop1;     /* dummy for pass to iproute() */
      NET npnet;     /* the netport iface we can send on */
      /* call netport stack's IP routing */
      npnet = iproute(sin->sin_addr.s_addr, &hop1);
 402e3e8:	2809883a 	mov	r4,r5
 402e3ec:	d9400204 	addi	r5,sp,8
 402e3f0:	40282e00 	call	40282e0 <iproute>
      if (!npnet)
 402e3f4:	10001426 	beq	r2,zero,402e448 <in_pcbconnect+0xc0>
         return EADDRNOTAVAIL;
      ifaddr = npnet->n_ipaddr;  /* local address for this host */
 402e3f8:	14800a17 	ldw	r18,40(r2)
 402e3fc:	8180008b 	ldhu	r6,2(r16)
 402e400:	81400117 	ldw	r5,4(r16)
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */

   if (in_pcblookup(inp->inp_head,
 402e404:	89000217 	ldw	r4,8(r17)
 402e408:	8880078b 	ldhu	r2,30(r17)
 402e40c:	900f883a 	mov	r7,r18
 402e410:	d8000115 	stw	zero,4(sp)
 402e414:	d8800015 	stw	r2,0(sp)
 402e418:	402e0340 	call	402e034 <in_pcblookup>
 402e41c:	10001226 	beq	r2,zero,402e468 <in_pcbconnect+0xe0>
 402e420:	01001c04 	movi	r4,112
      inp->inp_laddr.s_addr = ifaddr;
   }
   inp->inp_faddr = sin->sin_addr;
   inp->inp_fport = sin->sin_port;
   return 0;
}
 402e424:	2005883a 	mov	r2,r4
 402e428:	dfc00617 	ldw	ra,24(sp)
 402e42c:	dc800517 	ldw	r18,20(sp)
 402e430:	dc400417 	ldw	r17,16(sp)
 402e434:	dc000317 	ldw	r16,12(sp)
 402e438:	dec00704 	addi	sp,sp,28
 402e43c:	f800283a 	ret
      if (inp && inp->ifp)
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
      else
         return (EADDRNOTAVAIL);
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
 402e440:	00bfffc4 	movi	r2,-1
 402e444:	28bfe61e 	bne	r5,r2,402e3e0 <in_pcbconnect+0x58>
         (void)in_pcbbind(inp, (struct mbuf *)0);
      inp->inp_laddr.s_addr = ifaddr;
   }
   inp->inp_faddr = sin->sin_addr;
   inp->inp_fport = sin->sin_port;
   return 0;
 402e448:	01001f44 	movi	r4,125
}
 402e44c:	2005883a 	mov	r2,r4
 402e450:	dfc00617 	ldw	ra,24(sp)
 402e454:	dc800517 	ldw	r18,20(sp)
 402e458:	dc400417 	ldw	r17,16(sp)
 402e45c:	dc000317 	ldw	r16,12(sp)
 402e460:	dec00704 	addi	sp,sp,28
 402e464:	f800283a 	ret
       inp->inp_lport,
       0))
   {
      return (EADDRINUSE);
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 402e468:	88800417 	ldw	r2,16(r17)
 402e46c:	1000031e 	bne	r2,zero,402e47c <in_pcbconnect+0xf4>
   {
      if (inp->inp_lport == 0)
 402e470:	8880078b 	ldhu	r2,30(r17)
 402e474:	10000f26 	beq	r2,zero,402e4b4 <in_pcbconnect+0x12c>
         (void)in_pcbbind(inp, (struct mbuf *)0);
      inp->inp_laddr.s_addr = ifaddr;
 402e478:	8c800415 	stw	r18,16(r17)
   }
   inp->inp_faddr = sin->sin_addr;
   inp->inp_fport = sin->sin_port;
 402e47c:	8080008b 	ldhu	r2,2(r16)
   {
      if (inp->inp_lport == 0)
         (void)in_pcbbind(inp, (struct mbuf *)0);
      inp->inp_laddr.s_addr = ifaddr;
   }
   inp->inp_faddr = sin->sin_addr;
 402e480:	80c00117 	ldw	r3,4(r16)
   inp->inp_fport = sin->sin_port;
 402e484:	0009883a 	mov	r4,zero
 402e488:	8880070d 	sth	r2,28(r17)
   return 0;
}
 402e48c:	2005883a 	mov	r2,r4
   {
      if (inp->inp_lport == 0)
         (void)in_pcbbind(inp, (struct mbuf *)0);
      inp->inp_laddr.s_addr = ifaddr;
   }
   inp->inp_faddr = sin->sin_addr;
 402e490:	88c00315 	stw	r3,12(r17)
   inp->inp_fport = sin->sin_port;
   return 0;
}
 402e494:	dfc00617 	ldw	ra,24(sp)
 402e498:	dc800517 	ldw	r18,20(sp)
 402e49c:	dc400417 	ldw	r17,16(sp)
 402e4a0:	dc000317 	ldw	r16,12(sp)
 402e4a4:	dec00704 	addi	sp,sp,28
 402e4a8:	f800283a 	ret
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);

   if (nam->m_len < sizeof (*sin))
      return (EINVAL);
   if (sin->sin_family != AF_INET)
 402e4ac:	01001a84 	movi	r4,106
 402e4b0:	003fdc06 	br	402e424 <in_pcbconnect+0x9c>
      return (EADDRINUSE);
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
   {
      if (inp->inp_lport == 0)
         (void)in_pcbbind(inp, (struct mbuf *)0);
 402e4b4:	8809883a 	mov	r4,r17
 402e4b8:	000b883a 	mov	r5,zero
 402e4bc:	402e2100 	call	402e210 <in_pcbbind>
 402e4c0:	003fed06 	br	402e478 <in_pcbconnect+0xf0>
   struct mbuf *  nam)
{
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);

   if (nam->m_len < sizeof (*sin))
 402e4c4:	01000584 	movi	r4,22
 402e4c8:	003fd606 	br	402e424 <in_pcbconnect+0x9c>

0402e4cc <in_pcbdetach>:
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
 402e4cc:	defffe04 	addi	sp,sp,-8
 402e4d0:	dc400015 	stw	r17,0(sp)
 402e4d4:	2023883a 	mov	r17,r4
   struct socket *   so =  inp->inp_socket;
 402e4d8:	21000817 	ldw	r4,32(r4)
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
 402e4dc:	dfc00115 	stw	ra,4(sp)
   struct socket *   so =  inp->inp_socket;

   so->so_pcb = 0;
 402e4e0:	20000115 	stw	zero,4(r4)
   sofree(so);
 402e4e4:	40205d80 	call	40205d8 <sofree>
   remque(inp);
 402e4e8:	8809883a 	mov	r4,r17
 402e4ec:	401d10c0 	call	401d10c <remque>
   INP_FREE (inp);
 402e4f0:	8809883a 	mov	r4,r17
}
 402e4f4:	dfc00117 	ldw	ra,4(sp)
 402e4f8:	dc400017 	ldw	r17,0(sp)
 402e4fc:	dec00204 	addi	sp,sp,8
   struct socket *   so =  inp->inp_socket;

   so->so_pcb = 0;
   sofree(so);
   remque(inp);
   INP_FREE (inp);
 402e500:	401cce41 	jmpi	401cce4 <npfree>

0402e504 <in_pcbdisconnect>:
in_pcbdisconnect(struct inpcb * inp)
{

   inp->inp_faddr.s_addr = INADDR_ANY;
   inp->inp_fport = 0;
   if (inp->inp_socket->so_state & SS_NOFDREF)
 402e504:	21400817 	ldw	r5,32(r4)
void
in_pcbdisconnect(struct inpcb * inp)
{

   inp->inp_faddr.s_addr = INADDR_ANY;
   inp->inp_fport = 0;
 402e508:	2000070d 	sth	zero,28(r4)

void
in_pcbdisconnect(struct inpcb * inp)
{

   inp->inp_faddr.s_addr = INADDR_ANY;
 402e50c:	20000315 	stw	zero,12(r4)
   inp->inp_fport = 0;
   if (inp->inp_socket->so_state & SS_NOFDREF)
 402e510:	28c0088b 	ldhu	r3,34(r5)
 402e514:	18c0004c 	andi	r3,r3,1
 402e518:	1807003a 	cmpeq	r3,r3,zero
 402e51c:	18000126 	beq	r3,zero,402e524 <in_pcbdisconnect+0x20>
 402e520:	f800283a 	ret
      in_pcbdetach (inp);
 402e524:	402e4cc1 	jmpi	402e4cc <in_pcbdetach>

0402e528 <in_pcballoc>:
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
 402e528:	defffc04 	addi	sp,sp,-16
 402e52c:	dc800215 	stw	r18,8(sp)
 402e530:	2025883a 	mov	r18,r4
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
 402e534:	01000b04 	movi	r4,44
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
 402e538:	dc400115 	stw	r17,4(sp)
 402e53c:	dc000015 	stw	r16,0(sp)
 402e540:	2823883a 	mov	r17,r5
 402e544:	dfc00315 	stw	ra,12(sp)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
 402e548:	401cdc80 	call	401cdc8 <npalloc>
 402e54c:	1021883a 	mov	r16,r2
   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
   insque(inp, head);
 402e550:	1009883a 	mov	r4,r2
 402e554:	880b883a 	mov	r5,r17
   struct inpcb * head)
{
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
   if (inp == 0)
 402e558:	00800304 	movi	r2,12
 402e55c:	80000726 	beq	r16,zero,402e57c <in_pcballoc+0x54>

   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
 402e560:	00808004 	movi	r2,512
 402e564:	80800615 	stw	r2,24(r16)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
   if (inp == 0)
      return ENOMEM;
   inp->inp_head = head;
 402e568:	84400215 	stw	r17,8(r16)
   inp->inp_socket = so;
 402e56c:	84800815 	stw	r18,32(r16)
   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
   insque(inp, head);
 402e570:	401d12c0 	call	401d12c <insque>
   so->so_pcb = inp;
 402e574:	0005883a 	mov	r2,zero
 402e578:	94000115 	stw	r16,4(r18)
   return 0;
}
 402e57c:	dfc00317 	ldw	ra,12(sp)
 402e580:	dc800217 	ldw	r18,8(sp)
 402e584:	dc400117 	ldw	r17,4(sp)
 402e588:	dc000017 	ldw	r16,0(sp)
 402e58c:	dec00404 	addi	sp,sp,16
 402e590:	f800283a 	ret

0402e594 <set_vfopen_error>:
 * RETURNS: 
 */

void set_vfopen_error(int error)
{
   vfopen_error = error;
 402e594:	d1286915 	stw	r4,-24156(gp)
}
 402e598:	f800283a 	ret

0402e59c <get_vfopen_error>:
 */

int get_vfopen_error()
{
   return vfopen_error;
}
 402e59c:	d0a86917 	ldw	r2,-24156(gp)
 402e5a0:	f800283a 	ret

0402e5a4 <vunlink_flag_open_files>:
void vunlink_flag_open_files(struct vfs_file * vfp)
{
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 402e5a4:	d0e86717 	ldw	r3,-24164(gp)
 402e5a8:	1800031e 	bne	r3,zero,402e5b8 <vunlink_flag_open_files+0x14>
 402e5ac:	00000706 	br	402e5cc <vunlink_flag_open_files+0x28>
 402e5b0:	18c00017 	ldw	r3,0(r3)
 402e5b4:	18000526 	beq	r3,zero,402e5cc <vunlink_flag_open_files+0x28>
   {
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
 402e5b8:	18800117 	ldw	r2,4(r3)
 402e5bc:	113ffc1e 	bne	r2,r4,402e5b0 <vunlink_flag_open_files+0xc>
         vtmp->file = NULL;
 402e5c0:	18000115 	stw	zero,4(r3)
void vunlink_flag_open_files(struct vfs_file * vfp)
{
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 402e5c4:	18c00017 	ldw	r3,0(r3)
 402e5c8:	183ffb1e 	bne	r3,zero,402e5b8 <vunlink_flag_open_files+0x14>
 402e5cc:	f800283a 	ret

0402e5d0 <isvfile_locked>:
int
isvfile_locked(VFILE * vfp)
{
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 402e5d0:	d0a86717 	ldw	r2,-24164(gp)
 402e5d4:	10000326 	beq	r2,zero,402e5e4 <isvfile_locked+0x14>
      if (vtmp == vfp)
 402e5d8:	20800426 	beq	r4,r2,402e5ec <isvfile_locked+0x1c>
int
isvfile_locked(VFILE * vfp)
{
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 402e5dc:	10800017 	ldw	r2,0(r2)
 402e5e0:	103ffd1e 	bne	r2,zero,402e5d8 <isvfile_locked+0x8>
 402e5e4:	0005883a 	mov	r2,zero
      if (vtmp == vfp)
      return TRUE;

   return FALSE;  /* passed pointer not found in list */
}
 402e5e8:	f800283a 	ret
int
isvfile_locked(VFILE * vfp)
{
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 402e5ec:	00800044 	movi	r2,1
 402e5f0:	f800283a 	ret

0402e5f4 <vclearerr>:
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
 402e5f4:	defffe04 	addi	sp,sp,-8
 402e5f8:	dc000015 	stw	r16,0(sp)
 402e5fc:	2021883a 	mov	r16,r4
   /* lock the VFS */
   vfs_lock();
 402e600:	01000144 	movi	r4,5
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
 402e604:	dfc00115 	stw	ra,4(sp)
   /* lock the VFS */
   vfs_lock();
 402e608:	401c98c0 	call	401c98c <wait_app_sem>

   if (isvfile_locked(vfd))
 402e60c:	8009883a 	mov	r4,r16
 402e610:	402e5d00 	call	402e5d0 <isvfile_locked>
   {
      vfs_unlock();
 402e614:	01000144 	movi	r4,5
void vclearerr(VFILE * vfd)
{
   /* lock the VFS */
   vfs_lock();

   if (isvfile_locked(vfd))
 402e618:	10000626 	beq	r2,zero,402e634 <vclearerr+0x40>
   {
      vfs_unlock();
 402e61c:	401c8cc0 	call	401c8cc <post_app_sem>

      vfd->error = 0;
 402e620:	80000415 	stw	zero,16(r16)
   vfs_unlock();

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
 402e624:	dfc00117 	ldw	ra,4(sp)
 402e628:	dc000017 	ldw	r16,0(sp)
 402e62c:	dec00204 	addi	sp,sp,8
 402e630:	f800283a 	ret

      vfd->error = 0;
      return;
   }

   vfs_unlock();
 402e634:	01000144 	movi	r4,5

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
 402e638:	dfc00117 	ldw	ra,4(sp)
 402e63c:	dc000017 	ldw	r16,0(sp)
 402e640:	dec00204 	addi	sp,sp,8

      vfd->error = 0;
      return;
   }

   vfs_unlock();
 402e644:	401c8cc1 	jmpi	401c8cc <post_app_sem>

0402e648 <vferror>:
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
 402e648:	defffe04 	addi	sp,sp,-8
 402e64c:	dc000015 	stw	r16,0(sp)
 402e650:	2021883a 	mov	r16,r4
   /* lock the VFS */
   vfs_lock();
 402e654:	01000144 	movi	r4,5
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
 402e658:	dfc00115 	stw	ra,4(sp)
   /* lock the VFS */
   vfs_lock();
 402e65c:	401c98c0 	call	401c98c <wait_app_sem>

   if (isvfile_locked(vfd))
 402e660:	8009883a 	mov	r4,r16
 402e664:	402e5d00 	call	402e5d0 <isvfile_locked>
   {
      vfs_unlock();
 402e668:	01000144 	movi	r4,5
vferror(VFILE * vfd)
{
   /* lock the VFS */
   vfs_lock();

   if (isvfile_locked(vfd))
 402e66c:	10000626 	beq	r2,zero,402e688 <vferror+0x40>
   {
      vfs_unlock();
 402e670:	401c8cc0 	call	401c8cc <post_app_sem>

      return vfd->error;
 402e674:	80800417 	ldw	r2,16(r16)
#ifdef HT_LOCALFS
   return(ferror((FILE*)vfd));
#else /* not a VFILE, and no local FS */
   return -1;  /* should this be an error? */
#endif   /* HT_LOCALFS */
}
 402e678:	dfc00117 	ldw	ra,4(sp)
 402e67c:	dc000017 	ldw	r16,0(sp)
 402e680:	dec00204 	addi	sp,sp,8
 402e684:	f800283a 	ret
      vfs_unlock();

      return vfd->error;
   }

   vfs_unlock();
 402e688:	01000144 	movi	r4,5
 402e68c:	401c8cc0 	call	401c8cc <post_app_sem>
 402e690:	00bfffc4 	movi	r2,-1
 402e694:	003ff806 	br	402e678 <vferror+0x30>

0402e698 <isvfile>:
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
 402e698:	defffd04 	addi	sp,sp,-12
 402e69c:	dc400015 	stw	r17,0(sp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 402e6a0:	04400144 	movi	r17,5
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
 402e6a4:	dcc00115 	stw	r19,4(sp)
 402e6a8:	2027883a 	mov	r19,r4
   int   rc;

   /* lock the VFS */
   vfs_lock();
 402e6ac:	8809883a 	mov	r4,r17
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
 402e6b0:	dfc00215 	stw	ra,8(sp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 402e6b4:	401c98c0 	call	401c98c <wait_app_sem>

   /* do the lookup */
   rc = isvfile_locked(vfp);
 402e6b8:	9809883a 	mov	r4,r19
 402e6bc:	402e5d00 	call	402e5d0 <isvfile_locked>

   /* unlock the VFS */
   vfs_unlock();
 402e6c0:	8809883a 	mov	r4,r17

   /* lock the VFS */
   vfs_lock();

   /* do the lookup */
   rc = isvfile_locked(vfp);
 402e6c4:	1027883a 	mov	r19,r2

   /* unlock the VFS */
   vfs_unlock();
 402e6c8:	401c8cc0 	call	401c8cc <post_app_sem>
   return rc;
}
 402e6cc:	9805883a 	mov	r2,r19
 402e6d0:	dfc00217 	ldw	ra,8(sp)
 402e6d4:	dcc00117 	ldw	r19,4(sp)
 402e6d8:	dc400017 	ldw	r17,0(sp)
 402e6dc:	dec00304 	addi	sp,sp,12
 402e6e0:	f800283a 	ret

0402e6e4 <vftell>:
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
 402e6e4:	defffd04 	addi	sp,sp,-12
 402e6e8:	dc000015 	stw	r16,0(sp)
 402e6ec:	2021883a 	mov	r16,r4
   /* lock the VFS */
   vfs_lock();
 402e6f0:	01000144 	movi	r4,5
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
 402e6f4:	dfc00215 	stw	ra,8(sp)
 402e6f8:	dc400115 	stw	r17,4(sp)
   /* lock the VFS */
   vfs_lock();
 402e6fc:	401c98c0 	call	401c98c <wait_app_sem>

   if (isvfile_locked(vfd))
 402e700:	8009883a 	mov	r4,r16
 402e704:	402e5d00 	call	402e5d0 <isvfile_locked>

         return (vfd->cmploc - vfd->file->data);
      }
   }

   vfs_unlock();
 402e708:	01000144 	movi	r4,5
vftell(VFILE * vfd)
{
   /* lock the VFS */
   vfs_lock();

   if (isvfile_locked(vfd))
 402e70c:	1000081e 	bne	r2,zero,402e730 <vftell+0x4c>

         return (vfd->cmploc - vfd->file->data);
      }
   }

   vfs_unlock();
 402e710:	401c8cc0 	call	401c8cc <post_app_sem>
 402e714:	04400244 	movi	r17,9
   /* default to call on local system */
   return(ftell((FILE*)vfd));
#else
   return EBADF;
#endif   /* HT_LOCALFS */
}
 402e718:	8805883a 	mov	r2,r17
 402e71c:	dfc00217 	ldw	ra,8(sp)
 402e720:	dc400117 	ldw	r17,4(sp)
 402e724:	dc000017 	ldw	r16,0(sp)
 402e728:	dec00304 	addi	sp,sp,12
 402e72c:	f800283a 	ret
   if (isvfile_locked(vfd))
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
 402e730:	80c00117 	ldw	r3,4(r16)
      {
         vfs_unlock();
 402e734:	047fffc4 	movi	r17,-1
   if (isvfile_locked(vfd))
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
 402e738:	18000726 	beq	r3,zero,402e758 <vftell+0x74>
         return -1;
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 402e73c:	18800a17 	ldw	r2,40(r3)
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
         long  rc;

         rc = vfp->r_ftell(vfd);
 402e740:	8009883a 	mov	r4,r16
         return -1;
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 402e744:	10000626 	beq	r2,zero,402e760 <vftell+0x7c>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
         long  rc;

         rc = vfp->r_ftell(vfd);
 402e748:	10c00617 	ldw	r3,24(r2)
 402e74c:	183ee83a 	callr	r3
 402e750:	1023883a 	mov	r17,r2
         vfs_unlock();
 402e754:	01000144 	movi	r4,5
 402e758:	401c8cc0 	call	401c8cc <post_app_sem>
 402e75c:	003fee06 	br	402e718 <vftell+0x34>
         return rc;
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
 402e760:	18800817 	ldw	r2,32(r3)
 402e764:	18c00617 	ldw	r3,24(r3)
 402e768:	81400217 	ldw	r5,8(r16)

         return vfd->file->comp_size;
      }
      else
      {
         vfs_unlock();
 402e76c:	01000144 	movi	r4,5
         return rc;
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
 402e770:	1887883a 	add	r3,r3,r2
 402e774:	28c00626 	beq	r5,r3,402e790 <vftell+0xac>

         return vfd->file->comp_size;
      }
      else
      {
         vfs_unlock();
 402e778:	401c8cc0 	call	401c8cc <post_app_sem>

         return (vfd->cmploc - vfd->file->data);
 402e77c:	80800117 	ldw	r2,4(r16)
 402e780:	81000217 	ldw	r4,8(r16)
 402e784:	10c00617 	ldw	r3,24(r2)
 402e788:	20e3c83a 	sub	r17,r4,r3
 402e78c:	003fe206 	br	402e718 <vftell+0x34>
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
      {
         vfs_unlock();
 402e790:	401c8cc0 	call	401c8cc <post_app_sem>

         return vfd->file->comp_size;
 402e794:	80800117 	ldw	r2,4(r16)
 402e798:	14400817 	ldw	r17,32(r2)
 402e79c:	003fde06 	br	402e718 <vftell+0x34>

0402e7a0 <vfseek>:
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
 402e7a0:	defffb04 	addi	sp,sp,-20
 402e7a4:	dc000115 	stw	r16,4(sp)
 402e7a8:	2021883a 	mov	r16,r4
   /* lock the VFS */
   vfs_lock();
 402e7ac:	01000144 	movi	r4,5
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
 402e7b0:	dc800315 	stw	r18,12(sp)
 402e7b4:	dc400215 	stw	r17,8(sp)
 402e7b8:	dfc00415 	stw	ra,16(sp)
 402e7bc:	2825883a 	mov	r18,r5
 402e7c0:	3023883a 	mov	r17,r6
   /* lock the VFS */
   vfs_lock();
 402e7c4:	401c98c0 	call	401c98c <wait_app_sem>

   if (isvfile_locked(vfd))
 402e7c8:	8009883a 	mov	r4,r16
 402e7cc:	402e5d00 	call	402e5d0 <isvfile_locked>
 402e7d0:	10002e26 	beq	r2,zero,402e88c <vfseek+0xec>
   {
#ifdef HT_RWVFS
      /* the caller is trying to seek a file that's been deleted,
         so return an error indication */
      if (vfd->file == NULL)
 402e7d4:	81000117 	ldw	r4,4(r16)
 402e7d8:	20002c26 	beq	r4,zero,402e88c <vfseek+0xec>
         return -1;
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 402e7dc:	20800a17 	ldw	r2,40(r4)
 402e7e0:	10000f26 	beq	r2,zero,402e820 <vfseek+0x80>
      {
         struct vfroutines *vfp = (struct vfroutines*)(vfd->file->method);
         int   rc;

         rc = vfp->r_fseek(vfd, offset, mode);
 402e7e4:	10c00517 	ldw	r3,20(r2)
 402e7e8:	8009883a 	mov	r4,r16
 402e7ec:	900b883a 	mov	r5,r18
 402e7f0:	880d883a 	mov	r6,r17
 402e7f4:	183ee83a 	callr	r3
         vfs_unlock();
 402e7f8:	01000144 	movi	r4,5
 402e7fc:	d8800015 	stw	r2,0(sp)
 402e800:	401c8cc0 	call	401c8cc <post_app_sem>
 402e804:	d8800017 	ldw	r2,0(sp)
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
#endif   /* HT_LOCALFS */
}
 402e808:	dfc00417 	ldw	ra,16(sp)
 402e80c:	dc800317 	ldw	r18,12(sp)
 402e810:	dc400217 	ldw	r17,8(sp)
 402e814:	dc000117 	ldw	r16,4(sp)
 402e818:	dec00504 	addi	sp,sp,20
 402e81c:	f800283a 	ret
         return rc;
      }
#endif   /* HT_EXTDEV */
      /* this vfseek() currently only supports seek to exact
         end or begining of file */
      switch (mode)
 402e820:	00800044 	movi	r2,1
 402e824:	88801526 	beq	r17,r2,402e87c <vfseek+0xdc>
 402e828:	00800084 	movi	r2,2
 402e82c:	88800d26 	beq	r17,r2,402e864 <vfseek+0xc4>
 402e830:	8800031e 	bne	r17,zero,402e840 <vfseek+0xa0>
      {
      case SEEK_SET:
         vfd->cmploc = vfd->file->data + offset;
 402e834:	20800617 	ldw	r2,24(r4)
 402e838:	1485883a 	add	r2,r2,r18
 402e83c:	80800215 	stw	r2,8(r16)
         break;
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
         break;
      }
      vfs_unlock();
 402e840:	01000144 	movi	r4,5
 402e844:	401c8cc0 	call	401c8cc <post_app_sem>
 402e848:	0005883a 	mov	r2,zero
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
#endif   /* HT_LOCALFS */
}
 402e84c:	dfc00417 	ldw	ra,16(sp)
 402e850:	dc800317 	ldw	r18,12(sp)
 402e854:	dc400217 	ldw	r17,8(sp)
 402e858:	dc000117 	ldw	r16,4(sp)
 402e85c:	dec00504 	addi	sp,sp,20
 402e860:	f800283a 	ret
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
         break;
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
 402e864:	20800617 	ldw	r2,24(r4)
 402e868:	20c00817 	ldw	r3,32(r4)
 402e86c:	10c5883a 	add	r2,r2,r3
 402e870:	1485883a 	add	r2,r2,r18
 402e874:	80800215 	stw	r2,8(r16)
 402e878:	003ff106 	br	402e840 <vfseek+0xa0>
         break;
      case SEEK_CUR:
         /* If the file is compressed, then the following
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
 402e87c:	80800217 	ldw	r2,8(r16)
 402e880:	1485883a 	add	r2,r2,r18
 402e884:	80800215 	stw	r2,8(r16)
 402e888:	003fed06 	br	402e840 <vfseek+0xa0>
      }
      vfs_unlock();
      return(0);
   }

   vfs_unlock();
 402e88c:	01000144 	movi	r4,5
 402e890:	401c8cc0 	call	401c8cc <post_app_sem>
 402e894:	00bfffc4 	movi	r2,-1
 402e898:	003fdb06 	br	402e808 <vfseek+0x68>

0402e89c <strippath>:
 * have the http_root_path prepended; or on any error. 
 */

char * 
strippath(char * name)
{
 402e89c:	defffb04 	addi	sp,sp,-20
 402e8a0:	dc400115 	stw	r17,4(sp)
 402e8a4:	dc000015 	stw	r16,0(sp)
 402e8a8:	dfc00415 	stw	ra,16(sp)
 402e8ac:	dcc00315 	stw	r19,12(sp)
 402e8b0:	dc800215 	stw	r18,8(sp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
 402e8b4:	4019a940 	call	4019a94 <uslash>
   path = http_root_path; /* The servers root path, at least one UNIX slash */
 402e8b8:	d4205417 	ldw	r16,-32432(gp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
 402e8bc:	1023883a 	mov	r17,r2
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   while (*path && *ntmp)
 402e8c0:	80800007 	ldb	r2,0(r16)
 402e8c4:	10001c26 	beq	r2,zero,402e938 <strippath+0x9c>
 402e8c8:	8cc00007 	ldb	r19,0(r17)
 402e8cc:	9800021e 	bne	r19,zero,402e8d8 <strippath+0x3c>
 402e8d0:	00002006 	br	402e954 <strippath+0xb8>
   {
      while (*path == '/') path++;   /* strip leading slash */
 402e8d4:	84000044 	addi	r16,r16,1
 402e8d8:	80c00007 	ldb	r3,0(r16)
 402e8dc:	00800bc4 	movi	r2,47
 402e8e0:	18bffc26 	beq	r3,r2,402e8d4 <strippath+0x38>
         if (*path == 0)
 402e8e4:	18001426 	beq	r3,zero,402e938 <strippath+0x9c>
         break;
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
 402e8e8:	8009883a 	mov	r4,r16
 402e8ec:	01400bc4 	movi	r5,47
 402e8f0:	403098c0 	call	403098c <strchr>
      if (ptmp)
 402e8f4:	10002026 	beq	r2,zero,402e978 <strippath+0xdc>
         dirlen = ptmp - path;
 402e8f8:	1425c83a 	sub	r18,r2,r16
      else
         dirlen = strlen(path);

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
 402e8fc:	00800bc4 	movi	r2,47
 402e900:	9880041e 	bne	r19,r2,402e914 <strippath+0x78>
 402e904:	8c400044 	addi	r17,r17,1
 402e908:	88c00007 	ldb	r3,0(r17)
 402e90c:	00800bc4 	movi	r2,47
 402e910:	18bffc26 	beq	r3,r2,402e904 <strippath+0x68>
         if (strncmp(ntmp, path, dirlen) == 0)
 402e914:	8809883a 	mov	r4,r17
 402e918:	800b883a 	mov	r5,r16
 402e91c:	900d883a 	mov	r6,r18
 402e920:	4030af80 	call	4030af8 <strncmp>
 402e924:	10000b1e 	bne	r2,zero,402e954 <strippath+0xb8>
      {
         path += dirlen;
 402e928:	84a1883a 	add	r16,r16,r18
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   while (*path && *ntmp)
 402e92c:	80800007 	ldb	r2,0(r16)

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
         if (strncmp(ntmp, path, dirlen) == 0)
      {
         path += dirlen;
         ntmp += dirlen;
 402e930:	8ca3883a 	add	r17,r17,r18
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   while (*path && *ntmp)
 402e934:	103fe41e 	bne	r2,zero,402e8c8 <strippath+0x2c>
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
   {
      while (*ntmp == '\\' || *ntmp == '/')
 402e938:	88c00007 	ldb	r3,0(r17)
 402e93c:	00801704 	movi	r2,92
 402e940:	18800226 	beq	r3,r2,402e94c <strippath+0xb0>
 402e944:	00800bc4 	movi	r2,47
 402e948:	1880031e 	bne	r3,r2,402e958 <strippath+0xbc>
         ntmp++;
 402e94c:	8c400044 	addi	r17,r17,1
 402e950:	003ff906 	br	402e938 <strippath+0x9c>
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
   {
      while (*ntmp == '\\' || *ntmp == '/')
 402e954:	0023883a 	mov	r17,zero
         ntmp++;
      return ntmp;
   }
   else
      return NULL;
}
 402e958:	8805883a 	mov	r2,r17
 402e95c:	dfc00417 	ldw	ra,16(sp)
 402e960:	dcc00317 	ldw	r19,12(sp)
 402e964:	dc800217 	ldw	r18,8(sp)
 402e968:	dc400117 	ldw	r17,4(sp)
 402e96c:	dc000017 	ldw	r16,0(sp)
 402e970:	dec00504 	addi	sp,sp,20
 402e974:	f800283a 	ret
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
      if (ptmp)
         dirlen = ptmp - path;
      else
         dirlen = strlen(path);
 402e978:	8009883a 	mov	r4,r16
 402e97c:	400472c0 	call	400472c <strlen>
 402e980:	1025883a 	mov	r18,r2
 402e984:	003fdd06 	br	402e8fc <strippath+0x60>

0402e988 <vgetc_locked>:
 * RETURNS: 
 */

int
vgetc_locked(VFILE * vfd)
{
 402e988:	defffe04 	addi	sp,sp,-8
 402e98c:	dc000015 	stw	r16,0(sp)
 402e990:	dfc00115 	stw	ra,4(sp)
 402e994:	2021883a 	mov	r16,r4
   int   chr;

   if (isvfile_locked(vfd))
 402e998:	402e5d00 	call	402e5d0 <isvfile_locked>
 402e99c:	10001926 	beq	r2,zero,402ea04 <vgetc_locked+0x7c>
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
 402e9a0:	80c00117 	ldw	r3,4(r16)
#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
   return EOF;
 402e9a4:	017fffc4 	movi	r5,-1
   if (isvfile_locked(vfd))
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
 402e9a8:	18001126 	beq	r3,zero,402e9f0 <vgetc_locked+0x68>
         return EOF;
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 402e9ac:	18800a17 	ldw	r2,40(r3)
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
         return (vfp->r_fgetc(vfd));
 402e9b0:	8009883a 	mov	r4,r16
         return EOF;
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 402e9b4:	10000526 	beq	r2,zero,402e9cc <vgetc_locked+0x44>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
         return (vfp->r_fgetc(vfd));
 402e9b8:	10c00717 	ldw	r3,28(r2)
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
   return EOF;
#endif   /* HT_LOCALFS */
}
 402e9bc:	dfc00117 	ldw	ra,4(sp)
 402e9c0:	dc000017 	ldw	r16,0(sp)
 402e9c4:	dec00204 	addi	sp,sp,8

#ifdef HT_EXTDEV
      if (vfd->file->method)
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
         return (vfp->r_fgetc(vfd));
 402e9c8:	1800683a 	jmp	r3
#endif   /* HT_EXTDEV */

#ifdef HT_RWVFS
      /* a freshly created file might not have a data buffer associated
         with it yet */
      if (vfd->file->data == NULL)
 402e9cc:	19000617 	ldw	r4,24(r3)
 402e9d0:	20000726 	beq	r4,zero,402e9f0 <vgetc_locked+0x68>
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
 402e9d4:	18800817 	ldw	r2,32(r3)
 402e9d8:	80c00217 	ldw	r3,8(r16)
 402e9dc:	2085883a 	add	r2,r4,r2
            chr = EOF;
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
 402e9e0:	19000044 	addi	r4,r3,1
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
 402e9e4:	1880022e 	bgeu	r3,r2,402e9f0 <vgetc_locked+0x68>
            chr = EOF;
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
 402e9e8:	19400003 	ldbu	r5,0(r3)
 402e9ec:	81000215 	stw	r4,8(r16)
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
   return EOF;
#endif   /* HT_LOCALFS */
}
 402e9f0:	2805883a 	mov	r2,r5
 402e9f4:	dfc00117 	ldw	ra,4(sp)
 402e9f8:	dc000017 	ldw	r16,0(sp)
 402e9fc:	dec00204 	addi	sp,sp,8
 402ea00:	f800283a 	ret

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
 402ea04:	401c81c0 	call	401c81c <dtrap>
 402ea08:	017fffc4 	movi	r5,-1
   return EOF;
#endif   /* HT_LOCALFS */
}
 402ea0c:	2805883a 	mov	r2,r5
 402ea10:	dfc00117 	ldw	ra,4(sp)
 402ea14:	dc000017 	ldw	r16,0(sp)
 402ea18:	dec00204 	addi	sp,sp,8
 402ea1c:	f800283a 	ret

0402ea20 <vgetc>:
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
 402ea20:	defffd04 	addi	sp,sp,-12
 402ea24:	dc400015 	stw	r17,0(sp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 402ea28:	04400144 	movi	r17,5
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
 402ea2c:	dcc00115 	stw	r19,4(sp)
 402ea30:	2027883a 	mov	r19,r4
   int   rc;

   /* lock the VFS */
   vfs_lock();
 402ea34:	8809883a 	mov	r4,r17
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
 402ea38:	dfc00215 	stw	ra,8(sp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 402ea3c:	401c98c0 	call	401c98c <wait_app_sem>

   /* get the character */
   rc = vgetc_locked(vfd);
 402ea40:	9809883a 	mov	r4,r19
 402ea44:	402e9880 	call	402e988 <vgetc_locked>

   /* unlock the VFS */
   vfs_unlock();
 402ea48:	8809883a 	mov	r4,r17

   /* lock the VFS */
   vfs_lock();

   /* get the character */
   rc = vgetc_locked(vfd);
 402ea4c:	1027883a 	mov	r19,r2

   /* unlock the VFS */
   vfs_unlock();
 402ea50:	401c8cc0 	call	401c8cc <post_app_sem>
   return rc;
}
 402ea54:	9805883a 	mov	r2,r19
 402ea58:	dfc00217 	ldw	ra,8(sp)
 402ea5c:	dcc00117 	ldw	r19,4(sp)
 402ea60:	dc400017 	ldw	r17,0(sp)
 402ea64:	dec00304 	addi	sp,sp,12
 402ea68:	f800283a 	ret

0402ea6c <vfeof>:
 *
 * RETURNS: 1 if the file pointer is at EOF, otherwise 0
 */
 
int vfeof(VFILE * vfd)
{
 402ea6c:	deffff04 	addi	sp,sp,-4
 402ea70:	dfc00015 	stw	ra,0(sp)
   int c = 0;

#ifdef HT_LOCALFS
   return(feof((FILE*)vfd));
#endif
   if ((c = vgetc(vfd)) == EOF )
 402ea74:	402ea200 	call	402ea20 <vgetc>
   {
      return 1;
   }   
   return 0;
}
 402ea78:	10bfffe0 	cmpeqi	r2,r2,-1
 402ea7c:	dfc00017 	ldw	ra,0(sp)
 402ea80:	dec00104 	addi	sp,sp,4
 402ea84:	f800283a 	ret

0402ea88 <vfgets>:
   vfs_unlock();
   return(0);
}

char * vfgets(char * s, int lim, VFILE * fp) 
{
 402ea88:	defff904 	addi	sp,sp,-28
 402ea8c:	dd400515 	stw	r21,20(sp)
 402ea90:	dd000415 	stw	r20,16(sp)
 402ea94:	dcc00315 	stw	r19,12(sp)
 402ea98:	dc800215 	stw	r18,8(sp)
 402ea9c:	dc400115 	stw	r17,4(sp)
 402eaa0:	dc000015 	stw	r16,0(sp)
 402eaa4:	dfc00615 	stw	ra,24(sp)
 402eaa8:	2029883a 	mov	r20,r4
 402eaac:	2823883a 	mov	r17,r5
 402eab0:	3025883a 	mov	r18,r6
 402eab4:	0005883a 	mov	r2,zero
 402eab8:	2021883a 	mov	r16,r4
 402eabc:	057fffc4 	movi	r21,-1
 402eac0:	04c00284 	movi	r19,10
   int c;
   char * ret;

   ret = s;
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 402eac4:	8c7fffc4 	addi	r17,r17,-1
 402eac8:	9009883a 	mov	r4,r18
 402eacc:	0440130e 	bge	zero,r17,402eb1c <vfgets+0x94>
 402ead0:	402ea200 	call	402ea20 <vgetc>
      if (( *ret ++ = c) == '\n')
 402ead4:	10c03fcc 	andi	r3,r2,255
 402ead8:	18c0201c 	xori	r3,r3,128
 402eadc:	18ffe004 	addi	r3,r3,-128
{
   int c;
   char * ret;

   ret = s;
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 402eae0:	15401326 	beq	r2,r21,402eb30 <vfgets+0xa8>
      if (( *ret ++ = c) == '\n')
 402eae4:	80800005 	stb	r2,0(r16)
 402eae8:	84000044 	addi	r16,r16,1
 402eaec:	1cfff51e 	bne	r3,r19,402eac4 <vfgets+0x3c>
         break;
   *ret = '\0';
 402eaf0:	80000005 	stb	zero,0(r16)
   return ( c == EOF && ret == s) ? NULL : s;
}
 402eaf4:	a005883a 	mov	r2,r20
 402eaf8:	dfc00617 	ldw	ra,24(sp)
 402eafc:	dd400517 	ldw	r21,20(sp)
 402eb00:	dd000417 	ldw	r20,16(sp)
 402eb04:	dcc00317 	ldw	r19,12(sp)
 402eb08:	dc800217 	ldw	r18,8(sp)
 402eb0c:	dc400117 	ldw	r17,4(sp)
 402eb10:	dc000017 	ldw	r16,0(sp)
 402eb14:	dec00704 	addi	sp,sp,28
 402eb18:	f800283a 	ret

   ret = s;
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
      if (( *ret ++ = c) == '\n')
         break;
   *ret = '\0';
 402eb1c:	80000005 	stb	zero,0(r16)
   return ( c == EOF && ret == s) ? NULL : s;
 402eb20:	157ff41e 	bne	r2,r21,402eaf4 <vfgets+0x6c>
 402eb24:	a43ff31e 	bne	r20,r16,402eaf4 <vfgets+0x6c>
 402eb28:	0029883a 	mov	r20,zero
 402eb2c:	003ff106 	br	402eaf4 <vfgets+0x6c>

   ret = s;
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
      if (( *ret ++ = c) == '\n')
         break;
   *ret = '\0';
 402eb30:	80000005 	stb	zero,0(r16)
   return ( c == EOF && ret == s) ? NULL : s;
 402eb34:	a43fef1e 	bne	r20,r16,402eaf4 <vfgets+0x6c>
 402eb38:	003ffb06 	br	402eb28 <vfgets+0xa0>

0402eb3c <vfslookup_locked>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
 402eb3c:	defffd04 	addi	sp,sp,-12
 402eb40:	dc400115 	stw	r17,4(sp)
 402eb44:	dc000015 	stw	r16,0(sp)
 402eb48:	dfc00215 	stw	ra,8(sp)

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
 402eb4c:	20c00007 	ldb	r3,0(r4)
 402eb50:	04000bc4 	movi	r16,47
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
 402eb54:	2023883a 	mov	r17,r4

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
 402eb58:	1c000e26 	beq	r3,r16,402eb94 <vfslookup_locked+0x58>
 402eb5c:	00801704 	movi	r2,92
 402eb60:	18800c26 	beq	r3,r2,402eb94 <vfslookup_locked+0x58>
         name = cp ;
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
 402eb64:	8809883a 	mov	r4,r17
 402eb68:	01400fc4 	movi	r5,63
 402eb6c:	403098c0 	call	403098c <strchr>
 402eb70:	10000f26 	beq	r2,zero,402ebb0 <vfslookup_locked+0x74>
   {
      dtrap(); /* is this still allowed? */
 402eb74:	401c81c0 	call	401c81c <dtrap>
 402eb78:	0021883a 	mov	r16,zero
      if (strcmp(name, vp->name) == 0)
         return vp;
   }

   return NULL;   /* fall to here if not found in for loop */
}
 402eb7c:	8005883a 	mov	r2,r16
 402eb80:	dfc00217 	ldw	ra,8(sp)
 402eb84:	dc400117 	ldw	r17,4(sp)
 402eb88:	dc000017 	ldw	r16,0(sp)
 402eb8c:	dec00304 	addi	sp,sp,12
 402eb90:	f800283a 	ret
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
   {
      cp = strippath(name);
 402eb94:	402e89c0 	call	402e89c <strippath>

      if (!cp) /* strippath coundn't match our path */
 402eb98:	10001426 	beq	r2,zero,402ebec <vfslookup_locked+0xb0>
 402eb9c:	1023883a 	mov	r17,r2
         name = cp ;
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
 402eba0:	8809883a 	mov	r4,r17
 402eba4:	01400fc4 	movi	r5,63
 402eba8:	403098c0 	call	403098c <strchr>
 402ebac:	103ff11e 	bne	r2,zero,402eb74 <vfslookup_locked+0x38>
   {
      dtrap(); /* is this still allowed? */
      return NULL;
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 402ebb0:	d4286817 	ldw	r16,-24160(gp)
 402ebb4:	8000031e 	bne	r16,zero,402ebc4 <vfslookup_locked+0x88>
 402ebb8:	003ff006 	br	402eb7c <vfslookup_locked+0x40>
 402ebbc:	84000017 	ldw	r16,0(r16)
 402ebc0:	803fee26 	beq	r16,zero,402eb7c <vfslookup_locked+0x40>
   {
      if (strcmp(name, vp->name) == 0)
 402ebc4:	81400104 	addi	r5,r16,4
 402ebc8:	8809883a 	mov	r4,r17
 402ebcc:	400b39c0 	call	400b39c <strcmp>
 402ebd0:	103ffa1e 	bne	r2,zero,402ebbc <vfslookup_locked+0x80>
         return vp;
   }

   return NULL;   /* fall to here if not found in for loop */
}
 402ebd4:	8005883a 	mov	r2,r16
 402ebd8:	dfc00217 	ldw	ra,8(sp)
 402ebdc:	dc400117 	ldw	r17,4(sp)
 402ebe0:	dc000017 	ldw	r16,0(sp)
 402ebe4:	dec00304 	addi	sp,sp,12
 402ebe8:	f800283a 	ret
      cp = strippath(name);

      if (!cp) /* strippath coundn't match our path */
      {
         /* Files like "/hub47.gif" need to be taken care of */
         if (*name == '/' || *name == '\\')
 402ebec:	88c00007 	ldb	r3,0(r17)
 402ebf0:	1c000226 	beq	r3,r16,402ebfc <vfslookup_locked+0xc0>
 402ebf4:	00801704 	movi	r2,92
 402ebf8:	18bfda1e 	bne	r3,r2,402eb64 <vfslookup_locked+0x28>
            name++;
 402ebfc:	8c400044 	addi	r17,r17,1
 402ec00:	003fd806 	br	402eb64 <vfslookup_locked+0x28>

0402ec04 <vfslookup>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
 402ec04:	defffd04 	addi	sp,sp,-12
 402ec08:	dc400015 	stw	r17,0(sp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402ec0c:	04400144 	movi	r17,5
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
 402ec10:	dcc00115 	stw	r19,4(sp)
 402ec14:	2027883a 	mov	r19,r4
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402ec18:	8809883a 	mov	r4,r17
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
 402ec1c:	dfc00215 	stw	ra,8(sp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402ec20:	401c98c0 	call	401c98c <wait_app_sem>

   /* do the lookup */
   vp = vfslookup_locked(name);
 402ec24:	9809883a 	mov	r4,r19
 402ec28:	402eb3c0 	call	402eb3c <vfslookup_locked>

   /* unlock the VFS */
   vfs_unlock();
 402ec2c:	8809883a 	mov	r4,r17

   /* lock the VFS */
   vfs_lock();

   /* do the lookup */
   vp = vfslookup_locked(name);
 402ec30:	1027883a 	mov	r19,r2

   /* unlock the VFS */
   vfs_unlock();
 402ec34:	401c8cc0 	call	401c8cc <post_app_sem>
   return vp;
}
 402ec38:	9805883a 	mov	r2,r19
 402ec3c:	dfc00217 	ldw	ra,8(sp)
 402ec40:	dcc00117 	ldw	r19,4(sp)
 402ec44:	dc400017 	ldw	r17,0(sp)
 402ec48:	dec00304 	addi	sp,sp,12
 402ec4c:	f800283a 	ret

0402ec50 <vfread>:
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402ec50:	defffb04 	addi	sp,sp,-20
 402ec54:	dcc00315 	stw	r19,12(sp)
 402ec58:	dc000015 	stw	r16,0(sp)
 402ec5c:	2027883a 	mov	r19,r4
 402ec60:	3821883a 	mov	r16,r7
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 402ec64:	01000144 	movi	r4,5
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402ec68:	dc800215 	stw	r18,8(sp)
 402ec6c:	dc400115 	stw	r17,4(sp)
 402ec70:	dfc00415 	stw	ra,16(sp)
 402ec74:	2825883a 	mov	r18,r5
 402ec78:	3023883a 	mov	r17,r6
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 402ec7c:	401c98c0 	call	401c98c <wait_app_sem>

   /* if the file is in our list of open files */
   if (isvfile_locked(vfd))
 402ec80:	8009883a 	mov	r4,r16
 402ec84:	402e5d00 	call	402e5d0 <isvfile_locked>
 402ec88:	10002e26 	beq	r2,zero,402ed44 <vfread+0xf4>
   {

#ifdef HT_RWVFS
      /* the caller is trying to read a handle to a file that's been
         deleted, so he gets 0 data back */
      if (vfd->file == NULL)
 402ec8c:	80c00117 	ldw	r3,4(r16)
 402ec90:	18002c26 	beq	r3,zero,402ed44 <vfread+0xf4>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfd->file->method)
 402ec94:	18800a17 	ldw	r2,40(r3)
 402ec98:	10001126 	beq	r2,zero,402ece0 <vfread+0x90>
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
 402ec9c:	10c00317 	ldw	r3,12(r2)
 402eca0:	900b883a 	mov	r5,r18
 402eca4:	9809883a 	mov	r4,r19
 402eca8:	880d883a 	mov	r6,r17
 402ecac:	800f883a 	mov	r7,r16
 402ecb0:	183ee83a 	callr	r3
         vfs_unlock();
 402ecb4:	01000144 	movi	r4,5
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
 402ecb8:	1025883a 	mov	r18,r2
         vfs_unlock();
 402ecbc:	401c8cc0 	call	401c8cc <post_app_sem>
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
#endif   /* HT_LOCALFS */
}
 402ecc0:	9005883a 	mov	r2,r18
 402ecc4:	dfc00417 	ldw	ra,16(sp)
 402ecc8:	dcc00317 	ldw	r19,12(sp)
 402eccc:	dc800217 	ldw	r18,8(sp)
 402ecd0:	dc400117 	ldw	r17,4(sp)
 402ecd4:	dc000017 	ldw	r16,0(sp)
 402ecd8:	dec00504 	addi	sp,sp,20
 402ecdc:	f800283a 	ret
#ifdef HT_RWVFS
      /* the data pointer can be NULL if somebody tries to read from 
       * a freshly created file, in which case there is no data in 
       * the file, so return 0
       */
      if (!(vfd->file->data))
 402ece0:	18800617 	ldw	r2,24(r3)
 402ece4:	10001726 	beq	r2,zero,402ed44 <vfread+0xf4>
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
 402ece8:	81400217 	ldw	r5,8(r16)
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
      }
#endif   /* HT_RWVFS */

      bcount = items * size;  /* number of bytes to transfer */
 402ecec:	8ca3383a 	mul	r17,r17,r18
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
 402ecf0:	19000817 	ldw	r4,32(r3)
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
 402ecf4:	2887c83a 	sub	r3,r5,r2

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
 402ecf8:	88c5883a 	add	r2,r17,r3
 402ecfc:	20801c36 	bltu	r4,r2,402ed70 <vfread+0x120>
            bcount = (unsigned)(vfd->file->comp_size - location);
         MEMCPY(buf, vfd->cmploc, bcount);
 402ed00:	9809883a 	mov	r4,r19
 402ed04:	880d883a 	mov	r6,r17
 402ed08:	40096480 	call	4009648 <memcpy>
         vfd->cmploc += bcount;
 402ed0c:	80c00217 	ldw	r3,8(r16)
      }
      vfs_unlock();
 402ed10:	01000144 	movi	r4,5
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
 402ed14:	8ca5203a 	divu	r18,r17,r18
         unsigned location = vfd->cmploc - vfd->file->data;

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
            bcount = (unsigned)(vfd->file->comp_size - location);
         MEMCPY(buf, vfd->cmploc, bcount);
         vfd->cmploc += bcount;
 402ed18:	1c47883a 	add	r3,r3,r17
 402ed1c:	80c00215 	stw	r3,8(r16)
      }
      vfs_unlock();
 402ed20:	401c8cc0 	call	401c8cc <post_app_sem>
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
#endif   /* HT_LOCALFS */
}
 402ed24:	9005883a 	mov	r2,r18
 402ed28:	dfc00417 	ldw	ra,16(sp)
 402ed2c:	dcc00317 	ldw	r19,12(sp)
 402ed30:	dc800217 	ldw	r18,8(sp)
 402ed34:	dc400117 	ldw	r17,4(sp)
 402ed38:	dc000017 	ldw	r16,0(sp)
 402ed3c:	dec00504 	addi	sp,sp,20
 402ed40:	f800283a 	ret
      vfs_unlock();
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
   }

   vfs_unlock();
 402ed44:	01000144 	movi	r4,5
 402ed48:	401c8cc0 	call	401c8cc <post_app_sem>
 402ed4c:	0025883a 	mov	r18,zero
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
#endif   /* HT_LOCALFS */
}
 402ed50:	9005883a 	mov	r2,r18
 402ed54:	dfc00417 	ldw	ra,16(sp)
 402ed58:	dcc00317 	ldw	r19,12(sp)
 402ed5c:	dc800217 	ldw	r18,8(sp)
 402ed60:	dc400117 	ldw	r17,4(sp)
 402ed64:	dc000017 	ldw	r16,0(sp)
 402ed68:	dec00504 	addi	sp,sp,20
 402ed6c:	f800283a 	ret
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
            bcount = (unsigned)(vfd->file->comp_size - location);
 402ed70:	20e3c83a 	sub	r17,r4,r3
 402ed74:	003fe206 	br	402ed00 <vfread+0xb0>

0402ed78 <vf_free_buffer>:
 *
 * RETURNS: 
 */

void vf_free_buffer(unsigned char * buffer, unsigned long size)
{
 402ed78:	defffe04 	addi	sp,sp,-8
 402ed7c:	dc000015 	stw	r16,0(sp)
 402ed80:	dfc00115 	stw	ra,4(sp)
 402ed84:	2821883a 	mov	r16,r5
   /* free the buffer */
   if (buffer)
 402ed88:	20000126 	beq	r4,zero,402ed90 <vf_free_buffer+0x18>
      npfree(buffer);
 402ed8c:	401cce40 	call	401cce4 <npfree>

   /* and subtract its size from the total buffer space count */
   vfs_total_rw_space -= size;
 402ed90:	d0a86c17 	ldw	r2,-24144(gp)
 402ed94:	1405c83a 	sub	r2,r2,r16
 402ed98:	d0a86c15 	stw	r2,-24144(gp)
}
 402ed9c:	dfc00117 	ldw	ra,4(sp)
 402eda0:	dc000017 	ldw	r16,0(sp)
 402eda4:	dec00204 	addi	sp,sp,8
 402eda8:	f800283a 	ret

0402edac <vunlink>:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
int
vunlink(const char * const_name)
{
 402edac:	defffa04 	addi	sp,sp,-24
 402edb0:	dfc00515 	stw	ra,20(sp)
 402edb4:	dc400115 	stw	r17,4(sp)
 402edb8:	dc000015 	stw	r16,0(sp)
 402edbc:	dd000415 	stw	r20,16(sp)
 402edc0:	dcc00315 	stw	r19,12(sp)
 402edc4:	dc800215 	stw	r18,8(sp)
 402edc8:	2023883a 	mov	r17,r4
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name));
 402edcc:	400472c0 	call	400472c <strlen>
 402edd0:	1009883a 	mov	r4,r2
 402edd4:	4001f4c0 	call	4001f4c <malloc>
   strcpy(name, const_name);
 402edd8:	880b883a 	mov	r5,r17
 402eddc:	1009883a 	mov	r4,r2
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name));
 402ede0:	1021883a 	mov	r16,r2
   strcpy(name, const_name);
 402ede4:	4030a6c0 	call	4030a6c <strcpy>
   if (vfs_log_file_name)
      dprintf("vunlink() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402ede8:	01000144 	movi	r4,5
 402edec:	401c98c0 	call	401c98c <wait_app_sem>

   /* see if the converted name is one of the one's in our list */
   /* if it isn't */
   if ((vfp = vfslookup_locked(name)) == NULL)
 402edf0:	8009883a 	mov	r4,r16
 402edf4:	402eb3c0 	call	402eb3c <vfslookup_locked>
 402edf8:	1023883a 	mov	r17,r2
 402edfc:	10000a26 	beq	r2,zero,402ee28 <vunlink+0x7c>
    */
   vfnext = vfp->next;

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 402ee00:	d0e86817 	ldw	r3,-24160(gp)
#ifdef   HT_RWVFS
   /* save the next link pointer since in one path through the code, 
    * the vfs_file structure gets freed before its unlinked from the 
    * list
    */
   vfnext = vfp->next;
 402ee04:	15000017 	ldw	r20,0(r2)

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 402ee08:	18000626 	beq	r3,zero,402ee24 <vunlink+0x78>
   {
      if (vtmp == vfp)
 402ee0c:	10c0031e 	bne	r2,r3,402ee1c <vunlink+0x70>
 402ee10:	00003c06 	br	402ef04 <vunlink+0x158>
 402ee14:	88801226 	beq	r17,r2,402ee60 <vunlink+0xb4>
         break;
 402ee18:	1007883a 	mov	r3,r2
    */
   vfnext = vfp->next;

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 402ee1c:	18800017 	ldw	r2,0(r3)
 402ee20:	103ffc1e 	bne	r2,zero,402ee14 <vunlink+0x68>

   /* this shouldn't happen since vfslookup_locked() already searched
      the list, but just in case */
   if (vtmp == NULL)
   {
      dtrap();
 402ee24:	401c81c0 	call	401c81c <dtrap>
      vfs_unlock();
 402ee28:	01000144 	movi	r4,5
 402ee2c:	401c8cc0 	call	401c8cc <post_app_sem>
      free(name);
 402ee30:	8009883a 	mov	r4,r16
 402ee34:	4001f380 	call	4001f38 <free>
 402ee38:	04ffffc4 	movi	r19,-1

#endif   /* HT_RWVFS */
   vfs_unlock();
   free(name);
   return rc;
}
 402ee3c:	9805883a 	mov	r2,r19
 402ee40:	dfc00517 	ldw	ra,20(sp)
 402ee44:	dd000417 	ldw	r20,16(sp)
 402ee48:	dcc00317 	ldw	r19,12(sp)
 402ee4c:	dc800217 	ldw	r18,8(sp)
 402ee50:	dc400117 	ldw	r17,4(sp)
 402ee54:	dc000017 	ldw	r16,0(sp)
 402ee58:	dec00604 	addi	sp,sp,24
 402ee5c:	f800283a 	ret
   if (vtmp == NULL)
   {
      dtrap();
      vfs_unlock();
      free(name);
      return -1;
 402ee60:	1825883a 	mov	r18,r3
   while (1)
   {

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 402ee64:	88800a17 	ldw	r2,40(r17)
 402ee68:	10000f26 	beq	r2,zero,402eea8 <vunlink+0xfc>
      {
         /* call that file system's unlink() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfp->method);

         rc = vfs->r_unlink(name);
 402ee6c:	10c00817 	ldw	r3,32(r2)
 402ee70:	8009883a 	mov	r4,r16
 402ee74:	183ee83a 	callr	r3
 402ee78:	1027883a 	mov	r19,r2

      break;
   }

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
 402ee7c:	90001826 	beq	r18,zero,402eee0 <vunlink+0x134>
      vflast->next = vfnext;
 402ee80:	95000015 	stw	r20,0(r18)
   else
      vfsfiles = vfnext;

   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);
 402ee84:	8809883a 	mov	r4,r17
 402ee88:	402e5a40 	call	402e5a4 <vunlink_flag_open_files>

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
 402ee8c:	00800044 	movi	r2,1

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
 402ee90:	01000144 	movi	r4,5
   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
 402ee94:	d0a86a15 	stw	r2,-24152(gp)

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
 402ee98:	401c8cc0 	call	401c8cc <post_app_sem>
   free(name);
 402ee9c:	8009883a 	mov	r4,r16
 402eea0:	4001f380 	call	4001f38 <free>
 402eea4:	003fe506 	br	402ee3c <vunlink+0x90>
         break;   /* break to list deletion code after end of phoney loop */
      }
#endif   /* HT_EXTDEV */

      /* if the file is not write enabled, return error condition */
      if (!(vfp->flags & VF_WRITE))
 402eea8:	88c0058b 	ldhu	r3,22(r17)
 402eeac:	1880080c 	andi	r2,r3,32
 402eeb0:	103fdd26 	beq	r2,zero,402ee28 <vunlink+0x7c>
         return -1;
      }

      /* if the data buffer containing the file's data was dynamically
         allocated and is not null */
      if ((vfp->flags & VF_DYNAMICDATA) && (vfp->data))
 402eeb4:	1880200c 	andi	r2,r3,128
 402eeb8:	10000526 	beq	r2,zero,402eed0 <vunlink+0x124>
 402eebc:	89000617 	ldw	r4,24(r17)
 402eec0:	20000326 	beq	r4,zero,402eed0 <vunlink+0x124>
      {
         /* free the buffer */
         vf_free_buffer(vfp->data,vfp->buf_size);
 402eec4:	89400917 	ldw	r5,36(r17)
 402eec8:	402ed780 	call	402ed78 <vf_free_buffer>
 402eecc:	88c0058b 	ldhu	r3,22(r17)
      }

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
 402eed0:	1880100c 	andi	r2,r3,64
 402eed4:	1000041e 	bne	r2,zero,402eee8 <vunlink+0x13c>
 402eed8:	0027883a 	mov	r19,zero
 402eedc:	003fe706 	br	402ee7c <vunlink+0xd0>

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
      vflast->next = vfnext;
   else
      vfsfiles = vfnext;
 402eee0:	d5286815 	stw	r20,-24160(gp)
 402eee4:	003fe706 	br	402ee84 <vunlink+0xd8>

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
 402eee8:	d0a86d17 	ldw	r2,-24140(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
 402eeec:	8809883a 	mov	r4,r17
 402eef0:	0027883a 	mov	r19,zero

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
 402eef4:	10bfffc4 	addi	r2,r2,-1
 402eef8:	d0a86d15 	stw	r2,-24140(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
 402eefc:	401cce40 	call	401cce4 <npfree>
 402ef00:	003fde06 	br	402ee7c <vunlink+0xd0>

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
   {
      if (vtmp == vfp)
 402ef04:	0025883a 	mov	r18,zero
 402ef08:	003fd606 	br	402ee64 <vunlink+0xb8>

0402ef0c <vfflush>:
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
 402ef0c:	defffe04 	addi	sp,sp,-8
 402ef10:	dc400015 	stw	r17,0(sp)
   vfs_lock();
 402ef14:	04400144 	movi	r17,5
 402ef18:	8809883a 	mov	r4,r17
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
 402ef1c:	dfc00115 	stw	ra,4(sp)
   vfs_lock();
 402ef20:	401c98c0 	call	401c98c <wait_app_sem>

   printf("vfflush(): This function needs to be implemented\n");
 402ef24:	010100f4 	movhi	r4,1027
 402ef28:	21184c04 	addi	r4,r4,24880
 402ef2c:	4002fec0 	call	4002fec <puts>

   vfs_unlock();
 402ef30:	8809883a 	mov	r4,r17
 402ef34:	401c8cc0 	call	401c8cc <post_app_sem>
   return(0);
}
 402ef38:	0005883a 	mov	r2,zero
 402ef3c:	dfc00117 	ldw	ra,4(sp)
 402ef40:	dc400017 	ldw	r17,0(sp)
 402ef44:	dec00204 	addi	sp,sp,8
 402ef48:	f800283a 	ret

0402ef4c <vf_alloc_buffer>:
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
 402ef4c:	d0a86c17 	ldw	r2,-24144(gp)
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
 402ef50:	defffe04 	addi	sp,sp,-8
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
 402ef54:	00ffffd4 	movui	r3,65535
 402ef58:	2085883a 	add	r2,r4,r2
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
 402ef5c:	dc000015 	stw	r16,0(sp)
 402ef60:	dfc00115 	stw	ra,4(sp)
 402ef64:	2021883a 	mov	r16,r4
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
 402ef68:	000b883a 	mov	r5,zero
 402ef6c:	1880052e 	bgeu	r3,r2,402ef84 <vf_alloc_buffer+0x38>
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
   }

   return buffer;
}
 402ef70:	2805883a 	mov	r2,r5
 402ef74:	dfc00117 	ldw	ra,4(sp)
 402ef78:	dc000017 	ldw	r16,0(sp)
 402ef7c:	dec00204 	addi	sp,sp,8
 402ef80:	f800283a 	ret
      if (size & mem_mask)
         return NULL;
   }

   /* try to allocate a buffer of the requested size */
   buffer = (unsigned char *) npalloc((unsigned int) size);
 402ef84:	401cdc80 	call	401cdc8 <npalloc>
 402ef88:	100b883a 	mov	r5,r2

   /* if the allocation succeeded */
   if (buffer)
 402ef8c:	103ff826 	beq	r2,zero,402ef70 <vf_alloc_buffer+0x24>
   {
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
 402ef90:	d0a86c17 	ldw	r2,-24144(gp)
 402ef94:	1405883a 	add	r2,r2,r16
 402ef98:	d0a86c15 	stw	r2,-24144(gp)
   }

   return buffer;
}
 402ef9c:	2805883a 	mov	r2,r5
 402efa0:	dfc00117 	ldw	ra,4(sp)
 402efa4:	dc000017 	ldw	r16,0(sp)
 402efa8:	dec00204 	addi	sp,sp,8
 402efac:	f800283a 	ret

0402efb0 <vfwrite_locked>:
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402efb0:	defff604 	addi	sp,sp,-40
 402efb4:	dcc00315 	stw	r19,12(sp)
 402efb8:	2027883a 	mov	r19,r4
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
 402efbc:	3809883a 	mov	r4,r7
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402efc0:	dd000415 	stw	r20,16(sp)
 402efc4:	dc800215 	stw	r18,8(sp)
 402efc8:	dc000015 	stw	r16,0(sp)
 402efcc:	dfc00915 	stw	ra,36(sp)
 402efd0:	df000815 	stw	fp,32(sp)
 402efd4:	ddc00715 	stw	r23,28(sp)
 402efd8:	dd800615 	stw	r22,24(sp)
 402efdc:	dd400515 	stw	r21,20(sp)
 402efe0:	dc400115 	stw	r17,4(sp)
 402efe4:	3821883a 	mov	r16,r7
 402efe8:	2825883a 	mov	r18,r5
 402efec:	3029883a 	mov	r20,r6
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
 402eff0:	402e5d00 	call	402e5d0 <isvfile_locked>
 402eff4:	10004626 	beq	r2,zero,402f110 <vfwrite_locked+0x160>
   }
   /* this file is in our list of files */

#ifdef HT_EXTDEV
   /* if the file was created by an external file system */
   if (vfd->file->method)
 402eff8:	84400117 	ldw	r17,4(r16)
 402effc:	88800a17 	ldw	r2,40(r17)
 402f000:	10001126 	beq	r2,zero,402f048 <vfwrite_locked+0x98>
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
 402f004:	10c00417 	ldw	r3,16(r2)
 402f008:	9809883a 	mov	r4,r19
 402f00c:	900b883a 	mov	r5,r18
 402f010:	a00d883a 	mov	r6,r20
 402f014:	800f883a 	mov	r7,r16

   /* return the number of "items" written */
   return items;

#endif   /* HT_RWVFS */
}
 402f018:	dfc00917 	ldw	ra,36(sp)
 402f01c:	df000817 	ldw	fp,32(sp)
 402f020:	ddc00717 	ldw	r23,28(sp)
 402f024:	dd800617 	ldw	r22,24(sp)
 402f028:	dd400517 	ldw	r21,20(sp)
 402f02c:	dd000417 	ldw	r20,16(sp)
 402f030:	dcc00317 	ldw	r19,12(sp)
 402f034:	dc800217 	ldw	r18,8(sp)
 402f038:	dc400117 	ldw	r17,4(sp)
 402f03c:	dc000017 	ldw	r16,0(sp)
 402f040:	dec00a04 	addi	sp,sp,40
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
 402f044:	1800683a 	jmp	r3
   }

   vfp = vfd->file;

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
 402f048:	8880058b 	ldhu	r2,22(r17)
 402f04c:	1080080c 	andi	r2,r2,32
 402f050:	10003d26 	beq	r2,zero,402f148 <vfwrite_locked+0x198>
      vfd->error = ENP_FILEIO;
      return 0;
   }

   /* compute number of bytes to write */
   bcount = size * items;
 402f054:	9525383a 	mul	r18,r18,r20

   /* get rid of this degenerate case up front */
   if (bcount == 0)
 402f058:	90004226 	beq	r18,zero,402f164 <vfwrite_locked+0x1b4>
   {
      return 0;
   }

   /* if the file currently has no data buffer */
   if (vfp->data == NULL)
 402f05c:	88c00617 	ldw	r3,24(r17)
 402f060:	18004626 	beq	r3,zero,402f17c <vfwrite_locked+0x1cc>
      /* return the number of "items" written */
      return items;
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
 402f064:	81000217 	ldw	r4,8(r16)

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
 402f068:	88800917 	ldw	r2,36(r17)
      /* return the number of "items" written */
      return items;
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
 402f06c:	20efc83a 	sub	r23,r4,r3

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
 402f070:	95ed883a 	add	r22,r18,r23
 402f074:	1580162e 	bgeu	r2,r22,402f0d0 <vfwrite_locked+0x120>
   {
      /* compute the size of a new buffer to hold the data */
      unsigned long new_buf_size = VFS_ROUND_UP(current_offset + bcount);
 402f078:	b0bfffc4 	addi	r2,r22,-1
 402f07c:	1004d37a 	srli	r2,r2,13
 402f080:	1004937a 	slli	r2,r2,13
 402f084:	17080004 	addi	fp,r2,8192
      unsigned char *new_buffer;

      /* allocate a new buffer */
      new_buffer = vf_alloc_buffer(new_buf_size);
 402f088:	e009883a 	mov	r4,fp
 402f08c:	402ef4c0 	call	402ef4c <vf_alloc_buffer>
 402f090:	102b883a 	mov	r21,r2

      /* check for allocation failure */
      if (!new_buffer)
 402f094:	10003526 	beq	r2,zero,402f16c <vfwrite_locked+0x1bc>
         vfd->error = ENP_NOMEM;
         return 0;
      }

      /* copy the old buffer contents to the new buffer */
      MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 402f098:	89400617 	ldw	r5,24(r17)
 402f09c:	89800817 	ldw	r6,32(r17)
 402f0a0:	1009883a 	mov	r4,r2
 402f0a4:	40096480 	call	4009648 <memcpy>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
 402f0a8:	88c0058b 	ldhu	r3,22(r17)
 402f0ac:	18c0200c 	andi	r3,r3,128
 402f0b0:	18004a1e 	bne	r3,zero,402f1dc <vfwrite_locked+0x22c>

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 402f0b4:	8880058b 	ldhu	r2,22(r17)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
 402f0b8:	adc9883a 	add	r4,r21,r23
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
      }

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;
 402f0bc:	8d400615 	stw	r21,24(r17)

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 402f0c0:	10802014 	ori	r2,r2,128

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;
 402f0c4:	8f000915 	stw	fp,36(r17)

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 402f0c8:	8880058d 	sth	r2,22(r17)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
 402f0cc:	81000215 	stw	r4,8(r16)
   }

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);
 402f0d0:	900d883a 	mov	r6,r18
 402f0d4:	980b883a 	mov	r5,r19
 402f0d8:	40096480 	call	4009648 <memcpy>

   /* update the current file pointer */
   vfd->cmploc += bcount;
 402f0dc:	80c00217 	ldw	r3,8(r16)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
 402f0e0:	89800817 	ldw	r6,32(r17)

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);

   /* update the current file pointer */
   vfd->cmploc += bcount;
 402f0e4:	1c87883a 	add	r3,r3,r18
 402f0e8:	80c00215 	stw	r3,8(r16)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
 402f0ec:	35801a36 	bltu	r6,r22,402f158 <vfwrite_locked+0x1a8>
   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;
 402f0f0:	8880058b 	ldhu	r2,22(r17)

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
 402f0f4:	00ffff84 	movi	r3,-2
      vfp->comp_size = current_offset + bcount;
   }

   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;
 402f0f8:	89800715 	stw	r6,28(r17)

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
 402f0fc:	10c4703a 	and	r2,r2,r3
 402f100:	10808014 	ori	r2,r2,512

   /* return the number of "items" written */
   return items;
 402f104:	a007883a 	mov	r3,r20

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
 402f108:	8880058d 	sth	r2,22(r17)
 402f10c:	00000106 	br	402f114 <vfwrite_locked+0x164>
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
 402f110:	00c00244 	movi	r3,9

   /* return the number of "items" written */
   return items;

#endif   /* HT_RWVFS */
}
 402f114:	1805883a 	mov	r2,r3
 402f118:	dfc00917 	ldw	ra,36(sp)
 402f11c:	df000817 	ldw	fp,32(sp)
 402f120:	ddc00717 	ldw	r23,28(sp)
 402f124:	dd800617 	ldw	r22,24(sp)
 402f128:	dd400517 	ldw	r21,20(sp)
 402f12c:	dd000417 	ldw	r20,16(sp)
 402f130:	dcc00317 	ldw	r19,12(sp)
 402f134:	dc800217 	ldw	r18,8(sp)
 402f138:	dc400117 	ldw	r17,4(sp)
 402f13c:	dc000017 	ldw	r16,0(sp)
 402f140:	dec00a04 	addi	sp,sp,40
 402f144:	f800283a 	ret
   vfp = vfd->file;

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
   {
      vfd->error = ENP_FILEIO;
 402f148:	00bff984 	movi	r2,-26
 402f14c:	0007883a 	mov	r3,zero
 402f150:	80800415 	stw	r2,16(r16)
 402f154:	003fef06 	br	402f114 <vfwrite_locked+0x164>

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
   {
      /* update the "compressed" file size */
      vfp->comp_size = current_offset + bcount;
 402f158:	b00d883a 	mov	r6,r22
 402f15c:	8d800815 	stw	r22,32(r17)
 402f160:	003fe306 	br	402f0f0 <vfwrite_locked+0x140>

   /* compute number of bytes to write */
   bcount = size * items;

   /* get rid of this degenerate case up front */
   if (bcount == 0)
 402f164:	0007883a 	mov	r3,zero
 402f168:	003fea06 	br	402f114 <vfwrite_locked+0x164>
      new_buffer = vf_alloc_buffer(new_buf_size);

      /* check for allocation failure */
      if (!new_buffer)
      {
         vfd->error = ENP_NOMEM;
 402f16c:	00bffb04 	movi	r2,-20
 402f170:	0007883a 	mov	r3,zero
 402f174:	80800415 	stw	r2,16(r16)
 402f178:	003fe606 	br	402f114 <vfwrite_locked+0x164>
   if (vfp->data == NULL)
   {
      /* compute the size of the buffer to be created */
      /* we round up the size of the data to be written so we dont have
         the overhead of a memory allocation on every write */
      unsigned long buf_size = VFS_ROUND_UP((unsigned long)bcount);
 402f17c:	90bfffc4 	addi	r2,r18,-1
 402f180:	1004d37a 	srli	r2,r2,13
 402f184:	1004937a 	slli	r2,r2,13
 402f188:	15480004 	addi	r21,r2,8192

      /* allocate a buffer of that size */
      vfp->data = vf_alloc_buffer(buf_size);
 402f18c:	a809883a 	mov	r4,r21
 402f190:	402ef4c0 	call	402ef4c <vf_alloc_buffer>
 402f194:	88800615 	stw	r2,24(r17)

      /* if the allocation failed */
      if (!(vfp->data))
 402f198:	103ff426 	beq	r2,zero,402f16c <vfwrite_locked+0x1bc>
      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;

      /* turn off the compression flag */
      vfp->flags &= ~VF_HTMLCOMPRESSED;
 402f19c:	88c0058b 	ldhu	r3,22(r17)
      vfp->real_size = bcount;
      vfp->comp_size = bcount;

      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;
 402f1a0:	1489883a 	add	r4,r2,r18
 402f1a4:	81000215 	stw	r4,8(r16)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 402f1a8:	00bfff84 	movi	r2,-2
 402f1ac:	1886703a 	and	r3,r3,r2

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
 402f1b0:	89000617 	ldw	r4,24(r17)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 402f1b4:	18c0a014 	ori	r3,r3,640
 402f1b8:	88c0058d 	sth	r3,22(r17)
      vfp->buf_size = buf_size;

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
      vfp->comp_size = bcount;
 402f1bc:	900d883a 	mov	r6,r18
         vfd->error = ENP_NOMEM;
         return 0;
      }

      /* store the size of the allocated buffer */
      vfp->buf_size = buf_size;
 402f1c0:	8d400915 	stw	r21,36(r17)

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
 402f1c4:	8c800715 	stw	r18,28(r17)
      vfp->comp_size = bcount;
 402f1c8:	8c800815 	stw	r18,32(r17)

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
 402f1cc:	980b883a 	mov	r5,r19
 402f1d0:	40096480 	call	4009648 <memcpy>

      /* return the number of "items" written */
      return items;
 402f1d4:	a007883a 	mov	r3,r20
 402f1d8:	003fce06 	br	402f114 <vfwrite_locked+0x164>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
      {
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
 402f1dc:	89000617 	ldw	r4,24(r17)
 402f1e0:	89400917 	ldw	r5,36(r17)
 402f1e4:	402ed780 	call	402ed78 <vf_free_buffer>
 402f1e8:	003fb206 	br	402f0b4 <vfwrite_locked+0x104>

0402f1ec <vfwrite>:
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402f1ec:	defffa04 	addi	sp,sp,-24
 402f1f0:	dc000015 	stw	r16,0(sp)
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 402f1f4:	04000144 	movi	r16,5
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402f1f8:	dc400115 	stw	r17,4(sp)
 402f1fc:	2023883a 	mov	r17,r4
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 402f200:	8009883a 	mov	r4,r16
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 402f204:	dfc00515 	stw	ra,20(sp)
 402f208:	ddc00415 	stw	r23,16(sp)
 402f20c:	dd400315 	stw	r21,12(sp)
 402f210:	dcc00215 	stw	r19,8(sp)
 402f214:	302b883a 	mov	r21,r6
 402f218:	2827883a 	mov	r19,r5
 402f21c:	382f883a 	mov	r23,r7
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 402f220:	401c98c0 	call	401c98c <wait_app_sem>

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
 402f224:	980b883a 	mov	r5,r19
 402f228:	8809883a 	mov	r4,r17
 402f22c:	a80d883a 	mov	r6,r21
 402f230:	b80f883a 	mov	r7,r23
 402f234:	402efb00 	call	402efb0 <vfwrite_locked>

   /* unlock the VFS */
   vfs_unlock();
 402f238:	8009883a 	mov	r4,r16

   /* lock the VFS */
   vfs_lock();

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
 402f23c:	1023883a 	mov	r17,r2

   /* unlock the VFS */
   vfs_unlock();
 402f240:	401c8cc0 	call	401c8cc <post_app_sem>

   IN_PROFILER(PF_FS, PF_EXIT);

   return rc;
}
 402f244:	8805883a 	mov	r2,r17
 402f248:	dfc00517 	ldw	ra,20(sp)
 402f24c:	ddc00417 	ldw	r23,16(sp)
 402f250:	dd400317 	ldw	r21,12(sp)
 402f254:	dcc00217 	ldw	r19,8(sp)
 402f258:	dc400117 	ldw	r17,4(sp)
 402f25c:	dc000017 	ldw	r16,0(sp)
 402f260:	dec00604 	addi	sp,sp,24
 402f264:	f800283a 	ret

0402f268 <vfclose_locked>:

   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
 402f268:	d0e86717 	ldw	r3,-24164(gp)
 * RETURNS: 
 */

void 
vfclose_locked(VFILE * vfd)
{
 402f26c:	defffb04 	addi	sp,sp,-20
 402f270:	dc000015 	stw	r16,0(sp)
 402f274:	dfc00415 	stw	ra,16(sp)
 402f278:	dcc00315 	stw	r19,12(sp)
 402f27c:	dc800215 	stw	r18,8(sp)
 402f280:	dc400115 	stw	r17,4(sp)
 402f284:	2021883a 	mov	r16,r4
   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
 402f288:	18004326 	beq	r3,zero,402f398 <vfclose_locked+0x130>
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
 402f28c:	1900031e 	bne	r3,r4,402f29c <vfclose_locked+0x34>
 402f290:	00000d06 	br	402f2c8 <vfclose_locked+0x60>
 402f294:	80802326 	beq	r16,r2,402f324 <vfclose_locked+0xbc>
 402f298:	1007883a 	mov	r3,r2
         break;

      /* bump the next and previous pointers along to try the next one */
      vlast = vtmp;
      vtmp = vtmp->next;
 402f29c:	18800017 	ldw	r2,0(r3)
   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
 402f2a0:	103ffc1e 	bne	r2,zero,402f294 <vfclose_locked+0x2c>
 402f2a4:	1825883a 	mov	r18,r3
      vlast = vtmp;
      vtmp = vtmp->next;
   }

   /* if the passed in handle was not in the list we maintain */
   if (vfd != vtmp)
 402f2a8:	80000826 	beq	r16,zero,402f2cc <vfclose_locked+0x64>
   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
   /* decrement the number of open files */
   vfs_open_files--;
   return;
}
 402f2ac:	dfc00417 	ldw	ra,16(sp)
 402f2b0:	dcc00317 	ldw	r19,12(sp)
 402f2b4:	dc800217 	ldw	r18,8(sp)
 402f2b8:	dc400117 	ldw	r17,4(sp)
 402f2bc:	dc000017 	ldw	r16,0(sp)
 402f2c0:	dec00504 	addi	sp,sp,20
 402f2c4:	f800283a 	ret
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
 402f2c8:	0025883a 	mov	r18,zero

   /* this not really a forever loop. it exists so we can break easily
      and deal with all the ifdefs */
   while (1)
   {
      struct vfs_file * vfp   =  vfd->file;
 402f2cc:	84400117 	ldw	r17,4(r16)
      /* vfd->file will be null if somebody unlinked the file after
       * this handle was created to point to it. if the file itself 
       * is gone there is nothing left to do, so break to list 
       * deletion code at bottom of loop
       */
      if (vfp == NULL)
 402f2d0:	88000526 	beq	r17,zero,402f2e8 <vfclose_locked+0x80>
         break;
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 402f2d4:	88800a17 	ldw	r2,40(r17)
 402f2d8:	10001426 	beq	r2,zero,402f32c <vfclose_locked+0xc4>
      {
         /* call that file system's fclose() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)(vfp->method);

         vfs->r_fclose(vfd);
 402f2dc:	10800217 	ldw	r2,8(r2)
 402f2e0:	8009883a 	mov	r4,r16
 402f2e4:	103ee83a 	callr	r2
      /* break to list deletion code below */
      break;

   }

   if (vlast)  /* unlink from list of open files */
 402f2e8:	90002826 	beq	r18,zero,402f38c <vfclose_locked+0x124>
      vlast->next = vtmp->next;
 402f2ec:	80800017 	ldw	r2,0(r16)
 402f2f0:	90800015 	stw	r2,0(r18)
   else
      vfiles = vtmp->next;

   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
 402f2f4:	8009883a 	mov	r4,r16
 402f2f8:	401cce40 	call	401cce4 <npfree>
   /* decrement the number of open files */
   vfs_open_files--;
 402f2fc:	d0a86b17 	ldw	r2,-24148(gp)
 402f300:	10bfffc4 	addi	r2,r2,-1
 402f304:	d0a86b15 	stw	r2,-24148(gp)
   return;
}
 402f308:	dfc00417 	ldw	ra,16(sp)
 402f30c:	dcc00317 	ldw	r19,12(sp)
 402f310:	dc800217 	ldw	r18,8(sp)
 402f314:	dc400117 	ldw	r17,4(sp)
 402f318:	dc000017 	ldw	r16,0(sp)
 402f31c:	dec00504 	addi	sp,sp,20
 402f320:	f800283a 	ret
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
 402f324:	1825883a 	mov	r18,r3
 402f328:	003fe806 	br	402f2cc <vfclose_locked+0x64>

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
 402f32c:	8880058b 	ldhu	r2,22(r17)
 402f330:	1080200c 	andi	r2,r2,128
 402f334:	103fec26 	beq	r2,zero,402f2e8 <vfclose_locked+0x80>
 402f338:	89000817 	ldw	r4,32(r17)
 402f33c:	88800917 	ldw	r2,36(r17)
 402f340:	00c03fc4 	movi	r3,255
 402f344:	1105c83a 	sub	r2,r2,r4
 402f348:	18bfe72e 	bgeu	r3,r2,402f2e8 <vfclose_locked+0x80>
 402f34c:	88800617 	ldw	r2,24(r17)
 402f350:	103fe526 	beq	r2,zero,402f2e8 <vfclose_locked+0x80>
          vfp->data) /* this last test is a sanity check */
      {
         /* try to reclaim the unused data */

         /* allocate a new buffer just big enough for the data */
         new_buffer = vf_alloc_buffer(vfp->comp_size);
 402f354:	402ef4c0 	call	402ef4c <vf_alloc_buffer>
 402f358:	1027883a 	mov	r19,r2

         /* if the allocation worked */
         if (new_buffer)
 402f35c:	103fe226 	beq	r2,zero,402f2e8 <vfclose_locked+0x80>
         {
            /* copy the old buffer to the new one */
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 402f360:	89400617 	ldw	r5,24(r17)
 402f364:	89800817 	ldw	r6,32(r17)
 402f368:	1009883a 	mov	r4,r2
 402f36c:	40096480 	call	4009648 <memcpy>
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
 402f370:	89000617 	ldw	r4,24(r17)
 402f374:	89400917 	ldw	r5,36(r17)
 402f378:	402ed780 	call	402ed78 <vf_free_buffer>
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
            vfp->buf_size = vfp->comp_size;
 402f37c:	88800817 	ldw	r2,32(r17)
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
 402f380:	8cc00615 	stw	r19,24(r17)
            vfp->buf_size = vfp->comp_size;
 402f384:	88800915 	stw	r2,36(r17)
      /* break to list deletion code below */
      break;

   }

   if (vlast)  /* unlink from list of open files */
 402f388:	903fd81e 	bne	r18,zero,402f2ec <vfclose_locked+0x84>
      vlast->next = vtmp->next;
   else
      vfiles = vtmp->next;
 402f38c:	80800017 	ldw	r2,0(r16)
 402f390:	d0a86715 	stw	r2,-24164(gp)
 402f394:	003fd706 	br	402f2f4 <vfclose_locked+0x8c>
   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
 402f398:	0025883a 	mov	r18,zero
 402f39c:	003fc206 	br	402f2a8 <vfclose_locked+0x40>

0402f3a0 <vfclose>:
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
 402f3a0:	defffd04 	addi	sp,sp,-12
 402f3a4:	dcc00115 	stw	r19,4(sp)
   vfs_lock();
 402f3a8:	04c00144 	movi	r19,5
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
 402f3ac:	dc400015 	stw	r17,0(sp)
 402f3b0:	2023883a 	mov	r17,r4
   vfs_lock();
 402f3b4:	9809883a 	mov	r4,r19
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
 402f3b8:	dfc00215 	stw	ra,8(sp)
   vfs_lock();
 402f3bc:	401c98c0 	call	401c98c <wait_app_sem>

   vfclose_locked(vfd);
 402f3c0:	8809883a 	mov	r4,r17
 402f3c4:	402f2680 	call	402f268 <vfclose_locked>

   vfs_unlock();
 402f3c8:	9809883a 	mov	r4,r19
}
 402f3cc:	dfc00217 	ldw	ra,8(sp)
 402f3d0:	dcc00117 	ldw	r19,4(sp)
 402f3d4:	dc400017 	ldw	r17,0(sp)
 402f3d8:	dec00304 	addi	sp,sp,12
{
   vfs_lock();

   vfclose_locked(vfd);

   vfs_unlock();
 402f3dc:	401c8cc1 	jmpi	401c8cc <post_app_sem>

0402f3e0 <vf_alloc_and_link_vop>:
VFILE * vf_alloc_and_link_vop()
{
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
 402f3e0:	d0a86b17 	ldw	r2,-24148(gp)
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
 402f3e4:	deffff04 	addi	sp,sp,-4
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
 402f3e8:	00c03f84 	movi	r3,254
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
 402f3ec:	dfc00015 	stw	ra,0(sp)
#endif   /* VFS_VERBOSE */
      return NULL;
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
 402f3f0:	01000504 	movi	r4,20
VFILE * vf_alloc_and_link_vop()
{
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
 402f3f4:	000b883a 	mov	r5,zero
 402f3f8:	1880042e 	bgeu	r3,r2,402f40c <vf_alloc_and_link_vop+0x2c>
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
}
 402f3fc:	2805883a 	mov	r2,r5
 402f400:	dfc00017 	ldw	ra,0(sp)
 402f404:	dec00104 	addi	sp,sp,4
 402f408:	f800283a 	ret
#endif   /* VFS_VERBOSE */
      return NULL;
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
 402f40c:	401cdc80 	call	401cdc8 <npalloc>
 402f410:	100b883a 	mov	r5,r2

   /* if the allocation succeeded */
   if (vop)
 402f414:	103ff926 	beq	r2,zero,402f3fc <vf_alloc_and_link_vop+0x1c>
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
 402f418:	d0e86717 	ldw	r3,-24164(gp)
 402f41c:	10c00015 	stw	r3,0(r2)
      vfiles = vop;
      /* increment the count of open files */
      vfs_open_files++;
 402f420:	d0a86b17 	ldw	r2,-24148(gp)
   /* if the allocation succeeded */
   if (vop)
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
      vfiles = vop;
 402f424:	d1686715 	stw	r5,-24164(gp)
      /* increment the count of open files */
      vfs_open_files++;
 402f428:	10800044 	addi	r2,r2,1
 402f42c:	d0a86b15 	stw	r2,-24148(gp)
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
}
 402f430:	2805883a 	mov	r2,r5
 402f434:	dfc00017 	ldw	ra,0(sp)
 402f438:	dec00104 	addi	sp,sp,4
 402f43c:	f800283a 	ret

0402f440 <vfopen_locked>:
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
 402f440:	defffb04 	addi	sp,sp,-20
 402f444:	dc400115 	stw	r17,4(sp)
 402f448:	2023883a 	mov	r17,r4
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
 402f44c:	0009883a 	mov	r4,zero
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
 402f450:	dc800215 	stw	r18,8(sp)
 402f454:	dfc00415 	stw	ra,16(sp)
 402f458:	2825883a 	mov	r18,r5
 402f45c:	dcc00315 	stw	r19,12(sp)
 402f460:	dc000015 	stw	r16,0(sp)
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
 402f464:	402e5940 	call	402e594 <set_vfopen_error>

   /* the old code used to do special handling of '?' in files for 
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
 402f468:	01400fc4 	movi	r5,63
 402f46c:	8809883a 	mov	r4,r17
 402f470:	403098c0 	call	403098c <strchr>
 402f474:	10002f1e 	bne	r2,zero,402f534 <vfopen_locked+0xf4>
   }

   /* determine if the file exists */
   /* if the directory exists, vfp will point to its directory entry
      structure else vfp will be NULL */
   vfp = vfslookup_locked(name);
 402f478:	8809883a 	mov	r4,r17
 402f47c:	402eb3c0 	call	402eb3c <vfslookup_locked>
 402f480:	1021883a 	mov	r16,r2

   /* if the file exists */
   if (vfp)
 402f484:	10003e26 	beq	r2,zero,402f580 <vfopen_locked+0x140>

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
 402f488:	90c00007 	ldb	r3,0(r18)
 402f48c:	00801dc4 	movi	r2,119
 402f490:	18801326 	beq	r3,r2,402f4e0 <vfopen_locked+0xa0>
      }

#endif   /* HT_RWVFS */

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 402f494:	402f3e00 	call	402f3e0 <vf_alloc_and_link_vop>
 402f498:	1027883a 	mov	r19,r2

      /* check for failure */
      if (!vop)
 402f49c:	10007226 	beq	r2,zero,402f668 <vfopen_locked+0x228>
      vop->file = vfp;

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
 402f4a0:	80800617 	ldw	r2,24(r16)
#endif   /* VFS_VERBOSE */
         return NULL;
      }

      /* link to the file's directory entry structure */
      vop->file = vfp;
 402f4a4:	9c000115 	stw	r16,4(r19)

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
 402f4a8:	98800215 	stw	r2,8(r19)

#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
 402f4ac:	90c00007 	ldb	r3,0(r18)
 402f4b0:	00801844 	movi	r2,97
 402f4b4:	18802926 	beq	r3,r2,402f55c <vfopen_locked+0x11c>
            vop->cmploc = vfp->data + vfp->comp_size;
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
 402f4b8:	00801dc4 	movi	r2,119
 402f4bc:	18800f26 	beq	r3,r2,402f4fc <vfopen_locked+0xbc>
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;

#endif   /* HT_LOCALFS */
}
 402f4c0:	9805883a 	mov	r2,r19
 402f4c4:	dfc00417 	ldw	ra,16(sp)
 402f4c8:	dcc00317 	ldw	r19,12(sp)
 402f4cc:	dc800217 	ldw	r18,8(sp)
 402f4d0:	dc400117 	ldw	r17,4(sp)
 402f4d4:	dc000017 	ldw	r16,0(sp)
 402f4d8:	dec00504 	addi	sp,sp,20
 402f4dc:	f800283a 	ret

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
 402f4e0:	8080058b 	ldhu	r2,22(r16)
 402f4e4:	1080080c 	andi	r2,r2,32
 402f4e8:	103fea1e 	bne	r2,zero,402f494 <vfopen_locked+0x54>
      {
         set_vfopen_error(ENP_FILEIO);
 402f4ec:	013ff984 	movi	r4,-26
 402f4f0:	402e5940 	call	402e594 <set_vfopen_error>
 402f4f4:	0027883a 	mov	r19,zero
 402f4f8:	003ff106 	br	402f4c0 <vfopen_locked+0x80>
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
         /* note we leave the pointer to the file buffer and its length
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;
 402f4fc:	8080058b 	ldhu	r2,22(r16)

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
      {
         /* set the size of the file before compression to 0 */
         vfp->real_size = 0;
 402f500:	80000715 	stw	zero,28(r16)
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
 402f504:	80000815 	stw	zero,32(r16)
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;

         /* turn off the compression flag */
         vfp->flags &= ~VF_HTMLCOMPRESSED;
 402f508:	10808014 	ori	r2,r2,512
 402f50c:	10bfff8c 	andi	r2,r2,65534
 402f510:	8080058d 	sth	r2,22(r16)
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;

#endif   /* HT_LOCALFS */
}
 402f514:	9805883a 	mov	r2,r19
 402f518:	dfc00417 	ldw	ra,16(sp)
 402f51c:	dcc00317 	ldw	r19,12(sp)
 402f520:	dc800217 	ldw	r18,8(sp)
 402f524:	dc400117 	ldw	r17,4(sp)
 402f528:	dc000017 	ldw	r16,0(sp)
 402f52c:	dec00504 	addi	sp,sp,20
 402f530:	f800283a 	ret
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
   {
      dtrap();
 402f534:	401c81c0 	call	401c81c <dtrap>
 402f538:	0027883a 	mov	r19,zero
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;

#endif   /* HT_LOCALFS */
}
 402f53c:	9805883a 	mov	r2,r19
 402f540:	dfc00417 	ldw	ra,16(sp)
 402f544:	dcc00317 	ldw	r19,12(sp)
 402f548:	dc800217 	ldw	r18,8(sp)
 402f54c:	dc400117 	ldw	r17,4(sp)
 402f550:	dc000017 	ldw	r16,0(sp)
 402f554:	dec00504 	addi	sp,sp,20
 402f558:	f800283a 	ret
#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
      {
         if (vfp->data)
 402f55c:	80c00617 	ldw	r3,24(r16)
 402f560:	183fd726 	beq	r3,zero,402f4c0 <vfopen_locked+0x80>
         {
            vop->cmploc = vfp->data + vfp->comp_size;
 402f564:	80800817 	ldw	r2,32(r16)
 402f568:	1885883a 	add	r2,r3,r2
 402f56c:	98800215 	stw	r2,8(r19)
 402f570:	90c00007 	ldb	r3,0(r18)
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
 402f574:	00801dc4 	movi	r2,119
 402f578:	18bfd11e 	bne	r3,r2,402f4c0 <vfopen_locked+0x80>
 402f57c:	003fdf06 	br	402f4fc <vfopen_locked+0xbc>

#ifdef HT_EXTDEV

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 402f580:	90c00007 	ldb	r3,0(r18)
 402f584:	00801c84 	movi	r2,114
 402f588:	18802f26 	beq	r3,r2,402f648 <vfopen_locked+0x208>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
 402f58c:	d4286617 	ldw	r16,-24168(gp)
 402f590:	8000031e 	bne	r16,zero,402f5a0 <vfopen_locked+0x160>
 402f594:	00000c06 	br	402f5c8 <vfopen_locked+0x188>
 402f598:	84000017 	ldw	r16,0(r16)
 402f59c:	80000726 	beq	r16,zero,402f5bc <vfopen_locked+0x17c>
      {
         if ((vop = vfs->r_fopen(name, mode)) != NULL)
 402f5a0:	80c00117 	ldw	r3,4(r16)
 402f5a4:	8809883a 	mov	r4,r17
 402f5a8:	900b883a 	mov	r5,r18
 402f5ac:	183ee83a 	callr	r3
 402f5b0:	1027883a 	mov	r19,r2
 402f5b4:	103ff826 	beq	r2,zero,402f598 <vfopen_locked+0x158>
 402f5b8:	003fc106 	br	402f4c0 <vfopen_locked+0x80>

#ifdef HT_RWVFS

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 402f5bc:	90c00007 	ldb	r3,0(r18)
 402f5c0:	00801c84 	movi	r2,114
 402f5c4:	18802026 	beq	r3,r2,402f648 <vfopen_locked+0x208>
   {
      /* enforce maximum number of files */
      if (vfs_total_dyna_files >= VFS_MAX_DYNA_FILES)
 402f5c8:	d0a86d17 	ldw	r2,-24140(gp)
 402f5cc:	00c03f84 	movi	r3,254
 402f5d0:	18802836 	bltu	r3,r2,402f674 <vfopen_locked+0x234>
#endif   /* VFS_VERBOSE */
         return NULL;
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
 402f5d4:	8809883a 	mov	r4,r17
 402f5d8:	400472c0 	call	400472c <strlen>
 402f5dc:	00c00404 	movi	r3,16
 402f5e0:	18802836 	bltu	r3,r2,402f684 <vfopen_locked+0x244>
#endif   /* VFS_VERBOSE */
         return NULL;
      }

      /* allocate a vfs_file structure to hold the new file entry in */
      vfp = VFS_VFS_FILE_ALLOC();
 402f5e4:	01000b04 	movi	r4,44
 402f5e8:	401cdc80 	call	401cdc8 <npalloc>
 402f5ec:	1021883a 	mov	r16,r2

      /* check for memory allocation failure */
      if (!vfp)
 402f5f0:	10002026 	beq	r2,zero,402f674 <vfopen_locked+0x234>
#endif   /* VFS_VERBOSE */
         return NULL;
      }

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 402f5f4:	402f3e00 	call	402f3e0 <vf_alloc_and_link_vop>
 402f5f8:	1027883a 	mov	r19,r2

      /* check for memory allocation failure */
      if (!vop)
 402f5fc:	10001826 	beq	r2,zero,402f660 <vfopen_locked+0x220>
         return NULL;
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
 402f600:	d0a86817 	ldw	r2,-24160(gp)
      vfsfiles = vfp;

      /* increment count of total files */
      vfs_total_dyna_files++;
 402f604:	d0e86d17 	ldw	r3,-24140(gp)
         return NULL;
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
 402f608:	80800015 	stw	r2,0(r16)
      vfsfiles = vfp;

      /* increment count of total files */
      vfs_total_dyna_files++;
 402f60c:	18c00044 	addi	r3,r3,1
 402f610:	d0e86d15 	stw	r3,-24140(gp)
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
      vfsfiles = vfp;
 402f614:	d4286815 	stw	r16,-24160(gp)

      /* increment count of total files */
      vfs_total_dyna_files++;

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
 402f618:	88c00007 	ldb	r3,0(r17)
 402f61c:	00800bc4 	movi	r2,47
 402f620:	18800d26 	beq	r3,r2,402f658 <vfopen_locked+0x218>
 402f624:	00801704 	movi	r2,92
 402f628:	18800b26 	beq	r3,r2,402f658 <vfopen_locked+0x218>
         name++;

      /* store the converted name in the directory entry structure */
      strcpy(vfp->name,name);
 402f62c:	880b883a 	mov	r5,r17
 402f630:	81000104 	addi	r4,r16,4
 402f634:	4030a6c0 	call	4030a6c <strcpy>

      /* set the flags */
      vfp->flags = VF_DYNAMICINFO   /* the directory entry was allocated */
 402f638:	00c0d804 	movi	r3,864
 402f63c:	80c0058d 	sth	r3,22(r16)
       * note that this means the data pointer contains a null 
       * because we don't allocate any buffer to hold the data 
       * in until the first write 
       */
      /* link to the file's directory entry structure */
      vop->file = vfp;
 402f640:	9c000115 	stw	r16,4(r19)
 402f644:	003f9e06 	br	402f4c0 <vfopen_locked+0x80>
   /* pass the open to the local file system */
   return (VFILE *) fopen(name,mode);

#else

   set_vfopen_error(ENP_NOFILE);
 402f648:	013ff9c4 	movi	r4,-25
 402f64c:	402e5940 	call	402e594 <set_vfopen_error>
 402f650:	0027883a 	mov	r19,zero
 402f654:	003f9a06 	br	402f4c0 <vfopen_locked+0x80>
      /* increment count of total files */
      vfs_total_dyna_files++;

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
         name++;
 402f658:	8c400044 	addi	r17,r17,1
 402f65c:	003ff306 	br	402f62c <vfopen_locked+0x1ec>
      vop = vf_alloc_and_link_vop();

      /* check for memory allocation failure */
      if (!vop)
      {
         VFS_VFS_FILE_FREE(vfp); /* free the allocated vfs_file entry */
 402f660:	8009883a 	mov	r4,r16
 402f664:	401cce40 	call	401cce4 <npfree>
         set_vfopen_error(ENP_NOMEM);
 402f668:	013ffb04 	movi	r4,-20
 402f66c:	402e5940 	call	402e594 <set_vfopen_error>
 402f670:	003f9306 	br	402f4c0 <vfopen_locked+0x80>
      vfp = VFS_VFS_FILE_ALLOC();

      /* check for memory allocation failure */
      if (!vfp)
      {
         set_vfopen_error(ENP_NOMEM);
 402f674:	013ffb04 	movi	r4,-20
 402f678:	402e5940 	call	402e594 <set_vfopen_error>
 402f67c:	0027883a 	mov	r19,zero
 402f680:	003f8f06 	br	402f4c0 <vfopen_locked+0x80>
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
      {
         set_vfopen_error(ENP_PARAM);
 402f684:	013ffd84 	movi	r4,-10
 402f688:	402e5940 	call	402e594 <set_vfopen_error>
 402f68c:	0027883a 	mov	r19,zero
 402f690:	003f8b06 	br	402f4c0 <vfopen_locked+0x80>

0402f694 <vfopen>:
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
 402f694:	defffc04 	addi	sp,sp,-16
 402f698:	dd400215 	stw	r21,8(sp)
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402f69c:	05400144 	movi	r21,5
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
 402f6a0:	dc400015 	stw	r17,0(sp)
 402f6a4:	2023883a 	mov	r17,r4
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402f6a8:	a809883a 	mov	r4,r21
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
 402f6ac:	dfc00315 	stw	ra,12(sp)
 402f6b0:	dcc00115 	stw	r19,4(sp)
 402f6b4:	2827883a 	mov	r19,r5
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 402f6b8:	401c98c0 	call	401c98c <wait_app_sem>

   vfd = vfopen_locked(name,mode);
 402f6bc:	980b883a 	mov	r5,r19
 402f6c0:	8809883a 	mov	r4,r17
 402f6c4:	402f4400 	call	402f440 <vfopen_locked>

   vfs_unlock();
 402f6c8:	a809883a 	mov	r4,r21
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();

   vfd = vfopen_locked(name,mode);
 402f6cc:	1023883a 	mov	r17,r2

   vfs_unlock();
 402f6d0:	401c8cc0 	call	401c8cc <post_app_sem>

   return vfd;
}
 402f6d4:	8805883a 	mov	r2,r17
 402f6d8:	dfc00317 	ldw	ra,12(sp)
 402f6dc:	dd400217 	ldw	r21,8(sp)
 402f6e0:	dcc00117 	ldw	r19,4(sp)
 402f6e4:	dc400017 	ldw	r17,0(sp)
 402f6e8:	dec00404 	addi	sp,sp,16
 402f6ec:	f800283a 	ret

0402f6f0 <prep_vfs>:
      dprintf("unable to install VFS NVPARMS, reconfigure nv_formats[]\n");
      dtrap();
   }
#endif   /* INCLUDE_NVPARMS */
   return e;
}
 402f6f0:	0005883a 	mov	r2,zero
 402f6f4:	f800283a 	ret

0402f6f8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 402f6f8:	0080f874 	movhi	r2,993
 402f6fc:	10be0f84 	addi	r2,r2,-1986
 402f700:	2087203a 	divu	r3,r4,r2
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 402f704:	18001126 	beq	r3,zero,402f74c <alt_busy_sleep+0x54>
  {
    for(i=0;i<big_loops;i++)
 402f708:	00c00b0e 	bge	zero,r3,402f738 <alt_busy_sleep+0x40>
 402f70c:	0005883a 	mov	r2,zero
 402f710:	01600034 	movhi	r5,32768
 402f714:	297fffc4 	addi	r5,r5,-1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 402f718:	297fffc4 	addi	r5,r5,-1
 402f71c:	283ffe1e 	bne	r5,zero,402f718 <alt_busy_sleep+0x20>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 402f720:	10800044 	addi	r2,r2,1
 402f724:	18bffc1e 	bne	r3,r2,402f718 <alt_busy_sleep+0x20>
 402f728:	00bf07f4 	movhi	r2,64543
 402f72c:	1081f084 	addi	r2,r2,1986
 402f730:	1885383a 	mul	r2,r3,r2
 402f734:	2089883a 	add	r4,r4,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f738:	20800864 	muli	r2,r4,33
 402f73c:	10bfffc4 	addi	r2,r2,-1
 402f740:	103ffe1e 	bne	r2,zero,402f73c <alt_busy_sleep+0x44>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 402f744:	0005883a 	mov	r2,zero
 402f748:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f74c:	20800864 	muli	r2,r4,33
 402f750:	10bfffc4 	addi	r2,r2,-1
 402f754:	00bffe16 	blt	zero,r2,402f750 <alt_busy_sleep+0x58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 402f758:	0005883a 	mov	r2,zero
 402f75c:	f800283a 	ret

0402f760 <alt_dcache_flush>:
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
 402f760:	2145883a 	add	r2,r4,r5
 402f764:	2007883a 	mov	r3,r4

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 402f768:	2080032e 	bgeu	r4,r2,402f778 <alt_dcache_flush+0x18>
  { 
    ALT_FLUSH_DATA(i); 
 402f76c:	1800001b 	flushda	0(r3)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 402f770:	18c00804 	addi	r3,r3,32
 402f774:	18bffd36 	bltu	r3,r2,402f76c <alt_dcache_flush+0xc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 402f778:	208007cc 	andi	r2,r4,31
 402f77c:	10000126 	beq	r2,zero,402f784 <alt_dcache_flush+0x24>
  {
    ALT_FLUSH_DATA(i);
 402f780:	1800001b 	flushda	0(r3)
 402f784:	f800283a 	ret

0402f788 <alt_fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 402f788:	defffc04 	addi	sp,sp,-16
 402f78c:	dfc00115 	stw	ra,4(sp)
 402f790:	d9800215 	stw	r6,8(sp)
 402f794:	d9c00315 	stw	r7,12(sp)
 402f798:	280d883a 	mov	r6,r5
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402f79c:	20002e16 	blt	r4,zero,402f858 <alt_fcntl+0xd0>
 402f7a0:	20c00324 	muli	r3,r4,12
 402f7a4:	00810134 	movhi	r2,1028
 402f7a8:	10a03904 	addi	r2,r2,-32540
 402f7ac:	188f883a 	add	r7,r3,r2
  
  if (fd)
 402f7b0:	38002926 	beq	r7,zero,402f858 <alt_fcntl+0xd0>
  {
    switch (cmd)
 402f7b4:	008000c4 	movi	r2,3
 402f7b8:	28800f26 	beq	r5,r2,402f7f8 <alt_fcntl+0x70>
 402f7bc:	00800104 	movi	r2,4
 402f7c0:	28801526 	beq	r5,r2,402f818 <alt_fcntl+0x90>
 402f7c4:	00810134 	movhi	r2,1028
 402f7c8:	10a13f04 	addi	r2,r2,-31492
 402f7cc:	10800017 	ldw	r2,0(r2)
 402f7d0:	10002e26 	beq	r2,zero,402f88c <alt_fcntl+0x104>
 402f7d4:	103ee83a 	callr	r2
 402f7d8:	1009883a 	mov	r4,r2
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
      va_end(argp);
      return 0;
    default:
      ALT_ERRNO = EINVAL;
 402f7dc:	00ffffc4 	movi	r3,-1
 402f7e0:	00800584 	movi	r2,22
 402f7e4:	20800015 	stw	r2,0(r4)
    }
  }

  ALT_ERRNO = EBADFD;
  return -1;
}
 402f7e8:	1805883a 	mov	r2,r3
 402f7ec:	dfc00117 	ldw	ra,4(sp)
 402f7f0:	dec00404 	addi	sp,sp,16
 402f7f4:	f800283a 	ret
  if (fd)
  {
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 402f7f8:	38c00217 	ldw	r3,8(r7)
 402f7fc:	00900034 	movhi	r2,16384
 402f800:	10bfffc4 	addi	r2,r2,-1
 402f804:	1886703a 	and	r3,r3,r2
    }
  }

  ALT_ERRNO = EBADFD;
  return -1;
}
 402f808:	1805883a 	mov	r2,r3
 402f80c:	dfc00117 	ldw	ra,4(sp)
 402f810:	dec00404 	addi	sp,sp,16
 402f814:	f800283a 	ret
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
 402f818:	d8800204 	addi	r2,sp,8
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 402f81c:	39000217 	ldw	r4,8(r7)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 402f820:	10c00017 	ldw	r3,0(r2)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
 402f824:	100b883a 	mov	r5,r2
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 402f828:	00affdc4 	movi	r2,-16393
 402f82c:	2088703a 	and	r4,r4,r2
 402f830:	18d0020c 	andi	r3,r3,16392
 402f834:	20c8b03a 	or	r4,r4,r3
      va_end(argp);
 402f838:	0007883a 	mov	r3,zero
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
 402f83c:	298b883a 	add	r5,r5,r6
    }
  }

  ALT_ERRNO = EBADFD;
  return -1;
}
 402f840:	1805883a 	mov	r2,r3
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 402f844:	39000215 	stw	r4,8(r7)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
 402f848:	d9400015 	stw	r5,0(sp)
    }
  }

  ALT_ERRNO = EBADFD;
  return -1;
}
 402f84c:	dfc00117 	ldw	ra,4(sp)
 402f850:	dec00404 	addi	sp,sp,16
 402f854:	f800283a 	ret
 402f858:	00810134 	movhi	r2,1028
 402f85c:	10a13f04 	addi	r2,r2,-31492
 402f860:	10800017 	ldw	r2,0(r2)
 402f864:	10000c26 	beq	r2,zero,402f898 <alt_fcntl+0x110>
 402f868:	103ee83a 	callr	r2
 402f86c:	1007883a 	mov	r3,r2
      ALT_ERRNO = EINVAL;
      return -1;
    }
  }

  ALT_ERRNO = EBADFD;
 402f870:	00801444 	movi	r2,81
 402f874:	18800015 	stw	r2,0(r3)
 402f878:	00ffffc4 	movi	r3,-1
  return -1;
}
 402f87c:	1805883a 	mov	r2,r3
 402f880:	dfc00117 	ldw	ra,4(sp)
 402f884:	dec00404 	addi	sp,sp,16
 402f888:	f800283a 	ret
 402f88c:	01010134 	movhi	r4,1028
 402f890:	2128e504 	addi	r4,r4,-23660
 402f894:	003fd106 	br	402f7dc <alt_fcntl+0x54>
 402f898:	00c10134 	movhi	r3,1028
 402f89c:	18e8e504 	addi	r3,r3,-23660
 402f8a0:	003ff306 	br	402f870 <alt_fcntl+0xe8>

0402f8a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402f8a4:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402f8a8:	00810134 	movhi	r2,1028
 402f8ac:	10a13a04 	addi	r2,r2,-31512
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402f8b0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402f8b4:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402f8b8:	dd000415 	stw	r20,16(sp)
 402f8bc:	dc800215 	stw	r18,8(sp)
 402f8c0:	dfc00515 	stw	ra,20(sp)
 402f8c4:	dcc00315 	stw	r19,12(sp)
 402f8c8:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402f8cc:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402f8d0:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402f8d4:	80801526 	beq	r16,r2,402f92c <alt_find_file+0x88>
 402f8d8:	04c00bc4 	movi	r19,47
 402f8dc:	00000806 	br	402f900 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402f8e0:	3485883a 	add	r2,r6,r18
 402f8e4:	10800007 	ldb	r2,0(r2)
 402f8e8:	14c00126 	beq	r2,r19,402f8f0 <alt_find_file+0x4c>
 402f8ec:	1000021e 	bne	r2,zero,402f8f8 <alt_find_file+0x54>
 402f8f0:	40308b80 	call	40308b8 <memcmp>
 402f8f4:	10000e26 	beq	r2,zero,402f930 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 402f8f8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402f8fc:	85000b26 	beq	r16,r20,402f92c <alt_find_file+0x88>
  {
    len = strlen(next->name);
 402f900:	84400217 	ldw	r17,8(r16)
 402f904:	8809883a 	mov	r4,r17
 402f908:	400472c0 	call	400472c <strlen>
 402f90c:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 402f910:	8885883a 	add	r2,r17,r2
 402f914:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402f918:	8809883a 	mov	r4,r17
 402f91c:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 402f920:	1cffef1e 	bne	r3,r19,402f8e0 <alt_find_file+0x3c>
    {
      len -= 1;
 402f924:	31bfffc4 	addi	r6,r6,-1
 402f928:	003fed06 	br	402f8e0 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402f92c:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
 402f930:	8005883a 	mov	r2,r16
 402f934:	dfc00517 	ldw	ra,20(sp)
 402f938:	dd000417 	ldw	r20,16(sp)
 402f93c:	dcc00317 	ldw	r19,12(sp)
 402f940:	dc800217 	ldw	r18,8(sp)
 402f944:	dc400117 	ldw	r17,4(sp)
 402f948:	dc000017 	ldw	r16,0(sp)
 402f94c:	dec00604 	addi	sp,sp,24
 402f950:	f800283a 	ret

0402f954 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 402f954:	defffc04 	addi	sp,sp,-16
 402f958:	dc400215 	stw	r17,8(sp)
 402f95c:	04410134 	movhi	r17,1028
 402f960:	8c694104 	addi	r17,r17,-23292
 402f964:	dc000115 	stw	r16,4(sp)
 402f968:	2021883a 	mov	r16,r4
 402f96c:	89000017 	ldw	r4,0(r17)
 402f970:	000b883a 	mov	r5,zero
 402f974:	d80d883a 	mov	r6,sp
 402f978:	dfc00315 	stw	ra,12(sp)
 402f97c:	4011ba40 	call	4011ba4 <OSSemPend>
 402f980:	00c10134 	movhi	r3,1028
 402f984:	18e03904 	addi	r3,r3,-32540
 402f988:	0009883a 	mov	r4,zero
 402f98c:	01800804 	movi	r6,32
 402f990:	180b883a 	mov	r5,r3
 402f994:	00000306 	br	402f9a4 <alt_get_fd+0x50>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402f998:	21000044 	addi	r4,r4,1
 402f99c:	29400304 	addi	r5,r5,12
 402f9a0:	21801b26 	beq	r4,r6,402fa10 <alt_get_fd+0xbc>
  {
    if (!alt_fd_list[i].dev)
 402f9a4:	18800017 	ldw	r2,0(r3)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402f9a8:	18c00304 	addi	r3,r3,12
  {
    if (!alt_fd_list[i].dev)
 402f9ac:	103ffa1e 	bne	r2,zero,402f998 <alt_get_fd+0x44>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
 402f9b0:	00c10134 	movhi	r3,1028
 402f9b4:	18e13e04 	addi	r3,r3,-31496
 402f9b8:	18800017 	ldw	r2,0(r3)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
 402f9bc:	2c000015 	stw	r16,0(r5)
      if (i > alt_max_fd)
 402f9c0:	11000a0e 	bge	r2,r4,402f9ec <alt_get_fd+0x98>
      {
        alt_max_fd = i;
 402f9c4:	2021883a 	mov	r16,r4
 402f9c8:	19000015 	stw	r4,0(r3)
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 402f9cc:	89000017 	ldw	r4,0(r17)
 402f9d0:	4011e780 	call	4011e78 <OSSemPost>

  return rc;
}
 402f9d4:	8005883a 	mov	r2,r16
 402f9d8:	dfc00317 	ldw	ra,12(sp)
 402f9dc:	dc400217 	ldw	r17,8(sp)
 402f9e0:	dc000117 	ldw	r16,4(sp)
 402f9e4:	dec00404 	addi	sp,sp,16
 402f9e8:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
 402f9ec:	2021883a 	mov	r16,r4
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 402f9f0:	89000017 	ldw	r4,0(r17)
 402f9f4:	4011e780 	call	4011e78 <OSSemPost>

  return rc;
}
 402f9f8:	8005883a 	mov	r2,r16
 402f9fc:	dfc00317 	ldw	ra,12(sp)
 402fa00:	dc400217 	ldw	r17,8(sp)
 402fa04:	dc000117 	ldw	r16,4(sp)
 402fa08:	dec00404 	addi	sp,sp,16
 402fa0c:	f800283a 	ret
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 402fa10:	89000017 	ldw	r4,0(r17)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fa14:	043ffa04 	movi	r16,-24
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 402fa18:	4011e780 	call	4011e78 <OSSemPost>

  return rc;
}
 402fa1c:	8005883a 	mov	r2,r16
 402fa20:	dfc00317 	ldw	ra,12(sp)
 402fa24:	dc400217 	ldw	r17,8(sp)
 402fa28:	dc000117 	ldw	r16,4(sp)
 402fa2c:	dec00404 	addi	sp,sp,16
 402fa30:	f800283a 	ret

0402fa34 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 402fa34:	00840004 	movi	r2,4096
 402fa38:	2007883a 	mov	r3,r4
 402fa3c:	1140012e 	bgeu	r2,r5,402fa44 <alt_icache_flush+0x10>
 402fa40:	100b883a 	mov	r5,r2
 402fa44:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fa48:	1940032e 	bgeu	r3,r5,402fa58 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 402fa4c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fa50:	18c00804 	addi	r3,r3,32
 402fa54:	197ffd36 	bltu	r3,r5,402fa4c <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 402fa58:	208007cc 	andi	r2,r4,31
 402fa5c:	10000126 	beq	r2,zero,402fa64 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 402fa60:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 402fa64:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 402fa68:	f800283a 	ret

0402fa6c <icmp_du>:

void  
icmp_du(PACKET p, struct destun * pdp)
{
   /* see if user app wants notification first */
   if (icmpdu_hook)
 402fa6c:	d0a86e17 	ldw	r2,-24136(gp)
 * RETURNS: void
 */

void  
icmp_du(PACKET p, struct destun * pdp)
{
 402fa70:	defffd04 	addi	sp,sp,-12
 402fa74:	dc400115 	stw	r17,4(sp)
 402fa78:	dc000015 	stw	r16,0(sp)
 402fa7c:	dfc00215 	stw	ra,8(sp)
 402fa80:	2021883a 	mov	r16,r4
 402fa84:	2823883a 	mov	r17,r5
   /* see if user app wants notification first */
   if (icmpdu_hook)
 402fa88:	10000126 	beq	r2,zero,402fa90 <icmp_du+0x24>
      icmpdu_hook(p, pdp);
 402fa8c:	103ee83a 	callr	r2

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
 402fa90:	8009883a 	mov	r4,r16
 402fa94:	880b883a 	mov	r5,r17
done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* else just free packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif   /* INCLUDE_TCP */
}
 402fa98:	dfc00217 	ldw	ra,8(sp)
 402fa9c:	dc400117 	ldw	r17,4(sp)
 402faa0:	dc000017 	ldw	r16,0(sp)
 402faa4:	dec00304 	addi	sp,sp,12
   if (icmpdu_hook)
      icmpdu_hook(p, pdp);

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
 402faa8:	401d1d41 	jmpi	401d1d4 <so_icmpdu>

0402faac <icmp_timex>:
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
 402faac:	defff604 	addi	sp,sp,-40
 402fab0:	dd800815 	stw	r22,32(sp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 402fab4:	05810134 	movhi	r22,1028
 402fab8:	b5a90e04 	addi	r22,r22,-23496
 402fabc:	b0800017 	ldw	r2,0(r22)
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
 402fac0:	dd400715 	stw	r21,28(sp)
 402fac4:	dc800415 	stw	r18,16(sp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 402fac8:	1080040c 	andi	r2,r2,16
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
 402facc:	dfc00915 	stw	ra,36(sp)
 402fad0:	dd000615 	stw	r20,24(sp)
 402fad4:	dcc00515 	stw	r19,20(sp)
 402fad8:	dc400315 	stw	r17,12(sp)
 402fadc:	dc000215 	stw	r16,8(sp)
 402fae0:	282b883a 	mov	r21,r5
 402fae4:	2025883a 	mov	r18,r4
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 402fae8:	10004e1e 	bne	r2,zero,402fc24 <icmp_timex+0x178>
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
 402faec:	94000003 	ldbu	r16,0(r18)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 402faf0:	01000084 	movi	r4,2
 402faf4:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
 402faf8:	00810134 	movhi	r2,1028
 402fafc:	10a90c04 	addi	r2,r2,-23504
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
 402fb00:	840003cc 	andi	r16,r16,15
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
 402fb04:	11000017 	ldw	r4,0(r2)
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
 402fb08:	8421883a 	add	r16,r16,r16
 402fb0c:	8421883a 	add	r16,r16,r16
 402fb10:	84000404 	addi	r16,r16,16
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
 402fb14:	85003fcc 	andi	r20,r16,255
 402fb18:	21000504 	addi	r4,r4,20
 402fb1c:	a109883a 	add	r4,r20,r4
 402fb20:	401bf840 	call	401bf84 <pk_alloc>
 402fb24:	1027883a 	mov	r19,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402fb28:	01000084 	movi	r4,2
 402fb2c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 402fb30:	98003326 	beq	r19,zero,402fc00 <icmp_timex+0x154>
      icmp_mib.icmpOutErrors++;
      return;
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 402fb34:	9c400317 	ldw	r17,12(r19)
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
 402fb38:	90800417 	ldw	r2,16(r18)
   tx = (struct timex *) p->nb_prot;

   tx->ttype = TIMEX;
   tx->tcode = code;
   tx->tno1 = tx->tno2 = 0;
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
 402fb3c:	900b883a 	mov	r5,r18
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
 402fb40:	8c000504 	addi	r16,r17,20

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
 402fb44:	88800315 	stw	r2,12(r17)
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
 402fb48:	90c00317 	ldw	r3,12(r18)

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
 402fb4c:	9c000315 	stw	r16,12(r19)

   tx = (struct timex *) p->nb_prot;

   tx->ttype = TIMEX;
 402fb50:	008002c4 	movi	r2,11
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
 402fb54:	88c00415 	stw	r3,16(r17)
   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);

   tx = (struct timex *) p->nb_prot;

   tx->ttype = TIMEX;
 402fb58:	88800505 	stb	r2,20(r17)
   tx->tcode = code;
 402fb5c:	85400045 	stb	r21,1(r16)
   tx->tno1 = tx->tno2 = 0;
 402fb60:	8000018d 	sth	zero,6(r16)
 402fb64:	8000010d 	sth	zero,4(r16)
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
 402fb68:	91800003 	ldbu	r6,0(r18)
 402fb6c:	89000704 	addi	r4,r17,28
 402fb70:	318003cc 	andi	r6,r6,15
 402fb74:	318d883a 	add	r6,r6,r6
 402fb78:	318d883a 	add	r6,r6,r6
 402fb7c:	31800204 	addi	r6,r6,8
 402fb80:	40096480 	call	4009648 <memcpy>

   tx->tchksum = 0;
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
 402fb84:	a00ad07a 	srli	r5,r20,1
 402fb88:	8009883a 	mov	r4,r16
   tx->ttype = TIMEX;
   tx->tcode = code;
   tx->tno1 = tx->tno2 = 0;
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));

   tx->tchksum = 0;
 402fb8c:	8000008d 	sth	zero,2(r16)
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
 402fb90:	40199b00 	call	40199b0 <cksum>

   p->nb_plen = icmp_pkt_len;
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
 402fb94:	88c00417 	ldw	r3,16(r17)
   tx->tcode = code;
   tx->tno1 = tx->tno2 = 0;
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));

   tx->tchksum = 0;
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
 402fb98:	0084303a 	nor	r2,zero,r2
 402fb9c:	8080008d 	sth	r2,2(r16)

   p->nb_plen = icmp_pkt_len;
 402fba0:	9d000415 	stw	r20,16(r19)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
 402fba4:	98c00715 	stw	r3,28(r19)
   i = ip_write(ICMP_PROT, p);
 402fba8:	980b883a 	mov	r5,r19
 402fbac:	01000044 	movi	r4,1
 402fbb0:	40295240 	call	4029524 <ip_write>
   if (i < 0)
 402fbb4:	10002b16 	blt	r2,zero,402fc64 <icmp_timex+0x1b8>
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send Time Exceeded\n");
#endif   /* NPDEBUG  */
      return;
   }
   icmp_mib.icmpOutMsgs++;
 402fbb8:	00810134 	movhi	r2,1028
 402fbbc:	108e1f04 	addi	r2,r2,14460
 402fbc0:	11000d17 	ldw	r4,52(r2)
   icmp_mib.icmpOutTimeExcds++;
 402fbc4:	10c01017 	ldw	r3,64(r2)
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send Time Exceeded\n");
#endif   /* NPDEBUG  */
      return;
   }
   icmp_mib.icmpOutMsgs++;
 402fbc8:	21000044 	addi	r4,r4,1
   icmp_mib.icmpOutTimeExcds++;
 402fbcc:	18c00044 	addi	r3,r3,1
 402fbd0:	10c01015 	stw	r3,64(r2)
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send Time Exceeded\n");
#endif   /* NPDEBUG  */
      return;
   }
   icmp_mib.icmpOutMsgs++;
 402fbd4:	11000d15 	stw	r4,52(r2)
   icmp_mib.icmpOutTimeExcds++;
   return;
}
 402fbd8:	dfc00917 	ldw	ra,36(sp)
 402fbdc:	dd800817 	ldw	r22,32(sp)
 402fbe0:	dd400717 	ldw	r21,28(sp)
 402fbe4:	dd000617 	ldw	r20,24(sp)
 402fbe8:	dcc00517 	ldw	r19,20(sp)
 402fbec:	dc800417 	ldw	r18,16(sp)
 402fbf0:	dc400317 	ldw	r17,12(sp)
 402fbf4:	dc000217 	ldw	r16,8(sp)
 402fbf8:	dec00a04 	addi	sp,sp,40
 402fbfc:	f800283a 	ret
   UNLOCK_NET_RESOURCE(FREEQ_RESID);

   if (p == NULL)
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 402fc00:	b0800017 	ldw	r2,0(r22)
 402fc04:	1080800c 	andi	r2,r2,512
 402fc08:	10002a1e 	bne	r2,zero,402fcb4 <icmp_timex+0x208>
         dprintf("icmp: can't alloc pkt\n");
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 402fc0c:	00c10134 	movhi	r3,1028
 402fc10:	18ce1f04 	addi	r3,r3,14460
 402fc14:	18800e17 	ldw	r2,56(r3)
 402fc18:	10800044 	addi	r2,r2,1
 402fc1c:	18800e15 	stw	r2,56(r3)
 402fc20:	003fed06 	br	402fbd8 <icmp_timex+0x12c>
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 402fc24:	20800317 	ldw	r2,12(r4)
 402fc28:	21800343 	ldbu	r6,13(r4)
 402fc2c:	29403fcc 	andi	r5,r5,255
 402fc30:	1004923a 	slli	r2,r2,8
 402fc34:	2940201c 	xori	r5,r5,128
 402fc38:	297fe004 	addi	r5,r5,-128
 402fc3c:	10bfc00c 	andi	r2,r2,65280
 402fc40:	308cb03a 	or	r6,r6,r2
 402fc44:	300ed23a 	srli	r7,r6,8
 402fc48:	010100f4 	movhi	r4,1027
 402fc4c:	21185904 	addi	r4,r4,24932
 402fc50:	31803fcc 	andi	r6,r6,255
 402fc54:	d8000015 	stw	zero,0(sp)
 402fc58:	d8000115 	stw	zero,4(sp)
 402fc5c:	4002ed40 	call	4002ed4 <printf>
 402fc60:	003fa206 	br	402faec <icmp_timex+0x40>
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
   i = ip_write(ICMP_PROT, p);
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
 402fc64:	01010134 	movhi	r4,1028
 402fc68:	210e1f04 	addi	r4,r4,14460
 402fc6c:	20800e17 	ldw	r2,56(r4)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 402fc70:	b0c00017 	ldw	r3,0(r22)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
   i = ip_write(ICMP_PROT, p);
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
 402fc74:	10800044 	addi	r2,r2,1
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 402fc78:	18c0860c 	andi	r3,r3,536
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
   i = ip_write(ICMP_PROT, p);
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
 402fc7c:	20800e15 	stw	r2,56(r4)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 402fc80:	183fd526 	beq	r3,zero,402fbd8 <icmp_timex+0x12c>
         dprintf("ICMP: Can't send Time Exceeded\n");
 402fc84:	010100f4 	movhi	r4,1027
 402fc88:	21186f04 	addi	r4,r4,25020
      return;
   }
   icmp_mib.icmpOutMsgs++;
   icmp_mib.icmpOutTimeExcds++;
   return;
}
 402fc8c:	dfc00917 	ldw	ra,36(sp)
 402fc90:	dd800817 	ldw	r22,32(sp)
 402fc94:	dd400717 	ldw	r21,28(sp)
 402fc98:	dd000617 	ldw	r20,24(sp)
 402fc9c:	dcc00517 	ldw	r19,20(sp)
 402fca0:	dc800417 	ldw	r18,16(sp)
 402fca4:	dc400317 	ldw	r17,12(sp)
 402fca8:	dc000217 	ldw	r16,8(sp)
 402fcac:	dec00a04 	addi	sp,sp,40
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send Time Exceeded\n");
 402fcb0:	4002fec1 	jmpi	4002fec <puts>

   if (p == NULL)
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
         dprintf("icmp: can't alloc pkt\n");
 402fcb4:	010100f4 	movhi	r4,1027
 402fcb8:	21186904 	addi	r4,r4,24996
 402fcbc:	4002fec0 	call	4002fec <puts>
 402fcc0:	003fd206 	br	402fc0c <icmp_timex+0x160>

0402fcc4 <icmp_destun>:
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
 402fcc4:	defff504 	addi	sp,sp,-44
 402fcc8:	ddc00915 	stw	r23,36(sp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 402fccc:	05c10134 	movhi	r23,1028
 402fcd0:	bde90e04 	addi	r23,r23,-23496
 402fcd4:	b8800017 	ldw	r2,0(r23)
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
 402fcd8:	dd800815 	stw	r22,32(sp)
 402fcdc:	dd400715 	stw	r21,28(sp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 402fce0:	1080040c 	andi	r2,r2,16
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
 402fce4:	dd000615 	stw	r20,24(sp)
 402fce8:	dcc00515 	stw	r19,20(sp)
 402fcec:	dc800415 	stw	r18,16(sp)
 402fcf0:	dfc00a15 	stw	ra,40(sp)
 402fcf4:	dc400315 	stw	r17,12(sp)
 402fcf8:	dc000215 	stw	r16,8(sp)
 402fcfc:	202b883a 	mov	r21,r4
 402fd00:	282d883a 	mov	r22,r5
 402fd04:	3025883a 	mov	r18,r6
 402fd08:	3827883a 	mov	r19,r7
 402fd0c:	dd000b17 	ldw	r20,44(sp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 402fd10:	10005b1e 	bne	r2,zero,402fe80 <icmp_destun+0x1bc>
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
 402fd14:	01000084 	movi	r4,2
 402fd18:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
 402fd1c:	01008504 	movi	r4,532
 402fd20:	401bf840 	call	401bf84 <pk_alloc>
 402fd24:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402fd28:	01000084 	movi	r4,2
 402fd2c:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 402fd30:	88006d26 	beq	r17,zero,402fee8 <icmp_destun+0x224>
      icmp_mib.icmpOutErrors++;
      return;
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 402fd34:	89000317 	ldw	r4,12(r17)
   pip->ip_src = src_addr;
   pip->ip_dest = host;

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
   p->nb_plen -= sizeof(struct ip);
 402fd38:	88800417 	ldw	r2,16(r17)
   p->net = net;     /* Put in the interface that this packet came in on */

   d = (struct destun *)p->nb_prot;

   if (typecode & 0xFF00)               /* if the type was sent */
 402fd3c:	98ffc00c 	andi	r3,r19,65280
   pip = (struct ip *)p->nb_prot;
   pip->ip_src = src_addr;
   pip->ip_dest = host;

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
 402fd40:	24000504 	addi	r16,r4,20
   p->nb_plen -= sizeof(struct ip);
 402fd44:	10bffb04 	addi	r2,r2,-20
      return;
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
   pip->ip_src = src_addr;
 402fd48:	25800315 	stw	r22,12(r4)
   pip->ip_dest = host;

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
   p->nb_plen -= sizeof(struct ip);
 402fd4c:	88800415 	stw	r2,16(r17)
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
   pip->ip_src = src_addr;
   pip->ip_dest = host;
 402fd50:	25400415 	stw	r21,16(r4)

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
 402fd54:	8c000315 	stw	r16,12(r17)
   p->nb_plen -= sizeof(struct ip);
   p->net = net;     /* Put in the interface that this packet came in on */
 402fd58:	8d000615 	stw	r20,24(r17)

   d = (struct destun *)p->nb_prot;

   if (typecode & 0xFF00)               /* if the type was sent */
 402fd5c:	18003726 	beq	r3,zero,402fe3c <icmp_destun+0x178>
      d->dtype = (char)(typecode >>8);  /* then use it */
 402fd60:	9804d23a 	srli	r2,r19,8
   else                                 /* else use default */
      d->dtype = DESTIN;
   d->dcode = (char)(typecode & 0xFF);
   d->dno1 = d->dno2 = 0;
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 402fd64:	98c03fcc 	andi	r3,r19,255

   if (typecode & 0xFF00)               /* if the type was sent */
      d->dtype = (char)(typecode >>8);  /* then use it */
   else                                 /* else use default */
      d->dtype = DESTIN;
   d->dcode = (char)(typecode & 0xFF);
 402fd68:	84c00045 	stb	r19,1(r16)
   p->net = net;     /* Put in the interface that this packet came in on */

   d = (struct destun *)p->nb_prot;

   if (typecode & 0xFF00)               /* if the type was sent */
      d->dtype = (char)(typecode >>8);  /* then use it */
 402fd6c:	20800505 	stb	r2,20(r4)
   else                                 /* else use default */
      d->dtype = DESTIN;
   d->dcode = (char)(typecode & 0xFF);
   d->dno1 = d->dno2 = 0;
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 402fd70:	00800104 	movi	r2,4
   if (typecode & 0xFF00)               /* if the type was sent */
      d->dtype = (char)(typecode >>8);  /* then use it */
   else                                 /* else use default */
      d->dtype = DESTIN;
   d->dcode = (char)(typecode & 0xFF);
   d->dno1 = d->dno2 = 0;
 402fd74:	8000018d 	sth	zero,6(r16)
 402fd78:	8000010d 	sth	zero,4(r16)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 402fd7c:	18803726 	beq	r3,r2,402fe5c <icmp_destun+0x198>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
 402fd80:	90800017 	ldw	r2,0(r18)
 402fd84:	81800204 	addi	r6,r16,8

   d->dchksum = 0;
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
 402fd88:	8009883a 	mov	r4,r16
   d->dno1 = d->dno2 = 0;
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
      d->dno2 = htons(net->n_mtu - net->n_lnh);
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
 402fd8c:	80800215 	stw	r2,8(r16)
 402fd90:	90c00117 	ldw	r3,4(r18)

   d->dchksum = 0;
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
 402fd94:	01400484 	movi	r5,18
   d->dno1 = d->dno2 = 0;
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
      d->dno2 = htons(net->n_mtu - net->n_lnh);
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
 402fd98:	30c00115 	stw	r3,4(r6)
 402fd9c:	90800217 	ldw	r2,8(r18)
 402fda0:	30800215 	stw	r2,8(r6)
 402fda4:	90c00317 	ldw	r3,12(r18)
 402fda8:	30c00315 	stw	r3,12(r6)
 402fdac:	90800417 	ldw	r2,16(r18)
 402fdb0:	30800415 	stw	r2,16(r6)
 402fdb4:	90c00517 	ldw	r3,20(r18)
 402fdb8:	30c00515 	stw	r3,20(r6)
 402fdbc:	90800617 	ldw	r2,24(r18)
 402fdc0:	30800615 	stw	r2,24(r6)

   d->dchksum = 0;
 402fdc4:	8000008d 	sth	zero,2(r16)
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
 402fdc8:	40199b00 	call	40199b0 <cksum>
 402fdcc:	0084303a 	nor	r2,zero,r2
 402fdd0:	8080008d 	sth	r2,2(r16)

   p->nb_plen =  sizeof(struct destun);
 402fdd4:	00800904 	movi	r2,36
 402fdd8:	88800415 	stw	r2,16(r17)
   p->fhost = host;
 402fddc:	8d400715 	stw	r21,28(r17)
   i = ip_write(ICMP_PROT, p);
 402fde0:	880b883a 	mov	r5,r17
 402fde4:	01000044 	movi	r4,1
 402fde8:	40295240 	call	4029524 <ip_write>
   if (i < 0)
 402fdec:	10004716 	blt	r2,zero,402ff0c <icmp_destun+0x248>
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send dest unreachable\n");
#endif   /* NPDEBUG  */
      return;
   }
   icmp_mib.icmpOutMsgs++;
 402fdf0:	00810134 	movhi	r2,1028
 402fdf4:	108e1f04 	addi	r2,r2,14460
 402fdf8:	11000d17 	ldw	r4,52(r2)
   icmp_mib.icmpOutDestUnreachs++;
 402fdfc:	10c00f17 	ldw	r3,60(r2)
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send dest unreachable\n");
#endif   /* NPDEBUG  */
      return;
   }
   icmp_mib.icmpOutMsgs++;
 402fe00:	21000044 	addi	r4,r4,1
   icmp_mib.icmpOutDestUnreachs++;
 402fe04:	18c00044 	addi	r3,r3,1
 402fe08:	10c00f15 	stw	r3,60(r2)
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send dest unreachable\n");
#endif   /* NPDEBUG  */
      return;
   }
   icmp_mib.icmpOutMsgs++;
 402fe0c:	11000d15 	stw	r4,52(r2)
   icmp_mib.icmpOutDestUnreachs++;
   return;
}
 402fe10:	dfc00a17 	ldw	ra,40(sp)
 402fe14:	ddc00917 	ldw	r23,36(sp)
 402fe18:	dd800817 	ldw	r22,32(sp)
 402fe1c:	dd400717 	ldw	r21,28(sp)
 402fe20:	dd000617 	ldw	r20,24(sp)
 402fe24:	dcc00517 	ldw	r19,20(sp)
 402fe28:	dc800417 	ldw	r18,16(sp)
 402fe2c:	dc400317 	ldw	r17,12(sp)
 402fe30:	dc000217 	ldw	r16,8(sp)
 402fe34:	dec00b04 	addi	sp,sp,44
 402fe38:	f800283a 	ret
   d = (struct destun *)p->nb_prot;

   if (typecode & 0xFF00)               /* if the type was sent */
      d->dtype = (char)(typecode >>8);  /* then use it */
   else                                 /* else use default */
      d->dtype = DESTIN;
 402fe3c:	008000c4 	movi	r2,3
 402fe40:	20800505 	stb	r2,20(r4)
   d->dcode = (char)(typecode & 0xFF);
   d->dno1 = d->dno2 = 0;
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 402fe44:	98c03fcc 	andi	r3,r19,255
 402fe48:	00800104 	movi	r2,4

   if (typecode & 0xFF00)               /* if the type was sent */
      d->dtype = (char)(typecode >>8);  /* then use it */
   else                                 /* else use default */
      d->dtype = DESTIN;
   d->dcode = (char)(typecode & 0xFF);
 402fe4c:	84c00045 	stb	r19,1(r16)
   d->dno1 = d->dno2 = 0;
 402fe50:	8000018d 	sth	zero,6(r16)
 402fe54:	8000010d 	sth	zero,4(r16)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 402fe58:	18bfc91e 	bne	r3,r2,402fd80 <icmp_destun+0xbc>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
 402fe5c:	a1000817 	ldw	r4,32(r20)
 402fe60:	a0c00917 	ldw	r3,36(r20)
 402fe64:	1907c83a 	sub	r3,r3,r4
 402fe68:	1805d23a 	srai	r2,r3,8
 402fe6c:	1806923a 	slli	r3,r3,8
 402fe70:	10803fcc 	andi	r2,r2,255
 402fe74:	10c4b03a 	or	r2,r2,r3
 402fe78:	8080018d 	sth	r2,6(r16)
 402fe7c:	003fc006 	br	402fd80 <icmp_destun+0xbc>
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 402fe80:	38803fcc 	andi	r2,r7,255
 402fe84:	1085883a 	add	r2,r2,r2
 402fe88:	00c100f4 	movhi	r3,1027
 402fe8c:	18d91604 	addi	r3,r3,25688
 402fe90:	1085883a 	add	r2,r2,r2
 402fe94:	10c5883a 	add	r2,r2,r3
 402fe98:	200ed23a 	srli	r7,r4,8
 402fe9c:	2006d43a 	srli	r3,r4,16
 402fea0:	2010d63a 	srli	r8,r4,24
 402fea4:	11400017 	ldw	r5,0(r2)
 402fea8:	18c03fcc 	andi	r3,r3,255
 402feac:	39c03fcc 	andi	r7,r7,255
 402feb0:	a9803fcc 	andi	r6,r21,255
 402feb4:	010100f4 	movhi	r4,1027
 402feb8:	21187704 	addi	r4,r4,25052
 402febc:	d8c00015 	stw	r3,0(sp)
 402fec0:	da000115 	stw	r8,4(sp)
 402fec4:	4002ed40 	call	4002ed4 <printf>
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
 402fec8:	01000084 	movi	r4,2
 402fecc:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
 402fed0:	01008504 	movi	r4,532
 402fed4:	401bf840 	call	401bf84 <pk_alloc>
 402fed8:	1023883a 	mov	r17,r2
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402fedc:	01000084 	movi	r4,2
 402fee0:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 402fee4:	883f931e 	bne	r17,zero,402fd34 <icmp_destun+0x70>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 402fee8:	b8800017 	ldw	r2,0(r23)
 402feec:	1080800c 	andi	r2,r2,512
 402fef0:	10001b1e 	bne	r2,zero,402ff60 <icmp_destun+0x29c>
         dprintf("icmp: can't alloc pkt\n");
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 402fef4:	00c10134 	movhi	r3,1028
 402fef8:	18ce1f04 	addi	r3,r3,14460
 402fefc:	18800e17 	ldw	r2,56(r3)
 402ff00:	10800044 	addi	r2,r2,1
 402ff04:	18800e15 	stw	r2,56(r3)
 402ff08:	003fc106 	br	402fe10 <icmp_destun+0x14c>
   p->nb_plen =  sizeof(struct destun);
   p->fhost = host;
   i = ip_write(ICMP_PROT, p);
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
 402ff0c:	01010134 	movhi	r4,1028
 402ff10:	210e1f04 	addi	r4,r4,14460
 402ff14:	20800e17 	ldw	r2,56(r4)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 402ff18:	b8c00017 	ldw	r3,0(r23)
   p->nb_plen =  sizeof(struct destun);
   p->fhost = host;
   i = ip_write(ICMP_PROT, p);
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
 402ff1c:	10800044 	addi	r2,r2,1
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 402ff20:	18c0860c 	andi	r3,r3,536
   p->nb_plen =  sizeof(struct destun);
   p->fhost = host;
   i = ip_write(ICMP_PROT, p);
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
 402ff24:	20800e15 	stw	r2,56(r4)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 402ff28:	183fb926 	beq	r3,zero,402fe10 <icmp_destun+0x14c>
         dprintf("ICMP: Can't send dest unreachable\n");
 402ff2c:	010100f4 	movhi	r4,1027
 402ff30:	21188404 	addi	r4,r4,25104
      return;
   }
   icmp_mib.icmpOutMsgs++;
   icmp_mib.icmpOutDestUnreachs++;
   return;
}
 402ff34:	dfc00a17 	ldw	ra,40(sp)
 402ff38:	ddc00917 	ldw	r23,36(sp)
 402ff3c:	dd800817 	ldw	r22,32(sp)
 402ff40:	dd400717 	ldw	r21,28(sp)
 402ff44:	dd000617 	ldw	r20,24(sp)
 402ff48:	dcc00517 	ldw	r19,20(sp)
 402ff4c:	dc800417 	ldw	r18,16(sp)
 402ff50:	dc400317 	ldw	r17,12(sp)
 402ff54:	dc000217 	ldw	r16,8(sp)
 402ff58:	dec00b04 	addi	sp,sp,44
   if (i < 0)
   {
      icmp_mib.icmpOutErrors++;
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
         dprintf("ICMP: Can't send dest unreachable\n");
 402ff5c:	4002fec1 	jmpi	4002fec <puts>

   if (p == NULL)
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
         dprintf("icmp: can't alloc pkt\n");
 402ff60:	010100f4 	movhi	r4,1027
 402ff64:	21186904 	addi	r4,r4,24996
 402ff68:	4002fec0 	call	4002fec <puts>
 402ff6c:	003fe106 	br	402fef4 <icmp_destun+0x230>

0402ff70 <icmprcv>:
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 402ff70:	defff204 	addi	sp,sp,-56
 402ff74:	df000c15 	stw	fp,48(sp)
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
 402ff78:	07010134 	movhi	fp,1028
 402ff7c:	e70e1f04 	addi	fp,fp,14460
 402ff80:	e0800017 	ldw	r2,0(fp)
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 402ff84:	ddc00b15 	stw	r23,44(sp)
   char sav_ch = 0;
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */

   pip = ip_head(p);                      /* find IP header */
 402ff88:	25c00317 	ldw	r23,12(r4)
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
 402ff8c:	10800044 	addi	r2,r2,1
 402ff90:	e0800015 	stw	r2,0(fp)
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 402ff94:	dd800a15 	stw	r22,40(sp)
 402ff98:	dd000815 	stw	r20,32(sp)
 402ff9c:	dfc00d15 	stw	ra,52(sp)
 402ffa0:	dd400915 	stw	r21,36(sp)
 402ffa4:	dcc00715 	stw	r19,28(sp)
 402ffa8:	dc800615 	stw	r18,24(sp)
 402ffac:	dc400515 	stw	r17,20(sp)
 402ffb0:	dc000415 	stw	r16,16(sp)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */

   pip = ip_head(p);                      /* find IP header */
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
 402ffb4:	b9800003 	ldbu	r6,0(r23)
   host = p->fhost;                       /* filled in by IP layer */

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402ffb8:	00810134 	movhi	r2,1028
 402ffbc:	10a90e04 	addi	r2,r2,-23496
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 402ffc0:	202d883a 	mov	r22,r4
   pip = ip_head(p);                      /* find IP header */
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
   host = p->fhost;                       /* filled in by IP layer */

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402ffc4:	10c00017 	ldw	r3,0(r2)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */

   pip = ip_head(p);                      /* find IP header */
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
 402ffc8:	21000417 	ldw	r4,16(r4)
 402ffcc:	308003cc 	andi	r2,r6,15
 402ffd0:	1085883a 	add	r2,r2,r2
 402ffd4:	1085883a 	add	r2,r2,r2
 402ffd8:	20a9c83a 	sub	r20,r4,r2
   host = p->fhost;                       /* filled in by IP layer */
 402ffdc:	b1000717 	ldw	r4,28(r22)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402ffe0:	18c1800c 	andi	r3,r3,1536
 402ffe4:	00818004 	movi	r2,1536

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */

   pip = ip_head(p);                      /* find IP header */
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
   host = p->fhost;                       /* filled in by IP layer */
 402ffe8:	d9000215 	stw	r4,8(sp)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 402ffec:	18806026 	beq	r3,r2,4030170 <icmprcv+0x200>
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
 402fff0:	308003cc 	andi	r2,r6,15
 402fff4:	1085883a 	add	r2,r2,r2

   osum = e->pchksum;
   e->pchksum = 0;

   if (len&1)
 402fff8:	a0c0004c 	andi	r3,r20,1
#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
 402fffc:	1085883a 	add	r2,r2,r2
 4030000:	15e5883a 	add	r18,r2,r23

   osum = e->pchksum;
   e->pchksum = 0;

   if (len&1)
 4030004:	d8c00315 	stw	r3,12(sp)
 4030008:	1807003a 	cmpeq	r3,r3,zero
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */

   osum = e->pchksum;
 403000c:	94c0008b 	ldhu	r19,2(r18)
   e->pchksum = 0;
 4030010:	9000008d 	sth	zero,2(r18)

   if (len&1)
 4030014:	18002a1e 	bne	r3,zero,40300c0 <icmprcv+0x150>
   {
      sav_ch = *(((char *) e) + len);
      ((char *)e)[len] = 0;
   }

   xsum = ~cksum(e, (len+1)>>1);
 4030018:	a0800044 	addi	r2,r20,1
 403001c:	102ad07a 	srli	r21,r2,1
   osum = e->pchksum;
   e->pchksum = 0;

   if (len&1)
   {
      sav_ch = *(((char *) e) + len);
 4030020:	9521883a 	add	r16,r18,r20
 4030024:	84400003 	ldbu	r17,0(r16)
      ((char *)e)[len] = 0;
   }

   xsum = ~cksum(e, (len+1)>>1);
 4030028:	9009883a 	mov	r4,r18
   e->pchksum = 0;

   if (len&1)
   {
      sav_ch = *(((char *) e) + len);
      ((char *)e)[len] = 0;
 403002c:	80000005 	stb	zero,0(r16)
   }

   xsum = ~cksum(e, (len+1)>>1);
 4030030:	a80b883a 	mov	r5,r21
 4030034:	40199b00 	call	40199b0 <cksum>
 4030038:	0084303a 	nor	r2,zero,r2
   if (len&1) *(((char *) e) + len) = sav_ch;
 403003c:	84400005 	stb	r17,0(r16)
   if (xsum != osum)
 4030040:	11bfffcc 	andi	r6,r2,65535
 4030044:	997fffcc 	andi	r5,r19,65535
 4030048:	2980581e 	bne	r5,r6,40301ac <icmprcv+0x23c>
      return ENP_BAD_HEADER;
   }

   e->pchksum = osum;

   switch (e->ptype) 
 403004c:	91400003 	ldbu	r5,0(r18)
 4030050:	008003c4 	movi	r2,15
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_BAD_HEADER;
   }

   e->pchksum = osum;
 4030054:	94c0008d 	sth	r19,2(r18)

   switch (e->ptype) 
 4030058:	28c03fcc 	andi	r3,r5,255
 403005c:	10c01f2e 	bgeu	r2,r3,40300dc <icmprcv+0x16c>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030060:	01010134 	movhi	r4,1028
 4030064:	21290e04 	addi	r4,r4,-23496
 4030068:	20800017 	ldw	r2,0(r4)
 403006c:	1081000c 	andi	r2,r2,1024
 4030070:	1000311e 	bne	r2,zero,4030138 <icmprcv+0x1c8>
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
       net_num(p->net), IPRP_ICMP);
#endif   /* IP_ROUTING */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4030074:	01000084 	movi	r4,2
 4030078:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(p);
 403007c:	b009883a 	mov	r4,r22
 4030080:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4030084:	01000084 	movi	r4,2
 4030088:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 403008c:	00800084 	movi	r2,2
      return ENP_NOT_MINE;
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
#endif   /* FULL_ICMP */
}
 4030090:	dfc00d17 	ldw	ra,52(sp)
 4030094:	df000c17 	ldw	fp,48(sp)
 4030098:	ddc00b17 	ldw	r23,44(sp)
 403009c:	dd800a17 	ldw	r22,40(sp)
 40300a0:	dd400917 	ldw	r21,36(sp)
 40300a4:	dd000817 	ldw	r20,32(sp)
 40300a8:	dcc00717 	ldw	r19,28(sp)
 40300ac:	dc800617 	ldw	r18,24(sp)
 40300b0:	dc400517 	ldw	r17,20(sp)
 40300b4:	dc000417 	ldw	r16,16(sp)
 40300b8:	dec00e04 	addi	sp,sp,56
 40300bc:	f800283a 	ret
   {
      sav_ch = *(((char *) e) + len);
      ((char *)e)[len] = 0;
   }

   xsum = ~cksum(e, (len+1)>>1);
 40300c0:	a0800044 	addi	r2,r20,1
 40300c4:	102ad07a 	srli	r21,r2,1
 40300c8:	9009883a 	mov	r4,r18
 40300cc:	a80b883a 	mov	r5,r21
 40300d0:	40199b00 	call	40199b0 <cksum>
 40300d4:	0084303a 	nor	r2,zero,r2
 40300d8:	003fd906 	br	4030040 <icmprcv+0xd0>
      return ENP_BAD_HEADER;
   }

   e->pchksum = osum;

   switch (e->ptype) 
 40300dc:	18c5883a 	add	r2,r3,r3
 40300e0:	1085883a 	add	r2,r2,r2
 40300e4:	00c100f4 	movhi	r3,1027
 40300e8:	18c03e04 	addi	r3,r3,248
 40300ec:	10c5883a 	add	r2,r2,r3
 40300f0:	11000017 	ldw	r4,0(r2)
 40300f4:	2000683a 	jmp	r4
 40300f8:	040301f4 	movhi	r16,3079
 40300fc:	04030060 	cmpeqi	r16,zero,3073
 4030100:	04030060 	cmpeqi	r16,zero,3073
 4030104:	0403056c 	andhi	r16,zero,3093
 4030108:	04030524 	muli	r16,zero,3092
 403010c:	040304d4 	movui	r16,3091
 4030110:	04030060 	cmpeqi	r16,zero,3073
 4030114:	04030060 	cmpeqi	r16,zero,3073
 4030118:	040303c4 	movi	r16,3087
 403011c:	04030060 	cmpeqi	r16,zero,3073
 4030120:	04030060 	cmpeqi	r16,zero,3073
 4030124:	04030334 	movhi	r16,3084
 4030128:	04030308 	cmpgei	r16,zero,3084
 403012c:	04030258 	cmpnei	r16,zero,3081
 4030130:	04030060 	cmpeqi	r16,zero,3073
 4030134:	04030234 	movhi	r16,3080
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("icmp: unhandled type %u\n", e->ptype);
 4030138:	29403fcc 	andi	r5,r5,255
 403013c:	2940201c 	xori	r5,r5,128
 4030140:	297fe004 	addi	r5,r5,-128
 4030144:	010100f4 	movhi	r4,1027
 4030148:	21190004 	addi	r4,r4,25600
 403014c:	4002ed40 	call	4002ed4 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 4030150:	00c10134 	movhi	r3,1028
 4030154:	18e90e04 	addi	r3,r3,-23496
 4030158:	18800017 	ldw	r2,0(r3)
 403015c:	1080008c 	andi	r2,r2,2
 4030160:	103fc426 	beq	r2,zero,4030074 <icmprcv+0x104>
 4030164:	b009883a 	mov	r4,r22
 4030168:	40285680 	call	4028568 <ip_dump>
 403016c:	003fc106 	br	4030074 <icmprcv+0x104>
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
   host = p->fhost;                       /* filled in by IP layer */

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
 4030170:	200ed23a 	srli	r7,r4,8
 4030174:	2004d43a 	srli	r2,r4,16
 4030178:	da000217 	ldw	r8,8(sp)
 403017c:	2006d63a 	srli	r3,r4,24
 4030180:	10803fcc 	andi	r2,r2,255
 4030184:	41803fcc 	andi	r6,r8,255
 4030188:	39c03fcc 	andi	r7,r7,255
 403018c:	010100f4 	movhi	r4,1027
 4030190:	21188d04 	addi	r4,r4,25140
 4030194:	a00b883a 	mov	r5,r20
 4030198:	d8800015 	stw	r2,0(sp)
 403019c:	d8c00115 	stw	r3,4(sp)
 40301a0:	4002ed40 	call	4002ed4 <printf>
 40301a4:	b9800003 	ldbu	r6,0(r23)
 40301a8:	003f9106 	br	402fff0 <icmprcv+0x80>
   if (len&1) *(((char *) e) + len) = sav_ch;
   if (xsum != osum)
   {
      e->pchksum = osum;
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 40301ac:	01010134 	movhi	r4,1028
 40301b0:	21290e04 	addi	r4,r4,-23496
 40301b4:	20800017 	ldw	r2,0(r4)
 40301b8:	00c18004 	movi	r3,1536

   xsum = ~cksum(e, (len+1)>>1);
   if (len&1) *(((char *) e) + len) = sav_ch;
   if (xsum != osum)
   {
      e->pchksum = osum;
 40301bc:	94c0008d 	sth	r19,2(r18)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 40301c0:	1081800c 	andi	r2,r2,1536
 40301c4:	10c10a26 	beq	r2,r3,40305f0 <icmprcv+0x680>
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
      }
#endif
      icmp_mib.icmpInErrors++;
 40301c8:	e0800117 	ldw	r2,4(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40301cc:	01000084 	movi	r4,2
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
      }
#endif
      icmp_mib.icmpInErrors++;
 40301d0:	10800044 	addi	r2,r2,1
 40301d4:	e0800115 	stw	r2,4(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40301d8:	401ca400 	call	401ca40 <LOCK_NET_RESOURCE>
      pk_free(p);
 40301dc:	b009883a 	mov	r4,r22
 40301e0:	401bf0c0 	call	401bf0c <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40301e4:	01000084 	movi	r4,2
 40301e8:	401c92c0 	call	401c92c <UNLOCK_NET_RESOURCE>
 40301ec:	00bff804 	movi	r2,-32
 40301f0:	003fa706 	br	4030090 <icmprcv+0x120>
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
 40301f4:	e0800817 	ldw	r2,32(fp)
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
 40301f8:	b009883a 	mov	r4,r22
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
 40301fc:	10800044 	addi	r2,r2,1
 4030200:	e0800815 	stw	r2,32(fp)
      return ENP_NOT_MINE;
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
#endif   /* FULL_ICMP */
}
 4030204:	dfc00d17 	ldw	ra,52(sp)
 4030208:	df000c17 	ldw	fp,48(sp)
 403020c:	ddc00b17 	ldw	r23,44(sp)
 4030210:	dd800a17 	ldw	r22,40(sp)
 4030214:	dd400917 	ldw	r21,36(sp)
 4030218:	dd000817 	ldw	r20,32(sp)
 403021c:	dcc00717 	ldw	r19,28(sp)
 4030220:	dc800617 	ldw	r18,24(sp)
 4030224:	dc400517 	ldw	r17,20(sp)
 4030228:	dc000417 	ldw	r16,16(sp)
 403022c:	dec00e04 	addi	sp,sp,56
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
 4030230:	402b4b01 	jmpi	402b4b0 <ip_raw_input>
      }
      /* re-used packet was pk_free()d by net->send() */
      return (0);
   case INFO:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030234:	00c10134 	movhi	r3,1028
 4030238:	18e90e04 	addi	r3,r3,-23496
 403023c:	18800017 	ldw	r2,0(r3)
 4030240:	1081000c 	andi	r2,r2,1024
 4030244:	103f8b26 	beq	r2,zero,4030074 <icmprcv+0x104>
         dprintf("icmp: got info request\n");
 4030248:	010100f4 	movhi	r4,1027
 403024c:	2118fa04 	addi	r4,r4,25576
 4030250:	4002fec0 	call	4002fec <puts>
 4030254:	003f8706 	br	4030074 <icmprcv+0x104>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030258:	01010134 	movhi	r4,1028
 403025c:	21290e04 	addi	r4,r4,-23496
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
 4030260:	e0800917 	ldw	r2,36(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030264:	20c00017 	ldw	r3,0(r4)
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
 4030268:	04010134 	movhi	r16,1028
 403026c:	840e1f04 	addi	r16,r16,14460
 4030270:	10800044 	addi	r2,r2,1
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030274:	18c1000c 	andi	r3,r3,1024
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
 4030278:	e0800915 	stw	r2,36(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 403027c:	1801051e 	bne	r3,zero,4030694 <icmprcv+0x724>
         dprintf("ICMP: got timestamp request\n");
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
 4030280:	00800384 	movi	r2,14
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 4030284:	9009883a 	mov	r4,r18
 4030288:	01400284 	movi	r5,10
      icmp_mib.icmpInTimestamps++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
         dprintf("ICMP: got timestamp request\n");
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
 403028c:	90800005 	stb	r2,0(r18)
      e->pchksum = 0;
 4030290:	9000008d 	sth	zero,2(r18)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 4030294:	40199b00 	call	40199b0 <cksum>
      pip->ip_src = pip->ip_dest;
 4030298:	b8c00417 	ldw	r3,16(r23)
      pip->ip_dest = host;
 403029c:	da000217 	ldw	r8,8(sp)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 40302a0:	0084303a 	nor	r2,zero,r2
      pip->ip_src = pip->ip_dest;
 40302a4:	b8c00315 	stw	r3,12(r23)
      pip->ip_dest = host;
 40302a8:	ba000415 	stw	r8,16(r23)
      icmp_mib.icmpOutMsgs++;
 40302ac:	81000d17 	ldw	r4,52(r16)
      icmp_mib.icmpOutTimestampReps++;
 40302b0:	80c01717 	ldw	r3,92(r16)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 40302b4:	9080008d 	sth	r2,2(r18)
      pip->ip_src = pip->ip_dest;
      pip->ip_dest = host;
      icmp_mib.icmpOutMsgs++;
 40302b8:	21000044 	addi	r4,r4,1
      icmp_mib.icmpOutTimestampReps++;
 40302bc:	18c00044 	addi	r3,r3,1
 40302c0:	80c01715 	stw	r3,92(r16)
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
      pip->ip_src = pip->ip_dest;
      pip->ip_dest = host;
      icmp_mib.icmpOutMsgs++;
 40302c4:	81000d15 	stw	r4,52(r16)
      icmp_mib.icmpOutTimestampReps++;
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 40302c8:	b8800003 	ldbu	r2,0(r23)
 40302cc:	b0c00317 	ldw	r3,12(r22)
      p->nb_plen = sizeof(struct tstamp);
      p->fhost = host;
 40302d0:	b2000715 	stw	r8,28(r22)
      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
      pip->ip_src = pip->ip_dest;
      pip->ip_dest = host;
      icmp_mib.icmpOutMsgs++;
      icmp_mib.icmpOutTimestampReps++;
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 40302d4:	108003cc 	andi	r2,r2,15
 40302d8:	1085883a 	add	r2,r2,r2
 40302dc:	1085883a 	add	r2,r2,r2
 40302e0:	1887883a 	add	r3,r3,r2
      p->nb_plen = sizeof(struct tstamp);
 40302e4:	00800504 	movi	r2,20
      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
      pip->ip_src = pip->ip_dest;
      pip->ip_dest = host;
      icmp_mib.icmpOutMsgs++;
      icmp_mib.icmpOutTimestampReps++;
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 40302e8:	b0c00315 	stw	r3,12(r22)
      p->nb_plen = sizeof(struct tstamp);
 40302ec:	b0800415 	stw	r2,16(r22)
      p->fhost = host;
      i = ip_write(ICMP_PROT, p);
 40302f0:	b00b883a 	mov	r5,r22
 40302f4:	01000044 	movi	r4,1
 40302f8:	40295240 	call	4029524 <ip_write>
      if (i < 0)
 40302fc:	1000a816 	blt	r2,zero,40305a0 <icmprcv+0x630>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return ENP_NOT_MINE;
 4030300:	0005883a 	mov	r2,zero
 4030304:	003f6206 	br	4030090 <icmprcv+0x120>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case PARAM:
      icmp_mib.icmpInParmProbs++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030308:	00810134 	movhi	r2,1028
 403030c:	10a90e04 	addi	r2,r2,-23496
 4030310:	11000017 	ldw	r4,0(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case PARAM:
      icmp_mib.icmpInParmProbs++;
 4030314:	e0800417 	ldw	r2,16(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030318:	20c1000c 	andi	r3,r4,1024
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case PARAM:
      icmp_mib.icmpInParmProbs++;
 403031c:	10800044 	addi	r2,r2,1
 4030320:	e0800415 	stw	r2,16(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030324:	1800d41e 	bne	r3,zero,4030678 <icmprcv+0x708>
         dprintf("ICMP: got param problem message\n");
      if (NDEBUG & DUMP)
 4030328:	2080008c 	andi	r2,r4,2
 403032c:	103f5126 	beq	r2,zero,4030074 <icmprcv+0x104>
 4030330:	003f8c06 	br	4030164 <icmprcv+0x1f4>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030334:	02010134 	movhi	r8,1028
 4030338:	42290e04 	addi	r8,r8,-23496
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
 403033c:	e0800317 	ldw	r2,12(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030340:	40c00017 	ldw	r3,0(r8)
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
 4030344:	10800044 	addi	r2,r2,1
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030348:	18c1000c 	andi	r3,r3,1024
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
 403034c:	e0800315 	stw	r2,12(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030350:	183f4826 	beq	r3,zero,4030074 <icmprcv+0x104>
      {
         struct timex * pt =  (struct  timex *)e;

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 4030354:	b1400717 	ldw	r5,28(r22)
 4030358:	010100f4 	movhi	r4,1027
 403035c:	2118d404 	addi	r4,r4,25424
 4030360:	280cd23a 	srli	r6,r5,8
 4030364:	280ed43a 	srli	r7,r5,16
 4030368:	2804d63a 	srli	r2,r5,24
 403036c:	31803fcc 	andi	r6,r6,255
 4030370:	29403fcc 	andi	r5,r5,255
 4030374:	39c03fcc 	andi	r7,r7,255
 4030378:	d8800015 	stw	r2,0(sp)
 403037c:	4002ed40 	call	4002ed4 <printf>
          PUSH_IPADDR(p->fhost));
         dprintf(" about %u.%u.%u.%u\n", PUSH_IPADDR(pt->tip.ip_dest));
 4030380:	91400617 	ldw	r5,24(r18)
 4030384:	010100f4 	movhi	r4,1027
 4030388:	2118dd04 	addi	r4,r4,25460
 403038c:	280cd23a 	srli	r6,r5,8
 4030390:	280ed43a 	srli	r7,r5,16
 4030394:	2804d63a 	srli	r2,r5,24
 4030398:	31803fcc 	andi	r6,r6,255
 403039c:	29403fcc 	andi	r5,r5,255
 40303a0:	39c03fcc 	andi	r7,r7,255
 40303a4:	d8800015 	stw	r2,0(sp)
 40303a8:	4002ed40 	call	4002ed4 <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 40303ac:	00c10134 	movhi	r3,1028
 40303b0:	18e90e04 	addi	r3,r3,-23496
 40303b4:	18800017 	ldw	r2,0(r3)
 40303b8:	1080008c 	andi	r2,r2,2
 40303bc:	103f2d26 	beq	r2,zero,4030074 <icmprcv+0x104>
 40303c0:	003f6806 	br	4030164 <icmprcv+0x1f4>
   switch (e->ptype) 
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 40303c4:	02010134 	movhi	r8,1028
 40303c8:	42290e04 	addi	r8,r8,-23496
   e->pchksum = osum;

   switch (e->ptype) 
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
 40303cc:	e0800717 	ldw	r2,28(fp)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 40303d0:	41000017 	ldw	r4,0(r8)
 40303d4:	00c18004 	movi	r3,1536
   e->pchksum = osum;

   switch (e->ptype) 
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
 40303d8:	10800044 	addi	r2,r2,1
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 40303dc:	2101800c 	andi	r4,r4,1536
   e->pchksum = osum;

   switch (e->ptype) 
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
 40303e0:	e0800715 	stw	r2,28(fp)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 40303e4:	20c0cb26 	beq	r4,r3,4030714 <icmprcv+0x7a4>
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
#endif
      e->ptype = ECHOREP;
      e->pchksum = 0;
      if (len&1)  /* pad odd length packets for checksum routine */
 40303e8:	d9000317 	ldw	r4,12(sp)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
#endif
      e->ptype = ECHOREP;
      e->pchksum = 0;
 40303ec:	9000008d 	sth	zero,2(r18)
      icmp_mib.icmpInEchos++;
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
#endif
      e->ptype = ECHOREP;
 40303f0:	90000005 	stb	zero,0(r18)
      e->pchksum = 0;
      if (len&1)  /* pad odd length packets for checksum routine */
 40303f4:	2005003a 	cmpeq	r2,r4,zero
 40303f8:	1000771e 	bne	r2,zero,40305d8 <icmprcv+0x668>
      {
         sav_ch = *(((char *) e) + len);
 40303fc:	9521883a 	add	r16,r18,r20
 4030400:	84400003 	ldbu	r17,0(r16)
         ((char *)e)[len] = 0;
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
 4030404:	a80b883a 	mov	r5,r21
      e->ptype = ECHOREP;
      e->pchksum = 0;
      if (len&1)  /* pad odd length packets for checksum routine */
      {
         sav_ch = *(((char *) e) + len);
         ((char *)e)[len] = 0;
 4030408:	80000005 	stb	zero,0(r16)
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
 403040c:	9009883a 	mov	r4,r18
 4030410:	40199b00 	call	40199b0 <cksum>
 4030414:	0084303a 	nor	r2,zero,r2
 4030418:	9080008d 	sth	r2,2(r18)
      if (len&1) *(((char *) e) + len) = sav_ch;
 403041c:	84400005 	stb	r17,0(r16)
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
 4030420:	b9000417 	ldw	r4,16(r23)
 4030424:	00bfffc4 	movi	r2,-1
 4030428:	20806726 	beq	r4,r2,40305c8 <icmprcv+0x658>
 403042c:	2004963a 	slli	r2,r4,24
 4030430:	00f80034 	movhi	r3,57344
 4030434:	10bc002c 	andhi	r2,r2,61440
 4030438:	10c06326 	beq	r2,r3,40305c8 <icmprcv+0x658>
 403043c:	b1400617 	ldw	r5,24(r22)
 4030440:	28800c17 	ldw	r2,48(r5)
 4030444:	28c00a17 	ldw	r3,40(r5)
 4030448:	0084303a 	nor	r2,zero,r2
 403044c:	10c4b03a 	or	r2,r2,r3
 4030450:	20805e26 	beq	r4,r2,40305cc <icmprcv+0x65c>
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
      }
      else pip->ip_src = pip->ip_dest;
 4030454:	b9000315 	stw	r4,12(r23)

      pip->ip_dest = host;
 4030458:	da000217 	ldw	r8,8(sp)
      icmp_mib.icmpOutEchoReps++;
      icmp_mib.icmpOutMsgs++;
      p->fhost = host;
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 403045c:	b1000317 	ldw	r4,12(r22)
      p->nb_plen = len;

      i = ip_write(ICMP_PROT, p);
 4030460:	b00b883a 	mov	r5,r22
      {
         pip->ip_src = p->net->n_ipaddr;
      }
      else pip->ip_src = pip->ip_dest;

      pip->ip_dest = host;
 4030464:	ba000415 	stw	r8,16(r23)
      icmp_mib.icmpOutEchoReps++;
 4030468:	e0c01517 	ldw	r3,84(fp)
      icmp_mib.icmpOutMsgs++;
 403046c:	e0800d17 	ldw	r2,52(fp)
         pip->ip_src = p->net->n_ipaddr;
      }
      else pip->ip_src = pip->ip_dest;

      pip->ip_dest = host;
      icmp_mib.icmpOutEchoReps++;
 4030470:	18c00044 	addi	r3,r3,1
      icmp_mib.icmpOutMsgs++;
 4030474:	10800044 	addi	r2,r2,1
 4030478:	e0800d15 	stw	r2,52(fp)
         pip->ip_src = p->net->n_ipaddr;
      }
      else pip->ip_src = pip->ip_dest;

      pip->ip_dest = host;
      icmp_mib.icmpOutEchoReps++;
 403047c:	e0c01515 	stw	r3,84(fp)
      icmp_mib.icmpOutMsgs++;
      p->fhost = host;
 4030480:	b2000715 	stw	r8,28(r22)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 4030484:	b8800003 	ldbu	r2,0(r23)
      p->nb_plen = len;
 4030488:	b5000415 	stw	r20,16(r22)

      pip->ip_dest = host;
      icmp_mib.icmpOutEchoReps++;
      icmp_mib.icmpOutMsgs++;
      p->fhost = host;
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 403048c:	108003cc 	andi	r2,r2,15
 4030490:	1085883a 	add	r2,r2,r2
 4030494:	1085883a 	add	r2,r2,r2
 4030498:	2089883a 	add	r4,r4,r2
 403049c:	b1000315 	stw	r4,12(r22)
      p->nb_plen = len;

      i = ip_write(ICMP_PROT, p);
 40304a0:	01000044 	movi	r4,1
 40304a4:	40295240 	call	4029524 <ip_write>
      if (i < 0)
 40304a8:	103f950e 	bge	r2,zero,4030300 <icmprcv+0x390>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (UPCTRACE))
 40304ac:	00c10134 	movhi	r3,1028
 40304b0:	18e90e04 	addi	r3,r3,-23496
 40304b4:	18800017 	ldw	r2,0(r3)
 40304b8:	1081000c 	andi	r2,r2,1024
 40304bc:	103f9026 	beq	r2,zero,4030300 <icmprcv+0x390>
            dprintf("icmp: reply failed\n");
 40304c0:	010100f4 	movhi	r4,1027
 40304c4:	2118a904 	addi	r4,r4,25252
 40304c8:	4002fec0 	call	4002fec <puts>
 40304cc:	0005883a 	mov	r2,zero
 40304d0:	003eef06 	br	4030090 <icmprcv+0x120>
      break;
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40304d4:	01010134 	movhi	r4,1028
 40304d8:	21290e04 	addi	r4,r4,-23496
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
 40304dc:	e0800617 	ldw	r2,24(fp)
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40304e0:	20c00017 	ldw	r3,0(r4)
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
 40304e4:	10800044 	addi	r2,r2,1
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40304e8:	18c1000c 	andi	r3,r3,1024
      LOCK_NET_RESOURCE(FREEQ_RESID);
      pk_free(p);
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      break;
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
 40304ec:	e0800615 	stw	r2,24(fp)
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40304f0:	18004a1e 	bne	r3,zero,403061c <icmprcv+0x6ac>
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
      }
#endif   /* NPDEBUG */
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
 40304f4:	b1000617 	ldw	r4,24(r22)
 40304f8:	94400117 	ldw	r17,4(r18)
 40304fc:	94c00617 	ldw	r19,24(r18)
 4030500:	40184b80 	call	40184b8 <if_netnumber>
 4030504:	100f883a 	mov	r7,r2
 4030508:	880d883a 	mov	r6,r17
 403050c:	9809883a 	mov	r4,r19
 4030510:	017fffc4 	movi	r5,-1
 4030514:	00800104 	movi	r2,4
 4030518:	d8800015 	stw	r2,0(sp)
 403051c:	402b9980 	call	402b998 <add_route>
 4030520:	003ed406 	br	4030074 <icmprcv+0x104>
      icmp_du(p, pdp);
      break;
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030524:	00810134 	movhi	r2,1028
 4030528:	10a90e04 	addi	r2,r2,-23496
 403052c:	10c00017 	ldw	r3,0(r2)
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
      break;
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
 4030530:	e0800517 	ldw	r2,20(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030534:	18c1000c 	andi	r3,r3,1024
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
      break;
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
 4030538:	10800044 	addi	r2,r2,1
 403053c:	e0800515 	stw	r2,20(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030540:	183ecc26 	beq	r3,zero,4030074 <icmprcv+0x104>
      {
         dprintf("ICMP: source quench from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 4030544:	d8c00217 	ldw	r3,8(sp)
 4030548:	010100f4 	movhi	r4,1027
 403054c:	2118bc04 	addi	r4,r4,25328
 4030550:	180cd23a 	srli	r6,r3,8
 4030554:	180ed43a 	srli	r7,r3,16
 4030558:	1804d63a 	srli	r2,r3,24
 403055c:	19403fcc 	andi	r5,r3,255
 4030560:	31803fcc 	andi	r6,r6,255
 4030564:	39c03fcc 	andi	r7,r7,255
 4030568:	003f8e06 	br	40303a4 <icmprcv+0x434>
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 403056c:	01010134 	movhi	r4,1028
 4030570:	21290e04 	addi	r4,r4,-23496
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
 4030574:	e0800217 	ldw	r2,8(fp)
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030578:	20c00017 	ldw	r3,0(r4)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
 403057c:	10800044 	addi	r2,r2,1
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030580:	18c1000c 	andi	r3,r3,1024
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
 4030584:	e0800215 	stw	r2,8(fp)
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4030588:	1800461e 	bne	r3,zero,40306a4 <icmprcv+0x734>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
          PUSH_IPADDR(pdp->dip.ip_dest));
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
 403058c:	b009883a 	mov	r4,r22
 4030590:	900b883a 	mov	r5,r18
 4030594:	402fa6c0 	call	402fa6c <icmp_du>
 4030598:	00800084 	movi	r2,2
 403059c:	003ebc06 	br	4030090 <icmprcv+0x120>
      p->fhost = host;
      i = ip_write(ICMP_PROT, p);
      if (i < 0)
      {
#ifdef   NPDEBUG
         if (NDEBUG & UPCTRACE)
 40305a0:	00810134 	movhi	r2,1028
 40305a4:	10a90e04 	addi	r2,r2,-23496
 40305a8:	10c00017 	ldw	r3,0(r2)
 40305ac:	18c1000c 	andi	r3,r3,1024
 40305b0:	183f5326 	beq	r3,zero,4030300 <icmprcv+0x390>
            dprintf("icmp: can't send timestamp reply\n");
 40305b4:	010100f4 	movhi	r4,1027
 40305b8:	2118f104 	addi	r4,r4,25540
 40305bc:	4002fec0 	call	4002fec <puts>
 40305c0:	0005883a 	mov	r2,zero
 40305c4:	003eb206 	br	4030090 <icmprcv+0x120>
 40305c8:	b1400617 	ldw	r5,24(r22)
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
 40305cc:	28800a17 	ldw	r2,40(r5)
 40305d0:	b8800315 	stw	r2,12(r23)
 40305d4:	003fa006 	br	4030458 <icmprcv+0x4e8>
      {
         sav_ch = *(((char *) e) + len);
         ((char *)e)[len] = 0;
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
 40305d8:	a80b883a 	mov	r5,r21
 40305dc:	9009883a 	mov	r4,r18
 40305e0:	40199b00 	call	40199b0 <cksum>
 40305e4:	0084303a 	nor	r2,zero,r2
 40305e8:	9080008d 	sth	r2,2(r18)
 40305ec:	003f8c06 	br	4030420 <icmprcv+0x4b0>
   {
      e->pchksum = osum;
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
      {
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
 40305f0:	010100f4 	movhi	r4,1027
 40305f4:	21189504 	addi	r4,r4,25172
 40305f8:	4002ed40 	call	4002ed4 <printf>
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
 40305fc:	00c10134 	movhi	r3,1028
 4030600:	18e90e04 	addi	r3,r3,-23496
 4030604:	18800017 	ldw	r2,0(r3)
 4030608:	1080008c 	andi	r2,r2,2
 403060c:	103eee26 	beq	r2,zero,40301c8 <icmprcv+0x258>
 4030610:	b009883a 	mov	r4,r22
 4030614:	40285680 	call	4028568 <ip_dump>
 4030618:	003eeb06 	br	40301c8 <icmprcv+0x258>
      icmp_mib.icmpInRedirects++;
      rd = (struct redirect *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 403061c:	91400617 	ldw	r5,24(r18)
 4030620:	010100f4 	movhi	r4,1027
 4030624:	2118c604 	addi	r4,r4,25368
 4030628:	280cd23a 	srli	r6,r5,8
 403062c:	280ed43a 	srli	r7,r5,16
 4030630:	2804d63a 	srli	r2,r5,24
 4030634:	31803fcc 	andi	r6,r6,255
 4030638:	29403fcc 	andi	r5,r5,255
 403063c:	39c03fcc 	andi	r7,r7,255
 4030640:	d8800015 	stw	r2,0(sp)
 4030644:	4002ed40 	call	4002ed4 <printf>
          PUSH_IPADDR(rd->rdip.ip_dest));
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
 4030648:	91400117 	ldw	r5,4(r18)
 403064c:	010100f4 	movhi	r4,1027
 4030650:	2118d004 	addi	r4,r4,25408
 4030654:	280cd23a 	srli	r6,r5,8
 4030658:	280ed43a 	srli	r7,r5,16
 403065c:	2804d63a 	srli	r2,r5,24
 4030660:	31803fcc 	andi	r6,r6,255
 4030664:	29403fcc 	andi	r5,r5,255
 4030668:	39c03fcc 	andi	r7,r7,255
 403066c:	d8800015 	stw	r2,0(sp)
 4030670:	4002ed40 	call	4002ed4 <printf>
 4030674:	003f9f06 	br	40304f4 <icmprcv+0x584>
      break;
   case PARAM:
      icmp_mib.icmpInParmProbs++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
         dprintf("ICMP: got param problem message\n");
 4030678:	010100f4 	movhi	r4,1027
 403067c:	2118e204 	addi	r4,r4,25480
 4030680:	4002fec0 	call	4002fec <puts>
 4030684:	00c10134 	movhi	r3,1028
 4030688:	18e90e04 	addi	r3,r3,-23496
 403068c:	19000017 	ldw	r4,0(r3)
 4030690:	003f2506 	br	4030328 <icmprcv+0x3b8>
      break;
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
         dprintf("ICMP: got timestamp request\n");
 4030694:	010100f4 	movhi	r4,1027
 4030698:	2118ea04 	addi	r4,r4,25512
 403069c:	4002fec0 	call	4002fec <puts>
 40306a0:	003ef706 	br	4030280 <icmprcv+0x310>
      icmp_mib.icmpInDestUnreachs++;
      pdp = (struct destun *)e;
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
      {
         dprintf("ICMP: got dest unreachable type ");
 40306a4:	010100f4 	movhi	r4,1027
 40306a8:	2118ae04 	addi	r4,r4,25272
 40306ac:	4002ed40 	call	4002ed4 <printf>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 40306b0:	91800617 	ldw	r6,24(r18)
 40306b4:	91400047 	ldb	r5,1(r18)
 40306b8:	010100f4 	movhi	r4,1027
 40306bc:	2118b704 	addi	r4,r4,25308
 40306c0:	300ed23a 	srli	r7,r6,8
 40306c4:	3004d43a 	srli	r2,r6,16
 40306c8:	3006d63a 	srli	r3,r6,24
 40306cc:	39c03fcc 	andi	r7,r7,255
 40306d0:	10803fcc 	andi	r2,r2,255
 40306d4:	31803fcc 	andi	r6,r6,255
 40306d8:	d8800015 	stw	r2,0(sp)
 40306dc:	d8c00115 	stw	r3,4(sp)
 40306e0:	4002ed40 	call	4002ed4 <printf>
          PUSH_IPADDR(pdp->dip.ip_dest));
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 40306e4:	da000217 	ldw	r8,8(sp)
 40306e8:	010100f4 	movhi	r4,1027
 40306ec:	21189004 	addi	r4,r4,25152
 40306f0:	400cd23a 	srli	r6,r8,8
 40306f4:	400ed43a 	srli	r7,r8,16
 40306f8:	4004d63a 	srli	r2,r8,24
 40306fc:	41403fcc 	andi	r5,r8,255
 4030700:	31803fcc 	andi	r6,r6,255
 4030704:	39c03fcc 	andi	r7,r7,255
 4030708:	d8800015 	stw	r2,0(sp)
 403070c:	4002ed40 	call	4002ed4 <printf>
 4030710:	003f9e06 	br	403058c <icmprcv+0x61c>
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 4030714:	d8800217 	ldw	r2,8(sp)
 4030718:	d8c00217 	ldw	r3,8(sp)
 403071c:	010100f4 	movhi	r4,1027
 4030720:	2118a004 	addi	r4,r4,25216
 4030724:	100cd23a 	srli	r6,r2,8
 4030728:	100ed43a 	srli	r7,r2,16
 403072c:	1004d63a 	srli	r2,r2,24
 4030730:	31803fcc 	andi	r6,r6,255
 4030734:	39c03fcc 	andi	r7,r7,255
 4030738:	19403fcc 	andi	r5,r3,255
 403073c:	d8800015 	stw	r2,0(sp)
 4030740:	4002ed40 	call	4002ed4 <printf>
 4030744:	003f2806 	br	40303e8 <icmprcv+0x478>

04030748 <atexit>:
 4030748:	200b883a 	mov	r5,r4
 403074c:	000d883a 	mov	r6,zero
 4030750:	0009883a 	mov	r4,zero
 4030754:	000f883a 	mov	r7,zero
 4030758:	4030fb41 	jmpi	4030fb4 <__register_exitproc>

0403075c <_atoi_r>:
 403075c:	000d883a 	mov	r6,zero
 4030760:	01c00284 	movi	r7,10
 4030764:	4030ca41 	jmpi	4030ca4 <_strtol_r>

04030768 <atoi>:
 4030768:	000b883a 	mov	r5,zero
 403076c:	01800284 	movi	r6,10
 4030770:	4030ee81 	jmpi	4030ee8 <strtol>

04030774 <calloc>:
 4030774:	01810134 	movhi	r6,1028
 4030778:	31a0f704 	addi	r6,r6,-31780
 403077c:	2007883a 	mov	r3,r4
 4030780:	31000017 	ldw	r4,0(r6)
 4030784:	280d883a 	mov	r6,r5
 4030788:	180b883a 	mov	r5,r3
 403078c:	400b61c1 	jmpi	400b61c <_calloc_r>

04030790 <getc>:
 4030790:	defffd04 	addi	sp,sp,-12
 4030794:	dc400115 	stw	r17,4(sp)
 4030798:	04410134 	movhi	r17,1028
 403079c:	8c60f704 	addi	r17,r17,-31780
 40307a0:	88c00017 	ldw	r3,0(r17)
 40307a4:	dc000015 	stw	r16,0(sp)
 40307a8:	dfc00215 	stw	ra,8(sp)
 40307ac:	2021883a 	mov	r16,r4
 40307b0:	18000326 	beq	r3,zero,40307c0 <getc+0x30>
 40307b4:	18800e17 	ldw	r2,56(r3)
 40307b8:	1809883a 	mov	r4,r3
 40307bc:	10000e26 	beq	r2,zero,40307f8 <getc+0x68>
 40307c0:	80800117 	ldw	r2,4(r16)
 40307c4:	800b883a 	mov	r5,r16
 40307c8:	10bfffc4 	addi	r2,r2,-1
 40307cc:	80800115 	stw	r2,4(r16)
 40307d0:	10000f16 	blt	r2,zero,4030810 <getc+0x80>
 40307d4:	80c00017 	ldw	r3,0(r16)
 40307d8:	18800003 	ldbu	r2,0(r3)
 40307dc:	18c00044 	addi	r3,r3,1
 40307e0:	80c00015 	stw	r3,0(r16)
 40307e4:	dfc00217 	ldw	ra,8(sp)
 40307e8:	dc400117 	ldw	r17,4(sp)
 40307ec:	dc000017 	ldw	r16,0(sp)
 40307f0:	dec00304 	addi	sp,sp,12
 40307f4:	f800283a 	ret
 40307f8:	40084e80 	call	40084e8 <__sinit>
 40307fc:	80800117 	ldw	r2,4(r16)
 4030800:	800b883a 	mov	r5,r16
 4030804:	10bfffc4 	addi	r2,r2,-1
 4030808:	80800115 	stw	r2,4(r16)
 403080c:	103ff10e 	bge	r2,zero,40307d4 <getc+0x44>
 4030810:	89000017 	ldw	r4,0(r17)
 4030814:	dfc00217 	ldw	ra,8(sp)
 4030818:	dc400117 	ldw	r17,4(sp)
 403081c:	dc000017 	ldw	r16,0(sp)
 4030820:	dec00304 	addi	sp,sp,12
 4030824:	403092c1 	jmpi	403092c <__srget_r>

04030828 <_getc_r>:
 4030828:	defffd04 	addi	sp,sp,-12
 403082c:	dc400115 	stw	r17,4(sp)
 4030830:	dc000015 	stw	r16,0(sp)
 4030834:	dfc00215 	stw	ra,8(sp)
 4030838:	2021883a 	mov	r16,r4
 403083c:	2823883a 	mov	r17,r5
 4030840:	20000226 	beq	r4,zero,403084c <_getc_r+0x24>
 4030844:	20800e17 	ldw	r2,56(r4)
 4030848:	10000f26 	beq	r2,zero,4030888 <_getc_r+0x60>
 403084c:	88800117 	ldw	r2,4(r17)
 4030850:	8009883a 	mov	r4,r16
 4030854:	880b883a 	mov	r5,r17
 4030858:	10bfffc4 	addi	r2,r2,-1
 403085c:	88800115 	stw	r2,4(r17)
 4030860:	10001016 	blt	r2,zero,40308a4 <_getc_r+0x7c>
 4030864:	88c00017 	ldw	r3,0(r17)
 4030868:	18800003 	ldbu	r2,0(r3)
 403086c:	18c00044 	addi	r3,r3,1
 4030870:	88c00015 	stw	r3,0(r17)
 4030874:	dfc00217 	ldw	ra,8(sp)
 4030878:	dc400117 	ldw	r17,4(sp)
 403087c:	dc000017 	ldw	r16,0(sp)
 4030880:	dec00304 	addi	sp,sp,12
 4030884:	f800283a 	ret
 4030888:	40084e80 	call	40084e8 <__sinit>
 403088c:	88800117 	ldw	r2,4(r17)
 4030890:	8009883a 	mov	r4,r16
 4030894:	880b883a 	mov	r5,r17
 4030898:	10bfffc4 	addi	r2,r2,-1
 403089c:	88800115 	stw	r2,4(r17)
 40308a0:	103ff00e 	bge	r2,zero,4030864 <_getc_r+0x3c>
 40308a4:	dfc00217 	ldw	ra,8(sp)
 40308a8:	dc400117 	ldw	r17,4(sp)
 40308ac:	dc000017 	ldw	r16,0(sp)
 40308b0:	dec00304 	addi	sp,sp,12
 40308b4:	403092c1 	jmpi	403092c <__srget_r>

040308b8 <memcmp>:
 40308b8:	00c000c4 	movi	r3,3
 40308bc:	1980032e 	bgeu	r3,r6,40308cc <memcmp+0x14>
 40308c0:	2144b03a 	or	r2,r4,r5
 40308c4:	10c4703a 	and	r2,r2,r3
 40308c8:	10000f26 	beq	r2,zero,4030908 <memcmp+0x50>
 40308cc:	31ffffc4 	addi	r7,r6,-1
 40308d0:	3000061e 	bne	r6,zero,40308ec <memcmp+0x34>
 40308d4:	00000a06 	br	4030900 <memcmp+0x48>
 40308d8:	39ffffc4 	addi	r7,r7,-1
 40308dc:	00bfffc4 	movi	r2,-1
 40308e0:	21000044 	addi	r4,r4,1
 40308e4:	29400044 	addi	r5,r5,1
 40308e8:	38800526 	beq	r7,r2,4030900 <memcmp+0x48>
 40308ec:	20c00003 	ldbu	r3,0(r4)
 40308f0:	28800003 	ldbu	r2,0(r5)
 40308f4:	18bff826 	beq	r3,r2,40308d8 <memcmp+0x20>
 40308f8:	1885c83a 	sub	r2,r3,r2
 40308fc:	f800283a 	ret
 4030900:	0005883a 	mov	r2,zero
 4030904:	f800283a 	ret
 4030908:	180f883a 	mov	r7,r3
 403090c:	20c00017 	ldw	r3,0(r4)
 4030910:	28800017 	ldw	r2,0(r5)
 4030914:	18bfed1e 	bne	r3,r2,40308cc <memcmp+0x14>
 4030918:	31bfff04 	addi	r6,r6,-4
 403091c:	21000104 	addi	r4,r4,4
 4030920:	29400104 	addi	r5,r5,4
 4030924:	39bff936 	bltu	r7,r6,403090c <memcmp+0x54>
 4030928:	003fe806 	br	40308cc <memcmp+0x14>

0403092c <__srget_r>:
 403092c:	defffe04 	addi	sp,sp,-8
 4030930:	dc000015 	stw	r16,0(sp)
 4030934:	dfc00115 	stw	ra,4(sp)
 4030938:	2821883a 	mov	r16,r5
 403093c:	40310e80 	call	40310e8 <__srefill_r>
 4030940:	013fffc4 	movi	r4,-1
 4030944:	1000071e 	bne	r2,zero,4030964 <__srget_r+0x38>
 4030948:	80800117 	ldw	r2,4(r16)
 403094c:	81000017 	ldw	r4,0(r16)
 4030950:	10bfffc4 	addi	r2,r2,-1
 4030954:	20c00044 	addi	r3,r4,1
 4030958:	80800115 	stw	r2,4(r16)
 403095c:	21000003 	ldbu	r4,0(r4)
 4030960:	80c00015 	stw	r3,0(r16)
 4030964:	2005883a 	mov	r2,r4
 4030968:	dfc00117 	ldw	ra,4(sp)
 403096c:	dc000017 	ldw	r16,0(sp)
 4030970:	dec00204 	addi	sp,sp,8
 4030974:	f800283a 	ret

04030978 <__srget>:
 4030978:	00810134 	movhi	r2,1028
 403097c:	10a0f704 	addi	r2,r2,-31780
 4030980:	200b883a 	mov	r5,r4
 4030984:	11000017 	ldw	r4,0(r2)
 4030988:	403092c1 	jmpi	403092c <__srget_r>

0403098c <strchr>:
 403098c:	208000cc 	andi	r2,r4,3
 4030990:	2007883a 	mov	r3,r4
 4030994:	1000311e 	bne	r2,zero,4030a5c <strchr+0xd0>
 4030998:	29c03fcc 	andi	r7,r5,255
 403099c:	0015883a 	mov	r10,zero
 40309a0:	0007883a 	mov	r3,zero
 40309a4:	01400104 	movi	r5,4
 40309a8:	5004923a 	slli	r2,r10,8
 40309ac:	18c00044 	addi	r3,r3,1
 40309b0:	3894b03a 	or	r10,r7,r2
 40309b4:	197ffc1e 	bne	r3,r5,40309a8 <strchr+0x1c>
 40309b8:	200d883a 	mov	r6,r4
 40309bc:	21000017 	ldw	r4,0(r4)
 40309c0:	017fbff4 	movhi	r5,65279
 40309c4:	297fbfc4 	addi	r5,r5,-257
 40309c8:	02202074 	movhi	r8,32897
 40309cc:	42202004 	addi	r8,r8,-32640
 40309d0:	2145883a 	add	r2,r4,r5
 40309d4:	1204703a 	and	r2,r2,r8
 40309d8:	0106303a 	nor	r3,zero,r4
 40309dc:	10c4703a 	and	r2,r2,r3
 40309e0:	1000151e 	bne	r2,zero,4030a38 <strchr+0xac>
 40309e4:	2284f03a 	xor	r2,r4,r10
 40309e8:	1147883a 	add	r3,r2,r5
 40309ec:	1a06703a 	and	r3,r3,r8
 40309f0:	0084303a 	nor	r2,zero,r2
 40309f4:	10c4703a 	and	r2,r2,r3
 40309f8:	10000f1e 	bne	r2,zero,4030a38 <strchr+0xac>
 40309fc:	2813883a 	mov	r9,r5
 4030a00:	00000106 	br	4030a08 <strchr+0x7c>
 4030a04:	18000c1e 	bne	r3,zero,4030a38 <strchr+0xac>
 4030a08:	31800104 	addi	r6,r6,4
 4030a0c:	30800017 	ldw	r2,0(r6)
 4030a10:	1286f03a 	xor	r3,r2,r10
 4030a14:	124b883a 	add	r5,r2,r9
 4030a18:	1a49883a 	add	r4,r3,r9
 4030a1c:	2a0a703a 	and	r5,r5,r8
 4030a20:	0084303a 	nor	r2,zero,r2
 4030a24:	2208703a 	and	r4,r4,r8
 4030a28:	00c6303a 	nor	r3,zero,r3
 4030a2c:	1144703a 	and	r2,r2,r5
 4030a30:	1906703a 	and	r3,r3,r4
 4030a34:	103ff326 	beq	r2,zero,4030a04 <strchr+0x78>
 4030a38:	3007883a 	mov	r3,r6
 4030a3c:	00000206 	br	4030a48 <strchr+0xbc>
 4030a40:	38800426 	beq	r7,r2,4030a54 <strchr+0xc8>
 4030a44:	18c00044 	addi	r3,r3,1
 4030a48:	18800003 	ldbu	r2,0(r3)
 4030a4c:	103ffc1e 	bne	r2,zero,4030a40 <strchr+0xb4>
 4030a50:	3800041e 	bne	r7,zero,4030a64 <strchr+0xd8>
 4030a54:	1805883a 	mov	r2,r3
 4030a58:	f800283a 	ret
 4030a5c:	29c03fcc 	andi	r7,r5,255
 4030a60:	003ff906 	br	4030a48 <strchr+0xbc>
 4030a64:	0005883a 	mov	r2,zero
 4030a68:	f800283a 	ret

04030a6c <strcpy>:
 4030a6c:	2904b03a 	or	r2,r5,r4
 4030a70:	108000cc 	andi	r2,r2,3
 4030a74:	10000826 	beq	r2,zero,4030a98 <strcpy+0x2c>
 4030a78:	2007883a 	mov	r3,r4
 4030a7c:	28800003 	ldbu	r2,0(r5)
 4030a80:	29400044 	addi	r5,r5,1
 4030a84:	18800005 	stb	r2,0(r3)
 4030a88:	18c00044 	addi	r3,r3,1
 4030a8c:	103ffb1e 	bne	r2,zero,4030a7c <strcpy+0x10>
 4030a90:	2005883a 	mov	r2,r4
 4030a94:	f800283a 	ret
 4030a98:	29800017 	ldw	r6,0(r5)
 4030a9c:	023fbff4 	movhi	r8,65279
 4030aa0:	423fbfc4 	addi	r8,r8,-257
 4030aa4:	02a02074 	movhi	r10,32897
 4030aa8:	52a02004 	addi	r10,r10,-32640
 4030aac:	3205883a 	add	r2,r6,r8
 4030ab0:	0186303a 	nor	r3,zero,r6
 4030ab4:	10c4703a 	and	r2,r2,r3
 4030ab8:	1284703a 	and	r2,r2,r10
 4030abc:	200f883a 	mov	r7,r4
 4030ac0:	10000b1e 	bne	r2,zero,4030af0 <strcpy+0x84>
 4030ac4:	4013883a 	mov	r9,r8
 4030ac8:	5011883a 	mov	r8,r10
 4030acc:	39800015 	stw	r6,0(r7)
 4030ad0:	29400104 	addi	r5,r5,4
 4030ad4:	29800017 	ldw	r6,0(r5)
 4030ad8:	39c00104 	addi	r7,r7,4
 4030adc:	3245883a 	add	r2,r6,r9
 4030ae0:	0186303a 	nor	r3,zero,r6
 4030ae4:	10c4703a 	and	r2,r2,r3
 4030ae8:	1204703a 	and	r2,r2,r8
 4030aec:	103ff726 	beq	r2,zero,4030acc <strcpy+0x60>
 4030af0:	3807883a 	mov	r3,r7
 4030af4:	003fe106 	br	4030a7c <strcpy+0x10>

04030af8 <strncmp>:
 4030af8:	30003926 	beq	r6,zero,4030be0 <strncmp+0xe8>
 4030afc:	2144b03a 	or	r2,r4,r5
 4030b00:	108000cc 	andi	r2,r2,3
 4030b04:	028000c4 	movi	r10,3
 4030b08:	1000241e 	bne	r2,zero,4030b9c <strncmp+0xa4>
 4030b0c:	2011883a 	mov	r8,r4
 4030b10:	280f883a 	mov	r7,r5
 4030b14:	51801f2e 	bgeu	r10,r6,4030b94 <strncmp+0x9c>
 4030b18:	21000017 	ldw	r4,0(r4)
 4030b1c:	28800017 	ldw	r2,0(r5)
 4030b20:	20801c1e 	bne	r4,r2,4030b94 <strncmp+0x9c>
 4030b24:	31bfff04 	addi	r6,r6,-4
 4030b28:	30002d26 	beq	r6,zero,4030be0 <strncmp+0xe8>
 4030b2c:	027fbff4 	movhi	r9,65279
 4030b30:	4a7fbfc4 	addi	r9,r9,-257
 4030b34:	2247883a 	add	r3,r4,r9
 4030b38:	01602074 	movhi	r5,32897
 4030b3c:	29602004 	addi	r5,r5,-32640
 4030b40:	1946703a 	and	r3,r3,r5
 4030b44:	0104303a 	nor	r2,zero,r4
 4030b48:	10c4703a 	and	r2,r2,r3
 4030b4c:	1000241e 	bne	r2,zero,4030be0 <strncmp+0xe8>
 4030b50:	5017883a 	mov	r11,r10
 4030b54:	4815883a 	mov	r10,r9
 4030b58:	2813883a 	mov	r9,r5
 4030b5c:	00000a06 	br	4030b88 <strncmp+0x90>
 4030b60:	41000017 	ldw	r4,0(r8)
 4030b64:	39400017 	ldw	r5,0(r7)
 4030b68:	2285883a 	add	r2,r4,r10
 4030b6c:	1244703a 	and	r2,r2,r9
 4030b70:	0106303a 	nor	r3,zero,r4
 4030b74:	1886703a 	and	r3,r3,r2
 4030b78:	2140061e 	bne	r4,r5,4030b94 <strncmp+0x9c>
 4030b7c:	31bfff04 	addi	r6,r6,-4
 4030b80:	30001726 	beq	r6,zero,4030be0 <strncmp+0xe8>
 4030b84:	1800161e 	bne	r3,zero,4030be0 <strncmp+0xe8>
 4030b88:	42000104 	addi	r8,r8,4
 4030b8c:	39c00104 	addi	r7,r7,4
 4030b90:	59bff336 	bltu	r11,r6,4030b60 <strncmp+0x68>
 4030b94:	4009883a 	mov	r4,r8
 4030b98:	380b883a 	mov	r5,r7
 4030b9c:	31bfffc4 	addi	r6,r6,-1
 4030ba0:	01ffffc4 	movi	r7,-1
 4030ba4:	31c00a1e 	bne	r6,r7,4030bd0 <strncmp+0xd8>
 4030ba8:	20c00003 	ldbu	r3,0(r4)
 4030bac:	28800003 	ldbu	r2,0(r5)
 4030bb0:	1885c83a 	sub	r2,r3,r2
 4030bb4:	f800283a 	ret
 4030bb8:	30000926 	beq	r6,zero,4030be0 <strncmp+0xe8>
 4030bbc:	18000826 	beq	r3,zero,4030be0 <strncmp+0xe8>
 4030bc0:	31bfffc4 	addi	r6,r6,-1
 4030bc4:	21000044 	addi	r4,r4,1
 4030bc8:	29400044 	addi	r5,r5,1
 4030bcc:	31fff626 	beq	r6,r7,4030ba8 <strncmp+0xb0>
 4030bd0:	20c00007 	ldb	r3,0(r4)
 4030bd4:	28800007 	ldb	r2,0(r5)
 4030bd8:	18bff726 	beq	r3,r2,4030bb8 <strncmp+0xc0>
 4030bdc:	003ff206 	br	4030ba8 <strncmp+0xb0>
 4030be0:	0005883a 	mov	r2,zero
 4030be4:	f800283a 	ret

04030be8 <strncpy>:
 4030be8:	2904b03a 	or	r2,r5,r4
 4030bec:	108000cc 	andi	r2,r2,3
 4030bf0:	00c000c4 	movi	r3,3
 4030bf4:	1000291e 	bne	r2,zero,4030c9c <strncpy+0xb4>
 4030bf8:	1980282e 	bgeu	r3,r6,4030c9c <strncpy+0xb4>
 4030bfc:	1817883a 	mov	r11,r3
 4030c00:	2011883a 	mov	r8,r4
 4030c04:	02bfbff4 	movhi	r10,65279
 4030c08:	52bfbfc4 	addi	r10,r10,-257
 4030c0c:	02602074 	movhi	r9,32897
 4030c10:	4a602004 	addi	r9,r9,-32640
 4030c14:	29c00017 	ldw	r7,0(r5)
 4030c18:	3a85883a 	add	r2,r7,r10
 4030c1c:	01c6303a 	nor	r3,zero,r7
 4030c20:	10c4703a 	and	r2,r2,r3
 4030c24:	1244703a 	and	r2,r2,r9
 4030c28:	1000051e 	bne	r2,zero,4030c40 <strncpy+0x58>
 4030c2c:	31bfff04 	addi	r6,r6,-4
 4030c30:	41c00015 	stw	r7,0(r8)
 4030c34:	29400104 	addi	r5,r5,4
 4030c38:	42000104 	addi	r8,r8,4
 4030c3c:	59bff536 	bltu	r11,r6,4030c14 <strncpy+0x2c>
 4030c40:	400f883a 	mov	r7,r8
 4030c44:	30001326 	beq	r6,zero,4030c94 <strncpy+0xac>
 4030c48:	28800003 	ldbu	r2,0(r5)
 4030c4c:	31bfffc4 	addi	r6,r6,-1
 4030c50:	38c00044 	addi	r3,r7,1
 4030c54:	38800005 	stb	r2,0(r7)
 4030c58:	10000826 	beq	r2,zero,4030c7c <strncpy+0x94>
 4030c5c:	29400044 	addi	r5,r5,1
 4030c60:	30000c26 	beq	r6,zero,4030c94 <strncpy+0xac>
 4030c64:	28800003 	ldbu	r2,0(r5)
 4030c68:	31bfffc4 	addi	r6,r6,-1
 4030c6c:	29400044 	addi	r5,r5,1
 4030c70:	18800005 	stb	r2,0(r3)
 4030c74:	18c00044 	addi	r3,r3,1
 4030c78:	103ff91e 	bne	r2,zero,4030c60 <strncpy+0x78>
 4030c7c:	30000526 	beq	r6,zero,4030c94 <strncpy+0xac>
 4030c80:	1805883a 	mov	r2,r3
 4030c84:	30cd883a 	add	r6,r6,r3
 4030c88:	10000005 	stb	zero,0(r2)
 4030c8c:	10800044 	addi	r2,r2,1
 4030c90:	30bffd1e 	bne	r6,r2,4030c88 <strncpy+0xa0>
 4030c94:	2005883a 	mov	r2,r4
 4030c98:	f800283a 	ret
 4030c9c:	200f883a 	mov	r7,r4
 4030ca0:	003fe806 	br	4030c44 <strncpy+0x5c>

04030ca4 <_strtol_r>:
 4030ca4:	defff304 	addi	sp,sp,-52
 4030ca8:	00810134 	movhi	r2,1028
 4030cac:	10a14c04 	addi	r2,r2,-31440
 4030cb0:	dcc00615 	stw	r19,24(sp)
 4030cb4:	14c00017 	ldw	r19,0(r2)
 4030cb8:	ddc00a15 	stw	r23,40(sp)
 4030cbc:	dc000315 	stw	r16,12(sp)
 4030cc0:	dfc00c15 	stw	ra,48(sp)
 4030cc4:	df000b15 	stw	fp,44(sp)
 4030cc8:	dd800915 	stw	r22,36(sp)
 4030ccc:	dd400815 	stw	r21,32(sp)
 4030cd0:	dd000715 	stw	r20,28(sp)
 4030cd4:	dc800515 	stw	r18,20(sp)
 4030cd8:	dc400415 	stw	r17,16(sp)
 4030cdc:	282f883a 	mov	r23,r5
 4030ce0:	d9000015 	stw	r4,0(sp)
 4030ce4:	d9800115 	stw	r6,4(sp)
 4030ce8:	2821883a 	mov	r16,r5
 4030cec:	84400007 	ldb	r17,0(r16)
 4030cf0:	84000044 	addi	r16,r16,1
 4030cf4:	9c47883a 	add	r3,r19,r17
 4030cf8:	18800003 	ldbu	r2,0(r3)
 4030cfc:	1080020c 	andi	r2,r2,8
 4030d00:	103ffa1e 	bne	r2,zero,4030cec <_strtol_r+0x48>
 4030d04:	00800b44 	movi	r2,45
 4030d08:	88805c26 	beq	r17,r2,4030e7c <_strtol_r+0x1d8>
 4030d0c:	00800ac4 	movi	r2,43
 4030d10:	88805726 	beq	r17,r2,4030e70 <_strtol_r+0x1cc>
 4030d14:	0039883a 	mov	fp,zero
 4030d18:	3807003a 	cmpeq	r3,r7,zero
 4030d1c:	1800431e 	bne	r3,zero,4030e2c <_strtol_r+0x188>
 4030d20:	00800404 	movi	r2,16
 4030d24:	38804126 	beq	r7,r2,4030e2c <_strtol_r+0x188>
 4030d28:	3829883a 	mov	r20,r7
 4030d2c:	e02cc03a 	cmpne	r22,fp,zero
 4030d30:	b0004b1e 	bne	r22,zero,4030e60 <_strtol_r+0x1bc>
 4030d34:	04a00034 	movhi	r18,32768
 4030d38:	94bfffc4 	addi	r18,r18,-1
 4030d3c:	9009883a 	mov	r4,r18
 4030d40:	a00b883a 	mov	r5,r20
 4030d44:	d9c00215 	stw	r7,8(sp)
 4030d48:	400d8340 	call	400d834 <__umodsi3>
 4030d4c:	9009883a 	mov	r4,r18
 4030d50:	a00b883a 	mov	r5,r20
 4030d54:	102b883a 	mov	r21,r2
 4030d58:	400d82c0 	call	400d82c <__udivsi3>
 4030d5c:	1011883a 	mov	r8,r2
 4030d60:	9c45883a 	add	r2,r19,r17
 4030d64:	11000003 	ldbu	r4,0(r2)
 4030d68:	000b883a 	mov	r5,zero
 4030d6c:	000d883a 	mov	r6,zero
 4030d70:	20c0010c 	andi	r3,r4,4
 4030d74:	d9c00217 	ldw	r7,8(sp)
 4030d78:	18000e26 	beq	r3,zero,4030db4 <_strtol_r+0x110>
 4030d7c:	88fff404 	addi	r3,r17,-48
 4030d80:	19c0140e 	bge	r3,r7,4030dd4 <_strtol_r+0x130>
 4030d84:	30003116 	blt	r6,zero,4030e4c <_strtol_r+0x1a8>
 4030d88:	41403036 	bltu	r8,r5,4030e4c <_strtol_r+0x1a8>
 4030d8c:	2a002e26 	beq	r5,r8,4030e48 <_strtol_r+0x1a4>
 4030d90:	2d05383a 	mul	r2,r5,r20
 4030d94:	01800044 	movi	r6,1
 4030d98:	10cb883a 	add	r5,r2,r3
 4030d9c:	84400007 	ldb	r17,0(r16)
 4030da0:	84000044 	addi	r16,r16,1
 4030da4:	9c45883a 	add	r2,r19,r17
 4030da8:	11000003 	ldbu	r4,0(r2)
 4030dac:	20c0010c 	andi	r3,r4,4
 4030db0:	183ff21e 	bne	r3,zero,4030d7c <_strtol_r+0xd8>
 4030db4:	208000cc 	andi	r2,r4,3
 4030db8:	10000626 	beq	r2,zero,4030dd4 <_strtol_r+0x130>
 4030dbc:	2080004c 	andi	r2,r4,1
 4030dc0:	1005003a 	cmpeq	r2,r2,zero
 4030dc4:	1000231e 	bne	r2,zero,4030e54 <_strtol_r+0x1b0>
 4030dc8:	00800dc4 	movi	r2,55
 4030dcc:	8887c83a 	sub	r3,r17,r2
 4030dd0:	19ffec16 	blt	r3,r7,4030d84 <_strtol_r+0xe0>
 4030dd4:	30002d16 	blt	r6,zero,4030e8c <_strtol_r+0x1e8>
 4030dd8:	b000231e 	bne	r22,zero,4030e68 <_strtol_r+0x1c4>
 4030ddc:	2807883a 	mov	r3,r5
 4030de0:	d8800117 	ldw	r2,4(sp)
 4030de4:	10000426 	beq	r2,zero,4030df8 <_strtol_r+0x154>
 4030de8:	30000126 	beq	r6,zero,4030df0 <_strtol_r+0x14c>
 4030dec:	85ffffc4 	addi	r23,r16,-1
 4030df0:	d9000117 	ldw	r4,4(sp)
 4030df4:	25c00015 	stw	r23,0(r4)
 4030df8:	1805883a 	mov	r2,r3
 4030dfc:	dfc00c17 	ldw	ra,48(sp)
 4030e00:	df000b17 	ldw	fp,44(sp)
 4030e04:	ddc00a17 	ldw	r23,40(sp)
 4030e08:	dd800917 	ldw	r22,36(sp)
 4030e0c:	dd400817 	ldw	r21,32(sp)
 4030e10:	dd000717 	ldw	r20,28(sp)
 4030e14:	dcc00617 	ldw	r19,24(sp)
 4030e18:	dc800517 	ldw	r18,20(sp)
 4030e1c:	dc400417 	ldw	r17,16(sp)
 4030e20:	dc000317 	ldw	r16,12(sp)
 4030e24:	dec00d04 	addi	sp,sp,52
 4030e28:	f800283a 	ret
 4030e2c:	00800c04 	movi	r2,48
 4030e30:	88801d26 	beq	r17,r2,4030ea8 <_strtol_r+0x204>
 4030e34:	183fbc26 	beq	r3,zero,4030d28 <_strtol_r+0x84>
 4030e38:	00800c04 	movi	r2,48
 4030e3c:	88802726 	beq	r17,r2,4030edc <_strtol_r+0x238>
 4030e40:	01c00284 	movi	r7,10
 4030e44:	003fb806 	br	4030d28 <_strtol_r+0x84>
 4030e48:	a8ffd10e 	bge	r21,r3,4030d90 <_strtol_r+0xec>
 4030e4c:	01bfffc4 	movi	r6,-1
 4030e50:	003fd206 	br	4030d9c <_strtol_r+0xf8>
 4030e54:	008015c4 	movi	r2,87
 4030e58:	8887c83a 	sub	r3,r17,r2
 4030e5c:	003fdc06 	br	4030dd0 <_strtol_r+0x12c>
 4030e60:	04a00034 	movhi	r18,32768
 4030e64:	003fb506 	br	4030d3c <_strtol_r+0x98>
 4030e68:	0147c83a 	sub	r3,zero,r5
 4030e6c:	003fdc06 	br	4030de0 <_strtol_r+0x13c>
 4030e70:	84400007 	ldb	r17,0(r16)
 4030e74:	84000044 	addi	r16,r16,1
 4030e78:	003fa606 	br	4030d14 <_strtol_r+0x70>
 4030e7c:	84400007 	ldb	r17,0(r16)
 4030e80:	07000044 	movi	fp,1
 4030e84:	84000044 	addi	r16,r16,1
 4030e88:	003fa306 	br	4030d18 <_strtol_r+0x74>
 4030e8c:	e005003a 	cmpeq	r2,fp,zero
 4030e90:	10000f1e 	bne	r2,zero,4030ed0 <_strtol_r+0x22c>
 4030e94:	00e00034 	movhi	r3,32768
 4030e98:	d9000017 	ldw	r4,0(sp)
 4030e9c:	00800884 	movi	r2,34
 4030ea0:	20800015 	stw	r2,0(r4)
 4030ea4:	003fce06 	br	4030de0 <_strtol_r+0x13c>
 4030ea8:	81000007 	ldb	r4,0(r16)
 4030eac:	00801e04 	movi	r2,120
 4030eb0:	20800226 	beq	r4,r2,4030ebc <_strtol_r+0x218>
 4030eb4:	00801604 	movi	r2,88
 4030eb8:	20bfde1e 	bne	r4,r2,4030e34 <_strtol_r+0x190>
 4030ebc:	84400047 	ldb	r17,1(r16)
 4030ec0:	01c00404 	movi	r7,16
 4030ec4:	84000084 	addi	r16,r16,2
 4030ec8:	3829883a 	mov	r20,r7
 4030ecc:	003f9706 	br	4030d2c <_strtol_r+0x88>
 4030ed0:	00e00034 	movhi	r3,32768
 4030ed4:	18ffffc4 	addi	r3,r3,-1
 4030ed8:	003fef06 	br	4030e98 <_strtol_r+0x1f4>
 4030edc:	01c00204 	movi	r7,8
 4030ee0:	3829883a 	mov	r20,r7
 4030ee4:	003f9106 	br	4030d2c <_strtol_r+0x88>

04030ee8 <strtol>:
 4030ee8:	00810134 	movhi	r2,1028
 4030eec:	10a0f704 	addi	r2,r2,-31780
 4030ef0:	2013883a 	mov	r9,r4
 4030ef4:	11000017 	ldw	r4,0(r2)
 4030ef8:	2805883a 	mov	r2,r5
 4030efc:	300f883a 	mov	r7,r6
 4030f00:	480b883a 	mov	r5,r9
 4030f04:	100d883a 	mov	r6,r2
 4030f08:	4030ca41 	jmpi	4030ca4 <_strtol_r>

04030f0c <_vprintf_r>:
 4030f0c:	2807883a 	mov	r3,r5
 4030f10:	21400217 	ldw	r5,8(r4)
 4030f14:	300f883a 	mov	r7,r6
 4030f18:	180d883a 	mov	r6,r3
 4030f1c:	40048081 	jmpi	4004808 <___vfprintf_internal_r>

04030f20 <vprintf>:
 4030f20:	00810134 	movhi	r2,1028
 4030f24:	10a0f704 	addi	r2,r2,-31780
 4030f28:	12000017 	ldw	r8,0(r2)
 4030f2c:	280f883a 	mov	r7,r5
 4030f30:	200d883a 	mov	r6,r4
 4030f34:	41400217 	ldw	r5,8(r8)
 4030f38:	4009883a 	mov	r4,r8
 4030f3c:	40048081 	jmpi	4004808 <___vfprintf_internal_r>

04030f40 <_vsprintf_r>:
 4030f40:	deffe804 	addi	sp,sp,-96
 4030f44:	00808204 	movi	r2,520
 4030f48:	2811883a 	mov	r8,r5
 4030f4c:	02600034 	movhi	r9,32768
 4030f50:	4a7fffc4 	addi	r9,r9,-1
 4030f54:	d880030d 	sth	r2,12(sp)
 4030f58:	d80b883a 	mov	r5,sp
 4030f5c:	00bfffc4 	movi	r2,-1
 4030f60:	dfc01715 	stw	ra,92(sp)
 4030f64:	da000415 	stw	r8,16(sp)
 4030f68:	da400515 	stw	r9,20(sp)
 4030f6c:	d880038d 	sth	r2,14(sp)
 4030f70:	da000015 	stw	r8,0(sp)
 4030f74:	da400215 	stw	r9,8(sp)
 4030f78:	40048080 	call	4004808 <___vfprintf_internal_r>
 4030f7c:	d8c00017 	ldw	r3,0(sp)
 4030f80:	18000005 	stb	zero,0(r3)
 4030f84:	dfc01717 	ldw	ra,92(sp)
 4030f88:	dec01804 	addi	sp,sp,96
 4030f8c:	f800283a 	ret

04030f90 <vsprintf>:
 4030f90:	00810134 	movhi	r2,1028
 4030f94:	10a0f704 	addi	r2,r2,-31780
 4030f98:	2013883a 	mov	r9,r4
 4030f9c:	11000017 	ldw	r4,0(r2)
 4030fa0:	2805883a 	mov	r2,r5
 4030fa4:	300f883a 	mov	r7,r6
 4030fa8:	480b883a 	mov	r5,r9
 4030fac:	100d883a 	mov	r6,r2
 4030fb0:	4030f401 	jmpi	4030f40 <_vsprintf_r>

04030fb4 <__register_exitproc>:
 4030fb4:	defffa04 	addi	sp,sp,-24
 4030fb8:	00810134 	movhi	r2,1028
 4030fbc:	10a0f804 	addi	r2,r2,-31776
 4030fc0:	dc000015 	stw	r16,0(sp)
 4030fc4:	14000017 	ldw	r16,0(r2)
 4030fc8:	dd000415 	stw	r20,16(sp)
 4030fcc:	2829883a 	mov	r20,r5
 4030fd0:	81405217 	ldw	r5,328(r16)
 4030fd4:	dcc00315 	stw	r19,12(sp)
 4030fd8:	dc800215 	stw	r18,8(sp)
 4030fdc:	dc400115 	stw	r17,4(sp)
 4030fe0:	dfc00515 	stw	ra,20(sp)
 4030fe4:	2023883a 	mov	r17,r4
 4030fe8:	3027883a 	mov	r19,r6
 4030fec:	3825883a 	mov	r18,r7
 4030ff0:	28002526 	beq	r5,zero,4031088 <__register_exitproc+0xd4>
 4030ff4:	29000117 	ldw	r4,4(r5)
 4030ff8:	008007c4 	movi	r2,31
 4030ffc:	11002716 	blt	r2,r4,403109c <__register_exitproc+0xe8>
 4031000:	8800101e 	bne	r17,zero,4031044 <__register_exitproc+0x90>
 4031004:	2105883a 	add	r2,r4,r4
 4031008:	1085883a 	add	r2,r2,r2
 403100c:	20c00044 	addi	r3,r4,1
 4031010:	1145883a 	add	r2,r2,r5
 4031014:	0009883a 	mov	r4,zero
 4031018:	15000215 	stw	r20,8(r2)
 403101c:	28c00115 	stw	r3,4(r5)
 4031020:	2005883a 	mov	r2,r4
 4031024:	dfc00517 	ldw	ra,20(sp)
 4031028:	dd000417 	ldw	r20,16(sp)
 403102c:	dcc00317 	ldw	r19,12(sp)
 4031030:	dc800217 	ldw	r18,8(sp)
 4031034:	dc400117 	ldw	r17,4(sp)
 4031038:	dc000017 	ldw	r16,0(sp)
 403103c:	dec00604 	addi	sp,sp,24
 4031040:	f800283a 	ret
 4031044:	29802204 	addi	r6,r5,136
 4031048:	00800044 	movi	r2,1
 403104c:	110e983a 	sll	r7,r2,r4
 4031050:	30c04017 	ldw	r3,256(r6)
 4031054:	2105883a 	add	r2,r4,r4
 4031058:	1085883a 	add	r2,r2,r2
 403105c:	1185883a 	add	r2,r2,r6
 4031060:	19c6b03a 	or	r3,r3,r7
 4031064:	14802015 	stw	r18,128(r2)
 4031068:	14c00015 	stw	r19,0(r2)
 403106c:	00800084 	movi	r2,2
 4031070:	30c04015 	stw	r3,256(r6)
 4031074:	88bfe31e 	bne	r17,r2,4031004 <__register_exitproc+0x50>
 4031078:	30804117 	ldw	r2,260(r6)
 403107c:	11c4b03a 	or	r2,r2,r7
 4031080:	30804115 	stw	r2,260(r6)
 4031084:	003fdf06 	br	4031004 <__register_exitproc+0x50>
 4031088:	00810134 	movhi	r2,1028
 403108c:	108e3904 	addi	r2,r2,14564
 4031090:	100b883a 	mov	r5,r2
 4031094:	80805215 	stw	r2,328(r16)
 4031098:	003fd606 	br	4030ff4 <__register_exitproc+0x40>
 403109c:	00810034 	movhi	r2,1024
 40310a0:	1087d304 	addi	r2,r2,8012
 40310a4:	1000021e 	bne	r2,zero,40310b0 <__register_exitproc+0xfc>
 40310a8:	013fffc4 	movi	r4,-1
 40310ac:	003fdc06 	br	4031020 <__register_exitproc+0x6c>
 40310b0:	01006404 	movi	r4,400
 40310b4:	103ee83a 	callr	r2
 40310b8:	1007883a 	mov	r3,r2
 40310bc:	103ffa26 	beq	r2,zero,40310a8 <__register_exitproc+0xf4>
 40310c0:	80805217 	ldw	r2,328(r16)
 40310c4:	180b883a 	mov	r5,r3
 40310c8:	18000115 	stw	zero,4(r3)
 40310cc:	18800015 	stw	r2,0(r3)
 40310d0:	80c05215 	stw	r3,328(r16)
 40310d4:	18006215 	stw	zero,392(r3)
 40310d8:	18006315 	stw	zero,396(r3)
 40310dc:	0009883a 	mov	r4,zero
 40310e0:	883fc826 	beq	r17,zero,4031004 <__register_exitproc+0x50>
 40310e4:	003fd706 	br	4031044 <__register_exitproc+0x90>

040310e8 <__srefill_r>:
 40310e8:	defffd04 	addi	sp,sp,-12
 40310ec:	dc400115 	stw	r17,4(sp)
 40310f0:	dc000015 	stw	r16,0(sp)
 40310f4:	dfc00215 	stw	ra,8(sp)
 40310f8:	2023883a 	mov	r17,r4
 40310fc:	2821883a 	mov	r16,r5
 4031100:	20000226 	beq	r4,zero,403110c <__srefill_r+0x24>
 4031104:	20800e17 	ldw	r2,56(r4)
 4031108:	10004126 	beq	r2,zero,4031210 <__srefill_r+0x128>
 403110c:	80c0030b 	ldhu	r3,12(r16)
 4031110:	80000115 	stw	zero,4(r16)
 4031114:	1880080c 	andi	r2,r3,32
 4031118:	1000361e 	bne	r2,zero,40311f4 <__srefill_r+0x10c>
 403111c:	1880010c 	andi	r2,r3,4
 4031120:	1000211e 	bne	r2,zero,40311a8 <__srefill_r+0xc0>
 4031124:	1880040c 	andi	r2,r3,16
 4031128:	10005026 	beq	r2,zero,403126c <__srefill_r+0x184>
 403112c:	1880020c 	andi	r2,r3,8
 4031130:	1000541e 	bne	r2,zero,4031284 <__srefill_r+0x19c>
 4031134:	8080030b 	ldhu	r2,12(r16)
 4031138:	10800114 	ori	r2,r2,4
 403113c:	8080030d 	sth	r2,12(r16)
 4031140:	80800417 	ldw	r2,16(r16)
 4031144:	10004526 	beq	r2,zero,403125c <__srefill_r+0x174>
 4031148:	8080030b 	ldhu	r2,12(r16)
 403114c:	108000cc 	andi	r2,r2,3
 4031150:	1000361e 	bne	r2,zero,403122c <__srefill_r+0x144>
 4031154:	81800417 	ldw	r6,16(r16)
 4031158:	80c00817 	ldw	r3,32(r16)
 403115c:	81400717 	ldw	r5,28(r16)
 4031160:	81c00517 	ldw	r7,20(r16)
 4031164:	8809883a 	mov	r4,r17
 4031168:	81800015 	stw	r6,0(r16)
 403116c:	183ee83a 	callr	r3
 4031170:	80c0030b 	ldhu	r3,12(r16)
 4031174:	1009883a 	mov	r4,r2
 4031178:	80800115 	stw	r2,4(r16)
 403117c:	00b7ffc4 	movi	r2,-8193
 4031180:	1884703a 	and	r2,r3,r2
 4031184:	8080030d 	sth	r2,12(r16)
 4031188:	0100230e 	bge	zero,r4,4031218 <__srefill_r+0x130>
 403118c:	0009883a 	mov	r4,zero
 4031190:	2005883a 	mov	r2,r4
 4031194:	dfc00217 	ldw	ra,8(sp)
 4031198:	dc400117 	ldw	r17,4(sp)
 403119c:	dc000017 	ldw	r16,0(sp)
 40311a0:	dec00304 	addi	sp,sp,12
 40311a4:	f800283a 	ret
 40311a8:	81400c17 	ldw	r5,48(r16)
 40311ac:	283fe426 	beq	r5,zero,4031140 <__srefill_r+0x58>
 40311b0:	80801004 	addi	r2,r16,64
 40311b4:	28800226 	beq	r5,r2,40311c0 <__srefill_r+0xd8>
 40311b8:	8809883a 	mov	r4,r17
 40311bc:	40089b80 	call	40089b8 <_free_r>
 40311c0:	80800f17 	ldw	r2,60(r16)
 40311c4:	80000c15 	stw	zero,48(r16)
 40311c8:	80800115 	stw	r2,4(r16)
 40311cc:	103fdc26 	beq	r2,zero,4031140 <__srefill_r+0x58>
 40311d0:	80800e17 	ldw	r2,56(r16)
 40311d4:	0009883a 	mov	r4,zero
 40311d8:	80800015 	stw	r2,0(r16)
 40311dc:	2005883a 	mov	r2,r4
 40311e0:	dfc00217 	ldw	ra,8(sp)
 40311e4:	dc400117 	ldw	r17,4(sp)
 40311e8:	dc000017 	ldw	r16,0(sp)
 40311ec:	dec00304 	addi	sp,sp,12
 40311f0:	f800283a 	ret
 40311f4:	013fffc4 	movi	r4,-1
 40311f8:	2005883a 	mov	r2,r4
 40311fc:	dfc00217 	ldw	ra,8(sp)
 4031200:	dc400117 	ldw	r17,4(sp)
 4031204:	dc000017 	ldw	r16,0(sp)
 4031208:	dec00304 	addi	sp,sp,12
 403120c:	f800283a 	ret
 4031210:	40084e80 	call	40084e8 <__sinit>
 4031214:	003fbd06 	br	403110c <__srefill_r+0x24>
 4031218:	20000b1e 	bne	r4,zero,4031248 <__srefill_r+0x160>
 403121c:	10800814 	ori	r2,r2,32
 4031220:	013fffc4 	movi	r4,-1
 4031224:	8080030d 	sth	r2,12(r16)
 4031228:	003fd906 	br	4031190 <__srefill_r+0xa8>
 403122c:	00810134 	movhi	r2,1028
 4031230:	10a0f804 	addi	r2,r2,-31776
 4031234:	11000017 	ldw	r4,0(r2)
 4031238:	014100f4 	movhi	r5,1027
 403123c:	2944ab04 	addi	r5,r5,4780
 4031240:	40092300 	call	4009230 <_fwalk>
 4031244:	003fc306 	br	4031154 <__srefill_r+0x6c>
 4031248:	10801014 	ori	r2,r2,64
 403124c:	013fffc4 	movi	r4,-1
 4031250:	8080030d 	sth	r2,12(r16)
 4031254:	80000115 	stw	zero,4(r16)
 4031258:	003fcd06 	br	4031190 <__srefill_r+0xa8>
 403125c:	8809883a 	mov	r4,r17
 4031260:	800b883a 	mov	r5,r16
 4031264:	40093d00 	call	40093d0 <__smakebuf_r>
 4031268:	003fb706 	br	4031148 <__srefill_r+0x60>
 403126c:	18c01014 	ori	r3,r3,64
 4031270:	00800244 	movi	r2,9
 4031274:	013fffc4 	movi	r4,-1
 4031278:	88800015 	stw	r2,0(r17)
 403127c:	80c0030d 	sth	r3,12(r16)
 4031280:	003fc306 	br	4031190 <__srefill_r+0xa8>
 4031284:	8809883a 	mov	r4,r17
 4031288:	800b883a 	mov	r5,r16
 403128c:	40082500 	call	4008250 <_fflush_r>
 4031290:	103fd81e 	bne	r2,zero,40311f4 <__srefill_r+0x10c>
 4031294:	8080030b 	ldhu	r2,12(r16)
 4031298:	80000215 	stw	zero,8(r16)
 403129c:	80000615 	stw	zero,24(r16)
 40312a0:	10bffdcc 	andi	r2,r2,65527
 40312a4:	8080030d 	sth	r2,12(r16)
 40312a8:	003fa206 	br	4031134 <__srefill_r+0x4c>

040312ac <lflush>:
 40312ac:	20c0030b 	ldhu	r3,12(r4)
 40312b0:	01400244 	movi	r5,9
 40312b4:	0005883a 	mov	r2,zero
 40312b8:	18c0024c 	andi	r3,r3,9
 40312bc:	19400126 	beq	r3,r5,40312c4 <lflush+0x18>
 40312c0:	f800283a 	ret
 40312c4:	400844c1 	jmpi	400844c <fflush>
 40312c8:	00000010 	cmplti	zero,zero,0
 40312cc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 40312d0:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
 40312d4:	011f7c01 	jmpi	11f7c0 <OSCtxSw_SWITCH_PC+0x11f780>
 40312d8:	001b0c0b 	ldhu	zero,27696(zero)
 40312dc:	00000028 	cmpgeui	zero,zero,0
 40312e0:	00000018 	cmpnei	zero,zero,0
 40312e4:	0400ba38 	rdprs	r16,zero,744
 40312e8:	000005dc 	xori	zero,zero,23
 40312ec:	400e4400 	call	400e440 <settimeofday+0x18>
 40312f0:	92099170 	cmpltui	r8,r18,9797
 40312f4:	95079308 	cmpgei	r20,r18,7756
 40312f8:	97049605 	stb	fp,4696(r18)
 40312fc:	90019f03 	ldbu	zero,1660(r18)
 4031300:	9c06940a 	0x9c06940a
 4031304:	00000002 	0x2
 4031308:	00000028 	cmpgeui	zero,zero,0
 403130c:	00000044 	movi	zero,1
 4031310:	0400c014 	movui	r16,768
 4031314:	000005b0 	cmpltui	zero,zero,22
 4031318:	3c0e4400 	call	3c0e440 <OSCtxSw_SWITCH_PC+0x3c0e400>
 403131c:	92099168 	cmpgeui	r8,r18,9797
 4031320:	95079308 	cmpgei	r20,r18,7756
 4031324:	9c039705 	stb	r16,3676(r19)
 4031328:	90019f02 	0x90019f02
 403132c:	9606940a 	0x9606940a
 4031330:	00000004 	movi	zero,0
 4031334:	04006814 	movui	r16,416
