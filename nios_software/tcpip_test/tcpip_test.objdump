
tcpip_test.elf:     file format elf32-littlenios2
tcpip_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0004ca18 memsz 0x0004ca18 flags r-x
    LOAD off    0x0004da38 vaddr 0x0404ca38 paddr 0x0404e844 align 2**12
         filesz 0x00001e0c memsz 0x00001e0c flags rw-
    LOAD off    0x00050650 vaddr 0x04050650 paddr 0x04050650 align 2**12
         filesz 0x00000000 memsz 0x00008d58 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00046a10  040001bc  040001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005e6c  04046bcc  04046bcc  00047bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e0c  0404ca38  0404e844  0004da38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00008d58  04050650  04050650  00050650  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0004f844  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001a18  00000000  00000000  0004f870  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000555e  00000000  00000000  00051288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0007af3e  00000000  00000000  000567e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000112cd  00000000  00000000  000d1724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0003ff10  00000000  00000000  000e29f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006334  00000000  00000000  00122904  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003675  00000000  00000000  00128c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000138b7  00000000  00000000  0012c2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0013fb64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009a8  00000000  00000000  0013fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0014a8c0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0014a8c6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0014a8c9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0014a8ca  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0014a8ce  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0014a8d2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0014a8d6  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0014a8df  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0014a8e8  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0014a8f1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000026  00000000  00000000  0014a8fc  2**0
                  CONTENTS, READONLY
 28 .jdi          00003e55  00000000  00000000  0014a922  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001bc l    d  .text	00000000 .text
04046bcc l    d  .rodata	00000000 .rodata
0404ca38 l    d  .rwdata	00000000 .rwdata
04050650 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
04000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 iniche_init.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 simple_socket_server.c
04050654 l     O .bss	00000004 SSSCommand.4575
04050864 l     O .bss	000005f0 conn.4702
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 ctype_.c
04047c31 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0404ca50 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04002a4c l     F .text	00000058 __sprint_r
040485d2 l     O .rodata	00000010 blanks.3452
040485c2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04004ab0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040064ac l     F .text	00000058 std
040065b8 l     F .text	00000008 __fp_lock
040065c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0404e708 l     O .rwdata	00000004 charset
04048604 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0404874c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0400a9b8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400bae4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400c330 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400c450 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400c530 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400c68c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0404e714 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
0404e718 l     O .rwdata	00000004 lockid
0405068c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0404e71c l     O .rwdata	00000004 lockid
04050694 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0400e248 l     F .text	00000044 OS_InitMisc
0400e28c l     F .text	0000006c OS_InitRdyList
0400e3f0 l     F .text	000000e0 OS_InitTCBList
0400e16c l     F .text	000000dc OS_InitEventList
0400e2f8 l     F .text	0000007c OS_InitTaskIdle
0400e374 l     F .text	0000007c OS_InitTaskStat
0400e664 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
04010584 l     F .text	00000110 OS_FlagTaskRdy
040102dc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0404d264 l     O .rwdata	0000106c jtag_uart
0404e2d0 l     O .rwdata	00000030 sgdma_rx
0404e300 l     O .rwdata	00000030 sgdma_tx
0401509c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04015354 l     F .text	000002c4 altera_avalon_jtag_uart_irq
04015618 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
04016500 l     F .text	00000060 alt_get_errno
04016aa8 l     F .text	000000c0 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04016c14 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
040506ee l     O .bss	00000001 tse_system_count.4487
040506ef l     O .bss	00000001 is_init.4851
00000000 l    df *ABS*	00000000 altera_avalon_tse_system_info.c
00000000 l    df *ABS*	00000000 ins_tse_mac.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
04050704 l     O .bss	00000004 nclosers
04050f9c l     O .bss	0000003c closers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
0404e7b0 l     O .rwdata	00000004 cksum_select
00000000 l    df *ABS*	00000000 in_utils.c
04050fd8 l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
04023e84 l     F .text	000000cc dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
04025bb0 l       .text	00000000 done
04025a40 l       .text	00000000 asm1
04025b6c l       .text	00000000 loop0
04025a68 l       .text	00000000 loop
04025b88 l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
04050764 l     O .bss	00000004 kbd_init.3746
04050770 l     O .bss	00000004 cpu_statusreg
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
040507a4 l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
0402a2b4 l     F .text	00000098 sockargs
040294f0 l     F .text	000001fc t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
040325e8 l     F .text	000000e8 bld_options
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
040351f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0403529c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0403537c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04035834 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04035970 l     F .text	000000dc alt_file_locked
04035bd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
04035d54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
040362d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 allports.c
040507dc l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
04036cd8 l     F .text	00000198 check_interval_timers
040507e8 l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
040507ec l     O .bss	00000004 arp_timer
04050804 l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
0404e82c l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
04050834 l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
0404e834 l     O .rwdata	00000004 iCounter.4504
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
04050ff0 l     O .bss	0000001e nearBuf.4182
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0404482c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 icmp.c
0404e6e0 l     O .rwdata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0404675c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 refill.c
04046ad4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 alt_exit.c
04046af0 l     F .text	00000040 alt_sim_halt
04058d14 g     O .bss	00000014 soq
0400819c g     F .text	00000094 _mprec_log10
04017fe8 g     F .text	000000e0 alt_tse_get_mac_info
0404e76a g     O .rwdata	00000002 OSTaskNameSize
04008288 g     F .text	00000088 __any_on
04009ccc g     F .text	00000070 _isatty_r
04048724 g     O .rodata	00000028 __mprec_tinytens
04038bac g     F .text	00000780 ip_write_internal
0400c6ec g     F .text	000000c8 alt_main
040460e0 g     F .text	0000008c strcpy
04025304 g     F .text	000000ac pk_free
040020f4 g     F .text	000000a0 _puts_r
04058ec0 g     O .bss	00000100 alt_irq
0404e580 g     O .rwdata	00000009 rtp_priority
04009d3c g     F .text	00000078 _lseek_r
04045ab4 g     F .text	00000334 icmp_timex
04026c90 g     F .text	00000044 m_freem
04043fec g     F .text	00000048 vgetc
04025d2c g     F .text	0000001c clock_c
040507bc g     O .bss	00000004 tcp_optionbuf
04038674 g     F .text	00000084 if_getbynum
04010e78 g     F .text	000000d0 OS_MemInit
0405075c g     O .bss	00000004 dsc_rlyerrs
0405074c g     O .bss	00000004 dsc_releases
04021a2c g     F .text	00000074 TK_OSTaskQuery
04025a20 g       .text	00000000 asm_cksum
0401bee4 g     F .text	00000100 marvell_cfg_rgmii
0404e844 g       *ABS*	00000000 __flash_rwdata_start
04014db4 g     F .text	00000064 OSTimeSet
04043ecc g     F .text	00000120 vgetc_locked
0402656c g     F .text	00000020 post_task_setup
0403c5ac g     F .text	00000348 ipr_stats
04033f54 g     F .text	00000134 tcp_attach
0404e7c0 g     O .rwdata	00000004 reqlist_len
0402813c g     F .text	00000084 tcp_tick
04020c58 g     F .text	00000074 print_ipad
04021928 g     F .text	00000104 tcp_wakeup
0400b4d8 g     F .text	00000088 __eqdf2
04050708 g     O .bss	00000004 igmp_timers_are_running
04000ea8 g     F .text	000000ec led_bit_toggle
04030e74 g     F .text	0000012c tcp_pulloutofband
04019564 g     F .text	000001f0 alt_tse_phy_print_profile
0400cdc4 g     F .text	000006b4 OSEventPendMulti
040593a8 g       *ABS*	00000000 __alt_heap_start
04036730 g     F .text	00000020 OSTaskCreateHook
04024af0 g     F .text	00000074 dhc_ifacedone
0401bc54 g     F .text	000000a8 marvell_phy_cfg
0403c948 g     F .text	00000400 ip_rcv
04043c1c g     F .text	0000017c vfseek
0402ccd4 g     F .text	00000120 soqremque
0403e798 g     F .text	00000858 udpdemux
0401d6e4 g     F .text	00000104 tse_mac_close
0400207c g     F .text	00000044 printf
04050808 g     O .bss	00000004 rt_mib
0404e742 g     O .rwdata	00000002 OSMboxEn
04024a00 g     F .text	00000060 dhc_state_init
04046604 g     F .text	00000024 vsprintf
04015f6c g     F .text	00000124 alt_avalon_sgdma_do_sync_transfer
0400d4cc g     F .text	0000007c OSIntEnter
0400964c g     F .text	00000068 __sseek
04006514 g     F .text	000000a4 __sinit
0403d8ec g     F .text	00000118 in_delmulti
0400984c g     F .text	00000130 __swbuf_r
04050820 g     O .bss	00000004 so_evtmap_create
0404e752 g     O .rwdata	00000002 OSQEn
0404219c g     F .text	00000094 in_pcballoc
0404e7dc g     O .rwdata	00000002 socket_defaults
04007338 g     F .text	00000084 _setlocale_r
040374a0 g     F .text	00000498 send_arp
04006614 g     F .text	00000068 __sfmoreglue
04042c88 g     F .text	00000368 vfopen_locked
04050658 g     O .bss	00000004 SSSLEDCommandQ
0400ca80 g     F .text	000000d0 __malloc_unlock
0403678c g     F .text	0000001c OSTaskStatHook
04036bbc g     F .text	00000058 prep_modules
040201a0 g     F .text	000001b8 bsd_i_sockoptlen
0405069c g     O .bss	00000001 OSLockNesting
0404e7b8 g     O .rwdata	00000004 xids
0400235c g     F .text	00000674 strerror
0401824c g     F .text	00000e18 getPHYSpeed
040431e8 g     F .text	00000040 vfclose
04058db4 g     O .bss	0000002c tcb
0404e790 g     O .rwdata	00000002 OSDataSize
04035e14 g     F .text	00000038 alt_remap_cached
0405069d g     O .bss	00000001 OSRunning
040383a8 g     F .text	000002cc grat_arp
040010dc g     F .text	0000005c get_ip_addr
04041bb4 g     F .text	000000ac inet_pton
040387d8 g     F .text	0000009c reg_type
040588b8 g     O .bss	000000f0 dhc_states
0401ef9c g     F .text	00000198 igmp_fasttimo
040433ac g     F .text	0000005c vunlink_flag_open_files
040247a8 g     F .text	00000088 dhc_halt
040166c0 g     F .text	000003e8 alt_avalon_sgdma_construct_descriptor_burst
04050740 g     O .bss	00000004 dsc_acks
04058de0 g     O .bss	000000e0 tcpstat
0403be5c g     F .text	0000035c ip_reasm_copy_queued_fragments_into_reassy_buffer
04027220 g     F .text	000000a8 dtom
040324ec g     F .text	000000fc tcp_setpersist
040298c8 g     F .text	000001a4 t_getsockopt
04001e84 g     F .text	000000e0 memmove
04050750 g     O .bss	00000004 dsc_naks
040276c4 g     F .text	000005f8 ip_output
040367d0 g     F .text	0000001c OSInitHookBegin
04045de8 g     F .text	00000054 icmp_du
0404e7b4 g     O .rwdata	00000004 num_net_tasks
04050844 g     O .bss	00000004 vfiles
0404e788 g     O .rwdata	00000002 OSTmrSize
040412b0 g     F .text	00000104 dhc_main_ipset
04006604 g     F .text	00000010 _cleanup
0403af54 g     F .text	000002e0 ip_reasm_process_first_fragment
04008310 g     F .text	000000bc _Balloc
040506a0 g     O .bss	00000004 OSIdleCtr
0405065c g     O .bss	00000004 SSSLEDLightshowSem
0401af18 g     F .text	00000194 alt_tse_phy_set_adv_1000
0404e7a0 g     O .rwdata	00000001 max_mac_system
040401cc g     F .text	000005f0 ip_setmoptions
0400b5e8 g     F .text	00000088 __gtdf2
0401724c g     F .text	00000a14 alt_tse_system_add_sys
04041674 g     F .text	0000002c md_fseek
040363fc g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0400e998 g     F .text	000002e0 OS_TCBInit
0403b234 g     F .text	000000a0 ip_reassm
04024830 g     F .text	000001d0 dhc_reclaim
040591a0 g     O .bss	00000010 udp_mib
04000000 g     F .entry	0000001c __reset
0402a100 g     F .text	000000e4 t_shutdown
04001794 g     F .text	000001ec sss_handle_receive
04029b5c g     F .text	00000150 t_recvfrom
0404e78e g     O .rwdata	00000002 OSTmrWheelTblSize
040409b0 g     F .text	0000067c u_mctest_run
040161d4 g     F .text	00000070 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
0403da74 g     F .text	00000094 prep_ifaces
04000020 g       *ABS*	00000000 __flash_exceptions_start
04050724 g     O .bss	00000001 to_netmain
04024f70 g     F .text	000000dc pk_alloc
0404e72e g     O .rwdata	00000002 OSEventSize
04000ac4 g     F .text	000002ec alt_SSSErrorHandler
040506a4 g     O .bss	00000001 OSPrioHighRdy
04009c58 g     F .text	00000074 _fstat_r
04050e7c g     O .bss	00000120 tse_mac_device
040216a0 g     F .text	0000004c tk_nettick
04036750 g     F .text	00000020 OSTaskDelHook
0405067c g     O .bss	00000004 errno
040460cc g     F .text	00000014 __srget
0402e000 g     F .text	000000cc in_pcbnotify
040363dc g       .text	00000000 OSStartHighRdy
040589a8 g     O .bss	00000014 lilfreeq
04000208 g     F .text	00000624 alt_uCOSIIErrorHandler
0403db30 g     F .text	00000028 evtmap_setup
0401358c g     F .text	00000200 OSTaskCreateExt
04050728 g     O .bss	00000004 tcp_sleep_timeout
0402d700 g     F .text	000001d0 sbdrop
0405081c g     O .bss	00000004 net_system_exit
040591b0 g     O .bss	00000068 icmp_mib
04033040 g     F .text	00000078 tcp_getseq
0403df40 g     F .text	000000cc ip_raw_alloc
0401b770 g     F .text	000004e4 alt_tse_phy_set_common_speed
0400fdf8 g     F .text	00000068 OSFlagPendGetFlagsRdy
0404e76e g     O .rwdata	00000002 OSTaskStatStkSize
0405838c g     O .bss	00000010 pmac_groups
04022ecc g     F .text	00000b3c dhc_request
0402b38c g     F .text	000007e4 soreceive
0400ee04 g     F .text	00000334 OSFlagAccept
040115b0 g     F .text	000000c8 OSQFlush
04010f48 g     F .text	00000154 OSQAccept
04050684 g     O .bss	00000004 alt_argv
040566f8 g       *ABS*	00000000 _gp
0403c8f4 g     F .text	00000054 ip_reasm_send_icmp_timex
04036098 g     F .text	00000118 usleep
04043228 g     F .text	00000048 vfflush
04058cbc g     O .bss	00000040 resid_semaphore
04020b10 g     F .text	00000148 hexdump
0403ae0c g     F .text	000000a8 ip_reasm_incr_mem_useage
040265c4 g     F .text	00000034 calloc2
0401f658 g     F .text	0000007c igmp_leavegroup
040133b8 g     F .text	000001d4 OSTaskCreate
04012e44 g     F .text	00000574 OSTaskChangePrio
04050698 g     O .bss	00000004 alt_heapsem
04032e8c g     F .text	000000e8 tcp_close
0400ec78 g     F .text	0000018c OSDebugInit
0401378c g     F .text	0000040c OSTaskDel
04044448 g     F .text	0000006c vferror
04001b60 g     F .text	00000148 setup_phy
04036034 g     F .text	00000064 alt_uncached_malloc
04016d40 g     F .text	00000060 tse_mac_initTransInfo2
0403f4a8 g     F .text	000000c0 udp_alloc
0404e3e8 g     O .rwdata	00000180 alt_fd_list
04055088 g     O .bss	00000370 OSFlagTbl
040507a8 g     O .bss	00000008 mbstat
04045f54 g     F .text	00000090 _getc_r
04045ebc g     F .text	00000098 getc
0400df48 g     F .text	000000b8 OS_EventTaskRemove
0403fdbc g     F .text	00000158 igmpv2_chk_set_timer
040216ec g     F .text	0000002c TK_OSTimeDly
040354a4 g     F .text	00000094 alt_find_dev
04001de4 g     F .text	000000a0 memcpy
04016fc8 g     F .text	00000058 tse_mac_setMIImode
04050758 g     O .bss	00000004 dsc_rebind
040370a4 g     F .text	00000080 task_stats
04028bec g     F .text	0000004c DOMAIN_CHECK
04027cbc g     F .text	00000040 in_broadcast
0404e758 g     O .rwdata	00000002 OSRdyTblSize
04019064 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
04050840 g     O .bss	00000004 vfsystems
0403f3d8 g     F .text	000000d0 udp_socket
040506f8 g     O .bss	00000004 MaxMtu
0402dc94 g     F .text	00000158 sock_selscan
0401c064 g     F .text	0000015c triple_speed_ethernet_init
040065f8 g     F .text	0000000c _cleanup_r
0400b780 g     F .text	000000f8 __floatsidf
0403abb8 g     F .text	000000d0 ip_reasm_match_frag_with_ire
0402ce44 g     F .text	00000050 socantrcvmore
04016da0 g     F .text	000000f0 tse_mac_sTxWrite
040015f0 g     F .text	000001a4 sss_exec_command
04002068 g     F .text	00000014 perror
040358f8 g     F .text	00000078 alt_io_redirect
0400b6f8 g     F .text	00000088 __ltdf2
04050784 g     O .bss	00000004 netq_intmask
04041b44 g     F .text	00000070 hextoa
04046bcc g       *ABS*	00000000 __DTOR_END__
04029ed8 g     F .text	00000228 t_send
040350fc g     F .text	000000fc alt_close
040507b0 g     O .bss	00000002 select_wait
04002194 g     F .text	00000014 puts
040211bc g     F .text	00000044 std_out
040583ac g     O .bss	00000030 tse_iniche_dev_driver_data
04044034 g     F .text	00000138 vfslookup_locked
0402ab74 g     F .text	0000009c soaccept
0400cb50 g     F .text	00000130 OSEventNameGet
0404e73c g     O .rwdata	00000002 OSFlagMax
04036330 g     F .text	00000020 altera_nios2_irq_init
04058d28 g     O .bss	0000003c tcpmib
0402a34c g     F .text	0000009c t_errno
0403db58 g     F .text	000000f0 ip_raw_open
04023d6c g     F .text	00000118 dhc_decline
040080ec g     F .text	000000b0 __ratio
0400d548 g     F .text	00000100 OSIntExit
0404e830 g     O .rwdata	00000004 ipRoutes
04043354 g     F .text	00000058 vfeof
04033358 g     F .text	0000005c tcp_canceltimers
04022694 g     F .text	0000021c dhc_buildheader
0404e776 g     O .rwdata	00000002 OSTCBSize
040162b8 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
040506a5 g     O .bss	00000001 OSPrioCur
04015894 g     F .text	000002c0 altera_avalon_jtag_uart_read
04045ff8 g     F .text	00000014 malloc
0405083c g     O .bss	00000004 inpcb_cachemiss
040020c0 g     F .text	00000034 _printf_r
04041d4c g     F .text	000000c4 inet46_addr
04050838 g     O .bss	00000004 inpcb_cachehits
0400bc20 g     F .text	00000008 __udivsi3
0404e3a8 g     O .rwdata	0000000b tcp_outflags
040583dc g     O .bss	00000130 tse
0400c390 g     F .text	000000c0 isatty
04017c60 g     F .text	00000178 alt_tse_sys_enable_mdio_sharing
0404e75c g     O .rwdata	00000002 OSStkWidth
04048634 g     O .rodata	000000c8 __mprec_tens
04042ae4 g     F .text	0000007c vf_alloc_and_link_vop
0404e750 g     O .rwdata	00000002 OSPtrSize
0405080c g     O .bss	00000004 ipr_curr_mem
0401ec28 g     F .text	0000006c exit_hook
0405070c g     O .bss	00000004 igmp_cticks
04017f5c g     F .text	0000008c alt_tse_get_mac_info_index
04050798 g     O .bss	00000004 mheap_sem_ptr
0403120c g     F .text	00000048 ip4_tcpmss
04007314 g     F .text	00000008 __locale_charset
0404e730 g     O .rwdata	00000002 OSEventTblSize
04059124 g     O .bss	00000014 netlist
0402bb70 g     F .text	000000a8 soshutdown
04036350 g       .text	00000000 OSCtxSw
04036b4c g     F .text	0000004c packet_check
04023a08 g     F .text	00000280 dhc_setip
04044aa0 g     F .text	00000090 alt_icache_flush
04058d64 g     O .bss	00000014 mbufq
0402ab24 g     F .text	00000050 soabort
04050670 g     O .bss	00000004 __malloc_top_pad
040506a8 g     O .bss	00000004 OSTCBList
040255f4 g     F .text	00000110 qdel
040369c8 g     F .text	00000150 station_state
0403e0a8 g     F .text	00000184 rt_lookup
040507c8 g     O .bss	00000004 alt_fd_list_lock
0404e704 g     O .rwdata	00000004 __mb_cur_max
0401f6d4 g     F .text	0000035c igmp_validate
0400731c g     F .text	0000000c _localeconv_r
0401e944 g     F .text	000002e4 ip_startup
04028f28 g     F .text	00000298 t_accept
0402c8c4 g     F .text	0000008c soisdisconnecting
04008a08 g     F .text	0000003c __i2b
04006cf8 g     F .text	0000049c __sfvwrite_r
040163e0 g     F .text	00000058 alt_avalon_sgdma_stop
0401e2fc g     F .text	000003d4 pktdemux
040553f8 g     O .bss	00000c30 OSMemTbl
040506ac g     O .bss	00000001 OSTickStepState
04019100 g     F .text	00000128 alt_tse_phy_wr_mdio_reg
04025be4 g     F .text	000000ac kbhit
040296ec g     F .text	000001dc t_setsockopt
040095d4 g     F .text	00000070 _sbrk_r
0404e568 g     O .rwdata	00000018 icmpdu_types
04019754 g     F .text	0000070c alt_tse_mac_group_init
04043408 g     F .text	00000220 vunlink
0401c424 g     F .text	00000ae8 tse_mac_init
0404e754 g     O .rwdata	00000002 OSQMax
04020950 g     F .text	000000b0 ccksum
04042b60 g     F .text	000000d8 vf_alloc_buffer
04050830 g     O .bss	00000004 cachedRoute
0404e7c4 g     O .rwdata	00000004 lilbufs
04056028 g     O .bss	00000800 OSTaskStatStk
040416a0 g     F .text	00000024 md_ftell
04020a00 g     F .text	00000068 cksum
04010a60 g     F .text	0000010c OSMemNameGet
0402a700 g     F .text	00000130 sofree
04050700 g     O .bss	00000004 ifNumber
0404e734 g     O .rwdata	00000002 OSFlagEn
04009db4 g     F .text	00000078 _read_r
0404e77a g     O .rwdata	00000002 OSTimeTickHookEn
04044660 g     F .text	00000078 alt_dcache_flush
04010694 g     F .text	000000ac OS_FlagUnlink
04011b14 g     F .text	00000180 OSQPost
0404ce50 g     O .rwdata	0000000c __lc_ctype
0404e804 g     O .rwdata	00000004 alt_max_fd
0400e524 g     F .text	0000006c OS_MemCopy
0404e7cc g     O .rwdata	00000004 bigbufs
04034088 g     F .text	000000d4 tcp_disconnect
0400e590 g     F .text	000000d4 OS_Sched
0400c05c g     F .text	00000138 __unpack_d
04009b34 g     F .text	00000110 _fclose_r
0401095c g     F .text	00000104 OSMemGet
04013ec0 g     F .text	000001c4 OSTaskNameSet
04006478 g     F .text	00000034 fflush
04050674 g     O .bss	00000004 __malloc_max_sbrked_mem
040506b0 g     O .bss	00000004 OSCtxSwCtr
04058830 g     O .bss	00000064 igmpstats
040367a8 g     F .text	00000028 OSTimeTickHook
04022dc8 g     F .text	00000104 dhc_rx_offer
04020358 g     F .text	00000120 bsd_getsockopt
0404e73e g     O .rwdata	00000002 OSFlagNameSize
04059188 g     O .bss	00000018 ire_stats
04000f94 g     F .text	00000108 LEDManagementTask
040342f8 g     F .text	000001b8 udp_soinput
04025544 g     F .text	000000b0 putq
0400e000 g     F .text	00000104 OS_EventTaskRemoveMulti
04050720 g     O .bss	00000004 iniche_net_ready
0400ae48 g     F .text	00000074 __adddf3
0400ddf4 g     F .text	00000154 OS_EventTaskWaitMulti
04044400 g     F .text	00000048 isvfile
0402bd18 g     F .text	000004c0 sosetopt
04021524 g     F .text	000000f4 netmain
04031254 g     F .text	0000011c tcp_mss
04007fcc g     F .text	00000120 __b2d
040417c0 g     F .text	0000031c parse_ipad
04042ac4 g     F .text	00000020 get_vfopen_error
0404e756 g     O .rwdata	00000002 OSQSize
0400a408 g     F .text	000005b0 __umoddi3
0400c59c g     F .text	000000f0 lseek
04036c14 g     F .text	000000c4 inet_timer
040126f0 g     F .text	0000027c OSSemPend
040192ec g     F .text	00000278 alt_tse_phy_add_profile_default
0401a9d8 g     F .text	00000540 alt_tse_phy_get_cap
040013c8 g     F .text	00000168 sss_send_menu
0404e700 g     O .rwdata	00000004 _global_impure_ptr
04020e54 g     F .text	00000164 print_eth
04042ff0 g     F .text	00000050 vfopen
04035c34 g     F .text	00000120 alt_read
04008f70 g     F .text	000005f4 _realloc_r
0400082c g     F .text	00000298 alt_NetworkErrorHandler
0404e740 g     O .rwdata	00000002 OSLowestPrio
040593a8 g       *ABS*	00000000 __bss_end
0403573c g     F .text	000000f8 alt_iic_isr_register
04015e30 g     F .text	0000013c alt_avalon_sgdma_do_async_transfer
04026b5c g     F .text	00000134 m_free
04036824 g     F .text	00000020 OSTCBInitHook
0401d6a4 g     F .text	00000040 tse_mac_stats
0402504c g     F .text	000002b8 pk_validate
0404e786 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
04035f24 g     F .text	00000110 alt_tick
04042840 g     F .text	0000025c in_pcblookup
04024c14 g     F .text	000000cc find_opt
04009e2c g     F .text	000005dc __udivdi3
040269b4 g     F .text	000001a8 m_getnbuf
040253d0 g     F .text	000000ac dump_buf_estats
0401a894 g     F .text	00000144 alt_tse_phy_check_link
04050800 g     O .bss	00000004 arpRepsOut
0404e728 g     O .rwdata	00000002 OSEventEn
040486fc g     O .rodata	00000028 __mprec_bigtens
04008c64 g     F .text	00000120 __s2b
0404e782 g     O .rwdata	00000002 OSTmrCfgNameSize
0400b950 g     F .text	00000194 __floatunsidf
04036844 g     F .text	000000fc netmain_init
0401bdf0 g     F .text	000000f4 marvell_cfg_sgmii
0401a6e4 g     F .text	000001b0 alt_tse_phy_restart_an
04007eec g     F .text	00000060 __mcmp
0405073c g     O .bss	00000004 dsc_requests
04032840 g     F .text	00000488 tcp_respond
04034734 g     F .text	0000033c udp4_sockbind
0404e6f8 g     O .rwdata	00000004 __ctype_ptr
04050788 g     O .bss	00000004 old_mode
0401f3dc g     F .text	0000027c igmp_joingroup
04027de4 g     F .text	00000358 so_icmpdu
040065e0 g     F .text	00000018 __fp_lock_all
04050850 g     O .bss	00000004 vfs_dir_stale
040356f4 g     F .text	00000048 alt_ic_irq_enabled
0405839c g     O .bss	00000010 pphy_profiles
0403c1b8 g     F .text	000000e4 ip_reasm_process_timer_tick
040444b4 g     F .text	0000005c vclearerr
04020864 g     F .text	000000ec bsd_setsockopt
040271c8 g     F .text	00000058 mbuf_len
040104a0 g     F .text	000000e4 OS_FlagInit
04035e8c g     F .text	00000098 alt_alarm_stop
040441b4 g     F .text	000001e8 strippath
0404e7bc g     O .rwdata	00000004 reqlist
04021788 g     F .text	000001a0 tcp_sleep
0404655c g     F .text	00000024 strtol
04021e64 g     F .text	00000830 dhc_upcall
0403415c g     F .text	000000e0 tcp_usrclosed
0404e794 g     O .rwdata	00000004 ethernet_1_name
04050774 g     O .bss	00000004 cticks_factor
0404e764 g     O .rwdata	00000002 OSTaskIdleStkSize
04042284 g     F .text	00000254 in_pcbbind
040507cc g     O .bss	00000004 alt_irq_active
0401227c g     F .text	000000c0 OSSemAccept
04010c8c g     F .text	000000f0 OSMemPut
04010740 g     F .text	0000021c OSMemCreate
040506b4 g     O .bss	00000004 OSIdleCtrMax
040000ec g     F .exceptions	000000d0 alt_irq_handler
0404e3c0 g     O .rwdata	00000028 alt_dev_null
0404e7de g     O .rwdata	00000001 tcprexmtthresh
0404e778 g     O .rwdata	00000002 OSTicksPerSec
04038874 g     F .text	00000098 if_killsocks
0403932c g     F .text	00000248 ip_write
0403cd48 g     F .text	0000060c ip_rcv_phase2
040294ac g     F .text	00000044 t_getsockname
040291c0 g     F .text	000002a8 t_connect
0404e7d8 g     O .rwdata	00000004 TCPTV_MSL
040589bc g     O .bss	00000010 memestats
0401a5d0 g     F .text	00000114 alt_tse_phy_init
04025c90 g     F .text	00000060 getch
0404e660 g     O .rwdata	00000080 vfs_root_path
04029468 g     F .text	00000044 t_getpeername
04016438 g     F .text	00000070 alt_avalon_sgdma_check_descriptor_status
0403aeb4 g     F .text	000000a0 ip_reasm_decr_mem_useage
0402cfd0 g     F .text	00000080 soreserve
04036350 g       .text	00000000 OSIntCtxSw
040265f8 g     F .text	000000f4 npalloc
04035258 g     F .text	00000044 alt_dcache_flush_all
04007db8 g     F .text	00000070 __hi0bits
0405082c g     O .bss	00000004 ipraw_eps
04024ce0 g     F .text	00000290 pk_init
04041474 g     F .text	00000180 md_fread
04045e68 g     F .text	0000001c calloc
0401cf0c g     F .text	000002f8 tse_mac_raw_send
0400b878 g     F .text	000000d8 __fixdfsi
04058fc0 g     O .bss	00000064 intimers
0402d0b0 g     F .text	00000048 sbrelease
0402e134 g     F .text	000000f0 ifd_clr
0402d9e0 g     F .text	00000094 sbdroprecord
04020fb8 g     F .text	00000080 uslash
040361b0 g     F .text	00000120 alt_write
040507fc g     O .bss	00000004 arpRepsIn
04021cd4 g     F .text	00000090 dhc_get_srv_ipaddr
04036e70 g     F .text	00000168 in_timerset
040506b8 g     O .bss	00000004 OSTCBFreeList
0404e844 g       *ABS*	00000000 __ram_rwdata_end
0401296c g     F .text	0000017c OSSemPendAbort
04031370 g     F .text	0000117c tcp_output
040507d8 g     O .bss	00000004 activehost
0404e7fc g     O .rwdata	00000008 alt_dev_list
040212f8 g     F .text	0000022c parse_args
0405078c g     O .bss	00000004 global_TCPwakeup_setIndx
040067d0 g     F .text	00000058 _fputc_r
0401d9f8 g     F .text	00000070 write
040165e8 g     F .text	0000007c alt_avalon_sgdma_enable_desc_poll
040266ec g     F .text	000000b8 npfree
04008e88 g     F .text	000000e8 _putc_r
04037bf4 g     F .text	00000294 arpReply
04020a94 g     F .text	0000007c nextarg
0404e77c g     O .rwdata	00000002 OSVersionNbr
0403b864 g     F .text	00000594 ip_reasm_process_subsequent_fragments
0404e83c g     O .rwdata	00000004 pton_error
04050730 g     O .bss	00000004 dsc_errors
04051010 g     O .bss	00002000 SSSInitialTaskStk
0405850c g     O .bss	00000014 rcvdq
0402e0cc g     F .text	00000068 tcp_notify
0404ca38 g       *ABS*	00000000 __ram_rodata_end
0400c25c g     F .text	000000d4 fstat
04001ca8 g     F .text	0000002c fprintf
0402ac10 g     F .text	000000d4 soconnect
0403e04c g     F .text	0000005c ip_raw_maxalloc
0401bfe4 g     F .text	00000080 DP83848C_link_status_read
040228b0 g     F .text	00000518 dhc_discover
0400123c g     F .text	000000a8 SSSCreateOSDataStructs
040427c4 g     F .text	0000007c in_setpeeraddr
0404e724 g     O .rwdata	00000004 OSEndiannessTest
04025cf0 g     F .text	0000003c clock_init
04043270 g     F .text	000000e4 vfgets
04037228 g     F .text	0000017c et_send
04008b44 g     F .text	00000120 __pow5mult
04050664 g     O .bss	00000004 __nlocale_changed
0400bc28 g     F .text	00000008 __umodsi3
04041adc g     F .text	00000068 inet_addr
0403ad74 g     F .text	00000098 ip_reasm_check_mem_useage
0402bc18 g     F .text	00000100 sorflush
04046594 g     F .text	00000020 vprintf
04058ad0 g     O .bss	000000fc global_tcb_ext
040399fc g     F .text	00000488 ip_fragment_lc
04058520 g     O .bss	00000300 netstatic
04028cc8 g     F .text	0000017c t_bind
04016244 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_stream_desc
0404e736 g     O .rwdata	00000002 OSFlagGrpSize
0402593c g     F .text	000000e4 udp_close
0401633c g     F .text	00000050 alt_avalon_sgdma_register_callback
040262dc g     F .text	0000021c alt_iniche_init
040593a8 g       *ABS*	00000000 end
04025f14 g     F .text	00000088 UNLOCK_NET_RESOURCE
0401c1c0 g     F .text	00000264 prep_tse_mac
04029a6c g     F .text	000000f0 t_recv
04043628 g     F .text	000001ac vfread
0401e214 g     F .text	000000e8 netclose
04001980 g     F .text	000001ac SSSSimpleSocketServerTask
04045e50 g     F .text	0000000c _atoi_r
04017074 g     F .text	000001d8 alt_tse_phy_add_profile
0404e7e8 g     O .rwdata	00000004 tcp_keepintvl
0401521c g     F .text	00000138 altera_avalon_jtag_uart_init
0400e808 g     F .text	000000c8 OS_TaskStat
04050734 g     O .bss	00000004 dsc_discovers
0404e360 g     O .rwdata	00000018 tcp_protosw
04046bc8 g       *ABS*	00000000 __CTOR_LIST__
0405084c g     O .bss	00000004 vfopen_error
06000000 g       *ABS*	00000000 __alt_stack_pointer
040507c0 g     O .bss	00000004 tcp_maxidle
04050760 g     O .bss	00000004 firstudp
04016664 g     F .text	0000005c alt_avalon_sgdma_disable_desc_poll
04016c84 g     F .text	00000090 alt_avalon_timer_sc_init
0400bcc8 g     F .text	00000080 __clzsi2
04015b54 g     F .text	000002dc altera_avalon_jtag_uart_write
04016090 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
04006504 g     F .text	00000004 __sfp_lock_acquire
04007cac g     F .text	000000e4 memchr
0400e4d0 g     F .text	00000054 OS_MemClr
04002aa4 g     F .text	00001eac ___vfprintf_internal_r
04036420 g     F .text	00000310 OSTaskStkInit
0400221c g     F .text	00000060 _sprintf_r
04016180 g     F .text	00000054 alt_avalon_sgdma_construct_stream_to_mem_desc
040069e4 g     F .text	00000314 _free_r
0403ff14 g     F .text	00000170 igmpv2_chk4_rtr_alert_opt
0402a1e4 g     F .text	000000d0 t_socketclose
0400db50 g     F .text	00000194 OS_EventTaskRdy
04046080 g     F .text	0000004c __srget_r
04046760 g     F .text	000001b0 __call_exitprocs
0401d204 g     F .text	000000a8 tse_sgdmaRx_isr
040506bc g     O .bss	00000001 OSCPUUsage
04058820 g     O .bss	00000010 nets
04025e54 g     F .text	000000c0 LOCK_NET_RESOURCE
04023c88 g     F .text	000000e4 dhc_resetip
04050668 g     O .bss	00000004 __mlocale_changed
0401d454 g     F .text	00000250 tse_mac_rcv
04028c38 g     F .text	00000090 t_socket
0404e710 g     O .rwdata	00000004 __malloc_sbrk_base
040001bc g     F .text	0000004c _start
040371d4 g     F .text	00000054 etainit
040507d0 g     O .bss	00000004 _alt_tick_rate
04036b98 g     F .text	00000024 mcastlist
04011678 g     F .text	00000320 OSQPend
040589cc g     O .bss	000000f0 pktlog
0403fa24 g     F .text	0000014c igmpv2_process_report
0402e298 g     F .text	00000080 ifd_isset
0403e654 g     F .text	00000144 del_route
040164a8 g     F .text	00000058 alt_avalon_sgdma_open
04002a44 g     F .text	00000008 _user_strerror
04014884 g     F .text	0000014c OSTimeDly
0400109c g     F .text	00000040 get_mac_addr
0402a610 g     F .text	000000f0 solisten
040086d4 g     F .text	0000014c __lshift
040507d4 g     O .bss	00000004 _alt_nticks
04019228 g     F .text	000000c4 alt_tse_phy_rd_mdio_reg
0401d980 g     F .text	00000078 read
04014e4c g     F .text	00000250 alt_sys_init
04032f74 g     F .text	0000004c tcp_quench
04021038 g     F .text	00000184 ns_printf
040386f8 g     F .text	000000e0 isbcast
04025f9c g     F .text	00000214 TK_NEWTASK
04046628 g     F .text	00000134 __register_exitproc
040506bd g     O .bss	00000001 OSTaskCtr
0403ac88 g     F .text	000000ec ip_reasm_determine_type_of_frag
040506ec g     O .bss	00000001 phy_profile_count
0404616c g     F .text	000000f0 strncmp
04017edc g     F .text	00000080 alt_tse_get_mac_group_index
040149d0 g     F .text	00000170 OSTimeDlyHMSM
04035e4c g     F .text	00000040 alt_remap_uncached
0403dc48 g     F .text	000000c0 ip_raw_close
04008820 g     F .text	000001e8 __multiply
0404e5b0 g     O .rwdata	000000b0 mdlist
0401572c g     F .text	00000074 altera_avalon_jtag_uart_close
0401eea4 g     F .text	000000f8 igmp_input
04039924 g     F .text	000000d8 ip_raw_write
0404ca38 g       *ABS*	00000000 __ram_rwdata_start
040437d4 g     F .text	000003e8 vfwrite_locked
0404625c g     F .text	000000bc strncpy
04046bcc g       *ABS*	00000000 __ram_rodata_start
04050738 g     O .bss	00000004 dsc_offers
04050e54 g     O .bss	00000028 __malloc_current_mallinfo
0404e72a g     O .rwdata	00000002 OSEventMax
04041e10 g     F .text	00000074 inet_setport
040083cc g     F .text	0000017c __d2b
04012ae8 g     F .text	00000128 OSSemPost
04030ce4 g     F .text	00000190 tcp_dooptions
04050660 g     O .bss	00000004 SSSLEDEventFlag
0402c7c8 g     F .text	000000fc soisconnected
0400d6d4 g     F .text	000000e4 OSSchedUnlock
0403db08 g     F .text	00000028 netexit
0405071c g     O .bss	00000004 nettick_wakes
040190ac g     F .text	00000054 alt_tse_phy_wr_mdio_addr
040507b4 g     O .bss	00000001 tcpprintfs
04036fd8 g     F .text	000000a8 in_timerkill
0403f8c4 g     F .text	00000160 igmpv2_input
04050748 g     O .bss	00000004 dsc_declines
040150d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
04020a68 g     F .text	0000002c do_trap
040449ac g     F .text	000000f4 alt_get_fd
04020478 g     F .text	00000104 bsd_ioctl
040506c0 g     O .bss	00000004 OSMemFreeList
0400d828 g     F .text	000000ac OSStatInit
040274d8 g     F .text	000001ec tcp_rcv
04020e10 g     F .text	00000044 panic
04050854 g     O .bss	00000004 vfs_open_files
04044534 g     F .text	0000012c alt_busy_sleep
0401e7a0 g     F .text	000001a4 ip2mac
04010208 g     F .text	000000d4 OSFlagQuery
0400c194 g     F .text	000000c8 __fpcmp_parts_d
0402ddec g     F .text	00000214 sock_select
0404102c g     F .text	00000284 dhc_setup
040326d0 g     F .text	00000058 tcp_init
04050790 g     O .bss	00000004 cticks
04050725 g     O .bss	00000001 to_nettick
0404e760 g     O .rwdata	00000002 OSTaskCreateExtEn
04009ac4 g     F .text	00000070 _close_r
0401da68 g     F .text	0000064c Netinit
0402658c g     F .text	00000038 prep_armintcp
0403d784 g     F .text	00000168 in_addmulti
04032728 g     F .text	00000118 tcp_template
0401b454 g     F .text	0000031c alt_tse_phy_get_common_speed
040272c8 g     F .text	00000070 remque
04046580 g     F .text	00000014 _vprintf_r
0402e388 g     F .text	00000408 tcp_reass
04041fd0 g     F .text	000001cc tcp_cksum
04034a70 g     F .text	000003dc udp4_socksend
04043040 g     F .text	000001a8 vfclose_locked
0402e224 g     F .text	00000074 ifd_set
0404600c g     F .text	00000074 memcmp
0400db34 g     F .text	0000001c OS_Dummy
04015184 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04024b64 g     F .text	000000b0 dhc_set_state
040506fc g     O .bss	00000004 NDEBUG
040593a8 g       *ABS*	00000000 __alt_stack_base
040151cc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0402d050 g     F .text	00000060 sbreserve
040506ed g     O .bss	00000001 mac_group_count
0403dd08 g     F .text	00000238 ip_raw_input
04001d08 g     F .text	0000009c _fwrite_r
0404e7c8 g     O .rwdata	00000004 lilbufsiz
0402e318 g     F .text	00000070 ifd_get
0402cf34 g     F .text	0000009c sbwakeup
04004974 g     F .text	0000013c __swsetup_r
04056828 g     O .bss	000001e0 OSQTbl
04030fa0 g     F .text	0000026c tcp_xmit_timer
0401d2ac g     F .text	000001a8 tse_sgdma_read_init
0400b280 g     F .text	00000258 __divdf3
0400667c g     F .text	000000f0 __sfp
04001138 g     F .text	00000104 generate_mac_addr
04038a08 g     F .text	000001a4 ip_bldhead
04008230 g     F .text	00000058 __copybits
0402d0f8 g     F .text	000000a8 sbappend
0404ce5c g     O .rwdata	00000408 __malloc_av_
04006510 g     F .text	00000004 __sinit_lock_release
040506c4 g     O .bss	00000004 OSTCBHighRdy
0400aebc g     F .text	000003c4 __muldf3
04039574 g     F .text	000003b0 ip_write2
04009730 g     F .text	00000060 __sread
0404e828 g     O .rwdata	00000004 arp_ageout
040506c8 g     O .bss	00000004 OSQFreeList
04019e60 g     F .text	00000418 alt_tse_mac_get_phy
0403890c g     F .text	000000fc ip_init
0404488c g     F .text	00000120 alt_find_file
0403e00c g     F .text	00000040 ip_raw_free
04037ae0 g     F .text	00000114 make_arp_entry
040352c8 g     F .text	000000b4 alt_dev_llist_insert
0400c978 g     F .text	00000108 __malloc_lock
04001cd4 g     F .text	00000034 _fprintf_r
0400c7b4 g     F .text	000000bc sbrk
04034288 g     F .text	00000070 udp_lookup
0401638c g     F .text	00000054 alt_avalon_sgdma_start
0400cc80 g     F .text	00000144 OSEventNameSet
0400627c g     F .text	000001fc _fflush_r
040181b4 g     F .text	00000098 alt_tse_mac_set_duplex
04009a10 g     F .text	000000b4 _calloc_r
040506cc g     O .bss	00000001 OSRdyGrp
0404142c g     F .text	00000028 md_fopen
0404e378 g     O .rwdata	00000018 udp_protosw
04042748 g     F .text	0000007c in_setsockaddr
04050650 g       *ABS*	00000000 __bss_start
0402d1a0 g     F .text	000000e0 sbappendrecord
04059138 g     O .bss	00000050 ip_mib
04001f64 g     F .text	00000098 memset
0402ace4 g     F .text	000000a0 sodisconnect
04000e28 g     F .text	00000080 main
04050688 g     O .bss	00000004 alt_envp
04050678 g     O .bss	00000004 __malloc_max_total_mem
04001358 g     F .text	00000070 sss_reset_connection
04026ff8 g     F .text	000001d0 m_adj
0401512c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0400997c g     F .text	0000001c __swbuf
040416c4 g     F .text	000000d8 md_fgetc
0404887c g     O .rodata	00000100 OSUnMapTbl
0403a55c g     F .text	000002b8 ip_dump
04021acc g     F .text	00000208 tk_stats
0404e7a4 g     O .rwdata	00000008 alt_iniche_dev_list
04053010 g     O .bss	00000078 SSSLEDCommandQTbl
0404e798 g     O .rwdata	00000008 alt_sgdma_list
0404e75a g     O .rwdata	00000002 OSSemEn
04050778 g     O .bss	00000004 OS_TPS
04028404 g     F .text	000007e8 rawip_usrreq
0400fe60 g     F .text	000003a8 OSFlagPost
04009644 g     F .text	00000008 __sclose
04041cec g     F .text	00000060 print46_addr
06000000 g       *ABS*	00000000 __alt_heap_limit
04009c44 g     F .text	00000014 fclose
0400dce4 g     F .text	00000110 OS_EventTaskWait
04046318 g     F .text	00000244 _strtol_r
04020ccc g     F .text	00000144 print_uptime
0400e8d0 g     F .text	000000c8 OS_TaskStatStkChk
04059218 g     O .bss	00000190 _atexit0
04013b98 g     F .text	00000170 OSTaskDelReq
04004cc8 g     F .text	000015b4 _dtoa_r
0400756c g     F .text	00000740 _malloc_r
0404179c g     F .text	00000024 md_unlink
04016f34 g     F .text	00000094 tse_mac_SwReset
04042230 g     F .text	00000054 in_pcbdetach
0404e808 g     O .rwdata	00000004 alt_errno
0404e838 g     O .rwdata	00000004 mdlist_size
0400d7b8 g     F .text	00000070 OSStart
04040980 g     F .text	00000030 u_mctest_init
0400c91c g     F .text	0000005c __env_unlock
0400725c g     F .text	000000b8 _fwalk
04014084 g     F .text	00000218 OSTaskResume
04010d7c g     F .text	000000fc OSMemQuery
04041e84 g     F .text	0000014c convert_ip
04037938 g     F .text	000001a8 find_oldest_arp
0404e76c g     O .rwdata	00000002 OSTaskStatEn
040507f4 g     O .bss	00000004 arpReqsIn
04042c38 g     F .text	00000050 vf_free_buffer
040446d8 g     F .text	00000154 alt_fcntl
0404e746 g     O .rwdata	00000002 OSMemMax
04011c94 g     F .text	00000188 OSQPostFront
04025bb4 g     F .text	00000030 dtrap
0404e7d4 g     O .rwdata	00000004 kb_last
04008d84 g     F .text	00000104 putc
0400bb60 g     F .text	00000060 __divsi3
04017e18 g     F .text	00000048 alt_tse_mac_set_common_speed
040506cd g     O .bss	00000003 OSRdyTbl
0404e720 g     O .rwdata	00000002 OSDebugEn
04048758 g     O .rodata	00000014 __thenan_df
0401ec94 g     F .text	000000d0 ip_exit
040068b8 g     F .text	0000012c _malloc_trim_r
04046bcc g       *ABS*	00000000 __CTOR_END__
0404e738 g     O .rwdata	00000002 OSFlagNodeSize
0405072c g     O .bss	00000004 dhc_conn
04025d48 g     F .text	0000006c cticks_hook
0404e780 g     O .rwdata	00000002 OSTmrCfgMax
04036b18 g     F .text	00000034 sysuptime
04009790 g     F .text	000000bc strcmp
0403c29c g     F .text	000001c8 ip_reasm_delete_ire
0401109c g     F .text	00000214 OSQCreate
04025db4 g     F .text	0000005c irq_Mask
04013d08 g     F .text	000001b8 OSTaskNameGet
040507e0 g     O .bss	00000004 nextppp
0405076c g     O .bss	00000004 irq_level
0401e0b4 g     F .text	00000160 fixup_subnet_mask
04046bcc g       *ABS*	00000000 __flash_rodata_start
04011e1c g     F .text	00000234 OSQPostOpt
0400d8d4 g     F .text	00000240 OSTimeTick
0403aa80 g     F .text	00000138 ip_copypkt
04024a60 g     F .text	00000090 dhc_alldone
0404e768 g     O .rwdata	00000002 OSTaskMax
04046bcc g       *ABS*	00000000 __DTOR_LIST__
0401233c g     F .text	00000114 OSSemCreate
04050710 g     O .bss	00000004 igmp_all_hosts_group
0404e78c g     O .rwdata	00000002 OSTmrWheelSize
0402ce94 g     F .text	00000038 sbselqueue
04050718 g     O .bss	00000004 netmain_wakes
04037e88 g     F .text	00000260 arprcv
04021718 g     F .text	00000070 TK_OSTaskResume
0401fa30 g     F .text	000003e0 igmp_print_stats
0400b560 g     F .text	00000088 __nedf2
04026844 g     F .text	000000a0 pffindtype
0404e762 g     O .rwdata	00000002 OSTaskDelEn
0404e7ec g     O .rwdata	00000004 tcp_sendspace
04043d98 g     F .text	00000134 vftell
04058894 g     O .bss	00000012 eth_prt_buf
04012c10 g     F .text	00000130 OSSemQuery
040112b0 g     F .text	00000300 OSQDel
04011998 g     F .text	0000017c OSQPendAbort
04014e18 g     F .text	00000034 alt_irq_init
04017dd8 g     F .text	00000040 alt_tse_mac_get_common_speed
04058cfc g     O .bss	00000018 app_semaphore
04035db4 g     F .text	00000060 alt_release_fd
04026264 g     F .text	00000078 post_app_sem
0401edf4 g     F .text	000000b0 igmp_init
040021a8 g     F .text	00000074 sprintf
0404876c g     O .rodata	00000100 __clz_tab
04050754 g     O .bss	00000004 dsc_renew
040415f4 g     F .text	00000080 md_fwrite
0405066c g     O .bss	00000004 _PathLocale
0405077c g     O .bss	00000004 tcp_sleep_count
04027338 g     F .text	0000007c insque
04045e3c g     F .text	00000014 atexit
04050848 g     O .bss	00000004 vfsfiles
04009998 g     F .text	00000078 _write_r
040465b4 g     F .text	00000050 _vsprintf_r
0403eff0 g     F .text	000002b8 udp_send
0400d648 g     F .text	0000008c OSSchedLock
0401f134 g     F .text	000002a8 igmp_send
040073bc g     F .text	0000001c setlocale
0400f138 g     F .text	0000013c OSFlagCreate
04053088 g     O .bss	00002000 LEDManagementTaskStk
04025e10 g     F .text	00000044 irq_Unmask
04028e44 g     F .text	000000e4 t_listen
0404e6fc g     O .rwdata	00000004 _impure_ptr
0404ca38 g     O .rwdata	00000018 ssstask
04050680 g     O .bss	00000004 alt_argc
04033850 g     F .text	00000704 tcp_usrreq
040344b0 g     F .text	00000284 udp_usrreq
040267a4 g     F .text	00000054 ncpalloc
040582ac g     O .bss	000000e0 ethernet_1_if
04035440 g     F .text	00000064 _do_dtors
0404e732 g     O .rwdata	00000002 OSEventMultiEn
0404e820 g     O .rwdata	00000004 pingdelay
0403742c g     F .text	00000074 arp_send_pending
0403f5d4 g     F .text	000002f0 igmpv1_input
04046910 g     F .text	000001c4 __srefill_r
040264f8 g     F .text	00000074 pre_task_setup
0405079c g     O .bss	00000004 rcvdq_sem_ptr
04020074 g     F .text	0000012c bsd_getsockname
0403c464 g     F .text	00000148 ip_reasm_mark_compact_rfq
0400f274 g     F .text	000002a8 OSFlagDel
040506d0 g     O .bss	00000004 OSEventFreeList
04021e20 g     F .text	00000044 dhc_set_callback
04000020 g       .exceptions	00000000 alt_irq_entry
040507f0 g     O .bss	00000004 arpcache
04045764 g     F .text	00000350 icmp_destun
0403da04 g     F .text	00000070 lookup_mcast
04001b2c g     F .text	00000034 SOFT_PHY_link_status_read
0404416c g     F .text	00000048 vfslookup
0403d354 g     F .text	00000430 ip_demux
04007f4c g     F .text	00000080 __ulp
04009564 g     F .text	00000040 __isinfd
04050780 g     O .bss	00000004 tcp_wakeup_count
0400f7b4 g     F .text	00000644 OSFlagPend
0404e77e g     O .rwdata	00000002 OSTmrEn
040065c8 g     F .text	00000018 __fp_unlock_all
040261b0 g     F .text	000000b4 wait_app_sem
0400676c g     F .text	00000064 fputc
0404e7ac g     O .rwdata	00000004 ipmcfail_str
04050794 g     O .bss	00000004 memtrapsize
04026cd4 g     F .text	00000324 m_copy
0404e7f4 g     O .rwdata	00000008 alt_fs_list
04058d78 g     O .bss	00000014 mfreeq
0400e6d4 g     F .text	00000080 OS_StrCopy
0402a5b4 g     F .text	0000005c sobind
040413b4 g     F .text	00000078 init_memdev
04050650 g     O .bss	00000001 to_ssstask
040273b4 g     F .text	00000124 nptcp_init
0404e748 g     O .rwdata	00000002 OSMemNameSize
04058bcc g     O .bss	000000f0 global_TCPwakeup_set
040367ec g     F .text	0000001c OSInitHookEnd
0402c950 g     F .text	000000bc soisdisconnected
04000020 g       *ABS*	00000000 __ram_exceptions_start
040373a4 g     F .text	00000088 arp_free_pending
0404e774 g     O .rwdata	00000002 OSTCBPrioTblMax
04007328 g     F .text	00000010 localeconv
0402a830 g     F .text	000002f4 soclose
04058abc g     O .bss	00000014 bigfreeq
0404e770 g     O .rwdata	00000002 OSTaskStatStkChkEn
0404e81c g     O .rwdata	00000004 prompt
0404e7e4 g     O .rwdata	00000004 tcp_keepidle
0401b2bc g     F .text	00000198 alt_tse_phy_set_adv_10
04028230 g     F .text	000001d4 rawip_soinput
04035568 g     F .text	00000050 alt_ic_isr_register
04043bbc g     F .text	00000060 vfwrite
0404e744 g     O .rwdata	00000002 OSMemEn
0402cc28 g     F .text	000000ac soqinsque
04050824 g     O .bss	00000004 so_evtmap_delete
04001da4 g     F .text	00000040 fwrite
0404e74e g     O .rwdata	00000002 OSMutexEn
04050810 g     O .bss	00000004 h_ireq
0404e844 g       *ABS*	00000000 _edata
04039e84 g     F .text	0000062c ip_fragment
0401d83c g     F .text	00000144 iniche_devices_init
04058d8c g     O .bss	00000028 tcp_saveti
04021200 g     F .text	000000f8 con_page
040593a8 g       *ABS*	00000000 _end
0402c1d8 g     F .text	00000540 sogetopt
040506d4 g     O .bss	00000001 OSIntNesting
0401a278 g     F .text	00000238 alt_tse_mac_associate_phy
0404e330 g     O .rwdata	00000030 nettasks
040253b0 g     F .text	00000020 pk_get_max_intrsafe_buf_len
0403a814 g     F .text	0000026c iproute
04027cfc g     F .text	000000e8 np_stripoptions
04050828 g     O .bss	00000001 so_evtmap
040001bc g       *ABS*	00000000 __ram_exceptions_end
040157a0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04006828 g     F .text	00000074 _fputs_r
04014b40 g     F .text	00000210 OSTimeDlyResume
040012e4 g     F .text	00000074 SSSCreateTasks
0403e22c g     F .text	00000428 add_route
0400f660 g     F .text	00000154 OSFlagNameSet
0401e6d0 g     F .text	000000d0 c_older
0402d670 g     F .text	00000090 sbflush
04041454 g     F .text	00000020 md_fclose
04021aa0 g     F .text	0000002c tk_yield
04001530 g     F .text	000000c0 sss_handle_accept
0401429c g     F .text	000001fc OSTaskStkChk
04035654 g     F .text	000000a0 alt_ic_irq_disable
0402ad84 g     F .text	00000608 sosend
0404e74a g     O .rwdata	00000002 OSMemSize
0403a4b0 g     F .text	000000ac ip_mymach
04016560 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
040096b4 g     F .text	0000007c __swrite
04050768 g     O .bss	00000004 cticks_initialized
0404e824 g     O .rwdata	00000004 deflength
04029cac g     F .text	0000022c t_sendto
0404e70c g     O .rwdata	00000004 __malloc_trim_threshold
04001ffc g     F .text	0000006c _perror_r
040506d8 g     O .bss	00000004 OSTCBCur
0402a3e8 g     F .text	000001cc socreate
04045e84 g     F .text	00000038 exit
04059024 g     O .bss	00000100 arp_table
04050860 g     O .bss	00000004 icmpdu_hook
0404e74c g     O .rwdata	00000002 OSMemTblSize
04007194 g     F .text	000000c8 _fwalk_reent
04037080 g     F .text	00000024 create_apptasks
0404e7e0 g     O .rwdata	00000004 tcp_ttl
04008548 g     F .text	0000018c __mdiff
040267f8 g     F .text	0000004c ncpfree
0400bbc0 g     F .text	00000060 __modsi3
040506f4 g     O .bss	00000004 MaxLnh
04017020 g     F .text	00000054 tse_mac_setGMIImode
04041c60 g     F .text	0000008c inet_ntop
0403f568 g     F .text	0000002c udp_maxalloc
0401bcfc g     F .text	000000f4 marvell_cfg_gmii
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006508 g     F .text	00000004 __sfp_lock_release
0400d478 g     F .text	00000054 OSInit
04000000 g       *ABS*	00000000 __alt_mem_sdram
0401a4b0 g     F .text	00000120 alt_tse_phy_cfg_pcs
040146c4 g     F .text	00000144 OSTaskQuery
04036940 g     F .text	00000088 icmp_port_du
040507c4 g     O .bss	00000004 tcp_iss
040121d0 g     F .text	000000ac OS_QInit
04045e5c g     F .text	0000000c atoi
0404e7d0 g     O .rwdata	00000004 bigbufsiz
0400e754 g     F .text	00000058 OS_StrLen
04032fc0 g     F .text	00000080 tcp_putseq
04010b6c g     F .text	00000120 OSMemNameSet
04047b30 g     O .rodata	00000101 _ctype_
0402d280 g     F .text	00000208 sbappendaddr
04050858 g     O .bss	00000004 vfs_total_rw_space
040407bc g     F .text	00000140 ip_getmoptions
0404e766 g     O .rwdata	00000002 OSTaskProfileEn
0403f2a8 g     F .text	00000130 udpswap
040506dc g     O .bss	00000004 OSTime
040507a0 g     O .bss	00000004 nextslow
040330b8 g     F .text	000002a0 tcp_slowtimo
04032cc8 g     F .text	00000118 tcp_newtcpcb
040380e8 g     F .text	000001a8 send_via_arp
04021d64 g     F .text	000000bc dhc_init
0403bdf8 g     F .text	00000064 ip_reasm_find_ire
04056a08 g     O .bss	00000800 OSTaskIdleStk
04046b30 g     F .text	0000002c _exit
0404439c g     F .text	00000064 isvfile_locked
040095a4 g     F .text	00000030 __isnand
0402070c g     F .text	00000158 bsd_select
04034fa8 g     F .text	00000154 alt_alarm_start
0400f51c g     F .text	00000144 OSFlagNameGet
0403f594 g     F .text	00000040 udp_free
0402547c g     F .text	000000c8 getq
04044510 g     F .text	00000024 prep_vfs
04014d50 g     F .text	00000064 OSTimeGet
0404e818 g     O .rwdata	00000004 name
0402d8d0 g     F .text	00000110 sbdropend
0400bc30 g     F .text	00000098 __muldi3
040073d8 g     F .text	00000194 __smakebuf_r
04038290 g     F .text	00000118 cb_arpent_tmo
040029d0 g     F .text	00000074 strlen
04040084 g     F .text	00000148 IPADDR_TO_NETP
0402057c g     F .text	00000030 bsd_inet_ntoa
04036770 g     F .text	0000001c OSTaskSwHook
04035a4c g     F .text	00000188 open
04025704 g     F .text	00000238 udp_open
04057208 g     O .bss	00000b40 OSEventTbl
0402cdf4 g     F .text	00000050 socantsendmore
0405085c g     O .bss	00000004 vfs_total_dyna_files
0400b670 g     F .text	00000088 __gedf2
04057d48 g     O .bss	00000510 OSTCBTbl
040507f8 g     O .bss	00000004 arpReqsOut
04012d40 g     F .text	00000104 OSSemSet
0404e840 g     O .rwdata	00000004 http_root_path
04023f50 g     F .text	000002bc dhc_extract_opts
0403b2d4 g     F .text	00000590 ip_reasm_compute_overlap
04016e90 g     F .text	000000a4 tse_mac_aRxRead
04035538 g     F .text	00000030 alt_icache_flush_all
0400227c g     F .text	000000e0 strchr
040588a6 g     O .bss	00000012 ipreturn
04050818 g     O .bss	00000004 port_prep
0404e3b3 g     O .rwdata	0000000d tcp_backoff
0402c75c g     F .text	0000006c soisconnecting
04000db0 g     F .text	00000078 SSSInitialTask
0400689c g     F .text	0000001c fputs
0404e80c g     O .rwdata	00000004 alt_priority_mask
0403fb70 g     F .text	0000024c igmpv2_process_query
0402da74 g     F .text	00000220 t_select
04012450 g     F .text	000002a0 OSSemDel
04034e4c g     F .text	0000015c udp4_sockaddr
040506e0 g     O .bss	00000004 OSFlagFreeList
040424d8 g     F .text	00000210 in_pcbconnect
040507b8 g     O .bss	00000004 dropline
04050814 g     O .bss	00000004 ire_cticks
040355b8 g     F .text	0000009c alt_ic_irq_enable
0404e72c g     O .rwdata	00000002 OSEventNameSize
04004950 g     F .text	00000024 __vfprintf_internal
04021618 g     F .text	00000088 tk_netmain
040426e8 g     F .text	00000060 in_pcbdisconnect
040506e4 g     O .bss	00000001 OSStatRdy
04058258 g     O .bss	00000054 OSTCBPrioTbl
0400c870 g     F .text	000000ac __env_lock
0404e772 g     O .rwdata	00000002 OSTaskSwHookEn
0404e58c g     O .rwdata	00000024 mdio
040180c8 g     F .text	000000ec alt_tse_mac_set_speed
04016100 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0401fe10 g     F .text	00000138 bsd_accept
0404e7f0 g     O .rwdata	00000004 tcp_recvspace
0400adc8 g     F .text	00000080 __subdf3
0403423c g     F .text	0000004c tcpinit
04050714 g     O .bss	00000004 igmp_all_rtrs_group
040281c0 g     F .text	00000070 rawip_lookup
04037124 g     F .text	000000b0 fcntl
04007e28 g     F .text	000000c4 __lo0bits
0402d488 g     F .text	000001e8 sbcompress
0404e810 g     O .rwdata	00000008 alt_alarm_list
04032de0 g     F .text	000000ac tcp_drop
0404e73a g     O .rwdata	00000002 OSFlagWidth
040353dc g     F .text	00000064 _do_ctors
0401b0ac g     F .text	00000210 alt_tse_phy_set_adv_100
040333b4 g     F .text	0000049c tcp_timers
0401ed64 g     F .text	00000090 if_netnumber
040408fc g     F .text	00000084 ip_freemoptions
0402c718 g     F .text	00000044 sohasoutofband
0402e790 g     F .text	00002554 tcp_input
0401ff48 g     F .text	0000012c bsd_getpeername
040205ac g     F .text	00000160 bsd_recvfrom
0401d7e8 g     F .text	00000054 close
04050744 g     O .bss	00000004 dsc_bpreplys
04050690 g     O .bss	00000004 alt_envsem
040506e8 g     O .bss	00000004 OSIdleCtrRun
0400db14 g     F .text	00000020 OSVersion
0404e784 g     O .rwdata	00000002 OSTmrCfgWheelSize
0400c4b0 g     F .text	00000080 alt_load
04014808 g     F .text	0000007c OS_TaskStkClr
04042a9c g     F .text	00000028 set_vfopen_error
0400bd48 g     F .text	00000314 __pack_d
0404e75e g     O .rwdata	00000002 OSTaskCreateEn
04017e60 g     F .text	0000007c alt_tse_get_system_index
0404e390 g     O .rwdata	00000018 rawip_protosw
0402cecc g     F .text	00000068 sbwait
0400e104 g     F .text	00000068 OS_EventWaitListInit
0402420c g     F .text	0000059c dhc_second
04016b68 g     F .text	000000ac alt_avalon_sgdma_init
040507e4 g     O .bss	00000004 port_1s_callout
04036808 g     F .text	0000001c OSTaskIdleHook
04045fe4 g     F .text	00000014 free
0400650c g     F .text	00000004 __sinit_lock_acquire
040506f0 g     O .bss	00000001 number_of_tse_mac
04008a44 g     F .text	00000100 __multadd
04014498 g     F .text	0000022c OSTaskSuspend
04007d90 g     F .text	00000028 _Bfree
04016d14 g     F .text	0000002c no_printf
0402ca0c g     F .text	0000021c sonewconn
04044b30 g     F .text	00000c34 icmprcv
040268e4 g     F .text	000000d0 pffindproto
0400e7ac g     F .text	0000005c OS_TaskIdle
0404e78a g     O .rwdata	00000002 OSTmrTblSize
04012050 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406f14 	ori	at,at,444
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	400d4cc0 	call	400d4cc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0ffff17 	ldw	r3,-4(fp)
 4000120:	e0bffe17 	ldw	r2,-8(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	1005003a 	cmpeq	r2,r2,zero
 400012c:	1000161e 	bne	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000130:	e0bffd17 	ldw	r2,-12(fp)
 4000134:	00c101b4 	movhi	r3,1030
 4000138:	18e3b004 	addi	r3,r3,-28992
 400013c:	100490fa 	slli	r2,r2,3
 4000140:	10c5883a 	add	r2,r2,r3
 4000144:	11400017 	ldw	r5,0(r2)
 4000148:	e0bffd17 	ldw	r2,-12(fp)
 400014c:	00c101b4 	movhi	r3,1030
 4000150:	18e3b004 	addi	r3,r3,-28992
 4000154:	100490fa 	slli	r2,r2,3
 4000158:	10c5883a 	add	r2,r2,r3
 400015c:	10800104 	addi	r2,r2,4
 4000160:	11000017 	ldw	r4,0(r2)
 4000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000168:	0005313a 	rdctl	r2,ipending
 400016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 4000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000178:	e0bfff17 	ldw	r2,-4(fp)
 400017c:	1004c03a 	cmpne	r2,r2,zero
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffe17 	ldw	r2,-8(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001a4:	400d5480 	call	400d548 <OSIntExit>
}
 40001a8:	e037883a 	mov	sp,fp
 40001ac:	dfc00117 	ldw	ra,4(sp)
 40001b0:	df000017 	ldw	fp,0(sp)
 40001b4:	dec00204 	addi	sp,sp,8
 40001b8:	f800283a 	ret

Disassembly of section .text:

040001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 40001c8:	00bffd16 	blt	zero,r2,40001c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001cc:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001d4:	06810174 	movhi	gp,1029
    ori gp, gp, %lo(_gp)
 40001d8:	d699be14 	ori	gp,gp,26360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001dc:	00810174 	movhi	r2,1029
    ori r2, r2, %lo(__bss_start)
 40001e0:	10819414 	ori	r2,r2,1616

    movhi r3, %hi(__bss_end)
 40001e4:	00c10174 	movhi	r3,1029
    ori r3, r3, %lo(__bss_end)
 40001e8:	18e4ea14 	ori	r3,r3,37800

    beq r2, r3, 1f
 40001ec:	10c00326 	beq	r2,r3,40001fc <_start+0x40>

0:
    stw zero, (r2)
 40001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f8:	10fffd36 	bltu	r2,r3,40001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001fc:	400c4b00 	call	400c4b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000200:	400c6ec0 	call	400c6ec <alt_main>

04000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000204:	003fff06 	br	4000204 <alt_after_alt_main>

04000208 <alt_uCOSIIErrorHandler>:
#include <errno.h>
#include "includes.h"
#include "alt_error_handler.h"
 
void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 4000208:	defff904 	addi	sp,sp,-28
 400020c:	dfc00615 	stw	ra,24(sp)
 4000210:	df000515 	stw	fp,20(sp)
 4000214:	df000504 	addi	fp,sp,20
 4000218:	e17ffd15 	stw	r5,-12(fp)
 400021c:	e13ffc05 	stb	r4,-16(fp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
 4000220:	e0bffc03 	ldbu	r2,-16(fp)
 4000224:	1005003a 	cmpeq	r2,r2,zero
 4000228:	10017b1e 	bne	r2,zero,4000818 <alt_uCOSIIErrorHandler+0x610>
   {
      return;
   }
   
   fault_level = SYSTEM;  
 400022c:	00800084 	movi	r2,2
 4000230:	e0bffb15 	stw	r2,-20(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 4000234:	400d6480 	call	400d648 <OSSchedLock>
      
   switch (error_code)
 4000238:	e0bffc03 	ldbu	r2,-16(fp)
 400023c:	e0bffe15 	stw	r2,-8(fp)
 4000240:	e0fffe17 	ldw	r3,-8(fp)
 4000244:	18800a20 	cmpeqi	r2,r3,40
 4000248:	1000371e 	bne	r2,zero,4000328 <alt_uCOSIIErrorHandler+0x120>
 400024c:	e0fffe17 	ldw	r3,-8(fp)
 4000250:	18800a48 	cmpgei	r2,r3,41
 4000254:	10001a1e 	bne	r2,zero,40002c0 <alt_uCOSIIErrorHandler+0xb8>
 4000258:	e0fffe17 	ldw	r3,-8(fp)
 400025c:	18800120 	cmpeqi	r2,r3,4
 4000260:	1000761e 	bne	r2,zero,400043c <alt_uCOSIIErrorHandler+0x234>
 4000264:	e0fffe17 	ldw	r3,-8(fp)
 4000268:	18800148 	cmpgei	r2,r3,5
 400026c:	10000a1e 	bne	r2,zero,4000298 <alt_uCOSIIErrorHandler+0x90>
 4000270:	e0fffe17 	ldw	r3,-8(fp)
 4000274:	188000a0 	cmpeqi	r2,r3,2
 4000278:	1000911e 	bne	r2,zero,40004c0 <alt_uCOSIIErrorHandler+0x2b8>
 400027c:	e0fffe17 	ldw	r3,-8(fp)
 4000280:	188000c8 	cmpgei	r2,r3,3
 4000284:	1000771e 	bne	r2,zero,4000464 <alt_uCOSIIErrorHandler+0x25c>
 4000288:	e0fffe17 	ldw	r3,-8(fp)
 400028c:	18800060 	cmpeqi	r2,r3,1
 4000290:	10005e1e 	bne	r2,zero,400040c <alt_uCOSIIErrorHandler+0x204>
 4000294:	0000d806 	br	40005f8 <alt_uCOSIIErrorHandler+0x3f0>
 4000298:	e0fffe17 	ldw	r3,-8(fp)
 400029c:	18800520 	cmpeqi	r2,r3,20
 40002a0:	10004f1e 	bne	r2,zero,40003e0 <alt_uCOSIIErrorHandler+0x1d8>
 40002a4:	e0fffe17 	ldw	r3,-8(fp)
 40002a8:	188007a0 	cmpeqi	r2,r3,30
 40002ac:	1000ad1e 	bne	r2,zero,4000564 <alt_uCOSIIErrorHandler+0x35c>
 40002b0:	e0fffe17 	ldw	r3,-8(fp)
 40002b4:	188002a0 	cmpeqi	r2,r3,10
 40002b8:	1000761e 	bne	r2,zero,4000494 <alt_uCOSIIErrorHandler+0x28c>
 40002bc:	0000ce06 	br	40005f8 <alt_uCOSIIErrorHandler+0x3f0>
 40002c0:	e0fffe17 	ldw	r3,-8(fp)
 40002c4:	18801020 	cmpeqi	r2,r3,64
 40002c8:	10009c1e 	bne	r2,zero,400053c <alt_uCOSIIErrorHandler+0x334>
 40002cc:	e0fffe17 	ldw	r3,-8(fp)
 40002d0:	18801048 	cmpgei	r2,r3,65
 40002d4:	10000a1e 	bne	r2,zero,4000300 <alt_uCOSIIErrorHandler+0xf8>
 40002d8:	e0fffe17 	ldw	r3,-8(fp)
 40002dc:	18800f60 	cmpeqi	r2,r3,61
 40002e0:	10008b1e 	bne	r2,zero,4000510 <alt_uCOSIIErrorHandler+0x308>
 40002e4:	e0fffe17 	ldw	r3,-8(fp)
 40002e8:	18800fa0 	cmpeqi	r2,r3,62
 40002ec:	10007e1e 	bne	r2,zero,40004e8 <alt_uCOSIIErrorHandler+0x2e0>
 40002f0:	e0fffe17 	ldw	r3,-8(fp)
 40002f4:	18800aa0 	cmpeqi	r2,r3,42
 40002f8:	1000151e 	bne	r2,zero,4000350 <alt_uCOSIIErrorHandler+0x148>
 40002fc:	0000be06 	br	40005f8 <alt_uCOSIIErrorHandler+0x3f0>
 4000300:	e0fffe17 	ldw	r3,-8(fp)
 4000304:	18801920 	cmpeqi	r2,r3,100
 4000308:	1000a11e 	bne	r2,zero,4000590 <alt_uCOSIIErrorHandler+0x388>
 400030c:	e0fffe17 	ldw	r3,-8(fp)
 4000310:	18803fe0 	cmpeqi	r2,r3,255
 4000314:	1000aa1e 	bne	r2,zero,40005c0 <alt_uCOSIIErrorHandler+0x3b8>
 4000318:	e0fffe17 	ldw	r3,-8(fp)
 400031c:	188010a0 	cmpeqi	r2,r3,66
 4000320:	10001d1e 	bne	r2,zero,4000398 <alt_uCOSIIErrorHandler+0x190>
 4000324:	0000b406 	br	40005f8 <alt_uCOSIIErrorHandler+0x3f0>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
 4000328:	00810174 	movhi	r2,1029
 400032c:	10b9bf04 	addi	r2,r2,-6404
 4000330:	10800017 	ldw	r2,0(r2)
 4000334:	11c00317 	ldw	r7,12(r2)
 4000338:	01010134 	movhi	r4,1028
 400033c:	211af304 	addi	r4,r4,27596
 4000340:	01400044 	movi	r5,1
 4000344:	01800c44 	movi	r6,49
 4000348:	4001da40 	call	4001da4 <fwrite>
         break;
 400034c:	0000c106 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
 4000350:	00810174 	movhi	r2,1029
 4000354:	10b9bf04 	addi	r2,r2,-6404
 4000358:	10800017 	ldw	r2,0(r2)
 400035c:	11c00317 	ldw	r7,12(r2)
 4000360:	01010134 	movhi	r4,1028
 4000364:	211b0004 	addi	r4,r4,27648
 4000368:	01400044 	movi	r5,1
 400036c:	01800c44 	movi	r6,49
 4000370:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
 4000374:	00810174 	movhi	r2,1029
 4000378:	10b9bf04 	addi	r2,r2,-6404
 400037c:	10800017 	ldw	r2,0(r2)
 4000380:	11000317 	ldw	r4,12(r2)
 4000384:	01410134 	movhi	r5,1028
 4000388:	295b0d04 	addi	r5,r5,27700
 400038c:	01800504 	movi	r6,20
 4000390:	4001ca80 	call	4001ca8 <fprintf>
            OS_LOWEST_PRIO);
         break;
 4000394:	0000af06 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
 4000398:	00810174 	movhi	r2,1029
 400039c:	10b9bf04 	addi	r2,r2,-6404
 40003a0:	10800017 	ldw	r2,0(r2)
 40003a4:	11c00317 	ldw	r7,12(r2)
 40003a8:	01010134 	movhi	r4,1028
 40003ac:	211b1a04 	addi	r4,r4,27752
 40003b0:	01400044 	movi	r5,1
 40003b4:	01800a04 	movi	r6,40
 40003b8:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
 40003bc:	00810174 	movhi	r2,1029
 40003c0:	10b9bf04 	addi	r2,r2,-6404
 40003c4:	10800017 	ldw	r2,0(r2)
 40003c8:	11000317 	ldw	r4,12(r2)
 40003cc:	01410134 	movhi	r5,1028
 40003d0:	295b2504 	addi	r5,r5,27796
 40003d4:	01800284 	movi	r6,10
 40003d8:	4001ca80 	call	4001ca8 <fprintf>
         break;
 40003dc:	00009d06 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_MBOX_FULL:
         fault_level = NONE;
 40003e0:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
 40003e4:	00810174 	movhi	r2,1029
 40003e8:	10b9bf04 	addi	r2,r2,-6404
 40003ec:	10800017 	ldw	r2,0(r2)
 40003f0:	11c00317 	ldw	r7,12(r2)
 40003f4:	01010134 	movhi	r4,1028
 40003f8:	211b2e04 	addi	r4,r4,27832
 40003fc:	01400044 	movi	r5,1
 4000400:	01800c84 	movi	r6,50
 4000404:	4001da40 	call	4001da4 <fwrite>
         break;
 4000408:	00009206 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
 400040c:	00800044 	movi	r2,1
 4000410:	e0bffb15 	stw	r2,-20(fp)
         fprintf(stderr, 
 4000414:	00810174 	movhi	r2,1029
 4000418:	10b9bf04 	addi	r2,r2,-6404
 400041c:	10800017 	ldw	r2,0(r2)
 4000420:	11c00317 	ldw	r7,12(r2)
 4000424:	01010134 	movhi	r4,1028
 4000428:	211b3b04 	addi	r4,r4,27884
 400042c:	01400044 	movi	r5,1
 4000430:	01801244 	movi	r6,73
 4000434:	4001da40 	call	4001da4 <fwrite>
"Attempted to access a resource with no match for the required data type.\n");
         break;
 4000438:	00008606 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
 400043c:	00810174 	movhi	r2,1029
 4000440:	10b9bf04 	addi	r2,r2,-6404
 4000444:	10800017 	ldw	r2,0(r2)
 4000448:	11c00317 	ldw	r7,12(r2)
 400044c:	01010134 	movhi	r4,1028
 4000450:	211b4e04 	addi	r4,r4,27960
 4000454:	01400044 	movi	r5,1
 4000458:	01800c44 	movi	r6,49
 400045c:	4001da40 	call	4001da4 <fwrite>
         break;
 4000460:	00007c06 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
 4000464:	00800044 	movi	r2,1
 4000468:	e0bffb15 	stw	r2,-20(fp)
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
 400046c:	00810174 	movhi	r2,1029
 4000470:	10b9bf04 	addi	r2,r2,-6404
 4000474:	10800017 	ldw	r2,0(r2)
 4000478:	11c00317 	ldw	r7,12(r2)
 400047c:	01010134 	movhi	r4,1028
 4000480:	211b5b04 	addi	r4,r4,28012
 4000484:	01400044 	movi	r5,1
 4000488:	01800a44 	movi	r6,41
 400048c:	4001da40 	call	4001da4 <fwrite>
         break;
 4000490:	00007006 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TIMEOUT:
         fault_level = NONE;
 4000494:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Resource not received in specified time\n");
 4000498:	00810174 	movhi	r2,1029
 400049c:	10b9bf04 	addi	r2,r2,-6404
 40004a0:	10800017 	ldw	r2,0(r2)
 40004a4:	11c00317 	ldw	r7,12(r2)
 40004a8:	01010134 	movhi	r4,1028
 40004ac:	211b6604 	addi	r4,r4,28056
 40004b0:	01400044 	movi	r5,1
 40004b4:	01800a04 	movi	r6,40
 40004b8:	4001da40 	call	4001da4 <fwrite>
         break;
 40004bc:	00006506 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
 40004c0:	00810174 	movhi	r2,1029
 40004c4:	10b9bf04 	addi	r2,r2,-6404
 40004c8:	10800017 	ldw	r2,0(r2)
 40004cc:	11c00317 	ldw	r7,12(r2)
 40004d0:	01010134 	movhi	r4,1028
 40004d4:	211b7104 	addi	r4,r4,28100
 40004d8:	01400044 	movi	r5,1
 40004dc:	01800b04 	movi	r6,44
 40004e0:	4001da40 	call	4001da4 <fwrite>
         break;
 40004e4:	00005b06 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
 40004e8:	00810174 	movhi	r2,1029
 40004ec:	10b9bf04 	addi	r2,r2,-6404
 40004f0:	10800017 	ldw	r2,0(r2)
 40004f4:	11c00317 	ldw	r7,12(r2)
 40004f8:	01010134 	movhi	r4,1028
 40004fc:	211b7d04 	addi	r4,r4,28148
 4000500:	01400044 	movi	r5,1
 4000504:	01800884 	movi	r6,34
 4000508:	4001da40 	call	4001da4 <fwrite>
         break;
 400050c:	00005106 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
 4000510:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
 4000514:	00810174 	movhi	r2,1029
 4000518:	10b9bf04 	addi	r2,r2,-6404
 400051c:	10800017 	ldw	r2,0(r2)
 4000520:	11c00317 	ldw	r7,12(r2)
 4000524:	01010134 	movhi	r4,1028
 4000528:	211b8604 	addi	r4,r4,28184
 400052c:	01400044 	movi	r5,1
 4000530:	01800bc4 	movi	r6,47
 4000534:	4001da40 	call	4001da4 <fwrite>
         break;
 4000538:	00004606 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
 400053c:	00810174 	movhi	r2,1029
 4000540:	10b9bf04 	addi	r2,r2,-6404
 4000544:	10800017 	ldw	r2,0(r2)
 4000548:	11c00317 	ldw	r7,12(r2)
 400054c:	01010134 	movhi	r4,1028
 4000550:	211b9204 	addi	r4,r4,28232
 4000554:	01400044 	movi	r5,1
 4000558:	018009c4 	movi	r6,39
 400055c:	4001da40 	call	4001da4 <fwrite>
         break;
 4000560:	00003c06 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_Q_FULL:
         fault_level = NONE;
 4000564:	e03ffb15 	stw	zero,-20(fp)
         fprintf(stderr, "Attempted to post to a full message queue\n");
 4000568:	00810174 	movhi	r2,1029
 400056c:	10b9bf04 	addi	r2,r2,-6404
 4000570:	10800017 	ldw	r2,0(r2)
 4000574:	11c00317 	ldw	r7,12(r2)
 4000578:	01010134 	movhi	r4,1028
 400057c:	211b9c04 	addi	r4,r4,28272
 4000580:	01400044 	movi	r5,1
 4000584:	01800a84 	movi	r6,42
 4000588:	4001da40 	call	4001da4 <fwrite>
         break;
 400058c:	00003106 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
 4000590:	00800044 	movi	r2,1
 4000594:	e0bffb15 	stw	r2,-20(fp)
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
 4000598:	00810174 	movhi	r2,1029
 400059c:	10b9bf04 	addi	r2,r2,-6404
 40005a0:	10800017 	ldw	r2,0(r2)
 40005a4:	11c00317 	ldw	r7,12(r2)
 40005a8:	01010134 	movhi	r4,1028
 40005ac:	211ba704 	addi	r4,r4,28316
 40005b0:	01400044 	movi	r5,1
 40005b4:	01800c04 	movi	r6,48
 40005b8:	4001da40 	call	4001da4 <fwrite>
         break;
 40005bc:	00002506 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
 40005c0:	00800084 	movi	r2,2
 40005c4:	e0bffb15 	stw	r2,-20(fp)
         printf(
 40005c8:	01010134 	movhi	r4,1028
 40005cc:	211bb404 	addi	r4,r4,28368
 40005d0:	400207c0 	call	400207c <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
 40005d4:	00810174 	movhi	r2,1029
 40005d8:	10b9bf04 	addi	r2,r2,-6404
 40005dc:	10800017 	ldw	r2,0(r2)
 40005e0:	11000317 	ldw	r4,12(r2)
 40005e4:	e1bffd17 	ldw	r6,-12(fp)
 40005e8:	01410134 	movhi	r5,1028
 40005ec:	295bc404 	addi	r5,r5,28432
 40005f0:	4001ca80 	call	4001ca8 <fprintf>
                 (char *)expanded_diagnosis_ptr);
         break;           
 40005f4:	00001706 	br	4000654 <alt_uCOSIIErrorHandler+0x44c>
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
 40005f8:	01010134 	movhi	r4,1028
 40005fc:	211bcf04 	addi	r4,r4,28476
 4000600:	40021940 	call	4002194 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
 4000604:	00810174 	movhi	r2,1029
 4000608:	10b9bf04 	addi	r2,r2,-6404
 400060c:	10800017 	ldw	r2,0(r2)
 4000610:	11c00317 	ldw	r7,12(r2)
 4000614:	01010134 	movhi	r4,1028
 4000618:	211bdd04 	addi	r4,r4,28532
 400061c:	01400044 	movi	r5,1
 4000620:	01800404 	movi	r6,16
 4000624:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
 4000628:	00810174 	movhi	r2,1029
 400062c:	10b9bf04 	addi	r2,r2,-6404
 4000630:	10800017 	ldw	r2,0(r2)
 4000634:	11000317 	ldw	r4,12(r2)
 4000638:	e1bffc03 	ldbu	r6,-16(fp)
 400063c:	01410134 	movhi	r5,1028
 4000640:	295be204 	addi	r5,r5,28552
 4000644:	4001ca80 	call	4001ca8 <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
 4000648:	01010134 	movhi	r4,1028
 400064c:	211be704 	addi	r4,r4,28572
 4000650:	40020680 	call	4002068 <perror>

   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */  
   switch (fault_level) {
 4000654:	e0bffb17 	ldw	r2,-20(fp)
 4000658:	e0bfff15 	stw	r2,-4(fp)
 400065c:	e0ffff17 	ldw	r3,-4(fp)
 4000660:	18800060 	cmpeqi	r2,r3,1
 4000664:	1000071e 	bne	r2,zero,4000684 <alt_uCOSIIErrorHandler+0x47c>
 4000668:	e0ffff17 	ldw	r3,-4(fp)
 400066c:	18800070 	cmpltui	r2,r3,1
 4000670:	10003f1e 	bne	r2,zero,4000770 <alt_uCOSIIErrorHandler+0x568>
 4000674:	e0ffff17 	ldw	r3,-4(fp)
 4000678:	188000a0 	cmpeqi	r2,r3,2
 400067c:	10001d1e 	bne	r2,zero,40006f4 <alt_uCOSIIErrorHandler+0x4ec>
 4000680:	00005806 	br	40007e4 <alt_uCOSIIErrorHandler+0x5dc>
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
 4000684:	01010134 	movhi	r4,1028
 4000688:	211bf504 	addi	r4,r4,28628
 400068c:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
 4000690:	00810174 	movhi	r2,1029
 4000694:	10b9bf04 	addi	r2,r2,-6404
 4000698:	10800017 	ldw	r2,0(r2)
 400069c:	11c00317 	ldw	r7,12(r2)
 40006a0:	01010134 	movhi	r4,1028
 40006a4:	211c0204 	addi	r4,r4,28680
 40006a8:	01400044 	movi	r5,1
 40006ac:	01800904 	movi	r6,36
 40006b0:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
 40006b4:	00810174 	movhi	r2,1029
 40006b8:	10b9bf04 	addi	r2,r2,-6404
 40006bc:	10800017 	ldw	r2,0(r2)
 40006c0:	11c00317 	ldw	r7,12(r2)
 40006c4:	01010134 	movhi	r4,1028
 40006c8:	211c0c04 	addi	r4,r4,28720
 40006cc:	01400044 	movi	r5,1
 40006d0:	01800a04 	movi	r6,40
 40006d4:	4001da40 	call	4001da4 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 40006d8:	400d6d40 	call	400d6d4 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 40006dc:	01003fc4 	movi	r4,255
 40006e0:	401378c0 	call	401378c <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 40006e4:	e13ffc03 	ldbu	r4,-16(fp)
 40006e8:	000b883a 	mov	r5,zero
 40006ec:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
         break;
 40006f0:	00004806 	br	4000814 <alt_uCOSIIErrorHandler+0x60c>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 40006f4:	01010134 	movhi	r4,1028
 40006f8:	211c1704 	addi	r4,r4,28764
 40006fc:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
 4000700:	00810174 	movhi	r2,1029
 4000704:	10b9bf04 	addi	r2,r2,-6404
 4000708:	10800017 	ldw	r2,0(r2)
 400070c:	11c00317 	ldw	r7,12(r2)
 4000710:	01010134 	movhi	r4,1028
 4000714:	211c2504 	addi	r4,r4,28820
 4000718:	01400044 	movi	r5,1
 400071c:	01800984 	movi	r6,38
 4000720:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
 4000724:	00810174 	movhi	r2,1029
 4000728:	10b9bf04 	addi	r2,r2,-6404
 400072c:	10800017 	ldw	r2,0(r2)
 4000730:	11c00317 	ldw	r7,12(r2)
 4000734:	01010134 	movhi	r4,1028
 4000738:	211c2f04 	addi	r4,r4,28860
 400073c:	01400044 	movi	r5,1
 4000740:	01800bc4 	movi	r6,47
 4000744:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
 4000748:	00810174 	movhi	r2,1029
 400074c:	10b9bf04 	addi	r2,r2,-6404
 4000750:	10800017 	ldw	r2,0(r2)
 4000754:	11c00317 	ldw	r7,12(r2)
 4000758:	01010134 	movhi	r4,1028
 400075c:	211c3b04 	addi	r4,r4,28908
 4000760:	01400044 	movi	r5,1
 4000764:	01800cc4 	movi	r6,51
 4000768:	4001da40 	call	4001da4 <fwrite>
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
 400076c:	003fff06 	br	400076c <alt_uCOSIIErrorHandler+0x564>
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
 4000770:	00810174 	movhi	r2,1029
 4000774:	10b9bf04 	addi	r2,r2,-6404
 4000778:	10800017 	ldw	r2,0(r2)
 400077c:	11c00317 	ldw	r7,12(r2)
 4000780:	01010134 	movhi	r4,1028
 4000784:	211c4804 	addi	r4,r4,28960
 4000788:	01400044 	movi	r5,1
 400078c:	01800904 	movi	r6,36
 4000790:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
 4000794:	00810174 	movhi	r2,1029
 4000798:	10b9bf04 	addi	r2,r2,-6404
 400079c:	10800017 	ldw	r2,0(r2)
 40007a0:	11c00317 	ldw	r7,12(r2)
 40007a4:	01010134 	movhi	r4,1028
 40007a8:	211c5204 	addi	r4,r4,29000
 40007ac:	01400044 	movi	r5,1
 40007b0:	01800c84 	movi	r6,50
 40007b4:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, 
 40007b8:	00810174 	movhi	r2,1029
 40007bc:	10b9bf04 	addi	r2,r2,-6404
 40007c0:	10800017 	ldw	r2,0(r2)
 40007c4:	11c00317 	ldw	r7,12(r2)
 40007c8:	01010134 	movhi	r4,1028
 40007cc:	211c5f04 	addi	r4,r4,29052
 40007d0:	01400044 	movi	r5,1
 40007d4:	01800f84 	movi	r6,62
 40007d8:	4001da40 	call	4001da4 <fwrite>
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
 40007dc:	400d6d40 	call	400d6d4 <OSSchedUnlock>
         return;   
 40007e0:	00000d06 	br	4000818 <alt_uCOSIIErrorHandler+0x610>
         break;      
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
 40007e4:	01010134 	movhi	r4,1028
 40007e8:	211c6f04 	addi	r4,r4,29116
 40007ec:	40021940 	call	4002194 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
 40007f0:	00810174 	movhi	r2,1029
 40007f4:	10b9bf04 	addi	r2,r2,-6404
 40007f8:	10800017 	ldw	r2,0(r2)
 40007fc:	11c00317 	ldw	r7,12(r2)
 4000800:	01010134 	movhi	r4,1028
 4000804:	211c7d04 	addi	r4,r4,29172
 4000808:	01400044 	movi	r5,1
 400080c:	01800ac4 	movi	r6,43
 4000810:	4001da40 	call	4001da4 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 4000814:	003fff06 	br	4000814 <alt_uCOSIIErrorHandler+0x60c>
}
 4000818:	e037883a 	mov	sp,fp
 400081c:	dfc00117 	ldw	ra,4(sp)
 4000820:	df000017 	ldw	fp,0(sp)
 4000824:	dec00204 	addi	sp,sp,8
 4000828:	f800283a 	ret

0400082c <alt_NetworkErrorHandler>:

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
 400082c:	defffa04 	addi	sp,sp,-24
 4000830:	dfc00515 	stw	ra,20(sp)
 4000834:	df000415 	stw	fp,16(sp)
 4000838:	df000404 	addi	fp,sp,16
 400083c:	e17ffe15 	stw	r5,-8(fp)
 4000840:	e13ffd05 	stb	r4,-12(fp)
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
 4000844:	e0bffd03 	ldbu	r2,-12(fp)
 4000848:	1005003a 	cmpeq	r2,r2,zero
 400084c:	1000981e 	bne	r2,zero,4000ab0 <alt_NetworkErrorHandler+0x284>
   {
      return;
   }

   fault_level = SYSTEM;   
 4000850:	00800084 	movi	r2,2
 4000854:	e0bffc15 	stw	r2,-16(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  
 4000858:	400d6480 	call	400d648 <OSSchedLock>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
 400085c:	e0bffd03 	ldbu	r2,-12(fp)
 4000860:	10803fd8 	cmpnei	r2,r2,255
 4000864:	1000111e 	bne	r2,zero,40008ac <alt_NetworkErrorHandler+0x80>
   {
      fault_level = SYSTEM;
 4000868:	00800084 	movi	r2,2
 400086c:	e0bffc15 	stw	r2,-16(fp)
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
 4000870:	01010134 	movhi	r4,1028
 4000874:	211c8804 	addi	r4,r4,29216
 4000878:	400207c0 	call	400207c <printf>
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
 400087c:	00810174 	movhi	r2,1029
 4000880:	10b9bf04 	addi	r2,r2,-6404
 4000884:	10800017 	ldw	r2,0(r2)
 4000888:	11000317 	ldw	r4,12(r2)
 400088c:	e1bffe17 	ldw	r6,-8(fp)
 4000890:	01410134 	movhi	r5,1028
 4000894:	295c9704 	addi	r5,r5,29276
 4000898:	4001ca80 	call	4001ca8 <fprintf>
      /* Check errno also in case it has been set. */
      perror("\n[Network]:  ERRNO: ");
 400089c:	01010134 	movhi	r4,1028
 40008a0:	211c9b04 	addi	r4,r4,29292
 40008a4:	40020680 	call	4002068 <perror>
 40008a8:	00001006 	br	40008ec <alt_NetworkErrorHandler+0xc0>
   }
   else 
   {
      fault_level = TASK;
 40008ac:	00800044 	movi	r2,1
 40008b0:	e0bffc15 	stw	r2,-16(fp)
      printf("\n[Network]: See STDERR.\n");    
 40008b4:	01010134 	movhi	r4,1028
 40008b8:	211ca104 	addi	r4,r4,29316
 40008bc:	40021940 	call	4002194 <puts>
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
 40008c0:	00810174 	movhi	r2,1029
 40008c4:	10b9bf04 	addi	r2,r2,-6404
 40008c8:	10800017 	ldw	r2,0(r2)
 40008cc:	11000317 	ldw	r4,12(r2)
 40008d0:	e1bffd03 	ldbu	r6,-12(fp)
 40008d4:	01410134 	movhi	r5,1028
 40008d8:	295ca704 	addi	r5,r5,29340
 40008dc:	4001ca80 	call	4001ca8 <fprintf>
      perror("\n[Network]:  ERRNO: ");
 40008e0:	01010134 	movhi	r4,1028
 40008e4:	211c9b04 	addi	r4,r4,29292
 40008e8:	40020680 	call	4002068 <perror>
   }

   /* Process error based on fault level, reenable scheduler if appropriate. */     
   switch (fault_level) 
 40008ec:	e0bffc17 	ldw	r2,-16(fp)
 40008f0:	e0bfff15 	stw	r2,-4(fp)
 40008f4:	e0ffff17 	ldw	r3,-4(fp)
 40008f8:	18800060 	cmpeqi	r2,r3,1
 40008fc:	1000071e 	bne	r2,zero,400091c <alt_NetworkErrorHandler+0xf0>
 4000900:	e0ffff17 	ldw	r3,-4(fp)
 4000904:	18800070 	cmpltui	r2,r3,1
 4000908:	10003f1e 	bne	r2,zero,4000a08 <alt_NetworkErrorHandler+0x1dc>
 400090c:	e0ffff17 	ldw	r3,-4(fp)
 4000910:	188000a0 	cmpeqi	r2,r3,2
 4000914:	10001d1e 	bne	r2,zero,400098c <alt_NetworkErrorHandler+0x160>
 4000918:	00005806 	br	4000a7c <alt_NetworkErrorHandler+0x250>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is TASK).");
 400091c:	01010134 	movhi	r4,1028
 4000920:	211cae04 	addi	r4,r4,29368
 4000924:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is TASK");
 4000928:	00810174 	movhi	r2,1029
 400092c:	10b9bf04 	addi	r2,r2,-6404
 4000930:	10800017 	ldw	r2,0(r2)
 4000934:	11c00317 	ldw	r7,12(r2)
 4000938:	01010134 	movhi	r4,1028
 400093c:	211cba04 	addi	r4,r4,29416
 4000940:	01400044 	movi	r5,1
 4000944:	018007c4 	movi	r6,31
 4000948:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[Network]: Task is being deleted.\n");
 400094c:	00810174 	movhi	r2,1029
 4000950:	10b9bf04 	addi	r2,r2,-6404
 4000954:	10800017 	ldw	r2,0(r2)
 4000958:	11c00317 	ldw	r7,12(r2)
 400095c:	01010134 	movhi	r4,1028
 4000960:	211cc204 	addi	r4,r4,29448
 4000964:	01400044 	movi	r5,1
 4000968:	018008c4 	movi	r6,35
 400096c:	4001da40 	call	4001da4 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 4000970:	400d6d40 	call	400d6d4 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 4000974:	01003fc4 	movi	r4,255
 4000978:	401378c0 	call	401378c <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 400097c:	e13ffd03 	ldbu	r4,-12(fp)
 4000980:	000b883a 	mov	r5,zero
 4000984:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
         break;
 4000988:	00004806 	br	4000aac <alt_NetworkErrorHandler+0x280>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 400098c:	01010134 	movhi	r4,1028
 4000990:	211ccb04 	addi	r4,r4,29484
 4000994:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is SYSTEM.");
 4000998:	00810174 	movhi	r2,1029
 400099c:	10b9bf04 	addi	r2,r2,-6404
 40009a0:	10800017 	ldw	r2,0(r2)
 40009a4:	11c00317 	ldw	r7,12(r2)
 40009a8:	01010134 	movhi	r4,1028
 40009ac:	211cd704 	addi	r4,r4,29532
 40009b0:	01400044 	movi	r5,1
 40009b4:	01800884 	movi	r6,34
 40009b8:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[Network]: FATAL Error, Restart required.");
 40009bc:	00810174 	movhi	r2,1029
 40009c0:	10b9bf04 	addi	r2,r2,-6404
 40009c4:	10800017 	ldw	r2,0(r2)
 40009c8:	11c00317 	ldw	r7,12(r2)
 40009cc:	01010134 	movhi	r4,1028
 40009d0:	211ce004 	addi	r4,r4,29568
 40009d4:	01400044 	movi	r5,1
 40009d8:	01800a84 	movi	r6,42
 40009dc:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[Network]: Locking scheduler - endless loop.\n");
 40009e0:	00810174 	movhi	r2,1029
 40009e4:	10b9bf04 	addi	r2,r2,-6404
 40009e8:	10800017 	ldw	r2,0(r2)
 40009ec:	11c00317 	ldw	r7,12(r2)
 40009f0:	01010134 	movhi	r4,1028
 40009f4:	211ceb04 	addi	r4,r4,29612
 40009f8:	01400044 	movi	r5,1
 40009fc:	01800b84 	movi	r6,46
 4000a00:	4001da40 	call	4001da4 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
 4000a04:	003fff06 	br	4000a04 <alt_NetworkErrorHandler+0x1d8>
         break;
      case NONE:
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is NONE.");
 4000a08:	00810174 	movhi	r2,1029
 4000a0c:	10b9bf04 	addi	r2,r2,-6404
 4000a10:	10800017 	ldw	r2,0(r2)
 4000a14:	11c00317 	ldw	r7,12(r2)
 4000a18:	01010134 	movhi	r4,1028
 4000a1c:	211cf704 	addi	r4,r4,29660
 4000a20:	01400044 	movi	r5,1
 4000a24:	01800804 	movi	r6,32
 4000a28:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[Network]: Informational "
 4000a2c:	00810174 	movhi	r2,1029
 4000a30:	10b9bf04 	addi	r2,r2,-6404
 4000a34:	10800017 	ldw	r2,0(r2)
 4000a38:	11c00317 	ldw	r7,12(r2)
 4000a3c:	01010134 	movhi	r4,1028
 4000a40:	211d0004 	addi	r4,r4,29696
 4000a44:	01400044 	movi	r5,1
 4000a48:	01800d84 	movi	r6,54
 4000a4c:	4001da40 	call	4001da4 <fwrite>
                         "error only, control returned");
         fprintf(stderr, 
 4000a50:	00810174 	movhi	r2,1029
 4000a54:	10b9bf04 	addi	r2,r2,-6404
 4000a58:	10800017 	ldw	r2,0(r2)
 4000a5c:	11c00317 	ldw	r7,12(r2)
 4000a60:	01010134 	movhi	r4,1028
 4000a64:	211d0e04 	addi	r4,r4,29752
 4000a68:	01400044 	movi	r5,1
 4000a6c:	01800e44 	movi	r6,57
 4000a70:	4001da40 	call	4001da4 <fwrite>
            "to task to complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
 4000a74:	400d6d40 	call	400d6d4 <OSSchedUnlock>
         return;
 4000a78:	00000d06 	br	4000ab0 <alt_NetworkErrorHandler+0x284>
         break;         
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
 4000a7c:	01010134 	movhi	r4,1028
 4000a80:	211d1d04 	addi	r4,r4,29812
 4000a84:	40021940 	call	4002194 <puts>
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
 4000a88:	00810174 	movhi	r2,1029
 4000a8c:	10b9bf04 	addi	r2,r2,-6404
 4000a90:	10800017 	ldw	r2,0(r2)
 4000a94:	11c00317 	ldw	r7,12(r2)
 4000a98:	01010134 	movhi	r4,1028
 4000a9c:	211d2a04 	addi	r4,r4,29864
 4000aa0:	01400044 	movi	r5,1
 4000aa4:	01800984 	movi	r6,38
 4000aa8:	4001da40 	call	4001da4 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 4000aac:	003fff06 	br	4000aac <alt_NetworkErrorHandler+0x280>
}
 4000ab0:	e037883a 	mov	sp,fp
 4000ab4:	dfc00117 	ldw	ra,4(sp)
 4000ab8:	df000017 	ldw	fp,0(sp)
 4000abc:	dec00204 	addi	sp,sp,8
 4000ac0:	f800283a 	ret

04000ac4 <alt_SSSErrorHandler>:
   
   
void alt_SSSErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
 4000ac4:	defff804 	addi	sp,sp,-32
 4000ac8:	dfc00715 	stw	ra,28(sp)
 4000acc:	df000615 	stw	fp,24(sp)
 4000ad0:	df000604 	addi	fp,sp,24
 4000ad4:	e17ffc15 	stw	r5,-16(fp)
 4000ad8:	e13ffb05 	stb	r4,-20(fp)
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
 4000adc:	e0bffb03 	ldbu	r2,-20(fp)
 4000ae0:	1005003a 	cmpeq	r2,r2,zero
 4000ae4:	1000ad1e 	bne	r2,zero,4000d9c <alt_SSSErrorHandler+0x2d8>
   {
      return;
   }

   fault_level = (error_code == OS_NO_ERR) ? NONE : SYSTEM;
 4000ae8:	e0bffb03 	ldbu	r2,-20(fp)
 4000aec:	1004c03a 	cmpne	r2,r2,zero
 4000af0:	1000021e 	bne	r2,zero,4000afc <alt_SSSErrorHandler+0x38>
 4000af4:	e03ffe15 	stw	zero,-8(fp)
 4000af8:	00000206 	br	4000b04 <alt_SSSErrorHandler+0x40>
 4000afc:	00800084 	movi	r2,2
 4000b00:	e0bffe15 	stw	r2,-8(fp)
 4000b04:	e0fffe17 	ldw	r3,-8(fp)
 4000b08:	e0fffa15 	stw	r3,-24(fp)
   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
 4000b0c:	400d6480 	call	400d648 <OSSchedLock>
   switch (error_code)
 4000b10:	e0bffb03 	ldbu	r2,-20(fp)
 4000b14:	e0bffd15 	stw	r2,-12(fp)
 4000b18:	e0fffd17 	ldw	r3,-12(fp)
 4000b1c:	188007a0 	cmpeqi	r2,r3,30
 4000b20:	1000121e 	bne	r2,zero,4000b6c <alt_SSSErrorHandler+0xa8>
 4000b24:	e0fffd17 	ldw	r3,-12(fp)
 4000b28:	18803fe0 	cmpeqi	r2,r3,255
 4000b2c:	1000011e 	bne	r2,zero,4000b34 <alt_SSSErrorHandler+0x70>
 4000b30:	00001906 	br	4000b98 <alt_SSSErrorHandler+0xd4>
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
 4000b34:	00800084 	movi	r2,2
 4000b38:	e0bffa15 	stw	r2,-24(fp)
         printf("\n[SSS]: See STDERR for expanded diagnosis translation.");    
 4000b3c:	01010134 	movhi	r4,1028
 4000b40:	211d3404 	addi	r4,r4,29904
 4000b44:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[SSS]: %s", (char *)expanded_diagnosis_ptr);
 4000b48:	00810174 	movhi	r2,1029
 4000b4c:	10b9bf04 	addi	r2,r2,-6404
 4000b50:	10800017 	ldw	r2,0(r2)
 4000b54:	11000317 	ldw	r4,12(r2)
 4000b58:	e1bffc17 	ldw	r6,-16(fp)
 4000b5c:	01410134 	movhi	r5,1028
 4000b60:	295d4204 	addi	r5,r5,29960
 4000b64:	4001ca80 	call	4001ca8 <fprintf>
         break;
 4000b68:	00001b06 	br	4000bd8 <alt_SSSErrorHandler+0x114>
         
      case OS_Q_FULL:
         fault_level = NONE;
 4000b6c:	e03ffa15 	stw	zero,-24(fp)
         fprintf(stderr,"\n[SSS]: Attempted to post to a full message queue.");
 4000b70:	00810174 	movhi	r2,1029
 4000b74:	10b9bf04 	addi	r2,r2,-6404
 4000b78:	10800017 	ldw	r2,0(r2)
 4000b7c:	11c00317 	ldw	r7,12(r2)
 4000b80:	01010134 	movhi	r4,1028
 4000b84:	211d4504 	addi	r4,r4,29972
 4000b88:	01400044 	movi	r5,1
 4000b8c:	01800c84 	movi	r6,50
 4000b90:	4001da40 	call	4001da4 <fwrite>
         break;
 4000b94:	00001006 	br	4000bd8 <alt_SSSErrorHandler+0x114>
      
      default:
         fault_level = SYSTEM;
 4000b98:	00800084 	movi	r2,2
 4000b9c:	e0bffa15 	stw	r2,-24(fp)
         printf("\n[SSS]: See STDERR.\n");    
 4000ba0:	01010134 	movhi	r4,1028
 4000ba4:	211d5204 	addi	r4,r4,30024
 4000ba8:	40021940 	call	4002194 <puts>
         fprintf(stderr, "\n[SSS]: Error_code %d!", error_code);        
 4000bac:	00810174 	movhi	r2,1029
 4000bb0:	10b9bf04 	addi	r2,r2,-6404
 4000bb4:	10800017 	ldw	r2,0(r2)
 4000bb8:	11000317 	ldw	r4,12(r2)
 4000bbc:	e1bffb03 	ldbu	r6,-20(fp)
 4000bc0:	01410134 	movhi	r5,1028
 4000bc4:	295d5704 	addi	r5,r5,30044
 4000bc8:	4001ca80 	call	4001ca8 <fprintf>
         perror("\n[SSS]:  ERRNO: ");
 4000bcc:	01010134 	movhi	r4,1028
 4000bd0:	211d5d04 	addi	r4,r4,30068
 4000bd4:	40020680 	call	4002068 <perror>
   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */     
   switch (fault_level) 
 4000bd8:	e0bffa17 	ldw	r2,-24(fp)
 4000bdc:	e0bfff15 	stw	r2,-4(fp)
 4000be0:	e0ffff17 	ldw	r3,-4(fp)
 4000be4:	18800060 	cmpeqi	r2,r3,1
 4000be8:	1000071e 	bne	r2,zero,4000c08 <alt_SSSErrorHandler+0x144>
 4000bec:	e0ffff17 	ldw	r3,-4(fp)
 4000bf0:	18800070 	cmpltui	r2,r3,1
 4000bf4:	10003f1e 	bne	r2,zero,4000cf4 <alt_SSSErrorHandler+0x230>
 4000bf8:	e0ffff17 	ldw	r3,-4(fp)
 4000bfc:	188000a0 	cmpeqi	r2,r3,2
 4000c00:	10001d1e 	bne	r2,zero,4000c78 <alt_SSSErrorHandler+0x1b4>
 4000c04:	00005806 	br	4000d68 <alt_SSSErrorHandler+0x2a4>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is TASK).");
 4000c08:	01010134 	movhi	r4,1028
 4000c0c:	211d6204 	addi	r4,r4,30088
 4000c10:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is TASK");
 4000c14:	00810174 	movhi	r2,1029
 4000c18:	10b9bf04 	addi	r2,r2,-6404
 4000c1c:	10800017 	ldw	r2,0(r2)
 4000c20:	11c00317 	ldw	r7,12(r2)
 4000c24:	01010134 	movhi	r4,1028
 4000c28:	211d6d04 	addi	r4,r4,30132
 4000c2c:	01400044 	movi	r5,1
 4000c30:	018006c4 	movi	r6,27
 4000c34:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[SSS]: Task is being deleted.\n");
 4000c38:	00810174 	movhi	r2,1029
 4000c3c:	10b9bf04 	addi	r2,r2,-6404
 4000c40:	10800017 	ldw	r2,0(r2)
 4000c44:	11c00317 	ldw	r7,12(r2)
 4000c48:	01010134 	movhi	r4,1028
 4000c4c:	211d7404 	addi	r4,r4,30160
 4000c50:	01400044 	movi	r5,1
 4000c54:	018007c4 	movi	r6,31
 4000c58:	4001da40 	call	4001da4 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
 4000c5c:	400d6d40 	call	400d6d4 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
 4000c60:	01003fc4 	movi	r4,255
 4000c64:	401378c0 	call	401378c <OSTaskDel>
         /* Invoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
 4000c68:	e13ffb03 	ldbu	r4,-20(fp)
 4000c6c:	000b883a 	mov	r5,zero
 4000c70:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
         break;
 4000c74:	00004806 	br	4000d98 <alt_SSSErrorHandler+0x2d4>
      case SYSTEM:
          /* Total System Failure, Restart Required */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is SYSTEM).");    
 4000c78:	01010134 	movhi	r4,1028
 4000c7c:	211d7c04 	addi	r4,r4,30192
 4000c80:	400207c0 	call	400207c <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is SYSTEM.");
 4000c84:	00810174 	movhi	r2,1029
 4000c88:	10b9bf04 	addi	r2,r2,-6404
 4000c8c:	10800017 	ldw	r2,0(r2)
 4000c90:	11c00317 	ldw	r7,12(r2)
 4000c94:	01010134 	movhi	r4,1028
 4000c98:	211d8704 	addi	r4,r4,30236
 4000c9c:	01400044 	movi	r5,1
 4000ca0:	01800784 	movi	r6,30
 4000ca4:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[SSS]: FATAL Error, Restart required.");
 4000ca8:	00810174 	movhi	r2,1029
 4000cac:	10b9bf04 	addi	r2,r2,-6404
 4000cb0:	10800017 	ldw	r2,0(r2)
 4000cb4:	11c00317 	ldw	r7,12(r2)
 4000cb8:	01010134 	movhi	r4,1028
 4000cbc:	211d8f04 	addi	r4,r4,30268
 4000cc0:	01400044 	movi	r5,1
 4000cc4:	01800984 	movi	r6,38
 4000cc8:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, "\n[SSS]: Locking scheduler - endless loop.\n");
 4000ccc:	00810174 	movhi	r2,1029
 4000cd0:	10b9bf04 	addi	r2,r2,-6404
 4000cd4:	10800017 	ldw	r2,0(r2)
 4000cd8:	11c00317 	ldw	r7,12(r2)
 4000cdc:	01010134 	movhi	r4,1028
 4000ce0:	211d9904 	addi	r4,r4,30308
 4000ce4:	01400044 	movi	r5,1
 4000ce8:	01800a84 	movi	r6,42
 4000cec:	4001da40 	call	4001da4 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
 4000cf0:	003fff06 	br	4000cf0 <alt_SSSErrorHandler+0x22c>
         break;
      case NONE:
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is NONE.");
 4000cf4:	00810174 	movhi	r2,1029
 4000cf8:	10b9bf04 	addi	r2,r2,-6404
 4000cfc:	10800017 	ldw	r2,0(r2)
 4000d00:	11c00317 	ldw	r7,12(r2)
 4000d04:	01010134 	movhi	r4,1028
 4000d08:	211da404 	addi	r4,r4,30352
 4000d0c:	01400044 	movi	r5,1
 4000d10:	018006c4 	movi	r6,27
 4000d14:	4001da40 	call	4001da4 <fwrite>
         fprintf(stderr, 
 4000d18:	00810174 	movhi	r2,1029
 4000d1c:	10b9bf04 	addi	r2,r2,-6404
 4000d20:	10800017 	ldw	r2,0(r2)
 4000d24:	11c00317 	ldw	r7,12(r2)
 4000d28:	01010134 	movhi	r4,1028
 4000d2c:	211dab04 	addi	r4,r4,30380
 4000d30:	01400044 	movi	r5,1
 4000d34:	01800f44 	movi	r6,61
 4000d38:	4001da40 	call	4001da4 <fwrite>
            "\n[SSS] Informational error only, control returned to task to ");
         fprintf(stderr,
 4000d3c:	00810174 	movhi	r2,1029
 4000d40:	10b9bf04 	addi	r2,r2,-6404
 4000d44:	10800017 	ldw	r2,0(r2)
 4000d48:	11c00317 	ldw	r7,12(r2)
 4000d4c:	01010134 	movhi	r4,1028
 4000d50:	211dbb04 	addi	r4,r4,30444
 4000d54:	01400044 	movi	r5,1
 4000d58:	01800b84 	movi	r6,46
 4000d5c:	4001da40 	call	4001da4 <fwrite>
            "complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
 4000d60:	400d6d40 	call	400d6d4 <OSSchedUnlock>
         return;         
 4000d64:	00000d06 	br	4000d9c <alt_SSSErrorHandler+0x2d8>
         break;
      default:
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is Unknown).\n");
 4000d68:	01010134 	movhi	r4,1028
 4000d6c:	211dc704 	addi	r4,r4,30492
 4000d70:	40021940 	call	4002194 <puts>
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is unknown!?!\n");
 4000d74:	00810174 	movhi	r2,1029
 4000d78:	10b9bf04 	addi	r2,r2,-6404
 4000d7c:	10800017 	ldw	r2,0(r2)
 4000d80:	11c00317 	ldw	r7,12(r2)
 4000d84:	01010134 	movhi	r4,1028
 4000d88:	211dd304 	addi	r4,r4,30540
 4000d8c:	01400044 	movi	r5,1
 4000d90:	01800844 	movi	r6,33
 4000d94:	4001da40 	call	4001da4 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
 4000d98:	003fff06 	br	4000d98 <alt_SSSErrorHandler+0x2d4>
}
 4000d9c:	e037883a 	mov	sp,fp
 4000da0:	dfc00117 	ldw	ra,4(sp)
 4000da4:	df000017 	ldw	fp,0(sp)
 4000da8:	dec00204 	addi	sp,sp,8
 4000dac:	f800283a 	ret

04000db0 <SSSInitialTask>:
/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data)
{
 4000db0:	defffc04 	addi	sp,sp,-16
 4000db4:	dfc00315 	stw	ra,12(sp)
 4000db8:	df000215 	stw	fp,8(sp)
 4000dbc:	df000204 	addi	fp,sp,8
 4000dc0:	e13fff15 	stw	r4,-4(fp)
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
 4000dc4:	40262dc0 	call	40262dc <alt_iniche_init>
  netmain(); 
 4000dc8:	40215240 	call	4021524 <netmain>

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 4000dcc:	00000206 	br	4000dd8 <SSSInitialTask+0x28>
    TK_SLEEP(1);
 4000dd0:	01000084 	movi	r4,2
 4000dd4:	40148840 	call	4014884 <OSTimeDly>
  netmain(); 

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
 4000dd8:	00810174 	movhi	r2,1029
 4000ddc:	1081c804 	addi	r2,r2,1824
 4000de0:	10800017 	ldw	r2,0(r2)
 4000de4:	1005003a 	cmpeq	r2,r2,zero
 4000de8:	103ff91e 	bne	r2,zero,4000dd0 <SSSInitialTask+0x20>

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nSimple Socket Server starting up\n");
 4000dec:	01010134 	movhi	r4,1028
 4000df0:	211de204 	addi	r4,r4,30600
 4000df4:	40021940 	call	4002194 <puts>

  /* Create the main simple socket server task. */
  TK_NEWTASK(&ssstask);
 4000df8:	01010174 	movhi	r4,1029
 4000dfc:	21328e04 	addi	r4,r4,-13768
 4000e00:	4025f9c0 	call	4025f9c <TK_NEWTASK>
  
  /*create os data structures */
  SSSCreateOSDataStructs(); 
 4000e04:	400123c0 	call	400123c <SSSCreateOSDataStructs>

  /* create the other tasks */
  SSSCreateTasks();
 4000e08:	40012e40 	call	40012e4 <SSSCreateTasks>

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  error_code = OSTaskDel(OS_PRIO_SELF);
 4000e0c:	01003fc4 	movi	r4,255
 4000e10:	401378c0 	call	401378c <OSTaskDel>
 4000e14:	e0bffe05 	stb	r2,-8(fp)
  alt_uCOSIIErrorHandler(error_code, 0);
 4000e18:	e13ffe03 	ldbu	r4,-8(fp)
 4000e1c:	000b883a 	mov	r5,zero
 4000e20:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
  
  while (1); /* Correct Program Flow should never get here */
 4000e24:	003fff06 	br	4000e24 <SSSInitialTask+0x74>

04000e28 <main>:

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
 4000e28:	defff504 	addi	sp,sp,-44
 4000e2c:	dfc00a15 	stw	ra,40(sp)
 4000e30:	df000915 	stw	fp,36(sp)
 4000e34:	df000904 	addi	fp,sp,36
 4000e38:	e13ffd15 	stw	r4,-12(fp)
 4000e3c:	e17ffe15 	stw	r5,-8(fp)
 4000e40:	e1bfff15 	stw	r6,-4(fp)
  
  INT8U error_code;

  setup_phy();
 4000e44:	4001b600 	call	4001b60 <setup_phy>

  /* Clear the RTOS timer */
  OSTimeSet(0);
 4000e48:	0009883a 	mov	r4,zero
 4000e4c:	4014db40 	call	4014db4 <OSTimeSet>

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
   * RTOS structures and tasks. 
   */  
  error_code = OSTaskCreateExt(SSSInitialTask,
 4000e50:	01810174 	movhi	r6,1029
 4000e54:	318c0404 	addi	r6,r6,12304
 4000e58:	00800144 	movi	r2,5
 4000e5c:	d8800015 	stw	r2,0(sp)
 4000e60:	00810174 	movhi	r2,1029
 4000e64:	10840404 	addi	r2,r2,4112
 4000e68:	d8800115 	stw	r2,4(sp)
 4000e6c:	00820004 	movi	r2,2048
 4000e70:	d8800215 	stw	r2,8(sp)
 4000e74:	d8000315 	stw	zero,12(sp)
 4000e78:	d8000415 	stw	zero,16(sp)
 4000e7c:	01010034 	movhi	r4,1024
 4000e80:	21036c04 	addi	r4,r4,3504
 4000e84:	000b883a 	mov	r5,zero
 4000e88:	01c00144 	movi	r7,5
 4000e8c:	401358c0 	call	401358c <OSTaskCreateExt>
 4000e90:	e0bffc05 	stb	r2,-16(fp)
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
 4000e94:	e13ffc03 	ldbu	r4,-16(fp)
 4000e98:	000b883a 	mov	r5,zero
 4000e9c:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
 4000ea0:	400d7b80 	call	400d7b8 <OSStart>

  
  while(1); /* Correct Program Flow never gets here. */
 4000ea4:	003fff06 	br	4000ea4 <main+0x7c>

04000ea8 <led_bit_toggle>:
 * Development Board which controls 8 LEDs, D0 - D7.
 * 
 */
 
void led_bit_toggle(OS_FLAGS bit)
{
 4000ea8:	defffc04 	addi	sp,sp,-16
 4000eac:	dfc00315 	stw	ra,12(sp)
 4000eb0:	df000215 	stw	fp,8(sp)
 4000eb4:	df000204 	addi	fp,sp,8
 4000eb8:	e13fff0d 	sth	r4,-4(fp)
    OS_FLAGS  led_8_val;
    INT8U error_code;
    
    led_8_val = OSFlagQuery(SSSLEDEventFlag, &error_code);
 4000ebc:	00810174 	movhi	r2,1029
 4000ec0:	10819804 	addi	r2,r2,1632
 4000ec4:	11000017 	ldw	r4,0(r2)
 4000ec8:	e17ffe84 	addi	r5,fp,-6
 4000ecc:	40102080 	call	4010208 <OSFlagQuery>
 4000ed0:	e0bffe0d 	sth	r2,-8(fp)
    alt_uCOSIIErrorHandler(error_code, 0);
 4000ed4:	e0bffe83 	ldbu	r2,-6(fp)
 4000ed8:	11003fcc 	andi	r4,r2,255
 4000edc:	000b883a 	mov	r5,zero
 4000ee0:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
    if (bit & led_8_val)
 4000ee4:	e0ffff0b 	ldhu	r3,-4(fp)
 4000ee8:	e0bffe0b 	ldhu	r2,-8(fp)
 4000eec:	1884703a 	and	r2,r3,r2
 4000ef0:	10bfffcc 	andi	r2,r2,65535
 4000ef4:	1005003a 	cmpeq	r2,r2,zero
 4000ef8:	10000d1e 	bne	r2,zero,4000f30 <led_bit_toggle+0x88>
    {
       led_8_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_CLR, &error_code);
 4000efc:	00810174 	movhi	r2,1029
 4000f00:	10819804 	addi	r2,r2,1632
 4000f04:	11000017 	ldw	r4,0(r2)
 4000f08:	e17fff0b 	ldhu	r5,-4(fp)
 4000f0c:	e1fffe84 	addi	r7,fp,-6
 4000f10:	000d883a 	mov	r6,zero
 4000f14:	400fe600 	call	400fe60 <OSFlagPost>
 4000f18:	e0bffe0d 	sth	r2,-8(fp)
       alt_uCOSIIErrorHandler(error_code, 0);
 4000f1c:	e0bffe83 	ldbu	r2,-6(fp)
 4000f20:	11003fcc 	andi	r4,r2,255
 4000f24:	000b883a 	mov	r5,zero
 4000f28:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
 4000f2c:	00000c06 	br	4000f60 <led_bit_toggle+0xb8>
    }
    else
    {
       led_8_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_SET, &error_code);
 4000f30:	00810174 	movhi	r2,1029
 4000f34:	10819804 	addi	r2,r2,1632
 4000f38:	11000017 	ldw	r4,0(r2)
 4000f3c:	e17fff0b 	ldhu	r5,-4(fp)
 4000f40:	e1fffe84 	addi	r7,fp,-6
 4000f44:	01800044 	movi	r6,1
 4000f48:	400fe600 	call	400fe60 <OSFlagPost>
 4000f4c:	e0bffe0d 	sth	r2,-8(fp)
       alt_uCOSIIErrorHandler(error_code, 0);
 4000f50:	e0bffe83 	ldbu	r2,-6(fp)
 4000f54:	11003fcc 	andi	r4,r2,255
 4000f58:	000b883a 	mov	r5,zero
 4000f5c:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
    }
    #ifdef LED_PIO_BASE
       IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led_8_val);
 4000f60:	e0fffe0b 	ldhu	r3,-8(fp)
 4000f64:	0005883a 	mov	r2,zero
 4000f68:	10c00035 	stwio	r3,0(r2)
       printf("Value for LED_PIO_BASE set to %d.\n", (INT8U)led_8_val);
 4000f6c:	e0bffe0b 	ldhu	r2,-8(fp)
 4000f70:	11403fcc 	andi	r5,r2,255
 4000f74:	01010134 	movhi	r4,1028
 4000f78:	211deb04 	addi	r4,r4,30636
 4000f7c:	400207c0 	call	400207c <printf>
    #endif
      
    return;
}
 4000f80:	e037883a 	mov	sp,fp
 4000f84:	dfc00117 	ldw	ra,4(sp)
 4000f88:	df000017 	ldw	fp,0(sp)
 4000f8c:	dec00204 	addi	sp,sp,8
 4000f90:	f800283a 	ret

04000f94 <LEDManagementTask>:
 * The task will read the SSSLedCommandQ for an 
 * in-coming message command from the SSSSimpleSocketServerTask. 
 */
 
void LEDManagementTask()
{
 4000f94:	defffa04 	addi	sp,sp,-24
 4000f98:	dfc00515 	stw	ra,20(sp)
 4000f9c:	df000415 	stw	fp,16(sp)
 4000fa0:	df000404 	addi	fp,sp,16
  INT32U led_command; 
  INT16U led_7_seg_val;
  BOOLEAN SSSLEDLightshowActive;
  INT8U error_code;
  
  led_7_seg_val = 0;
 4000fa4:	e03ffc8d 	sth	zero,-14(fp)
  SSSLEDLightshowActive = OS_TRUE;
 4000fa8:	00800044 	movi	r2,1
 4000fac:	e0bffc05 	stb	r2,-16(fp)
 4000fb0:	00000006 	br	4000fb4 <LEDManagementTask+0x20>
  
  while(1)
  {
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
 4000fb4:	00810174 	movhi	r2,1029
 4000fb8:	10819604 	addi	r2,r2,1624
 4000fbc:	11000017 	ldw	r4,0(r2)
 4000fc0:	e1bffe04 	addi	r6,fp,-8
 4000fc4:	000b883a 	mov	r5,zero
 4000fc8:	40116780 	call	4011678 <OSQPend>
 4000fcc:	e0bffd15 	stw	r2,-12(fp)
   
    alt_uCOSIIErrorHandler(error_code, 0);
 4000fd0:	e0bffe03 	ldbu	r2,-8(fp)
 4000fd4:	11003fcc 	andi	r4,r2,255
 4000fd8:	000b883a 	mov	r5,zero
 4000fdc:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
        
    switch (led_command) {
 4000fe0:	e0bffd17 	ldw	r2,-12(fp)
 4000fe4:	10bff404 	addi	r2,r2,-48
 4000fe8:	e0bfff15 	stw	r2,-4(fp)
 4000fec:	e0ffff17 	ldw	r3,-4(fp)
 4000ff0:	18800228 	cmpgeui	r2,r3,8
 4000ff4:	103fef1e 	bne	r2,zero,4000fb4 <LEDManagementTask+0x20>
 4000ff8:	e13fff17 	ldw	r4,-4(fp)
 4000ffc:	e13fff17 	ldw	r4,-4(fp)
 4001000:	2105883a 	add	r2,r4,r4
 4001004:	1087883a 	add	r3,r2,r2
 4001008:	00810034 	movhi	r2,1024
 400100c:	10840704 	addi	r2,r2,4124
 4001010:	1885883a 	add	r2,r3,r2
 4001014:	10800017 	ldw	r2,0(r2)
 4001018:	1000683a 	jmp	r2
 400101c:	0400103c 	xorhi	r16,zero,64
 4001020:	04001048 	cmpgei	r16,zero,65
 4001024:	04001054 	movui	r16,65
 4001028:	04001060 	cmpeqi	r16,zero,65
 400102c:	0400106c 	andhi	r16,zero,65
 4001030:	04001078 	rdprs	r16,zero,65
 4001034:	04001084 	movi	r16,66
 4001038:	04001090 	cmplti	r16,zero,66
      case CMD_LEDS_BIT_0_TOGGLE:
         led_bit_toggle(BIT_0);
 400103c:	01000044 	movi	r4,1
 4001040:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
 4001044:	003fdb06 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_1_TOGGLE:
         led_bit_toggle(BIT_1);
 4001048:	01000084 	movi	r4,2
 400104c:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;   
 4001050:	003fd806 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_2_TOGGLE:
         led_bit_toggle(BIT_2);
 4001054:	01000104 	movi	r4,4
 4001058:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
 400105c:	003fd506 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_3_TOGGLE:
         led_bit_toggle(BIT_3);
 4001060:	01000204 	movi	r4,8
 4001064:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
 4001068:	003fd206 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_4_TOGGLE:
         led_bit_toggle(BIT_4);
 400106c:	01000404 	movi	r4,16
 4001070:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
 4001074:	003fcf06 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_5_TOGGLE:
         led_bit_toggle(BIT_5);
 4001078:	01000804 	movi	r4,32
 400107c:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
 4001080:	003fcc06 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_6_TOGGLE:
         led_bit_toggle(BIT_6);
 4001084:	01001004 	movi	r4,64
 4001088:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
 400108c:	003fc906 	br	4000fb4 <LEDManagementTask+0x20>
      case CMD_LEDS_BIT_7_TOGGLE:
         led_bit_toggle(BIT_7);
 4001090:	01002004 	movi	r4,128
 4001094:	4000ea80 	call	4000ea8 <led_bit_toggle>
         break;
      default:     
        /* Discard unknown LED commands. */
        break;
    } /* switch led_command */
  } /* while(1) */
 4001098:	003fc606 	br	4000fb4 <LEDManagementTask+0x20>

0400109c <get_mac_addr>:
* Read the MAC address in a board specific way. Prompt user to enter serial 
* number to generate MAC address if failed to read from flash.
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
 400109c:	defffb04 	addi	sp,sp,-20
 40010a0:	dfc00415 	stw	ra,16(sp)
 40010a4:	df000315 	stw	fp,12(sp)
 40010a8:	df000304 	addi	fp,sp,12
 40010ac:	e13ffe15 	stw	r4,-8(fp)
 40010b0:	e17fff15 	stw	r5,-4(fp)
    error_t error = 0;
 40010b4:	e03ffd15 	stw	zero,-12(fp)
    error = generate_mac_addr(mac_addr);
 40010b8:	e13fff17 	ldw	r4,-4(fp)
 40010bc:	40011380 	call	4001138 <generate_mac_addr>
 40010c0:	e0bffd15 	stw	r2,-12(fp)
    return error;
 40010c4:	e0bffd17 	ldw	r2,-12(fp)
}
 40010c8:	e037883a 	mov	sp,fp
 40010cc:	dfc00117 	ldw	ra,4(sp)
 40010d0:	df000017 	ldw	fp,0(sp)
 40010d4:	dec00204 	addi	sp,sp,8
 40010d8:	f800283a 	ret

040010dc <get_ip_addr>:
int get_ip_addr(alt_iniche_dev *p_dev,
                ip_addr* ipaddr,
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{
 40010dc:	defffb04 	addi	sp,sp,-20
 40010e0:	df000415 	stw	fp,16(sp)
 40010e4:	df000404 	addi	fp,sp,16
 40010e8:	e13ffc15 	stw	r4,-16(fp)
 40010ec:	e17ffd15 	stw	r5,-12(fp)
 40010f0:	e1bffe15 	stw	r6,-8(fp)
 40010f4:	e1ffff15 	stw	r7,-4(fp)

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
 40010f8:	e0bffd17 	ldw	r2,-12(fp)
 40010fc:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
 4001100:	e0bfff17 	ldw	r2,-4(fp)
 4001104:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
 4001108:	e0fffe17 	ldw	r3,-8(fp)
 400110c:	00804034 	movhi	r2,256
 4001110:	10bfffc4 	addi	r2,r2,-1
 4001114:	18800015 	stw	r2,0(r3)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
 4001118:	e0c00117 	ldw	r3,4(fp)
 400111c:	00800044 	movi	r2,1
 4001120:	18800015 	stw	r2,0(r3)
        ip4_addr3(*ipaddr),
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
 4001124:	00800044 	movi	r2,1
}
 4001128:	e037883a 	mov	sp,fp
 400112c:	df000017 	ldw	fp,0(sp)
 4001130:	dec00104 	addi	sp,sp,4
 4001134:	f800283a 	ret

04001138 <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
 4001138:	defff904 	addi	sp,sp,-28
 400113c:	dfc00615 	stw	ra,24(sp)
 4001140:	df000515 	stw	fp,20(sp)
 4001144:	df000504 	addi	fp,sp,20
 4001148:	e13fff15 	stw	r4,-4(fp)
    error_t error = -1;
 400114c:	00bfffc4 	movi	r2,-1
 4001150:	e0bffe15 	stw	r2,-8(fp)
    
    if (1)
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
 4001154:	e0bfff17 	ldw	r2,-4(fp)
 4001158:	10000005 	stb	zero,0(r2)
        mac_addr[1] = 0x1;
 400115c:	e0bfff17 	ldw	r2,-4(fp)
 4001160:	10c00044 	addi	r3,r2,1
 4001164:	00800044 	movi	r2,1
 4001168:	18800005 	stb	r2,0(r3)
        mac_addr[2] = 0x2;
 400116c:	e0bfff17 	ldw	r2,-4(fp)
 4001170:	10c00084 	addi	r3,r2,2
 4001174:	00800084 	movi	r2,2
 4001178:	18800005 	stb	r2,0(r3)
        
        mac_addr[3] = 0x3;
 400117c:	e0bfff17 	ldw	r2,-4(fp)
 4001180:	10c000c4 	addi	r3,r2,3
 4001184:	008000c4 	movi	r2,3
 4001188:	18800005 	stb	r2,0(r3)
        mac_addr[4] = 0x4;
 400118c:	e0bfff17 	ldw	r2,-4(fp)
 4001190:	10c00104 	addi	r3,r2,4
 4001194:	00800104 	movi	r2,4
 4001198:	18800005 	stb	r2,0(r3)
        mac_addr[5] = 0x5;
 400119c:	e0bfff17 	ldw	r2,-4(fp)
 40011a0:	10c00144 	addi	r3,r2,5
 40011a4:	00800144 	movi	r2,5
 40011a8:	18800005 	stb	r2,0(r3)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
 40011ac:	e0bfff17 	ldw	r2,-4(fp)
 40011b0:	10800003 	ldbu	r2,0(r2)
 40011b4:	11403fcc 	andi	r5,r2,255
 40011b8:	e0bfff17 	ldw	r2,-4(fp)
 40011bc:	10800044 	addi	r2,r2,1
 40011c0:	10800003 	ldbu	r2,0(r2)
 40011c4:	11803fcc 	andi	r6,r2,255
 40011c8:	e0bfff17 	ldw	r2,-4(fp)
 40011cc:	10800084 	addi	r2,r2,2
 40011d0:	10800003 	ldbu	r2,0(r2)
 40011d4:	11c03fcc 	andi	r7,r2,255
 40011d8:	e0bfff17 	ldw	r2,-4(fp)
 40011dc:	108000c4 	addi	r2,r2,3
 40011e0:	10800003 	ldbu	r2,0(r2)
 40011e4:	10c03fcc 	andi	r3,r2,255
 40011e8:	e0bfff17 	ldw	r2,-4(fp)
 40011ec:	10800104 	addi	r2,r2,4
 40011f0:	10800003 	ldbu	r2,0(r2)
 40011f4:	11003fcc 	andi	r4,r2,255
 40011f8:	e0bfff17 	ldw	r2,-4(fp)
 40011fc:	10800144 	addi	r2,r2,5
 4001200:	10800003 	ldbu	r2,0(r2)
 4001204:	10803fcc 	andi	r2,r2,255
 4001208:	d8c00015 	stw	r3,0(sp)
 400120c:	d9000115 	stw	r4,4(sp)
 4001210:	d8800215 	stw	r2,8(sp)
 4001214:	01010134 	movhi	r4,1028
 4001218:	211df404 	addi	r4,r4,30672
 400121c:	400207c0 	call	400207c <printf>
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
        
        error = 0;
 4001220:	e03ffe15 	stw	zero,-8(fp)
    }
  
    return error;    
 4001224:	e0bffe17 	ldw	r2,-8(fp)
}
 4001228:	e037883a 	mov	sp,fp
 400122c:	dfc00117 	ldw	ra,4(sp)
 4001230:	df000017 	ldw	fp,0(sp)
 4001234:	dec00204 	addi	sp,sp,8
 4001238:	f800283a 	ret

0400123c <SSSCreateOSDataStructs>:
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "SSS" are declared in this file, and created in this function.
 */
void SSSCreateOSDataStructs(void)
{
 400123c:	defffd04 	addi	sp,sp,-12
 4001240:	dfc00215 	stw	ra,8(sp)
 4001244:	df000115 	stw	fp,4(sp)
 4001248:	df000104 	addi	fp,sp,4
  /*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  SSSLEDCommandQ = OSQCreate(&SSSLEDCommandQTbl[0], SSS_LED_COMMAND_Q_SIZE);
 400124c:	01010174 	movhi	r4,1029
 4001250:	210c0404 	addi	r4,r4,12304
 4001254:	01400784 	movi	r5,30
 4001258:	401109c0 	call	401109c <OSQCreate>
 400125c:	d0a7d815 	stw	r2,-24736(gp)
  if (!SSSLEDCommandQ)
 4001260:	d0a7d817 	ldw	r2,-24736(gp)
 4001264:	1004c03a 	cmpne	r2,r2,zero
 4001268:	1000041e 	bne	r2,zero,400127c <SSSCreateOSDataStructs+0x40>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
 400126c:	01003fc4 	movi	r4,255
 4001270:	01410134 	movhi	r5,1028
 4001274:	295e0304 	addi	r5,r5,30732
 4001278:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
  * toggle the lightshow off, and gives up the semaphore to turn the lightshow
  * back on.  The LEDTask does this in response to the CMD_LEDS_LIGHTSHOW
  * command sent from the SSSSimpleSocketServerTask when the user sends the 
  * toggle lightshow command over the TCPIP socket.
  */
  SSSLEDLightshowSem = OSSemCreate(1);
 400127c:	01000044 	movi	r4,1
 4001280:	401233c0 	call	401233c <OSSemCreate>
 4001284:	d0a7d915 	stw	r2,-24732(gp)
  if (!SSSLEDLightshowSem)
 4001288:	d0a7d917 	ldw	r2,-24732(gp)
 400128c:	1004c03a 	cmpne	r2,r2,zero
 4001290:	1000041e 	bne	r2,zero,40012a4 <SSSCreateOSDataStructs+0x68>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
 4001294:	01003fc4 	movi	r4,255
 4001298:	01410134 	movhi	r5,1028
 400129c:	295e0c04 	addi	r5,r5,30768
 40012a0:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
  
 /*
  * Create our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
  * the LEDs on the Nios Development board, D0 - D7. 
  */   
  SSSLEDEventFlag = OSFlagCreate(0, &error_code);
 40012a4:	0009883a 	mov	r4,zero
 40012a8:	e17fff04 	addi	r5,fp,-4
 40012ac:	400f1380 	call	400f138 <OSFlagCreate>
 40012b0:	d0a7da15 	stw	r2,-24728(gp)
  if (!SSSLEDEventFlag)
 40012b4:	d0a7da17 	ldw	r2,-24728(gp)
 40012b8:	1004c03a 	cmpne	r2,r2,zero
 40012bc:	1000041e 	bne	r2,zero,40012d0 <SSSCreateOSDataStructs+0x94>
  {
     alt_uCOSIIErrorHandler(error_code, 0);
 40012c0:	e0bfff03 	ldbu	r2,-4(fp)
 40012c4:	11003fcc 	andi	r4,r2,255
 40012c8:	000b883a 	mov	r5,zero
 40012cc:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>
  }
}
 40012d0:	e037883a 	mov	sp,fp
 40012d4:	dfc00117 	ldw	ra,4(sp)
 40012d8:	df000017 	ldw	fp,0(sp)
 40012dc:	dec00204 	addi	sp,sp,8
 40012e0:	f800283a 	ret

040012e4 <SSSCreateTasks>:
/* This function creates tasks used in this example which do not use sockets.
 * Tasks which use Interniche sockets must be created with TK_NEWTASK.
 */
 
void SSSCreateTasks(void)
{
 40012e4:	defff804 	addi	sp,sp,-32
 40012e8:	dfc00715 	stw	ra,28(sp)
 40012ec:	df000615 	stw	fp,24(sp)
 40012f0:	df000604 	addi	fp,sp,24
   INT8U error_code;
  
   error_code = OSTaskCreateExt(LEDManagementTask,
 40012f4:	01810174 	movhi	r6,1029
 40012f8:	31942104 	addi	r6,r6,20612
 40012fc:	008001c4 	movi	r2,7
 4001300:	d8800015 	stw	r2,0(sp)
 4001304:	00810174 	movhi	r2,1029
 4001308:	108c2204 	addi	r2,r2,12424
 400130c:	d8800115 	stw	r2,4(sp)
 4001310:	00820004 	movi	r2,2048
 4001314:	d8800215 	stw	r2,8(sp)
 4001318:	d8000315 	stw	zero,12(sp)
 400131c:	d8000415 	stw	zero,16(sp)
 4001320:	01010034 	movhi	r4,1024
 4001324:	2103e504 	addi	r4,r4,3988
 4001328:	000b883a 	mov	r5,zero
 400132c:	01c001c4 	movi	r7,7
 4001330:	401358c0 	call	401358c <OSTaskCreateExt>
 4001334:	e0bfff05 	stb	r2,-4(fp)
                              LEDManagementTaskStk,
                              TASK_STACKSIZE,
                              NULL,
                              0);

   alt_uCOSIIErrorHandler(error_code, 0);
 4001338:	e13fff03 	ldbu	r4,-4(fp)
 400133c:	000b883a 	mov	r5,zero
 4001340:	40002080 	call	4000208 <alt_uCOSIIErrorHandler>

}
 4001344:	e037883a 	mov	sp,fp
 4001348:	dfc00117 	ldw	ra,4(sp)
 400134c:	df000017 	ldw	fp,0(sp)
 4001350:	dec00204 	addi	sp,sp,8
 4001354:	f800283a 	ret

04001358 <sss_reset_connection>:
 * to a reliable initial state. Note that we set our socket (FD) number to
 * -1 to easily determine whether the connection is in a "reset, ready to go" 
 * state.
 */
void sss_reset_connection(SSSConn* conn)
{
 4001358:	defffd04 	addi	sp,sp,-12
 400135c:	dfc00215 	stw	ra,8(sp)
 4001360:	df000115 	stw	fp,4(sp)
 4001364:	df000104 	addi	fp,sp,4
 4001368:	e13fff15 	stw	r4,-4(fp)
  memset(conn, 0, sizeof(SSSConn));
 400136c:	e0bfff17 	ldw	r2,-4(fp)
 4001370:	1009883a 	mov	r4,r2
 4001374:	01817c04 	movi	r6,1520
 4001378:	000b883a 	mov	r5,zero
 400137c:	4001f640 	call	4001f64 <memset>

  conn->fd = -1;
 4001380:	e0ffff17 	ldw	r3,-4(fp)
 4001384:	00bfffc4 	movi	r2,-1
 4001388:	18800115 	stw	r2,4(r3)
  conn->state = READY;
 400138c:	e0bfff17 	ldw	r2,-4(fp)
 4001390:	10000015 	stw	zero,0(r2)
  conn->rx_wr_pos = conn->rx_buffer;
 4001394:	e0bfff17 	ldw	r2,-4(fp)
 4001398:	10c00304 	addi	r3,r2,12
 400139c:	e0bfff17 	ldw	r2,-4(fp)
 40013a0:	10c17b15 	stw	r3,1516(r2)
  conn->rx_rd_pos = conn->rx_buffer;
 40013a4:	e0bfff17 	ldw	r2,-4(fp)
 40013a8:	10c00304 	addi	r3,r2,12
 40013ac:	e0bfff17 	ldw	r2,-4(fp)
 40013b0:	10c17a15 	stw	r3,1512(r2)
  return;
}
 40013b4:	e037883a 	mov	sp,fp
 40013b8:	dfc00117 	ldw	ra,4(sp)
 40013bc:	df000017 	ldw	fp,0(sp)
 40013c0:	dec00204 	addi	sp,sp,8
 40013c4:	f800283a 	ret

040013c8 <sss_send_menu>:
 * sss_send_menu()
 * 
 * This routine will transmit the menu out to the telent client.
 */
void sss_send_menu(SSSConn* conn)
{
 40013c8:	defe8504 	addi	sp,sp,-1516
 40013cc:	dfc17a15 	stw	ra,1512(sp)
 40013d0:	df017915 	stw	fp,1508(sp)
 40013d4:	df017904 	addi	fp,sp,1508
 40013d8:	e13fff15 	stw	r4,-4(fp)
  alt_u8  tx_buf[SSS_TX_BUF_SIZE];
  alt_u8 *tx_wr_pos = tx_buf;
 40013dc:	e0be8804 	addi	r2,fp,-1504
 40013e0:	e0be8715 	stw	r2,-1508(fp)

  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
 40013e4:	e0be8717 	ldw	r2,-1508(fp)
 40013e8:	00c10134 	movhi	r3,1028
 40013ec:	18de1604 	addi	r3,r3,30808
 40013f0:	1009883a 	mov	r4,r2
 40013f4:	180b883a 	mov	r5,r3
 40013f8:	01800904 	movi	r6,36
 40013fc:	4001de40 	call	4001de4 <memcpy>
 4001400:	e0be8717 	ldw	r2,-1508(fp)
 4001404:	108008c4 	addi	r2,r2,35
 4001408:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Nios II Simple Socket Server Menu\n\r");
 400140c:	e0be8717 	ldw	r2,-1508(fp)
 4001410:	00c10134 	movhi	r3,1028
 4001414:	18de1f04 	addi	r3,r3,30844
 4001418:	1009883a 	mov	r4,r2
 400141c:	180b883a 	mov	r5,r3
 4001420:	01800904 	movi	r6,36
 4001424:	4001de40 	call	4001de4 <memcpy>
 4001428:	e0be8717 	ldw	r2,-1508(fp)
 400142c:	108008c4 	addi	r2,r2,35
 4001430:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
 4001434:	e0be8717 	ldw	r2,-1508(fp)
 4001438:	00c10134 	movhi	r3,1028
 400143c:	18de1604 	addi	r3,r3,30808
 4001440:	1009883a 	mov	r4,r2
 4001444:	180b883a 	mov	r5,r3
 4001448:	01800904 	movi	r6,36
 400144c:	4001de40 	call	4001de4 <memcpy>
 4001450:	e0be8717 	ldw	r2,-1508(fp)
 4001454:	108008c4 	addi	r2,r2,35
 4001458:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"0-7: Toggle board LEDs D0 - D7\n\r");
 400145c:	e0be8717 	ldw	r2,-1508(fp)
 4001460:	00c10134 	movhi	r3,1028
 4001464:	18de2804 	addi	r3,r3,30880
 4001468:	1009883a 	mov	r4,r2
 400146c:	180b883a 	mov	r5,r3
 4001470:	01800844 	movi	r6,33
 4001474:	4001de40 	call	4001de4 <memcpy>
 4001478:	e0be8717 	ldw	r2,-1508(fp)
 400147c:	10800804 	addi	r2,r2,32
 4001480:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Q: Terminate session\n\r");
 4001484:	e0be8717 	ldw	r2,-1508(fp)
 4001488:	00c10134 	movhi	r3,1028
 400148c:	18de3104 	addi	r3,r3,30916
 4001490:	1009883a 	mov	r4,r2
 4001494:	180b883a 	mov	r5,r3
 4001498:	018005c4 	movi	r6,23
 400149c:	4001de40 	call	4001de4 <memcpy>
 40014a0:	e0be8717 	ldw	r2,-1508(fp)
 40014a4:	10800584 	addi	r2,r2,22
 40014a8:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
 40014ac:	e0be8717 	ldw	r2,-1508(fp)
 40014b0:	00c10134 	movhi	r3,1028
 40014b4:	18de1604 	addi	r3,r3,30808
 40014b8:	1009883a 	mov	r4,r2
 40014bc:	180b883a 	mov	r5,r3
 40014c0:	01800904 	movi	r6,36
 40014c4:	4001de40 	call	4001de4 <memcpy>
 40014c8:	e0be8717 	ldw	r2,-1508(fp)
 40014cc:	108008c4 	addi	r2,r2,35
 40014d0:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Enter your choice & press return:\n\r");
 40014d4:	e0be8717 	ldw	r2,-1508(fp)
 40014d8:	00c10134 	movhi	r3,1028
 40014dc:	18de3704 	addi	r3,r3,30940
 40014e0:	1009883a 	mov	r4,r2
 40014e4:	180b883a 	mov	r5,r3
 40014e8:	01800904 	movi	r6,36
 40014ec:	4001de40 	call	4001de4 <memcpy>
 40014f0:	e0be8717 	ldw	r2,-1508(fp)
 40014f4:	108008c4 	addi	r2,r2,35
 40014f8:	e0be8715 	stw	r2,-1508(fp)

  send(conn->fd, tx_buf, tx_wr_pos - tx_buf, 0);
 40014fc:	e0bfff17 	ldw	r2,-4(fp)
 4001500:	11000117 	ldw	r4,4(r2)
 4001504:	e17e8804 	addi	r5,fp,-1504
 4001508:	e0fe8717 	ldw	r3,-1508(fp)
 400150c:	e0be8804 	addi	r2,fp,-1504
 4001510:	188dc83a 	sub	r6,r3,r2
 4001514:	000f883a 	mov	r7,zero
 4001518:	4029ed80 	call	4029ed8 <t_send>
  
  return;
}
 400151c:	e037883a 	mov	sp,fp
 4001520:	dfc00117 	ldw	ra,4(sp)
 4001524:	df000017 	ldw	fp,0(sp)
 4001528:	dec00204 	addi	sp,sp,8
 400152c:	f800283a 	ret

04001530 <sss_handle_accept>:
 * reject the incoming request by immediately closing the new socket.
 * 
 * We'll also print out the client's IP address.
 */
void sss_handle_accept(int listen_socket, SSSConn* conn)
{
 4001530:	defff604 	addi	sp,sp,-40
 4001534:	dfc00915 	stw	ra,36(sp)
 4001538:	df000815 	stw	fp,32(sp)
 400153c:	df000804 	addi	fp,sp,32
 4001540:	e13ffe15 	stw	r4,-8(fp)
 4001544:	e17fff15 	stw	r5,-4(fp)
  int                 socket, len;
  struct sockaddr_in  incoming_addr;

  len = sizeof(incoming_addr);
 4001548:	00800404 	movi	r2,16
 400154c:	e0bff915 	stw	r2,-28(fp)

  if ((conn)->fd == -1)
 4001550:	e0bfff17 	ldw	r2,-4(fp)
 4001554:	10800117 	ldw	r2,4(r2)
 4001558:	10bfffd8 	cmpnei	r2,r2,-1
 400155c:	1000191e 	bne	r2,zero,40015c4 <sss_handle_accept+0x94>
  {
     if((socket=accept(listen_socket,(struct sockaddr*)&incoming_addr,&len))<0)
 4001560:	e17ffa04 	addi	r5,fp,-24
 4001564:	e1bff904 	addi	r6,fp,-28
 4001568:	e13ffe17 	ldw	r4,-8(fp)
 400156c:	401fe100 	call	401fe10 <bsd_accept>
 4001570:	e0bff815 	stw	r2,-32(fp)
 4001574:	e0bff817 	ldw	r2,-32(fp)
 4001578:	1004403a 	cmpge	r2,r2,zero
 400157c:	1000051e 	bne	r2,zero,4001594 <sss_handle_accept+0x64>
     {
         alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,
 4001580:	01003fc4 	movi	r4,255
 4001584:	01410134 	movhi	r5,1028
 4001588:	295e4004 	addi	r5,r5,30976
 400158c:	400082c0 	call	400082c <alt_NetworkErrorHandler>
 4001590:	00001206 	br	40015dc <sss_handle_accept+0xac>
                                 "[sss_handle_accept] accept failed");
     }
     else
     {
        (conn)->fd = socket;
 4001594:	e0bfff17 	ldw	r2,-4(fp)
 4001598:	e0fff817 	ldw	r3,-32(fp)
 400159c:	10c00115 	stw	r3,4(r2)
        sss_send_menu(conn);
 40015a0:	e13fff17 	ldw	r4,-4(fp)
 40015a4:	40013c80 	call	40013c8 <sss_send_menu>
        printf("[sss_handle_accept] accepted connection request from %s\n",
 40015a8:	e13ffb17 	ldw	r4,-20(fp)
 40015ac:	402057c0 	call	402057c <bsd_inet_ntoa>
 40015b0:	100b883a 	mov	r5,r2
 40015b4:	01010134 	movhi	r4,1028
 40015b8:	211e4904 	addi	r4,r4,31012
 40015bc:	400207c0 	call	400207c <printf>
 40015c0:	00000606 	br	40015dc <sss_handle_accept+0xac>
               inet_ntoa(incoming_addr.sin_addr));
     }
  }
  else
  {
    printf("[sss_handle_accept] rejected connection request from %s\n",
 40015c4:	e13ffb17 	ldw	r4,-20(fp)
 40015c8:	402057c0 	call	402057c <bsd_inet_ntoa>
 40015cc:	100b883a 	mov	r5,r2
 40015d0:	01010134 	movhi	r4,1028
 40015d4:	211e5804 	addi	r4,r4,31072
 40015d8:	400207c0 	call	400207c <printf>
           inet_ntoa(incoming_addr.sin_addr));
  }

  return;
}
 40015dc:	e037883a 	mov	sp,fp
 40015e0:	dfc00117 	ldw	ra,4(sp)
 40015e4:	df000017 	ldw	fp,0(sp)
 40015e8:	dec00204 	addi	sp,sp,8
 40015ec:	f800283a 	ret

040015f0 <sss_exec_command>:
 * If the user wishes to quit, we set the "close" member of our SSSConn
 * struct, which will be looked at back in sss_handle_receive() when it 
 * comes time to see whether to close the connection or not.
 */
void sss_exec_command(SSSConn* conn)
{
 40015f0:	defe8104 	addi	sp,sp,-1532
 40015f4:	dfc17e15 	stw	ra,1528(sp)
 40015f8:	df017d15 	stw	fp,1524(sp)
 40015fc:	df017d04 	addi	fp,sp,1524
 4001600:	e13ffe15 	stw	r4,-8(fp)
   int bytes_to_process = conn->rx_wr_pos - conn->rx_rd_pos;
 4001604:	e0bffe17 	ldw	r2,-8(fp)
 4001608:	10817b17 	ldw	r2,1516(r2)
 400160c:	1007883a 	mov	r3,r2
 4001610:	e0bffe17 	ldw	r2,-8(fp)
 4001614:	10817a17 	ldw	r2,1512(r2)
 4001618:	1885c83a 	sub	r2,r3,r2
 400161c:	e0be8615 	stw	r2,-1512(fp)
   INT8U tx_buf[SSS_TX_BUF_SIZE];
   INT8U *tx_wr_pos = tx_buf;
 4001620:	e0be8704 	addi	r2,fp,-1508
 4001624:	e0be8515 	stw	r2,-1516(fp)
    * SSSSimpleSocketServerTask, since the LEDManagementTask does not 
    * have access to the stack of the SSSSimpleSocketServerTask.
    */
   static INT32U SSSCommand;
   
   SSSCommand = CMD_LEDS_BIT_0_TOGGLE;
 4001628:	00800c04 	movi	r2,48
 400162c:	d0a7d715 	stw	r2,-24740(gp)

   while(bytes_to_process--)
 4001630:	00004506 	br	4001748 <sss_exec_command+0x158>
   {
      SSSCommand = toupper(*(conn->rx_rd_pos++));
 4001634:	e0bffe17 	ldw	r2,-8(fp)
 4001638:	10c17a17 	ldw	r3,1512(r2)
 400163c:	18800003 	ldbu	r2,0(r3)
 4001640:	10803fcc 	andi	r2,r2,255
 4001644:	e0be8315 	stw	r2,-1524(fp)
 4001648:	18c00044 	addi	r3,r3,1
 400164c:	e0bffe17 	ldw	r2,-8(fp)
 4001650:	10c17a15 	stw	r3,1512(r2)
 4001654:	00810174 	movhi	r2,1029
 4001658:	10b9be04 	addi	r2,r2,-6408
 400165c:	10c00017 	ldw	r3,0(r2)
 4001660:	e0be8317 	ldw	r2,-1524(fp)
 4001664:	1885883a 	add	r2,r3,r2
 4001668:	10800003 	ldbu	r2,0(r2)
 400166c:	10803fcc 	andi	r2,r2,255
 4001670:	1080008c 	andi	r2,r2,2
 4001674:	1005003a 	cmpeq	r2,r2,zero
 4001678:	1000041e 	bne	r2,zero,400168c <sss_exec_command+0x9c>
 400167c:	e0be8317 	ldw	r2,-1524(fp)
 4001680:	10bff804 	addi	r2,r2,-32
 4001684:	e0bfff15 	stw	r2,-4(fp)
 4001688:	00000206 	br	4001694 <sss_exec_command+0xa4>
 400168c:	e0be8317 	ldw	r2,-1524(fp)
 4001690:	e0bfff15 	stw	r2,-4(fp)
 4001694:	e0bfff17 	ldw	r2,-4(fp)
 4001698:	d0a7d715 	stw	r2,-24740(gp)
    
      if(SSSCommand >= ' ' && SSSCommand <= '~')
 400169c:	d0a7d717 	ldw	r2,-24740(gp)
 40016a0:	10800830 	cmpltui	r2,r2,32
 40016a4:	1000281e 	bne	r2,zero,4001748 <sss_exec_command+0x158>
 40016a8:	d0a7d717 	ldw	r2,-24740(gp)
 40016ac:	10801fe8 	cmpgeui	r2,r2,127
 40016b0:	1000251e 	bne	r2,zero,4001748 <sss_exec_command+0x158>
      {
         tx_wr_pos += sprintf(tx_wr_pos,
 40016b4:	e13e8517 	ldw	r4,-1516(fp)
 40016b8:	d0a7d717 	ldw	r2,-24740(gp)
 40016bc:	11803fcc 	andi	r6,r2,255
 40016c0:	3180201c 	xori	r6,r6,128
 40016c4:	31bfe004 	addi	r6,r6,-128
 40016c8:	01410134 	movhi	r5,1028
 40016cc:	295e6704 	addi	r5,r5,31132
 40016d0:	40021a80 	call	40021a8 <sprintf>
 40016d4:	1007883a 	mov	r3,r2
 40016d8:	e0be8517 	ldw	r2,-1516(fp)
 40016dc:	10c5883a 	add	r2,r2,r3
 40016e0:	e0be8515 	stw	r2,-1516(fp)
                              "--> Simple Socket Server Command %c.\n",
                              (char)SSSCommand);
         if (SSSCommand == CMD_QUIT)
 40016e4:	d0a7d717 	ldw	r2,-24740(gp)
 40016e8:	10801458 	cmpnei	r2,r2,81
 40016ec:	10000e1e 	bne	r2,zero,4001728 <sss_exec_command+0x138>
         {
            tx_wr_pos += sprintf(tx_wr_pos,"Terminating connection.\n\n\r");
 40016f0:	e0be8517 	ldw	r2,-1516(fp)
 40016f4:	00c10134 	movhi	r3,1028
 40016f8:	18de7104 	addi	r3,r3,31172
 40016fc:	1009883a 	mov	r4,r2
 4001700:	180b883a 	mov	r5,r3
 4001704:	018006c4 	movi	r6,27
 4001708:	4001de40 	call	4001de4 <memcpy>
 400170c:	e0be8517 	ldw	r2,-1516(fp)
 4001710:	10800684 	addi	r2,r2,26
 4001714:	e0be8515 	stw	r2,-1516(fp)
            conn->close = 1;
 4001718:	e0fffe17 	ldw	r3,-8(fp)
 400171c:	00800044 	movi	r2,1
 4001720:	18800215 	stw	r2,8(r3)
 4001724:	00000806 	br	4001748 <sss_exec_command+0x158>
         }
         else
         {
            error_code = OSQPost(SSSLEDCommandQ, (void *)SSSCommand);    
 4001728:	d127d817 	ldw	r4,-24736(gp)
 400172c:	d0a7d717 	ldw	r2,-24740(gp)
 4001730:	100b883a 	mov	r5,r2
 4001734:	4011b140 	call	4011b14 <OSQPost>
 4001738:	e0be8405 	stb	r2,-1520(fp)

            alt_SSSErrorHandler(error_code, 0);
 400173c:	e13e8403 	ldbu	r4,-1520(fp)
 4001740:	000b883a 	mov	r5,zero
 4001744:	4000ac40 	call	4000ac4 <alt_SSSErrorHandler>
    */
   static INT32U SSSCommand;
   
   SSSCommand = CMD_LEDS_BIT_0_TOGGLE;

   while(bytes_to_process--)
 4001748:	e0be8617 	ldw	r2,-1512(fp)
 400174c:	10bfffc4 	addi	r2,r2,-1
 4001750:	e0be8615 	stw	r2,-1512(fp)
 4001754:	e0be8617 	ldw	r2,-1512(fp)
 4001758:	10bfffd8 	cmpnei	r2,r2,-1
 400175c:	103fb51e 	bne	r2,zero,4001634 <sss_exec_command+0x44>
            alt_SSSErrorHandler(error_code, 0);
         }
      }
   }             

  send(conn->fd, tx_buf, tx_wr_pos - tx_buf, 0);  
 4001760:	e0bffe17 	ldw	r2,-8(fp)
 4001764:	11000117 	ldw	r4,4(r2)
 4001768:	e17e8704 	addi	r5,fp,-1508
 400176c:	e0fe8517 	ldw	r3,-1516(fp)
 4001770:	e0be8704 	addi	r2,fp,-1508
 4001774:	188dc83a 	sub	r6,r3,r2
 4001778:	000f883a 	mov	r7,zero
 400177c:	4029ed80 	call	4029ed8 <t_send>
  
  return;
}
 4001780:	e037883a 	mov	sp,fp
 4001784:	dfc00117 	ldw	ra,4(sp)
 4001788:	df000017 	ldw	fp,0(sp)
 400178c:	dec00204 	addi	sp,sp,8
 4001790:	f800283a 	ret

04001794 <sss_handle_receive>:
 * sss_exec_command() routine. Aside from these, we must move incoming
 * (un-processed) data to buffer start as appropriate and keep track of 
 * associated pointers.
 */
void sss_handle_receive(SSSConn* conn)
{
 4001794:	defff904 	addi	sp,sp,-28
 4001798:	dfc00615 	stw	ra,24(sp)
 400179c:	df000515 	stw	fp,20(sp)
 40017a0:	df000504 	addi	fp,sp,20
 40017a4:	e13ffe15 	stw	r4,-8(fp)
  int data_used = 0, rx_code = 0;
 40017a8:	e03ffd15 	stw	zero,-12(fp)
 40017ac:	e03ffc15 	stw	zero,-16(fp)
  INT8U *lf_addr; 
  
  conn->rx_rd_pos = conn->rx_buffer;
 40017b0:	e0bffe17 	ldw	r2,-8(fp)
 40017b4:	10c00304 	addi	r3,r2,12
 40017b8:	e0bffe17 	ldw	r2,-8(fp)
 40017bc:	10c17a15 	stw	r3,1512(r2)
  conn->rx_wr_pos = conn->rx_buffer;
 40017c0:	e0bffe17 	ldw	r2,-8(fp)
 40017c4:	10c00304 	addi	r3,r2,12
 40017c8:	e0bffe17 	ldw	r2,-8(fp)
 40017cc:	10c17b15 	stw	r3,1516(r2)
  
  printf("[sss_handle_receive] processing RX data\n");
 40017d0:	01010134 	movhi	r4,1028
 40017d4:	211e7804 	addi	r4,r4,31200
 40017d8:	40021940 	call	4002194 <puts>
  
  while(conn->state != CLOSE)
 40017dc:	00005706 	br	400193c <sss_handle_receive+0x1a8>
  {
    /* Find the Carriage return which marks the end of the header */
    lf_addr = strchr(conn->rx_buffer, '\n');
 40017e0:	e0bffe17 	ldw	r2,-8(fp)
 40017e4:	10800304 	addi	r2,r2,12
 40017e8:	1009883a 	mov	r4,r2
 40017ec:	01400284 	movi	r5,10
 40017f0:	400227c0 	call	400227c <strchr>
 40017f4:	e0bffb15 	stw	r2,-20(fp)
      
    if(lf_addr)
 40017f8:	e0bffb17 	ldw	r2,-20(fp)
 40017fc:	1005003a 	cmpeq	r2,r2,zero
 4001800:	1000031e 	bne	r2,zero,4001810 <sss_handle_receive+0x7c>
    {
      /* go off and do whatever the user wanted us to do */
      sss_exec_command(conn);
 4001804:	e13ffe17 	ldw	r4,-8(fp)
 4001808:	40015f00 	call	40015f0 <sss_exec_command>
 400180c:	00001c06 	br	4001880 <sss_handle_receive+0xec>
    }
    /* No newline received? Then ask the socket for data */
    else
    {
      rx_code = recv(conn->fd, conn->rx_wr_pos, 
 4001810:	e0bffe17 	ldw	r2,-8(fp)
 4001814:	11000117 	ldw	r4,4(r2)
 4001818:	e0bffe17 	ldw	r2,-8(fp)
 400181c:	10817b17 	ldw	r2,1516(r2)
 4001820:	100b883a 	mov	r5,r2
 4001824:	e0bffe17 	ldw	r2,-8(fp)
 4001828:	10800304 	addi	r2,r2,12
 400182c:	1007883a 	mov	r3,r2
 4001830:	e0bffe17 	ldw	r2,-8(fp)
 4001834:	10817b17 	ldw	r2,1516(r2)
 4001838:	1885c83a 	sub	r2,r3,r2
 400183c:	118176c4 	addi	r6,r2,1499
 4001840:	000f883a 	mov	r7,zero
 4001844:	4029a6c0 	call	4029a6c <t_recv>
 4001848:	e0bffc15 	stw	r2,-16(fp)
        SSS_RX_BUF_SIZE - (conn->rx_wr_pos - conn->rx_buffer) -1, 0);
          
     if(rx_code > 0)
 400184c:	e0bffc17 	ldw	r2,-16(fp)
 4001850:	10800050 	cmplti	r2,r2,1
 4001854:	10000a1e 	bne	r2,zero,4001880 <sss_handle_receive+0xec>
      {
        conn->rx_wr_pos += rx_code;
 4001858:	e0bffe17 	ldw	r2,-8(fp)
 400185c:	10c17b17 	ldw	r3,1516(r2)
 4001860:	e0bffc17 	ldw	r2,-16(fp)
 4001864:	1887883a 	add	r3,r3,r2
 4001868:	e0bffe17 	ldw	r2,-8(fp)
 400186c:	10c17b15 	stw	r3,1516(r2)
        
        /* Zero terminate so we can use string functions */
        *(conn->rx_wr_pos+1) = 0;
 4001870:	e0bffe17 	ldw	r2,-8(fp)
 4001874:	10817b17 	ldw	r2,1516(r2)
 4001878:	10800044 	addi	r2,r2,1
 400187c:	10000005 	stb	zero,0(r2)

    /* 
     * When the quit command is received, update our connection state so that
     * we can exit the while() loop and close the connection
     */
    conn->state = conn->close ? CLOSE : READY;
 4001880:	e0bffe17 	ldw	r2,-8(fp)
 4001884:	10800217 	ldw	r2,8(r2)
 4001888:	1005003a 	cmpeq	r2,r2,zero
 400188c:	1000031e 	bne	r2,zero,400189c <sss_handle_receive+0x108>
 4001890:	00800084 	movi	r2,2
 4001894:	e0bfff15 	stw	r2,-4(fp)
 4001898:	00000106 	br	40018a0 <sss_handle_receive+0x10c>
 400189c:	e03fff15 	stw	zero,-4(fp)
 40018a0:	e0bffe17 	ldw	r2,-8(fp)
 40018a4:	e0ffff17 	ldw	r3,-4(fp)
 40018a8:	10c00015 	stw	r3,0(r2)

    /* Manage buffer */
    data_used = conn->rx_rd_pos - conn->rx_buffer;
 40018ac:	e0bffe17 	ldw	r2,-8(fp)
 40018b0:	10817a17 	ldw	r2,1512(r2)
 40018b4:	1007883a 	mov	r3,r2
 40018b8:	e0bffe17 	ldw	r2,-8(fp)
 40018bc:	10800304 	addi	r2,r2,12
 40018c0:	1885c83a 	sub	r2,r3,r2
 40018c4:	e0bffd15 	stw	r2,-12(fp)
    memmove(conn->rx_buffer, conn->rx_rd_pos, 
 40018c8:	e0bffe17 	ldw	r2,-8(fp)
 40018cc:	11000304 	addi	r4,r2,12
 40018d0:	e0bffe17 	ldw	r2,-8(fp)
 40018d4:	11417a17 	ldw	r5,1512(r2)
 40018d8:	e0bffe17 	ldw	r2,-8(fp)
 40018dc:	10817b17 	ldw	r2,1516(r2)
 40018e0:	1007883a 	mov	r3,r2
 40018e4:	e0bffe17 	ldw	r2,-8(fp)
 40018e8:	10817a17 	ldw	r2,1512(r2)
 40018ec:	1885c83a 	sub	r2,r3,r2
 40018f0:	100d883a 	mov	r6,r2
 40018f4:	4001e840 	call	4001e84 <memmove>
       conn->rx_wr_pos - conn->rx_rd_pos);
    conn->rx_rd_pos = conn->rx_buffer;
 40018f8:	e0bffe17 	ldw	r2,-8(fp)
 40018fc:	10c00304 	addi	r3,r2,12
 4001900:	e0bffe17 	ldw	r2,-8(fp)
 4001904:	10c17a15 	stw	r3,1512(r2)
    conn->rx_wr_pos -= data_used;
 4001908:	e0bffe17 	ldw	r2,-8(fp)
 400190c:	10c17b17 	ldw	r3,1516(r2)
 4001910:	e0bffd17 	ldw	r2,-12(fp)
 4001914:	1887c83a 	sub	r3,r3,r2
 4001918:	e0bffe17 	ldw	r2,-8(fp)
 400191c:	10c17b15 	stw	r3,1516(r2)
    memset(conn->rx_wr_pos, 0, data_used);
 4001920:	e0bffe17 	ldw	r2,-8(fp)
 4001924:	10817b17 	ldw	r2,1516(r2)
 4001928:	e0fffd17 	ldw	r3,-12(fp)
 400192c:	1009883a 	mov	r4,r2
 4001930:	180d883a 	mov	r6,r3
 4001934:	000b883a 	mov	r5,zero
 4001938:	4001f640 	call	4001f64 <memset>
  conn->rx_rd_pos = conn->rx_buffer;
  conn->rx_wr_pos = conn->rx_buffer;
  
  printf("[sss_handle_receive] processing RX data\n");
  
  while(conn->state != CLOSE)
 400193c:	e0bffe17 	ldw	r2,-8(fp)
 4001940:	10800017 	ldw	r2,0(r2)
 4001944:	10800098 	cmpnei	r2,r2,2
 4001948:	103fa51e 	bne	r2,zero,40017e0 <sss_handle_receive+0x4c>
    conn->rx_rd_pos = conn->rx_buffer;
    conn->rx_wr_pos -= data_used;
    memset(conn->rx_wr_pos, 0, data_used);
  }

  printf("[sss_handle_receive] closing connection\n");
 400194c:	01010134 	movhi	r4,1028
 4001950:	211e8204 	addi	r4,r4,31240
 4001954:	40021940 	call	4002194 <puts>
  close(conn->fd);
 4001958:	e0bffe17 	ldw	r2,-8(fp)
 400195c:	11000117 	ldw	r4,4(r2)
 4001960:	401d7e80 	call	401d7e8 <close>
  sss_reset_connection(conn);
 4001964:	e13ffe17 	ldw	r4,-8(fp)
 4001968:	40013580 	call	4001358 <sss_reset_connection>
  
  return;
}
 400196c:	e037883a 	mov	sp,fp
 4001970:	dfc00117 	ldw	ra,4(sp)
 4001974:	df000017 	ldw	fp,0(sp)
 4001978:	dec00204 	addi	sp,sp,8
 400197c:	f800283a 	ret

04001980 <SSSSimpleSocketServerTask>:
 * (if a connection is active), the sss data socket. When data arrives, 
 * the approrpriate routine is called to either accept/reject a connection 
 * request, or process incoming data.
 */
void SSSSimpleSocketServerTask()
{
 4001980:	deffb604 	addi	sp,sp,-296
 4001984:	dfc04915 	stw	ra,292(sp)
 4001988:	df004815 	stw	fp,288(sp)
 400198c:	df004804 	addi	fp,sp,288
   * protocol and address families respectively. However, there is usually only
   * 1 address per protocol family. Thus PF_INET and AF_INET can be interchanged.
   * In the case of NicheStack, only the use of AF_INET is supported.
   * PF_INET is not supported in NicheStack.
   */ 
  if ((fd_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
 4001990:	01000084 	movi	r4,2
 4001994:	01400044 	movi	r5,1
 4001998:	000d883a 	mov	r6,zero
 400199c:	4028c380 	call	4028c38 <t_socket>
 40019a0:	e0bfba15 	stw	r2,-280(fp)
 40019a4:	e0bfba17 	ldw	r2,-280(fp)
 40019a8:	1004403a 	cmpge	r2,r2,zero
 40019ac:	1000041e 	bne	r2,zero,40019c0 <SSSSimpleSocketServerTask+0x40>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Socket creation failed");
 40019b0:	01003fc4 	movi	r4,255
 40019b4:	01410134 	movhi	r5,1028
 40019b8:	295e8c04 	addi	r5,r5,31280
 40019bc:	400082c0 	call	400082c <alt_NetworkErrorHandler>
   * port and incoming address. In this case we're binding to SSS_PORT and to
   * INADDR_ANY address (allowing anyone to connect to us. Bind may fail for 
   * various reasons, but the most common is that some other socket is bound to
   * the port we're requesting. 
   */ 
  addr.sin_family = AF_INET;
 40019c0:	00800084 	movi	r2,2
 40019c4:	e0bfbb0d 	sth	r2,-276(fp)
  addr.sin_port = htons(SSS_PORT);
 40019c8:	00878004 	movi	r2,7680
 40019cc:	e0bfbb8d 	sth	r2,-274(fp)
  addr.sin_addr.s_addr = INADDR_ANY;
 40019d0:	e03fbc15 	stw	zero,-272(fp)
  
  if ((bind(fd_listen,(struct sockaddr *)&addr,sizeof(addr))) < 0)
 40019d4:	e17fbb04 	addi	r5,fp,-276
 40019d8:	e13fba17 	ldw	r4,-280(fp)
 40019dc:	01800404 	movi	r6,16
 40019e0:	4028cc80 	call	4028cc8 <t_bind>
 40019e4:	1004403a 	cmpge	r2,r2,zero
 40019e8:	1000041e 	bne	r2,zero,40019fc <SSSSimpleSocketServerTask+0x7c>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Bind failed");
 40019ec:	01003fc4 	movi	r4,255
 40019f0:	01410134 	movhi	r5,1028
 40019f4:	295e9504 	addi	r5,r5,31316
 40019f8:	400082c0 	call	400082c <alt_NetworkErrorHandler>
   * Sockets primer, continued...
   * The listen socket is a socket which is waiting for incoming connections.
   * This call to listen will block (i.e. not return) until someone tries to 
   * connect to this port.
   */ 
  if ((listen(fd_listen,1)) < 0)
 40019fc:	e13fba17 	ldw	r4,-280(fp)
 4001a00:	01400044 	movi	r5,1
 4001a04:	4028e440 	call	4028e44 <t_listen>
 4001a08:	1004403a 	cmpge	r2,r2,zero
 4001a0c:	1000041e 	bne	r2,zero,4001a20 <SSSSimpleSocketServerTask+0xa0>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Listen failed");
 4001a10:	01003fc4 	movi	r4,255
 4001a14:	01410134 	movhi	r5,1028
 4001a18:	295e9b04 	addi	r5,r5,31340
 4001a1c:	400082c0 	call	400082c <alt_NetworkErrorHandler>
  }

  /* At this point we have successfully created a socket which is listening
   * on SSS_PORT for connection requests from any remote address.
   */
  sss_reset_connection(&conn);
 4001a20:	01010174 	movhi	r4,1029
 4001a24:	21021904 	addi	r4,r4,2148
 4001a28:	40013580 	call	4001358 <sss_reset_connection>
  printf("[sss_task] Simple Socket Server listening on port %d\n", SSS_PORT);
 4001a2c:	01010134 	movhi	r4,1028
 4001a30:	211ea204 	addi	r4,r4,31368
 4001a34:	01400784 	movi	r5,30
 4001a38:	400207c0 	call	400207c <printf>
 4001a3c:	00000006 	br	4001a40 <SSSSimpleSocketServerTask+0xc0>
     * 
     *   FD_ZERO  - Zero's out the sockets we're interested in
     *   FD_SET   - Adds a socket to those we're interested in
     *   FD_ISSET - Tests whether the chosen socket is set 
     */
    FD_ZERO(&readfds);
 4001a40:	e03fbf15 	stw	zero,-260(fp)
    FD_SET(fd_listen, &readfds);
 4001a44:	e17fbf04 	addi	r5,fp,-260
 4001a48:	e13fba17 	ldw	r4,-280(fp)
 4001a4c:	402e2240 	call	402e224 <ifd_set>
    max_socket = fd_listen+1;
 4001a50:	e0bfba17 	ldw	r2,-280(fp)
 4001a54:	10800044 	addi	r2,r2,1
 4001a58:	e0bfb915 	stw	r2,-284(fp)

    if (conn.fd != -1)
 4001a5c:	00810174 	movhi	r2,1029
 4001a60:	10821904 	addi	r2,r2,2148
 4001a64:	10800117 	ldw	r2,4(r2)
 4001a68:	10bfffe0 	cmpeqi	r2,r2,-1
 4001a6c:	10000f1e 	bne	r2,zero,4001aac <SSSSimpleSocketServerTask+0x12c>
    {
      FD_SET(conn.fd, &readfds);
 4001a70:	00810174 	movhi	r2,1029
 4001a74:	10821904 	addi	r2,r2,2148
 4001a78:	11000117 	ldw	r4,4(r2)
 4001a7c:	e17fbf04 	addi	r5,fp,-260
 4001a80:	402e2240 	call	402e224 <ifd_set>
      if (max_socket <= conn.fd)
 4001a84:	00810174 	movhi	r2,1029
 4001a88:	10821904 	addi	r2,r2,2148
 4001a8c:	10c00117 	ldw	r3,4(r2)
 4001a90:	e0bfb917 	ldw	r2,-284(fp)
 4001a94:	18800516 	blt	r3,r2,4001aac <SSSSimpleSocketServerTask+0x12c>
      {
        max_socket = conn.fd+1;
 4001a98:	00810174 	movhi	r2,1029
 4001a9c:	10821904 	addi	r2,r2,2148
 4001aa0:	10800117 	ldw	r2,4(r2)
 4001aa4:	10800044 	addi	r2,r2,1
 4001aa8:	e0bfb915 	stw	r2,-284(fp)
      }
    }

    select(max_socket, &readfds, NULL, NULL, NULL);
 4001aac:	e17fbf04 	addi	r5,fp,-260
 4001ab0:	d8000015 	stw	zero,0(sp)
 4001ab4:	e13fb917 	ldw	r4,-284(fp)
 4001ab8:	000d883a 	mov	r6,zero
 4001abc:	000f883a 	mov	r7,zero
 4001ac0:	402070c0 	call	402070c <bsd_select>
     * is "set" in readfs, then we have an incoming connection request. We'll
     * call a routine to explicitly accept or deny the incoming connection 
     * request (in this example, we accept a single connection and reject any
     * others that come in while the connection is open).
     */
    if (FD_ISSET(fd_listen, &readfds))
 4001ac4:	e17fbf04 	addi	r5,fp,-260
 4001ac8:	e13fba17 	ldw	r4,-280(fp)
 4001acc:	402e2980 	call	402e298 <ifd_isset>
 4001ad0:	1005003a 	cmpeq	r2,r2,zero
 4001ad4:	1000051e 	bne	r2,zero,4001aec <SSSSimpleSocketServerTask+0x16c>
    {
      sss_handle_accept(fd_listen, &conn);
 4001ad8:	e13fba17 	ldw	r4,-280(fp)
 4001adc:	01410174 	movhi	r5,1029
 4001ae0:	29421904 	addi	r5,r5,2148
 4001ae4:	40015300 	call	4001530 <sss_handle_accept>
 4001ae8:	003fd506 	br	4001a40 <SSSSimpleSocketServerTask+0xc0>
     * incoming data for our sss server, and we call our receiver routine
     * to process it.
     */
    else
    {
      if ((conn.fd != -1) && FD_ISSET(conn.fd, &readfds))
 4001aec:	00810174 	movhi	r2,1029
 4001af0:	10821904 	addi	r2,r2,2148
 4001af4:	10800117 	ldw	r2,4(r2)
 4001af8:	10bfffe0 	cmpeqi	r2,r2,-1
 4001afc:	103fd01e 	bne	r2,zero,4001a40 <SSSSimpleSocketServerTask+0xc0>
 4001b00:	00810174 	movhi	r2,1029
 4001b04:	10821904 	addi	r2,r2,2148
 4001b08:	11000117 	ldw	r4,4(r2)
 4001b0c:	e17fbf04 	addi	r5,fp,-260
 4001b10:	402e2980 	call	402e298 <ifd_isset>
 4001b14:	1005003a 	cmpeq	r2,r2,zero
 4001b18:	103fc91e 	bne	r2,zero,4001a40 <SSSSimpleSocketServerTask+0xc0>
      {
        sss_handle_receive(&conn);
 4001b1c:	01010174 	movhi	r4,1029
 4001b20:	21021904 	addi	r4,r4,2148
 4001b24:	40017940 	call	4001794 <sss_handle_receive>
      }
    }
  } /* while(1) */
 4001b28:	003fc506 	br	4001a40 <SSSSimpleSocketServerTask+0xc0>

04001b2c <SOFT_PHY_link_status_read>:
//DON'T FORGET TO SET in "altera_avalon_tse.h"
//ALTERA_TSE_DUPLEX_MODE_DEFAULT TSE_PHY_DUPLEX_HALF
//ALTERA_TSE_MAC_SPEED_DEFAULT TSE_PHY_SPEED_10

alt_u32 SOFT_PHY_link_status_read(np_tse_mac *pmac)
{
 4001b2c:	defffd04 	addi	sp,sp,-12
 4001b30:	df000215 	stw	fp,8(sp)
 4001b34:	df000204 	addi	fp,sp,8
 4001b38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
 4001b3c:	e03ffe15 	stw	zero,-8(fp)

	/* If speed == 10 Mbps */
	link_status |= 0x8;
 4001b40:	e0bffe17 	ldw	r2,-8(fp)
 4001b44:	10800214 	ori	r2,r2,8
 4001b48:	e0bffe15 	stw	r2,-8(fp)

	/* If duplex == Full */
	// link_status |= 0x1;

	return link_status;
 4001b4c:	e0bffe17 	ldw	r2,-8(fp)
}
 4001b50:	e037883a 	mov	sp,fp
 4001b54:	df000017 	ldw	fp,0(sp)
 4001b58:	dec00104 	addi	sp,sp,4
 4001b5c:	f800283a 	ret

04001b60 <setup_phy>:

void setup_phy(void)
{
 4001b60:	deffd104 	addi	sp,sp,-188
 4001b64:	dfc02e15 	stw	ra,184(sp)
 4001b68:	df002d15 	stw	fp,180(sp)
 4001b6c:	df002d04 	addi	fp,sp,180
	alt_tse_system_mac sys_mac = {TSE_SYSTEM_MAC(ETHERNET_1)};
 4001b70:	00804034 	movhi	r2,256
 4001b74:	10840004 	addi	r2,r2,4096
 4001b78:	e0bfd415 	stw	r2,-176(fp)
 4001b7c:	00810004 	movi	r2,1024
 4001b80:	e0bfd50d 	sth	r2,-172(fp)
 4001b84:	00820004 	movi	r2,2048
 4001b88:	e0bfd58d 	sth	r2,-170(fp)
 4001b8c:	e03fd605 	stb	zero,-168(fp)
 4001b90:	00800044 	movi	r2,1
 4001b94:	e0bfd645 	stb	r2,-167(fp)
 4001b98:	e03fd685 	stb	zero,-166(fp)
 4001b9c:	e03fd6c5 	stb	zero,-165(fp)
 4001ba0:	00800044 	movi	r2,1
 4001ba4:	e0bfd705 	stb	r2,-164(fp)
 4001ba8:	e03fd745 	stb	zero,-163(fp)
 4001bac:	00800044 	movi	r2,1
 4001bb0:	e0bfd785 	stb	r2,-162(fp)
 4001bb4:	e03fd7c5 	stb	zero,-161(fp)
 4001bb8:	e03fd805 	stb	zero,-160(fp)
	alt_tse_system_sgdma sys_sgdma = {TSE_SYSTEM_SGDMA(SGDMA_TX, SGDMA_RX)};
 4001bbc:	00810134 	movhi	r2,1028
 4001bc0:	109eb004 	addi	r2,r2,31424
 4001bc4:	e0bfd915 	stw	r2,-156(fp)
 4001bc8:	00810134 	movhi	r2,1028
 4001bcc:	109eb404 	addi	r2,r2,31440
 4001bd0:	e0bfda15 	stw	r2,-152(fp)
 4001bd4:	00800044 	movi	r2,1
 4001bd8:	e0bfdb0d 	sth	r2,-148(fp)
	alt_tse_system_desc_mem sys_mem = {TSE_SYSTEM_NO_DESC_MEM()};
 4001bdc:	e03fdc05 	stb	zero,-144(fp)
 4001be0:	e03fdd15 	stw	zero,-140(fp)
	alt_tse_system_shared_fifo sys_sfifo = {TSE_SYSTEM_NO_SHARED_FIFO()};
 4001be4:	e03fde05 	stb	zero,-136(fp)
 4001be8:	e03fdf15 	stw	zero,-132(fp)
 4001bec:	e03fe015 	stw	zero,-128(fp)
 4001bf0:	e03fe115 	stw	zero,-124(fp)
 4001bf4:	e03fe215 	stw	zero,-120(fp)
 4001bf8:	e03fe315 	stw	zero,-116(fp)
 4001bfc:	e03fe415 	stw	zero,-112(fp)
	alt_tse_system_phy sys_phy = {TSE_SYSTEM_PHY(1, NULL)};//no mdio
 4001c00:	00800044 	movi	r2,1
 4001c04:	e0bfe515 	stw	r2,-108(fp)
 4001c08:	e03fe615 	stw	zero,-104(fp)

	alt_tse_system_add_sys(&sys_mac, &sys_sgdma, &sys_mem, &sys_sfifo, &sys_phy);
 4001c0c:	e17fd904 	addi	r5,fp,-156
 4001c10:	e1bfdc04 	addi	r6,fp,-144
 4001c14:	e1ffde04 	addi	r7,fp,-136
 4001c18:	e0bfe504 	addi	r2,fp,-108
 4001c1c:	d8800015 	stw	r2,0(sp)
 4001c20:	e13fd404 	addi	r4,fp,-176
 4001c24:	401724c0 	call	401724c <alt_tse_system_add_sys>
			0, /* Location of Speed Status (ignored) */
			0, /* Location of Duplex Status (ignored) */
			0, /* Location of Link Status (ignored) */
			0, /* No function pointer */
			&SOFT_PHY_link_status_read /* Function pointer to read from PHY specific status register */
	};
 4001c28:	e13fe704 	addi	r4,fp,-100
 4001c2c:	01801904 	movi	r6,100
 4001c30:	000b883a 	mov	r5,zero
 4001c34:	4001f640 	call	4001f64 <memset>
 4001c38:	00c10134 	movhi	r3,1028
 4001c3c:	18deb804 	addi	r3,r3,31456
 4001c40:	18800017 	ldw	r2,0(r3)
 4001c44:	e0bfe715 	stw	r2,-100(fp)
 4001c48:	18800117 	ldw	r2,4(r3)
 4001c4c:	e0bfe815 	stw	r2,-96(fp)
 4001c50:	18800203 	ldbu	r2,8(r3)
 4001c54:	e0bfe905 	stb	r2,-92(fp)
 4001c58:	e13fe944 	addi	r4,fp,-91
 4001c5c:	018011c4 	movi	r6,71
 4001c60:	000b883a 	mov	r5,zero
 4001c64:	4001f640 	call	4001f64 <memset>
 4001c68:	00800044 	movi	r2,1
 4001c6c:	e0bffb15 	stw	r2,-20(fp)
 4001c70:	00800044 	movi	r2,1
 4001c74:	e0bffc05 	stb	r2,-16(fp)
 4001c78:	00800044 	movi	r2,1
 4001c7c:	e0bffc45 	stb	r2,-15(fp)
 4001c80:	00810034 	movhi	r2,1024
 4001c84:	1086cb04 	addi	r2,r2,6956
 4001c88:	e0bfff15 	stw	r2,-4(fp)

	alt_tse_phy_add_profile(&SOFT_PHY);
 4001c8c:	e13fe704 	addi	r4,fp,-100
 4001c90:	40170740 	call	4017074 <alt_tse_phy_add_profile>
}
 4001c94:	e037883a 	mov	sp,fp
 4001c98:	dfc00117 	ldw	ra,4(sp)
 4001c9c:	df000017 	ldw	fp,0(sp)
 4001ca0:	dec00204 	addi	sp,sp,8
 4001ca4:	f800283a 	ret

04001ca8 <fprintf>:
 4001ca8:	defffc04 	addi	sp,sp,-16
 4001cac:	dfc00115 	stw	ra,4(sp)
 4001cb0:	d9800215 	stw	r6,8(sp)
 4001cb4:	d9c00315 	stw	r7,12(sp)
 4001cb8:	d8800204 	addi	r2,sp,8
 4001cbc:	100d883a 	mov	r6,r2
 4001cc0:	d8800015 	stw	r2,0(sp)
 4001cc4:	40049500 	call	4004950 <__vfprintf_internal>
 4001cc8:	dfc00117 	ldw	ra,4(sp)
 4001ccc:	dec00404 	addi	sp,sp,16
 4001cd0:	f800283a 	ret

04001cd4 <_fprintf_r>:
 4001cd4:	defffd04 	addi	sp,sp,-12
 4001cd8:	2807883a 	mov	r3,r5
 4001cdc:	dfc00115 	stw	ra,4(sp)
 4001ce0:	d9c00215 	stw	r7,8(sp)
 4001ce4:	d8800204 	addi	r2,sp,8
 4001ce8:	300b883a 	mov	r5,r6
 4001cec:	1809883a 	mov	r4,r3
 4001cf0:	100d883a 	mov	r6,r2
 4001cf4:	d8800015 	stw	r2,0(sp)
 4001cf8:	40049500 	call	4004950 <__vfprintf_internal>
 4001cfc:	dfc00117 	ldw	ra,4(sp)
 4001d00:	dec00304 	addi	sp,sp,12
 4001d04:	f800283a 	ret

04001d08 <_fwrite_r>:
 4001d08:	defff604 	addi	sp,sp,-40
 4001d0c:	dc400615 	stw	r17,24(sp)
 4001d10:	39a3383a 	mul	r17,r7,r6
 4001d14:	00800044 	movi	r2,1
 4001d18:	dcc00815 	stw	r19,32(sp)
 4001d1c:	dc800715 	stw	r18,28(sp)
 4001d20:	dc000515 	stw	r16,20(sp)
 4001d24:	dfc00915 	stw	ra,36(sp)
 4001d28:	3825883a 	mov	r18,r7
 4001d2c:	3027883a 	mov	r19,r6
 4001d30:	2021883a 	mov	r16,r4
 4001d34:	d9400015 	stw	r5,0(sp)
 4001d38:	d8800315 	stw	r2,12(sp)
 4001d3c:	dc400115 	stw	r17,4(sp)
 4001d40:	dc400415 	stw	r17,16(sp)
 4001d44:	dec00215 	stw	sp,8(sp)
 4001d48:	20000226 	beq	r4,zero,4001d54 <_fwrite_r+0x4c>
 4001d4c:	20800e17 	ldw	r2,56(r4)
 4001d50:	10001226 	beq	r2,zero,4001d9c <_fwrite_r+0x94>
 4001d54:	d9400a17 	ldw	r5,40(sp)
 4001d58:	8009883a 	mov	r4,r16
 4001d5c:	d9800204 	addi	r6,sp,8
 4001d60:	4006cf80 	call	4006cf8 <__sfvwrite_r>
 4001d64:	980b883a 	mov	r5,r19
 4001d68:	10000426 	beq	r2,zero,4001d7c <_fwrite_r+0x74>
 4001d6c:	d9000417 	ldw	r4,16(sp)
 4001d70:	8909c83a 	sub	r4,r17,r4
 4001d74:	400bc200 	call	400bc20 <__udivsi3>
 4001d78:	1025883a 	mov	r18,r2
 4001d7c:	9005883a 	mov	r2,r18
 4001d80:	dfc00917 	ldw	ra,36(sp)
 4001d84:	dcc00817 	ldw	r19,32(sp)
 4001d88:	dc800717 	ldw	r18,28(sp)
 4001d8c:	dc400617 	ldw	r17,24(sp)
 4001d90:	dc000517 	ldw	r16,20(sp)
 4001d94:	dec00a04 	addi	sp,sp,40
 4001d98:	f800283a 	ret
 4001d9c:	40065140 	call	4006514 <__sinit>
 4001da0:	003fec06 	br	4001d54 <_fwrite_r+0x4c>

04001da4 <fwrite>:
 4001da4:	00810174 	movhi	r2,1029
 4001da8:	10b9bf04 	addi	r2,r2,-6404
 4001dac:	2017883a 	mov	r11,r4
 4001db0:	11000017 	ldw	r4,0(r2)
 4001db4:	defffe04 	addi	sp,sp,-8
 4001db8:	3013883a 	mov	r9,r6
 4001dbc:	2805883a 	mov	r2,r5
 4001dc0:	d9c00015 	stw	r7,0(sp)
 4001dc4:	580b883a 	mov	r5,r11
 4001dc8:	100d883a 	mov	r6,r2
 4001dcc:	480f883a 	mov	r7,r9
 4001dd0:	dfc00115 	stw	ra,4(sp)
 4001dd4:	4001d080 	call	4001d08 <_fwrite_r>
 4001dd8:	dfc00117 	ldw	ra,4(sp)
 4001ddc:	dec00204 	addi	sp,sp,8
 4001de0:	f800283a 	ret

04001de4 <memcpy>:
 4001de4:	01c003c4 	movi	r7,15
 4001de8:	2007883a 	mov	r3,r4
 4001dec:	3980032e 	bgeu	r7,r6,4001dfc <memcpy+0x18>
 4001df0:	2904b03a 	or	r2,r5,r4
 4001df4:	108000cc 	andi	r2,r2,3
 4001df8:	10000926 	beq	r2,zero,4001e20 <memcpy+0x3c>
 4001dfc:	30000626 	beq	r6,zero,4001e18 <memcpy+0x34>
 4001e00:	30cd883a 	add	r6,r6,r3
 4001e04:	28800003 	ldbu	r2,0(r5)
 4001e08:	29400044 	addi	r5,r5,1
 4001e0c:	18800005 	stb	r2,0(r3)
 4001e10:	18c00044 	addi	r3,r3,1
 4001e14:	30fffb1e 	bne	r6,r3,4001e04 <memcpy+0x20>
 4001e18:	2005883a 	mov	r2,r4
 4001e1c:	f800283a 	ret
 4001e20:	3811883a 	mov	r8,r7
 4001e24:	200f883a 	mov	r7,r4
 4001e28:	28c00017 	ldw	r3,0(r5)
 4001e2c:	31bffc04 	addi	r6,r6,-16
 4001e30:	38c00015 	stw	r3,0(r7)
 4001e34:	28800117 	ldw	r2,4(r5)
 4001e38:	38800115 	stw	r2,4(r7)
 4001e3c:	28c00217 	ldw	r3,8(r5)
 4001e40:	38c00215 	stw	r3,8(r7)
 4001e44:	28800317 	ldw	r2,12(r5)
 4001e48:	29400404 	addi	r5,r5,16
 4001e4c:	38800315 	stw	r2,12(r7)
 4001e50:	39c00404 	addi	r7,r7,16
 4001e54:	41bff436 	bltu	r8,r6,4001e28 <memcpy+0x44>
 4001e58:	008000c4 	movi	r2,3
 4001e5c:	1180072e 	bgeu	r2,r6,4001e7c <memcpy+0x98>
 4001e60:	1007883a 	mov	r3,r2
 4001e64:	28800017 	ldw	r2,0(r5)
 4001e68:	31bfff04 	addi	r6,r6,-4
 4001e6c:	29400104 	addi	r5,r5,4
 4001e70:	38800015 	stw	r2,0(r7)
 4001e74:	39c00104 	addi	r7,r7,4
 4001e78:	19bffa36 	bltu	r3,r6,4001e64 <memcpy+0x80>
 4001e7c:	3807883a 	mov	r3,r7
 4001e80:	003fde06 	br	4001dfc <memcpy+0x18>

04001e84 <memmove>:
 4001e84:	2807883a 	mov	r3,r5
 4001e88:	2011883a 	mov	r8,r4
 4001e8c:	29000c2e 	bgeu	r5,r4,4001ec0 <memmove+0x3c>
 4001e90:	298f883a 	add	r7,r5,r6
 4001e94:	21c00a2e 	bgeu	r4,r7,4001ec0 <memmove+0x3c>
 4001e98:	30000726 	beq	r6,zero,4001eb8 <memmove+0x34>
 4001e9c:	2187883a 	add	r3,r4,r6
 4001ea0:	198dc83a 	sub	r6,r3,r6
 4001ea4:	39ffffc4 	addi	r7,r7,-1
 4001ea8:	38800003 	ldbu	r2,0(r7)
 4001eac:	18ffffc4 	addi	r3,r3,-1
 4001eb0:	18800005 	stb	r2,0(r3)
 4001eb4:	19bffb1e 	bne	r3,r6,4001ea4 <memmove+0x20>
 4001eb8:	2005883a 	mov	r2,r4
 4001ebc:	f800283a 	ret
 4001ec0:	01c003c4 	movi	r7,15
 4001ec4:	39800a36 	bltu	r7,r6,4001ef0 <memmove+0x6c>
 4001ec8:	303ffb26 	beq	r6,zero,4001eb8 <memmove+0x34>
 4001ecc:	400f883a 	mov	r7,r8
 4001ed0:	320d883a 	add	r6,r6,r8
 4001ed4:	28800003 	ldbu	r2,0(r5)
 4001ed8:	29400044 	addi	r5,r5,1
 4001edc:	38800005 	stb	r2,0(r7)
 4001ee0:	39c00044 	addi	r7,r7,1
 4001ee4:	39bffb1e 	bne	r7,r6,4001ed4 <memmove+0x50>
 4001ee8:	2005883a 	mov	r2,r4
 4001eec:	f800283a 	ret
 4001ef0:	1904b03a 	or	r2,r3,r4
 4001ef4:	108000cc 	andi	r2,r2,3
 4001ef8:	103ff31e 	bne	r2,zero,4001ec8 <memmove+0x44>
 4001efc:	3811883a 	mov	r8,r7
 4001f00:	180b883a 	mov	r5,r3
 4001f04:	200f883a 	mov	r7,r4
 4001f08:	28c00017 	ldw	r3,0(r5)
 4001f0c:	31bffc04 	addi	r6,r6,-16
 4001f10:	38c00015 	stw	r3,0(r7)
 4001f14:	28800117 	ldw	r2,4(r5)
 4001f18:	38800115 	stw	r2,4(r7)
 4001f1c:	28c00217 	ldw	r3,8(r5)
 4001f20:	38c00215 	stw	r3,8(r7)
 4001f24:	28800317 	ldw	r2,12(r5)
 4001f28:	29400404 	addi	r5,r5,16
 4001f2c:	38800315 	stw	r2,12(r7)
 4001f30:	39c00404 	addi	r7,r7,16
 4001f34:	41bff436 	bltu	r8,r6,4001f08 <memmove+0x84>
 4001f38:	008000c4 	movi	r2,3
 4001f3c:	1180072e 	bgeu	r2,r6,4001f5c <memmove+0xd8>
 4001f40:	1007883a 	mov	r3,r2
 4001f44:	28800017 	ldw	r2,0(r5)
 4001f48:	31bfff04 	addi	r6,r6,-4
 4001f4c:	29400104 	addi	r5,r5,4
 4001f50:	38800015 	stw	r2,0(r7)
 4001f54:	39c00104 	addi	r7,r7,4
 4001f58:	19bffa36 	bltu	r3,r6,4001f44 <memmove+0xc0>
 4001f5c:	3811883a 	mov	r8,r7
 4001f60:	003fd906 	br	4001ec8 <memmove+0x44>

04001f64 <memset>:
 4001f64:	008000c4 	movi	r2,3
 4001f68:	29403fcc 	andi	r5,r5,255
 4001f6c:	2007883a 	mov	r3,r4
 4001f70:	1180022e 	bgeu	r2,r6,4001f7c <memset+0x18>
 4001f74:	2084703a 	and	r2,r4,r2
 4001f78:	10000826 	beq	r2,zero,4001f9c <memset+0x38>
 4001f7c:	30000526 	beq	r6,zero,4001f94 <memset+0x30>
 4001f80:	2805883a 	mov	r2,r5
 4001f84:	30cd883a 	add	r6,r6,r3
 4001f88:	18800005 	stb	r2,0(r3)
 4001f8c:	18c00044 	addi	r3,r3,1
 4001f90:	19bffd1e 	bne	r3,r6,4001f88 <memset+0x24>
 4001f94:	2005883a 	mov	r2,r4
 4001f98:	f800283a 	ret
 4001f9c:	2804923a 	slli	r2,r5,8
 4001fa0:	020003c4 	movi	r8,15
 4001fa4:	200f883a 	mov	r7,r4
 4001fa8:	2884b03a 	or	r2,r5,r2
 4001fac:	1006943a 	slli	r3,r2,16
 4001fb0:	10c6b03a 	or	r3,r2,r3
 4001fb4:	41800a2e 	bgeu	r8,r6,4001fe0 <memset+0x7c>
 4001fb8:	4005883a 	mov	r2,r8
 4001fbc:	31bffc04 	addi	r6,r6,-16
 4001fc0:	38c00015 	stw	r3,0(r7)
 4001fc4:	38c00115 	stw	r3,4(r7)
 4001fc8:	38c00215 	stw	r3,8(r7)
 4001fcc:	38c00315 	stw	r3,12(r7)
 4001fd0:	39c00404 	addi	r7,r7,16
 4001fd4:	11bff936 	bltu	r2,r6,4001fbc <memset+0x58>
 4001fd8:	008000c4 	movi	r2,3
 4001fdc:	1180052e 	bgeu	r2,r6,4001ff4 <memset+0x90>
 4001fe0:	31bfff04 	addi	r6,r6,-4
 4001fe4:	008000c4 	movi	r2,3
 4001fe8:	38c00015 	stw	r3,0(r7)
 4001fec:	39c00104 	addi	r7,r7,4
 4001ff0:	11bffb36 	bltu	r2,r6,4001fe0 <memset+0x7c>
 4001ff4:	3807883a 	mov	r3,r7
 4001ff8:	003fe006 	br	4001f7c <memset+0x18>

04001ffc <_perror_r>:
 4001ffc:	defffe04 	addi	sp,sp,-8
 4002000:	dc000015 	stw	r16,0(sp)
 4002004:	dfc00115 	stw	ra,4(sp)
 4002008:	2021883a 	mov	r16,r4
 400200c:	28000326 	beq	r5,zero,400201c <_perror_r+0x20>
 4002010:	28800007 	ldb	r2,0(r5)
 4002014:	2809883a 	mov	r4,r5
 4002018:	10000c1e 	bne	r2,zero,400204c <_perror_r+0x50>
 400201c:	81000017 	ldw	r4,0(r16)
 4002020:	400235c0 	call	400235c <strerror>
 4002024:	1009883a 	mov	r4,r2
 4002028:	10000226 	beq	r2,zero,4002034 <_perror_r+0x38>
 400202c:	81400317 	ldw	r5,12(r16)
 4002030:	400689c0 	call	400689c <fputs>
 4002034:	81400317 	ldw	r5,12(r16)
 4002038:	01000284 	movi	r4,10
 400203c:	dfc00117 	ldw	ra,4(sp)
 4002040:	dc000017 	ldw	r16,0(sp)
 4002044:	dec00204 	addi	sp,sp,8
 4002048:	400676c1 	jmpi	400676c <fputc>
 400204c:	81400317 	ldw	r5,12(r16)
 4002050:	400689c0 	call	400689c <fputs>
 4002054:	81400317 	ldw	r5,12(r16)
 4002058:	01010134 	movhi	r4,1028
 400205c:	211f6e04 	addi	r4,r4,32184
 4002060:	400689c0 	call	400689c <fputs>
 4002064:	003fed06 	br	400201c <_perror_r+0x20>

04002068 <perror>:
 4002068:	00810174 	movhi	r2,1029
 400206c:	10b9bf04 	addi	r2,r2,-6404
 4002070:	200b883a 	mov	r5,r4
 4002074:	11000017 	ldw	r4,0(r2)
 4002078:	4001ffc1 	jmpi	4001ffc <_perror_r>

0400207c <printf>:
 400207c:	defffb04 	addi	sp,sp,-20
 4002080:	dfc00115 	stw	ra,4(sp)
 4002084:	d9400215 	stw	r5,8(sp)
 4002088:	d9800315 	stw	r6,12(sp)
 400208c:	d9c00415 	stw	r7,16(sp)
 4002090:	00810174 	movhi	r2,1029
 4002094:	10b9bf04 	addi	r2,r2,-6404
 4002098:	10c00017 	ldw	r3,0(r2)
 400209c:	200b883a 	mov	r5,r4
 40020a0:	d8800204 	addi	r2,sp,8
 40020a4:	19000217 	ldw	r4,8(r3)
 40020a8:	100d883a 	mov	r6,r2
 40020ac:	d8800015 	stw	r2,0(sp)
 40020b0:	40049500 	call	4004950 <__vfprintf_internal>
 40020b4:	dfc00117 	ldw	ra,4(sp)
 40020b8:	dec00504 	addi	sp,sp,20
 40020bc:	f800283a 	ret

040020c0 <_printf_r>:
 40020c0:	defffc04 	addi	sp,sp,-16
 40020c4:	dfc00115 	stw	ra,4(sp)
 40020c8:	d9800215 	stw	r6,8(sp)
 40020cc:	d9c00315 	stw	r7,12(sp)
 40020d0:	280d883a 	mov	r6,r5
 40020d4:	21400217 	ldw	r5,8(r4)
 40020d8:	d8c00204 	addi	r3,sp,8
 40020dc:	180f883a 	mov	r7,r3
 40020e0:	d8c00015 	stw	r3,0(sp)
 40020e4:	4002aa40 	call	4002aa4 <___vfprintf_internal_r>
 40020e8:	dfc00117 	ldw	ra,4(sp)
 40020ec:	dec00404 	addi	sp,sp,16
 40020f0:	f800283a 	ret

040020f4 <_puts_r>:
 40020f4:	defff604 	addi	sp,sp,-40
 40020f8:	dc400715 	stw	r17,28(sp)
 40020fc:	2023883a 	mov	r17,r4
 4002100:	2809883a 	mov	r4,r5
 4002104:	dfc00915 	stw	ra,36(sp)
 4002108:	dcc00815 	stw	r19,32(sp)
 400210c:	2827883a 	mov	r19,r5
 4002110:	40029d00 	call	40029d0 <strlen>
 4002114:	89400217 	ldw	r5,8(r17)
 4002118:	00c10134 	movhi	r3,1028
 400211c:	18df6f04 	addi	r3,r3,32188
 4002120:	01c00044 	movi	r7,1
 4002124:	12000044 	addi	r8,r2,1
 4002128:	d8c00515 	stw	r3,20(sp)
 400212c:	d9c00615 	stw	r7,24(sp)
 4002130:	d8c00304 	addi	r3,sp,12
 4002134:	01c00084 	movi	r7,2
 4002138:	8809883a 	mov	r4,r17
 400213c:	d80d883a 	mov	r6,sp
 4002140:	d8c00015 	stw	r3,0(sp)
 4002144:	dcc00315 	stw	r19,12(sp)
 4002148:	da000215 	stw	r8,8(sp)
 400214c:	d9c00115 	stw	r7,4(sp)
 4002150:	d8800415 	stw	r2,16(sp)
 4002154:	4006cf80 	call	4006cf8 <__sfvwrite_r>
 4002158:	00ffffc4 	movi	r3,-1
 400215c:	10000626 	beq	r2,zero,4002178 <_puts_r+0x84>
 4002160:	1805883a 	mov	r2,r3
 4002164:	dfc00917 	ldw	ra,36(sp)
 4002168:	dcc00817 	ldw	r19,32(sp)
 400216c:	dc400717 	ldw	r17,28(sp)
 4002170:	dec00a04 	addi	sp,sp,40
 4002174:	f800283a 	ret
 4002178:	00c00284 	movi	r3,10
 400217c:	1805883a 	mov	r2,r3
 4002180:	dfc00917 	ldw	ra,36(sp)
 4002184:	dcc00817 	ldw	r19,32(sp)
 4002188:	dc400717 	ldw	r17,28(sp)
 400218c:	dec00a04 	addi	sp,sp,40
 4002190:	f800283a 	ret

04002194 <puts>:
 4002194:	00810174 	movhi	r2,1029
 4002198:	10b9bf04 	addi	r2,r2,-6404
 400219c:	200b883a 	mov	r5,r4
 40021a0:	11000017 	ldw	r4,0(r2)
 40021a4:	40020f41 	jmpi	40020f4 <_puts_r>

040021a8 <sprintf>:
 40021a8:	deffe504 	addi	sp,sp,-108
 40021ac:	2013883a 	mov	r9,r4
 40021b0:	dfc01815 	stw	ra,96(sp)
 40021b4:	d9801915 	stw	r6,100(sp)
 40021b8:	d9c01a15 	stw	r7,104(sp)
 40021bc:	d8801904 	addi	r2,sp,100
 40021c0:	d8800015 	stw	r2,0(sp)
 40021c4:	00810174 	movhi	r2,1029
 40021c8:	10b9bf04 	addi	r2,r2,-6404
 40021cc:	11000017 	ldw	r4,0(r2)
 40021d0:	d9c00017 	ldw	r7,0(sp)
 40021d4:	00808204 	movi	r2,520
 40021d8:	00e00034 	movhi	r3,32768
 40021dc:	18ffffc4 	addi	r3,r3,-1
 40021e0:	280d883a 	mov	r6,r5
 40021e4:	d880040d 	sth	r2,16(sp)
 40021e8:	d9400104 	addi	r5,sp,4
 40021ec:	00bfffc4 	movi	r2,-1
 40021f0:	d8c00615 	stw	r3,24(sp)
 40021f4:	d8c00315 	stw	r3,12(sp)
 40021f8:	da400515 	stw	r9,20(sp)
 40021fc:	d880048d 	sth	r2,18(sp)
 4002200:	da400115 	stw	r9,4(sp)
 4002204:	4002aa40 	call	4002aa4 <___vfprintf_internal_r>
 4002208:	d8c00117 	ldw	r3,4(sp)
 400220c:	18000005 	stb	zero,0(r3)
 4002210:	dfc01817 	ldw	ra,96(sp)
 4002214:	dec01b04 	addi	sp,sp,108
 4002218:	f800283a 	ret

0400221c <_sprintf_r>:
 400221c:	deffe604 	addi	sp,sp,-104
 4002220:	2813883a 	mov	r9,r5
 4002224:	dfc01815 	stw	ra,96(sp)
 4002228:	d9c01915 	stw	r7,100(sp)
 400222c:	d8801904 	addi	r2,sp,100
 4002230:	d8800015 	stw	r2,0(sp)
 4002234:	100f883a 	mov	r7,r2
 4002238:	00808204 	movi	r2,520
 400223c:	00e00034 	movhi	r3,32768
 4002240:	18ffffc4 	addi	r3,r3,-1
 4002244:	d880040d 	sth	r2,16(sp)
 4002248:	d9400104 	addi	r5,sp,4
 400224c:	00bfffc4 	movi	r2,-1
 4002250:	d8c00615 	stw	r3,24(sp)
 4002254:	d8c00315 	stw	r3,12(sp)
 4002258:	da400515 	stw	r9,20(sp)
 400225c:	d880048d 	sth	r2,18(sp)
 4002260:	da400115 	stw	r9,4(sp)
 4002264:	4002aa40 	call	4002aa4 <___vfprintf_internal_r>
 4002268:	d8c00117 	ldw	r3,4(sp)
 400226c:	18000005 	stb	zero,0(r3)
 4002270:	dfc01817 	ldw	ra,96(sp)
 4002274:	dec01a04 	addi	sp,sp,104
 4002278:	f800283a 	ret

0400227c <strchr>:
 400227c:	208000cc 	andi	r2,r4,3
 4002280:	2007883a 	mov	r3,r4
 4002284:	1000311e 	bne	r2,zero,400234c <strchr+0xd0>
 4002288:	29c03fcc 	andi	r7,r5,255
 400228c:	0015883a 	mov	r10,zero
 4002290:	0007883a 	mov	r3,zero
 4002294:	01400104 	movi	r5,4
 4002298:	5004923a 	slli	r2,r10,8
 400229c:	18c00044 	addi	r3,r3,1
 40022a0:	3894b03a 	or	r10,r7,r2
 40022a4:	197ffc1e 	bne	r3,r5,4002298 <strchr+0x1c>
 40022a8:	200d883a 	mov	r6,r4
 40022ac:	21000017 	ldw	r4,0(r4)
 40022b0:	017fbff4 	movhi	r5,65279
 40022b4:	297fbfc4 	addi	r5,r5,-257
 40022b8:	02202074 	movhi	r8,32897
 40022bc:	42202004 	addi	r8,r8,-32640
 40022c0:	2145883a 	add	r2,r4,r5
 40022c4:	1204703a 	and	r2,r2,r8
 40022c8:	0106303a 	nor	r3,zero,r4
 40022cc:	10c4703a 	and	r2,r2,r3
 40022d0:	1000151e 	bne	r2,zero,4002328 <strchr+0xac>
 40022d4:	2284f03a 	xor	r2,r4,r10
 40022d8:	1147883a 	add	r3,r2,r5
 40022dc:	1a06703a 	and	r3,r3,r8
 40022e0:	0084303a 	nor	r2,zero,r2
 40022e4:	10c4703a 	and	r2,r2,r3
 40022e8:	10000f1e 	bne	r2,zero,4002328 <strchr+0xac>
 40022ec:	2813883a 	mov	r9,r5
 40022f0:	00000106 	br	40022f8 <strchr+0x7c>
 40022f4:	18000c1e 	bne	r3,zero,4002328 <strchr+0xac>
 40022f8:	31800104 	addi	r6,r6,4
 40022fc:	30800017 	ldw	r2,0(r6)
 4002300:	1286f03a 	xor	r3,r2,r10
 4002304:	124b883a 	add	r5,r2,r9
 4002308:	1a49883a 	add	r4,r3,r9
 400230c:	2a0a703a 	and	r5,r5,r8
 4002310:	0084303a 	nor	r2,zero,r2
 4002314:	2208703a 	and	r4,r4,r8
 4002318:	00c6303a 	nor	r3,zero,r3
 400231c:	1144703a 	and	r2,r2,r5
 4002320:	1906703a 	and	r3,r3,r4
 4002324:	103ff326 	beq	r2,zero,40022f4 <strchr+0x78>
 4002328:	3007883a 	mov	r3,r6
 400232c:	00000206 	br	4002338 <strchr+0xbc>
 4002330:	38800426 	beq	r7,r2,4002344 <strchr+0xc8>
 4002334:	18c00044 	addi	r3,r3,1
 4002338:	18800003 	ldbu	r2,0(r3)
 400233c:	103ffc1e 	bne	r2,zero,4002330 <strchr+0xb4>
 4002340:	3800041e 	bne	r7,zero,4002354 <strchr+0xd8>
 4002344:	1805883a 	mov	r2,r3
 4002348:	f800283a 	ret
 400234c:	29c03fcc 	andi	r7,r5,255
 4002350:	003ff906 	br	4002338 <strchr+0xbc>
 4002354:	0005883a 	mov	r2,zero
 4002358:	f800283a 	ret

0400235c <strerror>:
 400235c:	deffff04 	addi	sp,sp,-4
 4002360:	00802184 	movi	r2,134
 4002364:	dfc00015 	stw	ra,0(sp)
 4002368:	200b883a 	mov	r5,r4
 400236c:	11008e36 	bltu	r2,r4,40025a8 <strerror+0x24c>
 4002370:	2105883a 	add	r2,r4,r4
 4002374:	1085883a 	add	r2,r2,r2
 4002378:	00c10034 	movhi	r3,1024
 400237c:	18c8e304 	addi	r3,r3,9100
 4002380:	10c5883a 	add	r2,r2,r3
 4002384:	11000017 	ldw	r4,0(r2)
 4002388:	2000683a 	jmp	r4
 400238c:	040025a8 	cmpgeui	r16,zero,150
 4002390:	040025e0 	cmpeqi	r16,zero,151
 4002394:	040025ec 	andhi	r16,zero,151
 4002398:	040025f8 	rdprs	r16,zero,151
 400239c:	04002604 	movi	r16,152
 40023a0:	04002610 	cmplti	r16,zero,152
 40023a4:	0400261c 	xori	r16,zero,152
 40023a8:	04002628 	cmpgeui	r16,zero,152
 40023ac:	04002634 	movhi	r16,152
 40023b0:	04002640 	call	400264 <OSCtxSw_SWITCH_PC+0x400224>
 40023b4:	0400264c 	andi	r16,zero,153
 40023b8:	04002658 	cmpnei	r16,zero,153
 40023bc:	04002664 	muli	r16,zero,153
 40023c0:	04002670 	cmpltui	r16,zero,153
 40023c4:	0400267c 	xorhi	r16,zero,153
 40023c8:	04002688 	cmpgei	r16,zero,154
 40023cc:	04002694 	movui	r16,154
 40023d0:	040026a0 	cmpeqi	r16,zero,154
 40023d4:	040026ac 	andhi	r16,zero,154
 40023d8:	040026b8 	rdprs	r16,zero,154
 40023dc:	040026c4 	movi	r16,155
 40023e0:	040026d0 	cmplti	r16,zero,155
 40023e4:	040026dc 	xori	r16,zero,155
 40023e8:	040026e8 	cmpgeui	r16,zero,155
 40023ec:	040026f4 	movhi	r16,155
 40023f0:	04002700 	call	400270 <OSCtxSw_SWITCH_PC+0x400230>
 40023f4:	0400270c 	andi	r16,zero,156
 40023f8:	04002718 	cmpnei	r16,zero,156
 40023fc:	04002724 	muli	r16,zero,156
 4002400:	04002730 	cmpltui	r16,zero,156
 4002404:	0400273c 	xorhi	r16,zero,156
 4002408:	04002748 	cmpgei	r16,zero,157
 400240c:	04002754 	movui	r16,157
 4002410:	04002760 	cmpeqi	r16,zero,157
 4002414:	0400276c 	andhi	r16,zero,157
 4002418:	04002778 	rdprs	r16,zero,157
 400241c:	04002784 	movi	r16,158
 4002420:	040025a8 	cmpgeui	r16,zero,150
 4002424:	040025a8 	cmpgeui	r16,zero,150
 4002428:	040025a8 	cmpgeui	r16,zero,150
 400242c:	040025a8 	cmpgeui	r16,zero,150
 4002430:	040025a8 	cmpgeui	r16,zero,150
 4002434:	040025a8 	cmpgeui	r16,zero,150
 4002438:	040025a8 	cmpgeui	r16,zero,150
 400243c:	040025a8 	cmpgeui	r16,zero,150
 4002440:	04002790 	cmplti	r16,zero,158
 4002444:	0400279c 	xori	r16,zero,158
 4002448:	040025a8 	cmpgeui	r16,zero,150
 400244c:	040025a8 	cmpgeui	r16,zero,150
 4002450:	040025a8 	cmpgeui	r16,zero,150
 4002454:	040025a8 	cmpgeui	r16,zero,150
 4002458:	040025a8 	cmpgeui	r16,zero,150
 400245c:	040025a8 	cmpgeui	r16,zero,150
 4002460:	040025a8 	cmpgeui	r16,zero,150
 4002464:	040025a8 	cmpgeui	r16,zero,150
 4002468:	040025a8 	cmpgeui	r16,zero,150
 400246c:	040025a8 	cmpgeui	r16,zero,150
 4002470:	040025a8 	cmpgeui	r16,zero,150
 4002474:	040025a8 	cmpgeui	r16,zero,150
 4002478:	040025a8 	cmpgeui	r16,zero,150
 400247c:	040027a8 	cmpgeui	r16,zero,158
 4002480:	040025a8 	cmpgeui	r16,zero,150
 4002484:	040027b4 	movhi	r16,158
 4002488:	040027c0 	call	40027c <OSCtxSw_SWITCH_PC+0x40023c>
 400248c:	040027cc 	andi	r16,zero,159
 4002490:	040027d8 	cmpnei	r16,zero,159
 4002494:	040027e4 	muli	r16,zero,159
 4002498:	040027f0 	cmpltui	r16,zero,159
 400249c:	040027fc 	xorhi	r16,zero,159
 40024a0:	04002808 	cmpgei	r16,zero,160
 40024a4:	04002814 	movui	r16,160
 40024a8:	04002820 	cmpeqi	r16,zero,160
 40024ac:	040025a8 	cmpgeui	r16,zero,150
 40024b0:	040025a8 	cmpgeui	r16,zero,150
 40024b4:	0400282c 	andhi	r16,zero,160
 40024b8:	040025a8 	cmpgeui	r16,zero,150
 40024bc:	040025a8 	cmpgeui	r16,zero,150
 40024c0:	04002838 	rdprs	r16,zero,160
 40024c4:	040025a8 	cmpgeui	r16,zero,150
 40024c8:	040025a8 	cmpgeui	r16,zero,150
 40024cc:	040025a8 	cmpgeui	r16,zero,150
 40024d0:	040025a8 	cmpgeui	r16,zero,150
 40024d4:	040025a8 	cmpgeui	r16,zero,150
 40024d8:	04002844 	movi	r16,161
 40024dc:	04002850 	cmplti	r16,zero,161
 40024e0:	0400285c 	xori	r16,zero,161
 40024e4:	04002868 	cmpgeui	r16,zero,161
 40024e8:	04002874 	movhi	r16,161
 40024ec:	04002880 	call	400288 <OSCtxSw_SWITCH_PC+0x400248>
 40024f0:	0400288c 	andi	r16,zero,162
 40024f4:	04002898 	cmpnei	r16,zero,162
 40024f8:	040028a4 	muli	r16,zero,162
 40024fc:	040028b0 	cmpltui	r16,zero,162
 4002500:	040025a8 	cmpgeui	r16,zero,150
 4002504:	040025a8 	cmpgeui	r16,zero,150
 4002508:	040028bc 	xorhi	r16,zero,162
 400250c:	040025a8 	cmpgeui	r16,zero,150
 4002510:	040025a8 	cmpgeui	r16,zero,150
 4002514:	040025a8 	cmpgeui	r16,zero,150
 4002518:	040025a8 	cmpgeui	r16,zero,150
 400251c:	040025a8 	cmpgeui	r16,zero,150
 4002520:	040025a8 	cmpgeui	r16,zero,150
 4002524:	040025a8 	cmpgeui	r16,zero,150
 4002528:	040025a8 	cmpgeui	r16,zero,150
 400252c:	040025a8 	cmpgeui	r16,zero,150
 4002530:	040028c8 	cmpgei	r16,zero,163
 4002534:	040028d4 	movui	r16,163
 4002538:	040028e0 	cmpeqi	r16,zero,163
 400253c:	040028ec 	andhi	r16,zero,163
 4002540:	040028f8 	rdprs	r16,zero,163
 4002544:	04002904 	movi	r16,164
 4002548:	04002910 	cmplti	r16,zero,164
 400254c:	0400291c 	xori	r16,zero,164
 4002550:	04002928 	cmpgeui	r16,zero,164
 4002554:	04002934 	movhi	r16,164
 4002558:	04002940 	call	400294 <OSCtxSw_SWITCH_PC+0x400254>
 400255c:	0400294c 	andi	r16,zero,165
 4002560:	04002958 	cmpnei	r16,zero,165
 4002564:	04002964 	muli	r16,zero,165
 4002568:	04002970 	cmpltui	r16,zero,165
 400256c:	0400297c 	xorhi	r16,zero,165
 4002570:	04002988 	cmpgei	r16,zero,166
 4002574:	04002994 	movui	r16,166
 4002578:	040029a0 	cmpeqi	r16,zero,166
 400257c:	040029ac 	andhi	r16,zero,166
 4002580:	040025a8 	cmpgeui	r16,zero,150
 4002584:	040025a8 	cmpgeui	r16,zero,150
 4002588:	040029b8 	rdprs	r16,zero,166
 400258c:	040029c4 	movi	r16,167
 4002590:	040025a8 	cmpgeui	r16,zero,150
 4002594:	040025a8 	cmpgeui	r16,zero,150
 4002598:	040025a8 	cmpgeui	r16,zero,150
 400259c:	040025a8 	cmpgeui	r16,zero,150
 40025a0:	040025a8 	cmpgeui	r16,zero,150
 40025a4:	040025d4 	movui	r16,151
 40025a8:	2809883a 	mov	r4,r5
 40025ac:	4002a440 	call	4002a44 <_user_strerror>
 40025b0:	10000326 	beq	r2,zero,40025c0 <strerror+0x264>
 40025b4:	dfc00017 	ldw	ra,0(sp)
 40025b8:	dec00104 	addi	sp,sp,4
 40025bc:	f800283a 	ret
 40025c0:	00810174 	movhi	r2,1029
 40025c4:	10a16804 	addi	r2,r2,-31328
 40025c8:	dfc00017 	ldw	ra,0(sp)
 40025cc:	dec00104 	addi	sp,sp,4
 40025d0:	f800283a 	ret
 40025d4:	00810174 	movhi	r2,1029
 40025d8:	10a02b04 	addi	r2,r2,-32596
 40025dc:	003ff506 	br	40025b4 <strerror+0x258>
 40025e0:	00810134 	movhi	r2,1028
 40025e4:	109f7b04 	addi	r2,r2,32236
 40025e8:	003ff206 	br	40025b4 <strerror+0x258>
 40025ec:	00810134 	movhi	r2,1028
 40025f0:	109f7e04 	addi	r2,r2,32248
 40025f4:	003fef06 	br	40025b4 <strerror+0x258>
 40025f8:	00810134 	movhi	r2,1028
 40025fc:	109f8504 	addi	r2,r2,32276
 4002600:	003fec06 	br	40025b4 <strerror+0x258>
 4002604:	00810134 	movhi	r2,1028
 4002608:	109f8904 	addi	r2,r2,32292
 400260c:	003fe906 	br	40025b4 <strerror+0x258>
 4002610:	00810134 	movhi	r2,1028
 4002614:	109f8f04 	addi	r2,r2,32316
 4002618:	003fe606 	br	40025b4 <strerror+0x258>
 400261c:	00810134 	movhi	r2,1028
 4002620:	109f9204 	addi	r2,r2,32328
 4002624:	003fe306 	br	40025b4 <strerror+0x258>
 4002628:	00810134 	movhi	r2,1028
 400262c:	109f9904 	addi	r2,r2,32356
 4002630:	003fe006 	br	40025b4 <strerror+0x258>
 4002634:	00810134 	movhi	r2,1028
 4002638:	109f9e04 	addi	r2,r2,32376
 400263c:	003fdd06 	br	40025b4 <strerror+0x258>
 4002640:	00810134 	movhi	r2,1028
 4002644:	109faa04 	addi	r2,r2,32424
 4002648:	003fda06 	br	40025b4 <strerror+0x258>
 400264c:	00810134 	movhi	r2,1028
 4002650:	109fae04 	addi	r2,r2,32440
 4002654:	003fd706 	br	40025b4 <strerror+0x258>
 4002658:	00810134 	movhi	r2,1028
 400265c:	109fb904 	addi	r2,r2,32484
 4002660:	003fd406 	br	40025b4 <strerror+0x258>
 4002664:	00810134 	movhi	r2,1028
 4002668:	109fbe04 	addi	r2,r2,32504
 400266c:	003fd106 	br	40025b4 <strerror+0x258>
 4002670:	00810134 	movhi	r2,1028
 4002674:	109fc304 	addi	r2,r2,32524
 4002678:	003fce06 	br	40025b4 <strerror+0x258>
 400267c:	00810134 	movhi	r2,1028
 4002680:	109fc804 	addi	r2,r2,32544
 4002684:	003fcb06 	br	40025b4 <strerror+0x258>
 4002688:	00810134 	movhi	r2,1028
 400268c:	109fcb04 	addi	r2,r2,32556
 4002690:	003fc806 	br	40025b4 <strerror+0x258>
 4002694:	00810134 	movhi	r2,1028
 4002698:	109fd104 	addi	r2,r2,32580
 400269c:	003fc506 	br	40025b4 <strerror+0x258>
 40026a0:	00810134 	movhi	r2,1028
 40026a4:	109fd704 	addi	r2,r2,32604
 40026a8:	003fc206 	br	40025b4 <strerror+0x258>
 40026ac:	00810134 	movhi	r2,1028
 40026b0:	109fda04 	addi	r2,r2,32616
 40026b4:	003fbf06 	br	40025b4 <strerror+0x258>
 40026b8:	00810134 	movhi	r2,1028
 40026bc:	109fdf04 	addi	r2,r2,32636
 40026c0:	003fbc06 	br	40025b4 <strerror+0x258>
 40026c4:	00810134 	movhi	r2,1028
 40026c8:	109fe304 	addi	r2,r2,32652
 40026cc:	003fb906 	br	40025b4 <strerror+0x258>
 40026d0:	00810134 	movhi	r2,1028
 40026d4:	109ff304 	addi	r2,r2,32716
 40026d8:	003fb606 	br	40025b4 <strerror+0x258>
 40026dc:	00810134 	movhi	r2,1028
 40026e0:	109ff704 	addi	r2,r2,32732
 40026e4:	003fb306 	br	40025b4 <strerror+0x258>
 40026e8:	00810174 	movhi	r2,1029
 40026ec:	10a00504 	addi	r2,r2,-32748
 40026f0:	003fb006 	br	40025b4 <strerror+0x258>
 40026f4:	00810174 	movhi	r2,1029
 40026f8:	10a00d04 	addi	r2,r2,-32716
 40026fc:	003fad06 	br	40025b4 <strerror+0x258>
 4002700:	00810174 	movhi	r2,1029
 4002704:	10a01204 	addi	r2,r2,-32696
 4002708:	003faa06 	br	40025b4 <strerror+0x258>
 400270c:	00810174 	movhi	r2,1029
 4002710:	10a01804 	addi	r2,r2,-32672
 4002714:	003fa706 	br	40025b4 <strerror+0x258>
 4002718:	00810174 	movhi	r2,1029
 400271c:	10a01c04 	addi	r2,r2,-32656
 4002720:	003fa406 	br	40025b4 <strerror+0x258>
 4002724:	00810174 	movhi	r2,1029
 4002728:	10a02504 	addi	r2,r2,-32620
 400272c:	003fa106 	br	40025b4 <strerror+0x258>
 4002730:	00810174 	movhi	r2,1029
 4002734:	10a02f04 	addi	r2,r2,-32580
 4002738:	003f9e06 	br	40025b4 <strerror+0x258>
 400273c:	00810174 	movhi	r2,1029
 4002740:	10a03304 	addi	r2,r2,-32564
 4002744:	003f9b06 	br	40025b4 <strerror+0x258>
 4002748:	00810174 	movhi	r2,1029
 400274c:	10a03904 	addi	r2,r2,-32540
 4002750:	003f9806 	br	40025b4 <strerror+0x258>
 4002754:	00810174 	movhi	r2,1029
 4002758:	10a03d04 	addi	r2,r2,-32524
 400275c:	003f9506 	br	40025b4 <strerror+0x258>
 4002760:	00810174 	movhi	r2,1029
 4002764:	10a04004 	addi	r2,r2,-32512
 4002768:	003f9206 	br	40025b4 <strerror+0x258>
 400276c:	00810174 	movhi	r2,1029
 4002770:	10a04404 	addi	r2,r2,-32496
 4002774:	003f8f06 	br	40025b4 <strerror+0x258>
 4002778:	00810174 	movhi	r2,1029
 400277c:	10a04904 	addi	r2,r2,-32476
 4002780:	003f8c06 	br	40025b4 <strerror+0x258>
 4002784:	00810174 	movhi	r2,1029
 4002788:	10a05004 	addi	r2,r2,-32448
 400278c:	003f8906 	br	40025b4 <strerror+0x258>
 4002790:	00810174 	movhi	r2,1029
 4002794:	10a05504 	addi	r2,r2,-32428
 4002798:	003f8606 	br	40025b4 <strerror+0x258>
 400279c:	00810174 	movhi	r2,1029
 40027a0:	10a05e04 	addi	r2,r2,-32392
 40027a4:	003f8306 	br	40025b4 <strerror+0x258>
 40027a8:	00810174 	movhi	r2,1029
 40027ac:	10a06004 	addi	r2,r2,-32384
 40027b0:	003f8006 	br	40025b4 <strerror+0x258>
 40027b4:	00810174 	movhi	r2,1029
 40027b8:	10a06404 	addi	r2,r2,-32368
 40027bc:	003f7d06 	br	40025b4 <strerror+0x258>
 40027c0:	00810174 	movhi	r2,1029
 40027c4:	10a06a04 	addi	r2,r2,-32344
 40027c8:	003f7a06 	br	40025b4 <strerror+0x258>
 40027cc:	00810174 	movhi	r2,1029
 40027d0:	10a06f04 	addi	r2,r2,-32324
 40027d4:	003f7706 	br	40025b4 <strerror+0x258>
 40027d8:	00810174 	movhi	r2,1029
 40027dc:	10a07704 	addi	r2,r2,-32292
 40027e0:	003f7406 	br	40025b4 <strerror+0x258>
 40027e4:	00810174 	movhi	r2,1029
 40027e8:	10a07a04 	addi	r2,r2,-32280
 40027ec:	003f7106 	br	40025b4 <strerror+0x258>
 40027f0:	00810174 	movhi	r2,1029
 40027f4:	10a07f04 	addi	r2,r2,-32260
 40027f8:	003f6e06 	br	40025b4 <strerror+0x258>
 40027fc:	00810174 	movhi	r2,1029
 4002800:	10a08504 	addi	r2,r2,-32236
 4002804:	003f6b06 	br	40025b4 <strerror+0x258>
 4002808:	00810174 	movhi	r2,1029
 400280c:	10a08904 	addi	r2,r2,-32220
 4002810:	003f6806 	br	40025b4 <strerror+0x258>
 4002814:	00810174 	movhi	r2,1029
 4002818:	10a08d04 	addi	r2,r2,-32204
 400281c:	003f6506 	br	40025b4 <strerror+0x258>
 4002820:	00810174 	movhi	r2,1029
 4002824:	10a09204 	addi	r2,r2,-32184
 4002828:	003f6206 	br	40025b4 <strerror+0x258>
 400282c:	00810174 	movhi	r2,1029
 4002830:	10a09b04 	addi	r2,r2,-32148
 4002834:	003f5f06 	br	40025b4 <strerror+0x258>
 4002838:	00810174 	movhi	r2,1029
 400283c:	10a0a004 	addi	r2,r2,-32128
 4002840:	003f5c06 	br	40025b4 <strerror+0x258>
 4002844:	00810174 	movhi	r2,1029
 4002848:	10a0a304 	addi	r2,r2,-32116
 400284c:	003f5906 	br	40025b4 <strerror+0x258>
 4002850:	00810174 	movhi	r2,1029
 4002854:	10a0ad04 	addi	r2,r2,-32076
 4002858:	003f5606 	br	40025b4 <strerror+0x258>
 400285c:	00810174 	movhi	r2,1029
 4002860:	10a0b704 	addi	r2,r2,-32036
 4002864:	003f5306 	br	40025b4 <strerror+0x258>
 4002868:	00810174 	movhi	r2,1029
 400286c:	10a0bf04 	addi	r2,r2,-32004
 4002870:	003f5006 	br	40025b4 <strerror+0x258>
 4002874:	00810174 	movhi	r2,1029
 4002878:	10a0cf04 	addi	r2,r2,-31940
 400287c:	003f4d06 	br	40025b4 <strerror+0x258>
 4002880:	00810174 	movhi	r2,1029
 4002884:	10a0d904 	addi	r2,r2,-31900
 4002888:	003f4a06 	br	40025b4 <strerror+0x258>
 400288c:	00810174 	movhi	r2,1029
 4002890:	10a0e004 	addi	r2,r2,-31872
 4002894:	003f4706 	br	40025b4 <strerror+0x258>
 4002898:	00810174 	movhi	r2,1029
 400289c:	10a0e404 	addi	r2,r2,-31856
 40028a0:	003f4406 	br	40025b4 <strerror+0x258>
 40028a4:	00810174 	movhi	r2,1029
 40028a8:	10a0e904 	addi	r2,r2,-31836
 40028ac:	003f4106 	br	40025b4 <strerror+0x258>
 40028b0:	00810174 	movhi	r2,1029
 40028b4:	10a0f004 	addi	r2,r2,-31808
 40028b8:	003f3e06 	br	40025b4 <strerror+0x258>
 40028bc:	00810174 	movhi	r2,1029
 40028c0:	10a15004 	addi	r2,r2,-31424
 40028c4:	003f3b06 	br	40025b4 <strerror+0x258>
 40028c8:	00810174 	movhi	r2,1029
 40028cc:	10a0f604 	addi	r2,r2,-31784
 40028d0:	003f3806 	br	40025b4 <strerror+0x258>
 40028d4:	00810174 	movhi	r2,1029
 40028d8:	10a0fd04 	addi	r2,r2,-31756
 40028dc:	003f3506 	br	40025b4 <strerror+0x258>
 40028e0:	00810174 	movhi	r2,1029
 40028e4:	10a10904 	addi	r2,r2,-31708
 40028e8:	003f3206 	br	40025b4 <strerror+0x258>
 40028ec:	00810174 	movhi	r2,1029
 40028f0:	10a11104 	addi	r2,r2,-31676
 40028f4:	003f2f06 	br	40025b4 <strerror+0x258>
 40028f8:	00810174 	movhi	r2,1029
 40028fc:	10a11904 	addi	r2,r2,-31644
 4002900:	003f2c06 	br	40025b4 <strerror+0x258>
 4002904:	00810174 	movhi	r2,1029
 4002908:	10a11f04 	addi	r2,r2,-31620
 400290c:	003f2906 	br	40025b4 <strerror+0x258>
 4002910:	00810174 	movhi	r2,1029
 4002914:	10a12804 	addi	r2,r2,-31584
 4002918:	003f2606 	br	40025b4 <strerror+0x258>
 400291c:	00810174 	movhi	r2,1029
 4002920:	10a12d04 	addi	r2,r2,-31564
 4002924:	003f2306 	br	40025b4 <strerror+0x258>
 4002928:	00810174 	movhi	r2,1029
 400292c:	10a13304 	addi	r2,r2,-31540
 4002930:	003f2006 	br	40025b4 <strerror+0x258>
 4002934:	00810174 	movhi	r2,1029
 4002938:	10a05804 	addi	r2,r2,-32416
 400293c:	003f1d06 	br	40025b4 <strerror+0x258>
 4002940:	00810134 	movhi	r2,1028
 4002944:	109ffc04 	addi	r2,r2,32752
 4002948:	003f1a06 	br	40025b4 <strerror+0x258>
 400294c:	00810134 	movhi	r2,1028
 4002950:	109f7504 	addi	r2,r2,32212
 4002954:	003f1706 	br	40025b4 <strerror+0x258>
 4002958:	00810134 	movhi	r2,1028
 400295c:	109fe704 	addi	r2,r2,32668
 4002960:	003f1406 	br	40025b4 <strerror+0x258>
 4002964:	00810174 	movhi	r2,1029
 4002968:	10a02004 	addi	r2,r2,-32640
 400296c:	003f1106 	br	40025b4 <strerror+0x258>
 4002970:	00810134 	movhi	r2,1028
 4002974:	109feb04 	addi	r2,r2,32684
 4002978:	003f0e06 	br	40025b4 <strerror+0x258>
 400297c:	00810134 	movhi	r2,1028
 4002980:	109fa304 	addi	r2,r2,32396
 4002984:	003f0b06 	br	40025b4 <strerror+0x258>
 4002988:	00810134 	movhi	r2,1028
 400298c:	109fb104 	addi	r2,r2,32452
 4002990:	003f0806 	br	40025b4 <strerror+0x258>
 4002994:	00810134 	movhi	r2,1028
 4002998:	109f7004 	addi	r2,r2,32192
 400299c:	003f0506 	br	40025b4 <strerror+0x258>
 40029a0:	00810174 	movhi	r2,1029
 40029a4:	10a09604 	addi	r2,r2,-32168
 40029a8:	003f0206 	br	40025b4 <strerror+0x258>
 40029ac:	00810174 	movhi	r2,1029
 40029b0:	10a14204 	addi	r2,r2,-31480
 40029b4:	003eff06 	br	40025b4 <strerror+0x258>
 40029b8:	00810174 	movhi	r2,1029
 40029bc:	10a14904 	addi	r2,r2,-31452
 40029c0:	003efc06 	br	40025b4 <strerror+0x258>
 40029c4:	00810174 	movhi	r2,1029
 40029c8:	10a13c04 	addi	r2,r2,-31504
 40029cc:	003ef906 	br	40025b4 <strerror+0x258>

040029d0 <strlen>:
 40029d0:	208000cc 	andi	r2,r4,3
 40029d4:	2011883a 	mov	r8,r4
 40029d8:	1000161e 	bne	r2,zero,4002a34 <strlen+0x64>
 40029dc:	20c00017 	ldw	r3,0(r4)
 40029e0:	017fbff4 	movhi	r5,65279
 40029e4:	297fbfc4 	addi	r5,r5,-257
 40029e8:	01e02074 	movhi	r7,32897
 40029ec:	39e02004 	addi	r7,r7,-32640
 40029f0:	1945883a 	add	r2,r3,r5
 40029f4:	11c4703a 	and	r2,r2,r7
 40029f8:	00c6303a 	nor	r3,zero,r3
 40029fc:	1886703a 	and	r3,r3,r2
 4002a00:	18000c1e 	bne	r3,zero,4002a34 <strlen+0x64>
 4002a04:	280d883a 	mov	r6,r5
 4002a08:	380b883a 	mov	r5,r7
 4002a0c:	21000104 	addi	r4,r4,4
 4002a10:	20800017 	ldw	r2,0(r4)
 4002a14:	1187883a 	add	r3,r2,r6
 4002a18:	1946703a 	and	r3,r3,r5
 4002a1c:	0084303a 	nor	r2,zero,r2
 4002a20:	10c4703a 	and	r2,r2,r3
 4002a24:	103ff926 	beq	r2,zero,4002a0c <strlen+0x3c>
 4002a28:	20800007 	ldb	r2,0(r4)
 4002a2c:	10000326 	beq	r2,zero,4002a3c <strlen+0x6c>
 4002a30:	21000044 	addi	r4,r4,1
 4002a34:	20800007 	ldb	r2,0(r4)
 4002a38:	103ffd1e 	bne	r2,zero,4002a30 <strlen+0x60>
 4002a3c:	2205c83a 	sub	r2,r4,r8
 4002a40:	f800283a 	ret

04002a44 <_user_strerror>:
 4002a44:	0005883a 	mov	r2,zero
 4002a48:	f800283a 	ret

04002a4c <__sprint_r>:
 4002a4c:	30800217 	ldw	r2,8(r6)
 4002a50:	defffe04 	addi	sp,sp,-8
 4002a54:	dc000015 	stw	r16,0(sp)
 4002a58:	dfc00115 	stw	ra,4(sp)
 4002a5c:	3021883a 	mov	r16,r6
 4002a60:	0007883a 	mov	r3,zero
 4002a64:	1000061e 	bne	r2,zero,4002a80 <__sprint_r+0x34>
 4002a68:	1805883a 	mov	r2,r3
 4002a6c:	30000115 	stw	zero,4(r6)
 4002a70:	dfc00117 	ldw	ra,4(sp)
 4002a74:	dc000017 	ldw	r16,0(sp)
 4002a78:	dec00204 	addi	sp,sp,8
 4002a7c:	f800283a 	ret
 4002a80:	4006cf80 	call	4006cf8 <__sfvwrite_r>
 4002a84:	1007883a 	mov	r3,r2
 4002a88:	1805883a 	mov	r2,r3
 4002a8c:	80000115 	stw	zero,4(r16)
 4002a90:	80000215 	stw	zero,8(r16)
 4002a94:	dfc00117 	ldw	ra,4(sp)
 4002a98:	dc000017 	ldw	r16,0(sp)
 4002a9c:	dec00204 	addi	sp,sp,8
 4002aa0:	f800283a 	ret

04002aa4 <___vfprintf_internal_r>:
 4002aa4:	defea404 	addi	sp,sp,-1392
 4002aa8:	dd815815 	stw	r22,1376(sp)
 4002aac:	dc015215 	stw	r16,1352(sp)
 4002ab0:	d9c15115 	stw	r7,1348(sp)
 4002ab4:	dfc15b15 	stw	ra,1388(sp)
 4002ab8:	df015a15 	stw	fp,1384(sp)
 4002abc:	ddc15915 	stw	r23,1380(sp)
 4002ac0:	dd415715 	stw	r21,1372(sp)
 4002ac4:	dd015615 	stw	r20,1368(sp)
 4002ac8:	dcc15515 	stw	r19,1364(sp)
 4002acc:	dc815415 	stw	r18,1360(sp)
 4002ad0:	dc415315 	stw	r17,1356(sp)
 4002ad4:	282d883a 	mov	r22,r5
 4002ad8:	3021883a 	mov	r16,r6
 4002adc:	d9014f15 	stw	r4,1340(sp)
 4002ae0:	400731c0 	call	400731c <_localeconv_r>
 4002ae4:	10800017 	ldw	r2,0(r2)
 4002ae8:	d9c15117 	ldw	r7,1348(sp)
 4002aec:	d8814915 	stw	r2,1316(sp)
 4002af0:	d8814f17 	ldw	r2,1340(sp)
 4002af4:	10000226 	beq	r2,zero,4002b00 <___vfprintf_internal_r+0x5c>
 4002af8:	10800e17 	ldw	r2,56(r2)
 4002afc:	10020d26 	beq	r2,zero,4003334 <___vfprintf_internal_r+0x890>
 4002b00:	b080030b 	ldhu	r2,12(r22)
 4002b04:	1080020c 	andi	r2,r2,8
 4002b08:	10020e26 	beq	r2,zero,4003344 <___vfprintf_internal_r+0x8a0>
 4002b0c:	b0800417 	ldw	r2,16(r22)
 4002b10:	10020c26 	beq	r2,zero,4003344 <___vfprintf_internal_r+0x8a0>
 4002b14:	b200030b 	ldhu	r8,12(r22)
 4002b18:	00800284 	movi	r2,10
 4002b1c:	40c0068c 	andi	r3,r8,26
 4002b20:	18802f1e 	bne	r3,r2,4002be0 <___vfprintf_internal_r+0x13c>
 4002b24:	b080038f 	ldh	r2,14(r22)
 4002b28:	10002d16 	blt	r2,zero,4002be0 <___vfprintf_internal_r+0x13c>
 4002b2c:	b240038b 	ldhu	r9,14(r22)
 4002b30:	b2800717 	ldw	r10,28(r22)
 4002b34:	b2c00917 	ldw	r11,36(r22)
 4002b38:	d9014f17 	ldw	r4,1340(sp)
 4002b3c:	dc402904 	addi	r17,sp,164
 4002b40:	d8804004 	addi	r2,sp,256
 4002b44:	00c10004 	movi	r3,1024
 4002b48:	423fff4c 	andi	r8,r8,65533
 4002b4c:	800d883a 	mov	r6,r16
 4002b50:	880b883a 	mov	r5,r17
 4002b54:	da002c0d 	sth	r8,176(sp)
 4002b58:	da402c8d 	sth	r9,178(sp)
 4002b5c:	da803015 	stw	r10,192(sp)
 4002b60:	dac03215 	stw	r11,200(sp)
 4002b64:	d8802d15 	stw	r2,180(sp)
 4002b68:	d8c02e15 	stw	r3,184(sp)
 4002b6c:	d8802915 	stw	r2,164(sp)
 4002b70:	d8c02b15 	stw	r3,172(sp)
 4002b74:	d8002f15 	stw	zero,188(sp)
 4002b78:	4002aa40 	call	4002aa4 <___vfprintf_internal_r>
 4002b7c:	d8814b15 	stw	r2,1324(sp)
 4002b80:	10000416 	blt	r2,zero,4002b94 <___vfprintf_internal_r+0xf0>
 4002b84:	d9014f17 	ldw	r4,1340(sp)
 4002b88:	880b883a 	mov	r5,r17
 4002b8c:	400627c0 	call	400627c <_fflush_r>
 4002b90:	1002321e 	bne	r2,zero,400345c <___vfprintf_internal_r+0x9b8>
 4002b94:	d8802c0b 	ldhu	r2,176(sp)
 4002b98:	1080100c 	andi	r2,r2,64
 4002b9c:	10000326 	beq	r2,zero,4002bac <___vfprintf_internal_r+0x108>
 4002ba0:	b080030b 	ldhu	r2,12(r22)
 4002ba4:	10801014 	ori	r2,r2,64
 4002ba8:	b080030d 	sth	r2,12(r22)
 4002bac:	d8814b17 	ldw	r2,1324(sp)
 4002bb0:	dfc15b17 	ldw	ra,1388(sp)
 4002bb4:	df015a17 	ldw	fp,1384(sp)
 4002bb8:	ddc15917 	ldw	r23,1380(sp)
 4002bbc:	dd815817 	ldw	r22,1376(sp)
 4002bc0:	dd415717 	ldw	r21,1372(sp)
 4002bc4:	dd015617 	ldw	r20,1368(sp)
 4002bc8:	dcc15517 	ldw	r19,1364(sp)
 4002bcc:	dc815417 	ldw	r18,1360(sp)
 4002bd0:	dc415317 	ldw	r17,1356(sp)
 4002bd4:	dc015217 	ldw	r16,1352(sp)
 4002bd8:	dec15c04 	addi	sp,sp,1392
 4002bdc:	f800283a 	ret
 4002be0:	0005883a 	mov	r2,zero
 4002be4:	0007883a 	mov	r3,zero
 4002be8:	dd401904 	addi	r21,sp,100
 4002bec:	d8814215 	stw	r2,1288(sp)
 4002bf0:	802f883a 	mov	r23,r16
 4002bf4:	d8c14315 	stw	r3,1292(sp)
 4002bf8:	d8014b15 	stw	zero,1324(sp)
 4002bfc:	d8014815 	stw	zero,1312(sp)
 4002c00:	d8014415 	stw	zero,1296(sp)
 4002c04:	d8014715 	stw	zero,1308(sp)
 4002c08:	dd400c15 	stw	r21,48(sp)
 4002c0c:	d8000e15 	stw	zero,56(sp)
 4002c10:	d8000d15 	stw	zero,52(sp)
 4002c14:	b8800007 	ldb	r2,0(r23)
 4002c18:	10001926 	beq	r2,zero,4002c80 <___vfprintf_internal_r+0x1dc>
 4002c1c:	00c00944 	movi	r3,37
 4002c20:	10c01726 	beq	r2,r3,4002c80 <___vfprintf_internal_r+0x1dc>
 4002c24:	b821883a 	mov	r16,r23
 4002c28:	00000106 	br	4002c30 <___vfprintf_internal_r+0x18c>
 4002c2c:	10c00326 	beq	r2,r3,4002c3c <___vfprintf_internal_r+0x198>
 4002c30:	84000044 	addi	r16,r16,1
 4002c34:	80800007 	ldb	r2,0(r16)
 4002c38:	103ffc1e 	bne	r2,zero,4002c2c <___vfprintf_internal_r+0x188>
 4002c3c:	85e7c83a 	sub	r19,r16,r23
 4002c40:	98000e26 	beq	r19,zero,4002c7c <___vfprintf_internal_r+0x1d8>
 4002c44:	dc800e17 	ldw	r18,56(sp)
 4002c48:	dc400d17 	ldw	r17,52(sp)
 4002c4c:	008001c4 	movi	r2,7
 4002c50:	94e5883a 	add	r18,r18,r19
 4002c54:	8c400044 	addi	r17,r17,1
 4002c58:	adc00015 	stw	r23,0(r21)
 4002c5c:	dc800e15 	stw	r18,56(sp)
 4002c60:	acc00115 	stw	r19,4(r21)
 4002c64:	dc400d15 	stw	r17,52(sp)
 4002c68:	14428b16 	blt	r2,r17,4003698 <___vfprintf_internal_r+0xbf4>
 4002c6c:	ad400204 	addi	r21,r21,8
 4002c70:	d9014b17 	ldw	r4,1324(sp)
 4002c74:	24c9883a 	add	r4,r4,r19
 4002c78:	d9014b15 	stw	r4,1324(sp)
 4002c7c:	802f883a 	mov	r23,r16
 4002c80:	b8800007 	ldb	r2,0(r23)
 4002c84:	10013c26 	beq	r2,zero,4003178 <___vfprintf_internal_r+0x6d4>
 4002c88:	bdc00044 	addi	r23,r23,1
 4002c8c:	d8000405 	stb	zero,16(sp)
 4002c90:	b8c00007 	ldb	r3,0(r23)
 4002c94:	04ffffc4 	movi	r19,-1
 4002c98:	d8014c15 	stw	zero,1328(sp)
 4002c9c:	d8014a15 	stw	zero,1320(sp)
 4002ca0:	d8c14d15 	stw	r3,1332(sp)
 4002ca4:	bdc00044 	addi	r23,r23,1
 4002ca8:	d9414d17 	ldw	r5,1332(sp)
 4002cac:	00801604 	movi	r2,88
 4002cb0:	28fff804 	addi	r3,r5,-32
 4002cb4:	10c06036 	bltu	r2,r3,4002e38 <___vfprintf_internal_r+0x394>
 4002cb8:	18c5883a 	add	r2,r3,r3
 4002cbc:	1085883a 	add	r2,r2,r2
 4002cc0:	00c10034 	movhi	r3,1024
 4002cc4:	18cb3504 	addi	r3,r3,11476
 4002cc8:	10c5883a 	add	r2,r2,r3
 4002ccc:	11000017 	ldw	r4,0(r2)
 4002cd0:	2000683a 	jmp	r4
 4002cd4:	04003c48 	cmpgei	r16,zero,241
 4002cd8:	04002e38 	rdprs	r16,zero,184
 4002cdc:	04002e38 	rdprs	r16,zero,184
 4002ce0:	04003c34 	movhi	r16,240
 4002ce4:	04002e38 	rdprs	r16,zero,184
 4002ce8:	04002e38 	rdprs	r16,zero,184
 4002cec:	04002e38 	rdprs	r16,zero,184
 4002cf0:	04002e38 	rdprs	r16,zero,184
 4002cf4:	04002e38 	rdprs	r16,zero,184
 4002cf8:	04002e38 	rdprs	r16,zero,184
 4002cfc:	04003a14 	movui	r16,232
 4002d00:	04003c24 	muli	r16,zero,240
 4002d04:	04002e38 	rdprs	r16,zero,184
 4002d08:	04003a2c 	andhi	r16,zero,232
 4002d0c:	04003cc0 	call	4003cc <OSCtxSw_SWITCH_PC+0x40038c>
 4002d10:	04002e38 	rdprs	r16,zero,184
 4002d14:	04003cac 	andhi	r16,zero,242
 4002d18:	04003c74 	movhi	r16,241
 4002d1c:	04003c74 	movhi	r16,241
 4002d20:	04003c74 	movhi	r16,241
 4002d24:	04003c74 	movhi	r16,241
 4002d28:	04003c74 	movhi	r16,241
 4002d2c:	04003c74 	movhi	r16,241
 4002d30:	04003c74 	movhi	r16,241
 4002d34:	04003c74 	movhi	r16,241
 4002d38:	04003c74 	movhi	r16,241
 4002d3c:	04002e38 	rdprs	r16,zero,184
 4002d40:	04002e38 	rdprs	r16,zero,184
 4002d44:	04002e38 	rdprs	r16,zero,184
 4002d48:	04002e38 	rdprs	r16,zero,184
 4002d4c:	04002e38 	rdprs	r16,zero,184
 4002d50:	04002e38 	rdprs	r16,zero,184
 4002d54:	04002e38 	rdprs	r16,zero,184
 4002d58:	04002e38 	rdprs	r16,zero,184
 4002d5c:	04002e38 	rdprs	r16,zero,184
 4002d60:	04002e38 	rdprs	r16,zero,184
 4002d64:	04003490 	cmplti	r16,zero,210
 4002d68:	04003afc 	xorhi	r16,zero,235
 4002d6c:	04002e38 	rdprs	r16,zero,184
 4002d70:	04003afc 	xorhi	r16,zero,235
 4002d74:	04002e38 	rdprs	r16,zero,184
 4002d78:	04002e38 	rdprs	r16,zero,184
 4002d7c:	04002e38 	rdprs	r16,zero,184
 4002d80:	04002e38 	rdprs	r16,zero,184
 4002d84:	04003c60 	cmpeqi	r16,zero,241
 4002d88:	04002e38 	rdprs	r16,zero,184
 4002d8c:	04002e38 	rdprs	r16,zero,184
 4002d90:	04003544 	movi	r16,213
 4002d94:	04002e38 	rdprs	r16,zero,184
 4002d98:	04002e38 	rdprs	r16,zero,184
 4002d9c:	04002e38 	rdprs	r16,zero,184
 4002da0:	04002e38 	rdprs	r16,zero,184
 4002da4:	04002e38 	rdprs	r16,zero,184
 4002da8:	04003590 	cmplti	r16,zero,214
 4002dac:	04002e38 	rdprs	r16,zero,184
 4002db0:	04002e38 	rdprs	r16,zero,184
 4002db4:	04003bb0 	cmpltui	r16,zero,238
 4002db8:	04002e38 	rdprs	r16,zero,184
 4002dbc:	04002e38 	rdprs	r16,zero,184
 4002dc0:	04002e38 	rdprs	r16,zero,184
 4002dc4:	04002e38 	rdprs	r16,zero,184
 4002dc8:	04002e38 	rdprs	r16,zero,184
 4002dcc:	04002e38 	rdprs	r16,zero,184
 4002dd0:	04002e38 	rdprs	r16,zero,184
 4002dd4:	04002e38 	rdprs	r16,zero,184
 4002dd8:	04002e38 	rdprs	r16,zero,184
 4002ddc:	04002e38 	rdprs	r16,zero,184
 4002de0:	04003b84 	movi	r16,238
 4002de4:	0400349c 	xori	r16,zero,210
 4002de8:	04003afc 	xorhi	r16,zero,235
 4002dec:	04003afc 	xorhi	r16,zero,235
 4002df0:	04003afc 	xorhi	r16,zero,235
 4002df4:	04003ae8 	cmpgeui	r16,zero,235
 4002df8:	0400349c 	xori	r16,zero,210
 4002dfc:	04002e38 	rdprs	r16,zero,184
 4002e00:	04002e38 	rdprs	r16,zero,184
 4002e04:	04003a70 	cmpltui	r16,zero,233
 4002e08:	04002e38 	rdprs	r16,zero,184
 4002e0c:	04003a40 	call	4003a4 <OSCtxSw_SWITCH_PC+0x400364>
 4002e10:	04003550 	cmplti	r16,zero,213
 4002e14:	04003aa0 	cmpeqi	r16,zero,234
 4002e18:	04003a8c 	andi	r16,zero,234
 4002e1c:	04002e38 	rdprs	r16,zero,184
 4002e20:	04003d1c 	xori	r16,zero,244
 4002e24:	04002e38 	rdprs	r16,zero,184
 4002e28:	0400359c 	xori	r16,zero,214
 4002e2c:	04002e38 	rdprs	r16,zero,184
 4002e30:	04002e38 	rdprs	r16,zero,184
 4002e34:	04003c14 	movui	r16,240
 4002e38:	d9014d17 	ldw	r4,1332(sp)
 4002e3c:	2000ce26 	beq	r4,zero,4003178 <___vfprintf_internal_r+0x6d4>
 4002e40:	01400044 	movi	r5,1
 4002e44:	d9800f04 	addi	r6,sp,60
 4002e48:	d9c14015 	stw	r7,1280(sp)
 4002e4c:	d9414515 	stw	r5,1300(sp)
 4002e50:	d9814115 	stw	r6,1284(sp)
 4002e54:	280f883a 	mov	r7,r5
 4002e58:	d9000f05 	stb	r4,60(sp)
 4002e5c:	d8000405 	stb	zero,16(sp)
 4002e60:	d8014615 	stw	zero,1304(sp)
 4002e64:	d8c14c17 	ldw	r3,1328(sp)
 4002e68:	1880008c 	andi	r2,r3,2
 4002e6c:	1005003a 	cmpeq	r2,r2,zero
 4002e70:	d8815015 	stw	r2,1344(sp)
 4002e74:	1000031e 	bne	r2,zero,4002e84 <___vfprintf_internal_r+0x3e0>
 4002e78:	d9014517 	ldw	r4,1300(sp)
 4002e7c:	21000084 	addi	r4,r4,2
 4002e80:	d9014515 	stw	r4,1300(sp)
 4002e84:	d9414c17 	ldw	r5,1328(sp)
 4002e88:	2940210c 	andi	r5,r5,132
 4002e8c:	d9414e15 	stw	r5,1336(sp)
 4002e90:	28002d1e 	bne	r5,zero,4002f48 <___vfprintf_internal_r+0x4a4>
 4002e94:	d9814a17 	ldw	r6,1320(sp)
 4002e98:	d8814517 	ldw	r2,1300(sp)
 4002e9c:	30a1c83a 	sub	r16,r6,r2
 4002ea0:	0400290e 	bge	zero,r16,4002f48 <___vfprintf_internal_r+0x4a4>
 4002ea4:	00800404 	movi	r2,16
 4002ea8:	1404580e 	bge	r2,r16,400400c <___vfprintf_internal_r+0x1568>
 4002eac:	dc800e17 	ldw	r18,56(sp)
 4002eb0:	dc400d17 	ldw	r17,52(sp)
 4002eb4:	1027883a 	mov	r19,r2
 4002eb8:	07010174 	movhi	fp,1029
 4002ebc:	e7217484 	addi	fp,fp,-31278
 4002ec0:	050001c4 	movi	r20,7
 4002ec4:	00000306 	br	4002ed4 <___vfprintf_internal_r+0x430>
 4002ec8:	843ffc04 	addi	r16,r16,-16
 4002ecc:	ad400204 	addi	r21,r21,8
 4002ed0:	9c00130e 	bge	r19,r16,4002f20 <___vfprintf_internal_r+0x47c>
 4002ed4:	94800404 	addi	r18,r18,16
 4002ed8:	8c400044 	addi	r17,r17,1
 4002edc:	af000015 	stw	fp,0(r21)
 4002ee0:	acc00115 	stw	r19,4(r21)
 4002ee4:	dc800e15 	stw	r18,56(sp)
 4002ee8:	dc400d15 	stw	r17,52(sp)
 4002eec:	a47ff60e 	bge	r20,r17,4002ec8 <___vfprintf_internal_r+0x424>
 4002ef0:	d9014f17 	ldw	r4,1340(sp)
 4002ef4:	b00b883a 	mov	r5,r22
 4002ef8:	d9800c04 	addi	r6,sp,48
 4002efc:	d9c15115 	stw	r7,1348(sp)
 4002f00:	4002a4c0 	call	4002a4c <__sprint_r>
 4002f04:	d9c15117 	ldw	r7,1348(sp)
 4002f08:	10009e1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4002f0c:	843ffc04 	addi	r16,r16,-16
 4002f10:	dc800e17 	ldw	r18,56(sp)
 4002f14:	dc400d17 	ldw	r17,52(sp)
 4002f18:	dd401904 	addi	r21,sp,100
 4002f1c:	9c3fed16 	blt	r19,r16,4002ed4 <___vfprintf_internal_r+0x430>
 4002f20:	9425883a 	add	r18,r18,r16
 4002f24:	8c400044 	addi	r17,r17,1
 4002f28:	008001c4 	movi	r2,7
 4002f2c:	af000015 	stw	fp,0(r21)
 4002f30:	ac000115 	stw	r16,4(r21)
 4002f34:	dc800e15 	stw	r18,56(sp)
 4002f38:	dc400d15 	stw	r17,52(sp)
 4002f3c:	1441f516 	blt	r2,r17,4003714 <___vfprintf_internal_r+0xc70>
 4002f40:	ad400204 	addi	r21,r21,8
 4002f44:	00000206 	br	4002f50 <___vfprintf_internal_r+0x4ac>
 4002f48:	dc800e17 	ldw	r18,56(sp)
 4002f4c:	dc400d17 	ldw	r17,52(sp)
 4002f50:	d8800407 	ldb	r2,16(sp)
 4002f54:	10000b26 	beq	r2,zero,4002f84 <___vfprintf_internal_r+0x4e0>
 4002f58:	00800044 	movi	r2,1
 4002f5c:	94800044 	addi	r18,r18,1
 4002f60:	8c400044 	addi	r17,r17,1
 4002f64:	a8800115 	stw	r2,4(r21)
 4002f68:	d8c00404 	addi	r3,sp,16
 4002f6c:	008001c4 	movi	r2,7
 4002f70:	a8c00015 	stw	r3,0(r21)
 4002f74:	dc800e15 	stw	r18,56(sp)
 4002f78:	dc400d15 	stw	r17,52(sp)
 4002f7c:	1441da16 	blt	r2,r17,40036e8 <___vfprintf_internal_r+0xc44>
 4002f80:	ad400204 	addi	r21,r21,8
 4002f84:	d9015017 	ldw	r4,1344(sp)
 4002f88:	20000b1e 	bne	r4,zero,4002fb8 <___vfprintf_internal_r+0x514>
 4002f8c:	d8800444 	addi	r2,sp,17
 4002f90:	94800084 	addi	r18,r18,2
 4002f94:	8c400044 	addi	r17,r17,1
 4002f98:	a8800015 	stw	r2,0(r21)
 4002f9c:	00c00084 	movi	r3,2
 4002fa0:	008001c4 	movi	r2,7
 4002fa4:	a8c00115 	stw	r3,4(r21)
 4002fa8:	dc800e15 	stw	r18,56(sp)
 4002fac:	dc400d15 	stw	r17,52(sp)
 4002fb0:	1441c216 	blt	r2,r17,40036bc <___vfprintf_internal_r+0xc18>
 4002fb4:	ad400204 	addi	r21,r21,8
 4002fb8:	d9414e17 	ldw	r5,1336(sp)
 4002fbc:	00802004 	movi	r2,128
 4002fc0:	2880b126 	beq	r5,r2,4003288 <___vfprintf_internal_r+0x7e4>
 4002fc4:	d8c14617 	ldw	r3,1304(sp)
 4002fc8:	19e1c83a 	sub	r16,r3,r7
 4002fcc:	0400260e 	bge	zero,r16,4003068 <___vfprintf_internal_r+0x5c4>
 4002fd0:	00800404 	movi	r2,16
 4002fd4:	1403c90e 	bge	r2,r16,4003efc <___vfprintf_internal_r+0x1458>
 4002fd8:	1027883a 	mov	r19,r2
 4002fdc:	07010174 	movhi	fp,1029
 4002fe0:	e7217084 	addi	fp,fp,-31294
 4002fe4:	050001c4 	movi	r20,7
 4002fe8:	00000306 	br	4002ff8 <___vfprintf_internal_r+0x554>
 4002fec:	843ffc04 	addi	r16,r16,-16
 4002ff0:	ad400204 	addi	r21,r21,8
 4002ff4:	9c00130e 	bge	r19,r16,4003044 <___vfprintf_internal_r+0x5a0>
 4002ff8:	94800404 	addi	r18,r18,16
 4002ffc:	8c400044 	addi	r17,r17,1
 4003000:	af000015 	stw	fp,0(r21)
 4003004:	acc00115 	stw	r19,4(r21)
 4003008:	dc800e15 	stw	r18,56(sp)
 400300c:	dc400d15 	stw	r17,52(sp)
 4003010:	a47ff60e 	bge	r20,r17,4002fec <___vfprintf_internal_r+0x548>
 4003014:	d9014f17 	ldw	r4,1340(sp)
 4003018:	b00b883a 	mov	r5,r22
 400301c:	d9800c04 	addi	r6,sp,48
 4003020:	d9c15115 	stw	r7,1348(sp)
 4003024:	4002a4c0 	call	4002a4c <__sprint_r>
 4003028:	d9c15117 	ldw	r7,1348(sp)
 400302c:	1000551e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003030:	843ffc04 	addi	r16,r16,-16
 4003034:	dc800e17 	ldw	r18,56(sp)
 4003038:	dc400d17 	ldw	r17,52(sp)
 400303c:	dd401904 	addi	r21,sp,100
 4003040:	9c3fed16 	blt	r19,r16,4002ff8 <___vfprintf_internal_r+0x554>
 4003044:	9425883a 	add	r18,r18,r16
 4003048:	8c400044 	addi	r17,r17,1
 400304c:	008001c4 	movi	r2,7
 4003050:	af000015 	stw	fp,0(r21)
 4003054:	ac000115 	stw	r16,4(r21)
 4003058:	dc800e15 	stw	r18,56(sp)
 400305c:	dc400d15 	stw	r17,52(sp)
 4003060:	14418216 	blt	r2,r17,400366c <___vfprintf_internal_r+0xbc8>
 4003064:	ad400204 	addi	r21,r21,8
 4003068:	d9014c17 	ldw	r4,1328(sp)
 400306c:	2080400c 	andi	r2,r4,256
 4003070:	10004a1e 	bne	r2,zero,400319c <___vfprintf_internal_r+0x6f8>
 4003074:	d9414117 	ldw	r5,1284(sp)
 4003078:	91e5883a 	add	r18,r18,r7
 400307c:	8c400044 	addi	r17,r17,1
 4003080:	008001c4 	movi	r2,7
 4003084:	a9400015 	stw	r5,0(r21)
 4003088:	a9c00115 	stw	r7,4(r21)
 400308c:	dc800e15 	stw	r18,56(sp)
 4003090:	dc400d15 	stw	r17,52(sp)
 4003094:	14416716 	blt	r2,r17,4003634 <___vfprintf_internal_r+0xb90>
 4003098:	a8c00204 	addi	r3,r21,8
 400309c:	d9814c17 	ldw	r6,1328(sp)
 40030a0:	3080010c 	andi	r2,r6,4
 40030a4:	10002826 	beq	r2,zero,4003148 <___vfprintf_internal_r+0x6a4>
 40030a8:	d8814a17 	ldw	r2,1320(sp)
 40030ac:	d9014517 	ldw	r4,1300(sp)
 40030b0:	1121c83a 	sub	r16,r2,r4
 40030b4:	0400240e 	bge	zero,r16,4003148 <___vfprintf_internal_r+0x6a4>
 40030b8:	00800404 	movi	r2,16
 40030bc:	14044f0e 	bge	r2,r16,40041fc <___vfprintf_internal_r+0x1758>
 40030c0:	dc400d17 	ldw	r17,52(sp)
 40030c4:	1027883a 	mov	r19,r2
 40030c8:	07010174 	movhi	fp,1029
 40030cc:	e7217484 	addi	fp,fp,-31278
 40030d0:	050001c4 	movi	r20,7
 40030d4:	00000306 	br	40030e4 <___vfprintf_internal_r+0x640>
 40030d8:	843ffc04 	addi	r16,r16,-16
 40030dc:	18c00204 	addi	r3,r3,8
 40030e0:	9c00110e 	bge	r19,r16,4003128 <___vfprintf_internal_r+0x684>
 40030e4:	94800404 	addi	r18,r18,16
 40030e8:	8c400044 	addi	r17,r17,1
 40030ec:	1f000015 	stw	fp,0(r3)
 40030f0:	1cc00115 	stw	r19,4(r3)
 40030f4:	dc800e15 	stw	r18,56(sp)
 40030f8:	dc400d15 	stw	r17,52(sp)
 40030fc:	a47ff60e 	bge	r20,r17,40030d8 <___vfprintf_internal_r+0x634>
 4003100:	d9014f17 	ldw	r4,1340(sp)
 4003104:	b00b883a 	mov	r5,r22
 4003108:	d9800c04 	addi	r6,sp,48
 400310c:	4002a4c0 	call	4002a4c <__sprint_r>
 4003110:	10001c1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003114:	843ffc04 	addi	r16,r16,-16
 4003118:	dc800e17 	ldw	r18,56(sp)
 400311c:	dc400d17 	ldw	r17,52(sp)
 4003120:	d8c01904 	addi	r3,sp,100
 4003124:	9c3fef16 	blt	r19,r16,40030e4 <___vfprintf_internal_r+0x640>
 4003128:	9425883a 	add	r18,r18,r16
 400312c:	8c400044 	addi	r17,r17,1
 4003130:	008001c4 	movi	r2,7
 4003134:	1f000015 	stw	fp,0(r3)
 4003138:	1c000115 	stw	r16,4(r3)
 400313c:	dc800e15 	stw	r18,56(sp)
 4003140:	dc400d15 	stw	r17,52(sp)
 4003144:	1440cb16 	blt	r2,r17,4003474 <___vfprintf_internal_r+0x9d0>
 4003148:	d8814a17 	ldw	r2,1320(sp)
 400314c:	d9414517 	ldw	r5,1300(sp)
 4003150:	1140010e 	bge	r2,r5,4003158 <___vfprintf_internal_r+0x6b4>
 4003154:	2805883a 	mov	r2,r5
 4003158:	d9814b17 	ldw	r6,1324(sp)
 400315c:	308d883a 	add	r6,r6,r2
 4003160:	d9814b15 	stw	r6,1324(sp)
 4003164:	90013b1e 	bne	r18,zero,4003654 <___vfprintf_internal_r+0xbb0>
 4003168:	d9c14017 	ldw	r7,1280(sp)
 400316c:	dd401904 	addi	r21,sp,100
 4003170:	d8000d15 	stw	zero,52(sp)
 4003174:	003ea706 	br	4002c14 <___vfprintf_internal_r+0x170>
 4003178:	d8800e17 	ldw	r2,56(sp)
 400317c:	10053f1e 	bne	r2,zero,400467c <___vfprintf_internal_r+0x1bd8>
 4003180:	d8000d15 	stw	zero,52(sp)
 4003184:	b080030b 	ldhu	r2,12(r22)
 4003188:	1080100c 	andi	r2,r2,64
 400318c:	103e8726 	beq	r2,zero,4002bac <___vfprintf_internal_r+0x108>
 4003190:	00bfffc4 	movi	r2,-1
 4003194:	d8814b15 	stw	r2,1324(sp)
 4003198:	003e8406 	br	4002bac <___vfprintf_internal_r+0x108>
 400319c:	d9814d17 	ldw	r6,1332(sp)
 40031a0:	00801944 	movi	r2,101
 40031a4:	11806e16 	blt	r2,r6,4003360 <___vfprintf_internal_r+0x8bc>
 40031a8:	d9414717 	ldw	r5,1308(sp)
 40031ac:	00c00044 	movi	r3,1
 40031b0:	1943430e 	bge	r3,r5,4003ec0 <___vfprintf_internal_r+0x141c>
 40031b4:	d8814117 	ldw	r2,1284(sp)
 40031b8:	94800044 	addi	r18,r18,1
 40031bc:	8c400044 	addi	r17,r17,1
 40031c0:	a8800015 	stw	r2,0(r21)
 40031c4:	008001c4 	movi	r2,7
 40031c8:	a8c00115 	stw	r3,4(r21)
 40031cc:	dc800e15 	stw	r18,56(sp)
 40031d0:	dc400d15 	stw	r17,52(sp)
 40031d4:	1441ca16 	blt	r2,r17,4003900 <___vfprintf_internal_r+0xe5c>
 40031d8:	a8c00204 	addi	r3,r21,8
 40031dc:	d9014917 	ldw	r4,1316(sp)
 40031e0:	00800044 	movi	r2,1
 40031e4:	94800044 	addi	r18,r18,1
 40031e8:	8c400044 	addi	r17,r17,1
 40031ec:	18800115 	stw	r2,4(r3)
 40031f0:	008001c4 	movi	r2,7
 40031f4:	19000015 	stw	r4,0(r3)
 40031f8:	dc800e15 	stw	r18,56(sp)
 40031fc:	dc400d15 	stw	r17,52(sp)
 4003200:	1441b616 	blt	r2,r17,40038dc <___vfprintf_internal_r+0xe38>
 4003204:	1cc00204 	addi	r19,r3,8
 4003208:	d9014217 	ldw	r4,1288(sp)
 400320c:	d9414317 	ldw	r5,1292(sp)
 4003210:	000d883a 	mov	r6,zero
 4003214:	000f883a 	mov	r7,zero
 4003218:	400b5600 	call	400b560 <__nedf2>
 400321c:	10017426 	beq	r2,zero,40037f0 <___vfprintf_internal_r+0xd4c>
 4003220:	d9414717 	ldw	r5,1308(sp)
 4003224:	d9814117 	ldw	r6,1284(sp)
 4003228:	8c400044 	addi	r17,r17,1
 400322c:	2c85883a 	add	r2,r5,r18
 4003230:	14bfffc4 	addi	r18,r2,-1
 4003234:	28bfffc4 	addi	r2,r5,-1
 4003238:	30c00044 	addi	r3,r6,1
 400323c:	98800115 	stw	r2,4(r19)
 4003240:	008001c4 	movi	r2,7
 4003244:	98c00015 	stw	r3,0(r19)
 4003248:	dc800e15 	stw	r18,56(sp)
 400324c:	dc400d15 	stw	r17,52(sp)
 4003250:	14418e16 	blt	r2,r17,400388c <___vfprintf_internal_r+0xde8>
 4003254:	9cc00204 	addi	r19,r19,8
 4003258:	d9414817 	ldw	r5,1312(sp)
 400325c:	d8800804 	addi	r2,sp,32
 4003260:	8c400044 	addi	r17,r17,1
 4003264:	9165883a 	add	r18,r18,r5
 4003268:	98800015 	stw	r2,0(r19)
 400326c:	008001c4 	movi	r2,7
 4003270:	99400115 	stw	r5,4(r19)
 4003274:	dc800e15 	stw	r18,56(sp)
 4003278:	dc400d15 	stw	r17,52(sp)
 400327c:	1440ed16 	blt	r2,r17,4003634 <___vfprintf_internal_r+0xb90>
 4003280:	98c00204 	addi	r3,r19,8
 4003284:	003f8506 	br	400309c <___vfprintf_internal_r+0x5f8>
 4003288:	d9814a17 	ldw	r6,1320(sp)
 400328c:	d8814517 	ldw	r2,1300(sp)
 4003290:	30a1c83a 	sub	r16,r6,r2
 4003294:	043f4b0e 	bge	zero,r16,4002fc4 <___vfprintf_internal_r+0x520>
 4003298:	00800404 	movi	r2,16
 400329c:	1404340e 	bge	r2,r16,4004370 <___vfprintf_internal_r+0x18cc>
 40032a0:	1027883a 	mov	r19,r2
 40032a4:	07010174 	movhi	fp,1029
 40032a8:	e7217084 	addi	fp,fp,-31294
 40032ac:	050001c4 	movi	r20,7
 40032b0:	00000306 	br	40032c0 <___vfprintf_internal_r+0x81c>
 40032b4:	843ffc04 	addi	r16,r16,-16
 40032b8:	ad400204 	addi	r21,r21,8
 40032bc:	9c00130e 	bge	r19,r16,400330c <___vfprintf_internal_r+0x868>
 40032c0:	94800404 	addi	r18,r18,16
 40032c4:	8c400044 	addi	r17,r17,1
 40032c8:	af000015 	stw	fp,0(r21)
 40032cc:	acc00115 	stw	r19,4(r21)
 40032d0:	dc800e15 	stw	r18,56(sp)
 40032d4:	dc400d15 	stw	r17,52(sp)
 40032d8:	a47ff60e 	bge	r20,r17,40032b4 <___vfprintf_internal_r+0x810>
 40032dc:	d9014f17 	ldw	r4,1340(sp)
 40032e0:	b00b883a 	mov	r5,r22
 40032e4:	d9800c04 	addi	r6,sp,48
 40032e8:	d9c15115 	stw	r7,1348(sp)
 40032ec:	4002a4c0 	call	4002a4c <__sprint_r>
 40032f0:	d9c15117 	ldw	r7,1348(sp)
 40032f4:	103fa31e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40032f8:	843ffc04 	addi	r16,r16,-16
 40032fc:	dc800e17 	ldw	r18,56(sp)
 4003300:	dc400d17 	ldw	r17,52(sp)
 4003304:	dd401904 	addi	r21,sp,100
 4003308:	9c3fed16 	blt	r19,r16,40032c0 <___vfprintf_internal_r+0x81c>
 400330c:	9425883a 	add	r18,r18,r16
 4003310:	8c400044 	addi	r17,r17,1
 4003314:	008001c4 	movi	r2,7
 4003318:	af000015 	stw	fp,0(r21)
 400331c:	ac000115 	stw	r16,4(r21)
 4003320:	dc800e15 	stw	r18,56(sp)
 4003324:	dc400d15 	stw	r17,52(sp)
 4003328:	14416116 	blt	r2,r17,40038b0 <___vfprintf_internal_r+0xe0c>
 400332c:	ad400204 	addi	r21,r21,8
 4003330:	003f2406 	br	4002fc4 <___vfprintf_internal_r+0x520>
 4003334:	d9014f17 	ldw	r4,1340(sp)
 4003338:	40065140 	call	4006514 <__sinit>
 400333c:	d9c15117 	ldw	r7,1348(sp)
 4003340:	003def06 	br	4002b00 <___vfprintf_internal_r+0x5c>
 4003344:	d9014f17 	ldw	r4,1340(sp)
 4003348:	b00b883a 	mov	r5,r22
 400334c:	d9c15115 	stw	r7,1348(sp)
 4003350:	40049740 	call	4004974 <__swsetup_r>
 4003354:	d9c15117 	ldw	r7,1348(sp)
 4003358:	103dee26 	beq	r2,zero,4002b14 <___vfprintf_internal_r+0x70>
 400335c:	003f8c06 	br	4003190 <___vfprintf_internal_r+0x6ec>
 4003360:	d9014217 	ldw	r4,1288(sp)
 4003364:	d9414317 	ldw	r5,1292(sp)
 4003368:	000d883a 	mov	r6,zero
 400336c:	000f883a 	mov	r7,zero
 4003370:	400b4d80 	call	400b4d8 <__eqdf2>
 4003374:	1000f21e 	bne	r2,zero,4003740 <___vfprintf_internal_r+0xc9c>
 4003378:	00810174 	movhi	r2,1029
 400337c:	10a17004 	addi	r2,r2,-31296
 4003380:	94800044 	addi	r18,r18,1
 4003384:	8c400044 	addi	r17,r17,1
 4003388:	a8800015 	stw	r2,0(r21)
 400338c:	00c00044 	movi	r3,1
 4003390:	008001c4 	movi	r2,7
 4003394:	a8c00115 	stw	r3,4(r21)
 4003398:	dc800e15 	stw	r18,56(sp)
 400339c:	dc400d15 	stw	r17,52(sp)
 40033a0:	1442fa16 	blt	r2,r17,4003f8c <___vfprintf_internal_r+0x14e8>
 40033a4:	a8c00204 	addi	r3,r21,8
 40033a8:	d8800517 	ldw	r2,20(sp)
 40033ac:	d9014717 	ldw	r4,1308(sp)
 40033b0:	11015c0e 	bge	r2,r4,4003924 <___vfprintf_internal_r+0xe80>
 40033b4:	dc400d17 	ldw	r17,52(sp)
 40033b8:	d9814917 	ldw	r6,1316(sp)
 40033bc:	00800044 	movi	r2,1
 40033c0:	94800044 	addi	r18,r18,1
 40033c4:	8c400044 	addi	r17,r17,1
 40033c8:	18800115 	stw	r2,4(r3)
 40033cc:	008001c4 	movi	r2,7
 40033d0:	19800015 	stw	r6,0(r3)
 40033d4:	dc800e15 	stw	r18,56(sp)
 40033d8:	dc400d15 	stw	r17,52(sp)
 40033dc:	14431016 	blt	r2,r17,4004020 <___vfprintf_internal_r+0x157c>
 40033e0:	18c00204 	addi	r3,r3,8
 40033e4:	d8814717 	ldw	r2,1308(sp)
 40033e8:	143fffc4 	addi	r16,r2,-1
 40033ec:	043f2b0e 	bge	zero,r16,400309c <___vfprintf_internal_r+0x5f8>
 40033f0:	00800404 	movi	r2,16
 40033f4:	1402a20e 	bge	r2,r16,4003e80 <___vfprintf_internal_r+0x13dc>
 40033f8:	dc400d17 	ldw	r17,52(sp)
 40033fc:	1027883a 	mov	r19,r2
 4003400:	07010174 	movhi	fp,1029
 4003404:	e7217084 	addi	fp,fp,-31294
 4003408:	050001c4 	movi	r20,7
 400340c:	00000306 	br	400341c <___vfprintf_internal_r+0x978>
 4003410:	18c00204 	addi	r3,r3,8
 4003414:	843ffc04 	addi	r16,r16,-16
 4003418:	9c029c0e 	bge	r19,r16,4003e8c <___vfprintf_internal_r+0x13e8>
 400341c:	94800404 	addi	r18,r18,16
 4003420:	8c400044 	addi	r17,r17,1
 4003424:	1f000015 	stw	fp,0(r3)
 4003428:	1cc00115 	stw	r19,4(r3)
 400342c:	dc800e15 	stw	r18,56(sp)
 4003430:	dc400d15 	stw	r17,52(sp)
 4003434:	a47ff60e 	bge	r20,r17,4003410 <___vfprintf_internal_r+0x96c>
 4003438:	d9014f17 	ldw	r4,1340(sp)
 400343c:	b00b883a 	mov	r5,r22
 4003440:	d9800c04 	addi	r6,sp,48
 4003444:	4002a4c0 	call	4002a4c <__sprint_r>
 4003448:	103f4e1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 400344c:	dc800e17 	ldw	r18,56(sp)
 4003450:	dc400d17 	ldw	r17,52(sp)
 4003454:	d8c01904 	addi	r3,sp,100
 4003458:	003fee06 	br	4003414 <___vfprintf_internal_r+0x970>
 400345c:	d8802c0b 	ldhu	r2,176(sp)
 4003460:	00ffffc4 	movi	r3,-1
 4003464:	d8c14b15 	stw	r3,1324(sp)
 4003468:	1080100c 	andi	r2,r2,64
 400346c:	103dcc1e 	bne	r2,zero,4002ba0 <___vfprintf_internal_r+0xfc>
 4003470:	003dce06 	br	4002bac <___vfprintf_internal_r+0x108>
 4003474:	d9014f17 	ldw	r4,1340(sp)
 4003478:	b00b883a 	mov	r5,r22
 400347c:	d9800c04 	addi	r6,sp,48
 4003480:	4002a4c0 	call	4002a4c <__sprint_r>
 4003484:	103f3f1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003488:	dc800e17 	ldw	r18,56(sp)
 400348c:	003f2e06 	br	4003148 <___vfprintf_internal_r+0x6a4>
 4003490:	d9414c17 	ldw	r5,1328(sp)
 4003494:	29400414 	ori	r5,r5,16
 4003498:	d9414c15 	stw	r5,1328(sp)
 400349c:	d9814c17 	ldw	r6,1328(sp)
 40034a0:	3080080c 	andi	r2,r6,32
 40034a4:	10014f1e 	bne	r2,zero,40039e4 <___vfprintf_internal_r+0xf40>
 40034a8:	d8c14c17 	ldw	r3,1328(sp)
 40034ac:	1880040c 	andi	r2,r3,16
 40034b0:	1002ea1e 	bne	r2,zero,400405c <___vfprintf_internal_r+0x15b8>
 40034b4:	d9014c17 	ldw	r4,1328(sp)
 40034b8:	2080100c 	andi	r2,r4,64
 40034bc:	1002e726 	beq	r2,zero,400405c <___vfprintf_internal_r+0x15b8>
 40034c0:	3880000f 	ldh	r2,0(r7)
 40034c4:	39c00104 	addi	r7,r7,4
 40034c8:	d9c14015 	stw	r7,1280(sp)
 40034cc:	1023d7fa 	srai	r17,r2,31
 40034d0:	1021883a 	mov	r16,r2
 40034d4:	88037216 	blt	r17,zero,40042a0 <___vfprintf_internal_r+0x17fc>
 40034d8:	01000044 	movi	r4,1
 40034dc:	98000416 	blt	r19,zero,40034f0 <___vfprintf_internal_r+0xa4c>
 40034e0:	d8c14c17 	ldw	r3,1328(sp)
 40034e4:	00bfdfc4 	movi	r2,-129
 40034e8:	1886703a 	and	r3,r3,r2
 40034ec:	d8c14c15 	stw	r3,1328(sp)
 40034f0:	8444b03a 	or	r2,r16,r17
 40034f4:	1002261e 	bne	r2,zero,4003d90 <___vfprintf_internal_r+0x12ec>
 40034f8:	9802251e 	bne	r19,zero,4003d90 <___vfprintf_internal_r+0x12ec>
 40034fc:	20803fcc 	andi	r2,r4,255
 4003500:	10029b26 	beq	r2,zero,4003f70 <___vfprintf_internal_r+0x14cc>
 4003504:	d8c01904 	addi	r3,sp,100
 4003508:	dd000f04 	addi	r20,sp,60
 400350c:	d8c14115 	stw	r3,1284(sp)
 4003510:	d8c14117 	ldw	r3,1284(sp)
 4003514:	dcc14515 	stw	r19,1300(sp)
 4003518:	a0c5c83a 	sub	r2,r20,r3
 400351c:	11c00a04 	addi	r7,r2,40
 4003520:	99c0010e 	bge	r19,r7,4003528 <___vfprintf_internal_r+0xa84>
 4003524:	d9c14515 	stw	r7,1300(sp)
 4003528:	dcc14615 	stw	r19,1304(sp)
 400352c:	d8800407 	ldb	r2,16(sp)
 4003530:	103e4c26 	beq	r2,zero,4002e64 <___vfprintf_internal_r+0x3c0>
 4003534:	d8814517 	ldw	r2,1300(sp)
 4003538:	10800044 	addi	r2,r2,1
 400353c:	d8814515 	stw	r2,1300(sp)
 4003540:	003e4806 	br	4002e64 <___vfprintf_internal_r+0x3c0>
 4003544:	d9814c17 	ldw	r6,1328(sp)
 4003548:	31800414 	ori	r6,r6,16
 400354c:	d9814c15 	stw	r6,1328(sp)
 4003550:	d8c14c17 	ldw	r3,1328(sp)
 4003554:	1880080c 	andi	r2,r3,32
 4003558:	1001271e 	bne	r2,zero,40039f8 <___vfprintf_internal_r+0xf54>
 400355c:	d9414c17 	ldw	r5,1328(sp)
 4003560:	2880040c 	andi	r2,r5,16
 4003564:	1002b61e 	bne	r2,zero,4004040 <___vfprintf_internal_r+0x159c>
 4003568:	d9814c17 	ldw	r6,1328(sp)
 400356c:	3080100c 	andi	r2,r6,64
 4003570:	1002b326 	beq	r2,zero,4004040 <___vfprintf_internal_r+0x159c>
 4003574:	3c00000b 	ldhu	r16,0(r7)
 4003578:	0009883a 	mov	r4,zero
 400357c:	39c00104 	addi	r7,r7,4
 4003580:	0023883a 	mov	r17,zero
 4003584:	d9c14015 	stw	r7,1280(sp)
 4003588:	d8000405 	stb	zero,16(sp)
 400358c:	003fd306 	br	40034dc <___vfprintf_internal_r+0xa38>
 4003590:	d9014c17 	ldw	r4,1328(sp)
 4003594:	21000414 	ori	r4,r4,16
 4003598:	d9014c15 	stw	r4,1328(sp)
 400359c:	d9414c17 	ldw	r5,1328(sp)
 40035a0:	2880080c 	andi	r2,r5,32
 40035a4:	1001081e 	bne	r2,zero,40039c8 <___vfprintf_internal_r+0xf24>
 40035a8:	d8c14c17 	ldw	r3,1328(sp)
 40035ac:	1880040c 	andi	r2,r3,16
 40035b0:	1002b01e 	bne	r2,zero,4004074 <___vfprintf_internal_r+0x15d0>
 40035b4:	d9014c17 	ldw	r4,1328(sp)
 40035b8:	2080100c 	andi	r2,r4,64
 40035bc:	1002ad26 	beq	r2,zero,4004074 <___vfprintf_internal_r+0x15d0>
 40035c0:	3c00000b 	ldhu	r16,0(r7)
 40035c4:	01000044 	movi	r4,1
 40035c8:	39c00104 	addi	r7,r7,4
 40035cc:	0023883a 	mov	r17,zero
 40035d0:	d9c14015 	stw	r7,1280(sp)
 40035d4:	d8000405 	stb	zero,16(sp)
 40035d8:	003fc006 	br	40034dc <___vfprintf_internal_r+0xa38>
 40035dc:	d9014f17 	ldw	r4,1340(sp)
 40035e0:	b00b883a 	mov	r5,r22
 40035e4:	d9800c04 	addi	r6,sp,48
 40035e8:	4002a4c0 	call	4002a4c <__sprint_r>
 40035ec:	103ee51e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40035f0:	dc800e17 	ldw	r18,56(sp)
 40035f4:	d8c01904 	addi	r3,sp,100
 40035f8:	d9814c17 	ldw	r6,1328(sp)
 40035fc:	3080004c 	andi	r2,r6,1
 4003600:	1005003a 	cmpeq	r2,r2,zero
 4003604:	103ea51e 	bne	r2,zero,400309c <___vfprintf_internal_r+0x5f8>
 4003608:	00800044 	movi	r2,1
 400360c:	dc400d17 	ldw	r17,52(sp)
 4003610:	18800115 	stw	r2,4(r3)
 4003614:	d8814917 	ldw	r2,1316(sp)
 4003618:	94800044 	addi	r18,r18,1
 400361c:	8c400044 	addi	r17,r17,1
 4003620:	18800015 	stw	r2,0(r3)
 4003624:	008001c4 	movi	r2,7
 4003628:	dc800e15 	stw	r18,56(sp)
 400362c:	dc400d15 	stw	r17,52(sp)
 4003630:	14421e0e 	bge	r2,r17,4003eac <___vfprintf_internal_r+0x1408>
 4003634:	d9014f17 	ldw	r4,1340(sp)
 4003638:	b00b883a 	mov	r5,r22
 400363c:	d9800c04 	addi	r6,sp,48
 4003640:	4002a4c0 	call	4002a4c <__sprint_r>
 4003644:	103ecf1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003648:	dc800e17 	ldw	r18,56(sp)
 400364c:	d8c01904 	addi	r3,sp,100
 4003650:	003e9206 	br	400309c <___vfprintf_internal_r+0x5f8>
 4003654:	d9014f17 	ldw	r4,1340(sp)
 4003658:	b00b883a 	mov	r5,r22
 400365c:	d9800c04 	addi	r6,sp,48
 4003660:	4002a4c0 	call	4002a4c <__sprint_r>
 4003664:	103ec026 	beq	r2,zero,4003168 <___vfprintf_internal_r+0x6c4>
 4003668:	003ec606 	br	4003184 <___vfprintf_internal_r+0x6e0>
 400366c:	d9014f17 	ldw	r4,1340(sp)
 4003670:	b00b883a 	mov	r5,r22
 4003674:	d9800c04 	addi	r6,sp,48
 4003678:	d9c15115 	stw	r7,1348(sp)
 400367c:	4002a4c0 	call	4002a4c <__sprint_r>
 4003680:	d9c15117 	ldw	r7,1348(sp)
 4003684:	103ebf1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003688:	dc800e17 	ldw	r18,56(sp)
 400368c:	dc400d17 	ldw	r17,52(sp)
 4003690:	dd401904 	addi	r21,sp,100
 4003694:	003e7406 	br	4003068 <___vfprintf_internal_r+0x5c4>
 4003698:	d9014f17 	ldw	r4,1340(sp)
 400369c:	b00b883a 	mov	r5,r22
 40036a0:	d9800c04 	addi	r6,sp,48
 40036a4:	d9c15115 	stw	r7,1348(sp)
 40036a8:	4002a4c0 	call	4002a4c <__sprint_r>
 40036ac:	d9c15117 	ldw	r7,1348(sp)
 40036b0:	103eb41e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40036b4:	dd401904 	addi	r21,sp,100
 40036b8:	003d6d06 	br	4002c70 <___vfprintf_internal_r+0x1cc>
 40036bc:	d9014f17 	ldw	r4,1340(sp)
 40036c0:	b00b883a 	mov	r5,r22
 40036c4:	d9800c04 	addi	r6,sp,48
 40036c8:	d9c15115 	stw	r7,1348(sp)
 40036cc:	4002a4c0 	call	4002a4c <__sprint_r>
 40036d0:	d9c15117 	ldw	r7,1348(sp)
 40036d4:	103eab1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40036d8:	dc800e17 	ldw	r18,56(sp)
 40036dc:	dc400d17 	ldw	r17,52(sp)
 40036e0:	dd401904 	addi	r21,sp,100
 40036e4:	003e3406 	br	4002fb8 <___vfprintf_internal_r+0x514>
 40036e8:	d9014f17 	ldw	r4,1340(sp)
 40036ec:	b00b883a 	mov	r5,r22
 40036f0:	d9800c04 	addi	r6,sp,48
 40036f4:	d9c15115 	stw	r7,1348(sp)
 40036f8:	4002a4c0 	call	4002a4c <__sprint_r>
 40036fc:	d9c15117 	ldw	r7,1348(sp)
 4003700:	103ea01e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003704:	dc800e17 	ldw	r18,56(sp)
 4003708:	dc400d17 	ldw	r17,52(sp)
 400370c:	dd401904 	addi	r21,sp,100
 4003710:	003e1c06 	br	4002f84 <___vfprintf_internal_r+0x4e0>
 4003714:	d9014f17 	ldw	r4,1340(sp)
 4003718:	b00b883a 	mov	r5,r22
 400371c:	d9800c04 	addi	r6,sp,48
 4003720:	d9c15115 	stw	r7,1348(sp)
 4003724:	4002a4c0 	call	4002a4c <__sprint_r>
 4003728:	d9c15117 	ldw	r7,1348(sp)
 400372c:	103e951e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003730:	dc800e17 	ldw	r18,56(sp)
 4003734:	dc400d17 	ldw	r17,52(sp)
 4003738:	dd401904 	addi	r21,sp,100
 400373c:	003e0406 	br	4002f50 <___vfprintf_internal_r+0x4ac>
 4003740:	d9000517 	ldw	r4,20(sp)
 4003744:	0102520e 	bge	zero,r4,4004090 <___vfprintf_internal_r+0x15ec>
 4003748:	d9814717 	ldw	r6,1308(sp)
 400374c:	21807a16 	blt	r4,r6,4003938 <___vfprintf_internal_r+0xe94>
 4003750:	d8814117 	ldw	r2,1284(sp)
 4003754:	91a5883a 	add	r18,r18,r6
 4003758:	8c400044 	addi	r17,r17,1
 400375c:	a8800015 	stw	r2,0(r21)
 4003760:	008001c4 	movi	r2,7
 4003764:	a9800115 	stw	r6,4(r21)
 4003768:	dc800e15 	stw	r18,56(sp)
 400376c:	dc400d15 	stw	r17,52(sp)
 4003770:	1442f616 	blt	r2,r17,400434c <___vfprintf_internal_r+0x18a8>
 4003774:	a8c00204 	addi	r3,r21,8
 4003778:	d9414717 	ldw	r5,1308(sp)
 400377c:	2161c83a 	sub	r16,r4,r5
 4003780:	043f9d0e 	bge	zero,r16,40035f8 <___vfprintf_internal_r+0xb54>
 4003784:	00800404 	movi	r2,16
 4003788:	1402130e 	bge	r2,r16,4003fd8 <___vfprintf_internal_r+0x1534>
 400378c:	dc400d17 	ldw	r17,52(sp)
 4003790:	1027883a 	mov	r19,r2
 4003794:	07010174 	movhi	fp,1029
 4003798:	e7217084 	addi	fp,fp,-31294
 400379c:	050001c4 	movi	r20,7
 40037a0:	00000306 	br	40037b0 <___vfprintf_internal_r+0xd0c>
 40037a4:	18c00204 	addi	r3,r3,8
 40037a8:	843ffc04 	addi	r16,r16,-16
 40037ac:	9c020d0e 	bge	r19,r16,4003fe4 <___vfprintf_internal_r+0x1540>
 40037b0:	94800404 	addi	r18,r18,16
 40037b4:	8c400044 	addi	r17,r17,1
 40037b8:	1f000015 	stw	fp,0(r3)
 40037bc:	1cc00115 	stw	r19,4(r3)
 40037c0:	dc800e15 	stw	r18,56(sp)
 40037c4:	dc400d15 	stw	r17,52(sp)
 40037c8:	a47ff60e 	bge	r20,r17,40037a4 <___vfprintf_internal_r+0xd00>
 40037cc:	d9014f17 	ldw	r4,1340(sp)
 40037d0:	b00b883a 	mov	r5,r22
 40037d4:	d9800c04 	addi	r6,sp,48
 40037d8:	4002a4c0 	call	4002a4c <__sprint_r>
 40037dc:	103e691e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40037e0:	dc800e17 	ldw	r18,56(sp)
 40037e4:	dc400d17 	ldw	r17,52(sp)
 40037e8:	d8c01904 	addi	r3,sp,100
 40037ec:	003fee06 	br	40037a8 <___vfprintf_internal_r+0xd04>
 40037f0:	d8814717 	ldw	r2,1308(sp)
 40037f4:	143fffc4 	addi	r16,r2,-1
 40037f8:	043e970e 	bge	zero,r16,4003258 <___vfprintf_internal_r+0x7b4>
 40037fc:	00800404 	movi	r2,16
 4003800:	1400180e 	bge	r2,r16,4003864 <___vfprintf_internal_r+0xdc0>
 4003804:	1029883a 	mov	r20,r2
 4003808:	07010174 	movhi	fp,1029
 400380c:	e7217084 	addi	fp,fp,-31294
 4003810:	054001c4 	movi	r21,7
 4003814:	00000306 	br	4003824 <___vfprintf_internal_r+0xd80>
 4003818:	9cc00204 	addi	r19,r19,8
 400381c:	843ffc04 	addi	r16,r16,-16
 4003820:	a400120e 	bge	r20,r16,400386c <___vfprintf_internal_r+0xdc8>
 4003824:	94800404 	addi	r18,r18,16
 4003828:	8c400044 	addi	r17,r17,1
 400382c:	9f000015 	stw	fp,0(r19)
 4003830:	9d000115 	stw	r20,4(r19)
 4003834:	dc800e15 	stw	r18,56(sp)
 4003838:	dc400d15 	stw	r17,52(sp)
 400383c:	ac7ff60e 	bge	r21,r17,4003818 <___vfprintf_internal_r+0xd74>
 4003840:	d9014f17 	ldw	r4,1340(sp)
 4003844:	b00b883a 	mov	r5,r22
 4003848:	d9800c04 	addi	r6,sp,48
 400384c:	4002a4c0 	call	4002a4c <__sprint_r>
 4003850:	103e4c1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003854:	dc800e17 	ldw	r18,56(sp)
 4003858:	dc400d17 	ldw	r17,52(sp)
 400385c:	dcc01904 	addi	r19,sp,100
 4003860:	003fee06 	br	400381c <___vfprintf_internal_r+0xd78>
 4003864:	07010174 	movhi	fp,1029
 4003868:	e7217084 	addi	fp,fp,-31294
 400386c:	9425883a 	add	r18,r18,r16
 4003870:	8c400044 	addi	r17,r17,1
 4003874:	008001c4 	movi	r2,7
 4003878:	9f000015 	stw	fp,0(r19)
 400387c:	9c000115 	stw	r16,4(r19)
 4003880:	dc800e15 	stw	r18,56(sp)
 4003884:	dc400d15 	stw	r17,52(sp)
 4003888:	147e720e 	bge	r2,r17,4003254 <___vfprintf_internal_r+0x7b0>
 400388c:	d9014f17 	ldw	r4,1340(sp)
 4003890:	b00b883a 	mov	r5,r22
 4003894:	d9800c04 	addi	r6,sp,48
 4003898:	4002a4c0 	call	4002a4c <__sprint_r>
 400389c:	103e391e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40038a0:	dc800e17 	ldw	r18,56(sp)
 40038a4:	dc400d17 	ldw	r17,52(sp)
 40038a8:	dcc01904 	addi	r19,sp,100
 40038ac:	003e6a06 	br	4003258 <___vfprintf_internal_r+0x7b4>
 40038b0:	d9014f17 	ldw	r4,1340(sp)
 40038b4:	b00b883a 	mov	r5,r22
 40038b8:	d9800c04 	addi	r6,sp,48
 40038bc:	d9c15115 	stw	r7,1348(sp)
 40038c0:	4002a4c0 	call	4002a4c <__sprint_r>
 40038c4:	d9c15117 	ldw	r7,1348(sp)
 40038c8:	103e2e1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40038cc:	dc800e17 	ldw	r18,56(sp)
 40038d0:	dc400d17 	ldw	r17,52(sp)
 40038d4:	dd401904 	addi	r21,sp,100
 40038d8:	003dba06 	br	4002fc4 <___vfprintf_internal_r+0x520>
 40038dc:	d9014f17 	ldw	r4,1340(sp)
 40038e0:	b00b883a 	mov	r5,r22
 40038e4:	d9800c04 	addi	r6,sp,48
 40038e8:	4002a4c0 	call	4002a4c <__sprint_r>
 40038ec:	103e251e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40038f0:	dc800e17 	ldw	r18,56(sp)
 40038f4:	dc400d17 	ldw	r17,52(sp)
 40038f8:	dcc01904 	addi	r19,sp,100
 40038fc:	003e4206 	br	4003208 <___vfprintf_internal_r+0x764>
 4003900:	d9014f17 	ldw	r4,1340(sp)
 4003904:	b00b883a 	mov	r5,r22
 4003908:	d9800c04 	addi	r6,sp,48
 400390c:	4002a4c0 	call	4002a4c <__sprint_r>
 4003910:	103e1c1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003914:	dc800e17 	ldw	r18,56(sp)
 4003918:	dc400d17 	ldw	r17,52(sp)
 400391c:	d8c01904 	addi	r3,sp,100
 4003920:	003e2e06 	br	40031dc <___vfprintf_internal_r+0x738>
 4003924:	d9414c17 	ldw	r5,1328(sp)
 4003928:	2880004c 	andi	r2,r5,1
 400392c:	1005003a 	cmpeq	r2,r2,zero
 4003930:	103dda1e 	bne	r2,zero,400309c <___vfprintf_internal_r+0x5f8>
 4003934:	003e9f06 	br	40033b4 <___vfprintf_internal_r+0x910>
 4003938:	d8c14117 	ldw	r3,1284(sp)
 400393c:	9125883a 	add	r18,r18,r4
 4003940:	8c400044 	addi	r17,r17,1
 4003944:	008001c4 	movi	r2,7
 4003948:	a8c00015 	stw	r3,0(r21)
 400394c:	a9000115 	stw	r4,4(r21)
 4003950:	dc800e15 	stw	r18,56(sp)
 4003954:	dc400d15 	stw	r17,52(sp)
 4003958:	14426616 	blt	r2,r17,40042f4 <___vfprintf_internal_r+0x1850>
 400395c:	a8c00204 	addi	r3,r21,8
 4003960:	d9414917 	ldw	r5,1316(sp)
 4003964:	00800044 	movi	r2,1
 4003968:	94800044 	addi	r18,r18,1
 400396c:	8c400044 	addi	r17,r17,1
 4003970:	18800115 	stw	r2,4(r3)
 4003974:	008001c4 	movi	r2,7
 4003978:	19400015 	stw	r5,0(r3)
 400397c:	dc800e15 	stw	r18,56(sp)
 4003980:	dc400d15 	stw	r17,52(sp)
 4003984:	2021883a 	mov	r16,r4
 4003988:	14425016 	blt	r2,r17,40042cc <___vfprintf_internal_r+0x1828>
 400398c:	19400204 	addi	r5,r3,8
 4003990:	d9814717 	ldw	r6,1308(sp)
 4003994:	8c400044 	addi	r17,r17,1
 4003998:	dc400d15 	stw	r17,52(sp)
 400399c:	3107c83a 	sub	r3,r6,r4
 40039a0:	d9014117 	ldw	r4,1284(sp)
 40039a4:	90e5883a 	add	r18,r18,r3
 40039a8:	28c00115 	stw	r3,4(r5)
 40039ac:	8105883a 	add	r2,r16,r4
 40039b0:	28800015 	stw	r2,0(r5)
 40039b4:	008001c4 	movi	r2,7
 40039b8:	dc800e15 	stw	r18,56(sp)
 40039bc:	147f1d16 	blt	r2,r17,4003634 <___vfprintf_internal_r+0xb90>
 40039c0:	28c00204 	addi	r3,r5,8
 40039c4:	003db506 	br	400309c <___vfprintf_internal_r+0x5f8>
 40039c8:	3c000017 	ldw	r16,0(r7)
 40039cc:	3c400117 	ldw	r17,4(r7)
 40039d0:	39800204 	addi	r6,r7,8
 40039d4:	01000044 	movi	r4,1
 40039d8:	d9814015 	stw	r6,1280(sp)
 40039dc:	d8000405 	stb	zero,16(sp)
 40039e0:	003ebe06 	br	40034dc <___vfprintf_internal_r+0xa38>
 40039e4:	3c000017 	ldw	r16,0(r7)
 40039e8:	3c400117 	ldw	r17,4(r7)
 40039ec:	38800204 	addi	r2,r7,8
 40039f0:	d8814015 	stw	r2,1280(sp)
 40039f4:	003eb706 	br	40034d4 <___vfprintf_internal_r+0xa30>
 40039f8:	3c000017 	ldw	r16,0(r7)
 40039fc:	3c400117 	ldw	r17,4(r7)
 4003a00:	39000204 	addi	r4,r7,8
 4003a04:	d9014015 	stw	r4,1280(sp)
 4003a08:	0009883a 	mov	r4,zero
 4003a0c:	d8000405 	stb	zero,16(sp)
 4003a10:	003eb206 	br	40034dc <___vfprintf_internal_r+0xa38>
 4003a14:	38c00017 	ldw	r3,0(r7)
 4003a18:	39c00104 	addi	r7,r7,4
 4003a1c:	d8c14a15 	stw	r3,1320(sp)
 4003a20:	1800d10e 	bge	r3,zero,4003d68 <___vfprintf_internal_r+0x12c4>
 4003a24:	00c7c83a 	sub	r3,zero,r3
 4003a28:	d8c14a15 	stw	r3,1320(sp)
 4003a2c:	d9014c17 	ldw	r4,1328(sp)
 4003a30:	b8c00007 	ldb	r3,0(r23)
 4003a34:	21000114 	ori	r4,r4,4
 4003a38:	d9014c15 	stw	r4,1328(sp)
 4003a3c:	003c9806 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003a40:	d9814c17 	ldw	r6,1328(sp)
 4003a44:	3080080c 	andi	r2,r6,32
 4003a48:	1001f026 	beq	r2,zero,400420c <___vfprintf_internal_r+0x1768>
 4003a4c:	d9014b17 	ldw	r4,1324(sp)
 4003a50:	38800017 	ldw	r2,0(r7)
 4003a54:	39c00104 	addi	r7,r7,4
 4003a58:	d9c14015 	stw	r7,1280(sp)
 4003a5c:	2007d7fa 	srai	r3,r4,31
 4003a60:	d9c14017 	ldw	r7,1280(sp)
 4003a64:	11000015 	stw	r4,0(r2)
 4003a68:	10c00115 	stw	r3,4(r2)
 4003a6c:	003c6906 	br	4002c14 <___vfprintf_internal_r+0x170>
 4003a70:	b8c00007 	ldb	r3,0(r23)
 4003a74:	00801b04 	movi	r2,108
 4003a78:	18824f26 	beq	r3,r2,40043b8 <___vfprintf_internal_r+0x1914>
 4003a7c:	d9414c17 	ldw	r5,1328(sp)
 4003a80:	29400414 	ori	r5,r5,16
 4003a84:	d9414c15 	stw	r5,1328(sp)
 4003a88:	003c8506 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003a8c:	d9814c17 	ldw	r6,1328(sp)
 4003a90:	b8c00007 	ldb	r3,0(r23)
 4003a94:	31800814 	ori	r6,r6,32
 4003a98:	d9814c15 	stw	r6,1328(sp)
 4003a9c:	003c8006 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003aa0:	d8814c17 	ldw	r2,1328(sp)
 4003aa4:	3c000017 	ldw	r16,0(r7)
 4003aa8:	00c01e04 	movi	r3,120
 4003aac:	10800094 	ori	r2,r2,2
 4003ab0:	d8814c15 	stw	r2,1328(sp)
 4003ab4:	39c00104 	addi	r7,r7,4
 4003ab8:	01410174 	movhi	r5,1029
 4003abc:	29615904 	addi	r5,r5,-31388
 4003ac0:	00800c04 	movi	r2,48
 4003ac4:	0023883a 	mov	r17,zero
 4003ac8:	01000084 	movi	r4,2
 4003acc:	d9c14015 	stw	r7,1280(sp)
 4003ad0:	d8c14d15 	stw	r3,1332(sp)
 4003ad4:	d9414415 	stw	r5,1296(sp)
 4003ad8:	d8800445 	stb	r2,17(sp)
 4003adc:	d8c00485 	stb	r3,18(sp)
 4003ae0:	d8000405 	stb	zero,16(sp)
 4003ae4:	003e7d06 	br	40034dc <___vfprintf_internal_r+0xa38>
 4003ae8:	d8814c17 	ldw	r2,1328(sp)
 4003aec:	b8c00007 	ldb	r3,0(r23)
 4003af0:	10801014 	ori	r2,r2,64
 4003af4:	d8814c15 	stw	r2,1328(sp)
 4003af8:	003c6906 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003afc:	d9414c17 	ldw	r5,1328(sp)
 4003b00:	2880020c 	andi	r2,r5,8
 4003b04:	1001df26 	beq	r2,zero,4004284 <___vfprintf_internal_r+0x17e0>
 4003b08:	39800017 	ldw	r6,0(r7)
 4003b0c:	38800204 	addi	r2,r7,8
 4003b10:	d8814015 	stw	r2,1280(sp)
 4003b14:	d9814215 	stw	r6,1288(sp)
 4003b18:	39c00117 	ldw	r7,4(r7)
 4003b1c:	d9c14315 	stw	r7,1292(sp)
 4003b20:	d9014217 	ldw	r4,1288(sp)
 4003b24:	d9414317 	ldw	r5,1292(sp)
 4003b28:	40095640 	call	4009564 <__isinfd>
 4003b2c:	10021726 	beq	r2,zero,400438c <___vfprintf_internal_r+0x18e8>
 4003b30:	d9014217 	ldw	r4,1288(sp)
 4003b34:	d9414317 	ldw	r5,1292(sp)
 4003b38:	000d883a 	mov	r6,zero
 4003b3c:	000f883a 	mov	r7,zero
 4003b40:	400b6f80 	call	400b6f8 <__ltdf2>
 4003b44:	1002ca16 	blt	r2,zero,4004670 <___vfprintf_internal_r+0x1bcc>
 4003b48:	d9414d17 	ldw	r5,1332(sp)
 4003b4c:	008011c4 	movi	r2,71
 4003b50:	11420a16 	blt	r2,r5,400437c <___vfprintf_internal_r+0x18d8>
 4003b54:	01810174 	movhi	r6,1029
 4003b58:	31a15e04 	addi	r6,r6,-31368
 4003b5c:	d9814115 	stw	r6,1284(sp)
 4003b60:	d9014c17 	ldw	r4,1328(sp)
 4003b64:	00c000c4 	movi	r3,3
 4003b68:	00bfdfc4 	movi	r2,-129
 4003b6c:	2088703a 	and	r4,r4,r2
 4003b70:	180f883a 	mov	r7,r3
 4003b74:	d8c14515 	stw	r3,1300(sp)
 4003b78:	d9014c15 	stw	r4,1328(sp)
 4003b7c:	d8014615 	stw	zero,1304(sp)
 4003b80:	003e6a06 	br	400352c <___vfprintf_internal_r+0xa88>
 4003b84:	38800017 	ldw	r2,0(r7)
 4003b88:	00c00044 	movi	r3,1
 4003b8c:	39c00104 	addi	r7,r7,4
 4003b90:	d9c14015 	stw	r7,1280(sp)
 4003b94:	d9000f04 	addi	r4,sp,60
 4003b98:	180f883a 	mov	r7,r3
 4003b9c:	d8c14515 	stw	r3,1300(sp)
 4003ba0:	d9014115 	stw	r4,1284(sp)
 4003ba4:	d8800f05 	stb	r2,60(sp)
 4003ba8:	d8000405 	stb	zero,16(sp)
 4003bac:	003cac06 	br	4002e60 <___vfprintf_internal_r+0x3bc>
 4003bb0:	01410174 	movhi	r5,1029
 4003bb4:	29616404 	addi	r5,r5,-31344
 4003bb8:	d9414415 	stw	r5,1296(sp)
 4003bbc:	d9814c17 	ldw	r6,1328(sp)
 4003bc0:	3080080c 	andi	r2,r6,32
 4003bc4:	1000f926 	beq	r2,zero,4003fac <___vfprintf_internal_r+0x1508>
 4003bc8:	3c000017 	ldw	r16,0(r7)
 4003bcc:	3c400117 	ldw	r17,4(r7)
 4003bd0:	38800204 	addi	r2,r7,8
 4003bd4:	d8814015 	stw	r2,1280(sp)
 4003bd8:	d9414c17 	ldw	r5,1328(sp)
 4003bdc:	2880004c 	andi	r2,r5,1
 4003be0:	1005003a 	cmpeq	r2,r2,zero
 4003be4:	1000b31e 	bne	r2,zero,4003eb4 <___vfprintf_internal_r+0x1410>
 4003be8:	8444b03a 	or	r2,r16,r17
 4003bec:	1000b126 	beq	r2,zero,4003eb4 <___vfprintf_internal_r+0x1410>
 4003bf0:	d9814d17 	ldw	r6,1332(sp)
 4003bf4:	29400094 	ori	r5,r5,2
 4003bf8:	00800c04 	movi	r2,48
 4003bfc:	01000084 	movi	r4,2
 4003c00:	d9414c15 	stw	r5,1328(sp)
 4003c04:	d8800445 	stb	r2,17(sp)
 4003c08:	d9800485 	stb	r6,18(sp)
 4003c0c:	d8000405 	stb	zero,16(sp)
 4003c10:	003e3206 	br	40034dc <___vfprintf_internal_r+0xa38>
 4003c14:	01810174 	movhi	r6,1029
 4003c18:	31a15904 	addi	r6,r6,-31388
 4003c1c:	d9814415 	stw	r6,1296(sp)
 4003c20:	003fe606 	br	4003bbc <___vfprintf_internal_r+0x1118>
 4003c24:	00800ac4 	movi	r2,43
 4003c28:	d8800405 	stb	r2,16(sp)
 4003c2c:	b8c00007 	ldb	r3,0(r23)
 4003c30:	003c1b06 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003c34:	d8814c17 	ldw	r2,1328(sp)
 4003c38:	b8c00007 	ldb	r3,0(r23)
 4003c3c:	10800054 	ori	r2,r2,1
 4003c40:	d8814c15 	stw	r2,1328(sp)
 4003c44:	003c1606 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003c48:	d8800407 	ldb	r2,16(sp)
 4003c4c:	1000461e 	bne	r2,zero,4003d68 <___vfprintf_internal_r+0x12c4>
 4003c50:	00800804 	movi	r2,32
 4003c54:	d8800405 	stb	r2,16(sp)
 4003c58:	b8c00007 	ldb	r3,0(r23)
 4003c5c:	003c1006 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003c60:	d9814c17 	ldw	r6,1328(sp)
 4003c64:	b8c00007 	ldb	r3,0(r23)
 4003c68:	31800214 	ori	r6,r6,8
 4003c6c:	d9814c15 	stw	r6,1328(sp)
 4003c70:	003c0b06 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003c74:	0007883a 	mov	r3,zero
 4003c78:	01000244 	movi	r4,9
 4003c7c:	188002a4 	muli	r2,r3,10
 4003c80:	b8c00007 	ldb	r3,0(r23)
 4003c84:	d9814d17 	ldw	r6,1332(sp)
 4003c88:	bdc00044 	addi	r23,r23,1
 4003c8c:	d8c14d15 	stw	r3,1332(sp)
 4003c90:	d9414d17 	ldw	r5,1332(sp)
 4003c94:	3085883a 	add	r2,r6,r2
 4003c98:	10fff404 	addi	r3,r2,-48
 4003c9c:	28bff404 	addi	r2,r5,-48
 4003ca0:	20bff62e 	bgeu	r4,r2,4003c7c <___vfprintf_internal_r+0x11d8>
 4003ca4:	d8c14a15 	stw	r3,1320(sp)
 4003ca8:	003bff06 	br	4002ca8 <___vfprintf_internal_r+0x204>
 4003cac:	d9414c17 	ldw	r5,1328(sp)
 4003cb0:	b8c00007 	ldb	r3,0(r23)
 4003cb4:	29402014 	ori	r5,r5,128
 4003cb8:	d9414c15 	stw	r5,1328(sp)
 4003cbc:	003bf806 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003cc0:	b8c00007 	ldb	r3,0(r23)
 4003cc4:	00800a84 	movi	r2,42
 4003cc8:	bdc00044 	addi	r23,r23,1
 4003ccc:	18831526 	beq	r3,r2,4004924 <___vfprintf_internal_r+0x1e80>
 4003cd0:	d8c14d15 	stw	r3,1332(sp)
 4003cd4:	18bff404 	addi	r2,r3,-48
 4003cd8:	00c00244 	movi	r3,9
 4003cdc:	18827836 	bltu	r3,r2,40046c0 <___vfprintf_internal_r+0x1c1c>
 4003ce0:	000d883a 	mov	r6,zero
 4003ce4:	308002a4 	muli	r2,r6,10
 4003ce8:	b9800007 	ldb	r6,0(r23)
 4003cec:	d9414d17 	ldw	r5,1332(sp)
 4003cf0:	bdc00044 	addi	r23,r23,1
 4003cf4:	d9814d15 	stw	r6,1332(sp)
 4003cf8:	d9014d17 	ldw	r4,1332(sp)
 4003cfc:	1145883a 	add	r2,r2,r5
 4003d00:	11bff404 	addi	r6,r2,-48
 4003d04:	20bff404 	addi	r2,r4,-48
 4003d08:	18bff62e 	bgeu	r3,r2,4003ce4 <___vfprintf_internal_r+0x1240>
 4003d0c:	3027883a 	mov	r19,r6
 4003d10:	303be50e 	bge	r6,zero,4002ca8 <___vfprintf_internal_r+0x204>
 4003d14:	04ffffc4 	movi	r19,-1
 4003d18:	003be306 	br	4002ca8 <___vfprintf_internal_r+0x204>
 4003d1c:	d8000405 	stb	zero,16(sp)
 4003d20:	39800017 	ldw	r6,0(r7)
 4003d24:	39c00104 	addi	r7,r7,4
 4003d28:	d9c14015 	stw	r7,1280(sp)
 4003d2c:	d9814115 	stw	r6,1284(sp)
 4003d30:	3001c926 	beq	r6,zero,4004458 <___vfprintf_internal_r+0x19b4>
 4003d34:	98000e16 	blt	r19,zero,4003d70 <___vfprintf_internal_r+0x12cc>
 4003d38:	d9014117 	ldw	r4,1284(sp)
 4003d3c:	000b883a 	mov	r5,zero
 4003d40:	980d883a 	mov	r6,r19
 4003d44:	4007cac0 	call	4007cac <memchr>
 4003d48:	10025926 	beq	r2,zero,40046b0 <___vfprintf_internal_r+0x1c0c>
 4003d4c:	d8c14117 	ldw	r3,1284(sp)
 4003d50:	10cfc83a 	sub	r7,r2,r3
 4003d54:	99c19e16 	blt	r19,r7,40043d0 <___vfprintf_internal_r+0x192c>
 4003d58:	d9c14515 	stw	r7,1300(sp)
 4003d5c:	38000916 	blt	r7,zero,4003d84 <___vfprintf_internal_r+0x12e0>
 4003d60:	d8014615 	stw	zero,1304(sp)
 4003d64:	003df106 	br	400352c <___vfprintf_internal_r+0xa88>
 4003d68:	b8c00007 	ldb	r3,0(r23)
 4003d6c:	003bcc06 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 4003d70:	d9014117 	ldw	r4,1284(sp)
 4003d74:	40029d00 	call	40029d0 <strlen>
 4003d78:	d8814515 	stw	r2,1300(sp)
 4003d7c:	100f883a 	mov	r7,r2
 4003d80:	103ff70e 	bge	r2,zero,4003d60 <___vfprintf_internal_r+0x12bc>
 4003d84:	d8014515 	stw	zero,1300(sp)
 4003d88:	d8014615 	stw	zero,1304(sp)
 4003d8c:	003de706 	br	400352c <___vfprintf_internal_r+0xa88>
 4003d90:	20c03fcc 	andi	r3,r4,255
 4003d94:	00800044 	movi	r2,1
 4003d98:	18802d26 	beq	r3,r2,4003e50 <___vfprintf_internal_r+0x13ac>
 4003d9c:	18800e36 	bltu	r3,r2,4003dd8 <___vfprintf_internal_r+0x1334>
 4003da0:	00800084 	movi	r2,2
 4003da4:	1880fa26 	beq	r3,r2,4004190 <___vfprintf_internal_r+0x16ec>
 4003da8:	01010174 	movhi	r4,1029
 4003dac:	21216904 	addi	r4,r4,-31324
 4003db0:	40029d00 	call	40029d0 <strlen>
 4003db4:	100f883a 	mov	r7,r2
 4003db8:	dcc14515 	stw	r19,1300(sp)
 4003dbc:	9880010e 	bge	r19,r2,4003dc4 <___vfprintf_internal_r+0x1320>
 4003dc0:	d8814515 	stw	r2,1300(sp)
 4003dc4:	00810174 	movhi	r2,1029
 4003dc8:	10a16904 	addi	r2,r2,-31324
 4003dcc:	dcc14615 	stw	r19,1304(sp)
 4003dd0:	d8814115 	stw	r2,1284(sp)
 4003dd4:	003dd506 	br	400352c <___vfprintf_internal_r+0xa88>
 4003dd8:	d9401904 	addi	r5,sp,100
 4003ddc:	dd000f04 	addi	r20,sp,60
 4003de0:	d9414115 	stw	r5,1284(sp)
 4003de4:	880a977a 	slli	r5,r17,29
 4003de8:	d9814117 	ldw	r6,1284(sp)
 4003dec:	8004d0fa 	srli	r2,r16,3
 4003df0:	8806d0fa 	srli	r3,r17,3
 4003df4:	810001cc 	andi	r4,r16,7
 4003df8:	2884b03a 	or	r2,r5,r2
 4003dfc:	31bfffc4 	addi	r6,r6,-1
 4003e00:	21000c04 	addi	r4,r4,48
 4003e04:	d9814115 	stw	r6,1284(sp)
 4003e08:	10cab03a 	or	r5,r2,r3
 4003e0c:	31000005 	stb	r4,0(r6)
 4003e10:	1021883a 	mov	r16,r2
 4003e14:	1823883a 	mov	r17,r3
 4003e18:	283ff21e 	bne	r5,zero,4003de4 <___vfprintf_internal_r+0x1340>
 4003e1c:	d8c14c17 	ldw	r3,1328(sp)
 4003e20:	1880004c 	andi	r2,r3,1
 4003e24:	1005003a 	cmpeq	r2,r2,zero
 4003e28:	103db91e 	bne	r2,zero,4003510 <___vfprintf_internal_r+0xa6c>
 4003e2c:	20803fcc 	andi	r2,r4,255
 4003e30:	1080201c 	xori	r2,r2,128
 4003e34:	10bfe004 	addi	r2,r2,-128
 4003e38:	00c00c04 	movi	r3,48
 4003e3c:	10fdb426 	beq	r2,r3,4003510 <___vfprintf_internal_r+0xa6c>
 4003e40:	31bfffc4 	addi	r6,r6,-1
 4003e44:	d9814115 	stw	r6,1284(sp)
 4003e48:	30c00005 	stb	r3,0(r6)
 4003e4c:	003db006 	br	4003510 <___vfprintf_internal_r+0xa6c>
 4003e50:	88800068 	cmpgeui	r2,r17,1
 4003e54:	10002c1e 	bne	r2,zero,4003f08 <___vfprintf_internal_r+0x1464>
 4003e58:	8800021e 	bne	r17,zero,4003e64 <___vfprintf_internal_r+0x13c0>
 4003e5c:	00800244 	movi	r2,9
 4003e60:	14002936 	bltu	r2,r16,4003f08 <___vfprintf_internal_r+0x1464>
 4003e64:	d90018c4 	addi	r4,sp,99
 4003e68:	dd000f04 	addi	r20,sp,60
 4003e6c:	d9014115 	stw	r4,1284(sp)
 4003e70:	d9014117 	ldw	r4,1284(sp)
 4003e74:	80800c04 	addi	r2,r16,48
 4003e78:	20800005 	stb	r2,0(r4)
 4003e7c:	003da406 	br	4003510 <___vfprintf_internal_r+0xa6c>
 4003e80:	dc400d17 	ldw	r17,52(sp)
 4003e84:	07010174 	movhi	fp,1029
 4003e88:	e7217084 	addi	fp,fp,-31294
 4003e8c:	9425883a 	add	r18,r18,r16
 4003e90:	8c400044 	addi	r17,r17,1
 4003e94:	008001c4 	movi	r2,7
 4003e98:	1f000015 	stw	fp,0(r3)
 4003e9c:	1c000115 	stw	r16,4(r3)
 4003ea0:	dc800e15 	stw	r18,56(sp)
 4003ea4:	dc400d15 	stw	r17,52(sp)
 4003ea8:	147de216 	blt	r2,r17,4003634 <___vfprintf_internal_r+0xb90>
 4003eac:	18c00204 	addi	r3,r3,8
 4003eb0:	003c7a06 	br	400309c <___vfprintf_internal_r+0x5f8>
 4003eb4:	01000084 	movi	r4,2
 4003eb8:	d8000405 	stb	zero,16(sp)
 4003ebc:	003d8706 	br	40034dc <___vfprintf_internal_r+0xa38>
 4003ec0:	d9814c17 	ldw	r6,1328(sp)
 4003ec4:	30c4703a 	and	r2,r6,r3
 4003ec8:	1005003a 	cmpeq	r2,r2,zero
 4003ecc:	103cb926 	beq	r2,zero,40031b4 <___vfprintf_internal_r+0x710>
 4003ed0:	d9014117 	ldw	r4,1284(sp)
 4003ed4:	94800044 	addi	r18,r18,1
 4003ed8:	8c400044 	addi	r17,r17,1
 4003edc:	008001c4 	movi	r2,7
 4003ee0:	a9000015 	stw	r4,0(r21)
 4003ee4:	a8c00115 	stw	r3,4(r21)
 4003ee8:	dc800e15 	stw	r18,56(sp)
 4003eec:	dc400d15 	stw	r17,52(sp)
 4003ef0:	147e6616 	blt	r2,r17,400388c <___vfprintf_internal_r+0xde8>
 4003ef4:	acc00204 	addi	r19,r21,8
 4003ef8:	003cd706 	br	4003258 <___vfprintf_internal_r+0x7b4>
 4003efc:	07010174 	movhi	fp,1029
 4003f00:	e7217084 	addi	fp,fp,-31294
 4003f04:	003c4f06 	br	4003044 <___vfprintf_internal_r+0x5a0>
 4003f08:	dd000f04 	addi	r20,sp,60
 4003f0c:	dc801904 	addi	r18,sp,100
 4003f10:	8009883a 	mov	r4,r16
 4003f14:	880b883a 	mov	r5,r17
 4003f18:	01800284 	movi	r6,10
 4003f1c:	000f883a 	mov	r7,zero
 4003f20:	400a4080 	call	400a408 <__umoddi3>
 4003f24:	12000c04 	addi	r8,r2,48
 4003f28:	94bfffc4 	addi	r18,r18,-1
 4003f2c:	8009883a 	mov	r4,r16
 4003f30:	880b883a 	mov	r5,r17
 4003f34:	01800284 	movi	r6,10
 4003f38:	000f883a 	mov	r7,zero
 4003f3c:	92000005 	stb	r8,0(r18)
 4003f40:	4009e2c0 	call	4009e2c <__udivdi3>
 4003f44:	1009883a 	mov	r4,r2
 4003f48:	1021883a 	mov	r16,r2
 4003f4c:	18800068 	cmpgeui	r2,r3,1
 4003f50:	1823883a 	mov	r17,r3
 4003f54:	103fee1e 	bne	r2,zero,4003f10 <___vfprintf_internal_r+0x146c>
 4003f58:	1800021e 	bne	r3,zero,4003f64 <___vfprintf_internal_r+0x14c0>
 4003f5c:	00800244 	movi	r2,9
 4003f60:	113feb36 	bltu	r2,r4,4003f10 <___vfprintf_internal_r+0x146c>
 4003f64:	94bfffc4 	addi	r18,r18,-1
 4003f68:	dc814115 	stw	r18,1284(sp)
 4003f6c:	003fc006 	br	4003e70 <___vfprintf_internal_r+0x13cc>
 4003f70:	d9014c17 	ldw	r4,1328(sp)
 4003f74:	2080004c 	andi	r2,r4,1
 4003f78:	10009a1e 	bne	r2,zero,40041e4 <___vfprintf_internal_r+0x1740>
 4003f7c:	d9401904 	addi	r5,sp,100
 4003f80:	dd000f04 	addi	r20,sp,60
 4003f84:	d9414115 	stw	r5,1284(sp)
 4003f88:	003d6106 	br	4003510 <___vfprintf_internal_r+0xa6c>
 4003f8c:	d9014f17 	ldw	r4,1340(sp)
 4003f90:	b00b883a 	mov	r5,r22
 4003f94:	d9800c04 	addi	r6,sp,48
 4003f98:	4002a4c0 	call	4002a4c <__sprint_r>
 4003f9c:	103c791e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4003fa0:	dc800e17 	ldw	r18,56(sp)
 4003fa4:	d8c01904 	addi	r3,sp,100
 4003fa8:	003cff06 	br	40033a8 <___vfprintf_internal_r+0x904>
 4003fac:	d8c14c17 	ldw	r3,1328(sp)
 4003fb0:	1880040c 	andi	r2,r3,16
 4003fb4:	1000711e 	bne	r2,zero,400417c <___vfprintf_internal_r+0x16d8>
 4003fb8:	d9014c17 	ldw	r4,1328(sp)
 4003fbc:	2080100c 	andi	r2,r4,64
 4003fc0:	10006e26 	beq	r2,zero,400417c <___vfprintf_internal_r+0x16d8>
 4003fc4:	3c00000b 	ldhu	r16,0(r7)
 4003fc8:	0023883a 	mov	r17,zero
 4003fcc:	39c00104 	addi	r7,r7,4
 4003fd0:	d9c14015 	stw	r7,1280(sp)
 4003fd4:	003f0006 	br	4003bd8 <___vfprintf_internal_r+0x1134>
 4003fd8:	dc400d17 	ldw	r17,52(sp)
 4003fdc:	07010174 	movhi	fp,1029
 4003fe0:	e7217084 	addi	fp,fp,-31294
 4003fe4:	9425883a 	add	r18,r18,r16
 4003fe8:	8c400044 	addi	r17,r17,1
 4003fec:	008001c4 	movi	r2,7
 4003ff0:	1f000015 	stw	fp,0(r3)
 4003ff4:	1c000115 	stw	r16,4(r3)
 4003ff8:	dc800e15 	stw	r18,56(sp)
 4003ffc:	dc400d15 	stw	r17,52(sp)
 4004000:	147d7616 	blt	r2,r17,40035dc <___vfprintf_internal_r+0xb38>
 4004004:	18c00204 	addi	r3,r3,8
 4004008:	003d7b06 	br	40035f8 <___vfprintf_internal_r+0xb54>
 400400c:	dc800e17 	ldw	r18,56(sp)
 4004010:	dc400d17 	ldw	r17,52(sp)
 4004014:	07010174 	movhi	fp,1029
 4004018:	e7217484 	addi	fp,fp,-31278
 400401c:	003bc006 	br	4002f20 <___vfprintf_internal_r+0x47c>
 4004020:	d9014f17 	ldw	r4,1340(sp)
 4004024:	b00b883a 	mov	r5,r22
 4004028:	d9800c04 	addi	r6,sp,48
 400402c:	4002a4c0 	call	4002a4c <__sprint_r>
 4004030:	103c541e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4004034:	dc800e17 	ldw	r18,56(sp)
 4004038:	d8c01904 	addi	r3,sp,100
 400403c:	003ce906 	br	40033e4 <___vfprintf_internal_r+0x940>
 4004040:	3c000017 	ldw	r16,0(r7)
 4004044:	0009883a 	mov	r4,zero
 4004048:	39c00104 	addi	r7,r7,4
 400404c:	0023883a 	mov	r17,zero
 4004050:	d9c14015 	stw	r7,1280(sp)
 4004054:	d8000405 	stb	zero,16(sp)
 4004058:	003d2006 	br	40034dc <___vfprintf_internal_r+0xa38>
 400405c:	38800017 	ldw	r2,0(r7)
 4004060:	39c00104 	addi	r7,r7,4
 4004064:	d9c14015 	stw	r7,1280(sp)
 4004068:	1023d7fa 	srai	r17,r2,31
 400406c:	1021883a 	mov	r16,r2
 4004070:	003d1806 	br	40034d4 <___vfprintf_internal_r+0xa30>
 4004074:	3c000017 	ldw	r16,0(r7)
 4004078:	01000044 	movi	r4,1
 400407c:	39c00104 	addi	r7,r7,4
 4004080:	0023883a 	mov	r17,zero
 4004084:	d9c14015 	stw	r7,1280(sp)
 4004088:	d8000405 	stb	zero,16(sp)
 400408c:	003d1306 	br	40034dc <___vfprintf_internal_r+0xa38>
 4004090:	00810174 	movhi	r2,1029
 4004094:	10a17004 	addi	r2,r2,-31296
 4004098:	94800044 	addi	r18,r18,1
 400409c:	8c400044 	addi	r17,r17,1
 40040a0:	a8800015 	stw	r2,0(r21)
 40040a4:	00c00044 	movi	r3,1
 40040a8:	008001c4 	movi	r2,7
 40040ac:	a8c00115 	stw	r3,4(r21)
 40040b0:	dc800e15 	stw	r18,56(sp)
 40040b4:	dc400d15 	stw	r17,52(sp)
 40040b8:	1440ca16 	blt	r2,r17,40043e4 <___vfprintf_internal_r+0x1940>
 40040bc:	a8c00204 	addi	r3,r21,8
 40040c0:	2000061e 	bne	r4,zero,40040dc <___vfprintf_internal_r+0x1638>
 40040c4:	d9414717 	ldw	r5,1308(sp)
 40040c8:	2800041e 	bne	r5,zero,40040dc <___vfprintf_internal_r+0x1638>
 40040cc:	d9814c17 	ldw	r6,1328(sp)
 40040d0:	3080004c 	andi	r2,r6,1
 40040d4:	1005003a 	cmpeq	r2,r2,zero
 40040d8:	103bf01e 	bne	r2,zero,400309c <___vfprintf_internal_r+0x5f8>
 40040dc:	00800044 	movi	r2,1
 40040e0:	dc400d17 	ldw	r17,52(sp)
 40040e4:	18800115 	stw	r2,4(r3)
 40040e8:	d8814917 	ldw	r2,1316(sp)
 40040ec:	94800044 	addi	r18,r18,1
 40040f0:	8c400044 	addi	r17,r17,1
 40040f4:	18800015 	stw	r2,0(r3)
 40040f8:	008001c4 	movi	r2,7
 40040fc:	dc800e15 	stw	r18,56(sp)
 4004100:	dc400d15 	stw	r17,52(sp)
 4004104:	1440ca16 	blt	r2,r17,4004430 <___vfprintf_internal_r+0x198c>
 4004108:	18c00204 	addi	r3,r3,8
 400410c:	0121c83a 	sub	r16,zero,r4
 4004110:	0400500e 	bge	zero,r16,4004254 <___vfprintf_internal_r+0x17b0>
 4004114:	00800404 	movi	r2,16
 4004118:	1400800e 	bge	r2,r16,400431c <___vfprintf_internal_r+0x1878>
 400411c:	1027883a 	mov	r19,r2
 4004120:	07010174 	movhi	fp,1029
 4004124:	e7217084 	addi	fp,fp,-31294
 4004128:	050001c4 	movi	r20,7
 400412c:	00000306 	br	400413c <___vfprintf_internal_r+0x1698>
 4004130:	18c00204 	addi	r3,r3,8
 4004134:	843ffc04 	addi	r16,r16,-16
 4004138:	9c007a0e 	bge	r19,r16,4004324 <___vfprintf_internal_r+0x1880>
 400413c:	94800404 	addi	r18,r18,16
 4004140:	8c400044 	addi	r17,r17,1
 4004144:	1f000015 	stw	fp,0(r3)
 4004148:	1cc00115 	stw	r19,4(r3)
 400414c:	dc800e15 	stw	r18,56(sp)
 4004150:	dc400d15 	stw	r17,52(sp)
 4004154:	a47ff60e 	bge	r20,r17,4004130 <___vfprintf_internal_r+0x168c>
 4004158:	d9014f17 	ldw	r4,1340(sp)
 400415c:	b00b883a 	mov	r5,r22
 4004160:	d9800c04 	addi	r6,sp,48
 4004164:	4002a4c0 	call	4002a4c <__sprint_r>
 4004168:	103c061e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 400416c:	dc800e17 	ldw	r18,56(sp)
 4004170:	dc400d17 	ldw	r17,52(sp)
 4004174:	d8c01904 	addi	r3,sp,100
 4004178:	003fee06 	br	4004134 <___vfprintf_internal_r+0x1690>
 400417c:	3c000017 	ldw	r16,0(r7)
 4004180:	0023883a 	mov	r17,zero
 4004184:	39c00104 	addi	r7,r7,4
 4004188:	d9c14015 	stw	r7,1280(sp)
 400418c:	003e9206 	br	4003bd8 <___vfprintf_internal_r+0x1134>
 4004190:	d9401904 	addi	r5,sp,100
 4004194:	dd000f04 	addi	r20,sp,60
 4004198:	d9414115 	stw	r5,1284(sp)
 400419c:	d9814417 	ldw	r6,1296(sp)
 40041a0:	880a973a 	slli	r5,r17,28
 40041a4:	8004d13a 	srli	r2,r16,4
 40041a8:	810003cc 	andi	r4,r16,15
 40041ac:	3109883a 	add	r4,r6,r4
 40041b0:	2884b03a 	or	r2,r5,r2
 40041b4:	21400003 	ldbu	r5,0(r4)
 40041b8:	d9014117 	ldw	r4,1284(sp)
 40041bc:	8806d13a 	srli	r3,r17,4
 40041c0:	1021883a 	mov	r16,r2
 40041c4:	213fffc4 	addi	r4,r4,-1
 40041c8:	d9014115 	stw	r4,1284(sp)
 40041cc:	d9814117 	ldw	r6,1284(sp)
 40041d0:	10c8b03a 	or	r4,r2,r3
 40041d4:	1823883a 	mov	r17,r3
 40041d8:	31400005 	stb	r5,0(r6)
 40041dc:	203fef1e 	bne	r4,zero,400419c <___vfprintf_internal_r+0x16f8>
 40041e0:	003ccb06 	br	4003510 <___vfprintf_internal_r+0xa6c>
 40041e4:	00800c04 	movi	r2,48
 40041e8:	d98018c4 	addi	r6,sp,99
 40041ec:	dd000f04 	addi	r20,sp,60
 40041f0:	d88018c5 	stb	r2,99(sp)
 40041f4:	d9814115 	stw	r6,1284(sp)
 40041f8:	003cc506 	br	4003510 <___vfprintf_internal_r+0xa6c>
 40041fc:	dc400d17 	ldw	r17,52(sp)
 4004200:	07010174 	movhi	fp,1029
 4004204:	e7217484 	addi	fp,fp,-31278
 4004208:	003bc706 	br	4003128 <___vfprintf_internal_r+0x684>
 400420c:	d9414c17 	ldw	r5,1328(sp)
 4004210:	2880040c 	andi	r2,r5,16
 4004214:	10007c26 	beq	r2,zero,4004408 <___vfprintf_internal_r+0x1964>
 4004218:	38800017 	ldw	r2,0(r7)
 400421c:	39c00104 	addi	r7,r7,4
 4004220:	d9c14015 	stw	r7,1280(sp)
 4004224:	d9814b17 	ldw	r6,1324(sp)
 4004228:	d9c14017 	ldw	r7,1280(sp)
 400422c:	11800015 	stw	r6,0(r2)
 4004230:	003a7806 	br	4002c14 <___vfprintf_internal_r+0x170>
 4004234:	d9014f17 	ldw	r4,1340(sp)
 4004238:	b00b883a 	mov	r5,r22
 400423c:	d9800c04 	addi	r6,sp,48
 4004240:	4002a4c0 	call	4002a4c <__sprint_r>
 4004244:	103bcf1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4004248:	dc800e17 	ldw	r18,56(sp)
 400424c:	dc400d17 	ldw	r17,52(sp)
 4004250:	d8c01904 	addi	r3,sp,100
 4004254:	d9014717 	ldw	r4,1308(sp)
 4004258:	d9414117 	ldw	r5,1284(sp)
 400425c:	8c400044 	addi	r17,r17,1
 4004260:	9125883a 	add	r18,r18,r4
 4004264:	008001c4 	movi	r2,7
 4004268:	19400015 	stw	r5,0(r3)
 400426c:	19000115 	stw	r4,4(r3)
 4004270:	dc800e15 	stw	r18,56(sp)
 4004274:	dc400d15 	stw	r17,52(sp)
 4004278:	147cee16 	blt	r2,r17,4003634 <___vfprintf_internal_r+0xb90>
 400427c:	18c00204 	addi	r3,r3,8
 4004280:	003b8606 	br	400309c <___vfprintf_internal_r+0x5f8>
 4004284:	38c00017 	ldw	r3,0(r7)
 4004288:	39000204 	addi	r4,r7,8
 400428c:	d9014015 	stw	r4,1280(sp)
 4004290:	d8c14215 	stw	r3,1288(sp)
 4004294:	39c00117 	ldw	r7,4(r7)
 4004298:	d9c14315 	stw	r7,1292(sp)
 400429c:	003e2006 	br	4003b20 <___vfprintf_internal_r+0x107c>
 40042a0:	0005883a 	mov	r2,zero
 40042a4:	1409c83a 	sub	r4,r2,r16
 40042a8:	1105803a 	cmpltu	r2,r2,r4
 40042ac:	044bc83a 	sub	r5,zero,r17
 40042b0:	2885c83a 	sub	r2,r5,r2
 40042b4:	2021883a 	mov	r16,r4
 40042b8:	1023883a 	mov	r17,r2
 40042bc:	01000044 	movi	r4,1
 40042c0:	00800b44 	movi	r2,45
 40042c4:	d8800405 	stb	r2,16(sp)
 40042c8:	003c8406 	br	40034dc <___vfprintf_internal_r+0xa38>
 40042cc:	d9014f17 	ldw	r4,1340(sp)
 40042d0:	b00b883a 	mov	r5,r22
 40042d4:	d9800c04 	addi	r6,sp,48
 40042d8:	4002a4c0 	call	4002a4c <__sprint_r>
 40042dc:	103ba91e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40042e0:	dc800e17 	ldw	r18,56(sp)
 40042e4:	dc400d17 	ldw	r17,52(sp)
 40042e8:	d9000517 	ldw	r4,20(sp)
 40042ec:	d9401904 	addi	r5,sp,100
 40042f0:	003da706 	br	4003990 <___vfprintf_internal_r+0xeec>
 40042f4:	d9014f17 	ldw	r4,1340(sp)
 40042f8:	b00b883a 	mov	r5,r22
 40042fc:	d9800c04 	addi	r6,sp,48
 4004300:	4002a4c0 	call	4002a4c <__sprint_r>
 4004304:	103b9f1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4004308:	dc800e17 	ldw	r18,56(sp)
 400430c:	dc400d17 	ldw	r17,52(sp)
 4004310:	d9000517 	ldw	r4,20(sp)
 4004314:	d8c01904 	addi	r3,sp,100
 4004318:	003d9106 	br	4003960 <___vfprintf_internal_r+0xebc>
 400431c:	07010174 	movhi	fp,1029
 4004320:	e7217084 	addi	fp,fp,-31294
 4004324:	9425883a 	add	r18,r18,r16
 4004328:	8c400044 	addi	r17,r17,1
 400432c:	008001c4 	movi	r2,7
 4004330:	1f000015 	stw	fp,0(r3)
 4004334:	1c000115 	stw	r16,4(r3)
 4004338:	dc800e15 	stw	r18,56(sp)
 400433c:	dc400d15 	stw	r17,52(sp)
 4004340:	147fbc16 	blt	r2,r17,4004234 <___vfprintf_internal_r+0x1790>
 4004344:	18c00204 	addi	r3,r3,8
 4004348:	003fc206 	br	4004254 <___vfprintf_internal_r+0x17b0>
 400434c:	d9014f17 	ldw	r4,1340(sp)
 4004350:	b00b883a 	mov	r5,r22
 4004354:	d9800c04 	addi	r6,sp,48
 4004358:	4002a4c0 	call	4002a4c <__sprint_r>
 400435c:	103b891e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4004360:	dc800e17 	ldw	r18,56(sp)
 4004364:	d9000517 	ldw	r4,20(sp)
 4004368:	d8c01904 	addi	r3,sp,100
 400436c:	003d0206 	br	4003778 <___vfprintf_internal_r+0xcd4>
 4004370:	07010174 	movhi	fp,1029
 4004374:	e7217084 	addi	fp,fp,-31294
 4004378:	003be406 	br	400330c <___vfprintf_internal_r+0x868>
 400437c:	00810174 	movhi	r2,1029
 4004380:	10a15f04 	addi	r2,r2,-31364
 4004384:	d8814115 	stw	r2,1284(sp)
 4004388:	003df506 	br	4003b60 <___vfprintf_internal_r+0x10bc>
 400438c:	d9014217 	ldw	r4,1288(sp)
 4004390:	d9414317 	ldw	r5,1292(sp)
 4004394:	40095a40 	call	40095a4 <__isnand>
 4004398:	10003926 	beq	r2,zero,4004480 <___vfprintf_internal_r+0x19dc>
 400439c:	d9414d17 	ldw	r5,1332(sp)
 40043a0:	008011c4 	movi	r2,71
 40043a4:	1140ce16 	blt	r2,r5,40046e0 <___vfprintf_internal_r+0x1c3c>
 40043a8:	01810174 	movhi	r6,1029
 40043ac:	31a16004 	addi	r6,r6,-31360
 40043b0:	d9814115 	stw	r6,1284(sp)
 40043b4:	003dea06 	br	4003b60 <___vfprintf_internal_r+0x10bc>
 40043b8:	d9014c17 	ldw	r4,1328(sp)
 40043bc:	bdc00044 	addi	r23,r23,1
 40043c0:	b8c00007 	ldb	r3,0(r23)
 40043c4:	21000814 	ori	r4,r4,32
 40043c8:	d9014c15 	stw	r4,1328(sp)
 40043cc:	003a3406 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 40043d0:	dcc14515 	stw	r19,1300(sp)
 40043d4:	98011016 	blt	r19,zero,4004818 <___vfprintf_internal_r+0x1d74>
 40043d8:	980f883a 	mov	r7,r19
 40043dc:	d8014615 	stw	zero,1304(sp)
 40043e0:	003c5206 	br	400352c <___vfprintf_internal_r+0xa88>
 40043e4:	d9014f17 	ldw	r4,1340(sp)
 40043e8:	b00b883a 	mov	r5,r22
 40043ec:	d9800c04 	addi	r6,sp,48
 40043f0:	4002a4c0 	call	4002a4c <__sprint_r>
 40043f4:	103b631e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 40043f8:	dc800e17 	ldw	r18,56(sp)
 40043fc:	d9000517 	ldw	r4,20(sp)
 4004400:	d8c01904 	addi	r3,sp,100
 4004404:	003f2e06 	br	40040c0 <___vfprintf_internal_r+0x161c>
 4004408:	d8c14c17 	ldw	r3,1328(sp)
 400440c:	1880100c 	andi	r2,r3,64
 4004410:	1000a026 	beq	r2,zero,4004694 <___vfprintf_internal_r+0x1bf0>
 4004414:	38800017 	ldw	r2,0(r7)
 4004418:	39c00104 	addi	r7,r7,4
 400441c:	d9c14015 	stw	r7,1280(sp)
 4004420:	d9014b17 	ldw	r4,1324(sp)
 4004424:	d9c14017 	ldw	r7,1280(sp)
 4004428:	1100000d 	sth	r4,0(r2)
 400442c:	0039f906 	br	4002c14 <___vfprintf_internal_r+0x170>
 4004430:	d9014f17 	ldw	r4,1340(sp)
 4004434:	b00b883a 	mov	r5,r22
 4004438:	d9800c04 	addi	r6,sp,48
 400443c:	4002a4c0 	call	4002a4c <__sprint_r>
 4004440:	103b501e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4004444:	dc800e17 	ldw	r18,56(sp)
 4004448:	dc400d17 	ldw	r17,52(sp)
 400444c:	d9000517 	ldw	r4,20(sp)
 4004450:	d8c01904 	addi	r3,sp,100
 4004454:	003f2d06 	br	400410c <___vfprintf_internal_r+0x1668>
 4004458:	00800184 	movi	r2,6
 400445c:	14c09a36 	bltu	r2,r19,40046c8 <___vfprintf_internal_r+0x1c24>
 4004460:	dcc14515 	stw	r19,1300(sp)
 4004464:	9800010e 	bge	r19,zero,400446c <___vfprintf_internal_r+0x19c8>
 4004468:	d8014515 	stw	zero,1300(sp)
 400446c:	00810174 	movhi	r2,1029
 4004470:	10a16204 	addi	r2,r2,-31352
 4004474:	980f883a 	mov	r7,r19
 4004478:	d8814115 	stw	r2,1284(sp)
 400447c:	003a7806 	br	4002e60 <___vfprintf_internal_r+0x3bc>
 4004480:	00bfffc4 	movi	r2,-1
 4004484:	9880e226 	beq	r19,r2,4004810 <___vfprintf_internal_r+0x1d6c>
 4004488:	d9414d17 	ldw	r5,1332(sp)
 400448c:	008019c4 	movi	r2,103
 4004490:	2880dc26 	beq	r5,r2,4004804 <___vfprintf_internal_r+0x1d60>
 4004494:	008011c4 	movi	r2,71
 4004498:	2880da26 	beq	r5,r2,4004804 <___vfprintf_internal_r+0x1d60>
 400449c:	d9414c17 	ldw	r5,1328(sp)
 40044a0:	d9014317 	ldw	r4,1292(sp)
 40044a4:	d9814217 	ldw	r6,1288(sp)
 40044a8:	29404014 	ori	r5,r5,256
 40044ac:	d9414c15 	stw	r5,1328(sp)
 40044b0:	2000cc16 	blt	r4,zero,40047e4 <___vfprintf_internal_r+0x1d40>
 40044b4:	3021883a 	mov	r16,r6
 40044b8:	2023883a 	mov	r17,r4
 40044bc:	0039883a 	mov	fp,zero
 40044c0:	d9414d17 	ldw	r5,1332(sp)
 40044c4:	00801984 	movi	r2,102
 40044c8:	2880b726 	beq	r5,r2,40047a8 <___vfprintf_internal_r+0x1d04>
 40044cc:	00801184 	movi	r2,70
 40044d0:	2880b526 	beq	r5,r2,40047a8 <___vfprintf_internal_r+0x1d04>
 40044d4:	00801944 	movi	r2,101
 40044d8:	2880c826 	beq	r5,r2,40047fc <___vfprintf_internal_r+0x1d58>
 40044dc:	00801144 	movi	r2,69
 40044e0:	2880c626 	beq	r5,r2,40047fc <___vfprintf_internal_r+0x1d58>
 40044e4:	9829883a 	mov	r20,r19
 40044e8:	d9014f17 	ldw	r4,1340(sp)
 40044ec:	d8800504 	addi	r2,sp,20
 40044f0:	880d883a 	mov	r6,r17
 40044f4:	d8800115 	stw	r2,4(sp)
 40044f8:	d8c00604 	addi	r3,sp,24
 40044fc:	d8800704 	addi	r2,sp,28
 4004500:	800b883a 	mov	r5,r16
 4004504:	01c00084 	movi	r7,2
 4004508:	d8c00215 	stw	r3,8(sp)
 400450c:	d8800315 	stw	r2,12(sp)
 4004510:	dd000015 	stw	r20,0(sp)
 4004514:	4004cc80 	call	4004cc8 <_dtoa_r>
 4004518:	d9814d17 	ldw	r6,1332(sp)
 400451c:	d8814115 	stw	r2,1284(sp)
 4004520:	008019c4 	movi	r2,103
 4004524:	30809526 	beq	r6,r2,400477c <___vfprintf_internal_r+0x1cd8>
 4004528:	d8c14d17 	ldw	r3,1332(sp)
 400452c:	008011c4 	movi	r2,71
 4004530:	18809226 	beq	r3,r2,400477c <___vfprintf_internal_r+0x1cd8>
 4004534:	d9414117 	ldw	r5,1284(sp)
 4004538:	d9814d17 	ldw	r6,1332(sp)
 400453c:	00801984 	movi	r2,102
 4004540:	2d25883a 	add	r18,r5,r20
 4004544:	30808626 	beq	r6,r2,4004760 <___vfprintf_internal_r+0x1cbc>
 4004548:	00801184 	movi	r2,70
 400454c:	30808426 	beq	r6,r2,4004760 <___vfprintf_internal_r+0x1cbc>
 4004550:	000d883a 	mov	r6,zero
 4004554:	000f883a 	mov	r7,zero
 4004558:	880b883a 	mov	r5,r17
 400455c:	8009883a 	mov	r4,r16
 4004560:	400b4d80 	call	400b4d8 <__eqdf2>
 4004564:	1000751e 	bne	r2,zero,400473c <___vfprintf_internal_r+0x1c98>
 4004568:	9005883a 	mov	r2,r18
 400456c:	dc800715 	stw	r18,28(sp)
 4004570:	d9014117 	ldw	r4,1284(sp)
 4004574:	d9414d17 	ldw	r5,1332(sp)
 4004578:	00c019c4 	movi	r3,103
 400457c:	1125c83a 	sub	r18,r2,r4
 4004580:	28c06826 	beq	r5,r3,4004724 <___vfprintf_internal_r+0x1c80>
 4004584:	008011c4 	movi	r2,71
 4004588:	28806626 	beq	r5,r2,4004724 <___vfprintf_internal_r+0x1c80>
 400458c:	d9000517 	ldw	r4,20(sp)
 4004590:	d8c14d17 	ldw	r3,1332(sp)
 4004594:	00801944 	movi	r2,101
 4004598:	10c05516 	blt	r2,r3,40046f0 <___vfprintf_internal_r+0x1c4c>
 400459c:	213fffc4 	addi	r4,r4,-1
 40045a0:	d9000515 	stw	r4,20(sp)
 40045a4:	d8c00805 	stb	r3,32(sp)
 40045a8:	2021883a 	mov	r16,r4
 40045ac:	2000c116 	blt	r4,zero,40048b4 <___vfprintf_internal_r+0x1e10>
 40045b0:	00800ac4 	movi	r2,43
 40045b4:	d8800845 	stb	r2,33(sp)
 40045b8:	00800244 	movi	r2,9
 40045bc:	1400af0e 	bge	r2,r16,400487c <___vfprintf_internal_r+0x1dd8>
 40045c0:	1027883a 	mov	r19,r2
 40045c4:	dc400b84 	addi	r17,sp,46
 40045c8:	8009883a 	mov	r4,r16
 40045cc:	01400284 	movi	r5,10
 40045d0:	400bbc00 	call	400bbc0 <__modsi3>
 40045d4:	10800c04 	addi	r2,r2,48
 40045d8:	8c7fffc4 	addi	r17,r17,-1
 40045dc:	8009883a 	mov	r4,r16
 40045e0:	01400284 	movi	r5,10
 40045e4:	88800005 	stb	r2,0(r17)
 40045e8:	400bb600 	call	400bb60 <__divsi3>
 40045ec:	1021883a 	mov	r16,r2
 40045f0:	98bff516 	blt	r19,r2,40045c8 <___vfprintf_internal_r+0x1b24>
 40045f4:	10c00c04 	addi	r3,r2,48
 40045f8:	d88009c4 	addi	r2,sp,39
 40045fc:	108001c4 	addi	r2,r2,7
 4004600:	897fffc4 	addi	r5,r17,-1
 4004604:	88ffffc5 	stb	r3,-1(r17)
 4004608:	2880a72e 	bgeu	r5,r2,40048a8 <___vfprintf_internal_r+0x1e04>
 400460c:	1009883a 	mov	r4,r2
 4004610:	d9800804 	addi	r6,sp,32
 4004614:	d8c00884 	addi	r3,sp,34
 4004618:	28800003 	ldbu	r2,0(r5)
 400461c:	29400044 	addi	r5,r5,1
 4004620:	18800005 	stb	r2,0(r3)
 4004624:	18c00044 	addi	r3,r3,1
 4004628:	293ffb36 	bltu	r5,r4,4004618 <___vfprintf_internal_r+0x1b74>
 400462c:	1987c83a 	sub	r3,r3,r6
 4004630:	00800044 	movi	r2,1
 4004634:	d8c14815 	stw	r3,1312(sp)
 4004638:	90cf883a 	add	r7,r18,r3
 400463c:	1480960e 	bge	r2,r18,4004898 <___vfprintf_internal_r+0x1df4>
 4004640:	39c00044 	addi	r7,r7,1
 4004644:	d9c14515 	stw	r7,1300(sp)
 4004648:	38003416 	blt	r7,zero,400471c <___vfprintf_internal_r+0x1c78>
 400464c:	e0803fcc 	andi	r2,fp,255
 4004650:	1080201c 	xori	r2,r2,128
 4004654:	10bfe004 	addi	r2,r2,-128
 4004658:	10004e26 	beq	r2,zero,4004794 <___vfprintf_internal_r+0x1cf0>
 400465c:	00800b44 	movi	r2,45
 4004660:	dc814715 	stw	r18,1308(sp)
 4004664:	d8014615 	stw	zero,1304(sp)
 4004668:	d8800405 	stb	r2,16(sp)
 400466c:	003bb106 	br	4003534 <___vfprintf_internal_r+0xa90>
 4004670:	00800b44 	movi	r2,45
 4004674:	d8800405 	stb	r2,16(sp)
 4004678:	003d3306 	br	4003b48 <___vfprintf_internal_r+0x10a4>
 400467c:	d9014f17 	ldw	r4,1340(sp)
 4004680:	b00b883a 	mov	r5,r22
 4004684:	d9800c04 	addi	r6,sp,48
 4004688:	4002a4c0 	call	4002a4c <__sprint_r>
 400468c:	103abd1e 	bne	r2,zero,4003184 <___vfprintf_internal_r+0x6e0>
 4004690:	003abb06 	br	4003180 <___vfprintf_internal_r+0x6dc>
 4004694:	38800017 	ldw	r2,0(r7)
 4004698:	39c00104 	addi	r7,r7,4
 400469c:	d9c14015 	stw	r7,1280(sp)
 40046a0:	d9414b17 	ldw	r5,1324(sp)
 40046a4:	d9c14017 	ldw	r7,1280(sp)
 40046a8:	11400015 	stw	r5,0(r2)
 40046ac:	00395906 	br	4002c14 <___vfprintf_internal_r+0x170>
 40046b0:	980f883a 	mov	r7,r19
 40046b4:	dcc14515 	stw	r19,1300(sp)
 40046b8:	d8014615 	stw	zero,1304(sp)
 40046bc:	003b9b06 	br	400352c <___vfprintf_internal_r+0xa88>
 40046c0:	0027883a 	mov	r19,zero
 40046c4:	00397806 	br	4002ca8 <___vfprintf_internal_r+0x204>
 40046c8:	00c10174 	movhi	r3,1029
 40046cc:	18e16204 	addi	r3,r3,-31352
 40046d0:	100f883a 	mov	r7,r2
 40046d4:	d8814515 	stw	r2,1300(sp)
 40046d8:	d8c14115 	stw	r3,1284(sp)
 40046dc:	0039e006 	br	4002e60 <___vfprintf_internal_r+0x3bc>
 40046e0:	00810174 	movhi	r2,1029
 40046e4:	10a16104 	addi	r2,r2,-31356
 40046e8:	d8814115 	stw	r2,1284(sp)
 40046ec:	003d1c06 	br	4003b60 <___vfprintf_internal_r+0x10bc>
 40046f0:	d9414d17 	ldw	r5,1332(sp)
 40046f4:	00801984 	movi	r2,102
 40046f8:	28804926 	beq	r5,r2,4004820 <___vfprintf_internal_r+0x1d7c>
 40046fc:	200f883a 	mov	r7,r4
 4004700:	24805716 	blt	r4,r18,4004860 <___vfprintf_internal_r+0x1dbc>
 4004704:	d9414c17 	ldw	r5,1328(sp)
 4004708:	2880004c 	andi	r2,r5,1
 400470c:	10000126 	beq	r2,zero,4004714 <___vfprintf_internal_r+0x1c70>
 4004710:	21c00044 	addi	r7,r4,1
 4004714:	d9c14515 	stw	r7,1300(sp)
 4004718:	383fcc0e 	bge	r7,zero,400464c <___vfprintf_internal_r+0x1ba8>
 400471c:	d8014515 	stw	zero,1300(sp)
 4004720:	003fca06 	br	400464c <___vfprintf_internal_r+0x1ba8>
 4004724:	d9000517 	ldw	r4,20(sp)
 4004728:	00bfff04 	movi	r2,-4
 400472c:	1100480e 	bge	r2,r4,4004850 <___vfprintf_internal_r+0x1dac>
 4004730:	99004716 	blt	r19,r4,4004850 <___vfprintf_internal_r+0x1dac>
 4004734:	d8c14d15 	stw	r3,1332(sp)
 4004738:	003ff006 	br	40046fc <___vfprintf_internal_r+0x1c58>
 400473c:	d8800717 	ldw	r2,28(sp)
 4004740:	14bf8b2e 	bgeu	r2,r18,4004570 <___vfprintf_internal_r+0x1acc>
 4004744:	9007883a 	mov	r3,r18
 4004748:	01000c04 	movi	r4,48
 400474c:	11000005 	stb	r4,0(r2)
 4004750:	10800044 	addi	r2,r2,1
 4004754:	d8800715 	stw	r2,28(sp)
 4004758:	18bffc1e 	bne	r3,r2,400474c <___vfprintf_internal_r+0x1ca8>
 400475c:	003f8406 	br	4004570 <___vfprintf_internal_r+0x1acc>
 4004760:	d8814117 	ldw	r2,1284(sp)
 4004764:	10c00007 	ldb	r3,0(r2)
 4004768:	00800c04 	movi	r2,48
 400476c:	18805b26 	beq	r3,r2,40048dc <___vfprintf_internal_r+0x1e38>
 4004770:	d9000517 	ldw	r4,20(sp)
 4004774:	9125883a 	add	r18,r18,r4
 4004778:	003f7506 	br	4004550 <___vfprintf_internal_r+0x1aac>
 400477c:	d9014c17 	ldw	r4,1328(sp)
 4004780:	2080004c 	andi	r2,r4,1
 4004784:	1005003a 	cmpeq	r2,r2,zero
 4004788:	103f6a26 	beq	r2,zero,4004534 <___vfprintf_internal_r+0x1a90>
 400478c:	d8800717 	ldw	r2,28(sp)
 4004790:	003f7706 	br	4004570 <___vfprintf_internal_r+0x1acc>
 4004794:	d9c14515 	stw	r7,1300(sp)
 4004798:	38004d16 	blt	r7,zero,40048d0 <___vfprintf_internal_r+0x1e2c>
 400479c:	dc814715 	stw	r18,1308(sp)
 40047a0:	d8014615 	stw	zero,1304(sp)
 40047a4:	003b6106 	br	400352c <___vfprintf_internal_r+0xa88>
 40047a8:	d9014f17 	ldw	r4,1340(sp)
 40047ac:	d8800504 	addi	r2,sp,20
 40047b0:	d8800115 	stw	r2,4(sp)
 40047b4:	d8c00604 	addi	r3,sp,24
 40047b8:	d8800704 	addi	r2,sp,28
 40047bc:	800b883a 	mov	r5,r16
 40047c0:	880d883a 	mov	r6,r17
 40047c4:	01c000c4 	movi	r7,3
 40047c8:	d8c00215 	stw	r3,8(sp)
 40047cc:	d8800315 	stw	r2,12(sp)
 40047d0:	dcc00015 	stw	r19,0(sp)
 40047d4:	9829883a 	mov	r20,r19
 40047d8:	4004cc80 	call	4004cc8 <_dtoa_r>
 40047dc:	d8814115 	stw	r2,1284(sp)
 40047e0:	003f5106 	br	4004528 <___vfprintf_internal_r+0x1a84>
 40047e4:	d8c14217 	ldw	r3,1288(sp)
 40047e8:	d9014317 	ldw	r4,1292(sp)
 40047ec:	07000b44 	movi	fp,45
 40047f0:	1821883a 	mov	r16,r3
 40047f4:	2460003c 	xorhi	r17,r4,32768
 40047f8:	003f3106 	br	40044c0 <___vfprintf_internal_r+0x1a1c>
 40047fc:	9d000044 	addi	r20,r19,1
 4004800:	003f3906 	br	40044e8 <___vfprintf_internal_r+0x1a44>
 4004804:	983f251e 	bne	r19,zero,400449c <___vfprintf_internal_r+0x19f8>
 4004808:	04c00044 	movi	r19,1
 400480c:	003f2306 	br	400449c <___vfprintf_internal_r+0x19f8>
 4004810:	04c00184 	movi	r19,6
 4004814:	003f2106 	br	400449c <___vfprintf_internal_r+0x19f8>
 4004818:	d8014515 	stw	zero,1300(sp)
 400481c:	003eee06 	br	40043d8 <___vfprintf_internal_r+0x1934>
 4004820:	200f883a 	mov	r7,r4
 4004824:	0100370e 	bge	zero,r4,4004904 <___vfprintf_internal_r+0x1e60>
 4004828:	9800031e 	bne	r19,zero,4004838 <___vfprintf_internal_r+0x1d94>
 400482c:	d9814c17 	ldw	r6,1328(sp)
 4004830:	3080004c 	andi	r2,r6,1
 4004834:	103fb726 	beq	r2,zero,4004714 <___vfprintf_internal_r+0x1c70>
 4004838:	20800044 	addi	r2,r4,1
 400483c:	98a7883a 	add	r19,r19,r2
 4004840:	dcc14515 	stw	r19,1300(sp)
 4004844:	980f883a 	mov	r7,r19
 4004848:	983f800e 	bge	r19,zero,400464c <___vfprintf_internal_r+0x1ba8>
 400484c:	003fb306 	br	400471c <___vfprintf_internal_r+0x1c78>
 4004850:	d9814d17 	ldw	r6,1332(sp)
 4004854:	31bfff84 	addi	r6,r6,-2
 4004858:	d9814d15 	stw	r6,1332(sp)
 400485c:	003f4c06 	br	4004590 <___vfprintf_internal_r+0x1aec>
 4004860:	0100180e 	bge	zero,r4,40048c4 <___vfprintf_internal_r+0x1e20>
 4004864:	00800044 	movi	r2,1
 4004868:	1485883a 	add	r2,r2,r18
 400486c:	d8814515 	stw	r2,1300(sp)
 4004870:	100f883a 	mov	r7,r2
 4004874:	103f750e 	bge	r2,zero,400464c <___vfprintf_internal_r+0x1ba8>
 4004878:	003fa806 	br	400471c <___vfprintf_internal_r+0x1c78>
 400487c:	80c00c04 	addi	r3,r16,48
 4004880:	00800c04 	movi	r2,48
 4004884:	d8c008c5 	stb	r3,35(sp)
 4004888:	d9800804 	addi	r6,sp,32
 400488c:	d8c00904 	addi	r3,sp,36
 4004890:	d8800885 	stb	r2,34(sp)
 4004894:	003f6506 	br	400462c <___vfprintf_internal_r+0x1b88>
 4004898:	d9014c17 	ldw	r4,1328(sp)
 400489c:	2084703a 	and	r2,r4,r2
 40048a0:	103f9c26 	beq	r2,zero,4004714 <___vfprintf_internal_r+0x1c70>
 40048a4:	003f6606 	br	4004640 <___vfprintf_internal_r+0x1b9c>
 40048a8:	d9800804 	addi	r6,sp,32
 40048ac:	d8c00884 	addi	r3,sp,34
 40048b0:	003f5e06 	br	400462c <___vfprintf_internal_r+0x1b88>
 40048b4:	00800b44 	movi	r2,45
 40048b8:	0121c83a 	sub	r16,zero,r4
 40048bc:	d8800845 	stb	r2,33(sp)
 40048c0:	003f3d06 	br	40045b8 <___vfprintf_internal_r+0x1b14>
 40048c4:	00800084 	movi	r2,2
 40048c8:	1105c83a 	sub	r2,r2,r4
 40048cc:	003fe606 	br	4004868 <___vfprintf_internal_r+0x1dc4>
 40048d0:	d8014515 	stw	zero,1300(sp)
 40048d4:	dc814715 	stw	r18,1308(sp)
 40048d8:	003fb106 	br	40047a0 <___vfprintf_internal_r+0x1cfc>
 40048dc:	000d883a 	mov	r6,zero
 40048e0:	000f883a 	mov	r7,zero
 40048e4:	8009883a 	mov	r4,r16
 40048e8:	880b883a 	mov	r5,r17
 40048ec:	400b5600 	call	400b560 <__nedf2>
 40048f0:	103f9f26 	beq	r2,zero,4004770 <___vfprintf_internal_r+0x1ccc>
 40048f4:	00800044 	movi	r2,1
 40048f8:	1509c83a 	sub	r4,r2,r20
 40048fc:	d9000515 	stw	r4,20(sp)
 4004900:	003f9b06 	br	4004770 <___vfprintf_internal_r+0x1ccc>
 4004904:	98000d1e 	bne	r19,zero,400493c <___vfprintf_internal_r+0x1e98>
 4004908:	d8c14c17 	ldw	r3,1328(sp)
 400490c:	1880004c 	andi	r2,r3,1
 4004910:	10000a1e 	bne	r2,zero,400493c <___vfprintf_internal_r+0x1e98>
 4004914:	01000044 	movi	r4,1
 4004918:	200f883a 	mov	r7,r4
 400491c:	d9014515 	stw	r4,1300(sp)
 4004920:	003f4a06 	br	400464c <___vfprintf_internal_r+0x1ba8>
 4004924:	3cc00017 	ldw	r19,0(r7)
 4004928:	39c00104 	addi	r7,r7,4
 400492c:	983d0e0e 	bge	r19,zero,4003d68 <___vfprintf_internal_r+0x12c4>
 4004930:	b8c00007 	ldb	r3,0(r23)
 4004934:	04ffffc4 	movi	r19,-1
 4004938:	0038d906 	br	4002ca0 <___vfprintf_internal_r+0x1fc>
 400493c:	9cc00084 	addi	r19,r19,2
 4004940:	dcc14515 	stw	r19,1300(sp)
 4004944:	980f883a 	mov	r7,r19
 4004948:	983f400e 	bge	r19,zero,400464c <___vfprintf_internal_r+0x1ba8>
 400494c:	003f7306 	br	400471c <___vfprintf_internal_r+0x1c78>

04004950 <__vfprintf_internal>:
 4004950:	00810174 	movhi	r2,1029
 4004954:	10b9bf04 	addi	r2,r2,-6404
 4004958:	2013883a 	mov	r9,r4
 400495c:	11000017 	ldw	r4,0(r2)
 4004960:	2805883a 	mov	r2,r5
 4004964:	300f883a 	mov	r7,r6
 4004968:	480b883a 	mov	r5,r9
 400496c:	100d883a 	mov	r6,r2
 4004970:	4002aa41 	jmpi	4002aa4 <___vfprintf_internal_r>

04004974 <__swsetup_r>:
 4004974:	00810174 	movhi	r2,1029
 4004978:	10b9bf04 	addi	r2,r2,-6404
 400497c:	10c00017 	ldw	r3,0(r2)
 4004980:	defffd04 	addi	sp,sp,-12
 4004984:	dc400115 	stw	r17,4(sp)
 4004988:	dc000015 	stw	r16,0(sp)
 400498c:	dfc00215 	stw	ra,8(sp)
 4004990:	2023883a 	mov	r17,r4
 4004994:	2821883a 	mov	r16,r5
 4004998:	18000226 	beq	r3,zero,40049a4 <__swsetup_r+0x30>
 400499c:	18800e17 	ldw	r2,56(r3)
 40049a0:	10001f26 	beq	r2,zero,4004a20 <__swsetup_r+0xac>
 40049a4:	8100030b 	ldhu	r4,12(r16)
 40049a8:	2080020c 	andi	r2,r4,8
 40049ac:	10002826 	beq	r2,zero,4004a50 <__swsetup_r+0xdc>
 40049b0:	81400417 	ldw	r5,16(r16)
 40049b4:	28001d26 	beq	r5,zero,4004a2c <__swsetup_r+0xb8>
 40049b8:	2080004c 	andi	r2,r4,1
 40049bc:	1005003a 	cmpeq	r2,r2,zero
 40049c0:	10000b26 	beq	r2,zero,40049f0 <__swsetup_r+0x7c>
 40049c4:	2080008c 	andi	r2,r4,2
 40049c8:	10001226 	beq	r2,zero,4004a14 <__swsetup_r+0xa0>
 40049cc:	0005883a 	mov	r2,zero
 40049d0:	80800215 	stw	r2,8(r16)
 40049d4:	28000b26 	beq	r5,zero,4004a04 <__swsetup_r+0x90>
 40049d8:	0005883a 	mov	r2,zero
 40049dc:	dfc00217 	ldw	ra,8(sp)
 40049e0:	dc400117 	ldw	r17,4(sp)
 40049e4:	dc000017 	ldw	r16,0(sp)
 40049e8:	dec00304 	addi	sp,sp,12
 40049ec:	f800283a 	ret
 40049f0:	80800517 	ldw	r2,20(r16)
 40049f4:	80000215 	stw	zero,8(r16)
 40049f8:	0085c83a 	sub	r2,zero,r2
 40049fc:	80800615 	stw	r2,24(r16)
 4004a00:	283ff51e 	bne	r5,zero,40049d8 <__swsetup_r+0x64>
 4004a04:	2080200c 	andi	r2,r4,128
 4004a08:	103ff326 	beq	r2,zero,40049d8 <__swsetup_r+0x64>
 4004a0c:	00bfffc4 	movi	r2,-1
 4004a10:	003ff206 	br	40049dc <__swsetup_r+0x68>
 4004a14:	80800517 	ldw	r2,20(r16)
 4004a18:	80800215 	stw	r2,8(r16)
 4004a1c:	003fed06 	br	40049d4 <__swsetup_r+0x60>
 4004a20:	1809883a 	mov	r4,r3
 4004a24:	40065140 	call	4006514 <__sinit>
 4004a28:	003fde06 	br	40049a4 <__swsetup_r+0x30>
 4004a2c:	20c0a00c 	andi	r3,r4,640
 4004a30:	00808004 	movi	r2,512
 4004a34:	18bfe026 	beq	r3,r2,40049b8 <__swsetup_r+0x44>
 4004a38:	8809883a 	mov	r4,r17
 4004a3c:	800b883a 	mov	r5,r16
 4004a40:	40073d80 	call	40073d8 <__smakebuf_r>
 4004a44:	8100030b 	ldhu	r4,12(r16)
 4004a48:	81400417 	ldw	r5,16(r16)
 4004a4c:	003fda06 	br	40049b8 <__swsetup_r+0x44>
 4004a50:	2080040c 	andi	r2,r4,16
 4004a54:	103fed26 	beq	r2,zero,4004a0c <__swsetup_r+0x98>
 4004a58:	2080010c 	andi	r2,r4,4
 4004a5c:	10001226 	beq	r2,zero,4004aa8 <__swsetup_r+0x134>
 4004a60:	81400c17 	ldw	r5,48(r16)
 4004a64:	28000526 	beq	r5,zero,4004a7c <__swsetup_r+0x108>
 4004a68:	80801004 	addi	r2,r16,64
 4004a6c:	28800226 	beq	r5,r2,4004a78 <__swsetup_r+0x104>
 4004a70:	8809883a 	mov	r4,r17
 4004a74:	40069e40 	call	40069e4 <_free_r>
 4004a78:	80000c15 	stw	zero,48(r16)
 4004a7c:	8080030b 	ldhu	r2,12(r16)
 4004a80:	81400417 	ldw	r5,16(r16)
 4004a84:	80000115 	stw	zero,4(r16)
 4004a88:	10bff6cc 	andi	r2,r2,65499
 4004a8c:	8080030d 	sth	r2,12(r16)
 4004a90:	81400015 	stw	r5,0(r16)
 4004a94:	8080030b 	ldhu	r2,12(r16)
 4004a98:	10800214 	ori	r2,r2,8
 4004a9c:	113fffcc 	andi	r4,r2,65535
 4004aa0:	8080030d 	sth	r2,12(r16)
 4004aa4:	003fc306 	br	40049b4 <__swsetup_r+0x40>
 4004aa8:	81400417 	ldw	r5,16(r16)
 4004aac:	003ff906 	br	4004a94 <__swsetup_r+0x120>

04004ab0 <quorem>:
 4004ab0:	28c00417 	ldw	r3,16(r5)
 4004ab4:	20800417 	ldw	r2,16(r4)
 4004ab8:	defff604 	addi	sp,sp,-40
 4004abc:	ddc00715 	stw	r23,28(sp)
 4004ac0:	dd400515 	stw	r21,20(sp)
 4004ac4:	dfc00915 	stw	ra,36(sp)
 4004ac8:	df000815 	stw	fp,32(sp)
 4004acc:	dd800615 	stw	r22,24(sp)
 4004ad0:	dd000415 	stw	r20,16(sp)
 4004ad4:	dcc00315 	stw	r19,12(sp)
 4004ad8:	dc800215 	stw	r18,8(sp)
 4004adc:	dc400115 	stw	r17,4(sp)
 4004ae0:	dc000015 	stw	r16,0(sp)
 4004ae4:	202f883a 	mov	r23,r4
 4004ae8:	282b883a 	mov	r21,r5
 4004aec:	10c07416 	blt	r2,r3,4004cc0 <quorem+0x210>
 4004af0:	1c7fffc4 	addi	r17,r3,-1
 4004af4:	8c45883a 	add	r2,r17,r17
 4004af8:	1085883a 	add	r2,r2,r2
 4004afc:	2c000504 	addi	r16,r5,20
 4004b00:	24c00504 	addi	r19,r4,20
 4004b04:	14ed883a 	add	r22,r2,r19
 4004b08:	80a5883a 	add	r18,r16,r2
 4004b0c:	b7000017 	ldw	fp,0(r22)
 4004b10:	91400017 	ldw	r5,0(r18)
 4004b14:	e009883a 	mov	r4,fp
 4004b18:	29400044 	addi	r5,r5,1
 4004b1c:	400bc200 	call	400bc20 <__udivsi3>
 4004b20:	1029883a 	mov	r20,r2
 4004b24:	10003c1e 	bne	r2,zero,4004c18 <quorem+0x168>
 4004b28:	a80b883a 	mov	r5,r21
 4004b2c:	b809883a 	mov	r4,r23
 4004b30:	4007eec0 	call	4007eec <__mcmp>
 4004b34:	10002b16 	blt	r2,zero,4004be4 <quorem+0x134>
 4004b38:	a5000044 	addi	r20,r20,1
 4004b3c:	980f883a 	mov	r7,r19
 4004b40:	0011883a 	mov	r8,zero
 4004b44:	0009883a 	mov	r4,zero
 4004b48:	81400017 	ldw	r5,0(r16)
 4004b4c:	38c00017 	ldw	r3,0(r7)
 4004b50:	84000104 	addi	r16,r16,4
 4004b54:	28bfffcc 	andi	r2,r5,65535
 4004b58:	2085883a 	add	r2,r4,r2
 4004b5c:	11bfffcc 	andi	r6,r2,65535
 4004b60:	193fffcc 	andi	r4,r3,65535
 4004b64:	1004d43a 	srli	r2,r2,16
 4004b68:	280ad43a 	srli	r5,r5,16
 4004b6c:	2189c83a 	sub	r4,r4,r6
 4004b70:	2209883a 	add	r4,r4,r8
 4004b74:	1806d43a 	srli	r3,r3,16
 4004b78:	288b883a 	add	r5,r5,r2
 4004b7c:	200dd43a 	srai	r6,r4,16
 4004b80:	28bfffcc 	andi	r2,r5,65535
 4004b84:	1887c83a 	sub	r3,r3,r2
 4004b88:	1987883a 	add	r3,r3,r6
 4004b8c:	3900000d 	sth	r4,0(r7)
 4004b90:	38c0008d 	sth	r3,2(r7)
 4004b94:	2808d43a 	srli	r4,r5,16
 4004b98:	39c00104 	addi	r7,r7,4
 4004b9c:	1811d43a 	srai	r8,r3,16
 4004ba0:	943fe92e 	bgeu	r18,r16,4004b48 <quorem+0x98>
 4004ba4:	8c45883a 	add	r2,r17,r17
 4004ba8:	1085883a 	add	r2,r2,r2
 4004bac:	9885883a 	add	r2,r19,r2
 4004bb0:	10c00017 	ldw	r3,0(r2)
 4004bb4:	18000b1e 	bne	r3,zero,4004be4 <quorem+0x134>
 4004bb8:	113fff04 	addi	r4,r2,-4
 4004bbc:	9900082e 	bgeu	r19,r4,4004be0 <quorem+0x130>
 4004bc0:	10bfff17 	ldw	r2,-4(r2)
 4004bc4:	10000326 	beq	r2,zero,4004bd4 <quorem+0x124>
 4004bc8:	00000506 	br	4004be0 <quorem+0x130>
 4004bcc:	20800017 	ldw	r2,0(r4)
 4004bd0:	1000031e 	bne	r2,zero,4004be0 <quorem+0x130>
 4004bd4:	213fff04 	addi	r4,r4,-4
 4004bd8:	8c7fffc4 	addi	r17,r17,-1
 4004bdc:	993ffb36 	bltu	r19,r4,4004bcc <quorem+0x11c>
 4004be0:	bc400415 	stw	r17,16(r23)
 4004be4:	a005883a 	mov	r2,r20
 4004be8:	dfc00917 	ldw	ra,36(sp)
 4004bec:	df000817 	ldw	fp,32(sp)
 4004bf0:	ddc00717 	ldw	r23,28(sp)
 4004bf4:	dd800617 	ldw	r22,24(sp)
 4004bf8:	dd400517 	ldw	r21,20(sp)
 4004bfc:	dd000417 	ldw	r20,16(sp)
 4004c00:	dcc00317 	ldw	r19,12(sp)
 4004c04:	dc800217 	ldw	r18,8(sp)
 4004c08:	dc400117 	ldw	r17,4(sp)
 4004c0c:	dc000017 	ldw	r16,0(sp)
 4004c10:	dec00a04 	addi	sp,sp,40
 4004c14:	f800283a 	ret
 4004c18:	980f883a 	mov	r7,r19
 4004c1c:	8011883a 	mov	r8,r16
 4004c20:	0013883a 	mov	r9,zero
 4004c24:	000d883a 	mov	r6,zero
 4004c28:	40c00017 	ldw	r3,0(r8)
 4004c2c:	39000017 	ldw	r4,0(r7)
 4004c30:	42000104 	addi	r8,r8,4
 4004c34:	18bfffcc 	andi	r2,r3,65535
 4004c38:	a085383a 	mul	r2,r20,r2
 4004c3c:	1806d43a 	srli	r3,r3,16
 4004c40:	217fffcc 	andi	r5,r4,65535
 4004c44:	3085883a 	add	r2,r6,r2
 4004c48:	11bfffcc 	andi	r6,r2,65535
 4004c4c:	a0c7383a 	mul	r3,r20,r3
 4004c50:	1004d43a 	srli	r2,r2,16
 4004c54:	298bc83a 	sub	r5,r5,r6
 4004c58:	2a4b883a 	add	r5,r5,r9
 4004c5c:	2008d43a 	srli	r4,r4,16
 4004c60:	1887883a 	add	r3,r3,r2
 4004c64:	280dd43a 	srai	r6,r5,16
 4004c68:	18bfffcc 	andi	r2,r3,65535
 4004c6c:	2089c83a 	sub	r4,r4,r2
 4004c70:	2189883a 	add	r4,r4,r6
 4004c74:	3900008d 	sth	r4,2(r7)
 4004c78:	3940000d 	sth	r5,0(r7)
 4004c7c:	180cd43a 	srli	r6,r3,16
 4004c80:	39c00104 	addi	r7,r7,4
 4004c84:	2013d43a 	srai	r9,r4,16
 4004c88:	923fe72e 	bgeu	r18,r8,4004c28 <quorem+0x178>
 4004c8c:	e03fa61e 	bne	fp,zero,4004b28 <quorem+0x78>
 4004c90:	b0ffff04 	addi	r3,r22,-4
 4004c94:	98c0082e 	bgeu	r19,r3,4004cb8 <quorem+0x208>
 4004c98:	b0bfff17 	ldw	r2,-4(r22)
 4004c9c:	10000326 	beq	r2,zero,4004cac <quorem+0x1fc>
 4004ca0:	00000506 	br	4004cb8 <quorem+0x208>
 4004ca4:	18800017 	ldw	r2,0(r3)
 4004ca8:	1000031e 	bne	r2,zero,4004cb8 <quorem+0x208>
 4004cac:	18ffff04 	addi	r3,r3,-4
 4004cb0:	8c7fffc4 	addi	r17,r17,-1
 4004cb4:	98fffb36 	bltu	r19,r3,4004ca4 <quorem+0x1f4>
 4004cb8:	bc400415 	stw	r17,16(r23)
 4004cbc:	003f9a06 	br	4004b28 <quorem+0x78>
 4004cc0:	0005883a 	mov	r2,zero
 4004cc4:	003fc806 	br	4004be8 <quorem+0x138>

04004cc8 <_dtoa_r>:
 4004cc8:	22001017 	ldw	r8,64(r4)
 4004ccc:	deffda04 	addi	sp,sp,-152
 4004cd0:	dd402115 	stw	r21,132(sp)
 4004cd4:	dd002015 	stw	r20,128(sp)
 4004cd8:	dc801e15 	stw	r18,120(sp)
 4004cdc:	dc401d15 	stw	r17,116(sp)
 4004ce0:	dfc02515 	stw	ra,148(sp)
 4004ce4:	df002415 	stw	fp,144(sp)
 4004ce8:	ddc02315 	stw	r23,140(sp)
 4004cec:	dd802215 	stw	r22,136(sp)
 4004cf0:	dcc01f15 	stw	r19,124(sp)
 4004cf4:	dc001c15 	stw	r16,112(sp)
 4004cf8:	d9001615 	stw	r4,88(sp)
 4004cfc:	3023883a 	mov	r17,r6
 4004d00:	2829883a 	mov	r20,r5
 4004d04:	d9c01715 	stw	r7,92(sp)
 4004d08:	dc802817 	ldw	r18,160(sp)
 4004d0c:	302b883a 	mov	r21,r6
 4004d10:	40000a26 	beq	r8,zero,4004d3c <_dtoa_r+0x74>
 4004d14:	20801117 	ldw	r2,68(r4)
 4004d18:	400b883a 	mov	r5,r8
 4004d1c:	40800115 	stw	r2,4(r8)
 4004d20:	20c01117 	ldw	r3,68(r4)
 4004d24:	00800044 	movi	r2,1
 4004d28:	10c4983a 	sll	r2,r2,r3
 4004d2c:	40800215 	stw	r2,8(r8)
 4004d30:	4007d900 	call	4007d90 <_Bfree>
 4004d34:	d8c01617 	ldw	r3,88(sp)
 4004d38:	18001015 	stw	zero,64(r3)
 4004d3c:	8800a316 	blt	r17,zero,4004fcc <_dtoa_r+0x304>
 4004d40:	90000015 	stw	zero,0(r18)
 4004d44:	a8dffc2c 	andhi	r3,r21,32752
 4004d48:	009ffc34 	movhi	r2,32752
 4004d4c:	18809126 	beq	r3,r2,4004f94 <_dtoa_r+0x2cc>
 4004d50:	000d883a 	mov	r6,zero
 4004d54:	000f883a 	mov	r7,zero
 4004d58:	a009883a 	mov	r4,r20
 4004d5c:	a80b883a 	mov	r5,r21
 4004d60:	dd001215 	stw	r20,72(sp)
 4004d64:	dd401315 	stw	r21,76(sp)
 4004d68:	400b5600 	call	400b560 <__nedf2>
 4004d6c:	1000171e 	bne	r2,zero,4004dcc <_dtoa_r+0x104>
 4004d70:	d9802717 	ldw	r6,156(sp)
 4004d74:	00800044 	movi	r2,1
 4004d78:	30800015 	stw	r2,0(r6)
 4004d7c:	d8802917 	ldw	r2,164(sp)
 4004d80:	10029b26 	beq	r2,zero,40057f0 <_dtoa_r+0xb28>
 4004d84:	d9002917 	ldw	r4,164(sp)
 4004d88:	00810174 	movhi	r2,1029
 4004d8c:	10a17044 	addi	r2,r2,-31295
 4004d90:	10ffffc4 	addi	r3,r2,-1
 4004d94:	20800015 	stw	r2,0(r4)
 4004d98:	1805883a 	mov	r2,r3
 4004d9c:	dfc02517 	ldw	ra,148(sp)
 4004da0:	df002417 	ldw	fp,144(sp)
 4004da4:	ddc02317 	ldw	r23,140(sp)
 4004da8:	dd802217 	ldw	r22,136(sp)
 4004dac:	dd402117 	ldw	r21,132(sp)
 4004db0:	dd002017 	ldw	r20,128(sp)
 4004db4:	dcc01f17 	ldw	r19,124(sp)
 4004db8:	dc801e17 	ldw	r18,120(sp)
 4004dbc:	dc401d17 	ldw	r17,116(sp)
 4004dc0:	dc001c17 	ldw	r16,112(sp)
 4004dc4:	dec02604 	addi	sp,sp,152
 4004dc8:	f800283a 	ret
 4004dcc:	d9001617 	ldw	r4,88(sp)
 4004dd0:	d9401217 	ldw	r5,72(sp)
 4004dd4:	d8800104 	addi	r2,sp,4
 4004dd8:	a80d883a 	mov	r6,r21
 4004ddc:	d9c00204 	addi	r7,sp,8
 4004de0:	d8800015 	stw	r2,0(sp)
 4004de4:	40083cc0 	call	40083cc <__d2b>
 4004de8:	d8800715 	stw	r2,28(sp)
 4004dec:	a804d53a 	srli	r2,r21,20
 4004df0:	1101ffcc 	andi	r4,r2,2047
 4004df4:	20008626 	beq	r4,zero,4005010 <_dtoa_r+0x348>
 4004df8:	d8c01217 	ldw	r3,72(sp)
 4004dfc:	00800434 	movhi	r2,16
 4004e00:	10bfffc4 	addi	r2,r2,-1
 4004e04:	ddc00117 	ldw	r23,4(sp)
 4004e08:	a884703a 	and	r2,r21,r2
 4004e0c:	1811883a 	mov	r8,r3
 4004e10:	124ffc34 	orhi	r9,r2,16368
 4004e14:	25bf0044 	addi	r22,r4,-1023
 4004e18:	d8000815 	stw	zero,32(sp)
 4004e1c:	0005883a 	mov	r2,zero
 4004e20:	00cffe34 	movhi	r3,16376
 4004e24:	480b883a 	mov	r5,r9
 4004e28:	4009883a 	mov	r4,r8
 4004e2c:	180f883a 	mov	r7,r3
 4004e30:	100d883a 	mov	r6,r2
 4004e34:	400adc80 	call	400adc8 <__subdf3>
 4004e38:	0218dbf4 	movhi	r8,25455
 4004e3c:	4210d844 	addi	r8,r8,17249
 4004e40:	024ff4f4 	movhi	r9,16339
 4004e44:	4a61e9c4 	addi	r9,r9,-30809
 4004e48:	480f883a 	mov	r7,r9
 4004e4c:	400d883a 	mov	r6,r8
 4004e50:	180b883a 	mov	r5,r3
 4004e54:	1009883a 	mov	r4,r2
 4004e58:	400aebc0 	call	400aebc <__muldf3>
 4004e5c:	0222d874 	movhi	r8,35681
 4004e60:	42322cc4 	addi	r8,r8,-14157
 4004e64:	024ff1f4 	movhi	r9,16327
 4004e68:	4a628a04 	addi	r9,r9,-30168
 4004e6c:	480f883a 	mov	r7,r9
 4004e70:	400d883a 	mov	r6,r8
 4004e74:	180b883a 	mov	r5,r3
 4004e78:	1009883a 	mov	r4,r2
 4004e7c:	400ae480 	call	400ae48 <__adddf3>
 4004e80:	b009883a 	mov	r4,r22
 4004e84:	1021883a 	mov	r16,r2
 4004e88:	1823883a 	mov	r17,r3
 4004e8c:	400b7800 	call	400b780 <__floatsidf>
 4004e90:	021427f4 	movhi	r8,20639
 4004e94:	421e7ec4 	addi	r8,r8,31227
 4004e98:	024ff4f4 	movhi	r9,16339
 4004e9c:	4a5104c4 	addi	r9,r9,17427
 4004ea0:	480f883a 	mov	r7,r9
 4004ea4:	400d883a 	mov	r6,r8
 4004ea8:	180b883a 	mov	r5,r3
 4004eac:	1009883a 	mov	r4,r2
 4004eb0:	400aebc0 	call	400aebc <__muldf3>
 4004eb4:	180f883a 	mov	r7,r3
 4004eb8:	880b883a 	mov	r5,r17
 4004ebc:	100d883a 	mov	r6,r2
 4004ec0:	8009883a 	mov	r4,r16
 4004ec4:	400ae480 	call	400ae48 <__adddf3>
 4004ec8:	1009883a 	mov	r4,r2
 4004ecc:	180b883a 	mov	r5,r3
 4004ed0:	1021883a 	mov	r16,r2
 4004ed4:	1823883a 	mov	r17,r3
 4004ed8:	400b8780 	call	400b878 <__fixdfsi>
 4004edc:	000d883a 	mov	r6,zero
 4004ee0:	000f883a 	mov	r7,zero
 4004ee4:	8009883a 	mov	r4,r16
 4004ee8:	880b883a 	mov	r5,r17
 4004eec:	d8800d15 	stw	r2,52(sp)
 4004ef0:	400b6f80 	call	400b6f8 <__ltdf2>
 4004ef4:	10031716 	blt	r2,zero,4005b54 <_dtoa_r+0xe8c>
 4004ef8:	d8c00d17 	ldw	r3,52(sp)
 4004efc:	00800584 	movi	r2,22
 4004f00:	10c1482e 	bgeu	r2,r3,4005424 <_dtoa_r+0x75c>
 4004f04:	01000044 	movi	r4,1
 4004f08:	d9000c15 	stw	r4,48(sp)
 4004f0c:	bd85c83a 	sub	r2,r23,r22
 4004f10:	11bfffc4 	addi	r6,r2,-1
 4004f14:	30030b16 	blt	r6,zero,4005b44 <_dtoa_r+0xe7c>
 4004f18:	d9800a15 	stw	r6,40(sp)
 4004f1c:	d8001115 	stw	zero,68(sp)
 4004f20:	d8c00d17 	ldw	r3,52(sp)
 4004f24:	1802ff16 	blt	r3,zero,4005b24 <_dtoa_r+0xe5c>
 4004f28:	d9000a17 	ldw	r4,40(sp)
 4004f2c:	d8c00915 	stw	r3,36(sp)
 4004f30:	d8001015 	stw	zero,64(sp)
 4004f34:	20c9883a 	add	r4,r4,r3
 4004f38:	d9000a15 	stw	r4,40(sp)
 4004f3c:	d9001717 	ldw	r4,92(sp)
 4004f40:	00800244 	movi	r2,9
 4004f44:	11004636 	bltu	r2,r4,4005060 <_dtoa_r+0x398>
 4004f48:	00800144 	movi	r2,5
 4004f4c:	11020416 	blt	r2,r4,4005760 <_dtoa_r+0xa98>
 4004f50:	04400044 	movi	r17,1
 4004f54:	d8c01717 	ldw	r3,92(sp)
 4004f58:	00800144 	movi	r2,5
 4004f5c:	10c1ed36 	bltu	r2,r3,4005714 <_dtoa_r+0xa4c>
 4004f60:	18c5883a 	add	r2,r3,r3
 4004f64:	1085883a 	add	r2,r2,r2
 4004f68:	00c10034 	movhi	r3,1024
 4004f6c:	18d3df04 	addi	r3,r3,20348
 4004f70:	10c5883a 	add	r2,r2,r3
 4004f74:	11000017 	ldw	r4,0(r2)
 4004f78:	2000683a 	jmp	r4
 4004f7c:	04005068 	cmpgeui	r16,zero,321
 4004f80:	04005068 	cmpgeui	r16,zero,321
 4004f84:	04005a68 	cmpgeui	r16,zero,361
 4004f88:	04005a40 	call	4005a4 <OSCtxSw_SWITCH_PC+0x400564>
 4004f8c:	04005a84 	movi	r16,362
 4004f90:	04005a90 	cmplti	r16,zero,362
 4004f94:	d9002717 	ldw	r4,156(sp)
 4004f98:	0089c3c4 	movi	r2,9999
 4004f9c:	20800015 	stw	r2,0(r4)
 4004fa0:	a0001026 	beq	r20,zero,4004fe4 <_dtoa_r+0x31c>
 4004fa4:	00c10174 	movhi	r3,1029
 4004fa8:	18e17c04 	addi	r3,r3,-31248
 4004fac:	d9802917 	ldw	r6,164(sp)
 4004fb0:	303f7926 	beq	r6,zero,4004d98 <_dtoa_r+0xd0>
 4004fb4:	188000c7 	ldb	r2,3(r3)
 4004fb8:	190000c4 	addi	r4,r3,3
 4004fbc:	1000101e 	bne	r2,zero,4005000 <_dtoa_r+0x338>
 4004fc0:	d8802917 	ldw	r2,164(sp)
 4004fc4:	11000015 	stw	r4,0(r2)
 4004fc8:	003f7306 	br	4004d98 <_dtoa_r+0xd0>
 4004fcc:	00a00034 	movhi	r2,32768
 4004fd0:	10bfffc4 	addi	r2,r2,-1
 4004fd4:	00c00044 	movi	r3,1
 4004fd8:	88aa703a 	and	r21,r17,r2
 4004fdc:	90c00015 	stw	r3,0(r18)
 4004fe0:	003f5806 	br	4004d44 <_dtoa_r+0x7c>
 4004fe4:	00800434 	movhi	r2,16
 4004fe8:	10bfffc4 	addi	r2,r2,-1
 4004fec:	a884703a 	and	r2,r21,r2
 4004ff0:	103fec1e 	bne	r2,zero,4004fa4 <_dtoa_r+0x2dc>
 4004ff4:	00c10174 	movhi	r3,1029
 4004ff8:	18e17904 	addi	r3,r3,-31260
 4004ffc:	003feb06 	br	4004fac <_dtoa_r+0x2e4>
 4005000:	d8802917 	ldw	r2,164(sp)
 4005004:	19000204 	addi	r4,r3,8
 4005008:	11000015 	stw	r4,0(r2)
 400500c:	003f6206 	br	4004d98 <_dtoa_r+0xd0>
 4005010:	ddc00117 	ldw	r23,4(sp)
 4005014:	d8800217 	ldw	r2,8(sp)
 4005018:	01000804 	movi	r4,32
 400501c:	b8c10c84 	addi	r3,r23,1074
 4005020:	18a3883a 	add	r17,r3,r2
 4005024:	2441b80e 	bge	r4,r17,4005708 <_dtoa_r+0xa40>
 4005028:	00c01004 	movi	r3,64
 400502c:	1c47c83a 	sub	r3,r3,r17
 4005030:	88bff804 	addi	r2,r17,-32
 4005034:	a8c6983a 	sll	r3,r21,r3
 4005038:	a084d83a 	srl	r2,r20,r2
 400503c:	1888b03a 	or	r4,r3,r2
 4005040:	400b9500 	call	400b950 <__floatunsidf>
 4005044:	1011883a 	mov	r8,r2
 4005048:	00bf8434 	movhi	r2,65040
 400504c:	01000044 	movi	r4,1
 4005050:	10d3883a 	add	r9,r2,r3
 4005054:	8dbef344 	addi	r22,r17,-1075
 4005058:	d9000815 	stw	r4,32(sp)
 400505c:	003f6f06 	br	4004e1c <_dtoa_r+0x154>
 4005060:	d8001715 	stw	zero,92(sp)
 4005064:	04400044 	movi	r17,1
 4005068:	00bfffc4 	movi	r2,-1
 400506c:	00c00044 	movi	r3,1
 4005070:	d8800e15 	stw	r2,56(sp)
 4005074:	d8002615 	stw	zero,152(sp)
 4005078:	d8800f15 	stw	r2,60(sp)
 400507c:	d8c00b15 	stw	r3,44(sp)
 4005080:	1021883a 	mov	r16,r2
 4005084:	d8801617 	ldw	r2,88(sp)
 4005088:	10001115 	stw	zero,68(r2)
 400508c:	d8801617 	ldw	r2,88(sp)
 4005090:	11401117 	ldw	r5,68(r2)
 4005094:	1009883a 	mov	r4,r2
 4005098:	40083100 	call	4008310 <_Balloc>
 400509c:	d8c01617 	ldw	r3,88(sp)
 40050a0:	d8800515 	stw	r2,20(sp)
 40050a4:	18801015 	stw	r2,64(r3)
 40050a8:	00800384 	movi	r2,14
 40050ac:	14006836 	bltu	r2,r16,4005250 <_dtoa_r+0x588>
 40050b0:	8805003a 	cmpeq	r2,r17,zero
 40050b4:	1000661e 	bne	r2,zero,4005250 <_dtoa_r+0x588>
 40050b8:	d9000d17 	ldw	r4,52(sp)
 40050bc:	0102300e 	bge	zero,r4,4005980 <_dtoa_r+0xcb8>
 40050c0:	208003cc 	andi	r2,r4,15
 40050c4:	100490fa 	slli	r2,r2,3
 40050c8:	2025d13a 	srai	r18,r4,4
 40050cc:	00c10174 	movhi	r3,1029
 40050d0:	18e18d04 	addi	r3,r3,-31180
 40050d4:	10c5883a 	add	r2,r2,r3
 40050d8:	90c0040c 	andi	r3,r18,16
 40050dc:	14000017 	ldw	r16,0(r2)
 40050e0:	14400117 	ldw	r17,4(r2)
 40050e4:	18036a1e 	bne	r3,zero,4005e90 <_dtoa_r+0x11c8>
 40050e8:	05800084 	movi	r22,2
 40050ec:	90001026 	beq	r18,zero,4005130 <_dtoa_r+0x468>
 40050f0:	04c10174 	movhi	r19,1029
 40050f4:	9ce1bf04 	addi	r19,r19,-30980
 40050f8:	9080004c 	andi	r2,r18,1
 40050fc:	1005003a 	cmpeq	r2,r2,zero
 4005100:	1000081e 	bne	r2,zero,4005124 <_dtoa_r+0x45c>
 4005104:	99800017 	ldw	r6,0(r19)
 4005108:	99c00117 	ldw	r7,4(r19)
 400510c:	880b883a 	mov	r5,r17
 4005110:	8009883a 	mov	r4,r16
 4005114:	400aebc0 	call	400aebc <__muldf3>
 4005118:	1021883a 	mov	r16,r2
 400511c:	b5800044 	addi	r22,r22,1
 4005120:	1823883a 	mov	r17,r3
 4005124:	9025d07a 	srai	r18,r18,1
 4005128:	9cc00204 	addi	r19,r19,8
 400512c:	903ff21e 	bne	r18,zero,40050f8 <_dtoa_r+0x430>
 4005130:	a80b883a 	mov	r5,r21
 4005134:	a009883a 	mov	r4,r20
 4005138:	880f883a 	mov	r7,r17
 400513c:	800d883a 	mov	r6,r16
 4005140:	400b2800 	call	400b280 <__divdf3>
 4005144:	1029883a 	mov	r20,r2
 4005148:	182b883a 	mov	r21,r3
 400514c:	d8c00c17 	ldw	r3,48(sp)
 4005150:	1805003a 	cmpeq	r2,r3,zero
 4005154:	1000081e 	bne	r2,zero,4005178 <_dtoa_r+0x4b0>
 4005158:	0005883a 	mov	r2,zero
 400515c:	00cffc34 	movhi	r3,16368
 4005160:	180f883a 	mov	r7,r3
 4005164:	a009883a 	mov	r4,r20
 4005168:	a80b883a 	mov	r5,r21
 400516c:	100d883a 	mov	r6,r2
 4005170:	400b6f80 	call	400b6f8 <__ltdf2>
 4005174:	1003fe16 	blt	r2,zero,4006170 <_dtoa_r+0x14a8>
 4005178:	b009883a 	mov	r4,r22
 400517c:	400b7800 	call	400b780 <__floatsidf>
 4005180:	180b883a 	mov	r5,r3
 4005184:	1009883a 	mov	r4,r2
 4005188:	a00d883a 	mov	r6,r20
 400518c:	a80f883a 	mov	r7,r21
 4005190:	400aebc0 	call	400aebc <__muldf3>
 4005194:	0011883a 	mov	r8,zero
 4005198:	02500734 	movhi	r9,16412
 400519c:	1009883a 	mov	r4,r2
 40051a0:	180b883a 	mov	r5,r3
 40051a4:	480f883a 	mov	r7,r9
 40051a8:	400d883a 	mov	r6,r8
 40051ac:	400ae480 	call	400ae48 <__adddf3>
 40051b0:	d9000f17 	ldw	r4,60(sp)
 40051b4:	102d883a 	mov	r22,r2
 40051b8:	00bf3034 	movhi	r2,64704
 40051bc:	18b9883a 	add	fp,r3,r2
 40051c0:	e02f883a 	mov	r23,fp
 40051c4:	20028f1e 	bne	r4,zero,4005c04 <_dtoa_r+0xf3c>
 40051c8:	0005883a 	mov	r2,zero
 40051cc:	00d00534 	movhi	r3,16404
 40051d0:	a009883a 	mov	r4,r20
 40051d4:	a80b883a 	mov	r5,r21
 40051d8:	180f883a 	mov	r7,r3
 40051dc:	100d883a 	mov	r6,r2
 40051e0:	400adc80 	call	400adc8 <__subdf3>
 40051e4:	1009883a 	mov	r4,r2
 40051e8:	e00f883a 	mov	r7,fp
 40051ec:	180b883a 	mov	r5,r3
 40051f0:	b00d883a 	mov	r6,r22
 40051f4:	1025883a 	mov	r18,r2
 40051f8:	1827883a 	mov	r19,r3
 40051fc:	400b5e80 	call	400b5e8 <__gtdf2>
 4005200:	00834f16 	blt	zero,r2,4005f40 <_dtoa_r+0x1278>
 4005204:	e0e0003c 	xorhi	r3,fp,32768
 4005208:	9009883a 	mov	r4,r18
 400520c:	980b883a 	mov	r5,r19
 4005210:	180f883a 	mov	r7,r3
 4005214:	b00d883a 	mov	r6,r22
 4005218:	400b6f80 	call	400b6f8 <__ltdf2>
 400521c:	1000080e 	bge	r2,zero,4005240 <_dtoa_r+0x578>
 4005220:	0027883a 	mov	r19,zero
 4005224:	0025883a 	mov	r18,zero
 4005228:	d8802617 	ldw	r2,152(sp)
 400522c:	df000517 	ldw	fp,20(sp)
 4005230:	d8000615 	stw	zero,24(sp)
 4005234:	0084303a 	nor	r2,zero,r2
 4005238:	d8800d15 	stw	r2,52(sp)
 400523c:	00019b06 	br	40058ac <_dtoa_r+0xbe4>
 4005240:	d9801217 	ldw	r6,72(sp)
 4005244:	d8801317 	ldw	r2,76(sp)
 4005248:	3029883a 	mov	r20,r6
 400524c:	102b883a 	mov	r21,r2
 4005250:	d8c00217 	ldw	r3,8(sp)
 4005254:	18008516 	blt	r3,zero,400546c <_dtoa_r+0x7a4>
 4005258:	d9000d17 	ldw	r4,52(sp)
 400525c:	00800384 	movi	r2,14
 4005260:	11008216 	blt	r2,r4,400546c <_dtoa_r+0x7a4>
 4005264:	200490fa 	slli	r2,r4,3
 4005268:	d9802617 	ldw	r6,152(sp)
 400526c:	00c10174 	movhi	r3,1029
 4005270:	18e18d04 	addi	r3,r3,-31180
 4005274:	10c5883a 	add	r2,r2,r3
 4005278:	14800017 	ldw	r18,0(r2)
 400527c:	14c00117 	ldw	r19,4(r2)
 4005280:	30031e16 	blt	r6,zero,4005efc <_dtoa_r+0x1234>
 4005284:	d9000517 	ldw	r4,20(sp)
 4005288:	d8c00f17 	ldw	r3,60(sp)
 400528c:	a823883a 	mov	r17,r21
 4005290:	a021883a 	mov	r16,r20
 4005294:	192b883a 	add	r21,r3,r4
 4005298:	2039883a 	mov	fp,r4
 400529c:	00000f06 	br	40052dc <_dtoa_r+0x614>
 40052a0:	0005883a 	mov	r2,zero
 40052a4:	00d00934 	movhi	r3,16420
 40052a8:	5009883a 	mov	r4,r10
 40052ac:	580b883a 	mov	r5,r11
 40052b0:	180f883a 	mov	r7,r3
 40052b4:	100d883a 	mov	r6,r2
 40052b8:	400aebc0 	call	400aebc <__muldf3>
 40052bc:	180b883a 	mov	r5,r3
 40052c0:	000d883a 	mov	r6,zero
 40052c4:	000f883a 	mov	r7,zero
 40052c8:	1009883a 	mov	r4,r2
 40052cc:	1021883a 	mov	r16,r2
 40052d0:	1823883a 	mov	r17,r3
 40052d4:	400b5600 	call	400b560 <__nedf2>
 40052d8:	10004526 	beq	r2,zero,40053f0 <_dtoa_r+0x728>
 40052dc:	900d883a 	mov	r6,r18
 40052e0:	980f883a 	mov	r7,r19
 40052e4:	8009883a 	mov	r4,r16
 40052e8:	880b883a 	mov	r5,r17
 40052ec:	400b2800 	call	400b280 <__divdf3>
 40052f0:	180b883a 	mov	r5,r3
 40052f4:	1009883a 	mov	r4,r2
 40052f8:	400b8780 	call	400b878 <__fixdfsi>
 40052fc:	1009883a 	mov	r4,r2
 4005300:	1029883a 	mov	r20,r2
 4005304:	400b7800 	call	400b780 <__floatsidf>
 4005308:	180f883a 	mov	r7,r3
 400530c:	9009883a 	mov	r4,r18
 4005310:	980b883a 	mov	r5,r19
 4005314:	100d883a 	mov	r6,r2
 4005318:	400aebc0 	call	400aebc <__muldf3>
 400531c:	180f883a 	mov	r7,r3
 4005320:	880b883a 	mov	r5,r17
 4005324:	8009883a 	mov	r4,r16
 4005328:	100d883a 	mov	r6,r2
 400532c:	400adc80 	call	400adc8 <__subdf3>
 4005330:	1015883a 	mov	r10,r2
 4005334:	a0800c04 	addi	r2,r20,48
 4005338:	e0800005 	stb	r2,0(fp)
 400533c:	e7000044 	addi	fp,fp,1
 4005340:	1817883a 	mov	r11,r3
 4005344:	e57fd61e 	bne	fp,r21,40052a0 <_dtoa_r+0x5d8>
 4005348:	500d883a 	mov	r6,r10
 400534c:	180f883a 	mov	r7,r3
 4005350:	5009883a 	mov	r4,r10
 4005354:	180b883a 	mov	r5,r3
 4005358:	400ae480 	call	400ae48 <__adddf3>
 400535c:	100d883a 	mov	r6,r2
 4005360:	9009883a 	mov	r4,r18
 4005364:	980b883a 	mov	r5,r19
 4005368:	180f883a 	mov	r7,r3
 400536c:	1021883a 	mov	r16,r2
 4005370:	1823883a 	mov	r17,r3
 4005374:	400b6f80 	call	400b6f8 <__ltdf2>
 4005378:	10000816 	blt	r2,zero,400539c <_dtoa_r+0x6d4>
 400537c:	980b883a 	mov	r5,r19
 4005380:	800d883a 	mov	r6,r16
 4005384:	880f883a 	mov	r7,r17
 4005388:	9009883a 	mov	r4,r18
 400538c:	400b4d80 	call	400b4d8 <__eqdf2>
 4005390:	1000171e 	bne	r2,zero,40053f0 <_dtoa_r+0x728>
 4005394:	a080004c 	andi	r2,r20,1
 4005398:	10001526 	beq	r2,zero,40053f0 <_dtoa_r+0x728>
 400539c:	d8800d17 	ldw	r2,52(sp)
 40053a0:	d8800415 	stw	r2,16(sp)
 40053a4:	e009883a 	mov	r4,fp
 40053a8:	213fffc4 	addi	r4,r4,-1
 40053ac:	20c00007 	ldb	r3,0(r4)
 40053b0:	00800e44 	movi	r2,57
 40053b4:	1880081e 	bne	r3,r2,40053d8 <_dtoa_r+0x710>
 40053b8:	d8800517 	ldw	r2,20(sp)
 40053bc:	113ffa1e 	bne	r2,r4,40053a8 <_dtoa_r+0x6e0>
 40053c0:	d8c00417 	ldw	r3,16(sp)
 40053c4:	d9800517 	ldw	r6,20(sp)
 40053c8:	00800c04 	movi	r2,48
 40053cc:	18c00044 	addi	r3,r3,1
 40053d0:	d8c00415 	stw	r3,16(sp)
 40053d4:	30800005 	stb	r2,0(r6)
 40053d8:	20800003 	ldbu	r2,0(r4)
 40053dc:	d8c00417 	ldw	r3,16(sp)
 40053e0:	27000044 	addi	fp,r4,1
 40053e4:	10800044 	addi	r2,r2,1
 40053e8:	d8c00d15 	stw	r3,52(sp)
 40053ec:	20800005 	stb	r2,0(r4)
 40053f0:	d9001617 	ldw	r4,88(sp)
 40053f4:	d9400717 	ldw	r5,28(sp)
 40053f8:	4007d900 	call	4007d90 <_Bfree>
 40053fc:	e0000005 	stb	zero,0(fp)
 4005400:	d9800d17 	ldw	r6,52(sp)
 4005404:	d8c02717 	ldw	r3,156(sp)
 4005408:	d9002917 	ldw	r4,164(sp)
 400540c:	30800044 	addi	r2,r6,1
 4005410:	18800015 	stw	r2,0(r3)
 4005414:	20029c26 	beq	r4,zero,4005e88 <_dtoa_r+0x11c0>
 4005418:	d8c00517 	ldw	r3,20(sp)
 400541c:	27000015 	stw	fp,0(r4)
 4005420:	003e5d06 	br	4004d98 <_dtoa_r+0xd0>
 4005424:	d9800d17 	ldw	r6,52(sp)
 4005428:	00c10174 	movhi	r3,1029
 400542c:	18e18d04 	addi	r3,r3,-31180
 4005430:	d9001217 	ldw	r4,72(sp)
 4005434:	300490fa 	slli	r2,r6,3
 4005438:	d9401317 	ldw	r5,76(sp)
 400543c:	10c5883a 	add	r2,r2,r3
 4005440:	12000017 	ldw	r8,0(r2)
 4005444:	12400117 	ldw	r9,4(r2)
 4005448:	400d883a 	mov	r6,r8
 400544c:	480f883a 	mov	r7,r9
 4005450:	400b6f80 	call	400b6f8 <__ltdf2>
 4005454:	1000030e 	bge	r2,zero,4005464 <_dtoa_r+0x79c>
 4005458:	d8800d17 	ldw	r2,52(sp)
 400545c:	10bfffc4 	addi	r2,r2,-1
 4005460:	d8800d15 	stw	r2,52(sp)
 4005464:	d8000c15 	stw	zero,48(sp)
 4005468:	003ea806 	br	4004f0c <_dtoa_r+0x244>
 400546c:	d9000b17 	ldw	r4,44(sp)
 4005470:	202cc03a 	cmpne	r22,r4,zero
 4005474:	b000c71e 	bne	r22,zero,4005794 <_dtoa_r+0xacc>
 4005478:	dc001117 	ldw	r16,68(sp)
 400547c:	dc801017 	ldw	r18,64(sp)
 4005480:	0027883a 	mov	r19,zero
 4005484:	04000b0e 	bge	zero,r16,40054b4 <_dtoa_r+0x7ec>
 4005488:	d8c00a17 	ldw	r3,40(sp)
 400548c:	00c0090e 	bge	zero,r3,40054b4 <_dtoa_r+0x7ec>
 4005490:	8005883a 	mov	r2,r16
 4005494:	1c011316 	blt	r3,r16,40058e4 <_dtoa_r+0xc1c>
 4005498:	d9000a17 	ldw	r4,40(sp)
 400549c:	d9801117 	ldw	r6,68(sp)
 40054a0:	80a1c83a 	sub	r16,r16,r2
 40054a4:	2089c83a 	sub	r4,r4,r2
 40054a8:	308dc83a 	sub	r6,r6,r2
 40054ac:	d9000a15 	stw	r4,40(sp)
 40054b0:	d9801115 	stw	r6,68(sp)
 40054b4:	d8801017 	ldw	r2,64(sp)
 40054b8:	0080150e 	bge	zero,r2,4005510 <_dtoa_r+0x848>
 40054bc:	d8c00b17 	ldw	r3,44(sp)
 40054c0:	1805003a 	cmpeq	r2,r3,zero
 40054c4:	1001c91e 	bne	r2,zero,4005bec <_dtoa_r+0xf24>
 40054c8:	04800e0e 	bge	zero,r18,4005504 <_dtoa_r+0x83c>
 40054cc:	d9001617 	ldw	r4,88(sp)
 40054d0:	980b883a 	mov	r5,r19
 40054d4:	900d883a 	mov	r6,r18
 40054d8:	4008b440 	call	4008b44 <__pow5mult>
 40054dc:	d9001617 	ldw	r4,88(sp)
 40054e0:	d9800717 	ldw	r6,28(sp)
 40054e4:	100b883a 	mov	r5,r2
 40054e8:	1027883a 	mov	r19,r2
 40054ec:	40088200 	call	4008820 <__multiply>
 40054f0:	d9001617 	ldw	r4,88(sp)
 40054f4:	d9400717 	ldw	r5,28(sp)
 40054f8:	1023883a 	mov	r17,r2
 40054fc:	4007d900 	call	4007d90 <_Bfree>
 4005500:	dc400715 	stw	r17,28(sp)
 4005504:	d9001017 	ldw	r4,64(sp)
 4005508:	248dc83a 	sub	r6,r4,r18
 400550c:	30010e1e 	bne	r6,zero,4005948 <_dtoa_r+0xc80>
 4005510:	d9001617 	ldw	r4,88(sp)
 4005514:	04400044 	movi	r17,1
 4005518:	880b883a 	mov	r5,r17
 400551c:	4008a080 	call	4008a08 <__i2b>
 4005520:	d9800917 	ldw	r6,36(sp)
 4005524:	1025883a 	mov	r18,r2
 4005528:	0180040e 	bge	zero,r6,400553c <_dtoa_r+0x874>
 400552c:	d9001617 	ldw	r4,88(sp)
 4005530:	100b883a 	mov	r5,r2
 4005534:	4008b440 	call	4008b44 <__pow5mult>
 4005538:	1025883a 	mov	r18,r2
 400553c:	d8801717 	ldw	r2,92(sp)
 4005540:	8880f30e 	bge	r17,r2,4005910 <_dtoa_r+0xc48>
 4005544:	0023883a 	mov	r17,zero
 4005548:	d9800917 	ldw	r6,36(sp)
 400554c:	30019e1e 	bne	r6,zero,4005bc8 <_dtoa_r+0xf00>
 4005550:	00c00044 	movi	r3,1
 4005554:	d9000a17 	ldw	r4,40(sp)
 4005558:	20c5883a 	add	r2,r4,r3
 400555c:	10c007cc 	andi	r3,r2,31
 4005560:	1800841e 	bne	r3,zero,4005774 <_dtoa_r+0xaac>
 4005564:	00800704 	movi	r2,28
 4005568:	d9000a17 	ldw	r4,40(sp)
 400556c:	d9801117 	ldw	r6,68(sp)
 4005570:	80a1883a 	add	r16,r16,r2
 4005574:	2089883a 	add	r4,r4,r2
 4005578:	308d883a 	add	r6,r6,r2
 400557c:	d9000a15 	stw	r4,40(sp)
 4005580:	d9801115 	stw	r6,68(sp)
 4005584:	d8801117 	ldw	r2,68(sp)
 4005588:	0080050e 	bge	zero,r2,40055a0 <_dtoa_r+0x8d8>
 400558c:	d9400717 	ldw	r5,28(sp)
 4005590:	d9001617 	ldw	r4,88(sp)
 4005594:	100d883a 	mov	r6,r2
 4005598:	40086d40 	call	40086d4 <__lshift>
 400559c:	d8800715 	stw	r2,28(sp)
 40055a0:	d8c00a17 	ldw	r3,40(sp)
 40055a4:	00c0050e 	bge	zero,r3,40055bc <_dtoa_r+0x8f4>
 40055a8:	d9001617 	ldw	r4,88(sp)
 40055ac:	900b883a 	mov	r5,r18
 40055b0:	180d883a 	mov	r6,r3
 40055b4:	40086d40 	call	40086d4 <__lshift>
 40055b8:	1025883a 	mov	r18,r2
 40055bc:	d9000c17 	ldw	r4,48(sp)
 40055c0:	2005003a 	cmpeq	r2,r4,zero
 40055c4:	10016f26 	beq	r2,zero,4005b84 <_dtoa_r+0xebc>
 40055c8:	d9000f17 	ldw	r4,60(sp)
 40055cc:	0102170e 	bge	zero,r4,4005e2c <_dtoa_r+0x1164>
 40055d0:	d9800b17 	ldw	r6,44(sp)
 40055d4:	3005003a 	cmpeq	r2,r6,zero
 40055d8:	1000881e 	bne	r2,zero,40057fc <_dtoa_r+0xb34>
 40055dc:	0400050e 	bge	zero,r16,40055f4 <_dtoa_r+0x92c>
 40055e0:	d9001617 	ldw	r4,88(sp)
 40055e4:	980b883a 	mov	r5,r19
 40055e8:	800d883a 	mov	r6,r16
 40055ec:	40086d40 	call	40086d4 <__lshift>
 40055f0:	1027883a 	mov	r19,r2
 40055f4:	8804c03a 	cmpne	r2,r17,zero
 40055f8:	1002541e 	bne	r2,zero,4005f4c <_dtoa_r+0x1284>
 40055fc:	980b883a 	mov	r5,r19
 4005600:	dd800517 	ldw	r22,20(sp)
 4005604:	dcc00615 	stw	r19,24(sp)
 4005608:	a700004c 	andi	fp,r20,1
 400560c:	2827883a 	mov	r19,r5
 4005610:	d9000717 	ldw	r4,28(sp)
 4005614:	900b883a 	mov	r5,r18
 4005618:	4004ab00 	call	4004ab0 <quorem>
 400561c:	d9000717 	ldw	r4,28(sp)
 4005620:	d9400617 	ldw	r5,24(sp)
 4005624:	1023883a 	mov	r17,r2
 4005628:	8dc00c04 	addi	r23,r17,48
 400562c:	4007eec0 	call	4007eec <__mcmp>
 4005630:	d9001617 	ldw	r4,88(sp)
 4005634:	900b883a 	mov	r5,r18
 4005638:	980d883a 	mov	r6,r19
 400563c:	1029883a 	mov	r20,r2
 4005640:	40085480 	call	4008548 <__mdiff>
 4005644:	102b883a 	mov	r21,r2
 4005648:	10800317 	ldw	r2,12(r2)
 400564c:	1001281e 	bne	r2,zero,4005af0 <_dtoa_r+0xe28>
 4005650:	d9000717 	ldw	r4,28(sp)
 4005654:	a80b883a 	mov	r5,r21
 4005658:	4007eec0 	call	4007eec <__mcmp>
 400565c:	d9001617 	ldw	r4,88(sp)
 4005660:	1021883a 	mov	r16,r2
 4005664:	a80b883a 	mov	r5,r21
 4005668:	4007d900 	call	4007d90 <_Bfree>
 400566c:	8000041e 	bne	r16,zero,4005680 <_dtoa_r+0x9b8>
 4005670:	d8801717 	ldw	r2,92(sp)
 4005674:	1000021e 	bne	r2,zero,4005680 <_dtoa_r+0x9b8>
 4005678:	e004c03a 	cmpne	r2,fp,zero
 400567c:	10011726 	beq	r2,zero,4005adc <_dtoa_r+0xe14>
 4005680:	a0010616 	blt	r20,zero,4005a9c <_dtoa_r+0xdd4>
 4005684:	a000041e 	bne	r20,zero,4005698 <_dtoa_r+0x9d0>
 4005688:	d8c01717 	ldw	r3,92(sp)
 400568c:	1800021e 	bne	r3,zero,4005698 <_dtoa_r+0x9d0>
 4005690:	e004c03a 	cmpne	r2,fp,zero
 4005694:	10010126 	beq	r2,zero,4005a9c <_dtoa_r+0xdd4>
 4005698:	04023d16 	blt	zero,r16,4005f90 <_dtoa_r+0x12c8>
 400569c:	b5c00005 	stb	r23,0(r22)
 40056a0:	d9800517 	ldw	r6,20(sp)
 40056a4:	d9000f17 	ldw	r4,60(sp)
 40056a8:	b5800044 	addi	r22,r22,1
 40056ac:	3105883a 	add	r2,r6,r4
 40056b0:	b0806526 	beq	r22,r2,4005848 <_dtoa_r+0xb80>
 40056b4:	d9400717 	ldw	r5,28(sp)
 40056b8:	d9001617 	ldw	r4,88(sp)
 40056bc:	01800284 	movi	r6,10
 40056c0:	000f883a 	mov	r7,zero
 40056c4:	4008a440 	call	4008a44 <__multadd>
 40056c8:	d8800715 	stw	r2,28(sp)
 40056cc:	d8800617 	ldw	r2,24(sp)
 40056d0:	14c10c26 	beq	r2,r19,4005b04 <_dtoa_r+0xe3c>
 40056d4:	d9400617 	ldw	r5,24(sp)
 40056d8:	d9001617 	ldw	r4,88(sp)
 40056dc:	01800284 	movi	r6,10
 40056e0:	000f883a 	mov	r7,zero
 40056e4:	4008a440 	call	4008a44 <__multadd>
 40056e8:	d9001617 	ldw	r4,88(sp)
 40056ec:	980b883a 	mov	r5,r19
 40056f0:	01800284 	movi	r6,10
 40056f4:	000f883a 	mov	r7,zero
 40056f8:	d8800615 	stw	r2,24(sp)
 40056fc:	4008a440 	call	4008a44 <__multadd>
 4005700:	1027883a 	mov	r19,r2
 4005704:	003fc206 	br	4005610 <_dtoa_r+0x948>
 4005708:	2445c83a 	sub	r2,r4,r17
 400570c:	a088983a 	sll	r4,r20,r2
 4005710:	003e4b06 	br	4005040 <_dtoa_r+0x378>
 4005714:	01bfffc4 	movi	r6,-1
 4005718:	00800044 	movi	r2,1
 400571c:	d9800e15 	stw	r6,56(sp)
 4005720:	d9800f15 	stw	r6,60(sp)
 4005724:	d8800b15 	stw	r2,44(sp)
 4005728:	d8c01617 	ldw	r3,88(sp)
 400572c:	008005c4 	movi	r2,23
 4005730:	18001115 	stw	zero,68(r3)
 4005734:	1580082e 	bgeu	r2,r22,4005758 <_dtoa_r+0xa90>
 4005738:	00c00104 	movi	r3,4
 400573c:	0009883a 	mov	r4,zero
 4005740:	18c7883a 	add	r3,r3,r3
 4005744:	18800504 	addi	r2,r3,20
 4005748:	21000044 	addi	r4,r4,1
 400574c:	b0bffc2e 	bgeu	r22,r2,4005740 <_dtoa_r+0xa78>
 4005750:	d9801617 	ldw	r6,88(sp)
 4005754:	31001115 	stw	r4,68(r6)
 4005758:	dc000f17 	ldw	r16,60(sp)
 400575c:	003e4b06 	br	400508c <_dtoa_r+0x3c4>
 4005760:	d9801717 	ldw	r6,92(sp)
 4005764:	0023883a 	mov	r17,zero
 4005768:	31bfff04 	addi	r6,r6,-4
 400576c:	d9801715 	stw	r6,92(sp)
 4005770:	003df806 	br	4004f54 <_dtoa_r+0x28c>
 4005774:	00800804 	movi	r2,32
 4005778:	10c9c83a 	sub	r4,r2,r3
 400577c:	00c00104 	movi	r3,4
 4005780:	19005a16 	blt	r3,r4,40058ec <_dtoa_r+0xc24>
 4005784:	008000c4 	movi	r2,3
 4005788:	113f7e16 	blt	r2,r4,4005584 <_dtoa_r+0x8bc>
 400578c:	20800704 	addi	r2,r4,28
 4005790:	003f7506 	br	4005568 <_dtoa_r+0x8a0>
 4005794:	d9801717 	ldw	r6,92(sp)
 4005798:	00800044 	movi	r2,1
 400579c:	1180a10e 	bge	r2,r6,4005a24 <_dtoa_r+0xd5c>
 40057a0:	d9800f17 	ldw	r6,60(sp)
 40057a4:	d8c01017 	ldw	r3,64(sp)
 40057a8:	30bfffc4 	addi	r2,r6,-1
 40057ac:	1881c616 	blt	r3,r2,4005ec8 <_dtoa_r+0x1200>
 40057b0:	18a5c83a 	sub	r18,r3,r2
 40057b4:	d8800f17 	ldw	r2,60(sp)
 40057b8:	10026216 	blt	r2,zero,4006144 <_dtoa_r+0x147c>
 40057bc:	dc001117 	ldw	r16,68(sp)
 40057c0:	1007883a 	mov	r3,r2
 40057c4:	d9800a17 	ldw	r6,40(sp)
 40057c8:	d8801117 	ldw	r2,68(sp)
 40057cc:	d9001617 	ldw	r4,88(sp)
 40057d0:	30cd883a 	add	r6,r6,r3
 40057d4:	10c5883a 	add	r2,r2,r3
 40057d8:	01400044 	movi	r5,1
 40057dc:	d9800a15 	stw	r6,40(sp)
 40057e0:	d8801115 	stw	r2,68(sp)
 40057e4:	4008a080 	call	4008a08 <__i2b>
 40057e8:	1027883a 	mov	r19,r2
 40057ec:	003f2506 	br	4005484 <_dtoa_r+0x7bc>
 40057f0:	00c10174 	movhi	r3,1029
 40057f4:	18e17004 	addi	r3,r3,-31296
 40057f8:	003d6706 	br	4004d98 <_dtoa_r+0xd0>
 40057fc:	dd800517 	ldw	r22,20(sp)
 4005800:	04000044 	movi	r16,1
 4005804:	00000706 	br	4005824 <_dtoa_r+0xb5c>
 4005808:	d9400717 	ldw	r5,28(sp)
 400580c:	d9001617 	ldw	r4,88(sp)
 4005810:	01800284 	movi	r6,10
 4005814:	000f883a 	mov	r7,zero
 4005818:	4008a440 	call	4008a44 <__multadd>
 400581c:	d8800715 	stw	r2,28(sp)
 4005820:	84000044 	addi	r16,r16,1
 4005824:	d9000717 	ldw	r4,28(sp)
 4005828:	900b883a 	mov	r5,r18
 400582c:	4004ab00 	call	4004ab0 <quorem>
 4005830:	15c00c04 	addi	r23,r2,48
 4005834:	b5c00005 	stb	r23,0(r22)
 4005838:	d8c00f17 	ldw	r3,60(sp)
 400583c:	b5800044 	addi	r22,r22,1
 4005840:	80fff116 	blt	r16,r3,4005808 <_dtoa_r+0xb40>
 4005844:	d8000615 	stw	zero,24(sp)
 4005848:	d9400717 	ldw	r5,28(sp)
 400584c:	d9001617 	ldw	r4,88(sp)
 4005850:	01800044 	movi	r6,1
 4005854:	40086d40 	call	40086d4 <__lshift>
 4005858:	1009883a 	mov	r4,r2
 400585c:	900b883a 	mov	r5,r18
 4005860:	d8800715 	stw	r2,28(sp)
 4005864:	4007eec0 	call	4007eec <__mcmp>
 4005868:	00803c0e 	bge	zero,r2,400595c <_dtoa_r+0xc94>
 400586c:	b009883a 	mov	r4,r22
 4005870:	213fffc4 	addi	r4,r4,-1
 4005874:	21400003 	ldbu	r5,0(r4)
 4005878:	00800e44 	movi	r2,57
 400587c:	28c03fcc 	andi	r3,r5,255
 4005880:	18c0201c 	xori	r3,r3,128
 4005884:	18ffe004 	addi	r3,r3,-128
 4005888:	1881981e 	bne	r3,r2,4005eec <_dtoa_r+0x1224>
 400588c:	d9800517 	ldw	r6,20(sp)
 4005890:	21bff71e 	bne	r4,r6,4005870 <_dtoa_r+0xba8>
 4005894:	d8800d17 	ldw	r2,52(sp)
 4005898:	37000044 	addi	fp,r6,1
 400589c:	10800044 	addi	r2,r2,1
 40058a0:	d8800d15 	stw	r2,52(sp)
 40058a4:	00800c44 	movi	r2,49
 40058a8:	30800005 	stb	r2,0(r6)
 40058ac:	d9001617 	ldw	r4,88(sp)
 40058b0:	900b883a 	mov	r5,r18
 40058b4:	4007d900 	call	4007d90 <_Bfree>
 40058b8:	983ecd26 	beq	r19,zero,40053f0 <_dtoa_r+0x728>
 40058bc:	d8c00617 	ldw	r3,24(sp)
 40058c0:	18000426 	beq	r3,zero,40058d4 <_dtoa_r+0xc0c>
 40058c4:	1cc00326 	beq	r3,r19,40058d4 <_dtoa_r+0xc0c>
 40058c8:	d9001617 	ldw	r4,88(sp)
 40058cc:	180b883a 	mov	r5,r3
 40058d0:	4007d900 	call	4007d90 <_Bfree>
 40058d4:	d9001617 	ldw	r4,88(sp)
 40058d8:	980b883a 	mov	r5,r19
 40058dc:	4007d900 	call	4007d90 <_Bfree>
 40058e0:	003ec306 	br	40053f0 <_dtoa_r+0x728>
 40058e4:	1805883a 	mov	r2,r3
 40058e8:	003eeb06 	br	4005498 <_dtoa_r+0x7d0>
 40058ec:	d9800a17 	ldw	r6,40(sp)
 40058f0:	d8c01117 	ldw	r3,68(sp)
 40058f4:	20bfff04 	addi	r2,r4,-4
 40058f8:	308d883a 	add	r6,r6,r2
 40058fc:	1887883a 	add	r3,r3,r2
 4005900:	80a1883a 	add	r16,r16,r2
 4005904:	d9800a15 	stw	r6,40(sp)
 4005908:	d8c01115 	stw	r3,68(sp)
 400590c:	003f1d06 	br	4005584 <_dtoa_r+0x8bc>
 4005910:	a03f0c1e 	bne	r20,zero,4005544 <_dtoa_r+0x87c>
 4005914:	00800434 	movhi	r2,16
 4005918:	10bfffc4 	addi	r2,r2,-1
 400591c:	a884703a 	and	r2,r21,r2
 4005920:	103f081e 	bne	r2,zero,4005544 <_dtoa_r+0x87c>
 4005924:	a89ffc2c 	andhi	r2,r21,32752
 4005928:	103f0626 	beq	r2,zero,4005544 <_dtoa_r+0x87c>
 400592c:	d8c01117 	ldw	r3,68(sp)
 4005930:	d9000a17 	ldw	r4,40(sp)
 4005934:	18c00044 	addi	r3,r3,1
 4005938:	21000044 	addi	r4,r4,1
 400593c:	d8c01115 	stw	r3,68(sp)
 4005940:	d9000a15 	stw	r4,40(sp)
 4005944:	003f0006 	br	4005548 <_dtoa_r+0x880>
 4005948:	d9400717 	ldw	r5,28(sp)
 400594c:	d9001617 	ldw	r4,88(sp)
 4005950:	4008b440 	call	4008b44 <__pow5mult>
 4005954:	d8800715 	stw	r2,28(sp)
 4005958:	003eed06 	br	4005510 <_dtoa_r+0x848>
 400595c:	1000021e 	bne	r2,zero,4005968 <_dtoa_r+0xca0>
 4005960:	b880004c 	andi	r2,r23,1
 4005964:	103fc11e 	bne	r2,zero,400586c <_dtoa_r+0xba4>
 4005968:	b5bfffc4 	addi	r22,r22,-1
 400596c:	b0c00007 	ldb	r3,0(r22)
 4005970:	00800c04 	movi	r2,48
 4005974:	18bffc26 	beq	r3,r2,4005968 <_dtoa_r+0xca0>
 4005978:	b7000044 	addi	fp,r22,1
 400597c:	003fcb06 	br	40058ac <_dtoa_r+0xbe4>
 4005980:	d9800d17 	ldw	r6,52(sp)
 4005984:	018fc83a 	sub	r7,zero,r6
 4005988:	3801f726 	beq	r7,zero,4006168 <_dtoa_r+0x14a0>
 400598c:	398003cc 	andi	r6,r7,15
 4005990:	300c90fa 	slli	r6,r6,3
 4005994:	01410174 	movhi	r5,1029
 4005998:	29618d04 	addi	r5,r5,-31180
 400599c:	d9001217 	ldw	r4,72(sp)
 40059a0:	314d883a 	add	r6,r6,r5
 40059a4:	30c00117 	ldw	r3,4(r6)
 40059a8:	30800017 	ldw	r2,0(r6)
 40059ac:	d9401317 	ldw	r5,76(sp)
 40059b0:	3821d13a 	srai	r16,r7,4
 40059b4:	100d883a 	mov	r6,r2
 40059b8:	180f883a 	mov	r7,r3
 40059bc:	400aebc0 	call	400aebc <__muldf3>
 40059c0:	1011883a 	mov	r8,r2
 40059c4:	1813883a 	mov	r9,r3
 40059c8:	1029883a 	mov	r20,r2
 40059cc:	182b883a 	mov	r21,r3
 40059d0:	8001e526 	beq	r16,zero,4006168 <_dtoa_r+0x14a0>
 40059d4:	05800084 	movi	r22,2
 40059d8:	04410174 	movhi	r17,1029
 40059dc:	8c61bf04 	addi	r17,r17,-30980
 40059e0:	8080004c 	andi	r2,r16,1
 40059e4:	1005003a 	cmpeq	r2,r2,zero
 40059e8:	1000081e 	bne	r2,zero,4005a0c <_dtoa_r+0xd44>
 40059ec:	89800017 	ldw	r6,0(r17)
 40059f0:	89c00117 	ldw	r7,4(r17)
 40059f4:	480b883a 	mov	r5,r9
 40059f8:	4009883a 	mov	r4,r8
 40059fc:	400aebc0 	call	400aebc <__muldf3>
 4005a00:	1011883a 	mov	r8,r2
 4005a04:	b5800044 	addi	r22,r22,1
 4005a08:	1813883a 	mov	r9,r3
 4005a0c:	8021d07a 	srai	r16,r16,1
 4005a10:	8c400204 	addi	r17,r17,8
 4005a14:	803ff21e 	bne	r16,zero,40059e0 <_dtoa_r+0xd18>
 4005a18:	4029883a 	mov	r20,r8
 4005a1c:	482b883a 	mov	r21,r9
 4005a20:	003dca06 	br	400514c <_dtoa_r+0x484>
 4005a24:	d9000817 	ldw	r4,32(sp)
 4005a28:	2005003a 	cmpeq	r2,r4,zero
 4005a2c:	1001f61e 	bne	r2,zero,4006208 <_dtoa_r+0x1540>
 4005a30:	dc001117 	ldw	r16,68(sp)
 4005a34:	dc801017 	ldw	r18,64(sp)
 4005a38:	18c10cc4 	addi	r3,r3,1075
 4005a3c:	003f6106 	br	40057c4 <_dtoa_r+0xafc>
 4005a40:	d8000b15 	stw	zero,44(sp)
 4005a44:	d9802617 	ldw	r6,152(sp)
 4005a48:	d8c00d17 	ldw	r3,52(sp)
 4005a4c:	30800044 	addi	r2,r6,1
 4005a50:	18ad883a 	add	r22,r3,r2
 4005a54:	b13fffc4 	addi	r4,r22,-1
 4005a58:	d9000e15 	stw	r4,56(sp)
 4005a5c:	0581f60e 	bge	zero,r22,4006238 <_dtoa_r+0x1570>
 4005a60:	dd800f15 	stw	r22,60(sp)
 4005a64:	003f3006 	br	4005728 <_dtoa_r+0xa60>
 4005a68:	d8000b15 	stw	zero,44(sp)
 4005a6c:	d9002617 	ldw	r4,152(sp)
 4005a70:	0101eb0e 	bge	zero,r4,4006220 <_dtoa_r+0x1558>
 4005a74:	202d883a 	mov	r22,r4
 4005a78:	d9000e15 	stw	r4,56(sp)
 4005a7c:	d9000f15 	stw	r4,60(sp)
 4005a80:	003f2906 	br	4005728 <_dtoa_r+0xa60>
 4005a84:	01800044 	movi	r6,1
 4005a88:	d9800b15 	stw	r6,44(sp)
 4005a8c:	003ff706 	br	4005a6c <_dtoa_r+0xda4>
 4005a90:	01000044 	movi	r4,1
 4005a94:	d9000b15 	stw	r4,44(sp)
 4005a98:	003fea06 	br	4005a44 <_dtoa_r+0xd7c>
 4005a9c:	04000c0e 	bge	zero,r16,4005ad0 <_dtoa_r+0xe08>
 4005aa0:	d9400717 	ldw	r5,28(sp)
 4005aa4:	d9001617 	ldw	r4,88(sp)
 4005aa8:	01800044 	movi	r6,1
 4005aac:	40086d40 	call	40086d4 <__lshift>
 4005ab0:	1009883a 	mov	r4,r2
 4005ab4:	900b883a 	mov	r5,r18
 4005ab8:	d8800715 	stw	r2,28(sp)
 4005abc:	4007eec0 	call	4007eec <__mcmp>
 4005ac0:	0081e00e 	bge	zero,r2,4006244 <_dtoa_r+0x157c>
 4005ac4:	bdc00044 	addi	r23,r23,1
 4005ac8:	00800e84 	movi	r2,58
 4005acc:	b881a226 	beq	r23,r2,4006158 <_dtoa_r+0x1490>
 4005ad0:	b7000044 	addi	fp,r22,1
 4005ad4:	b5c00005 	stb	r23,0(r22)
 4005ad8:	003f7406 	br	40058ac <_dtoa_r+0xbe4>
 4005adc:	00800e44 	movi	r2,57
 4005ae0:	b8819d26 	beq	r23,r2,4006158 <_dtoa_r+0x1490>
 4005ae4:	053ffa0e 	bge	zero,r20,4005ad0 <_dtoa_r+0xe08>
 4005ae8:	8dc00c44 	addi	r23,r17,49
 4005aec:	003ff806 	br	4005ad0 <_dtoa_r+0xe08>
 4005af0:	d9001617 	ldw	r4,88(sp)
 4005af4:	a80b883a 	mov	r5,r21
 4005af8:	04000044 	movi	r16,1
 4005afc:	4007d900 	call	4007d90 <_Bfree>
 4005b00:	003edf06 	br	4005680 <_dtoa_r+0x9b8>
 4005b04:	d9001617 	ldw	r4,88(sp)
 4005b08:	980b883a 	mov	r5,r19
 4005b0c:	01800284 	movi	r6,10
 4005b10:	000f883a 	mov	r7,zero
 4005b14:	4008a440 	call	4008a44 <__multadd>
 4005b18:	1027883a 	mov	r19,r2
 4005b1c:	d8800615 	stw	r2,24(sp)
 4005b20:	003ebb06 	br	4005610 <_dtoa_r+0x948>
 4005b24:	d9801117 	ldw	r6,68(sp)
 4005b28:	d8800d17 	ldw	r2,52(sp)
 4005b2c:	d8000915 	stw	zero,36(sp)
 4005b30:	308dc83a 	sub	r6,r6,r2
 4005b34:	0087c83a 	sub	r3,zero,r2
 4005b38:	d9801115 	stw	r6,68(sp)
 4005b3c:	d8c01015 	stw	r3,64(sp)
 4005b40:	003cfe06 	br	4004f3c <_dtoa_r+0x274>
 4005b44:	018dc83a 	sub	r6,zero,r6
 4005b48:	d9801115 	stw	r6,68(sp)
 4005b4c:	d8000a15 	stw	zero,40(sp)
 4005b50:	003cf306 	br	4004f20 <_dtoa_r+0x258>
 4005b54:	d9000d17 	ldw	r4,52(sp)
 4005b58:	400b7800 	call	400b780 <__floatsidf>
 4005b5c:	880b883a 	mov	r5,r17
 4005b60:	8009883a 	mov	r4,r16
 4005b64:	180f883a 	mov	r7,r3
 4005b68:	100d883a 	mov	r6,r2
 4005b6c:	400b5600 	call	400b560 <__nedf2>
 4005b70:	103ce126 	beq	r2,zero,4004ef8 <_dtoa_r+0x230>
 4005b74:	d9800d17 	ldw	r6,52(sp)
 4005b78:	31bfffc4 	addi	r6,r6,-1
 4005b7c:	d9800d15 	stw	r6,52(sp)
 4005b80:	003cdd06 	br	4004ef8 <_dtoa_r+0x230>
 4005b84:	d9000717 	ldw	r4,28(sp)
 4005b88:	900b883a 	mov	r5,r18
 4005b8c:	4007eec0 	call	4007eec <__mcmp>
 4005b90:	103e8d0e 	bge	r2,zero,40055c8 <_dtoa_r+0x900>
 4005b94:	d9400717 	ldw	r5,28(sp)
 4005b98:	d9001617 	ldw	r4,88(sp)
 4005b9c:	01800284 	movi	r6,10
 4005ba0:	000f883a 	mov	r7,zero
 4005ba4:	4008a440 	call	4008a44 <__multadd>
 4005ba8:	d9800d17 	ldw	r6,52(sp)
 4005bac:	d8800715 	stw	r2,28(sp)
 4005bb0:	31bfffc4 	addi	r6,r6,-1
 4005bb4:	d9800d15 	stw	r6,52(sp)
 4005bb8:	b001a71e 	bne	r22,zero,4006258 <_dtoa_r+0x1590>
 4005bbc:	d8800e17 	ldw	r2,56(sp)
 4005bc0:	d8800f15 	stw	r2,60(sp)
 4005bc4:	003e8006 	br	40055c8 <_dtoa_r+0x900>
 4005bc8:	90800417 	ldw	r2,16(r18)
 4005bcc:	1085883a 	add	r2,r2,r2
 4005bd0:	1085883a 	add	r2,r2,r2
 4005bd4:	1485883a 	add	r2,r2,r18
 4005bd8:	11000417 	ldw	r4,16(r2)
 4005bdc:	4007db80 	call	4007db8 <__hi0bits>
 4005be0:	00c00804 	movi	r3,32
 4005be4:	1887c83a 	sub	r3,r3,r2
 4005be8:	003e5a06 	br	4005554 <_dtoa_r+0x88c>
 4005bec:	d9400717 	ldw	r5,28(sp)
 4005bf0:	d9801017 	ldw	r6,64(sp)
 4005bf4:	d9001617 	ldw	r4,88(sp)
 4005bf8:	4008b440 	call	4008b44 <__pow5mult>
 4005bfc:	d8800715 	stw	r2,28(sp)
 4005c00:	003e4306 	br	4005510 <_dtoa_r+0x848>
 4005c04:	d9800f17 	ldw	r6,60(sp)
 4005c08:	d8800d17 	ldw	r2,52(sp)
 4005c0c:	d9800315 	stw	r6,12(sp)
 4005c10:	d8800415 	stw	r2,16(sp)
 4005c14:	d8c00b17 	ldw	r3,44(sp)
 4005c18:	1805003a 	cmpeq	r2,r3,zero
 4005c1c:	1000e21e 	bne	r2,zero,4005fa8 <_dtoa_r+0x12e0>
 4005c20:	d9000317 	ldw	r4,12(sp)
 4005c24:	0005883a 	mov	r2,zero
 4005c28:	00cff834 	movhi	r3,16352
 4005c2c:	200c90fa 	slli	r6,r4,3
 4005c30:	01010174 	movhi	r4,1029
 4005c34:	21218d04 	addi	r4,r4,-31180
 4005c38:	180b883a 	mov	r5,r3
 4005c3c:	310d883a 	add	r6,r6,r4
 4005c40:	327fff17 	ldw	r9,-4(r6)
 4005c44:	323ffe17 	ldw	r8,-8(r6)
 4005c48:	1009883a 	mov	r4,r2
 4005c4c:	480f883a 	mov	r7,r9
 4005c50:	400d883a 	mov	r6,r8
 4005c54:	400b2800 	call	400b280 <__divdf3>
 4005c58:	180b883a 	mov	r5,r3
 4005c5c:	b00d883a 	mov	r6,r22
 4005c60:	b80f883a 	mov	r7,r23
 4005c64:	1009883a 	mov	r4,r2
 4005c68:	400adc80 	call	400adc8 <__subdf3>
 4005c6c:	a80b883a 	mov	r5,r21
 4005c70:	a009883a 	mov	r4,r20
 4005c74:	d8c01915 	stw	r3,100(sp)
 4005c78:	d8801815 	stw	r2,96(sp)
 4005c7c:	400b8780 	call	400b878 <__fixdfsi>
 4005c80:	1009883a 	mov	r4,r2
 4005c84:	1027883a 	mov	r19,r2
 4005c88:	400b7800 	call	400b780 <__floatsidf>
 4005c8c:	a80b883a 	mov	r5,r21
 4005c90:	a009883a 	mov	r4,r20
 4005c94:	180f883a 	mov	r7,r3
 4005c98:	100d883a 	mov	r6,r2
 4005c9c:	400adc80 	call	400adc8 <__subdf3>
 4005ca0:	d9801817 	ldw	r6,96(sp)
 4005ca4:	1823883a 	mov	r17,r3
 4005ca8:	d8801415 	stw	r2,80(sp)
 4005cac:	302d883a 	mov	r22,r6
 4005cb0:	d9800517 	ldw	r6,20(sp)
 4005cb4:	9cc00c04 	addi	r19,r19,48
 4005cb8:	dc401515 	stw	r17,84(sp)
 4005cbc:	d8c01917 	ldw	r3,100(sp)
 4005cc0:	34c00005 	stb	r19,0(r6)
 4005cc4:	d8800517 	ldw	r2,20(sp)
 4005cc8:	d9401917 	ldw	r5,100(sp)
 4005ccc:	d9801417 	ldw	r6,80(sp)
 4005cd0:	b009883a 	mov	r4,r22
 4005cd4:	880f883a 	mov	r7,r17
 4005cd8:	182f883a 	mov	r23,r3
 4005cdc:	17000044 	addi	fp,r2,1
 4005ce0:	400b5e80 	call	400b5e8 <__gtdf2>
 4005ce4:	00804e16 	blt	zero,r2,4005e20 <_dtoa_r+0x1158>
 4005ce8:	d9801417 	ldw	r6,80(sp)
 4005cec:	0005883a 	mov	r2,zero
 4005cf0:	00cffc34 	movhi	r3,16368
 4005cf4:	180b883a 	mov	r5,r3
 4005cf8:	880f883a 	mov	r7,r17
 4005cfc:	1009883a 	mov	r4,r2
 4005d00:	400adc80 	call	400adc8 <__subdf3>
 4005d04:	d9401917 	ldw	r5,100(sp)
 4005d08:	180f883a 	mov	r7,r3
 4005d0c:	b009883a 	mov	r4,r22
 4005d10:	100d883a 	mov	r6,r2
 4005d14:	400b5e80 	call	400b5e8 <__gtdf2>
 4005d18:	00bda216 	blt	zero,r2,40053a4 <_dtoa_r+0x6dc>
 4005d1c:	d8c00317 	ldw	r3,12(sp)
 4005d20:	00800044 	movi	r2,1
 4005d24:	10c01216 	blt	r2,r3,4005d70 <_dtoa_r+0x10a8>
 4005d28:	003d4506 	br	4005240 <_dtoa_r+0x578>
 4005d2c:	d9801417 	ldw	r6,80(sp)
 4005d30:	0005883a 	mov	r2,zero
 4005d34:	00cffc34 	movhi	r3,16368
 4005d38:	180b883a 	mov	r5,r3
 4005d3c:	880f883a 	mov	r7,r17
 4005d40:	1009883a 	mov	r4,r2
 4005d44:	400adc80 	call	400adc8 <__subdf3>
 4005d48:	d9c01b17 	ldw	r7,108(sp)
 4005d4c:	180b883a 	mov	r5,r3
 4005d50:	1009883a 	mov	r4,r2
 4005d54:	b00d883a 	mov	r6,r22
 4005d58:	400b6f80 	call	400b6f8 <__ltdf2>
 4005d5c:	103d9116 	blt	r2,zero,40053a4 <_dtoa_r+0x6dc>
 4005d60:	d9800517 	ldw	r6,20(sp)
 4005d64:	d9000317 	ldw	r4,12(sp)
 4005d68:	3105883a 	add	r2,r6,r4
 4005d6c:	e0bd3426 	beq	fp,r2,4005240 <_dtoa_r+0x578>
 4005d70:	04500934 	movhi	r17,16420
 4005d74:	0021883a 	mov	r16,zero
 4005d78:	b80b883a 	mov	r5,r23
 4005d7c:	b009883a 	mov	r4,r22
 4005d80:	800d883a 	mov	r6,r16
 4005d84:	880f883a 	mov	r7,r17
 4005d88:	400aebc0 	call	400aebc <__muldf3>
 4005d8c:	d9401517 	ldw	r5,84(sp)
 4005d90:	d9001417 	ldw	r4,80(sp)
 4005d94:	880f883a 	mov	r7,r17
 4005d98:	000d883a 	mov	r6,zero
 4005d9c:	d8801a15 	stw	r2,104(sp)
 4005da0:	d8c01b15 	stw	r3,108(sp)
 4005da4:	400aebc0 	call	400aebc <__muldf3>
 4005da8:	180b883a 	mov	r5,r3
 4005dac:	1009883a 	mov	r4,r2
 4005db0:	1823883a 	mov	r17,r3
 4005db4:	1021883a 	mov	r16,r2
 4005db8:	400b8780 	call	400b878 <__fixdfsi>
 4005dbc:	1009883a 	mov	r4,r2
 4005dc0:	102b883a 	mov	r21,r2
 4005dc4:	400b7800 	call	400b780 <__floatsidf>
 4005dc8:	880b883a 	mov	r5,r17
 4005dcc:	8009883a 	mov	r4,r16
 4005dd0:	180f883a 	mov	r7,r3
 4005dd4:	100d883a 	mov	r6,r2
 4005dd8:	400adc80 	call	400adc8 <__subdf3>
 4005ddc:	1021883a 	mov	r16,r2
 4005de0:	d9001b17 	ldw	r4,108(sp)
 4005de4:	1823883a 	mov	r17,r3
 4005de8:	dc001415 	stw	r16,80(sp)
 4005dec:	ad400c04 	addi	r21,r21,48
 4005df0:	dc401515 	stw	r17,84(sp)
 4005df4:	d8801a17 	ldw	r2,104(sp)
 4005df8:	e5400005 	stb	r21,0(fp)
 4005dfc:	202f883a 	mov	r23,r4
 4005e00:	d9c01b17 	ldw	r7,108(sp)
 4005e04:	d9001417 	ldw	r4,80(sp)
 4005e08:	880b883a 	mov	r5,r17
 4005e0c:	100d883a 	mov	r6,r2
 4005e10:	102d883a 	mov	r22,r2
 4005e14:	e7000044 	addi	fp,fp,1
 4005e18:	400b6f80 	call	400b6f8 <__ltdf2>
 4005e1c:	103fc30e 	bge	r2,zero,4005d2c <_dtoa_r+0x1064>
 4005e20:	d9000417 	ldw	r4,16(sp)
 4005e24:	d9000d15 	stw	r4,52(sp)
 4005e28:	003d7106 	br	40053f0 <_dtoa_r+0x728>
 4005e2c:	d9801717 	ldw	r6,92(sp)
 4005e30:	00800084 	movi	r2,2
 4005e34:	11bde60e 	bge	r2,r6,40055d0 <_dtoa_r+0x908>
 4005e38:	203cfb1e 	bne	r4,zero,4005228 <_dtoa_r+0x560>
 4005e3c:	d9001617 	ldw	r4,88(sp)
 4005e40:	900b883a 	mov	r5,r18
 4005e44:	01800144 	movi	r6,5
 4005e48:	000f883a 	mov	r7,zero
 4005e4c:	4008a440 	call	4008a44 <__multadd>
 4005e50:	d9000717 	ldw	r4,28(sp)
 4005e54:	100b883a 	mov	r5,r2
 4005e58:	1025883a 	mov	r18,r2
 4005e5c:	4007eec0 	call	4007eec <__mcmp>
 4005e60:	00bcf10e 	bge	zero,r2,4005228 <_dtoa_r+0x560>
 4005e64:	d8c00d17 	ldw	r3,52(sp)
 4005e68:	d9000517 	ldw	r4,20(sp)
 4005e6c:	d8000615 	stw	zero,24(sp)
 4005e70:	18c00044 	addi	r3,r3,1
 4005e74:	d8c00d15 	stw	r3,52(sp)
 4005e78:	00800c44 	movi	r2,49
 4005e7c:	27000044 	addi	fp,r4,1
 4005e80:	20800005 	stb	r2,0(r4)
 4005e84:	003e8906 	br	40058ac <_dtoa_r+0xbe4>
 4005e88:	d8c00517 	ldw	r3,20(sp)
 4005e8c:	003bc206 	br	4004d98 <_dtoa_r+0xd0>
 4005e90:	01810174 	movhi	r6,1029
 4005e94:	31a1bf04 	addi	r6,r6,-30980
 4005e98:	30c00917 	ldw	r3,36(r6)
 4005e9c:	30800817 	ldw	r2,32(r6)
 4005ea0:	d9001217 	ldw	r4,72(sp)
 4005ea4:	d9401317 	ldw	r5,76(sp)
 4005ea8:	180f883a 	mov	r7,r3
 4005eac:	100d883a 	mov	r6,r2
 4005eb0:	400b2800 	call	400b280 <__divdf3>
 4005eb4:	948003cc 	andi	r18,r18,15
 4005eb8:	058000c4 	movi	r22,3
 4005ebc:	1029883a 	mov	r20,r2
 4005ec0:	182b883a 	mov	r21,r3
 4005ec4:	003c8906 	br	40050ec <_dtoa_r+0x424>
 4005ec8:	d9001017 	ldw	r4,64(sp)
 4005ecc:	d9800917 	ldw	r6,36(sp)
 4005ed0:	0025883a 	mov	r18,zero
 4005ed4:	1105c83a 	sub	r2,r2,r4
 4005ed8:	2089883a 	add	r4,r4,r2
 4005edc:	308d883a 	add	r6,r6,r2
 4005ee0:	d9001015 	stw	r4,64(sp)
 4005ee4:	d9800915 	stw	r6,36(sp)
 4005ee8:	003e3206 	br	40057b4 <_dtoa_r+0xaec>
 4005eec:	28800044 	addi	r2,r5,1
 4005ef0:	27000044 	addi	fp,r4,1
 4005ef4:	20800005 	stb	r2,0(r4)
 4005ef8:	003e6c06 	br	40058ac <_dtoa_r+0xbe4>
 4005efc:	d8800f17 	ldw	r2,60(sp)
 4005f00:	00bce016 	blt	zero,r2,4005284 <_dtoa_r+0x5bc>
 4005f04:	d9800f17 	ldw	r6,60(sp)
 4005f08:	303cc51e 	bne	r6,zero,4005220 <_dtoa_r+0x558>
 4005f0c:	0005883a 	mov	r2,zero
 4005f10:	00d00534 	movhi	r3,16404
 4005f14:	980b883a 	mov	r5,r19
 4005f18:	180f883a 	mov	r7,r3
 4005f1c:	9009883a 	mov	r4,r18
 4005f20:	100d883a 	mov	r6,r2
 4005f24:	400aebc0 	call	400aebc <__muldf3>
 4005f28:	180b883a 	mov	r5,r3
 4005f2c:	a80f883a 	mov	r7,r21
 4005f30:	1009883a 	mov	r4,r2
 4005f34:	a00d883a 	mov	r6,r20
 4005f38:	400b6700 	call	400b670 <__gedf2>
 4005f3c:	103cb80e 	bge	r2,zero,4005220 <_dtoa_r+0x558>
 4005f40:	0027883a 	mov	r19,zero
 4005f44:	0025883a 	mov	r18,zero
 4005f48:	003fc606 	br	4005e64 <_dtoa_r+0x119c>
 4005f4c:	99400117 	ldw	r5,4(r19)
 4005f50:	d9001617 	ldw	r4,88(sp)
 4005f54:	40083100 	call	4008310 <_Balloc>
 4005f58:	99800417 	ldw	r6,16(r19)
 4005f5c:	11000304 	addi	r4,r2,12
 4005f60:	99400304 	addi	r5,r19,12
 4005f64:	318d883a 	add	r6,r6,r6
 4005f68:	318d883a 	add	r6,r6,r6
 4005f6c:	31800204 	addi	r6,r6,8
 4005f70:	1023883a 	mov	r17,r2
 4005f74:	4001de40 	call	4001de4 <memcpy>
 4005f78:	d9001617 	ldw	r4,88(sp)
 4005f7c:	880b883a 	mov	r5,r17
 4005f80:	01800044 	movi	r6,1
 4005f84:	40086d40 	call	40086d4 <__lshift>
 4005f88:	100b883a 	mov	r5,r2
 4005f8c:	003d9c06 	br	4005600 <_dtoa_r+0x938>
 4005f90:	00800e44 	movi	r2,57
 4005f94:	b8807026 	beq	r23,r2,4006158 <_dtoa_r+0x1490>
 4005f98:	b8800044 	addi	r2,r23,1
 4005f9c:	b7000044 	addi	fp,r22,1
 4005fa0:	b0800005 	stb	r2,0(r22)
 4005fa4:	003e4106 	br	40058ac <_dtoa_r+0xbe4>
 4005fa8:	d8800317 	ldw	r2,12(sp)
 4005fac:	01810174 	movhi	r6,1029
 4005fb0:	31a18d04 	addi	r6,r6,-31180
 4005fb4:	b009883a 	mov	r4,r22
 4005fb8:	100e90fa 	slli	r7,r2,3
 4005fbc:	b80b883a 	mov	r5,r23
 4005fc0:	398f883a 	add	r7,r7,r6
 4005fc4:	38bffe17 	ldw	r2,-8(r7)
 4005fc8:	d9800517 	ldw	r6,20(sp)
 4005fcc:	38ffff17 	ldw	r3,-4(r7)
 4005fd0:	37000044 	addi	fp,r6,1
 4005fd4:	180f883a 	mov	r7,r3
 4005fd8:	100d883a 	mov	r6,r2
 4005fdc:	400aebc0 	call	400aebc <__muldf3>
 4005fe0:	a80b883a 	mov	r5,r21
 4005fe4:	a009883a 	mov	r4,r20
 4005fe8:	182f883a 	mov	r23,r3
 4005fec:	102d883a 	mov	r22,r2
 4005ff0:	400b8780 	call	400b878 <__fixdfsi>
 4005ff4:	1009883a 	mov	r4,r2
 4005ff8:	1027883a 	mov	r19,r2
 4005ffc:	400b7800 	call	400b780 <__floatsidf>
 4006000:	a80b883a 	mov	r5,r21
 4006004:	a009883a 	mov	r4,r20
 4006008:	180f883a 	mov	r7,r3
 400600c:	100d883a 	mov	r6,r2
 4006010:	400adc80 	call	400adc8 <__subdf3>
 4006014:	180b883a 	mov	r5,r3
 4006018:	d8c00517 	ldw	r3,20(sp)
 400601c:	9cc00c04 	addi	r19,r19,48
 4006020:	1009883a 	mov	r4,r2
 4006024:	1cc00005 	stb	r19,0(r3)
 4006028:	2021883a 	mov	r16,r4
 400602c:	d9000317 	ldw	r4,12(sp)
 4006030:	00800044 	movi	r2,1
 4006034:	2823883a 	mov	r17,r5
 4006038:	20802226 	beq	r4,r2,40060c4 <_dtoa_r+0x13fc>
 400603c:	1029883a 	mov	r20,r2
 4006040:	0005883a 	mov	r2,zero
 4006044:	00d00934 	movhi	r3,16420
 4006048:	180f883a 	mov	r7,r3
 400604c:	100d883a 	mov	r6,r2
 4006050:	880b883a 	mov	r5,r17
 4006054:	8009883a 	mov	r4,r16
 4006058:	400aebc0 	call	400aebc <__muldf3>
 400605c:	180b883a 	mov	r5,r3
 4006060:	1009883a 	mov	r4,r2
 4006064:	1823883a 	mov	r17,r3
 4006068:	1021883a 	mov	r16,r2
 400606c:	400b8780 	call	400b878 <__fixdfsi>
 4006070:	1009883a 	mov	r4,r2
 4006074:	102b883a 	mov	r21,r2
 4006078:	400b7800 	call	400b780 <__floatsidf>
 400607c:	880b883a 	mov	r5,r17
 4006080:	8009883a 	mov	r4,r16
 4006084:	180f883a 	mov	r7,r3
 4006088:	100d883a 	mov	r6,r2
 400608c:	400adc80 	call	400adc8 <__subdf3>
 4006090:	180b883a 	mov	r5,r3
 4006094:	d8c00517 	ldw	r3,20(sp)
 4006098:	1009883a 	mov	r4,r2
 400609c:	ad400c04 	addi	r21,r21,48
 40060a0:	1d05883a 	add	r2,r3,r20
 40060a4:	15400005 	stb	r21,0(r2)
 40060a8:	2021883a 	mov	r16,r4
 40060ac:	d9000317 	ldw	r4,12(sp)
 40060b0:	a5000044 	addi	r20,r20,1
 40060b4:	2823883a 	mov	r17,r5
 40060b8:	a13fe11e 	bne	r20,r4,4006040 <_dtoa_r+0x1378>
 40060bc:	e505883a 	add	r2,fp,r20
 40060c0:	173fffc4 	addi	fp,r2,-1
 40060c4:	0025883a 	mov	r18,zero
 40060c8:	04cff834 	movhi	r19,16352
 40060cc:	b009883a 	mov	r4,r22
 40060d0:	b80b883a 	mov	r5,r23
 40060d4:	900d883a 	mov	r6,r18
 40060d8:	980f883a 	mov	r7,r19
 40060dc:	400ae480 	call	400ae48 <__adddf3>
 40060e0:	180b883a 	mov	r5,r3
 40060e4:	1009883a 	mov	r4,r2
 40060e8:	800d883a 	mov	r6,r16
 40060ec:	880f883a 	mov	r7,r17
 40060f0:	400b6f80 	call	400b6f8 <__ltdf2>
 40060f4:	103cab16 	blt	r2,zero,40053a4 <_dtoa_r+0x6dc>
 40060f8:	0009883a 	mov	r4,zero
 40060fc:	980b883a 	mov	r5,r19
 4006100:	b80f883a 	mov	r7,r23
 4006104:	b00d883a 	mov	r6,r22
 4006108:	400adc80 	call	400adc8 <__subdf3>
 400610c:	180b883a 	mov	r5,r3
 4006110:	880f883a 	mov	r7,r17
 4006114:	1009883a 	mov	r4,r2
 4006118:	800d883a 	mov	r6,r16
 400611c:	400b5e80 	call	400b5e8 <__gtdf2>
 4006120:	00bc470e 	bge	zero,r2,4005240 <_dtoa_r+0x578>
 4006124:	00c00c04 	movi	r3,48
 4006128:	e73fffc4 	addi	fp,fp,-1
 400612c:	e0800007 	ldb	r2,0(fp)
 4006130:	10fffd26 	beq	r2,r3,4006128 <_dtoa_r+0x1460>
 4006134:	d9800417 	ldw	r6,16(sp)
 4006138:	e7000044 	addi	fp,fp,1
 400613c:	d9800d15 	stw	r6,52(sp)
 4006140:	003cab06 	br	40053f0 <_dtoa_r+0x728>
 4006144:	d8c00f17 	ldw	r3,60(sp)
 4006148:	d9001117 	ldw	r4,68(sp)
 400614c:	20e1c83a 	sub	r16,r4,r3
 4006150:	0007883a 	mov	r3,zero
 4006154:	003d9b06 	br	40057c4 <_dtoa_r+0xafc>
 4006158:	00800e44 	movi	r2,57
 400615c:	b0800005 	stb	r2,0(r22)
 4006160:	b5800044 	addi	r22,r22,1
 4006164:	003dc106 	br	400586c <_dtoa_r+0xba4>
 4006168:	05800084 	movi	r22,2
 400616c:	003bf706 	br	400514c <_dtoa_r+0x484>
 4006170:	d9000f17 	ldw	r4,60(sp)
 4006174:	013c000e 	bge	zero,r4,4005178 <_dtoa_r+0x4b0>
 4006178:	d9800e17 	ldw	r6,56(sp)
 400617c:	01bc300e 	bge	zero,r6,4005240 <_dtoa_r+0x578>
 4006180:	0005883a 	mov	r2,zero
 4006184:	00d00934 	movhi	r3,16420
 4006188:	a80b883a 	mov	r5,r21
 400618c:	180f883a 	mov	r7,r3
 4006190:	a009883a 	mov	r4,r20
 4006194:	100d883a 	mov	r6,r2
 4006198:	400aebc0 	call	400aebc <__muldf3>
 400619c:	b1000044 	addi	r4,r22,1
 40061a0:	1021883a 	mov	r16,r2
 40061a4:	1823883a 	mov	r17,r3
 40061a8:	400b7800 	call	400b780 <__floatsidf>
 40061ac:	880b883a 	mov	r5,r17
 40061b0:	8009883a 	mov	r4,r16
 40061b4:	180f883a 	mov	r7,r3
 40061b8:	100d883a 	mov	r6,r2
 40061bc:	400aebc0 	call	400aebc <__muldf3>
 40061c0:	0011883a 	mov	r8,zero
 40061c4:	02500734 	movhi	r9,16412
 40061c8:	180b883a 	mov	r5,r3
 40061cc:	480f883a 	mov	r7,r9
 40061d0:	1009883a 	mov	r4,r2
 40061d4:	400d883a 	mov	r6,r8
 40061d8:	400ae480 	call	400ae48 <__adddf3>
 40061dc:	102d883a 	mov	r22,r2
 40061e0:	00bf3034 	movhi	r2,64704
 40061e4:	10ef883a 	add	r23,r2,r3
 40061e8:	d8800d17 	ldw	r2,52(sp)
 40061ec:	d8c00e17 	ldw	r3,56(sp)
 40061f0:	8029883a 	mov	r20,r16
 40061f4:	10bfffc4 	addi	r2,r2,-1
 40061f8:	882b883a 	mov	r21,r17
 40061fc:	d8800415 	stw	r2,16(sp)
 4006200:	d8c00315 	stw	r3,12(sp)
 4006204:	003e8306 	br	4005c14 <_dtoa_r+0xf4c>
 4006208:	d8800117 	ldw	r2,4(sp)
 400620c:	dc001117 	ldw	r16,68(sp)
 4006210:	dc801017 	ldw	r18,64(sp)
 4006214:	00c00d84 	movi	r3,54
 4006218:	1887c83a 	sub	r3,r3,r2
 400621c:	003d6906 	br	40057c4 <_dtoa_r+0xafc>
 4006220:	01800044 	movi	r6,1
 4006224:	3021883a 	mov	r16,r6
 4006228:	d9800f15 	stw	r6,60(sp)
 400622c:	d9802615 	stw	r6,152(sp)
 4006230:	d9800e15 	stw	r6,56(sp)
 4006234:	003b9306 	br	4005084 <_dtoa_r+0x3bc>
 4006238:	b021883a 	mov	r16,r22
 400623c:	dd800f15 	stw	r22,60(sp)
 4006240:	003b9006 	br	4005084 <_dtoa_r+0x3bc>
 4006244:	103e221e 	bne	r2,zero,4005ad0 <_dtoa_r+0xe08>
 4006248:	b880004c 	andi	r2,r23,1
 400624c:	1005003a 	cmpeq	r2,r2,zero
 4006250:	103e1f1e 	bne	r2,zero,4005ad0 <_dtoa_r+0xe08>
 4006254:	003e1b06 	br	4005ac4 <_dtoa_r+0xdfc>
 4006258:	d9001617 	ldw	r4,88(sp)
 400625c:	980b883a 	mov	r5,r19
 4006260:	01800284 	movi	r6,10
 4006264:	000f883a 	mov	r7,zero
 4006268:	4008a440 	call	4008a44 <__multadd>
 400626c:	d8c00e17 	ldw	r3,56(sp)
 4006270:	1027883a 	mov	r19,r2
 4006274:	d8c00f15 	stw	r3,60(sp)
 4006278:	003cd306 	br	40055c8 <_dtoa_r+0x900>

0400627c <_fflush_r>:
 400627c:	defffb04 	addi	sp,sp,-20
 4006280:	dcc00315 	stw	r19,12(sp)
 4006284:	dc800215 	stw	r18,8(sp)
 4006288:	dfc00415 	stw	ra,16(sp)
 400628c:	dc400115 	stw	r17,4(sp)
 4006290:	dc000015 	stw	r16,0(sp)
 4006294:	2027883a 	mov	r19,r4
 4006298:	2825883a 	mov	r18,r5
 400629c:	20000226 	beq	r4,zero,40062a8 <_fflush_r+0x2c>
 40062a0:	20800e17 	ldw	r2,56(r4)
 40062a4:	10005626 	beq	r2,zero,4006400 <_fflush_r+0x184>
 40062a8:	9100030b 	ldhu	r4,12(r18)
 40062ac:	20ffffcc 	andi	r3,r4,65535
 40062b0:	18e0001c 	xori	r3,r3,32768
 40062b4:	18e00004 	addi	r3,r3,-32768
 40062b8:	1880020c 	andi	r2,r3,8
 40062bc:	1000261e 	bne	r2,zero,4006358 <_fflush_r+0xdc>
 40062c0:	90c00117 	ldw	r3,4(r18)
 40062c4:	20820014 	ori	r2,r4,2048
 40062c8:	9080030d 	sth	r2,12(r18)
 40062cc:	1009883a 	mov	r4,r2
 40062d0:	00c0400e 	bge	zero,r3,40063d4 <_fflush_r+0x158>
 40062d4:	92000a17 	ldw	r8,40(r18)
 40062d8:	40004026 	beq	r8,zero,40063dc <_fflush_r+0x160>
 40062dc:	2084000c 	andi	r2,r4,4096
 40062e0:	10005326 	beq	r2,zero,4006430 <_fflush_r+0x1b4>
 40062e4:	94001417 	ldw	r16,80(r18)
 40062e8:	9080030b 	ldhu	r2,12(r18)
 40062ec:	1080010c 	andi	r2,r2,4
 40062f0:	1000481e 	bne	r2,zero,4006414 <_fflush_r+0x198>
 40062f4:	91400717 	ldw	r5,28(r18)
 40062f8:	9809883a 	mov	r4,r19
 40062fc:	800d883a 	mov	r6,r16
 4006300:	000f883a 	mov	r7,zero
 4006304:	403ee83a 	callr	r8
 4006308:	8080261e 	bne	r16,r2,40063a4 <_fflush_r+0x128>
 400630c:	9080030b 	ldhu	r2,12(r18)
 4006310:	91000417 	ldw	r4,16(r18)
 4006314:	90000115 	stw	zero,4(r18)
 4006318:	10bdffcc 	andi	r2,r2,63487
 400631c:	10ffffcc 	andi	r3,r2,65535
 4006320:	18c4000c 	andi	r3,r3,4096
 4006324:	9080030d 	sth	r2,12(r18)
 4006328:	91000015 	stw	r4,0(r18)
 400632c:	18002b26 	beq	r3,zero,40063dc <_fflush_r+0x160>
 4006330:	0007883a 	mov	r3,zero
 4006334:	1805883a 	mov	r2,r3
 4006338:	94001415 	stw	r16,80(r18)
 400633c:	dfc00417 	ldw	ra,16(sp)
 4006340:	dcc00317 	ldw	r19,12(sp)
 4006344:	dc800217 	ldw	r18,8(sp)
 4006348:	dc400117 	ldw	r17,4(sp)
 400634c:	dc000017 	ldw	r16,0(sp)
 4006350:	dec00504 	addi	sp,sp,20
 4006354:	f800283a 	ret
 4006358:	94400417 	ldw	r17,16(r18)
 400635c:	88001f26 	beq	r17,zero,40063dc <_fflush_r+0x160>
 4006360:	90800017 	ldw	r2,0(r18)
 4006364:	18c000cc 	andi	r3,r3,3
 4006368:	94400015 	stw	r17,0(r18)
 400636c:	1461c83a 	sub	r16,r2,r17
 4006370:	18002526 	beq	r3,zero,4006408 <_fflush_r+0x18c>
 4006374:	0005883a 	mov	r2,zero
 4006378:	90800215 	stw	r2,8(r18)
 400637c:	0400170e 	bge	zero,r16,40063dc <_fflush_r+0x160>
 4006380:	90c00917 	ldw	r3,36(r18)
 4006384:	91400717 	ldw	r5,28(r18)
 4006388:	880d883a 	mov	r6,r17
 400638c:	800f883a 	mov	r7,r16
 4006390:	9809883a 	mov	r4,r19
 4006394:	183ee83a 	callr	r3
 4006398:	88a3883a 	add	r17,r17,r2
 400639c:	80a1c83a 	sub	r16,r16,r2
 40063a0:	00bff616 	blt	zero,r2,400637c <_fflush_r+0x100>
 40063a4:	9080030b 	ldhu	r2,12(r18)
 40063a8:	00ffffc4 	movi	r3,-1
 40063ac:	10801014 	ori	r2,r2,64
 40063b0:	9080030d 	sth	r2,12(r18)
 40063b4:	1805883a 	mov	r2,r3
 40063b8:	dfc00417 	ldw	ra,16(sp)
 40063bc:	dcc00317 	ldw	r19,12(sp)
 40063c0:	dc800217 	ldw	r18,8(sp)
 40063c4:	dc400117 	ldw	r17,4(sp)
 40063c8:	dc000017 	ldw	r16,0(sp)
 40063cc:	dec00504 	addi	sp,sp,20
 40063d0:	f800283a 	ret
 40063d4:	90800f17 	ldw	r2,60(r18)
 40063d8:	00bfbe16 	blt	zero,r2,40062d4 <_fflush_r+0x58>
 40063dc:	0007883a 	mov	r3,zero
 40063e0:	1805883a 	mov	r2,r3
 40063e4:	dfc00417 	ldw	ra,16(sp)
 40063e8:	dcc00317 	ldw	r19,12(sp)
 40063ec:	dc800217 	ldw	r18,8(sp)
 40063f0:	dc400117 	ldw	r17,4(sp)
 40063f4:	dc000017 	ldw	r16,0(sp)
 40063f8:	dec00504 	addi	sp,sp,20
 40063fc:	f800283a 	ret
 4006400:	40065140 	call	4006514 <__sinit>
 4006404:	003fa806 	br	40062a8 <_fflush_r+0x2c>
 4006408:	90800517 	ldw	r2,20(r18)
 400640c:	90800215 	stw	r2,8(r18)
 4006410:	003fda06 	br	400637c <_fflush_r+0x100>
 4006414:	90800117 	ldw	r2,4(r18)
 4006418:	90c00c17 	ldw	r3,48(r18)
 400641c:	80a1c83a 	sub	r16,r16,r2
 4006420:	183fb426 	beq	r3,zero,40062f4 <_fflush_r+0x78>
 4006424:	90800f17 	ldw	r2,60(r18)
 4006428:	80a1c83a 	sub	r16,r16,r2
 400642c:	003fb106 	br	40062f4 <_fflush_r+0x78>
 4006430:	91400717 	ldw	r5,28(r18)
 4006434:	9809883a 	mov	r4,r19
 4006438:	000d883a 	mov	r6,zero
 400643c:	01c00044 	movi	r7,1
 4006440:	403ee83a 	callr	r8
 4006444:	1021883a 	mov	r16,r2
 4006448:	00bfffc4 	movi	r2,-1
 400644c:	80800226 	beq	r16,r2,4006458 <_fflush_r+0x1dc>
 4006450:	92000a17 	ldw	r8,40(r18)
 4006454:	003fa406 	br	40062e8 <_fflush_r+0x6c>
 4006458:	98c00017 	ldw	r3,0(r19)
 400645c:	00800744 	movi	r2,29
 4006460:	18bfde26 	beq	r3,r2,40063dc <_fflush_r+0x160>
 4006464:	9080030b 	ldhu	r2,12(r18)
 4006468:	8007883a 	mov	r3,r16
 400646c:	10801014 	ori	r2,r2,64
 4006470:	9080030d 	sth	r2,12(r18)
 4006474:	003fcf06 	br	40063b4 <_fflush_r+0x138>

04006478 <fflush>:
 4006478:	01410034 	movhi	r5,1024
 400647c:	29589f04 	addi	r5,r5,25212
 4006480:	2007883a 	mov	r3,r4
 4006484:	20000526 	beq	r4,zero,400649c <fflush+0x24>
 4006488:	00810174 	movhi	r2,1029
 400648c:	10b9bf04 	addi	r2,r2,-6404
 4006490:	11000017 	ldw	r4,0(r2)
 4006494:	180b883a 	mov	r5,r3
 4006498:	400627c1 	jmpi	400627c <_fflush_r>
 400649c:	00810174 	movhi	r2,1029
 40064a0:	10b9c004 	addi	r2,r2,-6400
 40064a4:	11000017 	ldw	r4,0(r2)
 40064a8:	40071941 	jmpi	4007194 <_fwalk_reent>

040064ac <std>:
 40064ac:	00810074 	movhi	r2,1025
 40064b0:	10a59104 	addi	r2,r2,-27068
 40064b4:	20800b15 	stw	r2,44(r4)
 40064b8:	00810074 	movhi	r2,1025
 40064bc:	10a5cc04 	addi	r2,r2,-26832
 40064c0:	20800815 	stw	r2,32(r4)
 40064c4:	00c10074 	movhi	r3,1025
 40064c8:	18e5ad04 	addi	r3,r3,-26956
 40064cc:	00810074 	movhi	r2,1025
 40064d0:	10a59304 	addi	r2,r2,-27060
 40064d4:	2140030d 	sth	r5,12(r4)
 40064d8:	2180038d 	sth	r6,14(r4)
 40064dc:	20c00915 	stw	r3,36(r4)
 40064e0:	20800a15 	stw	r2,40(r4)
 40064e4:	20000015 	stw	zero,0(r4)
 40064e8:	20000115 	stw	zero,4(r4)
 40064ec:	20000215 	stw	zero,8(r4)
 40064f0:	20000415 	stw	zero,16(r4)
 40064f4:	20000515 	stw	zero,20(r4)
 40064f8:	20000615 	stw	zero,24(r4)
 40064fc:	21000715 	stw	r4,28(r4)
 4006500:	f800283a 	ret

04006504 <__sfp_lock_acquire>:
 4006504:	f800283a 	ret

04006508 <__sfp_lock_release>:
 4006508:	f800283a 	ret

0400650c <__sinit_lock_acquire>:
 400650c:	f800283a 	ret

04006510 <__sinit_lock_release>:
 4006510:	f800283a 	ret

04006514 <__sinit>:
 4006514:	20800e17 	ldw	r2,56(r4)
 4006518:	defffd04 	addi	sp,sp,-12
 400651c:	dc400115 	stw	r17,4(sp)
 4006520:	dc000015 	stw	r16,0(sp)
 4006524:	dfc00215 	stw	ra,8(sp)
 4006528:	04400044 	movi	r17,1
 400652c:	01400104 	movi	r5,4
 4006530:	000d883a 	mov	r6,zero
 4006534:	2021883a 	mov	r16,r4
 4006538:	2200bb04 	addi	r8,r4,748
 400653c:	200f883a 	mov	r7,r4
 4006540:	10000526 	beq	r2,zero,4006558 <__sinit+0x44>
 4006544:	dfc00217 	ldw	ra,8(sp)
 4006548:	dc400117 	ldw	r17,4(sp)
 400654c:	dc000017 	ldw	r16,0(sp)
 4006550:	dec00304 	addi	sp,sp,12
 4006554:	f800283a 	ret
 4006558:	21000117 	ldw	r4,4(r4)
 400655c:	00810034 	movhi	r2,1024
 4006560:	10997e04 	addi	r2,r2,26104
 4006564:	00c000c4 	movi	r3,3
 4006568:	80800f15 	stw	r2,60(r16)
 400656c:	80c0b915 	stw	r3,740(r16)
 4006570:	8200ba15 	stw	r8,744(r16)
 4006574:	84400e15 	stw	r17,56(r16)
 4006578:	8000b815 	stw	zero,736(r16)
 400657c:	40064ac0 	call	40064ac <std>
 4006580:	81000217 	ldw	r4,8(r16)
 4006584:	880d883a 	mov	r6,r17
 4006588:	800f883a 	mov	r7,r16
 400658c:	01400284 	movi	r5,10
 4006590:	40064ac0 	call	40064ac <std>
 4006594:	81000317 	ldw	r4,12(r16)
 4006598:	800f883a 	mov	r7,r16
 400659c:	01400484 	movi	r5,18
 40065a0:	01800084 	movi	r6,2
 40065a4:	dfc00217 	ldw	ra,8(sp)
 40065a8:	dc400117 	ldw	r17,4(sp)
 40065ac:	dc000017 	ldw	r16,0(sp)
 40065b0:	dec00304 	addi	sp,sp,12
 40065b4:	40064ac1 	jmpi	40064ac <std>

040065b8 <__fp_lock>:
 40065b8:	0005883a 	mov	r2,zero
 40065bc:	f800283a 	ret

040065c0 <__fp_unlock>:
 40065c0:	0005883a 	mov	r2,zero
 40065c4:	f800283a 	ret

040065c8 <__fp_unlock_all>:
 40065c8:	00810174 	movhi	r2,1029
 40065cc:	10b9bf04 	addi	r2,r2,-6404
 40065d0:	11000017 	ldw	r4,0(r2)
 40065d4:	01410034 	movhi	r5,1024
 40065d8:	29597004 	addi	r5,r5,26048
 40065dc:	400725c1 	jmpi	400725c <_fwalk>

040065e0 <__fp_lock_all>:
 40065e0:	00810174 	movhi	r2,1029
 40065e4:	10b9bf04 	addi	r2,r2,-6404
 40065e8:	11000017 	ldw	r4,0(r2)
 40065ec:	01410034 	movhi	r5,1024
 40065f0:	29596e04 	addi	r5,r5,26040
 40065f4:	400725c1 	jmpi	400725c <_fwalk>

040065f8 <_cleanup_r>:
 40065f8:	01410074 	movhi	r5,1025
 40065fc:	29671104 	addi	r5,r5,-25532
 4006600:	400725c1 	jmpi	400725c <_fwalk>

04006604 <_cleanup>:
 4006604:	00810174 	movhi	r2,1029
 4006608:	10b9c004 	addi	r2,r2,-6400
 400660c:	11000017 	ldw	r4,0(r2)
 4006610:	40065f81 	jmpi	40065f8 <_cleanup_r>

04006614 <__sfmoreglue>:
 4006614:	defffc04 	addi	sp,sp,-16
 4006618:	dc400115 	stw	r17,4(sp)
 400661c:	2c401724 	muli	r17,r5,92
 4006620:	dc800215 	stw	r18,8(sp)
 4006624:	2825883a 	mov	r18,r5
 4006628:	89400304 	addi	r5,r17,12
 400662c:	dc000015 	stw	r16,0(sp)
 4006630:	dfc00315 	stw	ra,12(sp)
 4006634:	400756c0 	call	400756c <_malloc_r>
 4006638:	0021883a 	mov	r16,zero
 400663c:	880d883a 	mov	r6,r17
 4006640:	000b883a 	mov	r5,zero
 4006644:	10000626 	beq	r2,zero,4006660 <__sfmoreglue+0x4c>
 4006648:	11000304 	addi	r4,r2,12
 400664c:	14800115 	stw	r18,4(r2)
 4006650:	10000015 	stw	zero,0(r2)
 4006654:	11000215 	stw	r4,8(r2)
 4006658:	1021883a 	mov	r16,r2
 400665c:	4001f640 	call	4001f64 <memset>
 4006660:	8005883a 	mov	r2,r16
 4006664:	dfc00317 	ldw	ra,12(sp)
 4006668:	dc800217 	ldw	r18,8(sp)
 400666c:	dc400117 	ldw	r17,4(sp)
 4006670:	dc000017 	ldw	r16,0(sp)
 4006674:	dec00404 	addi	sp,sp,16
 4006678:	f800283a 	ret

0400667c <__sfp>:
 400667c:	defffd04 	addi	sp,sp,-12
 4006680:	00810174 	movhi	r2,1029
 4006684:	10b9c004 	addi	r2,r2,-6400
 4006688:	dc000015 	stw	r16,0(sp)
 400668c:	14000017 	ldw	r16,0(r2)
 4006690:	dc400115 	stw	r17,4(sp)
 4006694:	dfc00215 	stw	ra,8(sp)
 4006698:	80800e17 	ldw	r2,56(r16)
 400669c:	2023883a 	mov	r17,r4
 40066a0:	10002626 	beq	r2,zero,400673c <__sfp+0xc0>
 40066a4:	8400b804 	addi	r16,r16,736
 40066a8:	80800117 	ldw	r2,4(r16)
 40066ac:	81000217 	ldw	r4,8(r16)
 40066b0:	10ffffc4 	addi	r3,r2,-1
 40066b4:	18000916 	blt	r3,zero,40066dc <__sfp+0x60>
 40066b8:	2080030f 	ldh	r2,12(r4)
 40066bc:	10000b26 	beq	r2,zero,40066ec <__sfp+0x70>
 40066c0:	017fffc4 	movi	r5,-1
 40066c4:	00000206 	br	40066d0 <__sfp+0x54>
 40066c8:	2080030f 	ldh	r2,12(r4)
 40066cc:	10000726 	beq	r2,zero,40066ec <__sfp+0x70>
 40066d0:	18ffffc4 	addi	r3,r3,-1
 40066d4:	21001704 	addi	r4,r4,92
 40066d8:	197ffb1e 	bne	r3,r5,40066c8 <__sfp+0x4c>
 40066dc:	80800017 	ldw	r2,0(r16)
 40066e0:	10001926 	beq	r2,zero,4006748 <__sfp+0xcc>
 40066e4:	1021883a 	mov	r16,r2
 40066e8:	003fef06 	br	40066a8 <__sfp+0x2c>
 40066ec:	00bfffc4 	movi	r2,-1
 40066f0:	00c00044 	movi	r3,1
 40066f4:	2080038d 	sth	r2,14(r4)
 40066f8:	20c0030d 	sth	r3,12(r4)
 40066fc:	20000015 	stw	zero,0(r4)
 4006700:	20000215 	stw	zero,8(r4)
 4006704:	20000115 	stw	zero,4(r4)
 4006708:	20000415 	stw	zero,16(r4)
 400670c:	20000515 	stw	zero,20(r4)
 4006710:	20000615 	stw	zero,24(r4)
 4006714:	20000c15 	stw	zero,48(r4)
 4006718:	20000d15 	stw	zero,52(r4)
 400671c:	20001115 	stw	zero,68(r4)
 4006720:	20001215 	stw	zero,72(r4)
 4006724:	2005883a 	mov	r2,r4
 4006728:	dfc00217 	ldw	ra,8(sp)
 400672c:	dc400117 	ldw	r17,4(sp)
 4006730:	dc000017 	ldw	r16,0(sp)
 4006734:	dec00304 	addi	sp,sp,12
 4006738:	f800283a 	ret
 400673c:	8009883a 	mov	r4,r16
 4006740:	40065140 	call	4006514 <__sinit>
 4006744:	003fd706 	br	40066a4 <__sfp+0x28>
 4006748:	8809883a 	mov	r4,r17
 400674c:	01400104 	movi	r5,4
 4006750:	40066140 	call	4006614 <__sfmoreglue>
 4006754:	80800015 	stw	r2,0(r16)
 4006758:	103fe21e 	bne	r2,zero,40066e4 <__sfp+0x68>
 400675c:	00800304 	movi	r2,12
 4006760:	0009883a 	mov	r4,zero
 4006764:	88800015 	stw	r2,0(r17)
 4006768:	003fee06 	br	4006724 <__sfp+0xa8>

0400676c <fputc>:
 400676c:	defffc04 	addi	sp,sp,-16
 4006770:	dc800215 	stw	r18,8(sp)
 4006774:	04810174 	movhi	r18,1029
 4006778:	94b9bf04 	addi	r18,r18,-6404
 400677c:	90c00017 	ldw	r3,0(r18)
 4006780:	dc400115 	stw	r17,4(sp)
 4006784:	dc000015 	stw	r16,0(sp)
 4006788:	dfc00315 	stw	ra,12(sp)
 400678c:	2021883a 	mov	r16,r4
 4006790:	2823883a 	mov	r17,r5
 4006794:	18000326 	beq	r3,zero,40067a4 <fputc+0x38>
 4006798:	18800e17 	ldw	r2,56(r3)
 400679c:	1809883a 	mov	r4,r3
 40067a0:	10000926 	beq	r2,zero,40067c8 <fputc+0x5c>
 40067a4:	91000017 	ldw	r4,0(r18)
 40067a8:	800b883a 	mov	r5,r16
 40067ac:	880d883a 	mov	r6,r17
 40067b0:	dfc00317 	ldw	ra,12(sp)
 40067b4:	dc800217 	ldw	r18,8(sp)
 40067b8:	dc400117 	ldw	r17,4(sp)
 40067bc:	dc000017 	ldw	r16,0(sp)
 40067c0:	dec00404 	addi	sp,sp,16
 40067c4:	4008e881 	jmpi	4008e88 <_putc_r>
 40067c8:	40065140 	call	4006514 <__sinit>
 40067cc:	003ff506 	br	40067a4 <fputc+0x38>

040067d0 <_fputc_r>:
 40067d0:	defffc04 	addi	sp,sp,-16
 40067d4:	dc800215 	stw	r18,8(sp)
 40067d8:	dc400115 	stw	r17,4(sp)
 40067dc:	dc000015 	stw	r16,0(sp)
 40067e0:	dfc00315 	stw	ra,12(sp)
 40067e4:	2021883a 	mov	r16,r4
 40067e8:	2823883a 	mov	r17,r5
 40067ec:	3025883a 	mov	r18,r6
 40067f0:	20000226 	beq	r4,zero,40067fc <_fputc_r+0x2c>
 40067f4:	20800e17 	ldw	r2,56(r4)
 40067f8:	10000926 	beq	r2,zero,4006820 <_fputc_r+0x50>
 40067fc:	8009883a 	mov	r4,r16
 4006800:	880b883a 	mov	r5,r17
 4006804:	900d883a 	mov	r6,r18
 4006808:	dfc00317 	ldw	ra,12(sp)
 400680c:	dc800217 	ldw	r18,8(sp)
 4006810:	dc400117 	ldw	r17,4(sp)
 4006814:	dc000017 	ldw	r16,0(sp)
 4006818:	dec00404 	addi	sp,sp,16
 400681c:	4008e881 	jmpi	4008e88 <_putc_r>
 4006820:	40065140 	call	4006514 <__sinit>
 4006824:	003ff506 	br	40067fc <_fputc_r+0x2c>

04006828 <_fputs_r>:
 4006828:	defff804 	addi	sp,sp,-32
 400682c:	dc000515 	stw	r16,20(sp)
 4006830:	2021883a 	mov	r16,r4
 4006834:	2809883a 	mov	r4,r5
 4006838:	dc400615 	stw	r17,24(sp)
 400683c:	dfc00715 	stw	ra,28(sp)
 4006840:	3023883a 	mov	r17,r6
 4006844:	d9400015 	stw	r5,0(sp)
 4006848:	40029d00 	call	40029d0 <strlen>
 400684c:	00c00044 	movi	r3,1
 4006850:	d8800115 	stw	r2,4(sp)
 4006854:	d8c00315 	stw	r3,12(sp)
 4006858:	d8800415 	stw	r2,16(sp)
 400685c:	dec00215 	stw	sp,8(sp)
 4006860:	80000326 	beq	r16,zero,4006870 <_fputs_r+0x48>
 4006864:	80800e17 	ldw	r2,56(r16)
 4006868:	8009883a 	mov	r4,r16
 400686c:	10000926 	beq	r2,zero,4006894 <_fputs_r+0x6c>
 4006870:	8009883a 	mov	r4,r16
 4006874:	880b883a 	mov	r5,r17
 4006878:	d9800204 	addi	r6,sp,8
 400687c:	4006cf80 	call	4006cf8 <__sfvwrite_r>
 4006880:	dfc00717 	ldw	ra,28(sp)
 4006884:	dc400617 	ldw	r17,24(sp)
 4006888:	dc000517 	ldw	r16,20(sp)
 400688c:	dec00804 	addi	sp,sp,32
 4006890:	f800283a 	ret
 4006894:	40065140 	call	4006514 <__sinit>
 4006898:	003ff506 	br	4006870 <_fputs_r+0x48>

0400689c <fputs>:
 400689c:	01810174 	movhi	r6,1029
 40068a0:	31b9bf04 	addi	r6,r6,-6404
 40068a4:	2007883a 	mov	r3,r4
 40068a8:	31000017 	ldw	r4,0(r6)
 40068ac:	280d883a 	mov	r6,r5
 40068b0:	180b883a 	mov	r5,r3
 40068b4:	40068281 	jmpi	4006828 <_fputs_r>

040068b8 <_malloc_trim_r>:
 40068b8:	defffb04 	addi	sp,sp,-20
 40068bc:	dcc00315 	stw	r19,12(sp)
 40068c0:	04c10174 	movhi	r19,1029
 40068c4:	9cf39704 	addi	r19,r19,-12708
 40068c8:	dc800215 	stw	r18,8(sp)
 40068cc:	dc400115 	stw	r17,4(sp)
 40068d0:	dc000015 	stw	r16,0(sp)
 40068d4:	2823883a 	mov	r17,r5
 40068d8:	2025883a 	mov	r18,r4
 40068dc:	dfc00415 	stw	ra,16(sp)
 40068e0:	400c9780 	call	400c978 <__malloc_lock>
 40068e4:	98800217 	ldw	r2,8(r19)
 40068e8:	9009883a 	mov	r4,r18
 40068ec:	000b883a 	mov	r5,zero
 40068f0:	10c00117 	ldw	r3,4(r2)
 40068f4:	00bfff04 	movi	r2,-4
 40068f8:	18a0703a 	and	r16,r3,r2
 40068fc:	8463c83a 	sub	r17,r16,r17
 4006900:	8c43fbc4 	addi	r17,r17,4079
 4006904:	8822d33a 	srli	r17,r17,12
 4006908:	0083ffc4 	movi	r2,4095
 400690c:	8c7fffc4 	addi	r17,r17,-1
 4006910:	8822933a 	slli	r17,r17,12
 4006914:	1440060e 	bge	r2,r17,4006930 <_malloc_trim_r+0x78>
 4006918:	40095d40 	call	40095d4 <_sbrk_r>
 400691c:	98c00217 	ldw	r3,8(r19)
 4006920:	9009883a 	mov	r4,r18
 4006924:	044bc83a 	sub	r5,zero,r17
 4006928:	80c7883a 	add	r3,r16,r3
 400692c:	10c00926 	beq	r2,r3,4006954 <_malloc_trim_r+0x9c>
 4006930:	400ca800 	call	400ca80 <__malloc_unlock>
 4006934:	0005883a 	mov	r2,zero
 4006938:	dfc00417 	ldw	ra,16(sp)
 400693c:	dcc00317 	ldw	r19,12(sp)
 4006940:	dc800217 	ldw	r18,8(sp)
 4006944:	dc400117 	ldw	r17,4(sp)
 4006948:	dc000017 	ldw	r16,0(sp)
 400694c:	dec00504 	addi	sp,sp,20
 4006950:	f800283a 	ret
 4006954:	9009883a 	mov	r4,r18
 4006958:	40095d40 	call	40095d4 <_sbrk_r>
 400695c:	844dc83a 	sub	r6,r16,r17
 4006960:	00ffffc4 	movi	r3,-1
 4006964:	9009883a 	mov	r4,r18
 4006968:	000b883a 	mov	r5,zero
 400696c:	01c10174 	movhi	r7,1029
 4006970:	39c39504 	addi	r7,r7,3668
 4006974:	31800054 	ori	r6,r6,1
 4006978:	10c00926 	beq	r2,r3,40069a0 <_malloc_trim_r+0xe8>
 400697c:	38800017 	ldw	r2,0(r7)
 4006980:	98c00217 	ldw	r3,8(r19)
 4006984:	9009883a 	mov	r4,r18
 4006988:	1445c83a 	sub	r2,r2,r17
 400698c:	38800015 	stw	r2,0(r7)
 4006990:	19800115 	stw	r6,4(r3)
 4006994:	400ca800 	call	400ca80 <__malloc_unlock>
 4006998:	00800044 	movi	r2,1
 400699c:	003fe606 	br	4006938 <_malloc_trim_r+0x80>
 40069a0:	40095d40 	call	40095d4 <_sbrk_r>
 40069a4:	99800217 	ldw	r6,8(r19)
 40069a8:	100f883a 	mov	r7,r2
 40069ac:	9009883a 	mov	r4,r18
 40069b0:	1187c83a 	sub	r3,r2,r6
 40069b4:	008003c4 	movi	r2,15
 40069b8:	19400054 	ori	r5,r3,1
 40069bc:	10ffdc0e 	bge	r2,r3,4006930 <_malloc_trim_r+0x78>
 40069c0:	00810174 	movhi	r2,1029
 40069c4:	10b9c404 	addi	r2,r2,-6384
 40069c8:	10c00017 	ldw	r3,0(r2)
 40069cc:	00810174 	movhi	r2,1029
 40069d0:	10839504 	addi	r2,r2,3668
 40069d4:	31400115 	stw	r5,4(r6)
 40069d8:	38c7c83a 	sub	r3,r7,r3
 40069dc:	10c00015 	stw	r3,0(r2)
 40069e0:	003fd306 	br	4006930 <_malloc_trim_r+0x78>

040069e4 <_free_r>:
 40069e4:	defffd04 	addi	sp,sp,-12
 40069e8:	dc400115 	stw	r17,4(sp)
 40069ec:	dc000015 	stw	r16,0(sp)
 40069f0:	dfc00215 	stw	ra,8(sp)
 40069f4:	2821883a 	mov	r16,r5
 40069f8:	2023883a 	mov	r17,r4
 40069fc:	28005a26 	beq	r5,zero,4006b68 <_free_r+0x184>
 4006a00:	400c9780 	call	400c978 <__malloc_lock>
 4006a04:	823ffe04 	addi	r8,r16,-8
 4006a08:	41400117 	ldw	r5,4(r8)
 4006a0c:	00bfff84 	movi	r2,-2
 4006a10:	02810174 	movhi	r10,1029
 4006a14:	52b39704 	addi	r10,r10,-12708
 4006a18:	288e703a 	and	r7,r5,r2
 4006a1c:	41cd883a 	add	r6,r8,r7
 4006a20:	30c00117 	ldw	r3,4(r6)
 4006a24:	51000217 	ldw	r4,8(r10)
 4006a28:	00bfff04 	movi	r2,-4
 4006a2c:	1892703a 	and	r9,r3,r2
 4006a30:	5017883a 	mov	r11,r10
 4006a34:	31006726 	beq	r6,r4,4006bd4 <_free_r+0x1f0>
 4006a38:	2880004c 	andi	r2,r5,1
 4006a3c:	1005003a 	cmpeq	r2,r2,zero
 4006a40:	32400115 	stw	r9,4(r6)
 4006a44:	10001a1e 	bne	r2,zero,4006ab0 <_free_r+0xcc>
 4006a48:	000b883a 	mov	r5,zero
 4006a4c:	3247883a 	add	r3,r6,r9
 4006a50:	18800117 	ldw	r2,4(r3)
 4006a54:	1080004c 	andi	r2,r2,1
 4006a58:	1000231e 	bne	r2,zero,4006ae8 <_free_r+0x104>
 4006a5c:	280ac03a 	cmpne	r5,r5,zero
 4006a60:	3a4f883a 	add	r7,r7,r9
 4006a64:	2800451e 	bne	r5,zero,4006b7c <_free_r+0x198>
 4006a68:	31000217 	ldw	r4,8(r6)
 4006a6c:	00810174 	movhi	r2,1029
 4006a70:	10b39904 	addi	r2,r2,-12700
 4006a74:	20807b26 	beq	r4,r2,4006c64 <_free_r+0x280>
 4006a78:	30800317 	ldw	r2,12(r6)
 4006a7c:	3a07883a 	add	r3,r7,r8
 4006a80:	19c00015 	stw	r7,0(r3)
 4006a84:	11000215 	stw	r4,8(r2)
 4006a88:	20800315 	stw	r2,12(r4)
 4006a8c:	38800054 	ori	r2,r7,1
 4006a90:	40800115 	stw	r2,4(r8)
 4006a94:	28001a26 	beq	r5,zero,4006b00 <_free_r+0x11c>
 4006a98:	8809883a 	mov	r4,r17
 4006a9c:	dfc00217 	ldw	ra,8(sp)
 4006aa0:	dc400117 	ldw	r17,4(sp)
 4006aa4:	dc000017 	ldw	r16,0(sp)
 4006aa8:	dec00304 	addi	sp,sp,12
 4006aac:	400ca801 	jmpi	400ca80 <__malloc_unlock>
 4006ab0:	80bffe17 	ldw	r2,-8(r16)
 4006ab4:	50c00204 	addi	r3,r10,8
 4006ab8:	4091c83a 	sub	r8,r8,r2
 4006abc:	41000217 	ldw	r4,8(r8)
 4006ac0:	388f883a 	add	r7,r7,r2
 4006ac4:	20c06126 	beq	r4,r3,4006c4c <_free_r+0x268>
 4006ac8:	40800317 	ldw	r2,12(r8)
 4006acc:	3247883a 	add	r3,r6,r9
 4006ad0:	000b883a 	mov	r5,zero
 4006ad4:	11000215 	stw	r4,8(r2)
 4006ad8:	20800315 	stw	r2,12(r4)
 4006adc:	18800117 	ldw	r2,4(r3)
 4006ae0:	1080004c 	andi	r2,r2,1
 4006ae4:	103fdd26 	beq	r2,zero,4006a5c <_free_r+0x78>
 4006ae8:	38800054 	ori	r2,r7,1
 4006aec:	3a07883a 	add	r3,r7,r8
 4006af0:	280ac03a 	cmpne	r5,r5,zero
 4006af4:	40800115 	stw	r2,4(r8)
 4006af8:	19c00015 	stw	r7,0(r3)
 4006afc:	283fe61e 	bne	r5,zero,4006a98 <_free_r+0xb4>
 4006b00:	00807fc4 	movi	r2,511
 4006b04:	11c01f2e 	bgeu	r2,r7,4006b84 <_free_r+0x1a0>
 4006b08:	3806d27a 	srli	r3,r7,9
 4006b0c:	1800481e 	bne	r3,zero,4006c30 <_free_r+0x24c>
 4006b10:	3804d0fa 	srli	r2,r7,3
 4006b14:	100690fa 	slli	r3,r2,3
 4006b18:	1acd883a 	add	r6,r3,r11
 4006b1c:	31400217 	ldw	r5,8(r6)
 4006b20:	31405926 	beq	r6,r5,4006c88 <_free_r+0x2a4>
 4006b24:	28800117 	ldw	r2,4(r5)
 4006b28:	00ffff04 	movi	r3,-4
 4006b2c:	10c4703a 	and	r2,r2,r3
 4006b30:	3880022e 	bgeu	r7,r2,4006b3c <_free_r+0x158>
 4006b34:	29400217 	ldw	r5,8(r5)
 4006b38:	317ffa1e 	bne	r6,r5,4006b24 <_free_r+0x140>
 4006b3c:	29800317 	ldw	r6,12(r5)
 4006b40:	41800315 	stw	r6,12(r8)
 4006b44:	41400215 	stw	r5,8(r8)
 4006b48:	8809883a 	mov	r4,r17
 4006b4c:	2a000315 	stw	r8,12(r5)
 4006b50:	32000215 	stw	r8,8(r6)
 4006b54:	dfc00217 	ldw	ra,8(sp)
 4006b58:	dc400117 	ldw	r17,4(sp)
 4006b5c:	dc000017 	ldw	r16,0(sp)
 4006b60:	dec00304 	addi	sp,sp,12
 4006b64:	400ca801 	jmpi	400ca80 <__malloc_unlock>
 4006b68:	dfc00217 	ldw	ra,8(sp)
 4006b6c:	dc400117 	ldw	r17,4(sp)
 4006b70:	dc000017 	ldw	r16,0(sp)
 4006b74:	dec00304 	addi	sp,sp,12
 4006b78:	f800283a 	ret
 4006b7c:	31000217 	ldw	r4,8(r6)
 4006b80:	003fbd06 	br	4006a78 <_free_r+0x94>
 4006b84:	3806d0fa 	srli	r3,r7,3
 4006b88:	00800044 	movi	r2,1
 4006b8c:	51400117 	ldw	r5,4(r10)
 4006b90:	180890fa 	slli	r4,r3,3
 4006b94:	1807d0ba 	srai	r3,r3,2
 4006b98:	22c9883a 	add	r4,r4,r11
 4006b9c:	21800217 	ldw	r6,8(r4)
 4006ba0:	10c4983a 	sll	r2,r2,r3
 4006ba4:	41000315 	stw	r4,12(r8)
 4006ba8:	41800215 	stw	r6,8(r8)
 4006bac:	288ab03a 	or	r5,r5,r2
 4006bb0:	22000215 	stw	r8,8(r4)
 4006bb4:	8809883a 	mov	r4,r17
 4006bb8:	51400115 	stw	r5,4(r10)
 4006bbc:	32000315 	stw	r8,12(r6)
 4006bc0:	dfc00217 	ldw	ra,8(sp)
 4006bc4:	dc400117 	ldw	r17,4(sp)
 4006bc8:	dc000017 	ldw	r16,0(sp)
 4006bcc:	dec00304 	addi	sp,sp,12
 4006bd0:	400ca801 	jmpi	400ca80 <__malloc_unlock>
 4006bd4:	2880004c 	andi	r2,r5,1
 4006bd8:	3a4d883a 	add	r6,r7,r9
 4006bdc:	1000071e 	bne	r2,zero,4006bfc <_free_r+0x218>
 4006be0:	80bffe17 	ldw	r2,-8(r16)
 4006be4:	4091c83a 	sub	r8,r8,r2
 4006be8:	41000317 	ldw	r4,12(r8)
 4006bec:	40c00217 	ldw	r3,8(r8)
 4006bf0:	308d883a 	add	r6,r6,r2
 4006bf4:	20c00215 	stw	r3,8(r4)
 4006bf8:	19000315 	stw	r4,12(r3)
 4006bfc:	00810174 	movhi	r2,1029
 4006c00:	10b9c304 	addi	r2,r2,-6388
 4006c04:	11000017 	ldw	r4,0(r2)
 4006c08:	30c00054 	ori	r3,r6,1
 4006c0c:	52000215 	stw	r8,8(r10)
 4006c10:	40c00115 	stw	r3,4(r8)
 4006c14:	313fa036 	bltu	r6,r4,4006a98 <_free_r+0xb4>
 4006c18:	00810174 	movhi	r2,1029
 4006c1c:	10819c04 	addi	r2,r2,1648
 4006c20:	11400017 	ldw	r5,0(r2)
 4006c24:	8809883a 	mov	r4,r17
 4006c28:	40068b80 	call	40068b8 <_malloc_trim_r>
 4006c2c:	003f9a06 	br	4006a98 <_free_r+0xb4>
 4006c30:	00800104 	movi	r2,4
 4006c34:	10c0072e 	bgeu	r2,r3,4006c54 <_free_r+0x270>
 4006c38:	00800504 	movi	r2,20
 4006c3c:	10c01936 	bltu	r2,r3,4006ca4 <_free_r+0x2c0>
 4006c40:	188016c4 	addi	r2,r3,91
 4006c44:	100690fa 	slli	r3,r2,3
 4006c48:	003fb306 	br	4006b18 <_free_r+0x134>
 4006c4c:	01400044 	movi	r5,1
 4006c50:	003f7e06 	br	4006a4c <_free_r+0x68>
 4006c54:	3804d1ba 	srli	r2,r7,6
 4006c58:	10800e04 	addi	r2,r2,56
 4006c5c:	100690fa 	slli	r3,r2,3
 4006c60:	003fad06 	br	4006b18 <_free_r+0x134>
 4006c64:	22000315 	stw	r8,12(r4)
 4006c68:	22000215 	stw	r8,8(r4)
 4006c6c:	3a05883a 	add	r2,r7,r8
 4006c70:	38c00054 	ori	r3,r7,1
 4006c74:	11c00015 	stw	r7,0(r2)
 4006c78:	41000215 	stw	r4,8(r8)
 4006c7c:	40c00115 	stw	r3,4(r8)
 4006c80:	41000315 	stw	r4,12(r8)
 4006c84:	003f8406 	br	4006a98 <_free_r+0xb4>
 4006c88:	1005d0ba 	srai	r2,r2,2
 4006c8c:	00c00044 	movi	r3,1
 4006c90:	51000117 	ldw	r4,4(r10)
 4006c94:	1886983a 	sll	r3,r3,r2
 4006c98:	20c8b03a 	or	r4,r4,r3
 4006c9c:	51000115 	stw	r4,4(r10)
 4006ca0:	003fa706 	br	4006b40 <_free_r+0x15c>
 4006ca4:	00801504 	movi	r2,84
 4006ca8:	10c00436 	bltu	r2,r3,4006cbc <_free_r+0x2d8>
 4006cac:	3804d33a 	srli	r2,r7,12
 4006cb0:	10801b84 	addi	r2,r2,110
 4006cb4:	100690fa 	slli	r3,r2,3
 4006cb8:	003f9706 	br	4006b18 <_free_r+0x134>
 4006cbc:	00805504 	movi	r2,340
 4006cc0:	10c00436 	bltu	r2,r3,4006cd4 <_free_r+0x2f0>
 4006cc4:	3804d3fa 	srli	r2,r7,15
 4006cc8:	10801dc4 	addi	r2,r2,119
 4006ccc:	100690fa 	slli	r3,r2,3
 4006cd0:	003f9106 	br	4006b18 <_free_r+0x134>
 4006cd4:	00815504 	movi	r2,1364
 4006cd8:	10c0032e 	bgeu	r2,r3,4006ce8 <_free_r+0x304>
 4006cdc:	00801f84 	movi	r2,126
 4006ce0:	00c0fc04 	movi	r3,1008
 4006ce4:	003f8c06 	br	4006b18 <_free_r+0x134>
 4006ce8:	3804d4ba 	srli	r2,r7,18
 4006cec:	10801f04 	addi	r2,r2,124
 4006cf0:	100690fa 	slli	r3,r2,3
 4006cf4:	003f8806 	br	4006b18 <_free_r+0x134>

04006cf8 <__sfvwrite_r>:
 4006cf8:	30800217 	ldw	r2,8(r6)
 4006cfc:	defff504 	addi	sp,sp,-44
 4006d00:	df000915 	stw	fp,36(sp)
 4006d04:	dd800715 	stw	r22,28(sp)
 4006d08:	dc800315 	stw	r18,12(sp)
 4006d0c:	dfc00a15 	stw	ra,40(sp)
 4006d10:	ddc00815 	stw	r23,32(sp)
 4006d14:	dd400615 	stw	r21,24(sp)
 4006d18:	dd000515 	stw	r20,20(sp)
 4006d1c:	dcc00415 	stw	r19,16(sp)
 4006d20:	dc400215 	stw	r17,8(sp)
 4006d24:	dc000115 	stw	r16,4(sp)
 4006d28:	302d883a 	mov	r22,r6
 4006d2c:	2039883a 	mov	fp,r4
 4006d30:	2825883a 	mov	r18,r5
 4006d34:	10001c26 	beq	r2,zero,4006da8 <__sfvwrite_r+0xb0>
 4006d38:	29c0030b 	ldhu	r7,12(r5)
 4006d3c:	3880020c 	andi	r2,r7,8
 4006d40:	10002726 	beq	r2,zero,4006de0 <__sfvwrite_r+0xe8>
 4006d44:	28800417 	ldw	r2,16(r5)
 4006d48:	10002526 	beq	r2,zero,4006de0 <__sfvwrite_r+0xe8>
 4006d4c:	3880008c 	andi	r2,r7,2
 4006d50:	b5400017 	ldw	r21,0(r22)
 4006d54:	10002826 	beq	r2,zero,4006df8 <__sfvwrite_r+0x100>
 4006d58:	0021883a 	mov	r16,zero
 4006d5c:	0023883a 	mov	r17,zero
 4006d60:	880d883a 	mov	r6,r17
 4006d64:	e009883a 	mov	r4,fp
 4006d68:	00810004 	movi	r2,1024
 4006d6c:	80006e26 	beq	r16,zero,4006f28 <__sfvwrite_r+0x230>
 4006d70:	800f883a 	mov	r7,r16
 4006d74:	91400717 	ldw	r5,28(r18)
 4006d78:	1400012e 	bgeu	r2,r16,4006d80 <__sfvwrite_r+0x88>
 4006d7c:	100f883a 	mov	r7,r2
 4006d80:	90c00917 	ldw	r3,36(r18)
 4006d84:	183ee83a 	callr	r3
 4006d88:	1007883a 	mov	r3,r2
 4006d8c:	80a1c83a 	sub	r16,r16,r2
 4006d90:	88a3883a 	add	r17,r17,r2
 4006d94:	00806d0e 	bge	zero,r2,4006f4c <__sfvwrite_r+0x254>
 4006d98:	b0800217 	ldw	r2,8(r22)
 4006d9c:	10c5c83a 	sub	r2,r2,r3
 4006da0:	b0800215 	stw	r2,8(r22)
 4006da4:	103fee1e 	bne	r2,zero,4006d60 <__sfvwrite_r+0x68>
 4006da8:	0009883a 	mov	r4,zero
 4006dac:	2005883a 	mov	r2,r4
 4006db0:	dfc00a17 	ldw	ra,40(sp)
 4006db4:	df000917 	ldw	fp,36(sp)
 4006db8:	ddc00817 	ldw	r23,32(sp)
 4006dbc:	dd800717 	ldw	r22,28(sp)
 4006dc0:	dd400617 	ldw	r21,24(sp)
 4006dc4:	dd000517 	ldw	r20,20(sp)
 4006dc8:	dcc00417 	ldw	r19,16(sp)
 4006dcc:	dc800317 	ldw	r18,12(sp)
 4006dd0:	dc400217 	ldw	r17,8(sp)
 4006dd4:	dc000117 	ldw	r16,4(sp)
 4006dd8:	dec00b04 	addi	sp,sp,44
 4006ddc:	f800283a 	ret
 4006de0:	40049740 	call	4004974 <__swsetup_r>
 4006de4:	1000e41e 	bne	r2,zero,4007178 <__sfvwrite_r+0x480>
 4006de8:	91c0030b 	ldhu	r7,12(r18)
 4006dec:	b5400017 	ldw	r21,0(r22)
 4006df0:	3880008c 	andi	r2,r7,2
 4006df4:	103fd81e 	bne	r2,zero,4006d58 <__sfvwrite_r+0x60>
 4006df8:	3880004c 	andi	r2,r7,1
 4006dfc:	1005003a 	cmpeq	r2,r2,zero
 4006e00:	10005726 	beq	r2,zero,4006f60 <__sfvwrite_r+0x268>
 4006e04:	0029883a 	mov	r20,zero
 4006e08:	002f883a 	mov	r23,zero
 4006e0c:	a0004226 	beq	r20,zero,4006f18 <__sfvwrite_r+0x220>
 4006e10:	3880800c 	andi	r2,r7,512
 4006e14:	94000217 	ldw	r16,8(r18)
 4006e18:	10008b26 	beq	r2,zero,4007048 <__sfvwrite_r+0x350>
 4006e1c:	800d883a 	mov	r6,r16
 4006e20:	a400a536 	bltu	r20,r16,40070b8 <__sfvwrite_r+0x3c0>
 4006e24:	3881200c 	andi	r2,r7,1152
 4006e28:	10002726 	beq	r2,zero,4006ec8 <__sfvwrite_r+0x1d0>
 4006e2c:	90800517 	ldw	r2,20(r18)
 4006e30:	92000417 	ldw	r8,16(r18)
 4006e34:	91400017 	ldw	r5,0(r18)
 4006e38:	1087883a 	add	r3,r2,r2
 4006e3c:	1887883a 	add	r3,r3,r2
 4006e40:	1808d7fa 	srli	r4,r3,31
 4006e44:	2a21c83a 	sub	r16,r5,r8
 4006e48:	80800044 	addi	r2,r16,1
 4006e4c:	20c9883a 	add	r4,r4,r3
 4006e50:	2027d07a 	srai	r19,r4,1
 4006e54:	a085883a 	add	r2,r20,r2
 4006e58:	980d883a 	mov	r6,r19
 4006e5c:	9880022e 	bgeu	r19,r2,4006e68 <__sfvwrite_r+0x170>
 4006e60:	1027883a 	mov	r19,r2
 4006e64:	100d883a 	mov	r6,r2
 4006e68:	3881000c 	andi	r2,r7,1024
 4006e6c:	1000b826 	beq	r2,zero,4007150 <__sfvwrite_r+0x458>
 4006e70:	300b883a 	mov	r5,r6
 4006e74:	e009883a 	mov	r4,fp
 4006e78:	400756c0 	call	400756c <_malloc_r>
 4006e7c:	10003126 	beq	r2,zero,4006f44 <__sfvwrite_r+0x24c>
 4006e80:	91400417 	ldw	r5,16(r18)
 4006e84:	1009883a 	mov	r4,r2
 4006e88:	800d883a 	mov	r6,r16
 4006e8c:	1023883a 	mov	r17,r2
 4006e90:	4001de40 	call	4001de4 <memcpy>
 4006e94:	90c0030b 	ldhu	r3,12(r18)
 4006e98:	00beffc4 	movi	r2,-1025
 4006e9c:	1886703a 	and	r3,r3,r2
 4006ea0:	18c02014 	ori	r3,r3,128
 4006ea4:	90c0030d 	sth	r3,12(r18)
 4006ea8:	9c07c83a 	sub	r3,r19,r16
 4006eac:	8c05883a 	add	r2,r17,r16
 4006eb0:	a00d883a 	mov	r6,r20
 4006eb4:	a021883a 	mov	r16,r20
 4006eb8:	90800015 	stw	r2,0(r18)
 4006ebc:	90c00215 	stw	r3,8(r18)
 4006ec0:	94400415 	stw	r17,16(r18)
 4006ec4:	94c00515 	stw	r19,20(r18)
 4006ec8:	91000017 	ldw	r4,0(r18)
 4006ecc:	b80b883a 	mov	r5,r23
 4006ed0:	a023883a 	mov	r17,r20
 4006ed4:	4001e840 	call	4001e84 <memmove>
 4006ed8:	90c00217 	ldw	r3,8(r18)
 4006edc:	90800017 	ldw	r2,0(r18)
 4006ee0:	a027883a 	mov	r19,r20
 4006ee4:	1c07c83a 	sub	r3,r3,r16
 4006ee8:	1405883a 	add	r2,r2,r16
 4006eec:	90c00215 	stw	r3,8(r18)
 4006ef0:	a021883a 	mov	r16,r20
 4006ef4:	90800015 	stw	r2,0(r18)
 4006ef8:	b0800217 	ldw	r2,8(r22)
 4006efc:	1405c83a 	sub	r2,r2,r16
 4006f00:	b0800215 	stw	r2,8(r22)
 4006f04:	103fa826 	beq	r2,zero,4006da8 <__sfvwrite_r+0xb0>
 4006f08:	a469c83a 	sub	r20,r20,r17
 4006f0c:	91c0030b 	ldhu	r7,12(r18)
 4006f10:	bcef883a 	add	r23,r23,r19
 4006f14:	a03fbe1e 	bne	r20,zero,4006e10 <__sfvwrite_r+0x118>
 4006f18:	adc00017 	ldw	r23,0(r21)
 4006f1c:	ad000117 	ldw	r20,4(r21)
 4006f20:	ad400204 	addi	r21,r21,8
 4006f24:	003fb906 	br	4006e0c <__sfvwrite_r+0x114>
 4006f28:	ac400017 	ldw	r17,0(r21)
 4006f2c:	ac000117 	ldw	r16,4(r21)
 4006f30:	ad400204 	addi	r21,r21,8
 4006f34:	003f8a06 	br	4006d60 <__sfvwrite_r+0x68>
 4006f38:	91400417 	ldw	r5,16(r18)
 4006f3c:	e009883a 	mov	r4,fp
 4006f40:	40069e40 	call	40069e4 <_free_r>
 4006f44:	00800304 	movi	r2,12
 4006f48:	e0800015 	stw	r2,0(fp)
 4006f4c:	9080030b 	ldhu	r2,12(r18)
 4006f50:	013fffc4 	movi	r4,-1
 4006f54:	10801014 	ori	r2,r2,64
 4006f58:	9080030d 	sth	r2,12(r18)
 4006f5c:	003f9306 	br	4006dac <__sfvwrite_r+0xb4>
 4006f60:	0027883a 	mov	r19,zero
 4006f64:	002f883a 	mov	r23,zero
 4006f68:	d8000015 	stw	zero,0(sp)
 4006f6c:	0029883a 	mov	r20,zero
 4006f70:	98001e26 	beq	r19,zero,4006fec <__sfvwrite_r+0x2f4>
 4006f74:	d8c00017 	ldw	r3,0(sp)
 4006f78:	1804c03a 	cmpne	r2,r3,zero
 4006f7c:	10005e26 	beq	r2,zero,40070f8 <__sfvwrite_r+0x400>
 4006f80:	9821883a 	mov	r16,r19
 4006f84:	a4c0012e 	bgeu	r20,r19,4006f8c <__sfvwrite_r+0x294>
 4006f88:	a021883a 	mov	r16,r20
 4006f8c:	91000017 	ldw	r4,0(r18)
 4006f90:	90800417 	ldw	r2,16(r18)
 4006f94:	91800217 	ldw	r6,8(r18)
 4006f98:	91c00517 	ldw	r7,20(r18)
 4006f9c:	1100022e 	bgeu	r2,r4,4006fa8 <__sfvwrite_r+0x2b0>
 4006fa0:	31e3883a 	add	r17,r6,r7
 4006fa4:	8c001616 	blt	r17,r16,4007000 <__sfvwrite_r+0x308>
 4006fa8:	81c03816 	blt	r16,r7,400708c <__sfvwrite_r+0x394>
 4006fac:	90c00917 	ldw	r3,36(r18)
 4006fb0:	91400717 	ldw	r5,28(r18)
 4006fb4:	e009883a 	mov	r4,fp
 4006fb8:	b80d883a 	mov	r6,r23
 4006fbc:	183ee83a 	callr	r3
 4006fc0:	1023883a 	mov	r17,r2
 4006fc4:	00bfe10e 	bge	zero,r2,4006f4c <__sfvwrite_r+0x254>
 4006fc8:	a469c83a 	sub	r20,r20,r17
 4006fcc:	a0001826 	beq	r20,zero,4007030 <__sfvwrite_r+0x338>
 4006fd0:	b0800217 	ldw	r2,8(r22)
 4006fd4:	1445c83a 	sub	r2,r2,r17
 4006fd8:	b0800215 	stw	r2,8(r22)
 4006fdc:	103f7226 	beq	r2,zero,4006da8 <__sfvwrite_r+0xb0>
 4006fe0:	9c67c83a 	sub	r19,r19,r17
 4006fe4:	bc6f883a 	add	r23,r23,r17
 4006fe8:	983fe21e 	bne	r19,zero,4006f74 <__sfvwrite_r+0x27c>
 4006fec:	adc00017 	ldw	r23,0(r21)
 4006ff0:	acc00117 	ldw	r19,4(r21)
 4006ff4:	ad400204 	addi	r21,r21,8
 4006ff8:	d8000015 	stw	zero,0(sp)
 4006ffc:	003fdc06 	br	4006f70 <__sfvwrite_r+0x278>
 4007000:	b80b883a 	mov	r5,r23
 4007004:	880d883a 	mov	r6,r17
 4007008:	4001e840 	call	4001e84 <memmove>
 400700c:	90c00017 	ldw	r3,0(r18)
 4007010:	e009883a 	mov	r4,fp
 4007014:	900b883a 	mov	r5,r18
 4007018:	1c47883a 	add	r3,r3,r17
 400701c:	90c00015 	stw	r3,0(r18)
 4007020:	400627c0 	call	400627c <_fflush_r>
 4007024:	103fc91e 	bne	r2,zero,4006f4c <__sfvwrite_r+0x254>
 4007028:	a469c83a 	sub	r20,r20,r17
 400702c:	a03fe81e 	bne	r20,zero,4006fd0 <__sfvwrite_r+0x2d8>
 4007030:	e009883a 	mov	r4,fp
 4007034:	900b883a 	mov	r5,r18
 4007038:	400627c0 	call	400627c <_fflush_r>
 400703c:	103fc31e 	bne	r2,zero,4006f4c <__sfvwrite_r+0x254>
 4007040:	d8000015 	stw	zero,0(sp)
 4007044:	003fe206 	br	4006fd0 <__sfvwrite_r+0x2d8>
 4007048:	91000017 	ldw	r4,0(r18)
 400704c:	90800417 	ldw	r2,16(r18)
 4007050:	1100022e 	bgeu	r2,r4,400705c <__sfvwrite_r+0x364>
 4007054:	8023883a 	mov	r17,r16
 4007058:	85003136 	bltu	r16,r20,4007120 <__sfvwrite_r+0x428>
 400705c:	91c00517 	ldw	r7,20(r18)
 4007060:	a1c01836 	bltu	r20,r7,40070c4 <__sfvwrite_r+0x3cc>
 4007064:	90c00917 	ldw	r3,36(r18)
 4007068:	91400717 	ldw	r5,28(r18)
 400706c:	e009883a 	mov	r4,fp
 4007070:	b80d883a 	mov	r6,r23
 4007074:	183ee83a 	callr	r3
 4007078:	1021883a 	mov	r16,r2
 400707c:	00bfb30e 	bge	zero,r2,4006f4c <__sfvwrite_r+0x254>
 4007080:	1023883a 	mov	r17,r2
 4007084:	1027883a 	mov	r19,r2
 4007088:	003f9b06 	br	4006ef8 <__sfvwrite_r+0x200>
 400708c:	b80b883a 	mov	r5,r23
 4007090:	800d883a 	mov	r6,r16
 4007094:	4001e840 	call	4001e84 <memmove>
 4007098:	90c00217 	ldw	r3,8(r18)
 400709c:	90800017 	ldw	r2,0(r18)
 40070a0:	8023883a 	mov	r17,r16
 40070a4:	1c07c83a 	sub	r3,r3,r16
 40070a8:	1405883a 	add	r2,r2,r16
 40070ac:	90c00215 	stw	r3,8(r18)
 40070b0:	90800015 	stw	r2,0(r18)
 40070b4:	003fc406 	br	4006fc8 <__sfvwrite_r+0x2d0>
 40070b8:	a00d883a 	mov	r6,r20
 40070bc:	a021883a 	mov	r16,r20
 40070c0:	003f8106 	br	4006ec8 <__sfvwrite_r+0x1d0>
 40070c4:	b80b883a 	mov	r5,r23
 40070c8:	a00d883a 	mov	r6,r20
 40070cc:	4001e840 	call	4001e84 <memmove>
 40070d0:	90c00217 	ldw	r3,8(r18)
 40070d4:	90800017 	ldw	r2,0(r18)
 40070d8:	a021883a 	mov	r16,r20
 40070dc:	1d07c83a 	sub	r3,r3,r20
 40070e0:	1505883a 	add	r2,r2,r20
 40070e4:	a023883a 	mov	r17,r20
 40070e8:	a027883a 	mov	r19,r20
 40070ec:	90c00215 	stw	r3,8(r18)
 40070f0:	90800015 	stw	r2,0(r18)
 40070f4:	003f8006 	br	4006ef8 <__sfvwrite_r+0x200>
 40070f8:	b809883a 	mov	r4,r23
 40070fc:	01400284 	movi	r5,10
 4007100:	980d883a 	mov	r6,r19
 4007104:	4007cac0 	call	4007cac <memchr>
 4007108:	10001726 	beq	r2,zero,4007168 <__sfvwrite_r+0x470>
 400710c:	15c5c83a 	sub	r2,r2,r23
 4007110:	15000044 	addi	r20,r2,1
 4007114:	00800044 	movi	r2,1
 4007118:	d8800015 	stw	r2,0(sp)
 400711c:	003f9806 	br	4006f80 <__sfvwrite_r+0x288>
 4007120:	b80b883a 	mov	r5,r23
 4007124:	800d883a 	mov	r6,r16
 4007128:	4001e840 	call	4001e84 <memmove>
 400712c:	90c00017 	ldw	r3,0(r18)
 4007130:	e009883a 	mov	r4,fp
 4007134:	900b883a 	mov	r5,r18
 4007138:	1c07883a 	add	r3,r3,r16
 400713c:	90c00015 	stw	r3,0(r18)
 4007140:	8027883a 	mov	r19,r16
 4007144:	400627c0 	call	400627c <_fflush_r>
 4007148:	103f6b26 	beq	r2,zero,4006ef8 <__sfvwrite_r+0x200>
 400714c:	003f7f06 	br	4006f4c <__sfvwrite_r+0x254>
 4007150:	400b883a 	mov	r5,r8
 4007154:	e009883a 	mov	r4,fp
 4007158:	4008f700 	call	4008f70 <_realloc_r>
 400715c:	103f7626 	beq	r2,zero,4006f38 <__sfvwrite_r+0x240>
 4007160:	1023883a 	mov	r17,r2
 4007164:	003f5006 	br	4006ea8 <__sfvwrite_r+0x1b0>
 4007168:	00c00044 	movi	r3,1
 400716c:	9d000044 	addi	r20,r19,1
 4007170:	d8c00015 	stw	r3,0(sp)
 4007174:	003f8206 	br	4006f80 <__sfvwrite_r+0x288>
 4007178:	9080030b 	ldhu	r2,12(r18)
 400717c:	00c00244 	movi	r3,9
 4007180:	013fffc4 	movi	r4,-1
 4007184:	10801014 	ori	r2,r2,64
 4007188:	9080030d 	sth	r2,12(r18)
 400718c:	e0c00015 	stw	r3,0(fp)
 4007190:	003f0606 	br	4006dac <__sfvwrite_r+0xb4>

04007194 <_fwalk_reent>:
 4007194:	defff704 	addi	sp,sp,-36
 4007198:	dcc00315 	stw	r19,12(sp)
 400719c:	24c0b804 	addi	r19,r4,736
 40071a0:	dd800615 	stw	r22,24(sp)
 40071a4:	dd400515 	stw	r21,20(sp)
 40071a8:	dfc00815 	stw	ra,32(sp)
 40071ac:	ddc00715 	stw	r23,28(sp)
 40071b0:	dd000415 	stw	r20,16(sp)
 40071b4:	dc800215 	stw	r18,8(sp)
 40071b8:	dc400115 	stw	r17,4(sp)
 40071bc:	dc000015 	stw	r16,0(sp)
 40071c0:	202b883a 	mov	r21,r4
 40071c4:	282d883a 	mov	r22,r5
 40071c8:	40065040 	call	4006504 <__sfp_lock_acquire>
 40071cc:	98002126 	beq	r19,zero,4007254 <_fwalk_reent+0xc0>
 40071d0:	002f883a 	mov	r23,zero
 40071d4:	9c800117 	ldw	r18,4(r19)
 40071d8:	9c000217 	ldw	r16,8(r19)
 40071dc:	90bfffc4 	addi	r2,r18,-1
 40071e0:	10000d16 	blt	r2,zero,4007218 <_fwalk_reent+0x84>
 40071e4:	0023883a 	mov	r17,zero
 40071e8:	053fffc4 	movi	r20,-1
 40071ec:	8080030f 	ldh	r2,12(r16)
 40071f0:	8c400044 	addi	r17,r17,1
 40071f4:	10000626 	beq	r2,zero,4007210 <_fwalk_reent+0x7c>
 40071f8:	8080038f 	ldh	r2,14(r16)
 40071fc:	800b883a 	mov	r5,r16
 4007200:	a809883a 	mov	r4,r21
 4007204:	15000226 	beq	r2,r20,4007210 <_fwalk_reent+0x7c>
 4007208:	b03ee83a 	callr	r22
 400720c:	b8aeb03a 	or	r23,r23,r2
 4007210:	84001704 	addi	r16,r16,92
 4007214:	947ff51e 	bne	r18,r17,40071ec <_fwalk_reent+0x58>
 4007218:	9cc00017 	ldw	r19,0(r19)
 400721c:	983fed1e 	bne	r19,zero,40071d4 <_fwalk_reent+0x40>
 4007220:	40065080 	call	4006508 <__sfp_lock_release>
 4007224:	b805883a 	mov	r2,r23
 4007228:	dfc00817 	ldw	ra,32(sp)
 400722c:	ddc00717 	ldw	r23,28(sp)
 4007230:	dd800617 	ldw	r22,24(sp)
 4007234:	dd400517 	ldw	r21,20(sp)
 4007238:	dd000417 	ldw	r20,16(sp)
 400723c:	dcc00317 	ldw	r19,12(sp)
 4007240:	dc800217 	ldw	r18,8(sp)
 4007244:	dc400117 	ldw	r17,4(sp)
 4007248:	dc000017 	ldw	r16,0(sp)
 400724c:	dec00904 	addi	sp,sp,36
 4007250:	f800283a 	ret
 4007254:	002f883a 	mov	r23,zero
 4007258:	003ff106 	br	4007220 <_fwalk_reent+0x8c>

0400725c <_fwalk>:
 400725c:	defff804 	addi	sp,sp,-32
 4007260:	dcc00315 	stw	r19,12(sp)
 4007264:	24c0b804 	addi	r19,r4,736
 4007268:	dd400515 	stw	r21,20(sp)
 400726c:	dfc00715 	stw	ra,28(sp)
 4007270:	dd800615 	stw	r22,24(sp)
 4007274:	dd000415 	stw	r20,16(sp)
 4007278:	dc800215 	stw	r18,8(sp)
 400727c:	dc400115 	stw	r17,4(sp)
 4007280:	dc000015 	stw	r16,0(sp)
 4007284:	282b883a 	mov	r21,r5
 4007288:	40065040 	call	4006504 <__sfp_lock_acquire>
 400728c:	98001f26 	beq	r19,zero,400730c <_fwalk+0xb0>
 4007290:	002d883a 	mov	r22,zero
 4007294:	9c800117 	ldw	r18,4(r19)
 4007298:	9c000217 	ldw	r16,8(r19)
 400729c:	90bfffc4 	addi	r2,r18,-1
 40072a0:	10000c16 	blt	r2,zero,40072d4 <_fwalk+0x78>
 40072a4:	0023883a 	mov	r17,zero
 40072a8:	053fffc4 	movi	r20,-1
 40072ac:	8080030f 	ldh	r2,12(r16)
 40072b0:	8c400044 	addi	r17,r17,1
 40072b4:	10000526 	beq	r2,zero,40072cc <_fwalk+0x70>
 40072b8:	8080038f 	ldh	r2,14(r16)
 40072bc:	8009883a 	mov	r4,r16
 40072c0:	15000226 	beq	r2,r20,40072cc <_fwalk+0x70>
 40072c4:	a83ee83a 	callr	r21
 40072c8:	b0acb03a 	or	r22,r22,r2
 40072cc:	84001704 	addi	r16,r16,92
 40072d0:	947ff61e 	bne	r18,r17,40072ac <_fwalk+0x50>
 40072d4:	9cc00017 	ldw	r19,0(r19)
 40072d8:	983fee1e 	bne	r19,zero,4007294 <_fwalk+0x38>
 40072dc:	40065080 	call	4006508 <__sfp_lock_release>
 40072e0:	b005883a 	mov	r2,r22
 40072e4:	dfc00717 	ldw	ra,28(sp)
 40072e8:	dd800617 	ldw	r22,24(sp)
 40072ec:	dd400517 	ldw	r21,20(sp)
 40072f0:	dd000417 	ldw	r20,16(sp)
 40072f4:	dcc00317 	ldw	r19,12(sp)
 40072f8:	dc800217 	ldw	r18,8(sp)
 40072fc:	dc400117 	ldw	r17,4(sp)
 4007300:	dc000017 	ldw	r16,0(sp)
 4007304:	dec00804 	addi	sp,sp,32
 4007308:	f800283a 	ret
 400730c:	002d883a 	mov	r22,zero
 4007310:	003ff206 	br	40072dc <_fwalk+0x80>

04007314 <__locale_charset>:
 4007314:	d0a00417 	ldw	r2,-32752(gp)
 4007318:	f800283a 	ret

0400731c <_localeconv_r>:
 400731c:	00810174 	movhi	r2,1029
 4007320:	10a18104 	addi	r2,r2,-31228
 4007324:	f800283a 	ret

04007328 <localeconv>:
 4007328:	00810174 	movhi	r2,1029
 400732c:	10b9bf04 	addi	r2,r2,-6404
 4007330:	11000017 	ldw	r4,0(r2)
 4007334:	400731c1 	jmpi	400731c <_localeconv_r>

04007338 <_setlocale_r>:
 4007338:	defffc04 	addi	sp,sp,-16
 400733c:	00c10134 	movhi	r3,1028
 4007340:	18df6d04 	addi	r3,r3,32180
 4007344:	dc800215 	stw	r18,8(sp)
 4007348:	dc400115 	stw	r17,4(sp)
 400734c:	dc000015 	stw	r16,0(sp)
 4007350:	2023883a 	mov	r17,r4
 4007354:	2825883a 	mov	r18,r5
 4007358:	dfc00315 	stw	ra,12(sp)
 400735c:	3021883a 	mov	r16,r6
 4007360:	3009883a 	mov	r4,r6
 4007364:	180b883a 	mov	r5,r3
 4007368:	30000926 	beq	r6,zero,4007390 <_setlocale_r+0x58>
 400736c:	40097900 	call	4009790 <strcmp>
 4007370:	8009883a 	mov	r4,r16
 4007374:	01410174 	movhi	r5,1029
 4007378:	29616804 	addi	r5,r5,-31328
 400737c:	10000b1e 	bne	r2,zero,40073ac <_setlocale_r+0x74>
 4007380:	8c000d15 	stw	r16,52(r17)
 4007384:	8c800c15 	stw	r18,48(r17)
 4007388:	00c10134 	movhi	r3,1028
 400738c:	18df6d04 	addi	r3,r3,32180
 4007390:	1805883a 	mov	r2,r3
 4007394:	dfc00317 	ldw	ra,12(sp)
 4007398:	dc800217 	ldw	r18,8(sp)
 400739c:	dc400117 	ldw	r17,4(sp)
 40073a0:	dc000017 	ldw	r16,0(sp)
 40073a4:	dec00404 	addi	sp,sp,16
 40073a8:	f800283a 	ret
 40073ac:	40097900 	call	4009790 <strcmp>
 40073b0:	0007883a 	mov	r3,zero
 40073b4:	103ff226 	beq	r2,zero,4007380 <_setlocale_r+0x48>
 40073b8:	003ff506 	br	4007390 <_setlocale_r+0x58>

040073bc <setlocale>:
 40073bc:	01810174 	movhi	r6,1029
 40073c0:	31b9bf04 	addi	r6,r6,-6404
 40073c4:	2007883a 	mov	r3,r4
 40073c8:	31000017 	ldw	r4,0(r6)
 40073cc:	280d883a 	mov	r6,r5
 40073d0:	180b883a 	mov	r5,r3
 40073d4:	40073381 	jmpi	4007338 <_setlocale_r>

040073d8 <__smakebuf_r>:
 40073d8:	2880030b 	ldhu	r2,12(r5)
 40073dc:	deffed04 	addi	sp,sp,-76
 40073e0:	dc401015 	stw	r17,64(sp)
 40073e4:	1080008c 	andi	r2,r2,2
 40073e8:	dc000f15 	stw	r16,60(sp)
 40073ec:	dfc01215 	stw	ra,72(sp)
 40073f0:	dc801115 	stw	r18,68(sp)
 40073f4:	2821883a 	mov	r16,r5
 40073f8:	2023883a 	mov	r17,r4
 40073fc:	10000b26 	beq	r2,zero,400742c <__smakebuf_r+0x54>
 4007400:	28c010c4 	addi	r3,r5,67
 4007404:	00800044 	movi	r2,1
 4007408:	28800515 	stw	r2,20(r5)
 400740c:	28c00415 	stw	r3,16(r5)
 4007410:	28c00015 	stw	r3,0(r5)
 4007414:	dfc01217 	ldw	ra,72(sp)
 4007418:	dc801117 	ldw	r18,68(sp)
 400741c:	dc401017 	ldw	r17,64(sp)
 4007420:	dc000f17 	ldw	r16,60(sp)
 4007424:	dec01304 	addi	sp,sp,76
 4007428:	f800283a 	ret
 400742c:	2940038f 	ldh	r5,14(r5)
 4007430:	28002116 	blt	r5,zero,40074b8 <__smakebuf_r+0xe0>
 4007434:	d80d883a 	mov	r6,sp
 4007438:	4009c580 	call	4009c58 <_fstat_r>
 400743c:	10001e16 	blt	r2,zero,40074b8 <__smakebuf_r+0xe0>
 4007440:	d8800117 	ldw	r2,4(sp)
 4007444:	00e00014 	movui	r3,32768
 4007448:	113c000c 	andi	r4,r2,61440
 400744c:	20c03126 	beq	r4,r3,4007514 <__smakebuf_r+0x13c>
 4007450:	8080030b 	ldhu	r2,12(r16)
 4007454:	00c80004 	movi	r3,8192
 4007458:	10820014 	ori	r2,r2,2048
 400745c:	8080030d 	sth	r2,12(r16)
 4007460:	20c01e26 	beq	r4,r3,40074dc <__smakebuf_r+0x104>
 4007464:	04810004 	movi	r18,1024
 4007468:	8809883a 	mov	r4,r17
 400746c:	900b883a 	mov	r5,r18
 4007470:	400756c0 	call	400756c <_malloc_r>
 4007474:	1009883a 	mov	r4,r2
 4007478:	10003126 	beq	r2,zero,4007540 <__smakebuf_r+0x168>
 400747c:	80c0030b 	ldhu	r3,12(r16)
 4007480:	00810034 	movhi	r2,1024
 4007484:	10997e04 	addi	r2,r2,26104
 4007488:	88800f15 	stw	r2,60(r17)
 400748c:	18c02014 	ori	r3,r3,128
 4007490:	84800515 	stw	r18,20(r16)
 4007494:	80c0030d 	sth	r3,12(r16)
 4007498:	81000415 	stw	r4,16(r16)
 400749c:	81000015 	stw	r4,0(r16)
 40074a0:	dfc01217 	ldw	ra,72(sp)
 40074a4:	dc801117 	ldw	r18,68(sp)
 40074a8:	dc401017 	ldw	r17,64(sp)
 40074ac:	dc000f17 	ldw	r16,60(sp)
 40074b0:	dec01304 	addi	sp,sp,76
 40074b4:	f800283a 	ret
 40074b8:	80c0030b 	ldhu	r3,12(r16)
 40074bc:	1880200c 	andi	r2,r3,128
 40074c0:	10000426 	beq	r2,zero,40074d4 <__smakebuf_r+0xfc>
 40074c4:	04801004 	movi	r18,64
 40074c8:	18820014 	ori	r2,r3,2048
 40074cc:	8080030d 	sth	r2,12(r16)
 40074d0:	003fe506 	br	4007468 <__smakebuf_r+0x90>
 40074d4:	04810004 	movi	r18,1024
 40074d8:	003ffb06 	br	40074c8 <__smakebuf_r+0xf0>
 40074dc:	8140038f 	ldh	r5,14(r16)
 40074e0:	8809883a 	mov	r4,r17
 40074e4:	4009ccc0 	call	4009ccc <_isatty_r>
 40074e8:	103fde26 	beq	r2,zero,4007464 <__smakebuf_r+0x8c>
 40074ec:	8080030b 	ldhu	r2,12(r16)
 40074f0:	80c010c4 	addi	r3,r16,67
 40074f4:	04810004 	movi	r18,1024
 40074f8:	10800054 	ori	r2,r2,1
 40074fc:	8080030d 	sth	r2,12(r16)
 4007500:	00800044 	movi	r2,1
 4007504:	80c00415 	stw	r3,16(r16)
 4007508:	80800515 	stw	r2,20(r16)
 400750c:	80c00015 	stw	r3,0(r16)
 4007510:	003fd506 	br	4007468 <__smakebuf_r+0x90>
 4007514:	80c00a17 	ldw	r3,40(r16)
 4007518:	00810074 	movhi	r2,1025
 400751c:	10a59304 	addi	r2,r2,-27060
 4007520:	18bfcb1e 	bne	r3,r2,4007450 <__smakebuf_r+0x78>
 4007524:	8080030b 	ldhu	r2,12(r16)
 4007528:	00c10004 	movi	r3,1024
 400752c:	1825883a 	mov	r18,r3
 4007530:	10c4b03a 	or	r2,r2,r3
 4007534:	8080030d 	sth	r2,12(r16)
 4007538:	80c01315 	stw	r3,76(r16)
 400753c:	003fca06 	br	4007468 <__smakebuf_r+0x90>
 4007540:	8100030b 	ldhu	r4,12(r16)
 4007544:	2080800c 	andi	r2,r4,512
 4007548:	103fb21e 	bne	r2,zero,4007414 <__smakebuf_r+0x3c>
 400754c:	80c010c4 	addi	r3,r16,67
 4007550:	21000094 	ori	r4,r4,2
 4007554:	00800044 	movi	r2,1
 4007558:	80800515 	stw	r2,20(r16)
 400755c:	8100030d 	sth	r4,12(r16)
 4007560:	80c00415 	stw	r3,16(r16)
 4007564:	80c00015 	stw	r3,0(r16)
 4007568:	003faa06 	br	4007414 <__smakebuf_r+0x3c>

0400756c <_malloc_r>:
 400756c:	defff604 	addi	sp,sp,-40
 4007570:	28c002c4 	addi	r3,r5,11
 4007574:	00800584 	movi	r2,22
 4007578:	dc800215 	stw	r18,8(sp)
 400757c:	dfc00915 	stw	ra,36(sp)
 4007580:	df000815 	stw	fp,32(sp)
 4007584:	ddc00715 	stw	r23,28(sp)
 4007588:	dd800615 	stw	r22,24(sp)
 400758c:	dd400515 	stw	r21,20(sp)
 4007590:	dd000415 	stw	r20,16(sp)
 4007594:	dcc00315 	stw	r19,12(sp)
 4007598:	dc400115 	stw	r17,4(sp)
 400759c:	dc000015 	stw	r16,0(sp)
 40075a0:	2025883a 	mov	r18,r4
 40075a4:	10c01236 	bltu	r2,r3,40075f0 <_malloc_r+0x84>
 40075a8:	04400404 	movi	r17,16
 40075ac:	8940142e 	bgeu	r17,r5,4007600 <_malloc_r+0x94>
 40075b0:	00800304 	movi	r2,12
 40075b4:	0007883a 	mov	r3,zero
 40075b8:	90800015 	stw	r2,0(r18)
 40075bc:	1805883a 	mov	r2,r3
 40075c0:	dfc00917 	ldw	ra,36(sp)
 40075c4:	df000817 	ldw	fp,32(sp)
 40075c8:	ddc00717 	ldw	r23,28(sp)
 40075cc:	dd800617 	ldw	r22,24(sp)
 40075d0:	dd400517 	ldw	r21,20(sp)
 40075d4:	dd000417 	ldw	r20,16(sp)
 40075d8:	dcc00317 	ldw	r19,12(sp)
 40075dc:	dc800217 	ldw	r18,8(sp)
 40075e0:	dc400117 	ldw	r17,4(sp)
 40075e4:	dc000017 	ldw	r16,0(sp)
 40075e8:	dec00a04 	addi	sp,sp,40
 40075ec:	f800283a 	ret
 40075f0:	00bffe04 	movi	r2,-8
 40075f4:	18a2703a 	and	r17,r3,r2
 40075f8:	883fed16 	blt	r17,zero,40075b0 <_malloc_r+0x44>
 40075fc:	897fec36 	bltu	r17,r5,40075b0 <_malloc_r+0x44>
 4007600:	9009883a 	mov	r4,r18
 4007604:	400c9780 	call	400c978 <__malloc_lock>
 4007608:	00807dc4 	movi	r2,503
 400760c:	14402b2e 	bgeu	r2,r17,40076bc <_malloc_r+0x150>
 4007610:	8806d27a 	srli	r3,r17,9
 4007614:	18003f1e 	bne	r3,zero,4007714 <_malloc_r+0x1a8>
 4007618:	880cd0fa 	srli	r6,r17,3
 400761c:	300490fa 	slli	r2,r6,3
 4007620:	02c10174 	movhi	r11,1029
 4007624:	5af39704 	addi	r11,r11,-12708
 4007628:	12cb883a 	add	r5,r2,r11
 400762c:	2c000317 	ldw	r16,12(r5)
 4007630:	580f883a 	mov	r7,r11
 4007634:	2c00041e 	bne	r5,r16,4007648 <_malloc_r+0xdc>
 4007638:	00000a06 	br	4007664 <_malloc_r+0xf8>
 400763c:	1800860e 	bge	r3,zero,4007858 <_malloc_r+0x2ec>
 4007640:	84000317 	ldw	r16,12(r16)
 4007644:	2c000726 	beq	r5,r16,4007664 <_malloc_r+0xf8>
 4007648:	80800117 	ldw	r2,4(r16)
 400764c:	00ffff04 	movi	r3,-4
 4007650:	10c8703a 	and	r4,r2,r3
 4007654:	2447c83a 	sub	r3,r4,r17
 4007658:	008003c4 	movi	r2,15
 400765c:	10fff70e 	bge	r2,r3,400763c <_malloc_r+0xd0>
 4007660:	31bfffc4 	addi	r6,r6,-1
 4007664:	32400044 	addi	r9,r6,1
 4007668:	02810174 	movhi	r10,1029
 400766c:	52b39904 	addi	r10,r10,-12700
 4007670:	54000217 	ldw	r16,8(r10)
 4007674:	8280a026 	beq	r16,r10,40078f8 <_malloc_r+0x38c>
 4007678:	80800117 	ldw	r2,4(r16)
 400767c:	00ffff04 	movi	r3,-4
 4007680:	10ca703a 	and	r5,r2,r3
 4007684:	2c4dc83a 	sub	r6,r5,r17
 4007688:	008003c4 	movi	r2,15
 400768c:	11808316 	blt	r2,r6,400789c <_malloc_r+0x330>
 4007690:	52800315 	stw	r10,12(r10)
 4007694:	52800215 	stw	r10,8(r10)
 4007698:	30002916 	blt	r6,zero,4007740 <_malloc_r+0x1d4>
 400769c:	8147883a 	add	r3,r16,r5
 40076a0:	18800117 	ldw	r2,4(r3)
 40076a4:	9009883a 	mov	r4,r18
 40076a8:	10800054 	ori	r2,r2,1
 40076ac:	18800115 	stw	r2,4(r3)
 40076b0:	400ca800 	call	400ca80 <__malloc_unlock>
 40076b4:	80c00204 	addi	r3,r16,8
 40076b8:	003fc006 	br	40075bc <_malloc_r+0x50>
 40076bc:	02c10174 	movhi	r11,1029
 40076c0:	5af39704 	addi	r11,r11,-12708
 40076c4:	8ac5883a 	add	r2,r17,r11
 40076c8:	14000317 	ldw	r16,12(r2)
 40076cc:	580f883a 	mov	r7,r11
 40076d0:	8806d0fa 	srli	r3,r17,3
 40076d4:	14006c26 	beq	r2,r16,4007888 <_malloc_r+0x31c>
 40076d8:	80c00117 	ldw	r3,4(r16)
 40076dc:	00bfff04 	movi	r2,-4
 40076e0:	81800317 	ldw	r6,12(r16)
 40076e4:	1886703a 	and	r3,r3,r2
 40076e8:	80c7883a 	add	r3,r16,r3
 40076ec:	18800117 	ldw	r2,4(r3)
 40076f0:	81400217 	ldw	r5,8(r16)
 40076f4:	9009883a 	mov	r4,r18
 40076f8:	10800054 	ori	r2,r2,1
 40076fc:	18800115 	stw	r2,4(r3)
 4007700:	31400215 	stw	r5,8(r6)
 4007704:	29800315 	stw	r6,12(r5)
 4007708:	400ca800 	call	400ca80 <__malloc_unlock>
 400770c:	80c00204 	addi	r3,r16,8
 4007710:	003faa06 	br	40075bc <_malloc_r+0x50>
 4007714:	00800104 	movi	r2,4
 4007718:	10c0052e 	bgeu	r2,r3,4007730 <_malloc_r+0x1c4>
 400771c:	00800504 	movi	r2,20
 4007720:	10c07836 	bltu	r2,r3,4007904 <_malloc_r+0x398>
 4007724:	198016c4 	addi	r6,r3,91
 4007728:	300490fa 	slli	r2,r6,3
 400772c:	003fbc06 	br	4007620 <_malloc_r+0xb4>
 4007730:	8804d1ba 	srli	r2,r17,6
 4007734:	11800e04 	addi	r6,r2,56
 4007738:	300490fa 	slli	r2,r6,3
 400773c:	003fb806 	br	4007620 <_malloc_r+0xb4>
 4007740:	00807fc4 	movi	r2,511
 4007744:	1140bb36 	bltu	r2,r5,4007a34 <_malloc_r+0x4c8>
 4007748:	2806d0fa 	srli	r3,r5,3
 400774c:	573ffe04 	addi	fp,r10,-8
 4007750:	00800044 	movi	r2,1
 4007754:	180890fa 	slli	r4,r3,3
 4007758:	1807d0ba 	srai	r3,r3,2
 400775c:	e1c00117 	ldw	r7,4(fp)
 4007760:	5909883a 	add	r4,r11,r4
 4007764:	21400217 	ldw	r5,8(r4)
 4007768:	10c4983a 	sll	r2,r2,r3
 400776c:	81000315 	stw	r4,12(r16)
 4007770:	81400215 	stw	r5,8(r16)
 4007774:	388eb03a 	or	r7,r7,r2
 4007778:	2c000315 	stw	r16,12(r5)
 400777c:	24000215 	stw	r16,8(r4)
 4007780:	e1c00115 	stw	r7,4(fp)
 4007784:	4807883a 	mov	r3,r9
 4007788:	4800cd16 	blt	r9,zero,4007ac0 <_malloc_r+0x554>
 400778c:	1807d0ba 	srai	r3,r3,2
 4007790:	00800044 	movi	r2,1
 4007794:	10c8983a 	sll	r4,r2,r3
 4007798:	39004436 	bltu	r7,r4,40078ac <_malloc_r+0x340>
 400779c:	21c4703a 	and	r2,r4,r7
 40077a0:	10000a1e 	bne	r2,zero,40077cc <_malloc_r+0x260>
 40077a4:	2109883a 	add	r4,r4,r4
 40077a8:	00bfff04 	movi	r2,-4
 40077ac:	4884703a 	and	r2,r9,r2
 40077b0:	3906703a 	and	r3,r7,r4
 40077b4:	12400104 	addi	r9,r2,4
 40077b8:	1800041e 	bne	r3,zero,40077cc <_malloc_r+0x260>
 40077bc:	2109883a 	add	r4,r4,r4
 40077c0:	3904703a 	and	r2,r7,r4
 40077c4:	4a400104 	addi	r9,r9,4
 40077c8:	103ffc26 	beq	r2,zero,40077bc <_malloc_r+0x250>
 40077cc:	480490fa 	slli	r2,r9,3
 40077d0:	4819883a 	mov	r12,r9
 40077d4:	023fff04 	movi	r8,-4
 40077d8:	589b883a 	add	r13,r11,r2
 40077dc:	6807883a 	mov	r3,r13
 40077e0:	014003c4 	movi	r5,15
 40077e4:	1c000317 	ldw	r16,12(r3)
 40077e8:	1c00041e 	bne	r3,r16,40077fc <_malloc_r+0x290>
 40077ec:	0000a706 	br	4007a8c <_malloc_r+0x520>
 40077f0:	3000ab0e 	bge	r6,zero,4007aa0 <_malloc_r+0x534>
 40077f4:	84000317 	ldw	r16,12(r16)
 40077f8:	1c00a426 	beq	r3,r16,4007a8c <_malloc_r+0x520>
 40077fc:	80800117 	ldw	r2,4(r16)
 4007800:	1204703a 	and	r2,r2,r8
 4007804:	144dc83a 	sub	r6,r2,r17
 4007808:	29bff90e 	bge	r5,r6,40077f0 <_malloc_r+0x284>
 400780c:	81000317 	ldw	r4,12(r16)
 4007810:	80c00217 	ldw	r3,8(r16)
 4007814:	89400054 	ori	r5,r17,1
 4007818:	8445883a 	add	r2,r16,r17
 400781c:	20c00215 	stw	r3,8(r4)
 4007820:	19000315 	stw	r4,12(r3)
 4007824:	81400115 	stw	r5,4(r16)
 4007828:	1187883a 	add	r3,r2,r6
 400782c:	31000054 	ori	r4,r6,1
 4007830:	50800315 	stw	r2,12(r10)
 4007834:	50800215 	stw	r2,8(r10)
 4007838:	19800015 	stw	r6,0(r3)
 400783c:	11000115 	stw	r4,4(r2)
 4007840:	12800215 	stw	r10,8(r2)
 4007844:	12800315 	stw	r10,12(r2)
 4007848:	9009883a 	mov	r4,r18
 400784c:	400ca800 	call	400ca80 <__malloc_unlock>
 4007850:	80c00204 	addi	r3,r16,8
 4007854:	003f5906 	br	40075bc <_malloc_r+0x50>
 4007858:	8109883a 	add	r4,r16,r4
 400785c:	20800117 	ldw	r2,4(r4)
 4007860:	80c00217 	ldw	r3,8(r16)
 4007864:	81400317 	ldw	r5,12(r16)
 4007868:	10800054 	ori	r2,r2,1
 400786c:	20800115 	stw	r2,4(r4)
 4007870:	28c00215 	stw	r3,8(r5)
 4007874:	19400315 	stw	r5,12(r3)
 4007878:	9009883a 	mov	r4,r18
 400787c:	400ca800 	call	400ca80 <__malloc_unlock>
 4007880:	80c00204 	addi	r3,r16,8
 4007884:	003f4d06 	br	40075bc <_malloc_r+0x50>
 4007888:	80800204 	addi	r2,r16,8
 400788c:	14000317 	ldw	r16,12(r2)
 4007890:	143f911e 	bne	r2,r16,40076d8 <_malloc_r+0x16c>
 4007894:	1a400084 	addi	r9,r3,2
 4007898:	003f7306 	br	4007668 <_malloc_r+0xfc>
 400789c:	88c00054 	ori	r3,r17,1
 40078a0:	8445883a 	add	r2,r16,r17
 40078a4:	80c00115 	stw	r3,4(r16)
 40078a8:	003fdf06 	br	4007828 <_malloc_r+0x2bc>
 40078ac:	e4000217 	ldw	r16,8(fp)
 40078b0:	00bfff04 	movi	r2,-4
 40078b4:	80c00117 	ldw	r3,4(r16)
 40078b8:	802d883a 	mov	r22,r16
 40078bc:	18aa703a 	and	r21,r3,r2
 40078c0:	ac401636 	bltu	r21,r17,400791c <_malloc_r+0x3b0>
 40078c4:	ac49c83a 	sub	r4,r21,r17
 40078c8:	008003c4 	movi	r2,15
 40078cc:	1100130e 	bge	r2,r4,400791c <_malloc_r+0x3b0>
 40078d0:	88800054 	ori	r2,r17,1
 40078d4:	8447883a 	add	r3,r16,r17
 40078d8:	80800115 	stw	r2,4(r16)
 40078dc:	20800054 	ori	r2,r4,1
 40078e0:	18800115 	stw	r2,4(r3)
 40078e4:	e0c00215 	stw	r3,8(fp)
 40078e8:	9009883a 	mov	r4,r18
 40078ec:	400ca800 	call	400ca80 <__malloc_unlock>
 40078f0:	80c00204 	addi	r3,r16,8
 40078f4:	003f3106 	br	40075bc <_malloc_r+0x50>
 40078f8:	39c00117 	ldw	r7,4(r7)
 40078fc:	573ffe04 	addi	fp,r10,-8
 4007900:	003fa006 	br	4007784 <_malloc_r+0x218>
 4007904:	00801504 	movi	r2,84
 4007908:	10c06736 	bltu	r2,r3,4007aa8 <_malloc_r+0x53c>
 400790c:	8804d33a 	srli	r2,r17,12
 4007910:	11801b84 	addi	r6,r2,110
 4007914:	300490fa 	slli	r2,r6,3
 4007918:	003f4106 	br	4007620 <_malloc_r+0xb4>
 400791c:	d0a7de17 	ldw	r2,-24712(gp)
 4007920:	d0e00617 	ldw	r3,-32744(gp)
 4007924:	053fffc4 	movi	r20,-1
 4007928:	10800404 	addi	r2,r2,16
 400792c:	88a7883a 	add	r19,r17,r2
 4007930:	1d000326 	beq	r3,r20,4007940 <_malloc_r+0x3d4>
 4007934:	98c3ffc4 	addi	r3,r19,4095
 4007938:	00bc0004 	movi	r2,-4096
 400793c:	18a6703a 	and	r19,r3,r2
 4007940:	9009883a 	mov	r4,r18
 4007944:	980b883a 	mov	r5,r19
 4007948:	40095d40 	call	40095d4 <_sbrk_r>
 400794c:	1009883a 	mov	r4,r2
 4007950:	15000426 	beq	r2,r20,4007964 <_malloc_r+0x3f8>
 4007954:	854b883a 	add	r5,r16,r21
 4007958:	1029883a 	mov	r20,r2
 400795c:	11405a2e 	bgeu	r2,r5,4007ac8 <_malloc_r+0x55c>
 4007960:	87000c26 	beq	r16,fp,4007994 <_malloc_r+0x428>
 4007964:	e4000217 	ldw	r16,8(fp)
 4007968:	80c00117 	ldw	r3,4(r16)
 400796c:	00bfff04 	movi	r2,-4
 4007970:	1884703a 	and	r2,r3,r2
 4007974:	14400336 	bltu	r2,r17,4007984 <_malloc_r+0x418>
 4007978:	1449c83a 	sub	r4,r2,r17
 400797c:	008003c4 	movi	r2,15
 4007980:	113fd316 	blt	r2,r4,40078d0 <_malloc_r+0x364>
 4007984:	9009883a 	mov	r4,r18
 4007988:	400ca800 	call	400ca80 <__malloc_unlock>
 400798c:	0007883a 	mov	r3,zero
 4007990:	003f0a06 	br	40075bc <_malloc_r+0x50>
 4007994:	05c10174 	movhi	r23,1029
 4007998:	bdc39504 	addi	r23,r23,3668
 400799c:	b8800017 	ldw	r2,0(r23)
 40079a0:	988d883a 	add	r6,r19,r2
 40079a4:	b9800015 	stw	r6,0(r23)
 40079a8:	d0e00617 	ldw	r3,-32744(gp)
 40079ac:	00bfffc4 	movi	r2,-1
 40079b0:	18808e26 	beq	r3,r2,4007bec <_malloc_r+0x680>
 40079b4:	2145c83a 	sub	r2,r4,r5
 40079b8:	3085883a 	add	r2,r6,r2
 40079bc:	b8800015 	stw	r2,0(r23)
 40079c0:	20c001cc 	andi	r3,r4,7
 40079c4:	18005f1e 	bne	r3,zero,4007b44 <_malloc_r+0x5d8>
 40079c8:	000b883a 	mov	r5,zero
 40079cc:	a4c5883a 	add	r2,r20,r19
 40079d0:	1083ffcc 	andi	r2,r2,4095
 40079d4:	00c40004 	movi	r3,4096
 40079d8:	1887c83a 	sub	r3,r3,r2
 40079dc:	28e7883a 	add	r19,r5,r3
 40079e0:	9009883a 	mov	r4,r18
 40079e4:	980b883a 	mov	r5,r19
 40079e8:	40095d40 	call	40095d4 <_sbrk_r>
 40079ec:	1007883a 	mov	r3,r2
 40079f0:	00bfffc4 	movi	r2,-1
 40079f4:	18807a26 	beq	r3,r2,4007be0 <_malloc_r+0x674>
 40079f8:	1d05c83a 	sub	r2,r3,r20
 40079fc:	9885883a 	add	r2,r19,r2
 4007a00:	10c00054 	ori	r3,r2,1
 4007a04:	b8800017 	ldw	r2,0(r23)
 4007a08:	a021883a 	mov	r16,r20
 4007a0c:	a0c00115 	stw	r3,4(r20)
 4007a10:	9885883a 	add	r2,r19,r2
 4007a14:	b8800015 	stw	r2,0(r23)
 4007a18:	e5000215 	stw	r20,8(fp)
 4007a1c:	b7003626 	beq	r22,fp,4007af8 <_malloc_r+0x58c>
 4007a20:	018003c4 	movi	r6,15
 4007a24:	35404b36 	bltu	r6,r21,4007b54 <_malloc_r+0x5e8>
 4007a28:	00800044 	movi	r2,1
 4007a2c:	a0800115 	stw	r2,4(r20)
 4007a30:	003fcd06 	br	4007968 <_malloc_r+0x3fc>
 4007a34:	2808d27a 	srli	r4,r5,9
 4007a38:	2000371e 	bne	r4,zero,4007b18 <_malloc_r+0x5ac>
 4007a3c:	2808d0fa 	srli	r4,r5,3
 4007a40:	200690fa 	slli	r3,r4,3
 4007a44:	1ad1883a 	add	r8,r3,r11
 4007a48:	41800217 	ldw	r6,8(r8)
 4007a4c:	41805b26 	beq	r8,r6,4007bbc <_malloc_r+0x650>
 4007a50:	30800117 	ldw	r2,4(r6)
 4007a54:	00ffff04 	movi	r3,-4
 4007a58:	10c4703a 	and	r2,r2,r3
 4007a5c:	2880022e 	bgeu	r5,r2,4007a68 <_malloc_r+0x4fc>
 4007a60:	31800217 	ldw	r6,8(r6)
 4007a64:	41bffa1e 	bne	r8,r6,4007a50 <_malloc_r+0x4e4>
 4007a68:	32000317 	ldw	r8,12(r6)
 4007a6c:	39c00117 	ldw	r7,4(r7)
 4007a70:	82000315 	stw	r8,12(r16)
 4007a74:	81800215 	stw	r6,8(r16)
 4007a78:	07010174 	movhi	fp,1029
 4007a7c:	e7339704 	addi	fp,fp,-12708
 4007a80:	34000315 	stw	r16,12(r6)
 4007a84:	44000215 	stw	r16,8(r8)
 4007a88:	003f3e06 	br	4007784 <_malloc_r+0x218>
 4007a8c:	63000044 	addi	r12,r12,1
 4007a90:	608000cc 	andi	r2,r12,3
 4007a94:	10005d26 	beq	r2,zero,4007c0c <_malloc_r+0x6a0>
 4007a98:	18c00204 	addi	r3,r3,8
 4007a9c:	003f5106 	br	40077e4 <_malloc_r+0x278>
 4007aa0:	8089883a 	add	r4,r16,r2
 4007aa4:	003f6d06 	br	400785c <_malloc_r+0x2f0>
 4007aa8:	00805504 	movi	r2,340
 4007aac:	10c02036 	bltu	r2,r3,4007b30 <_malloc_r+0x5c4>
 4007ab0:	8804d3fa 	srli	r2,r17,15
 4007ab4:	11801dc4 	addi	r6,r2,119
 4007ab8:	300490fa 	slli	r2,r6,3
 4007abc:	003ed806 	br	4007620 <_malloc_r+0xb4>
 4007ac0:	48c000c4 	addi	r3,r9,3
 4007ac4:	003f3106 	br	400778c <_malloc_r+0x220>
 4007ac8:	05c10174 	movhi	r23,1029
 4007acc:	bdc39504 	addi	r23,r23,3668
 4007ad0:	b8800017 	ldw	r2,0(r23)
 4007ad4:	988d883a 	add	r6,r19,r2
 4007ad8:	b9800015 	stw	r6,0(r23)
 4007adc:	293fb21e 	bne	r5,r4,40079a8 <_malloc_r+0x43c>
 4007ae0:	2083ffcc 	andi	r2,r4,4095
 4007ae4:	103fb01e 	bne	r2,zero,40079a8 <_malloc_r+0x43c>
 4007ae8:	e4000217 	ldw	r16,8(fp)
 4007aec:	9d45883a 	add	r2,r19,r21
 4007af0:	10800054 	ori	r2,r2,1
 4007af4:	80800115 	stw	r2,4(r16)
 4007af8:	b8c00017 	ldw	r3,0(r23)
 4007afc:	d0a7df17 	ldw	r2,-24708(gp)
 4007b00:	10c0012e 	bgeu	r2,r3,4007b08 <_malloc_r+0x59c>
 4007b04:	d0e7df15 	stw	r3,-24708(gp)
 4007b08:	d0a7e017 	ldw	r2,-24704(gp)
 4007b0c:	10ff962e 	bgeu	r2,r3,4007968 <_malloc_r+0x3fc>
 4007b10:	d0e7e015 	stw	r3,-24704(gp)
 4007b14:	003f9406 	br	4007968 <_malloc_r+0x3fc>
 4007b18:	00800104 	movi	r2,4
 4007b1c:	11001e36 	bltu	r2,r4,4007b98 <_malloc_r+0x62c>
 4007b20:	2804d1ba 	srli	r2,r5,6
 4007b24:	11000e04 	addi	r4,r2,56
 4007b28:	200690fa 	slli	r3,r4,3
 4007b2c:	003fc506 	br	4007a44 <_malloc_r+0x4d8>
 4007b30:	00815504 	movi	r2,1364
 4007b34:	10c01d2e 	bgeu	r2,r3,4007bac <_malloc_r+0x640>
 4007b38:	01801f84 	movi	r6,126
 4007b3c:	0080fc04 	movi	r2,1008
 4007b40:	003eb706 	br	4007620 <_malloc_r+0xb4>
 4007b44:	00800204 	movi	r2,8
 4007b48:	10cbc83a 	sub	r5,r2,r3
 4007b4c:	2169883a 	add	r20,r4,r5
 4007b50:	003f9e06 	br	40079cc <_malloc_r+0x460>
 4007b54:	00bffe04 	movi	r2,-8
 4007b58:	a93ffd04 	addi	r4,r21,-12
 4007b5c:	2088703a 	and	r4,r4,r2
 4007b60:	b10b883a 	add	r5,r22,r4
 4007b64:	00c00144 	movi	r3,5
 4007b68:	28c00215 	stw	r3,8(r5)
 4007b6c:	28c00115 	stw	r3,4(r5)
 4007b70:	b0800117 	ldw	r2,4(r22)
 4007b74:	1080004c 	andi	r2,r2,1
 4007b78:	2084b03a 	or	r2,r4,r2
 4007b7c:	b0800115 	stw	r2,4(r22)
 4007b80:	313fdd2e 	bgeu	r6,r4,4007af8 <_malloc_r+0x58c>
 4007b84:	b1400204 	addi	r5,r22,8
 4007b88:	9009883a 	mov	r4,r18
 4007b8c:	40069e40 	call	40069e4 <_free_r>
 4007b90:	e4000217 	ldw	r16,8(fp)
 4007b94:	003fd806 	br	4007af8 <_malloc_r+0x58c>
 4007b98:	00800504 	movi	r2,20
 4007b9c:	11001536 	bltu	r2,r4,4007bf4 <_malloc_r+0x688>
 4007ba0:	210016c4 	addi	r4,r4,91
 4007ba4:	200690fa 	slli	r3,r4,3
 4007ba8:	003fa606 	br	4007a44 <_malloc_r+0x4d8>
 4007bac:	8804d4ba 	srli	r2,r17,18
 4007bb0:	11801f04 	addi	r6,r2,124
 4007bb4:	300490fa 	slli	r2,r6,3
 4007bb8:	003e9906 	br	4007620 <_malloc_r+0xb4>
 4007bbc:	2009d0ba 	srai	r4,r4,2
 4007bc0:	01410174 	movhi	r5,1029
 4007bc4:	29739704 	addi	r5,r5,-12708
 4007bc8:	00c00044 	movi	r3,1
 4007bcc:	28800117 	ldw	r2,4(r5)
 4007bd0:	1906983a 	sll	r3,r3,r4
 4007bd4:	10c4b03a 	or	r2,r2,r3
 4007bd8:	28800115 	stw	r2,4(r5)
 4007bdc:	003fa306 	br	4007a6c <_malloc_r+0x500>
 4007be0:	0027883a 	mov	r19,zero
 4007be4:	00c00044 	movi	r3,1
 4007be8:	003f8606 	br	4007a04 <_malloc_r+0x498>
 4007bec:	d1200615 	stw	r4,-32744(gp)
 4007bf0:	003f7306 	br	40079c0 <_malloc_r+0x454>
 4007bf4:	00801504 	movi	r2,84
 4007bf8:	11001936 	bltu	r2,r4,4007c60 <_malloc_r+0x6f4>
 4007bfc:	2804d33a 	srli	r2,r5,12
 4007c00:	11001b84 	addi	r4,r2,110
 4007c04:	200690fa 	slli	r3,r4,3
 4007c08:	003f8e06 	br	4007a44 <_malloc_r+0x4d8>
 4007c0c:	480b883a 	mov	r5,r9
 4007c10:	6807883a 	mov	r3,r13
 4007c14:	288000cc 	andi	r2,r5,3
 4007c18:	18fffe04 	addi	r3,r3,-8
 4007c1c:	297fffc4 	addi	r5,r5,-1
 4007c20:	10001526 	beq	r2,zero,4007c78 <_malloc_r+0x70c>
 4007c24:	18800217 	ldw	r2,8(r3)
 4007c28:	10fffa26 	beq	r2,r3,4007c14 <_malloc_r+0x6a8>
 4007c2c:	2109883a 	add	r4,r4,r4
 4007c30:	393f1e36 	bltu	r7,r4,40078ac <_malloc_r+0x340>
 4007c34:	203f1d26 	beq	r4,zero,40078ac <_malloc_r+0x340>
 4007c38:	21c4703a 	and	r2,r4,r7
 4007c3c:	10000226 	beq	r2,zero,4007c48 <_malloc_r+0x6dc>
 4007c40:	6013883a 	mov	r9,r12
 4007c44:	003ee106 	br	40077cc <_malloc_r+0x260>
 4007c48:	2109883a 	add	r4,r4,r4
 4007c4c:	3904703a 	and	r2,r7,r4
 4007c50:	63000104 	addi	r12,r12,4
 4007c54:	103ffc26 	beq	r2,zero,4007c48 <_malloc_r+0x6dc>
 4007c58:	6013883a 	mov	r9,r12
 4007c5c:	003edb06 	br	40077cc <_malloc_r+0x260>
 4007c60:	00805504 	movi	r2,340
 4007c64:	11000836 	bltu	r2,r4,4007c88 <_malloc_r+0x71c>
 4007c68:	2804d3fa 	srli	r2,r5,15
 4007c6c:	11001dc4 	addi	r4,r2,119
 4007c70:	200690fa 	slli	r3,r4,3
 4007c74:	003f7306 	br	4007a44 <_malloc_r+0x4d8>
 4007c78:	0104303a 	nor	r2,zero,r4
 4007c7c:	388e703a 	and	r7,r7,r2
 4007c80:	e1c00115 	stw	r7,4(fp)
 4007c84:	003fe906 	br	4007c2c <_malloc_r+0x6c0>
 4007c88:	00815504 	movi	r2,1364
 4007c8c:	1100032e 	bgeu	r2,r4,4007c9c <_malloc_r+0x730>
 4007c90:	01001f84 	movi	r4,126
 4007c94:	00c0fc04 	movi	r3,1008
 4007c98:	003f6a06 	br	4007a44 <_malloc_r+0x4d8>
 4007c9c:	2804d4ba 	srli	r2,r5,18
 4007ca0:	11001f04 	addi	r4,r2,124
 4007ca4:	200690fa 	slli	r3,r4,3
 4007ca8:	003f6606 	br	4007a44 <_malloc_r+0x4d8>

04007cac <memchr>:
 4007cac:	008000c4 	movi	r2,3
 4007cb0:	29403fcc 	andi	r5,r5,255
 4007cb4:	2007883a 	mov	r3,r4
 4007cb8:	1180022e 	bgeu	r2,r6,4007cc4 <memchr+0x18>
 4007cbc:	2084703a 	and	r2,r4,r2
 4007cc0:	10000b26 	beq	r2,zero,4007cf0 <memchr+0x44>
 4007cc4:	313fffc4 	addi	r4,r6,-1
 4007cc8:	3000051e 	bne	r6,zero,4007ce0 <memchr+0x34>
 4007ccc:	00002c06 	br	4007d80 <memchr+0xd4>
 4007cd0:	213fffc4 	addi	r4,r4,-1
 4007cd4:	00bfffc4 	movi	r2,-1
 4007cd8:	18c00044 	addi	r3,r3,1
 4007cdc:	20802826 	beq	r4,r2,4007d80 <memchr+0xd4>
 4007ce0:	18800003 	ldbu	r2,0(r3)
 4007ce4:	28bffa1e 	bne	r5,r2,4007cd0 <memchr+0x24>
 4007ce8:	1805883a 	mov	r2,r3
 4007cec:	f800283a 	ret
 4007cf0:	0011883a 	mov	r8,zero
 4007cf4:	0007883a 	mov	r3,zero
 4007cf8:	01c00104 	movi	r7,4
 4007cfc:	4004923a 	slli	r2,r8,8
 4007d00:	18c00044 	addi	r3,r3,1
 4007d04:	1151883a 	add	r8,r2,r5
 4007d08:	19fffc1e 	bne	r3,r7,4007cfc <memchr+0x50>
 4007d0c:	02bfbff4 	movhi	r10,65279
 4007d10:	52bfbfc4 	addi	r10,r10,-257
 4007d14:	02602074 	movhi	r9,32897
 4007d18:	4a602004 	addi	r9,r9,-32640
 4007d1c:	02c000c4 	movi	r11,3
 4007d20:	20800017 	ldw	r2,0(r4)
 4007d24:	31bfff04 	addi	r6,r6,-4
 4007d28:	200f883a 	mov	r7,r4
 4007d2c:	1204f03a 	xor	r2,r2,r8
 4007d30:	1287883a 	add	r3,r2,r10
 4007d34:	1a46703a 	and	r3,r3,r9
 4007d38:	0084303a 	nor	r2,zero,r2
 4007d3c:	10c4703a 	and	r2,r2,r3
 4007d40:	10000b26 	beq	r2,zero,4007d70 <memchr+0xc4>
 4007d44:	20800003 	ldbu	r2,0(r4)
 4007d48:	28800f26 	beq	r5,r2,4007d88 <memchr+0xdc>
 4007d4c:	20800043 	ldbu	r2,1(r4)
 4007d50:	21c00044 	addi	r7,r4,1
 4007d54:	28800c26 	beq	r5,r2,4007d88 <memchr+0xdc>
 4007d58:	20800083 	ldbu	r2,2(r4)
 4007d5c:	21c00084 	addi	r7,r4,2
 4007d60:	28800926 	beq	r5,r2,4007d88 <memchr+0xdc>
 4007d64:	208000c3 	ldbu	r2,3(r4)
 4007d68:	21c000c4 	addi	r7,r4,3
 4007d6c:	28800626 	beq	r5,r2,4007d88 <memchr+0xdc>
 4007d70:	21000104 	addi	r4,r4,4
 4007d74:	59bfea36 	bltu	r11,r6,4007d20 <memchr+0x74>
 4007d78:	2007883a 	mov	r3,r4
 4007d7c:	003fd106 	br	4007cc4 <memchr+0x18>
 4007d80:	0005883a 	mov	r2,zero
 4007d84:	f800283a 	ret
 4007d88:	3805883a 	mov	r2,r7
 4007d8c:	f800283a 	ret

04007d90 <_Bfree>:
 4007d90:	28000826 	beq	r5,zero,4007db4 <_Bfree+0x24>
 4007d94:	28800117 	ldw	r2,4(r5)
 4007d98:	21001317 	ldw	r4,76(r4)
 4007d9c:	1085883a 	add	r2,r2,r2
 4007da0:	1085883a 	add	r2,r2,r2
 4007da4:	1105883a 	add	r2,r2,r4
 4007da8:	10c00017 	ldw	r3,0(r2)
 4007dac:	28c00015 	stw	r3,0(r5)
 4007db0:	11400015 	stw	r5,0(r2)
 4007db4:	f800283a 	ret

04007db8 <__hi0bits>:
 4007db8:	20bfffec 	andhi	r2,r4,65535
 4007dbc:	10001426 	beq	r2,zero,4007e10 <__hi0bits+0x58>
 4007dc0:	0007883a 	mov	r3,zero
 4007dc4:	20bfc02c 	andhi	r2,r4,65280
 4007dc8:	1000021e 	bne	r2,zero,4007dd4 <__hi0bits+0x1c>
 4007dcc:	2008923a 	slli	r4,r4,8
 4007dd0:	18c00204 	addi	r3,r3,8
 4007dd4:	20bc002c 	andhi	r2,r4,61440
 4007dd8:	1000021e 	bne	r2,zero,4007de4 <__hi0bits+0x2c>
 4007ddc:	2008913a 	slli	r4,r4,4
 4007de0:	18c00104 	addi	r3,r3,4
 4007de4:	20b0002c 	andhi	r2,r4,49152
 4007de8:	1000031e 	bne	r2,zero,4007df8 <__hi0bits+0x40>
 4007dec:	2105883a 	add	r2,r4,r4
 4007df0:	18c00084 	addi	r3,r3,2
 4007df4:	1089883a 	add	r4,r2,r2
 4007df8:	20000316 	blt	r4,zero,4007e08 <__hi0bits+0x50>
 4007dfc:	2090002c 	andhi	r2,r4,16384
 4007e00:	10000626 	beq	r2,zero,4007e1c <__hi0bits+0x64>
 4007e04:	18c00044 	addi	r3,r3,1
 4007e08:	1805883a 	mov	r2,r3
 4007e0c:	f800283a 	ret
 4007e10:	2008943a 	slli	r4,r4,16
 4007e14:	00c00404 	movi	r3,16
 4007e18:	003fea06 	br	4007dc4 <__hi0bits+0xc>
 4007e1c:	00c00804 	movi	r3,32
 4007e20:	1805883a 	mov	r2,r3
 4007e24:	f800283a 	ret

04007e28 <__lo0bits>:
 4007e28:	20c00017 	ldw	r3,0(r4)
 4007e2c:	188001cc 	andi	r2,r3,7
 4007e30:	10000a26 	beq	r2,zero,4007e5c <__lo0bits+0x34>
 4007e34:	1880004c 	andi	r2,r3,1
 4007e38:	1005003a 	cmpeq	r2,r2,zero
 4007e3c:	10002126 	beq	r2,zero,4007ec4 <__lo0bits+0x9c>
 4007e40:	1880008c 	andi	r2,r3,2
 4007e44:	1000251e 	bne	r2,zero,4007edc <__lo0bits+0xb4>
 4007e48:	1804d0ba 	srli	r2,r3,2
 4007e4c:	01400084 	movi	r5,2
 4007e50:	20800015 	stw	r2,0(r4)
 4007e54:	2805883a 	mov	r2,r5
 4007e58:	f800283a 	ret
 4007e5c:	18bfffcc 	andi	r2,r3,65535
 4007e60:	10001526 	beq	r2,zero,4007eb8 <__lo0bits+0x90>
 4007e64:	000b883a 	mov	r5,zero
 4007e68:	18803fcc 	andi	r2,r3,255
 4007e6c:	1000021e 	bne	r2,zero,4007e78 <__lo0bits+0x50>
 4007e70:	1806d23a 	srli	r3,r3,8
 4007e74:	29400204 	addi	r5,r5,8
 4007e78:	188003cc 	andi	r2,r3,15
 4007e7c:	1000021e 	bne	r2,zero,4007e88 <__lo0bits+0x60>
 4007e80:	1806d13a 	srli	r3,r3,4
 4007e84:	29400104 	addi	r5,r5,4
 4007e88:	188000cc 	andi	r2,r3,3
 4007e8c:	1000021e 	bne	r2,zero,4007e98 <__lo0bits+0x70>
 4007e90:	1806d0ba 	srli	r3,r3,2
 4007e94:	29400084 	addi	r5,r5,2
 4007e98:	1880004c 	andi	r2,r3,1
 4007e9c:	1000031e 	bne	r2,zero,4007eac <__lo0bits+0x84>
 4007ea0:	1806d07a 	srli	r3,r3,1
 4007ea4:	18000a26 	beq	r3,zero,4007ed0 <__lo0bits+0xa8>
 4007ea8:	29400044 	addi	r5,r5,1
 4007eac:	2805883a 	mov	r2,r5
 4007eb0:	20c00015 	stw	r3,0(r4)
 4007eb4:	f800283a 	ret
 4007eb8:	1806d43a 	srli	r3,r3,16
 4007ebc:	01400404 	movi	r5,16
 4007ec0:	003fe906 	br	4007e68 <__lo0bits+0x40>
 4007ec4:	000b883a 	mov	r5,zero
 4007ec8:	2805883a 	mov	r2,r5
 4007ecc:	f800283a 	ret
 4007ed0:	01400804 	movi	r5,32
 4007ed4:	2805883a 	mov	r2,r5
 4007ed8:	f800283a 	ret
 4007edc:	1804d07a 	srli	r2,r3,1
 4007ee0:	01400044 	movi	r5,1
 4007ee4:	20800015 	stw	r2,0(r4)
 4007ee8:	003fda06 	br	4007e54 <__lo0bits+0x2c>

04007eec <__mcmp>:
 4007eec:	20800417 	ldw	r2,16(r4)
 4007ef0:	28c00417 	ldw	r3,16(r5)
 4007ef4:	10cfc83a 	sub	r7,r2,r3
 4007ef8:	38000c1e 	bne	r7,zero,4007f2c <__mcmp+0x40>
 4007efc:	18c5883a 	add	r2,r3,r3
 4007f00:	1085883a 	add	r2,r2,r2
 4007f04:	10c00504 	addi	r3,r2,20
 4007f08:	21000504 	addi	r4,r4,20
 4007f0c:	28cb883a 	add	r5,r5,r3
 4007f10:	2085883a 	add	r2,r4,r2
 4007f14:	10bfff04 	addi	r2,r2,-4
 4007f18:	297fff04 	addi	r5,r5,-4
 4007f1c:	11800017 	ldw	r6,0(r2)
 4007f20:	28c00017 	ldw	r3,0(r5)
 4007f24:	30c0031e 	bne	r6,r3,4007f34 <__mcmp+0x48>
 4007f28:	20bffa36 	bltu	r4,r2,4007f14 <__mcmp+0x28>
 4007f2c:	3805883a 	mov	r2,r7
 4007f30:	f800283a 	ret
 4007f34:	30c00336 	bltu	r6,r3,4007f44 <__mcmp+0x58>
 4007f38:	01c00044 	movi	r7,1
 4007f3c:	3805883a 	mov	r2,r7
 4007f40:	f800283a 	ret
 4007f44:	01ffffc4 	movi	r7,-1
 4007f48:	003ff806 	br	4007f2c <__mcmp+0x40>

04007f4c <__ulp>:
 4007f4c:	295ffc2c 	andhi	r5,r5,32752
 4007f50:	013f3034 	movhi	r4,64704
 4007f54:	290b883a 	add	r5,r5,r4
 4007f58:	0145c83a 	sub	r2,zero,r5
 4007f5c:	1007d53a 	srai	r3,r2,20
 4007f60:	000d883a 	mov	r6,zero
 4007f64:	0140040e 	bge	zero,r5,4007f78 <__ulp+0x2c>
 4007f68:	280f883a 	mov	r7,r5
 4007f6c:	3807883a 	mov	r3,r7
 4007f70:	3005883a 	mov	r2,r6
 4007f74:	f800283a 	ret
 4007f78:	008004c4 	movi	r2,19
 4007f7c:	193ffb04 	addi	r4,r3,-20
 4007f80:	10c00c0e 	bge	r2,r3,4007fb4 <__ulp+0x68>
 4007f84:	008007c4 	movi	r2,31
 4007f88:	1107c83a 	sub	r3,r2,r4
 4007f8c:	00800784 	movi	r2,30
 4007f90:	01400044 	movi	r5,1
 4007f94:	11000216 	blt	r2,r4,4007fa0 <__ulp+0x54>
 4007f98:	00800044 	movi	r2,1
 4007f9c:	10ca983a 	sll	r5,r2,r3
 4007fa0:	000f883a 	mov	r7,zero
 4007fa4:	280d883a 	mov	r6,r5
 4007fa8:	3807883a 	mov	r3,r7
 4007fac:	3005883a 	mov	r2,r6
 4007fb0:	f800283a 	ret
 4007fb4:	00800234 	movhi	r2,8
 4007fb8:	10cfd83a 	sra	r7,r2,r3
 4007fbc:	000d883a 	mov	r6,zero
 4007fc0:	3005883a 	mov	r2,r6
 4007fc4:	3807883a 	mov	r3,r7
 4007fc8:	f800283a 	ret

04007fcc <__b2d>:
 4007fcc:	20800417 	ldw	r2,16(r4)
 4007fd0:	defff904 	addi	sp,sp,-28
 4007fd4:	dd000415 	stw	r20,16(sp)
 4007fd8:	1085883a 	add	r2,r2,r2
 4007fdc:	25000504 	addi	r20,r4,20
 4007fe0:	1085883a 	add	r2,r2,r2
 4007fe4:	dc000015 	stw	r16,0(sp)
 4007fe8:	a0a1883a 	add	r16,r20,r2
 4007fec:	dd400515 	stw	r21,20(sp)
 4007ff0:	857fff17 	ldw	r21,-4(r16)
 4007ff4:	dc400115 	stw	r17,4(sp)
 4007ff8:	dfc00615 	stw	ra,24(sp)
 4007ffc:	a809883a 	mov	r4,r21
 4008000:	2823883a 	mov	r17,r5
 4008004:	dcc00315 	stw	r19,12(sp)
 4008008:	dc800215 	stw	r18,8(sp)
 400800c:	4007db80 	call	4007db8 <__hi0bits>
 4008010:	100b883a 	mov	r5,r2
 4008014:	00800804 	movi	r2,32
 4008018:	1145c83a 	sub	r2,r2,r5
 400801c:	88800015 	stw	r2,0(r17)
 4008020:	00800284 	movi	r2,10
 4008024:	80ffff04 	addi	r3,r16,-4
 4008028:	11401416 	blt	r2,r5,400807c <__b2d+0xb0>
 400802c:	008002c4 	movi	r2,11
 4008030:	1149c83a 	sub	r4,r2,r5
 4008034:	a0c02736 	bltu	r20,r3,40080d4 <__b2d+0x108>
 4008038:	000d883a 	mov	r6,zero
 400803c:	28800544 	addi	r2,r5,21
 4008040:	a906d83a 	srl	r3,r21,r4
 4008044:	a884983a 	sll	r2,r21,r2
 4008048:	1ccffc34 	orhi	r19,r3,16368
 400804c:	11a4b03a 	or	r18,r2,r6
 4008050:	9005883a 	mov	r2,r18
 4008054:	9807883a 	mov	r3,r19
 4008058:	dfc00617 	ldw	ra,24(sp)
 400805c:	dd400517 	ldw	r21,20(sp)
 4008060:	dd000417 	ldw	r20,16(sp)
 4008064:	dcc00317 	ldw	r19,12(sp)
 4008068:	dc800217 	ldw	r18,8(sp)
 400806c:	dc400117 	ldw	r17,4(sp)
 4008070:	dc000017 	ldw	r16,0(sp)
 4008074:	dec00704 	addi	sp,sp,28
 4008078:	f800283a 	ret
 400807c:	a0c00e36 	bltu	r20,r3,40080b8 <__b2d+0xec>
 4008080:	293ffd44 	addi	r4,r5,-11
 4008084:	000d883a 	mov	r6,zero
 4008088:	20000f26 	beq	r4,zero,40080c8 <__b2d+0xfc>
 400808c:	00800804 	movi	r2,32
 4008090:	110bc83a 	sub	r5,r2,r4
 4008094:	a0c01236 	bltu	r20,r3,40080e0 <__b2d+0x114>
 4008098:	000f883a 	mov	r7,zero
 400809c:	a904983a 	sll	r2,r21,r4
 40080a0:	3146d83a 	srl	r3,r6,r5
 40080a4:	3108983a 	sll	r4,r6,r4
 40080a8:	108ffc34 	orhi	r2,r2,16368
 40080ac:	18a6b03a 	or	r19,r3,r2
 40080b0:	3924b03a 	or	r18,r7,r4
 40080b4:	003fe606 	br	4008050 <__b2d+0x84>
 40080b8:	293ffd44 	addi	r4,r5,-11
 40080bc:	81bffe17 	ldw	r6,-8(r16)
 40080c0:	80fffe04 	addi	r3,r16,-8
 40080c4:	203ff11e 	bne	r4,zero,400808c <__b2d+0xc0>
 40080c8:	accffc34 	orhi	r19,r21,16368
 40080cc:	3025883a 	mov	r18,r6
 40080d0:	003fdf06 	br	4008050 <__b2d+0x84>
 40080d4:	18bfff17 	ldw	r2,-4(r3)
 40080d8:	110cd83a 	srl	r6,r2,r4
 40080dc:	003fd706 	br	400803c <__b2d+0x70>
 40080e0:	18bfff17 	ldw	r2,-4(r3)
 40080e4:	114ed83a 	srl	r7,r2,r5
 40080e8:	003fec06 	br	400809c <__b2d+0xd0>

040080ec <__ratio>:
 40080ec:	defff904 	addi	sp,sp,-28
 40080f0:	dc400215 	stw	r17,8(sp)
 40080f4:	2823883a 	mov	r17,r5
 40080f8:	d80b883a 	mov	r5,sp
 40080fc:	dfc00615 	stw	ra,24(sp)
 4008100:	dd000515 	stw	r20,20(sp)
 4008104:	dcc00415 	stw	r19,16(sp)
 4008108:	dc800315 	stw	r18,12(sp)
 400810c:	2025883a 	mov	r18,r4
 4008110:	4007fcc0 	call	4007fcc <__b2d>
 4008114:	8809883a 	mov	r4,r17
 4008118:	d9400104 	addi	r5,sp,4
 400811c:	1027883a 	mov	r19,r2
 4008120:	1829883a 	mov	r20,r3
 4008124:	4007fcc0 	call	4007fcc <__b2d>
 4008128:	89000417 	ldw	r4,16(r17)
 400812c:	91c00417 	ldw	r7,16(r18)
 4008130:	d9800117 	ldw	r6,4(sp)
 4008134:	180b883a 	mov	r5,r3
 4008138:	390fc83a 	sub	r7,r7,r4
 400813c:	1009883a 	mov	r4,r2
 4008140:	d8800017 	ldw	r2,0(sp)
 4008144:	380e917a 	slli	r7,r7,5
 4008148:	2011883a 	mov	r8,r4
 400814c:	1185c83a 	sub	r2,r2,r6
 4008150:	11c5883a 	add	r2,r2,r7
 4008154:	1006953a 	slli	r3,r2,20
 4008158:	2813883a 	mov	r9,r5
 400815c:	00800d0e 	bge	zero,r2,4008194 <__ratio+0xa8>
 4008160:	1d29883a 	add	r20,r3,r20
 4008164:	a00b883a 	mov	r5,r20
 4008168:	480f883a 	mov	r7,r9
 400816c:	9809883a 	mov	r4,r19
 4008170:	400d883a 	mov	r6,r8
 4008174:	400b2800 	call	400b280 <__divdf3>
 4008178:	dfc00617 	ldw	ra,24(sp)
 400817c:	dd000517 	ldw	r20,20(sp)
 4008180:	dcc00417 	ldw	r19,16(sp)
 4008184:	dc800317 	ldw	r18,12(sp)
 4008188:	dc400217 	ldw	r17,8(sp)
 400818c:	dec00704 	addi	sp,sp,28
 4008190:	f800283a 	ret
 4008194:	28d3c83a 	sub	r9,r5,r3
 4008198:	003ff206 	br	4008164 <__ratio+0x78>

0400819c <_mprec_log10>:
 400819c:	defffe04 	addi	sp,sp,-8
 40081a0:	008005c4 	movi	r2,23
 40081a4:	dc000015 	stw	r16,0(sp)
 40081a8:	dfc00115 	stw	ra,4(sp)
 40081ac:	2021883a 	mov	r16,r4
 40081b0:	11000c16 	blt	r2,r4,40081e4 <_mprec_log10+0x48>
 40081b4:	200490fa 	slli	r2,r4,3
 40081b8:	00c10174 	movhi	r3,1029
 40081bc:	18e18d04 	addi	r3,r3,-31180
 40081c0:	10c5883a 	add	r2,r2,r3
 40081c4:	12400117 	ldw	r9,4(r2)
 40081c8:	12000017 	ldw	r8,0(r2)
 40081cc:	4807883a 	mov	r3,r9
 40081d0:	4005883a 	mov	r2,r8
 40081d4:	dfc00117 	ldw	ra,4(sp)
 40081d8:	dc000017 	ldw	r16,0(sp)
 40081dc:	dec00204 	addi	sp,sp,8
 40081e0:	f800283a 	ret
 40081e4:	0011883a 	mov	r8,zero
 40081e8:	024ffc34 	movhi	r9,16368
 40081ec:	0005883a 	mov	r2,zero
 40081f0:	00d00934 	movhi	r3,16420
 40081f4:	480b883a 	mov	r5,r9
 40081f8:	4009883a 	mov	r4,r8
 40081fc:	180f883a 	mov	r7,r3
 4008200:	100d883a 	mov	r6,r2
 4008204:	400aebc0 	call	400aebc <__muldf3>
 4008208:	843fffc4 	addi	r16,r16,-1
 400820c:	1011883a 	mov	r8,r2
 4008210:	1813883a 	mov	r9,r3
 4008214:	803ff51e 	bne	r16,zero,40081ec <_mprec_log10+0x50>
 4008218:	4005883a 	mov	r2,r8
 400821c:	4807883a 	mov	r3,r9
 4008220:	dfc00117 	ldw	ra,4(sp)
 4008224:	dc000017 	ldw	r16,0(sp)
 4008228:	dec00204 	addi	sp,sp,8
 400822c:	f800283a 	ret

04008230 <__copybits>:
 4008230:	297fffc4 	addi	r5,r5,-1
 4008234:	30800417 	ldw	r2,16(r6)
 4008238:	280bd17a 	srai	r5,r5,5
 400823c:	31800504 	addi	r6,r6,20
 4008240:	1085883a 	add	r2,r2,r2
 4008244:	294b883a 	add	r5,r5,r5
 4008248:	294b883a 	add	r5,r5,r5
 400824c:	1085883a 	add	r2,r2,r2
 4008250:	290b883a 	add	r5,r5,r4
 4008254:	3087883a 	add	r3,r6,r2
 4008258:	29400104 	addi	r5,r5,4
 400825c:	30c0052e 	bgeu	r6,r3,4008274 <__copybits+0x44>
 4008260:	30800017 	ldw	r2,0(r6)
 4008264:	31800104 	addi	r6,r6,4
 4008268:	20800015 	stw	r2,0(r4)
 400826c:	21000104 	addi	r4,r4,4
 4008270:	30fffb36 	bltu	r6,r3,4008260 <__copybits+0x30>
 4008274:	2140032e 	bgeu	r4,r5,4008284 <__copybits+0x54>
 4008278:	20000015 	stw	zero,0(r4)
 400827c:	21000104 	addi	r4,r4,4
 4008280:	217ffd36 	bltu	r4,r5,4008278 <__copybits+0x48>
 4008284:	f800283a 	ret

04008288 <__any_on>:
 4008288:	20800417 	ldw	r2,16(r4)
 400828c:	2807d17a 	srai	r3,r5,5
 4008290:	21000504 	addi	r4,r4,20
 4008294:	10c00d0e 	bge	r2,r3,40082cc <__any_on+0x44>
 4008298:	1085883a 	add	r2,r2,r2
 400829c:	1085883a 	add	r2,r2,r2
 40082a0:	208d883a 	add	r6,r4,r2
 40082a4:	2180182e 	bgeu	r4,r6,4008308 <__any_on+0x80>
 40082a8:	30bfff17 	ldw	r2,-4(r6)
 40082ac:	30ffff04 	addi	r3,r6,-4
 40082b0:	1000041e 	bne	r2,zero,40082c4 <__any_on+0x3c>
 40082b4:	20c0142e 	bgeu	r4,r3,4008308 <__any_on+0x80>
 40082b8:	18ffff04 	addi	r3,r3,-4
 40082bc:	18800017 	ldw	r2,0(r3)
 40082c0:	103ffc26 	beq	r2,zero,40082b4 <__any_on+0x2c>
 40082c4:	00800044 	movi	r2,1
 40082c8:	f800283a 	ret
 40082cc:	18800a0e 	bge	r3,r2,40082f8 <__any_on+0x70>
 40082d0:	294007cc 	andi	r5,r5,31
 40082d4:	28000826 	beq	r5,zero,40082f8 <__any_on+0x70>
 40082d8:	18c5883a 	add	r2,r3,r3
 40082dc:	1085883a 	add	r2,r2,r2
 40082e0:	208d883a 	add	r6,r4,r2
 40082e4:	30c00017 	ldw	r3,0(r6)
 40082e8:	1944d83a 	srl	r2,r3,r5
 40082ec:	1144983a 	sll	r2,r2,r5
 40082f0:	18bff41e 	bne	r3,r2,40082c4 <__any_on+0x3c>
 40082f4:	003feb06 	br	40082a4 <__any_on+0x1c>
 40082f8:	18c5883a 	add	r2,r3,r3
 40082fc:	1085883a 	add	r2,r2,r2
 4008300:	208d883a 	add	r6,r4,r2
 4008304:	003fe706 	br	40082a4 <__any_on+0x1c>
 4008308:	0005883a 	mov	r2,zero
 400830c:	f800283a 	ret

04008310 <_Balloc>:
 4008310:	20c01317 	ldw	r3,76(r4)
 4008314:	defffb04 	addi	sp,sp,-20
 4008318:	dcc00315 	stw	r19,12(sp)
 400831c:	dc800215 	stw	r18,8(sp)
 4008320:	dfc00415 	stw	ra,16(sp)
 4008324:	2825883a 	mov	r18,r5
 4008328:	dc400115 	stw	r17,4(sp)
 400832c:	dc000015 	stw	r16,0(sp)
 4008330:	2027883a 	mov	r19,r4
 4008334:	01800404 	movi	r6,16
 4008338:	01400104 	movi	r5,4
 400833c:	18001726 	beq	r3,zero,400839c <_Balloc+0x8c>
 4008340:	01400044 	movi	r5,1
 4008344:	9485883a 	add	r2,r18,r18
 4008348:	2ca2983a 	sll	r17,r5,r18
 400834c:	1085883a 	add	r2,r2,r2
 4008350:	10c7883a 	add	r3,r2,r3
 4008354:	1c000017 	ldw	r16,0(r3)
 4008358:	8c4d883a 	add	r6,r17,r17
 400835c:	318d883a 	add	r6,r6,r6
 4008360:	9809883a 	mov	r4,r19
 4008364:	31800504 	addi	r6,r6,20
 4008368:	80001226 	beq	r16,zero,40083b4 <_Balloc+0xa4>
 400836c:	80800017 	ldw	r2,0(r16)
 4008370:	18800015 	stw	r2,0(r3)
 4008374:	80000415 	stw	zero,16(r16)
 4008378:	80000315 	stw	zero,12(r16)
 400837c:	8005883a 	mov	r2,r16
 4008380:	dfc00417 	ldw	ra,16(sp)
 4008384:	dcc00317 	ldw	r19,12(sp)
 4008388:	dc800217 	ldw	r18,8(sp)
 400838c:	dc400117 	ldw	r17,4(sp)
 4008390:	dc000017 	ldw	r16,0(sp)
 4008394:	dec00504 	addi	sp,sp,20
 4008398:	f800283a 	ret
 400839c:	4009a100 	call	4009a10 <_calloc_r>
 40083a0:	1007883a 	mov	r3,r2
 40083a4:	0021883a 	mov	r16,zero
 40083a8:	98801315 	stw	r2,76(r19)
 40083ac:	103fe41e 	bne	r2,zero,4008340 <_Balloc+0x30>
 40083b0:	003ff206 	br	400837c <_Balloc+0x6c>
 40083b4:	4009a100 	call	4009a10 <_calloc_r>
 40083b8:	103ff026 	beq	r2,zero,400837c <_Balloc+0x6c>
 40083bc:	1021883a 	mov	r16,r2
 40083c0:	14800115 	stw	r18,4(r2)
 40083c4:	14400215 	stw	r17,8(r2)
 40083c8:	003fea06 	br	4008374 <_Balloc+0x64>

040083cc <__d2b>:
 40083cc:	defff504 	addi	sp,sp,-44
 40083d0:	dcc00515 	stw	r19,20(sp)
 40083d4:	04c00044 	movi	r19,1
 40083d8:	dc000215 	stw	r16,8(sp)
 40083dc:	2821883a 	mov	r16,r5
 40083e0:	980b883a 	mov	r5,r19
 40083e4:	ddc00915 	stw	r23,36(sp)
 40083e8:	dd800815 	stw	r22,32(sp)
 40083ec:	dd400715 	stw	r21,28(sp)
 40083f0:	dd000615 	stw	r20,24(sp)
 40083f4:	dc800415 	stw	r18,16(sp)
 40083f8:	dc400315 	stw	r17,12(sp)
 40083fc:	dfc00a15 	stw	ra,40(sp)
 4008400:	3023883a 	mov	r17,r6
 4008404:	382d883a 	mov	r22,r7
 4008408:	ddc00b17 	ldw	r23,44(sp)
 400840c:	40083100 	call	4008310 <_Balloc>
 4008410:	1025883a 	mov	r18,r2
 4008414:	00a00034 	movhi	r2,32768
 4008418:	10bfffc4 	addi	r2,r2,-1
 400841c:	8888703a 	and	r4,r17,r2
 4008420:	202ad53a 	srli	r21,r4,20
 4008424:	00800434 	movhi	r2,16
 4008428:	10bfffc4 	addi	r2,r2,-1
 400842c:	8886703a 	and	r3,r17,r2
 4008430:	a829003a 	cmpeq	r20,r21,zero
 4008434:	800b883a 	mov	r5,r16
 4008438:	d8c00115 	stw	r3,4(sp)
 400843c:	94000504 	addi	r16,r18,20
 4008440:	a000021e 	bne	r20,zero,400844c <__d2b+0x80>
 4008444:	18c00434 	orhi	r3,r3,16
 4008448:	d8c00115 	stw	r3,4(sp)
 400844c:	28002726 	beq	r5,zero,40084ec <__d2b+0x120>
 4008450:	d809883a 	mov	r4,sp
 4008454:	d9400015 	stw	r5,0(sp)
 4008458:	4007e280 	call	4007e28 <__lo0bits>
 400845c:	100d883a 	mov	r6,r2
 4008460:	10003526 	beq	r2,zero,4008538 <__d2b+0x16c>
 4008464:	d8c00117 	ldw	r3,4(sp)
 4008468:	00800804 	movi	r2,32
 400846c:	1185c83a 	sub	r2,r2,r6
 4008470:	d9000017 	ldw	r4,0(sp)
 4008474:	1886983a 	sll	r3,r3,r2
 4008478:	1906b03a 	or	r3,r3,r4
 400847c:	90c00515 	stw	r3,20(r18)
 4008480:	d8c00117 	ldw	r3,4(sp)
 4008484:	1986d83a 	srl	r3,r3,r6
 4008488:	d8c00115 	stw	r3,4(sp)
 400848c:	180b003a 	cmpeq	r5,r3,zero
 4008490:	00800084 	movi	r2,2
 4008494:	114bc83a 	sub	r5,r2,r5
 4008498:	80c00115 	stw	r3,4(r16)
 400849c:	91400415 	stw	r5,16(r18)
 40084a0:	a0001a1e 	bne	r20,zero,400850c <__d2b+0x140>
 40084a4:	3545883a 	add	r2,r6,r21
 40084a8:	10bef344 	addi	r2,r2,-1075
 40084ac:	00c00d44 	movi	r3,53
 40084b0:	b0800015 	stw	r2,0(r22)
 40084b4:	1987c83a 	sub	r3,r3,r6
 40084b8:	b8c00015 	stw	r3,0(r23)
 40084bc:	9005883a 	mov	r2,r18
 40084c0:	dfc00a17 	ldw	ra,40(sp)
 40084c4:	ddc00917 	ldw	r23,36(sp)
 40084c8:	dd800817 	ldw	r22,32(sp)
 40084cc:	dd400717 	ldw	r21,28(sp)
 40084d0:	dd000617 	ldw	r20,24(sp)
 40084d4:	dcc00517 	ldw	r19,20(sp)
 40084d8:	dc800417 	ldw	r18,16(sp)
 40084dc:	dc400317 	ldw	r17,12(sp)
 40084e0:	dc000217 	ldw	r16,8(sp)
 40084e4:	dec00b04 	addi	sp,sp,44
 40084e8:	f800283a 	ret
 40084ec:	d9000104 	addi	r4,sp,4
 40084f0:	4007e280 	call	4007e28 <__lo0bits>
 40084f4:	11800804 	addi	r6,r2,32
 40084f8:	d8800117 	ldw	r2,4(sp)
 40084fc:	94c00415 	stw	r19,16(r18)
 4008500:	980b883a 	mov	r5,r19
 4008504:	90800515 	stw	r2,20(r18)
 4008508:	a03fe626 	beq	r20,zero,40084a4 <__d2b+0xd8>
 400850c:	2945883a 	add	r2,r5,r5
 4008510:	1085883a 	add	r2,r2,r2
 4008514:	1405883a 	add	r2,r2,r16
 4008518:	113fff17 	ldw	r4,-4(r2)
 400851c:	30fef384 	addi	r3,r6,-1074
 4008520:	2820917a 	slli	r16,r5,5
 4008524:	b0c00015 	stw	r3,0(r22)
 4008528:	4007db80 	call	4007db8 <__hi0bits>
 400852c:	80a1c83a 	sub	r16,r16,r2
 4008530:	bc000015 	stw	r16,0(r23)
 4008534:	003fe106 	br	40084bc <__d2b+0xf0>
 4008538:	d8800017 	ldw	r2,0(sp)
 400853c:	90800515 	stw	r2,20(r18)
 4008540:	d8c00117 	ldw	r3,4(sp)
 4008544:	003fd106 	br	400848c <__d2b+0xc0>

04008548 <__mdiff>:
 4008548:	defffb04 	addi	sp,sp,-20
 400854c:	dc000015 	stw	r16,0(sp)
 4008550:	2821883a 	mov	r16,r5
 4008554:	dc800215 	stw	r18,8(sp)
 4008558:	300b883a 	mov	r5,r6
 400855c:	2025883a 	mov	r18,r4
 4008560:	8009883a 	mov	r4,r16
 4008564:	dc400115 	stw	r17,4(sp)
 4008568:	dfc00415 	stw	ra,16(sp)
 400856c:	dcc00315 	stw	r19,12(sp)
 4008570:	3023883a 	mov	r17,r6
 4008574:	4007eec0 	call	4007eec <__mcmp>
 4008578:	10004226 	beq	r2,zero,4008684 <__mdiff+0x13c>
 400857c:	10005016 	blt	r2,zero,40086c0 <__mdiff+0x178>
 4008580:	0027883a 	mov	r19,zero
 4008584:	81400117 	ldw	r5,4(r16)
 4008588:	9009883a 	mov	r4,r18
 400858c:	40083100 	call	4008310 <_Balloc>
 4008590:	1019883a 	mov	r12,r2
 4008594:	82800417 	ldw	r10,16(r16)
 4008598:	88800417 	ldw	r2,16(r17)
 400859c:	81800504 	addi	r6,r16,20
 40085a0:	5287883a 	add	r3,r10,r10
 40085a4:	1085883a 	add	r2,r2,r2
 40085a8:	18c7883a 	add	r3,r3,r3
 40085ac:	1085883a 	add	r2,r2,r2
 40085b0:	8a000504 	addi	r8,r17,20
 40085b4:	64c00315 	stw	r19,12(r12)
 40085b8:	30db883a 	add	r13,r6,r3
 40085bc:	4097883a 	add	r11,r8,r2
 40085c0:	61c00504 	addi	r7,r12,20
 40085c4:	0013883a 	mov	r9,zero
 40085c8:	31000017 	ldw	r4,0(r6)
 40085cc:	41400017 	ldw	r5,0(r8)
 40085d0:	42000104 	addi	r8,r8,4
 40085d4:	20bfffcc 	andi	r2,r4,65535
 40085d8:	28ffffcc 	andi	r3,r5,65535
 40085dc:	10c5c83a 	sub	r2,r2,r3
 40085e0:	1245883a 	add	r2,r2,r9
 40085e4:	2008d43a 	srli	r4,r4,16
 40085e8:	280ad43a 	srli	r5,r5,16
 40085ec:	1007d43a 	srai	r3,r2,16
 40085f0:	3880000d 	sth	r2,0(r7)
 40085f4:	2149c83a 	sub	r4,r4,r5
 40085f8:	20c9883a 	add	r4,r4,r3
 40085fc:	3900008d 	sth	r4,2(r7)
 4008600:	31800104 	addi	r6,r6,4
 4008604:	39c00104 	addi	r7,r7,4
 4008608:	2013d43a 	srai	r9,r4,16
 400860c:	42ffee36 	bltu	r8,r11,40085c8 <__mdiff+0x80>
 4008610:	33400c2e 	bgeu	r6,r13,4008644 <__mdiff+0xfc>
 4008614:	30800017 	ldw	r2,0(r6)
 4008618:	31800104 	addi	r6,r6,4
 400861c:	10ffffcc 	andi	r3,r2,65535
 4008620:	1a47883a 	add	r3,r3,r9
 4008624:	1004d43a 	srli	r2,r2,16
 4008628:	1809d43a 	srai	r4,r3,16
 400862c:	38c0000d 	sth	r3,0(r7)
 4008630:	1105883a 	add	r2,r2,r4
 4008634:	3880008d 	sth	r2,2(r7)
 4008638:	1013d43a 	srai	r9,r2,16
 400863c:	39c00104 	addi	r7,r7,4
 4008640:	337ff436 	bltu	r6,r13,4008614 <__mdiff+0xcc>
 4008644:	38bfff17 	ldw	r2,-4(r7)
 4008648:	38ffff04 	addi	r3,r7,-4
 400864c:	1000041e 	bne	r2,zero,4008660 <__mdiff+0x118>
 4008650:	18ffff04 	addi	r3,r3,-4
 4008654:	18800017 	ldw	r2,0(r3)
 4008658:	52bfffc4 	addi	r10,r10,-1
 400865c:	103ffc26 	beq	r2,zero,4008650 <__mdiff+0x108>
 4008660:	6005883a 	mov	r2,r12
 4008664:	62800415 	stw	r10,16(r12)
 4008668:	dfc00417 	ldw	ra,16(sp)
 400866c:	dcc00317 	ldw	r19,12(sp)
 4008670:	dc800217 	ldw	r18,8(sp)
 4008674:	dc400117 	ldw	r17,4(sp)
 4008678:	dc000017 	ldw	r16,0(sp)
 400867c:	dec00504 	addi	sp,sp,20
 4008680:	f800283a 	ret
 4008684:	9009883a 	mov	r4,r18
 4008688:	000b883a 	mov	r5,zero
 400868c:	40083100 	call	4008310 <_Balloc>
 4008690:	1019883a 	mov	r12,r2
 4008694:	00800044 	movi	r2,1
 4008698:	60800415 	stw	r2,16(r12)
 400869c:	6005883a 	mov	r2,r12
 40086a0:	60000515 	stw	zero,20(r12)
 40086a4:	dfc00417 	ldw	ra,16(sp)
 40086a8:	dcc00317 	ldw	r19,12(sp)
 40086ac:	dc800217 	ldw	r18,8(sp)
 40086b0:	dc400117 	ldw	r17,4(sp)
 40086b4:	dc000017 	ldw	r16,0(sp)
 40086b8:	dec00504 	addi	sp,sp,20
 40086bc:	f800283a 	ret
 40086c0:	880d883a 	mov	r6,r17
 40086c4:	04c00044 	movi	r19,1
 40086c8:	8023883a 	mov	r17,r16
 40086cc:	3021883a 	mov	r16,r6
 40086d0:	003fac06 	br	4008584 <__mdiff+0x3c>

040086d4 <__lshift>:
 40086d4:	defff904 	addi	sp,sp,-28
 40086d8:	28800417 	ldw	r2,16(r5)
 40086dc:	dc000015 	stw	r16,0(sp)
 40086e0:	3021d17a 	srai	r16,r6,5
 40086e4:	28c00217 	ldw	r3,8(r5)
 40086e8:	10800044 	addi	r2,r2,1
 40086ec:	dc400115 	stw	r17,4(sp)
 40086f0:	80a3883a 	add	r17,r16,r2
 40086f4:	dd400515 	stw	r21,20(sp)
 40086f8:	dd000415 	stw	r20,16(sp)
 40086fc:	dc800215 	stw	r18,8(sp)
 4008700:	dfc00615 	stw	ra,24(sp)
 4008704:	2825883a 	mov	r18,r5
 4008708:	dcc00315 	stw	r19,12(sp)
 400870c:	3029883a 	mov	r20,r6
 4008710:	202b883a 	mov	r21,r4
 4008714:	29400117 	ldw	r5,4(r5)
 4008718:	1c40030e 	bge	r3,r17,4008728 <__lshift+0x54>
 400871c:	18c7883a 	add	r3,r3,r3
 4008720:	29400044 	addi	r5,r5,1
 4008724:	1c7ffd16 	blt	r3,r17,400871c <__lshift+0x48>
 4008728:	a809883a 	mov	r4,r21
 400872c:	40083100 	call	4008310 <_Balloc>
 4008730:	1027883a 	mov	r19,r2
 4008734:	11400504 	addi	r5,r2,20
 4008738:	0400090e 	bge	zero,r16,4008760 <__lshift+0x8c>
 400873c:	2805883a 	mov	r2,r5
 4008740:	0007883a 	mov	r3,zero
 4008744:	18c00044 	addi	r3,r3,1
 4008748:	10000015 	stw	zero,0(r2)
 400874c:	10800104 	addi	r2,r2,4
 4008750:	80fffc1e 	bne	r16,r3,4008744 <__lshift+0x70>
 4008754:	8405883a 	add	r2,r16,r16
 4008758:	1085883a 	add	r2,r2,r2
 400875c:	288b883a 	add	r5,r5,r2
 4008760:	90800417 	ldw	r2,16(r18)
 4008764:	91000504 	addi	r4,r18,20
 4008768:	a18007cc 	andi	r6,r20,31
 400876c:	1085883a 	add	r2,r2,r2
 4008770:	1085883a 	add	r2,r2,r2
 4008774:	208f883a 	add	r7,r4,r2
 4008778:	30001e26 	beq	r6,zero,40087f4 <__lshift+0x120>
 400877c:	00800804 	movi	r2,32
 4008780:	1191c83a 	sub	r8,r2,r6
 4008784:	0007883a 	mov	r3,zero
 4008788:	20800017 	ldw	r2,0(r4)
 400878c:	1184983a 	sll	r2,r2,r6
 4008790:	1884b03a 	or	r2,r3,r2
 4008794:	28800015 	stw	r2,0(r5)
 4008798:	20c00017 	ldw	r3,0(r4)
 400879c:	21000104 	addi	r4,r4,4
 40087a0:	29400104 	addi	r5,r5,4
 40087a4:	1a06d83a 	srl	r3,r3,r8
 40087a8:	21fff736 	bltu	r4,r7,4008788 <__lshift+0xb4>
 40087ac:	28c00015 	stw	r3,0(r5)
 40087b0:	18000126 	beq	r3,zero,40087b8 <__lshift+0xe4>
 40087b4:	8c400044 	addi	r17,r17,1
 40087b8:	88bfffc4 	addi	r2,r17,-1
 40087bc:	98800415 	stw	r2,16(r19)
 40087c0:	a809883a 	mov	r4,r21
 40087c4:	900b883a 	mov	r5,r18
 40087c8:	4007d900 	call	4007d90 <_Bfree>
 40087cc:	9805883a 	mov	r2,r19
 40087d0:	dfc00617 	ldw	ra,24(sp)
 40087d4:	dd400517 	ldw	r21,20(sp)
 40087d8:	dd000417 	ldw	r20,16(sp)
 40087dc:	dcc00317 	ldw	r19,12(sp)
 40087e0:	dc800217 	ldw	r18,8(sp)
 40087e4:	dc400117 	ldw	r17,4(sp)
 40087e8:	dc000017 	ldw	r16,0(sp)
 40087ec:	dec00704 	addi	sp,sp,28
 40087f0:	f800283a 	ret
 40087f4:	20800017 	ldw	r2,0(r4)
 40087f8:	21000104 	addi	r4,r4,4
 40087fc:	28800015 	stw	r2,0(r5)
 4008800:	29400104 	addi	r5,r5,4
 4008804:	21ffec2e 	bgeu	r4,r7,40087b8 <__lshift+0xe4>
 4008808:	20800017 	ldw	r2,0(r4)
 400880c:	21000104 	addi	r4,r4,4
 4008810:	28800015 	stw	r2,0(r5)
 4008814:	29400104 	addi	r5,r5,4
 4008818:	21fff636 	bltu	r4,r7,40087f4 <__lshift+0x120>
 400881c:	003fe606 	br	40087b8 <__lshift+0xe4>

04008820 <__multiply>:
 4008820:	defff904 	addi	sp,sp,-28
 4008824:	dcc00315 	stw	r19,12(sp)
 4008828:	dc800215 	stw	r18,8(sp)
 400882c:	2cc00417 	ldw	r19,16(r5)
 4008830:	34800417 	ldw	r18,16(r6)
 4008834:	dd000415 	stw	r20,16(sp)
 4008838:	dc400115 	stw	r17,4(sp)
 400883c:	dfc00615 	stw	ra,24(sp)
 4008840:	dd400515 	stw	r21,20(sp)
 4008844:	dc000015 	stw	r16,0(sp)
 4008848:	2823883a 	mov	r17,r5
 400884c:	3029883a 	mov	r20,r6
 4008850:	9c80040e 	bge	r19,r18,4008864 <__multiply+0x44>
 4008854:	9027883a 	mov	r19,r18
 4008858:	2c800417 	ldw	r18,16(r5)
 400885c:	2829883a 	mov	r20,r5
 4008860:	3023883a 	mov	r17,r6
 4008864:	88800217 	ldw	r2,8(r17)
 4008868:	9ca1883a 	add	r16,r19,r18
 400886c:	89400117 	ldw	r5,4(r17)
 4008870:	1400010e 	bge	r2,r16,4008878 <__multiply+0x58>
 4008874:	29400044 	addi	r5,r5,1
 4008878:	40083100 	call	4008310 <_Balloc>
 400887c:	102b883a 	mov	r21,r2
 4008880:	8405883a 	add	r2,r16,r16
 4008884:	1085883a 	add	r2,r2,r2
 4008888:	a9000504 	addi	r4,r21,20
 400888c:	209d883a 	add	r14,r4,r2
 4008890:	2380042e 	bgeu	r4,r14,40088a4 <__multiply+0x84>
 4008894:	2005883a 	mov	r2,r4
 4008898:	10000015 	stw	zero,0(r2)
 400889c:	10800104 	addi	r2,r2,4
 40088a0:	13bffd36 	bltu	r2,r14,4008898 <__multiply+0x78>
 40088a4:	9485883a 	add	r2,r18,r18
 40088a8:	9cc7883a 	add	r3,r19,r19
 40088ac:	a1800504 	addi	r6,r20,20
 40088b0:	1085883a 	add	r2,r2,r2
 40088b4:	8b400504 	addi	r13,r17,20
 40088b8:	18c7883a 	add	r3,r3,r3
 40088bc:	309f883a 	add	r15,r6,r2
 40088c0:	68d7883a 	add	r11,r13,r3
 40088c4:	33c03b2e 	bgeu	r6,r15,40089b4 <__multiply+0x194>
 40088c8:	2019883a 	mov	r12,r4
 40088cc:	30800017 	ldw	r2,0(r6)
 40088d0:	127fffcc 	andi	r9,r2,65535
 40088d4:	48001826 	beq	r9,zero,4008938 <__multiply+0x118>
 40088d8:	6811883a 	mov	r8,r13
 40088dc:	600f883a 	mov	r7,r12
 40088e0:	0015883a 	mov	r10,zero
 40088e4:	40c00017 	ldw	r3,0(r8)
 40088e8:	39400017 	ldw	r5,0(r7)
 40088ec:	42000104 	addi	r8,r8,4
 40088f0:	193fffcc 	andi	r4,r3,65535
 40088f4:	4909383a 	mul	r4,r9,r4
 40088f8:	1806d43a 	srli	r3,r3,16
 40088fc:	28bfffcc 	andi	r2,r5,65535
 4008900:	5085883a 	add	r2,r10,r2
 4008904:	2089883a 	add	r4,r4,r2
 4008908:	48c7383a 	mul	r3,r9,r3
 400890c:	280ad43a 	srli	r5,r5,16
 4008910:	2004d43a 	srli	r2,r4,16
 4008914:	3900000d 	sth	r4,0(r7)
 4008918:	1947883a 	add	r3,r3,r5
 400891c:	10c5883a 	add	r2,r2,r3
 4008920:	3880008d 	sth	r2,2(r7)
 4008924:	1014d43a 	srli	r10,r2,16
 4008928:	39c00104 	addi	r7,r7,4
 400892c:	42ffed36 	bltu	r8,r11,40088e4 <__multiply+0xc4>
 4008930:	3a800015 	stw	r10,0(r7)
 4008934:	30800017 	ldw	r2,0(r6)
 4008938:	1012d43a 	srli	r9,r2,16
 400893c:	48001926 	beq	r9,zero,40089a4 <__multiply+0x184>
 4008940:	60800017 	ldw	r2,0(r12)
 4008944:	6811883a 	mov	r8,r13
 4008948:	600f883a 	mov	r7,r12
 400894c:	0015883a 	mov	r10,zero
 4008950:	100b883a 	mov	r5,r2
 4008954:	41000017 	ldw	r4,0(r8)
 4008958:	2806d43a 	srli	r3,r5,16
 400895c:	3880000d 	sth	r2,0(r7)
 4008960:	20bfffcc 	andi	r2,r4,65535
 4008964:	4885383a 	mul	r2,r9,r2
 4008968:	50c7883a 	add	r3,r10,r3
 400896c:	2008d43a 	srli	r4,r4,16
 4008970:	10c5883a 	add	r2,r2,r3
 4008974:	3880008d 	sth	r2,2(r7)
 4008978:	39c00104 	addi	r7,r7,4
 400897c:	39400017 	ldw	r5,0(r7)
 4008980:	4909383a 	mul	r4,r9,r4
 4008984:	1004d43a 	srli	r2,r2,16
 4008988:	28ffffcc 	andi	r3,r5,65535
 400898c:	20c9883a 	add	r4,r4,r3
 4008990:	1105883a 	add	r2,r2,r4
 4008994:	42000104 	addi	r8,r8,4
 4008998:	1014d43a 	srli	r10,r2,16
 400899c:	42ffed36 	bltu	r8,r11,4008954 <__multiply+0x134>
 40089a0:	38800015 	stw	r2,0(r7)
 40089a4:	31800104 	addi	r6,r6,4
 40089a8:	33c0022e 	bgeu	r6,r15,40089b4 <__multiply+0x194>
 40089ac:	63000104 	addi	r12,r12,4
 40089b0:	003fc606 	br	40088cc <__multiply+0xac>
 40089b4:	0400090e 	bge	zero,r16,40089dc <__multiply+0x1bc>
 40089b8:	70bfff17 	ldw	r2,-4(r14)
 40089bc:	70ffff04 	addi	r3,r14,-4
 40089c0:	10000326 	beq	r2,zero,40089d0 <__multiply+0x1b0>
 40089c4:	00000506 	br	40089dc <__multiply+0x1bc>
 40089c8:	18800017 	ldw	r2,0(r3)
 40089cc:	1000031e 	bne	r2,zero,40089dc <__multiply+0x1bc>
 40089d0:	843fffc4 	addi	r16,r16,-1
 40089d4:	18ffff04 	addi	r3,r3,-4
 40089d8:	803ffb1e 	bne	r16,zero,40089c8 <__multiply+0x1a8>
 40089dc:	a805883a 	mov	r2,r21
 40089e0:	ac000415 	stw	r16,16(r21)
 40089e4:	dfc00617 	ldw	ra,24(sp)
 40089e8:	dd400517 	ldw	r21,20(sp)
 40089ec:	dd000417 	ldw	r20,16(sp)
 40089f0:	dcc00317 	ldw	r19,12(sp)
 40089f4:	dc800217 	ldw	r18,8(sp)
 40089f8:	dc400117 	ldw	r17,4(sp)
 40089fc:	dc000017 	ldw	r16,0(sp)
 4008a00:	dec00704 	addi	sp,sp,28
 4008a04:	f800283a 	ret

04008a08 <__i2b>:
 4008a08:	defffd04 	addi	sp,sp,-12
 4008a0c:	dc000015 	stw	r16,0(sp)
 4008a10:	04000044 	movi	r16,1
 4008a14:	dc800115 	stw	r18,4(sp)
 4008a18:	2825883a 	mov	r18,r5
 4008a1c:	800b883a 	mov	r5,r16
 4008a20:	dfc00215 	stw	ra,8(sp)
 4008a24:	40083100 	call	4008310 <_Balloc>
 4008a28:	14000415 	stw	r16,16(r2)
 4008a2c:	14800515 	stw	r18,20(r2)
 4008a30:	dfc00217 	ldw	ra,8(sp)
 4008a34:	dc800117 	ldw	r18,4(sp)
 4008a38:	dc000017 	ldw	r16,0(sp)
 4008a3c:	dec00304 	addi	sp,sp,12
 4008a40:	f800283a 	ret

04008a44 <__multadd>:
 4008a44:	defffa04 	addi	sp,sp,-24
 4008a48:	dc800215 	stw	r18,8(sp)
 4008a4c:	2c800417 	ldw	r18,16(r5)
 4008a50:	dd000415 	stw	r20,16(sp)
 4008a54:	dcc00315 	stw	r19,12(sp)
 4008a58:	dc000015 	stw	r16,0(sp)
 4008a5c:	dfc00515 	stw	ra,20(sp)
 4008a60:	3821883a 	mov	r16,r7
 4008a64:	dc400115 	stw	r17,4(sp)
 4008a68:	2827883a 	mov	r19,r5
 4008a6c:	2029883a 	mov	r20,r4
 4008a70:	2a000504 	addi	r8,r5,20
 4008a74:	000f883a 	mov	r7,zero
 4008a78:	40800017 	ldw	r2,0(r8)
 4008a7c:	39c00044 	addi	r7,r7,1
 4008a80:	10ffffcc 	andi	r3,r2,65535
 4008a84:	1987383a 	mul	r3,r3,r6
 4008a88:	1004d43a 	srli	r2,r2,16
 4008a8c:	1c07883a 	add	r3,r3,r16
 4008a90:	180ad43a 	srli	r5,r3,16
 4008a94:	1185383a 	mul	r2,r2,r6
 4008a98:	18ffffcc 	andi	r3,r3,65535
 4008a9c:	1145883a 	add	r2,r2,r5
 4008aa0:	1008943a 	slli	r4,r2,16
 4008aa4:	1020d43a 	srli	r16,r2,16
 4008aa8:	20c9883a 	add	r4,r4,r3
 4008aac:	41000015 	stw	r4,0(r8)
 4008ab0:	42000104 	addi	r8,r8,4
 4008ab4:	3cbff016 	blt	r7,r18,4008a78 <__multadd+0x34>
 4008ab8:	80000826 	beq	r16,zero,4008adc <__multadd+0x98>
 4008abc:	98800217 	ldw	r2,8(r19)
 4008ac0:	90800f0e 	bge	r18,r2,4008b00 <__multadd+0xbc>
 4008ac4:	9485883a 	add	r2,r18,r18
 4008ac8:	1085883a 	add	r2,r2,r2
 4008acc:	14c5883a 	add	r2,r2,r19
 4008ad0:	90c00044 	addi	r3,r18,1
 4008ad4:	14000515 	stw	r16,20(r2)
 4008ad8:	98c00415 	stw	r3,16(r19)
 4008adc:	9805883a 	mov	r2,r19
 4008ae0:	dfc00517 	ldw	ra,20(sp)
 4008ae4:	dd000417 	ldw	r20,16(sp)
 4008ae8:	dcc00317 	ldw	r19,12(sp)
 4008aec:	dc800217 	ldw	r18,8(sp)
 4008af0:	dc400117 	ldw	r17,4(sp)
 4008af4:	dc000017 	ldw	r16,0(sp)
 4008af8:	dec00604 	addi	sp,sp,24
 4008afc:	f800283a 	ret
 4008b00:	99400117 	ldw	r5,4(r19)
 4008b04:	a009883a 	mov	r4,r20
 4008b08:	29400044 	addi	r5,r5,1
 4008b0c:	40083100 	call	4008310 <_Balloc>
 4008b10:	99800417 	ldw	r6,16(r19)
 4008b14:	99400304 	addi	r5,r19,12
 4008b18:	11000304 	addi	r4,r2,12
 4008b1c:	318d883a 	add	r6,r6,r6
 4008b20:	318d883a 	add	r6,r6,r6
 4008b24:	31800204 	addi	r6,r6,8
 4008b28:	1023883a 	mov	r17,r2
 4008b2c:	4001de40 	call	4001de4 <memcpy>
 4008b30:	980b883a 	mov	r5,r19
 4008b34:	a009883a 	mov	r4,r20
 4008b38:	4007d900 	call	4007d90 <_Bfree>
 4008b3c:	8827883a 	mov	r19,r17
 4008b40:	003fe006 	br	4008ac4 <__multadd+0x80>

04008b44 <__pow5mult>:
 4008b44:	defffa04 	addi	sp,sp,-24
 4008b48:	308000cc 	andi	r2,r6,3
 4008b4c:	dd000415 	stw	r20,16(sp)
 4008b50:	dcc00315 	stw	r19,12(sp)
 4008b54:	dc000015 	stw	r16,0(sp)
 4008b58:	dfc00515 	stw	ra,20(sp)
 4008b5c:	dc800215 	stw	r18,8(sp)
 4008b60:	dc400115 	stw	r17,4(sp)
 4008b64:	3021883a 	mov	r16,r6
 4008b68:	2027883a 	mov	r19,r4
 4008b6c:	2829883a 	mov	r20,r5
 4008b70:	10002b1e 	bne	r2,zero,4008c20 <__pow5mult+0xdc>
 4008b74:	8025d0ba 	srai	r18,r16,2
 4008b78:	90001b26 	beq	r18,zero,4008be8 <__pow5mult+0xa4>
 4008b7c:	9c001217 	ldw	r16,72(r19)
 4008b80:	8000081e 	bne	r16,zero,4008ba4 <__pow5mult+0x60>
 4008b84:	00003006 	br	4008c48 <__pow5mult+0x104>
 4008b88:	800b883a 	mov	r5,r16
 4008b8c:	800d883a 	mov	r6,r16
 4008b90:	9809883a 	mov	r4,r19
 4008b94:	90001426 	beq	r18,zero,4008be8 <__pow5mult+0xa4>
 4008b98:	80800017 	ldw	r2,0(r16)
 4008b9c:	10001b26 	beq	r2,zero,4008c0c <__pow5mult+0xc8>
 4008ba0:	1021883a 	mov	r16,r2
 4008ba4:	9080004c 	andi	r2,r18,1
 4008ba8:	1005003a 	cmpeq	r2,r2,zero
 4008bac:	9025d07a 	srai	r18,r18,1
 4008bb0:	800d883a 	mov	r6,r16
 4008bb4:	9809883a 	mov	r4,r19
 4008bb8:	a00b883a 	mov	r5,r20
 4008bbc:	103ff21e 	bne	r2,zero,4008b88 <__pow5mult+0x44>
 4008bc0:	40088200 	call	4008820 <__multiply>
 4008bc4:	a00b883a 	mov	r5,r20
 4008bc8:	9809883a 	mov	r4,r19
 4008bcc:	1023883a 	mov	r17,r2
 4008bd0:	4007d900 	call	4007d90 <_Bfree>
 4008bd4:	8829883a 	mov	r20,r17
 4008bd8:	800b883a 	mov	r5,r16
 4008bdc:	800d883a 	mov	r6,r16
 4008be0:	9809883a 	mov	r4,r19
 4008be4:	903fec1e 	bne	r18,zero,4008b98 <__pow5mult+0x54>
 4008be8:	a005883a 	mov	r2,r20
 4008bec:	dfc00517 	ldw	ra,20(sp)
 4008bf0:	dd000417 	ldw	r20,16(sp)
 4008bf4:	dcc00317 	ldw	r19,12(sp)
 4008bf8:	dc800217 	ldw	r18,8(sp)
 4008bfc:	dc400117 	ldw	r17,4(sp)
 4008c00:	dc000017 	ldw	r16,0(sp)
 4008c04:	dec00604 	addi	sp,sp,24
 4008c08:	f800283a 	ret
 4008c0c:	40088200 	call	4008820 <__multiply>
 4008c10:	80800015 	stw	r2,0(r16)
 4008c14:	1021883a 	mov	r16,r2
 4008c18:	10000015 	stw	zero,0(r2)
 4008c1c:	003fe106 	br	4008ba4 <__pow5mult+0x60>
 4008c20:	1085883a 	add	r2,r2,r2
 4008c24:	00c10174 	movhi	r3,1029
 4008c28:	18e1d304 	addi	r3,r3,-30900
 4008c2c:	1085883a 	add	r2,r2,r2
 4008c30:	10c5883a 	add	r2,r2,r3
 4008c34:	11bfff17 	ldw	r6,-4(r2)
 4008c38:	000f883a 	mov	r7,zero
 4008c3c:	4008a440 	call	4008a44 <__multadd>
 4008c40:	1029883a 	mov	r20,r2
 4008c44:	003fcb06 	br	4008b74 <__pow5mult+0x30>
 4008c48:	9809883a 	mov	r4,r19
 4008c4c:	01409c44 	movi	r5,625
 4008c50:	4008a080 	call	4008a08 <__i2b>
 4008c54:	98801215 	stw	r2,72(r19)
 4008c58:	1021883a 	mov	r16,r2
 4008c5c:	10000015 	stw	zero,0(r2)
 4008c60:	003fd006 	br	4008ba4 <__pow5mult+0x60>

04008c64 <__s2b>:
 4008c64:	defff904 	addi	sp,sp,-28
 4008c68:	dcc00315 	stw	r19,12(sp)
 4008c6c:	dc800215 	stw	r18,8(sp)
 4008c70:	2827883a 	mov	r19,r5
 4008c74:	2025883a 	mov	r18,r4
 4008c78:	01400244 	movi	r5,9
 4008c7c:	39000204 	addi	r4,r7,8
 4008c80:	dd000415 	stw	r20,16(sp)
 4008c84:	dc400115 	stw	r17,4(sp)
 4008c88:	dfc00615 	stw	ra,24(sp)
 4008c8c:	dd400515 	stw	r21,20(sp)
 4008c90:	dc000015 	stw	r16,0(sp)
 4008c94:	3829883a 	mov	r20,r7
 4008c98:	3023883a 	mov	r17,r6
 4008c9c:	400bb600 	call	400bb60 <__divsi3>
 4008ca0:	00c00044 	movi	r3,1
 4008ca4:	1880350e 	bge	r3,r2,4008d7c <__s2b+0x118>
 4008ca8:	000b883a 	mov	r5,zero
 4008cac:	18c7883a 	add	r3,r3,r3
 4008cb0:	29400044 	addi	r5,r5,1
 4008cb4:	18bffd16 	blt	r3,r2,4008cac <__s2b+0x48>
 4008cb8:	9009883a 	mov	r4,r18
 4008cbc:	40083100 	call	4008310 <_Balloc>
 4008cc0:	1011883a 	mov	r8,r2
 4008cc4:	d8800717 	ldw	r2,28(sp)
 4008cc8:	00c00044 	movi	r3,1
 4008ccc:	01800244 	movi	r6,9
 4008cd0:	40800515 	stw	r2,20(r8)
 4008cd4:	40c00415 	stw	r3,16(r8)
 4008cd8:	3440260e 	bge	r6,r17,4008d74 <__s2b+0x110>
 4008cdc:	3021883a 	mov	r16,r6
 4008ce0:	99ab883a 	add	r21,r19,r6
 4008ce4:	9c05883a 	add	r2,r19,r16
 4008ce8:	11c00007 	ldb	r7,0(r2)
 4008cec:	400b883a 	mov	r5,r8
 4008cf0:	9009883a 	mov	r4,r18
 4008cf4:	39fff404 	addi	r7,r7,-48
 4008cf8:	01800284 	movi	r6,10
 4008cfc:	4008a440 	call	4008a44 <__multadd>
 4008d00:	84000044 	addi	r16,r16,1
 4008d04:	1011883a 	mov	r8,r2
 4008d08:	8c3ff61e 	bne	r17,r16,4008ce4 <__s2b+0x80>
 4008d0c:	ac45883a 	add	r2,r21,r17
 4008d10:	117ffe04 	addi	r5,r2,-8
 4008d14:	880d883a 	mov	r6,r17
 4008d18:	35000c0e 	bge	r6,r20,4008d4c <__s2b+0xe8>
 4008d1c:	a185c83a 	sub	r2,r20,r6
 4008d20:	2821883a 	mov	r16,r5
 4008d24:	28a3883a 	add	r17,r5,r2
 4008d28:	81c00007 	ldb	r7,0(r16)
 4008d2c:	400b883a 	mov	r5,r8
 4008d30:	9009883a 	mov	r4,r18
 4008d34:	39fff404 	addi	r7,r7,-48
 4008d38:	01800284 	movi	r6,10
 4008d3c:	4008a440 	call	4008a44 <__multadd>
 4008d40:	84000044 	addi	r16,r16,1
 4008d44:	1011883a 	mov	r8,r2
 4008d48:	847ff71e 	bne	r16,r17,4008d28 <__s2b+0xc4>
 4008d4c:	4005883a 	mov	r2,r8
 4008d50:	dfc00617 	ldw	ra,24(sp)
 4008d54:	dd400517 	ldw	r21,20(sp)
 4008d58:	dd000417 	ldw	r20,16(sp)
 4008d5c:	dcc00317 	ldw	r19,12(sp)
 4008d60:	dc800217 	ldw	r18,8(sp)
 4008d64:	dc400117 	ldw	r17,4(sp)
 4008d68:	dc000017 	ldw	r16,0(sp)
 4008d6c:	dec00704 	addi	sp,sp,28
 4008d70:	f800283a 	ret
 4008d74:	99400284 	addi	r5,r19,10
 4008d78:	003fe706 	br	4008d18 <__s2b+0xb4>
 4008d7c:	000b883a 	mov	r5,zero
 4008d80:	003fcd06 	br	4008cb8 <__s2b+0x54>

04008d84 <putc>:
 4008d84:	defffc04 	addi	sp,sp,-16
 4008d88:	dc800215 	stw	r18,8(sp)
 4008d8c:	04810174 	movhi	r18,1029
 4008d90:	94b9bf04 	addi	r18,r18,-6404
 4008d94:	90c00017 	ldw	r3,0(r18)
 4008d98:	dc400115 	stw	r17,4(sp)
 4008d9c:	dc000015 	stw	r16,0(sp)
 4008da0:	dfc00315 	stw	ra,12(sp)
 4008da4:	2023883a 	mov	r17,r4
 4008da8:	2821883a 	mov	r16,r5
 4008dac:	18000226 	beq	r3,zero,4008db8 <putc+0x34>
 4008db0:	18800e17 	ldw	r2,56(r3)
 4008db4:	10001126 	beq	r2,zero,4008dfc <putc+0x78>
 4008db8:	80800217 	ldw	r2,8(r16)
 4008dbc:	10ffffc4 	addi	r3,r2,-1
 4008dc0:	80c00215 	stw	r3,8(r16)
 4008dc4:	18001316 	blt	r3,zero,4008e14 <putc+0x90>
 4008dc8:	80800017 	ldw	r2,0(r16)
 4008dcc:	14400005 	stb	r17,0(r2)
 4008dd0:	80c00017 	ldw	r3,0(r16)
 4008dd4:	18800044 	addi	r2,r3,1
 4008dd8:	18c00003 	ldbu	r3,0(r3)
 4008ddc:	80800015 	stw	r2,0(r16)
 4008de0:	1805883a 	mov	r2,r3
 4008de4:	dfc00317 	ldw	ra,12(sp)
 4008de8:	dc800217 	ldw	r18,8(sp)
 4008dec:	dc400117 	ldw	r17,4(sp)
 4008df0:	dc000017 	ldw	r16,0(sp)
 4008df4:	dec00404 	addi	sp,sp,16
 4008df8:	f800283a 	ret
 4008dfc:	1809883a 	mov	r4,r3
 4008e00:	40065140 	call	4006514 <__sinit>
 4008e04:	80800217 	ldw	r2,8(r16)
 4008e08:	10ffffc4 	addi	r3,r2,-1
 4008e0c:	80c00215 	stw	r3,8(r16)
 4008e10:	183fed0e 	bge	r3,zero,4008dc8 <putc+0x44>
 4008e14:	80800617 	ldw	r2,24(r16)
 4008e18:	18800f16 	blt	r3,r2,4008e58 <putc+0xd4>
 4008e1c:	80800017 	ldw	r2,0(r16)
 4008e20:	14400005 	stb	r17,0(r2)
 4008e24:	81000017 	ldw	r4,0(r16)
 4008e28:	00800284 	movi	r2,10
 4008e2c:	20c00003 	ldbu	r3,0(r4)
 4008e30:	18801226 	beq	r3,r2,4008e7c <putc+0xf8>
 4008e34:	20800044 	addi	r2,r4,1
 4008e38:	80800015 	stw	r2,0(r16)
 4008e3c:	1805883a 	mov	r2,r3
 4008e40:	dfc00317 	ldw	ra,12(sp)
 4008e44:	dc800217 	ldw	r18,8(sp)
 4008e48:	dc400117 	ldw	r17,4(sp)
 4008e4c:	dc000017 	ldw	r16,0(sp)
 4008e50:	dec00404 	addi	sp,sp,16
 4008e54:	f800283a 	ret
 4008e58:	91000017 	ldw	r4,0(r18)
 4008e5c:	880b883a 	mov	r5,r17
 4008e60:	800d883a 	mov	r6,r16
 4008e64:	dfc00317 	ldw	ra,12(sp)
 4008e68:	dc800217 	ldw	r18,8(sp)
 4008e6c:	dc400117 	ldw	r17,4(sp)
 4008e70:	dc000017 	ldw	r16,0(sp)
 4008e74:	dec00404 	addi	sp,sp,16
 4008e78:	400984c1 	jmpi	400984c <__swbuf_r>
 4008e7c:	91000017 	ldw	r4,0(r18)
 4008e80:	180b883a 	mov	r5,r3
 4008e84:	003ff606 	br	4008e60 <putc+0xdc>

04008e88 <_putc_r>:
 4008e88:	defffc04 	addi	sp,sp,-16
 4008e8c:	dc400215 	stw	r17,8(sp)
 4008e90:	dc000115 	stw	r16,4(sp)
 4008e94:	dfc00315 	stw	ra,12(sp)
 4008e98:	2021883a 	mov	r16,r4
 4008e9c:	2823883a 	mov	r17,r5
 4008ea0:	20000226 	beq	r4,zero,4008eac <_putc_r+0x24>
 4008ea4:	20800e17 	ldw	r2,56(r4)
 4008ea8:	10001026 	beq	r2,zero,4008eec <_putc_r+0x64>
 4008eac:	30800217 	ldw	r2,8(r6)
 4008eb0:	10ffffc4 	addi	r3,r2,-1
 4008eb4:	30c00215 	stw	r3,8(r6)
 4008eb8:	18001316 	blt	r3,zero,4008f08 <_putc_r+0x80>
 4008ebc:	30800017 	ldw	r2,0(r6)
 4008ec0:	14400005 	stb	r17,0(r2)
 4008ec4:	30c00017 	ldw	r3,0(r6)
 4008ec8:	18800044 	addi	r2,r3,1
 4008ecc:	18c00003 	ldbu	r3,0(r3)
 4008ed0:	30800015 	stw	r2,0(r6)
 4008ed4:	1805883a 	mov	r2,r3
 4008ed8:	dfc00317 	ldw	ra,12(sp)
 4008edc:	dc400217 	ldw	r17,8(sp)
 4008ee0:	dc000117 	ldw	r16,4(sp)
 4008ee4:	dec00404 	addi	sp,sp,16
 4008ee8:	f800283a 	ret
 4008eec:	d9800015 	stw	r6,0(sp)
 4008ef0:	40065140 	call	4006514 <__sinit>
 4008ef4:	d9800017 	ldw	r6,0(sp)
 4008ef8:	30800217 	ldw	r2,8(r6)
 4008efc:	10ffffc4 	addi	r3,r2,-1
 4008f00:	30c00215 	stw	r3,8(r6)
 4008f04:	183fed0e 	bge	r3,zero,4008ebc <_putc_r+0x34>
 4008f08:	30800617 	ldw	r2,24(r6)
 4008f0c:	18800e16 	blt	r3,r2,4008f48 <_putc_r+0xc0>
 4008f10:	30800017 	ldw	r2,0(r6)
 4008f14:	14400005 	stb	r17,0(r2)
 4008f18:	31000017 	ldw	r4,0(r6)
 4008f1c:	00800284 	movi	r2,10
 4008f20:	20c00003 	ldbu	r3,0(r4)
 4008f24:	18800f26 	beq	r3,r2,4008f64 <_putc_r+0xdc>
 4008f28:	20800044 	addi	r2,r4,1
 4008f2c:	30800015 	stw	r2,0(r6)
 4008f30:	1805883a 	mov	r2,r3
 4008f34:	dfc00317 	ldw	ra,12(sp)
 4008f38:	dc400217 	ldw	r17,8(sp)
 4008f3c:	dc000117 	ldw	r16,4(sp)
 4008f40:	dec00404 	addi	sp,sp,16
 4008f44:	f800283a 	ret
 4008f48:	8009883a 	mov	r4,r16
 4008f4c:	880b883a 	mov	r5,r17
 4008f50:	dfc00317 	ldw	ra,12(sp)
 4008f54:	dc400217 	ldw	r17,8(sp)
 4008f58:	dc000117 	ldw	r16,4(sp)
 4008f5c:	dec00404 	addi	sp,sp,16
 4008f60:	400984c1 	jmpi	400984c <__swbuf_r>
 4008f64:	8009883a 	mov	r4,r16
 4008f68:	180b883a 	mov	r5,r3
 4008f6c:	003ff806 	br	4008f50 <_putc_r+0xc8>

04008f70 <_realloc_r>:
 4008f70:	defff404 	addi	sp,sp,-48
 4008f74:	dd800815 	stw	r22,32(sp)
 4008f78:	dc800415 	stw	r18,16(sp)
 4008f7c:	dc400315 	stw	r17,12(sp)
 4008f80:	dfc00b15 	stw	ra,44(sp)
 4008f84:	df000a15 	stw	fp,40(sp)
 4008f88:	ddc00915 	stw	r23,36(sp)
 4008f8c:	dd400715 	stw	r21,28(sp)
 4008f90:	dd000615 	stw	r20,24(sp)
 4008f94:	dcc00515 	stw	r19,20(sp)
 4008f98:	dc000215 	stw	r16,8(sp)
 4008f9c:	2825883a 	mov	r18,r5
 4008fa0:	3023883a 	mov	r17,r6
 4008fa4:	202d883a 	mov	r22,r4
 4008fa8:	2800c926 	beq	r5,zero,40092d0 <_realloc_r+0x360>
 4008fac:	400c9780 	call	400c978 <__malloc_lock>
 4008fb0:	943ffe04 	addi	r16,r18,-8
 4008fb4:	88c002c4 	addi	r3,r17,11
 4008fb8:	00800584 	movi	r2,22
 4008fbc:	82000117 	ldw	r8,4(r16)
 4008fc0:	10c01b2e 	bgeu	r2,r3,4009030 <_realloc_r+0xc0>
 4008fc4:	00bffe04 	movi	r2,-8
 4008fc8:	188e703a 	and	r7,r3,r2
 4008fcc:	3839883a 	mov	fp,r7
 4008fd0:	38001a16 	blt	r7,zero,400903c <_realloc_r+0xcc>
 4008fd4:	e4401936 	bltu	fp,r17,400903c <_realloc_r+0xcc>
 4008fd8:	013fff04 	movi	r4,-4
 4008fdc:	4126703a 	and	r19,r8,r4
 4008fe0:	99c02616 	blt	r19,r7,400907c <_realloc_r+0x10c>
 4008fe4:	802b883a 	mov	r21,r16
 4008fe8:	9829883a 	mov	r20,r19
 4008fec:	84000204 	addi	r16,r16,8
 4008ff0:	a80f883a 	mov	r7,r21
 4008ff4:	a70dc83a 	sub	r6,r20,fp
 4008ff8:	008003c4 	movi	r2,15
 4008ffc:	1180c136 	bltu	r2,r6,4009304 <_realloc_r+0x394>
 4009000:	38800117 	ldw	r2,4(r7)
 4009004:	a549883a 	add	r4,r20,r21
 4009008:	1080004c 	andi	r2,r2,1
 400900c:	a084b03a 	or	r2,r20,r2
 4009010:	38800115 	stw	r2,4(r7)
 4009014:	20c00117 	ldw	r3,4(r4)
 4009018:	18c00054 	ori	r3,r3,1
 400901c:	20c00115 	stw	r3,4(r4)
 4009020:	b009883a 	mov	r4,r22
 4009024:	400ca800 	call	400ca80 <__malloc_unlock>
 4009028:	8023883a 	mov	r17,r16
 400902c:	00000606 	br	4009048 <_realloc_r+0xd8>
 4009030:	01c00404 	movi	r7,16
 4009034:	3839883a 	mov	fp,r7
 4009038:	e47fe72e 	bgeu	fp,r17,4008fd8 <_realloc_r+0x68>
 400903c:	00800304 	movi	r2,12
 4009040:	0023883a 	mov	r17,zero
 4009044:	b0800015 	stw	r2,0(r22)
 4009048:	8805883a 	mov	r2,r17
 400904c:	dfc00b17 	ldw	ra,44(sp)
 4009050:	df000a17 	ldw	fp,40(sp)
 4009054:	ddc00917 	ldw	r23,36(sp)
 4009058:	dd800817 	ldw	r22,32(sp)
 400905c:	dd400717 	ldw	r21,28(sp)
 4009060:	dd000617 	ldw	r20,24(sp)
 4009064:	dcc00517 	ldw	r19,20(sp)
 4009068:	dc800417 	ldw	r18,16(sp)
 400906c:	dc400317 	ldw	r17,12(sp)
 4009070:	dc000217 	ldw	r16,8(sp)
 4009074:	dec00c04 	addi	sp,sp,48
 4009078:	f800283a 	ret
 400907c:	00810174 	movhi	r2,1029
 4009080:	10b39704 	addi	r2,r2,-12708
 4009084:	12400217 	ldw	r9,8(r2)
 4009088:	84cd883a 	add	r6,r16,r19
 400908c:	802b883a 	mov	r21,r16
 4009090:	3240b926 	beq	r6,r9,4009378 <_realloc_r+0x408>
 4009094:	31400117 	ldw	r5,4(r6)
 4009098:	00bfff84 	movi	r2,-2
 400909c:	2884703a 	and	r2,r5,r2
 40090a0:	1185883a 	add	r2,r2,r6
 40090a4:	10c00117 	ldw	r3,4(r2)
 40090a8:	18c0004c 	andi	r3,r3,1
 40090ac:	1807003a 	cmpeq	r3,r3,zero
 40090b0:	1800a326 	beq	r3,zero,4009340 <_realloc_r+0x3d0>
 40090b4:	2908703a 	and	r4,r5,r4
 40090b8:	9929883a 	add	r20,r19,r4
 40090bc:	a1c0a30e 	bge	r20,r7,400934c <_realloc_r+0x3dc>
 40090c0:	4080004c 	andi	r2,r8,1
 40090c4:	1000551e 	bne	r2,zero,400921c <_realloc_r+0x2ac>
 40090c8:	80800017 	ldw	r2,0(r16)
 40090cc:	80afc83a 	sub	r23,r16,r2
 40090d0:	b8c00117 	ldw	r3,4(r23)
 40090d4:	00bfff04 	movi	r2,-4
 40090d8:	1884703a 	and	r2,r3,r2
 40090dc:	30002e26 	beq	r6,zero,4009198 <_realloc_r+0x228>
 40090e0:	3240b926 	beq	r6,r9,40093c8 <_realloc_r+0x458>
 40090e4:	98a9883a 	add	r20,r19,r2
 40090e8:	2509883a 	add	r4,r4,r20
 40090ec:	d9000015 	stw	r4,0(sp)
 40090f0:	21c02a16 	blt	r4,r7,400919c <_realloc_r+0x22c>
 40090f4:	30800317 	ldw	r2,12(r6)
 40090f8:	30c00217 	ldw	r3,8(r6)
 40090fc:	01400904 	movi	r5,36
 4009100:	99bfff04 	addi	r6,r19,-4
 4009104:	18800315 	stw	r2,12(r3)
 4009108:	10c00215 	stw	r3,8(r2)
 400910c:	b9000317 	ldw	r4,12(r23)
 4009110:	b8800217 	ldw	r2,8(r23)
 4009114:	b82b883a 	mov	r21,r23
 4009118:	bc000204 	addi	r16,r23,8
 400911c:	20800215 	stw	r2,8(r4)
 4009120:	11000315 	stw	r4,12(r2)
 4009124:	2980e436 	bltu	r5,r6,40094b8 <_realloc_r+0x548>
 4009128:	008004c4 	movi	r2,19
 400912c:	9009883a 	mov	r4,r18
 4009130:	8011883a 	mov	r8,r16
 4009134:	11800f2e 	bgeu	r2,r6,4009174 <_realloc_r+0x204>
 4009138:	90800017 	ldw	r2,0(r18)
 400913c:	ba000404 	addi	r8,r23,16
 4009140:	91000204 	addi	r4,r18,8
 4009144:	b8800215 	stw	r2,8(r23)
 4009148:	90c00117 	ldw	r3,4(r18)
 400914c:	008006c4 	movi	r2,27
 4009150:	b8c00315 	stw	r3,12(r23)
 4009154:	1180072e 	bgeu	r2,r6,4009174 <_realloc_r+0x204>
 4009158:	90c00217 	ldw	r3,8(r18)
 400915c:	ba000604 	addi	r8,r23,24
 4009160:	91000404 	addi	r4,r18,16
 4009164:	b8c00415 	stw	r3,16(r23)
 4009168:	90800317 	ldw	r2,12(r18)
 400916c:	b8800515 	stw	r2,20(r23)
 4009170:	3140e726 	beq	r6,r5,4009510 <_realloc_r+0x5a0>
 4009174:	20800017 	ldw	r2,0(r4)
 4009178:	dd000017 	ldw	r20,0(sp)
 400917c:	b80f883a 	mov	r7,r23
 4009180:	40800015 	stw	r2,0(r8)
 4009184:	20c00117 	ldw	r3,4(r4)
 4009188:	40c00115 	stw	r3,4(r8)
 400918c:	20800217 	ldw	r2,8(r4)
 4009190:	40800215 	stw	r2,8(r8)
 4009194:	003f9706 	br	4008ff4 <_realloc_r+0x84>
 4009198:	98a9883a 	add	r20,r19,r2
 400919c:	a1c01f16 	blt	r20,r7,400921c <_realloc_r+0x2ac>
 40091a0:	b8c00317 	ldw	r3,12(r23)
 40091a4:	b8800217 	ldw	r2,8(r23)
 40091a8:	99bfff04 	addi	r6,r19,-4
 40091ac:	01400904 	movi	r5,36
 40091b0:	b82b883a 	mov	r21,r23
 40091b4:	18800215 	stw	r2,8(r3)
 40091b8:	10c00315 	stw	r3,12(r2)
 40091bc:	bc000204 	addi	r16,r23,8
 40091c0:	2980c336 	bltu	r5,r6,40094d0 <_realloc_r+0x560>
 40091c4:	008004c4 	movi	r2,19
 40091c8:	9009883a 	mov	r4,r18
 40091cc:	8011883a 	mov	r8,r16
 40091d0:	11800f2e 	bgeu	r2,r6,4009210 <_realloc_r+0x2a0>
 40091d4:	90800017 	ldw	r2,0(r18)
 40091d8:	ba000404 	addi	r8,r23,16
 40091dc:	91000204 	addi	r4,r18,8
 40091e0:	b8800215 	stw	r2,8(r23)
 40091e4:	90c00117 	ldw	r3,4(r18)
 40091e8:	008006c4 	movi	r2,27
 40091ec:	b8c00315 	stw	r3,12(r23)
 40091f0:	1180072e 	bgeu	r2,r6,4009210 <_realloc_r+0x2a0>
 40091f4:	90c00217 	ldw	r3,8(r18)
 40091f8:	ba000604 	addi	r8,r23,24
 40091fc:	91000404 	addi	r4,r18,16
 4009200:	b8c00415 	stw	r3,16(r23)
 4009204:	90800317 	ldw	r2,12(r18)
 4009208:	b8800515 	stw	r2,20(r23)
 400920c:	3140c726 	beq	r6,r5,400952c <_realloc_r+0x5bc>
 4009210:	20800017 	ldw	r2,0(r4)
 4009214:	b80f883a 	mov	r7,r23
 4009218:	003fd906 	br	4009180 <_realloc_r+0x210>
 400921c:	880b883a 	mov	r5,r17
 4009220:	b009883a 	mov	r4,r22
 4009224:	400756c0 	call	400756c <_malloc_r>
 4009228:	1023883a 	mov	r17,r2
 400922c:	10002526 	beq	r2,zero,40092c4 <_realloc_r+0x354>
 4009230:	80800117 	ldw	r2,4(r16)
 4009234:	00ffff84 	movi	r3,-2
 4009238:	893ffe04 	addi	r4,r17,-8
 400923c:	10c4703a 	and	r2,r2,r3
 4009240:	8085883a 	add	r2,r16,r2
 4009244:	20809526 	beq	r4,r2,400949c <_realloc_r+0x52c>
 4009248:	99bfff04 	addi	r6,r19,-4
 400924c:	01c00904 	movi	r7,36
 4009250:	39804536 	bltu	r7,r6,4009368 <_realloc_r+0x3f8>
 4009254:	008004c4 	movi	r2,19
 4009258:	9009883a 	mov	r4,r18
 400925c:	880b883a 	mov	r5,r17
 4009260:	11800f2e 	bgeu	r2,r6,40092a0 <_realloc_r+0x330>
 4009264:	90800017 	ldw	r2,0(r18)
 4009268:	89400204 	addi	r5,r17,8
 400926c:	91000204 	addi	r4,r18,8
 4009270:	88800015 	stw	r2,0(r17)
 4009274:	90c00117 	ldw	r3,4(r18)
 4009278:	008006c4 	movi	r2,27
 400927c:	88c00115 	stw	r3,4(r17)
 4009280:	1180072e 	bgeu	r2,r6,40092a0 <_realloc_r+0x330>
 4009284:	90c00217 	ldw	r3,8(r18)
 4009288:	89400404 	addi	r5,r17,16
 400928c:	91000404 	addi	r4,r18,16
 4009290:	88c00215 	stw	r3,8(r17)
 4009294:	90800317 	ldw	r2,12(r18)
 4009298:	88800315 	stw	r2,12(r17)
 400929c:	31c09126 	beq	r6,r7,40094e4 <_realloc_r+0x574>
 40092a0:	20800017 	ldw	r2,0(r4)
 40092a4:	28800015 	stw	r2,0(r5)
 40092a8:	20c00117 	ldw	r3,4(r4)
 40092ac:	28c00115 	stw	r3,4(r5)
 40092b0:	20800217 	ldw	r2,8(r4)
 40092b4:	28800215 	stw	r2,8(r5)
 40092b8:	900b883a 	mov	r5,r18
 40092bc:	b009883a 	mov	r4,r22
 40092c0:	40069e40 	call	40069e4 <_free_r>
 40092c4:	b009883a 	mov	r4,r22
 40092c8:	400ca800 	call	400ca80 <__malloc_unlock>
 40092cc:	003f5e06 	br	4009048 <_realloc_r+0xd8>
 40092d0:	300b883a 	mov	r5,r6
 40092d4:	dfc00b17 	ldw	ra,44(sp)
 40092d8:	df000a17 	ldw	fp,40(sp)
 40092dc:	ddc00917 	ldw	r23,36(sp)
 40092e0:	dd800817 	ldw	r22,32(sp)
 40092e4:	dd400717 	ldw	r21,28(sp)
 40092e8:	dd000617 	ldw	r20,24(sp)
 40092ec:	dcc00517 	ldw	r19,20(sp)
 40092f0:	dc800417 	ldw	r18,16(sp)
 40092f4:	dc400317 	ldw	r17,12(sp)
 40092f8:	dc000217 	ldw	r16,8(sp)
 40092fc:	dec00c04 	addi	sp,sp,48
 4009300:	400756c1 	jmpi	400756c <_malloc_r>
 4009304:	38800117 	ldw	r2,4(r7)
 4009308:	e54b883a 	add	r5,fp,r21
 400930c:	31000054 	ori	r4,r6,1
 4009310:	1080004c 	andi	r2,r2,1
 4009314:	1704b03a 	or	r2,r2,fp
 4009318:	38800115 	stw	r2,4(r7)
 400931c:	29000115 	stw	r4,4(r5)
 4009320:	2987883a 	add	r3,r5,r6
 4009324:	18800117 	ldw	r2,4(r3)
 4009328:	29400204 	addi	r5,r5,8
 400932c:	b009883a 	mov	r4,r22
 4009330:	10800054 	ori	r2,r2,1
 4009334:	18800115 	stw	r2,4(r3)
 4009338:	40069e40 	call	40069e4 <_free_r>
 400933c:	003f3806 	br	4009020 <_realloc_r+0xb0>
 4009340:	000d883a 	mov	r6,zero
 4009344:	0009883a 	mov	r4,zero
 4009348:	003f5d06 	br	40090c0 <_realloc_r+0x150>
 400934c:	30c00217 	ldw	r3,8(r6)
 4009350:	30800317 	ldw	r2,12(r6)
 4009354:	800f883a 	mov	r7,r16
 4009358:	84000204 	addi	r16,r16,8
 400935c:	10c00215 	stw	r3,8(r2)
 4009360:	18800315 	stw	r2,12(r3)
 4009364:	003f2306 	br	4008ff4 <_realloc_r+0x84>
 4009368:	8809883a 	mov	r4,r17
 400936c:	900b883a 	mov	r5,r18
 4009370:	4001e840 	call	4001e84 <memmove>
 4009374:	003fd006 	br	40092b8 <_realloc_r+0x348>
 4009378:	30800117 	ldw	r2,4(r6)
 400937c:	e0c00404 	addi	r3,fp,16
 4009380:	1108703a 	and	r4,r2,r4
 4009384:	9905883a 	add	r2,r19,r4
 4009388:	10ff4d16 	blt	r2,r3,40090c0 <_realloc_r+0x150>
 400938c:	1705c83a 	sub	r2,r2,fp
 4009390:	870b883a 	add	r5,r16,fp
 4009394:	10800054 	ori	r2,r2,1
 4009398:	28800115 	stw	r2,4(r5)
 400939c:	80c00117 	ldw	r3,4(r16)
 40093a0:	00810174 	movhi	r2,1029
 40093a4:	10b39704 	addi	r2,r2,-12708
 40093a8:	b009883a 	mov	r4,r22
 40093ac:	18c0004c 	andi	r3,r3,1
 40093b0:	e0c6b03a 	or	r3,fp,r3
 40093b4:	11400215 	stw	r5,8(r2)
 40093b8:	80c00115 	stw	r3,4(r16)
 40093bc:	400ca800 	call	400ca80 <__malloc_unlock>
 40093c0:	84400204 	addi	r17,r16,8
 40093c4:	003f2006 	br	4009048 <_realloc_r+0xd8>
 40093c8:	98a9883a 	add	r20,r19,r2
 40093cc:	2509883a 	add	r4,r4,r20
 40093d0:	e0800404 	addi	r2,fp,16
 40093d4:	d9000115 	stw	r4,4(sp)
 40093d8:	20bf7016 	blt	r4,r2,400919c <_realloc_r+0x22c>
 40093dc:	b8c00317 	ldw	r3,12(r23)
 40093e0:	b8800217 	ldw	r2,8(r23)
 40093e4:	99bfff04 	addi	r6,r19,-4
 40093e8:	01400904 	movi	r5,36
 40093ec:	18800215 	stw	r2,8(r3)
 40093f0:	10c00315 	stw	r3,12(r2)
 40093f4:	bc400204 	addi	r17,r23,8
 40093f8:	29804136 	bltu	r5,r6,4009500 <_realloc_r+0x590>
 40093fc:	008004c4 	movi	r2,19
 4009400:	9009883a 	mov	r4,r18
 4009404:	880f883a 	mov	r7,r17
 4009408:	11800f2e 	bgeu	r2,r6,4009448 <_realloc_r+0x4d8>
 400940c:	90800017 	ldw	r2,0(r18)
 4009410:	b9c00404 	addi	r7,r23,16
 4009414:	91000204 	addi	r4,r18,8
 4009418:	b8800215 	stw	r2,8(r23)
 400941c:	90c00117 	ldw	r3,4(r18)
 4009420:	008006c4 	movi	r2,27
 4009424:	b8c00315 	stw	r3,12(r23)
 4009428:	1180072e 	bgeu	r2,r6,4009448 <_realloc_r+0x4d8>
 400942c:	90c00217 	ldw	r3,8(r18)
 4009430:	b9c00604 	addi	r7,r23,24
 4009434:	91000404 	addi	r4,r18,16
 4009438:	b8c00415 	stw	r3,16(r23)
 400943c:	90800317 	ldw	r2,12(r18)
 4009440:	b8800515 	stw	r2,20(r23)
 4009444:	31404026 	beq	r6,r5,4009548 <_realloc_r+0x5d8>
 4009448:	20800017 	ldw	r2,0(r4)
 400944c:	38800015 	stw	r2,0(r7)
 4009450:	20c00117 	ldw	r3,4(r4)
 4009454:	38c00115 	stw	r3,4(r7)
 4009458:	20800217 	ldw	r2,8(r4)
 400945c:	38800215 	stw	r2,8(r7)
 4009460:	d8c00117 	ldw	r3,4(sp)
 4009464:	bf0b883a 	add	r5,r23,fp
 4009468:	b009883a 	mov	r4,r22
 400946c:	1f05c83a 	sub	r2,r3,fp
 4009470:	10800054 	ori	r2,r2,1
 4009474:	28800115 	stw	r2,4(r5)
 4009478:	b8c00117 	ldw	r3,4(r23)
 400947c:	00810174 	movhi	r2,1029
 4009480:	10b39704 	addi	r2,r2,-12708
 4009484:	11400215 	stw	r5,8(r2)
 4009488:	18c0004c 	andi	r3,r3,1
 400948c:	e0c6b03a 	or	r3,fp,r3
 4009490:	b8c00115 	stw	r3,4(r23)
 4009494:	400ca800 	call	400ca80 <__malloc_unlock>
 4009498:	003eeb06 	br	4009048 <_realloc_r+0xd8>
 400949c:	20800117 	ldw	r2,4(r4)
 40094a0:	00ffff04 	movi	r3,-4
 40094a4:	800f883a 	mov	r7,r16
 40094a8:	10c4703a 	and	r2,r2,r3
 40094ac:	98a9883a 	add	r20,r19,r2
 40094b0:	84000204 	addi	r16,r16,8
 40094b4:	003ecf06 	br	4008ff4 <_realloc_r+0x84>
 40094b8:	900b883a 	mov	r5,r18
 40094bc:	8009883a 	mov	r4,r16
 40094c0:	4001e840 	call	4001e84 <memmove>
 40094c4:	dd000017 	ldw	r20,0(sp)
 40094c8:	b80f883a 	mov	r7,r23
 40094cc:	003ec906 	br	4008ff4 <_realloc_r+0x84>
 40094d0:	900b883a 	mov	r5,r18
 40094d4:	8009883a 	mov	r4,r16
 40094d8:	4001e840 	call	4001e84 <memmove>
 40094dc:	b80f883a 	mov	r7,r23
 40094e0:	003ec406 	br	4008ff4 <_realloc_r+0x84>
 40094e4:	90c00417 	ldw	r3,16(r18)
 40094e8:	89400604 	addi	r5,r17,24
 40094ec:	91000604 	addi	r4,r18,24
 40094f0:	88c00415 	stw	r3,16(r17)
 40094f4:	90800517 	ldw	r2,20(r18)
 40094f8:	88800515 	stw	r2,20(r17)
 40094fc:	003f6806 	br	40092a0 <_realloc_r+0x330>
 4009500:	900b883a 	mov	r5,r18
 4009504:	8809883a 	mov	r4,r17
 4009508:	4001e840 	call	4001e84 <memmove>
 400950c:	003fd406 	br	4009460 <_realloc_r+0x4f0>
 4009510:	90c00417 	ldw	r3,16(r18)
 4009514:	91000604 	addi	r4,r18,24
 4009518:	ba000804 	addi	r8,r23,32
 400951c:	b8c00615 	stw	r3,24(r23)
 4009520:	90800517 	ldw	r2,20(r18)
 4009524:	b8800715 	stw	r2,28(r23)
 4009528:	003f1206 	br	4009174 <_realloc_r+0x204>
 400952c:	90c00417 	ldw	r3,16(r18)
 4009530:	91000604 	addi	r4,r18,24
 4009534:	ba000804 	addi	r8,r23,32
 4009538:	b8c00615 	stw	r3,24(r23)
 400953c:	90800517 	ldw	r2,20(r18)
 4009540:	b8800715 	stw	r2,28(r23)
 4009544:	003f3206 	br	4009210 <_realloc_r+0x2a0>
 4009548:	90c00417 	ldw	r3,16(r18)
 400954c:	91000604 	addi	r4,r18,24
 4009550:	b9c00804 	addi	r7,r23,32
 4009554:	b8c00615 	stw	r3,24(r23)
 4009558:	90800517 	ldw	r2,20(r18)
 400955c:	b8800715 	stw	r2,28(r23)
 4009560:	003fb906 	br	4009448 <_realloc_r+0x4d8>

04009564 <__isinfd>:
 4009564:	200d883a 	mov	r6,r4
 4009568:	0109c83a 	sub	r4,zero,r4
 400956c:	2188b03a 	or	r4,r4,r6
 4009570:	2008d7fa 	srli	r4,r4,31
 4009574:	00a00034 	movhi	r2,32768
 4009578:	10bfffc4 	addi	r2,r2,-1
 400957c:	1144703a 	and	r2,r2,r5
 4009580:	2088b03a 	or	r4,r4,r2
 4009584:	009ffc34 	movhi	r2,32752
 4009588:	1105c83a 	sub	r2,r2,r4
 400958c:	0087c83a 	sub	r3,zero,r2
 4009590:	10c4b03a 	or	r2,r2,r3
 4009594:	1004d7fa 	srli	r2,r2,31
 4009598:	00c00044 	movi	r3,1
 400959c:	1885c83a 	sub	r2,r3,r2
 40095a0:	f800283a 	ret

040095a4 <__isnand>:
 40095a4:	200d883a 	mov	r6,r4
 40095a8:	0109c83a 	sub	r4,zero,r4
 40095ac:	2188b03a 	or	r4,r4,r6
 40095b0:	2008d7fa 	srli	r4,r4,31
 40095b4:	00a00034 	movhi	r2,32768
 40095b8:	10bfffc4 	addi	r2,r2,-1
 40095bc:	1144703a 	and	r2,r2,r5
 40095c0:	2088b03a 	or	r4,r4,r2
 40095c4:	009ffc34 	movhi	r2,32752
 40095c8:	1105c83a 	sub	r2,r2,r4
 40095cc:	1004d7fa 	srli	r2,r2,31
 40095d0:	f800283a 	ret

040095d4 <_sbrk_r>:
 40095d4:	defffd04 	addi	sp,sp,-12
 40095d8:	dc000015 	stw	r16,0(sp)
 40095dc:	04010174 	movhi	r16,1029
 40095e0:	84019f04 	addi	r16,r16,1660
 40095e4:	dc400115 	stw	r17,4(sp)
 40095e8:	80000015 	stw	zero,0(r16)
 40095ec:	2023883a 	mov	r17,r4
 40095f0:	2809883a 	mov	r4,r5
 40095f4:	dfc00215 	stw	ra,8(sp)
 40095f8:	400c7b40 	call	400c7b4 <sbrk>
 40095fc:	1007883a 	mov	r3,r2
 4009600:	00bfffc4 	movi	r2,-1
 4009604:	18800626 	beq	r3,r2,4009620 <_sbrk_r+0x4c>
 4009608:	1805883a 	mov	r2,r3
 400960c:	dfc00217 	ldw	ra,8(sp)
 4009610:	dc400117 	ldw	r17,4(sp)
 4009614:	dc000017 	ldw	r16,0(sp)
 4009618:	dec00304 	addi	sp,sp,12
 400961c:	f800283a 	ret
 4009620:	80800017 	ldw	r2,0(r16)
 4009624:	103ff826 	beq	r2,zero,4009608 <_sbrk_r+0x34>
 4009628:	88800015 	stw	r2,0(r17)
 400962c:	1805883a 	mov	r2,r3
 4009630:	dfc00217 	ldw	ra,8(sp)
 4009634:	dc400117 	ldw	r17,4(sp)
 4009638:	dc000017 	ldw	r16,0(sp)
 400963c:	dec00304 	addi	sp,sp,12
 4009640:	f800283a 	ret

04009644 <__sclose>:
 4009644:	2940038f 	ldh	r5,14(r5)
 4009648:	4009ac41 	jmpi	4009ac4 <_close_r>

0400964c <__sseek>:
 400964c:	defffe04 	addi	sp,sp,-8
 4009650:	dc000015 	stw	r16,0(sp)
 4009654:	2821883a 	mov	r16,r5
 4009658:	2940038f 	ldh	r5,14(r5)
 400965c:	dfc00115 	stw	ra,4(sp)
 4009660:	4009d3c0 	call	4009d3c <_lseek_r>
 4009664:	1007883a 	mov	r3,r2
 4009668:	00bfffc4 	movi	r2,-1
 400966c:	18800926 	beq	r3,r2,4009694 <__sseek+0x48>
 4009670:	8080030b 	ldhu	r2,12(r16)
 4009674:	80c01415 	stw	r3,80(r16)
 4009678:	10840014 	ori	r2,r2,4096
 400967c:	8080030d 	sth	r2,12(r16)
 4009680:	1805883a 	mov	r2,r3
 4009684:	dfc00117 	ldw	ra,4(sp)
 4009688:	dc000017 	ldw	r16,0(sp)
 400968c:	dec00204 	addi	sp,sp,8
 4009690:	f800283a 	ret
 4009694:	8080030b 	ldhu	r2,12(r16)
 4009698:	10bbffcc 	andi	r2,r2,61439
 400969c:	8080030d 	sth	r2,12(r16)
 40096a0:	1805883a 	mov	r2,r3
 40096a4:	dfc00117 	ldw	ra,4(sp)
 40096a8:	dc000017 	ldw	r16,0(sp)
 40096ac:	dec00204 	addi	sp,sp,8
 40096b0:	f800283a 	ret

040096b4 <__swrite>:
 40096b4:	2880030b 	ldhu	r2,12(r5)
 40096b8:	defffb04 	addi	sp,sp,-20
 40096bc:	dcc00315 	stw	r19,12(sp)
 40096c0:	1080400c 	andi	r2,r2,256
 40096c4:	dc800215 	stw	r18,8(sp)
 40096c8:	dc400115 	stw	r17,4(sp)
 40096cc:	dc000015 	stw	r16,0(sp)
 40096d0:	3027883a 	mov	r19,r6
 40096d4:	3825883a 	mov	r18,r7
 40096d8:	dfc00415 	stw	ra,16(sp)
 40096dc:	2821883a 	mov	r16,r5
 40096e0:	000d883a 	mov	r6,zero
 40096e4:	01c00084 	movi	r7,2
 40096e8:	2023883a 	mov	r17,r4
 40096ec:	10000226 	beq	r2,zero,40096f8 <__swrite+0x44>
 40096f0:	2940038f 	ldh	r5,14(r5)
 40096f4:	4009d3c0 	call	4009d3c <_lseek_r>
 40096f8:	8080030b 	ldhu	r2,12(r16)
 40096fc:	8140038f 	ldh	r5,14(r16)
 4009700:	8809883a 	mov	r4,r17
 4009704:	10bbffcc 	andi	r2,r2,61439
 4009708:	980d883a 	mov	r6,r19
 400970c:	900f883a 	mov	r7,r18
 4009710:	8080030d 	sth	r2,12(r16)
 4009714:	dfc00417 	ldw	ra,16(sp)
 4009718:	dcc00317 	ldw	r19,12(sp)
 400971c:	dc800217 	ldw	r18,8(sp)
 4009720:	dc400117 	ldw	r17,4(sp)
 4009724:	dc000017 	ldw	r16,0(sp)
 4009728:	dec00504 	addi	sp,sp,20
 400972c:	40099981 	jmpi	4009998 <_write_r>

04009730 <__sread>:
 4009730:	defffe04 	addi	sp,sp,-8
 4009734:	dc000015 	stw	r16,0(sp)
 4009738:	2821883a 	mov	r16,r5
 400973c:	2940038f 	ldh	r5,14(r5)
 4009740:	dfc00115 	stw	ra,4(sp)
 4009744:	4009db40 	call	4009db4 <_read_r>
 4009748:	1007883a 	mov	r3,r2
 400974c:	10000816 	blt	r2,zero,4009770 <__sread+0x40>
 4009750:	80801417 	ldw	r2,80(r16)
 4009754:	10c5883a 	add	r2,r2,r3
 4009758:	80801415 	stw	r2,80(r16)
 400975c:	1805883a 	mov	r2,r3
 4009760:	dfc00117 	ldw	ra,4(sp)
 4009764:	dc000017 	ldw	r16,0(sp)
 4009768:	dec00204 	addi	sp,sp,8
 400976c:	f800283a 	ret
 4009770:	8080030b 	ldhu	r2,12(r16)
 4009774:	10bbffcc 	andi	r2,r2,61439
 4009778:	8080030d 	sth	r2,12(r16)
 400977c:	1805883a 	mov	r2,r3
 4009780:	dfc00117 	ldw	ra,4(sp)
 4009784:	dc000017 	ldw	r16,0(sp)
 4009788:	dec00204 	addi	sp,sp,8
 400978c:	f800283a 	ret

04009790 <strcmp>:
 4009790:	2144b03a 	or	r2,r4,r5
 4009794:	108000cc 	andi	r2,r2,3
 4009798:	10001d1e 	bne	r2,zero,4009810 <strcmp+0x80>
 400979c:	200f883a 	mov	r7,r4
 40097a0:	28800017 	ldw	r2,0(r5)
 40097a4:	21000017 	ldw	r4,0(r4)
 40097a8:	280d883a 	mov	r6,r5
 40097ac:	2080161e 	bne	r4,r2,4009808 <strcmp+0x78>
 40097b0:	023fbff4 	movhi	r8,65279
 40097b4:	423fbfc4 	addi	r8,r8,-257
 40097b8:	2207883a 	add	r3,r4,r8
 40097bc:	01602074 	movhi	r5,32897
 40097c0:	29602004 	addi	r5,r5,-32640
 40097c4:	1946703a 	and	r3,r3,r5
 40097c8:	0104303a 	nor	r2,zero,r4
 40097cc:	10c4703a 	and	r2,r2,r3
 40097d0:	10001c1e 	bne	r2,zero,4009844 <strcmp+0xb4>
 40097d4:	4013883a 	mov	r9,r8
 40097d8:	2811883a 	mov	r8,r5
 40097dc:	00000106 	br	40097e4 <strcmp+0x54>
 40097e0:	1800181e 	bne	r3,zero,4009844 <strcmp+0xb4>
 40097e4:	39c00104 	addi	r7,r7,4
 40097e8:	39000017 	ldw	r4,0(r7)
 40097ec:	31800104 	addi	r6,r6,4
 40097f0:	31400017 	ldw	r5,0(r6)
 40097f4:	2245883a 	add	r2,r4,r9
 40097f8:	1204703a 	and	r2,r2,r8
 40097fc:	0106303a 	nor	r3,zero,r4
 4009800:	1886703a 	and	r3,r3,r2
 4009804:	217ff626 	beq	r4,r5,40097e0 <strcmp+0x50>
 4009808:	3809883a 	mov	r4,r7
 400980c:	300b883a 	mov	r5,r6
 4009810:	20c00007 	ldb	r3,0(r4)
 4009814:	1800051e 	bne	r3,zero,400982c <strcmp+0x9c>
 4009818:	00000606 	br	4009834 <strcmp+0xa4>
 400981c:	21000044 	addi	r4,r4,1
 4009820:	20c00007 	ldb	r3,0(r4)
 4009824:	29400044 	addi	r5,r5,1
 4009828:	18000226 	beq	r3,zero,4009834 <strcmp+0xa4>
 400982c:	28800007 	ldb	r2,0(r5)
 4009830:	18bffa26 	beq	r3,r2,400981c <strcmp+0x8c>
 4009834:	20c00003 	ldbu	r3,0(r4)
 4009838:	28800003 	ldbu	r2,0(r5)
 400983c:	1885c83a 	sub	r2,r3,r2
 4009840:	f800283a 	ret
 4009844:	0005883a 	mov	r2,zero
 4009848:	f800283a 	ret

0400984c <__swbuf_r>:
 400984c:	defffc04 	addi	sp,sp,-16
 4009850:	dc400215 	stw	r17,8(sp)
 4009854:	dc000115 	stw	r16,4(sp)
 4009858:	dfc00315 	stw	ra,12(sp)
 400985c:	2023883a 	mov	r17,r4
 4009860:	2821883a 	mov	r16,r5
 4009864:	20000226 	beq	r4,zero,4009870 <__swbuf_r+0x24>
 4009868:	20800e17 	ldw	r2,56(r4)
 400986c:	10002f26 	beq	r2,zero,400992c <__swbuf_r+0xe0>
 4009870:	3080030b 	ldhu	r2,12(r6)
 4009874:	30c00617 	ldw	r3,24(r6)
 4009878:	1080020c 	andi	r2,r2,8
 400987c:	30c00215 	stw	r3,8(r6)
 4009880:	10002226 	beq	r2,zero,400990c <__swbuf_r+0xc0>
 4009884:	30c00417 	ldw	r3,16(r6)
 4009888:	18002026 	beq	r3,zero,400990c <__swbuf_r+0xc0>
 400988c:	31000017 	ldw	r4,0(r6)
 4009890:	30800517 	ldw	r2,20(r6)
 4009894:	20c7c83a 	sub	r3,r4,r3
 4009898:	18802f0e 	bge	r3,r2,4009958 <__swbuf_r+0x10c>
 400989c:	19400044 	addi	r5,r3,1
 40098a0:	30800217 	ldw	r2,8(r6)
 40098a4:	84003fcc 	andi	r16,r16,255
 40098a8:	20c00044 	addi	r3,r4,1
 40098ac:	10bfffc4 	addi	r2,r2,-1
 40098b0:	30800215 	stw	r2,8(r6)
 40098b4:	24000005 	stb	r16,0(r4)
 40098b8:	30800517 	ldw	r2,20(r6)
 40098bc:	30c00015 	stw	r3,0(r6)
 40098c0:	11400c26 	beq	r2,r5,40098f4 <__swbuf_r+0xa8>
 40098c4:	3080030b 	ldhu	r2,12(r6)
 40098c8:	1080004c 	andi	r2,r2,1
 40098cc:	1005003a 	cmpeq	r2,r2,zero
 40098d0:	10000626 	beq	r2,zero,40098ec <__swbuf_r+0xa0>
 40098d4:	8005883a 	mov	r2,r16
 40098d8:	dfc00317 	ldw	ra,12(sp)
 40098dc:	dc400217 	ldw	r17,8(sp)
 40098e0:	dc000117 	ldw	r16,4(sp)
 40098e4:	dec00404 	addi	sp,sp,16
 40098e8:	f800283a 	ret
 40098ec:	00800284 	movi	r2,10
 40098f0:	80bff81e 	bne	r16,r2,40098d4 <__swbuf_r+0x88>
 40098f4:	8809883a 	mov	r4,r17
 40098f8:	300b883a 	mov	r5,r6
 40098fc:	400627c0 	call	400627c <_fflush_r>
 4009900:	103ff426 	beq	r2,zero,40098d4 <__swbuf_r+0x88>
 4009904:	043fffc4 	movi	r16,-1
 4009908:	003ff206 	br	40098d4 <__swbuf_r+0x88>
 400990c:	300b883a 	mov	r5,r6
 4009910:	8809883a 	mov	r4,r17
 4009914:	d9800015 	stw	r6,0(sp)
 4009918:	40049740 	call	4004974 <__swsetup_r>
 400991c:	d9800017 	ldw	r6,0(sp)
 4009920:	1000061e 	bne	r2,zero,400993c <__swbuf_r+0xf0>
 4009924:	30c00417 	ldw	r3,16(r6)
 4009928:	003fd806 	br	400988c <__swbuf_r+0x40>
 400992c:	d9800015 	stw	r6,0(sp)
 4009930:	40065140 	call	4006514 <__sinit>
 4009934:	d9800017 	ldw	r6,0(sp)
 4009938:	003fcd06 	br	4009870 <__swbuf_r+0x24>
 400993c:	3080030b 	ldhu	r2,12(r6)
 4009940:	00c00244 	movi	r3,9
 4009944:	043fffc4 	movi	r16,-1
 4009948:	10801014 	ori	r2,r2,64
 400994c:	3080030d 	sth	r2,12(r6)
 4009950:	88c00015 	stw	r3,0(r17)
 4009954:	003fdf06 	br	40098d4 <__swbuf_r+0x88>
 4009958:	300b883a 	mov	r5,r6
 400995c:	8809883a 	mov	r4,r17
 4009960:	d9800015 	stw	r6,0(sp)
 4009964:	400627c0 	call	400627c <_fflush_r>
 4009968:	d9800017 	ldw	r6,0(sp)
 400996c:	103fe51e 	bne	r2,zero,4009904 <__swbuf_r+0xb8>
 4009970:	31000017 	ldw	r4,0(r6)
 4009974:	01400044 	movi	r5,1
 4009978:	003fc906 	br	40098a0 <__swbuf_r+0x54>

0400997c <__swbuf>:
 400997c:	01810174 	movhi	r6,1029
 4009980:	31b9bf04 	addi	r6,r6,-6404
 4009984:	2007883a 	mov	r3,r4
 4009988:	31000017 	ldw	r4,0(r6)
 400998c:	280d883a 	mov	r6,r5
 4009990:	180b883a 	mov	r5,r3
 4009994:	400984c1 	jmpi	400984c <__swbuf_r>

04009998 <_write_r>:
 4009998:	defffd04 	addi	sp,sp,-12
 400999c:	dc000015 	stw	r16,0(sp)
 40099a0:	04010174 	movhi	r16,1029
 40099a4:	84019f04 	addi	r16,r16,1660
 40099a8:	dc400115 	stw	r17,4(sp)
 40099ac:	80000015 	stw	zero,0(r16)
 40099b0:	2023883a 	mov	r17,r4
 40099b4:	2809883a 	mov	r4,r5
 40099b8:	300b883a 	mov	r5,r6
 40099bc:	380d883a 	mov	r6,r7
 40099c0:	dfc00215 	stw	ra,8(sp)
 40099c4:	401d9f80 	call	401d9f8 <write>
 40099c8:	1007883a 	mov	r3,r2
 40099cc:	00bfffc4 	movi	r2,-1
 40099d0:	18800626 	beq	r3,r2,40099ec <_write_r+0x54>
 40099d4:	1805883a 	mov	r2,r3
 40099d8:	dfc00217 	ldw	ra,8(sp)
 40099dc:	dc400117 	ldw	r17,4(sp)
 40099e0:	dc000017 	ldw	r16,0(sp)
 40099e4:	dec00304 	addi	sp,sp,12
 40099e8:	f800283a 	ret
 40099ec:	80800017 	ldw	r2,0(r16)
 40099f0:	103ff826 	beq	r2,zero,40099d4 <_write_r+0x3c>
 40099f4:	88800015 	stw	r2,0(r17)
 40099f8:	1805883a 	mov	r2,r3
 40099fc:	dfc00217 	ldw	ra,8(sp)
 4009a00:	dc400117 	ldw	r17,4(sp)
 4009a04:	dc000017 	ldw	r16,0(sp)
 4009a08:	dec00304 	addi	sp,sp,12
 4009a0c:	f800283a 	ret

04009a10 <_calloc_r>:
 4009a10:	298b383a 	mul	r5,r5,r6
 4009a14:	defffe04 	addi	sp,sp,-8
 4009a18:	dc000015 	stw	r16,0(sp)
 4009a1c:	dfc00115 	stw	ra,4(sp)
 4009a20:	400756c0 	call	400756c <_malloc_r>
 4009a24:	1021883a 	mov	r16,r2
 4009a28:	01c00904 	movi	r7,36
 4009a2c:	10000d26 	beq	r2,zero,4009a64 <_calloc_r+0x54>
 4009a30:	10ffff17 	ldw	r3,-4(r2)
 4009a34:	1009883a 	mov	r4,r2
 4009a38:	00bfff04 	movi	r2,-4
 4009a3c:	1886703a 	and	r3,r3,r2
 4009a40:	1887883a 	add	r3,r3,r2
 4009a44:	180d883a 	mov	r6,r3
 4009a48:	000b883a 	mov	r5,zero
 4009a4c:	38c01736 	bltu	r7,r3,4009aac <_calloc_r+0x9c>
 4009a50:	008004c4 	movi	r2,19
 4009a54:	10c00836 	bltu	r2,r3,4009a78 <_calloc_r+0x68>
 4009a58:	20000215 	stw	zero,8(r4)
 4009a5c:	20000015 	stw	zero,0(r4)
 4009a60:	20000115 	stw	zero,4(r4)
 4009a64:	8005883a 	mov	r2,r16
 4009a68:	dfc00117 	ldw	ra,4(sp)
 4009a6c:	dc000017 	ldw	r16,0(sp)
 4009a70:	dec00204 	addi	sp,sp,8
 4009a74:	f800283a 	ret
 4009a78:	008006c4 	movi	r2,27
 4009a7c:	80000015 	stw	zero,0(r16)
 4009a80:	80000115 	stw	zero,4(r16)
 4009a84:	81000204 	addi	r4,r16,8
 4009a88:	10fff32e 	bgeu	r2,r3,4009a58 <_calloc_r+0x48>
 4009a8c:	80000215 	stw	zero,8(r16)
 4009a90:	80000315 	stw	zero,12(r16)
 4009a94:	81000404 	addi	r4,r16,16
 4009a98:	19ffef1e 	bne	r3,r7,4009a58 <_calloc_r+0x48>
 4009a9c:	81000604 	addi	r4,r16,24
 4009aa0:	80000415 	stw	zero,16(r16)
 4009aa4:	80000515 	stw	zero,20(r16)
 4009aa8:	003feb06 	br	4009a58 <_calloc_r+0x48>
 4009aac:	4001f640 	call	4001f64 <memset>
 4009ab0:	8005883a 	mov	r2,r16
 4009ab4:	dfc00117 	ldw	ra,4(sp)
 4009ab8:	dc000017 	ldw	r16,0(sp)
 4009abc:	dec00204 	addi	sp,sp,8
 4009ac0:	f800283a 	ret

04009ac4 <_close_r>:
 4009ac4:	defffd04 	addi	sp,sp,-12
 4009ac8:	dc000015 	stw	r16,0(sp)
 4009acc:	04010174 	movhi	r16,1029
 4009ad0:	84019f04 	addi	r16,r16,1660
 4009ad4:	dc400115 	stw	r17,4(sp)
 4009ad8:	80000015 	stw	zero,0(r16)
 4009adc:	2023883a 	mov	r17,r4
 4009ae0:	2809883a 	mov	r4,r5
 4009ae4:	dfc00215 	stw	ra,8(sp)
 4009ae8:	401d7e80 	call	401d7e8 <close>
 4009aec:	1007883a 	mov	r3,r2
 4009af0:	00bfffc4 	movi	r2,-1
 4009af4:	18800626 	beq	r3,r2,4009b10 <_close_r+0x4c>
 4009af8:	1805883a 	mov	r2,r3
 4009afc:	dfc00217 	ldw	ra,8(sp)
 4009b00:	dc400117 	ldw	r17,4(sp)
 4009b04:	dc000017 	ldw	r16,0(sp)
 4009b08:	dec00304 	addi	sp,sp,12
 4009b0c:	f800283a 	ret
 4009b10:	80800017 	ldw	r2,0(r16)
 4009b14:	103ff826 	beq	r2,zero,4009af8 <_close_r+0x34>
 4009b18:	88800015 	stw	r2,0(r17)
 4009b1c:	1805883a 	mov	r2,r3
 4009b20:	dfc00217 	ldw	ra,8(sp)
 4009b24:	dc400117 	ldw	r17,4(sp)
 4009b28:	dc000017 	ldw	r16,0(sp)
 4009b2c:	dec00304 	addi	sp,sp,12
 4009b30:	f800283a 	ret

04009b34 <_fclose_r>:
 4009b34:	defffc04 	addi	sp,sp,-16
 4009b38:	dc400115 	stw	r17,4(sp)
 4009b3c:	dc000015 	stw	r16,0(sp)
 4009b40:	dfc00315 	stw	ra,12(sp)
 4009b44:	dc800215 	stw	r18,8(sp)
 4009b48:	2821883a 	mov	r16,r5
 4009b4c:	2023883a 	mov	r17,r4
 4009b50:	28002926 	beq	r5,zero,4009bf8 <_fclose_r+0xc4>
 4009b54:	40065040 	call	4006504 <__sfp_lock_acquire>
 4009b58:	88000226 	beq	r17,zero,4009b64 <_fclose_r+0x30>
 4009b5c:	88800e17 	ldw	r2,56(r17)
 4009b60:	10002d26 	beq	r2,zero,4009c18 <_fclose_r+0xe4>
 4009b64:	8080030f 	ldh	r2,12(r16)
 4009b68:	10002226 	beq	r2,zero,4009bf4 <_fclose_r+0xc0>
 4009b6c:	8809883a 	mov	r4,r17
 4009b70:	800b883a 	mov	r5,r16
 4009b74:	400627c0 	call	400627c <_fflush_r>
 4009b78:	1025883a 	mov	r18,r2
 4009b7c:	80800b17 	ldw	r2,44(r16)
 4009b80:	10000426 	beq	r2,zero,4009b94 <_fclose_r+0x60>
 4009b84:	81400717 	ldw	r5,28(r16)
 4009b88:	8809883a 	mov	r4,r17
 4009b8c:	103ee83a 	callr	r2
 4009b90:	10002a16 	blt	r2,zero,4009c3c <_fclose_r+0x108>
 4009b94:	8080030b 	ldhu	r2,12(r16)
 4009b98:	1080200c 	andi	r2,r2,128
 4009b9c:	1000231e 	bne	r2,zero,4009c2c <_fclose_r+0xf8>
 4009ba0:	81400c17 	ldw	r5,48(r16)
 4009ba4:	28000526 	beq	r5,zero,4009bbc <_fclose_r+0x88>
 4009ba8:	80801004 	addi	r2,r16,64
 4009bac:	28800226 	beq	r5,r2,4009bb8 <_fclose_r+0x84>
 4009bb0:	8809883a 	mov	r4,r17
 4009bb4:	40069e40 	call	40069e4 <_free_r>
 4009bb8:	80000c15 	stw	zero,48(r16)
 4009bbc:	81401117 	ldw	r5,68(r16)
 4009bc0:	28000326 	beq	r5,zero,4009bd0 <_fclose_r+0x9c>
 4009bc4:	8809883a 	mov	r4,r17
 4009bc8:	40069e40 	call	40069e4 <_free_r>
 4009bcc:	80001115 	stw	zero,68(r16)
 4009bd0:	8000030d 	sth	zero,12(r16)
 4009bd4:	40065080 	call	4006508 <__sfp_lock_release>
 4009bd8:	9005883a 	mov	r2,r18
 4009bdc:	dfc00317 	ldw	ra,12(sp)
 4009be0:	dc800217 	ldw	r18,8(sp)
 4009be4:	dc400117 	ldw	r17,4(sp)
 4009be8:	dc000017 	ldw	r16,0(sp)
 4009bec:	dec00404 	addi	sp,sp,16
 4009bf0:	f800283a 	ret
 4009bf4:	40065080 	call	4006508 <__sfp_lock_release>
 4009bf8:	0025883a 	mov	r18,zero
 4009bfc:	9005883a 	mov	r2,r18
 4009c00:	dfc00317 	ldw	ra,12(sp)
 4009c04:	dc800217 	ldw	r18,8(sp)
 4009c08:	dc400117 	ldw	r17,4(sp)
 4009c0c:	dc000017 	ldw	r16,0(sp)
 4009c10:	dec00404 	addi	sp,sp,16
 4009c14:	f800283a 	ret
 4009c18:	8809883a 	mov	r4,r17
 4009c1c:	40065140 	call	4006514 <__sinit>
 4009c20:	8080030f 	ldh	r2,12(r16)
 4009c24:	103fd11e 	bne	r2,zero,4009b6c <_fclose_r+0x38>
 4009c28:	003ff206 	br	4009bf4 <_fclose_r+0xc0>
 4009c2c:	81400417 	ldw	r5,16(r16)
 4009c30:	8809883a 	mov	r4,r17
 4009c34:	40069e40 	call	40069e4 <_free_r>
 4009c38:	003fd906 	br	4009ba0 <_fclose_r+0x6c>
 4009c3c:	04bfffc4 	movi	r18,-1
 4009c40:	003fd406 	br	4009b94 <_fclose_r+0x60>

04009c44 <fclose>:
 4009c44:	00810174 	movhi	r2,1029
 4009c48:	10b9bf04 	addi	r2,r2,-6404
 4009c4c:	200b883a 	mov	r5,r4
 4009c50:	11000017 	ldw	r4,0(r2)
 4009c54:	4009b341 	jmpi	4009b34 <_fclose_r>

04009c58 <_fstat_r>:
 4009c58:	defffd04 	addi	sp,sp,-12
 4009c5c:	dc000015 	stw	r16,0(sp)
 4009c60:	04010174 	movhi	r16,1029
 4009c64:	84019f04 	addi	r16,r16,1660
 4009c68:	dc400115 	stw	r17,4(sp)
 4009c6c:	80000015 	stw	zero,0(r16)
 4009c70:	2023883a 	mov	r17,r4
 4009c74:	2809883a 	mov	r4,r5
 4009c78:	300b883a 	mov	r5,r6
 4009c7c:	dfc00215 	stw	ra,8(sp)
 4009c80:	400c25c0 	call	400c25c <fstat>
 4009c84:	1007883a 	mov	r3,r2
 4009c88:	00bfffc4 	movi	r2,-1
 4009c8c:	18800626 	beq	r3,r2,4009ca8 <_fstat_r+0x50>
 4009c90:	1805883a 	mov	r2,r3
 4009c94:	dfc00217 	ldw	ra,8(sp)
 4009c98:	dc400117 	ldw	r17,4(sp)
 4009c9c:	dc000017 	ldw	r16,0(sp)
 4009ca0:	dec00304 	addi	sp,sp,12
 4009ca4:	f800283a 	ret
 4009ca8:	80800017 	ldw	r2,0(r16)
 4009cac:	103ff826 	beq	r2,zero,4009c90 <_fstat_r+0x38>
 4009cb0:	88800015 	stw	r2,0(r17)
 4009cb4:	1805883a 	mov	r2,r3
 4009cb8:	dfc00217 	ldw	ra,8(sp)
 4009cbc:	dc400117 	ldw	r17,4(sp)
 4009cc0:	dc000017 	ldw	r16,0(sp)
 4009cc4:	dec00304 	addi	sp,sp,12
 4009cc8:	f800283a 	ret

04009ccc <_isatty_r>:
 4009ccc:	defffd04 	addi	sp,sp,-12
 4009cd0:	dc000015 	stw	r16,0(sp)
 4009cd4:	04010174 	movhi	r16,1029
 4009cd8:	84019f04 	addi	r16,r16,1660
 4009cdc:	dc400115 	stw	r17,4(sp)
 4009ce0:	80000015 	stw	zero,0(r16)
 4009ce4:	2023883a 	mov	r17,r4
 4009ce8:	2809883a 	mov	r4,r5
 4009cec:	dfc00215 	stw	ra,8(sp)
 4009cf0:	400c3900 	call	400c390 <isatty>
 4009cf4:	1007883a 	mov	r3,r2
 4009cf8:	00bfffc4 	movi	r2,-1
 4009cfc:	18800626 	beq	r3,r2,4009d18 <_isatty_r+0x4c>
 4009d00:	1805883a 	mov	r2,r3
 4009d04:	dfc00217 	ldw	ra,8(sp)
 4009d08:	dc400117 	ldw	r17,4(sp)
 4009d0c:	dc000017 	ldw	r16,0(sp)
 4009d10:	dec00304 	addi	sp,sp,12
 4009d14:	f800283a 	ret
 4009d18:	80800017 	ldw	r2,0(r16)
 4009d1c:	103ff826 	beq	r2,zero,4009d00 <_isatty_r+0x34>
 4009d20:	88800015 	stw	r2,0(r17)
 4009d24:	1805883a 	mov	r2,r3
 4009d28:	dfc00217 	ldw	ra,8(sp)
 4009d2c:	dc400117 	ldw	r17,4(sp)
 4009d30:	dc000017 	ldw	r16,0(sp)
 4009d34:	dec00304 	addi	sp,sp,12
 4009d38:	f800283a 	ret

04009d3c <_lseek_r>:
 4009d3c:	defffd04 	addi	sp,sp,-12
 4009d40:	dc000015 	stw	r16,0(sp)
 4009d44:	04010174 	movhi	r16,1029
 4009d48:	84019f04 	addi	r16,r16,1660
 4009d4c:	dc400115 	stw	r17,4(sp)
 4009d50:	80000015 	stw	zero,0(r16)
 4009d54:	2023883a 	mov	r17,r4
 4009d58:	2809883a 	mov	r4,r5
 4009d5c:	300b883a 	mov	r5,r6
 4009d60:	380d883a 	mov	r6,r7
 4009d64:	dfc00215 	stw	ra,8(sp)
 4009d68:	400c59c0 	call	400c59c <lseek>
 4009d6c:	1007883a 	mov	r3,r2
 4009d70:	00bfffc4 	movi	r2,-1
 4009d74:	18800626 	beq	r3,r2,4009d90 <_lseek_r+0x54>
 4009d78:	1805883a 	mov	r2,r3
 4009d7c:	dfc00217 	ldw	ra,8(sp)
 4009d80:	dc400117 	ldw	r17,4(sp)
 4009d84:	dc000017 	ldw	r16,0(sp)
 4009d88:	dec00304 	addi	sp,sp,12
 4009d8c:	f800283a 	ret
 4009d90:	80800017 	ldw	r2,0(r16)
 4009d94:	103ff826 	beq	r2,zero,4009d78 <_lseek_r+0x3c>
 4009d98:	88800015 	stw	r2,0(r17)
 4009d9c:	1805883a 	mov	r2,r3
 4009da0:	dfc00217 	ldw	ra,8(sp)
 4009da4:	dc400117 	ldw	r17,4(sp)
 4009da8:	dc000017 	ldw	r16,0(sp)
 4009dac:	dec00304 	addi	sp,sp,12
 4009db0:	f800283a 	ret

04009db4 <_read_r>:
 4009db4:	defffd04 	addi	sp,sp,-12
 4009db8:	dc000015 	stw	r16,0(sp)
 4009dbc:	04010174 	movhi	r16,1029
 4009dc0:	84019f04 	addi	r16,r16,1660
 4009dc4:	dc400115 	stw	r17,4(sp)
 4009dc8:	80000015 	stw	zero,0(r16)
 4009dcc:	2023883a 	mov	r17,r4
 4009dd0:	2809883a 	mov	r4,r5
 4009dd4:	300b883a 	mov	r5,r6
 4009dd8:	380d883a 	mov	r6,r7
 4009ddc:	dfc00215 	stw	ra,8(sp)
 4009de0:	401d9800 	call	401d980 <read>
 4009de4:	1007883a 	mov	r3,r2
 4009de8:	00bfffc4 	movi	r2,-1
 4009dec:	18800626 	beq	r3,r2,4009e08 <_read_r+0x54>
 4009df0:	1805883a 	mov	r2,r3
 4009df4:	dfc00217 	ldw	ra,8(sp)
 4009df8:	dc400117 	ldw	r17,4(sp)
 4009dfc:	dc000017 	ldw	r16,0(sp)
 4009e00:	dec00304 	addi	sp,sp,12
 4009e04:	f800283a 	ret
 4009e08:	80800017 	ldw	r2,0(r16)
 4009e0c:	103ff826 	beq	r2,zero,4009df0 <_read_r+0x3c>
 4009e10:	88800015 	stw	r2,0(r17)
 4009e14:	1805883a 	mov	r2,r3
 4009e18:	dfc00217 	ldw	ra,8(sp)
 4009e1c:	dc400117 	ldw	r17,4(sp)
 4009e20:	dc000017 	ldw	r16,0(sp)
 4009e24:	dec00304 	addi	sp,sp,12
 4009e28:	f800283a 	ret

04009e2c <__udivdi3>:
 4009e2c:	defff004 	addi	sp,sp,-64
 4009e30:	2005883a 	mov	r2,r4
 4009e34:	3011883a 	mov	r8,r6
 4009e38:	df000e15 	stw	fp,56(sp)
 4009e3c:	dd000a15 	stw	r20,40(sp)
 4009e40:	dc000615 	stw	r16,24(sp)
 4009e44:	dfc00f15 	stw	ra,60(sp)
 4009e48:	ddc00d15 	stw	r23,52(sp)
 4009e4c:	dd800c15 	stw	r22,48(sp)
 4009e50:	dd400b15 	stw	r21,44(sp)
 4009e54:	dcc00915 	stw	r19,36(sp)
 4009e58:	dc800815 	stw	r18,32(sp)
 4009e5c:	dc400715 	stw	r17,28(sp)
 4009e60:	4021883a 	mov	r16,r8
 4009e64:	1039883a 	mov	fp,r2
 4009e68:	2829883a 	mov	r20,r5
 4009e6c:	38003b1e 	bne	r7,zero,4009f5c <__udivdi3+0x130>
 4009e70:	2a005c36 	bltu	r5,r8,4009fe4 <__udivdi3+0x1b8>
 4009e74:	4000a626 	beq	r8,zero,400a110 <__udivdi3+0x2e4>
 4009e78:	00bfffd4 	movui	r2,65535
 4009e7c:	14009e36 	bltu	r2,r16,400a0f8 <__udivdi3+0x2cc>
 4009e80:	00803fc4 	movi	r2,255
 4009e84:	14013d36 	bltu	r2,r16,400a37c <__udivdi3+0x550>
 4009e88:	000b883a 	mov	r5,zero
 4009e8c:	0005883a 	mov	r2,zero
 4009e90:	8084d83a 	srl	r2,r16,r2
 4009e94:	01010174 	movhi	r4,1029
 4009e98:	2121db04 	addi	r4,r4,-30868
 4009e9c:	01800804 	movi	r6,32
 4009ea0:	1105883a 	add	r2,r2,r4
 4009ea4:	10c00003 	ldbu	r3,0(r2)
 4009ea8:	28c7883a 	add	r3,r5,r3
 4009eac:	30edc83a 	sub	r22,r6,r3
 4009eb0:	b000ee1e 	bne	r22,zero,400a26c <__udivdi3+0x440>
 4009eb4:	802ad43a 	srli	r21,r16,16
 4009eb8:	00800044 	movi	r2,1
 4009ebc:	a423c83a 	sub	r17,r20,r16
 4009ec0:	85ffffcc 	andi	r23,r16,65535
 4009ec4:	d8800315 	stw	r2,12(sp)
 4009ec8:	8809883a 	mov	r4,r17
 4009ecc:	a80b883a 	mov	r5,r21
 4009ed0:	400bc200 	call	400bc20 <__udivsi3>
 4009ed4:	8809883a 	mov	r4,r17
 4009ed8:	a80b883a 	mov	r5,r21
 4009edc:	102d883a 	mov	r22,r2
 4009ee0:	400bc280 	call	400bc28 <__umodsi3>
 4009ee4:	1004943a 	slli	r2,r2,16
 4009ee8:	e006d43a 	srli	r3,fp,16
 4009eec:	bda3383a 	mul	r17,r23,r22
 4009ef0:	10c4b03a 	or	r2,r2,r3
 4009ef4:	1440042e 	bgeu	r2,r17,4009f08 <__udivdi3+0xdc>
 4009ef8:	1405883a 	add	r2,r2,r16
 4009efc:	b5bfffc4 	addi	r22,r22,-1
 4009f00:	14000136 	bltu	r2,r16,4009f08 <__udivdi3+0xdc>
 4009f04:	14413d36 	bltu	r2,r17,400a3fc <__udivdi3+0x5d0>
 4009f08:	1463c83a 	sub	r17,r2,r17
 4009f0c:	8809883a 	mov	r4,r17
 4009f10:	a80b883a 	mov	r5,r21
 4009f14:	400bc200 	call	400bc20 <__udivsi3>
 4009f18:	8809883a 	mov	r4,r17
 4009f1c:	a80b883a 	mov	r5,r21
 4009f20:	1029883a 	mov	r20,r2
 4009f24:	400bc280 	call	400bc28 <__umodsi3>
 4009f28:	1004943a 	slli	r2,r2,16
 4009f2c:	bd09383a 	mul	r4,r23,r20
 4009f30:	e0ffffcc 	andi	r3,fp,65535
 4009f34:	10c4b03a 	or	r2,r2,r3
 4009f38:	1100042e 	bgeu	r2,r4,4009f4c <__udivdi3+0x120>
 4009f3c:	8085883a 	add	r2,r16,r2
 4009f40:	a53fffc4 	addi	r20,r20,-1
 4009f44:	14000136 	bltu	r2,r16,4009f4c <__udivdi3+0x120>
 4009f48:	11012036 	bltu	r2,r4,400a3cc <__udivdi3+0x5a0>
 4009f4c:	b004943a 	slli	r2,r22,16
 4009f50:	d9000317 	ldw	r4,12(sp)
 4009f54:	a084b03a 	or	r2,r20,r2
 4009f58:	00001506 	br	4009fb0 <__udivdi3+0x184>
 4009f5c:	380d883a 	mov	r6,r7
 4009f60:	29c06236 	bltu	r5,r7,400a0ec <__udivdi3+0x2c0>
 4009f64:	00bfffd4 	movui	r2,65535
 4009f68:	11c05a36 	bltu	r2,r7,400a0d4 <__udivdi3+0x2a8>
 4009f6c:	00803fc4 	movi	r2,255
 4009f70:	11c0fc36 	bltu	r2,r7,400a364 <__udivdi3+0x538>
 4009f74:	000b883a 	mov	r5,zero
 4009f78:	0005883a 	mov	r2,zero
 4009f7c:	3084d83a 	srl	r2,r6,r2
 4009f80:	01010174 	movhi	r4,1029
 4009f84:	2121db04 	addi	r4,r4,-30868
 4009f88:	01c00804 	movi	r7,32
 4009f8c:	1105883a 	add	r2,r2,r4
 4009f90:	10c00003 	ldbu	r3,0(r2)
 4009f94:	28c7883a 	add	r3,r5,r3
 4009f98:	38efc83a 	sub	r23,r7,r3
 4009f9c:	b800691e 	bne	r23,zero,400a144 <__udivdi3+0x318>
 4009fa0:	35000136 	bltu	r6,r20,4009fa8 <__udivdi3+0x17c>
 4009fa4:	e4005136 	bltu	fp,r16,400a0ec <__udivdi3+0x2c0>
 4009fa8:	00800044 	movi	r2,1
 4009fac:	0009883a 	mov	r4,zero
 4009fb0:	2007883a 	mov	r3,r4
 4009fb4:	dfc00f17 	ldw	ra,60(sp)
 4009fb8:	df000e17 	ldw	fp,56(sp)
 4009fbc:	ddc00d17 	ldw	r23,52(sp)
 4009fc0:	dd800c17 	ldw	r22,48(sp)
 4009fc4:	dd400b17 	ldw	r21,44(sp)
 4009fc8:	dd000a17 	ldw	r20,40(sp)
 4009fcc:	dcc00917 	ldw	r19,36(sp)
 4009fd0:	dc800817 	ldw	r18,32(sp)
 4009fd4:	dc400717 	ldw	r17,28(sp)
 4009fd8:	dc000617 	ldw	r16,24(sp)
 4009fdc:	dec01004 	addi	sp,sp,64
 4009fe0:	f800283a 	ret
 4009fe4:	00bfffd4 	movui	r2,65535
 4009fe8:	12005036 	bltu	r2,r8,400a12c <__udivdi3+0x300>
 4009fec:	00803fc4 	movi	r2,255
 4009ff0:	1200e836 	bltu	r2,r8,400a394 <__udivdi3+0x568>
 4009ff4:	000b883a 	mov	r5,zero
 4009ff8:	0005883a 	mov	r2,zero
 4009ffc:	8084d83a 	srl	r2,r16,r2
 400a000:	01010174 	movhi	r4,1029
 400a004:	2121db04 	addi	r4,r4,-30868
 400a008:	01800804 	movi	r6,32
 400a00c:	1105883a 	add	r2,r2,r4
 400a010:	10c00003 	ldbu	r3,0(r2)
 400a014:	28c7883a 	add	r3,r5,r3
 400a018:	30cbc83a 	sub	r5,r6,r3
 400a01c:	28000626 	beq	r5,zero,400a038 <__udivdi3+0x20c>
 400a020:	3145c83a 	sub	r2,r6,r5
 400a024:	e084d83a 	srl	r2,fp,r2
 400a028:	a146983a 	sll	r3,r20,r5
 400a02c:	e178983a 	sll	fp,fp,r5
 400a030:	8160983a 	sll	r16,r16,r5
 400a034:	18a8b03a 	or	r20,r3,r2
 400a038:	802ad43a 	srli	r21,r16,16
 400a03c:	a009883a 	mov	r4,r20
 400a040:	85ffffcc 	andi	r23,r16,65535
 400a044:	a80b883a 	mov	r5,r21
 400a048:	400bc200 	call	400bc20 <__udivsi3>
 400a04c:	a009883a 	mov	r4,r20
 400a050:	a80b883a 	mov	r5,r21
 400a054:	102d883a 	mov	r22,r2
 400a058:	400bc280 	call	400bc28 <__umodsi3>
 400a05c:	1004943a 	slli	r2,r2,16
 400a060:	e006d43a 	srli	r3,fp,16
 400a064:	bda3383a 	mul	r17,r23,r22
 400a068:	10c4b03a 	or	r2,r2,r3
 400a06c:	1440042e 	bgeu	r2,r17,400a080 <__udivdi3+0x254>
 400a070:	1405883a 	add	r2,r2,r16
 400a074:	b5bfffc4 	addi	r22,r22,-1
 400a078:	14000136 	bltu	r2,r16,400a080 <__udivdi3+0x254>
 400a07c:	1440d536 	bltu	r2,r17,400a3d4 <__udivdi3+0x5a8>
 400a080:	1463c83a 	sub	r17,r2,r17
 400a084:	8809883a 	mov	r4,r17
 400a088:	a80b883a 	mov	r5,r21
 400a08c:	400bc200 	call	400bc20 <__udivsi3>
 400a090:	8809883a 	mov	r4,r17
 400a094:	a80b883a 	mov	r5,r21
 400a098:	1029883a 	mov	r20,r2
 400a09c:	400bc280 	call	400bc28 <__umodsi3>
 400a0a0:	1004943a 	slli	r2,r2,16
 400a0a4:	bd09383a 	mul	r4,r23,r20
 400a0a8:	e0ffffcc 	andi	r3,fp,65535
 400a0ac:	10c4b03a 	or	r2,r2,r3
 400a0b0:	1100042e 	bgeu	r2,r4,400a0c4 <__udivdi3+0x298>
 400a0b4:	8085883a 	add	r2,r16,r2
 400a0b8:	a53fffc4 	addi	r20,r20,-1
 400a0bc:	14000136 	bltu	r2,r16,400a0c4 <__udivdi3+0x298>
 400a0c0:	1100c736 	bltu	r2,r4,400a3e0 <__udivdi3+0x5b4>
 400a0c4:	b004943a 	slli	r2,r22,16
 400a0c8:	0009883a 	mov	r4,zero
 400a0cc:	a084b03a 	or	r2,r20,r2
 400a0d0:	003fb706 	br	4009fb0 <__udivdi3+0x184>
 400a0d4:	00804034 	movhi	r2,256
 400a0d8:	10bfffc4 	addi	r2,r2,-1
 400a0dc:	11c0a436 	bltu	r2,r7,400a370 <__udivdi3+0x544>
 400a0e0:	01400404 	movi	r5,16
 400a0e4:	2805883a 	mov	r2,r5
 400a0e8:	003fa406 	br	4009f7c <__udivdi3+0x150>
 400a0ec:	0005883a 	mov	r2,zero
 400a0f0:	0009883a 	mov	r4,zero
 400a0f4:	003fae06 	br	4009fb0 <__udivdi3+0x184>
 400a0f8:	00804034 	movhi	r2,256
 400a0fc:	10bfffc4 	addi	r2,r2,-1
 400a100:	1400a136 	bltu	r2,r16,400a388 <__udivdi3+0x55c>
 400a104:	01400404 	movi	r5,16
 400a108:	2805883a 	mov	r2,r5
 400a10c:	003f6006 	br	4009e90 <__udivdi3+0x64>
 400a110:	01000044 	movi	r4,1
 400a114:	000b883a 	mov	r5,zero
 400a118:	400bc200 	call	400bc20 <__udivsi3>
 400a11c:	1021883a 	mov	r16,r2
 400a120:	00bfffd4 	movui	r2,65535
 400a124:	143ff436 	bltu	r2,r16,400a0f8 <__udivdi3+0x2cc>
 400a128:	003f5506 	br	4009e80 <__udivdi3+0x54>
 400a12c:	00804034 	movhi	r2,256
 400a130:	10bfffc4 	addi	r2,r2,-1
 400a134:	12009a36 	bltu	r2,r8,400a3a0 <__udivdi3+0x574>
 400a138:	01400404 	movi	r5,16
 400a13c:	2805883a 	mov	r2,r5
 400a140:	003fae06 	br	4009ffc <__udivdi3+0x1d0>
 400a144:	3dc5c83a 	sub	r2,r7,r23
 400a148:	35c8983a 	sll	r4,r6,r23
 400a14c:	8086d83a 	srl	r3,r16,r2
 400a150:	a0a2d83a 	srl	r17,r20,r2
 400a154:	e084d83a 	srl	r2,fp,r2
 400a158:	20eab03a 	or	r21,r4,r3
 400a15c:	a82cd43a 	srli	r22,r21,16
 400a160:	a5c6983a 	sll	r3,r20,r23
 400a164:	8809883a 	mov	r4,r17
 400a168:	b00b883a 	mov	r5,r22
 400a16c:	1886b03a 	or	r3,r3,r2
 400a170:	d8c00215 	stw	r3,8(sp)
 400a174:	400bc200 	call	400bc20 <__udivsi3>
 400a178:	8809883a 	mov	r4,r17
 400a17c:	b00b883a 	mov	r5,r22
 400a180:	1029883a 	mov	r20,r2
 400a184:	400bc280 	call	400bc28 <__umodsi3>
 400a188:	a8ffffcc 	andi	r3,r21,65535
 400a18c:	d8c00515 	stw	r3,20(sp)
 400a190:	d9000217 	ldw	r4,8(sp)
 400a194:	d9400517 	ldw	r5,20(sp)
 400a198:	1004943a 	slli	r2,r2,16
 400a19c:	2006d43a 	srli	r3,r4,16
 400a1a0:	85e0983a 	sll	r16,r16,r23
 400a1a4:	2d23383a 	mul	r17,r5,r20
 400a1a8:	10c4b03a 	or	r2,r2,r3
 400a1ac:	dc000015 	stw	r16,0(sp)
 400a1b0:	1440032e 	bgeu	r2,r17,400a1c0 <__udivdi3+0x394>
 400a1b4:	1545883a 	add	r2,r2,r21
 400a1b8:	a53fffc4 	addi	r20,r20,-1
 400a1bc:	15407f2e 	bgeu	r2,r21,400a3bc <__udivdi3+0x590>
 400a1c0:	1463c83a 	sub	r17,r2,r17
 400a1c4:	8809883a 	mov	r4,r17
 400a1c8:	b00b883a 	mov	r5,r22
 400a1cc:	400bc200 	call	400bc20 <__udivsi3>
 400a1d0:	8809883a 	mov	r4,r17
 400a1d4:	b00b883a 	mov	r5,r22
 400a1d8:	1021883a 	mov	r16,r2
 400a1dc:	400bc280 	call	400bc28 <__umodsi3>
 400a1e0:	d8c00517 	ldw	r3,20(sp)
 400a1e4:	d9000217 	ldw	r4,8(sp)
 400a1e8:	1004943a 	slli	r2,r2,16
 400a1ec:	1c0f383a 	mul	r7,r3,r16
 400a1f0:	20ffffcc 	andi	r3,r4,65535
 400a1f4:	10e2b03a 	or	r17,r2,r3
 400a1f8:	89c0032e 	bgeu	r17,r7,400a208 <__udivdi3+0x3dc>
 400a1fc:	8d63883a 	add	r17,r17,r21
 400a200:	843fffc4 	addi	r16,r16,-1
 400a204:	8d40692e 	bgeu	r17,r21,400a3ac <__udivdi3+0x580>
 400a208:	a008943a 	slli	r4,r20,16
 400a20c:	d9400017 	ldw	r5,0(sp)
 400a210:	89e3c83a 	sub	r17,r17,r7
 400a214:	8110b03a 	or	r8,r16,r4
 400a218:	280cd43a 	srli	r6,r5,16
 400a21c:	28ffffcc 	andi	r3,r5,65535
 400a220:	40bfffcc 	andi	r2,r8,65535
 400a224:	400ad43a 	srli	r5,r8,16
 400a228:	10d3383a 	mul	r9,r2,r3
 400a22c:	1185383a 	mul	r2,r2,r6
 400a230:	28c7383a 	mul	r3,r5,r3
 400a234:	4808d43a 	srli	r4,r9,16
 400a238:	298b383a 	mul	r5,r5,r6
 400a23c:	10c5883a 	add	r2,r2,r3
 400a240:	2089883a 	add	r4,r4,r2
 400a244:	20c0022e 	bgeu	r4,r3,400a250 <__udivdi3+0x424>
 400a248:	00800074 	movhi	r2,1
 400a24c:	288b883a 	add	r5,r5,r2
 400a250:	2004d43a 	srli	r2,r4,16
 400a254:	288b883a 	add	r5,r5,r2
 400a258:	89403f36 	bltu	r17,r5,400a358 <__udivdi3+0x52c>
 400a25c:	89403926 	beq	r17,r5,400a344 <__udivdi3+0x518>
 400a260:	4005883a 	mov	r2,r8
 400a264:	0009883a 	mov	r4,zero
 400a268:	003f5106 	br	4009fb0 <__udivdi3+0x184>
 400a26c:	85a0983a 	sll	r16,r16,r22
 400a270:	3585c83a 	sub	r2,r6,r22
 400a274:	a0a2d83a 	srl	r17,r20,r2
 400a278:	802ad43a 	srli	r21,r16,16
 400a27c:	e084d83a 	srl	r2,fp,r2
 400a280:	a586983a 	sll	r3,r20,r22
 400a284:	8809883a 	mov	r4,r17
 400a288:	a80b883a 	mov	r5,r21
 400a28c:	1886b03a 	or	r3,r3,r2
 400a290:	d8c00115 	stw	r3,4(sp)
 400a294:	400bc200 	call	400bc20 <__udivsi3>
 400a298:	8809883a 	mov	r4,r17
 400a29c:	a80b883a 	mov	r5,r21
 400a2a0:	d8800415 	stw	r2,16(sp)
 400a2a4:	400bc280 	call	400bc28 <__umodsi3>
 400a2a8:	d9000117 	ldw	r4,4(sp)
 400a2ac:	d9400417 	ldw	r5,16(sp)
 400a2b0:	1004943a 	slli	r2,r2,16
 400a2b4:	85ffffcc 	andi	r23,r16,65535
 400a2b8:	2006d43a 	srli	r3,r4,16
 400a2bc:	b963383a 	mul	r17,r23,r5
 400a2c0:	10c4b03a 	or	r2,r2,r3
 400a2c4:	1440042e 	bgeu	r2,r17,400a2d8 <__udivdi3+0x4ac>
 400a2c8:	297fffc4 	addi	r5,r5,-1
 400a2cc:	1405883a 	add	r2,r2,r16
 400a2d0:	d9400415 	stw	r5,16(sp)
 400a2d4:	1400442e 	bgeu	r2,r16,400a3e8 <__udivdi3+0x5bc>
 400a2d8:	1463c83a 	sub	r17,r2,r17
 400a2dc:	8809883a 	mov	r4,r17
 400a2e0:	a80b883a 	mov	r5,r21
 400a2e4:	400bc200 	call	400bc20 <__udivsi3>
 400a2e8:	8809883a 	mov	r4,r17
 400a2ec:	a80b883a 	mov	r5,r21
 400a2f0:	1029883a 	mov	r20,r2
 400a2f4:	400bc280 	call	400bc28 <__umodsi3>
 400a2f8:	d9400117 	ldw	r5,4(sp)
 400a2fc:	1004943a 	slli	r2,r2,16
 400a300:	bd09383a 	mul	r4,r23,r20
 400a304:	28ffffcc 	andi	r3,r5,65535
 400a308:	10c6b03a 	or	r3,r2,r3
 400a30c:	1900062e 	bgeu	r3,r4,400a328 <__udivdi3+0x4fc>
 400a310:	1c07883a 	add	r3,r3,r16
 400a314:	a53fffc4 	addi	r20,r20,-1
 400a318:	1c000336 	bltu	r3,r16,400a328 <__udivdi3+0x4fc>
 400a31c:	1900022e 	bgeu	r3,r4,400a328 <__udivdi3+0x4fc>
 400a320:	a53fffc4 	addi	r20,r20,-1
 400a324:	1c07883a 	add	r3,r3,r16
 400a328:	d9400417 	ldw	r5,16(sp)
 400a32c:	e5b8983a 	sll	fp,fp,r22
 400a330:	1923c83a 	sub	r17,r3,r4
 400a334:	2804943a 	slli	r2,r5,16
 400a338:	a0a8b03a 	or	r20,r20,r2
 400a33c:	dd000315 	stw	r20,12(sp)
 400a340:	003ee106 	br	4009ec8 <__udivdi3+0x9c>
 400a344:	2004943a 	slli	r2,r4,16
 400a348:	e5c8983a 	sll	r4,fp,r23
 400a34c:	48ffffcc 	andi	r3,r9,65535
 400a350:	10c5883a 	add	r2,r2,r3
 400a354:	20bfc22e 	bgeu	r4,r2,400a260 <__udivdi3+0x434>
 400a358:	40bfffc4 	addi	r2,r8,-1
 400a35c:	0009883a 	mov	r4,zero
 400a360:	003f1306 	br	4009fb0 <__udivdi3+0x184>
 400a364:	01400204 	movi	r5,8
 400a368:	2805883a 	mov	r2,r5
 400a36c:	003f0306 	br	4009f7c <__udivdi3+0x150>
 400a370:	01400604 	movi	r5,24
 400a374:	2805883a 	mov	r2,r5
 400a378:	003f0006 	br	4009f7c <__udivdi3+0x150>
 400a37c:	01400204 	movi	r5,8
 400a380:	2805883a 	mov	r2,r5
 400a384:	003ec206 	br	4009e90 <__udivdi3+0x64>
 400a388:	01400604 	movi	r5,24
 400a38c:	2805883a 	mov	r2,r5
 400a390:	003ebf06 	br	4009e90 <__udivdi3+0x64>
 400a394:	01400204 	movi	r5,8
 400a398:	2805883a 	mov	r2,r5
 400a39c:	003f1706 	br	4009ffc <__udivdi3+0x1d0>
 400a3a0:	01400604 	movi	r5,24
 400a3a4:	2805883a 	mov	r2,r5
 400a3a8:	003f1406 	br	4009ffc <__udivdi3+0x1d0>
 400a3ac:	89ff962e 	bgeu	r17,r7,400a208 <__udivdi3+0x3dc>
 400a3b0:	8d63883a 	add	r17,r17,r21
 400a3b4:	843fffc4 	addi	r16,r16,-1
 400a3b8:	003f9306 	br	400a208 <__udivdi3+0x3dc>
 400a3bc:	147f802e 	bgeu	r2,r17,400a1c0 <__udivdi3+0x394>
 400a3c0:	a53fffc4 	addi	r20,r20,-1
 400a3c4:	1545883a 	add	r2,r2,r21
 400a3c8:	003f7d06 	br	400a1c0 <__udivdi3+0x394>
 400a3cc:	a53fffc4 	addi	r20,r20,-1
 400a3d0:	003ede06 	br	4009f4c <__udivdi3+0x120>
 400a3d4:	b5bfffc4 	addi	r22,r22,-1
 400a3d8:	1405883a 	add	r2,r2,r16
 400a3dc:	003f2806 	br	400a080 <__udivdi3+0x254>
 400a3e0:	a53fffc4 	addi	r20,r20,-1
 400a3e4:	003f3706 	br	400a0c4 <__udivdi3+0x298>
 400a3e8:	147fbb2e 	bgeu	r2,r17,400a2d8 <__udivdi3+0x4ac>
 400a3ec:	297fffc4 	addi	r5,r5,-1
 400a3f0:	1405883a 	add	r2,r2,r16
 400a3f4:	d9400415 	stw	r5,16(sp)
 400a3f8:	003fb706 	br	400a2d8 <__udivdi3+0x4ac>
 400a3fc:	b5bfffc4 	addi	r22,r22,-1
 400a400:	1405883a 	add	r2,r2,r16
 400a404:	003ec006 	br	4009f08 <__udivdi3+0xdc>

0400a408 <__umoddi3>:
 400a408:	defff104 	addi	sp,sp,-60
 400a40c:	dd800b15 	stw	r22,44(sp)
 400a410:	dd000915 	stw	r20,36(sp)
 400a414:	dc000515 	stw	r16,20(sp)
 400a418:	dfc00e15 	stw	ra,56(sp)
 400a41c:	df000d15 	stw	fp,52(sp)
 400a420:	ddc00c15 	stw	r23,48(sp)
 400a424:	dd400a15 	stw	r21,40(sp)
 400a428:	dcc00815 	stw	r19,32(sp)
 400a42c:	dc800715 	stw	r18,28(sp)
 400a430:	dc400615 	stw	r17,24(sp)
 400a434:	3021883a 	mov	r16,r6
 400a438:	202d883a 	mov	r22,r4
 400a43c:	2829883a 	mov	r20,r5
 400a440:	38002b1e 	bne	r7,zero,400a4f0 <__umoddi3+0xe8>
 400a444:	29805036 	bltu	r5,r6,400a588 <__umoddi3+0x180>
 400a448:	30008a26 	beq	r6,zero,400a674 <__umoddi3+0x26c>
 400a44c:	00bfffd4 	movui	r2,65535
 400a450:	14008236 	bltu	r2,r16,400a65c <__umoddi3+0x254>
 400a454:	00803fc4 	movi	r2,255
 400a458:	14013636 	bltu	r2,r16,400a934 <__umoddi3+0x52c>
 400a45c:	000b883a 	mov	r5,zero
 400a460:	0005883a 	mov	r2,zero
 400a464:	8084d83a 	srl	r2,r16,r2
 400a468:	01010174 	movhi	r4,1029
 400a46c:	2121db04 	addi	r4,r4,-30868
 400a470:	01800804 	movi	r6,32
 400a474:	1105883a 	add	r2,r2,r4
 400a478:	10c00003 	ldbu	r3,0(r2)
 400a47c:	28c7883a 	add	r3,r5,r3
 400a480:	30efc83a 	sub	r23,r6,r3
 400a484:	b800941e 	bne	r23,zero,400a6d8 <__umoddi3+0x2d0>
 400a488:	802ad43a 	srli	r21,r16,16
 400a48c:	a423c83a 	sub	r17,r20,r16
 400a490:	0039883a 	mov	fp,zero
 400a494:	853fffcc 	andi	r20,r16,65535
 400a498:	8809883a 	mov	r4,r17
 400a49c:	a80b883a 	mov	r5,r21
 400a4a0:	400bc200 	call	400bc20 <__udivsi3>
 400a4a4:	8809883a 	mov	r4,r17
 400a4a8:	a80b883a 	mov	r5,r21
 400a4ac:	a0a3383a 	mul	r17,r20,r2
 400a4b0:	400bc280 	call	400bc28 <__umodsi3>
 400a4b4:	1004943a 	slli	r2,r2,16
 400a4b8:	b006d43a 	srli	r3,r22,16
 400a4bc:	10c4b03a 	or	r2,r2,r3
 400a4c0:	1440032e 	bgeu	r2,r17,400a4d0 <__umoddi3+0xc8>
 400a4c4:	1405883a 	add	r2,r2,r16
 400a4c8:	14000136 	bltu	r2,r16,400a4d0 <__umoddi3+0xc8>
 400a4cc:	14413536 	bltu	r2,r17,400a9a4 <__umoddi3+0x59c>
 400a4d0:	1463c83a 	sub	r17,r2,r17
 400a4d4:	8809883a 	mov	r4,r17
 400a4d8:	a80b883a 	mov	r5,r21
 400a4dc:	400bc200 	call	400bc20 <__udivsi3>
 400a4e0:	8809883a 	mov	r4,r17
 400a4e4:	a0a3383a 	mul	r17,r20,r2
 400a4e8:	a80b883a 	mov	r5,r21
 400a4ec:	00004d06 	br	400a624 <__umoddi3+0x21c>
 400a4f0:	380d883a 	mov	r6,r7
 400a4f4:	29c0102e 	bgeu	r5,r7,400a538 <__umoddi3+0x130>
 400a4f8:	2011883a 	mov	r8,r4
 400a4fc:	2813883a 	mov	r9,r5
 400a500:	4005883a 	mov	r2,r8
 400a504:	4807883a 	mov	r3,r9
 400a508:	dfc00e17 	ldw	ra,56(sp)
 400a50c:	df000d17 	ldw	fp,52(sp)
 400a510:	ddc00c17 	ldw	r23,48(sp)
 400a514:	dd800b17 	ldw	r22,44(sp)
 400a518:	dd400a17 	ldw	r21,40(sp)
 400a51c:	dd000917 	ldw	r20,36(sp)
 400a520:	dcc00817 	ldw	r19,32(sp)
 400a524:	dc800717 	ldw	r18,28(sp)
 400a528:	dc400617 	ldw	r17,24(sp)
 400a52c:	dc000517 	ldw	r16,20(sp)
 400a530:	dec00f04 	addi	sp,sp,60
 400a534:	f800283a 	ret
 400a538:	00bfffd4 	movui	r2,65535
 400a53c:	11c05a36 	bltu	r2,r7,400a6a8 <__umoddi3+0x2a0>
 400a540:	00803fc4 	movi	r2,255
 400a544:	11c0fe36 	bltu	r2,r7,400a940 <__umoddi3+0x538>
 400a548:	000b883a 	mov	r5,zero
 400a54c:	0005883a 	mov	r2,zero
 400a550:	3084d83a 	srl	r2,r6,r2
 400a554:	01010174 	movhi	r4,1029
 400a558:	2121db04 	addi	r4,r4,-30868
 400a55c:	01c00804 	movi	r7,32
 400a560:	1105883a 	add	r2,r2,r4
 400a564:	10c00003 	ldbu	r3,0(r2)
 400a568:	28c7883a 	add	r3,r5,r3
 400a56c:	38ebc83a 	sub	r21,r7,r3
 400a570:	a800851e 	bne	r21,zero,400a788 <__umoddi3+0x380>
 400a574:	35005236 	bltu	r6,r20,400a6c0 <__umoddi3+0x2b8>
 400a578:	b400512e 	bgeu	r22,r16,400a6c0 <__umoddi3+0x2b8>
 400a57c:	b011883a 	mov	r8,r22
 400a580:	a013883a 	mov	r9,r20
 400a584:	003fde06 	br	400a500 <__umoddi3+0xf8>
 400a588:	00bfffd4 	movui	r2,65535
 400a58c:	11804036 	bltu	r2,r6,400a690 <__umoddi3+0x288>
 400a590:	00803fc4 	movi	r2,255
 400a594:	1180ed36 	bltu	r2,r6,400a94c <__umoddi3+0x544>
 400a598:	000b883a 	mov	r5,zero
 400a59c:	0005883a 	mov	r2,zero
 400a5a0:	8084d83a 	srl	r2,r16,r2
 400a5a4:	01010174 	movhi	r4,1029
 400a5a8:	2121db04 	addi	r4,r4,-30868
 400a5ac:	01800804 	movi	r6,32
 400a5b0:	1105883a 	add	r2,r2,r4
 400a5b4:	10c00003 	ldbu	r3,0(r2)
 400a5b8:	28c7883a 	add	r3,r5,r3
 400a5bc:	30c7c83a 	sub	r3,r6,r3
 400a5c0:	1800bf1e 	bne	r3,zero,400a8c0 <__umoddi3+0x4b8>
 400a5c4:	0039883a 	mov	fp,zero
 400a5c8:	802ad43a 	srli	r21,r16,16
 400a5cc:	a009883a 	mov	r4,r20
 400a5d0:	85ffffcc 	andi	r23,r16,65535
 400a5d4:	a80b883a 	mov	r5,r21
 400a5d8:	400bc200 	call	400bc20 <__udivsi3>
 400a5dc:	a009883a 	mov	r4,r20
 400a5e0:	a80b883a 	mov	r5,r21
 400a5e4:	b8a3383a 	mul	r17,r23,r2
 400a5e8:	400bc280 	call	400bc28 <__umodsi3>
 400a5ec:	1004943a 	slli	r2,r2,16
 400a5f0:	b006d43a 	srli	r3,r22,16
 400a5f4:	10c4b03a 	or	r2,r2,r3
 400a5f8:	1440032e 	bgeu	r2,r17,400a608 <__umoddi3+0x200>
 400a5fc:	1405883a 	add	r2,r2,r16
 400a600:	14000136 	bltu	r2,r16,400a608 <__umoddi3+0x200>
 400a604:	1440e536 	bltu	r2,r17,400a99c <__umoddi3+0x594>
 400a608:	1463c83a 	sub	r17,r2,r17
 400a60c:	8809883a 	mov	r4,r17
 400a610:	a80b883a 	mov	r5,r21
 400a614:	400bc200 	call	400bc20 <__udivsi3>
 400a618:	8809883a 	mov	r4,r17
 400a61c:	b8a3383a 	mul	r17,r23,r2
 400a620:	a80b883a 	mov	r5,r21
 400a624:	400bc280 	call	400bc28 <__umodsi3>
 400a628:	1004943a 	slli	r2,r2,16
 400a62c:	b0ffffcc 	andi	r3,r22,65535
 400a630:	10c4b03a 	or	r2,r2,r3
 400a634:	1440042e 	bgeu	r2,r17,400a648 <__umoddi3+0x240>
 400a638:	1405883a 	add	r2,r2,r16
 400a63c:	14000236 	bltu	r2,r16,400a648 <__umoddi3+0x240>
 400a640:	1440012e 	bgeu	r2,r17,400a648 <__umoddi3+0x240>
 400a644:	1405883a 	add	r2,r2,r16
 400a648:	1445c83a 	sub	r2,r2,r17
 400a64c:	1724d83a 	srl	r18,r2,fp
 400a650:	0013883a 	mov	r9,zero
 400a654:	9011883a 	mov	r8,r18
 400a658:	003fa906 	br	400a500 <__umoddi3+0xf8>
 400a65c:	00804034 	movhi	r2,256
 400a660:	10bfffc4 	addi	r2,r2,-1
 400a664:	1400b036 	bltu	r2,r16,400a928 <__umoddi3+0x520>
 400a668:	01400404 	movi	r5,16
 400a66c:	2805883a 	mov	r2,r5
 400a670:	003f7c06 	br	400a464 <__umoddi3+0x5c>
 400a674:	01000044 	movi	r4,1
 400a678:	000b883a 	mov	r5,zero
 400a67c:	400bc200 	call	400bc20 <__udivsi3>
 400a680:	1021883a 	mov	r16,r2
 400a684:	00bfffd4 	movui	r2,65535
 400a688:	143ff436 	bltu	r2,r16,400a65c <__umoddi3+0x254>
 400a68c:	003f7106 	br	400a454 <__umoddi3+0x4c>
 400a690:	00804034 	movhi	r2,256
 400a694:	10bfffc4 	addi	r2,r2,-1
 400a698:	1180af36 	bltu	r2,r6,400a958 <__umoddi3+0x550>
 400a69c:	01400404 	movi	r5,16
 400a6a0:	2805883a 	mov	r2,r5
 400a6a4:	003fbe06 	br	400a5a0 <__umoddi3+0x198>
 400a6a8:	00804034 	movhi	r2,256
 400a6ac:	10bfffc4 	addi	r2,r2,-1
 400a6b0:	11c0ac36 	bltu	r2,r7,400a964 <__umoddi3+0x55c>
 400a6b4:	01400404 	movi	r5,16
 400a6b8:	2805883a 	mov	r2,r5
 400a6bc:	003fa406 	br	400a550 <__umoddi3+0x148>
 400a6c0:	b409c83a 	sub	r4,r22,r16
 400a6c4:	b105803a 	cmpltu	r2,r22,r4
 400a6c8:	a187c83a 	sub	r3,r20,r6
 400a6cc:	18a9c83a 	sub	r20,r3,r2
 400a6d0:	202d883a 	mov	r22,r4
 400a6d4:	003fa906 	br	400a57c <__umoddi3+0x174>
 400a6d8:	85e0983a 	sll	r16,r16,r23
 400a6dc:	35c5c83a 	sub	r2,r6,r23
 400a6e0:	a0a2d83a 	srl	r17,r20,r2
 400a6e4:	802ad43a 	srli	r21,r16,16
 400a6e8:	b084d83a 	srl	r2,r22,r2
 400a6ec:	a5c6983a 	sll	r3,r20,r23
 400a6f0:	8809883a 	mov	r4,r17
 400a6f4:	a80b883a 	mov	r5,r21
 400a6f8:	1886b03a 	or	r3,r3,r2
 400a6fc:	d8c00115 	stw	r3,4(sp)
 400a700:	853fffcc 	andi	r20,r16,65535
 400a704:	400bc200 	call	400bc20 <__udivsi3>
 400a708:	8809883a 	mov	r4,r17
 400a70c:	a80b883a 	mov	r5,r21
 400a710:	a0a3383a 	mul	r17,r20,r2
 400a714:	400bc280 	call	400bc28 <__umodsi3>
 400a718:	d9000117 	ldw	r4,4(sp)
 400a71c:	1004943a 	slli	r2,r2,16
 400a720:	b839883a 	mov	fp,r23
 400a724:	2006d43a 	srli	r3,r4,16
 400a728:	10c4b03a 	or	r2,r2,r3
 400a72c:	1440022e 	bgeu	r2,r17,400a738 <__umoddi3+0x330>
 400a730:	1405883a 	add	r2,r2,r16
 400a734:	1400962e 	bgeu	r2,r16,400a990 <__umoddi3+0x588>
 400a738:	1463c83a 	sub	r17,r2,r17
 400a73c:	8809883a 	mov	r4,r17
 400a740:	a80b883a 	mov	r5,r21
 400a744:	400bc200 	call	400bc20 <__udivsi3>
 400a748:	8809883a 	mov	r4,r17
 400a74c:	a80b883a 	mov	r5,r21
 400a750:	a0a3383a 	mul	r17,r20,r2
 400a754:	400bc280 	call	400bc28 <__umodsi3>
 400a758:	d9400117 	ldw	r5,4(sp)
 400a75c:	1004943a 	slli	r2,r2,16
 400a760:	28ffffcc 	andi	r3,r5,65535
 400a764:	10c4b03a 	or	r2,r2,r3
 400a768:	1440042e 	bgeu	r2,r17,400a77c <__umoddi3+0x374>
 400a76c:	1405883a 	add	r2,r2,r16
 400a770:	14000236 	bltu	r2,r16,400a77c <__umoddi3+0x374>
 400a774:	1440012e 	bgeu	r2,r17,400a77c <__umoddi3+0x374>
 400a778:	1405883a 	add	r2,r2,r16
 400a77c:	b5ec983a 	sll	r22,r22,r23
 400a780:	1463c83a 	sub	r17,r2,r17
 400a784:	003f4406 	br	400a498 <__umoddi3+0x90>
 400a788:	3d4fc83a 	sub	r7,r7,r21
 400a78c:	3546983a 	sll	r3,r6,r21
 400a790:	81c4d83a 	srl	r2,r16,r7
 400a794:	a1e2d83a 	srl	r17,r20,r7
 400a798:	a54c983a 	sll	r6,r20,r21
 400a79c:	18aeb03a 	or	r23,r3,r2
 400a7a0:	b828d43a 	srli	r20,r23,16
 400a7a4:	b1c4d83a 	srl	r2,r22,r7
 400a7a8:	8809883a 	mov	r4,r17
 400a7ac:	a00b883a 	mov	r5,r20
 400a7b0:	308cb03a 	or	r6,r6,r2
 400a7b4:	d9c00315 	stw	r7,12(sp)
 400a7b8:	d9800215 	stw	r6,8(sp)
 400a7bc:	400bc200 	call	400bc20 <__udivsi3>
 400a7c0:	8809883a 	mov	r4,r17
 400a7c4:	a00b883a 	mov	r5,r20
 400a7c8:	1039883a 	mov	fp,r2
 400a7cc:	400bc280 	call	400bc28 <__umodsi3>
 400a7d0:	b8ffffcc 	andi	r3,r23,65535
 400a7d4:	d8c00415 	stw	r3,16(sp)
 400a7d8:	d9000217 	ldw	r4,8(sp)
 400a7dc:	d9400417 	ldw	r5,16(sp)
 400a7e0:	1004943a 	slli	r2,r2,16
 400a7e4:	2006d43a 	srli	r3,r4,16
 400a7e8:	8560983a 	sll	r16,r16,r21
 400a7ec:	2f23383a 	mul	r17,r5,fp
 400a7f0:	10c4b03a 	or	r2,r2,r3
 400a7f4:	dc000015 	stw	r16,0(sp)
 400a7f8:	b56c983a 	sll	r22,r22,r21
 400a7fc:	1440032e 	bgeu	r2,r17,400a80c <__umoddi3+0x404>
 400a800:	15c5883a 	add	r2,r2,r23
 400a804:	e73fffc4 	addi	fp,fp,-1
 400a808:	15c05d2e 	bgeu	r2,r23,400a980 <__umoddi3+0x578>
 400a80c:	1463c83a 	sub	r17,r2,r17
 400a810:	8809883a 	mov	r4,r17
 400a814:	a00b883a 	mov	r5,r20
 400a818:	400bc200 	call	400bc20 <__udivsi3>
 400a81c:	8809883a 	mov	r4,r17
 400a820:	a00b883a 	mov	r5,r20
 400a824:	1021883a 	mov	r16,r2
 400a828:	400bc280 	call	400bc28 <__umodsi3>
 400a82c:	d8c00417 	ldw	r3,16(sp)
 400a830:	d9000217 	ldw	r4,8(sp)
 400a834:	1004943a 	slli	r2,r2,16
 400a838:	1c23383a 	mul	r17,r3,r16
 400a83c:	20ffffcc 	andi	r3,r4,65535
 400a840:	10ceb03a 	or	r7,r2,r3
 400a844:	3c40032e 	bgeu	r7,r17,400a854 <__umoddi3+0x44c>
 400a848:	3dcf883a 	add	r7,r7,r23
 400a84c:	843fffc4 	addi	r16,r16,-1
 400a850:	3dc0472e 	bgeu	r7,r23,400a970 <__umoddi3+0x568>
 400a854:	e004943a 	slli	r2,fp,16
 400a858:	d9400017 	ldw	r5,0(sp)
 400a85c:	3c4fc83a 	sub	r7,r7,r17
 400a860:	8084b03a 	or	r2,r16,r2
 400a864:	28ffffcc 	andi	r3,r5,65535
 400a868:	280cd43a 	srli	r6,r5,16
 400a86c:	100ad43a 	srli	r5,r2,16
 400a870:	10bfffcc 	andi	r2,r2,65535
 400a874:	10d1383a 	mul	r8,r2,r3
 400a878:	28c7383a 	mul	r3,r5,r3
 400a87c:	1185383a 	mul	r2,r2,r6
 400a880:	4008d43a 	srli	r4,r8,16
 400a884:	298b383a 	mul	r5,r5,r6
 400a888:	10c5883a 	add	r2,r2,r3
 400a88c:	2089883a 	add	r4,r4,r2
 400a890:	20c0022e 	bgeu	r4,r3,400a89c <__umoddi3+0x494>
 400a894:	00800074 	movhi	r2,1
 400a898:	288b883a 	add	r5,r5,r2
 400a89c:	2004d43a 	srli	r2,r4,16
 400a8a0:	2008943a 	slli	r4,r4,16
 400a8a4:	40ffffcc 	andi	r3,r8,65535
 400a8a8:	288b883a 	add	r5,r5,r2
 400a8ac:	20c9883a 	add	r4,r4,r3
 400a8b0:	39400b36 	bltu	r7,r5,400a8e0 <__umoddi3+0x4d8>
 400a8b4:	39403d26 	beq	r7,r5,400a9ac <__umoddi3+0x5a4>
 400a8b8:	394bc83a 	sub	r5,r7,r5
 400a8bc:	00000f06 	br	400a8fc <__umoddi3+0x4f4>
 400a8c0:	30c5c83a 	sub	r2,r6,r3
 400a8c4:	1839883a 	mov	fp,r3
 400a8c8:	b084d83a 	srl	r2,r22,r2
 400a8cc:	a0c6983a 	sll	r3,r20,r3
 400a8d0:	8720983a 	sll	r16,r16,fp
 400a8d4:	b72c983a 	sll	r22,r22,fp
 400a8d8:	18a8b03a 	or	r20,r3,r2
 400a8dc:	003f3a06 	br	400a5c8 <__umoddi3+0x1c0>
 400a8e0:	d8c00017 	ldw	r3,0(sp)
 400a8e4:	20c5c83a 	sub	r2,r4,r3
 400a8e8:	2089803a 	cmpltu	r4,r4,r2
 400a8ec:	2dc7c83a 	sub	r3,r5,r23
 400a8f0:	1907c83a 	sub	r3,r3,r4
 400a8f4:	38cbc83a 	sub	r5,r7,r3
 400a8f8:	1009883a 	mov	r4,r2
 400a8fc:	b105c83a 	sub	r2,r22,r4
 400a900:	b087803a 	cmpltu	r3,r22,r2
 400a904:	28c7c83a 	sub	r3,r5,r3
 400a908:	d9400317 	ldw	r5,12(sp)
 400a90c:	1544d83a 	srl	r2,r2,r21
 400a910:	1948983a 	sll	r4,r3,r5
 400a914:	1d46d83a 	srl	r3,r3,r21
 400a918:	20a4b03a 	or	r18,r4,r2
 400a91c:	9011883a 	mov	r8,r18
 400a920:	1813883a 	mov	r9,r3
 400a924:	003ef606 	br	400a500 <__umoddi3+0xf8>
 400a928:	01400604 	movi	r5,24
 400a92c:	2805883a 	mov	r2,r5
 400a930:	003ecc06 	br	400a464 <__umoddi3+0x5c>
 400a934:	01400204 	movi	r5,8
 400a938:	2805883a 	mov	r2,r5
 400a93c:	003ec906 	br	400a464 <__umoddi3+0x5c>
 400a940:	01400204 	movi	r5,8
 400a944:	2805883a 	mov	r2,r5
 400a948:	003f0106 	br	400a550 <__umoddi3+0x148>
 400a94c:	01400204 	movi	r5,8
 400a950:	2805883a 	mov	r2,r5
 400a954:	003f1206 	br	400a5a0 <__umoddi3+0x198>
 400a958:	01400604 	movi	r5,24
 400a95c:	2805883a 	mov	r2,r5
 400a960:	003f0f06 	br	400a5a0 <__umoddi3+0x198>
 400a964:	01400604 	movi	r5,24
 400a968:	2805883a 	mov	r2,r5
 400a96c:	003ef806 	br	400a550 <__umoddi3+0x148>
 400a970:	3c7fb82e 	bgeu	r7,r17,400a854 <__umoddi3+0x44c>
 400a974:	843fffc4 	addi	r16,r16,-1
 400a978:	3dcf883a 	add	r7,r7,r23
 400a97c:	003fb506 	br	400a854 <__umoddi3+0x44c>
 400a980:	147fa22e 	bgeu	r2,r17,400a80c <__umoddi3+0x404>
 400a984:	e73fffc4 	addi	fp,fp,-1
 400a988:	15c5883a 	add	r2,r2,r23
 400a98c:	003f9f06 	br	400a80c <__umoddi3+0x404>
 400a990:	147f692e 	bgeu	r2,r17,400a738 <__umoddi3+0x330>
 400a994:	1405883a 	add	r2,r2,r16
 400a998:	003f6706 	br	400a738 <__umoddi3+0x330>
 400a99c:	1405883a 	add	r2,r2,r16
 400a9a0:	003f1906 	br	400a608 <__umoddi3+0x200>
 400a9a4:	1405883a 	add	r2,r2,r16
 400a9a8:	003ec906 	br	400a4d0 <__umoddi3+0xc8>
 400a9ac:	b13fcc36 	bltu	r22,r4,400a8e0 <__umoddi3+0x4d8>
 400a9b0:	000b883a 	mov	r5,zero
 400a9b4:	003fd106 	br	400a8fc <__umoddi3+0x4f4>

0400a9b8 <_fpadd_parts>:
 400a9b8:	defff804 	addi	sp,sp,-32
 400a9bc:	dcc00315 	stw	r19,12(sp)
 400a9c0:	2027883a 	mov	r19,r4
 400a9c4:	21000017 	ldw	r4,0(r4)
 400a9c8:	00c00044 	movi	r3,1
 400a9cc:	dd400515 	stw	r21,20(sp)
 400a9d0:	dd000415 	stw	r20,16(sp)
 400a9d4:	ddc00715 	stw	r23,28(sp)
 400a9d8:	dd800615 	stw	r22,24(sp)
 400a9dc:	dc800215 	stw	r18,8(sp)
 400a9e0:	dc400115 	stw	r17,4(sp)
 400a9e4:	dc000015 	stw	r16,0(sp)
 400a9e8:	282b883a 	mov	r21,r5
 400a9ec:	3029883a 	mov	r20,r6
 400a9f0:	1900632e 	bgeu	r3,r4,400ab80 <_fpadd_parts+0x1c8>
 400a9f4:	28800017 	ldw	r2,0(r5)
 400a9f8:	1880812e 	bgeu	r3,r2,400ac00 <_fpadd_parts+0x248>
 400a9fc:	00c00104 	movi	r3,4
 400aa00:	20c0dc26 	beq	r4,r3,400ad74 <_fpadd_parts+0x3bc>
 400aa04:	10c07e26 	beq	r2,r3,400ac00 <_fpadd_parts+0x248>
 400aa08:	00c00084 	movi	r3,2
 400aa0c:	10c06726 	beq	r2,r3,400abac <_fpadd_parts+0x1f4>
 400aa10:	20c07b26 	beq	r4,r3,400ac00 <_fpadd_parts+0x248>
 400aa14:	9dc00217 	ldw	r23,8(r19)
 400aa18:	28c00217 	ldw	r3,8(r5)
 400aa1c:	9c400317 	ldw	r17,12(r19)
 400aa20:	2bc00317 	ldw	r15,12(r5)
 400aa24:	b8cdc83a 	sub	r6,r23,r3
 400aa28:	9c800417 	ldw	r18,16(r19)
 400aa2c:	2c000417 	ldw	r16,16(r5)
 400aa30:	3009883a 	mov	r4,r6
 400aa34:	30009716 	blt	r6,zero,400ac94 <_fpadd_parts+0x2dc>
 400aa38:	00800fc4 	movi	r2,63
 400aa3c:	11806b16 	blt	r2,r6,400abec <_fpadd_parts+0x234>
 400aa40:	0100a40e 	bge	zero,r4,400acd4 <_fpadd_parts+0x31c>
 400aa44:	35bff804 	addi	r22,r6,-32
 400aa48:	b000bc16 	blt	r22,zero,400ad3c <_fpadd_parts+0x384>
 400aa4c:	8596d83a 	srl	r11,r16,r22
 400aa50:	0019883a 	mov	r12,zero
 400aa54:	0013883a 	mov	r9,zero
 400aa58:	01000044 	movi	r4,1
 400aa5c:	0015883a 	mov	r10,zero
 400aa60:	b000be16 	blt	r22,zero,400ad5c <_fpadd_parts+0x3a4>
 400aa64:	2590983a 	sll	r8,r4,r22
 400aa68:	000f883a 	mov	r7,zero
 400aa6c:	00bfffc4 	movi	r2,-1
 400aa70:	3889883a 	add	r4,r7,r2
 400aa74:	408b883a 	add	r5,r8,r2
 400aa78:	21cd803a 	cmpltu	r6,r4,r7
 400aa7c:	314b883a 	add	r5,r6,r5
 400aa80:	7904703a 	and	r2,r15,r4
 400aa84:	8146703a 	and	r3,r16,r5
 400aa88:	10c4b03a 	or	r2,r2,r3
 400aa8c:	10000226 	beq	r2,zero,400aa98 <_fpadd_parts+0xe0>
 400aa90:	02400044 	movi	r9,1
 400aa94:	0015883a 	mov	r10,zero
 400aa98:	5a5eb03a 	or	r15,r11,r9
 400aa9c:	62a0b03a 	or	r16,r12,r10
 400aaa0:	99400117 	ldw	r5,4(r19)
 400aaa4:	a8800117 	ldw	r2,4(r21)
 400aaa8:	28806e26 	beq	r5,r2,400ac64 <_fpadd_parts+0x2ac>
 400aaac:	28006626 	beq	r5,zero,400ac48 <_fpadd_parts+0x290>
 400aab0:	7c45c83a 	sub	r2,r15,r17
 400aab4:	7889803a 	cmpltu	r4,r15,r2
 400aab8:	8487c83a 	sub	r3,r16,r18
 400aabc:	1909c83a 	sub	r4,r3,r4
 400aac0:	100d883a 	mov	r6,r2
 400aac4:	200f883a 	mov	r7,r4
 400aac8:	38007716 	blt	r7,zero,400aca8 <_fpadd_parts+0x2f0>
 400aacc:	a5c00215 	stw	r23,8(r20)
 400aad0:	a1c00415 	stw	r7,16(r20)
 400aad4:	a0000115 	stw	zero,4(r20)
 400aad8:	a1800315 	stw	r6,12(r20)
 400aadc:	a2000317 	ldw	r8,12(r20)
 400aae0:	a2400417 	ldw	r9,16(r20)
 400aae4:	00bfffc4 	movi	r2,-1
 400aae8:	408b883a 	add	r5,r8,r2
 400aaec:	2a09803a 	cmpltu	r4,r5,r8
 400aaf0:	488d883a 	add	r6,r9,r2
 400aaf4:	01c40034 	movhi	r7,4096
 400aaf8:	39ffffc4 	addi	r7,r7,-1
 400aafc:	218d883a 	add	r6,r4,r6
 400ab00:	39801736 	bltu	r7,r6,400ab60 <_fpadd_parts+0x1a8>
 400ab04:	31c06526 	beq	r6,r7,400ac9c <_fpadd_parts+0x2e4>
 400ab08:	a3000217 	ldw	r12,8(r20)
 400ab0c:	4209883a 	add	r4,r8,r8
 400ab10:	00bfffc4 	movi	r2,-1
 400ab14:	220f803a 	cmpltu	r7,r4,r8
 400ab18:	4a4b883a 	add	r5,r9,r9
 400ab1c:	394f883a 	add	r7,r7,r5
 400ab20:	2095883a 	add	r10,r4,r2
 400ab24:	3897883a 	add	r11,r7,r2
 400ab28:	510d803a 	cmpltu	r6,r10,r4
 400ab2c:	6099883a 	add	r12,r12,r2
 400ab30:	32d7883a 	add	r11,r6,r11
 400ab34:	00840034 	movhi	r2,4096
 400ab38:	10bfffc4 	addi	r2,r2,-1
 400ab3c:	2011883a 	mov	r8,r4
 400ab40:	3813883a 	mov	r9,r7
 400ab44:	a1000315 	stw	r4,12(r20)
 400ab48:	a1c00415 	stw	r7,16(r20)
 400ab4c:	a3000215 	stw	r12,8(r20)
 400ab50:	12c00336 	bltu	r2,r11,400ab60 <_fpadd_parts+0x1a8>
 400ab54:	58bfed1e 	bne	r11,r2,400ab0c <_fpadd_parts+0x154>
 400ab58:	00bfff84 	movi	r2,-2
 400ab5c:	12bfeb2e 	bgeu	r2,r10,400ab0c <_fpadd_parts+0x154>
 400ab60:	a2800417 	ldw	r10,16(r20)
 400ab64:	008000c4 	movi	r2,3
 400ab68:	00c80034 	movhi	r3,8192
 400ab6c:	18ffffc4 	addi	r3,r3,-1
 400ab70:	a2400317 	ldw	r9,12(r20)
 400ab74:	a0800015 	stw	r2,0(r20)
 400ab78:	1a802336 	bltu	r3,r10,400ac08 <_fpadd_parts+0x250>
 400ab7c:	a027883a 	mov	r19,r20
 400ab80:	9805883a 	mov	r2,r19
 400ab84:	ddc00717 	ldw	r23,28(sp)
 400ab88:	dd800617 	ldw	r22,24(sp)
 400ab8c:	dd400517 	ldw	r21,20(sp)
 400ab90:	dd000417 	ldw	r20,16(sp)
 400ab94:	dcc00317 	ldw	r19,12(sp)
 400ab98:	dc800217 	ldw	r18,8(sp)
 400ab9c:	dc400117 	ldw	r17,4(sp)
 400aba0:	dc000017 	ldw	r16,0(sp)
 400aba4:	dec00804 	addi	sp,sp,32
 400aba8:	f800283a 	ret
 400abac:	20fff41e 	bne	r4,r3,400ab80 <_fpadd_parts+0x1c8>
 400abb0:	31000015 	stw	r4,0(r6)
 400abb4:	98800117 	ldw	r2,4(r19)
 400abb8:	30800115 	stw	r2,4(r6)
 400abbc:	98c00217 	ldw	r3,8(r19)
 400abc0:	30c00215 	stw	r3,8(r6)
 400abc4:	98800317 	ldw	r2,12(r19)
 400abc8:	30800315 	stw	r2,12(r6)
 400abcc:	98c00417 	ldw	r3,16(r19)
 400abd0:	30c00415 	stw	r3,16(r6)
 400abd4:	98800117 	ldw	r2,4(r19)
 400abd8:	28c00117 	ldw	r3,4(r5)
 400abdc:	3027883a 	mov	r19,r6
 400abe0:	10c4703a 	and	r2,r2,r3
 400abe4:	30800115 	stw	r2,4(r6)
 400abe8:	003fe506 	br	400ab80 <_fpadd_parts+0x1c8>
 400abec:	1dc02616 	blt	r3,r23,400ac88 <_fpadd_parts+0x2d0>
 400abf0:	0023883a 	mov	r17,zero
 400abf4:	182f883a 	mov	r23,r3
 400abf8:	0025883a 	mov	r18,zero
 400abfc:	003fa806 	br	400aaa0 <_fpadd_parts+0xe8>
 400ac00:	a827883a 	mov	r19,r21
 400ac04:	003fde06 	br	400ab80 <_fpadd_parts+0x1c8>
 400ac08:	01800044 	movi	r6,1
 400ac0c:	500497fa 	slli	r2,r10,31
 400ac10:	4808d07a 	srli	r4,r9,1
 400ac14:	518ad83a 	srl	r5,r10,r6
 400ac18:	a2000217 	ldw	r8,8(r20)
 400ac1c:	1108b03a 	or	r4,r2,r4
 400ac20:	0007883a 	mov	r3,zero
 400ac24:	4984703a 	and	r2,r9,r6
 400ac28:	208cb03a 	or	r6,r4,r2
 400ac2c:	28ceb03a 	or	r7,r5,r3
 400ac30:	42000044 	addi	r8,r8,1
 400ac34:	a027883a 	mov	r19,r20
 400ac38:	a1c00415 	stw	r7,16(r20)
 400ac3c:	a2000215 	stw	r8,8(r20)
 400ac40:	a1800315 	stw	r6,12(r20)
 400ac44:	003fce06 	br	400ab80 <_fpadd_parts+0x1c8>
 400ac48:	8bc5c83a 	sub	r2,r17,r15
 400ac4c:	8889803a 	cmpltu	r4,r17,r2
 400ac50:	9407c83a 	sub	r3,r18,r16
 400ac54:	1909c83a 	sub	r4,r3,r4
 400ac58:	100d883a 	mov	r6,r2
 400ac5c:	200f883a 	mov	r7,r4
 400ac60:	003f9906 	br	400aac8 <_fpadd_parts+0x110>
 400ac64:	8bc5883a 	add	r2,r17,r15
 400ac68:	1449803a 	cmpltu	r4,r2,r17
 400ac6c:	9407883a 	add	r3,r18,r16
 400ac70:	20c9883a 	add	r4,r4,r3
 400ac74:	a1400115 	stw	r5,4(r20)
 400ac78:	a5c00215 	stw	r23,8(r20)
 400ac7c:	a0800315 	stw	r2,12(r20)
 400ac80:	a1000415 	stw	r4,16(r20)
 400ac84:	003fb606 	br	400ab60 <_fpadd_parts+0x1a8>
 400ac88:	001f883a 	mov	r15,zero
 400ac8c:	0021883a 	mov	r16,zero
 400ac90:	003f8306 	br	400aaa0 <_fpadd_parts+0xe8>
 400ac94:	018dc83a 	sub	r6,zero,r6
 400ac98:	003f6706 	br	400aa38 <_fpadd_parts+0x80>
 400ac9c:	00bfff84 	movi	r2,-2
 400aca0:	117faf36 	bltu	r2,r5,400ab60 <_fpadd_parts+0x1a8>
 400aca4:	003f9806 	br	400ab08 <_fpadd_parts+0x150>
 400aca8:	0005883a 	mov	r2,zero
 400acac:	1189c83a 	sub	r4,r2,r6
 400acb0:	1105803a 	cmpltu	r2,r2,r4
 400acb4:	01cbc83a 	sub	r5,zero,r7
 400acb8:	2885c83a 	sub	r2,r5,r2
 400acbc:	01800044 	movi	r6,1
 400acc0:	a1800115 	stw	r6,4(r20)
 400acc4:	a5c00215 	stw	r23,8(r20)
 400acc8:	a1000315 	stw	r4,12(r20)
 400accc:	a0800415 	stw	r2,16(r20)
 400acd0:	003f8206 	br	400aadc <_fpadd_parts+0x124>
 400acd4:	203f7226 	beq	r4,zero,400aaa0 <_fpadd_parts+0xe8>
 400acd8:	35bff804 	addi	r22,r6,-32
 400acdc:	b9af883a 	add	r23,r23,r6
 400ace0:	b0003116 	blt	r22,zero,400ada8 <_fpadd_parts+0x3f0>
 400ace4:	959ad83a 	srl	r13,r18,r22
 400ace8:	001d883a 	mov	r14,zero
 400acec:	000f883a 	mov	r7,zero
 400acf0:	01000044 	movi	r4,1
 400acf4:	0011883a 	mov	r8,zero
 400acf8:	b0002516 	blt	r22,zero,400ad90 <_fpadd_parts+0x3d8>
 400acfc:	2594983a 	sll	r10,r4,r22
 400ad00:	0013883a 	mov	r9,zero
 400ad04:	00bfffc4 	movi	r2,-1
 400ad08:	4889883a 	add	r4,r9,r2
 400ad0c:	508b883a 	add	r5,r10,r2
 400ad10:	224d803a 	cmpltu	r6,r4,r9
 400ad14:	314b883a 	add	r5,r6,r5
 400ad18:	8904703a 	and	r2,r17,r4
 400ad1c:	9146703a 	and	r3,r18,r5
 400ad20:	10c4b03a 	or	r2,r2,r3
 400ad24:	10000226 	beq	r2,zero,400ad30 <_fpadd_parts+0x378>
 400ad28:	01c00044 	movi	r7,1
 400ad2c:	0011883a 	mov	r8,zero
 400ad30:	69e2b03a 	or	r17,r13,r7
 400ad34:	7224b03a 	or	r18,r14,r8
 400ad38:	003f5906 	br	400aaa0 <_fpadd_parts+0xe8>
 400ad3c:	8407883a 	add	r3,r16,r16
 400ad40:	008007c4 	movi	r2,31
 400ad44:	1185c83a 	sub	r2,r2,r6
 400ad48:	1886983a 	sll	r3,r3,r2
 400ad4c:	7996d83a 	srl	r11,r15,r6
 400ad50:	8198d83a 	srl	r12,r16,r6
 400ad54:	1ad6b03a 	or	r11,r3,r11
 400ad58:	003f3e06 	br	400aa54 <_fpadd_parts+0x9c>
 400ad5c:	2006d07a 	srli	r3,r4,1
 400ad60:	008007c4 	movi	r2,31
 400ad64:	1185c83a 	sub	r2,r2,r6
 400ad68:	1890d83a 	srl	r8,r3,r2
 400ad6c:	218e983a 	sll	r7,r4,r6
 400ad70:	003f3e06 	br	400aa6c <_fpadd_parts+0xb4>
 400ad74:	113f821e 	bne	r2,r4,400ab80 <_fpadd_parts+0x1c8>
 400ad78:	28c00117 	ldw	r3,4(r5)
 400ad7c:	98800117 	ldw	r2,4(r19)
 400ad80:	10ff7f26 	beq	r2,r3,400ab80 <_fpadd_parts+0x1c8>
 400ad84:	04c10174 	movhi	r19,1029
 400ad88:	9ce1d604 	addi	r19,r19,-30888
 400ad8c:	003f7c06 	br	400ab80 <_fpadd_parts+0x1c8>
 400ad90:	2006d07a 	srli	r3,r4,1
 400ad94:	008007c4 	movi	r2,31
 400ad98:	1185c83a 	sub	r2,r2,r6
 400ad9c:	1894d83a 	srl	r10,r3,r2
 400ada0:	2192983a 	sll	r9,r4,r6
 400ada4:	003fd706 	br	400ad04 <_fpadd_parts+0x34c>
 400ada8:	9487883a 	add	r3,r18,r18
 400adac:	008007c4 	movi	r2,31
 400adb0:	1185c83a 	sub	r2,r2,r6
 400adb4:	1886983a 	sll	r3,r3,r2
 400adb8:	899ad83a 	srl	r13,r17,r6
 400adbc:	919cd83a 	srl	r14,r18,r6
 400adc0:	1b5ab03a 	or	r13,r3,r13
 400adc4:	003fc906 	br	400acec <_fpadd_parts+0x334>

0400adc8 <__subdf3>:
 400adc8:	deffea04 	addi	sp,sp,-88
 400adcc:	dcc01415 	stw	r19,80(sp)
 400add0:	dcc00404 	addi	r19,sp,16
 400add4:	2011883a 	mov	r8,r4
 400add8:	2813883a 	mov	r9,r5
 400addc:	dc401315 	stw	r17,76(sp)
 400ade0:	d809883a 	mov	r4,sp
 400ade4:	980b883a 	mov	r5,r19
 400ade8:	dc400904 	addi	r17,sp,36
 400adec:	dfc01515 	stw	ra,84(sp)
 400adf0:	da400115 	stw	r9,4(sp)
 400adf4:	d9c00315 	stw	r7,12(sp)
 400adf8:	da000015 	stw	r8,0(sp)
 400adfc:	d9800215 	stw	r6,8(sp)
 400ae00:	400c05c0 	call	400c05c <__unpack_d>
 400ae04:	d9000204 	addi	r4,sp,8
 400ae08:	880b883a 	mov	r5,r17
 400ae0c:	400c05c0 	call	400c05c <__unpack_d>
 400ae10:	d8800a17 	ldw	r2,40(sp)
 400ae14:	880b883a 	mov	r5,r17
 400ae18:	9809883a 	mov	r4,r19
 400ae1c:	d9800e04 	addi	r6,sp,56
 400ae20:	1080005c 	xori	r2,r2,1
 400ae24:	d8800a15 	stw	r2,40(sp)
 400ae28:	400a9b80 	call	400a9b8 <_fpadd_parts>
 400ae2c:	1009883a 	mov	r4,r2
 400ae30:	400bd480 	call	400bd48 <__pack_d>
 400ae34:	dfc01517 	ldw	ra,84(sp)
 400ae38:	dcc01417 	ldw	r19,80(sp)
 400ae3c:	dc401317 	ldw	r17,76(sp)
 400ae40:	dec01604 	addi	sp,sp,88
 400ae44:	f800283a 	ret

0400ae48 <__adddf3>:
 400ae48:	deffea04 	addi	sp,sp,-88
 400ae4c:	dcc01415 	stw	r19,80(sp)
 400ae50:	dcc00404 	addi	r19,sp,16
 400ae54:	2011883a 	mov	r8,r4
 400ae58:	2813883a 	mov	r9,r5
 400ae5c:	dc401315 	stw	r17,76(sp)
 400ae60:	d809883a 	mov	r4,sp
 400ae64:	980b883a 	mov	r5,r19
 400ae68:	dc400904 	addi	r17,sp,36
 400ae6c:	dfc01515 	stw	ra,84(sp)
 400ae70:	da400115 	stw	r9,4(sp)
 400ae74:	d9c00315 	stw	r7,12(sp)
 400ae78:	da000015 	stw	r8,0(sp)
 400ae7c:	d9800215 	stw	r6,8(sp)
 400ae80:	400c05c0 	call	400c05c <__unpack_d>
 400ae84:	d9000204 	addi	r4,sp,8
 400ae88:	880b883a 	mov	r5,r17
 400ae8c:	400c05c0 	call	400c05c <__unpack_d>
 400ae90:	d9800e04 	addi	r6,sp,56
 400ae94:	9809883a 	mov	r4,r19
 400ae98:	880b883a 	mov	r5,r17
 400ae9c:	400a9b80 	call	400a9b8 <_fpadd_parts>
 400aea0:	1009883a 	mov	r4,r2
 400aea4:	400bd480 	call	400bd48 <__pack_d>
 400aea8:	dfc01517 	ldw	ra,84(sp)
 400aeac:	dcc01417 	ldw	r19,80(sp)
 400aeb0:	dc401317 	ldw	r17,76(sp)
 400aeb4:	dec01604 	addi	sp,sp,88
 400aeb8:	f800283a 	ret

0400aebc <__muldf3>:
 400aebc:	deffe004 	addi	sp,sp,-128
 400aec0:	dc401815 	stw	r17,96(sp)
 400aec4:	dc400404 	addi	r17,sp,16
 400aec8:	2011883a 	mov	r8,r4
 400aecc:	2813883a 	mov	r9,r5
 400aed0:	dc001715 	stw	r16,92(sp)
 400aed4:	d809883a 	mov	r4,sp
 400aed8:	880b883a 	mov	r5,r17
 400aedc:	dc000904 	addi	r16,sp,36
 400aee0:	dfc01f15 	stw	ra,124(sp)
 400aee4:	da400115 	stw	r9,4(sp)
 400aee8:	d9c00315 	stw	r7,12(sp)
 400aeec:	da000015 	stw	r8,0(sp)
 400aef0:	d9800215 	stw	r6,8(sp)
 400aef4:	ddc01e15 	stw	r23,120(sp)
 400aef8:	dd801d15 	stw	r22,116(sp)
 400aefc:	dd401c15 	stw	r21,112(sp)
 400af00:	dd001b15 	stw	r20,108(sp)
 400af04:	dcc01a15 	stw	r19,104(sp)
 400af08:	dc801915 	stw	r18,100(sp)
 400af0c:	400c05c0 	call	400c05c <__unpack_d>
 400af10:	d9000204 	addi	r4,sp,8
 400af14:	800b883a 	mov	r5,r16
 400af18:	400c05c0 	call	400c05c <__unpack_d>
 400af1c:	d9000417 	ldw	r4,16(sp)
 400af20:	00800044 	movi	r2,1
 400af24:	1100102e 	bgeu	r2,r4,400af68 <__muldf3+0xac>
 400af28:	d8c00917 	ldw	r3,36(sp)
 400af2c:	10c0062e 	bgeu	r2,r3,400af48 <__muldf3+0x8c>
 400af30:	00800104 	movi	r2,4
 400af34:	20800a26 	beq	r4,r2,400af60 <__muldf3+0xa4>
 400af38:	1880cc26 	beq	r3,r2,400b26c <__muldf3+0x3b0>
 400af3c:	00800084 	movi	r2,2
 400af40:	20800926 	beq	r4,r2,400af68 <__muldf3+0xac>
 400af44:	1880191e 	bne	r3,r2,400afac <__muldf3+0xf0>
 400af48:	d8c00a17 	ldw	r3,40(sp)
 400af4c:	d8800517 	ldw	r2,20(sp)
 400af50:	8009883a 	mov	r4,r16
 400af54:	10c4c03a 	cmpne	r2,r2,r3
 400af58:	d8800a15 	stw	r2,40(sp)
 400af5c:	00000706 	br	400af7c <__muldf3+0xc0>
 400af60:	00800084 	movi	r2,2
 400af64:	1880c326 	beq	r3,r2,400b274 <__muldf3+0x3b8>
 400af68:	d8800517 	ldw	r2,20(sp)
 400af6c:	d8c00a17 	ldw	r3,40(sp)
 400af70:	8809883a 	mov	r4,r17
 400af74:	10c4c03a 	cmpne	r2,r2,r3
 400af78:	d8800515 	stw	r2,20(sp)
 400af7c:	400bd480 	call	400bd48 <__pack_d>
 400af80:	dfc01f17 	ldw	ra,124(sp)
 400af84:	ddc01e17 	ldw	r23,120(sp)
 400af88:	dd801d17 	ldw	r22,116(sp)
 400af8c:	dd401c17 	ldw	r21,112(sp)
 400af90:	dd001b17 	ldw	r20,108(sp)
 400af94:	dcc01a17 	ldw	r19,104(sp)
 400af98:	dc801917 	ldw	r18,100(sp)
 400af9c:	dc401817 	ldw	r17,96(sp)
 400afa0:	dc001717 	ldw	r16,92(sp)
 400afa4:	dec02004 	addi	sp,sp,128
 400afa8:	f800283a 	ret
 400afac:	dd800717 	ldw	r22,28(sp)
 400afb0:	dc800c17 	ldw	r18,48(sp)
 400afb4:	002b883a 	mov	r21,zero
 400afb8:	0023883a 	mov	r17,zero
 400afbc:	a80b883a 	mov	r5,r21
 400afc0:	b00d883a 	mov	r6,r22
 400afc4:	880f883a 	mov	r7,r17
 400afc8:	ddc00817 	ldw	r23,32(sp)
 400afcc:	dcc00d17 	ldw	r19,52(sp)
 400afd0:	9009883a 	mov	r4,r18
 400afd4:	400bc300 	call	400bc30 <__muldi3>
 400afd8:	001b883a 	mov	r13,zero
 400afdc:	680f883a 	mov	r7,r13
 400afe0:	b009883a 	mov	r4,r22
 400afe4:	000b883a 	mov	r5,zero
 400afe8:	980d883a 	mov	r6,r19
 400afec:	b82d883a 	mov	r22,r23
 400aff0:	002f883a 	mov	r23,zero
 400aff4:	db401615 	stw	r13,88(sp)
 400aff8:	d8801315 	stw	r2,76(sp)
 400affc:	d8c01415 	stw	r3,80(sp)
 400b000:	dcc01515 	stw	r19,84(sp)
 400b004:	400bc300 	call	400bc30 <__muldi3>
 400b008:	b00d883a 	mov	r6,r22
 400b00c:	000b883a 	mov	r5,zero
 400b010:	9009883a 	mov	r4,r18
 400b014:	b80f883a 	mov	r7,r23
 400b018:	1021883a 	mov	r16,r2
 400b01c:	1823883a 	mov	r17,r3
 400b020:	400bc300 	call	400bc30 <__muldi3>
 400b024:	8085883a 	add	r2,r16,r2
 400b028:	140d803a 	cmpltu	r6,r2,r16
 400b02c:	88c7883a 	add	r3,r17,r3
 400b030:	30cd883a 	add	r6,r6,r3
 400b034:	1029883a 	mov	r20,r2
 400b038:	302b883a 	mov	r21,r6
 400b03c:	da801317 	ldw	r10,76(sp)
 400b040:	dac01417 	ldw	r11,80(sp)
 400b044:	db001517 	ldw	r12,84(sp)
 400b048:	db401617 	ldw	r13,88(sp)
 400b04c:	3440612e 	bgeu	r6,r17,400b1d4 <__muldf3+0x318>
 400b050:	0009883a 	mov	r4,zero
 400b054:	5105883a 	add	r2,r10,r4
 400b058:	128d803a 	cmpltu	r6,r2,r10
 400b05c:	5d07883a 	add	r3,r11,r20
 400b060:	30cd883a 	add	r6,r6,r3
 400b064:	0021883a 	mov	r16,zero
 400b068:	04400044 	movi	r17,1
 400b06c:	1025883a 	mov	r18,r2
 400b070:	3027883a 	mov	r19,r6
 400b074:	32c06236 	bltu	r6,r11,400b200 <__muldf3+0x344>
 400b078:	59807a26 	beq	r11,r6,400b264 <__muldf3+0x3a8>
 400b07c:	680b883a 	mov	r5,r13
 400b080:	b80f883a 	mov	r7,r23
 400b084:	6009883a 	mov	r4,r12
 400b088:	b00d883a 	mov	r6,r22
 400b08c:	400bc300 	call	400bc30 <__muldi3>
 400b090:	1009883a 	mov	r4,r2
 400b094:	000f883a 	mov	r7,zero
 400b098:	1545883a 	add	r2,r2,r21
 400b09c:	1111803a 	cmpltu	r8,r2,r4
 400b0a0:	19c7883a 	add	r3,r3,r7
 400b0a4:	40c7883a 	add	r3,r8,r3
 400b0a8:	88cb883a 	add	r5,r17,r3
 400b0ac:	d8c00617 	ldw	r3,24(sp)
 400b0b0:	8089883a 	add	r4,r16,r2
 400b0b4:	d8800b17 	ldw	r2,44(sp)
 400b0b8:	18c00104 	addi	r3,r3,4
 400b0bc:	240d803a 	cmpltu	r6,r4,r16
 400b0c0:	10c7883a 	add	r3,r2,r3
 400b0c4:	2013883a 	mov	r9,r4
 400b0c8:	d8800a17 	ldw	r2,40(sp)
 400b0cc:	d9000517 	ldw	r4,20(sp)
 400b0d0:	314d883a 	add	r6,r6,r5
 400b0d4:	3015883a 	mov	r10,r6
 400b0d8:	2088c03a 	cmpne	r4,r4,r2
 400b0dc:	00880034 	movhi	r2,8192
 400b0e0:	10bfffc4 	addi	r2,r2,-1
 400b0e4:	d9000f15 	stw	r4,60(sp)
 400b0e8:	d8c01015 	stw	r3,64(sp)
 400b0ec:	1180162e 	bgeu	r2,r6,400b148 <__muldf3+0x28c>
 400b0f0:	1811883a 	mov	r8,r3
 400b0f4:	101f883a 	mov	r15,r2
 400b0f8:	980497fa 	slli	r2,r19,31
 400b0fc:	9016d07a 	srli	r11,r18,1
 400b100:	500697fa 	slli	r3,r10,31
 400b104:	480cd07a 	srli	r6,r9,1
 400b108:	500ed07a 	srli	r7,r10,1
 400b10c:	12d6b03a 	or	r11,r2,r11
 400b110:	00800044 	movi	r2,1
 400b114:	198cb03a 	or	r6,r3,r6
 400b118:	4888703a 	and	r4,r9,r2
 400b11c:	9818d07a 	srli	r12,r19,1
 400b120:	001b883a 	mov	r13,zero
 400b124:	03a00034 	movhi	r14,32768
 400b128:	3013883a 	mov	r9,r6
 400b12c:	3815883a 	mov	r10,r7
 400b130:	4091883a 	add	r8,r8,r2
 400b134:	20000226 	beq	r4,zero,400b140 <__muldf3+0x284>
 400b138:	5b64b03a 	or	r18,r11,r13
 400b13c:	63a6b03a 	or	r19,r12,r14
 400b140:	7abfed36 	bltu	r15,r10,400b0f8 <__muldf3+0x23c>
 400b144:	da001015 	stw	r8,64(sp)
 400b148:	00840034 	movhi	r2,4096
 400b14c:	10bfffc4 	addi	r2,r2,-1
 400b150:	12801436 	bltu	r2,r10,400b1a4 <__muldf3+0x2e8>
 400b154:	da001017 	ldw	r8,64(sp)
 400b158:	101f883a 	mov	r15,r2
 400b15c:	4a45883a 	add	r2,r9,r9
 400b160:	124d803a 	cmpltu	r6,r2,r9
 400b164:	5287883a 	add	r3,r10,r10
 400b168:	9497883a 	add	r11,r18,r18
 400b16c:	5c8f803a 	cmpltu	r7,r11,r18
 400b170:	9cd9883a 	add	r12,r19,r19
 400b174:	01000044 	movi	r4,1
 400b178:	30cd883a 	add	r6,r6,r3
 400b17c:	3b0f883a 	add	r7,r7,r12
 400b180:	423fffc4 	addi	r8,r8,-1
 400b184:	1013883a 	mov	r9,r2
 400b188:	3015883a 	mov	r10,r6
 400b18c:	111ab03a 	or	r13,r2,r4
 400b190:	98003016 	blt	r19,zero,400b254 <__muldf3+0x398>
 400b194:	5825883a 	mov	r18,r11
 400b198:	3827883a 	mov	r19,r7
 400b19c:	7abfef2e 	bgeu	r15,r10,400b15c <__muldf3+0x2a0>
 400b1a0:	da001015 	stw	r8,64(sp)
 400b1a4:	00803fc4 	movi	r2,255
 400b1a8:	488e703a 	and	r7,r9,r2
 400b1ac:	00802004 	movi	r2,128
 400b1b0:	0007883a 	mov	r3,zero
 400b1b4:	0011883a 	mov	r8,zero
 400b1b8:	38801826 	beq	r7,r2,400b21c <__muldf3+0x360>
 400b1bc:	008000c4 	movi	r2,3
 400b1c0:	d9000e04 	addi	r4,sp,56
 400b1c4:	da801215 	stw	r10,72(sp)
 400b1c8:	d8800e15 	stw	r2,56(sp)
 400b1cc:	da401115 	stw	r9,68(sp)
 400b1d0:	003f6a06 	br	400af7c <__muldf3+0xc0>
 400b1d4:	89802126 	beq	r17,r6,400b25c <__muldf3+0x3a0>
 400b1d8:	0009883a 	mov	r4,zero
 400b1dc:	5105883a 	add	r2,r10,r4
 400b1e0:	128d803a 	cmpltu	r6,r2,r10
 400b1e4:	5d07883a 	add	r3,r11,r20
 400b1e8:	30cd883a 	add	r6,r6,r3
 400b1ec:	0021883a 	mov	r16,zero
 400b1f0:	0023883a 	mov	r17,zero
 400b1f4:	1025883a 	mov	r18,r2
 400b1f8:	3027883a 	mov	r19,r6
 400b1fc:	32ff9e2e 	bgeu	r6,r11,400b078 <__muldf3+0x1bc>
 400b200:	00800044 	movi	r2,1
 400b204:	8089883a 	add	r4,r16,r2
 400b208:	240d803a 	cmpltu	r6,r4,r16
 400b20c:	344d883a 	add	r6,r6,r17
 400b210:	2021883a 	mov	r16,r4
 400b214:	3023883a 	mov	r17,r6
 400b218:	003f9806 	br	400b07c <__muldf3+0x1c0>
 400b21c:	403fe71e 	bne	r8,zero,400b1bc <__muldf3+0x300>
 400b220:	01004004 	movi	r4,256
 400b224:	4904703a 	and	r2,r9,r4
 400b228:	10c4b03a 	or	r2,r2,r3
 400b22c:	103fe31e 	bne	r2,zero,400b1bc <__muldf3+0x300>
 400b230:	94c4b03a 	or	r2,r18,r19
 400b234:	103fe126 	beq	r2,zero,400b1bc <__muldf3+0x300>
 400b238:	49c5883a 	add	r2,r9,r7
 400b23c:	1251803a 	cmpltu	r8,r2,r9
 400b240:	4291883a 	add	r8,r8,r10
 400b244:	013fc004 	movi	r4,-256
 400b248:	1112703a 	and	r9,r2,r4
 400b24c:	4015883a 	mov	r10,r8
 400b250:	003fda06 	br	400b1bc <__muldf3+0x300>
 400b254:	6813883a 	mov	r9,r13
 400b258:	003fce06 	br	400b194 <__muldf3+0x2d8>
 400b25c:	143f7c36 	bltu	r2,r16,400b050 <__muldf3+0x194>
 400b260:	003fdd06 	br	400b1d8 <__muldf3+0x31c>
 400b264:	12bf852e 	bgeu	r2,r10,400b07c <__muldf3+0x1c0>
 400b268:	003fe506 	br	400b200 <__muldf3+0x344>
 400b26c:	00800084 	movi	r2,2
 400b270:	20bf351e 	bne	r4,r2,400af48 <__muldf3+0x8c>
 400b274:	01010174 	movhi	r4,1029
 400b278:	2121d604 	addi	r4,r4,-30888
 400b27c:	003f3f06 	br	400af7c <__muldf3+0xc0>

0400b280 <__divdf3>:
 400b280:	deffed04 	addi	sp,sp,-76
 400b284:	dcc01115 	stw	r19,68(sp)
 400b288:	dcc00404 	addi	r19,sp,16
 400b28c:	2011883a 	mov	r8,r4
 400b290:	2813883a 	mov	r9,r5
 400b294:	dc000e15 	stw	r16,56(sp)
 400b298:	d809883a 	mov	r4,sp
 400b29c:	980b883a 	mov	r5,r19
 400b2a0:	dc000904 	addi	r16,sp,36
 400b2a4:	dfc01215 	stw	ra,72(sp)
 400b2a8:	da400115 	stw	r9,4(sp)
 400b2ac:	d9c00315 	stw	r7,12(sp)
 400b2b0:	da000015 	stw	r8,0(sp)
 400b2b4:	d9800215 	stw	r6,8(sp)
 400b2b8:	dc801015 	stw	r18,64(sp)
 400b2bc:	dc400f15 	stw	r17,60(sp)
 400b2c0:	400c05c0 	call	400c05c <__unpack_d>
 400b2c4:	d9000204 	addi	r4,sp,8
 400b2c8:	800b883a 	mov	r5,r16
 400b2cc:	400c05c0 	call	400c05c <__unpack_d>
 400b2d0:	d9000417 	ldw	r4,16(sp)
 400b2d4:	00800044 	movi	r2,1
 400b2d8:	11000b2e 	bgeu	r2,r4,400b308 <__divdf3+0x88>
 400b2dc:	d9400917 	ldw	r5,36(sp)
 400b2e0:	1140762e 	bgeu	r2,r5,400b4bc <__divdf3+0x23c>
 400b2e4:	d8800517 	ldw	r2,20(sp)
 400b2e8:	d8c00a17 	ldw	r3,40(sp)
 400b2ec:	01800104 	movi	r6,4
 400b2f0:	10c4f03a 	xor	r2,r2,r3
 400b2f4:	d8800515 	stw	r2,20(sp)
 400b2f8:	21800226 	beq	r4,r6,400b304 <__divdf3+0x84>
 400b2fc:	00800084 	movi	r2,2
 400b300:	2080141e 	bne	r4,r2,400b354 <__divdf3+0xd4>
 400b304:	29000926 	beq	r5,r4,400b32c <__divdf3+0xac>
 400b308:	9809883a 	mov	r4,r19
 400b30c:	400bd480 	call	400bd48 <__pack_d>
 400b310:	dfc01217 	ldw	ra,72(sp)
 400b314:	dcc01117 	ldw	r19,68(sp)
 400b318:	dc801017 	ldw	r18,64(sp)
 400b31c:	dc400f17 	ldw	r17,60(sp)
 400b320:	dc000e17 	ldw	r16,56(sp)
 400b324:	dec01304 	addi	sp,sp,76
 400b328:	f800283a 	ret
 400b32c:	01010174 	movhi	r4,1029
 400b330:	2121d604 	addi	r4,r4,-30888
 400b334:	400bd480 	call	400bd48 <__pack_d>
 400b338:	dfc01217 	ldw	ra,72(sp)
 400b33c:	dcc01117 	ldw	r19,68(sp)
 400b340:	dc801017 	ldw	r18,64(sp)
 400b344:	dc400f17 	ldw	r17,60(sp)
 400b348:	dc000e17 	ldw	r16,56(sp)
 400b34c:	dec01304 	addi	sp,sp,76
 400b350:	f800283a 	ret
 400b354:	29805b26 	beq	r5,r6,400b4c4 <__divdf3+0x244>
 400b358:	28802d26 	beq	r5,r2,400b410 <__divdf3+0x190>
 400b35c:	d8c00617 	ldw	r3,24(sp)
 400b360:	d8800b17 	ldw	r2,44(sp)
 400b364:	d9c00817 	ldw	r7,32(sp)
 400b368:	dc400d17 	ldw	r17,52(sp)
 400b36c:	188bc83a 	sub	r5,r3,r2
 400b370:	d9800717 	ldw	r6,28(sp)
 400b374:	dc000c17 	ldw	r16,48(sp)
 400b378:	d9400615 	stw	r5,24(sp)
 400b37c:	3c403836 	bltu	r7,r17,400b460 <__divdf3+0x1e0>
 400b380:	89c03626 	beq	r17,r7,400b45c <__divdf3+0x1dc>
 400b384:	0015883a 	mov	r10,zero
 400b388:	001d883a 	mov	r14,zero
 400b38c:	02c40034 	movhi	r11,4096
 400b390:	001f883a 	mov	r15,zero
 400b394:	003f883a 	mov	ra,zero
 400b398:	04800f44 	movi	r18,61
 400b39c:	00000f06 	br	400b3dc <__divdf3+0x15c>
 400b3a0:	601d883a 	mov	r14,r12
 400b3a4:	681f883a 	mov	r15,r13
 400b3a8:	400d883a 	mov	r6,r8
 400b3ac:	100f883a 	mov	r7,r2
 400b3b0:	3191883a 	add	r8,r6,r6
 400b3b4:	5808d07a 	srli	r4,r11,1
 400b3b8:	4185803a 	cmpltu	r2,r8,r6
 400b3bc:	39d3883a 	add	r9,r7,r7
 400b3c0:	28c6b03a 	or	r3,r5,r3
 400b3c4:	1245883a 	add	r2,r2,r9
 400b3c8:	1815883a 	mov	r10,r3
 400b3cc:	2017883a 	mov	r11,r4
 400b3d0:	400d883a 	mov	r6,r8
 400b3d4:	100f883a 	mov	r7,r2
 400b3d8:	fc801726 	beq	ra,r18,400b438 <__divdf3+0x1b8>
 400b3dc:	580a97fa 	slli	r5,r11,31
 400b3e0:	5006d07a 	srli	r3,r10,1
 400b3e4:	ffc00044 	addi	ra,ra,1
 400b3e8:	3c7ff136 	bltu	r7,r17,400b3b0 <__divdf3+0x130>
 400b3ec:	3411c83a 	sub	r8,r6,r16
 400b3f0:	3205803a 	cmpltu	r2,r6,r8
 400b3f4:	3c53c83a 	sub	r9,r7,r17
 400b3f8:	7298b03a 	or	r12,r14,r10
 400b3fc:	7adab03a 	or	r13,r15,r11
 400b400:	4885c83a 	sub	r2,r9,r2
 400b404:	89ffe61e 	bne	r17,r7,400b3a0 <__divdf3+0x120>
 400b408:	343fe936 	bltu	r6,r16,400b3b0 <__divdf3+0x130>
 400b40c:	003fe406 	br	400b3a0 <__divdf3+0x120>
 400b410:	9809883a 	mov	r4,r19
 400b414:	d9800415 	stw	r6,16(sp)
 400b418:	400bd480 	call	400bd48 <__pack_d>
 400b41c:	dfc01217 	ldw	ra,72(sp)
 400b420:	dcc01117 	ldw	r19,68(sp)
 400b424:	dc801017 	ldw	r18,64(sp)
 400b428:	dc400f17 	ldw	r17,60(sp)
 400b42c:	dc000e17 	ldw	r16,56(sp)
 400b430:	dec01304 	addi	sp,sp,76
 400b434:	f800283a 	ret
 400b438:	00803fc4 	movi	r2,255
 400b43c:	7090703a 	and	r8,r14,r2
 400b440:	00802004 	movi	r2,128
 400b444:	0007883a 	mov	r3,zero
 400b448:	0013883a 	mov	r9,zero
 400b44c:	40800d26 	beq	r8,r2,400b484 <__divdf3+0x204>
 400b450:	dbc00815 	stw	r15,32(sp)
 400b454:	db800715 	stw	r14,28(sp)
 400b458:	003fab06 	br	400b308 <__divdf3+0x88>
 400b45c:	343fc92e 	bgeu	r6,r16,400b384 <__divdf3+0x104>
 400b460:	3185883a 	add	r2,r6,r6
 400b464:	1189803a 	cmpltu	r4,r2,r6
 400b468:	39c7883a 	add	r3,r7,r7
 400b46c:	20c9883a 	add	r4,r4,r3
 400b470:	297fffc4 	addi	r5,r5,-1
 400b474:	100d883a 	mov	r6,r2
 400b478:	200f883a 	mov	r7,r4
 400b47c:	d9400615 	stw	r5,24(sp)
 400b480:	003fc006 	br	400b384 <__divdf3+0x104>
 400b484:	483ff21e 	bne	r9,zero,400b450 <__divdf3+0x1d0>
 400b488:	01004004 	movi	r4,256
 400b48c:	7104703a 	and	r2,r14,r4
 400b490:	10c4b03a 	or	r2,r2,r3
 400b494:	103fee1e 	bne	r2,zero,400b450 <__divdf3+0x1d0>
 400b498:	31c4b03a 	or	r2,r6,r7
 400b49c:	103fec26 	beq	r2,zero,400b450 <__divdf3+0x1d0>
 400b4a0:	7205883a 	add	r2,r14,r8
 400b4a4:	1391803a 	cmpltu	r8,r2,r14
 400b4a8:	43d1883a 	add	r8,r8,r15
 400b4ac:	013fc004 	movi	r4,-256
 400b4b0:	111c703a 	and	r14,r2,r4
 400b4b4:	401f883a 	mov	r15,r8
 400b4b8:	003fe506 	br	400b450 <__divdf3+0x1d0>
 400b4bc:	8009883a 	mov	r4,r16
 400b4c0:	003f9206 	br	400b30c <__divdf3+0x8c>
 400b4c4:	9809883a 	mov	r4,r19
 400b4c8:	d8000715 	stw	zero,28(sp)
 400b4cc:	d8000815 	stw	zero,32(sp)
 400b4d0:	d8000615 	stw	zero,24(sp)
 400b4d4:	003f8d06 	br	400b30c <__divdf3+0x8c>

0400b4d8 <__eqdf2>:
 400b4d8:	deffef04 	addi	sp,sp,-68
 400b4dc:	dc400f15 	stw	r17,60(sp)
 400b4e0:	dc400404 	addi	r17,sp,16
 400b4e4:	2005883a 	mov	r2,r4
 400b4e8:	2807883a 	mov	r3,r5
 400b4ec:	dc000e15 	stw	r16,56(sp)
 400b4f0:	d809883a 	mov	r4,sp
 400b4f4:	880b883a 	mov	r5,r17
 400b4f8:	dc000904 	addi	r16,sp,36
 400b4fc:	d8c00115 	stw	r3,4(sp)
 400b500:	d8800015 	stw	r2,0(sp)
 400b504:	d9800215 	stw	r6,8(sp)
 400b508:	dfc01015 	stw	ra,64(sp)
 400b50c:	d9c00315 	stw	r7,12(sp)
 400b510:	400c05c0 	call	400c05c <__unpack_d>
 400b514:	d9000204 	addi	r4,sp,8
 400b518:	800b883a 	mov	r5,r16
 400b51c:	400c05c0 	call	400c05c <__unpack_d>
 400b520:	d8800417 	ldw	r2,16(sp)
 400b524:	00c00044 	movi	r3,1
 400b528:	180d883a 	mov	r6,r3
 400b52c:	1880062e 	bgeu	r3,r2,400b548 <__eqdf2+0x70>
 400b530:	d8800917 	ldw	r2,36(sp)
 400b534:	8809883a 	mov	r4,r17
 400b538:	800b883a 	mov	r5,r16
 400b53c:	1880022e 	bgeu	r3,r2,400b548 <__eqdf2+0x70>
 400b540:	400c1940 	call	400c194 <__fpcmp_parts_d>
 400b544:	100d883a 	mov	r6,r2
 400b548:	3005883a 	mov	r2,r6
 400b54c:	dfc01017 	ldw	ra,64(sp)
 400b550:	dc400f17 	ldw	r17,60(sp)
 400b554:	dc000e17 	ldw	r16,56(sp)
 400b558:	dec01104 	addi	sp,sp,68
 400b55c:	f800283a 	ret

0400b560 <__nedf2>:
 400b560:	deffef04 	addi	sp,sp,-68
 400b564:	dc400f15 	stw	r17,60(sp)
 400b568:	dc400404 	addi	r17,sp,16
 400b56c:	2005883a 	mov	r2,r4
 400b570:	2807883a 	mov	r3,r5
 400b574:	dc000e15 	stw	r16,56(sp)
 400b578:	d809883a 	mov	r4,sp
 400b57c:	880b883a 	mov	r5,r17
 400b580:	dc000904 	addi	r16,sp,36
 400b584:	d8c00115 	stw	r3,4(sp)
 400b588:	d8800015 	stw	r2,0(sp)
 400b58c:	d9800215 	stw	r6,8(sp)
 400b590:	dfc01015 	stw	ra,64(sp)
 400b594:	d9c00315 	stw	r7,12(sp)
 400b598:	400c05c0 	call	400c05c <__unpack_d>
 400b59c:	d9000204 	addi	r4,sp,8
 400b5a0:	800b883a 	mov	r5,r16
 400b5a4:	400c05c0 	call	400c05c <__unpack_d>
 400b5a8:	d8800417 	ldw	r2,16(sp)
 400b5ac:	00c00044 	movi	r3,1
 400b5b0:	180d883a 	mov	r6,r3
 400b5b4:	1880062e 	bgeu	r3,r2,400b5d0 <__nedf2+0x70>
 400b5b8:	d8800917 	ldw	r2,36(sp)
 400b5bc:	8809883a 	mov	r4,r17
 400b5c0:	800b883a 	mov	r5,r16
 400b5c4:	1880022e 	bgeu	r3,r2,400b5d0 <__nedf2+0x70>
 400b5c8:	400c1940 	call	400c194 <__fpcmp_parts_d>
 400b5cc:	100d883a 	mov	r6,r2
 400b5d0:	3005883a 	mov	r2,r6
 400b5d4:	dfc01017 	ldw	ra,64(sp)
 400b5d8:	dc400f17 	ldw	r17,60(sp)
 400b5dc:	dc000e17 	ldw	r16,56(sp)
 400b5e0:	dec01104 	addi	sp,sp,68
 400b5e4:	f800283a 	ret

0400b5e8 <__gtdf2>:
 400b5e8:	deffef04 	addi	sp,sp,-68
 400b5ec:	dc400f15 	stw	r17,60(sp)
 400b5f0:	dc400404 	addi	r17,sp,16
 400b5f4:	2005883a 	mov	r2,r4
 400b5f8:	2807883a 	mov	r3,r5
 400b5fc:	dc000e15 	stw	r16,56(sp)
 400b600:	d809883a 	mov	r4,sp
 400b604:	880b883a 	mov	r5,r17
 400b608:	dc000904 	addi	r16,sp,36
 400b60c:	d8c00115 	stw	r3,4(sp)
 400b610:	d8800015 	stw	r2,0(sp)
 400b614:	d9800215 	stw	r6,8(sp)
 400b618:	dfc01015 	stw	ra,64(sp)
 400b61c:	d9c00315 	stw	r7,12(sp)
 400b620:	400c05c0 	call	400c05c <__unpack_d>
 400b624:	d9000204 	addi	r4,sp,8
 400b628:	800b883a 	mov	r5,r16
 400b62c:	400c05c0 	call	400c05c <__unpack_d>
 400b630:	d8800417 	ldw	r2,16(sp)
 400b634:	00c00044 	movi	r3,1
 400b638:	01bfffc4 	movi	r6,-1
 400b63c:	1880062e 	bgeu	r3,r2,400b658 <__gtdf2+0x70>
 400b640:	d8800917 	ldw	r2,36(sp)
 400b644:	8809883a 	mov	r4,r17
 400b648:	800b883a 	mov	r5,r16
 400b64c:	1880022e 	bgeu	r3,r2,400b658 <__gtdf2+0x70>
 400b650:	400c1940 	call	400c194 <__fpcmp_parts_d>
 400b654:	100d883a 	mov	r6,r2
 400b658:	3005883a 	mov	r2,r6
 400b65c:	dfc01017 	ldw	ra,64(sp)
 400b660:	dc400f17 	ldw	r17,60(sp)
 400b664:	dc000e17 	ldw	r16,56(sp)
 400b668:	dec01104 	addi	sp,sp,68
 400b66c:	f800283a 	ret

0400b670 <__gedf2>:
 400b670:	deffef04 	addi	sp,sp,-68
 400b674:	dc400f15 	stw	r17,60(sp)
 400b678:	dc400404 	addi	r17,sp,16
 400b67c:	2005883a 	mov	r2,r4
 400b680:	2807883a 	mov	r3,r5
 400b684:	dc000e15 	stw	r16,56(sp)
 400b688:	d809883a 	mov	r4,sp
 400b68c:	880b883a 	mov	r5,r17
 400b690:	dc000904 	addi	r16,sp,36
 400b694:	d8c00115 	stw	r3,4(sp)
 400b698:	d8800015 	stw	r2,0(sp)
 400b69c:	d9800215 	stw	r6,8(sp)
 400b6a0:	dfc01015 	stw	ra,64(sp)
 400b6a4:	d9c00315 	stw	r7,12(sp)
 400b6a8:	400c05c0 	call	400c05c <__unpack_d>
 400b6ac:	d9000204 	addi	r4,sp,8
 400b6b0:	800b883a 	mov	r5,r16
 400b6b4:	400c05c0 	call	400c05c <__unpack_d>
 400b6b8:	d8800417 	ldw	r2,16(sp)
 400b6bc:	00c00044 	movi	r3,1
 400b6c0:	01bfffc4 	movi	r6,-1
 400b6c4:	1880062e 	bgeu	r3,r2,400b6e0 <__gedf2+0x70>
 400b6c8:	d8800917 	ldw	r2,36(sp)
 400b6cc:	8809883a 	mov	r4,r17
 400b6d0:	800b883a 	mov	r5,r16
 400b6d4:	1880022e 	bgeu	r3,r2,400b6e0 <__gedf2+0x70>
 400b6d8:	400c1940 	call	400c194 <__fpcmp_parts_d>
 400b6dc:	100d883a 	mov	r6,r2
 400b6e0:	3005883a 	mov	r2,r6
 400b6e4:	dfc01017 	ldw	ra,64(sp)
 400b6e8:	dc400f17 	ldw	r17,60(sp)
 400b6ec:	dc000e17 	ldw	r16,56(sp)
 400b6f0:	dec01104 	addi	sp,sp,68
 400b6f4:	f800283a 	ret

0400b6f8 <__ltdf2>:
 400b6f8:	deffef04 	addi	sp,sp,-68
 400b6fc:	dc400f15 	stw	r17,60(sp)
 400b700:	dc400404 	addi	r17,sp,16
 400b704:	2005883a 	mov	r2,r4
 400b708:	2807883a 	mov	r3,r5
 400b70c:	dc000e15 	stw	r16,56(sp)
 400b710:	d809883a 	mov	r4,sp
 400b714:	880b883a 	mov	r5,r17
 400b718:	dc000904 	addi	r16,sp,36
 400b71c:	d8c00115 	stw	r3,4(sp)
 400b720:	d8800015 	stw	r2,0(sp)
 400b724:	d9800215 	stw	r6,8(sp)
 400b728:	dfc01015 	stw	ra,64(sp)
 400b72c:	d9c00315 	stw	r7,12(sp)
 400b730:	400c05c0 	call	400c05c <__unpack_d>
 400b734:	d9000204 	addi	r4,sp,8
 400b738:	800b883a 	mov	r5,r16
 400b73c:	400c05c0 	call	400c05c <__unpack_d>
 400b740:	d8800417 	ldw	r2,16(sp)
 400b744:	00c00044 	movi	r3,1
 400b748:	180d883a 	mov	r6,r3
 400b74c:	1880062e 	bgeu	r3,r2,400b768 <__ltdf2+0x70>
 400b750:	d8800917 	ldw	r2,36(sp)
 400b754:	8809883a 	mov	r4,r17
 400b758:	800b883a 	mov	r5,r16
 400b75c:	1880022e 	bgeu	r3,r2,400b768 <__ltdf2+0x70>
 400b760:	400c1940 	call	400c194 <__fpcmp_parts_d>
 400b764:	100d883a 	mov	r6,r2
 400b768:	3005883a 	mov	r2,r6
 400b76c:	dfc01017 	ldw	ra,64(sp)
 400b770:	dc400f17 	ldw	r17,60(sp)
 400b774:	dc000e17 	ldw	r16,56(sp)
 400b778:	dec01104 	addi	sp,sp,68
 400b77c:	f800283a 	ret

0400b780 <__floatsidf>:
 400b780:	2006d7fa 	srli	r3,r4,31
 400b784:	defff604 	addi	sp,sp,-40
 400b788:	008000c4 	movi	r2,3
 400b78c:	dfc00915 	stw	ra,36(sp)
 400b790:	dcc00815 	stw	r19,32(sp)
 400b794:	dc800715 	stw	r18,28(sp)
 400b798:	dc400615 	stw	r17,24(sp)
 400b79c:	dc000515 	stw	r16,20(sp)
 400b7a0:	d8800015 	stw	r2,0(sp)
 400b7a4:	d8c00115 	stw	r3,4(sp)
 400b7a8:	20000f1e 	bne	r4,zero,400b7e8 <__floatsidf+0x68>
 400b7ac:	00800084 	movi	r2,2
 400b7b0:	d8800015 	stw	r2,0(sp)
 400b7b4:	d809883a 	mov	r4,sp
 400b7b8:	400bd480 	call	400bd48 <__pack_d>
 400b7bc:	1009883a 	mov	r4,r2
 400b7c0:	180b883a 	mov	r5,r3
 400b7c4:	2005883a 	mov	r2,r4
 400b7c8:	2807883a 	mov	r3,r5
 400b7cc:	dfc00917 	ldw	ra,36(sp)
 400b7d0:	dcc00817 	ldw	r19,32(sp)
 400b7d4:	dc800717 	ldw	r18,28(sp)
 400b7d8:	dc400617 	ldw	r17,24(sp)
 400b7dc:	dc000517 	ldw	r16,20(sp)
 400b7e0:	dec00a04 	addi	sp,sp,40
 400b7e4:	f800283a 	ret
 400b7e8:	00800f04 	movi	r2,60
 400b7ec:	1807003a 	cmpeq	r3,r3,zero
 400b7f0:	d8800215 	stw	r2,8(sp)
 400b7f4:	18001126 	beq	r3,zero,400b83c <__floatsidf+0xbc>
 400b7f8:	0027883a 	mov	r19,zero
 400b7fc:	2025883a 	mov	r18,r4
 400b800:	d9000315 	stw	r4,12(sp)
 400b804:	dcc00415 	stw	r19,16(sp)
 400b808:	400bcc80 	call	400bcc8 <__clzsi2>
 400b80c:	11000744 	addi	r4,r2,29
 400b810:	013fe80e 	bge	zero,r4,400b7b4 <__floatsidf+0x34>
 400b814:	10bfff44 	addi	r2,r2,-3
 400b818:	10000c16 	blt	r2,zero,400b84c <__floatsidf+0xcc>
 400b81c:	90a2983a 	sll	r17,r18,r2
 400b820:	0021883a 	mov	r16,zero
 400b824:	d8800217 	ldw	r2,8(sp)
 400b828:	dc400415 	stw	r17,16(sp)
 400b82c:	dc000315 	stw	r16,12(sp)
 400b830:	1105c83a 	sub	r2,r2,r4
 400b834:	d8800215 	stw	r2,8(sp)
 400b838:	003fde06 	br	400b7b4 <__floatsidf+0x34>
 400b83c:	00a00034 	movhi	r2,32768
 400b840:	20800a26 	beq	r4,r2,400b86c <__floatsidf+0xec>
 400b844:	0109c83a 	sub	r4,zero,r4
 400b848:	003feb06 	br	400b7f8 <__floatsidf+0x78>
 400b84c:	9006d07a 	srli	r3,r18,1
 400b850:	008007c4 	movi	r2,31
 400b854:	1105c83a 	sub	r2,r2,r4
 400b858:	1886d83a 	srl	r3,r3,r2
 400b85c:	9922983a 	sll	r17,r19,r4
 400b860:	9120983a 	sll	r16,r18,r4
 400b864:	1c62b03a 	or	r17,r3,r17
 400b868:	003fee06 	br	400b824 <__floatsidf+0xa4>
 400b86c:	0009883a 	mov	r4,zero
 400b870:	01707834 	movhi	r5,49632
 400b874:	003fd306 	br	400b7c4 <__floatsidf+0x44>

0400b878 <__fixdfsi>:
 400b878:	defff804 	addi	sp,sp,-32
 400b87c:	2005883a 	mov	r2,r4
 400b880:	2807883a 	mov	r3,r5
 400b884:	d809883a 	mov	r4,sp
 400b888:	d9400204 	addi	r5,sp,8
 400b88c:	d8c00115 	stw	r3,4(sp)
 400b890:	d8800015 	stw	r2,0(sp)
 400b894:	dfc00715 	stw	ra,28(sp)
 400b898:	400c05c0 	call	400c05c <__unpack_d>
 400b89c:	d8c00217 	ldw	r3,8(sp)
 400b8a0:	00800084 	movi	r2,2
 400b8a4:	1880051e 	bne	r3,r2,400b8bc <__fixdfsi+0x44>
 400b8a8:	0007883a 	mov	r3,zero
 400b8ac:	1805883a 	mov	r2,r3
 400b8b0:	dfc00717 	ldw	ra,28(sp)
 400b8b4:	dec00804 	addi	sp,sp,32
 400b8b8:	f800283a 	ret
 400b8bc:	00800044 	movi	r2,1
 400b8c0:	10fff92e 	bgeu	r2,r3,400b8a8 <__fixdfsi+0x30>
 400b8c4:	00800104 	movi	r2,4
 400b8c8:	18800426 	beq	r3,r2,400b8dc <__fixdfsi+0x64>
 400b8cc:	d8c00417 	ldw	r3,16(sp)
 400b8d0:	183ff516 	blt	r3,zero,400b8a8 <__fixdfsi+0x30>
 400b8d4:	00800784 	movi	r2,30
 400b8d8:	10c0080e 	bge	r2,r3,400b8fc <__fixdfsi+0x84>
 400b8dc:	d8800317 	ldw	r2,12(sp)
 400b8e0:	1000121e 	bne	r2,zero,400b92c <__fixdfsi+0xb4>
 400b8e4:	00e00034 	movhi	r3,32768
 400b8e8:	18ffffc4 	addi	r3,r3,-1
 400b8ec:	1805883a 	mov	r2,r3
 400b8f0:	dfc00717 	ldw	ra,28(sp)
 400b8f4:	dec00804 	addi	sp,sp,32
 400b8f8:	f800283a 	ret
 400b8fc:	00800f04 	movi	r2,60
 400b900:	10d1c83a 	sub	r8,r2,r3
 400b904:	40bff804 	addi	r2,r8,-32
 400b908:	d9800517 	ldw	r6,20(sp)
 400b90c:	d9c00617 	ldw	r7,24(sp)
 400b910:	10000816 	blt	r2,zero,400b934 <__fixdfsi+0xbc>
 400b914:	3888d83a 	srl	r4,r7,r2
 400b918:	d8800317 	ldw	r2,12(sp)
 400b91c:	2007883a 	mov	r3,r4
 400b920:	103fe226 	beq	r2,zero,400b8ac <__fixdfsi+0x34>
 400b924:	0107c83a 	sub	r3,zero,r4
 400b928:	003fe006 	br	400b8ac <__fixdfsi+0x34>
 400b92c:	00e00034 	movhi	r3,32768
 400b930:	003fde06 	br	400b8ac <__fixdfsi+0x34>
 400b934:	39c7883a 	add	r3,r7,r7
 400b938:	008007c4 	movi	r2,31
 400b93c:	1205c83a 	sub	r2,r2,r8
 400b940:	1886983a 	sll	r3,r3,r2
 400b944:	3208d83a 	srl	r4,r6,r8
 400b948:	1908b03a 	or	r4,r3,r4
 400b94c:	003ff206 	br	400b918 <__fixdfsi+0xa0>

0400b950 <__floatunsidf>:
 400b950:	defff204 	addi	sp,sp,-56
 400b954:	dfc00d15 	stw	ra,52(sp)
 400b958:	ddc00c15 	stw	r23,48(sp)
 400b95c:	dd800b15 	stw	r22,44(sp)
 400b960:	dd400a15 	stw	r21,40(sp)
 400b964:	dd000915 	stw	r20,36(sp)
 400b968:	dcc00815 	stw	r19,32(sp)
 400b96c:	dc800715 	stw	r18,28(sp)
 400b970:	dc400615 	stw	r17,24(sp)
 400b974:	dc000515 	stw	r16,20(sp)
 400b978:	d8000115 	stw	zero,4(sp)
 400b97c:	20000f1e 	bne	r4,zero,400b9bc <__floatunsidf+0x6c>
 400b980:	00800084 	movi	r2,2
 400b984:	d8800015 	stw	r2,0(sp)
 400b988:	d809883a 	mov	r4,sp
 400b98c:	400bd480 	call	400bd48 <__pack_d>
 400b990:	dfc00d17 	ldw	ra,52(sp)
 400b994:	ddc00c17 	ldw	r23,48(sp)
 400b998:	dd800b17 	ldw	r22,44(sp)
 400b99c:	dd400a17 	ldw	r21,40(sp)
 400b9a0:	dd000917 	ldw	r20,36(sp)
 400b9a4:	dcc00817 	ldw	r19,32(sp)
 400b9a8:	dc800717 	ldw	r18,28(sp)
 400b9ac:	dc400617 	ldw	r17,24(sp)
 400b9b0:	dc000517 	ldw	r16,20(sp)
 400b9b4:	dec00e04 	addi	sp,sp,56
 400b9b8:	f800283a 	ret
 400b9bc:	008000c4 	movi	r2,3
 400b9c0:	00c00f04 	movi	r3,60
 400b9c4:	002f883a 	mov	r23,zero
 400b9c8:	202d883a 	mov	r22,r4
 400b9cc:	d8800015 	stw	r2,0(sp)
 400b9d0:	d8c00215 	stw	r3,8(sp)
 400b9d4:	d9000315 	stw	r4,12(sp)
 400b9d8:	ddc00415 	stw	r23,16(sp)
 400b9dc:	400bcc80 	call	400bcc8 <__clzsi2>
 400b9e0:	12400744 	addi	r9,r2,29
 400b9e4:	48000b16 	blt	r9,zero,400ba14 <__floatunsidf+0xc4>
 400b9e8:	483fe726 	beq	r9,zero,400b988 <__floatunsidf+0x38>
 400b9ec:	10bfff44 	addi	r2,r2,-3
 400b9f0:	10002e16 	blt	r2,zero,400baac <__floatunsidf+0x15c>
 400b9f4:	b0a2983a 	sll	r17,r22,r2
 400b9f8:	0021883a 	mov	r16,zero
 400b9fc:	d8800217 	ldw	r2,8(sp)
 400ba00:	dc400415 	stw	r17,16(sp)
 400ba04:	dc000315 	stw	r16,12(sp)
 400ba08:	1245c83a 	sub	r2,r2,r9
 400ba0c:	d8800215 	stw	r2,8(sp)
 400ba10:	003fdd06 	br	400b988 <__floatunsidf+0x38>
 400ba14:	0255c83a 	sub	r10,zero,r9
 400ba18:	51bff804 	addi	r6,r10,-32
 400ba1c:	30001b16 	blt	r6,zero,400ba8c <__floatunsidf+0x13c>
 400ba20:	b9a8d83a 	srl	r20,r23,r6
 400ba24:	002b883a 	mov	r21,zero
 400ba28:	000f883a 	mov	r7,zero
 400ba2c:	01000044 	movi	r4,1
 400ba30:	0011883a 	mov	r8,zero
 400ba34:	30002516 	blt	r6,zero,400bacc <__floatunsidf+0x17c>
 400ba38:	21a6983a 	sll	r19,r4,r6
 400ba3c:	0025883a 	mov	r18,zero
 400ba40:	00bfffc4 	movi	r2,-1
 400ba44:	9089883a 	add	r4,r18,r2
 400ba48:	988b883a 	add	r5,r19,r2
 400ba4c:	248d803a 	cmpltu	r6,r4,r18
 400ba50:	314b883a 	add	r5,r6,r5
 400ba54:	b104703a 	and	r2,r22,r4
 400ba58:	b946703a 	and	r3,r23,r5
 400ba5c:	10c4b03a 	or	r2,r2,r3
 400ba60:	10000226 	beq	r2,zero,400ba6c <__floatunsidf+0x11c>
 400ba64:	01c00044 	movi	r7,1
 400ba68:	0011883a 	mov	r8,zero
 400ba6c:	d9000217 	ldw	r4,8(sp)
 400ba70:	a1c4b03a 	or	r2,r20,r7
 400ba74:	aa06b03a 	or	r3,r21,r8
 400ba78:	2249c83a 	sub	r4,r4,r9
 400ba7c:	d8c00415 	stw	r3,16(sp)
 400ba80:	d9000215 	stw	r4,8(sp)
 400ba84:	d8800315 	stw	r2,12(sp)
 400ba88:	003fbf06 	br	400b988 <__floatunsidf+0x38>
 400ba8c:	bdc7883a 	add	r3,r23,r23
 400ba90:	008007c4 	movi	r2,31
 400ba94:	1285c83a 	sub	r2,r2,r10
 400ba98:	1886983a 	sll	r3,r3,r2
 400ba9c:	b2a8d83a 	srl	r20,r22,r10
 400baa0:	baaad83a 	srl	r21,r23,r10
 400baa4:	1d28b03a 	or	r20,r3,r20
 400baa8:	003fdf06 	br	400ba28 <__floatunsidf+0xd8>
 400baac:	b006d07a 	srli	r3,r22,1
 400bab0:	008007c4 	movi	r2,31
 400bab4:	1245c83a 	sub	r2,r2,r9
 400bab8:	1886d83a 	srl	r3,r3,r2
 400babc:	ba62983a 	sll	r17,r23,r9
 400bac0:	b260983a 	sll	r16,r22,r9
 400bac4:	1c62b03a 	or	r17,r3,r17
 400bac8:	003fcc06 	br	400b9fc <__floatunsidf+0xac>
 400bacc:	2006d07a 	srli	r3,r4,1
 400bad0:	008007c4 	movi	r2,31
 400bad4:	1285c83a 	sub	r2,r2,r10
 400bad8:	18a6d83a 	srl	r19,r3,r2
 400badc:	22a4983a 	sll	r18,r4,r10
 400bae0:	003fd706 	br	400ba40 <__floatunsidf+0xf0>

0400bae4 <udivmodsi4>:
 400bae4:	29001b2e 	bgeu	r5,r4,400bb54 <udivmodsi4+0x70>
 400bae8:	28001a16 	blt	r5,zero,400bb54 <udivmodsi4+0x70>
 400baec:	00800044 	movi	r2,1
 400baf0:	0007883a 	mov	r3,zero
 400baf4:	01c007c4 	movi	r7,31
 400baf8:	00000306 	br	400bb08 <udivmodsi4+0x24>
 400bafc:	19c01326 	beq	r3,r7,400bb4c <udivmodsi4+0x68>
 400bb00:	18c00044 	addi	r3,r3,1
 400bb04:	28000416 	blt	r5,zero,400bb18 <udivmodsi4+0x34>
 400bb08:	294b883a 	add	r5,r5,r5
 400bb0c:	1085883a 	add	r2,r2,r2
 400bb10:	293ffa36 	bltu	r5,r4,400bafc <udivmodsi4+0x18>
 400bb14:	10000d26 	beq	r2,zero,400bb4c <udivmodsi4+0x68>
 400bb18:	0007883a 	mov	r3,zero
 400bb1c:	21400236 	bltu	r4,r5,400bb28 <udivmodsi4+0x44>
 400bb20:	2149c83a 	sub	r4,r4,r5
 400bb24:	1886b03a 	or	r3,r3,r2
 400bb28:	1004d07a 	srli	r2,r2,1
 400bb2c:	280ad07a 	srli	r5,r5,1
 400bb30:	103ffa1e 	bne	r2,zero,400bb1c <udivmodsi4+0x38>
 400bb34:	30000226 	beq	r6,zero,400bb40 <udivmodsi4+0x5c>
 400bb38:	2005883a 	mov	r2,r4
 400bb3c:	f800283a 	ret
 400bb40:	1809883a 	mov	r4,r3
 400bb44:	2005883a 	mov	r2,r4
 400bb48:	f800283a 	ret
 400bb4c:	0007883a 	mov	r3,zero
 400bb50:	003ff806 	br	400bb34 <udivmodsi4+0x50>
 400bb54:	00800044 	movi	r2,1
 400bb58:	0007883a 	mov	r3,zero
 400bb5c:	003fef06 	br	400bb1c <udivmodsi4+0x38>

0400bb60 <__divsi3>:
 400bb60:	defffe04 	addi	sp,sp,-8
 400bb64:	dc000015 	stw	r16,0(sp)
 400bb68:	dfc00115 	stw	ra,4(sp)
 400bb6c:	0021883a 	mov	r16,zero
 400bb70:	20000c16 	blt	r4,zero,400bba4 <__divsi3+0x44>
 400bb74:	000d883a 	mov	r6,zero
 400bb78:	28000e16 	blt	r5,zero,400bbb4 <__divsi3+0x54>
 400bb7c:	400bae40 	call	400bae4 <udivmodsi4>
 400bb80:	1007883a 	mov	r3,r2
 400bb84:	8005003a 	cmpeq	r2,r16,zero
 400bb88:	1000011e 	bne	r2,zero,400bb90 <__divsi3+0x30>
 400bb8c:	00c7c83a 	sub	r3,zero,r3
 400bb90:	1805883a 	mov	r2,r3
 400bb94:	dfc00117 	ldw	ra,4(sp)
 400bb98:	dc000017 	ldw	r16,0(sp)
 400bb9c:	dec00204 	addi	sp,sp,8
 400bba0:	f800283a 	ret
 400bba4:	0109c83a 	sub	r4,zero,r4
 400bba8:	04000044 	movi	r16,1
 400bbac:	000d883a 	mov	r6,zero
 400bbb0:	283ff20e 	bge	r5,zero,400bb7c <__divsi3+0x1c>
 400bbb4:	014bc83a 	sub	r5,zero,r5
 400bbb8:	8021003a 	cmpeq	r16,r16,zero
 400bbbc:	003fef06 	br	400bb7c <__divsi3+0x1c>

0400bbc0 <__modsi3>:
 400bbc0:	deffff04 	addi	sp,sp,-4
 400bbc4:	dfc00015 	stw	ra,0(sp)
 400bbc8:	01800044 	movi	r6,1
 400bbcc:	2807883a 	mov	r3,r5
 400bbd0:	20000416 	blt	r4,zero,400bbe4 <__modsi3+0x24>
 400bbd4:	28000c16 	blt	r5,zero,400bc08 <__modsi3+0x48>
 400bbd8:	dfc00017 	ldw	ra,0(sp)
 400bbdc:	dec00104 	addi	sp,sp,4
 400bbe0:	400bae41 	jmpi	400bae4 <udivmodsi4>
 400bbe4:	0109c83a 	sub	r4,zero,r4
 400bbe8:	28000b16 	blt	r5,zero,400bc18 <__modsi3+0x58>
 400bbec:	180b883a 	mov	r5,r3
 400bbf0:	01800044 	movi	r6,1
 400bbf4:	400bae40 	call	400bae4 <udivmodsi4>
 400bbf8:	0085c83a 	sub	r2,zero,r2
 400bbfc:	dfc00017 	ldw	ra,0(sp)
 400bc00:	dec00104 	addi	sp,sp,4
 400bc04:	f800283a 	ret
 400bc08:	014bc83a 	sub	r5,zero,r5
 400bc0c:	dfc00017 	ldw	ra,0(sp)
 400bc10:	dec00104 	addi	sp,sp,4
 400bc14:	400bae41 	jmpi	400bae4 <udivmodsi4>
 400bc18:	0147c83a 	sub	r3,zero,r5
 400bc1c:	003ff306 	br	400bbec <__modsi3+0x2c>

0400bc20 <__udivsi3>:
 400bc20:	000d883a 	mov	r6,zero
 400bc24:	400bae41 	jmpi	400bae4 <udivmodsi4>

0400bc28 <__umodsi3>:
 400bc28:	01800044 	movi	r6,1
 400bc2c:	400bae41 	jmpi	400bae4 <udivmodsi4>

0400bc30 <__muldi3>:
 400bc30:	2011883a 	mov	r8,r4
 400bc34:	427fffcc 	andi	r9,r8,65535
 400bc38:	4018d43a 	srli	r12,r8,16
 400bc3c:	32bfffcc 	andi	r10,r6,65535
 400bc40:	3016d43a 	srli	r11,r6,16
 400bc44:	4a85383a 	mul	r2,r9,r10
 400bc48:	6295383a 	mul	r10,r12,r10
 400bc4c:	4ad3383a 	mul	r9,r9,r11
 400bc50:	113fffcc 	andi	r4,r2,65535
 400bc54:	1004d43a 	srli	r2,r2,16
 400bc58:	4a93883a 	add	r9,r9,r10
 400bc5c:	3807883a 	mov	r3,r7
 400bc60:	1245883a 	add	r2,r2,r9
 400bc64:	280f883a 	mov	r7,r5
 400bc68:	180b883a 	mov	r5,r3
 400bc6c:	1006943a 	slli	r3,r2,16
 400bc70:	defffd04 	addi	sp,sp,-12
 400bc74:	dc800215 	stw	r18,8(sp)
 400bc78:	1907883a 	add	r3,r3,r4
 400bc7c:	dc400115 	stw	r17,4(sp)
 400bc80:	dc000015 	stw	r16,0(sp)
 400bc84:	4165383a 	mul	r18,r8,r5
 400bc88:	31e3383a 	mul	r17,r6,r7
 400bc8c:	1012d43a 	srli	r9,r2,16
 400bc90:	62d9383a 	mul	r12,r12,r11
 400bc94:	181f883a 	mov	r15,r3
 400bc98:	1280022e 	bgeu	r2,r10,400bca4 <__muldi3+0x74>
 400bc9c:	00800074 	movhi	r2,1
 400bca0:	6099883a 	add	r12,r12,r2
 400bca4:	624d883a 	add	r6,r12,r9
 400bca8:	9187883a 	add	r3,r18,r6
 400bcac:	88c7883a 	add	r3,r17,r3
 400bcb0:	7805883a 	mov	r2,r15
 400bcb4:	dc800217 	ldw	r18,8(sp)
 400bcb8:	dc400117 	ldw	r17,4(sp)
 400bcbc:	dc000017 	ldw	r16,0(sp)
 400bcc0:	dec00304 	addi	sp,sp,12
 400bcc4:	f800283a 	ret

0400bcc8 <__clzsi2>:
 400bcc8:	00bfffd4 	movui	r2,65535
 400bccc:	11000e36 	bltu	r2,r4,400bd08 <__clzsi2+0x40>
 400bcd0:	00803fc4 	movi	r2,255
 400bcd4:	01400204 	movi	r5,8
 400bcd8:	0007883a 	mov	r3,zero
 400bcdc:	11001036 	bltu	r2,r4,400bd20 <__clzsi2+0x58>
 400bce0:	000b883a 	mov	r5,zero
 400bce4:	20c6d83a 	srl	r3,r4,r3
 400bce8:	00810174 	movhi	r2,1029
 400bcec:	10a1db04 	addi	r2,r2,-30868
 400bcf0:	1887883a 	add	r3,r3,r2
 400bcf4:	18800003 	ldbu	r2,0(r3)
 400bcf8:	00c00804 	movi	r3,32
 400bcfc:	2885883a 	add	r2,r5,r2
 400bd00:	1885c83a 	sub	r2,r3,r2
 400bd04:	f800283a 	ret
 400bd08:	01400404 	movi	r5,16
 400bd0c:	00804034 	movhi	r2,256
 400bd10:	10bfffc4 	addi	r2,r2,-1
 400bd14:	2807883a 	mov	r3,r5
 400bd18:	113ff22e 	bgeu	r2,r4,400bce4 <__clzsi2+0x1c>
 400bd1c:	01400604 	movi	r5,24
 400bd20:	2807883a 	mov	r3,r5
 400bd24:	20c6d83a 	srl	r3,r4,r3
 400bd28:	00810174 	movhi	r2,1029
 400bd2c:	10a1db04 	addi	r2,r2,-30868
 400bd30:	1887883a 	add	r3,r3,r2
 400bd34:	18800003 	ldbu	r2,0(r3)
 400bd38:	00c00804 	movi	r3,32
 400bd3c:	2885883a 	add	r2,r5,r2
 400bd40:	1885c83a 	sub	r2,r3,r2
 400bd44:	f800283a 	ret

0400bd48 <__pack_d>:
 400bd48:	20c00017 	ldw	r3,0(r4)
 400bd4c:	defffd04 	addi	sp,sp,-12
 400bd50:	dc000015 	stw	r16,0(sp)
 400bd54:	dc800215 	stw	r18,8(sp)
 400bd58:	dc400115 	stw	r17,4(sp)
 400bd5c:	00800044 	movi	r2,1
 400bd60:	22000317 	ldw	r8,12(r4)
 400bd64:	001f883a 	mov	r15,zero
 400bd68:	22400417 	ldw	r9,16(r4)
 400bd6c:	24000117 	ldw	r16,4(r4)
 400bd70:	10c0552e 	bgeu	r2,r3,400bec8 <__pack_d+0x180>
 400bd74:	00800104 	movi	r2,4
 400bd78:	18804f26 	beq	r3,r2,400beb8 <__pack_d+0x170>
 400bd7c:	00800084 	movi	r2,2
 400bd80:	18800226 	beq	r3,r2,400bd8c <__pack_d+0x44>
 400bd84:	4244b03a 	or	r2,r8,r9
 400bd88:	10001a1e 	bne	r2,zero,400bdf4 <__pack_d+0xac>
 400bd8c:	000d883a 	mov	r6,zero
 400bd90:	000f883a 	mov	r7,zero
 400bd94:	0011883a 	mov	r8,zero
 400bd98:	00800434 	movhi	r2,16
 400bd9c:	10bfffc4 	addi	r2,r2,-1
 400bda0:	301d883a 	mov	r14,r6
 400bda4:	3884703a 	and	r2,r7,r2
 400bda8:	400a953a 	slli	r5,r8,20
 400bdac:	79bffc2c 	andhi	r6,r15,65520
 400bdb0:	308cb03a 	or	r6,r6,r2
 400bdb4:	00e00434 	movhi	r3,32784
 400bdb8:	18ffffc4 	addi	r3,r3,-1
 400bdbc:	800497fa 	slli	r2,r16,31
 400bdc0:	30c6703a 	and	r3,r6,r3
 400bdc4:	1946b03a 	or	r3,r3,r5
 400bdc8:	01600034 	movhi	r5,32768
 400bdcc:	297fffc4 	addi	r5,r5,-1
 400bdd0:	194a703a 	and	r5,r3,r5
 400bdd4:	288ab03a 	or	r5,r5,r2
 400bdd8:	2807883a 	mov	r3,r5
 400bddc:	7005883a 	mov	r2,r14
 400bde0:	dc800217 	ldw	r18,8(sp)
 400bde4:	dc400117 	ldw	r17,4(sp)
 400bde8:	dc000017 	ldw	r16,0(sp)
 400bdec:	dec00304 	addi	sp,sp,12
 400bdf0:	f800283a 	ret
 400bdf4:	21000217 	ldw	r4,8(r4)
 400bdf8:	00bf0084 	movi	r2,-1022
 400bdfc:	20803f16 	blt	r4,r2,400befc <__pack_d+0x1b4>
 400be00:	0080ffc4 	movi	r2,1023
 400be04:	11002c16 	blt	r2,r4,400beb8 <__pack_d+0x170>
 400be08:	00803fc4 	movi	r2,255
 400be0c:	408c703a 	and	r6,r8,r2
 400be10:	00802004 	movi	r2,128
 400be14:	0007883a 	mov	r3,zero
 400be18:	000f883a 	mov	r7,zero
 400be1c:	2280ffc4 	addi	r10,r4,1023
 400be20:	30801e26 	beq	r6,r2,400be9c <__pack_d+0x154>
 400be24:	00801fc4 	movi	r2,127
 400be28:	4089883a 	add	r4,r8,r2
 400be2c:	220d803a 	cmpltu	r6,r4,r8
 400be30:	324d883a 	add	r6,r6,r9
 400be34:	2011883a 	mov	r8,r4
 400be38:	3013883a 	mov	r9,r6
 400be3c:	00880034 	movhi	r2,8192
 400be40:	10bfffc4 	addi	r2,r2,-1
 400be44:	12400d36 	bltu	r2,r9,400be7c <__pack_d+0x134>
 400be48:	4804963a 	slli	r2,r9,24
 400be4c:	400cd23a 	srli	r6,r8,8
 400be50:	480ed23a 	srli	r7,r9,8
 400be54:	013fffc4 	movi	r4,-1
 400be58:	118cb03a 	or	r6,r2,r6
 400be5c:	01400434 	movhi	r5,16
 400be60:	297fffc4 	addi	r5,r5,-1
 400be64:	3104703a 	and	r2,r6,r4
 400be68:	3946703a 	and	r3,r7,r5
 400be6c:	5201ffcc 	andi	r8,r10,2047
 400be70:	100d883a 	mov	r6,r2
 400be74:	180f883a 	mov	r7,r3
 400be78:	003fc706 	br	400bd98 <__pack_d+0x50>
 400be7c:	480897fa 	slli	r4,r9,31
 400be80:	4004d07a 	srli	r2,r8,1
 400be84:	4806d07a 	srli	r3,r9,1
 400be88:	52800044 	addi	r10,r10,1
 400be8c:	2084b03a 	or	r2,r4,r2
 400be90:	1011883a 	mov	r8,r2
 400be94:	1813883a 	mov	r9,r3
 400be98:	003feb06 	br	400be48 <__pack_d+0x100>
 400be9c:	383fe11e 	bne	r7,zero,400be24 <__pack_d+0xdc>
 400bea0:	01004004 	movi	r4,256
 400bea4:	4104703a 	and	r2,r8,r4
 400bea8:	10c4b03a 	or	r2,r2,r3
 400beac:	103fe326 	beq	r2,zero,400be3c <__pack_d+0xf4>
 400beb0:	3005883a 	mov	r2,r6
 400beb4:	003fdc06 	br	400be28 <__pack_d+0xe0>
 400beb8:	000d883a 	mov	r6,zero
 400bebc:	000f883a 	mov	r7,zero
 400bec0:	0201ffc4 	movi	r8,2047
 400bec4:	003fb406 	br	400bd98 <__pack_d+0x50>
 400bec8:	0005883a 	mov	r2,zero
 400becc:	00c00234 	movhi	r3,8
 400bed0:	408cb03a 	or	r6,r8,r2
 400bed4:	48ceb03a 	or	r7,r9,r3
 400bed8:	013fffc4 	movi	r4,-1
 400bedc:	01400434 	movhi	r5,16
 400bee0:	297fffc4 	addi	r5,r5,-1
 400bee4:	3104703a 	and	r2,r6,r4
 400bee8:	3946703a 	and	r3,r7,r5
 400beec:	100d883a 	mov	r6,r2
 400bef0:	180f883a 	mov	r7,r3
 400bef4:	0201ffc4 	movi	r8,2047
 400bef8:	003fa706 	br	400bd98 <__pack_d+0x50>
 400befc:	1109c83a 	sub	r4,r2,r4
 400bf00:	00800e04 	movi	r2,56
 400bf04:	11004316 	blt	r2,r4,400c014 <__pack_d+0x2cc>
 400bf08:	21fff804 	addi	r7,r4,-32
 400bf0c:	38004516 	blt	r7,zero,400c024 <__pack_d+0x2dc>
 400bf10:	49d8d83a 	srl	r12,r9,r7
 400bf14:	001b883a 	mov	r13,zero
 400bf18:	0023883a 	mov	r17,zero
 400bf1c:	01400044 	movi	r5,1
 400bf20:	0025883a 	mov	r18,zero
 400bf24:	38004716 	blt	r7,zero,400c044 <__pack_d+0x2fc>
 400bf28:	29d6983a 	sll	r11,r5,r7
 400bf2c:	0015883a 	mov	r10,zero
 400bf30:	00bfffc4 	movi	r2,-1
 400bf34:	5089883a 	add	r4,r10,r2
 400bf38:	588b883a 	add	r5,r11,r2
 400bf3c:	228d803a 	cmpltu	r6,r4,r10
 400bf40:	314b883a 	add	r5,r6,r5
 400bf44:	4104703a 	and	r2,r8,r4
 400bf48:	4946703a 	and	r3,r9,r5
 400bf4c:	10c4b03a 	or	r2,r2,r3
 400bf50:	10000226 	beq	r2,zero,400bf5c <__pack_d+0x214>
 400bf54:	04400044 	movi	r17,1
 400bf58:	0025883a 	mov	r18,zero
 400bf5c:	00803fc4 	movi	r2,255
 400bf60:	644eb03a 	or	r7,r12,r17
 400bf64:	3892703a 	and	r9,r7,r2
 400bf68:	00802004 	movi	r2,128
 400bf6c:	6c90b03a 	or	r8,r13,r18
 400bf70:	0015883a 	mov	r10,zero
 400bf74:	48801626 	beq	r9,r2,400bfd0 <__pack_d+0x288>
 400bf78:	01001fc4 	movi	r4,127
 400bf7c:	3905883a 	add	r2,r7,r4
 400bf80:	11cd803a 	cmpltu	r6,r2,r7
 400bf84:	320d883a 	add	r6,r6,r8
 400bf88:	100f883a 	mov	r7,r2
 400bf8c:	00840034 	movhi	r2,4096
 400bf90:	10bfffc4 	addi	r2,r2,-1
 400bf94:	3011883a 	mov	r8,r6
 400bf98:	0007883a 	mov	r3,zero
 400bf9c:	11801b36 	bltu	r2,r6,400c00c <__pack_d+0x2c4>
 400bfa0:	4004963a 	slli	r2,r8,24
 400bfa4:	3808d23a 	srli	r4,r7,8
 400bfa8:	400ad23a 	srli	r5,r8,8
 400bfac:	1813883a 	mov	r9,r3
 400bfb0:	1108b03a 	or	r4,r2,r4
 400bfb4:	00bfffc4 	movi	r2,-1
 400bfb8:	00c00434 	movhi	r3,16
 400bfbc:	18ffffc4 	addi	r3,r3,-1
 400bfc0:	208c703a 	and	r6,r4,r2
 400bfc4:	28ce703a 	and	r7,r5,r3
 400bfc8:	4a01ffcc 	andi	r8,r9,2047
 400bfcc:	003f7206 	br	400bd98 <__pack_d+0x50>
 400bfd0:	503fe91e 	bne	r10,zero,400bf78 <__pack_d+0x230>
 400bfd4:	01004004 	movi	r4,256
 400bfd8:	3904703a 	and	r2,r7,r4
 400bfdc:	0007883a 	mov	r3,zero
 400bfe0:	10c4b03a 	or	r2,r2,r3
 400bfe4:	10000626 	beq	r2,zero,400c000 <__pack_d+0x2b8>
 400bfe8:	3a45883a 	add	r2,r7,r9
 400bfec:	11cd803a 	cmpltu	r6,r2,r7
 400bff0:	320d883a 	add	r6,r6,r8
 400bff4:	100f883a 	mov	r7,r2
 400bff8:	3011883a 	mov	r8,r6
 400bffc:	0007883a 	mov	r3,zero
 400c000:	00840034 	movhi	r2,4096
 400c004:	10bfffc4 	addi	r2,r2,-1
 400c008:	123fe52e 	bgeu	r2,r8,400bfa0 <__pack_d+0x258>
 400c00c:	00c00044 	movi	r3,1
 400c010:	003fe306 	br	400bfa0 <__pack_d+0x258>
 400c014:	0009883a 	mov	r4,zero
 400c018:	0013883a 	mov	r9,zero
 400c01c:	000b883a 	mov	r5,zero
 400c020:	003fe406 	br	400bfb4 <__pack_d+0x26c>
 400c024:	4a47883a 	add	r3,r9,r9
 400c028:	008007c4 	movi	r2,31
 400c02c:	1105c83a 	sub	r2,r2,r4
 400c030:	1886983a 	sll	r3,r3,r2
 400c034:	4118d83a 	srl	r12,r8,r4
 400c038:	491ad83a 	srl	r13,r9,r4
 400c03c:	1b18b03a 	or	r12,r3,r12
 400c040:	003fb506 	br	400bf18 <__pack_d+0x1d0>
 400c044:	2806d07a 	srli	r3,r5,1
 400c048:	008007c4 	movi	r2,31
 400c04c:	1105c83a 	sub	r2,r2,r4
 400c050:	1896d83a 	srl	r11,r3,r2
 400c054:	2914983a 	sll	r10,r5,r4
 400c058:	003fb506 	br	400bf30 <__pack_d+0x1e8>

0400c05c <__unpack_d>:
 400c05c:	20c00117 	ldw	r3,4(r4)
 400c060:	22400017 	ldw	r9,0(r4)
 400c064:	00800434 	movhi	r2,16
 400c068:	10bfffc4 	addi	r2,r2,-1
 400c06c:	1808d53a 	srli	r4,r3,20
 400c070:	180cd7fa 	srli	r6,r3,31
 400c074:	1894703a 	and	r10,r3,r2
 400c078:	2201ffcc 	andi	r8,r4,2047
 400c07c:	281b883a 	mov	r13,r5
 400c080:	4817883a 	mov	r11,r9
 400c084:	29800115 	stw	r6,4(r5)
 400c088:	5019883a 	mov	r12,r10
 400c08c:	40001e1e 	bne	r8,zero,400c108 <__unpack_d+0xac>
 400c090:	4a84b03a 	or	r2,r9,r10
 400c094:	10001926 	beq	r2,zero,400c0fc <__unpack_d+0xa0>
 400c098:	4804d63a 	srli	r2,r9,24
 400c09c:	500c923a 	slli	r6,r10,8
 400c0a0:	013f0084 	movi	r4,-1022
 400c0a4:	00c40034 	movhi	r3,4096
 400c0a8:	18ffffc4 	addi	r3,r3,-1
 400c0ac:	118cb03a 	or	r6,r2,r6
 400c0b0:	008000c4 	movi	r2,3
 400c0b4:	480a923a 	slli	r5,r9,8
 400c0b8:	68800015 	stw	r2,0(r13)
 400c0bc:	69000215 	stw	r4,8(r13)
 400c0c0:	19800b36 	bltu	r3,r6,400c0f0 <__unpack_d+0x94>
 400c0c4:	200f883a 	mov	r7,r4
 400c0c8:	1811883a 	mov	r8,r3
 400c0cc:	2945883a 	add	r2,r5,r5
 400c0d0:	1149803a 	cmpltu	r4,r2,r5
 400c0d4:	3187883a 	add	r3,r6,r6
 400c0d8:	20c9883a 	add	r4,r4,r3
 400c0dc:	100b883a 	mov	r5,r2
 400c0e0:	200d883a 	mov	r6,r4
 400c0e4:	39ffffc4 	addi	r7,r7,-1
 400c0e8:	413ff82e 	bgeu	r8,r4,400c0cc <__unpack_d+0x70>
 400c0ec:	69c00215 	stw	r7,8(r13)
 400c0f0:	69800415 	stw	r6,16(r13)
 400c0f4:	69400315 	stw	r5,12(r13)
 400c0f8:	f800283a 	ret
 400c0fc:	00800084 	movi	r2,2
 400c100:	28800015 	stw	r2,0(r5)
 400c104:	f800283a 	ret
 400c108:	0081ffc4 	movi	r2,2047
 400c10c:	40800f26 	beq	r8,r2,400c14c <__unpack_d+0xf0>
 400c110:	480cd63a 	srli	r6,r9,24
 400c114:	5006923a 	slli	r3,r10,8
 400c118:	4804923a 	slli	r2,r9,8
 400c11c:	0009883a 	mov	r4,zero
 400c120:	30c6b03a 	or	r3,r6,r3
 400c124:	01440034 	movhi	r5,4096
 400c128:	110cb03a 	or	r6,r2,r4
 400c12c:	423f0044 	addi	r8,r8,-1023
 400c130:	194eb03a 	or	r7,r3,r5
 400c134:	008000c4 	movi	r2,3
 400c138:	69c00415 	stw	r7,16(r13)
 400c13c:	6a000215 	stw	r8,8(r13)
 400c140:	68800015 	stw	r2,0(r13)
 400c144:	69800315 	stw	r6,12(r13)
 400c148:	f800283a 	ret
 400c14c:	4a84b03a 	or	r2,r9,r10
 400c150:	1000031e 	bne	r2,zero,400c160 <__unpack_d+0x104>
 400c154:	00800104 	movi	r2,4
 400c158:	28800015 	stw	r2,0(r5)
 400c15c:	f800283a 	ret
 400c160:	0009883a 	mov	r4,zero
 400c164:	01400234 	movhi	r5,8
 400c168:	4904703a 	and	r2,r9,r4
 400c16c:	5146703a 	and	r3,r10,r5
 400c170:	10c4b03a 	or	r2,r2,r3
 400c174:	10000526 	beq	r2,zero,400c18c <__unpack_d+0x130>
 400c178:	00800044 	movi	r2,1
 400c17c:	68800015 	stw	r2,0(r13)
 400c180:	6b000415 	stw	r12,16(r13)
 400c184:	6ac00315 	stw	r11,12(r13)
 400c188:	f800283a 	ret
 400c18c:	68000015 	stw	zero,0(r13)
 400c190:	003ffb06 	br	400c180 <__unpack_d+0x124>

0400c194 <__fpcmp_parts_d>:
 400c194:	21800017 	ldw	r6,0(r4)
 400c198:	00c00044 	movi	r3,1
 400c19c:	19800a2e 	bgeu	r3,r6,400c1c8 <__fpcmp_parts_d+0x34>
 400c1a0:	28800017 	ldw	r2,0(r5)
 400c1a4:	1880082e 	bgeu	r3,r2,400c1c8 <__fpcmp_parts_d+0x34>
 400c1a8:	00c00104 	movi	r3,4
 400c1ac:	30c02626 	beq	r6,r3,400c248 <__fpcmp_parts_d+0xb4>
 400c1b0:	10c02226 	beq	r2,r3,400c23c <__fpcmp_parts_d+0xa8>
 400c1b4:	00c00084 	movi	r3,2
 400c1b8:	30c00526 	beq	r6,r3,400c1d0 <__fpcmp_parts_d+0x3c>
 400c1bc:	10c0071e 	bne	r2,r3,400c1dc <__fpcmp_parts_d+0x48>
 400c1c0:	20800117 	ldw	r2,4(r4)
 400c1c4:	1000091e 	bne	r2,zero,400c1ec <__fpcmp_parts_d+0x58>
 400c1c8:	00800044 	movi	r2,1
 400c1cc:	f800283a 	ret
 400c1d0:	10c01a1e 	bne	r2,r3,400c23c <__fpcmp_parts_d+0xa8>
 400c1d4:	0005883a 	mov	r2,zero
 400c1d8:	f800283a 	ret
 400c1dc:	22000117 	ldw	r8,4(r4)
 400c1e0:	28800117 	ldw	r2,4(r5)
 400c1e4:	40800326 	beq	r8,r2,400c1f4 <__fpcmp_parts_d+0x60>
 400c1e8:	403ff726 	beq	r8,zero,400c1c8 <__fpcmp_parts_d+0x34>
 400c1ec:	00bfffc4 	movi	r2,-1
 400c1f0:	f800283a 	ret
 400c1f4:	20c00217 	ldw	r3,8(r4)
 400c1f8:	28800217 	ldw	r2,8(r5)
 400c1fc:	10fffa16 	blt	r2,r3,400c1e8 <__fpcmp_parts_d+0x54>
 400c200:	18800916 	blt	r3,r2,400c228 <__fpcmp_parts_d+0x94>
 400c204:	21c00417 	ldw	r7,16(r4)
 400c208:	28c00417 	ldw	r3,16(r5)
 400c20c:	21800317 	ldw	r6,12(r4)
 400c210:	28800317 	ldw	r2,12(r5)
 400c214:	19fff436 	bltu	r3,r7,400c1e8 <__fpcmp_parts_d+0x54>
 400c218:	38c00526 	beq	r7,r3,400c230 <__fpcmp_parts_d+0x9c>
 400c21c:	38c00236 	bltu	r7,r3,400c228 <__fpcmp_parts_d+0x94>
 400c220:	19ffec1e 	bne	r3,r7,400c1d4 <__fpcmp_parts_d+0x40>
 400c224:	30bfeb2e 	bgeu	r6,r2,400c1d4 <__fpcmp_parts_d+0x40>
 400c228:	403fe71e 	bne	r8,zero,400c1c8 <__fpcmp_parts_d+0x34>
 400c22c:	003fef06 	br	400c1ec <__fpcmp_parts_d+0x58>
 400c230:	11bffa2e 	bgeu	r2,r6,400c21c <__fpcmp_parts_d+0x88>
 400c234:	403fe426 	beq	r8,zero,400c1c8 <__fpcmp_parts_d+0x34>
 400c238:	003fec06 	br	400c1ec <__fpcmp_parts_d+0x58>
 400c23c:	28800117 	ldw	r2,4(r5)
 400c240:	103fe11e 	bne	r2,zero,400c1c8 <__fpcmp_parts_d+0x34>
 400c244:	003fe906 	br	400c1ec <__fpcmp_parts_d+0x58>
 400c248:	11bfdd1e 	bne	r2,r6,400c1c0 <__fpcmp_parts_d+0x2c>
 400c24c:	28c00117 	ldw	r3,4(r5)
 400c250:	20800117 	ldw	r2,4(r4)
 400c254:	1885c83a 	sub	r2,r3,r2
 400c258:	f800283a 	ret

0400c25c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400c25c:	defff904 	addi	sp,sp,-28
 400c260:	dfc00615 	stw	ra,24(sp)
 400c264:	df000515 	stw	fp,20(sp)
 400c268:	df000504 	addi	fp,sp,20
 400c26c:	e13ffc15 	stw	r4,-16(fp)
 400c270:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400c274:	e0bffc17 	ldw	r2,-16(fp)
 400c278:	1004803a 	cmplt	r2,r2,zero
 400c27c:	1000081e 	bne	r2,zero,400c2a0 <fstat+0x44>
 400c280:	e0bffc17 	ldw	r2,-16(fp)
 400c284:	10800324 	muli	r2,r2,12
 400c288:	1007883a 	mov	r3,r2
 400c28c:	00810174 	movhi	r2,1029
 400c290:	10b8fa04 	addi	r2,r2,-7192
 400c294:	1887883a 	add	r3,r3,r2
 400c298:	e0ffff15 	stw	r3,-4(fp)
 400c29c:	00000106 	br	400c2a4 <fstat+0x48>
 400c2a0:	e03fff15 	stw	zero,-4(fp)
 400c2a4:	e0bfff17 	ldw	r2,-4(fp)
 400c2a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400c2ac:	e0bffb17 	ldw	r2,-20(fp)
 400c2b0:	1005003a 	cmpeq	r2,r2,zero
 400c2b4:	1000121e 	bne	r2,zero,400c300 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400c2b8:	e0bffb17 	ldw	r2,-20(fp)
 400c2bc:	10800017 	ldw	r2,0(r2)
 400c2c0:	10800817 	ldw	r2,32(r2)
 400c2c4:	1005003a 	cmpeq	r2,r2,zero
 400c2c8:	1000081e 	bne	r2,zero,400c2ec <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 400c2cc:	e0bffb17 	ldw	r2,-20(fp)
 400c2d0:	10800017 	ldw	r2,0(r2)
 400c2d4:	10800817 	ldw	r2,32(r2)
 400c2d8:	e13ffb17 	ldw	r4,-20(fp)
 400c2dc:	e17ffd17 	ldw	r5,-12(fp)
 400c2e0:	103ee83a 	callr	r2
 400c2e4:	e0bffe15 	stw	r2,-8(fp)
 400c2e8:	00000b06 	br	400c318 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400c2ec:	e0fffd17 	ldw	r3,-12(fp)
 400c2f0:	00880004 	movi	r2,8192
 400c2f4:	18800115 	stw	r2,4(r3)
      return 0;
 400c2f8:	e03ffe15 	stw	zero,-8(fp)
 400c2fc:	00000606 	br	400c318 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400c300:	400c3300 	call	400c330 <alt_get_errno>
 400c304:	1007883a 	mov	r3,r2
 400c308:	00801444 	movi	r2,81
 400c30c:	18800015 	stw	r2,0(r3)
    return -1;
 400c310:	00bfffc4 	movi	r2,-1
 400c314:	e0bffe15 	stw	r2,-8(fp)
 400c318:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400c31c:	e037883a 	mov	sp,fp
 400c320:	dfc00117 	ldw	ra,4(sp)
 400c324:	df000017 	ldw	fp,0(sp)
 400c328:	dec00204 	addi	sp,sp,8
 400c32c:	f800283a 	ret

0400c330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c330:	defffd04 	addi	sp,sp,-12
 400c334:	dfc00215 	stw	ra,8(sp)
 400c338:	df000115 	stw	fp,4(sp)
 400c33c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400c340:	00810174 	movhi	r2,1029
 400c344:	10ba0204 	addi	r2,r2,-6136
 400c348:	10800017 	ldw	r2,0(r2)
 400c34c:	1005003a 	cmpeq	r2,r2,zero
 400c350:	1000061e 	bne	r2,zero,400c36c <alt_get_errno+0x3c>
 400c354:	00810174 	movhi	r2,1029
 400c358:	10ba0204 	addi	r2,r2,-6136
 400c35c:	10800017 	ldw	r2,0(r2)
 400c360:	103ee83a 	callr	r2
 400c364:	e0bfff15 	stw	r2,-4(fp)
 400c368:	00000306 	br	400c378 <alt_get_errno+0x48>
 400c36c:	00810174 	movhi	r2,1029
 400c370:	10819f04 	addi	r2,r2,1660
 400c374:	e0bfff15 	stw	r2,-4(fp)
 400c378:	e0bfff17 	ldw	r2,-4(fp)
}
 400c37c:	e037883a 	mov	sp,fp
 400c380:	dfc00117 	ldw	ra,4(sp)
 400c384:	df000017 	ldw	fp,0(sp)
 400c388:	dec00204 	addi	sp,sp,8
 400c38c:	f800283a 	ret

0400c390 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400c390:	deffeb04 	addi	sp,sp,-84
 400c394:	dfc01415 	stw	ra,80(sp)
 400c398:	df001315 	stw	fp,76(sp)
 400c39c:	df001304 	addi	fp,sp,76
 400c3a0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400c3a4:	e0bffd17 	ldw	r2,-12(fp)
 400c3a8:	1004803a 	cmplt	r2,r2,zero
 400c3ac:	1000081e 	bne	r2,zero,400c3d0 <isatty+0x40>
 400c3b0:	e0bffd17 	ldw	r2,-12(fp)
 400c3b4:	10800324 	muli	r2,r2,12
 400c3b8:	1007883a 	mov	r3,r2
 400c3bc:	00810174 	movhi	r2,1029
 400c3c0:	10b8fa04 	addi	r2,r2,-7192
 400c3c4:	1887883a 	add	r3,r3,r2
 400c3c8:	e0ffff15 	stw	r3,-4(fp)
 400c3cc:	00000106 	br	400c3d4 <isatty+0x44>
 400c3d0:	e03fff15 	stw	zero,-4(fp)
 400c3d4:	e0bfff17 	ldw	r2,-4(fp)
 400c3d8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 400c3dc:	e0bfed17 	ldw	r2,-76(fp)
 400c3e0:	1005003a 	cmpeq	r2,r2,zero
 400c3e4:	10000f1e 	bne	r2,zero,400c424 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400c3e8:	e0bfed17 	ldw	r2,-76(fp)
 400c3ec:	10800017 	ldw	r2,0(r2)
 400c3f0:	10800817 	ldw	r2,32(r2)
 400c3f4:	1004c03a 	cmpne	r2,r2,zero
 400c3f8:	1000031e 	bne	r2,zero,400c408 <isatty+0x78>
    {
      return 1;
 400c3fc:	00800044 	movi	r2,1
 400c400:	e0bffe15 	stw	r2,-8(fp)
 400c404:	00000c06 	br	400c438 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400c408:	e17fee04 	addi	r5,fp,-72
 400c40c:	e13ffd17 	ldw	r4,-12(fp)
 400c410:	400c25c0 	call	400c25c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400c414:	e0bfef17 	ldw	r2,-68(fp)
 400c418:	10880020 	cmpeqi	r2,r2,8192
 400c41c:	e0bffe15 	stw	r2,-8(fp)
 400c420:	00000506 	br	400c438 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400c424:	400c4500 	call	400c450 <alt_get_errno>
 400c428:	1007883a 	mov	r3,r2
 400c42c:	00801444 	movi	r2,81
 400c430:	18800015 	stw	r2,0(r3)
    return 0;
 400c434:	e03ffe15 	stw	zero,-8(fp)
 400c438:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 400c43c:	e037883a 	mov	sp,fp
 400c440:	dfc00117 	ldw	ra,4(sp)
 400c444:	df000017 	ldw	fp,0(sp)
 400c448:	dec00204 	addi	sp,sp,8
 400c44c:	f800283a 	ret

0400c450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c450:	defffd04 	addi	sp,sp,-12
 400c454:	dfc00215 	stw	ra,8(sp)
 400c458:	df000115 	stw	fp,4(sp)
 400c45c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400c460:	00810174 	movhi	r2,1029
 400c464:	10ba0204 	addi	r2,r2,-6136
 400c468:	10800017 	ldw	r2,0(r2)
 400c46c:	1005003a 	cmpeq	r2,r2,zero
 400c470:	1000061e 	bne	r2,zero,400c48c <alt_get_errno+0x3c>
 400c474:	00810174 	movhi	r2,1029
 400c478:	10ba0204 	addi	r2,r2,-6136
 400c47c:	10800017 	ldw	r2,0(r2)
 400c480:	103ee83a 	callr	r2
 400c484:	e0bfff15 	stw	r2,-4(fp)
 400c488:	00000306 	br	400c498 <alt_get_errno+0x48>
 400c48c:	00810174 	movhi	r2,1029
 400c490:	10819f04 	addi	r2,r2,1660
 400c494:	e0bfff15 	stw	r2,-4(fp)
 400c498:	e0bfff17 	ldw	r2,-4(fp)
}
 400c49c:	e037883a 	mov	sp,fp
 400c4a0:	dfc00117 	ldw	ra,4(sp)
 400c4a4:	df000017 	ldw	fp,0(sp)
 400c4a8:	dec00204 	addi	sp,sp,8
 400c4ac:	f800283a 	ret

0400c4b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400c4b0:	defffe04 	addi	sp,sp,-8
 400c4b4:	dfc00115 	stw	ra,4(sp)
 400c4b8:	df000015 	stw	fp,0(sp)
 400c4bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400c4c0:	01010174 	movhi	r4,1029
 400c4c4:	213a1104 	addi	r4,r4,-6076
 400c4c8:	01410174 	movhi	r5,1029
 400c4cc:	29728e04 	addi	r5,r5,-13768
 400c4d0:	01810174 	movhi	r6,1029
 400c4d4:	31ba1104 	addi	r6,r6,-6076
 400c4d8:	400c5300 	call	400c530 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400c4dc:	01010034 	movhi	r4,1024
 400c4e0:	21000804 	addi	r4,r4,32
 400c4e4:	01410034 	movhi	r5,1024
 400c4e8:	29400804 	addi	r5,r5,32
 400c4ec:	01810034 	movhi	r6,1024
 400c4f0:	31806f04 	addi	r6,r6,444
 400c4f4:	400c5300 	call	400c530 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400c4f8:	01010134 	movhi	r4,1028
 400c4fc:	211af304 	addi	r4,r4,27596
 400c500:	01410134 	movhi	r5,1028
 400c504:	295af304 	addi	r5,r5,27596
 400c508:	01810174 	movhi	r6,1029
 400c50c:	31b28e04 	addi	r6,r6,-13768
 400c510:	400c5300 	call	400c530 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400c514:	40352580 	call	4035258 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400c518:	40355380 	call	4035538 <alt_icache_flush_all>
}
 400c51c:	e037883a 	mov	sp,fp
 400c520:	dfc00117 	ldw	ra,4(sp)
 400c524:	df000017 	ldw	fp,0(sp)
 400c528:	dec00204 	addi	sp,sp,8
 400c52c:	f800283a 	ret

0400c530 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400c530:	defffc04 	addi	sp,sp,-16
 400c534:	df000315 	stw	fp,12(sp)
 400c538:	df000304 	addi	fp,sp,12
 400c53c:	e13ffd15 	stw	r4,-12(fp)
 400c540:	e17ffe15 	stw	r5,-8(fp)
 400c544:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400c548:	e0fffe17 	ldw	r3,-8(fp)
 400c54c:	e0bffd17 	ldw	r2,-12(fp)
 400c550:	18800e26 	beq	r3,r2,400c58c <alt_load_section+0x5c>
  {
    while( to != end )
 400c554:	00000a06 	br	400c580 <alt_load_section+0x50>
    {
      *to++ = *from++;
 400c558:	e0bffd17 	ldw	r2,-12(fp)
 400c55c:	10c00017 	ldw	r3,0(r2)
 400c560:	e0bffe17 	ldw	r2,-8(fp)
 400c564:	10c00015 	stw	r3,0(r2)
 400c568:	e0bffe17 	ldw	r2,-8(fp)
 400c56c:	10800104 	addi	r2,r2,4
 400c570:	e0bffe15 	stw	r2,-8(fp)
 400c574:	e0bffd17 	ldw	r2,-12(fp)
 400c578:	10800104 	addi	r2,r2,4
 400c57c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400c580:	e0fffe17 	ldw	r3,-8(fp)
 400c584:	e0bfff17 	ldw	r2,-4(fp)
 400c588:	18bff31e 	bne	r3,r2,400c558 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 400c58c:	e037883a 	mov	sp,fp
 400c590:	df000017 	ldw	fp,0(sp)
 400c594:	dec00104 	addi	sp,sp,4
 400c598:	f800283a 	ret

0400c59c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400c59c:	defff804 	addi	sp,sp,-32
 400c5a0:	dfc00715 	stw	ra,28(sp)
 400c5a4:	df000615 	stw	fp,24(sp)
 400c5a8:	df000604 	addi	fp,sp,24
 400c5ac:	e13ffc15 	stw	r4,-16(fp)
 400c5b0:	e17ffd15 	stw	r5,-12(fp)
 400c5b4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400c5b8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400c5bc:	e0bffc17 	ldw	r2,-16(fp)
 400c5c0:	1004803a 	cmplt	r2,r2,zero
 400c5c4:	1000081e 	bne	r2,zero,400c5e8 <lseek+0x4c>
 400c5c8:	e0bffc17 	ldw	r2,-16(fp)
 400c5cc:	10800324 	muli	r2,r2,12
 400c5d0:	1007883a 	mov	r3,r2
 400c5d4:	00810174 	movhi	r2,1029
 400c5d8:	10b8fa04 	addi	r2,r2,-7192
 400c5dc:	1887883a 	add	r3,r3,r2
 400c5e0:	e0ffff15 	stw	r3,-4(fp)
 400c5e4:	00000106 	br	400c5ec <lseek+0x50>
 400c5e8:	e03fff15 	stw	zero,-4(fp)
 400c5ec:	e0bfff17 	ldw	r2,-4(fp)
 400c5f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 400c5f4:	e0bffb17 	ldw	r2,-20(fp)
 400c5f8:	1005003a 	cmpeq	r2,r2,zero
 400c5fc:	1000111e 	bne	r2,zero,400c644 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400c600:	e0bffb17 	ldw	r2,-20(fp)
 400c604:	10800017 	ldw	r2,0(r2)
 400c608:	10800717 	ldw	r2,28(r2)
 400c60c:	1005003a 	cmpeq	r2,r2,zero
 400c610:	1000091e 	bne	r2,zero,400c638 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400c614:	e0bffb17 	ldw	r2,-20(fp)
 400c618:	10800017 	ldw	r2,0(r2)
 400c61c:	10800717 	ldw	r2,28(r2)
 400c620:	e13ffb17 	ldw	r4,-20(fp)
 400c624:	e17ffd17 	ldw	r5,-12(fp)
 400c628:	e1bffe17 	ldw	r6,-8(fp)
 400c62c:	103ee83a 	callr	r2
 400c630:	e0bffa15 	stw	r2,-24(fp)
 400c634:	00000506 	br	400c64c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400c638:	00bfde84 	movi	r2,-134
 400c63c:	e0bffa15 	stw	r2,-24(fp)
 400c640:	00000206 	br	400c64c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400c644:	00bfebc4 	movi	r2,-81
 400c648:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 400c64c:	e0bffa17 	ldw	r2,-24(fp)
 400c650:	1004403a 	cmpge	r2,r2,zero
 400c654:	1000071e 	bne	r2,zero,400c674 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 400c658:	400c68c0 	call	400c68c <alt_get_errno>
 400c65c:	1007883a 	mov	r3,r2
 400c660:	e0bffa17 	ldw	r2,-24(fp)
 400c664:	0085c83a 	sub	r2,zero,r2
 400c668:	18800015 	stw	r2,0(r3)
    rc = -1;
 400c66c:	00bfffc4 	movi	r2,-1
 400c670:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 400c674:	e0bffa17 	ldw	r2,-24(fp)
}
 400c678:	e037883a 	mov	sp,fp
 400c67c:	dfc00117 	ldw	ra,4(sp)
 400c680:	df000017 	ldw	fp,0(sp)
 400c684:	dec00204 	addi	sp,sp,8
 400c688:	f800283a 	ret

0400c68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c68c:	defffd04 	addi	sp,sp,-12
 400c690:	dfc00215 	stw	ra,8(sp)
 400c694:	df000115 	stw	fp,4(sp)
 400c698:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 400c69c:	00810174 	movhi	r2,1029
 400c6a0:	10ba0204 	addi	r2,r2,-6136
 400c6a4:	10800017 	ldw	r2,0(r2)
 400c6a8:	1005003a 	cmpeq	r2,r2,zero
 400c6ac:	1000061e 	bne	r2,zero,400c6c8 <alt_get_errno+0x3c>
 400c6b0:	00810174 	movhi	r2,1029
 400c6b4:	10ba0204 	addi	r2,r2,-6136
 400c6b8:	10800017 	ldw	r2,0(r2)
 400c6bc:	103ee83a 	callr	r2
 400c6c0:	e0bfff15 	stw	r2,-4(fp)
 400c6c4:	00000306 	br	400c6d4 <alt_get_errno+0x48>
 400c6c8:	00810174 	movhi	r2,1029
 400c6cc:	10819f04 	addi	r2,r2,1660
 400c6d0:	e0bfff15 	stw	r2,-4(fp)
 400c6d4:	e0bfff17 	ldw	r2,-4(fp)
}
 400c6d8:	e037883a 	mov	sp,fp
 400c6dc:	dfc00117 	ldw	ra,4(sp)
 400c6e0:	df000017 	ldw	fp,0(sp)
 400c6e4:	dec00204 	addi	sp,sp,8
 400c6e8:	f800283a 	ret

0400c6ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400c6ec:	defffb04 	addi	sp,sp,-20
 400c6f0:	dfc00415 	stw	ra,16(sp)
 400c6f4:	df000315 	stw	fp,12(sp)
 400c6f8:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400c6fc:	0009883a 	mov	r4,zero
 400c700:	4014e180 	call	4014e18 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400c704:	400d4780 	call	400d478 <OSInit>
 400c708:	01000044 	movi	r4,1
 400c70c:	401233c0 	call	401233c <OSSemCreate>
 400c710:	1007883a 	mov	r3,r2
 400c714:	00810174 	movhi	r2,1029
 400c718:	1081a404 	addi	r2,r2,1680
 400c71c:	10c00015 	stw	r3,0(r2)
 400c720:	01000044 	movi	r4,1
 400c724:	401233c0 	call	401233c <OSSemCreate>
 400c728:	1007883a 	mov	r3,r2
 400c72c:	00810174 	movhi	r2,1029
 400c730:	1081a604 	addi	r2,r2,1688
 400c734:	10c00015 	stw	r3,0(r2)
 400c738:	00810174 	movhi	r2,1029
 400c73c:	1081f204 	addi	r2,r2,1992
 400c740:	e0bffd15 	stw	r2,-12(fp)
 400c744:	00800044 	movi	r2,1
 400c748:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 400c74c:	e13ffe0b 	ldhu	r4,-8(fp)
 400c750:	401233c0 	call	401233c <OSSemCreate>
 400c754:	1007883a 	mov	r3,r2
 400c758:	e0bffd17 	ldw	r2,-12(fp)
 400c75c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400c760:	4014e4c0 	call	4014e4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400c764:	01010174 	movhi	r4,1029
 400c768:	21221b04 	addi	r4,r4,-30612
 400c76c:	01410174 	movhi	r5,1029
 400c770:	29621b04 	addi	r5,r5,-30612
 400c774:	01810174 	movhi	r6,1029
 400c778:	31a21b04 	addi	r6,r6,-30612
 400c77c:	40358f80 	call	40358f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400c780:	40353dc0 	call	40353dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400c784:	010100f4 	movhi	r4,1027
 400c788:	21151004 	addi	r4,r4,21568
 400c78c:	4045e3c0 	call	4045e3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400c790:	d127e217 	ldw	r4,-24696(gp)
 400c794:	d167e317 	ldw	r5,-24692(gp)
 400c798:	d1a7e417 	ldw	r6,-24688(gp)
 400c79c:	4000e280 	call	4000e28 <main>
 400c7a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400c7a4:	01000044 	movi	r4,1
 400c7a8:	401d7e80 	call	401d7e8 <close>
  exit (result);
 400c7ac:	e13fff17 	ldw	r4,-4(fp)
 400c7b0:	4045e840 	call	4045e84 <exit>

0400c7b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400c7b4:	defff804 	addi	sp,sp,-32
 400c7b8:	df000715 	stw	fp,28(sp)
 400c7bc:	df000704 	addi	fp,sp,28
 400c7c0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c7c4:	0005303a 	rdctl	r2,status
 400c7c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c7cc:	e0fffb17 	ldw	r3,-20(fp)
 400c7d0:	00bfff84 	movi	r2,-2
 400c7d4:	1884703a 	and	r2,r3,r2
 400c7d8:	1001703a 	wrctl	status,r2
  
  return context;
 400c7dc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400c7e0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400c7e4:	d0a00717 	ldw	r2,-32740(gp)
 400c7e8:	10c000c4 	addi	r3,r2,3
 400c7ec:	00bfff04 	movi	r2,-4
 400c7f0:	1884703a 	and	r2,r3,r2
 400c7f4:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400c7f8:	d0e00717 	ldw	r3,-32740(gp)
 400c7fc:	e0bffe17 	ldw	r2,-8(fp)
 400c800:	1887883a 	add	r3,r3,r2
 400c804:	00818034 	movhi	r2,1536
 400c808:	10800004 	addi	r2,r2,0
 400c80c:	10c0072e 	bgeu	r2,r3,400c82c <sbrk+0x78>
 400c810:	e0bffd17 	ldw	r2,-12(fp)
 400c814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c818:	e0bffa17 	ldw	r2,-24(fp)
 400c81c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400c820:	00bfffc4 	movi	r2,-1
 400c824:	e0bfff15 	stw	r2,-4(fp)
 400c828:	00000c06 	br	400c85c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 400c82c:	d0a00717 	ldw	r2,-32740(gp)
 400c830:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 400c834:	d0e00717 	ldw	r3,-32740(gp)
 400c838:	e0bffe17 	ldw	r2,-8(fp)
 400c83c:	1885883a 	add	r2,r3,r2
 400c840:	d0a00715 	stw	r2,-32740(gp)
 400c844:	e0bffd17 	ldw	r2,-12(fp)
 400c848:	e0bff915 	stw	r2,-28(fp)
 400c84c:	e0bff917 	ldw	r2,-28(fp)
 400c850:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400c854:	e0bffc17 	ldw	r2,-16(fp)
 400c858:	e0bfff15 	stw	r2,-4(fp)
 400c85c:	e0bfff17 	ldw	r2,-4(fp)
} 
 400c860:	e037883a 	mov	sp,fp
 400c864:	df000017 	ldw	fp,0(sp)
 400c868:	dec00104 	addi	sp,sp,4
 400c86c:	f800283a 	ret

0400c870 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 400c870:	deffdf04 	addi	sp,sp,-132
 400c874:	dfc02015 	stw	ra,128(sp)
 400c878:	df001f15 	stw	fp,124(sp)
 400c87c:	df001f04 	addi	fp,sp,124
 400c880:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400c884:	e17fe204 	addi	r5,fp,-120
 400c888:	01003fc4 	movi	r4,255
 400c88c:	40146c40 	call	40146c4 <OSTaskQuery>
 400c890:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400c894:	e0bffe83 	ldbu	r2,-6(fp)
 400c898:	10803fcc 	andi	r2,r2,255
 400c89c:	1004c03a 	cmpne	r2,r2,zero
 400c8a0:	1000191e 	bne	r2,zero,400c908 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 400c8a4:	e0bfee83 	ldbu	r2,-70(fp)
 400c8a8:	10803fcc 	andi	r2,r2,255
 400c8ac:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400c8b0:	d127e617 	ldw	r4,-24680(gp)
 400c8b4:	e17ffd04 	addi	r5,fp,-12
 400c8b8:	4012c100 	call	4012c10 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 400c8bc:	e0bffe43 	ldbu	r2,-7(fp)
 400c8c0:	10803fcc 	andi	r2,r2,255
 400c8c4:	1005003a 	cmpeq	r2,r2,zero
 400c8c8:	1000071e 	bne	r2,zero,400c8e8 <__env_lock+0x78>
 400c8cc:	d0e00817 	ldw	r3,-32736(gp)
 400c8d0:	e0bfe117 	ldw	r2,-124(fp)
 400c8d4:	10c0041e 	bne	r2,r3,400c8e8 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 400c8d8:	d0a7e517 	ldw	r2,-24684(gp)
 400c8dc:	10800044 	addi	r2,r2,1
 400c8e0:	d0a7e515 	stw	r2,-24684(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 400c8e4:	00000806 	br	400c908 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 400c8e8:	d127e617 	ldw	r4,-24680(gp)
 400c8ec:	e1bffe84 	addi	r6,fp,-6
 400c8f0:	000b883a 	mov	r5,zero
 400c8f4:	40126f00 	call	40126f0 <OSSemPend>
    locks  = 1;
 400c8f8:	00800044 	movi	r2,1
 400c8fc:	d0a7e515 	stw	r2,-24684(gp)
    lockid = id;
 400c900:	e0bfe117 	ldw	r2,-124(fp)
 400c904:	d0a00815 	stw	r2,-32736(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400c908:	e037883a 	mov	sp,fp
 400c90c:	dfc00117 	ldw	ra,4(sp)
 400c910:	df000017 	ldw	fp,0(sp)
 400c914:	dec00204 	addi	sp,sp,8
 400c918:	f800283a 	ret

0400c91c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 400c91c:	defffd04 	addi	sp,sp,-12
 400c920:	dfc00215 	stw	ra,8(sp)
 400c924:	df000115 	stw	fp,4(sp)
 400c928:	df000104 	addi	fp,sp,4
 400c92c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 400c930:	d0a7e517 	ldw	r2,-24684(gp)
 400c934:	1005003a 	cmpeq	r2,r2,zero
 400c938:	10000a1e 	bne	r2,zero,400c964 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 400c93c:	d0a7e517 	ldw	r2,-24684(gp)
 400c940:	10bfffc4 	addi	r2,r2,-1
 400c944:	d0a7e515 	stw	r2,-24684(gp)
 400c948:	d0a7e517 	ldw	r2,-24684(gp)
 400c94c:	1004c03a 	cmpne	r2,r2,zero
 400c950:	1000041e 	bne	r2,zero,400c964 <__env_unlock+0x48>
  {
    lockid = -1;
 400c954:	00bfffc4 	movi	r2,-1
 400c958:	d0a00815 	stw	r2,-32736(gp)
    OSSemPost( alt_envsem );
 400c95c:	d127e617 	ldw	r4,-24680(gp)
 400c960:	4012ae80 	call	4012ae8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400c964:	e037883a 	mov	sp,fp
 400c968:	dfc00117 	ldw	ra,4(sp)
 400c96c:	df000017 	ldw	fp,0(sp)
 400c970:	dec00204 	addi	sp,sp,8
 400c974:	f800283a 	ret

0400c978 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 400c978:	deffdb04 	addi	sp,sp,-148
 400c97c:	dfc02415 	stw	ra,144(sp)
 400c980:	df002315 	stw	fp,140(sp)
 400c984:	df002304 	addi	fp,sp,140
 400c988:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400c98c:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 400c990:	00810174 	movhi	r2,1029
 400c994:	1081a744 	addi	r2,r2,1693
 400c998:	10800003 	ldbu	r2,0(r2)
 400c99c:	10803fcc 	andi	r2,r2,255
 400c9a0:	10800058 	cmpnei	r2,r2,1
 400c9a4:	1000311e 	bne	r2,zero,400ca6c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400c9a8:	e17fe204 	addi	r5,fp,-120
 400c9ac:	01003fc4 	movi	r4,255
 400c9b0:	40146c40 	call	40146c4 <OSTaskQuery>
 400c9b4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400c9b8:	e0bffe83 	ldbu	r2,-6(fp)
 400c9bc:	10803fcc 	andi	r2,r2,255
 400c9c0:	1004c03a 	cmpne	r2,r2,zero
 400c9c4:	1000291e 	bne	r2,zero,400ca6c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 400c9c8:	e0bfee83 	ldbu	r2,-70(fp)
 400c9cc:	10803fcc 	andi	r2,r2,255
 400c9d0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400c9d4:	d127e817 	ldw	r4,-24672(gp)
 400c9d8:	e17ffd04 	addi	r5,fp,-12
 400c9dc:	4012c100 	call	4012c10 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c9e0:	0005303a 	rdctl	r2,status
 400c9e4:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c9e8:	e0ffdf17 	ldw	r3,-132(fp)
 400c9ec:	00bfff84 	movi	r2,-2
 400c9f0:	1884703a 	and	r2,r3,r2
 400c9f4:	1001703a 	wrctl	status,r2
  
  return context;
 400c9f8:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 400c9fc:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 400ca00:	e0bffd0b 	ldhu	r2,-12(fp)
 400ca04:	10bfffcc 	andi	r2,r2,65535
 400ca08:	1004c03a 	cmpne	r2,r2,zero
 400ca0c:	10000b1e 	bne	r2,zero,400ca3c <__malloc_lock+0xc4>
 400ca10:	d0e00917 	ldw	r3,-32732(gp)
 400ca14:	e0bfe117 	ldw	r2,-124(fp)
 400ca18:	10c0081e 	bne	r2,r3,400ca3c <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 400ca1c:	d0a7e717 	ldw	r2,-24676(gp)
 400ca20:	10800044 	addi	r2,r2,1
 400ca24:	d0a7e715 	stw	r2,-24676(gp)
 400ca28:	e0bfe017 	ldw	r2,-128(fp)
 400ca2c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ca30:	e0bfde17 	ldw	r2,-136(fp)
 400ca34:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 400ca38:	00000c06 	br	400ca6c <__malloc_lock+0xf4>
 400ca3c:	e0bfe017 	ldw	r2,-128(fp)
 400ca40:	e0bfdd15 	stw	r2,-140(fp)
 400ca44:	e0bfdd17 	ldw	r2,-140(fp)
 400ca48:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 400ca4c:	d127e817 	ldw	r4,-24672(gp)
 400ca50:	e1bffe84 	addi	r6,fp,-6
 400ca54:	000b883a 	mov	r5,zero
 400ca58:	40126f00 	call	40126f0 <OSSemPend>
    locks  = 1;
 400ca5c:	00800044 	movi	r2,1
 400ca60:	d0a7e715 	stw	r2,-24676(gp)
    lockid = id;
 400ca64:	e0bfe117 	ldw	r2,-124(fp)
 400ca68:	d0a00915 	stw	r2,-32732(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400ca6c:	e037883a 	mov	sp,fp
 400ca70:	dfc00117 	ldw	ra,4(sp)
 400ca74:	df000017 	ldw	fp,0(sp)
 400ca78:	dec00204 	addi	sp,sp,8
 400ca7c:	f800283a 	ret

0400ca80 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ca80:	defff804 	addi	sp,sp,-32
 400ca84:	dfc00715 	stw	ra,28(sp)
 400ca88:	df000615 	stw	fp,24(sp)
 400ca8c:	df000604 	addi	fp,sp,24
 400ca90:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ca94:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 400ca98:	00810174 	movhi	r2,1029
 400ca9c:	1081a744 	addi	r2,r2,1693
 400caa0:	10800003 	ldbu	r2,0(r2)
 400caa4:	10803fcc 	andi	r2,r2,255
 400caa8:	10800058 	cmpnei	r2,r2,1
 400caac:	1000231e 	bne	r2,zero,400cb3c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cab0:	0005303a 	rdctl	r2,status
 400cab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cab8:	e0fffd17 	ldw	r3,-12(fp)
 400cabc:	00bfff84 	movi	r2,-2
 400cac0:	1884703a 	and	r2,r3,r2
 400cac4:	1001703a 	wrctl	status,r2
  
  return context;
 400cac8:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 400cacc:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 400cad0:	d0a7e717 	ldw	r2,-24676(gp)
 400cad4:	1004c03a 	cmpne	r2,r2,zero
 400cad8:	1000051e 	bne	r2,zero,400caf0 <__malloc_unlock+0x70>
 400cadc:	e0bffe17 	ldw	r2,-8(fp)
 400cae0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cae4:	e0bffc17 	ldw	r2,-16(fp)
 400cae8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 400caec:	00001306 	br	400cb3c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 400caf0:	d0a7e717 	ldw	r2,-24676(gp)
 400caf4:	10bfffc4 	addi	r2,r2,-1
 400caf8:	d0a7e715 	stw	r2,-24676(gp)
 400cafc:	d0a7e717 	ldw	r2,-24676(gp)
 400cb00:	1004c03a 	cmpne	r2,r2,zero
 400cb04:	1000091e 	bne	r2,zero,400cb2c <__malloc_unlock+0xac>
  {
    lockid = -1;
 400cb08:	00bfffc4 	movi	r2,-1
 400cb0c:	d0a00915 	stw	r2,-32732(gp)
 400cb10:	e0bffe17 	ldw	r2,-8(fp)
 400cb14:	e0bffb15 	stw	r2,-20(fp)
 400cb18:	e0bffb17 	ldw	r2,-20(fp)
 400cb1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 400cb20:	d127e817 	ldw	r4,-24672(gp)
 400cb24:	4012ae80 	call	4012ae8 <OSSemPost>
 400cb28:	00000406 	br	400cb3c <__malloc_unlock+0xbc>
 400cb2c:	e0bffe17 	ldw	r2,-8(fp)
 400cb30:	e0bffa15 	stw	r2,-24(fp)
 400cb34:	e0bffa17 	ldw	r2,-24(fp)
 400cb38:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400cb3c:	e037883a 	mov	sp,fp
 400cb40:	dfc00117 	ldw	ra,4(sp)
 400cb44:	df000017 	ldw	fp,0(sp)
 400cb48:	dec00204 	addi	sp,sp,8
 400cb4c:	f800283a 	ret

0400cb50 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400cb50:	defff604 	addi	sp,sp,-40
 400cb54:	dfc00915 	stw	ra,36(sp)
 400cb58:	df000815 	stw	fp,32(sp)
 400cb5c:	df000804 	addi	fp,sp,32
 400cb60:	e13ffc15 	stw	r4,-16(fp)
 400cb64:	e17ffd15 	stw	r5,-12(fp)
 400cb68:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400cb6c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400cb70:	e0bffe17 	ldw	r2,-8(fp)
 400cb74:	1004c03a 	cmpne	r2,r2,zero
 400cb78:	1000021e 	bne	r2,zero,400cb84 <OSEventNameGet+0x34>
        return (0);
 400cb7c:	e03fff15 	stw	zero,-4(fp)
 400cb80:	00003906 	br	400cc68 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400cb84:	e0bffc17 	ldw	r2,-16(fp)
 400cb88:	1004c03a 	cmpne	r2,r2,zero
 400cb8c:	1000051e 	bne	r2,zero,400cba4 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 400cb90:	e0fffe17 	ldw	r3,-8(fp)
 400cb94:	00800104 	movi	r2,4
 400cb98:	18800005 	stb	r2,0(r3)
        return (0);
 400cb9c:	e03fff15 	stw	zero,-4(fp)
 400cba0:	00003106 	br	400cc68 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400cba4:	e0bffd17 	ldw	r2,-12(fp)
 400cba8:	1004c03a 	cmpne	r2,r2,zero
 400cbac:	1000051e 	bne	r2,zero,400cbc4 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400cbb0:	e0fffe17 	ldw	r3,-8(fp)
 400cbb4:	00800304 	movi	r2,12
 400cbb8:	18800005 	stb	r2,0(r3)
        return (0);
 400cbbc:	e03fff15 	stw	zero,-4(fp)
 400cbc0:	00002906 	br	400cc68 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400cbc4:	d0a7f703 	ldbu	r2,-24612(gp)
 400cbc8:	10803fcc 	andi	r2,r2,255
 400cbcc:	1005003a 	cmpeq	r2,r2,zero
 400cbd0:	1000051e 	bne	r2,zero,400cbe8 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 400cbd4:	e0fffe17 	ldw	r3,-8(fp)
 400cbd8:	00800444 	movi	r2,17
 400cbdc:	18800005 	stb	r2,0(r3)
        return (0);
 400cbe0:	e03fff15 	stw	zero,-4(fp)
 400cbe4:	00002006 	br	400cc68 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 400cbe8:	e0bffc17 	ldw	r2,-16(fp)
 400cbec:	10800003 	ldbu	r2,0(r2)
 400cbf0:	10803fcc 	andi	r2,r2,255
 400cbf4:	10bfffc4 	addi	r2,r2,-1
 400cbf8:	10800128 	cmpgeui	r2,r2,4
 400cbfc:	1000161e 	bne	r2,zero,400cc58 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cc00:	0005303a 	rdctl	r2,status
 400cc04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cc08:	e0fff917 	ldw	r3,-28(fp)
 400cc0c:	00bfff84 	movi	r2,-2
 400cc10:	1884703a 	and	r2,r3,r2
 400cc14:	1001703a 	wrctl	status,r2
  
  return context;
 400cc18:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 400cc1c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 400cc20:	e0bffc17 	ldw	r2,-16(fp)
 400cc24:	11400384 	addi	r5,r2,14
 400cc28:	e13ffd17 	ldw	r4,-12(fp)
 400cc2c:	400e6d40 	call	400e6d4 <OS_StrCopy>
 400cc30:	e0bffb05 	stb	r2,-20(fp)
 400cc34:	e0bffa17 	ldw	r2,-24(fp)
 400cc38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cc3c:	e0bff817 	ldw	r2,-32(fp)
 400cc40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400cc44:	e0bffe17 	ldw	r2,-8(fp)
 400cc48:	10000005 	stb	zero,0(r2)
    return (len);
 400cc4c:	e0bffb03 	ldbu	r2,-20(fp)
 400cc50:	e0bfff15 	stw	r2,-4(fp)
 400cc54:	00000406 	br	400cc68 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400cc58:	e0fffe17 	ldw	r3,-8(fp)
 400cc5c:	00800044 	movi	r2,1
 400cc60:	18800005 	stb	r2,0(r3)
             return (0);
 400cc64:	e03fff15 	stw	zero,-4(fp)
 400cc68:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 400cc6c:	e037883a 	mov	sp,fp
 400cc70:	dfc00117 	ldw	ra,4(sp)
 400cc74:	df000017 	ldw	fp,0(sp)
 400cc78:	dec00204 	addi	sp,sp,8
 400cc7c:	f800283a 	ret

0400cc80 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400cc80:	defff604 	addi	sp,sp,-40
 400cc84:	dfc00915 	stw	ra,36(sp)
 400cc88:	df000815 	stw	fp,32(sp)
 400cc8c:	df000804 	addi	fp,sp,32
 400cc90:	e13ffd15 	stw	r4,-12(fp)
 400cc94:	e17ffe15 	stw	r5,-8(fp)
 400cc98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400cc9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400cca0:	e0bfff17 	ldw	r2,-4(fp)
 400cca4:	1005003a 	cmpeq	r2,r2,zero
 400cca8:	1000411e 	bne	r2,zero,400cdb0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400ccac:	e0bffd17 	ldw	r2,-12(fp)
 400ccb0:	1004c03a 	cmpne	r2,r2,zero
 400ccb4:	1000041e 	bne	r2,zero,400ccc8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 400ccb8:	e0ffff17 	ldw	r3,-4(fp)
 400ccbc:	00800104 	movi	r2,4
 400ccc0:	18800005 	stb	r2,0(r3)
        return;
 400ccc4:	00003a06 	br	400cdb0 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400ccc8:	e0bffe17 	ldw	r2,-8(fp)
 400cccc:	1004c03a 	cmpne	r2,r2,zero
 400ccd0:	1000041e 	bne	r2,zero,400cce4 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400ccd4:	e0ffff17 	ldw	r3,-4(fp)
 400ccd8:	00800304 	movi	r2,12
 400ccdc:	18800005 	stb	r2,0(r3)
        return;
 400cce0:	00003306 	br	400cdb0 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400cce4:	d0a7f703 	ldbu	r2,-24612(gp)
 400cce8:	10803fcc 	andi	r2,r2,255
 400ccec:	1005003a 	cmpeq	r2,r2,zero
 400ccf0:	1000041e 	bne	r2,zero,400cd04 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 400ccf4:	e0ffff17 	ldw	r3,-4(fp)
 400ccf8:	00800484 	movi	r2,18
 400ccfc:	18800005 	stb	r2,0(r3)
        return;
 400cd00:	00002b06 	br	400cdb0 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 400cd04:	e0bffd17 	ldw	r2,-12(fp)
 400cd08:	10800003 	ldbu	r2,0(r2)
 400cd0c:	10803fcc 	andi	r2,r2,255
 400cd10:	10bfffc4 	addi	r2,r2,-1
 400cd14:	10800128 	cmpgeui	r2,r2,4
 400cd18:	10000f1e 	bne	r2,zero,400cd58 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cd1c:	0005303a 	rdctl	r2,status
 400cd20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cd24:	e0fffa17 	ldw	r3,-24(fp)
 400cd28:	00bfff84 	movi	r2,-2
 400cd2c:	1884703a 	and	r2,r3,r2
 400cd30:	1001703a 	wrctl	status,r2
  
  return context;
 400cd34:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 400cd38:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 400cd3c:	e13ffe17 	ldw	r4,-8(fp)
 400cd40:	400e7540 	call	400e754 <OS_StrLen>
 400cd44:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 400cd48:	e0bffc03 	ldbu	r2,-16(fp)
 400cd4c:	10800828 	cmpgeui	r2,r2,32
 400cd50:	1000051e 	bne	r2,zero,400cd68 <OSEventNameSet+0xe8>
 400cd54:	00000c06 	br	400cd88 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400cd58:	e0ffff17 	ldw	r3,-4(fp)
 400cd5c:	00800044 	movi	r2,1
 400cd60:	18800005 	stb	r2,0(r3)
             return;
 400cd64:	00001206 	br	400cdb0 <OSEventNameSet+0x130>
 400cd68:	e0bffb17 	ldw	r2,-20(fp)
 400cd6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400cd70:	e0bff917 	ldw	r2,-28(fp)
 400cd74:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 400cd78:	e0ffff17 	ldw	r3,-4(fp)
 400cd7c:	008002c4 	movi	r2,11
 400cd80:	18800005 	stb	r2,0(r3)
        return;
 400cd84:	00000a06 	br	400cdb0 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 400cd88:	e0bffd17 	ldw	r2,-12(fp)
 400cd8c:	11000384 	addi	r4,r2,14
 400cd90:	e17ffe17 	ldw	r5,-8(fp)
 400cd94:	400e6d40 	call	400e6d4 <OS_StrCopy>
 400cd98:	e0bffb17 	ldw	r2,-20(fp)
 400cd9c:	e0bff815 	stw	r2,-32(fp)
 400cda0:	e0bff817 	ldw	r2,-32(fp)
 400cda4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400cda8:	e0bfff17 	ldw	r2,-4(fp)
 400cdac:	10000005 	stb	zero,0(r2)
}
 400cdb0:	e037883a 	mov	sp,fp
 400cdb4:	dfc00117 	ldw	ra,4(sp)
 400cdb8:	df000017 	ldw	fp,0(sp)
 400cdbc:	dec00204 	addi	sp,sp,8
 400cdc0:	f800283a 	ret

0400cdc4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 400cdc4:	deffe704 	addi	sp,sp,-100
 400cdc8:	dfc01815 	stw	ra,96(sp)
 400cdcc:	df001715 	stw	fp,92(sp)
 400cdd0:	df001704 	addi	fp,sp,92
 400cdd4:	e13ff615 	stw	r4,-40(fp)
 400cdd8:	e17ff715 	stw	r5,-36(fp)
 400cddc:	e1bff815 	stw	r6,-32(fp)
 400cde0:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 400cde4:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 400cde8:	e0800217 	ldw	r2,8(fp)
 400cdec:	1004c03a 	cmpne	r2,r2,zero
 400cdf0:	1000021e 	bne	r2,zero,400cdfc <OSEventPendMulti+0x38>
        return (0);
 400cdf4:	e03fff15 	stw	zero,-4(fp)
 400cdf8:	00019906 	br	400d460 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 400cdfc:	e0bff617 	ldw	r2,-40(fp)
 400ce00:	1004c03a 	cmpne	r2,r2,zero
 400ce04:	1000051e 	bne	r2,zero,400ce1c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 400ce08:	e0c00217 	ldw	r3,8(fp)
 400ce0c:	00800104 	movi	r2,4
 400ce10:	18800005 	stb	r2,0(r3)
        return (0);
 400ce14:	e03fff15 	stw	zero,-4(fp)
 400ce18:	00019106 	br	400d460 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 400ce1c:	e0bff717 	ldw	r2,-36(fp)
 400ce20:	1004c03a 	cmpne	r2,r2,zero
 400ce24:	1000051e 	bne	r2,zero,400ce3c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 400ce28:	e0c00217 	ldw	r3,8(fp)
 400ce2c:	00800104 	movi	r2,4
 400ce30:	18800005 	stb	r2,0(r3)
        return (0);
 400ce34:	e03fff15 	stw	zero,-4(fp)
 400ce38:	00018906 	br	400d460 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 400ce3c:	e0bff817 	ldw	r2,-32(fp)
 400ce40:	1004c03a 	cmpne	r2,r2,zero
 400ce44:	1000051e 	bne	r2,zero,400ce5c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 400ce48:	e0c00217 	ldw	r3,8(fp)
 400ce4c:	00800104 	movi	r2,4
 400ce50:	18800005 	stb	r2,0(r3)
        return (0);
 400ce54:	e03fff15 	stw	zero,-4(fp)
 400ce58:	00018106 	br	400d460 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 400ce5c:	e0bff717 	ldw	r2,-36(fp)
 400ce60:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 400ce64:	e0bff617 	ldw	r2,-40(fp)
 400ce68:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 400ce6c:	e0bff517 	ldw	r2,-44(fp)
 400ce70:	10800017 	ldw	r2,0(r2)
 400ce74:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 400ce78:	00001806 	br	400cedc <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 400ce7c:	e0bff417 	ldw	r2,-48(fp)
 400ce80:	10800003 	ldbu	r2,0(r2)
 400ce84:	10803fcc 	andi	r2,r2,255
 400ce88:	e0bffe15 	stw	r2,-8(fp)
 400ce8c:	e0fffe17 	ldw	r3,-8(fp)
 400ce90:	188000a0 	cmpeqi	r2,r3,2
 400ce94:	10000b1e 	bne	r2,zero,400cec4 <OSEventPendMulti+0x100>
 400ce98:	e0fffe17 	ldw	r3,-8(fp)
 400ce9c:	188000e0 	cmpeqi	r2,r3,3
 400cea0:	1000081e 	bne	r2,zero,400cec4 <OSEventPendMulti+0x100>
 400cea4:	e0fffe17 	ldw	r3,-8(fp)
 400cea8:	18800060 	cmpeqi	r2,r3,1
 400ceac:	1000051e 	bne	r2,zero,400cec4 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 400ceb0:	e0c00217 	ldw	r3,8(fp)
 400ceb4:	00800044 	movi	r2,1
 400ceb8:	18800005 	stb	r2,0(r3)
                 return (0);
 400cebc:	e03fff15 	stw	zero,-4(fp)
 400cec0:	00016706 	br	400d460 <OSEventPendMulti+0x69c>
        }
        pevents++;
 400cec4:	e0bff517 	ldw	r2,-44(fp)
 400cec8:	10800104 	addi	r2,r2,4
 400cecc:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 400ced0:	e0bff517 	ldw	r2,-44(fp)
 400ced4:	10800017 	ldw	r2,0(r2)
 400ced8:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 400cedc:	e0bff417 	ldw	r2,-48(fp)
 400cee0:	1004c03a 	cmpne	r2,r2,zero
 400cee4:	103fe51e 	bne	r2,zero,400ce7c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 400cee8:	d0a7f703 	ldbu	r2,-24612(gp)
 400ceec:	10803fcc 	andi	r2,r2,255
 400cef0:	1005003a 	cmpeq	r2,r2,zero
 400cef4:	1000051e 	bne	r2,zero,400cf0c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 400cef8:	e0c00217 	ldw	r3,8(fp)
 400cefc:	00800084 	movi	r2,2
 400cf00:	18800005 	stb	r2,0(r3)
        return (0);
 400cf04:	e03fff15 	stw	zero,-4(fp)
 400cf08:	00015506 	br	400d460 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 400cf0c:	d0a7e903 	ldbu	r2,-24668(gp)
 400cf10:	10803fcc 	andi	r2,r2,255
 400cf14:	1005003a 	cmpeq	r2,r2,zero
 400cf18:	1000051e 	bne	r2,zero,400cf30 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 400cf1c:	e0c00217 	ldw	r3,8(fp)
 400cf20:	00800344 	movi	r2,13
 400cf24:	18800005 	stb	r2,0(r3)
        return (0);
 400cf28:	e03fff15 	stw	zero,-4(fp)
 400cf2c:	00014c06 	br	400d460 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400cf30:	0005303a 	rdctl	r2,status
 400cf34:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400cf38:	e0ffef17 	ldw	r3,-68(fp)
 400cf3c:	00bfff84 	movi	r2,-2
 400cf40:	1884703a 	and	r2,r3,r2
 400cf44:	1001703a 	wrctl	status,r2
  
  return context;
 400cf48:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 400cf4c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 400cf50:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 400cf54:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 400cf58:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 400cf5c:	e0bff617 	ldw	r2,-40(fp)
 400cf60:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 400cf64:	e0bff517 	ldw	r2,-44(fp)
 400cf68:	10800017 	ldw	r2,0(r2)
 400cf6c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400cf70:	00008f06 	br	400d1b0 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 400cf74:	e0bff417 	ldw	r2,-48(fp)
 400cf78:	10800003 	ldbu	r2,0(r2)
 400cf7c:	10803fcc 	andi	r2,r2,255
 400cf80:	e0bffd15 	stw	r2,-12(fp)
 400cf84:	e0fffd17 	ldw	r3,-12(fp)
 400cf88:	188000a0 	cmpeqi	r2,r3,2
 400cf8c:	1000441e 	bne	r2,zero,400d0a0 <OSEventPendMulti+0x2dc>
 400cf90:	e0fffd17 	ldw	r3,-12(fp)
 400cf94:	188000e0 	cmpeqi	r2,r3,3
 400cf98:	1000041e 	bne	r2,zero,400cfac <OSEventPendMulti+0x1e8>
 400cf9c:	e0fffd17 	ldw	r3,-12(fp)
 400cfa0:	18800060 	cmpeqi	r2,r3,1
 400cfa4:	1000211e 	bne	r2,zero,400d02c <OSEventPendMulti+0x268>
 400cfa8:	00006f06 	br	400d168 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 400cfac:	e0bff417 	ldw	r2,-48(fp)
 400cfb0:	1080020b 	ldhu	r2,8(r2)
 400cfb4:	10bfffcc 	andi	r2,r2,65535
 400cfb8:	1005003a 	cmpeq	r2,r2,zero
 400cfbc:	1000171e 	bne	r2,zero,400d01c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 400cfc0:	e0bff417 	ldw	r2,-48(fp)
 400cfc4:	1080020b 	ldhu	r2,8(r2)
 400cfc8:	10bfffc4 	addi	r2,r2,-1
 400cfcc:	1007883a 	mov	r3,r2
 400cfd0:	e0bff417 	ldw	r2,-48(fp)
 400cfd4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400cfd8:	e0fff717 	ldw	r3,-36(fp)
 400cfdc:	e0bff417 	ldw	r2,-48(fp)
 400cfe0:	18800015 	stw	r2,0(r3)
 400cfe4:	e0bff717 	ldw	r2,-36(fp)
 400cfe8:	10800104 	addi	r2,r2,4
 400cfec:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 400cff0:	00800044 	movi	r2,1
 400cff4:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400cff8:	e0bff817 	ldw	r2,-32(fp)
 400cffc:	10000015 	stw	zero,0(r2)
 400d000:	e0bff817 	ldw	r2,-32(fp)
 400d004:	10800104 	addi	r2,r2,4
 400d008:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 400d00c:	e0bff18b 	ldhu	r2,-58(fp)
 400d010:	10800044 	addi	r2,r2,1
 400d014:	e0bff18d 	sth	r2,-58(fp)
 400d018:	00005f06 	br	400d198 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 400d01c:	e0bff103 	ldbu	r2,-60(fp)
 400d020:	10800054 	ori	r2,r2,1
 400d024:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400d028:	00005b06 	br	400d198 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 400d02c:	e0bff417 	ldw	r2,-48(fp)
 400d030:	10800117 	ldw	r2,4(r2)
 400d034:	1005003a 	cmpeq	r2,r2,zero
 400d038:	1000151e 	bne	r2,zero,400d090 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 400d03c:	e0bff417 	ldw	r2,-48(fp)
 400d040:	10c00117 	ldw	r3,4(r2)
 400d044:	e0bff817 	ldw	r2,-32(fp)
 400d048:	10c00015 	stw	r3,0(r2)
 400d04c:	e0bff817 	ldw	r2,-32(fp)
 400d050:	10800104 	addi	r2,r2,4
 400d054:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 400d058:	e0bff417 	ldw	r2,-48(fp)
 400d05c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 400d060:	e0fff717 	ldw	r3,-36(fp)
 400d064:	e0bff417 	ldw	r2,-48(fp)
 400d068:	18800015 	stw	r2,0(r3)
 400d06c:	e0bff717 	ldw	r2,-36(fp)
 400d070:	10800104 	addi	r2,r2,4
 400d074:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 400d078:	00800044 	movi	r2,1
 400d07c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 400d080:	e0bff18b 	ldhu	r2,-58(fp)
 400d084:	10800044 	addi	r2,r2,1
 400d088:	e0bff18d 	sth	r2,-58(fp)
 400d08c:	00004206 	br	400d198 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 400d090:	e0bff103 	ldbu	r2,-60(fp)
 400d094:	10800094 	ori	r2,r2,2
 400d098:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400d09c:	00003e06 	br	400d198 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 400d0a0:	e0bff417 	ldw	r2,-48(fp)
 400d0a4:	10800117 	ldw	r2,4(r2)
 400d0a8:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 400d0ac:	e0bff317 	ldw	r2,-52(fp)
 400d0b0:	1080058b 	ldhu	r2,22(r2)
 400d0b4:	10bfffcc 	andi	r2,r2,65535
 400d0b8:	1005003a 	cmpeq	r2,r2,zero
 400d0bc:	1000261e 	bne	r2,zero,400d158 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400d0c0:	e0bff317 	ldw	r2,-52(fp)
 400d0c4:	11000417 	ldw	r4,16(r2)
 400d0c8:	20c00017 	ldw	r3,0(r4)
 400d0cc:	e0bff817 	ldw	r2,-32(fp)
 400d0d0:	10c00015 	stw	r3,0(r2)
 400d0d4:	e0bff817 	ldw	r2,-32(fp)
 400d0d8:	10800104 	addi	r2,r2,4
 400d0dc:	e0bff815 	stw	r2,-32(fp)
 400d0e0:	20c00104 	addi	r3,r4,4
 400d0e4:	e0bff317 	ldw	r2,-52(fp)
 400d0e8:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 400d0ec:	e0bff317 	ldw	r2,-52(fp)
 400d0f0:	10c00417 	ldw	r3,16(r2)
 400d0f4:	e0bff317 	ldw	r2,-52(fp)
 400d0f8:	10800217 	ldw	r2,8(r2)
 400d0fc:	1880041e 	bne	r3,r2,400d110 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 400d100:	e0bff317 	ldw	r2,-52(fp)
 400d104:	10c00117 	ldw	r3,4(r2)
 400d108:	e0bff317 	ldw	r2,-52(fp)
 400d10c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400d110:	e0bff317 	ldw	r2,-52(fp)
 400d114:	1080058b 	ldhu	r2,22(r2)
 400d118:	10bfffc4 	addi	r2,r2,-1
 400d11c:	1007883a 	mov	r3,r2
 400d120:	e0bff317 	ldw	r2,-52(fp)
 400d124:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 400d128:	e0fff717 	ldw	r3,-36(fp)
 400d12c:	e0bff417 	ldw	r2,-48(fp)
 400d130:	18800015 	stw	r2,0(r3)
 400d134:	e0bff717 	ldw	r2,-36(fp)
 400d138:	10800104 	addi	r2,r2,4
 400d13c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 400d140:	00800044 	movi	r2,1
 400d144:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 400d148:	e0bff18b 	ldhu	r2,-58(fp)
 400d14c:	10800044 	addi	r2,r2,1
 400d150:	e0bff18d 	sth	r2,-58(fp)
 400d154:	00001006 	br	400d198 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 400d158:	e0bff103 	ldbu	r2,-60(fp)
 400d15c:	10800114 	ori	r2,r2,4
 400d160:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 400d164:	00000c06 	br	400d198 <OSEventPendMulti+0x3d4>
 400d168:	e0bff017 	ldw	r2,-64(fp)
 400d16c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d170:	e0bfee17 	ldw	r2,-72(fp)
 400d174:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400d178:	e0bff717 	ldw	r2,-36(fp)
 400d17c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 400d180:	e0c00217 	ldw	r3,8(fp)
 400d184:	00800044 	movi	r2,1
 400d188:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 400d18c:	e0bff18b 	ldhu	r2,-58(fp)
 400d190:	e0bfff15 	stw	r2,-4(fp)
 400d194:	0000b206 	br	400d460 <OSEventPendMulti+0x69c>
        }
        pevents++;
 400d198:	e0bff517 	ldw	r2,-44(fp)
 400d19c:	10800104 	addi	r2,r2,4
 400d1a0:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 400d1a4:	e0bff517 	ldw	r2,-44(fp)
 400d1a8:	10800017 	ldw	r2,0(r2)
 400d1ac:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400d1b0:	e0bff417 	ldw	r2,-48(fp)
 400d1b4:	1004c03a 	cmpne	r2,r2,zero
 400d1b8:	103f6e1e 	bne	r2,zero,400cf74 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 400d1bc:	e0bff203 	ldbu	r2,-56(fp)
 400d1c0:	10800058 	cmpnei	r2,r2,1
 400d1c4:	10000b1e 	bne	r2,zero,400d1f4 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 400d1c8:	e0bff717 	ldw	r2,-36(fp)
 400d1cc:	10000015 	stw	zero,0(r2)
 400d1d0:	e0bff017 	ldw	r2,-64(fp)
 400d1d4:	e0bfed15 	stw	r2,-76(fp)
 400d1d8:	e0bfed17 	ldw	r2,-76(fp)
 400d1dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 400d1e0:	e0800217 	ldw	r2,8(fp)
 400d1e4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 400d1e8:	e0fff18b 	ldhu	r3,-58(fp)
 400d1ec:	e0ffff15 	stw	r3,-4(fp)
 400d1f0:	00009b06 	br	400d460 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 400d1f4:	d127f817 	ldw	r4,-24608(gp)
 400d1f8:	d0a7f817 	ldw	r2,-24608(gp)
 400d1fc:	10c00c03 	ldbu	r3,48(r2)
 400d200:	e0bff103 	ldbu	r2,-60(fp)
 400d204:	1884b03a 	or	r2,r3,r2
 400d208:	1007883a 	mov	r3,r2
 400d20c:	00bfe004 	movi	r2,-128
 400d210:	1884b03a 	or	r2,r3,r2
 400d214:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400d218:	d0a7f817 	ldw	r2,-24608(gp)
 400d21c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 400d220:	d0e7f817 	ldw	r3,-24608(gp)
 400d224:	e0bff90b 	ldhu	r2,-28(fp)
 400d228:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 400d22c:	e13ff617 	ldw	r4,-40(fp)
 400d230:	400ddf40 	call	400ddf4 <OS_EventTaskWaitMulti>
 400d234:	e0bff017 	ldw	r2,-64(fp)
 400d238:	e0bfec15 	stw	r2,-80(fp)
 400d23c:	e0bfec17 	ldw	r2,-80(fp)
 400d240:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 400d244:	400e5900 	call	400e590 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d248:	0005303a 	rdctl	r2,status
 400d24c:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d250:	e0ffeb17 	ldw	r3,-84(fp)
 400d254:	00bfff84 	movi	r2,-2
 400d258:	1884703a 	and	r2,r3,r2
 400d25c:	1001703a 	wrctl	status,r2
  
  return context;
 400d260:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 400d264:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 400d268:	d0a7f817 	ldw	r2,-24608(gp)
 400d26c:	10800c43 	ldbu	r2,49(r2)
 400d270:	10803fcc 	andi	r2,r2,255
 400d274:	e0bffc15 	stw	r2,-16(fp)
 400d278:	e0fffc17 	ldw	r3,-16(fp)
 400d27c:	1805003a 	cmpeq	r2,r3,zero
 400d280:	1000041e 	bne	r2,zero,400d294 <OSEventPendMulti+0x4d0>
 400d284:	e0fffc17 	ldw	r3,-16(fp)
 400d288:	188000a0 	cmpeqi	r2,r3,2
 400d28c:	1000011e 	bne	r2,zero,400d294 <OSEventPendMulti+0x4d0>
 400d290:	00001906 	br	400d2f8 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 400d294:	d0a7f817 	ldw	r2,-24608(gp)
 400d298:	10800717 	ldw	r2,28(r2)
 400d29c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 400d2a0:	e0bff417 	ldw	r2,-48(fp)
 400d2a4:	1005003a 	cmpeq	r2,r2,zero
 400d2a8:	10000c1e 	bne	r2,zero,400d2dc <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400d2ac:	e0fff717 	ldw	r3,-36(fp)
 400d2b0:	e0bff417 	ldw	r2,-48(fp)
 400d2b4:	18800015 	stw	r2,0(r3)
 400d2b8:	e0bff717 	ldw	r2,-36(fp)
 400d2bc:	10800104 	addi	r2,r2,4
 400d2c0:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 400d2c4:	e0bff717 	ldw	r2,-36(fp)
 400d2c8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 400d2cc:	e0bff18b 	ldhu	r2,-58(fp)
 400d2d0:	10800044 	addi	r2,r2,1
 400d2d4:	e0bff18d 	sth	r2,-58(fp)
 400d2d8:	00000a06 	br	400d304 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 400d2dc:	d0a7f817 	ldw	r2,-24608(gp)
 400d2e0:	00c00044 	movi	r3,1
 400d2e4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400d2e8:	d127f817 	ldw	r4,-24608(gp)
 400d2ec:	e17ff617 	ldw	r5,-40(fp)
 400d2f0:	400e0000 	call	400e000 <OS_EventTaskRemoveMulti>
             }
			 break;
 400d2f4:	00000306 	br	400d304 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400d2f8:	d127f817 	ldw	r4,-24608(gp)
 400d2fc:	e17ff617 	ldw	r5,-40(fp)
 400d300:	400e0000 	call	400e000 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 400d304:	d0a7f817 	ldw	r2,-24608(gp)
 400d308:	10800c43 	ldbu	r2,49(r2)
 400d30c:	10803fcc 	andi	r2,r2,255
 400d310:	e0bffb15 	stw	r2,-20(fp)
 400d314:	e0fffb17 	ldw	r3,-20(fp)
 400d318:	1805003a 	cmpeq	r2,r3,zero
 400d31c:	1000041e 	bne	r2,zero,400d330 <OSEventPendMulti+0x56c>
 400d320:	e0fffb17 	ldw	r3,-20(fp)
 400d324:	188000a0 	cmpeqi	r2,r3,2
 400d328:	10002c1e 	bne	r2,zero,400d3dc <OSEventPendMulti+0x618>
 400d32c:	00003406 	br	400d400 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 400d330:	e0bff417 	ldw	r2,-48(fp)
 400d334:	10800003 	ldbu	r2,0(r2)
 400d338:	10803fcc 	andi	r2,r2,255
 400d33c:	e0bffa15 	stw	r2,-24(fp)
 400d340:	e0fffa17 	ldw	r3,-24(fp)
 400d344:	18800050 	cmplti	r2,r3,1
 400d348:	1000151e 	bne	r2,zero,400d3a0 <OSEventPendMulti+0x5dc>
 400d34c:	e0fffa17 	ldw	r3,-24(fp)
 400d350:	188000d0 	cmplti	r2,r3,3
 400d354:	10000a1e 	bne	r2,zero,400d380 <OSEventPendMulti+0x5bc>
 400d358:	e0fffa17 	ldw	r3,-24(fp)
 400d35c:	188000e0 	cmpeqi	r2,r3,3
 400d360:	1000011e 	bne	r2,zero,400d368 <OSEventPendMulti+0x5a4>
 400d364:	00000e06 	br	400d3a0 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 400d368:	e0bff817 	ldw	r2,-32(fp)
 400d36c:	10000015 	stw	zero,0(r2)
 400d370:	e0bff817 	ldw	r2,-32(fp)
 400d374:	10800104 	addi	r2,r2,4
 400d378:	e0bff815 	stw	r2,-32(fp)
                      break;
 400d37c:	00001406 	br	400d3d0 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 400d380:	d0a7f817 	ldw	r2,-24608(gp)
 400d384:	10c00917 	ldw	r3,36(r2)
 400d388:	e0bff817 	ldw	r2,-32(fp)
 400d38c:	10c00015 	stw	r3,0(r2)
 400d390:	e0bff817 	ldw	r2,-32(fp)
 400d394:	10800104 	addi	r2,r2,4
 400d398:	e0bff815 	stw	r2,-32(fp)
                      break;
 400d39c:	00000c06 	br	400d3d0 <OSEventPendMulti+0x60c>
 400d3a0:	e0bff017 	ldw	r2,-64(fp)
 400d3a4:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d3a8:	e0bfea17 	ldw	r2,-88(fp)
 400d3ac:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 400d3b0:	e0bff717 	ldw	r2,-36(fp)
 400d3b4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 400d3b8:	e0c00217 	ldw	r3,8(fp)
 400d3bc:	00800044 	movi	r2,1
 400d3c0:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 400d3c4:	e0bff18b 	ldhu	r2,-58(fp)
 400d3c8:	e0bfff15 	stw	r2,-4(fp)
 400d3cc:	00002406 	br	400d460 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 400d3d0:	e0800217 	ldw	r2,8(fp)
 400d3d4:	10000005 	stb	zero,0(r2)
             break;
 400d3d8:	00001106 	br	400d420 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 400d3dc:	e0bff817 	ldw	r2,-32(fp)
 400d3e0:	10000015 	stw	zero,0(r2)
 400d3e4:	e0bff817 	ldw	r2,-32(fp)
 400d3e8:	10800104 	addi	r2,r2,4
 400d3ec:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 400d3f0:	e0c00217 	ldw	r3,8(fp)
 400d3f4:	00800384 	movi	r2,14
 400d3f8:	18800005 	stb	r2,0(r3)
             break;
 400d3fc:	00000806 	br	400d420 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 400d400:	e0bff817 	ldw	r2,-32(fp)
 400d404:	10000015 	stw	zero,0(r2)
 400d408:	e0bff817 	ldw	r2,-32(fp)
 400d40c:	10800104 	addi	r2,r2,4
 400d410:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 400d414:	e0c00217 	ldw	r3,8(fp)
 400d418:	00800284 	movi	r2,10
 400d41c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 400d420:	d0a7f817 	ldw	r2,-24608(gp)
 400d424:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 400d428:	d0a7f817 	ldw	r2,-24608(gp)
 400d42c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 400d430:	d0a7f817 	ldw	r2,-24608(gp)
 400d434:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400d438:	d0a7f817 	ldw	r2,-24608(gp)
 400d43c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 400d440:	d0a7f817 	ldw	r2,-24608(gp)
 400d444:	10000915 	stw	zero,36(r2)
 400d448:	e0bff017 	ldw	r2,-64(fp)
 400d44c:	e0bfe915 	stw	r2,-92(fp)
 400d450:	e0bfe917 	ldw	r2,-92(fp)
 400d454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 400d458:	e0fff18b 	ldhu	r3,-58(fp)
 400d45c:	e0ffff15 	stw	r3,-4(fp)
 400d460:	e0bfff17 	ldw	r2,-4(fp)
}
 400d464:	e037883a 	mov	sp,fp
 400d468:	dfc00117 	ldw	ra,4(sp)
 400d46c:	df000017 	ldw	fp,0(sp)
 400d470:	dec00204 	addi	sp,sp,8
 400d474:	f800283a 	ret

0400d478 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 400d478:	defffe04 	addi	sp,sp,-8
 400d47c:	dfc00115 	stw	ra,4(sp)
 400d480:	df000015 	stw	fp,0(sp)
 400d484:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 400d488:	40367d00 	call	40367d0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 400d48c:	400e2480 	call	400e248 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 400d490:	400e28c0 	call	400e28c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 400d494:	400e3f00 	call	400e3f0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 400d498:	400e16c0 	call	400e16c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 400d49c:	40104a00 	call	40104a0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 400d4a0:	4010e780 	call	4010e78 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 400d4a4:	40121d00 	call	40121d0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 400d4a8:	400e2f80 	call	400e2f8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 400d4ac:	400e3740 	call	400e374 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 400d4b0:	40367ec0 	call	40367ec <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 400d4b4:	400ec780 	call	400ec78 <OSDebugInit>
#endif
}
 400d4b8:	e037883a 	mov	sp,fp
 400d4bc:	dfc00117 	ldw	ra,4(sp)
 400d4c0:	df000017 	ldw	fp,0(sp)
 400d4c4:	dec00204 	addi	sp,sp,8
 400d4c8:	f800283a 	ret

0400d4cc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 400d4cc:	defffc04 	addi	sp,sp,-16
 400d4d0:	df000315 	stw	fp,12(sp)
 400d4d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400d4d8:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 400d4dc:	d0a7e943 	ldbu	r2,-24667(gp)
 400d4e0:	10803fcc 	andi	r2,r2,255
 400d4e4:	10800058 	cmpnei	r2,r2,1
 400d4e8:	1000131e 	bne	r2,zero,400d538 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d4ec:	0005303a 	rdctl	r2,status
 400d4f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d4f4:	e0fffe17 	ldw	r3,-8(fp)
 400d4f8:	00bfff84 	movi	r2,-2
 400d4fc:	1884703a 	and	r2,r3,r2
 400d500:	1001703a 	wrctl	status,r2
  
  return context;
 400d504:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400d508:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 400d50c:	d0a7f703 	ldbu	r2,-24612(gp)
 400d510:	10803fcc 	andi	r2,r2,255
 400d514:	10803fe0 	cmpeqi	r2,r2,255
 400d518:	1000031e 	bne	r2,zero,400d528 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 400d51c:	d0a7f703 	ldbu	r2,-24612(gp)
 400d520:	10800044 	addi	r2,r2,1
 400d524:	d0a7f705 	stb	r2,-24612(gp)
 400d528:	e0bfff17 	ldw	r2,-4(fp)
 400d52c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d530:	e0bffd17 	ldw	r2,-12(fp)
 400d534:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 400d538:	e037883a 	mov	sp,fp
 400d53c:	df000017 	ldw	fp,0(sp)
 400d540:	dec00104 	addi	sp,sp,4
 400d544:	f800283a 	ret

0400d548 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 400d548:	defffb04 	addi	sp,sp,-20
 400d54c:	dfc00415 	stw	ra,16(sp)
 400d550:	df000315 	stw	fp,12(sp)
 400d554:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400d558:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 400d55c:	d0a7e943 	ldbu	r2,-24667(gp)
 400d560:	10803fcc 	andi	r2,r2,255
 400d564:	10800058 	cmpnei	r2,r2,1
 400d568:	1000321e 	bne	r2,zero,400d634 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d56c:	0005303a 	rdctl	r2,status
 400d570:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d574:	e0fffe17 	ldw	r3,-8(fp)
 400d578:	00bfff84 	movi	r2,-2
 400d57c:	1884703a 	and	r2,r3,r2
 400d580:	1001703a 	wrctl	status,r2
  
  return context;
 400d584:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400d588:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400d58c:	d0a7f703 	ldbu	r2,-24612(gp)
 400d590:	10803fcc 	andi	r2,r2,255
 400d594:	1005003a 	cmpeq	r2,r2,zero
 400d598:	1000031e 	bne	r2,zero,400d5a8 <OSIntExit+0x60>
            OSIntNesting--;
 400d59c:	d0a7f703 	ldbu	r2,-24612(gp)
 400d5a0:	10bfffc4 	addi	r2,r2,-1
 400d5a4:	d0a7f705 	stb	r2,-24612(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 400d5a8:	d0a7f703 	ldbu	r2,-24612(gp)
 400d5ac:	10803fcc 	andi	r2,r2,255
 400d5b0:	1004c03a 	cmpne	r2,r2,zero
 400d5b4:	10001b1e 	bne	r2,zero,400d624 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 400d5b8:	d0a7e903 	ldbu	r2,-24668(gp)
 400d5bc:	10803fcc 	andi	r2,r2,255
 400d5c0:	1004c03a 	cmpne	r2,r2,zero
 400d5c4:	1000171e 	bne	r2,zero,400d624 <OSIntExit+0xdc>
                OS_SchedNew();
 400d5c8:	400e6640 	call	400e664 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400d5cc:	d0a7eb03 	ldbu	r2,-24660(gp)
 400d5d0:	d0e7eb43 	ldbu	r3,-24659(gp)
 400d5d4:	11003fcc 	andi	r4,r2,255
 400d5d8:	18803fcc 	andi	r2,r3,255
 400d5dc:	20801126 	beq	r4,r2,400d624 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400d5e0:	d0a7eb03 	ldbu	r2,-24660(gp)
 400d5e4:	10803fcc 	andi	r2,r2,255
 400d5e8:	00c101b4 	movhi	r3,1030
 400d5ec:	18e09604 	addi	r3,r3,-32168
 400d5f0:	1085883a 	add	r2,r2,r2
 400d5f4:	1085883a 	add	r2,r2,r2
 400d5f8:	10c5883a 	add	r2,r2,r3
 400d5fc:	10800017 	ldw	r2,0(r2)
 400d600:	d0a7f315 	stw	r2,-24628(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 400d604:	d0e7f317 	ldw	r3,-24628(gp)
 400d608:	18800e17 	ldw	r2,56(r3)
 400d60c:	10800044 	addi	r2,r2,1
 400d610:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400d614:	d0a7ee17 	ldw	r2,-24648(gp)
 400d618:	10800044 	addi	r2,r2,1
 400d61c:	d0a7ee15 	stw	r2,-24648(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 400d620:	40363500 	call	4036350 <OSCtxSw>
 400d624:	e0bfff17 	ldw	r2,-4(fp)
 400d628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d62c:	e0bffd17 	ldw	r2,-12(fp)
 400d630:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400d634:	e037883a 	mov	sp,fp
 400d638:	dfc00117 	ldw	ra,4(sp)
 400d63c:	df000017 	ldw	fp,0(sp)
 400d640:	dec00204 	addi	sp,sp,8
 400d644:	f800283a 	ret

0400d648 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 400d648:	defffc04 	addi	sp,sp,-16
 400d64c:	df000315 	stw	fp,12(sp)
 400d650:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400d654:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 400d658:	d0a7e943 	ldbu	r2,-24667(gp)
 400d65c:	10803fcc 	andi	r2,r2,255
 400d660:	10800058 	cmpnei	r2,r2,1
 400d664:	1000171e 	bne	r2,zero,400d6c4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d668:	0005303a 	rdctl	r2,status
 400d66c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d670:	e0fffe17 	ldw	r3,-8(fp)
 400d674:	00bfff84 	movi	r2,-2
 400d678:	1884703a 	and	r2,r3,r2
 400d67c:	1001703a 	wrctl	status,r2
  
  return context;
 400d680:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400d684:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400d688:	d0a7f703 	ldbu	r2,-24612(gp)
 400d68c:	10803fcc 	andi	r2,r2,255
 400d690:	1004c03a 	cmpne	r2,r2,zero
 400d694:	1000071e 	bne	r2,zero,400d6b4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400d698:	d0a7e903 	ldbu	r2,-24668(gp)
 400d69c:	10803fcc 	andi	r2,r2,255
 400d6a0:	10803fe0 	cmpeqi	r2,r2,255
 400d6a4:	1000031e 	bne	r2,zero,400d6b4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400d6a8:	d0a7e903 	ldbu	r2,-24668(gp)
 400d6ac:	10800044 	addi	r2,r2,1
 400d6b0:	d0a7e905 	stb	r2,-24668(gp)
 400d6b4:	e0bfff17 	ldw	r2,-4(fp)
 400d6b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d6bc:	e0bffd17 	ldw	r2,-12(fp)
 400d6c0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400d6c4:	e037883a 	mov	sp,fp
 400d6c8:	df000017 	ldw	fp,0(sp)
 400d6cc:	dec00104 	addi	sp,sp,4
 400d6d0:	f800283a 	ret

0400d6d4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 400d6d4:	defff804 	addi	sp,sp,-32
 400d6d8:	dfc00715 	stw	ra,28(sp)
 400d6dc:	df000615 	stw	fp,24(sp)
 400d6e0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400d6e4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400d6e8:	d0a7e943 	ldbu	r2,-24667(gp)
 400d6ec:	10803fcc 	andi	r2,r2,255
 400d6f0:	10800058 	cmpnei	r2,r2,1
 400d6f4:	10002b1e 	bne	r2,zero,400d7a4 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d6f8:	0005303a 	rdctl	r2,status
 400d6fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d700:	e0fffe17 	ldw	r3,-8(fp)
 400d704:	00bfff84 	movi	r2,-2
 400d708:	1884703a 	and	r2,r3,r2
 400d70c:	1001703a 	wrctl	status,r2
  
  return context;
 400d710:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 400d714:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400d718:	d0a7e903 	ldbu	r2,-24668(gp)
 400d71c:	10803fcc 	andi	r2,r2,255
 400d720:	1005003a 	cmpeq	r2,r2,zero
 400d724:	10001b1e 	bne	r2,zero,400d794 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 400d728:	d0a7e903 	ldbu	r2,-24668(gp)
 400d72c:	10bfffc4 	addi	r2,r2,-1
 400d730:	d0a7e905 	stb	r2,-24668(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 400d734:	d0a7e903 	ldbu	r2,-24668(gp)
 400d738:	10803fcc 	andi	r2,r2,255
 400d73c:	1004c03a 	cmpne	r2,r2,zero
 400d740:	10000f1e 	bne	r2,zero,400d780 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 400d744:	d0a7f703 	ldbu	r2,-24612(gp)
 400d748:	10803fcc 	andi	r2,r2,255
 400d74c:	1004c03a 	cmpne	r2,r2,zero
 400d750:	1000061e 	bne	r2,zero,400d76c <OSSchedUnlock+0x98>
 400d754:	e0bfff17 	ldw	r2,-4(fp)
 400d758:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d75c:	e0bffd17 	ldw	r2,-12(fp)
 400d760:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 400d764:	400e5900 	call	400e590 <OS_Sched>
 400d768:	00000e06 	br	400d7a4 <OSSchedUnlock+0xd0>
 400d76c:	e0bfff17 	ldw	r2,-4(fp)
 400d770:	e0bffc15 	stw	r2,-16(fp)
 400d774:	e0bffc17 	ldw	r2,-16(fp)
 400d778:	1001703a 	wrctl	status,r2
 400d77c:	00000906 	br	400d7a4 <OSSchedUnlock+0xd0>
 400d780:	e0bfff17 	ldw	r2,-4(fp)
 400d784:	e0bffb15 	stw	r2,-20(fp)
 400d788:	e0bffb17 	ldw	r2,-20(fp)
 400d78c:	1001703a 	wrctl	status,r2
 400d790:	00000406 	br	400d7a4 <OSSchedUnlock+0xd0>
 400d794:	e0bfff17 	ldw	r2,-4(fp)
 400d798:	e0bffa15 	stw	r2,-24(fp)
 400d79c:	e0bffa17 	ldw	r2,-24(fp)
 400d7a0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 400d7a4:	e037883a 	mov	sp,fp
 400d7a8:	dfc00117 	ldw	ra,4(sp)
 400d7ac:	df000017 	ldw	fp,0(sp)
 400d7b0:	dec00204 	addi	sp,sp,8
 400d7b4:	f800283a 	ret

0400d7b8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 400d7b8:	defffe04 	addi	sp,sp,-8
 400d7bc:	dfc00115 	stw	ra,4(sp)
 400d7c0:	df000015 	stw	fp,0(sp)
 400d7c4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 400d7c8:	d0a7e943 	ldbu	r2,-24667(gp)
 400d7cc:	10803fcc 	andi	r2,r2,255
 400d7d0:	1004c03a 	cmpne	r2,r2,zero
 400d7d4:	10000f1e 	bne	r2,zero,400d814 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 400d7d8:	400e6640 	call	400e664 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 400d7dc:	d0a7eb03 	ldbu	r2,-24660(gp)
 400d7e0:	d0a7eb45 	stb	r2,-24659(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400d7e4:	d0a7eb03 	ldbu	r2,-24660(gp)
 400d7e8:	10803fcc 	andi	r2,r2,255
 400d7ec:	00c101b4 	movhi	r3,1030
 400d7f0:	18e09604 	addi	r3,r3,-32168
 400d7f4:	1085883a 	add	r2,r2,r2
 400d7f8:	1085883a 	add	r2,r2,r2
 400d7fc:	10c5883a 	add	r2,r2,r3
 400d800:	10800017 	ldw	r2,0(r2)
 400d804:	d0a7f315 	stw	r2,-24628(gp)
        OSTCBCur      = OSTCBHighRdy;
 400d808:	d0a7f317 	ldw	r2,-24628(gp)
 400d80c:	d0a7f815 	stw	r2,-24608(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 400d810:	40363dc0 	call	40363dc <OSStartHighRdy>
    }
}
 400d814:	e037883a 	mov	sp,fp
 400d818:	dfc00117 	ldw	ra,4(sp)
 400d81c:	df000017 	ldw	fp,0(sp)
 400d820:	dec00204 	addi	sp,sp,8
 400d824:	f800283a 	ret

0400d828 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 400d828:	defff904 	addi	sp,sp,-28
 400d82c:	dfc00615 	stw	ra,24(sp)
 400d830:	df000515 	stw	fp,20(sp)
 400d834:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400d838:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 400d83c:	01000084 	movi	r4,2
 400d840:	40148840 	call	4014884 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d844:	0005303a 	rdctl	r2,status
 400d848:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d84c:	e0fffe17 	ldw	r3,-8(fp)
 400d850:	00bfff84 	movi	r2,-2
 400d854:	1884703a 	and	r2,r3,r2
 400d858:	1001703a 	wrctl	status,r2
  
  return context;
 400d85c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 400d860:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 400d864:	d027ea15 	stw	zero,-24664(gp)
 400d868:	e0bfff17 	ldw	r2,-4(fp)
 400d86c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d870:	e0bffd17 	ldw	r2,-12(fp)
 400d874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 400d878:	01000284 	movi	r4,10
 400d87c:	40148840 	call	4014884 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d880:	0005303a 	rdctl	r2,status
 400d884:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d888:	e0fffc17 	ldw	r3,-16(fp)
 400d88c:	00bfff84 	movi	r2,-2
 400d890:	1884703a 	and	r2,r3,r2
 400d894:	1001703a 	wrctl	status,r2
  
  return context;
 400d898:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 400d89c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 400d8a0:	d0a7ea17 	ldw	r2,-24664(gp)
 400d8a4:	d0a7ef15 	stw	r2,-24644(gp)
    OSStatRdy    = OS_TRUE;
 400d8a8:	00800044 	movi	r2,1
 400d8ac:	d0a7fb05 	stb	r2,-24596(gp)
 400d8b0:	e0bfff17 	ldw	r2,-4(fp)
 400d8b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d8b8:	e0bffb17 	ldw	r2,-20(fp)
 400d8bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 400d8c0:	e037883a 	mov	sp,fp
 400d8c4:	dfc00117 	ldw	ra,4(sp)
 400d8c8:	df000017 	ldw	fp,0(sp)
 400d8cc:	dec00204 	addi	sp,sp,8
 400d8d0:	f800283a 	ret

0400d8d4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 400d8d4:	defff604 	addi	sp,sp,-40
 400d8d8:	dfc00915 	stw	ra,36(sp)
 400d8dc:	df000815 	stw	fp,32(sp)
 400d8e0:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400d8e4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 400d8e8:	40367a80 	call	40367a8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d8ec:	0005303a 	rdctl	r2,status
 400d8f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d8f4:	e0fffb17 	ldw	r3,-20(fp)
 400d8f8:	00bfff84 	movi	r2,-2
 400d8fc:	1884703a 	and	r2,r3,r2
 400d900:	1001703a 	wrctl	status,r2
  
  return context;
 400d904:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 400d908:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 400d90c:	d0a7f917 	ldw	r2,-24604(gp)
 400d910:	10800044 	addi	r2,r2,1
 400d914:	d0a7f915 	stw	r2,-24604(gp)
 400d918:	e0bffc17 	ldw	r2,-16(fp)
 400d91c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d920:	e0bffa17 	ldw	r2,-24(fp)
 400d924:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 400d928:	d0a7e943 	ldbu	r2,-24667(gp)
 400d92c:	10803fcc 	andi	r2,r2,255
 400d930:	10800058 	cmpnei	r2,r2,1
 400d934:	1000721e 	bne	r2,zero,400db00 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 400d938:	d0a7ed03 	ldbu	r2,-24652(gp)
 400d93c:	10803fcc 	andi	r2,r2,255
 400d940:	e0bfff15 	stw	r2,-4(fp)
 400d944:	e0ffff17 	ldw	r3,-4(fp)
 400d948:	18800060 	cmpeqi	r2,r3,1
 400d94c:	10000a1e 	bne	r2,zero,400d978 <OSTimeTick+0xa4>
 400d950:	e0ffff17 	ldw	r3,-4(fp)
 400d954:	188000a0 	cmpeqi	r2,r3,2
 400d958:	1000091e 	bne	r2,zero,400d980 <OSTimeTick+0xac>
 400d95c:	e0ffff17 	ldw	r3,-4(fp)
 400d960:	1805003a 	cmpeq	r2,r3,zero
 400d964:	1000011e 	bne	r2,zero,400d96c <OSTimeTick+0x98>
 400d968:	00000a06 	br	400d994 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 400d96c:	00800044 	movi	r2,1
 400d970:	e0bffd05 	stb	r2,-12(fp)
                 break;
 400d974:	00000a06 	br	400d9a0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 400d978:	e03ffd05 	stb	zero,-12(fp)
                 break;
 400d97c:	00000806 	br	400d9a0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 400d980:	00800044 	movi	r2,1
 400d984:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 400d988:	00800044 	movi	r2,1
 400d98c:	d0a7ed05 	stb	r2,-24652(gp)
                 break;
 400d990:	00000306 	br	400d9a0 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 400d994:	00800044 	movi	r2,1
 400d998:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 400d99c:	d027ed05 	stb	zero,-24652(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 400d9a0:	e0bffd03 	ldbu	r2,-12(fp)
 400d9a4:	1005003a 	cmpeq	r2,r2,zero
 400d9a8:	1000551e 	bne	r2,zero,400db00 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 400d9ac:	d0a7ec17 	ldw	r2,-24656(gp)
 400d9b0:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400d9b4:	00004d06 	br	400daec <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d9b8:	0005303a 	rdctl	r2,status
 400d9bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d9c0:	e0fff917 	ldw	r3,-28(fp)
 400d9c4:	00bfff84 	movi	r2,-2
 400d9c8:	1884703a 	and	r2,r3,r2
 400d9cc:	1001703a 	wrctl	status,r2
  
  return context;
 400d9d0:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 400d9d4:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 400d9d8:	e0bffe17 	ldw	r2,-8(fp)
 400d9dc:	10800b8b 	ldhu	r2,46(r2)
 400d9e0:	10bfffcc 	andi	r2,r2,65535
 400d9e4:	1005003a 	cmpeq	r2,r2,zero
 400d9e8:	1000391e 	bne	r2,zero,400dad0 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 400d9ec:	e0bffe17 	ldw	r2,-8(fp)
 400d9f0:	10800b8b 	ldhu	r2,46(r2)
 400d9f4:	10bfffc4 	addi	r2,r2,-1
 400d9f8:	1007883a 	mov	r3,r2
 400d9fc:	e0bffe17 	ldw	r2,-8(fp)
 400da00:	10c00b8d 	sth	r3,46(r2)
 400da04:	e0bffe17 	ldw	r2,-8(fp)
 400da08:	10800b8b 	ldhu	r2,46(r2)
 400da0c:	10bfffcc 	andi	r2,r2,65535
 400da10:	1004c03a 	cmpne	r2,r2,zero
 400da14:	10002e1e 	bne	r2,zero,400dad0 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400da18:	e0bffe17 	ldw	r2,-8(fp)
 400da1c:	10800c03 	ldbu	r2,48(r2)
 400da20:	10803fcc 	andi	r2,r2,255
 400da24:	10800dcc 	andi	r2,r2,55
 400da28:	1005003a 	cmpeq	r2,r2,zero
 400da2c:	10000b1e 	bne	r2,zero,400da5c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 400da30:	e0bffe17 	ldw	r2,-8(fp)
 400da34:	10c00c03 	ldbu	r3,48(r2)
 400da38:	00bff204 	movi	r2,-56
 400da3c:	1884703a 	and	r2,r3,r2
 400da40:	1007883a 	mov	r3,r2
 400da44:	e0bffe17 	ldw	r2,-8(fp)
 400da48:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 400da4c:	e0fffe17 	ldw	r3,-8(fp)
 400da50:	00800044 	movi	r2,1
 400da54:	18800c45 	stb	r2,49(r3)
 400da58:	00000206 	br	400da64 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400da5c:	e0bffe17 	ldw	r2,-8(fp)
 400da60:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 400da64:	e0bffe17 	ldw	r2,-8(fp)
 400da68:	10800c03 	ldbu	r2,48(r2)
 400da6c:	10803fcc 	andi	r2,r2,255
 400da70:	1080020c 	andi	r2,r2,8
 400da74:	1004c03a 	cmpne	r2,r2,zero
 400da78:	1000151e 	bne	r2,zero,400dad0 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 400da7c:	e0bffe17 	ldw	r2,-8(fp)
 400da80:	10c00d83 	ldbu	r3,54(r2)
 400da84:	d0a7f503 	ldbu	r2,-24620(gp)
 400da88:	1884b03a 	or	r2,r3,r2
 400da8c:	d0a7f505 	stb	r2,-24620(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400da90:	e0bffe17 	ldw	r2,-8(fp)
 400da94:	10800d03 	ldbu	r2,52(r2)
 400da98:	11003fcc 	andi	r4,r2,255
 400da9c:	e0bffe17 	ldw	r2,-8(fp)
 400daa0:	10800d03 	ldbu	r2,52(r2)
 400daa4:	10c03fcc 	andi	r3,r2,255
 400daa8:	d0a7f544 	addi	r2,gp,-24619
 400daac:	1885883a 	add	r2,r3,r2
 400dab0:	10c00003 	ldbu	r3,0(r2)
 400dab4:	e0bffe17 	ldw	r2,-8(fp)
 400dab8:	10800d43 	ldbu	r2,53(r2)
 400dabc:	1884b03a 	or	r2,r3,r2
 400dac0:	1007883a 	mov	r3,r2
 400dac4:	d0a7f544 	addi	r2,gp,-24619
 400dac8:	2085883a 	add	r2,r4,r2
 400dacc:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 400dad0:	e0bffe17 	ldw	r2,-8(fp)
 400dad4:	10800517 	ldw	r2,20(r2)
 400dad8:	e0bffe15 	stw	r2,-8(fp)
 400dadc:	e0bffc17 	ldw	r2,-16(fp)
 400dae0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400dae4:	e0bff817 	ldw	r2,-32(fp)
 400dae8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400daec:	e0bffe17 	ldw	r2,-8(fp)
 400daf0:	10800c83 	ldbu	r2,50(r2)
 400daf4:	10803fcc 	andi	r2,r2,255
 400daf8:	10800518 	cmpnei	r2,r2,20
 400dafc:	103fae1e 	bne	r2,zero,400d9b8 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 400db00:	e037883a 	mov	sp,fp
 400db04:	dfc00117 	ldw	ra,4(sp)
 400db08:	df000017 	ldw	fp,0(sp)
 400db0c:	dec00204 	addi	sp,sp,8
 400db10:	f800283a 	ret

0400db14 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 400db14:	deffff04 	addi	sp,sp,-4
 400db18:	df000015 	stw	fp,0(sp)
 400db1c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 400db20:	00804784 	movi	r2,286
}
 400db24:	e037883a 	mov	sp,fp
 400db28:	df000017 	ldw	fp,0(sp)
 400db2c:	dec00104 	addi	sp,sp,4
 400db30:	f800283a 	ret

0400db34 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 400db34:	deffff04 	addi	sp,sp,-4
 400db38:	df000015 	stw	fp,0(sp)
 400db3c:	d839883a 	mov	fp,sp
}
 400db40:	e037883a 	mov	sp,fp
 400db44:	df000017 	ldw	fp,0(sp)
 400db48:	dec00104 	addi	sp,sp,4
 400db4c:	f800283a 	ret

0400db50 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 400db50:	defff804 	addi	sp,sp,-32
 400db54:	dfc00715 	stw	ra,28(sp)
 400db58:	df000615 	stw	fp,24(sp)
 400db5c:	df000604 	addi	fp,sp,24
 400db60:	e13ffc15 	stw	r4,-16(fp)
 400db64:	e17ffd15 	stw	r5,-12(fp)
 400db68:	e1bffe05 	stb	r6,-8(fp)
 400db6c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 400db70:	e0bffc17 	ldw	r2,-16(fp)
 400db74:	10800283 	ldbu	r2,10(r2)
 400db78:	10c03fcc 	andi	r3,r2,255
 400db7c:	00810174 	movhi	r2,1029
 400db80:	10a21f04 	addi	r2,r2,-30596
 400db84:	10c5883a 	add	r2,r2,r3
 400db88:	10800003 	ldbu	r2,0(r2)
 400db8c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 400db90:	e0fffa83 	ldbu	r3,-22(fp)
 400db94:	e0bffc17 	ldw	r2,-16(fp)
 400db98:	1885883a 	add	r2,r3,r2
 400db9c:	10800204 	addi	r2,r2,8
 400dba0:	108000c3 	ldbu	r2,3(r2)
 400dba4:	10c03fcc 	andi	r3,r2,255
 400dba8:	00810174 	movhi	r2,1029
 400dbac:	10a21f04 	addi	r2,r2,-30596
 400dbb0:	10c5883a 	add	r2,r2,r3
 400dbb4:	10800003 	ldbu	r2,0(r2)
 400dbb8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 400dbbc:	e0bffa83 	ldbu	r2,-22(fp)
 400dbc0:	100490fa 	slli	r2,r2,3
 400dbc4:	1007883a 	mov	r3,r2
 400dbc8:	e0bffa43 	ldbu	r2,-23(fp)
 400dbcc:	1885883a 	add	r2,r3,r2
 400dbd0:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400dbd4:	e0bffa03 	ldbu	r2,-24(fp)
 400dbd8:	00c101b4 	movhi	r3,1030
 400dbdc:	18e09604 	addi	r3,r3,-32168
 400dbe0:	1085883a 	add	r2,r2,r2
 400dbe4:	1085883a 	add	r2,r2,r2
 400dbe8:	10c5883a 	add	r2,r2,r3
 400dbec:	10800017 	ldw	r2,0(r2)
 400dbf0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 400dbf4:	e0bffb17 	ldw	r2,-20(fp)
 400dbf8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 400dbfc:	e0fffb17 	ldw	r3,-20(fp)
 400dc00:	e0bffd17 	ldw	r2,-12(fp)
 400dc04:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400dc08:	e0bffb17 	ldw	r2,-20(fp)
 400dc0c:	10800c03 	ldbu	r2,48(r2)
 400dc10:	1007883a 	mov	r3,r2
 400dc14:	e0bffe03 	ldbu	r2,-8(fp)
 400dc18:	0084303a 	nor	r2,zero,r2
 400dc1c:	1884703a 	and	r2,r3,r2
 400dc20:	1007883a 	mov	r3,r2
 400dc24:	e0bffb17 	ldw	r2,-20(fp)
 400dc28:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 400dc2c:	e0fffb17 	ldw	r3,-20(fp)
 400dc30:	e0bfff03 	ldbu	r2,-4(fp)
 400dc34:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 400dc38:	e0bffb17 	ldw	r2,-20(fp)
 400dc3c:	10800c03 	ldbu	r2,48(r2)
 400dc40:	10803fcc 	andi	r2,r2,255
 400dc44:	1080020c 	andi	r2,r2,8
 400dc48:	1004c03a 	cmpne	r2,r2,zero
 400dc4c:	1000111e 	bne	r2,zero,400dc94 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 400dc50:	e0bffb17 	ldw	r2,-20(fp)
 400dc54:	10c00d83 	ldbu	r3,54(r2)
 400dc58:	d0a7f503 	ldbu	r2,-24620(gp)
 400dc5c:	1884b03a 	or	r2,r3,r2
 400dc60:	d0a7f505 	stb	r2,-24620(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400dc64:	e13ffa83 	ldbu	r4,-22(fp)
 400dc68:	e0fffa83 	ldbu	r3,-22(fp)
 400dc6c:	d0a7f544 	addi	r2,gp,-24619
 400dc70:	1885883a 	add	r2,r3,r2
 400dc74:	10c00003 	ldbu	r3,0(r2)
 400dc78:	e0bffb17 	ldw	r2,-20(fp)
 400dc7c:	10800d43 	ldbu	r2,53(r2)
 400dc80:	1884b03a 	or	r2,r3,r2
 400dc84:	1007883a 	mov	r3,r2
 400dc88:	d0a7f544 	addi	r2,gp,-24619
 400dc8c:	2085883a 	add	r2,r4,r2
 400dc90:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400dc94:	e13ffb17 	ldw	r4,-20(fp)
 400dc98:	e17ffc17 	ldw	r5,-16(fp)
 400dc9c:	400df480 	call	400df48 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 400dca0:	e0bffb17 	ldw	r2,-20(fp)
 400dca4:	10800817 	ldw	r2,32(r2)
 400dca8:	1005003a 	cmpeq	r2,r2,zero
 400dcac:	1000071e 	bne	r2,zero,400dccc <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400dcb0:	e0bffb17 	ldw	r2,-20(fp)
 400dcb4:	11400817 	ldw	r5,32(r2)
 400dcb8:	e13ffb17 	ldw	r4,-20(fp)
 400dcbc:	400e0000 	call	400e000 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 400dcc0:	e0fffb17 	ldw	r3,-20(fp)
 400dcc4:	e0bffc17 	ldw	r2,-16(fp)
 400dcc8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 400dccc:	e0bffa03 	ldbu	r2,-24(fp)
}
 400dcd0:	e037883a 	mov	sp,fp
 400dcd4:	dfc00117 	ldw	ra,4(sp)
 400dcd8:	df000017 	ldw	fp,0(sp)
 400dcdc:	dec00204 	addi	sp,sp,8
 400dce0:	f800283a 	ret

0400dce4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 400dce4:	defffd04 	addi	sp,sp,-12
 400dce8:	df000215 	stw	fp,8(sp)
 400dcec:	df000204 	addi	fp,sp,8
 400dcf0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 400dcf4:	d0e7f817 	ldw	r3,-24608(gp)
 400dcf8:	e0bfff17 	ldw	r2,-4(fp)
 400dcfc:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400dd00:	d0a7f817 	ldw	r2,-24608(gp)
 400dd04:	10800d03 	ldbu	r2,52(r2)
 400dd08:	11003fcc 	andi	r4,r2,255
 400dd0c:	d0a7f817 	ldw	r2,-24608(gp)
 400dd10:	10800d03 	ldbu	r2,52(r2)
 400dd14:	10c03fcc 	andi	r3,r2,255
 400dd18:	e0bfff17 	ldw	r2,-4(fp)
 400dd1c:	1885883a 	add	r2,r3,r2
 400dd20:	10800204 	addi	r2,r2,8
 400dd24:	10c000c3 	ldbu	r3,3(r2)
 400dd28:	d0a7f817 	ldw	r2,-24608(gp)
 400dd2c:	10800d43 	ldbu	r2,53(r2)
 400dd30:	1884b03a 	or	r2,r3,r2
 400dd34:	1007883a 	mov	r3,r2
 400dd38:	e0bfff17 	ldw	r2,-4(fp)
 400dd3c:	2085883a 	add	r2,r4,r2
 400dd40:	10800204 	addi	r2,r2,8
 400dd44:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400dd48:	e0bfff17 	ldw	r2,-4(fp)
 400dd4c:	10c00283 	ldbu	r3,10(r2)
 400dd50:	d0a7f817 	ldw	r2,-24608(gp)
 400dd54:	10800d83 	ldbu	r2,54(r2)
 400dd58:	1884b03a 	or	r2,r3,r2
 400dd5c:	1007883a 	mov	r3,r2
 400dd60:	e0bfff17 	ldw	r2,-4(fp)
 400dd64:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400dd68:	d0a7f817 	ldw	r2,-24608(gp)
 400dd6c:	10800d03 	ldbu	r2,52(r2)
 400dd70:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400dd74:	e13ffe03 	ldbu	r4,-8(fp)
 400dd78:	e0fffe03 	ldbu	r3,-8(fp)
 400dd7c:	d0a7f544 	addi	r2,gp,-24619
 400dd80:	1885883a 	add	r2,r3,r2
 400dd84:	10800003 	ldbu	r2,0(r2)
 400dd88:	1007883a 	mov	r3,r2
 400dd8c:	d0a7f817 	ldw	r2,-24608(gp)
 400dd90:	10800d43 	ldbu	r2,53(r2)
 400dd94:	0084303a 	nor	r2,zero,r2
 400dd98:	1884703a 	and	r2,r3,r2
 400dd9c:	1007883a 	mov	r3,r2
 400dda0:	d0a7f544 	addi	r2,gp,-24619
 400dda4:	2085883a 	add	r2,r4,r2
 400dda8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400ddac:	e0fffe03 	ldbu	r3,-8(fp)
 400ddb0:	d0a7f544 	addi	r2,gp,-24619
 400ddb4:	1885883a 	add	r2,r3,r2
 400ddb8:	10800003 	ldbu	r2,0(r2)
 400ddbc:	10803fcc 	andi	r2,r2,255
 400ddc0:	1004c03a 	cmpne	r2,r2,zero
 400ddc4:	1000071e 	bne	r2,zero,400dde4 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400ddc8:	d0a7f817 	ldw	r2,-24608(gp)
 400ddcc:	10800d83 	ldbu	r2,54(r2)
 400ddd0:	0084303a 	nor	r2,zero,r2
 400ddd4:	1007883a 	mov	r3,r2
 400ddd8:	d0a7f503 	ldbu	r2,-24620(gp)
 400dddc:	1884703a 	and	r2,r3,r2
 400dde0:	d0a7f505 	stb	r2,-24620(gp)
    }
}
 400dde4:	e037883a 	mov	sp,fp
 400dde8:	df000017 	ldw	fp,0(sp)
 400ddec:	dec00104 	addi	sp,sp,4
 400ddf0:	f800283a 	ret

0400ddf4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 400ddf4:	defffb04 	addi	sp,sp,-20
 400ddf8:	df000415 	stw	fp,16(sp)
 400ddfc:	df000404 	addi	fp,sp,16
 400de00:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 400de04:	d0a7f817 	ldw	r2,-24608(gp)
 400de08:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 400de0c:	d0e7f817 	ldw	r3,-24608(gp)
 400de10:	e0bfff17 	ldw	r2,-4(fp)
 400de14:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 400de18:	e0bfff17 	ldw	r2,-4(fp)
 400de1c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 400de20:	e0bffe17 	ldw	r2,-8(fp)
 400de24:	10800017 	ldw	r2,0(r2)
 400de28:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400de2c:	00002006 	br	400deb0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400de30:	d0a7f817 	ldw	r2,-24608(gp)
 400de34:	10800d03 	ldbu	r2,52(r2)
 400de38:	11003fcc 	andi	r4,r2,255
 400de3c:	d0a7f817 	ldw	r2,-24608(gp)
 400de40:	10800d03 	ldbu	r2,52(r2)
 400de44:	10c03fcc 	andi	r3,r2,255
 400de48:	e0bffd17 	ldw	r2,-12(fp)
 400de4c:	1885883a 	add	r2,r3,r2
 400de50:	10800204 	addi	r2,r2,8
 400de54:	10c000c3 	ldbu	r3,3(r2)
 400de58:	d0a7f817 	ldw	r2,-24608(gp)
 400de5c:	10800d43 	ldbu	r2,53(r2)
 400de60:	1884b03a 	or	r2,r3,r2
 400de64:	1007883a 	mov	r3,r2
 400de68:	e0bffd17 	ldw	r2,-12(fp)
 400de6c:	2085883a 	add	r2,r4,r2
 400de70:	10800204 	addi	r2,r2,8
 400de74:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400de78:	e0bffd17 	ldw	r2,-12(fp)
 400de7c:	10c00283 	ldbu	r3,10(r2)
 400de80:	d0a7f817 	ldw	r2,-24608(gp)
 400de84:	10800d83 	ldbu	r2,54(r2)
 400de88:	1884b03a 	or	r2,r3,r2
 400de8c:	1007883a 	mov	r3,r2
 400de90:	e0bffd17 	ldw	r2,-12(fp)
 400de94:	10c00285 	stb	r3,10(r2)
        pevents++;
 400de98:	e0bffe17 	ldw	r2,-8(fp)
 400de9c:	10800104 	addi	r2,r2,4
 400dea0:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 400dea4:	e0bffe17 	ldw	r2,-8(fp)
 400dea8:	10800017 	ldw	r2,0(r2)
 400deac:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400deb0:	e0bffd17 	ldw	r2,-12(fp)
 400deb4:	1004c03a 	cmpne	r2,r2,zero
 400deb8:	103fdd1e 	bne	r2,zero,400de30 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400debc:	d0a7f817 	ldw	r2,-24608(gp)
 400dec0:	10800d03 	ldbu	r2,52(r2)
 400dec4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400dec8:	e13ffc03 	ldbu	r4,-16(fp)
 400decc:	e0fffc03 	ldbu	r3,-16(fp)
 400ded0:	d0a7f544 	addi	r2,gp,-24619
 400ded4:	1885883a 	add	r2,r3,r2
 400ded8:	10800003 	ldbu	r2,0(r2)
 400dedc:	1007883a 	mov	r3,r2
 400dee0:	d0a7f817 	ldw	r2,-24608(gp)
 400dee4:	10800d43 	ldbu	r2,53(r2)
 400dee8:	0084303a 	nor	r2,zero,r2
 400deec:	1884703a 	and	r2,r3,r2
 400def0:	1007883a 	mov	r3,r2
 400def4:	d0a7f544 	addi	r2,gp,-24619
 400def8:	2085883a 	add	r2,r4,r2
 400defc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 400df00:	e0fffc03 	ldbu	r3,-16(fp)
 400df04:	d0a7f544 	addi	r2,gp,-24619
 400df08:	1885883a 	add	r2,r3,r2
 400df0c:	10800003 	ldbu	r2,0(r2)
 400df10:	10803fcc 	andi	r2,r2,255
 400df14:	1004c03a 	cmpne	r2,r2,zero
 400df18:	1000071e 	bne	r2,zero,400df38 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400df1c:	d0a7f817 	ldw	r2,-24608(gp)
 400df20:	10800d83 	ldbu	r2,54(r2)
 400df24:	0084303a 	nor	r2,zero,r2
 400df28:	1007883a 	mov	r3,r2
 400df2c:	d0a7f503 	ldbu	r2,-24620(gp)
 400df30:	1884703a 	and	r2,r3,r2
 400df34:	d0a7f505 	stb	r2,-24620(gp)
    }
}
 400df38:	e037883a 	mov	sp,fp
 400df3c:	df000017 	ldw	fp,0(sp)
 400df40:	dec00104 	addi	sp,sp,4
 400df44:	f800283a 	ret

0400df48 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400df48:	defffc04 	addi	sp,sp,-16
 400df4c:	df000315 	stw	fp,12(sp)
 400df50:	df000304 	addi	fp,sp,12
 400df54:	e13ffe15 	stw	r4,-8(fp)
 400df58:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 400df5c:	e0bffe17 	ldw	r2,-8(fp)
 400df60:	10800d03 	ldbu	r2,52(r2)
 400df64:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400df68:	e13ffd03 	ldbu	r4,-12(fp)
 400df6c:	e0fffd03 	ldbu	r3,-12(fp)
 400df70:	e0bfff17 	ldw	r2,-4(fp)
 400df74:	1885883a 	add	r2,r3,r2
 400df78:	10800204 	addi	r2,r2,8
 400df7c:	108000c3 	ldbu	r2,3(r2)
 400df80:	1007883a 	mov	r3,r2
 400df84:	e0bffe17 	ldw	r2,-8(fp)
 400df88:	10800d43 	ldbu	r2,53(r2)
 400df8c:	0084303a 	nor	r2,zero,r2
 400df90:	1884703a 	and	r2,r3,r2
 400df94:	1007883a 	mov	r3,r2
 400df98:	e0bfff17 	ldw	r2,-4(fp)
 400df9c:	2085883a 	add	r2,r4,r2
 400dfa0:	10800204 	addi	r2,r2,8
 400dfa4:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 400dfa8:	e0fffd03 	ldbu	r3,-12(fp)
 400dfac:	e0bfff17 	ldw	r2,-4(fp)
 400dfb0:	1885883a 	add	r2,r3,r2
 400dfb4:	10800204 	addi	r2,r2,8
 400dfb8:	108000c3 	ldbu	r2,3(r2)
 400dfbc:	10803fcc 	andi	r2,r2,255
 400dfc0:	1004c03a 	cmpne	r2,r2,zero
 400dfc4:	10000a1e 	bne	r2,zero,400dff0 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 400dfc8:	e0bfff17 	ldw	r2,-4(fp)
 400dfcc:	10800283 	ldbu	r2,10(r2)
 400dfd0:	1007883a 	mov	r3,r2
 400dfd4:	e0bffe17 	ldw	r2,-8(fp)
 400dfd8:	10800d83 	ldbu	r2,54(r2)
 400dfdc:	0084303a 	nor	r2,zero,r2
 400dfe0:	1884703a 	and	r2,r3,r2
 400dfe4:	1007883a 	mov	r3,r2
 400dfe8:	e0bfff17 	ldw	r2,-4(fp)
 400dfec:	10c00285 	stb	r3,10(r2)
    }
}
 400dff0:	e037883a 	mov	sp,fp
 400dff4:	df000017 	ldw	fp,0(sp)
 400dff8:	dec00104 	addi	sp,sp,4
 400dffc:	f800283a 	ret

0400e000 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 400e000:	defffa04 	addi	sp,sp,-24
 400e004:	df000515 	stw	fp,20(sp)
 400e008:	df000504 	addi	fp,sp,20
 400e00c:	e13ffe15 	stw	r4,-8(fp)
 400e010:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 400e014:	e0bffe17 	ldw	r2,-8(fp)
 400e018:	10800d03 	ldbu	r2,52(r2)
 400e01c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 400e020:	e0bffe17 	ldw	r2,-8(fp)
 400e024:	10800d83 	ldbu	r2,54(r2)
 400e028:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 400e02c:	e0bffe17 	ldw	r2,-8(fp)
 400e030:	10800d43 	ldbu	r2,53(r2)
 400e034:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 400e038:	e0bfff17 	ldw	r2,-4(fp)
 400e03c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 400e040:	e0bffd17 	ldw	r2,-12(fp)
 400e044:	10800017 	ldw	r2,0(r2)
 400e048:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400e04c:	00002606 	br	400e0e8 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 400e050:	e13ffb83 	ldbu	r4,-18(fp)
 400e054:	e0fffb83 	ldbu	r3,-18(fp)
 400e058:	e0bffc17 	ldw	r2,-16(fp)
 400e05c:	1885883a 	add	r2,r3,r2
 400e060:	10800204 	addi	r2,r2,8
 400e064:	108000c3 	ldbu	r2,3(r2)
 400e068:	1007883a 	mov	r3,r2
 400e06c:	e0bffb03 	ldbu	r2,-20(fp)
 400e070:	0084303a 	nor	r2,zero,r2
 400e074:	1884703a 	and	r2,r3,r2
 400e078:	1007883a 	mov	r3,r2
 400e07c:	e0bffc17 	ldw	r2,-16(fp)
 400e080:	2085883a 	add	r2,r4,r2
 400e084:	10800204 	addi	r2,r2,8
 400e088:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 400e08c:	e0fffb83 	ldbu	r3,-18(fp)
 400e090:	e0bffc17 	ldw	r2,-16(fp)
 400e094:	1885883a 	add	r2,r3,r2
 400e098:	10800204 	addi	r2,r2,8
 400e09c:	108000c3 	ldbu	r2,3(r2)
 400e0a0:	10803fcc 	andi	r2,r2,255
 400e0a4:	1004c03a 	cmpne	r2,r2,zero
 400e0a8:	1000091e 	bne	r2,zero,400e0d0 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 400e0ac:	e0bffc17 	ldw	r2,-16(fp)
 400e0b0:	10800283 	ldbu	r2,10(r2)
 400e0b4:	1007883a 	mov	r3,r2
 400e0b8:	e0bffb43 	ldbu	r2,-19(fp)
 400e0bc:	0084303a 	nor	r2,zero,r2
 400e0c0:	1884703a 	and	r2,r3,r2
 400e0c4:	1007883a 	mov	r3,r2
 400e0c8:	e0bffc17 	ldw	r2,-16(fp)
 400e0cc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 400e0d0:	e0bffd17 	ldw	r2,-12(fp)
 400e0d4:	10800104 	addi	r2,r2,4
 400e0d8:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 400e0dc:	e0bffd17 	ldw	r2,-12(fp)
 400e0e0:	10800017 	ldw	r2,0(r2)
 400e0e4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400e0e8:	e0bffc17 	ldw	r2,-16(fp)
 400e0ec:	1004c03a 	cmpne	r2,r2,zero
 400e0f0:	103fd71e 	bne	r2,zero,400e050 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 400e0f4:	e037883a 	mov	sp,fp
 400e0f8:	df000017 	ldw	fp,0(sp)
 400e0fc:	dec00104 	addi	sp,sp,4
 400e100:	f800283a 	ret

0400e104 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 400e104:	defffc04 	addi	sp,sp,-16
 400e108:	df000315 	stw	fp,12(sp)
 400e10c:	df000304 	addi	fp,sp,12
 400e110:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 400e114:	e0bfff17 	ldw	r2,-4(fp)
 400e118:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 400e11c:	e0bfff17 	ldw	r2,-4(fp)
 400e120:	108002c4 	addi	r2,r2,11
 400e124:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400e128:	e03ffd05 	stb	zero,-12(fp)
 400e12c:	00000806 	br	400e150 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 400e130:	e0bffe17 	ldw	r2,-8(fp)
 400e134:	10000005 	stb	zero,0(r2)
 400e138:	e0bffe17 	ldw	r2,-8(fp)
 400e13c:	10800044 	addi	r2,r2,1
 400e140:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400e144:	e0bffd03 	ldbu	r2,-12(fp)
 400e148:	10800044 	addi	r2,r2,1
 400e14c:	e0bffd05 	stb	r2,-12(fp)
 400e150:	e0bffd03 	ldbu	r2,-12(fp)
 400e154:	108000f0 	cmpltui	r2,r2,3
 400e158:	103ff51e 	bne	r2,zero,400e130 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 400e15c:	e037883a 	mov	sp,fp
 400e160:	df000017 	ldw	fp,0(sp)
 400e164:	dec00104 	addi	sp,sp,4
 400e168:	f800283a 	ret

0400e16c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 400e16c:	defffb04 	addi	sp,sp,-20
 400e170:	dfc00415 	stw	ra,16(sp)
 400e174:	df000315 	stw	fp,12(sp)
 400e178:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 400e17c:	01010174 	movhi	r4,1029
 400e180:	211c8204 	addi	r4,r4,29192
 400e184:	0142d004 	movi	r5,2880
 400e188:	400e4d00 	call	400e4d0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 400e18c:	00810174 	movhi	r2,1029
 400e190:	109c8204 	addi	r2,r2,29192
 400e194:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 400e198:	00810174 	movhi	r2,1029
 400e19c:	109c8e04 	addi	r2,r2,29240
 400e1a0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400e1a4:	e03fff0d 	sth	zero,-4(fp)
 400e1a8:	00001306 	br	400e1f8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400e1ac:	e0bffe17 	ldw	r2,-8(fp)
 400e1b0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 400e1b4:	e0fffe17 	ldw	r3,-8(fp)
 400e1b8:	e0bffd17 	ldw	r2,-12(fp)
 400e1bc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 400e1c0:	e0fffe17 	ldw	r3,-8(fp)
 400e1c4:	00800fc4 	movi	r2,63
 400e1c8:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 400e1cc:	e0bffe17 	ldw	r2,-8(fp)
 400e1d0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 400e1d4:	e0bffe17 	ldw	r2,-8(fp)
 400e1d8:	10800c04 	addi	r2,r2,48
 400e1dc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 400e1e0:	e0bffd17 	ldw	r2,-12(fp)
 400e1e4:	10800c04 	addi	r2,r2,48
 400e1e8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400e1ec:	e0bfff0b 	ldhu	r2,-4(fp)
 400e1f0:	10800044 	addi	r2,r2,1
 400e1f4:	e0bfff0d 	sth	r2,-4(fp)
 400e1f8:	e0bfff0b 	ldhu	r2,-4(fp)
 400e1fc:	10800ef0 	cmpltui	r2,r2,59
 400e200:	103fea1e 	bne	r2,zero,400e1ac <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 400e204:	e0bffe17 	ldw	r2,-8(fp)
 400e208:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 400e20c:	e0bffe17 	ldw	r2,-8(fp)
 400e210:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 400e214:	e0fffe17 	ldw	r3,-8(fp)
 400e218:	00800fc4 	movi	r2,63
 400e21c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 400e220:	e0bffe17 	ldw	r2,-8(fp)
 400e224:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 400e228:	00810174 	movhi	r2,1029
 400e22c:	109c8204 	addi	r2,r2,29192
 400e230:	d0a7f615 	stw	r2,-24616(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 400e234:	e037883a 	mov	sp,fp
 400e238:	dfc00117 	ldw	ra,4(sp)
 400e23c:	df000017 	ldw	fp,0(sp)
 400e240:	dec00204 	addi	sp,sp,8
 400e244:	f800283a 	ret

0400e248 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 400e248:	deffff04 	addi	sp,sp,-4
 400e24c:	df000015 	stw	fp,0(sp)
 400e250:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 400e254:	d027f915 	stw	zero,-24604(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 400e258:	d027f705 	stb	zero,-24612(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 400e25c:	d027e905 	stb	zero,-24668(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 400e260:	d027f145 	stb	zero,-24635(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 400e264:	d027e945 	stb	zero,-24667(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 400e268:	d027ee15 	stw	zero,-24648(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 400e26c:	d027ea15 	stw	zero,-24664(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 400e270:	d027fc15 	stw	zero,-24592(gp)
    OSIdleCtrMax  = 0L;
 400e274:	d027ef15 	stw	zero,-24644(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 400e278:	d027fb05 	stb	zero,-24596(gp)
#endif
}
 400e27c:	e037883a 	mov	sp,fp
 400e280:	df000017 	ldw	fp,0(sp)
 400e284:	dec00104 	addi	sp,sp,4
 400e288:	f800283a 	ret

0400e28c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 400e28c:	defffd04 	addi	sp,sp,-12
 400e290:	df000215 	stw	fp,8(sp)
 400e294:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 400e298:	d027f505 	stb	zero,-24620(gp)
    prdytbl       = &OSRdyTbl[0];
 400e29c:	d0a7f544 	addi	r2,gp,-24619
 400e2a0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400e2a4:	e03fff05 	stb	zero,-4(fp)
 400e2a8:	00000806 	br	400e2cc <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 400e2ac:	e0bffe17 	ldw	r2,-8(fp)
 400e2b0:	10000005 	stb	zero,0(r2)
 400e2b4:	e0bffe17 	ldw	r2,-8(fp)
 400e2b8:	10800044 	addi	r2,r2,1
 400e2bc:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400e2c0:	e0bfff03 	ldbu	r2,-4(fp)
 400e2c4:	10800044 	addi	r2,r2,1
 400e2c8:	e0bfff05 	stb	r2,-4(fp)
 400e2cc:	e0bfff03 	ldbu	r2,-4(fp)
 400e2d0:	108000f0 	cmpltui	r2,r2,3
 400e2d4:	103ff51e 	bne	r2,zero,400e2ac <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 400e2d8:	d027eb45 	stb	zero,-24659(gp)
    OSPrioHighRdy = 0;
 400e2dc:	d027eb05 	stb	zero,-24660(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 400e2e0:	d027f315 	stw	zero,-24628(gp)
    OSTCBCur      = (OS_TCB *)0;
 400e2e4:	d027f815 	stw	zero,-24608(gp)
}
 400e2e8:	e037883a 	mov	sp,fp
 400e2ec:	df000017 	ldw	fp,0(sp)
 400e2f0:	dec00104 	addi	sp,sp,4
 400e2f4:	f800283a 	ret

0400e2f8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 400e2f8:	defff804 	addi	sp,sp,-32
 400e2fc:	dfc00715 	stw	ra,28(sp)
 400e300:	df000615 	stw	fp,24(sp)
 400e304:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 400e308:	01810174 	movhi	r6,1029
 400e30c:	319c8104 	addi	r6,r6,29188
 400e310:	00bfffd4 	movui	r2,65535
 400e314:	d8800015 	stw	r2,0(sp)
 400e318:	00810174 	movhi	r2,1029
 400e31c:	109a8204 	addi	r2,r2,27144
 400e320:	d8800115 	stw	r2,4(sp)
 400e324:	00808004 	movi	r2,512
 400e328:	d8800215 	stw	r2,8(sp)
 400e32c:	d8000315 	stw	zero,12(sp)
 400e330:	008000c4 	movi	r2,3
 400e334:	d8800415 	stw	r2,16(sp)
 400e338:	01010074 	movhi	r4,1025
 400e33c:	2139eb04 	addi	r4,r4,-6228
 400e340:	000b883a 	mov	r5,zero
 400e344:	01c00504 	movi	r7,20
 400e348:	401358c0 	call	401358c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 400e34c:	01410174 	movhi	r5,1029
 400e350:	29625f04 	addi	r5,r5,-30340
 400e354:	01000504 	movi	r4,20
 400e358:	e1bfff04 	addi	r6,fp,-4
 400e35c:	4013ec00 	call	4013ec0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 400e360:	e037883a 	mov	sp,fp
 400e364:	dfc00117 	ldw	ra,4(sp)
 400e368:	df000017 	ldw	fp,0(sp)
 400e36c:	dec00204 	addi	sp,sp,8
 400e370:	f800283a 	ret

0400e374 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 400e374:	defff804 	addi	sp,sp,-32
 400e378:	dfc00715 	stw	ra,28(sp)
 400e37c:	df000615 	stw	fp,24(sp)
 400e380:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 400e384:	01810174 	movhi	r6,1029
 400e388:	319a0904 	addi	r6,r6,26660
 400e38c:	00bfff94 	movui	r2,65534
 400e390:	d8800015 	stw	r2,0(sp)
 400e394:	00810174 	movhi	r2,1029
 400e398:	10980a04 	addi	r2,r2,24616
 400e39c:	d8800115 	stw	r2,4(sp)
 400e3a0:	00808004 	movi	r2,512
 400e3a4:	d8800215 	stw	r2,8(sp)
 400e3a8:	d8000315 	stw	zero,12(sp)
 400e3ac:	008000c4 	movi	r2,3
 400e3b0:	d8800415 	stw	r2,16(sp)
 400e3b4:	01010074 	movhi	r4,1025
 400e3b8:	213a0204 	addi	r4,r4,-6136
 400e3bc:	000b883a 	mov	r5,zero
 400e3c0:	01c004c4 	movi	r7,19
 400e3c4:	401358c0 	call	401358c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 400e3c8:	01410174 	movhi	r5,1029
 400e3cc:	29626304 	addi	r5,r5,-30324
 400e3d0:	010004c4 	movi	r4,19
 400e3d4:	e1bfff04 	addi	r6,fp,-4
 400e3d8:	4013ec00 	call	4013ec0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 400e3dc:	e037883a 	mov	sp,fp
 400e3e0:	dfc00117 	ldw	ra,4(sp)
 400e3e4:	df000017 	ldw	fp,0(sp)
 400e3e8:	dec00204 	addi	sp,sp,8
 400e3ec:	f800283a 	ret

0400e3f0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 400e3f0:	defffb04 	addi	sp,sp,-20
 400e3f4:	dfc00415 	stw	ra,16(sp)
 400e3f8:	df000315 	stw	fp,12(sp)
 400e3fc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 400e400:	01010174 	movhi	r4,1029
 400e404:	211f5204 	addi	r4,r4,32072
 400e408:	01414404 	movi	r5,1296
 400e40c:	400e4d00 	call	400e4d0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 400e410:	010101b4 	movhi	r4,1030
 400e414:	21209604 	addi	r4,r4,-32168
 400e418:	01401504 	movi	r5,84
 400e41c:	400e4d00 	call	400e4d0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 400e420:	00810174 	movhi	r2,1029
 400e424:	109f5204 	addi	r2,r2,32072
 400e428:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 400e42c:	00810174 	movhi	r2,1029
 400e430:	109f6d04 	addi	r2,r2,32180
 400e434:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400e438:	e03fff05 	stb	zero,-4(fp)
 400e43c:	00001106 	br	400e484 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 400e440:	e0fffe17 	ldw	r3,-8(fp)
 400e444:	e0bffd17 	ldw	r2,-12(fp)
 400e448:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 400e44c:	e0fffe17 	ldw	r3,-8(fp)
 400e450:	00800fc4 	movi	r2,63
 400e454:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400e458:	e0bffe17 	ldw	r2,-8(fp)
 400e45c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 400e460:	e0bffe17 	ldw	r2,-8(fp)
 400e464:	10801b04 	addi	r2,r2,108
 400e468:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 400e46c:	e0bffd17 	ldw	r2,-12(fp)
 400e470:	10801b04 	addi	r2,r2,108
 400e474:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400e478:	e0bfff03 	ldbu	r2,-4(fp)
 400e47c:	10800044 	addi	r2,r2,1
 400e480:	e0bfff05 	stb	r2,-4(fp)
 400e484:	e0bfff03 	ldbu	r2,-4(fp)
 400e488:	108002f0 	cmpltui	r2,r2,11
 400e48c:	103fec1e 	bne	r2,zero,400e440 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 400e490:	e0bffe17 	ldw	r2,-8(fp)
 400e494:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 400e498:	e0fffe17 	ldw	r3,-8(fp)
 400e49c:	00800fc4 	movi	r2,63
 400e4a0:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400e4a4:	e0bffe17 	ldw	r2,-8(fp)
 400e4a8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 400e4ac:	d027ec15 	stw	zero,-24656(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 400e4b0:	00810174 	movhi	r2,1029
 400e4b4:	109f5204 	addi	r2,r2,32072
 400e4b8:	d0a7f015 	stw	r2,-24640(gp)
}
 400e4bc:	e037883a 	mov	sp,fp
 400e4c0:	dfc00117 	ldw	ra,4(sp)
 400e4c4:	df000017 	ldw	fp,0(sp)
 400e4c8:	dec00204 	addi	sp,sp,8
 400e4cc:	f800283a 	ret

0400e4d0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 400e4d0:	defffd04 	addi	sp,sp,-12
 400e4d4:	df000215 	stw	fp,8(sp)
 400e4d8:	df000204 	addi	fp,sp,8
 400e4dc:	e13ffe15 	stw	r4,-8(fp)
 400e4e0:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 400e4e4:	00000806 	br	400e508 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 400e4e8:	e0bffe17 	ldw	r2,-8(fp)
 400e4ec:	10000005 	stb	zero,0(r2)
 400e4f0:	e0bffe17 	ldw	r2,-8(fp)
 400e4f4:	10800044 	addi	r2,r2,1
 400e4f8:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400e4fc:	e0bfff0b 	ldhu	r2,-4(fp)
 400e500:	10bfffc4 	addi	r2,r2,-1
 400e504:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400e508:	e0bfff0b 	ldhu	r2,-4(fp)
 400e50c:	1004c03a 	cmpne	r2,r2,zero
 400e510:	103ff51e 	bne	r2,zero,400e4e8 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 400e514:	e037883a 	mov	sp,fp
 400e518:	df000017 	ldw	fp,0(sp)
 400e51c:	dec00104 	addi	sp,sp,4
 400e520:	f800283a 	ret

0400e524 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 400e524:	defffc04 	addi	sp,sp,-16
 400e528:	df000315 	stw	fp,12(sp)
 400e52c:	df000304 	addi	fp,sp,12
 400e530:	e13ffd15 	stw	r4,-12(fp)
 400e534:	e17ffe15 	stw	r5,-8(fp)
 400e538:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 400e53c:	00000d06 	br	400e574 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 400e540:	e0bffe17 	ldw	r2,-8(fp)
 400e544:	10c00003 	ldbu	r3,0(r2)
 400e548:	e0bffd17 	ldw	r2,-12(fp)
 400e54c:	10c00005 	stb	r3,0(r2)
 400e550:	e0bffd17 	ldw	r2,-12(fp)
 400e554:	10800044 	addi	r2,r2,1
 400e558:	e0bffd15 	stw	r2,-12(fp)
 400e55c:	e0bffe17 	ldw	r2,-8(fp)
 400e560:	10800044 	addi	r2,r2,1
 400e564:	e0bffe15 	stw	r2,-8(fp)
        size--;
 400e568:	e0bfff0b 	ldhu	r2,-4(fp)
 400e56c:	10bfffc4 	addi	r2,r2,-1
 400e570:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400e574:	e0bfff0b 	ldhu	r2,-4(fp)
 400e578:	1004c03a 	cmpne	r2,r2,zero
 400e57c:	103ff01e 	bne	r2,zero,400e540 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 400e580:	e037883a 	mov	sp,fp
 400e584:	df000017 	ldw	fp,0(sp)
 400e588:	dec00104 	addi	sp,sp,4
 400e58c:	f800283a 	ret

0400e590 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 400e590:	defffb04 	addi	sp,sp,-20
 400e594:	dfc00415 	stw	ra,16(sp)
 400e598:	df000315 	stw	fp,12(sp)
 400e59c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400e5a0:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e5a4:	0005303a 	rdctl	r2,status
 400e5a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e5ac:	e0fffe17 	ldw	r3,-8(fp)
 400e5b0:	00bfff84 	movi	r2,-2
 400e5b4:	1884703a 	and	r2,r3,r2
 400e5b8:	1001703a 	wrctl	status,r2
  
  return context;
 400e5bc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 400e5c0:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 400e5c4:	d0a7f703 	ldbu	r2,-24612(gp)
 400e5c8:	10803fcc 	andi	r2,r2,255
 400e5cc:	1004c03a 	cmpne	r2,r2,zero
 400e5d0:	10001b1e 	bne	r2,zero,400e640 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 400e5d4:	d0a7e903 	ldbu	r2,-24668(gp)
 400e5d8:	10803fcc 	andi	r2,r2,255
 400e5dc:	1004c03a 	cmpne	r2,r2,zero
 400e5e0:	1000171e 	bne	r2,zero,400e640 <OS_Sched+0xb0>
            OS_SchedNew();
 400e5e4:	400e6640 	call	400e664 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 400e5e8:	d0a7eb03 	ldbu	r2,-24660(gp)
 400e5ec:	d0e7eb43 	ldbu	r3,-24659(gp)
 400e5f0:	11003fcc 	andi	r4,r2,255
 400e5f4:	18803fcc 	andi	r2,r3,255
 400e5f8:	20801126 	beq	r4,r2,400e640 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400e5fc:	d0a7eb03 	ldbu	r2,-24660(gp)
 400e600:	10803fcc 	andi	r2,r2,255
 400e604:	00c101b4 	movhi	r3,1030
 400e608:	18e09604 	addi	r3,r3,-32168
 400e60c:	1085883a 	add	r2,r2,r2
 400e610:	1085883a 	add	r2,r2,r2
 400e614:	10c5883a 	add	r2,r2,r3
 400e618:	10800017 	ldw	r2,0(r2)
 400e61c:	d0a7f315 	stw	r2,-24628(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 400e620:	d0e7f317 	ldw	r3,-24628(gp)
 400e624:	18800e17 	ldw	r2,56(r3)
 400e628:	10800044 	addi	r2,r2,1
 400e62c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400e630:	d0a7ee17 	ldw	r2,-24648(gp)
 400e634:	10800044 	addi	r2,r2,1
 400e638:	d0a7ee15 	stw	r2,-24648(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 400e63c:	40363500 	call	4036350 <OSCtxSw>
 400e640:	e0bfff17 	ldw	r2,-4(fp)
 400e644:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e648:	e0bffd17 	ldw	r2,-12(fp)
 400e64c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 400e650:	e037883a 	mov	sp,fp
 400e654:	dfc00117 	ldw	ra,4(sp)
 400e658:	df000017 	ldw	fp,0(sp)
 400e65c:	dec00204 	addi	sp,sp,8
 400e660:	f800283a 	ret

0400e664 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 400e664:	defffe04 	addi	sp,sp,-8
 400e668:	df000115 	stw	fp,4(sp)
 400e66c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 400e670:	d0a7f503 	ldbu	r2,-24620(gp)
 400e674:	10c03fcc 	andi	r3,r2,255
 400e678:	00810174 	movhi	r2,1029
 400e67c:	10a21f04 	addi	r2,r2,-30596
 400e680:	10c5883a 	add	r2,r2,r3
 400e684:	10800003 	ldbu	r2,0(r2)
 400e688:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 400e68c:	e0bfff03 	ldbu	r2,-4(fp)
 400e690:	100490fa 	slli	r2,r2,3
 400e694:	1009883a 	mov	r4,r2
 400e698:	e0ffff03 	ldbu	r3,-4(fp)
 400e69c:	d0a7f544 	addi	r2,gp,-24619
 400e6a0:	1885883a 	add	r2,r3,r2
 400e6a4:	10800003 	ldbu	r2,0(r2)
 400e6a8:	10c03fcc 	andi	r3,r2,255
 400e6ac:	00810174 	movhi	r2,1029
 400e6b0:	10a21f04 	addi	r2,r2,-30596
 400e6b4:	10c5883a 	add	r2,r2,r3
 400e6b8:	10800003 	ldbu	r2,0(r2)
 400e6bc:	2085883a 	add	r2,r4,r2
 400e6c0:	d0a7eb05 	stb	r2,-24660(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 400e6c4:	e037883a 	mov	sp,fp
 400e6c8:	df000017 	ldw	fp,0(sp)
 400e6cc:	dec00104 	addi	sp,sp,4
 400e6d0:	f800283a 	ret

0400e6d4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 400e6d4:	defffc04 	addi	sp,sp,-16
 400e6d8:	df000315 	stw	fp,12(sp)
 400e6dc:	df000304 	addi	fp,sp,12
 400e6e0:	e13ffe15 	stw	r4,-8(fp)
 400e6e4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 400e6e8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 400e6ec:	00000d06 	br	400e724 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 400e6f0:	e0bfff17 	ldw	r2,-4(fp)
 400e6f4:	10c00003 	ldbu	r3,0(r2)
 400e6f8:	e0bffe17 	ldw	r2,-8(fp)
 400e6fc:	10c00005 	stb	r3,0(r2)
 400e700:	e0bffe17 	ldw	r2,-8(fp)
 400e704:	10800044 	addi	r2,r2,1
 400e708:	e0bffe15 	stw	r2,-8(fp)
 400e70c:	e0bfff17 	ldw	r2,-4(fp)
 400e710:	10800044 	addi	r2,r2,1
 400e714:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400e718:	e0bffd03 	ldbu	r2,-12(fp)
 400e71c:	10800044 	addi	r2,r2,1
 400e720:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400e724:	e0bfff17 	ldw	r2,-4(fp)
 400e728:	10800003 	ldbu	r2,0(r2)
 400e72c:	10803fcc 	andi	r2,r2,255
 400e730:	1004c03a 	cmpne	r2,r2,zero
 400e734:	103fee1e 	bne	r2,zero,400e6f0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 400e738:	e0bffe17 	ldw	r2,-8(fp)
 400e73c:	10000005 	stb	zero,0(r2)
    return (len);
 400e740:	e0bffd03 	ldbu	r2,-12(fp)
}
 400e744:	e037883a 	mov	sp,fp
 400e748:	df000017 	ldw	fp,0(sp)
 400e74c:	dec00104 	addi	sp,sp,4
 400e750:	f800283a 	ret

0400e754 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 400e754:	defffd04 	addi	sp,sp,-12
 400e758:	df000215 	stw	fp,8(sp)
 400e75c:	df000204 	addi	fp,sp,8
 400e760:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 400e764:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 400e768:	00000606 	br	400e784 <OS_StrLen+0x30>
        psrc++;
 400e76c:	e0bfff17 	ldw	r2,-4(fp)
 400e770:	10800044 	addi	r2,r2,1
 400e774:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400e778:	e0bffe03 	ldbu	r2,-8(fp)
 400e77c:	10800044 	addi	r2,r2,1
 400e780:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400e784:	e0bfff17 	ldw	r2,-4(fp)
 400e788:	10800003 	ldbu	r2,0(r2)
 400e78c:	10803fcc 	andi	r2,r2,255
 400e790:	1004c03a 	cmpne	r2,r2,zero
 400e794:	103ff51e 	bne	r2,zero,400e76c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 400e798:	e0bffe03 	ldbu	r2,-8(fp)
}
 400e79c:	e037883a 	mov	sp,fp
 400e7a0:	df000017 	ldw	fp,0(sp)
 400e7a4:	dec00104 	addi	sp,sp,4
 400e7a8:	f800283a 	ret

0400e7ac <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 400e7ac:	defffa04 	addi	sp,sp,-24
 400e7b0:	dfc00515 	stw	ra,20(sp)
 400e7b4:	df000415 	stw	fp,16(sp)
 400e7b8:	df000404 	addi	fp,sp,16
 400e7bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400e7c0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e7c4:	0005303a 	rdctl	r2,status
 400e7c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e7cc:	e0fffd17 	ldw	r3,-12(fp)
 400e7d0:	00bfff84 	movi	r2,-2
 400e7d4:	1884703a 	and	r2,r3,r2
 400e7d8:	1001703a 	wrctl	status,r2
  
  return context;
 400e7dc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 400e7e0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 400e7e4:	d0a7ea17 	ldw	r2,-24664(gp)
 400e7e8:	10800044 	addi	r2,r2,1
 400e7ec:	d0a7ea15 	stw	r2,-24664(gp)
 400e7f0:	e0bffe17 	ldw	r2,-8(fp)
 400e7f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e7f8:	e0bffc17 	ldw	r2,-16(fp)
 400e7fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 400e800:	40368080 	call	4036808 <OSTaskIdleHook>
    }
 400e804:	003fef06 	br	400e7c4 <OS_TaskIdle+0x18>

0400e808 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 400e808:	defffa04 	addi	sp,sp,-24
 400e80c:	dfc00515 	stw	ra,20(sp)
 400e810:	df000415 	stw	fp,16(sp)
 400e814:	df000404 	addi	fp,sp,16
 400e818:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400e81c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400e820:	00000206 	br	400e82c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 400e824:	01000504 	movi	r4,20
 400e828:	40148840 	call	4014884 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400e82c:	d0a7fb03 	ldbu	r2,-24596(gp)
 400e830:	10803fcc 	andi	r2,r2,255
 400e834:	1005003a 	cmpeq	r2,r2,zero
 400e838:	103ffa1e 	bne	r2,zero,400e824 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 400e83c:	d0e7ef17 	ldw	r3,-24644(gp)
 400e840:	00801904 	movi	r2,100
 400e844:	1885203a 	divu	r2,r3,r2
 400e848:	d0a7ef15 	stw	r2,-24644(gp)
    if (OSIdleCtrMax == 0L) {
 400e84c:	d0a7ef17 	ldw	r2,-24644(gp)
 400e850:	1004c03a 	cmpne	r2,r2,zero
 400e854:	1000031e 	bne	r2,zero,400e864 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 400e858:	d027f105 	stb	zero,-24636(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 400e85c:	01003fc4 	movi	r4,255
 400e860:	40144980 	call	4014498 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e864:	0005303a 	rdctl	r2,status
 400e868:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e86c:	e0fffd17 	ldw	r3,-12(fp)
 400e870:	00bfff84 	movi	r2,-2
 400e874:	1884703a 	and	r2,r3,r2
 400e878:	1001703a 	wrctl	status,r2
  
  return context;
 400e87c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 400e880:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 400e884:	d0a7ea17 	ldw	r2,-24664(gp)
 400e888:	d0a7fc15 	stw	r2,-24592(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 400e88c:	d027ea15 	stw	zero,-24664(gp)
 400e890:	e0bffe17 	ldw	r2,-8(fp)
 400e894:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e898:	e0bffc17 	ldw	r2,-16(fp)
 400e89c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 400e8a0:	d0e7fc17 	ldw	r3,-24592(gp)
 400e8a4:	d0a7ef17 	ldw	r2,-24644(gp)
 400e8a8:	1885203a 	divu	r2,r3,r2
 400e8ac:	1007883a 	mov	r3,r2
 400e8b0:	00801904 	movi	r2,100
 400e8b4:	10c5c83a 	sub	r2,r2,r3
 400e8b8:	d0a7f105 	stb	r2,-24636(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 400e8bc:	403678c0 	call	403678c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 400e8c0:	400e8d00 	call	400e8d0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 400e8c4:	01000284 	movi	r4,10
 400e8c8:	40148840 	call	4014884 <OSTimeDly>
    }
 400e8cc:	003fe506 	br	400e864 <OS_TaskStat+0x5c>

0400e8d0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 400e8d0:	defffa04 	addi	sp,sp,-24
 400e8d4:	dfc00515 	stw	ra,20(sp)
 400e8d8:	df000415 	stw	fp,16(sp)
 400e8dc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400e8e0:	e03ffc05 	stb	zero,-16(fp)
 400e8e4:	00002406 	br	400e978 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 400e8e8:	e13ffc03 	ldbu	r4,-16(fp)
 400e8ec:	e17ffe04 	addi	r5,fp,-8
 400e8f0:	401429c0 	call	401429c <OSTaskStkChk>
 400e8f4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 400e8f8:	e0bffc43 	ldbu	r2,-15(fp)
 400e8fc:	1004c03a 	cmpne	r2,r2,zero
 400e900:	10001a1e 	bne	r2,zero,400e96c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 400e904:	e0bffc03 	ldbu	r2,-16(fp)
 400e908:	00c101b4 	movhi	r3,1030
 400e90c:	18e09604 	addi	r3,r3,-32168
 400e910:	1085883a 	add	r2,r2,r2
 400e914:	1085883a 	add	r2,r2,r2
 400e918:	10c5883a 	add	r2,r2,r3
 400e91c:	10800017 	ldw	r2,0(r2)
 400e920:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 400e924:	e0bffd17 	ldw	r2,-12(fp)
 400e928:	1005003a 	cmpeq	r2,r2,zero
 400e92c:	10000f1e 	bne	r2,zero,400e96c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 400e930:	e0bffd17 	ldw	r2,-12(fp)
 400e934:	10800060 	cmpeqi	r2,r2,1
 400e938:	10000c1e 	bne	r2,zero,400e96c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400e93c:	e0bffd17 	ldw	r2,-12(fp)
 400e940:	10c00217 	ldw	r3,8(r2)
 400e944:	e0bffd17 	ldw	r2,-12(fp)
 400e948:	10800317 	ldw	r2,12(r2)
 400e94c:	1085883a 	add	r2,r2,r2
 400e950:	1085883a 	add	r2,r2,r2
 400e954:	1887883a 	add	r3,r3,r2
 400e958:	e0bffd17 	ldw	r2,-12(fp)
 400e95c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400e960:	e0ffff17 	ldw	r3,-4(fp)
 400e964:	e0bffd17 	ldw	r2,-12(fp)
 400e968:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400e96c:	e0bffc03 	ldbu	r2,-16(fp)
 400e970:	10800044 	addi	r2,r2,1
 400e974:	e0bffc05 	stb	r2,-16(fp)
 400e978:	e0bffc03 	ldbu	r2,-16(fp)
 400e97c:	10800570 	cmpltui	r2,r2,21
 400e980:	103fd91e 	bne	r2,zero,400e8e8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 400e984:	e037883a 	mov	sp,fp
 400e988:	dfc00117 	ldw	ra,4(sp)
 400e98c:	df000017 	ldw	fp,0(sp)
 400e990:	dec00204 	addi	sp,sp,8
 400e994:	f800283a 	ret

0400e998 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 400e998:	defff104 	addi	sp,sp,-60
 400e99c:	dfc00e15 	stw	ra,56(sp)
 400e9a0:	df000d15 	stw	fp,52(sp)
 400e9a4:	df000d04 	addi	fp,sp,52
 400e9a8:	e17ffb15 	stw	r5,-20(fp)
 400e9ac:	e1bffc15 	stw	r6,-16(fp)
 400e9b0:	e0800417 	ldw	r2,16(fp)
 400e9b4:	e13ffa05 	stb	r4,-24(fp)
 400e9b8:	e1fffd0d 	sth	r7,-12(fp)
 400e9bc:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400e9c0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e9c4:	0005303a 	rdctl	r2,status
 400e9c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e9cc:	e0fff717 	ldw	r3,-36(fp)
 400e9d0:	00bfff84 	movi	r2,-2
 400e9d4:	1884703a 	and	r2,r3,r2
 400e9d8:	1001703a 	wrctl	status,r2
  
  return context;
 400e9dc:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 400e9e0:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 400e9e4:	d0a7f017 	ldw	r2,-24640(gp)
 400e9e8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 400e9ec:	e0bff917 	ldw	r2,-28(fp)
 400e9f0:	1005003a 	cmpeq	r2,r2,zero
 400e9f4:	1000941e 	bne	r2,zero,400ec48 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 400e9f8:	e0bff917 	ldw	r2,-28(fp)
 400e9fc:	10800517 	ldw	r2,20(r2)
 400ea00:	d0a7f015 	stw	r2,-24640(gp)
 400ea04:	e0bff817 	ldw	r2,-32(fp)
 400ea08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ea0c:	e0bff617 	ldw	r2,-40(fp)
 400ea10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 400ea14:	e0fff917 	ldw	r3,-28(fp)
 400ea18:	e0bffb17 	ldw	r2,-20(fp)
 400ea1c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 400ea20:	e0fff917 	ldw	r3,-28(fp)
 400ea24:	e0bffa03 	ldbu	r2,-24(fp)
 400ea28:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 400ea2c:	e0bff917 	ldw	r2,-28(fp)
 400ea30:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 400ea34:	e0bff917 	ldw	r2,-28(fp)
 400ea38:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 400ea3c:	e0bff917 	ldw	r2,-28(fp)
 400ea40:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 400ea44:	e0fff917 	ldw	r3,-28(fp)
 400ea48:	e0800317 	ldw	r2,12(fp)
 400ea4c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 400ea50:	e0fff917 	ldw	r3,-28(fp)
 400ea54:	e0800217 	ldw	r2,8(fp)
 400ea58:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 400ea5c:	e0fff917 	ldw	r3,-28(fp)
 400ea60:	e0bffc17 	ldw	r2,-16(fp)
 400ea64:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 400ea68:	e0fff917 	ldw	r3,-28(fp)
 400ea6c:	e0bffe0b 	ldhu	r2,-8(fp)
 400ea70:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 400ea74:	e0fff917 	ldw	r3,-28(fp)
 400ea78:	e0bffd0b 	ldhu	r2,-12(fp)
 400ea7c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 400ea80:	e0bff917 	ldw	r2,-28(fp)
 400ea84:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 400ea88:	e0bffa03 	ldbu	r2,-24(fp)
 400ea8c:	1004d0fa 	srli	r2,r2,3
 400ea90:	1007883a 	mov	r3,r2
 400ea94:	e0bff917 	ldw	r2,-28(fp)
 400ea98:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 400ea9c:	e0bffa03 	ldbu	r2,-24(fp)
 400eaa0:	108001cc 	andi	r2,r2,7
 400eaa4:	1007883a 	mov	r3,r2
 400eaa8:	e0bff917 	ldw	r2,-28(fp)
 400eaac:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 400eab0:	e0bff917 	ldw	r2,-28(fp)
 400eab4:	10800d03 	ldbu	r2,52(r2)
 400eab8:	10c03fcc 	andi	r3,r2,255
 400eabc:	00800044 	movi	r2,1
 400eac0:	10c4983a 	sll	r2,r2,r3
 400eac4:	1007883a 	mov	r3,r2
 400eac8:	e0bff917 	ldw	r2,-28(fp)
 400eacc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 400ead0:	e0bff917 	ldw	r2,-28(fp)
 400ead4:	10800cc3 	ldbu	r2,51(r2)
 400ead8:	10c03fcc 	andi	r3,r2,255
 400eadc:	00800044 	movi	r2,1
 400eae0:	10c4983a 	sll	r2,r2,r3
 400eae4:	1007883a 	mov	r3,r2
 400eae8:	e0bff917 	ldw	r2,-28(fp)
 400eaec:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 400eaf0:	e0bff917 	ldw	r2,-28(fp)
 400eaf4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 400eaf8:	e0bff917 	ldw	r2,-28(fp)
 400eafc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 400eb00:	e0bff917 	ldw	r2,-28(fp)
 400eb04:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 400eb08:	e0bff917 	ldw	r2,-28(fp)
 400eb0c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 400eb10:	e0bff917 	ldw	r2,-28(fp)
 400eb14:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 400eb18:	e0bff917 	ldw	r2,-28(fp)
 400eb1c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 400eb20:	e0bff917 	ldw	r2,-28(fp)
 400eb24:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 400eb28:	e0bff917 	ldw	r2,-28(fp)
 400eb2c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 400eb30:	e0bff917 	ldw	r2,-28(fp)
 400eb34:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 400eb38:	e0fff917 	ldw	r3,-28(fp)
 400eb3c:	00800fc4 	movi	r2,63
 400eb40:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 400eb44:	e0bff917 	ldw	r2,-28(fp)
 400eb48:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 400eb4c:	e13ff917 	ldw	r4,-28(fp)
 400eb50:	40368240 	call	4036824 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 400eb54:	e13ff917 	ldw	r4,-28(fp)
 400eb58:	40367300 	call	4036730 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eb5c:	0005303a 	rdctl	r2,status
 400eb60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eb64:	e0fff517 	ldw	r3,-44(fp)
 400eb68:	00bfff84 	movi	r2,-2
 400eb6c:	1884703a 	and	r2,r3,r2
 400eb70:	1001703a 	wrctl	status,r2
  
  return context;
 400eb74:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 400eb78:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 400eb7c:	e0bffa03 	ldbu	r2,-24(fp)
 400eb80:	00c101b4 	movhi	r3,1030
 400eb84:	18e09604 	addi	r3,r3,-32168
 400eb88:	1085883a 	add	r2,r2,r2
 400eb8c:	1085883a 	add	r2,r2,r2
 400eb90:	10c7883a 	add	r3,r2,r3
 400eb94:	e0bff917 	ldw	r2,-28(fp)
 400eb98:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 400eb9c:	d0e7ec17 	ldw	r3,-24656(gp)
 400eba0:	e0bff917 	ldw	r2,-28(fp)
 400eba4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 400eba8:	e0bff917 	ldw	r2,-28(fp)
 400ebac:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 400ebb0:	d0a7ec17 	ldw	r2,-24656(gp)
 400ebb4:	1005003a 	cmpeq	r2,r2,zero
 400ebb8:	1000031e 	bne	r2,zero,400ebc8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 400ebbc:	d0e7ec17 	ldw	r3,-24656(gp)
 400ebc0:	e0bff917 	ldw	r2,-28(fp)
 400ebc4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 400ebc8:	e0bff917 	ldw	r2,-28(fp)
 400ebcc:	d0a7ec15 	stw	r2,-24656(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 400ebd0:	e0bff917 	ldw	r2,-28(fp)
 400ebd4:	10c00d83 	ldbu	r3,54(r2)
 400ebd8:	d0a7f503 	ldbu	r2,-24620(gp)
 400ebdc:	1884b03a 	or	r2,r3,r2
 400ebe0:	d0a7f505 	stb	r2,-24620(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400ebe4:	e0bff917 	ldw	r2,-28(fp)
 400ebe8:	10800d03 	ldbu	r2,52(r2)
 400ebec:	11003fcc 	andi	r4,r2,255
 400ebf0:	e0bff917 	ldw	r2,-28(fp)
 400ebf4:	10800d03 	ldbu	r2,52(r2)
 400ebf8:	10c03fcc 	andi	r3,r2,255
 400ebfc:	d0a7f544 	addi	r2,gp,-24619
 400ec00:	1885883a 	add	r2,r3,r2
 400ec04:	10c00003 	ldbu	r3,0(r2)
 400ec08:	e0bff917 	ldw	r2,-28(fp)
 400ec0c:	10800d43 	ldbu	r2,53(r2)
 400ec10:	1884b03a 	or	r2,r3,r2
 400ec14:	1007883a 	mov	r3,r2
 400ec18:	d0a7f544 	addi	r2,gp,-24619
 400ec1c:	2085883a 	add	r2,r4,r2
 400ec20:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 400ec24:	d0a7f143 	ldbu	r2,-24635(gp)
 400ec28:	10800044 	addi	r2,r2,1
 400ec2c:	d0a7f145 	stb	r2,-24635(gp)
 400ec30:	e0bff817 	ldw	r2,-32(fp)
 400ec34:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec38:	e0bff417 	ldw	r2,-48(fp)
 400ec3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 400ec40:	e03fff15 	stw	zero,-4(fp)
 400ec44:	00000606 	br	400ec60 <OS_TCBInit+0x2c8>
 400ec48:	e0bff817 	ldw	r2,-32(fp)
 400ec4c:	e0bff315 	stw	r2,-52(fp)
 400ec50:	e0bff317 	ldw	r2,-52(fp)
 400ec54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 400ec58:	00801084 	movi	r2,66
 400ec5c:	e0bfff15 	stw	r2,-4(fp)
 400ec60:	e0bfff17 	ldw	r2,-4(fp)
}
 400ec64:	e037883a 	mov	sp,fp
 400ec68:	dfc00117 	ldw	ra,4(sp)
 400ec6c:	df000017 	ldw	fp,0(sp)
 400ec70:	dec00204 	addi	sp,sp,8
 400ec74:	f800283a 	ret

0400ec78 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 400ec78:	defffe04 	addi	sp,sp,-8
 400ec7c:	df000115 	stw	fp,4(sp)
 400ec80:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 400ec84:	d0a00a04 	addi	r2,gp,-32728
 400ec88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 400ec8c:	d0a00b04 	addi	r2,gp,-32724
 400ec90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 400ec94:	d0a00c84 	addi	r2,gp,-32718
 400ec98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 400ec9c:	d0a00d04 	addi	r2,gp,-32716
 400eca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 400eca4:	d0a00c04 	addi	r2,gp,-32720
 400eca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 400ecac:	d0a00d84 	addi	r2,gp,-32714
 400ecb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 400ecb4:	d0a00e04 	addi	r2,gp,-32712
 400ecb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 400ecbc:	d0a00e84 	addi	r2,gp,-32710
 400ecc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 400ecc4:	d0a00f04 	addi	r2,gp,-32708
 400ecc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 400eccc:	d0a00f84 	addi	r2,gp,-32706
 400ecd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 400ecd4:	d0a01004 	addi	r2,gp,-32704
 400ecd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 400ecdc:	d0a01084 	addi	r2,gp,-32702
 400ece0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 400ece4:	d0a01104 	addi	r2,gp,-32700
 400ece8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 400ecec:	d0a01184 	addi	r2,gp,-32698
 400ecf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 400ecf4:	d0a01204 	addi	r2,gp,-32696
 400ecf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 400ecfc:	d0a01284 	addi	r2,gp,-32694
 400ed00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 400ed04:	d0a01304 	addi	r2,gp,-32692
 400ed08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 400ed0c:	d0a01384 	addi	r2,gp,-32690
 400ed10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 400ed14:	d0a01404 	addi	r2,gp,-32688
 400ed18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 400ed1c:	d0a01484 	addi	r2,gp,-32686
 400ed20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 400ed24:	d0a01504 	addi	r2,gp,-32684
 400ed28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 400ed2c:	d0a01584 	addi	r2,gp,-32682
 400ed30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 400ed34:	d0a01604 	addi	r2,gp,-32680
 400ed38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 400ed3c:	d0a01684 	addi	r2,gp,-32678
 400ed40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 400ed44:	d0a01704 	addi	r2,gp,-32676
 400ed48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 400ed4c:	d0a01784 	addi	r2,gp,-32674
 400ed50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 400ed54:	d0a01804 	addi	r2,gp,-32672
 400ed58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 400ed5c:	d0a01884 	addi	r2,gp,-32670
 400ed60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 400ed64:	d0a01904 	addi	r2,gp,-32668
 400ed68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 400ed6c:	d0a01984 	addi	r2,gp,-32666
 400ed70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 400ed74:	d0a01a04 	addi	r2,gp,-32664
 400ed78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 400ed7c:	d0a01a84 	addi	r2,gp,-32662
 400ed80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 400ed84:	d0a01b04 	addi	r2,gp,-32660
 400ed88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 400ed8c:	d0a01b84 	addi	r2,gp,-32658
 400ed90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 400ed94:	d0a01c04 	addi	r2,gp,-32656
 400ed98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 400ed9c:	d0a01c84 	addi	r2,gp,-32654
 400eda0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 400eda4:	d0a01d04 	addi	r2,gp,-32652
 400eda8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 400edac:	d0a01d84 	addi	r2,gp,-32650
 400edb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 400edb4:	d0a01e04 	addi	r2,gp,-32648
 400edb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 400edbc:	d0a01e84 	addi	r2,gp,-32646
 400edc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 400edc4:	d0a01f04 	addi	r2,gp,-32644
 400edc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 400edcc:	d0a01f84 	addi	r2,gp,-32642
 400edd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 400edd4:	d0a02004 	addi	r2,gp,-32640
 400edd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 400eddc:	d0a02084 	addi	r2,gp,-32638
 400ede0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 400ede4:	d0a02104 	addi	r2,gp,-32636
 400ede8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 400edec:	d0a02604 	addi	r2,gp,-32616
 400edf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 400edf4:	e037883a 	mov	sp,fp
 400edf8:	df000017 	ldw	fp,0(sp)
 400edfc:	dec00104 	addi	sp,sp,4
 400ee00:	f800283a 	ret

0400ee04 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 400ee04:	defff104 	addi	sp,sp,-60
 400ee08:	df000e15 	stw	fp,56(sp)
 400ee0c:	df000e04 	addi	fp,sp,56
 400ee10:	e13ffa15 	stw	r4,-24(fp)
 400ee14:	e1fffd15 	stw	r7,-12(fp)
 400ee18:	e17ffb0d 	sth	r5,-20(fp)
 400ee1c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400ee20:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400ee24:	e0bffd17 	ldw	r2,-12(fp)
 400ee28:	1004c03a 	cmpne	r2,r2,zero
 400ee2c:	1000021e 	bne	r2,zero,400ee38 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 400ee30:	e03fff15 	stw	zero,-4(fp)
 400ee34:	0000bb06 	br	400f124 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400ee38:	e0bffa17 	ldw	r2,-24(fp)
 400ee3c:	1004c03a 	cmpne	r2,r2,zero
 400ee40:	1000051e 	bne	r2,zero,400ee58 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400ee44:	e0fffd17 	ldw	r3,-12(fp)
 400ee48:	00801b84 	movi	r2,110
 400ee4c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400ee50:	e03fff15 	stw	zero,-4(fp)
 400ee54:	0000b306 	br	400f124 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400ee58:	e0bffa17 	ldw	r2,-24(fp)
 400ee5c:	10800003 	ldbu	r2,0(r2)
 400ee60:	10803fcc 	andi	r2,r2,255
 400ee64:	10800160 	cmpeqi	r2,r2,5
 400ee68:	1000051e 	bne	r2,zero,400ee80 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 400ee6c:	e0fffd17 	ldw	r3,-12(fp)
 400ee70:	00800044 	movi	r2,1
 400ee74:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400ee78:	e03fff15 	stw	zero,-4(fp)
 400ee7c:	0000a906 	br	400f124 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 400ee80:	e0fffc03 	ldbu	r3,-16(fp)
 400ee84:	00bfe004 	movi	r2,-128
 400ee88:	1884703a 	and	r2,r3,r2
 400ee8c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 400ee90:	e0bff943 	ldbu	r2,-27(fp)
 400ee94:	1005003a 	cmpeq	r2,r2,zero
 400ee98:	1000061e 	bne	r2,zero,400eeb4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 400ee9c:	e0bffc03 	ldbu	r2,-16(fp)
 400eea0:	10801fcc 	andi	r2,r2,127
 400eea4:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 400eea8:	00800044 	movi	r2,1
 400eeac:	e0bff905 	stb	r2,-28(fp)
 400eeb0:	00000106 	br	400eeb8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 400eeb4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 400eeb8:	e0bffd17 	ldw	r2,-12(fp)
 400eebc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eec0:	0005303a 	rdctl	r2,status
 400eec4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eec8:	e0fff717 	ldw	r3,-36(fp)
 400eecc:	00bfff84 	movi	r2,-2
 400eed0:	1884703a 	and	r2,r3,r2
 400eed4:	1001703a 	wrctl	status,r2
  
  return context;
 400eed8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 400eedc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 400eee0:	e0bffc03 	ldbu	r2,-16(fp)
 400eee4:	e0bffe15 	stw	r2,-8(fp)
 400eee8:	e0fffe17 	ldw	r3,-8(fp)
 400eeec:	18800060 	cmpeqi	r2,r3,1
 400eef0:	1000651e 	bne	r2,zero,400f088 <OSFlagAccept+0x284>
 400eef4:	e0fffe17 	ldw	r3,-8(fp)
 400eef8:	18800088 	cmpgei	r2,r3,2
 400eefc:	1000041e 	bne	r2,zero,400ef10 <OSFlagAccept+0x10c>
 400ef00:	e0fffe17 	ldw	r3,-8(fp)
 400ef04:	1805003a 	cmpeq	r2,r3,zero
 400ef08:	1000421e 	bne	r2,zero,400f014 <OSFlagAccept+0x210>
 400ef0c:	00007b06 	br	400f0fc <OSFlagAccept+0x2f8>
 400ef10:	e0fffe17 	ldw	r3,-8(fp)
 400ef14:	188000a0 	cmpeqi	r2,r3,2
 400ef18:	1000041e 	bne	r2,zero,400ef2c <OSFlagAccept+0x128>
 400ef1c:	e0fffe17 	ldw	r3,-8(fp)
 400ef20:	188000e0 	cmpeqi	r2,r3,3
 400ef24:	10001e1e 	bne	r2,zero,400efa0 <OSFlagAccept+0x19c>
 400ef28:	00007406 	br	400f0fc <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400ef2c:	e0bffa17 	ldw	r2,-24(fp)
 400ef30:	10c0020b 	ldhu	r3,8(r2)
 400ef34:	e0bffb0b 	ldhu	r2,-20(fp)
 400ef38:	1884703a 	and	r2,r3,r2
 400ef3c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400ef40:	e0fff98b 	ldhu	r3,-26(fp)
 400ef44:	e0bffb0b 	ldhu	r2,-20(fp)
 400ef48:	18800d1e 	bne	r3,r2,400ef80 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400ef4c:	e0bff903 	ldbu	r2,-28(fp)
 400ef50:	10800058 	cmpnei	r2,r2,1
 400ef54:	10000d1e 	bne	r2,zero,400ef8c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400ef58:	e0bffa17 	ldw	r2,-24(fp)
 400ef5c:	1080020b 	ldhu	r2,8(r2)
 400ef60:	1007883a 	mov	r3,r2
 400ef64:	e0bff98b 	ldhu	r2,-26(fp)
 400ef68:	0084303a 	nor	r2,zero,r2
 400ef6c:	1884703a 	and	r2,r3,r2
 400ef70:	1007883a 	mov	r3,r2
 400ef74:	e0bffa17 	ldw	r2,-24(fp)
 400ef78:	10c0020d 	sth	r3,8(r2)
 400ef7c:	00000306 	br	400ef8c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400ef80:	e0fffd17 	ldw	r3,-12(fp)
 400ef84:	00801c04 	movi	r2,112
 400ef88:	18800005 	stb	r2,0(r3)
 400ef8c:	e0bff817 	ldw	r2,-32(fp)
 400ef90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef94:	e0bff617 	ldw	r2,-40(fp)
 400ef98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400ef9c:	00005f06 	br	400f11c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 400efa0:	e0bffa17 	ldw	r2,-24(fp)
 400efa4:	10c0020b 	ldhu	r3,8(r2)
 400efa8:	e0bffb0b 	ldhu	r2,-20(fp)
 400efac:	1884703a 	and	r2,r3,r2
 400efb0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400efb4:	e0bff98b 	ldhu	r2,-26(fp)
 400efb8:	1005003a 	cmpeq	r2,r2,zero
 400efbc:	10000d1e 	bne	r2,zero,400eff4 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400efc0:	e0bff903 	ldbu	r2,-28(fp)
 400efc4:	10800058 	cmpnei	r2,r2,1
 400efc8:	10000d1e 	bne	r2,zero,400f000 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400efcc:	e0bffa17 	ldw	r2,-24(fp)
 400efd0:	1080020b 	ldhu	r2,8(r2)
 400efd4:	1007883a 	mov	r3,r2
 400efd8:	e0bff98b 	ldhu	r2,-26(fp)
 400efdc:	0084303a 	nor	r2,zero,r2
 400efe0:	1884703a 	and	r2,r3,r2
 400efe4:	1007883a 	mov	r3,r2
 400efe8:	e0bffa17 	ldw	r2,-24(fp)
 400efec:	10c0020d 	sth	r3,8(r2)
 400eff0:	00000306 	br	400f000 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400eff4:	e0fffd17 	ldw	r3,-12(fp)
 400eff8:	00801c04 	movi	r2,112
 400effc:	18800005 	stb	r2,0(r3)
 400f000:	e0bff817 	ldw	r2,-32(fp)
 400f004:	e0bff515 	stw	r2,-44(fp)
 400f008:	e0bff517 	ldw	r2,-44(fp)
 400f00c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400f010:	00004206 	br	400f11c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400f014:	e0bffa17 	ldw	r2,-24(fp)
 400f018:	1080020b 	ldhu	r2,8(r2)
 400f01c:	0084303a 	nor	r2,zero,r2
 400f020:	1007883a 	mov	r3,r2
 400f024:	e0bffb0b 	ldhu	r2,-20(fp)
 400f028:	1884703a 	and	r2,r3,r2
 400f02c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400f030:	e0fff98b 	ldhu	r3,-26(fp)
 400f034:	e0bffb0b 	ldhu	r2,-20(fp)
 400f038:	18800b1e 	bne	r3,r2,400f068 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400f03c:	e0bff903 	ldbu	r2,-28(fp)
 400f040:	10800058 	cmpnei	r2,r2,1
 400f044:	10000b1e 	bne	r2,zero,400f074 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400f048:	e0bffa17 	ldw	r2,-24(fp)
 400f04c:	10c0020b 	ldhu	r3,8(r2)
 400f050:	e0bff98b 	ldhu	r2,-26(fp)
 400f054:	1884b03a 	or	r2,r3,r2
 400f058:	1007883a 	mov	r3,r2
 400f05c:	e0bffa17 	ldw	r2,-24(fp)
 400f060:	10c0020d 	sth	r3,8(r2)
 400f064:	00000306 	br	400f074 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400f068:	e0fffd17 	ldw	r3,-12(fp)
 400f06c:	00801c04 	movi	r2,112
 400f070:	18800005 	stb	r2,0(r3)
 400f074:	e0bff817 	ldw	r2,-32(fp)
 400f078:	e0bff415 	stw	r2,-48(fp)
 400f07c:	e0bff417 	ldw	r2,-48(fp)
 400f080:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400f084:	00002506 	br	400f11c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400f088:	e0bffa17 	ldw	r2,-24(fp)
 400f08c:	1080020b 	ldhu	r2,8(r2)
 400f090:	0084303a 	nor	r2,zero,r2
 400f094:	1007883a 	mov	r3,r2
 400f098:	e0bffb0b 	ldhu	r2,-20(fp)
 400f09c:	1884703a 	and	r2,r3,r2
 400f0a0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400f0a4:	e0bff98b 	ldhu	r2,-26(fp)
 400f0a8:	1005003a 	cmpeq	r2,r2,zero
 400f0ac:	10000b1e 	bne	r2,zero,400f0dc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400f0b0:	e0bff903 	ldbu	r2,-28(fp)
 400f0b4:	10800058 	cmpnei	r2,r2,1
 400f0b8:	10000b1e 	bne	r2,zero,400f0e8 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400f0bc:	e0bffa17 	ldw	r2,-24(fp)
 400f0c0:	10c0020b 	ldhu	r3,8(r2)
 400f0c4:	e0bff98b 	ldhu	r2,-26(fp)
 400f0c8:	1884b03a 	or	r2,r3,r2
 400f0cc:	1007883a 	mov	r3,r2
 400f0d0:	e0bffa17 	ldw	r2,-24(fp)
 400f0d4:	10c0020d 	sth	r3,8(r2)
 400f0d8:	00000306 	br	400f0e8 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 400f0dc:	e0fffd17 	ldw	r3,-12(fp)
 400f0e0:	00801c04 	movi	r2,112
 400f0e4:	18800005 	stb	r2,0(r3)
 400f0e8:	e0bff817 	ldw	r2,-32(fp)
 400f0ec:	e0bff315 	stw	r2,-52(fp)
 400f0f0:	e0bff317 	ldw	r2,-52(fp)
 400f0f4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 400f0f8:	00000806 	br	400f11c <OSFlagAccept+0x318>
 400f0fc:	e0bff817 	ldw	r2,-32(fp)
 400f100:	e0bff215 	stw	r2,-56(fp)
 400f104:	e0bff217 	ldw	r2,-56(fp)
 400f108:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 400f10c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 400f110:	e0fffd17 	ldw	r3,-12(fp)
 400f114:	00801bc4 	movi	r2,111
 400f118:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 400f11c:	e0bff98b 	ldhu	r2,-26(fp)
 400f120:	e0bfff15 	stw	r2,-4(fp)
 400f124:	e0bfff17 	ldw	r2,-4(fp)
}
 400f128:	e037883a 	mov	sp,fp
 400f12c:	df000017 	ldw	fp,0(sp)
 400f130:	dec00104 	addi	sp,sp,4
 400f134:	f800283a 	ret

0400f138 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 400f138:	defff704 	addi	sp,sp,-36
 400f13c:	df000815 	stw	fp,32(sp)
 400f140:	df000804 	addi	fp,sp,32
 400f144:	e17ffe15 	stw	r5,-8(fp)
 400f148:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 400f14c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 400f150:	e0bffe17 	ldw	r2,-8(fp)
 400f154:	1004c03a 	cmpne	r2,r2,zero
 400f158:	1000021e 	bne	r2,zero,400f164 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 400f15c:	e03fff15 	stw	zero,-4(fp)
 400f160:	00003f06 	br	400f260 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 400f164:	00810174 	movhi	r2,1029
 400f168:	1081b504 	addi	r2,r2,1748
 400f16c:	10800003 	ldbu	r2,0(r2)
 400f170:	10803fcc 	andi	r2,r2,255
 400f174:	1005003a 	cmpeq	r2,r2,zero
 400f178:	1000051e 	bne	r2,zero,400f190 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 400f17c:	e0fffe17 	ldw	r3,-8(fp)
 400f180:	00800404 	movi	r2,16
 400f184:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 400f188:	e03fff15 	stw	zero,-4(fp)
 400f18c:	00003406 	br	400f260 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f190:	0005303a 	rdctl	r2,status
 400f194:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f198:	e0fffa17 	ldw	r3,-24(fp)
 400f19c:	00bfff84 	movi	r2,-2
 400f1a0:	1884703a 	and	r2,r3,r2
 400f1a4:	1001703a 	wrctl	status,r2
  
  return context;
 400f1a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400f1ac:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 400f1b0:	00810174 	movhi	r2,1029
 400f1b4:	1081b804 	addi	r2,r2,1760
 400f1b8:	10800017 	ldw	r2,0(r2)
 400f1bc:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 400f1c0:	e0bffc17 	ldw	r2,-16(fp)
 400f1c4:	1005003a 	cmpeq	r2,r2,zero
 400f1c8:	10001c1e 	bne	r2,zero,400f23c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 400f1cc:	00810174 	movhi	r2,1029
 400f1d0:	1081b804 	addi	r2,r2,1760
 400f1d4:	10800017 	ldw	r2,0(r2)
 400f1d8:	10800117 	ldw	r2,4(r2)
 400f1dc:	1007883a 	mov	r3,r2
 400f1e0:	00810174 	movhi	r2,1029
 400f1e4:	1081b804 	addi	r2,r2,1760
 400f1e8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 400f1ec:	e0fffc17 	ldw	r3,-16(fp)
 400f1f0:	00800144 	movi	r2,5
 400f1f4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 400f1f8:	e0fffc17 	ldw	r3,-16(fp)
 400f1fc:	e0bffd0b 	ldhu	r2,-12(fp)
 400f200:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 400f204:	e0bffc17 	ldw	r2,-16(fp)
 400f208:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 400f20c:	e0fffc17 	ldw	r3,-16(fp)
 400f210:	00800fc4 	movi	r2,63
 400f214:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400f218:	e0bffc17 	ldw	r2,-16(fp)
 400f21c:	100002c5 	stb	zero,11(r2)
 400f220:	e0bffb17 	ldw	r2,-20(fp)
 400f224:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f228:	e0bff917 	ldw	r2,-28(fp)
 400f22c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 400f230:	e0bffe17 	ldw	r2,-8(fp)
 400f234:	10000005 	stb	zero,0(r2)
 400f238:	00000706 	br	400f258 <OSFlagCreate+0x120>
 400f23c:	e0bffb17 	ldw	r2,-20(fp)
 400f240:	e0bff815 	stw	r2,-32(fp)
 400f244:	e0bff817 	ldw	r2,-32(fp)
 400f248:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 400f24c:	e0fffe17 	ldw	r3,-8(fp)
 400f250:	00801c84 	movi	r2,114
 400f254:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 400f258:	e0bffc17 	ldw	r2,-16(fp)
 400f25c:	e0bfff15 	stw	r2,-4(fp)
 400f260:	e0bfff17 	ldw	r2,-4(fp)
}
 400f264:	e037883a 	mov	sp,fp
 400f268:	df000017 	ldw	fp,0(sp)
 400f26c:	dec00104 	addi	sp,sp,4
 400f270:	f800283a 	ret

0400f274 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 400f274:	defff004 	addi	sp,sp,-64
 400f278:	dfc00f15 	stw	ra,60(sp)
 400f27c:	df000e15 	stw	fp,56(sp)
 400f280:	df000e04 	addi	fp,sp,56
 400f284:	e13ffb15 	stw	r4,-20(fp)
 400f288:	e1bffd15 	stw	r6,-12(fp)
 400f28c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400f290:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400f294:	e0bffd17 	ldw	r2,-12(fp)
 400f298:	1004c03a 	cmpne	r2,r2,zero
 400f29c:	1000031e 	bne	r2,zero,400f2ac <OSFlagDel+0x38>
        return (pgrp);
 400f2a0:	e0bffb17 	ldw	r2,-20(fp)
 400f2a4:	e0bfff15 	stw	r2,-4(fp)
 400f2a8:	00009606 	br	400f504 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400f2ac:	e0bffb17 	ldw	r2,-20(fp)
 400f2b0:	1004c03a 	cmpne	r2,r2,zero
 400f2b4:	1000061e 	bne	r2,zero,400f2d0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400f2b8:	e0fffd17 	ldw	r3,-12(fp)
 400f2bc:	00801b84 	movi	r2,110
 400f2c0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400f2c4:	e0fffb17 	ldw	r3,-20(fp)
 400f2c8:	e0ffff15 	stw	r3,-4(fp)
 400f2cc:	00008d06 	br	400f504 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400f2d0:	00810174 	movhi	r2,1029
 400f2d4:	1081b504 	addi	r2,r2,1748
 400f2d8:	10800003 	ldbu	r2,0(r2)
 400f2dc:	10803fcc 	andi	r2,r2,255
 400f2e0:	1005003a 	cmpeq	r2,r2,zero
 400f2e4:	1000061e 	bne	r2,zero,400f300 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 400f2e8:	e0fffd17 	ldw	r3,-12(fp)
 400f2ec:	008003c4 	movi	r2,15
 400f2f0:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400f2f4:	e0bffb17 	ldw	r2,-20(fp)
 400f2f8:	e0bfff15 	stw	r2,-4(fp)
 400f2fc:	00008106 	br	400f504 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 400f300:	e0bffb17 	ldw	r2,-20(fp)
 400f304:	10800003 	ldbu	r2,0(r2)
 400f308:	10803fcc 	andi	r2,r2,255
 400f30c:	10800160 	cmpeqi	r2,r2,5
 400f310:	1000061e 	bne	r2,zero,400f32c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 400f314:	e0fffd17 	ldw	r3,-12(fp)
 400f318:	00800044 	movi	r2,1
 400f31c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 400f320:	e0fffb17 	ldw	r3,-20(fp)
 400f324:	e0ffff15 	stw	r3,-4(fp)
 400f328:	00007606 	br	400f504 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f32c:	0005303a 	rdctl	r2,status
 400f330:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f334:	e0fff617 	ldw	r3,-40(fp)
 400f338:	00bfff84 	movi	r2,-2
 400f33c:	1884703a 	and	r2,r3,r2
 400f340:	1001703a 	wrctl	status,r2
  
  return context;
 400f344:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 400f348:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 400f34c:	e0bffb17 	ldw	r2,-20(fp)
 400f350:	10800117 	ldw	r2,4(r2)
 400f354:	1005003a 	cmpeq	r2,r2,zero
 400f358:	1000031e 	bne	r2,zero,400f368 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 400f35c:	00800044 	movi	r2,1
 400f360:	e0bffa05 	stb	r2,-24(fp)
 400f364:	00000106 	br	400f36c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 400f368:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 400f36c:	e0bffc03 	ldbu	r2,-16(fp)
 400f370:	e0bffe15 	stw	r2,-8(fp)
 400f374:	e0fffe17 	ldw	r3,-8(fp)
 400f378:	1805003a 	cmpeq	r2,r3,zero
 400f37c:	1000041e 	bne	r2,zero,400f390 <OSFlagDel+0x11c>
 400f380:	e0fffe17 	ldw	r3,-8(fp)
 400f384:	18800060 	cmpeqi	r2,r3,1
 400f388:	1000281e 	bne	r2,zero,400f42c <OSFlagDel+0x1b8>
 400f38c:	00005206 	br	400f4d8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 400f390:	e0bffa03 	ldbu	r2,-24(fp)
 400f394:	1004c03a 	cmpne	r2,r2,zero
 400f398:	10001a1e 	bne	r2,zero,400f404 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 400f39c:	e0fffb17 	ldw	r3,-20(fp)
 400f3a0:	00800fc4 	movi	r2,63
 400f3a4:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400f3a8:	e0bffb17 	ldw	r2,-20(fp)
 400f3ac:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400f3b0:	e0bffb17 	ldw	r2,-20(fp)
 400f3b4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 400f3b8:	00810174 	movhi	r2,1029
 400f3bc:	1081b804 	addi	r2,r2,1760
 400f3c0:	10c00017 	ldw	r3,0(r2)
 400f3c4:	e0bffb17 	ldw	r2,-20(fp)
 400f3c8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400f3cc:	e0bffb17 	ldw	r2,-20(fp)
 400f3d0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 400f3d4:	00c10174 	movhi	r3,1029
 400f3d8:	18c1b804 	addi	r3,r3,1760
 400f3dc:	e0bffb17 	ldw	r2,-20(fp)
 400f3e0:	18800015 	stw	r2,0(r3)
 400f3e4:	e0bff717 	ldw	r2,-36(fp)
 400f3e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f3ec:	e0bff517 	ldw	r2,-44(fp)
 400f3f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 400f3f4:	e0bffd17 	ldw	r2,-12(fp)
 400f3f8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 400f3fc:	e03ff815 	stw	zero,-32(fp)
 400f400:	00003e06 	br	400f4fc <OSFlagDel+0x288>
 400f404:	e0bff717 	ldw	r2,-36(fp)
 400f408:	e0bff415 	stw	r2,-48(fp)
 400f40c:	e0bff417 	ldw	r2,-48(fp)
 400f410:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 400f414:	e0fffd17 	ldw	r3,-12(fp)
 400f418:	00801244 	movi	r2,73
 400f41c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 400f420:	e0bffb17 	ldw	r2,-20(fp)
 400f424:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 400f428:	00003406 	br	400f4fc <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400f42c:	e0bffb17 	ldw	r2,-20(fp)
 400f430:	10800117 	ldw	r2,4(r2)
 400f434:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400f438:	00000606 	br	400f454 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 400f43c:	e13ff917 	ldw	r4,-28(fp)
 400f440:	000b883a 	mov	r5,zero
 400f444:	40105840 	call	4010584 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 400f448:	e0bff917 	ldw	r2,-28(fp)
 400f44c:	10800017 	ldw	r2,0(r2)
 400f450:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 400f454:	e0bff917 	ldw	r2,-28(fp)
 400f458:	1004c03a 	cmpne	r2,r2,zero
 400f45c:	103ff71e 	bne	r2,zero,400f43c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 400f460:	e0fffb17 	ldw	r3,-20(fp)
 400f464:	00800fc4 	movi	r2,63
 400f468:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 400f46c:	e0bffb17 	ldw	r2,-20(fp)
 400f470:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 400f474:	e0bffb17 	ldw	r2,-20(fp)
 400f478:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 400f47c:	00810174 	movhi	r2,1029
 400f480:	1081b804 	addi	r2,r2,1760
 400f484:	10c00017 	ldw	r3,0(r2)
 400f488:	e0bffb17 	ldw	r2,-20(fp)
 400f48c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 400f490:	e0bffb17 	ldw	r2,-20(fp)
 400f494:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 400f498:	00c10174 	movhi	r3,1029
 400f49c:	18c1b804 	addi	r3,r3,1760
 400f4a0:	e0bffb17 	ldw	r2,-20(fp)
 400f4a4:	18800015 	stw	r2,0(r3)
 400f4a8:	e0bff717 	ldw	r2,-36(fp)
 400f4ac:	e0bff315 	stw	r2,-52(fp)
 400f4b0:	e0bff317 	ldw	r2,-52(fp)
 400f4b4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 400f4b8:	e0bffa03 	ldbu	r2,-24(fp)
 400f4bc:	10800058 	cmpnei	r2,r2,1
 400f4c0:	1000011e 	bne	r2,zero,400f4c8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 400f4c4:	400e5900 	call	400e590 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 400f4c8:	e0bffd17 	ldw	r2,-12(fp)
 400f4cc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 400f4d0:	e03ff815 	stw	zero,-32(fp)
             break;
 400f4d4:	00000906 	br	400f4fc <OSFlagDel+0x288>
 400f4d8:	e0bff717 	ldw	r2,-36(fp)
 400f4dc:	e0bff215 	stw	r2,-56(fp)
 400f4e0:	e0bff217 	ldw	r2,-56(fp)
 400f4e4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 400f4e8:	e0fffd17 	ldw	r3,-12(fp)
 400f4ec:	008001c4 	movi	r2,7
 400f4f0:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 400f4f4:	e0bffb17 	ldw	r2,-20(fp)
 400f4f8:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 400f4fc:	e0bff817 	ldw	r2,-32(fp)
 400f500:	e0bfff15 	stw	r2,-4(fp)
 400f504:	e0bfff17 	ldw	r2,-4(fp)
}
 400f508:	e037883a 	mov	sp,fp
 400f50c:	dfc00117 	ldw	ra,4(sp)
 400f510:	df000017 	ldw	fp,0(sp)
 400f514:	dec00204 	addi	sp,sp,8
 400f518:	f800283a 	ret

0400f51c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 400f51c:	defff504 	addi	sp,sp,-44
 400f520:	dfc00a15 	stw	ra,40(sp)
 400f524:	df000915 	stw	fp,36(sp)
 400f528:	df000904 	addi	fp,sp,36
 400f52c:	e13ffc15 	stw	r4,-16(fp)
 400f530:	e17ffd15 	stw	r5,-12(fp)
 400f534:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f538:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f53c:	e0bffe17 	ldw	r2,-8(fp)
 400f540:	1004c03a 	cmpne	r2,r2,zero
 400f544:	1000021e 	bne	r2,zero,400f550 <OSFlagNameGet+0x34>
        return (0);
 400f548:	e03fff15 	stw	zero,-4(fp)
 400f54c:	00003e06 	br	400f648 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400f550:	e0bffc17 	ldw	r2,-16(fp)
 400f554:	1004c03a 	cmpne	r2,r2,zero
 400f558:	1000051e 	bne	r2,zero,400f570 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400f55c:	e0fffe17 	ldw	r3,-8(fp)
 400f560:	00801b84 	movi	r2,110
 400f564:	18800005 	stb	r2,0(r3)
        return (0);
 400f568:	e03fff15 	stw	zero,-4(fp)
 400f56c:	00003606 	br	400f648 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400f570:	e0bffd17 	ldw	r2,-12(fp)
 400f574:	1004c03a 	cmpne	r2,r2,zero
 400f578:	1000051e 	bne	r2,zero,400f590 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 400f57c:	e0fffe17 	ldw	r3,-8(fp)
 400f580:	00800304 	movi	r2,12
 400f584:	18800005 	stb	r2,0(r3)
        return (0);
 400f588:	e03fff15 	stw	zero,-4(fp)
 400f58c:	00002e06 	br	400f648 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400f590:	00810174 	movhi	r2,1029
 400f594:	1081b504 	addi	r2,r2,1748
 400f598:	10800003 	ldbu	r2,0(r2)
 400f59c:	10803fcc 	andi	r2,r2,255
 400f5a0:	1005003a 	cmpeq	r2,r2,zero
 400f5a4:	1000051e 	bne	r2,zero,400f5bc <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 400f5a8:	e0fffe17 	ldw	r3,-8(fp)
 400f5ac:	00800444 	movi	r2,17
 400f5b0:	18800005 	stb	r2,0(r3)
        return (0);
 400f5b4:	e03fff15 	stw	zero,-4(fp)
 400f5b8:	00002306 	br	400f648 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f5bc:	0005303a 	rdctl	r2,status
 400f5c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f5c4:	e0fff917 	ldw	r3,-28(fp)
 400f5c8:	00bfff84 	movi	r2,-2
 400f5cc:	1884703a 	and	r2,r3,r2
 400f5d0:	1001703a 	wrctl	status,r2
  
  return context;
 400f5d4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 400f5d8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 400f5dc:	e0bffc17 	ldw	r2,-16(fp)
 400f5e0:	10800003 	ldbu	r2,0(r2)
 400f5e4:	10803fcc 	andi	r2,r2,255
 400f5e8:	10800160 	cmpeqi	r2,r2,5
 400f5ec:	1000091e 	bne	r2,zero,400f614 <OSFlagNameGet+0xf8>
 400f5f0:	e0bffa17 	ldw	r2,-24(fp)
 400f5f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f5f8:	e0bff817 	ldw	r2,-32(fp)
 400f5fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400f600:	e0fffe17 	ldw	r3,-8(fp)
 400f604:	00800044 	movi	r2,1
 400f608:	18800005 	stb	r2,0(r3)
        return (0);
 400f60c:	e03fff15 	stw	zero,-4(fp)
 400f610:	00000d06 	br	400f648 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 400f614:	e0bffc17 	ldw	r2,-16(fp)
 400f618:	11400284 	addi	r5,r2,10
 400f61c:	e13ffd17 	ldw	r4,-12(fp)
 400f620:	400e6d40 	call	400e6d4 <OS_StrCopy>
 400f624:	e0bffb05 	stb	r2,-20(fp)
 400f628:	e0bffa17 	ldw	r2,-24(fp)
 400f62c:	e0bff715 	stw	r2,-36(fp)
 400f630:	e0bff717 	ldw	r2,-36(fp)
 400f634:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400f638:	e0bffe17 	ldw	r2,-8(fp)
 400f63c:	10000005 	stb	zero,0(r2)
    return (len);
 400f640:	e0bffb03 	ldbu	r2,-20(fp)
 400f644:	e0bfff15 	stw	r2,-4(fp)
 400f648:	e0bfff17 	ldw	r2,-4(fp)
}
 400f64c:	e037883a 	mov	sp,fp
 400f650:	dfc00117 	ldw	ra,4(sp)
 400f654:	df000017 	ldw	fp,0(sp)
 400f658:	dec00204 	addi	sp,sp,8
 400f65c:	f800283a 	ret

0400f660 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 400f660:	defff504 	addi	sp,sp,-44
 400f664:	dfc00a15 	stw	ra,40(sp)
 400f668:	df000915 	stw	fp,36(sp)
 400f66c:	df000904 	addi	fp,sp,36
 400f670:	e13ffd15 	stw	r4,-12(fp)
 400f674:	e17ffe15 	stw	r5,-8(fp)
 400f678:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400f67c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400f680:	e0bfff17 	ldw	r2,-4(fp)
 400f684:	1005003a 	cmpeq	r2,r2,zero
 400f688:	1000451e 	bne	r2,zero,400f7a0 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 400f68c:	e0bffd17 	ldw	r2,-12(fp)
 400f690:	1004c03a 	cmpne	r2,r2,zero
 400f694:	1000041e 	bne	r2,zero,400f6a8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400f698:	e0ffff17 	ldw	r3,-4(fp)
 400f69c:	00801b84 	movi	r2,110
 400f6a0:	18800005 	stb	r2,0(r3)
        return;
 400f6a4:	00003e06 	br	400f7a0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400f6a8:	e0bffe17 	ldw	r2,-8(fp)
 400f6ac:	1004c03a 	cmpne	r2,r2,zero
 400f6b0:	1000041e 	bne	r2,zero,400f6c4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 400f6b4:	e0ffff17 	ldw	r3,-4(fp)
 400f6b8:	00800304 	movi	r2,12
 400f6bc:	18800005 	stb	r2,0(r3)
        return;
 400f6c0:	00003706 	br	400f7a0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400f6c4:	00810174 	movhi	r2,1029
 400f6c8:	1081b504 	addi	r2,r2,1748
 400f6cc:	10800003 	ldbu	r2,0(r2)
 400f6d0:	10803fcc 	andi	r2,r2,255
 400f6d4:	1005003a 	cmpeq	r2,r2,zero
 400f6d8:	1000041e 	bne	r2,zero,400f6ec <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 400f6dc:	e0ffff17 	ldw	r3,-4(fp)
 400f6e0:	00800484 	movi	r2,18
 400f6e4:	18800005 	stb	r2,0(r3)
        return;
 400f6e8:	00002d06 	br	400f7a0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f6ec:	0005303a 	rdctl	r2,status
 400f6f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f6f4:	e0fffa17 	ldw	r3,-24(fp)
 400f6f8:	00bfff84 	movi	r2,-2
 400f6fc:	1884703a 	and	r2,r3,r2
 400f700:	1001703a 	wrctl	status,r2
  
  return context;
 400f704:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 400f708:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 400f70c:	e0bffd17 	ldw	r2,-12(fp)
 400f710:	10800003 	ldbu	r2,0(r2)
 400f714:	10803fcc 	andi	r2,r2,255
 400f718:	10800160 	cmpeqi	r2,r2,5
 400f71c:	1000081e 	bne	r2,zero,400f740 <OSFlagNameSet+0xe0>
 400f720:	e0bffb17 	ldw	r2,-20(fp)
 400f724:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f728:	e0bff917 	ldw	r2,-28(fp)
 400f72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 400f730:	e0ffff17 	ldw	r3,-4(fp)
 400f734:	00800044 	movi	r2,1
 400f738:	18800005 	stb	r2,0(r3)
        return;
 400f73c:	00001806 	br	400f7a0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 400f740:	e13ffe17 	ldw	r4,-8(fp)
 400f744:	400e7540 	call	400e754 <OS_StrLen>
 400f748:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 400f74c:	e0bffc03 	ldbu	r2,-16(fp)
 400f750:	10800830 	cmpltui	r2,r2,32
 400f754:	1000081e 	bne	r2,zero,400f778 <OSFlagNameSet+0x118>
 400f758:	e0bffb17 	ldw	r2,-20(fp)
 400f75c:	e0bff815 	stw	r2,-32(fp)
 400f760:	e0bff817 	ldw	r2,-32(fp)
 400f764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 400f768:	e0ffff17 	ldw	r3,-4(fp)
 400f76c:	00801cc4 	movi	r2,115
 400f770:	18800005 	stb	r2,0(r3)
        return;
 400f774:	00000a06 	br	400f7a0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 400f778:	e0bffd17 	ldw	r2,-12(fp)
 400f77c:	11000284 	addi	r4,r2,10
 400f780:	e17ffe17 	ldw	r5,-8(fp)
 400f784:	400e6d40 	call	400e6d4 <OS_StrCopy>
 400f788:	e0bffb17 	ldw	r2,-20(fp)
 400f78c:	e0bff715 	stw	r2,-36(fp)
 400f790:	e0bff717 	ldw	r2,-36(fp)
 400f794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400f798:	e0bfff17 	ldw	r2,-4(fp)
 400f79c:	10000005 	stb	zero,0(r2)
    return;
}
 400f7a0:	e037883a 	mov	sp,fp
 400f7a4:	dfc00117 	ldw	ra,4(sp)
 400f7a8:	df000017 	ldw	fp,0(sp)
 400f7ac:	dec00204 	addi	sp,sp,8
 400f7b0:	f800283a 	ret

0400f7b4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 400f7b4:	deffe004 	addi	sp,sp,-128
 400f7b8:	dfc01f15 	stw	ra,124(sp)
 400f7bc:	df001e15 	stw	fp,120(sp)
 400f7c0:	df001e04 	addi	fp,sp,120
 400f7c4:	e13ff915 	stw	r4,-28(fp)
 400f7c8:	e17ffa0d 	sth	r5,-24(fp)
 400f7cc:	e1bffb05 	stb	r6,-20(fp)
 400f7d0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400f7d4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 400f7d8:	e0800217 	ldw	r2,8(fp)
 400f7dc:	1004c03a 	cmpne	r2,r2,zero
 400f7e0:	1000021e 	bne	r2,zero,400f7ec <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 400f7e4:	e03fff15 	stw	zero,-4(fp)
 400f7e8:	00017d06 	br	400fde0 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 400f7ec:	e0bff917 	ldw	r2,-28(fp)
 400f7f0:	1004c03a 	cmpne	r2,r2,zero
 400f7f4:	1000051e 	bne	r2,zero,400f80c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400f7f8:	e0c00217 	ldw	r3,8(fp)
 400f7fc:	00801b84 	movi	r2,110
 400f800:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400f804:	e03fff15 	stw	zero,-4(fp)
 400f808:	00017506 	br	400fde0 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 400f80c:	00810174 	movhi	r2,1029
 400f810:	1081b504 	addi	r2,r2,1748
 400f814:	10800003 	ldbu	r2,0(r2)
 400f818:	10803fcc 	andi	r2,r2,255
 400f81c:	1005003a 	cmpeq	r2,r2,zero
 400f820:	1000051e 	bne	r2,zero,400f838 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 400f824:	e0c00217 	ldw	r3,8(fp)
 400f828:	00800084 	movi	r2,2
 400f82c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400f830:	e03fff15 	stw	zero,-4(fp)
 400f834:	00016a06 	br	400fde0 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 400f838:	00810174 	movhi	r2,1029
 400f83c:	1081a704 	addi	r2,r2,1692
 400f840:	10800003 	ldbu	r2,0(r2)
 400f844:	10803fcc 	andi	r2,r2,255
 400f848:	1005003a 	cmpeq	r2,r2,zero
 400f84c:	1000051e 	bne	r2,zero,400f864 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 400f850:	e0c00217 	ldw	r3,8(fp)
 400f854:	00800344 	movi	r2,13
 400f858:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400f85c:	e03fff15 	stw	zero,-4(fp)
 400f860:	00015f06 	br	400fde0 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 400f864:	e0bff917 	ldw	r2,-28(fp)
 400f868:	10800003 	ldbu	r2,0(r2)
 400f86c:	10803fcc 	andi	r2,r2,255
 400f870:	10800160 	cmpeqi	r2,r2,5
 400f874:	1000051e 	bne	r2,zero,400f88c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 400f878:	e0c00217 	ldw	r3,8(fp)
 400f87c:	00800044 	movi	r2,1
 400f880:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400f884:	e03fff15 	stw	zero,-4(fp)
 400f888:	00015506 	br	400fde0 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 400f88c:	e0fffb03 	ldbu	r3,-20(fp)
 400f890:	00bfe004 	movi	r2,-128
 400f894:	1884703a 	and	r2,r3,r2
 400f898:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 400f89c:	e0bff283 	ldbu	r2,-54(fp)
 400f8a0:	1005003a 	cmpeq	r2,r2,zero
 400f8a4:	1000071e 	bne	r2,zero,400f8c4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 400f8a8:	00c01fc4 	movi	r3,127
 400f8ac:	e0bffb03 	ldbu	r2,-20(fp)
 400f8b0:	10c4703a 	and	r2,r2,r3
 400f8b4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 400f8b8:	00800044 	movi	r2,1
 400f8bc:	e0bff205 	stb	r2,-56(fp)
 400f8c0:	00000106 	br	400f8c8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 400f8c4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f8c8:	0005303a 	rdctl	r2,status
 400f8cc:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f8d0:	e0fff017 	ldw	r3,-64(fp)
 400f8d4:	00bfff84 	movi	r2,-2
 400f8d8:	1884703a 	and	r2,r3,r2
 400f8dc:	1001703a 	wrctl	status,r2
  
  return context;
 400f8e0:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 400f8e4:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 400f8e8:	e0bffb03 	ldbu	r2,-20(fp)
 400f8ec:	e0bffe15 	stw	r2,-8(fp)
 400f8f0:	e0fffe17 	ldw	r3,-8(fp)
 400f8f4:	18800060 	cmpeqi	r2,r3,1
 400f8f8:	1000981e 	bne	r2,zero,400fb5c <OSFlagPend+0x3a8>
 400f8fc:	e0fffe17 	ldw	r3,-8(fp)
 400f900:	18800088 	cmpgei	r2,r3,2
 400f904:	1000041e 	bne	r2,zero,400f918 <OSFlagPend+0x164>
 400f908:	e0fffe17 	ldw	r3,-8(fp)
 400f90c:	1805003a 	cmpeq	r2,r3,zero
 400f910:	1000641e 	bne	r2,zero,400faa4 <OSFlagPend+0x2f0>
 400f914:	0000bf06 	br	400fc14 <OSFlagPend+0x460>
 400f918:	e0fffe17 	ldw	r3,-8(fp)
 400f91c:	188000a0 	cmpeqi	r2,r3,2
 400f920:	1000041e 	bne	r2,zero,400f934 <OSFlagPend+0x180>
 400f924:	e0fffe17 	ldw	r3,-8(fp)
 400f928:	188000e0 	cmpeqi	r2,r3,3
 400f92c:	10002f1e 	bne	r2,zero,400f9ec <OSFlagPend+0x238>
 400f930:	0000b806 	br	400fc14 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 400f934:	e0bff917 	ldw	r2,-28(fp)
 400f938:	10c0020b 	ldhu	r3,8(r2)
 400f93c:	e0bffa0b 	ldhu	r2,-24(fp)
 400f940:	1884703a 	and	r2,r3,r2
 400f944:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400f948:	e0fff30b 	ldhu	r3,-52(fp)
 400f94c:	e0bffa0b 	ldhu	r2,-24(fp)
 400f950:	18801a1e 	bne	r3,r2,400f9bc <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400f954:	e0bff203 	ldbu	r2,-56(fp)
 400f958:	10800058 	cmpnei	r2,r2,1
 400f95c:	1000091e 	bne	r2,zero,400f984 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 400f960:	e0bff917 	ldw	r2,-28(fp)
 400f964:	1080020b 	ldhu	r2,8(r2)
 400f968:	1007883a 	mov	r3,r2
 400f96c:	e0bff30b 	ldhu	r2,-52(fp)
 400f970:	0084303a 	nor	r2,zero,r2
 400f974:	1884703a 	and	r2,r3,r2
 400f978:	1007883a 	mov	r3,r2
 400f97c:	e0bff917 	ldw	r2,-28(fp)
 400f980:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400f984:	00810174 	movhi	r2,1029
 400f988:	1081b604 	addi	r2,r2,1752
 400f98c:	10c00017 	ldw	r3,0(r2)
 400f990:	e0bff30b 	ldhu	r2,-52(fp)
 400f994:	18800b0d 	sth	r2,44(r3)
 400f998:	e0bff117 	ldw	r2,-60(fp)
 400f99c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f9a0:	e0bfef17 	ldw	r2,-68(fp)
 400f9a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400f9a8:	e0800217 	ldw	r2,8(fp)
 400f9ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400f9b0:	e0bff30b 	ldhu	r2,-52(fp)
 400f9b4:	e0bfff15 	stw	r2,-4(fp)
 400f9b8:	00010906 	br	400fde0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400f9bc:	e1bffa0b 	ldhu	r6,-24(fp)
 400f9c0:	e1fffb03 	ldbu	r7,-20(fp)
 400f9c4:	e0bffc0b 	ldhu	r2,-16(fp)
 400f9c8:	e17ff404 	addi	r5,fp,-48
 400f9cc:	d8800015 	stw	r2,0(sp)
 400f9d0:	e13ff917 	ldw	r4,-28(fp)
 400f9d4:	40102dc0 	call	40102dc <OS_FlagBlock>
 400f9d8:	e0bff117 	ldw	r2,-60(fp)
 400f9dc:	e0bfee15 	stw	r2,-72(fp)
 400f9e0:	e0bfee17 	ldw	r2,-72(fp)
 400f9e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400f9e8:	00009506 	br	400fc40 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 400f9ec:	e0bff917 	ldw	r2,-28(fp)
 400f9f0:	10c0020b 	ldhu	r3,8(r2)
 400f9f4:	e0bffa0b 	ldhu	r2,-24(fp)
 400f9f8:	1884703a 	and	r2,r3,r2
 400f9fc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 400fa00:	e0bff30b 	ldhu	r2,-52(fp)
 400fa04:	1005003a 	cmpeq	r2,r2,zero
 400fa08:	10001a1e 	bne	r2,zero,400fa74 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400fa0c:	e0bff203 	ldbu	r2,-56(fp)
 400fa10:	10800058 	cmpnei	r2,r2,1
 400fa14:	1000091e 	bne	r2,zero,400fa3c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 400fa18:	e0bff917 	ldw	r2,-28(fp)
 400fa1c:	1080020b 	ldhu	r2,8(r2)
 400fa20:	1007883a 	mov	r3,r2
 400fa24:	e0bff30b 	ldhu	r2,-52(fp)
 400fa28:	0084303a 	nor	r2,zero,r2
 400fa2c:	1884703a 	and	r2,r3,r2
 400fa30:	1007883a 	mov	r3,r2
 400fa34:	e0bff917 	ldw	r2,-28(fp)
 400fa38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400fa3c:	00810174 	movhi	r2,1029
 400fa40:	1081b604 	addi	r2,r2,1752
 400fa44:	10c00017 	ldw	r3,0(r2)
 400fa48:	e0bff30b 	ldhu	r2,-52(fp)
 400fa4c:	18800b0d 	sth	r2,44(r3)
 400fa50:	e0bff117 	ldw	r2,-60(fp)
 400fa54:	e0bfed15 	stw	r2,-76(fp)
 400fa58:	e0bfed17 	ldw	r2,-76(fp)
 400fa5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400fa60:	e0800217 	ldw	r2,8(fp)
 400fa64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400fa68:	e0fff30b 	ldhu	r3,-52(fp)
 400fa6c:	e0ffff15 	stw	r3,-4(fp)
 400fa70:	0000db06 	br	400fde0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400fa74:	e1bffa0b 	ldhu	r6,-24(fp)
 400fa78:	e1fffb03 	ldbu	r7,-20(fp)
 400fa7c:	e0bffc0b 	ldhu	r2,-16(fp)
 400fa80:	e17ff404 	addi	r5,fp,-48
 400fa84:	d8800015 	stw	r2,0(sp)
 400fa88:	e13ff917 	ldw	r4,-28(fp)
 400fa8c:	40102dc0 	call	40102dc <OS_FlagBlock>
 400fa90:	e0bff117 	ldw	r2,-60(fp)
 400fa94:	e0bfec15 	stw	r2,-80(fp)
 400fa98:	e0bfec17 	ldw	r2,-80(fp)
 400fa9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400faa0:	00006706 	br	400fc40 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 400faa4:	e0bff917 	ldw	r2,-28(fp)
 400faa8:	1080020b 	ldhu	r2,8(r2)
 400faac:	0084303a 	nor	r2,zero,r2
 400fab0:	1007883a 	mov	r3,r2
 400fab4:	e0bffa0b 	ldhu	r2,-24(fp)
 400fab8:	1884703a 	and	r2,r3,r2
 400fabc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 400fac0:	e0fff30b 	ldhu	r3,-52(fp)
 400fac4:	e0bffa0b 	ldhu	r2,-24(fp)
 400fac8:	1880181e 	bne	r3,r2,400fb2c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400facc:	e0bff203 	ldbu	r2,-56(fp)
 400fad0:	10800058 	cmpnei	r2,r2,1
 400fad4:	1000071e 	bne	r2,zero,400faf4 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 400fad8:	e0bff917 	ldw	r2,-28(fp)
 400fadc:	10c0020b 	ldhu	r3,8(r2)
 400fae0:	e0bff30b 	ldhu	r2,-52(fp)
 400fae4:	1884b03a 	or	r2,r3,r2
 400fae8:	1007883a 	mov	r3,r2
 400faec:	e0bff917 	ldw	r2,-28(fp)
 400faf0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400faf4:	00810174 	movhi	r2,1029
 400faf8:	1081b604 	addi	r2,r2,1752
 400fafc:	10c00017 	ldw	r3,0(r2)
 400fb00:	e0bff30b 	ldhu	r2,-52(fp)
 400fb04:	18800b0d 	sth	r2,44(r3)
 400fb08:	e0bff117 	ldw	r2,-60(fp)
 400fb0c:	e0bfeb15 	stw	r2,-84(fp)
 400fb10:	e0bfeb17 	ldw	r2,-84(fp)
 400fb14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400fb18:	e0800217 	ldw	r2,8(fp)
 400fb1c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400fb20:	e0bff30b 	ldhu	r2,-52(fp)
 400fb24:	e0bfff15 	stw	r2,-4(fp)
 400fb28:	0000ad06 	br	400fde0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400fb2c:	e1bffa0b 	ldhu	r6,-24(fp)
 400fb30:	e1fffb03 	ldbu	r7,-20(fp)
 400fb34:	e0bffc0b 	ldhu	r2,-16(fp)
 400fb38:	e17ff404 	addi	r5,fp,-48
 400fb3c:	d8800015 	stw	r2,0(sp)
 400fb40:	e13ff917 	ldw	r4,-28(fp)
 400fb44:	40102dc0 	call	40102dc <OS_FlagBlock>
 400fb48:	e0bff117 	ldw	r2,-60(fp)
 400fb4c:	e0bfea15 	stw	r2,-88(fp)
 400fb50:	e0bfea17 	ldw	r2,-88(fp)
 400fb54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400fb58:	00003906 	br	400fc40 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 400fb5c:	e0bff917 	ldw	r2,-28(fp)
 400fb60:	1080020b 	ldhu	r2,8(r2)
 400fb64:	0084303a 	nor	r2,zero,r2
 400fb68:	1007883a 	mov	r3,r2
 400fb6c:	e0bffa0b 	ldhu	r2,-24(fp)
 400fb70:	1884703a 	and	r2,r3,r2
 400fb74:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 400fb78:	e0bff30b 	ldhu	r2,-52(fp)
 400fb7c:	1005003a 	cmpeq	r2,r2,zero
 400fb80:	1000181e 	bne	r2,zero,400fbe4 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 400fb84:	e0bff203 	ldbu	r2,-56(fp)
 400fb88:	10800058 	cmpnei	r2,r2,1
 400fb8c:	1000071e 	bne	r2,zero,400fbac <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 400fb90:	e0bff917 	ldw	r2,-28(fp)
 400fb94:	10c0020b 	ldhu	r3,8(r2)
 400fb98:	e0bff30b 	ldhu	r2,-52(fp)
 400fb9c:	1884b03a 	or	r2,r3,r2
 400fba0:	1007883a 	mov	r3,r2
 400fba4:	e0bff917 	ldw	r2,-28(fp)
 400fba8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 400fbac:	00810174 	movhi	r2,1029
 400fbb0:	1081b604 	addi	r2,r2,1752
 400fbb4:	10c00017 	ldw	r3,0(r2)
 400fbb8:	e0bff30b 	ldhu	r2,-52(fp)
 400fbbc:	18800b0d 	sth	r2,44(r3)
 400fbc0:	e0bff117 	ldw	r2,-60(fp)
 400fbc4:	e0bfe915 	stw	r2,-92(fp)
 400fbc8:	e0bfe917 	ldw	r2,-92(fp)
 400fbcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 400fbd0:	e0800217 	ldw	r2,8(fp)
 400fbd4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 400fbd8:	e0fff30b 	ldhu	r3,-52(fp)
 400fbdc:	e0ffff15 	stw	r3,-4(fp)
 400fbe0:	00007f06 	br	400fde0 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 400fbe4:	e1bffa0b 	ldhu	r6,-24(fp)
 400fbe8:	e1fffb03 	ldbu	r7,-20(fp)
 400fbec:	e0bffc0b 	ldhu	r2,-16(fp)
 400fbf0:	e17ff404 	addi	r5,fp,-48
 400fbf4:	d8800015 	stw	r2,0(sp)
 400fbf8:	e13ff917 	ldw	r4,-28(fp)
 400fbfc:	40102dc0 	call	40102dc <OS_FlagBlock>
 400fc00:	e0bff117 	ldw	r2,-60(fp)
 400fc04:	e0bfe815 	stw	r2,-96(fp)
 400fc08:	e0bfe817 	ldw	r2,-96(fp)
 400fc0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 400fc10:	00000b06 	br	400fc40 <OSFlagPend+0x48c>
 400fc14:	e0bff117 	ldw	r2,-60(fp)
 400fc18:	e0bfe715 	stw	r2,-100(fp)
 400fc1c:	e0bfe717 	ldw	r2,-100(fp)
 400fc20:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 400fc24:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 400fc28:	e0c00217 	ldw	r3,8(fp)
 400fc2c:	00801bc4 	movi	r2,111
 400fc30:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 400fc34:	e0bff30b 	ldhu	r2,-52(fp)
 400fc38:	e0bfff15 	stw	r2,-4(fp)
 400fc3c:	00006806 	br	400fde0 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 400fc40:	400e5900 	call	400e590 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fc44:	0005303a 	rdctl	r2,status
 400fc48:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fc4c:	e0ffe617 	ldw	r3,-104(fp)
 400fc50:	00bfff84 	movi	r2,-2
 400fc54:	1884703a 	and	r2,r3,r2
 400fc58:	1001703a 	wrctl	status,r2
  
  return context;
 400fc5c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 400fc60:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 400fc64:	00810174 	movhi	r2,1029
 400fc68:	1081b604 	addi	r2,r2,1752
 400fc6c:	10800017 	ldw	r2,0(r2)
 400fc70:	10800c43 	ldbu	r2,49(r2)
 400fc74:	10803fcc 	andi	r2,r2,255
 400fc78:	1005003a 	cmpeq	r2,r2,zero
 400fc7c:	1000221e 	bne	r2,zero,400fd08 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 400fc80:	00810174 	movhi	r2,1029
 400fc84:	1081b604 	addi	r2,r2,1752
 400fc88:	10800017 	ldw	r2,0(r2)
 400fc8c:	10800c43 	ldbu	r2,49(r2)
 400fc90:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400fc94:	00810174 	movhi	r2,1029
 400fc98:	1081b604 	addi	r2,r2,1752
 400fc9c:	10800017 	ldw	r2,0(r2)
 400fca0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 400fca4:	e13ff404 	addi	r4,fp,-48
 400fca8:	40106940 	call	4010694 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 400fcac:	00810174 	movhi	r2,1029
 400fcb0:	1081b604 	addi	r2,r2,1752
 400fcb4:	10800017 	ldw	r2,0(r2)
 400fcb8:	10000c05 	stb	zero,48(r2)
 400fcbc:	e0bff117 	ldw	r2,-60(fp)
 400fcc0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fcc4:	e0bfe517 	ldw	r2,-108(fp)
 400fcc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 400fccc:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 400fcd0:	e0bff243 	ldbu	r2,-55(fp)
 400fcd4:	108000a0 	cmpeqi	r2,r2,2
 400fcd8:	1000011e 	bne	r2,zero,400fce0 <OSFlagPend+0x52c>
 400fcdc:	00000406 	br	400fcf0 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 400fce0:	e0c00217 	ldw	r3,8(fp)
 400fce4:	00800384 	movi	r2,14
 400fce8:	18800005 	stb	r2,0(r3)
                 break;
 400fcec:	00000306 	br	400fcfc <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 400fcf0:	e0c00217 	ldw	r3,8(fp)
 400fcf4:	00800284 	movi	r2,10
 400fcf8:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 400fcfc:	e0fff30b 	ldhu	r3,-52(fp)
 400fd00:	e0ffff15 	stw	r3,-4(fp)
 400fd04:	00003606 	br	400fde0 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 400fd08:	00810174 	movhi	r2,1029
 400fd0c:	1081b604 	addi	r2,r2,1752
 400fd10:	10800017 	ldw	r2,0(r2)
 400fd14:	10800b0b 	ldhu	r2,44(r2)
 400fd18:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 400fd1c:	e0bff203 	ldbu	r2,-56(fp)
 400fd20:	10800058 	cmpnei	r2,r2,1
 400fd24:	1000261e 	bne	r2,zero,400fdc0 <OSFlagPend+0x60c>
        switch (wait_type) {
 400fd28:	e0bffb03 	ldbu	r2,-20(fp)
 400fd2c:	e0bffd15 	stw	r2,-12(fp)
 400fd30:	e0fffd17 	ldw	r3,-12(fp)
 400fd34:	1804803a 	cmplt	r2,r3,zero
 400fd38:	1000181e 	bne	r2,zero,400fd9c <OSFlagPend+0x5e8>
 400fd3c:	e0fffd17 	ldw	r3,-12(fp)
 400fd40:	18800090 	cmplti	r2,r3,2
 400fd44:	10000d1e 	bne	r2,zero,400fd7c <OSFlagPend+0x5c8>
 400fd48:	e0fffd17 	ldw	r3,-12(fp)
 400fd4c:	18800108 	cmpgei	r2,r3,4
 400fd50:	1000121e 	bne	r2,zero,400fd9c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 400fd54:	e0bff917 	ldw	r2,-28(fp)
 400fd58:	1080020b 	ldhu	r2,8(r2)
 400fd5c:	1007883a 	mov	r3,r2
 400fd60:	e0bff30b 	ldhu	r2,-52(fp)
 400fd64:	0084303a 	nor	r2,zero,r2
 400fd68:	1884703a 	and	r2,r3,r2
 400fd6c:	1007883a 	mov	r3,r2
 400fd70:	e0bff917 	ldw	r2,-28(fp)
 400fd74:	10c0020d 	sth	r3,8(r2)
                 break;
 400fd78:	00001106 	br	400fdc0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 400fd7c:	e0bff917 	ldw	r2,-28(fp)
 400fd80:	10c0020b 	ldhu	r3,8(r2)
 400fd84:	e0bff30b 	ldhu	r2,-52(fp)
 400fd88:	1884b03a 	or	r2,r3,r2
 400fd8c:	1007883a 	mov	r3,r2
 400fd90:	e0bff917 	ldw	r2,-28(fp)
 400fd94:	10c0020d 	sth	r3,8(r2)
                 break;
 400fd98:	00000906 	br	400fdc0 <OSFlagPend+0x60c>
 400fd9c:	e0bff117 	ldw	r2,-60(fp)
 400fda0:	e0bfe415 	stw	r2,-112(fp)
 400fda4:	e0bfe417 	ldw	r2,-112(fp)
 400fda8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 400fdac:	e0c00217 	ldw	r3,8(fp)
 400fdb0:	00801bc4 	movi	r2,111
 400fdb4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 400fdb8:	e03fff15 	stw	zero,-4(fp)
 400fdbc:	00000806 	br	400fde0 <OSFlagPend+0x62c>
 400fdc0:	e0bff117 	ldw	r2,-60(fp)
 400fdc4:	e0bfe315 	stw	r2,-116(fp)
 400fdc8:	e0bfe317 	ldw	r2,-116(fp)
 400fdcc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 400fdd0:	e0800217 	ldw	r2,8(fp)
 400fdd4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 400fdd8:	e0bff30b 	ldhu	r2,-52(fp)
 400fddc:	e0bfff15 	stw	r2,-4(fp)
 400fde0:	e0bfff17 	ldw	r2,-4(fp)
}
 400fde4:	e037883a 	mov	sp,fp
 400fde8:	dfc00117 	ldw	ra,4(sp)
 400fdec:	df000017 	ldw	fp,0(sp)
 400fdf0:	dec00204 	addi	sp,sp,8
 400fdf4:	f800283a 	ret

0400fdf8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 400fdf8:	defffb04 	addi	sp,sp,-20
 400fdfc:	df000415 	stw	fp,16(sp)
 400fe00:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 400fe04:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fe08:	0005303a 	rdctl	r2,status
 400fe0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fe10:	e0fffd17 	ldw	r3,-12(fp)
 400fe14:	00bfff84 	movi	r2,-2
 400fe18:	1884703a 	and	r2,r3,r2
 400fe1c:	1001703a 	wrctl	status,r2
  
  return context;
 400fe20:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 400fe24:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 400fe28:	00810174 	movhi	r2,1029
 400fe2c:	1081b604 	addi	r2,r2,1752
 400fe30:	10800017 	ldw	r2,0(r2)
 400fe34:	10800b0b 	ldhu	r2,44(r2)
 400fe38:	e0bfff0d 	sth	r2,-4(fp)
 400fe3c:	e0bffe17 	ldw	r2,-8(fp)
 400fe40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fe44:	e0bffc17 	ldw	r2,-16(fp)
 400fe48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 400fe4c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 400fe50:	e037883a 	mov	sp,fp
 400fe54:	df000017 	ldw	fp,0(sp)
 400fe58:	dec00104 	addi	sp,sp,4
 400fe5c:	f800283a 	ret

0400fe60 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 400fe60:	deffed04 	addi	sp,sp,-76
 400fe64:	dfc01215 	stw	ra,72(sp)
 400fe68:	df001115 	stw	fp,68(sp)
 400fe6c:	df001104 	addi	fp,sp,68
 400fe70:	e13ff915 	stw	r4,-28(fp)
 400fe74:	e1fffc15 	stw	r7,-16(fp)
 400fe78:	e17ffa0d 	sth	r5,-24(fp)
 400fe7c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 400fe80:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 400fe84:	e0bffc17 	ldw	r2,-16(fp)
 400fe88:	1004c03a 	cmpne	r2,r2,zero
 400fe8c:	1000021e 	bne	r2,zero,400fe98 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 400fe90:	e03fff15 	stw	zero,-4(fp)
 400fe94:	0000d606 	br	40101f0 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 400fe98:	e0bff917 	ldw	r2,-28(fp)
 400fe9c:	1004c03a 	cmpne	r2,r2,zero
 400fea0:	1000051e 	bne	r2,zero,400feb8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 400fea4:	e0fffc17 	ldw	r3,-16(fp)
 400fea8:	00801b84 	movi	r2,110
 400feac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400feb0:	e03fff15 	stw	zero,-4(fp)
 400feb4:	0000ce06 	br	40101f0 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 400feb8:	e0bff917 	ldw	r2,-28(fp)
 400febc:	10800003 	ldbu	r2,0(r2)
 400fec0:	10803fcc 	andi	r2,r2,255
 400fec4:	10800160 	cmpeqi	r2,r2,5
 400fec8:	1000051e 	bne	r2,zero,400fee0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 400fecc:	e0fffc17 	ldw	r3,-16(fp)
 400fed0:	00800044 	movi	r2,1
 400fed4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 400fed8:	e03fff15 	stw	zero,-4(fp)
 400fedc:	0000c406 	br	40101f0 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fee0:	0005303a 	rdctl	r2,status
 400fee4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fee8:	e0fff417 	ldw	r3,-48(fp)
 400feec:	00bfff84 	movi	r2,-2
 400fef0:	1884703a 	and	r2,r3,r2
 400fef4:	1001703a 	wrctl	status,r2
  
  return context;
 400fef8:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 400fefc:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 400ff00:	e0bffb03 	ldbu	r2,-20(fp)
 400ff04:	e0bffe15 	stw	r2,-8(fp)
 400ff08:	e0fffe17 	ldw	r3,-8(fp)
 400ff0c:	1805003a 	cmpeq	r2,r3,zero
 400ff10:	1000041e 	bne	r2,zero,400ff24 <OSFlagPost+0xc4>
 400ff14:	e0fffe17 	ldw	r3,-8(fp)
 400ff18:	18800060 	cmpeqi	r2,r3,1
 400ff1c:	10000b1e 	bne	r2,zero,400ff4c <OSFlagPost+0xec>
 400ff20:	00001206 	br	400ff6c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 400ff24:	e0bff917 	ldw	r2,-28(fp)
 400ff28:	1080020b 	ldhu	r2,8(r2)
 400ff2c:	1007883a 	mov	r3,r2
 400ff30:	e0bffa0b 	ldhu	r2,-24(fp)
 400ff34:	0084303a 	nor	r2,zero,r2
 400ff38:	1884703a 	and	r2,r3,r2
 400ff3c:	1007883a 	mov	r3,r2
 400ff40:	e0bff917 	ldw	r2,-28(fp)
 400ff44:	10c0020d 	sth	r3,8(r2)
             break;
 400ff48:	00001106 	br	400ff90 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 400ff4c:	e0bff917 	ldw	r2,-28(fp)
 400ff50:	10c0020b 	ldhu	r3,8(r2)
 400ff54:	e0bffa0b 	ldhu	r2,-24(fp)
 400ff58:	1884b03a 	or	r2,r3,r2
 400ff5c:	1007883a 	mov	r3,r2
 400ff60:	e0bff917 	ldw	r2,-28(fp)
 400ff64:	10c0020d 	sth	r3,8(r2)
             break;
 400ff68:	00000906 	br	400ff90 <OSFlagPost+0x130>
 400ff6c:	e0bff517 	ldw	r2,-44(fp)
 400ff70:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ff74:	e0bff317 	ldw	r2,-52(fp)
 400ff78:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 400ff7c:	e0fffc17 	ldw	r3,-16(fp)
 400ff80:	00801c44 	movi	r2,113
 400ff84:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 400ff88:	e03fff15 	stw	zero,-4(fp)
 400ff8c:	00009806 	br	40101f0 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 400ff90:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 400ff94:	e0bff917 	ldw	r2,-28(fp)
 400ff98:	10800117 	ldw	r2,4(r2)
 400ff9c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 400ffa0:	00007506 	br	4010178 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 400ffa4:	e0bff817 	ldw	r2,-32(fp)
 400ffa8:	10800483 	ldbu	r2,18(r2)
 400ffac:	10803fcc 	andi	r2,r2,255
 400ffb0:	e0bffd15 	stw	r2,-12(fp)
 400ffb4:	e0fffd17 	ldw	r3,-12(fp)
 400ffb8:	18800060 	cmpeqi	r2,r3,1
 400ffbc:	10004d1e 	bne	r2,zero,40100f4 <OSFlagPost+0x294>
 400ffc0:	e0fffd17 	ldw	r3,-12(fp)
 400ffc4:	18800088 	cmpgei	r2,r3,2
 400ffc8:	1000041e 	bne	r2,zero,400ffdc <OSFlagPost+0x17c>
 400ffcc:	e0fffd17 	ldw	r3,-12(fp)
 400ffd0:	1805003a 	cmpeq	r2,r3,zero
 400ffd4:	1000301e 	bne	r2,zero,4010098 <OSFlagPost+0x238>
 400ffd8:	00005b06 	br	4010148 <OSFlagPost+0x2e8>
 400ffdc:	e0fffd17 	ldw	r3,-12(fp)
 400ffe0:	188000a0 	cmpeqi	r2,r3,2
 400ffe4:	1000041e 	bne	r2,zero,400fff8 <OSFlagPost+0x198>
 400ffe8:	e0fffd17 	ldw	r3,-12(fp)
 400ffec:	188000e0 	cmpeqi	r2,r3,3
 400fff0:	1000161e 	bne	r2,zero,401004c <OSFlagPost+0x1ec>
 400fff4:	00005406 	br	4010148 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 400fff8:	e0bff917 	ldw	r2,-28(fp)
 400fffc:	10c0020b 	ldhu	r3,8(r2)
 4010000:	e0bff817 	ldw	r2,-32(fp)
 4010004:	1080040b 	ldhu	r2,16(r2)
 4010008:	1884703a 	and	r2,r3,r2
 401000c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4010010:	e0bff817 	ldw	r2,-32(fp)
 4010014:	1080040b 	ldhu	r2,16(r2)
 4010018:	10ffffcc 	andi	r3,r2,65535
 401001c:	e0bff68b 	ldhu	r2,-38(fp)
 4010020:	1880521e 	bne	r3,r2,401016c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4010024:	e17ff68b 	ldhu	r5,-38(fp)
 4010028:	e13ff817 	ldw	r4,-32(fp)
 401002c:	40105840 	call	4010584 <OS_FlagTaskRdy>
 4010030:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 4010034:	e0bff603 	ldbu	r2,-40(fp)
 4010038:	10800058 	cmpnei	r2,r2,1
 401003c:	10004b1e 	bne	r2,zero,401016c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4010040:	00800044 	movi	r2,1
 4010044:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 4010048:	00004806 	br	401016c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401004c:	e0bff917 	ldw	r2,-28(fp)
 4010050:	10c0020b 	ldhu	r3,8(r2)
 4010054:	e0bff817 	ldw	r2,-32(fp)
 4010058:	1080040b 	ldhu	r2,16(r2)
 401005c:	1884703a 	and	r2,r3,r2
 4010060:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4010064:	e0bff68b 	ldhu	r2,-38(fp)
 4010068:	1005003a 	cmpeq	r2,r2,zero
 401006c:	10003f1e 	bne	r2,zero,401016c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4010070:	e17ff68b 	ldhu	r5,-38(fp)
 4010074:	e13ff817 	ldw	r4,-32(fp)
 4010078:	40105840 	call	4010584 <OS_FlagTaskRdy>
 401007c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 4010080:	e0bff603 	ldbu	r2,-40(fp)
 4010084:	10800058 	cmpnei	r2,r2,1
 4010088:	1000381e 	bne	r2,zero,401016c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 401008c:	00800044 	movi	r2,1
 4010090:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 4010094:	00003506 	br	401016c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4010098:	e0bff917 	ldw	r2,-28(fp)
 401009c:	1080020b 	ldhu	r2,8(r2)
 40100a0:	0084303a 	nor	r2,zero,r2
 40100a4:	1007883a 	mov	r3,r2
 40100a8:	e0bff817 	ldw	r2,-32(fp)
 40100ac:	1080040b 	ldhu	r2,16(r2)
 40100b0:	1884703a 	and	r2,r3,r2
 40100b4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40100b8:	e0bff817 	ldw	r2,-32(fp)
 40100bc:	1080040b 	ldhu	r2,16(r2)
 40100c0:	10ffffcc 	andi	r3,r2,65535
 40100c4:	e0bff68b 	ldhu	r2,-38(fp)
 40100c8:	1880281e 	bne	r3,r2,401016c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40100cc:	e17ff68b 	ldhu	r5,-38(fp)
 40100d0:	e13ff817 	ldw	r4,-32(fp)
 40100d4:	40105840 	call	4010584 <OS_FlagTaskRdy>
 40100d8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 40100dc:	e0bff603 	ldbu	r2,-40(fp)
 40100e0:	10800058 	cmpnei	r2,r2,1
 40100e4:	1000211e 	bne	r2,zero,401016c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40100e8:	00800044 	movi	r2,1
 40100ec:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 40100f0:	00001e06 	br	401016c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40100f4:	e0bff917 	ldw	r2,-28(fp)
 40100f8:	1080020b 	ldhu	r2,8(r2)
 40100fc:	0084303a 	nor	r2,zero,r2
 4010100:	1007883a 	mov	r3,r2
 4010104:	e0bff817 	ldw	r2,-32(fp)
 4010108:	1080040b 	ldhu	r2,16(r2)
 401010c:	1884703a 	and	r2,r3,r2
 4010110:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4010114:	e0bff68b 	ldhu	r2,-38(fp)
 4010118:	1005003a 	cmpeq	r2,r2,zero
 401011c:	1000131e 	bne	r2,zero,401016c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4010120:	e17ff68b 	ldhu	r5,-38(fp)
 4010124:	e13ff817 	ldw	r4,-32(fp)
 4010128:	40105840 	call	4010584 <OS_FlagTaskRdy>
 401012c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 4010130:	e0bff603 	ldbu	r2,-40(fp)
 4010134:	10800058 	cmpnei	r2,r2,1
 4010138:	10000c1e 	bne	r2,zero,401016c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 401013c:	00800044 	movi	r2,1
 4010140:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 4010144:	00000906 	br	401016c <OSFlagPost+0x30c>
 4010148:	e0bff517 	ldw	r2,-44(fp)
 401014c:	e0bff215 	stw	r2,-56(fp)
 4010150:	e0bff217 	ldw	r2,-56(fp)
 4010154:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4010158:	e0fffc17 	ldw	r3,-16(fp)
 401015c:	00801bc4 	movi	r2,111
 4010160:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 4010164:	e03fff15 	stw	zero,-4(fp)
 4010168:	00002106 	br	40101f0 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 401016c:	e0bff817 	ldw	r2,-32(fp)
 4010170:	10800017 	ldw	r2,0(r2)
 4010174:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4010178:	e0bff817 	ldw	r2,-32(fp)
 401017c:	1004c03a 	cmpne	r2,r2,zero
 4010180:	103f881e 	bne	r2,zero,400ffa4 <OSFlagPost+0x144>
 4010184:	e0bff517 	ldw	r2,-44(fp)
 4010188:	e0bff115 	stw	r2,-60(fp)
 401018c:	e0bff117 	ldw	r2,-60(fp)
 4010190:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4010194:	e0bff783 	ldbu	r2,-34(fp)
 4010198:	10800058 	cmpnei	r2,r2,1
 401019c:	1000011e 	bne	r2,zero,40101a4 <OSFlagPost+0x344>
        OS_Sched();
 40101a0:	400e5900 	call	400e590 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40101a4:	0005303a 	rdctl	r2,status
 40101a8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40101ac:	e0fff017 	ldw	r3,-64(fp)
 40101b0:	00bfff84 	movi	r2,-2
 40101b4:	1884703a 	and	r2,r3,r2
 40101b8:	1001703a 	wrctl	status,r2
  
  return context;
 40101bc:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 40101c0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 40101c4:	e0bff917 	ldw	r2,-28(fp)
 40101c8:	1080020b 	ldhu	r2,8(r2)
 40101cc:	e0bff70d 	sth	r2,-36(fp)
 40101d0:	e0bff517 	ldw	r2,-44(fp)
 40101d4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40101d8:	e0bfef17 	ldw	r2,-68(fp)
 40101dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 40101e0:	e0bffc17 	ldw	r2,-16(fp)
 40101e4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 40101e8:	e0bff70b 	ldhu	r2,-36(fp)
 40101ec:	e0bfff15 	stw	r2,-4(fp)
 40101f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40101f4:	e037883a 	mov	sp,fp
 40101f8:	dfc00117 	ldw	ra,4(sp)
 40101fc:	df000017 	ldw	fp,0(sp)
 4010200:	dec00204 	addi	sp,sp,8
 4010204:	f800283a 	ret

04010208 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 4010208:	defff804 	addi	sp,sp,-32
 401020c:	df000715 	stw	fp,28(sp)
 4010210:	df000704 	addi	fp,sp,28
 4010214:	e13ffd15 	stw	r4,-12(fp)
 4010218:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 401021c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 4010220:	e0bffe17 	ldw	r2,-8(fp)
 4010224:	1004c03a 	cmpne	r2,r2,zero
 4010228:	1000021e 	bne	r2,zero,4010234 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 401022c:	e03fff15 	stw	zero,-4(fp)
 4010230:	00002506 	br	40102c8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 4010234:	e0bffd17 	ldw	r2,-12(fp)
 4010238:	1004c03a 	cmpne	r2,r2,zero
 401023c:	1000051e 	bne	r2,zero,4010254 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010240:	e0fffe17 	ldw	r3,-8(fp)
 4010244:	00801b84 	movi	r2,110
 4010248:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 401024c:	e03fff15 	stw	zero,-4(fp)
 4010250:	00001d06 	br	40102c8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4010254:	e0bffd17 	ldw	r2,-12(fp)
 4010258:	10800003 	ldbu	r2,0(r2)
 401025c:	10803fcc 	andi	r2,r2,255
 4010260:	10800160 	cmpeqi	r2,r2,5
 4010264:	1000051e 	bne	r2,zero,401027c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 4010268:	e0fffe17 	ldw	r3,-8(fp)
 401026c:	00800044 	movi	r2,1
 4010270:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 4010274:	e03fff15 	stw	zero,-4(fp)
 4010278:	00001306 	br	40102c8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401027c:	0005303a 	rdctl	r2,status
 4010280:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010284:	e0fffa17 	ldw	r3,-24(fp)
 4010288:	00bfff84 	movi	r2,-2
 401028c:	1884703a 	and	r2,r3,r2
 4010290:	1001703a 	wrctl	status,r2
  
  return context;
 4010294:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4010298:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 401029c:	e0bffd17 	ldw	r2,-12(fp)
 40102a0:	1080020b 	ldhu	r2,8(r2)
 40102a4:	e0bffc0d 	sth	r2,-16(fp)
 40102a8:	e0bffb17 	ldw	r2,-20(fp)
 40102ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40102b0:	e0bff917 	ldw	r2,-28(fp)
 40102b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40102b8:	e0bffe17 	ldw	r2,-8(fp)
 40102bc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 40102c0:	e0bffc0b 	ldhu	r2,-16(fp)
 40102c4:	e0bfff15 	stw	r2,-4(fp)
 40102c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40102cc:	e037883a 	mov	sp,fp
 40102d0:	df000017 	ldw	fp,0(sp)
 40102d4:	dec00104 	addi	sp,sp,4
 40102d8:	f800283a 	ret

040102dc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 40102dc:	defff804 	addi	sp,sp,-32
 40102e0:	df000715 	stw	fp,28(sp)
 40102e4:	df000704 	addi	fp,sp,28
 40102e8:	e13ffb15 	stw	r4,-20(fp)
 40102ec:	e17ffc15 	stw	r5,-16(fp)
 40102f0:	e0800117 	ldw	r2,4(fp)
 40102f4:	e1bffd0d 	sth	r6,-12(fp)
 40102f8:	e1fffe05 	stb	r7,-8(fp)
 40102fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 4010300:	00810174 	movhi	r2,1029
 4010304:	1081b604 	addi	r2,r2,1752
 4010308:	10c00017 	ldw	r3,0(r2)
 401030c:	00810174 	movhi	r2,1029
 4010310:	1081b604 	addi	r2,r2,1752
 4010314:	10800017 	ldw	r2,0(r2)
 4010318:	10800c03 	ldbu	r2,48(r2)
 401031c:	10800814 	ori	r2,r2,32
 4010320:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 4010324:	00810174 	movhi	r2,1029
 4010328:	1081b604 	addi	r2,r2,1752
 401032c:	10800017 	ldw	r2,0(r2)
 4010330:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 4010334:	00810174 	movhi	r2,1029
 4010338:	1081b604 	addi	r2,r2,1752
 401033c:	10c00017 	ldw	r3,0(r2)
 4010340:	e0bfff0b 	ldhu	r2,-4(fp)
 4010344:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 4010348:	00810174 	movhi	r2,1029
 401034c:	1081b604 	addi	r2,r2,1752
 4010350:	10c00017 	ldw	r3,0(r2)
 4010354:	e0bffc17 	ldw	r2,-16(fp)
 4010358:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 401035c:	e0fffc17 	ldw	r3,-16(fp)
 4010360:	e0bffd0b 	ldhu	r2,-12(fp)
 4010364:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 4010368:	e0fffc17 	ldw	r3,-16(fp)
 401036c:	e0bffe03 	ldbu	r2,-8(fp)
 4010370:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 4010374:	00810174 	movhi	r2,1029
 4010378:	1081b604 	addi	r2,r2,1752
 401037c:	10c00017 	ldw	r3,0(r2)
 4010380:	e0bffc17 	ldw	r2,-16(fp)
 4010384:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 4010388:	e0bffb17 	ldw	r2,-20(fp)
 401038c:	10c00117 	ldw	r3,4(r2)
 4010390:	e0bffc17 	ldw	r2,-16(fp)
 4010394:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 4010398:	e0bffc17 	ldw	r2,-16(fp)
 401039c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 40103a0:	e0fffc17 	ldw	r3,-16(fp)
 40103a4:	e0bffb17 	ldw	r2,-20(fp)
 40103a8:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40103ac:	e0bffb17 	ldw	r2,-20(fp)
 40103b0:	10800117 	ldw	r2,4(r2)
 40103b4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 40103b8:	e0bffa17 	ldw	r2,-24(fp)
 40103bc:	1005003a 	cmpeq	r2,r2,zero
 40103c0:	1000031e 	bne	r2,zero,40103d0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 40103c4:	e0fffa17 	ldw	r3,-24(fp)
 40103c8:	e0bffc17 	ldw	r2,-16(fp)
 40103cc:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 40103d0:	e0fffb17 	ldw	r3,-20(fp)
 40103d4:	e0bffc17 	ldw	r2,-16(fp)
 40103d8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 40103dc:	00810174 	movhi	r2,1029
 40103e0:	1081b604 	addi	r2,r2,1752
 40103e4:	10800017 	ldw	r2,0(r2)
 40103e8:	10800d03 	ldbu	r2,52(r2)
 40103ec:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 40103f0:	e13ff903 	ldbu	r4,-28(fp)
 40103f4:	e0fff903 	ldbu	r3,-28(fp)
 40103f8:	00810174 	movhi	r2,1029
 40103fc:	1081b344 	addi	r2,r2,1741
 4010400:	10c5883a 	add	r2,r2,r3
 4010404:	10800003 	ldbu	r2,0(r2)
 4010408:	1007883a 	mov	r3,r2
 401040c:	00810174 	movhi	r2,1029
 4010410:	1081b604 	addi	r2,r2,1752
 4010414:	10800017 	ldw	r2,0(r2)
 4010418:	10800d43 	ldbu	r2,53(r2)
 401041c:	0084303a 	nor	r2,zero,r2
 4010420:	1884703a 	and	r2,r3,r2
 4010424:	1007883a 	mov	r3,r2
 4010428:	00810174 	movhi	r2,1029
 401042c:	1081b344 	addi	r2,r2,1741
 4010430:	1105883a 	add	r2,r2,r4
 4010434:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 4010438:	e0fff903 	ldbu	r3,-28(fp)
 401043c:	00810174 	movhi	r2,1029
 4010440:	1081b344 	addi	r2,r2,1741
 4010444:	10c5883a 	add	r2,r2,r3
 4010448:	10800003 	ldbu	r2,0(r2)
 401044c:	10803fcc 	andi	r2,r2,255
 4010450:	1004c03a 	cmpne	r2,r2,zero
 4010454:	10000e1e 	bne	r2,zero,4010490 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4010458:	00810174 	movhi	r2,1029
 401045c:	1081b604 	addi	r2,r2,1752
 4010460:	10800017 	ldw	r2,0(r2)
 4010464:	10800d83 	ldbu	r2,54(r2)
 4010468:	0084303a 	nor	r2,zero,r2
 401046c:	1007883a 	mov	r3,r2
 4010470:	00810174 	movhi	r2,1029
 4010474:	1081b304 	addi	r2,r2,1740
 4010478:	10800003 	ldbu	r2,0(r2)
 401047c:	1884703a 	and	r2,r3,r2
 4010480:	1007883a 	mov	r3,r2
 4010484:	00810174 	movhi	r2,1029
 4010488:	1081b304 	addi	r2,r2,1740
 401048c:	10c00005 	stb	r3,0(r2)
    }
}
 4010490:	e037883a 	mov	sp,fp
 4010494:	df000017 	ldw	fp,0(sp)
 4010498:	dec00104 	addi	sp,sp,4
 401049c:	f800283a 	ret

040104a0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 40104a0:	defffb04 	addi	sp,sp,-20
 40104a4:	dfc00415 	stw	ra,16(sp)
 40104a8:	df000315 	stw	fp,12(sp)
 40104ac:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 40104b0:	01010174 	movhi	r4,1029
 40104b4:	21142204 	addi	r4,r4,20616
 40104b8:	0140dc04 	movi	r5,880
 40104bc:	400e4d00 	call	400e4d0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 40104c0:	00810174 	movhi	r2,1029
 40104c4:	10942204 	addi	r2,r2,20616
 40104c8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 40104cc:	00810174 	movhi	r2,1029
 40104d0:	10942d04 	addi	r2,r2,20660
 40104d4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 40104d8:	e03fff0d 	sth	zero,-4(fp)
 40104dc:	00001306 	br	401052c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40104e0:	e0bffe17 	ldw	r2,-8(fp)
 40104e4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 40104e8:	e0fffe17 	ldw	r3,-8(fp)
 40104ec:	e0bffd17 	ldw	r2,-12(fp)
 40104f0:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 40104f4:	e0fffe17 	ldw	r3,-8(fp)
 40104f8:	00800fc4 	movi	r2,63
 40104fc:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4010500:	e0bffe17 	ldw	r2,-8(fp)
 4010504:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 4010508:	e0bffe17 	ldw	r2,-8(fp)
 401050c:	10800b04 	addi	r2,r2,44
 4010510:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 4010514:	e0bffd17 	ldw	r2,-12(fp)
 4010518:	10800b04 	addi	r2,r2,44
 401051c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4010520:	e0bfff0b 	ldhu	r2,-4(fp)
 4010524:	10800044 	addi	r2,r2,1
 4010528:	e0bfff0d 	sth	r2,-4(fp)
 401052c:	e0bfff0b 	ldhu	r2,-4(fp)
 4010530:	108004f0 	cmpltui	r2,r2,19
 4010534:	103fea1e 	bne	r2,zero,40104e0 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4010538:	e0bffe17 	ldw	r2,-8(fp)
 401053c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 4010540:	e0bffe17 	ldw	r2,-8(fp)
 4010544:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 4010548:	e0fffe17 	ldw	r3,-8(fp)
 401054c:	00800fc4 	movi	r2,63
 4010550:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4010554:	e0bffe17 	ldw	r2,-8(fp)
 4010558:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 401055c:	00c10174 	movhi	r3,1029
 4010560:	18c1b804 	addi	r3,r3,1760
 4010564:	00810174 	movhi	r2,1029
 4010568:	10942204 	addi	r2,r2,20616
 401056c:	18800015 	stw	r2,0(r3)
#endif
}
 4010570:	e037883a 	mov	sp,fp
 4010574:	dfc00117 	ldw	ra,4(sp)
 4010578:	df000017 	ldw	fp,0(sp)
 401057c:	dec00204 	addi	sp,sp,8
 4010580:	f800283a 	ret

04010584 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 4010584:	defffa04 	addi	sp,sp,-24
 4010588:	dfc00515 	stw	ra,20(sp)
 401058c:	df000415 	stw	fp,16(sp)
 4010590:	df000404 	addi	fp,sp,16
 4010594:	e13ffe15 	stw	r4,-8(fp)
 4010598:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 401059c:	e0bffe17 	ldw	r2,-8(fp)
 40105a0:	10800217 	ldw	r2,8(r2)
 40105a4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 40105a8:	e0bffd17 	ldw	r2,-12(fp)
 40105ac:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 40105b0:	e0fffd17 	ldw	r3,-12(fp)
 40105b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40105b8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 40105bc:	e0bffd17 	ldw	r2,-12(fp)
 40105c0:	10c00c03 	ldbu	r3,48(r2)
 40105c4:	00bff7c4 	movi	r2,-33
 40105c8:	1884703a 	and	r2,r3,r2
 40105cc:	1007883a 	mov	r3,r2
 40105d0:	e0bffd17 	ldw	r2,-12(fp)
 40105d4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 40105d8:	e0bffd17 	ldw	r2,-12(fp)
 40105dc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 40105e0:	e0bffd17 	ldw	r2,-12(fp)
 40105e4:	10800c03 	ldbu	r2,48(r2)
 40105e8:	10803fcc 	andi	r2,r2,255
 40105ec:	1004c03a 	cmpne	r2,r2,zero
 40105f0:	10001f1e 	bne	r2,zero,4010670 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 40105f4:	e0bffd17 	ldw	r2,-12(fp)
 40105f8:	10c00d83 	ldbu	r3,54(r2)
 40105fc:	00810174 	movhi	r2,1029
 4010600:	1081b304 	addi	r2,r2,1740
 4010604:	10800003 	ldbu	r2,0(r2)
 4010608:	1884b03a 	or	r2,r3,r2
 401060c:	1007883a 	mov	r3,r2
 4010610:	00810174 	movhi	r2,1029
 4010614:	1081b304 	addi	r2,r2,1740
 4010618:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401061c:	e0bffd17 	ldw	r2,-12(fp)
 4010620:	10800d03 	ldbu	r2,52(r2)
 4010624:	11003fcc 	andi	r4,r2,255
 4010628:	e0bffd17 	ldw	r2,-12(fp)
 401062c:	10800d03 	ldbu	r2,52(r2)
 4010630:	10c03fcc 	andi	r3,r2,255
 4010634:	00810174 	movhi	r2,1029
 4010638:	1081b344 	addi	r2,r2,1741
 401063c:	10c5883a 	add	r2,r2,r3
 4010640:	10c00003 	ldbu	r3,0(r2)
 4010644:	e0bffd17 	ldw	r2,-12(fp)
 4010648:	10800d43 	ldbu	r2,53(r2)
 401064c:	1884b03a 	or	r2,r3,r2
 4010650:	1007883a 	mov	r3,r2
 4010654:	00810174 	movhi	r2,1029
 4010658:	1081b344 	addi	r2,r2,1741
 401065c:	1105883a 	add	r2,r2,r4
 4010660:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 4010664:	00800044 	movi	r2,1
 4010668:	e0bffc05 	stb	r2,-16(fp)
 401066c:	00000106 	br	4010674 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 4010670:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 4010674:	e13ffe17 	ldw	r4,-8(fp)
 4010678:	40106940 	call	4010694 <OS_FlagUnlink>
    return (sched);
 401067c:	e0bffc03 	ldbu	r2,-16(fp)
}
 4010680:	e037883a 	mov	sp,fp
 4010684:	dfc00117 	ldw	ra,4(sp)
 4010688:	df000017 	ldw	fp,0(sp)
 401068c:	dec00204 	addi	sp,sp,8
 4010690:	f800283a 	ret

04010694 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 4010694:	defffa04 	addi	sp,sp,-24
 4010698:	df000515 	stw	fp,20(sp)
 401069c:	df000504 	addi	fp,sp,20
 40106a0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 40106a4:	e0bfff17 	ldw	r2,-4(fp)
 40106a8:	10800117 	ldw	r2,4(r2)
 40106ac:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 40106b0:	e0bfff17 	ldw	r2,-4(fp)
 40106b4:	10800017 	ldw	r2,0(r2)
 40106b8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 40106bc:	e0bffc17 	ldw	r2,-16(fp)
 40106c0:	1004c03a 	cmpne	r2,r2,zero
 40106c4:	10000c1e 	bne	r2,zero,40106f8 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 40106c8:	e0bfff17 	ldw	r2,-4(fp)
 40106cc:	10800317 	ldw	r2,12(r2)
 40106d0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 40106d4:	e0fffd17 	ldw	r3,-12(fp)
 40106d8:	e0bffb17 	ldw	r2,-20(fp)
 40106dc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 40106e0:	e0bffb17 	ldw	r2,-20(fp)
 40106e4:	1005003a 	cmpeq	r2,r2,zero
 40106e8:	10000c1e 	bne	r2,zero,401071c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 40106ec:	e0bffb17 	ldw	r2,-20(fp)
 40106f0:	10000115 	stw	zero,4(r2)
 40106f4:	00000906 	br	401071c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 40106f8:	e0fffc17 	ldw	r3,-16(fp)
 40106fc:	e0bffb17 	ldw	r2,-20(fp)
 4010700:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 4010704:	e0bffb17 	ldw	r2,-20(fp)
 4010708:	1005003a 	cmpeq	r2,r2,zero
 401070c:	1000031e 	bne	r2,zero,401071c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 4010710:	e0fffb17 	ldw	r3,-20(fp)
 4010714:	e0bffc17 	ldw	r2,-16(fp)
 4010718:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 401071c:	e0bfff17 	ldw	r2,-4(fp)
 4010720:	10800217 	ldw	r2,8(r2)
 4010724:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 4010728:	e0bffe17 	ldw	r2,-8(fp)
 401072c:	10000a15 	stw	zero,40(r2)
#endif
}
 4010730:	e037883a 	mov	sp,fp
 4010734:	df000017 	ldw	fp,0(sp)
 4010738:	dec00104 	addi	sp,sp,4
 401073c:	f800283a 	ret

04010740 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 4010740:	defff304 	addi	sp,sp,-52
 4010744:	df000c15 	stw	fp,48(sp)
 4010748:	df000c04 	addi	fp,sp,48
 401074c:	e13ffb15 	stw	r4,-20(fp)
 4010750:	e17ffc15 	stw	r5,-16(fp)
 4010754:	e1bffd15 	stw	r6,-12(fp)
 4010758:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401075c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010760:	e0bffe17 	ldw	r2,-8(fp)
 4010764:	1004c03a 	cmpne	r2,r2,zero
 4010768:	1000021e 	bne	r2,zero,4010774 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 401076c:	e03fff15 	stw	zero,-4(fp)
 4010770:	00007506 	br	4010948 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 4010774:	e0bffb17 	ldw	r2,-20(fp)
 4010778:	1004c03a 	cmpne	r2,r2,zero
 401077c:	1000051e 	bne	r2,zero,4010794 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4010780:	e0fffe17 	ldw	r3,-8(fp)
 4010784:	00801884 	movi	r2,98
 4010788:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 401078c:	e03fff15 	stw	zero,-4(fp)
 4010790:	00006d06 	br	4010948 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 4010794:	e0bffb17 	ldw	r2,-20(fp)
 4010798:	108000cc 	andi	r2,r2,3
 401079c:	1005003a 	cmpeq	r2,r2,zero
 40107a0:	1000051e 	bne	r2,zero,40107b8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 40107a4:	e0fffe17 	ldw	r3,-8(fp)
 40107a8:	00801884 	movi	r2,98
 40107ac:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 40107b0:	e03fff15 	stw	zero,-4(fp)
 40107b4:	00006406 	br	4010948 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 40107b8:	e0bffc17 	ldw	r2,-16(fp)
 40107bc:	108000a8 	cmpgeui	r2,r2,2
 40107c0:	1000051e 	bne	r2,zero,40107d8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 40107c4:	e0fffe17 	ldw	r3,-8(fp)
 40107c8:	008016c4 	movi	r2,91
 40107cc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 40107d0:	e03fff15 	stw	zero,-4(fp)
 40107d4:	00005c06 	br	4010948 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 40107d8:	e0bffd17 	ldw	r2,-12(fp)
 40107dc:	10800128 	cmpgeui	r2,r2,4
 40107e0:	1000051e 	bne	r2,zero,40107f8 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 40107e4:	e0fffe17 	ldw	r3,-8(fp)
 40107e8:	00801704 	movi	r2,92
 40107ec:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 40107f0:	e03fff15 	stw	zero,-4(fp)
 40107f4:	00005406 	br	4010948 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40107f8:	0005303a 	rdctl	r2,status
 40107fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010800:	e0fff517 	ldw	r3,-44(fp)
 4010804:	00bfff84 	movi	r2,-2
 4010808:	1884703a 	and	r2,r3,r2
 401080c:	1001703a 	wrctl	status,r2
  
  return context;
 4010810:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4010814:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4010818:	00810174 	movhi	r2,1029
 401081c:	1081b004 	addi	r2,r2,1728
 4010820:	10800017 	ldw	r2,0(r2)
 4010824:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 4010828:	00810174 	movhi	r2,1029
 401082c:	1081b004 	addi	r2,r2,1728
 4010830:	10800017 	ldw	r2,0(r2)
 4010834:	1005003a 	cmpeq	r2,r2,zero
 4010838:	1000081e 	bne	r2,zero,401085c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 401083c:	00810174 	movhi	r2,1029
 4010840:	1081b004 	addi	r2,r2,1728
 4010844:	10800017 	ldw	r2,0(r2)
 4010848:	10800117 	ldw	r2,4(r2)
 401084c:	1007883a 	mov	r3,r2
 4010850:	00810174 	movhi	r2,1029
 4010854:	1081b004 	addi	r2,r2,1728
 4010858:	10c00015 	stw	r3,0(r2)
 401085c:	e0bff617 	ldw	r2,-40(fp)
 4010860:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010864:	e0bff417 	ldw	r2,-48(fp)
 4010868:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 401086c:	e0bffa17 	ldw	r2,-24(fp)
 4010870:	1004c03a 	cmpne	r2,r2,zero
 4010874:	1000051e 	bne	r2,zero,401088c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 4010878:	e0fffe17 	ldw	r3,-8(fp)
 401087c:	00801684 	movi	r2,90
 4010880:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 4010884:	e03fff15 	stw	zero,-4(fp)
 4010888:	00002f06 	br	4010948 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 401088c:	e0bffb17 	ldw	r2,-20(fp)
 4010890:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 4010894:	e0bffb17 	ldw	r2,-20(fp)
 4010898:	1007883a 	mov	r3,r2
 401089c:	e0bffd17 	ldw	r2,-12(fp)
 40108a0:	1885883a 	add	r2,r3,r2
 40108a4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 40108a8:	e03ff715 	stw	zero,-36(fp)
 40108ac:	00000d06 	br	40108e4 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 40108b0:	e0fff817 	ldw	r3,-32(fp)
 40108b4:	e0bff917 	ldw	r2,-28(fp)
 40108b8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 40108bc:	e0bff917 	ldw	r2,-28(fp)
 40108c0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 40108c4:	e0bff917 	ldw	r2,-28(fp)
 40108c8:	1007883a 	mov	r3,r2
 40108cc:	e0bffd17 	ldw	r2,-12(fp)
 40108d0:	1885883a 	add	r2,r3,r2
 40108d4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 40108d8:	e0bff717 	ldw	r2,-36(fp)
 40108dc:	10800044 	addi	r2,r2,1
 40108e0:	e0bff715 	stw	r2,-36(fp)
 40108e4:	e0bffc17 	ldw	r2,-16(fp)
 40108e8:	10ffffc4 	addi	r3,r2,-1
 40108ec:	e0bff717 	ldw	r2,-36(fp)
 40108f0:	10ffef36 	bltu	r2,r3,40108b0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 40108f4:	e0bff817 	ldw	r2,-32(fp)
 40108f8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 40108fc:	e0fffa17 	ldw	r3,-24(fp)
 4010900:	e0bffb17 	ldw	r2,-20(fp)
 4010904:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4010908:	e0fffa17 	ldw	r3,-24(fp)
 401090c:	e0bffb17 	ldw	r2,-20(fp)
 4010910:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 4010914:	e0fffa17 	ldw	r3,-24(fp)
 4010918:	e0bffc17 	ldw	r2,-16(fp)
 401091c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 4010920:	e0fffa17 	ldw	r3,-24(fp)
 4010924:	e0bffc17 	ldw	r2,-16(fp)
 4010928:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 401092c:	e0fffa17 	ldw	r3,-24(fp)
 4010930:	e0bffd17 	ldw	r2,-12(fp)
 4010934:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 4010938:	e0bffe17 	ldw	r2,-8(fp)
 401093c:	10000005 	stb	zero,0(r2)
    return (pmem);
 4010940:	e0bffa17 	ldw	r2,-24(fp)
 4010944:	e0bfff15 	stw	r2,-4(fp)
 4010948:	e0bfff17 	ldw	r2,-4(fp)
}
 401094c:	e037883a 	mov	sp,fp
 4010950:	df000017 	ldw	fp,0(sp)
 4010954:	dec00104 	addi	sp,sp,4
 4010958:	f800283a 	ret

0401095c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 401095c:	defff704 	addi	sp,sp,-36
 4010960:	df000815 	stw	fp,32(sp)
 4010964:	df000804 	addi	fp,sp,32
 4010968:	e13ffd15 	stw	r4,-12(fp)
 401096c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4010970:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4010974:	e0bffe17 	ldw	r2,-8(fp)
 4010978:	1004c03a 	cmpne	r2,r2,zero
 401097c:	1000021e 	bne	r2,zero,4010988 <OSMemGet+0x2c>
        return ((void *)0);
 4010980:	e03fff15 	stw	zero,-4(fp)
 4010984:	00003106 	br	4010a4c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 4010988:	e0bffd17 	ldw	r2,-12(fp)
 401098c:	1004c03a 	cmpne	r2,r2,zero
 4010990:	1000051e 	bne	r2,zero,40109a8 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010994:	e0fffe17 	ldw	r3,-8(fp)
 4010998:	00801804 	movi	r2,96
 401099c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 40109a0:	e03fff15 	stw	zero,-4(fp)
 40109a4:	00002906 	br	4010a4c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40109a8:	0005303a 	rdctl	r2,status
 40109ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40109b0:	e0fffa17 	ldw	r3,-24(fp)
 40109b4:	00bfff84 	movi	r2,-2
 40109b8:	1884703a 	and	r2,r3,r2
 40109bc:	1001703a 	wrctl	status,r2
  
  return context;
 40109c0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40109c4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 40109c8:	e0bffd17 	ldw	r2,-12(fp)
 40109cc:	10800417 	ldw	r2,16(r2)
 40109d0:	1005003a 	cmpeq	r2,r2,zero
 40109d4:	1000151e 	bne	r2,zero,4010a2c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 40109d8:	e0bffd17 	ldw	r2,-12(fp)
 40109dc:	10800117 	ldw	r2,4(r2)
 40109e0:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 40109e4:	e0bffc17 	ldw	r2,-16(fp)
 40109e8:	10c00017 	ldw	r3,0(r2)
 40109ec:	e0bffd17 	ldw	r2,-12(fp)
 40109f0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 40109f4:	e0bffd17 	ldw	r2,-12(fp)
 40109f8:	10800417 	ldw	r2,16(r2)
 40109fc:	10ffffc4 	addi	r3,r2,-1
 4010a00:	e0bffd17 	ldw	r2,-12(fp)
 4010a04:	10c00415 	stw	r3,16(r2)
 4010a08:	e0bffb17 	ldw	r2,-20(fp)
 4010a0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010a10:	e0bff917 	ldw	r2,-28(fp)
 4010a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 4010a18:	e0bffe17 	ldw	r2,-8(fp)
 4010a1c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4010a20:	e0bffc17 	ldw	r2,-16(fp)
 4010a24:	e0bfff15 	stw	r2,-4(fp)
 4010a28:	00000806 	br	4010a4c <OSMemGet+0xf0>
 4010a2c:	e0bffb17 	ldw	r2,-20(fp)
 4010a30:	e0bff815 	stw	r2,-32(fp)
 4010a34:	e0bff817 	ldw	r2,-32(fp)
 4010a38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 4010a3c:	e0fffe17 	ldw	r3,-8(fp)
 4010a40:	00801744 	movi	r2,93
 4010a44:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 4010a48:	e03fff15 	stw	zero,-4(fp)
 4010a4c:	e0bfff17 	ldw	r2,-4(fp)
}
 4010a50:	e037883a 	mov	sp,fp
 4010a54:	df000017 	ldw	fp,0(sp)
 4010a58:	dec00104 	addi	sp,sp,4
 4010a5c:	f800283a 	ret

04010a60 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4010a60:	defff604 	addi	sp,sp,-40
 4010a64:	dfc00915 	stw	ra,36(sp)
 4010a68:	df000815 	stw	fp,32(sp)
 4010a6c:	df000804 	addi	fp,sp,32
 4010a70:	e13ffc15 	stw	r4,-16(fp)
 4010a74:	e17ffd15 	stw	r5,-12(fp)
 4010a78:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010a7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010a80:	e0bffe17 	ldw	r2,-8(fp)
 4010a84:	1004c03a 	cmpne	r2,r2,zero
 4010a88:	1000021e 	bne	r2,zero,4010a94 <OSMemNameGet+0x34>
        return (0);
 4010a8c:	e03fff15 	stw	zero,-4(fp)
 4010a90:	00003006 	br	4010b54 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4010a94:	e0bffc17 	ldw	r2,-16(fp)
 4010a98:	1004c03a 	cmpne	r2,r2,zero
 4010a9c:	1000051e 	bne	r2,zero,4010ab4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010aa0:	e0fffe17 	ldw	r3,-8(fp)
 4010aa4:	00801804 	movi	r2,96
 4010aa8:	18800005 	stb	r2,0(r3)
        return (0);
 4010aac:	e03fff15 	stw	zero,-4(fp)
 4010ab0:	00002806 	br	4010b54 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010ab4:	e0bffd17 	ldw	r2,-12(fp)
 4010ab8:	1004c03a 	cmpne	r2,r2,zero
 4010abc:	1000051e 	bne	r2,zero,4010ad4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 4010ac0:	e0fffe17 	ldw	r3,-8(fp)
 4010ac4:	00800304 	movi	r2,12
 4010ac8:	18800005 	stb	r2,0(r3)
        return (0);
 4010acc:	e03fff15 	stw	zero,-4(fp)
 4010ad0:	00002006 	br	4010b54 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010ad4:	00810174 	movhi	r2,1029
 4010ad8:	1081b504 	addi	r2,r2,1748
 4010adc:	10800003 	ldbu	r2,0(r2)
 4010ae0:	10803fcc 	andi	r2,r2,255
 4010ae4:	1005003a 	cmpeq	r2,r2,zero
 4010ae8:	1000051e 	bne	r2,zero,4010b00 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 4010aec:	e0fffe17 	ldw	r3,-8(fp)
 4010af0:	00800444 	movi	r2,17
 4010af4:	18800005 	stb	r2,0(r3)
        return (0);
 4010af8:	e03fff15 	stw	zero,-4(fp)
 4010afc:	00001506 	br	4010b54 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010b00:	0005303a 	rdctl	r2,status
 4010b04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010b08:	e0fff917 	ldw	r3,-28(fp)
 4010b0c:	00bfff84 	movi	r2,-2
 4010b10:	1884703a 	and	r2,r3,r2
 4010b14:	1001703a 	wrctl	status,r2
  
  return context;
 4010b18:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4010b1c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4010b20:	e0bffc17 	ldw	r2,-16(fp)
 4010b24:	11400504 	addi	r5,r2,20
 4010b28:	e13ffd17 	ldw	r4,-12(fp)
 4010b2c:	400e6d40 	call	400e6d4 <OS_StrCopy>
 4010b30:	e0bffb05 	stb	r2,-20(fp)
 4010b34:	e0bffa17 	ldw	r2,-24(fp)
 4010b38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010b3c:	e0bff817 	ldw	r2,-32(fp)
 4010b40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010b44:	e0bffe17 	ldw	r2,-8(fp)
 4010b48:	10000005 	stb	zero,0(r2)
    return (len);
 4010b4c:	e0bffb03 	ldbu	r2,-20(fp)
 4010b50:	e0bfff15 	stw	r2,-4(fp)
 4010b54:	e0bfff17 	ldw	r2,-4(fp)
}
 4010b58:	e037883a 	mov	sp,fp
 4010b5c:	dfc00117 	ldw	ra,4(sp)
 4010b60:	df000017 	ldw	fp,0(sp)
 4010b64:	dec00204 	addi	sp,sp,8
 4010b68:	f800283a 	ret

04010b6c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4010b6c:	defff604 	addi	sp,sp,-40
 4010b70:	dfc00915 	stw	ra,36(sp)
 4010b74:	df000815 	stw	fp,32(sp)
 4010b78:	df000804 	addi	fp,sp,32
 4010b7c:	e13ffd15 	stw	r4,-12(fp)
 4010b80:	e17ffe15 	stw	r5,-8(fp)
 4010b84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010b88:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010b8c:	e0bfff17 	ldw	r2,-4(fp)
 4010b90:	1005003a 	cmpeq	r2,r2,zero
 4010b94:	1000381e 	bne	r2,zero,4010c78 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4010b98:	e0bffd17 	ldw	r2,-12(fp)
 4010b9c:	1004c03a 	cmpne	r2,r2,zero
 4010ba0:	1000041e 	bne	r2,zero,4010bb4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4010ba4:	e0ffff17 	ldw	r3,-4(fp)
 4010ba8:	00801804 	movi	r2,96
 4010bac:	18800005 	stb	r2,0(r3)
        return;
 4010bb0:	00003106 	br	4010c78 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010bb4:	e0bffe17 	ldw	r2,-8(fp)
 4010bb8:	1004c03a 	cmpne	r2,r2,zero
 4010bbc:	1000041e 	bne	r2,zero,4010bd0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 4010bc0:	e0ffff17 	ldw	r3,-4(fp)
 4010bc4:	00800304 	movi	r2,12
 4010bc8:	18800005 	stb	r2,0(r3)
        return;
 4010bcc:	00002a06 	br	4010c78 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010bd0:	00810174 	movhi	r2,1029
 4010bd4:	1081b504 	addi	r2,r2,1748
 4010bd8:	10800003 	ldbu	r2,0(r2)
 4010bdc:	10803fcc 	andi	r2,r2,255
 4010be0:	1005003a 	cmpeq	r2,r2,zero
 4010be4:	1000041e 	bne	r2,zero,4010bf8 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 4010be8:	e0ffff17 	ldw	r3,-4(fp)
 4010bec:	00800484 	movi	r2,18
 4010bf0:	18800005 	stb	r2,0(r3)
        return;
 4010bf4:	00002006 	br	4010c78 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010bf8:	0005303a 	rdctl	r2,status
 4010bfc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010c00:	e0fffa17 	ldw	r3,-24(fp)
 4010c04:	00bfff84 	movi	r2,-2
 4010c08:	1884703a 	and	r2,r3,r2
 4010c0c:	1001703a 	wrctl	status,r2
  
  return context;
 4010c10:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4010c14:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4010c18:	e13ffe17 	ldw	r4,-8(fp)
 4010c1c:	400e7540 	call	400e754 <OS_StrLen>
 4010c20:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4010c24:	e0bffc03 	ldbu	r2,-16(fp)
 4010c28:	10800830 	cmpltui	r2,r2,32
 4010c2c:	1000081e 	bne	r2,zero,4010c50 <OSMemNameSet+0xe4>
 4010c30:	e0bffb17 	ldw	r2,-20(fp)
 4010c34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010c38:	e0bff917 	ldw	r2,-28(fp)
 4010c3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4010c40:	e0ffff17 	ldw	r3,-4(fp)
 4010c44:	008018c4 	movi	r2,99
 4010c48:	18800005 	stb	r2,0(r3)
        return;
 4010c4c:	00000a06 	br	4010c78 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4010c50:	e0bffd17 	ldw	r2,-12(fp)
 4010c54:	11000504 	addi	r4,r2,20
 4010c58:	e17ffe17 	ldw	r5,-8(fp)
 4010c5c:	400e6d40 	call	400e6d4 <OS_StrCopy>
 4010c60:	e0bffb17 	ldw	r2,-20(fp)
 4010c64:	e0bff815 	stw	r2,-32(fp)
 4010c68:	e0bff817 	ldw	r2,-32(fp)
 4010c6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010c70:	e0bfff17 	ldw	r2,-4(fp)
 4010c74:	10000005 	stb	zero,0(r2)
}
 4010c78:	e037883a 	mov	sp,fp
 4010c7c:	dfc00117 	ldw	ra,4(sp)
 4010c80:	df000017 	ldw	fp,0(sp)
 4010c84:	dec00204 	addi	sp,sp,8
 4010c88:	f800283a 	ret

04010c8c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 4010c8c:	defff804 	addi	sp,sp,-32
 4010c90:	df000715 	stw	fp,28(sp)
 4010c94:	df000704 	addi	fp,sp,28
 4010c98:	e13ffd15 	stw	r4,-12(fp)
 4010c9c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010ca0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4010ca4:	e0bffd17 	ldw	r2,-12(fp)
 4010ca8:	1004c03a 	cmpne	r2,r2,zero
 4010cac:	1000031e 	bne	r2,zero,4010cbc <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 4010cb0:	00801804 	movi	r2,96
 4010cb4:	e0bfff15 	stw	r2,-4(fp)
 4010cb8:	00002b06 	br	4010d68 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4010cbc:	e0bffe17 	ldw	r2,-8(fp)
 4010cc0:	1004c03a 	cmpne	r2,r2,zero
 4010cc4:	1000031e 	bne	r2,zero,4010cd4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 4010cc8:	008017c4 	movi	r2,95
 4010ccc:	e0bfff15 	stw	r2,-4(fp)
 4010cd0:	00002506 	br	4010d68 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010cd4:	0005303a 	rdctl	r2,status
 4010cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010cdc:	e0fffb17 	ldw	r3,-20(fp)
 4010ce0:	00bfff84 	movi	r2,-2
 4010ce4:	1884703a 	and	r2,r3,r2
 4010ce8:	1001703a 	wrctl	status,r2
  
  return context;
 4010cec:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4010cf0:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4010cf4:	e0bffd17 	ldw	r2,-12(fp)
 4010cf8:	10c00417 	ldw	r3,16(r2)
 4010cfc:	e0bffd17 	ldw	r2,-12(fp)
 4010d00:	10800317 	ldw	r2,12(r2)
 4010d04:	18800736 	bltu	r3,r2,4010d24 <OSMemPut+0x98>
 4010d08:	e0bffc17 	ldw	r2,-16(fp)
 4010d0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010d10:	e0bffa17 	ldw	r2,-24(fp)
 4010d14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 4010d18:	00801784 	movi	r2,94
 4010d1c:	e0bfff15 	stw	r2,-4(fp)
 4010d20:	00001106 	br	4010d68 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4010d24:	e0fffe17 	ldw	r3,-8(fp)
 4010d28:	e0bffd17 	ldw	r2,-12(fp)
 4010d2c:	10800117 	ldw	r2,4(r2)
 4010d30:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 4010d34:	e0fffd17 	ldw	r3,-12(fp)
 4010d38:	e0bffe17 	ldw	r2,-8(fp)
 4010d3c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4010d40:	e0bffd17 	ldw	r2,-12(fp)
 4010d44:	10800417 	ldw	r2,16(r2)
 4010d48:	10c00044 	addi	r3,r2,1
 4010d4c:	e0bffd17 	ldw	r2,-12(fp)
 4010d50:	10c00415 	stw	r3,16(r2)
 4010d54:	e0bffc17 	ldw	r2,-16(fp)
 4010d58:	e0bff915 	stw	r2,-28(fp)
 4010d5c:	e0bff917 	ldw	r2,-28(fp)
 4010d60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4010d64:	e03fff15 	stw	zero,-4(fp)
 4010d68:	e0bfff17 	ldw	r2,-4(fp)
}
 4010d6c:	e037883a 	mov	sp,fp
 4010d70:	df000017 	ldw	fp,0(sp)
 4010d74:	dec00104 	addi	sp,sp,4
 4010d78:	f800283a 	ret

04010d7c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 4010d7c:	defff904 	addi	sp,sp,-28
 4010d80:	df000615 	stw	fp,24(sp)
 4010d84:	df000604 	addi	fp,sp,24
 4010d88:	e13ffd15 	stw	r4,-12(fp)
 4010d8c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010d90:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4010d94:	e0bffd17 	ldw	r2,-12(fp)
 4010d98:	1004c03a 	cmpne	r2,r2,zero
 4010d9c:	1000031e 	bne	r2,zero,4010dac <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 4010da0:	00801804 	movi	r2,96
 4010da4:	e0bfff15 	stw	r2,-4(fp)
 4010da8:	00002e06 	br	4010e64 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 4010dac:	e0bffe17 	ldw	r2,-8(fp)
 4010db0:	1004c03a 	cmpne	r2,r2,zero
 4010db4:	1000031e 	bne	r2,zero,4010dc4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 4010db8:	00801844 	movi	r2,97
 4010dbc:	e0bfff15 	stw	r2,-4(fp)
 4010dc0:	00002806 	br	4010e64 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010dc4:	0005303a 	rdctl	r2,status
 4010dc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010dcc:	e0fffb17 	ldw	r3,-20(fp)
 4010dd0:	00bfff84 	movi	r2,-2
 4010dd4:	1884703a 	and	r2,r3,r2
 4010dd8:	1001703a 	wrctl	status,r2
  
  return context;
 4010ddc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4010de0:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 4010de4:	e0bffd17 	ldw	r2,-12(fp)
 4010de8:	10c00017 	ldw	r3,0(r2)
 4010dec:	e0bffe17 	ldw	r2,-8(fp)
 4010df0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 4010df4:	e0bffd17 	ldw	r2,-12(fp)
 4010df8:	10c00117 	ldw	r3,4(r2)
 4010dfc:	e0bffe17 	ldw	r2,-8(fp)
 4010e00:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 4010e04:	e0bffd17 	ldw	r2,-12(fp)
 4010e08:	10c00217 	ldw	r3,8(r2)
 4010e0c:	e0bffe17 	ldw	r2,-8(fp)
 4010e10:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 4010e14:	e0bffd17 	ldw	r2,-12(fp)
 4010e18:	10c00317 	ldw	r3,12(r2)
 4010e1c:	e0bffe17 	ldw	r2,-8(fp)
 4010e20:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4010e24:	e0bffd17 	ldw	r2,-12(fp)
 4010e28:	10c00417 	ldw	r3,16(r2)
 4010e2c:	e0bffe17 	ldw	r2,-8(fp)
 4010e30:	10c00415 	stw	r3,16(r2)
 4010e34:	e0bffc17 	ldw	r2,-16(fp)
 4010e38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010e3c:	e0bffa17 	ldw	r2,-24(fp)
 4010e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4010e44:	e0bffe17 	ldw	r2,-8(fp)
 4010e48:	10c00317 	ldw	r3,12(r2)
 4010e4c:	e0bffe17 	ldw	r2,-8(fp)
 4010e50:	10800417 	ldw	r2,16(r2)
 4010e54:	1887c83a 	sub	r3,r3,r2
 4010e58:	e0bffe17 	ldw	r2,-8(fp)
 4010e5c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4010e60:	e03fff15 	stw	zero,-4(fp)
 4010e64:	e0bfff17 	ldw	r2,-4(fp)
}
 4010e68:	e037883a 	mov	sp,fp
 4010e6c:	df000017 	ldw	fp,0(sp)
 4010e70:	dec00104 	addi	sp,sp,4
 4010e74:	f800283a 	ret

04010e78 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4010e78:	defffc04 	addi	sp,sp,-16
 4010e7c:	dfc00315 	stw	ra,12(sp)
 4010e80:	df000215 	stw	fp,8(sp)
 4010e84:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4010e88:	01010174 	movhi	r4,1029
 4010e8c:	2114fe04 	addi	r4,r4,21496
 4010e90:	01430c04 	movi	r5,3120
 4010e94:	400e4d00 	call	400e4d0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4010e98:	00810174 	movhi	r2,1029
 4010e9c:	1094fe04 	addi	r2,r2,21496
 4010ea0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4010ea4:	e03ffe0d 	sth	zero,-8(fp)
 4010ea8:	00001306 	br	4010ef8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4010eac:	e0bffe0b 	ldhu	r2,-8(fp)
 4010eb0:	10800d24 	muli	r2,r2,52
 4010eb4:	1007883a 	mov	r3,r2
 4010eb8:	00810174 	movhi	r2,1029
 4010ebc:	10950b04 	addi	r2,r2,21548
 4010ec0:	1887883a 	add	r3,r3,r2
 4010ec4:	e0bfff17 	ldw	r2,-4(fp)
 4010ec8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4010ecc:	e0ffff17 	ldw	r3,-4(fp)
 4010ed0:	00800fc4 	movi	r2,63
 4010ed4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4010ed8:	e0bfff17 	ldw	r2,-4(fp)
 4010edc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4010ee0:	e0bfff17 	ldw	r2,-4(fp)
 4010ee4:	10800d04 	addi	r2,r2,52
 4010ee8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4010eec:	e0bffe0b 	ldhu	r2,-8(fp)
 4010ef0:	10800044 	addi	r2,r2,1
 4010ef4:	e0bffe0d 	sth	r2,-8(fp)
 4010ef8:	e0bffe0b 	ldhu	r2,-8(fp)
 4010efc:	10800ef0 	cmpltui	r2,r2,59
 4010f00:	103fea1e 	bne	r2,zero,4010eac <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 4010f04:	e0bfff17 	ldw	r2,-4(fp)
 4010f08:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4010f0c:	e0ffff17 	ldw	r3,-4(fp)
 4010f10:	00800fc4 	movi	r2,63
 4010f14:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4010f18:	e0bfff17 	ldw	r2,-4(fp)
 4010f1c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4010f20:	00c10174 	movhi	r3,1029
 4010f24:	18c1b004 	addi	r3,r3,1728
 4010f28:	00810174 	movhi	r2,1029
 4010f2c:	1094fe04 	addi	r2,r2,21496
 4010f30:	18800015 	stw	r2,0(r3)
#endif
}
 4010f34:	e037883a 	mov	sp,fp
 4010f38:	dfc00117 	ldw	ra,4(sp)
 4010f3c:	df000017 	ldw	fp,0(sp)
 4010f40:	dec00204 	addi	sp,sp,8
 4010f44:	f800283a 	ret

04010f48 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4010f48:	defff704 	addi	sp,sp,-36
 4010f4c:	df000815 	stw	fp,32(sp)
 4010f50:	df000804 	addi	fp,sp,32
 4010f54:	e13ffd15 	stw	r4,-12(fp)
 4010f58:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010f5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010f60:	e0bffe17 	ldw	r2,-8(fp)
 4010f64:	1004c03a 	cmpne	r2,r2,zero
 4010f68:	1000021e 	bne	r2,zero,4010f74 <OSQAccept+0x2c>
        return ((void *)0);
 4010f6c:	e03fff15 	stw	zero,-4(fp)
 4010f70:	00004506 	br	4011088 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4010f74:	e0bffd17 	ldw	r2,-12(fp)
 4010f78:	1004c03a 	cmpne	r2,r2,zero
 4010f7c:	1000051e 	bne	r2,zero,4010f94 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 4010f80:	e0fffe17 	ldw	r3,-8(fp)
 4010f84:	00800104 	movi	r2,4
 4010f88:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4010f8c:	e03fff15 	stw	zero,-4(fp)
 4010f90:	00003d06 	br	4011088 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4010f94:	e0bffd17 	ldw	r2,-12(fp)
 4010f98:	10800003 	ldbu	r2,0(r2)
 4010f9c:	10803fcc 	andi	r2,r2,255
 4010fa0:	108000a0 	cmpeqi	r2,r2,2
 4010fa4:	1000051e 	bne	r2,zero,4010fbc <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 4010fa8:	e0fffe17 	ldw	r3,-8(fp)
 4010fac:	00800044 	movi	r2,1
 4010fb0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4010fb4:	e03fff15 	stw	zero,-4(fp)
 4010fb8:	00003306 	br	4011088 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010fbc:	0005303a 	rdctl	r2,status
 4010fc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010fc4:	e0fff917 	ldw	r3,-28(fp)
 4010fc8:	00bfff84 	movi	r2,-2
 4010fcc:	1884703a 	and	r2,r3,r2
 4010fd0:	1001703a 	wrctl	status,r2
  
  return context;
 4010fd4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4010fd8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4010fdc:	e0bffd17 	ldw	r2,-12(fp)
 4010fe0:	10800117 	ldw	r2,4(r2)
 4010fe4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4010fe8:	e0bffb17 	ldw	r2,-20(fp)
 4010fec:	1080058b 	ldhu	r2,22(r2)
 4010ff0:	10bfffcc 	andi	r2,r2,65535
 4010ff4:	1005003a 	cmpeq	r2,r2,zero
 4010ff8:	1000191e 	bne	r2,zero,4011060 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4010ffc:	e0bffb17 	ldw	r2,-20(fp)
 4011000:	10c00417 	ldw	r3,16(r2)
 4011004:	18800017 	ldw	r2,0(r3)
 4011008:	e0bffc15 	stw	r2,-16(fp)
 401100c:	18c00104 	addi	r3,r3,4
 4011010:	e0bffb17 	ldw	r2,-20(fp)
 4011014:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4011018:	e0bffb17 	ldw	r2,-20(fp)
 401101c:	1080058b 	ldhu	r2,22(r2)
 4011020:	10bfffc4 	addi	r2,r2,-1
 4011024:	1007883a 	mov	r3,r2
 4011028:	e0bffb17 	ldw	r2,-20(fp)
 401102c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4011030:	e0bffb17 	ldw	r2,-20(fp)
 4011034:	10c00417 	ldw	r3,16(r2)
 4011038:	e0bffb17 	ldw	r2,-20(fp)
 401103c:	10800217 	ldw	r2,8(r2)
 4011040:	1880041e 	bne	r3,r2,4011054 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 4011044:	e0bffb17 	ldw	r2,-20(fp)
 4011048:	10c00117 	ldw	r3,4(r2)
 401104c:	e0bffb17 	ldw	r2,-20(fp)
 4011050:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4011054:	e0bffe17 	ldw	r2,-8(fp)
 4011058:	10000005 	stb	zero,0(r2)
 401105c:	00000406 	br	4011070 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4011060:	e0fffe17 	ldw	r3,-8(fp)
 4011064:	008007c4 	movi	r2,31
 4011068:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 401106c:	e03ffc15 	stw	zero,-16(fp)
 4011070:	e0bffa17 	ldw	r2,-24(fp)
 4011074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011078:	e0bff817 	ldw	r2,-32(fp)
 401107c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4011080:	e0bffc17 	ldw	r2,-16(fp)
 4011084:	e0bfff15 	stw	r2,-4(fp)
 4011088:	e0bfff17 	ldw	r2,-4(fp)
}
 401108c:	e037883a 	mov	sp,fp
 4011090:	df000017 	ldw	fp,0(sp)
 4011094:	dec00104 	addi	sp,sp,4
 4011098:	f800283a 	ret

0401109c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 401109c:	defff304 	addi	sp,sp,-52
 40110a0:	dfc00c15 	stw	ra,48(sp)
 40110a4:	df000b15 	stw	fp,44(sp)
 40110a8:	df000b04 	addi	fp,sp,44
 40110ac:	e13ffd15 	stw	r4,-12(fp)
 40110b0:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40110b4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 40110b8:	00810174 	movhi	r2,1029
 40110bc:	1081b504 	addi	r2,r2,1748
 40110c0:	10800003 	ldbu	r2,0(r2)
 40110c4:	10803fcc 	andi	r2,r2,255
 40110c8:	1005003a 	cmpeq	r2,r2,zero
 40110cc:	1000021e 	bne	r2,zero,40110d8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 40110d0:	e03fff15 	stw	zero,-4(fp)
 40110d4:	00007006 	br	4011298 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40110d8:	0005303a 	rdctl	r2,status
 40110dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40110e0:	e0fff917 	ldw	r3,-28(fp)
 40110e4:	00bfff84 	movi	r2,-2
 40110e8:	1884703a 	and	r2,r3,r2
 40110ec:	1001703a 	wrctl	status,r2
  
  return context;
 40110f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 40110f4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 40110f8:	00810174 	movhi	r2,1029
 40110fc:	1081b404 	addi	r2,r2,1744
 4011100:	10800017 	ldw	r2,0(r2)
 4011104:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4011108:	00810174 	movhi	r2,1029
 401110c:	1081b404 	addi	r2,r2,1744
 4011110:	10800017 	ldw	r2,0(r2)
 4011114:	1005003a 	cmpeq	r2,r2,zero
 4011118:	1000081e 	bne	r2,zero,401113c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 401111c:	00810174 	movhi	r2,1029
 4011120:	1081b404 	addi	r2,r2,1744
 4011124:	10800017 	ldw	r2,0(r2)
 4011128:	10800117 	ldw	r2,4(r2)
 401112c:	1007883a 	mov	r3,r2
 4011130:	00810174 	movhi	r2,1029
 4011134:	1081b404 	addi	r2,r2,1744
 4011138:	10c00015 	stw	r3,0(r2)
 401113c:	e0bffa17 	ldw	r2,-24(fp)
 4011140:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011144:	e0bff817 	ldw	r2,-32(fp)
 4011148:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 401114c:	e0bffc17 	ldw	r2,-16(fp)
 4011150:	1005003a 	cmpeq	r2,r2,zero
 4011154:	10004e1e 	bne	r2,zero,4011290 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011158:	0005303a 	rdctl	r2,status
 401115c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011160:	e0fff717 	ldw	r3,-36(fp)
 4011164:	00bfff84 	movi	r2,-2
 4011168:	1884703a 	and	r2,r3,r2
 401116c:	1001703a 	wrctl	status,r2
  
  return context;
 4011170:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 4011174:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4011178:	00810174 	movhi	r2,1029
 401117c:	1081b204 	addi	r2,r2,1736
 4011180:	10800017 	ldw	r2,0(r2)
 4011184:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4011188:	e0bffb17 	ldw	r2,-20(fp)
 401118c:	1005003a 	cmpeq	r2,r2,zero
 4011190:	1000311e 	bne	r2,zero,4011258 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4011194:	00810174 	movhi	r2,1029
 4011198:	1081b204 	addi	r2,r2,1736
 401119c:	10800017 	ldw	r2,0(r2)
 40111a0:	10c00017 	ldw	r3,0(r2)
 40111a4:	00810174 	movhi	r2,1029
 40111a8:	1081b204 	addi	r2,r2,1736
 40111ac:	10c00015 	stw	r3,0(r2)
 40111b0:	e0bffa17 	ldw	r2,-24(fp)
 40111b4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40111b8:	e0bff617 	ldw	r2,-40(fp)
 40111bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 40111c0:	e0fffb17 	ldw	r3,-20(fp)
 40111c4:	e0bffd17 	ldw	r2,-12(fp)
 40111c8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 40111cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40111d0:	1085883a 	add	r2,r2,r2
 40111d4:	1085883a 	add	r2,r2,r2
 40111d8:	1007883a 	mov	r3,r2
 40111dc:	e0bffd17 	ldw	r2,-12(fp)
 40111e0:	1887883a 	add	r3,r3,r2
 40111e4:	e0bffb17 	ldw	r2,-20(fp)
 40111e8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 40111ec:	e0fffb17 	ldw	r3,-20(fp)
 40111f0:	e0bffd17 	ldw	r2,-12(fp)
 40111f4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 40111f8:	e0fffb17 	ldw	r3,-20(fp)
 40111fc:	e0bffd17 	ldw	r2,-12(fp)
 4011200:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 4011204:	e0fffb17 	ldw	r3,-20(fp)
 4011208:	e0bffe0b 	ldhu	r2,-8(fp)
 401120c:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 4011210:	e0bffb17 	ldw	r2,-20(fp)
 4011214:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4011218:	e0fffc17 	ldw	r3,-16(fp)
 401121c:	00800084 	movi	r2,2
 4011220:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 4011224:	e0bffc17 	ldw	r2,-16(fp)
 4011228:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 401122c:	e0fffc17 	ldw	r3,-16(fp)
 4011230:	e0bffb17 	ldw	r2,-20(fp)
 4011234:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4011238:	e0fffc17 	ldw	r3,-16(fp)
 401123c:	00800fc4 	movi	r2,63
 4011240:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4011244:	e0bffc17 	ldw	r2,-16(fp)
 4011248:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 401124c:	e13ffc17 	ldw	r4,-16(fp)
 4011250:	400e1040 	call	400e104 <OS_EventWaitListInit>
 4011254:	00000e06 	br	4011290 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4011258:	00810174 	movhi	r2,1029
 401125c:	1081b404 	addi	r2,r2,1744
 4011260:	10c00017 	ldw	r3,0(r2)
 4011264:	e0bffc17 	ldw	r2,-16(fp)
 4011268:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 401126c:	00c10174 	movhi	r3,1029
 4011270:	18c1b404 	addi	r3,r3,1744
 4011274:	e0bffc17 	ldw	r2,-16(fp)
 4011278:	18800015 	stw	r2,0(r3)
 401127c:	e0bffa17 	ldw	r2,-24(fp)
 4011280:	e0bff515 	stw	r2,-44(fp)
 4011284:	e0bff517 	ldw	r2,-44(fp)
 4011288:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 401128c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 4011290:	e0bffc17 	ldw	r2,-16(fp)
 4011294:	e0bfff15 	stw	r2,-4(fp)
 4011298:	e0bfff17 	ldw	r2,-4(fp)
}
 401129c:	e037883a 	mov	sp,fp
 40112a0:	dfc00117 	ldw	ra,4(sp)
 40112a4:	df000017 	ldw	fp,0(sp)
 40112a8:	dec00204 	addi	sp,sp,8
 40112ac:	f800283a 	ret

040112b0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40112b0:	defff004 	addi	sp,sp,-64
 40112b4:	dfc00f15 	stw	ra,60(sp)
 40112b8:	df000e15 	stw	fp,56(sp)
 40112bc:	df000e04 	addi	fp,sp,56
 40112c0:	e13ffb15 	stw	r4,-20(fp)
 40112c4:	e1bffd15 	stw	r6,-12(fp)
 40112c8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40112cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40112d0:	e0bffd17 	ldw	r2,-12(fp)
 40112d4:	1004c03a 	cmpne	r2,r2,zero
 40112d8:	1000031e 	bne	r2,zero,40112e8 <OSQDel+0x38>
        return (pevent);
 40112dc:	e0bffb17 	ldw	r2,-20(fp)
 40112e0:	e0bfff15 	stw	r2,-4(fp)
 40112e4:	0000ac06 	br	4011598 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40112e8:	e0bffb17 	ldw	r2,-20(fp)
 40112ec:	1004c03a 	cmpne	r2,r2,zero
 40112f0:	1000061e 	bne	r2,zero,401130c <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 40112f4:	e0fffd17 	ldw	r3,-12(fp)
 40112f8:	00800104 	movi	r2,4
 40112fc:	18800005 	stb	r2,0(r3)
        return (pevent);
 4011300:	e0fffb17 	ldw	r3,-20(fp)
 4011304:	e0ffff15 	stw	r3,-4(fp)
 4011308:	0000a306 	br	4011598 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 401130c:	e0bffb17 	ldw	r2,-20(fp)
 4011310:	10800003 	ldbu	r2,0(r2)
 4011314:	10803fcc 	andi	r2,r2,255
 4011318:	108000a0 	cmpeqi	r2,r2,2
 401131c:	1000061e 	bne	r2,zero,4011338 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 4011320:	e0fffd17 	ldw	r3,-12(fp)
 4011324:	00800044 	movi	r2,1
 4011328:	18800005 	stb	r2,0(r3)
        return (pevent);
 401132c:	e0bffb17 	ldw	r2,-20(fp)
 4011330:	e0bfff15 	stw	r2,-4(fp)
 4011334:	00009806 	br	4011598 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4011338:	00810174 	movhi	r2,1029
 401133c:	1081b504 	addi	r2,r2,1748
 4011340:	10800003 	ldbu	r2,0(r2)
 4011344:	10803fcc 	andi	r2,r2,255
 4011348:	1005003a 	cmpeq	r2,r2,zero
 401134c:	1000061e 	bne	r2,zero,4011368 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4011350:	e0fffd17 	ldw	r3,-12(fp)
 4011354:	008003c4 	movi	r2,15
 4011358:	18800005 	stb	r2,0(r3)
        return (pevent);
 401135c:	e0fffb17 	ldw	r3,-20(fp)
 4011360:	e0ffff15 	stw	r3,-4(fp)
 4011364:	00008c06 	br	4011598 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011368:	0005303a 	rdctl	r2,status
 401136c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011370:	e0fff617 	ldw	r3,-40(fp)
 4011374:	00bfff84 	movi	r2,-2
 4011378:	1884703a 	and	r2,r3,r2
 401137c:	1001703a 	wrctl	status,r2
  
  return context;
 4011380:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 4011384:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4011388:	e0bffb17 	ldw	r2,-20(fp)
 401138c:	10800283 	ldbu	r2,10(r2)
 4011390:	10803fcc 	andi	r2,r2,255
 4011394:	1005003a 	cmpeq	r2,r2,zero
 4011398:	1000031e 	bne	r2,zero,40113a8 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401139c:	00800044 	movi	r2,1
 40113a0:	e0bffa05 	stb	r2,-24(fp)
 40113a4:	00000106 	br	40113ac <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 40113a8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 40113ac:	e0bffc03 	ldbu	r2,-16(fp)
 40113b0:	e0bffe15 	stw	r2,-8(fp)
 40113b4:	e0fffe17 	ldw	r3,-8(fp)
 40113b8:	1805003a 	cmpeq	r2,r3,zero
 40113bc:	1000041e 	bne	r2,zero,40113d0 <OSQDel+0x120>
 40113c0:	e0fffe17 	ldw	r3,-8(fp)
 40113c4:	18800060 	cmpeqi	r2,r3,1
 40113c8:	1000391e 	bne	r2,zero,40114b0 <OSQDel+0x200>
 40113cc:	00006706 	br	401156c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 40113d0:	e0bffa03 	ldbu	r2,-24(fp)
 40113d4:	1004c03a 	cmpne	r2,r2,zero
 40113d8:	1000261e 	bne	r2,zero,4011474 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 40113dc:	e0fffb17 	ldw	r3,-20(fp)
 40113e0:	00800fc4 	movi	r2,63
 40113e4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 40113e8:	e0bffb17 	ldw	r2,-20(fp)
 40113ec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 40113f0:	e0bffb17 	ldw	r2,-20(fp)
 40113f4:	10800117 	ldw	r2,4(r2)
 40113f8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 40113fc:	00810174 	movhi	r2,1029
 4011400:	1081b204 	addi	r2,r2,1736
 4011404:	10c00017 	ldw	r3,0(r2)
 4011408:	e0bff817 	ldw	r2,-32(fp)
 401140c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 4011410:	00c10174 	movhi	r3,1029
 4011414:	18c1b204 	addi	r3,r3,1736
 4011418:	e0bff817 	ldw	r2,-32(fp)
 401141c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011420:	e0bffb17 	ldw	r2,-20(fp)
 4011424:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4011428:	00810174 	movhi	r2,1029
 401142c:	1081b404 	addi	r2,r2,1744
 4011430:	10c00017 	ldw	r3,0(r2)
 4011434:	e0bffb17 	ldw	r2,-20(fp)
 4011438:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 401143c:	e0bffb17 	ldw	r2,-20(fp)
 4011440:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4011444:	00c10174 	movhi	r3,1029
 4011448:	18c1b404 	addi	r3,r3,1744
 401144c:	e0bffb17 	ldw	r2,-20(fp)
 4011450:	18800015 	stw	r2,0(r3)
 4011454:	e0bff717 	ldw	r2,-36(fp)
 4011458:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401145c:	e0bff517 	ldw	r2,-44(fp)
 4011460:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4011464:	e0bffd17 	ldw	r2,-12(fp)
 4011468:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 401146c:	e03ff915 	stw	zero,-28(fp)
 4011470:	00004706 	br	4011590 <OSQDel+0x2e0>
 4011474:	e0bff717 	ldw	r2,-36(fp)
 4011478:	e0bff415 	stw	r2,-48(fp)
 401147c:	e0bff417 	ldw	r2,-48(fp)
 4011480:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4011484:	e0fffd17 	ldw	r3,-12(fp)
 4011488:	00801244 	movi	r2,73
 401148c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 4011490:	e0bffb17 	ldw	r2,-20(fp)
 4011494:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 4011498:	00003d06 	br	4011590 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 401149c:	e13ffb17 	ldw	r4,-20(fp)
 40114a0:	000b883a 	mov	r5,zero
 40114a4:	01800104 	movi	r6,4
 40114a8:	000f883a 	mov	r7,zero
 40114ac:	400db500 	call	400db50 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 40114b0:	e0bffb17 	ldw	r2,-20(fp)
 40114b4:	10800283 	ldbu	r2,10(r2)
 40114b8:	10803fcc 	andi	r2,r2,255
 40114bc:	1004c03a 	cmpne	r2,r2,zero
 40114c0:	103ff61e 	bne	r2,zero,401149c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 40114c4:	e0fffb17 	ldw	r3,-20(fp)
 40114c8:	00800fc4 	movi	r2,63
 40114cc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 40114d0:	e0bffb17 	ldw	r2,-20(fp)
 40114d4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 40114d8:	e0bffb17 	ldw	r2,-20(fp)
 40114dc:	10800117 	ldw	r2,4(r2)
 40114e0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 40114e4:	00810174 	movhi	r2,1029
 40114e8:	1081b204 	addi	r2,r2,1736
 40114ec:	10c00017 	ldw	r3,0(r2)
 40114f0:	e0bff817 	ldw	r2,-32(fp)
 40114f4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 40114f8:	00c10174 	movhi	r3,1029
 40114fc:	18c1b204 	addi	r3,r3,1736
 4011500:	e0bff817 	ldw	r2,-32(fp)
 4011504:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011508:	e0bffb17 	ldw	r2,-20(fp)
 401150c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011510:	00810174 	movhi	r2,1029
 4011514:	1081b404 	addi	r2,r2,1744
 4011518:	10c00017 	ldw	r3,0(r2)
 401151c:	e0bffb17 	ldw	r2,-20(fp)
 4011520:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4011524:	e0bffb17 	ldw	r2,-20(fp)
 4011528:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 401152c:	00c10174 	movhi	r3,1029
 4011530:	18c1b404 	addi	r3,r3,1744
 4011534:	e0bffb17 	ldw	r2,-20(fp)
 4011538:	18800015 	stw	r2,0(r3)
 401153c:	e0bff717 	ldw	r2,-36(fp)
 4011540:	e0bff315 	stw	r2,-52(fp)
 4011544:	e0bff317 	ldw	r2,-52(fp)
 4011548:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 401154c:	e0bffa03 	ldbu	r2,-24(fp)
 4011550:	10800058 	cmpnei	r2,r2,1
 4011554:	1000011e 	bne	r2,zero,401155c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4011558:	400e5900 	call	400e590 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 401155c:	e0bffd17 	ldw	r2,-12(fp)
 4011560:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 4011564:	e03ff915 	stw	zero,-28(fp)
             break;
 4011568:	00000906 	br	4011590 <OSQDel+0x2e0>
 401156c:	e0bff717 	ldw	r2,-36(fp)
 4011570:	e0bff215 	stw	r2,-56(fp)
 4011574:	e0bff217 	ldw	r2,-56(fp)
 4011578:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 401157c:	e0fffd17 	ldw	r3,-12(fp)
 4011580:	008001c4 	movi	r2,7
 4011584:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 4011588:	e0bffb17 	ldw	r2,-20(fp)
 401158c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 4011590:	e0bff917 	ldw	r2,-28(fp)
 4011594:	e0bfff15 	stw	r2,-4(fp)
 4011598:	e0bfff17 	ldw	r2,-4(fp)
}
 401159c:	e037883a 	mov	sp,fp
 40115a0:	dfc00117 	ldw	ra,4(sp)
 40115a4:	df000017 	ldw	fp,0(sp)
 40115a8:	dec00204 	addi	sp,sp,8
 40115ac:	f800283a 	ret

040115b0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 40115b0:	defff904 	addi	sp,sp,-28
 40115b4:	df000615 	stw	fp,24(sp)
 40115b8:	df000604 	addi	fp,sp,24
 40115bc:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40115c0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40115c4:	e0bffe17 	ldw	r2,-8(fp)
 40115c8:	1004c03a 	cmpne	r2,r2,zero
 40115cc:	1000031e 	bne	r2,zero,40115dc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 40115d0:	00800104 	movi	r2,4
 40115d4:	e0bfff15 	stw	r2,-4(fp)
 40115d8:	00002206 	br	4011664 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40115dc:	e0bffe17 	ldw	r2,-8(fp)
 40115e0:	10800003 	ldbu	r2,0(r2)
 40115e4:	10803fcc 	andi	r2,r2,255
 40115e8:	108000a0 	cmpeqi	r2,r2,2
 40115ec:	1000031e 	bne	r2,zero,40115fc <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 40115f0:	00800044 	movi	r2,1
 40115f4:	e0bfff15 	stw	r2,-4(fp)
 40115f8:	00001a06 	br	4011664 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40115fc:	0005303a 	rdctl	r2,status
 4011600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011604:	e0fffb17 	ldw	r3,-20(fp)
 4011608:	00bfff84 	movi	r2,-2
 401160c:	1884703a 	and	r2,r3,r2
 4011610:	1001703a 	wrctl	status,r2
  
  return context;
 4011614:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4011618:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 401161c:	e0bffe17 	ldw	r2,-8(fp)
 4011620:	10800117 	ldw	r2,4(r2)
 4011624:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 4011628:	e0bffd17 	ldw	r2,-12(fp)
 401162c:	10c00117 	ldw	r3,4(r2)
 4011630:	e0bffd17 	ldw	r2,-12(fp)
 4011634:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 4011638:	e0bffd17 	ldw	r2,-12(fp)
 401163c:	10c00117 	ldw	r3,4(r2)
 4011640:	e0bffd17 	ldw	r2,-12(fp)
 4011644:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 4011648:	e0bffd17 	ldw	r2,-12(fp)
 401164c:	1000058d 	sth	zero,22(r2)
 4011650:	e0bffc17 	ldw	r2,-16(fp)
 4011654:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011658:	e0bffa17 	ldw	r2,-24(fp)
 401165c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4011660:	e03fff15 	stw	zero,-4(fp)
 4011664:	e0bfff17 	ldw	r2,-4(fp)
}
 4011668:	e037883a 	mov	sp,fp
 401166c:	df000017 	ldw	fp,0(sp)
 4011670:	dec00104 	addi	sp,sp,4
 4011674:	f800283a 	ret

04011678 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4011678:	defff104 	addi	sp,sp,-60
 401167c:	dfc00e15 	stw	ra,56(sp)
 4011680:	df000d15 	stw	fp,52(sp)
 4011684:	df000d04 	addi	fp,sp,52
 4011688:	e13ffb15 	stw	r4,-20(fp)
 401168c:	e1bffd15 	stw	r6,-12(fp)
 4011690:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4011694:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4011698:	e0bffd17 	ldw	r2,-12(fp)
 401169c:	1004c03a 	cmpne	r2,r2,zero
 40116a0:	1000021e 	bne	r2,zero,40116ac <OSQPend+0x34>
        return ((void *)0);
 40116a4:	e03fff15 	stw	zero,-4(fp)
 40116a8:	0000b506 	br	4011980 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 40116ac:	e0bffb17 	ldw	r2,-20(fp)
 40116b0:	1004c03a 	cmpne	r2,r2,zero
 40116b4:	1000051e 	bne	r2,zero,40116cc <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 40116b8:	e0fffd17 	ldw	r3,-12(fp)
 40116bc:	00800104 	movi	r2,4
 40116c0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 40116c4:	e03fff15 	stw	zero,-4(fp)
 40116c8:	0000ad06 	br	4011980 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 40116cc:	e0bffb17 	ldw	r2,-20(fp)
 40116d0:	10800003 	ldbu	r2,0(r2)
 40116d4:	10803fcc 	andi	r2,r2,255
 40116d8:	108000a0 	cmpeqi	r2,r2,2
 40116dc:	1000051e 	bne	r2,zero,40116f4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 40116e0:	e0fffd17 	ldw	r3,-12(fp)
 40116e4:	00800044 	movi	r2,1
 40116e8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 40116ec:	e03fff15 	stw	zero,-4(fp)
 40116f0:	0000a306 	br	4011980 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 40116f4:	00810174 	movhi	r2,1029
 40116f8:	1081b504 	addi	r2,r2,1748
 40116fc:	10800003 	ldbu	r2,0(r2)
 4011700:	10803fcc 	andi	r2,r2,255
 4011704:	1005003a 	cmpeq	r2,r2,zero
 4011708:	1000051e 	bne	r2,zero,4011720 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 401170c:	e0fffd17 	ldw	r3,-12(fp)
 4011710:	00800084 	movi	r2,2
 4011714:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4011718:	e03fff15 	stw	zero,-4(fp)
 401171c:	00009806 	br	4011980 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 4011720:	00810174 	movhi	r2,1029
 4011724:	1081a704 	addi	r2,r2,1692
 4011728:	10800003 	ldbu	r2,0(r2)
 401172c:	10803fcc 	andi	r2,r2,255
 4011730:	1005003a 	cmpeq	r2,r2,zero
 4011734:	1000051e 	bne	r2,zero,401174c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 4011738:	e0fffd17 	ldw	r3,-12(fp)
 401173c:	00800344 	movi	r2,13
 4011740:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 4011744:	e03fff15 	stw	zero,-4(fp)
 4011748:	00008d06 	br	4011980 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401174c:	0005303a 	rdctl	r2,status
 4011750:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011754:	e0fff717 	ldw	r3,-36(fp)
 4011758:	00bfff84 	movi	r2,-2
 401175c:	1884703a 	and	r2,r3,r2
 4011760:	1001703a 	wrctl	status,r2
  
  return context;
 4011764:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4011768:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 401176c:	e0bffb17 	ldw	r2,-20(fp)
 4011770:	10800117 	ldw	r2,4(r2)
 4011774:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4011778:	e0bff917 	ldw	r2,-28(fp)
 401177c:	1080058b 	ldhu	r2,22(r2)
 4011780:	10bfffcc 	andi	r2,r2,65535
 4011784:	1005003a 	cmpeq	r2,r2,zero
 4011788:	10001f1e 	bne	r2,zero,4011808 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 401178c:	e0bff917 	ldw	r2,-28(fp)
 4011790:	10c00417 	ldw	r3,16(r2)
 4011794:	18800017 	ldw	r2,0(r3)
 4011798:	e0bffa15 	stw	r2,-24(fp)
 401179c:	18c00104 	addi	r3,r3,4
 40117a0:	e0bff917 	ldw	r2,-28(fp)
 40117a4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 40117a8:	e0bff917 	ldw	r2,-28(fp)
 40117ac:	1080058b 	ldhu	r2,22(r2)
 40117b0:	10bfffc4 	addi	r2,r2,-1
 40117b4:	1007883a 	mov	r3,r2
 40117b8:	e0bff917 	ldw	r2,-28(fp)
 40117bc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 40117c0:	e0bff917 	ldw	r2,-28(fp)
 40117c4:	10c00417 	ldw	r3,16(r2)
 40117c8:	e0bff917 	ldw	r2,-28(fp)
 40117cc:	10800217 	ldw	r2,8(r2)
 40117d0:	1880041e 	bne	r3,r2,40117e4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 40117d4:	e0bff917 	ldw	r2,-28(fp)
 40117d8:	10c00117 	ldw	r3,4(r2)
 40117dc:	e0bff917 	ldw	r2,-28(fp)
 40117e0:	10c00415 	stw	r3,16(r2)
 40117e4:	e0bff817 	ldw	r2,-32(fp)
 40117e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40117ec:	e0bff617 	ldw	r2,-40(fp)
 40117f0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 40117f4:	e0bffd17 	ldw	r2,-12(fp)
 40117f8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 40117fc:	e0bffa17 	ldw	r2,-24(fp)
 4011800:	e0bfff15 	stw	r2,-4(fp)
 4011804:	00005e06 	br	4011980 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 4011808:	00810174 	movhi	r2,1029
 401180c:	1081b604 	addi	r2,r2,1752
 4011810:	10c00017 	ldw	r3,0(r2)
 4011814:	00810174 	movhi	r2,1029
 4011818:	1081b604 	addi	r2,r2,1752
 401181c:	10800017 	ldw	r2,0(r2)
 4011820:	10800c03 	ldbu	r2,48(r2)
 4011824:	10800114 	ori	r2,r2,4
 4011828:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 401182c:	00810174 	movhi	r2,1029
 4011830:	1081b604 	addi	r2,r2,1752
 4011834:	10800017 	ldw	r2,0(r2)
 4011838:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 401183c:	00810174 	movhi	r2,1029
 4011840:	1081b604 	addi	r2,r2,1752
 4011844:	10c00017 	ldw	r3,0(r2)
 4011848:	e0bffc0b 	ldhu	r2,-16(fp)
 401184c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4011850:	e13ffb17 	ldw	r4,-20(fp)
 4011854:	400dce40 	call	400dce4 <OS_EventTaskWait>
 4011858:	e0bff817 	ldw	r2,-32(fp)
 401185c:	e0bff515 	stw	r2,-44(fp)
 4011860:	e0bff517 	ldw	r2,-44(fp)
 4011864:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 4011868:	400e5900 	call	400e590 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401186c:	0005303a 	rdctl	r2,status
 4011870:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011874:	e0fff417 	ldw	r3,-48(fp)
 4011878:	00bfff84 	movi	r2,-2
 401187c:	1884703a 	and	r2,r3,r2
 4011880:	1001703a 	wrctl	status,r2
  
  return context;
 4011884:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 4011888:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 401188c:	00810174 	movhi	r2,1029
 4011890:	1081b604 	addi	r2,r2,1752
 4011894:	10800017 	ldw	r2,0(r2)
 4011898:	10800c43 	ldbu	r2,49(r2)
 401189c:	10803fcc 	andi	r2,r2,255
 40118a0:	e0bffe15 	stw	r2,-8(fp)
 40118a4:	e0fffe17 	ldw	r3,-8(fp)
 40118a8:	1805003a 	cmpeq	r2,r3,zero
 40118ac:	1000041e 	bne	r2,zero,40118c0 <OSQPend+0x248>
 40118b0:	e0fffe17 	ldw	r3,-8(fp)
 40118b4:	188000a0 	cmpeqi	r2,r3,2
 40118b8:	1000091e 	bne	r2,zero,40118e0 <OSQPend+0x268>
 40118bc:	00000d06 	br	40118f4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 40118c0:	00810174 	movhi	r2,1029
 40118c4:	1081b604 	addi	r2,r2,1752
 40118c8:	10800017 	ldw	r2,0(r2)
 40118cc:	10800917 	ldw	r2,36(r2)
 40118d0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 40118d4:	e0bffd17 	ldw	r2,-12(fp)
 40118d8:	10000005 	stb	zero,0(r2)
             break;
 40118dc:	00000e06 	br	4011918 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 40118e0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 40118e4:	e0fffd17 	ldw	r3,-12(fp)
 40118e8:	00800384 	movi	r2,14
 40118ec:	18800005 	stb	r2,0(r3)
             break;
 40118f0:	00000906 	br	4011918 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 40118f4:	00810174 	movhi	r2,1029
 40118f8:	1081b604 	addi	r2,r2,1752
 40118fc:	11000017 	ldw	r4,0(r2)
 4011900:	e17ffb17 	ldw	r5,-20(fp)
 4011904:	400df480 	call	400df48 <OS_EventTaskRemove>
             pmsg = (void *)0;
 4011908:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 401190c:	e0fffd17 	ldw	r3,-12(fp)
 4011910:	00800284 	movi	r2,10
 4011914:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4011918:	00810174 	movhi	r2,1029
 401191c:	1081b604 	addi	r2,r2,1752
 4011920:	10800017 	ldw	r2,0(r2)
 4011924:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4011928:	00810174 	movhi	r2,1029
 401192c:	1081b604 	addi	r2,r2,1752
 4011930:	10800017 	ldw	r2,0(r2)
 4011934:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4011938:	00810174 	movhi	r2,1029
 401193c:	1081b604 	addi	r2,r2,1752
 4011940:	10800017 	ldw	r2,0(r2)
 4011944:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4011948:	00810174 	movhi	r2,1029
 401194c:	1081b604 	addi	r2,r2,1752
 4011950:	10800017 	ldw	r2,0(r2)
 4011954:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 4011958:	00810174 	movhi	r2,1029
 401195c:	1081b604 	addi	r2,r2,1752
 4011960:	10800017 	ldw	r2,0(r2)
 4011964:	10000915 	stw	zero,36(r2)
 4011968:	e0bff817 	ldw	r2,-32(fp)
 401196c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011970:	e0bff317 	ldw	r2,-52(fp)
 4011974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4011978:	e0bffa17 	ldw	r2,-24(fp)
 401197c:	e0bfff15 	stw	r2,-4(fp)
 4011980:	e0bfff17 	ldw	r2,-4(fp)
}
 4011984:	e037883a 	mov	sp,fp
 4011988:	dfc00117 	ldw	ra,4(sp)
 401198c:	df000017 	ldw	fp,0(sp)
 4011990:	dec00204 	addi	sp,sp,8
 4011994:	f800283a 	ret

04011998 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4011998:	defff504 	addi	sp,sp,-44
 401199c:	dfc00a15 	stw	ra,40(sp)
 40119a0:	df000915 	stw	fp,36(sp)
 40119a4:	df000904 	addi	fp,sp,36
 40119a8:	e13ffc15 	stw	r4,-16(fp)
 40119ac:	e1bffe15 	stw	r6,-8(fp)
 40119b0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40119b4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40119b8:	e0bffe17 	ldw	r2,-8(fp)
 40119bc:	1004c03a 	cmpne	r2,r2,zero
 40119c0:	1000021e 	bne	r2,zero,40119cc <OSQPendAbort+0x34>
        return (0);
 40119c4:	e03fff15 	stw	zero,-4(fp)
 40119c8:	00004c06 	br	4011afc <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40119cc:	e0bffc17 	ldw	r2,-16(fp)
 40119d0:	1004c03a 	cmpne	r2,r2,zero
 40119d4:	1000051e 	bne	r2,zero,40119ec <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 40119d8:	e0fffe17 	ldw	r3,-8(fp)
 40119dc:	00800104 	movi	r2,4
 40119e0:	18800005 	stb	r2,0(r3)
        return (0);
 40119e4:	e03fff15 	stw	zero,-4(fp)
 40119e8:	00004406 	br	4011afc <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 40119ec:	e0bffc17 	ldw	r2,-16(fp)
 40119f0:	10800003 	ldbu	r2,0(r2)
 40119f4:	10803fcc 	andi	r2,r2,255
 40119f8:	108000a0 	cmpeqi	r2,r2,2
 40119fc:	1000051e 	bne	r2,zero,4011a14 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4011a00:	e0fffe17 	ldw	r3,-8(fp)
 4011a04:	00800044 	movi	r2,1
 4011a08:	18800005 	stb	r2,0(r3)
        return (0);
 4011a0c:	e03fff15 	stw	zero,-4(fp)
 4011a10:	00003a06 	br	4011afc <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011a14:	0005303a 	rdctl	r2,status
 4011a18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011a1c:	e0fff917 	ldw	r3,-28(fp)
 4011a20:	00bfff84 	movi	r2,-2
 4011a24:	1884703a 	and	r2,r3,r2
 4011a28:	1001703a 	wrctl	status,r2
  
  return context;
 4011a2c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4011a30:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4011a34:	e0bffc17 	ldw	r2,-16(fp)
 4011a38:	10800283 	ldbu	r2,10(r2)
 4011a3c:	10803fcc 	andi	r2,r2,255
 4011a40:	1005003a 	cmpeq	r2,r2,zero
 4011a44:	1000261e 	bne	r2,zero,4011ae0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 4011a48:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 4011a4c:	e0bffd03 	ldbu	r2,-12(fp)
 4011a50:	10800060 	cmpeqi	r2,r2,1
 4011a54:	1000091e 	bne	r2,zero,4011a7c <OSQPendAbort+0xe4>
 4011a58:	00000e06 	br	4011a94 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4011a5c:	e13ffc17 	ldw	r4,-16(fp)
 4011a60:	000b883a 	mov	r5,zero
 4011a64:	01800104 	movi	r6,4
 4011a68:	01c00084 	movi	r7,2
 4011a6c:	400db500 	call	400db50 <OS_EventTaskRdy>
                     nbr_tasks++;
 4011a70:	e0bffb03 	ldbu	r2,-20(fp)
 4011a74:	10800044 	addi	r2,r2,1
 4011a78:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4011a7c:	e0bffc17 	ldw	r2,-16(fp)
 4011a80:	10800283 	ldbu	r2,10(r2)
 4011a84:	10803fcc 	andi	r2,r2,255
 4011a88:	1004c03a 	cmpne	r2,r2,zero
 4011a8c:	103ff31e 	bne	r2,zero,4011a5c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4011a90:	00000806 	br	4011ab4 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4011a94:	e13ffc17 	ldw	r4,-16(fp)
 4011a98:	000b883a 	mov	r5,zero
 4011a9c:	01800104 	movi	r6,4
 4011aa0:	01c00084 	movi	r7,2
 4011aa4:	400db500 	call	400db50 <OS_EventTaskRdy>
                 nbr_tasks++;
 4011aa8:	e0bffb03 	ldbu	r2,-20(fp)
 4011aac:	10800044 	addi	r2,r2,1
 4011ab0:	e0bffb05 	stb	r2,-20(fp)
 4011ab4:	e0bffa17 	ldw	r2,-24(fp)
 4011ab8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011abc:	e0bff817 	ldw	r2,-32(fp)
 4011ac0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 4011ac4:	400e5900 	call	400e590 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4011ac8:	e0fffe17 	ldw	r3,-8(fp)
 4011acc:	00800384 	movi	r2,14
 4011ad0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 4011ad4:	e0bffb03 	ldbu	r2,-20(fp)
 4011ad8:	e0bfff15 	stw	r2,-4(fp)
 4011adc:	00000706 	br	4011afc <OSQPendAbort+0x164>
 4011ae0:	e0bffa17 	ldw	r2,-24(fp)
 4011ae4:	e0bff715 	stw	r2,-36(fp)
 4011ae8:	e0bff717 	ldw	r2,-36(fp)
 4011aec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4011af0:	e0bffe17 	ldw	r2,-8(fp)
 4011af4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 4011af8:	e03fff15 	stw	zero,-4(fp)
 4011afc:	e0bfff17 	ldw	r2,-4(fp)
}
 4011b00:	e037883a 	mov	sp,fp
 4011b04:	dfc00117 	ldw	ra,4(sp)
 4011b08:	df000017 	ldw	fp,0(sp)
 4011b0c:	dec00204 	addi	sp,sp,8
 4011b10:	f800283a 	ret

04011b14 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 4011b14:	defff504 	addi	sp,sp,-44
 4011b18:	dfc00a15 	stw	ra,40(sp)
 4011b1c:	df000915 	stw	fp,36(sp)
 4011b20:	df000904 	addi	fp,sp,36
 4011b24:	e13ffd15 	stw	r4,-12(fp)
 4011b28:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4011b2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4011b30:	e0bffd17 	ldw	r2,-12(fp)
 4011b34:	1004c03a 	cmpne	r2,r2,zero
 4011b38:	1000031e 	bne	r2,zero,4011b48 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 4011b3c:	00800104 	movi	r2,4
 4011b40:	e0bfff15 	stw	r2,-4(fp)
 4011b44:	00004d06 	br	4011c7c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4011b48:	e0bffd17 	ldw	r2,-12(fp)
 4011b4c:	10800003 	ldbu	r2,0(r2)
 4011b50:	10803fcc 	andi	r2,r2,255
 4011b54:	108000a0 	cmpeqi	r2,r2,2
 4011b58:	1000031e 	bne	r2,zero,4011b68 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 4011b5c:	00800044 	movi	r2,1
 4011b60:	e0bfff15 	stw	r2,-4(fp)
 4011b64:	00004506 	br	4011c7c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011b68:	0005303a 	rdctl	r2,status
 4011b6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011b70:	e0fffa17 	ldw	r3,-24(fp)
 4011b74:	00bfff84 	movi	r2,-2
 4011b78:	1884703a 	and	r2,r3,r2
 4011b7c:	1001703a 	wrctl	status,r2
  
  return context;
 4011b80:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4011b84:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 4011b88:	e0bffd17 	ldw	r2,-12(fp)
 4011b8c:	10800283 	ldbu	r2,10(r2)
 4011b90:	10803fcc 	andi	r2,r2,255
 4011b94:	1005003a 	cmpeq	r2,r2,zero
 4011b98:	10000c1e 	bne	r2,zero,4011bcc <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4011b9c:	e13ffd17 	ldw	r4,-12(fp)
 4011ba0:	e17ffe17 	ldw	r5,-8(fp)
 4011ba4:	01800104 	movi	r6,4
 4011ba8:	000f883a 	mov	r7,zero
 4011bac:	400db500 	call	400db50 <OS_EventTaskRdy>
 4011bb0:	e0bffb17 	ldw	r2,-20(fp)
 4011bb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011bb8:	e0bff917 	ldw	r2,-28(fp)
 4011bbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 4011bc0:	400e5900 	call	400e590 <OS_Sched>
        return (OS_ERR_NONE);
 4011bc4:	e03fff15 	stw	zero,-4(fp)
 4011bc8:	00002c06 	br	4011c7c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 4011bcc:	e0bffd17 	ldw	r2,-12(fp)
 4011bd0:	10800117 	ldw	r2,4(r2)
 4011bd4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 4011bd8:	e0bffc17 	ldw	r2,-16(fp)
 4011bdc:	10c0058b 	ldhu	r3,22(r2)
 4011be0:	e0bffc17 	ldw	r2,-16(fp)
 4011be4:	1080050b 	ldhu	r2,20(r2)
 4011be8:	18ffffcc 	andi	r3,r3,65535
 4011bec:	10bfffcc 	andi	r2,r2,65535
 4011bf0:	18800736 	bltu	r3,r2,4011c10 <OSQPost+0xfc>
 4011bf4:	e0bffb17 	ldw	r2,-20(fp)
 4011bf8:	e0bff815 	stw	r2,-32(fp)
 4011bfc:	e0bff817 	ldw	r2,-32(fp)
 4011c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4011c04:	00800784 	movi	r2,30
 4011c08:	e0bfff15 	stw	r2,-4(fp)
 4011c0c:	00001b06 	br	4011c7c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 4011c10:	e0bffc17 	ldw	r2,-16(fp)
 4011c14:	10c00317 	ldw	r3,12(r2)
 4011c18:	e0bffe17 	ldw	r2,-8(fp)
 4011c1c:	18800015 	stw	r2,0(r3)
 4011c20:	18c00104 	addi	r3,r3,4
 4011c24:	e0bffc17 	ldw	r2,-16(fp)
 4011c28:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4011c2c:	e0bffc17 	ldw	r2,-16(fp)
 4011c30:	1080058b 	ldhu	r2,22(r2)
 4011c34:	10800044 	addi	r2,r2,1
 4011c38:	1007883a 	mov	r3,r2
 4011c3c:	e0bffc17 	ldw	r2,-16(fp)
 4011c40:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4011c44:	e0bffc17 	ldw	r2,-16(fp)
 4011c48:	10c00317 	ldw	r3,12(r2)
 4011c4c:	e0bffc17 	ldw	r2,-16(fp)
 4011c50:	10800217 	ldw	r2,8(r2)
 4011c54:	1880041e 	bne	r3,r2,4011c68 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 4011c58:	e0bffc17 	ldw	r2,-16(fp)
 4011c5c:	10c00117 	ldw	r3,4(r2)
 4011c60:	e0bffc17 	ldw	r2,-16(fp)
 4011c64:	10c00315 	stw	r3,12(r2)
 4011c68:	e0bffb17 	ldw	r2,-20(fp)
 4011c6c:	e0bff715 	stw	r2,-36(fp)
 4011c70:	e0bff717 	ldw	r2,-36(fp)
 4011c74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4011c78:	e03fff15 	stw	zero,-4(fp)
 4011c7c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011c80:	e037883a 	mov	sp,fp
 4011c84:	dfc00117 	ldw	ra,4(sp)
 4011c88:	df000017 	ldw	fp,0(sp)
 4011c8c:	dec00204 	addi	sp,sp,8
 4011c90:	f800283a 	ret

04011c94 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4011c94:	defff504 	addi	sp,sp,-44
 4011c98:	dfc00a15 	stw	ra,40(sp)
 4011c9c:	df000915 	stw	fp,36(sp)
 4011ca0:	df000904 	addi	fp,sp,36
 4011ca4:	e13ffd15 	stw	r4,-12(fp)
 4011ca8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4011cac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011cb0:	e0bffd17 	ldw	r2,-12(fp)
 4011cb4:	1004c03a 	cmpne	r2,r2,zero
 4011cb8:	1000031e 	bne	r2,zero,4011cc8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 4011cbc:	00800104 	movi	r2,4
 4011cc0:	e0bfff15 	stw	r2,-4(fp)
 4011cc4:	00004f06 	br	4011e04 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4011cc8:	e0bffd17 	ldw	r2,-12(fp)
 4011ccc:	10800003 	ldbu	r2,0(r2)
 4011cd0:	10803fcc 	andi	r2,r2,255
 4011cd4:	108000a0 	cmpeqi	r2,r2,2
 4011cd8:	1000031e 	bne	r2,zero,4011ce8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 4011cdc:	00800044 	movi	r2,1
 4011ce0:	e0bfff15 	stw	r2,-4(fp)
 4011ce4:	00004706 	br	4011e04 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ce8:	0005303a 	rdctl	r2,status
 4011cec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011cf0:	e0fffa17 	ldw	r3,-24(fp)
 4011cf4:	00bfff84 	movi	r2,-2
 4011cf8:	1884703a 	and	r2,r3,r2
 4011cfc:	1001703a 	wrctl	status,r2
  
  return context;
 4011d00:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4011d04:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 4011d08:	e0bffd17 	ldw	r2,-12(fp)
 4011d0c:	10800283 	ldbu	r2,10(r2)
 4011d10:	10803fcc 	andi	r2,r2,255
 4011d14:	1005003a 	cmpeq	r2,r2,zero
 4011d18:	10000c1e 	bne	r2,zero,4011d4c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4011d1c:	e13ffd17 	ldw	r4,-12(fp)
 4011d20:	e17ffe17 	ldw	r5,-8(fp)
 4011d24:	01800104 	movi	r6,4
 4011d28:	000f883a 	mov	r7,zero
 4011d2c:	400db500 	call	400db50 <OS_EventTaskRdy>
 4011d30:	e0bffb17 	ldw	r2,-20(fp)
 4011d34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011d38:	e0bff917 	ldw	r2,-28(fp)
 4011d3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4011d40:	400e5900 	call	400e590 <OS_Sched>
        return (OS_ERR_NONE);
 4011d44:	e03fff15 	stw	zero,-4(fp)
 4011d48:	00002e06 	br	4011e04 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4011d4c:	e0bffd17 	ldw	r2,-12(fp)
 4011d50:	10800117 	ldw	r2,4(r2)
 4011d54:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4011d58:	e0bffc17 	ldw	r2,-16(fp)
 4011d5c:	10c0058b 	ldhu	r3,22(r2)
 4011d60:	e0bffc17 	ldw	r2,-16(fp)
 4011d64:	1080050b 	ldhu	r2,20(r2)
 4011d68:	18ffffcc 	andi	r3,r3,65535
 4011d6c:	10bfffcc 	andi	r2,r2,65535
 4011d70:	18800736 	bltu	r3,r2,4011d90 <OSQPostFront+0xfc>
 4011d74:	e0bffb17 	ldw	r2,-20(fp)
 4011d78:	e0bff815 	stw	r2,-32(fp)
 4011d7c:	e0bff817 	ldw	r2,-32(fp)
 4011d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4011d84:	00800784 	movi	r2,30
 4011d88:	e0bfff15 	stw	r2,-4(fp)
 4011d8c:	00001d06 	br	4011e04 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4011d90:	e0bffc17 	ldw	r2,-16(fp)
 4011d94:	10c00417 	ldw	r3,16(r2)
 4011d98:	e0bffc17 	ldw	r2,-16(fp)
 4011d9c:	10800117 	ldw	r2,4(r2)
 4011da0:	1880041e 	bne	r3,r2,4011db4 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 4011da4:	e0bffc17 	ldw	r2,-16(fp)
 4011da8:	10c00217 	ldw	r3,8(r2)
 4011dac:	e0bffc17 	ldw	r2,-16(fp)
 4011db0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 4011db4:	e0bffc17 	ldw	r2,-16(fp)
 4011db8:	10800417 	ldw	r2,16(r2)
 4011dbc:	10ffff04 	addi	r3,r2,-4
 4011dc0:	e0bffc17 	ldw	r2,-16(fp)
 4011dc4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 4011dc8:	e0bffc17 	ldw	r2,-16(fp)
 4011dcc:	10c00417 	ldw	r3,16(r2)
 4011dd0:	e0bffe17 	ldw	r2,-8(fp)
 4011dd4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4011dd8:	e0bffc17 	ldw	r2,-16(fp)
 4011ddc:	1080058b 	ldhu	r2,22(r2)
 4011de0:	10800044 	addi	r2,r2,1
 4011de4:	1007883a 	mov	r3,r2
 4011de8:	e0bffc17 	ldw	r2,-16(fp)
 4011dec:	10c0058d 	sth	r3,22(r2)
 4011df0:	e0bffb17 	ldw	r2,-20(fp)
 4011df4:	e0bff715 	stw	r2,-36(fp)
 4011df8:	e0bff717 	ldw	r2,-36(fp)
 4011dfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4011e00:	e03fff15 	stw	zero,-4(fp)
 4011e04:	e0bfff17 	ldw	r2,-4(fp)
}
 4011e08:	e037883a 	mov	sp,fp
 4011e0c:	dfc00117 	ldw	ra,4(sp)
 4011e10:	df000017 	ldw	fp,0(sp)
 4011e14:	dec00204 	addi	sp,sp,8
 4011e18:	f800283a 	ret

04011e1c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 4011e1c:	defff404 	addi	sp,sp,-48
 4011e20:	dfc00b15 	stw	ra,44(sp)
 4011e24:	df000a15 	stw	fp,40(sp)
 4011e28:	df000a04 	addi	fp,sp,40
 4011e2c:	e13ffc15 	stw	r4,-16(fp)
 4011e30:	e17ffd15 	stw	r5,-12(fp)
 4011e34:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4011e38:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011e3c:	e0bffc17 	ldw	r2,-16(fp)
 4011e40:	1004c03a 	cmpne	r2,r2,zero
 4011e44:	1000031e 	bne	r2,zero,4011e54 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 4011e48:	00800104 	movi	r2,4
 4011e4c:	e0bfff15 	stw	r2,-4(fp)
 4011e50:	00007906 	br	4012038 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4011e54:	e0bffc17 	ldw	r2,-16(fp)
 4011e58:	10800003 	ldbu	r2,0(r2)
 4011e5c:	10803fcc 	andi	r2,r2,255
 4011e60:	108000a0 	cmpeqi	r2,r2,2
 4011e64:	1000031e 	bne	r2,zero,4011e74 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 4011e68:	00800044 	movi	r2,1
 4011e6c:	e0bfff15 	stw	r2,-4(fp)
 4011e70:	00007106 	br	4012038 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011e74:	0005303a 	rdctl	r2,status
 4011e78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e7c:	e0fff917 	ldw	r3,-28(fp)
 4011e80:	00bfff84 	movi	r2,-2
 4011e84:	1884703a 	and	r2,r3,r2
 4011e88:	1001703a 	wrctl	status,r2
  
  return context;
 4011e8c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4011e90:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4011e94:	e0bffc17 	ldw	r2,-16(fp)
 4011e98:	10800283 	ldbu	r2,10(r2)
 4011e9c:	10803fcc 	andi	r2,r2,255
 4011ea0:	1005003a 	cmpeq	r2,r2,zero
 4011ea4:	1000211e 	bne	r2,zero,4011f2c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4011ea8:	e0bffe03 	ldbu	r2,-8(fp)
 4011eac:	1080004c 	andi	r2,r2,1
 4011eb0:	10803fcc 	andi	r2,r2,255
 4011eb4:	1005003a 	cmpeq	r2,r2,zero
 4011eb8:	10000c1e 	bne	r2,zero,4011eec <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4011ebc:	00000506 	br	4011ed4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4011ec0:	e13ffc17 	ldw	r4,-16(fp)
 4011ec4:	e17ffd17 	ldw	r5,-12(fp)
 4011ec8:	01800104 	movi	r6,4
 4011ecc:	000f883a 	mov	r7,zero
 4011ed0:	400db500 	call	400db50 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4011ed4:	e0bffc17 	ldw	r2,-16(fp)
 4011ed8:	10800283 	ldbu	r2,10(r2)
 4011edc:	10803fcc 	andi	r2,r2,255
 4011ee0:	1004c03a 	cmpne	r2,r2,zero
 4011ee4:	103ff61e 	bne	r2,zero,4011ec0 <OSQPostOpt+0xa4>
 4011ee8:	00000506 	br	4011f00 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4011eec:	e13ffc17 	ldw	r4,-16(fp)
 4011ef0:	e17ffd17 	ldw	r5,-12(fp)
 4011ef4:	01800104 	movi	r6,4
 4011ef8:	000f883a 	mov	r7,zero
 4011efc:	400db500 	call	400db50 <OS_EventTaskRdy>
 4011f00:	e0bffa17 	ldw	r2,-24(fp)
 4011f04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011f08:	e0bff817 	ldw	r2,-32(fp)
 4011f0c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4011f10:	e0bffe03 	ldbu	r2,-8(fp)
 4011f14:	1080010c 	andi	r2,r2,4
 4011f18:	1004c03a 	cmpne	r2,r2,zero
 4011f1c:	1000011e 	bne	r2,zero,4011f24 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4011f20:	400e5900 	call	400e590 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4011f24:	e03fff15 	stw	zero,-4(fp)
 4011f28:	00004306 	br	4012038 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4011f2c:	e0bffc17 	ldw	r2,-16(fp)
 4011f30:	10800117 	ldw	r2,4(r2)
 4011f34:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4011f38:	e0bffb17 	ldw	r2,-20(fp)
 4011f3c:	10c0058b 	ldhu	r3,22(r2)
 4011f40:	e0bffb17 	ldw	r2,-20(fp)
 4011f44:	1080050b 	ldhu	r2,20(r2)
 4011f48:	18ffffcc 	andi	r3,r3,65535
 4011f4c:	10bfffcc 	andi	r2,r2,65535
 4011f50:	18800736 	bltu	r3,r2,4011f70 <OSQPostOpt+0x154>
 4011f54:	e0bffa17 	ldw	r2,-24(fp)
 4011f58:	e0bff715 	stw	r2,-36(fp)
 4011f5c:	e0bff717 	ldw	r2,-36(fp)
 4011f60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4011f64:	00800784 	movi	r2,30
 4011f68:	e0bfff15 	stw	r2,-4(fp)
 4011f6c:	00003206 	br	4012038 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4011f70:	e0bffe03 	ldbu	r2,-8(fp)
 4011f74:	1080008c 	andi	r2,r2,2
 4011f78:	1005003a 	cmpeq	r2,r2,zero
 4011f7c:	1000131e 	bne	r2,zero,4011fcc <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4011f80:	e0bffb17 	ldw	r2,-20(fp)
 4011f84:	10c00417 	ldw	r3,16(r2)
 4011f88:	e0bffb17 	ldw	r2,-20(fp)
 4011f8c:	10800117 	ldw	r2,4(r2)
 4011f90:	1880041e 	bne	r3,r2,4011fa4 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4011f94:	e0bffb17 	ldw	r2,-20(fp)
 4011f98:	10c00217 	ldw	r3,8(r2)
 4011f9c:	e0bffb17 	ldw	r2,-20(fp)
 4011fa0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4011fa4:	e0bffb17 	ldw	r2,-20(fp)
 4011fa8:	10800417 	ldw	r2,16(r2)
 4011fac:	10ffff04 	addi	r3,r2,-4
 4011fb0:	e0bffb17 	ldw	r2,-20(fp)
 4011fb4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4011fb8:	e0bffb17 	ldw	r2,-20(fp)
 4011fbc:	10c00417 	ldw	r3,16(r2)
 4011fc0:	e0bffd17 	ldw	r2,-12(fp)
 4011fc4:	18800015 	stw	r2,0(r3)
 4011fc8:	00001006 	br	401200c <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4011fcc:	e0bffb17 	ldw	r2,-20(fp)
 4011fd0:	10c00317 	ldw	r3,12(r2)
 4011fd4:	e0bffd17 	ldw	r2,-12(fp)
 4011fd8:	18800015 	stw	r2,0(r3)
 4011fdc:	18c00104 	addi	r3,r3,4
 4011fe0:	e0bffb17 	ldw	r2,-20(fp)
 4011fe4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4011fe8:	e0bffb17 	ldw	r2,-20(fp)
 4011fec:	10c00317 	ldw	r3,12(r2)
 4011ff0:	e0bffb17 	ldw	r2,-20(fp)
 4011ff4:	10800217 	ldw	r2,8(r2)
 4011ff8:	1880041e 	bne	r3,r2,401200c <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 4011ffc:	e0bffb17 	ldw	r2,-20(fp)
 4012000:	10c00117 	ldw	r3,4(r2)
 4012004:	e0bffb17 	ldw	r2,-20(fp)
 4012008:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 401200c:	e0bffb17 	ldw	r2,-20(fp)
 4012010:	1080058b 	ldhu	r2,22(r2)
 4012014:	10800044 	addi	r2,r2,1
 4012018:	1007883a 	mov	r3,r2
 401201c:	e0bffb17 	ldw	r2,-20(fp)
 4012020:	10c0058d 	sth	r3,22(r2)
 4012024:	e0bffa17 	ldw	r2,-24(fp)
 4012028:	e0bff615 	stw	r2,-40(fp)
 401202c:	e0bff617 	ldw	r2,-40(fp)
 4012030:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4012034:	e03fff15 	stw	zero,-4(fp)
 4012038:	e0bfff17 	ldw	r2,-4(fp)
}
 401203c:	e037883a 	mov	sp,fp
 4012040:	dfc00117 	ldw	ra,4(sp)
 4012044:	df000017 	ldw	fp,0(sp)
 4012048:	dec00204 	addi	sp,sp,8
 401204c:	f800283a 	ret

04012050 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4012050:	defff504 	addi	sp,sp,-44
 4012054:	df000a15 	stw	fp,40(sp)
 4012058:	df000a04 	addi	fp,sp,40
 401205c:	e13ffd15 	stw	r4,-12(fp)
 4012060:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4012064:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4012068:	e0bffd17 	ldw	r2,-12(fp)
 401206c:	1004c03a 	cmpne	r2,r2,zero
 4012070:	1000031e 	bne	r2,zero,4012080 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4012074:	00800104 	movi	r2,4
 4012078:	e0bfff15 	stw	r2,-4(fp)
 401207c:	00004f06 	br	40121bc <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4012080:	e0bffe17 	ldw	r2,-8(fp)
 4012084:	1004c03a 	cmpne	r2,r2,zero
 4012088:	1000031e 	bne	r2,zero,4012098 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 401208c:	00800244 	movi	r2,9
 4012090:	e0bfff15 	stw	r2,-4(fp)
 4012094:	00004906 	br	40121bc <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4012098:	e0bffd17 	ldw	r2,-12(fp)
 401209c:	10800003 	ldbu	r2,0(r2)
 40120a0:	10803fcc 	andi	r2,r2,255
 40120a4:	108000a0 	cmpeqi	r2,r2,2
 40120a8:	1000031e 	bne	r2,zero,40120b8 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 40120ac:	00800044 	movi	r2,1
 40120b0:	e0bfff15 	stw	r2,-4(fp)
 40120b4:	00004106 	br	40121bc <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40120b8:	0005303a 	rdctl	r2,status
 40120bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40120c0:	e0fff717 	ldw	r3,-36(fp)
 40120c4:	00bfff84 	movi	r2,-2
 40120c8:	1884703a 	and	r2,r3,r2
 40120cc:	1001703a 	wrctl	status,r2
  
  return context;
 40120d0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 40120d4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 40120d8:	e0bffd17 	ldw	r2,-12(fp)
 40120dc:	10c00283 	ldbu	r3,10(r2)
 40120e0:	e0bffe17 	ldw	r2,-8(fp)
 40120e4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 40120e8:	e0bffd17 	ldw	r2,-12(fp)
 40120ec:	108002c4 	addi	r2,r2,11
 40120f0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 40120f4:	e0bffe17 	ldw	r2,-8(fp)
 40120f8:	10800204 	addi	r2,r2,8
 40120fc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4012100:	e03ffb05 	stb	zero,-20(fp)
 4012104:	00000d06 	br	401213c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 4012108:	e0bffa17 	ldw	r2,-24(fp)
 401210c:	10c00003 	ldbu	r3,0(r2)
 4012110:	e0bff917 	ldw	r2,-28(fp)
 4012114:	10c00005 	stb	r3,0(r2)
 4012118:	e0bff917 	ldw	r2,-28(fp)
 401211c:	10800044 	addi	r2,r2,1
 4012120:	e0bff915 	stw	r2,-28(fp)
 4012124:	e0bffa17 	ldw	r2,-24(fp)
 4012128:	10800044 	addi	r2,r2,1
 401212c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4012130:	e0bffb03 	ldbu	r2,-20(fp)
 4012134:	10800044 	addi	r2,r2,1
 4012138:	e0bffb05 	stb	r2,-20(fp)
 401213c:	e0bffb03 	ldbu	r2,-20(fp)
 4012140:	108000f0 	cmpltui	r2,r2,3
 4012144:	103ff01e 	bne	r2,zero,4012108 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4012148:	e0bffd17 	ldw	r2,-12(fp)
 401214c:	10800117 	ldw	r2,4(r2)
 4012150:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4012154:	e0bffc17 	ldw	r2,-16(fp)
 4012158:	1080058b 	ldhu	r2,22(r2)
 401215c:	10bfffcc 	andi	r2,r2,65535
 4012160:	1005003a 	cmpeq	r2,r2,zero
 4012164:	1000061e 	bne	r2,zero,4012180 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4012168:	e0bffc17 	ldw	r2,-16(fp)
 401216c:	10800417 	ldw	r2,16(r2)
 4012170:	10c00017 	ldw	r3,0(r2)
 4012174:	e0bffe17 	ldw	r2,-8(fp)
 4012178:	10c00015 	stw	r3,0(r2)
 401217c:	00000206 	br	4012188 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 4012180:	e0bffe17 	ldw	r2,-8(fp)
 4012184:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4012188:	e0bffc17 	ldw	r2,-16(fp)
 401218c:	10c0058b 	ldhu	r3,22(r2)
 4012190:	e0bffe17 	ldw	r2,-8(fp)
 4012194:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4012198:	e0bffc17 	ldw	r2,-16(fp)
 401219c:	10c0050b 	ldhu	r3,20(r2)
 40121a0:	e0bffe17 	ldw	r2,-8(fp)
 40121a4:	10c0018d 	sth	r3,6(r2)
 40121a8:	e0bff817 	ldw	r2,-32(fp)
 40121ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40121b0:	e0bff617 	ldw	r2,-40(fp)
 40121b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40121b8:	e03fff15 	stw	zero,-4(fp)
 40121bc:	e0bfff17 	ldw	r2,-4(fp)
}
 40121c0:	e037883a 	mov	sp,fp
 40121c4:	df000017 	ldw	fp,0(sp)
 40121c8:	dec00104 	addi	sp,sp,4
 40121cc:	f800283a 	ret

040121d0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 40121d0:	defffb04 	addi	sp,sp,-20
 40121d4:	dfc00415 	stw	ra,16(sp)
 40121d8:	df000315 	stw	fp,12(sp)
 40121dc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 40121e0:	01010174 	movhi	r4,1029
 40121e4:	211a0a04 	addi	r4,r4,26664
 40121e8:	01407804 	movi	r5,480
 40121ec:	400e4d00 	call	400e4d0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 40121f0:	00810174 	movhi	r2,1029
 40121f4:	109a0a04 	addi	r2,r2,26664
 40121f8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 40121fc:	00810174 	movhi	r2,1029
 4012200:	109a1004 	addi	r2,r2,26688
 4012204:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4012208:	e03fff0d 	sth	zero,-4(fp)
 401220c:	00000c06 	br	4012240 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4012210:	e0fffe17 	ldw	r3,-8(fp)
 4012214:	e0bffd17 	ldw	r2,-12(fp)
 4012218:	18800015 	stw	r2,0(r3)
        pq1++;
 401221c:	e0bffe17 	ldw	r2,-8(fp)
 4012220:	10800604 	addi	r2,r2,24
 4012224:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4012228:	e0bffd17 	ldw	r2,-12(fp)
 401222c:	10800604 	addi	r2,r2,24
 4012230:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4012234:	e0bfff0b 	ldhu	r2,-4(fp)
 4012238:	10800044 	addi	r2,r2,1
 401223c:	e0bfff0d 	sth	r2,-4(fp)
 4012240:	e0bfff0b 	ldhu	r2,-4(fp)
 4012244:	108004f0 	cmpltui	r2,r2,19
 4012248:	103ff11e 	bne	r2,zero,4012210 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 401224c:	e0bffe17 	ldw	r2,-8(fp)
 4012250:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4012254:	00c10174 	movhi	r3,1029
 4012258:	18c1b204 	addi	r3,r3,1736
 401225c:	00810174 	movhi	r2,1029
 4012260:	109a0a04 	addi	r2,r2,26664
 4012264:	18800015 	stw	r2,0(r3)
#endif
}
 4012268:	e037883a 	mov	sp,fp
 401226c:	dfc00117 	ldw	ra,4(sp)
 4012270:	df000017 	ldw	fp,0(sp)
 4012274:	dec00204 	addi	sp,sp,8
 4012278:	f800283a 	ret

0401227c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 401227c:	defff904 	addi	sp,sp,-28
 4012280:	df000615 	stw	fp,24(sp)
 4012284:	df000604 	addi	fp,sp,24
 4012288:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401228c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4012290:	e0bffe17 	ldw	r2,-8(fp)
 4012294:	1004c03a 	cmpne	r2,r2,zero
 4012298:	1000021e 	bne	r2,zero,40122a4 <OSSemAccept+0x28>
        return (0);
 401229c:	e03fff15 	stw	zero,-4(fp)
 40122a0:	00002106 	br	4012328 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40122a4:	e0bffe17 	ldw	r2,-8(fp)
 40122a8:	10800003 	ldbu	r2,0(r2)
 40122ac:	10803fcc 	andi	r2,r2,255
 40122b0:	108000e0 	cmpeqi	r2,r2,3
 40122b4:	1000021e 	bne	r2,zero,40122c0 <OSSemAccept+0x44>
        return (0);
 40122b8:	e03fff15 	stw	zero,-4(fp)
 40122bc:	00001a06 	br	4012328 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40122c0:	0005303a 	rdctl	r2,status
 40122c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40122c8:	e0fffb17 	ldw	r3,-20(fp)
 40122cc:	00bfff84 	movi	r2,-2
 40122d0:	1884703a 	and	r2,r3,r2
 40122d4:	1001703a 	wrctl	status,r2
  
  return context;
 40122d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 40122dc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 40122e0:	e0bffe17 	ldw	r2,-8(fp)
 40122e4:	1080020b 	ldhu	r2,8(r2)
 40122e8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 40122ec:	e0bffd0b 	ldhu	r2,-12(fp)
 40122f0:	1005003a 	cmpeq	r2,r2,zero
 40122f4:	1000061e 	bne	r2,zero,4012310 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 40122f8:	e0bffe17 	ldw	r2,-8(fp)
 40122fc:	1080020b 	ldhu	r2,8(r2)
 4012300:	10bfffc4 	addi	r2,r2,-1
 4012304:	1007883a 	mov	r3,r2
 4012308:	e0bffe17 	ldw	r2,-8(fp)
 401230c:	10c0020d 	sth	r3,8(r2)
 4012310:	e0bffc17 	ldw	r2,-16(fp)
 4012314:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012318:	e0bffa17 	ldw	r2,-24(fp)
 401231c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4012320:	e0bffd0b 	ldhu	r2,-12(fp)
 4012324:	e0bfff15 	stw	r2,-4(fp)
 4012328:	e0bfff17 	ldw	r2,-4(fp)
}
 401232c:	e037883a 	mov	sp,fp
 4012330:	df000017 	ldw	fp,0(sp)
 4012334:	dec00104 	addi	sp,sp,4
 4012338:	f800283a 	ret

0401233c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 401233c:	defff804 	addi	sp,sp,-32
 4012340:	dfc00715 	stw	ra,28(sp)
 4012344:	df000615 	stw	fp,24(sp)
 4012348:	df000604 	addi	fp,sp,24
 401234c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4012350:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4012354:	00810174 	movhi	r2,1029
 4012358:	1081b504 	addi	r2,r2,1748
 401235c:	10800003 	ldbu	r2,0(r2)
 4012360:	10803fcc 	andi	r2,r2,255
 4012364:	1005003a 	cmpeq	r2,r2,zero
 4012368:	1000021e 	bne	r2,zero,4012374 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 401236c:	e03fff15 	stw	zero,-4(fp)
 4012370:	00003106 	br	4012438 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012374:	0005303a 	rdctl	r2,status
 4012378:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401237c:	e0fffb17 	ldw	r3,-20(fp)
 4012380:	00bfff84 	movi	r2,-2
 4012384:	1884703a 	and	r2,r3,r2
 4012388:	1001703a 	wrctl	status,r2
  
  return context;
 401238c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4012390:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4012394:	00810174 	movhi	r2,1029
 4012398:	1081b404 	addi	r2,r2,1744
 401239c:	10800017 	ldw	r2,0(r2)
 40123a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 40123a4:	00810174 	movhi	r2,1029
 40123a8:	1081b404 	addi	r2,r2,1744
 40123ac:	10800017 	ldw	r2,0(r2)
 40123b0:	1005003a 	cmpeq	r2,r2,zero
 40123b4:	1000081e 	bne	r2,zero,40123d8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 40123b8:	00810174 	movhi	r2,1029
 40123bc:	1081b404 	addi	r2,r2,1744
 40123c0:	10800017 	ldw	r2,0(r2)
 40123c4:	10800117 	ldw	r2,4(r2)
 40123c8:	1007883a 	mov	r3,r2
 40123cc:	00810174 	movhi	r2,1029
 40123d0:	1081b404 	addi	r2,r2,1744
 40123d4:	10c00015 	stw	r3,0(r2)
 40123d8:	e0bffc17 	ldw	r2,-16(fp)
 40123dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40123e0:	e0bffa17 	ldw	r2,-24(fp)
 40123e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 40123e8:	e0bffd17 	ldw	r2,-12(fp)
 40123ec:	1005003a 	cmpeq	r2,r2,zero
 40123f0:	10000f1e 	bne	r2,zero,4012430 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 40123f4:	e0fffd17 	ldw	r3,-12(fp)
 40123f8:	008000c4 	movi	r2,3
 40123fc:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 4012400:	e0fffd17 	ldw	r3,-12(fp)
 4012404:	e0bffe0b 	ldhu	r2,-8(fp)
 4012408:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 401240c:	e0bffd17 	ldw	r2,-12(fp)
 4012410:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4012414:	e0fffd17 	ldw	r3,-12(fp)
 4012418:	00800fc4 	movi	r2,63
 401241c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4012420:	e0bffd17 	ldw	r2,-12(fp)
 4012424:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4012428:	e13ffd17 	ldw	r4,-12(fp)
 401242c:	400e1040 	call	400e104 <OS_EventWaitListInit>
    }
    return (pevent);
 4012430:	e0bffd17 	ldw	r2,-12(fp)
 4012434:	e0bfff15 	stw	r2,-4(fp)
 4012438:	e0bfff17 	ldw	r2,-4(fp)
}
 401243c:	e037883a 	mov	sp,fp
 4012440:	dfc00117 	ldw	ra,4(sp)
 4012444:	df000017 	ldw	fp,0(sp)
 4012448:	dec00204 	addi	sp,sp,8
 401244c:	f800283a 	ret

04012450 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4012450:	defff104 	addi	sp,sp,-60
 4012454:	dfc00e15 	stw	ra,56(sp)
 4012458:	df000d15 	stw	fp,52(sp)
 401245c:	df000d04 	addi	fp,sp,52
 4012460:	e13ffb15 	stw	r4,-20(fp)
 4012464:	e1bffd15 	stw	r6,-12(fp)
 4012468:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401246c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4012470:	e0bffd17 	ldw	r2,-12(fp)
 4012474:	1004c03a 	cmpne	r2,r2,zero
 4012478:	1000031e 	bne	r2,zero,4012488 <OSSemDel+0x38>
        return (pevent);
 401247c:	e0bffb17 	ldw	r2,-20(fp)
 4012480:	e0bfff15 	stw	r2,-4(fp)
 4012484:	00009406 	br	40126d8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4012488:	e0bffb17 	ldw	r2,-20(fp)
 401248c:	1004c03a 	cmpne	r2,r2,zero
 4012490:	1000061e 	bne	r2,zero,40124ac <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 4012494:	e0fffd17 	ldw	r3,-12(fp)
 4012498:	00800104 	movi	r2,4
 401249c:	18800005 	stb	r2,0(r3)
        return (pevent);
 40124a0:	e0fffb17 	ldw	r3,-20(fp)
 40124a4:	e0ffff15 	stw	r3,-4(fp)
 40124a8:	00008b06 	br	40126d8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 40124ac:	e0bffb17 	ldw	r2,-20(fp)
 40124b0:	10800003 	ldbu	r2,0(r2)
 40124b4:	10803fcc 	andi	r2,r2,255
 40124b8:	108000e0 	cmpeqi	r2,r2,3
 40124bc:	1000061e 	bne	r2,zero,40124d8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 40124c0:	e0fffd17 	ldw	r3,-12(fp)
 40124c4:	00800044 	movi	r2,1
 40124c8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40124cc:	e0bffb17 	ldw	r2,-20(fp)
 40124d0:	e0bfff15 	stw	r2,-4(fp)
 40124d4:	00008006 	br	40126d8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40124d8:	00810174 	movhi	r2,1029
 40124dc:	1081b504 	addi	r2,r2,1748
 40124e0:	10800003 	ldbu	r2,0(r2)
 40124e4:	10803fcc 	andi	r2,r2,255
 40124e8:	1005003a 	cmpeq	r2,r2,zero
 40124ec:	1000061e 	bne	r2,zero,4012508 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 40124f0:	e0fffd17 	ldw	r3,-12(fp)
 40124f4:	008003c4 	movi	r2,15
 40124f8:	18800005 	stb	r2,0(r3)
        return (pevent);
 40124fc:	e0fffb17 	ldw	r3,-20(fp)
 4012500:	e0ffff15 	stw	r3,-4(fp)
 4012504:	00007406 	br	40126d8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012508:	0005303a 	rdctl	r2,status
 401250c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012510:	e0fff717 	ldw	r3,-36(fp)
 4012514:	00bfff84 	movi	r2,-2
 4012518:	1884703a 	and	r2,r3,r2
 401251c:	1001703a 	wrctl	status,r2
  
  return context;
 4012520:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4012524:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4012528:	e0bffb17 	ldw	r2,-20(fp)
 401252c:	10800283 	ldbu	r2,10(r2)
 4012530:	10803fcc 	andi	r2,r2,255
 4012534:	1005003a 	cmpeq	r2,r2,zero
 4012538:	1000031e 	bne	r2,zero,4012548 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 401253c:	00800044 	movi	r2,1
 4012540:	e0bffa05 	stb	r2,-24(fp)
 4012544:	00000106 	br	401254c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4012548:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 401254c:	e0bffc03 	ldbu	r2,-16(fp)
 4012550:	e0bffe15 	stw	r2,-8(fp)
 4012554:	e0fffe17 	ldw	r3,-8(fp)
 4012558:	1805003a 	cmpeq	r2,r3,zero
 401255c:	1000041e 	bne	r2,zero,4012570 <OSSemDel+0x120>
 4012560:	e0fffe17 	ldw	r3,-8(fp)
 4012564:	18800060 	cmpeqi	r2,r3,1
 4012568:	10002d1e 	bne	r2,zero,4012620 <OSSemDel+0x1d0>
 401256c:	00004f06 	br	40126ac <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4012570:	e0bffa03 	ldbu	r2,-24(fp)
 4012574:	1004c03a 	cmpne	r2,r2,zero
 4012578:	10001a1e 	bne	r2,zero,40125e4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 401257c:	e0fffb17 	ldw	r3,-20(fp)
 4012580:	00800fc4 	movi	r2,63
 4012584:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4012588:	e0bffb17 	ldw	r2,-20(fp)
 401258c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4012590:	e0bffb17 	ldw	r2,-20(fp)
 4012594:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4012598:	00810174 	movhi	r2,1029
 401259c:	1081b404 	addi	r2,r2,1744
 40125a0:	10c00017 	ldw	r3,0(r2)
 40125a4:	e0bffb17 	ldw	r2,-20(fp)
 40125a8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 40125ac:	e0bffb17 	ldw	r2,-20(fp)
 40125b0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 40125b4:	00c10174 	movhi	r3,1029
 40125b8:	18c1b404 	addi	r3,r3,1744
 40125bc:	e0bffb17 	ldw	r2,-20(fp)
 40125c0:	18800015 	stw	r2,0(r3)
 40125c4:	e0bff817 	ldw	r2,-32(fp)
 40125c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40125cc:	e0bff617 	ldw	r2,-40(fp)
 40125d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 40125d4:	e0bffd17 	ldw	r2,-12(fp)
 40125d8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 40125dc:	e03ff915 	stw	zero,-28(fp)
 40125e0:	00003b06 	br	40126d0 <OSSemDel+0x280>
 40125e4:	e0bff817 	ldw	r2,-32(fp)
 40125e8:	e0bff515 	stw	r2,-44(fp)
 40125ec:	e0bff517 	ldw	r2,-44(fp)
 40125f0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40125f4:	e0fffd17 	ldw	r3,-12(fp)
 40125f8:	00801244 	movi	r2,73
 40125fc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 4012600:	e0bffb17 	ldw	r2,-20(fp)
 4012604:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 4012608:	00003106 	br	40126d0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 401260c:	e13ffb17 	ldw	r4,-20(fp)
 4012610:	000b883a 	mov	r5,zero
 4012614:	01800044 	movi	r6,1
 4012618:	000f883a 	mov	r7,zero
 401261c:	400db500 	call	400db50 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4012620:	e0bffb17 	ldw	r2,-20(fp)
 4012624:	10800283 	ldbu	r2,10(r2)
 4012628:	10803fcc 	andi	r2,r2,255
 401262c:	1004c03a 	cmpne	r2,r2,zero
 4012630:	103ff61e 	bne	r2,zero,401260c <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4012634:	e0fffb17 	ldw	r3,-20(fp)
 4012638:	00800fc4 	movi	r2,63
 401263c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4012640:	e0bffb17 	ldw	r2,-20(fp)
 4012644:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4012648:	e0bffb17 	ldw	r2,-20(fp)
 401264c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4012650:	00810174 	movhi	r2,1029
 4012654:	1081b404 	addi	r2,r2,1744
 4012658:	10c00017 	ldw	r3,0(r2)
 401265c:	e0bffb17 	ldw	r2,-20(fp)
 4012660:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4012664:	e0bffb17 	ldw	r2,-20(fp)
 4012668:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 401266c:	00c10174 	movhi	r3,1029
 4012670:	18c1b404 	addi	r3,r3,1744
 4012674:	e0bffb17 	ldw	r2,-20(fp)
 4012678:	18800015 	stw	r2,0(r3)
 401267c:	e0bff817 	ldw	r2,-32(fp)
 4012680:	e0bff415 	stw	r2,-48(fp)
 4012684:	e0bff417 	ldw	r2,-48(fp)
 4012688:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 401268c:	e0bffa03 	ldbu	r2,-24(fp)
 4012690:	10800058 	cmpnei	r2,r2,1
 4012694:	1000011e 	bne	r2,zero,401269c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4012698:	400e5900 	call	400e590 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 401269c:	e0bffd17 	ldw	r2,-12(fp)
 40126a0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 40126a4:	e03ff915 	stw	zero,-28(fp)
             break;
 40126a8:	00000906 	br	40126d0 <OSSemDel+0x280>
 40126ac:	e0bff817 	ldw	r2,-32(fp)
 40126b0:	e0bff315 	stw	r2,-52(fp)
 40126b4:	e0bff317 	ldw	r2,-52(fp)
 40126b8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 40126bc:	e0fffd17 	ldw	r3,-12(fp)
 40126c0:	008001c4 	movi	r2,7
 40126c4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 40126c8:	e0bffb17 	ldw	r2,-20(fp)
 40126cc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 40126d0:	e0bff917 	ldw	r2,-28(fp)
 40126d4:	e0bfff15 	stw	r2,-4(fp)
 40126d8:	e0bfff17 	ldw	r2,-4(fp)
}
 40126dc:	e037883a 	mov	sp,fp
 40126e0:	dfc00117 	ldw	ra,4(sp)
 40126e4:	df000017 	ldw	fp,0(sp)
 40126e8:	dec00204 	addi	sp,sp,8
 40126ec:	f800283a 	ret

040126f0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 40126f0:	defff404 	addi	sp,sp,-48
 40126f4:	dfc00b15 	stw	ra,44(sp)
 40126f8:	df000a15 	stw	fp,40(sp)
 40126fc:	df000a04 	addi	fp,sp,40
 4012700:	e13ffc15 	stw	r4,-16(fp)
 4012704:	e1bffe15 	stw	r6,-8(fp)
 4012708:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401270c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4012710:	e0bffe17 	ldw	r2,-8(fp)
 4012714:	1005003a 	cmpeq	r2,r2,zero
 4012718:	10008f1e 	bne	r2,zero,4012958 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401271c:	e0bffc17 	ldw	r2,-16(fp)
 4012720:	1004c03a 	cmpne	r2,r2,zero
 4012724:	1000041e 	bne	r2,zero,4012738 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 4012728:	e0fffe17 	ldw	r3,-8(fp)
 401272c:	00800104 	movi	r2,4
 4012730:	18800005 	stb	r2,0(r3)
        return;
 4012734:	00008806 	br	4012958 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4012738:	e0bffc17 	ldw	r2,-16(fp)
 401273c:	10800003 	ldbu	r2,0(r2)
 4012740:	10803fcc 	andi	r2,r2,255
 4012744:	108000e0 	cmpeqi	r2,r2,3
 4012748:	1000041e 	bne	r2,zero,401275c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 401274c:	e0fffe17 	ldw	r3,-8(fp)
 4012750:	00800044 	movi	r2,1
 4012754:	18800005 	stb	r2,0(r3)
        return;
 4012758:	00007f06 	br	4012958 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 401275c:	00810174 	movhi	r2,1029
 4012760:	1081b504 	addi	r2,r2,1748
 4012764:	10800003 	ldbu	r2,0(r2)
 4012768:	10803fcc 	andi	r2,r2,255
 401276c:	1005003a 	cmpeq	r2,r2,zero
 4012770:	1000041e 	bne	r2,zero,4012784 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4012774:	e0fffe17 	ldw	r3,-8(fp)
 4012778:	00800084 	movi	r2,2
 401277c:	18800005 	stb	r2,0(r3)
        return;
 4012780:	00007506 	br	4012958 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4012784:	00810174 	movhi	r2,1029
 4012788:	1081a704 	addi	r2,r2,1692
 401278c:	10800003 	ldbu	r2,0(r2)
 4012790:	10803fcc 	andi	r2,r2,255
 4012794:	1005003a 	cmpeq	r2,r2,zero
 4012798:	1000041e 	bne	r2,zero,40127ac <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 401279c:	e0fffe17 	ldw	r3,-8(fp)
 40127a0:	00800344 	movi	r2,13
 40127a4:	18800005 	stb	r2,0(r3)
        return;
 40127a8:	00006b06 	br	4012958 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40127ac:	0005303a 	rdctl	r2,status
 40127b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40127b4:	e0fffa17 	ldw	r3,-24(fp)
 40127b8:	00bfff84 	movi	r2,-2
 40127bc:	1884703a 	and	r2,r3,r2
 40127c0:	1001703a 	wrctl	status,r2
  
  return context;
 40127c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 40127c8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 40127cc:	e0bffc17 	ldw	r2,-16(fp)
 40127d0:	1080020b 	ldhu	r2,8(r2)
 40127d4:	10bfffcc 	andi	r2,r2,65535
 40127d8:	1005003a 	cmpeq	r2,r2,zero
 40127dc:	10000d1e 	bne	r2,zero,4012814 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 40127e0:	e0bffc17 	ldw	r2,-16(fp)
 40127e4:	1080020b 	ldhu	r2,8(r2)
 40127e8:	10bfffc4 	addi	r2,r2,-1
 40127ec:	1007883a 	mov	r3,r2
 40127f0:	e0bffc17 	ldw	r2,-16(fp)
 40127f4:	10c0020d 	sth	r3,8(r2)
 40127f8:	e0bffb17 	ldw	r2,-20(fp)
 40127fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012800:	e0bff917 	ldw	r2,-28(fp)
 4012804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4012808:	e0bffe17 	ldw	r2,-8(fp)
 401280c:	10000005 	stb	zero,0(r2)
        return;
 4012810:	00005106 	br	4012958 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4012814:	00810174 	movhi	r2,1029
 4012818:	1081b604 	addi	r2,r2,1752
 401281c:	10c00017 	ldw	r3,0(r2)
 4012820:	00810174 	movhi	r2,1029
 4012824:	1081b604 	addi	r2,r2,1752
 4012828:	10800017 	ldw	r2,0(r2)
 401282c:	10800c03 	ldbu	r2,48(r2)
 4012830:	10800054 	ori	r2,r2,1
 4012834:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4012838:	00810174 	movhi	r2,1029
 401283c:	1081b604 	addi	r2,r2,1752
 4012840:	10800017 	ldw	r2,0(r2)
 4012844:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4012848:	00810174 	movhi	r2,1029
 401284c:	1081b604 	addi	r2,r2,1752
 4012850:	10c00017 	ldw	r3,0(r2)
 4012854:	e0bffd0b 	ldhu	r2,-12(fp)
 4012858:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 401285c:	e13ffc17 	ldw	r4,-16(fp)
 4012860:	400dce40 	call	400dce4 <OS_EventTaskWait>
 4012864:	e0bffb17 	ldw	r2,-20(fp)
 4012868:	e0bff815 	stw	r2,-32(fp)
 401286c:	e0bff817 	ldw	r2,-32(fp)
 4012870:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4012874:	400e5900 	call	400e590 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012878:	0005303a 	rdctl	r2,status
 401287c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012880:	e0fff717 	ldw	r3,-36(fp)
 4012884:	00bfff84 	movi	r2,-2
 4012888:	1884703a 	and	r2,r3,r2
 401288c:	1001703a 	wrctl	status,r2
  
  return context;
 4012890:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 4012894:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4012898:	00810174 	movhi	r2,1029
 401289c:	1081b604 	addi	r2,r2,1752
 40128a0:	10800017 	ldw	r2,0(r2)
 40128a4:	10800c43 	ldbu	r2,49(r2)
 40128a8:	10803fcc 	andi	r2,r2,255
 40128ac:	e0bfff15 	stw	r2,-4(fp)
 40128b0:	e0ffff17 	ldw	r3,-4(fp)
 40128b4:	1805003a 	cmpeq	r2,r3,zero
 40128b8:	1000041e 	bne	r2,zero,40128cc <OSSemPend+0x1dc>
 40128bc:	e0ffff17 	ldw	r3,-4(fp)
 40128c0:	188000a0 	cmpeqi	r2,r3,2
 40128c4:	1000041e 	bne	r2,zero,40128d8 <OSSemPend+0x1e8>
 40128c8:	00000706 	br	40128e8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 40128cc:	e0bffe17 	ldw	r2,-8(fp)
 40128d0:	10000005 	stb	zero,0(r2)
             break;
 40128d4:	00000c06 	br	4012908 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 40128d8:	e0fffe17 	ldw	r3,-8(fp)
 40128dc:	00800384 	movi	r2,14
 40128e0:	18800005 	stb	r2,0(r3)
             break;
 40128e4:	00000806 	br	4012908 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 40128e8:	00810174 	movhi	r2,1029
 40128ec:	1081b604 	addi	r2,r2,1752
 40128f0:	11000017 	ldw	r4,0(r2)
 40128f4:	e17ffc17 	ldw	r5,-16(fp)
 40128f8:	400df480 	call	400df48 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 40128fc:	e0fffe17 	ldw	r3,-8(fp)
 4012900:	00800284 	movi	r2,10
 4012904:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4012908:	00810174 	movhi	r2,1029
 401290c:	1081b604 	addi	r2,r2,1752
 4012910:	10800017 	ldw	r2,0(r2)
 4012914:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4012918:	00810174 	movhi	r2,1029
 401291c:	1081b604 	addi	r2,r2,1752
 4012920:	10800017 	ldw	r2,0(r2)
 4012924:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4012928:	00810174 	movhi	r2,1029
 401292c:	1081b604 	addi	r2,r2,1752
 4012930:	10800017 	ldw	r2,0(r2)
 4012934:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4012938:	00810174 	movhi	r2,1029
 401293c:	1081b604 	addi	r2,r2,1752
 4012940:	10800017 	ldw	r2,0(r2)
 4012944:	10000815 	stw	zero,32(r2)
 4012948:	e0bffb17 	ldw	r2,-20(fp)
 401294c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012950:	e0bff617 	ldw	r2,-40(fp)
 4012954:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 4012958:	e037883a 	mov	sp,fp
 401295c:	dfc00117 	ldw	ra,4(sp)
 4012960:	df000017 	ldw	fp,0(sp)
 4012964:	dec00204 	addi	sp,sp,8
 4012968:	f800283a 	ret

0401296c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401296c:	defff504 	addi	sp,sp,-44
 4012970:	dfc00a15 	stw	ra,40(sp)
 4012974:	df000915 	stw	fp,36(sp)
 4012978:	df000904 	addi	fp,sp,36
 401297c:	e13ffc15 	stw	r4,-16(fp)
 4012980:	e1bffe15 	stw	r6,-8(fp)
 4012984:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012988:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 401298c:	e0bffe17 	ldw	r2,-8(fp)
 4012990:	1004c03a 	cmpne	r2,r2,zero
 4012994:	1000021e 	bne	r2,zero,40129a0 <OSSemPendAbort+0x34>
        return (0);
 4012998:	e03fff15 	stw	zero,-4(fp)
 401299c:	00004c06 	br	4012ad0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40129a0:	e0bffc17 	ldw	r2,-16(fp)
 40129a4:	1004c03a 	cmpne	r2,r2,zero
 40129a8:	1000051e 	bne	r2,zero,40129c0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 40129ac:	e0fffe17 	ldw	r3,-8(fp)
 40129b0:	00800104 	movi	r2,4
 40129b4:	18800005 	stb	r2,0(r3)
        return (0);
 40129b8:	e03fff15 	stw	zero,-4(fp)
 40129bc:	00004406 	br	4012ad0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40129c0:	e0bffc17 	ldw	r2,-16(fp)
 40129c4:	10800003 	ldbu	r2,0(r2)
 40129c8:	10803fcc 	andi	r2,r2,255
 40129cc:	108000e0 	cmpeqi	r2,r2,3
 40129d0:	1000051e 	bne	r2,zero,40129e8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 40129d4:	e0fffe17 	ldw	r3,-8(fp)
 40129d8:	00800044 	movi	r2,1
 40129dc:	18800005 	stb	r2,0(r3)
        return (0);
 40129e0:	e03fff15 	stw	zero,-4(fp)
 40129e4:	00003a06 	br	4012ad0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40129e8:	0005303a 	rdctl	r2,status
 40129ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40129f0:	e0fff917 	ldw	r3,-28(fp)
 40129f4:	00bfff84 	movi	r2,-2
 40129f8:	1884703a 	and	r2,r3,r2
 40129fc:	1001703a 	wrctl	status,r2
  
  return context;
 4012a00:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4012a04:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 4012a08:	e0bffc17 	ldw	r2,-16(fp)
 4012a0c:	10800283 	ldbu	r2,10(r2)
 4012a10:	10803fcc 	andi	r2,r2,255
 4012a14:	1005003a 	cmpeq	r2,r2,zero
 4012a18:	1000261e 	bne	r2,zero,4012ab4 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 4012a1c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 4012a20:	e0bffd03 	ldbu	r2,-12(fp)
 4012a24:	10800060 	cmpeqi	r2,r2,1
 4012a28:	1000091e 	bne	r2,zero,4012a50 <OSSemPendAbort+0xe4>
 4012a2c:	00000e06 	br	4012a68 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4012a30:	e13ffc17 	ldw	r4,-16(fp)
 4012a34:	000b883a 	mov	r5,zero
 4012a38:	01800044 	movi	r6,1
 4012a3c:	01c00084 	movi	r7,2
 4012a40:	400db500 	call	400db50 <OS_EventTaskRdy>
                     nbr_tasks++;
 4012a44:	e0bffb03 	ldbu	r2,-20(fp)
 4012a48:	10800044 	addi	r2,r2,1
 4012a4c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4012a50:	e0bffc17 	ldw	r2,-16(fp)
 4012a54:	10800283 	ldbu	r2,10(r2)
 4012a58:	10803fcc 	andi	r2,r2,255
 4012a5c:	1004c03a 	cmpne	r2,r2,zero
 4012a60:	103ff31e 	bne	r2,zero,4012a30 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4012a64:	00000806 	br	4012a88 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4012a68:	e13ffc17 	ldw	r4,-16(fp)
 4012a6c:	000b883a 	mov	r5,zero
 4012a70:	01800044 	movi	r6,1
 4012a74:	01c00084 	movi	r7,2
 4012a78:	400db500 	call	400db50 <OS_EventTaskRdy>
                 nbr_tasks++;
 4012a7c:	e0bffb03 	ldbu	r2,-20(fp)
 4012a80:	10800044 	addi	r2,r2,1
 4012a84:	e0bffb05 	stb	r2,-20(fp)
 4012a88:	e0bffa17 	ldw	r2,-24(fp)
 4012a8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a90:	e0bff817 	ldw	r2,-32(fp)
 4012a94:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4012a98:	400e5900 	call	400e590 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4012a9c:	e0fffe17 	ldw	r3,-8(fp)
 4012aa0:	00800384 	movi	r2,14
 4012aa4:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 4012aa8:	e0bffb03 	ldbu	r2,-20(fp)
 4012aac:	e0bfff15 	stw	r2,-4(fp)
 4012ab0:	00000706 	br	4012ad0 <OSSemPendAbort+0x164>
 4012ab4:	e0bffa17 	ldw	r2,-24(fp)
 4012ab8:	e0bff715 	stw	r2,-36(fp)
 4012abc:	e0bff717 	ldw	r2,-36(fp)
 4012ac0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012ac4:	e0bffe17 	ldw	r2,-8(fp)
 4012ac8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4012acc:	e03fff15 	stw	zero,-4(fp)
 4012ad0:	e0bfff17 	ldw	r2,-4(fp)
}
 4012ad4:	e037883a 	mov	sp,fp
 4012ad8:	dfc00117 	ldw	ra,4(sp)
 4012adc:	df000017 	ldw	fp,0(sp)
 4012ae0:	dec00204 	addi	sp,sp,8
 4012ae4:	f800283a 	ret

04012ae8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4012ae8:	defff704 	addi	sp,sp,-36
 4012aec:	dfc00815 	stw	ra,32(sp)
 4012af0:	df000715 	stw	fp,28(sp)
 4012af4:	df000704 	addi	fp,sp,28
 4012af8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012afc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4012b00:	e0bffe17 	ldw	r2,-8(fp)
 4012b04:	1004c03a 	cmpne	r2,r2,zero
 4012b08:	1000031e 	bne	r2,zero,4012b18 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 4012b0c:	00800104 	movi	r2,4
 4012b10:	e0bfff15 	stw	r2,-4(fp)
 4012b14:	00003806 	br	4012bf8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4012b18:	e0bffe17 	ldw	r2,-8(fp)
 4012b1c:	10800003 	ldbu	r2,0(r2)
 4012b20:	10803fcc 	andi	r2,r2,255
 4012b24:	108000e0 	cmpeqi	r2,r2,3
 4012b28:	1000031e 	bne	r2,zero,4012b38 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 4012b2c:	00800044 	movi	r2,1
 4012b30:	e0bfff15 	stw	r2,-4(fp)
 4012b34:	00003006 	br	4012bf8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012b38:	0005303a 	rdctl	r2,status
 4012b3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012b40:	e0fffc17 	ldw	r3,-16(fp)
 4012b44:	00bfff84 	movi	r2,-2
 4012b48:	1884703a 	and	r2,r3,r2
 4012b4c:	1001703a 	wrctl	status,r2
  
  return context;
 4012b50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4012b54:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4012b58:	e0bffe17 	ldw	r2,-8(fp)
 4012b5c:	10800283 	ldbu	r2,10(r2)
 4012b60:	10803fcc 	andi	r2,r2,255
 4012b64:	1005003a 	cmpeq	r2,r2,zero
 4012b68:	10000c1e 	bne	r2,zero,4012b9c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4012b6c:	e13ffe17 	ldw	r4,-8(fp)
 4012b70:	000b883a 	mov	r5,zero
 4012b74:	01800044 	movi	r6,1
 4012b78:	000f883a 	mov	r7,zero
 4012b7c:	400db500 	call	400db50 <OS_EventTaskRdy>
 4012b80:	e0bffd17 	ldw	r2,-12(fp)
 4012b84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012b88:	e0bffb17 	ldw	r2,-20(fp)
 4012b8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4012b90:	400e5900 	call	400e590 <OS_Sched>
        return (OS_ERR_NONE);
 4012b94:	e03fff15 	stw	zero,-4(fp)
 4012b98:	00001706 	br	4012bf8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4012b9c:	e0bffe17 	ldw	r2,-8(fp)
 4012ba0:	1080020b 	ldhu	r2,8(r2)
 4012ba4:	10ffffcc 	andi	r3,r2,65535
 4012ba8:	00bfffd4 	movui	r2,65535
 4012bac:	18800c26 	beq	r3,r2,4012be0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4012bb0:	e0bffe17 	ldw	r2,-8(fp)
 4012bb4:	1080020b 	ldhu	r2,8(r2)
 4012bb8:	10800044 	addi	r2,r2,1
 4012bbc:	1007883a 	mov	r3,r2
 4012bc0:	e0bffe17 	ldw	r2,-8(fp)
 4012bc4:	10c0020d 	sth	r3,8(r2)
 4012bc8:	e0bffd17 	ldw	r2,-12(fp)
 4012bcc:	e0bffa15 	stw	r2,-24(fp)
 4012bd0:	e0bffa17 	ldw	r2,-24(fp)
 4012bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4012bd8:	e03fff15 	stw	zero,-4(fp)
 4012bdc:	00000606 	br	4012bf8 <OSSemPost+0x110>
 4012be0:	e0bffd17 	ldw	r2,-12(fp)
 4012be4:	e0bff915 	stw	r2,-28(fp)
 4012be8:	e0bff917 	ldw	r2,-28(fp)
 4012bec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4012bf0:	00800c84 	movi	r2,50
 4012bf4:	e0bfff15 	stw	r2,-4(fp)
 4012bf8:	e0bfff17 	ldw	r2,-4(fp)
}
 4012bfc:	e037883a 	mov	sp,fp
 4012c00:	dfc00117 	ldw	ra,4(sp)
 4012c04:	df000017 	ldw	fp,0(sp)
 4012c08:	dec00204 	addi	sp,sp,8
 4012c0c:	f800283a 	ret

04012c10 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4012c10:	defff604 	addi	sp,sp,-40
 4012c14:	df000915 	stw	fp,36(sp)
 4012c18:	df000904 	addi	fp,sp,36
 4012c1c:	e13ffd15 	stw	r4,-12(fp)
 4012c20:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4012c24:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4012c28:	e0bffd17 	ldw	r2,-12(fp)
 4012c2c:	1004c03a 	cmpne	r2,r2,zero
 4012c30:	1000031e 	bne	r2,zero,4012c40 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 4012c34:	00800104 	movi	r2,4
 4012c38:	e0bfff15 	stw	r2,-4(fp)
 4012c3c:	00003b06 	br	4012d2c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4012c40:	e0bffe17 	ldw	r2,-8(fp)
 4012c44:	1004c03a 	cmpne	r2,r2,zero
 4012c48:	1000031e 	bne	r2,zero,4012c58 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 4012c4c:	00800244 	movi	r2,9
 4012c50:	e0bfff15 	stw	r2,-4(fp)
 4012c54:	00003506 	br	4012d2c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4012c58:	e0bffd17 	ldw	r2,-12(fp)
 4012c5c:	10800003 	ldbu	r2,0(r2)
 4012c60:	10803fcc 	andi	r2,r2,255
 4012c64:	108000e0 	cmpeqi	r2,r2,3
 4012c68:	1000031e 	bne	r2,zero,4012c78 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 4012c6c:	00800044 	movi	r2,1
 4012c70:	e0bfff15 	stw	r2,-4(fp)
 4012c74:	00002d06 	br	4012d2c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012c78:	0005303a 	rdctl	r2,status
 4012c7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012c80:	e0fff817 	ldw	r3,-32(fp)
 4012c84:	00bfff84 	movi	r2,-2
 4012c88:	1884703a 	and	r2,r3,r2
 4012c8c:	1001703a 	wrctl	status,r2
  
  return context;
 4012c90:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4012c94:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4012c98:	e0bffd17 	ldw	r2,-12(fp)
 4012c9c:	10c00283 	ldbu	r3,10(r2)
 4012ca0:	e0bffe17 	ldw	r2,-8(fp)
 4012ca4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 4012ca8:	e0bffd17 	ldw	r2,-12(fp)
 4012cac:	108002c4 	addi	r2,r2,11
 4012cb0:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 4012cb4:	e0bffe17 	ldw	r2,-8(fp)
 4012cb8:	10800084 	addi	r2,r2,2
 4012cbc:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4012cc0:	e03ffa05 	stb	zero,-24(fp)
 4012cc4:	00000d06 	br	4012cfc <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 4012cc8:	e0bffc17 	ldw	r2,-16(fp)
 4012ccc:	10c00003 	ldbu	r3,0(r2)
 4012cd0:	e0bffb17 	ldw	r2,-20(fp)
 4012cd4:	10c00005 	stb	r3,0(r2)
 4012cd8:	e0bffb17 	ldw	r2,-20(fp)
 4012cdc:	10800044 	addi	r2,r2,1
 4012ce0:	e0bffb15 	stw	r2,-20(fp)
 4012ce4:	e0bffc17 	ldw	r2,-16(fp)
 4012ce8:	10800044 	addi	r2,r2,1
 4012cec:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4012cf0:	e0bffa03 	ldbu	r2,-24(fp)
 4012cf4:	10800044 	addi	r2,r2,1
 4012cf8:	e0bffa05 	stb	r2,-24(fp)
 4012cfc:	e0bffa03 	ldbu	r2,-24(fp)
 4012d00:	108000f0 	cmpltui	r2,r2,3
 4012d04:	103ff01e 	bne	r2,zero,4012cc8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4012d08:	e0bffd17 	ldw	r2,-12(fp)
 4012d0c:	10c0020b 	ldhu	r3,8(r2)
 4012d10:	e0bffe17 	ldw	r2,-8(fp)
 4012d14:	10c0000d 	sth	r3,0(r2)
 4012d18:	e0bff917 	ldw	r2,-28(fp)
 4012d1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012d20:	e0bff717 	ldw	r2,-36(fp)
 4012d24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4012d28:	e03fff15 	stw	zero,-4(fp)
 4012d2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4012d30:	e037883a 	mov	sp,fp
 4012d34:	df000017 	ldw	fp,0(sp)
 4012d38:	dec00104 	addi	sp,sp,4
 4012d3c:	f800283a 	ret

04012d40 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 4012d40:	defff904 	addi	sp,sp,-28
 4012d44:	df000615 	stw	fp,24(sp)
 4012d48:	df000604 	addi	fp,sp,24
 4012d4c:	e13ffd15 	stw	r4,-12(fp)
 4012d50:	e1bfff15 	stw	r6,-4(fp)
 4012d54:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012d58:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4012d5c:	e0bfff17 	ldw	r2,-4(fp)
 4012d60:	1005003a 	cmpeq	r2,r2,zero
 4012d64:	1000331e 	bne	r2,zero,4012e34 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4012d68:	e0bffd17 	ldw	r2,-12(fp)
 4012d6c:	1004c03a 	cmpne	r2,r2,zero
 4012d70:	1000041e 	bne	r2,zero,4012d84 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4012d74:	e0ffff17 	ldw	r3,-4(fp)
 4012d78:	00800104 	movi	r2,4
 4012d7c:	18800005 	stb	r2,0(r3)
        return;
 4012d80:	00002c06 	br	4012e34 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4012d84:	e0bffd17 	ldw	r2,-12(fp)
 4012d88:	10800003 	ldbu	r2,0(r2)
 4012d8c:	10803fcc 	andi	r2,r2,255
 4012d90:	108000e0 	cmpeqi	r2,r2,3
 4012d94:	1000041e 	bne	r2,zero,4012da8 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 4012d98:	e0ffff17 	ldw	r3,-4(fp)
 4012d9c:	00800044 	movi	r2,1
 4012da0:	18800005 	stb	r2,0(r3)
        return;
 4012da4:	00002306 	br	4012e34 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012da8:	0005303a 	rdctl	r2,status
 4012dac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012db0:	e0fffb17 	ldw	r3,-20(fp)
 4012db4:	00bfff84 	movi	r2,-2
 4012db8:	1884703a 	and	r2,r3,r2
 4012dbc:	1001703a 	wrctl	status,r2
  
  return context;
 4012dc0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4012dc4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 4012dc8:	e0bfff17 	ldw	r2,-4(fp)
 4012dcc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 4012dd0:	e0bffd17 	ldw	r2,-12(fp)
 4012dd4:	1080020b 	ldhu	r2,8(r2)
 4012dd8:	10bfffcc 	andi	r2,r2,65535
 4012ddc:	1005003a 	cmpeq	r2,r2,zero
 4012de0:	1000041e 	bne	r2,zero,4012df4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 4012de4:	e0fffd17 	ldw	r3,-12(fp)
 4012de8:	e0bffe0b 	ldhu	r2,-8(fp)
 4012dec:	1880020d 	sth	r2,8(r3)
 4012df0:	00000c06 	br	4012e24 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 4012df4:	e0bffd17 	ldw	r2,-12(fp)
 4012df8:	10800283 	ldbu	r2,10(r2)
 4012dfc:	10803fcc 	andi	r2,r2,255
 4012e00:	1004c03a 	cmpne	r2,r2,zero
 4012e04:	1000041e 	bne	r2,zero,4012e18 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4012e08:	e0fffd17 	ldw	r3,-12(fp)
 4012e0c:	e0bffe0b 	ldhu	r2,-8(fp)
 4012e10:	1880020d 	sth	r2,8(r3)
 4012e14:	00000306 	br	4012e24 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 4012e18:	e0ffff17 	ldw	r3,-4(fp)
 4012e1c:	00801244 	movi	r2,73
 4012e20:	18800005 	stb	r2,0(r3)
 4012e24:	e0bffc17 	ldw	r2,-16(fp)
 4012e28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012e2c:	e0bffa17 	ldw	r2,-24(fp)
 4012e30:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 4012e34:	e037883a 	mov	sp,fp
 4012e38:	df000017 	ldw	fp,0(sp)
 4012e3c:	dec00104 	addi	sp,sp,4
 4012e40:	f800283a 	ret

04012e44 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 4012e44:	defff004 	addi	sp,sp,-64
 4012e48:	dfc00f15 	stw	ra,60(sp)
 4012e4c:	df000e15 	stw	fp,56(sp)
 4012e50:	df000e04 	addi	fp,sp,56
 4012e54:	e13ffd05 	stb	r4,-12(fp)
 4012e58:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 4012e5c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 4012e60:	e0bffd03 	ldbu	r2,-12(fp)
 4012e64:	10800530 	cmpltui	r2,r2,20
 4012e68:	1000061e 	bne	r2,zero,4012e84 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 4012e6c:	e0bffd03 	ldbu	r2,-12(fp)
 4012e70:	10803fe0 	cmpeqi	r2,r2,255
 4012e74:	1000031e 	bne	r2,zero,4012e84 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 4012e78:	00800a84 	movi	r2,42
 4012e7c:	e0bfff15 	stw	r2,-4(fp)
 4012e80:	00014706 	br	40133a0 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 4012e84:	e0bffe03 	ldbu	r2,-8(fp)
 4012e88:	10800530 	cmpltui	r2,r2,20
 4012e8c:	1000031e 	bne	r2,zero,4012e9c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 4012e90:	00800a84 	movi	r2,42
 4012e94:	e0bfff15 	stw	r2,-4(fp)
 4012e98:	00014106 	br	40133a0 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012e9c:	0005303a 	rdctl	r2,status
 4012ea0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012ea4:	e0fff617 	ldw	r3,-40(fp)
 4012ea8:	00bfff84 	movi	r2,-2
 4012eac:	1884703a 	and	r2,r3,r2
 4012eb0:	1001703a 	wrctl	status,r2
  
  return context;
 4012eb4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4012eb8:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 4012ebc:	e0bffe03 	ldbu	r2,-8(fp)
 4012ec0:	00c101b4 	movhi	r3,1030
 4012ec4:	18e09604 	addi	r3,r3,-32168
 4012ec8:	1085883a 	add	r2,r2,r2
 4012ecc:	1085883a 	add	r2,r2,r2
 4012ed0:	10c5883a 	add	r2,r2,r3
 4012ed4:	10800017 	ldw	r2,0(r2)
 4012ed8:	1005003a 	cmpeq	r2,r2,zero
 4012edc:	1000071e 	bne	r2,zero,4012efc <OSTaskChangePrio+0xb8>
 4012ee0:	e0bff717 	ldw	r2,-36(fp)
 4012ee4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012ee8:	e0bff517 	ldw	r2,-44(fp)
 4012eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 4012ef0:	00800a04 	movi	r2,40
 4012ef4:	e0bfff15 	stw	r2,-4(fp)
 4012ef8:	00012906 	br	40133a0 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 4012efc:	e0bffd03 	ldbu	r2,-12(fp)
 4012f00:	10803fd8 	cmpnei	r2,r2,255
 4012f04:	1000051e 	bne	r2,zero,4012f1c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 4012f08:	00810174 	movhi	r2,1029
 4012f0c:	1081b604 	addi	r2,r2,1752
 4012f10:	10800017 	ldw	r2,0(r2)
 4012f14:	10800c83 	ldbu	r2,50(r2)
 4012f18:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 4012f1c:	e0bffd03 	ldbu	r2,-12(fp)
 4012f20:	00c101b4 	movhi	r3,1030
 4012f24:	18e09604 	addi	r3,r3,-32168
 4012f28:	1085883a 	add	r2,r2,r2
 4012f2c:	1085883a 	add	r2,r2,r2
 4012f30:	10c5883a 	add	r2,r2,r3
 4012f34:	10800017 	ldw	r2,0(r2)
 4012f38:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 4012f3c:	e0bffa17 	ldw	r2,-24(fp)
 4012f40:	1004c03a 	cmpne	r2,r2,zero
 4012f44:	1000071e 	bne	r2,zero,4012f64 <OSTaskChangePrio+0x120>
 4012f48:	e0bff717 	ldw	r2,-36(fp)
 4012f4c:	e0bff415 	stw	r2,-48(fp)
 4012f50:	e0bff417 	ldw	r2,-48(fp)
 4012f54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 4012f58:	00800a44 	movi	r2,41
 4012f5c:	e0bfff15 	stw	r2,-4(fp)
 4012f60:	00010f06 	br	40133a0 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4012f64:	e0bffa17 	ldw	r2,-24(fp)
 4012f68:	10800058 	cmpnei	r2,r2,1
 4012f6c:	1000071e 	bne	r2,zero,4012f8c <OSTaskChangePrio+0x148>
 4012f70:	e0bff717 	ldw	r2,-36(fp)
 4012f74:	e0bff315 	stw	r2,-52(fp)
 4012f78:	e0bff317 	ldw	r2,-52(fp)
 4012f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4012f80:	008010c4 	movi	r2,67
 4012f84:	e0bfff15 	stw	r2,-4(fp)
 4012f88:	00010506 	br	40133a0 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 4012f8c:	e0bffe03 	ldbu	r2,-8(fp)
 4012f90:	1004d0fa 	srli	r2,r2,3
 4012f94:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4012f98:	e0bffe03 	ldbu	r2,-8(fp)
 4012f9c:	108001cc 	andi	r2,r2,7
 4012fa0:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 4012fa4:	e0fff983 	ldbu	r3,-26(fp)
 4012fa8:	00800044 	movi	r2,1
 4012fac:	10c4983a 	sll	r2,r2,r3
 4012fb0:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 4012fb4:	e0fff943 	ldbu	r3,-27(fp)
 4012fb8:	00800044 	movi	r2,1
 4012fbc:	10c4983a 	sll	r2,r2,r3
 4012fc0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 4012fc4:	e0bffd03 	ldbu	r2,-12(fp)
 4012fc8:	00c101b4 	movhi	r3,1030
 4012fcc:	18e09604 	addi	r3,r3,-32168
 4012fd0:	1085883a 	add	r2,r2,r2
 4012fd4:	1085883a 	add	r2,r2,r2
 4012fd8:	10c5883a 	add	r2,r2,r3
 4012fdc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 4012fe0:	e0bffe03 	ldbu	r2,-8(fp)
 4012fe4:	00c101b4 	movhi	r3,1030
 4012fe8:	18e09604 	addi	r3,r3,-32168
 4012fec:	1085883a 	add	r2,r2,r2
 4012ff0:	1085883a 	add	r2,r2,r2
 4012ff4:	10c7883a 	add	r3,r2,r3
 4012ff8:	e0bffa17 	ldw	r2,-24(fp)
 4012ffc:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 4013000:	e0bffa17 	ldw	r2,-24(fp)
 4013004:	10800d03 	ldbu	r2,52(r2)
 4013008:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 401300c:	e0bffa17 	ldw	r2,-24(fp)
 4013010:	10800d83 	ldbu	r2,54(r2)
 4013014:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4013018:	e0bffa17 	ldw	r2,-24(fp)
 401301c:	10800d43 	ldbu	r2,53(r2)
 4013020:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4013024:	e0fff903 	ldbu	r3,-28(fp)
 4013028:	00810174 	movhi	r2,1029
 401302c:	1081b344 	addi	r2,r2,1741
 4013030:	10c5883a 	add	r2,r2,r3
 4013034:	10c00003 	ldbu	r3,0(r2)
 4013038:	e0bff803 	ldbu	r2,-32(fp)
 401303c:	1884703a 	and	r2,r3,r2
 4013040:	10803fcc 	andi	r2,r2,255
 4013044:	1005003a 	cmpeq	r2,r2,zero
 4013048:	1000381e 	bne	r2,zero,401312c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 401304c:	e13ff903 	ldbu	r4,-28(fp)
 4013050:	e0fff903 	ldbu	r3,-28(fp)
 4013054:	00810174 	movhi	r2,1029
 4013058:	1081b344 	addi	r2,r2,1741
 401305c:	10c5883a 	add	r2,r2,r3
 4013060:	10800003 	ldbu	r2,0(r2)
 4013064:	1007883a 	mov	r3,r2
 4013068:	e0bff803 	ldbu	r2,-32(fp)
 401306c:	0084303a 	nor	r2,zero,r2
 4013070:	1884703a 	and	r2,r3,r2
 4013074:	1007883a 	mov	r3,r2
 4013078:	00810174 	movhi	r2,1029
 401307c:	1081b344 	addi	r2,r2,1741
 4013080:	1105883a 	add	r2,r2,r4
 4013084:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4013088:	e0fff903 	ldbu	r3,-28(fp)
 401308c:	00810174 	movhi	r2,1029
 4013090:	1081b344 	addi	r2,r2,1741
 4013094:	10c5883a 	add	r2,r2,r3
 4013098:	10800003 	ldbu	r2,0(r2)
 401309c:	10803fcc 	andi	r2,r2,255
 40130a0:	1004c03a 	cmpne	r2,r2,zero
 40130a4:	10000b1e 	bne	r2,zero,40130d4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 40130a8:	e0bff843 	ldbu	r2,-31(fp)
 40130ac:	0084303a 	nor	r2,zero,r2
 40130b0:	1007883a 	mov	r3,r2
 40130b4:	00810174 	movhi	r2,1029
 40130b8:	1081b304 	addi	r2,r2,1740
 40130bc:	10800003 	ldbu	r2,0(r2)
 40130c0:	1884703a 	and	r2,r3,r2
 40130c4:	1007883a 	mov	r3,r2
 40130c8:	00810174 	movhi	r2,1029
 40130cc:	1081b304 	addi	r2,r2,1740
 40130d0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 40130d4:	00810174 	movhi	r2,1029
 40130d8:	1081b304 	addi	r2,r2,1740
 40130dc:	10c00003 	ldbu	r3,0(r2)
 40130e0:	e0bff8c3 	ldbu	r2,-29(fp)
 40130e4:	1884b03a 	or	r2,r3,r2
 40130e8:	1007883a 	mov	r3,r2
 40130ec:	00810174 	movhi	r2,1029
 40130f0:	1081b304 	addi	r2,r2,1740
 40130f4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 40130f8:	e13ff983 	ldbu	r4,-26(fp)
 40130fc:	e0fff983 	ldbu	r3,-26(fp)
 4013100:	00810174 	movhi	r2,1029
 4013104:	1081b344 	addi	r2,r2,1741
 4013108:	10c5883a 	add	r2,r2,r3
 401310c:	10c00003 	ldbu	r3,0(r2)
 4013110:	e0bff883 	ldbu	r2,-30(fp)
 4013114:	1884b03a 	or	r2,r3,r2
 4013118:	1007883a 	mov	r3,r2
 401311c:	00810174 	movhi	r2,1029
 4013120:	1081b344 	addi	r2,r2,1741
 4013124:	1105883a 	add	r2,r2,r4
 4013128:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 401312c:	e0bffa17 	ldw	r2,-24(fp)
 4013130:	10800717 	ldw	r2,28(r2)
 4013134:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 4013138:	e0bffc17 	ldw	r2,-16(fp)
 401313c:	1005003a 	cmpeq	r2,r2,zero
 4013140:	1000341e 	bne	r2,zero,4013214 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4013144:	e13ff903 	ldbu	r4,-28(fp)
 4013148:	e0fff903 	ldbu	r3,-28(fp)
 401314c:	e0bffc17 	ldw	r2,-16(fp)
 4013150:	1885883a 	add	r2,r3,r2
 4013154:	10800204 	addi	r2,r2,8
 4013158:	108000c3 	ldbu	r2,3(r2)
 401315c:	1007883a 	mov	r3,r2
 4013160:	e0bff803 	ldbu	r2,-32(fp)
 4013164:	0084303a 	nor	r2,zero,r2
 4013168:	1884703a 	and	r2,r3,r2
 401316c:	1007883a 	mov	r3,r2
 4013170:	e0bffc17 	ldw	r2,-16(fp)
 4013174:	2085883a 	add	r2,r4,r2
 4013178:	10800204 	addi	r2,r2,8
 401317c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4013180:	e0fff903 	ldbu	r3,-28(fp)
 4013184:	e0bffc17 	ldw	r2,-16(fp)
 4013188:	1885883a 	add	r2,r3,r2
 401318c:	10800204 	addi	r2,r2,8
 4013190:	108000c3 	ldbu	r2,3(r2)
 4013194:	10803fcc 	andi	r2,r2,255
 4013198:	1004c03a 	cmpne	r2,r2,zero
 401319c:	1000091e 	bne	r2,zero,40131c4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 40131a0:	e0bffc17 	ldw	r2,-16(fp)
 40131a4:	10800283 	ldbu	r2,10(r2)
 40131a8:	1007883a 	mov	r3,r2
 40131ac:	e0bff843 	ldbu	r2,-31(fp)
 40131b0:	0084303a 	nor	r2,zero,r2
 40131b4:	1884703a 	and	r2,r3,r2
 40131b8:	1007883a 	mov	r3,r2
 40131bc:	e0bffc17 	ldw	r2,-16(fp)
 40131c0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 40131c4:	e0bffc17 	ldw	r2,-16(fp)
 40131c8:	10c00283 	ldbu	r3,10(r2)
 40131cc:	e0bff8c3 	ldbu	r2,-29(fp)
 40131d0:	1884b03a 	or	r2,r3,r2
 40131d4:	1007883a 	mov	r3,r2
 40131d8:	e0bffc17 	ldw	r2,-16(fp)
 40131dc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 40131e0:	e13ff983 	ldbu	r4,-26(fp)
 40131e4:	e0fff983 	ldbu	r3,-26(fp)
 40131e8:	e0bffc17 	ldw	r2,-16(fp)
 40131ec:	1885883a 	add	r2,r3,r2
 40131f0:	10800204 	addi	r2,r2,8
 40131f4:	10c000c3 	ldbu	r3,3(r2)
 40131f8:	e0bff883 	ldbu	r2,-30(fp)
 40131fc:	1884b03a 	or	r2,r3,r2
 4013200:	1007883a 	mov	r3,r2
 4013204:	e0bffc17 	ldw	r2,-16(fp)
 4013208:	2085883a 	add	r2,r4,r2
 401320c:	10800204 	addi	r2,r2,8
 4013210:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4013214:	e0bffa17 	ldw	r2,-24(fp)
 4013218:	10800817 	ldw	r2,32(r2)
 401321c:	1005003a 	cmpeq	r2,r2,zero
 4013220:	1000441e 	bne	r2,zero,4013334 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4013224:	e0bffa17 	ldw	r2,-24(fp)
 4013228:	10800817 	ldw	r2,32(r2)
 401322c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 4013230:	e0bffb17 	ldw	r2,-20(fp)
 4013234:	10800017 	ldw	r2,0(r2)
 4013238:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 401323c:	00003a06 	br	4013328 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4013240:	e13ff903 	ldbu	r4,-28(fp)
 4013244:	e0fff903 	ldbu	r3,-28(fp)
 4013248:	e0bffc17 	ldw	r2,-16(fp)
 401324c:	1885883a 	add	r2,r3,r2
 4013250:	10800204 	addi	r2,r2,8
 4013254:	108000c3 	ldbu	r2,3(r2)
 4013258:	1007883a 	mov	r3,r2
 401325c:	e0bff803 	ldbu	r2,-32(fp)
 4013260:	0084303a 	nor	r2,zero,r2
 4013264:	1884703a 	and	r2,r3,r2
 4013268:	1007883a 	mov	r3,r2
 401326c:	e0bffc17 	ldw	r2,-16(fp)
 4013270:	2085883a 	add	r2,r4,r2
 4013274:	10800204 	addi	r2,r2,8
 4013278:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 401327c:	e0fff903 	ldbu	r3,-28(fp)
 4013280:	e0bffc17 	ldw	r2,-16(fp)
 4013284:	1885883a 	add	r2,r3,r2
 4013288:	10800204 	addi	r2,r2,8
 401328c:	108000c3 	ldbu	r2,3(r2)
 4013290:	10803fcc 	andi	r2,r2,255
 4013294:	1004c03a 	cmpne	r2,r2,zero
 4013298:	1000091e 	bne	r2,zero,40132c0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 401329c:	e0bffc17 	ldw	r2,-16(fp)
 40132a0:	10800283 	ldbu	r2,10(r2)
 40132a4:	1007883a 	mov	r3,r2
 40132a8:	e0bff843 	ldbu	r2,-31(fp)
 40132ac:	0084303a 	nor	r2,zero,r2
 40132b0:	1884703a 	and	r2,r3,r2
 40132b4:	1007883a 	mov	r3,r2
 40132b8:	e0bffc17 	ldw	r2,-16(fp)
 40132bc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 40132c0:	e0bffc17 	ldw	r2,-16(fp)
 40132c4:	10c00283 	ldbu	r3,10(r2)
 40132c8:	e0bff8c3 	ldbu	r2,-29(fp)
 40132cc:	1884b03a 	or	r2,r3,r2
 40132d0:	1007883a 	mov	r3,r2
 40132d4:	e0bffc17 	ldw	r2,-16(fp)
 40132d8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 40132dc:	e13ff983 	ldbu	r4,-26(fp)
 40132e0:	e0fff983 	ldbu	r3,-26(fp)
 40132e4:	e0bffc17 	ldw	r2,-16(fp)
 40132e8:	1885883a 	add	r2,r3,r2
 40132ec:	10800204 	addi	r2,r2,8
 40132f0:	10c000c3 	ldbu	r3,3(r2)
 40132f4:	e0bff883 	ldbu	r2,-30(fp)
 40132f8:	1884b03a 	or	r2,r3,r2
 40132fc:	1007883a 	mov	r3,r2
 4013300:	e0bffc17 	ldw	r2,-16(fp)
 4013304:	2085883a 	add	r2,r4,r2
 4013308:	10800204 	addi	r2,r2,8
 401330c:	10c000c5 	stb	r3,3(r2)
            pevents++;
 4013310:	e0bffb17 	ldw	r2,-20(fp)
 4013314:	10800104 	addi	r2,r2,4
 4013318:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 401331c:	e0bffb17 	ldw	r2,-20(fp)
 4013320:	10800017 	ldw	r2,0(r2)
 4013324:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4013328:	e0bffc17 	ldw	r2,-16(fp)
 401332c:	1004c03a 	cmpne	r2,r2,zero
 4013330:	103fc31e 	bne	r2,zero,4013240 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4013334:	e0fffa17 	ldw	r3,-24(fp)
 4013338:	e0bffe03 	ldbu	r2,-8(fp)
 401333c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 4013340:	e0fffa17 	ldw	r3,-24(fp)
 4013344:	e0bff983 	ldbu	r2,-26(fp)
 4013348:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 401334c:	e0fffa17 	ldw	r3,-24(fp)
 4013350:	e0bff943 	ldbu	r2,-27(fp)
 4013354:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 4013358:	e0fffa17 	ldw	r3,-24(fp)
 401335c:	e0bff8c3 	ldbu	r2,-29(fp)
 4013360:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 4013364:	e0fffa17 	ldw	r3,-24(fp)
 4013368:	e0bff883 	ldbu	r2,-30(fp)
 401336c:	18800d45 	stb	r2,53(r3)
 4013370:	e0bff717 	ldw	r2,-36(fp)
 4013374:	e0bff215 	stw	r2,-56(fp)
 4013378:	e0bff217 	ldw	r2,-56(fp)
 401337c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4013380:	00810174 	movhi	r2,1029
 4013384:	1081a744 	addi	r2,r2,1693
 4013388:	10800003 	ldbu	r2,0(r2)
 401338c:	10803fcc 	andi	r2,r2,255
 4013390:	10800058 	cmpnei	r2,r2,1
 4013394:	1000011e 	bne	r2,zero,401339c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 4013398:	400e5900 	call	400e590 <OS_Sched>
    }
    return (OS_ERR_NONE);
 401339c:	e03fff15 	stw	zero,-4(fp)
 40133a0:	e0bfff17 	ldw	r2,-4(fp)
}
 40133a4:	e037883a 	mov	sp,fp
 40133a8:	dfc00117 	ldw	ra,4(sp)
 40133ac:	df000017 	ldw	fp,0(sp)
 40133b0:	dec00204 	addi	sp,sp,8
 40133b4:	f800283a 	ret

040133b8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 40133b8:	deffed04 	addi	sp,sp,-76
 40133bc:	dfc01215 	stw	ra,72(sp)
 40133c0:	df001115 	stw	fp,68(sp)
 40133c4:	df001104 	addi	fp,sp,68
 40133c8:	e13ffb15 	stw	r4,-20(fp)
 40133cc:	e17ffc15 	stw	r5,-16(fp)
 40133d0:	e1bffd15 	stw	r6,-12(fp)
 40133d4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 40133d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40133dc:	e0bffe03 	ldbu	r2,-8(fp)
 40133e0:	10800570 	cmpltui	r2,r2,21
 40133e4:	1000031e 	bne	r2,zero,40133f4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 40133e8:	00800a84 	movi	r2,42
 40133ec:	e0bfff15 	stw	r2,-4(fp)
 40133f0:	00006006 	br	4013574 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40133f4:	0005303a 	rdctl	r2,status
 40133f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40133fc:	e0fff717 	ldw	r3,-36(fp)
 4013400:	00bfff84 	movi	r2,-2
 4013404:	1884703a 	and	r2,r3,r2
 4013408:	1001703a 	wrctl	status,r2
  
  return context;
 401340c:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4013410:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4013414:	00810174 	movhi	r2,1029
 4013418:	1081b504 	addi	r2,r2,1748
 401341c:	10800003 	ldbu	r2,0(r2)
 4013420:	10803fcc 	andi	r2,r2,255
 4013424:	1005003a 	cmpeq	r2,r2,zero
 4013428:	1000071e 	bne	r2,zero,4013448 <OSTaskCreate+0x90>
 401342c:	e0bff817 	ldw	r2,-32(fp)
 4013430:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013434:	e0bff617 	ldw	r2,-40(fp)
 4013438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 401343c:	00800f04 	movi	r2,60
 4013440:	e0bfff15 	stw	r2,-4(fp)
 4013444:	00004b06 	br	4013574 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4013448:	e0bffe03 	ldbu	r2,-8(fp)
 401344c:	00c101b4 	movhi	r3,1030
 4013450:	18e09604 	addi	r3,r3,-32168
 4013454:	1085883a 	add	r2,r2,r2
 4013458:	1085883a 	add	r2,r2,r2
 401345c:	10c5883a 	add	r2,r2,r3
 4013460:	10800017 	ldw	r2,0(r2)
 4013464:	1004c03a 	cmpne	r2,r2,zero
 4013468:	10003c1e 	bne	r2,zero,401355c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 401346c:	e0bffe03 	ldbu	r2,-8(fp)
 4013470:	00c101b4 	movhi	r3,1030
 4013474:	18e09604 	addi	r3,r3,-32168
 4013478:	1085883a 	add	r2,r2,r2
 401347c:	1085883a 	add	r2,r2,r2
 4013480:	10c7883a 	add	r3,r2,r3
 4013484:	00800044 	movi	r2,1
 4013488:	18800015 	stw	r2,0(r3)
 401348c:	e0bff817 	ldw	r2,-32(fp)
 4013490:	e0bff515 	stw	r2,-44(fp)
 4013494:	e0bff517 	ldw	r2,-44(fp)
 4013498:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 401349c:	e13ffb17 	ldw	r4,-20(fp)
 40134a0:	e17ffc17 	ldw	r5,-16(fp)
 40134a4:	e1bffd17 	ldw	r6,-12(fp)
 40134a8:	000f883a 	mov	r7,zero
 40134ac:	40364200 	call	4036420 <OSTaskStkInit>
 40134b0:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 40134b4:	e13ffe03 	ldbu	r4,-8(fp)
 40134b8:	d8000015 	stw	zero,0(sp)
 40134bc:	d8000115 	stw	zero,4(sp)
 40134c0:	d8000215 	stw	zero,8(sp)
 40134c4:	e17ffa17 	ldw	r5,-24(fp)
 40134c8:	000d883a 	mov	r6,zero
 40134cc:	000f883a 	mov	r7,zero
 40134d0:	400e9980 	call	400e998 <OS_TCBInit>
 40134d4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 40134d8:	e0bff903 	ldbu	r2,-28(fp)
 40134dc:	1004c03a 	cmpne	r2,r2,zero
 40134e0:	1000081e 	bne	r2,zero,4013504 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 40134e4:	00810174 	movhi	r2,1029
 40134e8:	1081a744 	addi	r2,r2,1693
 40134ec:	10800003 	ldbu	r2,0(r2)
 40134f0:	10803fcc 	andi	r2,r2,255
 40134f4:	10800058 	cmpnei	r2,r2,1
 40134f8:	1000151e 	bne	r2,zero,4013550 <OSTaskCreate+0x198>
                OS_Sched();
 40134fc:	400e5900 	call	400e590 <OS_Sched>
 4013500:	00001306 	br	4013550 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013504:	0005303a 	rdctl	r2,status
 4013508:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401350c:	e0fff417 	ldw	r3,-48(fp)
 4013510:	00bfff84 	movi	r2,-2
 4013514:	1884703a 	and	r2,r3,r2
 4013518:	1001703a 	wrctl	status,r2
  
  return context;
 401351c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4013520:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 4013524:	e0bffe03 	ldbu	r2,-8(fp)
 4013528:	00c101b4 	movhi	r3,1030
 401352c:	18e09604 	addi	r3,r3,-32168
 4013530:	1085883a 	add	r2,r2,r2
 4013534:	1085883a 	add	r2,r2,r2
 4013538:	10c5883a 	add	r2,r2,r3
 401353c:	10000015 	stw	zero,0(r2)
 4013540:	e0bff817 	ldw	r2,-32(fp)
 4013544:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013548:	e0bff317 	ldw	r2,-52(fp)
 401354c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4013550:	e0bff903 	ldbu	r2,-28(fp)
 4013554:	e0bfff15 	stw	r2,-4(fp)
 4013558:	00000606 	br	4013574 <OSTaskCreate+0x1bc>
 401355c:	e0bff817 	ldw	r2,-32(fp)
 4013560:	e0bff215 	stw	r2,-56(fp)
 4013564:	e0bff217 	ldw	r2,-56(fp)
 4013568:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 401356c:	00800a04 	movi	r2,40
 4013570:	e0bfff15 	stw	r2,-4(fp)
 4013574:	e0bfff17 	ldw	r2,-4(fp)
}
 4013578:	e037883a 	mov	sp,fp
 401357c:	dfc00117 	ldw	ra,4(sp)
 4013580:	df000017 	ldw	fp,0(sp)
 4013584:	dec00204 	addi	sp,sp,8
 4013588:	f800283a 	ret

0401358c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 401358c:	deffeb04 	addi	sp,sp,-84
 4013590:	dfc01415 	stw	ra,80(sp)
 4013594:	df001315 	stw	fp,76(sp)
 4013598:	df001304 	addi	fp,sp,76
 401359c:	e13ff915 	stw	r4,-28(fp)
 40135a0:	e17ffa15 	stw	r5,-24(fp)
 40135a4:	e1bffb15 	stw	r6,-20(fp)
 40135a8:	e0800217 	ldw	r2,8(fp)
 40135ac:	e0c00617 	ldw	r3,24(fp)
 40135b0:	e1fffc05 	stb	r7,-16(fp)
 40135b4:	e0bffd0d 	sth	r2,-12(fp)
 40135b8:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 40135bc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 40135c0:	e0bffc03 	ldbu	r2,-16(fp)
 40135c4:	10800570 	cmpltui	r2,r2,21
 40135c8:	1000031e 	bne	r2,zero,40135d8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 40135cc:	00800a84 	movi	r2,42
 40135d0:	e0bfff15 	stw	r2,-4(fp)
 40135d4:	00006706 	br	4013774 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40135d8:	0005303a 	rdctl	r2,status
 40135dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40135e0:	e0fff517 	ldw	r3,-44(fp)
 40135e4:	00bfff84 	movi	r2,-2
 40135e8:	1884703a 	and	r2,r3,r2
 40135ec:	1001703a 	wrctl	status,r2
  
  return context;
 40135f0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40135f4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 40135f8:	00810174 	movhi	r2,1029
 40135fc:	1081b504 	addi	r2,r2,1748
 4013600:	10800003 	ldbu	r2,0(r2)
 4013604:	10803fcc 	andi	r2,r2,255
 4013608:	1005003a 	cmpeq	r2,r2,zero
 401360c:	1000071e 	bne	r2,zero,401362c <OSTaskCreateExt+0xa0>
 4013610:	e0bff617 	ldw	r2,-40(fp)
 4013614:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013618:	e0bff417 	ldw	r2,-48(fp)
 401361c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4013620:	00800f04 	movi	r2,60
 4013624:	e0bfff15 	stw	r2,-4(fp)
 4013628:	00005206 	br	4013774 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 401362c:	e0bffc03 	ldbu	r2,-16(fp)
 4013630:	00c101b4 	movhi	r3,1030
 4013634:	18e09604 	addi	r3,r3,-32168
 4013638:	1085883a 	add	r2,r2,r2
 401363c:	1085883a 	add	r2,r2,r2
 4013640:	10c5883a 	add	r2,r2,r3
 4013644:	10800017 	ldw	r2,0(r2)
 4013648:	1004c03a 	cmpne	r2,r2,zero
 401364c:	1000431e 	bne	r2,zero,401375c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4013650:	e0bffc03 	ldbu	r2,-16(fp)
 4013654:	00c101b4 	movhi	r3,1030
 4013658:	18e09604 	addi	r3,r3,-32168
 401365c:	1085883a 	add	r2,r2,r2
 4013660:	1085883a 	add	r2,r2,r2
 4013664:	10c7883a 	add	r3,r2,r3
 4013668:	00800044 	movi	r2,1
 401366c:	18800015 	stw	r2,0(r3)
 4013670:	e0bff617 	ldw	r2,-40(fp)
 4013674:	e0bff315 	stw	r2,-52(fp)
 4013678:	e0bff317 	ldw	r2,-52(fp)
 401367c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 4013680:	e1bffe0b 	ldhu	r6,-8(fp)
 4013684:	e1000317 	ldw	r4,12(fp)
 4013688:	e1400417 	ldw	r5,16(fp)
 401368c:	40148080 	call	4014808 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 4013690:	e1fffe0b 	ldhu	r7,-8(fp)
 4013694:	e13ff917 	ldw	r4,-28(fp)
 4013698:	e17ffa17 	ldw	r5,-24(fp)
 401369c:	e1bffb17 	ldw	r6,-20(fp)
 40136a0:	40364200 	call	4036420 <OSTaskStkInit>
 40136a4:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 40136a8:	e13ffc03 	ldbu	r4,-16(fp)
 40136ac:	e1fffd0b 	ldhu	r7,-12(fp)
 40136b0:	e0fffe0b 	ldhu	r3,-8(fp)
 40136b4:	e0800417 	ldw	r2,16(fp)
 40136b8:	d8800015 	stw	r2,0(sp)
 40136bc:	e0800517 	ldw	r2,20(fp)
 40136c0:	d8800115 	stw	r2,4(sp)
 40136c4:	d8c00215 	stw	r3,8(sp)
 40136c8:	e17ff817 	ldw	r5,-32(fp)
 40136cc:	e1800317 	ldw	r6,12(fp)
 40136d0:	400e9980 	call	400e998 <OS_TCBInit>
 40136d4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 40136d8:	e0bff703 	ldbu	r2,-36(fp)
 40136dc:	1004c03a 	cmpne	r2,r2,zero
 40136e0:	1000081e 	bne	r2,zero,4013704 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 40136e4:	00810174 	movhi	r2,1029
 40136e8:	1081a744 	addi	r2,r2,1693
 40136ec:	10800003 	ldbu	r2,0(r2)
 40136f0:	10803fcc 	andi	r2,r2,255
 40136f4:	10800058 	cmpnei	r2,r2,1
 40136f8:	1000151e 	bne	r2,zero,4013750 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 40136fc:	400e5900 	call	400e590 <OS_Sched>
 4013700:	00001306 	br	4013750 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013704:	0005303a 	rdctl	r2,status
 4013708:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401370c:	e0fff217 	ldw	r3,-56(fp)
 4013710:	00bfff84 	movi	r2,-2
 4013714:	1884703a 	and	r2,r3,r2
 4013718:	1001703a 	wrctl	status,r2
  
  return context;
 401371c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4013720:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 4013724:	e0bffc03 	ldbu	r2,-16(fp)
 4013728:	00c101b4 	movhi	r3,1030
 401372c:	18e09604 	addi	r3,r3,-32168
 4013730:	1085883a 	add	r2,r2,r2
 4013734:	1085883a 	add	r2,r2,r2
 4013738:	10c5883a 	add	r2,r2,r3
 401373c:	10000015 	stw	zero,0(r2)
 4013740:	e0bff617 	ldw	r2,-40(fp)
 4013744:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013748:	e0bff117 	ldw	r2,-60(fp)
 401374c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4013750:	e0bff703 	ldbu	r2,-36(fp)
 4013754:	e0bfff15 	stw	r2,-4(fp)
 4013758:	00000606 	br	4013774 <OSTaskCreateExt+0x1e8>
 401375c:	e0bff617 	ldw	r2,-40(fp)
 4013760:	e0bff015 	stw	r2,-64(fp)
 4013764:	e0bff017 	ldw	r2,-64(fp)
 4013768:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 401376c:	00800a04 	movi	r2,40
 4013770:	e0bfff15 	stw	r2,-4(fp)
 4013774:	e0bfff17 	ldw	r2,-4(fp)
}
 4013778:	e037883a 	mov	sp,fp
 401377c:	dfc00117 	ldw	ra,4(sp)
 4013780:	df000017 	ldw	fp,0(sp)
 4013784:	dec00204 	addi	sp,sp,8
 4013788:	f800283a 	ret

0401378c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 401378c:	defff304 	addi	sp,sp,-52
 4013790:	dfc00c15 	stw	ra,48(sp)
 4013794:	df000b15 	stw	fp,44(sp)
 4013798:	df000b04 	addi	fp,sp,44
 401379c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 40137a0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 40137a4:	00810174 	movhi	r2,1029
 40137a8:	1081b504 	addi	r2,r2,1748
 40137ac:	10800003 	ldbu	r2,0(r2)
 40137b0:	10803fcc 	andi	r2,r2,255
 40137b4:	1005003a 	cmpeq	r2,r2,zero
 40137b8:	1000031e 	bne	r2,zero,40137c8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 40137bc:	00801004 	movi	r2,64
 40137c0:	e0bfff15 	stw	r2,-4(fp)
 40137c4:	0000ee06 	br	4013b80 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 40137c8:	e0bffe03 	ldbu	r2,-8(fp)
 40137cc:	10800518 	cmpnei	r2,r2,20
 40137d0:	1000031e 	bne	r2,zero,40137e0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 40137d4:	00800f84 	movi	r2,62
 40137d8:	e0bfff15 	stw	r2,-4(fp)
 40137dc:	0000e806 	br	4013b80 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 40137e0:	e0bffe03 	ldbu	r2,-8(fp)
 40137e4:	10800530 	cmpltui	r2,r2,20
 40137e8:	1000061e 	bne	r2,zero,4013804 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 40137ec:	e0bffe03 	ldbu	r2,-8(fp)
 40137f0:	10803fe0 	cmpeqi	r2,r2,255
 40137f4:	1000031e 	bne	r2,zero,4013804 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 40137f8:	00800a84 	movi	r2,42
 40137fc:	e0bfff15 	stw	r2,-4(fp)
 4013800:	0000df06 	br	4013b80 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013804:	0005303a 	rdctl	r2,status
 4013808:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401380c:	e0fffa17 	ldw	r3,-24(fp)
 4013810:	00bfff84 	movi	r2,-2
 4013814:	1884703a 	and	r2,r3,r2
 4013818:	1001703a 	wrctl	status,r2
  
  return context;
 401381c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4013820:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 4013824:	e0bffe03 	ldbu	r2,-8(fp)
 4013828:	10803fd8 	cmpnei	r2,r2,255
 401382c:	1000051e 	bne	r2,zero,4013844 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 4013830:	00810174 	movhi	r2,1029
 4013834:	1081b604 	addi	r2,r2,1752
 4013838:	10800017 	ldw	r2,0(r2)
 401383c:	10800c83 	ldbu	r2,50(r2)
 4013840:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4013844:	e0bffe03 	ldbu	r2,-8(fp)
 4013848:	00c101b4 	movhi	r3,1030
 401384c:	18e09604 	addi	r3,r3,-32168
 4013850:	1085883a 	add	r2,r2,r2
 4013854:	1085883a 	add	r2,r2,r2
 4013858:	10c5883a 	add	r2,r2,r3
 401385c:	10800017 	ldw	r2,0(r2)
 4013860:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 4013864:	e0bffc17 	ldw	r2,-16(fp)
 4013868:	1004c03a 	cmpne	r2,r2,zero
 401386c:	1000071e 	bne	r2,zero,401388c <OSTaskDel+0x100>
 4013870:	e0bffb17 	ldw	r2,-20(fp)
 4013874:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013878:	e0bff917 	ldw	r2,-28(fp)
 401387c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4013880:	008010c4 	movi	r2,67
 4013884:	e0bfff15 	stw	r2,-4(fp)
 4013888:	0000bd06 	br	4013b80 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 401388c:	e0bffc17 	ldw	r2,-16(fp)
 4013890:	10800058 	cmpnei	r2,r2,1
 4013894:	1000071e 	bne	r2,zero,40138b4 <OSTaskDel+0x128>
 4013898:	e0bffb17 	ldw	r2,-20(fp)
 401389c:	e0bff815 	stw	r2,-32(fp)
 40138a0:	e0bff817 	ldw	r2,-32(fp)
 40138a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 40138a8:	00800f44 	movi	r2,61
 40138ac:	e0bfff15 	stw	r2,-4(fp)
 40138b0:	0000b306 	br	4013b80 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 40138b4:	e0bffc17 	ldw	r2,-16(fp)
 40138b8:	10800d03 	ldbu	r2,52(r2)
 40138bc:	11003fcc 	andi	r4,r2,255
 40138c0:	e0bffc17 	ldw	r2,-16(fp)
 40138c4:	10800d03 	ldbu	r2,52(r2)
 40138c8:	10c03fcc 	andi	r3,r2,255
 40138cc:	00810174 	movhi	r2,1029
 40138d0:	1081b344 	addi	r2,r2,1741
 40138d4:	10c5883a 	add	r2,r2,r3
 40138d8:	10800003 	ldbu	r2,0(r2)
 40138dc:	1007883a 	mov	r3,r2
 40138e0:	e0bffc17 	ldw	r2,-16(fp)
 40138e4:	10800d43 	ldbu	r2,53(r2)
 40138e8:	0084303a 	nor	r2,zero,r2
 40138ec:	1884703a 	and	r2,r3,r2
 40138f0:	1007883a 	mov	r3,r2
 40138f4:	00810174 	movhi	r2,1029
 40138f8:	1081b344 	addi	r2,r2,1741
 40138fc:	1105883a 	add	r2,r2,r4
 4013900:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 4013904:	e0bffc17 	ldw	r2,-16(fp)
 4013908:	10800d03 	ldbu	r2,52(r2)
 401390c:	10c03fcc 	andi	r3,r2,255
 4013910:	00810174 	movhi	r2,1029
 4013914:	1081b344 	addi	r2,r2,1741
 4013918:	10c5883a 	add	r2,r2,r3
 401391c:	10800003 	ldbu	r2,0(r2)
 4013920:	10803fcc 	andi	r2,r2,255
 4013924:	1004c03a 	cmpne	r2,r2,zero
 4013928:	10000c1e 	bne	r2,zero,401395c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 401392c:	e0bffc17 	ldw	r2,-16(fp)
 4013930:	10800d83 	ldbu	r2,54(r2)
 4013934:	0084303a 	nor	r2,zero,r2
 4013938:	1007883a 	mov	r3,r2
 401393c:	00810174 	movhi	r2,1029
 4013940:	1081b304 	addi	r2,r2,1740
 4013944:	10800003 	ldbu	r2,0(r2)
 4013948:	1884703a 	and	r2,r3,r2
 401394c:	1007883a 	mov	r3,r2
 4013950:	00810174 	movhi	r2,1029
 4013954:	1081b304 	addi	r2,r2,1740
 4013958:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 401395c:	e0bffc17 	ldw	r2,-16(fp)
 4013960:	10800717 	ldw	r2,28(r2)
 4013964:	1005003a 	cmpeq	r2,r2,zero
 4013968:	1000041e 	bne	r2,zero,401397c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 401396c:	e0bffc17 	ldw	r2,-16(fp)
 4013970:	11400717 	ldw	r5,28(r2)
 4013974:	e13ffc17 	ldw	r4,-16(fp)
 4013978:	400df480 	call	400df48 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 401397c:	e0bffc17 	ldw	r2,-16(fp)
 4013980:	10800817 	ldw	r2,32(r2)
 4013984:	1005003a 	cmpeq	r2,r2,zero
 4013988:	1000041e 	bne	r2,zero,401399c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 401398c:	e0bffc17 	ldw	r2,-16(fp)
 4013990:	11400817 	ldw	r5,32(r2)
 4013994:	e13ffc17 	ldw	r4,-16(fp)
 4013998:	400e0000 	call	400e000 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 401399c:	e0bffc17 	ldw	r2,-16(fp)
 40139a0:	10800a17 	ldw	r2,40(r2)
 40139a4:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 40139a8:	e0bffd17 	ldw	r2,-12(fp)
 40139ac:	1005003a 	cmpeq	r2,r2,zero
 40139b0:	1000021e 	bne	r2,zero,40139bc <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 40139b4:	e13ffd17 	ldw	r4,-12(fp)
 40139b8:	40106940 	call	4010694 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 40139bc:	e0bffc17 	ldw	r2,-16(fp)
 40139c0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 40139c4:	e0bffc17 	ldw	r2,-16(fp)
 40139c8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 40139cc:	e0bffc17 	ldw	r2,-16(fp)
 40139d0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 40139d4:	00810174 	movhi	r2,1029
 40139d8:	1081a704 	addi	r2,r2,1692
 40139dc:	10800003 	ldbu	r2,0(r2)
 40139e0:	10803fcc 	andi	r2,r2,255
 40139e4:	10803fe0 	cmpeqi	r2,r2,255
 40139e8:	1000081e 	bne	r2,zero,4013a0c <OSTaskDel+0x280>
        OSLockNesting++;
 40139ec:	00810174 	movhi	r2,1029
 40139f0:	1081a704 	addi	r2,r2,1692
 40139f4:	10800003 	ldbu	r2,0(r2)
 40139f8:	10800044 	addi	r2,r2,1
 40139fc:	1007883a 	mov	r3,r2
 4013a00:	00810174 	movhi	r2,1029
 4013a04:	1081a704 	addi	r2,r2,1692
 4013a08:	10c00005 	stb	r3,0(r2)
 4013a0c:	e0bffb17 	ldw	r2,-20(fp)
 4013a10:	e0bff715 	stw	r2,-36(fp)
 4013a14:	e0bff717 	ldw	r2,-36(fp)
 4013a18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 4013a1c:	400db340 	call	400db34 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013a20:	0005303a 	rdctl	r2,status
 4013a24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013a28:	e0fff617 	ldw	r3,-40(fp)
 4013a2c:	00bfff84 	movi	r2,-2
 4013a30:	1884703a 	and	r2,r3,r2
 4013a34:	1001703a 	wrctl	status,r2
  
  return context;
 4013a38:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 4013a3c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4013a40:	00810174 	movhi	r2,1029
 4013a44:	1081a704 	addi	r2,r2,1692
 4013a48:	10800003 	ldbu	r2,0(r2)
 4013a4c:	10803fcc 	andi	r2,r2,255
 4013a50:	1005003a 	cmpeq	r2,r2,zero
 4013a54:	1000081e 	bne	r2,zero,4013a78 <OSTaskDel+0x2ec>
        OSLockNesting--;
 4013a58:	00810174 	movhi	r2,1029
 4013a5c:	1081a704 	addi	r2,r2,1692
 4013a60:	10800003 	ldbu	r2,0(r2)
 4013a64:	10bfffc4 	addi	r2,r2,-1
 4013a68:	1007883a 	mov	r3,r2
 4013a6c:	00810174 	movhi	r2,1029
 4013a70:	1081a704 	addi	r2,r2,1692
 4013a74:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 4013a78:	e13ffc17 	ldw	r4,-16(fp)
 4013a7c:	40367500 	call	4036750 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 4013a80:	00810174 	movhi	r2,1029
 4013a84:	1081af44 	addi	r2,r2,1725
 4013a88:	10800003 	ldbu	r2,0(r2)
 4013a8c:	10bfffc4 	addi	r2,r2,-1
 4013a90:	1007883a 	mov	r3,r2
 4013a94:	00810174 	movhi	r2,1029
 4013a98:	1081af44 	addi	r2,r2,1725
 4013a9c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 4013aa0:	e0bffe03 	ldbu	r2,-8(fp)
 4013aa4:	00c101b4 	movhi	r3,1030
 4013aa8:	18e09604 	addi	r3,r3,-32168
 4013aac:	1085883a 	add	r2,r2,r2
 4013ab0:	1085883a 	add	r2,r2,r2
 4013ab4:	10c5883a 	add	r2,r2,r3
 4013ab8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 4013abc:	e0bffc17 	ldw	r2,-16(fp)
 4013ac0:	10800617 	ldw	r2,24(r2)
 4013ac4:	1004c03a 	cmpne	r2,r2,zero
 4013ac8:	1000091e 	bne	r2,zero,4013af0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 4013acc:	e0bffc17 	ldw	r2,-16(fp)
 4013ad0:	10800517 	ldw	r2,20(r2)
 4013ad4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 4013ad8:	e0bffc17 	ldw	r2,-16(fp)
 4013adc:	10c00517 	ldw	r3,20(r2)
 4013ae0:	00810174 	movhi	r2,1029
 4013ae4:	1081aa04 	addi	r2,r2,1704
 4013ae8:	10c00015 	stw	r3,0(r2)
 4013aec:	00000a06 	br	4013b18 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4013af0:	e0bffc17 	ldw	r2,-16(fp)
 4013af4:	10c00617 	ldw	r3,24(r2)
 4013af8:	e0bffc17 	ldw	r2,-16(fp)
 4013afc:	10800517 	ldw	r2,20(r2)
 4013b00:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 4013b04:	e0bffc17 	ldw	r2,-16(fp)
 4013b08:	10c00517 	ldw	r3,20(r2)
 4013b0c:	e0bffc17 	ldw	r2,-16(fp)
 4013b10:	10800617 	ldw	r2,24(r2)
 4013b14:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 4013b18:	00810174 	movhi	r2,1029
 4013b1c:	1081ae04 	addi	r2,r2,1720
 4013b20:	10c00017 	ldw	r3,0(r2)
 4013b24:	e0bffc17 	ldw	r2,-16(fp)
 4013b28:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 4013b2c:	00c10174 	movhi	r3,1029
 4013b30:	18c1ae04 	addi	r3,r3,1720
 4013b34:	e0bffc17 	ldw	r2,-16(fp)
 4013b38:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 4013b3c:	e0fffc17 	ldw	r3,-16(fp)
 4013b40:	00800fc4 	movi	r2,63
 4013b44:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4013b48:	e0bffc17 	ldw	r2,-16(fp)
 4013b4c:	10001345 	stb	zero,77(r2)
 4013b50:	e0bffb17 	ldw	r2,-20(fp)
 4013b54:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013b58:	e0bff517 	ldw	r2,-44(fp)
 4013b5c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4013b60:	00810174 	movhi	r2,1029
 4013b64:	1081a744 	addi	r2,r2,1693
 4013b68:	10800003 	ldbu	r2,0(r2)
 4013b6c:	10803fcc 	andi	r2,r2,255
 4013b70:	10800058 	cmpnei	r2,r2,1
 4013b74:	1000011e 	bne	r2,zero,4013b7c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 4013b78:	400e5900 	call	400e590 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4013b7c:	e03fff15 	stw	zero,-4(fp)
 4013b80:	e0bfff17 	ldw	r2,-4(fp)
}
 4013b84:	e037883a 	mov	sp,fp
 4013b88:	dfc00117 	ldw	ra,4(sp)
 4013b8c:	df000017 	ldw	fp,0(sp)
 4013b90:	dec00204 	addi	sp,sp,8
 4013b94:	f800283a 	ret

04013b98 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 4013b98:	defff404 	addi	sp,sp,-48
 4013b9c:	df000b15 	stw	fp,44(sp)
 4013ba0:	df000b04 	addi	fp,sp,44
 4013ba4:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4013ba8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 4013bac:	e0bffe03 	ldbu	r2,-8(fp)
 4013bb0:	10800518 	cmpnei	r2,r2,20
 4013bb4:	1000031e 	bne	r2,zero,4013bc4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 4013bb8:	00800f84 	movi	r2,62
 4013bbc:	e0bfff15 	stw	r2,-4(fp)
 4013bc0:	00004c06 	br	4013cf4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4013bc4:	e0bffe03 	ldbu	r2,-8(fp)
 4013bc8:	10800530 	cmpltui	r2,r2,20
 4013bcc:	1000061e 	bne	r2,zero,4013be8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 4013bd0:	e0bffe03 	ldbu	r2,-8(fp)
 4013bd4:	10803fe0 	cmpeqi	r2,r2,255
 4013bd8:	1000031e 	bne	r2,zero,4013be8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 4013bdc:	00800a84 	movi	r2,42
 4013be0:	e0bfff15 	stw	r2,-4(fp)
 4013be4:	00004306 	br	4013cf4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 4013be8:	e0bffe03 	ldbu	r2,-8(fp)
 4013bec:	10803fd8 	cmpnei	r2,r2,255
 4013bf0:	1000141e 	bne	r2,zero,4013c44 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013bf4:	0005303a 	rdctl	r2,status
 4013bf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013bfc:	e0fffa17 	ldw	r3,-24(fp)
 4013c00:	00bfff84 	movi	r2,-2
 4013c04:	1884703a 	and	r2,r3,r2
 4013c08:	1001703a 	wrctl	status,r2
  
  return context;
 4013c0c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 4013c10:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 4013c14:	00810174 	movhi	r2,1029
 4013c18:	1081b604 	addi	r2,r2,1752
 4013c1c:	10800017 	ldw	r2,0(r2)
 4013c20:	10800dc3 	ldbu	r2,55(r2)
 4013c24:	e0bffd05 	stb	r2,-12(fp)
 4013c28:	e0bffb17 	ldw	r2,-20(fp)
 4013c2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013c30:	e0bff917 	ldw	r2,-28(fp)
 4013c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 4013c38:	e0bffd03 	ldbu	r2,-12(fp)
 4013c3c:	e0bfff15 	stw	r2,-4(fp)
 4013c40:	00002c06 	br	4013cf4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013c44:	0005303a 	rdctl	r2,status
 4013c48:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013c4c:	e0fff817 	ldw	r3,-32(fp)
 4013c50:	00bfff84 	movi	r2,-2
 4013c54:	1884703a 	and	r2,r3,r2
 4013c58:	1001703a 	wrctl	status,r2
  
  return context;
 4013c5c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4013c60:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 4013c64:	e0bffe03 	ldbu	r2,-8(fp)
 4013c68:	00c101b4 	movhi	r3,1030
 4013c6c:	18e09604 	addi	r3,r3,-32168
 4013c70:	1085883a 	add	r2,r2,r2
 4013c74:	1085883a 	add	r2,r2,r2
 4013c78:	10c5883a 	add	r2,r2,r3
 4013c7c:	10800017 	ldw	r2,0(r2)
 4013c80:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 4013c84:	e0bffc17 	ldw	r2,-16(fp)
 4013c88:	1004c03a 	cmpne	r2,r2,zero
 4013c8c:	1000071e 	bne	r2,zero,4013cac <OSTaskDelReq+0x114>
 4013c90:	e0bffb17 	ldw	r2,-20(fp)
 4013c94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013c98:	e0bff717 	ldw	r2,-36(fp)
 4013c9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 4013ca0:	008010c4 	movi	r2,67
 4013ca4:	e0bfff15 	stw	r2,-4(fp)
 4013ca8:	00001206 	br	4013cf4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 4013cac:	e0bffc17 	ldw	r2,-16(fp)
 4013cb0:	10800058 	cmpnei	r2,r2,1
 4013cb4:	1000071e 	bne	r2,zero,4013cd4 <OSTaskDelReq+0x13c>
 4013cb8:	e0bffb17 	ldw	r2,-20(fp)
 4013cbc:	e0bff615 	stw	r2,-40(fp)
 4013cc0:	e0bff617 	ldw	r2,-40(fp)
 4013cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4013cc8:	00800f44 	movi	r2,61
 4013ccc:	e0bfff15 	stw	r2,-4(fp)
 4013cd0:	00000806 	br	4013cf4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 4013cd4:	e0fffc17 	ldw	r3,-16(fp)
 4013cd8:	00800fc4 	movi	r2,63
 4013cdc:	18800dc5 	stb	r2,55(r3)
 4013ce0:	e0bffb17 	ldw	r2,-20(fp)
 4013ce4:	e0bff515 	stw	r2,-44(fp)
 4013ce8:	e0bff517 	ldw	r2,-44(fp)
 4013cec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4013cf0:	e03fff15 	stw	zero,-4(fp)
 4013cf4:	e0bfff17 	ldw	r2,-4(fp)
}
 4013cf8:	e037883a 	mov	sp,fp
 4013cfc:	df000017 	ldw	fp,0(sp)
 4013d00:	dec00104 	addi	sp,sp,4
 4013d04:	f800283a 	ret

04013d08 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4013d08:	defff304 	addi	sp,sp,-52
 4013d0c:	dfc00c15 	stw	ra,48(sp)
 4013d10:	df000b15 	stw	fp,44(sp)
 4013d14:	df000b04 	addi	fp,sp,44
 4013d18:	e17ffd15 	stw	r5,-12(fp)
 4013d1c:	e1bffe15 	stw	r6,-8(fp)
 4013d20:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 4013d24:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4013d28:	e0bffe17 	ldw	r2,-8(fp)
 4013d2c:	1004c03a 	cmpne	r2,r2,zero
 4013d30:	1000021e 	bne	r2,zero,4013d3c <OSTaskNameGet+0x34>
        return (0);
 4013d34:	e03fff15 	stw	zero,-4(fp)
 4013d38:	00005b06 	br	4013ea8 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 4013d3c:	e0bffc03 	ldbu	r2,-16(fp)
 4013d40:	10800570 	cmpltui	r2,r2,21
 4013d44:	1000081e 	bne	r2,zero,4013d68 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 4013d48:	e0bffc03 	ldbu	r2,-16(fp)
 4013d4c:	10803fe0 	cmpeqi	r2,r2,255
 4013d50:	1000051e 	bne	r2,zero,4013d68 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 4013d54:	e0fffe17 	ldw	r3,-8(fp)
 4013d58:	00800a84 	movi	r2,42
 4013d5c:	18800005 	stb	r2,0(r3)
            return (0);
 4013d60:	e03fff15 	stw	zero,-4(fp)
 4013d64:	00005006 	br	4013ea8 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 4013d68:	e0bffd17 	ldw	r2,-12(fp)
 4013d6c:	1004c03a 	cmpne	r2,r2,zero
 4013d70:	1000051e 	bne	r2,zero,4013d88 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 4013d74:	e0fffe17 	ldw	r3,-8(fp)
 4013d78:	00800304 	movi	r2,12
 4013d7c:	18800005 	stb	r2,0(r3)
        return (0);
 4013d80:	e03fff15 	stw	zero,-4(fp)
 4013d84:	00004806 	br	4013ea8 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 4013d88:	00810174 	movhi	r2,1029
 4013d8c:	1081b504 	addi	r2,r2,1748
 4013d90:	10800003 	ldbu	r2,0(r2)
 4013d94:	10803fcc 	andi	r2,r2,255
 4013d98:	1005003a 	cmpeq	r2,r2,zero
 4013d9c:	1000051e 	bne	r2,zero,4013db4 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 4013da0:	e0fffe17 	ldw	r3,-8(fp)
 4013da4:	00800444 	movi	r2,17
 4013da8:	18800005 	stb	r2,0(r3)
        return (0);
 4013dac:	e03fff15 	stw	zero,-4(fp)
 4013db0:	00003d06 	br	4013ea8 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013db4:	0005303a 	rdctl	r2,status
 4013db8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013dbc:	e0fff817 	ldw	r3,-32(fp)
 4013dc0:	00bfff84 	movi	r2,-2
 4013dc4:	1884703a 	and	r2,r3,r2
 4013dc8:	1001703a 	wrctl	status,r2
  
  return context;
 4013dcc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 4013dd0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 4013dd4:	e0bffc03 	ldbu	r2,-16(fp)
 4013dd8:	10803fd8 	cmpnei	r2,r2,255
 4013ddc:	1000051e 	bne	r2,zero,4013df4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 4013de0:	00810174 	movhi	r2,1029
 4013de4:	1081b604 	addi	r2,r2,1752
 4013de8:	10800017 	ldw	r2,0(r2)
 4013dec:	10800c83 	ldbu	r2,50(r2)
 4013df0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4013df4:	e0bffc03 	ldbu	r2,-16(fp)
 4013df8:	00c101b4 	movhi	r3,1030
 4013dfc:	18e09604 	addi	r3,r3,-32168
 4013e00:	1085883a 	add	r2,r2,r2
 4013e04:	1085883a 	add	r2,r2,r2
 4013e08:	10c5883a 	add	r2,r2,r3
 4013e0c:	10800017 	ldw	r2,0(r2)
 4013e10:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 4013e14:	e0bffb17 	ldw	r2,-20(fp)
 4013e18:	1004c03a 	cmpne	r2,r2,zero
 4013e1c:	1000091e 	bne	r2,zero,4013e44 <OSTaskNameGet+0x13c>
 4013e20:	e0bff917 	ldw	r2,-28(fp)
 4013e24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013e28:	e0bff717 	ldw	r2,-36(fp)
 4013e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4013e30:	e0fffe17 	ldw	r3,-8(fp)
 4013e34:	008010c4 	movi	r2,67
 4013e38:	18800005 	stb	r2,0(r3)
        return (0);
 4013e3c:	e03fff15 	stw	zero,-4(fp)
 4013e40:	00001906 	br	4013ea8 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4013e44:	e0bffb17 	ldw	r2,-20(fp)
 4013e48:	10800058 	cmpnei	r2,r2,1
 4013e4c:	1000091e 	bne	r2,zero,4013e74 <OSTaskNameGet+0x16c>
 4013e50:	e0bff917 	ldw	r2,-28(fp)
 4013e54:	e0bff615 	stw	r2,-40(fp)
 4013e58:	e0bff617 	ldw	r2,-40(fp)
 4013e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4013e60:	e0fffe17 	ldw	r3,-8(fp)
 4013e64:	008010c4 	movi	r2,67
 4013e68:	18800005 	stb	r2,0(r3)
        return (0);
 4013e6c:	e03fff15 	stw	zero,-4(fp)
 4013e70:	00000d06 	br	4013ea8 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 4013e74:	e0bffb17 	ldw	r2,-20(fp)
 4013e78:	11401304 	addi	r5,r2,76
 4013e7c:	e13ffd17 	ldw	r4,-12(fp)
 4013e80:	400e6d40 	call	400e6d4 <OS_StrCopy>
 4013e84:	e0bffa05 	stb	r2,-24(fp)
 4013e88:	e0bff917 	ldw	r2,-28(fp)
 4013e8c:	e0bff515 	stw	r2,-44(fp)
 4013e90:	e0bff517 	ldw	r2,-44(fp)
 4013e94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4013e98:	e0bffe17 	ldw	r2,-8(fp)
 4013e9c:	10000005 	stb	zero,0(r2)
    return (len);
 4013ea0:	e0bffa03 	ldbu	r2,-24(fp)
 4013ea4:	e0bfff15 	stw	r2,-4(fp)
 4013ea8:	e0bfff17 	ldw	r2,-4(fp)
}
 4013eac:	e037883a 	mov	sp,fp
 4013eb0:	dfc00117 	ldw	ra,4(sp)
 4013eb4:	df000017 	ldw	fp,0(sp)
 4013eb8:	dec00204 	addi	sp,sp,8
 4013ebc:	f800283a 	ret

04013ec0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4013ec0:	defff304 	addi	sp,sp,-52
 4013ec4:	dfc00c15 	stw	ra,48(sp)
 4013ec8:	df000b15 	stw	fp,44(sp)
 4013ecc:	df000b04 	addi	fp,sp,44
 4013ed0:	e17ffe15 	stw	r5,-8(fp)
 4013ed4:	e1bfff15 	stw	r6,-4(fp)
 4013ed8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4013edc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4013ee0:	e0bfff17 	ldw	r2,-4(fp)
 4013ee4:	1005003a 	cmpeq	r2,r2,zero
 4013ee8:	1000611e 	bne	r2,zero,4014070 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 4013eec:	e0bffd03 	ldbu	r2,-12(fp)
 4013ef0:	10800570 	cmpltui	r2,r2,21
 4013ef4:	1000071e 	bne	r2,zero,4013f14 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 4013ef8:	e0bffd03 	ldbu	r2,-12(fp)
 4013efc:	10803fe0 	cmpeqi	r2,r2,255
 4013f00:	1000041e 	bne	r2,zero,4013f14 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 4013f04:	e0ffff17 	ldw	r3,-4(fp)
 4013f08:	00800a84 	movi	r2,42
 4013f0c:	18800005 	stb	r2,0(r3)
            return;
 4013f10:	00005706 	br	4014070 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 4013f14:	e0bffe17 	ldw	r2,-8(fp)
 4013f18:	1004c03a 	cmpne	r2,r2,zero
 4013f1c:	1000041e 	bne	r2,zero,4013f30 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 4013f20:	e0ffff17 	ldw	r3,-4(fp)
 4013f24:	00800304 	movi	r2,12
 4013f28:	18800005 	stb	r2,0(r3)
        return;
 4013f2c:	00005006 	br	4014070 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 4013f30:	00810174 	movhi	r2,1029
 4013f34:	1081b504 	addi	r2,r2,1748
 4013f38:	10800003 	ldbu	r2,0(r2)
 4013f3c:	10803fcc 	andi	r2,r2,255
 4013f40:	1005003a 	cmpeq	r2,r2,zero
 4013f44:	1000041e 	bne	r2,zero,4013f58 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 4013f48:	e0ffff17 	ldw	r3,-4(fp)
 4013f4c:	00800484 	movi	r2,18
 4013f50:	18800005 	stb	r2,0(r3)
        return;
 4013f54:	00004606 	br	4014070 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013f58:	0005303a 	rdctl	r2,status
 4013f5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013f60:	e0fff917 	ldw	r3,-28(fp)
 4013f64:	00bfff84 	movi	r2,-2
 4013f68:	1884703a 	and	r2,r3,r2
 4013f6c:	1001703a 	wrctl	status,r2
  
  return context;
 4013f70:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 4013f74:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 4013f78:	e0bffd03 	ldbu	r2,-12(fp)
 4013f7c:	10803fd8 	cmpnei	r2,r2,255
 4013f80:	1000051e 	bne	r2,zero,4013f98 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 4013f84:	00810174 	movhi	r2,1029
 4013f88:	1081b604 	addi	r2,r2,1752
 4013f8c:	10800017 	ldw	r2,0(r2)
 4013f90:	10800c83 	ldbu	r2,50(r2)
 4013f94:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4013f98:	e0bffd03 	ldbu	r2,-12(fp)
 4013f9c:	00c101b4 	movhi	r3,1030
 4013fa0:	18e09604 	addi	r3,r3,-32168
 4013fa4:	1085883a 	add	r2,r2,r2
 4013fa8:	1085883a 	add	r2,r2,r2
 4013fac:	10c5883a 	add	r2,r2,r3
 4013fb0:	10800017 	ldw	r2,0(r2)
 4013fb4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 4013fb8:	e0bffb17 	ldw	r2,-20(fp)
 4013fbc:	1004c03a 	cmpne	r2,r2,zero
 4013fc0:	1000081e 	bne	r2,zero,4013fe4 <OSTaskNameSet+0x124>
 4013fc4:	e0bffa17 	ldw	r2,-24(fp)
 4013fc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013fcc:	e0bff817 	ldw	r2,-32(fp)
 4013fd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4013fd4:	e0ffff17 	ldw	r3,-4(fp)
 4013fd8:	008010c4 	movi	r2,67
 4013fdc:	18800005 	stb	r2,0(r3)
        return;
 4013fe0:	00002306 	br	4014070 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 4013fe4:	e0bffb17 	ldw	r2,-20(fp)
 4013fe8:	10800058 	cmpnei	r2,r2,1
 4013fec:	1000081e 	bne	r2,zero,4014010 <OSTaskNameSet+0x150>
 4013ff0:	e0bffa17 	ldw	r2,-24(fp)
 4013ff4:	e0bff715 	stw	r2,-36(fp)
 4013ff8:	e0bff717 	ldw	r2,-36(fp)
 4013ffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4014000:	e0ffff17 	ldw	r3,-4(fp)
 4014004:	008010c4 	movi	r2,67
 4014008:	18800005 	stb	r2,0(r3)
        return;
 401400c:	00001806 	br	4014070 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 4014010:	e13ffe17 	ldw	r4,-8(fp)
 4014014:	400e7540 	call	400e754 <OS_StrLen>
 4014018:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 401401c:	e0bffc03 	ldbu	r2,-16(fp)
 4014020:	10800830 	cmpltui	r2,r2,32
 4014024:	1000081e 	bne	r2,zero,4014048 <OSTaskNameSet+0x188>
 4014028:	e0bffa17 	ldw	r2,-24(fp)
 401402c:	e0bff615 	stw	r2,-40(fp)
 4014030:	e0bff617 	ldw	r2,-40(fp)
 4014034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 4014038:	e0ffff17 	ldw	r3,-4(fp)
 401403c:	00801044 	movi	r2,65
 4014040:	18800005 	stb	r2,0(r3)
        return;
 4014044:	00000a06 	br	4014070 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 4014048:	e0bffb17 	ldw	r2,-20(fp)
 401404c:	11001304 	addi	r4,r2,76
 4014050:	e17ffe17 	ldw	r5,-8(fp)
 4014054:	400e6d40 	call	400e6d4 <OS_StrCopy>
 4014058:	e0bffa17 	ldw	r2,-24(fp)
 401405c:	e0bff515 	stw	r2,-44(fp)
 4014060:	e0bff517 	ldw	r2,-44(fp)
 4014064:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4014068:	e0bfff17 	ldw	r2,-4(fp)
 401406c:	10000005 	stb	zero,0(r2)
}
 4014070:	e037883a 	mov	sp,fp
 4014074:	dfc00117 	ldw	ra,4(sp)
 4014078:	df000017 	ldw	fp,0(sp)
 401407c:	dec00204 	addi	sp,sp,8
 4014080:	f800283a 	ret

04014084 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 4014084:	defff304 	addi	sp,sp,-52
 4014088:	dfc00c15 	stw	ra,48(sp)
 401408c:	df000b15 	stw	fp,44(sp)
 4014090:	df000b04 	addi	fp,sp,44
 4014094:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4014098:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 401409c:	e0bffe03 	ldbu	r2,-8(fp)
 40140a0:	10800530 	cmpltui	r2,r2,20
 40140a4:	1000031e 	bne	r2,zero,40140b4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 40140a8:	00800a84 	movi	r2,42
 40140ac:	e0bfff15 	stw	r2,-4(fp)
 40140b0:	00007406 	br	4014284 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40140b4:	0005303a 	rdctl	r2,status
 40140b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40140bc:	e0fffb17 	ldw	r3,-20(fp)
 40140c0:	00bfff84 	movi	r2,-2
 40140c4:	1884703a 	and	r2,r3,r2
 40140c8:	1001703a 	wrctl	status,r2
  
  return context;
 40140cc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40140d0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 40140d4:	e0bffe03 	ldbu	r2,-8(fp)
 40140d8:	00c101b4 	movhi	r3,1030
 40140dc:	18e09604 	addi	r3,r3,-32168
 40140e0:	1085883a 	add	r2,r2,r2
 40140e4:	1085883a 	add	r2,r2,r2
 40140e8:	10c5883a 	add	r2,r2,r3
 40140ec:	10800017 	ldw	r2,0(r2)
 40140f0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 40140f4:	e0bffd17 	ldw	r2,-12(fp)
 40140f8:	1004c03a 	cmpne	r2,r2,zero
 40140fc:	1000071e 	bne	r2,zero,401411c <OSTaskResume+0x98>
 4014100:	e0bffc17 	ldw	r2,-16(fp)
 4014104:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014108:	e0bffa17 	ldw	r2,-24(fp)
 401410c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 4014110:	00801184 	movi	r2,70
 4014114:	e0bfff15 	stw	r2,-4(fp)
 4014118:	00005a06 	br	4014284 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 401411c:	e0bffd17 	ldw	r2,-12(fp)
 4014120:	10800058 	cmpnei	r2,r2,1
 4014124:	1000071e 	bne	r2,zero,4014144 <OSTaskResume+0xc0>
 4014128:	e0bffc17 	ldw	r2,-16(fp)
 401412c:	e0bff915 	stw	r2,-28(fp)
 4014130:	e0bff917 	ldw	r2,-28(fp)
 4014134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4014138:	008010c4 	movi	r2,67
 401413c:	e0bfff15 	stw	r2,-4(fp)
 4014140:	00005006 	br	4014284 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 4014144:	e0bffd17 	ldw	r2,-12(fp)
 4014148:	10800c03 	ldbu	r2,48(r2)
 401414c:	10803fcc 	andi	r2,r2,255
 4014150:	1080020c 	andi	r2,r2,8
 4014154:	1005003a 	cmpeq	r2,r2,zero
 4014158:	1000441e 	bne	r2,zero,401426c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 401415c:	e0bffd17 	ldw	r2,-12(fp)
 4014160:	10c00c03 	ldbu	r3,48(r2)
 4014164:	00bffdc4 	movi	r2,-9
 4014168:	1884703a 	and	r2,r3,r2
 401416c:	1007883a 	mov	r3,r2
 4014170:	e0bffd17 	ldw	r2,-12(fp)
 4014174:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4014178:	e0bffd17 	ldw	r2,-12(fp)
 401417c:	10800c03 	ldbu	r2,48(r2)
 4014180:	10803fcc 	andi	r2,r2,255
 4014184:	1004c03a 	cmpne	r2,r2,zero
 4014188:	1000321e 	bne	r2,zero,4014254 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 401418c:	e0bffd17 	ldw	r2,-12(fp)
 4014190:	10800b8b 	ldhu	r2,46(r2)
 4014194:	10bfffcc 	andi	r2,r2,65535
 4014198:	1004c03a 	cmpne	r2,r2,zero
 401419c:	1000281e 	bne	r2,zero,4014240 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 40141a0:	e0bffd17 	ldw	r2,-12(fp)
 40141a4:	10c00d83 	ldbu	r3,54(r2)
 40141a8:	00810174 	movhi	r2,1029
 40141ac:	1081b304 	addi	r2,r2,1740
 40141b0:	10800003 	ldbu	r2,0(r2)
 40141b4:	1884b03a 	or	r2,r3,r2
 40141b8:	1007883a 	mov	r3,r2
 40141bc:	00810174 	movhi	r2,1029
 40141c0:	1081b304 	addi	r2,r2,1740
 40141c4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40141c8:	e0bffd17 	ldw	r2,-12(fp)
 40141cc:	10800d03 	ldbu	r2,52(r2)
 40141d0:	11003fcc 	andi	r4,r2,255
 40141d4:	e0bffd17 	ldw	r2,-12(fp)
 40141d8:	10800d03 	ldbu	r2,52(r2)
 40141dc:	10c03fcc 	andi	r3,r2,255
 40141e0:	00810174 	movhi	r2,1029
 40141e4:	1081b344 	addi	r2,r2,1741
 40141e8:	10c5883a 	add	r2,r2,r3
 40141ec:	10c00003 	ldbu	r3,0(r2)
 40141f0:	e0bffd17 	ldw	r2,-12(fp)
 40141f4:	10800d43 	ldbu	r2,53(r2)
 40141f8:	1884b03a 	or	r2,r3,r2
 40141fc:	1007883a 	mov	r3,r2
 4014200:	00810174 	movhi	r2,1029
 4014204:	1081b344 	addi	r2,r2,1741
 4014208:	1105883a 	add	r2,r2,r4
 401420c:	10c00005 	stb	r3,0(r2)
 4014210:	e0bffc17 	ldw	r2,-16(fp)
 4014214:	e0bff815 	stw	r2,-32(fp)
 4014218:	e0bff817 	ldw	r2,-32(fp)
 401421c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 4014220:	00810174 	movhi	r2,1029
 4014224:	1081a744 	addi	r2,r2,1693
 4014228:	10800003 	ldbu	r2,0(r2)
 401422c:	10803fcc 	andi	r2,r2,255
 4014230:	10800058 	cmpnei	r2,r2,1
 4014234:	10000b1e 	bne	r2,zero,4014264 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 4014238:	400e5900 	call	400e590 <OS_Sched>
 401423c:	00000906 	br	4014264 <OSTaskResume+0x1e0>
 4014240:	e0bffc17 	ldw	r2,-16(fp)
 4014244:	e0bff715 	stw	r2,-36(fp)
 4014248:	e0bff717 	ldw	r2,-36(fp)
 401424c:	1001703a 	wrctl	status,r2
 4014250:	00000406 	br	4014264 <OSTaskResume+0x1e0>
 4014254:	e0bffc17 	ldw	r2,-16(fp)
 4014258:	e0bff615 	stw	r2,-40(fp)
 401425c:	e0bff617 	ldw	r2,-40(fp)
 4014260:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 4014264:	e03fff15 	stw	zero,-4(fp)
 4014268:	00000606 	br	4014284 <OSTaskResume+0x200>
 401426c:	e0bffc17 	ldw	r2,-16(fp)
 4014270:	e0bff515 	stw	r2,-44(fp)
 4014274:	e0bff517 	ldw	r2,-44(fp)
 4014278:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 401427c:	00801104 	movi	r2,68
 4014280:	e0bfff15 	stw	r2,-4(fp)
 4014284:	e0bfff17 	ldw	r2,-4(fp)
}
 4014288:	e037883a 	mov	sp,fp
 401428c:	dfc00117 	ldw	ra,4(sp)
 4014290:	df000017 	ldw	fp,0(sp)
 4014294:	dec00204 	addi	sp,sp,8
 4014298:	f800283a 	ret

0401429c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 401429c:	defff204 	addi	sp,sp,-56
 40142a0:	df000d15 	stw	fp,52(sp)
 40142a4:	df000d04 	addi	fp,sp,52
 40142a8:	e17ffe15 	stw	r5,-8(fp)
 40142ac:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 40142b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 40142b4:	e0bffd03 	ldbu	r2,-12(fp)
 40142b8:	10800570 	cmpltui	r2,r2,21
 40142bc:	1000061e 	bne	r2,zero,40142d8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 40142c0:	e0bffd03 	ldbu	r2,-12(fp)
 40142c4:	10803fe0 	cmpeqi	r2,r2,255
 40142c8:	1000031e 	bne	r2,zero,40142d8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 40142cc:	00800a84 	movi	r2,42
 40142d0:	e0bfff15 	stw	r2,-4(fp)
 40142d4:	00006b06 	br	4014484 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 40142d8:	e0bffe17 	ldw	r2,-8(fp)
 40142dc:	1004c03a 	cmpne	r2,r2,zero
 40142e0:	1000031e 	bne	r2,zero,40142f0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 40142e4:	00800244 	movi	r2,9
 40142e8:	e0bfff15 	stw	r2,-4(fp)
 40142ec:	00006506 	br	4014484 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 40142f0:	e0bffe17 	ldw	r2,-8(fp)
 40142f4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 40142f8:	e0bffe17 	ldw	r2,-8(fp)
 40142fc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014300:	0005303a 	rdctl	r2,status
 4014304:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014308:	e0fff717 	ldw	r3,-36(fp)
 401430c:	00bfff84 	movi	r2,-2
 4014310:	1884703a 	and	r2,r3,r2
 4014314:	1001703a 	wrctl	status,r2
  
  return context;
 4014318:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 401431c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 4014320:	e0bffd03 	ldbu	r2,-12(fp)
 4014324:	10803fd8 	cmpnei	r2,r2,255
 4014328:	1000051e 	bne	r2,zero,4014340 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 401432c:	00810174 	movhi	r2,1029
 4014330:	1081b604 	addi	r2,r2,1752
 4014334:	10800017 	ldw	r2,0(r2)
 4014338:	10800c83 	ldbu	r2,50(r2)
 401433c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4014340:	e0bffd03 	ldbu	r2,-12(fp)
 4014344:	00c101b4 	movhi	r3,1030
 4014348:	18e09604 	addi	r3,r3,-32168
 401434c:	1085883a 	add	r2,r2,r2
 4014350:	1085883a 	add	r2,r2,r2
 4014354:	10c5883a 	add	r2,r2,r3
 4014358:	10800017 	ldw	r2,0(r2)
 401435c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4014360:	e0bffc17 	ldw	r2,-16(fp)
 4014364:	1004c03a 	cmpne	r2,r2,zero
 4014368:	1000071e 	bne	r2,zero,4014388 <OSTaskStkChk+0xec>
 401436c:	e0bff817 	ldw	r2,-32(fp)
 4014370:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014374:	e0bff617 	ldw	r2,-40(fp)
 4014378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401437c:	008010c4 	movi	r2,67
 4014380:	e0bfff15 	stw	r2,-4(fp)
 4014384:	00003f06 	br	4014484 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4014388:	e0bffc17 	ldw	r2,-16(fp)
 401438c:	10800058 	cmpnei	r2,r2,1
 4014390:	1000071e 	bne	r2,zero,40143b0 <OSTaskStkChk+0x114>
 4014394:	e0bff817 	ldw	r2,-32(fp)
 4014398:	e0bff515 	stw	r2,-44(fp)
 401439c:	e0bff517 	ldw	r2,-44(fp)
 40143a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40143a4:	008010c4 	movi	r2,67
 40143a8:	e0bfff15 	stw	r2,-4(fp)
 40143ac:	00003506 	br	4014484 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 40143b0:	e0bffc17 	ldw	r2,-16(fp)
 40143b4:	1080040b 	ldhu	r2,16(r2)
 40143b8:	10bfffcc 	andi	r2,r2,65535
 40143bc:	1080004c 	andi	r2,r2,1
 40143c0:	1004c03a 	cmpne	r2,r2,zero
 40143c4:	1000071e 	bne	r2,zero,40143e4 <OSTaskStkChk+0x148>
 40143c8:	e0bff817 	ldw	r2,-32(fp)
 40143cc:	e0bff415 	stw	r2,-48(fp)
 40143d0:	e0bff417 	ldw	r2,-48(fp)
 40143d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 40143d8:	00801144 	movi	r2,69
 40143dc:	e0bfff15 	stw	r2,-4(fp)
 40143e0:	00002806 	br	4014484 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 40143e4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 40143e8:	e0bffc17 	ldw	r2,-16(fp)
 40143ec:	10800317 	ldw	r2,12(r2)
 40143f0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 40143f4:	e0bffc17 	ldw	r2,-16(fp)
 40143f8:	10800217 	ldw	r2,8(r2)
 40143fc:	e0bffb15 	stw	r2,-20(fp)
 4014400:	e0bff817 	ldw	r2,-32(fp)
 4014404:	e0bff315 	stw	r2,-52(fp)
 4014408:	e0bff317 	ldw	r2,-52(fp)
 401440c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4014410:	00000306 	br	4014420 <OSTaskStkChk+0x184>
        nfree++;
 4014414:	e0bffa17 	ldw	r2,-24(fp)
 4014418:	10800044 	addi	r2,r2,1
 401441c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4014420:	e0bffb17 	ldw	r2,-20(fp)
 4014424:	10800017 	ldw	r2,0(r2)
 4014428:	1005003a 	cmpeq	r2,r2,zero
 401442c:	1007883a 	mov	r3,r2
 4014430:	e0bffb17 	ldw	r2,-20(fp)
 4014434:	10800104 	addi	r2,r2,4
 4014438:	e0bffb15 	stw	r2,-20(fp)
 401443c:	18803fcc 	andi	r2,r3,255
 4014440:	1004c03a 	cmpne	r2,r2,zero
 4014444:	103ff31e 	bne	r2,zero,4014414 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4014448:	e0bffa17 	ldw	r2,-24(fp)
 401444c:	1085883a 	add	r2,r2,r2
 4014450:	1085883a 	add	r2,r2,r2
 4014454:	1007883a 	mov	r3,r2
 4014458:	e0bffe17 	ldw	r2,-8(fp)
 401445c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 4014460:	e0fff917 	ldw	r3,-28(fp)
 4014464:	e0bffa17 	ldw	r2,-24(fp)
 4014468:	1885c83a 	sub	r2,r3,r2
 401446c:	1085883a 	add	r2,r2,r2
 4014470:	1085883a 	add	r2,r2,r2
 4014474:	1007883a 	mov	r3,r2
 4014478:	e0bffe17 	ldw	r2,-8(fp)
 401447c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 4014480:	e03fff15 	stw	zero,-4(fp)
 4014484:	e0bfff17 	ldw	r2,-4(fp)
}
 4014488:	e037883a 	mov	sp,fp
 401448c:	df000017 	ldw	fp,0(sp)
 4014490:	dec00104 	addi	sp,sp,4
 4014494:	f800283a 	ret

04014498 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4014498:	defff404 	addi	sp,sp,-48
 401449c:	dfc00b15 	stw	ra,44(sp)
 40144a0:	df000a15 	stw	fp,40(sp)
 40144a4:	df000a04 	addi	fp,sp,40
 40144a8:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40144ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 40144b0:	e0bffe03 	ldbu	r2,-8(fp)
 40144b4:	10800518 	cmpnei	r2,r2,20
 40144b8:	1000031e 	bne	r2,zero,40144c8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 40144bc:	008011c4 	movi	r2,71
 40144c0:	e0bfff15 	stw	r2,-4(fp)
 40144c4:	00007906 	br	40146ac <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 40144c8:	e0bffe03 	ldbu	r2,-8(fp)
 40144cc:	10800530 	cmpltui	r2,r2,20
 40144d0:	1000061e 	bne	r2,zero,40144ec <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 40144d4:	e0bffe03 	ldbu	r2,-8(fp)
 40144d8:	10803fe0 	cmpeqi	r2,r2,255
 40144dc:	1000031e 	bne	r2,zero,40144ec <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 40144e0:	00800a84 	movi	r2,42
 40144e4:	e0bfff15 	stw	r2,-4(fp)
 40144e8:	00007006 	br	40146ac <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40144ec:	0005303a 	rdctl	r2,status
 40144f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40144f4:	e0fff917 	ldw	r3,-28(fp)
 40144f8:	00bfff84 	movi	r2,-2
 40144fc:	1884703a 	and	r2,r3,r2
 4014500:	1001703a 	wrctl	status,r2
  
  return context;
 4014504:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 4014508:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 401450c:	e0bffe03 	ldbu	r2,-8(fp)
 4014510:	10803fd8 	cmpnei	r2,r2,255
 4014514:	1000081e 	bne	r2,zero,4014538 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 4014518:	00810174 	movhi	r2,1029
 401451c:	1081b604 	addi	r2,r2,1752
 4014520:	10800017 	ldw	r2,0(r2)
 4014524:	10800c83 	ldbu	r2,50(r2)
 4014528:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 401452c:	00800044 	movi	r2,1
 4014530:	e0bffd05 	stb	r2,-12(fp)
 4014534:	00000b06 	br	4014564 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 4014538:	00810174 	movhi	r2,1029
 401453c:	1081b604 	addi	r2,r2,1752
 4014540:	10800017 	ldw	r2,0(r2)
 4014544:	10800c83 	ldbu	r2,50(r2)
 4014548:	10c03fcc 	andi	r3,r2,255
 401454c:	e0bffe03 	ldbu	r2,-8(fp)
 4014550:	1880031e 	bne	r3,r2,4014560 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 4014554:	00800044 	movi	r2,1
 4014558:	e0bffd05 	stb	r2,-12(fp)
 401455c:	00000106 	br	4014564 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 4014560:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4014564:	e0bffe03 	ldbu	r2,-8(fp)
 4014568:	00c101b4 	movhi	r3,1030
 401456c:	18e09604 	addi	r3,r3,-32168
 4014570:	1085883a 	add	r2,r2,r2
 4014574:	1085883a 	add	r2,r2,r2
 4014578:	10c5883a 	add	r2,r2,r3
 401457c:	10800017 	ldw	r2,0(r2)
 4014580:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 4014584:	e0bffc17 	ldw	r2,-16(fp)
 4014588:	1004c03a 	cmpne	r2,r2,zero
 401458c:	1000071e 	bne	r2,zero,40145ac <OSTaskSuspend+0x114>
 4014590:	e0bffa17 	ldw	r2,-24(fp)
 4014594:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014598:	e0bff817 	ldw	r2,-32(fp)
 401459c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 40145a0:	00801204 	movi	r2,72
 40145a4:	e0bfff15 	stw	r2,-4(fp)
 40145a8:	00004006 	br	40146ac <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 40145ac:	e0bffc17 	ldw	r2,-16(fp)
 40145b0:	10800058 	cmpnei	r2,r2,1
 40145b4:	1000071e 	bne	r2,zero,40145d4 <OSTaskSuspend+0x13c>
 40145b8:	e0bffa17 	ldw	r2,-24(fp)
 40145bc:	e0bff715 	stw	r2,-36(fp)
 40145c0:	e0bff717 	ldw	r2,-36(fp)
 40145c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40145c8:	008010c4 	movi	r2,67
 40145cc:	e0bfff15 	stw	r2,-4(fp)
 40145d0:	00003606 	br	40146ac <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 40145d4:	e0bffc17 	ldw	r2,-16(fp)
 40145d8:	10800d03 	ldbu	r2,52(r2)
 40145dc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 40145e0:	e13ffb03 	ldbu	r4,-20(fp)
 40145e4:	e0fffb03 	ldbu	r3,-20(fp)
 40145e8:	00810174 	movhi	r2,1029
 40145ec:	1081b344 	addi	r2,r2,1741
 40145f0:	10c5883a 	add	r2,r2,r3
 40145f4:	10800003 	ldbu	r2,0(r2)
 40145f8:	1007883a 	mov	r3,r2
 40145fc:	e0bffc17 	ldw	r2,-16(fp)
 4014600:	10800d43 	ldbu	r2,53(r2)
 4014604:	0084303a 	nor	r2,zero,r2
 4014608:	1884703a 	and	r2,r3,r2
 401460c:	1007883a 	mov	r3,r2
 4014610:	00810174 	movhi	r2,1029
 4014614:	1081b344 	addi	r2,r2,1741
 4014618:	1105883a 	add	r2,r2,r4
 401461c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 4014620:	e0fffb03 	ldbu	r3,-20(fp)
 4014624:	00810174 	movhi	r2,1029
 4014628:	1081b344 	addi	r2,r2,1741
 401462c:	10c5883a 	add	r2,r2,r3
 4014630:	10800003 	ldbu	r2,0(r2)
 4014634:	10803fcc 	andi	r2,r2,255
 4014638:	1004c03a 	cmpne	r2,r2,zero
 401463c:	10000c1e 	bne	r2,zero,4014670 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 4014640:	e0bffc17 	ldw	r2,-16(fp)
 4014644:	10800d83 	ldbu	r2,54(r2)
 4014648:	0084303a 	nor	r2,zero,r2
 401464c:	1007883a 	mov	r3,r2
 4014650:	00810174 	movhi	r2,1029
 4014654:	1081b304 	addi	r2,r2,1740
 4014658:	10800003 	ldbu	r2,0(r2)
 401465c:	1884703a 	and	r2,r3,r2
 4014660:	1007883a 	mov	r3,r2
 4014664:	00810174 	movhi	r2,1029
 4014668:	1081b304 	addi	r2,r2,1740
 401466c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 4014670:	e0bffc17 	ldw	r2,-16(fp)
 4014674:	10800c03 	ldbu	r2,48(r2)
 4014678:	10800214 	ori	r2,r2,8
 401467c:	1007883a 	mov	r3,r2
 4014680:	e0bffc17 	ldw	r2,-16(fp)
 4014684:	10c00c05 	stb	r3,48(r2)
 4014688:	e0bffa17 	ldw	r2,-24(fp)
 401468c:	e0bff615 	stw	r2,-40(fp)
 4014690:	e0bff617 	ldw	r2,-40(fp)
 4014694:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 4014698:	e0bffd03 	ldbu	r2,-12(fp)
 401469c:	10800058 	cmpnei	r2,r2,1
 40146a0:	1000011e 	bne	r2,zero,40146a8 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 40146a4:	400e5900 	call	400e590 <OS_Sched>
    }
    return (OS_ERR_NONE);
 40146a8:	e03fff15 	stw	zero,-4(fp)
 40146ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40146b0:	e037883a 	mov	sp,fp
 40146b4:	dfc00117 	ldw	ra,4(sp)
 40146b8:	df000017 	ldw	fp,0(sp)
 40146bc:	dec00204 	addi	sp,sp,8
 40146c0:	f800283a 	ret

040146c4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 40146c4:	defff504 	addi	sp,sp,-44
 40146c8:	dfc00a15 	stw	ra,40(sp)
 40146cc:	df000915 	stw	fp,36(sp)
 40146d0:	df000904 	addi	fp,sp,36
 40146d4:	e17ffe15 	stw	r5,-8(fp)
 40146d8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40146dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 40146e0:	e0bffd03 	ldbu	r2,-12(fp)
 40146e4:	10800570 	cmpltui	r2,r2,21
 40146e8:	1000061e 	bne	r2,zero,4014704 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 40146ec:	e0bffd03 	ldbu	r2,-12(fp)
 40146f0:	10803fe0 	cmpeqi	r2,r2,255
 40146f4:	1000031e 	bne	r2,zero,4014704 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 40146f8:	00800a84 	movi	r2,42
 40146fc:	e0bfff15 	stw	r2,-4(fp)
 4014700:	00003b06 	br	40147f0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 4014704:	e0bffe17 	ldw	r2,-8(fp)
 4014708:	1004c03a 	cmpne	r2,r2,zero
 401470c:	1000031e 	bne	r2,zero,401471c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 4014710:	00800244 	movi	r2,9
 4014714:	e0bfff15 	stw	r2,-4(fp)
 4014718:	00003506 	br	40147f0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401471c:	0005303a 	rdctl	r2,status
 4014720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014724:	e0fffa17 	ldw	r3,-24(fp)
 4014728:	00bfff84 	movi	r2,-2
 401472c:	1884703a 	and	r2,r3,r2
 4014730:	1001703a 	wrctl	status,r2
  
  return context;
 4014734:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4014738:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 401473c:	e0bffd03 	ldbu	r2,-12(fp)
 4014740:	10803fd8 	cmpnei	r2,r2,255
 4014744:	1000051e 	bne	r2,zero,401475c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 4014748:	00810174 	movhi	r2,1029
 401474c:	1081b604 	addi	r2,r2,1752
 4014750:	10800017 	ldw	r2,0(r2)
 4014754:	10800c83 	ldbu	r2,50(r2)
 4014758:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401475c:	e0bffd03 	ldbu	r2,-12(fp)
 4014760:	00c101b4 	movhi	r3,1030
 4014764:	18e09604 	addi	r3,r3,-32168
 4014768:	1085883a 	add	r2,r2,r2
 401476c:	1085883a 	add	r2,r2,r2
 4014770:	10c5883a 	add	r2,r2,r3
 4014774:	10800017 	ldw	r2,0(r2)
 4014778:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 401477c:	e0bffc17 	ldw	r2,-16(fp)
 4014780:	1004c03a 	cmpne	r2,r2,zero
 4014784:	1000071e 	bne	r2,zero,40147a4 <OSTaskQuery+0xe0>
 4014788:	e0bffb17 	ldw	r2,-20(fp)
 401478c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014790:	e0bff917 	ldw	r2,-28(fp)
 4014794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 4014798:	00800a44 	movi	r2,41
 401479c:	e0bfff15 	stw	r2,-4(fp)
 40147a0:	00001306 	br	40147f0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 40147a4:	e0bffc17 	ldw	r2,-16(fp)
 40147a8:	10800058 	cmpnei	r2,r2,1
 40147ac:	1000071e 	bne	r2,zero,40147cc <OSTaskQuery+0x108>
 40147b0:	e0bffb17 	ldw	r2,-20(fp)
 40147b4:	e0bff815 	stw	r2,-32(fp)
 40147b8:	e0bff817 	ldw	r2,-32(fp)
 40147bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40147c0:	008010c4 	movi	r2,67
 40147c4:	e0bfff15 	stw	r2,-4(fp)
 40147c8:	00000906 	br	40147f0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 40147cc:	e13ffe17 	ldw	r4,-8(fp)
 40147d0:	e17ffc17 	ldw	r5,-16(fp)
 40147d4:	01801b04 	movi	r6,108
 40147d8:	400e5240 	call	400e524 <OS_MemCopy>
 40147dc:	e0bffb17 	ldw	r2,-20(fp)
 40147e0:	e0bff715 	stw	r2,-36(fp)
 40147e4:	e0bff717 	ldw	r2,-36(fp)
 40147e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40147ec:	e03fff15 	stw	zero,-4(fp)
 40147f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40147f4:	e037883a 	mov	sp,fp
 40147f8:	dfc00117 	ldw	ra,4(sp)
 40147fc:	df000017 	ldw	fp,0(sp)
 4014800:	dec00204 	addi	sp,sp,8
 4014804:	f800283a 	ret

04014808 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 4014808:	defffc04 	addi	sp,sp,-16
 401480c:	df000315 	stw	fp,12(sp)
 4014810:	df000304 	addi	fp,sp,12
 4014814:	e13ffd15 	stw	r4,-12(fp)
 4014818:	e17ffe15 	stw	r5,-8(fp)
 401481c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 4014820:	e0bfff0b 	ldhu	r2,-4(fp)
 4014824:	1080004c 	andi	r2,r2,1
 4014828:	10803fcc 	andi	r2,r2,255
 401482c:	1005003a 	cmpeq	r2,r2,zero
 4014830:	1000101e 	bne	r2,zero,4014874 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 4014834:	e0bfff0b 	ldhu	r2,-4(fp)
 4014838:	1080008c 	andi	r2,r2,2
 401483c:	1005003a 	cmpeq	r2,r2,zero
 4014840:	10000c1e 	bne	r2,zero,4014874 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4014844:	00000806 	br	4014868 <OS_TaskStkClr+0x60>
                size--;
 4014848:	e0bffe17 	ldw	r2,-8(fp)
 401484c:	10bfffc4 	addi	r2,r2,-1
 4014850:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 4014854:	e0bffd17 	ldw	r2,-12(fp)
 4014858:	10000015 	stw	zero,0(r2)
 401485c:	e0bffd17 	ldw	r2,-12(fp)
 4014860:	10800104 	addi	r2,r2,4
 4014864:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4014868:	e0bffe17 	ldw	r2,-8(fp)
 401486c:	1004c03a 	cmpne	r2,r2,zero
 4014870:	103ff51e 	bne	r2,zero,4014848 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 4014874:	e037883a 	mov	sp,fp
 4014878:	df000017 	ldw	fp,0(sp)
 401487c:	dec00104 	addi	sp,sp,4
 4014880:	f800283a 	ret

04014884 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 4014884:	defff904 	addi	sp,sp,-28
 4014888:	dfc00615 	stw	ra,24(sp)
 401488c:	df000515 	stw	fp,20(sp)
 4014890:	df000504 	addi	fp,sp,20
 4014894:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4014898:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 401489c:	00810174 	movhi	r2,1029
 40148a0:	1081b504 	addi	r2,r2,1748
 40148a4:	10800003 	ldbu	r2,0(r2)
 40148a8:	10803fcc 	andi	r2,r2,255
 40148ac:	1004c03a 	cmpne	r2,r2,zero
 40148b0:	1000421e 	bne	r2,zero,40149bc <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 40148b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40148b8:	1005003a 	cmpeq	r2,r2,zero
 40148bc:	10003f1e 	bne	r2,zero,40149bc <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40148c0:	0005303a 	rdctl	r2,status
 40148c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40148c8:	e0fffc17 	ldw	r3,-16(fp)
 40148cc:	00bfff84 	movi	r2,-2
 40148d0:	1884703a 	and	r2,r3,r2
 40148d4:	1001703a 	wrctl	status,r2
  
  return context;
 40148d8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 40148dc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 40148e0:	00810174 	movhi	r2,1029
 40148e4:	1081b604 	addi	r2,r2,1752
 40148e8:	10800017 	ldw	r2,0(r2)
 40148ec:	10800d03 	ldbu	r2,52(r2)
 40148f0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 40148f4:	e13ffe03 	ldbu	r4,-8(fp)
 40148f8:	e0fffe03 	ldbu	r3,-8(fp)
 40148fc:	00810174 	movhi	r2,1029
 4014900:	1081b344 	addi	r2,r2,1741
 4014904:	10c5883a 	add	r2,r2,r3
 4014908:	10800003 	ldbu	r2,0(r2)
 401490c:	1007883a 	mov	r3,r2
 4014910:	00810174 	movhi	r2,1029
 4014914:	1081b604 	addi	r2,r2,1752
 4014918:	10800017 	ldw	r2,0(r2)
 401491c:	10800d43 	ldbu	r2,53(r2)
 4014920:	0084303a 	nor	r2,zero,r2
 4014924:	1884703a 	and	r2,r3,r2
 4014928:	1007883a 	mov	r3,r2
 401492c:	00810174 	movhi	r2,1029
 4014930:	1081b344 	addi	r2,r2,1741
 4014934:	1105883a 	add	r2,r2,r4
 4014938:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 401493c:	e0fffe03 	ldbu	r3,-8(fp)
 4014940:	00810174 	movhi	r2,1029
 4014944:	1081b344 	addi	r2,r2,1741
 4014948:	10c5883a 	add	r2,r2,r3
 401494c:	10800003 	ldbu	r2,0(r2)
 4014950:	10803fcc 	andi	r2,r2,255
 4014954:	1004c03a 	cmpne	r2,r2,zero
 4014958:	10000e1e 	bne	r2,zero,4014994 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 401495c:	00810174 	movhi	r2,1029
 4014960:	1081b604 	addi	r2,r2,1752
 4014964:	10800017 	ldw	r2,0(r2)
 4014968:	10800d83 	ldbu	r2,54(r2)
 401496c:	0084303a 	nor	r2,zero,r2
 4014970:	1007883a 	mov	r3,r2
 4014974:	00810174 	movhi	r2,1029
 4014978:	1081b304 	addi	r2,r2,1740
 401497c:	10800003 	ldbu	r2,0(r2)
 4014980:	1884703a 	and	r2,r3,r2
 4014984:	1007883a 	mov	r3,r2
 4014988:	00810174 	movhi	r2,1029
 401498c:	1081b304 	addi	r2,r2,1740
 4014990:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4014994:	00810174 	movhi	r2,1029
 4014998:	1081b604 	addi	r2,r2,1752
 401499c:	10c00017 	ldw	r3,0(r2)
 40149a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40149a4:	18800b8d 	sth	r2,46(r3)
 40149a8:	e0bffd17 	ldw	r2,-12(fp)
 40149ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40149b0:	e0bffb17 	ldw	r2,-20(fp)
 40149b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 40149b8:	400e5900 	call	400e590 <OS_Sched>
    }
}
 40149bc:	e037883a 	mov	sp,fp
 40149c0:	dfc00117 	ldw	ra,4(sp)
 40149c4:	df000017 	ldw	fp,0(sp)
 40149c8:	dec00204 	addi	sp,sp,8
 40149cc:	f800283a 	ret

040149d0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 40149d0:	defff704 	addi	sp,sp,-36
 40149d4:	dfc00815 	stw	ra,32(sp)
 40149d8:	df000715 	stw	fp,28(sp)
 40149dc:	df000704 	addi	fp,sp,28
 40149e0:	e13ffb05 	stb	r4,-20(fp)
 40149e4:	e17ffc05 	stb	r5,-16(fp)
 40149e8:	e1bffd05 	stb	r6,-12(fp)
 40149ec:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40149f0:	00810174 	movhi	r2,1029
 40149f4:	1081b504 	addi	r2,r2,1748
 40149f8:	10800003 	ldbu	r2,0(r2)
 40149fc:	10803fcc 	andi	r2,r2,255
 4014a00:	1005003a 	cmpeq	r2,r2,zero
 4014a04:	1000031e 	bne	r2,zero,4014a14 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
 4014a08:	00801544 	movi	r2,85
 4014a0c:	e0bfff15 	stw	r2,-4(fp)
 4014a10:	00004506 	br	4014b28 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4014a14:	e0bffb03 	ldbu	r2,-20(fp)
 4014a18:	1004c03a 	cmpne	r2,r2,zero
 4014a1c:	10000c1e 	bne	r2,zero,4014a50 <OSTimeDlyHMSM+0x80>
        if (minutes == 0) {
 4014a20:	e0bffc03 	ldbu	r2,-16(fp)
 4014a24:	1004c03a 	cmpne	r2,r2,zero
 4014a28:	1000091e 	bne	r2,zero,4014a50 <OSTimeDlyHMSM+0x80>
            if (seconds == 0) {
 4014a2c:	e0bffd03 	ldbu	r2,-12(fp)
 4014a30:	1004c03a 	cmpne	r2,r2,zero
 4014a34:	1000061e 	bne	r2,zero,4014a50 <OSTimeDlyHMSM+0x80>
                if (ms == 0) {
 4014a38:	e0bffe0b 	ldhu	r2,-8(fp)
 4014a3c:	1004c03a 	cmpne	r2,r2,zero
 4014a40:	1000031e 	bne	r2,zero,4014a50 <OSTimeDlyHMSM+0x80>
                    return (OS_ERR_TIME_ZERO_DLY);
 4014a44:	00801504 	movi	r2,84
 4014a48:	e0bfff15 	stw	r2,-4(fp)
 4014a4c:	00003606 	br	4014b28 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
 4014a50:	e0bffc03 	ldbu	r2,-16(fp)
 4014a54:	10800f30 	cmpltui	r2,r2,60
 4014a58:	1000031e 	bne	r2,zero,4014a68 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 4014a5c:	00801444 	movi	r2,81
 4014a60:	e0bfff15 	stw	r2,-4(fp)
 4014a64:	00003006 	br	4014b28 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
 4014a68:	e0bffd03 	ldbu	r2,-12(fp)
 4014a6c:	10800f30 	cmpltui	r2,r2,60
 4014a70:	1000031e 	bne	r2,zero,4014a80 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_SECONDS);
 4014a74:	00801484 	movi	r2,82
 4014a78:	e0bfff15 	stw	r2,-4(fp)
 4014a7c:	00002a06 	br	4014b28 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
 4014a80:	e0bffe0b 	ldhu	r2,-8(fp)
 4014a84:	1080fa30 	cmpltui	r2,r2,1000
 4014a88:	1000031e 	bne	r2,zero,4014a98 <OSTimeDlyHMSM+0xc8>
        return (OS_ERR_TIME_INVALID_MS);
 4014a8c:	008014c4 	movi	r2,83
 4014a90:	e0bfff15 	stw	r2,-4(fp)
 4014a94:	00002406 	br	4014b28 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 4014a98:	e0bffb03 	ldbu	r2,-20(fp)
 4014a9c:	10c38424 	muli	r3,r2,3600
 4014aa0:	e0bffc03 	ldbu	r2,-16(fp)
 4014aa4:	10800f24 	muli	r2,r2,60
 4014aa8:	1887883a 	add	r3,r3,r2
 4014aac:	e0bffd03 	ldbu	r2,-12(fp)
 4014ab0:	1885883a 	add	r2,r3,r2
 4014ab4:	11001924 	muli	r4,r2,100
 4014ab8:	e0bffe0b 	ldhu	r2,-8(fp)
 4014abc:	10801924 	muli	r2,r2,100
 4014ac0:	10c07d04 	addi	r3,r2,500
 4014ac4:	0080fa04 	movi	r2,1000
 4014ac8:	1885203a 	divu	r2,r3,r2
 4014acc:	2085883a 	add	r2,r4,r2
 4014ad0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 4014ad4:	e0bffa17 	ldw	r2,-24(fp)
 4014ad8:	1004d43a 	srli	r2,r2,16
 4014adc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 4014ae0:	e0bffa17 	ldw	r2,-24(fp)
 4014ae4:	10bfffcc 	andi	r2,r2,65535
 4014ae8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 4014aec:	e0bffa17 	ldw	r2,-24(fp)
 4014af0:	113fffcc 	andi	r4,r2,65535
 4014af4:	40148840 	call	4014884 <OSTimeDly>
    while (loops > 0) {
 4014af8:	00000706 	br	4014b18 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
 4014afc:	01200014 	movui	r4,32768
 4014b00:	40148840 	call	4014884 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 4014b04:	01200014 	movui	r4,32768
 4014b08:	40148840 	call	4014884 <OSTimeDly>
        loops--;
 4014b0c:	e0bff90b 	ldhu	r2,-28(fp)
 4014b10:	10bfffc4 	addi	r2,r2,-1
 4014b14:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 4014b18:	e0bff90b 	ldhu	r2,-28(fp)
 4014b1c:	1004c03a 	cmpne	r2,r2,zero
 4014b20:	103ff61e 	bne	r2,zero,4014afc <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 4014b24:	e03fff15 	stw	zero,-4(fp)
 4014b28:	e0bfff17 	ldw	r2,-4(fp)
}
 4014b2c:	e037883a 	mov	sp,fp
 4014b30:	dfc00117 	ldw	ra,4(sp)
 4014b34:	df000017 	ldw	fp,0(sp)
 4014b38:	dec00204 	addi	sp,sp,8
 4014b3c:	f800283a 	ret

04014b40 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 4014b40:	defff404 	addi	sp,sp,-48
 4014b44:	dfc00b15 	stw	ra,44(sp)
 4014b48:	df000a15 	stw	fp,40(sp)
 4014b4c:	df000a04 	addi	fp,sp,40
 4014b50:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4014b54:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 4014b58:	e0bffe03 	ldbu	r2,-8(fp)
 4014b5c:	10800530 	cmpltui	r2,r2,20
 4014b60:	1000031e 	bne	r2,zero,4014b70 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4014b64:	00800a84 	movi	r2,42
 4014b68:	e0bfff15 	stw	r2,-4(fp)
 4014b6c:	00007206 	br	4014d38 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014b70:	0005303a 	rdctl	r2,status
 4014b74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014b78:	e0fffb17 	ldw	r3,-20(fp)
 4014b7c:	00bfff84 	movi	r2,-2
 4014b80:	1884703a 	and	r2,r3,r2
 4014b84:	1001703a 	wrctl	status,r2
  
  return context;
 4014b88:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4014b8c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 4014b90:	e0bffe03 	ldbu	r2,-8(fp)
 4014b94:	00c101b4 	movhi	r3,1030
 4014b98:	18e09604 	addi	r3,r3,-32168
 4014b9c:	1085883a 	add	r2,r2,r2
 4014ba0:	1085883a 	add	r2,r2,r2
 4014ba4:	10c5883a 	add	r2,r2,r3
 4014ba8:	10800017 	ldw	r2,0(r2)
 4014bac:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 4014bb0:	e0bffd17 	ldw	r2,-12(fp)
 4014bb4:	1004c03a 	cmpne	r2,r2,zero
 4014bb8:	1000071e 	bne	r2,zero,4014bd8 <OSTimeDlyResume+0x98>
 4014bbc:	e0bffc17 	ldw	r2,-16(fp)
 4014bc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014bc4:	e0bffa17 	ldw	r2,-24(fp)
 4014bc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4014bcc:	008010c4 	movi	r2,67
 4014bd0:	e0bfff15 	stw	r2,-4(fp)
 4014bd4:	00005806 	br	4014d38 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4014bd8:	e0bffd17 	ldw	r2,-12(fp)
 4014bdc:	10800058 	cmpnei	r2,r2,1
 4014be0:	1000071e 	bne	r2,zero,4014c00 <OSTimeDlyResume+0xc0>
 4014be4:	e0bffc17 	ldw	r2,-16(fp)
 4014be8:	e0bff915 	stw	r2,-28(fp)
 4014bec:	e0bff917 	ldw	r2,-28(fp)
 4014bf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4014bf4:	008010c4 	movi	r2,67
 4014bf8:	e0bfff15 	stw	r2,-4(fp)
 4014bfc:	00004e06 	br	4014d38 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 4014c00:	e0bffd17 	ldw	r2,-12(fp)
 4014c04:	10800b8b 	ldhu	r2,46(r2)
 4014c08:	10bfffcc 	andi	r2,r2,65535
 4014c0c:	1004c03a 	cmpne	r2,r2,zero
 4014c10:	1000071e 	bne	r2,zero,4014c30 <OSTimeDlyResume+0xf0>
 4014c14:	e0bffc17 	ldw	r2,-16(fp)
 4014c18:	e0bff815 	stw	r2,-32(fp)
 4014c1c:	e0bff817 	ldw	r2,-32(fp)
 4014c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 4014c24:	00801404 	movi	r2,80
 4014c28:	e0bfff15 	stw	r2,-4(fp)
 4014c2c:	00004206 	br	4014d38 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 4014c30:	e0bffd17 	ldw	r2,-12(fp)
 4014c34:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4014c38:	e0bffd17 	ldw	r2,-12(fp)
 4014c3c:	10800c03 	ldbu	r2,48(r2)
 4014c40:	10803fcc 	andi	r2,r2,255
 4014c44:	10800dcc 	andi	r2,r2,55
 4014c48:	1005003a 	cmpeq	r2,r2,zero
 4014c4c:	10000b1e 	bne	r2,zero,4014c7c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 4014c50:	e0bffd17 	ldw	r2,-12(fp)
 4014c54:	10c00c03 	ldbu	r3,48(r2)
 4014c58:	00bff204 	movi	r2,-56
 4014c5c:	1884703a 	and	r2,r3,r2
 4014c60:	1007883a 	mov	r3,r2
 4014c64:	e0bffd17 	ldw	r2,-12(fp)
 4014c68:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 4014c6c:	e0fffd17 	ldw	r3,-12(fp)
 4014c70:	00800044 	movi	r2,1
 4014c74:	18800c45 	stb	r2,49(r3)
 4014c78:	00000206 	br	4014c84 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 4014c7c:	e0bffd17 	ldw	r2,-12(fp)
 4014c80:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 4014c84:	e0bffd17 	ldw	r2,-12(fp)
 4014c88:	10800c03 	ldbu	r2,48(r2)
 4014c8c:	10803fcc 	andi	r2,r2,255
 4014c90:	1080020c 	andi	r2,r2,8
 4014c94:	1004c03a 	cmpne	r2,r2,zero
 4014c98:	1000221e 	bne	r2,zero,4014d24 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 4014c9c:	e0bffd17 	ldw	r2,-12(fp)
 4014ca0:	10c00d83 	ldbu	r3,54(r2)
 4014ca4:	00810174 	movhi	r2,1029
 4014ca8:	1081b304 	addi	r2,r2,1740
 4014cac:	10800003 	ldbu	r2,0(r2)
 4014cb0:	1884b03a 	or	r2,r3,r2
 4014cb4:	1007883a 	mov	r3,r2
 4014cb8:	00810174 	movhi	r2,1029
 4014cbc:	1081b304 	addi	r2,r2,1740
 4014cc0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4014cc4:	e0bffd17 	ldw	r2,-12(fp)
 4014cc8:	10800d03 	ldbu	r2,52(r2)
 4014ccc:	11003fcc 	andi	r4,r2,255
 4014cd0:	e0bffd17 	ldw	r2,-12(fp)
 4014cd4:	10800d03 	ldbu	r2,52(r2)
 4014cd8:	10c03fcc 	andi	r3,r2,255
 4014cdc:	00810174 	movhi	r2,1029
 4014ce0:	1081b344 	addi	r2,r2,1741
 4014ce4:	10c5883a 	add	r2,r2,r3
 4014ce8:	10c00003 	ldbu	r3,0(r2)
 4014cec:	e0bffd17 	ldw	r2,-12(fp)
 4014cf0:	10800d43 	ldbu	r2,53(r2)
 4014cf4:	1884b03a 	or	r2,r3,r2
 4014cf8:	1007883a 	mov	r3,r2
 4014cfc:	00810174 	movhi	r2,1029
 4014d00:	1081b344 	addi	r2,r2,1741
 4014d04:	1105883a 	add	r2,r2,r4
 4014d08:	10c00005 	stb	r3,0(r2)
 4014d0c:	e0bffc17 	ldw	r2,-16(fp)
 4014d10:	e0bff715 	stw	r2,-36(fp)
 4014d14:	e0bff717 	ldw	r2,-36(fp)
 4014d18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 4014d1c:	400e5900 	call	400e590 <OS_Sched>
 4014d20:	00000406 	br	4014d34 <OSTimeDlyResume+0x1f4>
 4014d24:	e0bffc17 	ldw	r2,-16(fp)
 4014d28:	e0bff615 	stw	r2,-40(fp)
 4014d2c:	e0bff617 	ldw	r2,-40(fp)
 4014d30:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 4014d34:	e03fff15 	stw	zero,-4(fp)
 4014d38:	e0bfff17 	ldw	r2,-4(fp)
}
 4014d3c:	e037883a 	mov	sp,fp
 4014d40:	dfc00117 	ldw	ra,4(sp)
 4014d44:	df000017 	ldw	fp,0(sp)
 4014d48:	dec00204 	addi	sp,sp,8
 4014d4c:	f800283a 	ret

04014d50 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 4014d50:	defffb04 	addi	sp,sp,-20
 4014d54:	df000415 	stw	fp,16(sp)
 4014d58:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4014d5c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014d60:	0005303a 	rdctl	r2,status
 4014d64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014d68:	e0fffd17 	ldw	r3,-12(fp)
 4014d6c:	00bfff84 	movi	r2,-2
 4014d70:	1884703a 	and	r2,r3,r2
 4014d74:	1001703a 	wrctl	status,r2
  
  return context;
 4014d78:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4014d7c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 4014d80:	00810174 	movhi	r2,1029
 4014d84:	1081b704 	addi	r2,r2,1756
 4014d88:	10800017 	ldw	r2,0(r2)
 4014d8c:	e0bfff15 	stw	r2,-4(fp)
 4014d90:	e0bffe17 	ldw	r2,-8(fp)
 4014d94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014d98:	e0bffc17 	ldw	r2,-16(fp)
 4014d9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 4014da0:	e0bfff17 	ldw	r2,-4(fp)
}
 4014da4:	e037883a 	mov	sp,fp
 4014da8:	df000017 	ldw	fp,0(sp)
 4014dac:	dec00104 	addi	sp,sp,4
 4014db0:	f800283a 	ret

04014db4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 4014db4:	defffb04 	addi	sp,sp,-20
 4014db8:	df000415 	stw	fp,16(sp)
 4014dbc:	df000404 	addi	fp,sp,16
 4014dc0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4014dc4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014dc8:	0005303a 	rdctl	r2,status
 4014dcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014dd0:	e0fffd17 	ldw	r3,-12(fp)
 4014dd4:	00bfff84 	movi	r2,-2
 4014dd8:	1884703a 	and	r2,r3,r2
 4014ddc:	1001703a 	wrctl	status,r2
  
  return context;
 4014de0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4014de4:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 4014de8:	00c10174 	movhi	r3,1029
 4014dec:	18c1b704 	addi	r3,r3,1756
 4014df0:	e0bfff17 	ldw	r2,-4(fp)
 4014df4:	18800015 	stw	r2,0(r3)
 4014df8:	e0bffe17 	ldw	r2,-8(fp)
 4014dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014e00:	e0bffc17 	ldw	r2,-16(fp)
 4014e04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4014e08:	e037883a 	mov	sp,fp
 4014e0c:	df000017 	ldw	fp,0(sp)
 4014e10:	dec00104 	addi	sp,sp,4
 4014e14:	f800283a 	ret

04014e18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4014e18:	defffd04 	addi	sp,sp,-12
 4014e1c:	dfc00215 	stw	ra,8(sp)
 4014e20:	df000115 	stw	fp,4(sp)
 4014e24:	df000104 	addi	fp,sp,4
 4014e28:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 4014e2c:	40363300 	call	4036330 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4014e30:	00800044 	movi	r2,1
 4014e34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4014e38:	e037883a 	mov	sp,fp
 4014e3c:	dfc00117 	ldw	ra,4(sp)
 4014e40:	df000017 	ldw	fp,0(sp)
 4014e44:	dec00204 	addi	sp,sp,8
 4014e48:	f800283a 	ret

04014e4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4014e4c:	defffa04 	addi	sp,sp,-24
 4014e50:	dfc00515 	stw	ra,20(sp)
 4014e54:	df000415 	stw	fp,16(sp)
 4014e58:	df000404 	addi	fp,sp,16
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
 4014e5c:	01004034 	movhi	r4,256
 4014e60:	21052004 	addi	r4,r4,5248
 4014e64:	000b883a 	mov	r5,zero
 4014e68:	018000c4 	movi	r6,3
 4014e6c:	01c01904 	movi	r7,100
 4014e70:	4016c840 	call	4016c84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4014e74:	01010174 	movhi	r4,1029
 4014e78:	2134a304 	addi	r4,r4,-11636
 4014e7c:	000b883a 	mov	r5,zero
 4014e80:	000d883a 	mov	r6,zero
 4014e84:	401521c0 	call	401521c <altera_avalon_jtag_uart_init>
 4014e88:	01010174 	movhi	r4,1029
 4014e8c:	21349904 	addi	r4,r4,-11676
 4014e90:	401509c0 	call	401509c <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
 4014e94:	01010174 	movhi	r4,1029
 4014e98:	2138b404 	addi	r4,r4,-7472
 4014e9c:	000b883a 	mov	r5,zero
 4014ea0:	01800044 	movi	r6,1
 4014ea4:	4016b680 	call	4016b68 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
 4014ea8:	01010174 	movhi	r4,1029
 4014eac:	2138c004 	addi	r4,r4,-7424
 4014eb0:	000b883a 	mov	r5,zero
 4014eb4:	01800084 	movi	r6,2
 4014eb8:	4016b680 	call	4016b68 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    TRIPLE_SPEED_ETHERNET_INIT ( ETHERNET_1, ethernet_1);
 4014ebc:	e03fff15 	stw	zero,-4(fp)
 4014ec0:	00800044 	movi	r2,1
 4014ec4:	e0bffe15 	stw	r2,-8(fp)
 4014ec8:	e0bffe17 	ldw	r2,-8(fp)
 4014ecc:	10800048 	cmpgei	r2,r2,1
 4014ed0:	1000021e 	bne	r2,zero,4014edc <alt_sys_init+0x90>
 4014ed4:	00800044 	movi	r2,1
 4014ed8:	e0bffe15 	stw	r2,-8(fp)
 4014edc:	e03fff15 	stw	zero,-4(fp)
 4014ee0:	00006606 	br	401507c <alt_sys_init+0x230>
 4014ee4:	e0bfff17 	ldw	r2,-4(fp)
 4014ee8:	00c101b4 	movhi	r3,1030
 4014eec:	18e0ab04 	addi	r3,r3,-32084
 4014ef0:	10800724 	muli	r2,r2,28
 4014ef4:	10c5883a 	add	r2,r2,r3
 4014ef8:	10000015 	stw	zero,0(r2)
 4014efc:	e0bfff17 	ldw	r2,-4(fp)
 4014f00:	00c101b4 	movhi	r3,1030
 4014f04:	18e0ab04 	addi	r3,r3,-32084
 4014f08:	10800724 	muli	r2,r2,28
 4014f0c:	10c5883a 	add	r2,r2,r3
 4014f10:	10800104 	addi	r2,r2,4
 4014f14:	10000015 	stw	zero,0(r2)
 4014f18:	e0bfff17 	ldw	r2,-4(fp)
 4014f1c:	d1202717 	ldw	r4,-32612(gp)
 4014f20:	00c101b4 	movhi	r3,1030
 4014f24:	18e0ab04 	addi	r3,r3,-32084
 4014f28:	10800724 	muli	r2,r2,28
 4014f2c:	10c5883a 	add	r2,r2,r3
 4014f30:	10800204 	addi	r2,r2,8
 4014f34:	11000015 	stw	r4,0(r2)
 4014f38:	e0bfff17 	ldw	r2,-4(fp)
 4014f3c:	00c101b4 	movhi	r3,1030
 4014f40:	18e0ab04 	addi	r3,r3,-32084
 4014f44:	10800724 	muli	r2,r2,28
 4014f48:	10c5883a 	add	r2,r2,r3
 4014f4c:	10c00304 	addi	r3,r2,12
 4014f50:	008100b4 	movhi	r2,1026
 4014f54:	10b01904 	addi	r2,r2,-16284
 4014f58:	18800015 	stw	r2,0(r3)
 4014f5c:	e0bfff17 	ldw	r2,-4(fp)
 4014f60:	10c00724 	muli	r3,r2,28
 4014f64:	008101b4 	movhi	r2,1030
 4014f68:	10a0ab04 	addi	r2,r2,-32084
 4014f6c:	1887883a 	add	r3,r3,r2
 4014f70:	00810174 	movhi	r2,1029
 4014f74:	10b9e904 	addi	r2,r2,-6236
 4014f78:	e0bffc15 	stw	r2,-16(fp)
 4014f7c:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4014f80:	e0fffd17 	ldw	r3,-12(fp)
 4014f84:	e0bffc17 	ldw	r2,-16(fp)
 4014f88:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4014f8c:	e0bffc17 	ldw	r2,-16(fp)
 4014f90:	10c00017 	ldw	r3,0(r2)
 4014f94:	e0bffd17 	ldw	r2,-12(fp)
 4014f98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4014f9c:	e0bffc17 	ldw	r2,-16(fp)
 4014fa0:	10c00017 	ldw	r3,0(r2)
 4014fa4:	e0bffd17 	ldw	r2,-12(fp)
 4014fa8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4014fac:	e0fffc17 	ldw	r3,-16(fp)
 4014fb0:	e0bffd17 	ldw	r2,-12(fp)
 4014fb4:	18800015 	stw	r2,0(r3)
 4014fb8:	00810174 	movhi	r2,1029
 4014fbc:	1081bc04 	addi	r2,r2,1776
 4014fc0:	10800003 	ldbu	r2,0(r2)
 4014fc4:	11403fcc 	andi	r5,r2,255
 4014fc8:	e0bfff17 	ldw	r2,-4(fp)
 4014fcc:	10c00724 	muli	r3,r2,28
 4014fd0:	008101b4 	movhi	r2,1030
 4014fd4:	10a0ab04 	addi	r2,r2,-32084
 4014fd8:	1889883a 	add	r4,r3,r2
 4014fdc:	00c101b4 	movhi	r3,1030
 4014fe0:	18e0eb04 	addi	r3,r3,-31828
 4014fe4:	28800324 	muli	r2,r5,12
 4014fe8:	10c5883a 	add	r2,r2,r3
 4014fec:	11000015 	stw	r4,0(r2)
 4014ff0:	00810174 	movhi	r2,1029
 4014ff4:	1081bc04 	addi	r2,r2,1776
 4014ff8:	10800003 	ldbu	r2,0(r2)
 4014ffc:	10803fcc 	andi	r2,r2,255
 4015000:	00c101b4 	movhi	r3,1030
 4015004:	18e0eb04 	addi	r3,r3,-31828
 4015008:	10800324 	muli	r2,r2,12
 401500c:	10c5883a 	add	r2,r2,r3
 4015010:	10c00104 	addi	r3,r2,4
 4015014:	00804034 	movhi	r2,256
 4015018:	10840004 	addi	r2,r2,4096
 401501c:	18800015 	stw	r2,0(r3)
 4015020:	00810174 	movhi	r2,1029
 4015024:	1081bc04 	addi	r2,r2,1776
 4015028:	10800003 	ldbu	r2,0(r2)
 401502c:	11003fcc 	andi	r4,r2,255
 4015030:	e0bfff17 	ldw	r2,-4(fp)
 4015034:	100b883a 	mov	r5,r2
 4015038:	00c101b4 	movhi	r3,1030
 401503c:	18e0eb04 	addi	r3,r3,-31828
 4015040:	20800324 	muli	r2,r4,12
 4015044:	10c5883a 	add	r2,r2,r3
 4015048:	10800204 	addi	r2,r2,8
 401504c:	11400005 	stb	r5,0(r2)
 4015050:	00810174 	movhi	r2,1029
 4015054:	1081bc04 	addi	r2,r2,1776
 4015058:	10800003 	ldbu	r2,0(r2)
 401505c:	10800044 	addi	r2,r2,1
 4015060:	1007883a 	mov	r3,r2
 4015064:	00810174 	movhi	r2,1029
 4015068:	1081bc04 	addi	r2,r2,1776
 401506c:	10c00005 	stb	r3,0(r2)
 4015070:	e0bfff17 	ldw	r2,-4(fp)
 4015074:	10800044 	addi	r2,r2,1
 4015078:	e0bfff15 	stw	r2,-4(fp)
 401507c:	e0ffff17 	ldw	r3,-4(fp)
 4015080:	e0bffe17 	ldw	r2,-8(fp)
 4015084:	18bf9716 	blt	r3,r2,4014ee4 <alt_sys_init+0x98>
}
 4015088:	e037883a 	mov	sp,fp
 401508c:	dfc00117 	ldw	ra,4(sp)
 4015090:	df000017 	ldw	fp,0(sp)
 4015094:	dec00204 	addi	sp,sp,8
 4015098:	f800283a 	ret

0401509c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401509c:	defffd04 	addi	sp,sp,-12
 40150a0:	dfc00215 	stw	ra,8(sp)
 40150a4:	df000115 	stw	fp,4(sp)
 40150a8:	df000104 	addi	fp,sp,4
 40150ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40150b0:	e13fff17 	ldw	r4,-4(fp)
 40150b4:	01410174 	movhi	r5,1029
 40150b8:	2979ff04 	addi	r5,r5,-6148
 40150bc:	40352c80 	call	40352c8 <alt_dev_llist_insert>
}
 40150c0:	e037883a 	mov	sp,fp
 40150c4:	dfc00117 	ldw	ra,4(sp)
 40150c8:	df000017 	ldw	fp,0(sp)
 40150cc:	dec00204 	addi	sp,sp,8
 40150d0:	f800283a 	ret

040150d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40150d4:	defffa04 	addi	sp,sp,-24
 40150d8:	dfc00515 	stw	ra,20(sp)
 40150dc:	df000415 	stw	fp,16(sp)
 40150e0:	df000404 	addi	fp,sp,16
 40150e4:	e13ffd15 	stw	r4,-12(fp)
 40150e8:	e17ffe15 	stw	r5,-8(fp)
 40150ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40150f0:	e0bffd17 	ldw	r2,-12(fp)
 40150f4:	10800017 	ldw	r2,0(r2)
 40150f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40150fc:	e0bffc17 	ldw	r2,-16(fp)
 4015100:	11000a04 	addi	r4,r2,40
 4015104:	e0bffd17 	ldw	r2,-12(fp)
 4015108:	11c00217 	ldw	r7,8(r2)
 401510c:	e17ffe17 	ldw	r5,-8(fp)
 4015110:	e1bfff17 	ldw	r6,-4(fp)
 4015114:	40158940 	call	4015894 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4015118:	e037883a 	mov	sp,fp
 401511c:	dfc00117 	ldw	ra,4(sp)
 4015120:	df000017 	ldw	fp,0(sp)
 4015124:	dec00204 	addi	sp,sp,8
 4015128:	f800283a 	ret

0401512c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401512c:	defffa04 	addi	sp,sp,-24
 4015130:	dfc00515 	stw	ra,20(sp)
 4015134:	df000415 	stw	fp,16(sp)
 4015138:	df000404 	addi	fp,sp,16
 401513c:	e13ffd15 	stw	r4,-12(fp)
 4015140:	e17ffe15 	stw	r5,-8(fp)
 4015144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015148:	e0bffd17 	ldw	r2,-12(fp)
 401514c:	10800017 	ldw	r2,0(r2)
 4015150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4015154:	e0bffc17 	ldw	r2,-16(fp)
 4015158:	11000a04 	addi	r4,r2,40
 401515c:	e0bffd17 	ldw	r2,-12(fp)
 4015160:	11c00217 	ldw	r7,8(r2)
 4015164:	e17ffe17 	ldw	r5,-8(fp)
 4015168:	e1bfff17 	ldw	r6,-4(fp)
 401516c:	4015b540 	call	4015b54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4015170:	e037883a 	mov	sp,fp
 4015174:	dfc00117 	ldw	ra,4(sp)
 4015178:	df000017 	ldw	fp,0(sp)
 401517c:	dec00204 	addi	sp,sp,8
 4015180:	f800283a 	ret

04015184 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4015184:	defffc04 	addi	sp,sp,-16
 4015188:	dfc00315 	stw	ra,12(sp)
 401518c:	df000215 	stw	fp,8(sp)
 4015190:	df000204 	addi	fp,sp,8
 4015194:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015198:	e0bfff17 	ldw	r2,-4(fp)
 401519c:	10800017 	ldw	r2,0(r2)
 40151a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40151a4:	e0bffe17 	ldw	r2,-8(fp)
 40151a8:	11000a04 	addi	r4,r2,40
 40151ac:	e0bfff17 	ldw	r2,-4(fp)
 40151b0:	11400217 	ldw	r5,8(r2)
 40151b4:	401572c0 	call	401572c <altera_avalon_jtag_uart_close>
}
 40151b8:	e037883a 	mov	sp,fp
 40151bc:	dfc00117 	ldw	ra,4(sp)
 40151c0:	df000017 	ldw	fp,0(sp)
 40151c4:	dec00204 	addi	sp,sp,8
 40151c8:	f800283a 	ret

040151cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40151cc:	defffa04 	addi	sp,sp,-24
 40151d0:	dfc00515 	stw	ra,20(sp)
 40151d4:	df000415 	stw	fp,16(sp)
 40151d8:	df000404 	addi	fp,sp,16
 40151dc:	e13ffd15 	stw	r4,-12(fp)
 40151e0:	e17ffe15 	stw	r5,-8(fp)
 40151e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40151e8:	e0bffd17 	ldw	r2,-12(fp)
 40151ec:	10800017 	ldw	r2,0(r2)
 40151f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40151f4:	e0bffc17 	ldw	r2,-16(fp)
 40151f8:	11000a04 	addi	r4,r2,40
 40151fc:	e17ffe17 	ldw	r5,-8(fp)
 4015200:	e1bfff17 	ldw	r6,-4(fp)
 4015204:	40157a00 	call	40157a0 <altera_avalon_jtag_uart_ioctl>
}
 4015208:	e037883a 	mov	sp,fp
 401520c:	dfc00117 	ldw	ra,4(sp)
 4015210:	df000017 	ldw	fp,0(sp)
 4015214:	dec00204 	addi	sp,sp,8
 4015218:	f800283a 	ret

0401521c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401521c:	defff404 	addi	sp,sp,-48
 4015220:	dfc00b15 	stw	ra,44(sp)
 4015224:	df000a15 	stw	fp,40(sp)
 4015228:	df000a04 	addi	fp,sp,40
 401522c:	e13ffd15 	stw	r4,-12(fp)
 4015230:	e17ffe15 	stw	r5,-8(fp)
 4015234:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 4015238:	e0bffd17 	ldw	r2,-12(fp)
 401523c:	10800c04 	addi	r2,r2,48
 4015240:	e0bffb15 	stw	r2,-20(fp)
 4015244:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 4015248:	e13ffc0b 	ldhu	r4,-16(fp)
 401524c:	e17ffc84 	addi	r5,fp,-14
 4015250:	400f1380 	call	400f138 <OSFlagCreate>
 4015254:	1007883a 	mov	r3,r2
 4015258:	e0bffb17 	ldw	r2,-20(fp)
 401525c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 4015260:	e0bffd17 	ldw	r2,-12(fp)
 4015264:	10800a04 	addi	r2,r2,40
 4015268:	e0bff915 	stw	r2,-28(fp)
 401526c:	00800044 	movi	r2,1
 4015270:	e0bffa0d 	sth	r2,-24(fp)
 4015274:	e13ffa0b 	ldhu	r4,-24(fp)
 4015278:	401233c0 	call	401233c <OSSemCreate>
 401527c:	1007883a 	mov	r3,r2
 4015280:	e0bff917 	ldw	r2,-28(fp)
 4015284:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 4015288:	e0bffd17 	ldw	r2,-12(fp)
 401528c:	10800b04 	addi	r2,r2,44
 4015290:	e0bff715 	stw	r2,-36(fp)
 4015294:	00800044 	movi	r2,1
 4015298:	e0bff80d 	sth	r2,-32(fp)
 401529c:	e13ff80b 	ldhu	r4,-32(fp)
 40152a0:	401233c0 	call	401233c <OSSemCreate>
 40152a4:	1007883a 	mov	r3,r2
 40152a8:	e0bff717 	ldw	r2,-36(fp)
 40152ac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40152b0:	e0fffd17 	ldw	r3,-12(fp)
 40152b4:	00800044 	movi	r2,1
 40152b8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40152bc:	e0bffd17 	ldw	r2,-12(fp)
 40152c0:	10800017 	ldw	r2,0(r2)
 40152c4:	11000104 	addi	r4,r2,4
 40152c8:	e0bffd17 	ldw	r2,-12(fp)
 40152cc:	10800817 	ldw	r2,32(r2)
 40152d0:	1007883a 	mov	r3,r2
 40152d4:	2005883a 	mov	r2,r4
 40152d8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40152dc:	e13ffe17 	ldw	r4,-8(fp)
 40152e0:	e17fff17 	ldw	r5,-4(fp)
 40152e4:	d8000015 	stw	zero,0(sp)
 40152e8:	01810074 	movhi	r6,1025
 40152ec:	3194d504 	addi	r6,r6,21332
 40152f0:	e1fffd17 	ldw	r7,-12(fp)
 40152f4:	40355680 	call	4035568 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40152f8:	e0bffd17 	ldw	r2,-12(fp)
 40152fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4015300:	e0bffd17 	ldw	r2,-12(fp)
 4015304:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4015308:	00810174 	movhi	r2,1029
 401530c:	1081f404 	addi	r2,r2,2000
 4015310:	10800017 	ldw	r2,0(r2)
 4015314:	100b883a 	mov	r5,r2
 4015318:	01810074 	movhi	r6,1025
 401531c:	31958604 	addi	r6,r6,22040
 4015320:	e1fffd17 	ldw	r7,-12(fp)
 4015324:	4034fa80 	call	4034fa8 <alt_alarm_start>
 4015328:	1004403a 	cmpge	r2,r2,zero
 401532c:	1000041e 	bne	r2,zero,4015340 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4015330:	e0fffd17 	ldw	r3,-12(fp)
 4015334:	00a00034 	movhi	r2,32768
 4015338:	10bfffc4 	addi	r2,r2,-1
 401533c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4015340:	e037883a 	mov	sp,fp
 4015344:	dfc00117 	ldw	ra,4(sp)
 4015348:	df000017 	ldw	fp,0(sp)
 401534c:	dec00204 	addi	sp,sp,8
 4015350:	f800283a 	ret

04015354 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4015354:	defff204 	addi	sp,sp,-56
 4015358:	dfc00d15 	stw	ra,52(sp)
 401535c:	df000c15 	stw	fp,48(sp)
 4015360:	df000c04 	addi	fp,sp,48
 4015364:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4015368:	e0bfff17 	ldw	r2,-4(fp)
 401536c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 4015370:	e0bffd17 	ldw	r2,-12(fp)
 4015374:	10800017 	ldw	r2,0(r2)
 4015378:	e0bffc15 	stw	r2,-16(fp)
 401537c:	00000006 	br	4015380 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4015380:	e0bffc17 	ldw	r2,-16(fp)
 4015384:	10800104 	addi	r2,r2,4
 4015388:	10800037 	ldwio	r2,0(r2)
 401538c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4015390:	e0bffb17 	ldw	r2,-20(fp)
 4015394:	1080c00c 	andi	r2,r2,768
 4015398:	1005003a 	cmpeq	r2,r2,zero
 401539c:	1000991e 	bne	r2,zero,4015604 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40153a0:	e0bffb17 	ldw	r2,-20(fp)
 40153a4:	1080400c 	andi	r2,r2,256
 40153a8:	1005003a 	cmpeq	r2,r2,zero
 40153ac:	1000481e 	bne	r2,zero,40154d0 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40153b0:	00800074 	movhi	r2,1
 40153b4:	e0bffa15 	stw	r2,-24(fp)
 40153b8:	00000006 	br	40153bc <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40153bc:	e0bffd17 	ldw	r2,-12(fp)
 40153c0:	10800d17 	ldw	r2,52(r2)
 40153c4:	10800044 	addi	r2,r2,1
 40153c8:	1081ffcc 	andi	r2,r2,2047
 40153cc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 40153d0:	e0bffd17 	ldw	r2,-12(fp)
 40153d4:	10c00e17 	ldw	r3,56(r2)
 40153d8:	e0bff917 	ldw	r2,-28(fp)
 40153dc:	18802826 	beq	r3,r2,4015480 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40153e0:	e0bffc17 	ldw	r2,-16(fp)
 40153e4:	10800037 	ldwio	r2,0(r2)
 40153e8:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40153ec:	e0bffa17 	ldw	r2,-24(fp)
 40153f0:	10a0000c 	andi	r2,r2,32768
 40153f4:	1005003a 	cmpeq	r2,r2,zero
 40153f8:	1000211e 	bne	r2,zero,4015480 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40153fc:	e0bffd17 	ldw	r2,-12(fp)
 4015400:	10c00d17 	ldw	r3,52(r2)
 4015404:	e0bffa17 	ldw	r2,-24(fp)
 4015408:	1009883a 	mov	r4,r2
 401540c:	e0bffd17 	ldw	r2,-12(fp)
 4015410:	1885883a 	add	r2,r3,r2
 4015414:	10801104 	addi	r2,r2,68
 4015418:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401541c:	e0bffd17 	ldw	r2,-12(fp)
 4015420:	10800d17 	ldw	r2,52(r2)
 4015424:	10800044 	addi	r2,r2,1
 4015428:	10c1ffcc 	andi	r3,r2,2047
 401542c:	e0bffd17 	ldw	r2,-12(fp)
 4015430:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 4015434:	e0bffd17 	ldw	r2,-12(fp)
 4015438:	10800c17 	ldw	r2,48(r2)
 401543c:	e0bff615 	stw	r2,-40(fp)
 4015440:	00800044 	movi	r2,1
 4015444:	e0bff70d 	sth	r2,-36(fp)
 4015448:	00800044 	movi	r2,1
 401544c:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4015450:	00810174 	movhi	r2,1029
 4015454:	1081a744 	addi	r2,r2,1693
 4015458:	10800003 	ldbu	r2,0(r2)
 401545c:	10803fcc 	andi	r2,r2,255
 4015460:	1005003a 	cmpeq	r2,r2,zero
 4015464:	103fd51e 	bne	r2,zero,40153bc <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 4015468:	e17ff70b 	ldhu	r5,-36(fp)
 401546c:	e1bff783 	ldbu	r6,-34(fp)
 4015470:	e1fffe04 	addi	r7,fp,-8
 4015474:	e13ff617 	ldw	r4,-40(fp)
 4015478:	400fe600 	call	400fe60 <OSFlagPost>
    return err;
 401547c:	003fcf06 	br	40153bc <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4015480:	e0bffa17 	ldw	r2,-24(fp)
 4015484:	10bfffec 	andhi	r2,r2,65535
 4015488:	1005003a 	cmpeq	r2,r2,zero
 401548c:	1000101e 	bne	r2,zero,40154d0 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015490:	e0bffd17 	ldw	r2,-12(fp)
 4015494:	10c00817 	ldw	r3,32(r2)
 4015498:	00bfff84 	movi	r2,-2
 401549c:	1886703a 	and	r3,r3,r2
 40154a0:	e0bffd17 	ldw	r2,-12(fp)
 40154a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40154a8:	e0bffc17 	ldw	r2,-16(fp)
 40154ac:	11000104 	addi	r4,r2,4
 40154b0:	e0bffd17 	ldw	r2,-12(fp)
 40154b4:	10800817 	ldw	r2,32(r2)
 40154b8:	1007883a 	mov	r3,r2
 40154bc:	2005883a 	mov	r2,r4
 40154c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40154c4:	e0bffc17 	ldw	r2,-16(fp)
 40154c8:	10800104 	addi	r2,r2,4
 40154cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40154d0:	e0bffb17 	ldw	r2,-20(fp)
 40154d4:	1080800c 	andi	r2,r2,512
 40154d8:	1005003a 	cmpeq	r2,r2,zero
 40154dc:	103fa81e 	bne	r2,zero,4015380 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40154e0:	e0bffb17 	ldw	r2,-20(fp)
 40154e4:	10bfffec 	andhi	r2,r2,65535
 40154e8:	1004d43a 	srli	r2,r2,16
 40154ec:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40154f0:	00002706 	br	4015590 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40154f4:	e13ffc17 	ldw	r4,-16(fp)
 40154f8:	e0bffd17 	ldw	r2,-12(fp)
 40154fc:	10c01017 	ldw	r3,64(r2)
 4015500:	e0bffd17 	ldw	r2,-12(fp)
 4015504:	1885883a 	add	r2,r3,r2
 4015508:	10821104 	addi	r2,r2,2116
 401550c:	10800003 	ldbu	r2,0(r2)
 4015510:	10c03fcc 	andi	r3,r2,255
 4015514:	18c0201c 	xori	r3,r3,128
 4015518:	18ffe004 	addi	r3,r3,-128
 401551c:	2005883a 	mov	r2,r4
 4015520:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015524:	e0bffd17 	ldw	r2,-12(fp)
 4015528:	10801017 	ldw	r2,64(r2)
 401552c:	10800044 	addi	r2,r2,1
 4015530:	10c1ffcc 	andi	r3,r2,2047
 4015534:	e0bffd17 	ldw	r2,-12(fp)
 4015538:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 401553c:	e0bffd17 	ldw	r2,-12(fp)
 4015540:	10800c17 	ldw	r2,48(r2)
 4015544:	e0bff415 	stw	r2,-48(fp)
 4015548:	00800084 	movi	r2,2
 401554c:	e0bff50d 	sth	r2,-44(fp)
 4015550:	00800044 	movi	r2,1
 4015554:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4015558:	00810174 	movhi	r2,1029
 401555c:	1081a744 	addi	r2,r2,1693
 4015560:	10800003 	ldbu	r2,0(r2)
 4015564:	10803fcc 	andi	r2,r2,255
 4015568:	1005003a 	cmpeq	r2,r2,zero
 401556c:	1000051e 	bne	r2,zero,4015584 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 4015570:	e17ff50b 	ldhu	r5,-44(fp)
 4015574:	e1bff583 	ldbu	r6,-42(fp)
 4015578:	e1fffe44 	addi	r7,fp,-7
 401557c:	e13ff417 	ldw	r4,-48(fp)
 4015580:	400fe600 	call	400fe60 <OSFlagPost>

        space--;
 4015584:	e0bff817 	ldw	r2,-32(fp)
 4015588:	10bfffc4 	addi	r2,r2,-1
 401558c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4015590:	e0bff817 	ldw	r2,-32(fp)
 4015594:	1005003a 	cmpeq	r2,r2,zero
 4015598:	1000051e 	bne	r2,zero,40155b0 <altera_avalon_jtag_uart_irq+0x25c>
 401559c:	e0bffd17 	ldw	r2,-12(fp)
 40155a0:	10c01017 	ldw	r3,64(r2)
 40155a4:	e0bffd17 	ldw	r2,-12(fp)
 40155a8:	10800f17 	ldw	r2,60(r2)
 40155ac:	18bfd11e 	bne	r3,r2,40154f4 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40155b0:	e0bff817 	ldw	r2,-32(fp)
 40155b4:	1005003a 	cmpeq	r2,r2,zero
 40155b8:	103f711e 	bne	r2,zero,4015380 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40155bc:	e0bffd17 	ldw	r2,-12(fp)
 40155c0:	10c00817 	ldw	r3,32(r2)
 40155c4:	00bfff44 	movi	r2,-3
 40155c8:	1886703a 	and	r3,r3,r2
 40155cc:	e0bffd17 	ldw	r2,-12(fp)
 40155d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40155d4:	e0bffd17 	ldw	r2,-12(fp)
 40155d8:	10800017 	ldw	r2,0(r2)
 40155dc:	11000104 	addi	r4,r2,4
 40155e0:	e0bffd17 	ldw	r2,-12(fp)
 40155e4:	10800817 	ldw	r2,32(r2)
 40155e8:	1007883a 	mov	r3,r2
 40155ec:	2005883a 	mov	r2,r4
 40155f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40155f4:	e0bffc17 	ldw	r2,-16(fp)
 40155f8:	10800104 	addi	r2,r2,4
 40155fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4015600:	003f5f06 	br	4015380 <altera_avalon_jtag_uart_irq+0x2c>
}
 4015604:	e037883a 	mov	sp,fp
 4015608:	dfc00117 	ldw	ra,4(sp)
 401560c:	df000017 	ldw	fp,0(sp)
 4015610:	dec00204 	addi	sp,sp,8
 4015614:	f800283a 	ret

04015618 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4015618:	defff804 	addi	sp,sp,-32
 401561c:	dfc00715 	stw	ra,28(sp)
 4015620:	df000615 	stw	fp,24(sp)
 4015624:	df000604 	addi	fp,sp,24
 4015628:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401562c:	e0bfff17 	ldw	r2,-4(fp)
 4015630:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4015634:	e0bffd17 	ldw	r2,-12(fp)
 4015638:	10800017 	ldw	r2,0(r2)
 401563c:	10800104 	addi	r2,r2,4
 4015640:	10800037 	ldwio	r2,0(r2)
 4015644:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4015648:	e0bffc17 	ldw	r2,-16(fp)
 401564c:	1081000c 	andi	r2,r2,1024
 4015650:	1005003a 	cmpeq	r2,r2,zero
 4015654:	10000c1e 	bne	r2,zero,4015688 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4015658:	e0bffd17 	ldw	r2,-12(fp)
 401565c:	10800017 	ldw	r2,0(r2)
 4015660:	11000104 	addi	r4,r2,4
 4015664:	e0bffd17 	ldw	r2,-12(fp)
 4015668:	10800817 	ldw	r2,32(r2)
 401566c:	10810014 	ori	r2,r2,1024
 4015670:	1007883a 	mov	r3,r2
 4015674:	2005883a 	mov	r2,r4
 4015678:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 401567c:	e0bffd17 	ldw	r2,-12(fp)
 4015680:	10000915 	stw	zero,36(r2)
 4015684:	00002106 	br	401570c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4015688:	e0bffd17 	ldw	r2,-12(fp)
 401568c:	10c00917 	ldw	r3,36(r2)
 4015690:	00a00034 	movhi	r2,32768
 4015694:	10bfff04 	addi	r2,r2,-4
 4015698:	10c01c36 	bltu	r2,r3,401570c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 401569c:	e0bffd17 	ldw	r2,-12(fp)
 40156a0:	10800917 	ldw	r2,36(r2)
 40156a4:	10c00044 	addi	r3,r2,1
 40156a8:	e0bffd17 	ldw	r2,-12(fp)
 40156ac:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 40156b0:	e0bffd17 	ldw	r2,-12(fp)
 40156b4:	10c00917 	ldw	r3,36(r2)
 40156b8:	e0bffd17 	ldw	r2,-12(fp)
 40156bc:	10800117 	ldw	r2,4(r2)
 40156c0:	18801236 	bltu	r3,r2,401570c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 40156c4:	e0bffd17 	ldw	r2,-12(fp)
 40156c8:	10800c17 	ldw	r2,48(r2)
 40156cc:	e0bffa15 	stw	r2,-24(fp)
 40156d0:	00800104 	movi	r2,4
 40156d4:	e0bffb0d 	sth	r2,-20(fp)
 40156d8:	00800044 	movi	r2,1
 40156dc:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 40156e0:	00810174 	movhi	r2,1029
 40156e4:	1081a744 	addi	r2,r2,1693
 40156e8:	10800003 	ldbu	r2,0(r2)
 40156ec:	10803fcc 	andi	r2,r2,255
 40156f0:	1005003a 	cmpeq	r2,r2,zero
 40156f4:	1000051e 	bne	r2,zero,401570c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 40156f8:	e17ffb0b 	ldhu	r5,-20(fp)
 40156fc:	e1bffb83 	ldbu	r6,-18(fp)
 4015700:	e1fffe04 	addi	r7,fp,-8
 4015704:	e13ffa17 	ldw	r4,-24(fp)
 4015708:	400fe600 	call	400fe60 <OSFlagPost>
 401570c:	00810174 	movhi	r2,1029
 4015710:	1081f404 	addi	r2,r2,2000
 4015714:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 4015718:	e037883a 	mov	sp,fp
 401571c:	dfc00117 	ldw	ra,4(sp)
 4015720:	df000017 	ldw	fp,0(sp)
 4015724:	dec00204 	addi	sp,sp,8
 4015728:	f800283a 	ret

0401572c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401572c:	defffc04 	addi	sp,sp,-16
 4015730:	df000315 	stw	fp,12(sp)
 4015734:	df000304 	addi	fp,sp,12
 4015738:	e13ffd15 	stw	r4,-12(fp)
 401573c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4015740:	00000706 	br	4015760 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 4015744:	e0bffe17 	ldw	r2,-8(fp)
 4015748:	1090000c 	andi	r2,r2,16384
 401574c:	1005003a 	cmpeq	r2,r2,zero
 4015750:	1000031e 	bne	r2,zero,4015760 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 4015754:	00bffd44 	movi	r2,-11
 4015758:	e0bfff15 	stw	r2,-4(fp)
 401575c:	00000b06 	br	401578c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4015760:	e0bffd17 	ldw	r2,-12(fp)
 4015764:	10c01017 	ldw	r3,64(r2)
 4015768:	e0bffd17 	ldw	r2,-12(fp)
 401576c:	10800f17 	ldw	r2,60(r2)
 4015770:	18800526 	beq	r3,r2,4015788 <altera_avalon_jtag_uart_close+0x5c>
 4015774:	e0bffd17 	ldw	r2,-12(fp)
 4015778:	10c00917 	ldw	r3,36(r2)
 401577c:	e0bffd17 	ldw	r2,-12(fp)
 4015780:	10800117 	ldw	r2,4(r2)
 4015784:	18bfef36 	bltu	r3,r2,4015744 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4015788:	e03fff15 	stw	zero,-4(fp)
 401578c:	e0bfff17 	ldw	r2,-4(fp)
}
 4015790:	e037883a 	mov	sp,fp
 4015794:	df000017 	ldw	fp,0(sp)
 4015798:	dec00104 	addi	sp,sp,4
 401579c:	f800283a 	ret

040157a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40157a0:	defff804 	addi	sp,sp,-32
 40157a4:	df000715 	stw	fp,28(sp)
 40157a8:	df000704 	addi	fp,sp,28
 40157ac:	e13ffb15 	stw	r4,-20(fp)
 40157b0:	e17ffc15 	stw	r5,-16(fp)
 40157b4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 40157b8:	00bff9c4 	movi	r2,-25
 40157bc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 40157c0:	e0bffc17 	ldw	r2,-16(fp)
 40157c4:	e0bfff15 	stw	r2,-4(fp)
 40157c8:	e0ffff17 	ldw	r3,-4(fp)
 40157cc:	189a8060 	cmpeqi	r2,r3,27137
 40157d0:	1000041e 	bne	r2,zero,40157e4 <altera_avalon_jtag_uart_ioctl+0x44>
 40157d4:	e0ffff17 	ldw	r3,-4(fp)
 40157d8:	189a80a0 	cmpeqi	r2,r3,27138
 40157dc:	10001b1e 	bne	r2,zero,401584c <altera_avalon_jtag_uart_ioctl+0xac>
 40157e0:	00002706 	br	4015880 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40157e4:	e0bffb17 	ldw	r2,-20(fp)
 40157e8:	10c00117 	ldw	r3,4(r2)
 40157ec:	00a00034 	movhi	r2,32768
 40157f0:	10bfffc4 	addi	r2,r2,-1
 40157f4:	18802226 	beq	r3,r2,4015880 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 40157f8:	e0bffd17 	ldw	r2,-12(fp)
 40157fc:	10800017 	ldw	r2,0(r2)
 4015800:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4015804:	e0bff917 	ldw	r2,-28(fp)
 4015808:	10800090 	cmplti	r2,r2,2
 401580c:	1000071e 	bne	r2,zero,401582c <altera_avalon_jtag_uart_ioctl+0x8c>
 4015810:	e0fff917 	ldw	r3,-28(fp)
 4015814:	00a00034 	movhi	r2,32768
 4015818:	10bfffc4 	addi	r2,r2,-1
 401581c:	18800326 	beq	r3,r2,401582c <altera_avalon_jtag_uart_ioctl+0x8c>
 4015820:	e0bff917 	ldw	r2,-28(fp)
 4015824:	e0bffe15 	stw	r2,-8(fp)
 4015828:	00000306 	br	4015838 <altera_avalon_jtag_uart_ioctl+0x98>
 401582c:	00e00034 	movhi	r3,32768
 4015830:	18ffff84 	addi	r3,r3,-2
 4015834:	e0fffe15 	stw	r3,-8(fp)
 4015838:	e0bffb17 	ldw	r2,-20(fp)
 401583c:	e0fffe17 	ldw	r3,-8(fp)
 4015840:	10c00115 	stw	r3,4(r2)
      rc = 0;
 4015844:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4015848:	00000d06 	br	4015880 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401584c:	e0bffb17 	ldw	r2,-20(fp)
 4015850:	10c00117 	ldw	r3,4(r2)
 4015854:	00a00034 	movhi	r2,32768
 4015858:	10bfffc4 	addi	r2,r2,-1
 401585c:	18800826 	beq	r3,r2,4015880 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4015860:	e13ffd17 	ldw	r4,-12(fp)
 4015864:	e0bffb17 	ldw	r2,-20(fp)
 4015868:	10c00917 	ldw	r3,36(r2)
 401586c:	e0bffb17 	ldw	r2,-20(fp)
 4015870:	10800117 	ldw	r2,4(r2)
 4015874:	1885803a 	cmpltu	r2,r3,r2
 4015878:	20800015 	stw	r2,0(r4)
      rc = 0;
 401587c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 4015880:	e0bffa17 	ldw	r2,-24(fp)
}
 4015884:	e037883a 	mov	sp,fp
 4015888:	df000017 	ldw	fp,0(sp)
 401588c:	dec00104 	addi	sp,sp,4
 4015890:	f800283a 	ret

04015894 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4015894:	deffeb04 	addi	sp,sp,-84
 4015898:	dfc01415 	stw	ra,80(sp)
 401589c:	df001315 	stw	fp,76(sp)
 40158a0:	df001304 	addi	fp,sp,76
 40158a4:	e13ffb15 	stw	r4,-20(fp)
 40158a8:	e17ffc15 	stw	r5,-16(fp)
 40158ac:	e1bffd15 	stw	r6,-12(fp)
 40158b0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 40158b4:	e0bffc17 	ldw	r2,-16(fp)
 40158b8:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 40158bc:	e0bffb17 	ldw	r2,-20(fp)
 40158c0:	10800a17 	ldw	r2,40(r2)
 40158c4:	e0bff315 	stw	r2,-52(fp)
 40158c8:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 40158cc:	e17ff40b 	ldhu	r5,-48(fp)
 40158d0:	e1bffa44 	addi	r6,fp,-23
 40158d4:	e13ff317 	ldw	r4,-52(fp)
 40158d8:	40126f00 	call	40126f0 <OSSemPend>

  while (space > 0)
 40158dc:	00006406 	br	4015a70 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40158e0:	e0bffb17 	ldw	r2,-20(fp)
 40158e4:	10800d17 	ldw	r2,52(r2)
 40158e8:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 40158ec:	e0bffb17 	ldw	r2,-20(fp)
 40158f0:	10800e17 	ldw	r2,56(r2)
 40158f4:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 40158f8:	e0fff617 	ldw	r3,-40(fp)
 40158fc:	e0bff517 	ldw	r2,-44(fp)
 4015900:	18800536 	bltu	r3,r2,4015918 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 4015904:	e0bff617 	ldw	r2,-40(fp)
 4015908:	e0fff517 	ldw	r3,-44(fp)
 401590c:	10c5c83a 	sub	r2,r2,r3
 4015910:	e0bff715 	stw	r2,-36(fp)
 4015914:	00000406 	br	4015928 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4015918:	00820004 	movi	r2,2048
 401591c:	e0fff517 	ldw	r3,-44(fp)
 4015920:	10c5c83a 	sub	r2,r2,r3
 4015924:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4015928:	e0bff717 	ldw	r2,-36(fp)
 401592c:	1005003a 	cmpeq	r2,r2,zero
 4015930:	10001f1e 	bne	r2,zero,40159b0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 4015934:	e0fffd17 	ldw	r3,-12(fp)
 4015938:	e0bff717 	ldw	r2,-36(fp)
 401593c:	1880022e 	bgeu	r3,r2,4015948 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 4015940:	e0bffd17 	ldw	r2,-12(fp)
 4015944:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4015948:	e0bffb17 	ldw	r2,-20(fp)
 401594c:	10c01104 	addi	r3,r2,68
 4015950:	e0bff517 	ldw	r2,-44(fp)
 4015954:	1887883a 	add	r3,r3,r2
 4015958:	e0bff917 	ldw	r2,-28(fp)
 401595c:	1009883a 	mov	r4,r2
 4015960:	180b883a 	mov	r5,r3
 4015964:	e1bff717 	ldw	r6,-36(fp)
 4015968:	4001de40 	call	4001de4 <memcpy>
      ptr   += n;
 401596c:	e0fff717 	ldw	r3,-36(fp)
 4015970:	e0bff917 	ldw	r2,-28(fp)
 4015974:	10c5883a 	add	r2,r2,r3
 4015978:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 401597c:	e0fffd17 	ldw	r3,-12(fp)
 4015980:	e0bff717 	ldw	r2,-36(fp)
 4015984:	1885c83a 	sub	r2,r3,r2
 4015988:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401598c:	e0fff517 	ldw	r3,-44(fp)
 4015990:	e0bff717 	ldw	r2,-36(fp)
 4015994:	1885883a 	add	r2,r3,r2
 4015998:	10c1ffcc 	andi	r3,r2,2047
 401599c:	e0bffb17 	ldw	r2,-20(fp)
 40159a0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 40159a4:	e0bffd17 	ldw	r2,-12(fp)
 40159a8:	10800048 	cmpgei	r2,r2,1
 40159ac:	103fcc1e 	bne	r2,zero,40158e0 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 40159b0:	e0fff917 	ldw	r3,-28(fp)
 40159b4:	e0bffc17 	ldw	r2,-16(fp)
 40159b8:	1880301e 	bne	r3,r2,4015a7c <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40159bc:	e0bffe17 	ldw	r2,-8(fp)
 40159c0:	1090000c 	andi	r2,r2,16384
 40159c4:	1004c03a 	cmpne	r2,r2,zero
 40159c8:	10002c1e 	bne	r2,zero,4015a7c <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 40159cc:	00810174 	movhi	r2,1029
 40159d0:	1081a744 	addi	r2,r2,1693
 40159d4:	10800003 	ldbu	r2,0(r2)
 40159d8:	10803fcc 	andi	r2,r2,255
 40159dc:	10800058 	cmpnei	r2,r2,1
 40159e0:	1000161e 	bne	r2,zero,4015a3c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 40159e4:	e0bffb17 	ldw	r2,-20(fp)
 40159e8:	10800c17 	ldw	r2,48(r2)
 40159ec:	e0bff015 	stw	r2,-64(fp)
 40159f0:	00800144 	movi	r2,5
 40159f4:	e0bff10d 	sth	r2,-60(fp)
 40159f8:	00bfe0c4 	movi	r2,-125
 40159fc:	e0bff185 	stb	r2,-58(fp)
 4015a00:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4015a04:	00810174 	movhi	r2,1029
 4015a08:	1081a744 	addi	r2,r2,1693
 4015a0c:	10800003 	ldbu	r2,0(r2)
 4015a10:	10803fcc 	andi	r2,r2,255
 4015a14:	1005003a 	cmpeq	r2,r2,zero
 4015a18:	1000111e 	bne	r2,zero,4015a60 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4015a1c:	e17ff10b 	ldhu	r5,-60(fp)
 4015a20:	e1bff183 	ldbu	r6,-58(fp)
 4015a24:	e1fff20b 	ldhu	r7,-56(fp)
 4015a28:	e0bffa04 	addi	r2,fp,-24
 4015a2c:	d8800015 	stw	r2,0(sp)
 4015a30:	e13ff017 	ldw	r4,-64(fp)
 4015a34:	400f7b40 	call	400f7b4 <OSFlagPend>
    return err;
 4015a38:	00000906 	br	4015a60 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4015a3c:	e0bffb17 	ldw	r2,-20(fp)
 4015a40:	10c00d17 	ldw	r3,52(r2)
 4015a44:	e0bff617 	ldw	r2,-40(fp)
 4015a48:	1880051e 	bne	r3,r2,4015a60 <altera_avalon_jtag_uart_read+0x1cc>
 4015a4c:	e0bffb17 	ldw	r2,-20(fp)
 4015a50:	10c00917 	ldw	r3,36(r2)
 4015a54:	e0bffb17 	ldw	r2,-20(fp)
 4015a58:	10800117 	ldw	r2,4(r2)
 4015a5c:	18bff736 	bltu	r3,r2,4015a3c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4015a60:	e0bffb17 	ldw	r2,-20(fp)
 4015a64:	10c00d17 	ldw	r3,52(r2)
 4015a68:	e0bff617 	ldw	r2,-40(fp)
 4015a6c:	18800326 	beq	r3,r2,4015a7c <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4015a70:	e0bffd17 	ldw	r2,-12(fp)
 4015a74:	10800048 	cmpgei	r2,r2,1
 4015a78:	103f991e 	bne	r2,zero,40158e0 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 4015a7c:	e0bffb17 	ldw	r2,-20(fp)
 4015a80:	11000a17 	ldw	r4,40(r2)
 4015a84:	4012ae80 	call	4012ae8 <OSSemPost>

  if (ptr != buffer)
 4015a88:	e0fff917 	ldw	r3,-28(fp)
 4015a8c:	e0bffc17 	ldw	r2,-16(fp)
 4015a90:	18801926 	beq	r3,r2,4015af8 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015a94:	0005303a 	rdctl	r2,status
 4015a98:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015a9c:	e0ffef17 	ldw	r3,-68(fp)
 4015aa0:	00bfff84 	movi	r2,-2
 4015aa4:	1884703a 	and	r2,r3,r2
 4015aa8:	1001703a 	wrctl	status,r2
  
  return context;
 4015aac:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4015ab0:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015ab4:	e0bffb17 	ldw	r2,-20(fp)
 4015ab8:	10800817 	ldw	r2,32(r2)
 4015abc:	10c00054 	ori	r3,r2,1
 4015ac0:	e0bffb17 	ldw	r2,-20(fp)
 4015ac4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015ac8:	e0bffb17 	ldw	r2,-20(fp)
 4015acc:	10800017 	ldw	r2,0(r2)
 4015ad0:	11000104 	addi	r4,r2,4
 4015ad4:	e0bffb17 	ldw	r2,-20(fp)
 4015ad8:	10800817 	ldw	r2,32(r2)
 4015adc:	1007883a 	mov	r3,r2
 4015ae0:	2005883a 	mov	r2,r4
 4015ae4:	10c00035 	stwio	r3,0(r2)
 4015ae8:	e0bff817 	ldw	r2,-32(fp)
 4015aec:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015af0:	e0bfee17 	ldw	r2,-72(fp)
 4015af4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4015af8:	e0fff917 	ldw	r3,-28(fp)
 4015afc:	e0bffc17 	ldw	r2,-16(fp)
 4015b00:	18800526 	beq	r3,r2,4015b18 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 4015b04:	e0fff917 	ldw	r3,-28(fp)
 4015b08:	e0bffc17 	ldw	r2,-16(fp)
 4015b0c:	1887c83a 	sub	r3,r3,r2
 4015b10:	e0ffff15 	stw	r3,-4(fp)
 4015b14:	00000906 	br	4015b3c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 4015b18:	e0bffe17 	ldw	r2,-8(fp)
 4015b1c:	1090000c 	andi	r2,r2,16384
 4015b20:	1005003a 	cmpeq	r2,r2,zero
 4015b24:	1000031e 	bne	r2,zero,4015b34 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 4015b28:	00bffd44 	movi	r2,-11
 4015b2c:	e0bfff15 	stw	r2,-4(fp)
 4015b30:	00000206 	br	4015b3c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 4015b34:	00bffec4 	movi	r2,-5
 4015b38:	e0bfff15 	stw	r2,-4(fp)
 4015b3c:	e0bfff17 	ldw	r2,-4(fp)
}
 4015b40:	e037883a 	mov	sp,fp
 4015b44:	dfc00117 	ldw	ra,4(sp)
 4015b48:	df000017 	ldw	fp,0(sp)
 4015b4c:	dec00204 	addi	sp,sp,8
 4015b50:	f800283a 	ret

04015b54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4015b54:	deffeb04 	addi	sp,sp,-84
 4015b58:	dfc01415 	stw	ra,80(sp)
 4015b5c:	df001315 	stw	fp,76(sp)
 4015b60:	df001304 	addi	fp,sp,76
 4015b64:	e13ffb15 	stw	r4,-20(fp)
 4015b68:	e17ffc15 	stw	r5,-16(fp)
 4015b6c:	e1bffd15 	stw	r6,-12(fp)
 4015b70:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4015b74:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4015b78:	e0bffc17 	ldw	r2,-16(fp)
 4015b7c:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 4015b80:	e0bffb17 	ldw	r2,-20(fp)
 4015b84:	10800b17 	ldw	r2,44(r2)
 4015b88:	e0bff315 	stw	r2,-52(fp)
 4015b8c:	e03ff40d 	sth	zero,-48(fp)
 4015b90:	e17ff40b 	ldhu	r5,-48(fp)
 4015b94:	e1bffa04 	addi	r6,fp,-24
 4015b98:	e13ff317 	ldw	r4,-52(fp)
 4015b9c:	40126f00 	call	40126f0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4015ba0:	00003a06 	br	4015c8c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4015ba4:	e0bffb17 	ldw	r2,-20(fp)
 4015ba8:	10800f17 	ldw	r2,60(r2)
 4015bac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4015bb0:	e0bffb17 	ldw	r2,-20(fp)
 4015bb4:	10801017 	ldw	r2,64(r2)
 4015bb8:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 4015bbc:	e0fff917 	ldw	r3,-28(fp)
 4015bc0:	e0bff817 	ldw	r2,-32(fp)
 4015bc4:	1880062e 	bgeu	r3,r2,4015be0 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 4015bc8:	e0fff817 	ldw	r3,-32(fp)
 4015bcc:	e0bff917 	ldw	r2,-28(fp)
 4015bd0:	1885c83a 	sub	r2,r3,r2
 4015bd4:	10bfffc4 	addi	r2,r2,-1
 4015bd8:	e0bff715 	stw	r2,-36(fp)
 4015bdc:	00000c06 	br	4015c10 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 4015be0:	e0bff817 	ldw	r2,-32(fp)
 4015be4:	1005003a 	cmpeq	r2,r2,zero
 4015be8:	1000051e 	bne	r2,zero,4015c00 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4015bec:	00820004 	movi	r2,2048
 4015bf0:	e0fff917 	ldw	r3,-28(fp)
 4015bf4:	10c5c83a 	sub	r2,r2,r3
 4015bf8:	e0bff715 	stw	r2,-36(fp)
 4015bfc:	00000406 	br	4015c10 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4015c00:	0081ffc4 	movi	r2,2047
 4015c04:	e0fff917 	ldw	r3,-28(fp)
 4015c08:	10c5c83a 	sub	r2,r2,r3
 4015c0c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 4015c10:	e0bff717 	ldw	r2,-36(fp)
 4015c14:	1005003a 	cmpeq	r2,r2,zero
 4015c18:	10001f1e 	bne	r2,zero,4015c98 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 4015c1c:	e0fffd17 	ldw	r3,-12(fp)
 4015c20:	e0bff717 	ldw	r2,-36(fp)
 4015c24:	1880022e 	bgeu	r3,r2,4015c30 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 4015c28:	e0bffd17 	ldw	r2,-12(fp)
 4015c2c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4015c30:	e0bffb17 	ldw	r2,-20(fp)
 4015c34:	10c21104 	addi	r3,r2,2116
 4015c38:	e0bff917 	ldw	r2,-28(fp)
 4015c3c:	1885883a 	add	r2,r3,r2
 4015c40:	e0fffc17 	ldw	r3,-16(fp)
 4015c44:	1009883a 	mov	r4,r2
 4015c48:	180b883a 	mov	r5,r3
 4015c4c:	e1bff717 	ldw	r6,-36(fp)
 4015c50:	4001de40 	call	4001de4 <memcpy>
      ptr   += n;
 4015c54:	e0fff717 	ldw	r3,-36(fp)
 4015c58:	e0bffc17 	ldw	r2,-16(fp)
 4015c5c:	10c5883a 	add	r2,r2,r3
 4015c60:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 4015c64:	e0fffd17 	ldw	r3,-12(fp)
 4015c68:	e0bff717 	ldw	r2,-36(fp)
 4015c6c:	1885c83a 	sub	r2,r3,r2
 4015c70:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015c74:	e0fff917 	ldw	r3,-28(fp)
 4015c78:	e0bff717 	ldw	r2,-36(fp)
 4015c7c:	1885883a 	add	r2,r3,r2
 4015c80:	10c1ffcc 	andi	r3,r2,2047
 4015c84:	e0bffb17 	ldw	r2,-20(fp)
 4015c88:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4015c8c:	e0bffd17 	ldw	r2,-12(fp)
 4015c90:	10800048 	cmpgei	r2,r2,1
 4015c94:	103fc31e 	bne	r2,zero,4015ba4 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015c98:	0005303a 	rdctl	r2,status
 4015c9c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015ca0:	e0fff217 	ldw	r3,-56(fp)
 4015ca4:	00bfff84 	movi	r2,-2
 4015ca8:	1884703a 	and	r2,r3,r2
 4015cac:	1001703a 	wrctl	status,r2
  
  return context;
 4015cb0:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4015cb4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4015cb8:	e0bffb17 	ldw	r2,-20(fp)
 4015cbc:	10800817 	ldw	r2,32(r2)
 4015cc0:	10c00094 	ori	r3,r2,2
 4015cc4:	e0bffb17 	ldw	r2,-20(fp)
 4015cc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015ccc:	e0bffb17 	ldw	r2,-20(fp)
 4015cd0:	10800017 	ldw	r2,0(r2)
 4015cd4:	11000104 	addi	r4,r2,4
 4015cd8:	e0bffb17 	ldw	r2,-20(fp)
 4015cdc:	10800817 	ldw	r2,32(r2)
 4015ce0:	1007883a 	mov	r3,r2
 4015ce4:	2005883a 	mov	r2,r4
 4015ce8:	10c00035 	stwio	r3,0(r2)
 4015cec:	e0bff617 	ldw	r2,-40(fp)
 4015cf0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015cf4:	e0bff117 	ldw	r2,-60(fp)
 4015cf8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4015cfc:	e0bffd17 	ldw	r2,-12(fp)
 4015d00:	10800050 	cmplti	r2,r2,1
 4015d04:	10002d1e 	bne	r2,zero,4015dbc <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 4015d08:	e0bffe17 	ldw	r2,-8(fp)
 4015d0c:	1090000c 	andi	r2,r2,16384
 4015d10:	1004c03a 	cmpne	r2,r2,zero
 4015d14:	10002c1e 	bne	r2,zero,4015dc8 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4015d18:	00810174 	movhi	r2,1029
 4015d1c:	1081a744 	addi	r2,r2,1693
 4015d20:	10800003 	ldbu	r2,0(r2)
 4015d24:	10803fcc 	andi	r2,r2,255
 4015d28:	10800058 	cmpnei	r2,r2,1
 4015d2c:	1000161e 	bne	r2,zero,4015d88 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 4015d30:	e0bffb17 	ldw	r2,-20(fp)
 4015d34:	10800c17 	ldw	r2,48(r2)
 4015d38:	e0bfee15 	stw	r2,-72(fp)
 4015d3c:	00800184 	movi	r2,6
 4015d40:	e0bfef0d 	sth	r2,-68(fp)
 4015d44:	00bfe0c4 	movi	r2,-125
 4015d48:	e0bfef85 	stb	r2,-66(fp)
 4015d4c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4015d50:	00810174 	movhi	r2,1029
 4015d54:	1081a744 	addi	r2,r2,1693
 4015d58:	10800003 	ldbu	r2,0(r2)
 4015d5c:	10803fcc 	andi	r2,r2,255
 4015d60:	1005003a 	cmpeq	r2,r2,zero
 4015d64:	1000111e 	bne	r2,zero,4015dac <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4015d68:	e17fef0b 	ldhu	r5,-68(fp)
 4015d6c:	e1bfef83 	ldbu	r6,-66(fp)
 4015d70:	e1fff00b 	ldhu	r7,-64(fp)
 4015d74:	e0bffa44 	addi	r2,fp,-23
 4015d78:	d8800015 	stw	r2,0(sp)
 4015d7c:	e13fee17 	ldw	r4,-72(fp)
 4015d80:	400f7b40 	call	400f7b4 <OSFlagPend>
    return err;
 4015d84:	00000906 	br	4015dac <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4015d88:	e0bffb17 	ldw	r2,-20(fp)
 4015d8c:	10c01017 	ldw	r3,64(r2)
 4015d90:	e0bff817 	ldw	r2,-32(fp)
 4015d94:	1880051e 	bne	r3,r2,4015dac <altera_avalon_jtag_uart_write+0x258>
 4015d98:	e0bffb17 	ldw	r2,-20(fp)
 4015d9c:	10c00917 	ldw	r3,36(r2)
 4015da0:	e0bffb17 	ldw	r2,-20(fp)
 4015da4:	10800117 	ldw	r2,4(r2)
 4015da8:	18bff736 	bltu	r3,r2,4015d88 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4015dac:	e0bffb17 	ldw	r2,-20(fp)
 4015db0:	10c01017 	ldw	r3,64(r2)
 4015db4:	e0bff817 	ldw	r2,-32(fp)
 4015db8:	18800326 	beq	r3,r2,4015dc8 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 4015dbc:	e0bffd17 	ldw	r2,-12(fp)
 4015dc0:	10800048 	cmpgei	r2,r2,1
 4015dc4:	103fb11e 	bne	r2,zero,4015c8c <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 4015dc8:	e0bffb17 	ldw	r2,-20(fp)
 4015dcc:	11000b17 	ldw	r4,44(r2)
 4015dd0:	4012ae80 	call	4012ae8 <OSSemPost>

  if (ptr != start)
 4015dd4:	e0fffc17 	ldw	r3,-16(fp)
 4015dd8:	e0bff517 	ldw	r2,-44(fp)
 4015ddc:	18800526 	beq	r3,r2,4015df4 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 4015de0:	e0fffc17 	ldw	r3,-16(fp)
 4015de4:	e0bff517 	ldw	r2,-44(fp)
 4015de8:	1887c83a 	sub	r3,r3,r2
 4015dec:	e0ffff15 	stw	r3,-4(fp)
 4015df0:	00000906 	br	4015e18 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 4015df4:	e0bffe17 	ldw	r2,-8(fp)
 4015df8:	1090000c 	andi	r2,r2,16384
 4015dfc:	1005003a 	cmpeq	r2,r2,zero
 4015e00:	1000031e 	bne	r2,zero,4015e10 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 4015e04:	00bffd44 	movi	r2,-11
 4015e08:	e0bfff15 	stw	r2,-4(fp)
 4015e0c:	00000206 	br	4015e18 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 4015e10:	00bffec4 	movi	r2,-5
 4015e14:	e0bfff15 	stw	r2,-4(fp)
 4015e18:	e0bfff17 	ldw	r2,-4(fp)
}
 4015e1c:	e037883a 	mov	sp,fp
 4015e20:	dfc00117 	ldw	ra,4(sp)
 4015e24:	df000017 	ldw	fp,0(sp)
 4015e28:	dec00204 	addi	sp,sp,8
 4015e2c:	f800283a 	ret

04015e30 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4015e30:	defffb04 	addi	sp,sp,-20
 4015e34:	df000415 	stw	fp,16(sp)
 4015e38:	df000404 	addi	fp,sp,16
 4015e3c:	e13ffd15 	stw	r4,-12(fp)
 4015e40:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4015e44:	e0bffd17 	ldw	r2,-12(fp)
 4015e48:	10800317 	ldw	r2,12(r2)
 4015e4c:	10800037 	ldwio	r2,0(r2)
 4015e50:	1080040c 	andi	r2,r2,16
 4015e54:	1005003a 	cmpeq	r2,r2,zero
 4015e58:	1000031e 	bne	r2,zero,4015e68 <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 4015e5c:	00bffc04 	movi	r2,-16
 4015e60:	e0bfff15 	stw	r2,-4(fp)
 4015e64:	00003c06 	br	4015f58 <alt_avalon_sgdma_do_async_transfer+0x128>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4015e68:	e0bffd17 	ldw	r2,-12(fp)
 4015e6c:	10800317 	ldw	r2,12(r2)
 4015e70:	11000404 	addi	r4,r2,16
 4015e74:	e0bffd17 	ldw	r2,-12(fp)
 4015e78:	10800317 	ldw	r2,12(r2)
 4015e7c:	10800404 	addi	r2,r2,16
 4015e80:	10c00037 	ldwio	r3,0(r2)
 4015e84:	00bff7c4 	movi	r2,-33
 4015e88:	1886703a 	and	r3,r3,r2
 4015e8c:	2005883a 	mov	r2,r4
 4015e90:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4015e94:	e0bffd17 	ldw	r2,-12(fp)
 4015e98:	10800317 	ldw	r2,12(r2)
 4015e9c:	1007883a 	mov	r3,r2
 4015ea0:	00803fc4 	movi	r2,255
 4015ea4:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4015ea8:	e0bffd17 	ldw	r2,-12(fp)
 4015eac:	10800317 	ldw	r2,12(r2)
 4015eb0:	10800804 	addi	r2,r2,32
 4015eb4:	e0fffe17 	ldw	r3,-8(fp)
 4015eb8:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 4015ebc:	e0bffd17 	ldw	r2,-12(fp)
 4015ec0:	10800917 	ldw	r2,36(r2)
 4015ec4:	1005003a 	cmpeq	r2,r2,zero
 4015ec8:	1000111e 	bne	r2,zero,4015f10 <alt_avalon_sgdma_do_async_transfer+0xe0>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4015ecc:	e0bffd17 	ldw	r2,-12(fp)
 4015ed0:	10800317 	ldw	r2,12(r2)
 4015ed4:	10800404 	addi	r2,r2,16
 4015ed8:	10800037 	ldwio	r2,0(r2)
 4015edc:	e0bffc15 	stw	r2,-16(fp)

    control |= (dev->chain_control                          |
 4015ee0:	e0bffd17 	ldw	r2,-12(fp)
 4015ee4:	10c00b17 	ldw	r3,44(r2)
 4015ee8:	e0bffc17 	ldw	r2,-16(fp)
 4015eec:	1884b03a 	or	r2,r3,r2
 4015ef0:	10801814 	ori	r2,r2,96
 4015ef4:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4015ef8:	e0bffd17 	ldw	r2,-12(fp)
 4015efc:	10800317 	ldw	r2,12(r2)
 4015f00:	10800404 	addi	r2,r2,16
 4015f04:	e0fffc17 	ldw	r3,-16(fp)
 4015f08:	10c00035 	stwio	r3,0(r2)
 4015f0c:	00001106 	br	4015f54 <alt_avalon_sgdma_do_async_transfer+0x124>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4015f10:	e0bffd17 	ldw	r2,-12(fp)
 4015f14:	10800317 	ldw	r2,12(r2)
 4015f18:	10800404 	addi	r2,r2,16
 4015f1c:	10800037 	ldwio	r2,0(r2)
 4015f20:	e0bffc15 	stw	r2,-16(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 4015f24:	e0bffc17 	ldw	r2,-16(fp)
 4015f28:	10801814 	ori	r2,r2,96
 4015f2c:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 4015f30:	e0fffc17 	ldw	r3,-16(fp)
 4015f34:	00bffbc4 	movi	r2,-17
 4015f38:	1884703a 	and	r2,r3,r2
 4015f3c:	e0bffc15 	stw	r2,-16(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4015f40:	e0bffd17 	ldw	r2,-12(fp)
 4015f44:	10800317 	ldw	r2,12(r2)
 4015f48:	10800404 	addi	r2,r2,16
 4015f4c:	e0fffc17 	ldw	r3,-16(fp)
 4015f50:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 4015f54:	e03fff15 	stw	zero,-4(fp)
 4015f58:	e0bfff17 	ldw	r2,-4(fp)
}
 4015f5c:	e037883a 	mov	sp,fp
 4015f60:	df000017 	ldw	fp,0(sp)
 4015f64:	dec00104 	addi	sp,sp,4
 4015f68:	f800283a 	ret

04015f6c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 4015f6c:	defffc04 	addi	sp,sp,-16
 4015f70:	df000315 	stw	fp,12(sp)
 4015f74:	df000304 	addi	fp,sp,12
 4015f78:	e13ffe15 	stw	r4,-8(fp)
 4015f7c:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4015f80:	e0bffe17 	ldw	r2,-8(fp)
 4015f84:	10800317 	ldw	r2,12(r2)
 4015f88:	10800037 	ldwio	r2,0(r2)
 4015f8c:	1080040c 	andi	r2,r2,16
 4015f90:	1004c03a 	cmpne	r2,r2,zero
 4015f94:	103ffa1e 	bne	r2,zero,4015f80 <alt_avalon_sgdma_do_sync_transfer+0x14>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4015f98:	e0bffe17 	ldw	r2,-8(fp)
 4015f9c:	10800317 	ldw	r2,12(r2)
 4015fa0:	11000404 	addi	r4,r2,16
 4015fa4:	e0bffe17 	ldw	r2,-8(fp)
 4015fa8:	10800317 	ldw	r2,12(r2)
 4015fac:	10800404 	addi	r2,r2,16
 4015fb0:	10c00037 	ldwio	r3,0(r2)
 4015fb4:	00bff7c4 	movi	r2,-33
 4015fb8:	1886703a 	and	r3,r3,r2
 4015fbc:	2005883a 	mov	r2,r4
 4015fc0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4015fc4:	e0bffe17 	ldw	r2,-8(fp)
 4015fc8:	10800317 	ldw	r2,12(r2)
 4015fcc:	1007883a 	mov	r3,r2
 4015fd0:	00803fc4 	movi	r2,255
 4015fd4:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 4015fd8:	e0bffe17 	ldw	r2,-8(fp)
 4015fdc:	10800317 	ldw	r2,12(r2)
 4015fe0:	10800804 	addi	r2,r2,32
 4015fe4:	e0ffff17 	ldw	r3,-4(fp)
 4015fe8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4015fec:	e0bffe17 	ldw	r2,-8(fp)
 4015ff0:	10800317 	ldw	r2,12(r2)
 4015ff4:	11000404 	addi	r4,r2,16
 4015ff8:	e0bffe17 	ldw	r2,-8(fp)
 4015ffc:	10800317 	ldw	r2,12(r2)
 4016000:	10800404 	addi	r2,r2,16
 4016004:	10800037 	ldwio	r2,0(r2)
 4016008:	10c01814 	ori	r3,r2,96
 401600c:	2005883a 	mov	r2,r4
 4016010:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 4016014:	e0bffe17 	ldw	r2,-8(fp)
 4016018:	10800317 	ldw	r2,12(r2)
 401601c:	10800037 	ldwio	r2,0(r2)
 4016020:	1080040c 	andi	r2,r2,16
 4016024:	1004c03a 	cmpne	r2,r2,zero
 4016028:	103ffa1e 	bne	r2,zero,4016014 <alt_avalon_sgdma_do_sync_transfer+0xa8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 401602c:	e0bffe17 	ldw	r2,-8(fp)
 4016030:	10800317 	ldw	r2,12(r2)
 4016034:	11000404 	addi	r4,r2,16
 4016038:	e0bffe17 	ldw	r2,-8(fp)
 401603c:	10800317 	ldw	r2,12(r2)
 4016040:	10800404 	addi	r2,r2,16
 4016044:	10c00037 	ldwio	r3,0(r2)
 4016048:	00bff7c4 	movi	r2,-33
 401604c:	1886703a 	and	r3,r3,r2
 4016050:	2005883a 	mov	r2,r4
 4016054:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 4016058:	e0bffe17 	ldw	r2,-8(fp)
 401605c:	10800317 	ldw	r2,12(r2)
 4016060:	10800037 	ldwio	r2,0(r2)
 4016064:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4016068:	e0bffe17 	ldw	r2,-8(fp)
 401606c:	10800317 	ldw	r2,12(r2)
 4016070:	1007883a 	mov	r3,r2
 4016074:	00803fc4 	movi	r2,255
 4016078:	18800035 	stwio	r2,0(r3)

  return status;
 401607c:	e0bffd03 	ldbu	r2,-12(fp)
}
 4016080:	e037883a 	mov	sp,fp
 4016084:	df000017 	ldw	fp,0(sp)
 4016088:	dec00104 	addi	sp,sp,4
 401608c:	f800283a 	ret

04016090 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 4016090:	defff404 	addi	sp,sp,-48
 4016094:	dfc00b15 	stw	ra,44(sp)
 4016098:	df000a15 	stw	fp,40(sp)
 401609c:	df000a04 	addi	fp,sp,40
 40160a0:	e13ffb15 	stw	r4,-20(fp)
 40160a4:	e17ffc15 	stw	r5,-16(fp)
 40160a8:	e1bffd15 	stw	r6,-12(fp)
 40160ac:	e1fffe15 	stw	r7,-8(fp)
 40160b0:	e0800217 	ldw	r2,8(fp)
 40160b4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 40160b8:	e0bfff0b 	ldhu	r2,-4(fp)
 40160bc:	d8800015 	stw	r2,0(sp)
 40160c0:	e0800317 	ldw	r2,12(fp)
 40160c4:	d8800115 	stw	r2,4(sp)
 40160c8:	e0800417 	ldw	r2,16(fp)
 40160cc:	d8800215 	stw	r2,8(sp)
 40160d0:	d8000315 	stw	zero,12(sp)
 40160d4:	d8000415 	stw	zero,16(sp)
 40160d8:	e13ffb17 	ldw	r4,-20(fp)
 40160dc:	e17ffc17 	ldw	r5,-16(fp)
 40160e0:	e1bffd17 	ldw	r6,-12(fp)
 40160e4:	e1fffe17 	ldw	r7,-8(fp)
 40160e8:	40161000 	call	4016100 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 40160ec:	e037883a 	mov	sp,fp
 40160f0:	dfc00117 	ldw	ra,4(sp)
 40160f4:	df000017 	ldw	fp,0(sp)
 40160f8:	dec00204 	addi	sp,sp,8
 40160fc:	f800283a 	ret

04016100 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 4016100:	defff204 	addi	sp,sp,-56
 4016104:	dfc00d15 	stw	ra,52(sp)
 4016108:	df000c15 	stw	fp,48(sp)
 401610c:	df000c04 	addi	fp,sp,48
 4016110:	e13ffb15 	stw	r4,-20(fp)
 4016114:	e17ffc15 	stw	r5,-16(fp)
 4016118:	e1bffd15 	stw	r6,-12(fp)
 401611c:	e1fffe15 	stw	r7,-8(fp)
 4016120:	e0800217 	ldw	r2,8(fp)
 4016124:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 4016128:	e0bfff0b 	ldhu	r2,-4(fp)
 401612c:	d8800015 	stw	r2,0(sp)
 4016130:	d8000115 	stw	zero,4(sp)
 4016134:	e0800317 	ldw	r2,12(fp)
 4016138:	d8800215 	stw	r2,8(sp)
 401613c:	e0800417 	ldw	r2,16(fp)
 4016140:	d8800315 	stw	r2,12(sp)
 4016144:	e0800517 	ldw	r2,20(fp)
 4016148:	d8800415 	stw	r2,16(sp)
 401614c:	e0800617 	ldw	r2,24(fp)
 4016150:	d8800515 	stw	r2,20(sp)
 4016154:	d8000615 	stw	zero,24(sp)
 4016158:	e13ffb17 	ldw	r4,-20(fp)
 401615c:	e17ffc17 	ldw	r5,-16(fp)
 4016160:	e1bffd17 	ldw	r6,-12(fp)
 4016164:	e1fffe17 	ldw	r7,-8(fp)
 4016168:	40166c00 	call	40166c0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 401616c:	e037883a 	mov	sp,fp
 4016170:	dfc00117 	ldw	ra,4(sp)
 4016174:	df000017 	ldw	fp,0(sp)
 4016178:	dec00204 	addi	sp,sp,8
 401617c:	f800283a 	ret

04016180 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 4016180:	defff804 	addi	sp,sp,-32
 4016184:	dfc00715 	stw	ra,28(sp)
 4016188:	df000615 	stw	fp,24(sp)
 401618c:	df000604 	addi	fp,sp,24
 4016190:	e13ffc15 	stw	r4,-16(fp)
 4016194:	e17ffd15 	stw	r5,-12(fp)
 4016198:	e1bffe15 	stw	r6,-8(fp)
 401619c:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 40161a0:	e1ffff0b 	ldhu	r7,-4(fp)
 40161a4:	e0800217 	ldw	r2,8(fp)
 40161a8:	d8800015 	stw	r2,0(sp)
 40161ac:	d8000115 	stw	zero,4(sp)
 40161b0:	e13ffc17 	ldw	r4,-16(fp)
 40161b4:	e17ffd17 	ldw	r5,-12(fp)
 40161b8:	e1bffe17 	ldw	r6,-8(fp)
 40161bc:	40161d40 	call	40161d4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 40161c0:	e037883a 	mov	sp,fp
 40161c4:	dfc00117 	ldw	ra,4(sp)
 40161c8:	df000017 	ldw	fp,0(sp)
 40161cc:	dec00204 	addi	sp,sp,8
 40161d0:	f800283a 	ret

040161d4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 40161d4:	defff304 	addi	sp,sp,-52
 40161d8:	dfc00c15 	stw	ra,48(sp)
 40161dc:	df000b15 	stw	fp,44(sp)
 40161e0:	df000b04 	addi	fp,sp,44
 40161e4:	e13ffc15 	stw	r4,-16(fp)
 40161e8:	e17ffd15 	stw	r5,-12(fp)
 40161ec:	e1bffe15 	stw	r6,-8(fp)
 40161f0:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 40161f4:	e0bfff0b 	ldhu	r2,-4(fp)
 40161f8:	d8800015 	stw	r2,0(sp)
 40161fc:	d8000115 	stw	zero,4(sp)
 4016200:	d8000215 	stw	zero,8(sp)
 4016204:	e0800217 	ldw	r2,8(fp)
 4016208:	d8800315 	stw	r2,12(sp)
 401620c:	d8000415 	stw	zero,16(sp)
 4016210:	e0800317 	ldw	r2,12(fp)
 4016214:	d8800515 	stw	r2,20(sp)
 4016218:	d8000615 	stw	zero,24(sp)
 401621c:	e13ffc17 	ldw	r4,-16(fp)
 4016220:	e17ffd17 	ldw	r5,-12(fp)
 4016224:	000d883a 	mov	r6,zero
 4016228:	e1fffe17 	ldw	r7,-8(fp)
 401622c:	40166c00 	call	40166c0 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 4016230:	e037883a 	mov	sp,fp
 4016234:	dfc00117 	ldw	ra,4(sp)
 4016238:	df000017 	ldw	fp,0(sp)
 401623c:	dec00204 	addi	sp,sp,8
 4016240:	f800283a 	ret

04016244 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 4016244:	defff404 	addi	sp,sp,-48
 4016248:	dfc00b15 	stw	ra,44(sp)
 401624c:	df000a15 	stw	fp,40(sp)
 4016250:	df000a04 	addi	fp,sp,40
 4016254:	e13ffb15 	stw	r4,-20(fp)
 4016258:	e17ffc15 	stw	r5,-16(fp)
 401625c:	e1bffd15 	stw	r6,-12(fp)
 4016260:	e0800517 	ldw	r2,20(fp)
 4016264:	e1fffe0d 	sth	r7,-8(fp)
 4016268:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 401626c:	e1fffe0b 	ldhu	r7,-8(fp)
 4016270:	e0ffff03 	ldbu	r3,-4(fp)
 4016274:	e0800217 	ldw	r2,8(fp)
 4016278:	d8800015 	stw	r2,0(sp)
 401627c:	e0800317 	ldw	r2,12(fp)
 4016280:	d8800115 	stw	r2,4(sp)
 4016284:	e0800417 	ldw	r2,16(fp)
 4016288:	d8800215 	stw	r2,8(sp)
 401628c:	d8000315 	stw	zero,12(sp)
 4016290:	d8c00415 	stw	r3,16(sp)
 4016294:	e13ffb17 	ldw	r4,-20(fp)
 4016298:	e17ffc17 	ldw	r5,-16(fp)
 401629c:	e1bffd17 	ldw	r6,-12(fp)
 40162a0:	40162b80 	call	40162b8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 40162a4:	e037883a 	mov	sp,fp
 40162a8:	dfc00117 	ldw	ra,4(sp)
 40162ac:	df000017 	ldw	fp,0(sp)
 40162b0:	dec00204 	addi	sp,sp,8
 40162b4:	f800283a 	ret

040162b8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 40162b8:	defff204 	addi	sp,sp,-56
 40162bc:	dfc00d15 	stw	ra,52(sp)
 40162c0:	df000c15 	stw	fp,48(sp)
 40162c4:	df000c04 	addi	fp,sp,48
 40162c8:	e13ffb15 	stw	r4,-20(fp)
 40162cc:	e17ffc15 	stw	r5,-16(fp)
 40162d0:	e1bffd15 	stw	r6,-12(fp)
 40162d4:	e0800617 	ldw	r2,24(fp)
 40162d8:	e1fffe0d 	sth	r7,-8(fp)
 40162dc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 40162e0:	e0bffe0b 	ldhu	r2,-8(fp)
 40162e4:	e0ffff03 	ldbu	r3,-4(fp)
 40162e8:	d8800015 	stw	r2,0(sp)
 40162ec:	e0800417 	ldw	r2,16(fp)
 40162f0:	d8800115 	stw	r2,4(sp)
 40162f4:	e0800217 	ldw	r2,8(fp)
 40162f8:	d8800215 	stw	r2,8(sp)
 40162fc:	e0800317 	ldw	r2,12(fp)
 4016300:	d8800315 	stw	r2,12(sp)
 4016304:	e0800517 	ldw	r2,20(fp)
 4016308:	d8800415 	stw	r2,16(sp)
 401630c:	d8000515 	stw	zero,20(sp)
 4016310:	d8c00615 	stw	r3,24(sp)
 4016314:	e13ffb17 	ldw	r4,-20(fp)
 4016318:	e17ffc17 	ldw	r5,-16(fp)
 401631c:	e1bffd17 	ldw	r6,-12(fp)
 4016320:	000f883a 	mov	r7,zero
 4016324:	40166c00 	call	40166c0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 4016328:	e037883a 	mov	sp,fp
 401632c:	dfc00117 	ldw	ra,4(sp)
 4016330:	df000017 	ldw	fp,0(sp)
 4016334:	dec00204 	addi	sp,sp,8
 4016338:	f800283a 	ret

0401633c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 401633c:	defffb04 	addi	sp,sp,-20
 4016340:	df000415 	stw	fp,16(sp)
 4016344:	df000404 	addi	fp,sp,16
 4016348:	e13ffc15 	stw	r4,-16(fp)
 401634c:	e17ffd15 	stw	r5,-12(fp)
 4016350:	e1bffe15 	stw	r6,-8(fp)
 4016354:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 4016358:	e0fffc17 	ldw	r3,-16(fp)
 401635c:	e0bffd17 	ldw	r2,-12(fp)
 4016360:	18800915 	stw	r2,36(r3)
  dev->callback_context = context;
 4016364:	e0fffc17 	ldw	r3,-16(fp)
 4016368:	e0bfff17 	ldw	r2,-4(fp)
 401636c:	18800a15 	stw	r2,40(r3)
  dev->chain_control    = chain_control;
 4016370:	e0fffc17 	ldw	r3,-16(fp)
 4016374:	e0bffe17 	ldw	r2,-8(fp)
 4016378:	18800b15 	stw	r2,44(r3)
}
 401637c:	e037883a 	mov	sp,fp
 4016380:	df000017 	ldw	fp,0(sp)
 4016384:	dec00104 	addi	sp,sp,4
 4016388:	f800283a 	ret

0401638c <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 401638c:	defffd04 	addi	sp,sp,-12
 4016390:	df000215 	stw	fp,8(sp)
 4016394:	df000204 	addi	fp,sp,8
 4016398:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 401639c:	e0bfff17 	ldw	r2,-4(fp)
 40163a0:	10800317 	ldw	r2,12(r2)
 40163a4:	10800404 	addi	r2,r2,16
 40163a8:	10800037 	ldwio	r2,0(r2)
 40163ac:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 40163b0:	e0bffe17 	ldw	r2,-8(fp)
 40163b4:	10800814 	ori	r2,r2,32
 40163b8:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 40163bc:	e0bfff17 	ldw	r2,-4(fp)
 40163c0:	10800317 	ldw	r2,12(r2)
 40163c4:	10800404 	addi	r2,r2,16
 40163c8:	e0fffe17 	ldw	r3,-8(fp)
 40163cc:	10c00035 	stwio	r3,0(r2)
}
 40163d0:	e037883a 	mov	sp,fp
 40163d4:	df000017 	ldw	fp,0(sp)
 40163d8:	dec00104 	addi	sp,sp,4
 40163dc:	f800283a 	ret

040163e0 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 40163e0:	defffd04 	addi	sp,sp,-12
 40163e4:	df000215 	stw	fp,8(sp)
 40163e8:	df000204 	addi	fp,sp,8
 40163ec:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40163f0:	e0bfff17 	ldw	r2,-4(fp)
 40163f4:	10800317 	ldw	r2,12(r2)
 40163f8:	10800404 	addi	r2,r2,16
 40163fc:	10800037 	ldwio	r2,0(r2)
 4016400:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 4016404:	e0fffe17 	ldw	r3,-8(fp)
 4016408:	00bff7c4 	movi	r2,-33
 401640c:	1884703a 	and	r2,r3,r2
 4016410:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016414:	e0bfff17 	ldw	r2,-4(fp)
 4016418:	10800317 	ldw	r2,12(r2)
 401641c:	10800404 	addi	r2,r2,16
 4016420:	e0fffe17 	ldw	r3,-8(fp)
 4016424:	10c00035 	stwio	r3,0(r2)
}
 4016428:	e037883a 	mov	sp,fp
 401642c:	df000017 	ldw	fp,0(sp)
 4016430:	dec00104 	addi	sp,sp,4
 4016434:	f800283a 	ret

04016438 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 4016438:	defffd04 	addi	sp,sp,-12
 401643c:	df000215 	stw	fp,8(sp)
 4016440:	df000204 	addi	fp,sp,8
 4016444:	e13ffe15 	stw	r4,-8(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 4016448:	e0bffe17 	ldw	r2,-8(fp)
 401644c:	10800784 	addi	r2,r2,30
 4016450:	10800023 	ldbuio	r2,0(r2)
 4016454:	10801fcc 	andi	r2,r2,127
 4016458:	1005003a 	cmpeq	r2,r2,zero
 401645c:	1000031e 	bne	r2,zero,401646c <alt_avalon_sgdma_check_descriptor_status+0x34>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 4016460:	00bffec4 	movi	r2,-5
 4016464:	e0bfff15 	stw	r2,-4(fp)
 4016468:	00000a06 	br	4016494 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 401646c:	e0bffe17 	ldw	r2,-8(fp)
 4016470:	108007c4 	addi	r2,r2,31
 4016474:	10800023 	ldbuio	r2,0(r2)
 4016478:	1080200c 	andi	r2,r2,128
 401647c:	1005003a 	cmpeq	r2,r2,zero
 4016480:	1000031e 	bne	r2,zero,4016490 <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 4016484:	00bfe244 	movi	r2,-119
 4016488:	e0bfff15 	stw	r2,-4(fp)
 401648c:	00000106 	br	4016494 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
 4016490:	e03fff15 	stw	zero,-4(fp)
 4016494:	e0bfff17 	ldw	r2,-4(fp)
}
 4016498:	e037883a 	mov	sp,fp
 401649c:	df000017 	ldw	fp,0(sp)
 40164a0:	dec00104 	addi	sp,sp,4
 40164a4:	f800283a 	ret

040164a8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 40164a8:	defffc04 	addi	sp,sp,-16
 40164ac:	dfc00315 	stw	ra,12(sp)
 40164b0:	df000215 	stw	fp,8(sp)
 40164b4:	df000204 	addi	fp,sp,8
 40164b8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 40164bc:	e13fff17 	ldw	r4,-4(fp)
 40164c0:	d1602804 	addi	r5,gp,-32608
 40164c4:	40354a40 	call	40354a4 <alt_find_dev>
 40164c8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 40164cc:	e0bffe17 	ldw	r2,-8(fp)
 40164d0:	1004c03a 	cmpne	r2,r2,zero
 40164d4:	1000041e 	bne	r2,zero,40164e8 <alt_avalon_sgdma_open+0x40>
    ALT_ERRNO = ENODEV;
 40164d8:	40165000 	call	4016500 <alt_get_errno>
 40164dc:	1007883a 	mov	r3,r2
 40164e0:	008004c4 	movi	r2,19
 40164e4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 40164e8:	e0bffe17 	ldw	r2,-8(fp)
}
 40164ec:	e037883a 	mov	sp,fp
 40164f0:	dfc00117 	ldw	ra,4(sp)
 40164f4:	df000017 	ldw	fp,0(sp)
 40164f8:	dec00204 	addi	sp,sp,8
 40164fc:	f800283a 	ret

04016500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016500:	defffd04 	addi	sp,sp,-12
 4016504:	dfc00215 	stw	ra,8(sp)
 4016508:	df000115 	stw	fp,4(sp)
 401650c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4016510:	00810174 	movhi	r2,1029
 4016514:	10ba0204 	addi	r2,r2,-6136
 4016518:	10800017 	ldw	r2,0(r2)
 401651c:	1005003a 	cmpeq	r2,r2,zero
 4016520:	1000061e 	bne	r2,zero,401653c <alt_get_errno+0x3c>
 4016524:	00810174 	movhi	r2,1029
 4016528:	10ba0204 	addi	r2,r2,-6136
 401652c:	10800017 	ldw	r2,0(r2)
 4016530:	103ee83a 	callr	r2
 4016534:	e0bfff15 	stw	r2,-4(fp)
 4016538:	00000306 	br	4016548 <alt_get_errno+0x48>
 401653c:	00810174 	movhi	r2,1029
 4016540:	10819f04 	addi	r2,r2,1660
 4016544:	e0bfff15 	stw	r2,-4(fp)
 4016548:	e0bfff17 	ldw	r2,-4(fp)
}
 401654c:	e037883a 	mov	sp,fp
 4016550:	dfc00117 	ldw	ra,4(sp)
 4016554:	df000017 	ldw	fp,0(sp)
 4016558:	dec00204 	addi	sp,sp,8
 401655c:	f800283a 	ret

04016560 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 4016560:	defff104 	addi	sp,sp,-60
 4016564:	dfc00e15 	stw	ra,56(sp)
 4016568:	df000d15 	stw	fp,52(sp)
 401656c:	df000d04 	addi	fp,sp,52
 4016570:	e13ffa15 	stw	r4,-24(fp)
 4016574:	e17ffb15 	stw	r5,-20(fp)
 4016578:	e1bffc15 	stw	r6,-16(fp)
 401657c:	e1fffd15 	stw	r7,-12(fp)
 4016580:	e0800217 	ldw	r2,8(fp)
 4016584:	e0c00617 	ldw	r3,24(fp)
 4016588:	e0bffe0d 	sth	r2,-8(fp)
 401658c:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 4016590:	e0bffe0b 	ldhu	r2,-8(fp)
 4016594:	e0ffff03 	ldbu	r3,-4(fp)
 4016598:	d8800015 	stw	r2,0(sp)
 401659c:	e0800317 	ldw	r2,12(fp)
 40165a0:	d8800115 	stw	r2,4(sp)
 40165a4:	e0800417 	ldw	r2,16(fp)
 40165a8:	d8800215 	stw	r2,8(sp)
 40165ac:	e0800517 	ldw	r2,20(fp)
 40165b0:	d8800315 	stw	r2,12(sp)
 40165b4:	d8000415 	stw	zero,16(sp)
 40165b8:	d8000515 	stw	zero,20(sp)
 40165bc:	d8c00615 	stw	r3,24(sp)
 40165c0:	e13ffa17 	ldw	r4,-24(fp)
 40165c4:	e17ffb17 	ldw	r5,-20(fp)
 40165c8:	e1bffc17 	ldw	r6,-16(fp)
 40165cc:	e1fffd17 	ldw	r7,-12(fp)
 40165d0:	40166c00 	call	40166c0 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 40165d4:	e037883a 	mov	sp,fp
 40165d8:	dfc00117 	ldw	ra,4(sp)
 40165dc:	df000017 	ldw	fp,0(sp)
 40165e0:	dec00204 	addi	sp,sp,8
 40165e4:	f800283a 	ret

040165e8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 40165e8:	defffc04 	addi	sp,sp,-16
 40165ec:	df000315 	stw	fp,12(sp)
 40165f0:	df000304 	addi	fp,sp,12
 40165f4:	e13ffe15 	stw	r4,-8(fp)
 40165f8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 40165fc:	e0bffe17 	ldw	r2,-8(fp)
 4016600:	10800317 	ldw	r2,12(r2)
 4016604:	10800404 	addi	r2,r2,16
 4016608:	10800037 	ldwio	r2,0(r2)
 401660c:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 4016610:	e0fffd17 	ldw	r3,-12(fp)
 4016614:	00a00434 	movhi	r2,32784
 4016618:	10bfffc4 	addi	r2,r2,-1
 401661c:	1884703a 	and	r2,r3,r2
 4016620:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 4016624:	e0bfff17 	ldw	r2,-4(fp)
 4016628:	1004953a 	slli	r2,r2,20
 401662c:	10dffc2c 	andhi	r3,r2,32752
 4016630:	e0bffd17 	ldw	r2,-12(fp)
 4016634:	1884b03a 	or	r2,r3,r2
 4016638:	10800134 	orhi	r2,r2,4
 401663c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 4016640:	e0bffe17 	ldw	r2,-8(fp)
 4016644:	10800317 	ldw	r2,12(r2)
 4016648:	10800404 	addi	r2,r2,16
 401664c:	e0fffd17 	ldw	r3,-12(fp)
 4016650:	10c00035 	stwio	r3,0(r2)
  
  return;
}
 4016654:	e037883a 	mov	sp,fp
 4016658:	df000017 	ldw	fp,0(sp)
 401665c:	dec00104 	addi	sp,sp,4
 4016660:	f800283a 	ret

04016664 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 4016664:	defffd04 	addi	sp,sp,-12
 4016668:	df000215 	stw	fp,8(sp)
 401666c:	df000204 	addi	fp,sp,8
 4016670:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4016674:	e0bfff17 	ldw	r2,-4(fp)
 4016678:	10800317 	ldw	r2,12(r2)
 401667c:	10800404 	addi	r2,r2,16
 4016680:	10800037 	ldwio	r2,0(r2)
 4016684:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 4016688:	e0fffe17 	ldw	r3,-8(fp)
 401668c:	00bfff34 	movhi	r2,65532
 4016690:	10bfffc4 	addi	r2,r2,-1
 4016694:	1884703a 	and	r2,r3,r2
 4016698:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 401669c:	e0bfff17 	ldw	r2,-4(fp)
 40166a0:	10800317 	ldw	r2,12(r2)
 40166a4:	10800404 	addi	r2,r2,16
 40166a8:	e0fffe17 	ldw	r3,-8(fp)
 40166ac:	10c00035 	stwio	r3,0(r2)
  
  return;
}
 40166b0:	e037883a 	mov	sp,fp
 40166b4:	df000017 	ldw	fp,0(sp)
 40166b8:	dec00104 	addi	sp,sp,4
 40166bc:	f800283a 	ret

040166c0 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 40166c0:	defff204 	addi	sp,sp,-56
 40166c4:	dfc00d15 	stw	ra,52(sp)
 40166c8:	df000c15 	stw	fp,48(sp)
 40166cc:	df000c04 	addi	fp,sp,48
 40166d0:	e13ff415 	stw	r4,-48(fp)
 40166d4:	e17ff515 	stw	r5,-44(fp)
 40166d8:	e1bff615 	stw	r6,-40(fp)
 40166dc:	e1fff715 	stw	r7,-36(fp)
 40166e0:	e0800217 	ldw	r2,8(fp)
 40166e4:	e0c00817 	ldw	r3,32(fp)
 40166e8:	e0bff80d 	sth	r2,-32(fp)
 40166ec:	e0fff905 	stb	r3,-28(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 40166f0:	e0bff517 	ldw	r2,-44(fp)
 40166f4:	110007c4 	addi	r4,r2,31
 40166f8:	e0bff517 	ldw	r2,-44(fp)
 40166fc:	108007c3 	ldbu	r2,31(r2)
 4016700:	10c03fcc 	andi	r3,r2,255
 4016704:	00bfdfc4 	movi	r2,-129
 4016708:	1886703a 	and	r3,r3,r2
 401670c:	2005883a 	mov	r2,r4
 4016710:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 4016714:	e13ff417 	ldw	r4,-48(fp)
 4016718:	e0bff617 	ldw	r2,-40(fp)
 401671c:	11403fcc 	andi	r5,r2,255
 4016720:	20800003 	ldbu	r2,0(r4)
 4016724:	1004703a 	and	r2,r2,zero
 4016728:	1007883a 	mov	r3,r2
 401672c:	2805883a 	mov	r2,r5
 4016730:	1884b03a 	or	r2,r3,r2
 4016734:	20800005 	stb	r2,0(r4)
 4016738:	e0bff617 	ldw	r2,-40(fp)
 401673c:	1004d23a 	srli	r2,r2,8
 4016740:	11403fcc 	andi	r5,r2,255
 4016744:	20800043 	ldbu	r2,1(r4)
 4016748:	1004703a 	and	r2,r2,zero
 401674c:	1007883a 	mov	r3,r2
 4016750:	2805883a 	mov	r2,r5
 4016754:	1884b03a 	or	r2,r3,r2
 4016758:	20800045 	stb	r2,1(r4)
 401675c:	e0bff617 	ldw	r2,-40(fp)
 4016760:	1004d43a 	srli	r2,r2,16
 4016764:	11403fcc 	andi	r5,r2,255
 4016768:	20800083 	ldbu	r2,2(r4)
 401676c:	1004703a 	and	r2,r2,zero
 4016770:	1007883a 	mov	r3,r2
 4016774:	2805883a 	mov	r2,r5
 4016778:	1884b03a 	or	r2,r3,r2
 401677c:	20800085 	stb	r2,2(r4)
 4016780:	e0bff617 	ldw	r2,-40(fp)
 4016784:	100ad63a 	srli	r5,r2,24
 4016788:	208000c3 	ldbu	r2,3(r4)
 401678c:	1004703a 	and	r2,r2,zero
 4016790:	1007883a 	mov	r3,r2
 4016794:	2805883a 	mov	r2,r5
 4016798:	1884b03a 	or	r2,r3,r2
 401679c:	208000c5 	stb	r2,3(r4)
  desc->write_addr               = write_addr;
 40167a0:	e13ff417 	ldw	r4,-48(fp)
 40167a4:	e0bff717 	ldw	r2,-36(fp)
 40167a8:	11403fcc 	andi	r5,r2,255
 40167ac:	20800203 	ldbu	r2,8(r4)
 40167b0:	1004703a 	and	r2,r2,zero
 40167b4:	1007883a 	mov	r3,r2
 40167b8:	2805883a 	mov	r2,r5
 40167bc:	1884b03a 	or	r2,r3,r2
 40167c0:	20800205 	stb	r2,8(r4)
 40167c4:	e0bff717 	ldw	r2,-36(fp)
 40167c8:	1004d23a 	srli	r2,r2,8
 40167cc:	11403fcc 	andi	r5,r2,255
 40167d0:	20800243 	ldbu	r2,9(r4)
 40167d4:	1004703a 	and	r2,r2,zero
 40167d8:	1007883a 	mov	r3,r2
 40167dc:	2805883a 	mov	r2,r5
 40167e0:	1884b03a 	or	r2,r3,r2
 40167e4:	20800245 	stb	r2,9(r4)
 40167e8:	e0bff717 	ldw	r2,-36(fp)
 40167ec:	1004d43a 	srli	r2,r2,16
 40167f0:	11403fcc 	andi	r5,r2,255
 40167f4:	20800283 	ldbu	r2,10(r4)
 40167f8:	1004703a 	and	r2,r2,zero
 40167fc:	1007883a 	mov	r3,r2
 4016800:	2805883a 	mov	r2,r5
 4016804:	1884b03a 	or	r2,r3,r2
 4016808:	20800285 	stb	r2,10(r4)
 401680c:	e0bff717 	ldw	r2,-36(fp)
 4016810:	100ad63a 	srli	r5,r2,24
 4016814:	208002c3 	ldbu	r2,11(r4)
 4016818:	1004703a 	and	r2,r2,zero
 401681c:	1007883a 	mov	r3,r2
 4016820:	2805883a 	mov	r2,r5
 4016824:	1884b03a 	or	r2,r3,r2
 4016828:	208002c5 	stb	r2,11(r4)
  desc->next                     = (alt_u32 *) next;
 401682c:	e1bff517 	ldw	r6,-44(fp)
 4016830:	e13ff417 	ldw	r4,-48(fp)
 4016834:	31403fcc 	andi	r5,r6,255
 4016838:	20800403 	ldbu	r2,16(r4)
 401683c:	1004703a 	and	r2,r2,zero
 4016840:	1007883a 	mov	r3,r2
 4016844:	2805883a 	mov	r2,r5
 4016848:	1884b03a 	or	r2,r3,r2
 401684c:	20800405 	stb	r2,16(r4)
 4016850:	3004d23a 	srli	r2,r6,8
 4016854:	11403fcc 	andi	r5,r2,255
 4016858:	20800443 	ldbu	r2,17(r4)
 401685c:	1004703a 	and	r2,r2,zero
 4016860:	1007883a 	mov	r3,r2
 4016864:	2805883a 	mov	r2,r5
 4016868:	1884b03a 	or	r2,r3,r2
 401686c:	20800445 	stb	r2,17(r4)
 4016870:	3004d43a 	srli	r2,r6,16
 4016874:	11403fcc 	andi	r5,r2,255
 4016878:	20800483 	ldbu	r2,18(r4)
 401687c:	1004703a 	and	r2,r2,zero
 4016880:	1007883a 	mov	r3,r2
 4016884:	2805883a 	mov	r2,r5
 4016888:	1884b03a 	or	r2,r3,r2
 401688c:	20800485 	stb	r2,18(r4)
 4016890:	300ad63a 	srli	r5,r6,24
 4016894:	208004c3 	ldbu	r2,19(r4)
 4016898:	1004703a 	and	r2,r2,zero
 401689c:	1007883a 	mov	r3,r2
 40168a0:	2805883a 	mov	r2,r5
 40168a4:	1884b03a 	or	r2,r3,r2
 40168a8:	208004c5 	stb	r2,19(r4)
  desc->read_addr_pad            = 0x0;
 40168ac:	e0fff417 	ldw	r3,-48(fp)
 40168b0:	18800103 	ldbu	r2,4(r3)
 40168b4:	1004703a 	and	r2,r2,zero
 40168b8:	18800105 	stb	r2,4(r3)
 40168bc:	18800143 	ldbu	r2,5(r3)
 40168c0:	1004703a 	and	r2,r2,zero
 40168c4:	18800145 	stb	r2,5(r3)
 40168c8:	18800183 	ldbu	r2,6(r3)
 40168cc:	1004703a 	and	r2,r2,zero
 40168d0:	18800185 	stb	r2,6(r3)
 40168d4:	188001c3 	ldbu	r2,7(r3)
 40168d8:	1004703a 	and	r2,r2,zero
 40168dc:	188001c5 	stb	r2,7(r3)
  desc->write_addr_pad           = 0x0;
 40168e0:	e0fff417 	ldw	r3,-48(fp)
 40168e4:	18800303 	ldbu	r2,12(r3)
 40168e8:	1004703a 	and	r2,r2,zero
 40168ec:	18800305 	stb	r2,12(r3)
 40168f0:	18800343 	ldbu	r2,13(r3)
 40168f4:	1004703a 	and	r2,r2,zero
 40168f8:	18800345 	stb	r2,13(r3)
 40168fc:	18800383 	ldbu	r2,14(r3)
 4016900:	1004703a 	and	r2,r2,zero
 4016904:	18800385 	stb	r2,14(r3)
 4016908:	188003c3 	ldbu	r2,15(r3)
 401690c:	1004703a 	and	r2,r2,zero
 4016910:	188003c5 	stb	r2,15(r3)
  desc->next_pad                 = 0x0;
 4016914:	e0fff417 	ldw	r3,-48(fp)
 4016918:	18800503 	ldbu	r2,20(r3)
 401691c:	1004703a 	and	r2,r2,zero
 4016920:	18800505 	stb	r2,20(r3)
 4016924:	18800543 	ldbu	r2,21(r3)
 4016928:	1004703a 	and	r2,r2,zero
 401692c:	18800545 	stb	r2,21(r3)
 4016930:	18800583 	ldbu	r2,22(r3)
 4016934:	1004703a 	and	r2,r2,zero
 4016938:	18800585 	stb	r2,22(r3)
 401693c:	188005c3 	ldbu	r2,23(r3)
 4016940:	1004703a 	and	r2,r2,zero
 4016944:	188005c5 	stb	r2,23(r3)
  desc->bytes_to_transfer        = length_or_eop;
 4016948:	e13ff417 	ldw	r4,-48(fp)
 401694c:	e0bff80b 	ldhu	r2,-32(fp)
 4016950:	11403fcc 	andi	r5,r2,255
 4016954:	20800603 	ldbu	r2,24(r4)
 4016958:	1004703a 	and	r2,r2,zero
 401695c:	1007883a 	mov	r3,r2
 4016960:	2805883a 	mov	r2,r5
 4016964:	1884b03a 	or	r2,r3,r2
 4016968:	20800605 	stb	r2,24(r4)
 401696c:	e0bff80b 	ldhu	r2,-32(fp)
 4016970:	1004d23a 	srli	r2,r2,8
 4016974:	117fffcc 	andi	r5,r2,65535
 4016978:	20800643 	ldbu	r2,25(r4)
 401697c:	1004703a 	and	r2,r2,zero
 4016980:	1007883a 	mov	r3,r2
 4016984:	2805883a 	mov	r2,r5
 4016988:	1884b03a 	or	r2,r3,r2
 401698c:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
 4016990:	e0fff417 	ldw	r3,-48(fp)
 4016994:	18800703 	ldbu	r2,28(r3)
 4016998:	1004703a 	and	r2,r2,zero
 401699c:	18800705 	stb	r2,28(r3)
 40169a0:	18800743 	ldbu	r2,29(r3)
 40169a4:	1004703a 	and	r2,r2,zero
 40169a8:	18800745 	stb	r2,29(r3)
  desc->status                   = 0x0;
 40169ac:	e0bff417 	ldw	r2,-48(fp)
 40169b0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 40169b4:	e0800617 	ldw	r2,24(fp)
 40169b8:	1007883a 	mov	r3,r2
 40169bc:	e0bff417 	ldw	r2,-48(fp)
 40169c0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 40169c4:	e0800717 	ldw	r2,28(fp)
 40169c8:	1007883a 	mov	r3,r2
 40169cc:	e0bff417 	ldw	r2,-48(fp)
 40169d0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 40169d4:	e0800317 	ldw	r2,12(fp)
 40169d8:	1005003a 	cmpeq	r2,r2,zero
 40169dc:	1000031e 	bne	r2,zero,40169ec <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 40169e0:	00bfe044 	movi	r2,-127
 40169e4:	e0bfff05 	stb	r2,-4(fp)
 40169e8:	00000206 	br	40169f4 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
 40169ec:	00bfe004 	movi	r2,-128
 40169f0:	e0bfff05 	stb	r2,-4(fp)
 40169f4:	e0800417 	ldw	r2,16(fp)
 40169f8:	1005003a 	cmpeq	r2,r2,zero
 40169fc:	1000031e 	bne	r2,zero,4016a0c <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
 4016a00:	00800084 	movi	r2,2
 4016a04:	e0bffe05 	stb	r2,-8(fp)
 4016a08:	00000106 	br	4016a10 <alt_avalon_sgdma_construct_descriptor_burst+0x350>
 4016a0c:	e03ffe05 	stb	zero,-8(fp)
 4016a10:	e0ffff03 	ldbu	r3,-4(fp)
 4016a14:	e13ffe03 	ldbu	r4,-8(fp)
 4016a18:	1904b03a 	or	r2,r3,r4
 4016a1c:	e0bffd05 	stb	r2,-12(fp)
 4016a20:	e0800517 	ldw	r2,20(fp)
 4016a24:	1005003a 	cmpeq	r2,r2,zero
 4016a28:	1000031e 	bne	r2,zero,4016a38 <alt_avalon_sgdma_construct_descriptor_burst+0x378>
 4016a2c:	00800104 	movi	r2,4
 4016a30:	e0bffc05 	stb	r2,-16(fp)
 4016a34:	00000106 	br	4016a3c <alt_avalon_sgdma_construct_descriptor_burst+0x37c>
 4016a38:	e03ffc05 	stb	zero,-16(fp)
 4016a3c:	e0fffd03 	ldbu	r3,-12(fp)
 4016a40:	e13ffc03 	ldbu	r4,-16(fp)
 4016a44:	1904b03a 	or	r2,r3,r4
 4016a48:	e0bffb05 	stb	r2,-20(fp)
 4016a4c:	e0bff903 	ldbu	r2,-28(fp)
 4016a50:	1005003a 	cmpeq	r2,r2,zero
 4016a54:	1000051e 	bne	r2,zero,4016a6c <alt_avalon_sgdma_construct_descriptor_burst+0x3ac>
 4016a58:	e0bff903 	ldbu	r2,-28(fp)
 4016a5c:	108003cc 	andi	r2,r2,15
 4016a60:	100490fa 	slli	r2,r2,3
 4016a64:	e0bffa05 	stb	r2,-24(fp)
 4016a68:	00000106 	br	4016a70 <alt_avalon_sgdma_construct_descriptor_burst+0x3b0>
 4016a6c:	e03ffa05 	stb	zero,-24(fp)
 4016a70:	e0fffb03 	ldbu	r3,-20(fp)
 4016a74:	e13ffa03 	ldbu	r4,-24(fp)
 4016a78:	1904b03a 	or	r2,r3,r4
 4016a7c:	1007883a 	mov	r3,r2
 4016a80:	e0bff417 	ldw	r2,-48(fp)
 4016a84:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
 4016a88:	e13ff417 	ldw	r4,-48(fp)
 4016a8c:	01400804 	movi	r5,32
 4016a90:	4035e4c0 	call	4035e4c <alt_remap_uncached>
}
 4016a94:	e037883a 	mov	sp,fp
 4016a98:	dfc00117 	ldw	ra,4(sp)
 4016a9c:	df000017 	ldw	fp,0(sp)
 4016aa0:	dec00204 	addi	sp,sp,8
 4016aa4:	f800283a 	ret

04016aa8 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 4016aa8:	defff904 	addi	sp,sp,-28
 4016aac:	dfc00615 	stw	ra,24(sp)
 4016ab0:	df000515 	stw	fp,20(sp)
 4016ab4:	df000504 	addi	fp,sp,20
 4016ab8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 4016abc:	e0bfff17 	ldw	r2,-4(fp)
 4016ac0:	e0bffe15 	stw	r2,-8(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 4016ac4:	e0bffe17 	ldw	r2,-8(fp)
 4016ac8:	10800317 	ldw	r2,12(r2)
 4016acc:	11000404 	addi	r4,r2,16
 4016ad0:	e0bffe17 	ldw	r2,-8(fp)
 4016ad4:	10800317 	ldw	r2,12(r2)
 4016ad8:	10800404 	addi	r2,r2,16
 4016adc:	10800037 	ldwio	r2,0(r2)
 4016ae0:	10a00034 	orhi	r2,r2,32768
 4016ae4:	1007883a 	mov	r3,r2
 4016ae8:	2005883a 	mov	r2,r4
 4016aec:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 4016af0:	e0bffe17 	ldw	r2,-8(fp)
 4016af4:	10800317 	ldw	r2,12(r2)
 4016af8:	10800404 	addi	r2,r2,16
 4016afc:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 4016b00:	e0bffe17 	ldw	r2,-8(fp)
 4016b04:	10800917 	ldw	r2,36(r2)
 4016b08:	1005003a 	cmpeq	r2,r2,zero
 4016b0c:	1000111e 	bne	r2,zero,4016b54 <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016b10:	0005303a 	rdctl	r2,status
 4016b14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016b18:	e0fffc17 	ldw	r3,-16(fp)
 4016b1c:	00bfff84 	movi	r2,-2
 4016b20:	1884703a 	and	r2,r3,r2
 4016b24:	1001703a 	wrctl	status,r2
  
  return context;
 4016b28:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
 4016b2c:	e0bffd15 	stw	r2,-12(fp)
    (dev->callback)(dev->callback_context);
 4016b30:	e0bffe17 	ldw	r2,-8(fp)
 4016b34:	10c00917 	ldw	r3,36(r2)
 4016b38:	e0bffe17 	ldw	r2,-8(fp)
 4016b3c:	11000a17 	ldw	r4,40(r2)
 4016b40:	183ee83a 	callr	r3
 4016b44:	e0bffd17 	ldw	r2,-12(fp)
 4016b48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016b4c:	e0bffb17 	ldw	r2,-20(fp)
 4016b50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 4016b54:	e037883a 	mov	sp,fp
 4016b58:	dfc00117 	ldw	ra,4(sp)
 4016b5c:	df000017 	ldw	fp,0(sp)
 4016b60:	dec00204 	addi	sp,sp,8
 4016b64:	f800283a 	ret

04016b68 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 4016b68:	defffa04 	addi	sp,sp,-24
 4016b6c:	dfc00515 	stw	ra,20(sp)
 4016b70:	df000415 	stw	fp,16(sp)
 4016b74:	df000404 	addi	fp,sp,16
 4016b78:	e13ffd15 	stw	r4,-12(fp)
 4016b7c:	e17ffe15 	stw	r5,-8(fp)
 4016b80:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016b84:	e0bffd17 	ldw	r2,-12(fp)
 4016b88:	10800317 	ldw	r2,12(r2)
 4016b8c:	10800404 	addi	r2,r2,16
 4016b90:	1007883a 	mov	r3,r2
 4016b94:	00800074 	movhi	r2,1
 4016b98:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 4016b9c:	e0bffd17 	ldw	r2,-12(fp)
 4016ba0:	10800317 	ldw	r2,12(r2)
 4016ba4:	10800404 	addi	r2,r2,16
 4016ba8:	1007883a 	mov	r3,r2
 4016bac:	00800074 	movhi	r2,1
 4016bb0:	18800035 	stwio	r2,0(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 4016bb4:	e0bffd17 	ldw	r2,-12(fp)
 4016bb8:	10800317 	ldw	r2,12(r2)
 4016bbc:	10800404 	addi	r2,r2,16
 4016bc0:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 4016bc4:	e0bffd17 	ldw	r2,-12(fp)
 4016bc8:	10800317 	ldw	r2,12(r2)
 4016bcc:	1007883a 	mov	r3,r2
 4016bd0:	00803fc4 	movi	r2,255
 4016bd4:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 4016bd8:	e13ffd17 	ldw	r4,-12(fp)
 4016bdc:	d1602804 	addi	r5,gp,-32608
 4016be0:	40352c80 	call	40352c8 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 4016be4:	d8000015 	stw	zero,0(sp)
 4016be8:	e13ffe17 	ldw	r4,-8(fp)
 4016bec:	e17fff17 	ldw	r5,-4(fp)
 4016bf0:	01810074 	movhi	r6,1025
 4016bf4:	319aaa04 	addi	r6,r6,27304
 4016bf8:	e1fffd17 	ldw	r7,-12(fp)
 4016bfc:	40355680 	call	4035568 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 4016c00:	e037883a 	mov	sp,fp
 4016c04:	dfc00117 	ldw	ra,4(sp)
 4016c08:	df000017 	ldw	fp,0(sp)
 4016c0c:	dec00204 	addi	sp,sp,8
 4016c10:	f800283a 	ret

04016c14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4016c14:	defffa04 	addi	sp,sp,-24
 4016c18:	dfc00515 	stw	ra,20(sp)
 4016c1c:	df000415 	stw	fp,16(sp)
 4016c20:	df000404 	addi	fp,sp,16
 4016c24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4016c28:	e0bfff17 	ldw	r2,-4(fp)
 4016c2c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4016c30:	e0bfff17 	ldw	r2,-4(fp)
 4016c34:	10800104 	addi	r2,r2,4
 4016c38:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016c3c:	0005303a 	rdctl	r2,status
 4016c40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016c44:	e0fffd17 	ldw	r3,-12(fp)
 4016c48:	00bfff84 	movi	r2,-2
 4016c4c:	1884703a 	and	r2,r3,r2
 4016c50:	1001703a 	wrctl	status,r2
  
  return context;
 4016c54:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4016c58:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4016c5c:	4035f240 	call	4035f24 <alt_tick>
 4016c60:	e0bffe17 	ldw	r2,-8(fp)
 4016c64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016c68:	e0bffc17 	ldw	r2,-16(fp)
 4016c6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4016c70:	e037883a 	mov	sp,fp
 4016c74:	dfc00117 	ldw	ra,4(sp)
 4016c78:	df000017 	ldw	fp,0(sp)
 4016c7c:	dec00204 	addi	sp,sp,8
 4016c80:	f800283a 	ret

04016c84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4016c84:	defff804 	addi	sp,sp,-32
 4016c88:	dfc00715 	stw	ra,28(sp)
 4016c8c:	df000615 	stw	fp,24(sp)
 4016c90:	df000604 	addi	fp,sp,24
 4016c94:	e13ffc15 	stw	r4,-16(fp)
 4016c98:	e17ffd15 	stw	r5,-12(fp)
 4016c9c:	e1bffe15 	stw	r6,-8(fp)
 4016ca0:	e1ffff15 	stw	r7,-4(fp)
 4016ca4:	e0bfff17 	ldw	r2,-4(fp)
 4016ca8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4016cac:	00810174 	movhi	r2,1029
 4016cb0:	1081f404 	addi	r2,r2,2000
 4016cb4:	10800017 	ldw	r2,0(r2)
 4016cb8:	1004c03a 	cmpne	r2,r2,zero
 4016cbc:	1000041e 	bne	r2,zero,4016cd0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4016cc0:	00c10174 	movhi	r3,1029
 4016cc4:	18c1f404 	addi	r3,r3,2000
 4016cc8:	e0bffb17 	ldw	r2,-20(fp)
 4016ccc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4016cd0:	e0bffc17 	ldw	r2,-16(fp)
 4016cd4:	10800104 	addi	r2,r2,4
 4016cd8:	1007883a 	mov	r3,r2
 4016cdc:	008001c4 	movi	r2,7
 4016ce0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4016ce4:	d8000015 	stw	zero,0(sp)
 4016ce8:	e13ffd17 	ldw	r4,-12(fp)
 4016cec:	e17ffe17 	ldw	r5,-8(fp)
 4016cf0:	01810074 	movhi	r6,1025
 4016cf4:	319b0504 	addi	r6,r6,27668
 4016cf8:	e1fffc17 	ldw	r7,-16(fp)
 4016cfc:	40355680 	call	4035568 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4016d00:	e037883a 	mov	sp,fp
 4016d04:	dfc00117 	ldw	ra,4(sp)
 4016d08:	df000017 	ldw	fp,0(sp)
 4016d0c:	dec00204 	addi	sp,sp,8
 4016d10:	f800283a 	ret

04016d14 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 4016d14:	defffb04 	addi	sp,sp,-20
 4016d18:	df000115 	stw	fp,4(sp)
 4016d1c:	df000104 	addi	fp,sp,4
 4016d20:	e1400115 	stw	r5,4(fp)
 4016d24:	e1800215 	stw	r6,8(fp)
 4016d28:	e1c00315 	stw	r7,12(fp)
 4016d2c:	e13fff15 	stw	r4,-4(fp)
 4016d30:	e037883a 	mov	sp,fp
 4016d34:	df000017 	ldw	fp,0(sp)
 4016d38:	dec00404 	addi	sp,sp,16
 4016d3c:	f800283a 	ret

04016d40 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
 4016d40:	defffb04 	addi	sp,sp,-20
 4016d44:	df000415 	stw	fp,16(sp)
 4016d48:	df000404 	addi	fp,sp,16
 4016d4c:	e13ffc15 	stw	r4,-16(fp)
 4016d50:	e17ffd15 	stw	r5,-12(fp)
 4016d54:	e1bffe15 	stw	r6,-8(fp)
 4016d58:	e1ffff15 	stw	r7,-4(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
 4016d5c:	e0fffd17 	ldw	r3,-12(fp)
 4016d60:	e0bffc17 	ldw	r2,-16(fp)
 4016d64:	10c00015 	stw	r3,0(r2)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
 4016d68:	e0fffe17 	ldw	r3,-8(fp)
 4016d6c:	e0bffc17 	ldw	r2,-16(fp)
 4016d70:	10c00115 	stw	r3,4(r2)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
 4016d74:	e0ffff17 	ldw	r3,-4(fp)
 4016d78:	e0bffc17 	ldw	r2,-16(fp)
 4016d7c:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
 4016d80:	e0c00117 	ldw	r3,4(fp)
 4016d84:	e0bffc17 	ldw	r2,-16(fp)
 4016d88:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
 4016d8c:	0005883a 	mov	r2,zero
}
 4016d90:	e037883a 	mov	sp,fp
 4016d94:	df000017 	ldw	fp,0(sp)
 4016d98:	dec00104 	addi	sp,sp,4
 4016d9c:	f800283a 	ret

04016da0 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
 4016da0:	defff904 	addi	sp,sp,-28
 4016da4:	dfc00615 	stw	ra,24(sp)
 4016da8:	df000515 	stw	fp,20(sp)
 4016dac:	df000504 	addi	fp,sp,20
 4016db0:	e13ffd15 	stw	r4,-12(fp)
 4016db4:	e17ffe15 	stw	r5,-8(fp)

  alt_32 timeout;
  alt_u8 result = 0;
 4016db8:	e03ffb85 	stb	zero,-18(fp)
  alt_u16 actualBytesTransferred;
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
 4016dbc:	e03ffc15 	stw	zero,-16(fp)
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 4016dc0:	00000d06 	br	4016df8 <tse_mac_sTxWrite+0x58>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 4016dc4:	e0bffc17 	ldw	r2,-16(fp)
 4016dc8:	10800044 	addi	r2,r2,1
 4016dcc:	e0bffc15 	stw	r2,-16(fp)
 4016dd0:	e0fffc17 	ldw	r3,-16(fp)
 4016dd4:	008003f4 	movhi	r2,15
 4016dd8:	10909044 	addi	r2,r2,16961
 4016ddc:	1880061e 	bne	r3,r2,4016df8 <tse_mac_sTxWrite+0x58>
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
 4016de0:	01010174 	movhi	r4,1029
 4016de4:	21227704 	addi	r4,r4,-30244
 4016de8:	40021940 	call	4002194 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
 4016dec:	00bffa84 	movi	r2,-22
 4016df0:	e0bfff15 	stw	r2,-4(fp)
 4016df4:	00002006 	br	4016e78 <tse_mac_sTxWrite+0xd8>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 4016df8:	e0bffd17 	ldw	r2,-12(fp)
 4016dfc:	10800117 	ldw	r2,4(r2)
 4016e00:	10800317 	ldw	r2,12(r2)
 4016e04:	10800037 	ldwio	r2,0(r2)
 4016e08:	1080040c 	andi	r2,r2,16
 4016e0c:	1004c03a 	cmpne	r2,r2,zero
 4016e10:	103fec1e 	bne	r2,zero,4016dc4 <tse_mac_sTxWrite+0x24>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
 4016e14:	e0bffd17 	ldw	r2,-12(fp)
 4016e18:	10800117 	ldw	r2,4(r2)
 4016e1c:	10800317 	ldw	r2,12(r2)
 4016e20:	10800404 	addi	r2,r2,16
 4016e24:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
 4016e28:	e0bffd17 	ldw	r2,-12(fp)
 4016e2c:	10800117 	ldw	r2,4(r2)
 4016e30:	10800317 	ldw	r2,12(r2)
 4016e34:	1007883a 	mov	r3,r2
 4016e38:	00803fc4 	movi	r2,255
 4016e3c:	18800035 	stwio	r2,0(r3)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
 4016e40:	e0bffd17 	ldw	r2,-12(fp)
 4016e44:	11000117 	ldw	r4,4(r2)
 4016e48:	e17ffe17 	ldw	r5,-8(fp)
 4016e4c:	4015f6c0 	call	4015f6c <alt_avalon_sgdma_do_sync_transfer>
 4016e50:	e0bffb85 	stb	r2,-18(fp)
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
 4016e54:	e0bffe17 	ldw	r2,-8(fp)
 4016e58:	10800704 	addi	r2,r2,28
 4016e5c:	10800037 	ldwio	r2,0(r2)
 4016e60:	1007883a 	mov	r3,r2
 4016e64:	00bfffc4 	movi	r2,-1
 4016e68:	1884703a 	and	r2,r3,r2
 4016e6c:	e0bffb0d 	sth	r2,-20(fp)

  return actualBytesTransferred;
 4016e70:	e0bffb0b 	ldhu	r2,-20(fp)
 4016e74:	e0bfff15 	stw	r2,-4(fp)
 4016e78:	e0bfff17 	ldw	r2,-4(fp)
}
 4016e7c:	e037883a 	mov	sp,fp
 4016e80:	dfc00117 	ldw	ra,4(sp)
 4016e84:	df000017 	ldw	fp,0(sp)
 4016e88:	dec00204 	addi	sp,sp,8
 4016e8c:	f800283a 	ret

04016e90 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
 4016e90:	defff904 	addi	sp,sp,-28
 4016e94:	dfc00615 	stw	ra,24(sp)
 4016e98:	df000515 	stw	fp,20(sp)
 4016e9c:	df000504 	addi	fp,sp,20
 4016ea0:	e13ffd15 	stw	r4,-12(fp)
 4016ea4:	e17ffe15 	stw	r5,-8(fp)
  alt_32 timeout;
  
  alt_u8 result = 0;
 4016ea8:	e03ffb05 	stb	zero,-20(fp)
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
 4016eac:	e03ffc15 	stw	zero,-16(fp)
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 4016eb0:	00000d06 	br	4016ee8 <tse_mac_aRxRead+0x58>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 4016eb4:	e0bffc17 	ldw	r2,-16(fp)
 4016eb8:	10800044 	addi	r2,r2,1
 4016ebc:	e0bffc15 	stw	r2,-16(fp)
 4016ec0:	e0fffc17 	ldw	r3,-16(fp)
 4016ec4:	008003f4 	movhi	r2,15
 4016ec8:	10909044 	addi	r2,r2,16961
 4016ecc:	1880061e 	bne	r3,r2,4016ee8 <tse_mac_aRxRead+0x58>
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
 4016ed0:	01010174 	movhi	r4,1029
 4016ed4:	21227e04 	addi	r4,r4,-30216
 4016ed8:	40021940 	call	4002194 <puts>
        return ENP_RESOURCE;  // avoid being stuck here
 4016edc:	00bffa84 	movi	r2,-22
 4016ee0:	e0bfff15 	stw	r2,-4(fp)
 4016ee4:	00000d06 	br	4016f1c <tse_mac_aRxRead+0x8c>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 4016ee8:	e0bffd17 	ldw	r2,-12(fp)
 4016eec:	10800217 	ldw	r2,8(r2)
 4016ef0:	10800317 	ldw	r2,12(r2)
 4016ef4:	10800037 	ldwio	r2,0(r2)
 4016ef8:	1080040c 	andi	r2,r2,16
 4016efc:	1004c03a 	cmpne	r2,r2,zero
 4016f00:	103fec1e 	bne	r2,zero,4016eb4 <tse_mac_aRxRead+0x24>
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
 4016f04:	e0bffd17 	ldw	r2,-12(fp)
 4016f08:	11000217 	ldw	r4,8(r2)
 4016f0c:	e17ffe17 	ldw	r5,-8(fp)
 4016f10:	4015e300 	call	4015e30 <alt_avalon_sgdma_do_async_transfer>
 4016f14:	e0bffb05 	stb	r2,-20(fp)
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);

 
  return SUCCESS;
 4016f18:	e03fff15 	stw	zero,-4(fp)
 4016f1c:	e0bfff17 	ldw	r2,-4(fp)
}
 4016f20:	e037883a 	mov	sp,fp
 4016f24:	dfc00117 	ldw	ra,4(sp)
 4016f28:	df000017 	ldw	fp,0(sp)
 4016f2c:	dec00204 	addi	sp,sp,8
 4016f30:	f800283a 	ret

04016f34 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
 4016f34:	defffc04 	addi	sp,sp,-16
 4016f38:	df000315 	stw	fp,12(sp)
 4016f3c:	df000304 	addi	fp,sp,12
 4016f40:	e13fff15 	stw	r4,-4(fp)
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4016f44:	e0bfff17 	ldw	r2,-4(fp)
 4016f48:	10800204 	addi	r2,r2,8
 4016f4c:	10800037 	ldwio	r2,0(r2)
 4016f50:	e0bffd15 	stw	r2,-12(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 4016f54:	e0bfff17 	ldw	r2,-4(fp)
 4016f58:	10800204 	addi	r2,r2,8
 4016f5c:	1007883a 	mov	r3,r2
 4016f60:	00880204 	movi	r2,8200
 4016f64:	18800035 	stwio	r2,0(r3)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
 4016f68:	e03ffe15 	stw	zero,-8(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 4016f6c:	00000306 	br	4016f7c <tse_mac_SwReset+0x48>
 4016f70:	e0bffe17 	ldw	r2,-8(fp)
 4016f74:	10800044 	addi	r2,r2,1
 4016f78:	e0bffe15 	stw	r2,-8(fp)
 4016f7c:	e0bfff17 	ldw	r2,-4(fp)
 4016f80:	10800204 	addi	r2,r2,8
 4016f84:	10800037 	ldwio	r2,0(r2)
 4016f88:	1088000c 	andi	r2,r2,8192
 4016f8c:	1005003a 	cmpeq	r2,r2,zero
 4016f90:	1000031e 	bne	r2,zero,4016fa0 <tse_mac_SwReset+0x6c>
 4016f94:	e0bffe17 	ldw	r2,-8(fp)
 4016f98:	1089c410 	cmplti	r2,r2,10000
 4016f9c:	103ff41e 	bne	r2,zero,4016f70 <tse_mac_SwReset+0x3c>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 4016fa0:	e0bfff17 	ldw	r2,-4(fp)
 4016fa4:	10800204 	addi	r2,r2,8
 4016fa8:	1007883a 	mov	r3,r2
 4016fac:	e0bffd17 	ldw	r2,-12(fp)
 4016fb0:	18800035 	stwio	r2,0(r3)
    return SUCCESS;
 4016fb4:	0005883a 	mov	r2,zero
}
 4016fb8:	e037883a 	mov	sp,fp
 4016fbc:	df000017 	ldw	fp,0(sp)
 4016fc0:	dec00104 	addi	sp,sp,4
 4016fc4:	f800283a 	ret

04016fc8 <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
 4016fc8:	defffd04 	addi	sp,sp,-12
 4016fcc:	df000215 	stw	fp,8(sp)
 4016fd0:	df000204 	addi	fp,sp,8
 4016fd4:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4016fd8:	e0bfff17 	ldw	r2,-4(fp)
 4016fdc:	10800204 	addi	r2,r2,8
 4016fe0:	10800037 	ldwio	r2,0(r2)
 4016fe4:	e0bffe15 	stw	r2,-8(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
 4016fe8:	e0fffe17 	ldw	r3,-8(fp)
 4016fec:	00bffdc4 	movi	r2,-9
 4016ff0:	1884703a 	and	r2,r3,r2
 4016ff4:	e0bffe15 	stw	r2,-8(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 4016ff8:	e0bfff17 	ldw	r2,-4(fp)
 4016ffc:	10800204 	addi	r2,r2,8
 4017000:	1007883a 	mov	r3,r2
 4017004:	e0bffe17 	ldw	r2,-8(fp)
 4017008:	18800035 	stwio	r2,0(r3)
  return SUCCESS;
 401700c:	0005883a 	mov	r2,zero
}
 4017010:	e037883a 	mov	sp,fp
 4017014:	df000017 	ldw	fp,0(sp)
 4017018:	dec00104 	addi	sp,sp,4
 401701c:	f800283a 	ret

04017020 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
 4017020:	defffd04 	addi	sp,sp,-12
 4017024:	df000215 	stw	fp,8(sp)
 4017028:	df000204 	addi	fp,sp,8
 401702c:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 4017030:	e0bfff17 	ldw	r2,-4(fp)
 4017034:	10800204 	addi	r2,r2,8
 4017038:	10800037 	ldwio	r2,0(r2)
 401703c:	e0bffe15 	stw	r2,-8(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 4017040:	e0bffe17 	ldw	r2,-8(fp)
 4017044:	10800214 	ori	r2,r2,8
 4017048:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 401704c:	e0bfff17 	ldw	r2,-4(fp)
 4017050:	10800204 	addi	r2,r2,8
 4017054:	1007883a 	mov	r3,r2
 4017058:	e0bffe17 	ldw	r2,-8(fp)
 401705c:	18800035 	stwio	r2,0(r3)
  return SUCCESS;
 4017060:	0005883a 	mov	r2,zero
}
 4017064:	e037883a 	mov	sp,fp
 4017068:	df000017 	ldw	fp,0(sp)
 401706c:	dec00104 	addi	sp,sp,4
 4017070:	f800283a 	ret

04017074 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 4017074:	defffa04 	addi	sp,sp,-24
 4017078:	dfc00515 	stw	ra,20(sp)
 401707c:	df000415 	stw	fp,16(sp)
 4017080:	dc000315 	stw	r16,12(sp)
 4017084:	df000304 	addi	fp,sp,12
 4017088:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 401708c:	e03ffd15 	stw	zero,-12(fp)
 4017090:	00002706 	br	4017130 <alt_tse_phy_add_profile+0xbc>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 4017094:	e0bffd17 	ldw	r2,-12(fp)
 4017098:	00c101b4 	movhi	r3,1030
 401709c:	18e0e704 	addi	r3,r3,-31844
 40170a0:	1085883a 	add	r2,r2,r2
 40170a4:	1085883a 	add	r2,r2,r2
 40170a8:	10c5883a 	add	r2,r2,r3
 40170ac:	10800017 	ldw	r2,0(r2)
 40170b0:	10c01417 	ldw	r3,80(r2)
 40170b4:	e0bffe17 	ldw	r2,-8(fp)
 40170b8:	10801417 	ldw	r2,80(r2)
 40170bc:	1880191e 	bne	r3,r2,4017124 <alt_tse_phy_add_profile+0xb0>
 40170c0:	e0bffd17 	ldw	r2,-12(fp)
 40170c4:	00c101b4 	movhi	r3,1030
 40170c8:	18e0e704 	addi	r3,r3,-31844
 40170cc:	1085883a 	add	r2,r2,r2
 40170d0:	1085883a 	add	r2,r2,r2
 40170d4:	10c5883a 	add	r2,r2,r3
 40170d8:	10800017 	ldw	r2,0(r2)
 40170dc:	10c01503 	ldbu	r3,84(r2)
 40170e0:	e0bffe17 	ldw	r2,-8(fp)
 40170e4:	10801503 	ldbu	r2,84(r2)
 40170e8:	18c03fcc 	andi	r3,r3,255
 40170ec:	10803fcc 	andi	r2,r2,255
 40170f0:	18800c1e 	bne	r3,r2,4017124 <alt_tse_phy_add_profile+0xb0>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 40170f4:	e0bffe17 	ldw	r2,-8(fp)
 40170f8:	10801417 	ldw	r2,80(r2)
 40170fc:	100b883a 	mov	r5,r2
 4017100:	e0bffe17 	ldw	r2,-8(fp)
 4017104:	10801503 	ldbu	r2,84(r2)
 4017108:	11803fcc 	andi	r6,r2,255
 401710c:	01010174 	movhi	r4,1029
 4017110:	21228504 	addi	r4,r4,-30188
 4017114:	400207c0 	call	400207c <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 4017118:	01010174 	movhi	r4,1029
 401711c:	21229904 	addi	r4,r4,-30108
 4017120:	40021940 	call	4002194 <puts>
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 4017124:	e0bffd17 	ldw	r2,-12(fp)
 4017128:	10800044 	addi	r2,r2,1
 401712c:	e0bffd15 	stw	r2,-12(fp)
 4017130:	d0a7fd03 	ldbu	r2,-24588(gp)
 4017134:	10c03fcc 	andi	r3,r2,255
 4017138:	e0bffd17 	ldw	r2,-12(fp)
 401713c:	10ffd516 	blt	r2,r3,4017094 <alt_tse_phy_add_profile+0x20>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 4017140:	d0a7fd03 	ldbu	r2,-24588(gp)
 4017144:	14003fcc 	andi	r16,r2,255
 4017148:	01001904 	movi	r4,100
 401714c:	4045ff80 	call	4045ff8 <malloc>
 4017150:	1009883a 	mov	r4,r2
 4017154:	00c101b4 	movhi	r3,1030
 4017158:	18e0e704 	addi	r3,r3,-31844
 401715c:	8405883a 	add	r2,r16,r16
 4017160:	1085883a 	add	r2,r2,r2
 4017164:	10c5883a 	add	r2,r2,r3
 4017168:	11000015 	stw	r4,0(r2)
    if(!pphy_profiles[phy_profile_count]) {
 401716c:	d0a7fd03 	ldbu	r2,-24588(gp)
 4017170:	10803fcc 	andi	r2,r2,255
 4017174:	00c101b4 	movhi	r3,1030
 4017178:	18e0e704 	addi	r3,r3,-31844
 401717c:	1085883a 	add	r2,r2,r2
 4017180:	1085883a 	add	r2,r2,r2
 4017184:	10c5883a 	add	r2,r2,r3
 4017188:	10800017 	ldw	r2,0(r2)
 401718c:	1004c03a 	cmpne	r2,r2,zero
 4017190:	1000081e 	bne	r2,zero,40171b4 <alt_tse_phy_add_profile+0x140>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 4017194:	d0a7fd03 	ldbu	r2,-24588(gp)
 4017198:	11403fcc 	andi	r5,r2,255
 401719c:	01010174 	movhi	r4,1029
 40171a0:	2122b104 	addi	r4,r4,-30012
 40171a4:	400207c0 	call	400207c <printf>
        return ALTERA_TSE_MALLOC_FAILED;
 40171a8:	00bfffc4 	movi	r2,-1
 40171ac:	e0bfff15 	stw	r2,-4(fp)
 40171b0:	00001f06 	br	4017230 <alt_tse_phy_add_profile+0x1bc>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 40171b4:	d0a7fd03 	ldbu	r2,-24588(gp)
 40171b8:	10803fcc 	andi	r2,r2,255
 40171bc:	00c101b4 	movhi	r3,1030
 40171c0:	18e0e704 	addi	r3,r3,-31844
 40171c4:	1085883a 	add	r2,r2,r2
 40171c8:	1085883a 	add	r2,r2,r2
 40171cc:	10c5883a 	add	r2,r2,r3
 40171d0:	10800017 	ldw	r2,0(r2)
 40171d4:	e0fffe17 	ldw	r3,-8(fp)
 40171d8:	1009883a 	mov	r4,r2
 40171dc:	180b883a 	mov	r5,r3
 40171e0:	01801904 	movi	r6,100
 40171e4:	4001de40 	call	4001de4 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 40171e8:	d0a7fd03 	ldbu	r2,-24588(gp)
 40171ec:	10803fcc 	andi	r2,r2,255
 40171f0:	00c101b4 	movhi	r3,1030
 40171f4:	18e0e704 	addi	r3,r3,-31844
 40171f8:	1085883a 	add	r2,r2,r2
 40171fc:	1085883a 	add	r2,r2,r2
 4017200:	10c5883a 	add	r2,r2,r3
 4017204:	10800017 	ldw	r2,0(r2)
 4017208:	1009883a 	mov	r4,r2
 401720c:	e17ffe17 	ldw	r5,-8(fp)
 4017210:	40460e00 	call	40460e0 <strcpy>
    
    phy_profile_count++;
 4017214:	d0a7fd03 	ldbu	r2,-24588(gp)
 4017218:	10800044 	addi	r2,r2,1
 401721c:	d0a7fd05 	stb	r2,-24588(gp)
    
    return phy_profile_count - 1;
 4017220:	d0a7fd03 	ldbu	r2,-24588(gp)
 4017224:	10803fcc 	andi	r2,r2,255
 4017228:	10bfffc4 	addi	r2,r2,-1
 401722c:	e0bfff15 	stw	r2,-4(fp)
 4017230:	e0bfff17 	ldw	r2,-4(fp)
}
 4017234:	e037883a 	mov	sp,fp
 4017238:	dfc00217 	ldw	ra,8(sp)
 401723c:	df000117 	ldw	fp,4(sp)
 4017240:	dc000017 	ldw	r16,0(sp)
 4017244:	dec00304 	addi	sp,sp,12
 4017248:	f800283a 	ret

0401724c <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
 401724c:	defff104 	addi	sp,sp,-60
 4017250:	dfc00e15 	stw	ra,56(sp)
 4017254:	df000d15 	stw	fp,52(sp)
 4017258:	dc000c15 	stw	r16,48(sp)
 401725c:	df000c04 	addi	fp,sp,48
 4017260:	e13ffb15 	stw	r4,-20(fp)
 4017264:	e17ffc15 	stw	r5,-16(fp)
 4017268:	e1bffd15 	stw	r6,-12(fp)
 401726c:	e1fffe15 	stw	r7,-8(fp)

	int i;
	int loop_end;
	
	alt_tse_system_mac					*pmac	= psys_mac;
 4017270:	e0bffb17 	ldw	r2,-20(fp)
 4017274:	e0bff815 	stw	r2,-32(fp)
	alt_tse_system_sgdma				*psgdma	= psys_sgdma;
 4017278:	e0bffc17 	ldw	r2,-16(fp)
 401727c:	e0bff715 	stw	r2,-36(fp)
	alt_tse_system_desc_mem				*pmem	= psys_mem;
 4017280:	e0bffd17 	ldw	r2,-12(fp)
 4017284:	e0bff615 	stw	r2,-40(fp)
	alt_tse_system_shared_fifo			*pfifo	= psys_shared_fifo;
 4017288:	e0bffe17 	ldw	r2,-8(fp)
 401728c:	e0bff515 	stw	r2,-44(fp)
	alt_tse_system_phy 					*pphy	= psys_phy;
 4017290:	e0800317 	ldw	r2,12(fp)
 4017294:	e0bff415 	stw	r2,-48(fp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
 4017298:	e0bff817 	ldw	r2,-32(fp)
 401729c:	10800303 	ldbu	r2,12(r2)
 40172a0:	10803fcc 	andi	r2,r2,255
 40172a4:	1004c03a 	cmpne	r2,r2,zero
 40172a8:	1000031e 	bne	r2,zero,40172b8 <alt_tse_system_add_sys+0x6c>
		loop_end = 1;
 40172ac:	00800044 	movi	r2,1
 40172b0:	e0bff915 	stw	r2,-28(fp)
 40172b4:	00001006 	br	40172f8 <alt_tse_system_add_sys+0xac>
	}
	else if(pmac->tse_num_of_channel > 0) {
 40172b8:	e0bff817 	ldw	r2,-32(fp)
 40172bc:	10800303 	ldbu	r2,12(r2)
 40172c0:	10803fcc 	andi	r2,r2,255
 40172c4:	1005003a 	cmpeq	r2,r2,zero
 40172c8:	1000051e 	bne	r2,zero,40172e0 <alt_tse_system_add_sys+0x94>
		loop_end = pmac->tse_num_of_channel; 
 40172cc:	e0bff817 	ldw	r2,-32(fp)
 40172d0:	10800303 	ldbu	r2,12(r2)
 40172d4:	10803fcc 	andi	r2,r2,255
 40172d8:	e0bff915 	stw	r2,-28(fp)
 40172dc:	00000606 	br	40172f8 <alt_tse_system_add_sys+0xac>
	}
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
 40172e0:	01010174 	movhi	r4,1029
 40172e4:	2122c004 	addi	r4,r4,-29952
 40172e8:	40021940 	call	4002194 <puts>
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
 40172ec:	00bfffc4 	movi	r2,-1
 40172f0:	e0bfff15 	stw	r2,-4(fp)
 40172f4:	00025306 	br	4017c44 <alt_tse_system_add_sys+0x9f8>
	}

	for(i = 0; i < loop_end; i++) {
 40172f8:	e03ffa15 	stw	zero,-24(fp)
 40172fc:	00024d06 	br	4017c34 <alt_tse_system_add_sys+0x9e8>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 4017300:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017304:	10803fcc 	andi	r2,r2,255
 4017308:	1080201c 	xori	r2,r2,128
 401730c:	10bfe004 	addi	r2,r2,-128
 4017310:	10800110 	cmplti	r2,r2,4
 4017314:	10000b1e 	bne	r2,zero,4017344 <alt_tse_system_add_sys+0xf8>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 4017318:	01010174 	movhi	r4,1029
 401731c:	2122cc04 	addi	r4,r4,-29904
 4017320:	40021940 	call	4002194 <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 4017324:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017328:	11803fcc 	andi	r6,r2,255
 401732c:	3180201c 	xori	r6,r6,128
 4017330:	31bfe004 	addi	r6,r6,-128
 4017334:	01010174 	movhi	r4,1029
 4017338:	2122dc04 	addi	r4,r4,-29840
 401733c:	01400104 	movi	r5,4
 4017340:	400207c0 	call	400207c <printf>
		}

		/* Add MAC info to alt_tse_system_info structure */
		if(pmac == 0) {
 4017344:	e0bff817 	ldw	r2,-32(fp)
 4017348:	1004c03a 	cmpne	r2,r2,zero
 401734c:	1000091e 	bne	r2,zero,4017374 <alt_tse_system_add_sys+0x128>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 4017350:	01010174 	movhi	r4,1029
 4017354:	2122eb04 	addi	r4,r4,-29780
 4017358:	40021940 	call	4002194 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
 401735c:	01010174 	movhi	r4,1029
 4017360:	2122f504 	addi	r4,r4,-29740
 4017364:	40021940 	call	4002194 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 4017368:	00bfffc4 	movi	r2,-1
 401736c:	e0bfff15 	stw	r2,-4(fp)
 4017370:	00023406 	br	4017c44 <alt_tse_system_add_sys+0x9f8>
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 4017374:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017378:	11403fcc 	andi	r5,r2,255
 401737c:	2940201c 	xori	r5,r5,128
 4017380:	297fe004 	addi	r5,r5,-128
 4017384:	e0bff817 	ldw	r2,-32(fp)
 4017388:	10c00017 	ldw	r3,0(r2)
 401738c:	e0bffa17 	ldw	r2,-24(fp)
 4017390:	100492ba 	slli	r2,r2,10
 4017394:	1889883a 	add	r4,r3,r2
 4017398:	00c10174 	movhi	r3,1029
 401739c:	18c39f04 	addi	r3,r3,3708
 40173a0:	28801224 	muli	r2,r5,72
 40173a4:	10c5883a 	add	r2,r2,r3
 40173a8:	11000015 	stw	r4,0(r2)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
 40173ac:	d0a7fd83 	ldbu	r2,-24586(gp)
 40173b0:	11003fcc 	andi	r4,r2,255
 40173b4:	2100201c 	xori	r4,r4,128
 40173b8:	213fe004 	addi	r4,r4,-128
 40173bc:	e0bff817 	ldw	r2,-32(fp)
 40173c0:	1140010b 	ldhu	r5,4(r2)
 40173c4:	00c10174 	movhi	r3,1029
 40173c8:	18c39f04 	addi	r3,r3,3708
 40173cc:	20801224 	muli	r2,r4,72
 40173d0:	10c5883a 	add	r2,r2,r3
 40173d4:	10800104 	addi	r2,r2,4
 40173d8:	1140000d 	sth	r5,0(r2)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
 40173dc:	d0a7fd83 	ldbu	r2,-24586(gp)
 40173e0:	11003fcc 	andi	r4,r2,255
 40173e4:	2100201c 	xori	r4,r4,128
 40173e8:	213fe004 	addi	r4,r4,-128
 40173ec:	e0bff817 	ldw	r2,-32(fp)
 40173f0:	1140018b 	ldhu	r5,6(r2)
 40173f4:	00c10174 	movhi	r3,1029
 40173f8:	18c39f04 	addi	r3,r3,3708
 40173fc:	20801224 	muli	r2,r4,72
 4017400:	10c5883a 	add	r2,r2,r3
 4017404:	10800104 	addi	r2,r2,4
 4017408:	1140008d 	sth	r5,2(r2)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
 401740c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017410:	11003fcc 	andi	r4,r2,255
 4017414:	2100201c 	xori	r4,r4,128
 4017418:	213fe004 	addi	r4,r4,-128
 401741c:	e0bff817 	ldw	r2,-32(fp)
 4017420:	11400203 	ldbu	r5,8(r2)
 4017424:	00c10174 	movhi	r3,1029
 4017428:	18c39f04 	addi	r3,r3,3708
 401742c:	20801224 	muli	r2,r4,72
 4017430:	10c5883a 	add	r2,r2,r3
 4017434:	10800204 	addi	r2,r2,8
 4017438:	11400005 	stb	r5,0(r2)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
 401743c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017440:	11003fcc 	andi	r4,r2,255
 4017444:	2100201c 	xori	r4,r4,128
 4017448:	213fe004 	addi	r4,r4,-128
 401744c:	e0bff817 	ldw	r2,-32(fp)
 4017450:	11400243 	ldbu	r5,9(r2)
 4017454:	00c10174 	movhi	r3,1029
 4017458:	18c39f04 	addi	r3,r3,3708
 401745c:	20801224 	muli	r2,r4,72
 4017460:	10c5883a 	add	r2,r2,r3
 4017464:	10800204 	addi	r2,r2,8
 4017468:	11400045 	stb	r5,1(r2)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
 401746c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017470:	11003fcc 	andi	r4,r2,255
 4017474:	2100201c 	xori	r4,r4,128
 4017478:	213fe004 	addi	r4,r4,-128
 401747c:	e0bff817 	ldw	r2,-32(fp)
 4017480:	11400283 	ldbu	r5,10(r2)
 4017484:	00c10174 	movhi	r3,1029
 4017488:	18c39f04 	addi	r3,r3,3708
 401748c:	20801224 	muli	r2,r4,72
 4017490:	10c5883a 	add	r2,r2,r3
 4017494:	10800204 	addi	r2,r2,8
 4017498:	11400085 	stb	r5,2(r2)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
 401749c:	d0a7fd83 	ldbu	r2,-24586(gp)
 40174a0:	11003fcc 	andi	r4,r2,255
 40174a4:	2100201c 	xori	r4,r4,128
 40174a8:	213fe004 	addi	r4,r4,-128
 40174ac:	e0bff817 	ldw	r2,-32(fp)
 40174b0:	114002c3 	ldbu	r5,11(r2)
 40174b4:	00c10174 	movhi	r3,1029
 40174b8:	18c39f04 	addi	r3,r3,3708
 40174bc:	20801224 	muli	r2,r4,72
 40174c0:	10c5883a 	add	r2,r2,r3
 40174c4:	10800204 	addi	r2,r2,8
 40174c8:	114000c5 	stb	r5,3(r2)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
 40174cc:	d0a7fd83 	ldbu	r2,-24586(gp)
 40174d0:	11003fcc 	andi	r4,r2,255
 40174d4:	2100201c 	xori	r4,r4,128
 40174d8:	213fe004 	addi	r4,r4,-128
 40174dc:	e0bff817 	ldw	r2,-32(fp)
 40174e0:	11400303 	ldbu	r5,12(r2)
 40174e4:	00c10174 	movhi	r3,1029
 40174e8:	18c39f04 	addi	r3,r3,3708
 40174ec:	20801224 	muli	r2,r4,72
 40174f0:	10c5883a 	add	r2,r2,r3
 40174f4:	10800304 	addi	r2,r2,12
 40174f8:	11400005 	stb	r5,0(r2)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
 40174fc:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017500:	11003fcc 	andi	r4,r2,255
 4017504:	2100201c 	xori	r4,r4,128
 4017508:	213fe004 	addi	r4,r4,-128
 401750c:	e0bff817 	ldw	r2,-32(fp)
 4017510:	11400343 	ldbu	r5,13(r2)
 4017514:	00c10174 	movhi	r3,1029
 4017518:	18c39f04 	addi	r3,r3,3708
 401751c:	20801224 	muli	r2,r4,72
 4017520:	10c5883a 	add	r2,r2,r3
 4017524:	10800304 	addi	r2,r2,12
 4017528:	11400045 	stb	r5,1(r2)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
 401752c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017530:	11003fcc 	andi	r4,r2,255
 4017534:	2100201c 	xori	r4,r4,128
 4017538:	213fe004 	addi	r4,r4,-128
 401753c:	e0bff817 	ldw	r2,-32(fp)
 4017540:	11400383 	ldbu	r5,14(r2)
 4017544:	00c10174 	movhi	r3,1029
 4017548:	18c39f04 	addi	r3,r3,3708
 401754c:	20801224 	muli	r2,r4,72
 4017550:	10c5883a 	add	r2,r2,r3
 4017554:	10800304 	addi	r2,r2,12
 4017558:	11400085 	stb	r5,2(r2)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
 401755c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017560:	11003fcc 	andi	r4,r2,255
 4017564:	2100201c 	xori	r4,r4,128
 4017568:	213fe004 	addi	r4,r4,-128
 401756c:	e0bff817 	ldw	r2,-32(fp)
 4017570:	114003c3 	ldbu	r5,15(r2)
 4017574:	00c10174 	movhi	r3,1029
 4017578:	18c39f04 	addi	r3,r3,3708
 401757c:	20801224 	muli	r2,r4,72
 4017580:	10c5883a 	add	r2,r2,r3
 4017584:	10800304 	addi	r2,r2,12
 4017588:	114000c5 	stb	r5,3(r2)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
 401758c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017590:	11003fcc 	andi	r4,r2,255
 4017594:	2100201c 	xori	r4,r4,128
 4017598:	213fe004 	addi	r4,r4,-128
 401759c:	e0bff817 	ldw	r2,-32(fp)
 40175a0:	11400403 	ldbu	r5,16(r2)
 40175a4:	00c10174 	movhi	r3,1029
 40175a8:	18c39f04 	addi	r3,r3,3708
 40175ac:	20801224 	muli	r2,r4,72
 40175b0:	10c5883a 	add	r2,r2,r3
 40175b4:	10800404 	addi	r2,r2,16
 40175b8:	11400005 	stb	r5,0(r2)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
 40175bc:	e0bff717 	ldw	r2,-36(fp)
 40175c0:	1004c03a 	cmpne	r2,r2,zero
 40175c4:	10000d1e 	bne	r2,zero,40175fc <alt_tse_system_add_sys+0x3b0>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
 40175c8:	01010174 	movhi	r4,1029
 40175cc:	21230704 	addi	r4,r4,-29668
 40175d0:	40021940 	call	4002194 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 40175d4:	d0a7fd83 	ldbu	r2,-24586(gp)
 40175d8:	11403fcc 	andi	r5,r2,255
 40175dc:	2940201c 	xori	r5,r5,128
 40175e0:	297fe004 	addi	r5,r5,-128
 40175e4:	01010174 	movhi	r4,1029
 40175e8:	21231204 	addi	r4,r4,-29624
 40175ec:	400207c0 	call	400207c <printf>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 40175f0:	00bfffc4 	movi	r2,-1
 40175f4:	e0bfff15 	stw	r2,-4(fp)
 40175f8:	00019206 	br	4017c44 <alt_tse_system_add_sys+0x9f8>
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
 40175fc:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017600:	14003fcc 	andi	r16,r2,255
 4017604:	8400201c 	xori	r16,r16,128
 4017608:	843fe004 	addi	r16,r16,-128
 401760c:	e0bff717 	ldw	r2,-36(fp)
 4017610:	11000017 	ldw	r4,0(r2)
 4017614:	40029d00 	call	40029d0 <strlen>
 4017618:	11000044 	addi	r4,r2,1
 401761c:	4045ff80 	call	4045ff8 <malloc>
 4017620:	1009883a 	mov	r4,r2
 4017624:	00c10174 	movhi	r3,1029
 4017628:	18c39f04 	addi	r3,r3,3708
 401762c:	80801224 	muli	r2,r16,72
 4017630:	10c5883a 	add	r2,r2,r3
 4017634:	10800504 	addi	r2,r2,20
 4017638:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
 401763c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017640:	10803fcc 	andi	r2,r2,255
 4017644:	1080201c 	xori	r2,r2,128
 4017648:	10bfe004 	addi	r2,r2,-128
 401764c:	00c10174 	movhi	r3,1029
 4017650:	18c39f04 	addi	r3,r3,3708
 4017654:	10801224 	muli	r2,r2,72
 4017658:	10c5883a 	add	r2,r2,r3
 401765c:	10800504 	addi	r2,r2,20
 4017660:	10800017 	ldw	r2,0(r2)
 4017664:	1004c03a 	cmpne	r2,r2,zero
 4017668:	10000a1e 	bne	r2,zero,4017694 <alt_tse_system_add_sys+0x448>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
 401766c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017670:	11403fcc 	andi	r5,r2,255
 4017674:	2940201c 	xori	r5,r5,128
 4017678:	297fe004 	addi	r5,r5,-128
 401767c:	01010174 	movhi	r4,1029
 4017680:	21232a04 	addi	r4,r4,-29528
 4017684:	400207c0 	call	400207c <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 4017688:	00bfffc4 	movi	r2,-1
 401768c:	e0bfff15 	stw	r2,-4(fp)
 4017690:	00016c06 	br	4017c44 <alt_tse_system_add_sys+0x9f8>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
 4017694:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017698:	10803fcc 	andi	r2,r2,255
 401769c:	1080201c 	xori	r2,r2,128
 40176a0:	10bfe004 	addi	r2,r2,-128
 40176a4:	00c10174 	movhi	r3,1029
 40176a8:	18c39f04 	addi	r3,r3,3708
 40176ac:	10801224 	muli	r2,r2,72
 40176b0:	10c5883a 	add	r2,r2,r3
 40176b4:	10800504 	addi	r2,r2,20
 40176b8:	11000017 	ldw	r4,0(r2)
 40176bc:	e0bff717 	ldw	r2,-36(fp)
 40176c0:	11400017 	ldw	r5,0(r2)
 40176c4:	40460e00 	call	40460e0 <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 40176c8:	d0a7fd83 	ldbu	r2,-24586(gp)
 40176cc:	14003fcc 	andi	r16,r2,255
 40176d0:	8400201c 	xori	r16,r16,128
 40176d4:	843fe004 	addi	r16,r16,-128
 40176d8:	e0bff717 	ldw	r2,-36(fp)
 40176dc:	11000117 	ldw	r4,4(r2)
 40176e0:	40029d00 	call	40029d0 <strlen>
 40176e4:	11000044 	addi	r4,r2,1
 40176e8:	4045ff80 	call	4045ff8 <malloc>
 40176ec:	1009883a 	mov	r4,r2
 40176f0:	00c10174 	movhi	r3,1029
 40176f4:	18c39f04 	addi	r3,r3,3708
 40176f8:	80801224 	muli	r2,r16,72
 40176fc:	10c5883a 	add	r2,r2,r3
 4017700:	10800604 	addi	r2,r2,24
 4017704:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 4017708:	d0a7fd83 	ldbu	r2,-24586(gp)
 401770c:	10803fcc 	andi	r2,r2,255
 4017710:	1080201c 	xori	r2,r2,128
 4017714:	10bfe004 	addi	r2,r2,-128
 4017718:	00c10174 	movhi	r3,1029
 401771c:	18c39f04 	addi	r3,r3,3708
 4017720:	10801224 	muli	r2,r2,72
 4017724:	10c5883a 	add	r2,r2,r3
 4017728:	10800604 	addi	r2,r2,24
 401772c:	10800017 	ldw	r2,0(r2)
 4017730:	1004c03a 	cmpne	r2,r2,zero
 4017734:	10000a1e 	bne	r2,zero,4017760 <alt_tse_system_add_sys+0x514>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
 4017738:	d0a7fd83 	ldbu	r2,-24586(gp)
 401773c:	11403fcc 	andi	r5,r2,255
 4017740:	2940201c 	xori	r5,r5,128
 4017744:	297fe004 	addi	r5,r5,-128
 4017748:	01010174 	movhi	r4,1029
 401774c:	21233d04 	addi	r4,r4,-29452
 4017750:	400207c0 	call	400207c <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 4017754:	00bfffc4 	movi	r2,-1
 4017758:	e0bfff15 	stw	r2,-4(fp)
 401775c:	00013906 	br	4017c44 <alt_tse_system_add_sys+0x9f8>
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
 4017760:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017764:	10803fcc 	andi	r2,r2,255
 4017768:	1080201c 	xori	r2,r2,128
 401776c:	10bfe004 	addi	r2,r2,-128
 4017770:	00c10174 	movhi	r3,1029
 4017774:	18c39f04 	addi	r3,r3,3708
 4017778:	10801224 	muli	r2,r2,72
 401777c:	10c5883a 	add	r2,r2,r3
 4017780:	10800604 	addi	r2,r2,24
 4017784:	11000017 	ldw	r4,0(r2)
 4017788:	e0bff717 	ldw	r2,-36(fp)
 401778c:	11400117 	ldw	r5,4(r2)
 4017790:	40460e00 	call	40460e0 <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
 4017794:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017798:	11003fcc 	andi	r4,r2,255
 401779c:	2100201c 	xori	r4,r4,128
 40177a0:	213fe004 	addi	r4,r4,-128
 40177a4:	e0bff717 	ldw	r2,-36(fp)
 40177a8:	1140020b 	ldhu	r5,8(r2)
 40177ac:	00c10174 	movhi	r3,1029
 40177b0:	18c39f04 	addi	r3,r3,3708
 40177b4:	20801224 	muli	r2,r4,72
 40177b8:	10c5883a 	add	r2,r2,r3
 40177bc:	10800704 	addi	r2,r2,28
 40177c0:	1140000d 	sth	r5,0(r2)
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
 40177c4:	e0bff617 	ldw	r2,-40(fp)
 40177c8:	1004c03a 	cmpne	r2,r2,zero
 40177cc:	1000151e 	bne	r2,zero,4017824 <alt_tse_system_add_sys+0x5d8>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
 40177d0:	d0a7fd83 	ldbu	r2,-24586(gp)
 40177d4:	10803fcc 	andi	r2,r2,255
 40177d8:	1080201c 	xori	r2,r2,128
 40177dc:	10bfe004 	addi	r2,r2,-128
 40177e0:	00c10174 	movhi	r3,1029
 40177e4:	18c39f04 	addi	r3,r3,3708
 40177e8:	10801224 	muli	r2,r2,72
 40177ec:	10c5883a 	add	r2,r2,r3
 40177f0:	10800704 	addi	r2,r2,28
 40177f4:	10000085 	stb	zero,2(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
 40177f8:	d0a7fd83 	ldbu	r2,-24586(gp)
 40177fc:	10803fcc 	andi	r2,r2,255
 4017800:	1080201c 	xori	r2,r2,128
 4017804:	10bfe004 	addi	r2,r2,-128
 4017808:	00c10174 	movhi	r3,1029
 401780c:	18c39f04 	addi	r3,r3,3708
 4017810:	10801224 	muli	r2,r2,72
 4017814:	10c5883a 	add	r2,r2,r3
 4017818:	10800804 	addi	r2,r2,32
 401781c:	10000015 	stw	zero,0(r2)
 4017820:	00001806 	br	4017884 <alt_tse_system_add_sys+0x638>
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
 4017824:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017828:	11003fcc 	andi	r4,r2,255
 401782c:	2100201c 	xori	r4,r4,128
 4017830:	213fe004 	addi	r4,r4,-128
 4017834:	e0bff617 	ldw	r2,-40(fp)
 4017838:	11400003 	ldbu	r5,0(r2)
 401783c:	00c10174 	movhi	r3,1029
 4017840:	18c39f04 	addi	r3,r3,3708
 4017844:	20801224 	muli	r2,r4,72
 4017848:	10c5883a 	add	r2,r2,r3
 401784c:	10800704 	addi	r2,r2,28
 4017850:	11400085 	stb	r5,2(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
 4017854:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017858:	11003fcc 	andi	r4,r2,255
 401785c:	2100201c 	xori	r4,r4,128
 4017860:	213fe004 	addi	r4,r4,-128
 4017864:	e0bff617 	ldw	r2,-40(fp)
 4017868:	11400117 	ldw	r5,4(r2)
 401786c:	00c10174 	movhi	r3,1029
 4017870:	18c39f04 	addi	r3,r3,3708
 4017874:	20801224 	muli	r2,r4,72
 4017878:	10c5883a 	add	r2,r2,r3
 401787c:	10800804 	addi	r2,r2,32
 4017880:	11400015 	stw	r5,0(r2)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
 4017884:	e0bff517 	ldw	r2,-44(fp)
 4017888:	1004c03a 	cmpne	r2,r2,zero
 401788c:	1000471e 	bne	r2,zero,40179ac <alt_tse_system_add_sys+0x760>
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 4017890:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017894:	10803fcc 	andi	r2,r2,255
 4017898:	1080201c 	xori	r2,r2,128
 401789c:	10bfe004 	addi	r2,r2,-128
 40178a0:	00c10174 	movhi	r3,1029
 40178a4:	18c39f04 	addi	r3,r3,3708
 40178a8:	10801224 	muli	r2,r2,72
 40178ac:	10c5883a 	add	r2,r2,r3
 40178b0:	10800904 	addi	r2,r2,36
 40178b4:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
 40178b8:	d0a7fd83 	ldbu	r2,-24586(gp)
 40178bc:	10803fcc 	andi	r2,r2,255
 40178c0:	1080201c 	xori	r2,r2,128
 40178c4:	10bfe004 	addi	r2,r2,-128
 40178c8:	00c10174 	movhi	r3,1029
 40178cc:	18c39f04 	addi	r3,r3,3708
 40178d0:	10801224 	muli	r2,r2,72
 40178d4:	10c5883a 	add	r2,r2,r3
 40178d8:	10800a04 	addi	r2,r2,40
 40178dc:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
 40178e0:	d0a7fd83 	ldbu	r2,-24586(gp)
 40178e4:	10803fcc 	andi	r2,r2,255
 40178e8:	1080201c 	xori	r2,r2,128
 40178ec:	10bfe004 	addi	r2,r2,-128
 40178f0:	00c10174 	movhi	r3,1029
 40178f4:	18c39f04 	addi	r3,r3,3708
 40178f8:	10801224 	muli	r2,r2,72
 40178fc:	10c5883a 	add	r2,r2,r3
 4017900:	10800b04 	addi	r2,r2,44
 4017904:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 4017908:	d0a7fd83 	ldbu	r2,-24586(gp)
 401790c:	10803fcc 	andi	r2,r2,255
 4017910:	1080201c 	xori	r2,r2,128
 4017914:	10bfe004 	addi	r2,r2,-128
 4017918:	00c10174 	movhi	r3,1029
 401791c:	18c39f04 	addi	r3,r3,3708
 4017920:	10801224 	muli	r2,r2,72
 4017924:	10c5883a 	add	r2,r2,r3
 4017928:	10800c04 	addi	r2,r2,48
 401792c:	10000015 	stw	zero,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
 4017930:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017934:	10803fcc 	andi	r2,r2,255
 4017938:	1080201c 	xori	r2,r2,128
 401793c:	10bfe004 	addi	r2,r2,-128
 4017940:	00c10174 	movhi	r3,1029
 4017944:	18c39f04 	addi	r3,r3,3708
 4017948:	10801224 	muli	r2,r2,72
 401794c:	10c5883a 	add	r2,r2,r3
 4017950:	10800d04 	addi	r2,r2,52
 4017954:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
 4017958:	d0a7fd83 	ldbu	r2,-24586(gp)
 401795c:	10803fcc 	andi	r2,r2,255
 4017960:	1080201c 	xori	r2,r2,128
 4017964:	10bfe004 	addi	r2,r2,-128
 4017968:	00c10174 	movhi	r3,1029
 401796c:	18c39f04 	addi	r3,r3,3708
 4017970:	10801224 	muli	r2,r2,72
 4017974:	10c5883a 	add	r2,r2,r3
 4017978:	10800e04 	addi	r2,r2,56
 401797c:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 4017980:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017984:	10803fcc 	andi	r2,r2,255
 4017988:	1080201c 	xori	r2,r2,128
 401798c:	10bfe004 	addi	r2,r2,-128
 4017990:	00c10174 	movhi	r3,1029
 4017994:	18c39f04 	addi	r3,r3,3708
 4017998:	10801224 	muli	r2,r2,72
 401799c:	10c5883a 	add	r2,r2,r3
 40179a0:	10800f04 	addi	r2,r2,60
 40179a4:	10000015 	stw	zero,0(r2)
 40179a8:	00005406 	br	4017afc <alt_tse_system_add_sys+0x8b0>
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 40179ac:	d0a7fd83 	ldbu	r2,-24586(gp)
 40179b0:	11003fcc 	andi	r4,r2,255
 40179b4:	2100201c 	xori	r4,r4,128
 40179b8:	213fe004 	addi	r4,r4,-128
 40179bc:	e0bff517 	ldw	r2,-44(fp)
 40179c0:	11400003 	ldbu	r5,0(r2)
 40179c4:	00c10174 	movhi	r3,1029
 40179c8:	18c39f04 	addi	r3,r3,3708
 40179cc:	20801224 	muli	r2,r4,72
 40179d0:	10c5883a 	add	r2,r2,r3
 40179d4:	10800904 	addi	r2,r2,36
 40179d8:	11400005 	stb	r5,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
 40179dc:	d0a7fd83 	ldbu	r2,-24586(gp)
 40179e0:	11003fcc 	andi	r4,r2,255
 40179e4:	2100201c 	xori	r4,r4,128
 40179e8:	213fe004 	addi	r4,r4,-128
 40179ec:	e0bff517 	ldw	r2,-44(fp)
 40179f0:	11400117 	ldw	r5,4(r2)
 40179f4:	00c10174 	movhi	r3,1029
 40179f8:	18c39f04 	addi	r3,r3,3708
 40179fc:	20801224 	muli	r2,r4,72
 4017a00:	10c5883a 	add	r2,r2,r3
 4017a04:	10800a04 	addi	r2,r2,40
 4017a08:	11400015 	stw	r5,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
 4017a0c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017a10:	11003fcc 	andi	r4,r2,255
 4017a14:	2100201c 	xori	r4,r4,128
 4017a18:	213fe004 	addi	r4,r4,-128
 4017a1c:	e0bff517 	ldw	r2,-44(fp)
 4017a20:	11400217 	ldw	r5,8(r2)
 4017a24:	00c10174 	movhi	r3,1029
 4017a28:	18c39f04 	addi	r3,r3,3708
 4017a2c:	20801224 	muli	r2,r4,72
 4017a30:	10c5883a 	add	r2,r2,r3
 4017a34:	10800b04 	addi	r2,r2,44
 4017a38:	11400015 	stw	r5,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 4017a3c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017a40:	11003fcc 	andi	r4,r2,255
 4017a44:	2100201c 	xori	r4,r4,128
 4017a48:	213fe004 	addi	r4,r4,-128
 4017a4c:	e0bff517 	ldw	r2,-44(fp)
 4017a50:	11400317 	ldw	r5,12(r2)
 4017a54:	00c10174 	movhi	r3,1029
 4017a58:	18c39f04 	addi	r3,r3,3708
 4017a5c:	20801224 	muli	r2,r4,72
 4017a60:	10c5883a 	add	r2,r2,r3
 4017a64:	10800c04 	addi	r2,r2,48
 4017a68:	11400015 	stw	r5,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
 4017a6c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017a70:	11003fcc 	andi	r4,r2,255
 4017a74:	2100201c 	xori	r4,r4,128
 4017a78:	213fe004 	addi	r4,r4,-128
 4017a7c:	e0bff517 	ldw	r2,-44(fp)
 4017a80:	11400417 	ldw	r5,16(r2)
 4017a84:	00c10174 	movhi	r3,1029
 4017a88:	18c39f04 	addi	r3,r3,3708
 4017a8c:	20801224 	muli	r2,r4,72
 4017a90:	10c5883a 	add	r2,r2,r3
 4017a94:	10800d04 	addi	r2,r2,52
 4017a98:	11400015 	stw	r5,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
 4017a9c:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017aa0:	11003fcc 	andi	r4,r2,255
 4017aa4:	2100201c 	xori	r4,r4,128
 4017aa8:	213fe004 	addi	r4,r4,-128
 4017aac:	e0bff517 	ldw	r2,-44(fp)
 4017ab0:	11400517 	ldw	r5,20(r2)
 4017ab4:	00c10174 	movhi	r3,1029
 4017ab8:	18c39f04 	addi	r3,r3,3708
 4017abc:	20801224 	muli	r2,r4,72
 4017ac0:	10c5883a 	add	r2,r2,r3
 4017ac4:	10800e04 	addi	r2,r2,56
 4017ac8:	11400015 	stw	r5,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 4017acc:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017ad0:	11003fcc 	andi	r4,r2,255
 4017ad4:	2100201c 	xori	r4,r4,128
 4017ad8:	213fe004 	addi	r4,r4,-128
 4017adc:	e0bff517 	ldw	r2,-44(fp)
 4017ae0:	11400617 	ldw	r5,24(r2)
 4017ae4:	00c10174 	movhi	r3,1029
 4017ae8:	18c39f04 	addi	r3,r3,3708
 4017aec:	20801224 	muli	r2,r4,72
 4017af0:	10c5883a 	add	r2,r2,r3
 4017af4:	10800f04 	addi	r2,r2,60
 4017af8:	11400015 	stw	r5,0(r2)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
 4017afc:	e0bff417 	ldw	r2,-48(fp)
 4017b00:	1004c03a 	cmpne	r2,r2,zero
 4017b04:	1000161e 	bne	r2,zero,4017b60 <alt_tse_system_add_sys+0x914>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
 4017b08:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017b0c:	10803fcc 	andi	r2,r2,255
 4017b10:	1080201c 	xori	r2,r2,128
 4017b14:	10bfe004 	addi	r2,r2,-128
 4017b18:	00c10174 	movhi	r3,1029
 4017b1c:	18c39f04 	addi	r3,r3,3708
 4017b20:	10801224 	muli	r2,r2,72
 4017b24:	10c5883a 	add	r2,r2,r3
 4017b28:	10c01004 	addi	r3,r2,64
 4017b2c:	00bfffc4 	movi	r2,-1
 4017b30:	18800015 	stw	r2,0(r3)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
 4017b34:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017b38:	10803fcc 	andi	r2,r2,255
 4017b3c:	1080201c 	xori	r2,r2,128
 4017b40:	10bfe004 	addi	r2,r2,-128
 4017b44:	00c10174 	movhi	r3,1029
 4017b48:	18c39f04 	addi	r3,r3,3708
 4017b4c:	10801224 	muli	r2,r2,72
 4017b50:	10c5883a 	add	r2,r2,r3
 4017b54:	10801104 	addi	r2,r2,68
 4017b58:	10000015 	stw	zero,0(r2)
 4017b5c:	00001806 	br	4017bc0 <alt_tse_system_add_sys+0x974>
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
 4017b60:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017b64:	11003fcc 	andi	r4,r2,255
 4017b68:	2100201c 	xori	r4,r4,128
 4017b6c:	213fe004 	addi	r4,r4,-128
 4017b70:	e0bff417 	ldw	r2,-48(fp)
 4017b74:	11400017 	ldw	r5,0(r2)
 4017b78:	00c10174 	movhi	r3,1029
 4017b7c:	18c39f04 	addi	r3,r3,3708
 4017b80:	20801224 	muli	r2,r4,72
 4017b84:	10c5883a 	add	r2,r2,r3
 4017b88:	10801004 	addi	r2,r2,64
 4017b8c:	11400015 	stw	r5,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
 4017b90:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017b94:	11003fcc 	andi	r4,r2,255
 4017b98:	2100201c 	xori	r4,r4,128
 4017b9c:	213fe004 	addi	r4,r4,-128
 4017ba0:	e0bff417 	ldw	r2,-48(fp)
 4017ba4:	11400117 	ldw	r5,4(r2)
 4017ba8:	00c10174 	movhi	r3,1029
 4017bac:	18c39f04 	addi	r3,r3,3708
 4017bb0:	20801224 	muli	r2,r4,72
 4017bb4:	10c5883a 	add	r2,r2,r3
 4017bb8:	10801104 	addi	r2,r2,68
 4017bbc:	11400015 	stw	r5,0(r2)
		}
		
		/* Point to next structure */
		psgdma++;
 4017bc0:	e0bff717 	ldw	r2,-36(fp)
 4017bc4:	10800304 	addi	r2,r2,12
 4017bc8:	e0bff715 	stw	r2,-36(fp)
		if(pmem) pmem++;
 4017bcc:	e0bff617 	ldw	r2,-40(fp)
 4017bd0:	1005003a 	cmpeq	r2,r2,zero
 4017bd4:	1000031e 	bne	r2,zero,4017be4 <alt_tse_system_add_sys+0x998>
 4017bd8:	e0bff617 	ldw	r2,-40(fp)
 4017bdc:	10800204 	addi	r2,r2,8
 4017be0:	e0bff615 	stw	r2,-40(fp)
		if(pfifo) pfifo++;
 4017be4:	e0bff517 	ldw	r2,-44(fp)
 4017be8:	1005003a 	cmpeq	r2,r2,zero
 4017bec:	1000031e 	bne	r2,zero,4017bfc <alt_tse_system_add_sys+0x9b0>
 4017bf0:	e0bff517 	ldw	r2,-44(fp)
 4017bf4:	10800704 	addi	r2,r2,28
 4017bf8:	e0bff515 	stw	r2,-44(fp)
		if(pphy) pphy++;
 4017bfc:	e0bff417 	ldw	r2,-48(fp)
 4017c00:	1005003a 	cmpeq	r2,r2,zero
 4017c04:	1000031e 	bne	r2,zero,4017c14 <alt_tse_system_add_sys+0x9c8>
 4017c08:	e0bff417 	ldw	r2,-48(fp)
 4017c0c:	10800204 	addi	r2,r2,8
 4017c10:	e0bff415 	stw	r2,-48(fp)
		
		tse_system_count++;
 4017c14:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017c18:	10800044 	addi	r2,r2,1
 4017c1c:	d0a7fd85 	stb	r2,-24586(gp)
		max_mac_system = tse_system_count;
 4017c20:	d0a7fd83 	ldbu	r2,-24586(gp)
 4017c24:	d0a02a05 	stb	r2,-32600(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
 4017c28:	e0bffa17 	ldw	r2,-24(fp)
 4017c2c:	10800044 	addi	r2,r2,1
 4017c30:	e0bffa15 	stw	r2,-24(fp)
 4017c34:	e0fffa17 	ldw	r3,-24(fp)
 4017c38:	e0bff917 	ldw	r2,-28(fp)
 4017c3c:	18bdb016 	blt	r3,r2,4017300 <alt_tse_system_add_sys+0xb4>
		
		tse_system_count++;
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
 4017c40:	e03fff15 	stw	zero,-4(fp)
 4017c44:	e0bfff17 	ldw	r2,-4(fp)
	
}
 4017c48:	e037883a 	mov	sp,fp
 4017c4c:	dfc00217 	ldw	ra,8(sp)
 4017c50:	df000117 	ldw	fp,4(sp)
 4017c54:	dc000017 	ldw	r16,0(sp)
 4017c58:	dec00304 	addi	sp,sp,12
 4017c5c:	f800283a 	ret

04017c60 <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 4017c60:	defff804 	addi	sp,sp,-32
 4017c64:	dfc00715 	stw	ra,28(sp)
 4017c68:	df000615 	stw	fp,24(sp)
 4017c6c:	df000604 	addi	fp,sp,24
 4017c70:	e13ffd15 	stw	r4,-12(fp)
 4017c74:	e17ffe05 	stb	r5,-8(fp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 4017c78:	e03ffc15 	stw	zero,-16(fp)
 4017c7c:	00004c06 	br	4017db0 <alt_tse_sys_enable_mdio_sharing+0x150>
		psys_mac = psys_mac_list[i];
 4017c80:	e0bffc17 	ldw	r2,-16(fp)
 4017c84:	1085883a 	add	r2,r2,r2
 4017c88:	1085883a 	add	r2,r2,r2
 4017c8c:	1007883a 	mov	r3,r2
 4017c90:	e0bffd17 	ldw	r2,-12(fp)
 4017c94:	1885883a 	add	r2,r3,r2
 4017c98:	10800017 	ldw	r2,0(r2)
 4017c9c:	e0bffa15 	stw	r2,-24(fp)
		
		if(psys_mac == 0) {
 4017ca0:	e0bffa17 	ldw	r2,-24(fp)
 4017ca4:	1004c03a 	cmpne	r2,r2,zero
 4017ca8:	1000091e 	bne	r2,zero,4017cd0 <alt_tse_sys_enable_mdio_sharing+0x70>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 4017cac:	01010174 	movhi	r4,1029
 4017cb0:	2122eb04 	addi	r4,r4,-29780
 4017cb4:	40021940 	call	4002194 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 4017cb8:	01010174 	movhi	r4,1029
 4017cbc:	21235004 	addi	r4,r4,-29376
 4017cc0:	40021940 	call	4002194 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 4017cc4:	00bfffc4 	movi	r2,-1
 4017cc8:	e0bfff15 	stw	r2,-4(fp)
 4017ccc:	00003c06 	br	4017dc0 <alt_tse_sys_enable_mdio_sharing+0x160>
		}
		
		for(j = 0; j < max_mac_system; j++) {
 4017cd0:	e03ffb15 	stw	zero,-20(fp)
 4017cd4:	00002f06 	br	4017d94 <alt_tse_sys_enable_mdio_sharing+0x134>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 4017cd8:	e0bffa17 	ldw	r2,-24(fp)
 4017cdc:	11000017 	ldw	r4,0(r2)
 4017ce0:	e0bffb17 	ldw	r2,-20(fp)
 4017ce4:	00c10174 	movhi	r3,1029
 4017ce8:	18c39f04 	addi	r3,r3,3708
 4017cec:	10801224 	muli	r2,r2,72
 4017cf0:	10c5883a 	add	r2,r2,r3
 4017cf4:	10800017 	ldw	r2,0(r2)
 4017cf8:	2080231e 	bne	r4,r2,4017d88 <alt_tse_sys_enable_mdio_sharing+0x128>
				if(tse_mac_device[j].tse_multichannel_mac) {
 4017cfc:	e0bffb17 	ldw	r2,-20(fp)
 4017d00:	00c10174 	movhi	r3,1029
 4017d04:	18c39f04 	addi	r3,r3,3708
 4017d08:	10801224 	muli	r2,r2,72
 4017d0c:	10c5883a 	add	r2,r2,r3
 4017d10:	10800204 	addi	r2,r2,8
 4017d14:	108000c3 	ldbu	r2,3(r2)
 4017d18:	10803fcc 	andi	r2,r2,255
 4017d1c:	1005003a 	cmpeq	r2,r2,zero
 4017d20:	1000091e 	bne	r2,zero,4017d48 <alt_tse_sys_enable_mdio_sharing+0xe8>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 4017d24:	01010174 	movhi	r4,1029
 4017d28:	21236404 	addi	r4,r4,-29296
 4017d2c:	40021940 	call	4002194 <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 4017d30:	01010174 	movhi	r4,1029
 4017d34:	21237504 	addi	r4,r4,-29228
 4017d38:	40021940 	call	4002194 <puts>
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
 4017d3c:	00bfffc4 	movi	r2,-1
 4017d40:	e0bfff15 	stw	r2,-4(fp)
 4017d44:	00001e06 	br	4017dc0 <alt_tse_sys_enable_mdio_sharing+0x160>
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
 4017d48:	e0bffb17 	ldw	r2,-20(fp)
 4017d4c:	00c10174 	movhi	r3,1029
 4017d50:	18c39f04 	addi	r3,r3,3708
 4017d54:	10801224 	muli	r2,r2,72
 4017d58:	10c5883a 	add	r2,r2,r3
 4017d5c:	10c00304 	addi	r3,r2,12
 4017d60:	00800044 	movi	r2,1
 4017d64:	18800045 	stb	r2,1(r3)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 4017d68:	e0bffb17 	ldw	r2,-20(fp)
 4017d6c:	00c10174 	movhi	r3,1029
 4017d70:	18c39f04 	addi	r3,r3,3708
 4017d74:	10801224 	muli	r2,r2,72
 4017d78:	10c5883a 	add	r2,r2,r3
 4017d7c:	10c00304 	addi	r3,r2,12
 4017d80:	e0bffe03 	ldbu	r2,-8(fp)
 4017d84:	18800085 	stb	r2,2(r3)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 4017d88:	e0bffb17 	ldw	r2,-20(fp)
 4017d8c:	10800044 	addi	r2,r2,1
 4017d90:	e0bffb15 	stw	r2,-20(fp)
 4017d94:	d0a02a03 	ldbu	r2,-32600(gp)
 4017d98:	10c03fcc 	andi	r3,r2,255
 4017d9c:	e0bffb17 	ldw	r2,-20(fp)
 4017da0:	10ffcd16 	blt	r2,r3,4017cd8 <alt_tse_sys_enable_mdio_sharing+0x78>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 4017da4:	e0bffc17 	ldw	r2,-16(fp)
 4017da8:	10800044 	addi	r2,r2,1
 4017dac:	e0bffc15 	stw	r2,-16(fp)
 4017db0:	e0fffe03 	ldbu	r3,-8(fp)
 4017db4:	e0bffc17 	ldw	r2,-16(fp)
 4017db8:	10ffb116 	blt	r2,r3,4017c80 <alt_tse_sys_enable_mdio_sharing+0x20>
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
			}
		}	
	}
	
	return SUCCESS;
 4017dbc:	e03fff15 	stw	zero,-4(fp)
 4017dc0:	e0bfff17 	ldw	r2,-4(fp)
}
 4017dc4:	e037883a 	mov	sp,fp
 4017dc8:	dfc00117 	ldw	ra,4(sp)
 4017dcc:	df000017 	ldw	fp,0(sp)
 4017dd0:	dec00204 	addi	sp,sp,8
 4017dd4:	f800283a 	ret

04017dd8 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 4017dd8:	defffc04 	addi	sp,sp,-16
 4017ddc:	dfc00315 	stw	ra,12(sp)
 4017de0:	df000215 	stw	fp,8(sp)
 4017de4:	df000204 	addi	fp,sp,8
 4017de8:	e13fff15 	stw	r4,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 4017dec:	e13fff17 	ldw	r4,-4(fp)
 4017df0:	4017fe80 	call	4017fe8 <alt_tse_get_mac_info>
 4017df4:	10800317 	ldw	r2,12(r2)
 4017df8:	e0bffe15 	stw	r2,-8(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
 4017dfc:	e13ffe17 	ldw	r4,-8(fp)
 4017e00:	401b4540 	call	401b454 <alt_tse_phy_get_common_speed>
}
 4017e04:	e037883a 	mov	sp,fp
 4017e08:	dfc00117 	ldw	ra,4(sp)
 4017e0c:	df000017 	ldw	fp,0(sp)
 4017e10:	dec00204 	addi	sp,sp,8
 4017e14:	f800283a 	ret

04017e18 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 4017e18:	defffb04 	addi	sp,sp,-20
 4017e1c:	dfc00415 	stw	ra,16(sp)
 4017e20:	df000315 	stw	fp,12(sp)
 4017e24:	df000304 	addi	fp,sp,12
 4017e28:	e13ffe15 	stw	r4,-8(fp)
 4017e2c:	e17fff15 	stw	r5,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 4017e30:	e13ffe17 	ldw	r4,-8(fp)
 4017e34:	4017fe80 	call	4017fe8 <alt_tse_get_mac_info>
 4017e38:	10800317 	ldw	r2,12(r2)
 4017e3c:	e0bffd15 	stw	r2,-12(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 4017e40:	e13ffd17 	ldw	r4,-12(fp)
 4017e44:	e17fff17 	ldw	r5,-4(fp)
 4017e48:	401b7700 	call	401b770 <alt_tse_phy_set_common_speed>
}
 4017e4c:	e037883a 	mov	sp,fp
 4017e50:	dfc00117 	ldw	ra,4(sp)
 4017e54:	df000017 	ldw	fp,0(sp)
 4017e58:	dec00204 	addi	sp,sp,8
 4017e5c:	f800283a 	ret

04017e60 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
 4017e60:	defffc04 	addi	sp,sp,-16
 4017e64:	df000315 	stw	fp,12(sp)
 4017e68:	df000304 	addi	fp,sp,12
 4017e6c:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 4017e70:	e03ffd15 	stw	zero,-12(fp)
 4017e74:	00000e06 	br	4017eb0 <alt_tse_get_system_index+0x50>
        if(psys_info == &tse_mac_device[i]) {
 4017e78:	e0bffd17 	ldw	r2,-12(fp)
 4017e7c:	10801224 	muli	r2,r2,72
 4017e80:	1007883a 	mov	r3,r2
 4017e84:	00810174 	movhi	r2,1029
 4017e88:	10839f04 	addi	r2,r2,3708
 4017e8c:	1887883a 	add	r3,r3,r2
 4017e90:	e0bffe17 	ldw	r2,-8(fp)
 4017e94:	1880031e 	bne	r3,r2,4017ea4 <alt_tse_get_system_index+0x44>
            return i;
 4017e98:	e0bffd17 	ldw	r2,-12(fp)
 4017e9c:	e0bfff15 	stw	r2,-4(fp)
 4017ea0:	00000906 	br	4017ec8 <alt_tse_get_system_index+0x68>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 4017ea4:	e0bffd17 	ldw	r2,-12(fp)
 4017ea8:	10800044 	addi	r2,r2,1
 4017eac:	e0bffd15 	stw	r2,-12(fp)
 4017eb0:	d0a02a03 	ldbu	r2,-32600(gp)
 4017eb4:	10c03fcc 	andi	r3,r2,255
 4017eb8:	e0bffd17 	ldw	r2,-12(fp)
 4017ebc:	10ffee16 	blt	r2,r3,4017e78 <alt_tse_get_system_index+0x18>
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 4017ec0:	00bfffc4 	movi	r2,-1
 4017ec4:	e0bfff15 	stw	r2,-4(fp)
 4017ec8:	e0bfff17 	ldw	r2,-4(fp)
}
 4017ecc:	e037883a 	mov	sp,fp
 4017ed0:	df000017 	ldw	fp,0(sp)
 4017ed4:	dec00104 	addi	sp,sp,4
 4017ed8:	f800283a 	ret

04017edc <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
 4017edc:	defffc04 	addi	sp,sp,-16
 4017ee0:	df000315 	stw	fp,12(sp)
 4017ee4:	df000304 	addi	fp,sp,12
 4017ee8:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 4017eec:	e03ffd15 	stw	zero,-12(fp)
 4017ef0:	00000f06 	br	4017f30 <alt_tse_get_mac_group_index+0x54>
        if(pmac_group == pmac_groups[i]) {
 4017ef4:	e0bffd17 	ldw	r2,-12(fp)
 4017ef8:	00c101b4 	movhi	r3,1030
 4017efc:	18e0e304 	addi	r3,r3,-31860
 4017f00:	1085883a 	add	r2,r2,r2
 4017f04:	1085883a 	add	r2,r2,r2
 4017f08:	10c5883a 	add	r2,r2,r3
 4017f0c:	10c00017 	ldw	r3,0(r2)
 4017f10:	e0bffe17 	ldw	r2,-8(fp)
 4017f14:	1880031e 	bne	r3,r2,4017f24 <alt_tse_get_mac_group_index+0x48>
            return i;
 4017f18:	e0bffd17 	ldw	r2,-12(fp)
 4017f1c:	e0bfff15 	stw	r2,-4(fp)
 4017f20:	00000906 	br	4017f48 <alt_tse_get_mac_group_index+0x6c>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 4017f24:	e0bffd17 	ldw	r2,-12(fp)
 4017f28:	10800044 	addi	r2,r2,1
 4017f2c:	e0bffd15 	stw	r2,-12(fp)
 4017f30:	d0a7fd43 	ldbu	r2,-24587(gp)
 4017f34:	10c03fcc 	andi	r3,r2,255
 4017f38:	e0bffd17 	ldw	r2,-12(fp)
 4017f3c:	10ffed16 	blt	r2,r3,4017ef4 <alt_tse_get_mac_group_index+0x18>
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 4017f40:	00bfffc4 	movi	r2,-1
 4017f44:	e0bfff15 	stw	r2,-4(fp)
 4017f48:	e0bfff17 	ldw	r2,-4(fp)
}
 4017f4c:	e037883a 	mov	sp,fp
 4017f50:	df000017 	ldw	fp,0(sp)
 4017f54:	dec00104 	addi	sp,sp,4
 4017f58:	f800283a 	ret

04017f5c <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
 4017f5c:	defffc04 	addi	sp,sp,-16
 4017f60:	df000315 	stw	fp,12(sp)
 4017f64:	df000304 	addi	fp,sp,12
 4017f68:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 4017f6c:	e03ffd15 	stw	zero,-12(fp)
 4017f70:	00001006 	br	4017fb4 <alt_tse_get_mac_info_index+0x58>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 4017f74:	e0bffe17 	ldw	r2,-8(fp)
 4017f78:	10c00317 	ldw	r3,12(r2)
 4017f7c:	e0bffd17 	ldw	r2,-12(fp)
 4017f80:	1085883a 	add	r2,r2,r2
 4017f84:	1085883a 	add	r2,r2,r2
 4017f88:	10c5883a 	add	r2,r2,r3
 4017f8c:	10800104 	addi	r2,r2,4
 4017f90:	10c00017 	ldw	r3,0(r2)
 4017f94:	e0bffe17 	ldw	r2,-8(fp)
 4017f98:	1880031e 	bne	r3,r2,4017fa8 <alt_tse_get_mac_info_index+0x4c>
            return i;
 4017f9c:	e0bffd17 	ldw	r2,-12(fp)
 4017fa0:	e0bfff15 	stw	r2,-4(fp)
 4017fa4:	00000b06 	br	4017fd4 <alt_tse_get_mac_info_index+0x78>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 4017fa8:	e0bffd17 	ldw	r2,-12(fp)
 4017fac:	10800044 	addi	r2,r2,1
 4017fb0:	e0bffd15 	stw	r2,-12(fp)
 4017fb4:	e0bffe17 	ldw	r2,-8(fp)
 4017fb8:	10800317 	ldw	r2,12(r2)
 4017fbc:	10800003 	ldbu	r2,0(r2)
 4017fc0:	10c03fcc 	andi	r3,r2,255
 4017fc4:	e0bffd17 	ldw	r2,-12(fp)
 4017fc8:	10ffea16 	blt	r2,r3,4017f74 <alt_tse_get_mac_info_index+0x18>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
 4017fcc:	00bfffc4 	movi	r2,-1
 4017fd0:	e0bfff15 	stw	r2,-4(fp)
 4017fd4:	e0bfff17 	ldw	r2,-4(fp)
}
 4017fd8:	e037883a 	mov	sp,fp
 4017fdc:	df000017 	ldw	fp,0(sp)
 4017fe0:	dec00104 	addi	sp,sp,4
 4017fe4:	f800283a 	ret

04017fe8 <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
 4017fe8:	defff904 	addi	sp,sp,-28
 4017fec:	df000615 	stw	fp,24(sp)
 4017ff0:	df000604 	addi	fp,sp,24
 4017ff4:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
 4017ff8:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
 4017ffc:	e03ffa15 	stw	zero,-24(fp)
    
    for(i = 0; i < mac_group_count; i++) {
 4018000:	e03ffd15 	stw	zero,-12(fp)
 4018004:	00002606 	br	40180a0 <alt_tse_get_mac_info+0xb8>
        pmac_group = pmac_groups[i];
 4018008:	e0bffd17 	ldw	r2,-12(fp)
 401800c:	00c101b4 	movhi	r3,1030
 4018010:	18e0e304 	addi	r3,r3,-31860
 4018014:	1085883a 	add	r2,r2,r2
 4018018:	1085883a 	add	r2,r2,r2
 401801c:	10c5883a 	add	r2,r2,r3
 4018020:	10800017 	ldw	r2,0(r2)
 4018024:	e0bffb15 	stw	r2,-20(fp)
        for(j = 0; j < pmac_group->channel; j++) {
 4018028:	e03ffc15 	stw	zero,-16(fp)
 401802c:	00001406 	br	4018080 <alt_tse_get_mac_info+0x98>
            pmac_info = pmac_group->pmac_info[j];
 4018030:	e0bffc17 	ldw	r2,-16(fp)
 4018034:	e0fffb17 	ldw	r3,-20(fp)
 4018038:	1085883a 	add	r2,r2,r2
 401803c:	1085883a 	add	r2,r2,r2
 4018040:	10c5883a 	add	r2,r2,r3
 4018044:	10800104 	addi	r2,r2,4
 4018048:	10800017 	ldw	r2,0(r2)
 401804c:	e0bffa15 	stw	r2,-24(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 4018050:	e0bffa17 	ldw	r2,-24(fp)
 4018054:	10800217 	ldw	r2,8(r2)
 4018058:	10800017 	ldw	r2,0(r2)
 401805c:	1007883a 	mov	r3,r2
 4018060:	e0bffe17 	ldw	r2,-8(fp)
 4018064:	1880031e 	bne	r3,r2,4018074 <alt_tse_get_mac_info+0x8c>
                return pmac_info;
 4018068:	e0bffa17 	ldw	r2,-24(fp)
 401806c:	e0bfff15 	stw	r2,-4(fp)
 4018070:	00001006 	br	40180b4 <alt_tse_get_mac_info+0xcc>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
 4018074:	e0bffc17 	ldw	r2,-16(fp)
 4018078:	10800044 	addi	r2,r2,1
 401807c:	e0bffc15 	stw	r2,-16(fp)
 4018080:	e0bffb17 	ldw	r2,-20(fp)
 4018084:	10800003 	ldbu	r2,0(r2)
 4018088:	10c03fcc 	andi	r3,r2,255
 401808c:	e0bffc17 	ldw	r2,-16(fp)
 4018090:	10ffe716 	blt	r2,r3,4018030 <alt_tse_get_mac_info+0x48>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
 4018094:	e0bffd17 	ldw	r2,-12(fp)
 4018098:	10800044 	addi	r2,r2,1
 401809c:	e0bffd15 	stw	r2,-12(fp)
 40180a0:	d0a7fd43 	ldbu	r2,-24587(gp)
 40180a4:	10c03fcc 	andi	r3,r2,255
 40180a8:	e0bffd17 	ldw	r2,-12(fp)
 40180ac:	10ffd616 	blt	r2,r3,4018008 <alt_tse_get_mac_info+0x20>
                return pmac_info;
            }
        }        
    }
    
    return 0;
 40180b0:	e03fff15 	stw	zero,-4(fp)
 40180b4:	e0bfff17 	ldw	r2,-4(fp)
}
 40180b8:	e037883a 	mov	sp,fp
 40180bc:	df000017 	ldw	fp,0(sp)
 40180c0:	dec00104 	addi	sp,sp,4
 40180c4:	f800283a 	ret

040180c8 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
 40180c8:	defffb04 	addi	sp,sp,-20
 40180cc:	df000415 	stw	fp,16(sp)
 40180d0:	df000404 	addi	fp,sp,16
 40180d4:	e13ffd15 	stw	r4,-12(fp)
 40180d8:	e17ffe05 	stb	r5,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 40180dc:	e0bffd17 	ldw	r2,-12(fp)
 40180e0:	10800204 	addi	r2,r2,8
 40180e4:	10800037 	ldwio	r2,0(r2)
 40180e8:	e0bffc15 	stw	r2,-16(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 40180ec:	e0bffe03 	ldbu	r2,-8(fp)
 40180f0:	10800098 	cmpnei	r2,r2,2
 40180f4:	1000091e 	bne	r2,zero,401811c <alt_tse_mac_set_speed+0x54>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 40180f8:	e0bffc17 	ldw	r2,-16(fp)
 40180fc:	10800214 	ori	r2,r2,8
 4018100:	e0bffc15 	stw	r2,-16(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4018104:	e0fffc17 	ldw	r3,-16(fp)
 4018108:	00bf8034 	movhi	r2,65024
 401810c:	10bfffc4 	addi	r2,r2,-1
 4018110:	1884703a 	and	r2,r3,r2
 4018114:	e0bffc15 	stw	r2,-16(fp)
 4018118:	00001b06 	br	4018188 <alt_tse_mac_set_speed+0xc0>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 401811c:	e0bffe03 	ldbu	r2,-8(fp)
 4018120:	10800058 	cmpnei	r2,r2,1
 4018124:	10000a1e 	bne	r2,zero,4018150 <alt_tse_mac_set_speed+0x88>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 4018128:	e0fffc17 	ldw	r3,-16(fp)
 401812c:	00bffdc4 	movi	r2,-9
 4018130:	1884703a 	and	r2,r3,r2
 4018134:	e0bffc15 	stw	r2,-16(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 4018138:	e0fffc17 	ldw	r3,-16(fp)
 401813c:	00bf8034 	movhi	r2,65024
 4018140:	10bfffc4 	addi	r2,r2,-1
 4018144:	1884703a 	and	r2,r3,r2
 4018148:	e0bffc15 	stw	r2,-16(fp)
 401814c:	00000e06 	br	4018188 <alt_tse_mac_set_speed+0xc0>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 4018150:	e0bffe03 	ldbu	r2,-8(fp)
 4018154:	1004c03a 	cmpne	r2,r2,zero
 4018158:	1000081e 	bne	r2,zero,401817c <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 401815c:	e0fffc17 	ldw	r3,-16(fp)
 4018160:	00bffdc4 	movi	r2,-9
 4018164:	1884703a 	and	r2,r3,r2
 4018168:	e0bffc15 	stw	r2,-16(fp)
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 401816c:	e0bffc17 	ldw	r2,-16(fp)
 4018170:	10808034 	orhi	r2,r2,512
 4018174:	e0bffc15 	stw	r2,-16(fp)
 4018178:	00000306 	br	4018188 <alt_tse_mac_set_speed+0xc0>
  }  
  else {
    return ENP_PARAM;
 401817c:	00bffd84 	movi	r2,-10
 4018180:	e0bfff15 	stw	r2,-4(fp)
 4018184:	00000606 	br	40181a0 <alt_tse_mac_set_speed+0xd8>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 4018188:	e0bffd17 	ldw	r2,-12(fp)
 401818c:	10800204 	addi	r2,r2,8
 4018190:	1007883a 	mov	r3,r2
 4018194:	e0bffc17 	ldw	r2,-16(fp)
 4018198:	18800035 	stwio	r2,0(r3)
  return SUCCESS;
 401819c:	e03fff15 	stw	zero,-4(fp)
 40181a0:	e0bfff17 	ldw	r2,-4(fp)
}
 40181a4:	e037883a 	mov	sp,fp
 40181a8:	df000017 	ldw	fp,0(sp)
 40181ac:	dec00104 	addi	sp,sp,4
 40181b0:	f800283a 	ret

040181b4 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
 40181b4:	defffb04 	addi	sp,sp,-20
 40181b8:	df000415 	stw	fp,16(sp)
 40181bc:	df000404 	addi	fp,sp,16
 40181c0:	e13ffd15 	stw	r4,-12(fp)
 40181c4:	e17ffe05 	stb	r5,-8(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 40181c8:	e0bffd17 	ldw	r2,-12(fp)
 40181cc:	10800204 	addi	r2,r2,8
 40181d0:	10800037 	ldwio	r2,0(r2)
 40181d4:	e0bffc15 	stw	r2,-16(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 40181d8:	e0bffe03 	ldbu	r2,-8(fp)
 40181dc:	1004c03a 	cmpne	r2,r2,zero
 40181e0:	1000041e 	bne	r2,zero,40181f4 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 40181e4:	e0bffc17 	ldw	r2,-16(fp)
 40181e8:	10810014 	ori	r2,r2,1024
 40181ec:	e0bffc15 	stw	r2,-16(fp)
 40181f0:	00000b06 	br	4018220 <alt_tse_mac_set_duplex+0x6c>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 40181f4:	e0bffe03 	ldbu	r2,-8(fp)
 40181f8:	10800058 	cmpnei	r2,r2,1
 40181fc:	1000051e 	bne	r2,zero,4018214 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 4018200:	e0bffc17 	ldw	r2,-16(fp)
 4018204:	00feffc4 	movi	r3,-1025
 4018208:	10c4703a 	and	r2,r2,r3
 401820c:	e0bffc15 	stw	r2,-16(fp)
 4018210:	00000306 	br	4018220 <alt_tse_mac_set_duplex+0x6c>
  }
  else {
    return ENP_PARAM;
 4018214:	00bffd84 	movi	r2,-10
 4018218:	e0bfff15 	stw	r2,-4(fp)
 401821c:	00000606 	br	4018238 <alt_tse_mac_set_duplex+0x84>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 4018220:	e0bffd17 	ldw	r2,-12(fp)
 4018224:	10800204 	addi	r2,r2,8
 4018228:	1007883a 	mov	r3,r2
 401822c:	e0bffc17 	ldw	r2,-16(fp)
 4018230:	18800035 	stwio	r2,0(r3)
  return SUCCESS;
 4018234:	e03fff15 	stw	zero,-4(fp)
 4018238:	e0bfff17 	ldw	r2,-4(fp)

}
 401823c:	e037883a 	mov	sp,fp
 4018240:	df000017 	ldw	fp,0(sp)
 4018244:	dec00104 	addi	sp,sp,4
 4018248:	f800283a 	ret

0401824c <getPHYSpeed>:
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 401824c:	deff9804 	addi	sp,sp,-416
 4018250:	dfc06715 	stw	ra,412(sp)
 4018254:	df006615 	stw	fp,408(sp)
 4018258:	df006604 	addi	fp,sp,408
 401825c:	e13fa215 	stw	r4,-376(fp)

	alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 4018260:	00800044 	movi	r2,1
 4018264:	e0bfa185 	stb	r2,-378(fp)
	alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
 4018268:	00800044 	movi	r2,1
 401826c:	e0bfa145 	stb	r2,-379(fp)
	alt_u8 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4018270:	e0bfa143 	ldbu	r2,-379(fp)
 4018274:	1080004c 	andi	r2,r2,1
 4018278:	e0bfff05 	stb	r2,-4(fp)
 401827c:	e0bfa183 	ldbu	r2,-378(fp)
 4018280:	10800098 	cmpnei	r2,r2,2
 4018284:	1000031e 	bne	r2,zero,4018294 <getPHYSpeed+0x48>
 4018288:	00800084 	movi	r2,2
 401828c:	e0bffe05 	stb	r2,-8(fp)
 4018290:	00000106 	br	4018298 <getPHYSpeed+0x4c>
 4018294:	e03ffe05 	stb	zero,-8(fp)
 4018298:	e0ffff03 	ldbu	r3,-4(fp)
 401829c:	e13ffe03 	ldbu	r4,-8(fp)
 40182a0:	1904b03a 	or	r2,r3,r4
 40182a4:	e0bffd05 	stb	r2,-12(fp)
 40182a8:	e0bfa183 	ldbu	r2,-378(fp)
 40182ac:	10800058 	cmpnei	r2,r2,1
 40182b0:	1000031e 	bne	r2,zero,40182c0 <getPHYSpeed+0x74>
 40182b4:	00800104 	movi	r2,4
 40182b8:	e0bffc05 	stb	r2,-16(fp)
 40182bc:	00000106 	br	40182c4 <getPHYSpeed+0x78>
 40182c0:	e03ffc05 	stb	zero,-16(fp)
 40182c4:	e0fffd03 	ldbu	r3,-12(fp)
 40182c8:	e13ffc03 	ldbu	r4,-16(fp)
 40182cc:	1904b03a 	or	r2,r3,r4
 40182d0:	e0bffb05 	stb	r2,-20(fp)
 40182d4:	e0bfa183 	ldbu	r2,-378(fp)
 40182d8:	1004c03a 	cmpne	r2,r2,zero
 40182dc:	1000031e 	bne	r2,zero,40182ec <getPHYSpeed+0xa0>
 40182e0:	00800204 	movi	r2,8
 40182e4:	e0bffa05 	stb	r2,-24(fp)
 40182e8:	00000106 	br	40182f0 <getPHYSpeed+0xa4>
 40182ec:	e03ffa05 	stb	zero,-24(fp)
 40182f0:	e0fffb03 	ldbu	r3,-20(fp)
 40182f4:	e13ffa03 	ldbu	r4,-24(fp)
 40182f8:	1904b03a 	or	r2,r3,r4
 40182fc:	e0bff905 	stb	r2,-28(fp)
 4018300:	e0bfa183 	ldbu	r2,-378(fp)
 4018304:	108000d8 	cmpnei	r2,r2,3
 4018308:	1000031e 	bne	r2,zero,4018318 <getPHYSpeed+0xcc>
 401830c:	0005883a 	mov	r2,zero
 4018310:	e0bff805 	stb	r2,-32(fp)
 4018314:	00000106 	br	401831c <getPHYSpeed+0xd0>
 4018318:	e03ff805 	stb	zero,-32(fp)
 401831c:	e0fff903 	ldbu	r3,-28(fp)
 4018320:	e13ff803 	ldbu	r4,-32(fp)
 4018324:	1904b03a 	or	r2,r3,r4
 4018328:	e0bfa105 	stb	r2,-380(fp)
    
    alt_tse_phy_info *pphy = 0;
 401832c:	e03fa015 	stw	zero,-384(fp)
    alt_tse_mac_info *pmac_info = 0;
 4018330:	e03f9f15 	stw	zero,-388(fp)
    alt_tse_mac_group *pmac_group = 0;
 4018334:	e03f9e15 	stw	zero,-392(fp)
    alt_tse_system_info *psys = 0;
 4018338:	e03f9d15 	stw	zero,-396(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 401833c:	e03f9c45 	stb	zero,-399(fp)
    alt_8 mac_group_index = 0;
 4018340:	e03f9c05 	stb	zero,-400(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 4018344:	d0a7fdc3 	ldbu	r2,-24585(gp)
 4018348:	10803fcc 	andi	r2,r2,255
 401834c:	1004c03a 	cmpne	r2,r2,zero
 4018350:	1000031e 	bne	r2,zero,4018360 <getPHYSpeed+0x114>
        alt_tse_phy_init();
 4018354:	401a5d00 	call	401a5d0 <alt_tse_phy_init>
        is_init = 1;
 4018358:	00800044 	movi	r2,1
 401835c:	d0a7fdc5 	stb	r2,-24585(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 4018360:	e13fa217 	ldw	r4,-376(fp)
 4018364:	4017fe80 	call	4017fe8 <alt_tse_get_mac_info>
 4018368:	e0bf9f15 	stw	r2,-388(fp)
    
    if(pmac_info == 0) {
 401836c:	e0bf9f17 	ldw	r2,-388(fp)
 4018370:	1004c03a 	cmpne	r2,r2,zero
 4018374:	1000671e 	bne	r2,zero,4018514 <getPHYSpeed+0x2c8>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 4018378:	00800044 	movi	r2,1
 401837c:	e0bfa185 	stb	r2,-378(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 4018380:	00800044 	movi	r2,1
 4018384:	e0bfa145 	stb	r2,-379(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
 4018388:	e0bfa143 	ldbu	r2,-379(fp)
 401838c:	1080004c 	andi	r2,r2,1
 4018390:	e0bff705 	stb	r2,-36(fp)
 4018394:	e0bfa183 	ldbu	r2,-378(fp)
 4018398:	10800098 	cmpnei	r2,r2,2
 401839c:	1000031e 	bne	r2,zero,40183ac <getPHYSpeed+0x160>
 40183a0:	00800084 	movi	r2,2
 40183a4:	e0bff605 	stb	r2,-40(fp)
 40183a8:	00000106 	br	40183b0 <getPHYSpeed+0x164>
 40183ac:	e03ff605 	stb	zero,-40(fp)
 40183b0:	e0fff703 	ldbu	r3,-36(fp)
 40183b4:	e13ff603 	ldbu	r4,-40(fp)
 40183b8:	1904b03a 	or	r2,r3,r4
 40183bc:	e0bff505 	stb	r2,-44(fp)
 40183c0:	e0bfa183 	ldbu	r2,-378(fp)
 40183c4:	10800058 	cmpnei	r2,r2,1
 40183c8:	1000031e 	bne	r2,zero,40183d8 <getPHYSpeed+0x18c>
 40183cc:	00800104 	movi	r2,4
 40183d0:	e0bff405 	stb	r2,-48(fp)
 40183d4:	00000106 	br	40183dc <getPHYSpeed+0x190>
 40183d8:	e03ff405 	stb	zero,-48(fp)
 40183dc:	e0fff503 	ldbu	r3,-44(fp)
 40183e0:	e13ff403 	ldbu	r4,-48(fp)
 40183e4:	1904b03a 	or	r2,r3,r4
 40183e8:	e0bff305 	stb	r2,-52(fp)
 40183ec:	e0bfa183 	ldbu	r2,-378(fp)
 40183f0:	1004c03a 	cmpne	r2,r2,zero
 40183f4:	1000031e 	bne	r2,zero,4018404 <getPHYSpeed+0x1b8>
 40183f8:	00800204 	movi	r2,8
 40183fc:	e0bff205 	stb	r2,-56(fp)
 4018400:	00000106 	br	4018408 <getPHYSpeed+0x1bc>
 4018404:	e03ff205 	stb	zero,-56(fp)
 4018408:	e0fff303 	ldbu	r3,-52(fp)
 401840c:	e13ff203 	ldbu	r4,-56(fp)
 4018410:	1904b03a 	or	r2,r3,r4
 4018414:	e0bff105 	stb	r2,-60(fp)
 4018418:	e0bfa183 	ldbu	r2,-378(fp)
 401841c:	108000d8 	cmpnei	r2,r2,3
 4018420:	1000031e 	bne	r2,zero,4018430 <getPHYSpeed+0x1e4>
 4018424:	0005883a 	mov	r2,zero
 4018428:	e0bff005 	stb	r2,-64(fp)
 401842c:	00000106 	br	4018434 <getPHYSpeed+0x1e8>
 4018430:	e03ff005 	stb	zero,-64(fp)
 4018434:	e0fff103 	ldbu	r3,-60(fp)
 4018438:	e13ff003 	ldbu	r4,-64(fp)
 401843c:	1904b03a 	or	r2,r3,r4
 4018440:	1007883a 	mov	r3,r2
 4018444:	0005883a 	mov	r2,zero
 4018448:	1884b03a 	or	r2,r3,r2
 401844c:	e0bfa105 	stb	r2,-380(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 4018450:	e0bfa183 	ldbu	r2,-378(fp)
 4018454:	108000a0 	cmpeqi	r2,r2,2
 4018458:	1000161e 	bne	r2,zero,40184b4 <getPHYSpeed+0x268>
 401845c:	e0bfa183 	ldbu	r2,-378(fp)
 4018460:	10800060 	cmpeqi	r2,r2,1
 4018464:	10000d1e 	bne	r2,zero,401849c <getPHYSpeed+0x250>
 4018468:	e0bfa183 	ldbu	r2,-378(fp)
 401846c:	1004c03a 	cmpne	r2,r2,zero
 4018470:	1000041e 	bne	r2,zero,4018484 <getPHYSpeed+0x238>
 4018474:	00810174 	movhi	r2,1029
 4018478:	10a38404 	addi	r2,r2,-29168
 401847c:	e0bfed15 	stw	r2,-76(fp)
 4018480:	00000306 	br	4018490 <getPHYSpeed+0x244>
 4018484:	00c10174 	movhi	r3,1029
 4018488:	18e38504 	addi	r3,r3,-29164
 401848c:	e0ffed15 	stw	r3,-76(fp)
 4018490:	e13fed17 	ldw	r4,-76(fp)
 4018494:	e13fee15 	stw	r4,-72(fp)
 4018498:	00000306 	br	40184a8 <getPHYSpeed+0x25c>
 401849c:	00810174 	movhi	r2,1029
 40184a0:	10a38704 	addi	r2,r2,-29156
 40184a4:	e0bfee15 	stw	r2,-72(fp)
 40184a8:	e0ffee17 	ldw	r3,-72(fp)
 40184ac:	e0ffef15 	stw	r3,-68(fp)
 40184b0:	00000306 	br	40184c0 <getPHYSpeed+0x274>
 40184b4:	01010174 	movhi	r4,1029
 40184b8:	21238804 	addi	r4,r4,-29152
 40184bc:	e13fef15 	stw	r4,-68(fp)
 40184c0:	e0bfa143 	ldbu	r2,-379(fp)
 40184c4:	10800058 	cmpnei	r2,r2,1
 40184c8:	1000041e 	bne	r2,zero,40184dc <getPHYSpeed+0x290>
 40184cc:	00810174 	movhi	r2,1029
 40184d0:	10a38a04 	addi	r2,r2,-29144
 40184d4:	e0bfec15 	stw	r2,-80(fp)
 40184d8:	00000306 	br	40184e8 <getPHYSpeed+0x29c>
 40184dc:	00c10174 	movhi	r3,1029
 40184e0:	18e38c04 	addi	r3,r3,-29136
 40184e4:	e0ffec15 	stw	r3,-80(fp)
 40184e8:	01010174 	movhi	r4,1029
 40184ec:	21238e04 	addi	r4,r4,-29128
 40184f0:	e17fef17 	ldw	r5,-68(fp)
 40184f4:	e1bfec17 	ldw	r6,-80(fp)
 40184f8:	400207c0 	call	400207c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 40184fc:	01010174 	movhi	r4,1029
 4018500:	2123a604 	addi	r4,r4,-29032
 4018504:	40021940 	call	4002194 <puts>
        return result;
 4018508:	e13fa103 	ldbu	r4,-380(fp)
 401850c:	e13feb15 	stw	r4,-84(fp)
 4018510:	0002ce06 	br	401904c <getPHYSpeed+0xe00>
    }
    
    pphy = pmac_info->pphy_info;
 4018514:	e0bf9f17 	ldw	r2,-388(fp)
 4018518:	10800117 	ldw	r2,4(r2)
 401851c:	e0bfa015 	stw	r2,-384(fp)
    pmac_group = pmac_info->pmac_group;
 4018520:	e0bf9f17 	ldw	r2,-388(fp)
 4018524:	10800317 	ldw	r2,12(r2)
 4018528:	e0bf9e15 	stw	r2,-392(fp)
    psys = pmac_info->psys_info;
 401852c:	e0bf9f17 	ldw	r2,-388(fp)
 4018530:	10800217 	ldw	r2,8(r2)
 4018534:	e0bf9d15 	stw	r2,-396(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 4018538:	e13f9f17 	ldw	r4,-388(fp)
 401853c:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 4018540:	e0bf9c45 	stb	r2,-399(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4018544:	e13f9e17 	ldw	r4,-392(fp)
 4018548:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401854c:	e0bf9c05 	stb	r2,-400(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 4018550:	e0bf9e17 	ldw	r2,-392(fp)
 4018554:	10800117 	ldw	r2,4(r2)
 4018558:	10800217 	ldw	r2,8(r2)
 401855c:	10800203 	ldbu	r2,8(r2)
 4018560:	10803fcc 	andi	r2,r2,255
 4018564:	1004c03a 	cmpne	r2,r2,zero
 4018568:	1000791e 	bne	r2,zero,4018750 <getPHYSpeed+0x504>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 401856c:	00800044 	movi	r2,1
 4018570:	e0bfa185 	stb	r2,-378(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 4018574:	00800044 	movi	r2,1
 4018578:	e0bfa145 	stb	r2,-379(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
 401857c:	e0bfa143 	ldbu	r2,-379(fp)
 4018580:	1080004c 	andi	r2,r2,1
 4018584:	e0bfea05 	stb	r2,-88(fp)
 4018588:	e0bfa183 	ldbu	r2,-378(fp)
 401858c:	10800098 	cmpnei	r2,r2,2
 4018590:	1000031e 	bne	r2,zero,40185a0 <getPHYSpeed+0x354>
 4018594:	00800084 	movi	r2,2
 4018598:	e0bfe905 	stb	r2,-92(fp)
 401859c:	00000106 	br	40185a4 <getPHYSpeed+0x358>
 40185a0:	e03fe905 	stb	zero,-92(fp)
 40185a4:	e0ffea03 	ldbu	r3,-88(fp)
 40185a8:	e13fe903 	ldbu	r4,-92(fp)
 40185ac:	1904b03a 	or	r2,r3,r4
 40185b0:	e0bfe805 	stb	r2,-96(fp)
 40185b4:	e0bfa183 	ldbu	r2,-378(fp)
 40185b8:	10800058 	cmpnei	r2,r2,1
 40185bc:	1000031e 	bne	r2,zero,40185cc <getPHYSpeed+0x380>
 40185c0:	00800104 	movi	r2,4
 40185c4:	e0bfe705 	stb	r2,-100(fp)
 40185c8:	00000106 	br	40185d0 <getPHYSpeed+0x384>
 40185cc:	e03fe705 	stb	zero,-100(fp)
 40185d0:	e0ffe803 	ldbu	r3,-96(fp)
 40185d4:	e13fe703 	ldbu	r4,-100(fp)
 40185d8:	1904b03a 	or	r2,r3,r4
 40185dc:	e0bfe605 	stb	r2,-104(fp)
 40185e0:	e0bfa183 	ldbu	r2,-378(fp)
 40185e4:	1004c03a 	cmpne	r2,r2,zero
 40185e8:	1000031e 	bne	r2,zero,40185f8 <getPHYSpeed+0x3ac>
 40185ec:	00800204 	movi	r2,8
 40185f0:	e0bfe505 	stb	r2,-108(fp)
 40185f4:	00000106 	br	40185fc <getPHYSpeed+0x3b0>
 40185f8:	e03fe505 	stb	zero,-108(fp)
 40185fc:	e0ffe603 	ldbu	r3,-104(fp)
 4018600:	e13fe503 	ldbu	r4,-108(fp)
 4018604:	1904b03a 	or	r2,r3,r4
 4018608:	e0bfe405 	stb	r2,-112(fp)
 401860c:	e0bfa183 	ldbu	r2,-378(fp)
 4018610:	108000d8 	cmpnei	r2,r2,3
 4018614:	1000031e 	bne	r2,zero,4018624 <getPHYSpeed+0x3d8>
 4018618:	0005883a 	mov	r2,zero
 401861c:	e0bfe305 	stb	r2,-116(fp)
 4018620:	00000106 	br	4018628 <getPHYSpeed+0x3dc>
 4018624:	e03fe305 	stb	zero,-116(fp)
 4018628:	e0ffe403 	ldbu	r3,-112(fp)
 401862c:	e13fe303 	ldbu	r4,-116(fp)
 4018630:	1904b03a 	or	r2,r3,r4
 4018634:	1007883a 	mov	r3,r2
 4018638:	0005883a 	mov	r2,zero
 401863c:	1884b03a 	or	r2,r3,r2
 4018640:	e0bfa105 	stb	r2,-380(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 4018644:	010003f4 	movhi	r4,15
 4018648:	21109004 	addi	r4,r4,16960
 401864c:	40360980 	call	4036098 <usleep>
        if(psys->tse_phy_cfg) {
 4018650:	e0bf9d17 	ldw	r2,-396(fp)
 4018654:	10801117 	ldw	r2,68(r2)
 4018658:	1005003a 	cmpeq	r2,r2,zero
 401865c:	10000b1e 	bne	r2,zero,401868c <getPHYSpeed+0x440>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 4018660:	e17f9c07 	ldb	r5,-400(fp)
 4018664:	e1bf9c47 	ldb	r6,-399(fp)
 4018668:	01010174 	movhi	r4,1029
 401866c:	2123b704 	addi	r4,r4,-28964
 4018670:	400207c0 	call	400207c <printf>
        	result = psys->tse_phy_cfg(pmac);
 4018674:	e0bf9d17 	ldw	r2,-396(fp)
 4018678:	10801117 	ldw	r2,68(r2)
 401867c:	e13fa217 	ldw	r4,-376(fp)
 4018680:	103ee83a 	callr	r2
 4018684:	e0bfa105 	stb	r2,-380(fp)
 4018688:	00002e06 	br	4018744 <getPHYSpeed+0x4f8>
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 401868c:	e0bf9c07 	ldb	r2,-400(fp)
 4018690:	e0bfe215 	stw	r2,-120(fp)
 4018694:	e0bfa183 	ldbu	r2,-378(fp)
 4018698:	108000a0 	cmpeqi	r2,r2,2
 401869c:	1000161e 	bne	r2,zero,40186f8 <getPHYSpeed+0x4ac>
 40186a0:	e0bfa183 	ldbu	r2,-378(fp)
 40186a4:	10800060 	cmpeqi	r2,r2,1
 40186a8:	10000d1e 	bne	r2,zero,40186e0 <getPHYSpeed+0x494>
 40186ac:	e0bfa183 	ldbu	r2,-378(fp)
 40186b0:	1004c03a 	cmpne	r2,r2,zero
 40186b4:	1000041e 	bne	r2,zero,40186c8 <getPHYSpeed+0x47c>
 40186b8:	00c10174 	movhi	r3,1029
 40186bc:	18e38404 	addi	r3,r3,-29168
 40186c0:	e0ffdf15 	stw	r3,-132(fp)
 40186c4:	00000306 	br	40186d4 <getPHYSpeed+0x488>
 40186c8:	01010174 	movhi	r4,1029
 40186cc:	21238504 	addi	r4,r4,-29164
 40186d0:	e13fdf15 	stw	r4,-132(fp)
 40186d4:	e0bfdf17 	ldw	r2,-132(fp)
 40186d8:	e0bfe015 	stw	r2,-128(fp)
 40186dc:	00000306 	br	40186ec <getPHYSpeed+0x4a0>
 40186e0:	00c10174 	movhi	r3,1029
 40186e4:	18e38704 	addi	r3,r3,-29156
 40186e8:	e0ffe015 	stw	r3,-128(fp)
 40186ec:	e13fe017 	ldw	r4,-128(fp)
 40186f0:	e13fe115 	stw	r4,-124(fp)
 40186f4:	00000306 	br	4018704 <getPHYSpeed+0x4b8>
 40186f8:	00810174 	movhi	r2,1029
 40186fc:	10a38804 	addi	r2,r2,-29152
 4018700:	e0bfe115 	stw	r2,-124(fp)
 4018704:	e0bfa143 	ldbu	r2,-379(fp)
 4018708:	10800058 	cmpnei	r2,r2,1
 401870c:	1000041e 	bne	r2,zero,4018720 <getPHYSpeed+0x4d4>
 4018710:	00c10174 	movhi	r3,1029
 4018714:	18e38a04 	addi	r3,r3,-29144
 4018718:	e0ffde15 	stw	r3,-136(fp)
 401871c:	00000306 	br	401872c <getPHYSpeed+0x4e0>
 4018720:	01010174 	movhi	r4,1029
 4018724:	21238c04 	addi	r4,r4,-29136
 4018728:	e13fde15 	stw	r4,-136(fp)
 401872c:	01010174 	movhi	r4,1029
 4018730:	2123c904 	addi	r4,r4,-28892
 4018734:	e17fe217 	ldw	r5,-120(fp)
 4018738:	e1bfe117 	ldw	r6,-124(fp)
 401873c:	e1ffde17 	ldw	r7,-136(fp)
 4018740:	400207c0 	call	400207c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
 4018744:	e0bfa103 	ldbu	r2,-380(fp)
 4018748:	e0bfeb15 	stw	r2,-84(fp)
 401874c:	00023f06 	br	401904c <getPHYSpeed+0xe00>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4018750:	e0bf9e17 	ldw	r2,-392(fp)
 4018754:	10800117 	ldw	r2,4(r2)
 4018758:	10800217 	ldw	r2,8(r2)
 401875c:	10800017 	ldw	r2,0(r2)
 4018760:	e0bf9b15 	stw	r2,-404(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 4018764:	e0bfa017 	ldw	r2,-384(fp)
 4018768:	1004c03a 	cmpne	r2,r2,zero
 401876c:	10006b1e 	bne	r2,zero,401891c <getPHYSpeed+0x6d0>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 4018770:	00800044 	movi	r2,1
 4018774:	e0bfa185 	stb	r2,-378(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 4018778:	00800044 	movi	r2,1
 401877c:	e0bfa145 	stb	r2,-379(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
 4018780:	e0bfa143 	ldbu	r2,-379(fp)
 4018784:	1080004c 	andi	r2,r2,1
 4018788:	e0bfdd05 	stb	r2,-140(fp)
 401878c:	e0bfa183 	ldbu	r2,-378(fp)
 4018790:	10800098 	cmpnei	r2,r2,2
 4018794:	1000031e 	bne	r2,zero,40187a4 <getPHYSpeed+0x558>
 4018798:	00c00084 	movi	r3,2
 401879c:	e0ffdc05 	stb	r3,-144(fp)
 40187a0:	00000106 	br	40187a8 <getPHYSpeed+0x55c>
 40187a4:	e03fdc05 	stb	zero,-144(fp)
 40187a8:	e13fdd03 	ldbu	r4,-140(fp)
 40187ac:	e0ffdc03 	ldbu	r3,-144(fp)
 40187b0:	20c4b03a 	or	r2,r4,r3
 40187b4:	e0bfdb05 	stb	r2,-148(fp)
 40187b8:	e0bfa183 	ldbu	r2,-378(fp)
 40187bc:	10800058 	cmpnei	r2,r2,1
 40187c0:	1000031e 	bne	r2,zero,40187d0 <getPHYSpeed+0x584>
 40187c4:	01000104 	movi	r4,4
 40187c8:	e13fda05 	stb	r4,-152(fp)
 40187cc:	00000106 	br	40187d4 <getPHYSpeed+0x588>
 40187d0:	e03fda05 	stb	zero,-152(fp)
 40187d4:	e0ffdb03 	ldbu	r3,-148(fp)
 40187d8:	e13fda03 	ldbu	r4,-152(fp)
 40187dc:	1904b03a 	or	r2,r3,r4
 40187e0:	e0bfd905 	stb	r2,-156(fp)
 40187e4:	e0bfa183 	ldbu	r2,-378(fp)
 40187e8:	1004c03a 	cmpne	r2,r2,zero
 40187ec:	1000031e 	bne	r2,zero,40187fc <getPHYSpeed+0x5b0>
 40187f0:	00800204 	movi	r2,8
 40187f4:	e0bfd805 	stb	r2,-160(fp)
 40187f8:	00000106 	br	4018800 <getPHYSpeed+0x5b4>
 40187fc:	e03fd805 	stb	zero,-160(fp)
 4018800:	e0ffd903 	ldbu	r3,-156(fp)
 4018804:	e13fd803 	ldbu	r4,-160(fp)
 4018808:	1904b03a 	or	r2,r3,r4
 401880c:	e0bfd705 	stb	r2,-164(fp)
 4018810:	e0bfa183 	ldbu	r2,-378(fp)
 4018814:	108000d8 	cmpnei	r2,r2,3
 4018818:	1000031e 	bne	r2,zero,4018828 <getPHYSpeed+0x5dc>
 401881c:	0005883a 	mov	r2,zero
 4018820:	e0bfd605 	stb	r2,-168(fp)
 4018824:	00000106 	br	401882c <getPHYSpeed+0x5e0>
 4018828:	e03fd605 	stb	zero,-168(fp)
 401882c:	e0ffd703 	ldbu	r3,-164(fp)
 4018830:	e13fd603 	ldbu	r4,-168(fp)
 4018834:	1904b03a 	or	r2,r3,r4
 4018838:	1007883a 	mov	r3,r2
 401883c:	0005883a 	mov	r2,zero
 4018840:	1884b03a 	or	r2,r3,r2
 4018844:	e0bfa105 	stb	r2,-380(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4018848:	e0bf9c07 	ldb	r2,-400(fp)
 401884c:	e0bfd515 	stw	r2,-172(fp)
 4018850:	e0ff9c47 	ldb	r3,-399(fp)
 4018854:	e0ffd415 	stw	r3,-176(fp)
 4018858:	e0bfa183 	ldbu	r2,-378(fp)
 401885c:	108000a0 	cmpeqi	r2,r2,2
 4018860:	1000161e 	bne	r2,zero,40188bc <getPHYSpeed+0x670>
 4018864:	e0bfa183 	ldbu	r2,-378(fp)
 4018868:	10800060 	cmpeqi	r2,r2,1
 401886c:	10000d1e 	bne	r2,zero,40188a4 <getPHYSpeed+0x658>
 4018870:	e0bfa183 	ldbu	r2,-378(fp)
 4018874:	1004c03a 	cmpne	r2,r2,zero
 4018878:	1000041e 	bne	r2,zero,401888c <getPHYSpeed+0x640>
 401887c:	01010174 	movhi	r4,1029
 4018880:	21238404 	addi	r4,r4,-29168
 4018884:	e13fd115 	stw	r4,-188(fp)
 4018888:	00000306 	br	4018898 <getPHYSpeed+0x64c>
 401888c:	00810174 	movhi	r2,1029
 4018890:	10a38504 	addi	r2,r2,-29164
 4018894:	e0bfd115 	stw	r2,-188(fp)
 4018898:	e0ffd117 	ldw	r3,-188(fp)
 401889c:	e0ffd215 	stw	r3,-184(fp)
 40188a0:	00000306 	br	40188b0 <getPHYSpeed+0x664>
 40188a4:	01010174 	movhi	r4,1029
 40188a8:	21238704 	addi	r4,r4,-29156
 40188ac:	e13fd215 	stw	r4,-184(fp)
 40188b0:	e0bfd217 	ldw	r2,-184(fp)
 40188b4:	e0bfd315 	stw	r2,-180(fp)
 40188b8:	00000306 	br	40188c8 <getPHYSpeed+0x67c>
 40188bc:	00c10174 	movhi	r3,1029
 40188c0:	18e38804 	addi	r3,r3,-29152
 40188c4:	e0ffd315 	stw	r3,-180(fp)
 40188c8:	e0bfa143 	ldbu	r2,-379(fp)
 40188cc:	10800058 	cmpnei	r2,r2,1
 40188d0:	1000041e 	bne	r2,zero,40188e4 <getPHYSpeed+0x698>
 40188d4:	01010174 	movhi	r4,1029
 40188d8:	21238a04 	addi	r4,r4,-29144
 40188dc:	e13fd015 	stw	r4,-192(fp)
 40188e0:	00000306 	br	40188f0 <getPHYSpeed+0x6a4>
 40188e4:	00810174 	movhi	r2,1029
 40188e8:	10a38c04 	addi	r2,r2,-29136
 40188ec:	e0bfd015 	stw	r2,-192(fp)
 40188f0:	e0ffd017 	ldw	r3,-192(fp)
 40188f4:	d8c00015 	stw	r3,0(sp)
 40188f8:	01010174 	movhi	r4,1029
 40188fc:	2123db04 	addi	r4,r4,-28820
 4018900:	e17fd517 	ldw	r5,-172(fp)
 4018904:	e1bfd417 	ldw	r6,-176(fp)
 4018908:	e1ffd317 	ldw	r7,-180(fp)
 401890c:	400207c0 	call	400207c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
 4018910:	e13fa103 	ldbu	r4,-380(fp)
 4018914:	e13feb15 	stw	r4,-84(fp)
 4018918:	0001cc06 	br	401904c <getPHYSpeed+0xe00>
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 401891c:	e0bf9f17 	ldw	r2,-388(fp)
 4018920:	10800003 	ldbu	r2,0(r2)
 4018924:	10803fcc 	andi	r2,r2,255
 4018928:	10800058 	cmpnei	r2,r2,1
 401892c:	1000081e 	bne	r2,zero,4018950 <getPHYSpeed+0x704>
			alt_tse_phy_set_adv_1000(pphy, 0);
 4018930:	e13fa017 	ldw	r4,-384(fp)
 4018934:	000b883a 	mov	r5,zero
 4018938:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 401893c:	e13fa017 	ldw	r4,-384(fp)
 4018940:	01400134 	movhi	r5,4
 4018944:	29742404 	addi	r5,r5,-12144
 4018948:	401a6e40 	call	401a6e4 <alt_tse_phy_restart_an>
 401894c:	00000f06 	br	401898c <getPHYSpeed+0x740>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 4018950:	e0bf9f17 	ldw	r2,-388(fp)
 4018954:	10800003 	ldbu	r2,0(r2)
 4018958:	10803fcc 	andi	r2,r2,255
 401895c:	10800098 	cmpnei	r2,r2,2
 4018960:	10000a1e 	bne	r2,zero,401898c <getPHYSpeed+0x740>
			alt_tse_phy_set_adv_100(pphy, 0);
 4018964:	e13fa017 	ldw	r4,-384(fp)
 4018968:	000b883a 	mov	r5,zero
 401896c:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
 4018970:	e13fa017 	ldw	r4,-384(fp)
 4018974:	000b883a 	mov	r5,zero
 4018978:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 401897c:	e13fa017 	ldw	r4,-384(fp)
 4018980:	01400134 	movhi	r5,4
 4018984:	29742404 	addi	r5,r5,-12144
 4018988:	401a6e40 	call	401a6e4 <alt_tse_phy_restart_an>
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 401898c:	e13fa017 	ldw	r4,-384(fp)
 4018990:	01400134 	movhi	r5,4
 4018994:	29742404 	addi	r5,r5,-12144
 4018998:	401a8940 	call	401a894 <alt_tse_phy_check_link>
 401899c:	10bfffd8 	cmpnei	r2,r2,-1
 40189a0:	10006b1e 	bne	r2,zero,4018b50 <getPHYSpeed+0x904>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 40189a4:	00800044 	movi	r2,1
 40189a8:	e0bfa185 	stb	r2,-378(fp)
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 40189ac:	00800044 	movi	r2,1
 40189b0:	e0bfa145 	stb	r2,-379(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
 40189b4:	e0bfa143 	ldbu	r2,-379(fp)
 40189b8:	1080004c 	andi	r2,r2,1
 40189bc:	e0bfcf05 	stb	r2,-196(fp)
 40189c0:	e0bfa183 	ldbu	r2,-378(fp)
 40189c4:	10800098 	cmpnei	r2,r2,2
 40189c8:	1000031e 	bne	r2,zero,40189d8 <getPHYSpeed+0x78c>
 40189cc:	00800084 	movi	r2,2
 40189d0:	e0bfce05 	stb	r2,-200(fp)
 40189d4:	00000106 	br	40189dc <getPHYSpeed+0x790>
 40189d8:	e03fce05 	stb	zero,-200(fp)
 40189dc:	e0ffcf03 	ldbu	r3,-196(fp)
 40189e0:	e13fce03 	ldbu	r4,-200(fp)
 40189e4:	1904b03a 	or	r2,r3,r4
 40189e8:	e0bfcd05 	stb	r2,-204(fp)
 40189ec:	e0bfa183 	ldbu	r2,-378(fp)
 40189f0:	10800058 	cmpnei	r2,r2,1
 40189f4:	1000031e 	bne	r2,zero,4018a04 <getPHYSpeed+0x7b8>
 40189f8:	00800104 	movi	r2,4
 40189fc:	e0bfcc05 	stb	r2,-208(fp)
 4018a00:	00000106 	br	4018a08 <getPHYSpeed+0x7bc>
 4018a04:	e03fcc05 	stb	zero,-208(fp)
 4018a08:	e0ffcd03 	ldbu	r3,-204(fp)
 4018a0c:	e13fcc03 	ldbu	r4,-208(fp)
 4018a10:	1904b03a 	or	r2,r3,r4
 4018a14:	e0bfcb05 	stb	r2,-212(fp)
 4018a18:	e0bfa183 	ldbu	r2,-378(fp)
 4018a1c:	1004c03a 	cmpne	r2,r2,zero
 4018a20:	1000031e 	bne	r2,zero,4018a30 <getPHYSpeed+0x7e4>
 4018a24:	00800204 	movi	r2,8
 4018a28:	e0bfca05 	stb	r2,-216(fp)
 4018a2c:	00000106 	br	4018a34 <getPHYSpeed+0x7e8>
 4018a30:	e03fca05 	stb	zero,-216(fp)
 4018a34:	e0ffcb03 	ldbu	r3,-212(fp)
 4018a38:	e13fca03 	ldbu	r4,-216(fp)
 4018a3c:	1904b03a 	or	r2,r3,r4
 4018a40:	e0bfc905 	stb	r2,-220(fp)
 4018a44:	e0bfa183 	ldbu	r2,-378(fp)
 4018a48:	108000d8 	cmpnei	r2,r2,3
 4018a4c:	1000031e 	bne	r2,zero,4018a5c <getPHYSpeed+0x810>
 4018a50:	0005883a 	mov	r2,zero
 4018a54:	e0bfc805 	stb	r2,-224(fp)
 4018a58:	00000106 	br	4018a60 <getPHYSpeed+0x814>
 4018a5c:	e03fc805 	stb	zero,-224(fp)
 4018a60:	e0ffc903 	ldbu	r3,-220(fp)
 4018a64:	e13fc803 	ldbu	r4,-224(fp)
 4018a68:	1904b03a 	or	r2,r3,r4
 4018a6c:	1007883a 	mov	r3,r2
 4018a70:	0005883a 	mov	r2,zero
 4018a74:	1884b03a 	or	r2,r3,r2
 4018a78:	e0bfa105 	stb	r2,-380(fp)
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4018a7c:	e0bf9c07 	ldb	r2,-400(fp)
 4018a80:	e0bfc715 	stw	r2,-228(fp)
 4018a84:	e0ff9c47 	ldb	r3,-399(fp)
 4018a88:	e0ffc615 	stw	r3,-232(fp)
 4018a8c:	e0bfa183 	ldbu	r2,-378(fp)
 4018a90:	108000a0 	cmpeqi	r2,r2,2
 4018a94:	1000161e 	bne	r2,zero,4018af0 <getPHYSpeed+0x8a4>
 4018a98:	e0bfa183 	ldbu	r2,-378(fp)
 4018a9c:	10800060 	cmpeqi	r2,r2,1
 4018aa0:	10000d1e 	bne	r2,zero,4018ad8 <getPHYSpeed+0x88c>
 4018aa4:	e0bfa183 	ldbu	r2,-378(fp)
 4018aa8:	1004c03a 	cmpne	r2,r2,zero
 4018aac:	1000041e 	bne	r2,zero,4018ac0 <getPHYSpeed+0x874>
 4018ab0:	01010174 	movhi	r4,1029
 4018ab4:	21238404 	addi	r4,r4,-29168
 4018ab8:	e13fc315 	stw	r4,-244(fp)
 4018abc:	00000306 	br	4018acc <getPHYSpeed+0x880>
 4018ac0:	00810174 	movhi	r2,1029
 4018ac4:	10a38504 	addi	r2,r2,-29164
 4018ac8:	e0bfc315 	stw	r2,-244(fp)
 4018acc:	e0ffc317 	ldw	r3,-244(fp)
 4018ad0:	e0ffc415 	stw	r3,-240(fp)
 4018ad4:	00000306 	br	4018ae4 <getPHYSpeed+0x898>
 4018ad8:	01010174 	movhi	r4,1029
 4018adc:	21238704 	addi	r4,r4,-29156
 4018ae0:	e13fc415 	stw	r4,-240(fp)
 4018ae4:	e0bfc417 	ldw	r2,-240(fp)
 4018ae8:	e0bfc515 	stw	r2,-236(fp)
 4018aec:	00000306 	br	4018afc <getPHYSpeed+0x8b0>
 4018af0:	00c10174 	movhi	r3,1029
 4018af4:	18e38804 	addi	r3,r3,-29152
 4018af8:	e0ffc515 	stw	r3,-236(fp)
 4018afc:	e0bfa143 	ldbu	r2,-379(fp)
 4018b00:	10800058 	cmpnei	r2,r2,1
 4018b04:	1000041e 	bne	r2,zero,4018b18 <getPHYSpeed+0x8cc>
 4018b08:	01010174 	movhi	r4,1029
 4018b0c:	21238a04 	addi	r4,r4,-29144
 4018b10:	e13fc215 	stw	r4,-248(fp)
 4018b14:	00000306 	br	4018b24 <getPHYSpeed+0x8d8>
 4018b18:	00810174 	movhi	r2,1029
 4018b1c:	10a38c04 	addi	r2,r2,-29136
 4018b20:	e0bfc215 	stw	r2,-248(fp)
 4018b24:	e0ffc217 	ldw	r3,-248(fp)
 4018b28:	d8c00015 	stw	r3,0(sp)
 4018b2c:	01010174 	movhi	r4,1029
 4018b30:	2123ec04 	addi	r4,r4,-28752
 4018b34:	e17fc717 	ldw	r5,-228(fp)
 4018b38:	e1bfc617 	ldw	r6,-232(fp)
 4018b3c:	e1ffc517 	ldw	r7,-236(fp)
 4018b40:	400207c0 	call	400207c <printf>
																			 speed == TSE_PHY_SPEED_100 ? "100" :
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
 4018b44:	e13fa103 	ldbu	r4,-380(fp)
 4018b48:	e13feb15 	stw	r4,-84(fp)
 4018b4c:	00013f06 	br	401904c <getPHYSpeed+0xe00>
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 4018b50:	e0bf9b17 	ldw	r2,-404(fp)
 4018b54:	10801004 	addi	r2,r2,64
 4018b58:	1009883a 	mov	r4,r2
 4018b5c:	e0bfa017 	ldw	r2,-384(fp)
 4018b60:	10800003 	ldbu	r2,0(r2)
 4018b64:	10c03fcc 	andi	r3,r2,255
 4018b68:	2005883a 	mov	r2,r4
 4018b6c:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 4018b70:	d8000015 	stw	zero,0(sp)
 4018b74:	e13fa017 	ldw	r4,-384(fp)
 4018b78:	000b883a 	mov	r5,zero
 4018b7c:	01800384 	movi	r6,14
 4018b80:	01c00044 	movi	r7,1
 4018b84:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 4018b88:	e0bfa017 	ldw	r2,-384(fp)
 4018b8c:	10800517 	ldw	r2,20(r2)
 4018b90:	1004c03a 	cmpne	r2,r2,zero
 4018b94:	10003c1e 	bne	r2,zero,4018c88 <getPHYSpeed+0xa3c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 4018b98:	e17f9c07 	ldb	r5,-400(fp)
 4018b9c:	e1bf9c47 	ldb	r6,-399(fp)
 4018ba0:	01010174 	movhi	r4,1029
 4018ba4:	21240004 	addi	r4,r4,-28672
 4018ba8:	400207c0 	call	400207c <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 4018bac:	00800044 	movi	r2,1
 4018bb0:	e0bfa185 	stb	r2,-378(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 4018bb4:	00800044 	movi	r2,1
 4018bb8:	e0bfa145 	stb	r2,-379(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
 4018bbc:	e0bfa143 	ldbu	r2,-379(fp)
 4018bc0:	1080004c 	andi	r2,r2,1
 4018bc4:	e0bfc105 	stb	r2,-252(fp)
 4018bc8:	e0bfa183 	ldbu	r2,-378(fp)
 4018bcc:	10800098 	cmpnei	r2,r2,2
 4018bd0:	1000031e 	bne	r2,zero,4018be0 <getPHYSpeed+0x994>
 4018bd4:	00800084 	movi	r2,2
 4018bd8:	e0bfc005 	stb	r2,-256(fp)
 4018bdc:	00000106 	br	4018be4 <getPHYSpeed+0x998>
 4018be0:	e03fc005 	stb	zero,-256(fp)
 4018be4:	e0ffc103 	ldbu	r3,-252(fp)
 4018be8:	e13fc003 	ldbu	r4,-256(fp)
 4018bec:	1904b03a 	or	r2,r3,r4
 4018bf0:	e0bfbf05 	stb	r2,-260(fp)
 4018bf4:	e0bfa183 	ldbu	r2,-378(fp)
 4018bf8:	10800058 	cmpnei	r2,r2,1
 4018bfc:	1000031e 	bne	r2,zero,4018c0c <getPHYSpeed+0x9c0>
 4018c00:	00800104 	movi	r2,4
 4018c04:	e0bfbe05 	stb	r2,-264(fp)
 4018c08:	00000106 	br	4018c10 <getPHYSpeed+0x9c4>
 4018c0c:	e03fbe05 	stb	zero,-264(fp)
 4018c10:	e0ffbf03 	ldbu	r3,-260(fp)
 4018c14:	e13fbe03 	ldbu	r4,-264(fp)
 4018c18:	1904b03a 	or	r2,r3,r4
 4018c1c:	e0bfbd05 	stb	r2,-268(fp)
 4018c20:	e0bfa183 	ldbu	r2,-378(fp)
 4018c24:	1004c03a 	cmpne	r2,r2,zero
 4018c28:	1000031e 	bne	r2,zero,4018c38 <getPHYSpeed+0x9ec>
 4018c2c:	00800204 	movi	r2,8
 4018c30:	e0bfbc05 	stb	r2,-272(fp)
 4018c34:	00000106 	br	4018c3c <getPHYSpeed+0x9f0>
 4018c38:	e03fbc05 	stb	zero,-272(fp)
 4018c3c:	e0ffbd03 	ldbu	r3,-268(fp)
 4018c40:	e13fbc03 	ldbu	r4,-272(fp)
 4018c44:	1904b03a 	or	r2,r3,r4
 4018c48:	e0bfbb05 	stb	r2,-276(fp)
 4018c4c:	e0bfa183 	ldbu	r2,-378(fp)
 4018c50:	108000d8 	cmpnei	r2,r2,3
 4018c54:	1000031e 	bne	r2,zero,4018c64 <getPHYSpeed+0xa18>
 4018c58:	0005883a 	mov	r2,zero
 4018c5c:	e0bfba05 	stb	r2,-280(fp)
 4018c60:	00000106 	br	4018c68 <getPHYSpeed+0xa1c>
 4018c64:	e03fba05 	stb	zero,-280(fp)
 4018c68:	e0ffbb03 	ldbu	r3,-276(fp)
 4018c6c:	e13fba03 	ldbu	r4,-280(fp)
 4018c70:	1904b03a 	or	r2,r3,r4
 4018c74:	1007883a 	mov	r3,r2
 4018c78:	0005883a 	mov	r2,zero
 4018c7c:	1884b03a 	or	r2,r3,r2
 4018c80:	e0bfa105 	stb	r2,-380(fp)
 4018c84:	0000bd06 	br	4018f7c <getPHYSpeed+0xd30>
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
 4018c88:	e0bfa017 	ldw	r2,-384(fp)
 4018c8c:	10800517 	ldw	r2,20(r2)
 4018c90:	10801817 	ldw	r2,96(r2)
 4018c94:	1005003a 	cmpeq	r2,r2,zero
 4018c98:	10002f1e 	bne	r2,zero,4018d58 <getPHYSpeed+0xb0c>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
 4018c9c:	e0bfa017 	ldw	r2,-384(fp)
 4018ca0:	10800517 	ldw	r2,20(r2)
 4018ca4:	10801817 	ldw	r2,96(r2)
 4018ca8:	e13f9b17 	ldw	r4,-404(fp)
 4018cac:	103ee83a 	callr	r2
 4018cb0:	e0bfa105 	stb	r2,-380(fp)
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 4018cb4:	e0bfa103 	ldbu	r2,-380(fp)
 4018cb8:	1080008c 	andi	r2,r2,2
 4018cbc:	1004c03a 	cmpne	r2,r2,zero
 4018cc0:	1000141e 	bne	r2,zero,4018d14 <getPHYSpeed+0xac8>
 4018cc4:	e0bfa103 	ldbu	r2,-380(fp)
 4018cc8:	1080010c 	andi	r2,r2,4
 4018ccc:	1004c03a 	cmpne	r2,r2,zero
 4018cd0:	10000b1e 	bne	r2,zero,4018d00 <getPHYSpeed+0xab4>
 4018cd4:	e0bfa103 	ldbu	r2,-380(fp)
 4018cd8:	1080020c 	andi	r2,r2,8
 4018cdc:	1005003a 	cmpeq	r2,r2,zero
 4018ce0:	1000021e 	bne	r2,zero,4018cec <getPHYSpeed+0xaa0>
 4018ce4:	e03fb905 	stb	zero,-284(fp)
 4018ce8:	00000206 	br	4018cf4 <getPHYSpeed+0xaa8>
 4018cec:	008000c4 	movi	r2,3
 4018cf0:	e0bfb905 	stb	r2,-284(fp)
 4018cf4:	e0ffb903 	ldbu	r3,-284(fp)
 4018cf8:	e0ffb945 	stb	r3,-283(fp)
 4018cfc:	00000206 	br	4018d08 <getPHYSpeed+0xabc>
 4018d00:	01000044 	movi	r4,1
 4018d04:	e13fb945 	stb	r4,-283(fp)
 4018d08:	e0bfb943 	ldbu	r2,-283(fp)
 4018d0c:	e0bfb985 	stb	r2,-282(fp)
 4018d10:	00000206 	br	4018d1c <getPHYSpeed+0xad0>
 4018d14:	00c00084 	movi	r3,2
 4018d18:	e0ffb985 	stb	r3,-282(fp)
 4018d1c:	e13fb983 	ldbu	r4,-282(fp)
 4018d20:	e13fa185 	stb	r4,-378(fp)
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 4018d24:	e0bfa103 	ldbu	r2,-380(fp)
 4018d28:	1080004c 	andi	r2,r2,1
 4018d2c:	e0bfa145 	stb	r2,-379(fp)
				
				if(result & ALT_TSE_E_INVALID_SPEED)
 4018d30:	e0bfa103 	ldbu	r2,-380(fp)
 4018d34:	1080006c 	andhi	r2,r2,1
 4018d38:	1005003a 	cmpeq	r2,r2,zero
 4018d3c:	10008f1e 	bne	r2,zero,4018f7c <getPHYSpeed+0xd30>
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
 4018d40:	e17f9c07 	ldb	r5,-400(fp)
 4018d44:	e1bf9c47 	ldb	r6,-399(fp)
 4018d48:	01010174 	movhi	r4,1029
 4018d4c:	21240e04 	addi	r4,r4,-28616
 4018d50:	400207c0 	call	400207c <printf>
 4018d54:	00008906 	br	4018f7c <getPHYSpeed+0xd30>
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
 4018d58:	e0bfa017 	ldw	r2,-384(fp)
 4018d5c:	10800517 	ldw	r2,20(r2)
 4018d60:	10801583 	ldbu	r2,86(r2)
 4018d64:	10803fcc 	andi	r2,r2,255
 4018d68:	1004c03a 	cmpne	r2,r2,zero
 4018d6c:	10003c1e 	bne	r2,zero,4018e60 <getPHYSpeed+0xc14>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 4018d70:	e17f9c07 	ldb	r5,-400(fp)
 4018d74:	e1bf9c47 	ldb	r6,-399(fp)
 4018d78:	01010174 	movhi	r4,1029
 4018d7c:	21241b04 	addi	r4,r4,-28564
 4018d80:	400207c0 	call	400207c <printf>
	            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 4018d84:	00800044 	movi	r2,1
 4018d88:	e0bfa185 	stb	r2,-378(fp)
	            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 4018d8c:	00800044 	movi	r2,1
 4018d90:	e0bfa145 	stb	r2,-379(fp)
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
 4018d94:	e0bfa143 	ldbu	r2,-379(fp)
 4018d98:	1080004c 	andi	r2,r2,1
 4018d9c:	e0bfb805 	stb	r2,-288(fp)
 4018da0:	e0bfa183 	ldbu	r2,-378(fp)
 4018da4:	10800098 	cmpnei	r2,r2,2
 4018da8:	1000031e 	bne	r2,zero,4018db8 <getPHYSpeed+0xb6c>
 4018dac:	00800084 	movi	r2,2
 4018db0:	e0bfb705 	stb	r2,-292(fp)
 4018db4:	00000106 	br	4018dbc <getPHYSpeed+0xb70>
 4018db8:	e03fb705 	stb	zero,-292(fp)
 4018dbc:	e0ffb803 	ldbu	r3,-288(fp)
 4018dc0:	e13fb703 	ldbu	r4,-292(fp)
 4018dc4:	1904b03a 	or	r2,r3,r4
 4018dc8:	e0bfb605 	stb	r2,-296(fp)
 4018dcc:	e0bfa183 	ldbu	r2,-378(fp)
 4018dd0:	10800058 	cmpnei	r2,r2,1
 4018dd4:	1000031e 	bne	r2,zero,4018de4 <getPHYSpeed+0xb98>
 4018dd8:	00800104 	movi	r2,4
 4018ddc:	e0bfb505 	stb	r2,-300(fp)
 4018de0:	00000106 	br	4018de8 <getPHYSpeed+0xb9c>
 4018de4:	e03fb505 	stb	zero,-300(fp)
 4018de8:	e0ffb603 	ldbu	r3,-296(fp)
 4018dec:	e13fb503 	ldbu	r4,-300(fp)
 4018df0:	1904b03a 	or	r2,r3,r4
 4018df4:	e0bfb405 	stb	r2,-304(fp)
 4018df8:	e0bfa183 	ldbu	r2,-378(fp)
 4018dfc:	1004c03a 	cmpne	r2,r2,zero
 4018e00:	1000031e 	bne	r2,zero,4018e10 <getPHYSpeed+0xbc4>
 4018e04:	00800204 	movi	r2,8
 4018e08:	e0bfb305 	stb	r2,-308(fp)
 4018e0c:	00000106 	br	4018e14 <getPHYSpeed+0xbc8>
 4018e10:	e03fb305 	stb	zero,-308(fp)
 4018e14:	e0ffb403 	ldbu	r3,-304(fp)
 4018e18:	e13fb303 	ldbu	r4,-308(fp)
 4018e1c:	1904b03a 	or	r2,r3,r4
 4018e20:	e0bfb205 	stb	r2,-312(fp)
 4018e24:	e0bfa183 	ldbu	r2,-378(fp)
 4018e28:	108000d8 	cmpnei	r2,r2,3
 4018e2c:	1000031e 	bne	r2,zero,4018e3c <getPHYSpeed+0xbf0>
 4018e30:	0005883a 	mov	r2,zero
 4018e34:	e0bfb105 	stb	r2,-316(fp)
 4018e38:	00000106 	br	4018e40 <getPHYSpeed+0xbf4>
 4018e3c:	e03fb105 	stb	zero,-316(fp)
 4018e40:	e0ffb203 	ldbu	r3,-312(fp)
 4018e44:	e13fb103 	ldbu	r4,-316(fp)
 4018e48:	1904b03a 	or	r2,r3,r4
 4018e4c:	1007883a 	mov	r3,r2
 4018e50:	0005883a 	mov	r2,zero
 4018e54:	1884b03a 	or	r2,r3,r2
 4018e58:	e0bfa105 	stb	r2,-380(fp)
 4018e5c:	00004706 	br	4018f7c <getPHYSpeed+0xd30>
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 4018e60:	e0bfa017 	ldw	r2,-384(fp)
 4018e64:	10800517 	ldw	r2,20(r2)
 4018e68:	10801583 	ldbu	r2,86(r2)
 4018e6c:	11403fcc 	andi	r5,r2,255
 4018e70:	e0bfa017 	ldw	r2,-384(fp)
 4018e74:	10800517 	ldw	r2,20(r2)
 4018e78:	108015c3 	ldbu	r2,87(r2)
 4018e7c:	11803fcc 	andi	r6,r2,255
 4018e80:	e13fa017 	ldw	r4,-384(fp)
 4018e84:	01c00084 	movi	r7,2
 4018e88:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 4018e8c:	e0bfa185 	stb	r2,-378(fp)
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 4018e90:	e0bfa017 	ldw	r2,-384(fp)
 4018e94:	10800517 	ldw	r2,20(r2)
 4018e98:	10801583 	ldbu	r2,86(r2)
 4018e9c:	11403fcc 	andi	r5,r2,255
 4018ea0:	e0bfa017 	ldw	r2,-384(fp)
 4018ea4:	10800517 	ldw	r2,20(r2)
 4018ea8:	10801603 	ldbu	r2,88(r2)
 4018eac:	11803fcc 	andi	r6,r2,255
 4018eb0:	e13fa017 	ldw	r4,-384(fp)
 4018eb4:	01c00044 	movi	r7,1
 4018eb8:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 4018ebc:	e0bfa145 	stb	r2,-379(fp)
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 4018ec0:	e0bfa143 	ldbu	r2,-379(fp)
 4018ec4:	1080004c 	andi	r2,r2,1
 4018ec8:	e0bfb005 	stb	r2,-320(fp)
 4018ecc:	e0bfa183 	ldbu	r2,-378(fp)
 4018ed0:	10800098 	cmpnei	r2,r2,2
 4018ed4:	1000031e 	bne	r2,zero,4018ee4 <getPHYSpeed+0xc98>
 4018ed8:	00800084 	movi	r2,2
 4018edc:	e0bfaf05 	stb	r2,-324(fp)
 4018ee0:	00000106 	br	4018ee8 <getPHYSpeed+0xc9c>
 4018ee4:	e03faf05 	stb	zero,-324(fp)
 4018ee8:	e0ffb003 	ldbu	r3,-320(fp)
 4018eec:	e13faf03 	ldbu	r4,-324(fp)
 4018ef0:	1904b03a 	or	r2,r3,r4
 4018ef4:	e0bfae05 	stb	r2,-328(fp)
 4018ef8:	e0bfa183 	ldbu	r2,-378(fp)
 4018efc:	10800058 	cmpnei	r2,r2,1
 4018f00:	1000031e 	bne	r2,zero,4018f10 <getPHYSpeed+0xcc4>
 4018f04:	00800104 	movi	r2,4
 4018f08:	e0bfad05 	stb	r2,-332(fp)
 4018f0c:	00000106 	br	4018f14 <getPHYSpeed+0xcc8>
 4018f10:	e03fad05 	stb	zero,-332(fp)
 4018f14:	e0ffae03 	ldbu	r3,-328(fp)
 4018f18:	e13fad03 	ldbu	r4,-332(fp)
 4018f1c:	1904b03a 	or	r2,r3,r4
 4018f20:	e0bfac05 	stb	r2,-336(fp)
 4018f24:	e0bfa183 	ldbu	r2,-378(fp)
 4018f28:	1004c03a 	cmpne	r2,r2,zero
 4018f2c:	1000031e 	bne	r2,zero,4018f3c <getPHYSpeed+0xcf0>
 4018f30:	00800204 	movi	r2,8
 4018f34:	e0bfab05 	stb	r2,-340(fp)
 4018f38:	00000106 	br	4018f40 <getPHYSpeed+0xcf4>
 4018f3c:	e03fab05 	stb	zero,-340(fp)
 4018f40:	e0ffac03 	ldbu	r3,-336(fp)
 4018f44:	e13fab03 	ldbu	r4,-340(fp)
 4018f48:	1904b03a 	or	r2,r3,r4
 4018f4c:	e0bfaa05 	stb	r2,-344(fp)
 4018f50:	e0bfa183 	ldbu	r2,-378(fp)
 4018f54:	108000d8 	cmpnei	r2,r2,3
 4018f58:	1000031e 	bne	r2,zero,4018f68 <getPHYSpeed+0xd1c>
 4018f5c:	0005883a 	mov	r2,zero
 4018f60:	e0bfa905 	stb	r2,-348(fp)
 4018f64:	00000106 	br	4018f6c <getPHYSpeed+0xd20>
 4018f68:	e03fa905 	stb	zero,-348(fp)
 4018f6c:	e0ffaa03 	ldbu	r3,-344(fp)
 4018f70:	e13fa903 	ldbu	r4,-348(fp)
 4018f74:	1904b03a 	or	r2,r3,r4
 4018f78:	e0bfa105 	stb	r2,-380(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 4018f7c:	e0bf9c07 	ldb	r2,-400(fp)
 4018f80:	e0bfa815 	stw	r2,-352(fp)
 4018f84:	e0ff9c47 	ldb	r3,-399(fp)
 4018f88:	e0ffa715 	stw	r3,-356(fp)
 4018f8c:	e0bfa183 	ldbu	r2,-378(fp)
 4018f90:	108000a0 	cmpeqi	r2,r2,2
 4018f94:	1000161e 	bne	r2,zero,4018ff0 <getPHYSpeed+0xda4>
 4018f98:	e0bfa183 	ldbu	r2,-378(fp)
 4018f9c:	10800060 	cmpeqi	r2,r2,1
 4018fa0:	10000d1e 	bne	r2,zero,4018fd8 <getPHYSpeed+0xd8c>
 4018fa4:	e0bfa183 	ldbu	r2,-378(fp)
 4018fa8:	1004c03a 	cmpne	r2,r2,zero
 4018fac:	1000041e 	bne	r2,zero,4018fc0 <getPHYSpeed+0xd74>
 4018fb0:	01010174 	movhi	r4,1029
 4018fb4:	21238404 	addi	r4,r4,-29168
 4018fb8:	e13fa415 	stw	r4,-368(fp)
 4018fbc:	00000306 	br	4018fcc <getPHYSpeed+0xd80>
 4018fc0:	00810174 	movhi	r2,1029
 4018fc4:	10a38504 	addi	r2,r2,-29164
 4018fc8:	e0bfa415 	stw	r2,-368(fp)
 4018fcc:	e0ffa417 	ldw	r3,-368(fp)
 4018fd0:	e0ffa515 	stw	r3,-364(fp)
 4018fd4:	00000306 	br	4018fe4 <getPHYSpeed+0xd98>
 4018fd8:	01010174 	movhi	r4,1029
 4018fdc:	21238704 	addi	r4,r4,-29156
 4018fe0:	e13fa515 	stw	r4,-364(fp)
 4018fe4:	e0bfa517 	ldw	r2,-364(fp)
 4018fe8:	e0bfa615 	stw	r2,-360(fp)
 4018fec:	00000306 	br	4018ffc <getPHYSpeed+0xdb0>
 4018ff0:	00c10174 	movhi	r3,1029
 4018ff4:	18e38804 	addi	r3,r3,-29152
 4018ff8:	e0ffa615 	stw	r3,-360(fp)
 4018ffc:	e0bfa143 	ldbu	r2,-379(fp)
 4019000:	10800058 	cmpnei	r2,r2,1
 4019004:	1000041e 	bne	r2,zero,4019018 <getPHYSpeed+0xdcc>
 4019008:	01010174 	movhi	r4,1029
 401900c:	21238a04 	addi	r4,r4,-29144
 4019010:	e13fa315 	stw	r4,-372(fp)
 4019014:	00000306 	br	4019024 <getPHYSpeed+0xdd8>
 4019018:	00810174 	movhi	r2,1029
 401901c:	10a38c04 	addi	r2,r2,-29136
 4019020:	e0bfa315 	stw	r2,-372(fp)
 4019024:	e0ffa317 	ldw	r3,-372(fp)
 4019028:	d8c00015 	stw	r3,0(sp)
 401902c:	01010174 	movhi	r4,1029
 4019030:	21243204 	addi	r4,r4,-28472
 4019034:	e17fa817 	ldw	r5,-352(fp)
 4019038:	e1bfa717 	ldw	r6,-356(fp)
 401903c:	e1ffa617 	ldw	r7,-360(fp)
 4019040:	400207c0 	call	400207c <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
 4019044:	e13fa103 	ldbu	r4,-380(fp)
 4019048:	e13feb15 	stw	r4,-84(fp)
 401904c:	e0bfeb17 	ldw	r2,-84(fp)
}
 4019050:	e037883a 	mov	sp,fp
 4019054:	dfc00117 	ldw	ra,4(sp)
 4019058:	df000017 	ldw	fp,0(sp)
 401905c:	dec00204 	addi	sp,sp,8
 4019060:	f800283a 	ret

04019064 <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
 4019064:	defffd04 	addi	sp,sp,-12
 4019068:	df000215 	stw	fp,8(sp)
 401906c:	df000204 	addi	fp,sp,8
 4019070:	e13fff15 	stw	r4,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4019074:	e0bfff17 	ldw	r2,-4(fp)
 4019078:	10800617 	ldw	r2,24(r2)
 401907c:	10800317 	ldw	r2,12(r2)
 4019080:	10800117 	ldw	r2,4(r2)
 4019084:	10800217 	ldw	r2,8(r2)
 4019088:	10800017 	ldw	r2,0(r2)
 401908c:	e0bffe15 	stw	r2,-8(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4019090:	e0bffe17 	ldw	r2,-8(fp)
 4019094:	10801004 	addi	r2,r2,64
 4019098:	10800037 	ldwio	r2,0(r2)
}
 401909c:	e037883a 	mov	sp,fp
 40190a0:	df000017 	ldw	fp,0(sp)
 40190a4:	dec00104 	addi	sp,sp,4
 40190a8:	f800283a 	ret

040190ac <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
 40190ac:	defffc04 	addi	sp,sp,-16
 40190b0:	df000315 	stw	fp,12(sp)
 40190b4:	df000304 	addi	fp,sp,12
 40190b8:	e13ffe15 	stw	r4,-8(fp)
 40190bc:	e17fff05 	stb	r5,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 40190c0:	e0bffe17 	ldw	r2,-8(fp)
 40190c4:	10800617 	ldw	r2,24(r2)
 40190c8:	10800317 	ldw	r2,12(r2)
 40190cc:	10800117 	ldw	r2,4(r2)
 40190d0:	10800217 	ldw	r2,8(r2)
 40190d4:	10800017 	ldw	r2,0(r2)
 40190d8:	e0bffd15 	stw	r2,-12(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 40190dc:	e0bffd17 	ldw	r2,-12(fp)
 40190e0:	10801004 	addi	r2,r2,64
 40190e4:	e0ffff03 	ldbu	r3,-4(fp)
 40190e8:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 40190ec:	0005883a 	mov	r2,zero
}
 40190f0:	e037883a 	mov	sp,fp
 40190f4:	df000017 	ldw	fp,0(sp)
 40190f8:	dec00104 	addi	sp,sp,4
 40190fc:	f800283a 	ret

04019100 <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 4019100:	defff704 	addi	sp,sp,-36
 4019104:	df000815 	stw	fp,32(sp)
 4019108:	df000804 	addi	fp,sp,32
 401910c:	e13ffb15 	stw	r4,-20(fp)
 4019110:	e0800117 	ldw	r2,4(fp)
 4019114:	e17ffc05 	stb	r5,-16(fp)
 4019118:	e1bffd05 	stb	r6,-12(fp)
 401911c:	e1fffe05 	stb	r7,-8(fp)
 4019120:	e0bfff0d 	sth	r2,-4(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4019124:	e0bffb17 	ldw	r2,-20(fp)
 4019128:	10800617 	ldw	r2,24(r2)
 401912c:	10800317 	ldw	r2,12(r2)
 4019130:	10800117 	ldw	r2,4(r2)
 4019134:	10800217 	ldw	r2,8(r2)
 4019138:	10800017 	ldw	r2,0(r2)
 401913c:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
 4019140:	e03ffa0d 	sth	zero,-24(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4019144:	e03ff915 	stw	zero,-28(fp)
 4019148:	00000906 	br	4019170 <alt_tse_phy_wr_mdio_reg+0x70>
    {
        bit_mask <<= 1;
 401914c:	e0bffa0b 	ldhu	r2,-24(fp)
 4019150:	1085883a 	add	r2,r2,r2
 4019154:	e0bffa0d 	sth	r2,-24(fp)
        bit_mask |= 0x01;        
 4019158:	e0bffa0b 	ldhu	r2,-24(fp)
 401915c:	10800054 	ori	r2,r2,1
 4019160:	e0bffa0d 	sth	r2,-24(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4019164:	e0bff917 	ldw	r2,-28(fp)
 4019168:	10800044 	addi	r2,r2,1
 401916c:	e0bff915 	stw	r2,-28(fp)
 4019170:	e0fffe03 	ldbu	r3,-8(fp)
 4019174:	e0bff917 	ldw	r2,-28(fp)
 4019178:	10fff416 	blt	r2,r3,401914c <alt_tse_phy_wr_mdio_reg+0x4c>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
 401917c:	e0fffa0b 	ldhu	r3,-24(fp)
 4019180:	e0bffd03 	ldbu	r2,-12(fp)
 4019184:	1884983a 	sll	r2,r3,r2
 4019188:	e0bffa0d 	sth	r2,-24(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 401918c:	e0bff817 	ldw	r2,-32(fp)
 4019190:	1080a004 	addi	r2,r2,640
 4019194:	1007883a 	mov	r3,r2
 4019198:	e0bffc03 	ldbu	r2,-16(fp)
 401919c:	1085883a 	add	r2,r2,r2
 40191a0:	1085883a 	add	r2,r2,r2
 40191a4:	1885883a 	add	r2,r3,r2
 40191a8:	10800037 	ldwio	r2,0(r2)
 40191ac:	e0bffa8d 	sth	r2,-22(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
 40191b0:	e0bffa0b 	ldhu	r2,-24(fp)
 40191b4:	0084303a 	nor	r2,zero,r2
 40191b8:	1007883a 	mov	r3,r2
 40191bc:	e0bffa8b 	ldhu	r2,-22(fp)
 40191c0:	1884703a 	and	r2,r3,r2
 40191c4:	e0bffa8d 	sth	r2,-22(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
 40191c8:	e0ffff0b 	ldhu	r3,-4(fp)
 40191cc:	e0bffd03 	ldbu	r2,-12(fp)
 40191d0:	1884983a 	sll	r2,r3,r2
 40191d4:	1007883a 	mov	r3,r2
 40191d8:	e0bffa0b 	ldhu	r2,-24(fp)
 40191dc:	1884703a 	and	r2,r3,r2
 40191e0:	1007883a 	mov	r3,r2
 40191e4:	e0bffa8b 	ldhu	r2,-22(fp)
 40191e8:	1884b03a 	or	r2,r3,r2
 40191ec:	e0bffa8d 	sth	r2,-22(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 40191f0:	e0bff817 	ldw	r2,-32(fp)
 40191f4:	1080a004 	addi	r2,r2,640
 40191f8:	1007883a 	mov	r3,r2
 40191fc:	e0bffc03 	ldbu	r2,-16(fp)
 4019200:	1085883a 	add	r2,r2,r2
 4019204:	1085883a 	add	r2,r2,r2
 4019208:	1885883a 	add	r2,r3,r2
 401920c:	e0fffa8b 	ldhu	r3,-22(fp)
 4019210:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 4019214:	0005883a 	mov	r2,zero
    
}
 4019218:	e037883a 	mov	sp,fp
 401921c:	df000017 	ldw	fp,0(sp)
 4019220:	dec00104 	addi	sp,sp,4
 4019224:	f800283a 	ret

04019228 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
 4019228:	defff704 	addi	sp,sp,-36
 401922c:	df000815 	stw	fp,32(sp)
 4019230:	df000804 	addi	fp,sp,32
 4019234:	e13ffc15 	stw	r4,-16(fp)
 4019238:	e17ffd05 	stb	r5,-12(fp)
 401923c:	e1bffe05 	stb	r6,-8(fp)
 4019240:	e1ffff05 	stb	r7,-4(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4019244:	e0bffc17 	ldw	r2,-16(fp)
 4019248:	10800617 	ldw	r2,24(r2)
 401924c:	10800317 	ldw	r2,12(r2)
 4019250:	10800117 	ldw	r2,4(r2)
 4019254:	10800217 	ldw	r2,8(r2)
 4019258:	10800017 	ldw	r2,0(r2)
 401925c:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
 4019260:	e03ffa15 	stw	zero,-24(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4019264:	e03ff915 	stw	zero,-28(fp)
 4019268:	00000906 	br	4019290 <alt_tse_phy_rd_mdio_reg+0x68>
    {
        bit_mask <<= 1;
 401926c:	e0bffa17 	ldw	r2,-24(fp)
 4019270:	1085883a 	add	r2,r2,r2
 4019274:	e0bffa15 	stw	r2,-24(fp)
        bit_mask |= 0x01;        
 4019278:	e0bffa17 	ldw	r2,-24(fp)
 401927c:	10800054 	ori	r2,r2,1
 4019280:	e0bffa15 	stw	r2,-24(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 4019284:	e0bff917 	ldw	r2,-28(fp)
 4019288:	10800044 	addi	r2,r2,1
 401928c:	e0bff915 	stw	r2,-28(fp)
 4019290:	e0ffff03 	ldbu	r3,-4(fp)
 4019294:	e0bff917 	ldw	r2,-28(fp)
 4019298:	10fff416 	blt	r2,r3,401926c <alt_tse_phy_rd_mdio_reg+0x44>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 401929c:	e0bff817 	ldw	r2,-32(fp)
 40192a0:	1080a004 	addi	r2,r2,640
 40192a4:	1007883a 	mov	r3,r2
 40192a8:	e0bffd03 	ldbu	r2,-12(fp)
 40192ac:	1085883a 	add	r2,r2,r2
 40192b0:	1085883a 	add	r2,r2,r2
 40192b4:	1885883a 	add	r2,r3,r2
 40192b8:	10800037 	ldwio	r2,0(r2)
 40192bc:	e0bffb0d 	sth	r2,-20(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
 40192c0:	e0fffb0b 	ldhu	r3,-20(fp)
 40192c4:	e0bffe03 	ldbu	r2,-8(fp)
 40192c8:	1885d83a 	sra	r2,r3,r2
 40192cc:	e0bffb0d 	sth	r2,-20(fp)
    
    return (temp_data & bit_mask);
 40192d0:	e0fffb0b 	ldhu	r3,-20(fp)
 40192d4:	e0bffa17 	ldw	r2,-24(fp)
 40192d8:	1884703a 	and	r2,r3,r2
}
 40192dc:	e037883a 	mov	sp,fp
 40192e0:	df000017 	ldw	fp,0(sp)
 40192e4:	dec00104 	addi	sp,sp,4
 40192e8:	f800283a 	ret

040192ec <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 40192ec:	deff9a04 	addi	sp,sp,-408
 40192f0:	dfc06515 	stw	ra,404(sp)
 40192f4:	df006415 	stw	fp,400(sp)
 40192f8:	df006404 	addi	fp,sp,400
                            0x11,                   /* Location of Status Register                                   */
                            14,                     /* Location of Speed Status                                      */
                            13,                     /* Location of Duplex Status                                     */
                            10,                     /* Location of Link Status                                       */
                            &marvell_phy_cfg        /* Function pointer to configure Marvell PHY                     */
                           };
 40192fc:	e13f9c04 	addi	r4,fp,-400
 4019300:	01801904 	movi	r6,100
 4019304:	000b883a 	mov	r5,zero
 4019308:	4001f640 	call	4001f64 <memset>
 401930c:	00c10174 	movhi	r3,1029
 4019310:	18e43e04 	addi	r3,r3,-28424
 4019314:	18800017 	ldw	r2,0(r3)
 4019318:	e0bf9c15 	stw	r2,-400(fp)
 401931c:	18800117 	ldw	r2,4(r3)
 4019320:	e0bf9d15 	stw	r2,-396(fp)
 4019324:	18800217 	ldw	r2,8(r3)
 4019328:	e0bf9e15 	stw	r2,-392(fp)
 401932c:	18800317 	ldw	r2,12(r3)
 4019330:	e0bf9f15 	stw	r2,-388(fp)
 4019334:	e13fa004 	addi	r4,fp,-384
 4019338:	01801004 	movi	r6,64
 401933c:	000b883a 	mov	r5,zero
 4019340:	4001f640 	call	4001f64 <memset>
 4019344:	009410c4 	movi	r2,20547
 4019348:	e0bfb015 	stw	r2,-320(fp)
 401934c:	00800304 	movi	r2,12
 4019350:	e0bfb105 	stb	r2,-316(fp)
 4019354:	00800084 	movi	r2,2
 4019358:	e0bfb145 	stb	r2,-315(fp)
 401935c:	00800444 	movi	r2,17
 4019360:	e0bfb185 	stb	r2,-314(fp)
 4019364:	00800384 	movi	r2,14
 4019368:	e0bfb1c5 	stb	r2,-313(fp)
 401936c:	00800344 	movi	r2,13
 4019370:	e0bfb205 	stb	r2,-312(fp)
 4019374:	00800284 	movi	r2,10
 4019378:	e0bfb245 	stb	r2,-311(fp)
 401937c:	008100b4 	movhi	r2,1026
 4019380:	10af1504 	addi	r2,r2,-17324
 4019384:	e0bfb315 	stw	r2,-308(fp)
                            0x11,                            /* Location of Status Register                                   */
                            14,                              /* Location of Speed Status                                      */
                            13,                              /* Location of Duplex Status                                     */
                            10,                              /* Location of Link Status                                       */
                            &marvell_phy_cfg                 /* Function pointer to configure Marvell PHY                     */
                           };
 4019388:	e13fb504 	addi	r4,fp,-300
 401938c:	01801904 	movi	r6,100
 4019390:	000b883a 	mov	r5,zero
 4019394:	4001f640 	call	4001f64 <memset>
 4019398:	00c10174 	movhi	r3,1029
 401939c:	18e45204 	addi	r3,r3,-28344
 40193a0:	18800017 	ldw	r2,0(r3)
 40193a4:	e0bfb515 	stw	r2,-300(fp)
 40193a8:	18800117 	ldw	r2,4(r3)
 40193ac:	e0bfb615 	stw	r2,-296(fp)
 40193b0:	18800217 	ldw	r2,8(r3)
 40193b4:	e0bfb715 	stw	r2,-292(fp)
 40193b8:	18800317 	ldw	r2,12(r3)
 40193bc:	e0bfb815 	stw	r2,-288(fp)
 40193c0:	18800417 	ldw	r2,16(r3)
 40193c4:	e0bfb915 	stw	r2,-284(fp)
 40193c8:	18800517 	ldw	r2,20(r3)
 40193cc:	e0bfba15 	stw	r2,-280(fp)
 40193d0:	18800603 	ldbu	r2,24(r3)
 40193d4:	e0bfbb05 	stb	r2,-276(fp)
 40193d8:	e13fbb44 	addi	r4,fp,-275
 40193dc:	01800dc4 	movi	r6,55
 40193e0:	000b883a 	mov	r5,zero
 40193e4:	4001f640 	call	4001f64 <memset>
 40193e8:	009410c4 	movi	r2,20547
 40193ec:	e0bfc915 	stw	r2,-220(fp)
 40193f0:	00800344 	movi	r2,13
 40193f4:	e0bfca05 	stb	r2,-216(fp)
 40193f8:	00800084 	movi	r2,2
 40193fc:	e0bfca45 	stb	r2,-215(fp)
 4019400:	00800444 	movi	r2,17
 4019404:	e0bfca85 	stb	r2,-214(fp)
 4019408:	00800384 	movi	r2,14
 401940c:	e0bfcac5 	stb	r2,-213(fp)
 4019410:	00800344 	movi	r2,13
 4019414:	e0bfcb05 	stb	r2,-212(fp)
 4019418:	00800284 	movi	r2,10
 401941c:	e0bfcb45 	stb	r2,-211(fp)
 4019420:	008100b4 	movhi	r2,1026
 4019424:	10af1504 	addi	r2,r2,-17324
 4019428:	e0bfcc15 	stw	r2,-208(fp)
                          DP83865_REV,            /* Model Revision Number                            */
                          0x11,                   /* Location of Status Register                      */
                          3,                      /* Location of Speed Status                         */
                          1,                      /* Location of Duplex Status                        */
                          2                       /* Location of Link Status                          */
                         };
 401942c:	e13fce04 	addi	r4,fp,-200
 4019430:	01801904 	movi	r6,100
 4019434:	000b883a 	mov	r5,zero
 4019438:	4001f640 	call	4001f64 <memset>
 401943c:	00c10174 	movhi	r3,1029
 4019440:	18e46604 	addi	r3,r3,-28264
 4019444:	18800017 	ldw	r2,0(r3)
 4019448:	e0bfce15 	stw	r2,-200(fp)
 401944c:	18800117 	ldw	r2,4(r3)
 4019450:	e0bfcf15 	stw	r2,-196(fp)
 4019454:	18800217 	ldw	r2,8(r3)
 4019458:	e0bfd015 	stw	r2,-192(fp)
 401945c:	18800317 	ldw	r2,12(r3)
 4019460:	e0bfd115 	stw	r2,-188(fp)
 4019464:	18800403 	ldbu	r2,16(r3)
 4019468:	e0bfd205 	stb	r2,-184(fp)
 401946c:	e13fd244 	addi	r4,fp,-183
 4019470:	01800fc4 	movi	r6,63
 4019474:	000b883a 	mov	r5,zero
 4019478:	4001f640 	call	4001f64 <memset>
 401947c:	00800234 	movhi	r2,8
 4019480:	108005c4 	addi	r2,r2,23
 4019484:	e0bfe215 	stw	r2,-120(fp)
 4019488:	008001c4 	movi	r2,7
 401948c:	e0bfe305 	stb	r2,-116(fp)
 4019490:	00800284 	movi	r2,10
 4019494:	e0bfe345 	stb	r2,-115(fp)
 4019498:	00800444 	movi	r2,17
 401949c:	e0bfe385 	stb	r2,-114(fp)
 40194a0:	008000c4 	movi	r2,3
 40194a4:	e0bfe3c5 	stb	r2,-113(fp)
 40194a8:	00800044 	movi	r2,1
 40194ac:	e0bfe405 	stb	r2,-112(fp)
 40194b0:	00800084 	movi	r2,2
 40194b4:	e0bfe445 	stb	r2,-111(fp)
                           0,                              /* Location of Speed Status    (ignored)                      */
                           0,                              /* Location of Duplex Status   (ignored)                      */
                           0,                              /* Location of Link Status     (ignored)                      */
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
 40194b8:	e13fe704 	addi	r4,fp,-100
 40194bc:	01801904 	movi	r6,100
 40194c0:	000b883a 	mov	r5,zero
 40194c4:	4001f640 	call	4001f64 <memset>
 40194c8:	00c10174 	movhi	r3,1029
 40194cc:	18e47a04 	addi	r3,r3,-28184
 40194d0:	18800017 	ldw	r2,0(r3)
 40194d4:	e0bfe715 	stw	r2,-100(fp)
 40194d8:	18800117 	ldw	r2,4(r3)
 40194dc:	e0bfe815 	stw	r2,-96(fp)
 40194e0:	18800217 	ldw	r2,8(r3)
 40194e4:	e0bfe915 	stw	r2,-92(fp)
 40194e8:	18800317 	ldw	r2,12(r3)
 40194ec:	e0bfea15 	stw	r2,-88(fp)
 40194f0:	1880040b 	ldhu	r2,16(r3)
 40194f4:	e0bfeb0d 	sth	r2,-84(fp)
 40194f8:	e13feb84 	addi	r4,fp,-82
 40194fc:	01800f84 	movi	r6,62
 4019500:	000b883a 	mov	r5,zero
 4019504:	4001f640 	call	4001f64 <memset>
 4019508:	00800234 	movhi	r2,8
 401950c:	108005c4 	addi	r2,r2,23
 4019510:	e0bffb15 	stw	r2,-20(fp)
 4019514:	00800244 	movi	r2,9
 4019518:	e0bffc05 	stb	r2,-16(fp)
 401951c:	008100b4 	movhi	r2,1026
 4019520:	10aff904 	addi	r2,r2,-16412
 4019524:	e0bfff15 	stw	r2,-4(fp)
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 4019528:	e13f9c04 	addi	r4,fp,-400
 401952c:	40170740 	call	4017074 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 4019530:	e13fb504 	addi	r4,fp,-300
 4019534:	40170740 	call	4017074 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 4019538:	e13fce04 	addi	r4,fp,-200
 401953c:	40170740 	call	4017074 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 4019540:	e13fe704 	addi	r4,fp,-100
 4019544:	40170740 	call	4017074 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
 4019548:	d0a7fd03 	ldbu	r2,-24588(gp)
 401954c:	10803fcc 	andi	r2,r2,255
}
 4019550:	e037883a 	mov	sp,fp
 4019554:	dfc00117 	ldw	ra,4(sp)
 4019558:	df000017 	ldw	fp,0(sp)
 401955c:	dec00204 	addi	sp,sp,8
 4019560:	f800283a 	ret

04019564 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
 4019564:	defffd04 	addi	sp,sp,-12
 4019568:	dfc00215 	stw	ra,8(sp)
 401956c:	df000115 	stw	fp,4(sp)
 4019570:	df000104 	addi	fp,sp,4
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
 4019574:	d0a7fd03 	ldbu	r2,-24588(gp)
 4019578:	11403fcc 	andi	r5,r2,255
 401957c:	01010174 	movhi	r4,1029
 4019580:	21248e04 	addi	r4,r4,-28104
 4019584:	4016d140 	call	4016d14 <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
 4019588:	e03fff05 	stb	zero,-4(fp)
 401958c:	00006606 	br	4019728 <alt_tse_phy_print_profile+0x1c4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
 4019590:	e17fff07 	ldb	r5,-4(fp)
 4019594:	01010174 	movhi	r4,1029
 4019598:	21249d04 	addi	r4,r4,-28044
 401959c:	4016d140 	call	4016d14 <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
 40195a0:	e0bfff07 	ldb	r2,-4(fp)
 40195a4:	00c101b4 	movhi	r3,1030
 40195a8:	18e0e704 	addi	r3,r3,-31844
 40195ac:	1085883a 	add	r2,r2,r2
 40195b0:	1085883a 	add	r2,r2,r2
 40195b4:	10c5883a 	add	r2,r2,r3
 40195b8:	10800017 	ldw	r2,0(r2)
 40195bc:	100b883a 	mov	r5,r2
 40195c0:	01010174 	movhi	r4,1029
 40195c4:	2124a204 	addi	r4,r4,-28024
 40195c8:	4016d140 	call	4016d14 <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
 40195cc:	e0bfff07 	ldb	r2,-4(fp)
 40195d0:	00c101b4 	movhi	r3,1030
 40195d4:	18e0e704 	addi	r3,r3,-31844
 40195d8:	1085883a 	add	r2,r2,r2
 40195dc:	1085883a 	add	r2,r2,r2
 40195e0:	10c5883a 	add	r2,r2,r3
 40195e4:	10800017 	ldw	r2,0(r2)
 40195e8:	10801417 	ldw	r2,80(r2)
 40195ec:	100b883a 	mov	r5,r2
 40195f0:	01010174 	movhi	r4,1029
 40195f4:	2124a804 	addi	r4,r4,-28000
 40195f8:	4016d140 	call	4016d14 <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
 40195fc:	e0bfff07 	ldb	r2,-4(fp)
 4019600:	00c101b4 	movhi	r3,1030
 4019604:	18e0e704 	addi	r3,r3,-31844
 4019608:	1085883a 	add	r2,r2,r2
 401960c:	1085883a 	add	r2,r2,r2
 4019610:	10c5883a 	add	r2,r2,r3
 4019614:	10800017 	ldw	r2,0(r2)
 4019618:	10801503 	ldbu	r2,84(r2)
 401961c:	11403fcc 	andi	r5,r2,255
 4019620:	01010174 	movhi	r4,1029
 4019624:	2124af04 	addi	r4,r4,-27972
 4019628:	4016d140 	call	4016d14 <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
 401962c:	e0bfff07 	ldb	r2,-4(fp)
 4019630:	00c101b4 	movhi	r3,1030
 4019634:	18e0e704 	addi	r3,r3,-31844
 4019638:	1085883a 	add	r2,r2,r2
 401963c:	1085883a 	add	r2,r2,r2
 4019640:	10c5883a 	add	r2,r2,r3
 4019644:	10800017 	ldw	r2,0(r2)
 4019648:	10801543 	ldbu	r2,85(r2)
 401964c:	11403fcc 	andi	r5,r2,255
 4019650:	01010174 	movhi	r4,1029
 4019654:	2124b604 	addi	r4,r4,-27944
 4019658:	4016d140 	call	4016d14 <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
 401965c:	e0bfff07 	ldb	r2,-4(fp)
 4019660:	00c101b4 	movhi	r3,1030
 4019664:	18e0e704 	addi	r3,r3,-31844
 4019668:	1085883a 	add	r2,r2,r2
 401966c:	1085883a 	add	r2,r2,r2
 4019670:	10c5883a 	add	r2,r2,r3
 4019674:	10800017 	ldw	r2,0(r2)
 4019678:	10801583 	ldbu	r2,86(r2)
 401967c:	11403fcc 	andi	r5,r2,255
 4019680:	01010174 	movhi	r4,1029
 4019684:	2124bd04 	addi	r4,r4,-27916
 4019688:	4016d140 	call	4016d14 <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
 401968c:	e0bfff07 	ldb	r2,-4(fp)
 4019690:	00c101b4 	movhi	r3,1030
 4019694:	18e0e704 	addi	r3,r3,-31844
 4019698:	1085883a 	add	r2,r2,r2
 401969c:	1085883a 	add	r2,r2,r2
 40196a0:	10c5883a 	add	r2,r2,r3
 40196a4:	10800017 	ldw	r2,0(r2)
 40196a8:	108015c3 	ldbu	r2,87(r2)
 40196ac:	11403fcc 	andi	r5,r2,255
 40196b0:	01010174 	movhi	r4,1029
 40196b4:	2124c404 	addi	r4,r4,-27888
 40196b8:	4016d140 	call	4016d14 <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
 40196bc:	e0bfff07 	ldb	r2,-4(fp)
 40196c0:	00c101b4 	movhi	r3,1030
 40196c4:	18e0e704 	addi	r3,r3,-31844
 40196c8:	1085883a 	add	r2,r2,r2
 40196cc:	1085883a 	add	r2,r2,r2
 40196d0:	10c5883a 	add	r2,r2,r3
 40196d4:	10800017 	ldw	r2,0(r2)
 40196d8:	10801603 	ldbu	r2,88(r2)
 40196dc:	11403fcc 	andi	r5,r2,255
 40196e0:	01010174 	movhi	r4,1029
 40196e4:	2124ca04 	addi	r4,r4,-27864
 40196e8:	4016d140 	call	4016d14 <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 40196ec:	e0bfff07 	ldb	r2,-4(fp)
 40196f0:	00c101b4 	movhi	r3,1030
 40196f4:	18e0e704 	addi	r3,r3,-31844
 40196f8:	1085883a 	add	r2,r2,r2
 40196fc:	1085883a 	add	r2,r2,r2
 4019700:	10c5883a 	add	r2,r2,r3
 4019704:	10800017 	ldw	r2,0(r2)
 4019708:	10801643 	ldbu	r2,89(r2)
 401970c:	11403fcc 	andi	r5,r2,255
 4019710:	01010174 	movhi	r4,1029
 4019714:	2124d004 	addi	r4,r4,-27840
 4019718:	4016d140 	call	4016d14 <no_printf>
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    
    for(i = 0; i < phy_profile_count; i++)
 401971c:	e0bfff03 	ldbu	r2,-4(fp)
 4019720:	10800044 	addi	r2,r2,1
 4019724:	e0bfff05 	stb	r2,-4(fp)
 4019728:	e0bfff07 	ldb	r2,-4(fp)
 401972c:	d0e7fd03 	ldbu	r3,-24588(gp)
 4019730:	18c03fcc 	andi	r3,r3,255
 4019734:	10ff9616 	blt	r2,r3,4019590 <alt_tse_phy_print_profile+0x2c>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
 4019738:	d0a7fd03 	ldbu	r2,-24588(gp)
 401973c:	10803fcc 	andi	r2,r2,255
}
 4019740:	e037883a 	mov	sp,fp
 4019744:	dfc00117 	ldw	ra,4(sp)
 4019748:	df000017 	ldw	fp,0(sp)
 401974c:	dec00204 	addi	sp,sp,8
 4019750:	f800283a 	ret

04019754 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 4019754:	defff104 	addi	sp,sp,-60
 4019758:	dfc00e15 	stw	ra,56(sp)
 401975c:	df000d15 	stw	fp,52(sp)
 4019760:	df000d04 	addi	fp,sp,52
    
	alt_8 i;
	alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
 4019764:	e03ff515 	stw	zero,-44(fp)
    alt_tse_mac_info *pmac_info = 0;
 4019768:	e03ff415 	stw	zero,-48(fp)
    alt_tse_system_info *psys = 0;
 401976c:	e03ff315 	stw	zero,-52(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
 4019770:	d027fd45 	stb	zero,-24587(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 4019774:	e03ff645 	stb	zero,-39(fp)
 4019778:	0001ae06 	br	4019e34 <alt_tse_mac_group_init+0x6e0>
        psys = &tse_mac_device[i];
 401977c:	e0bff647 	ldb	r2,-39(fp)
 4019780:	10801224 	muli	r2,r2,72
 4019784:	1007883a 	mov	r3,r2
 4019788:	00810174 	movhi	r2,1029
 401978c:	10839f04 	addi	r2,r2,3708
 4019790:	1885883a 	add	r2,r3,r2
 4019794:	e0bff315 	stw	r2,-52(fp)

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
 4019798:	e0bff317 	ldw	r2,-52(fp)
 401979c:	10800517 	ldw	r2,20(r2)
 40197a0:	1005003a 	cmpeq	r2,r2,zero
 40197a4:	1001a01e 	bne	r2,zero,4019e28 <alt_tse_mac_group_init+0x6d4>
 40197a8:	e0bff317 	ldw	r2,-52(fp)
 40197ac:	10800617 	ldw	r2,24(r2)
 40197b0:	1005003a 	cmpeq	r2,r2,zero
 40197b4:	10019c1e 	bne	r2,zero,4019e28 <alt_tse_mac_group_init+0x6d4>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 40197b8:	d0a7fd43 	ldbu	r2,-24587(gp)
 40197bc:	11403fcc 	andi	r5,r2,255
 40197c0:	e0bff317 	ldw	r2,-52(fp)
 40197c4:	10800017 	ldw	r2,0(r2)
 40197c8:	100d883a 	mov	r6,r2
 40197cc:	01010174 	movhi	r4,1029
 40197d0:	2124d604 	addi	r4,r4,-27816
 40197d4:	400207c0 	call	400207c <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 40197d8:	01000504 	movi	r4,20
 40197dc:	4045ff80 	call	4045ff8 <malloc>
 40197e0:	e0bff515 	stw	r2,-44(fp)
            if(!pmac_group) {
 40197e4:	e0bff517 	ldw	r2,-44(fp)
 40197e8:	1004c03a 	cmpne	r2,r2,zero
 40197ec:	1000081e 	bne	r2,zero,4019810 <alt_tse_mac_group_init+0xbc>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 40197f0:	d0a7fd43 	ldbu	r2,-24587(gp)
 40197f4:	11403fcc 	andi	r5,r2,255
 40197f8:	01010174 	movhi	r4,1029
 40197fc:	2124e204 	addi	r4,r4,-27768
 4019800:	400207c0 	call	400207c <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 4019804:	00bfffc4 	movi	r2,-1
 4019808:	e0bfff15 	stw	r2,-4(fp)
 401980c:	00018e06 	br	4019e48 <alt_tse_mac_group_init+0x6f4>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 4019810:	e0bff317 	ldw	r2,-52(fp)
 4019814:	108002c3 	ldbu	r2,11(r2)
 4019818:	10803fcc 	andi	r2,r2,255
 401981c:	1005003a 	cmpeq	r2,r2,zero
 4019820:	1000111e 	bne	r2,zero,4019868 <alt_tse_mac_group_init+0x114>
                pmac_group->channel = psys->tse_num_of_channel;
 4019824:	e0bff317 	ldw	r2,-52(fp)
 4019828:	10c00303 	ldbu	r3,12(r2)
 401982c:	e0bff517 	ldw	r2,-44(fp)
 4019830:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
 4019834:	01010174 	movhi	r4,1029
 4019838:	2124f004 	addi	r4,r4,-27712
 401983c:	4016d140 	call	4016d14 <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
 4019840:	e0bff517 	ldw	r2,-44(fp)
 4019844:	10800003 	ldbu	r2,0(r2)
 4019848:	11403fcc 	andi	r5,r2,255
 401984c:	01010174 	movhi	r4,1029
 4019850:	2124fb04 	addi	r4,r4,-27668
 4019854:	4016d140 	call	4016d14 <no_printf>
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 4019858:	01010174 	movhi	r4,1029
 401985c:	21250604 	addi	r4,r4,-27624
 4019860:	4016d140 	call	4016d14 <no_printf>
 4019864:	00001f06 	br	40198e4 <alt_tse_mac_group_init+0x190>
            }
            else if(psys->tse_mdio_shared) {
 4019868:	e0bff317 	ldw	r2,-52(fp)
 401986c:	10800343 	ldbu	r2,13(r2)
 4019870:	10803fcc 	andi	r2,r2,255
 4019874:	1005003a 	cmpeq	r2,r2,zero
 4019878:	1000111e 	bne	r2,zero,40198c0 <alt_tse_mac_group_init+0x16c>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 401987c:	e0bff317 	ldw	r2,-52(fp)
 4019880:	10c00383 	ldbu	r3,14(r2)
 4019884:	e0bff517 	ldw	r2,-44(fp)
 4019888:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 401988c:	01010174 	movhi	r4,1029
 4019890:	21251104 	addi	r4,r4,-27580
 4019894:	4016d140 	call	4016d14 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 4019898:	01010174 	movhi	r4,1029
 401989c:	21250604 	addi	r4,r4,-27624
 40198a0:	4016d140 	call	4016d14 <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
 40198a4:	e0bff517 	ldw	r2,-44(fp)
 40198a8:	10800003 	ldbu	r2,0(r2)
 40198ac:	11403fcc 	andi	r5,r2,255
 40198b0:	01010174 	movhi	r4,1029
 40198b4:	21251c04 	addi	r4,r4,-27536
 40198b8:	4016d140 	call	4016d14 <no_printf>
 40198bc:	00000906 	br	40198e4 <alt_tse_mac_group_init+0x190>
            }
            else {
                pmac_group->channel = 1;
 40198c0:	e0fff517 	ldw	r3,-44(fp)
 40198c4:	00800044 	movi	r2,1
 40198c8:	18800005 	stb	r2,0(r3)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 40198cc:	01010174 	movhi	r4,1029
 40198d0:	21251104 	addi	r4,r4,-27580
 40198d4:	4016d140 	call	4016d14 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
 40198d8:	01010174 	movhi	r4,1029
 40198dc:	21252704 	addi	r4,r4,-27492
 40198e0:	4016d140 	call	4016d14 <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 40198e4:	e03ff605 	stb	zero,-40(fp)
 40198e8:	00013806 	br	4019dcc <alt_tse_mac_group_init+0x678>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 40198ec:	01000404 	movi	r4,16
 40198f0:	4045ff80 	call	4045ff8 <malloc>
 40198f4:	e0bff415 	stw	r2,-48(fp)
                if(!pmac_info) {
 40198f8:	e0bff417 	ldw	r2,-48(fp)
 40198fc:	1004c03a 	cmpne	r2,r2,zero
 4019900:	1000091e 	bne	r2,zero,4019928 <alt_tse_mac_group_init+0x1d4>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 4019904:	d0a7fd43 	ldbu	r2,-24587(gp)
 4019908:	11403fcc 	andi	r5,r2,255
 401990c:	e1bff607 	ldb	r6,-40(fp)
 4019910:	01010174 	movhi	r4,1029
 4019914:	21253204 	addi	r4,r4,-27448
 4019918:	400207c0 	call	400207c <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
 401991c:	00ffffc4 	movi	r3,-1
 4019920:	e0ffff15 	stw	r3,-4(fp)
 4019924:	00014806 	br	4019e48 <alt_tse_mac_group_init+0x6f4>
                }
                
                pmac_info->pmac_group = pmac_group;
 4019928:	e0fff417 	ldw	r3,-48(fp)
 401992c:	e0bff517 	ldw	r2,-44(fp)
 4019930:	18800315 	stw	r2,12(r3)
                
                pmac_info->pphy_info = 0;
 4019934:	e0bff417 	ldw	r2,-48(fp)
 4019938:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 401993c:	e0fff647 	ldb	r3,-39(fp)
 4019940:	e0bff607 	ldb	r2,-40(fp)
 4019944:	1885883a 	add	r2,r3,r2
 4019948:	10801224 	muli	r2,r2,72
 401994c:	1007883a 	mov	r3,r2
 4019950:	00810174 	movhi	r2,1029
 4019954:	10839f04 	addi	r2,r2,3708
 4019958:	1887883a 	add	r3,r3,r2
 401995c:	e0bff417 	ldw	r2,-48(fp)
 4019960:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
 4019964:	e0bff417 	ldw	r2,-48(fp)
 4019968:	10800217 	ldw	r2,8(r2)
 401996c:	10800517 	ldw	r2,20(r2)
 4019970:	1005003a 	cmpeq	r2,r2,zero
 4019974:	1000051e 	bne	r2,zero,401998c <alt_tse_mac_group_init+0x238>
 4019978:	e0bff417 	ldw	r2,-48(fp)
 401997c:	10800217 	ldw	r2,8(r2)
 4019980:	10800617 	ldw	r2,24(r2)
 4019984:	1004c03a 	cmpne	r2,r2,zero
 4019988:	1000091e 	bne	r2,zero,40199b0 <alt_tse_mac_group_init+0x25c>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 401998c:	e0bff647 	ldb	r2,-39(fp)
 4019990:	e0fff607 	ldb	r3,-40(fp)
 4019994:	10cb883a 	add	r5,r2,r3
 4019998:	01010174 	movhi	r4,1029
 401999c:	21254404 	addi	r4,r4,-27376
 40199a0:	400207c0 	call	400207c <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 40199a4:	00bfffc4 	movi	r2,-1
 40199a8:	e0bfff15 	stw	r2,-4(fp)
 40199ac:	00012606 	br	4019e48 <alt_tse_mac_group_init+0x6f4>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 40199b0:	e0bff417 	ldw	r2,-48(fp)
 40199b4:	10800217 	ldw	r2,8(r2)
 40199b8:	10800243 	ldbu	r2,9(r2)
 40199bc:	10803fcc 	andi	r2,r2,255
 40199c0:	1005003a 	cmpeq	r2,r2,zero
 40199c4:	10000e1e 	bne	r2,zero,4019a00 <alt_tse_mac_group_init+0x2ac>
                    if(pmac_info->psys_info->tse_maclite_gige) {
 40199c8:	e0bff417 	ldw	r2,-48(fp)
 40199cc:	10800217 	ldw	r2,8(r2)
 40199d0:	10800283 	ldbu	r2,10(r2)
 40199d4:	10803fcc 	andi	r2,r2,255
 40199d8:	1005003a 	cmpeq	r2,r2,zero
 40199dc:	1000041e 	bne	r2,zero,40199f0 <alt_tse_mac_group_init+0x29c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 40199e0:	e0fff417 	ldw	r3,-48(fp)
 40199e4:	00800084 	movi	r2,2
 40199e8:	18800005 	stb	r2,0(r3)
 40199ec:	00000606 	br	4019a08 <alt_tse_mac_group_init+0x2b4>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 40199f0:	e0fff417 	ldw	r3,-48(fp)
 40199f4:	00800044 	movi	r2,1
 40199f8:	18800005 	stb	r2,0(r3)
 40199fc:	00000206 	br	4019a08 <alt_tse_mac_group_init+0x2b4>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 4019a00:	e0bff417 	ldw	r2,-48(fp)
 4019a04:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 4019a08:	e0bff417 	ldw	r2,-48(fp)
 4019a0c:	10800217 	ldw	r2,8(r2)
 4019a10:	10800343 	ldbu	r2,13(r2)
 4019a14:	10803fcc 	andi	r2,r2,255
 4019a18:	1005003a 	cmpeq	r2,r2,zero
 4019a1c:	10006d1e 	bne	r2,zero,4019bd4 <alt_tse_mac_group_init+0x480>
 4019a20:	e0bff417 	ldw	r2,-48(fp)
 4019a24:	10800217 	ldw	r2,8(r2)
 4019a28:	108002c3 	ldbu	r2,11(r2)
 4019a2c:	10803fcc 	andi	r2,r2,255
 4019a30:	1004c03a 	cmpne	r2,r2,zero
 4019a34:	1000671e 	bne	r2,zero,4019bd4 <alt_tse_mac_group_init+0x480>
                	tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 4019a38:	e17ff607 	ldb	r5,-40(fp)
 4019a3c:	e0bff417 	ldw	r2,-48(fp)
 4019a40:	10800217 	ldw	r2,8(r2)
 4019a44:	10800017 	ldw	r2,0(r2)
 4019a48:	100d883a 	mov	r6,r2
 4019a4c:	01010174 	movhi	r4,1029
 4019a50:	21255304 	addi	r4,r4,-27316
 4019a54:	4016d140 	call	4016d14 <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
 4019a58:	e17ff607 	ldb	r5,-40(fp)
 4019a5c:	e0fff647 	ldb	r3,-39(fp)
 4019a60:	e0bff607 	ldb	r2,-40(fp)
 4019a64:	188d883a 	add	r6,r3,r2
 4019a68:	01010174 	movhi	r4,1029
 4019a6c:	21255f04 	addi	r4,r4,-27268
 4019a70:	4016d140 	call	4016d14 <no_printf>
                    
                	switch(pmac_info->mac_type) {
 4019a74:	e0bff417 	ldw	r2,-48(fp)
 4019a78:	10800003 	ldbu	r2,0(r2)
 4019a7c:	10803fcc 	andi	r2,r2,255
 4019a80:	e0bffe15 	stw	r2,-8(fp)
 4019a84:	e0fffe17 	ldw	r3,-8(fp)
 4019a88:	18800060 	cmpeqi	r2,r3,1
 4019a8c:	10000e1e 	bne	r2,zero,4019ac8 <alt_tse_mac_group_init+0x374>
 4019a90:	e0fffe17 	ldw	r3,-8(fp)
 4019a94:	188000a0 	cmpeqi	r2,r3,2
 4019a98:	1000041e 	bne	r2,zero,4019aac <alt_tse_mac_group_init+0x358>
 4019a9c:	e0fffe17 	ldw	r3,-8(fp)
 4019aa0:	1805003a 	cmpeq	r2,r3,zero
 4019aa4:	10000f1e 	bne	r2,zero,4019ae4 <alt_tse_mac_group_init+0x390>
 4019aa8:	00001506 	br	4019b00 <alt_tse_mac_group_init+0x3ac>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
 4019aac:	e17ff607 	ldb	r5,-40(fp)
 4019ab0:	01010174 	movhi	r4,1029
 4019ab4:	21256e04 	addi	r4,r4,-27208
 4019ab8:	01810174 	movhi	r6,1029
 4019abc:	31a57904 	addi	r6,r6,-27164
 4019ac0:	4016d140 	call	4016d14 <no_printf>
                            break;
 4019ac4:	00001406 	br	4019b18 <alt_tse_mac_group_init+0x3c4>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
 4019ac8:	e17ff607 	ldb	r5,-40(fp)
 4019acc:	01010174 	movhi	r4,1029
 4019ad0:	21256e04 	addi	r4,r4,-27208
 4019ad4:	01810174 	movhi	r6,1029
 4019ad8:	31a57e04 	addi	r6,r6,-27144
 4019adc:	4016d140 	call	4016d14 <no_printf>
                            break;
 4019ae0:	00000d06 	br	4019b18 <alt_tse_mac_group_init+0x3c4>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
 4019ae4:	e17ff607 	ldb	r5,-40(fp)
 4019ae8:	01010174 	movhi	r4,1029
 4019aec:	21256e04 	addi	r4,r4,-27208
 4019af0:	01810174 	movhi	r6,1029
 4019af4:	31a58404 	addi	r6,r6,-27120
 4019af8:	4016d140 	call	4016d14 <no_printf>
                            break;
 4019afc:	00000606 	br	4019b18 <alt_tse_mac_group_init+0x3c4>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
 4019b00:	e17ff607 	ldb	r5,-40(fp)
 4019b04:	01010174 	movhi	r4,1029
 4019b08:	21256e04 	addi	r4,r4,-27208
 4019b0c:	01810174 	movhi	r6,1029
 4019b10:	31a38504 	addi	r6,r6,-29164
 4019b14:	4016d140 	call	4016d14 <no_printf>
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 4019b18:	e0bff417 	ldw	r2,-48(fp)
 4019b1c:	10800217 	ldw	r2,8(r2)
 4019b20:	108003c3 	ldbu	r2,15(r2)
 4019b24:	10803fcc 	andi	r2,r2,255
 4019b28:	1005003a 	cmpeq	r2,r2,zero
 4019b2c:	10009c1e 	bne	r2,zero,4019da0 <alt_tse_mac_group_init+0x64c>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 4019b30:	e0bff607 	ldb	r2,-40(fp)
 4019b34:	e0bffd15 	stw	r2,-12(fp)
 4019b38:	e0bff417 	ldw	r2,-48(fp)
 4019b3c:	10800217 	ldw	r2,8(r2)
 4019b40:	108003c3 	ldbu	r2,15(r2)
 4019b44:	10803fcc 	andi	r2,r2,255
 4019b48:	1005003a 	cmpeq	r2,r2,zero
 4019b4c:	1000041e 	bne	r2,zero,4019b60 <alt_tse_mac_group_init+0x40c>
 4019b50:	00c10174 	movhi	r3,1029
 4019b54:	18e58b04 	addi	r3,r3,-27092
 4019b58:	e0fffc15 	stw	r3,-16(fp)
 4019b5c:	00000306 	br	4019b6c <alt_tse_mac_group_init+0x418>
 4019b60:	00810174 	movhi	r2,1029
 4019b64:	10a58c04 	addi	r2,r2,-27088
 4019b68:	e0bffc15 	stw	r2,-16(fp)
 4019b6c:	01010174 	movhi	r4,1029
 4019b70:	21258d04 	addi	r4,r4,-27084
 4019b74:	e17ffd17 	ldw	r5,-12(fp)
 4019b78:	e1bffc17 	ldw	r6,-16(fp)
 4019b7c:	4016d140 	call	4016d14 <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
 4019b80:	e0fff607 	ldb	r3,-40(fp)
 4019b84:	e0fffb15 	stw	r3,-20(fp)
 4019b88:	e0bff417 	ldw	r2,-48(fp)
 4019b8c:	10800217 	ldw	r2,8(r2)
 4019b90:	10800403 	ldbu	r2,16(r2)
 4019b94:	10803fcc 	andi	r2,r2,255
 4019b98:	1005003a 	cmpeq	r2,r2,zero
 4019b9c:	1000041e 	bne	r2,zero,4019bb0 <alt_tse_mac_group_init+0x45c>
 4019ba0:	00810174 	movhi	r2,1029
 4019ba4:	10a58b04 	addi	r2,r2,-27092
 4019ba8:	e0bffa15 	stw	r2,-24(fp)
 4019bac:	00000306 	br	4019bbc <alt_tse_mac_group_init+0x468>
 4019bb0:	00c10174 	movhi	r3,1029
 4019bb4:	18e58c04 	addi	r3,r3,-27088
 4019bb8:	e0fffa15 	stw	r3,-24(fp)
 4019bbc:	01010174 	movhi	r4,1029
 4019bc0:	21259804 	addi	r4,r4,-27040
 4019bc4:	e17ffb17 	ldw	r5,-20(fp)
 4019bc8:	e1bffa17 	ldw	r6,-24(fp)
 4019bcc:	4016d140 	call	4016d14 <no_printf>
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 4019bd0:	00007306 	br	4019da0 <alt_tse_mac_group_init+0x64c>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
                    }
                }
                else {
                	/* display only once for all MAC, except shared MDIO MACs */
	                if(j == 0) {
 4019bd4:	e0bff607 	ldb	r2,-40(fp)
 4019bd8:	1004c03a 	cmpne	r2,r2,zero
 4019bdc:	10004d1e 	bne	r2,zero,4019d14 <alt_tse_mac_group_init+0x5c0>
	                    switch(pmac_info->mac_type) {
 4019be0:	e0bff417 	ldw	r2,-48(fp)
 4019be4:	10800003 	ldbu	r2,0(r2)
 4019be8:	10803fcc 	andi	r2,r2,255
 4019bec:	e0bff915 	stw	r2,-28(fp)
 4019bf0:	e0fff917 	ldw	r3,-28(fp)
 4019bf4:	18800060 	cmpeqi	r2,r3,1
 4019bf8:	10000d1e 	bne	r2,zero,4019c30 <alt_tse_mac_group_init+0x4dc>
 4019bfc:	e0fff917 	ldw	r3,-28(fp)
 4019c00:	188000a0 	cmpeqi	r2,r3,2
 4019c04:	1000041e 	bne	r2,zero,4019c18 <alt_tse_mac_group_init+0x4c4>
 4019c08:	e0fff917 	ldw	r3,-28(fp)
 4019c0c:	1805003a 	cmpeq	r2,r3,zero
 4019c10:	10000d1e 	bne	r2,zero,4019c48 <alt_tse_mac_group_init+0x4f4>
 4019c14:	00001206 	br	4019c60 <alt_tse_mac_group_init+0x50c>
	                        case ALTERA_TSE_MACLITE_1000:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
 4019c18:	01010174 	movhi	r4,1029
 4019c1c:	2125a304 	addi	r4,r4,-26996
 4019c20:	01410174 	movhi	r5,1029
 4019c24:	29657904 	addi	r5,r5,-27164
 4019c28:	4016d140 	call	4016d14 <no_printf>
	                            break;
 4019c2c:	00001106 	br	4019c74 <alt_tse_mac_group_init+0x520>
	                        case ALTERA_TSE_MACLITE_10_100:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
 4019c30:	01010174 	movhi	r4,1029
 4019c34:	2125a304 	addi	r4,r4,-26996
 4019c38:	01410174 	movhi	r5,1029
 4019c3c:	29657e04 	addi	r5,r5,-27144
 4019c40:	4016d140 	call	4016d14 <no_printf>
	                            break;
 4019c44:	00000b06 	br	4019c74 <alt_tse_mac_group_init+0x520>
	                        case ALTERA_TSE_FULL_MAC:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
 4019c48:	01010174 	movhi	r4,1029
 4019c4c:	2125a304 	addi	r4,r4,-26996
 4019c50:	01410174 	movhi	r5,1029
 4019c54:	29658404 	addi	r5,r5,-27120
 4019c58:	4016d140 	call	4016d14 <no_printf>
	                            break;
 4019c5c:	00000506 	br	4019c74 <alt_tse_mac_group_init+0x520>
	                        default :
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
 4019c60:	01010174 	movhi	r4,1029
 4019c64:	2125a304 	addi	r4,r4,-26996
 4019c68:	01410174 	movhi	r5,1029
 4019c6c:	29638504 	addi	r5,r5,-29164
 4019c70:	4016d140 	call	4016d14 <no_printf>
	                    }
	                    
	                    if(pmac_info->psys_info->tse_pcs_ena) {
 4019c74:	e0bff417 	ldw	r2,-48(fp)
 4019c78:	10800217 	ldw	r2,8(r2)
 4019c7c:	108003c3 	ldbu	r2,15(r2)
 4019c80:	10803fcc 	andi	r2,r2,255
 4019c84:	1005003a 	cmpeq	r2,r2,zero
 4019c88:	1000221e 	bne	r2,zero,4019d14 <alt_tse_mac_group_init+0x5c0>
	                        tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 4019c8c:	e0bff417 	ldw	r2,-48(fp)
 4019c90:	10800217 	ldw	r2,8(r2)
 4019c94:	108003c3 	ldbu	r2,15(r2)
 4019c98:	10803fcc 	andi	r2,r2,255
 4019c9c:	1005003a 	cmpeq	r2,r2,zero
 4019ca0:	1000041e 	bne	r2,zero,4019cb4 <alt_tse_mac_group_init+0x560>
 4019ca4:	00810174 	movhi	r2,1029
 4019ca8:	10a58b04 	addi	r2,r2,-27092
 4019cac:	e0bff815 	stw	r2,-32(fp)
 4019cb0:	00000306 	br	4019cc0 <alt_tse_mac_group_init+0x56c>
 4019cb4:	00c10174 	movhi	r3,1029
 4019cb8:	18e58c04 	addi	r3,r3,-27088
 4019cbc:	e0fff815 	stw	r3,-32(fp)
 4019cc0:	01010174 	movhi	r4,1029
 4019cc4:	2125ae04 	addi	r4,r4,-26952
 4019cc8:	e17ff817 	ldw	r5,-32(fp)
 4019ccc:	4016d140 	call	4016d14 <no_printf>
	                        tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");	                        
 4019cd0:	e0bff417 	ldw	r2,-48(fp)
 4019cd4:	10800217 	ldw	r2,8(r2)
 4019cd8:	10800403 	ldbu	r2,16(r2)
 4019cdc:	10803fcc 	andi	r2,r2,255
 4019ce0:	1005003a 	cmpeq	r2,r2,zero
 4019ce4:	1000041e 	bne	r2,zero,4019cf8 <alt_tse_mac_group_init+0x5a4>
 4019ce8:	00810174 	movhi	r2,1029
 4019cec:	10a58b04 	addi	r2,r2,-27092
 4019cf0:	e0bff715 	stw	r2,-36(fp)
 4019cf4:	00000306 	br	4019d04 <alt_tse_mac_group_init+0x5b0>
 4019cf8:	00c10174 	movhi	r3,1029
 4019cfc:	18e58c04 	addi	r3,r3,-27088
 4019d00:	e0fff715 	stw	r3,-36(fp)
 4019d04:	01010174 	movhi	r4,1029
 4019d08:	2125b904 	addi	r4,r4,-26908
 4019d0c:	e17ff717 	ldw	r5,-36(fp)
 4019d10:	4016d140 	call	4016d14 <no_printf>
	                    }
	                }
	                
                	if(pmac_info->psys_info->tse_multichannel_mac) {
 4019d14:	e0bff417 	ldw	r2,-48(fp)
 4019d18:	10800217 	ldw	r2,8(r2)
 4019d1c:	108002c3 	ldbu	r2,11(r2)
 4019d20:	10803fcc 	andi	r2,r2,255
 4019d24:	1005003a 	cmpeq	r2,r2,zero
 4019d28:	1000101e 	bne	r2,zero,4019d6c <alt_tse_mac_group_init+0x618>
                		tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 4019d2c:	e17ff607 	ldb	r5,-40(fp)
 4019d30:	e0bff417 	ldw	r2,-48(fp)
 4019d34:	10800217 	ldw	r2,8(r2)
 4019d38:	10800017 	ldw	r2,0(r2)
 4019d3c:	100d883a 	mov	r6,r2
 4019d40:	01010174 	movhi	r4,1029
 4019d44:	2125c404 	addi	r4,r4,-26864
 4019d48:	4016d140 	call	4016d14 <no_printf>
	                    tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
 4019d4c:	e17ff607 	ldb	r5,-40(fp)
 4019d50:	e0fff647 	ldb	r3,-39(fp)
 4019d54:	e0bff607 	ldb	r2,-40(fp)
 4019d58:	188d883a 	add	r6,r3,r2
 4019d5c:	01010174 	movhi	r4,1029
 4019d60:	2125d004 	addi	r4,r4,-26816
 4019d64:	4016d140 	call	4016d14 <no_printf>
 4019d68:	00000d06 	br	4019da0 <alt_tse_mac_group_init+0x64c>
	            	}                
	                else {
	                    tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
 4019d6c:	e0bff417 	ldw	r2,-48(fp)
 4019d70:	10800217 	ldw	r2,8(r2)
 4019d74:	10800017 	ldw	r2,0(r2)
 4019d78:	100b883a 	mov	r5,r2
 4019d7c:	01010174 	movhi	r4,1029
 4019d80:	2125df04 	addi	r4,r4,-26756
 4019d84:	4016d140 	call	4016d14 <no_printf>
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
 4019d88:	e0fff647 	ldb	r3,-39(fp)
 4019d8c:	e0bff607 	ldb	r2,-40(fp)
 4019d90:	188b883a 	add	r5,r3,r2
 4019d94:	01010174 	movhi	r4,1029
 4019d98:	2125eb04 	addi	r4,r4,-26708
 4019d9c:	4016d140 	call	4016d14 <no_printf>
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 4019da0:	e0bff607 	ldb	r2,-40(fp)
 4019da4:	e0fff517 	ldw	r3,-44(fp)
 4019da8:	1085883a 	add	r2,r2,r2
 4019dac:	1085883a 	add	r2,r2,r2
 4019db0:	10c5883a 	add	r2,r2,r3
 4019db4:	10c00104 	addi	r3,r2,4
 4019db8:	e0bff417 	ldw	r2,-48(fp)
 4019dbc:	18800015 	stw	r2,0(r3)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 4019dc0:	e0bff603 	ldbu	r2,-40(fp)
 4019dc4:	10800044 	addi	r2,r2,1
 4019dc8:	e0bff605 	stb	r2,-40(fp)
 4019dcc:	e0fff607 	ldb	r3,-40(fp)
 4019dd0:	e0bff517 	ldw	r2,-44(fp)
 4019dd4:	10800003 	ldbu	r2,0(r2)
 4019dd8:	10803fcc 	andi	r2,r2,255
 4019ddc:	18bec316 	blt	r3,r2,40198ec <alt_tse_mac_group_init+0x198>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 4019de0:	d0a7fd43 	ldbu	r2,-24587(gp)
 4019de4:	10803fcc 	andi	r2,r2,255
 4019de8:	00c101b4 	movhi	r3,1030
 4019dec:	18e0e304 	addi	r3,r3,-31860
 4019df0:	1085883a 	add	r2,r2,r2
 4019df4:	1085883a 	add	r2,r2,r2
 4019df8:	10c7883a 	add	r3,r2,r3
 4019dfc:	e0bff517 	ldw	r2,-44(fp)
 4019e00:	18800015 	stw	r2,0(r3)
            
            mac_group_count++;
 4019e04:	d0a7fd43 	ldbu	r2,-24587(gp)
 4019e08:	10800044 	addi	r2,r2,1
 4019e0c:	d0a7fd45 	stb	r2,-24587(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 4019e10:	e0bff517 	ldw	r2,-44(fp)
 4019e14:	10c00003 	ldbu	r3,0(r2)
 4019e18:	e0bff643 	ldbu	r2,-39(fp)
 4019e1c:	1885883a 	add	r2,r3,r2
 4019e20:	10bfffc4 	addi	r2,r2,-1
 4019e24:	e0bff645 	stb	r2,-39(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 4019e28:	e0bff643 	ldbu	r2,-39(fp)
 4019e2c:	10800044 	addi	r2,r2,1
 4019e30:	e0bff645 	stb	r2,-39(fp)
 4019e34:	e0bff647 	ldb	r2,-39(fp)
 4019e38:	d0e02a03 	ldbu	r3,-32600(gp)
 4019e3c:	18c03fcc 	andi	r3,r3,255
 4019e40:	10fe4e16 	blt	r2,r3,401977c <alt_tse_mac_group_init+0x28>
            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
 4019e44:	e03fff15 	stw	zero,-4(fp)
 4019e48:	e0bfff17 	ldw	r2,-4(fp)
}
 4019e4c:	e037883a 	mov	sp,fp
 4019e50:	dfc00117 	ldw	ra,4(sp)
 4019e54:	df000017 	ldw	fp,0(sp)
 4019e58:	dec00204 	addi	sp,sp,8
 4019e5c:	f800283a 	ret

04019e60 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 4019e60:	deffec04 	addi	sp,sp,-80
 4019e64:	dfc01315 	stw	ra,76(sp)
 4019e68:	df001215 	stw	fp,72(sp)
 4019e6c:	df001204 	addi	fp,sp,72
 4019e70:	e13ffe15 	stw	r4,-8(fp)
    
	alt_32 phyid; 
	alt_32 phyid2 = 0;
 4019e74:	e03ffc15 	stw	zero,-16(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
 4019e78:	e03ff615 	stw	zero,-40(fp)
    
    alt_8 phy_info_count = 0;
 4019e7c:	e03ff505 	stb	zero,-44(fp)
    
    alt_tse_phy_info *pphy = 0;
 4019e80:	e03ff415 	stw	zero,-48(fp)
    alt_tse_mac_info *pmac_info = 0;
 4019e84:	e03ff315 	stw	zero,-52(fp)
    alt_tse_system_info *psys = 0;
 4019e88:	e03ff215 	stw	zero,-56(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 4019e8c:	e0bffe17 	ldw	r2,-8(fp)
 4019e90:	10800117 	ldw	r2,4(r2)
 4019e94:	10800217 	ldw	r2,8(r2)
 4019e98:	10800017 	ldw	r2,0(r2)
 4019e9c:	e0bff115 	stw	r2,-60(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 4019ea0:	e0bff117 	ldw	r2,-60(fp)
 4019ea4:	10801004 	addi	r2,r2,64
 4019ea8:	10800037 	ldwio	r2,0(r2)
 4019eac:	e0bff015 	stw	r2,-64(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 4019eb0:	e13ffe17 	ldw	r4,-8(fp)
 4019eb4:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 4019eb8:	e0bfef05 	stb	r2,-68(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 4019ebc:	e03ffb05 	stb	zero,-20(fp)
 4019ec0:	0000c806 	br	401a1e4 <alt_tse_mac_get_phy+0x384>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 4019ec4:	e0bff117 	ldw	r2,-60(fp)
 4019ec8:	10801004 	addi	r2,r2,64
 4019ecc:	e0fffb03 	ldbu	r3,-20(fp)
 4019ed0:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 4019ed4:	e0bff117 	ldw	r2,-60(fp)
 4019ed8:	1080a204 	addi	r2,r2,648
 4019edc:	10800037 	ldwio	r2,0(r2)
 4019ee0:	e0bffd15 	stw	r2,-12(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 4019ee4:	e0bff117 	ldw	r2,-60(fp)
 4019ee8:	1080a304 	addi	r2,r2,652
 4019eec:	10800037 	ldwio	r2,0(r2)
 4019ef0:	e0bffc15 	stw	r2,-16(fp)
        
        /* PHY found */
        if (phyid != phyid2)
 4019ef4:	e0fffd17 	ldw	r3,-12(fp)
 4019ef8:	e0bffc17 	ldw	r2,-16(fp)
 4019efc:	1880b626 	beq	r3,r2,401a1d8 <alt_tse_mac_get_phy+0x378>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 4019f00:	01000704 	movi	r4,28
 4019f04:	4045ff80 	call	4045ff8 <malloc>
 4019f08:	e0bff415 	stw	r2,-48(fp)
            if(!pphy) {
 4019f0c:	e0bff417 	ldw	r2,-48(fp)
 4019f10:	1004c03a 	cmpne	r2,r2,zero
 4019f14:	1000081e 	bne	r2,zero,4019f38 <alt_tse_mac_get_phy+0xd8>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 4019f18:	e17fef07 	ldb	r5,-68(fp)
 4019f1c:	e1bff507 	ldb	r6,-44(fp)
 4019f20:	01010174 	movhi	r4,1029
 4019f24:	2125fa04 	addi	r4,r4,-26648
 4019f28:	400207c0 	call	400207c <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 4019f2c:	00bfffc4 	movi	r2,-1
 4019f30:	e0bfff15 	stw	r2,-4(fp)
 4019f34:	0000ca06 	br	401a260 <alt_tse_mac_get_phy+0x400>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 4019f38:	e0fff417 	ldw	r3,-48(fp)
 4019f3c:	e0bffb03 	ldbu	r2,-20(fp)
 4019f40:	18800005 	stb	r2,0(r3)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 4019f44:	e0bffd17 	ldw	r2,-12(fp)
 4019f48:	100691ba 	slli	r3,r2,6
 4019f4c:	e0bffc17 	ldw	r2,-16(fp)
 4019f50:	1005d2ba 	srai	r2,r2,10
 4019f54:	10800fcc 	andi	r2,r2,63
 4019f58:	1884b03a 	or	r2,r3,r2
 4019f5c:	e0bffa15 	stw	r2,-24(fp)
            model_number = (phyid2 >> 4) & 0x3f;
 4019f60:	e0bffc17 	ldw	r2,-16(fp)
 4019f64:	1005d13a 	srai	r2,r2,4
 4019f68:	10800fcc 	andi	r2,r2,63
 4019f6c:	e0bff945 	stb	r2,-27(fp)
            revision_number = phyid2 & 0x0f;
 4019f70:	e0bffc17 	ldw	r2,-16(fp)
 4019f74:	108003cc 	andi	r2,r2,15
 4019f78:	e0bff905 	stb	r2,-28(fp)
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
 4019f7c:	e03ff705 	stb	zero,-36(fp)
            for(i = 0; i < phy_profile_count; i++) {
 4019f80:	e03ff815 	stw	zero,-32(fp)
 4019f84:	00003106 	br	401a04c <alt_tse_mac_get_phy+0x1ec>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 4019f88:	e0bff817 	ldw	r2,-32(fp)
 4019f8c:	00c101b4 	movhi	r3,1030
 4019f90:	18e0e704 	addi	r3,r3,-31844
 4019f94:	1085883a 	add	r2,r2,r2
 4019f98:	1085883a 	add	r2,r2,r2
 4019f9c:	10c5883a 	add	r2,r2,r3
 4019fa0:	10800017 	ldw	r2,0(r2)
 4019fa4:	10c01417 	ldw	r3,80(r2)
 4019fa8:	e0bffa17 	ldw	r2,-24(fp)
 4019fac:	1880241e 	bne	r3,r2,401a040 <alt_tse_mac_get_phy+0x1e0>
 4019fb0:	e0bff817 	ldw	r2,-32(fp)
 4019fb4:	00c101b4 	movhi	r3,1030
 4019fb8:	18e0e704 	addi	r3,r3,-31844
 4019fbc:	1085883a 	add	r2,r2,r2
 4019fc0:	1085883a 	add	r2,r2,r2
 4019fc4:	10c5883a 	add	r2,r2,r3
 4019fc8:	10800017 	ldw	r2,0(r2)
 4019fcc:	10801503 	ldbu	r2,84(r2)
 4019fd0:	10c03fcc 	andi	r3,r2,255
 4019fd4:	e0bff943 	ldbu	r2,-27(fp)
 4019fd8:	1880191e 	bne	r3,r2,401a040 <alt_tse_mac_get_phy+0x1e0>
                {
                    pphy->pphy_profile = pphy_profiles[i];
 4019fdc:	e0bff817 	ldw	r2,-32(fp)
 4019fe0:	00c101b4 	movhi	r3,1030
 4019fe4:	18e0e704 	addi	r3,r3,-31844
 4019fe8:	1085883a 	add	r2,r2,r2
 4019fec:	1085883a 	add	r2,r2,r2
 4019ff0:	10c5883a 	add	r2,r2,r3
 4019ff4:	10c00017 	ldw	r3,0(r2)
 4019ff8:	e0bff417 	ldw	r2,-48(fp)
 4019ffc:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 401a000:	e0bff817 	ldw	r2,-32(fp)
 401a004:	00c101b4 	movhi	r3,1030
 401a008:	18e0e704 	addi	r3,r3,-31844
 401a00c:	1085883a 	add	r2,r2,r2
 401a010:	1085883a 	add	r2,r2,r2
 401a014:	10c5883a 	add	r2,r2,r3
 401a018:	10800017 	ldw	r2,0(r2)
 401a01c:	100b883a 	mov	r5,r2
 401a020:	e1bffb03 	ldbu	r6,-20(fp)
 401a024:	e1ffef07 	ldb	r7,-68(fp)
 401a028:	01010174 	movhi	r4,1029
 401a02c:	21260904 	addi	r4,r4,-26588
 401a030:	400207c0 	call	400207c <printf>
                    is_phy_in_profile = 1;
 401a034:	00800044 	movi	r2,1
 401a038:	e0bff705 	stb	r2,-36(fp)
                    break;
 401a03c:	00000706 	br	401a05c <alt_tse_mac_get_phy+0x1fc>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 401a040:	e0bff817 	ldw	r2,-32(fp)
 401a044:	10800044 	addi	r2,r2,1
 401a048:	e0bff815 	stw	r2,-32(fp)
 401a04c:	d0a7fd03 	ldbu	r2,-24588(gp)
 401a050:	10c03fcc 	andi	r3,r2,255
 401a054:	e0bff817 	ldw	r2,-32(fp)
 401a058:	10ffcb16 	blt	r2,r3,4019f88 <alt_tse_mac_get_phy+0x128>
                    is_phy_in_profile = 1;
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
 401a05c:	e0bff703 	ldbu	r2,-36(fp)
 401a060:	1004c03a 	cmpne	r2,r2,zero
 401a064:	10000d1e 	bne	r2,zero,401a09c <alt_tse_mac_get_phy+0x23c>
                pphy->pphy_profile = 0;
 401a068:	e0bff417 	ldw	r2,-48(fp)
 401a06c:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 401a070:	e17ffb03 	ldbu	r5,-20(fp)
 401a074:	e1bfef07 	ldb	r6,-68(fp)
 401a078:	01010174 	movhi	r4,1029
 401a07c:	21261904 	addi	r4,r4,-26524
 401a080:	400207c0 	call	400207c <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 401a084:	01010174 	movhi	r4,1029
 401a088:	21262a04 	addi	r4,r4,-26456
 401a08c:	40021940 	call	4002194 <puts>
                return_value++;
 401a090:	e0bff617 	ldw	r2,-40(fp)
 401a094:	10800044 	addi	r2,r2,1
 401a098:	e0bff615 	stw	r2,-40(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
 401a09c:	e17ffa17 	ldw	r5,-24(fp)
 401a0a0:	01010174 	movhi	r4,1029
 401a0a4:	21263704 	addi	r4,r4,-26404
 401a0a8:	4016d140 	call	4016d14 <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
 401a0ac:	e17ff943 	ldbu	r5,-27(fp)
 401a0b0:	01010174 	movhi	r4,1029
 401a0b4:	21264204 	addi	r4,r4,-26360
 401a0b8:	4016d140 	call	4016d14 <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
 401a0bc:	e17ff903 	ldbu	r5,-28(fp)
 401a0c0:	01010174 	movhi	r4,1029
 401a0c4:	21264d04 	addi	r4,r4,-26316
 401a0c8:	4016d140 	call	4016d14 <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 401a0cc:	e13ffe17 	ldw	r4,-8(fp)
 401a0d0:	e17ff417 	ldw	r5,-48(fp)
 401a0d4:	401a2780 	call	401a278 <alt_tse_mac_associate_phy>
 401a0d8:	1004c03a 	cmpne	r2,r2,zero
 401a0dc:	1000381e 	bne	r2,zero,401a1c0 <alt_tse_mac_get_phy+0x360>
            	
            	pmac_info = pphy->pmac_info;
 401a0e0:	e0bff417 	ldw	r2,-48(fp)
 401a0e4:	10800617 	ldw	r2,24(r2)
 401a0e8:	e0bff315 	stw	r2,-52(fp)
            	psys = pmac_info->psys_info;
 401a0ec:	e0bff317 	ldw	r2,-52(fp)
 401a0f0:	10800217 	ldw	r2,8(r2)
 401a0f4:	e0bff215 	stw	r2,-56(fp)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 401a0f8:	d8000015 	stw	zero,0(sp)
 401a0fc:	e13ff417 	ldw	r4,-48(fp)
 401a100:	000b883a 	mov	r5,zero
 401a104:	01800384 	movi	r6,14
 401a108:	01c00044 	movi	r7,1
 401a10c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
 401a110:	e13ff417 	ldw	r4,-48(fp)
 401a114:	01400044 	movi	r5,1
 401a118:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
 401a11c:	e13ff417 	ldw	r4,-48(fp)
 401a120:	01400044 	movi	r5,1
 401a124:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
 401a128:	e13ff417 	ldw	r4,-48(fp)
 401a12c:	01400044 	movi	r5,1
 401a130:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 401a134:	e13ff417 	ldw	r4,-48(fp)
 401a138:	014003f4 	movhi	r5,15
 401a13c:	29509004 	addi	r5,r5,16960
 401a140:	401a6e40 	call	401a6e4 <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
 401a144:	e0bff417 	ldw	r2,-48(fp)
 401a148:	10800517 	ldw	r2,20(r2)
 401a14c:	1005003a 	cmpeq	r2,r2,zero
 401a150:	1000101e 	bne	r2,zero,401a194 <alt_tse_mac_get_phy+0x334>
		            if(pphy->pphy_profile->phy_cfg) {
 401a154:	e0bff417 	ldw	r2,-48(fp)
 401a158:	10800517 	ldw	r2,20(r2)
 401a15c:	10801717 	ldw	r2,92(r2)
 401a160:	1005003a 	cmpeq	r2,r2,zero
 401a164:	10000b1e 	bne	r2,zero,401a194 <alt_tse_mac_get_phy+0x334>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
 401a168:	e0bff417 	ldw	r2,-48(fp)
 401a16c:	10800517 	ldw	r2,20(r2)
 401a170:	100b883a 	mov	r5,r2
 401a174:	01010174 	movhi	r4,1029
 401a178:	21265804 	addi	r4,r4,-26272
 401a17c:	4016d140 	call	4016d14 <no_printf>
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
 401a180:	e0bff417 	ldw	r2,-48(fp)
 401a184:	10800517 	ldw	r2,20(r2)
 401a188:	10801717 	ldw	r2,92(r2)
 401a18c:	e13ff117 	ldw	r4,-60(fp)
 401a190:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
 401a194:	e0bff217 	ldw	r2,-56(fp)
 401a198:	10801117 	ldw	r2,68(r2)
 401a19c:	1005003a 	cmpeq	r2,r2,zero
 401a1a0:	1000071e 	bne	r2,zero,401a1c0 <alt_tse_mac_get_phy+0x360>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
 401a1a4:	01010174 	movhi	r4,1029
 401a1a8:	21266604 	addi	r4,r4,-26216
 401a1ac:	4016d140 	call	4016d14 <no_printf>
            		psys->tse_phy_cfg(pmac_group_base);
 401a1b0:	e0bff217 	ldw	r2,-56(fp)
 401a1b4:	10801117 	ldw	r2,68(r2)
 401a1b8:	e13ff117 	ldw	r4,-60(fp)
 401a1bc:	103ee83a 	callr	r2
            	}
            }
            
            tse_dprintf(6, "\n");
 401a1c0:	01010174 	movhi	r4,1029
 401a1c4:	21267404 	addi	r4,r4,-26160
 401a1c8:	4016d140 	call	4016d14 <no_printf>
	            
            phy_info_count++;
 401a1cc:	e0bff503 	ldbu	r2,-44(fp)
 401a1d0:	10800044 	addi	r2,r2,1
 401a1d4:	e0bff505 	stb	r2,-44(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
 401a1d8:	e0bffb03 	ldbu	r2,-20(fp)
 401a1dc:	10800044 	addi	r2,r2,1
 401a1e0:	e0bffb05 	stb	r2,-20(fp)
 401a1e4:	e0bffb03 	ldbu	r2,-20(fp)
 401a1e8:	10800830 	cmpltui	r2,r2,32
 401a1ec:	103f351e 	bne	r2,zero,4019ec4 <alt_tse_mac_get_phy+0x64>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 401a1f0:	e0bffe17 	ldw	r2,-8(fp)
 401a1f4:	10800003 	ldbu	r2,0(r2)
 401a1f8:	10c03fcc 	andi	r3,r2,255
 401a1fc:	e0bff507 	ldb	r2,-44(fp)
 401a200:	18801026 	beq	r3,r2,401a244 <alt_tse_mac_get_phy+0x3e4>
        if(phy_info_count == 0) {
 401a204:	e0bff507 	ldb	r2,-44(fp)
 401a208:	1004c03a 	cmpne	r2,r2,zero
 401a20c:	1000051e 	bne	r2,zero,401a224 <alt_tse_mac_get_phy+0x3c4>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 401a210:	e17fef07 	ldb	r5,-68(fp)
 401a214:	01010174 	movhi	r4,1029
 401a218:	21267504 	addi	r4,r4,-26156
 401a21c:	400207c0 	call	400207c <printf>
 401a220:	00000806 	br	401a244 <alt_tse_mac_get_phy+0x3e4>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 401a224:	e17fef07 	ldb	r5,-68(fp)
 401a228:	e1bff507 	ldb	r6,-44(fp)
 401a22c:	e0bffe17 	ldw	r2,-8(fp)
 401a230:	10800003 	ldbu	r2,0(r2)
 401a234:	11c03fcc 	andi	r7,r2,255
 401a238:	01010174 	movhi	r4,1029
 401a23c:	21268104 	addi	r4,r4,-26108
 401a240:	400207c0 	call	400207c <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 401a244:	e0bff117 	ldw	r2,-60(fp)
 401a248:	10801004 	addi	r2,r2,64
 401a24c:	1007883a 	mov	r3,r2
 401a250:	e0bff017 	ldw	r2,-64(fp)
 401a254:	18800035 	stwio	r2,0(r3)
    
    return return_value;
 401a258:	e0bff617 	ldw	r2,-40(fp)
 401a25c:	e0bfff15 	stw	r2,-4(fp)
 401a260:	e0bfff17 	ldw	r2,-4(fp)
}
 401a264:	e037883a 	mov	sp,fp
 401a268:	dfc00117 	ldw	ra,4(sp)
 401a26c:	df000017 	ldw	fp,0(sp)
 401a270:	dec00204 	addi	sp,sp,8
 401a274:	f800283a 	ret

0401a278 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 401a278:	defff604 	addi	sp,sp,-40
 401a27c:	dfc00915 	stw	ra,36(sp)
 401a280:	df000815 	stw	fp,32(sp)
 401a284:	df000804 	addi	fp,sp,32
 401a288:	e13ffe15 	stw	r4,-8(fp)
 401a28c:	e17fff15 	stw	r5,-4(fp)
    
	alt_32 i;
	alt_32 return_value = TSE_PHY_MAP_SUCCESS;
 401a290:	e03ffc15 	stw	zero,-16(fp)
    
	alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
 401a294:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_mac_info *pmac_info = 0;
 401a298:	e03ff915 	stw	zero,-28(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 401a29c:	e03ff885 	stb	zero,-30(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401a2a0:	e13ffe17 	ldw	r4,-8(fp)
 401a2a4:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401a2a8:	e0bff845 	stb	r2,-31(fp)
    alt_8 sys_info_index = 0;
 401a2ac:	e03ff805 	stb	zero,-32(fp)
    
    is_mapped = 0;
 401a2b0:	e03ffb05 	stb	zero,-20(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
 401a2b4:	e03ffd15 	stw	zero,-12(fp)
 401a2b8:	00002906 	br	401a360 <alt_tse_mac_associate_phy+0xe8>
        pmac_info = pmac_group->pmac_info[i];
 401a2bc:	e0bffd17 	ldw	r2,-12(fp)
 401a2c0:	e0fffe17 	ldw	r3,-8(fp)
 401a2c4:	1085883a 	add	r2,r2,r2
 401a2c8:	1085883a 	add	r2,r2,r2
 401a2cc:	10c5883a 	add	r2,r2,r3
 401a2d0:	10800104 	addi	r2,r2,4
 401a2d4:	10800017 	ldw	r2,0(r2)
 401a2d8:	e0bff915 	stw	r2,-28(fp)
        psys = pmac_info->psys_info;
 401a2dc:	e0bff917 	ldw	r2,-28(fp)
 401a2e0:	10800217 	ldw	r2,8(r2)
 401a2e4:	e0bffa15 	stw	r2,-24(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 401a2e8:	e0bffa17 	ldw	r2,-24(fp)
 401a2ec:	10c01017 	ldw	r3,64(r2)
 401a2f0:	e0bfff17 	ldw	r2,-4(fp)
 401a2f4:	10800003 	ldbu	r2,0(r2)
 401a2f8:	10803fcc 	andi	r2,r2,255
 401a2fc:	1880151e 	bne	r3,r2,401a354 <alt_tse_mac_associate_phy+0xdc>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401a300:	e13ff917 	ldw	r4,-28(fp)
 401a304:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401a308:	e0bff885 	stb	r2,-30(fp)
	        sys_info_index = alt_tse_get_system_index(psys);
 401a30c:	e13ffa17 	ldw	r4,-24(fp)
 401a310:	4017e600 	call	4017e60 <alt_tse_get_system_index>
 401a314:	e0bff805 	stb	r2,-32(fp)
	        
            pmac_info->pphy_info = pphy;
 401a318:	e0fff917 	ldw	r3,-28(fp)
 401a31c:	e0bfff17 	ldw	r2,-4(fp)
 401a320:	18800115 	stw	r2,4(r3)
            pphy->pmac_info = pmac_info;
 401a324:	e0ffff17 	ldw	r3,-4(fp)
 401a328:	e0bff917 	ldw	r2,-28(fp)
 401a32c:	18800615 	stw	r2,24(r3)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 401a330:	e17ff847 	ldb	r5,-31(fp)
 401a334:	e1bff887 	ldb	r6,-30(fp)
 401a338:	e1fff807 	ldb	r7,-32(fp)
 401a33c:	01010174 	movhi	r4,1029
 401a340:	2126a004 	addi	r4,r4,-25984
 401a344:	400207c0 	call	400207c <printf>
            is_mapped = 1;
 401a348:	00800044 	movi	r2,1
 401a34c:	e0bffb05 	stb	r2,-20(fp)
            break;
 401a350:	00000806 	br	401a374 <alt_tse_mac_associate_phy+0xfc>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 401a354:	e0bffd17 	ldw	r2,-12(fp)
 401a358:	10800044 	addi	r2,r2,1
 401a35c:	e0bffd15 	stw	r2,-12(fp)
 401a360:	e0bffe17 	ldw	r2,-8(fp)
 401a364:	10800003 	ldbu	r2,0(r2)
 401a368:	10c03fcc 	andi	r3,r2,255
 401a36c:	e0bffd17 	ldw	r2,-12(fp)
 401a370:	10ffd216 	blt	r2,r3,401a2bc <alt_tse_mac_associate_phy+0x44>
            break;
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
 401a374:	e0bffb03 	ldbu	r2,-20(fp)
 401a378:	1004c03a 	cmpne	r2,r2,zero
 401a37c:	10003b1e 	bne	r2,zero,401a46c <alt_tse_mac_associate_phy+0x1f4>
        for(i = 0; i < pmac_group->channel; i++) {
 401a380:	e03ffd15 	stw	zero,-12(fp)
 401a384:	00003406 	br	401a458 <alt_tse_mac_associate_phy+0x1e0>
            pmac_info = pmac_group->pmac_info[i];
 401a388:	e0bffd17 	ldw	r2,-12(fp)
 401a38c:	e0fffe17 	ldw	r3,-8(fp)
 401a390:	1085883a 	add	r2,r2,r2
 401a394:	1085883a 	add	r2,r2,r2
 401a398:	10c5883a 	add	r2,r2,r3
 401a39c:	10800104 	addi	r2,r2,4
 401a3a0:	10800017 	ldw	r2,0(r2)
 401a3a4:	e0bff915 	stw	r2,-28(fp)
            psys = pmac_info->psys_info;
 401a3a8:	e0bff917 	ldw	r2,-28(fp)
 401a3ac:	10800217 	ldw	r2,8(r2)
 401a3b0:	e0bffa15 	stw	r2,-24(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
 401a3b4:	e0bffa17 	ldw	r2,-24(fp)
 401a3b8:	10800517 	ldw	r2,20(r2)
 401a3bc:	1005003a 	cmpeq	r2,r2,zero
 401a3c0:	1000221e 	bne	r2,zero,401a44c <alt_tse_mac_associate_phy+0x1d4>
 401a3c4:	e0bffa17 	ldw	r2,-24(fp)
 401a3c8:	10800617 	ldw	r2,24(r2)
 401a3cc:	1005003a 	cmpeq	r2,r2,zero
 401a3d0:	10001e1e 	bne	r2,zero,401a44c <alt_tse_mac_associate_phy+0x1d4>
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 401a3d4:	e0bffa17 	ldw	r2,-24(fp)
 401a3d8:	10801017 	ldw	r2,64(r2)
 401a3dc:	10bfffd8 	cmpnei	r2,r2,-1
 401a3e0:	10001a1e 	bne	r2,zero,401a44c <alt_tse_mac_associate_phy+0x1d4>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401a3e4:	e13ff917 	ldw	r4,-28(fp)
 401a3e8:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401a3ec:	e0bff885 	stb	r2,-30(fp)
                sys_info_index = alt_tse_get_system_index(psys);
 401a3f0:	e13ffa17 	ldw	r4,-24(fp)
 401a3f4:	4017e600 	call	4017e60 <alt_tse_get_system_index>
 401a3f8:	e0bff805 	stb	r2,-32(fp)
                
                pmac_info->pphy_info = pphy;
 401a3fc:	e0fff917 	ldw	r3,-28(fp)
 401a400:	e0bfff17 	ldw	r2,-4(fp)
 401a404:	18800115 	stw	r2,4(r3)
                pphy->pmac_info = pmac_info;
 401a408:	e0ffff17 	ldw	r3,-4(fp)
 401a40c:	e0bff917 	ldw	r2,-28(fp)
 401a410:	18800615 	stw	r2,24(r3)
                psys->tse_phy_mdio_address = pphy->mdio_address;
 401a414:	e0bfff17 	ldw	r2,-4(fp)
 401a418:	10800003 	ldbu	r2,0(r2)
 401a41c:	10c03fcc 	andi	r3,r2,255
 401a420:	e0bffa17 	ldw	r2,-24(fp)
 401a424:	10c01015 	stw	r3,64(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 401a428:	e17ff847 	ldb	r5,-31(fp)
 401a42c:	e1bff887 	ldb	r6,-30(fp)
 401a430:	e1fff807 	ldb	r7,-32(fp)
 401a434:	01010174 	movhi	r4,1029
 401a438:	2126b004 	addi	r4,r4,-25920
 401a43c:	400207c0 	call	400207c <printf>
                is_mapped = 1;
 401a440:	00800044 	movi	r2,1
 401a444:	e0bffb05 	stb	r2,-20(fp)
                break;
 401a448:	00000806 	br	401a46c <alt_tse_mac_associate_phy+0x1f4>
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
 401a44c:	e0bffd17 	ldw	r2,-12(fp)
 401a450:	10800044 	addi	r2,r2,1
 401a454:	e0bffd15 	stw	r2,-12(fp)
 401a458:	e0bffe17 	ldw	r2,-8(fp)
 401a45c:	10800003 	ldbu	r2,0(r2)
 401a460:	10c03fcc 	andi	r3,r2,255
 401a464:	e0bffd17 	ldw	r2,-12(fp)
 401a468:	10ffc716 	blt	r2,r3,401a388 <alt_tse_mac_associate_phy+0x110>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
 401a46c:	e0bffb03 	ldbu	r2,-20(fp)
 401a470:	1004c03a 	cmpne	r2,r2,zero
 401a474:	1000081e 	bne	r2,zero,401a498 <alt_tse_mac_associate_phy+0x220>
    	pphy->pmac_info = 0;
 401a478:	e0bfff17 	ldw	r2,-4(fp)
 401a47c:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 401a480:	e17ff847 	ldb	r5,-31(fp)
 401a484:	01010174 	movhi	r4,1029
 401a488:	2126c104 	addi	r4,r4,-25852
 401a48c:	400207c0 	call	400207c <printf>
        return_value = TSE_PHY_MAP_ERROR;
 401a490:	00bfffc4 	movi	r2,-1
 401a494:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return return_value;
 401a498:	e0bffc17 	ldw	r2,-16(fp)
}
 401a49c:	e037883a 	mov	sp,fp
 401a4a0:	dfc00117 	ldw	ra,4(sp)
 401a4a4:	df000017 	ldw	fp,0(sp)
 401a4a8:	dec00204 	addi	sp,sp,8
 401a4ac:	f800283a 	ret

0401a4b0 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 401a4b0:	defff804 	addi	sp,sp,-32
 401a4b4:	dfc00715 	stw	ra,28(sp)
 401a4b8:	df000615 	stw	fp,24(sp)
 401a4bc:	df000604 	addi	fp,sp,24
 401a4c0:	e13fff15 	stw	r4,-4(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 401a4c4:	e0bfff17 	ldw	r2,-4(fp)
 401a4c8:	10800217 	ldw	r2,8(r2)
 401a4cc:	e0bffe15 	stw	r2,-8(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 401a4d0:	e0bffe17 	ldw	r2,-8(fp)
 401a4d4:	10800017 	ldw	r2,0(r2)
 401a4d8:	e0bffd15 	stw	r2,-12(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401a4dc:	e0bfff17 	ldw	r2,-4(fp)
 401a4e0:	10800317 	ldw	r2,12(r2)
 401a4e4:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401a4e8:	e13fff17 	ldw	r4,-4(fp)
 401a4ec:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401a4f0:	e0bffb45 	stb	r2,-19(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401a4f4:	e13ffc17 	ldw	r4,-16(fp)
 401a4f8:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401a4fc:	e0bffb05 	stb	r2,-20(fp)

    if(psys->tse_pcs_ena) {
 401a500:	e0bffe17 	ldw	r2,-8(fp)
 401a504:	108003c3 	ldbu	r2,15(r2)
 401a508:	10803fcc 	andi	r2,r2,255
 401a50c:	1005003a 	cmpeq	r2,r2,zero
 401a510:	1000291e 	bne	r2,zero,401a5b8 <alt_tse_phy_cfg_pcs+0x108>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 401a514:	e17ffb07 	ldb	r5,-20(fp)
 401a518:	e1bffb47 	ldb	r6,-19(fp)
 401a51c:	01010174 	movhi	r4,1029
 401a520:	2126f204 	addi	r4,r4,-25656
 401a524:	400207c0 	call	400207c <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 401a528:	e0bffd17 	ldw	r2,-12(fp)
 401a52c:	10808004 	addi	r2,r2,512
 401a530:	10801404 	addi	r2,r2,80
 401a534:	10800037 	ldwio	r2,0(r2)
 401a538:	e0bffa15 	stw	r2,-24(fp)
        
        if(psys->tse_pcs_sgmii) {
 401a53c:	e0bffe17 	ldw	r2,-8(fp)
 401a540:	10800403 	ldbu	r2,16(r2)
 401a544:	10803fcc 	andi	r2,r2,255
 401a548:	1005003a 	cmpeq	r2,r2,zero
 401a54c:	10000d1e 	bne	r2,zero,401a584 <alt_tse_phy_cfg_pcs+0xd4>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 401a550:	e17ffb07 	ldb	r5,-20(fp)
 401a554:	e1bffb47 	ldb	r6,-19(fp)
 401a558:	01010174 	movhi	r4,1029
 401a55c:	21270004 	addi	r4,r4,-25600
 401a560:	400207c0 	call	400207c <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 401a564:	e0bffd17 	ldw	r2,-12(fp)
 401a568:	10808004 	addi	r2,r2,512
 401a56c:	11001404 	addi	r4,r2,80
 401a570:	e0bffa17 	ldw	r2,-24(fp)
 401a574:	10c000d4 	ori	r3,r2,3
 401a578:	2005883a 	mov	r2,r4
 401a57c:	10c00035 	stwio	r3,0(r2)
 401a580:	00000d06 	br	401a5b8 <alt_tse_phy_cfg_pcs+0x108>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 401a584:	e17ffb07 	ldb	r5,-20(fp)
 401a588:	e1bffb47 	ldb	r6,-19(fp)
 401a58c:	01010174 	movhi	r4,1029
 401a590:	21270c04 	addi	r4,r4,-25552
 401a594:	400207c0 	call	400207c <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 401a598:	e0bffd17 	ldw	r2,-12(fp)
 401a59c:	10808004 	addi	r2,r2,512
 401a5a0:	11001404 	addi	r4,r2,80
 401a5a4:	e0fffa17 	ldw	r3,-24(fp)
 401a5a8:	00bfff04 	movi	r2,-4
 401a5ac:	1886703a 	and	r3,r3,r2
 401a5b0:	2005883a 	mov	r2,r4
 401a5b4:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
 401a5b8:	0005883a 	mov	r2,zero
}
 401a5bc:	e037883a 	mov	sp,fp
 401a5c0:	dfc00117 	ldw	ra,4(sp)
 401a5c4:	df000017 	ldw	fp,0(sp)
 401a5c8:	dec00204 	addi	sp,sp,8
 401a5cc:	f800283a 	ret

0401a5d0 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 401a5d0:	defffb04 	addi	sp,sp,-20
 401a5d4:	dfc00415 	stw	ra,16(sp)
 401a5d8:	df000315 	stw	fp,12(sp)
 401a5dc:	df000304 	addi	fp,sp,12
	alt_8 i = 0;
 401a5e0:	e03fff45 	stb	zero,-3(fp)
	alt_8 j = 0;
 401a5e4:	e03fff05 	stb	zero,-4(fp)
    
    alt_tse_mac_group *pmac_group = 0;
 401a5e8:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
 401a5ec:	e03ffd15 	stw	zero,-12(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 401a5f0:	40192ec0 	call	40192ec <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 401a5f4:	40195640 	call	4019564 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 401a5f8:	40197540 	call	4019754 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 401a5fc:	e03fff45 	stb	zero,-3(fp)
 401a600:	00002e06 	br	401a6bc <alt_tse_phy_init+0xec>
        pmac_group = pmac_groups[i];
 401a604:	e0bfff47 	ldb	r2,-3(fp)
 401a608:	00c101b4 	movhi	r3,1030
 401a60c:	18e0e304 	addi	r3,r3,-31860
 401a610:	1085883a 	add	r2,r2,r2
 401a614:	1085883a 	add	r2,r2,r2
 401a618:	10c5883a 	add	r2,r2,r3
 401a61c:	10800017 	ldw	r2,0(r2)
 401a620:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 401a624:	e0bffe17 	ldw	r2,-8(fp)
 401a628:	10800117 	ldw	r2,4(r2)
 401a62c:	10800217 	ldw	r2,8(r2)
 401a630:	10800203 	ldbu	r2,8(r2)
 401a634:	10803fcc 	andi	r2,r2,255
 401a638:	1005003a 	cmpeq	r2,r2,zero
 401a63c:	1000031e 	bne	r2,zero,401a64c <alt_tse_phy_init+0x7c>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 401a640:	e13ffe17 	ldw	r4,-8(fp)
 401a644:	4019e600 	call	4019e60 <alt_tse_mac_get_phy>
 401a648:	00000506 	br	401a660 <alt_tse_phy_init+0x90>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 401a64c:	e17fff47 	ldb	r5,-3(fp)
 401a650:	e1bfff07 	ldb	r6,-4(fp)
 401a654:	01010174 	movhi	r4,1029
 401a658:	21271804 	addi	r4,r4,-25504
 401a65c:	400207c0 	call	400207c <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 401a660:	e03fff05 	stb	zero,-4(fp)
 401a664:	00000d06 	br	401a69c <alt_tse_phy_init+0xcc>
            pmac_info = pmac_group->pmac_info[j];
 401a668:	e0bfff07 	ldb	r2,-4(fp)
 401a66c:	e0fffe17 	ldw	r3,-8(fp)
 401a670:	1085883a 	add	r2,r2,r2
 401a674:	1085883a 	add	r2,r2,r2
 401a678:	10c5883a 	add	r2,r2,r3
 401a67c:	10800104 	addi	r2,r2,4
 401a680:	10800017 	ldw	r2,0(r2)
 401a684:	e0bffd15 	stw	r2,-12(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
 401a688:	e13ffd17 	ldw	r4,-12(fp)
 401a68c:	401a4b00 	call	401a4b0 <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 401a690:	e0bfff03 	ldbu	r2,-4(fp)
 401a694:	10800044 	addi	r2,r2,1
 401a698:	e0bfff05 	stb	r2,-4(fp)
 401a69c:	e0ffff07 	ldb	r3,-4(fp)
 401a6a0:	e0bffe17 	ldw	r2,-8(fp)
 401a6a4:	10800003 	ldbu	r2,0(r2)
 401a6a8:	10803fcc 	andi	r2,r2,255
 401a6ac:	18bfee16 	blt	r3,r2,401a668 <alt_tse_phy_init+0x98>
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 401a6b0:	e0bfff43 	ldbu	r2,-3(fp)
 401a6b4:	10800044 	addi	r2,r2,1
 401a6b8:	e0bfff45 	stb	r2,-3(fp)
 401a6bc:	e0bfff47 	ldb	r2,-3(fp)
 401a6c0:	d0e7fd43 	ldbu	r3,-24587(gp)
 401a6c4:	18c03fcc 	andi	r3,r3,255
 401a6c8:	10ffce16 	blt	r2,r3,401a604 <alt_tse_phy_init+0x34>
            
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
 401a6cc:	0005883a 	mov	r2,zero
}
 401a6d0:	e037883a 	mov	sp,fp
 401a6d4:	dfc00117 	ldw	ra,4(sp)
 401a6d8:	df000017 	ldw	fp,0(sp)
 401a6dc:	dec00204 	addi	sp,sp,8
 401a6e0:	f800283a 	ret

0401a6e4 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 401a6e4:	defff604 	addi	sp,sp,-40
 401a6e8:	dfc00915 	stw	ra,36(sp)
 401a6ec:	df000815 	stw	fp,32(sp)
 401a6f0:	df000804 	addi	fp,sp,32
 401a6f4:	e13ffd15 	stw	r4,-12(fp)
 401a6f8:	e17ffe15 	stw	r5,-8(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 401a6fc:	e0bffd17 	ldw	r2,-12(fp)
 401a700:	10800617 	ldw	r2,24(r2)
 401a704:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401a708:	e0bffc17 	ldw	r2,-16(fp)
 401a70c:	10800317 	ldw	r2,12(r2)
 401a710:	e0bffb15 	stw	r2,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401a714:	e13ffc17 	ldw	r4,-16(fp)
 401a718:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401a71c:	e0bffa85 	stb	r2,-22(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401a720:	e13ffb17 	ldw	r4,-20(fp)
 401a724:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401a728:	e0bffa45 	stb	r2,-23(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401a72c:	e13ffd17 	ldw	r4,-12(fp)
 401a730:	40190640 	call	4019064 <alt_tse_phy_rd_mdio_addr>
 401a734:	e0bffa05 	stb	r2,-24(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401a738:	e0bffd17 	ldw	r2,-12(fp)
 401a73c:	10800003 	ldbu	r2,0(r2)
 401a740:	11403fcc 	andi	r5,r2,255
 401a744:	e13ffd17 	ldw	r4,-12(fp)
 401a748:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 401a74c:	e13ffd17 	ldw	r4,-12(fp)
 401a750:	01400044 	movi	r5,1
 401a754:	018000c4 	movi	r6,3
 401a758:	01c00044 	movi	r7,1
 401a75c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401a760:	1004c03a 	cmpne	r2,r2,zero
 401a764:	10000b1e 	bne	r2,zero,401a794 <alt_tse_phy_restart_an+0xb0>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 401a768:	e17ffa47 	ldb	r5,-23(fp)
 401a76c:	e1bffa87 	ldb	r6,-22(fp)
 401a770:	01010174 	movhi	r4,1029
 401a774:	21272e04 	addi	r4,r4,-25416
 401a778:	400207c0 	call	400207c <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401a77c:	e17ffa03 	ldbu	r5,-24(fp)
 401a780:	e13ffd17 	ldw	r4,-12(fp)
 401a784:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
		
		return TSE_PHY_AN_NOT_CAPABLE;
 401a788:	00bfff84 	movi	r2,-2
 401a78c:	e0bfff15 	stw	r2,-4(fp)
 401a790:	00003a06 	br	401a87c <alt_tse_phy_restart_an+0x198>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 401a794:	00800044 	movi	r2,1
 401a798:	d8800015 	stw	r2,0(sp)
 401a79c:	e13ffd17 	ldw	r4,-12(fp)
 401a7a0:	000b883a 	mov	r5,zero
 401a7a4:	01800304 	movi	r6,12
 401a7a8:	01c00044 	movi	r7,1
 401a7ac:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 401a7b0:	00800044 	movi	r2,1
 401a7b4:	d8800015 	stw	r2,0(sp)
 401a7b8:	e13ffd17 	ldw	r4,-12(fp)
 401a7bc:	000b883a 	mov	r5,zero
 401a7c0:	01800244 	movi	r6,9
 401a7c4:	01c00044 	movi	r7,1
 401a7c8:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 401a7cc:	e17ffa47 	ldb	r5,-23(fp)
 401a7d0:	e1bffa87 	ldb	r6,-22(fp)
 401a7d4:	01010174 	movhi	r4,1029
 401a7d8:	21273e04 	addi	r4,r4,-25352
 401a7dc:	400207c0 	call	400207c <printf>
    
    alt_32 timeout = 0;
 401a7e0:	e03ff915 	stw	zero,-28(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 401a7e4:	00001506 	br	401a83c <alt_tse_phy_restart_an+0x158>
        if(timeout++ > timeout_threshold) {
 401a7e8:	e0fff917 	ldw	r3,-28(fp)
 401a7ec:	e0bffe17 	ldw	r2,-8(fp)
 401a7f0:	10c5803a 	cmpltu	r2,r2,r3
 401a7f4:	1007883a 	mov	r3,r2
 401a7f8:	e0bff917 	ldw	r2,-28(fp)
 401a7fc:	10800044 	addi	r2,r2,1
 401a800:	e0bff915 	stw	r2,-28(fp)
 401a804:	18803fcc 	andi	r2,r3,255
 401a808:	1005003a 	cmpeq	r2,r2,zero
 401a80c:	10000b1e 	bne	r2,zero,401a83c <alt_tse_phy_restart_an+0x158>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 401a810:	e17ffa47 	ldb	r5,-23(fp)
 401a814:	e1bffa87 	ldb	r6,-22(fp)
 401a818:	01010174 	movhi	r4,1029
 401a81c:	21275004 	addi	r4,r4,-25280
 401a820:	400207c0 	call	400207c <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401a824:	e17ffa03 	ldbu	r5,-24(fp)
 401a828:	e13ffd17 	ldw	r4,-12(fp)
 401a82c:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
           
		   return TSE_PHY_AN_NOT_COMPLETE;
 401a830:	00bfffc4 	movi	r2,-1
 401a834:	e0bfff15 	stw	r2,-4(fp)
 401a838:	00001006 	br	401a87c <alt_tse_phy_restart_an+0x198>
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 401a83c:	e13ffd17 	ldw	r4,-12(fp)
 401a840:	01400044 	movi	r5,1
 401a844:	01800144 	movi	r6,5
 401a848:	01c00044 	movi	r7,1
 401a84c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401a850:	1005003a 	cmpeq	r2,r2,zero
 401a854:	103fe41e 	bne	r2,zero,401a7e8 <alt_tse_phy_restart_an+0x104>
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 401a858:	e17ffa47 	ldb	r5,-23(fp)
 401a85c:	e1bffa87 	ldb	r6,-22(fp)
 401a860:	01010174 	movhi	r4,1029
 401a864:	21275c04 	addi	r4,r4,-25232
 401a868:	400207c0 	call	400207c <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401a86c:	e17ffa03 	ldbu	r5,-24(fp)
 401a870:	e13ffd17 	ldw	r4,-12(fp)
 401a874:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
 401a878:	e03fff15 	stw	zero,-4(fp)
 401a87c:	e0bfff17 	ldw	r2,-4(fp)
}
 401a880:	e037883a 	mov	sp,fp
 401a884:	dfc00117 	ldw	ra,4(sp)
 401a888:	df000017 	ldw	fp,0(sp)
 401a88c:	dec00204 	addi	sp,sp,8
 401a890:	f800283a 	ret

0401a894 <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 401a894:	defff804 	addi	sp,sp,-32
 401a898:	dfc00715 	stw	ra,28(sp)
 401a89c:	df000615 	stw	fp,24(sp)
 401a8a0:	df000604 	addi	fp,sp,24
 401a8a4:	e13ffd15 	stw	r4,-12(fp)
 401a8a8:	e17ffe15 	stw	r5,-8(fp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 401a8ac:	e0bffd17 	ldw	r2,-12(fp)
 401a8b0:	10800617 	ldw	r2,24(r2)
 401a8b4:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401a8b8:	e0bffc17 	ldw	r2,-16(fp)
 401a8bc:	10800317 	ldw	r2,12(r2)
 401a8c0:	e0bffb15 	stw	r2,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401a8c4:	e13ffc17 	ldw	r4,-16(fp)
 401a8c8:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401a8cc:	e0bffa85 	stb	r2,-22(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 401a8d0:	e13ffb17 	ldw	r4,-20(fp)
 401a8d4:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401a8d8:	e0bffa45 	stb	r2,-23(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401a8dc:	e13ffd17 	ldw	r4,-12(fp)
 401a8e0:	40190640 	call	4019064 <alt_tse_phy_rd_mdio_addr>
 401a8e4:	e0bffa05 	stb	r2,-24(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401a8e8:	e0bffd17 	ldw	r2,-12(fp)
 401a8ec:	10800003 	ldbu	r2,0(r2)
 401a8f0:	11403fcc 	andi	r5,r2,255
 401a8f4:	e13ffd17 	ldw	r4,-12(fp)
 401a8f8:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 401a8fc:	e17ffa47 	ldb	r5,-23(fp)
 401a900:	e1bffa87 	ldb	r6,-22(fp)
 401a904:	01010174 	movhi	r4,1029
 401a908:	21276804 	addi	r4,r4,-25184
 401a90c:	400207c0 	call	400207c <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 401a910:	e13ffd17 	ldw	r4,-12(fp)
 401a914:	000b883a 	mov	r5,zero
 401a918:	01800384 	movi	r6,14
 401a91c:	01c00044 	movi	r7,1
 401a920:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401a924:	1004c03a 	cmpne	r2,r2,zero
 401a928:	1000071e 	bne	r2,zero,401a948 <alt_tse_phy_check_link+0xb4>
 401a92c:	e13ffd17 	ldw	r4,-12(fp)
 401a930:	01400044 	movi	r5,1
 401a934:	01800144 	movi	r6,5
 401a938:	01c00044 	movi	r7,1
 401a93c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401a940:	1004c03a 	cmpne	r2,r2,zero
 401a944:	1000151e 	bne	r2,zero,401a99c <alt_tse_phy_check_link+0x108>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 401a948:	e17ffa47 	ldb	r5,-23(fp)
 401a94c:	e1bffa87 	ldb	r6,-22(fp)
 401a950:	01010174 	movhi	r4,1029
 401a954:	21277304 	addi	r4,r4,-25140
 401a958:	400207c0 	call	400207c <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
 401a95c:	e13ffd17 	ldw	r4,-12(fp)
 401a960:	e17ffe17 	ldw	r5,-8(fp)
 401a964:	401a6e40 	call	401a6e4 <alt_tse_phy_restart_an>
 401a968:	10bfffd8 	cmpnei	r2,r2,-1
 401a96c:	10000b1e 	bne	r2,zero,401a99c <alt_tse_phy_check_link+0x108>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 401a970:	e17ffa47 	ldb	r5,-23(fp)
 401a974:	e1bffa87 	ldb	r6,-22(fp)
 401a978:	01010174 	movhi	r4,1029
 401a97c:	21278704 	addi	r4,r4,-25060
 401a980:	400207c0 	call	400207c <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401a984:	e17ffa03 	ldbu	r5,-24(fp)
 401a988:	e13ffd17 	ldw	r4,-12(fp)
 401a98c:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
	
            return TSE_PHY_AN_NOT_COMPLETE;
 401a990:	00bfffc4 	movi	r2,-1
 401a994:	e0bfff15 	stw	r2,-4(fp)
 401a998:	00000906 	br	401a9c0 <alt_tse_phy_check_link+0x12c>
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 401a99c:	e17ffa47 	ldb	r5,-23(fp)
 401a9a0:	e1bffa87 	ldb	r6,-22(fp)
 401a9a4:	01010174 	movhi	r4,1029
 401a9a8:	21279404 	addi	r4,r4,-25008
 401a9ac:	400207c0 	call	400207c <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401a9b0:	e17ffa03 	ldbu	r5,-24(fp)
 401a9b4:	e13ffd17 	ldw	r4,-12(fp)
 401a9b8:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
 401a9bc:	e03fff15 	stw	zero,-4(fp)
 401a9c0:	e0bfff17 	ldw	r2,-4(fp)
}
 401a9c4:	e037883a 	mov	sp,fp
 401a9c8:	dfc00117 	ldw	ra,4(sp)
 401a9cc:	df000017 	ldw	fp,0(sp)
 401a9d0:	dec00204 	addi	sp,sp,8
 401a9d4:	f800283a 	ret

0401a9d8 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 401a9d8:	defff804 	addi	sp,sp,-32
 401a9dc:	dfc00715 	stw	ra,28(sp)
 401a9e0:	df000615 	stw	fp,24(sp)
 401a9e4:	df000604 	addi	fp,sp,24
 401a9e8:	e13ffe15 	stw	r4,-8(fp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
 401a9ec:	e03ffd15 	stw	zero,-12(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 401a9f0:	e0bffe17 	ldw	r2,-8(fp)
 401a9f4:	10800617 	ldw	r2,24(r2)
 401a9f8:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401a9fc:	e0bffc17 	ldw	r2,-16(fp)
 401aa00:	10800317 	ldw	r2,12(r2)
 401aa04:	e0bffb15 	stw	r2,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401aa08:	e13ffc17 	ldw	r4,-16(fp)
 401aa0c:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401aa10:	e0bffa85 	stb	r2,-22(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 401aa14:	e13ffb17 	ldw	r4,-20(fp)
 401aa18:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401aa1c:	e0bffa45 	stb	r2,-23(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401aa20:	e13ffe17 	ldw	r4,-8(fp)
 401aa24:	40190640 	call	4019064 <alt_tse_phy_rd_mdio_addr>
 401aa28:	e0bffa05 	stb	r2,-24(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401aa2c:	e0bffe17 	ldw	r2,-8(fp)
 401aa30:	10800003 	ldbu	r2,0(r2)
 401aa34:	11403fcc 	andi	r5,r2,255
 401aa38:	e13ffe17 	ldw	r4,-8(fp)
 401aa3c:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 401aa40:	e13ffe17 	ldw	r4,-8(fp)
 401aa44:	01400044 	movi	r5,1
 401aa48:	018000c4 	movi	r6,3
 401aa4c:	01c00044 	movi	r7,1
 401aa50:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401aa54:	1004c03a 	cmpne	r2,r2,zero
 401aa58:	10000b1e 	bne	r2,zero,401aa88 <alt_tse_phy_get_cap+0xb0>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 401aa5c:	e17ffa47 	ldb	r5,-23(fp)
 401aa60:	e1bffa87 	ldb	r6,-22(fp)
 401aa64:	01010174 	movhi	r4,1029
 401aa68:	21272e04 	addi	r4,r4,-25416
 401aa6c:	400207c0 	call	400207c <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401aa70:	e17ffa03 	ldbu	r5,-24(fp)
 401aa74:	e13ffe17 	ldw	r4,-8(fp)
 401aa78:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 401aa7c:	00bfff84 	movi	r2,-2
 401aa80:	e0bfff15 	stw	r2,-4(fp)
 401aa84:	00011e06 	br	401af00 <alt_tse_phy_get_cap+0x528>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 401aa88:	e13ffe17 	ldw	r4,-8(fp)
 401aa8c:	01400134 	movhi	r5,4
 401aa90:	29742404 	addi	r5,r5,-12144
 401aa94:	401a6e40 	call	401a6e4 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 401aa98:	e13ffe17 	ldw	r4,-8(fp)
 401aa9c:	01400044 	movi	r5,1
 401aaa0:	01800144 	movi	r6,5
 401aaa4:	01c00044 	movi	r7,1
 401aaa8:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401aaac:	1004c03a 	cmpne	r2,r2,zero
 401aab0:	1000021e 	bne	r2,zero,401aabc <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
 401aab4:	00bfffc4 	movi	r2,-1
 401aab8:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 401aabc:	e13ffe17 	ldw	r4,-8(fp)
 401aac0:	014003c4 	movi	r5,15
 401aac4:	018003c4 	movi	r6,15
 401aac8:	01c00044 	movi	r7,1
 401aacc:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401aad0:	1007883a 	mov	r3,r2
 401aad4:	e0bffe17 	ldw	r2,-8(fp)
 401aad8:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 401aadc:	e13ffe17 	ldw	r4,-8(fp)
 401aae0:	014003c4 	movi	r5,15
 401aae4:	01800384 	movi	r6,14
 401aae8:	01c00044 	movi	r7,1
 401aaec:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401aaf0:	1007883a 	mov	r3,r2
 401aaf4:	e0bffe17 	ldw	r2,-8(fp)
 401aaf8:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 401aafc:	e13ffe17 	ldw	r4,-8(fp)
 401ab00:	014003c4 	movi	r5,15
 401ab04:	01800344 	movi	r6,13
 401ab08:	01c00044 	movi	r7,1
 401ab0c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ab10:	1007883a 	mov	r3,r2
 401ab14:	e0bffe17 	ldw	r2,-8(fp)
 401ab18:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 401ab1c:	e13ffe17 	ldw	r4,-8(fp)
 401ab20:	014003c4 	movi	r5,15
 401ab24:	01800304 	movi	r6,12
 401ab28:	01c00044 	movi	r7,1
 401ab2c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ab30:	1007883a 	mov	r3,r2
 401ab34:	e0bffe17 	ldw	r2,-8(fp)
 401ab38:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 401ab3c:	e13ffe17 	ldw	r4,-8(fp)
 401ab40:	01400044 	movi	r5,1
 401ab44:	018003c4 	movi	r6,15
 401ab48:	01c00044 	movi	r7,1
 401ab4c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ab50:	1007883a 	mov	r3,r2
 401ab54:	e0bffe17 	ldw	r2,-8(fp)
 401ab58:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 401ab5c:	e13ffe17 	ldw	r4,-8(fp)
 401ab60:	01400044 	movi	r5,1
 401ab64:	01800384 	movi	r6,14
 401ab68:	01c00044 	movi	r7,1
 401ab6c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ab70:	1007883a 	mov	r3,r2
 401ab74:	e0bffe17 	ldw	r2,-8(fp)
 401ab78:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 401ab7c:	e13ffe17 	ldw	r4,-8(fp)
 401ab80:	01400044 	movi	r5,1
 401ab84:	01800344 	movi	r6,13
 401ab88:	01c00044 	movi	r7,1
 401ab8c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ab90:	1007883a 	mov	r3,r2
 401ab94:	e0bffe17 	ldw	r2,-8(fp)
 401ab98:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 401ab9c:	e13ffe17 	ldw	r4,-8(fp)
 401aba0:	01400044 	movi	r5,1
 401aba4:	01800284 	movi	r6,10
 401aba8:	01c00044 	movi	r7,1
 401abac:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401abb0:	1007883a 	mov	r3,r2
 401abb4:	e0bffe17 	ldw	r2,-8(fp)
 401abb8:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 401abbc:	e13ffe17 	ldw	r4,-8(fp)
 401abc0:	01400044 	movi	r5,1
 401abc4:	01800244 	movi	r6,9
 401abc8:	01c00044 	movi	r7,1
 401abcc:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401abd0:	1007883a 	mov	r3,r2
 401abd4:	e0bffe17 	ldw	r2,-8(fp)
 401abd8:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 401abdc:	e13ffe17 	ldw	r4,-8(fp)
 401abe0:	01400044 	movi	r5,1
 401abe4:	01800304 	movi	r6,12
 401abe8:	01c00044 	movi	r7,1
 401abec:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401abf0:	1007883a 	mov	r3,r2
 401abf4:	e0bffe17 	ldw	r2,-8(fp)
 401abf8:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 401abfc:	e13ffe17 	ldw	r4,-8(fp)
 401ac00:	01400044 	movi	r5,1
 401ac04:	018002c4 	movi	r6,11
 401ac08:	01c00044 	movi	r7,1
 401ac0c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ac10:	1007883a 	mov	r3,r2
 401ac14:	e0bffe17 	ldw	r2,-8(fp)
 401ac18:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 401ac1c:	e13ffe17 	ldw	r4,-8(fp)
 401ac20:	01400284 	movi	r5,10
 401ac24:	018002c4 	movi	r6,11
 401ac28:	01c00044 	movi	r7,1
 401ac2c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ac30:	1007883a 	mov	r3,r2
 401ac34:	e0bffe17 	ldw	r2,-8(fp)
 401ac38:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 401ac3c:	e13ffe17 	ldw	r4,-8(fp)
 401ac40:	01400284 	movi	r5,10
 401ac44:	01800284 	movi	r6,10
 401ac48:	01c00044 	movi	r7,1
 401ac4c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ac50:	1007883a 	mov	r3,r2
 401ac54:	e0bffe17 	ldw	r2,-8(fp)
 401ac58:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 401ac5c:	e13ffe17 	ldw	r4,-8(fp)
 401ac60:	01400144 	movi	r5,5
 401ac64:	01800244 	movi	r6,9
 401ac68:	01c00044 	movi	r7,1
 401ac6c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ac70:	1007883a 	mov	r3,r2
 401ac74:	e0bffe17 	ldw	r2,-8(fp)
 401ac78:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 401ac7c:	e13ffe17 	ldw	r4,-8(fp)
 401ac80:	01400144 	movi	r5,5
 401ac84:	01800204 	movi	r6,8
 401ac88:	01c00044 	movi	r7,1
 401ac8c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ac90:	1007883a 	mov	r3,r2
 401ac94:	e0bffe17 	ldw	r2,-8(fp)
 401ac98:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 401ac9c:	e13ffe17 	ldw	r4,-8(fp)
 401aca0:	01400144 	movi	r5,5
 401aca4:	018001c4 	movi	r6,7
 401aca8:	01c00044 	movi	r7,1
 401acac:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401acb0:	1007883a 	mov	r3,r2
 401acb4:	e0bffe17 	ldw	r2,-8(fp)
 401acb8:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 401acbc:	e13ffe17 	ldw	r4,-8(fp)
 401acc0:	01400144 	movi	r5,5
 401acc4:	01800184 	movi	r6,6
 401acc8:	01c00044 	movi	r7,1
 401accc:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401acd0:	1007883a 	mov	r3,r2
 401acd4:	e0bffe17 	ldw	r2,-8(fp)
 401acd8:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 401acdc:	e13ffe17 	ldw	r4,-8(fp)
 401ace0:	01400144 	movi	r5,5
 401ace4:	01800144 	movi	r6,5
 401ace8:	01c00044 	movi	r7,1
 401acec:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401acf0:	1007883a 	mov	r3,r2
 401acf4:	e0bffe17 	ldw	r2,-8(fp)
 401acf8:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
 401acfc:	e17ffa47 	ldb	r5,-23(fp)
 401ad00:	e1bffa87 	ldb	r6,-22(fp)
 401ad04:	01010174 	movhi	r4,1029
 401ad08:	21279f04 	addi	r4,r4,-24964
 401ad0c:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
 401ad10:	e0bffe17 	ldw	r2,-8(fp)
 401ad14:	10800043 	ldbu	r2,1(r2)
 401ad18:	11403fcc 	andi	r5,r2,255
 401ad1c:	01010174 	movhi	r4,1029
 401ad20:	2127aa04 	addi	r4,r4,-24920
 401ad24:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
 401ad28:	e0bffe17 	ldw	r2,-8(fp)
 401ad2c:	10800083 	ldbu	r2,2(r2)
 401ad30:	11403fcc 	andi	r5,r2,255
 401ad34:	01010174 	movhi	r4,1029
 401ad38:	2127b404 	addi	r4,r4,-24880
 401ad3c:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
 401ad40:	e0bffe17 	ldw	r2,-8(fp)
 401ad44:	108000c3 	ldbu	r2,3(r2)
 401ad48:	11403fcc 	andi	r5,r2,255
 401ad4c:	01010174 	movhi	r4,1029
 401ad50:	2127be04 	addi	r4,r4,-24840
 401ad54:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
 401ad58:	e0bffe17 	ldw	r2,-8(fp)
 401ad5c:	10800103 	ldbu	r2,4(r2)
 401ad60:	11403fcc 	andi	r5,r2,255
 401ad64:	01010174 	movhi	r4,1029
 401ad68:	2127c804 	addi	r4,r4,-24800
 401ad6c:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
 401ad70:	e0bffe17 	ldw	r2,-8(fp)
 401ad74:	10800143 	ldbu	r2,5(r2)
 401ad78:	11403fcc 	andi	r5,r2,255
 401ad7c:	01010174 	movhi	r4,1029
 401ad80:	2127d204 	addi	r4,r4,-24760
 401ad84:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
 401ad88:	e0bffe17 	ldw	r2,-8(fp)
 401ad8c:	10800183 	ldbu	r2,6(r2)
 401ad90:	11403fcc 	andi	r5,r2,255
 401ad94:	01010174 	movhi	r4,1029
 401ad98:	2127dc04 	addi	r4,r4,-24720
 401ad9c:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
 401ada0:	e0bffe17 	ldw	r2,-8(fp)
 401ada4:	108001c3 	ldbu	r2,7(r2)
 401ada8:	11403fcc 	andi	r5,r2,255
 401adac:	01010174 	movhi	r4,1029
 401adb0:	2127e604 	addi	r4,r4,-24680
 401adb4:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
 401adb8:	e0bffe17 	ldw	r2,-8(fp)
 401adbc:	10800203 	ldbu	r2,8(r2)
 401adc0:	11403fcc 	andi	r5,r2,255
 401adc4:	01010174 	movhi	r4,1029
 401adc8:	2127f004 	addi	r4,r4,-24640
 401adcc:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
 401add0:	e0bffe17 	ldw	r2,-8(fp)
 401add4:	10800243 	ldbu	r2,9(r2)
 401add8:	11403fcc 	andi	r5,r2,255
 401addc:	01010174 	movhi	r4,1029
 401ade0:	2127fa04 	addi	r4,r4,-24600
 401ade4:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
 401ade8:	e0bffe17 	ldw	r2,-8(fp)
 401adec:	10800283 	ldbu	r2,10(r2)
 401adf0:	11403fcc 	andi	r5,r2,255
 401adf4:	01010174 	movhi	r4,1029
 401adf8:	21280404 	addi	r4,r4,-24560
 401adfc:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
 401ae00:	e0bffe17 	ldw	r2,-8(fp)
 401ae04:	108002c3 	ldbu	r2,11(r2)
 401ae08:	11403fcc 	andi	r5,r2,255
 401ae0c:	01010174 	movhi	r4,1029
 401ae10:	21280e04 	addi	r4,r4,-24520
 401ae14:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "\n");
 401ae18:	01010174 	movhi	r4,1029
 401ae1c:	21267404 	addi	r4,r4,-26160
 401ae20:	4016d140 	call	4016d14 <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
 401ae24:	e17ffa47 	ldb	r5,-23(fp)
 401ae28:	e1bffa87 	ldb	r6,-22(fp)
 401ae2c:	01010174 	movhi	r4,1029
 401ae30:	21281804 	addi	r4,r4,-24480
 401ae34:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
 401ae38:	e0bffe17 	ldw	r2,-8(fp)
 401ae3c:	10800303 	ldbu	r2,12(r2)
 401ae40:	11403fcc 	andi	r5,r2,255
 401ae44:	01010174 	movhi	r4,1029
 401ae48:	2127be04 	addi	r4,r4,-24840
 401ae4c:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
 401ae50:	e0bffe17 	ldw	r2,-8(fp)
 401ae54:	10800343 	ldbu	r2,13(r2)
 401ae58:	11403fcc 	andi	r5,r2,255
 401ae5c:	01010174 	movhi	r4,1029
 401ae60:	2127c804 	addi	r4,r4,-24800
 401ae64:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
 401ae68:	e0bffe17 	ldw	r2,-8(fp)
 401ae6c:	10800383 	ldbu	r2,14(r2)
 401ae70:	11403fcc 	andi	r5,r2,255
 401ae74:	01010174 	movhi	r4,1029
 401ae78:	2127d204 	addi	r4,r4,-24760
 401ae7c:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
 401ae80:	e0bffe17 	ldw	r2,-8(fp)
 401ae84:	108003c3 	ldbu	r2,15(r2)
 401ae88:	11403fcc 	andi	r5,r2,255
 401ae8c:	01010174 	movhi	r4,1029
 401ae90:	21282504 	addi	r4,r4,-24428
 401ae94:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
 401ae98:	e0bffe17 	ldw	r2,-8(fp)
 401ae9c:	10800403 	ldbu	r2,16(r2)
 401aea0:	11403fcc 	andi	r5,r2,255
 401aea4:	01010174 	movhi	r4,1029
 401aea8:	21282f04 	addi	r4,r4,-24388
 401aeac:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
 401aeb0:	e0bffe17 	ldw	r2,-8(fp)
 401aeb4:	10800443 	ldbu	r2,17(r2)
 401aeb8:	11403fcc 	andi	r5,r2,255
 401aebc:	01010174 	movhi	r4,1029
 401aec0:	21283904 	addi	r4,r4,-24348
 401aec4:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
 401aec8:	e0bffe17 	ldw	r2,-8(fp)
 401aecc:	10800483 	ldbu	r2,18(r2)
 401aed0:	11403fcc 	andi	r5,r2,255
 401aed4:	01010174 	movhi	r4,1029
 401aed8:	21284304 	addi	r4,r4,-24308
 401aedc:	4016d140 	call	4016d14 <no_printf>
    tse_dprintf(6, "\n");
 401aee0:	01010174 	movhi	r4,1029
 401aee4:	21267404 	addi	r4,r4,-26160
 401aee8:	4016d140 	call	4016d14 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401aeec:	e17ffa03 	ldbu	r5,-24(fp)
 401aef0:	e13ffe17 	ldw	r4,-8(fp)
 401aef4:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
 401aef8:	e0bffd17 	ldw	r2,-12(fp)
 401aefc:	e0bfff15 	stw	r2,-4(fp)
 401af00:	e0bfff17 	ldw	r2,-4(fp)
    
}
 401af04:	e037883a 	mov	sp,fp
 401af08:	dfc00117 	ldw	ra,4(sp)
 401af0c:	df000017 	ldw	fp,0(sp)
 401af10:	dec00204 	addi	sp,sp,8
 401af14:	f800283a 	ret

0401af18 <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 401af18:	defff704 	addi	sp,sp,-36
 401af1c:	dfc00815 	stw	ra,32(sp)
 401af20:	df000715 	stw	fp,28(sp)
 401af24:	df000704 	addi	fp,sp,28
 401af28:	e13ffe15 	stw	r4,-8(fp)
 401af2c:	e17fff05 	stb	r5,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 401af30:	e0bffe17 	ldw	r2,-8(fp)
 401af34:	10800617 	ldw	r2,24(r2)
 401af38:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401af3c:	e0bffc17 	ldw	r2,-16(fp)
 401af40:	10800317 	ldw	r2,12(r2)
 401af44:	e0bffb15 	stw	r2,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401af48:	e13ffc17 	ldw	r4,-16(fp)
 401af4c:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401af50:	e0bffa85 	stb	r2,-22(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401af54:	e13ffb17 	ldw	r4,-20(fp)
 401af58:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401af5c:	e0bffa45 	stb	r2,-23(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401af60:	e13ffe17 	ldw	r4,-8(fp)
 401af64:	40190640 	call	4019064 <alt_tse_phy_rd_mdio_addr>
 401af68:	e0bffa05 	stb	r2,-24(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401af6c:	e0bffe17 	ldw	r2,-8(fp)
 401af70:	10800003 	ldbu	r2,0(r2)
 401af74:	11403fcc 	andi	r5,r2,255
 401af78:	e13ffe17 	ldw	r4,-8(fp)
 401af7c:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 401af80:	e0bfff03 	ldbu	r2,-4(fp)
 401af84:	1005003a 	cmpeq	r2,r2,zero
 401af88:	1000271e 	bne	r2,zero,401b028 <alt_tse_phy_set_adv_1000+0x110>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 401af8c:	e13ffe17 	ldw	r4,-8(fp)
 401af90:	014003c4 	movi	r5,15
 401af94:	01800344 	movi	r6,13
 401af98:	01c00044 	movi	r7,1
 401af9c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401afa0:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 401afa4:	e0bffd03 	ldbu	r2,-12(fp)
 401afa8:	d8800015 	stw	r2,0(sp)
 401afac:	e13ffe17 	ldw	r4,-8(fp)
 401afb0:	01400244 	movi	r5,9
 401afb4:	01800244 	movi	r6,9
 401afb8:	01c00044 	movi	r7,1
 401afbc:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 401afc0:	e17ffa47 	ldb	r5,-23(fp)
 401afc4:	e1bffa87 	ldb	r6,-22(fp)
 401afc8:	e1fffd03 	ldbu	r7,-12(fp)
 401afcc:	01010174 	movhi	r4,1029
 401afd0:	21284d04 	addi	r4,r4,-24268
 401afd4:	4016d140 	call	4016d14 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 401afd8:	e13ffe17 	ldw	r4,-8(fp)
 401afdc:	014003c4 	movi	r5,15
 401afe0:	01800304 	movi	r6,12
 401afe4:	01c00044 	movi	r7,1
 401afe8:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401afec:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 401aff0:	e0bffd03 	ldbu	r2,-12(fp)
 401aff4:	d8800015 	stw	r2,0(sp)
 401aff8:	e13ffe17 	ldw	r4,-8(fp)
 401affc:	01400244 	movi	r5,9
 401b000:	01800204 	movi	r6,8
 401b004:	01c00044 	movi	r7,1
 401b008:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 401b00c:	e17ffa47 	ldb	r5,-23(fp)
 401b010:	e1bffa87 	ldb	r6,-22(fp)
 401b014:	e1fffd03 	ldbu	r7,-12(fp)
 401b018:	01010174 	movhi	r4,1029
 401b01c:	21286004 	addi	r4,r4,-24192
 401b020:	4016d140 	call	4016d14 <no_printf>
 401b024:	00001806 	br	401b088 <alt_tse_phy_set_adv_1000+0x170>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 401b028:	d8000015 	stw	zero,0(sp)
 401b02c:	e13ffe17 	ldw	r4,-8(fp)
 401b030:	01400244 	movi	r5,9
 401b034:	01800244 	movi	r6,9
 401b038:	01c00044 	movi	r7,1
 401b03c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 401b040:	e17ffa47 	ldb	r5,-23(fp)
 401b044:	e1bffa87 	ldb	r6,-22(fp)
 401b048:	01010174 	movhi	r4,1029
 401b04c:	21284d04 	addi	r4,r4,-24268
 401b050:	000f883a 	mov	r7,zero
 401b054:	4016d140 	call	4016d14 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 401b058:	d8000015 	stw	zero,0(sp)
 401b05c:	e13ffe17 	ldw	r4,-8(fp)
 401b060:	01400244 	movi	r5,9
 401b064:	01800204 	movi	r6,8
 401b068:	01c00044 	movi	r7,1
 401b06c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 401b070:	e17ffa47 	ldb	r5,-23(fp)
 401b074:	e1bffa87 	ldb	r6,-22(fp)
 401b078:	01010174 	movhi	r4,1029
 401b07c:	21287304 	addi	r4,r4,-24116
 401b080:	000f883a 	mov	r7,zero
 401b084:	4016d140 	call	4016d14 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 401b088:	e17ffa03 	ldbu	r5,-24(fp)
 401b08c:	e13ffe17 	ldw	r4,-8(fp)
 401b090:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
 401b094:	0005883a 	mov	r2,zero
}
 401b098:	e037883a 	mov	sp,fp
 401b09c:	dfc00117 	ldw	ra,4(sp)
 401b0a0:	df000017 	ldw	fp,0(sp)
 401b0a4:	dec00204 	addi	sp,sp,8
 401b0a8:	f800283a 	ret

0401b0ac <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 401b0ac:	defff704 	addi	sp,sp,-36
 401b0b0:	dfc00815 	stw	ra,32(sp)
 401b0b4:	df000715 	stw	fp,28(sp)
 401b0b8:	df000704 	addi	fp,sp,28
 401b0bc:	e13ffe15 	stw	r4,-8(fp)
 401b0c0:	e17fff05 	stb	r5,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 401b0c4:	e0bffe17 	ldw	r2,-8(fp)
 401b0c8:	10800617 	ldw	r2,24(r2)
 401b0cc:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401b0d0:	e0bffc17 	ldw	r2,-16(fp)
 401b0d4:	10800317 	ldw	r2,12(r2)
 401b0d8:	e0bffb15 	stw	r2,-20(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401b0dc:	e13ffc17 	ldw	r4,-16(fp)
 401b0e0:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401b0e4:	e0bffa85 	stb	r2,-22(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401b0e8:	e13ffb17 	ldw	r4,-20(fp)
 401b0ec:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401b0f0:	e0bffa45 	stb	r2,-23(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401b0f4:	e13ffe17 	ldw	r4,-8(fp)
 401b0f8:	40190640 	call	4019064 <alt_tse_phy_rd_mdio_addr>
 401b0fc:	e0bffa05 	stb	r2,-24(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401b100:	e0bffe17 	ldw	r2,-8(fp)
 401b104:	10800003 	ldbu	r2,0(r2)
 401b108:	11403fcc 	andi	r5,r2,255
 401b10c:	e13ffe17 	ldw	r4,-8(fp)
 401b110:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 401b114:	e0bfff03 	ldbu	r2,-4(fp)
 401b118:	1005003a 	cmpeq	r2,r2,zero
 401b11c:	10003a1e 	bne	r2,zero,401b208 <alt_tse_phy_set_adv_100+0x15c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 401b120:	e13ffe17 	ldw	r4,-8(fp)
 401b124:	01400044 	movi	r5,1
 401b128:	018003c4 	movi	r6,15
 401b12c:	01c00044 	movi	r7,1
 401b130:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401b134:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 401b138:	e0bffd03 	ldbu	r2,-12(fp)
 401b13c:	d8800015 	stw	r2,0(sp)
 401b140:	e13ffe17 	ldw	r4,-8(fp)
 401b144:	01400104 	movi	r5,4
 401b148:	01800244 	movi	r6,9
 401b14c:	01c00044 	movi	r7,1
 401b150:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
 401b154:	e17ffa47 	ldb	r5,-23(fp)
 401b158:	e1bffa87 	ldb	r6,-22(fp)
 401b15c:	e1fffd03 	ldbu	r7,-12(fp)
 401b160:	01010174 	movhi	r4,1029
 401b164:	21288504 	addi	r4,r4,-24044
 401b168:	4016d140 	call	4016d14 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 401b16c:	e13ffe17 	ldw	r4,-8(fp)
 401b170:	01400044 	movi	r5,1
 401b174:	01800384 	movi	r6,14
 401b178:	01c00044 	movi	r7,1
 401b17c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401b180:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 401b184:	e0bffd03 	ldbu	r2,-12(fp)
 401b188:	d8800015 	stw	r2,0(sp)
 401b18c:	e13ffe17 	ldw	r4,-8(fp)
 401b190:	01400104 	movi	r5,4
 401b194:	01800204 	movi	r6,8
 401b198:	01c00044 	movi	r7,1
 401b19c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 401b1a0:	e17ffa47 	ldb	r5,-23(fp)
 401b1a4:	e1bffa87 	ldb	r6,-22(fp)
 401b1a8:	e1fffd03 	ldbu	r7,-12(fp)
 401b1ac:	01010174 	movhi	r4,1029
 401b1b0:	21289504 	addi	r4,r4,-23980
 401b1b4:	4016d140 	call	4016d14 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 401b1b8:	e13ffe17 	ldw	r4,-8(fp)
 401b1bc:	01400044 	movi	r5,1
 401b1c0:	01800344 	movi	r6,13
 401b1c4:	01c00044 	movi	r7,1
 401b1c8:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401b1cc:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 401b1d0:	e0bffd03 	ldbu	r2,-12(fp)
 401b1d4:	d8800015 	stw	r2,0(sp)
 401b1d8:	e13ffe17 	ldw	r4,-8(fp)
 401b1dc:	01400104 	movi	r5,4
 401b1e0:	018001c4 	movi	r6,7
 401b1e4:	01c00044 	movi	r7,1
 401b1e8:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 401b1ec:	e17ffa47 	ldb	r5,-23(fp)
 401b1f0:	e1bffa87 	ldb	r6,-22(fp)
 401b1f4:	e1fffd03 	ldbu	r7,-12(fp)
 401b1f8:	01010174 	movhi	r4,1029
 401b1fc:	2128a804 	addi	r4,r4,-23904
 401b200:	4016d140 	call	4016d14 <no_printf>
 401b204:	00002406 	br	401b298 <alt_tse_phy_set_adv_100+0x1ec>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 401b208:	d8000015 	stw	zero,0(sp)
 401b20c:	e13ffe17 	ldw	r4,-8(fp)
 401b210:	01400104 	movi	r5,4
 401b214:	01800244 	movi	r6,9
 401b218:	01c00044 	movi	r7,1
 401b21c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
 401b220:	e17ffa47 	ldb	r5,-23(fp)
 401b224:	e1bffa87 	ldb	r6,-22(fp)
 401b228:	01010174 	movhi	r4,1029
 401b22c:	21288504 	addi	r4,r4,-24044
 401b230:	000f883a 	mov	r7,zero
 401b234:	4016d140 	call	4016d14 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 401b238:	d8000015 	stw	zero,0(sp)
 401b23c:	e13ffe17 	ldw	r4,-8(fp)
 401b240:	01400104 	movi	r5,4
 401b244:	01800204 	movi	r6,8
 401b248:	01c00044 	movi	r7,1
 401b24c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 401b250:	e17ffa47 	ldb	r5,-23(fp)
 401b254:	e1bffa87 	ldb	r6,-22(fp)
 401b258:	01010174 	movhi	r4,1029
 401b25c:	21289504 	addi	r4,r4,-23980
 401b260:	000f883a 	mov	r7,zero
 401b264:	4016d140 	call	4016d14 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 401b268:	d8000015 	stw	zero,0(sp)
 401b26c:	e13ffe17 	ldw	r4,-8(fp)
 401b270:	01400104 	movi	r5,4
 401b274:	018001c4 	movi	r6,7
 401b278:	01c00044 	movi	r7,1
 401b27c:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 401b280:	e17ffa47 	ldb	r5,-23(fp)
 401b284:	e1bffa87 	ldb	r6,-22(fp)
 401b288:	01010174 	movhi	r4,1029
 401b28c:	2128a804 	addi	r4,r4,-23904
 401b290:	000f883a 	mov	r7,zero
 401b294:	4016d140 	call	4016d14 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 401b298:	e17ffa03 	ldbu	r5,-24(fp)
 401b29c:	e13ffe17 	ldw	r4,-8(fp)
 401b2a0:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 401b2a4:	0005883a 	mov	r2,zero
}
 401b2a8:	e037883a 	mov	sp,fp
 401b2ac:	dfc00117 	ldw	ra,4(sp)
 401b2b0:	df000017 	ldw	fp,0(sp)
 401b2b4:	dec00204 	addi	sp,sp,8
 401b2b8:	f800283a 	ret

0401b2bc <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 401b2bc:	defff504 	addi	sp,sp,-44
 401b2c0:	dfc00a15 	stw	ra,40(sp)
 401b2c4:	df000915 	stw	fp,36(sp)
 401b2c8:	df000904 	addi	fp,sp,36
 401b2cc:	e13ffe15 	stw	r4,-8(fp)
 401b2d0:	e17fff05 	stb	r5,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 401b2d4:	e0bffe17 	ldw	r2,-8(fp)
 401b2d8:	10800617 	ldw	r2,24(r2)
 401b2dc:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 401b2e0:	e0bffc17 	ldw	r2,-16(fp)
 401b2e4:	10800317 	ldw	r2,12(r2)
 401b2e8:	e0bffb15 	stw	r2,-20(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401b2ec:	e13ffc17 	ldw	r4,-16(fp)
 401b2f0:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401b2f4:	e0bffa15 	stw	r2,-24(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401b2f8:	e13ffb17 	ldw	r4,-20(fp)
 401b2fc:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401b300:	e0bff915 	stw	r2,-28(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 401b304:	e13ffe17 	ldw	r4,-8(fp)
 401b308:	40190640 	call	4019064 <alt_tse_phy_rd_mdio_addr>
 401b30c:	e0bff815 	stw	r2,-32(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401b310:	e0bffe17 	ldw	r2,-8(fp)
 401b314:	10800003 	ldbu	r2,0(r2)
 401b318:	11403fcc 	andi	r5,r2,255
 401b31c:	e13ffe17 	ldw	r4,-8(fp)
 401b320:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 401b324:	e0bfff03 	ldbu	r2,-4(fp)
 401b328:	1005003a 	cmpeq	r2,r2,zero
 401b32c:	1000271e 	bne	r2,zero,401b3cc <alt_tse_phy_set_adv_10+0x110>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 401b330:	e13ffe17 	ldw	r4,-8(fp)
 401b334:	01400044 	movi	r5,1
 401b338:	01800304 	movi	r6,12
 401b33c:	01c00044 	movi	r7,1
 401b340:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401b344:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 401b348:	e0bffd03 	ldbu	r2,-12(fp)
 401b34c:	d8800015 	stw	r2,0(sp)
 401b350:	e13ffe17 	ldw	r4,-8(fp)
 401b354:	01400104 	movi	r5,4
 401b358:	01800184 	movi	r6,6
 401b35c:	01c00044 	movi	r7,1
 401b360:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 401b364:	e1fffd03 	ldbu	r7,-12(fp)
 401b368:	01010174 	movhi	r4,1029
 401b36c:	2128bb04 	addi	r4,r4,-23828
 401b370:	e17ff917 	ldw	r5,-28(fp)
 401b374:	e1bffa17 	ldw	r6,-24(fp)
 401b378:	4016d140 	call	4016d14 <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 401b37c:	e13ffe17 	ldw	r4,-8(fp)
 401b380:	01400044 	movi	r5,1
 401b384:	018002c4 	movi	r6,11
 401b388:	01c00044 	movi	r7,1
 401b38c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401b390:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 401b394:	e0bffd03 	ldbu	r2,-12(fp)
 401b398:	d8800015 	stw	r2,0(sp)
 401b39c:	e13ffe17 	ldw	r4,-8(fp)
 401b3a0:	01400104 	movi	r5,4
 401b3a4:	01800144 	movi	r6,5
 401b3a8:	01c00044 	movi	r7,1
 401b3ac:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 401b3b0:	e1fffd03 	ldbu	r7,-12(fp)
 401b3b4:	01010174 	movhi	r4,1029
 401b3b8:	2128ce04 	addi	r4,r4,-23752
 401b3bc:	e17ff917 	ldw	r5,-28(fp)
 401b3c0:	e1bffa17 	ldw	r6,-24(fp)
 401b3c4:	4016d140 	call	4016d14 <no_printf>
 401b3c8:	00001806 	br	401b42c <alt_tse_phy_set_adv_10+0x170>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 401b3cc:	d8000015 	stw	zero,0(sp)
 401b3d0:	e13ffe17 	ldw	r4,-8(fp)
 401b3d4:	01400104 	movi	r5,4
 401b3d8:	01800184 	movi	r6,6
 401b3dc:	01c00044 	movi	r7,1
 401b3e0:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 401b3e4:	01010174 	movhi	r4,1029
 401b3e8:	2128bb04 	addi	r4,r4,-23828
 401b3ec:	e17ff917 	ldw	r5,-28(fp)
 401b3f0:	e1bffa17 	ldw	r6,-24(fp)
 401b3f4:	000f883a 	mov	r7,zero
 401b3f8:	4016d140 	call	4016d14 <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 401b3fc:	d8000015 	stw	zero,0(sp)
 401b400:	e13ffe17 	ldw	r4,-8(fp)
 401b404:	01400104 	movi	r5,4
 401b408:	01800144 	movi	r6,5
 401b40c:	01c00044 	movi	r7,1
 401b410:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 401b414:	01010174 	movhi	r4,1029
 401b418:	2128ce04 	addi	r4,r4,-23752
 401b41c:	e17ff917 	ldw	r5,-28(fp)
 401b420:	e1bffa17 	ldw	r6,-24(fp)
 401b424:	000f883a 	mov	r7,zero
 401b428:	4016d140 	call	4016d14 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 401b42c:	e0bff817 	ldw	r2,-32(fp)
 401b430:	11403fcc 	andi	r5,r2,255
 401b434:	e13ffe17 	ldw	r4,-8(fp)
 401b438:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 401b43c:	0005883a 	mov	r2,zero
}
 401b440:	e037883a 	mov	sp,fp
 401b444:	dfc00117 	ldw	ra,4(sp)
 401b448:	df000017 	ldw	fp,0(sp)
 401b44c:	dec00204 	addi	sp,sp,8
 401b450:	f800283a 	ret

0401b454 <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 401b454:	defff604 	addi	sp,sp,-40
 401b458:	dfc00915 	stw	ra,36(sp)
 401b45c:	df000815 	stw	fp,32(sp)
 401b460:	df000804 	addi	fp,sp,32
 401b464:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 i;
	alt_u8 common_1000 = 1;
 401b468:	00800044 	movi	r2,1
 401b46c:	e0bffd85 	stb	r2,-10(fp)
	alt_u8 common_100 = 1;
 401b470:	00800044 	movi	r2,1
 401b474:	e0bffd45 	stb	r2,-11(fp)
	alt_u8 common_10 = 1;
 401b478:	00800044 	movi	r2,1
 401b47c:	e0bffd05 	stb	r2,-12(fp)
    
	alt_32 common_speed;
    
	alt_u8 none_an_complete = 1;
 401b480:	00800044 	movi	r2,1
 401b484:	e0bffb05 	stb	r2,-20(fp)
    
    alt_tse_mac_info *pmac_info = 0;
 401b488:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_phy_info *pphy = 0;
 401b48c:	e03ff915 	stw	zero,-28(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401b490:	e13fff17 	ldw	r4,-4(fp)
 401b494:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401b498:	e0bff805 	stb	r2,-32(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 401b49c:	e03ffe15 	stw	zero,-8(fp)
 401b4a0:	00001d06 	br	401b518 <alt_tse_phy_get_common_speed+0xc4>
        pmac_info = pmac_group->pmac_info[i];
 401b4a4:	e0bffe17 	ldw	r2,-8(fp)
 401b4a8:	e0ffff17 	ldw	r3,-4(fp)
 401b4ac:	1085883a 	add	r2,r2,r2
 401b4b0:	1085883a 	add	r2,r2,r2
 401b4b4:	10c5883a 	add	r2,r2,r3
 401b4b8:	10800104 	addi	r2,r2,4
 401b4bc:	10800017 	ldw	r2,0(r2)
 401b4c0:	e0bffa15 	stw	r2,-24(fp)
        pphy = pmac_info->pphy_info;
 401b4c4:	e0bffa17 	ldw	r2,-24(fp)
 401b4c8:	10800117 	ldw	r2,4(r2)
 401b4cc:	e0bff915 	stw	r2,-28(fp)
        
        /* run only if PHY connected */
        if(pphy) {
 401b4d0:	e0bff917 	ldw	r2,-28(fp)
 401b4d4:	1005003a 	cmpeq	r2,r2,zero
 401b4d8:	1000091e 	bne	r2,zero,401b500 <alt_tse_phy_get_common_speed+0xac>
            alt_tse_phy_set_adv_1000(pphy, 1);
 401b4dc:	e13ff917 	ldw	r4,-28(fp)
 401b4e0:	01400044 	movi	r5,1
 401b4e4:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 401b4e8:	e13ff917 	ldw	r4,-28(fp)
 401b4ec:	01400044 	movi	r5,1
 401b4f0:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 401b4f4:	e13ff917 	ldw	r4,-28(fp)
 401b4f8:	01400044 	movi	r5,1
 401b4fc:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
 401b500:	01010174 	movhi	r4,1029
 401b504:	21267404 	addi	r4,r4,-26160
 401b508:	4016d140 	call	4016d14 <no_printf>
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 401b50c:	e0bffe17 	ldw	r2,-8(fp)
 401b510:	10800044 	addi	r2,r2,1
 401b514:	e0bffe15 	stw	r2,-8(fp)
 401b518:	e0bfff17 	ldw	r2,-4(fp)
 401b51c:	10800003 	ldbu	r2,0(r2)
 401b520:	10c03fcc 	andi	r3,r2,255
 401b524:	e0bffe17 	ldw	r2,-8(fp)
 401b528:	10ffde16 	blt	r2,r3,401b4a4 <alt_tse_phy_get_common_speed+0x50>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 401b52c:	e03ffe15 	stw	zero,-8(fp)
 401b530:	00005406 	br	401b684 <alt_tse_phy_get_common_speed+0x230>

        pmac_info = pmac_group->pmac_info[i];
 401b534:	e0bffe17 	ldw	r2,-8(fp)
 401b538:	e0ffff17 	ldw	r3,-4(fp)
 401b53c:	1085883a 	add	r2,r2,r2
 401b540:	1085883a 	add	r2,r2,r2
 401b544:	10c5883a 	add	r2,r2,r3
 401b548:	10800104 	addi	r2,r2,4
 401b54c:	10800017 	ldw	r2,0(r2)
 401b550:	e0bffa15 	stw	r2,-24(fp)
        pphy = pmac_info->pphy_info;
 401b554:	e0bffa17 	ldw	r2,-24(fp)
 401b558:	10800117 	ldw	r2,4(r2)
 401b55c:	e0bff915 	stw	r2,-28(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 401b560:	e0bff917 	ldw	r2,-28(fp)
 401b564:	1005003a 	cmpeq	r2,r2,zero
 401b568:	1000431e 	bne	r2,zero,401b678 <alt_tse_phy_get_common_speed+0x224>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 401b56c:	e13ff917 	ldw	r4,-28(fp)
 401b570:	401a9d80 	call	401a9d8 <alt_tse_phy_get_cap>
 401b574:	1004c03a 	cmpne	r2,r2,zero
 401b578:	10003f1e 	bne	r2,zero,401b678 <alt_tse_phy_get_common_speed+0x224>
            continue;
        }
        
        none_an_complete = 0;
 401b57c:	e03ffb05 	stb	zero,-20(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 401b580:	e0bffa17 	ldw	r2,-24(fp)
 401b584:	10800003 	ldbu	r2,0(r2)
 401b588:	10803fcc 	andi	r2,r2,255
 401b58c:	10800058 	cmpnei	r2,r2,1
 401b590:	1000021e 	bne	r2,zero,401b59c <alt_tse_phy_get_common_speed+0x148>
            common_1000 = 0;
 401b594:	e03ffd85 	stb	zero,-10(fp)
 401b598:	00000706 	br	401b5b8 <alt_tse_phy_get_common_speed+0x164>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 401b59c:	e0bffa17 	ldw	r2,-24(fp)
 401b5a0:	10800003 	ldbu	r2,0(r2)
 401b5a4:	10803fcc 	andi	r2,r2,255
 401b5a8:	10800098 	cmpnei	r2,r2,2
 401b5ac:	1000021e 	bne	r2,zero,401b5b8 <alt_tse_phy_get_common_speed+0x164>
            common_100 = 0;
 401b5b0:	e03ffd45 	stb	zero,-11(fp)
            common_10 = 0;            
 401b5b4:	e03ffd05 	stb	zero,-12(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 401b5b8:	e0bff917 	ldw	r2,-28(fp)
 401b5bc:	10c000c3 	ldbu	r3,3(r2)
 401b5c0:	e0bff917 	ldw	r2,-28(fp)
 401b5c4:	10800303 	ldbu	r2,12(r2)
 401b5c8:	1884703a 	and	r2,r3,r2
 401b5cc:	1007883a 	mov	r3,r2
 401b5d0:	e0bffd83 	ldbu	r2,-10(fp)
 401b5d4:	10c4703a 	and	r2,r2,r3
 401b5d8:	e0bffd85 	stb	r2,-10(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 401b5dc:	e0bff917 	ldw	r2,-28(fp)
 401b5e0:	10c00183 	ldbu	r3,6(r2)
 401b5e4:	e0bff917 	ldw	r2,-28(fp)
 401b5e8:	108003c3 	ldbu	r2,15(r2)
 401b5ec:	1884703a 	and	r2,r3,r2
 401b5f0:	1009883a 	mov	r4,r2
 401b5f4:	e0bff917 	ldw	r2,-28(fp)
 401b5f8:	10c001c3 	ldbu	r3,7(r2)
 401b5fc:	e0bff917 	ldw	r2,-28(fp)
 401b600:	10800403 	ldbu	r2,16(r2)
 401b604:	1884703a 	and	r2,r3,r2
 401b608:	2084b03a 	or	r2,r4,r2
 401b60c:	1009883a 	mov	r4,r2
 401b610:	e0bff917 	ldw	r2,-28(fp)
 401b614:	10c00143 	ldbu	r3,5(r2)
 401b618:	e0bff917 	ldw	r2,-28(fp)
 401b61c:	10800383 	ldbu	r2,14(r2)
 401b620:	1884703a 	and	r2,r3,r2
 401b624:	2084b03a 	or	r2,r4,r2
 401b628:	1007883a 	mov	r3,r2
 401b62c:	e0bffd43 	ldbu	r2,-11(fp)
 401b630:	10c4703a 	and	r2,r2,r3
 401b634:	e0bffd45 	stb	r2,-11(fp)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 401b638:	e0bff917 	ldw	r2,-28(fp)
 401b63c:	10c00283 	ldbu	r3,10(r2)
 401b640:	e0bff917 	ldw	r2,-28(fp)
 401b644:	10800443 	ldbu	r2,17(r2)
 401b648:	1884703a 	and	r2,r3,r2
 401b64c:	1009883a 	mov	r4,r2
 401b650:	e0bff917 	ldw	r2,-28(fp)
 401b654:	10c002c3 	ldbu	r3,11(r2)
 401b658:	e0bff917 	ldw	r2,-28(fp)
 401b65c:	10800483 	ldbu	r2,18(r2)
 401b660:	1884703a 	and	r2,r3,r2
 401b664:	2084b03a 	or	r2,r4,r2
 401b668:	1007883a 	mov	r3,r2
 401b66c:	e0bffd03 	ldbu	r2,-12(fp)
 401b670:	10c4703a 	and	r2,r2,r3
 401b674:	e0bffd05 	stb	r2,-12(fp)
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 401b678:	e0bffe17 	ldw	r2,-8(fp)
 401b67c:	10800044 	addi	r2,r2,1
 401b680:	e0bffe15 	stw	r2,-8(fp)
 401b684:	e0bfff17 	ldw	r2,-4(fp)
 401b688:	10800003 	ldbu	r2,0(r2)
 401b68c:	10c03fcc 	andi	r3,r2,255
 401b690:	e0bffe17 	ldw	r2,-8(fp)
 401b694:	10ffa716 	blt	r2,r3,401b534 <alt_tse_phy_get_common_speed+0xe0>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 401b698:	e0bffb03 	ldbu	r2,-20(fp)
 401b69c:	10800058 	cmpnei	r2,r2,1
 401b6a0:	1000071e 	bne	r2,zero,401b6c0 <alt_tse_phy_get_common_speed+0x26c>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 401b6a4:	00bfffc4 	movi	r2,-1
 401b6a8:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 401b6ac:	e17ff807 	ldb	r5,-32(fp)
 401b6b0:	01010174 	movhi	r4,1029
 401b6b4:	2128e104 	addi	r4,r4,-23676
 401b6b8:	400207c0 	call	400207c <printf>
 401b6bc:	00002606 	br	401b758 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_1000) {
 401b6c0:	e0bffd83 	ldbu	r2,-10(fp)
 401b6c4:	1005003a 	cmpeq	r2,r2,zero
 401b6c8:	1000081e 	bne	r2,zero,401b6ec <alt_tse_phy_get_common_speed+0x298>
        common_speed = TSE_PHY_SPEED_1000;
 401b6cc:	00800084 	movi	r2,2
 401b6d0:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 401b6d4:	e17ff807 	ldb	r5,-32(fp)
 401b6d8:	01010174 	movhi	r4,1029
 401b6dc:	2128f304 	addi	r4,r4,-23604
 401b6e0:	0180fa04 	movi	r6,1000
 401b6e4:	400207c0 	call	400207c <printf>
 401b6e8:	00001b06 	br	401b758 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_100) {
 401b6ec:	e0bffd43 	ldbu	r2,-11(fp)
 401b6f0:	1005003a 	cmpeq	r2,r2,zero
 401b6f4:	1000081e 	bne	r2,zero,401b718 <alt_tse_phy_get_common_speed+0x2c4>
        common_speed = TSE_PHY_SPEED_100;
 401b6f8:	00800044 	movi	r2,1
 401b6fc:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 401b700:	e17ff807 	ldb	r5,-32(fp)
 401b704:	01010174 	movhi	r4,1029
 401b708:	2128f304 	addi	r4,r4,-23604
 401b70c:	01801904 	movi	r6,100
 401b710:	400207c0 	call	400207c <printf>
 401b714:	00001006 	br	401b758 <alt_tse_phy_get_common_speed+0x304>
    }
    else if(common_10) {
 401b718:	e0bffd03 	ldbu	r2,-12(fp)
 401b71c:	1005003a 	cmpeq	r2,r2,zero
 401b720:	1000071e 	bne	r2,zero,401b740 <alt_tse_phy_get_common_speed+0x2ec>
        common_speed = TSE_PHY_SPEED_10;
 401b724:	e03ffc15 	stw	zero,-16(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 401b728:	e17ff807 	ldb	r5,-32(fp)
 401b72c:	01010174 	movhi	r4,1029
 401b730:	2128f304 	addi	r4,r4,-23604
 401b734:	01800284 	movi	r6,10
 401b738:	400207c0 	call	400207c <printf>
 401b73c:	00000606 	br	401b758 <alt_tse_phy_get_common_speed+0x304>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 401b740:	00bfffc4 	movi	r2,-1
 401b744:	e0bffc15 	stw	r2,-16(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 401b748:	e17ff807 	ldb	r5,-32(fp)
 401b74c:	01010174 	movhi	r4,1029
 401b750:	21290004 	addi	r4,r4,-23552
 401b754:	400207c0 	call	400207c <printf>

    return common_speed;
 401b758:	e0bffc17 	ldw	r2,-16(fp)
}
 401b75c:	e037883a 	mov	sp,fp
 401b760:	dfc00117 	ldw	ra,4(sp)
 401b764:	df000017 	ldw	fp,0(sp)
 401b768:	dec00204 	addi	sp,sp,8
 401b76c:	f800283a 	ret

0401b770 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 401b770:	deffec04 	addi	sp,sp,-80
 401b774:	dfc01315 	stw	ra,76(sp)
 401b778:	df001215 	stw	fp,72(sp)
 401b77c:	dc401115 	stw	r17,68(sp)
 401b780:	dc001015 	stw	r16,64(sp)
 401b784:	df001004 	addi	fp,sp,64
 401b788:	e13ff915 	stw	r4,-28(fp)
 401b78c:	e17ffa15 	stw	r5,-24(fp)
	alt_u8 speed;
	alt_u8 duplex;
    
	alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
 401b790:	e03ff615 	stw	zero,-40(fp)
    alt_tse_mac_info *pmac_info = 0;
 401b794:	e03ff515 	stw	zero,-44(fp)
    alt_tse_system_info *psys = 0;
 401b798:	e03ff415 	stw	zero,-48(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 401b79c:	e03ff345 	stb	zero,-51(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 401b7a0:	e13ff917 	ldw	r4,-28(fp)
 401b7a4:	4017edc0 	call	4017edc <alt_tse_get_mac_group_index>
 401b7a8:	e0bff305 	stb	r2,-52(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 401b7ac:	e0bff917 	ldw	r2,-28(fp)
 401b7b0:	10800117 	ldw	r2,4(r2)
 401b7b4:	10800217 	ldw	r2,8(r2)
 401b7b8:	10800017 	ldw	r2,0(r2)
 401b7bc:	e0bff215 	stw	r2,-56(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 401b7c0:	e0bff217 	ldw	r2,-56(fp)
 401b7c4:	10801004 	addi	r2,r2,64
 401b7c8:	10800037 	ldwio	r2,0(r2)
 401b7cc:	e0bff115 	stw	r2,-60(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 401b7d0:	e0bffa17 	ldw	r2,-24(fp)
 401b7d4:	1004803a 	cmplt	r2,r2,zero
 401b7d8:	1000031e 	bne	r2,zero,401b7e8 <alt_tse_phy_set_common_speed+0x78>
 401b7dc:	e0bffa17 	ldw	r2,-24(fp)
 401b7e0:	108000d0 	cmplti	r2,r2,3
 401b7e4:	10000d1e 	bne	r2,zero,401b81c <alt_tse_phy_set_common_speed+0xac>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 401b7e8:	e17ff307 	ldb	r5,-52(fp)
 401b7ec:	01010174 	movhi	r4,1029
 401b7f0:	21290d04 	addi	r4,r4,-23500
 401b7f4:	e1bffa17 	ldw	r6,-24(fp)
 401b7f8:	400207c0 	call	400207c <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 401b7fc:	e0bff217 	ldw	r2,-56(fp)
 401b800:	10801004 	addi	r2,r2,64
 401b804:	1007883a 	mov	r3,r2
 401b808:	e0bff117 	ldw	r2,-60(fp)
 401b80c:	18800035 	stwio	r2,0(r3)
        return TSE_PHY_SPEED_NO_COMMON;
 401b810:	00bfffc4 	movi	r2,-1
 401b814:	e0bfff15 	stw	r2,-4(fp)
 401b818:	00010606 	br	401bc34 <alt_tse_phy_set_common_speed+0x4c4>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 401b81c:	e03ff815 	stw	zero,-32(fp)
 401b820:	0000dd06 	br	401bb98 <alt_tse_phy_set_common_speed+0x428>
        pmac_info = pmac_group->pmac_info[i];
 401b824:	e0bff817 	ldw	r2,-32(fp)
 401b828:	e0fff917 	ldw	r3,-28(fp)
 401b82c:	1085883a 	add	r2,r2,r2
 401b830:	1085883a 	add	r2,r2,r2
 401b834:	10c5883a 	add	r2,r2,r3
 401b838:	10800104 	addi	r2,r2,4
 401b83c:	10800017 	ldw	r2,0(r2)
 401b840:	e0bff515 	stw	r2,-44(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 401b844:	e13ff517 	ldw	r4,-44(fp)
 401b848:	4017f5c0 	call	4017f5c <alt_tse_get_mac_info_index>
 401b84c:	e0bff345 	stb	r2,-51(fp)

        pphy = pmac_info->pphy_info;
 401b850:	e0bff517 	ldw	r2,-44(fp)
 401b854:	10800117 	ldw	r2,4(r2)
 401b858:	e0bff615 	stw	r2,-40(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 401b85c:	e0bff617 	ldw	r2,-40(fp)
 401b860:	1005003a 	cmpeq	r2,r2,zero
 401b864:	1000c91e 	bne	r2,zero,401bb8c <alt_tse_phy_set_common_speed+0x41c>
            continue;
        }
        
        psys = pmac_info->psys_info; 
 401b868:	e0bff517 	ldw	r2,-44(fp)
 401b86c:	10800217 	ldw	r2,8(r2)
 401b870:	e0bff415 	stw	r2,-48(fp)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 401b874:	e0bff617 	ldw	r2,-40(fp)
 401b878:	10800003 	ldbu	r2,0(r2)
 401b87c:	11403fcc 	andi	r5,r2,255
 401b880:	e13ff617 	ldw	r4,-40(fp)
 401b884:	40190ac0 	call	40190ac <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 401b888:	e0bff617 	ldw	r2,-40(fp)
 401b88c:	108000c3 	ldbu	r2,3(r2)
 401b890:	10803fcc 	andi	r2,r2,255
 401b894:	1004c03a 	cmpne	r2,r2,zero
 401b898:	10000f1e 	bne	r2,zero,401b8d8 <alt_tse_phy_set_common_speed+0x168>
 401b89c:	e0bff617 	ldw	r2,-40(fp)
 401b8a0:	10800103 	ldbu	r2,4(r2)
 401b8a4:	10803fcc 	andi	r2,r2,255
 401b8a8:	1004c03a 	cmpne	r2,r2,zero
 401b8ac:	10000a1e 	bne	r2,zero,401b8d8 <alt_tse_phy_set_common_speed+0x168>
 401b8b0:	e0bff617 	ldw	r2,-40(fp)
 401b8b4:	10800043 	ldbu	r2,1(r2)
 401b8b8:	10803fcc 	andi	r2,r2,255
 401b8bc:	1004c03a 	cmpne	r2,r2,zero
 401b8c0:	1000051e 	bne	r2,zero,401b8d8 <alt_tse_phy_set_common_speed+0x168>
 401b8c4:	e0bff617 	ldw	r2,-40(fp)
 401b8c8:	10800083 	ldbu	r2,2(r2)
 401b8cc:	10803fcc 	andi	r2,r2,255
 401b8d0:	1005003a 	cmpeq	r2,r2,zero
 401b8d4:	1000031e 	bne	r2,zero,401b8e4 <alt_tse_phy_set_common_speed+0x174>
 401b8d8:	00800044 	movi	r2,1
 401b8dc:	e0bffe15 	stw	r2,-8(fp)
 401b8e0:	00000106 	br	401b8e8 <alt_tse_phy_set_common_speed+0x178>
 401b8e4:	e03ffe15 	stw	zero,-8(fp)
 401b8e8:	e0bffe17 	ldw	r2,-8(fp)
 401b8ec:	e0bff705 	stb	r2,-36(fp)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 401b8f0:	e0bff703 	ldbu	r2,-36(fp)
 401b8f4:	1004c03a 	cmpne	r2,r2,zero
 401b8f8:	1000101e 	bne	r2,zero,401b93c <alt_tse_phy_set_common_speed+0x1cc>
 401b8fc:	e0bffa17 	ldw	r2,-24(fp)
 401b900:	10800098 	cmpnei	r2,r2,2
 401b904:	10000d1e 	bne	r2,zero,401b93c <alt_tse_phy_set_common_speed+0x1cc>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 401b908:	e17ff307 	ldb	r5,-52(fp)
 401b90c:	e1bff347 	ldb	r6,-51(fp)
 401b910:	01010174 	movhi	r4,1029
 401b914:	21292104 	addi	r4,r4,-23420
 401b918:	400207c0 	call	400207c <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 401b91c:	e0bff217 	ldw	r2,-56(fp)
 401b920:	10801004 	addi	r2,r2,64
 401b924:	1007883a 	mov	r3,r2
 401b928:	e0bff117 	ldw	r2,-60(fp)
 401b92c:	18800035 	stwio	r2,0(r3)
            return TSE_PHY_SPEED_NO_COMMON;
 401b930:	00bfffc4 	movi	r2,-1
 401b934:	e0bfff15 	stw	r2,-4(fp)
 401b938:	0000be06 	br	401bc34 <alt_tse_phy_set_common_speed+0x4c4>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 401b93c:	e13ff617 	ldw	r4,-40(fp)
 401b940:	01400044 	movi	r5,1
 401b944:	018000c4 	movi	r6,3
 401b948:	01c00044 	movi	r7,1
 401b94c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401b950:	1004c03a 	cmpne	r2,r2,zero
 401b954:	1000151e 	bne	r2,zero,401b9ac <alt_tse_phy_set_common_speed+0x23c>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 401b958:	e0bff703 	ldbu	r2,-36(fp)
 401b95c:	1005003a 	cmpeq	r2,r2,zero
 401b960:	1000091e 	bne	r2,zero,401b988 <alt_tse_phy_set_common_speed+0x218>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 401b964:	e0bffa17 	ldw	r2,-24(fp)
 401b968:	1005d07a 	srai	r2,r2,1
 401b96c:	10bfffcc 	andi	r2,r2,65535
 401b970:	d8800015 	stw	r2,0(sp)
 401b974:	e13ff617 	ldw	r4,-40(fp)
 401b978:	000b883a 	mov	r5,zero
 401b97c:	01800184 	movi	r6,6
 401b980:	01c00044 	movi	r7,1
 401b984:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 401b988:	e0bffa17 	ldw	r2,-24(fp)
 401b98c:	10bfffcc 	andi	r2,r2,65535
 401b990:	d8800015 	stw	r2,0(sp)
 401b994:	e13ff617 	ldw	r4,-40(fp)
 401b998:	000b883a 	mov	r5,zero
 401b99c:	01800344 	movi	r6,13
 401b9a0:	01c00044 	movi	r7,1
 401b9a4:	40191000 	call	4019100 <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
 401b9a8:	00007806 	br	401bb8c <alt_tse_phy_set_common_speed+0x41c>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 401b9ac:	e0bffa17 	ldw	r2,-24(fp)
 401b9b0:	10800098 	cmpnei	r2,r2,2
 401b9b4:	10000a1e 	bne	r2,zero,401b9e0 <alt_tse_phy_set_common_speed+0x270>
            alt_tse_phy_set_adv_1000(pphy, 1);
 401b9b8:	e13ff617 	ldw	r4,-40(fp)
 401b9bc:	01400044 	movi	r5,1
 401b9c0:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 401b9c4:	e13ff617 	ldw	r4,-40(fp)
 401b9c8:	01400044 	movi	r5,1
 401b9cc:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 401b9d0:	e13ff617 	ldw	r4,-40(fp)
 401b9d4:	01400044 	movi	r5,1
 401b9d8:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
 401b9dc:	00002306 	br	401ba6c <alt_tse_phy_set_common_speed+0x2fc>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 401b9e0:	e0bffa17 	ldw	r2,-24(fp)
 401b9e4:	10800058 	cmpnei	r2,r2,1
 401b9e8:	10000a1e 	bne	r2,zero,401ba14 <alt_tse_phy_set_common_speed+0x2a4>
            alt_tse_phy_set_adv_1000(pphy, 0);
 401b9ec:	e13ff617 	ldw	r4,-40(fp)
 401b9f0:	000b883a 	mov	r5,zero
 401b9f4:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 401b9f8:	e13ff617 	ldw	r4,-40(fp)
 401b9fc:	01400044 	movi	r5,1
 401ba00:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 401ba04:	e13ff617 	ldw	r4,-40(fp)
 401ba08:	01400044 	movi	r5,1
 401ba0c:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
 401ba10:	00001606 	br	401ba6c <alt_tse_phy_set_common_speed+0x2fc>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 401ba14:	e0bffa17 	ldw	r2,-24(fp)
 401ba18:	1004c03a 	cmpne	r2,r2,zero
 401ba1c:	10000a1e 	bne	r2,zero,401ba48 <alt_tse_phy_set_common_speed+0x2d8>
            alt_tse_phy_set_adv_1000(pphy, 0);
 401ba20:	e13ff617 	ldw	r4,-40(fp)
 401ba24:	000b883a 	mov	r5,zero
 401ba28:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 401ba2c:	e13ff617 	ldw	r4,-40(fp)
 401ba30:	000b883a 	mov	r5,zero
 401ba34:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 401ba38:	e13ff617 	ldw	r4,-40(fp)
 401ba3c:	01400044 	movi	r5,1
 401ba40:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
 401ba44:	00000906 	br	401ba6c <alt_tse_phy_set_common_speed+0x2fc>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 401ba48:	e13ff617 	ldw	r4,-40(fp)
 401ba4c:	000b883a 	mov	r5,zero
 401ba50:	401af180 	call	401af18 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 401ba54:	e13ff617 	ldw	r4,-40(fp)
 401ba58:	000b883a 	mov	r5,zero
 401ba5c:	401b0ac0 	call	401b0ac <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 401ba60:	e13ff617 	ldw	r4,-40(fp)
 401ba64:	000b883a 	mov	r5,zero
 401ba68:	401b2bc0 	call	401b2bc <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 401ba6c:	e13ff617 	ldw	r4,-40(fp)
 401ba70:	01400044 	movi	r5,1
 401ba74:	01800144 	movi	r6,5
 401ba78:	01c00044 	movi	r7,1
 401ba7c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401ba80:	10800058 	cmpnei	r2,r2,1
 401ba84:	1000341e 	bne	r2,zero,401bb58 <alt_tse_phy_set_common_speed+0x3e8>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 401ba88:	e0bff703 	ldbu	r2,-36(fp)
 401ba8c:	1005003a 	cmpeq	r2,r2,zero
 401ba90:	10000d1e 	bne	r2,zero,401bac8 <alt_tse_phy_set_common_speed+0x358>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 401ba94:	e0bff617 	ldw	r2,-40(fp)
 401ba98:	10800517 	ldw	r2,20(r2)
 401ba9c:	10801583 	ldbu	r2,86(r2)
 401baa0:	11403fcc 	andi	r5,r2,255
 401baa4:	e0bff617 	ldw	r2,-40(fp)
 401baa8:	10800517 	ldw	r2,20(r2)
 401baac:	108015c3 	ldbu	r2,87(r2)
 401bab0:	11803fcc 	andi	r6,r2,255
 401bab4:	e13ff617 	ldw	r4,-40(fp)
 401bab8:	01c00084 	movi	r7,2
 401babc:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401bac0:	e0bff785 	stb	r2,-34(fp)
 401bac4:	00000c06 	br	401baf8 <alt_tse_phy_set_common_speed+0x388>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 401bac8:	e0bff617 	ldw	r2,-40(fp)
 401bacc:	10800517 	ldw	r2,20(r2)
 401bad0:	10801583 	ldbu	r2,86(r2)
 401bad4:	11403fcc 	andi	r5,r2,255
 401bad8:	e0bff617 	ldw	r2,-40(fp)
 401badc:	10800517 	ldw	r2,20(r2)
 401bae0:	108015c3 	ldbu	r2,87(r2)
 401bae4:	11803fcc 	andi	r6,r2,255
 401bae8:	e13ff617 	ldw	r4,-40(fp)
 401baec:	01c00044 	movi	r7,1
 401baf0:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401baf4:	e0bff785 	stb	r2,-34(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 401baf8:	e0fff783 	ldbu	r3,-34(fp)
 401bafc:	e0bffa17 	ldw	r2,-24(fp)
 401bb00:	18800426 	beq	r3,r2,401bb14 <alt_tse_phy_set_common_speed+0x3a4>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 401bb04:	e13ff617 	ldw	r4,-40(fp)
 401bb08:	01400134 	movhi	r5,4
 401bb0c:	29742404 	addi	r5,r5,-12144
 401bb10:	401a6e40 	call	401a6e4 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 401bb14:	e0bff617 	ldw	r2,-40(fp)
 401bb18:	10800517 	ldw	r2,20(r2)
 401bb1c:	10801583 	ldbu	r2,86(r2)
 401bb20:	11403fcc 	andi	r5,r2,255
 401bb24:	e0bff617 	ldw	r2,-40(fp)
 401bb28:	10800517 	ldw	r2,20(r2)
 401bb2c:	10801603 	ldbu	r2,88(r2)
 401bb30:	11803fcc 	andi	r6,r2,255
 401bb34:	e13ff617 	ldw	r4,-40(fp)
 401bb38:	01c00044 	movi	r7,1
 401bb3c:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401bb40:	e0bff745 	stb	r2,-35(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 401bb44:	e0bff417 	ldw	r2,-48(fp)
 401bb48:	10800017 	ldw	r2,0(r2)
 401bb4c:	1009883a 	mov	r4,r2
 401bb50:	e17ff743 	ldbu	r5,-35(fp)
 401bb54:	40181b40 	call	40181b4 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 401bb58:	e43ff307 	ldb	r16,-52(fp)
 401bb5c:	e47ff347 	ldb	r17,-51(fp)
 401bb60:	e13ff617 	ldw	r4,-40(fp)
 401bb64:	01400044 	movi	r5,1
 401bb68:	000d883a 	mov	r6,zero
 401bb6c:	01c00404 	movi	r7,16
 401bb70:	40192280 	call	4019228 <alt_tse_phy_rd_mdio_reg>
 401bb74:	100f883a 	mov	r7,r2
 401bb78:	01010174 	movhi	r4,1029
 401bb7c:	21293804 	addi	r4,r4,-23328
 401bb80:	800b883a 	mov	r5,r16
 401bb84:	880d883a 	mov	r6,r17
 401bb88:	400207c0 	call	400207c <printf>
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 401bb8c:	e0bff817 	ldw	r2,-32(fp)
 401bb90:	10800044 	addi	r2,r2,1
 401bb94:	e0bff815 	stw	r2,-32(fp)
 401bb98:	e0bff917 	ldw	r2,-28(fp)
 401bb9c:	10800003 	ldbu	r2,0(r2)
 401bba0:	10c03fcc 	andi	r3,r2,255
 401bba4:	e0bff817 	ldw	r2,-32(fp)
 401bba8:	10ff1e16 	blt	r2,r3,401b824 <alt_tse_phy_set_common_speed+0xb4>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 401bbac:	e0bff307 	ldb	r2,-52(fp)
 401bbb0:	e0bffd15 	stw	r2,-12(fp)
 401bbb4:	e0bffa17 	ldw	r2,-24(fp)
 401bbb8:	108000a0 	cmpeqi	r2,r2,2
 401bbbc:	10000b1e 	bne	r2,zero,401bbec <alt_tse_phy_set_common_speed+0x47c>
 401bbc0:	e0bffa17 	ldw	r2,-24(fp)
 401bbc4:	10800058 	cmpnei	r2,r2,1
 401bbc8:	1000031e 	bne	r2,zero,401bbd8 <alt_tse_phy_set_common_speed+0x468>
 401bbcc:	00801904 	movi	r2,100
 401bbd0:	e0bffb15 	stw	r2,-20(fp)
 401bbd4:	00000206 	br	401bbe0 <alt_tse_phy_set_common_speed+0x470>
 401bbd8:	00800284 	movi	r2,10
 401bbdc:	e0bffb15 	stw	r2,-20(fp)
 401bbe0:	e0bffb17 	ldw	r2,-20(fp)
 401bbe4:	e0bffc15 	stw	r2,-16(fp)
 401bbe8:	00000206 	br	401bbf4 <alt_tse_phy_set_common_speed+0x484>
 401bbec:	0080fa04 	movi	r2,1000
 401bbf0:	e0bffc15 	stw	r2,-16(fp)
 401bbf4:	01010174 	movhi	r4,1029
 401bbf8:	21294404 	addi	r4,r4,-23280
 401bbfc:	e17ffd17 	ldw	r5,-12(fp)
 401bc00:	e1bffc17 	ldw	r6,-16(fp)
 401bc04:	400207c0 	call	400207c <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 401bc08:	e0bffa17 	ldw	r2,-24(fp)
 401bc0c:	11403fcc 	andi	r5,r2,255
 401bc10:	e13ff217 	ldw	r4,-56(fp)
 401bc14:	40180c80 	call	40180c8 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 401bc18:	e0bff217 	ldw	r2,-56(fp)
 401bc1c:	10801004 	addi	r2,r2,64
 401bc20:	1007883a 	mov	r3,r2
 401bc24:	e0bff117 	ldw	r2,-60(fp)
 401bc28:	18800035 	stwio	r2,0(r3)
        
    return common_speed;
 401bc2c:	e0bffa17 	ldw	r2,-24(fp)
 401bc30:	e0bfff15 	stw	r2,-4(fp)
 401bc34:	e0bfff17 	ldw	r2,-4(fp)
}
 401bc38:	e037883a 	mov	sp,fp
 401bc3c:	dfc00317 	ldw	ra,12(sp)
 401bc40:	df000217 	ldw	fp,8(sp)
 401bc44:	dc400117 	ldw	r17,4(sp)
 401bc48:	dc000017 	ldw	r16,0(sp)
 401bc4c:	dec00404 	addi	sp,sp,16
 401bc50:	f800283a 	ret

0401bc54 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 401bc54:	defffc04 	addi	sp,sp,-16
 401bc58:	dfc00315 	stw	ra,12(sp)
 401bc5c:	df000215 	stw	fp,8(sp)
 401bc60:	df000204 	addi	fp,sp,8
 401bc64:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
 401bc68:	e0bfff17 	ldw	r2,-4(fp)
 401bc6c:	1080a104 	addi	r2,r2,644
 401bc70:	10800037 	ldwio	r2,0(r2)
 401bc74:	1080080c 	andi	r2,r2,32
 401bc78:	1004c03a 	cmpne	r2,r2,zero
 401bc7c:	1000191e 	bne	r2,zero,401bce4 <marvell_phy_cfg+0x90>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 401bc80:	01010174 	movhi	r4,1029
 401bc84:	21295504 	addi	r4,r4,-23212
 401bc88:	40021940 	call	4002194 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 401bc8c:	e0bfff17 	ldw	r2,-4(fp)
 401bc90:	1080a004 	addi	r2,r2,640
 401bc94:	10801004 	addi	r2,r2,64
 401bc98:	1007883a 	mov	r3,r2
 401bc9c:	00801e04 	movi	r2,120
 401bca0:	18800035 	stwio	r2,0(r3)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 401bca4:	01010174 	movhi	r4,1029
 401bca8:	21295e04 	addi	r4,r4,-23176
 401bcac:	40021940 	call	4002194 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 401bcb0:	e0bfff17 	ldw	r2,-4(fp)
 401bcb4:	1080a004 	addi	r2,r2,640
 401bcb8:	10800037 	ldwio	r2,0(r2)
 401bcbc:	e0bffe0d 	sth	r2,-8(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
 401bcc0:	e0bfff17 	ldw	r2,-4(fp)
 401bcc4:	1080a004 	addi	r2,r2,640
 401bcc8:	1009883a 	mov	r4,r2
 401bccc:	e0fffe0b 	ldhu	r3,-8(fp)
 401bcd0:	00a00004 	movi	r2,-32768
 401bcd4:	1884b03a 	or	r2,r3,r2
 401bcd8:	10ffffcc 	andi	r3,r2,65535
 401bcdc:	2005883a 	mov	r2,r4
 401bce0:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
 401bce4:	0005883a 	mov	r2,zero
}
 401bce8:	e037883a 	mov	sp,fp
 401bcec:	dfc00117 	ldw	ra,4(sp)
 401bcf0:	df000017 	ldw	fp,0(sp)
 401bcf4:	dec00204 	addi	sp,sp,8
 401bcf8:	f800283a 	ret

0401bcfc <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 401bcfc:	defffc04 	addi	sp,sp,-16
 401bd00:	dfc00315 	stw	ra,12(sp)
 401bd04:	df000215 	stw	fp,8(sp)
 401bd08:	df000204 	addi	fp,sp,8
 401bd0c:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 401bd10:	e0bfff17 	ldw	r2,-4(fp)
 401bd14:	1080bb04 	addi	r2,r2,748
 401bd18:	10800037 	ldwio	r2,0(r2)
 401bd1c:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 401bd20:	00fffc04 	movi	r3,-16
 401bd24:	e0bffe0b 	ldhu	r2,-8(fp)
 401bd28:	10c4703a 	and	r2,r2,r3
 401bd2c:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 401bd30:	01010174 	movhi	r4,1029
 401bd34:	21296304 	addi	r4,r4,-23156
 401bd38:	40021940 	call	4002194 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 401bd3c:	e0bfff17 	ldw	r2,-4(fp)
 401bd40:	1080bb04 	addi	r2,r2,748
 401bd44:	1009883a 	mov	r4,r2
 401bd48:	e0bffe0b 	ldhu	r2,-8(fp)
 401bd4c:	108003d4 	ori	r2,r2,15
 401bd50:	10ffffcc 	andi	r3,r2,65535
 401bd54:	2005883a 	mov	r2,r4
 401bd58:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 401bd5c:	01010174 	movhi	r4,1029
 401bd60:	21296f04 	addi	r4,r4,-23108
 401bd64:	40021940 	call	4002194 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 401bd68:	e0bfff17 	ldw	r2,-4(fp)
 401bd6c:	1080b404 	addi	r2,r2,720
 401bd70:	10800037 	ldwio	r2,0(r2)
 401bd74:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 401bd78:	e0fffe0b 	ldhu	r3,-8(fp)
 401bd7c:	00bfdf44 	movi	r2,-131
 401bd80:	1884703a 	and	r2,r3,r2
 401bd84:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 401bd88:	e0bfff17 	ldw	r2,-4(fp)
 401bd8c:	1080b404 	addi	r2,r2,720
 401bd90:	e0fffe0b 	ldhu	r3,-8(fp)
 401bd94:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 401bd98:	01010174 	movhi	r4,1029
 401bd9c:	21295e04 	addi	r4,r4,-23176
 401bda0:	40021940 	call	4002194 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 401bda4:	e0bfff17 	ldw	r2,-4(fp)
 401bda8:	1080a004 	addi	r2,r2,640
 401bdac:	10800037 	ldwio	r2,0(r2)
 401bdb0:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 401bdb4:	e0bfff17 	ldw	r2,-4(fp)
 401bdb8:	1080a004 	addi	r2,r2,640
 401bdbc:	1009883a 	mov	r4,r2
 401bdc0:	e0fffe0b 	ldhu	r3,-8(fp)
 401bdc4:	00a00004 	movi	r2,-32768
 401bdc8:	1884b03a 	or	r2,r3,r2
 401bdcc:	10ffffcc 	andi	r3,r2,65535
 401bdd0:	2005883a 	mov	r2,r4
 401bdd4:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 401bdd8:	00800044 	movi	r2,1
}
 401bddc:	e037883a 	mov	sp,fp
 401bde0:	dfc00117 	ldw	ra,4(sp)
 401bde4:	df000017 	ldw	fp,0(sp)
 401bde8:	dec00204 	addi	sp,sp,8
 401bdec:	f800283a 	ret

0401bdf0 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 401bdf0:	defffc04 	addi	sp,sp,-16
 401bdf4:	dfc00315 	stw	ra,12(sp)
 401bdf8:	df000215 	stw	fp,8(sp)
 401bdfc:	df000204 	addi	fp,sp,8
 401be00:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 401be04:	e0bfff17 	ldw	r2,-4(fp)
 401be08:	1080bb04 	addi	r2,r2,748
 401be0c:	10800037 	ldwio	r2,0(r2)
 401be10:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 401be14:	00fffc04 	movi	r3,-16
 401be18:	e0bffe0b 	ldhu	r2,-8(fp)
 401be1c:	10c4703a 	and	r2,r2,r3
 401be20:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 401be24:	01010174 	movhi	r4,1029
 401be28:	21297904 	addi	r4,r4,-23068
 401be2c:	40021940 	call	4002194 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 401be30:	e0bfff17 	ldw	r2,-4(fp)
 401be34:	1080bb04 	addi	r2,r2,748
 401be38:	1009883a 	mov	r4,r2
 401be3c:	e0bffe0b 	ldhu	r2,-8(fp)
 401be40:	10800114 	ori	r2,r2,4
 401be44:	10ffffcc 	andi	r3,r2,65535
 401be48:	2005883a 	mov	r2,r4
 401be4c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 401be50:	01010174 	movhi	r4,1029
 401be54:	21296f04 	addi	r4,r4,-23108
 401be58:	40021940 	call	4002194 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 401be5c:	e0bfff17 	ldw	r2,-4(fp)
 401be60:	1080b404 	addi	r2,r2,720
 401be64:	10800037 	ldwio	r2,0(r2)
 401be68:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 401be6c:	e0fffe0b 	ldhu	r3,-8(fp)
 401be70:	00bfdf44 	movi	r2,-131
 401be74:	1884703a 	and	r2,r3,r2
 401be78:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 401be7c:	e0bfff17 	ldw	r2,-4(fp)
 401be80:	1080b404 	addi	r2,r2,720
 401be84:	e0fffe0b 	ldhu	r3,-8(fp)
 401be88:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 401be8c:	01010174 	movhi	r4,1029
 401be90:	21295e04 	addi	r4,r4,-23176
 401be94:	40021940 	call	4002194 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 401be98:	e0bfff17 	ldw	r2,-4(fp)
 401be9c:	1080a004 	addi	r2,r2,640
 401bea0:	10800037 	ldwio	r2,0(r2)
 401bea4:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 401bea8:	e0bfff17 	ldw	r2,-4(fp)
 401beac:	1080a004 	addi	r2,r2,640
 401beb0:	1009883a 	mov	r4,r2
 401beb4:	e0fffe0b 	ldhu	r3,-8(fp)
 401beb8:	00a00004 	movi	r2,-32768
 401bebc:	1884b03a 	or	r2,r3,r2
 401bec0:	10ffffcc 	andi	r3,r2,65535
 401bec4:	2005883a 	mov	r2,r4
 401bec8:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 401becc:	00800044 	movi	r2,1
}
 401bed0:	e037883a 	mov	sp,fp
 401bed4:	dfc00117 	ldw	ra,4(sp)
 401bed8:	df000017 	ldw	fp,0(sp)
 401bedc:	dec00204 	addi	sp,sp,8
 401bee0:	f800283a 	ret

0401bee4 <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 401bee4:	defffc04 	addi	sp,sp,-16
 401bee8:	dfc00315 	stw	ra,12(sp)
 401beec:	df000215 	stw	fp,8(sp)
 401bef0:	df000204 	addi	fp,sp,8
 401bef4:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 401bef8:	e0bfff17 	ldw	r2,-4(fp)
 401befc:	1080bb04 	addi	r2,r2,748
 401bf00:	10800037 	ldwio	r2,0(r2)
 401bf04:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 401bf08:	00fffc04 	movi	r3,-16
 401bf0c:	e0bffe0b 	ldhu	r2,-8(fp)
 401bf10:	10c4703a 	and	r2,r2,r3
 401bf14:	e0bffe0d 	sth	r2,-8(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 401bf18:	01010174 	movhi	r4,1029
 401bf1c:	21298e04 	addi	r4,r4,-22984
 401bf20:	40021940 	call	4002194 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 401bf24:	e0bfff17 	ldw	r2,-4(fp)
 401bf28:	1080bb04 	addi	r2,r2,748
 401bf2c:	1009883a 	mov	r4,r2
 401bf30:	e0bffe0b 	ldhu	r2,-8(fp)
 401bf34:	108002d4 	ori	r2,r2,11
 401bf38:	10ffffcc 	andi	r3,r2,65535
 401bf3c:	2005883a 	mov	r2,r4
 401bf40:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 401bf44:	01010174 	movhi	r4,1029
 401bf48:	21299d04 	addi	r4,r4,-22924
 401bf4c:	40021940 	call	4002194 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 401bf50:	e0bfff17 	ldw	r2,-4(fp)
 401bf54:	1080b404 	addi	r2,r2,720
 401bf58:	10800037 	ldwio	r2,0(r2)
 401bf5c:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 401bf60:	e0fffe0b 	ldhu	r3,-8(fp)
 401bf64:	00bfdf44 	movi	r2,-131
 401bf68:	1884703a 	and	r2,r3,r2
 401bf6c:	e0bffe0d 	sth	r2,-8(fp)
    dat |= 0x82;
 401bf70:	e0bffe0b 	ldhu	r2,-8(fp)
 401bf74:	10802094 	ori	r2,r2,130
 401bf78:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 401bf7c:	e0bfff17 	ldw	r2,-4(fp)
 401bf80:	1080b404 	addi	r2,r2,720
 401bf84:	e0fffe0b 	ldhu	r3,-8(fp)
 401bf88:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 401bf8c:	01010174 	movhi	r4,1029
 401bf90:	21295e04 	addi	r4,r4,-23176
 401bf94:	40021940 	call	4002194 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 401bf98:	e0bfff17 	ldw	r2,-4(fp)
 401bf9c:	1080a004 	addi	r2,r2,640
 401bfa0:	10800037 	ldwio	r2,0(r2)
 401bfa4:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
 401bfa8:	e0bfff17 	ldw	r2,-4(fp)
 401bfac:	1080a004 	addi	r2,r2,640
 401bfb0:	1009883a 	mov	r4,r2
 401bfb4:	e0fffe0b 	ldhu	r3,-8(fp)
 401bfb8:	00a00004 	movi	r2,-32768
 401bfbc:	1884b03a 	or	r2,r3,r2
 401bfc0:	10ffffcc 	andi	r3,r2,65535
 401bfc4:	2005883a 	mov	r2,r4
 401bfc8:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 401bfcc:	00800044 	movi	r2,1
    
}
 401bfd0:	e037883a 	mov	sp,fp
 401bfd4:	dfc00117 	ldw	ra,4(sp)
 401bfd8:	df000017 	ldw	fp,0(sp)
 401bfdc:	dec00204 	addi	sp,sp,8
 401bfe0:	f800283a 	ret

0401bfe4 <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
 401bfe4:	defffc04 	addi	sp,sp,-16
 401bfe8:	df000315 	stw	fp,12(sp)
 401bfec:	df000304 	addi	fp,sp,12
 401bff0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
 401bff4:	e03ffe15 	stw	zero,-8(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 401bff8:	e0bfff17 	ldw	r2,-4(fp)
 401bffc:	1080b004 	addi	r2,r2,704
 401c000:	10800037 	ldwio	r2,0(r2)
 401c004:	e0bffd15 	stw	r2,-12(fp)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
 401c008:	e0bffd17 	ldw	r2,-12(fp)
 401c00c:	1080008c 	andi	r2,r2,2
 401c010:	1005003a 	cmpeq	r2,r2,zero
 401c014:	1000041e 	bne	r2,zero,401c028 <DP83848C_link_status_read+0x44>
		link_status |= 0x8;
 401c018:	e0bffe17 	ldw	r2,-8(fp)
 401c01c:	10800214 	ori	r2,r2,8
 401c020:	e0bffe15 	stw	r2,-8(fp)
 401c024:	00000306 	br	401c034 <DP83848C_link_status_read+0x50>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
 401c028:	e0bffe17 	ldw	r2,-8(fp)
 401c02c:	10800114 	ori	r2,r2,4
 401c030:	e0bffe15 	stw	r2,-8(fp)
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
 401c034:	e0bffd17 	ldw	r2,-12(fp)
 401c038:	1080010c 	andi	r2,r2,4
 401c03c:	1005003a 	cmpeq	r2,r2,zero
 401c040:	1000031e 	bne	r2,zero,401c050 <DP83848C_link_status_read+0x6c>
		link_status |= 0x1;
 401c044:	e0bffe17 	ldw	r2,-8(fp)
 401c048:	10800054 	ori	r2,r2,1
 401c04c:	e0bffe15 	stw	r2,-8(fp)
	}
	
	return link_status;
 401c050:	e0bffe17 	ldw	r2,-8(fp)
}
 401c054:	e037883a 	mov	sp,fp
 401c058:	df000017 	ldw	fp,0(sp)
 401c05c:	dec00104 	addi	sp,sp,4
 401c060:	f800283a 	ret

0401c064 <triple_speed_ethernet_init>:
 * @Return ENP_HARDWARE on error, otherwise return SUCCESS
 */

error_t triple_speed_ethernet_init(
    alt_iniche_dev              *p_dev)
{
 401c064:	defff904 	addi	sp,sp,-28
 401c068:	dfc00615 	stw	ra,24(sp)
 401c06c:	df000515 	stw	fp,20(sp)
 401c070:	df000504 	addi	fp,sp,20
 401c074:	e13ffe15 	stw	r4,-8(fp)
    int i;
    
    alt_tse_iniche_dev_driver_data *p_driver_data = 0;
 401c078:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_system_info *psys_info = 0;
 401c07c:	e03ffb15 	stw	zero,-20(fp)
    #ifdef PRINTIF
        dprintf("triple_speed_ethernet_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 401c080:	e03ffd15 	stw	zero,-12(fp)
 401c084:	00001206 	br	401c0d0 <triple_speed_ethernet_init+0x6c>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
 401c088:	e0bffd17 	ldw	r2,-12(fp)
 401c08c:	00c101b4 	movhi	r3,1030
 401c090:	18e0eb04 	addi	r3,r3,-31828
 401c094:	10800324 	muli	r2,r2,12
 401c098:	10c5883a 	add	r2,r2,r3
 401c09c:	10c00017 	ldw	r3,0(r2)
 401c0a0:	e0bffe17 	ldw	r2,-8(fp)
 401c0a4:	1880071e 	bne	r3,r2,401c0c4 <triple_speed_ethernet_init+0x60>
            p_driver_data = &tse_iniche_dev_driver_data[i];
 401c0a8:	e0bffd17 	ldw	r2,-12(fp)
 401c0ac:	10800324 	muli	r2,r2,12
 401c0b0:	1007883a 	mov	r3,r2
 401c0b4:	008101b4 	movhi	r2,1030
 401c0b8:	10a0eb04 	addi	r2,r2,-31828
 401c0bc:	1885883a 	add	r2,r3,r2
 401c0c0:	e0bffc15 	stw	r2,-16(fp)
    #ifdef PRINTIF
        dprintf("triple_speed_ethernet_init %d\n", p_dev->if_num);
    #endif

    /* Get the pointer to the alt_tse_iniche_dev_driver_data structure from the global array */
    for(i = 0; i < number_of_tse_mac; i++) {
 401c0c4:	e0bffd17 	ldw	r2,-12(fp)
 401c0c8:	10800044 	addi	r2,r2,1
 401c0cc:	e0bffd15 	stw	r2,-12(fp)
 401c0d0:	d0a7fe03 	ldbu	r2,-24584(gp)
 401c0d4:	10c03fcc 	andi	r3,r2,255
 401c0d8:	e0bffd17 	ldw	r2,-12(fp)
 401c0dc:	10ffea16 	blt	r2,r3,401c088 <triple_speed_ethernet_init+0x24>
        if(tse_iniche_dev_driver_data[i].p_dev == p_dev) {
            p_driver_data = &tse_iniche_dev_driver_data[i];
        }
    }
    /* If pointer could not found */
    if(p_driver_data == 0) {
 401c0e0:	e0bffc17 	ldw	r2,-16(fp)
 401c0e4:	1004c03a 	cmpne	r2,r2,zero
 401c0e8:	1000031e 	bne	r2,zero,401c0f8 <triple_speed_ethernet_init+0x94>
        return ENP_HARDWARE;
 401c0ec:	00bff744 	movi	r2,-35
 401c0f0:	e0bfff15 	stw	r2,-4(fp)
 401c0f4:	00002c06 	br	401c1a8 <triple_speed_ethernet_init+0x144>
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 401c0f8:	e03ffd15 	stw	zero,-12(fp)
 401c0fc:	00001306 	br	401c14c <triple_speed_ethernet_init+0xe8>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
 401c100:	e0bffd17 	ldw	r2,-12(fp)
 401c104:	00c10174 	movhi	r3,1029
 401c108:	18c39f04 	addi	r3,r3,3708
 401c10c:	10801224 	muli	r2,r2,72
 401c110:	10c5883a 	add	r2,r2,r3
 401c114:	10c00017 	ldw	r3,0(r2)
 401c118:	e0bffc17 	ldw	r2,-16(fp)
 401c11c:	10800117 	ldw	r2,4(r2)
 401c120:	1880071e 	bne	r3,r2,401c140 <triple_speed_ethernet_init+0xdc>
            psys_info = &tse_mac_device[i];
 401c124:	e0bffd17 	ldw	r2,-12(fp)
 401c128:	10801224 	muli	r2,r2,72
 401c12c:	1007883a 	mov	r3,r2
 401c130:	00810174 	movhi	r2,1029
 401c134:	10839f04 	addi	r2,r2,3708
 401c138:	1885883a 	add	r2,r3,r2
 401c13c:	e0bffb15 	stw	r2,-20(fp)
    if(p_driver_data == 0) {
        return ENP_HARDWARE;
    }
    
    /* Get the pointer to the alt_tse_system_info structure from the global array */
    for(i = 0; i < max_mac_system; i++) {
 401c140:	e0bffd17 	ldw	r2,-12(fp)
 401c144:	10800044 	addi	r2,r2,1
 401c148:	e0bffd15 	stw	r2,-12(fp)
 401c14c:	00810174 	movhi	r2,1029
 401c150:	10b9e804 	addi	r2,r2,-6240
 401c154:	10800003 	ldbu	r2,0(r2)
 401c158:	10c03fcc 	andi	r3,r2,255
 401c15c:	e0bffd17 	ldw	r2,-12(fp)
 401c160:	10ffe716 	blt	r2,r3,401c100 <triple_speed_ethernet_init+0x9c>
        if(tse_mac_device[i].tse_mac_base == p_driver_data->hw_mac_base_addr) {
            psys_info = &tse_mac_device[i];
        }
    }
    /* If pointer could not found */
    if(psys_info == 0) {
 401c164:	e0bffb17 	ldw	r2,-20(fp)
 401c168:	1004c03a 	cmpne	r2,r2,zero
 401c16c:	1000031e 	bne	r2,zero,401c17c <triple_speed_ethernet_init+0x118>
        return ENP_HARDWARE;
 401c170:	00bff744 	movi	r2,-35
 401c174:	e0bfff15 	stw	r2,-4(fp)
 401c178:	00000b06 	br	401c1a8 <triple_speed_ethernet_init+0x144>
    }
    
    prep_tse_mac(p_dev->if_num, psys_info + p_driver_data->hw_channel_number);
 401c17c:	e0bffe17 	ldw	r2,-8(fp)
 401c180:	11000517 	ldw	r4,20(r2)
 401c184:	e0bffc17 	ldw	r2,-16(fp)
 401c188:	10800203 	ldbu	r2,8(r2)
 401c18c:	10803fcc 	andi	r2,r2,255
 401c190:	10801224 	muli	r2,r2,72
 401c194:	1007883a 	mov	r3,r2
 401c198:	e0bffb17 	ldw	r2,-20(fp)
 401c19c:	188b883a 	add	r5,r3,r2
 401c1a0:	401c1c00 	call	401c1c0 <prep_tse_mac>
    
    return SUCCESS;
 401c1a4:	e03fff15 	stw	zero,-4(fp)
 401c1a8:	e0bfff17 	ldw	r2,-4(fp)
}
 401c1ac:	e037883a 	mov	sp,fp
 401c1b0:	dfc00117 	ldw	ra,4(sp)
 401c1b4:	df000017 	ldw	fp,0(sp)
 401c1b8:	dec00204 	addi	sp,sp,8
 401c1bc:	f800283a 	ret

0401c1c0 <prep_tse_mac>:
 * @Param index     index of the NET structure associated with TSE instance
 * @Param psys_info pointer to the TSE hardware info structure
 * @Return next index of NET
 */
int prep_tse_mac(int index, alt_tse_system_info *psys_info)
{
 401c1c0:	defffb04 	addi	sp,sp,-20
 401c1c4:	dfc00415 	stw	ra,16(sp)
 401c1c8:	df000315 	stw	fp,12(sp)
 401c1cc:	df000304 	addi	fp,sp,12
 401c1d0:	e13ffe15 	stw	r4,-8(fp)
 401c1d4:	e17fff15 	stw	r5,-4(fp)
    NET ifp;
    dprintf("prep_tse_mac %d\n", index);
 401c1d8:	01010174 	movhi	r4,1029
 401c1dc:	2129a704 	addi	r4,r4,-22884
 401c1e0:	e17ffe17 	ldw	r5,-8(fp)
 401c1e4:	400207c0 	call	400207c <printf>
    {
        tse[index].sem = 0; /*Tx IDLE*/
 401c1e8:	e0bffe17 	ldw	r2,-8(fp)
 401c1ec:	00c101b4 	movhi	r3,1030
 401c1f0:	18e0f704 	addi	r3,r3,-31780
 401c1f4:	10801324 	muli	r2,r2,76
 401c1f8:	10c5883a 	add	r2,r2,r3
 401c1fc:	10800c04 	addi	r2,r2,48
 401c200:	10000015 	stw	zero,0(r2)
        tse[index].tse = (void *)psys_info;
 401c204:	e0bffe17 	ldw	r2,-8(fp)
 401c208:	00c101b4 	movhi	r3,1030
 401c20c:	18e0f704 	addi	r3,r3,-31780
 401c210:	10801324 	muli	r2,r2,76
 401c214:	10c5883a 	add	r2,r2,r3
 401c218:	10c01204 	addi	r3,r2,72
 401c21c:	e0bfff17 	ldw	r2,-4(fp)
 401c220:	18800015 	stw	r2,0(r3)

        ifp = nets[index];
 401c224:	e0bffe17 	ldw	r2,-8(fp)
 401c228:	00c101b4 	movhi	r3,1030
 401c22c:	18e20804 	addi	r3,r3,-30688
 401c230:	1085883a 	add	r2,r2,r2
 401c234:	1085883a 	add	r2,r2,r2
 401c238:	10c5883a 	add	r2,r2,r3
 401c23c:	10800017 	ldw	r2,0(r2)
 401c240:	e0bffd15 	stw	r2,-12(fp)
        ifp->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN; /* status = down */
 401c244:	e0bffd17 	ldw	r2,-12(fp)
 401c248:	10c02717 	ldw	r3,156(r2)
 401c24c:	00800084 	movi	r2,2
 401c250:	18800615 	stw	r2,24(r3)
        ifp->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_DOWN;   
 401c254:	e0bffd17 	ldw	r2,-12(fp)
 401c258:	10c02717 	ldw	r3,156(r2)
 401c25c:	00800084 	movi	r2,2
 401c260:	18800715 	stw	r2,28(r3)
        ifp->n_mib->ifLastChange =  cticks * (100/TPS);
 401c264:	e0bffd17 	ldw	r2,-12(fp)
 401c268:	10c02717 	ldw	r3,156(r2)
 401c26c:	00810174 	movhi	r2,1029
 401c270:	1081e404 	addi	r2,r2,1936
 401c274:	10800017 	ldw	r2,0(r2)
 401c278:	18800815 	stw	r2,32(r3)
        ifp->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;
 401c27c:	e0bffd17 	ldw	r2,-12(fp)
 401c280:	11002717 	ldw	r4,156(r2)
 401c284:	e0bffe17 	ldw	r2,-8(fp)
 401c288:	10801324 	muli	r2,r2,76
 401c28c:	10c00604 	addi	r3,r2,24
 401c290:	008101b4 	movhi	r2,1030
 401c294:	10a0f704 	addi	r2,r2,-31780
 401c298:	1885883a 	add	r2,r3,r2
 401c29c:	20800515 	stw	r2,20(r4)
        ifp->n_mib->ifDescr =       (u_char*)"Altera TSE MAC ethernet";
 401c2a0:	e0bffd17 	ldw	r2,-12(fp)
 401c2a4:	10c02717 	ldw	r3,156(r2)
 401c2a8:	00810174 	movhi	r2,1029
 401c2ac:	10a9ac04 	addi	r2,r2,-22864
 401c2b0:	18800115 	stw	r2,4(r3)
        ifp->n_lnh =                ETHHDR_SIZE; /* ethernet header size. was:14 */
 401c2b4:	e0fffd17 	ldw	r3,-12(fp)
 401c2b8:	00800404 	movi	r2,16
 401c2bc:	18800815 	stw	r2,32(r3)
        ifp->n_hal =                ALTERA_TSE_HAL_ADDR_LEN;  /* hardware address length */
 401c2c0:	e0fffd17 	ldw	r3,-12(fp)
 401c2c4:	00800184 	movi	r2,6
 401c2c8:	18801115 	stw	r2,68(r3)
        ifp->n_mib->ifType =        ETHERNET;   /* device type */
 401c2cc:	e0bffd17 	ldw	r2,-12(fp)
 401c2d0:	10c02717 	ldw	r3,156(r2)
 401c2d4:	00800184 	movi	r2,6
 401c2d8:	18800215 	stw	r2,8(r3)
        ifp->n_mtu =                ALTERA_TSE_MAX_MTU_SIZE;  /* max frame size */
 401c2dc:	e0fffd17 	ldw	r3,-12(fp)
 401c2e0:	00817a84 	movi	r2,1514
 401c2e4:	18800915 	stw	r2,36(r3)
    
        /* install our hardware driver routines */
        ifp->n_init =       tse_mac_init;
 401c2e8:	e0fffd17 	ldw	r3,-12(fp)
 401c2ec:	008100b4 	movhi	r2,1026
 401c2f0:	10b10904 	addi	r2,r2,-15324
 401c2f4:	18800215 	stw	r2,8(r3)
        ifp->pkt_send =     NULL;
 401c2f8:	e0bffd17 	ldw	r2,-12(fp)
 401c2fc:	10000415 	stw	zero,16(r2)
        ifp->raw_send =     tse_mac_raw_send;
 401c300:	e0fffd17 	ldw	r3,-12(fp)
 401c304:	008100b4 	movhi	r2,1026
 401c308:	10b3c304 	addi	r2,r2,-12532
 401c30c:	18800315 	stw	r2,12(r3)
        ifp->n_close =      tse_mac_close;
 401c310:	e0fffd17 	ldw	r3,-12(fp)
 401c314:	008100b4 	movhi	r2,1026
 401c318:	10b5b904 	addi	r2,r2,-10524
 401c31c:	18800515 	stw	r2,20(r3)
        ifp->n_stats =      (void(*)(void *, int))tse_mac_stats; 
 401c320:	00c100b4 	movhi	r3,1026
 401c324:	18f5a904 	addi	r3,r3,-10588
 401c328:	e0bffd17 	ldw	r2,-12(fp)
 401c32c:	10c00715 	stw	r3,28(r2)
    
    #ifdef IP_V6
        ifp->n_flags |= (NF_NBPROT | NF_IPV6);
    #else
        ifp->n_flags |= NF_NBPROT;
 401c330:	e0bffd17 	ldw	r2,-12(fp)
 401c334:	10802a17 	ldw	r2,168(r2)
 401c338:	10c00214 	ori	r3,r2,8
 401c33c:	e0bffd17 	ldw	r2,-12(fp)
 401c340:	10c02a15 	stw	r3,168(r2)
    #endif
    
        nets[index]->n_mib->ifPhysAddress = (u_char*)tse[index].mac_addr;   /* ptr to MAC address */
 401c344:	e0bffe17 	ldw	r2,-8(fp)
 401c348:	00c101b4 	movhi	r3,1030
 401c34c:	18e20804 	addi	r3,r3,-30688
 401c350:	1085883a 	add	r2,r2,r2
 401c354:	1085883a 	add	r2,r2,r2
 401c358:	10c5883a 	add	r2,r2,r3
 401c35c:	10800017 	ldw	r2,0(r2)
 401c360:	11002717 	ldw	r4,156(r2)
 401c364:	e0bffe17 	ldw	r2,-8(fp)
 401c368:	10801324 	muli	r2,r2,76
 401c36c:	10c00604 	addi	r3,r2,24
 401c370:	008101b4 	movhi	r2,1030
 401c374:	10a0f704 	addi	r2,r2,-31780
 401c378:	1885883a 	add	r2,r3,r2
 401c37c:	20800515 	stw	r2,20(r4)
    
    #ifdef ALT_INICHE
        /* get the MAC address. */
        get_mac_addr(ifp, (unsigned char *)tse[index].mac_addr);
 401c380:	e0bffe17 	ldw	r2,-8(fp)
 401c384:	10801324 	muli	r2,r2,76
 401c388:	10c00604 	addi	r3,r2,24
 401c38c:	008101b4 	movhi	r2,1030
 401c390:	10a0f704 	addi	r2,r2,-31780
 401c394:	1885883a 	add	r2,r3,r2
 401c398:	100b883a 	mov	r5,r2
 401c39c:	e13ffd17 	ldw	r4,-12(fp)
 401c3a0:	400109c0 	call	400109c <get_mac_addr>
    #endif /* ALT_INICHE */
    
        /* set cross-pointers between iface and tse structs */
        tse[index].index = index;
 401c3a4:	e0bffe17 	ldw	r2,-8(fp)
 401c3a8:	00c101b4 	movhi	r3,1030
 401c3ac:	18e0f704 	addi	r3,r3,-31780
 401c3b0:	10801324 	muli	r2,r2,76
 401c3b4:	10c7883a 	add	r3,r2,r3
 401c3b8:	e0bffe17 	ldw	r2,-8(fp)
 401c3bc:	18800015 	stw	r2,0(r3)
        tse[index].netp = ifp;
 401c3c0:	e0bffe17 	ldw	r2,-8(fp)
 401c3c4:	00c101b4 	movhi	r3,1030
 401c3c8:	18e0f704 	addi	r3,r3,-31780
 401c3cc:	10801324 	muli	r2,r2,76
 401c3d0:	10c5883a 	add	r2,r2,r3
 401c3d4:	10c00804 	addi	r3,r2,32
 401c3d8:	e0bffd17 	ldw	r2,-12(fp)
 401c3dc:	18800015 	stw	r2,0(r3)
        ifp->n_local = (void*)(&tse[index]);
 401c3e0:	e0bffe17 	ldw	r2,-8(fp)
 401c3e4:	10801324 	muli	r2,r2,76
 401c3e8:	1007883a 	mov	r3,r2
 401c3ec:	008101b4 	movhi	r2,1030
 401c3f0:	10a0f704 	addi	r2,r2,-31780
 401c3f4:	1887883a 	add	r3,r3,r2
 401c3f8:	e0bffd17 	ldw	r2,-12(fp)
 401c3fc:	10c02815 	stw	r3,160(r2)
    
        index++;
 401c400:	e0bffe17 	ldw	r2,-8(fp)
 401c404:	10800044 	addi	r2,r2,1
 401c408:	e0bffe15 	stw	r2,-8(fp)
   }
 
   return index;
 401c40c:	e0bffe17 	ldw	r2,-8(fp)
}
 401c410:	e037883a 	mov	sp,fp
 401c414:	dfc00117 	ldw	ra,4(sp)
 401c418:	df000017 	ldw	fp,0(sp)
 401c41c:	dec00204 	addi	sp,sp,8
 401c420:	f800283a 	ret

0401c424 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface)
{
 401c424:	deffee04 	addi	sp,sp,-72
 401c428:	dfc01115 	stw	ra,68(sp)
 401c42c:	df001015 	stw	fp,64(sp)
 401c430:	df001004 	addi	fp,sp,64
 401c434:	e13ffe15 	stw	r4,-8(fp)
   int dat;
   int speed, duplex, result, x;
   int status = SUCCESS;
 401c438:	e03ff815 	stw	zero,-32(fp)
   
   NET ifp;
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 401c43c:	e0bffe17 	ldw	r2,-8(fp)
 401c440:	00c101b4 	movhi	r3,1030
 401c444:	18e0f704 	addi	r3,r3,-31780
 401c448:	10801324 	muli	r2,r2,76
 401c44c:	10c5883a 	add	r2,r2,r3
 401c450:	10801204 	addi	r2,r2,72
 401c454:	10800017 	ldw	r2,0(r2)
 401c458:	e0bff415 	stw	r2,-48(fp)
   
   dprintf("[tse_mac_init]\n");
 401c45c:	01010174 	movhi	r4,1029
 401c460:	2129b204 	addi	r4,r4,-22840
 401c464:	40021940 	call	4002194 <puts>
#ifdef PRINTIF
    dprintf("tse_mac_init %d\n", iface);
#endif    

    if (tse_hw->ext_desc_mem == 1) {
 401c468:	e0bff417 	ldw	r2,-48(fp)
 401c46c:	10800783 	ldbu	r2,30(r2)
 401c470:	10803fcc 	andi	r2,r2,255
 401c474:	10800058 	cmpnei	r2,r2,1
 401c478:	10000b1e 	bne	r2,zero,401c4a8 <tse_mac_init+0x84>
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
 401c47c:	e13ffe17 	ldw	r4,-8(fp)
 401c480:	e0bff417 	ldw	r2,-48(fp)
 401c484:	10800817 	ldw	r2,32(r2)
 401c488:	100b883a 	mov	r5,r2
 401c48c:	00c101b4 	movhi	r3,1030
 401c490:	18e0f704 	addi	r3,r3,-31780
 401c494:	20801324 	muli	r2,r4,76
 401c498:	10c5883a 	add	r2,r2,r3
 401c49c:	10800f04 	addi	r2,r2,60
 401c4a0:	11400015 	stw	r5,0(r2)
 401c4a4:	00001306 	br	401c4f4 <tse_mac_init+0xd0>
    }
    else {
        unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
 401c4a8:	01002804 	movi	r4,160
 401c4ac:	40360340 	call	4036034 <alt_uncached_malloc>
 401c4b0:	e0bff315 	stw	r2,-52(fp)
    
        while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 401c4b4:	00000306 	br	401c4c4 <tse_mac_init+0xa0>
        {
            temp_desc++;
 401c4b8:	e0bff317 	ldw	r2,-52(fp)
 401c4bc:	10800044 	addi	r2,r2,1
 401c4c0:	e0bff315 	stw	r2,-52(fp)
        tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
    }
    else {
        unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
    
        while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 401c4c4:	e0bff317 	ldw	r2,-52(fp)
 401c4c8:	108007cc 	andi	r2,r2,31
 401c4cc:	1004c03a 	cmpne	r2,r2,zero
 401c4d0:	103ff91e 	bne	r2,zero,401c4b8 <tse_mac_init+0x94>
        {
            temp_desc++;
        }
        tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
 401c4d4:	e0bffe17 	ldw	r2,-8(fp)
 401c4d8:	e13ff317 	ldw	r4,-52(fp)
 401c4dc:	00c101b4 	movhi	r3,1030
 401c4e0:	18e0f704 	addi	r3,r3,-31780
 401c4e4:	10801324 	muli	r2,r2,76
 401c4e8:	10c5883a 	add	r2,r2,r3
 401c4ec:	10800f04 	addi	r2,r2,60
 401c4f0:	11000015 	stw	r4,0(r2)
    }

   
   /* Get the Rx and Tx SGDMA addresses */
   sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
 401c4f4:	e0bff417 	ldw	r2,-48(fp)
 401c4f8:	11000517 	ldw	r4,20(r2)
 401c4fc:	40164a80 	call	40164a8 <alt_avalon_sgdma_open>
 401c500:	e0bff615 	stw	r2,-40(fp)
   
   if(!sgdma_tx_dev) {
 401c504:	e0bff617 	ldw	r2,-40(fp)
 401c508:	1004c03a 	cmpne	r2,r2,zero
 401c50c:	1000061e 	bne	r2,zero,401c528 <tse_mac_init+0x104>
      dprintf("[triple_speed_ethernet_init] Error opening TX SGDMA\n");
 401c510:	01010174 	movhi	r4,1029
 401c514:	2129b604 	addi	r4,r4,-22824
 401c518:	40021940 	call	4002194 <puts>
      return ENP_RESOURCE;
 401c51c:	00bffa84 	movi	r2,-22
 401c520:	e0bfff15 	stw	r2,-4(fp)
 401c524:	00027306 	br	401cef4 <tse_mac_init+0xad0>
   }
  
   sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
 401c528:	e0bff417 	ldw	r2,-48(fp)
 401c52c:	11000617 	ldw	r4,24(r2)
 401c530:	40164a80 	call	40164a8 <alt_avalon_sgdma_open>
 401c534:	e0bff515 	stw	r2,-44(fp)
   if(!sgdma_rx_dev) {
 401c538:	e0bff517 	ldw	r2,-44(fp)
 401c53c:	1004c03a 	cmpne	r2,r2,zero
 401c540:	1000061e 	bne	r2,zero,401c55c <tse_mac_init+0x138>
      dprintf("[triple_speed_ethernet_init] Error opening RX SGDMA\n");
 401c544:	01010174 	movhi	r4,1029
 401c548:	2129c304 	addi	r4,r4,-22772
 401c54c:	40021940 	call	4002194 <puts>
      return ENP_RESOURCE;
 401c550:	00bffa84 	movi	r2,-22
 401c554:	e0bfff15 	stw	r2,-4(fp)
 401c558:	00026606 	br	401cef4 <tse_mac_init+0xad0>
   }

   /* Initialize mtip_mac_trans_info structure with values from <system.h>*/
   tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 401c55c:	e0bffe17 	ldw	r2,-8(fp)
 401c560:	10801324 	muli	r2,r2,76
 401c564:	10c00104 	addi	r3,r2,4
 401c568:	008101b4 	movhi	r2,1030
 401c56c:	10a0f704 	addi	r2,r2,-31780
 401c570:	1889883a 	add	r4,r3,r2
 401c574:	e0bff417 	ldw	r2,-48(fp)
 401c578:	11400017 	ldw	r5,0(r2)
 401c57c:	e0bff617 	ldw	r2,-40(fp)
 401c580:	100d883a 	mov	r6,r2
 401c584:	e0bff517 	ldw	r2,-44(fp)
 401c588:	100f883a 	mov	r7,r2
 401c58c:	d8000015 	stw	zero,0(sp)
 401c590:	4016d400 	call	4016d40 <tse_mac_initTransInfo2>
                                   (unsigned int)sgdma_tx_dev,            
                                   (unsigned int)sgdma_rx_dev,
                                   0);

   /* Reset RX-side SGDMA */
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,
 401c594:	e0bffe17 	ldw	r2,-8(fp)
 401c598:	00c101b4 	movhi	r3,1030
 401c59c:	18e0f704 	addi	r3,r3,-31780
 401c5a0:	10801324 	muli	r2,r2,76
 401c5a4:	10c5883a 	add	r2,r2,r3
 401c5a8:	10800304 	addi	r2,r2,12
 401c5ac:	10800017 	ldw	r2,0(r2)
 401c5b0:	10800317 	ldw	r2,12(r2)
 401c5b4:	10800404 	addi	r2,r2,16
 401c5b8:	1007883a 	mov	r3,r2
 401c5bc:	00800074 	movhi	r2,1
 401c5c0:	18800035 	stwio	r2,0(r3)
     ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
 401c5c4:	e0bffe17 	ldw	r2,-8(fp)
 401c5c8:	00c101b4 	movhi	r3,1030
 401c5cc:	18e0f704 	addi	r3,r3,-31780
 401c5d0:	10801324 	muli	r2,r2,76
 401c5d4:	10c5883a 	add	r2,r2,r3
 401c5d8:	10800304 	addi	r2,r2,12
 401c5dc:	10800017 	ldw	r2,0(r2)
 401c5e0:	10800317 	ldw	r2,12(r2)
 401c5e4:	10800404 	addi	r2,r2,16
 401c5e8:	10000035 	stwio	zero,0(r2)
   
   tse[iface].interruptNR = tse_hw->tse_sgdma_rx_irq;
 401c5ec:	e13ffe17 	ldw	r4,-8(fp)
 401c5f0:	e0bff417 	ldw	r2,-48(fp)
 401c5f4:	1080070b 	ldhu	r2,28(r2)
 401c5f8:	117fffcc 	andi	r5,r2,65535
 401c5fc:	00c101b4 	movhi	r3,1030
 401c600:	18e0f704 	addi	r3,r3,-31780
 401c604:	20801324 	muli	r2,r4,76
 401c608:	10c5883a 	add	r2,r2,r3
 401c60c:	10800904 	addi	r2,r2,36
 401c610:	11400015 	stw	r5,0(r2)
   ifp = tse[iface].netp;
 401c614:	e0bffe17 	ldw	r2,-8(fp)
 401c618:	00c101b4 	movhi	r3,1030
 401c61c:	18e0f704 	addi	r3,r3,-31780
 401c620:	10801324 	muli	r2,r2,76
 401c624:	10c5883a 	add	r2,r2,r3
 401c628:	10800804 	addi	r2,r2,32
 401c62c:	10800017 	ldw	r2,0(r2)
 401c630:	e0bff715 	stw	r2,-36(fp)

   /* reset the PHY if necessary */   
   result = getPHYSpeed(tse[iface].mi.base);
 401c634:	e0bffe17 	ldw	r2,-8(fp)
 401c638:	00c101b4 	movhi	r3,1030
 401c63c:	18e0f704 	addi	r3,r3,-31780
 401c640:	10801324 	muli	r2,r2,76
 401c644:	10c5883a 	add	r2,r2,r3
 401c648:	10800104 	addi	r2,r2,4
 401c64c:	11000017 	ldw	r4,0(r2)
 401c650:	401824c0 	call	401824c <getPHYSpeed>
 401c654:	e0bffa15 	stw	r2,-24(fp)
   speed = (result >> 1) & 0x07;
 401c658:	e0bffa17 	ldw	r2,-24(fp)
 401c65c:	1005d07a 	srai	r2,r2,1
 401c660:	108001cc 	andi	r2,r2,7
 401c664:	e0bffc15 	stw	r2,-16(fp)
   duplex = result & 0x01;
 401c668:	e0bffa17 	ldw	r2,-24(fp)
 401c66c:	1080004c 	andi	r2,r2,1
 401c670:	e0bffb15 	stw	r2,-20(fp)
    
   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 401c674:	e0bffe17 	ldw	r2,-8(fp)
 401c678:	00c101b4 	movhi	r3,1030
 401c67c:	18e0f704 	addi	r3,r3,-31780
 401c680:	10801324 	muli	r2,r2,76
 401c684:	10c5883a 	add	r2,r2,r3
 401c688:	10800104 	addi	r2,r2,4
 401c68c:	10800017 	ldw	r2,0(r2)
 401c690:	10800204 	addi	r2,r2,8
 401c694:	1007883a 	mov	r3,r2
 401c698:	008800c4 	movi	r2,8195
 401c69c:	18800035 	stwio	r2,0(r3)
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
 401c6a0:	e03ff915 	stw	zero,-28(fp)
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 401c6a4:	00000906 	br	401c6cc <tse_mac_init+0x2a8>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
 401c6a8:	e0bff917 	ldw	r2,-28(fp)
 401c6ac:	1089c448 	cmpgei	r2,r2,10001
 401c6b0:	1007883a 	mov	r3,r2
 401c6b4:	e0bff917 	ldw	r2,-28(fp)
 401c6b8:	10800044 	addi	r2,r2,1
 401c6bc:	e0bff915 	stw	r2,-28(fp)
 401c6c0:	18803fcc 	andi	r2,r3,255
 401c6c4:	1004c03a 	cmpne	r2,r2,zero
 401c6c8:	10000c1e 	bne	r2,zero,401c6fc <tse_mac_init+0x2d8>
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
 401c6cc:	e0bffe17 	ldw	r2,-8(fp)
 401c6d0:	00c101b4 	movhi	r3,1030
 401c6d4:	18e0f704 	addi	r3,r3,-31780
 401c6d8:	10801324 	muli	r2,r2,76
 401c6dc:	10c5883a 	add	r2,r2,r3
 401c6e0:	10800104 	addi	r2,r2,4
 401c6e4:	10800017 	ldw	r2,0(r2)
 401c6e8:	10800204 	addi	r2,r2,8
 401c6ec:	10800037 	ldwio	r2,0(r2)
 401c6f0:	1088000c 	andi	r2,r2,8192
 401c6f4:	1004c03a 	cmpne	r2,r2,zero
 401c6f8:	103feb1e 	bne	r2,zero,401c6a8 <tse_mac_init+0x284>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) {
     if( x++ > 10000 ) {
       break;
     }
   }
   if(x >= 10000) {
 401c6fc:	e0bff917 	ldw	r2,-28(fp)
 401c700:	1089c410 	cmplti	r2,r2,10000
 401c704:	1000031e 	bne	r2,zero,401c714 <tse_mac_init+0x2f0>
     dprintf("TSEMAC SW reset bit never cleared!\n");
 401c708:	01010174 	movhi	r4,1029
 401c70c:	2129d004 	addi	r4,r4,-22720
 401c710:	40021940 	call	4002194 <puts>
   }

   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 401c714:	e0bffe17 	ldw	r2,-8(fp)
 401c718:	00c101b4 	movhi	r3,1030
 401c71c:	18e0f704 	addi	r3,r3,-31780
 401c720:	10801324 	muli	r2,r2,76
 401c724:	10c5883a 	add	r2,r2,r3
 401c728:	10800104 	addi	r2,r2,4
 401c72c:	10800017 	ldw	r2,0(r2)
 401c730:	10800204 	addi	r2,r2,8
 401c734:	10800037 	ldwio	r2,0(r2)
 401c738:	e0bffd15 	stw	r2,-12(fp)
   if( (dat & 0x03) != 0 ) {
 401c73c:	e0bffd17 	ldw	r2,-12(fp)
 401c740:	108000cc 	andi	r2,r2,3
 401c744:	1005003a 	cmpeq	r2,r2,zero
 401c748:	1000051e 	bne	r2,zero,401c760 <tse_mac_init+0x33c>
     dprintf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
 401c74c:	01010174 	movhi	r4,1029
 401c750:	2129d904 	addi	r4,r4,-22684
 401c754:	e17ffd17 	ldw	r5,-12(fp)
 401c758:	400207c0 	call	400207c <printf>
 401c75c:	00000506 	br	401c774 <tse_mac_init+0x350>
   } 
   else {
     dprintf("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat);
 401c760:	01010174 	movhi	r4,1029
 401c764:	2129ed04 	addi	r4,r4,-22604
 401c768:	e17ff917 	ldw	r5,-28(fp)
 401c76c:	e1bffd17 	ldw	r6,-12(fp)
 401c770:	400207c0 	call	400207c <printf>
  
    /* Hack code to determine the Channel number <- Someone please fix this ugly code in the future */
    extern alt_u8 mac_group_count;
    extern alt_tse_mac_group *pmac_groups[TSE_MAX_MAC_IN_SYSTEM];
      
    if(tse_hw->use_shared_fifo == 1) {
 401c774:	e0bff417 	ldw	r2,-48(fp)
 401c778:	10800903 	ldbu	r2,36(r2)
 401c77c:	10803fcc 	andi	r2,r2,255
 401c780:	10800058 	cmpnei	r2,r2,1
 401c784:	1000351e 	bne	r2,zero,401c85c <tse_mac_init+0x438>
      int channel_loop = 0;
 401c788:	e03ff215 	stw	zero,-56(fp)
      int mac_loop = 0;
 401c78c:	e03ff115 	stw	zero,-60(fp)
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 401c790:	e03ff215 	stw	zero,-56(fp)
 401c794:	00002b06 	br	401c844 <tse_mac_init+0x420>
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 401c798:	e03ff115 	stw	zero,-60(fp)
 401c79c:	00001b06 	br	401c80c <tse_mac_init+0x3e8>
          if (pmac_groups[channel_loop]->pmac_info[mac_loop]->psys_info == tse_hw) {
 401c7a0:	e0bff217 	ldw	r2,-56(fp)
 401c7a4:	00c101b4 	movhi	r3,1030
 401c7a8:	18e0e304 	addi	r3,r3,-31860
 401c7ac:	1085883a 	add	r2,r2,r2
 401c7b0:	1085883a 	add	r2,r2,r2
 401c7b4:	10c5883a 	add	r2,r2,r3
 401c7b8:	10c00017 	ldw	r3,0(r2)
 401c7bc:	e0bff117 	ldw	r2,-60(fp)
 401c7c0:	1085883a 	add	r2,r2,r2
 401c7c4:	1085883a 	add	r2,r2,r2
 401c7c8:	10c5883a 	add	r2,r2,r3
 401c7cc:	10800104 	addi	r2,r2,4
 401c7d0:	10800017 	ldw	r2,0(r2)
 401c7d4:	10c00217 	ldw	r3,8(r2)
 401c7d8:	e0bff417 	ldw	r2,-48(fp)
 401c7dc:	1880081e 	bne	r3,r2,401c800 <tse_mac_init+0x3dc>
            tse[iface].channel = mac_loop;
 401c7e0:	e0bffe17 	ldw	r2,-8(fp)
 401c7e4:	00c101b4 	movhi	r3,1030
 401c7e8:	18e0f704 	addi	r3,r3,-31780
 401c7ec:	10801324 	muli	r2,r2,76
 401c7f0:	10c5883a 	add	r2,r2,r3
 401c7f4:	10c00d04 	addi	r3,r2,52
 401c7f8:	e0bff117 	ldw	r2,-60(fp)
 401c7fc:	18800015 	stw	r2,0(r3)
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
        for (mac_loop = 0; mac_loop < pmac_groups[channel_loop]->channel; mac_loop ++) {
 401c800:	e0bff117 	ldw	r2,-60(fp)
 401c804:	10800044 	addi	r2,r2,1
 401c808:	e0bff115 	stw	r2,-60(fp)
 401c80c:	e0bff217 	ldw	r2,-56(fp)
 401c810:	00c101b4 	movhi	r3,1030
 401c814:	18e0e304 	addi	r3,r3,-31860
 401c818:	1085883a 	add	r2,r2,r2
 401c81c:	1085883a 	add	r2,r2,r2
 401c820:	10c5883a 	add	r2,r2,r3
 401c824:	10800017 	ldw	r2,0(r2)
 401c828:	10800003 	ldbu	r2,0(r2)
 401c82c:	10c03fcc 	andi	r3,r2,255
 401c830:	e0bff117 	ldw	r2,-60(fp)
 401c834:	10ffda16 	blt	r2,r3,401c7a0 <tse_mac_init+0x37c>
      
    if(tse_hw->use_shared_fifo == 1) {
      int channel_loop = 0;
      int mac_loop = 0;
         
      for (channel_loop = 0; channel_loop < mac_group_count; channel_loop ++) {
 401c838:	e0bff217 	ldw	r2,-56(fp)
 401c83c:	10800044 	addi	r2,r2,1
 401c840:	e0bff215 	stw	r2,-56(fp)
 401c844:	00810174 	movhi	r2,1029
 401c848:	1081bb44 	addi	r2,r2,1773
 401c84c:	10800003 	ldbu	r2,0(r2)
 401c850:	10c03fcc 	andi	r3,r2,255
 401c854:	e0bff217 	ldw	r2,-56(fp)
 401c858:	10ffcf16 	blt	r2,r3,401c798 <tse_mac_init+0x374>
        }
      }
    }
    /* End of Hack code */
  
  if(tse_hw->use_shared_fifo == 1) {
 401c85c:	e0bff417 	ldw	r2,-48(fp)
 401c860:	10800903 	ldbu	r2,36(r2)
 401c864:	10803fcc 	andi	r2,r2,255
 401c868:	10800058 	cmpnei	r2,r2,1
 401c86c:	1000121e 	bne	r2,zero,401c8b8 <tse_mac_init+0x494>
      IOWR_ALTERA_MULTI_CHAN_FIFO_SEC_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,tse_hw->tse_shared_fifo_rx_depth);
 401c870:	e0bff417 	ldw	r2,-48(fp)
 401c874:	10800d17 	ldw	r2,52(r2)
 401c878:	1009883a 	mov	r4,r2
 401c87c:	e0bff417 	ldw	r2,-48(fp)
 401c880:	10800f17 	ldw	r2,60(r2)
 401c884:	1007883a 	mov	r3,r2
 401c888:	2005883a 	mov	r2,r4
 401c88c:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_MULTI_CHAN_FIFO_ALMOST_FULL_THRESHOLD(tse_hw->tse_shared_fifo_rx_ctrl_base,((tse_hw->tse_shared_fifo_rx_depth) - 140));
 401c890:	e0bff417 	ldw	r2,-48(fp)
 401c894:	10800d17 	ldw	r2,52(r2)
 401c898:	11000204 	addi	r4,r2,8
 401c89c:	e0bff417 	ldw	r2,-48(fp)
 401c8a0:	10800f17 	ldw	r2,60(r2)
 401c8a4:	10bfdd04 	addi	r2,r2,-140
 401c8a8:	1007883a 	mov	r3,r2
 401c8ac:	2005883a 	mov	r2,r4
 401c8b0:	10c00035 	stwio	r3,0(r2)
 401c8b4:	00006506 	br	401ca4c <tse_mac_init+0x628>
  }
  else {
      /* Initialize MAC registers */
      IOWR_ALTERA_TSEMAC_FRM_LENGTH(tse[iface].mi.base, ALTERA_TSE_MAC_MAX_FRAME_LENGTH); 
 401c8b8:	e0bffe17 	ldw	r2,-8(fp)
 401c8bc:	00c101b4 	movhi	r3,1030
 401c8c0:	18e0f704 	addi	r3,r3,-31780
 401c8c4:	10801324 	muli	r2,r2,76
 401c8c8:	10c5883a 	add	r2,r2,r3
 401c8cc:	10800104 	addi	r2,r2,4
 401c8d0:	10800017 	ldw	r2,0(r2)
 401c8d4:	10800504 	addi	r2,r2,20
 401c8d8:	1007883a 	mov	r3,r2
 401c8dc:	00817b84 	movi	r2,1518
 401c8e0:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 401c8e4:	e0bffe17 	ldw	r2,-8(fp)
 401c8e8:	00c101b4 	movhi	r3,1030
 401c8ec:	18e0f704 	addi	r3,r3,-31780
 401c8f0:	10801324 	muli	r2,r2,76
 401c8f4:	10c5883a 	add	r2,r2,r3
 401c8f8:	10800104 	addi	r2,r2,4
 401c8fc:	10800017 	ldw	r2,0(r2)
 401c900:	10800b04 	addi	r2,r2,44
 401c904:	1007883a 	mov	r3,r2
 401c908:	00800204 	movi	r2,8
 401c90c:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(tse[iface].mi.base, 8);
 401c910:	e0bffe17 	ldw	r2,-8(fp)
 401c914:	00c101b4 	movhi	r3,1030
 401c918:	18e0f704 	addi	r3,r3,-31780
 401c91c:	10801324 	muli	r2,r2,76
 401c920:	10c5883a 	add	r2,r2,r3
 401c924:	10800104 	addi	r2,r2,4
 401c928:	10800017 	ldw	r2,0(r2)
 401c92c:	10800c04 	addi	r2,r2,48
 401c930:	1007883a 	mov	r3,r2
 401c934:	00800204 	movi	r2,8
 401c938:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(tse[iface].mi.base, 8);
 401c93c:	e0bffe17 	ldw	r2,-8(fp)
 401c940:	00c101b4 	movhi	r3,1030
 401c944:	18e0f704 	addi	r3,r3,-31780
 401c948:	10801324 	muli	r2,r2,76
 401c94c:	10c5883a 	add	r2,r2,r3
 401c950:	10800104 	addi	r2,r2,4
 401c954:	10800017 	ldw	r2,0(r2)
 401c958:	10800d04 	addi	r2,r2,52
 401c95c:	1007883a 	mov	r3,r2
 401c960:	00800204 	movi	r2,8
 401c964:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(tse[iface].mi.base,  3);
 401c968:	e0bffe17 	ldw	r2,-8(fp)
 401c96c:	00c101b4 	movhi	r3,1030
 401c970:	18e0f704 	addi	r3,r3,-31780
 401c974:	10801324 	muli	r2,r2,76
 401c978:	10c5883a 	add	r2,r2,r3
 401c97c:	10800104 	addi	r2,r2,4
 401c980:	10800017 	ldw	r2,0(r2)
 401c984:	10800e04 	addi	r2,r2,56
 401c988:	1007883a 	mov	r3,r2
 401c98c:	008000c4 	movi	r2,3
 401c990:	18800035 	stwio	r2,0(r3)
      IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_tx_depth - 16); //1024/4;  
 401c994:	e0bffe17 	ldw	r2,-8(fp)
 401c998:	00c101b4 	movhi	r3,1030
 401c99c:	18e0f704 	addi	r3,r3,-31780
 401c9a0:	10801324 	muli	r2,r2,76
 401c9a4:	10c5883a 	add	r2,r2,r3
 401c9a8:	10800104 	addi	r2,r2,4
 401c9ac:	10800017 	ldw	r2,0(r2)
 401c9b0:	11000904 	addi	r4,r2,36
 401c9b4:	e0bff417 	ldw	r2,-48(fp)
 401c9b8:	1080010b 	ldhu	r2,4(r2)
 401c9bc:	10bfffcc 	andi	r2,r2,65535
 401c9c0:	10fffc04 	addi	r3,r2,-16
 401c9c4:	2005883a 	mov	r2,r4
 401c9c8:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(tse[iface].mi.base,  0); //32/4; // start transmit when there are 48 bytes
 401c9cc:	e0bffe17 	ldw	r2,-8(fp)
 401c9d0:	00c101b4 	movhi	r3,1030
 401c9d4:	18e0f704 	addi	r3,r3,-31780
 401c9d8:	10801324 	muli	r2,r2,76
 401c9dc:	10c5883a 	add	r2,r2,r3
 401c9e0:	10800104 	addi	r2,r2,4
 401c9e4:	10800017 	ldw	r2,0(r2)
 401c9e8:	10800a04 	addi	r2,r2,40
 401c9ec:	10000035 	stwio	zero,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(tse[iface].mi.base, tse_hw->tse_rx_depth - 16); //4000/4);
 401c9f0:	e0bffe17 	ldw	r2,-8(fp)
 401c9f4:	00c101b4 	movhi	r3,1030
 401c9f8:	18e0f704 	addi	r3,r3,-31780
 401c9fc:	10801324 	muli	r2,r2,76
 401ca00:	10c5883a 	add	r2,r2,r3
 401ca04:	10800104 	addi	r2,r2,4
 401ca08:	10800017 	ldw	r2,0(r2)
 401ca0c:	11000704 	addi	r4,r2,28
 401ca10:	e0bff417 	ldw	r2,-48(fp)
 401ca14:	1080018b 	ldhu	r2,6(r2)
 401ca18:	10bfffcc 	andi	r2,r2,65535
 401ca1c:	10fffc04 	addi	r3,r2,-16
 401ca20:	2005883a 	mov	r2,r4
 401ca24:	10c00035 	stwio	r3,0(r2)
      IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(tse[iface].mi.base,  0);
 401ca28:	e0bffe17 	ldw	r2,-8(fp)
 401ca2c:	00c101b4 	movhi	r3,1030
 401ca30:	18e0f704 	addi	r3,r3,-31780
 401ca34:	10801324 	muli	r2,r2,76
 401ca38:	10c5883a 	add	r2,r2,r3
 401ca3c:	10800104 	addi	r2,r2,4
 401ca40:	10800017 	ldw	r2,0(r2)
 401ca44:	10800804 	addi	r2,r2,32
 401ca48:	10000035 	stwio	zero,0(r2)
      tse[iface].rxShift16OK = 0;
    }
  } /* if(ETHHDR_BIAS == 0) */
 
  if(ETHHDR_BIAS == 2) {
    IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 401ca4c:	e0bffe17 	ldw	r2,-8(fp)
 401ca50:	00c101b4 	movhi	r3,1030
 401ca54:	18e0f704 	addi	r3,r3,-31780
 401ca58:	10801324 	muli	r2,r2,76
 401ca5c:	10c5883a 	add	r2,r2,r3
 401ca60:	10800104 	addi	r2,r2,4
 401ca64:	10800017 	ldw	r2,0(r2)
 401ca68:	10803a04 	addi	r2,r2,232
 401ca6c:	1007883a 	mov	r3,r2
 401ca70:	00800134 	movhi	r2,4
 401ca74:	18800035 	stwio	r2,0(r3)
 
    /*
     * check if the MAC supports the 16-bit shift option allowing us
     * to send BIASed frames without copying. Used by the send function later.
     */
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
 401ca78:	e0bffe17 	ldw	r2,-8(fp)
 401ca7c:	00c101b4 	movhi	r3,1030
 401ca80:	18e0f704 	addi	r3,r3,-31780
 401ca84:	10801324 	muli	r2,r2,76
 401ca88:	10c5883a 	add	r2,r2,r3
 401ca8c:	10800104 	addi	r2,r2,4
 401ca90:	10800017 	ldw	r2,0(r2)
 401ca94:	10803a04 	addi	r2,r2,232
 401ca98:	10800037 	ldwio	r2,0(r2)
 401ca9c:	1080012c 	andhi	r2,r2,4
 401caa0:	1005003a 	cmpeq	r2,r2,zero
 401caa4:	1000201e 	bne	r2,zero,401cb28 <tse_mac_init+0x704>
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
 401caa8:	e0bffe17 	ldw	r2,-8(fp)
 401caac:	00c101b4 	movhi	r3,1030
 401cab0:	18e0f704 	addi	r3,r3,-31780
 401cab4:	10801324 	muli	r2,r2,76
 401cab8:	10c5883a 	add	r2,r2,r3
 401cabc:	10c00a04 	addi	r3,r2,40
 401cac0:	00800044 	movi	r2,1
 401cac4:	18800015 	stw	r2,0(r3)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
      return ENP_LOGIC;
    }
  
    /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 401cac8:	e0bffe17 	ldw	r2,-8(fp)
 401cacc:	00c101b4 	movhi	r3,1030
 401cad0:	18e0f704 	addi	r3,r3,-31780
 401cad4:	10801324 	muli	r2,r2,76
 401cad8:	10c5883a 	add	r2,r2,r3
 401cadc:	10800104 	addi	r2,r2,4
 401cae0:	10800017 	ldw	r2,0(r2)
 401cae4:	10803b04 	addi	r2,r2,236
 401cae8:	1007883a 	mov	r3,r2
 401caec:	00808034 	movhi	r2,512
 401caf0:	18800035 	stwio	r2,0(r3)
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
 401caf4:	e0bffe17 	ldw	r2,-8(fp)
 401caf8:	00c101b4 	movhi	r3,1030
 401cafc:	18e0f704 	addi	r3,r3,-31780
 401cb00:	10801324 	muli	r2,r2,76
 401cb04:	10c5883a 	add	r2,r2,r3
 401cb08:	10800104 	addi	r2,r2,4
 401cb0c:	10800017 	ldw	r2,0(r2)
 401cb10:	10803b04 	addi	r2,r2,236
 401cb14:	10800037 	ldwio	r2,0(r2)
 401cb18:	1080802c 	andhi	r2,r2,512
 401cb1c:	1004c03a 	cmpne	r2,r2,zero
 401cb20:	10000f1e 	bne	r2,zero,401cb60 <tse_mac_init+0x73c>
 401cb24:	00001d06 	br	401cb9c <tse_mac_init+0x778>
    if(IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) &
      ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) {
      tse[iface].txShift16OK = 1;
    } 
    else {
      tse[iface].txShift16OK = 0;
 401cb28:	e0bffe17 	ldw	r2,-8(fp)
 401cb2c:	00c101b4 	movhi	r3,1030
 401cb30:	18e0f704 	addi	r3,r3,-31780
 401cb34:	10801324 	muli	r2,r2,76
 401cb38:	10c5883a 	add	r2,r2,r3
 401cb3c:	10800a04 	addi	r2,r2,40
 401cb40:	10000015 	stw	zero,0(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETHHDR_BIAS);
 401cb44:	01010174 	movhi	r4,1029
 401cb48:	2129f504 	addi	r4,r4,-22572
 401cb4c:	01400084 	movi	r5,2
 401cb50:	400207c0 	call	400207c <printf>
      return ENP_LOGIC;
 401cb54:	00bffd44 	movi	r2,-11
 401cb58:	e0bfff15 	stw	r2,-4(fp)
 401cb5c:	0000e506 	br	401cef4 <tse_mac_init+0xad0>
    IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 
    /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
 401cb60:	e0bffe17 	ldw	r2,-8(fp)
 401cb64:	00c101b4 	movhi	r3,1030
 401cb68:	18e0f704 	addi	r3,r3,-31780
 401cb6c:	10801324 	muli	r2,r2,76
 401cb70:	10c5883a 	add	r2,r2,r3
 401cb74:	10c00b04 	addi	r3,r2,44
 401cb78:	00800044 	movi	r2,1
 401cb7c:	18800015 	stw	r2,0(r3)
      return ENP_LOGIC;
    }
  } /* if(ETHHDR_BIAS == 2) */
  
  /* enable MAC */
  dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
 401cb80:	00810034 	movhi	r2,1024
 401cb84:	108080c4 	addi	r2,r2,515
 401cb88:	e0bffd15 	stw	r2,-12(fp)
        ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
 401cb8c:	e0bffc17 	ldw	r2,-16(fp)
 401cb90:	10800060 	cmpeqi	r2,r2,1
 401cb94:	10000f1e 	bne	r2,zero,401cbd4 <tse_mac_init+0x7b0>
 401cb98:	00001706 	br	401cbf8 <tse_mac_init+0x7d4>
    if(IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK)
    {
      tse[iface].rxShift16OK = 1;
    } 
    else {
      tse[iface].rxShift16OK = 0;
 401cb9c:	e0bffe17 	ldw	r2,-8(fp)
 401cba0:	00c101b4 	movhi	r3,1030
 401cba4:	18e0f704 	addi	r3,r3,-31780
 401cba8:	10801324 	muli	r2,r2,76
 401cbac:	10c5883a 	add	r2,r2,r3
 401cbb0:	10800b04 	addi	r2,r2,44
 401cbb4:	10000015 	stw	zero,0(r2)
      dprintf("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETHHDR_BIAS);
 401cbb8:	01010174 	movhi	r4,1029
 401cbbc:	212a0d04 	addi	r4,r4,-22476
 401cbc0:	01400084 	movi	r5,2
 401cbc4:	400207c0 	call	400207c <printf>
      return ENP_LOGIC;
 401cbc8:	00bffd44 	movi	r2,-11
 401cbcc:	e0bfff15 	stw	r2,-4(fp)
 401cbd0:	0000c806 	br	401cef4 <tse_mac_init+0xad0>
        ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
  
  /* 1000 Mbps */
  if(speed == 0x01) {
    dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 401cbd4:	e0bffd17 	ldw	r2,-12(fp)
 401cbd8:	10800214 	ori	r2,r2,8
 401cbdc:	e0bffd15 	stw	r2,-12(fp)
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 401cbe0:	e0fffd17 	ldw	r3,-12(fp)
 401cbe4:	00bf8034 	movhi	r2,65024
 401cbe8:	10bfffc4 	addi	r2,r2,-1
 401cbec:	1884703a 	and	r2,r3,r2
 401cbf0:	e0bffd15 	stw	r2,-12(fp)
 401cbf4:	00002106 	br	401cc7c <tse_mac_init+0x858>
  }
  /* 100 Mbps */
  else if(speed == 0x02) {
 401cbf8:	e0bffc17 	ldw	r2,-16(fp)
 401cbfc:	10800098 	cmpnei	r2,r2,2
 401cc00:	10000a1e 	bne	r2,zero,401cc2c <tse_mac_init+0x808>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 401cc04:	e0fffd17 	ldw	r3,-12(fp)
 401cc08:	00bffdc4 	movi	r2,-9
 401cc0c:	1884703a 	and	r2,r3,r2
 401cc10:	e0bffd15 	stw	r2,-12(fp)
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 401cc14:	e0fffd17 	ldw	r3,-12(fp)
 401cc18:	00bf8034 	movhi	r2,65024
 401cc1c:	10bfffc4 	addi	r2,r2,-1
 401cc20:	1884703a 	and	r2,r3,r2
 401cc24:	e0bffd15 	stw	r2,-12(fp)
 401cc28:	00001406 	br	401cc7c <tse_mac_init+0x858>
  }
  /* 10 Mbps */
  else if(speed == 0x04) {
 401cc2c:	e0bffc17 	ldw	r2,-16(fp)
 401cc30:	10800118 	cmpnei	r2,r2,4
 401cc34:	1000081e 	bne	r2,zero,401cc58 <tse_mac_init+0x834>
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 401cc38:	e0fffd17 	ldw	r3,-12(fp)
 401cc3c:	00bffdc4 	movi	r2,-9
 401cc40:	1884703a 	and	r2,r3,r2
 401cc44:	e0bffd15 	stw	r2,-12(fp)
	dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 401cc48:	e0bffd17 	ldw	r2,-12(fp)
 401cc4c:	10808034 	orhi	r2,r2,512
 401cc50:	e0bffd15 	stw	r2,-12(fp)
 401cc54:	00000906 	br	401cc7c <tse_mac_init+0x858>
  }
  /* default to 100 Mbps if returned invalid speed */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 401cc58:	e0fffd17 	ldw	r3,-12(fp)
 401cc5c:	00bffdc4 	movi	r2,-9
 401cc60:	1884703a 	and	r2,r3,r2
 401cc64:	e0bffd15 	stw	r2,-12(fp)
	dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 401cc68:	e0fffd17 	ldw	r3,-12(fp)
 401cc6c:	00bf8034 	movhi	r2,65024
 401cc70:	10bfffc4 	addi	r2,r2,-1
 401cc74:	1884703a 	and	r2,r3,r2
 401cc78:	e0bffd15 	stw	r2,-12(fp)
  }
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 401cc7c:	e0bffb17 	ldw	r2,-20(fp)
 401cc80:	1004c03a 	cmpne	r2,r2,zero
 401cc84:	1000041e 	bne	r2,zero,401cc98 <tse_mac_init+0x874>
    dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 401cc88:	e0bffd17 	ldw	r2,-12(fp)
 401cc8c:	10810014 	ori	r2,r2,1024
 401cc90:	e0bffd15 	stw	r2,-12(fp)
 401cc94:	00000406 	br	401cca8 <tse_mac_init+0x884>
  }
  /* Full Duplex */
  else {
    dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 401cc98:	e0bffd17 	ldw	r2,-12(fp)
 401cc9c:	00feffc4 	movi	r3,-1025
 401cca0:	10c4703a 	and	r2,r2,r3
 401cca4:	e0bffd15 	stw	r2,-12(fp)
  }
          
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 401cca8:	e0bffe17 	ldw	r2,-8(fp)
 401ccac:	00c101b4 	movhi	r3,1030
 401ccb0:	18e0f704 	addi	r3,r3,-31780
 401ccb4:	10801324 	muli	r2,r2,76
 401ccb8:	10c5883a 	add	r2,r2,r3
 401ccbc:	10800104 	addi	r2,r2,4
 401ccc0:	10800017 	ldw	r2,0(r2)
 401ccc4:	10800204 	addi	r2,r2,8
 401ccc8:	1007883a 	mov	r3,r2
 401cccc:	e0bffd17 	ldw	r2,-12(fp)
 401ccd0:	18800035 	stwio	r2,0(r3)
  dprintf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
 401ccd4:	e0bffe17 	ldw	r2,-8(fp)
 401ccd8:	00c101b4 	movhi	r3,1030
 401ccdc:	18e0f704 	addi	r3,r3,-31780
 401cce0:	10801324 	muli	r2,r2,76
 401cce4:	10c5883a 	add	r2,r2,r3
 401cce8:	10800104 	addi	r2,r2,4
 401ccec:	10800017 	ldw	r2,0(r2)
 401ccf0:	10800204 	addi	r2,r2,8
 401ccf4:	11400037 	ldwio	r5,0(r2)
 401ccf8:	01010174 	movhi	r4,1029
 401ccfc:	212a2504 	addi	r4,r4,-22380
 401cd00:	400207c0 	call	400207c <printf>
  IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
  
                          
#ifdef ALT_INICHE
   /* Set the MAC address */  
   IOWR_ALTERA_TSEMAC_MAC_0(tse[iface].mi.base,
 401cd04:	e0bffe17 	ldw	r2,-8(fp)
 401cd08:	00c101b4 	movhi	r3,1030
 401cd0c:	18e0f704 	addi	r3,r3,-31780
 401cd10:	10801324 	muli	r2,r2,76
 401cd14:	10c5883a 	add	r2,r2,r3
 401cd18:	10800104 	addi	r2,r2,4
 401cd1c:	10800017 	ldw	r2,0(r2)
 401cd20:	11400304 	addi	r5,r2,12
 401cd24:	e0bffe17 	ldw	r2,-8(fp)
 401cd28:	00c101b4 	movhi	r3,1030
 401cd2c:	18e0f704 	addi	r3,r3,-31780
 401cd30:	10801324 	muli	r2,r2,76
 401cd34:	10c5883a 	add	r2,r2,r3
 401cd38:	10800604 	addi	r2,r2,24
 401cd3c:	10800003 	ldbu	r2,0(r2)
 401cd40:	11003fcc 	andi	r4,r2,255
 401cd44:	e0bffe17 	ldw	r2,-8(fp)
 401cd48:	00c101b4 	movhi	r3,1030
 401cd4c:	18e0f704 	addi	r3,r3,-31780
 401cd50:	10801324 	muli	r2,r2,76
 401cd54:	10c5883a 	add	r2,r2,r3
 401cd58:	10800644 	addi	r2,r2,25
 401cd5c:	10800003 	ldbu	r2,0(r2)
 401cd60:	10803fcc 	andi	r2,r2,255
 401cd64:	1004923a 	slli	r2,r2,8
 401cd68:	2088b03a 	or	r4,r4,r2
 401cd6c:	e0bffe17 	ldw	r2,-8(fp)
 401cd70:	00c101b4 	movhi	r3,1030
 401cd74:	18e0f704 	addi	r3,r3,-31780
 401cd78:	10801324 	muli	r2,r2,76
 401cd7c:	10c5883a 	add	r2,r2,r3
 401cd80:	10800684 	addi	r2,r2,26
 401cd84:	10800003 	ldbu	r2,0(r2)
 401cd88:	10803fcc 	andi	r2,r2,255
 401cd8c:	1004943a 	slli	r2,r2,16
 401cd90:	2088b03a 	or	r4,r4,r2
 401cd94:	e0bffe17 	ldw	r2,-8(fp)
 401cd98:	00c101b4 	movhi	r3,1030
 401cd9c:	18e0f704 	addi	r3,r3,-31780
 401cda0:	10801324 	muli	r2,r2,76
 401cda4:	10c5883a 	add	r2,r2,r3
 401cda8:	108006c4 	addi	r2,r2,27
 401cdac:	10800003 	ldbu	r2,0(r2)
 401cdb0:	10803fcc 	andi	r2,r2,255
 401cdb4:	1004963a 	slli	r2,r2,24
 401cdb8:	2086b03a 	or	r3,r4,r2
 401cdbc:	2805883a 	mov	r2,r5
 401cdc0:	10c00035 	stwio	r3,0(r2)
                           ((int)((unsigned char) tse[iface].mac_addr[0]) | 
                            (int)((unsigned char) tse[iface].mac_addr[1] <<  8) |
                            (int)((unsigned char) tse[iface].mac_addr[2] << 16) | 
                            (int)((unsigned char) tse[iface].mac_addr[3] << 24)));
  
   IOWR_ALTERA_TSEMAC_MAC_1(tse[iface].mi.base, 
 401cdc4:	e0bffe17 	ldw	r2,-8(fp)
 401cdc8:	00c101b4 	movhi	r3,1030
 401cdcc:	18e0f704 	addi	r3,r3,-31780
 401cdd0:	10801324 	muli	r2,r2,76
 401cdd4:	10c5883a 	add	r2,r2,r3
 401cdd8:	10800104 	addi	r2,r2,4
 401cddc:	10800017 	ldw	r2,0(r2)
 401cde0:	11400404 	addi	r5,r2,16
 401cde4:	e0bffe17 	ldw	r2,-8(fp)
 401cde8:	00c101b4 	movhi	r3,1030
 401cdec:	18e0f704 	addi	r3,r3,-31780
 401cdf0:	10801324 	muli	r2,r2,76
 401cdf4:	10c5883a 	add	r2,r2,r3
 401cdf8:	10800704 	addi	r2,r2,28
 401cdfc:	10800003 	ldbu	r2,0(r2)
 401ce00:	11003fcc 	andi	r4,r2,255
 401ce04:	e0bffe17 	ldw	r2,-8(fp)
 401ce08:	00c101b4 	movhi	r3,1030
 401ce0c:	18e0f704 	addi	r3,r3,-31780
 401ce10:	10801324 	muli	r2,r2,76
 401ce14:	10c5883a 	add	r2,r2,r3
 401ce18:	10800744 	addi	r2,r2,29
 401ce1c:	10800003 	ldbu	r2,0(r2)
 401ce20:	10803fcc 	andi	r2,r2,255
 401ce24:	1004923a 	slli	r2,r2,8
 401ce28:	2084b03a 	or	r2,r4,r2
 401ce2c:	10ffffcc 	andi	r3,r2,65535
 401ce30:	2805883a 	mov	r2,r5
 401ce34:	10c00035 	stwio	r3,0(r2)
   tse[iface].mac_addr[5] = 0xBA;

#endif /* not ALT_INICHE */

   /* status = UP */ 
   nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_UP;    
 401ce38:	e0bffe17 	ldw	r2,-8(fp)
 401ce3c:	00c101b4 	movhi	r3,1030
 401ce40:	18e20804 	addi	r3,r3,-30688
 401ce44:	1085883a 	add	r2,r2,r2
 401ce48:	1085883a 	add	r2,r2,r2
 401ce4c:	10c5883a 	add	r2,r2,r3
 401ce50:	10800017 	ldw	r2,0(r2)
 401ce54:	10c02717 	ldw	r3,156(r2)
 401ce58:	00800044 	movi	r2,1
 401ce5c:	18800615 	stw	r2,24(r3)
   nets[iface]->n_mib->ifOperStatus =  ALTERA_TSE_ADMIN_STATUS_UP;
 401ce60:	e0bffe17 	ldw	r2,-8(fp)
 401ce64:	00c101b4 	movhi	r3,1030
 401ce68:	18e20804 	addi	r3,r3,-30688
 401ce6c:	1085883a 	add	r2,r2,r2
 401ce70:	1085883a 	add	r2,r2,r2
 401ce74:	10c5883a 	add	r2,r2,r3
 401ce78:	10800017 	ldw	r2,0(r2)
 401ce7c:	10c02717 	ldw	r3,156(r2)
 401ce80:	00800044 	movi	r2,1
 401ce84:	18800715 	stw	r2,28(r3)
   
   /* Install SGDMA (RX) interrupt handler */
   alt_avalon_sgdma_register_callback(
 401ce88:	e0bffe17 	ldw	r2,-8(fp)
 401ce8c:	00c101b4 	movhi	r3,1030
 401ce90:	18e0f704 	addi	r3,r3,-31780
 401ce94:	10801324 	muli	r2,r2,76
 401ce98:	10c5883a 	add	r2,r2,r3
 401ce9c:	10800304 	addi	r2,r2,12
 401cea0:	11000017 	ldw	r4,0(r2)
 401cea4:	e0bffe17 	ldw	r2,-8(fp)
 401cea8:	10801324 	muli	r2,r2,76
 401ceac:	1007883a 	mov	r3,r2
 401ceb0:	008101b4 	movhi	r2,1030
 401ceb4:	10a0f704 	addi	r2,r2,-31780
 401ceb8:	188f883a 	add	r7,r3,r2
 401cebc:	014100b4 	movhi	r5,1026
 401cec0:	29748104 	addi	r5,r5,-11772
 401cec4:	01800604 	movi	r6,24
 401cec8:	401633c0 	call	401633c <alt_avalon_sgdma_register_callback>
        tse[iface].mi.rx_sgdma,
        (alt_avalon_sgdma_callback)&tse_sgdmaRx_isr,
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,
        (void*)(&tse[iface]));
    
  status = tse_sgdma_read_init(&tse[iface]);
 401cecc:	e0bffe17 	ldw	r2,-8(fp)
 401ced0:	10801324 	muli	r2,r2,76
 401ced4:	1007883a 	mov	r3,r2
 401ced8:	008101b4 	movhi	r2,1030
 401cedc:	10a0f704 	addi	r2,r2,-31780
 401cee0:	1889883a 	add	r4,r3,r2
 401cee4:	401d2ac0 	call	401d2ac <tse_sgdma_read_init>
 401cee8:	e0bff815 	stw	r2,-32(fp)
  
  return status;
 401ceec:	e0bff817 	ldw	r2,-32(fp)
 401cef0:	e0bfff15 	stw	r2,-4(fp)
 401cef4:	e0bfff17 	ldw	r2,-4(fp)
}
 401cef8:	e037883a 	mov	sp,fp
 401cefc:	dfc00117 	ldw	ra,4(sp)
 401cf00:	df000017 	ldw	fp,0(sp)
 401cf04:	dec00204 	addi	sp,sp,8
 401cf08:	f800283a 	ret

0401cf0c <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
int tse_mac_raw_send(NET net, char * data, unsigned data_bytes)
{
 401cf0c:	defe6304 	addi	sp,sp,-1652
 401cf10:	dfc19c15 	stw	ra,1648(sp)
 401cf14:	df019b15 	stw	fp,1644(sp)
 401cf18:	df019b04 	addi	fp,sp,1644
 401cf1c:	e13ffc15 	stw	r4,-16(fp)
 401cf20:	e17ffd15 	stw	r5,-12(fp)
 401cf24:	e1bffe15 	stw	r6,-8(fp)
   int result,i,tx_length;
   unsigned len = data_bytes;
 401cf28:	e0bffe17 	ldw	r2,-8(fp)
 401cf2c:	e0be7215 	stw	r2,-1592(fp)

   ins_tse_info* tse_ptr = (ins_tse_info*) net->n_local;
 401cf30:	e0bffc17 	ldw	r2,-16(fp)
 401cf34:	10802817 	ldw	r2,160(r2)
 401cf38:	e0be7115 	stw	r2,-1596(fp)

   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse_ptr->tse;
 401cf3c:	e0be7117 	ldw	r2,-1596(fp)
 401cf40:	10801217 	ldw	r2,72(r2)
 401cf44:	e0be7015 	stw	r2,-1600(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cf48:	0005303a 	rdctl	r2,status
 401cf4c:	e0be6c15 	stw	r2,-1616(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cf50:	e0fe6c17 	ldw	r3,-1616(fp)
 401cf54:	00bfff84 	movi	r2,-2
 401cf58:	1884703a 	and	r2,r3,r2
 401cf5c:	1001703a 	wrctl	status,r2
  
  return context;
 401cf60:	e0be6c17 	ldw	r2,-1616(fp)
   unsigned int* ActualData;
   int cpu_sr;
   /* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
   char buf2[1560];

   OS_ENTER_CRITICAL();
 401cf64:	e0be6d15 	stw	r2,-1612(fp)
   mi = &tse_ptr->mi;
 401cf68:	e0be7117 	ldw	r2,-1596(fp)
 401cf6c:	10800104 	addi	r2,r2,4
 401cf70:	e0be6f15 	stw	r2,-1604(fp)
   
   if(tse_ptr->sem!=0) /* Tx is busy*/
 401cf74:	e0be7117 	ldw	r2,-1596(fp)
 401cf78:	10800c17 	ldw	r2,48(r2)
 401cf7c:	1005003a 	cmpeq	r2,r2,zero
 401cf80:	10000a1e 	bne	r2,zero,401cfac <tse_mac_raw_send+0xa0>
   {
      dprintf("raw_send CALLED AGAIN!!!\n");
 401cf84:	01010174 	movhi	r4,1029
 401cf88:	212a3104 	addi	r4,r4,-22332
 401cf8c:	40021940 	call	4002194 <puts>
 401cf90:	e0be6d17 	ldw	r2,-1612(fp)
 401cf94:	e0be6b15 	stw	r2,-1620(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cf98:	e0be6b17 	ldw	r2,-1620(fp)
 401cf9c:	1001703a 	wrctl	status,r2
      OS_EXIT_CRITICAL();
      return ENP_RESOURCE;
 401cfa0:	00bffa84 	movi	r2,-22
 401cfa4:	e0bfff15 	stw	r2,-4(fp)
 401cfa8:	00009006 	br	401d1ec <tse_mac_raw_send+0x2e0>
   }
 
   tse_ptr->sem = 1;  
 401cfac:	e0fe7117 	ldw	r3,-1596(fp)
 401cfb0:	00800044 	movi	r2,1
 401cfb4:	18800c15 	stw	r2,48(r3)

   if(((unsigned long)data & 0x03) == 0) 
 401cfb8:	e0bffd17 	ldw	r2,-12(fp)
 401cfbc:	108000cc 	andi	r2,r2,3
 401cfc0:	1004c03a 	cmpne	r2,r2,zero
 401cfc4:	1000031e 	bne	r2,zero,401cfd4 <tse_mac_raw_send+0xc8>
   { 
      /* 32-bit aligned start, then header starts ETHHDR_BIAS later => 16 bit shift is ok */    
      ActualData = (unsigned int*)data;  /* base driver will detect 16-bit shift. */
 401cfc8:	e0bffd17 	ldw	r2,-12(fp)
 401cfcc:	e0be6e15 	stw	r2,-1608(fp)
 401cfd0:	00001406 	br	401d024 <tse_mac_raw_send+0x118>
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
 401cfd4:	e03e7415 	stw	zero,-1584(fp)
 401cfd8:	00000d06 	br	401d010 <tse_mac_raw_send+0x104>
         buf2[i] = IORD_8DIRECT(&data[i], 0);
 401cfdc:	e13e7417 	ldw	r4,-1584(fp)
 401cfe0:	e0be7417 	ldw	r2,-1584(fp)
 401cfe4:	1007883a 	mov	r3,r2
 401cfe8:	e0bffd17 	ldw	r2,-12(fp)
 401cfec:	1885883a 	add	r2,r3,r2
 401cff0:	10800023 	ldbuio	r2,0(r2)
 401cff4:	1007883a 	mov	r3,r2
 401cff8:	e0be7604 	addi	r2,fp,-1576
 401cffc:	1105883a 	add	r2,r2,r4
 401d000:	10c00005 	stb	r3,0(r2)
      /* 
       * Copy data to temporary buffer <buf2>. This is done because of allignment 
       * issues. The SGDMA cannot copy the data directly from (data + ETHHDR_BIAS)
       * because it needs a 32-bit alligned address space. 
       */
      for(i=0;i<len;i++) {
 401d004:	e0be7417 	ldw	r2,-1584(fp)
 401d008:	10800044 	addi	r2,r2,1
 401d00c:	e0be7415 	stw	r2,-1584(fp)
 401d010:	e0fe7417 	ldw	r3,-1584(fp)
 401d014:	e0be7217 	ldw	r2,-1592(fp)
 401d018:	18bff036 	bltu	r3,r2,401cfdc <tse_mac_raw_send+0xd0>
         buf2[i] = IORD_8DIRECT(&data[i], 0);
      }
      ActualData = (unsigned int*)buf2;
 401d01c:	e0be7604 	addi	r2,fp,-1576
 401d020:	e0be6e15 	stw	r2,-1608(fp)
   }  
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);
 401d024:	e13e6e17 	ldw	r4,-1608(fp)
 401d028:	01400104 	movi	r5,4
 401d02c:	4035e140 	call	4035e14 <alt_remap_cached>
 401d030:	e0be6e15 	stw	r2,-1608(fp)

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 401d034:	e0be7017 	ldw	r2,-1600(fp)
 401d038:	10800903 	ldbu	r2,36(r2)
 401d03c:	10803fcc 	andi	r2,r2,255
 401d040:	10800058 	cmpnei	r2,r2,1
 401d044:	1000241e 	bne	r2,zero,401d0d8 <tse_mac_raw_send+0x1cc>
 401d048:	e0be7217 	ldw	r2,-1592(fp)
 401d04c:	108003f0 	cmpltui	r2,r2,15
 401d050:	1000211e 	bne	r2,zero,401d0d8 <tse_mac_raw_send+0x1cc>
 401d054:	e0be7017 	ldw	r2,-1600(fp)
 401d058:	10800b17 	ldw	r2,44(r2)
 401d05c:	1007883a 	mov	r3,r2
 401d060:	e0be7117 	ldw	r2,-1596(fp)
 401d064:	10800d17 	ldw	r2,52(r2)
 401d068:	1085883a 	add	r2,r2,r2
 401d06c:	1085883a 	add	r2,r2,r2
 401d070:	1885883a 	add	r2,r3,r2
 401d074:	10800037 	ldwio	r2,0(r2)
 401d078:	10800388 	cmpgei	r2,r2,14
 401d07c:	1000161e 	bne	r2,zero,401d0d8 <tse_mac_raw_send+0x1cc>
   {
        /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
 401d080:	e0be7117 	ldw	r2,-1596(fp)
 401d084:	11000f17 	ldw	r4,60(r2)
 401d088:	e0be7117 	ldw	r2,-1596(fp)
 401d08c:	10800f17 	ldw	r2,60(r2)
 401d090:	11400804 	addi	r5,r2,32
 401d094:	e1be6e17 	ldw	r6,-1608(fp)
 401d098:	e0be7217 	ldw	r2,-1592(fp)
 401d09c:	11ffffcc 	andi	r7,r2,65535
 401d0a0:	d8000015 	stw	zero,0(sp)
 401d0a4:	00800044 	movi	r2,1
 401d0a8:	d8800115 	stw	r2,4(sp)
 401d0ac:	00800044 	movi	r2,1
 401d0b0:	d8800215 	stw	r2,8(sp)
 401d0b4:	d8000315 	stw	zero,12(sp)
 401d0b8:	40162440 	call	4016244 <alt_avalon_sgdma_construct_mem_to_stream_desc>
           0,                                        // don't read from constant address
           1,                                        // generate sop
           1,                                        // generate endofpacket signal
           0);                                       // atlantic channel (don't know/don't care: set to 0)

        tx_length = tse_mac_sTxWrite(mi,tse_ptr->desc);
 401d0bc:	e0be7117 	ldw	r2,-1596(fp)
 401d0c0:	11400f17 	ldw	r5,60(r2)
 401d0c4:	e13e6f17 	ldw	r4,-1604(fp)
 401d0c8:	4016da00 	call	4016da0 <tse_mac_sTxWrite>
 401d0cc:	e0be7315 	stw	r2,-1588(fp)
        result = 0;
 401d0d0:	e03e7515 	stw	zero,-1580(fp)
   
     // clear bit-31 before passing it to SGDMA Driver
    ActualData = (unsigned int*)alt_remap_cached ((volatile void*) ActualData, 4);

   /* Write data to Tx FIFO using the DMA */
   if((tse_hw->use_shared_fifo == 1) && (( len > ALTERA_TSE_MIN_MTU_SIZE )) && (IORD_ALTERA_MULTI_CHAN_FILL_LEVEL(tse_hw->tse_shared_fifo_tx_stat_base, tse_ptr->channel) < ALTERA_TSE_MIN_MTU_SIZE))
 401d0d4:	00001b06 	br	401d144 <tse_mac_raw_send+0x238>
           0);                                       // atlantic channel (don't know/don't care: set to 0)

        tx_length = tse_mac_sTxWrite(mi,tse_ptr->desc);
        result = 0;
   }
   else if( len > ALTERA_TSE_MIN_MTU_SIZE ) {    
 401d0d8:	e0be7217 	ldw	r2,-1592(fp)
 401d0dc:	108003f0 	cmpltui	r2,r2,15
 401d0e0:	1000161e 	bne	r2,zero,401d13c <tse_mac_raw_send+0x230>

       /* make sure there is room in the FIFO.        */
        alt_avalon_sgdma_construct_mem_to_stream_desc(
 401d0e4:	e0be7117 	ldw	r2,-1596(fp)
 401d0e8:	11000f17 	ldw	r4,60(r2)
 401d0ec:	e0be7117 	ldw	r2,-1596(fp)
 401d0f0:	10800f17 	ldw	r2,60(r2)
 401d0f4:	11400804 	addi	r5,r2,32
 401d0f8:	e1be6e17 	ldw	r6,-1608(fp)
 401d0fc:	e0be7217 	ldw	r2,-1592(fp)
 401d100:	11ffffcc 	andi	r7,r2,65535
 401d104:	d8000015 	stw	zero,0(sp)
 401d108:	00800044 	movi	r2,1
 401d10c:	d8800115 	stw	r2,4(sp)
 401d110:	00800044 	movi	r2,1
 401d114:	d8800215 	stw	r2,8(sp)
 401d118:	d8000315 	stw	zero,12(sp)
 401d11c:	40162440 	call	4016244 <alt_avalon_sgdma_construct_mem_to_stream_desc>
           1,                                        // generate sop
           1,                                        // generate endofpacket signal
           0);                                       // atlantic channel (don't know/don't care: set to 0)
                  
    
       tx_length = tse_mac_sTxWrite(mi,tse_ptr->desc);
 401d120:	e0be7117 	ldw	r2,-1596(fp)
 401d124:	11400f17 	ldw	r5,60(r2)
 401d128:	e13e6f17 	ldw	r4,-1604(fp)
 401d12c:	4016da00 	call	4016da0 <tse_mac_sTxWrite>
 401d130:	e0be7315 	stw	r2,-1588(fp)
       result = 0;
 401d134:	e03e7515 	stw	zero,-1580(fp)
 401d138:	00000206 	br	401d144 <tse_mac_raw_send+0x238>

   } else {
       result = -3;
 401d13c:	00bfff44 	movi	r2,-3
 401d140:	e0be7515 	stw	r2,-1580(fp)
   }

   if(result < 0)   /* SGDMA not available */
 401d144:	e0be7517 	ldw	r2,-1580(fp)
 401d148:	1004403a 	cmpge	r2,r2,zero
 401d14c:	1000131e 	bne	r2,zero,401d19c <tse_mac_raw_send+0x290>
   {
      dprintf("raw_send() SGDMA not available, ret=%d, len=%d\n",result, len);
 401d150:	01010174 	movhi	r4,1029
 401d154:	212a3804 	addi	r4,r4,-22304
 401d158:	e17e7517 	ldw	r5,-1580(fp)
 401d15c:	e1be7217 	ldw	r6,-1592(fp)
 401d160:	400207c0 	call	400207c <printf>
      net->n_mib->ifOutDiscards++;
 401d164:	e0bffc17 	ldw	r2,-16(fp)
 401d168:	10c02717 	ldw	r3,156(r2)
 401d16c:	18801217 	ldw	r2,72(r3)
 401d170:	10800044 	addi	r2,r2,1
 401d174:	18801215 	stw	r2,72(r3)
      tse_ptr->sem = 0;
 401d178:	e0be7117 	ldw	r2,-1596(fp)
 401d17c:	10000c15 	stw	zero,48(r2)
 401d180:	e0be6d17 	ldw	r2,-1612(fp)
 401d184:	e0be6a15 	stw	r2,-1624(fp)
 401d188:	e0be6a17 	ldw	r2,-1624(fp)
 401d18c:	1001703a 	wrctl	status,r2

      OS_EXIT_CRITICAL();
      return SEND_DROPPED;   /* ENP_RESOURCE and SEND_DROPPED have the same value! */
 401d190:	00bffa84 	movi	r2,-22
 401d194:	e0bfff15 	stw	r2,-4(fp)
 401d198:	00001406 	br	401d1ec <tse_mac_raw_send+0x2e0>
   }
   else   /* = 0, success */
   {
      net->n_mib->ifOutOctets += data_bytes;
 401d19c:	e0bffc17 	ldw	r2,-16(fp)
 401d1a0:	11002717 	ldw	r4,156(r2)
 401d1a4:	e0bffc17 	ldw	r2,-16(fp)
 401d1a8:	10802717 	ldw	r2,156(r2)
 401d1ac:	10c00f17 	ldw	r3,60(r2)
 401d1b0:	e0bffe17 	ldw	r2,-8(fp)
 401d1b4:	1885883a 	add	r2,r3,r2
 401d1b8:	20800f15 	stw	r2,60(r4)
      /* we dont know whether it was unicast or not, we count both in <ifOutUcastPkts> */
      net->n_mib->ifOutUcastPkts++;
 401d1bc:	e0bffc17 	ldw	r2,-16(fp)
 401d1c0:	10c02717 	ldw	r3,156(r2)
 401d1c4:	18801017 	ldw	r2,64(r3)
 401d1c8:	10800044 	addi	r2,r2,1
 401d1cc:	18801015 	stw	r2,64(r3)
      tse_ptr->sem = 0;
 401d1d0:	e0be7117 	ldw	r2,-1596(fp)
 401d1d4:	10000c15 	stw	zero,48(r2)
 401d1d8:	e0be6d17 	ldw	r2,-1612(fp)
 401d1dc:	e0be6915 	stw	r2,-1628(fp)
 401d1e0:	e0be6917 	ldw	r2,-1628(fp)
 401d1e4:	1001703a 	wrctl	status,r2

      OS_EXIT_CRITICAL();
      return SUCCESS;  /*success */
 401d1e8:	e03fff15 	stw	zero,-4(fp)
 401d1ec:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 401d1f0:	e037883a 	mov	sp,fp
 401d1f4:	dfc00117 	ldw	ra,4(sp)
 401d1f8:	df000017 	ldw	fp,0(sp)
 401d1fc:	dec00204 	addi	sp,sp,8
 401d200:	f800283a 	ret

0401d204 <tse_sgdmaRx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
void tse_sgdmaRx_isr(void * context)
{
 401d204:	defffa04 	addi	sp,sp,-24
 401d208:	dfc00515 	stw	ra,20(sp)
 401d20c:	df000415 	stw	fp,16(sp)
 401d210:	df000404 	addi	fp,sp,16
 401d214:	e13fff15 	stw	r4,-4(fp)
  ins_tse_info* tse_ptr = (ins_tse_info *) context; 
 401d218:	e0bfff17 	ldw	r2,-4(fp)
 401d21c:	e0bffe15 	stw	r2,-8(fp)
  alt_u8 sgdma_status;
  
  /* Capture whether there are existing packets on stack rcv queue */
  int initial_rcvdq_len = rcvdq.q_len;
 401d220:	008101b4 	movhi	r2,1030
 401d224:	10a14304 	addi	r2,r2,-31476
 401d228:	10800217 	ldw	r2,8(r2)
 401d22c:	e0bffc15 	stw	r2,-16(fp)
   * IO read to peripheral that generated the IRQ is done after IO write
   * to negate the interrupt request. This ensures at the IO write reaches 
   * the peripheral (through any high-latency hardware in the system)
   * before the ISR exits.
   */   
  sgdma_status = IORD_ALTERA_AVALON_SGDMA_STATUS(tse_ptr->mi.rx_sgdma->base);
 401d230:	e0bffe17 	ldw	r2,-8(fp)
 401d234:	10800317 	ldw	r2,12(r2)
 401d238:	10800317 	ldw	r2,12(r2)
 401d23c:	10800037 	ldwio	r2,0(r2)
 401d240:	e0bffd05 	stb	r2,-12(fp)
  
  /* Why are we here; should we be? */
  if(sgdma_status & (ALTERA_AVALON_SGDMA_STATUS_CHAIN_COMPLETED_MSK | 
 401d244:	e0bffd03 	ldbu	r2,-12(fp)
 401d248:	1080030c 	andi	r2,r2,12
 401d24c:	1005003a 	cmpeq	r2,r2,zero
 401d250:	1000111e 	bne	r2,zero,401d298 <tse_sgdmaRx_isr+0x94>
                     ALTERA_AVALON_SGDMA_STATUS_DESC_COMPLETED_MSK) ) {
    /* Handle received packet(s) */
    tse_mac_rcv(tse_ptr); 
 401d254:	e13ffe17 	ldw	r4,-8(fp)
 401d258:	401d4540 	call	401d454 <tse_mac_rcv>
        tse_ptr->mi.rx_sgdma, 
        &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
    }
#else
    /* Re-start SGDMA (always, if we have a single descriptor) */
    alt_avalon_sgdma_do_async_transfer(
 401d25c:	e0bffe17 	ldw	r2,-8(fp)
 401d260:	11000317 	ldw	r4,12(r2)
 401d264:	e0bffe17 	ldw	r2,-8(fp)
 401d268:	10800f17 	ldw	r2,60(r2)
 401d26c:	11401004 	addi	r5,r2,64
 401d270:	4015e300 	call	4015e30 <alt_avalon_sgdma_do_async_transfer>
      tse_ptr->mi.rx_sgdma, 
      &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
#endif
  
    /* Wake up Niche stack if there are new packets are on queue */
    if ((rcvdq.q_len) > initial_rcvdq_len) {
 401d274:	008101b4 	movhi	r2,1030
 401d278:	10a14304 	addi	r2,r2,-31476
 401d27c:	10c00217 	ldw	r3,8(r2)
 401d280:	e0bffc17 	ldw	r2,-16(fp)
 401d284:	10c0040e 	bge	r2,r3,401d298 <tse_sgdmaRx_isr+0x94>
      SignalPktDemux();
 401d288:	00810174 	movhi	r2,1029
 401d28c:	1081e704 	addi	r2,r2,1948
 401d290:	11000017 	ldw	r4,0(r2)
 401d294:	4012ae80 	call	4012ae8 <OSSemPost>
    }  
  } /* if (valid SGDMA interrupt) */
}
 401d298:	e037883a 	mov	sp,fp
 401d29c:	dfc00117 	ldw	ra,4(sp)
 401d2a0:	df000017 	ldw	fp,0(sp)
 401d2a4:	dec00204 	addi	sp,sp,8
 401d2a8:	f800283a 	ret

0401d2ac <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(ins_tse_info* tse_ptr)
{     
 401d2ac:	defff904 	addi	sp,sp,-28
 401d2b0:	dfc00615 	stw	ra,24(sp)
 401d2b4:	df000515 	stw	fp,20(sp)
 401d2b8:	dc000415 	stw	r16,16(sp)
 401d2bc:	df000404 	addi	fp,sp,16
 401d2c0:	e13ffe15 	stw	r4,-8(fp)
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
 401d2c4:	e0bffe17 	ldw	r2,-8(fp)
 401d2c8:	10000e15 	stw	zero,56(r2)
 401d2cc:	00004406 	br	401d3e0 <tse_sgdma_read_init+0x134>
  { 
    tse_ptr->pkt_array[tse_ptr->chain_loop] = pk_alloc(ALTERA_TSE_PKT_INIT_LEN+4);
 401d2d0:	e0bffe17 	ldw	r2,-8(fp)
 401d2d4:	14000e17 	ldw	r16,56(r2)
 401d2d8:	01017f04 	movi	r4,1532
 401d2dc:	4024f700 	call	4024f70 <pk_alloc>
 401d2e0:	1009883a 	mov	r4,r2
 401d2e4:	e0fffe17 	ldw	r3,-8(fp)
 401d2e8:	8405883a 	add	r2,r16,r16
 401d2ec:	1085883a 	add	r2,r2,r2
 401d2f0:	10c5883a 	add	r2,r2,r3
 401d2f4:	10801104 	addi	r2,r2,68
 401d2f8:	11000015 	stw	r4,0(r2)
    
    if (!tse_ptr->pkt_array[tse_ptr->chain_loop])   /* couldn't get a free buffer for rx */
 401d2fc:	e0bffe17 	ldw	r2,-8(fp)
 401d300:	10800e17 	ldw	r2,56(r2)
 401d304:	e0fffe17 	ldw	r3,-8(fp)
 401d308:	1085883a 	add	r2,r2,r2
 401d30c:	1085883a 	add	r2,r2,r2
 401d310:	10c5883a 	add	r2,r2,r3
 401d314:	10801104 	addi	r2,r2,68
 401d318:	10800017 	ldw	r2,0(r2)
 401d31c:	1004c03a 	cmpne	r2,r2,zero
 401d320:	10000c1e 	bne	r2,zero,401d354 <tse_sgdma_read_init+0xa8>
    {
      dprintf("[tse_sgdma_read_init] Fatal error: No free packet buffers for RX\n");
 401d324:	01010174 	movhi	r4,1029
 401d328:	212a4404 	addi	r4,r4,-22256
 401d32c:	40021940 	call	4002194 <puts>
      tse_ptr->netp->n_mib->ifInDiscards++;
 401d330:	e0bffe17 	ldw	r2,-8(fp)
 401d334:	10800817 	ldw	r2,32(r2)
 401d338:	10c02717 	ldw	r3,156(r2)
 401d33c:	18800c17 	ldw	r2,48(r3)
 401d340:	10800044 	addi	r2,r2,1
 401d344:	18800c15 	stw	r2,48(r3)
      
      return ENP_NOBUFFER;
 401d348:	00bffac4 	movi	r2,-21
 401d34c:	e0bfff15 	stw	r2,-4(fp)
 401d350:	00003906 	br	401d438 <tse_sgdma_read_init+0x18c>
    }
    
    // ensure bit-31 of tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff is clear before passing
    // to SGDMA Driver
    uncached_packet_payload = (alt_u32 *)alt_remap_cached ((volatile void*) tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
 401d354:	e0bffe17 	ldw	r2,-8(fp)
 401d358:	10800e17 	ldw	r2,56(r2)
 401d35c:	e0fffe17 	ldw	r3,-8(fp)
 401d360:	1085883a 	add	r2,r2,r2
 401d364:	1085883a 	add	r2,r2,r2
 401d368:	10c5883a 	add	r2,r2,r3
 401d36c:	10801104 	addi	r2,r2,68
 401d370:	10800017 	ldw	r2,0(r2)
 401d374:	11000117 	ldw	r4,4(r2)
 401d378:	01400104 	movi	r5,4
 401d37c:	4035e140 	call	4035e14 <alt_remap_cached>
 401d380:	e0bffd15 	stw	r2,-12(fp)

    alt_avalon_sgdma_construct_stream_to_mem_desc(
 401d384:	e0bffe17 	ldw	r2,-8(fp)
 401d388:	10c00f17 	ldw	r3,60(r2)
 401d38c:	e0bffe17 	ldw	r2,-8(fp)
 401d390:	10800e17 	ldw	r2,56(r2)
 401d394:	1004917a 	slli	r2,r2,5
 401d398:	1885883a 	add	r2,r3,r2
 401d39c:	11001004 	addi	r4,r2,64
 401d3a0:	e0bffe17 	ldw	r2,-8(fp)
 401d3a4:	10c00f17 	ldw	r3,60(r2)
 401d3a8:	e0bffe17 	ldw	r2,-8(fp)
 401d3ac:	10800e17 	ldw	r2,56(r2)
 401d3b0:	1004917a 	slli	r2,r2,5
 401d3b4:	1885883a 	add	r2,r3,r2
 401d3b8:	11401804 	addi	r5,r2,96
 401d3bc:	d8000015 	stw	zero,0(sp)
 401d3c0:	e1bffd17 	ldw	r6,-12(fp)
 401d3c4:	000f883a 	mov	r7,zero
 401d3c8:	40161800 	call	4016180 <alt_avalon_sgdma_construct_stream_to_mem_desc>
 */
int tse_sgdma_read_init(ins_tse_info* tse_ptr)
{     
  alt_u32 *uncached_packet_payload;
  
  for(tse_ptr->chain_loop = 0; tse_ptr->chain_loop < ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE; tse_ptr->chain_loop++)
 401d3cc:	e0bffe17 	ldw	r2,-8(fp)
 401d3d0:	10800e17 	ldw	r2,56(r2)
 401d3d4:	10c00044 	addi	r3,r2,1
 401d3d8:	e0bffe17 	ldw	r2,-8(fp)
 401d3dc:	10c00e15 	stw	r3,56(r2)
 401d3e0:	e0bffe17 	ldw	r2,-8(fp)
 401d3e4:	10800e17 	ldw	r2,56(r2)
 401d3e8:	10800050 	cmplti	r2,r2,1
 401d3ec:	103fb81e 	bne	r2,zero,401d2d0 <tse_sgdma_read_init+0x24>
            0,                          // read until EOP
            0);                         // don't write to constant address

  } // for

  dprintf("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n", 
 401d3f0:	e0bffe17 	ldw	r2,-8(fp)
 401d3f4:	11400e17 	ldw	r5,56(r2)
 401d3f8:	01010174 	movhi	r4,1029
 401d3fc:	212a5504 	addi	r4,r4,-22188
 401d400:	400207c0 	call	400207c <printf>
    tse_ptr->chain_loop);
   
  tse_ptr->chain_loop = 0;
 401d404:	e0bffe17 	ldw	r2,-8(fp)
 401d408:	10000e15 	stw	zero,56(r2)
  tse_ptr->currdescriptor_ptr =  &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
 401d40c:	e0bffe17 	ldw	r2,-8(fp)
 401d410:	10800f17 	ldw	r2,60(r2)
 401d414:	10c01004 	addi	r3,r2,64
 401d418:	e0bffe17 	ldw	r2,-8(fp)
 401d41c:	10c01015 	stw	r3,64(r2)

  tse_mac_aRxRead( &tse_ptr->mi, tse_ptr->currdescriptor_ptr);
 401d420:	e0bffe17 	ldw	r2,-8(fp)
 401d424:	11000104 	addi	r4,r2,4
 401d428:	e0bffe17 	ldw	r2,-8(fp)
 401d42c:	11401017 	ldw	r5,64(r2)
 401d430:	4016e900 	call	4016e90 <tse_mac_aRxRead>
  
  return SUCCESS;
 401d434:	e03fff15 	stw	zero,-4(fp)
 401d438:	e0bfff17 	ldw	r2,-4(fp)
}
 401d43c:	e037883a 	mov	sp,fp
 401d440:	dfc00217 	ldw	ra,8(sp)
 401d444:	df000117 	ldw	fp,4(sp)
 401d448:	dc000017 	ldw	r16,0(sp)
 401d44c:	dec00304 	addi	sp,sp,12
 401d450:	f800283a 	ret

0401d454 <tse_mac_rcv>:
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */

ALT_INLINE void tse_mac_rcv(ins_tse_info* tse_ptr)
{     
 401d454:	defff704 	addi	sp,sp,-36
 401d458:	dfc00815 	stw	ra,32(sp)
 401d45c:	df000715 	stw	fp,28(sp)
 401d460:	df000704 	addi	fp,sp,28
 401d464:	e13fff15 	stw	r4,-4(fp)
  PACKET replacement_pkt;
  PACKET rx_packet;
  alt_u32 *uncached_packet_payload;
  alt_u8 desc_status;

  tse_ptr->currdescriptor_ptr = 
 401d468:	e0bfff17 	ldw	r2,-4(fp)
 401d46c:	10c00f17 	ldw	r3,60(r2)
 401d470:	e0bfff17 	ldw	r2,-4(fp)
 401d474:	10800e17 	ldw	r2,56(r2)
 401d478:	1004917a 	slli	r2,r2,5
 401d47c:	1885883a 	add	r2,r3,r2
 401d480:	10c01004 	addi	r3,r2,64
 401d484:	e0bfff17 	ldw	r2,-4(fp)
 401d488:	10c01015 	stw	r3,64(r2)
    &tse_ptr->desc[tse_ptr->chain_loop+ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST];
  
  /* Grab status bits from descriptor under test. Bypass cache */
  desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
 401d48c:	e0bfff17 	ldw	r2,-4(fp)
 401d490:	10801017 	ldw	r2,64(r2)
 401d494:	10800704 	addi	r2,r2,28
 401d498:	10800037 	ldwio	r2,0(r2)
 401d49c:	1005d43a 	srai	r2,r2,16
 401d4a0:	1007883a 	mov	r3,r2
 401d4a4:	00bfffc4 	movi	r2,-1
 401d4a8:	1884703a 	and	r2,r3,r2
 401d4ac:	e0bff905 	stb	r2,-28(fp)
  while ( desc_status & 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_TERMINATED_BY_EOP_MSK )
#endif
{      
    /* Correct frame length to actual (this is different from TX side) */
    pklen = IORD_16DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0) - 2;
 401d4b0:	e0bfff17 	ldw	r2,-4(fp)
 401d4b4:	10801017 	ldw	r2,64(r2)
 401d4b8:	10800704 	addi	r2,r2,28
 401d4bc:	1080002b 	ldhuio	r2,0(r2)
 401d4c0:	10bfff84 	addi	r2,r2,-2
 401d4c4:	e0bffd15 	stw	r2,-12(fp)
    tse_ptr->netp->n_mib->ifInOctets += (u_long)pklen;
 401d4c8:	e0bfff17 	ldw	r2,-4(fp)
 401d4cc:	10800817 	ldw	r2,32(r2)
 401d4d0:	11002717 	ldw	r4,156(r2)
 401d4d4:	e0bfff17 	ldw	r2,-4(fp)
 401d4d8:	10800817 	ldw	r2,32(r2)
 401d4dc:	10802717 	ldw	r2,156(r2)
 401d4e0:	10c00917 	ldw	r3,36(r2)
 401d4e4:	e0bffd17 	ldw	r2,-12(fp)
 401d4e8:	1885883a 	add	r2,r3,r2
 401d4ec:	20800915 	stw	r2,36(r4)
  
    rx_packet = tse_ptr->pkt_array[tse_ptr->chain_loop];   
 401d4f0:	e0bfff17 	ldw	r2,-4(fp)
 401d4f4:	10800e17 	ldw	r2,56(r2)
 401d4f8:	e0ffff17 	ldw	r3,-4(fp)
 401d4fc:	1085883a 	add	r2,r2,r2
 401d500:	1085883a 	add	r2,r2,r2
 401d504:	10c5883a 	add	r2,r2,r3
 401d508:	10801104 	addi	r2,r2,68
 401d50c:	10800017 	ldw	r2,0(r2)
 401d510:	e0bffb15 	stw	r2,-20(fp)
    
    rx_packet->nb_prot = rx_packet->nb_buff + ETHHDR_SIZE;
 401d514:	e0bffb17 	ldw	r2,-20(fp)
 401d518:	10800117 	ldw	r2,4(r2)
 401d51c:	10c00404 	addi	r3,r2,16
 401d520:	e0bffb17 	ldw	r2,-20(fp)
 401d524:	10c00315 	stw	r3,12(r2)
    rx_packet->nb_plen = pklen - 14;
 401d528:	e0bffd17 	ldw	r2,-12(fp)
 401d52c:	10bffc84 	addi	r2,r2,-14
 401d530:	1007883a 	mov	r3,r2
 401d534:	e0bffb17 	ldw	r2,-20(fp)
 401d538:	10c00415 	stw	r3,16(r2)
    rx_packet->nb_tstamp = cticks;
 401d53c:	00810174 	movhi	r2,1029
 401d540:	1081e404 	addi	r2,r2,1936
 401d544:	10800017 	ldw	r2,0(r2)
 401d548:	1007883a 	mov	r3,r2
 401d54c:	e0bffb17 	ldw	r2,-20(fp)
 401d550:	10c00515 	stw	r3,20(r2)
    rx_packet->net = tse_ptr->netp;
 401d554:	e0bfff17 	ldw	r2,-4(fp)
 401d558:	10c00817 	ldw	r3,32(r2)
 401d55c:	e0bffb17 	ldw	r2,-20(fp)
 401d560:	10c00615 	stw	r3,24(r2)
    
    // set packet type for demux routine
    eth = (struct ethhdr *)(rx_packet->nb_buff + ETHHDR_BIAS);
 401d564:	e0bffb17 	ldw	r2,-20(fp)
 401d568:	10800117 	ldw	r2,4(r2)
 401d56c:	10800084 	addi	r2,r2,2
 401d570:	e0bffe15 	stw	r2,-8(fp)
    rx_packet->type = eth->e_type;
 401d574:	e0bffe17 	ldw	r2,-8(fp)
 401d578:	10c0030b 	ldhu	r3,12(r2)
 401d57c:	e0bffb17 	ldw	r2,-20(fp)
 401d580:	10c0080d 	sth	r3,32(r2)
    
    if( (desc_status & 
 401d584:	e0bff903 	ldbu	r2,-28(fp)
 401d588:	10801fcc 	andi	r2,r2,127
 401d58c:	1004c03a 	cmpne	r2,r2,zero
 401d590:	1000251e 	bne	r2,zero,401d628 <tse_mac_rcv+0x1d4>
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | 
           ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) == 0)
    {
      replacement_pkt = pk_alloc(ALTERA_TSE_PKT_INIT_LEN + 4);
 401d594:	01017f04 	movi	r4,1532
 401d598:	4024f700 	call	4024f70 <pk_alloc>
 401d59c:	e0bffc15 	stw	r2,-16(fp)
      if (!replacement_pkt) { /* couldn't get a free buffer for rx */
 401d5a0:	e0bffc17 	ldw	r2,-16(fp)
 401d5a4:	1004c03a 	cmpne	r2,r2,zero
 401d5a8:	10000a1e 	bne	r2,zero,401d5d4 <tse_mac_rcv+0x180>
        dprintf("No free buffers for rx\n");
 401d5ac:	01010174 	movhi	r4,1029
 401d5b0:	212a6604 	addi	r4,r4,-22120
 401d5b4:	40021940 	call	4002194 <puts>
        tse_ptr->netp->n_mib->ifInDiscards++;
 401d5b8:	e0bfff17 	ldw	r2,-4(fp)
 401d5bc:	10800817 	ldw	r2,32(r2)
 401d5c0:	10c02717 	ldw	r3,156(r2)
 401d5c4:	18800c17 	ldw	r2,48(r3)
 401d5c8:	10800044 	addi	r2,r2,1
 401d5cc:	18800c15 	stw	r2,48(r3)
 401d5d0:	00001806 	br	401d634 <tse_mac_rcv+0x1e0>
      }
      else {
        putq(&rcvdq, tse_ptr->pkt_array[tse_ptr->chain_loop]);
 401d5d4:	e0bfff17 	ldw	r2,-4(fp)
 401d5d8:	10800e17 	ldw	r2,56(r2)
 401d5dc:	e0ffff17 	ldw	r3,-4(fp)
 401d5e0:	1085883a 	add	r2,r2,r2
 401d5e4:	1085883a 	add	r2,r2,r2
 401d5e8:	10c5883a 	add	r2,r2,r3
 401d5ec:	10801104 	addi	r2,r2,68
 401d5f0:	11400017 	ldw	r5,0(r2)
 401d5f4:	010101b4 	movhi	r4,1030
 401d5f8:	21214304 	addi	r4,r4,-31476
 401d5fc:	40255440 	call	4025544 <putq>
        tse_ptr->pkt_array[tse_ptr->chain_loop] = replacement_pkt;
 401d600:	e0bfff17 	ldw	r2,-4(fp)
 401d604:	10800e17 	ldw	r2,56(r2)
 401d608:	e0ffff17 	ldw	r3,-4(fp)
 401d60c:	1085883a 	add	r2,r2,r2
 401d610:	1085883a 	add	r2,r2,r2
 401d614:	10c5883a 	add	r2,r2,r3
 401d618:	10c01104 	addi	r3,r2,68
 401d61c:	e0bffc17 	ldw	r2,-16(fp)
 401d620:	18800015 	stw	r2,0(r3)
 401d624:	00000306 	br	401d634 <tse_mac_rcv+0x1e0>
      }
    } /* if(descriptor had no errors) */ 
    else {
      dprintf("RX descriptor reported error. packet dropped\n");
 401d628:	01010174 	movhi	r4,1029
 401d62c:	212a6c04 	addi	r4,r4,-22096
 401d630:	40021940 	call	4002194 <puts>
    }     
             
    uncached_packet_payload = (alt_u32 *)alt_remap_cached(tse_ptr->pkt_array[tse_ptr->chain_loop]->nb_buff, 4);
 401d634:	e0bfff17 	ldw	r2,-4(fp)
 401d638:	10800e17 	ldw	r2,56(r2)
 401d63c:	e0ffff17 	ldw	r3,-4(fp)
 401d640:	1085883a 	add	r2,r2,r2
 401d644:	1085883a 	add	r2,r2,r2
 401d648:	10c5883a 	add	r2,r2,r3
 401d64c:	10801104 	addi	r2,r2,68
 401d650:	10800017 	ldw	r2,0(r2)
 401d654:	11000117 	ldw	r4,4(r2)
 401d658:	01400104 	movi	r5,4
 401d65c:	4035e140 	call	4035e14 <alt_remap_cached>
 401d660:	e0bffa15 	stw	r2,-24(fp)
    /* 
     * Re-cycle previously constructed SGDMA buffer directly rather
     * than calling the SGDMA utility routines. This saves some call/return
     * overhead and only does cache-bypass writes of what we need
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->write_addr, 0, 
 401d664:	e0bfff17 	ldw	r2,-4(fp)
 401d668:	10801017 	ldw	r2,64(r2)
 401d66c:	10800204 	addi	r2,r2,8
 401d670:	e0fffa17 	ldw	r3,-24(fp)
 401d674:	10c00035 	stwio	r3,0(r2)
     *   |31...24|23..16|15.....................0|
     *   |control|status|actual_bytes_transferred|
     * 
     * Set relevant control bits and ensure the rest are cleared.
     */
    IOWR_32DIRECT(&tse_ptr->currdescriptor_ptr->actual_bytes_transferred, 0, 
 401d678:	e0bfff17 	ldw	r2,-4(fp)
 401d67c:	10801017 	ldw	r2,64(r2)
 401d680:	10800704 	addi	r2,r2,28
 401d684:	1007883a 	mov	r3,r2
 401d688:	00a04034 	movhi	r2,33024
 401d68c:	18800035 	stwio	r2,0(r3)
    
    /* Grab next descriptor status */
    desc_status = IORD_ALTERA_TSE_SGDMA_DESC_STATUS(tse_ptr->currdescriptor_ptr);
#endif
  } /* while (descriptor terminated by EOP) */
} 
 401d690:	e037883a 	mov	sp,fp
 401d694:	dfc00117 	ldw	ra,4(sp)
 401d698:	df000017 	ldw	fp,0(sp)
 401d69c:	dec00204 	addi	sp,sp,8
 401d6a0:	f800283a 	ret

0401d6a4 <tse_mac_stats>:

int tse_mac_stats(void * pio, int iface)
{
 401d6a4:	defffc04 	addi	sp,sp,-16
 401d6a8:	dfc00315 	stw	ra,12(sp)
 401d6ac:	df000215 	stw	fp,8(sp)
 401d6b0:	df000204 	addi	fp,sp,8
 401d6b4:	e13ffe15 	stw	r4,-8(fp)
 401d6b8:	e17fff15 	stw	r5,-4(fp)
   ns_printf(pio, "tse_mac_stats(), stats will be added later!\n");
 401d6bc:	e13ffe17 	ldw	r4,-8(fp)
 401d6c0:	01410174 	movhi	r5,1029
 401d6c4:	296a7804 	addi	r5,r5,-22048
 401d6c8:	40210380 	call	4021038 <ns_printf>
   return SUCCESS;
 401d6cc:	0005883a 	mov	r2,zero
}
 401d6d0:	e037883a 	mov	sp,fp
 401d6d4:	dfc00117 	ldw	ra,4(sp)
 401d6d8:	df000017 	ldw	fp,0(sp)
 401d6dc:	dec00204 	addi	sp,sp,8
 401d6e0:	f800283a 	ret

0401d6e4 <tse_mac_close>:
 * @API TYPE - Public
 * @param  iface    index of the NET interface associated with the TSE MAC.
 * @return SUCCESS
 */
int tse_mac_close(int iface)
{
 401d6e4:	defffc04 	addi	sp,sp,-16
 401d6e8:	dfc00315 	stw	ra,12(sp)
 401d6ec:	df000215 	stw	fp,8(sp)
 401d6f0:	df000204 	addi	fp,sp,8
 401d6f4:	e13fff15 	stw	r4,-4(fp)
  int state;
   
  /* status = down */
  nets[iface]->n_mib->ifAdminStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;    
 401d6f8:	e0bfff17 	ldw	r2,-4(fp)
 401d6fc:	00c101b4 	movhi	r3,1030
 401d700:	18e20804 	addi	r3,r3,-30688
 401d704:	1085883a 	add	r2,r2,r2
 401d708:	1085883a 	add	r2,r2,r2
 401d70c:	10c5883a 	add	r2,r2,r3
 401d710:	10800017 	ldw	r2,0(r2)
 401d714:	10c02717 	ldw	r3,156(r2)
 401d718:	00800084 	movi	r2,2
 401d71c:	18800615 	stw	r2,24(r3)

  /* disable the interrupt in the OS*/
  alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma, 0, 0, 0);
 401d720:	e0bfff17 	ldw	r2,-4(fp)
 401d724:	00c101b4 	movhi	r3,1030
 401d728:	18e0f704 	addi	r3,r3,-31780
 401d72c:	10801324 	muli	r2,r2,76
 401d730:	10c5883a 	add	r2,r2,r3
 401d734:	10800304 	addi	r2,r2,12
 401d738:	11000017 	ldw	r4,0(r2)
 401d73c:	000b883a 	mov	r5,zero
 401d740:	000d883a 	mov	r6,zero
 401d744:	000f883a 	mov	r7,zero
 401d748:	401633c0 	call	401633c <alt_avalon_sgdma_register_callback>
   
  /* Disable Receive path on the device*/
  state = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 401d74c:	e0bfff17 	ldw	r2,-4(fp)
 401d750:	00c101b4 	movhi	r3,1030
 401d754:	18e0f704 	addi	r3,r3,-31780
 401d758:	10801324 	muli	r2,r2,76
 401d75c:	10c5883a 	add	r2,r2,r3
 401d760:	10800104 	addi	r2,r2,4
 401d764:	10800017 	ldw	r2,0(r2)
 401d768:	10800204 	addi	r2,r2,8
 401d76c:	10800037 	ldwio	r2,0(r2)
 401d770:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,state & ~ALTERA_TSEMAC_CMD_RX_ENA_MSK); 
 401d774:	e0bfff17 	ldw	r2,-4(fp)
 401d778:	00c101b4 	movhi	r3,1030
 401d77c:	18e0f704 	addi	r3,r3,-31780
 401d780:	10801324 	muli	r2,r2,76
 401d784:	10c5883a 	add	r2,r2,r3
 401d788:	10800104 	addi	r2,r2,4
 401d78c:	10800017 	ldw	r2,0(r2)
 401d790:	11000204 	addi	r4,r2,8
 401d794:	e0fffe17 	ldw	r3,-8(fp)
 401d798:	00bfff44 	movi	r2,-3
 401d79c:	1886703a 	and	r3,r3,r2
 401d7a0:	2005883a 	mov	r2,r4
 401d7a4:	10c00035 	stwio	r3,0(r2)
  
  /* status = down */                                     
  nets[iface]->n_mib->ifOperStatus = ALTERA_TSE_ADMIN_STATUS_DOWN;     
 401d7a8:	e0bfff17 	ldw	r2,-4(fp)
 401d7ac:	00c101b4 	movhi	r3,1030
 401d7b0:	18e20804 	addi	r3,r3,-30688
 401d7b4:	1085883a 	add	r2,r2,r2
 401d7b8:	1085883a 	add	r2,r2,r2
 401d7bc:	10c5883a 	add	r2,r2,r3
 401d7c0:	10800017 	ldw	r2,0(r2)
 401d7c4:	10c02717 	ldw	r3,156(r2)
 401d7c8:	00800084 	movi	r2,2
 401d7cc:	18800715 	stw	r2,28(r3)

  return SUCCESS;
 401d7d0:	0005883a 	mov	r2,zero
}
 401d7d4:	e037883a 	mov	sp,fp
 401d7d8:	dfc00117 	ldw	ra,4(sp)
 401d7dc:	df000017 	ldw	fp,0(sp)
 401d7e0:	dec00204 	addi	sp,sp,8
 401d7e4:	f800283a 	ret

0401d7e8 <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
 401d7e8:	defffc04 	addi	sp,sp,-16
 401d7ec:	dfc00315 	stw	ra,12(sp)
 401d7f0:	df000215 	stw	fp,8(sp)
 401d7f4:	df000204 	addi	fp,sp,8
 401d7f8:	e13ffe15 	stw	r4,-8(fp)
  return (fd < ALT_MAX_FD) ? alt_close (fd) : t_socketclose ((long) fd);
 401d7fc:	e0bffe17 	ldw	r2,-8(fp)
 401d800:	10800808 	cmpgei	r2,r2,32
 401d804:	1000041e 	bne	r2,zero,401d818 <close+0x30>
 401d808:	e13ffe17 	ldw	r4,-8(fp)
 401d80c:	40350fc0 	call	40350fc <alt_close>
 401d810:	e0bfff15 	stw	r2,-4(fp)
 401d814:	00000306 	br	401d824 <close+0x3c>
 401d818:	e13ffe17 	ldw	r4,-8(fp)
 401d81c:	402a1e40 	call	402a1e4 <t_socketclose>
 401d820:	e0bfff15 	stw	r2,-4(fp)
 401d824:	e0bfff17 	ldw	r2,-4(fp)
}
 401d828:	e037883a 	mov	sp,fp
 401d82c:	dfc00117 	ldw	ra,4(sp)
 401d830:	df000017 	ldw	fp,0(sp)
 401d834:	dec00204 	addi	sp,sp,8
 401d838:	f800283a 	ret

0401d83c <iniche_devices_init>:
 * total number of interfaces after initialization.
 */

int iniche_devices_init(
    int                         if_count)
{
 401d83c:	defff504 	addi	sp,sp,-44
 401d840:	dfc00a15 	stw	ra,40(sp)
 401d844:	df000915 	stw	fp,36(sp)
 401d848:	df000904 	addi	fp,sp,36
 401d84c:	e13fff15 	stw	r4,-4(fp)
                                netmask,
                                gw;
    int                         use_dhcp;

    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
 401d850:	d0a02b17 	ldw	r2,-32596(gp)
 401d854:	e0bffa15 	stw	r2,-24(fp)
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));
 401d858:	d0a02b04 	addi	r2,gp,-32596
 401d85c:	e0bff915 	stw	r2,-28(fp)

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
 401d860:	00003e06 	br	401d95c <iniche_devices_init+0x120>
    {
        /* Initialize the InterNiche device data record. */
        p_dev->p_driver_data = p_dev;
 401d864:	e0fffa17 	ldw	r3,-24(fp)
 401d868:	e0bffa17 	ldw	r2,-24(fp)
 401d86c:	18800415 	stw	r2,16(r3)
        p_dev->if_num = if_count;
 401d870:	e0fffa17 	ldw	r3,-24(fp)
 401d874:	e0bfff17 	ldw	r2,-4(fp)
 401d878:	18800515 	stw	r2,20(r3)
        p_dev->p_net = nets[p_dev->if_num];
 401d87c:	e0bffa17 	ldw	r2,-24(fp)
 401d880:	10800517 	ldw	r2,20(r2)
 401d884:	00c101b4 	movhi	r3,1030
 401d888:	18e20804 	addi	r3,r3,-30688
 401d88c:	1085883a 	add	r2,r2,r2
 401d890:	1085883a 	add	r2,r2,r2
 401d894:	10c5883a 	add	r2,r2,r3
 401d898:	10c00017 	ldw	r3,0(r2)
 401d89c:	e0bffa17 	ldw	r2,-24(fp)
 401d8a0:	10c00615 	stw	r3,24(r2)

        /* Perform device specific initialization. */
        (*(p_dev->init_func))(p_dev);
 401d8a4:	e0bffa17 	ldw	r2,-24(fp)
 401d8a8:	10800317 	ldw	r2,12(r2)
 401d8ac:	e13ffa17 	ldw	r4,-24(fp)
 401d8b0:	103ee83a 	callr	r2

        /* Get the interface IP address. */
        p_net = p_dev->p_net;
 401d8b4:	e0bffa17 	ldw	r2,-24(fp)
 401d8b8:	10800617 	ldw	r2,24(r2)
 401d8bc:	e0bff815 	stw	r2,-32(fp)
                
        if (get_ip_addr(p_dev, &ipaddr, &netmask, &gw, &use_dhcp))
 401d8c0:	e17ffb04 	addi	r5,fp,-20
 401d8c4:	e1bffc04 	addi	r6,fp,-16
 401d8c8:	e1fffd04 	addi	r7,fp,-12
 401d8cc:	e0bffe04 	addi	r2,fp,-8
 401d8d0:	d8800015 	stw	r2,0(sp)
 401d8d4:	e13ffa17 	ldw	r4,-24(fp)
 401d8d8:	40010dc0 	call	40010dc <get_ip_addr>
 401d8dc:	1005003a 	cmpeq	r2,r2,zero
 401d8e0:	1000181e 	bne	r2,zero,401d944 <iniche_devices_init+0x108>
            /* 
             * OR in the DHCP flag, if enabled. This will allow any
             * application-specific flag setting in get_ip_addr(), such 
             * as enabling AUTOIP, to occur 
             */
            if (use_dhcp) {
 401d8e4:	e0bffe17 	ldw	r2,-8(fp)
 401d8e8:	1005003a 	cmpeq	r2,r2,zero
 401d8ec:	1000051e 	bne	r2,zero,401d904 <iniche_devices_init+0xc8>
                p_net->n_flags |= NF_DHCPC;
 401d8f0:	e0bff817 	ldw	r2,-32(fp)
 401d8f4:	10802a17 	ldw	r2,168(r2)
 401d8f8:	10c04014 	ori	r3,r2,256
 401d8fc:	e0bff817 	ldw	r2,-32(fp)
 401d900:	10c02a15 	stw	r3,168(r2)
            }
#endif
            p_net->n_ipaddr = ipaddr;
 401d904:	e0fffb17 	ldw	r3,-20(fp)
 401d908:	e0bff817 	ldw	r2,-32(fp)
 401d90c:	10c00a15 	stw	r3,40(r2)
            p_net->snmask = netmask;
 401d910:	e0fffc17 	ldw	r3,-16(fp)
 401d914:	e0bff817 	ldw	r2,-32(fp)
 401d918:	10c00c15 	stw	r3,48(r2)
            p_net->n_defgw = gw;
 401d91c:	e0fffd17 	ldw	r3,-12(fp)
 401d920:	e0bff817 	ldw	r2,-32(fp)
 401d924:	10c00d15 	stw	r3,52(r2)
#ifdef IP_MULTICAST
	    p_net->n_mcastlist = mcastlist;
 401d928:	e0fff817 	ldw	r3,-32(fp)
 401d92c:	008100f4 	movhi	r2,1027
 401d930:	109ae604 	addi	r2,r2,27544
 401d934:	18802b15 	stw	r2,172(r3)
#if defined (IGMP_V1) || defined (IGMP_V2)
            p_net->igmp_oper_mode = IGMP_MODE_DEFAULT;
 401d938:	e0fff817 	ldw	r3,-32(fp)
 401d93c:	00800084 	movi	r2,2
 401d940:	18802f05 	stb	r2,188(r3)
#endif  /* IGMPv1 or IGMPv2 */
#endif  /* IP_MULTICAST */
        }

        /* Initialize next device. */
        if_count++;
 401d944:	e0bfff17 	ldw	r2,-4(fp)
 401d948:	10800044 	addi	r2,r2,1
 401d94c:	e0bfff15 	stw	r2,-4(fp)
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
 401d950:	e0bffa17 	ldw	r2,-24(fp)
 401d954:	10800017 	ldw	r2,0(r2)
 401d958:	e0bffa15 	stw	r2,-24(fp)
    /* Get the InterNiche device list. */
    p_dev = (alt_iniche_dev *) (alt_iniche_dev_list.next);
    p_dev_list_end = (alt_iniche_dev *) (&(alt_iniche_dev_list.next));

    /* Initialize each InterNiche device. */
    while (p_dev != p_dev_list_end)
 401d95c:	e0fffa17 	ldw	r3,-24(fp)
 401d960:	e0bff917 	ldw	r2,-28(fp)
 401d964:	18bfbf1e 	bne	r3,r2,401d864 <iniche_devices_init+0x28>
        /* Initialize next device. */
        if_count++;
        p_dev = (alt_iniche_dev *) p_dev->llist.next;
    }

    return (if_count);
 401d968:	e0bfff17 	ldw	r2,-4(fp)
}
 401d96c:	e037883a 	mov	sp,fp
 401d970:	dfc00117 	ldw	ra,4(sp)
 401d974:	df000017 	ldw	fp,0(sp)
 401d978:	dec00204 	addi	sp,sp,8
 401d97c:	f800283a 	ret

0401d980 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 401d980:	defff804 	addi	sp,sp,-32
 401d984:	dfc00715 	stw	ra,28(sp)
 401d988:	df000615 	stw	fp,24(sp)
 401d98c:	df000604 	addi	fp,sp,24
 401d990:	e13ffc15 	stw	r4,-16(fp)
 401d994:	e17ffd15 	stw	r5,-12(fp)
 401d998:	e1bffe15 	stw	r6,-8(fp)
  return (fd < ALT_MAX_FD) ? alt_read (fd, ptr, len)
 401d99c:	e0bffc17 	ldw	r2,-16(fp)
 401d9a0:	10800808 	cmpgei	r2,r2,32
 401d9a4:	1000061e 	bne	r2,zero,401d9c0 <read+0x40>
 401d9a8:	e13ffc17 	ldw	r4,-16(fp)
 401d9ac:	e17ffd17 	ldw	r5,-12(fp)
 401d9b0:	e1bffe17 	ldw	r6,-8(fp)
 401d9b4:	4035c340 	call	4035c34 <alt_read>
 401d9b8:	e0bfff15 	stw	r2,-4(fp)
 401d9bc:	00000806 	br	401d9e0 <read+0x60>
 401d9c0:	e1bffe17 	ldw	r6,-8(fp)
 401d9c4:	d8000015 	stw	zero,0(sp)
 401d9c8:	d8000115 	stw	zero,4(sp)
 401d9cc:	e13ffc17 	ldw	r4,-16(fp)
 401d9d0:	e17ffd17 	ldw	r5,-12(fp)
 401d9d4:	000f883a 	mov	r7,zero
 401d9d8:	40205ac0 	call	40205ac <bsd_recvfrom>
 401d9dc:	e0bfff15 	stw	r2,-4(fp)
 401d9e0:	e0bfff17 	ldw	r2,-4(fp)
                           : recvfrom(fd, ptr, len, 0, NULL, NULL);
}
 401d9e4:	e037883a 	mov	sp,fp
 401d9e8:	dfc00117 	ldw	ra,4(sp)
 401d9ec:	df000017 	ldw	fp,0(sp)
 401d9f0:	dec00204 	addi	sp,sp,8
 401d9f4:	f800283a 	ret

0401d9f8 <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
 401d9f8:	defffa04 	addi	sp,sp,-24
 401d9fc:	dfc00515 	stw	ra,20(sp)
 401da00:	df000415 	stw	fp,16(sp)
 401da04:	df000404 	addi	fp,sp,16
 401da08:	e13ffc15 	stw	r4,-16(fp)
 401da0c:	e17ffd15 	stw	r5,-12(fp)
 401da10:	e1bffe15 	stw	r6,-8(fp)
  if (fd < ALT_MAX_FD)
 401da14:	e0bffc17 	ldw	r2,-16(fp)
 401da18:	10800808 	cmpgei	r2,r2,32
 401da1c:	1000061e 	bne	r2,zero,401da38 <write+0x40>
  {
    return alt_write (fd, ptr, len);
 401da20:	e13ffc17 	ldw	r4,-16(fp)
 401da24:	e17ffd17 	ldw	r5,-12(fp)
 401da28:	e1bffe17 	ldw	r6,-8(fp)
 401da2c:	40361b00 	call	40361b0 <alt_write>
 401da30:	e0bfff15 	stw	r2,-4(fp)
 401da34:	00000606 	br	401da50 <write+0x58>
  }
  else
  { 
    return send (fd, (void*) ptr, len, 0);
 401da38:	e17ffd17 	ldw	r5,-12(fp)
 401da3c:	e1bffe17 	ldw	r6,-8(fp)
 401da40:	e13ffc17 	ldw	r4,-16(fp)
 401da44:	000f883a 	mov	r7,zero
 401da48:	4029ed80 	call	4029ed8 <t_send>
 401da4c:	e0bfff15 	stw	r2,-4(fp)
 401da50:	e0bfff17 	ldw	r2,-4(fp)
  }  
}
 401da54:	e037883a 	mov	sp,fp
 401da58:	dfc00117 	ldw	ra,4(sp)
 401da5c:	df000017 	ldw	fp,0(sp)
 401da60:	dec00204 	addi	sp,sp,8
 401da64:	f800283a 	ret

0401da68 <Netinit>:
 * a non-zero error code
 */

int
Netinit()
{
 401da68:	defff704 	addi	sp,sp,-36
 401da6c:	dfc00815 	stw	ra,32(sp)
 401da70:	df000715 	stw	fp,28(sp)
 401da74:	df000704 	addi	fp,sp,28
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 401da78:	e03ffa15 	stw	zero,-24(fp)
 401da7c:	00005806 	br	401dbe0 <Netinit+0x178>
   {
      /* sanity check on mtu, et.al. We added this because earlier 
       * drivers were sloppy about setting them, but new
       * logic depends on these sizes.
       */
      if (nets[i]->n_mib->ifType == ETHERNET)   /* ethernet? */
 401da80:	e0bffa17 	ldw	r2,-24(fp)
 401da84:	00c101b4 	movhi	r3,1030
 401da88:	18e20804 	addi	r3,r3,-30688
 401da8c:	1085883a 	add	r2,r2,r2
 401da90:	1085883a 	add	r2,r2,r2
 401da94:	10c5883a 	add	r2,r2,r3
 401da98:	10800017 	ldw	r2,0(r2)
 401da9c:	10802717 	ldw	r2,156(r2)
 401daa0:	10800217 	ldw	r2,8(r2)
 401daa4:	10800198 	cmpnei	r2,r2,6
 401daa8:	1000261e 	bne	r2,zero,401db44 <Netinit+0xdc>
      {
         if (nets[i]->n_mtu == 0)   /* let device code override */
 401daac:	e0bffa17 	ldw	r2,-24(fp)
 401dab0:	00c101b4 	movhi	r3,1030
 401dab4:	18e20804 	addi	r3,r3,-30688
 401dab8:	1085883a 	add	r2,r2,r2
 401dabc:	1085883a 	add	r2,r2,r2
 401dac0:	10c5883a 	add	r2,r2,r3
 401dac4:	10800017 	ldw	r2,0(r2)
 401dac8:	10800917 	ldw	r2,36(r2)
 401dacc:	1004c03a 	cmpne	r2,r2,zero
 401dad0:	1000091e 	bne	r2,zero,401daf8 <Netinit+0x90>
            nets[i]->n_mtu = 1514;
 401dad4:	e0bffa17 	ldw	r2,-24(fp)
 401dad8:	00c101b4 	movhi	r3,1030
 401dadc:	18e20804 	addi	r3,r3,-30688
 401dae0:	1085883a 	add	r2,r2,r2
 401dae4:	1085883a 	add	r2,r2,r2
 401dae8:	10c5883a 	add	r2,r2,r3
 401daec:	10c00017 	ldw	r3,0(r2)
 401daf0:	00817a84 	movi	r2,1514
 401daf4:	18800915 	stw	r2,36(r3)

         if (nets[i]->n_lnh == 0)
 401daf8:	e0bffa17 	ldw	r2,-24(fp)
 401dafc:	00c101b4 	movhi	r3,1030
 401db00:	18e20804 	addi	r3,r3,-30688
 401db04:	1085883a 	add	r2,r2,r2
 401db08:	1085883a 	add	r2,r2,r2
 401db0c:	10c5883a 	add	r2,r2,r3
 401db10:	10800017 	ldw	r2,0(r2)
 401db14:	10800817 	ldw	r2,32(r2)
 401db18:	1004c03a 	cmpne	r2,r2,zero
 401db1c:	1000091e 	bne	r2,zero,401db44 <Netinit+0xdc>
         {
#ifdef IEEE_802_3
            nets[i]->n_lnh = ETHHDR_SIZE + sizeof(struct snap_hdr);
#else
            nets[i]->n_lnh = ETHHDR_SIZE;
 401db20:	e0bffa17 	ldw	r2,-24(fp)
 401db24:	00c101b4 	movhi	r3,1030
 401db28:	18e20804 	addi	r3,r3,-30688
 401db2c:	1085883a 	add	r2,r2,r2
 401db30:	1085883a 	add	r2,r2,r2
 401db34:	10c5883a 	add	r2,r2,r3
 401db38:	10c00017 	ldw	r3,0(r2)
 401db3c:	00800404 	movi	r2,16
 401db40:	18800815 	stw	r2,32(r3)
      {
         continue;
      }
#endif   /* IP_V6 */

      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
 401db44:	e0bffa17 	ldw	r2,-24(fp)
 401db48:	00c101b4 	movhi	r3,1030
 401db4c:	18e20804 	addi	r3,r3,-30688
 401db50:	1085883a 	add	r2,r2,r2
 401db54:	1085883a 	add	r2,r2,r2
 401db58:	10c5883a 	add	r2,r2,r3
 401db5c:	10800017 	ldw	r2,0(r2)
 401db60:	10800817 	ldw	r2,32(r2)
 401db64:	d0e7ff17 	ldw	r3,-24580(gp)
 401db68:	e0ffff15 	stw	r3,-4(fp)
 401db6c:	e0bffe15 	stw	r2,-8(fp)
 401db70:	e0bffe17 	ldw	r2,-8(fp)
 401db74:	e0ffff17 	ldw	r3,-4(fp)
 401db78:	10c0020e 	bge	r2,r3,401db84 <Netinit+0x11c>
 401db7c:	e0bfff17 	ldw	r2,-4(fp)
 401db80:	e0bffe15 	stw	r2,-8(fp)
 401db84:	e0fffe17 	ldw	r3,-8(fp)
 401db88:	d0e7ff15 	stw	r3,-24580(gp)
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
 401db8c:	e0bffa17 	ldw	r2,-24(fp)
 401db90:	00c101b4 	movhi	r3,1030
 401db94:	18e20804 	addi	r3,r3,-30688
 401db98:	1085883a 	add	r2,r2,r2
 401db9c:	1085883a 	add	r2,r2,r2
 401dba0:	10c5883a 	add	r2,r2,r3
 401dba4:	10800017 	ldw	r2,0(r2)
 401dba8:	10800917 	ldw	r2,36(r2)
 401dbac:	d0e80017 	ldw	r3,-24576(gp)
 401dbb0:	e0fffd15 	stw	r3,-12(fp)
 401dbb4:	e0bffc15 	stw	r2,-16(fp)
 401dbb8:	e0bffc17 	ldw	r2,-16(fp)
 401dbbc:	e0fffd17 	ldw	r3,-12(fp)
 401dbc0:	10c0020e 	bge	r2,r3,401dbcc <Netinit+0x164>
 401dbc4:	e0bffd17 	ldw	r2,-12(fp)
 401dbc8:	e0bffc15 	stw	r2,-16(fp)
 401dbcc:	e0fffc17 	ldw	r3,-16(fp)
 401dbd0:	d0e80015 	stw	r3,-24576(gp)
#ifndef MULTI_HOMED
   ifNumber = 1;     /* prevents weird behavior below... */
#endif

   /* set our largest header size and frames size */
   for (i = 0; i < (int)ifNumber; i++)
 401dbd4:	e0bffa17 	ldw	r2,-24(fp)
 401dbd8:	10800044 	addi	r2,r2,1
 401dbdc:	e0bffa15 	stw	r2,-24(fp)
 401dbe0:	00810174 	movhi	r2,1029
 401dbe4:	1081c004 	addi	r2,r2,1792
 401dbe8:	10800017 	ldw	r2,0(r2)
 401dbec:	1007883a 	mov	r3,r2
 401dbf0:	e0bffa17 	ldw	r2,-24(fp)
 401dbf4:	10ffa216 	blt	r2,r3,401da80 <Netinit+0x18>
      MaxLnh = max(MaxLnh, nets[i]->n_lnh);
      MaxMtu = max(MaxMtu, nets[i]->n_mtu);
   }

   /* set up the received packet queue */
   rcvdq.q_head = rcvdq.q_tail = NULL;
 401dbf8:	008101b4 	movhi	r2,1030
 401dbfc:	10a14304 	addi	r2,r2,-31476
 401dc00:	10000115 	stw	zero,4(r2)
 401dc04:	008101b4 	movhi	r2,1030
 401dc08:	10a14304 	addi	r2,r2,-31476
 401dc0c:	10c00117 	ldw	r3,4(r2)
 401dc10:	008101b4 	movhi	r2,1030
 401dc14:	10a14304 	addi	r2,r2,-31476
 401dc18:	10c00015 	stw	r3,0(r2)
   rcvdq.q_max = rcvdq.q_min = rcvdq.q_len = 0;
 401dc1c:	008101b4 	movhi	r2,1030
 401dc20:	10a14304 	addi	r2,r2,-31476
 401dc24:	10000215 	stw	zero,8(r2)
 401dc28:	008101b4 	movhi	r2,1030
 401dc2c:	10a14304 	addi	r2,r2,-31476
 401dc30:	10c00217 	ldw	r3,8(r2)
 401dc34:	008101b4 	movhi	r2,1030
 401dc38:	10a14304 	addi	r2,r2,-31476
 401dc3c:	10c00415 	stw	r3,16(r2)
 401dc40:	008101b4 	movhi	r2,1030
 401dc44:	10a14304 	addi	r2,r2,-31476
 401dc48:	10c00417 	ldw	r3,16(r2)
 401dc4c:	008101b4 	movhi	r2,1030
 401dc50:	10a14304 	addi	r2,r2,-31476
 401dc54:	10c00315 	stw	r3,12(r2)

   /* initialize freeq */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 401dc58:	01000084 	movi	r4,2
 401dc5c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   e = pk_init();
 401dc60:	4024ce00 	call	4024ce0 <pk_init>
 401dc64:	e0bff915 	stw	r2,-28(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401dc68:	01000084 	movi	r4,2
 401dc6c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (e)   /* report error (memory ran out?) */
 401dc70:	e0bff917 	ldw	r2,-28(fp)
 401dc74:	1005003a 	cmpeq	r2,r2,zero
 401dc78:	1000031e 	bne	r2,zero,401dc88 <Netinit+0x220>
      return e;
 401dc7c:	e0bff917 	ldw	r2,-28(fp)
 401dc80:	e0bffb15 	stw	r2,-20(fp)
 401dc84:	00010506 	br	401e09c <Netinit+0x634>

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */
 401dc88:	010100b4 	movhi	r4,1026
 401dc8c:	21388504 	addi	r4,r4,-7660
 401dc90:	401ec280 	call	401ec28 <exit_hook>

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
 401dc94:	e03ffa15 	stw	zero,-24(fp)
 401dc98:	0000f906 	br	401e080 <Netinit+0x618>
   {
      if (nets[i]->n_init != NULL)  /* If iface has init routine... */
 401dc9c:	e0bffa17 	ldw	r2,-24(fp)
 401dca0:	00c101b4 	movhi	r3,1030
 401dca4:	18e20804 	addi	r3,r3,-30688
 401dca8:	1085883a 	add	r2,r2,r2
 401dcac:	1085883a 	add	r2,r2,r2
 401dcb0:	10c5883a 	add	r2,r2,r3
 401dcb4:	10800017 	ldw	r2,0(r2)
 401dcb8:	10800217 	ldw	r2,8(r2)
 401dcbc:	1005003a 	cmpeq	r2,r2,zero
 401dcc0:	1000931e 	bne	r2,zero,401df10 <Netinit+0x4a8>
      {
         if ((e = (*nets[i]->n_init)(i)) != 0)  /* call init routine */
 401dcc4:	e0bffa17 	ldw	r2,-24(fp)
 401dcc8:	00c101b4 	movhi	r3,1030
 401dccc:	18e20804 	addi	r3,r3,-30688
 401dcd0:	1085883a 	add	r2,r2,r2
 401dcd4:	1085883a 	add	r2,r2,r2
 401dcd8:	10c5883a 	add	r2,r2,r3
 401dcdc:	10800017 	ldw	r2,0(r2)
 401dce0:	10800217 	ldw	r2,8(r2)
 401dce4:	e13ffa17 	ldw	r4,-24(fp)
 401dce8:	103ee83a 	callr	r2
 401dcec:	e0bff915 	stw	r2,-28(fp)
 401dcf0:	e0bff917 	ldw	r2,-28(fp)
 401dcf4:	1005003a 	cmpeq	r2,r2,zero
 401dcf8:	1000101e 	bne	r2,zero,401dd3c <Netinit+0x2d4>
         {
            dprintf("init error %d on net[%d]\n", e, i);
 401dcfc:	01010174 	movhi	r4,1029
 401dd00:	212a8404 	addi	r4,r4,-22000
 401dd04:	e17ff917 	ldw	r5,-28(fp)
 401dd08:	e1bffa17 	ldw	r6,-24(fp)
 401dd0c:	400207c0 	call	400207c <printf>
            nets[i]->n_mib->ifOperStatus = NI_DOWN;
 401dd10:	e0bffa17 	ldw	r2,-24(fp)
 401dd14:	00c101b4 	movhi	r3,1030
 401dd18:	18e20804 	addi	r3,r3,-30688
 401dd1c:	1085883a 	add	r2,r2,r2
 401dd20:	1085883a 	add	r2,r2,r2
 401dd24:	10c5883a 	add	r2,r2,r3
 401dd28:	10800017 	ldw	r2,0(r2)
 401dd2c:	10c02717 	ldw	r3,156(r2)
 401dd30:	00800084 	movi	r2,2
 401dd34:	18800715 	stw	r2,28(r3)
            continue;   /* ignore ifaces which fail */
 401dd38:	0000ce06 	br	401e074 <Netinit+0x60c>
         }
         /* If interface is ethernet, set bcast flag bit. This
          * should really be done by the init routine, but we handle it
          * here to support MAC drivers which predate the flags field.
          */
         if(nets[i]->n_mib->ifType == ETHERNET)
 401dd3c:	e0bffa17 	ldw	r2,-24(fp)
 401dd40:	00c101b4 	movhi	r3,1030
 401dd44:	18e20804 	addi	r3,r3,-30688
 401dd48:	1085883a 	add	r2,r2,r2
 401dd4c:	1085883a 	add	r2,r2,r2
 401dd50:	10c5883a 	add	r2,r2,r3
 401dd54:	10800017 	ldw	r2,0(r2)
 401dd58:	10802717 	ldw	r2,156(r2)
 401dd5c:	10800217 	ldw	r2,8(r2)
 401dd60:	10800198 	cmpnei	r2,r2,6
 401dd64:	1000111e 	bne	r2,zero,401ddac <Netinit+0x344>
            nets[i]->n_flags |= NF_BCAST;
 401dd68:	e0bffa17 	ldw	r2,-24(fp)
 401dd6c:	00c101b4 	movhi	r3,1030
 401dd70:	18e20804 	addi	r3,r3,-30688
 401dd74:	1085883a 	add	r2,r2,r2
 401dd78:	1085883a 	add	r2,r2,r2
 401dd7c:	10c5883a 	add	r2,r2,r3
 401dd80:	11000017 	ldw	r4,0(r2)
 401dd84:	e0bffa17 	ldw	r2,-24(fp)
 401dd88:	00c101b4 	movhi	r3,1030
 401dd8c:	18e20804 	addi	r3,r3,-30688
 401dd90:	1085883a 	add	r2,r2,r2
 401dd94:	1085883a 	add	r2,r2,r2
 401dd98:	10c5883a 	add	r2,r2,r3
 401dd9c:	10800017 	ldw	r2,0(r2)
 401dda0:	10802a17 	ldw	r2,168(r2)
 401dda4:	10800054 	ori	r2,r2,1
 401dda8:	20802a15 	stw	r2,168(r4)

         /* set ifAdminStatus in case init() routine forgot to. IfOperStatus
          * is not nessecarily up at this point, as in the case of a modem which
          * is now in autoanswer mode.
          */
         nets[i]->n_mib->ifAdminStatus = NI_UP;
 401ddac:	e0bffa17 	ldw	r2,-24(fp)
 401ddb0:	00c101b4 	movhi	r3,1030
 401ddb4:	18e20804 	addi	r3,r3,-30688
 401ddb8:	1085883a 	add	r2,r2,r2
 401ddbc:	1085883a 	add	r2,r2,r2
 401ddc0:	10c5883a 	add	r2,r2,r3
 401ddc4:	10800017 	ldw	r2,0(r2)
 401ddc8:	10c02717 	ldw	r3,156(r2)
 401ddcc:	00800044 	movi	r2,1
 401ddd0:	18800615 	stw	r2,24(r3)

         /* assign default names to unnamed ifaces */
         if(nets[i]->name[0] == 0)     /* no name set by prep or init */
 401ddd4:	e0bffa17 	ldw	r2,-24(fp)
 401ddd8:	00c101b4 	movhi	r3,1030
 401dddc:	18e20804 	addi	r3,r3,-30688
 401dde0:	1085883a 	add	r2,r2,r2
 401dde4:	1085883a 	add	r2,r2,r2
 401dde8:	10c5883a 	add	r2,r2,r3
 401ddec:	10800017 	ldw	r2,0(r2)
 401ddf0:	10800103 	ldbu	r2,4(r2)
 401ddf4:	10803fcc 	andi	r2,r2,255
 401ddf8:	1080201c 	xori	r2,r2,128
 401ddfc:	10bfe004 	addi	r2,r2,-128
 401de00:	1004c03a 	cmpne	r2,r2,zero
 401de04:	1000421e 	bne	r2,zero,401df10 <Netinit+0x4a8>
         {
            if(nets[i]->n_mib->ifType == ETHERNET)
 401de08:	e0bffa17 	ldw	r2,-24(fp)
 401de0c:	00c101b4 	movhi	r3,1030
 401de10:	18e20804 	addi	r3,r3,-30688
 401de14:	1085883a 	add	r2,r2,r2
 401de18:	1085883a 	add	r2,r2,r2
 401de1c:	10c5883a 	add	r2,r2,r3
 401de20:	10800017 	ldw	r2,0(r2)
 401de24:	10802717 	ldw	r2,156(r2)
 401de28:	10800217 	ldw	r2,8(r2)
 401de2c:	10800198 	cmpnei	r2,r2,6
 401de30:	1000131e 	bne	r2,zero,401de80 <Netinit+0x418>
            {
               nets[i]->name[0] = 'e';    /* "et1", "et2", etc. */
 401de34:	e0bffa17 	ldw	r2,-24(fp)
 401de38:	00c101b4 	movhi	r3,1030
 401de3c:	18e20804 	addi	r3,r3,-30688
 401de40:	1085883a 	add	r2,r2,r2
 401de44:	1085883a 	add	r2,r2,r2
 401de48:	10c5883a 	add	r2,r2,r3
 401de4c:	10c00017 	ldw	r3,0(r2)
 401de50:	00801944 	movi	r2,101
 401de54:	18800105 	stb	r2,4(r3)
               nets[i]->name[1] = 't';
 401de58:	e0bffa17 	ldw	r2,-24(fp)
 401de5c:	00c101b4 	movhi	r3,1030
 401de60:	18e20804 	addi	r3,r3,-30688
 401de64:	1085883a 	add	r2,r2,r2
 401de68:	1085883a 	add	r2,r2,r2
 401de6c:	10c5883a 	add	r2,r2,r3
 401de70:	10c00017 	ldw	r3,0(r2)
 401de74:	00801d04 	movi	r2,116
 401de78:	18800145 	stb	r2,5(r3)
 401de7c:	00001206 	br	401dec8 <Netinit+0x460>
            }
            else
            {
               nets[i]->name[0] = 'i';    /* "if1", "if2", etc. */
 401de80:	e0bffa17 	ldw	r2,-24(fp)
 401de84:	00c101b4 	movhi	r3,1030
 401de88:	18e20804 	addi	r3,r3,-30688
 401de8c:	1085883a 	add	r2,r2,r2
 401de90:	1085883a 	add	r2,r2,r2
 401de94:	10c5883a 	add	r2,r2,r3
 401de98:	10c00017 	ldw	r3,0(r2)
 401de9c:	00801a44 	movi	r2,105
 401dea0:	18800105 	stb	r2,4(r3)
               nets[i]->name[1] = 'f';
 401dea4:	e0bffa17 	ldw	r2,-24(fp)
 401dea8:	00c101b4 	movhi	r3,1030
 401deac:	18e20804 	addi	r3,r3,-30688
 401deb0:	1085883a 	add	r2,r2,r2
 401deb4:	1085883a 	add	r2,r2,r2
 401deb8:	10c5883a 	add	r2,r2,r3
 401debc:	10c00017 	ldw	r3,0(r2)
 401dec0:	00801984 	movi	r2,102
 401dec4:	18800145 	stb	r2,5(r3)
            }
            nets[i]->name[2] = (char)(i + '1');
 401dec8:	e0bffa17 	ldw	r2,-24(fp)
 401decc:	00c101b4 	movhi	r3,1030
 401ded0:	18e20804 	addi	r3,r3,-30688
 401ded4:	1085883a 	add	r2,r2,r2
 401ded8:	1085883a 	add	r2,r2,r2
 401dedc:	10c5883a 	add	r2,r2,r3
 401dee0:	10c00017 	ldw	r3,0(r2)
 401dee4:	e0bffa17 	ldw	r2,-24(fp)
 401dee8:	10800c44 	addi	r2,r2,49
 401deec:	18800185 	stb	r2,6(r3)
            nets[i]->name[3] = '\0';
 401def0:	e0bffa17 	ldw	r2,-24(fp)
 401def4:	00c101b4 	movhi	r3,1030
 401def8:	18e20804 	addi	r3,r3,-30688
 401defc:	1085883a 	add	r2,r2,r2
 401df00:	1085883a 	add	r2,r2,r2
 401df04:	10c5883a 	add	r2,r2,r3
 401df08:	10800017 	ldw	r2,0(r2)
 401df0c:	100001c5 	stb	zero,7(r2)
         }
      }
      /* check on subnet routing - if no mask then make one */
      fixup_subnet_mask(i);      /* make mask for this net */
 401df10:	e13ffa17 	ldw	r4,-24(fp)
 401df14:	401e0b40 	call	401e0b4 <fixup_subnet_mask>

      /* build broadcast addresses */
      if(nets[i]->n_ipaddr != 0)
 401df18:	e0bffa17 	ldw	r2,-24(fp)
 401df1c:	00c101b4 	movhi	r3,1030
 401df20:	18e20804 	addi	r3,r3,-30688
 401df24:	1085883a 	add	r2,r2,r2
 401df28:	1085883a 	add	r2,r2,r2
 401df2c:	10c5883a 	add	r2,r2,r3
 401df30:	10800017 	ldw	r2,0(r2)
 401df34:	10800a17 	ldw	r2,40(r2)
 401df38:	1005003a 	cmpeq	r2,r2,zero
 401df3c:	10004d1e 	bne	r2,zero,401e074 <Netinit+0x60c>
      {
         nets[i]->n_netbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 401df40:	e0bffa17 	ldw	r2,-24(fp)
 401df44:	00c101b4 	movhi	r3,1030
 401df48:	18e20804 	addi	r3,r3,-30688
 401df4c:	1085883a 	add	r2,r2,r2
 401df50:	1085883a 	add	r2,r2,r2
 401df54:	10c5883a 	add	r2,r2,r3
 401df58:	11400017 	ldw	r5,0(r2)
 401df5c:	e0bffa17 	ldw	r2,-24(fp)
 401df60:	00c101b4 	movhi	r3,1030
 401df64:	18e20804 	addi	r3,r3,-30688
 401df68:	1085883a 	add	r2,r2,r2
 401df6c:	1085883a 	add	r2,r2,r2
 401df70:	10c5883a 	add	r2,r2,r3
 401df74:	10800017 	ldw	r2,0(r2)
 401df78:	11000a17 	ldw	r4,40(r2)
 401df7c:	e0bffa17 	ldw	r2,-24(fp)
 401df80:	00c101b4 	movhi	r3,1030
 401df84:	18e20804 	addi	r3,r3,-30688
 401df88:	1085883a 	add	r2,r2,r2
 401df8c:	1085883a 	add	r2,r2,r2
 401df90:	10c5883a 	add	r2,r2,r3
 401df94:	10800017 	ldw	r2,0(r2)
 401df98:	10800c17 	ldw	r2,48(r2)
 401df9c:	0084303a 	nor	r2,zero,r2
 401dfa0:	2084b03a 	or	r2,r4,r2
 401dfa4:	28800e15 	stw	r2,56(r5)
         nets[i]->n_netbr42 = nets[i]->n_ipaddr & nets[i]->snmask;
 401dfa8:	e0bffa17 	ldw	r2,-24(fp)
 401dfac:	00c101b4 	movhi	r3,1030
 401dfb0:	18e20804 	addi	r3,r3,-30688
 401dfb4:	1085883a 	add	r2,r2,r2
 401dfb8:	1085883a 	add	r2,r2,r2
 401dfbc:	10c5883a 	add	r2,r2,r3
 401dfc0:	11400017 	ldw	r5,0(r2)
 401dfc4:	e0bffa17 	ldw	r2,-24(fp)
 401dfc8:	00c101b4 	movhi	r3,1030
 401dfcc:	18e20804 	addi	r3,r3,-30688
 401dfd0:	1085883a 	add	r2,r2,r2
 401dfd4:	1085883a 	add	r2,r2,r2
 401dfd8:	10c5883a 	add	r2,r2,r3
 401dfdc:	10800017 	ldw	r2,0(r2)
 401dfe0:	11000a17 	ldw	r4,40(r2)
 401dfe4:	e0bffa17 	ldw	r2,-24(fp)
 401dfe8:	00c101b4 	movhi	r3,1030
 401dfec:	18e20804 	addi	r3,r3,-30688
 401dff0:	1085883a 	add	r2,r2,r2
 401dff4:	1085883a 	add	r2,r2,r2
 401dff8:	10c5883a 	add	r2,r2,r3
 401dffc:	10800017 	ldw	r2,0(r2)
 401e000:	10800c17 	ldw	r2,48(r2)
 401e004:	2084703a 	and	r2,r4,r2
 401e008:	28800f15 	stw	r2,60(r5)
         nets[i]->n_subnetbr = nets[i]->n_ipaddr | ~nets[i]->snmask;
 401e00c:	e0bffa17 	ldw	r2,-24(fp)
 401e010:	00c101b4 	movhi	r3,1030
 401e014:	18e20804 	addi	r3,r3,-30688
 401e018:	1085883a 	add	r2,r2,r2
 401e01c:	1085883a 	add	r2,r2,r2
 401e020:	10c5883a 	add	r2,r2,r3
 401e024:	11400017 	ldw	r5,0(r2)
 401e028:	e0bffa17 	ldw	r2,-24(fp)
 401e02c:	00c101b4 	movhi	r3,1030
 401e030:	18e20804 	addi	r3,r3,-30688
 401e034:	1085883a 	add	r2,r2,r2
 401e038:	1085883a 	add	r2,r2,r2
 401e03c:	10c5883a 	add	r2,r2,r3
 401e040:	10800017 	ldw	r2,0(r2)
 401e044:	11000a17 	ldw	r4,40(r2)
 401e048:	e0bffa17 	ldw	r2,-24(fp)
 401e04c:	00c101b4 	movhi	r3,1030
 401e050:	18e20804 	addi	r3,r3,-30688
 401e054:	1085883a 	add	r2,r2,r2
 401e058:	1085883a 	add	r2,r2,r2
 401e05c:	10c5883a 	add	r2,r2,r3
 401e060:	10800017 	ldw	r2,0(r2)
 401e064:	10800c17 	ldw	r2,48(r2)
 401e068:	0084303a 	nor	r2,zero,r2
 401e06c:	2084b03a 	or	r2,r4,r2
 401e070:	28801015 	stw	r2,64(r5)

   /* packet buffers in freeq are now all set. */
   exit_hook(netclose);       /* Clean up nets when we are unloaded */

   /* now do the per-IP interface initializations */
   for (i = 0; i < (int)ifNumber; i++)
 401e074:	e0bffa17 	ldw	r2,-24(fp)
 401e078:	10800044 	addi	r2,r2,1
 401e07c:	e0bffa15 	stw	r2,-24(fp)
 401e080:	00810174 	movhi	r2,1029
 401e084:	1081c004 	addi	r2,r2,1792
 401e088:	10800017 	ldw	r2,0(r2)
 401e08c:	1007883a 	mov	r3,r2
 401e090:	e0bffa17 	ldw	r2,-24(fp)
 401e094:	10ff0116 	blt	r2,r3,401dc9c <Netinit+0x234>
#if defined(DYNAMIC_IFACES) && defined(IN_MENUS)
   /* Install dynamic iface menu */
   install_menu(&dynif_menu[0]);
#endif /* DYNAMIC_IFACES && IN_MENUS */

   return(0);
 401e098:	e03ffb15 	stw	zero,-20(fp)
 401e09c:	e0bffb17 	ldw	r2,-20(fp)
}
 401e0a0:	e037883a 	mov	sp,fp
 401e0a4:	dfc00117 	ldw	ra,4(sp)
 401e0a8:	df000017 	ldw	fp,0(sp)
 401e0ac:	dec00204 	addi	sp,sp,8
 401e0b0:	f800283a 	ret

0401e0b4 <fixup_subnet_mask>:
 * RETURNS: 
 */

void
fixup_subnet_mask(int netnum)      /* which of the nets[] to do. */
{
 401e0b4:	defffc04 	addi	sp,sp,-16
 401e0b8:	dfc00315 	stw	ra,12(sp)
 401e0bc:	df000215 	stw	fp,8(sp)
 401e0c0:	df000204 	addi	fp,sp,8
 401e0c4:	e13fff15 	stw	r4,-4(fp)
   u_long   smask;

   if (nets[netnum]->snmask)  /* if mask is already set, don't bother */
 401e0c8:	e0bfff17 	ldw	r2,-4(fp)
 401e0cc:	00c101b4 	movhi	r3,1030
 401e0d0:	18e20804 	addi	r3,r3,-30688
 401e0d4:	1085883a 	add	r2,r2,r2
 401e0d8:	1085883a 	add	r2,r2,r2
 401e0dc:	10c5883a 	add	r2,r2,r3
 401e0e0:	10800017 	ldw	r2,0(r2)
 401e0e4:	10800c17 	ldw	r2,48(r2)
 401e0e8:	1004c03a 	cmpne	r2,r2,zero
 401e0ec:	1000441e 	bne	r2,zero,401e200 <fixup_subnet_mask+0x14c>
      return;

   /* things depending on IP address class: */
   if ((nets[netnum]->n_ipaddr & AMASK) == AADDR)
 401e0f0:	e0bfff17 	ldw	r2,-4(fp)
 401e0f4:	00c101b4 	movhi	r3,1030
 401e0f8:	18e20804 	addi	r3,r3,-30688
 401e0fc:	1085883a 	add	r2,r2,r2
 401e100:	1085883a 	add	r2,r2,r2
 401e104:	10c5883a 	add	r2,r2,r3
 401e108:	10800017 	ldw	r2,0(r2)
 401e10c:	10800a17 	ldw	r2,40(r2)
 401e110:	1080200c 	andi	r2,r2,128
 401e114:	1004c03a 	cmpne	r2,r2,zero
 401e118:	1000031e 	bne	r2,zero,401e128 <fixup_subnet_mask+0x74>
      smask = 0xFF000000L;
 401e11c:	00bfc034 	movhi	r2,65280
 401e120:	e0bffe15 	stw	r2,-8(fp)
 401e124:	00001f06 	br	401e1a4 <fixup_subnet_mask+0xf0>
   else if((nets[netnum]->n_ipaddr & BMASK) == BADDR)
 401e128:	e0bfff17 	ldw	r2,-4(fp)
 401e12c:	00c101b4 	movhi	r3,1030
 401e130:	18e20804 	addi	r3,r3,-30688
 401e134:	1085883a 	add	r2,r2,r2
 401e138:	1085883a 	add	r2,r2,r2
 401e13c:	10c5883a 	add	r2,r2,r3
 401e140:	10800017 	ldw	r2,0(r2)
 401e144:	10800a17 	ldw	r2,40(r2)
 401e148:	1080300c 	andi	r2,r2,192
 401e14c:	10802018 	cmpnei	r2,r2,128
 401e150:	1000031e 	bne	r2,zero,401e160 <fixup_subnet_mask+0xac>
      smask = 0xFFFF0000L;
 401e154:	00bffff4 	movhi	r2,65535
 401e158:	e0bffe15 	stw	r2,-8(fp)
 401e15c:	00001106 	br	401e1a4 <fixup_subnet_mask+0xf0>
   else if((nets[netnum]->n_ipaddr & CMASK) == CADDR)
 401e160:	e0bfff17 	ldw	r2,-4(fp)
 401e164:	00c101b4 	movhi	r3,1030
 401e168:	18e20804 	addi	r3,r3,-30688
 401e16c:	1085883a 	add	r2,r2,r2
 401e170:	1085883a 	add	r2,r2,r2
 401e174:	10c5883a 	add	r2,r2,r3
 401e178:	10800017 	ldw	r2,0(r2)
 401e17c:	10800a17 	ldw	r2,40(r2)
 401e180:	1080380c 	andi	r2,r2,224
 401e184:	10803018 	cmpnei	r2,r2,192
 401e188:	1000031e 	bne	r2,zero,401e198 <fixup_subnet_mask+0xe4>
      smask = 0xFFFFFF00L;
 401e18c:	00bfc004 	movi	r2,-256
 401e190:	e0bffe15 	stw	r2,-8(fp)
 401e194:	00000306 	br	401e1a4 <fixup_subnet_mask+0xf0>
   else
   {
      dtrap();    /* bad logic or setup values */
 401e198:	4025bb40 	call	4025bb4 <dtrap>
      smask = 0xFFFFFF00L;
 401e19c:	00bfc004 	movi	r2,-256
 401e1a0:	e0bffe15 	stw	r2,-8(fp)
   }
   nets[netnum]->snmask = htonl(smask);
 401e1a4:	e0bfff17 	ldw	r2,-4(fp)
 401e1a8:	00c101b4 	movhi	r3,1030
 401e1ac:	18e20804 	addi	r3,r3,-30688
 401e1b0:	1085883a 	add	r2,r2,r2
 401e1b4:	1085883a 	add	r2,r2,r2
 401e1b8:	10c5883a 	add	r2,r2,r3
 401e1bc:	11000017 	ldw	r4,0(r2)
 401e1c0:	e0bffe17 	ldw	r2,-8(fp)
 401e1c4:	1004d63a 	srli	r2,r2,24
 401e1c8:	10c03fcc 	andi	r3,r2,255
 401e1cc:	e0bffe17 	ldw	r2,-8(fp)
 401e1d0:	1004d23a 	srli	r2,r2,8
 401e1d4:	10bfc00c 	andi	r2,r2,65280
 401e1d8:	1886b03a 	or	r3,r3,r2
 401e1dc:	e0bffe17 	ldw	r2,-8(fp)
 401e1e0:	10bfc00c 	andi	r2,r2,65280
 401e1e4:	1004923a 	slli	r2,r2,8
 401e1e8:	1886b03a 	or	r3,r3,r2
 401e1ec:	e0bffe17 	ldw	r2,-8(fp)
 401e1f0:	10803fcc 	andi	r2,r2,255
 401e1f4:	1004963a 	slli	r2,r2,24
 401e1f8:	1884b03a 	or	r2,r3,r2
 401e1fc:	20800c15 	stw	r2,48(r4)
}
 401e200:	e037883a 	mov	sp,fp
 401e204:	dfc00117 	ldw	ra,4(sp)
 401e208:	df000017 	ldw	fp,0(sp)
 401e20c:	dec00204 	addi	sp,sp,8
 401e210:	f800283a 	ret

0401e214 <netclose>:
 * RETURNS: 
 */

void
netclose()
{
 401e214:	defffc04 	addi	sp,sp,-16
 401e218:	dfc00315 	stw	ra,12(sp)
 401e21c:	df000215 	stw	fp,8(sp)
 401e220:	df000204 	addi	fp,sp,8
   NET ifp;
   int index = 0;
 401e224:	e03ffe15 	stw	zero,-8(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
 401e228:	d0a80117 	ldw	r2,-24572(gp)
 401e22c:	1080010c 	andi	r2,r2,4
 401e230:	1005003a 	cmpeq	r2,r2,zero
 401e234:	1000031e 	bne	r2,zero,401e244 <netclose+0x30>
 401e238:	01010174 	movhi	r4,1029
 401e23c:	212a8b04 	addi	r4,r4,-21972
 401e240:	40021940 	call	4002194 <puts>
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 401e244:	008101b4 	movhi	r2,1030
 401e248:	10a44904 	addi	r2,r2,-28380
 401e24c:	10800017 	ldw	r2,0(r2)
 401e250:	e0bfff15 	stw	r2,-4(fp)
 401e254:	00002106 	br	401e2dc <netclose+0xc8>
   {
      if (ifp->n_close)
 401e258:	e0bfff17 	ldw	r2,-4(fp)
 401e25c:	10800517 	ldw	r2,20(r2)
 401e260:	1005003a 	cmpeq	r2,r2,zero
 401e264:	10000e1e 	bne	r2,zero,401e2a0 <netclose+0x8c>
      {
         dprintf("netclose: closing iface %s\n", ifp->n_mib->ifDescr);
 401e268:	e0bfff17 	ldw	r2,-4(fp)
 401e26c:	10802717 	ldw	r2,156(r2)
 401e270:	11400117 	ldw	r5,4(r2)
 401e274:	01010174 	movhi	r4,1029
 401e278:	212a9004 	addi	r4,r4,-21952
 401e27c:	400207c0 	call	400207c <printf>
         (*(ifp->n_close))(index++);
 401e280:	e0bfff17 	ldw	r2,-4(fp)
 401e284:	10c00517 	ldw	r3,20(r2)
 401e288:	e13ffe17 	ldw	r4,-8(fp)
 401e28c:	e0bffe17 	ldw	r2,-8(fp)
 401e290:	10800044 	addi	r2,r2,1
 401e294:	e0bffe15 	stw	r2,-8(fp)
 401e298:	183ee83a 	callr	r3
 401e29c:	00000c06 	br	401e2d0 <netclose+0xbc>
      }
      else
      {
#ifdef NPDEBUG
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
 401e2a0:	d0a80117 	ldw	r2,-24572(gp)
 401e2a4:	1080010c 	andi	r2,r2,4
 401e2a8:	1005003a 	cmpeq	r2,r2,zero
 401e2ac:	1000051e 	bne	r2,zero,401e2c4 <netclose+0xb0>
 401e2b0:	e0bfff17 	ldw	r2,-4(fp)
 401e2b4:	11400104 	addi	r5,r2,4
 401e2b8:	01010174 	movhi	r4,1029
 401e2bc:	212a9704 	addi	r4,r4,-21924
 401e2c0:	400207c0 	call	400207c <printf>
#endif
         index++;
 401e2c4:	e0bffe17 	ldw	r2,-8(fp)
 401e2c8:	10800044 	addi	r2,r2,1
 401e2cc:	e0bffe15 	stw	r2,-8(fp)

#ifdef NPDEBUG
   if (NDEBUG & INFOMSG)   dprintf("netclose() called\n");
#endif

   for (ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next)
 401e2d0:	e0bfff17 	ldw	r2,-4(fp)
 401e2d4:	10800017 	ldw	r2,0(r2)
 401e2d8:	e0bfff15 	stw	r2,-4(fp)
 401e2dc:	e0bfff17 	ldw	r2,-4(fp)
 401e2e0:	1004c03a 	cmpne	r2,r2,zero
 401e2e4:	103fdc1e 	bne	r2,zero,401e258 <netclose+0x44>
         if (NDEBUG & INFOMSG) dprintf("net %s: no close routine!\n", ifp->name);
#endif
         index++;
      }
   }
}
 401e2e8:	e037883a 	mov	sp,fp
 401e2ec:	dfc00117 	ldw	ra,4(sp)
 401e2f0:	df000017 	ldw	fp,0(sp)
 401e2f4:	dec00204 	addi	sp,sp,8
 401e2f8:	f800283a 	ret

0401e2fc <pktdemux>:
 * RETURNS: void
 */

void
pktdemux()
{
 401e2fc:	defff804 	addi	sp,sp,-32
 401e300:	dfc00715 	stw	ra,28(sp)
 401e304:	df000615 	stw	fp,24(sp)
 401e308:	df000604 	addi	fp,sp,24
   NET      ifc;                /* interface packet came from */
   IFMIB    mib;
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */
 401e30c:	e03ffb15 	stw	zero,-20(fp)

   while (rcvdq.q_len)
 401e310:	0000e506 	br	401e6a8 <pktdemux+0x3ac>
   {
      /* If we are low on free packets, don't hog CPU cycles */
      if (pkts++ > bigfreeq.q_len)
 401e314:	008101b4 	movhi	r2,1030
 401e318:	10a2af04 	addi	r2,r2,-30020
 401e31c:	10c00217 	ldw	r3,8(r2)
 401e320:	e0bffb17 	ldw	r2,-20(fp)
 401e324:	1884803a 	cmplt	r2,r3,r2
 401e328:	1007883a 	mov	r3,r2
 401e32c:	e0bffb17 	ldw	r2,-20(fp)
 401e330:	10800044 	addi	r2,r2,1
 401e334:	e0bffb15 	stw	r2,-20(fp)
 401e338:	18803fcc 	andi	r2,r3,255
 401e33c:	1005003a 	cmpeq	r2,r2,zero
 401e340:	1000021e 	bne	r2,zero,401e34c <pktdemux+0x50>
      {
#ifdef SUPERLOOP
         return;        /* don't hog stack on superloop */
#else    /* SUPERLOOP */
         tk_yield(); /* let application tasks process received packets */
 401e344:	4021aa00 	call	4021aa0 <tk_yield>
         pkts = 0;   /* reset counter */
 401e348:	e03ffb15 	stw	zero,-20(fp)
#endif   /* SUPERLOOP else */
      }

      /* If we get receive interupt from the net during this
      lock, the MAC driver needs to wait or reschedule */
      LOCK_NET_RESOURCE(RXQ_RESID);
 401e34c:	01000044 	movi	r4,1
 401e350:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pkt = (PACKET)q_deq(&rcvdq);
 401e354:	010101b4 	movhi	r4,1030
 401e358:	21214304 	addi	r4,r4,-31476
 401e35c:	402547c0 	call	402547c <getq>
 401e360:	e0bffe15 	stw	r2,-8(fp)
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 401e364:	01000044 	movi	r4,1
 401e368:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      if (!pkt) panic("pktdemux: got null pkt");
 401e36c:	e0bffe17 	ldw	r2,-8(fp)
 401e370:	1004c03a 	cmpne	r2,r2,zero
 401e374:	1000031e 	bne	r2,zero,401e384 <pktdemux+0x88>
 401e378:	01010174 	movhi	r4,1029
 401e37c:	212a9e04 	addi	r4,r4,-21896
 401e380:	4020e100 	call	4020e10 <panic>
      ifc = pkt->net;
 401e384:	e0bffe17 	ldw	r2,-8(fp)
 401e388:	10800617 	ldw	r2,24(r2)
 401e38c:	e0bffd15 	stw	r2,-12(fp)

      mib = ifc->n_mib;
 401e390:	e0bffd17 	ldw	r2,-12(fp)
 401e394:	10802717 	ldw	r2,156(r2)
 401e398:	e0bffc15 	stw	r2,-16(fp)
      /* maintain mib stats for unicast and broadcast */
      if (isbcast(ifc, (u_char*)pkt->nb_buff + ETHHDR_BIAS))
 401e39c:	e0bffe17 	ldw	r2,-8(fp)
 401e3a0:	10800117 	ldw	r2,4(r2)
 401e3a4:	11400084 	addi	r5,r2,2
 401e3a8:	e13ffd17 	ldw	r4,-12(fp)
 401e3ac:	40386f80 	call	40386f8 <isbcast>
 401e3b0:	1005003a 	cmpeq	r2,r2,zero
 401e3b4:	1000061e 	bne	r2,zero,401e3d0 <pktdemux+0xd4>
         mib->ifInNUcastPkts++;
 401e3b8:	e0bffc17 	ldw	r2,-16(fp)
 401e3bc:	10800b17 	ldw	r2,44(r2)
 401e3c0:	10c00044 	addi	r3,r2,1
 401e3c4:	e0bffc17 	ldw	r2,-16(fp)
 401e3c8:	10c00b15 	stw	r3,44(r2)
 401e3cc:	00000506 	br	401e3e4 <pktdemux+0xe8>
      else
         mib->ifInUcastPkts++;
 401e3d0:	e0bffc17 	ldw	r2,-16(fp)
 401e3d4:	10800a17 	ldw	r2,40(r2)
 401e3d8:	10c00044 	addi	r3,r2,1
 401e3dc:	e0bffc17 	ldw	r2,-16(fp)
 401e3e0:	10c00a15 	stw	r3,40(r2)

      if(mib->ifAdminStatus == NI_DOWN)
 401e3e4:	e0bffc17 	ldw	r2,-16(fp)
 401e3e8:	10800617 	ldw	r2,24(r2)
 401e3ec:	10800098 	cmpnei	r2,r2,2
 401e3f0:	10000c1e 	bne	r2,zero,401e424 <pktdemux+0x128>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401e3f4:	01000084 	movi	r4,2
 401e3f8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(pkt);  /* dump packet from downed interface */
 401e3fc:	e13ffe17 	ldw	r4,-8(fp)
 401e400:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401e404:	01000084 	movi	r4,2
 401e408:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         mib->ifInDiscards++;
 401e40c:	e0bffc17 	ldw	r2,-16(fp)
 401e410:	10800c17 	ldw	r2,48(r2)
 401e414:	10c00044 	addi	r3,r2,1
 401e418:	e0bffc17 	ldw	r2,-16(fp)
 401e41c:	10c00c15 	stw	r3,48(r2)
         continue;      /* next packet */
 401e420:	0000a106 	br	401e6a8 <pktdemux+0x3ac>
      }

#ifdef NPDEBUG
      if (*(pkt->nb_buff - ALIGN_TYPE) != 'M' ||
 401e424:	e0bffe17 	ldw	r2,-8(fp)
 401e428:	10800117 	ldw	r2,4(r2)
 401e42c:	10bfff04 	addi	r2,r2,-4
 401e430:	10800003 	ldbu	r2,0(r2)
 401e434:	10803fcc 	andi	r2,r2,255
 401e438:	1080201c 	xori	r2,r2,128
 401e43c:	10bfe004 	addi	r2,r2,-128
 401e440:	10801358 	cmpnei	r2,r2,77
 401e444:	10000b1e 	bne	r2,zero,401e474 <pktdemux+0x178>
 401e448:	e0bffe17 	ldw	r2,-8(fp)
 401e44c:	10c00117 	ldw	r3,4(r2)
 401e450:	e0bffe17 	ldw	r2,-8(fp)
 401e454:	10800217 	ldw	r2,8(r2)
 401e458:	1885883a 	add	r2,r3,r2
 401e45c:	10800003 	ldbu	r2,0(r2)
 401e460:	10803fcc 	andi	r2,r2,255
 401e464:	1080201c 	xori	r2,r2,128
 401e468:	10bfe004 	addi	r2,r2,-128
 401e46c:	10801360 	cmpeqi	r2,r2,77
 401e470:	1000041e 	bne	r2,zero,401e484 <pktdemux+0x188>
          *(pkt->nb_buff + pkt->nb_blen) != 'M')
      {
         dtrap();
 401e474:	4025bb40 	call	4025bb4 <dtrap>
         panic("pktdemux: corrupt pkt");
 401e478:	01010174 	movhi	r4,1029
 401e47c:	212aa404 	addi	r4,r4,-21872
 401e480:	4020e100 	call	4020e10 <panic>
         }
      }
#endif   /* LOSSY_IO */

      /* see if driver set pkt->nb_prot and pkt->type */
      if((ifc->n_flags & NF_NBPROT) == 0)
 401e484:	e0bffd17 	ldw	r2,-12(fp)
 401e488:	10802a17 	ldw	r2,168(r2)
 401e48c:	1080020c 	andi	r2,r2,8
 401e490:	1004c03a 	cmpne	r2,r2,zero
 401e494:	10004d1e 	bne	r2,zero,401e5cc <pktdemux+0x2d0>
          * probably the right thing to do, but because of this historic
          * inconsistency we don't try to fix it here - the longer size
          * turns out to be harmless since the IP layer fixes the size
          * based on the IP header length field.
          */
         switch(ifc->n_mib->ifType)
 401e498:	e0bffd17 	ldw	r2,-12(fp)
 401e49c:	10802717 	ldw	r2,156(r2)
 401e4a0:	10800217 	ldw	r2,8(r2)
 401e4a4:	108001a0 	cmpeqi	r2,r2,6
 401e4a8:	1000011e 	bne	r2,zero,401e4b0 <pktdemux+0x1b4>
 401e4ac:	00003a06 	br	401e598 <pktdemux+0x29c>
         {
         case ETHERNET:
            /* get pointer to ethernet header */
            eth = (pkt->nb_buff + ETHHDR_BIAS);
 401e4b0:	e0bffe17 	ldw	r2,-8(fp)
 401e4b4:	10800117 	ldw	r2,4(r2)
 401e4b8:	10800084 	addi	r2,r2,2
 401e4bc:	e0bffa15 	stw	r2,-24(fp)
            {
               pkt->type = htons((unshort)ET_TYPE_GET(eth));
               pkt->nb_prot = pkt->nb_buff + ETHHDR_SIZE;
            }
#else
            pkt->type = htons((unshort)ET_TYPE_GET(eth));
 401e4c0:	e0bffa17 	ldw	r2,-24(fp)
 401e4c4:	10800304 	addi	r2,r2,12
 401e4c8:	10800003 	ldbu	r2,0(r2)
 401e4cc:	10803fcc 	andi	r2,r2,255
 401e4d0:	1080201c 	xori	r2,r2,128
 401e4d4:	10bfe004 	addi	r2,r2,-128
 401e4d8:	1004923a 	slli	r2,r2,8
 401e4dc:	1007883a 	mov	r3,r2
 401e4e0:	e0bffa17 	ldw	r2,-24(fp)
 401e4e4:	10800344 	addi	r2,r2,13
 401e4e8:	10800003 	ldbu	r2,0(r2)
 401e4ec:	10803fcc 	andi	r2,r2,255
 401e4f0:	1080201c 	xori	r2,r2,128
 401e4f4:	10bfe004 	addi	r2,r2,-128
 401e4f8:	10803fcc 	andi	r2,r2,255
 401e4fc:	1885883a 	add	r2,r3,r2
 401e500:	10bfffcc 	andi	r2,r2,65535
 401e504:	1004d23a 	srli	r2,r2,8
 401e508:	10803fcc 	andi	r2,r2,255
 401e50c:	1009883a 	mov	r4,r2
 401e510:	e0bffa17 	ldw	r2,-24(fp)
 401e514:	10800304 	addi	r2,r2,12
 401e518:	10800003 	ldbu	r2,0(r2)
 401e51c:	10803fcc 	andi	r2,r2,255
 401e520:	1080201c 	xori	r2,r2,128
 401e524:	10bfe004 	addi	r2,r2,-128
 401e528:	1004923a 	slli	r2,r2,8
 401e52c:	1007883a 	mov	r3,r2
 401e530:	e0bffa17 	ldw	r2,-24(fp)
 401e534:	10800344 	addi	r2,r2,13
 401e538:	10800003 	ldbu	r2,0(r2)
 401e53c:	10803fcc 	andi	r2,r2,255
 401e540:	1080201c 	xori	r2,r2,128
 401e544:	10bfe004 	addi	r2,r2,-128
 401e548:	10803fcc 	andi	r2,r2,255
 401e54c:	1885883a 	add	r2,r3,r2
 401e550:	10bfffcc 	andi	r2,r2,65535
 401e554:	1004923a 	slli	r2,r2,8
 401e558:	1007883a 	mov	r3,r2
 401e55c:	00bfc004 	movi	r2,-256
 401e560:	1884703a 	and	r2,r3,r2
 401e564:	2084b03a 	or	r2,r4,r2
 401e568:	1007883a 	mov	r3,r2
 401e56c:	e0bffe17 	ldw	r2,-8(fp)
 401e570:	10c0080d 	sth	r3,32(r2)
            pkt->nb_prot = pkt->nb_buff + pkt->net->n_lnh;
 401e574:	e0bffe17 	ldw	r2,-8(fp)
 401e578:	10c00117 	ldw	r3,4(r2)
 401e57c:	e0bffe17 	ldw	r2,-8(fp)
 401e580:	10800617 	ldw	r2,24(r2)
 401e584:	10800817 	ldw	r2,32(r2)
 401e588:	1887883a 	add	r3,r3,r2
 401e58c:	e0bffe17 	ldw	r2,-8(fp)
 401e590:	10c00315 	stw	r3,12(r2)
#endif   /* IEEE_802_3 */
            break;
 401e594:	00000d06 	br	401e5cc <pktdemux+0x2d0>
         case PPPOE:
            /* do not change type yet, for PPPoE */
            break;
#endif   /* USE_PPPOE */
         default:    /* driver bug? */
            dprintf("pktdemux: bad Iface type %ld\n",ifc->n_mib->ifType);
 401e598:	e0bffd17 	ldw	r2,-12(fp)
 401e59c:	10802717 	ldw	r2,156(r2)
 401e5a0:	11400217 	ldw	r5,8(r2)
 401e5a4:	01010174 	movhi	r4,1029
 401e5a8:	212aaa04 	addi	r4,r4,-21848
 401e5ac:	400207c0 	call	400207c <printf>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 401e5b0:	01000084 	movi	r4,2
 401e5b4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(pkt);
 401e5b8:	e13ffe17 	ldw	r4,-8(fp)
 401e5bc:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401e5c0:	01000084 	movi	r4,2
 401e5c4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            continue;
 401e5c8:	00003706 	br	401e6a8 <pktdemux+0x3ac>
         }
      }

      /* pkt->nb_prot and pkt->type are now set. pass pkt to upper layer */
      switch(pkt->type)
 401e5cc:	e0bffe17 	ldw	r2,-8(fp)
 401e5d0:	1080080b 	ldhu	r2,32(r2)
 401e5d4:	10bfffcc 	andi	r2,r2,65535
 401e5d8:	e0bfff15 	stw	r2,-4(fp)
 401e5dc:	e0ffff17 	ldw	r3,-4(fp)
 401e5e0:	18800220 	cmpeqi	r2,r3,8
 401e5e4:	1000041e 	bne	r2,zero,401e5f8 <pktdemux+0x2fc>
 401e5e8:	e0ffff17 	ldw	r3,-4(fp)
 401e5ec:	18818220 	cmpeqi	r2,r3,1544
 401e5f0:	1000081e 	bne	r2,zero,401e614 <pktdemux+0x318>
 401e5f4:	00000e06 	br	401e630 <pktdemux+0x334>
      {
      case IPTP:     /* IP type */
         LOCK_NET_RESOURCE(NET_RESID);
 401e5f8:	0009883a 	mov	r4,zero
 401e5fc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
#ifdef SHARED_IPADDRS
         add_share_route(pkt);
#endif /* SHARED_IPADDRS */
#ifdef IP_V4
         ip_rcv(pkt);
 401e600:	e13ffe17 	ldw	r4,-8(fp)
 401e604:	403c9480 	call	403c948 <ip_rcv>
            /* don't care, it's IPv4 */
            LOCK_NET_RESOURCE(FREEQ_RESID);
            pk_free(pkt);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif
		UNLOCK_NET_RESOURCE(NET_RESID);
 401e608:	0009883a 	mov	r4,zero
 401e60c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         break;
 401e610:	00002506 	br	401e6a8 <pktdemux+0x3ac>
#ifdef INCLUDE_ARP
      case ARPTP:       /* ARP type */
         LOCK_NET_RESOURCE(NET_RESID);
 401e614:	0009883a 	mov	r4,zero
 401e618:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         arprcv(pkt);
 401e61c:	e13ffe17 	ldw	r4,-8(fp)
 401e620:	4037e880 	call	4037e88 <arprcv>
         UNLOCK_NET_RESOURCE(NET_RESID);
 401e624:	0009883a 	mov	r4,zero
 401e628:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         break;
 401e62c:	00001e06 	br	401e6a8 <pktdemux+0x3ac>
         UNLOCK_NET_RESOURCE(NET_RESID);
         break;
#endif
      default:
#ifdef NPDEBUG
         if (NDEBUG & UPCTRACE)
 401e630:	d0a80117 	ldw	r2,-24572(gp)
 401e634:	1081000c 	andi	r2,r2,1024
 401e638:	1005003a 	cmpeq	r2,r2,zero
 401e63c:	10000f1e 	bne	r2,zero,401e67c <pktdemux+0x380>
            dprintf("pktdemux: bad pkt type 0x%04x\n", ntohs(pkt->type));
 401e640:	e0bffe17 	ldw	r2,-8(fp)
 401e644:	1080080b 	ldhu	r2,32(r2)
 401e648:	10bfffcc 	andi	r2,r2,65535
 401e64c:	1004d23a 	srli	r2,r2,8
 401e650:	10bfffcc 	andi	r2,r2,65535
 401e654:	10c03fcc 	andi	r3,r2,255
 401e658:	e0bffe17 	ldw	r2,-8(fp)
 401e65c:	1080080b 	ldhu	r2,32(r2)
 401e660:	10bfffcc 	andi	r2,r2,65535
 401e664:	1004923a 	slli	r2,r2,8
 401e668:	10bfc00c 	andi	r2,r2,65280
 401e66c:	188ab03a 	or	r5,r3,r2
 401e670:	01010174 	movhi	r4,1029
 401e674:	212ab204 	addi	r4,r4,-21816
 401e678:	400207c0 	call	400207c <printf>
#endif   /* NPDEBUG */
         ifc->n_mib->ifInUnknownProtos++;
 401e67c:	e0bffd17 	ldw	r2,-12(fp)
 401e680:	10c02717 	ldw	r3,156(r2)
 401e684:	18800e17 	ldw	r2,56(r3)
 401e688:	10800044 	addi	r2,r2,1
 401e68c:	18800e15 	stw	r2,56(r3)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401e690:	01000084 	movi	r4,2
 401e694:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(pkt);           /* return to free buffer */
 401e698:	e13ffe17 	ldw	r4,-8(fp)
 401e69c:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401e6a0:	01000084 	movi	r4,2
 401e6a4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   int      pkts;
   char *   eth;

   pkts = 0;   /* packets per loop */

   while (rcvdq.q_len)
 401e6a8:	008101b4 	movhi	r2,1030
 401e6ac:	10a14304 	addi	r2,r2,-31476
 401e6b0:	10800217 	ldw	r2,8(r2)
 401e6b4:	1004c03a 	cmpne	r2,r2,zero
 401e6b8:	103f161e 	bne	r2,zero,401e314 <pktdemux+0x18>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
         break;
      }
      continue;
   }
}
 401e6bc:	e037883a 	mov	sp,fp
 401e6c0:	dfc00117 	ldw	ra,4(sp)
 401e6c4:	df000017 	ldw	fp,0(sp)
 401e6c8:	dec00204 	addi	sp,sp,8
 401e6cc:	f800283a 	ret

0401e6d0 <c_older>:
 * RETURNS: the older of the two passed tick counts
 */

u_long
c_older(u_long ct1, u_long ct2)
{
 401e6d0:	defffc04 	addi	sp,sp,-16
 401e6d4:	df000315 	stw	fp,12(sp)
 401e6d8:	df000304 	addi	fp,sp,12
 401e6dc:	e13ffd15 	stw	r4,-12(fp)
 401e6e0:	e17ffe15 	stw	r5,-8(fp)

   if (!(cticks & 0x80000000) || /* cticks has not wrapped recently, or */
 401e6e4:	00810174 	movhi	r2,1029
 401e6e8:	1081e404 	addi	r2,r2,1936
 401e6ec:	10800017 	ldw	r2,0(r2)
 401e6f0:	1004403a 	cmpge	r2,r2,zero
 401e6f4:	1000141e 	bne	r2,zero,401e748 <c_older+0x78>
 401e6f8:	00810174 	movhi	r2,1029
 401e6fc:	1081e404 	addi	r2,r2,1936
 401e700:	10c00017 	ldw	r3,0(r2)
 401e704:	e0bffd17 	ldw	r2,-12(fp)
 401e708:	18800536 	bltu	r3,r2,401e720 <c_older+0x50>
 401e70c:	00810174 	movhi	r2,1029
 401e710:	1081e404 	addi	r2,r2,1936
 401e714:	10c00017 	ldw	r3,0(r2)
 401e718:	e0bffe17 	ldw	r2,-8(fp)
 401e71c:	18800a2e 	bgeu	r3,r2,401e748 <c_older+0x78>
 401e720:	00810174 	movhi	r2,1029
 401e724:	1081e404 	addi	r2,r2,1936
 401e728:	10c00017 	ldw	r3,0(r2)
 401e72c:	e0bffd17 	ldw	r2,-12(fp)
 401e730:	10c00e36 	bltu	r2,r3,401e76c <c_older+0x9c>
 401e734:	00810174 	movhi	r2,1029
 401e738:	1081e404 	addi	r2,r2,1936
 401e73c:	10c00017 	ldw	r3,0(r2)
 401e740:	e0bffe17 	ldw	r2,-8(fp)
 401e744:	10c00936 	bltu	r2,r3,401e76c <c_older+0x9c>
       (ct1 <= cticks && ct2 <= cticks) || /* both are below cticks or */
       (ct1 >= cticks && ct2 >= cticks))   /* both are above cticks */
   {
      if (ct1 < ct2)
 401e748:	e0fffd17 	ldw	r3,-12(fp)
 401e74c:	e0bffe17 	ldw	r2,-8(fp)
 401e750:	1880032e 	bgeu	r3,r2,401e760 <c_older+0x90>
         return(ct1);      /* then smaller is oldest */
 401e754:	e0bffd17 	ldw	r2,-12(fp)
 401e758:	e0bfff15 	stw	r2,-4(fp)
 401e75c:	00000b06 	br	401e78c <c_older+0xbc>
      else 
         return(ct2);
 401e760:	e0bffe17 	ldw	r2,-8(fp)
 401e764:	e0bfff15 	stw	r2,-4(fp)
 401e768:	00000806 	br	401e78c <c_older+0xbc>
   }

   /* else one is less than cticks, and one is greater.
   the larger value is then the oldest */
   if (ct1 >= ct2)
 401e76c:	e0fffd17 	ldw	r3,-12(fp)
 401e770:	e0bffe17 	ldw	r2,-8(fp)
 401e774:	18800336 	bltu	r3,r2,401e784 <c_older+0xb4>
      return(ct1);
 401e778:	e0bffd17 	ldw	r2,-12(fp)
 401e77c:	e0bfff15 	stw	r2,-4(fp)
 401e780:	00000206 	br	401e78c <c_older+0xbc>
   else
      return(ct2);
 401e784:	e0bffe17 	ldw	r2,-8(fp)
 401e788:	e0bfff15 	stw	r2,-4(fp)
 401e78c:	e0bfff17 	ldw	r2,-4(fp)
}
 401e790:	e037883a 	mov	sp,fp
 401e794:	df000017 	ldw	fp,0(sp)
 401e798:	dec00104 	addi	sp,sp,4
 401e79c:	f800283a 	ret

0401e7a0 <ip2mac>:
 */

int
ip2mac(PACKET pkt,         /* the packet itself, all set but for dest MAC address */
   ip_addr  dest_ip)    /* the IP host or gateway to get MAC addr for */
{
 401e7a0:	defffa04 	addi	sp,sp,-24
 401e7a4:	dfc00515 	stw	ra,20(sp)
 401e7a8:	df000415 	stw	fp,16(sp)
 401e7ac:	df000404 	addi	fp,sp,16
 401e7b0:	e13ffd15 	stw	r4,-12(fp)
 401e7b4:	e17ffe15 	stw	r5,-8(fp)
   IFMIB ifmib = pkt->net->n_mib;   /* mib info for this interface */
 401e7b8:	e0bffd17 	ldw	r2,-12(fp)
 401e7bc:	10800617 	ldw	r2,24(r2)
 401e7c0:	10802717 	ldw	r2,156(r2)
 401e7c4:	e0bffc15 	stw	r2,-16(fp)

   /* Always punt if iface ifAdminStatus is DOWN. ifOperStatus may 
    * be down too, but our packet may be the event required to bring 
    * it up - so don't worry about ifOperStatus here.
    */
   if(ifmib->ifAdminStatus == NI_DOWN)
 401e7c8:	e0bffc17 	ldw	r2,-16(fp)
 401e7cc:	10800617 	ldw	r2,24(r2)
 401e7d0:	10800098 	cmpnei	r2,r2,2
 401e7d4:	1000091e 	bne	r2,zero,401e7fc <ip2mac+0x5c>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 401e7d8:	01000084 	movi	r4,2
 401e7dc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 401e7e0:	e13ffd17 	ldw	r4,-12(fp)
 401e7e4:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401e7e8:	01000084 	movi	r4,2
 401e7ec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return(ENP_NO_ROUTE);
 401e7f0:	00bff7c4 	movi	r2,-33
 401e7f4:	e0bfff15 	stw	r2,-4(fp)
 401e7f8:	00004c06 	br	401e92c <ip2mac+0x18c>
         return ENP_NOBUFFER;
   }
#endif   /* LINKED_PKTS */

   /* some interfaces (ie SLIP) just get the raw IP frame - no ARP needed */
   if ((pkt->net->n_lnh == 0) ||    /* no MAC header */
 401e7fc:	e0bffd17 	ldw	r2,-12(fp)
 401e800:	10800617 	ldw	r2,24(r2)
 401e804:	10800817 	ldw	r2,32(r2)
 401e808:	1005003a 	cmpeq	r2,r2,zero
 401e80c:	1000081e 	bne	r2,zero,401e830 <ip2mac+0x90>
 401e810:	e0bffc17 	ldw	r2,-16(fp)
 401e814:	10800217 	ldw	r2,8(r2)
 401e818:	108005e0 	cmpeqi	r2,r2,23
 401e81c:	1000041e 	bne	r2,zero,401e830 <ip2mac+0x90>
 401e820:	e0bffc17 	ldw	r2,-16(fp)
 401e824:	10800217 	ldw	r2,8(r2)
 401e828:	10800718 	cmpnei	r2,r2,28
 401e82c:	1000291e 	bne	r2,zero,401e8d4 <ip2mac+0x134>
       (ifmib->ifType == PPP) ||     /* or PPP or SLIP... */
       (ifmib->ifType == SLIP))
   {
      ifmib->ifOutUcastPkts++;   /* maintain MIB counters */
 401e830:	e0bffc17 	ldw	r2,-16(fp)
 401e834:	10801017 	ldw	r2,64(r2)
 401e838:	10c00044 	addi	r3,r2,1
 401e83c:	e0bffc17 	ldw	r2,-16(fp)
 401e840:	10c01015 	stw	r3,64(r2)
      ifmib->ifOutOctets += pkt->nb_plen;
 401e844:	e0bffc17 	ldw	r2,-16(fp)
 401e848:	10c00f17 	ldw	r3,60(r2)
 401e84c:	e0bffd17 	ldw	r2,-12(fp)
 401e850:	10800417 	ldw	r2,16(r2)
 401e854:	1887883a 	add	r3,r3,r2
 401e858:	e0bffc17 	ldw	r2,-16(fp)
 401e85c:	10c00f15 	stw	r3,60(r2)

      /* send packet on media */
      if (pkt->net->pkt_send) /* favor using packet send */
 401e860:	e0bffd17 	ldw	r2,-12(fp)
 401e864:	10800617 	ldw	r2,24(r2)
 401e868:	10800417 	ldw	r2,16(r2)
 401e86c:	1005003a 	cmpeq	r2,r2,zero
 401e870:	1000061e 	bne	r2,zero,401e88c <ip2mac+0xec>
         pkt->net->pkt_send(pkt);   /* pkt will be freed by MAC code */
 401e874:	e0bffd17 	ldw	r2,-12(fp)
 401e878:	10800617 	ldw	r2,24(r2)
 401e87c:	10800417 	ldw	r2,16(r2)
 401e880:	e13ffd17 	ldw	r4,-12(fp)
 401e884:	103ee83a 	callr	r2
 401e888:	00001006 	br	401e8cc <ip2mac+0x12c>
      else  /* no packet send; try raw send */
      {
         pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 401e88c:	e0bffd17 	ldw	r2,-12(fp)
 401e890:	10800617 	ldw	r2,24(r2)
 401e894:	10c00317 	ldw	r3,12(r2)
 401e898:	e0bffd17 	ldw	r2,-12(fp)
 401e89c:	11000617 	ldw	r4,24(r2)
 401e8a0:	e0bffd17 	ldw	r2,-12(fp)
 401e8a4:	11400317 	ldw	r5,12(r2)
 401e8a8:	e0bffd17 	ldw	r2,-12(fp)
 401e8ac:	11800417 	ldw	r6,16(r2)
 401e8b0:	183ee83a 	callr	r3
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401e8b4:	01000084 	movi	r4,2
 401e8b8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 401e8bc:	e13ffd17 	ldw	r4,-12(fp)
 401e8c0:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401e8c4:	01000084 	movi	r4,2
 401e8c8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      }
      return(SUCCESS);
 401e8cc:	e03fff15 	stw	zero,-4(fp)
 401e8d0:	00001606 	br	401e92c <ip2mac+0x18c>
   }

   /* don't allow unicast sends if NIC iface has no IP address. This
    * is to prevent DHCP clients from sending prior to assignment.
    */
   if (pkt->net->n_ipaddr == 0L)
 401e8d4:	e0bffd17 	ldw	r2,-12(fp)
 401e8d8:	10800617 	ldw	r2,24(r2)
 401e8dc:	10800a17 	ldw	r2,40(r2)
 401e8e0:	1004c03a 	cmpne	r2,r2,zero
 401e8e4:	10000d1e 	bne	r2,zero,401e91c <ip2mac+0x17c>
   {
      if (pkt->fhost != 0xFFFFFFFF) /* check for broadcast packet */
 401e8e8:	e0bffd17 	ldw	r2,-12(fp)
 401e8ec:	10800717 	ldw	r2,28(r2)
 401e8f0:	10bfffe0 	cmpeqi	r2,r2,-1
 401e8f4:	1000091e 	bne	r2,zero,401e91c <ip2mac+0x17c>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 401e8f8:	01000084 	movi	r4,2
 401e8fc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 401e900:	e13ffd17 	ldw	r4,-12(fp)
 401e904:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401e908:	01000084 	movi	r4,2
 401e90c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return ENP_SENDERR;
 401e910:	00bff884 	movi	r2,-30
 401e914:	e0bfff15 	stw	r2,-4(fp)
 401e918:	00000406 	br	401e92c <ip2mac+0x18c>
      }
   }

#ifdef INCLUDE_ARP   /* must be ethernet or token ring */
   return(send_via_arp(pkt, dest_ip));
 401e91c:	e13ffd17 	ldw	r4,-12(fp)
 401e920:	e17ffe17 	ldw	r5,-8(fp)
 401e924:	40380e80 	call	40380e8 <send_via_arp>
 401e928:	e0bfff15 	stw	r2,-4(fp)
 401e92c:	e0bfff17 	ldw	r2,-4(fp)
#else
   dtrap();    /* Bad option combination? */
   return ENP_NO_IFACE; /* sent to unknown interface type */
#endif   /* INCLUDE_ARP */
}
 401e930:	e037883a 	mov	sp,fp
 401e934:	dfc00117 	ldw	ra,4(sp)
 401e938:	df000017 	ldw	fp,0(sp)
 401e93c:	dec00204 	addi	sp,sp,8
 401e940:	f800283a 	ret

0401e944 <ip_startup>:
 * RETURNS: returns NULL if OK, or text of an error message 
 */

char *   
ip_startup()
{
 401e944:	defffb04 	addi	sp,sp,-20
 401e948:	dfc00415 	stw	ra,16(sp)
 401e94c:	df000315 	stw	fp,12(sp)
 401e950:	df000304 	addi	fp,sp,12
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
 401e954:	e03ffd15 	stw	zero,-12(fp)
 401e958:	00002a06 	br	401ea04 <ip_startup+0xc0>
   {
      nets[i] = &netstatic[i];   /* set up array of pointers */
 401e95c:	e13ffd17 	ldw	r4,-12(fp)
 401e960:	e0bffd17 	ldw	r2,-12(fp)
 401e964:	10803024 	muli	r2,r2,192
 401e968:	1007883a 	mov	r3,r2
 401e96c:	008101b4 	movhi	r2,1030
 401e970:	10a14804 	addi	r2,r2,-31456
 401e974:	188b883a 	add	r5,r3,r2
 401e978:	00c101b4 	movhi	r3,1030
 401e97c:	18e20804 	addi	r3,r3,-30688
 401e980:	2105883a 	add	r2,r4,r4
 401e984:	1085883a 	add	r2,r2,r2
 401e988:	10c5883a 	add	r2,r2,r3
 401e98c:	11400015 	stw	r5,0(r2)
      nets[i]->n_mib = &nets[i]->mib;   /* set mib pointer */
 401e990:	e0bffd17 	ldw	r2,-12(fp)
 401e994:	00c101b4 	movhi	r3,1030
 401e998:	18e20804 	addi	r3,r3,-30688
 401e99c:	1085883a 	add	r2,r2,r2
 401e9a0:	1085883a 	add	r2,r2,r2
 401e9a4:	10c5883a 	add	r2,r2,r3
 401e9a8:	11000017 	ldw	r4,0(r2)
 401e9ac:	e0bffd17 	ldw	r2,-12(fp)
 401e9b0:	00c101b4 	movhi	r3,1030
 401e9b4:	18e20804 	addi	r3,r3,-30688
 401e9b8:	1085883a 	add	r2,r2,r2
 401e9bc:	1085883a 	add	r2,r2,r2
 401e9c0:	10c5883a 	add	r2,r2,r3
 401e9c4:	10800017 	ldw	r2,0(r2)
 401e9c8:	10801204 	addi	r2,r2,72
 401e9cc:	20802715 	stw	r2,156(r4)

      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
 401e9d0:	e0bffd17 	ldw	r2,-12(fp)
 401e9d4:	00c101b4 	movhi	r3,1030
 401e9d8:	18e20804 	addi	r3,r3,-30688
 401e9dc:	1085883a 	add	r2,r2,r2
 401e9e0:	1085883a 	add	r2,r2,r2
 401e9e4:	10c5883a 	add	r2,r2,r3
 401e9e8:	11400017 	ldw	r5,0(r2)
 401e9ec:	010101b4 	movhi	r4,1030
 401e9f0:	21244904 	addi	r4,r4,-28380
 401e9f4:	40255440 	call	4025544 <putq>
{
   int   e; /* error holder */
   int   i;

   /* thread nets[] and attach mib data to nets[] arrays */
   for (i = 0; i < STATIC_NETS; i++)
 401e9f8:	e0bffd17 	ldw	r2,-12(fp)
 401e9fc:	10800044 	addi	r2,r2,1
 401ea00:	e0bffd15 	stw	r2,-12(fp)
 401ea04:	e0bffd17 	ldw	r2,-12(fp)
 401ea08:	10800110 	cmplti	r2,r2,4
 401ea0c:	103fd31e 	bne	r2,zero,401e95c <ip_startup+0x18>
      /* add static iface to end of nets list */
      putq(&netlist, nets[i]);
   }

   /* call port routine to locate and init network interfaces. */
   ifNumber = (unsigned)prep_ifaces(ifNumber);
 401ea10:	d0a80217 	ldw	r2,-24568(gp)
 401ea14:	1009883a 	mov	r4,r2
 401ea18:	403da740 	call	403da74 <prep_ifaces>
 401ea1c:	d0a80215 	stw	r2,-24568(gp)

   if (ifNumber < 1)    /* no static interfaces? */
 401ea20:	d0a80217 	ldw	r2,-24568(gp)
 401ea24:	1004c03a 	cmpne	r2,r2,zero
 401ea28:	1000041e 	bne	r2,zero,401ea3c <ip_startup+0xf8>
#ifdef DYNAMIC_IFACES
      /* print a debug message and hope user knows what he's doing */
      dprintf("unable to find any working interfaces");
#else /* static ifaces only */
      /* no static and no dynamic interfaces is probably a bug... */
      return("unable to find any working interfaces");
 401ea2c:	00810174 	movhi	r2,1029
 401ea30:	10aac304 	addi	r2,r2,-21748
 401ea34:	e0bfff15 	stw	r2,-4(fp)
 401ea38:	00007506 	br	401ec10 <ip_startup+0x2cc>
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 401ea3c:	d0a80217 	ldw	r2,-24568(gp)
 401ea40:	e0bffd15 	stw	r2,-12(fp)
 401ea44:	00001506 	br	401ea9c <ip_startup+0x158>
   {
      qdel(&netlist, (qp)nets[i]);  /* remove from queue */
 401ea48:	e0bffd17 	ldw	r2,-12(fp)
 401ea4c:	00c101b4 	movhi	r3,1030
 401ea50:	18e20804 	addi	r3,r3,-30688
 401ea54:	1085883a 	add	r2,r2,r2
 401ea58:	1085883a 	add	r2,r2,r2
 401ea5c:	10c5883a 	add	r2,r2,r3
 401ea60:	10800017 	ldw	r2,0(r2)
 401ea64:	100b883a 	mov	r5,r2
 401ea68:	010101b4 	movhi	r4,1030
 401ea6c:	21244904 	addi	r4,r4,-28380
 401ea70:	40255f40 	call	40255f4 <qdel>
      nets[i] = NULL;               /* remove from array */
 401ea74:	e0bffd17 	ldw	r2,-12(fp)
 401ea78:	00c101b4 	movhi	r3,1030
 401ea7c:	18e20804 	addi	r3,r3,-30688
 401ea80:	1085883a 	add	r2,r2,r2
 401ea84:	1085883a 	add	r2,r2,r2
 401ea88:	10c5883a 	add	r2,r2,r3
 401ea8c:	10000015 	stw	zero,0(r2)
      return("unable to find any working interfaces");
#endif   /* DYNAMIC_IFACES */
   }

   /* throw away any unused static nets */
   for (i = ifNumber; i < STATIC_NETS; i++)
 401ea90:	e0bffd17 	ldw	r2,-12(fp)
 401ea94:	10800044 	addi	r2,r2,1
 401ea98:	e0bffd15 	stw	r2,-12(fp)
 401ea9c:	e0bffd17 	ldw	r2,-12(fp)
 401eaa0:	10800110 	cmplti	r2,r2,4
 401eaa4:	103fe81e 	bne	r2,zero,401ea48 <ip_startup+0x104>
   /* The sequence of events when initing the net & interface systems 
    * is very important. Be very carefull about altering the order of 
    * the following statements. 
    */
   /* once these are done, we should call ip_exit before quiting IP */
   clock_init();           /* start clock system */
 401eaa8:	4025cf00 	call	4025cf0 <clock_init>
   exit_hook(clock_c);
 401eaac:	010100b4 	movhi	r4,1026
 401eab0:	21174b04 	addi	r4,r4,23852
 401eab4:	401ec280 	call	401ec28 <exit_hook>

   e = Netinit();    /* start net interface(s) */
 401eab8:	401da680 	call	401da68 <Netinit>
 401eabc:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 401eac0:	e0bffe17 	ldw	r2,-8(fp)
 401eac4:	1005003a 	cmpeq	r2,r2,zero
 401eac8:	1000041e 	bne	r2,zero,401eadc <ip_startup+0x198>
   {
      return("unable to initialize net");
 401eacc:	00810174 	movhi	r2,1029
 401ead0:	10aacd04 	addi	r2,r2,-21708
 401ead4:	e0bfff15 	stw	r2,-4(fp)
 401ead8:	00004d06 	br	401ec10 <ip_startup+0x2cc>
   }

#ifdef INCLUDE_ARP
   e = etainit();          /* startup ARP layer */
 401eadc:	40371d40 	call	40371d4 <etainit>
 401eae0:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 401eae4:	e0bffe17 	ldw	r2,-8(fp)
 401eae8:	1005003a 	cmpeq	r2,r2,zero
 401eaec:	1000051e 	bne	r2,zero,401eb04 <ip_startup+0x1c0>
   {
      ip_exit();
 401eaf0:	401ec940 	call	401ec94 <ip_exit>
      return("unable to initialize arp");
 401eaf4:	00810174 	movhi	r2,1029
 401eaf8:	10aad404 	addi	r2,r2,-21680
 401eafc:	e0bfff15 	stw	r2,-4(fp)
 401eb00:	00004306 	br	401ec10 <ip_startup+0x2cc>
   }
#endif

#ifdef IP_V4
   e = ip_init();       /* start up IP layer */
 401eb04:	403890c0 	call	403890c <ip_init>
 401eb08:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 401eb0c:	e0bffe17 	ldw	r2,-8(fp)
 401eb10:	1005003a 	cmpeq	r2,r2,zero
 401eb14:	1000051e 	bne	r2,zero,401eb2c <ip_startup+0x1e8>
   {
      ip_exit();
 401eb18:	401ec940 	call	401ec94 <ip_exit>
      return("unable to initialize IP");
 401eb1c:	00810174 	movhi	r2,1029
 401eb20:	10aadb04 	addi	r2,r2,-21652
 401eb24:	e0bfff15 	stw	r2,-4(fp)
 401eb28:	00003906 	br	401ec10 <ip_startup+0x2cc>

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Join the All hosts group on every interface that IP multicast is
    * supported
    */
   e = igmp_init();         /* Initialize igmp */
 401eb2c:	401edf40 	call	401edf4 <igmp_init>
 401eb30:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 401eb34:	e0bffe17 	ldw	r2,-8(fp)
 401eb38:	1005003a 	cmpeq	r2,r2,zero
 401eb3c:	1000041e 	bne	r2,zero,401eb50 <ip_startup+0x20c>
   {
      ip_exit();
 401eb40:	401ec940 	call	401ec94 <ip_exit>
      return(ipmcfail_str);
 401eb44:	d0a02d17 	ldw	r2,-32588(gp)
 401eb48:	e0bfff15 	stw	r2,-4(fp)
 401eb4c:	00003006 	br	401ec10 <ip_startup+0x2cc>
   }

   for (i = 0; i < (int)ifNumber; i++)
 401eb50:	e03ffd15 	stw	zero,-12(fp)
 401eb54:	00001e06 	br	401ebd0 <ip_startup+0x28c>
   {
      if (nets[i]->n_mcastlist != NULL)
 401eb58:	e0bffd17 	ldw	r2,-12(fp)
 401eb5c:	00c101b4 	movhi	r3,1030
 401eb60:	18e20804 	addi	r3,r3,-30688
 401eb64:	1085883a 	add	r2,r2,r2
 401eb68:	1085883a 	add	r2,r2,r2
 401eb6c:	10c5883a 	add	r2,r2,r3
 401eb70:	10800017 	ldw	r2,0(r2)
 401eb74:	10802b17 	ldw	r2,172(r2)
 401eb78:	1005003a 	cmpeq	r2,r2,zero
 401eb7c:	1000111e 	bne	r2,zero,401ebc4 <ip_startup+0x280>
         if ((in_addmulti(&igmp_all_hosts_group, nets[i], 4) == NULL))
 401eb80:	e0bffd17 	ldw	r2,-12(fp)
 401eb84:	00c101b4 	movhi	r3,1030
 401eb88:	18e20804 	addi	r3,r3,-30688
 401eb8c:	1085883a 	add	r2,r2,r2
 401eb90:	1085883a 	add	r2,r2,r2
 401eb94:	10c5883a 	add	r2,r2,r3
 401eb98:	11400017 	ldw	r5,0(r2)
 401eb9c:	01010174 	movhi	r4,1029
 401eba0:	2101c404 	addi	r4,r4,1808
 401eba4:	01800104 	movi	r6,4
 401eba8:	403d7840 	call	403d784 <in_addmulti>
 401ebac:	1004c03a 	cmpne	r2,r2,zero
 401ebb0:	1000041e 	bne	r2,zero,401ebc4 <ip_startup+0x280>
      {
         ip_exit();
 401ebb4:	401ec940 	call	401ec94 <ip_exit>
         return(ipmcfail_str);
 401ebb8:	d0a02d17 	ldw	r2,-32588(gp)
 401ebbc:	e0bfff15 	stw	r2,-4(fp)
 401ebc0:	00001306 	br	401ec10 <ip_startup+0x2cc>
   {
      ip_exit();
      return(ipmcfail_str);
   }

   for (i = 0; i < (int)ifNumber; i++)
 401ebc4:	e0bffd17 	ldw	r2,-12(fp)
 401ebc8:	10800044 	addi	r2,r2,1
 401ebcc:	e0bffd15 	stw	r2,-12(fp)
 401ebd0:	d0a80217 	ldw	r2,-24568(gp)
 401ebd4:	1007883a 	mov	r3,r2
 401ebd8:	e0bffd17 	ldw	r2,-12(fp)
 401ebdc:	10ffde16 	blt	r2,r3,401eb58 <ip_startup+0x214>
      }
   }
#endif /* IP_MULTICAST and (IGMPv1 or IGMPv2) */   

#ifdef INCLUDE_TCP
   e = tcpinit();
 401ebe0:	403423c0 	call	403423c <tcpinit>
 401ebe4:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 401ebe8:	e0bffe17 	ldw	r2,-8(fp)
 401ebec:	1005003a 	cmpeq	r2,r2,zero
 401ebf0:	1000051e 	bne	r2,zero,401ec08 <ip_startup+0x2c4>
   {
      ip_exit();
 401ebf4:	401ec940 	call	401ec94 <ip_exit>
      return("unable to initialize TCP");
 401ebf8:	00810174 	movhi	r2,1029
 401ebfc:	10aae104 	addi	r2,r2,-21628
 401ec00:	e0bfff15 	stw	r2,-4(fp)
 401ec04:	00000206 	br	401ec10 <ip_startup+0x2cc>
   /* setup event map for (UDP and TCP) socket library's events (such as 
    * those used by tcp_sleep () and tcp_wakeup ()).  These events either 
    * map into operating system primitives such as events or semaphores, 
    * or into task suspend and task resume mechanisms.
    */
   evtmap_setup ();
 401ec08:	403db300 	call	403db30 <evtmap_setup>
      return("unable to initialize IP Filter table");
   else
      exit_hook(ipf_cleanup);
#endif

   return(NULL);     /* we got through with no errors */
 401ec0c:	e03fff15 	stw	zero,-4(fp)
 401ec10:	e0bfff17 	ldw	r2,-4(fp)
}
 401ec14:	e037883a 	mov	sp,fp
 401ec18:	dfc00117 	ldw	ra,4(sp)
 401ec1c:	df000017 	ldw	fp,0(sp)
 401ec20:	dec00204 	addi	sp,sp,8
 401ec24:	f800283a 	ret

0401ec28 <exit_hook>:
 * RETURNS: 
 */

void
exit_hook(void (*func)(void))
{
 401ec28:	defffd04 	addi	sp,sp,-12
 401ec2c:	dfc00215 	stw	ra,8(sp)
 401ec30:	df000115 	stw	fp,4(sp)
 401ec34:	df000104 	addi	fp,sp,4
 401ec38:	e13fff15 	stw	r4,-4(fp)
   if (nclosers >= (NUMCLOSERS-1))
 401ec3c:	d0a80317 	ldw	r2,-24564(gp)
 401ec40:	10800390 	cmplti	r2,r2,14
 401ec44:	1000031e 	bne	r2,zero,401ec54 <exit_hook+0x2c>
      panic("exit_hook");
 401ec48:	01010174 	movhi	r4,1029
 401ec4c:	212ae804 	addi	r4,r4,-21600
 401ec50:	4020e100 	call	4020e10 <panic>

   closers[++nclosers] = func;
 401ec54:	d0a80317 	ldw	r2,-24564(gp)
 401ec58:	10800044 	addi	r2,r2,1
 401ec5c:	d0a80315 	stw	r2,-24564(gp)
 401ec60:	d0a80317 	ldw	r2,-24564(gp)
 401ec64:	00c10174 	movhi	r3,1029
 401ec68:	18c3e704 	addi	r3,r3,3996
 401ec6c:	1085883a 	add	r2,r2,r2
 401ec70:	1085883a 	add	r2,r2,r2
 401ec74:	10c7883a 	add	r3,r2,r3
 401ec78:	e0bfff17 	ldw	r2,-4(fp)
 401ec7c:	18800015 	stw	r2,0(r3)
}
 401ec80:	e037883a 	mov	sp,fp
 401ec84:	dfc00117 	ldw	ra,4(sp)
 401ec88:	df000017 	ldw	fp,0(sp)
 401ec8c:	dec00204 	addi	sp,sp,8
 401ec90:	f800283a 	ret

0401ec94 <ip_exit>:
 * RETURNS: void
 */

void
ip_exit()
{
 401ec94:	defffd04 	addi	sp,sp,-12
 401ec98:	dfc00215 	stw	ra,8(sp)
 401ec9c:	df000115 	stw	fp,4(sp)
 401eca0:	df000104 	addi	fp,sp,4
   int   n;

   for (n=nclosers; n; n--)
 401eca4:	d0a80317 	ldw	r2,-24564(gp)
 401eca8:	e0bfff15 	stw	r2,-4(fp)
 401ecac:	00002506 	br	401ed44 <ip_exit+0xb0>
   {
#ifdef NPDEBUG
      dprintf("ip_exit: calling func %p\n", closers[n]);
 401ecb0:	e0bfff17 	ldw	r2,-4(fp)
 401ecb4:	00c10174 	movhi	r3,1029
 401ecb8:	18c3e704 	addi	r3,r3,3996
 401ecbc:	1085883a 	add	r2,r2,r2
 401ecc0:	1085883a 	add	r2,r2,r2
 401ecc4:	10c5883a 	add	r2,r2,r3
 401ecc8:	11400017 	ldw	r5,0(r2)
 401eccc:	01010174 	movhi	r4,1029
 401ecd0:	212aeb04 	addi	r4,r4,-21588
 401ecd4:	400207c0 	call	400207c <printf>
#endif
      if(closers[n])
 401ecd8:	e0bfff17 	ldw	r2,-4(fp)
 401ecdc:	00c10174 	movhi	r3,1029
 401ece0:	18c3e704 	addi	r3,r3,3996
 401ece4:	1085883a 	add	r2,r2,r2
 401ece8:	1085883a 	add	r2,r2,r2
 401ecec:	10c5883a 	add	r2,r2,r3
 401ecf0:	10800017 	ldw	r2,0(r2)
 401ecf4:	1005003a 	cmpeq	r2,r2,zero
 401ecf8:	10000f1e 	bne	r2,zero,401ed38 <ip_exit+0xa4>
      {
         (*closers[n])();
 401ecfc:	e0bfff17 	ldw	r2,-4(fp)
 401ed00:	00c10174 	movhi	r3,1029
 401ed04:	18c3e704 	addi	r3,r3,3996
 401ed08:	1085883a 	add	r2,r2,r2
 401ed0c:	1085883a 	add	r2,r2,r2
 401ed10:	10c5883a 	add	r2,r2,r3
 401ed14:	10800017 	ldw	r2,0(r2)
 401ed18:	103ee83a 	callr	r2
         closers[n] = NULL;
 401ed1c:	e0bfff17 	ldw	r2,-4(fp)
 401ed20:	00c10174 	movhi	r3,1029
 401ed24:	18c3e704 	addi	r3,r3,3996
 401ed28:	1085883a 	add	r2,r2,r2
 401ed2c:	1085883a 	add	r2,r2,r2
 401ed30:	10c5883a 	add	r2,r2,r3
 401ed34:	10000015 	stw	zero,0(r2)
void
ip_exit()
{
   int   n;

   for (n=nclosers; n; n--)
 401ed38:	e0bfff17 	ldw	r2,-4(fp)
 401ed3c:	10bfffc4 	addi	r2,r2,-1
 401ed40:	e0bfff15 	stw	r2,-4(fp)
 401ed44:	e0bfff17 	ldw	r2,-4(fp)
 401ed48:	1004c03a 	cmpne	r2,r2,zero
 401ed4c:	103fd81e 	bne	r2,zero,401ecb0 <ip_exit+0x1c>
      {
         (*closers[n])();
         closers[n] = NULL;
      }
   }
}
 401ed50:	e037883a 	mov	sp,fp
 401ed54:	dfc00117 	ldw	ra,4(sp)
 401ed58:	df000017 	ldw	fp,0(sp)
 401ed5c:	dec00204 	addi	sp,sp,8
 401ed60:	f800283a 	ret

0401ed64 <if_netnumber>:
 * RETURNS: net index for passed net pointer
 */

int
if_netnumber(NET nptr)
{
 401ed64:	defffa04 	addi	sp,sp,-24
 401ed68:	dfc00515 	stw	ra,20(sp)
 401ed6c:	df000415 	stw	fp,16(sp)
 401ed70:	df000404 	addi	fp,sp,16
 401ed74:	e13ffe15 	stw	r4,-8(fp)
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 401ed78:	008101b4 	movhi	r2,1030
 401ed7c:	10a44904 	addi	r2,r2,-28380
 401ed80:	10800017 	ldw	r2,0(r2)
 401ed84:	e0bffc15 	stw	r2,-16(fp)
 401ed88:	e03ffd15 	stw	zero,-12(fp)
 401ed8c:	00000c06 	br	401edc0 <if_netnumber+0x5c>
   {
      if(ifp == nptr)
 401ed90:	e0fffc17 	ldw	r3,-16(fp)
 401ed94:	e0bffe17 	ldw	r2,-8(fp)
 401ed98:	1880031e 	bne	r3,r2,401eda8 <if_netnumber+0x44>
        return (int)i;
 401ed9c:	e0bffd17 	ldw	r2,-12(fp)
 401eda0:	e0bfff15 	stw	r2,-4(fp)
 401eda4:	00000d06 	br	401eddc <if_netnumber+0x78>
if_netnumber(NET nptr)
{
   unsigned i;
   NET ifp;

   for(ifp = (NET)(netlist.q_head), i = 0; ifp; ifp = ifp->n_next, i++)
 401eda8:	e0bffc17 	ldw	r2,-16(fp)
 401edac:	10800017 	ldw	r2,0(r2)
 401edb0:	e0bffc15 	stw	r2,-16(fp)
 401edb4:	e0bffd17 	ldw	r2,-12(fp)
 401edb8:	10800044 	addi	r2,r2,1
 401edbc:	e0bffd15 	stw	r2,-12(fp)
 401edc0:	e0bffc17 	ldw	r2,-16(fp)
 401edc4:	1004c03a 	cmpne	r2,r2,zero
 401edc8:	103ff11e 	bne	r2,zero,401ed90 <if_netnumber+0x2c>
   {
      if(ifp == nptr)
        return (int)i;
   }

   panic("bad net ptr");
 401edcc:	01010174 	movhi	r4,1029
 401edd0:	212af204 	addi	r4,r4,-21560
 401edd4:	4020e100 	call	4020e10 <panic>
   return 0;
 401edd8:	e03fff15 	stw	zero,-4(fp)
 401eddc:	e0bfff17 	ldw	r2,-4(fp)
}
 401ede0:	e037883a 	mov	sp,fp
 401ede4:	dfc00117 	ldw	ra,4(sp)
 401ede8:	df000017 	ldw	fp,0(sp)
 401edec:	dec00204 	addi	sp,sp,8
 401edf0:	f800283a 	ret

0401edf4 <igmp_init>:
 *
 * OUTPUT: None.
 */

int igmp_init(void)
{
 401edf4:	defffe04 	addi	sp,sp,-8
 401edf8:	df000115 	stw	fp,4(sp)
 401edfc:	df000104 	addi	fp,sp,4
   NET ifp;

   /*
    * To avoid byte-swapping the same value over and over again.
    */
   igmp_all_hosts_group = htonl(INADDR_ALLHOSTS_GROUP);
 401ee00:	00804034 	movhi	r2,256
 401ee04:	10803804 	addi	r2,r2,224
 401ee08:	d0a80615 	stw	r2,-24552(gp)
   igmp_all_rtrs_group = htonl(INADDR_ALLRTRS_GROUP);
 401ee0c:	00808034 	movhi	r2,512
 401ee10:	10803804 	addi	r2,r2,224
 401ee14:	d0a80715 	stw	r2,-24548(gp)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 401ee18:	008101b4 	movhi	r2,1030
 401ee1c:	10a44904 	addi	r2,r2,-28380
 401ee20:	10800017 	ldw	r2,0(r2)
 401ee24:	e0bfff15 	stw	r2,-4(fp)
 401ee28:	00001006 	br	401ee6c <igmp_init+0x78>
   {
      if (ifp->igmp_oper_mode == IGMP_MODE_V1)
 401ee2c:	e0bfff17 	ldw	r2,-4(fp)
 401ee30:	10802f03 	ldbu	r2,188(r2)
 401ee34:	10803fcc 	andi	r2,r2,255
 401ee38:	10800058 	cmpnei	r2,r2,1
 401ee3c:	1000041e 	bne	r2,zero,401ee50 <igmp_init+0x5c>
      {
         ifp->igmpv1_rtr_present = 1;
 401ee40:	e0ffff17 	ldw	r3,-4(fp)
 401ee44:	00800044 	movi	r2,1
 401ee48:	18802d05 	stb	r2,180(r3)
 401ee4c:	00000406 	br	401ee60 <igmp_init+0x6c>
      }
      else
      {
         ifp->igmpv1_rtr_present = 0;
 401ee50:	e0bfff17 	ldw	r2,-4(fp)
 401ee54:	10002d05 	stb	zero,180(r2)
         /* not really required, only referred to if IGMPv1 router is 
          * "present" */
         ifp->igmpv1_query_rcvd_time = 0;
 401ee58:	e0bfff17 	ldw	r2,-4(fp)
 401ee5c:	10002e15 	stw	zero,184(r2)
   /* note that the IGMP operational mode configuration for a
    * given link (i.e., whether it should run IGMPv1 or IGMPv2)
    * has already been validated, so no additional checks are 
    * required here. 
    */
   for (ifp = (NET) netlist.q_head; ifp; ifp = ifp->n_next)
 401ee60:	e0bfff17 	ldw	r2,-4(fp)
 401ee64:	10800017 	ldw	r2,0(r2)
 401ee68:	e0bfff15 	stw	r2,-4(fp)
 401ee6c:	e0bfff17 	ldw	r2,-4(fp)
 401ee70:	1004c03a 	cmpne	r2,r2,zero
 401ee74:	103fed1e 	bne	r2,zero,401ee2c <igmp_init+0x38>
   }

   /*
    * Call igmp_fasttimo PR_FASTHZ (5) times per second
    */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 401ee78:	00810174 	movhi	r2,1029
 401ee7c:	1081e404 	addi	r2,r2,1936
 401ee80:	10800017 	ldw	r2,0(r2)
 401ee84:	10800504 	addi	r2,r2,20
 401ee88:	d0a80515 	stw	r2,-24556(gp)

   /* there are no timers running initially */
   igmp_timers_are_running = 0;
 401ee8c:	d0280415 	stw	zero,-24560(gp)

   return IGMP_OK;
 401ee90:	0005883a 	mov	r2,zero
}
 401ee94:	e037883a 	mov	sp,fp
 401ee98:	df000017 	ldw	fp,0(sp)
 401ee9c:	dec00104 	addi	sp,sp,4
 401eea0:	f800283a 	ret

0401eea4 <igmp_input>:
 * returned if the operating mode is not correctly configured
 * to a valid IGMP operating mode.
 */

int igmp_input (PACKET p)
{
 401eea4:	defff904 	addi	sp,sp,-28
 401eea8:	dfc00615 	stw	ra,24(sp)
 401eeac:	df000515 	stw	fp,20(sp)
 401eeb0:	df000504 	addi	fp,sp,20
 401eeb4:	e13ffd15 	stw	r4,-12(fp)
   u_char mode;
   int rc;
     
   ++igmpstats.igmp_total_rcvd;
 401eeb8:	008101b4 	movhi	r2,1030
 401eebc:	10a20c04 	addi	r2,r2,-30672
 401eec0:	10800017 	ldw	r2,0(r2)
 401eec4:	10c00044 	addi	r3,r2,1
 401eec8:	008101b4 	movhi	r2,1030
 401eecc:	10a20c04 	addi	r2,r2,-30672
 401eed0:	10c00015 	stw	r3,0(r2)
   
   /* validate the received packet; if validation fails,
    * drop the packet and return */
   if ((rc = igmp_validate (p)) != IGMP_OK) goto end;
 401eed4:	e13ffd17 	ldw	r4,-12(fp)
 401eed8:	401f6d40 	call	401f6d4 <igmp_validate>
 401eedc:	e0bffb15 	stw	r2,-20(fp)
 401eee0:	e0bffb17 	ldw	r2,-20(fp)
 401eee4:	1004c03a 	cmpne	r2,r2,zero
 401eee8:	10001e1e 	bne	r2,zero,401ef64 <igmp_input+0xc0>

   /* determine the operating mode for IGMP on the ingress link */
   mode = p->net->igmp_oper_mode;
 401eeec:	e0bffd17 	ldw	r2,-12(fp)
 401eef0:	10800617 	ldw	r2,24(r2)
 401eef4:	10802f03 	ldbu	r2,188(r2)
 401eef8:	e0bffc05 	stb	r2,-16(fp)
   
   /* feed packet to IGMPv1 or IGMPv2 code based on the operating
    * mode of the ingress link */
   switch (mode)
 401eefc:	e0bffc03 	ldbu	r2,-16(fp)
 401ef00:	e0bfff15 	stw	r2,-4(fp)
 401ef04:	e0ffff17 	ldw	r3,-4(fp)
 401ef08:	18800060 	cmpeqi	r2,r3,1
 401ef0c:	1000041e 	bne	r2,zero,401ef20 <igmp_input+0x7c>
 401ef10:	e0ffff17 	ldw	r3,-4(fp)
 401ef14:	188000a0 	cmpeqi	r2,r3,2
 401ef18:	1000051e 	bne	r2,zero,401ef30 <igmp_input+0x8c>
 401ef1c:	00000806 	br	401ef40 <igmp_input+0x9c>
   {
#ifdef IGMP_V1   
      case IGMP_MODE_V1:   
         return (igmpv1_input (p)); 
 401ef20:	e13ffd17 	ldw	r4,-12(fp)
 401ef24:	403f5d40 	call	403f5d4 <igmpv1_input>
 401ef28:	e0bffe15 	stw	r2,-8(fp)
 401ef2c:	00001506 	br	401ef84 <igmp_input+0xe0>
#endif
#ifdef IGMP_V2         
      case IGMP_MODE_V2:       
         return (igmpv2_input (p));
 401ef30:	e13ffd17 	ldw	r4,-12(fp)
 401ef34:	403f8c40 	call	403f8c4 <igmpv2_input>
 401ef38:	e0bffe15 	stw	r2,-8(fp)
 401ef3c:	00001106 	br	401ef84 <igmp_input+0xe0>
#endif
      default:
         ++igmpstats.igmp_bad_oper_mode;     
 401ef40:	008101b4 	movhi	r2,1030
 401ef44:	10a20c04 	addi	r2,r2,-30672
 401ef48:	10800d17 	ldw	r2,52(r2)
 401ef4c:	10c00044 	addi	r3,r2,1
 401ef50:	008101b4 	movhi	r2,1030
 401ef54:	10a20c04 	addi	r2,r2,-30672
 401ef58:	10c00d15 	stw	r3,52(r2)
         rc = IGMP_ERR;
 401ef5c:	00bfffc4 	movi	r2,-1
 401ef60:	e0bffb15 	stw	r2,-20(fp)
         break;
   }
   
end:   
   /* return packet buffer back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 401ef64:	01000084 	movi	r4,2
 401ef68:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 401ef6c:	e13ffd17 	ldw	r4,-12(fp)
 401ef70:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 401ef74:	01000084 	movi	r4,2
 401ef78:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      
   return rc;
 401ef7c:	e0bffb17 	ldw	r2,-20(fp)
 401ef80:	e0bffe15 	stw	r2,-8(fp)
 401ef84:	e0bffe17 	ldw	r2,-8(fp)
}
 401ef88:	e037883a 	mov	sp,fp
 401ef8c:	dfc00117 	ldw	ra,4(sp)
 401ef90:	df000017 	ldw	fp,0(sp)
 401ef94:	dec00204 	addi	sp,sp,8
 401ef98:	f800283a 	ret

0401ef9c <igmp_fasttimo>:
 *
 * OUTPUT: None.
 */

void igmp_fasttimo (void)
{
 401ef9c:	defffc04 	addi	sp,sp,-16
 401efa0:	dfc00315 	stw	ra,12(sp)
 401efa4:	df000215 	stw	fp,8(sp)
 401efa8:	df000204 	addi	fp,sp,8
   struct in_multi * inm;
   NET ifp;
     
   LOCK_NET_RESOURCE (NET_RESID);
 401efac:	0009883a 	mov	r4,zero
 401efb0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   
   /*
    * Quick check to see if any work needs to be done, in order
    * to minimize the overhead of fasttimo processing.
    */
   if (!igmp_timers_are_running)
 401efb4:	d0a80417 	ldw	r2,-24560(gp)
 401efb8:	1004c03a 	cmpne	r2,r2,zero
 401efbc:	1000031e 	bne	r2,zero,401efcc <igmp_fasttimo+0x30>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
 401efc0:	0009883a 	mov	r4,zero
 401efc4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return;
 401efc8:	00005506 	br	401f120 <igmp_fasttimo+0x184>
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401efcc:	008101b4 	movhi	r2,1030
 401efd0:	10a44904 	addi	r2,r2,-28380
 401efd4:	10800017 	ldw	r2,0(r2)
 401efd8:	e0bffe15 	stw	r2,-8(fp)
 401efdc:	00004606 	br	401f0f8 <igmp_fasttimo+0x15c>
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 401efe0:	e0bffe17 	ldw	r2,-8(fp)
 401efe4:	10802c17 	ldw	r2,176(r2)
 401efe8:	e0bfff15 	stw	r2,-4(fp)
 401efec:	00003c06 	br	401f0e0 <igmp_fasttimo+0x144>
      {
         /* skip IPv6 entries */
         if (inm->inm_addr == 0) 
 401eff0:	e0bfff17 	ldw	r2,-4(fp)
 401eff4:	10800017 	ldw	r2,0(r2)
 401eff8:	1005003a 	cmpeq	r2,r2,zero
 401effc:	1000351e 	bne	r2,zero,401f0d4 <igmp_fasttimo+0x138>
               continue;

         if (inm->inm_timer == 0)   /* timer not set */
 401f000:	e0bfff17 	ldw	r2,-4(fp)
 401f004:	10800317 	ldw	r2,12(r2)
 401f008:	1005003a 	cmpeq	r2,r2,zero
 401f00c:	1000311e 	bne	r2,zero,401f0d4 <igmp_fasttimo+0x138>
         {
            /* do nothing */
         }
         else if (--inm->inm_timer == 0)  /* timer expired */
 401f010:	e0bfff17 	ldw	r2,-4(fp)
 401f014:	10800317 	ldw	r2,12(r2)
 401f018:	10ffffc4 	addi	r3,r2,-1
 401f01c:	e0bfff17 	ldw	r2,-4(fp)
 401f020:	10c00315 	stw	r3,12(r2)
 401f024:	e0bfff17 	ldw	r2,-4(fp)
 401f028:	10800317 	ldw	r2,12(r2)
 401f02c:	1004c03a 	cmpne	r2,r2,zero
 401f030:	1000281e 	bne	r2,zero,401f0d4 <igmp_fasttimo+0x138>
         {
            /* send membership report in appropriate format */
            if (ifp->igmpv1_rtr_present)
 401f034:	e0bffe17 	ldw	r2,-8(fp)
 401f038:	10802d03 	ldbu	r2,180(r2)
 401f03c:	10803fcc 	andi	r2,r2,255
 401f040:	1005003a 	cmpeq	r2,r2,zero
 401f044:	1000041e 	bne	r2,zero,401f058 <igmp_fasttimo+0xbc>
            {
               /* always true for IGMPv1, may be true for IGMPv2 */
               igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 401f048:	01000484 	movi	r4,18
 401f04c:	e17fff17 	ldw	r5,-4(fp)
 401f050:	401f1340 	call	401f134 <igmp_send>
 401f054:	00000306 	br	401f064 <igmp_fasttimo+0xc8>
            }
            else
            {
               igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 401f058:	01000584 	movi	r4,22
 401f05c:	e17fff17 	ldw	r5,-4(fp)
 401f060:	401f1340 	call	401f134 <igmp_send>

            /* for IGMPv2, indicate that we were the last to send 
             * a Report for this multicast group (relevant for 
             * IGMPv2 only).  also check to see if we should mark 
             * the IGMPv1 router as "absent". */
            if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 401f064:	e0bffe17 	ldw	r2,-8(fp)
 401f068:	10802f03 	ldbu	r2,188(r2)
 401f06c:	10803fcc 	andi	r2,r2,255
 401f070:	10800098 	cmpnei	r2,r2,2
 401f074:	1000141e 	bne	r2,zero,401f0c8 <igmp_fasttimo+0x12c>
            {
               inm->last2send_report = IGMP_TRUE;
 401f078:	e0ffff17 	ldw	r3,-4(fp)
 401f07c:	00800044 	movi	r2,1
 401f080:	18800405 	stb	r2,16(r3)
               
               if (ifp->igmpv1_rtr_present)
 401f084:	e0bffe17 	ldw	r2,-8(fp)
 401f088:	10802d03 	ldbu	r2,180(r2)
 401f08c:	10803fcc 	andi	r2,r2,255
 401f090:	1005003a 	cmpeq	r2,r2,zero
 401f094:	10000c1e 	bne	r2,zero,401f0c8 <igmp_fasttimo+0x12c>
               {
                  if (cticks > (ifp->igmpv1_query_rcvd_time + (IGMPv1_RTR_PRESENT_TMO * TPS)))
 401f098:	e0bffe17 	ldw	r2,-8(fp)
 401f09c:	10c02e17 	ldw	r3,184(r2)
 401f0a0:	00a71014 	movui	r2,40000
 401f0a4:	1887883a 	add	r3,r3,r2
 401f0a8:	00810174 	movhi	r2,1029
 401f0ac:	1081e404 	addi	r2,r2,1936
 401f0b0:	10800017 	ldw	r2,0(r2)
 401f0b4:	1880042e 	bgeu	r3,r2,401f0c8 <igmp_fasttimo+0x12c>
                     /* we haven't heard from the IGMPv1 router for a duration
                      * greater than or equal to Version 1 Router Present Timeout 
                      * (400 seconds), and will now update the igmpv1_rtr_present 
                      * variable to reflect that.
                      */
                     ifp->igmpv1_rtr_present = IGMP_FALSE;
 401f0b8:	e0bffe17 	ldw	r2,-8(fp)
 401f0bc:	10002d05 	stb	zero,180(r2)
                     ifp->igmpv1_query_rcvd_time = 0;
 401f0c0:	e0bffe17 	ldw	r2,-8(fp)
 401f0c4:	10002e15 	stw	zero,184(r2)
                  }
               }  
            }

            /* decrement the count of running IGMP timers */
            --igmp_timers_are_running;
 401f0c8:	d0a80417 	ldw	r2,-24560(gp)
 401f0cc:	10bfffc4 	addi	r2,r2,-1
 401f0d0:	d0a80415 	stw	r2,-24560(gp)
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
   {
      for (inm = ifp->mc_list; inm; inm = inm->inm_next)
 401f0d4:	e0bfff17 	ldw	r2,-4(fp)
 401f0d8:	10800517 	ldw	r2,20(r2)
 401f0dc:	e0bfff15 	stw	r2,-4(fp)
 401f0e0:	e0bfff17 	ldw	r2,-4(fp)
 401f0e4:	1004c03a 	cmpne	r2,r2,zero
 401f0e8:	103fc11e 	bne	r2,zero,401eff0 <igmp_fasttimo+0x54>
   {
      UNLOCK_NET_RESOURCE (NET_RESID);
      return;
   }

   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401f0ec:	e0bffe17 	ldw	r2,-8(fp)
 401f0f0:	10800017 	ldw	r2,0(r2)
 401f0f4:	e0bffe15 	stw	r2,-8(fp)
 401f0f8:	e0bffe17 	ldw	r2,-8(fp)
 401f0fc:	1004c03a 	cmpne	r2,r2,zero
 401f100:	103fb71e 	bne	r2,zero,401efe0 <igmp_fasttimo+0x44>
      }     
   }

   /* Setup time for the next call into igmp_fasttimo ()
    * (200 ms later). */
   igmp_cticks = cticks + TPS/PR_FASTHZ;
 401f104:	00810174 	movhi	r2,1029
 401f108:	1081e404 	addi	r2,r2,1936
 401f10c:	10800017 	ldw	r2,0(r2)
 401f110:	10800504 	addi	r2,r2,20
 401f114:	d0a80515 	stw	r2,-24556(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 401f118:	0009883a 	mov	r4,zero
 401f11c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   
   return;
}
 401f120:	e037883a 	mov	sp,fp
 401f124:	dfc00117 	ldw	ra,4(sp)
 401f128:	df000017 	ldw	fp,0(sp)
 401f12c:	dec00204 	addi	sp,sp,8
 401f130:	f800283a 	ret

0401f134 <igmp_send>:
 *
 * OUTPUT: None.
 */

void igmp_send (u_char type, struct in_multi * inm)
{
 401f134:	deffdd04 	addi	sp,sp,-140
 401f138:	dfc02215 	stw	ra,136(sp)
 401f13c:	df002115 	stw	fp,132(sp)
 401f140:	df002104 	addi	fp,sp,132
 401f144:	e17fff15 	stw	r5,-4(fp)
 401f148:	e13ffe05 	stb	r4,-8(fp)
   struct ip_moptions * imop;
   struct ip_moptions simo;
   struct ip * pip;
   int i;
   u_char * tmpp;
   u_char opts [2] = {IP_RTR_ALERT_OPT, EOL_OPT};
 401f14c:	00800504 	movi	r2,20
 401f150:	e0bffd05 	stb	r2,-12(fp)
 401f154:	e03ffd45 	stb	zero,-11(fp)
   u_char reqd_len;

   /* compute length of buffer required for outgoing packet.
    * also account for the length of the IP Router Alert 
    * option, if required. */   
   reqd_len = MaxLnh + sizeof (struct ip) + sizeof (struct igmp);
 401f158:	00810174 	movhi	r2,1029
 401f15c:	1081bd04 	addi	r2,r2,1780
 401f160:	10800017 	ldw	r2,0(r2)
 401f164:	10800704 	addi	r2,r2,28
 401f168:	e0bfdf05 	stb	r2,-132(fp)
   if ((type == IGMPv2_LEAVE_GROUP) || 
 401f16c:	e0bffe03 	ldbu	r2,-8(fp)
 401f170:	108005e0 	cmpeqi	r2,r2,23
 401f174:	1000031e 	bne	r2,zero,401f184 <igmp_send+0x50>
 401f178:	e0bffe03 	ldbu	r2,-8(fp)
 401f17c:	10800598 	cmpnei	r2,r2,22
 401f180:	1000031e 	bne	r2,zero,401f190 <igmp_send+0x5c>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      reqd_len += IP_RTR_ALERT_OPT_SIZE;
 401f184:	e0bfdf03 	ldbu	r2,-132(fp)
 401f188:	10800104 	addi	r2,r2,4
 401f18c:	e0bfdf05 	stb	r2,-132(fp)
   }

   /* obtain a packet to send the IGMP message */
   LOCK_NET_RESOURCE (FREEQ_RESID);
 401f190:	01000084 	movi	r4,2
 401f194:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   p = pk_alloc (reqd_len);
 401f198:	e13fdf03 	ldbu	r4,-132(fp)
 401f19c:	4024f700 	call	4024f70 <pk_alloc>
 401f1a0:	e0bfe615 	stw	r2,-104(fp)
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 401f1a4:	01000084 	movi	r4,2
 401f1a8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   
   /* log an error and return if the allocation fails */   
   if (!p)
 401f1ac:	e0bfe617 	ldw	r2,-104(fp)
 401f1b0:	1004c03a 	cmpne	r2,r2,zero
 401f1b4:	1000081e 	bne	r2,zero,401f1d8 <igmp_send+0xa4>
   {
      ++igmpstats.igmp_pkt_alloc_fail;
 401f1b8:	008101b4 	movhi	r2,1030
 401f1bc:	10a20c04 	addi	r2,r2,-30672
 401f1c0:	10800c17 	ldw	r2,48(r2)
 401f1c4:	10c00044 	addi	r3,r2,1
 401f1c8:	008101b4 	movhi	r2,1030
 401f1cc:	10a20c04 	addi	r2,r2,-30672
 401f1d0:	10c00c15 	stw	r3,48(r2)
      return;
 401f1d4:	00007c06 	br	401f3c8 <igmp_send+0x294>
   }

   /* Need to fill in the source and destination ip addresses */
   pip = (struct ip *) p->nb_prot;
 401f1d8:	e0bfe617 	ldw	r2,-104(fp)
 401f1dc:	10800317 	ldw	r2,12(r2)
 401f1e0:	e0bfe315 	stw	r2,-116(fp)
   pip->ip_src = inm->inm_netp->n_ipaddr;
 401f1e4:	e0bfff17 	ldw	r2,-4(fp)
 401f1e8:	10800117 	ldw	r2,4(r2)
 401f1ec:	10c00a17 	ldw	r3,40(r2)
 401f1f0:	e0bfe317 	ldw	r2,-116(fp)
 401f1f4:	10c00315 	stw	r3,12(r2)
   /* Leave Group messages are sent to the all-routers multicast group */
   if (type == IGMPv2_LEAVE_GROUP)
 401f1f8:	e0bffe03 	ldbu	r2,-8(fp)
 401f1fc:	108005d8 	cmpnei	r2,r2,23
 401f200:	1000041e 	bne	r2,zero,401f214 <igmp_send+0xe0>
   {
      /* igmp_all_rtrs_group is already in network byte order */
      pip->ip_dest = igmp_all_rtrs_group;
 401f204:	d0e80717 	ldw	r3,-24548(gp)
 401f208:	e0bfe317 	ldw	r2,-116(fp)
 401f20c:	10c00415 	stw	r3,16(r2)
 401f210:	00000406 	br	401f224 <igmp_send+0xf0>
   }
   else
      pip->ip_dest = inm->inm_addr;
 401f214:	e0bfff17 	ldw	r2,-4(fp)
 401f218:	10c00017 	ldw	r3,0(r2)
 401f21c:	e0bfe317 	ldw	r2,-116(fp)
 401f220:	10c00415 	stw	r3,16(r2)
   
   p->fhost = pip->ip_dest;
 401f224:	e0bfe317 	ldw	r2,-116(fp)
 401f228:	10c00417 	ldw	r3,16(r2)
 401f22c:	e0bfe617 	ldw	r2,-104(fp)
 401f230:	10c00715 	stw	r3,28(r2)

   tmpp = (((u_char *) p->nb_prot) + sizeof (struct ip));
 401f234:	e0bfe617 	ldw	r2,-104(fp)
 401f238:	10800317 	ldw	r2,12(r2)
 401f23c:	10800504 	addi	r2,r2,20
 401f240:	e0bfe115 	stw	r2,-124(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 401f244:	e0bffe03 	ldbu	r2,-8(fp)
 401f248:	108005e0 	cmpeqi	r2,r2,23
 401f24c:	1000031e 	bne	r2,zero,401f25c <igmp_send+0x128>
 401f250:	e0bffe03 	ldbu	r2,-8(fp)
 401f254:	10800598 	cmpnei	r2,r2,22
 401f258:	1000061e 	bne	r2,zero,401f274 <igmp_send+0x140>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      /* provide space for ip_write2 () to write option-related data */
      tmpp += IP_RTR_ALERT_OPT_SIZE;
 401f25c:	e0bfe117 	ldw	r2,-124(fp)
 401f260:	10800104 	addi	r2,r2,4
 401f264:	e0bfe115 	stw	r2,-124(fp)
      optp = &(opts [0]); /* one option (IP Router Alert) */
 401f268:	e0bffd04 	addi	r2,fp,-12
 401f26c:	e0bfe015 	stw	r2,-128(fp)

   /* when transmitting an IGMP packet, our IGMP module will insert
    * data for the Router Alert option in the following types of
    * packets: Version 2 Membership Report (0x16) and Leave Group 
    * (0x17) */
   if ((type == IGMPv2_LEAVE_GROUP) || 
 401f270:	00000306 	br	401f280 <igmp_send+0x14c>
      tmpp += IP_RTR_ALERT_OPT_SIZE;
      optp = &(opts [0]); /* one option (IP Router Alert) */
   }
   /* outgoing packet does not require any options */
   else 
      optp = &(opts [1]);
 401f274:	e0bffd04 	addi	r2,fp,-12
 401f278:	10800044 	addi	r2,r2,1
 401f27c:	e0bfe015 	stw	r2,-128(fp)
   /* point to the start of the IGMP header */
   igmp = (struct igmp *) tmpp;
 401f280:	e0bfe117 	ldw	r2,-124(fp)
 401f284:	e0bfe515 	stw	r2,-108(fp)
   
   igmp->igmp_type = type;
 401f288:	e0ffe517 	ldw	r3,-108(fp)
 401f28c:	e0bffe03 	ldbu	r2,-8(fp)
 401f290:	18800005 	stb	r2,0(r3)
   igmp->igmp_code = 0;
 401f294:	e0bfe517 	ldw	r2,-108(fp)
 401f298:	10000045 	stb	zero,1(r2)
   
   /* all messages (Report or Leave) have Group Address field 
    * set to the group being reported or left */
   igmp->igmp_group = inm->inm_addr;
 401f29c:	e0bfff17 	ldw	r2,-4(fp)
 401f2a0:	10c00017 	ldw	r3,0(r2)
 401f2a4:	e0bfe517 	ldw	r2,-108(fp)
 401f2a8:	10c00115 	stw	r3,4(r2)
   igmp->igmp_cksum = 0;
 401f2ac:	e0bfe517 	ldw	r2,-108(fp)
 401f2b0:	1000008d 	sth	zero,2(r2)
   igmp->igmp_cksum = ~cksum((void*)igmp, IGMP_MINLEN>>1);
 401f2b4:	e13fe517 	ldw	r4,-108(fp)
 401f2b8:	01400104 	movi	r5,4
 401f2bc:	4020a000 	call	4020a00 <cksum>
 401f2c0:	0084303a 	nor	r2,zero,r2
 401f2c4:	1007883a 	mov	r3,r2
 401f2c8:	e0bfe517 	ldw	r2,-108(fp)
 401f2cc:	10c0008d 	sth	r3,2(r2)

   imop = &simo;
 401f2d0:	e0bfe704 	addi	r2,fp,-100
 401f2d4:	e0bfe415 	stw	r2,-112(fp)
   MEMSET(imop, 0, sizeof(simo));
 401f2d8:	e0bfe417 	ldw	r2,-112(fp)
 401f2dc:	1009883a 	mov	r4,r2
 401f2e0:	01801604 	movi	r6,88
 401f2e4:	000b883a 	mov	r5,zero
 401f2e8:	4001f640 	call	4001f64 <memset>
   imop->imo_multicast_netp = inm->inm_netp;
 401f2ec:	e0bfff17 	ldw	r2,-4(fp)
 401f2f0:	10c00117 	ldw	r3,4(r2)
 401f2f4:	e0bfe417 	ldw	r2,-112(fp)
 401f2f8:	10c00015 	stw	r3,0(r2)
   imop->imo_multicast_ttl = 1;
 401f2fc:	e0ffe417 	ldw	r3,-112(fp)
 401f300:	00800044 	movi	r2,1
 401f304:	18800105 	stb	r2,4(r3)
   /* we do not want our own reports to be looped back */
   imop->imo_multicast_loop = 0;
 401f308:	e0bfe417 	ldw	r2,-112(fp)
 401f30c:	10000145 	stb	zero,5(r2)

   /* set nb_prot to point to the beginning of the IGMP data,
    * and nb_plen to the length of the IGMP data, and attach
    * the multicast options structure to the outgoing packet */
   p->nb_prot = (char *) tmpp;
 401f310:	e0ffe117 	ldw	r3,-124(fp)
 401f314:	e0bfe617 	ldw	r2,-104(fp)
 401f318:	10c00315 	stw	r3,12(r2)
   p->nb_plen = sizeof(struct igmp);
 401f31c:	e0ffe617 	ldw	r3,-104(fp)
 401f320:	00800204 	movi	r2,8
 401f324:	18800415 	stw	r2,16(r3)
   p->imo = imop;
 401f328:	e0ffe617 	ldw	r3,-104(fp)
 401f32c:	e0bfe417 	ldw	r2,-112(fp)
 401f330:	18800b15 	stw	r2,44(r3)
   
   i = ip_write2 (IGMP_PROT, p, optp);
 401f334:	01000084 	movi	r4,2
 401f338:	e17fe617 	ldw	r5,-104(fp)
 401f33c:	e1bfe017 	ldw	r6,-128(fp)
 401f340:	40395740 	call	4039574 <ip_write2>
 401f344:	e0bfe215 	stw	r2,-120(fp)

   if (type == IGMPv2_LEAVE_GROUP)
 401f348:	e0bffe03 	ldbu	r2,-8(fp)
 401f34c:	108005d8 	cmpnei	r2,r2,23
 401f350:	1000081e 	bne	r2,zero,401f374 <igmp_send+0x240>
      ++igmpstats.igmpv2mode_v2_leave_msgs_sent;
 401f354:	008101b4 	movhi	r2,1030
 401f358:	10a20c04 	addi	r2,r2,-30672
 401f35c:	10801717 	ldw	r2,92(r2)
 401f360:	10c00044 	addi	r3,r2,1
 401f364:	008101b4 	movhi	r2,1030
 401f368:	10a20c04 	addi	r2,r2,-30672
 401f36c:	10c01715 	stw	r3,92(r2)
 401f370:	00001506 	br	401f3c8 <igmp_send+0x294>
   else if (type == IGMPv2_MEMBERSHIP_REPORT)
 401f374:	e0bffe03 	ldbu	r2,-8(fp)
 401f378:	10800598 	cmpnei	r2,r2,22
 401f37c:	1000081e 	bne	r2,zero,401f3a0 <igmp_send+0x26c>
      ++igmpstats.igmpv2mode_v2_reports_sent;
 401f380:	008101b4 	movhi	r2,1030
 401f384:	10a20c04 	addi	r2,r2,-30672
 401f388:	10801817 	ldw	r2,96(r2)
 401f38c:	10c00044 	addi	r3,r2,1
 401f390:	008101b4 	movhi	r2,1030
 401f394:	10a20c04 	addi	r2,r2,-30672
 401f398:	10c01815 	stw	r3,96(r2)
 401f39c:	00000a06 	br	401f3c8 <igmp_send+0x294>
   else if (type == IGMP_HOST_MEMBERSHIP_REPORT)
 401f3a0:	e0bffe03 	ldbu	r2,-8(fp)
 401f3a4:	10800498 	cmpnei	r2,r2,18
 401f3a8:	1000071e 	bne	r2,zero,401f3c8 <igmp_send+0x294>
      ++igmpstats.igmp_v1_reports_sent;
 401f3ac:	008101b4 	movhi	r2,1030
 401f3b0:	10a20c04 	addi	r2,r2,-30672
 401f3b4:	10801617 	ldw	r2,88(r2)
 401f3b8:	10c00044 	addi	r3,r2,1
 401f3bc:	008101b4 	movhi	r2,1030
 401f3c0:	10a20c04 	addi	r2,r2,-30672
 401f3c4:	10c01615 	stw	r3,88(r2)
}
 401f3c8:	e037883a 	mov	sp,fp
 401f3cc:	dfc00117 	ldw	ra,4(sp)
 401f3d0:	df000017 	ldw	fp,0(sp)
 401f3d4:	dec00204 	addi	sp,sp,8
 401f3d8:	f800283a 	ret

0401f3dc <igmp_joingroup>:
 *
 * OUTPUT: None.
 */
 
void igmp_joingroup(struct in_multi * inm)
{
 401f3dc:	defffc04 	addi	sp,sp,-16
 401f3e0:	dfc00315 	stw	ra,12(sp)
 401f3e4:	df000215 	stw	fp,8(sp)
 401f3e8:	df000204 	addi	fp,sp,8
 401f3ec:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   /* extract the network interface to which this multicast
    * address is "attached" */
   ifp = inm->inm_netp;
 401f3f0:	e0bfff17 	ldw	r2,-4(fp)
 401f3f4:	10800117 	ldw	r2,4(r2)
 401f3f8:	e0bffe15 	stw	r2,-8(fp)

   if (inm->inm_addr == igmp_all_hosts_group)
 401f3fc:	e0bfff17 	ldw	r2,-4(fp)
 401f400:	10c00017 	ldw	r3,0(r2)
 401f404:	d0a80617 	ldw	r2,-24552(gp)
 401f408:	1880031e 	bne	r3,r2,401f418 <igmp_joingroup+0x3c>
   {
      inm->inm_timer = 0;
 401f40c:	e0bfff17 	ldw	r2,-4(fp)
 401f410:	10000315 	stw	zero,12(r2)
 401f414:	00008b06 	br	401f644 <igmp_joingroup+0x268>
   }
   else 
   {
      /* send unsolicited membership report in appropriate format */
      if (ifp->igmpv1_rtr_present)
 401f418:	e0bffe17 	ldw	r2,-8(fp)
 401f41c:	10802d03 	ldbu	r2,180(r2)
 401f420:	10803fcc 	andi	r2,r2,255
 401f424:	1005003a 	cmpeq	r2,r2,zero
 401f428:	10003e1e 	bne	r2,zero,401f524 <igmp_joingroup+0x148>
      {
         /* always true for IGMPv1, may be true for IGMPv2 */
         igmp_send (IGMP_HOST_MEMBERSHIP_REPORT, inm);
 401f42c:	01000484 	movi	r4,18
 401f430:	e17fff17 	ldw	r5,-4(fp)
 401f434:	401f1340 	call	401f134 <igmp_send>
         /* set a delay timer (with a duration of 
          * IGMP_MAX_HOST_REPORT_DELAY) for a second unsolicited report */
         inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 401f438:	008101b4 	movhi	r2,1030
 401f43c:	10a44e04 	addi	r2,r2,-28360
 401f440:	11000217 	ldw	r4,8(r2)
 401f444:	008101b4 	movhi	r2,1030
 401f448:	10a20804 	addi	r2,r2,-30688
 401f44c:	10800017 	ldw	r2,0(r2)
 401f450:	10800a17 	ldw	r2,40(r2)
 401f454:	1004d63a 	srli	r2,r2,24
 401f458:	10c03fcc 	andi	r3,r2,255
 401f45c:	008101b4 	movhi	r2,1030
 401f460:	10a20804 	addi	r2,r2,-30688
 401f464:	10800017 	ldw	r2,0(r2)
 401f468:	10800a17 	ldw	r2,40(r2)
 401f46c:	1004d23a 	srli	r2,r2,8
 401f470:	10bfc00c 	andi	r2,r2,65280
 401f474:	1886b03a 	or	r3,r3,r2
 401f478:	008101b4 	movhi	r2,1030
 401f47c:	10a20804 	addi	r2,r2,-30688
 401f480:	10800017 	ldw	r2,0(r2)
 401f484:	10800a17 	ldw	r2,40(r2)
 401f488:	10bfc00c 	andi	r2,r2,65280
 401f48c:	1004923a 	slli	r2,r2,8
 401f490:	1886b03a 	or	r3,r3,r2
 401f494:	008101b4 	movhi	r2,1030
 401f498:	10a20804 	addi	r2,r2,-30688
 401f49c:	10800017 	ldw	r2,0(r2)
 401f4a0:	10800a17 	ldw	r2,40(r2)
 401f4a4:	10803fcc 	andi	r2,r2,255
 401f4a8:	1004963a 	slli	r2,r2,24
 401f4ac:	1884b03a 	or	r2,r3,r2
 401f4b0:	2089883a 	add	r4,r4,r2
 401f4b4:	e0bfff17 	ldw	r2,-4(fp)
 401f4b8:	10800017 	ldw	r2,0(r2)
 401f4bc:	1004d63a 	srli	r2,r2,24
 401f4c0:	10c03fcc 	andi	r3,r2,255
 401f4c4:	e0bfff17 	ldw	r2,-4(fp)
 401f4c8:	10800017 	ldw	r2,0(r2)
 401f4cc:	1004d23a 	srli	r2,r2,8
 401f4d0:	10bfc00c 	andi	r2,r2,65280
 401f4d4:	1886b03a 	or	r3,r3,r2
 401f4d8:	e0bfff17 	ldw	r2,-4(fp)
 401f4dc:	10800017 	ldw	r2,0(r2)
 401f4e0:	10bfc00c 	andi	r2,r2,65280
 401f4e4:	1004923a 	slli	r2,r2,8
 401f4e8:	1886b03a 	or	r3,r3,r2
 401f4ec:	e0bfff17 	ldw	r2,-4(fp)
 401f4f0:	10800017 	ldw	r2,0(r2)
 401f4f4:	10803fcc 	andi	r2,r2,255
 401f4f8:	1004963a 	slli	r2,r2,24
 401f4fc:	1884b03a 	or	r2,r3,r2
 401f500:	2087883a 	add	r3,r4,r2
 401f504:	00800c84 	movi	r2,50
 401f508:	1885203a 	divu	r2,r3,r2
 401f50c:	10800ca4 	muli	r2,r2,50
 401f510:	1885c83a 	sub	r2,r3,r2
 401f514:	10c00044 	addi	r3,r2,1
 401f518:	e0bfff17 	ldw	r2,-4(fp)
 401f51c:	10c00315 	stw	r3,12(r2)
 401f520:	00003d06 	br	401f618 <igmp_joingroup+0x23c>
      }
      else
      {
         igmp_send (IGMPv2_MEMBERSHIP_REPORT, inm);
 401f524:	01000584 	movi	r4,22
 401f528:	e17fff17 	ldw	r5,-4(fp)
 401f52c:	401f1340 	call	401f134 <igmp_send>
         /* the delay time duration is the Unsolicited Report Interval */
         inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY ((UNSOLIC_RPT_INTERVAL * PR_FASTHZ), inm->inm_addr);
 401f530:	008101b4 	movhi	r2,1030
 401f534:	10a44e04 	addi	r2,r2,-28360
 401f538:	11000217 	ldw	r4,8(r2)
 401f53c:	008101b4 	movhi	r2,1030
 401f540:	10a20804 	addi	r2,r2,-30688
 401f544:	10800017 	ldw	r2,0(r2)
 401f548:	10800a17 	ldw	r2,40(r2)
 401f54c:	1004d63a 	srli	r2,r2,24
 401f550:	10c03fcc 	andi	r3,r2,255
 401f554:	008101b4 	movhi	r2,1030
 401f558:	10a20804 	addi	r2,r2,-30688
 401f55c:	10800017 	ldw	r2,0(r2)
 401f560:	10800a17 	ldw	r2,40(r2)
 401f564:	1004d23a 	srli	r2,r2,8
 401f568:	10bfc00c 	andi	r2,r2,65280
 401f56c:	1886b03a 	or	r3,r3,r2
 401f570:	008101b4 	movhi	r2,1030
 401f574:	10a20804 	addi	r2,r2,-30688
 401f578:	10800017 	ldw	r2,0(r2)
 401f57c:	10800a17 	ldw	r2,40(r2)
 401f580:	10bfc00c 	andi	r2,r2,65280
 401f584:	1004923a 	slli	r2,r2,8
 401f588:	1886b03a 	or	r3,r3,r2
 401f58c:	008101b4 	movhi	r2,1030
 401f590:	10a20804 	addi	r2,r2,-30688
 401f594:	10800017 	ldw	r2,0(r2)
 401f598:	10800a17 	ldw	r2,40(r2)
 401f59c:	10803fcc 	andi	r2,r2,255
 401f5a0:	1004963a 	slli	r2,r2,24
 401f5a4:	1884b03a 	or	r2,r3,r2
 401f5a8:	2089883a 	add	r4,r4,r2
 401f5ac:	e0bfff17 	ldw	r2,-4(fp)
 401f5b0:	10800017 	ldw	r2,0(r2)
 401f5b4:	1004d63a 	srli	r2,r2,24
 401f5b8:	10c03fcc 	andi	r3,r2,255
 401f5bc:	e0bfff17 	ldw	r2,-4(fp)
 401f5c0:	10800017 	ldw	r2,0(r2)
 401f5c4:	1004d23a 	srli	r2,r2,8
 401f5c8:	10bfc00c 	andi	r2,r2,65280
 401f5cc:	1886b03a 	or	r3,r3,r2
 401f5d0:	e0bfff17 	ldw	r2,-4(fp)
 401f5d4:	10800017 	ldw	r2,0(r2)
 401f5d8:	10bfc00c 	andi	r2,r2,65280
 401f5dc:	1004923a 	slli	r2,r2,8
 401f5e0:	1886b03a 	or	r3,r3,r2
 401f5e4:	e0bfff17 	ldw	r2,-4(fp)
 401f5e8:	10800017 	ldw	r2,0(r2)
 401f5ec:	10803fcc 	andi	r2,r2,255
 401f5f0:	1004963a 	slli	r2,r2,24
 401f5f4:	1884b03a 	or	r2,r3,r2
 401f5f8:	2087883a 	add	r3,r4,r2
 401f5fc:	00800c84 	movi	r2,50
 401f600:	1885203a 	divu	r2,r3,r2
 401f604:	10800ca4 	muli	r2,r2,50
 401f608:	1885c83a 	sub	r2,r3,r2
 401f60c:	10c00044 	addi	r3,r2,1
 401f610:	e0bfff17 	ldw	r2,-4(fp)
 401f614:	10c00315 	stw	r3,12(r2)
      }
      
      /* for IGMPv2, indicate that we were the last to send 
       * a Report for this multicast group (relevant for 
       * IGMPv2 only). */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 401f618:	e0bffe17 	ldw	r2,-8(fp)
 401f61c:	10802f03 	ldbu	r2,188(r2)
 401f620:	10803fcc 	andi	r2,r2,255
 401f624:	10800098 	cmpnei	r2,r2,2
 401f628:	1000031e 	bne	r2,zero,401f638 <igmp_joingroup+0x25c>
      {
         inm->last2send_report = IGMP_TRUE;
 401f62c:	e0ffff17 	ldw	r3,-4(fp)
 401f630:	00800044 	movi	r2,1
 401f634:	18800405 	stb	r2,16(r3)
      }

      ++igmp_timers_are_running;
 401f638:	d0a80417 	ldw	r2,-24560(gp)
 401f63c:	10800044 	addi	r2,r2,1
 401f640:	d0a80415 	stw	r2,-24560(gp)
   }
   
   return;
}     
 401f644:	e037883a 	mov	sp,fp
 401f648:	dfc00117 	ldw	ra,4(sp)
 401f64c:	df000017 	ldw	fp,0(sp)
 401f650:	dec00204 	addi	sp,sp,8
 401f654:	f800283a 	ret

0401f658 <igmp_leavegroup>:
 *
 * OUTPUT: None.
 */

void igmp_leavegroup (struct in_multi * inm)
{
 401f658:	defffc04 	addi	sp,sp,-16
 401f65c:	dfc00315 	stw	ra,12(sp)
 401f660:	df000215 	stw	fp,8(sp)
 401f664:	df000204 	addi	fp,sp,8
 401f668:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   ifp = inm->inm_netp;
 401f66c:	e0bfff17 	ldw	r2,-4(fp)
 401f670:	10800117 	ldw	r2,4(r2)
 401f674:	e0bffe15 	stw	r2,-8(fp)

   if ((ifp->igmp_oper_mode == IGMP_MODE_V2) && 
 401f678:	e0bffe17 	ldw	r2,-8(fp)
 401f67c:	10802f03 	ldbu	r2,188(r2)
 401f680:	10803fcc 	andi	r2,r2,255
 401f684:	10800098 	cmpnei	r2,r2,2
 401f688:	10000d1e 	bne	r2,zero,401f6c0 <igmp_leavegroup+0x68>
 401f68c:	e0bffe17 	ldw	r2,-8(fp)
 401f690:	10802d03 	ldbu	r2,180(r2)
 401f694:	10803fcc 	andi	r2,r2,255
 401f698:	1004c03a 	cmpne	r2,r2,zero
 401f69c:	1000081e 	bne	r2,zero,401f6c0 <igmp_leavegroup+0x68>
       !ifp->igmpv1_rtr_present)
   {
      if (inm->last2send_report == IGMP_TRUE)
 401f6a0:	e0bfff17 	ldw	r2,-4(fp)
 401f6a4:	10800403 	ldbu	r2,16(r2)
 401f6a8:	10803fcc 	andi	r2,r2,255
 401f6ac:	10800058 	cmpnei	r2,r2,1
 401f6b0:	1000031e 	bne	r2,zero,401f6c0 <igmp_leavegroup+0x68>
         igmp_send (IGMPv2_LEAVE_GROUP, inm);
 401f6b4:	010005c4 	movi	r4,23
 401f6b8:	e17fff17 	ldw	r5,-4(fp)
 401f6bc:	401f1340 	call	401f134 <igmp_send>
   }
   
   return;
}
 401f6c0:	e037883a 	mov	sp,fp
 401f6c4:	dfc00117 	ldw	ra,4(sp)
 401f6c8:	df000017 	ldw	fp,0(sp)
 401f6cc:	dec00204 	addi	sp,sp,8
 401f6d0:	f800283a 	ret

0401f6d4 <igmp_validate>:
 *         validation fails; otherwise, it returns
 *         IGMP_OK.
 */

int igmp_validate (PACKET p)
{
 401f6d4:	defff504 	addi	sp,sp,-44
 401f6d8:	dfc00a15 	stw	ra,40(sp)
 401f6dc:	df000915 	stw	fp,36(sp)
 401f6e0:	df000904 	addi	fp,sp,36
 401f6e4:	e13ffe15 	stw	r4,-8(fp)
   u_short xsum;  
   u_char type;
   ip_addr mcgrp_addr;
   u_char resp_time;

   pip = ip_head (p);
 401f6e8:	e0bffe17 	ldw	r2,-8(fp)
 401f6ec:	10800317 	ldw	r2,12(r2)
 401f6f0:	e0bffd15 	stw	r2,-12(fp)

   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */
   igmplen = p->nb_plen - ip_hlen (pip);
 401f6f4:	e0bffe17 	ldw	r2,-8(fp)
 401f6f8:	10c00417 	ldw	r3,16(r2)
 401f6fc:	e0bffd17 	ldw	r2,-12(fp)
 401f700:	10800003 	ldbu	r2,0(r2)
 401f704:	10803fcc 	andi	r2,r2,255
 401f708:	108003cc 	andi	r2,r2,15
 401f70c:	1085883a 	add	r2,r2,r2
 401f710:	1085883a 	add	r2,r2,r2
 401f714:	1885c83a 	sub	r2,r3,r2
 401f718:	e0bffc15 	stw	r2,-16(fp)

   /* validate length (IGMP_MINLEN is 8 bytes) */
   if (igmplen != IGMP_MINLEN) 
 401f71c:	e0bffc17 	ldw	r2,-16(fp)
 401f720:	10800220 	cmpeqi	r2,r2,8
 401f724:	10000a1e 	bne	r2,zero,401f750 <igmp_validate+0x7c>
   {
      ++igmpstats.igmp_badlen_rcvd;
 401f728:	008101b4 	movhi	r2,1030
 401f72c:	10a20c04 	addi	r2,r2,-30672
 401f730:	10800a17 	ldw	r2,40(r2)
 401f734:	10c00044 	addi	r3,r2,1
 401f738:	008101b4 	movhi	r2,1030
 401f73c:	10a20c04 	addi	r2,r2,-30672
 401f740:	10c00a15 	stw	r3,40(r2)
      return ENP_BAD_HEADER;
 401f744:	00bff804 	movi	r2,-32
 401f748:	e0bfff15 	stw	r2,-4(fp)
 401f74c:	0000b206 	br	401fa18 <igmp_validate+0x344>
   }

   /* validate checksum */
   igmp = (struct igmp *) (ip_data (pip));
 401f750:	e0bffd17 	ldw	r2,-12(fp)
 401f754:	10800003 	ldbu	r2,0(r2)
 401f758:	10803fcc 	andi	r2,r2,255
 401f75c:	108003cc 	andi	r2,r2,15
 401f760:	1085883a 	add	r2,r2,r2
 401f764:	1085883a 	add	r2,r2,r2
 401f768:	1007883a 	mov	r3,r2
 401f76c:	e0bffd17 	ldw	r2,-12(fp)
 401f770:	1885883a 	add	r2,r3,r2
 401f774:	e0bffb15 	stw	r2,-20(fp)
   osum = igmp->igmp_cksum;
 401f778:	e0bffb17 	ldw	r2,-20(fp)
 401f77c:	1080008b 	ldhu	r2,2(r2)
 401f780:	e0bffa0d 	sth	r2,-24(fp)
   igmp->igmp_cksum = 0;
 401f784:	e0bffb17 	ldw	r2,-20(fp)
 401f788:	1000008d 	sth	zero,2(r2)
   xsum = ~cksum(igmp, igmplen>>1);
 401f78c:	e0bffc17 	ldw	r2,-16(fp)
 401f790:	1005d07a 	srai	r2,r2,1
 401f794:	100b883a 	mov	r5,r2
 401f798:	e13ffb17 	ldw	r4,-20(fp)
 401f79c:	4020a000 	call	4020a00 <cksum>
 401f7a0:	0084303a 	nor	r2,zero,r2
 401f7a4:	e0bff98d 	sth	r2,-26(fp)
   if (xsum != osum)
 401f7a8:	e0fff98b 	ldhu	r3,-26(fp)
 401f7ac:	e0bffa0b 	ldhu	r2,-24(fp)
 401f7b0:	18800d26 	beq	r3,r2,401f7e8 <igmp_validate+0x114>
   {
      igmp->igmp_cksum = osum;
 401f7b4:	e0fffb17 	ldw	r3,-20(fp)
 401f7b8:	e0bffa0b 	ldhu	r2,-24(fp)
 401f7bc:	1880008d 	sth	r2,2(r3)
      ++igmpstats.igmp_badsum_rcvd;
 401f7c0:	008101b4 	movhi	r2,1030
 401f7c4:	10a20c04 	addi	r2,r2,-30672
 401f7c8:	10800b17 	ldw	r2,44(r2)
 401f7cc:	10c00044 	addi	r3,r2,1
 401f7d0:	008101b4 	movhi	r2,1030
 401f7d4:	10a20c04 	addi	r2,r2,-30672
 401f7d8:	10c00b15 	stw	r3,44(r2)
      return ENP_BAD_HEADER;
 401f7dc:	00bff804 	movi	r2,-32
 401f7e0:	e0bfff15 	stw	r2,-4(fp)
 401f7e4:	00008c06 	br	401fa18 <igmp_validate+0x344>
   }
   
   /* extract the IGMP packet type, Group Address, and Max Response Time 
    * (unused for IGMPv1) fields from received packet */
   type = igmp->igmp_type;
 401f7e8:	e0bffb17 	ldw	r2,-20(fp)
 401f7ec:	10800003 	ldbu	r2,0(r2)
 401f7f0:	e0bff905 	stb	r2,-28(fp)
   mcgrp_addr = ntohl(igmp->igmp_group); 
 401f7f4:	e0bffb17 	ldw	r2,-20(fp)
 401f7f8:	10800117 	ldw	r2,4(r2)
 401f7fc:	1004d63a 	srli	r2,r2,24
 401f800:	10c03fcc 	andi	r3,r2,255
 401f804:	e0bffb17 	ldw	r2,-20(fp)
 401f808:	10800117 	ldw	r2,4(r2)
 401f80c:	1004d23a 	srli	r2,r2,8
 401f810:	10bfc00c 	andi	r2,r2,65280
 401f814:	1886b03a 	or	r3,r3,r2
 401f818:	e0bffb17 	ldw	r2,-20(fp)
 401f81c:	10800117 	ldw	r2,4(r2)
 401f820:	10bfc00c 	andi	r2,r2,65280
 401f824:	1004923a 	slli	r2,r2,8
 401f828:	1886b03a 	or	r3,r3,r2
 401f82c:	e0bffb17 	ldw	r2,-20(fp)
 401f830:	10800117 	ldw	r2,4(r2)
 401f834:	10803fcc 	andi	r2,r2,255
 401f838:	1004963a 	slli	r2,r2,24
 401f83c:	1884b03a 	or	r2,r3,r2
 401f840:	e0bff815 	stw	r2,-32(fp)
   resp_time = igmp->igmp_code;
 401f844:	e0bffb17 	ldw	r2,-20(fp)
 401f848:	10800043 	ldbu	r2,1(r2)
 401f84c:	e0bff705 	stb	r2,-36(fp)
      
   if (type == IGMP_HOST_MEMBERSHIP_QUERY)
 401f850:	e0bff903 	ldbu	r2,-28(fp)
 401f854:	10800458 	cmpnei	r2,r2,17
 401f858:	1000381e 	bne	r2,zero,401f93c <igmp_validate+0x268>
   {
      if ((resp_time == 0) || /* IGMPv1 Query */
 401f85c:	e0bff703 	ldbu	r2,-36(fp)
 401f860:	1005003a 	cmpeq	r2,r2,zero
 401f864:	1000061e 	bne	r2,zero,401f880 <igmp_validate+0x1ac>
 401f868:	e0bff703 	ldbu	r2,-36(fp)
 401f86c:	1005003a 	cmpeq	r2,r2,zero
 401f870:	1000111e 	bne	r2,zero,401f8b8 <igmp_validate+0x1e4>
 401f874:	e0bff817 	ldw	r2,-32(fp)
 401f878:	1004c03a 	cmpne	r2,r2,zero
 401f87c:	10000e1e 	bne	r2,zero,401f8b8 <igmp_validate+0x1e4>
          ((resp_time > 0) && (mcgrp_addr == 0))) /* IGMPv2 General Query */     
      {
         /* if this is a IGMPv1 Host Membership Query or a IGMPv2 
          * General Query, it must be addressed to the all-hosts 
          * group */
         if (pip->ip_dest != igmp_all_hosts_group) 
 401f880:	e0bffd17 	ldw	r2,-12(fp)
 401f884:	10c00417 	ldw	r3,16(r2)
 401f888:	d0a80617 	ldw	r2,-24552(gp)
 401f88c:	18800a26 	beq	r3,r2,401f8b8 <igmp_validate+0x1e4>
         {
            ++igmpstats.igmp_bad_queries_rcvd;
 401f890:	008101b4 	movhi	r2,1030
 401f894:	10a20c04 	addi	r2,r2,-30672
 401f898:	10800e17 	ldw	r2,56(r2)
 401f89c:	10c00044 	addi	r3,r2,1
 401f8a0:	008101b4 	movhi	r2,1030
 401f8a4:	10a20c04 	addi	r2,r2,-30672
 401f8a8:	10c00e15 	stw	r3,56(r2)
            return ENP_BAD_HEADER;
 401f8ac:	00bff804 	movi	r2,-32
 401f8b0:	e0bfff15 	stw	r2,-4(fp)
 401f8b4:	00005806 	br	401fa18 <igmp_validate+0x344>
         }     
      }
      
      if ((resp_time > 0) && (mcgrp_addr != 0))
 401f8b8:	e0bff703 	ldbu	r2,-36(fp)
 401f8bc:	1005003a 	cmpeq	r2,r2,zero
 401f8c0:	10001e1e 	bne	r2,zero,401f93c <igmp_validate+0x268>
 401f8c4:	e0bff817 	ldw	r2,-32(fp)
 401f8c8:	1005003a 	cmpeq	r2,r2,zero
 401f8cc:	10001b1e 	bne	r2,zero,401f93c <igmp_validate+0x268>
      {
         /* this is a IGMPv2 Group-Specific Query. */
         if (p->net->igmp_oper_mode == IGMP_MODE_V1)
 401f8d0:	e0bffe17 	ldw	r2,-8(fp)
 401f8d4:	10800617 	ldw	r2,24(r2)
 401f8d8:	10802f03 	ldbu	r2,188(r2)
 401f8dc:	10803fcc 	andi	r2,r2,255
 401f8e0:	10800058 	cmpnei	r2,r2,1
 401f8e4:	1000031e 	bne	r2,zero,401f8f4 <igmp_validate+0x220>
         {
            /* IGMPv1 code does not understand a IGMPv2 Group-
             * Specific Query */
            return ENP_BAD_HEADER; 
 401f8e8:	00bff804 	movi	r2,-32
 401f8ec:	e0bfff15 	stw	r2,-4(fp)
 401f8f0:	00004906 	br	401fa18 <igmp_validate+0x344>
         /* check to make sure that the group address field carries
          * a valid multicast address; if it doesn't, we
          * drop the packet.  Also drop packets that
          * carry the multicast address for the all-hosts
          * group. */
         if ((!IN_MULTICAST(mcgrp_addr)) ||
 401f8f4:	e0bff817 	ldw	r2,-32(fp)
 401f8f8:	10fc002c 	andhi	r3,r2,61440
 401f8fc:	00b80034 	movhi	r2,57344
 401f900:	1880041e 	bne	r3,r2,401f914 <igmp_validate+0x240>
 401f904:	e0bffb17 	ldw	r2,-20(fp)
 401f908:	10c00117 	ldw	r3,4(r2)
 401f90c:	d0a80617 	ldw	r2,-24552(gp)
 401f910:	18800a1e 	bne	r3,r2,401f93c <igmp_validate+0x268>
             /* igmp_all_hosts_group is already in network byte order */
             (igmp->igmp_group == igmp_all_hosts_group))
         {
            ++igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd;
 401f914:	008101b4 	movhi	r2,1030
 401f918:	10a20c04 	addi	r2,r2,-30672
 401f91c:	10801117 	ldw	r2,68(r2)
 401f920:	10c00044 	addi	r3,r2,1
 401f924:	008101b4 	movhi	r2,1030
 401f928:	10a20c04 	addi	r2,r2,-30672
 401f92c:	10c01115 	stw	r3,68(r2)
            /* caller will free received packet */
            return ENP_BAD_HEADER;
 401f930:	00bff804 	movi	r2,-32
 401f934:	e0bfff15 	stw	r2,-4(fp)
 401f938:	00003706 	br	401fa18 <igmp_validate+0x344>
   
   /* check to ensure that a received IGMPv1 or v2 Report has the 
    * same IP host group address in its IP destination field and 
    * its IGMP group address field, and that the group address is
    * a valid multicast address */
   if ((type == IGMP_HOST_MEMBERSHIP_REPORT) ||
 401f93c:	e0bff903 	ldbu	r2,-28(fp)
 401f940:	108004a0 	cmpeqi	r2,r2,18
 401f944:	1000031e 	bne	r2,zero,401f954 <igmp_validate+0x280>
 401f948:	e0bff903 	ldbu	r2,-28(fp)
 401f94c:	10800598 	cmpnei	r2,r2,22
 401f950:	1000131e 	bne	r2,zero,401f9a0 <igmp_validate+0x2cc>
       (type == IGMPv2_MEMBERSHIP_REPORT))
   {
      if ((igmp->igmp_group != pip->ip_dest) ||
 401f954:	e0bffb17 	ldw	r2,-20(fp)
 401f958:	10c00117 	ldw	r3,4(r2)
 401f95c:	e0bffd17 	ldw	r2,-12(fp)
 401f960:	10800417 	ldw	r2,16(r2)
 401f964:	1880041e 	bne	r3,r2,401f978 <igmp_validate+0x2a4>
 401f968:	e0bff817 	ldw	r2,-32(fp)
 401f96c:	10fc002c 	andhi	r3,r2,61440
 401f970:	00b80034 	movhi	r2,57344
 401f974:	18800a26 	beq	r3,r2,401f9a0 <igmp_validate+0x2cc>
          (!IN_MULTICAST(mcgrp_addr)))
      {
         ++igmpstats.igmp_bad_reports_rcvd;
 401f978:	008101b4 	movhi	r2,1030
 401f97c:	10a20c04 	addi	r2,r2,-30672
 401f980:	10800f17 	ldw	r2,60(r2)
 401f984:	10c00044 	addi	r3,r2,1
 401f988:	008101b4 	movhi	r2,1030
 401f98c:	10a20c04 	addi	r2,r2,-30672
 401f990:	10c00f15 	stw	r3,60(r2)
         return ENP_BAD_HEADER;    
 401f994:	00bff804 	movi	r2,-32
 401f998:	e0bfff15 	stw	r2,-4(fp)
 401f99c:	00001e06 	br	401fa18 <igmp_validate+0x344>

    * Version 1 Host Membership Reports and Version 1 Host Membership Query
    * packets will not be checked for the IP Router Alert option.
    */
#ifdef IGMP_V2    
   if ((type == IGMPv2_LEAVE_GROUP) || 
 401f9a0:	e0bff903 	ldbu	r2,-28(fp)
 401f9a4:	108005e0 	cmpeqi	r2,r2,23
 401f9a8:	10000b1e 	bne	r2,zero,401f9d8 <igmp_validate+0x304>
 401f9ac:	e0bff903 	ldbu	r2,-28(fp)
 401f9b0:	108005a0 	cmpeqi	r2,r2,22
 401f9b4:	1000081e 	bne	r2,zero,401f9d8 <igmp_validate+0x304>
 401f9b8:	e0bff903 	ldbu	r2,-28(fp)
 401f9bc:	10800458 	cmpnei	r2,r2,17
 401f9c0:	1000141e 	bne	r2,zero,401fa14 <igmp_validate+0x340>
 401f9c4:	e0bffb17 	ldw	r2,-20(fp)
 401f9c8:	10800043 	ldbu	r2,1(r2)
 401f9cc:	10803fcc 	andi	r2,r2,255
 401f9d0:	1005003a 	cmpeq	r2,r2,zero
 401f9d4:	10000f1e 	bne	r2,zero,401fa14 <igmp_validate+0x340>
       (type == IGMPv2_MEMBERSHIP_REPORT) ||
       ((type == IGMP_HOST_MEMBERSHIP_QUERY) && (igmp->igmp_code > 0)))
       
   {
      if (!igmpv2_chk4_rtr_alert_opt (pip))
 401f9d8:	e13ffd17 	ldw	r4,-12(fp)
 401f9dc:	403ff140 	call	403ff14 <igmpv2_chk4_rtr_alert_opt>
 401f9e0:	10803fcc 	andi	r2,r2,255
 401f9e4:	1004c03a 	cmpne	r2,r2,zero
 401f9e8:	10000a1e 	bne	r2,zero,401fa14 <igmp_validate+0x340>
      { 
         ++igmpstats.igmpv2mode_v2_rtr_alert_missing;
 401f9ec:	008101b4 	movhi	r2,1030
 401f9f0:	10a20c04 	addi	r2,r2,-30672
 401f9f4:	10801417 	ldw	r2,80(r2)
 401f9f8:	10c00044 	addi	r3,r2,1
 401f9fc:	008101b4 	movhi	r2,1030
 401fa00:	10a20c04 	addi	r2,r2,-30672
 401fa04:	10c01415 	stw	r3,80(r2)
         return ENP_BAD_HEADER;
 401fa08:	00bff804 	movi	r2,-32
 401fa0c:	e0bfff15 	stw	r2,-4(fp)
 401fa10:	00000106 	br	401fa18 <igmp_validate+0x344>
      }
   }
#endif   

   /* validation successful */
   return IGMP_OK;
 401fa14:	e03fff15 	stw	zero,-4(fp)
 401fa18:	e0bfff17 	ldw	r2,-4(fp)
}
 401fa1c:	e037883a 	mov	sp,fp
 401fa20:	dfc00117 	ldw	ra,4(sp)
 401fa24:	df000017 	ldw	fp,0(sp)
 401fa28:	dec00204 	addi	sp,sp,8
 401fa2c:	f800283a 	ret

0401fa30 <igmp_print_stats>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */
   
int igmp_print_stats (void * pio)
{  
 401fa30:	defff504 	addi	sp,sp,-44
 401fa34:	dfc00a15 	stw	ra,40(sp)
 401fa38:	df000915 	stw	fp,36(sp)
 401fa3c:	df000904 	addi	fp,sp,36
 401fa40:	e13ffa15 	stw	r4,-24(fp)
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401fa44:	008101b4 	movhi	r2,1030
 401fa48:	10a44904 	addi	r2,r2,-28380
 401fa4c:	10800017 	ldw	r2,0(r2)
 401fa50:	e0bff915 	stw	r2,-28(fp)
 401fa54:	00004506 	br	401fb6c <igmp_print_stats+0x13c>
   {
      ns_printf (pio, "%s: mode: %u [%s] ", 
 401fa58:	e0bff917 	ldw	r2,-28(fp)
 401fa5c:	10800104 	addi	r2,r2,4
 401fa60:	e0bfff15 	stw	r2,-4(fp)
 401fa64:	e0bff917 	ldw	r2,-28(fp)
 401fa68:	10802f03 	ldbu	r2,188(r2)
 401fa6c:	10803fcc 	andi	r2,r2,255
 401fa70:	e0bffe15 	stw	r2,-8(fp)
 401fa74:	e0bff917 	ldw	r2,-28(fp)
 401fa78:	10802f03 	ldbu	r2,188(r2)
 401fa7c:	10803fcc 	andi	r2,r2,255
 401fa80:	10800058 	cmpnei	r2,r2,1
 401fa84:	1000041e 	bne	r2,zero,401fa98 <igmp_print_stats+0x68>
 401fa88:	00810174 	movhi	r2,1029
 401fa8c:	10aaf504 	addi	r2,r2,-21548
 401fa90:	e0bffd15 	stw	r2,-12(fp)
 401fa94:	00000306 	br	401faa4 <igmp_print_stats+0x74>
 401fa98:	00810174 	movhi	r2,1029
 401fa9c:	10aaf604 	addi	r2,r2,-21544
 401faa0:	e0bffd15 	stw	r2,-12(fp)
 401faa4:	e0bffd17 	ldw	r2,-12(fp)
 401faa8:	d8800015 	stw	r2,0(sp)
 401faac:	e13ffa17 	ldw	r4,-24(fp)
 401fab0:	01410174 	movhi	r5,1029
 401fab4:	296af704 	addi	r5,r5,-21540
 401fab8:	e1bfff17 	ldw	r6,-4(fp)
 401fabc:	e1fffe17 	ldw	r7,-8(fp)
 401fac0:	40210380 	call	4021038 <ns_printf>
                 ifp->name, 
                 ifp->igmp_oper_mode, 
                 ((ifp->igmp_oper_mode == IGMP_MODE_V1)? "v1":"v2"));
      /* if a link has been configured for IGMPv2, display the status
       * of the v1 router-related variables too */
      if (ifp->igmp_oper_mode == IGMP_MODE_V2)
 401fac4:	e0bff917 	ldw	r2,-28(fp)
 401fac8:	10802f03 	ldbu	r2,188(r2)
 401facc:	10803fcc 	andi	r2,r2,255
 401fad0:	10800098 	cmpnei	r2,r2,2
 401fad4:	10001e1e 	bne	r2,zero,401fb50 <igmp_print_stats+0x120>
      {           
         ns_printf (pio, "v1 rtr: %u [%s] v1 last query: %x [now %x]\n",
 401fad8:	e0bff917 	ldw	r2,-28(fp)
 401fadc:	10802d03 	ldbu	r2,180(r2)
 401fae0:	10803fcc 	andi	r2,r2,255
 401fae4:	e0bffc15 	stw	r2,-16(fp)
 401fae8:	e0bff917 	ldw	r2,-28(fp)
 401faec:	10802d03 	ldbu	r2,180(r2)
 401faf0:	10803fcc 	andi	r2,r2,255
 401faf4:	10800058 	cmpnei	r2,r2,1
 401faf8:	1000041e 	bne	r2,zero,401fb0c <igmp_print_stats+0xdc>
 401fafc:	00810174 	movhi	r2,1029
 401fb00:	10aafc04 	addi	r2,r2,-21520
 401fb04:	e0bffb15 	stw	r2,-20(fp)
 401fb08:	00000306 	br	401fb18 <igmp_print_stats+0xe8>
 401fb0c:	00810174 	movhi	r2,1029
 401fb10:	10aafe04 	addi	r2,r2,-21512
 401fb14:	e0bffb15 	stw	r2,-20(fp)
 401fb18:	e0bff917 	ldw	r2,-28(fp)
 401fb1c:	10c02e17 	ldw	r3,184(r2)
 401fb20:	00810174 	movhi	r2,1029
 401fb24:	1081e404 	addi	r2,r2,1936
 401fb28:	10800017 	ldw	r2,0(r2)
 401fb2c:	d8c00015 	stw	r3,0(sp)
 401fb30:	d8800115 	stw	r2,4(sp)
 401fb34:	e13ffa17 	ldw	r4,-24(fp)
 401fb38:	01410174 	movhi	r5,1029
 401fb3c:	296b0004 	addi	r5,r5,-21504
 401fb40:	e1bffc17 	ldw	r6,-16(fp)
 401fb44:	e1fffb17 	ldw	r7,-20(fp)
 401fb48:	40210380 	call	4021038 <ns_printf>
 401fb4c:	00000406 	br	401fb60 <igmp_print_stats+0x130>
                    ifp->igmpv1_rtr_present,
                    ((ifp->igmpv1_rtr_present == IGMP_TRUE)? "present" : "absent"),
                    ifp->igmpv1_query_rcvd_time,
                    cticks);
      }
      else ns_printf (pio, "\n");
 401fb50:	e13ffa17 	ldw	r4,-24(fp)
 401fb54:	01410174 	movhi	r5,1029
 401fb58:	296b0b04 	addi	r5,r5,-21460
 401fb5c:	40210380 	call	4021038 <ns_printf>
   
int igmp_print_stats (void * pio)
{  
   NET ifp;
  
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 401fb60:	e0bff917 	ldw	r2,-28(fp)
 401fb64:	10800017 	ldw	r2,0(r2)
 401fb68:	e0bff915 	stw	r2,-28(fp)
 401fb6c:	e0bff917 	ldw	r2,-28(fp)
 401fb70:	1004c03a 	cmpne	r2,r2,zero
 401fb74:	103fb81e 	bne	r2,zero,401fa58 <igmp_print_stats+0x28>
      }
      else ns_printf (pio, "\n");
   }   

   /* rx and timer statistics */
   ns_printf (pio, "[Rx ] IGMP messages rcvd: %lu, timers running: %lu\n", igmpstats.igmp_total_rcvd, igmp_timers_are_running);
 401fb78:	008101b4 	movhi	r2,1030
 401fb7c:	10a20c04 	addi	r2,r2,-30672
 401fb80:	11800017 	ldw	r6,0(r2)
 401fb84:	d1e80417 	ldw	r7,-24560(gp)
 401fb88:	e13ffa17 	ldw	r4,-24(fp)
 401fb8c:	01410174 	movhi	r5,1029
 401fb90:	296b0c04 	addi	r5,r5,-21456
 401fb94:	40210380 	call	4021038 <ns_printf>
   
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v1-mode links): %lu\n", igmpstats.igmpv1mode_v1_queries_rcvd);
 401fb98:	008101b4 	movhi	r2,1030
 401fb9c:	10a20c04 	addi	r2,r2,-30672
 401fba0:	11800117 	ldw	r6,4(r2)
 401fba4:	e13ffa17 	ldw	r4,-24(fp)
 401fba8:	01410174 	movhi	r5,1029
 401fbac:	296b1904 	addi	r5,r5,-21404
 401fbb0:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Reports rcvd: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd);
 401fbb4:	008101b4 	movhi	r2,1030
 401fbb8:	10a20c04 	addi	r2,r2,-30672
 401fbbc:	11800217 	ldw	r6,8(r2)
 401fbc0:	e13ffa17 	ldw	r4,-24(fp)
 401fbc4:	01410174 	movhi	r5,1029
 401fbc8:	296b2a04 	addi	r5,r5,-21336
 401fbcc:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer);
 401fbd0:	008101b4 	movhi	r2,1030
 401fbd4:	10a20c04 	addi	r2,r2,-30672
 401fbd8:	11800317 	ldw	r6,12(r2)
 401fbdc:	e13ffa17 	ldw	r4,-24(fp)
 401fbe0:	01410174 	movhi	r5,1029
 401fbe4:	296b3604 	addi	r5,r5,-21288
 401fbe8:	40210380 	call	4021038 <ns_printf>
      
   ns_printf (pio, "[Rx ] IGMPv1 Host Membership Queries rcvd (by v2-mode links): %lu\n", igmpstats.igmpv2mode_v1_queries_rcvd);
 401fbec:	008101b4 	movhi	r2,1030
 401fbf0:	10a20c04 	addi	r2,r2,-30672
 401fbf4:	11800417 	ldw	r6,16(r2)
 401fbf8:	e13ffa17 	ldw	r4,-24(fp)
 401fbfc:	01410174 	movhi	r5,1029
 401fc00:	296b4904 	addi	r5,r5,-21212
 401fc04:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 General Queries rcvd: %lu, Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_general_queries_rcvd, igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd);
 401fc08:	008101b4 	movhi	r2,1030
 401fc0c:	10a20c04 	addi	r2,r2,-30672
 401fc10:	11800517 	ldw	r6,20(r2)
 401fc14:	008101b4 	movhi	r2,1030
 401fc18:	10a20c04 	addi	r2,r2,-30672
 401fc1c:	11c00617 	ldw	r7,24(r2)
 401fc20:	e13ffa17 	ldw	r4,-24(fp)
 401fc24:	01410174 	movhi	r5,1029
 401fc28:	296b5a04 	addi	r5,r5,-21144
 401fc2c:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd causing timer cancellation: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer);   
 401fc30:	008101b4 	movhi	r2,1030
 401fc34:	10a20c04 	addi	r2,r2,-30672
 401fc38:	11800717 	ldw	r6,28(r2)
 401fc3c:	e13ffa17 	ldw	r4,-24(fp)
 401fc40:	01410174 	movhi	r5,1029
 401fc44:	296b3604 	addi	r5,r5,-21288
 401fc48:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Rx ] IGMP Host Membership Reports rcvd with no local timer: %lu\n", igmpstats.igmpv2mode_v12_reports_rcvd_no_timer);
 401fc4c:	008101b4 	movhi	r2,1030
 401fc50:	10a20c04 	addi	r2,r2,-30672
 401fc54:	11800817 	ldw	r6,32(r2)
 401fc58:	e13ffa17 	ldw	r4,-24(fp)
 401fc5c:	01410174 	movhi	r5,1029
 401fc60:	296b6d04 	addi	r5,r5,-21068
 401fc64:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Rx ] IGMPv2 Leave Group messages rcvd: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_rcvd);
 401fc68:	008101b4 	movhi	r2,1030
 401fc6c:	10a20c04 	addi	r2,r2,-30672
 401fc70:	11800917 	ldw	r6,36(r2)
 401fc74:	e13ffa17 	ldw	r4,-24(fp)
 401fc78:	01410174 	movhi	r5,1029
 401fc7c:	296b7e04 	addi	r5,r5,-21000
 401fc80:	40210380 	call	4021038 <ns_printf>
   
   /* tx statistics */
   ns_printf (pio, "[Tx ] IGMPv2 Leave Group messages sent: %lu, Membership Reports sent: %lu\n", igmpstats.igmpv2mode_v2_leave_msgs_sent, igmpstats.igmpv2mode_v2_reports_sent);
 401fc84:	008101b4 	movhi	r2,1030
 401fc88:	10a20c04 	addi	r2,r2,-30672
 401fc8c:	11801717 	ldw	r6,92(r2)
 401fc90:	008101b4 	movhi	r2,1030
 401fc94:	10a20c04 	addi	r2,r2,-30672
 401fc98:	11c01817 	ldw	r7,96(r2)
 401fc9c:	e13ffa17 	ldw	r4,-24(fp)
 401fca0:	01410174 	movhi	r5,1029
 401fca4:	296b8a04 	addi	r5,r5,-20952
 401fca8:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Tx ] IGMPv1 Host Membership Reports sent: %lu\n", igmpstats.igmp_v1_reports_sent);
 401fcac:	008101b4 	movhi	r2,1030
 401fcb0:	10a20c04 	addi	r2,r2,-30672
 401fcb4:	11801617 	ldw	r6,88(r2)
 401fcb8:	e13ffa17 	ldw	r4,-24(fp)
 401fcbc:	01410174 	movhi	r5,1029
 401fcc0:	296b9d04 	addi	r5,r5,-20876
 401fcc4:	40210380 	call	4021038 <ns_printf>

   /* error statistics */
   ns_printf (pio, "[Err] IGMP packets rcvd with bad length: %lu\n", igmpstats.igmp_badlen_rcvd);
 401fcc8:	008101b4 	movhi	r2,1030
 401fccc:	10a20c04 	addi	r2,r2,-30672
 401fcd0:	11800a17 	ldw	r6,40(r2)
 401fcd4:	e13ffa17 	ldw	r4,-24(fp)
 401fcd8:	01410174 	movhi	r5,1029
 401fcdc:	296ba904 	addi	r5,r5,-20828
 401fce0:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets rcvd with bad checksum: %lu\n", igmpstats.igmp_badsum_rcvd);
 401fce4:	008101b4 	movhi	r2,1030
 401fce8:	10a20c04 	addi	r2,r2,-30672
 401fcec:	11800b17 	ldw	r6,44(r2)
 401fcf0:	e13ffa17 	ldw	r4,-24(fp)
 401fcf4:	01410174 	movhi	r5,1029
 401fcf8:	296bb504 	addi	r5,r5,-20780
 401fcfc:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] Packet buffer allocation failures: %lu, Bad IGMP Oper Mode config: %lu\n",igmpstats.igmp_pkt_alloc_fail, igmpstats.igmp_bad_oper_mode);
 401fd00:	008101b4 	movhi	r2,1030
 401fd04:	10a20c04 	addi	r2,r2,-30672
 401fd08:	11800c17 	ldw	r6,48(r2)
 401fd0c:	008101b4 	movhi	r2,1030
 401fd10:	10a20c04 	addi	r2,r2,-30672
 401fd14:	11c00d17 	ldw	r7,52(r2)
 401fd18:	e13ffa17 	ldw	r4,-24(fp)
 401fd1c:	01410174 	movhi	r5,1029
 401fd20:	296bc104 	addi	r5,r5,-20732
 401fd24:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMP Queries rcvd: %lu, Bad IGMP Reports rcvd: %lu\n", igmpstats.igmp_bad_queries_rcvd, igmpstats.igmp_bad_reports_rcvd); 
 401fd28:	008101b4 	movhi	r2,1030
 401fd2c:	10a20c04 	addi	r2,r2,-30672
 401fd30:	11800e17 	ldw	r6,56(r2)
 401fd34:	008101b4 	movhi	r2,1030
 401fd38:	10a20c04 	addi	r2,r2,-30672
 401fd3c:	11c00f17 	ldw	r7,60(r2)
 401fd40:	e13ffa17 	ldw	r4,-24(fp)
 401fd44:	01410174 	movhi	r5,1029
 401fd48:	296bd504 	addi	r5,r5,-20652
 401fd4c:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] Bad IGMPv2 Group-Specific Queries rcvd: %lu\n", igmpstats.igmpv2mode_v2_bad_grp_specific_queries_rcvd);
 401fd50:	008101b4 	movhi	r2,1030
 401fd54:	10a20c04 	addi	r2,r2,-30672
 401fd58:	11801117 	ldw	r6,68(r2)
 401fd5c:	e13ffa17 	ldw	r4,-24(fp)
 401fd60:	01410174 	movhi	r5,1029
 401fd64:	296be504 	addi	r5,r5,-20588
 401fd68:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] IGMPv2 Group-Specific Queries rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd);
 401fd6c:	008101b4 	movhi	r2,1030
 401fd70:	10a20c04 	addi	r2,r2,-30672
 401fd74:	11801217 	ldw	r6,72(r2)
 401fd78:	e13ffa17 	ldw	r4,-24(fp)
 401fd7c:	01410174 	movhi	r5,1029
 401fd80:	296bf204 	addi	r5,r5,-20536
 401fd84:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] IGMP Membership Reports rcvd with unknown Group Address: %lu\n", igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd);
 401fd88:	008101b4 	movhi	r2,1030
 401fd8c:	10a20c04 	addi	r2,r2,-30672
 401fd90:	11801317 	ldw	r6,76(r2)
 401fd94:	e13ffa17 	ldw	r4,-24(fp)
 401fd98:	01410174 	movhi	r5,1029
 401fd9c:	296c0504 	addi	r5,r5,-20460
 401fda0:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] Number of IGMPv2 messages rcvd without Router Alert option: %lu\n", igmpstats.igmpv2mode_v2_rtr_alert_missing); 
 401fda4:	008101b4 	movhi	r2,1030
 401fda8:	10a20c04 	addi	r2,r2,-30672
 401fdac:	11801417 	ldw	r6,80(r2)
 401fdb0:	e13ffa17 	ldw	r4,-24(fp)
 401fdb4:	01410174 	movhi	r5,1029
 401fdb8:	296c1604 	addi	r5,r5,-20392
 401fdbc:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v1-mode links: %lu\n", igmpstats.igmpv1mode_unknown_pkttype);
 401fdc0:	008101b4 	movhi	r2,1030
 401fdc4:	10a20c04 	addi	r2,r2,-30672
 401fdc8:	11801017 	ldw	r6,64(r2)
 401fdcc:	e13ffa17 	ldw	r4,-24(fp)
 401fdd0:	01410174 	movhi	r5,1029
 401fdd4:	296c2804 	addi	r5,r5,-20320
 401fdd8:	40210380 	call	4021038 <ns_printf>
   ns_printf (pio, "[Err] IGMP packets of unknown type rcvd by v2-mode links: %lu\n", igmpstats.igmpv2mode_unknown_pkttype);
 401fddc:	008101b4 	movhi	r2,1030
 401fde0:	10a20c04 	addi	r2,r2,-30672
 401fde4:	11801517 	ldw	r6,84(r2)
 401fde8:	e13ffa17 	ldw	r4,-24(fp)
 401fdec:	01410174 	movhi	r5,1029
 401fdf0:	296c3804 	addi	r5,r5,-20256
 401fdf4:	40210380 	call	4021038 <ns_printf>
   
   return IGMP_OK;
 401fdf8:	0005883a 	mov	r2,zero
}
 401fdfc:	e037883a 	mov	sp,fp
 401fe00:	dfc00117 	ldw	ra,4(sp)
 401fe04:	df000017 	ldw	fp,0(sp)
 401fe08:	dec00204 	addi	sp,sp,8
 401fe0c:	f800283a 	ret

0401fe10 <bsd_accept>:
 *          The error is available via bsd_errno(s).
 */
BSD_SOCKET
bsd_accept(BSD_SOCKET s,
           struct sockaddr * addr, int * addrlen)
{
 401fe10:	defff304 	addi	sp,sp,-52
 401fe14:	dfc00c15 	stw	ra,48(sp)
 401fe18:	df000b15 	stw	fp,44(sp)
 401fe1c:	df000b04 	addi	fp,sp,44
 401fe20:	e13ffc15 	stw	r4,-16(fp)
 401fe24:	e17ffd15 	stw	r5,-12(fp)
 401fe28:	e1bffe15 	stw	r6,-8(fp)
   struct socket * so;
   struct sockaddr laddr;
   long lret;

   so = LONG2SO(s);
 401fe2c:	e0bffc17 	ldw	r2,-16(fp)
 401fe30:	10bff804 	addi	r2,r2,-32
 401fe34:	1085883a 	add	r2,r2,r2
 401fe38:	1085883a 	add	r2,r2,r2
 401fe3c:	e0bff715 	stw	r2,-36(fp)
   SOC_CHECK(so);
 401fe40:	008101b4 	movhi	r2,1030
 401fe44:	10a34504 	addi	r2,r2,-29420
 401fe48:	e0bff515 	stw	r2,-44(fp)
 401fe4c:	00000606 	br	401fe68 <bsd_accept+0x58>
 401fe50:	e0fff517 	ldw	r3,-44(fp)
 401fe54:	e0bff717 	ldw	r2,-36(fp)
 401fe58:	18800626 	beq	r3,r2,401fe74 <bsd_accept+0x64>
 401fe5c:	e0bff517 	ldw	r2,-44(fp)
 401fe60:	10800017 	ldw	r2,0(r2)
 401fe64:	e0bff515 	stw	r2,-44(fp)
 401fe68:	e0bff517 	ldw	r2,-44(fp)
 401fe6c:	1004c03a 	cmpne	r2,r2,zero
 401fe70:	103ff71e 	bne	r2,zero,401fe50 <bsd_accept+0x40>
 401fe74:	e0fff517 	ldw	r3,-44(fp)
 401fe78:	e0bff717 	ldw	r2,-36(fp)
 401fe7c:	18800426 	beq	r3,r2,401fe90 <bsd_accept+0x80>
 401fe80:	4025bb40 	call	4025bb4 <dtrap>
 401fe84:	00bfffc4 	movi	r2,-1
 401fe88:	e0bfff15 	stw	r2,-4(fp)
 401fe8c:	00002806 	br	401ff30 <bsd_accept+0x120>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (addr != NULL)
 401fe90:	e0bffd17 	ldw	r2,-12(fp)
 401fe94:	1005003a 	cmpeq	r2,r2,zero
 401fe98:	1000091e 	bne	r2,zero,401fec0 <bsd_accept+0xb0>
   {
      if (addrlen == 0)
 401fe9c:	e0bffe17 	ldw	r2,-8(fp)
 401fea0:	1004c03a 	cmpne	r2,r2,zero
 401fea4:	1000061e 	bne	r2,zero,401fec0 <bsd_accept+0xb0>
      {
         so->so_error = EFAULT;
 401fea8:	e0fff717 	ldw	r3,-36(fp)
 401feac:	00800384 	movi	r2,14
 401feb0:	18800615 	stw	r2,24(r3)
         return -1;
 401feb4:	00bfffc4 	movi	r2,-1
 401feb8:	e0bfff15 	stw	r2,-4(fp)
 401febc:	00001c06 	br	401ff30 <bsd_accept+0x120>
      }
   }

   lret = t_accept(s, &laddr, addrlen);
 401fec0:	e17ff804 	addi	r5,fp,-32
 401fec4:	e13ffc17 	ldw	r4,-16(fp)
 401fec8:	e1bffe17 	ldw	r6,-8(fp)
 401fecc:	4028f280 	call	4028f28 <t_accept>
 401fed0:	e0bff615 	stw	r2,-40(fp)
    * address: copy the peer's address back into the buffer, but limit
    * the copy to the lesser of the buffer's length and sizeof(struct
    * sockaddr_in), which is all that t_accept() can return as a peer
    * address.  
    */
   if ((lret != -1) && (addr != NULL))
 401fed4:	e0bff617 	ldw	r2,-40(fp)
 401fed8:	10bfffe0 	cmpeqi	r2,r2,-1
 401fedc:	1000121e 	bne	r2,zero,401ff28 <bsd_accept+0x118>
 401fee0:	e0bffd17 	ldw	r2,-12(fp)
 401fee4:	1005003a 	cmpeq	r2,r2,zero
 401fee8:	10000f1e 	bne	r2,zero,401ff28 <bsd_accept+0x118>
   {
      if (*addrlen > sizeof(struct sockaddr_in))
 401feec:	e0bffe17 	ldw	r2,-8(fp)
 401fef0:	10800017 	ldw	r2,0(r2)
 401fef4:	10800470 	cmpltui	r2,r2,17
 401fef8:	1000031e 	bne	r2,zero,401ff08 <bsd_accept+0xf8>
         *addrlen = sizeof(struct sockaddr_in);
 401fefc:	e0fffe17 	ldw	r3,-8(fp)
 401ff00:	00800404 	movi	r2,16
 401ff04:	18800015 	stw	r2,0(r3)
      MEMCPY(addr, &laddr, *addrlen);
 401ff08:	e0bffe17 	ldw	r2,-8(fp)
 401ff0c:	10800017 	ldw	r2,0(r2)
 401ff10:	100d883a 	mov	r6,r2
 401ff14:	e0bffd17 	ldw	r2,-12(fp)
 401ff18:	e0fff804 	addi	r3,fp,-32
 401ff1c:	1009883a 	mov	r4,r2
 401ff20:	180b883a 	mov	r5,r3
 401ff24:	4001de40 	call	4001de4 <memcpy>
   }

   return lret;
 401ff28:	e0bff617 	ldw	r2,-40(fp)
 401ff2c:	e0bfff15 	stw	r2,-4(fp)
 401ff30:	e0bfff17 	ldw	r2,-4(fp)
}
 401ff34:	e037883a 	mov	sp,fp
 401ff38:	dfc00117 	ldw	ra,4(sp)
 401ff3c:	df000017 	ldw	fp,0(sp)
 401ff40:	dec00204 	addi	sp,sp,8
 401ff44:	f800283a 	ret

0401ff48 <bsd_getpeername>:
 *          available via bsd_errno(s).
 */
int
bsd_getpeername(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 401ff48:	defff204 	addi	sp,sp,-56
 401ff4c:	dfc00d15 	stw	ra,52(sp)
 401ff50:	df000c15 	stw	fp,48(sp)
 401ff54:	df000c04 	addi	fp,sp,48
 401ff58:	e13ffc15 	stw	r4,-16(fp)
 401ff5c:	e17ffd15 	stw	r5,-12(fp)
 401ff60:	e1bffe15 	stw	r6,-8(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 401ff64:	e0bffc17 	ldw	r2,-16(fp)
 401ff68:	10bff804 	addi	r2,r2,-32
 401ff6c:	1085883a 	add	r2,r2,r2
 401ff70:	1085883a 	add	r2,r2,r2
 401ff74:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
 401ff78:	008101b4 	movhi	r2,1030
 401ff7c:	10a34504 	addi	r2,r2,-29420
 401ff80:	e0bff415 	stw	r2,-48(fp)
 401ff84:	00000606 	br	401ffa0 <bsd_getpeername+0x58>
 401ff88:	e0fff417 	ldw	r3,-48(fp)
 401ff8c:	e0bff617 	ldw	r2,-40(fp)
 401ff90:	18800626 	beq	r3,r2,401ffac <bsd_getpeername+0x64>
 401ff94:	e0bff417 	ldw	r2,-48(fp)
 401ff98:	10800017 	ldw	r2,0(r2)
 401ff9c:	e0bff415 	stw	r2,-48(fp)
 401ffa0:	e0bff417 	ldw	r2,-48(fp)
 401ffa4:	1004c03a 	cmpne	r2,r2,zero
 401ffa8:	103ff71e 	bne	r2,zero,401ff88 <bsd_getpeername+0x40>
 401ffac:	e0fff417 	ldw	r3,-48(fp)
 401ffb0:	e0bff617 	ldw	r2,-40(fp)
 401ffb4:	18800426 	beq	r3,r2,401ffc8 <bsd_getpeername+0x80>
 401ffb8:	4025bb40 	call	4025bb4 <dtrap>
 401ffbc:	00bfffc4 	movi	r2,-1
 401ffc0:	e0bfff15 	stw	r2,-4(fp)
 401ffc4:	00002506 	br	402005c <bsd_getpeername+0x114>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 401ffc8:	e0bffe17 	ldw	r2,-8(fp)
 401ffcc:	1004c03a 	cmpne	r2,r2,zero
 401ffd0:	1000061e 	bne	r2,zero,401ffec <bsd_getpeername+0xa4>
   {
      so->so_error = EFAULT;
 401ffd4:	e0fff617 	ldw	r3,-40(fp)
 401ffd8:	00800384 	movi	r2,14
 401ffdc:	18800615 	stw	r2,24(r3)
      return -1;
 401ffe0:	00bfffc4 	movi	r2,-1
 401ffe4:	e0bfff15 	stw	r2,-4(fp)
 401ffe8:	00001c06 	br	402005c <bsd_getpeername+0x114>
   }
   lnamelen = *namelen;
 401ffec:	e0bffe17 	ldw	r2,-8(fp)
 401fff0:	10800017 	ldw	r2,0(r2)
 401fff4:	e0bffb15 	stw	r2,-20(fp)

   lret = t_getpeername(s, &lname, &lnamelen);
 401fff8:	e17ff704 	addi	r5,fp,-36
 401fffc:	e1bffb04 	addi	r6,fp,-20
 4020000:	e13ffc17 	ldw	r4,-16(fp)
 4020004:	40294680 	call	4029468 <t_getpeername>
 4020008:	e0bff515 	stw	r2,-44(fp)
    * t_getpeername() can return as a peer address, and pass the
    * copied length back to the caller.  
    * For IPV6 addresses, or for dual IPV4/IPV6 stack, 
    * the max size is sizeof(struct sockaddr_in6)
    */
   if (lret != -1)
 402000c:	e0bff517 	ldw	r2,-44(fp)
 4020010:	10bfffe0 	cmpeqi	r2,r2,-1
 4020014:	10000f1e 	bne	r2,zero,4020054 <bsd_getpeername+0x10c>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 4020018:	e0bffb17 	ldw	r2,-20(fp)
 402001c:	10800470 	cmpltui	r2,r2,17
 4020020:	1000021e 	bne	r2,zero,402002c <bsd_getpeername+0xe4>
         lnamelen = sizeof(struct sockaddr_in);
 4020024:	00800404 	movi	r2,16
 4020028:	e0bffb15 	stw	r2,-20(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(name, &lname, lnamelen);
 402002c:	e0bffb17 	ldw	r2,-20(fp)
 4020030:	100d883a 	mov	r6,r2
 4020034:	e0bffd17 	ldw	r2,-12(fp)
 4020038:	e0fff704 	addi	r3,fp,-36
 402003c:	1009883a 	mov	r4,r2
 4020040:	180b883a 	mov	r5,r3
 4020044:	4001de40 	call	4001de4 <memcpy>
      *namelen = lnamelen;
 4020048:	e0fffb17 	ldw	r3,-20(fp)
 402004c:	e0bffe17 	ldw	r2,-8(fp)
 4020050:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 4020054:	e0bff517 	ldw	r2,-44(fp)
 4020058:	e0bfff15 	stw	r2,-4(fp)
 402005c:	e0bfff17 	ldw	r2,-4(fp)
}
 4020060:	e037883a 	mov	sp,fp
 4020064:	dfc00117 	ldw	ra,4(sp)
 4020068:	df000017 	ldw	fp,0(sp)
 402006c:	dec00204 	addi	sp,sp,8
 4020070:	f800283a 	ret

04020074 <bsd_getsockname>:
 *          available via bsd_errno(s).
 */
int
bsd_getsockname(BSD_SOCKET s,
                struct sockaddr * name, int * namelen)
{
 4020074:	defff204 	addi	sp,sp,-56
 4020078:	dfc00d15 	stw	ra,52(sp)
 402007c:	df000c15 	stw	fp,48(sp)
 4020080:	df000c04 	addi	fp,sp,48
 4020084:	e13ffc15 	stw	r4,-16(fp)
 4020088:	e17ffd15 	stw	r5,-12(fp)
 402008c:	e1bffe15 	stw	r6,-8(fp)
   struct socket * so;
   struct sockaddr lname;
   int lnamelen;
   int lret;

   so = LONG2SO(s);
 4020090:	e0bffc17 	ldw	r2,-16(fp)
 4020094:	10bff804 	addi	r2,r2,-32
 4020098:	1085883a 	add	r2,r2,r2
 402009c:	1085883a 	add	r2,r2,r2
 40200a0:	e0bff615 	stw	r2,-40(fp)
   SOC_CHECK(so);
 40200a4:	008101b4 	movhi	r2,1030
 40200a8:	10a34504 	addi	r2,r2,-29420
 40200ac:	e0bff415 	stw	r2,-48(fp)
 40200b0:	00000606 	br	40200cc <bsd_getsockname+0x58>
 40200b4:	e0fff417 	ldw	r3,-48(fp)
 40200b8:	e0bff617 	ldw	r2,-40(fp)
 40200bc:	18800626 	beq	r3,r2,40200d8 <bsd_getsockname+0x64>
 40200c0:	e0bff417 	ldw	r2,-48(fp)
 40200c4:	10800017 	ldw	r2,0(r2)
 40200c8:	e0bff415 	stw	r2,-48(fp)
 40200cc:	e0bff417 	ldw	r2,-48(fp)
 40200d0:	1004c03a 	cmpne	r2,r2,zero
 40200d4:	103ff71e 	bne	r2,zero,40200b4 <bsd_getsockname+0x40>
 40200d8:	e0fff417 	ldw	r3,-48(fp)
 40200dc:	e0bff617 	ldw	r2,-40(fp)
 40200e0:	18800426 	beq	r3,r2,40200f4 <bsd_getsockname+0x80>
 40200e4:	4025bb40 	call	4025bb4 <dtrap>
 40200e8:	00bfffc4 	movi	r2,-1
 40200ec:	e0bfff15 	stw	r2,-4(fp)
 40200f0:	00002506 	br	4020188 <bsd_getsockname+0x114>

   /* if the buffer length is bogus, fail */
   if (namelen == NULL)
 40200f4:	e0bffe17 	ldw	r2,-8(fp)
 40200f8:	1004c03a 	cmpne	r2,r2,zero
 40200fc:	1000061e 	bne	r2,zero,4020118 <bsd_getsockname+0xa4>
   {
      so->so_error = EFAULT;
 4020100:	e0fff617 	ldw	r3,-40(fp)
 4020104:	00800384 	movi	r2,14
 4020108:	18800615 	stw	r2,24(r3)
      return -1;
 402010c:	00bfffc4 	movi	r2,-1
 4020110:	e0bfff15 	stw	r2,-4(fp)
 4020114:	00001c06 	br	4020188 <bsd_getsockname+0x114>
   }
   lnamelen = *namelen;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
 402011c:	10800017 	ldw	r2,0(r2)
 4020120:	e0bffb15 	stw	r2,-20(fp)

   lret = t_getsockname(s, &lname, &lnamelen);
 4020124:	e17ff704 	addi	r5,fp,-36
 4020128:	e1bffb04 	addi	r6,fp,-20
 402012c:	e13ffc17 	ldw	r4,-16(fp)
 4020130:	40294ac0 	call	40294ac <t_getsockname>
 4020134:	e0bff515 	stw	r2,-44(fp)
    * copied length back to the caller.  
    * For IPV6 addresses, or for a dual IPV4/IPV6 stack, 
    * the max size copied is sizeof(struct sockaddr_in6)
    *
    */
   if (lret != -1)
 4020138:	e0bff517 	ldw	r2,-44(fp)
 402013c:	10bfffe0 	cmpeqi	r2,r2,-1
 4020140:	10000f1e 	bne	r2,zero,4020180 <bsd_getsockname+0x10c>
   {
#ifndef IP_V6
      if (lnamelen > sizeof(struct sockaddr_in))
 4020144:	e0bffb17 	ldw	r2,-20(fp)
 4020148:	10800470 	cmpltui	r2,r2,17
 402014c:	1000021e 	bne	r2,zero,4020158 <bsd_getsockname+0xe4>
         lnamelen = sizeof(struct sockaddr_in);
 4020150:	00800404 	movi	r2,16
 4020154:	e0bffb15 	stw	r2,-20(fp)
#else
      if (lnamelen > sizeof(struct sockaddr_in6))
         lnamelen = sizeof(struct sockaddr_in6);
#endif
      MEMCPY(name, &lname, lnamelen);
 4020158:	e0bffb17 	ldw	r2,-20(fp)
 402015c:	100d883a 	mov	r6,r2
 4020160:	e0bffd17 	ldw	r2,-12(fp)
 4020164:	e0fff704 	addi	r3,fp,-36
 4020168:	1009883a 	mov	r4,r2
 402016c:	180b883a 	mov	r5,r3
 4020170:	4001de40 	call	4001de4 <memcpy>
      *namelen = lnamelen;
 4020174:	e0fffb17 	ldw	r3,-20(fp)
 4020178:	e0bffe17 	ldw	r2,-8(fp)
 402017c:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 4020180:	e0bff517 	ldw	r2,-44(fp)
 4020184:	e0bfff15 	stw	r2,-4(fp)
 4020188:	e0bfff17 	ldw	r2,-4(fp)
}
 402018c:	e037883a 	mov	sp,fp
 4020190:	dfc00117 	ldw	ra,4(sp)
 4020194:	df000017 	ldw	fp,0(sp)
 4020198:	dec00204 	addi	sp,sp,8
 402019c:	f800283a 	ret

040201a0 <bsd_i_sockoptlen>:
 * RETURNS: minimum length of the named socket option, in bytes
 */
int 
bsd_i_sockoptlen(int level,
                 int name)
{
 40201a0:	defffb04 	addi	sp,sp,-20
 40201a4:	df000415 	stw	fp,16(sp)
 40201a8:	df000404 	addi	fp,sp,16
 40201ac:	e13ffc15 	stw	r4,-16(fp)
 40201b0:	e17ffd15 	stw	r5,-12(fp)
   USE_ARG(level);

   switch (name)
 40201b4:	e0bffd17 	ldw	r2,-12(fp)
 40201b8:	e0bfff15 	stw	r2,-4(fp)
 40201bc:	e0ffff17 	ldw	r3,-4(fp)
 40201c0:	18802020 	cmpeqi	r2,r3,128
 40201c4:	1000491e 	bne	r2,zero,40202ec <bsd_i_sockoptlen+0x14c>
 40201c8:	e0ffff17 	ldw	r3,-4(fp)
 40201cc:	18802048 	cmpgei	r2,r3,129
 40201d0:	1000251e 	bne	r2,zero,4020268 <bsd_i_sockoptlen+0xc8>
 40201d4:	e0ffff17 	ldw	r3,-4(fp)
 40201d8:	18800308 	cmpgei	r2,r3,12
 40201dc:	1000141e 	bne	r2,zero,4020230 <bsd_i_sockoptlen+0x90>
 40201e0:	e0ffff17 	ldw	r3,-4(fp)
 40201e4:	18800288 	cmpgei	r2,r3,10
 40201e8:	10004c1e 	bne	r2,zero,402031c <bsd_i_sockoptlen+0x17c>
 40201ec:	e0ffff17 	ldw	r3,-4(fp)
 40201f0:	18800120 	cmpeqi	r2,r3,4
 40201f4:	1000431e 	bne	r2,zero,4020304 <bsd_i_sockoptlen+0x164>
 40201f8:	e0ffff17 	ldw	r3,-4(fp)
 40201fc:	18800148 	cmpgei	r2,r3,5
 4020200:	1000041e 	bne	r2,zero,4020214 <bsd_i_sockoptlen+0x74>
 4020204:	e0ffff17 	ldw	r3,-4(fp)
 4020208:	188000e0 	cmpeqi	r2,r3,3
 402020c:	1000491e 	bne	r2,zero,4020334 <bsd_i_sockoptlen+0x194>
 4020210:	00004b06 	br	4020340 <bsd_i_sockoptlen+0x1a0>
 4020214:	e0ffff17 	ldw	r3,-4(fp)
 4020218:	18800220 	cmpeqi	r2,r3,8
 402021c:	1000391e 	bne	r2,zero,4020304 <bsd_i_sockoptlen+0x164>
 4020220:	e0ffff17 	ldw	r3,-4(fp)
 4020224:	18800260 	cmpeqi	r2,r3,9
 4020228:	1000391e 	bne	r2,zero,4020310 <bsd_i_sockoptlen+0x170>
 402022c:	00004406 	br	4020340 <bsd_i_sockoptlen+0x1a0>
 4020230:	e0ffff17 	ldw	r3,-4(fp)
 4020234:	18800420 	cmpeqi	r2,r3,16
 4020238:	1000321e 	bne	r2,zero,4020304 <bsd_i_sockoptlen+0x164>
 402023c:	e0ffff17 	ldw	r3,-4(fp)
 4020240:	18800448 	cmpgei	r2,r3,17
 4020244:	1000041e 	bne	r2,zero,4020258 <bsd_i_sockoptlen+0xb8>
 4020248:	e0ffff17 	ldw	r3,-4(fp)
 402024c:	18800388 	cmpgei	r2,r3,14
 4020250:	10003b1e 	bne	r2,zero,4020340 <bsd_i_sockoptlen+0x1a0>
 4020254:	00003406 	br	4020328 <bsd_i_sockoptlen+0x188>
 4020258:	e0ffff17 	ldw	r3,-4(fp)
 402025c:	18800820 	cmpeqi	r2,r3,32
 4020260:	1000281e 	bne	r2,zero,4020304 <bsd_i_sockoptlen+0x164>
 4020264:	00003606 	br	4020340 <bsd_i_sockoptlen+0x1a0>
 4020268:	e0ffff17 	ldw	r3,-4(fp)
 402026c:	188401c8 	cmpgei	r2,r3,4103
 4020270:	10000e1e 	bne	r2,zero,40202ac <bsd_i_sockoptlen+0x10c>
 4020274:	e0ffff17 	ldw	r3,-4(fp)
 4020278:	18840148 	cmpgei	r2,r3,4101
 402027c:	10001e1e 	bne	r2,zero,40202f8 <bsd_i_sockoptlen+0x158>
 4020280:	e0ffff17 	ldw	r3,-4(fp)
 4020284:	18804020 	cmpeqi	r2,r3,256
 4020288:	10001e1e 	bne	r2,zero,4020304 <bsd_i_sockoptlen+0x164>
 402028c:	e0ffff17 	ldw	r3,-4(fp)
 4020290:	18804010 	cmplti	r2,r3,256
 4020294:	10002a1e 	bne	r2,zero,4020340 <bsd_i_sockoptlen+0x1a0>
 4020298:	e0ffff17 	ldw	r3,-4(fp)
 402029c:	18bbffc4 	addi	r2,r3,-4097
 40202a0:	108000a8 	cmpgeui	r2,r2,2
 40202a4:	1000261e 	bne	r2,zero,4020340 <bsd_i_sockoptlen+0x1a0>
 40202a8:	00001606 	br	4020304 <bsd_i_sockoptlen+0x164>
 40202ac:	e0ffff17 	ldw	r3,-4(fp)
 40202b0:	18840588 	cmpgei	r2,r3,4118
 40202b4:	1000071e 	bne	r2,zero,40202d4 <bsd_i_sockoptlen+0x134>
 40202b8:	e0ffff17 	ldw	r3,-4(fp)
 40202bc:	18840508 	cmpgei	r2,r3,4116
 40202c0:	1000081e 	bne	r2,zero,40202e4 <bsd_i_sockoptlen+0x144>
 40202c4:	e0ffff17 	ldw	r3,-4(fp)
 40202c8:	18840248 	cmpgei	r2,r3,4105
 40202cc:	10001c1e 	bne	r2,zero,4020340 <bsd_i_sockoptlen+0x1a0>
 40202d0:	00000c06 	br	4020304 <bsd_i_sockoptlen+0x164>
 40202d4:	e0ffff17 	ldw	r3,-4(fp)
 40202d8:	188405a0 	cmpeqi	r2,r3,4118
 40202dc:	1000091e 	bne	r2,zero,4020304 <bsd_i_sockoptlen+0x164>
 40202e0:	00001706 	br	4020340 <bsd_i_sockoptlen+0x1a0>
   {
   case SO_BIO:
   case SO_NBIO:
      /* these don't use an option value */
      return 0;
 40202e4:	e03ffe15 	stw	zero,-8(fp)
 40202e8:	00001606 	br	4020344 <bsd_i_sockoptlen+0x1a4>
   case SO_LINGER:
      /* this option is a struct linger */
      return sizeof(struct linger);
 40202ec:	00800204 	movi	r2,8
 40202f0:	e0bffe15 	stw	r2,-8(fp)
 40202f4:	00001306 	br	4020344 <bsd_i_sockoptlen+0x1a4>
   case SO_RCVTIMEO:
   case SO_SNDTIMEO:
      /* these options are type short */
      return sizeof(short);
 40202f8:	00c00084 	movi	r3,2
 40202fc:	e0fffe15 	stw	r3,-8(fp)
 4020300:	00001006 	br	4020344 <bsd_i_sockoptlen+0x1a4>
   case SO_RCVBUF:
   case SO_NONBLOCK:
   case SO_ERROR:
   case SO_TYPE:
      /* these options are type int */
      return sizeof(int);
 4020304:	00800104 	movi	r2,4
 4020308:	e0bffe15 	stw	r2,-8(fp)
 402030c:	00000d06 	br	4020344 <bsd_i_sockoptlen+0x1a4>
      return sizeof(int (*)());
#endif /* TCP_ZEROCOPY */
#ifdef IP_MULTICAST
   case IP_MULTICAST_IF:
      /* this option is type ip_addr */
      return sizeof(ip_addr);
 4020310:	00c00104 	movi	r3,4
 4020314:	e0fffe15 	stw	r3,-8(fp)
 4020318:	00000a06 	br	4020344 <bsd_i_sockoptlen+0x1a4>
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      /* these options are type u_char */
      return sizeof(u_char);
 402031c:	00800044 	movi	r2,1
 4020320:	e0bffe15 	stw	r2,-8(fp)
 4020324:	00000706 	br	4020344 <bsd_i_sockoptlen+0x1a4>
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      /* these options are struct ip_mreq */
      return sizeof(struct ip_mreq);
 4020328:	00c00204 	movi	r3,8
 402032c:	e0fffe15 	stw	r3,-8(fp)
 4020330:	00000406 	br	4020344 <bsd_i_sockoptlen+0x1a4>
 * IP_TTL_OPT == SOREUSEADDR. This causes a build erro
 * due to duplicate cases. Removing this one. They both
 * return the same value (sizeof(int)).
 */
  // case IP_TTL_OPT:
      return sizeof(int);
 4020334:	00800104 	movi	r2,4
 4020338:	e0bffe15 	stw	r2,-8(fp)
 402033c:	00000106 	br	4020344 <bsd_i_sockoptlen+0x1a4>
   default:
      /* we don't know what type these options are */
      return 0;
 4020340:	e03ffe15 	stw	zero,-8(fp)
 4020344:	e0bffe17 	ldw	r2,-8(fp)
   }
   
}
 4020348:	e037883a 	mov	sp,fp
 402034c:	df000017 	ldw	fp,0(sp)
 4020350:	dec00104 	addi	sp,sp,4
 4020354:	f800283a 	ret

04020358 <bsd_getsockopt>:
int
bsd_getsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int * optlen)
{
 4020358:	defff404 	addi	sp,sp,-48
 402035c:	dfc00b15 	stw	ra,44(sp)
 4020360:	df000a15 	stw	fp,40(sp)
 4020364:	df000a04 	addi	fp,sp,40
 4020368:	e13ffb15 	stw	r4,-20(fp)
 402036c:	e17ffc15 	stw	r5,-16(fp)
 4020370:	e1bffd15 	stw	r6,-12(fp)
 4020374:	e1fffe15 	stw	r7,-8(fp)
   struct socket * so;
   int loptlen;
   int e;

   so = LONG2SO(s);
 4020378:	e0bffb17 	ldw	r2,-20(fp)
 402037c:	10bff804 	addi	r2,r2,-32
 4020380:	1085883a 	add	r2,r2,r2
 4020384:	1085883a 	add	r2,r2,r2
 4020388:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
 402038c:	008101b4 	movhi	r2,1030
 4020390:	10a34504 	addi	r2,r2,-29420
 4020394:	e0bff715 	stw	r2,-36(fp)
 4020398:	00000606 	br	40203b4 <bsd_getsockopt+0x5c>
 402039c:	e0fff717 	ldw	r3,-36(fp)
 40203a0:	e0bffa17 	ldw	r2,-24(fp)
 40203a4:	18800626 	beq	r3,r2,40203c0 <bsd_getsockopt+0x68>
 40203a8:	e0bff717 	ldw	r2,-36(fp)
 40203ac:	10800017 	ldw	r2,0(r2)
 40203b0:	e0bff715 	stw	r2,-36(fp)
 40203b4:	e0bff717 	ldw	r2,-36(fp)
 40203b8:	1004c03a 	cmpne	r2,r2,zero
 40203bc:	103ff71e 	bne	r2,zero,402039c <bsd_getsockopt+0x44>
 40203c0:	e0fff717 	ldw	r3,-36(fp)
 40203c4:	e0bffa17 	ldw	r2,-24(fp)
 40203c8:	18800426 	beq	r3,r2,40203dc <bsd_getsockopt+0x84>
 40203cc:	4025bb40 	call	4025bb4 <dtrap>
 40203d0:	00bfffc4 	movi	r2,-1
 40203d4:	e0bfff15 	stw	r2,-4(fp)
 40203d8:	00002106 	br	4020460 <bsd_getsockopt+0x108>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   loptlen = bsd_i_sockoptlen(level, name);
 40203dc:	e13ffc17 	ldw	r4,-16(fp)
 40203e0:	e17ffd17 	ldw	r5,-12(fp)
 40203e4:	40201a00 	call	40201a0 <bsd_i_sockoptlen>
 40203e8:	e0bff915 	stw	r2,-28(fp)
   if ((optlen == NULL) || (*optlen < loptlen))
 40203ec:	e0800217 	ldw	r2,8(fp)
 40203f0:	1005003a 	cmpeq	r2,r2,zero
 40203f4:	1000041e 	bne	r2,zero,4020408 <bsd_getsockopt+0xb0>
 40203f8:	e0800217 	ldw	r2,8(fp)
 40203fc:	10c00017 	ldw	r3,0(r2)
 4020400:	e0bff917 	ldw	r2,-28(fp)
 4020404:	1880060e 	bge	r3,r2,4020420 <bsd_getsockopt+0xc8>
   {
      so->so_error = EFAULT;
 4020408:	e0fffa17 	ldw	r3,-24(fp)
 402040c:	00800384 	movi	r2,14
 4020410:	18800615 	stw	r2,24(r3)
      return -1;
 4020414:	00bfffc4 	movi	r2,-1
 4020418:	e0bfff15 	stw	r2,-4(fp)
 402041c:	00001006 	br	4020460 <bsd_getsockopt+0x108>
   }

   e = t_getsockopt(s, level, name, opt, loptlen);
 4020420:	e0bff917 	ldw	r2,-28(fp)
 4020424:	d8800015 	stw	r2,0(sp)
 4020428:	e13ffb17 	ldw	r4,-20(fp)
 402042c:	e17ffc17 	ldw	r5,-16(fp)
 4020430:	e1bffd17 	ldw	r6,-12(fp)
 4020434:	e1fffe17 	ldw	r7,-8(fp)
 4020438:	40298c80 	call	40298c8 <t_getsockopt>
 402043c:	e0bff815 	stw	r2,-32(fp)

   /* if it worked, copy the option length back for the caller's use */
   if (e == 0)
 4020440:	e0bff817 	ldw	r2,-32(fp)
 4020444:	1004c03a 	cmpne	r2,r2,zero
 4020448:	1000031e 	bne	r2,zero,4020458 <bsd_getsockopt+0x100>
   {
      *optlen = loptlen;
 402044c:	e0c00217 	ldw	r3,8(fp)
 4020450:	e0bff917 	ldw	r2,-28(fp)
 4020454:	18800015 	stw	r2,0(r3)
   }

   return e;
 4020458:	e0bff817 	ldw	r2,-32(fp)
 402045c:	e0bfff15 	stw	r2,-4(fp)
 4020460:	e0bfff17 	ldw	r2,-4(fp)
   
}
 4020464:	e037883a 	mov	sp,fp
 4020468:	dfc00117 	ldw	ra,4(sp)
 402046c:	df000017 	ldw	fp,0(sp)
 4020470:	dec00204 	addi	sp,sp,8
 4020474:	f800283a 	ret

04020478 <bsd_ioctl>:
 *          available via bsd_errno(s).
 */
int
bsd_ioctl(BSD_SOCKET s, 
          unsigned long request, ...)
{
 4020478:	defff404 	addi	sp,sp,-48
 402047c:	dfc00915 	stw	ra,36(sp)
 4020480:	df000815 	stw	fp,32(sp)
 4020484:	df000804 	addi	fp,sp,32
 4020488:	e13ffd15 	stw	r4,-12(fp)
 402048c:	e1800215 	stw	r6,8(fp)
 4020490:	e1c00315 	stw	r7,12(fp)
 4020494:	e17ffe15 	stw	r5,-8(fp)
   struct socket * so;
   va_list argptr;
   int iarg;

   so = LONG2SO(s);
 4020498:	e0bffd17 	ldw	r2,-12(fp)
 402049c:	10bff804 	addi	r2,r2,-32
 40204a0:	1085883a 	add	r2,r2,r2
 40204a4:	1085883a 	add	r2,r2,r2
 40204a8:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
 40204ac:	008101b4 	movhi	r2,1030
 40204b0:	10a34504 	addi	r2,r2,-29420
 40204b4:	e0bff915 	stw	r2,-28(fp)
 40204b8:	00000606 	br	40204d4 <bsd_ioctl+0x5c>
 40204bc:	e0fff917 	ldw	r3,-28(fp)
 40204c0:	e0bffa17 	ldw	r2,-24(fp)
 40204c4:	18800626 	beq	r3,r2,40204e0 <bsd_ioctl+0x68>
 40204c8:	e0bff917 	ldw	r2,-28(fp)
 40204cc:	10800017 	ldw	r2,0(r2)
 40204d0:	e0bff915 	stw	r2,-28(fp)
 40204d4:	e0bff917 	ldw	r2,-28(fp)
 40204d8:	1004c03a 	cmpne	r2,r2,zero
 40204dc:	103ff71e 	bne	r2,zero,40204bc <bsd_ioctl+0x44>
 40204e0:	e0fff917 	ldw	r3,-28(fp)
 40204e4:	e0bffa17 	ldw	r2,-24(fp)
 40204e8:	18800426 	beq	r3,r2,40204fc <bsd_ioctl+0x84>
 40204ec:	4025bb40 	call	4025bb4 <dtrap>
 40204f0:	00bfffc4 	movi	r2,-1
 40204f4:	e0bfff15 	stw	r2,-4(fp)
 40204f8:	00001a06 	br	4020564 <bsd_ioctl+0xec>

   va_start(argptr, request);
 40204fc:	e0800204 	addi	r2,fp,8
 4020500:	e0bffb15 	stw	r2,-20(fp)

   switch (request)
 4020504:	e0bffe17 	ldw	r2,-8(fp)
 4020508:	108405a0 	cmpeqi	r2,r2,4118
 402050c:	1000011e 	bne	r2,zero,4020514 <bsd_ioctl+0x9c>
 4020510:	00000f06 	br	4020550 <bsd_ioctl+0xd8>
   {
   case FIONBIO:
      iarg = va_arg(argptr, int);
 4020514:	e0fffb17 	ldw	r3,-20(fp)
 4020518:	18800104 	addi	r2,r3,4
 402051c:	e0bffb15 	stw	r2,-20(fp)
 4020520:	1805883a 	mov	r2,r3
 4020524:	10800017 	ldw	r2,0(r2)
 4020528:	e0bffc15 	stw	r2,-16(fp)
      va_end(argptr);
      return t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, &iarg, sizeof(iarg));
 402052c:	e1fffc04 	addi	r7,fp,-16
 4020530:	00800104 	movi	r2,4
 4020534:	d8800015 	stw	r2,0(sp)
 4020538:	e13ffd17 	ldw	r4,-12(fp)
 402053c:	017fffc4 	movi	r5,-1
 4020540:	01840584 	movi	r6,4118
 4020544:	40296ec0 	call	40296ec <t_setsockopt>
 4020548:	e0bfff15 	stw	r2,-4(fp)
 402054c:	00000506 	br	4020564 <bsd_ioctl+0xec>
   default:
      so->so_error = EINVAL;
 4020550:	e0fffa17 	ldw	r3,-24(fp)
 4020554:	00800584 	movi	r2,22
 4020558:	18800615 	stw	r2,24(r3)
      return -1;
 402055c:	00bfffc4 	movi	r2,-1
 4020560:	e0bfff15 	stw	r2,-4(fp)
 4020564:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 4020568:	e037883a 	mov	sp,fp
 402056c:	dfc00117 	ldw	ra,4(sp)
 4020570:	df000017 	ldw	fp,0(sp)
 4020574:	dec00404 	addi	sp,sp,16
 4020578:	f800283a 	ret

0402057c <bsd_inet_ntoa>:
 * RETURNS: pointer to null-terminated string containing dotted-decimal
 *          printable representation of in
 */
char *
bsd_inet_ntoa(struct in_addr in)
{
 402057c:	defffd04 	addi	sp,sp,-12
 4020580:	dfc00215 	stw	ra,8(sp)
 4020584:	df000115 	stw	fp,4(sp)
 4020588:	df000104 	addi	fp,sp,4
 402058c:	e13fff15 	stw	r4,-4(fp)
   return print_ipad(in.s_addr);
 4020590:	e13fff17 	ldw	r4,-4(fp)
 4020594:	4020c580 	call	4020c58 <print_ipad>
}
 4020598:	e037883a 	mov	sp,fp
 402059c:	dfc00117 	ldw	ra,4(sp)
 40205a0:	df000017 	ldw	fp,0(sp)
 40205a4:	dec00204 	addi	sp,sp,8
 40205a8:	f800283a 	ret

040205ac <bsd_recvfrom>:
bsd_recvfrom(BSD_SOCKET s,
             void * buf,
             BSD_SIZE_T len,
             int flags,
             struct sockaddr * from, int * fromlen)
{
 40205ac:	deffef04 	addi	sp,sp,-68
 40205b0:	dfc01015 	stw	ra,64(sp)
 40205b4:	df000f15 	stw	fp,60(sp)
 40205b8:	df000f04 	addi	fp,sp,60
 40205bc:	e13ffb15 	stw	r4,-20(fp)
 40205c0:	e17ffc15 	stw	r5,-16(fp)
 40205c4:	e1bffd15 	stw	r6,-12(fp)
 40205c8:	e1fffe15 	stw	r7,-8(fp)
   struct socket * so;
   struct sockaddr lfrom;
   int lfromlen = 0;
 40205cc:	e03ffa15 	stw	zero,-24(fp)
   int lret;

   so = LONG2SO(s);
 40205d0:	e0bffb17 	ldw	r2,-20(fp)
 40205d4:	10bff804 	addi	r2,r2,-32
 40205d8:	1085883a 	add	r2,r2,r2
 40205dc:	1085883a 	add	r2,r2,r2
 40205e0:	e0bff515 	stw	r2,-44(fp)
   SOC_CHECK(so);
 40205e4:	008101b4 	movhi	r2,1030
 40205e8:	10a34504 	addi	r2,r2,-29420
 40205ec:	e0bff315 	stw	r2,-52(fp)
 40205f0:	00000606 	br	402060c <bsd_recvfrom+0x60>
 40205f4:	e0fff317 	ldw	r3,-52(fp)
 40205f8:	e0bff517 	ldw	r2,-44(fp)
 40205fc:	18800626 	beq	r3,r2,4020618 <bsd_recvfrom+0x6c>
 4020600:	e0bff317 	ldw	r2,-52(fp)
 4020604:	10800017 	ldw	r2,0(r2)
 4020608:	e0bff315 	stw	r2,-52(fp)
 402060c:	e0bff317 	ldw	r2,-52(fp)
 4020610:	1004c03a 	cmpne	r2,r2,zero
 4020614:	103ff71e 	bne	r2,zero,40205f4 <bsd_recvfrom+0x48>
 4020618:	e0fff317 	ldw	r3,-52(fp)
 402061c:	e0bff517 	ldw	r2,-44(fp)
 4020620:	18800426 	beq	r3,r2,4020634 <bsd_recvfrom+0x88>
 4020624:	4025bb40 	call	4025bb4 <dtrap>
 4020628:	00bfffc4 	movi	r2,-1
 402062c:	e0bfff15 	stw	r2,-4(fp)
 4020630:	00003006 	br	40206f4 <bsd_recvfrom+0x148>

   /* if we were given a buffer for the peer's address, also get the
    * buffer's length 
    */
   if (from != NULL)
 4020634:	e0800217 	ldw	r2,8(fp)
 4020638:	1005003a 	cmpeq	r2,r2,zero
 402063c:	10000c1e 	bne	r2,zero,4020670 <bsd_recvfrom+0xc4>
   {
      if (fromlen == NULL)
 4020640:	e0800317 	ldw	r2,12(fp)
 4020644:	1004c03a 	cmpne	r2,r2,zero
 4020648:	1000061e 	bne	r2,zero,4020664 <bsd_recvfrom+0xb8>
      {
         so->so_error = EFAULT;
 402064c:	e0fff517 	ldw	r3,-44(fp)
 4020650:	00800384 	movi	r2,14
 4020654:	18800615 	stw	r2,24(r3)
         return -1;
 4020658:	00bfffc4 	movi	r2,-1
 402065c:	e0bfff15 	stw	r2,-4(fp)
 4020660:	00002406 	br	40206f4 <bsd_recvfrom+0x148>
      }
      lfromlen = *fromlen;
 4020664:	e0800317 	ldw	r2,12(fp)
 4020668:	10800017 	ldw	r2,0(r2)
 402066c:	e0bffa15 	stw	r2,-24(fp)
   }

   lret = t_recvfrom(s, (char *)buf, len, flags, &lfrom, &lfromlen );
 4020670:	e17ffc17 	ldw	r5,-16(fp)
 4020674:	e0bff604 	addi	r2,fp,-40
 4020678:	d8800015 	stw	r2,0(sp)
 402067c:	e0bffa04 	addi	r2,fp,-24
 4020680:	d8800115 	stw	r2,4(sp)
 4020684:	e13ffb17 	ldw	r4,-20(fp)
 4020688:	e1bffd17 	ldw	r6,-12(fp)
 402068c:	e1fffe17 	ldw	r7,-8(fp)
 4020690:	4029b5c0 	call	4029b5c <t_recvfrom>
 4020694:	e0bff415 	stw	r2,-48(fp)
    * sockaddr_in), which is all that t_recvfrom() can return as a peer
    * name.
    * For IPV6 addresses or dual IPV4/IPV6 stack, the max size copied
    * is sizeof(struct sockaddr_in6)
    */
   if ((lret != -1) && (from != NULL))
 4020698:	e0bff417 	ldw	r2,-48(fp)
 402069c:	10bfffe0 	cmpeqi	r2,r2,-1
 40206a0:	1000121e 	bne	r2,zero,40206ec <bsd_recvfrom+0x140>
 40206a4:	e0800217 	ldw	r2,8(fp)
 40206a8:	1005003a 	cmpeq	r2,r2,zero
 40206ac:	10000f1e 	bne	r2,zero,40206ec <bsd_recvfrom+0x140>
   {
#ifndef IP_V6
      if (lfromlen > sizeof(struct sockaddr_in))
 40206b0:	e0bffa17 	ldw	r2,-24(fp)
 40206b4:	10800470 	cmpltui	r2,r2,17
 40206b8:	1000021e 	bne	r2,zero,40206c4 <bsd_recvfrom+0x118>
         lfromlen = sizeof(struct sockaddr_in);
 40206bc:	00800404 	movi	r2,16
 40206c0:	e0bffa15 	stw	r2,-24(fp)
#else
      if (lfromlen > sizeof(struct sockaddr_in6))
         lfromlen = sizeof(struct sockaddr_in6);

#endif
      MEMCPY(from, &lfrom, lfromlen);
 40206c4:	e0bffa17 	ldw	r2,-24(fp)
 40206c8:	100d883a 	mov	r6,r2
 40206cc:	e0800217 	ldw	r2,8(fp)
 40206d0:	e0fff604 	addi	r3,fp,-40
 40206d4:	1009883a 	mov	r4,r2
 40206d8:	180b883a 	mov	r5,r3
 40206dc:	4001de40 	call	4001de4 <memcpy>
      *fromlen = lfromlen;
 40206e0:	e0fffa17 	ldw	r3,-24(fp)
 40206e4:	e0800317 	ldw	r2,12(fp)
 40206e8:	10c00015 	stw	r3,0(r2)
   }

   return lret;
 40206ec:	e0bff417 	ldw	r2,-48(fp)
 40206f0:	e0bfff15 	stw	r2,-4(fp)
 40206f4:	e0bfff17 	ldw	r2,-4(fp)
}
 40206f8:	e037883a 	mov	sp,fp
 40206fc:	dfc00117 	ldw	ra,4(sp)
 4020700:	df000017 	ldw	fp,0(sp)
 4020704:	dec00204 	addi	sp,sp,8
 4020708:	f800283a 	ret

0402070c <bsd_select>:
bsd_select(int nfds,
           fd_set * readfds,
           fd_set * writefds,
           fd_set * exceptfds,
           BSD_TIMEVAL_T * timeout)
{
 402070c:	defff804 	addi	sp,sp,-32
 4020710:	dfc00715 	stw	ra,28(sp)
 4020714:	df000615 	stw	fp,24(sp)
 4020718:	df000604 	addi	fp,sp,24
 402071c:	e13ffc15 	stw	r4,-16(fp)
 4020720:	e17ffd15 	stw	r5,-12(fp)
 4020724:	e1bffe15 	stw	r6,-8(fp)
 4020728:	e1ffff15 	stw	r7,-4(fp)
   long ltv;    /* timeout expressed in ticks */
   long tps;    /* local copy of TPS */

   USE_ARG(nfds);

   if (timeout != NULL)
 402072c:	e0800217 	ldw	r2,8(fp)
 4020730:	1005003a 	cmpeq	r2,r2,zero
 4020734:	10003f1e 	bne	r2,zero,4020834 <bsd_select+0x128>
       * million (i.e. any number of microseconds up to one second).
       * So we scale tv_usec from microseconds to something reasonable
       * based on TPS, multiply it by TPS, then scale it the rest of
       * the way to ticks-per-second.
       */
      tps = TPS;
 4020738:	00801904 	movi	r2,100
 402073c:	e0bffa15 	stw	r2,-24(fp)
      if (tps >= 1000)
 4020740:	e0bffa17 	ldw	r2,-24(fp)
 4020744:	1080fa10 	cmplti	r2,r2,1000
 4020748:	10000b1e 	bne	r2,zero,4020778 <bsd_select+0x6c>
      {
         ltv = (((timeout->tv_usec + 50) / 100) * tps) / 10000;
 402074c:	e0800217 	ldw	r2,8(fp)
 4020750:	10800117 	ldw	r2,4(r2)
 4020754:	10c00c84 	addi	r3,r2,50
 4020758:	00801904 	movi	r2,100
 402075c:	1887283a 	div	r3,r3,r2
 4020760:	e0bffa17 	ldw	r2,-24(fp)
 4020764:	1887383a 	mul	r3,r3,r2
 4020768:	0089c404 	movi	r2,10000
 402076c:	1885283a 	div	r2,r3,r2
 4020770:	e0bffb15 	stw	r2,-20(fp)
 4020774:	00002806 	br	4020818 <bsd_select+0x10c>
      }
      else if (tps >= 100)
 4020778:	e0bffa17 	ldw	r2,-24(fp)
 402077c:	10801910 	cmplti	r2,r2,100
 4020780:	10000b1e 	bne	r2,zero,40207b0 <bsd_select+0xa4>
      {
         ltv = (((timeout->tv_usec + 500) / 1000) * tps) / 1000;
 4020784:	e0800217 	ldw	r2,8(fp)
 4020788:	10800117 	ldw	r2,4(r2)
 402078c:	10c07d04 	addi	r3,r2,500
 4020790:	0080fa04 	movi	r2,1000
 4020794:	1887283a 	div	r3,r3,r2
 4020798:	e0bffa17 	ldw	r2,-24(fp)
 402079c:	1887383a 	mul	r3,r3,r2
 40207a0:	0080fa04 	movi	r2,1000
 40207a4:	1885283a 	div	r2,r3,r2
 40207a8:	e0bffb15 	stw	r2,-20(fp)
 40207ac:	00001a06 	br	4020818 <bsd_select+0x10c>
      }
      else if (tps >= 10)
 40207b0:	e0bffa17 	ldw	r2,-24(fp)
 40207b4:	10800290 	cmplti	r2,r2,10
 40207b8:	10000b1e 	bne	r2,zero,40207e8 <bsd_select+0xdc>
      {
         ltv = (((timeout->tv_usec + 5000) / 10000) * tps) / 100;
 40207bc:	e0800217 	ldw	r2,8(fp)
 40207c0:	10800117 	ldw	r2,4(r2)
 40207c4:	10c4e204 	addi	r3,r2,5000
 40207c8:	0089c404 	movi	r2,10000
 40207cc:	1887283a 	div	r3,r3,r2
 40207d0:	e0bffa17 	ldw	r2,-24(fp)
 40207d4:	1887383a 	mul	r3,r3,r2
 40207d8:	00801904 	movi	r2,100
 40207dc:	1885283a 	div	r2,r3,r2
 40207e0:	e0bffb15 	stw	r2,-20(fp)
 40207e4:	00000c06 	br	4020818 <bsd_select+0x10c>
      }
      else
      {
         ltv = (((timeout->tv_usec + 50000) / 100000) * tps) / 10;
 40207e8:	e0800217 	ldw	r2,8(fp)
 40207ec:	10c00117 	ldw	r3,4(r2)
 40207f0:	00b0d414 	movui	r2,50000
 40207f4:	1887883a 	add	r3,r3,r2
 40207f8:	008000b4 	movhi	r2,2
 40207fc:	10a1a804 	addi	r2,r2,-31072
 4020800:	1887283a 	div	r3,r3,r2
 4020804:	e0bffa17 	ldw	r2,-24(fp)
 4020808:	1887383a 	mul	r3,r3,r2
 402080c:	00800284 	movi	r2,10
 4020810:	1885283a 	div	r2,r3,r2
 4020814:	e0bffb15 	stw	r2,-20(fp)
      }
      ltv += (timeout->tv_sec * TPS);
 4020818:	e0800217 	ldw	r2,8(fp)
 402081c:	10800017 	ldw	r2,0(r2)
 4020820:	10c01924 	muli	r3,r2,100
 4020824:	e0bffb17 	ldw	r2,-20(fp)
 4020828:	1885883a 	add	r2,r3,r2
 402082c:	e0bffb15 	stw	r2,-20(fp)
 4020830:	00000206 	br	402083c <bsd_select+0x130>
   }
   else {
      /*
       * NULL timeout: wait indefinitely in t_select()
       */
      ltv = -1;
 4020834:	00bfffc4 	movi	r2,-1
 4020838:	e0bffb15 	stw	r2,-20(fp)
   }

   return (t_select(readfds, writefds, exceptfds, ltv));
 402083c:	e13ffd17 	ldw	r4,-12(fp)
 4020840:	e17ffe17 	ldw	r5,-8(fp)
 4020844:	e1bfff17 	ldw	r6,-4(fp)
 4020848:	e1fffb17 	ldw	r7,-20(fp)
 402084c:	402da740 	call	402da74 <t_select>
}
 4020850:	e037883a 	mov	sp,fp
 4020854:	dfc00117 	ldw	ra,4(sp)
 4020858:	df000017 	ldw	fp,0(sp)
 402085c:	dec00204 	addi	sp,sp,8
 4020860:	f800283a 	ret

04020864 <bsd_setsockopt>:
int 
bsd_setsockopt(BSD_SOCKET s,
               int level,
               int name,
               void * opt, int optlen)
{
 4020864:	defff604 	addi	sp,sp,-40
 4020868:	dfc00915 	stw	ra,36(sp)
 402086c:	df000815 	stw	fp,32(sp)
 4020870:	df000804 	addi	fp,sp,32
 4020874:	e13ffb15 	stw	r4,-20(fp)
 4020878:	e17ffc15 	stw	r5,-16(fp)
 402087c:	e1bffd15 	stw	r6,-12(fp)
 4020880:	e1fffe15 	stw	r7,-8(fp)
   struct socket * so;

   so = LONG2SO(s);
 4020884:	e0bffb17 	ldw	r2,-20(fp)
 4020888:	10bff804 	addi	r2,r2,-32
 402088c:	1085883a 	add	r2,r2,r2
 4020890:	1085883a 	add	r2,r2,r2
 4020894:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
 4020898:	008101b4 	movhi	r2,1030
 402089c:	10a34504 	addi	r2,r2,-29420
 40208a0:	e0bff915 	stw	r2,-28(fp)
 40208a4:	00000606 	br	40208c0 <bsd_setsockopt+0x5c>
 40208a8:	e0fff917 	ldw	r3,-28(fp)
 40208ac:	e0bffa17 	ldw	r2,-24(fp)
 40208b0:	18800626 	beq	r3,r2,40208cc <bsd_setsockopt+0x68>
 40208b4:	e0bff917 	ldw	r2,-28(fp)
 40208b8:	10800017 	ldw	r2,0(r2)
 40208bc:	e0bff915 	stw	r2,-28(fp)
 40208c0:	e0bff917 	ldw	r2,-28(fp)
 40208c4:	1004c03a 	cmpne	r2,r2,zero
 40208c8:	103ff71e 	bne	r2,zero,40208a8 <bsd_setsockopt+0x44>
 40208cc:	e0fff917 	ldw	r3,-28(fp)
 40208d0:	e0bffa17 	ldw	r2,-24(fp)
 40208d4:	18800426 	beq	r3,r2,40208e8 <bsd_setsockopt+0x84>
 40208d8:	4025bb40 	call	4025bb4 <dtrap>
 40208dc:	00bfffc4 	movi	r2,-1
 40208e0:	e0bfff15 	stw	r2,-4(fp)
 40208e4:	00001406 	br	4020938 <bsd_setsockopt+0xd4>

   /* make sure supplied option value is big enough for the 
    * named option, else fail w/error EFAULT
    */
   if (optlen < bsd_i_sockoptlen(level, name))
 40208e8:	e13ffc17 	ldw	r4,-16(fp)
 40208ec:	e17ffd17 	ldw	r5,-12(fp)
 40208f0:	40201a00 	call	40201a0 <bsd_i_sockoptlen>
 40208f4:	1007883a 	mov	r3,r2
 40208f8:	e0800217 	ldw	r2,8(fp)
 40208fc:	10c0060e 	bge	r2,r3,4020918 <bsd_setsockopt+0xb4>
   {
      so->so_error = EFAULT;
 4020900:	e0fffa17 	ldw	r3,-24(fp)
 4020904:	00800384 	movi	r2,14
 4020908:	18800615 	stw	r2,24(r3)
      return -1;
 402090c:	00bfffc4 	movi	r2,-1
 4020910:	e0bfff15 	stw	r2,-4(fp)
 4020914:	00000806 	br	4020938 <bsd_setsockopt+0xd4>
   }

   return t_setsockopt(s, level, name, opt, optlen);
 4020918:	e0800217 	ldw	r2,8(fp)
 402091c:	d8800015 	stw	r2,0(sp)
 4020920:	e13ffb17 	ldw	r4,-20(fp)
 4020924:	e17ffc17 	ldw	r5,-16(fp)
 4020928:	e1bffd17 	ldw	r6,-12(fp)
 402092c:	e1fffe17 	ldw	r7,-8(fp)
 4020930:	40296ec0 	call	40296ec <t_setsockopt>
 4020934:	e0bfff15 	stw	r2,-4(fp)
 4020938:	e0bfff17 	ldw	r2,-4(fp)
}
 402093c:	e037883a 	mov	sp,fp
 4020940:	dfc00117 	ldw	ra,4(sp)
 4020944:	df000017 	ldw	fp,0(sp)
 4020948:	dec00204 	addi	sp,sp,8
 402094c:	f800283a 	ret

04020950 <ccksum>:
 * be done in 16-bit chunks.
 */

unsigned short
ccksum (void *ptr, unsigned words)
{
 4020950:	defffa04 	addi	sp,sp,-24
 4020954:	df000515 	stw	fp,20(sp)
 4020958:	df000504 	addi	fp,sp,20
 402095c:	e13ffe15 	stw	r4,-8(fp)
 4020960:	e17fff15 	stw	r5,-4(fp)
   unsigned short *addr = (unsigned short *)ptr;
 4020964:	e0bffe17 	ldw	r2,-8(fp)
 4020968:	e0bffd15 	stw	r2,-12(fp)
   unsigned long sum = 0;
 402096c:	e03ffc15 	stw	zero,-16(fp)
   int count = (int)words;
 4020970:	e0bfff17 	ldw	r2,-4(fp)
 4020974:	e0bffb15 	stw	r2,-20(fp)

   while (--count >= 0)
 4020978:	00000906 	br	40209a0 <ccksum+0x50>
   {
      /*  This is the inner loop */
      sum += *addr++;
 402097c:	e0bffd17 	ldw	r2,-12(fp)
 4020980:	1080000b 	ldhu	r2,0(r2)
 4020984:	10ffffcc 	andi	r3,r2,65535
 4020988:	e0bffc17 	ldw	r2,-16(fp)
 402098c:	10c5883a 	add	r2,r2,r3
 4020990:	e0bffc15 	stw	r2,-16(fp)
 4020994:	e0bffd17 	ldw	r2,-12(fp)
 4020998:	10800084 	addi	r2,r2,2
 402099c:	e0bffd15 	stw	r2,-12(fp)
{
   unsigned short *addr = (unsigned short *)ptr;
   unsigned long sum = 0;
   int count = (int)words;

   while (--count >= 0)
 40209a0:	e0bffb17 	ldw	r2,-20(fp)
 40209a4:	10bfffc4 	addi	r2,r2,-1
 40209a8:	e0bffb15 	stw	r2,-20(fp)
 40209ac:	e0bffb17 	ldw	r2,-20(fp)
 40209b0:	1004403a 	cmpge	r2,r2,zero
 40209b4:	103ff11e 	bne	r2,zero,402097c <ccksum+0x2c>
      /*  This is the inner loop */
      sum += *addr++;
   }

   /*  Fold 32-bit sum to 16 bits */
   sum = (sum & 0xffff) + (sum >> 16);
 40209b8:	e0bffc17 	ldw	r2,-16(fp)
 40209bc:	10ffffcc 	andi	r3,r2,65535
 40209c0:	e0bffc17 	ldw	r2,-16(fp)
 40209c4:	1004d43a 	srli	r2,r2,16
 40209c8:	1885883a 	add	r2,r3,r2
 40209cc:	e0bffc15 	stw	r2,-16(fp)
   sum = (sum & 0xffff) + (sum >> 16);
 40209d0:	e0bffc17 	ldw	r2,-16(fp)
 40209d4:	10ffffcc 	andi	r3,r2,65535
 40209d8:	e0bffc17 	ldw	r2,-16(fp)
 40209dc:	1004d43a 	srli	r2,r2,16
 40209e0:	1885883a 	add	r2,r3,r2
 40209e4:	e0bffc15 	stw	r2,-16(fp)

   /* checksum = ~sum; *//* removed for MIT IP stack */
   return ((unsigned short)sum);
 40209e8:	e0bffc17 	ldw	r2,-16(fp)
 40209ec:	10bfffcc 	andi	r2,r2,65535
}
 40209f0:	e037883a 	mov	sp,fp
 40209f4:	df000017 	ldw	fp,0(sp)
 40209f8:	dec00104 	addi	sp,sp,4
 40209fc:	f800283a 	ret

04020a00 <cksum>:
 *    3 = user-supplied alternate implementation
 */

unsigned short
cksum (void *ptr, unsigned count)
{
 4020a00:	defffb04 	addi	sp,sp,-20
 4020a04:	dfc00415 	stw	ra,16(sp)
 4020a08:	df000315 	stw	fp,12(sp)
 4020a0c:	df000304 	addi	fp,sp,12
 4020a10:	e13ffd15 	stw	r4,-12(fp)
 4020a14:	e17ffe15 	stw	r5,-8(fp)
   switch (cksum_select)
 4020a18:	d0a02e17 	ldw	r2,-32584(gp)
 4020a1c:	108000a0 	cmpeqi	r2,r2,2
 4020a20:	1000061e 	bne	r2,zero,4020a3c <cksum+0x3c>
   {
      case 1:
      default:
         return (ccksum(ptr, count));
 4020a24:	e13ffd17 	ldw	r4,-12(fp)
 4020a28:	e17ffe17 	ldw	r5,-8(fp)
 4020a2c:	40209500 	call	4020950 <ccksum>
 4020a30:	10bfffcc 	andi	r2,r2,65535
 4020a34:	e0bfff15 	stw	r2,-4(fp)
 4020a38:	00000506 	br	4020a50 <cksum+0x50>
 #ifndef C_CHECKSUM
      case 2:
         return (asm_cksum(ptr, count));
 4020a3c:	e13ffd17 	ldw	r4,-12(fp)
 4020a40:	e17ffe17 	ldw	r5,-8(fp)
 4020a44:	4025a200 	call	4025a20 <asm_cksum>
 4020a48:	10bfffcc 	andi	r2,r2,65535
 4020a4c:	e0bfff15 	stw	r2,-4(fp)
 4020a50:	e0bfff17 	ldw	r2,-4(fp)
#else
#endif
         return (alt_cksum(ptr, count));
#endif
   }
}
 4020a54:	e037883a 	mov	sp,fp
 4020a58:	dfc00117 	ldw	ra,4(sp)
 4020a5c:	df000017 	ldw	fp,0(sp)
 4020a60:	dec00204 	addi	sp,sp,8
 4020a64:	f800283a 	ret

04020a68 <do_trap>:
 * RETURNS: 0
 */

int
do_trap(void)
{
 4020a68:	defffe04 	addi	sp,sp,-8
 4020a6c:	dfc00115 	stw	ra,4(sp)
 4020a70:	df000015 	stw	fp,0(sp)
 4020a74:	d839883a 	mov	fp,sp
   dtrap();
 4020a78:	4025bb40 	call	4025bb4 <dtrap>
   return 0;
 4020a7c:	0005883a 	mov	r2,zero
}
 4020a80:	e037883a 	mov	sp,fp
 4020a84:	dfc00117 	ldw	ra,4(sp)
 4020a88:	df000017 	ldw	fp,0(sp)
 4020a8c:	dec00204 	addi	sp,sp,8
 4020a90:	f800283a 	ret

04020a94 <nextarg>:
 * RETURNS:  pointer to next arg in string 
 */

char *   
nextarg(char * argp)
{
 4020a94:	defffe04 	addi	sp,sp,-8
 4020a98:	df000115 	stw	fp,4(sp)
 4020a9c:	df000104 	addi	fp,sp,4
 4020aa0:	e13fff15 	stw	r4,-4(fp)
   while (*argp > ' ')argp++; /* scan past current arg */
 4020aa4:	00000306 	br	4020ab4 <nextarg+0x20>
 4020aa8:	e0bfff17 	ldw	r2,-4(fp)
 4020aac:	10800044 	addi	r2,r2,1
 4020ab0:	e0bfff15 	stw	r2,-4(fp)
 4020ab4:	e0bfff17 	ldw	r2,-4(fp)
 4020ab8:	10800003 	ldbu	r2,0(r2)
 4020abc:	10803fcc 	andi	r2,r2,255
 4020ac0:	1080201c 	xori	r2,r2,128
 4020ac4:	10bfe004 	addi	r2,r2,-128
 4020ac8:	10800848 	cmpgei	r2,r2,33
 4020acc:	103ff61e 	bne	r2,zero,4020aa8 <nextarg+0x14>
      while (*argp == ' ')argp++;   /* scan past spaces */
 4020ad0:	00000306 	br	4020ae0 <nextarg+0x4c>
 4020ad4:	e0bfff17 	ldw	r2,-4(fp)
 4020ad8:	10800044 	addi	r2,r2,1
 4020adc:	e0bfff15 	stw	r2,-4(fp)
 4020ae0:	e0bfff17 	ldw	r2,-4(fp)
 4020ae4:	10800003 	ldbu	r2,0(r2)
 4020ae8:	10803fcc 	andi	r2,r2,255
 4020aec:	1080201c 	xori	r2,r2,128
 4020af0:	10bfe004 	addi	r2,r2,-128
 4020af4:	10800820 	cmpeqi	r2,r2,32
 4020af8:	103ff61e 	bne	r2,zero,4020ad4 <nextarg+0x40>
      return (argp);
 4020afc:	e0bfff17 	ldw	r2,-4(fp)
}
 4020b00:	e037883a 	mov	sp,fp
 4020b04:	df000017 	ldw	fp,0(sp)
 4020b08:	dec00104 	addi	sp,sp,4
 4020b0c:	f800283a 	ret

04020b10 <hexdump>:

#define  HEX_BYTES_PER_LINE   16

void
hexdump(void * pio, void * buffer, unsigned len)
{
 4020b10:	defff704 	addi	sp,sp,-36
 4020b14:	dfc00815 	stw	ra,32(sp)
 4020b18:	df000715 	stw	fp,28(sp)
 4020b1c:	df000704 	addi	fp,sp,28
 4020b20:	e13ffc15 	stw	r4,-16(fp)
 4020b24:	e17ffd15 	stw	r5,-12(fp)
 4020b28:	e1bffe15 	stw	r6,-8(fp)
   u_char * data  =  (u_char *)buffer;
 4020b2c:	e0bffd17 	ldw	r2,-12(fp)
 4020b30:	e0bffb15 	stw	r2,-20(fp)
   unsigned int count;
   char  c;

   while (len)
 4020b34:	00004006 	br	4020c38 <hexdump+0x128>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4020b38:	e03ffa15 	stw	zero,-24(fp)
 4020b3c:	00000c06 	br	4020b70 <hexdump+0x60>
         ns_printf(pio, "%02x ", *(data + count));
 4020b40:	e0fffa17 	ldw	r3,-24(fp)
 4020b44:	e0bffb17 	ldw	r2,-20(fp)
 4020b48:	1885883a 	add	r2,r3,r2
 4020b4c:	10800003 	ldbu	r2,0(r2)
 4020b50:	11803fcc 	andi	r6,r2,255
 4020b54:	e13ffc17 	ldw	r4,-16(fp)
 4020b58:	01410174 	movhi	r5,1029
 4020b5c:	296c4804 	addi	r5,r5,-20192
 4020b60:	40210380 	call	4021038 <ns_printf>
   char  c;

   while (len)
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4020b64:	e0bffa17 	ldw	r2,-24(fp)
 4020b68:	10800044 	addi	r2,r2,1
 4020b6c:	e0bffa15 	stw	r2,-24(fp)
 4020b70:	e0bffa17 	ldw	r2,-24(fp)
 4020b74:	10800428 	cmpgeui	r2,r2,16
 4020b78:	1000031e 	bne	r2,zero,4020b88 <hexdump+0x78>
 4020b7c:	e0fffa17 	ldw	r3,-24(fp)
 4020b80:	e0bffe17 	ldw	r2,-8(fp)
 4020b84:	18bfee36 	bltu	r3,r2,4020b40 <hexdump+0x30>
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4020b88:	e03ffa15 	stw	zero,-24(fp)
 4020b8c:	00001806 	br	4020bf0 <hexdump+0xe0>
      {
         c = *(data + count);
 4020b90:	e0fffa17 	ldw	r3,-24(fp)
 4020b94:	e0bffb17 	ldw	r2,-20(fp)
 4020b98:	1885883a 	add	r2,r3,r2
 4020b9c:	10800003 	ldbu	r2,0(r2)
 4020ba0:	e0bff905 	stb	r2,-28(fp)
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
 4020ba4:	e0bff907 	ldb	r2,-28(fp)
 4020ba8:	10800810 	cmplti	r2,r2,32
 4020bac:	1000061e 	bne	r2,zero,4020bc8 <hexdump+0xb8>
 4020bb0:	e0bff907 	ldb	r2,-28(fp)
 4020bb4:	10801fe0 	cmpeqi	r2,r2,127
 4020bb8:	1000031e 	bne	r2,zero,4020bc8 <hexdump+0xb8>
 4020bbc:	e0bff907 	ldb	r2,-28(fp)
 4020bc0:	e0bfff15 	stw	r2,-4(fp)
 4020bc4:	00000206 	br	4020bd0 <hexdump+0xc0>
 4020bc8:	00800b84 	movi	r2,46
 4020bcc:	e0bfff15 	stw	r2,-4(fp)
 4020bd0:	e13ffc17 	ldw	r4,-16(fp)
 4020bd4:	01410174 	movhi	r5,1029
 4020bd8:	296c4a04 	addi	r5,r5,-20184
 4020bdc:	e1bfff17 	ldw	r6,-4(fp)
 4020be0:	40210380 	call	4021038 <ns_printf>
   {
      /* display data in hex */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
         ns_printf(pio, "%02x ", *(data + count));
      /* display data in ascii */
      for (count = 0; (count < HEX_BYTES_PER_LINE) && (count < len); ++count)
 4020be4:	e0bffa17 	ldw	r2,-24(fp)
 4020be8:	10800044 	addi	r2,r2,1
 4020bec:	e0bffa15 	stw	r2,-24(fp)
 4020bf0:	e0bffa17 	ldw	r2,-24(fp)
 4020bf4:	10800428 	cmpgeui	r2,r2,16
 4020bf8:	1000031e 	bne	r2,zero,4020c08 <hexdump+0xf8>
 4020bfc:	e0fffa17 	ldw	r3,-24(fp)
 4020c00:	e0bffe17 	ldw	r2,-8(fp)
 4020c04:	18bfe236 	bltu	r3,r2,4020b90 <hexdump+0x80>
      {
         c = *(data + count);
         ns_printf(pio, "%c", ((c >= 0x20) && (c < 0x7f)) ? c : '.');
      }
      ns_printf(pio,"\n");
 4020c08:	e13ffc17 	ldw	r4,-16(fp)
 4020c0c:	01410174 	movhi	r5,1029
 4020c10:	296c4b04 	addi	r5,r5,-20180
 4020c14:	40210380 	call	4021038 <ns_printf>
      len -= count;
 4020c18:	e0fffe17 	ldw	r3,-8(fp)
 4020c1c:	e0bffa17 	ldw	r2,-24(fp)
 4020c20:	1885c83a 	sub	r2,r3,r2
 4020c24:	e0bffe15 	stw	r2,-8(fp)
      data += count;
 4020c28:	e0fffa17 	ldw	r3,-24(fp)
 4020c2c:	e0bffb17 	ldw	r2,-20(fp)
 4020c30:	10c5883a 	add	r2,r2,r3
 4020c34:	e0bffb15 	stw	r2,-20(fp)
{
   u_char * data  =  (u_char *)buffer;
   unsigned int count;
   char  c;

   while (len)
 4020c38:	e0bffe17 	ldw	r2,-8(fp)
 4020c3c:	1004c03a 	cmpne	r2,r2,zero
 4020c40:	103fbd1e 	bne	r2,zero,4020b38 <hexdump+0x28>
      }
      ns_printf(pio,"\n");
      len -= count;
      data += count;
   }
}
 4020c44:	e037883a 	mov	sp,fp
 4020c48:	dfc00117 	ldw	ra,4(sp)
 4020c4c:	df000017 	ldw	fp,0(sp)
 4020c50:	dec00204 	addi	sp,sp,8
 4020c54:	f800283a 	ret

04020c58 <print_ipad>:

char     ipreturn[18];     /* buffer for return */

char *   
print_ipad(unsigned long ipaddr)
{
 4020c58:	defffa04 	addi	sp,sp,-24
 4020c5c:	dfc00515 	stw	ra,20(sp)
 4020c60:	df000415 	stw	fp,16(sp)
 4020c64:	df000404 	addi	fp,sp,16
 4020c68:	e13fff15 	stw	r4,-4(fp)
   struct l2b  ip;

   ip.ip.iplong = ipaddr;
 4020c6c:	e0bfff17 	ldw	r2,-4(fp)
 4020c70:	e0bffe15 	stw	r2,-8(fp)
   sprintf(ipreturn, "%u.%u.%u.%u", 
 4020c74:	e0bffe03 	ldbu	r2,-8(fp)
 4020c78:	11803fcc 	andi	r6,r2,255
 4020c7c:	e0bffe43 	ldbu	r2,-7(fp)
 4020c80:	11c03fcc 	andi	r7,r2,255
 4020c84:	e0bffe83 	ldbu	r2,-6(fp)
 4020c88:	10c03fcc 	andi	r3,r2,255
 4020c8c:	e0bffec3 	ldbu	r2,-5(fp)
 4020c90:	10803fcc 	andi	r2,r2,255
 4020c94:	d8c00015 	stw	r3,0(sp)
 4020c98:	d8800115 	stw	r2,4(sp)
 4020c9c:	010101b4 	movhi	r4,1030
 4020ca0:	21222984 	addi	r4,r4,-30554
 4020ca4:	01410174 	movhi	r5,1029
 4020ca8:	296c4c04 	addi	r5,r5,-20176
 4020cac:	40021a80 	call	40021a8 <sprintf>
    ip.ip.ipchar[0],
    ip.ip.ipchar[1],
    ip.ip.ipchar[2],
    ip.ip.ipchar[3]);

   return ipreturn;
 4020cb0:	008101b4 	movhi	r2,1030
 4020cb4:	10a22984 	addi	r2,r2,-30554
}
 4020cb8:	e037883a 	mov	sp,fp
 4020cbc:	dfc00117 	ldw	ra,4(sp)
 4020cc0:	df000017 	ldw	fp,0(sp)
 4020cc4:	dec00204 	addi	sp,sp,8
 4020cc8:	f800283a 	ret

04020ccc <print_uptime>:

static char tistring[24];     /* buffer for return */

char *   
print_uptime(unsigned long timetick)
{
 4020ccc:	defff804 	addi	sp,sp,-32
 4020cd0:	dfc00715 	stw	ra,28(sp)
 4020cd4:	df000615 	stw	fp,24(sp)
 4020cd8:	df000604 	addi	fp,sp,24
 4020cdc:	e13fff15 	stw	r4,-4(fp)
   unsigned seconds, minutes, hours;

   timetick = timetick/100;   /* turn timetick into seconds */
 4020ce0:	e0ffff17 	ldw	r3,-4(fp)
 4020ce4:	00801904 	movi	r2,100
 4020ce8:	1885203a 	divu	r2,r3,r2
 4020cec:	e0bfff15 	stw	r2,-4(fp)
   seconds = (unsigned)(timetick%60);
 4020cf0:	e0ffff17 	ldw	r3,-4(fp)
 4020cf4:	00800f04 	movi	r2,60
 4020cf8:	1885203a 	divu	r2,r3,r2
 4020cfc:	10800f24 	muli	r2,r2,60
 4020d00:	1885c83a 	sub	r2,r3,r2
 4020d04:	e0bffe15 	stw	r2,-8(fp)
   timetick = timetick/60;    /* turn timetick into minutes */
 4020d08:	e0ffff17 	ldw	r3,-4(fp)
 4020d0c:	00800f04 	movi	r2,60
 4020d10:	1885203a 	divu	r2,r3,r2
 4020d14:	e0bfff15 	stw	r2,-4(fp)
   minutes = (unsigned)(timetick%60);
 4020d18:	e0ffff17 	ldw	r3,-4(fp)
 4020d1c:	00800f04 	movi	r2,60
 4020d20:	1885203a 	divu	r2,r3,r2
 4020d24:	10800f24 	muli	r2,r2,60
 4020d28:	1885c83a 	sub	r2,r3,r2
 4020d2c:	e0bffd15 	stw	r2,-12(fp)
   timetick = timetick/60;    /* turn timetick into hours */
 4020d30:	e0ffff17 	ldw	r3,-4(fp)
 4020d34:	00800f04 	movi	r2,60
 4020d38:	1885203a 	divu	r2,r3,r2
 4020d3c:	e0bfff15 	stw	r2,-4(fp)
   hours = (unsigned)(timetick%24);
 4020d40:	e0ffff17 	ldw	r3,-4(fp)
 4020d44:	00800604 	movi	r2,24
 4020d48:	1885203a 	divu	r2,r3,r2
 4020d4c:	10800624 	muli	r2,r2,24
 4020d50:	1885c83a 	sub	r2,r3,r2
 4020d54:	e0bffc15 	stw	r2,-16(fp)
   timetick = timetick/24;    /* turn timetick into days */
 4020d58:	e0ffff17 	ldw	r3,-4(fp)
 4020d5c:	00800604 	movi	r2,24
 4020d60:	1885203a 	divu	r2,r3,r2
 4020d64:	e0bfff15 	stw	r2,-4(fp)

   if (timetick)  /* Is there a whole number of days? */
 4020d68:	e0bfff17 	ldw	r2,-4(fp)
 4020d6c:	1005003a 	cmpeq	r2,r2,zero
 4020d70:	10000c1e 	bne	r2,zero,4020da4 <print_uptime+0xd8>
      sprintf(tistring, "%ld days, %dh:%dm:%ds", 
 4020d74:	e0bffd17 	ldw	r2,-12(fp)
 4020d78:	d8800015 	stw	r2,0(sp)
 4020d7c:	e0bffe17 	ldw	r2,-8(fp)
 4020d80:	d8800115 	stw	r2,4(sp)
 4020d84:	01010174 	movhi	r4,1029
 4020d88:	2103f604 	addi	r4,r4,4056
 4020d8c:	01410174 	movhi	r5,1029
 4020d90:	296c4f04 	addi	r5,r5,-20164
 4020d94:	e1bfff17 	ldw	r6,-4(fp)
 4020d98:	e1fffc17 	ldw	r7,-16(fp)
 4020d9c:	40021a80 	call	40021a8 <sprintf>
 4020da0:	00001406 	br	4020df4 <print_uptime+0x128>
    timetick, hours, minutes, seconds);
   else if (hours)
 4020da4:	e0bffc17 	ldw	r2,-16(fp)
 4020da8:	1005003a 	cmpeq	r2,r2,zero
 4020dac:	10000a1e 	bne	r2,zero,4020dd8 <print_uptime+0x10c>
      sprintf(tistring, "%d hours, %dm:%ds", hours, minutes, seconds);
 4020db0:	e0bffe17 	ldw	r2,-8(fp)
 4020db4:	d8800015 	stw	r2,0(sp)
 4020db8:	01010174 	movhi	r4,1029
 4020dbc:	2103f604 	addi	r4,r4,4056
 4020dc0:	01410174 	movhi	r5,1029
 4020dc4:	296c5504 	addi	r5,r5,-20140
 4020dc8:	e1bffc17 	ldw	r6,-16(fp)
 4020dcc:	e1fffd17 	ldw	r7,-12(fp)
 4020dd0:	40021a80 	call	40021a8 <sprintf>
 4020dd4:	00000706 	br	4020df4 <print_uptime+0x128>
   else
      sprintf(tistring, "%d minutes, %d sec.", minutes, seconds);
 4020dd8:	01010174 	movhi	r4,1029
 4020ddc:	2103f604 	addi	r4,r4,4056
 4020de0:	01410174 	movhi	r5,1029
 4020de4:	296c5a04 	addi	r5,r5,-20120
 4020de8:	e1bffd17 	ldw	r6,-12(fp)
 4020dec:	e1fffe17 	ldw	r7,-8(fp)
 4020df0:	40021a80 	call	40021a8 <sprintf>
   return tistring;
 4020df4:	00810174 	movhi	r2,1029
 4020df8:	1083f604 	addi	r2,r2,4056
}
 4020dfc:	e037883a 	mov	sp,fp
 4020e00:	dfc00117 	ldw	ra,4(sp)
 4020e04:	df000017 	ldw	fp,0(sp)
 4020e08:	dec00204 	addi	sp,sp,8
 4020e0c:	f800283a 	ret

04020e10 <panic>:
/* allow to be ifdeffed out on systems which already have a panic */
#ifndef PANIC_ALREADY

void
panic(char * msg)
{
 4020e10:	defffd04 	addi	sp,sp,-12
 4020e14:	dfc00215 	stw	ra,8(sp)
 4020e18:	df000115 	stw	fp,4(sp)
 4020e1c:	df000104 	addi	fp,sp,4
 4020e20:	e13fff15 	stw	r4,-4(fp)
   dprintf("panic: %s\n", msg);
 4020e24:	01010174 	movhi	r4,1029
 4020e28:	212c5f04 	addi	r4,r4,-20100
 4020e2c:	e17fff17 	ldw	r5,-4(fp)
 4020e30:	400207c0 	call	400207c <printf>
   dtrap();                   /* try to hook debugger */
 4020e34:	4025bb40 	call	4025bb4 <dtrap>
   netexit(1);                /* try to clean up */
 4020e38:	01000044 	movi	r4,1
 4020e3c:	403db080 	call	403db08 <netexit>
}
 4020e40:	e037883a 	mov	sp,fp
 4020e44:	dfc00117 	ldw	ra,4(sp)
 4020e48:	df000017 	ldw	fp,0(sp)
 4020e4c:	dec00204 	addi	sp,sp,8
 4020e50:	f800283a 	ret

04020e54 <print_eth>:

char     eth_prt_buf[18];  /* buffer for return */

char *   
print_eth(char * addr, char spacer)
{
 4020e54:	defffb04 	addi	sp,sp,-20
 4020e58:	df000415 	stw	fp,16(sp)
 4020e5c:	df000404 	addi	fp,sp,16
 4020e60:	e13ffe15 	stw	r4,-8(fp)
 4020e64:	e17fff05 	stb	r5,-4(fp)
   int   i;
   char *   out   =  eth_prt_buf;
 4020e68:	008101b4 	movhi	r2,1030
 4020e6c:	10a22504 	addi	r2,r2,-30572
 4020e70:	e0bffc15 	stw	r2,-16(fp)

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
 4020e74:	e03ffd15 	stw	zero,-12(fp)
 4020e78:	00004406 	br	4020f8c <print_eth+0x138>
   {
      /* high nibble */
      *out = (char)(((*addr >> 4) & 0x0f) + 0x30);
 4020e7c:	e0bffe17 	ldw	r2,-8(fp)
 4020e80:	10800003 	ldbu	r2,0(r2)
 4020e84:	10803fcc 	andi	r2,r2,255
 4020e88:	1080201c 	xori	r2,r2,128
 4020e8c:	10bfe004 	addi	r2,r2,-128
 4020e90:	1005d13a 	srai	r2,r2,4
 4020e94:	108003cc 	andi	r2,r2,15
 4020e98:	10800c04 	addi	r2,r2,48
 4020e9c:	1007883a 	mov	r3,r2
 4020ea0:	e0bffc17 	ldw	r2,-16(fp)
 4020ea4:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
 4020ea8:	e0bffc17 	ldw	r2,-16(fp)
 4020eac:	10800003 	ldbu	r2,0(r2)
 4020eb0:	10803fcc 	andi	r2,r2,255
 4020eb4:	1080201c 	xori	r2,r2,128
 4020eb8:	10bfe004 	addi	r2,r2,-128
 4020ebc:	10800e90 	cmplti	r2,r2,58
 4020ec0:	1000061e 	bne	r2,zero,4020edc <print_eth+0x88>
         (*out) += 7;
 4020ec4:	e0bffc17 	ldw	r2,-16(fp)
 4020ec8:	10800003 	ldbu	r2,0(r2)
 4020ecc:	108001c4 	addi	r2,r2,7
 4020ed0:	1007883a 	mov	r3,r2
 4020ed4:	e0bffc17 	ldw	r2,-16(fp)
 4020ed8:	10c00005 	stb	r3,0(r2)
      out++;
 4020edc:	e0bffc17 	ldw	r2,-16(fp)
 4020ee0:	10800044 	addi	r2,r2,1
 4020ee4:	e0bffc15 	stw	r2,-16(fp)

      /* low nibble */
      *out = (char)((*addr & 0x0f) + 0x30);  /* low nibble to digit */
 4020ee8:	e0bffe17 	ldw	r2,-8(fp)
 4020eec:	10800003 	ldbu	r2,0(r2)
 4020ef0:	108003cc 	andi	r2,r2,15
 4020ef4:	10800c04 	addi	r2,r2,48
 4020ef8:	1007883a 	mov	r3,r2
 4020efc:	e0bffc17 	ldw	r2,-16(fp)
 4020f00:	10c00005 	stb	r3,0(r2)
      if (*out > '9')   /* need to make it A-F? */
 4020f04:	e0bffc17 	ldw	r2,-16(fp)
 4020f08:	10800003 	ldbu	r2,0(r2)
 4020f0c:	10803fcc 	andi	r2,r2,255
 4020f10:	1080201c 	xori	r2,r2,128
 4020f14:	10bfe004 	addi	r2,r2,-128
 4020f18:	10800e90 	cmplti	r2,r2,58
 4020f1c:	1000061e 	bne	r2,zero,4020f38 <print_eth+0xe4>
         (*out) += 7;   /* eg 0x3a -> 0x41 ('A') */
 4020f20:	e0bffc17 	ldw	r2,-16(fp)
 4020f24:	10800003 	ldbu	r2,0(r2)
 4020f28:	108001c4 	addi	r2,r2,7
 4020f2c:	1007883a 	mov	r3,r2
 4020f30:	e0bffc17 	ldw	r2,-16(fp)
 4020f34:	10c00005 	stb	r3,0(r2)
      out++;
 4020f38:	e0bffc17 	ldw	r2,-16(fp)
 4020f3c:	10800044 	addi	r2,r2,1
 4020f40:	e0bffc15 	stw	r2,-16(fp)

      /* optional spacer character */
      if (spacer && i < 5)
 4020f44:	e0bfff07 	ldb	r2,-4(fp)
 4020f48:	1005003a 	cmpeq	r2,r2,zero
 4020f4c:	1000091e 	bne	r2,zero,4020f74 <print_eth+0x120>
 4020f50:	e0bffd17 	ldw	r2,-12(fp)
 4020f54:	10800148 	cmpgei	r2,r2,5
 4020f58:	1000061e 	bne	r2,zero,4020f74 <print_eth+0x120>
         *out++ = spacer;
 4020f5c:	e0fffc17 	ldw	r3,-16(fp)
 4020f60:	e0bfff03 	ldbu	r2,-4(fp)
 4020f64:	18800005 	stb	r2,0(r3)
 4020f68:	e0bffc17 	ldw	r2,-16(fp)
 4020f6c:	10800044 	addi	r2,r2,1
 4020f70:	e0bffc15 	stw	r2,-16(fp)
      addr++;
 4020f74:	e0bffe17 	ldw	r2,-8(fp)
 4020f78:	10800044 	addi	r2,r2,1
 4020f7c:	e0bffe15 	stw	r2,-8(fp)
{
   int   i;
   char *   out   =  eth_prt_buf;

   /* loop through 6 bytes of ethernet address */
   for (i = 0; i < 6; i++)
 4020f80:	e0bffd17 	ldw	r2,-12(fp)
 4020f84:	10800044 	addi	r2,r2,1
 4020f88:	e0bffd15 	stw	r2,-12(fp)
 4020f8c:	e0bffd17 	ldw	r2,-12(fp)
 4020f90:	10800190 	cmplti	r2,r2,6
 4020f94:	103fb91e 	bne	r2,zero,4020e7c <print_eth+0x28>
      /* optional spacer character */
      if (spacer && i < 5)
         *out++ = spacer;
      addr++;
   }
   *out = 0;
 4020f98:	e0bffc17 	ldw	r2,-16(fp)
 4020f9c:	10000005 	stb	zero,0(r2)
   return eth_prt_buf;
 4020fa0:	008101b4 	movhi	r2,1030
 4020fa4:	10a22504 	addi	r2,r2,-30572
}
 4020fa8:	e037883a 	mov	sp,fp
 4020fac:	df000017 	ldw	fp,0(sp)
 4020fb0:	dec00104 	addi	sp,sp,4
 4020fb4:	f800283a 	ret

04020fb8 <uslash>:
 * RETURNS:  pointer to formatted text
 */

char *   
uslash(char * path)
{
 4020fb8:	defffd04 	addi	sp,sp,-12
 4020fbc:	df000215 	stw	fp,8(sp)
 4020fc0:	df000204 	addi	fp,sp,8
 4020fc4:	e13fff15 	stw	r4,-4(fp)
   char *   cp;

   for (cp = path; *cp; cp++)
 4020fc8:	e0bfff17 	ldw	r2,-4(fp)
 4020fcc:	e0bffe15 	stw	r2,-8(fp)
 4020fd0:	00000d06 	br	4021008 <uslash+0x50>
      if (*cp == '\\')
 4020fd4:	e0bffe17 	ldw	r2,-8(fp)
 4020fd8:	10800003 	ldbu	r2,0(r2)
 4020fdc:	10803fcc 	andi	r2,r2,255
 4020fe0:	1080201c 	xori	r2,r2,128
 4020fe4:	10bfe004 	addi	r2,r2,-128
 4020fe8:	10801718 	cmpnei	r2,r2,92
 4020fec:	1000031e 	bne	r2,zero,4020ffc <uslash+0x44>
      *cp = '/';
 4020ff0:	e0fffe17 	ldw	r3,-8(fp)
 4020ff4:	00800bc4 	movi	r2,47
 4020ff8:	18800005 	stb	r2,0(r3)
char *   
uslash(char * path)
{
   char *   cp;

   for (cp = path; *cp; cp++)
 4020ffc:	e0bffe17 	ldw	r2,-8(fp)
 4021000:	10800044 	addi	r2,r2,1
 4021004:	e0bffe15 	stw	r2,-8(fp)
 4021008:	e0bffe17 	ldw	r2,-8(fp)
 402100c:	10800003 	ldbu	r2,0(r2)
 4021010:	10803fcc 	andi	r2,r2,255
 4021014:	1080201c 	xori	r2,r2,128
 4021018:	10bfe004 	addi	r2,r2,-128
 402101c:	1004c03a 	cmpne	r2,r2,zero
 4021020:	103fec1e 	bne	r2,zero,4020fd4 <uslash+0x1c>
      if (*cp == '\\')
      *cp = '/';
   return path;
 4021024:	e0bfff17 	ldw	r2,-4(fp)
}
 4021028:	e037883a 	mov	sp,fp
 402102c:	df000017 	ldw	fp,0(sp)
 4021030:	dec00104 	addi	sp,sp,4
 4021034:	f800283a 	ret

04021038 <ns_printf>:
 */
#ifndef ns_printf

int 
ns_printf(void * vio, char * format, ...)
{
 4021038:	defff204 	addi	sp,sp,-56
 402103c:	dfc00b15 	stw	ra,44(sp)
 4021040:	df000a15 	stw	fp,40(sp)
 4021044:	dc400915 	stw	r17,36(sp)
 4021048:	dc000815 	stw	r16,32(sp)
 402104c:	df000804 	addi	fp,sp,32
 4021050:	e13ffd15 	stw	r4,-12(fp)
 4021054:	e1800415 	stw	r6,16(fp)
 4021058:	e1c00515 	stw	r7,20(fp)
 402105c:	e17ffe15 	stw	r5,-8(fp)
   char *   outbuf=NULL;
 4021060:	e03ffb15 	stw	zero,-20(fp)
   int   ret_value   ;
   int   buf_size =  MAXIOSIZE   ;
 4021064:	00802704 	movi	r2,156
 4021068:	e0bff915 	stw	r2,-28(fp)
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
 402106c:	e0bffd17 	ldw	r2,-12(fp)
 4021070:	e0bff815 	stw	r2,-32(fp)
   int * next_arg=(int *)  &format;
   next_arg +=  sizeof(char *)/sizeof(int) ;
#endif   /* NATIVE_PRINTF || PRINTF_STRING */

   /* a NULL pio means just dump the output to stdout */
   if (pio == NULL)
 4021074:	e0bff817 	ldw	r2,-32(fp)
 4021078:	1004c03a 	cmpne	r2,r2,zero
 402107c:	1000091e 	bne	r2,zero,40210a4 <ns_printf+0x6c>
   {
#ifdef NATIVE_PRINTF
      /* use the target system's ANSI routines */
      va_start(argList,format);
 4021080:	e0800404 	addi	r2,fp,16
 4021084:	e0bffc15 	stw	r2,-16(fp)
      ret_value = vprintf(format,argList);
 4021088:	e17ffc17 	ldw	r5,-16(fp)
 402108c:	e13ffe17 	ldw	r4,-8(fp)
 4021090:	40465940 	call	4046594 <vprintf>
 4021094:	e0bffa15 	stw	r2,-24(fp)
      va_end(argList);
      return ret_value;
 4021098:	e0bffa17 	ldw	r2,-24(fp)
 402109c:	e0bfff15 	stw	r2,-4(fp)
 40210a0:	00003e06 	br	402119c <ns_printf+0x164>
      return strlen(format);
#endif   /* NATIVE_PRINTF */
   }

   /* Check if the output function is set */
   if (pio->out == NULL)
 40210a4:	e0bff817 	ldw	r2,-32(fp)
 40210a8:	10800117 	ldw	r2,4(r2)
 40210ac:	1004c03a 	cmpne	r2,r2,zero
 40210b0:	1000031e 	bne	r2,zero,40210c0 <ns_printf+0x88>
   {
      /* Programming mistake. Output function not set. */
      return -1;
 40210b4:	00bfffc4 	movi	r2,-1
 40210b8:	e0bfff15 	stw	r2,-4(fp)
 40210bc:	00003706 	br	402119c <ns_printf+0x164>

   /* Allocate memory for the output string 
    * If the format string is greater than MAXIOSIZE, then
    * we surely need to allocate a bigger block
    */
   ret_value = strlen(format); 
 40210c0:	e13ffe17 	ldw	r4,-8(fp)
 40210c4:	40029d00 	call	40029d0 <strlen>
 40210c8:	e0bffa15 	stw	r2,-24(fp)
   if (ret_value >= MAXIOSIZE)
 40210cc:	e0bffa17 	ldw	r2,-24(fp)
 40210d0:	10802710 	cmplti	r2,r2,156
 40210d4:	1000041e 	bne	r2,zero,40210e8 <ns_printf+0xb0>
   {
      buf_size += ret_value ;
 40210d8:	e0bff917 	ldw	r2,-28(fp)
 40210dc:	e0fffa17 	ldw	r3,-24(fp)
 40210e0:	10c5883a 	add	r2,r2,r3
 40210e4:	e0bff915 	stw	r2,-28(fp)
   }

   outbuf=(char *)npalloc(buf_size); 
 40210e8:	e13ff917 	ldw	r4,-28(fp)
 40210ec:	40265f80 	call	40265f8 <npalloc>
 40210f0:	e0bffb15 	stw	r2,-20(fp)

   if (outbuf == NULL)
 40210f4:	e0bffb17 	ldw	r2,-20(fp)
 40210f8:	1004c03a 	cmpne	r2,r2,zero
 40210fc:	1000031e 	bne	r2,zero,402110c <ns_printf+0xd4>
   {
      return -2;
 4021100:	00bfff84 	movi	r2,-2
 4021104:	e0bfff15 	stw	r2,-4(fp)
 4021108:	00002406 	br	402119c <ns_printf+0x164>

   /* Now populate the output string */

#ifdef NATIVE_PRINTF
   /* use the target system's ANSI routines */
   va_start(argList,format);
 402110c:	e0800404 	addi	r2,fp,16
 4021110:	e0bffc15 	stw	r2,-16(fp)
   ret_value = vsprintf(outbuf,format,argList);
 4021114:	e1bffc17 	ldw	r6,-16(fp)
 4021118:	e13ffb17 	ldw	r4,-20(fp)
 402111c:	e17ffe17 	ldw	r5,-8(fp)
 4021120:	40466040 	call	4046604 <vsprintf>
 4021124:	e0bffa15 	stw	r2,-24(fp)
#endif   /* PRINTF_STDARG */
#endif   /* NATIVE_PRINTF */

#ifdef NATIVE_PRINTF
   /* Check if we have overwritten the output buffer */
   if ((int)strlen(outbuf) > buf_size)
 4021128:	e13ffb17 	ldw	r4,-20(fp)
 402112c:	40029d00 	call	40029d0 <strlen>
 4021130:	1007883a 	mov	r3,r2
 4021134:	e0bff917 	ldw	r2,-28(fp)
 4021138:	10c0080e 	bge	r2,r3,402115c <ns_printf+0x124>
       */
      /* Yes , we have overwritten. Truncate the output string.
       * Some memory in the heap has been corrupted, but it is too
       * late to rectify.
       */
      panic("ns_printf:Buffer overflow");
 402113c:	01010174 	movhi	r4,1029
 4021140:	212c6204 	addi	r4,r4,-20088
 4021144:	4020e100 	call	4020e10 <panic>
      outbuf[buf_size-1]=0;   /* Null terminate the string */
 4021148:	e0fff917 	ldw	r3,-28(fp)
 402114c:	e0bffb17 	ldw	r2,-20(fp)
 4021150:	1885883a 	add	r2,r3,r2
 4021154:	10bfffc4 	addi	r2,r2,-1
 4021158:	10000005 	stb	zero,0(r2)
   }
#endif

   ret_value =(pio->out)(pio->id,outbuf,strlen(outbuf)) ;
 402115c:	e0bff817 	ldw	r2,-32(fp)
 4021160:	14400117 	ldw	r17,4(r2)
 4021164:	e0bff817 	ldw	r2,-32(fp)
 4021168:	14000217 	ldw	r16,8(r2)
 402116c:	e13ffb17 	ldw	r4,-20(fp)
 4021170:	40029d00 	call	40029d0 <strlen>
 4021174:	100d883a 	mov	r6,r2
 4021178:	8009883a 	mov	r4,r16
 402117c:	e17ffb17 	ldw	r5,-20(fp)
 4021180:	883ee83a 	callr	r17
 4021184:	e0bffa15 	stw	r2,-24(fp)

   /* Free memory for the output string */
   npfree(outbuf); 
 4021188:	e13ffb17 	ldw	r4,-20(fp)
 402118c:	40266ec0 	call	40266ec <npfree>

   /* since ns_printf() can get called repeatedly down in the bowels 
    * of a single command interpretting function, spin tk_yield() so 
    * that some packets get a chance to get received 
    */
   tk_yield();
 4021190:	4021aa00 	call	4021aa0 <tk_yield>

   return ret_value ;
 4021194:	e0bffa17 	ldw	r2,-24(fp)
 4021198:	e0bfff15 	stw	r2,-4(fp)
 402119c:	e0bfff17 	ldw	r2,-4(fp)
}
 40211a0:	e037883a 	mov	sp,fp
 40211a4:	dfc00317 	ldw	ra,12(sp)
 40211a8:	df000217 	ldw	fp,8(sp)
 40211ac:	dc400117 	ldw	r17,4(sp)
 40211b0:	dc000017 	ldw	r16,0(sp)
 40211b4:	dec00604 	addi	sp,sp,24
 40211b8:	f800283a 	ret

040211bc <std_out>:
 *
 * RETURNS: Number of bytes send to standard output. 
 */

int std_out(long s, char * buf, int len)
{
 40211bc:	defffb04 	addi	sp,sp,-20
 40211c0:	dfc00415 	stw	ra,16(sp)
 40211c4:	df000315 	stw	fp,12(sp)
 40211c8:	df000304 	addi	fp,sp,12
 40211cc:	e13ffd15 	stw	r4,-12(fp)
 40211d0:	e17ffe15 	stw	r5,-8(fp)
 40211d4:	e1bfff15 	stw	r6,-4(fp)
   /* puts(buf); - This does newline expansion return 
    * write(0,buf,len); - This doesn't printf(buf); - This has 
    * problems when printf format strings (eg %s) is part of data. 
    */
   printf("%s",buf);
 40211d8:	01010174 	movhi	r4,1029
 40211dc:	212c6904 	addi	r4,r4,-20060
 40211e0:	e17ffe17 	ldw	r5,-8(fp)
 40211e4:	400207c0 	call	400207c <printf>
   USE_ARG(s);
   return len;
 40211e8:	e0bfff17 	ldw	r2,-4(fp)
}
 40211ec:	e037883a 	mov	sp,fp
 40211f0:	dfc00117 	ldw	ra,4(sp)
 40211f4:	df000017 	ldw	fp,0(sp)
 40211f8:	dec00204 	addi	sp,sp,8
 40211fc:	f800283a 	ret

04021200 <con_page>:
 * RETURNS: 1 if we got a break, 0 to keep printing
 */

int
con_page(void * vio, int lines)
{
 4021200:	defff904 	addi	sp,sp,-28
 4021204:	dfc00615 	stw	ra,24(sp)
 4021208:	df000515 	stw	fp,20(sp)
 402120c:	df000504 	addi	fp,sp,20
 4021210:	e13ffd15 	stw	r4,-12(fp)
 4021214:	e17ffe15 	stw	r5,-8(fp)
   int   ch;
   GEN_IO pio = (GEN_IO)vio;  /* convert void* to our IO device type */
 4021218:	e0bffd17 	ldw	r2,-12(fp)
 402121c:	e0bffb15 	stw	r2,-20(fp)

   if (lines % 20 == 0)   /* Time to get user input */
 4021220:	e0fffe17 	ldw	r3,-8(fp)
 4021224:	00800504 	movi	r2,20
 4021228:	1885283a 	div	r2,r3,r2
 402122c:	10800524 	muli	r2,r2,20
 4021230:	1885c83a 	sub	r2,r3,r2
 4021234:	1004c03a 	cmpne	r2,r2,zero
 4021238:	1000281e 	bne	r2,zero,40212dc <con_page+0xdc>
   {
      if (pio && pio->getch)   /*if i/p func is supplied*/
 402123c:	e0bffb17 	ldw	r2,-20(fp)
 4021240:	1005003a 	cmpeq	r2,r2,zero
 4021244:	1000251e 	bne	r2,zero,40212dc <con_page+0xdc>
 4021248:	e0bffb17 	ldw	r2,-20(fp)
 402124c:	10800317 	ldw	r2,12(r2)
 4021250:	1005003a 	cmpeq	r2,r2,zero
 4021254:	1000211e 	bne	r2,zero,40212dc <con_page+0xdc>
      {
         ns_printf(pio,"....press any key for more (ESC to break)....");
 4021258:	e13ffb17 	ldw	r4,-20(fp)
 402125c:	01410174 	movhi	r5,1029
 4021260:	296c6a04 	addi	r5,r5,-20056
 4021264:	40210380 	call	4021038 <ns_printf>

         do 
         {
            ch = (pio->getch)(pio->id);
 4021268:	e0bffb17 	ldw	r2,-20(fp)
 402126c:	10c00317 	ldw	r3,12(r2)
 4021270:	e0bffb17 	ldw	r2,-20(fp)
 4021274:	11000217 	ldw	r4,8(r2)
 4021278:	183ee83a 	callr	r3
 402127c:	e0bffc15 	stw	r2,-16(fp)
            if (ch == 0)
 4021280:	e0bffc17 	ldw	r2,-16(fp)
 4021284:	1004c03a 	cmpne	r2,r2,zero
 4021288:	1000011e 	bne	r2,zero,4021290 <con_page+0x90>
               tk_yield();    /* Give timeslice to other processes */
 402128c:	4021aa00 	call	4021aa0 <tk_yield>
         } while (ch == 0) ;
 4021290:	e0bffc17 	ldw	r2,-16(fp)
 4021294:	1005003a 	cmpeq	r2,r2,zero
 4021298:	103ff31e 	bne	r2,zero,4021268 <con_page+0x68>

            /* if there is fatal error, we don't want to do any I/O */
         if (ch == -1)   /* fatal error */
 402129c:	e0bffc17 	ldw	r2,-16(fp)
 40212a0:	10bfffd8 	cmpnei	r2,r2,-1
 40212a4:	1000031e 	bne	r2,zero,40212b4 <con_page+0xb4>
            return 1 ;
 40212a8:	00800044 	movi	r2,1
 40212ac:	e0bfff15 	stw	r2,-4(fp)
 40212b0:	00000b06 	br	40212e0 <con_page+0xe0>

         ns_printf(pio,"\n");
 40212b4:	e13ffb17 	ldw	r4,-20(fp)
 40212b8:	01410174 	movhi	r5,1029
 40212bc:	296c4b04 	addi	r5,r5,-20180
 40212c0:	40210380 	call	4021038 <ns_printf>
         if (ch == 27)   /* ESC key pressed */
 40212c4:	e0bffc17 	ldw	r2,-16(fp)
 40212c8:	108006d8 	cmpnei	r2,r2,27
 40212cc:	1000031e 	bne	r2,zero,40212dc <con_page+0xdc>
            return 1 ;
 40212d0:	00800044 	movi	r2,1
 40212d4:	e0bfff15 	stw	r2,-4(fp)
 40212d8:	00000106 	br	40212e0 <con_page+0xe0>
      }
   }
   return  0;
 40212dc:	e03fff15 	stw	zero,-4(fp)
 40212e0:	e0bfff17 	ldw	r2,-4(fp)
}
 40212e4:	e037883a 	mov	sp,fp
 40212e8:	dfc00117 	ldw	ra,4(sp)
 40212ec:	df000017 	ldw	fp,0(sp)
 40212f0:	dec00204 	addi	sp,sp,8
 40212f4:	f800283a 	ret

040212f8 <parse_args>:

char **parse_args(char *buf, int argc, int *pargc_index)
{
 40212f8:	defff604 	addi	sp,sp,-40
 40212fc:	dfc00915 	stw	ra,36(sp)
 4021300:	df000815 	stw	fp,32(sp)
 4021304:	df000804 	addi	fp,sp,32
 4021308:	e13ffc15 	stw	r4,-16(fp)
 402130c:	e17ffd15 	stw	r5,-12(fp)
 4021310:	e1bffe15 	stw	r6,-8(fp)
   /* This routine assumes buf is a null terminated string */
   int i;
   int len;
   char *bp = buf;
 4021314:	e0bffc17 	ldw	r2,-16(fp)
 4021318:	e0bff915 	stw	r2,-28(fp)
   char **pargv = NULL;
 402131c:	e03ff815 	stw	zero,-32(fp)
   *pargc_index = 0;
 4021320:	e0bffe17 	ldw	r2,-8(fp)
 4021324:	10000015 	stw	zero,0(r2)
   if (buf == NULL)
 4021328:	e0bffc17 	ldw	r2,-16(fp)
 402132c:	1004c03a 	cmpne	r2,r2,zero
 4021330:	1000021e 	bne	r2,zero,402133c <parse_args+0x44>
   {
      return (NULL);
 4021334:	e03fff15 	stw	zero,-4(fp)
 4021338:	00007406 	br	402150c <parse_args+0x214>
   }
   len = strlen(buf);
 402133c:	e13ffc17 	ldw	r4,-16(fp)
 4021340:	40029d00 	call	40029d0 <strlen>
 4021344:	e0bffa15 	stw	r2,-24(fp)
   if (len <= 0)
 4021348:	e0bffa17 	ldw	r2,-24(fp)
 402134c:	10800048 	cmpgei	r2,r2,1
 4021350:	1000021e 	bne	r2,zero,402135c <parse_args+0x64>
   {
      return (NULL);
 4021354:	e03fff15 	stw	zero,-4(fp)
 4021358:	00006c06 	br	402150c <parse_args+0x214>
   }
   pargv = (char **) npalloc(argc * sizeof(char *));
 402135c:	e0bffd17 	ldw	r2,-12(fp)
 4021360:	1085883a 	add	r2,r2,r2
 4021364:	1085883a 	add	r2,r2,r2
 4021368:	1009883a 	mov	r4,r2
 402136c:	40265f80 	call	40265f8 <npalloc>
 4021370:	e0bff815 	stw	r2,-32(fp)
   if (pargv == NULL)
 4021374:	e0bff817 	ldw	r2,-32(fp)
 4021378:	1004c03a 	cmpne	r2,r2,zero
 402137c:	1000051e 	bne	r2,zero,4021394 <parse_args+0x9c>
   {
      return (NULL);
 4021380:	e03fff15 	stw	zero,-4(fp)
 4021384:	00006106 	br	402150c <parse_args+0x214>
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
 4021388:	e0bff917 	ldw	r2,-28(fp)
 402138c:	10800044 	addi	r2,r2,1
 4021390:	e0bff915 	stw	r2,-28(fp)
   if (pargv == NULL)
   {
      return (NULL);
   }
   /* skip the initial blanks if any */
   while (*bp == ' ')
 4021394:	e0bff917 	ldw	r2,-28(fp)
 4021398:	10800003 	ldbu	r2,0(r2)
 402139c:	10803fcc 	andi	r2,r2,255
 40213a0:	1080201c 	xori	r2,r2,128
 40213a4:	10bfe004 	addi	r2,r2,-128
 40213a8:	10800820 	cmpeqi	r2,r2,32
 40213ac:	103ff61e 	bne	r2,zero,4021388 <parse_args+0x90>
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
 40213b0:	00003206 	br	402147c <parse_args+0x184>
   {
      pargv[(*pargc_index)] = bp;
 40213b4:	e0bffe17 	ldw	r2,-8(fp)
 40213b8:	10800017 	ldw	r2,0(r2)
 40213bc:	1085883a 	add	r2,r2,r2
 40213c0:	1085883a 	add	r2,r2,r2
 40213c4:	1007883a 	mov	r3,r2
 40213c8:	e0bff817 	ldw	r2,-32(fp)
 40213cc:	1887883a 	add	r3,r3,r2
 40213d0:	e0bff917 	ldw	r2,-28(fp)
 40213d4:	18800015 	stw	r2,0(r3)
      (*pargc_index)++;
 40213d8:	e0bffe17 	ldw	r2,-8(fp)
 40213dc:	10800017 	ldw	r2,0(r2)
 40213e0:	10c00044 	addi	r3,r2,1
 40213e4:	e0bffe17 	ldw	r2,-8(fp)
 40213e8:	10c00015 	stw	r3,0(r2)
      while (*bp != ' ' && *bp != '\0')
 40213ec:	00000306 	br	40213fc <parse_args+0x104>
      {
         bp++; 
 40213f0:	e0bff917 	ldw	r2,-28(fp)
 40213f4:	10800044 	addi	r2,r2,1
 40213f8:	e0bff915 	stw	r2,-28(fp)
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
   {
      pargv[(*pargc_index)] = bp;
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
 40213fc:	e0bff917 	ldw	r2,-28(fp)
 4021400:	10800003 	ldbu	r2,0(r2)
 4021404:	10803fcc 	andi	r2,r2,255
 4021408:	1080201c 	xori	r2,r2,128
 402140c:	10bfe004 	addi	r2,r2,-128
 4021410:	10800820 	cmpeqi	r2,r2,32
 4021414:	10000b1e 	bne	r2,zero,4021444 <parse_args+0x14c>
 4021418:	e0bff917 	ldw	r2,-28(fp)
 402141c:	10800003 	ldbu	r2,0(r2)
 4021420:	10803fcc 	andi	r2,r2,255
 4021424:	1080201c 	xori	r2,r2,128
 4021428:	10bfe004 	addi	r2,r2,-128
 402142c:	1004c03a 	cmpne	r2,r2,zero
 4021430:	103fef1e 	bne	r2,zero,40213f0 <parse_args+0xf8>
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
 4021434:	00000306 	br	4021444 <parse_args+0x14c>
      {
         bp++; 
 4021438:	e0bff917 	ldw	r2,-28(fp)
 402143c:	10800044 	addi	r2,r2,1
 4021440:	e0bff915 	stw	r2,-28(fp)
      (*pargc_index)++;
      while (*bp != ' ' && *bp != '\0')
      {
         bp++; 
      }
      while (*bp == ' ' && *bp != '\0')
 4021444:	e0bff917 	ldw	r2,-28(fp)
 4021448:	10800003 	ldbu	r2,0(r2)
 402144c:	10803fcc 	andi	r2,r2,255
 4021450:	1080201c 	xori	r2,r2,128
 4021454:	10bfe004 	addi	r2,r2,-128
 4021458:	10800818 	cmpnei	r2,r2,32
 402145c:	1000071e 	bne	r2,zero,402147c <parse_args+0x184>
 4021460:	e0bff917 	ldw	r2,-28(fp)
 4021464:	10800003 	ldbu	r2,0(r2)
 4021468:	10803fcc 	andi	r2,r2,255
 402146c:	1080201c 	xori	r2,r2,128
 4021470:	10bfe004 	addi	r2,r2,-128
 4021474:	1004c03a 	cmpne	r2,r2,zero
 4021478:	103fef1e 	bne	r2,zero,4021438 <parse_args+0x140>
   /* skip the initial blanks if any */
   while (*bp == ' ')
   {
      bp++;
   }
   while ((*bp != '\0') && ((*pargc_index) < argc))
 402147c:	e0bff917 	ldw	r2,-28(fp)
 4021480:	10800003 	ldbu	r2,0(r2)
 4021484:	10803fcc 	andi	r2,r2,255
 4021488:	1080201c 	xori	r2,r2,128
 402148c:	10bfe004 	addi	r2,r2,-128
 4021490:	1005003a 	cmpeq	r2,r2,zero
 4021494:	1000041e 	bne	r2,zero,40214a8 <parse_args+0x1b0>
 4021498:	e0bffe17 	ldw	r2,-8(fp)
 402149c:	10c00017 	ldw	r3,0(r2)
 40214a0:	e0bffd17 	ldw	r2,-12(fp)
 40214a4:	18bfc316 	blt	r3,r2,40213b4 <parse_args+0xbc>
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
 40214a8:	e03ffb15 	stw	zero,-20(fp)
 40214ac:	00001206 	br	40214f8 <parse_args+0x200>
   {
      if (buf[i] == ' ')
 40214b0:	e0bffb17 	ldw	r2,-20(fp)
 40214b4:	1007883a 	mov	r3,r2
 40214b8:	e0bffc17 	ldw	r2,-16(fp)
 40214bc:	1885883a 	add	r2,r3,r2
 40214c0:	10800003 	ldbu	r2,0(r2)
 40214c4:	10803fcc 	andi	r2,r2,255
 40214c8:	1080201c 	xori	r2,r2,128
 40214cc:	10bfe004 	addi	r2,r2,-128
 40214d0:	10800818 	cmpnei	r2,r2,32
 40214d4:	1000051e 	bne	r2,zero,40214ec <parse_args+0x1f4>
         buf[i] = '\0';
 40214d8:	e0bffb17 	ldw	r2,-20(fp)
 40214dc:	1007883a 	mov	r3,r2
 40214e0:	e0bffc17 	ldw	r2,-16(fp)
 40214e4:	1885883a 	add	r2,r3,r2
 40214e8:	10000005 	stb	zero,0(r2)
      while (*bp == ' ' && *bp != '\0')
      {
         bp++; 
      }
   }
   for (i = 0; i < len; i++)
 40214ec:	e0bffb17 	ldw	r2,-20(fp)
 40214f0:	10800044 	addi	r2,r2,1
 40214f4:	e0bffb15 	stw	r2,-20(fp)
 40214f8:	e0fffb17 	ldw	r3,-20(fp)
 40214fc:	e0bffa17 	ldw	r2,-24(fp)
 4021500:	18bfeb16 	blt	r3,r2,40214b0 <parse_args+0x1b8>
   {
      printf("pargv[%d] = %s\n", i, pargv[i]);
   }
#endif

   return (pargv);
 4021504:	e0bff817 	ldw	r2,-32(fp)
 4021508:	e0bfff15 	stw	r2,-4(fp)
 402150c:	e0bfff17 	ldw	r2,-4(fp)
}
 4021510:	e037883a 	mov	sp,fp
 4021514:	dfc00117 	ldw	ra,4(sp)
 4021518:	df000017 	ldw	fp,0(sp)
 402151c:	dec00204 	addi	sp,sp,8
 4021520:	f800283a 	ret

04021524 <netmain>:
 * RETURNS: 
 */

int
netmain(void)
{
 4021524:	defffb04 	addi	sp,sp,-20
 4021528:	dfc00415 	stw	ra,16(sp)
 402152c:	df000315 	stw	fp,12(sp)
 4021530:	df000304 	addi	fp,sp,12
   int   i;
   int   e;

   iniche_net_ready = FALSE;
 4021534:	d0280a15 	stw	zero,-24536(gp)

   e = prep_modules();
 4021538:	4036bbc0 	call	4036bbc <prep_modules>
 402153c:	e0bffd15 	stw	r2,-12(fp)

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
 4021540:	e03ffe15 	stw	zero,-8(fp)
 4021544:	00001c06 	br	40215b8 <netmain+0x94>
   {
      e = TK_NEWTASK(&nettasks[i]);
 4021548:	e0bffe17 	ldw	r2,-8(fp)
 402154c:	10800624 	muli	r2,r2,24
 4021550:	1007883a 	mov	r3,r2
 4021554:	00810174 	movhi	r2,1029
 4021558:	10b8cc04 	addi	r2,r2,-7376
 402155c:	1889883a 	add	r4,r3,r2
 4021560:	4025f9c0 	call	4025f9c <TK_NEWTASK>
 4021564:	e0bffd15 	stw	r2,-12(fp)
      if (e != 0)
 4021568:	e0bffd17 	ldw	r2,-12(fp)
 402156c:	1005003a 	cmpeq	r2,r2,zero
 4021570:	10000e1e 	bne	r2,zero,40215ac <netmain+0x88>
      {
         dprintf("task create error\n");
 4021574:	01010174 	movhi	r4,1029
 4021578:	212c7c04 	addi	r4,r4,-19984
 402157c:	40021940 	call	4002194 <puts>
         panic((char *)&nettasks[i].name);
 4021580:	e0bffe17 	ldw	r2,-8(fp)
 4021584:	10800624 	muli	r2,r2,24
 4021588:	10c00104 	addi	r3,r2,4
 402158c:	00810174 	movhi	r2,1029
 4021590:	10b8cc04 	addi	r2,r2,-7376
 4021594:	1885883a 	add	r2,r3,r2
 4021598:	1009883a 	mov	r4,r2
 402159c:	4020e100 	call	4020e10 <panic>
         return -1;  /* compiler warnings */
 40215a0:	00bfffc4 	movi	r2,-1
 40215a4:	e0bfff15 	stw	r2,-4(fp)
 40215a8:	00001506 	br	4021600 <netmain+0xdc>
   iniche_net_ready = FALSE;

   e = prep_modules();

   /* Create the threads for net, timer, and apps */
   for (i = 0; i < num_net_tasks; i++)
 40215ac:	e0bffe17 	ldw	r2,-8(fp)
 40215b0:	10800044 	addi	r2,r2,1
 40215b4:	e0bffe15 	stw	r2,-8(fp)
 40215b8:	d0e02f17 	ldw	r3,-32580(gp)
 40215bc:	e0bffe17 	ldw	r2,-8(fp)
 40215c0:	10ffe116 	blt	r2,r3,4021548 <netmain+0x24>
         panic((char *)&nettasks[i].name);
         return -1;  /* compiler warnings */
      }
   }
   
   e = create_apptasks();
 40215c4:	40370800 	call	4037080 <create_apptasks>
 40215c8:	e0bffd15 	stw	r2,-12(fp)
   if (e != 0) 
 40215cc:	e0bffd17 	ldw	r2,-12(fp)
 40215d0:	1005003a 	cmpeq	r2,r2,zero
 40215d4:	1000091e 	bne	r2,zero,40215fc <netmain+0xd8>
   {
      dprintf("task create error\n");
 40215d8:	01010174 	movhi	r4,1029
 40215dc:	212c7c04 	addi	r4,r4,-19984
 40215e0:	40021940 	call	4002194 <puts>
      panic("netmain");
 40215e4:	01010174 	movhi	r4,1029
 40215e8:	212c8104 	addi	r4,r4,-19964
 40215ec:	4020e100 	call	4020e10 <panic>
      return -1;  /* compiler warnings */
 40215f0:	00bfffc4 	movi	r2,-1
 40215f4:	e0bfff15 	stw	r2,-4(fp)
 40215f8:	00000106 	br	4021600 <netmain+0xdc>
#ifdef MAIN_TASK_IS_NET
   tk_netmain(TK_NETMAINPARM);
   panic("net task return");
   return -1;
#else
   return 0;
 40215fc:	e03fff15 	stw	zero,-4(fp)
 4021600:	e0bfff17 	ldw	r2,-4(fp)
#endif
#endif   /* NO_INET_STACK */
}
 4021604:	e037883a 	mov	sp,fp
 4021608:	dfc00117 	ldw	ra,4(sp)
 402160c:	df000017 	ldw	fp,0(sp)
 4021610:	dec00204 	addi	sp,sp,8
 4021614:	f800283a 	ret

04021618 <tk_netmain>:
 * RETURNS: n/a
 */

#ifndef NO_INET_STACK
TK_ENTRY(tk_netmain)
{
 4021618:	defffc04 	addi	sp,sp,-16
 402161c:	dfc00315 	stw	ra,12(sp)
 4021620:	df000215 	stw	fp,8(sp)
 4021624:	df000204 	addi	fp,sp,8
 4021628:	e13fff15 	stw	r4,-4(fp)
   netmain_init(); /* initialize all modules */
 402162c:	40368440 	call	4036844 <netmain_init>

   iniche_net_ready = TRUE;    /* let the other threads spin */
 4021630:	00800044 	movi	r2,1
 4021634:	d0a80a15 	stw	r2,-24536(gp)
 4021638:	00000006 	br	402163c <tk_netmain+0x24>

   for (;;)
   {
      TK_NETRX_BLOCK();
 402163c:	00810174 	movhi	r2,1029
 4021640:	1081e704 	addi	r2,r2,1948
 4021644:	11000017 	ldw	r4,0(r2)
 4021648:	01401904 	movi	r5,100
 402164c:	e1bffe04 	addi	r6,fp,-8
 4021650:	40126f00 	call	40126f0 <OSSemPend>
 4021654:	e0bffe03 	ldbu	r2,-8(fp)
 4021658:	10803fcc 	andi	r2,r2,255
 402165c:	1005003a 	cmpeq	r2,r2,zero
 4021660:	1000051e 	bne	r2,zero,4021678 <tk_netmain+0x60>
 4021664:	e0bffe03 	ldbu	r2,-8(fp)
 4021668:	10803fcc 	andi	r2,r2,255
 402166c:	108002a0 	cmpeqi	r2,r2,10
 4021670:	1000011e 	bne	r2,zero,4021678 <tk_netmain+0x60>
 4021674:	4025bb40 	call	4025bb4 <dtrap>
      netmain_wakes++;  /* count wakeups */
 4021678:	d0a80817 	ldw	r2,-24544(gp)
 402167c:	10800044 	addi	r2,r2,1
 4021680:	d0a80815 	stw	r2,-24544(gp)

      /* see if there's newly received network packets */
      if (rcvdq.q_len)
 4021684:	008101b4 	movhi	r2,1030
 4021688:	10a14304 	addi	r2,r2,-31476
 402168c:	10800217 	ldw	r2,8(r2)
 4021690:	1005003a 	cmpeq	r2,r2,zero
 4021694:	103fe91e 	bne	r2,zero,402163c <tk_netmain+0x24>
         pktdemux();
 4021698:	401e2fc0 	call	401e2fc <pktdemux>
       * vital to a clean shutdown 
       */
#ifdef USE_LCD
      update_display();
#endif
   }
 402169c:	003fe706 	br	402163c <tk_netmain+0x24>

040216a0 <tk_nettick>:
extern   int dhc_second(void);
#endif

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
 40216a0:	defffd04 	addi	sp,sp,-12
 40216a4:	dfc00215 	stw	ra,8(sp)
 40216a8:	df000115 	stw	fp,4(sp)
 40216ac:	df000104 	addi	fp,sp,4
 40216b0:	e13fff15 	stw	r4,-4(fp)
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 40216b4:	00000306 	br	40216c4 <tk_nettick+0x24>
       * request and then we receive a NAK. At this point the DHCP
       * client is reset to INIT state and dhc_second() needs to be
       * run to restart it.
       */
#ifdef DHCP_CLIENT
      dhc_second();
 40216b8:	402420c0 	call	402420c <dhc_second>
#endif
      TK_SLEEP(1);
 40216bc:	01000084 	movi	r4,2
 40216c0:	40148840 	call	4014884 <OSTimeDly>

#ifndef NO_INET_TICK
TK_ENTRY(tk_nettick)
{
   /* wait till the stack is initialized */
   while (!iniche_net_ready)
 40216c4:	d0a80a17 	ldw	r2,-24536(gp)
 40216c8:	1005003a 	cmpeq	r2,r2,zero
 40216cc:	103ffa1e 	bne	r2,zero,40216b8 <tk_nettick+0x18>
      TK_SLEEP(1);
   }

   for (;;)
   {
      TK_SLEEP(SYS_SHORT_SLEEP);
 40216d0:	01000084 	movi	r4,2
 40216d4:	40148840 	call	4014884 <OSTimeDly>
      nettick_wakes++;  /* count wakeups */
 40216d8:	d0a80917 	ldw	r2,-24540(gp)
 40216dc:	10800044 	addi	r2,r2,1
 40216e0:	d0a80915 	stw	r2,-24540(gp)
      inet_timer();  /* let various timeouts occur */
 40216e4:	4036c140 	call	4036c14 <inet_timer>
      /* do not kill timers on net_system_exit. They may be
       * vital to a clean shutdown 
       */
   }
 40216e8:	003ff906 	br	40216d0 <tk_nettick+0x30>

040216ec <TK_OSTimeDly>:
u_char   TK_OSTaskQuery(void);



void TK_OSTimeDly(void)
{
 40216ec:	defffe04 	addi	sp,sp,-8
 40216f0:	dfc00115 	stw	ra,4(sp)
 40216f4:	df000015 	stw	fp,0(sp)
 40216f8:	d839883a 	mov	fp,sp
   OSTimeDly(2);
 40216fc:	01000084 	movi	r4,2
 4021700:	40148840 	call	4014884 <OSTimeDly>
}
 4021704:	e037883a 	mov	sp,fp
 4021708:	dfc00117 	ldw	ra,4(sp)
 402170c:	df000017 	ldw	fp,0(sp)
 4021710:	dec00204 	addi	sp,sp,8
 4021714:	f800283a 	ret

04021718 <TK_OSTaskResume>:



void TK_OSTaskResume(u_char * Id)
{
 4021718:	defffc04 	addi	sp,sp,-16
 402171c:	dfc00315 	stw	ra,12(sp)
 4021720:	df000215 	stw	fp,8(sp)
 4021724:	df000204 	addi	fp,sp,8
 4021728:	e13fff15 	stw	r4,-4(fp)
INT8U err;

   err = OSTaskResume(*Id);
 402172c:	e0bfff17 	ldw	r2,-4(fp)
 4021730:	10800003 	ldbu	r2,0(r2)
 4021734:	11003fcc 	andi	r4,r2,255
 4021738:	40140840 	call	4014084 <OSTaskResume>
 402173c:	e0bffe05 	stb	r2,-8(fp)
   
#ifdef NPDEBUG
   if ((err != OS_NO_ERR) && (err != OS_TASK_NOT_SUSPENDED))
 4021740:	e0bffe03 	ldbu	r2,-8(fp)
 4021744:	1005003a 	cmpeq	r2,r2,zero
 4021748:	10000a1e 	bne	r2,zero,4021774 <TK_OSTaskResume+0x5c>
 402174c:	e0bffe03 	ldbu	r2,-8(fp)
 4021750:	10801120 	cmpeqi	r2,r2,68
 4021754:	1000071e 	bne	r2,zero,4021774 <TK_OSTaskResume+0x5c>
   {
      dprintf("ChronOS API call failure, to Resume Suspended Task!\n");
 4021758:	01010174 	movhi	r4,1029
 402175c:	212c8304 	addi	r4,r4,-19956
 4021760:	40021940 	call	4002194 <puts>
      dtrap();
 4021764:	4025bb40 	call	4025bb4 <dtrap>
      panic("TK_OSTaskResume");      
 4021768:	01010174 	movhi	r4,1029
 402176c:	212c9004 	addi	r4,r4,-19904
 4021770:	4020e100 	call	4020e10 <panic>
   }
#endif
}
 4021774:	e037883a 	mov	sp,fp
 4021778:	dfc00117 	ldw	ra,4(sp)
 402177c:	df000017 	ldw	fp,0(sp)
 4021780:	dec00204 	addi	sp,sp,8
 4021784:	f800283a 	ret

04021788 <tcp_sleep>:
 *
 * RETURN: none
 */
void
tcp_sleep(void * event)
{
 4021788:	defffb04 	addi	sp,sp,-20
 402178c:	dfc00415 	stw	ra,16(sp)
 4021790:	df000315 	stw	fp,12(sp)
 4021794:	df000304 	addi	fp,sp,12
 4021798:	e13fff15 	stw	r4,-4(fp)
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
 402179c:	e03ffd15 	stw	zero,-12(fp)
 40217a0:	00005006 	br	40218e4 <tcp_sleep+0x15c>
   {
      if (global_TCPwakeup_set[i].soc_event == NULL)
 40217a4:	e0bffd17 	ldw	r2,-12(fp)
 40217a8:	00c101b4 	movhi	r3,1030
 40217ac:	18e2f304 	addi	r3,r3,-29748
 40217b0:	10800324 	muli	r2,r2,12
 40217b4:	10c5883a 	add	r2,r2,r3
 40217b8:	10800104 	addi	r2,r2,4
 40217bc:	10800017 	ldw	r2,0(r2)
 40217c0:	1004c03a 	cmpne	r2,r2,zero
 40217c4:	1000441e 	bne	r2,zero,40218d8 <tcp_sleep+0x150>
      {
         global_TCPwakeup_set[i].soc_event = event;
 40217c8:	e0bffd17 	ldw	r2,-12(fp)
 40217cc:	00c101b4 	movhi	r3,1030
 40217d0:	18e2f304 	addi	r3,r3,-29748
 40217d4:	10800324 	muli	r2,r2,12
 40217d8:	10c5883a 	add	r2,r2,r3
 40217dc:	10c00104 	addi	r3,r2,4
 40217e0:	e0bfff17 	ldw	r2,-4(fp)
 40217e4:	18800015 	stw	r2,0(r3)
         global_TCPwakeup_set[i].ctick = cticks;
 40217e8:	e13ffd17 	ldw	r4,-12(fp)
 40217ec:	00810174 	movhi	r2,1029
 40217f0:	1081e404 	addi	r2,r2,1936
 40217f4:	11400017 	ldw	r5,0(r2)
 40217f8:	00c101b4 	movhi	r3,1030
 40217fc:	18e2f304 	addi	r3,r3,-29748
 4021800:	20800324 	muli	r2,r4,12
 4021804:	10c5883a 	add	r2,r2,r3
 4021808:	11400015 	stw	r5,0(r2)
         if (i > global_TCPwakeup_setIndx)
 402180c:	00810174 	movhi	r2,1029
 4021810:	1081e304 	addi	r2,r2,1932
 4021814:	10c00017 	ldw	r3,0(r2)
 4021818:	e0bffd17 	ldw	r2,-12(fp)
 402181c:	1880040e 	bge	r3,r2,4021830 <tcp_sleep+0xa8>
            global_TCPwakeup_setIndx = i;
 4021820:	00c10174 	movhi	r3,1029
 4021824:	18c1e304 	addi	r3,r3,1932
 4021828:	e0bffd17 	ldw	r2,-12(fp)
 402182c:	18800015 	stw	r2,0(r3)

         tcp_sleep_count++;
 4021830:	00810174 	movhi	r2,1029
 4021834:	1081df04 	addi	r2,r2,1916
 4021838:	10800017 	ldw	r2,0(r2)
 402183c:	10c00044 	addi	r3,r2,1
 4021840:	00810174 	movhi	r2,1029
 4021844:	1081df04 	addi	r2,r2,1916
 4021848:	10c00015 	stw	r3,0(r2)

         /* Give up the lock before going to sleep. This can
          * potentially cause a context switch to the task
          * signaling the event.
          */
         UNLOCK_NET_RESOURCE(NET_RESID);
 402184c:	0009883a 	mov	r4,zero
 4021850:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

         /* don't wait forever in case we miss the event */
         OSSemPend(global_TCPwakeup_set[i].semaphore, TPS, &err);
 4021854:	e0bffd17 	ldw	r2,-12(fp)
 4021858:	00c101b4 	movhi	r3,1030
 402185c:	18e2f304 	addi	r3,r3,-29748
 4021860:	10800324 	muli	r2,r2,12
 4021864:	10c5883a 	add	r2,r2,r3
 4021868:	10800204 	addi	r2,r2,8
 402186c:	11000017 	ldw	r4,0(r2)
 4021870:	e1bffe04 	addi	r6,fp,-8
 4021874:	01401904 	movi	r5,100
 4021878:	40126f00 	call	40126f0 <OSSemPend>
         if (err == 10)
 402187c:	e0bffe03 	ldbu	r2,-8(fp)
 4021880:	10803fcc 	andi	r2,r2,255
 4021884:	10800298 	cmpnei	r2,r2,10
 4021888:	1000101e 	bne	r2,zero,40218cc <tcp_sleep+0x144>
         {
            ++tcp_sleep_timeout;
 402188c:	d0a80c17 	ldw	r2,-24528(gp)
 4021890:	10800044 	addi	r2,r2,1
 4021894:	d0a80c15 	stw	r2,-24528(gp)

            /* clear the entry */
            global_TCPwakeup_set[i].ctick = 0;
 4021898:	e0bffd17 	ldw	r2,-12(fp)
 402189c:	00c101b4 	movhi	r3,1030
 40218a0:	18e2f304 	addi	r3,r3,-29748
 40218a4:	10800324 	muli	r2,r2,12
 40218a8:	10c5883a 	add	r2,r2,r3
 40218ac:	10000015 	stw	zero,0(r2)
            global_TCPwakeup_set[i].soc_event = NULL;
 40218b0:	e0bffd17 	ldw	r2,-12(fp)
 40218b4:	00c101b4 	movhi	r3,1030
 40218b8:	18e2f304 	addi	r3,r3,-29748
 40218bc:	10800324 	muli	r2,r2,12
 40218c0:	10c5883a 	add	r2,r2,r3
 40218c4:	10800104 	addi	r2,r2,4
 40218c8:	10000015 	stw	zero,0(r2)
         }

         /* Regain the lock */
         LOCK_NET_RESOURCE(NET_RESID);
 40218cc:	0009883a 	mov	r4,zero
 40218d0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         return;
 40218d4:	00000f06 	br	4021914 <tcp_sleep+0x18c>
tcp_sleep(void * event)
{
   int i;
   INT8U err;

   for (i = 0; i < GLOBWAKE_SZ; i++)
 40218d8:	e0bffd17 	ldw	r2,-12(fp)
 40218dc:	10800044 	addi	r2,r2,1
 40218e0:	e0bffd15 	stw	r2,-12(fp)
 40218e4:	e0bffd17 	ldw	r2,-12(fp)
 40218e8:	10800510 	cmplti	r2,r2,20
 40218ec:	103fad1e 	bne	r2,zero,40217a4 <tcp_sleep+0x1c>

   /* The table is full. Try calling TK_YIELD() and hope for the best.
    * The user should increase the size of the table.
    * We'll record the max index for debugging purposes.
    */
   global_TCPwakeup_setIndx = i;
 40218f0:	00c10174 	movhi	r3,1029
 40218f4:	18c1e304 	addi	r3,r3,1932
 40218f8:	e0bffd17 	ldw	r2,-12(fp)
 40218fc:	18800015 	stw	r2,0(r3)

   UNLOCK_NET_RESOURCE(NET_RESID);
 4021900:	0009883a 	mov	r4,zero
 4021904:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   TK_YIELD();
 4021908:	4021aa00 	call	4021aa0 <tk_yield>
   LOCK_NET_RESOURCE(NET_RESID);
 402190c:	0009883a 	mov	r4,zero
 4021910:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
}
 4021914:	e037883a 	mov	sp,fp
 4021918:	dfc00117 	ldw	ra,4(sp)
 402191c:	df000017 	ldw	fp,0(sp)
 4021920:	dec00204 	addi	sp,sp,8
 4021924:	f800283a 	ret

04021928 <tcp_wakeup>:
 *
 * RETURN: none
 */
void
tcp_wakeup(void *event)
{
 4021928:	defffc04 	addi	sp,sp,-16
 402192c:	dfc00315 	stw	ra,12(sp)
 4021930:	df000215 	stw	fp,8(sp)
 4021934:	df000204 	addi	fp,sp,8
 4021938:	e13fff15 	stw	r4,-4(fp)
   int i;

   OSSchedLock();
 402193c:	400d6480 	call	400d648 <OSSchedLock>

   for (i = 0; i < GLOBWAKE_SZ; i++)
 4021940:	e03ffe15 	stw	zero,-8(fp)
 4021944:	00003006 	br	4021a08 <tcp_wakeup+0xe0>
   {
      if ((global_TCPwakeup_set[i].ctick != 0) &&
 4021948:	e0bffe17 	ldw	r2,-8(fp)
 402194c:	00c101b4 	movhi	r3,1030
 4021950:	18e2f304 	addi	r3,r3,-29748
 4021954:	10800324 	muli	r2,r2,12
 4021958:	10c5883a 	add	r2,r2,r3
 402195c:	10800017 	ldw	r2,0(r2)
 4021960:	1005003a 	cmpeq	r2,r2,zero
 4021964:	1000251e 	bne	r2,zero,40219fc <tcp_wakeup+0xd4>
 4021968:	e0bffe17 	ldw	r2,-8(fp)
 402196c:	00c101b4 	movhi	r3,1030
 4021970:	18e2f304 	addi	r3,r3,-29748
 4021974:	10800324 	muli	r2,r2,12
 4021978:	10c5883a 	add	r2,r2,r3
 402197c:	10800104 	addi	r2,r2,4
 4021980:	10c00017 	ldw	r3,0(r2)
 4021984:	e0bfff17 	ldw	r2,-4(fp)
 4021988:	18801c1e 	bne	r3,r2,40219fc <tcp_wakeup+0xd4>
          (global_TCPwakeup_set[i].soc_event == event))
      {
         /* signal the event */
         OSSemPost(global_TCPwakeup_set[i].semaphore);
 402198c:	e0bffe17 	ldw	r2,-8(fp)
 4021990:	00c101b4 	movhi	r3,1030
 4021994:	18e2f304 	addi	r3,r3,-29748
 4021998:	10800324 	muli	r2,r2,12
 402199c:	10c5883a 	add	r2,r2,r3
 40219a0:	10800204 	addi	r2,r2,8
 40219a4:	11000017 	ldw	r4,0(r2)
 40219a8:	4012ae80 	call	4012ae8 <OSSemPost>

         /* clear the entry */
         global_TCPwakeup_set[i].ctick = 0;
 40219ac:	e0bffe17 	ldw	r2,-8(fp)
 40219b0:	00c101b4 	movhi	r3,1030
 40219b4:	18e2f304 	addi	r3,r3,-29748
 40219b8:	10800324 	muli	r2,r2,12
 40219bc:	10c5883a 	add	r2,r2,r3
 40219c0:	10000015 	stw	zero,0(r2)
         global_TCPwakeup_set[i].soc_event = NULL;
 40219c4:	e0bffe17 	ldw	r2,-8(fp)
 40219c8:	00c101b4 	movhi	r3,1030
 40219cc:	18e2f304 	addi	r3,r3,-29748
 40219d0:	10800324 	muli	r2,r2,12
 40219d4:	10c5883a 	add	r2,r2,r3
 40219d8:	10800104 	addi	r2,r2,4
 40219dc:	10000015 	stw	zero,0(r2)

         tcp_wakeup_count++;
 40219e0:	00810174 	movhi	r2,1029
 40219e4:	1081e004 	addi	r2,r2,1920
 40219e8:	10800017 	ldw	r2,0(r2)
 40219ec:	10c00044 	addi	r3,r2,1
 40219f0:	00810174 	movhi	r2,1029
 40219f4:	1081e004 	addi	r2,r2,1920
 40219f8:	10c00015 	stw	r3,0(r2)
{
   int i;

   OSSchedLock();

   for (i = 0; i < GLOBWAKE_SZ; i++)
 40219fc:	e0bffe17 	ldw	r2,-8(fp)
 4021a00:	10800044 	addi	r2,r2,1
 4021a04:	e0bffe15 	stw	r2,-8(fp)
 4021a08:	e0bffe17 	ldw	r2,-8(fp)
 4021a0c:	10800510 	cmplti	r2,r2,20
 4021a10:	103fcd1e 	bne	r2,zero,4021948 <tcp_wakeup+0x20>

         tcp_wakeup_count++;
      }
   }

   OSSchedUnlock();
 4021a14:	400d6d40 	call	400d6d4 <OSSchedUnlock>
}
 4021a18:	e037883a 	mov	sp,fp
 4021a1c:	dfc00117 	ldw	ra,4(sp)
 4021a20:	df000017 	ldw	fp,0(sp)
 4021a24:	dec00204 	addi	sp,sp,8
 4021a28:	f800283a 	ret

04021a2c <TK_OSTaskQuery>:



u_char TK_OSTaskQuery(void)
{
 4021a2c:	deffe104 	addi	sp,sp,-124
 4021a30:	dfc01e15 	stw	ra,120(sp)
 4021a34:	df001d15 	stw	fp,116(sp)
 4021a38:	df001d04 	addi	fp,sp,116
   OS_TCB task_data;
   INT8U err, task_prio;

   err = OSTaskQuery(OS_PRIO_SELF, &task_data);
 4021a3c:	e17fe404 	addi	r5,fp,-112
 4021a40:	01003fc4 	movi	r4,255
 4021a44:	40146c40 	call	40146c4 <OSTaskQuery>
 4021a48:	e0bfe345 	stb	r2,-115(fp)

   if (err == OS_NO_ERR)
 4021a4c:	e0bfe343 	ldbu	r2,-115(fp)
 4021a50:	1004c03a 	cmpne	r2,r2,zero
 4021a54:	1000051e 	bne	r2,zero,4021a6c <TK_OSTaskQuery+0x40>
   {
      task_prio = task_data.OSTCBPrio;
 4021a58:	e0bff083 	ldbu	r2,-62(fp)
 4021a5c:	e0bfe305 	stb	r2,-116(fp)
      dprintf("ChronOS API call failure, unable to identify task!");
      panic("TK_OSTaskQuery");
      return 0;
   }
   
   return task_prio;
 4021a60:	e0bfe303 	ldbu	r2,-116(fp)
 4021a64:	e0bfff15 	stw	r2,-4(fp)
 4021a68:	00000706 	br	4021a88 <TK_OSTaskQuery+0x5c>
   {
      task_prio = task_data.OSTCBPrio;
   }
   else
   {
      dprintf("ChronOS API call failure, unable to identify task!");
 4021a6c:	01010174 	movhi	r4,1029
 4021a70:	212c9404 	addi	r4,r4,-19888
 4021a74:	400207c0 	call	400207c <printf>
      panic("TK_OSTaskQuery");
 4021a78:	01010174 	movhi	r4,1029
 4021a7c:	212ca104 	addi	r4,r4,-19836
 4021a80:	4020e100 	call	4020e10 <panic>
      return 0;
 4021a84:	e03fff15 	stw	zero,-4(fp)
 4021a88:	e0bfff17 	ldw	r2,-4(fp)
   }
   
   return task_prio;
}
 4021a8c:	e037883a 	mov	sp,fp
 4021a90:	dfc00117 	ldw	ra,4(sp)
 4021a94:	df000017 	ldw	fp,0(sp)
 4021a98:	dec00204 	addi	sp,sp,8
 4021a9c:	f800283a 	ret

04021aa0 <tk_yield>:



void
tk_yield(void)
{
 4021aa0:	defffe04 	addi	sp,sp,-8
 4021aa4:	dfc00115 	stw	ra,4(sp)
 4021aa8:	df000015 	stw	fp,0(sp)
 4021aac:	d839883a 	mov	fp,sp
   /* To ensure cycles to the lower priority tasks we should really
    * delay by two ticks, but that really hurts performance on some
    * long-tick targets. One tick works better overall....
    */
   OSTimeDly(1);
 4021ab0:	01000044 	movi	r4,1
 4021ab4:	40148840 	call	4014884 <OSTimeDly>
}
 4021ab8:	e037883a 	mov	sp,fp
 4021abc:	dfc00117 	ldw	ra,4(sp)
 4021ac0:	df000017 	ldw	fp,0(sp)
 4021ac4:	dec00204 	addi	sp,sp,8
 4021ac8:	f800283a 	ret

04021acc <tk_stats>:
extern struct inet_taskinfo * nettask;
extern int num_net_tasks;

int
tk_stats(void * pio)
{
 4021acc:	deffef04 	addi	sp,sp,-68
 4021ad0:	dfc01015 	stw	ra,64(sp)
 4021ad4:	df000f15 	stw	fp,60(sp)
 4021ad8:	df000f04 	addi	fp,sp,60
 4021adc:	e13fff15 	stw	r4,-4(fp)
   int      stackuse;
   char     name[OS_TASK_NAME_SIZE+1];
   INT8U    err;
   

   ns_printf(pio, "ChronOS RTOS stats:\n");
 4021ae0:	e13fff17 	ldw	r4,-4(fp)
 4021ae4:	01410174 	movhi	r5,1029
 4021ae8:	296ca504 	addi	r5,r5,-19820
 4021aec:	40210380 	call	4021038 <ns_printf>

#ifdef NO_INICHE_EXTENSIONS
   ns_printf(pio, "Context switches; Delay:  %lu\n",
 4021af0:	00810174 	movhi	r2,1029
 4021af4:	1081ac04 	addi	r2,r2,1712
 4021af8:	11800017 	ldw	r6,0(r2)
 4021afc:	e13fff17 	ldw	r4,-4(fp)
 4021b00:	01410174 	movhi	r5,1029
 4021b04:	296cab04 	addi	r5,r5,-19796
 4021b08:	40210380 	call	4021038 <ns_printf>
#else
   ns_printf(pio, "Context switches; Delay:  %lu, Interrupt: %lu\n",
      OSCtxSwCtr, OSCtxIntCtr);
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");
 4021b0c:	e13fff17 	ldw	r4,-4(fp)
 4021b10:	01410174 	movhi	r5,1029
 4021b14:	296cb304 	addi	r5,r5,-19764
 4021b18:	40210380 	call	4021038 <ns_printf>

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 4021b1c:	e03ff515 	stw	zero,-44(fp)
 4021b20:	00005106 	br	4021c68 <tk_stats+0x19c>
   {
      /* get pointer to TCB and see if entry is in use and not a mutex */
      tcb = OSTCBPrioTbl[t];
 4021b24:	e0bff517 	ldw	r2,-44(fp)
 4021b28:	00c101b4 	movhi	r3,1030
 4021b2c:	18e09604 	addi	r3,r3,-32168
 4021b30:	1085883a 	add	r2,r2,r2
 4021b34:	1085883a 	add	r2,r2,r2
 4021b38:	10c5883a 	add	r2,r2,r3
 4021b3c:	10800017 	ldw	r2,0(r2)
 4021b40:	e0bff415 	stw	r2,-48(fp)
      if ((tcb == NULL) || (tcb == (OS_TCB *)1))
 4021b44:	e0bff417 	ldw	r2,-48(fp)
 4021b48:	1005003a 	cmpeq	r2,r2,zero
 4021b4c:	1000431e 	bne	r2,zero,4021c5c <tk_stats+0x190>
 4021b50:	e0bff417 	ldw	r2,-48(fp)
 4021b54:	10800060 	cmpeqi	r2,r2,1
 4021b58:	1000401e 	bne	r2,zero,4021c5c <tk_stats+0x190>
         continue;

      OSTaskNameGet(tcb->OSTCBPrio, (INT8U *)&name, &err);
 4021b5c:	e0bff417 	ldw	r2,-48(fp)
 4021b60:	10800c83 	ldbu	r2,50(r2)
 4021b64:	11003fcc 	andi	r4,r2,255
 4021b68:	e17ff604 	addi	r5,fp,-40
 4021b6c:	e1bffe44 	addi	r6,fp,-7
 4021b70:	4013d080 	call	4013d08 <OSTaskNameGet>

#ifdef NO_INICHE_EXTENSIONS
      ns_printf(pio, "%15s %2d    0x%04x,    ---   ",
 4021b74:	e0bff417 	ldw	r2,-48(fp)
 4021b78:	10800c83 	ldbu	r2,50(r2)
 4021b7c:	11c03fcc 	andi	r7,r2,255
 4021b80:	e0bff417 	ldw	r2,-48(fp)
 4021b84:	10800c03 	ldbu	r2,48(r2)
 4021b88:	10803fcc 	andi	r2,r2,255
 4021b8c:	e1bff604 	addi	r6,fp,-40
 4021b90:	d8800015 	stw	r2,0(sp)
 4021b94:	e13fff17 	ldw	r4,-4(fp)
 4021b98:	01410174 	movhi	r5,1029
 4021b9c:	296cc304 	addi	r5,r5,-19700
 4021ba0:	40210380 	call	4021038 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
 4021ba4:	e0bff417 	ldw	r2,-48(fp)
 4021ba8:	10800217 	ldw	r2,8(r2)
 4021bac:	1005003a 	cmpeq	r2,r2,zero
 4021bb0:	1000261e 	bne	r2,zero,4021c4c <tk_stats+0x180>
 4021bb4:	e0bff417 	ldw	r2,-48(fp)
 4021bb8:	10800317 	ldw	r2,12(r2)
 4021bbc:	1005003a 	cmpeq	r2,r2,zero
 4021bc0:	1000221e 	bne	r2,zero,4021c4c <tk_stats+0x180>
      {
         sp = tcb->OSTCBStkBottom + 1;
 4021bc4:	e0bff417 	ldw	r2,-48(fp)
 4021bc8:	10800217 	ldw	r2,8(r2)
 4021bcc:	10800104 	addi	r2,r2,4
 4021bd0:	e0bff315 	stw	r2,-52(fp)
         while(*sp == 0)
 4021bd4:	00000306 	br	4021be4 <tk_stats+0x118>
            sp++;
 4021bd8:	e0bff317 	ldw	r2,-52(fp)
 4021bdc:	10800104 	addi	r2,r2,4
 4021be0:	e0bff315 	stw	r2,-52(fp)
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
      {
         sp = tcb->OSTCBStkBottom + 1;
         while(*sp == 0)
 4021be4:	e0bff317 	ldw	r2,-52(fp)
 4021be8:	10800017 	ldw	r2,0(r2)
 4021bec:	1005003a 	cmpeq	r2,r2,zero
 4021bf0:	103ff91e 	bne	r2,zero,4021bd8 <tk_stats+0x10c>
            sp++;
         /* This OS traditionally keeps the size in OS_STK (int) units rather
          * than bytes, so convert back to bytes for display.
          */
         stackuse = (tcb->OSTCBStkSize - (sp - tcb->OSTCBStkBottom)) * sizeof(OS_STK);
 4021bf4:	e0bff417 	ldw	r2,-48(fp)
 4021bf8:	11000317 	ldw	r4,12(r2)
 4021bfc:	e0fff317 	ldw	r3,-52(fp)
 4021c00:	e0bff417 	ldw	r2,-48(fp)
 4021c04:	10800217 	ldw	r2,8(r2)
 4021c08:	1885c83a 	sub	r2,r3,r2
 4021c0c:	1005d0ba 	srai	r2,r2,2
 4021c10:	2085c83a 	sub	r2,r4,r2
 4021c14:	1085883a 	add	r2,r2,r2
 4021c18:	1085883a 	add	r2,r2,r2
 4021c1c:	e0bff215 	stw	r2,-56(fp)
         ns_printf(pio, "%6d,      %6d\n",
 4021c20:	e0bff417 	ldw	r2,-48(fp)
 4021c24:	10800317 	ldw	r2,12(r2)
 4021c28:	1085883a 	add	r2,r2,r2
 4021c2c:	1085883a 	add	r2,r2,r2
 4021c30:	100d883a 	mov	r6,r2
 4021c34:	e13fff17 	ldw	r4,-4(fp)
 4021c38:	01410174 	movhi	r5,1029
 4021c3c:	296ccb04 	addi	r5,r5,-19668
 4021c40:	e1fff217 	ldw	r7,-56(fp)
 4021c44:	40210380 	call	4021038 <ns_printf>
      /* Find lowest non-zero value in stack so we can estimate the
       * unused portion. Subtracting this from size gives us the used
       * portion of the stack.
       */
#if OS_TASK_CREATE_EXT_EN > 0
      if(tcb->OSTCBStkBottom && tcb->OSTCBStkSize)
 4021c48:	00000406 	br	4021c5c <tk_stats+0x190>
            tcb->OSTCBStkSize * sizeof(OS_STK),  stackuse);
      }
      else
#endif
      {
         ns_printf(pio, "No stack data\n");
 4021c4c:	e13fff17 	ldw	r4,-4(fp)
 4021c50:	01410174 	movhi	r5,1029
 4021c54:	296ccf04 	addi	r5,r5,-19652
 4021c58:	40210380 	call	4021038 <ns_printf>
#endif

   ns_printf(pio, "       name     prio. state    wakeups stack-size stack-use \n");

   
   for (t = 0; t <= OS_LOWEST_PRIO ; t++)
 4021c5c:	e0bff517 	ldw	r2,-44(fp)
 4021c60:	10800044 	addi	r2,r2,1
 4021c64:	e0bff515 	stw	r2,-44(fp)
 4021c68:	e0bff517 	ldw	r2,-44(fp)
 4021c6c:	10800550 	cmplti	r2,r2,21
 4021c70:	103fac1e 	bne	r2,zero,4021b24 <tk_stats+0x58>
      {
         ns_printf(pio, "No stack data\n");
      }
   }

   ns_printf(pio, "tcp_sleep_count = %lu, tcp_wakeup_count = %lu\n",
 4021c74:	00810174 	movhi	r2,1029
 4021c78:	1081df04 	addi	r2,r2,1916
 4021c7c:	11800017 	ldw	r6,0(r2)
 4021c80:	00810174 	movhi	r2,1029
 4021c84:	1081e004 	addi	r2,r2,1920
 4021c88:	11c00017 	ldw	r7,0(r2)
 4021c8c:	e13fff17 	ldw	r4,-4(fp)
 4021c90:	01410174 	movhi	r5,1029
 4021c94:	296cd304 	addi	r5,r5,-19636
 4021c98:	40210380 	call	4021038 <ns_printf>
                  tcp_sleep_count, tcp_wakeup_count);
   ns_printf(pio, "global_TCPwakeup_setIndx = %d, tcp_sleep_timeout = %lu\n",
 4021c9c:	00810174 	movhi	r2,1029
 4021ca0:	1081e304 	addi	r2,r2,1932
 4021ca4:	11800017 	ldw	r6,0(r2)
 4021ca8:	d1e80c17 	ldw	r7,-24528(gp)
 4021cac:	e13fff17 	ldw	r4,-4(fp)
 4021cb0:	01410174 	movhi	r5,1029
 4021cb4:	296cdf04 	addi	r5,r5,-19588
 4021cb8:	40210380 	call	4021038 <ns_printf>
                  global_TCPwakeup_setIndx, tcp_sleep_timeout);

   return 0;
 4021cbc:	0005883a 	mov	r2,zero
}
 4021cc0:	e037883a 	mov	sp,fp
 4021cc4:	dfc00117 	ldw	ra,4(sp)
 4021cc8:	df000017 	ldw	fp,0(sp)
 4021ccc:	dec00204 	addi	sp,sp,8
 4021cd0:	f800283a 	ret

04021cd4 <dhc_get_srv_ipaddr>:
 * RETURNS: 
 */

ip_addr 
dhc_get_srv_ipaddr(u_char *options /* after magic cookie */) 
{
 4021cd4:	defffa04 	addi	sp,sp,-24
 4021cd8:	dfc00515 	stw	ra,20(sp)
 4021cdc:	df000415 	stw	fp,16(sp)
 4021ce0:	df000404 	addi	fp,sp,16
 4021ce4:	e13fff15 	stw	r4,-4(fp)
    u_char * opts;
    u_char   optlen;
   ip_addr srv_ipaddr = 0;
 4021ce8:	e03ffc15 	stw	zero,-16(fp)

   if ((opts = find_opt(DHOP_SERVER, options)) != NULL) 
 4021cec:	01000d84 	movi	r4,54
 4021cf0:	e17fff17 	ldw	r5,-4(fp)
 4021cf4:	4024c140 	call	4024c14 <find_opt>
 4021cf8:	e0bffe15 	stw	r2,-8(fp)
 4021cfc:	e0bffe17 	ldw	r2,-8(fp)
 4021d00:	1005003a 	cmpeq	r2,r2,zero
 4021d04:	1000111e 	bne	r2,zero,4021d4c <dhc_get_srv_ipaddr+0x78>
   {
      opts++;
 4021d08:	e0bffe17 	ldw	r2,-8(fp)
 4021d0c:	10800044 	addi	r2,r2,1
 4021d10:	e0bffe15 	stw	r2,-8(fp)
      optlen = *opts;
 4021d14:	e0bffe17 	ldw	r2,-8(fp)
 4021d18:	10800003 	ldbu	r2,0(r2)
 4021d1c:	e0bffd05 	stb	r2,-12(fp)
      opts++;
 4021d20:	e0bffe17 	ldw	r2,-8(fp)
 4021d24:	10800044 	addi	r2,r2,1
 4021d28:	e0bffe15 	stw	r2,-8(fp)
      srv_ipaddr = dh_getlong(opts);
 4021d2c:	e13ffe17 	ldw	r4,-8(fp)
 4021d30:	4023e840 	call	4023e84 <dh_getlong>
 4021d34:	e0bffc15 	stw	r2,-16(fp)
      opts += optlen;
 4021d38:	e0bffd03 	ldbu	r2,-12(fp)
 4021d3c:	1007883a 	mov	r3,r2
 4021d40:	e0bffe17 	ldw	r2,-8(fp)
 4021d44:	10c5883a 	add	r2,r2,r3
 4021d48:	e0bffe15 	stw	r2,-8(fp)
   }

   return (srv_ipaddr);
 4021d4c:	e0bffc17 	ldw	r2,-16(fp)
} 
 4021d50:	e037883a 	mov	sp,fp
 4021d54:	dfc00117 	ldw	ra,4(sp)
 4021d58:	df000017 	ldw	fp,0(sp)
 4021d5c:	dec00204 	addi	sp,sp,8
 4021d60:	f800283a 	ret

04021d64 <dhc_init>:
 * RETURNS: Returns 0 if OK, else negative error code from net.h file 
 */

int
dhc_init(void)
{
 4021d64:	defffb04 	addi	sp,sp,-20
 4021d68:	dfc00415 	stw	ra,16(sp)
 4021d6c:	df000315 	stw	fp,12(sp)
 4021d70:	df000304 	addi	fp,sp,12
   int   i;

   /* open UDP connection to receive incoming DHCP replys */
   dhc_conn = udp_open(0L,    /* wildcard foriegn host */
 4021d74:	00bfff44 	movi	r2,-3
 4021d78:	d8800015 	stw	r2,0(sp)
 4021d7c:	0009883a 	mov	r4,zero
 4021d80:	014010c4 	movi	r5,67
 4021d84:	01801104 	movi	r6,68
 4021d88:	01c100b4 	movhi	r7,1026
 4021d8c:	39c79904 	addi	r7,r7,7780
 4021d90:	40257040 	call	4025704 <udp_open>
 4021d94:	d0a80d15 	stw	r2,-24524(gp)
      BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT,
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
 4021d98:	d0a80d17 	ldw	r2,-24524(gp)
 4021d9c:	1004c03a 	cmpne	r2,r2,zero
 4021da0:	1000031e 	bne	r2,zero,4021db0 <dhc_init+0x4c>
      return ENP_RESOURCE;
 4021da4:	00bffa84 	movi	r2,-22
 4021da8:	e0bfff15 	stw	r2,-4(fp)
 4021dac:	00001606 	br	4021e08 <dhc_init+0xa4>

   for (i = 0; i < MAXNETS; i++)
 4021db0:	e03ffe15 	stw	zero,-8(fp)
 4021db4:	00001006 	br	4021df8 <dhc_init+0x94>
   {
      dhc_states[i].state = DHCS_UNUSED;
 4021db8:	e0bffe17 	ldw	r2,-8(fp)
 4021dbc:	00c101b4 	movhi	r3,1030
 4021dc0:	18e22e04 	addi	r3,r3,-30536
 4021dc4:	10800f24 	muli	r2,r2,60
 4021dc8:	10c5883a 	add	r2,r2,r3
 4021dcc:	10000015 	stw	zero,0(r2)
      dhc_states[i].tries = 0;
 4021dd0:	e0bffe17 	ldw	r2,-8(fp)
 4021dd4:	00c101b4 	movhi	r3,1030
 4021dd8:	18e22e04 	addi	r3,r3,-30536
 4021ddc:	10800f24 	muli	r2,r2,60
 4021de0:	10c5883a 	add	r2,r2,r3
 4021de4:	10800104 	addi	r2,r2,4
 4021de8:	10000015 	stw	zero,0(r2)
      dhc_upcall, DHCPDATA);

   if (!dhc_conn)
      return ENP_RESOURCE;

   for (i = 0; i < MAXNETS; i++)
 4021dec:	e0bffe17 	ldw	r2,-8(fp)
 4021df0:	10800044 	addi	r2,r2,1
 4021df4:	e0bffe15 	stw	r2,-8(fp)
 4021df8:	e0bffe17 	ldw	r2,-8(fp)
 4021dfc:	10800110 	cmplti	r2,r2,4
 4021e00:	103fed1e 	bne	r2,zero,4021db8 <dhc_init+0x54>
   {
      dhc_states[i].state = DHCS_UNUSED;
      dhc_states[i].tries = 0;
   }

   return 0;
 4021e04:	e03fff15 	stw	zero,-4(fp)
 4021e08:	e0bfff17 	ldw	r2,-4(fp)
}
 4021e0c:	e037883a 	mov	sp,fp
 4021e10:	dfc00117 	ldw	ra,4(sp)
 4021e14:	df000017 	ldw	fp,0(sp)
 4021e18:	dec00204 	addi	sp,sp,8
 4021e1c:	f800283a 	ret

04021e20 <dhc_set_callback>:
 * RETURNS: 
 */

void
dhc_set_callback(int iface, int (*routine)(int,int) )
{
 4021e20:	defffd04 	addi	sp,sp,-12
 4021e24:	df000215 	stw	fp,8(sp)
 4021e28:	df000204 	addi	fp,sp,8
 4021e2c:	e13ffe15 	stw	r4,-8(fp)
 4021e30:	e17fff15 	stw	r5,-4(fp)
   dhc_states[iface].callback = routine;
 4021e34:	e0bffe17 	ldw	r2,-8(fp)
 4021e38:	00c101b4 	movhi	r3,1030
 4021e3c:	18e22e04 	addi	r3,r3,-30536
 4021e40:	10800f24 	muli	r2,r2,60
 4021e44:	10c5883a 	add	r2,r2,r3
 4021e48:	10c00e04 	addi	r3,r2,56
 4021e4c:	e0bfff17 	ldw	r2,-4(fp)
 4021e50:	18800015 	stw	r2,0(r3)
}
 4021e54:	e037883a 	mov	sp,fp
 4021e58:	df000017 	ldw	fp,0(sp)
 4021e5c:	dec00104 	addi	sp,sp,4
 4021e60:	f800283a 	ret

04021e64 <dhc_upcall>:
 * returned
 */

int
dhc_upcall(PACKET pkt, void * data)
{
 4021e64:	defff204 	addi	sp,sp,-56
 4021e68:	dfc00d15 	stw	ra,52(sp)
 4021e6c:	df000c15 	stw	fp,48(sp)
 4021e70:	dc000b15 	stw	r16,44(sp)
 4021e74:	df000b04 	addi	fp,sp,44
 4021e78:	e13ffb15 	stw	r4,-20(fp)
 4021e7c:	e17ffc15 	stw	r5,-16(fp)
   struct bootp * bp;
   int      len      =  pkt->nb_plen;  /* len of UDP data - the bootp/dhcp struct */
 4021e80:	e0bffb17 	ldw	r2,-20(fp)
 4021e84:	10800417 	ldw	r2,16(r2)
 4021e88:	e0bff915 	stw	r2,-28(fp)
   int      dhcptype =  0;    /* DHCP type - not valid if bootp */
 4021e8c:	e03ff815 	stw	zero,-32(fp)
   int      e;
   int      iface;
   u_char * opts;          /* scratch options pointer */

   if (data != DHCPDATA)
 4021e90:	e0bffc17 	ldw	r2,-16(fp)
 4021e94:	10bfff60 	cmpeqi	r2,r2,-3
 4021e98:	1000041e 	bne	r2,zero,4021eac <dhc_upcall+0x48>
   {
      dtrap();
 4021e9c:	4025bb40 	call	4025bb4 <dtrap>
      return ENP_LOGIC;    /* internal logic error */
 4021ea0:	00bffd44 	movi	r2,-11
 4021ea4:	e0bffe15 	stw	r2,-8(fp)
 4021ea8:	0001f306 	br	4022678 <dhc_upcall+0x814>
   }

   /* punt if packet didn't come in a net we sent on */
   iface = net_num(pkt->net);
 4021eac:	e0bffb17 	ldw	r2,-20(fp)
 4021eb0:	11000617 	ldw	r4,24(r2)
 4021eb4:	401ed640 	call	401ed64 <if_netnumber>
 4021eb8:	e0bff615 	stw	r2,-40(fp)
   if (dhc_states[iface].state == DHCS_UNUSED)
 4021ebc:	e0bff617 	ldw	r2,-40(fp)
 4021ec0:	00c101b4 	movhi	r3,1030
 4021ec4:	18e22e04 	addi	r3,r3,-30536
 4021ec8:	10800f24 	muli	r2,r2,60
 4021ecc:	10c5883a 	add	r2,r2,r3
 4021ed0:	10800017 	ldw	r2,0(r2)
 4021ed4:	1004c03a 	cmpne	r2,r2,zero
 4021ed8:	1000031e 	bne	r2,zero,4021ee8 <dhc_upcall+0x84>
      return ENP_NOT_MINE;
 4021edc:	00c00084 	movi	r3,2
 4021ee0:	e0fffe15 	stw	r3,-8(fp)
 4021ee4:	0001e406 	br	4022678 <dhc_upcall+0x814>

   bp = (struct bootp *)pkt->nb_prot;
 4021ee8:	e0bffb17 	ldw	r2,-20(fp)
 4021eec:	10800317 	ldw	r2,12(r2)
 4021ef0:	e0bffa15 	stw	r2,-24(fp)

   /*   Validate various fields   */
   if ((len < (sizeof(struct bootp)-BOOTP_OPTSIZE) ) || 
 4021ef4:	e0bff917 	ldw	r2,-28(fp)
 4021ef8:	10803b30 	cmpltui	r2,r2,236
 4021efc:	10000b1e 	bne	r2,zero,4021f2c <dhc_upcall+0xc8>
 4021f00:	e0bffa17 	ldw	r2,-24(fp)
 4021f04:	10800003 	ldbu	r2,0(r2)
 4021f08:	10803fcc 	andi	r2,r2,255
 4021f0c:	10800098 	cmpnei	r2,r2,2
 4021f10:	1000061e 	bne	r2,zero,4021f2c <dhc_upcall+0xc8>
 4021f14:	e0bffa17 	ldw	r2,-24(fp)
 4021f18:	10803b04 	addi	r2,r2,236
 4021f1c:	10c00017 	ldw	r3,0(r2)
 4021f20:	0098d534 	movhi	r2,25428
 4021f24:	10a098c4 	addi	r2,r2,-32157
 4021f28:	18800726 	beq	r3,r2,4021f48 <dhc_upcall+0xe4>
       (bp->op != BOOTREPLY) ||
       (*(u_long*)(&bp->options) != RFC1084_MAGIC_COOKIE))
   {
      dtrap();
 4021f2c:	4025bb40 	call	4025bb4 <dtrap>
      dsc_errors++;
 4021f30:	d0a80e17 	ldw	r2,-24520(gp)
 4021f34:	10800044 	addi	r2,r2,1
 4021f38:	d0a80e15 	stw	r2,-24520(gp)
      return ENP_NOT_MINE;
 4021f3c:	01000084 	movi	r4,2
 4021f40:	e13ffe15 	stw	r4,-8(fp)
 4021f44:	0001cc06 	br	4022678 <dhc_upcall+0x814>
   }

   /* punt offers or replys which are not for me */
   if(MEMCMP(bp->chaddr, pkt->net->mib.ifPhysAddress, pkt->net->n_hal))
 4021f48:	e0bffa17 	ldw	r2,-24(fp)
 4021f4c:	11000704 	addi	r4,r2,28
 4021f50:	e0bffb17 	ldw	r2,-20(fp)
 4021f54:	10800617 	ldw	r2,24(r2)
 4021f58:	11401717 	ldw	r5,92(r2)
 4021f5c:	e0bffb17 	ldw	r2,-20(fp)
 4021f60:	10800617 	ldw	r2,24(r2)
 4021f64:	11801117 	ldw	r6,68(r2)
 4021f68:	404600c0 	call	404600c <memcmp>
 4021f6c:	1005003a 	cmpeq	r2,r2,zero
 4021f70:	1000031e 	bne	r2,zero,4021f80 <dhc_upcall+0x11c>
      return ENP_NOT_MINE;    /* not an error, just ignore it */
 4021f74:	00800084 	movi	r2,2
 4021f78:	e0bffe15 	stw	r2,-8(fp)
 4021f7c:	0001be06 	br	4022678 <dhc_upcall+0x814>

   /* see if it's full DHCP or plain bootp by looking for dhcp type option */
   opts = find_opt(DHOP_TYPE ,&bp->options[4]);
 4021f80:	e0bffa17 	ldw	r2,-24(fp)
 4021f84:	10803b04 	addi	r2,r2,236
 4021f88:	11400104 	addi	r5,r2,4
 4021f8c:	01000d44 	movi	r4,53
 4021f90:	4024c140 	call	4024c14 <find_opt>
 4021f94:	e0bff515 	stw	r2,-44(fp)
   if (opts && *opts == DHOP_TYPE)
 4021f98:	e0bff517 	ldw	r2,-44(fp)
 4021f9c:	1005003a 	cmpeq	r2,r2,zero
 4021fa0:	1000101e 	bne	r2,zero,4021fe4 <dhc_upcall+0x180>
 4021fa4:	e0bff517 	ldw	r2,-44(fp)
 4021fa8:	10800003 	ldbu	r2,0(r2)
 4021fac:	10803fcc 	andi	r2,r2,255
 4021fb0:	10800d58 	cmpnei	r2,r2,53
 4021fb4:	10000b1e 	bne	r2,zero,4021fe4 <dhc_upcall+0x180>
   {
      dhcptype = *(opts+2);
 4021fb8:	e0bff517 	ldw	r2,-44(fp)
 4021fbc:	10800084 	addi	r2,r2,2
 4021fc0:	10800003 	ldbu	r2,0(r2)
 4021fc4:	10803fcc 	andi	r2,r2,255
 4021fc8:	e0bff815 	stw	r2,-32(fp)
      bp->op |= ISDHCP;       /* tag packet for isdhcp() macro */
 4021fcc:	e0bffa17 	ldw	r2,-24(fp)
 4021fd0:	10800003 	ldbu	r2,0(r2)
 4021fd4:	10800114 	ori	r2,r2,4
 4021fd8:	1007883a 	mov	r3,r2
 4021fdc:	e0bffa17 	ldw	r2,-24(fp)
 4021fe0:	10c00005 	stb	r3,0(r2)
   }

   if (isdhcp(bp))
 4021fe4:	e0bffa17 	ldw	r2,-24(fp)
 4021fe8:	10800003 	ldbu	r2,0(r2)
 4021fec:	10803fcc 	andi	r2,r2,255
 4021ff0:	1080010c 	andi	r2,r2,4
 4021ff4:	1005003a 	cmpeq	r2,r2,zero
 4021ff8:	10017e1e 	bne	r2,zero,40225f4 <dhc_upcall+0x790>
   {
      switch (dhcptype)
 4021ffc:	e0fff817 	ldw	r3,-32(fp)
 4022000:	e0ffff15 	stw	r3,-4(fp)
 4022004:	e13fff17 	ldw	r4,-4(fp)
 4022008:	20800148 	cmpgei	r2,r4,5
 402200c:	1000071e 	bne	r2,zero,402202c <dhc_upcall+0x1c8>
 4022010:	e0ffff17 	ldw	r3,-4(fp)
 4022014:	188000c8 	cmpgei	r2,r3,3
 4022018:	1000081e 	bne	r2,zero,402203c <dhc_upcall+0x1d8>
 402201c:	e13fff17 	ldw	r4,-4(fp)
 4022020:	20800060 	cmpeqi	r2,r4,1
 4022024:	1000051e 	bne	r2,zero,402203c <dhc_upcall+0x1d8>
 4022028:	00000a06 	br	4022054 <dhc_upcall+0x1f0>
 402202c:	e0ffff17 	ldw	r3,-4(fp)
 4022030:	188001e0 	cmpeqi	r2,r3,7
 4022034:	1000011e 	bne	r2,zero,402203c <dhc_upcall+0x1d8>
 4022038:	00000606 	br	4022054 <dhc_upcall+0x1f0>
      {
      case DHCP_DISCOVER:
      case DHCP_REQUEST:
      case DHCP_DECLINE:
      case DHCP_RELEASE:
         dsc_errors++;     /* these should only be upcalled to a server */
 402203c:	d0a80e17 	ldw	r2,-24520(gp)
 4022040:	10800044 	addi	r2,r2,1
 4022044:	d0a80e15 	stw	r2,-24520(gp)
         return ENP_NOT_MINE;
 4022048:	01000084 	movi	r4,2
 402204c:	e13ffe15 	stw	r4,-8(fp)
 4022050:	00018906 	br	4022678 <dhc_upcall+0x814>
      }

      switch (dhc_states[iface].state)
 4022054:	e0bff617 	ldw	r2,-40(fp)
 4022058:	00c101b4 	movhi	r3,1030
 402205c:	18e22e04 	addi	r3,r3,-30536
 4022060:	10800f24 	muli	r2,r2,60
 4022064:	10c5883a 	add	r2,r2,r3
 4022068:	10800017 	ldw	r2,0(r2)
 402206c:	e0bffd15 	stw	r2,-12(fp)
 4022070:	e0fffd17 	ldw	r3,-12(fp)
 4022074:	18800268 	cmpgeui	r2,r3,9
 4022078:	1001541e 	bne	r2,zero,40225cc <dhc_upcall+0x768>
 402207c:	e13ffd17 	ldw	r4,-12(fp)
 4022080:	e13ffd17 	ldw	r4,-12(fp)
 4022084:	2105883a 	add	r2,r4,r4
 4022088:	1087883a 	add	r3,r2,r2
 402208c:	008100b4 	movhi	r2,1026
 4022090:	10882804 	addi	r2,r2,8352
 4022094:	1885883a 	add	r2,r3,r2
 4022098:	10800017 	ldw	r2,0(r2)
 402209c:	1000683a 	jmp	r2
 40220a0:	040225cc 	andi	r16,zero,2199
 40220a4:	040220c4 	movi	r16,2179
 40220a8:	040220c4 	movi	r16,2179
 40220ac:	04022318 	cmpnei	r16,zero,2188
 40220b0:	040220dc 	xori	r16,zero,2179
 40220b4:	04022260 	cmpeqi	r16,zero,2185
 40220b8:	040220c4 	movi	r16,2179
 40220bc:	04022260 	cmpeqi	r16,zero,2185
 40220c0:	04022260 	cmpeqi	r16,zero,2185
      case DHCS_INITREBOOT:
         /* How can we receive any response when we never sent one */
      case DHCS_BOUND:
         /* If there are multiple DHCP Servers, and one of them is slow
            in responding, we might get OFFER pkts when are in BOUND state */
         dsc_errors++;     /* these should only be upcalled to a server */
 40220c4:	d0a80e17 	ldw	r2,-24520(gp)
 40220c8:	10800044 	addi	r2,r2,1
 40220cc:	d0a80e15 	stw	r2,-24520(gp)
         return ENP_NOT_MINE;
 40220d0:	00800084 	movi	r2,2
 40220d4:	e0bffe15 	stw	r2,-8(fp)
 40220d8:	00016706 	br	4022678 <dhc_upcall+0x814>
      case DHCS_SELECTING:
         /* We will respond to the first offer packet that we receive ) */
         if ( dhcptype == DHCP_OFFER ) /* got offer back from server */
 40220dc:	e0bff817 	ldw	r2,-32(fp)
 40220e0:	10800098 	cmpnei	r2,r2,2
 40220e4:	1000521e 	bne	r2,zero,4022230 <dhc_upcall+0x3cc>
         {
            dsc_offers++;
 40220e8:	d0a81017 	ldw	r2,-24512(gp)
 40220ec:	10800044 	addi	r2,r2,1
 40220f0:	d0a81015 	stw	r2,-24512(gp)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]);
 40220f4:	e43ff617 	ldw	r16,-40(fp)
 40220f8:	e0bffa17 	ldw	r2,-24(fp)
 40220fc:	10803b04 	addi	r2,r2,236
 4022100:	11000104 	addi	r4,r2,4
 4022104:	4021cd40 	call	4021cd4 <dhc_get_srv_ipaddr>
 4022108:	1009883a 	mov	r4,r2
 402210c:	00c101b4 	movhi	r3,1030
 4022110:	18e22e04 	addi	r3,r3,-30536
 4022114:	80800f24 	muli	r2,r16,60
 4022118:	10c5883a 	add	r2,r2,r3
 402211c:	10800d04 	addi	r2,r2,52
 4022120:	11000015 	stw	r4,0(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
 4022124:	e0bff617 	ldw	r2,-40(fp)
 4022128:	00c101b4 	movhi	r3,1030
 402212c:	18e22e04 	addi	r3,r3,-30536
 4022130:	10800f24 	muli	r2,r2,60
 4022134:	10c5883a 	add	r2,r2,r3
 4022138:	10800d04 	addi	r2,r2,52
 402213c:	10800017 	ldw	r2,0(r2)
 4022140:	1004c03a 	cmpne	r2,r2,zero
 4022144:	10000d1e 	bne	r2,zero,402217c <dhc_upcall+0x318>
            {
               dtrap(); /* didn't receive server-identifier option */
 4022148:	4025bb40 	call	4025bb4 <dtrap>
               dsc_errors++;
 402214c:	d0a80e17 	ldw	r2,-24520(gp)
 4022150:	10800044 	addi	r2,r2,1
 4022154:	d0a80e15 	stw	r2,-24520(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 4022158:	e13ff617 	ldw	r4,-40(fp)
 402215c:	e0bffb17 	ldw	r2,-20(fp)
 4022160:	11400717 	ldw	r5,28(r2)
 4022164:	00c101b4 	movhi	r3,1030
 4022168:	18e22e04 	addi	r3,r3,-30536
 402216c:	20800f24 	muli	r2,r4,60
 4022170:	10c5883a 	add	r2,r2,r3
 4022174:	10800d04 	addi	r2,r2,52
 4022178:	11400015 	stw	r5,0(r2)
            }

            if (bp->hops)
 402217c:	e0bffa17 	ldw	r2,-24(fp)
 4022180:	108000c3 	ldbu	r2,3(r2)
 4022184:	10803fcc 	andi	r2,r2,255
 4022188:	1005003a 	cmpeq	r2,r2,zero
 402218c:	10000a1e 	bne	r2,zero,40221b8 <dhc_upcall+0x354>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 4022190:	e13ff617 	ldw	r4,-40(fp)
 4022194:	e0bffb17 	ldw	r2,-20(fp)
 4022198:	11400717 	ldw	r5,28(r2)
 402219c:	00c101b4 	movhi	r3,1030
 40221a0:	18e22e04 	addi	r3,r3,-30536
 40221a4:	20800f24 	muli	r2,r4,60
 40221a8:	10c5883a 	add	r2,r2,r3
 40221ac:	10800c04 	addi	r2,r2,48
 40221b0:	11400015 	stw	r5,0(r2)
 40221b4:	00000706 	br	40221d4 <dhc_upcall+0x370>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 40221b8:	e0bff617 	ldw	r2,-40(fp)
 40221bc:	00c101b4 	movhi	r3,1030
 40221c0:	18e22e04 	addi	r3,r3,-30536
 40221c4:	10800f24 	muli	r2,r2,60
 40221c8:	10c5883a 	add	r2,r2,r3
 40221cc:	10800c04 	addi	r2,r2,48
 40221d0:	10000015 	stw	zero,0(r2)

            e = dhc_rx_offer(iface,bp,pkt->nb_plen);     /* send request */
 40221d4:	e0bffb17 	ldw	r2,-20(fp)
 40221d8:	11800417 	ldw	r6,16(r2)
 40221dc:	e13ff617 	ldw	r4,-40(fp)
 40221e0:	e17ffa17 	ldw	r5,-24(fp)
 40221e4:	4022dc80 	call	4022dc8 <dhc_rx_offer>
 40221e8:	e0bff715 	stw	r2,-36(fp)
            if (e)
 40221ec:	e0bff717 	ldw	r2,-36(fp)
 40221f0:	1005003a 	cmpeq	r2,r2,zero
 40221f4:	10000a1e 	bne	r2,zero,4022220 <dhc_upcall+0x3bc>
            {
               dsc_errors++;
 40221f8:	d0a80e17 	ldw	r2,-24520(gp)
 40221fc:	10800044 	addi	r2,r2,1
 4022200:	d0a80e15 	stw	r2,-24520(gp)
               dhc_set_state(iface,DHCS_INIT);
 4022204:	e13ff617 	ldw	r4,-40(fp)
 4022208:	01400044 	movi	r5,1
 402220c:	4024b640 	call	4024b64 <dhc_set_state>
               dtrap();
 4022210:	4025bb40 	call	4025bb4 <dtrap>
               return ENP_NOT_MINE;
 4022214:	00c00084 	movi	r3,2
 4022218:	e0fffe15 	stw	r3,-8(fp)
 402221c:	00011606 	br	4022678 <dhc_upcall+0x814>
            }
            else
               dhc_set_state(iface,DHCS_REQUESTING);
 4022220:	e13ff617 	ldw	r4,-40(fp)
 4022224:	01400144 	movi	r5,5
 4022228:	4024b640 	call	4024b64 <dhc_set_state>
            dsc_errors++;
            if ( dhcptype == DHCP_NAK ) 
               dsc_naks++;
            return ENP_NOT_MINE;
         }
         break;
 402222c:	00010f06 	br	402266c <dhc_upcall+0x808>
             * Report an error and remain in SELECTING state, so that 
             * an OFFER packet from another DHCP server can be 
             * accepted. If we timeout waiting for a OFFER packet, 
             * then dhc_second() will transition to DHCS_INIT state. 
             */
            dsc_errors++;
 4022230:	d0a80e17 	ldw	r2,-24520(gp)
 4022234:	10800044 	addi	r2,r2,1
 4022238:	d0a80e15 	stw	r2,-24520(gp)
            if ( dhcptype == DHCP_NAK ) 
 402223c:	e0bff817 	ldw	r2,-32(fp)
 4022240:	10800198 	cmpnei	r2,r2,6
 4022244:	1000031e 	bne	r2,zero,4022254 <dhc_upcall+0x3f0>
               dsc_naks++;
 4022248:	d0a81617 	ldw	r2,-24488(gp)
 402224c:	10800044 	addi	r2,r2,1
 4022250:	d0a81615 	stw	r2,-24488(gp)
            return ENP_NOT_MINE;
 4022254:	01000084 	movi	r4,2
 4022258:	e13ffe15 	stw	r4,-8(fp)
 402225c:	00010606 	br	4022678 <dhc_upcall+0x814>
      case DHCS_RENEWING:
         /* If the ACK/NACK is not from the same server which sent 
          * the OFFER packet, then discard it. in DHCS_REBOOTING 
          * state, srv_ipaddr is 0. Hence don't check in that state 
          */
         if ( dhc_states[iface].srv_ipaddr != 
 4022260:	e0bff617 	ldw	r2,-40(fp)
 4022264:	00c101b4 	movhi	r3,1030
 4022268:	18e22e04 	addi	r3,r3,-30536
 402226c:	10800f24 	muli	r2,r2,60
 4022270:	10c5883a 	add	r2,r2,r3
 4022274:	10800d04 	addi	r2,r2,52
 4022278:	14000017 	ldw	r16,0(r2)
 402227c:	e0bffa17 	ldw	r2,-24(fp)
 4022280:	10803b04 	addi	r2,r2,236
 4022284:	11000104 	addi	r4,r2,4
 4022288:	4021cd40 	call	4021cd4 <dhc_get_srv_ipaddr>
 402228c:	80800626 	beq	r16,r2,40222a8 <dhc_upcall+0x444>
             dhc_get_srv_ipaddr(&bp->options[4]) )
         {
            dsc_errors++;
 4022290:	d0a80e17 	ldw	r2,-24520(gp)
 4022294:	10800044 	addi	r2,r2,1
 4022298:	d0a80e15 	stw	r2,-24520(gp)
            return ENP_NOT_MINE;
 402229c:	00800084 	movi	r2,2
 40222a0:	e0bffe15 	stw	r2,-8(fp)
 40222a4:	0000f406 	br	4022678 <dhc_upcall+0x814>
         }
         if (dhc_states[iface].rly_ipaddr &&
 40222a8:	e0bff617 	ldw	r2,-40(fp)
 40222ac:	00c101b4 	movhi	r3,1030
 40222b0:	18e22e04 	addi	r3,r3,-30536
 40222b4:	10800f24 	muli	r2,r2,60
 40222b8:	10c5883a 	add	r2,r2,r3
 40222bc:	10800c04 	addi	r2,r2,48
 40222c0:	10800017 	ldw	r2,0(r2)
 40222c4:	1005003a 	cmpeq	r2,r2,zero
 40222c8:	1000131e 	bne	r2,zero,4022318 <dhc_upcall+0x4b4>
 40222cc:	e0bff617 	ldw	r2,-40(fp)
 40222d0:	00c101b4 	movhi	r3,1030
 40222d4:	18e22e04 	addi	r3,r3,-30536
 40222d8:	10800f24 	muli	r2,r2,60
 40222dc:	10c5883a 	add	r2,r2,r3
 40222e0:	10800c04 	addi	r2,r2,48
 40222e4:	10c00017 	ldw	r3,0(r2)
 40222e8:	e0bffb17 	ldw	r2,-20(fp)
 40222ec:	10800717 	ldw	r2,28(r2)
 40222f0:	18800926 	beq	r3,r2,4022318 <dhc_upcall+0x4b4>
            (dhc_states[iface].rly_ipaddr != pkt->fhost))
         {
            dsc_rlyerrs++;
 40222f4:	d0a81917 	ldw	r2,-24476(gp)
 40222f8:	10800044 	addi	r2,r2,1
 40222fc:	d0a81915 	stw	r2,-24476(gp)
            dsc_errors++;
 4022300:	d0a80e17 	ldw	r2,-24520(gp)
 4022304:	10800044 	addi	r2,r2,1
 4022308:	d0a80e15 	stw	r2,-24520(gp)
            return ENP_NOT_MINE;
 402230c:	00c00084 	movi	r3,2
 4022310:	e0fffe15 	stw	r3,-8(fp)
 4022314:	0000d806 	br	4022678 <dhc_upcall+0x814>
         }
      case DHCS_REBOOTING:
         if ( dhcptype == DHCP_ACK )   /* Server OKed our request */
 4022318:	e0bff817 	ldw	r2,-32(fp)
 402231c:	10800158 	cmpnei	r2,r2,5
 4022320:	1000891e 	bne	r2,zero,4022548 <dhc_upcall+0x6e4>
         {
            dsc_acks++;
 4022324:	d0a81217 	ldw	r2,-24504(gp)
 4022328:	10800044 	addi	r2,r2,1
 402232c:	d0a81215 	stw	r2,-24504(gp)
            dhc_extract_opts(iface,&bp->options[4]);
 4022330:	e0bffa17 	ldw	r2,-24(fp)
 4022334:	10803b04 	addi	r2,r2,236
 4022338:	11400104 	addi	r5,r2,4
 402233c:	e13ff617 	ldw	r4,-40(fp)
 4022340:	4023f500 	call	4023f50 <dhc_extract_opts>
            if ( dhc_states[iface].lease == DHC_INFINITY )
 4022344:	e0bff617 	ldw	r2,-40(fp)
 4022348:	00c101b4 	movhi	r3,1030
 402234c:	18e22e04 	addi	r3,r3,-30536
 4022350:	10800f24 	muli	r2,r2,60
 4022354:	10c5883a 	add	r2,r2,r3
 4022358:	10800504 	addi	r2,r2,20
 402235c:	10800017 	ldw	r2,0(r2)
 4022360:	10bfffd8 	cmpnei	r2,r2,-1
 4022364:	1000111e 	bne	r2,zero,40223ac <dhc_upcall+0x548>
            {
               dhc_states[iface].t1 = DHC_INFINITY ;
 4022368:	e0bff617 	ldw	r2,-40(fp)
 402236c:	00c101b4 	movhi	r3,1030
 4022370:	18e22e04 	addi	r3,r3,-30536
 4022374:	10800f24 	muli	r2,r2,60
 4022378:	10c5883a 	add	r2,r2,r3
 402237c:	10c00604 	addi	r3,r2,24
 4022380:	00bfffc4 	movi	r2,-1
 4022384:	18800015 	stw	r2,0(r3)
               dhc_states[iface].t2 = DHC_INFINITY ;
 4022388:	e0bff617 	ldw	r2,-40(fp)
 402238c:	00c101b4 	movhi	r3,1030
 4022390:	18e22e04 	addi	r3,r3,-30536
 4022394:	10800f24 	muli	r2,r2,60
 4022398:	10c5883a 	add	r2,r2,r3
 402239c:	10c00704 	addi	r3,r2,28
 40223a0:	00bfffc4 	movi	r2,-1
 40223a4:	18800015 	stw	r2,0(r3)
 40223a8:	00001f06 	br	4022428 <dhc_upcall+0x5c4>
            }
            else
            {
               dhc_states[iface].t1 = dhc_states[iface].lease/2     ;
 40223ac:	e17ff617 	ldw	r5,-40(fp)
 40223b0:	e0bff617 	ldw	r2,-40(fp)
 40223b4:	00c101b4 	movhi	r3,1030
 40223b8:	18e22e04 	addi	r3,r3,-30536
 40223bc:	10800f24 	muli	r2,r2,60
 40223c0:	10c5883a 	add	r2,r2,r3
 40223c4:	10800504 	addi	r2,r2,20
 40223c8:	10800017 	ldw	r2,0(r2)
 40223cc:	1008d07a 	srli	r4,r2,1
 40223d0:	00c101b4 	movhi	r3,1030
 40223d4:	18e22e04 	addi	r3,r3,-30536
 40223d8:	28800f24 	muli	r2,r5,60
 40223dc:	10c5883a 	add	r2,r2,r3
 40223e0:	10800604 	addi	r2,r2,24
 40223e4:	11000015 	stw	r4,0(r2)
               dhc_states[iface].t2 = (dhc_states[iface].lease/8)*7 ;
 40223e8:	e17ff617 	ldw	r5,-40(fp)
 40223ec:	e0bff617 	ldw	r2,-40(fp)
 40223f0:	00c101b4 	movhi	r3,1030
 40223f4:	18e22e04 	addi	r3,r3,-30536
 40223f8:	10800f24 	muli	r2,r2,60
 40223fc:	10c5883a 	add	r2,r2,r3
 4022400:	10800504 	addi	r2,r2,20
 4022404:	10800017 	ldw	r2,0(r2)
 4022408:	1004d0fa 	srli	r2,r2,3
 402240c:	110001e4 	muli	r4,r2,7
 4022410:	00c101b4 	movhi	r3,1030
 4022414:	18e22e04 	addi	r3,r3,-30536
 4022418:	28800f24 	muli	r2,r5,60
 402241c:	10c5883a 	add	r2,r2,r3
 4022420:	10800704 	addi	r2,r2,28
 4022424:	11000015 	stw	r4,0(r2)
            }
            dhc_states[iface].lease_start = cticks;   /* to calc lease expiry */
 4022428:	e13ff617 	ldw	r4,-40(fp)
 402242c:	00810174 	movhi	r2,1029
 4022430:	1081e404 	addi	r2,r2,1936
 4022434:	11400017 	ldw	r5,0(r2)
 4022438:	00c101b4 	movhi	r3,1030
 402243c:	18e22e04 	addi	r3,r3,-30536
 4022440:	20800f24 	muli	r2,r4,60
 4022444:	10c5883a 	add	r2,r2,r3
 4022448:	10800804 	addi	r2,r2,32
 402244c:	11400015 	stw	r5,0(r2)
            dhc_states[iface].srv_ipaddr = dhc_get_srv_ipaddr(&bp->options[4]); 
 4022450:	e43ff617 	ldw	r16,-40(fp)
 4022454:	e0bffa17 	ldw	r2,-24(fp)
 4022458:	10803b04 	addi	r2,r2,236
 402245c:	11000104 	addi	r4,r2,4
 4022460:	4021cd40 	call	4021cd4 <dhc_get_srv_ipaddr>
 4022464:	1009883a 	mov	r4,r2
 4022468:	00c101b4 	movhi	r3,1030
 402246c:	18e22e04 	addi	r3,r3,-30536
 4022470:	80800f24 	muli	r2,r16,60
 4022474:	10c5883a 	add	r2,r2,r3
 4022478:	10800d04 	addi	r2,r2,52
 402247c:	11000015 	stw	r4,0(r2)
            if (dhc_states[iface].srv_ipaddr == 0 )
 4022480:	e0bff617 	ldw	r2,-40(fp)
 4022484:	00c101b4 	movhi	r3,1030
 4022488:	18e22e04 	addi	r3,r3,-30536
 402248c:	10800f24 	muli	r2,r2,60
 4022490:	10c5883a 	add	r2,r2,r3
 4022494:	10800d04 	addi	r2,r2,52
 4022498:	10800017 	ldw	r2,0(r2)
 402249c:	1004c03a 	cmpne	r2,r2,zero
 40224a0:	10000d1e 	bne	r2,zero,40224d8 <dhc_upcall+0x674>
            {
               dtrap(); /* didn't receive server-identifier option */
 40224a4:	4025bb40 	call	4025bb4 <dtrap>
               dsc_errors++;
 40224a8:	d0a80e17 	ldw	r2,-24520(gp)
 40224ac:	10800044 	addi	r2,r2,1
 40224b0:	d0a80e15 	stw	r2,-24520(gp)
               dhc_states[iface].srv_ipaddr = pkt->fhost;   /* Try using fhost */
 40224b4:	e13ff617 	ldw	r4,-40(fp)
 40224b8:	e0bffb17 	ldw	r2,-20(fp)
 40224bc:	11400717 	ldw	r5,28(r2)
 40224c0:	00c101b4 	movhi	r3,1030
 40224c4:	18e22e04 	addi	r3,r3,-30536
 40224c8:	20800f24 	muli	r2,r4,60
 40224cc:	10c5883a 	add	r2,r2,r3
 40224d0:	10800d04 	addi	r2,r2,52
 40224d4:	11400015 	stw	r5,0(r2)
            }
            if (bp->hops)
 40224d8:	e0bffa17 	ldw	r2,-24(fp)
 40224dc:	108000c3 	ldbu	r2,3(r2)
 40224e0:	10803fcc 	andi	r2,r2,255
 40224e4:	1005003a 	cmpeq	r2,r2,zero
 40224e8:	10000a1e 	bne	r2,zero,4022514 <dhc_upcall+0x6b0>
            {
               /* OFFER is received via DHCP Relay Agent. Remember the
                * IP addr of DHCP Relay Agent, so that packets from other
                * DHCP Relay Agents can be discarded 
                */
               dhc_states[iface].rly_ipaddr = pkt->fhost;   /* Try using fhost */
 40224ec:	e13ff617 	ldw	r4,-40(fp)
 40224f0:	e0bffb17 	ldw	r2,-20(fp)
 40224f4:	11400717 	ldw	r5,28(r2)
 40224f8:	00c101b4 	movhi	r3,1030
 40224fc:	18e22e04 	addi	r3,r3,-30536
 4022500:	20800f24 	muli	r2,r4,60
 4022504:	10c5883a 	add	r2,r2,r3
 4022508:	10800c04 	addi	r2,r2,48
 402250c:	11400015 	stw	r5,0(r2)
 4022510:	00000706 	br	4022530 <dhc_upcall+0x6cc>
            }
            else
               dhc_states[iface].rly_ipaddr = 0;
 4022514:	e0bff617 	ldw	r2,-40(fp)
 4022518:	00c101b4 	movhi	r3,1030
 402251c:	18e22e04 	addi	r3,r3,-30536
 4022520:	10800f24 	muli	r2,r2,60
 4022524:	10c5883a 	add	r2,r2,r3
 4022528:	10800c04 	addi	r2,r2,48
 402252c:	10000015 	stw	zero,0(r2)

            dhc_setip(iface);
 4022530:	e13ff617 	ldw	r4,-40(fp)
 4022534:	4023a080 	call	4023a08 <dhc_setip>
            dhc_set_state(iface,DHCS_BOUND);
 4022538:	e13ff617 	ldw	r4,-40(fp)
 402253c:	01400184 	movi	r5,6
 4022540:	4024b640 	call	4024b64 <dhc_set_state>
 4022544:	00004906 	br	402266c <dhc_upcall+0x808>
         }
         else if ( dhcptype == DHCP_NAK ) /* Server denied our request */
 4022548:	e0bff817 	ldw	r2,-32(fp)
 402254c:	10800198 	cmpnei	r2,r2,6
 4022550:	1000071e 	bne	r2,zero,4022570 <dhc_upcall+0x70c>
         {
            dhc_set_state(iface,DHCS_INIT);
 4022554:	e13ff617 	ldw	r4,-40(fp)
 4022558:	01400044 	movi	r5,1
 402255c:	4024b640 	call	4024b64 <dhc_set_state>
            dsc_naks++;
 4022560:	d0a81617 	ldw	r2,-24488(gp)
 4022564:	10800044 	addi	r2,r2,1
 4022568:	d0a81615 	stw	r2,-24488(gp)
 402256c:	00003f06 	br	402266c <dhc_upcall+0x808>
         {
            /* In REQUESTING state, we might receive a retransmitted
             * OFFER, which we should discard, but it's not an error,
             * so we log it.
             */
            if ((dhc_states[iface].state == DHCS_REQUESTING) &&
 4022570:	e0bff617 	ldw	r2,-40(fp)
 4022574:	00c101b4 	movhi	r3,1030
 4022578:	18e22e04 	addi	r3,r3,-30536
 402257c:	10800f24 	muli	r2,r2,60
 4022580:	10c5883a 	add	r2,r2,r3
 4022584:	10800017 	ldw	r2,0(r2)
 4022588:	10800158 	cmpnei	r2,r2,5
 402258c:	1000091e 	bne	r2,zero,40225b4 <dhc_upcall+0x750>
 4022590:	e0bff817 	ldw	r2,-32(fp)
 4022594:	10800098 	cmpnei	r2,r2,2
 4022598:	1000061e 	bne	r2,zero,40225b4 <dhc_upcall+0x750>
                (dhcptype == DHCP_OFFER))
            {
               dsc_offers++;
 402259c:	d0a81017 	ldw	r2,-24512(gp)
 40225a0:	10800044 	addi	r2,r2,1
 40225a4:	d0a81015 	stw	r2,-24512(gp)
               return ENP_NOT_MINE;
 40225a8:	01000084 	movi	r4,2
 40225ac:	e13ffe15 	stw	r4,-8(fp)
 40225b0:	00003106 	br	4022678 <dhc_upcall+0x814>
             * only receive ACK or NAK, and in REQUESTING state we
             * should only receive ACK or NAK or OFFER; these are
             * accounted for above, so we log whatever this is as an
             * error and discard it with no change to our state.
             */
            dsc_errors++;
 40225b4:	d0a80e17 	ldw	r2,-24520(gp)
 40225b8:	10800044 	addi	r2,r2,1
 40225bc:	d0a80e15 	stw	r2,-24520(gp)
            return ENP_NOT_MINE;
 40225c0:	00800084 	movi	r2,2
 40225c4:	e0bffe15 	stw	r2,-8(fp)
 40225c8:	00002b06 	br	4022678 <dhc_upcall+0x814>
         }
         break;
      default:    /* bad state */
         dtrap();
 40225cc:	4025bb40 	call	4025bb4 <dtrap>
         dhc_set_state(iface,DHCS_INIT);
 40225d0:	e13ff617 	ldw	r4,-40(fp)
 40225d4:	01400044 	movi	r5,1
 40225d8:	4024b640 	call	4024b64 <dhc_set_state>
         dsc_errors++;
 40225dc:	d0a80e17 	ldw	r2,-24520(gp)
 40225e0:	10800044 	addi	r2,r2,1
 40225e4:	d0a80e15 	stw	r2,-24520(gp)
         return -1;
 40225e8:	00ffffc4 	movi	r3,-1
 40225ec:	e0fffe15 	stw	r3,-8(fp)
 40225f0:	00002106 	br	4022678 <dhc_upcall+0x814>
      }
   }
   else     /* plain bootp reply */
   {
      dsc_bpreplys++;
 40225f4:	d0a81317 	ldw	r2,-24500(gp)
 40225f8:	10800044 	addi	r2,r2,1
 40225fc:	d0a81315 	stw	r2,-24500(gp)
      dhc_extract_opts(iface,&bp->options[4]);
 4022600:	e0bffa17 	ldw	r2,-24(fp)
 4022604:	10803b04 	addi	r2,r2,236
 4022608:	11400104 	addi	r5,r2,4
 402260c:	e13ff617 	ldw	r4,-40(fp)
 4022610:	4023f500 	call	4023f50 <dhc_extract_opts>
      dhc_states[iface].ipaddr = bp->yiaddr;
 4022614:	e13ff617 	ldw	r4,-40(fp)
 4022618:	e0bffa17 	ldw	r2,-24(fp)
 402261c:	11400417 	ldw	r5,16(r2)
 4022620:	00c101b4 	movhi	r3,1030
 4022624:	18e22e04 	addi	r3,r3,-30536
 4022628:	20800f24 	muli	r2,r4,60
 402262c:	10c5883a 	add	r2,r2,r3
 4022630:	10800904 	addi	r2,r2,36
 4022634:	11400015 	stw	r5,0(r2)
      dhc_setip(iface);
 4022638:	e13ff617 	ldw	r4,-40(fp)
 402263c:	4023a080 	call	4023a08 <dhc_setip>

      /* Set values so that DHCP State Machine remains happy */
      dhc_set_state(iface,DHCS_BOUND);
 4022640:	e13ff617 	ldw	r4,-40(fp)
 4022644:	01400184 	movi	r5,6
 4022648:	4024b640 	call	4024b64 <dhc_set_state>
      dhc_states[iface].t1    = DHC_INFINITY ;
 402264c:	e0bff617 	ldw	r2,-40(fp)
 4022650:	00c101b4 	movhi	r3,1030
 4022654:	18e22e04 	addi	r3,r3,-30536
 4022658:	10800f24 	muli	r2,r2,60
 402265c:	10c5883a 	add	r2,r2,r3
 4022660:	10c00604 	addi	r3,r2,24
 4022664:	00bfffc4 	movi	r2,-1
 4022668:	18800015 	stw	r2,0(r3)
   }

   udp_free(pkt);
 402266c:	e13ffb17 	ldw	r4,-20(fp)
 4022670:	403f5940 	call	403f594 <udp_free>
   return 0;
 4022674:	e03ffe15 	stw	zero,-8(fp)
 4022678:	e0bffe17 	ldw	r2,-8(fp)
}
 402267c:	e037883a 	mov	sp,fp
 4022680:	dfc00217 	ldw	ra,8(sp)
 4022684:	df000117 	ldw	fp,4(sp)
 4022688:	dc000017 	ldw	r16,0(sp)
 402268c:	dec00304 	addi	sp,sp,12
 4022690:	f800283a 	ret

04022694 <dhc_buildheader>:
 * RETURNS: Returns 0 on success, else an ENP_ error code. 
 */

int
dhc_buildheader(int iface, struct bootp * outbp)
{
 4022694:	defff804 	addi	sp,sp,-32
 4022698:	dfc00715 	stw	ra,28(sp)
 402269c:	df000615 	stw	fp,24(sp)
 40226a0:	df000604 	addi	fp,sp,24
 40226a4:	e13ffb15 	stw	r4,-20(fp)
 40226a8:	e17ffc15 	stw	r5,-16(fp)
   int   addrlen;    /* length of hardware address */

   MEMSET(outbp, 0, sizeof(struct bootp));   /* most of this is 0 anyway */
 40226ac:	e0bffc17 	ldw	r2,-16(fp)
 40226b0:	1009883a 	mov	r4,r2
 40226b4:	01804b04 	movi	r6,300
 40226b8:	000b883a 	mov	r5,zero
 40226bc:	4001f640 	call	4001f64 <memset>
   outbp->op = BOOTREQUEST;
 40226c0:	e0fffc17 	ldw	r3,-16(fp)
 40226c4:	00800044 	movi	r2,1
 40226c8:	18800005 	stb	r2,0(r3)

   /* map SNMPish hardware types into bootp types */
   switch (nets[iface]->n_mib->ifType)
 40226cc:	e0bffb17 	ldw	r2,-20(fp)
 40226d0:	00c101b4 	movhi	r3,1030
 40226d4:	18e20804 	addi	r3,r3,-30688
 40226d8:	1085883a 	add	r2,r2,r2
 40226dc:	1085883a 	add	r2,r2,r2
 40226e0:	10c5883a 	add	r2,r2,r3
 40226e4:	10800017 	ldw	r2,0(r2)
 40226e8:	10802717 	ldw	r2,156(r2)
 40226ec:	10800217 	ldw	r2,8(r2)
 40226f0:	e0bfff15 	stw	r2,-4(fp)
 40226f4:	e0ffff17 	ldw	r3,-4(fp)
 40226f8:	188005e0 	cmpeqi	r2,r3,23
 40226fc:	10000b1e 	bne	r2,zero,402272c <dhc_buildheader+0x98>
 4022700:	e0ffff17 	ldw	r3,-4(fp)
 4022704:	18800720 	cmpeqi	r2,r3,28
 4022708:	1000081e 	bne	r2,zero,402272c <dhc_buildheader+0x98>
 402270c:	e0ffff17 	ldw	r3,-4(fp)
 4022710:	188001a0 	cmpeqi	r2,r3,6
 4022714:	1000011e 	bne	r2,zero,402271c <dhc_buildheader+0x88>
 4022718:	00000806 	br	402273c <dhc_buildheader+0xa8>
   {
   case ETHERNET:       /* ETHERNET defined in net.h */
      outbp->htype = ETHHWTYPE;  /* defined in dhcp.h */
 402271c:	e0fffc17 	ldw	r3,-16(fp)
 4022720:	00800044 	movi	r2,1
 4022724:	18800045 	stb	r2,1(r3)
   break;
 4022728:	00000806 	br	402274c <dhc_buildheader+0xb8>
   case PPP:
   case SLIP:
      outbp->htype = LINEHWTYPE;    /* line type for PPP or SLIP */
 402272c:	e0fffc17 	ldw	r3,-16(fp)
 4022730:	00800504 	movi	r2,20
 4022734:	18800045 	stb	r2,1(r3)
   break;
 4022738:	00000406 	br	402274c <dhc_buildheader+0xb8>
      default:
      dtrap();
 402273c:	4025bb40 	call	4025bb4 <dtrap>
      return ENP_LOGIC;             /* this shouldn't happen */
 4022740:	00bffd44 	movi	r2,-11
 4022744:	e0bffe15 	stw	r2,-8(fp)
 4022748:	00005306 	br	4022898 <dhc_buildheader+0x204>
   }

   addrlen = min(16, nets[iface]->n_hal);
 402274c:	e0bffb17 	ldw	r2,-20(fp)
 4022750:	00c101b4 	movhi	r3,1030
 4022754:	18e20804 	addi	r3,r3,-30688
 4022758:	1085883a 	add	r2,r2,r2
 402275c:	1085883a 	add	r2,r2,r2
 4022760:	10c5883a 	add	r2,r2,r3
 4022764:	10800017 	ldw	r2,0(r2)
 4022768:	10801117 	ldw	r2,68(r2)
 402276c:	e0bffd15 	stw	r2,-12(fp)
 4022770:	e0fffd17 	ldw	r3,-12(fp)
 4022774:	18800470 	cmpltui	r2,r3,17
 4022778:	1000021e 	bne	r2,zero,4022784 <dhc_buildheader+0xf0>
 402277c:	00800404 	movi	r2,16
 4022780:	e0bffd15 	stw	r2,-12(fp)
 4022784:	e0fffd17 	ldw	r3,-12(fp)
 4022788:	e0fffa15 	stw	r3,-24(fp)
   outbp->hlen = (u_char)addrlen;
 402278c:	e0bffa17 	ldw	r2,-24(fp)
 4022790:	1007883a 	mov	r3,r2
 4022794:	e0bffc17 	ldw	r2,-16(fp)
 4022798:	10c00085 	stb	r3,2(r2)
   outbp->hops = 0;
 402279c:	e0bffc17 	ldw	r2,-16(fp)
 40227a0:	100000c5 	stb	zero,3(r2)
   if(dhc_states[iface].state == DHCS_RENEWING) 
 40227a4:	e0bffb17 	ldw	r2,-20(fp)
 40227a8:	00c101b4 	movhi	r3,1030
 40227ac:	18e22e04 	addi	r3,r3,-30536
 40227b0:	10800f24 	muli	r2,r2,60
 40227b4:	10c5883a 	add	r2,r2,r3
 40227b8:	10800017 	ldw	r2,0(r2)
 40227bc:	108001d8 	cmpnei	r2,r2,7
 40227c0:	1000031e 	bne	r2,zero,40227d0 <dhc_buildheader+0x13c>
      outbp->flags = 0; /* Renewing needs unicast */
 40227c4:	e0bffc17 	ldw	r2,-16(fp)
 40227c8:	1000028d 	sth	zero,10(r2)
 40227cc:	00000306 	br	40227dc <dhc_buildheader+0x148>
   else
      outbp->flags = htons(DHC_BCASTFLAG); /* Othwise broadcast */
 40227d0:	e0fffc17 	ldw	r3,-16(fp)
 40227d4:	00802004 	movi	r2,128
 40227d8:	1880028d 	sth	r2,10(r3)
   outbp->xid = dhc_states[iface].xid;
 40227dc:	e0bffb17 	ldw	r2,-20(fp)
 40227e0:	00c101b4 	movhi	r3,1030
 40227e4:	18e22e04 	addi	r3,r3,-30536
 40227e8:	10800f24 	muli	r2,r2,60
 40227ec:	10c5883a 	add	r2,r2,r3
 40227f0:	10800204 	addi	r2,r2,8
 40227f4:	10c00017 	ldw	r3,0(r2)
 40227f8:	e0bffc17 	ldw	r2,-16(fp)
 40227fc:	10c00115 	stw	r3,4(r2)
   outbp->secs = dhc_states[iface].secs;
 4022800:	e0bffb17 	ldw	r2,-20(fp)
 4022804:	00c101b4 	movhi	r3,1030
 4022808:	18e22e04 	addi	r3,r3,-30536
 402280c:	10800f24 	muli	r2,r2,60
 4022810:	10c5883a 	add	r2,r2,r3
 4022814:	10800304 	addi	r2,r2,12
 4022818:	10c0000b 	ldhu	r3,0(r2)
 402281c:	e0bffc17 	ldw	r2,-16(fp)
 4022820:	10c0020d 	sth	r3,8(r2)
#ifdef NPDEBUG
   /* make sure net[] has a MAC address, even if length is zero */
   if(nets[iface]->mib.ifPhysAddress == NULL)
 4022824:	e0bffb17 	ldw	r2,-20(fp)
 4022828:	00c101b4 	movhi	r3,1030
 402282c:	18e20804 	addi	r3,r3,-30688
 4022830:	1085883a 	add	r2,r2,r2
 4022834:	1085883a 	add	r2,r2,r2
 4022838:	10c5883a 	add	r2,r2,r3
 402283c:	10800017 	ldw	r2,0(r2)
 4022840:	10801717 	ldw	r2,92(r2)
 4022844:	1004c03a 	cmpne	r2,r2,zero
 4022848:	1000041e 	bne	r2,zero,402285c <dhc_buildheader+0x1c8>
   {
      dtrap();
 402284c:	4025bb40 	call	4025bb4 <dtrap>
      return ENP_LOGIC;
 4022850:	00bffd44 	movi	r2,-11
 4022854:	e0bffe15 	stw	r2,-8(fp)
 4022858:	00000f06 	br	4022898 <dhc_buildheader+0x204>
   }
#endif
   MEMCPY(outbp->chaddr, nets[iface]->mib.ifPhysAddress, addrlen);
 402285c:	e0bffc17 	ldw	r2,-16(fp)
 4022860:	11000704 	addi	r4,r2,28
 4022864:	e0bffb17 	ldw	r2,-20(fp)
 4022868:	00c101b4 	movhi	r3,1030
 402286c:	18e20804 	addi	r3,r3,-30688
 4022870:	1085883a 	add	r2,r2,r2
 4022874:	1085883a 	add	r2,r2,r2
 4022878:	10c5883a 	add	r2,r2,r3
 402287c:	10800017 	ldw	r2,0(r2)
 4022880:	10801717 	ldw	r2,92(r2)
 4022884:	e0fffa17 	ldw	r3,-24(fp)
 4022888:	100b883a 	mov	r5,r2
 402288c:	180d883a 	mov	r6,r3
 4022890:	4001de40 	call	4001de4 <memcpy>

   /* return success */
   return 0;
 4022894:	e03ffe15 	stw	zero,-8(fp)
 4022898:	e0bffe17 	ldw	r2,-8(fp)
}
 402289c:	e037883a 	mov	sp,fp
 40228a0:	dfc00117 	ldw	ra,4(sp)
 40228a4:	df000017 	ldw	fp,0(sp)
 40228a8:	dec00204 	addi	sp,sp,8
 40228ac:	f800283a 	ret

040228b0 <dhc_discover>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_discover(int iface)
{
 40228b0:	defff404 	addi	sp,sp,-48
 40228b4:	dfc00b15 	stw	ra,44(sp)
 40228b8:	df000a15 	stw	fp,40(sp)
 40228bc:	dc000915 	stw	r16,36(sp)
 40228c0:	df000904 	addi	fp,sp,36
 40228c4:	e13ffe15 	stw	r4,-8(fp)
   u_char * opts;       /* scratch pointer to DHCP options field */
   long     leasetime;
   int      e;

   /* get a UDP packet buffer for DHCP sending */
   pkt = udp_alloc(sizeof(struct bootp), 0);
 40228c8:	01004b04 	movi	r4,300
 40228cc:	000b883a 	mov	r5,zero
 40228d0:	403f4a80 	call	403f4a8 <udp_alloc>
 40228d4:	e0bffb15 	stw	r2,-20(fp)
   if (!pkt) 
 40228d8:	e0bffb17 	ldw	r2,-20(fp)
 40228dc:	1004c03a 	cmpne	r2,r2,zero
 40228e0:	1000031e 	bne	r2,zero,40228f0 <dhc_discover+0x40>
      return ENP_NOMEM;
 40228e4:	00bffb04 	movi	r2,-20
 40228e8:	e0bfff15 	stw	r2,-4(fp)
 40228ec:	00012f06 	br	4022dac <dhc_discover+0x4fc>
   pkt->nb_plen = sizeof(struct bootp);
 40228f0:	e0fffb17 	ldw	r3,-20(fp)
 40228f4:	00804b04 	movi	r2,300
 40228f8:	18800415 	stw	r2,16(r3)

   /* start a new DHCP transaction */
   dhc_states[iface].xid = xids++;
 40228fc:	e0bffe17 	ldw	r2,-8(fp)
 4022900:	d1203017 	ldw	r4,-32576(gp)
 4022904:	200b883a 	mov	r5,r4
 4022908:	00c101b4 	movhi	r3,1030
 402290c:	18e22e04 	addi	r3,r3,-30536
 4022910:	10800f24 	muli	r2,r2,60
 4022914:	10c5883a 	add	r2,r2,r3
 4022918:	10800204 	addi	r2,r2,8
 402291c:	11400015 	stw	r5,0(r2)
 4022920:	20800044 	addi	r2,r4,1
 4022924:	d0a03015 	stw	r2,-32576(gp)
   dhc_states[iface].secs = (unsigned short)(sysuptime()/100L);
 4022928:	e43ffe17 	ldw	r16,-8(fp)
 402292c:	4036b180 	call	4036b18 <sysuptime>
 4022930:	1007883a 	mov	r3,r2
 4022934:	00801904 	movi	r2,100
 4022938:	1885203a 	divu	r2,r3,r2
 402293c:	1009883a 	mov	r4,r2
 4022940:	00c101b4 	movhi	r3,1030
 4022944:	18e22e04 	addi	r3,r3,-30536
 4022948:	80800f24 	muli	r2,r16,60
 402294c:	10c5883a 	add	r2,r2,r3
 4022950:	10800304 	addi	r2,r2,12
 4022954:	1100000d 	sth	r4,0(r2)

   /* set up DHCP/BOOTP header in buffer */
   outbp = (struct bootp *)pkt->nb_prot;     /* overlay bootp struct on buffer */
 4022958:	e0bffb17 	ldw	r2,-20(fp)
 402295c:	10800317 	ldw	r2,12(r2)
 4022960:	e0bffa15 	stw	r2,-24(fp)
   e = dhc_buildheader(iface,outbp);
 4022964:	e13ffe17 	ldw	r4,-8(fp)
 4022968:	e17ffa17 	ldw	r5,-24(fp)
 402296c:	40226940 	call	4022694 <dhc_buildheader>
 4022970:	e0bff815 	stw	r2,-32(fp)
   if (e)
 4022974:	e0bff817 	ldw	r2,-32(fp)
 4022978:	1005003a 	cmpeq	r2,r2,zero
 402297c:	1000031e 	bne	r2,zero,402298c <dhc_discover+0xdc>
      return e;
 4022980:	e0bff817 	ldw	r2,-32(fp)
 4022984:	e0bfff15 	stw	r2,-4(fp)
 4022988:	00010806 	br	4022dac <dhc_discover+0x4fc>

   /* and turn it into a DHCP DISCOVER packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 402298c:	e0bffa17 	ldw	r2,-24(fp)
 4022990:	10803b04 	addi	r2,r2,236
 4022994:	1007883a 	mov	r3,r2
 4022998:	0098d534 	movhi	r2,25428
 402299c:	10a098c4 	addi	r2,r2,-32157
 40229a0:	18800015 	stw	r2,0(r3)
   opts = &outbp->options[4];    /* encode options after cookie */
 40229a4:	e0bffa17 	ldw	r2,-24(fp)
 40229a8:	10803b04 	addi	r2,r2,236
 40229ac:	10800104 	addi	r2,r2,4
 40229b0:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHOP_TYPE;
 40229b4:	e0fff917 	ldw	r3,-28(fp)
 40229b8:	00800d44 	movi	r2,53
 40229bc:	18800005 	stb	r2,0(r3)
 40229c0:	e0bff917 	ldw	r2,-28(fp)
 40229c4:	10800044 	addi	r2,r2,1
 40229c8:	e0bff915 	stw	r2,-28(fp)
   *opts++ = 1;   /* length of option field */
 40229cc:	e0fff917 	ldw	r3,-28(fp)
 40229d0:	00800044 	movi	r2,1
 40229d4:	18800005 	stb	r2,0(r3)
 40229d8:	e0bff917 	ldw	r2,-28(fp)
 40229dc:	10800044 	addi	r2,r2,1
 40229e0:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHCP_DISCOVER;
 40229e4:	e0fff917 	ldw	r3,-28(fp)
 40229e8:	00800044 	movi	r2,1
 40229ec:	18800005 	stb	r2,0(r3)
 40229f0:	e0bff917 	ldw	r2,-28(fp)
 40229f4:	10800044 	addi	r2,r2,1
 40229f8:	e0bff915 	stw	r2,-28(fp)
   leasetime = -1L ;    /* ask for infinite lease */
 40229fc:	00bfffc4 	movi	r2,-1
 4022a00:	e0bffc15 	stw	r2,-16(fp)
   PUT_IP_OPT(opts, DHOP_LEASE, leasetime);
 4022a04:	e0fff917 	ldw	r3,-28(fp)
 4022a08:	00800cc4 	movi	r2,51
 4022a0c:	18800005 	stb	r2,0(r3)
 4022a10:	e0bff917 	ldw	r2,-28(fp)
 4022a14:	10800044 	addi	r2,r2,1
 4022a18:	e0bff915 	stw	r2,-28(fp)
 4022a1c:	e0fff917 	ldw	r3,-28(fp)
 4022a20:	00800104 	movi	r2,4
 4022a24:	18800005 	stb	r2,0(r3)
 4022a28:	e0bff917 	ldw	r2,-28(fp)
 4022a2c:	10800044 	addi	r2,r2,1
 4022a30:	e0bff915 	stw	r2,-28(fp)
 4022a34:	e0bff917 	ldw	r2,-28(fp)
 4022a38:	10c000c4 	addi	r3,r2,3
 4022a3c:	e0bffc04 	addi	r2,fp,-16
 4022a40:	10800003 	ldbu	r2,0(r2)
 4022a44:	18800005 	stb	r2,0(r3)
 4022a48:	e0bff917 	ldw	r2,-28(fp)
 4022a4c:	10c00084 	addi	r3,r2,2
 4022a50:	e0bffc04 	addi	r2,fp,-16
 4022a54:	10800044 	addi	r2,r2,1
 4022a58:	10800003 	ldbu	r2,0(r2)
 4022a5c:	18800005 	stb	r2,0(r3)
 4022a60:	e0bff917 	ldw	r2,-28(fp)
 4022a64:	10c00044 	addi	r3,r2,1
 4022a68:	e0bffc04 	addi	r2,fp,-16
 4022a6c:	10800084 	addi	r2,r2,2
 4022a70:	10800003 	ldbu	r2,0(r2)
 4022a74:	18800005 	stb	r2,0(r3)
 4022a78:	e0bffc04 	addi	r2,fp,-16
 4022a7c:	108000c4 	addi	r2,r2,3
 4022a80:	10800003 	ldbu	r2,0(r2)
 4022a84:	1007883a 	mov	r3,r2
 4022a88:	e0bff917 	ldw	r2,-28(fp)
 4022a8c:	10c00005 	stb	r3,0(r2)
 4022a90:	e0bff917 	ldw	r2,-28(fp)
 4022a94:	10800104 	addi	r2,r2,4
 4022a98:	e0bff915 	stw	r2,-28(fp)

   /* if we already have an IP address, try to get it from the server */
   if (nets[iface]->n_ipaddr != 0)
 4022a9c:	e0bffe17 	ldw	r2,-8(fp)
 4022aa0:	00c101b4 	movhi	r3,1030
 4022aa4:	18e20804 	addi	r3,r3,-30688
 4022aa8:	1085883a 	add	r2,r2,r2
 4022aac:	1085883a 	add	r2,r2,r2
 4022ab0:	10c5883a 	add	r2,r2,r3
 4022ab4:	10800017 	ldw	r2,0(r2)
 4022ab8:	10800a17 	ldw	r2,40(r2)
 4022abc:	1005003a 	cmpeq	r2,r2,zero
 4022ac0:	1000521e 	bne	r2,zero,4022c0c <dhc_discover+0x35c>
   {
      ip_addr my_ip = htonl(nets[iface]->n_ipaddr);
 4022ac4:	e0bffe17 	ldw	r2,-8(fp)
 4022ac8:	00c101b4 	movhi	r3,1030
 4022acc:	18e20804 	addi	r3,r3,-30688
 4022ad0:	1085883a 	add	r2,r2,r2
 4022ad4:	1085883a 	add	r2,r2,r2
 4022ad8:	10c5883a 	add	r2,r2,r3
 4022adc:	10800017 	ldw	r2,0(r2)
 4022ae0:	10800a17 	ldw	r2,40(r2)
 4022ae4:	1004d63a 	srli	r2,r2,24
 4022ae8:	11003fcc 	andi	r4,r2,255
 4022aec:	e0bffe17 	ldw	r2,-8(fp)
 4022af0:	00c101b4 	movhi	r3,1030
 4022af4:	18e20804 	addi	r3,r3,-30688
 4022af8:	1085883a 	add	r2,r2,r2
 4022afc:	1085883a 	add	r2,r2,r2
 4022b00:	10c5883a 	add	r2,r2,r3
 4022b04:	10800017 	ldw	r2,0(r2)
 4022b08:	10800a17 	ldw	r2,40(r2)
 4022b0c:	1004d23a 	srli	r2,r2,8
 4022b10:	10bfc00c 	andi	r2,r2,65280
 4022b14:	2088b03a 	or	r4,r4,r2
 4022b18:	e0bffe17 	ldw	r2,-8(fp)
 4022b1c:	00c101b4 	movhi	r3,1030
 4022b20:	18e20804 	addi	r3,r3,-30688
 4022b24:	1085883a 	add	r2,r2,r2
 4022b28:	1085883a 	add	r2,r2,r2
 4022b2c:	10c5883a 	add	r2,r2,r3
 4022b30:	10800017 	ldw	r2,0(r2)
 4022b34:	10800a17 	ldw	r2,40(r2)
 4022b38:	10bfc00c 	andi	r2,r2,65280
 4022b3c:	1004923a 	slli	r2,r2,8
 4022b40:	2088b03a 	or	r4,r4,r2
 4022b44:	e0bffe17 	ldw	r2,-8(fp)
 4022b48:	00c101b4 	movhi	r3,1030
 4022b4c:	18e20804 	addi	r3,r3,-30688
 4022b50:	1085883a 	add	r2,r2,r2
 4022b54:	1085883a 	add	r2,r2,r2
 4022b58:	10c5883a 	add	r2,r2,r3
 4022b5c:	10800017 	ldw	r2,0(r2)
 4022b60:	10800a17 	ldw	r2,40(r2)
 4022b64:	10803fcc 	andi	r2,r2,255
 4022b68:	1004963a 	slli	r2,r2,24
 4022b6c:	2084b03a 	or	r2,r4,r2
 4022b70:	e0bffd15 	stw	r2,-12(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, my_ip);
 4022b74:	e0fff917 	ldw	r3,-28(fp)
 4022b78:	00800c84 	movi	r2,50
 4022b7c:	18800005 	stb	r2,0(r3)
 4022b80:	e0bff917 	ldw	r2,-28(fp)
 4022b84:	10800044 	addi	r2,r2,1
 4022b88:	e0bff915 	stw	r2,-28(fp)
 4022b8c:	e0fff917 	ldw	r3,-28(fp)
 4022b90:	00800104 	movi	r2,4
 4022b94:	18800005 	stb	r2,0(r3)
 4022b98:	e0bff917 	ldw	r2,-28(fp)
 4022b9c:	10800044 	addi	r2,r2,1
 4022ba0:	e0bff915 	stw	r2,-28(fp)
 4022ba4:	e0bff917 	ldw	r2,-28(fp)
 4022ba8:	10c000c4 	addi	r3,r2,3
 4022bac:	e0bffd04 	addi	r2,fp,-12
 4022bb0:	10800003 	ldbu	r2,0(r2)
 4022bb4:	18800005 	stb	r2,0(r3)
 4022bb8:	e0bff917 	ldw	r2,-28(fp)
 4022bbc:	10c00084 	addi	r3,r2,2
 4022bc0:	e0bffd04 	addi	r2,fp,-12
 4022bc4:	10800044 	addi	r2,r2,1
 4022bc8:	10800003 	ldbu	r2,0(r2)
 4022bcc:	18800005 	stb	r2,0(r3)
 4022bd0:	e0bff917 	ldw	r2,-28(fp)
 4022bd4:	10c00044 	addi	r3,r2,1
 4022bd8:	e0bffd04 	addi	r2,fp,-12
 4022bdc:	10800084 	addi	r2,r2,2
 4022be0:	10800003 	ldbu	r2,0(r2)
 4022be4:	18800005 	stb	r2,0(r3)
 4022be8:	e0bffd04 	addi	r2,fp,-12
 4022bec:	108000c4 	addi	r2,r2,3
 4022bf0:	10800003 	ldbu	r2,0(r2)
 4022bf4:	1007883a 	mov	r3,r2
 4022bf8:	e0bff917 	ldw	r2,-28(fp)
 4022bfc:	10c00005 	stb	r3,0(r2)
 4022c00:	e0bff917 	ldw	r2,-28(fp)
 4022c04:	10800104 	addi	r2,r2,4
 4022c08:	e0bff915 	stw	r2,-28(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 4022c0c:	d0a03217 	ldw	r2,-32568(gp)
 4022c10:	10800050 	cmplti	r2,r2,1
 4022c14:	10001e1e 	bne	r2,zero,4022c90 <dhc_discover+0x3e0>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 4022c18:	e0fff917 	ldw	r3,-28(fp)
 4022c1c:	00800dc4 	movi	r2,55
 4022c20:	18800005 	stb	r2,0(r3)
 4022c24:	e0bff917 	ldw	r2,-28(fp)
 4022c28:	10800044 	addi	r2,r2,1
 4022c2c:	e0bff915 	stw	r2,-28(fp)
      *opts++ = (u_char)reqlist_len ;
 4022c30:	d0a03217 	ldw	r2,-32568(gp)
 4022c34:	1007883a 	mov	r3,r2
 4022c38:	e0bff917 	ldw	r2,-28(fp)
 4022c3c:	10c00005 	stb	r3,0(r2)
 4022c40:	e0bff917 	ldw	r2,-28(fp)
 4022c44:	10800044 	addi	r2,r2,1
 4022c48:	e0bff915 	stw	r2,-28(fp)

      for (i=0 ; i < reqlist_len ; i++ )
 4022c4c:	e03ff715 	stw	zero,-36(fp)
 4022c50:	00000c06 	br	4022c84 <dhc_discover+0x3d4>
         *opts++ = reqlist[i];
 4022c54:	e0fff717 	ldw	r3,-36(fp)
 4022c58:	d0a03104 	addi	r2,gp,-32572
 4022c5c:	1885883a 	add	r2,r3,r2
 4022c60:	10c00003 	ldbu	r3,0(r2)
 4022c64:	e0bff917 	ldw	r2,-28(fp)
 4022c68:	10c00005 	stb	r3,0(r2)
 4022c6c:	e0bff917 	ldw	r2,-28(fp)
 4022c70:	10800044 	addi	r2,r2,1
 4022c74:	e0bff915 	stw	r2,-28(fp)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 4022c78:	e0bff717 	ldw	r2,-36(fp)
 4022c7c:	10800044 	addi	r2,r2,1
 4022c80:	e0bff715 	stw	r2,-36(fp)
 4022c84:	d0e03217 	ldw	r3,-32568(gp)
 4022c88:	e0bff717 	ldw	r2,-36(fp)
 4022c8c:	10fff116 	blt	r2,r3,4022c54 <dhc_discover+0x3a4>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   *opts++ = DHOP_END;
 4022c90:	e0fff917 	ldw	r3,-28(fp)
 4022c94:	00bfffc4 	movi	r2,-1
 4022c98:	18800005 	stb	r2,0(r3)
 4022c9c:	e0bff917 	ldw	r2,-28(fp)
 4022ca0:	10800044 	addi	r2,r2,1
 4022ca4:	e0bff915 	stw	r2,-28(fp)

   /* last_tick needs to be set in case we are doing a retry. It 
    * prevents dhc_second from calling us to do another retry while 
    * we are stuck 
    */
   dhc_states[iface].last_tick = cticks;
 4022ca8:	e13ffe17 	ldw	r4,-8(fp)
 4022cac:	00810174 	movhi	r2,1029
 4022cb0:	1081e404 	addi	r2,r2,1936
 4022cb4:	11400017 	ldw	r5,0(r2)
 4022cb8:	00c101b4 	movhi	r3,1030
 4022cbc:	18e22e04 	addi	r3,r3,-30536
 4022cc0:	20800f24 	muli	r2,r4,60
 4022cc4:	10c5883a 	add	r2,r2,r3
 4022cc8:	10800404 	addi	r2,r2,16
 4022ccc:	11400015 	stw	r5,0(r2)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast discovery request */
 4022cd0:	e0fffb17 	ldw	r3,-20(fp)
 4022cd4:	00bfffc4 	movi	r2,-1
 4022cd8:	18800715 	stw	r2,28(r3)
   pkt->net = nets[iface];    /* send out caller spec'ed net */
 4022cdc:	e0bffe17 	ldw	r2,-8(fp)
 4022ce0:	00c101b4 	movhi	r3,1030
 4022ce4:	18e20804 	addi	r3,r3,-30688
 4022ce8:	1085883a 	add	r2,r2,r2
 4022cec:	1085883a 	add	r2,r2,r2
 4022cf0:	10c5883a 	add	r2,r2,r3
 4022cf4:	10c00017 	ldw	r3,0(r2)
 4022cf8:	e0bffb17 	ldw	r2,-20(fp)
 4022cfc:	10c00615 	stw	r3,24(r2)

   /* we need to change the DHCP state before sending to avoid a 
    * race condition with the expected reply 
    */
   if (dhc_states[iface].state != DHCS_SELECTING)
 4022d00:	e0bffe17 	ldw	r2,-8(fp)
 4022d04:	00c101b4 	movhi	r3,1030
 4022d08:	18e22e04 	addi	r3,r3,-30536
 4022d0c:	10800f24 	muli	r2,r2,60
 4022d10:	10c5883a 	add	r2,r2,r3
 4022d14:	10800017 	ldw	r2,0(r2)
 4022d18:	10800120 	cmpeqi	r2,r2,4
 4022d1c:	1000031e 	bne	r2,zero,4022d2c <dhc_discover+0x47c>
      dhc_set_state(iface, DHCS_SELECTING);
 4022d20:	e13ffe17 	ldw	r4,-8(fp)
 4022d24:	01400104 	movi	r5,4
 4022d28:	4024b640 	call	4024b64 <dhc_set_state>

   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 4022d2c:	010010c4 	movi	r4,67
 4022d30:	01401104 	movi	r5,68
 4022d34:	e1bffb17 	ldw	r6,-20(fp)
 4022d38:	403eff00 	call	403eff0 <udp_send>
   dsc_discovers++;
 4022d3c:	d0a80f17 	ldw	r2,-24516(gp)
 4022d40:	10800044 	addi	r2,r2,1
 4022d44:	d0a80f15 	stw	r2,-24516(gp)

   /* state info is the same even if udp_send() failed */
   dhc_states[iface].last_tick = cticks;     /* set this again, post udp_send */
 4022d48:	e13ffe17 	ldw	r4,-8(fp)
 4022d4c:	00810174 	movhi	r2,1029
 4022d50:	1081e404 	addi	r2,r2,1936
 4022d54:	11400017 	ldw	r5,0(r2)
 4022d58:	00c101b4 	movhi	r3,1030
 4022d5c:	18e22e04 	addi	r3,r3,-30536
 4022d60:	20800f24 	muli	r2,r4,60
 4022d64:	10c5883a 	add	r2,r2,r3
 4022d68:	10800404 	addi	r2,r2,16
 4022d6c:	11400015 	stw	r5,0(r2)
   dhc_states[iface].tries++;
 4022d70:	e17ffe17 	ldw	r5,-8(fp)
 4022d74:	00c101b4 	movhi	r3,1030
 4022d78:	18e22e04 	addi	r3,r3,-30536
 4022d7c:	28800f24 	muli	r2,r5,60
 4022d80:	10c5883a 	add	r2,r2,r3
 4022d84:	10800104 	addi	r2,r2,4
 4022d88:	10800017 	ldw	r2,0(r2)
 4022d8c:	11000044 	addi	r4,r2,1
 4022d90:	00c101b4 	movhi	r3,1030
 4022d94:	18e22e04 	addi	r3,r3,-30536
 4022d98:	28800f24 	muli	r2,r5,60
 4022d9c:	10c5883a 	add	r2,r2,r3
 4022da0:	10800104 	addi	r2,r2,4
 4022da4:	11000015 	stw	r4,0(r2)

   return 0;
 4022da8:	e03fff15 	stw	zero,-4(fp)
 4022dac:	e0bfff17 	ldw	r2,-4(fp)
}
 4022db0:	e037883a 	mov	sp,fp
 4022db4:	dfc00217 	ldw	ra,8(sp)
 4022db8:	df000117 	ldw	fp,4(sp)
 4022dbc:	dc000017 	ldw	r16,0(sp)
 4022dc0:	dec00304 	addi	sp,sp,12
 4022dc4:	f800283a 	ret

04022dc8 <dhc_rx_offer>:
 * RETURNS: 0 if OK, else ENP_ error
 */

int
dhc_rx_offer(int iface, struct bootp * bp, unsigned bplen)
{
 4022dc8:	defff804 	addi	sp,sp,-32
 4022dcc:	dfc00715 	stw	ra,28(sp)
 4022dd0:	df000615 	stw	fp,24(sp)
 4022dd4:	df000604 	addi	fp,sp,24
 4022dd8:	e13ffc15 	stw	r4,-16(fp)
 4022ddc:	e17ffd15 	stw	r5,-12(fp)
 4022de0:	e1bffe15 	stw	r6,-8(fp)
   u_char * opts;
   int   e;

   if (dhc_states[iface].xid != bp->xid)
 4022de4:	e0bffc17 	ldw	r2,-16(fp)
 4022de8:	00c101b4 	movhi	r3,1030
 4022dec:	18e22e04 	addi	r3,r3,-30536
 4022df0:	10800f24 	muli	r2,r2,60
 4022df4:	10c5883a 	add	r2,r2,r3
 4022df8:	10800204 	addi	r2,r2,8
 4022dfc:	10c00017 	ldw	r3,0(r2)
 4022e00:	e0bffd17 	ldw	r2,-12(fp)
 4022e04:	10800117 	ldw	r2,4(r2)
 4022e08:	18800326 	beq	r3,r2,4022e18 <dhc_rx_offer+0x50>
      return ENP_NOT_MINE;
 4022e0c:	00800084 	movi	r2,2
 4022e10:	e0bfff15 	stw	r2,-4(fp)
 4022e14:	00002706 	br	4022eb4 <dhc_rx_offer+0xec>

   opts = &bp->options[4];    /* examine options after cookie */
 4022e18:	e0bffd17 	ldw	r2,-12(fp)
 4022e1c:	10803b04 	addi	r2,r2,236
 4022e20:	10800104 	addi	r2,r2,4
 4022e24:	e0bffb15 	stw	r2,-20(fp)
   e = dhc_extract_opts(iface,opts);
 4022e28:	e13ffc17 	ldw	r4,-16(fp)
 4022e2c:	e17ffb17 	ldw	r5,-20(fp)
 4022e30:	4023f500 	call	4023f50 <dhc_extract_opts>
 4022e34:	e0bffa15 	stw	r2,-24(fp)
   if (e)   /* parse error? */
 4022e38:	e0bffa17 	ldw	r2,-24(fp)
 4022e3c:	1005003a 	cmpeq	r2,r2,zero
 4022e40:	1000041e 	bne	r2,zero,4022e54 <dhc_rx_offer+0x8c>
   {
      dtrap();
 4022e44:	4025bb40 	call	4025bb4 <dtrap>
      return e;
 4022e48:	e0bffa17 	ldw	r2,-24(fp)
 4022e4c:	e0bfff15 	stw	r2,-4(fp)
 4022e50:	00001806 	br	4022eb4 <dhc_rx_offer+0xec>
   }
   if (!bp->yiaddr)  /* require an IP address */
 4022e54:	e0bffd17 	ldw	r2,-12(fp)
 4022e58:	10800417 	ldw	r2,16(r2)
 4022e5c:	1004c03a 	cmpne	r2,r2,zero
 4022e60:	1000071e 	bne	r2,zero,4022e80 <dhc_rx_offer+0xb8>
   {
      dhc_decline(iface,bp, bplen);
 4022e64:	e13ffc17 	ldw	r4,-16(fp)
 4022e68:	e17ffd17 	ldw	r5,-12(fp)
 4022e6c:	e1bffe17 	ldw	r6,-8(fp)
 4022e70:	4023d6c0 	call	4023d6c <dhc_decline>
      return ENP_NOT_MINE;
 4022e74:	00800084 	movi	r2,2
 4022e78:	e0bfff15 	stw	r2,-4(fp)
 4022e7c:	00000d06 	br	4022eb4 <dhc_rx_offer+0xec>
   }
   dhc_states[iface].ipaddr = bp->yiaddr;
 4022e80:	e13ffc17 	ldw	r4,-16(fp)
 4022e84:	e0bffd17 	ldw	r2,-12(fp)
 4022e88:	11400417 	ldw	r5,16(r2)
 4022e8c:	00c101b4 	movhi	r3,1030
 4022e90:	18e22e04 	addi	r3,r3,-30536
 4022e94:	20800f24 	muli	r2,r4,60
 4022e98:	10c5883a 	add	r2,r2,r3
 4022e9c:	10800904 	addi	r2,r2,36
 4022ea0:	11400015 	stw	r5,0(r2)

   /* if we got here, we must like the offer -- send a DHCP REQUEST */
   return (dhc_request(iface,FALSE));
 4022ea4:	e13ffc17 	ldw	r4,-16(fp)
 4022ea8:	000b883a 	mov	r5,zero
 4022eac:	4022ecc0 	call	4022ecc <dhc_request>
 4022eb0:	e0bfff15 	stw	r2,-4(fp)
 4022eb4:	e0bfff17 	ldw	r2,-4(fp)
}
 4022eb8:	e037883a 	mov	sp,fp
 4022ebc:	dfc00117 	ldw	ra,4(sp)
 4022ec0:	df000017 	ldw	fp,0(sp)
 4022ec4:	dec00204 	addi	sp,sp,8
 4022ec8:	f800283a 	ret

04022ecc <dhc_request>:
 * RETURNS:  Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_request(int iface,int xid_flag)
{
 4022ecc:	defff304 	addi	sp,sp,-52
 4022ed0:	dfc00c15 	stw	ra,48(sp)
 4022ed4:	df000b15 	stw	fp,44(sp)
 4022ed8:	df000b04 	addi	fp,sp,44
 4022edc:	e13ffd15 	stw	r4,-12(fp)
 4022ee0:	e17ffe15 	stw	r5,-8(fp)
   u_char  *   opts; /* scratch pointer to DHCP options field */
   ip_addr opt_ip;      /* IP address temporary */
   int      e;       /* error holder */

   /* get a UDP packet buffer for sending DHCP request */
   pkt = udp_alloc(sizeof(struct bootp) + DHCP_OPTSIZE - BOOTP_OPTSIZE, 0);
 4022ee4:	01008904 	movi	r4,548
 4022ee8:	000b883a 	mov	r5,zero
 4022eec:	403f4a80 	call	403f4a8 <udp_alloc>
 4022ef0:	e0bffa15 	stw	r2,-24(fp)
   if (!pkt) 
 4022ef4:	e0bffa17 	ldw	r2,-24(fp)
 4022ef8:	1004c03a 	cmpne	r2,r2,zero
 4022efc:	1000031e 	bne	r2,zero,4022f0c <dhc_request+0x40>
      return ENP_NOMEM;
 4022f00:	00bffb04 	movi	r2,-20
 4022f04:	e0bfff15 	stw	r2,-4(fp)
 4022f08:	0002b906 	br	40239f0 <dhc_request+0xb24>
   pkt->nb_plen = sizeof(struct bootp) - BOOTP_OPTSIZE;
 4022f0c:	e0fffa17 	ldw	r3,-24(fp)
 4022f10:	00803b04 	movi	r2,236
 4022f14:	18800415 	stw	r2,16(r3)

   if ( xid_flag == TRUE )
 4022f18:	e0bffe17 	ldw	r2,-8(fp)
 4022f1c:	10800058 	cmpnei	r2,r2,1
 4022f20:	1000121e 	bne	r2,zero,4022f6c <dhc_request+0xa0>
   {
      dhc_states[iface].xid  = xids++;
 4022f24:	e0bffd17 	ldw	r2,-12(fp)
 4022f28:	d1203017 	ldw	r4,-32576(gp)
 4022f2c:	200b883a 	mov	r5,r4
 4022f30:	00c101b4 	movhi	r3,1030
 4022f34:	18e22e04 	addi	r3,r3,-30536
 4022f38:	10800f24 	muli	r2,r2,60
 4022f3c:	10c5883a 	add	r2,r2,r3
 4022f40:	10800204 	addi	r2,r2,8
 4022f44:	11400015 	stw	r5,0(r2)
 4022f48:	20800044 	addi	r2,r4,1
 4022f4c:	d0a03015 	stw	r2,-32576(gp)
      dhc_states[iface].secs = 0;
 4022f50:	e0bffd17 	ldw	r2,-12(fp)
 4022f54:	00c101b4 	movhi	r3,1030
 4022f58:	18e22e04 	addi	r3,r3,-30536
 4022f5c:	10800f24 	muli	r2,r2,60
 4022f60:	10c5883a 	add	r2,r2,r3
 4022f64:	10800304 	addi	r2,r2,12
 4022f68:	1000000d 	sth	zero,0(r2)
   }

   /* build a BOOTP request header */
   outbp = (struct bootp *)pkt->nb_prot;
 4022f6c:	e0bffa17 	ldw	r2,-24(fp)
 4022f70:	10800317 	ldw	r2,12(r2)
 4022f74:	e0bffb15 	stw	r2,-20(fp)
   e     = dhc_buildheader(iface,outbp);
 4022f78:	e13ffd17 	ldw	r4,-12(fp)
 4022f7c:	e17ffb17 	ldw	r5,-20(fp)
 4022f80:	40226940 	call	4022694 <dhc_buildheader>
 4022f84:	e0bff815 	stw	r2,-32(fp)
   if (e)
 4022f88:	e0bff817 	ldw	r2,-32(fp)
 4022f8c:	1005003a 	cmpeq	r2,r2,zero
 4022f90:	1000031e 	bne	r2,zero,4022fa0 <dhc_request+0xd4>
      return e;
 4022f94:	e0bff817 	ldw	r2,-32(fp)
 4022f98:	e0bfff15 	stw	r2,-4(fp)
 4022f9c:	00029406 	br	40239f0 <dhc_request+0xb24>

   /* turn it into a DHCP REQUEST packet */
   *(long*)(&outbp->options) = RFC1084_MAGIC_COOKIE; 
 4022fa0:	e0bffb17 	ldw	r2,-20(fp)
 4022fa4:	10803b04 	addi	r2,r2,236
 4022fa8:	1007883a 	mov	r3,r2
 4022fac:	0098d534 	movhi	r2,25428
 4022fb0:	10a098c4 	addi	r2,r2,-32157
 4022fb4:	18800015 	stw	r2,0(r3)
   opts    = &outbp->options[4];    /* encode options after cookie */
 4022fb8:	e0bffb17 	ldw	r2,-20(fp)
 4022fbc:	10803b04 	addi	r2,r2,236
 4022fc0:	10800104 	addi	r2,r2,4
 4022fc4:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHOP_TYPE;
 4022fc8:	e0fff917 	ldw	r3,-28(fp)
 4022fcc:	00800d44 	movi	r2,53
 4022fd0:	18800005 	stb	r2,0(r3)
 4022fd4:	e0bff917 	ldw	r2,-28(fp)
 4022fd8:	10800044 	addi	r2,r2,1
 4022fdc:	e0bff915 	stw	r2,-28(fp)
   *opts++ = 1;   /* length of option field */
 4022fe0:	e0fff917 	ldw	r3,-28(fp)
 4022fe4:	00800044 	movi	r2,1
 4022fe8:	18800005 	stb	r2,0(r3)
 4022fec:	e0bff917 	ldw	r2,-28(fp)
 4022ff0:	10800044 	addi	r2,r2,1
 4022ff4:	e0bff915 	stw	r2,-28(fp)
   *opts++ = DHCP_REQUEST;
 4022ff8:	e0fff917 	ldw	r3,-28(fp)
 4022ffc:	008000c4 	movi	r2,3
 4023000:	18800005 	stb	r2,0(r3)
 4023004:	e0bff917 	ldw	r2,-28(fp)
 4023008:	10800044 	addi	r2,r2,1
 402300c:	e0bff915 	stw	r2,-28(fp)

   /* append the options that we want to request */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 4023010:	e0bffd17 	ldw	r2,-12(fp)
 4023014:	00c101b4 	movhi	r3,1030
 4023018:	18e22e04 	addi	r3,r3,-30536
 402301c:	10800f24 	muli	r2,r2,60
 4023020:	10c5883a 	add	r2,r2,r3
 4023024:	10800017 	ldw	r2,0(r2)
 4023028:	10800120 	cmpeqi	r2,r2,4
 402302c:	1000181e 	bne	r2,zero,4023090 <dhc_request+0x1c4>
 4023030:	e0bffd17 	ldw	r2,-12(fp)
 4023034:	00c101b4 	movhi	r3,1030
 4023038:	18e22e04 	addi	r3,r3,-30536
 402303c:	10800f24 	muli	r2,r2,60
 4023040:	10c5883a 	add	r2,r2,r3
 4023044:	10800017 	ldw	r2,0(r2)
 4023048:	10800160 	cmpeqi	r2,r2,5
 402304c:	1000101e 	bne	r2,zero,4023090 <dhc_request+0x1c4>
 4023050:	e0bffd17 	ldw	r2,-12(fp)
 4023054:	00c101b4 	movhi	r3,1030
 4023058:	18e22e04 	addi	r3,r3,-30536
 402305c:	10800f24 	muli	r2,r2,60
 4023060:	10c5883a 	add	r2,r2,r3
 4023064:	10800017 	ldw	r2,0(r2)
 4023068:	108000e0 	cmpeqi	r2,r2,3
 402306c:	1000081e 	bne	r2,zero,4023090 <dhc_request+0x1c4>
 4023070:	e0bffd17 	ldw	r2,-12(fp)
 4023074:	00c101b4 	movhi	r3,1030
 4023078:	18e22e04 	addi	r3,r3,-30536
 402307c:	10800f24 	muli	r2,r2,60
 4023080:	10c5883a 	add	r2,r2,r3
 4023084:	10800017 	ldw	r2,0(r2)
 4023088:	10800098 	cmpnei	r2,r2,2
 402308c:	10004e1e 	bne	r2,zero,40231c8 <dhc_request+0x2fc>
       (dhc_states[iface].state == DHCS_REQUESTING) ||
       (dhc_states[iface].state == DHCS_REBOOTING) ||
       (dhc_states[iface].state == DHCS_INITREBOOT))
   {
      opt_ip = ntohl(dhc_states[iface].ipaddr);
 4023090:	e0bffd17 	ldw	r2,-12(fp)
 4023094:	00c101b4 	movhi	r3,1030
 4023098:	18e22e04 	addi	r3,r3,-30536
 402309c:	10800f24 	muli	r2,r2,60
 40230a0:	10c5883a 	add	r2,r2,r3
 40230a4:	10800904 	addi	r2,r2,36
 40230a8:	10800017 	ldw	r2,0(r2)
 40230ac:	1004d63a 	srli	r2,r2,24
 40230b0:	11003fcc 	andi	r4,r2,255
 40230b4:	e0bffd17 	ldw	r2,-12(fp)
 40230b8:	00c101b4 	movhi	r3,1030
 40230bc:	18e22e04 	addi	r3,r3,-30536
 40230c0:	10800f24 	muli	r2,r2,60
 40230c4:	10c5883a 	add	r2,r2,r3
 40230c8:	10800904 	addi	r2,r2,36
 40230cc:	10800017 	ldw	r2,0(r2)
 40230d0:	1004d23a 	srli	r2,r2,8
 40230d4:	10bfc00c 	andi	r2,r2,65280
 40230d8:	2088b03a 	or	r4,r4,r2
 40230dc:	e0bffd17 	ldw	r2,-12(fp)
 40230e0:	00c101b4 	movhi	r3,1030
 40230e4:	18e22e04 	addi	r3,r3,-30536
 40230e8:	10800f24 	muli	r2,r2,60
 40230ec:	10c5883a 	add	r2,r2,r3
 40230f0:	10800904 	addi	r2,r2,36
 40230f4:	10800017 	ldw	r2,0(r2)
 40230f8:	10bfc00c 	andi	r2,r2,65280
 40230fc:	1004923a 	slli	r2,r2,8
 4023100:	2088b03a 	or	r4,r4,r2
 4023104:	e0bffd17 	ldw	r2,-12(fp)
 4023108:	00c101b4 	movhi	r3,1030
 402310c:	18e22e04 	addi	r3,r3,-30536
 4023110:	10800f24 	muli	r2,r2,60
 4023114:	10c5883a 	add	r2,r2,r3
 4023118:	10800904 	addi	r2,r2,36
 402311c:	10800017 	ldw	r2,0(r2)
 4023120:	10803fcc 	andi	r2,r2,255
 4023124:	1004963a 	slli	r2,r2,24
 4023128:	2084b03a 	or	r2,r4,r2
 402312c:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_CADDR, opt_ip);
 4023130:	e0fff917 	ldw	r3,-28(fp)
 4023134:	00800c84 	movi	r2,50
 4023138:	18800005 	stb	r2,0(r3)
 402313c:	e0bff917 	ldw	r2,-28(fp)
 4023140:	10800044 	addi	r2,r2,1
 4023144:	e0bff915 	stw	r2,-28(fp)
 4023148:	e0fff917 	ldw	r3,-28(fp)
 402314c:	00800104 	movi	r2,4
 4023150:	18800005 	stb	r2,0(r3)
 4023154:	e0bff917 	ldw	r2,-28(fp)
 4023158:	10800044 	addi	r2,r2,1
 402315c:	e0bff915 	stw	r2,-28(fp)
 4023160:	e0bff917 	ldw	r2,-28(fp)
 4023164:	10c000c4 	addi	r3,r2,3
 4023168:	e0bffc04 	addi	r2,fp,-16
 402316c:	10800003 	ldbu	r2,0(r2)
 4023170:	18800005 	stb	r2,0(r3)
 4023174:	e0bff917 	ldw	r2,-28(fp)
 4023178:	10c00084 	addi	r3,r2,2
 402317c:	e0bffc04 	addi	r2,fp,-16
 4023180:	10800044 	addi	r2,r2,1
 4023184:	10800003 	ldbu	r2,0(r2)
 4023188:	18800005 	stb	r2,0(r3)
 402318c:	e0bff917 	ldw	r2,-28(fp)
 4023190:	10c00044 	addi	r3,r2,1
 4023194:	e0bffc04 	addi	r2,fp,-16
 4023198:	10800084 	addi	r2,r2,2
 402319c:	10800003 	ldbu	r2,0(r2)
 40231a0:	18800005 	stb	r2,0(r3)
 40231a4:	e0bffc04 	addi	r2,fp,-16
 40231a8:	108000c4 	addi	r2,r2,3
 40231ac:	10800003 	ldbu	r2,0(r2)
 40231b0:	1007883a 	mov	r3,r2
 40231b4:	e0bff917 	ldw	r2,-28(fp)
 40231b8:	10c00005 	stb	r3,0(r2)
 40231bc:	e0bff917 	ldw	r2,-28(fp)
 40231c0:	10800104 	addi	r2,r2,4
 40231c4:	e0bff915 	stw	r2,-28(fp)
   }
   if (dhc_states[iface].snmask)
 40231c8:	e0bffd17 	ldw	r2,-12(fp)
 40231cc:	00c101b4 	movhi	r3,1030
 40231d0:	18e22e04 	addi	r3,r3,-30536
 40231d4:	10800f24 	muli	r2,r2,60
 40231d8:	10c5883a 	add	r2,r2,r3
 40231dc:	10800a04 	addi	r2,r2,40
 40231e0:	10800017 	ldw	r2,0(r2)
 40231e4:	1005003a 	cmpeq	r2,r2,zero
 40231e8:	10004e1e 	bne	r2,zero,4023324 <dhc_request+0x458>
   {
      opt_ip = ntohl(dhc_states[iface].snmask);
 40231ec:	e0bffd17 	ldw	r2,-12(fp)
 40231f0:	00c101b4 	movhi	r3,1030
 40231f4:	18e22e04 	addi	r3,r3,-30536
 40231f8:	10800f24 	muli	r2,r2,60
 40231fc:	10c5883a 	add	r2,r2,r3
 4023200:	10800a04 	addi	r2,r2,40
 4023204:	10800017 	ldw	r2,0(r2)
 4023208:	1004d63a 	srli	r2,r2,24
 402320c:	11003fcc 	andi	r4,r2,255
 4023210:	e0bffd17 	ldw	r2,-12(fp)
 4023214:	00c101b4 	movhi	r3,1030
 4023218:	18e22e04 	addi	r3,r3,-30536
 402321c:	10800f24 	muli	r2,r2,60
 4023220:	10c5883a 	add	r2,r2,r3
 4023224:	10800a04 	addi	r2,r2,40
 4023228:	10800017 	ldw	r2,0(r2)
 402322c:	1004d23a 	srli	r2,r2,8
 4023230:	10bfc00c 	andi	r2,r2,65280
 4023234:	2088b03a 	or	r4,r4,r2
 4023238:	e0bffd17 	ldw	r2,-12(fp)
 402323c:	00c101b4 	movhi	r3,1030
 4023240:	18e22e04 	addi	r3,r3,-30536
 4023244:	10800f24 	muli	r2,r2,60
 4023248:	10c5883a 	add	r2,r2,r3
 402324c:	10800a04 	addi	r2,r2,40
 4023250:	10800017 	ldw	r2,0(r2)
 4023254:	10bfc00c 	andi	r2,r2,65280
 4023258:	1004923a 	slli	r2,r2,8
 402325c:	2088b03a 	or	r4,r4,r2
 4023260:	e0bffd17 	ldw	r2,-12(fp)
 4023264:	00c101b4 	movhi	r3,1030
 4023268:	18e22e04 	addi	r3,r3,-30536
 402326c:	10800f24 	muli	r2,r2,60
 4023270:	10c5883a 	add	r2,r2,r3
 4023274:	10800a04 	addi	r2,r2,40
 4023278:	10800017 	ldw	r2,0(r2)
 402327c:	10803fcc 	andi	r2,r2,255
 4023280:	1004963a 	slli	r2,r2,24
 4023284:	2084b03a 	or	r2,r4,r2
 4023288:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_SNMASK, opt_ip);
 402328c:	e0fff917 	ldw	r3,-28(fp)
 4023290:	00800044 	movi	r2,1
 4023294:	18800005 	stb	r2,0(r3)
 4023298:	e0bff917 	ldw	r2,-28(fp)
 402329c:	10800044 	addi	r2,r2,1
 40232a0:	e0bff915 	stw	r2,-28(fp)
 40232a4:	e0fff917 	ldw	r3,-28(fp)
 40232a8:	00800104 	movi	r2,4
 40232ac:	18800005 	stb	r2,0(r3)
 40232b0:	e0bff917 	ldw	r2,-28(fp)
 40232b4:	10800044 	addi	r2,r2,1
 40232b8:	e0bff915 	stw	r2,-28(fp)
 40232bc:	e0bff917 	ldw	r2,-28(fp)
 40232c0:	10c000c4 	addi	r3,r2,3
 40232c4:	e0bffc04 	addi	r2,fp,-16
 40232c8:	10800003 	ldbu	r2,0(r2)
 40232cc:	18800005 	stb	r2,0(r3)
 40232d0:	e0bff917 	ldw	r2,-28(fp)
 40232d4:	10c00084 	addi	r3,r2,2
 40232d8:	e0bffc04 	addi	r2,fp,-16
 40232dc:	10800044 	addi	r2,r2,1
 40232e0:	10800003 	ldbu	r2,0(r2)
 40232e4:	18800005 	stb	r2,0(r3)
 40232e8:	e0bff917 	ldw	r2,-28(fp)
 40232ec:	10c00044 	addi	r3,r2,1
 40232f0:	e0bffc04 	addi	r2,fp,-16
 40232f4:	10800084 	addi	r2,r2,2
 40232f8:	10800003 	ldbu	r2,0(r2)
 40232fc:	18800005 	stb	r2,0(r3)
 4023300:	e0bffc04 	addi	r2,fp,-16
 4023304:	108000c4 	addi	r2,r2,3
 4023308:	10800003 	ldbu	r2,0(r2)
 402330c:	1007883a 	mov	r3,r2
 4023310:	e0bff917 	ldw	r2,-28(fp)
 4023314:	10c00005 	stb	r3,0(r2)
 4023318:	e0bff917 	ldw	r2,-28(fp)
 402331c:	10800104 	addi	r2,r2,4
 4023320:	e0bff915 	stw	r2,-28(fp)
   }
   if (dhc_states[iface].defgw)
 4023324:	e0bffd17 	ldw	r2,-12(fp)
 4023328:	00c101b4 	movhi	r3,1030
 402332c:	18e22e04 	addi	r3,r3,-30536
 4023330:	10800f24 	muli	r2,r2,60
 4023334:	10c5883a 	add	r2,r2,r3
 4023338:	10800b04 	addi	r2,r2,44
 402333c:	10800017 	ldw	r2,0(r2)
 4023340:	1005003a 	cmpeq	r2,r2,zero
 4023344:	10004e1e 	bne	r2,zero,4023480 <dhc_request+0x5b4>
   {
      opt_ip = ntohl(dhc_states[iface].defgw);
 4023348:	e0bffd17 	ldw	r2,-12(fp)
 402334c:	00c101b4 	movhi	r3,1030
 4023350:	18e22e04 	addi	r3,r3,-30536
 4023354:	10800f24 	muli	r2,r2,60
 4023358:	10c5883a 	add	r2,r2,r3
 402335c:	10800b04 	addi	r2,r2,44
 4023360:	10800017 	ldw	r2,0(r2)
 4023364:	1004d63a 	srli	r2,r2,24
 4023368:	11003fcc 	andi	r4,r2,255
 402336c:	e0bffd17 	ldw	r2,-12(fp)
 4023370:	00c101b4 	movhi	r3,1030
 4023374:	18e22e04 	addi	r3,r3,-30536
 4023378:	10800f24 	muli	r2,r2,60
 402337c:	10c5883a 	add	r2,r2,r3
 4023380:	10800b04 	addi	r2,r2,44
 4023384:	10800017 	ldw	r2,0(r2)
 4023388:	1004d23a 	srli	r2,r2,8
 402338c:	10bfc00c 	andi	r2,r2,65280
 4023390:	2088b03a 	or	r4,r4,r2
 4023394:	e0bffd17 	ldw	r2,-12(fp)
 4023398:	00c101b4 	movhi	r3,1030
 402339c:	18e22e04 	addi	r3,r3,-30536
 40233a0:	10800f24 	muli	r2,r2,60
 40233a4:	10c5883a 	add	r2,r2,r3
 40233a8:	10800b04 	addi	r2,r2,44
 40233ac:	10800017 	ldw	r2,0(r2)
 40233b0:	10bfc00c 	andi	r2,r2,65280
 40233b4:	1004923a 	slli	r2,r2,8
 40233b8:	2088b03a 	or	r4,r4,r2
 40233bc:	e0bffd17 	ldw	r2,-12(fp)
 40233c0:	00c101b4 	movhi	r3,1030
 40233c4:	18e22e04 	addi	r3,r3,-30536
 40233c8:	10800f24 	muli	r2,r2,60
 40233cc:	10c5883a 	add	r2,r2,r3
 40233d0:	10800b04 	addi	r2,r2,44
 40233d4:	10800017 	ldw	r2,0(r2)
 40233d8:	10803fcc 	andi	r2,r2,255
 40233dc:	1004963a 	slli	r2,r2,24
 40233e0:	2084b03a 	or	r2,r4,r2
 40233e4:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_ROUTER, opt_ip);
 40233e8:	e0fff917 	ldw	r3,-28(fp)
 40233ec:	008000c4 	movi	r2,3
 40233f0:	18800005 	stb	r2,0(r3)
 40233f4:	e0bff917 	ldw	r2,-28(fp)
 40233f8:	10800044 	addi	r2,r2,1
 40233fc:	e0bff915 	stw	r2,-28(fp)
 4023400:	e0fff917 	ldw	r3,-28(fp)
 4023404:	00800104 	movi	r2,4
 4023408:	18800005 	stb	r2,0(r3)
 402340c:	e0bff917 	ldw	r2,-28(fp)
 4023410:	10800044 	addi	r2,r2,1
 4023414:	e0bff915 	stw	r2,-28(fp)
 4023418:	e0bff917 	ldw	r2,-28(fp)
 402341c:	10c000c4 	addi	r3,r2,3
 4023420:	e0bffc04 	addi	r2,fp,-16
 4023424:	10800003 	ldbu	r2,0(r2)
 4023428:	18800005 	stb	r2,0(r3)
 402342c:	e0bff917 	ldw	r2,-28(fp)
 4023430:	10c00084 	addi	r3,r2,2
 4023434:	e0bffc04 	addi	r2,fp,-16
 4023438:	10800044 	addi	r2,r2,1
 402343c:	10800003 	ldbu	r2,0(r2)
 4023440:	18800005 	stb	r2,0(r3)
 4023444:	e0bff917 	ldw	r2,-28(fp)
 4023448:	10c00044 	addi	r3,r2,1
 402344c:	e0bffc04 	addi	r2,fp,-16
 4023450:	10800084 	addi	r2,r2,2
 4023454:	10800003 	ldbu	r2,0(r2)
 4023458:	18800005 	stb	r2,0(r3)
 402345c:	e0bffc04 	addi	r2,fp,-16
 4023460:	108000c4 	addi	r2,r2,3
 4023464:	10800003 	ldbu	r2,0(r2)
 4023468:	1007883a 	mov	r3,r2
 402346c:	e0bff917 	ldw	r2,-28(fp)
 4023470:	10c00005 	stb	r3,0(r2)
 4023474:	e0bff917 	ldw	r2,-28(fp)
 4023478:	10800104 	addi	r2,r2,4
 402347c:	e0bff915 	stw	r2,-28(fp)
         }
      }
   }
#endif

   if (dhc_states[iface].lease)
 4023480:	e0bffd17 	ldw	r2,-12(fp)
 4023484:	00c101b4 	movhi	r3,1030
 4023488:	18e22e04 	addi	r3,r3,-30536
 402348c:	10800f24 	muli	r2,r2,60
 4023490:	10c5883a 	add	r2,r2,r3
 4023494:	10800504 	addi	r2,r2,20
 4023498:	10800017 	ldw	r2,0(r2)
 402349c:	1005003a 	cmpeq	r2,r2,zero
 40234a0:	10003a1e 	bne	r2,zero,402358c <dhc_request+0x6c0>
   {
      PUT_IP_OPT(opts, DHOP_LEASE, dhc_states[iface].lease);
 40234a4:	e0fff917 	ldw	r3,-28(fp)
 40234a8:	00800cc4 	movi	r2,51
 40234ac:	18800005 	stb	r2,0(r3)
 40234b0:	e0bff917 	ldw	r2,-28(fp)
 40234b4:	10800044 	addi	r2,r2,1
 40234b8:	e0bff915 	stw	r2,-28(fp)
 40234bc:	e0fff917 	ldw	r3,-28(fp)
 40234c0:	00800104 	movi	r2,4
 40234c4:	18800005 	stb	r2,0(r3)
 40234c8:	e0bff917 	ldw	r2,-28(fp)
 40234cc:	10800044 	addi	r2,r2,1
 40234d0:	e0bff915 	stw	r2,-28(fp)
 40234d4:	e0bff917 	ldw	r2,-28(fp)
 40234d8:	110000c4 	addi	r4,r2,3
 40234dc:	e0bffd17 	ldw	r2,-12(fp)
 40234e0:	10800f24 	muli	r2,r2,60
 40234e4:	10c00504 	addi	r3,r2,20
 40234e8:	008101b4 	movhi	r2,1030
 40234ec:	10a22e04 	addi	r2,r2,-30536
 40234f0:	1885883a 	add	r2,r3,r2
 40234f4:	10800003 	ldbu	r2,0(r2)
 40234f8:	20800005 	stb	r2,0(r4)
 40234fc:	e0bff917 	ldw	r2,-28(fp)
 4023500:	11000084 	addi	r4,r2,2
 4023504:	e0bffd17 	ldw	r2,-12(fp)
 4023508:	10800f24 	muli	r2,r2,60
 402350c:	10c00504 	addi	r3,r2,20
 4023510:	008101b4 	movhi	r2,1030
 4023514:	10a22e04 	addi	r2,r2,-30536
 4023518:	1885883a 	add	r2,r3,r2
 402351c:	10800044 	addi	r2,r2,1
 4023520:	10800003 	ldbu	r2,0(r2)
 4023524:	20800005 	stb	r2,0(r4)
 4023528:	e0bff917 	ldw	r2,-28(fp)
 402352c:	11000044 	addi	r4,r2,1
 4023530:	e0bffd17 	ldw	r2,-12(fp)
 4023534:	10800f24 	muli	r2,r2,60
 4023538:	10c00504 	addi	r3,r2,20
 402353c:	008101b4 	movhi	r2,1030
 4023540:	10a22e04 	addi	r2,r2,-30536
 4023544:	1885883a 	add	r2,r3,r2
 4023548:	10800084 	addi	r2,r2,2
 402354c:	10800003 	ldbu	r2,0(r2)
 4023550:	20800005 	stb	r2,0(r4)
 4023554:	e0bffd17 	ldw	r2,-12(fp)
 4023558:	10800f24 	muli	r2,r2,60
 402355c:	10c00504 	addi	r3,r2,20
 4023560:	008101b4 	movhi	r2,1030
 4023564:	10a22e04 	addi	r2,r2,-30536
 4023568:	1885883a 	add	r2,r3,r2
 402356c:	108000c4 	addi	r2,r2,3
 4023570:	10800003 	ldbu	r2,0(r2)
 4023574:	1007883a 	mov	r3,r2
 4023578:	e0bff917 	ldw	r2,-28(fp)
 402357c:	10c00005 	stb	r3,0(r2)
 4023580:	e0bff917 	ldw	r2,-28(fp)
 4023584:	10800104 	addi	r2,r2,4
 4023588:	e0bff915 	stw	r2,-28(fp)
   }

   /* If there is a list of options to be requested from server, include it*/
#ifdef DHCP_REQLIST
   if ( reqlist_len > 0 )
 402358c:	d0a03217 	ldw	r2,-32568(gp)
 4023590:	10800050 	cmplti	r2,r2,1
 4023594:	10001e1e 	bne	r2,zero,4023610 <dhc_request+0x744>
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
 4023598:	e0fff917 	ldw	r3,-28(fp)
 402359c:	00800dc4 	movi	r2,55
 40235a0:	18800005 	stb	r2,0(r3)
 40235a4:	e0bff917 	ldw	r2,-28(fp)
 40235a8:	10800044 	addi	r2,r2,1
 40235ac:	e0bff915 	stw	r2,-28(fp)
      *opts++ = (u_char)reqlist_len ;
 40235b0:	d0a03217 	ldw	r2,-32568(gp)
 40235b4:	1007883a 	mov	r3,r2
 40235b8:	e0bff917 	ldw	r2,-28(fp)
 40235bc:	10c00005 	stb	r3,0(r2)
 40235c0:	e0bff917 	ldw	r2,-28(fp)
 40235c4:	10800044 	addi	r2,r2,1
 40235c8:	e0bff915 	stw	r2,-28(fp)

      for (i=0 ; i < reqlist_len ; i++ )
 40235cc:	e03ff715 	stw	zero,-36(fp)
 40235d0:	00000c06 	br	4023604 <dhc_request+0x738>
         *opts++ = reqlist[i];
 40235d4:	e0fff717 	ldw	r3,-36(fp)
 40235d8:	d0a03104 	addi	r2,gp,-32572
 40235dc:	1885883a 	add	r2,r3,r2
 40235e0:	10c00003 	ldbu	r3,0(r2)
 40235e4:	e0bff917 	ldw	r2,-28(fp)
 40235e8:	10c00005 	stb	r3,0(r2)
 40235ec:	e0bff917 	ldw	r2,-28(fp)
 40235f0:	10800044 	addi	r2,r2,1
 40235f4:	e0bff915 	stw	r2,-28(fp)
   {
      int   i;
      *opts++ = DHOP_REQLIST ;
      *opts++ = (u_char)reqlist_len ;

      for (i=0 ; i < reqlist_len ; i++ )
 40235f8:	e0bff717 	ldw	r2,-36(fp)
 40235fc:	10800044 	addi	r2,r2,1
 4023600:	e0bff715 	stw	r2,-36(fp)
 4023604:	d0e03217 	ldw	r3,-32568(gp)
 4023608:	e0bff717 	ldw	r2,-36(fp)
 402360c:	10fff116 	blt	r2,r3,40235d4 <dhc_request+0x708>
         *opts++ = reqlist[i];
   }
#endif   /* DHCP_REQLIST */

   /* only set client IP address (ours) when renewing or rebinding */
   if ((dhc_states[iface].state == DHCS_RENEWING)
 4023610:	e0bffd17 	ldw	r2,-12(fp)
 4023614:	00c101b4 	movhi	r3,1030
 4023618:	18e22e04 	addi	r3,r3,-30536
 402361c:	10800f24 	muli	r2,r2,60
 4023620:	10c5883a 	add	r2,r2,r3
 4023624:	10800017 	ldw	r2,0(r2)
 4023628:	108001e0 	cmpeqi	r2,r2,7
 402362c:	1000081e 	bne	r2,zero,4023650 <dhc_request+0x784>
 4023630:	e0bffd17 	ldw	r2,-12(fp)
 4023634:	00c101b4 	movhi	r3,1030
 4023638:	18e22e04 	addi	r3,r3,-30536
 402363c:	10800f24 	muli	r2,r2,60
 4023640:	10c5883a 	add	r2,r2,r3
 4023644:	10800017 	ldw	r2,0(r2)
 4023648:	10800218 	cmpnei	r2,r2,8
 402364c:	10000a1e 	bne	r2,zero,4023678 <dhc_request+0x7ac>
       || (dhc_states[iface].state == DHCS_REBINDING))
   {
      outbp->ciaddr = nets[iface]->n_ipaddr;
 4023650:	e0bffd17 	ldw	r2,-12(fp)
 4023654:	00c101b4 	movhi	r3,1030
 4023658:	18e20804 	addi	r3,r3,-30688
 402365c:	1085883a 	add	r2,r2,r2
 4023660:	1085883a 	add	r2,r2,r2
 4023664:	10c5883a 	add	r2,r2,r3
 4023668:	10800017 	ldw	r2,0(r2)
 402366c:	10c00a17 	ldw	r3,40(r2)
 4023670:	e0bffb17 	ldw	r2,-20(fp)
 4023674:	10c00315 	stw	r3,12(r2)
    * "Client inserts the address of the selected server in 'server 
    * identifier'. . . ." RFC 951, p. 4 definition of 'siaddr' is 
    * "server IP address; returned in bootreply by server." 
    */
   /* Only include server identifier option when selecting a server. */
   if ((dhc_states[iface].state == DHCS_SELECTING) ||
 4023678:	e0bffd17 	ldw	r2,-12(fp)
 402367c:	00c101b4 	movhi	r3,1030
 4023680:	18e22e04 	addi	r3,r3,-30536
 4023684:	10800f24 	muli	r2,r2,60
 4023688:	10c5883a 	add	r2,r2,r3
 402368c:	10800017 	ldw	r2,0(r2)
 4023690:	10800120 	cmpeqi	r2,r2,4
 4023694:	1000081e 	bne	r2,zero,40236b8 <dhc_request+0x7ec>
 4023698:	e0bffd17 	ldw	r2,-12(fp)
 402369c:	00c101b4 	movhi	r3,1030
 40236a0:	18e22e04 	addi	r3,r3,-30536
 40236a4:	10800f24 	muli	r2,r2,60
 40236a8:	10c5883a 	add	r2,r2,r3
 40236ac:	10800017 	ldw	r2,0(r2)
 40236b0:	10800158 	cmpnei	r2,r2,5
 40236b4:	10004e1e 	bne	r2,zero,40237f0 <dhc_request+0x924>
       (dhc_states[iface].state == DHCS_REQUESTING))
   {
      opt_ip = ntohl(dhc_states[iface].srv_ipaddr);
 40236b8:	e0bffd17 	ldw	r2,-12(fp)
 40236bc:	00c101b4 	movhi	r3,1030
 40236c0:	18e22e04 	addi	r3,r3,-30536
 40236c4:	10800f24 	muli	r2,r2,60
 40236c8:	10c5883a 	add	r2,r2,r3
 40236cc:	10800d04 	addi	r2,r2,52
 40236d0:	10800017 	ldw	r2,0(r2)
 40236d4:	1004d63a 	srli	r2,r2,24
 40236d8:	11003fcc 	andi	r4,r2,255
 40236dc:	e0bffd17 	ldw	r2,-12(fp)
 40236e0:	00c101b4 	movhi	r3,1030
 40236e4:	18e22e04 	addi	r3,r3,-30536
 40236e8:	10800f24 	muli	r2,r2,60
 40236ec:	10c5883a 	add	r2,r2,r3
 40236f0:	10800d04 	addi	r2,r2,52
 40236f4:	10800017 	ldw	r2,0(r2)
 40236f8:	1004d23a 	srli	r2,r2,8
 40236fc:	10bfc00c 	andi	r2,r2,65280
 4023700:	2088b03a 	or	r4,r4,r2
 4023704:	e0bffd17 	ldw	r2,-12(fp)
 4023708:	00c101b4 	movhi	r3,1030
 402370c:	18e22e04 	addi	r3,r3,-30536
 4023710:	10800f24 	muli	r2,r2,60
 4023714:	10c5883a 	add	r2,r2,r3
 4023718:	10800d04 	addi	r2,r2,52
 402371c:	10800017 	ldw	r2,0(r2)
 4023720:	10bfc00c 	andi	r2,r2,65280
 4023724:	1004923a 	slli	r2,r2,8
 4023728:	2088b03a 	or	r4,r4,r2
 402372c:	e0bffd17 	ldw	r2,-12(fp)
 4023730:	00c101b4 	movhi	r3,1030
 4023734:	18e22e04 	addi	r3,r3,-30536
 4023738:	10800f24 	muli	r2,r2,60
 402373c:	10c5883a 	add	r2,r2,r3
 4023740:	10800d04 	addi	r2,r2,52
 4023744:	10800017 	ldw	r2,0(r2)
 4023748:	10803fcc 	andi	r2,r2,255
 402374c:	1004963a 	slli	r2,r2,24
 4023750:	2084b03a 	or	r2,r4,r2
 4023754:	e0bffc15 	stw	r2,-16(fp)
      PUT_IP_OPT(opts, DHOP_SERVER, opt_ip);
 4023758:	e0fff917 	ldw	r3,-28(fp)
 402375c:	00800d84 	movi	r2,54
 4023760:	18800005 	stb	r2,0(r3)
 4023764:	e0bff917 	ldw	r2,-28(fp)
 4023768:	10800044 	addi	r2,r2,1
 402376c:	e0bff915 	stw	r2,-28(fp)
 4023770:	e0fff917 	ldw	r3,-28(fp)
 4023774:	00800104 	movi	r2,4
 4023778:	18800005 	stb	r2,0(r3)
 402377c:	e0bff917 	ldw	r2,-28(fp)
 4023780:	10800044 	addi	r2,r2,1
 4023784:	e0bff915 	stw	r2,-28(fp)
 4023788:	e0bff917 	ldw	r2,-28(fp)
 402378c:	10c000c4 	addi	r3,r2,3
 4023790:	e0bffc04 	addi	r2,fp,-16
 4023794:	10800003 	ldbu	r2,0(r2)
 4023798:	18800005 	stb	r2,0(r3)
 402379c:	e0bff917 	ldw	r2,-28(fp)
 40237a0:	10c00084 	addi	r3,r2,2
 40237a4:	e0bffc04 	addi	r2,fp,-16
 40237a8:	10800044 	addi	r2,r2,1
 40237ac:	10800003 	ldbu	r2,0(r2)
 40237b0:	18800005 	stb	r2,0(r3)
 40237b4:	e0bff917 	ldw	r2,-28(fp)
 40237b8:	10c00044 	addi	r3,r2,1
 40237bc:	e0bffc04 	addi	r2,fp,-16
 40237c0:	10800084 	addi	r2,r2,2
 40237c4:	10800003 	ldbu	r2,0(r2)
 40237c8:	18800005 	stb	r2,0(r3)
 40237cc:	e0bffc04 	addi	r2,fp,-16
 40237d0:	108000c4 	addi	r2,r2,3
 40237d4:	10800003 	ldbu	r2,0(r2)
 40237d8:	1007883a 	mov	r3,r2
 40237dc:	e0bff917 	ldw	r2,-28(fp)
 40237e0:	10c00005 	stb	r3,0(r2)
 40237e4:	e0bff917 	ldw	r2,-28(fp)
 40237e8:	10800104 	addi	r2,r2,4
 40237ec:	e0bff915 	stw	r2,-28(fp)
   /* add hostname (code 12) */
   PUT_STRING_OPT(opts, 12, dhc_hostname()); 
#endif /* USE_AUTOIP */

   /* Client Fully Qualified Domain Name */
   PUT_STRING_OPT(opts, 81, DC_DOMAINNAME); 
 40237f0:	e0fff917 	ldw	r3,-28(fp)
 40237f4:	00801444 	movi	r2,81
 40237f8:	18800005 	stb	r2,0(r3)
 40237fc:	e0bff917 	ldw	r2,-28(fp)
 4023800:	10800044 	addi	r2,r2,1
 4023804:	e0bff915 	stw	r2,-28(fp)
 4023808:	00800184 	movi	r2,6
 402380c:	e0bff615 	stw	r2,-40(fp)
 4023810:	e0bff617 	ldw	r2,-40(fp)
 4023814:	1007883a 	mov	r3,r2
 4023818:	e0bff917 	ldw	r2,-28(fp)
 402381c:	10c00005 	stb	r3,0(r2)
 4023820:	e0bff917 	ldw	r2,-28(fp)
 4023824:	10800044 	addi	r2,r2,1
 4023828:	e0bff915 	stw	r2,-28(fp)
 402382c:	e13ff917 	ldw	r4,-28(fp)
 4023830:	e1bff617 	ldw	r6,-40(fp)
 4023834:	01410174 	movhi	r5,1029
 4023838:	296ced04 	addi	r5,r5,-19532
 402383c:	404625c0 	call	404625c <strncpy>
 4023840:	e0bff617 	ldw	r2,-40(fp)
 4023844:	1007883a 	mov	r3,r2
 4023848:	e0bff917 	ldw	r2,-28(fp)
 402384c:	10c5883a 	add	r2,r2,r3
 4023850:	e0bff915 	stw	r2,-28(fp)
   /* Vendor Class Identifier */
   PUT_STRING_OPT(opts, 60, name); 
 4023854:	e0fff917 	ldw	r3,-28(fp)
 4023858:	00800f04 	movi	r2,60
 402385c:	18800005 	stb	r2,0(r3)
 4023860:	e0bff917 	ldw	r2,-28(fp)
 4023864:	10800044 	addi	r2,r2,1
 4023868:	e0bff915 	stw	r2,-28(fp)
 402386c:	00810174 	movhi	r2,1029
 4023870:	10ba0604 	addi	r2,r2,-6120
 4023874:	11000017 	ldw	r4,0(r2)
 4023878:	40029d00 	call	40029d0 <strlen>
 402387c:	e0bff515 	stw	r2,-44(fp)
 4023880:	e0bff517 	ldw	r2,-44(fp)
 4023884:	1007883a 	mov	r3,r2
 4023888:	e0bff917 	ldw	r2,-28(fp)
 402388c:	10c00005 	stb	r3,0(r2)
 4023890:	e0bff917 	ldw	r2,-28(fp)
 4023894:	10800044 	addi	r2,r2,1
 4023898:	e0bff915 	stw	r2,-28(fp)
 402389c:	e13ff917 	ldw	r4,-28(fp)
 40238a0:	00810174 	movhi	r2,1029
 40238a4:	10ba0604 	addi	r2,r2,-6120
 40238a8:	11400017 	ldw	r5,0(r2)
 40238ac:	e1bff517 	ldw	r6,-44(fp)
 40238b0:	404625c0 	call	404625c <strncpy>
 40238b4:	e0bff517 	ldw	r2,-44(fp)
 40238b8:	1007883a 	mov	r3,r2
 40238bc:	e0bff917 	ldw	r2,-28(fp)
 40238c0:	10c5883a 	add	r2,r2,r3
 40238c4:	e0bff915 	stw	r2,-28(fp)

   *opts++ = DHOP_END;  /* Mark the end of options */
 40238c8:	e0fff917 	ldw	r3,-28(fp)
 40238cc:	00bfffc4 	movi	r2,-1
 40238d0:	18800005 	stb	r2,0(r3)
 40238d4:	e0bff917 	ldw	r2,-28(fp)
 40238d8:	10800044 	addi	r2,r2,1
 40238dc:	e0bff915 	stw	r2,-28(fp)

   /* figure out whether to send via unicast or broadcast */
   if (dhc_states[iface].state == DHCS_RENEWING)
 40238e0:	e0bffd17 	ldw	r2,-12(fp)
 40238e4:	00c101b4 	movhi	r3,1030
 40238e8:	18e22e04 	addi	r3,r3,-30536
 40238ec:	10800f24 	muli	r2,r2,60
 40238f0:	10c5883a 	add	r2,r2,r3
 40238f4:	10800017 	ldw	r2,0(r2)
 40238f8:	108001d8 	cmpnei	r2,r2,7
 40238fc:	10000a1e 	bne	r2,zero,4023928 <dhc_request+0xa5c>
   {
      pkt->fhost = dhc_states[iface].srv_ipaddr;
 4023900:	e0bffd17 	ldw	r2,-12(fp)
 4023904:	00c101b4 	movhi	r3,1030
 4023908:	18e22e04 	addi	r3,r3,-30536
 402390c:	10800f24 	muli	r2,r2,60
 4023910:	10c5883a 	add	r2,r2,r3
 4023914:	10800d04 	addi	r2,r2,52
 4023918:	10c00017 	ldw	r3,0(r2)
 402391c:	e0bffa17 	ldw	r2,-24(fp)
 4023920:	10c00715 	stw	r3,28(r2)
 4023924:	00000306 	br	4023934 <dhc_request+0xa68>
   }
   else
   {
      pkt->fhost = 0xFFFFFFFF;   /* broadcast request */
 4023928:	e0fffa17 	ldw	r3,-24(fp)
 402392c:	00bfffc4 	movi	r2,-1
 4023930:	18800715 	stw	r2,28(r3)
   }

   pkt->net = nets[iface];    /* send out caller spec'ed net */
 4023934:	e0bffd17 	ldw	r2,-12(fp)
 4023938:	00c101b4 	movhi	r3,1030
 402393c:	18e20804 	addi	r3,r3,-30688
 4023940:	1085883a 	add	r2,r2,r2
 4023944:	1085883a 	add	r2,r2,r2
 4023948:	10c5883a 	add	r2,r2,r3
 402394c:	10c00017 	ldw	r3,0(r2)
 4023950:	e0bffa17 	ldw	r2,-24(fp)
 4023954:	10c00615 	stw	r3,24(r2)
   pkt->nb_plen = (char *)opts - (char *)outbp;
 4023958:	e0fff917 	ldw	r3,-28(fp)
 402395c:	e0bffb17 	ldw	r2,-20(fp)
 4023960:	1885c83a 	sub	r2,r3,r2
 4023964:	1007883a 	mov	r3,r2
 4023968:	e0bffa17 	ldw	r2,-24(fp)
 402396c:	10c00415 	stw	r3,16(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 4023970:	010010c4 	movi	r4,67
 4023974:	01401104 	movi	r5,68
 4023978:	e1bffa17 	ldw	r6,-24(fp)
 402397c:	403eff00 	call	403eff0 <udp_send>
   dsc_requests++;
 4023980:	d0a81117 	ldw	r2,-24508(gp)
 4023984:	10800044 	addi	r2,r2,1
 4023988:	d0a81115 	stw	r2,-24508(gp)

   dhc_states[iface].last_tick = cticks;
 402398c:	e13ffd17 	ldw	r4,-12(fp)
 4023990:	00810174 	movhi	r2,1029
 4023994:	1081e404 	addi	r2,r2,1936
 4023998:	11400017 	ldw	r5,0(r2)
 402399c:	00c101b4 	movhi	r3,1030
 40239a0:	18e22e04 	addi	r3,r3,-30536
 40239a4:	20800f24 	muli	r2,r4,60
 40239a8:	10c5883a 	add	r2,r2,r3
 40239ac:	10800404 	addi	r2,r2,16
 40239b0:	11400015 	stw	r5,0(r2)
   dhc_states[iface].tries++;
 40239b4:	e17ffd17 	ldw	r5,-12(fp)
 40239b8:	00c101b4 	movhi	r3,1030
 40239bc:	18e22e04 	addi	r3,r3,-30536
 40239c0:	28800f24 	muli	r2,r5,60
 40239c4:	10c5883a 	add	r2,r2,r3
 40239c8:	10800104 	addi	r2,r2,4
 40239cc:	10800017 	ldw	r2,0(r2)
 40239d0:	11000044 	addi	r4,r2,1
 40239d4:	00c101b4 	movhi	r3,1030
 40239d8:	18e22e04 	addi	r3,r3,-30536
 40239dc:	28800f24 	muli	r2,r5,60
 40239e0:	10c5883a 	add	r2,r2,r3
 40239e4:	10800104 	addi	r2,r2,4
 40239e8:	11000015 	stw	r4,0(r2)

   return 0;   /* return OK code */
 40239ec:	e03fff15 	stw	zero,-4(fp)
 40239f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40239f4:	e037883a 	mov	sp,fp
 40239f8:	dfc00117 	ldw	ra,4(sp)
 40239fc:	df000017 	ldw	fp,0(sp)
 4023a00:	dec00204 	addi	sp,sp,8
 4023a04:	f800283a 	ret

04023a08 <dhc_setip>:
 * RETURNS: Returns 0 if ok, else non-zero ENP error.
 */

int
dhc_setip(int iface)
{
 4023a08:	defffd04 	addi	sp,sp,-12
 4023a0c:	dfc00215 	stw	ra,8(sp)
 4023a10:	df000115 	stw	fp,4(sp)
 4023a14:	df000104 	addi	fp,sp,4
 4023a18:	e13fff15 	stw	r4,-4(fp)
   nets[iface]->n_ipaddr = dhc_states[iface].ipaddr;
 4023a1c:	e0bfff17 	ldw	r2,-4(fp)
 4023a20:	00c101b4 	movhi	r3,1030
 4023a24:	18e20804 	addi	r3,r3,-30688
 4023a28:	1085883a 	add	r2,r2,r2
 4023a2c:	1085883a 	add	r2,r2,r2
 4023a30:	10c5883a 	add	r2,r2,r3
 4023a34:	11000017 	ldw	r4,0(r2)
 4023a38:	e0bfff17 	ldw	r2,-4(fp)
 4023a3c:	00c101b4 	movhi	r3,1030
 4023a40:	18e22e04 	addi	r3,r3,-30536
 4023a44:	10800f24 	muli	r2,r2,60
 4023a48:	10c5883a 	add	r2,r2,r3
 4023a4c:	10800904 	addi	r2,r2,36
 4023a50:	10800017 	ldw	r2,0(r2)
 4023a54:	20800a15 	stw	r2,40(r4)
   nets[iface]->snmask   = dhc_states[iface].snmask;
 4023a58:	e0bfff17 	ldw	r2,-4(fp)
 4023a5c:	00c101b4 	movhi	r3,1030
 4023a60:	18e20804 	addi	r3,r3,-30688
 4023a64:	1085883a 	add	r2,r2,r2
 4023a68:	1085883a 	add	r2,r2,r2
 4023a6c:	10c5883a 	add	r2,r2,r3
 4023a70:	11000017 	ldw	r4,0(r2)
 4023a74:	e0bfff17 	ldw	r2,-4(fp)
 4023a78:	00c101b4 	movhi	r3,1030
 4023a7c:	18e22e04 	addi	r3,r3,-30536
 4023a80:	10800f24 	muli	r2,r2,60
 4023a84:	10c5883a 	add	r2,r2,r3
 4023a88:	10800a04 	addi	r2,r2,40
 4023a8c:	10800017 	ldw	r2,0(r2)
 4023a90:	20800c15 	stw	r2,48(r4)
   nets[iface]->n_defgw  = dhc_states[iface].defgw;
 4023a94:	e0bfff17 	ldw	r2,-4(fp)
 4023a98:	00c101b4 	movhi	r3,1030
 4023a9c:	18e20804 	addi	r3,r3,-30688
 4023aa0:	1085883a 	add	r2,r2,r2
 4023aa4:	1085883a 	add	r2,r2,r2
 4023aa8:	10c5883a 	add	r2,r2,r3
 4023aac:	11000017 	ldw	r4,0(r2)
 4023ab0:	e0bfff17 	ldw	r2,-4(fp)
 4023ab4:	00c101b4 	movhi	r3,1030
 4023ab8:	18e22e04 	addi	r3,r3,-30536
 4023abc:	10800f24 	muli	r2,r2,60
 4023ac0:	10c5883a 	add	r2,r2,r3
 4023ac4:	10800b04 	addi	r2,r2,44
 4023ac8:	10800017 	ldw	r2,0(r2)
 4023acc:	20800d15 	stw	r2,52(r4)

   if ( nets[iface]->snmask == 0 )
 4023ad0:	e0bfff17 	ldw	r2,-4(fp)
 4023ad4:	00c101b4 	movhi	r3,1030
 4023ad8:	18e20804 	addi	r3,r3,-30688
 4023adc:	1085883a 	add	r2,r2,r2
 4023ae0:	1085883a 	add	r2,r2,r2
 4023ae4:	10c5883a 	add	r2,r2,r3
 4023ae8:	10800017 	ldw	r2,0(r2)
 4023aec:	10800c17 	ldw	r2,48(r2)
 4023af0:	1004c03a 	cmpne	r2,r2,zero
 4023af4:	1000111e 	bne	r2,zero,4023b3c <dhc_setip+0x134>
   {
      fixup_subnet_mask(iface);
 4023af8:	e13fff17 	ldw	r4,-4(fp)
 4023afc:	401e0b40 	call	401e0b4 <fixup_subnet_mask>
      dhc_states[iface].snmask = nets[iface]->snmask; 
 4023b00:	e17fff17 	ldw	r5,-4(fp)
 4023b04:	e0bfff17 	ldw	r2,-4(fp)
 4023b08:	00c101b4 	movhi	r3,1030
 4023b0c:	18e20804 	addi	r3,r3,-30688
 4023b10:	1085883a 	add	r2,r2,r2
 4023b14:	1085883a 	add	r2,r2,r2
 4023b18:	10c5883a 	add	r2,r2,r3
 4023b1c:	10800017 	ldw	r2,0(r2)
 4023b20:	11000c17 	ldw	r4,48(r2)
 4023b24:	00c101b4 	movhi	r3,1030
 4023b28:	18e22e04 	addi	r3,r3,-30536
 4023b2c:	28800f24 	muli	r2,r5,60
 4023b30:	10c5883a 	add	r2,r2,r3
 4023b34:	10800a04 	addi	r2,r2,40
 4023b38:	11000015 	stw	r4,0(r2)
   }

   /* fixup broadcast addresses */
   nets[iface]->n_netbr    = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 4023b3c:	e0bfff17 	ldw	r2,-4(fp)
 4023b40:	00c101b4 	movhi	r3,1030
 4023b44:	18e20804 	addi	r3,r3,-30688
 4023b48:	1085883a 	add	r2,r2,r2
 4023b4c:	1085883a 	add	r2,r2,r2
 4023b50:	10c5883a 	add	r2,r2,r3
 4023b54:	11400017 	ldw	r5,0(r2)
 4023b58:	e0bfff17 	ldw	r2,-4(fp)
 4023b5c:	00c101b4 	movhi	r3,1030
 4023b60:	18e20804 	addi	r3,r3,-30688
 4023b64:	1085883a 	add	r2,r2,r2
 4023b68:	1085883a 	add	r2,r2,r2
 4023b6c:	10c5883a 	add	r2,r2,r3
 4023b70:	10800017 	ldw	r2,0(r2)
 4023b74:	11000a17 	ldw	r4,40(r2)
 4023b78:	e0bfff17 	ldw	r2,-4(fp)
 4023b7c:	00c101b4 	movhi	r3,1030
 4023b80:	18e20804 	addi	r3,r3,-30688
 4023b84:	1085883a 	add	r2,r2,r2
 4023b88:	1085883a 	add	r2,r2,r2
 4023b8c:	10c5883a 	add	r2,r2,r3
 4023b90:	10800017 	ldw	r2,0(r2)
 4023b94:	10800c17 	ldw	r2,48(r2)
 4023b98:	0084303a 	nor	r2,zero,r2
 4023b9c:	2084b03a 	or	r2,r4,r2
 4023ba0:	28800e15 	stw	r2,56(r5)
   nets[iface]->n_netbr42  = nets[iface]->n_ipaddr &  nets[iface]->snmask;
 4023ba4:	e0bfff17 	ldw	r2,-4(fp)
 4023ba8:	00c101b4 	movhi	r3,1030
 4023bac:	18e20804 	addi	r3,r3,-30688
 4023bb0:	1085883a 	add	r2,r2,r2
 4023bb4:	1085883a 	add	r2,r2,r2
 4023bb8:	10c5883a 	add	r2,r2,r3
 4023bbc:	11400017 	ldw	r5,0(r2)
 4023bc0:	e0bfff17 	ldw	r2,-4(fp)
 4023bc4:	00c101b4 	movhi	r3,1030
 4023bc8:	18e20804 	addi	r3,r3,-30688
 4023bcc:	1085883a 	add	r2,r2,r2
 4023bd0:	1085883a 	add	r2,r2,r2
 4023bd4:	10c5883a 	add	r2,r2,r3
 4023bd8:	10800017 	ldw	r2,0(r2)
 4023bdc:	11000a17 	ldw	r4,40(r2)
 4023be0:	e0bfff17 	ldw	r2,-4(fp)
 4023be4:	00c101b4 	movhi	r3,1030
 4023be8:	18e20804 	addi	r3,r3,-30688
 4023bec:	1085883a 	add	r2,r2,r2
 4023bf0:	1085883a 	add	r2,r2,r2
 4023bf4:	10c5883a 	add	r2,r2,r3
 4023bf8:	10800017 	ldw	r2,0(r2)
 4023bfc:	10800c17 	ldw	r2,48(r2)
 4023c00:	2084703a 	and	r2,r4,r2
 4023c04:	28800f15 	stw	r2,60(r5)
   nets[iface]->n_subnetbr = nets[iface]->n_ipaddr | ~nets[iface]->snmask;
 4023c08:	e0bfff17 	ldw	r2,-4(fp)
 4023c0c:	00c101b4 	movhi	r3,1030
 4023c10:	18e20804 	addi	r3,r3,-30688
 4023c14:	1085883a 	add	r2,r2,r2
 4023c18:	1085883a 	add	r2,r2,r2
 4023c1c:	10c5883a 	add	r2,r2,r3
 4023c20:	11400017 	ldw	r5,0(r2)
 4023c24:	e0bfff17 	ldw	r2,-4(fp)
 4023c28:	00c101b4 	movhi	r3,1030
 4023c2c:	18e20804 	addi	r3,r3,-30688
 4023c30:	1085883a 	add	r2,r2,r2
 4023c34:	1085883a 	add	r2,r2,r2
 4023c38:	10c5883a 	add	r2,r2,r3
 4023c3c:	10800017 	ldw	r2,0(r2)
 4023c40:	11000a17 	ldw	r4,40(r2)
 4023c44:	e0bfff17 	ldw	r2,-4(fp)
 4023c48:	00c101b4 	movhi	r3,1030
 4023c4c:	18e20804 	addi	r3,r3,-30688
 4023c50:	1085883a 	add	r2,r2,r2
 4023c54:	1085883a 	add	r2,r2,r2
 4023c58:	10c5883a 	add	r2,r2,r3
 4023c5c:	10800017 	ldw	r2,0(r2)
 4023c60:	10800c17 	ldw	r2,48(r2)
 4023c64:	0084303a 	nor	r2,zero,r2
 4023c68:	2084b03a 	or	r2,r4,r2
 4023c6c:	28801015 	stw	r2,64(r5)

   return 0;   /* return OK code */
 4023c70:	0005883a 	mov	r2,zero
}
 4023c74:	e037883a 	mov	sp,fp
 4023c78:	dfc00117 	ldw	ra,4(sp)
 4023c7c:	df000017 	ldw	fp,0(sp)
 4023c80:	dec00204 	addi	sp,sp,8
 4023c84:	f800283a 	ret

04023c88 <dhc_resetip>:
 * RETURNS: Returns 0 if ok, else non-zero error. 
 */

int
dhc_resetip(int iface)
{
 4023c88:	defffe04 	addi	sp,sp,-8
 4023c8c:	df000115 	stw	fp,4(sp)
 4023c90:	df000104 	addi	fp,sp,4
 4023c94:	e13fff15 	stw	r4,-4(fp)
   /* reset the ipaddress */
   nets[iface]->n_ipaddr = 0;
 4023c98:	e0bfff17 	ldw	r2,-4(fp)
 4023c9c:	00c101b4 	movhi	r3,1030
 4023ca0:	18e20804 	addi	r3,r3,-30688
 4023ca4:	1085883a 	add	r2,r2,r2
 4023ca8:	1085883a 	add	r2,r2,r2
 4023cac:	10c5883a 	add	r2,r2,r3
 4023cb0:	10800017 	ldw	r2,0(r2)
 4023cb4:	10000a15 	stw	zero,40(r2)
   nets[iface]->snmask   = 0;
 4023cb8:	e0bfff17 	ldw	r2,-4(fp)
 4023cbc:	00c101b4 	movhi	r3,1030
 4023cc0:	18e20804 	addi	r3,r3,-30688
 4023cc4:	1085883a 	add	r2,r2,r2
 4023cc8:	1085883a 	add	r2,r2,r2
 4023ccc:	10c5883a 	add	r2,r2,r3
 4023cd0:	10800017 	ldw	r2,0(r2)
 4023cd4:	10000c15 	stw	zero,48(r2)
   nets[iface]->n_defgw  = 0;
 4023cd8:	e0bfff17 	ldw	r2,-4(fp)
 4023cdc:	00c101b4 	movhi	r3,1030
 4023ce0:	18e20804 	addi	r3,r3,-30688
 4023ce4:	1085883a 	add	r2,r2,r2
 4023ce8:	1085883a 	add	r2,r2,r2
 4023cec:	10c5883a 	add	r2,r2,r3
 4023cf0:	10800017 	ldw	r2,0(r2)
 4023cf4:	10000d15 	stw	zero,52(r2)

   /* reset the broadcast addresses */
   nets[iface]->n_netbr    = 0;
 4023cf8:	e0bfff17 	ldw	r2,-4(fp)
 4023cfc:	00c101b4 	movhi	r3,1030
 4023d00:	18e20804 	addi	r3,r3,-30688
 4023d04:	1085883a 	add	r2,r2,r2
 4023d08:	1085883a 	add	r2,r2,r2
 4023d0c:	10c5883a 	add	r2,r2,r3
 4023d10:	10800017 	ldw	r2,0(r2)
 4023d14:	10000e15 	stw	zero,56(r2)
   nets[iface]->n_netbr42  = 0;
 4023d18:	e0bfff17 	ldw	r2,-4(fp)
 4023d1c:	00c101b4 	movhi	r3,1030
 4023d20:	18e20804 	addi	r3,r3,-30688
 4023d24:	1085883a 	add	r2,r2,r2
 4023d28:	1085883a 	add	r2,r2,r2
 4023d2c:	10c5883a 	add	r2,r2,r3
 4023d30:	10800017 	ldw	r2,0(r2)
 4023d34:	10000f15 	stw	zero,60(r2)
   nets[iface]->n_subnetbr = 0;
 4023d38:	e0bfff17 	ldw	r2,-4(fp)
 4023d3c:	00c101b4 	movhi	r3,1030
 4023d40:	18e20804 	addi	r3,r3,-30688
 4023d44:	1085883a 	add	r2,r2,r2
 4023d48:	1085883a 	add	r2,r2,r2
 4023d4c:	10c5883a 	add	r2,r2,r3
 4023d50:	10800017 	ldw	r2,0(r2)
 4023d54:	10001015 	stw	zero,64(r2)

   return 0;   /* return OK code */
 4023d58:	0005883a 	mov	r2,zero
}
 4023d5c:	e037883a 	mov	sp,fp
 4023d60:	df000017 	ldw	fp,0(sp)
 4023d64:	dec00104 	addi	sp,sp,4
 4023d68:	f800283a 	ret

04023d6c <dhc_decline>:
 * RETURNS: Returns 0 if ok, else non-zero ENP_ error. 
 */

int
dhc_decline(int iface,struct bootp * bp, unsigned bplen)
{
 4023d6c:	defff704 	addi	sp,sp,-36
 4023d70:	dfc00815 	stw	ra,32(sp)
 4023d74:	df000715 	stw	fp,28(sp)
 4023d78:	df000704 	addi	fp,sp,28
 4023d7c:	e13ffc15 	stw	r4,-16(fp)
 4023d80:	e17ffd15 	stw	r5,-12(fp)
 4023d84:	e1bffe15 	stw	r6,-8(fp)
   struct bootp * outbp;
   PACKET pkt;
   u_char * opts;    /* scratch pointer to DHCP options field */

   /* get a UDP packet buffer for sending DHCP */
   pkt = udp_alloc(bplen, 0);
 4023d88:	e13ffe17 	ldw	r4,-8(fp)
 4023d8c:	000b883a 	mov	r5,zero
 4023d90:	403f4a80 	call	403f4a8 <udp_alloc>
 4023d94:	e0bffa15 	stw	r2,-24(fp)
   if (!pkt) 
 4023d98:	e0bffa17 	ldw	r2,-24(fp)
 4023d9c:	1004c03a 	cmpne	r2,r2,zero
 4023da0:	1000031e 	bne	r2,zero,4023db0 <dhc_decline+0x44>
      return ENP_NOMEM;
 4023da4:	00bffb04 	movi	r2,-20
 4023da8:	e0bfff15 	stw	r2,-4(fp)
 4023dac:	00002f06 	br	4023e6c <dhc_decline+0x100>
   pkt->nb_plen = bplen;
 4023db0:	e0fffa17 	ldw	r3,-24(fp)
 4023db4:	e0bffe17 	ldw	r2,-8(fp)
 4023db8:	18800415 	stw	r2,16(r3)

   outbp = (struct bootp *)pkt->nb_prot;
 4023dbc:	e0bffa17 	ldw	r2,-24(fp)
 4023dc0:	10800317 	ldw	r2,12(r2)
 4023dc4:	e0bffb15 	stw	r2,-20(fp)
   MEMCPY(outbp, bp, bplen);
 4023dc8:	e0bffb17 	ldw	r2,-20(fp)
 4023dcc:	e0fffd17 	ldw	r3,-12(fp)
 4023dd0:	1009883a 	mov	r4,r2
 4023dd4:	180b883a 	mov	r5,r3
 4023dd8:	e1bffe17 	ldw	r6,-8(fp)
 4023ddc:	4001de40 	call	4001de4 <memcpy>
   outbp->op = BOOTREQUEST;
 4023de0:	e0fffb17 	ldw	r3,-20(fp)
 4023de4:	00800044 	movi	r2,1
 4023de8:	18800005 	stb	r2,0(r3)

   /* find DHCP TYPE option so we can overwrite it */   
   opts = find_opt(DHOP_TYPE, &outbp->options[4]);
 4023dec:	e0bffb17 	ldw	r2,-20(fp)
 4023df0:	10803b04 	addi	r2,r2,236
 4023df4:	11400104 	addi	r5,r2,4
 4023df8:	01000d44 	movi	r4,53
 4023dfc:	4024c140 	call	4024c14 <find_opt>
 4023e00:	e0bff915 	stw	r2,-28(fp)
   opts += 2;     /* point to actual op code */
 4023e04:	e0bff917 	ldw	r2,-28(fp)
 4023e08:	10800084 	addi	r2,r2,2
 4023e0c:	e0bff915 	stw	r2,-28(fp)
   *opts = DHCP_DECLINE;   /* overwrite op code */
 4023e10:	e0fff917 	ldw	r3,-28(fp)
 4023e14:	00800104 	movi	r2,4
 4023e18:	18800005 	stb	r2,0(r3)

   pkt->fhost = 0xFFFFFFFF;   /* broadcast decline pkt */
 4023e1c:	e0fffa17 	ldw	r3,-24(fp)
 4023e20:	00bfffc4 	movi	r2,-1
 4023e24:	18800715 	stw	r2,28(r3)
   pkt->net = nets[iface];    /* send out caller speced net */
 4023e28:	e0bffc17 	ldw	r2,-16(fp)
 4023e2c:	00c101b4 	movhi	r3,1030
 4023e30:	18e20804 	addi	r3,r3,-30688
 4023e34:	1085883a 	add	r2,r2,r2
 4023e38:	1085883a 	add	r2,r2,r2
 4023e3c:	10c5883a 	add	r2,r2,r3
 4023e40:	10c00017 	ldw	r3,0(r2)
 4023e44:	e0bffa17 	ldw	r2,-24(fp)
 4023e48:	10c00615 	stw	r3,24(r2)
   udp_send(BOOTP_SERVER_PORT, BOOTP_CLIENT_PORT, pkt);
 4023e4c:	010010c4 	movi	r4,67
 4023e50:	01401104 	movi	r5,68
 4023e54:	e1bffa17 	ldw	r6,-24(fp)
 4023e58:	403eff00 	call	403eff0 <udp_send>
   dsc_declines++;   /* count declines sent */
 4023e5c:	d0a81417 	ldw	r2,-24496(gp)
 4023e60:	10800044 	addi	r2,r2,1
 4023e64:	d0a81415 	stw	r2,-24496(gp)
   return 0;
 4023e68:	e03fff15 	stw	zero,-4(fp)
 4023e6c:	e0bfff17 	ldw	r2,-4(fp)
}
 4023e70:	e037883a 	mov	sp,fp
 4023e74:	dfc00117 	ldw	ra,4(sp)
 4023e78:	df000017 	ldw	fp,0(sp)
 4023e7c:	dec00204 	addi	sp,sp,8
 4023e80:	f800283a 	ret

04023e84 <dh_getlong>:
 *
 * RETURNS: the extracted 32 bit value
 */

static   long dh_getlong( u_char *ptr )
{
 4023e84:	defffc04 	addi	sp,sp,-16
 4023e88:	df000315 	stw	fp,12(sp)
 4023e8c:	df000304 	addi	fp,sp,12
 4023e90:	e13fff15 	stw	r4,-4(fp)
     long  v;
     u_char * p2 =  (u_char *)&v;
 4023e94:	e0bffe04 	addi	r2,fp,-8
 4023e98:	e0bffd15 	stw	r2,-12(fp)

   *p2++ = *ptr++;
 4023e9c:	e0bfff17 	ldw	r2,-4(fp)
 4023ea0:	10c00003 	ldbu	r3,0(r2)
 4023ea4:	e0bffd17 	ldw	r2,-12(fp)
 4023ea8:	10c00005 	stb	r3,0(r2)
 4023eac:	e0bffd17 	ldw	r2,-12(fp)
 4023eb0:	10800044 	addi	r2,r2,1
 4023eb4:	e0bffd15 	stw	r2,-12(fp)
 4023eb8:	e0bfff17 	ldw	r2,-4(fp)
 4023ebc:	10800044 	addi	r2,r2,1
 4023ec0:	e0bfff15 	stw	r2,-4(fp)
   *p2++ = *ptr++;
 4023ec4:	e0bfff17 	ldw	r2,-4(fp)
 4023ec8:	10c00003 	ldbu	r3,0(r2)
 4023ecc:	e0bffd17 	ldw	r2,-12(fp)
 4023ed0:	10c00005 	stb	r3,0(r2)
 4023ed4:	e0bffd17 	ldw	r2,-12(fp)
 4023ed8:	10800044 	addi	r2,r2,1
 4023edc:	e0bffd15 	stw	r2,-12(fp)
 4023ee0:	e0bfff17 	ldw	r2,-4(fp)
 4023ee4:	10800044 	addi	r2,r2,1
 4023ee8:	e0bfff15 	stw	r2,-4(fp)
   *p2++ = *ptr++;
 4023eec:	e0bfff17 	ldw	r2,-4(fp)
 4023ef0:	10c00003 	ldbu	r3,0(r2)
 4023ef4:	e0bffd17 	ldw	r2,-12(fp)
 4023ef8:	10c00005 	stb	r3,0(r2)
 4023efc:	e0bffd17 	ldw	r2,-12(fp)
 4023f00:	10800044 	addi	r2,r2,1
 4023f04:	e0bffd15 	stw	r2,-12(fp)
 4023f08:	e0bfff17 	ldw	r2,-4(fp)
 4023f0c:	10800044 	addi	r2,r2,1
 4023f10:	e0bfff15 	stw	r2,-4(fp)
   *p2++ = *ptr++;
 4023f14:	e0bfff17 	ldw	r2,-4(fp)
 4023f18:	10c00003 	ldbu	r3,0(r2)
 4023f1c:	e0bffd17 	ldw	r2,-12(fp)
 4023f20:	10c00005 	stb	r3,0(r2)
 4023f24:	e0bffd17 	ldw	r2,-12(fp)
 4023f28:	10800044 	addi	r2,r2,1
 4023f2c:	e0bffd15 	stw	r2,-12(fp)
 4023f30:	e0bfff17 	ldw	r2,-4(fp)
 4023f34:	10800044 	addi	r2,r2,1
 4023f38:	e0bfff15 	stw	r2,-4(fp)

   return v;
 4023f3c:	e0bffe17 	ldw	r2,-8(fp)
}
 4023f40:	e037883a 	mov	sp,fp
 4023f44:	df000017 	ldw	fp,0(sp)
 4023f48:	dec00104 	addi	sp,sp,4
 4023f4c:	f800283a 	ret

04023f50 <dhc_extract_opts>:
 * of the options passed were filled in with good values. 
 */

int
dhc_extract_opts(int iface, u_char *opts)
{
 4023f50:	defff604 	addi	sp,sp,-40
 4023f54:	dfc00915 	stw	ra,36(sp)
 4023f58:	df000815 	stw	fp,32(sp)
 4023f5c:	dc400715 	stw	r17,28(sp)
 4023f60:	dc000615 	stw	r16,24(sp)
 4023f64:	df000604 	addi	fp,sp,24
 4023f68:	e13ffc15 	stw	r4,-16(fp)
 4023f6c:	e17ffd15 	stw	r5,-12(fp)
   u_char *end = opts + DHCP_OPTSIZE;  /* limit scope of search */
 4023f70:	e0bffd17 	ldw	r2,-12(fp)
 4023f74:	10804e04 	addi	r2,r2,312
 4023f78:	e0bffb15 	stw	r2,-20(fp)
   u_char optlen;

   /* first, clear the options */
   dhc_states[iface].snmask = 0; 
 4023f7c:	e0bffc17 	ldw	r2,-16(fp)
 4023f80:	00c101b4 	movhi	r3,1030
 4023f84:	18e22e04 	addi	r3,r3,-30536
 4023f88:	10800f24 	muli	r2,r2,60
 4023f8c:	10c5883a 	add	r2,r2,r3
 4023f90:	10800a04 	addi	r2,r2,40
 4023f94:	10000015 	stw	zero,0(r2)
   dhc_states[iface].defgw = 0; 
 4023f98:	e0bffc17 	ldw	r2,-16(fp)
 4023f9c:	00c101b4 	movhi	r3,1030
 4023fa0:	18e22e04 	addi	r3,r3,-30536
 4023fa4:	10800f24 	muli	r2,r2,60
 4023fa8:	10c5883a 	add	r2,r2,r3
 4023fac:	10800b04 	addi	r2,r2,44
 4023fb0:	10000015 	stw	zero,0(r2)
   dhc_states[iface].lease = 0; 
 4023fb4:	e0bffc17 	ldw	r2,-16(fp)
 4023fb8:	00c101b4 	movhi	r3,1030
 4023fbc:	18e22e04 	addi	r3,r3,-30536
 4023fc0:	10800f24 	muli	r2,r2,60
 4023fc4:	10c5883a 	add	r2,r2,r3
 4023fc8:	10800504 	addi	r2,r2,20
 4023fcc:	10000015 	stw	zero,0(r2)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 4023fd0:	00008006 	br	40241d4 <dhc_extract_opts+0x284>
   {
      switch (*opts++)
 4023fd4:	e0bffd17 	ldw	r2,-12(fp)
 4023fd8:	10800003 	ldbu	r2,0(r2)
 4023fdc:	10803fcc 	andi	r2,r2,255
 4023fe0:	e0bfff15 	stw	r2,-4(fp)
 4023fe4:	e0bffd17 	ldw	r2,-12(fp)
 4023fe8:	10800044 	addi	r2,r2,1
 4023fec:	e0bffd15 	stw	r2,-12(fp)
 4023ff0:	e0ffff17 	ldw	r3,-4(fp)
 4023ff4:	188000e0 	cmpeqi	r2,r3,3
 4023ff8:	1000271e 	bne	r2,zero,4024098 <dhc_extract_opts+0x148>
 4023ffc:	e0ffff17 	ldw	r3,-4(fp)
 4024000:	18800108 	cmpgei	r2,r3,4
 4024004:	1000071e 	bne	r2,zero,4024024 <dhc_extract_opts+0xd4>
 4024008:	e0ffff17 	ldw	r3,-4(fp)
 402400c:	1805003a 	cmpeq	r2,r3,zero
 4024010:	1000701e 	bne	r2,zero,40241d4 <dhc_extract_opts+0x284>
 4024014:	e0ffff17 	ldw	r3,-4(fp)
 4024018:	18800060 	cmpeqi	r2,r3,1
 402401c:	10000d1e 	bne	r2,zero,4024054 <dhc_extract_opts+0x104>
 4024020:	00006406 	br	40241b4 <dhc_extract_opts+0x264>
 4024024:	e0ffff17 	ldw	r3,-4(fp)
 4024028:	18800ce0 	cmpeqi	r2,r3,51
 402402c:	1000331e 	bne	r2,zero,40240fc <dhc_extract_opts+0x1ac>
 4024030:	e0ffff17 	ldw	r3,-4(fp)
 4024034:	18803fe0 	cmpeqi	r2,r3,255
 4024038:	1000041e 	bne	r2,zero,402404c <dhc_extract_opts+0xfc>
 402403c:	e0ffff17 	ldw	r3,-4(fp)
 4024040:	188001a0 	cmpeqi	r2,r3,6
 4024044:	10004f1e 	bne	r2,zero,4024184 <dhc_extract_opts+0x234>
 4024048:	00005a06 	br	40241b4 <dhc_extract_opts+0x264>
      {
      case DHOP_PAD:
         break;
      case DHOP_END:
         return 0;   /* only good exit point */
 402404c:	e03ffe15 	stw	zero,-8(fp)
 4024050:	00006606 	br	40241ec <dhc_extract_opts+0x29c>
      case DHOP_SNMASK:
         opts++;
 4024054:	e0bffd17 	ldw	r2,-12(fp)
 4024058:	10800044 	addi	r2,r2,1
 402405c:	e0bffd15 	stw	r2,-12(fp)
         dhc_states[iface].snmask = dh_getlong(opts);
 4024060:	e43ffc17 	ldw	r16,-16(fp)
 4024064:	e13ffd17 	ldw	r4,-12(fp)
 4024068:	4023e840 	call	4023e84 <dh_getlong>
 402406c:	1009883a 	mov	r4,r2
 4024070:	00c101b4 	movhi	r3,1030
 4024074:	18e22e04 	addi	r3,r3,-30536
 4024078:	80800f24 	muli	r2,r16,60
 402407c:	10c5883a 	add	r2,r2,r3
 4024080:	10800a04 	addi	r2,r2,40
 4024084:	11000015 	stw	r4,0(r2)
         opts += 4;
 4024088:	e0bffd17 	ldw	r2,-12(fp)
 402408c:	10800104 	addi	r2,r2,4
 4024090:	e0bffd15 	stw	r2,-12(fp)
         break;
 4024094:	00004f06 	br	40241d4 <dhc_extract_opts+0x284>
      case DHOP_ROUTER:
         optlen = *opts++;
 4024098:	e0bffd17 	ldw	r2,-12(fp)
 402409c:	10800003 	ldbu	r2,0(r2)
 40240a0:	e0bffa05 	stb	r2,-24(fp)
 40240a4:	e0bffd17 	ldw	r2,-12(fp)
 40240a8:	10800044 	addi	r2,r2,1
 40240ac:	e0bffd15 	stw	r2,-12(fp)
         if (optlen >= 4)
 40240b0:	e0bffa03 	ldbu	r2,-24(fp)
 40240b4:	10800130 	cmpltui	r2,r2,4
 40240b8:	10000a1e 	bne	r2,zero,40240e4 <dhc_extract_opts+0x194>
            dhc_states[iface].defgw = dh_getlong(opts);
 40240bc:	e43ffc17 	ldw	r16,-16(fp)
 40240c0:	e13ffd17 	ldw	r4,-12(fp)
 40240c4:	4023e840 	call	4023e84 <dh_getlong>
 40240c8:	1009883a 	mov	r4,r2
 40240cc:	00c101b4 	movhi	r3,1030
 40240d0:	18e22e04 	addi	r3,r3,-30536
 40240d4:	80800f24 	muli	r2,r16,60
 40240d8:	10c5883a 	add	r2,r2,r3
 40240dc:	10800b04 	addi	r2,r2,44
 40240e0:	11000015 	stw	r4,0(r2)
         opts += optlen;
 40240e4:	e0bffa03 	ldbu	r2,-24(fp)
 40240e8:	1007883a 	mov	r3,r2
 40240ec:	e0bffd17 	ldw	r2,-12(fp)
 40240f0:	10c5883a 	add	r2,r2,r3
 40240f4:	e0bffd15 	stw	r2,-12(fp)
         break;
 40240f8:	00003606 	br	40241d4 <dhc_extract_opts+0x284>
      case DHOP_LEASE:
         opts++;
 40240fc:	e0bffd17 	ldw	r2,-12(fp)
 4024100:	10800044 	addi	r2,r2,1
 4024104:	e0bffd15 	stw	r2,-12(fp)
         dhc_states[iface].lease = htonl(dh_getlong(opts));
 4024108:	e47ffc17 	ldw	r17,-16(fp)
 402410c:	e13ffd17 	ldw	r4,-12(fp)
 4024110:	4023e840 	call	4023e84 <dh_getlong>
 4024114:	1005d63a 	srai	r2,r2,24
 4024118:	14003fcc 	andi	r16,r2,255
 402411c:	e13ffd17 	ldw	r4,-12(fp)
 4024120:	4023e840 	call	4023e84 <dh_getlong>
 4024124:	1005d23a 	srai	r2,r2,8
 4024128:	10bfc00c 	andi	r2,r2,65280
 402412c:	80a0b03a 	or	r16,r16,r2
 4024130:	e13ffd17 	ldw	r4,-12(fp)
 4024134:	4023e840 	call	4023e84 <dh_getlong>
 4024138:	10bfc00c 	andi	r2,r2,65280
 402413c:	1004923a 	slli	r2,r2,8
 4024140:	80a0b03a 	or	r16,r16,r2
 4024144:	e13ffd17 	ldw	r4,-12(fp)
 4024148:	4023e840 	call	4023e84 <dh_getlong>
 402414c:	10803fcc 	andi	r2,r2,255
 4024150:	1004963a 	slli	r2,r2,24
 4024154:	8084b03a 	or	r2,r16,r2
 4024158:	1009883a 	mov	r4,r2
 402415c:	00c101b4 	movhi	r3,1030
 4024160:	18e22e04 	addi	r3,r3,-30536
 4024164:	88800f24 	muli	r2,r17,60
 4024168:	10c5883a 	add	r2,r2,r3
 402416c:	10800504 	addi	r2,r2,20
 4024170:	11000015 	stw	r4,0(r2)
         opts += 4;
 4024174:	e0bffd17 	ldw	r2,-12(fp)
 4024178:	10800104 	addi	r2,r2,4
 402417c:	e0bffd15 	stw	r2,-12(fp)
         break;
 4024180:	00001406 	br	40241d4 <dhc_extract_opts+0x284>
      case DHOP_DNSRV:
         optlen = *opts++;
 4024184:	e0bffd17 	ldw	r2,-12(fp)
 4024188:	10800003 	ldbu	r2,0(r2)
 402418c:	e0bffa05 	stb	r2,-24(fp)
 4024190:	e0bffd17 	ldw	r2,-12(fp)
 4024194:	10800044 	addi	r2,r2,1
 4024198:	e0bffd15 	stw	r2,-12(fp)
               opts += 4;
               i++;
            }
         }
#endif   /* DHC_MAXDNSRVS */
         opts += optlen;
 402419c:	e0bffa03 	ldbu	r2,-24(fp)
 40241a0:	1007883a 	mov	r3,r2
 40241a4:	e0bffd17 	ldw	r2,-12(fp)
 40241a8:	10c5883a 	add	r2,r2,r3
 40241ac:	e0bffd15 	stw	r2,-12(fp)
         break;
 40241b0:	00000806 	br	40241d4 <dhc_extract_opts+0x284>
      default:
         opts += ((*opts) + 1);
 40241b4:	e0bffd17 	ldw	r2,-12(fp)
 40241b8:	10800003 	ldbu	r2,0(r2)
 40241bc:	10803fcc 	andi	r2,r2,255
 40241c0:	1007883a 	mov	r3,r2
 40241c4:	e0bffd17 	ldw	r2,-12(fp)
 40241c8:	1885883a 	add	r2,r3,r2
 40241cc:	10800044 	addi	r2,r2,1
 40241d0:	e0bffd15 	stw	r2,-12(fp)
#if defined(DHC_MAXDNSRVS) && (DHC_MAXDNSRVS > 0)
   MEMSET(dhc_states[iface].dnsrv, 0, sizeof(dhc_states[iface].dnsrv));
#endif   /* DHC_MAXDNSRVS */

   /* then fill them in from the DHCP data */
   while (opts <= end)
 40241d4:	e0fffd17 	ldw	r3,-12(fp)
 40241d8:	e0bffb17 	ldw	r2,-20(fp)
 40241dc:	10ff7d2e 	bgeu	r2,r3,4023fd4 <dhc_extract_opts+0x84>
      default:
         opts += ((*opts) + 1);
         break;
      }
   }
   dtrap();
 40241e0:	4025bb40 	call	4025bb4 <dtrap>
   return -1;
 40241e4:	00bfffc4 	movi	r2,-1
 40241e8:	e0bffe15 	stw	r2,-8(fp)
 40241ec:	e0bffe17 	ldw	r2,-8(fp)
}
 40241f0:	e037883a 	mov	sp,fp
 40241f4:	dfc00317 	ldw	ra,12(sp)
 40241f8:	df000217 	ldw	fp,8(sp)
 40241fc:	dc400117 	ldw	r17,4(sp)
 4024200:	dc000017 	ldw	r16,0(sp)
 4024204:	dec00404 	addi	sp,sp,16
 4024208:	f800283a 	ret

0402420c <dhc_second>:
 * RETURNS: Returns 0 or ENP_ error code 
 */

int
dhc_second(void)
{
 402420c:	defff704 	addi	sp,sp,-36
 4024210:	dfc00815 	stw	ra,32(sp)
 4024214:	df000715 	stw	fp,28(sp)
 4024218:	df000704 	addi	fp,sp,28
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 402421c:	e03ffc15 	stw	zero,-16(fp)
 4024220:	00015706 	br	4024780 <dhc_second+0x574>
   {
      switch (dhc_states[iface].state)
 4024224:	e0bffc17 	ldw	r2,-16(fp)
 4024228:	00c101b4 	movhi	r3,1030
 402422c:	18e22e04 	addi	r3,r3,-30536
 4024230:	10800f24 	muli	r2,r2,60
 4024234:	10c5883a 	add	r2,r2,r3
 4024238:	10800017 	ldw	r2,0(r2)
 402423c:	e0bfff15 	stw	r2,-4(fp)
 4024240:	e0ffff17 	ldw	r3,-4(fp)
 4024244:	18800268 	cmpgeui	r2,r3,9
 4024248:	10014a1e 	bne	r2,zero,4024774 <dhc_second+0x568>
 402424c:	e13fff17 	ldw	r4,-4(fp)
 4024250:	e13fff17 	ldw	r4,-4(fp)
 4024254:	2105883a 	add	r2,r4,r4
 4024258:	1087883a 	add	r3,r2,r2
 402425c:	008100b4 	movhi	r2,1026
 4024260:	10909c04 	addi	r2,r2,17008
 4024264:	1885883a 	add	r2,r3,r2
 4024268:	10800017 	ldw	r2,0(r2)
 402426c:	1000683a 	jmp	r2
 4024270:	04024774 	movhi	r16,2333
 4024274:	04024294 	movui	r16,2314
 4024278:	040242cc 	andi	r16,zero,2315
 402427c:	04024304 	movi	r16,2316
 4024280:	04024304 	movi	r16,2316
 4024284:	04024304 	movi	r16,2316
 4024288:	04024568 	cmpgeui	r16,zero,2325
 402428c:	04024620 	cmpeqi	r16,zero,2328
 4024290:	04024434 	movhi	r16,2320
      {
      case DHCS_INIT:         /* Send a discover packet */
         e = dhc_discover(iface);
 4024294:	e13ffc17 	ldw	r4,-16(fp)
 4024298:	40228b00 	call	40228b0 <dhc_discover>
 402429c:	e0bffa15 	stw	r2,-24(fp)
         /* Error while sending a discover packet */
         if (e)
 40242a0:	e0bffa17 	ldw	r2,-24(fp)
 40242a4:	1005003a 	cmpeq	r2,r2,zero
 40242a8:	1000041e 	bne	r2,zero,40242bc <dhc_second+0xb0>
         {
            dtrap();
 40242ac:	4025bb40 	call	4025bb4 <dtrap>
            return e;
 40242b0:	e0bffa17 	ldw	r2,-24(fp)
 40242b4:	e0bffe15 	stw	r2,-8(fp)
 40242b8:	00013506 	br	4024790 <dhc_second+0x584>
         }
         dhc_set_state(iface,DHCS_SELECTING);
 40242bc:	e13ffc17 	ldw	r4,-16(fp)
 40242c0:	01400104 	movi	r5,4
 40242c4:	4024b640 	call	4024b64 <dhc_set_state>
         break;
 40242c8:	00012a06 	br	4024774 <dhc_second+0x568>
      case DHCS_INITREBOOT:   /* Send a request packet */
         e = dhc_reclaim(iface);
 40242cc:	e13ffc17 	ldw	r4,-16(fp)
 40242d0:	40248300 	call	4024830 <dhc_reclaim>
 40242d4:	e0bffa15 	stw	r2,-24(fp)
         if (e)
 40242d8:	e0bffa17 	ldw	r2,-24(fp)
 40242dc:	1005003a 	cmpeq	r2,r2,zero
 40242e0:	1000041e 	bne	r2,zero,40242f4 <dhc_second+0xe8>
         {
            dtrap();
 40242e4:	4025bb40 	call	4025bb4 <dtrap>
            return e;
 40242e8:	e0fffa17 	ldw	r3,-24(fp)
 40242ec:	e0fffe15 	stw	r3,-8(fp)
 40242f0:	00012706 	br	4024790 <dhc_second+0x584>
         }
         dhc_set_state(iface,DHCS_REBOOTING);
 40242f4:	e13ffc17 	ldw	r4,-16(fp)
 40242f8:	014000c4 	movi	r5,3
 40242fc:	4024b640 	call	4024b64 <dhc_set_state>
         break;
 4024300:	00011c06 	br	4024774 <dhc_second+0x568>
         /* Send discover packet on timeout */
      case DHCS_REBOOTING:
      case DHCS_REQUESTING:
         /* Discovery timeout = DHC_RETRY_TMO secs * (2 ** retries), max 64 */

         tries = dhc_states[iface].tries ;
 4024304:	e0bffc17 	ldw	r2,-16(fp)
 4024308:	00c101b4 	movhi	r3,1030
 402430c:	18e22e04 	addi	r3,r3,-30536
 4024310:	10800f24 	muli	r2,r2,60
 4024314:	10c5883a 	add	r2,r2,r3
 4024318:	10800104 	addi	r2,r2,4
 402431c:	10800017 	ldw	r2,0(r2)
 4024320:	e0bffb15 	stw	r2,-20(fp)

         /* Set the exponential count */
         if ( tries >= DHC_MAX_TRIES) 
 4024324:	e0bffb17 	ldw	r2,-20(fp)
 4024328:	10800110 	cmplti	r2,r2,4
 402432c:	1000021e 	bne	r2,zero,4024338 <dhc_second+0x12c>
            tries= DHC_MAX_TRIES;
 4024330:	00800104 	movi	r2,4
 4024334:	e0bffb15 	stw	r2,-20(fp)
         if ( cticks > (dhc_states[iface].last_tick + 
 4024338:	e0bffc17 	ldw	r2,-16(fp)
 402433c:	00c101b4 	movhi	r3,1030
 4024340:	18e22e04 	addi	r3,r3,-30536
 4024344:	10800f24 	muli	r2,r2,60
 4024348:	10c5883a 	add	r2,r2,r3
 402434c:	10800404 	addi	r2,r2,16
 4024350:	11000017 	ldw	r4,0(r2)
 4024354:	00c06404 	movi	r3,400
 4024358:	e0bffb17 	ldw	r2,-20(fp)
 402435c:	1884983a 	sll	r2,r3,r2
 4024360:	2087883a 	add	r3,r4,r2
 4024364:	00810174 	movhi	r2,1029
 4024368:	1081e404 	addi	r2,r2,1936
 402436c:	10800017 	ldw	r2,0(r2)
 4024370:	18801c2e 	bgeu	r3,r2,40243e4 <dhc_second+0x1d8>
             (((u_long) (DHC_RETRY_TMO*TPS)) << tries ) ) )
         {
            /* Timeout while waiting for a OFFER/ACK/NAK. Retransmit */
            switch(dhc_states[iface].state)
 4024374:	e0bffc17 	ldw	r2,-16(fp)
 4024378:	00c101b4 	movhi	r3,1030
 402437c:	18e22e04 	addi	r3,r3,-30536
 4024380:	10800f24 	muli	r2,r2,60
 4024384:	10c5883a 	add	r2,r2,r3
 4024388:	10800017 	ldw	r2,0(r2)
 402438c:	e0bffd15 	stw	r2,-12(fp)
 4024390:	e13ffd17 	ldw	r4,-12(fp)
 4024394:	20800120 	cmpeqi	r2,r4,4
 4024398:	1000071e 	bne	r2,zero,40243b8 <dhc_second+0x1ac>
 402439c:	e0fffd17 	ldw	r3,-12(fp)
 40243a0:	18800160 	cmpeqi	r2,r3,5
 40243a4:	1000071e 	bne	r2,zero,40243c4 <dhc_second+0x1b8>
 40243a8:	e13ffd17 	ldw	r4,-12(fp)
 40243ac:	208000e0 	cmpeqi	r2,r4,3
 40243b0:	1000081e 	bne	r2,zero,40243d4 <dhc_second+0x1c8>
 40243b4:	00000a06 	br	40243e0 <dhc_second+0x1d4>
            {
            case DHCS_SELECTING:
               dhc_discover(iface);
 40243b8:	e13ffc17 	ldw	r4,-16(fp)
 40243bc:	40228b00 	call	40228b0 <dhc_discover>
               break;
 40243c0:	00000806 	br	40243e4 <dhc_second+0x1d8>
            case DHCS_REQUESTING:
               dhc_request(iface,FALSE);
 40243c4:	e13ffc17 	ldw	r4,-16(fp)
 40243c8:	000b883a 	mov	r5,zero
 40243cc:	4022ecc0 	call	4022ecc <dhc_request>
               break;
 40243d0:	00000406 	br	40243e4 <dhc_second+0x1d8>
            case DHCS_REBOOTING:
               dhc_reclaim(iface);
 40243d4:	e13ffc17 	ldw	r4,-16(fp)
 40243d8:	40248300 	call	4024830 <dhc_reclaim>
               break;
 40243dc:	00000106 	br	40243e4 <dhc_second+0x1d8>
            default:
               dtrap(); /* bogus state */
 40243e0:	4025bb40 	call	4025bb4 <dtrap>
               break;
            }
         }
         if ( tries == DHC_MAX_TRIES && 
 40243e4:	e0bffb17 	ldw	r2,-20(fp)
 40243e8:	10800118 	cmpnei	r2,r2,4
 40243ec:	1000e11e 	bne	r2,zero,4024774 <dhc_second+0x568>
 40243f0:	e0bffc17 	ldw	r2,-16(fp)
 40243f4:	00c101b4 	movhi	r3,1030
 40243f8:	18e22e04 	addi	r3,r3,-30536
 40243fc:	10800f24 	muli	r2,r2,60
 4024400:	10c5883a 	add	r2,r2,r3
 4024404:	10800017 	ldw	r2,0(r2)
 4024408:	10800120 	cmpeqi	r2,r2,4
 402440c:	1000d91e 	bne	r2,zero,4024774 <dhc_second+0x568>
             (dhc_states[iface].state !=DHCS_SELECTING) )
         {
            /* We have tried enough. Restart from INIT state */
            dhc_set_state(iface,DHCS_RESTARTING);
 4024410:	e13ffc17 	ldw	r4,-16(fp)
 4024414:	01400244 	movi	r5,9
 4024418:	4024b640 	call	4024b64 <dhc_set_state>
            dhc_resetip(iface);
 402441c:	e13ffc17 	ldw	r4,-16(fp)
 4024420:	4023c880 	call	4023c88 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 4024424:	e13ffc17 	ldw	r4,-16(fp)
 4024428:	01400044 	movi	r5,1
 402442c:	4024b640 	call	4024b64 <dhc_set_state>
         }
         break;
 4024430:	0000d006 	br	4024774 <dhc_second+0x568>
      case DHCS_REBINDING:
         /* Check for timeout. Retry if we didn't get a ACK/NAK response. */

         if ( (dhc_states[iface].lease*TPS+dhc_states[iface].lease_start) > cticks )
 4024434:	e0bffc17 	ldw	r2,-16(fp)
 4024438:	00c101b4 	movhi	r3,1030
 402443c:	18e22e04 	addi	r3,r3,-30536
 4024440:	10800f24 	muli	r2,r2,60
 4024444:	10c5883a 	add	r2,r2,r3
 4024448:	10800504 	addi	r2,r2,20
 402444c:	10800017 	ldw	r2,0(r2)
 4024450:	11001924 	muli	r4,r2,100
 4024454:	e0bffc17 	ldw	r2,-16(fp)
 4024458:	00c101b4 	movhi	r3,1030
 402445c:	18e22e04 	addi	r3,r3,-30536
 4024460:	10800f24 	muli	r2,r2,60
 4024464:	10c5883a 	add	r2,r2,r3
 4024468:	10800804 	addi	r2,r2,32
 402446c:	10800017 	ldw	r2,0(r2)
 4024470:	2087883a 	add	r3,r4,r2
 4024474:	00810174 	movhi	r2,1029
 4024478:	1081e404 	addi	r2,r2,1936
 402447c:	10800017 	ldw	r2,0(r2)
 4024480:	10c0302e 	bgeu	r2,r3,4024544 <dhc_second+0x338>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and lease, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start + 
 4024484:	e0bffc17 	ldw	r2,-16(fp)
 4024488:	00c101b4 	movhi	r3,1030
 402448c:	18e22e04 	addi	r3,r3,-30536
 4024490:	10800f24 	muli	r2,r2,60
 4024494:	10c5883a 	add	r2,r2,r3
 4024498:	10800804 	addi	r2,r2,32
 402449c:	11000017 	ldw	r4,0(r2)
 40244a0:	e0bffc17 	ldw	r2,-16(fp)
 40244a4:	00c101b4 	movhi	r3,1030
 40244a8:	18e22e04 	addi	r3,r3,-30536
 40244ac:	10800f24 	muli	r2,r2,60
 40244b0:	10c5883a 	add	r2,r2,r3
 40244b4:	10800504 	addi	r2,r2,20
 40244b8:	10800017 	ldw	r2,0(r2)
 40244bc:	10801924 	muli	r2,r2,100
 40244c0:	2089883a 	add	r4,r4,r2
 40244c4:	e0bffc17 	ldw	r2,-16(fp)
 40244c8:	00c101b4 	movhi	r3,1030
 40244cc:	18e22e04 	addi	r3,r3,-30536
 40244d0:	10800f24 	muli	r2,r2,60
 40244d4:	10c5883a 	add	r2,r2,r3
 40244d8:	10800404 	addi	r2,r2,16
 40244dc:	10800017 	ldw	r2,0(r2)
 40244e0:	2085c83a 	sub	r2,r4,r2
 40244e4:	1004d07a 	srli	r2,r2,1
 40244e8:	e0bff915 	stw	r2,-28(fp)
             dhc_states[iface].lease*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
 40244ec:	e0bff917 	ldw	r2,-28(fp)
 40244f0:	1085dc28 	cmpgeui	r2,r2,6000
 40244f4:	1000021e 	bne	r2,zero,4024500 <dhc_second+0x2f4>
               half_time = 60*TPS;
 40244f8:	0085dc04 	movi	r2,6000
 40244fc:	e0bff915 	stw	r2,-28(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
 4024500:	e0bffc17 	ldw	r2,-16(fp)
 4024504:	00c101b4 	movhi	r3,1030
 4024508:	18e22e04 	addi	r3,r3,-30536
 402450c:	10800f24 	muli	r2,r2,60
 4024510:	10c5883a 	add	r2,r2,r3
 4024514:	10800404 	addi	r2,r2,16
 4024518:	10c00017 	ldw	r3,0(r2)
 402451c:	e0bff917 	ldw	r2,-28(fp)
 4024520:	1887883a 	add	r3,r3,r2
 4024524:	00810174 	movhi	r2,1029
 4024528:	1081e404 	addi	r2,r2,1936
 402452c:	10800017 	ldw	r2,0(r2)
 4024530:	1880902e 	bgeu	r3,r2,4024774 <dhc_second+0x568>
            {
               dhc_request(iface,FALSE);
 4024534:	e13ffc17 	ldw	r4,-16(fp)
 4024538:	000b883a 	mov	r5,zero
 402453c:	4022ecc0 	call	4022ecc <dhc_request>
 4024540:	00008c06 	br	4024774 <dhc_second+0x568>
            }
         }
         else
         {
            /* Lease has expired. We didn't receive a ACK/NAK. Hence restart*/
            dhc_set_state(iface,DHCS_RESTARTING);
 4024544:	e13ffc17 	ldw	r4,-16(fp)
 4024548:	01400244 	movi	r5,9
 402454c:	4024b640 	call	4024b64 <dhc_set_state>
            dhc_resetip(iface);
 4024550:	e13ffc17 	ldw	r4,-16(fp)
 4024554:	4023c880 	call	4023c88 <dhc_resetip>
            dhc_set_state(iface,DHCS_INIT);
 4024558:	e13ffc17 	ldw	r4,-16(fp)
 402455c:	01400044 	movi	r5,1
 4024560:	4024b640 	call	4024b64 <dhc_set_state>
         }
         break;
 4024564:	00008306 	br	4024774 <dhc_second+0x568>

      case DHCS_BOUND:
         /* Test for lease expiry. The RENEW timer. */
         if ( (dhc_states[iface].t1 != DHC_INFINITY) &&
 4024568:	e0bffc17 	ldw	r2,-16(fp)
 402456c:	00c101b4 	movhi	r3,1030
 4024570:	18e22e04 	addi	r3,r3,-30536
 4024574:	10800f24 	muli	r2,r2,60
 4024578:	10c5883a 	add	r2,r2,r3
 402457c:	10800604 	addi	r2,r2,24
 4024580:	10800017 	ldw	r2,0(r2)
 4024584:	10bfffe0 	cmpeqi	r2,r2,-1
 4024588:	10007a1e 	bne	r2,zero,4024774 <dhc_second+0x568>
 402458c:	e0bffc17 	ldw	r2,-16(fp)
 4024590:	00c101b4 	movhi	r3,1030
 4024594:	18e22e04 	addi	r3,r3,-30536
 4024598:	10800f24 	muli	r2,r2,60
 402459c:	10c5883a 	add	r2,r2,r3
 40245a0:	10800604 	addi	r2,r2,24
 40245a4:	10800017 	ldw	r2,0(r2)
 40245a8:	11001924 	muli	r4,r2,100
 40245ac:	e0bffc17 	ldw	r2,-16(fp)
 40245b0:	00c101b4 	movhi	r3,1030
 40245b4:	18e22e04 	addi	r3,r3,-30536
 40245b8:	10800f24 	muli	r2,r2,60
 40245bc:	10c5883a 	add	r2,r2,r3
 40245c0:	10800804 	addi	r2,r2,32
 40245c4:	10800017 	ldw	r2,0(r2)
 40245c8:	2087883a 	add	r3,r4,r2
 40245cc:	00810174 	movhi	r2,1029
 40245d0:	1081e404 	addi	r2,r2,1936
 40245d4:	10800017 	ldw	r2,0(r2)
 40245d8:	1880662e 	bgeu	r3,r2,4024774 <dhc_second+0x568>
             (((dhc_states[iface].t1*TPS)+dhc_states[iface].lease_start) < cticks ) )
         {
            /* Time to renew. Send a UNICAST to the DHCP server */
            dhc_set_state(iface,DHCS_RENEWING);
 40245dc:	e13ffc17 	ldw	r4,-16(fp)
 40245e0:	014001c4 	movi	r5,7
 40245e4:	4024b640 	call	4024b64 <dhc_set_state>
            e = dhc_reclaim(iface); /* unicast */ 
 40245e8:	e13ffc17 	ldw	r4,-16(fp)
 40245ec:	40248300 	call	4024830 <dhc_reclaim>
 40245f0:	e0bffa15 	stw	r2,-24(fp)
            if (e)
 40245f4:	e0bffa17 	ldw	r2,-24(fp)
 40245f8:	1005003a 	cmpeq	r2,r2,zero
 40245fc:	1000041e 	bne	r2,zero,4024610 <dhc_second+0x404>
            {
               dtrap();
 4024600:	4025bb40 	call	4025bb4 <dtrap>
               return e;
 4024604:	e0bffa17 	ldw	r2,-24(fp)
 4024608:	e0bffe15 	stw	r2,-8(fp)
 402460c:	00006006 	br	4024790 <dhc_second+0x584>
            }
            dsc_renew++;
 4024610:	d0a81717 	ldw	r2,-24484(gp)
 4024614:	10800044 	addi	r2,r2,1
 4024618:	d0a81715 	stw	r2,-24484(gp)
         }
         break;
 402461c:	00005506 	br	4024774 <dhc_second+0x568>
      case DHCS_RENEWING:
         /* Test for lease expiry. The REBIND timer. */
         if ( (dhc_states[iface].t2*TPS+dhc_states[iface].lease_start) > cticks )
 4024620:	e0bffc17 	ldw	r2,-16(fp)
 4024624:	00c101b4 	movhi	r3,1030
 4024628:	18e22e04 	addi	r3,r3,-30536
 402462c:	10800f24 	muli	r2,r2,60
 4024630:	10c5883a 	add	r2,r2,r3
 4024634:	10800704 	addi	r2,r2,28
 4024638:	10800017 	ldw	r2,0(r2)
 402463c:	11001924 	muli	r4,r2,100
 4024640:	e0bffc17 	ldw	r2,-16(fp)
 4024644:	00c101b4 	movhi	r3,1030
 4024648:	18e22e04 	addi	r3,r3,-30536
 402464c:	10800f24 	muli	r2,r2,60
 4024650:	10c5883a 	add	r2,r2,r3
 4024654:	10800804 	addi	r2,r2,32
 4024658:	10800017 	ldw	r2,0(r2)
 402465c:	2087883a 	add	r3,r4,r2
 4024660:	00810174 	movhi	r2,1029
 4024664:	1081e404 	addi	r2,r2,1936
 4024668:	10800017 	ldw	r2,0(r2)
 402466c:	10c0302e 	bgeu	r2,r3,4024730 <dhc_second+0x524>
            /* See if we need to retransmit. If we have waiting for 
             * half the time between last transmit and t2, then we 
             * need to retransmit. Also the minimum retransmit 
             * interval is 60 secs. 
             */
            half_time = (dhc_states[iface].lease_start +
 4024670:	e0bffc17 	ldw	r2,-16(fp)
 4024674:	00c101b4 	movhi	r3,1030
 4024678:	18e22e04 	addi	r3,r3,-30536
 402467c:	10800f24 	muli	r2,r2,60
 4024680:	10c5883a 	add	r2,r2,r3
 4024684:	10800804 	addi	r2,r2,32
 4024688:	11000017 	ldw	r4,0(r2)
 402468c:	e0bffc17 	ldw	r2,-16(fp)
 4024690:	00c101b4 	movhi	r3,1030
 4024694:	18e22e04 	addi	r3,r3,-30536
 4024698:	10800f24 	muli	r2,r2,60
 402469c:	10c5883a 	add	r2,r2,r3
 40246a0:	10800704 	addi	r2,r2,28
 40246a4:	10800017 	ldw	r2,0(r2)
 40246a8:	10801924 	muli	r2,r2,100
 40246ac:	2089883a 	add	r4,r4,r2
 40246b0:	e0bffc17 	ldw	r2,-16(fp)
 40246b4:	00c101b4 	movhi	r3,1030
 40246b8:	18e22e04 	addi	r3,r3,-30536
 40246bc:	10800f24 	muli	r2,r2,60
 40246c0:	10c5883a 	add	r2,r2,r3
 40246c4:	10800404 	addi	r2,r2,16
 40246c8:	10800017 	ldw	r2,0(r2)
 40246cc:	2085c83a 	sub	r2,r4,r2
 40246d0:	1004d07a 	srli	r2,r2,1
 40246d4:	e0bff915 	stw	r2,-28(fp)
             dhc_states[iface].t2*TPS - 
             dhc_states[iface].last_tick)/2;

            if ( half_time < 60*TPS )
 40246d8:	e0bff917 	ldw	r2,-28(fp)
 40246dc:	1085dc28 	cmpgeui	r2,r2,6000
 40246e0:	1000021e 	bne	r2,zero,40246ec <dhc_second+0x4e0>
               half_time = 60*TPS;
 40246e4:	0085dc04 	movi	r2,6000
 40246e8:	e0bff915 	stw	r2,-28(fp)
            if ( dhc_states[iface].last_tick + half_time < cticks )
 40246ec:	e0bffc17 	ldw	r2,-16(fp)
 40246f0:	00c101b4 	movhi	r3,1030
 40246f4:	18e22e04 	addi	r3,r3,-30536
 40246f8:	10800f24 	muli	r2,r2,60
 40246fc:	10c5883a 	add	r2,r2,r3
 4024700:	10800404 	addi	r2,r2,16
 4024704:	10c00017 	ldw	r3,0(r2)
 4024708:	e0bff917 	ldw	r2,-28(fp)
 402470c:	1887883a 	add	r3,r3,r2
 4024710:	00810174 	movhi	r2,1029
 4024714:	1081e404 	addi	r2,r2,1936
 4024718:	10800017 	ldw	r2,0(r2)
 402471c:	1880152e 	bgeu	r3,r2,4024774 <dhc_second+0x568>
            {
               dhc_request(iface,FALSE);
 4024720:	e13ffc17 	ldw	r4,-16(fp)
 4024724:	000b883a 	mov	r5,zero
 4024728:	4022ecc0 	call	4022ecc <dhc_request>
 402472c:	00001106 	br	4024774 <dhc_second+0x568>
         {
            /* No Response has come from the Server that assigned our 
             * IP. Hence send a broadcast packet to see if we can 
             * lease this IP from some other server 
             */
            dhc_set_state(iface,DHCS_REBINDING);
 4024730:	e13ffc17 	ldw	r4,-16(fp)
 4024734:	01400204 	movi	r5,8
 4024738:	4024b640 	call	4024b64 <dhc_set_state>
            e = dhc_request(iface,TRUE);  /* broadcast */
 402473c:	e13ffc17 	ldw	r4,-16(fp)
 4024740:	01400044 	movi	r5,1
 4024744:	4022ecc0 	call	4022ecc <dhc_request>
 4024748:	e0bffa15 	stw	r2,-24(fp)
            if (e)
 402474c:	e0bffa17 	ldw	r2,-24(fp)
 4024750:	1005003a 	cmpeq	r2,r2,zero
 4024754:	1000041e 	bne	r2,zero,4024768 <dhc_second+0x55c>
            {
               dtrap();
 4024758:	4025bb40 	call	4025bb4 <dtrap>
               return e;
 402475c:	e0fffa17 	ldw	r3,-24(fp)
 4024760:	e0fffe15 	stw	r3,-8(fp)
 4024764:	00000a06 	br	4024790 <dhc_second+0x584>
            }
            dsc_rebind++;
 4024768:	d0a81817 	ldw	r2,-24480(gp)
 402476c:	10800044 	addi	r2,r2,1
 4024770:	d0a81815 	stw	r2,-24480(gp)
   int   iface;
   int   tries;
   int   e;
   u_long   half_time;

   for (iface = 0; iface < MAXNETS; iface++)
 4024774:	e0bffc17 	ldw	r2,-16(fp)
 4024778:	10800044 	addi	r2,r2,1
 402477c:	e0bffc15 	stw	r2,-16(fp)
 4024780:	e0bffc17 	ldw	r2,-16(fp)
 4024784:	10800110 	cmplti	r2,r2,4
 4024788:	103ea61e 	bne	r2,zero,4024224 <dhc_second+0x18>
      case DHCS_UNUSED:
      default:
         continue;
      }
   }
   return 0;
 402478c:	e03ffe15 	stw	zero,-8(fp)
 4024790:	e0bffe17 	ldw	r2,-8(fp)
}
 4024794:	e037883a 	mov	sp,fp
 4024798:	dfc00117 	ldw	ra,4(sp)
 402479c:	df000017 	ldw	fp,0(sp)
 40247a0:	dec00204 	addi	sp,sp,8
 40247a4:	f800283a 	ret

040247a8 <dhc_halt>:
 * RETURNS: void
 */

void
dhc_halt(int iface)
{
 40247a8:	defffd04 	addi	sp,sp,-12
 40247ac:	dfc00215 	stw	ra,8(sp)
 40247b0:	df000115 	stw	fp,4(sp)
 40247b4:	df000104 	addi	fp,sp,4
 40247b8:	e13fff15 	stw	r4,-4(fp)
   if (iface < 0 || iface > MAXNETS)
 40247bc:	e0bfff17 	ldw	r2,-4(fp)
 40247c0:	1004803a 	cmplt	r2,r2,zero
 40247c4:	1000031e 	bne	r2,zero,40247d4 <dhc_halt+0x2c>
 40247c8:	e0bfff17 	ldw	r2,-4(fp)
 40247cc:	10800150 	cmplti	r2,r2,5
 40247d0:	1000021e 	bne	r2,zero,40247dc <dhc_halt+0x34>
   {
      dtrap();
 40247d4:	4025bb40 	call	4025bb4 <dtrap>
      return;
 40247d8:	00001006 	br	402481c <dhc_halt+0x74>
   }
   /* clear dhc_states entry - (kills retrys) */
   MEMSET(&dhc_states[iface], 0, sizeof(struct dhc_state));
 40247dc:	e0bfff17 	ldw	r2,-4(fp)
 40247e0:	10800f24 	muli	r2,r2,60
 40247e4:	1007883a 	mov	r3,r2
 40247e8:	008101b4 	movhi	r2,1030
 40247ec:	10a22e04 	addi	r2,r2,-30536
 40247f0:	1885883a 	add	r2,r3,r2
 40247f4:	1009883a 	mov	r4,r2
 40247f8:	01800f04 	movi	r6,60
 40247fc:	000b883a 	mov	r5,zero
 4024800:	4001f640 	call	4001f64 <memset>
   dhc_states[iface].state = DHCS_UNUSED;
 4024804:	e0bfff17 	ldw	r2,-4(fp)
 4024808:	00c101b4 	movhi	r3,1030
 402480c:	18e22e04 	addi	r3,r3,-30536
 4024810:	10800f24 	muli	r2,r2,60
 4024814:	10c5883a 	add	r2,r2,r3
 4024818:	10000015 	stw	zero,0(r2)
}
 402481c:	e037883a 	mov	sp,fp
 4024820:	dfc00117 	ldw	ra,4(sp)
 4024824:	df000017 	ldw	fp,0(sp)
 4024828:	dec00204 	addi	sp,sp,8
 402482c:	f800283a 	ret

04024830 <dhc_reclaim>:
 * RETURNS: Returns 0 if DHCP request was sent OK, else non-zero error. 
 */

int   
dhc_reclaim(int iface)
{
 4024830:	defffb04 	addi	sp,sp,-20
 4024834:	dfc00415 	stw	ra,16(sp)
 4024838:	df000315 	stw	fp,12(sp)
 402483c:	df000304 	addi	fp,sp,12
 4024840:	e13ffe15 	stw	r4,-8(fp)
   /* punt if IP address is not set */
   if (nets[iface]->n_ipaddr == 0L)
 4024844:	e0bffe17 	ldw	r2,-8(fp)
 4024848:	00c101b4 	movhi	r3,1030
 402484c:	18e20804 	addi	r3,r3,-30688
 4024850:	1085883a 	add	r2,r2,r2
 4024854:	1085883a 	add	r2,r2,r2
 4024858:	10c5883a 	add	r2,r2,r3
 402485c:	10800017 	ldw	r2,0(r2)
 4024860:	10800a17 	ldw	r2,40(r2)
 4024864:	1004c03a 	cmpne	r2,r2,zero
 4024868:	1000041e 	bne	r2,zero,402487c <dhc_reclaim+0x4c>
   {
      dtrap();    /* programming bug? */
 402486c:	4025bb40 	call	4025bb4 <dtrap>
      return ENP_LOGIC;
 4024870:	00bffd44 	movi	r2,-11
 4024874:	e0bfff15 	stw	r2,-4(fp)
 4024878:	00005b06 	br	40249e8 <dhc_reclaim+0x1b8>
   }

   dhc_states[iface].ipaddr = nets[iface]->n_ipaddr;
 402487c:	e17ffe17 	ldw	r5,-8(fp)
 4024880:	e0bffe17 	ldw	r2,-8(fp)
 4024884:	00c101b4 	movhi	r3,1030
 4024888:	18e20804 	addi	r3,r3,-30688
 402488c:	1085883a 	add	r2,r2,r2
 4024890:	1085883a 	add	r2,r2,r2
 4024894:	10c5883a 	add	r2,r2,r3
 4024898:	10800017 	ldw	r2,0(r2)
 402489c:	11000a17 	ldw	r4,40(r2)
 40248a0:	00c101b4 	movhi	r3,1030
 40248a4:	18e22e04 	addi	r3,r3,-30536
 40248a8:	28800f24 	muli	r2,r5,60
 40248ac:	10c5883a 	add	r2,r2,r3
 40248b0:	10800904 	addi	r2,r2,36
 40248b4:	11000015 	stw	r4,0(r2)
   dhc_states[iface].snmask = nets[iface]->snmask;
 40248b8:	e17ffe17 	ldw	r5,-8(fp)
 40248bc:	e0bffe17 	ldw	r2,-8(fp)
 40248c0:	00c101b4 	movhi	r3,1030
 40248c4:	18e20804 	addi	r3,r3,-30688
 40248c8:	1085883a 	add	r2,r2,r2
 40248cc:	1085883a 	add	r2,r2,r2
 40248d0:	10c5883a 	add	r2,r2,r3
 40248d4:	10800017 	ldw	r2,0(r2)
 40248d8:	11000c17 	ldw	r4,48(r2)
 40248dc:	00c101b4 	movhi	r3,1030
 40248e0:	18e22e04 	addi	r3,r3,-30536
 40248e4:	28800f24 	muli	r2,r5,60
 40248e8:	10c5883a 	add	r2,r2,r3
 40248ec:	10800a04 	addi	r2,r2,40
 40248f0:	11000015 	stw	r4,0(r2)
   dhc_states[iface].defgw  = nets[iface]->n_defgw;
 40248f4:	e17ffe17 	ldw	r5,-8(fp)
 40248f8:	e0bffe17 	ldw	r2,-8(fp)
 40248fc:	00c101b4 	movhi	r3,1030
 4024900:	18e20804 	addi	r3,r3,-30688
 4024904:	1085883a 	add	r2,r2,r2
 4024908:	1085883a 	add	r2,r2,r2
 402490c:	10c5883a 	add	r2,r2,r3
 4024910:	10800017 	ldw	r2,0(r2)
 4024914:	11000d17 	ldw	r4,52(r2)
 4024918:	00c101b4 	movhi	r3,1030
 402491c:	18e22e04 	addi	r3,r3,-30536
 4024920:	28800f24 	muli	r2,r5,60
 4024924:	10c5883a 	add	r2,r2,r3
 4024928:	10800b04 	addi	r2,r2,44
 402492c:	11000015 	stw	r4,0(r2)

#ifdef IP_ROUTING
   /* If the DHCP Server is on other network, route the request
    * from the same DHCP relay agent. To do that, add a route.
    */
   if (dhc_states[iface].rly_ipaddr)
 4024930:	e0bffe17 	ldw	r2,-8(fp)
 4024934:	00c101b4 	movhi	r3,1030
 4024938:	18e22e04 	addi	r3,r3,-30536
 402493c:	10800f24 	muli	r2,r2,60
 4024940:	10c5883a 	add	r2,r2,r3
 4024944:	10800c04 	addi	r2,r2,48
 4024948:	10800017 	ldw	r2,0(r2)
 402494c:	1005003a 	cmpeq	r2,r2,zero
 4024950:	1000211e 	bne	r2,zero,40249d8 <dhc_reclaim+0x1a8>
   {
      if (dhc_states[iface].srv_ipaddr)
 4024954:	e0bffe17 	ldw	r2,-8(fp)
 4024958:	00c101b4 	movhi	r3,1030
 402495c:	18e22e04 	addi	r3,r3,-30536
 4024960:	10800f24 	muli	r2,r2,60
 4024964:	10c5883a 	add	r2,r2,r3
 4024968:	10800d04 	addi	r2,r2,52
 402496c:	10800017 	ldw	r2,0(r2)
 4024970:	1005003a 	cmpeq	r2,r2,zero
 4024974:	1000171e 	bne	r2,zero,40249d4 <dhc_reclaim+0x1a4>
      {
         /* yes, earlier negotiation was done via a relay agent */
         if ( !add_route(dhc_states[iface].srv_ipaddr, 0xFFFFFFFF,
 4024978:	e0bffe17 	ldw	r2,-8(fp)
 402497c:	00c101b4 	movhi	r3,1030
 4024980:	18e22e04 	addi	r3,r3,-30536
 4024984:	10800f24 	muli	r2,r2,60
 4024988:	10c5883a 	add	r2,r2,r3
 402498c:	10800d04 	addi	r2,r2,52
 4024990:	11000017 	ldw	r4,0(r2)
 4024994:	e0bffe17 	ldw	r2,-8(fp)
 4024998:	00c101b4 	movhi	r3,1030
 402499c:	18e22e04 	addi	r3,r3,-30536
 40249a0:	10800f24 	muli	r2,r2,60
 40249a4:	10c5883a 	add	r2,r2,r3
 40249a8:	10800c04 	addi	r2,r2,48
 40249ac:	11800017 	ldw	r6,0(r2)
 40249b0:	00800084 	movi	r2,2
 40249b4:	d8800015 	stw	r2,0(sp)
 40249b8:	017fffc4 	movi	r5,-1
 40249bc:	e1fffe17 	ldw	r7,-8(fp)
 40249c0:	403e22c0 	call	403e22c <add_route>
 40249c4:	1004c03a 	cmpne	r2,r2,zero
 40249c8:	1000031e 	bne	r2,zero,40249d8 <dhc_reclaim+0x1a8>
             dhc_states[iface].rly_ipaddr, iface, IPRP_LOCAL))
         {
            /* route was not added. check this case */
            dtrap(); 
 40249cc:	4025bb40 	call	4025bb4 <dtrap>
 40249d0:	00000106 	br	40249d8 <dhc_reclaim+0x1a8>
      else
      {
         /* DHCP relay IP address is set, but DHCP Server IP address is
          * not set ! How can this happen ?
          */
         dtrap();
 40249d4:	4025bb40 	call	4025bb4 <dtrap>
      }
   }
#endif  /* IP_ROUTING */

   /* send the request */
   return(dhc_request(iface,TRUE));  
 40249d8:	e13ffe17 	ldw	r4,-8(fp)
 40249dc:	01400044 	movi	r5,1
 40249e0:	4022ecc0 	call	4022ecc <dhc_request>
 40249e4:	e0bfff15 	stw	r2,-4(fp)
 40249e8:	e0bfff17 	ldw	r2,-4(fp)
}
 40249ec:	e037883a 	mov	sp,fp
 40249f0:	dfc00117 	ldw	ra,4(sp)
 40249f4:	df000017 	ldw	fp,0(sp)
 40249f8:	dec00204 	addi	sp,sp,8
 40249fc:	f800283a 	ret

04024a00 <dhc_state_init>:
 * RETURNS: void
 */

void 
dhc_state_init(int iface, int init_flag)
{
 4024a00:	defffa04 	addi	sp,sp,-24
 4024a04:	dfc00515 	stw	ra,20(sp)
 4024a08:	df000415 	stw	fp,16(sp)
 4024a0c:	df000404 	addi	fp,sp,16
 4024a10:	e13ffd15 	stw	r4,-12(fp)
 4024a14:	e17ffe15 	stw	r5,-8(fp)
   int state = (init_flag == TRUE) ? DHCS_INIT : DHCS_INITREBOOT;
 4024a18:	e0bffe17 	ldw	r2,-8(fp)
 4024a1c:	10800058 	cmpnei	r2,r2,1
 4024a20:	1000031e 	bne	r2,zero,4024a30 <dhc_state_init+0x30>
 4024a24:	00800044 	movi	r2,1
 4024a28:	e0bfff15 	stw	r2,-4(fp)
 4024a2c:	00000206 	br	4024a38 <dhc_state_init+0x38>
 4024a30:	00800084 	movi	r2,2
 4024a34:	e0bfff15 	stw	r2,-4(fp)
 4024a38:	e0bfff17 	ldw	r2,-4(fp)
 4024a3c:	e0bffc15 	stw	r2,-16(fp)
   
   dhc_set_state(iface, state);
 4024a40:	e13ffd17 	ldw	r4,-12(fp)
 4024a44:	e17ffc17 	ldw	r5,-16(fp)
 4024a48:	4024b640 	call	4024b64 <dhc_set_state>
}
 4024a4c:	e037883a 	mov	sp,fp
 4024a50:	dfc00117 	ldw	ra,4(sp)
 4024a54:	df000017 	ldw	fp,0(sp)
 4024a58:	dec00204 	addi	sp,sp,8
 4024a5c:	f800283a 	ret

04024a60 <dhc_alldone>:
 * otherwise. 
 */

int 
dhc_alldone(void)
{
 4024a60:	defffd04 	addi	sp,sp,-12
 4024a64:	df000215 	stw	fp,8(sp)
 4024a68:	df000204 	addi	fp,sp,8
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
 4024a6c:	e03ffe15 	stw	zero,-8(fp)
 4024a70:	00001506 	br	4024ac8 <dhc_alldone+0x68>
   {
      if ( ( dhc_states[i].state == DHCS_UNUSED ) || 
 4024a74:	e0bffe17 	ldw	r2,-8(fp)
 4024a78:	00c101b4 	movhi	r3,1030
 4024a7c:	18e22e04 	addi	r3,r3,-30536
 4024a80:	10800f24 	muli	r2,r2,60
 4024a84:	10c5883a 	add	r2,r2,r3
 4024a88:	10800017 	ldw	r2,0(r2)
 4024a8c:	1005003a 	cmpeq	r2,r2,zero
 4024a90:	10000a1e 	bne	r2,zero,4024abc <dhc_alldone+0x5c>
 4024a94:	e0bffe17 	ldw	r2,-8(fp)
 4024a98:	00c101b4 	movhi	r3,1030
 4024a9c:	18e22e04 	addi	r3,r3,-30536
 4024aa0:	10800f24 	muli	r2,r2,60
 4024aa4:	10c5883a 	add	r2,r2,r3
 4024aa8:	10800017 	ldw	r2,0(r2)
 4024aac:	108001a0 	cmpeqi	r2,r2,6
 4024ab0:	1000021e 	bne	r2,zero,4024abc <dhc_alldone+0x5c>
      {
         continue ;
      }
      else
      {
         return FALSE ;
 4024ab4:	e03fff15 	stw	zero,-4(fp)
 4024ab8:	00000806 	br	4024adc <dhc_alldone+0x7c>

int 
dhc_alldone(void)
{
   int   i;
   for ( i=0 ; i < MAXNETS ; i++ )
 4024abc:	e0bffe17 	ldw	r2,-8(fp)
 4024ac0:	10800044 	addi	r2,r2,1
 4024ac4:	e0bffe15 	stw	r2,-8(fp)
 4024ac8:	e0bffe17 	ldw	r2,-8(fp)
 4024acc:	10800110 	cmplti	r2,r2,4
 4024ad0:	103fe81e 	bne	r2,zero,4024a74 <dhc_alldone+0x14>
      else
      {
         return FALSE ;
      }
   }
   return TRUE ;
 4024ad4:	00800044 	movi	r2,1
 4024ad8:	e0bfff15 	stw	r2,-4(fp)
 4024adc:	e0bfff17 	ldw	r2,-4(fp)
}
 4024ae0:	e037883a 	mov	sp,fp
 4024ae4:	df000017 	ldw	fp,0(sp)
 4024ae8:	dec00104 	addi	sp,sp,4
 4024aec:	f800283a 	ret

04024af0 <dhc_ifacedone>:
 * RETURNS: 
 */

int 
dhc_ifacedone(int iface)
{
 4024af0:	defffd04 	addi	sp,sp,-12
 4024af4:	df000215 	stw	fp,8(sp)
 4024af8:	df000204 	addi	fp,sp,8
 4024afc:	e13ffe15 	stw	r4,-8(fp)
   if ( ( dhc_states[iface].state == DHCS_UNUSED ) || 
 4024b00:	e0bffe17 	ldw	r2,-8(fp)
 4024b04:	00c101b4 	movhi	r3,1030
 4024b08:	18e22e04 	addi	r3,r3,-30536
 4024b0c:	10800f24 	muli	r2,r2,60
 4024b10:	10c5883a 	add	r2,r2,r3
 4024b14:	10800017 	ldw	r2,0(r2)
 4024b18:	1005003a 	cmpeq	r2,r2,zero
 4024b1c:	1000081e 	bne	r2,zero,4024b40 <dhc_ifacedone+0x50>
 4024b20:	e0bffe17 	ldw	r2,-8(fp)
 4024b24:	00c101b4 	movhi	r3,1030
 4024b28:	18e22e04 	addi	r3,r3,-30536
 4024b2c:	10800f24 	muli	r2,r2,60
 4024b30:	10c5883a 	add	r2,r2,r3
 4024b34:	10800017 	ldw	r2,0(r2)
 4024b38:	10800198 	cmpnei	r2,r2,6
 4024b3c:	1000031e 	bne	r2,zero,4024b4c <dhc_ifacedone+0x5c>
       ( dhc_states[iface].state == DHCS_BOUND  )  )
   {
      return TRUE ;
 4024b40:	00800044 	movi	r2,1
 4024b44:	e0bfff15 	stw	r2,-4(fp)
 4024b48:	00000106 	br	4024b50 <dhc_ifacedone+0x60>
   }
   else
   {
      return FALSE ;
 4024b4c:	e03fff15 	stw	zero,-4(fp)
 4024b50:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 4024b54:	e037883a 	mov	sp,fp
 4024b58:	df000017 	ldw	fp,0(sp)
 4024b5c:	dec00104 	addi	sp,sp,4
 4024b60:	f800283a 	ret

04024b64 <dhc_set_state>:
 *
 * RETURNS: 
 */

void dhc_set_state(int iface, int state)
{
 4024b64:	defffc04 	addi	sp,sp,-16
 4024b68:	dfc00315 	stw	ra,12(sp)
 4024b6c:	df000215 	stw	fp,8(sp)
 4024b70:	df000204 	addi	fp,sp,8
 4024b74:	e13ffe15 	stw	r4,-8(fp)
 4024b78:	e17fff15 	stw	r5,-4(fp)
   dhc_states[iface].state = state; /* Set the new state */
 4024b7c:	e0bffe17 	ldw	r2,-8(fp)
 4024b80:	e13fff17 	ldw	r4,-4(fp)
 4024b84:	00c101b4 	movhi	r3,1030
 4024b88:	18e22e04 	addi	r3,r3,-30536
 4024b8c:	10800f24 	muli	r2,r2,60
 4024b90:	10c5883a 	add	r2,r2,r3
 4024b94:	11000015 	stw	r4,0(r2)
   dhc_states[iface].tries = 0;     /* Reset the number of tries */
 4024b98:	e0bffe17 	ldw	r2,-8(fp)
 4024b9c:	00c101b4 	movhi	r3,1030
 4024ba0:	18e22e04 	addi	r3,r3,-30536
 4024ba4:	10800f24 	muli	r2,r2,60
 4024ba8:	10c5883a 	add	r2,r2,r3
 4024bac:	10800104 	addi	r2,r2,4
 4024bb0:	10000015 	stw	zero,0(r2)

   /* If callback is set, call it */
   if (dhc_states[iface].callback)
 4024bb4:	e0bffe17 	ldw	r2,-8(fp)
 4024bb8:	00c101b4 	movhi	r3,1030
 4024bbc:	18e22e04 	addi	r3,r3,-30536
 4024bc0:	10800f24 	muli	r2,r2,60
 4024bc4:	10c5883a 	add	r2,r2,r3
 4024bc8:	10800e04 	addi	r2,r2,56
 4024bcc:	10800017 	ldw	r2,0(r2)
 4024bd0:	1005003a 	cmpeq	r2,r2,zero
 4024bd4:	10000a1e 	bne	r2,zero,4024c00 <dhc_set_state+0x9c>
      dhc_states[iface].callback(iface,state);
 4024bd8:	e0bffe17 	ldw	r2,-8(fp)
 4024bdc:	00c101b4 	movhi	r3,1030
 4024be0:	18e22e04 	addi	r3,r3,-30536
 4024be4:	10800f24 	muli	r2,r2,60
 4024be8:	10c5883a 	add	r2,r2,r3
 4024bec:	10800e04 	addi	r2,r2,56
 4024bf0:	10800017 	ldw	r2,0(r2)
 4024bf4:	e13ffe17 	ldw	r4,-8(fp)
 4024bf8:	e17fff17 	ldw	r5,-4(fp)
 4024bfc:	103ee83a 	callr	r2
}
 4024c00:	e037883a 	mov	sp,fp
 4024c04:	dfc00117 	ldw	ra,4(sp)
 4024c08:	df000017 	ldw	fp,0(sp)
 4024c0c:	dec00204 	addi	sp,sp,8
 4024c10:	f800283a 	ret

04024c14 <find_opt>:
 * RETURNS:  Return pointer to that code if found, NULL if not found.
 */

u_char * 
find_opt(u_char opcode, u_char * opts)
{
 4024c14:	defffb04 	addi	sp,sp,-20
 4024c18:	df000415 	stw	fp,16(sp)
 4024c1c:	df000404 	addi	fp,sp,16
 4024c20:	e17ffe15 	stw	r5,-8(fp)
 4024c24:	e13ffd05 	stb	r4,-12(fp)
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */
 4024c28:	e0bffe17 	ldw	r2,-8(fp)
 4024c2c:	10804e04 	addi	r2,r2,312
 4024c30:	e0bffc15 	stw	r2,-16(fp)

   while (opts < end)
 4024c34:	00002106 	br	4024cbc <find_opt+0xa8>
   {
      if (*opts == opcode) /* found it */
 4024c38:	e0bffe17 	ldw	r2,-8(fp)
 4024c3c:	10800003 	ldbu	r2,0(r2)
 4024c40:	10c03fcc 	andi	r3,r2,255
 4024c44:	e0bffd03 	ldbu	r2,-12(fp)
 4024c48:	1880031e 	bne	r3,r2,4024c58 <find_opt+0x44>
         return opts;
 4024c4c:	e0bffe17 	ldw	r2,-8(fp)
 4024c50:	e0bfff15 	stw	r2,-4(fp)
 4024c54:	00001d06 	br	4024ccc <find_opt+0xb8>
      if (*opts == DHOP_END)  /* end of options; opcode not found */
 4024c58:	e0bffe17 	ldw	r2,-8(fp)
 4024c5c:	10800003 	ldbu	r2,0(r2)
 4024c60:	10803fcc 	andi	r2,r2,255
 4024c64:	10803fd8 	cmpnei	r2,r2,255
 4024c68:	1000021e 	bne	r2,zero,4024c74 <find_opt+0x60>
         return NULL;
 4024c6c:	e03fff15 	stw	zero,-4(fp)
 4024c70:	00001606 	br	4024ccc <find_opt+0xb8>
      if (*opts == DHOP_PAD)  /* PAD has only 1 byte */
 4024c74:	e0bffe17 	ldw	r2,-8(fp)
 4024c78:	10800003 	ldbu	r2,0(r2)
 4024c7c:	10803fcc 	andi	r2,r2,255
 4024c80:	1004c03a 	cmpne	r2,r2,zero
 4024c84:	1000041e 	bne	r2,zero,4024c98 <find_opt+0x84>
         opts++;
 4024c88:	e0bffe17 	ldw	r2,-8(fp)
 4024c8c:	10800044 	addi	r2,r2,1
 4024c90:	e0bffe15 	stw	r2,-8(fp)
 4024c94:	00000906 	br	4024cbc <find_opt+0xa8>
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
 4024c98:	e0bffe17 	ldw	r2,-8(fp)
 4024c9c:	10800044 	addi	r2,r2,1
 4024ca0:	10800003 	ldbu	r2,0(r2)
 4024ca4:	10803fcc 	andi	r2,r2,255
 4024ca8:	1007883a 	mov	r3,r2
 4024cac:	e0bffe17 	ldw	r2,-8(fp)
 4024cb0:	1885883a 	add	r2,r3,r2
 4024cb4:	10800084 	addi	r2,r2,2
 4024cb8:	e0bffe15 	stw	r2,-8(fp)
u_char * 
find_opt(u_char opcode, u_char * opts)
{
   u_char * end   =  opts  +  DHCP_OPTSIZE;  /* limit scope of search */

   while (opts < end)
 4024cbc:	e0fffe17 	ldw	r3,-8(fp)
 4024cc0:	e0bffc17 	ldw	r2,-16(fp)
 4024cc4:	18bfdc36 	bltu	r3,r2,4024c38 <find_opt+0x24>
         opts++;
      else     /* all other options should have a length field */
         opts += (*(opts+1))+2;
   }
   /* no DHOP_END option?? */
   return NULL;
 4024cc8:	e03fff15 	stw	zero,-4(fp)
 4024ccc:	e0bfff17 	ldw	r2,-4(fp)
}
 4024cd0:	e037883a 	mov	sp,fp
 4024cd4:	df000017 	ldw	fp,0(sp)
 4024cd8:	dec00104 	addi	sp,sp,4
 4024cdc:	f800283a 	ret

04024ce0 <pk_init>:
 * for a PACKET buffer or a data buffer fails, or if there is an inconsistency
 * between (bigbufs + lilbufs) and MAXPACKETS) it returns -1. 
 */

int pk_init (void)
{
 4024ce0:	defff704 	addi	sp,sp,-36
 4024ce4:	dfc00815 	stw	ra,32(sp)
 4024ce8:	df000715 	stw	fp,28(sp)
 4024cec:	df000704 	addi	fp,sp,28
   PACKET packet;
   unsigned i;
   unsigned numpkts = bigbufs + lilbufs;
 4024cf0:	d0a03517 	ldw	r2,-32556(gp)
 4024cf4:	d0e03317 	ldw	r3,-32564(gp)
 4024cf8:	10c5883a 	add	r2,r2,r3
 4024cfc:	e0bffc15 	stw	r2,-16(fp)
   u_char align_req;
   
#ifdef ALIGN_BUFS
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
 4024d00:	e03ffb05 	stb	zero,-20(fp)
#endif

   for (i = 0; i < numpkts; i++)
 4024d04:	e03ffd15 	stw	zero,-12(fp)
 4024d08:	00007e06 	br	4024f04 <pk_init+0x224>
   {
      packet = (PACKET)NB_ALLOC(sizeof(struct netbuf));
 4024d0c:	01000d04 	movi	r4,52
 4024d10:	40265f80 	call	40265f8 <npalloc>
 4024d14:	e0bffe15 	stw	r2,-8(fp)
      if (packet == NULL)
 4024d18:	e0bffe17 	ldw	r2,-8(fp)
 4024d1c:	1005003a 	cmpeq	r2,r2,zero
 4024d20:	1000871e 	bne	r2,zero,4024f40 <pk_init+0x260>
         goto no_pkt_buf;

#ifdef NPDEBUG
      if (i >= MAXPACKETS)
 4024d24:	e0bffd17 	ldw	r2,-12(fp)
 4024d28:	10800f30 	cmpltui	r2,r2,60
 4024d2c:	1000061e 	bne	r2,zero,4024d48 <pk_init+0x68>
      {
         dprintf("pk_init: bad define\n");
 4024d30:	01010174 	movhi	r4,1029
 4024d34:	212cef04 	addi	r4,r4,-19524
 4024d38:	40021940 	call	4002194 <puts>
         return -1;
 4024d3c:	00bfffc4 	movi	r2,-1
 4024d40:	e0bfff15 	stw	r2,-4(fp)
 4024d44:	00008406 	br	4024f58 <pk_init+0x278>
      }
      pktlog[i] = packet;     /* save for debugging */
 4024d48:	e0bffd17 	ldw	r2,-12(fp)
 4024d4c:	00c101b4 	movhi	r3,1030
 4024d50:	18e27304 	addi	r3,r3,-30260
 4024d54:	1085883a 	add	r2,r2,r2
 4024d58:	1085883a 	add	r2,r2,r2
 4024d5c:	10c7883a 	add	r3,r2,r3
 4024d60:	e0bffe17 	ldw	r2,-8(fp)
 4024d64:	18800015 	stw	r2,0(r3)
#endif

      packet->nb_tstamp = 0L;
 4024d68:	e0bffe17 	ldw	r2,-8(fp)
 4024d6c:	10000515 	stw	zero,20(r2)

      if (i < bigbufs)
 4024d70:	d0e03517 	ldw	r3,-32556(gp)
 4024d74:	e0bffd17 	ldw	r2,-12(fp)
 4024d78:	10c0302e 	bgeu	r2,r3,4024e3c <pk_init+0x15c>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
 4024d7c:	d0a03617 	ldw	r2,-32552(gp)
 4024d80:	11000144 	addi	r4,r2,5
 4024d84:	40267a40 	call	40267a4 <ncpalloc>
 4024d88:	1007883a 	mov	r3,r2
 4024d8c:	e0bffe17 	ldw	r2,-8(fp)
 4024d90:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
 4024d94:	e0bffe17 	ldw	r2,-8(fp)
 4024d98:	10800117 	ldw	r2,4(r2)
 4024d9c:	1005003a 	cmpeq	r2,r2,zero
 4024da0:	1000671e 	bne	r2,zero,4024f40 <pk_init+0x260>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 4024da4:	e03ffa15 	stw	zero,-24(fp)
 4024da8:	00000906 	br	4024dd0 <pk_init+0xf0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 4024dac:	e0bffe17 	ldw	r2,-8(fp)
 4024db0:	10c00117 	ldw	r3,4(r2)
 4024db4:	e0bffa17 	ldw	r2,-24(fp)
 4024db8:	1887883a 	add	r3,r3,r2
 4024dbc:	00801344 	movi	r2,77
 4024dc0:	18800005 	stb	r2,0(r3)
            packet->nb_buff = (char *)BB_ALLOC(bigbufsiz+ALIGN_TYPE+1);
            if (!(packet->nb_buff))
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 4024dc4:	e0bffa17 	ldw	r2,-24(fp)
 4024dc8:	10800044 	addi	r2,r2,1
 4024dcc:	e0bffa15 	stw	r2,-24(fp)
 4024dd0:	e0bffa17 	ldw	r2,-24(fp)
 4024dd4:	10800110 	cmplti	r2,r2,4
 4024dd8:	103ff41e 	bne	r2,zero,4024dac <pk_init+0xcc>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */

            *(packet->nb_buff + bigbufsiz + ALIGN_TYPE) = 'M';
 4024ddc:	e0bffe17 	ldw	r2,-8(fp)
 4024de0:	10c00117 	ldw	r3,4(r2)
 4024de4:	d0a03617 	ldw	r2,-32552(gp)
 4024de8:	1885883a 	add	r2,r3,r2
 4024dec:	10c00104 	addi	r3,r2,4
 4024df0:	00801344 	movi	r2,77
 4024df4:	18800005 	stb	r2,0(r3)
            packet->nb_buff += ALIGN_TYPE;   /* bump buf past MMs */
 4024df8:	e0bffe17 	ldw	r2,-8(fp)
 4024dfc:	10800117 	ldw	r2,4(r2)
 4024e00:	10c00104 	addi	r3,r2,4
 4024e04:	e0bffe17 	ldw	r2,-8(fp)
 4024e08:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 4024e0c:	e0bffe17 	ldw	r2,-8(fp)
 4024e10:	10800117 	ldw	r2,4(r2)
 4024e14:	1005003a 	cmpeq	r2,r2,zero
 4024e18:	1000491e 	bne	r2,zero,4024f40 <pk_init+0x260>
            goto no_pkt_buf;
         packet->nb_blen = bigbufsiz;
 4024e1c:	d0e03617 	ldw	r3,-32552(gp)
 4024e20:	e0bffe17 	ldw	r2,-8(fp)
 4024e24:	10c00215 	stw	r3,8(r2)
         q_add(&bigfreeq, packet);        /* save it in big pkt free queue */
 4024e28:	010101b4 	movhi	r4,1030
 4024e2c:	2122af04 	addi	r4,r4,-30020
 4024e30:	e17ffe17 	ldw	r5,-8(fp)
 4024e34:	40255440 	call	4025544 <putq>
 4024e38:	00002f06 	br	4024ef8 <pk_init+0x218>
#ifdef NPDEBUG
         {
            int j;

            /* for DEBUG compiles, bracket the data area with special chars */
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
 4024e3c:	d0a03417 	ldw	r2,-32560(gp)
 4024e40:	11000144 	addi	r4,r2,5
 4024e44:	40267a40 	call	40267a4 <ncpalloc>
 4024e48:	1007883a 	mov	r3,r2
 4024e4c:	e0bffe17 	ldw	r2,-8(fp)
 4024e50:	10c00115 	stw	r3,4(r2)
            if (!(packet->nb_buff))
 4024e54:	e0bffe17 	ldw	r2,-8(fp)
 4024e58:	10800117 	ldw	r2,4(r2)
 4024e5c:	1005003a 	cmpeq	r2,r2,zero
 4024e60:	1000371e 	bne	r2,zero,4024f40 <pk_init+0x260>
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 4024e64:	e03ff915 	stw	zero,-28(fp)
 4024e68:	00000906 	br	4024e90 <pk_init+0x1b0>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */
 4024e6c:	e0bffe17 	ldw	r2,-8(fp)
 4024e70:	10c00117 	ldw	r3,4(r2)
 4024e74:	e0bff917 	ldw	r2,-28(fp)
 4024e78:	1887883a 	add	r3,r3,r2
 4024e7c:	00801344 	movi	r2,77
 4024e80:	18800005 	stb	r2,0(r3)
            packet->nb_buff = (char *)LB_ALLOC(lilbufsiz+ALIGN_TYPE+1);
            if (!(packet->nb_buff))
               goto no_pkt_buf;

            /* Add memory markers for sanity check */
            for(j = 0; j < ALIGN_TYPE; j++)
 4024e84:	e0bff917 	ldw	r2,-28(fp)
 4024e88:	10800044 	addi	r2,r2,1
 4024e8c:	e0bff915 	stw	r2,-28(fp)
 4024e90:	e0bff917 	ldw	r2,-28(fp)
 4024e94:	10800110 	cmplti	r2,r2,4
 4024e98:	103ff41e 	bne	r2,zero,4024e6c <pk_init+0x18c>
               *(packet->nb_buff + j) = 'M'; /* MMs at start of buf */

            *(packet->nb_buff + lilbufsiz + ALIGN_TYPE) = 'M';
 4024e9c:	e0bffe17 	ldw	r2,-8(fp)
 4024ea0:	10c00117 	ldw	r3,4(r2)
 4024ea4:	d0a03417 	ldw	r2,-32560(gp)
 4024ea8:	1885883a 	add	r2,r3,r2
 4024eac:	10c00104 	addi	r3,r2,4
 4024eb0:	00801344 	movi	r2,77
 4024eb4:	18800005 	stb	r2,0(r3)
            packet->nb_buff += ALIGN_TYPE;
 4024eb8:	e0bffe17 	ldw	r2,-8(fp)
 4024ebc:	10800117 	ldw	r2,4(r2)
 4024ec0:	10c00104 	addi	r3,r2,4
 4024ec4:	e0bffe17 	ldw	r2,-8(fp)
 4024ec8:	10c00115 	stw	r3,4(r2)
#ifdef ALIGN_BUFS
         /* align start of buffer pointer to desired offset */
         packet->nb_buff += (ALIGN_BUFS - (((u_long) packet->nb_buff) & (ALIGN_BUFS - 1)));
#endif
#endif
         if (!(packet->nb_buff))
 4024ecc:	e0bffe17 	ldw	r2,-8(fp)
 4024ed0:	10800117 	ldw	r2,4(r2)
 4024ed4:	1005003a 	cmpeq	r2,r2,zero
 4024ed8:	1000191e 	bne	r2,zero,4024f40 <pk_init+0x260>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
 4024edc:	d0e03417 	ldw	r3,-32560(gp)
 4024ee0:	e0bffe17 	ldw	r2,-8(fp)
 4024ee4:	10c00215 	stw	r3,8(r2)
         q_add(&lilfreeq, packet);        /* save it in little free queue */
 4024ee8:	010101b4 	movhi	r4,1030
 4024eec:	21226a04 	addi	r4,r4,-30296
 4024ef0:	e17ffe17 	ldw	r5,-8(fp)
 4024ef4:	40255440 	call	4025544 <putq>
   align_req = ALIGN_BUFS;
#else
   align_req = 0;
#endif

   for (i = 0; i < numpkts; i++)
 4024ef8:	e0bffd17 	ldw	r2,-12(fp)
 4024efc:	10800044 	addi	r2,r2,1
 4024f00:	e0bffd15 	stw	r2,-12(fp)
 4024f04:	e0fffd17 	ldw	r3,-12(fp)
 4024f08:	e0bffc17 	ldw	r2,-16(fp)
 4024f0c:	18bf7f36 	bltu	r3,r2,4024d0c <pk_init+0x2c>
            goto no_pkt_buf;
         packet->nb_blen = lilbufsiz;
         q_add(&lilfreeq, packet);        /* save it in little free queue */
      }
   }
   bigfreeq.q_min = bigbufs;
 4024f10:	d0a03517 	ldw	r2,-32556(gp)
 4024f14:	1007883a 	mov	r3,r2
 4024f18:	008101b4 	movhi	r2,1030
 4024f1c:	10a2af04 	addi	r2,r2,-30020
 4024f20:	10c00415 	stw	r3,16(r2)
   lilfreeq.q_min = lilbufs;
 4024f24:	d0a03317 	ldw	r2,-32564(gp)
 4024f28:	1007883a 	mov	r3,r2
 4024f2c:	008101b4 	movhi	r2,1030
 4024f30:	10a26a04 	addi	r2,r2,-30296
 4024f34:	10c00415 	stw	r3,16(r2)
   heap_curr_mem_hi_watermark = 0;
   /* set the heap's access type to blocking */
   heap_type = HEAP_ACCESS_BLOCKING;
#endif

   return 0;
 4024f38:	e03fff15 	stw	zero,-4(fp)
 4024f3c:	00000606 	br	4024f58 <pk_init+0x278>

no_pkt_buf:
#ifdef NPDEBUG
   dprintf("Netinit: calloc failed getting buffer %d\n", i);
 4024f40:	01010174 	movhi	r4,1029
 4024f44:	212cf404 	addi	r4,r4,-19504
 4024f48:	e17ffd17 	ldw	r5,-12(fp)
 4024f4c:	400207c0 	call	400207c <printf>
#endif
   return(-1);
 4024f50:	00bfffc4 	movi	r2,-1
 4024f54:	e0bfff15 	stw	r2,-4(fp)
 4024f58:	e0bfff17 	ldw	r2,-4(fp)
}
 4024f5c:	e037883a 	mov	sp,fp
 4024f60:	dfc00117 	ldw	ra,4(sp)
 4024f64:	df000017 	ldw	fp,0(sp)
 4024f68:	dec00204 	addi	sp,sp,8
 4024f6c:	f800283a 	ret

04024f70 <pk_alloc>:
 * OUTPUT: 0 if the request cannot be satisfied, or a pointer to the struct
 * netbuf structure that corresponds to the just allocated data buffer.
 */

PACKET pk_alloc(unsigned len)
{
 4024f70:	defffb04 	addi	sp,sp,-20
 4024f74:	dfc00415 	stw	ra,16(sp)
 4024f78:	df000315 	stw	fp,12(sp)
 4024f7c:	df000304 	addi	fp,sp,12
 4024f80:	e13ffe15 	stw	r4,-8(fp)
   PACKET p;

   if (len > bigbufsiz) /* caller wants oversize buffer? */
 4024f84:	d0e03617 	ldw	r3,-32552(gp)
 4024f88:	e0bffe17 	ldw	r2,-8(fp)
 4024f8c:	1880022e 	bgeu	r3,r2,4024f98 <pk_alloc+0x28>
   {
#ifdef HEAPBUFS
      if ((p = pk_alloc_heapbuf (len)) == NULL)
         return NULL;
#else
      return(NULL);
 4024f90:	e03fff15 	stw	zero,-4(fp)
 4024f94:	00002706 	br	4025034 <pk_alloc+0xc4>
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
 4024f98:	d0e03417 	ldw	r3,-32560(gp)
 4024f9c:	e0bffe17 	ldw	r2,-8(fp)
 4024fa0:	18800536 	bltu	r3,r2,4024fb8 <pk_alloc+0x48>
 4024fa4:	008101b4 	movhi	r2,1030
 4024fa8:	10a26a04 	addi	r2,r2,-30296
 4024fac:	10800217 	ldw	r2,8(r2)
 4024fb0:	1004c03a 	cmpne	r2,r2,zero
 4024fb4:	1000051e 	bne	r2,zero,4024fcc <pk_alloc+0x5c>
         p = (PACKET)getq(&bigfreeq);
 4024fb8:	010101b4 	movhi	r4,1030
 4024fbc:	2122af04 	addi	r4,r4,-30020
 4024fc0:	402547c0 	call	402547c <getq>
 4024fc4:	e0bffd15 	stw	r2,-12(fp)
      return(NULL);
#endif
   }
   else
   {
      if ((len > lilbufsiz) || (lilfreeq.q_len == 0)) /* must use a big buffer */
 4024fc8:	00000406 	br	4024fdc <pk_alloc+0x6c>
         p = (PACKET)getq(&bigfreeq);
      else
         p = (PACKET)getq(&lilfreeq);
 4024fcc:	010101b4 	movhi	r4,1030
 4024fd0:	21226a04 	addi	r4,r4,-30296
 4024fd4:	402547c0 	call	402547c <getq>
 4024fd8:	e0bffd15 	stw	r2,-12(fp)

      if (!p)
 4024fdc:	e0bffd17 	ldw	r2,-12(fp)
 4024fe0:	1004c03a 	cmpne	r2,r2,zero
 4024fe4:	1000021e 	bne	r2,zero,4024ff0 <pk_alloc+0x80>
         return NULL;
 4024fe8:	e03fff15 	stw	zero,-4(fp)
 4024fec:	00001106 	br	4025034 <pk_alloc+0xc4>
   }

   p->nb_prot = p->nb_buff + MaxLnh;   /* point past biggest mac header */
 4024ff0:	e0bffd17 	ldw	r2,-12(fp)
 4024ff4:	10c00117 	ldw	r3,4(r2)
 4024ff8:	00810174 	movhi	r2,1029
 4024ffc:	1081bd04 	addi	r2,r2,1780
 4025000:	10800017 	ldw	r2,0(r2)
 4025004:	1887883a 	add	r3,r3,r2
 4025008:	e0bffd17 	ldw	r2,-12(fp)
 402500c:	10c00315 	stw	r3,12(r2)
   p->nb_plen = 0;   /* no protocol data there yet */
 4025010:	e0bffd17 	ldw	r2,-12(fp)
 4025014:	10000415 	stw	zero,16(r2)
   p->net = NULL;
 4025018:	e0bffd17 	ldw	r2,-12(fp)
 402501c:	10000615 	stw	zero,24(r2)
   p->nexthop = NULL;      /* no next hop  */
   p->nb_pmtu = 1240;      /* Set minimum IPv6 Path MTU */
#endif   /* IP_V6 */
#endif /* LINKED_PKTS */

   p->inuse = 1;  /* initially buffer in use by 1 user */
 4025020:	e0fffd17 	ldw	r3,-12(fp)
 4025024:	00800044 	movi	r2,1
 4025028:	18800915 	stw	r2,36(r3)

   /* note that 'type' and 'fhost' fields are not set in pk_alloc () */
   return(p);
 402502c:	e0bffd17 	ldw	r2,-12(fp)
 4025030:	e0bfff15 	stw	r2,-4(fp)
 4025034:	e0bfff17 	ldw	r2,-4(fp)
}
 4025038:	e037883a 	mov	sp,fp
 402503c:	dfc00117 	ldw	ra,4(sp)
 4025040:	df000017 	ldw	fp,0(sp)
 4025044:	dec00204 	addi	sp,sp,8
 4025048:	f800283a 	ret

0402504c <pk_validate>:
 * OUTPUT: 0 if the buffer being freed was successfully validated, or
 * -1 if the validation failed.
 */

int pk_validate(PACKET pkt)   /* check if pk_free() can free the pkt */
{
 402504c:	defffa04 	addi	sp,sp,-24
 4025050:	dfc00515 	stw	ra,20(sp)
 4025054:	df000415 	stw	fp,16(sp)
 4025058:	df000404 	addi	fp,sp,16
 402505c:	e13ffe15 	stw	r4,-8(fp)
   /* If packet link is non-zero, then this packet is
    * part of a chain and deleted this packet would break
    * the chain and cause memory leak for subsequent pkts.
    * Note that heapbufs do not use the 'next' field at all.
    */
   if ((pkt->next) && (pkt->inuse >= 1))
 4025060:	e0bffe17 	ldw	r2,-8(fp)
 4025064:	10800017 	ldw	r2,0(r2)
 4025068:	1005003a 	cmpeq	r2,r2,zero
 402506c:	1000101e 	bne	r2,zero,40250b0 <pk_validate+0x64>
 4025070:	e0bffe17 	ldw	r2,-8(fp)
 4025074:	10800917 	ldw	r2,36(r2)
 4025078:	1005003a 	cmpeq	r2,r2,zero
 402507c:	10000c1e 	bne	r2,zero,40250b0 <pk_validate+0x64>
   {
      INCR_SHARED_VAR (memestats, INCONSISTENT_LOCATION_ERR, 1);   
 4025080:	4025db40 	call	4025db4 <irq_Mask>
 4025084:	008101b4 	movhi	r2,1030
 4025088:	10a26f04 	addi	r2,r2,-30276
 402508c:	10800317 	ldw	r2,12(r2)
 4025090:	10c00044 	addi	r3,r2,1
 4025094:	008101b4 	movhi	r2,1030
 4025098:	10a26f04 	addi	r2,r2,-30276
 402509c:	10c00315 	stw	r3,12(r2)
 40250a0:	4025e100 	call	4025e10 <irq_Unmask>
      return -1;
 40250a4:	00bfffc4 	movi	r2,-1
 40250a8:	e0bfff15 	stw	r2,-4(fp)
 40250ac:	00008f06 	br	40252ec <pk_validate+0x2a0>
   }
   else  
#endif /* HEAPBUFS */
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
 40250b0:	e0bffe17 	ldw	r2,-8(fp)
 40250b4:	10c00217 	ldw	r3,8(r2)
 40250b8:	d0a03617 	ldw	r2,-32552(gp)
 40250bc:	1880221e 	bne	r3,r2,4025148 <pk_validate+0xfc>
      {
         ENTER_CRIT_SECTION(&bigfreeq);
 40250c0:	4025db40 	call	4025db4 <irq_Mask>
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 40250c4:	008101b4 	movhi	r2,1030
 40250c8:	10a2af04 	addi	r2,r2,-30020
 40250cc:	10800017 	ldw	r2,0(r2)
 40250d0:	e0bffd15 	stw	r2,-12(fp)
 40250d4:	00001706 	br	4025134 <pk_validate+0xe8>
            if (p == pkt)
 40250d8:	e0fffd17 	ldw	r3,-12(fp)
 40250dc:	e0bffe17 	ldw	r2,-8(fp)
 40250e0:	1880111e 	bne	r3,r2,4025128 <pk_validate+0xdc>
            {
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
 40250e4:	01010174 	movhi	r4,1029
 40250e8:	212cff04 	addi	r4,r4,-19460
 40250ec:	e17ffe17 	ldw	r5,-8(fp)
 40250f0:	400207c0 	call	400207c <printf>
               EXIT_CRIT_SECTION(&bigfreeq);
 40250f4:	4025e100 	call	4025e10 <irq_Unmask>
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 40250f8:	4025db40 	call	4025db4 <irq_Mask>
 40250fc:	008101b4 	movhi	r2,1030
 4025100:	10a26f04 	addi	r2,r2,-30276
 4025104:	10800217 	ldw	r2,8(r2)
 4025108:	10c00044 	addi	r3,r2,1
 402510c:	008101b4 	movhi	r2,1030
 4025110:	10a26f04 	addi	r2,r2,-30276
 4025114:	10c00215 	stw	r3,8(r2)
 4025118:	4025e100 	call	4025e10 <irq_Unmask>
               return -1;
 402511c:	00bfffc4 	movi	r2,-1
 4025120:	e0bfff15 	stw	r2,-4(fp)
 4025124:	00007106 	br	40252ec <pk_validate+0x2a0>
   {
      /* check if the packet is already in a freeq */
      if (pkt->nb_blen == bigbufsiz)  /* check in bigfreeq */
      {
         ENTER_CRIT_SECTION(&bigfreeq);
         for (p=(PACKET)bigfreeq.q_head; p; p = p->next)
 4025128:	e0bffd17 	ldw	r2,-12(fp)
 402512c:	10800017 	ldw	r2,0(r2)
 4025130:	e0bffd15 	stw	r2,-12(fp)
 4025134:	e0bffd17 	ldw	r2,-12(fp)
 4025138:	1004c03a 	cmpne	r2,r2,zero
 402513c:	103fe61e 	bne	r2,zero,40250d8 <pk_validate+0x8c>
               dprintf("pk_free: buffer %p already in bigfreeq\n", pkt);
               EXIT_CRIT_SECTION(&bigfreeq);
               INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
               return -1;
            }
         EXIT_CRIT_SECTION(&bigfreeq);
 4025140:	4025e100 	call	4025e10 <irq_Unmask>
 4025144:	00003206 	br	4025210 <pk_validate+0x1c4>
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
 4025148:	e0bffe17 	ldw	r2,-8(fp)
 402514c:	10c00217 	ldw	r3,8(r2)
 4025150:	d0a03417 	ldw	r2,-32560(gp)
 4025154:	1880221e 	bne	r3,r2,40251e0 <pk_validate+0x194>
      {
         ENTER_CRIT_SECTION(&lilfreeq);
 4025158:	4025db40 	call	4025db4 <irq_Mask>
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 402515c:	008101b4 	movhi	r2,1030
 4025160:	10a26a04 	addi	r2,r2,-30296
 4025164:	10800017 	ldw	r2,0(r2)
 4025168:	e0bffd15 	stw	r2,-12(fp)
 402516c:	00001706 	br	40251cc <pk_validate+0x180>
            if (p == pkt)
 4025170:	e0fffd17 	ldw	r3,-12(fp)
 4025174:	e0bffe17 	ldw	r2,-8(fp)
 4025178:	1880111e 	bne	r3,r2,40251c0 <pk_validate+0x174>
         {
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
 402517c:	01010174 	movhi	r4,1029
 4025180:	212d0904 	addi	r4,r4,-19420
 4025184:	e17ffe17 	ldw	r5,-8(fp)
 4025188:	400207c0 	call	400207c <printf>
            EXIT_CRIT_SECTION(&lilfreeq);
 402518c:	4025e100 	call	4025e10 <irq_Unmask>
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
 4025190:	4025db40 	call	4025db4 <irq_Mask>
 4025194:	008101b4 	movhi	r2,1030
 4025198:	10a26f04 	addi	r2,r2,-30276
 402519c:	10800217 	ldw	r2,8(r2)
 40251a0:	10c00044 	addi	r3,r2,1
 40251a4:	008101b4 	movhi	r2,1030
 40251a8:	10a26f04 	addi	r2,r2,-30276
 40251ac:	10c00215 	stw	r3,8(r2)
 40251b0:	4025e100 	call	4025e10 <irq_Unmask>
            return -1;
 40251b4:	00bfffc4 	movi	r2,-1
 40251b8:	e0bfff15 	stw	r2,-4(fp)
 40251bc:	00004b06 	br	40252ec <pk_validate+0x2a0>
         EXIT_CRIT_SECTION(&bigfreeq);
      }
      else if (pkt->nb_blen == lilbufsiz)  /* check in lilfreeq */
      {
         ENTER_CRIT_SECTION(&lilfreeq);
         for (p=(PACKET)lilfreeq.q_head; p; p = p->next)
 40251c0:	e0bffd17 	ldw	r2,-12(fp)
 40251c4:	10800017 	ldw	r2,0(r2)
 40251c8:	e0bffd15 	stw	r2,-12(fp)
 40251cc:	e0bffd17 	ldw	r2,-12(fp)
 40251d0:	1004c03a 	cmpne	r2,r2,zero
 40251d4:	103fe61e 	bne	r2,zero,4025170 <pk_validate+0x124>
            dprintf("pk_free: buffer %p already in lilfreeq\n", pkt);
            EXIT_CRIT_SECTION(&lilfreeq);
            INCR_SHARED_VAR (memestats, MULTIPLE_FREE_ERR, 1);
            return -1;
         }
         EXIT_CRIT_SECTION(&lilfreeq);
 40251d8:	4025e100 	call	4025e10 <irq_Unmask>
 40251dc:	00000c06 	br	4025210 <pk_validate+0x1c4>
      }
      else
      {
         /* log an error */
         INCR_SHARED_VAR (memestats, BAD_REGULAR_BUF_LEN_ERR, 1);
 40251e0:	4025db40 	call	4025db4 <irq_Mask>
 40251e4:	008101b4 	movhi	r2,1030
 40251e8:	10a26f04 	addi	r2,r2,-30276
 40251ec:	10800017 	ldw	r2,0(r2)
 40251f0:	10c00044 	addi	r3,r2,1
 40251f4:	008101b4 	movhi	r2,1030
 40251f8:	10a26f04 	addi	r2,r2,-30276
 40251fc:	10c00015 	stw	r3,0(r2)
 4025200:	4025e100 	call	4025e10 <irq_Unmask>
         return -1;
 4025204:	00bfffc4 	movi	r2,-1
 4025208:	e0bfff15 	stw	r2,-4(fp)
 402520c:	00003706 	br	40252ec <pk_validate+0x2a0>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
 4025210:	00800104 	movi	r2,4
 4025214:	e0bffc15 	stw	r2,-16(fp)
 4025218:	00001906 	br	4025280 <pk_validate+0x234>
   {
      if (*(pkt->nb_buff - j) != 'M')
 402521c:	e0bffe17 	ldw	r2,-8(fp)
 4025220:	10c00117 	ldw	r3,4(r2)
 4025224:	e0bffc17 	ldw	r2,-16(fp)
 4025228:	1885c83a 	sub	r2,r3,r2
 402522c:	10800003 	ldbu	r2,0(r2)
 4025230:	10803fcc 	andi	r2,r2,255
 4025234:	1080201c 	xori	r2,r2,128
 4025238:	10bfe004 	addi	r2,r2,-128
 402523c:	10801360 	cmpeqi	r2,r2,77
 4025240:	10000c1e 	bne	r2,zero,4025274 <pk_validate+0x228>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 4025244:	4025db40 	call	4025db4 <irq_Mask>
 4025248:	008101b4 	movhi	r2,1030
 402524c:	10a26f04 	addi	r2,r2,-30276
 4025250:	10800117 	ldw	r2,4(r2)
 4025254:	10c00044 	addi	r3,r2,1
 4025258:	008101b4 	movhi	r2,1030
 402525c:	10a26f04 	addi	r2,r2,-30276
 4025260:	10c00115 	stw	r3,4(r2)
 4025264:	4025e100 	call	4025e10 <irq_Unmask>
         return -1;
 4025268:	00bfffc4 	movi	r2,-1
 402526c:	e0bfff15 	stw	r2,-4(fp)
 4025270:	00001e06 	br	40252ec <pk_validate+0x2a0>
   }

#ifdef NPDEBUG
   /* check for corruption of memory markers (the guard bands are only
    * present when NPDEBUG is defined) */
   for (j = ALIGN_TYPE; j > 0; j--)
 4025274:	e0bffc17 	ldw	r2,-16(fp)
 4025278:	10bfffc4 	addi	r2,r2,-1
 402527c:	e0bffc15 	stw	r2,-16(fp)
 4025280:	e0bffc17 	ldw	r2,-16(fp)
 4025284:	10800048 	cmpgei	r2,r2,1
 4025288:	103fe41e 	bne	r2,zero,402521c <pk_validate+0x1d0>
      {
         INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
         return -1;
      }
   }
   if (*(pkt->nb_buff + pkt->nb_blen) != 'M')
 402528c:	e0bffe17 	ldw	r2,-8(fp)
 4025290:	10c00117 	ldw	r3,4(r2)
 4025294:	e0bffe17 	ldw	r2,-8(fp)
 4025298:	10800217 	ldw	r2,8(r2)
 402529c:	1885883a 	add	r2,r3,r2
 40252a0:	10800003 	ldbu	r2,0(r2)
 40252a4:	10803fcc 	andi	r2,r2,255
 40252a8:	1080201c 	xori	r2,r2,128
 40252ac:	10bfe004 	addi	r2,r2,-128
 40252b0:	10801360 	cmpeqi	r2,r2,77
 40252b4:	10000c1e 	bne	r2,zero,40252e8 <pk_validate+0x29c>
   {
      INCR_SHARED_VAR (memestats, GUARD_BAND_VIOLATED_ERR, 1);
 40252b8:	4025db40 	call	4025db4 <irq_Mask>
 40252bc:	008101b4 	movhi	r2,1030
 40252c0:	10a26f04 	addi	r2,r2,-30276
 40252c4:	10800117 	ldw	r2,4(r2)
 40252c8:	10c00044 	addi	r3,r2,1
 40252cc:	008101b4 	movhi	r2,1030
 40252d0:	10a26f04 	addi	r2,r2,-30276
 40252d4:	10c00115 	stw	r3,4(r2)
 40252d8:	4025e100 	call	4025e10 <irq_Unmask>
      return -1;
 40252dc:	00bfffc4 	movi	r2,-1
 40252e0:	e0bfff15 	stw	r2,-4(fp)
 40252e4:	00000106 	br	40252ec <pk_validate+0x2a0>
   }
#endif /* NPDEBUG */

   return 0;
 40252e8:	e03fff15 	stw	zero,-4(fp)
 40252ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40252f0:	e037883a 	mov	sp,fp
 40252f4:	dfc00117 	ldw	ra,4(sp)
 40252f8:	df000017 	ldw	fp,0(sp)
 40252fc:	dec00204 	addi	sp,sp,8
 4025300:	f800283a 	ret

04025304 <pk_free>:
 *
 * OUTPUT: None.
 */

void pk_free(PACKET pkt)   /* PACKET to place in free queue */
{
 4025304:	defffc04 	addi	sp,sp,-16
 4025308:	dfc00315 	stw	ra,12(sp)
 402530c:	df000215 	stw	fp,8(sp)
 4025310:	df000204 	addi	fp,sp,8
 4025314:	e13fff15 	stw	r4,-4(fp)
      PACKET pknext;
      pknext = pkt->pk_next;
#endif /* LINKED_PKTS */

      /* validate the pkt before freeing */
      e = pk_validate(pkt);
 4025318:	e13fff17 	ldw	r4,-4(fp)
 402531c:	402504c0 	call	402504c <pk_validate>
 4025320:	e0bffe15 	stw	r2,-8(fp)
      if (e)
 4025324:	e0bffe17 	ldw	r2,-8(fp)
 4025328:	1004c03a 	cmpne	r2,r2,zero
 402532c:	10001b1e 	bne	r2,zero,402539c <pk_free+0x98>
            continue; /* skip this pkt, examine the next pkt */
         }
#endif
         return;
      }
      if (pkt->inuse-- > 1)   /* more than 1 owner? */
 4025330:	e0bfff17 	ldw	r2,-4(fp)
 4025334:	10c00917 	ldw	r3,36(r2)
 4025338:	188000a8 	cmpgeui	r2,r3,2
 402533c:	1009883a 	mov	r4,r2
 4025340:	18ffffc4 	addi	r3,r3,-1
 4025344:	e0bfff17 	ldw	r2,-4(fp)
 4025348:	10c00915 	stw	r3,36(r2)
 402534c:	20803fcc 	andi	r2,r4,255
 4025350:	1004c03a 	cmpne	r2,r2,zero
 4025354:	1000111e 	bne	r2,zero,402539c <pk_free+0x98>
         pk_free_heapbuf (pkt);
      }
      else 
#endif /* HEAPBUFS */
      {
         if (pkt->nb_blen == bigbufsiz)
 4025358:	e0bfff17 	ldw	r2,-4(fp)
 402535c:	10c00217 	ldw	r3,8(r2)
 4025360:	d0a03617 	ldw	r2,-32552(gp)
 4025364:	1880051e 	bne	r3,r2,402537c <pk_free+0x78>
            q_add(&bigfreeq, (qp)pkt);
 4025368:	e17fff17 	ldw	r5,-4(fp)
 402536c:	010101b4 	movhi	r4,1030
 4025370:	2122af04 	addi	r4,r4,-30020
 4025374:	40255440 	call	4025544 <putq>
 4025378:	00000806 	br	402539c <pk_free+0x98>
         else if (pkt->nb_blen == lilbufsiz)
 402537c:	e0bfff17 	ldw	r2,-4(fp)
 4025380:	10c00217 	ldw	r3,8(r2)
 4025384:	d0a03417 	ldw	r2,-32560(gp)
 4025388:	1880041e 	bne	r3,r2,402539c <pk_free+0x98>
            q_add(&lilfreeq, (qp)pkt);
 402538c:	e17fff17 	ldw	r5,-4(fp)
 4025390:	010101b4 	movhi	r4,1030
 4025394:	21226a04 	addi	r4,r4,-30296
 4025398:	40255440 	call	4025544 <putq>
#ifdef LINKED_PKTS
      pkt = pknext;
   }
#endif 

}
 402539c:	e037883a 	mov	sp,fp
 40253a0:	dfc00117 	ldw	ra,4(sp)
 40253a4:	df000017 	ldw	fp,0(sp)
 40253a8:	dec00204 	addi	sp,sp,8
 40253ac:	f800283a 	ret

040253b0 <pk_get_max_intrsafe_buf_len>:
 *
 * OUTPUT: This function always returns the length of a big buffer (bigbufsiz).
 */

unsigned pk_get_max_intrsafe_buf_len(void)
{
 40253b0:	deffff04 	addi	sp,sp,-4
 40253b4:	df000015 	stw	fp,0(sp)
 40253b8:	d839883a 	mov	fp,sp
   return bigbufsiz;
 40253bc:	d0a03617 	ldw	r2,-32552(gp)
}
 40253c0:	e037883a 	mov	sp,fp
 40253c4:	df000017 	ldw	fp,0(sp)
 40253c8:	dec00104 	addi	sp,sp,4
 40253cc:	f800283a 	ret

040253d0 <dump_buf_estats>:
 *
 * OUTPUT: This function always returns 0.
 */

int dump_buf_estats (void * pio)
{
 40253d0:	defff904 	addi	sp,sp,-28
 40253d4:	dfc00615 	stw	ra,24(sp)
 40253d8:	df000515 	stw	fp,20(sp)
 40253dc:	df000504 	addi	fp,sp,20
 40253e0:	e13fff15 	stw	r4,-4(fp)
   u_long mlocal [MEMERR_NUM_STATS];

   LOCK_NET_RESOURCE(FREEQ_RESID);
 40253e4:	01000084 	movi	r4,2
 40253e8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   ENTER_CRIT_SECTION(&memestats);
 40253ec:	4025db40 	call	4025db4 <irq_Mask>
   MEMCPY (&mlocal, &memestats, sizeof(memestats));
 40253f0:	00c101b4 	movhi	r3,1030
 40253f4:	18e26f04 	addi	r3,r3,-30276
 40253f8:	18800017 	ldw	r2,0(r3)
 40253fc:	e0bffb15 	stw	r2,-20(fp)
 4025400:	18800117 	ldw	r2,4(r3)
 4025404:	e0bffc15 	stw	r2,-16(fp)
 4025408:	18800217 	ldw	r2,8(r3)
 402540c:	e0bffd15 	stw	r2,-12(fp)
 4025410:	18800317 	ldw	r2,12(r3)
 4025414:	e0bffe15 	stw	r2,-8(fp)
   EXIT_CRIT_SECTION(&memestats);
 4025418:	4025e100 	call	4025e10 <irq_Unmask>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 402541c:	01000084 	movi	r4,2
 4025420:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   ns_printf(pio, "Regular buffer error statistics:\n");
 4025424:	e13fff17 	ldw	r4,-4(fp)
 4025428:	01410174 	movhi	r5,1029
 402542c:	296d1304 	addi	r5,r5,-19380
 4025430:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio, "Bad buffer length %lu, Guard band violations %lu\n",mlocal[BAD_REGULAR_BUF_LEN_ERR],mlocal[GUARD_BAND_VIOLATED_ERR]);
 4025434:	e1bffb17 	ldw	r6,-20(fp)
 4025438:	e1fffc17 	ldw	r7,-16(fp)
 402543c:	e13fff17 	ldw	r4,-4(fp)
 4025440:	01410174 	movhi	r5,1029
 4025444:	296d1c04 	addi	r5,r5,-19344
 4025448:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio, "Multiple frees %lu, Inconsistent location %lu\n",mlocal[MULTIPLE_FREE_ERR],mlocal[INCONSISTENT_LOCATION_ERR]);
 402544c:	e1bffd17 	ldw	r6,-12(fp)
 4025450:	e1fffe17 	ldw	r7,-8(fp)
 4025454:	e13fff17 	ldw	r4,-4(fp)
 4025458:	01410174 	movhi	r5,1029
 402545c:	296d2904 	addi	r5,r5,-19292
 4025460:	40210380 	call	4021038 <ns_printf>

   return 0;
 4025464:	0005883a 	mov	r2,zero
}
 4025468:	e037883a 	mov	sp,fp
 402546c:	dfc00117 	ldw	ra,4(sp)
 4025470:	df000017 	ldw	fp,0(sp)
 4025474:	dec00204 	addi	sp,sp,8
 4025478:	f800283a 	ret

0402547c <getq>:
 * RETURNS: pointer to the first element if any, or 0 if the queue is empty.
 */

void*
getq(queue * q)
{
 402547c:	defffb04 	addi	sp,sp,-20
 4025480:	dfc00415 	stw	ra,16(sp)
 4025484:	df000315 	stw	fp,12(sp)
 4025488:	df000304 	addi	fp,sp,12
 402548c:	e13ffe15 	stw	r4,-8(fp)
   q_elt   temp;        /* temp for result */


   ENTER_CRIT_SECTION(q);     /* shut off ints, save old state */   
 4025490:	4025db40 	call	4025db4 <irq_Mask>

   LOCKNET_CHECK(q);          /* make sure queue is protected */

   if ((temp = q->q_head) == 0)  /* queue empty? */
 4025494:	e0bffe17 	ldw	r2,-8(fp)
 4025498:	10800017 	ldw	r2,0(r2)
 402549c:	e0bffd15 	stw	r2,-12(fp)
 40254a0:	e0bffd17 	ldw	r2,-12(fp)
 40254a4:	1004c03a 	cmpne	r2,r2,zero
 40254a8:	1000031e 	bne	r2,zero,40254b8 <getq+0x3c>
   {
      EXIT_CRIT_SECTION(q);
 40254ac:	4025e100 	call	4025e10 <irq_Unmask>
      return (0);             /* yes, show none */
 40254b0:	e03fff15 	stw	zero,-4(fp)
 40254b4:	00001d06 	br	402552c <getq+0xb0>
   }

   q->q_head = temp->qe_next; /* else unlink */
 40254b8:	e0bffd17 	ldw	r2,-12(fp)
 40254bc:	10c00017 	ldw	r3,0(r2)
 40254c0:	e0bffe17 	ldw	r2,-8(fp)
 40254c4:	10c00015 	stw	r3,0(r2)
   temp->qe_next = 0;         /* avoid dangling pointers */
 40254c8:	e0bffd17 	ldw	r2,-12(fp)
 40254cc:	10000015 	stw	zero,0(r2)
   if (q->q_head == 0)        /* queue empty? */
 40254d0:	e0bffe17 	ldw	r2,-8(fp)
 40254d4:	10800017 	ldw	r2,0(r2)
 40254d8:	1004c03a 	cmpne	r2,r2,zero
 40254dc:	1000021e 	bne	r2,zero,40254e8 <getq+0x6c>
      q->q_tail = 0;          /* yes, update tail pointer too */
 40254e0:	e0bffe17 	ldw	r2,-8(fp)
 40254e4:	10000115 	stw	zero,4(r2)
   q->q_len--;                /* update queue length */
 40254e8:	e0bffe17 	ldw	r2,-8(fp)
 40254ec:	10800217 	ldw	r2,8(r2)
 40254f0:	10ffffc4 	addi	r3,r2,-1
 40254f4:	e0bffe17 	ldw	r2,-8(fp)
 40254f8:	10c00215 	stw	r3,8(r2)
   if (q->q_len < q->q_min)
 40254fc:	e0bffe17 	ldw	r2,-8(fp)
 4025500:	10c00217 	ldw	r3,8(r2)
 4025504:	e0bffe17 	ldw	r2,-8(fp)
 4025508:	10800417 	ldw	r2,16(r2)
 402550c:	1880040e 	bge	r3,r2,4025520 <getq+0xa4>
      q->q_min = q->q_len;
 4025510:	e0bffe17 	ldw	r2,-8(fp)
 4025514:	10c00217 	ldw	r3,8(r2)
 4025518:	e0bffe17 	ldw	r2,-8(fp)
 402551c:	10c00415 	stw	r3,16(r2)

   QUEUE_CHECK(q);         /* make sure queue is not corrupted */

   EXIT_CRIT_SECTION(q);   /* restore caller's int state */
 4025520:	4025e100 	call	4025e10 <irq_Unmask>

   return ((void*)temp);
 4025524:	e0bffd17 	ldw	r2,-12(fp)
 4025528:	e0bfff15 	stw	r2,-4(fp)
 402552c:	e0bfff17 	ldw	r2,-4(fp)
}
 4025530:	e037883a 	mov	sp,fp
 4025534:	dfc00117 	ldw	ra,4(sp)
 4025538:	df000017 	ldw	fp,0(sp)
 402553c:	dec00204 	addi	sp,sp,8
 4025540:	f800283a 	ret

04025544 <putq>:

void
putq(
   queue   *   q,       /* the queue */
   void *   elt)        /* element to delete */
{
 4025544:	defffc04 	addi	sp,sp,-16
 4025548:	dfc00315 	stw	ra,12(sp)
 402554c:	df000215 	stw	fp,8(sp)
 4025550:	df000204 	addi	fp,sp,8
 4025554:	e13ffe15 	stw	r4,-8(fp)
 4025558:	e17fff15 	stw	r5,-4(fp)
   ENTER_CRIT_SECTION(q);
 402555c:	4025db40 	call	4025db4 <irq_Mask>
   LOCKNET_CHECK(q);       /* make sure queue is protected */
   q_addt(q, (qp)elt);     /* use macro to do work */
 4025560:	e0bfff17 	ldw	r2,-4(fp)
 4025564:	10000015 	stw	zero,0(r2)
 4025568:	e0bffe17 	ldw	r2,-8(fp)
 402556c:	10800017 	ldw	r2,0(r2)
 4025570:	1004c03a 	cmpne	r2,r2,zero
 4025574:	1000041e 	bne	r2,zero,4025588 <putq+0x44>
 4025578:	e0ffff17 	ldw	r3,-4(fp)
 402557c:	e0bffe17 	ldw	r2,-8(fp)
 4025580:	10c00015 	stw	r3,0(r2)
 4025584:	00000406 	br	4025598 <putq+0x54>
 4025588:	e0bffe17 	ldw	r2,-8(fp)
 402558c:	10c00117 	ldw	r3,4(r2)
 4025590:	e0bfff17 	ldw	r2,-4(fp)
 4025594:	18800015 	stw	r2,0(r3)
 4025598:	e0ffff17 	ldw	r3,-4(fp)
 402559c:	e0bffe17 	ldw	r2,-8(fp)
 40255a0:	10c00115 	stw	r3,4(r2)
 40255a4:	e0bffe17 	ldw	r2,-8(fp)
 40255a8:	10800217 	ldw	r2,8(r2)
 40255ac:	10c00044 	addi	r3,r2,1
 40255b0:	e0bffe17 	ldw	r2,-8(fp)
 40255b4:	10c00215 	stw	r3,8(r2)
 40255b8:	e0bffe17 	ldw	r2,-8(fp)
 40255bc:	10c00217 	ldw	r3,8(r2)
 40255c0:	e0bffe17 	ldw	r2,-8(fp)
 40255c4:	10800317 	ldw	r2,12(r2)
 40255c8:	10c0040e 	bge	r2,r3,40255dc <putq+0x98>
 40255cc:	e0bffe17 	ldw	r2,-8(fp)
 40255d0:	10c00217 	ldw	r3,8(r2)
 40255d4:	e0bffe17 	ldw	r2,-8(fp)
 40255d8:	10c00315 	stw	r3,12(r2)
   QUEUE_CHECK(q);         /* make sure queue is not corrupted */
   EXIT_CRIT_SECTION(q);   /* restore int state */
 40255dc:	4025e100 	call	4025e10 <irq_Unmask>
}
 40255e0:	e037883a 	mov	sp,fp
 40255e4:	dfc00117 	ldw	ra,4(sp)
 40255e8:	df000017 	ldw	fp,0(sp)
 40255ec:	dec00204 	addi	sp,sp,8
 40255f0:	f800283a 	ret

040255f4 <qdel>:
 * RETURNS: Return pointer to queue member if found, else NULL. 
 */

qp
qdel(queue * q, void * elt)
{
 40255f4:	defff904 	addi	sp,sp,-28
 40255f8:	dfc00615 	stw	ra,24(sp)
 40255fc:	df000515 	stw	fp,20(sp)
 4025600:	df000504 	addi	fp,sp,20
 4025604:	e13ffd15 	stw	r4,-12(fp)
 4025608:	e17ffe15 	stw	r5,-8(fp)
   qp qptr;
   qp qlast;

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
 402560c:	4025db40 	call	4025db4 <irq_Mask>
   qptr = q->q_head;
 4025610:	e0bffd17 	ldw	r2,-12(fp)
 4025614:	10800017 	ldw	r2,0(r2)
 4025618:	e0bffc15 	stw	r2,-16(fp)
   qlast = NULL;
 402561c:	e03ffb15 	stw	zero,-20(fp)
   while (qptr)
 4025620:	00002d06 	br	40256d8 <qdel+0xe4>
   {
      if (qptr == (qp)elt)
 4025624:	e0fffe17 	ldw	r3,-8(fp)
 4025628:	e0bffc17 	ldw	r2,-16(fp)
 402562c:	10c0251e 	bne	r2,r3,40256c4 <qdel+0xd0>
      {
         /* found our item; dequeue it */
         if (qlast)
 4025630:	e0bffb17 	ldw	r2,-20(fp)
 4025634:	1005003a 	cmpeq	r2,r2,zero
 4025638:	1000051e 	bne	r2,zero,4025650 <qdel+0x5c>
            qlast->qe_next = qptr->qe_next;
 402563c:	e0bffc17 	ldw	r2,-16(fp)
 4025640:	10c00017 	ldw	r3,0(r2)
 4025644:	e0bffb17 	ldw	r2,-20(fp)
 4025648:	10c00015 	stw	r3,0(r2)
 402564c:	00000406 	br	4025660 <qdel+0x6c>
         else     /* item was at head of queqe */
            q->q_head = qptr->qe_next;
 4025650:	e0bffc17 	ldw	r2,-16(fp)
 4025654:	10c00017 	ldw	r3,0(r2)
 4025658:	e0bffd17 	ldw	r2,-12(fp)
 402565c:	10c00015 	stw	r3,0(r2)

         /* fix queue tail pointer if needed */
         if (q->q_tail == (qp)elt)
 4025660:	e0bffd17 	ldw	r2,-12(fp)
 4025664:	10c00117 	ldw	r3,4(r2)
 4025668:	e0bffe17 	ldw	r2,-8(fp)
 402566c:	1880031e 	bne	r3,r2,402567c <qdel+0x88>
            q->q_tail = qlast;
 4025670:	e0fffd17 	ldw	r3,-12(fp)
 4025674:	e0bffb17 	ldw	r2,-20(fp)
 4025678:	18800115 	stw	r2,4(r3)

         /* fix queue counters */
         q->q_len--;
 402567c:	e0bffd17 	ldw	r2,-12(fp)
 4025680:	10800217 	ldw	r2,8(r2)
 4025684:	10ffffc4 	addi	r3,r2,-1
 4025688:	e0bffd17 	ldw	r2,-12(fp)
 402568c:	10c00215 	stw	r3,8(r2)
         if (q->q_len < q->q_min)
 4025690:	e0bffd17 	ldw	r2,-12(fp)
 4025694:	10c00217 	ldw	r3,8(r2)
 4025698:	e0bffd17 	ldw	r2,-12(fp)
 402569c:	10800417 	ldw	r2,16(r2)
 40256a0:	1880040e 	bge	r3,r2,40256b4 <qdel+0xc0>
            q->q_min = q->q_len;
 40256a4:	e0bffd17 	ldw	r2,-12(fp)
 40256a8:	10c00217 	ldw	r3,8(r2)
 40256ac:	e0bffd17 	ldw	r2,-12(fp)
 40256b0:	10c00415 	stw	r3,16(r2)
         EXIT_CRIT_SECTION(q);   /* restore int state */
 40256b4:	4025e100 	call	4025e10 <irq_Unmask>
         return (qp)elt;   /* success exit point */
 40256b8:	e0bffe17 	ldw	r2,-8(fp)
 40256bc:	e0bfff15 	stw	r2,-4(fp)
 40256c0:	00000a06 	br	40256ec <qdel+0xf8>
      }
      qlast = qptr;
 40256c4:	e0bffc17 	ldw	r2,-16(fp)
 40256c8:	e0bffb15 	stw	r2,-20(fp)
      qptr = qptr->qe_next;
 40256cc:	e0bffc17 	ldw	r2,-16(fp)
 40256d0:	10800017 	ldw	r2,0(r2)
 40256d4:	e0bffc15 	stw	r2,-16(fp)

   /* search queue for element passed */
   ENTER_CRIT_SECTION(q);
   qptr = q->q_head;
   qlast = NULL;
   while (qptr)
 40256d8:	e0bffc17 	ldw	r2,-16(fp)
 40256dc:	1004c03a 	cmpne	r2,r2,zero
 40256e0:	103fd01e 	bne	r2,zero,4025624 <qdel+0x30>
         return (qp)elt;   /* success exit point */
      }
      qlast = qptr;
      qptr = qptr->qe_next;
   }
   EXIT_CRIT_SECTION(q);   /* restore int state */
 40256e4:	4025e100 	call	4025e10 <irq_Unmask>
   return NULL;   /* item not found in queue */
 40256e8:	e03fff15 	stw	zero,-4(fp)
 40256ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40256f0:	e037883a 	mov	sp,fp
 40256f4:	dfc00117 	ldw	ra,4(sp)
 40256f8:	df000017 	ldw	fp,0(sp)
 40256fc:	dec00204 	addi	sp,sp,8
 4025700:	f800283a 	ret

04025704 <udp_open>:
   ip_addr  fhost,      /* foreign host, 0L for any */
   unshort  fsock,      /* foreign socket, 0 for any */
   unshort  lsock,      /* local socket */
   int (*handler)(PACKET, void*),   /* rcv upcall */
   void *   data)       /* random data, returned on upcalls to aid demuxing */
{
 4025704:	defff304 	addi	sp,sp,-52
 4025708:	dfc00c15 	stw	ra,48(sp)
 402570c:	df000b15 	stw	fp,44(sp)
 4025710:	df000b04 	addi	fp,sp,44
 4025714:	e13ffb15 	stw	r4,-20(fp)
 4025718:	e1fffe15 	stw	r7,-8(fp)
 402571c:	e17ffc0d 	sth	r5,-16(fp)
 4025720:	e1bffd0d 	sth	r6,-12(fp)
/*
 * Altera Niche Stack Nios port modification:
 * cast 'data' to remove build warning
 */
#ifdef   NPDEBUG
   if (NDEBUG & INFOMSG)
 4025724:	00810174 	movhi	r2,1029
 4025728:	1081bf04 	addi	r2,r2,1788
 402572c:	10800017 	ldw	r2,0(r2)
 4025730:	1080010c 	andi	r2,r2,4
 4025734:	1005003a 	cmpeq	r2,r2,zero
 4025738:	1000171e 	bne	r2,zero,4025798 <udp_open+0x94>
      dprintf("udp_open: host %u.%u.%u.%u, lsock %u, fsock %u, foo %04x\n",
 402573c:	e0bffb17 	ldw	r2,-20(fp)
 4025740:	11803fcc 	andi	r6,r2,255
 4025744:	e0bffb17 	ldw	r2,-20(fp)
 4025748:	1004d23a 	srli	r2,r2,8
 402574c:	11c03fcc 	andi	r7,r2,255
 4025750:	e0bffb17 	ldw	r2,-20(fp)
 4025754:	1004d43a 	srli	r2,r2,16
 4025758:	12003fcc 	andi	r8,r2,255
 402575c:	e0bffb17 	ldw	r2,-20(fp)
 4025760:	1006d63a 	srli	r3,r2,24
 4025764:	e13ffd0b 	ldhu	r4,-12(fp)
 4025768:	e17ffc0b 	ldhu	r5,-16(fp)
 402576c:	e0800217 	ldw	r2,8(fp)
 4025770:	d8c00015 	stw	r3,0(sp)
 4025774:	d9000115 	stw	r4,4(sp)
 4025778:	d9400215 	stw	r5,8(sp)
 402577c:	d8800315 	stw	r2,12(sp)
 4025780:	01010174 	movhi	r4,1029
 4025784:	212d3504 	addi	r4,r4,-19244
 4025788:	300b883a 	mov	r5,r6
 402578c:	380d883a 	mov	r6,r7
 4025790:	400f883a 	mov	r7,r8
 4025794:	400207c0 	call	400207c <printf>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 4025798:	0009883a 	mov	r4,zero
 402579c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   ocon = NULL;
 40257a0:	e03ff915 	stw	zero,-28(fp)
   for (con = firstudp; con; con = con->u_next)
 40257a4:	d0a81a17 	ldw	r2,-24472(gp)
 40257a8:	e0bffa15 	stw	r2,-24(fp)
 40257ac:	00002406 	br	4025840 <udp_open+0x13c>
   {
      ocon = con;       /* remember last con in list */
 40257b0:	e0bffa17 	ldw	r2,-24(fp)
 40257b4:	e0bff915 	stw	r2,-28(fp)
      /* we only want to check UDP-over-IPv4 connections */
      if (!(con->u_flags & UDPCF_V4))
         continue;
#endif

      if (con->u_lport == lsock && con->u_fport == fsock &&
 40257b8:	e0bffa17 	ldw	r2,-24(fp)
 40257bc:	1080018b 	ldhu	r2,6(r2)
 40257c0:	10ffffcc 	andi	r3,r2,65535
 40257c4:	e0bffd0b 	ldhu	r2,-12(fp)
 40257c8:	18801a1e 	bne	r3,r2,4025834 <udp_open+0x130>
 40257cc:	e0bffa17 	ldw	r2,-24(fp)
 40257d0:	1080020b 	ldhu	r2,8(r2)
 40257d4:	10ffffcc 	andi	r3,r2,65535
 40257d8:	e0bffc0b 	ldhu	r2,-16(fp)
 40257dc:	1880151e 	bne	r3,r2,4025834 <udp_open+0x130>
 40257e0:	e0bffa17 	ldw	r2,-24(fp)
 40257e4:	10800317 	ldw	r2,12(r2)
 40257e8:	1004c03a 	cmpne	r2,r2,zero
 40257ec:	1000111e 	bne	r2,zero,4025834 <udp_open+0x130>
 40257f0:	e0bffa17 	ldw	r2,-24(fp)
 40257f4:	10c00417 	ldw	r3,16(r2)
 40257f8:	e0bffb17 	ldw	r2,-20(fp)
 40257fc:	18800d1e 	bne	r3,r2,4025834 <udp_open+0x130>
          con->u_lhost == 0 && con->u_fhost == fhost)
      {
#ifdef   NPDEBUG
         if (NDEBUG & (INFOMSG|PROTERR))
 4025800:	00810174 	movhi	r2,1029
 4025804:	1081bf04 	addi	r2,r2,1788
 4025808:	10800017 	ldw	r2,0(r2)
 402580c:	1080050c 	andi	r2,r2,20
 4025810:	1005003a 	cmpeq	r2,r2,zero
 4025814:	1000031e 	bne	r2,zero,4025824 <udp_open+0x120>
            dprintf("UDP: Connection already exists.\n");
 4025818:	01010174 	movhi	r4,1029
 402581c:	212d4404 	addi	r4,r4,-19184
 4025820:	40021940 	call	4002194 <puts>
#endif
         UNLOCK_NET_RESOURCE(NET_RESID);
 4025824:	0009883a 	mov	r4,zero
 4025828:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return(NULL);
 402582c:	e03fff15 	stw	zero,-4(fp)
 4025830:	00003c06 	br	4025924 <udp_open+0x220>
    PUSH_IPADDR(fhost),lsock, fsock, (unsigned int)data);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
   ocon = NULL;
   for (con = firstudp; con; con = con->u_next)
 4025834:	e0bffa17 	ldw	r2,-24(fp)
 4025838:	10800017 	ldw	r2,0(r2)
 402583c:	e0bffa15 	stw	r2,-24(fp)
 4025840:	e0bffa17 	ldw	r2,-24(fp)
 4025844:	1004c03a 	cmpne	r2,r2,zero
 4025848:	103fd91e 	bne	r2,zero,40257b0 <udp_open+0xac>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return(NULL);
      }
   }

   con = (UDPCONN)UC_ALLOC(sizeof(struct udp_conn));
 402584c:	01000804 	movi	r4,32
 4025850:	40265f80 	call	40265f8 <npalloc>
 4025854:	e0bffa15 	stw	r2,-24(fp)
   if (con == 0)
 4025858:	e0bffa17 	ldw	r2,-24(fp)
 402585c:	1004c03a 	cmpne	r2,r2,zero
 4025860:	10000d1e 	bne	r2,zero,4025898 <udp_open+0x194>
   {
#ifdef   NPDEBUG
      if (NDEBUG & INFOMSG)
 4025864:	00810174 	movhi	r2,1029
 4025868:	1081bf04 	addi	r2,r2,1788
 402586c:	10800017 	ldw	r2,0(r2)
 4025870:	1080010c 	andi	r2,r2,4
 4025874:	1005003a 	cmpeq	r2,r2,zero
 4025878:	1000031e 	bne	r2,zero,4025888 <udp_open+0x184>
         dprintf("UDP: Couldn't allocate conn storage.\n");
 402587c:	01010174 	movhi	r4,1029
 4025880:	212d4c04 	addi	r4,r4,-19152
 4025884:	40021940 	call	4002194 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 4025888:	0009883a 	mov	r4,zero
 402588c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return(NULL);
 4025890:	e03fff15 	stw	zero,-4(fp)
 4025894:	00002306 	br	4025924 <udp_open+0x220>
   }

   if (ocon)   /* ocon is end of list */
 4025898:	e0bff917 	ldw	r2,-28(fp)
 402589c:	1005003a 	cmpeq	r2,r2,zero
 40258a0:	1000041e 	bne	r2,zero,40258b4 <udp_open+0x1b0>
      ocon->u_next = con;  /* add new connection to end */
 40258a4:	e0fff917 	ldw	r3,-28(fp)
 40258a8:	e0bffa17 	ldw	r2,-24(fp)
 40258ac:	18800015 	stw	r2,0(r3)
 40258b0:	00000206 	br	40258bc <udp_open+0x1b8>
   else  /* no list, start one */
      firstudp = con;
 40258b4:	e0bffa17 	ldw	r2,-24(fp)
 40258b8:	d0a81a15 	stw	r2,-24472(gp)

   con->u_next = 0;
 40258bc:	e0bffa17 	ldw	r2,-24(fp)
 40258c0:	10000015 	stw	zero,0(r2)

   con->u_lport = lsock;      /* fill in connection info */
 40258c4:	e0fffa17 	ldw	r3,-24(fp)
 40258c8:	e0bffd0b 	ldhu	r2,-12(fp)
 40258cc:	1880018d 	sth	r2,6(r3)
   con->u_fport = fsock;
 40258d0:	e0fffa17 	ldw	r3,-24(fp)
 40258d4:	e0bffc0b 	ldhu	r2,-16(fp)
 40258d8:	1880020d 	sth	r2,8(r3)
   con->u_lhost = 0;
 40258dc:	e0bffa17 	ldw	r2,-24(fp)
 40258e0:	10000315 	stw	zero,12(r2)
   con->u_fhost = fhost;
 40258e4:	e0fffa17 	ldw	r3,-24(fp)
 40258e8:	e0bffb17 	ldw	r2,-20(fp)
 40258ec:	18800415 	stw	r2,16(r3)
   con->u_rcv   = handler;
 40258f0:	e0fffa17 	ldw	r3,-24(fp)
 40258f4:	e0bffe17 	ldw	r2,-8(fp)
 40258f8:	18800515 	stw	r2,20(r3)
   con->u_data  = data;
 40258fc:	e0fffa17 	ldw	r3,-24(fp)
 4025900:	e0800217 	ldw	r2,8(fp)
 4025904:	18800615 	stw	r2,24(r3)
   con->u_flags = UDPCF_V4;
 4025908:	e0fffa17 	ldw	r3,-24(fp)
 402590c:	00800044 	movi	r2,1
 4025910:	1880010d 	sth	r2,4(r3)

   UNLOCK_NET_RESOURCE(NET_RESID);
 4025914:	0009883a 	mov	r4,zero
 4025918:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return(con);
 402591c:	e0bffa17 	ldw	r2,-24(fp)
 4025920:	e0bfff15 	stw	r2,-4(fp)
 4025924:	e0bfff17 	ldw	r2,-4(fp)
}
 4025928:	e037883a 	mov	sp,fp
 402592c:	dfc00117 	ldw	ra,4(sp)
 4025930:	df000017 	ldw	fp,0(sp)
 4025934:	dec00204 	addi	sp,sp,8
 4025938:	f800283a 	ret

0402593c <udp_close>:
 * RETURNS: void
 */

void
udp_close(UDPCONN con)
{
 402593c:	defffb04 	addi	sp,sp,-20
 4025940:	dfc00415 	stw	ra,16(sp)
 4025944:	df000315 	stw	fp,12(sp)
 4025948:	df000304 	addi	fp,sp,12
 402594c:	e13fff15 	stw	r4,-4(fp)
   UDPCONN pcon;
   UDPCONN lcon;

#ifdef NPDEBUG
   if ((con == NULL) || (firstudp == NULL))
 4025950:	e0bfff17 	ldw	r2,-4(fp)
 4025954:	1005003a 	cmpeq	r2,r2,zero
 4025958:	1000031e 	bne	r2,zero,4025968 <udp_close+0x2c>
 402595c:	d0a81a17 	ldw	r2,-24472(gp)
 4025960:	1004c03a 	cmpne	r2,r2,zero
 4025964:	1000021e 	bne	r2,zero,4025970 <udp_close+0x34>
   {
      dtrap(); /* bad programming! */
 4025968:	4025bb40 	call	4025bb4 <dtrap>
      return;
 402596c:	00002706 	br	4025a0c <udp_close+0xd0>
   }
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 4025970:	0009883a 	mov	r4,zero
 4025974:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
 4025978:	e03ffd15 	stw	zero,-12(fp)
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 402597c:	d0a81a17 	ldw	r2,-24472(gp)
 4025980:	e0bffe15 	stw	r2,-8(fp)
 4025984:	00000806 	br	40259a8 <udp_close+0x6c>
   {
      if (pcon == con)  /* found connection to delete */
 4025988:	e0fffe17 	ldw	r3,-8(fp)
 402598c:	e0bfff17 	ldw	r2,-4(fp)
 4025990:	18800826 	beq	r3,r2,40259b4 <udp_close+0x78>
      break;
      lcon = pcon;   /* remember last connection */
 4025994:	e0bffe17 	ldw	r2,-8(fp)
 4025998:	e0bffd15 	stw	r2,-12(fp)
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
   /* find connection in list and unlink it */
   lcon = NULL;   /* clear ptr to last connection */
   for (pcon = firstudp; pcon; pcon = pcon->u_next)
 402599c:	e0bffe17 	ldw	r2,-8(fp)
 40259a0:	10800017 	ldw	r2,0(r2)
 40259a4:	e0bffe15 	stw	r2,-8(fp)
 40259a8:	e0bffe17 	ldw	r2,-8(fp)
 40259ac:	1004c03a 	cmpne	r2,r2,zero
 40259b0:	103ff51e 	bne	r2,zero,4025988 <udp_close+0x4c>
      if (pcon == con)  /* found connection to delete */
      break;
      lcon = pcon;   /* remember last connection */
   }

   if (!pcon)
 40259b4:	e0bffe17 	ldw	r2,-8(fp)
 40259b8:	1004c03a 	cmpne	r2,r2,zero
 40259bc:	1000041e 	bne	r2,zero,40259d0 <udp_close+0x94>
   {
      dtrap(); /* prog error - connenction not in list */
 40259c0:	4025bb40 	call	4025bb4 <dtrap>
      UNLOCK_NET_RESOURCE(NET_RESID);
 40259c4:	0009883a 	mov	r4,zero
 40259c8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return;
 40259cc:	00000f06 	br	4025a0c <udp_close+0xd0>
   }

   if (lcon)   /* in con is not head of list */
 40259d0:	e0bffd17 	ldw	r2,-12(fp)
 40259d4:	1005003a 	cmpeq	r2,r2,zero
 40259d8:	1000051e 	bne	r2,zero,40259f0 <udp_close+0xb4>
      lcon->u_next = con->u_next;   /* unlink */
 40259dc:	e0bfff17 	ldw	r2,-4(fp)
 40259e0:	10c00017 	ldw	r3,0(r2)
 40259e4:	e0bffd17 	ldw	r2,-12(fp)
 40259e8:	10c00015 	stw	r3,0(r2)
 40259ec:	00000306 	br	40259fc <udp_close+0xc0>
   else
      firstudp = con->u_next; /* remove from head */
 40259f0:	e0bfff17 	ldw	r2,-4(fp)
 40259f4:	10800017 	ldw	r2,0(r2)
 40259f8:	d0a81a15 	stw	r2,-24472(gp)

   UC_FREE(con);  /* free memory for structure */
 40259fc:	e13fff17 	ldw	r4,-4(fp)
 4025a00:	40266ec0 	call	40266ec <npfree>
   UNLOCK_NET_RESOURCE(NET_RESID);
 4025a04:	0009883a 	mov	r4,zero
 4025a08:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
}
 4025a0c:	e037883a 	mov	sp,fp
 4025a10:	dfc00117 	ldw	ra,4(sp)
 4025a14:	df000017 	ldw	fp,0(sp)
 4025a18:	dec00204 	addi	sp,sp,8
 4025a1c:	f800283a 	ret

04025a20 <asm_cksum>:
      .text

      .global	  asm_cksum

asm_cksum:
      mov   r2, zero		       /* accumulator = 0 */
 4025a20:	0005883a 	mov	r2,zero
      ble   r5, zero, done	       /* count <= 0 ? */
 4025a24:	0140620e 	bge	zero,r5,4025bb0 <done>

      mov   r6, zero		       /* carry accumulator */
 4025a28:	000d883a 	mov	r6,zero

      andi  r3, r4, 2		       /* ptr 32-bit aligned? */
 4025a2c:	20c0008c 	andi	r3,r4,2
      beq   r3, zero, asm1
 4025a30:	18000326 	beq	r3,zero,4025a40 <asm1>
      ldhu  r2, (r4)		       /* no - process first 16-bits */
 4025a34:	2080000b 	ldhu	r2,0(r4)
      addi  r4, r4, 2
 4025a38:	21000084 	addi	r4,r4,2
      subi  r5, r5, 1
 4025a3c:	297fffc4 	addi	r5,r5,-1

04025a40 <asm1>:
 4025a40:	02c100b4 	movhi	r11,1026
/*
 * adjust ptr by ((count/2) mod 16) * 4 bytes
 * jump to location: loop0 - (count/2 mod 16) * 4 instructions
 */
asm1:
      movia r11, loop0
 4025a44:	5ad6db04 	addi	r11,r11,23404
      andi  r9, r5, 1		       /* r9 = last halfword flag */
 4025a48:	2a40004c 	andi	r9,r5,1
      srai  r5, r5, 1		       /* count = number of words */
 4025a4c:	280bd07a 	srai	r5,r5,1
      andi  r10, r5, 0xf	       /* modulo 16 */
 4025a50:	2a8003cc 	andi	r10,r5,15
      slli  r10, r10, 2		       /*      * 4 bytes per word */
 4025a54:	501490ba 	slli	r10,r10,2
      add   r4, r10, r4		       /* adjust ptr */
 4025a58:	5109883a 	add	r4,r10,r4
      slli  r10, r10, 2		       /*      * 4 instructions per 4 bytes */
 4025a5c:	501490ba 	slli	r10,r10,2
      sub   r11, r11, r10
 4025a60:	5a97c83a 	sub	r11,r11,r10
      jmp   r11
 4025a64:	5800683a 	jmp	r11

04025a68 <loop>:
      
loop:
      addi  r4, r4, 64		       /* increment data pointer */
 4025a68:	21001004 	addi	r4,r4,64

      ldw   r7, -64(r4)
 4025a6c:	21fff017 	ldw	r7,-64(r4)
      add   r2, r7, r2
 4025a70:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025a74:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025a78:	418d883a 	add	r6,r8,r6

      ldw   r7, -60(r4)
 4025a7c:	21fff117 	ldw	r7,-60(r4)
      add   r2, r7, r2
 4025a80:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025a84:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025a88:	418d883a 	add	r6,r8,r6

      ldw   r7, -56(r4)
 4025a8c:	21fff217 	ldw	r7,-56(r4)
      add   r2, r7, r2
 4025a90:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025a94:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025a98:	418d883a 	add	r6,r8,r6

      ldw   r7, -52(r4)
 4025a9c:	21fff317 	ldw	r7,-52(r4)
      add   r2, r7, r2
 4025aa0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025aa4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025aa8:	418d883a 	add	r6,r8,r6

      ldw   r7, -48(r4)
 4025aac:	21fff417 	ldw	r7,-48(r4)
      add   r2, r7, r2
 4025ab0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025ab4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025ab8:	418d883a 	add	r6,r8,r6

      ldw   r7, -44(r4)
 4025abc:	21fff517 	ldw	r7,-44(r4)
      add   r2, r7, r2
 4025ac0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025ac4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025ac8:	418d883a 	add	r6,r8,r6

      ldw   r7, -40(r4)
 4025acc:	21fff617 	ldw	r7,-40(r4)
      add   r2, r7, r2
 4025ad0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025ad4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025ad8:	418d883a 	add	r6,r8,r6

      ldw   r7, -36(r4)
 4025adc:	21fff717 	ldw	r7,-36(r4)
      add   r2, r7, r2
 4025ae0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025ae4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025ae8:	418d883a 	add	r6,r8,r6

      ldw   r7, -32(r4)
 4025aec:	21fff817 	ldw	r7,-32(r4)
      add   r2, r7, r2
 4025af0:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025af4:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025af8:	418d883a 	add	r6,r8,r6

      ldw   r7, -28(r4)
 4025afc:	21fff917 	ldw	r7,-28(r4)
      add   r2, r7, r2
 4025b00:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b04:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b08:	418d883a 	add	r6,r8,r6

      ldw   r7, -24(r4)
 4025b0c:	21fffa17 	ldw	r7,-24(r4)
      add   r2, r7, r2
 4025b10:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b14:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b18:	418d883a 	add	r6,r8,r6

      ldw   r7, -20(r4)
 4025b1c:	21fffb17 	ldw	r7,-20(r4)
      add   r2, r7, r2
 4025b20:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b24:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b28:	418d883a 	add	r6,r8,r6

      ldw   r7, -16(r4)
 4025b2c:	21fffc17 	ldw	r7,-16(r4)
      add   r2, r7, r2
 4025b30:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b34:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b38:	418d883a 	add	r6,r8,r6

      ldw   r7, -12(r4)
 4025b3c:	21fffd17 	ldw	r7,-12(r4)
      add   r2, r7, r2
 4025b40:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b44:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b48:	418d883a 	add	r6,r8,r6

      ldw   r7, -8(r4)
 4025b4c:	21fffe17 	ldw	r7,-8(r4)
      add   r2, r7, r2
 4025b50:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b54:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b58:	418d883a 	add	r6,r8,r6

      ldw   r7, -4(r4)
 4025b5c:	21ffff17 	ldw	r7,-4(r4)
      add   r2, r7, r2
 4025b60:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b64:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b68:	418d883a 	add	r6,r8,r6

04025b6c <loop0>:
loop0:
      subi  r5, r5, 16
 4025b6c:	297ffc04 	addi	r5,r5,-16
      bge   r5, zero, loop
 4025b70:	283fbd0e 	bge	r5,zero,4025a68 <loop>
/*
 * process last halfword (if any)
 */
      beq   r9, zero, fold
 4025b74:	48000426 	beq	r9,zero,4025b88 <fold>
      ldhu  r7, 0(r4)
 4025b78:	21c0000b 	ldhu	r7,0(r4)
      add   r2, r7, r2
 4025b7c:	3885883a 	add	r2,r7,r2
      cmpltu r8, r2, r7
 4025b80:	11d1803a 	cmpltu	r8,r2,r7
      add   r6, r8, r6
 4025b84:	418d883a 	add	r6,r8,r6

04025b88 <fold>:
      
fold:
      srli  r7, r2, 16
 4025b88:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 4025b8c:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add the upper and lower halfwords */
 4025b90:	3885883a 	add	r2,r7,r2
      add   r2, r6, r2		    /* add the carries */
 4025b94:	3085883a 	add	r2,r6,r2
/* the accumulator is 18 bits */
      srli  r7, r2, 16
 4025b98:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 4025b9c:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add 2 carry bits to lower halfword */
 4025ba0:	3885883a 	add	r2,r7,r2
/* the accumulator is 17 bits */
      srli  r7, r2, 16
 4025ba4:	100ed43a 	srli	r7,r2,16
      andi  r2, r2, 0xffff
 4025ba8:	10bfffcc 	andi	r2,r2,65535
      add   r2, r7, r2		    /* add carry to lower halfword */
 4025bac:	3885883a 	add	r2,r7,r2

04025bb0 <done>:

done:
      ret			    		/* r2 = 16-bit checksum */
 4025bb0:	f800283a 	ret

04025bb4 <dtrap>:
void irq_Unmask(void);

/* dtrap() - function to trap to debugger */
void
dtrap(void)
{
 4025bb4:	defffe04 	addi	sp,sp,-8
 4025bb8:	dfc00115 	stw	ra,4(sp)
 4025bbc:	df000015 	stw	fp,0(sp)
 4025bc0:	d839883a 	mov	fp,sp
   printf("dtrap - needs breakpoint\n");
 4025bc4:	01010174 	movhi	r4,1029
 4025bc8:	212d5604 	addi	r4,r4,-19112
 4025bcc:	40021940 	call	4002194 <puts>
}
 4025bd0:	e037883a 	mov	sp,fp
 4025bd4:	dfc00117 	ldw	ra,4(sp)
 4025bd8:	df000017 	ldw	fp,0(sp)
 4025bdc:	dec00204 	addi	sp,sp,8
 4025be0:	f800283a 	ret

04025be4 <kbhit>:

int
kbhit()
{
 4025be4:	defffc04 	addi	sp,sp,-16
 4025be8:	dfc00315 	stw	ra,12(sp)
 4025bec:	df000215 	stw	fp,8(sp)
 4025bf0:	df000204 	addi	fp,sp,8
   static int kbd_init = 0;
   int   kb;
   
   if (!kbd_init)
 4025bf4:	d0a81b17 	ldw	r2,-24468(gp)
 4025bf8:	1004c03a 	cmpne	r2,r2,zero
 4025bfc:	10000c1e 	bne	r2,zero,4025c30 <kbhit+0x4c>
      /* we really should read the flags, OR in O_NONBLOCK, and write
       * the flags back to STDIN, but the NIOS-II/HAL implementation
       * will only let us modify O_NONBLOCK and O_APPEND, so we'll
       * just write the new flag value.
       */
      if (fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK) != 0)
 4025c00:	0009883a 	mov	r4,zero
 4025c04:	01400104 	movi	r5,4
 4025c08:	01900004 	movi	r6,16384
 4025c0c:	40371240 	call	4037124 <fcntl>
 4025c10:	1005003a 	cmpeq	r2,r2,zero
 4025c14:	1000041e 	bne	r2,zero,4025c28 <kbhit+0x44>
      {
         printf("F_SETFL failed.\n");
 4025c18:	01010174 	movhi	r4,1029
 4025c1c:	212d5d04 	addi	r4,r4,-19084
 4025c20:	40021940 	call	4002194 <puts>
         dtrap();
 4025c24:	4025bb40 	call	4025bb4 <dtrap>
      }
      kbd_init = 1; 
 4025c28:	00800044 	movi	r2,1
 4025c2c:	d0a81b15 	stw	r2,-24468(gp)
   }

   /* we have to do a read to see if there is a character available.
    * we save the character, if there was one, to be read later. */
   if (kb_last == EOF)
 4025c30:	d0a03717 	ldw	r2,-32548(gp)
 4025c34:	10bfffd8 	cmpnei	r2,r2,-1
 4025c38:	10000d1e 	bne	r2,zero,4025c70 <kbhit+0x8c>
   {
      kb = getchar();
 4025c3c:	00810174 	movhi	r2,1029
 4025c40:	10b9bf04 	addi	r2,r2,-6404
 4025c44:	10800017 	ldw	r2,0(r2)
 4025c48:	11000117 	ldw	r4,4(r2)
 4025c4c:	4045ebc0 	call	4045ebc <getc>
 4025c50:	e0bffe15 	stw	r2,-8(fp)
      if (kb < 0)       /* any error means no character present */
 4025c54:	e0bffe17 	ldw	r2,-8(fp)
 4025c58:	1004403a 	cmpge	r2,r2,zero
 4025c5c:	1000021e 	bne	r2,zero,4025c68 <kbhit+0x84>
         return (FALSE);
 4025c60:	e03fff15 	stw	zero,-4(fp)
 4025c64:	00000406 	br	4025c78 <kbhit+0x94>
         
      /* there was a character, and we read it. */
      kb_last = kb;
 4025c68:	e0bffe17 	ldw	r2,-8(fp)
 4025c6c:	d0a03715 	stw	r2,-32548(gp)
   }

   return (TRUE);
 4025c70:	00800044 	movi	r2,1
 4025c74:	e0bfff15 	stw	r2,-4(fp)
 4025c78:	e0bfff17 	ldw	r2,-4(fp)
}
 4025c7c:	e037883a 	mov	sp,fp
 4025c80:	dfc00117 	ldw	ra,4(sp)
 4025c84:	df000017 	ldw	fp,0(sp)
 4025c88:	dec00204 	addi	sp,sp,8
 4025c8c:	f800283a 	ret

04025c90 <getch>:

int 
getch()
{
 4025c90:	defffd04 	addi	sp,sp,-12
 4025c94:	dfc00215 	stw	ra,8(sp)
 4025c98:	df000115 	stw	fp,4(sp)
 4025c9c:	df000104 	addi	fp,sp,4
int chr;

   if(kb_last != EOF)
 4025ca0:	d0a03717 	ldw	r2,-32548(gp)
 4025ca4:	10bfffe0 	cmpeqi	r2,r2,-1
 4025ca8:	1000051e 	bne	r2,zero,4025cc0 <getch+0x30>
   {
      chr = kb_last;
 4025cac:	d0a03717 	ldw	r2,-32548(gp)
 4025cb0:	e0bfff15 	stw	r2,-4(fp)
      kb_last = EOF;
 4025cb4:	00bfffc4 	movi	r2,-1
 4025cb8:	d0a03715 	stw	r2,-32548(gp)
 4025cbc:	00000606 	br	4025cd8 <getch+0x48>
   }
   else
      chr = getchar();
 4025cc0:	00810174 	movhi	r2,1029
 4025cc4:	10b9bf04 	addi	r2,r2,-6404
 4025cc8:	10800017 	ldw	r2,0(r2)
 4025ccc:	11000117 	ldw	r4,4(r2)
 4025cd0:	4045ebc0 	call	4045ebc <getc>
 4025cd4:	e0bfff15 	stw	r2,-4(fp)

   return chr;
 4025cd8:	e0bfff17 	ldw	r2,-4(fp)
}
 4025cdc:	e037883a 	mov	sp,fp
 4025ce0:	dfc00117 	ldw	ra,4(sp)
 4025ce4:	df000017 	ldw	fp,0(sp)
 4025ce8:	dec00204 	addi	sp,sp,8
 4025cec:	f800283a 	ret

04025cf0 <clock_init>:
int OS_TPS;
int cticks_factor;
int cticks_initialized = 0;

void clock_init(void)
{
 4025cf0:	deffff04 	addi	sp,sp,-4
 4025cf4:	df000015 	stw	fp,0(sp)
 4025cf8:	d839883a 	mov	fp,sp
   OS_TPS = OS_TICKS_PER_SEC;
 4025cfc:	00801904 	movi	r2,100
 4025d00:	d0a82015 	stw	r2,-24448(gp)
   cticks_factor = 0;
 4025d04:	d0281f15 	stw	zero,-24452(gp)
   cticks = 0;
 4025d08:	00810174 	movhi	r2,1029
 4025d0c:	1081e404 	addi	r2,r2,1936
 4025d10:	10000015 	stw	zero,0(r2)
   cticks_initialized = 1;
 4025d14:	00800044 	movi	r2,1
 4025d18:	d0a81c15 	stw	r2,-24464(gp)
}
 4025d1c:	e037883a 	mov	sp,fp
 4025d20:	df000017 	ldw	fp,0(sp)
 4025d24:	dec00104 	addi	sp,sp,4
 4025d28:	f800283a 	ret

04025d2c <clock_c>:

/* undo effects of clock_init (i.e. restore ISR vector) 
 * NO OP since using RTOS's timer.
 */
void clock_c(void)
{
 4025d2c:	deffff04 	addi	sp,sp,-4
 4025d30:	df000015 	stw	fp,0(sp)
 4025d34:	d839883a 	mov	fp,sp
   /* null */ ;
}
 4025d38:	e037883a 	mov	sp,fp
 4025d3c:	df000017 	ldw	fp,0(sp)
 4025d40:	dec00104 	addi	sp,sp,4
 4025d44:	f800283a 	ret

04025d48 <cticks_hook>:
 * Use the uCOS-II/Altera HAL BSP's timer and scale cticks as per TPS.
 */

void
cticks_hook(void)
{
 4025d48:	deffff04 	addi	sp,sp,-4
 4025d4c:	df000015 	stw	fp,0(sp)
 4025d50:	d839883a 	mov	fp,sp
   if (cticks_initialized) 
 4025d54:	d0a81c17 	ldw	r2,-24464(gp)
 4025d58:	1005003a 	cmpeq	r2,r2,zero
 4025d5c:	1000111e 	bne	r2,zero,4025da4 <cticks_hook+0x5c>
   {
      cticks_factor += TPS;
 4025d60:	d0a81f17 	ldw	r2,-24452(gp)
 4025d64:	10801904 	addi	r2,r2,100
 4025d68:	d0a81f15 	stw	r2,-24452(gp)
      if (cticks_factor >= OS_TPS)
 4025d6c:	d0e81f17 	ldw	r3,-24452(gp)
 4025d70:	d0a82017 	ldw	r2,-24448(gp)
 4025d74:	18800b16 	blt	r3,r2,4025da4 <cticks_hook+0x5c>
      {
         cticks++;
 4025d78:	00810174 	movhi	r2,1029
 4025d7c:	1081e404 	addi	r2,r2,1936
 4025d80:	10800017 	ldw	r2,0(r2)
 4025d84:	10c00044 	addi	r3,r2,1
 4025d88:	00810174 	movhi	r2,1029
 4025d8c:	1081e404 	addi	r2,r2,1936
 4025d90:	10c00015 	stw	r3,0(r2)
         cticks_factor -= OS_TPS;
 4025d94:	d0e81f17 	ldw	r3,-24452(gp)
 4025d98:	d0a82017 	ldw	r2,-24448(gp)
 4025d9c:	1885c83a 	sub	r2,r3,r2
 4025da0:	d0a81f15 	stw	r2,-24452(gp)
#ifdef USE_LCD
         update_display();
#endif
      }
   }
}
 4025da4:	e037883a 	mov	sp,fp
 4025da8:	df000017 	ldw	fp,0(sp)
 4025dac:	dec00104 	addi	sp,sp,4
 4025db0:	f800283a 	ret

04025db4 <irq_Mask>:
 * ENTER_CRIT_SECTION() and enable them in EXIT_CRIT_SECTION()
 * because calls to ENTER_CRIT_SECTION() can be nested."
 */
void
irq_Mask(void)
{
 4025db4:	defffd04 	addi	sp,sp,-12
 4025db8:	df000215 	stw	fp,8(sp)
 4025dbc:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025dc0:	0005303a 	rdctl	r2,status
 4025dc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4025dc8:	e0fffe17 	ldw	r3,-8(fp)
 4025dcc:	00bfff84 	movi	r2,-2
 4025dd0:	1884703a 	and	r2,r3,r2
 4025dd4:	1001703a 	wrctl	status,r2
  
  return context;
 4025dd8:	e0bffe17 	ldw	r2,-8(fp)
   alt_irq_context  local_cpu_statusreg;

   local_cpu_statusreg = alt_irq_disable_all();
 4025ddc:	e0bfff15 	stw	r2,-4(fp)
	
   if (++irq_level == 1)
 4025de0:	d0a81d17 	ldw	r2,-24460(gp)
 4025de4:	10800044 	addi	r2,r2,1
 4025de8:	d0a81d15 	stw	r2,-24460(gp)
 4025dec:	d0a81d17 	ldw	r2,-24460(gp)
 4025df0:	10800058 	cmpnei	r2,r2,1
 4025df4:	1000021e 	bne	r2,zero,4025e00 <irq_Mask+0x4c>
   {
      cpu_statusreg = local_cpu_statusreg;
 4025df8:	e0bfff17 	ldw	r2,-4(fp)
 4025dfc:	d0a81e15 	stw	r2,-24456(gp)
   }
}
 4025e00:	e037883a 	mov	sp,fp
 4025e04:	df000017 	ldw	fp,0(sp)
 4025e08:	dec00104 	addi	sp,sp,4
 4025e0c:	f800283a 	ret

04025e10 <irq_Unmask>:


/* Re-Enable Interrupts */
void
irq_Unmask(void)
{
 4025e10:	defffe04 	addi	sp,sp,-8
 4025e14:	df000115 	stw	fp,4(sp)
 4025e18:	df000104 	addi	fp,sp,4
   if (--irq_level == 0)
 4025e1c:	d0a81d17 	ldw	r2,-24460(gp)
 4025e20:	10bfffc4 	addi	r2,r2,-1
 4025e24:	d0a81d15 	stw	r2,-24460(gp)
 4025e28:	d0a81d17 	ldw	r2,-24460(gp)
 4025e2c:	1004c03a 	cmpne	r2,r2,zero
 4025e30:	1000041e 	bne	r2,zero,4025e44 <irq_Unmask+0x34>
   {
      alt_irq_enable_all(cpu_statusreg);
 4025e34:	d0a81e17 	ldw	r2,-24456(gp)
 4025e38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4025e3c:	e0bfff17 	ldw	r2,-4(fp)
 4025e40:	1001703a 	wrctl	status,r2
   }
}
 4025e44:	e037883a 	mov	sp,fp
 4025e48:	df000017 	ldw	fp,0(sp)
 4025e4c:	dec00104 	addi	sp,sp,4
 4025e50:	f800283a 	ret

04025e54 <LOCK_NET_RESOURCE>:
extern void irq_Mask(void);
extern void irq_Unmask(void);

void
LOCK_NET_RESOURCE(int resid)
{
 4025e54:	defffb04 	addi	sp,sp,-20
 4025e58:	dfc00415 	stw	ra,16(sp)
 4025e5c:	df000315 	stw	fp,12(sp)
 4025e60:	df000304 	addi	fp,sp,12
 4025e64:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
 4025e68:	e03ffe05 	stb	zero,-8(fp)
   int   errct = 0;
 4025e6c:	e03ffd15 	stw	zero,-12(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
 4025e70:	e0bfff17 	ldw	r2,-4(fp)
 4025e74:	1004803a 	cmplt	r2,r2,zero
 4025e78:	1000201e 	bne	r2,zero,4025efc <LOCK_NET_RESOURCE+0xa8>
 4025e7c:	e0bfff17 	ldw	r2,-4(fp)
 4025e80:	10800408 	cmpgei	r2,r2,16
 4025e84:	10001d1e 	bne	r2,zero,4025efc <LOCK_NET_RESOURCE+0xa8>
   {
      do
      {
         OSSemPend(resid_semaphore[resid], 0, &error);
 4025e88:	e0bfff17 	ldw	r2,-4(fp)
 4025e8c:	00c101b4 	movhi	r3,1030
 4025e90:	18e32f04 	addi	r3,r3,-29508
 4025e94:	1085883a 	add	r2,r2,r2
 4025e98:	1085883a 	add	r2,r2,r2
 4025e9c:	10c5883a 	add	r2,r2,r3
 4025ea0:	11000017 	ldw	r4,0(r2)
 4025ea4:	e1bffe04 	addi	r6,fp,-8
 4025ea8:	000b883a 	mov	r5,zero
 4025eac:	40126f00 	call	40126f0 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 4025eb0:	e0bffe03 	ldbu	r2,-8(fp)
 4025eb4:	10803fcc 	andi	r2,r2,255
 4025eb8:	10800298 	cmpnei	r2,r2,10
 4025ebc:	10000a1e 	bne	r2,zero,4025ee8 <LOCK_NET_RESOURCE+0x94>
 4025ec0:	e0bffd17 	ldw	r2,-12(fp)
 4025ec4:	10800044 	addi	r2,r2,1
 4025ec8:	e0bffd15 	stw	r2,-12(fp)
 4025ecc:	e0bffd17 	ldw	r2,-12(fp)
 4025ed0:	1080fa50 	cmplti	r2,r2,1001
 4025ed4:	1000041e 	bne	r2,zero,4025ee8 <LOCK_NET_RESOURCE+0x94>
         {
            panic("lock NET");   /* fatal */
 4025ed8:	01010174 	movhi	r4,1029
 4025edc:	212d6104 	addi	r4,r4,-19068
 4025ee0:	4020e100 	call	4020e10 <panic>
            return;
 4025ee4:	00000606 	br	4025f00 <LOCK_NET_RESOURCE+0xac>
         }
      } while (error == 10);
 4025ee8:	e0bffe03 	ldbu	r2,-8(fp)
 4025eec:	10803fcc 	andi	r2,r2,255
 4025ef0:	108002a0 	cmpeqi	r2,r2,10
 4025ef4:	103fe41e 	bne	r2,zero,4025e88 <LOCK_NET_RESOURCE+0x34>
LOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;
   int   errct = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
 4025ef8:	00000106 	br	4025f00 <LOCK_NET_RESOURCE+0xac>
            return;
         }
      } while (error == 10);
   }
   else
      dtrap();
 4025efc:	4025bb40 	call	4025bb4 <dtrap>
}
 4025f00:	e037883a 	mov	sp,fp
 4025f04:	dfc00117 	ldw	ra,4(sp)
 4025f08:	df000017 	ldw	fp,0(sp)
 4025f0c:	dec00204 	addi	sp,sp,8
 4025f10:	f800283a 	ret

04025f14 <UNLOCK_NET_RESOURCE>:

void
UNLOCK_NET_RESOURCE(int resid)
{
 4025f14:	defffc04 	addi	sp,sp,-16
 4025f18:	dfc00315 	stw	ra,12(sp)
 4025f1c:	df000215 	stw	fp,8(sp)
 4025f20:	df000204 	addi	fp,sp,8
 4025f24:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
 4025f28:	e03ffe05 	stb	zero,-8(fp)

   if ((0 <= resid) && (resid <= MAX_RESID))
 4025f2c:	e0bfff17 	ldw	r2,-4(fp)
 4025f30:	1004803a 	cmplt	r2,r2,zero
 4025f34:	1000131e 	bne	r2,zero,4025f84 <UNLOCK_NET_RESOURCE+0x70>
 4025f38:	e0bfff17 	ldw	r2,-4(fp)
 4025f3c:	10800408 	cmpgei	r2,r2,16
 4025f40:	1000101e 	bne	r2,zero,4025f84 <UNLOCK_NET_RESOURCE+0x70>
   {
      error = OSSemPost(resid_semaphore[resid]);
 4025f44:	e0bfff17 	ldw	r2,-4(fp)
 4025f48:	00c101b4 	movhi	r3,1030
 4025f4c:	18e32f04 	addi	r3,r3,-29508
 4025f50:	1085883a 	add	r2,r2,r2
 4025f54:	1085883a 	add	r2,r2,r2
 4025f58:	10c5883a 	add	r2,r2,r3
 4025f5c:	11000017 	ldw	r4,0(r2)
 4025f60:	4012ae80 	call	4012ae8 <OSSemPost>
 4025f64:	e0bffe05 	stb	r2,-8(fp)
      if (error != OS_NO_ERR)
 4025f68:	e0bffe03 	ldbu	r2,-8(fp)
 4025f6c:	1005003a 	cmpeq	r2,r2,zero
 4025f70:	1000051e 	bne	r2,zero,4025f88 <UNLOCK_NET_RESOURCE+0x74>
      {
         panic("unlock NET");
 4025f74:	01010174 	movhi	r4,1029
 4025f78:	212d6404 	addi	r4,r4,-19056
 4025f7c:	4020e100 	call	4020e10 <panic>
void
UNLOCK_NET_RESOURCE(int resid)
{
   INT8U error = 0;

   if ((0 <= resid) && (resid <= MAX_RESID))
 4025f80:	00000106 	br	4025f88 <UNLOCK_NET_RESOURCE+0x74>
      {
         panic("unlock NET");
      }
   }
   else
      dtrap();
 4025f84:	4025bb40 	call	4025bb4 <dtrap>
}
 4025f88:	e037883a 	mov	sp,fp
 4025f8c:	dfc00117 	ldw	ra,4(sp)
 4025f90:	df000017 	ldw	fp,0(sp)
 4025f94:	dec00204 	addi	sp,sp,8
 4025f98:	f800283a 	ret

04025f9c <TK_NEWTASK>:
extern long     nettick_wakes;


int
TK_NEWTASK(struct inet_taskinfo * nettask)
{
 4025f9c:	deffed04 	addi	sp,sp,-76
 4025fa0:	dfc01215 	stw	ra,72(sp)
 4025fa4:	df001115 	stw	fp,68(sp)
 4025fa8:	df001104 	addi	fp,sp,68
 4025fac:	e13ffe15 	stw	r4,-8(fp)
   INT8U    error;
   OS_STK * stack;

   stack = (OS_STK*)npalloc(nettask->stacksize);
 4025fb0:	e0bffe17 	ldw	r2,-8(fp)
 4025fb4:	10800417 	ldw	r2,16(r2)
 4025fb8:	1009883a 	mov	r4,r2
 4025fbc:	40265f80 	call	40265f8 <npalloc>
 4025fc0:	e0bff415 	stw	r2,-48(fp)
   if(!stack)
 4025fc4:	e0bff417 	ldw	r2,-48(fp)
 4025fc8:	1004c03a 	cmpne	r2,r2,zero
 4025fcc:	1000031e 	bne	r2,zero,4025fdc <TK_NEWTASK+0x40>
      panic("stack alloc");
 4025fd0:	01010174 	movhi	r4,1029
 4025fd4:	212d6704 	addi	r4,r4,-19044
 4025fd8:	4020e100 	call	4020e10 <panic>

#if OS_TASK_CREATE_EXT_EN > 0
   error = OSTaskCreateExt(
 4025fdc:	e0bffe17 	ldw	r2,-8(fp)
 4025fe0:	11400217 	ldw	r5,8(r2)
 4025fe4:	e0bffe17 	ldw	r2,-8(fp)
 4025fe8:	10800417 	ldw	r2,16(r2)
 4025fec:	1004d0ba 	srli	r2,r2,2
 4025ff0:	1085883a 	add	r2,r2,r2
 4025ff4:	1085883a 	add	r2,r2,r2
 4025ff8:	1007883a 	mov	r3,r2
 4025ffc:	e0bff417 	ldw	r2,-48(fp)
 4026000:	1885883a 	add	r2,r3,r2
 4026004:	11bfff04 	addi	r6,r2,-4
 4026008:	e0bffe17 	ldw	r2,-8(fp)
 402600c:	10800317 	ldw	r2,12(r2)
 4026010:	11c03fcc 	andi	r7,r2,255
 4026014:	e0bffe17 	ldw	r2,-8(fp)
 4026018:	10800317 	ldw	r2,12(r2)
 402601c:	10ffffcc 	andi	r3,r2,65535
 4026020:	e0bffe17 	ldw	r2,-8(fp)
 4026024:	10800417 	ldw	r2,16(r2)
 4026028:	1008d0ba 	srli	r4,r2,2
 402602c:	d8c00015 	stw	r3,0(sp)
 4026030:	e0bff417 	ldw	r2,-48(fp)
 4026034:	d8800115 	stw	r2,4(sp)
 4026038:	d9000215 	stw	r4,8(sp)
 402603c:	d8000315 	stw	zero,12(sp)
 4026040:	008000c4 	movi	r2,3
 4026044:	d8800415 	stw	r2,16(sp)
 4026048:	2809883a 	mov	r4,r5
 402604c:	000b883a 	mov	r5,zero
 4026050:	401358c0 	call	401358c <OSTaskCreateExt>
 4026054:	e0bff505 	stb	r2,-44(fp)
      stack + (nettask->stacksize/sizeof(OS_STK)) - 1,
      nettask->priority);
#endif
   /* If we go here, then there's another task using our priority */
   /* Tell the user and exit with an error */
   if (error == OS_PRIO_EXIST)
 4026058:	e0bff503 	ldbu	r2,-44(fp)
 402605c:	10803fcc 	andi	r2,r2,255
 4026060:	10800a18 	cmpnei	r2,r2,40
 4026064:	1000161e 	bne	r2,zero,40260c0 <TK_NEWTASK+0x124>
   { 
     char curr_task[OS_TASK_NAME_SIZE];
     INT8U err;
     OSTaskNameGet(nettask->priority, curr_task, &err);
 4026068:	e0bffe17 	ldw	r2,-8(fp)
 402606c:	10800317 	ldw	r2,12(r2)
 4026070:	11003fcc 	andi	r4,r2,255
 4026074:	e17ff584 	addi	r5,fp,-42
 4026078:	e1bff544 	addi	r6,fp,-43
 402607c:	4013d080 	call	4013d08 <OSTaskNameGet>
     curr_task[OS_TASK_NAME_SIZE-1]=0;
 4026080:	e03ffd45 	stb	zero,-11(fp)
    
     printf("Priority requested for task \"%s\" (Prio:%d) conflicts with "\
 4026084:	e0bffe17 	ldw	r2,-8(fp)
 4026088:	11400117 	ldw	r5,4(r2)
 402608c:	e0bffe17 	ldw	r2,-8(fp)
 4026090:	11800317 	ldw	r6,12(r2)
 4026094:	e0bffe17 	ldw	r2,-8(fp)
 4026098:	10800317 	ldw	r2,12(r2)
 402609c:	e1fff584 	addi	r7,fp,-42
 40260a0:	d8800015 	stw	r2,0(sp)
 40260a4:	01010174 	movhi	r4,1029
 40260a8:	212d6a04 	addi	r4,r4,-19032
 40260ac:	400207c0 	call	400207c <printf>
            "already running task \"%s\" (Prio: %d)\n",
             nettask->name, nettask->priority, curr_task, nettask->priority);
             
     printf("You may wish to check your task priority settings in "\
 40260b0:	01010174 	movhi	r4,1029
 40260b4:	212d8204 	addi	r4,r4,-18936
 40260b8:	40021940 	call	4002194 <puts>
 40260bc:	00001e06 	br	4026138 <TK_NEWTASK+0x19c>
            "\"<bsp path>\\iniche\\src\\h\\nios2\\ipport.h\" against "\
            "the priority settings in your application and recompile.\n\n");
   }
   else if (error == OS_PRIO_INVALID)
 40260c0:	e0bff503 	ldbu	r2,-44(fp)
 40260c4:	10803fcc 	andi	r2,r2,255
 40260c8:	10800a98 	cmpnei	r2,r2,42
 40260cc:	10000c1e 	bne	r2,zero,4026100 <TK_NEWTASK+0x164>
   {
     printf("Priority requested for task \"%s\" (Prio:%d) exceeds "\
 40260d0:	e0bffe17 	ldw	r2,-8(fp)
 40260d4:	11400117 	ldw	r5,4(r2)
 40260d8:	e0bffe17 	ldw	r2,-8(fp)
 40260dc:	11800317 	ldw	r6,12(r2)
 40260e0:	01010174 	movhi	r4,1029
 40260e4:	212daa04 	addi	r4,r4,-18776
 40260e8:	01c00504 	movi	r7,20
 40260ec:	400207c0 	call	400207c <printf>
            "available priority levels in the system (OS_LOWEST_PRIO = %d)\n\n",
             nettask->name, nettask->priority, OS_LOWEST_PRIO);
             
     printf("Please modify the tasks priority level, or modify the "\
 40260f0:	01010174 	movhi	r4,1029
 40260f4:	212dc704 	addi	r4,r4,-18660
 40260f8:	40021940 	call	4002194 <puts>
 40260fc:	00000e06 	br	4026138 <TK_NEWTASK+0x19c>
            "\"Lowest assignable priority\" setting in the MicroC/OS-II "\
            "component\n");
   }
   else if (error != OS_NO_ERR)
 4026100:	e0bff503 	ldbu	r2,-44(fp)
 4026104:	10803fcc 	andi	r2,r2,255
 4026108:	1005003a 	cmpeq	r2,r2,zero
 402610c:	10000a1e 	bne	r2,zero,4026138 <TK_NEWTASK+0x19c>
   {                          /* All other errors are fatal */
      printf("Task create error /(MicroC/OS-II error code:%d/) on %s\n",
 4026110:	e0bff503 	ldbu	r2,-44(fp)
 4026114:	11403fcc 	andi	r5,r2,255
 4026118:	e0bffe17 	ldw	r2,-8(fp)
 402611c:	11800117 	ldw	r6,4(r2)
 4026120:	01010174 	movhi	r4,1029
 4026124:	212de604 	addi	r4,r4,-18536
 4026128:	400207c0 	call	400207c <printf>
             error, nettask->name);
      return (-1);
 402612c:	00bfffc4 	movi	r2,-1
 4026130:	e0bfff15 	stw	r2,-4(fp)
 4026134:	00001806 	br	4026198 <TK_NEWTASK+0x1fc>
   }

   /* Include the task name, so that uc/osII (os aware) debuggers can
    * display it.
    */
   OSTaskNameSet(nettask->priority, &nettask->name[0], &error);
 4026138:	e0bffe17 	ldw	r2,-8(fp)
 402613c:	10800317 	ldw	r2,12(r2)
 4026140:	11003fcc 	andi	r4,r2,255
 4026144:	e0bffe17 	ldw	r2,-8(fp)
 4026148:	10800117 	ldw	r2,4(r2)
 402614c:	100b883a 	mov	r5,r2
 4026150:	e1bff504 	addi	r6,fp,-44
 4026154:	4013ec00 	call	4013ec0 <OSTaskNameSet>

   nettask->stackbase = (char*)stack;
 4026158:	e0fff417 	ldw	r3,-48(fp)
 402615c:	e0bffe17 	ldw	r2,-8(fp)
 4026160:	10c00515 	stw	r3,20(r2)
   *nettask->tk_ptr = (INT8U)nettask->priority;  
 4026164:	e0bffe17 	ldw	r2,-8(fp)
 4026168:	10c00017 	ldw	r3,0(r2)
 402616c:	e0bffe17 	ldw	r2,-8(fp)
 4026170:	10800317 	ldw	r2,12(r2)
 4026174:	18800005 	stb	r2,0(r3)

   printf("Created \"%s\" task (Prio: %d)\n",
 4026178:	e0bffe17 	ldw	r2,-8(fp)
 402617c:	11400117 	ldw	r5,4(r2)
 4026180:	e0bffe17 	ldw	r2,-8(fp)
 4026184:	11800317 	ldw	r6,12(r2)
 4026188:	01010174 	movhi	r4,1029
 402618c:	212df404 	addi	r4,r4,-18480
 4026190:	400207c0 	call	400207c <printf>
         (char *)nettask->name, nettask->priority);

   return (0);
 4026194:	e03fff15 	stw	zero,-4(fp)
 4026198:	e0bfff17 	ldw	r2,-4(fp)
}
 402619c:	e037883a 	mov	sp,fp
 40261a0:	dfc00117 	ldw	ra,4(sp)
 40261a4:	df000017 	ldw	fp,0(sp)
 40261a8:	dec00204 	addi	sp,sp,8
 40261ac:	f800283a 	ret

040261b0 <wait_app_sem>:
 * event (e.g., configuration inputs from user, initiation of a new session,
 * or a periodic timeout notification.
 */
void
wait_app_sem(unsigned long semid)
{
 40261b0:	defffb04 	addi	sp,sp,-20
 40261b4:	dfc00415 	stw	ra,16(sp)
 40261b8:	df000315 	stw	fp,12(sp)
 40261bc:	df000304 	addi	fp,sp,12
 40261c0:	e13fff15 	stw	r4,-4(fp)
   INT8U error = 0;
 40261c4:	e03ffe05 	stb	zero,-8(fp)
   int   errct = 0;
 40261c8:	e03ffd15 	stw	zero,-12(fp)

   if ((0 <= semid) && (semid <= MAX_SEMID))
 40261cc:	e0bfff17 	ldw	r2,-4(fp)
 40261d0:	108001a8 	cmpgeui	r2,r2,6
 40261d4:	10001d1e 	bne	r2,zero,402624c <wait_app_sem+0x9c>
   {
      do
      {
         OSSemPend(app_semaphore[semid], 0, &error);
 40261d8:	e0bfff17 	ldw	r2,-4(fp)
 40261dc:	00c101b4 	movhi	r3,1030
 40261e0:	18e33f04 	addi	r3,r3,-29444
 40261e4:	1085883a 	add	r2,r2,r2
 40261e8:	1085883a 	add	r2,r2,r2
 40261ec:	10c5883a 	add	r2,r2,r3
 40261f0:	11000017 	ldw	r4,0(r2)
 40261f4:	e1bffe04 	addi	r6,fp,-8
 40261f8:	000b883a 	mov	r5,zero
 40261fc:	40126f00 	call	40126f0 <OSSemPend>
         /* 
          * Sometimes we get a "timeout" error even though we passed a zero
          * to indicate we'll wait forever. When this happens, try again:
          */
         if ((error == 10) && (++errct > 1000))
 4026200:	e0bffe03 	ldbu	r2,-8(fp)
 4026204:	10803fcc 	andi	r2,r2,255
 4026208:	10800298 	cmpnei	r2,r2,10
 402620c:	10000a1e 	bne	r2,zero,4026238 <wait_app_sem+0x88>
 4026210:	e0bffd17 	ldw	r2,-12(fp)
 4026214:	10800044 	addi	r2,r2,1
 4026218:	e0bffd15 	stw	r2,-12(fp)
 402621c:	e0bffd17 	ldw	r2,-12(fp)
 4026220:	1080fa50 	cmplti	r2,r2,1001
 4026224:	1000041e 	bne	r2,zero,4026238 <wait_app_sem+0x88>
         {
            panic("lock NET");   /* fatal */
 4026228:	01010174 	movhi	r4,1029
 402622c:	212d6104 	addi	r4,r4,-19068
 4026230:	4020e100 	call	4020e10 <panic>
            return;
 4026234:	00000606 	br	4026250 <wait_app_sem+0xa0>
         }
      } while (error == 10);
 4026238:	e0bffe03 	ldbu	r2,-8(fp)
 402623c:	10803fcc 	andi	r2,r2,255
 4026240:	108002a0 	cmpeqi	r2,r2,10
 4026244:	103fe41e 	bne	r2,zero,40261d8 <wait_app_sem+0x28>
 4026248:	00000106 	br	4026250 <wait_app_sem+0xa0>
   }
   else
      dtrap();
 402624c:	4025bb40 	call	4025bb4 <dtrap>
}
 4026250:	e037883a 	mov	sp,fp
 4026254:	dfc00117 	ldw	ra,4(sp)
 4026258:	df000017 	ldw	fp,0(sp)
 402625c:	dec00204 	addi	sp,sp,8
 4026260:	f800283a 	ret

04026264 <post_app_sem>:
 * notification. It signals the corresponding application event.
 */

void
post_app_sem(unsigned long semid)
{
 4026264:	defffc04 	addi	sp,sp,-16
 4026268:	dfc00315 	stw	ra,12(sp)
 402626c:	df000215 	stw	fp,8(sp)
 4026270:	df000204 	addi	fp,sp,8
 4026274:	e13fff15 	stw	r4,-4(fp)
   INT8U error;

   if ((0 <= semid) && (semid <= MAX_SEMID))
 4026278:	e0bfff17 	ldw	r2,-4(fp)
 402627c:	108001a8 	cmpgeui	r2,r2,6
 4026280:	1000101e 	bne	r2,zero,40262c4 <post_app_sem+0x60>
   {
      error = OSSemPost(app_semaphore[semid]);
 4026284:	e0bfff17 	ldw	r2,-4(fp)
 4026288:	00c101b4 	movhi	r3,1030
 402628c:	18e33f04 	addi	r3,r3,-29444
 4026290:	1085883a 	add	r2,r2,r2
 4026294:	1085883a 	add	r2,r2,r2
 4026298:	10c5883a 	add	r2,r2,r3
 402629c:	11000017 	ldw	r4,0(r2)
 40262a0:	4012ae80 	call	4012ae8 <OSSemPost>
 40262a4:	e0bffe05 	stb	r2,-8(fp)
      if (error != OS_NO_ERR)
 40262a8:	e0bffe03 	ldbu	r2,-8(fp)
 40262ac:	1005003a 	cmpeq	r2,r2,zero
 40262b0:	1000051e 	bne	r2,zero,40262c8 <post_app_sem+0x64>
      {
         panic("unlock NET");
 40262b4:	01010174 	movhi	r4,1029
 40262b8:	212d6404 	addi	r4,r4,-19056
 40262bc:	4020e100 	call	4020e10 <panic>
 40262c0:	00000106 	br	40262c8 <post_app_sem+0x64>
      }
   }
   else
      dtrap();
 40262c4:	4025bb40 	call	4025bb4 <dtrap>
}
 40262c8:	e037883a 	mov	sp,fp
 40262cc:	dfc00117 	ldw	ra,4(sp)
 40262d0:	df000017 	ldw	fp,0(sp)
 40262d4:	dec00204 	addi	sp,sp,8
 40262d8:	f800283a 	ret

040262dc <alt_iniche_init>:
#ifndef SUPERLOOP

extern OS_EVENT *resid_semaphore[MAX_RESID+1];

void alt_iniche_init(void)
{
 40262dc:	defffc04 	addi	sp,sp,-16
 40262e0:	dfc00315 	stw	ra,12(sp)
 40262e4:	df000215 	stw	fp,8(sp)
 40262e8:	dc000115 	stw	r16,4(sp)
 40262ec:	df000104 	addi	fp,sp,4
   int i;

   /* initialize the npalloc() heap semaphore */
   mheap_sem_ptr = OSSemCreate(1);
 40262f0:	01000044 	movi	r4,1
 40262f4:	401233c0 	call	401233c <OSSemCreate>
 40262f8:	d0a82815 	stw	r2,-24416(gp)
   if (!mheap_sem_ptr)
 40262fc:	d0a82817 	ldw	r2,-24416(gp)
 4026300:	1004c03a 	cmpne	r2,r2,zero
 4026304:	1000031e 	bne	r2,zero,4026314 <alt_iniche_init+0x38>
      panic("mheap_sem_ptr create err"); 
 4026308:	01010174 	movhi	r4,1029
 402630c:	212dfc04 	addi	r4,r4,-18448
 4026310:	4020e100 	call	4020e10 <panic>

   rcvdq_sem_ptr = OSSemCreate(0);
 4026314:	0009883a 	mov	r4,zero
 4026318:	401233c0 	call	401233c <OSSemCreate>
 402631c:	d0a82915 	stw	r2,-24412(gp)
   if (!rcvdq_sem_ptr)
 4026320:	d0a82917 	ldw	r2,-24412(gp)
 4026324:	1004c03a 	cmpne	r2,r2,zero
 4026328:	1000031e 	bne	r2,zero,4026338 <alt_iniche_init+0x5c>
      panic("rcvdq_sem_ptr create err"); 
 402632c:	01010174 	movhi	r4,1029
 4026330:	212e0304 	addi	r4,r4,-18420
 4026334:	4020e100 	call	4020e10 <panic>

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
 4026338:	e03fff15 	stw	zero,-4(fp)
 402633c:	00001906 	br	40263a4 <alt_iniche_init+0xc8>
   {
      resid_semaphore[i] = OSSemCreate(1);
 4026340:	e43fff17 	ldw	r16,-4(fp)
 4026344:	01000044 	movi	r4,1
 4026348:	401233c0 	call	401233c <OSSemCreate>
 402634c:	1009883a 	mov	r4,r2
 4026350:	00c101b4 	movhi	r3,1030
 4026354:	18e32f04 	addi	r3,r3,-29508
 4026358:	8405883a 	add	r2,r16,r16
 402635c:	1085883a 	add	r2,r2,r2
 4026360:	10c5883a 	add	r2,r2,r3
 4026364:	11000015 	stw	r4,0(r2)
      if (!resid_semaphore[i])
 4026368:	e0bfff17 	ldw	r2,-4(fp)
 402636c:	00c101b4 	movhi	r3,1030
 4026370:	18e32f04 	addi	r3,r3,-29508
 4026374:	1085883a 	add	r2,r2,r2
 4026378:	1085883a 	add	r2,r2,r2
 402637c:	10c5883a 	add	r2,r2,r3
 4026380:	10800017 	ldw	r2,0(r2)
 4026384:	1004c03a 	cmpne	r2,r2,zero
 4026388:	1000031e 	bne	r2,zero,4026398 <alt_iniche_init+0xbc>
         panic("resid_semaphore create err");  
 402638c:	01010174 	movhi	r4,1029
 4026390:	212e0a04 	addi	r4,r4,-18392
 4026394:	4020e100 	call	4020e10 <panic>
   rcvdq_sem_ptr = OSSemCreate(0);
   if (!rcvdq_sem_ptr)
      panic("rcvdq_sem_ptr create err"); 

#ifdef OS_PREEMPTIVE
   for (i = 0; i <= MAX_RESID; i++)
 4026398:	e0bfff17 	ldw	r2,-4(fp)
 402639c:	10800044 	addi	r2,r2,1
 40263a0:	e0bfff15 	stw	r2,-4(fp)
 40263a4:	e0bfff17 	ldw	r2,-4(fp)
 40263a8:	10800410 	cmplti	r2,r2,16
 40263ac:	103fe41e 	bne	r2,zero,4026340 <alt_iniche_init+0x64>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
 40263b0:	e03fff15 	stw	zero,-4(fp)
 40263b4:	00001906 	br	402641c <alt_iniche_init+0x140>
   {
      app_semaphore[i] = OSSemCreate(1);
 40263b8:	e43fff17 	ldw	r16,-4(fp)
 40263bc:	01000044 	movi	r4,1
 40263c0:	401233c0 	call	401233c <OSSemCreate>
 40263c4:	1009883a 	mov	r4,r2
 40263c8:	00c101b4 	movhi	r3,1030
 40263cc:	18e33f04 	addi	r3,r3,-29444
 40263d0:	8405883a 	add	r2,r16,r16
 40263d4:	1085883a 	add	r2,r2,r2
 40263d8:	10c5883a 	add	r2,r2,r3
 40263dc:	11000015 	stw	r4,0(r2)
      if (!app_semaphore[i])
 40263e0:	e0bfff17 	ldw	r2,-4(fp)
 40263e4:	00c101b4 	movhi	r3,1030
 40263e8:	18e33f04 	addi	r3,r3,-29444
 40263ec:	1085883a 	add	r2,r2,r2
 40263f0:	1085883a 	add	r2,r2,r2
 40263f4:	10c5883a 	add	r2,r2,r3
 40263f8:	10800017 	ldw	r2,0(r2)
 40263fc:	1004c03a 	cmpne	r2,r2,zero
 4026400:	1000031e 	bne	r2,zero,4026410 <alt_iniche_init+0x134>
         panic("app_semaphore create err");  
 4026404:	01010174 	movhi	r4,1029
 4026408:	212e1104 	addi	r4,r4,-18364
 402640c:	4020e100 	call	4020e10 <panic>
   {
      resid_semaphore[i] = OSSemCreate(1);
      if (!resid_semaphore[i])
         panic("resid_semaphore create err");  
   }
   for (i = 0; i <= MAX_SEMID; i++)
 4026410:	e0bfff17 	ldw	r2,-4(fp)
 4026414:	10800044 	addi	r2,r2,1
 4026418:	e0bfff15 	stw	r2,-4(fp)
 402641c:	e0bfff17 	ldw	r2,-4(fp)
 4026420:	10800190 	cmplti	r2,r2,6
 4026424:	103fe41e 	bne	r2,zero,40263b8 <alt_iniche_init+0xdc>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
 4026428:	e03fff15 	stw	zero,-4(fp)
 402642c:	00002606 	br	40264c8 <alt_iniche_init+0x1ec>
   {
      global_TCPwakeup_set[i].ctick = 0;
 4026430:	e0bfff17 	ldw	r2,-4(fp)
 4026434:	00c101b4 	movhi	r3,1030
 4026438:	18e2f304 	addi	r3,r3,-29748
 402643c:	10800324 	muli	r2,r2,12
 4026440:	10c5883a 	add	r2,r2,r3
 4026444:	10000015 	stw	zero,0(r2)
      global_TCPwakeup_set[i].soc_event = NULL;
 4026448:	e0bfff17 	ldw	r2,-4(fp)
 402644c:	00c101b4 	movhi	r3,1030
 4026450:	18e2f304 	addi	r3,r3,-29748
 4026454:	10800324 	muli	r2,r2,12
 4026458:	10c5883a 	add	r2,r2,r3
 402645c:	10800104 	addi	r2,r2,4
 4026460:	10000015 	stw	zero,0(r2)
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
 4026464:	e43fff17 	ldw	r16,-4(fp)
 4026468:	0009883a 	mov	r4,zero
 402646c:	401233c0 	call	401233c <OSSemCreate>
 4026470:	1009883a 	mov	r4,r2
 4026474:	00c101b4 	movhi	r3,1030
 4026478:	18e2f304 	addi	r3,r3,-29748
 402647c:	80800324 	muli	r2,r16,12
 4026480:	10c5883a 	add	r2,r2,r3
 4026484:	10800204 	addi	r2,r2,8
 4026488:	11000015 	stw	r4,0(r2)
      if (!global_TCPwakeup_set[i].semaphore)
 402648c:	e0bfff17 	ldw	r2,-4(fp)
 4026490:	00c101b4 	movhi	r3,1030
 4026494:	18e2f304 	addi	r3,r3,-29748
 4026498:	10800324 	muli	r2,r2,12
 402649c:	10c5883a 	add	r2,r2,r3
 40264a0:	10800204 	addi	r2,r2,8
 40264a4:	10800017 	ldw	r2,0(r2)
 40264a8:	1004c03a 	cmpne	r2,r2,zero
 40264ac:	1000031e 	bne	r2,zero,40264bc <alt_iniche_init+0x1e0>
         panic("globwake_semaphore create err");  
 40264b0:	01010174 	movhi	r4,1029
 40264b4:	212e1804 	addi	r4,r4,-18336
 40264b8:	4020e100 	call	4020e10 <panic>

#ifndef TCPWAKE_RTOS
   /* 
    * clear global_TCPwakeup_set
    */
   for (i = 0; i < GLOBWAKE_SZ; i++)
 40264bc:	e0bfff17 	ldw	r2,-4(fp)
 40264c0:	10800044 	addi	r2,r2,1
 40264c4:	e0bfff15 	stw	r2,-4(fp)
 40264c8:	e0bfff17 	ldw	r2,-4(fp)
 40264cc:	10800510 	cmplti	r2,r2,20
 40264d0:	103fd71e 	bne	r2,zero,4026430 <alt_iniche_init+0x154>
      global_TCPwakeup_set[i].soc_event = NULL;
      global_TCPwakeup_set[i].semaphore = OSSemCreate(0);
      if (!global_TCPwakeup_set[i].semaphore)
         panic("globwake_semaphore create err");  
   }
   global_TCPwakeup_setIndx = 0;
 40264d4:	00810174 	movhi	r2,1029
 40264d8:	1081e304 	addi	r2,r2,1932
 40264dc:	10000015 	stw	zero,0(r2)
#endif  /* TCPWAKE_RTOS */
}
 40264e0:	e037883a 	mov	sp,fp
 40264e4:	dfc00217 	ldw	ra,8(sp)
 40264e8:	df000117 	ldw	fp,4(sp)
 40264ec:	dc000017 	ldw	r16,0(sp)
 40264f0:	dec00304 	addi	sp,sp,12
 40264f4:	f800283a 	ret

040264f8 <pre_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
pre_task_setup()
{
 40264f8:	deffff04 	addi	sp,sp,-4
 40264fc:	df000015 	stw	fp,0(sp)
 4026500:	d839883a 	mov	fp,sp
   write_leds(0);
   write_7seg_raw(0x0000);
#endif

   /* preset buffer counts; may be overridden from command line */
   bigbufs = MAXBIGPKTS;
 4026504:	00c10174 	movhi	r3,1029
 4026508:	18f9f304 	addi	r3,r3,-6196
 402650c:	00800784 	movi	r2,30
 4026510:	18800015 	stw	r2,0(r3)
   lilbufs = MAXLILPKTS;
 4026514:	00c10174 	movhi	r3,1029
 4026518:	18f9f104 	addi	r3,r3,-6204
 402651c:	00800784 	movi	r2,30
 4026520:	18800015 	stw	r2,0(r3)
   bigbufsiz = BIGBUFSIZE;
 4026524:	00c10174 	movhi	r3,1029
 4026528:	18f9f404 	addi	r3,r3,-6192
 402652c:	00818004 	movi	r2,1536
 4026530:	18800015 	stw	r2,0(r3)
   lilbufsiz = LILBUFSIZE;
 4026534:	00c10174 	movhi	r3,1029
 4026538:	18f9f204 	addi	r3,r3,-6200
 402653c:	00802004 	movi	r2,128
 4026540:	18800015 	stw	r2,0(r3)

   /* Install callback to prep_armintcp from prep_ifaces() */
   port_prep = prep_armintcp;
 4026544:	00c10174 	movhi	r3,1029
 4026548:	18c20604 	addi	r3,r3,2072
 402654c:	008100b4 	movhi	r2,1026
 4026550:	10996304 	addi	r2,r2,25996
 4026554:	18800015 	stw	r2,0(r3)
#endif   /* NOTDEF */

#endif   /* USE_PPP */


   return NULL;
 4026558:	0005883a 	mov	r2,zero
}
 402655c:	e037883a 	mov	sp,fp
 4026560:	df000017 	ldw	fp,0(sp)
 4026564:	dec00104 	addi	sp,sp,4
 4026568:	f800283a 	ret

0402656c <post_task_setup>:
 * Return NULL if OK, else brief error message
 */

char *
post_task_setup()
{
 402656c:	deffff04 	addi	sp,sp,-4
 4026570:	df000015 	stw	fp,0(sp)
 4026574:	d839883a 	mov	fp,sp
   return NULL;
 4026578:	0005883a 	mov	r2,zero
}
 402657c:	e037883a 	mov	sp,fp
 4026580:	df000017 	ldw	fp,0(sp)
 4026584:	dec00104 	addi	sp,sp,4
 4026588:	f800283a 	ret

0402658c <prep_armintcp>:

#endif  /* INCLUDE_NVPARMS */

int 
prep_armintcp(int ifaces_found)
{
 402658c:	defffd04 	addi	sp,sp,-12
 4026590:	dfc00215 	stw	ra,8(sp)
 4026594:	df000115 	stw	fp,4(sp)
 4026598:	df000104 	addi	fp,sp,4
 402659c:	e13fff15 	stw	r4,-4(fp)
 * Call iniche_devices_init, in alt_iniche_dev.c, 
 * to step through all devices and all their respective
 * low-level initialization routines.
 */
#ifdef ALT_INICHE
   ifaces_found = iniche_devices_init(ifaces_found);
 40265a0:	e13fff17 	ldw	r4,-4(fp)
 40265a4:	401d83c0 	call	401d83c <iniche_devices_init>
 40265a8:	e0bfff15 	stw	r2,-4(fp)

#ifdef USE_SLIP
   ifaces_found = prep_slip(ifaces_found);
#endif

   return ifaces_found;
 40265ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40265b0:	e037883a 	mov	sp,fp
 40265b4:	dfc00117 	ldw	ra,4(sp)
 40265b8:	df000017 	ldw	fp,0(sp)
 40265bc:	dec00204 	addi	sp,sp,8
 40265c0:	f800283a 	ret

040265c4 <calloc2>:
 * There is already a function called calloc1() in memio.c,
 * hence use a different function name.
 */
char * 
calloc2(unsigned size)
{
 40265c4:	defffd04 	addi	sp,sp,-12
 40265c8:	dfc00215 	stw	ra,8(sp)
 40265cc:	df000115 	stw	fp,4(sp)
 40265d0:	df000104 	addi	fp,sp,4
 40265d4:	e13fff15 	stw	r4,-4(fp)
   return (calloc(1,size));
 40265d8:	01000044 	movi	r4,1
 40265dc:	e17fff17 	ldw	r5,-4(fp)
 40265e0:	4045e680 	call	4045e68 <calloc>
}
 40265e4:	e037883a 	mov	sp,fp
 40265e8:	dfc00117 	ldw	ra,4(sp)
 40265ec:	df000017 	ldw	fp,0(sp)
 40265f0:	dec00204 	addi	sp,sp,8
 40265f4:	f800283a 	ret

040265f8 <npalloc>:


char *
npalloc(unsigned size)
{
 40265f8:	defff904 	addi	sp,sp,-28
 40265fc:	dfc00615 	stw	ra,24(sp)
 4026600:	df000515 	stw	fp,20(sp)
 4026604:	df000504 	addi	fp,sp,20
 4026608:	e13ffe15 	stw	r4,-8(fp)
#ifdef UCOS_II
   INT8U err;
#endif

#ifdef UCOS_II
   OSSemPend(mheap_sem_ptr, 0, &err);
 402660c:	d1282817 	ldw	r4,-24416(gp)
 4026610:	e1bffd04 	addi	r6,fp,-12
 4026614:	000b883a 	mov	r5,zero
 4026618:	40126f00 	call	40126f0 <OSSemPend>
   if(err)
 402661c:	e0bffd03 	ldbu	r2,-12(fp)
 4026620:	10803fcc 	andi	r2,r2,255
 4026624:	1005003a 	cmpeq	r2,r2,zero
 4026628:	1000181e 	bne	r2,zero,402668c <npalloc+0x94>
   {
      int errct = 0;
 402662c:	e03ffb15 	stw	zero,-20(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
 4026630:	00001206 	br	402667c <npalloc+0x84>
      {
         if(errct++ > 1000)
 4026634:	e0bffb17 	ldw	r2,-20(fp)
 4026638:	1080fa48 	cmpgei	r2,r2,1001
 402663c:	1007883a 	mov	r3,r2
 4026640:	e0bffb17 	ldw	r2,-20(fp)
 4026644:	10800044 	addi	r2,r2,1
 4026648:	e0bffb15 	stw	r2,-20(fp)
 402664c:	18803fcc 	andi	r2,r3,255
 4026650:	1005003a 	cmpeq	r2,r2,zero
 4026654:	1000051e 	bne	r2,zero,402666c <npalloc+0x74>
         {
            panic("npalloc");    /* fatal? */
 4026658:	01010174 	movhi	r4,1029
 402665c:	212e2004 	addi	r4,r4,-18304
 4026660:	4020e100 	call	4020e10 <panic>
            return NULL;
 4026664:	e03fff15 	stw	zero,-4(fp)
 4026668:	00001a06 	br	40266d4 <npalloc+0xdc>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 402666c:	d1282817 	ldw	r4,-24416(gp)
 4026670:	e1bffd04 	addi	r6,fp,-12
 4026674:	000b883a 	mov	r5,zero
 4026678:	40126f00 	call	40126f0 <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while(err == 10)
 402667c:	e0bffd03 	ldbu	r2,-12(fp)
 4026680:	10803fcc 	andi	r2,r2,255
 4026684:	108002a0 	cmpeqi	r2,r2,10
 4026688:	103fea1e 	bne	r2,zero,4026634 <npalloc+0x3c>
#endif

#ifdef   MEM_WRAPPERS
   ptr = wrap_alloc(size, calloc2);
#else
   ptr = calloc2(size);
 402668c:	e13ffe17 	ldw	r4,-8(fp)
 4026690:	40265c40 	call	40265c4 <calloc2>
 4026694:	e0bffc15 	stw	r2,-16(fp)
#endif

#ifdef UCOS_II 
   err = OSSemPost(mheap_sem_ptr);
 4026698:	d1282817 	ldw	r4,-24416(gp)
 402669c:	4012ae80 	call	4012ae8 <OSSemPost>
 40266a0:	e0bffd05 	stb	r2,-12(fp)
#endif
   
   if(!ptr)
 40266a4:	e0bffc17 	ldw	r2,-16(fp)
 40266a8:	1004c03a 	cmpne	r2,r2,zero
 40266ac:	1000021e 	bne	r2,zero,40266b8 <npalloc+0xc0>
      return NULL;
 40266b0:	e03fff15 	stw	zero,-4(fp)
 40266b4:	00000706 	br	40266d4 <npalloc+0xdc>

   MEMSET(ptr, 0, size);
 40266b8:	e0bffc17 	ldw	r2,-16(fp)
 40266bc:	1009883a 	mov	r4,r2
 40266c0:	e1bffe17 	ldw	r6,-8(fp)
 40266c4:	000b883a 	mov	r5,zero
 40266c8:	4001f640 	call	4001f64 <memset>
   return ptr;      
 40266cc:	e0bffc17 	ldw	r2,-16(fp)
 40266d0:	e0bfff15 	stw	r2,-4(fp)
 40266d4:	e0bfff17 	ldw	r2,-4(fp)
}
 40266d8:	e037883a 	mov	sp,fp
 40266dc:	dfc00117 	ldw	ra,4(sp)
 40266e0:	df000017 	ldw	fp,0(sp)
 40266e4:	dec00204 	addi	sp,sp,8
 40266e8:	f800283a 	ret

040266ec <npfree>:

void
npfree(void * ptr)
{
 40266ec:	defffb04 	addi	sp,sp,-20
 40266f0:	dfc00415 	stw	ra,16(sp)
 40266f4:	df000315 	stw	fp,12(sp)
 40266f8:	df000304 	addi	fp,sp,12
 40266fc:	e13fff15 	stw	r4,-4(fp)
#ifdef UCOS_II
   INT8U err;

   OSSemPend(mheap_sem_ptr, 0, &err);
 4026700:	d1282817 	ldw	r4,-24416(gp)
 4026704:	e1bffe04 	addi	r6,fp,-8
 4026708:	000b883a 	mov	r5,zero
 402670c:	40126f00 	call	40126f0 <OSSemPend>
   if (err)
 4026710:	e0bffe03 	ldbu	r2,-8(fp)
 4026714:	10803fcc 	andi	r2,r2,255
 4026718:	1005003a 	cmpeq	r2,r2,zero
 402671c:	1000171e 	bne	r2,zero,402677c <npfree+0x90>
   {
      int errct = 0;
 4026720:	e03ffd15 	stw	zero,-12(fp)

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
 4026724:	00001106 	br	402676c <npfree+0x80>
      {
         if (errct++ > 1000)
 4026728:	e0bffd17 	ldw	r2,-12(fp)
 402672c:	1080fa48 	cmpgei	r2,r2,1001
 4026730:	1007883a 	mov	r3,r2
 4026734:	e0bffd17 	ldw	r2,-12(fp)
 4026738:	10800044 	addi	r2,r2,1
 402673c:	e0bffd15 	stw	r2,-12(fp)
 4026740:	18803fcc 	andi	r2,r3,255
 4026744:	1005003a 	cmpeq	r2,r2,zero
 4026748:	1000041e 	bne	r2,zero,402675c <npfree+0x70>
         {
            panic("npfree");    /* fatal? */
 402674c:	01010174 	movhi	r4,1029
 4026750:	212e2204 	addi	r4,r4,-18296
 4026754:	4020e100 	call	4020e10 <panic>
            return;
 4026758:	00000d06 	br	4026790 <npfree+0xa4>
         }
         OSSemPend(mheap_sem_ptr, 0, &err);
 402675c:	d1282817 	ldw	r4,-24416(gp)
 4026760:	e1bffe04 	addi	r6,fp,-8
 4026764:	000b883a 	mov	r5,zero
 4026768:	40126f00 	call	40126f0 <OSSemPend>
      int errct = 0;

      /* sometimes we get a "timeout" error even though we passed a zero
       * to indicate we'll wait forever. When this happens, try again:
       */
      while (err == 10)
 402676c:	e0bffe03 	ldbu	r2,-8(fp)
 4026770:	10803fcc 	andi	r2,r2,255
 4026774:	108002a0 	cmpeqi	r2,r2,10
 4026778:	103feb1e 	bne	r2,zero,4026728 <npfree+0x3c>
   }
   
#ifdef   MEM_WRAPPERS
   wrap_free((char*)ptr, free);
#else
   free(ptr);
 402677c:	e13fff17 	ldw	r4,-4(fp)
 4026780:	4045fe40 	call	4045fe4 <free>
#endif

   err = OSSemPost(mheap_sem_ptr);
 4026784:	d1282817 	ldw	r4,-24416(gp)
 4026788:	4012ae80 	call	4012ae8 <OSSemPost>
 402678c:	e0bffe05 	stb	r2,-8(fp)
 */
   free(ptr);
#endif
#endif

}
 4026790:	e037883a 	mov	sp,fp
 4026794:	dfc00117 	ldw	ra,4(sp)
 4026798:	df000017 	ldw	fp,0(sp)
 402679c:	dec00204 	addi	sp,sp,8
 40267a0:	f800283a 	ret

040267a4 <ncpalloc>:
 * contains macro definitions that assign specific memory
 * allocation calls to these routines.
 */
#ifdef ALT_INICHE
char * ncpalloc(unsigned size)
{
 40267a4:	defffc04 	addi	sp,sp,-16
 40267a8:	dfc00315 	stw	ra,12(sp)
 40267ac:	df000215 	stw	fp,8(sp)
 40267b0:	df000204 	addi	fp,sp,8
 40267b4:	e13fff15 	stw	r4,-4(fp)
   char *ptr = npalloc(size);
 40267b8:	e13fff17 	ldw	r4,-4(fp)
 40267bc:	40265f80 	call	40265f8 <npalloc>
 40267c0:	e0bffe15 	stw	r2,-8(fp)

   if(ptr) {
 40267c4:	e0bffe17 	ldw	r2,-8(fp)
 40267c8:	1005003a 	cmpeq	r2,r2,zero
 40267cc:	1000041e 	bne	r2,zero,40267e0 <ncpalloc+0x3c>
      ptr = (char *) alt_remap_uncached(ptr, size);
 40267d0:	e13ffe17 	ldw	r4,-8(fp)
 40267d4:	e17fff17 	ldw	r5,-4(fp)
 40267d8:	4035e4c0 	call	4035e4c <alt_remap_uncached>
 40267dc:	e0bffe15 	stw	r2,-8(fp)
   }

   return ptr;
 40267e0:	e0bffe17 	ldw	r2,-8(fp)
}
 40267e4:	e037883a 	mov	sp,fp
 40267e8:	dfc00117 	ldw	ra,4(sp)
 40267ec:	df000017 	ldw	fp,0(sp)
 40267f0:	dec00204 	addi	sp,sp,8
 40267f4:	f800283a 	ret

040267f8 <ncpfree>:

void ncpfree(void *ptr)
{
 40267f8:	defffd04 	addi	sp,sp,-12
 40267fc:	dfc00215 	stw	ra,8(sp)
 4026800:	df000115 	stw	fp,4(sp)
 4026804:	df000104 	addi	fp,sp,4
 4026808:	e13fff15 	stw	r4,-4(fp)
   if(ptr) {
 402680c:	e0bfff17 	ldw	r2,-4(fp)
 4026810:	1005003a 	cmpeq	r2,r2,zero
 4026814:	1000061e 	bne	r2,zero,4026830 <ncpfree+0x38>
      ptr = alt_remap_cached(ptr, sizeof(ptr));
 4026818:	e13fff17 	ldw	r4,-4(fp)
 402681c:	01400104 	movi	r5,4
 4026820:	4035e140 	call	4035e14 <alt_remap_cached>
 4026824:	e0bfff15 	stw	r2,-4(fp)
      npfree(ptr);
 4026828:	e13fff17 	ldw	r4,-4(fp)
 402682c:	40266ec0 	call	40266ec <npfree>
   }
}
 4026830:	e037883a 	mov	sp,fp
 4026834:	dfc00117 	ldw	ra,4(sp)
 4026838:	df000017 	ldw	fp,0(sp)
 402683c:	dec00204 	addi	sp,sp,8
 4026840:	f800283a 	ret

04026844 <pffindtype>:
 * RETURNS: 
 */

struct protosw *  
pffindtype(int domain, int type)
{
 4026844:	defffb04 	addi	sp,sp,-20
 4026848:	dfc00415 	stw	ra,16(sp)
 402684c:	df000315 	stw	fp,12(sp)
 4026850:	df000304 	addi	fp,sp,12
 4026854:	e13ffd15 	stw	r4,-12(fp)
 4026858:	e17ffe15 	stw	r5,-8(fp)

   /* check that the passed domain is vaid for the build */
   if (domain != AF_INET)
 402685c:	e0bffd17 	ldw	r2,-12(fp)
 4026860:	108000a0 	cmpeqi	r2,r2,2
 4026864:	1000031e 	bne	r2,zero,4026874 <pffindtype+0x30>
   {
#ifdef IP_V6
      if(domain != AF_INET6)
#endif
      {
         dtrap();    /* programming error */
 4026868:	4025bb40 	call	4025bb4 <dtrap>
         return NULL;
 402686c:	e03fff15 	stw	zero,-4(fp)
 4026870:	00001606 	br	40268cc <pffindtype+0x88>
      }
   }

   if (type == SOCK_STREAM)
 4026874:	e0bffe17 	ldw	r2,-8(fp)
 4026878:	10800058 	cmpnei	r2,r2,1
 402687c:	1000041e 	bne	r2,zero,4026890 <pffindtype+0x4c>
      return &tcp_protosw;
 4026880:	00810174 	movhi	r2,1029
 4026884:	10b8d804 	addi	r2,r2,-7328
 4026888:	e0bfff15 	stw	r2,-4(fp)
 402688c:	00000f06 	br	40268cc <pffindtype+0x88>
#ifdef UDP_SOCKETS
   else if(type == SOCK_DGRAM)
 4026890:	e0bffe17 	ldw	r2,-8(fp)
 4026894:	10800098 	cmpnei	r2,r2,2
 4026898:	1000041e 	bne	r2,zero,40268ac <pffindtype+0x68>
      return &udp_protosw;
 402689c:	00810174 	movhi	r2,1029
 40268a0:	10b8de04 	addi	r2,r2,-7304
 40268a4:	e0bfff15 	stw	r2,-4(fp)
 40268a8:	00000806 	br	40268cc <pffindtype+0x88>
#endif   /* UDP_SOCKETS */
#ifdef IP_RAW
   else if(type == SOCK_RAW)
 40268ac:	e0bffe17 	ldw	r2,-8(fp)
 40268b0:	108000d8 	cmpnei	r2,r2,3
 40268b4:	1000041e 	bne	r2,zero,40268c8 <pffindtype+0x84>
      return &rawip_protosw;
 40268b8:	00810174 	movhi	r2,1029
 40268bc:	10b8e404 	addi	r2,r2,-7280
 40268c0:	e0bfff15 	stw	r2,-4(fp)
 40268c4:	00000106 	br	40268cc <pffindtype+0x88>
#endif  /* IP_RAW */
   else
      return NULL;
 40268c8:	e03fff15 	stw	zero,-4(fp)
 40268cc:	e0bfff17 	ldw	r2,-4(fp)
}
 40268d0:	e037883a 	mov	sp,fp
 40268d4:	dfc00117 	ldw	ra,4(sp)
 40268d8:	df000017 	ldw	fp,0(sp)
 40268dc:	dec00204 	addi	sp,sp,8
 40268e0:	f800283a 	ret

040268e4 <pffindproto>:
 * RETURNS: 
 */

struct protosw *  
pffindproto(int domain, int protocol, int type)
{
 40268e4:	defff904 	addi	sp,sp,-28
 40268e8:	dfc00615 	stw	ra,24(sp)
 40268ec:	df000515 	stw	fp,20(sp)
 40268f0:	df000504 	addi	fp,sp,20
 40268f4:	e13ffb15 	stw	r4,-20(fp)
 40268f8:	e17ffc15 	stw	r5,-16(fp)
 40268fc:	e1bffd15 	stw	r6,-12(fp)
#ifdef IP_RAW
   if (type == SOCK_RAW)
 4026900:	e0bffd17 	ldw	r2,-12(fp)
 4026904:	108000d8 	cmpnei	r2,r2,3
 4026908:	1000051e 	bne	r2,zero,4026920 <pffindproto+0x3c>
      return(pffindtype(domain, type));
 402690c:	e13ffb17 	ldw	r4,-20(fp)
 4026910:	e17ffd17 	ldw	r5,-12(fp)
 4026914:	40268440 	call	4026844 <pffindtype>
 4026918:	e0bffe15 	stw	r2,-8(fp)
 402691c:	00001f06 	br	402699c <pffindproto+0xb8>
#endif

   switch (protocol)
 4026920:	e0bffc17 	ldw	r2,-16(fp)
 4026924:	e0bfff15 	stw	r2,-4(fp)
 4026928:	e0ffff17 	ldw	r3,-4(fp)
 402692c:	188001a0 	cmpeqi	r2,r3,6
 4026930:	1000071e 	bne	r2,zero,4026950 <pffindproto+0x6c>
 4026934:	e0ffff17 	ldw	r3,-4(fp)
 4026938:	18800460 	cmpeqi	r2,r3,17
 402693c:	10000a1e 	bne	r2,zero,4026968 <pffindproto+0x84>
 4026940:	e0ffff17 	ldw	r3,-4(fp)
 4026944:	1805003a 	cmpeq	r2,r3,zero
 4026948:	1000101e 	bne	r2,zero,402698c <pffindproto+0xa8>
 402694c:	00000c06 	br	4026980 <pffindproto+0x9c>
   {
#ifdef BSD_SOCKETS
   case IPPROTO_TCP:
      if (type == SOCK_STREAM)
 4026950:	e0bffd17 	ldw	r2,-12(fp)
 4026954:	10800060 	cmpeqi	r2,r2,1
 4026958:	10000c1e 	bne	r2,zero,402698c <pffindproto+0xa8>
         break;
      /* IPPROTO_TCP protocol on non-SOCK_STREAM type socket */
      dtrap();
 402695c:	4025bb40 	call	4025bb4 <dtrap>
      return NULL;
 4026960:	e03ffe15 	stw	zero,-8(fp)
 4026964:	00000d06 	br	402699c <pffindproto+0xb8>
   case IPPROTO_UDP:
      if (type == SOCK_DGRAM)
 4026968:	e0bffd17 	ldw	r2,-12(fp)
 402696c:	108000a0 	cmpeqi	r2,r2,2
 4026970:	1000061e 	bne	r2,zero,402698c <pffindproto+0xa8>
         break;
      /* IPPROTO_UDP protocol on non-SOCK_DGRAM type socket */
      dtrap();
 4026974:	4025bb40 	call	4025bb4 <dtrap>
      return NULL;
 4026978:	e03ffe15 	stw	zero,-8(fp)
 402697c:	00000706 	br	402699c <pffindproto+0xb8>
   case 0:
      /* let protocol default based on socket type */
      break;
   default:
      /* unknown/unsupported protocol on socket */
      dtrap();
 4026980:	4025bb40 	call	4025bb4 <dtrap>
      return NULL;
 4026984:	e03ffe15 	stw	zero,-8(fp)
 4026988:	00000406 	br	402699c <pffindproto+0xb8>
   }
   return(pffindtype(domain, type));   /* map to findtype */
 402698c:	e13ffb17 	ldw	r4,-20(fp)
 4026990:	e17ffd17 	ldw	r5,-12(fp)
 4026994:	40268440 	call	4026844 <pffindtype>
 4026998:	e0bffe15 	stw	r2,-8(fp)
 402699c:	e0bffe17 	ldw	r2,-8(fp)
}
 40269a0:	e037883a 	mov	sp,fp
 40269a4:	dfc00117 	ldw	ra,4(sp)
 40269a8:	df000017 	ldw	fp,0(sp)
 40269ac:	dec00204 	addi	sp,sp,8
 40269b0:	f800283a 	ret

040269b4 <m_getnbuf>:
 * RETURNS: 
 */

struct mbuf *  
m_getnbuf(int type, int len)
{
 40269b4:	defff904 	addi	sp,sp,-28
 40269b8:	dfc00615 	stw	ra,24(sp)
 40269bc:	df000515 	stw	fp,20(sp)
 40269c0:	df000504 	addi	fp,sp,20
 40269c4:	e13ffd15 	stw	r4,-12(fp)
 40269c8:	e17ffe15 	stw	r5,-8(fp)
   struct mbuf *  m;
   PACKET pkt = NULL;
 40269cc:	e03ffb15 	stw	zero,-20(fp)

#ifdef NPDEBUG
   if (type < MT_RXDATA || type > MT_IFADDR)
 40269d0:	e0bffd17 	ldw	r2,-12(fp)
 40269d4:	10800050 	cmplti	r2,r2,1
 40269d8:	1000031e 	bne	r2,zero,40269e8 <m_getnbuf+0x34>
 40269dc:	e0bffd17 	ldw	r2,-12(fp)
 40269e0:	10800390 	cmplti	r2,r2,14
 40269e4:	1000011e 	bne	r2,zero,40269ec <m_getnbuf+0x38>
   {
      dtrap(); /* is this OK? */
 40269e8:	4025bb40 	call	4025bb4 <dtrap>
   }
#endif

   /* if caller has data (len >= 0), we need to allocate 
    * a packet buffer; else all we need is the mbuf */
   if (len != 0)
 40269ec:	e0bffe17 	ldw	r2,-8(fp)
 40269f0:	1005003a 	cmpeq	r2,r2,zero
 40269f4:	10000e1e 	bne	r2,zero,4026a30 <m_getnbuf+0x7c>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40269f8:	01000084 	movi	r4,2
 40269fc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pkt = pk_alloc(len + HDRSLEN);
 4026a00:	e0bffe17 	ldw	r2,-8(fp)
 4026a04:	10800e04 	addi	r2,r2,56
 4026a08:	1009883a 	mov	r4,r2
 4026a0c:	4024f700 	call	4024f70 <pk_alloc>
 4026a10:	e0bffb15 	stw	r2,-20(fp)

      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4026a14:	01000084 	movi	r4,2
 4026a18:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      if (!pkt)
 4026a1c:	e0bffb17 	ldw	r2,-20(fp)
 4026a20:	1004c03a 	cmpne	r2,r2,zero
 4026a24:	1000021e 	bne	r2,zero,4026a30 <m_getnbuf+0x7c>
         return NULL;
 4026a28:	e03fff15 	stw	zero,-4(fp)
 4026a2c:	00004506 	br	4026b44 <m_getnbuf+0x190>
   }

   m = (struct mbuf *)getq(&mfreeq);
 4026a30:	010101b4 	movhi	r4,1030
 4026a34:	21235e04 	addi	r4,r4,-29320
 4026a38:	402547c0 	call	402547c <getq>
 4026a3c:	e0bffc15 	stw	r2,-16(fp)
   if (!m)
 4026a40:	e0bffc17 	ldw	r2,-16(fp)
 4026a44:	1004c03a 	cmpne	r2,r2,zero
 4026a48:	10000b1e 	bne	r2,zero,4026a78 <m_getnbuf+0xc4>
   {
      if (pkt) 
 4026a4c:	e0bffb17 	ldw	r2,-20(fp)
 4026a50:	1005003a 	cmpeq	r2,r2,zero
 4026a54:	1000061e 	bne	r2,zero,4026a70 <m_getnbuf+0xbc>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4026a58:	01000084 	movi	r4,2
 4026a5c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 4026a60:	e13ffb17 	ldw	r4,-20(fp)
 4026a64:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4026a68:	01000084 	movi	r4,2
 4026a6c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      }
      return NULL;
 4026a70:	e03fff15 	stw	zero,-4(fp)
 4026a74:	00003306 	br	4026b44 <m_getnbuf+0x190>
   }
   m->m_type = type;
 4026a78:	e0fffc17 	ldw	r3,-16(fp)
 4026a7c:	e0bffd17 	ldw	r2,-12(fp)
 4026a80:	18800815 	stw	r2,32(r3)
   if (len == 0)
 4026a84:	e0bffe17 	ldw	r2,-8(fp)
 4026a88:	1004c03a 	cmpne	r2,r2,zero
 4026a8c:	1000071e 	bne	r2,zero,4026aac <m_getnbuf+0xf8>
   {
      m->pkt = NULL;
 4026a90:	e0bffc17 	ldw	r2,-16(fp)
 4026a94:	10000115 	stw	zero,4(r2)
      m->m_base = NULL;    /* caller better fill these in! */
 4026a98:	e0bffc17 	ldw	r2,-16(fp)
 4026a9c:	10000415 	stw	zero,16(r2)
      m->m_memsz = 0;
 4026aa0:	e0bffc17 	ldw	r2,-16(fp)
 4026aa4:	10000515 	stw	zero,20(r2)
 4026aa8:	00001506 	br	4026b00 <m_getnbuf+0x14c>
   }
   else
   {
      m->pkt = pkt;
 4026aac:	e0fffc17 	ldw	r3,-16(fp)
 4026ab0:	e0bffb17 	ldw	r2,-20(fp)
 4026ab4:	18800115 	stw	r2,4(r3)
      /* set m_data to the part where tcp data should go */
      m->m_base = m->m_data = pkt->nb_prot = pkt->nb_buff + HDRSLEN;
 4026ab8:	e0bffb17 	ldw	r2,-20(fp)
 4026abc:	10800117 	ldw	r2,4(r2)
 4026ac0:	10c00e04 	addi	r3,r2,56
 4026ac4:	e0bffb17 	ldw	r2,-20(fp)
 4026ac8:	10c00315 	stw	r3,12(r2)
 4026acc:	e0bffb17 	ldw	r2,-20(fp)
 4026ad0:	10c00317 	ldw	r3,12(r2)
 4026ad4:	e0bffc17 	ldw	r2,-16(fp)
 4026ad8:	10c00315 	stw	r3,12(r2)
 4026adc:	e0bffc17 	ldw	r2,-16(fp)
 4026ae0:	10c00317 	ldw	r3,12(r2)
 4026ae4:	e0bffc17 	ldw	r2,-16(fp)
 4026ae8:	10c00415 	stw	r3,16(r2)
      m->m_memsz = pkt->nb_blen - HDRSLEN;
 4026aec:	e0bffb17 	ldw	r2,-20(fp)
 4026af0:	10800217 	ldw	r2,8(r2)
 4026af4:	10fff204 	addi	r3,r2,-56
 4026af8:	e0bffc17 	ldw	r2,-16(fp)
 4026afc:	10c00515 	stw	r3,20(r2)
   }
   m->m_len = 0;
 4026b00:	e0bffc17 	ldw	r2,-16(fp)
 4026b04:	10000215 	stw	zero,8(r2)
   m->m_next = m->m_act = NULL;
 4026b08:	e0bffc17 	ldw	r2,-16(fp)
 4026b0c:	10000715 	stw	zero,28(r2)
 4026b10:	e0bffc17 	ldw	r2,-16(fp)
 4026b14:	10c00717 	ldw	r3,28(r2)
 4026b18:	e0bffc17 	ldw	r2,-16(fp)
 4026b1c:	10c00615 	stw	r3,24(r2)
   mbstat.allocs++;        /* maintain local statistics */
 4026b20:	d0a82c17 	ldw	r2,-24400(gp)
 4026b24:	10800044 	addi	r2,r2,1
 4026b28:	d0a82c15 	stw	r2,-24400(gp)
   putq(&mbufq, (qp)m);
 4026b2c:	e17ffc17 	ldw	r5,-16(fp)
 4026b30:	010101b4 	movhi	r4,1030
 4026b34:	21235904 	addi	r4,r4,-29340
 4026b38:	40255440 	call	4025544 <putq>
   return m;
 4026b3c:	e0bffc17 	ldw	r2,-16(fp)
 4026b40:	e0bfff15 	stw	r2,-4(fp)
 4026b44:	e0bfff17 	ldw	r2,-4(fp)
}
 4026b48:	e037883a 	mov	sp,fp
 4026b4c:	dfc00117 	ldw	ra,4(sp)
 4026b50:	df000017 	ldw	fp,0(sp)
 4026b54:	dec00204 	addi	sp,sp,8
 4026b58:	f800283a 	ret

04026b5c <m_free>:
 */


struct mbuf *  
m_free(struct mbuf * m)
{
 4026b5c:	defffb04 	addi	sp,sp,-20
 4026b60:	dfc00415 	stw	ra,16(sp)
 4026b64:	df000315 	stw	fp,12(sp)
 4026b68:	df000304 	addi	fp,sp,12
 4026b6c:	e13ffe15 	stw	r4,-8(fp)
   struct mbuf *  nextptr;

#ifdef NPDEBUG
   if (mbufq.q_len < 1)
 4026b70:	008101b4 	movhi	r2,1030
 4026b74:	10a35904 	addi	r2,r2,-29340
 4026b78:	10800217 	ldw	r2,8(r2)
 4026b7c:	10800048 	cmpgei	r2,r2,1
 4026b80:	1000031e 	bne	r2,zero,4026b90 <m_free+0x34>
      panic("mfree: q_len");
 4026b84:	01010174 	movhi	r4,1029
 4026b88:	212e2404 	addi	r4,r4,-18288
 4026b8c:	4020e100 	call	4020e10 <panic>

   if (m->m_type < MT_RXDATA || m->m_type > MT_IFADDR)
 4026b90:	e0bffe17 	ldw	r2,-8(fp)
 4026b94:	10800817 	ldw	r2,32(r2)
 4026b98:	10800050 	cmplti	r2,r2,1
 4026b9c:	1000041e 	bne	r2,zero,4026bb0 <m_free+0x54>
 4026ba0:	e0bffe17 	ldw	r2,-8(fp)
 4026ba4:	10800817 	ldw	r2,32(r2)
 4026ba8:	10800390 	cmplti	r2,r2,14
 4026bac:	10000c1e 	bne	r2,zero,4026be0 <m_free+0x84>
   {
      if (m->m_type == MT_FREE)
 4026bb0:	e0bffe17 	ldw	r2,-8(fp)
 4026bb4:	10800817 	ldw	r2,32(r2)
 4026bb8:	1004c03a 	cmpne	r2,r2,zero
 4026bbc:	1000051e 	bne	r2,zero,4026bd4 <m_free+0x78>
      {
         dtrap(); /* debug double free of mbuf by tcp_in() */
 4026bc0:	4025bb40 	call	4025bb4 <dtrap>
         return m->m_next; /* seems harmless, though.... */
 4026bc4:	e0bffe17 	ldw	r2,-8(fp)
 4026bc8:	10800617 	ldw	r2,24(r2)
 4026bcc:	e0bfff15 	stw	r2,-4(fp)
 4026bd0:	00002906 	br	4026c78 <m_free+0x11c>
      }
      else
         panic("m_free: type");
 4026bd4:	01010174 	movhi	r4,1029
 4026bd8:	212e2804 	addi	r4,r4,-18272
 4026bdc:	4020e100 	call	4020e10 <panic>
   }
#endif   /* NPDEBUG */

   nextptr = m->m_next;    /* remember value to return */
 4026be0:	e0bffe17 	ldw	r2,-8(fp)
 4026be4:	10800617 	ldw	r2,24(r2)
 4026be8:	e0bffd15 	stw	r2,-12(fp)

   if (qdel(&mbufq, m) == NULL)
 4026bec:	010101b4 	movhi	r4,1030
 4026bf0:	21235904 	addi	r4,r4,-29340
 4026bf4:	e17ffe17 	ldw	r5,-8(fp)
 4026bf8:	40255f40 	call	40255f4 <qdel>
 4026bfc:	1004c03a 	cmpne	r2,r2,zero
 4026c00:	1000031e 	bne	r2,zero,4026c10 <m_free+0xb4>
      panic("m_free: missing");
 4026c04:	01010174 	movhi	r4,1029
 4026c08:	212e2c04 	addi	r4,r4,-18256
 4026c0c:	4020e100 	call	4020e10 <panic>

   m->m_type = MT_FREE;    /* this may seem silly, but helps error checking */
 4026c10:	e0bffe17 	ldw	r2,-8(fp)
 4026c14:	10000815 	stw	zero,32(r2)

   if (m->pkt)
 4026c18:	e0bffe17 	ldw	r2,-8(fp)
 4026c1c:	10800117 	ldw	r2,4(r2)
 4026c20:	1005003a 	cmpeq	r2,r2,zero
 4026c24:	1000071e 	bne	r2,zero,4026c44 <m_free+0xe8>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4026c28:	01000084 	movi	r4,2
 4026c2c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(m->pkt);     /* free up the netport buffer */
 4026c30:	e0bffe17 	ldw	r2,-8(fp)
 4026c34:	11000117 	ldw	r4,4(r2)
 4026c38:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4026c3c:	01000084 	movi	r4,2
 4026c40:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   }
   mbstat.frees++;
 4026c44:	00810174 	movhi	r2,1029
 4026c48:	1081eb04 	addi	r2,r2,1964
 4026c4c:	10800017 	ldw	r2,0(r2)
 4026c50:	10c00044 	addi	r3,r2,1
 4026c54:	00810174 	movhi	r2,1029
 4026c58:	1081eb04 	addi	r2,r2,1964
 4026c5c:	10c00015 	stw	r3,0(r2)
   putq(&mfreeq, (qp)m);
 4026c60:	e17ffe17 	ldw	r5,-8(fp)
 4026c64:	010101b4 	movhi	r4,1030
 4026c68:	21235e04 	addi	r4,r4,-29320
 4026c6c:	40255440 	call	4025544 <putq>
   return nextptr;
 4026c70:	e0bffd17 	ldw	r2,-12(fp)
 4026c74:	e0bfff15 	stw	r2,-4(fp)
 4026c78:	e0bfff17 	ldw	r2,-4(fp)
}
 4026c7c:	e037883a 	mov	sp,fp
 4026c80:	dfc00117 	ldw	ra,4(sp)
 4026c84:	df000017 	ldw	fp,0(sp)
 4026c88:	dec00204 	addi	sp,sp,8
 4026c8c:	f800283a 	ret

04026c90 <m_freem>:
 * RETURNS: 
 */

void
m_freem(struct mbuf * m)
{
 4026c90:	defffd04 	addi	sp,sp,-12
 4026c94:	dfc00215 	stw	ra,8(sp)
 4026c98:	df000115 	stw	fp,4(sp)
 4026c9c:	df000104 	addi	fp,sp,4
 4026ca0:	e13fff15 	stw	r4,-4(fp)
   while (m != NULL)
 4026ca4:	00000306 	br	4026cb4 <m_freem+0x24>
      m = m_free(m);
 4026ca8:	e13fff17 	ldw	r4,-4(fp)
 4026cac:	4026b5c0 	call	4026b5c <m_free>
 4026cb0:	e0bfff15 	stw	r2,-4(fp)
 */

void
m_freem(struct mbuf * m)
{
   while (m != NULL)
 4026cb4:	e0bfff17 	ldw	r2,-4(fp)
 4026cb8:	1004c03a 	cmpne	r2,r2,zero
 4026cbc:	103ffa1e 	bne	r2,zero,4026ca8 <m_freem+0x18>
      m = m_free(m);
}
 4026cc0:	e037883a 	mov	sp,fp
 4026cc4:	dfc00117 	ldw	ra,4(sp)
 4026cc8:	df000017 	ldw	fp,0(sp)
 4026ccc:	dec00204 	addi	sp,sp,8
 4026cd0:	f800283a 	ret

04026cd4 <m_copy>:
 * RETURNS: 
 */

struct mbuf *  
m_copy(struct mbuf * m, int off, int len)
{
 4026cd4:	defff404 	addi	sp,sp,-48
 4026cd8:	dfc00b15 	stw	ra,44(sp)
 4026cdc:	df000a15 	stw	fp,40(sp)
 4026ce0:	df000a04 	addi	fp,sp,40
 4026ce4:	e13ffa15 	stw	r4,-24(fp)
 4026ce8:	e17ffb15 	stw	r5,-20(fp)
 4026cec:	e1bffc15 	stw	r6,-16(fp)
   struct mbuf *  nb, * head, *  tail;
   int   tocopy;

   if (len == 0)  /* nothing to do */
 4026cf0:	e0bffc17 	ldw	r2,-16(fp)
 4026cf4:	1004c03a 	cmpne	r2,r2,zero
 4026cf8:	1000021e 	bne	r2,zero,4026d04 <m_copy+0x30>
      return NULL;
 4026cfc:	e03ffd15 	stw	zero,-12(fp)
 4026d00:	0000b706 	br	4026fe0 <m_copy+0x30c>

#ifdef NPDEBUG
   /* sanity test parms */
   if (off < 0 || (len < 0 && len != M_COPYALL))
 4026d04:	e0bffb17 	ldw	r2,-20(fp)
 4026d08:	1004803a 	cmplt	r2,r2,zero
 4026d0c:	1000061e 	bne	r2,zero,4026d28 <m_copy+0x54>
 4026d10:	e0bffc17 	ldw	r2,-16(fp)
 4026d14:	1004403a 	cmpge	r2,r2,zero
 4026d18:	1000191e 	bne	r2,zero,4026d80 <m_copy+0xac>
 4026d1c:	e0bffc17 	ldw	r2,-16(fp)
 4026d20:	10bfffe0 	cmpeqi	r2,r2,-1
 4026d24:	1000161e 	bne	r2,zero,4026d80 <m_copy+0xac>
   {
      dtrap();
 4026d28:	4025bb40 	call	4025bb4 <dtrap>
      return NULL;
 4026d2c:	e03ffd15 	stw	zero,-12(fp)
 4026d30:	0000ab06 	br	4026fe0 <m_copy+0x30c>
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
   {
      if (!m)
 4026d34:	e0bffa17 	ldw	r2,-24(fp)
 4026d38:	1004c03a 	cmpne	r2,r2,zero
 4026d3c:	1000031e 	bne	r2,zero,4026d4c <m_copy+0x78>
      {
         dtrap();
 4026d40:	4025bb40 	call	4025bb4 <dtrap>
         return NULL;
 4026d44:	e03ffd15 	stw	zero,-12(fp)
 4026d48:	0000a506 	br	4026fe0 <m_copy+0x30c>
      }
      if (off < (int)m->m_len)
 4026d4c:	e0bffa17 	ldw	r2,-24(fp)
 4026d50:	10800217 	ldw	r2,8(r2)
 4026d54:	1007883a 	mov	r3,r2
 4026d58:	e0bffb17 	ldw	r2,-20(fp)
 4026d5c:	10c00b16 	blt	r2,r3,4026d8c <m_copy+0xb8>
         break;
      off -= m->m_len;
 4026d60:	e0fffb17 	ldw	r3,-20(fp)
 4026d64:	e0bffa17 	ldw	r2,-24(fp)
 4026d68:	10800217 	ldw	r2,8(r2)
 4026d6c:	1885c83a 	sub	r2,r3,r2
 4026d70:	e0bffb15 	stw	r2,-20(fp)
      m = m->m_next;
 4026d74:	e0bffa17 	ldw	r2,-24(fp)
 4026d78:	10800617 	ldw	r2,24(r2)
 4026d7c:	e0bffa15 	stw	r2,-24(fp)
      return NULL;
   }
#endif   /* NPDEBUG */

   /* move forward through mbuf q to "off" point */
   while (off > 0) 
 4026d80:	e0bffb17 	ldw	r2,-20(fp)
 4026d84:	10800048 	cmpgei	r2,r2,1
 4026d88:	103fea1e 	bne	r2,zero,4026d34 <m_copy+0x60>
         break;
      off -= m->m_len;
      m = m->m_next;
   }

   head = tail = NULL;
 4026d8c:	e03ff715 	stw	zero,-36(fp)
 4026d90:	e0bff717 	ldw	r2,-36(fp)
 4026d94:	e0bff815 	stw	r2,-32(fp)

   while (len > 0)
 4026d98:	00008806 	br	4026fbc <m_copy+0x2e8>
   {
      if (m == NULL) /* at end of queue? */
 4026d9c:	e0bffa17 	ldw	r2,-24(fp)
 4026da0:	1004c03a 	cmpne	r2,r2,zero
 4026da4:	1000051e 	bne	r2,zero,4026dbc <m_copy+0xe8>
      {
         panic("m_copy: bad len");
 4026da8:	01010174 	movhi	r4,1029
 4026dac:	212e3004 	addi	r4,r4,-18240
 4026db0:	4020e100 	call	4020e10 <panic>
         return NULL;
 4026db4:	e03ffd15 	stw	zero,-12(fp)
 4026db8:	00008906 	br	4026fe0 <m_copy+0x30c>
      }
      tocopy = (int)MIN(len, (int)(m->m_len - off));
 4026dbc:	e0bffa17 	ldw	r2,-24(fp)
 4026dc0:	10c00217 	ldw	r3,8(r2)
 4026dc4:	e0bffb17 	ldw	r2,-20(fp)
 4026dc8:	1885c83a 	sub	r2,r3,r2
 4026dcc:	e0fffc17 	ldw	r3,-16(fp)
 4026dd0:	e0ffff15 	stw	r3,-4(fp)
 4026dd4:	e0bffe15 	stw	r2,-8(fp)
 4026dd8:	e0bfff17 	ldw	r2,-4(fp)
 4026ddc:	e0fffe17 	ldw	r3,-8(fp)
 4026de0:	10c0020e 	bge	r2,r3,4026dec <m_copy+0x118>
 4026de4:	e0bfff17 	ldw	r2,-4(fp)
 4026de8:	e0bffe15 	stw	r2,-8(fp)
 4026dec:	e0fffe17 	ldw	r3,-8(fp)
 4026df0:	e0fff615 	stw	r3,-40(fp)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
 4026df4:	e0bffb17 	ldw	r2,-20(fp)
 4026df8:	108000cc 	andi	r2,r2,3
 4026dfc:	1004c03a 	cmpne	r2,r2,zero
 4026e00:	1000051e 	bne	r2,zero,4026e18 <m_copy+0x144>
 4026e04:	e0bffa17 	ldw	r2,-24(fp)
 4026e08:	10800117 	ldw	r2,4(r2)
 4026e0c:	10800917 	ldw	r2,36(r2)
 4026e10:	10800060 	cmpeqi	r2,r2,1
 4026e14:	1000251e 	bne	r2,zero,4026eac <m_copy+0x1d8>
          (m->pkt->inuse != 1))
      {
         if ((nb = m_getwithdata (m->m_type, tocopy)) == NULL)
 4026e18:	e0bffa17 	ldw	r2,-24(fp)
 4026e1c:	11000817 	ldw	r4,32(r2)
 4026e20:	e17ff617 	ldw	r5,-40(fp)
 4026e24:	40269b40 	call	40269b4 <m_getnbuf>
 4026e28:	e0bff915 	stw	r2,-28(fp)
 4026e2c:	e0bff917 	ldw	r2,-28(fp)
 4026e30:	1005003a 	cmpeq	r2,r2,zero
 4026e34:	1000671e 	bne	r2,zero,4026fd4 <m_copy+0x300>
            goto nospace;
         MEMCPY(nb->m_data, m->m_data+off, tocopy);
 4026e38:	e0bff917 	ldw	r2,-28(fp)
 4026e3c:	11000317 	ldw	r4,12(r2)
 4026e40:	e0bffa17 	ldw	r2,-24(fp)
 4026e44:	10c00317 	ldw	r3,12(r2)
 4026e48:	e0bffb17 	ldw	r2,-20(fp)
 4026e4c:	1885883a 	add	r2,r3,r2
 4026e50:	e0fff617 	ldw	r3,-40(fp)
 4026e54:	100b883a 	mov	r5,r2
 4026e58:	180d883a 	mov	r6,r3
 4026e5c:	4001de40 	call	4001de4 <memcpy>
         nb->m_len = tocopy;  /* set length of data we just moved into new mbuf */
 4026e60:	e0fff617 	ldw	r3,-40(fp)
 4026e64:	e0bff917 	ldw	r2,-28(fp)
 4026e68:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mcopies++;
 4026e6c:	008101b4 	movhi	r2,1030
 4026e70:	10a37804 	addi	r2,r2,-29216
 4026e74:	10802e17 	ldw	r2,184(r2)
 4026e78:	10c00044 	addi	r3,r2,1
 4026e7c:	008101b4 	movhi	r2,1030
 4026e80:	10a37804 	addi	r2,r2,-29216
 4026e84:	10c02e15 	stw	r3,184(r2)
         tcpstat.tcps_mcopiedbytes += tocopy;
 4026e88:	008101b4 	movhi	r2,1030
 4026e8c:	10a37804 	addi	r2,r2,-29216
 4026e90:	10c03017 	ldw	r3,192(r2)
 4026e94:	e0bff617 	ldw	r2,-40(fp)
 4026e98:	1887883a 	add	r3,r3,r2
 4026e9c:	008101b4 	movhi	r2,1030
 4026ea0:	10a37804 	addi	r2,r2,-29216
 4026ea4:	10c03015 	stw	r3,192(r2)
       * ALIGN_TYPE, so if the offset isn't aligned, we must 
       * copy the buffer instead of cloning it.
       * Also, don't permit multiple clones; they sometimes
       * lead to corrupted data.
       */
      if ((off & (ALIGN_TYPE - 1)) ||
 4026ea8:	00003106 	br	4026f70 <m_copy+0x29c>
      {
         /* Rather than memcpy every mbuf's data, "clone" the data by 
          * making a duplicate of the mbufs involved and bumping the 
          * inuse count of the actual packet structs
          */
         if ((nb = m_getwithdata (m->m_type, 0)) == NULL)
 4026eac:	e0bffa17 	ldw	r2,-24(fp)
 4026eb0:	11000817 	ldw	r4,32(r2)
 4026eb4:	000b883a 	mov	r5,zero
 4026eb8:	40269b40 	call	40269b4 <m_getnbuf>
 4026ebc:	e0bff915 	stw	r2,-28(fp)
 4026ec0:	e0bff917 	ldw	r2,-28(fp)
 4026ec4:	1005003a 	cmpeq	r2,r2,zero
 4026ec8:	1000421e 	bne	r2,zero,4026fd4 <m_copy+0x300>
            goto nospace;

         m->pkt->inuse++;     /* bump pkt use count to clone it */
 4026ecc:	e0bffa17 	ldw	r2,-24(fp)
 4026ed0:	10c00117 	ldw	r3,4(r2)
 4026ed4:	18800917 	ldw	r2,36(r3)
 4026ed8:	10800044 	addi	r2,r2,1
 4026edc:	18800915 	stw	r2,36(r3)

         /* set up new mbuf with pointers to cloned packet */
         nb->pkt = m->pkt;
 4026ee0:	e0bffa17 	ldw	r2,-24(fp)
 4026ee4:	10c00117 	ldw	r3,4(r2)
 4026ee8:	e0bff917 	ldw	r2,-28(fp)
 4026eec:	10c00115 	stw	r3,4(r2)
         nb->m_base = m->m_base;
 4026ef0:	e0bffa17 	ldw	r2,-24(fp)
 4026ef4:	10c00417 	ldw	r3,16(r2)
 4026ef8:	e0bff917 	ldw	r2,-28(fp)
 4026efc:	10c00415 	stw	r3,16(r2)
         nb->m_memsz = m->m_memsz;
 4026f00:	e0bffa17 	ldw	r2,-24(fp)
 4026f04:	10c00517 	ldw	r3,20(r2)
 4026f08:	e0bff917 	ldw	r2,-28(fp)
 4026f0c:	10c00515 	stw	r3,20(r2)
         nb->m_data = m->m_data + off;
 4026f10:	e0bffa17 	ldw	r2,-24(fp)
 4026f14:	10c00317 	ldw	r3,12(r2)
 4026f18:	e0bffb17 	ldw	r2,-20(fp)
 4026f1c:	1887883a 	add	r3,r3,r2
 4026f20:	e0bff917 	ldw	r2,-28(fp)
 4026f24:	10c00315 	stw	r3,12(r2)
         nb->m_len = tocopy;
 4026f28:	e0fff617 	ldw	r3,-40(fp)
 4026f2c:	e0bff917 	ldw	r2,-28(fp)
 4026f30:	10c00215 	stw	r3,8(r2)

         tcpstat.tcps_mclones++;
 4026f34:	008101b4 	movhi	r2,1030
 4026f38:	10a37804 	addi	r2,r2,-29216
 4026f3c:	10802f17 	ldw	r2,188(r2)
 4026f40:	10c00044 	addi	r3,r2,1
 4026f44:	008101b4 	movhi	r2,1030
 4026f48:	10a37804 	addi	r2,r2,-29216
 4026f4c:	10c02f15 	stw	r3,188(r2)
         tcpstat.tcps_mclonedbytes += tocopy;
 4026f50:	008101b4 	movhi	r2,1030
 4026f54:	10a37804 	addi	r2,r2,-29216
 4026f58:	10c03117 	ldw	r3,196(r2)
 4026f5c:	e0bff617 	ldw	r2,-40(fp)
 4026f60:	1887883a 	add	r3,r3,r2
 4026f64:	008101b4 	movhi	r2,1030
 4026f68:	10a37804 	addi	r2,r2,-29216
 4026f6c:	10c03115 	stw	r3,196(r2)
      }

      len -= tocopy;
 4026f70:	e0fffc17 	ldw	r3,-16(fp)
 4026f74:	e0bff617 	ldw	r2,-40(fp)
 4026f78:	1885c83a 	sub	r2,r3,r2
 4026f7c:	e0bffc15 	stw	r2,-16(fp)
      off = 0;
 4026f80:	e03ffb15 	stw	zero,-20(fp)
      if (tail)      /* head & tail are set by first pass thru loop */
 4026f84:	e0bff717 	ldw	r2,-36(fp)
 4026f88:	1005003a 	cmpeq	r2,r2,zero
 4026f8c:	1000041e 	bne	r2,zero,4026fa0 <m_copy+0x2cc>
         tail->m_next = nb;
 4026f90:	e0fff717 	ldw	r3,-36(fp)
 4026f94:	e0bff917 	ldw	r2,-28(fp)
 4026f98:	18800615 	stw	r2,24(r3)
 4026f9c:	00000206 	br	4026fa8 <m_copy+0x2d4>
      else
         head = nb;
 4026fa0:	e0bff917 	ldw	r2,-28(fp)
 4026fa4:	e0bff815 	stw	r2,-32(fp)
      tail = nb;     /* always make new mbuf the tail */
 4026fa8:	e0bff917 	ldw	r2,-28(fp)
 4026fac:	e0bff715 	stw	r2,-36(fp)
      m = m->m_next;
 4026fb0:	e0bffa17 	ldw	r2,-24(fp)
 4026fb4:	10800617 	ldw	r2,24(r2)
 4026fb8:	e0bffa15 	stw	r2,-24(fp)
      m = m->m_next;
   }

   head = tail = NULL;

   while (len > 0)
 4026fbc:	e0bffc17 	ldw	r2,-16(fp)
 4026fc0:	10800048 	cmpgei	r2,r2,1
 4026fc4:	103f751e 	bne	r2,zero,4026d9c <m_copy+0xc8>
      tail = nb;     /* always make new mbuf the tail */
      m = m->m_next;

   }

   return head;
 4026fc8:	e0bff817 	ldw	r2,-32(fp)
 4026fcc:	e0bffd15 	stw	r2,-12(fp)
 4026fd0:	00000306 	br	4026fe0 <m_copy+0x30c>

nospace:
   m_freem (head);
 4026fd4:	e13ff817 	ldw	r4,-32(fp)
 4026fd8:	4026c900 	call	4026c90 <m_freem>
   return NULL;
 4026fdc:	e03ffd15 	stw	zero,-12(fp)
 4026fe0:	e0bffd17 	ldw	r2,-12(fp)
}
 4026fe4:	e037883a 	mov	sp,fp
 4026fe8:	dfc00117 	ldw	ra,4(sp)
 4026fec:	df000017 	ldw	fp,0(sp)
 4026ff0:	dec00204 	addi	sp,sp,8
 4026ff4:	f800283a 	ret

04026ff8 <m_adj>:
 * RETURNS: 
 */

void
m_adj(struct mbuf * mp, int len)
{
 4026ff8:	defffb04 	addi	sp,sp,-20
 4026ffc:	df000415 	stw	fp,16(sp)
 4027000:	df000404 	addi	fp,sp,16
 4027004:	e13ffe15 	stw	r4,-8(fp)
 4027008:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;
   int   count;

   if ((m = mp) == NULL)
 402700c:	e0bffe17 	ldw	r2,-8(fp)
 4027010:	e0bffd15 	stw	r2,-12(fp)
 4027014:	e0bffd17 	ldw	r2,-12(fp)
 4027018:	1005003a 	cmpeq	r2,r2,zero
 402701c:	1000661e 	bne	r2,zero,40271b8 <m_adj+0x1c0>
      return;

   if (len >= 0) 
 4027020:	e0bfff17 	ldw	r2,-4(fp)
 4027024:	1004803a 	cmplt	r2,r2,zero
 4027028:	1000241e 	bne	r2,zero,40270bc <m_adj+0xc4>
   {
      while (m != NULL && len > 0) 
 402702c:	00001c06 	br	40270a0 <m_adj+0xa8>
      {
         if (m->m_len <= (unsigned)len)
 4027030:	e0bffd17 	ldw	r2,-12(fp)
 4027034:	10c00217 	ldw	r3,8(r2)
 4027038:	e0bfff17 	ldw	r2,-4(fp)
 402703c:	10c00b36 	bltu	r2,r3,402706c <m_adj+0x74>
         {
            len -= m->m_len;
 4027040:	e0ffff17 	ldw	r3,-4(fp)
 4027044:	e0bffd17 	ldw	r2,-12(fp)
 4027048:	10800217 	ldw	r2,8(r2)
 402704c:	1885c83a 	sub	r2,r3,r2
 4027050:	e0bfff15 	stw	r2,-4(fp)
            m->m_len = 0;
 4027054:	e0bffd17 	ldw	r2,-12(fp)
 4027058:	10000215 	stw	zero,8(r2)
            m = m->m_next;
 402705c:	e0bffd17 	ldw	r2,-12(fp)
 4027060:	10800617 	ldw	r2,24(r2)
 4027064:	e0bffd15 	stw	r2,-12(fp)
 4027068:	00000d06 	br	40270a0 <m_adj+0xa8>
         }
         else
         {
            m->m_len -= len;
 402706c:	e0bffd17 	ldw	r2,-12(fp)
 4027070:	10c00217 	ldw	r3,8(r2)
 4027074:	e0bfff17 	ldw	r2,-4(fp)
 4027078:	1887c83a 	sub	r3,r3,r2
 402707c:	e0bffd17 	ldw	r2,-12(fp)
 4027080:	10c00215 	stw	r3,8(r2)
            m->m_data += len;
 4027084:	e0bffd17 	ldw	r2,-12(fp)
 4027088:	10c00317 	ldw	r3,12(r2)
 402708c:	e0bfff17 	ldw	r2,-4(fp)
 4027090:	1887883a 	add	r3,r3,r2
 4027094:	e0bffd17 	ldw	r2,-12(fp)
 4027098:	10c00315 	stw	r3,12(r2)
            break;
 402709c:	00004606 	br	40271b8 <m_adj+0x1c0>
   if ((m = mp) == NULL)
      return;

   if (len >= 0) 
   {
      while (m != NULL && len > 0) 
 40270a0:	e0bffd17 	ldw	r2,-12(fp)
 40270a4:	1005003a 	cmpeq	r2,r2,zero
 40270a8:	1000431e 	bne	r2,zero,40271b8 <m_adj+0x1c0>
 40270ac:	e0bfff17 	ldw	r2,-4(fp)
 40270b0:	10800048 	cmpgei	r2,r2,1
 40270b4:	103fde1e 	bne	r2,zero,4027030 <m_adj+0x38>
 40270b8:	00003f06 	br	40271b8 <m_adj+0x1c0>
       * calculating its length and finding the last mbuf.
       * If the adjustment only affects this mbuf, then just
       * adjust and return.  Otherwise, rescan and truncate
       * after the remaining size.
       */
      len = -len;
 40270bc:	e0bfff17 	ldw	r2,-4(fp)
 40270c0:	0085c83a 	sub	r2,zero,r2
 40270c4:	e0bfff15 	stw	r2,-4(fp)
      count = 0;
 40270c8:	e03ffc15 	stw	zero,-16(fp)
      for (;;) 
      {
         count += m->m_len;
 40270cc:	e0bffd17 	ldw	r2,-12(fp)
 40270d0:	10c00217 	ldw	r3,8(r2)
 40270d4:	e0bffc17 	ldw	r2,-16(fp)
 40270d8:	1885883a 	add	r2,r3,r2
 40270dc:	e0bffc15 	stw	r2,-16(fp)
         if (m->m_next == (struct mbuf *)0)
 40270e0:	e0bffd17 	ldw	r2,-12(fp)
 40270e4:	10800617 	ldw	r2,24(r2)
 40270e8:	1005003a 	cmpeq	r2,r2,zero
 40270ec:	1000041e 	bne	r2,zero,4027100 <m_adj+0x108>
            break;
         m = m->m_next;
 40270f0:	e0bffd17 	ldw	r2,-12(fp)
 40270f4:	10800617 	ldw	r2,24(r2)
 40270f8:	e0bffd15 	stw	r2,-12(fp)
      }
 40270fc:	003ff306 	br	40270cc <m_adj+0xd4>
      if (m->m_len >= (unsigned)len)
 4027100:	e0bffd17 	ldw	r2,-12(fp)
 4027104:	10c00217 	ldw	r3,8(r2)
 4027108:	e0bfff17 	ldw	r2,-4(fp)
 402710c:	18800736 	bltu	r3,r2,402712c <m_adj+0x134>
      {
         m->m_len -= len;
 4027110:	e0bffd17 	ldw	r2,-12(fp)
 4027114:	10c00217 	ldw	r3,8(r2)
 4027118:	e0bfff17 	ldw	r2,-4(fp)
 402711c:	1887c83a 	sub	r3,r3,r2
 4027120:	e0bffd17 	ldw	r2,-12(fp)
 4027124:	10c00215 	stw	r3,8(r2)
         return;
 4027128:	00002306 	br	40271b8 <m_adj+0x1c0>
      }
      count -= len;
 402712c:	e0fffc17 	ldw	r3,-16(fp)
 4027130:	e0bfff17 	ldw	r2,-4(fp)
 4027134:	1885c83a 	sub	r2,r3,r2
 4027138:	e0bffc15 	stw	r2,-16(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
 402713c:	e0bffe17 	ldw	r2,-8(fp)
 4027140:	e0bffd15 	stw	r2,-12(fp)
 4027144:	00001006 	br	4027188 <m_adj+0x190>
      {
         if (m->m_len >= (unsigned)count)
 4027148:	e0bffd17 	ldw	r2,-12(fp)
 402714c:	10c00217 	ldw	r3,8(r2)
 4027150:	e0bffc17 	ldw	r2,-16(fp)
 4027154:	18800436 	bltu	r3,r2,4027168 <m_adj+0x170>
         {
            m->m_len = count;
 4027158:	e0fffc17 	ldw	r3,-16(fp)
 402715c:	e0bffd17 	ldw	r2,-12(fp)
 4027160:	10c00215 	stw	r3,8(r2)
            break;
 4027164:	00000e06 	br	40271a0 <m_adj+0x1a8>
         }
         count -= m->m_len;
 4027168:	e0fffc17 	ldw	r3,-16(fp)
 402716c:	e0bffd17 	ldw	r2,-12(fp)
 4027170:	10800217 	ldw	r2,8(r2)
 4027174:	1885c83a 	sub	r2,r3,r2
 4027178:	e0bffc15 	stw	r2,-16(fp)
      /*
       * Correct length for chain is "count".
       * Find the mbuf with last data, adjust its length,
       * and toss data from remaining mbufs on chain.
       */
      for (m = mp; m; m = m->m_next)
 402717c:	e0bffd17 	ldw	r2,-12(fp)
 4027180:	10800617 	ldw	r2,24(r2)
 4027184:	e0bffd15 	stw	r2,-12(fp)
 4027188:	e0bffd17 	ldw	r2,-12(fp)
 402718c:	1004c03a 	cmpne	r2,r2,zero
 4027190:	103fed1e 	bne	r2,zero,4027148 <m_adj+0x150>
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
 4027194:	00000206 	br	40271a0 <m_adj+0x1a8>
         m->m_len = 0;
 4027198:	e0bffd17 	ldw	r2,-12(fp)
 402719c:	10000215 	stw	zero,8(r2)
            m->m_len = count;
            break;
         }
         count -= m->m_len;
      }
      while ((m = m->m_next) != (struct mbuf *)NULL)
 40271a0:	e0bffd17 	ldw	r2,-12(fp)
 40271a4:	10800617 	ldw	r2,24(r2)
 40271a8:	e0bffd15 	stw	r2,-12(fp)
 40271ac:	e0bffd17 	ldw	r2,-12(fp)
 40271b0:	1004c03a 	cmpne	r2,r2,zero
 40271b4:	103ff81e 	bne	r2,zero,4027198 <m_adj+0x1a0>
         m->m_len = 0;
   }
}
 40271b8:	e037883a 	mov	sp,fp
 40271bc:	df000017 	ldw	fp,0(sp)
 40271c0:	dec00104 	addi	sp,sp,4
 40271c4:	f800283a 	ret

040271c8 <mbuf_len>:
 * RETURNS: 
 */

int
mbuf_len (struct mbuf * m)
{
 40271c8:	defffd04 	addi	sp,sp,-12
 40271cc:	df000215 	stw	fp,8(sp)
 40271d0:	df000204 	addi	fp,sp,8
 40271d4:	e13fff15 	stw	r4,-4(fp)
   int   len   =  0;
 40271d8:	e03ffe15 	stw	zero,-8(fp)

   while (m)
 40271dc:	00000806 	br	4027200 <mbuf_len+0x38>
   {
      len += m->m_len;
 40271e0:	e0bfff17 	ldw	r2,-4(fp)
 40271e4:	10c00217 	ldw	r3,8(r2)
 40271e8:	e0bffe17 	ldw	r2,-8(fp)
 40271ec:	1885883a 	add	r2,r3,r2
 40271f0:	e0bffe15 	stw	r2,-8(fp)
      m = m->m_next;
 40271f4:	e0bfff17 	ldw	r2,-4(fp)
 40271f8:	10800617 	ldw	r2,24(r2)
 40271fc:	e0bfff15 	stw	r2,-4(fp)
int
mbuf_len (struct mbuf * m)
{
   int   len   =  0;

   while (m)
 4027200:	e0bfff17 	ldw	r2,-4(fp)
 4027204:	1004c03a 	cmpne	r2,r2,zero
 4027208:	103ff51e 	bne	r2,zero,40271e0 <mbuf_len+0x18>
   {
      len += m->m_len;
      m = m->m_next;
   }
   return len;
 402720c:	e0bffe17 	ldw	r2,-8(fp)
}
 4027210:	e037883a 	mov	sp,fp
 4027214:	df000017 	ldw	fp,0(sp)
 4027218:	dec00104 	addi	sp,sp,4
 402721c:	f800283a 	ret

04027220 <dtom>:
 * RETURNS: 
 */

struct mbuf *  
dtom(void * data)
{
 4027220:	defffa04 	addi	sp,sp,-24
 4027224:	dfc00515 	stw	ra,20(sp)
 4027228:	df000415 	stw	fp,16(sp)
 402722c:	df000404 	addi	fp,sp,16
 4027230:	e13ffe15 	stw	r4,-8(fp)
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 4027234:	008101b4 	movhi	r2,1030
 4027238:	10a35904 	addi	r2,r2,-29340
 402723c:	10800017 	ldw	r2,0(r2)
 4027240:	e0bffd15 	stw	r2,-12(fp)
 4027244:	00001306 	br	4027294 <dtom+0x74>
   {
      m = (struct mbuf *)qptr;
 4027248:	e0bffd17 	ldw	r2,-12(fp)
 402724c:	e0bffc15 	stw	r2,-16(fp)

      if (IN_RANGE(m->m_base, m->m_memsz, (char*)data))
 4027250:	e0bffc17 	ldw	r2,-16(fp)
 4027254:	10c00417 	ldw	r3,16(r2)
 4027258:	e0bffe17 	ldw	r2,-8(fp)
 402725c:	10c00a36 	bltu	r2,r3,4027288 <dtom+0x68>
 4027260:	e0bffc17 	ldw	r2,-16(fp)
 4027264:	10c00417 	ldw	r3,16(r2)
 4027268:	e0bffc17 	ldw	r2,-16(fp)
 402726c:	10800517 	ldw	r2,20(r2)
 4027270:	1887883a 	add	r3,r3,r2
 4027274:	e0bffe17 	ldw	r2,-8(fp)
 4027278:	10c0032e 	bgeu	r2,r3,4027288 <dtom+0x68>
         return (struct mbuf *)qptr;
 402727c:	e0bffd17 	ldw	r2,-12(fp)
 4027280:	e0bfff15 	stw	r2,-4(fp)
 4027284:	00000a06 	br	40272b0 <dtom+0x90>
dtom(void * data)
{
   qp qptr;
   struct mbuf *  m;

   for (qptr = mbufq.q_head; qptr; qptr = qptr->qe_next)
 4027288:	e0bffd17 	ldw	r2,-12(fp)
 402728c:	10800017 	ldw	r2,0(r2)
 4027290:	e0bffd15 	stw	r2,-12(fp)
 4027294:	e0bffd17 	ldw	r2,-12(fp)
 4027298:	1004c03a 	cmpne	r2,r2,zero
 402729c:	103fea1e 	bne	r2,zero,4027248 <dtom+0x28>
      else
         continue;

   }

   panic("dtom");    /* data not found in any "in use" mbuf */
 40272a0:	01010174 	movhi	r4,1029
 40272a4:	212e3404 	addi	r4,r4,-18224
 40272a8:	4020e100 	call	4020e10 <panic>
   return NULL;
 40272ac:	e03fff15 	stw	zero,-4(fp)
 40272b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40272b4:	e037883a 	mov	sp,fp
 40272b8:	dfc00117 	ldw	ra,4(sp)
 40272bc:	df000017 	ldw	fp,0(sp)
 40272c0:	dec00204 	addi	sp,sp,8
 40272c4:	f800283a 	ret

040272c8 <remque>:
};


void
remque (void * arg)
{
 40272c8:	defffd04 	addi	sp,sp,-12
 40272cc:	df000215 	stw	fp,8(sp)
 40272d0:	df000204 	addi	fp,sp,8
 40272d4:	e13fff15 	stw	r4,-4(fp)
   struct bsdq *  old;

   old = (struct bsdq *)arg;
 40272d8:	e0bfff17 	ldw	r2,-4(fp)
 40272dc:	e0bffe15 	stw	r2,-8(fp)
   if (!old->prev) return;
 40272e0:	e0bffe17 	ldw	r2,-8(fp)
 40272e4:	10800117 	ldw	r2,4(r2)
 40272e8:	1005003a 	cmpeq	r2,r2,zero
 40272ec:	10000e1e 	bne	r2,zero,4027328 <remque+0x60>
      old->prev->next = old->next;
 40272f0:	e0bffe17 	ldw	r2,-8(fp)
 40272f4:	10c00117 	ldw	r3,4(r2)
 40272f8:	e0bffe17 	ldw	r2,-8(fp)
 40272fc:	10800017 	ldw	r2,0(r2)
 4027300:	18800015 	stw	r2,0(r3)
   if (old->next)
 4027304:	e0bffe17 	ldw	r2,-8(fp)
 4027308:	10800017 	ldw	r2,0(r2)
 402730c:	1005003a 	cmpeq	r2,r2,zero
 4027310:	1000051e 	bne	r2,zero,4027328 <remque+0x60>
      old->next->prev = old->prev;
 4027314:	e0bffe17 	ldw	r2,-8(fp)
 4027318:	10c00017 	ldw	r3,0(r2)
 402731c:	e0bffe17 	ldw	r2,-8(fp)
 4027320:	10800117 	ldw	r2,4(r2)
 4027324:	18800115 	stw	r2,4(r3)
}
 4027328:	e037883a 	mov	sp,fp
 402732c:	df000017 	ldw	fp,0(sp)
 4027330:	dec00104 	addi	sp,sp,4
 4027334:	f800283a 	ret

04027338 <insque>:
 * RETURNS: 
 */

void
insque(void * n, void * p)
{
 4027338:	defffb04 	addi	sp,sp,-20
 402733c:	df000415 	stw	fp,16(sp)
 4027340:	df000404 	addi	fp,sp,16
 4027344:	e13ffe15 	stw	r4,-8(fp)
 4027348:	e17fff15 	stw	r5,-4(fp)
   struct bsdq *  newe, *  prev;

   newe = (struct bsdq *)n;
 402734c:	e0bffe17 	ldw	r2,-8(fp)
 4027350:	e0bffd15 	stw	r2,-12(fp)
   prev = (struct bsdq *)p;
 4027354:	e0bfff17 	ldw	r2,-4(fp)
 4027358:	e0bffc15 	stw	r2,-16(fp)
   newe->next = prev->next;
 402735c:	e0bffc17 	ldw	r2,-16(fp)
 4027360:	10c00017 	ldw	r3,0(r2)
 4027364:	e0bffd17 	ldw	r2,-12(fp)
 4027368:	10c00015 	stw	r3,0(r2)
   newe->prev = prev;
 402736c:	e0fffd17 	ldw	r3,-12(fp)
 4027370:	e0bffc17 	ldw	r2,-16(fp)
 4027374:	18800115 	stw	r2,4(r3)
   prev->next = newe;
 4027378:	e0fffc17 	ldw	r3,-16(fp)
 402737c:	e0bffd17 	ldw	r2,-12(fp)
 4027380:	18800015 	stw	r2,0(r3)
   if (newe->next)
 4027384:	e0bffd17 	ldw	r2,-12(fp)
 4027388:	10800017 	ldw	r2,0(r2)
 402738c:	1005003a 	cmpeq	r2,r2,zero
 4027390:	1000041e 	bne	r2,zero,40273a4 <insque+0x6c>
      newe->next->prev = newe;
 4027394:	e0bffd17 	ldw	r2,-12(fp)
 4027398:	10c00017 	ldw	r3,0(r2)
 402739c:	e0bffd17 	ldw	r2,-12(fp)
 40273a0:	18800115 	stw	r2,4(r3)
}
 40273a4:	e037883a 	mov	sp,fp
 40273a8:	df000017 	ldw	fp,0(sp)
 40273ac:	dec00104 	addi	sp,sp,4
 40273b0:	f800283a 	ret

040273b4 <nptcp_init>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
nptcp_init()
{
 40273b4:	defffb04 	addi	sp,sp,-20
 40273b8:	dfc00415 	stw	ra,16(sp)
 40273bc:	df000315 	stw	fp,12(sp)
 40273c0:	df000304 	addi	fp,sp,12
    * buffers, soreceive() can't complete and the packet buffers stay 
    * on the queue, so we allocate 3 extra mbufs in the hope that 
    * this will allow soreceive() to complete and free up the packet 
    * buffers. yes, its kind of an ugly hack and 3 is a wild guess.
    */
   unsigned bufcount = (lilbufs + bigbufs) * 2 + 3;
 40273c4:	00810174 	movhi	r2,1029
 40273c8:	10b9f104 	addi	r2,r2,-6204
 40273cc:	10c00017 	ldw	r3,0(r2)
 40273d0:	00810174 	movhi	r2,1029
 40273d4:	10b9f304 	addi	r2,r2,-6196
 40273d8:	10800017 	ldw	r2,0(r2)
 40273dc:	1885883a 	add	r2,r3,r2
 40273e0:	1085883a 	add	r2,r2,r2
 40273e4:	108000c4 	addi	r2,r2,3
 40273e8:	e0bffe15 	stw	r2,-8(fp)
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
 40273ec:	008101b4 	movhi	r2,1030
 40273f0:	10a34504 	addi	r2,r2,-29420
 40273f4:	10000015 	stw	zero,0(r2)
 40273f8:	10000115 	stw	zero,4(r2)
 40273fc:	10000215 	stw	zero,8(r2)
 4027400:	10000315 	stw	zero,12(r2)
 4027404:	10000415 	stw	zero,16(r2)
   MEMSET(&mbufq, 0, sizeof(mbufq));
 4027408:	008101b4 	movhi	r2,1030
 402740c:	10a35904 	addi	r2,r2,-29340
 4027410:	10000015 	stw	zero,0(r2)
 4027414:	10000115 	stw	zero,4(r2)
 4027418:	10000215 	stw	zero,8(r2)
 402741c:	10000315 	stw	zero,12(r2)
 4027420:	10000415 	stw	zero,16(r2)
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
 4027424:	008101b4 	movhi	r2,1030
 4027428:	10a35e04 	addi	r2,r2,-29320
 402742c:	10000015 	stw	zero,0(r2)
 4027430:	10000115 	stw	zero,4(r2)
 4027434:	10000215 	stw	zero,8(r2)
 4027438:	10000315 	stw	zero,12(r2)
 402743c:	10000415 	stw	zero,16(r2)
   for (i = 0; i < (int)bufcount; i++)
 4027440:	e03fff15 	stw	zero,-4(fp)
 4027444:	00001606 	br	40274a0 <nptcp_init+0xec>
   {
      m = MBU_ALLOC(sizeof(struct mbuf));
 4027448:	01000904 	movi	r4,36
 402744c:	40265f80 	call	40265f8 <npalloc>
 4027450:	e0bffd15 	stw	r2,-12(fp)
      if (!m)  /* malloc error, bail out */
 4027454:	e0bffd17 	ldw	r2,-12(fp)
 4027458:	1004c03a 	cmpne	r2,r2,zero
 402745c:	1000031e 	bne	r2,zero,402746c <nptcp_init+0xb8>
         panic("tcpinit");
 4027460:	01010174 	movhi	r4,1029
 4027464:	212e3604 	addi	r4,r4,-18216
 4027468:	4020e100 	call	4020e10 <panic>
      m->m_type = MT_FREE;
 402746c:	e0bffd17 	ldw	r2,-12(fp)
 4027470:	10000815 	stw	zero,32(r2)
      m->m_len = 0;
 4027474:	e0bffd17 	ldw	r2,-12(fp)
 4027478:	10000215 	stw	zero,8(r2)
      m->m_data = NULL;
 402747c:	e0bffd17 	ldw	r2,-12(fp)
 4027480:	10000315 	stw	zero,12(r2)
      putq(&mfreeq, (qp)m);
 4027484:	e17ffd17 	ldw	r5,-12(fp)
 4027488:	010101b4 	movhi	r4,1030
 402748c:	21235e04 	addi	r4,r4,-29320
 4027490:	40255440 	call	4025544 <putq>
   struct mbuf *  m; /* scratch mbuf for mfreeq init */

   MEMSET(&soq, 0, sizeof(soq));    /* Set socket queue to NULLs */
   MEMSET(&mbufq, 0, sizeof(mbufq));
   MEMSET(&mfreeq, 0, sizeof(mfreeq));
   for (i = 0; i < (int)bufcount; i++)
 4027494:	e0bfff17 	ldw	r2,-4(fp)
 4027498:	10800044 	addi	r2,r2,1
 402749c:	e0bfff15 	stw	r2,-4(fp)
 40274a0:	e0fffe17 	ldw	r3,-8(fp)
 40274a4:	e0bfff17 	ldw	r2,-4(fp)
 40274a8:	10ffe716 	blt	r2,r3,4027448 <nptcp_init+0x94>
      m->m_type = MT_FREE;
      m->m_len = 0;
      m->m_data = NULL;
      putq(&mfreeq, (qp)m);
   }
   mfreeq.q_min = (int)bufcount;   /* this should match q_max and q_len */
 40274ac:	e0fffe17 	ldw	r3,-8(fp)
 40274b0:	008101b4 	movhi	r2,1030
 40274b4:	10a35e04 	addi	r2,r2,-29320
 40274b8:	10c00415 	stw	r3,16(r2)
   tcpmib.tcpRtoAlgorithm = 4;     /* Van Jacobson's algorithm */
   tcpmib.tcpRtoMin = TCPTV_MIN * 1000;      /* PR_SLOWHZ */
   tcpmib.tcpRtoMax = TCPTV_REXMTMAX * 1000; /* PR_SLOWHZ */
#endif

   tcp_init();    /* call the BSD init in tcp_usr.c */
 40274bc:	40326d00 	call	40326d0 <tcp_init>

#ifdef TCP_MENUS
   install_menu(&tcpmenu[0]);
#endif   /* IN_MENUS */

   return 0;   /* good return */
 40274c0:	0005883a 	mov	r2,zero
}
 40274c4:	e037883a 	mov	sp,fp
 40274c8:	dfc00117 	ldw	ra,4(sp)
 40274cc:	df000017 	ldw	fp,0(sp)
 40274d0:	dec00204 	addi	sp,sp,8
 40274d4:	f800283a 	ret

040274d8 <tcp_rcv>:

#ifdef IP_V4
 
int
tcp_rcv(PACKET pkt)     /* NOTE: pkt has nb_prot pointing to IP header */
{
 40274d8:	defff804 	addi	sp,sp,-32
 40274dc:	dfc00715 	stw	ra,28(sp)
 40274e0:	df000615 	stw	fp,24(sp)
 40274e4:	df000604 	addi	fp,sp,24
 40274e8:	e13ffe15 	stw	r4,-8(fp)

   /* For TCP, the netport IP layer is modified to set nb_prot to the 
    * start of the IP header (not TCP). We need to do some further
    * mods which the BSD code expects:
    */
   bip = (struct ip *)pkt->nb_prot;    /* get ip header */
 40274ec:	e0bffe17 	ldw	r2,-8(fp)
 40274f0:	10800317 	ldw	r2,12(r2)
 40274f4:	e0bffc15 	stw	r2,-16(fp)
   len = ntohs(bip->ip_len);  /* get length in local endian */
 40274f8:	e0bffc17 	ldw	r2,-16(fp)
 40274fc:	1080008b 	ldhu	r2,2(r2)
 4027500:	10bfffcc 	andi	r2,r2,65535
 4027504:	1004d23a 	srli	r2,r2,8
 4027508:	10803fcc 	andi	r2,r2,255
 402750c:	1009883a 	mov	r4,r2
 4027510:	e0bffc17 	ldw	r2,-16(fp)
 4027514:	1080008b 	ldhu	r2,2(r2)
 4027518:	10bfffcc 	andi	r2,r2,65535
 402751c:	1004923a 	slli	r2,r2,8
 4027520:	1007883a 	mov	r3,r2
 4027524:	00bfc004 	movi	r2,-256
 4027528:	1884703a 	and	r2,r3,r2
 402752c:	2084b03a 	or	r2,r4,r2
 4027530:	e0bffa0d 	sth	r2,-24(fp)

   /* verify checksum of received packet */

   tcpp = (struct tcphdr *)ip_data(bip);
 4027534:	e0bffc17 	ldw	r2,-16(fp)
 4027538:	10800003 	ldbu	r2,0(r2)
 402753c:	10803fcc 	andi	r2,r2,255
 4027540:	108003cc 	andi	r2,r2,15
 4027544:	1085883a 	add	r2,r2,r2
 4027548:	1085883a 	add	r2,r2,r2
 402754c:	1007883a 	mov	r3,r2
 4027550:	e0bffc17 	ldw	r2,-16(fp)
 4027554:	1885883a 	add	r2,r3,r2
 4027558:	e0bffb15 	stw	r2,-20(fp)
   if (tcp_cksum(bip) != tcpp->th_sum)
 402755c:	e13ffc17 	ldw	r4,-16(fp)
 4027560:	4041fd00 	call	4041fd0 <tcp_cksum>
 4027564:	1007883a 	mov	r3,r2
 4027568:	e0bffb17 	ldw	r2,-20(fp)
 402756c:	1080040b 	ldhu	r2,16(r2)
 4027570:	18ffffcc 	andi	r3,r3,65535
 4027574:	10bfffcc 	andi	r2,r2,65535
 4027578:	18801726 	beq	r3,r2,40275d8 <tcp_rcv+0x100>
   {
      TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 402757c:	008101b4 	movhi	r2,1030
 4027580:	10a34a04 	addi	r2,r2,-29400
 4027584:	10800d17 	ldw	r2,52(r2)
 4027588:	10c00044 	addi	r3,r2,1
 402758c:	008101b4 	movhi	r2,1030
 4027590:	10a34a04 	addi	r2,r2,-29400
 4027594:	10c00d15 	stw	r3,52(r2)
      tcpstat.tcps_rcvbadsum++;  /* keep BSD stats */
 4027598:	008101b4 	movhi	r2,1030
 402759c:	10a37804 	addi	r2,r2,-29216
 40275a0:	10801c17 	ldw	r2,112(r2)
 40275a4:	10c00044 	addi	r3,r2,1
 40275a8:	008101b4 	movhi	r2,1030
 40275ac:	10a37804 	addi	r2,r2,-29216
 40275b0:	10c01c15 	stw	r3,112(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40275b4:	01000084 	movi	r4,2
 40275b8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);  /* punt packet */
 40275bc:	e13ffe17 	ldw	r4,-8(fp)
 40275c0:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40275c4:	01000084 	movi	r4,2
 40275c8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
 40275cc:	00bff804 	movi	r2,-32
 40275d0:	e0bfff15 	stw	r2,-4(fp)
 40275d4:	00003506 	br	40276ac <tcp_rcv+0x1d4>
   }

   m_in = m_getnbuf(MT_RXDATA, 0);
 40275d8:	01000044 	movi	r4,1
 40275dc:	000b883a 	mov	r5,zero
 40275e0:	40269b40 	call	40269b4 <m_getnbuf>
 40275e4:	e0bffd15 	stw	r2,-12(fp)
   if (!m_in){
 40275e8:	e0bffd17 	ldw	r2,-12(fp)
 40275ec:	1004c03a 	cmpne	r2,r2,zero
 40275f0:	1000091e 	bne	r2,zero,4027618 <tcp_rcv+0x140>
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40275f4:	01000084 	movi	r4,2
 40275f8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 40275fc:	e13ffe17 	ldw	r4,-8(fp)
 4027600:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027604:	01000084 	movi	r4,2
 4027608:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;  
 402760c:	00bffa84 	movi	r2,-22
 4027610:	e0bfff15 	stw	r2,-4(fp)
 4027614:	00002506 	br	40276ac <tcp_rcv+0x1d4>
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);      /* measure time in TCP */

   /* subtract IP header length from total IP packet length */
   len -= ((unshort)(bip->ip_ver_ihl & 0x0f) << 2);
 4027618:	e0bffc17 	ldw	r2,-16(fp)
 402761c:	10800003 	ldbu	r2,0(r2)
 4027620:	10803fcc 	andi	r2,r2,255
 4027624:	108003cc 	andi	r2,r2,15
 4027628:	1085883a 	add	r2,r2,r2
 402762c:	1085883a 	add	r2,r2,r2
 4027630:	1007883a 	mov	r3,r2
 4027634:	e0bffa0b 	ldhu	r2,-24(fp)
 4027638:	10c5c83a 	sub	r2,r2,r3
 402763c:	e0bffa0d 	sth	r2,-24(fp)
   bip->ip_len = len;   /* put TCP length in struct for TCP code to use */
 4027640:	e0fffc17 	ldw	r3,-16(fp)
 4027644:	e0bffa0b 	ldhu	r2,-24(fp)
 4027648:	1880008d 	sth	r2,2(r3)

   /* set mbuf to point to start of IP header (not TCP) */
   m_in->pkt = pkt;
 402764c:	e0fffd17 	ldw	r3,-12(fp)
 4027650:	e0bffe17 	ldw	r2,-8(fp)
 4027654:	18800115 	stw	r2,4(r3)
   m_in->m_data = pkt->nb_prot;
 4027658:	e0bffe17 	ldw	r2,-8(fp)
 402765c:	10c00317 	ldw	r3,12(r2)
 4027660:	e0bffd17 	ldw	r2,-12(fp)
 4027664:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 4027668:	e0bffe17 	ldw	r2,-8(fp)
 402766c:	10c00417 	ldw	r3,16(r2)
 4027670:	e0bffd17 	ldw	r2,-12(fp)
 4027674:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;     /* ??? */
 4027678:	e0bffe17 	ldw	r2,-8(fp)
 402767c:	10c00117 	ldw	r3,4(r2)
 4027680:	e0bffd17 	ldw	r2,-12(fp)
 4027684:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;    /* ??? */
 4027688:	e0bffe17 	ldw	r2,-8(fp)
 402768c:	10c00217 	ldw	r3,8(r2)
 4027690:	e0bffd17 	ldw	r2,-12(fp)
 4027694:	10c00515 	stw	r3,20(r2)

   tcp_input(m_in, pkt->net);
 4027698:	e0bffe17 	ldw	r2,-8(fp)
 402769c:	11400617 	ldw	r5,24(r2)
 40276a0:	e13ffd17 	ldw	r4,-12(fp)
 40276a4:	402e7900 	call	402e790 <tcp_input>

   IN_PROFILER(PF_TCP, PF_EXIT);      /* measure time in TCP */

   return 0;
 40276a8:	e03fff15 	stw	zero,-4(fp)
 40276ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40276b0:	e037883a 	mov	sp,fp
 40276b4:	dfc00117 	ldw	ra,4(sp)
 40276b8:	df000017 	ldw	fp,0(sp)
 40276bc:	dec00204 	addi	sp,sp,8
 40276c0:	f800283a 	ret

040276c4 <ip_output>:
 * RETURNS: 
 */

int
ip_output(struct mbuf * data, struct   ip_socopts * so_optsPack) /* mbuf chain with data to send */
{
 40276c4:	defff304 	addi	sp,sp,-52
 40276c8:	dfc00c15 	stw	ra,48(sp)
 40276cc:	df000b15 	stw	fp,44(sp)
 40276d0:	df000b04 	addi	fp,sp,44
 40276d4:	e13ffd15 	stw	r4,-12(fp)
 40276d8:	e17ffe15 	stw	r5,-8(fp)
    * little copying as possible. Typically the mbufs will be either 
    * 1) a single mbuf with iptcp header info only (e.g.tcp ACK 
    * packet), or 2) iptcp header with data mbuf chained to it, or 3) 
    * #2) with a tiny option data mbuf between header and data. 
    */
   if ((data->m_next))
 40276dc:	e0bffd17 	ldw	r2,-12(fp)
 40276e0:	10800617 	ldw	r2,24(r2)
 40276e4:	1005003a 	cmpeq	r2,r2,zero
 40276e8:	1001101e 	bne	r2,zero,4027b2c <ip_output+0x468>
   {
      m1 = data;
 40276ec:	e0bffd17 	ldw	r2,-12(fp)
 40276f0:	e0bff915 	stw	r2,-28(fp)
      m2 = data->m_next;
 40276f4:	e0bffd17 	ldw	r2,-12(fp)
 40276f8:	10800617 	ldw	r2,24(r2)
 40276fc:	e0bff815 	stw	r2,-32(fp)

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 4027700:	00003406 	br	40277d4 <ip_output+0x110>
      {
         pkt = m1->pkt;
 4027704:	e0bff917 	ldw	r2,-28(fp)
 4027708:	10800117 	ldw	r2,4(r2)
 402770c:	e0bffa15 	stw	r2,-24(fp)
         if ((pkt->nb_buff + pkt->nb_blen) > /* make sure m2 will fit in m1 */
 4027710:	e0bffa17 	ldw	r2,-24(fp)
 4027714:	10c00117 	ldw	r3,4(r2)
 4027718:	e0bffa17 	ldw	r2,-24(fp)
 402771c:	10800217 	ldw	r2,8(r2)
 4027720:	1889883a 	add	r4,r3,r2
 4027724:	e0bff917 	ldw	r2,-28(fp)
 4027728:	10c00317 	ldw	r3,12(r2)
 402772c:	e0bff917 	ldw	r2,-28(fp)
 4027730:	10800217 	ldw	r2,8(r2)
 4027734:	1887883a 	add	r3,r3,r2
 4027738:	e0bff817 	ldw	r2,-32(fp)
 402773c:	10800217 	ldw	r2,8(r2)
 4027740:	1885883a 	add	r2,r3,r2
 4027744:	1100822e 	bgeu	r2,r4,4027950 <ip_output+0x28c>
             (m1->m_data + m1->m_len + m2->m_len))
         {
            MEMCPY((m1->m_data + m1->m_len), m2->m_data, m2->m_len);
 4027748:	e0bff917 	ldw	r2,-28(fp)
 402774c:	10c00317 	ldw	r3,12(r2)
 4027750:	e0bff917 	ldw	r2,-28(fp)
 4027754:	10800217 	ldw	r2,8(r2)
 4027758:	1887883a 	add	r3,r3,r2
 402775c:	e0bff817 	ldw	r2,-32(fp)
 4027760:	11400317 	ldw	r5,12(r2)
 4027764:	e0bff817 	ldw	r2,-32(fp)
 4027768:	10800217 	ldw	r2,8(r2)
 402776c:	1809883a 	mov	r4,r3
 4027770:	100d883a 	mov	r6,r2
 4027774:	4001de40 	call	4001de4 <memcpy>
            m1->m_len += m2->m_len;
 4027778:	e0bff917 	ldw	r2,-28(fp)
 402777c:	10c00217 	ldw	r3,8(r2)
 4027780:	e0bff817 	ldw	r2,-32(fp)
 4027784:	10800217 	ldw	r2,8(r2)
 4027788:	1887883a 	add	r3,r3,r2
 402778c:	e0bff917 	ldw	r2,-28(fp)
 4027790:	10c00215 	stw	r3,8(r2)
            m1->m_next = m2->m_next;
 4027794:	e0bff817 	ldw	r2,-32(fp)
 4027798:	10c00617 	ldw	r3,24(r2)
 402779c:	e0bff917 	ldw	r2,-28(fp)
 40277a0:	10c00615 	stw	r3,24(r2)
            m_free(m2);    /* free this m2.... */
 40277a4:	e13ff817 	ldw	r4,-32(fp)
 40277a8:	4026b5c0 	call	4026b5c <m_free>
            m2 = m1->m_next;  /* ...and thread the next one */
 40277ac:	e0bff917 	ldw	r2,-28(fp)
 40277b0:	10800617 	ldw	r2,24(r2)
 40277b4:	e0bff815 	stw	r2,-32(fp)
            tcpstat.tcps_oappends++;
 40277b8:	008101b4 	movhi	r2,1030
 40277bc:	10a37804 	addi	r2,r2,-29216
 40277c0:	10803317 	ldw	r2,204(r2)
 40277c4:	10c00044 	addi	r3,r2,1
 40277c8:	008101b4 	movhi	r2,1030
 40277cc:	10a37804 	addi	r2,r2,-29216
 40277d0:	10c03315 	stw	r3,204(r2)
   {
      m1 = data;
      m2 = data->m_next;

      /* If m2 is small (e.g. options), copy it to m1 and free it */
      while (m2 && (m2->m_len < 10))
 40277d4:	e0bff817 	ldw	r2,-32(fp)
 40277d8:	1005003a 	cmpeq	r2,r2,zero
 40277dc:	10005c1e 	bne	r2,zero,4027950 <ip_output+0x28c>
 40277e0:	e0bff817 	ldw	r2,-32(fp)
 40277e4:	10800217 	ldw	r2,8(r2)
 40277e8:	108002b0 	cmpltui	r2,r2,10
 40277ec:	103fc51e 	bne	r2,zero,4027704 <ip_output+0x40>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
 40277f0:	00005706 	br	4027950 <ip_output+0x28c>
      {
         /* try prepending m1 to m2, first see if it fits: */
         e = m2->m_data - m2->pkt->nb_buff;  /* e is prepend space */
 40277f4:	e0bff817 	ldw	r2,-32(fp)
 40277f8:	10800317 	ldw	r2,12(r2)
 40277fc:	1007883a 	mov	r3,r2
 4027800:	e0bff817 	ldw	r2,-32(fp)
 4027804:	10800117 	ldw	r2,4(r2)
 4027808:	10800117 	ldw	r2,4(r2)
 402780c:	1885c83a 	sub	r2,r3,r2
 4027810:	e0bff615 	stw	r2,-40(fp)
         if (e < MaxLnh)
 4027814:	00810174 	movhi	r2,1029
 4027818:	1081bd04 	addi	r2,r2,1780
 402781c:	10c00017 	ldw	r3,0(r2)
 4027820:	e0bff617 	ldw	r2,-40(fp)
 4027824:	10c00a0e 	bge	r2,r3,4027850 <ip_output+0x18c>
         { 
#ifdef NPDEBUG
            dprintf("nptcp: MaxLnh:%d, e:%d\n", MaxLnh, e);
 4027828:	00810174 	movhi	r2,1029
 402782c:	1081bd04 	addi	r2,r2,1780
 4027830:	11400017 	ldw	r5,0(r2)
 4027834:	01010174 	movhi	r4,1029
 4027838:	212e3804 	addi	r4,r4,-18208
 402783c:	e1bff617 	ldw	r6,-40(fp)
 4027840:	400207c0 	call	400207c <printf>
#endif
            panic("tcp_out:mbuf-nbuf");   /* sanity check */
 4027844:	01010174 	movhi	r4,1029
 4027848:	212e3e04 	addi	r4,r4,-18184
 402784c:	4020e100 	call	4020e10 <panic>
         }

         if ((m1->m_len < (unsigned)(e - MaxLnh))  /* leave room for MAC */
 4027850:	e0bff917 	ldw	r2,-28(fp)
 4027854:	11000217 	ldw	r4,8(r2)
 4027858:	00810174 	movhi	r2,1029
 402785c:	1081bd04 	addi	r2,r2,1780
 4027860:	10c00017 	ldw	r3,0(r2)
 4027864:	e0bff617 	ldw	r2,-40(fp)
 4027868:	10c5c83a 	sub	r2,r2,r3
 402786c:	20803b2e 	bgeu	r4,r2,402795c <ip_output+0x298>
 4027870:	e0bff917 	ldw	r2,-28(fp)
 4027874:	10800217 	ldw	r2,8(r2)
 4027878:	108000cc 	andi	r2,r2,3
 402787c:	1004c03a 	cmpne	r2,r2,zero
 4027880:	1000361e 	bne	r2,zero,402795c <ip_output+0x298>
 4027884:	e0bff817 	ldw	r2,-32(fp)
 4027888:	10800317 	ldw	r2,12(r2)
 402788c:	1007883a 	mov	r3,r2
 4027890:	e0bff817 	ldw	r2,-32(fp)
 4027894:	10800117 	ldw	r2,4(r2)
 4027898:	10800117 	ldw	r2,4(r2)
 402789c:	1885c83a 	sub	r2,r3,r2
 40278a0:	10800e18 	cmpnei	r2,r2,56
 40278a4:	10002d1e 	bne	r2,zero,402795c <ip_output+0x298>
             && ((m1->m_len & (ALIGN_TYPE - 1)) == 0)  /* and stay aligned */
             && ((m2->m_data - m2->pkt->nb_buff) == HDRSLEN))   /* be at start */
         {
            MEMCPY((m2->m_data - m1->m_len), m1->m_data, m1->m_len);
 40278a8:	e0bff817 	ldw	r2,-32(fp)
 40278ac:	10c00317 	ldw	r3,12(r2)
 40278b0:	e0bff917 	ldw	r2,-28(fp)
 40278b4:	10800217 	ldw	r2,8(r2)
 40278b8:	1887c83a 	sub	r3,r3,r2
 40278bc:	e0bff917 	ldw	r2,-28(fp)
 40278c0:	11400317 	ldw	r5,12(r2)
 40278c4:	e0bff917 	ldw	r2,-28(fp)
 40278c8:	10800217 	ldw	r2,8(r2)
 40278cc:	1809883a 	mov	r4,r3
 40278d0:	100d883a 	mov	r6,r2
 40278d4:	4001de40 	call	4001de4 <memcpy>
            m2->m_data -= m1->m_len;   /* fix target to reflect prepend */
 40278d8:	e0bff817 	ldw	r2,-32(fp)
 40278dc:	10c00317 	ldw	r3,12(r2)
 40278e0:	e0bff917 	ldw	r2,-28(fp)
 40278e4:	10800217 	ldw	r2,8(r2)
 40278e8:	1887c83a 	sub	r3,r3,r2
 40278ec:	e0bff817 	ldw	r2,-32(fp)
 40278f0:	10c00315 	stw	r3,12(r2)
            m2->m_len += m1->m_len;
 40278f4:	e0bff817 	ldw	r2,-32(fp)
 40278f8:	10c00217 	ldw	r3,8(r2)
 40278fc:	e0bff917 	ldw	r2,-28(fp)
 4027900:	10800217 	ldw	r2,8(r2)
 4027904:	1887883a 	add	r3,r3,r2
 4027908:	e0bff817 	ldw	r2,-32(fp)
 402790c:	10c00215 	stw	r3,8(r2)
            m_free(m1);    /* free head (copied) mbuf */
 4027910:	e13ff917 	ldw	r4,-28(fp)
 4027914:	4026b5c0 	call	4026b5c <m_free>
            data = m1 = m2;   /* move other mbufs up the chain */
 4027918:	e0bff817 	ldw	r2,-32(fp)
 402791c:	e0bff915 	stw	r2,-28(fp)
 4027920:	e0bff917 	ldw	r2,-28(fp)
 4027924:	e0bffd15 	stw	r2,-12(fp)
            m2 = m2->m_next;  /* loop to while(m2) test */
 4027928:	e0bff817 	ldw	r2,-32(fp)
 402792c:	10800617 	ldw	r2,24(r2)
 4027930:	e0bff815 	stw	r2,-32(fp)
            tcpstat.tcps_oprepends++;
 4027934:	008101b4 	movhi	r2,1030
 4027938:	10a37804 	addi	r2,r2,-29216
 402793c:	10803217 	ldw	r2,200(r2)
 4027940:	10c00044 	addi	r3,r2,1
 4027944:	008101b4 	movhi	r2,1030
 4027948:	10a37804 	addi	r2,r2,-29216
 402794c:	10c03215 	stw	r3,200(r2)
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      while (m2)  /* If we still have two or more buffers, more copying: */
 4027950:	e0bff817 	ldw	r2,-32(fp)
 4027954:	1004c03a 	cmpne	r2,r2,zero
 4027958:	103fa61e 	bne	r2,zero,40277f4 <ip_output+0x130>
         }
         else     /* if won't fit, fall to next copy */
            break;
      }

      if (m2)  /* If all else fails, brute force copy: */
 402795c:	e0bff817 	ldw	r2,-32(fp)
 4027960:	1005003a 	cmpeq	r2,r2,zero
 4027964:	1000711e 	bne	r2,zero,4027b2c <ip_output+0x468>
      {
         total = 0;
 4027968:	e03ff515 	stw	zero,-44(fp)
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 402796c:	e0bff917 	ldw	r2,-28(fp)
 4027970:	e0bff715 	stw	r2,-36(fp)
 4027974:	00000806 	br	4027998 <ip_output+0x2d4>
            total += mtmp->m_len;
 4027978:	e0bff717 	ldw	r2,-36(fp)
 402797c:	10c00217 	ldw	r3,8(r2)
 4027980:	e0bff517 	ldw	r2,-44(fp)
 4027984:	1885883a 	add	r2,r3,r2
 4027988:	e0bff515 	stw	r2,-44(fp)
      }

      if (m2)  /* If all else fails, brute force copy: */
      {
         total = 0;
         for (mtmp = m1; mtmp; mtmp = mtmp->m_next)
 402798c:	e0bff717 	ldw	r2,-36(fp)
 4027990:	10800617 	ldw	r2,24(r2)
 4027994:	e0bff715 	stw	r2,-36(fp)
 4027998:	e0bff717 	ldw	r2,-36(fp)
 402799c:	1004c03a 	cmpne	r2,r2,zero
 40279a0:	103ff51e 	bne	r2,zero,4027978 <ip_output+0x2b4>
            total += mtmp->m_len;
         LOCK_NET_RESOURCE(FREEQ_RESID);
 40279a4:	01000084 	movi	r4,2
 40279a8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pkt = pk_alloc(total + HDRSLEN);
 40279ac:	e0bff517 	ldw	r2,-44(fp)
 40279b0:	10800e04 	addi	r2,r2,56
 40279b4:	1009883a 	mov	r4,r2
 40279b8:	4024f700 	call	4024f70 <pk_alloc>
 40279bc:	e0bffa15 	stw	r2,-24(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40279c0:	01000084 	movi	r4,2
 40279c4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         if (!pkt)
 40279c8:	e0bffa17 	ldw	r2,-24(fp)
 40279cc:	1004c03a 	cmpne	r2,r2,zero
 40279d0:	1000031e 	bne	r2,zero,40279e0 <ip_output+0x31c>
            return ENOBUFS;
 40279d4:	00801a44 	movi	r2,105
 40279d8:	e0bfff15 	stw	r2,-4(fp)
 40279dc:	0000b106 	br	4027ca4 <ip_output+0x5e0>
         pkt->nb_prot = pkt->nb_buff + MaxLnh;
 40279e0:	e0bffa17 	ldw	r2,-24(fp)
 40279e4:	10c00117 	ldw	r3,4(r2)
 40279e8:	00810174 	movhi	r2,1029
 40279ec:	1081bd04 	addi	r2,r2,1780
 40279f0:	10800017 	ldw	r2,0(r2)
 40279f4:	1887883a 	add	r3,r3,r2
 40279f8:	e0bffa17 	ldw	r2,-24(fp)
 40279fc:	10c00315 	stw	r3,12(r2)

         mtmp = m1;
 4027a00:	e0bff917 	ldw	r2,-28(fp)
 4027a04:	e0bff715 	stw	r2,-36(fp)
         while (mtmp)
 4027a08:	00002806 	br	4027aac <ip_output+0x3e8>
         {
            MEMCPY(pkt->nb_prot, mtmp->m_data, mtmp->m_len);
 4027a0c:	e0bffa17 	ldw	r2,-24(fp)
 4027a10:	10c00317 	ldw	r3,12(r2)
 4027a14:	e0bff717 	ldw	r2,-36(fp)
 4027a18:	11400317 	ldw	r5,12(r2)
 4027a1c:	e0bff717 	ldw	r2,-36(fp)
 4027a20:	10800217 	ldw	r2,8(r2)
 4027a24:	1809883a 	mov	r4,r3
 4027a28:	100d883a 	mov	r6,r2
 4027a2c:	4001de40 	call	4001de4 <memcpy>
            pkt->nb_prot += mtmp->m_len;
 4027a30:	e0bffa17 	ldw	r2,-24(fp)
 4027a34:	10c00317 	ldw	r3,12(r2)
 4027a38:	e0bff717 	ldw	r2,-36(fp)
 4027a3c:	10800217 	ldw	r2,8(r2)
 4027a40:	1887883a 	add	r3,r3,r2
 4027a44:	e0bffa17 	ldw	r2,-24(fp)
 4027a48:	10c00315 	stw	r3,12(r2)
            pkt->nb_plen += mtmp->m_len;
 4027a4c:	e0bffa17 	ldw	r2,-24(fp)
 4027a50:	10c00417 	ldw	r3,16(r2)
 4027a54:	e0bff717 	ldw	r2,-36(fp)
 4027a58:	10800217 	ldw	r2,8(r2)
 4027a5c:	1887883a 	add	r3,r3,r2
 4027a60:	e0bffa17 	ldw	r2,-24(fp)
 4027a64:	10c00415 	stw	r3,16(r2)
            m2 = mtmp;
 4027a68:	e0bff717 	ldw	r2,-36(fp)
 4027a6c:	e0bff815 	stw	r2,-32(fp)
            mtmp = mtmp->m_next;
 4027a70:	e0bff717 	ldw	r2,-36(fp)
 4027a74:	10800617 	ldw	r2,24(r2)
 4027a78:	e0bff715 	stw	r2,-36(fp)
            if (m2 != data)   /* save original head */
 4027a7c:	e0fff817 	ldw	r3,-32(fp)
 4027a80:	e0bffd17 	ldw	r2,-12(fp)
 4027a84:	18800226 	beq	r3,r2,4027a90 <ip_output+0x3cc>
               m_free(m2);
 4027a88:	e13ff817 	ldw	r4,-32(fp)
 4027a8c:	4026b5c0 	call	4026b5c <m_free>
            tcpstat.tcps_ocopies++;
 4027a90:	008101b4 	movhi	r2,1030
 4027a94:	10a37804 	addi	r2,r2,-29216
 4027a98:	10803417 	ldw	r2,208(r2)
 4027a9c:	10c00044 	addi	r3,r2,1
 4027aa0:	008101b4 	movhi	r2,1030
 4027aa4:	10a37804 	addi	r2,r2,-29216
 4027aa8:	10c03415 	stw	r3,208(r2)
         if (!pkt)
            return ENOBUFS;
         pkt->nb_prot = pkt->nb_buff + MaxLnh;

         mtmp = m1;
         while (mtmp)
 4027aac:	e0bff717 	ldw	r2,-36(fp)
 4027ab0:	1004c03a 	cmpne	r2,r2,zero
 4027ab4:	103fd51e 	bne	r2,zero,4027a0c <ip_output+0x348>
            mtmp = mtmp->m_next;
            if (m2 != data)   /* save original head */
               m_free(m2);
            tcpstat.tcps_ocopies++;
         }
         pkt->nb_prot -= total;     /* fix data pointer */
 4027ab8:	e0bffa17 	ldw	r2,-24(fp)
 4027abc:	10c00317 	ldw	r3,12(r2)
 4027ac0:	e0bff517 	ldw	r2,-44(fp)
 4027ac4:	1887c83a 	sub	r3,r3,r2
 4027ac8:	e0bffa17 	ldw	r2,-24(fp)
 4027acc:	10c00315 	stw	r3,12(r2)

         /* release the original mbufs packet install the new one */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4027ad0:	01000084 	movi	r4,2
 4027ad4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(data->pkt);
 4027ad8:	e0bffd17 	ldw	r2,-12(fp)
 4027adc:	11000117 	ldw	r4,4(r2)
 4027ae0:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4027ae4:	01000084 	movi	r4,2
 4027ae8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         data->pkt = pkt;
 4027aec:	e0fffd17 	ldw	r3,-12(fp)
 4027af0:	e0bffa17 	ldw	r2,-24(fp)
 4027af4:	18800115 	stw	r2,4(r3)
         data->m_len = pkt->nb_plen;
 4027af8:	e0bffa17 	ldw	r2,-24(fp)
 4027afc:	10c00417 	ldw	r3,16(r2)
 4027b00:	e0bffd17 	ldw	r2,-12(fp)
 4027b04:	10c00215 	stw	r3,8(r2)
         data->m_next = NULL;
 4027b08:	e0bffd17 	ldw	r2,-12(fp)
 4027b0c:	10000615 	stw	zero,24(r2)
         data->m_data = pkt->nb_prot;
 4027b10:	e0bffa17 	ldw	r2,-24(fp)
 4027b14:	10c00317 	ldw	r3,12(r2)
 4027b18:	e0bffd17 	ldw	r2,-12(fp)
 4027b1c:	10c00315 	stw	r3,12(r2)
         data->m_len = total;
 4027b20:	e0fff517 	ldw	r3,-44(fp)
 4027b24:	e0bffd17 	ldw	r2,-12(fp)
 4027b28:	10c00215 	stw	r3,8(r2)
      }
   }

   if ((data->m_data < (data->pkt->nb_buff + MaxLnh)))
 4027b2c:	e0bffd17 	ldw	r2,-12(fp)
 4027b30:	11000317 	ldw	r4,12(r2)
 4027b34:	e0bffd17 	ldw	r2,-12(fp)
 4027b38:	10800117 	ldw	r2,4(r2)
 4027b3c:	10c00117 	ldw	r3,4(r2)
 4027b40:	00810174 	movhi	r2,1029
 4027b44:	1081bd04 	addi	r2,r2,1780
 4027b48:	10800017 	ldw	r2,0(r2)
 4027b4c:	1885883a 	add	r2,r3,r2
 4027b50:	2080032e 	bgeu	r4,r2,4027b60 <ip_output+0x49c>
      panic("ip_output: overflow");
 4027b54:	01010174 	movhi	r4,1029
 4027b58:	212e4304 	addi	r4,r4,-18164
 4027b5c:	4020e100 	call	4020e10 <panic>

   pkt = data->pkt;
 4027b60:	e0bffd17 	ldw	r2,-12(fp)
 4027b64:	10800117 	ldw	r2,4(r2)
 4027b68:	e0bffa15 	stw	r2,-24(fp)

   /* do we have options? */
   if (so_optsPack)
 4027b6c:	e0bffe17 	ldw	r2,-8(fp)
 4027b70:	1005003a 	cmpeq	r2,r2,zero
 4027b74:	1000031e 	bne	r2,zero,4027b84 <ip_output+0x4c0>
	   pkt->soxopts = so_optsPack;   /* yup */
 4027b78:	e0fffa17 	ldw	r3,-24(fp)
 4027b7c:	e0bffe17 	ldw	r2,-8(fp)
 4027b80:	18800c15 	stw	r2,48(r3)
      panic("ip_output: no so_optsPack for the IPv6 scope");     
   }
#endif

   /* fill in dest host for IP layer */
   bip = (struct ip *)data->m_data;
 4027b84:	e0bffd17 	ldw	r2,-12(fp)
 4027b88:	10800317 	ldw	r2,12(r2)
 4027b8c:	e0bffc15 	stw	r2,-16(fp)
   pkt->fhost = bip->ip_dest;
 4027b90:	e0bffc17 	ldw	r2,-16(fp)
 4027b94:	10c00417 	ldw	r3,16(r2)
 4027b98:	e0bffa17 	ldw	r2,-24(fp)
 4027b9c:	10c00715 	stw	r3,28(r2)

   /* make enough IP header for cksum calculation */
   bip->ip_ver_ihl = 0x45;
 4027ba0:	e0fffc17 	ldw	r3,-16(fp)
 4027ba4:	00801144 	movi	r2,69
 4027ba8:	18800005 	stb	r2,0(r3)
   bip->ip_len = htons(bip->ip_len);   /* make net endian for calculation */
 4027bac:	e0bffc17 	ldw	r2,-16(fp)
 4027bb0:	1080008b 	ldhu	r2,2(r2)
 4027bb4:	10bfffcc 	andi	r2,r2,65535
 4027bb8:	1004d23a 	srli	r2,r2,8
 4027bbc:	10803fcc 	andi	r2,r2,255
 4027bc0:	1009883a 	mov	r4,r2
 4027bc4:	e0bffc17 	ldw	r2,-16(fp)
 4027bc8:	1080008b 	ldhu	r2,2(r2)
 4027bcc:	10bfffcc 	andi	r2,r2,65535
 4027bd0:	1004923a 	slli	r2,r2,8
 4027bd4:	1007883a 	mov	r3,r2
 4027bd8:	00bfc004 	movi	r2,-256
 4027bdc:	1884703a 	and	r2,r3,r2
 4027be0:	2084b03a 	or	r2,r4,r2
 4027be4:	1007883a 	mov	r3,r2
 4027be8:	e0bffc17 	ldw	r2,-16(fp)
 4027bec:	10c0008d 	sth	r3,2(r2)
   tcpp = (struct tcphdr *)ip_data(bip);
 4027bf0:	e0bffc17 	ldw	r2,-16(fp)
 4027bf4:	10800003 	ldbu	r2,0(r2)
 4027bf8:	10803fcc 	andi	r2,r2,255
 4027bfc:	108003cc 	andi	r2,r2,15
 4027c00:	1085883a 	add	r2,r2,r2
 4027c04:	1085883a 	add	r2,r2,r2
 4027c08:	1007883a 	mov	r3,r2
 4027c0c:	e0bffc17 	ldw	r2,-16(fp)
 4027c10:	1885883a 	add	r2,r3,r2
 4027c14:	e0bffb15 	stw	r2,-20(fp)
#ifdef CSUM_DEMO
   if (!(tcpp->th_flags & TH_SYN))
   tcpp->th_flags |= TH_PUSH;     /* force the PSH flag in TCP hdr */
#endif
   tcpp->th_sum = tcp_cksum(bip);
 4027c18:	e13ffc17 	ldw	r4,-16(fp)
 4027c1c:	4041fd00 	call	4041fd0 <tcp_cksum>
 4027c20:	1007883a 	mov	r3,r2
 4027c24:	e0bffb17 	ldw	r2,-20(fp)
 4027c28:	10c0040d 	sth	r3,16(r2)

   pkt->nb_prot = (char*)(bip + 1);    /* point past IP header */
 4027c2c:	e0bffc17 	ldw	r2,-16(fp)
 4027c30:	10800504 	addi	r2,r2,20
 4027c34:	1007883a 	mov	r3,r2
 4027c38:	e0bffa17 	ldw	r2,-24(fp)
 4027c3c:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen = data->m_len - sizeof(struct ip);
 4027c40:	e0bffd17 	ldw	r2,-12(fp)
 4027c44:	10800217 	ldw	r2,8(r2)
 4027c48:	10fffb04 	addi	r3,r2,-20
 4027c4c:	e0bffa17 	ldw	r2,-24(fp)
 4027c50:	10c00415 	stw	r3,16(r2)

   e = ip_write(IPPROTO_TCP, pkt);
 4027c54:	01000184 	movi	r4,6
 4027c58:	e17ffa17 	ldw	r5,-24(fp)
 4027c5c:	403932c0 	call	403932c <ip_write>
 4027c60:	e0bff615 	stw	r2,-40(fp)

   /* ip_write() is now responsable for data->pkt, so... */
   data->pkt = NULL;
 4027c64:	e0bffd17 	ldw	r2,-12(fp)
 4027c68:	10000115 	stw	zero,4(r2)
   m_freem(data);
 4027c6c:	e13ffd17 	ldw	r4,-12(fp)
 4027c70:	4026c900 	call	4026c90 <m_freem>

   if (e < 0)
 4027c74:	e0bff617 	ldw	r2,-40(fp)
 4027c78:	1004403a 	cmpge	r2,r2,zero
 4027c7c:	1000081e 	bne	r2,zero,4027ca0 <ip_output+0x5dc>
   {
      /* don't report dropped sends, it causes socket applications to 
      bail when a TCP retry will fix the problem */
      if (e == SEND_DROPPED)
 4027c80:	e0bff617 	ldw	r2,-40(fp)
 4027c84:	10bffa98 	cmpnei	r2,r2,-22
 4027c88:	1000021e 	bne	r2,zero,4027c94 <ip_output+0x5d0>
         return 0;
 4027c8c:	e03fff15 	stw	zero,-4(fp)
 4027c90:	00000406 	br	4027ca4 <ip_output+0x5e0>
      return e;
 4027c94:	e0bff617 	ldw	r2,-40(fp)
 4027c98:	e0bfff15 	stw	r2,-4(fp)
 4027c9c:	00000106 	br	4027ca4 <ip_output+0x5e0>
   }
   else
      return 0;
 4027ca0:	e03fff15 	stw	zero,-4(fp)
 4027ca4:	e0bfff17 	ldw	r2,-4(fp)
}
 4027ca8:	e037883a 	mov	sp,fp
 4027cac:	dfc00117 	ldw	ra,4(sp)
 4027cb0:	df000017 	ldw	fp,0(sp)
 4027cb4:	dec00204 	addi	sp,sp,8
 4027cb8:	f800283a 	ret

04027cbc <in_broadcast>:
 * RETURNS: TRUE if broadcast, else FALSE
 */

int
in_broadcast(u_long ipaddr)   /* passed in net endian */
{
 4027cbc:	defffd04 	addi	sp,sp,-12
 4027cc0:	df000215 	stw	fp,8(sp)
 4027cc4:	df000204 	addi	fp,sp,8
 4027cc8:	e13ffe15 	stw	r4,-8(fp)
   if (ipaddr == 0xffffffff)
 4027ccc:	e0bffe17 	ldw	r2,-8(fp)
 4027cd0:	10bfffd8 	cmpnei	r2,r2,-1
 4027cd4:	1000031e 	bne	r2,zero,4027ce4 <in_broadcast+0x28>
      return TRUE;
 4027cd8:	00800044 	movi	r2,1
 4027cdc:	e0bfff15 	stw	r2,-4(fp)
 4027ce0:	00000106 	br	4027ce8 <in_broadcast+0x2c>

   return FALSE;
 4027ce4:	e03fff15 	stw	zero,-4(fp)
 4027ce8:	e0bfff17 	ldw	r2,-4(fp)
}
 4027cec:	e037883a 	mov	sp,fp
 4027cf0:	df000017 	ldw	fp,0(sp)
 4027cf4:	dec00104 	addi	sp,sp,4
 4027cf8:	f800283a 	ret

04027cfc <np_stripoptions>:
 * RETURNS: void
 */

void
np_stripoptions(struct ip * ti, struct mbuf * m)
{
 4027cfc:	defffb04 	addi	sp,sp,-20
 4027d00:	dfc00415 	stw	ra,16(sp)
 4027d04:	df000315 	stw	fp,12(sp)
 4027d08:	df000304 	addi	fp,sp,12
 4027d0c:	e13ffe15 	stw	r4,-8(fp)
 4027d10:	e17fff15 	stw	r5,-4(fp)
   int   ihlen;

   /* get the IP header length in octets */
   ihlen = (ti->ip_ver_ihl & 0x0f) << 2;
 4027d14:	e0bffe17 	ldw	r2,-8(fp)
 4027d18:	10800003 	ldbu	r2,0(r2)
 4027d1c:	10803fcc 	andi	r2,r2,255
 4027d20:	108003cc 	andi	r2,r2,15
 4027d24:	1085883a 	add	r2,r2,r2
 4027d28:	1085883a 	add	r2,r2,r2
 4027d2c:	e0bffd15 	stw	r2,-12(fp)

   /* if it's <= 20 octets, there are no IP header options to strip */
   if (ihlen <= 20)
 4027d30:	e0bffd17 	ldw	r2,-12(fp)
 4027d34:	10800550 	cmplti	r2,r2,21
 4027d38:	1000251e 	bne	r2,zero,4027dd0 <np_stripoptions+0xd4>
      return;

   /* figure out how much to strip: we want to keep the 20-octet IP header */
   ihlen -= 20;
 4027d3c:	e0bffd17 	ldw	r2,-12(fp)
 4027d40:	10bffb04 	addi	r2,r2,-20
 4027d44:	e0bffd15 	stw	r2,-12(fp)

   /* remove the stripped options from the IP datagram length */
   ti->ip_len -= ihlen;
 4027d48:	e0bffe17 	ldw	r2,-8(fp)
 4027d4c:	10c0008b 	ldhu	r3,2(r2)
 4027d50:	e0bffd17 	ldw	r2,-12(fp)
 4027d54:	1885c83a 	sub	r2,r3,r2
 4027d58:	1007883a 	mov	r3,r2
 4027d5c:	e0bffe17 	ldw	r2,-8(fp)
 4027d60:	10c0008d 	sth	r3,2(r2)

   /* and from the IP header length (which will be 5*4 octets long) */
   ti->ip_ver_ihl = (ti->ip_ver_ihl & 0xf0) | 5;
 4027d64:	e0bffe17 	ldw	r2,-8(fp)
 4027d68:	10800003 	ldbu	r2,0(r2)
 4027d6c:	1007883a 	mov	r3,r2
 4027d70:	00bffc04 	movi	r2,-16
 4027d74:	1884703a 	and	r2,r3,r2
 4027d78:	10800154 	ori	r2,r2,5
 4027d7c:	1007883a 	mov	r3,r2
 4027d80:	e0bffe17 	ldw	r2,-8(fp)
 4027d84:	10c00005 	stb	r3,0(r2)

   /* move the 20-octet IP header up against the IP payload */
   MEMMOVE( ((char*)ti) + ihlen, ti, 20);
 4027d88:	e0fffe17 	ldw	r3,-8(fp)
 4027d8c:	e0bffd17 	ldw	r2,-12(fp)
 4027d90:	1889883a 	add	r4,r3,r2
 4027d94:	e17ffe17 	ldw	r5,-8(fp)
 4027d98:	01800504 	movi	r6,20
 4027d9c:	4001e840 	call	4001e84 <memmove>
   m->m_len -= ihlen;
 4027da0:	e0bfff17 	ldw	r2,-4(fp)
 4027da4:	10c00217 	ldw	r3,8(r2)
 4027da8:	e0bffd17 	ldw	r2,-12(fp)
 4027dac:	1887c83a 	sub	r3,r3,r2
 4027db0:	e0bfff17 	ldw	r2,-4(fp)
 4027db4:	10c00215 	stw	r3,8(r2)
   m->m_data += ihlen;
 4027db8:	e0bfff17 	ldw	r2,-4(fp)
 4027dbc:	10c00317 	ldw	r3,12(r2)
 4027dc0:	e0bffd17 	ldw	r2,-12(fp)
 4027dc4:	1887883a 	add	r3,r3,r2
 4027dc8:	e0bfff17 	ldw	r2,-4(fp)
 4027dcc:	10c00315 	stw	r3,12(r2)
}
 4027dd0:	e037883a 	mov	sp,fp
 4027dd4:	dfc00117 	ldw	ra,4(sp)
 4027dd8:	df000017 	ldw	fp,0(sp)
 4027ddc:	dec00204 	addi	sp,sp,8
 4027de0:	f800283a 	ret

04027de4 <so_icmpdu>:
 * RETURNS: 
 */

void
so_icmpdu(PACKET p, struct destun * pdp)
{
 4027de4:	defff304 	addi	sp,sp,-52
 4027de8:	dfc00c15 	stw	ra,48(sp)
 4027dec:	df000b15 	stw	fp,44(sp)
 4027df0:	df000b04 	addi	fp,sp,44
 4027df4:	e13ffe15 	stw	r4,-8(fp)
 4027df8:	e17fff15 	stw	r5,-4(fp)
   struct inpcb * inp;
   struct socket *   so;
   struct tcpcb * tp;

   /* extract information about packet which generated DU */
   fhost = htonl(pdp->dip.ip_dest);
 4027dfc:	e0bfff17 	ldw	r2,-4(fp)
 4027e00:	10800617 	ldw	r2,24(r2)
 4027e04:	1004d63a 	srli	r2,r2,24
 4027e08:	10c03fcc 	andi	r3,r2,255
 4027e0c:	e0bfff17 	ldw	r2,-4(fp)
 4027e10:	10800617 	ldw	r2,24(r2)
 4027e14:	1004d23a 	srli	r2,r2,8
 4027e18:	10bfc00c 	andi	r2,r2,65280
 4027e1c:	1886b03a 	or	r3,r3,r2
 4027e20:	e0bfff17 	ldw	r2,-4(fp)
 4027e24:	10800617 	ldw	r2,24(r2)
 4027e28:	10bfc00c 	andi	r2,r2,65280
 4027e2c:	1004923a 	slli	r2,r2,8
 4027e30:	1886b03a 	or	r3,r3,r2
 4027e34:	e0bfff17 	ldw	r2,-4(fp)
 4027e38:	10800617 	ldw	r2,24(r2)
 4027e3c:	10803fcc 	andi	r2,r2,255
 4027e40:	1004963a 	slli	r2,r2,24
 4027e44:	1884b03a 	or	r2,r3,r2
 4027e48:	e0bffc15 	stw	r2,-16(fp)
   lhost = htonl(pdp->dip.ip_src);
 4027e4c:	e0bfff17 	ldw	r2,-4(fp)
 4027e50:	10800517 	ldw	r2,20(r2)
 4027e54:	1004d63a 	srli	r2,r2,24
 4027e58:	10c03fcc 	andi	r3,r2,255
 4027e5c:	e0bfff17 	ldw	r2,-4(fp)
 4027e60:	10800517 	ldw	r2,20(r2)
 4027e64:	1004d23a 	srli	r2,r2,8
 4027e68:	10bfc00c 	andi	r2,r2,65280
 4027e6c:	1886b03a 	or	r3,r3,r2
 4027e70:	e0bfff17 	ldw	r2,-4(fp)
 4027e74:	10800517 	ldw	r2,20(r2)
 4027e78:	10bfc00c 	andi	r2,r2,65280
 4027e7c:	1004923a 	slli	r2,r2,8
 4027e80:	1886b03a 	or	r3,r3,r2
 4027e84:	e0bfff17 	ldw	r2,-4(fp)
 4027e88:	10800517 	ldw	r2,20(r2)
 4027e8c:	10803fcc 	andi	r2,r2,255
 4027e90:	1004963a 	slli	r2,r2,24
 4027e94:	1884b03a 	or	r2,r3,r2
 4027e98:	e0bffd15 	stw	r2,-12(fp)
   lport = htons(*(unshort*)(&pdp->ddata[0]));
 4027e9c:	e0bfff17 	ldw	r2,-4(fp)
 4027ea0:	10800704 	addi	r2,r2,28
 4027ea4:	1080000b 	ldhu	r2,0(r2)
 4027ea8:	10bfffcc 	andi	r2,r2,65535
 4027eac:	1004d23a 	srli	r2,r2,8
 4027eb0:	10803fcc 	andi	r2,r2,255
 4027eb4:	1009883a 	mov	r4,r2
 4027eb8:	e0bfff17 	ldw	r2,-4(fp)
 4027ebc:	10800704 	addi	r2,r2,28
 4027ec0:	1080000b 	ldhu	r2,0(r2)
 4027ec4:	10bfffcc 	andi	r2,r2,65535
 4027ec8:	1004923a 	slli	r2,r2,8
 4027ecc:	1007883a 	mov	r3,r2
 4027ed0:	00bfc004 	movi	r2,-256
 4027ed4:	1884703a 	and	r2,r3,r2
 4027ed8:	2084b03a 	or	r2,r4,r2
 4027edc:	e0bffb0d 	sth	r2,-20(fp)
   fport = htons(*(unshort*)(&pdp->ddata[2]));
 4027ee0:	e0bfff17 	ldw	r2,-4(fp)
 4027ee4:	10800704 	addi	r2,r2,28
 4027ee8:	10800084 	addi	r2,r2,2
 4027eec:	1080000b 	ldhu	r2,0(r2)
 4027ef0:	10bfffcc 	andi	r2,r2,65535
 4027ef4:	1004d23a 	srli	r2,r2,8
 4027ef8:	10803fcc 	andi	r2,r2,255
 4027efc:	1009883a 	mov	r4,r2
 4027f00:	e0bfff17 	ldw	r2,-4(fp)
 4027f04:	10800704 	addi	r2,r2,28
 4027f08:	10800084 	addi	r2,r2,2
 4027f0c:	1080000b 	ldhu	r2,0(r2)
 4027f10:	10bfffcc 	andi	r2,r2,65535
 4027f14:	1004923a 	slli	r2,r2,8
 4027f18:	1007883a 	mov	r3,r2
 4027f1c:	00bfc004 	movi	r2,-256
 4027f20:	1884703a 	and	r2,r3,r2
 4027f24:	2084b03a 	or	r2,r4,r2
 4027f28:	e0bffb8d 	sth	r2,-18(fp)
#ifndef IP_PMTU
   /* if it's a datagram-too-big message, ignore it -- As the
    * build isn't using PMTU Discovery this packet is most 
    * probably a Denial of Service Attack.
    */
    if(pdp->dcode == DSTFRAG)
 4027f2c:	e0bfff17 	ldw	r2,-4(fp)
 4027f30:	10800043 	ldbu	r2,1(r2)
 4027f34:	10803fcc 	andi	r2,r2,255
 4027f38:	1080201c 	xori	r2,r2,128
 4027f3c:	10bfe004 	addi	r2,r2,-128
 4027f40:	10800120 	cmpeqi	r2,r2,4
 4027f44:	1000721e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
       goto done;
    }
#endif   /* IP_PMTU */

   /* if it's a TCP connection, clean it up */
   if (pdp->dip.ip_prot == TCPTP)
 4027f48:	e0bfff17 	ldw	r2,-4(fp)
 4027f4c:	10800443 	ldbu	r2,17(r2)
 4027f50:	10803fcc 	andi	r2,r2,255
 4027f54:	10800198 	cmpnei	r2,r2,6
 4027f58:	1000241e 	bne	r2,zero,4027fec <so_icmpdu+0x208>
   {
      /* find associated data structs and socket */
      inp = in_pcblookup(&tcb, fhost, fport, lhost, lport, INPLOOKUP_WILDCARD);
 4027f5c:	e1bffb8b 	ldhu	r6,-18(fp)
 4027f60:	e0bffb0b 	ldhu	r2,-20(fp)
 4027f64:	d8800015 	stw	r2,0(sp)
 4027f68:	00800044 	movi	r2,1
 4027f6c:	d8800115 	stw	r2,4(sp)
 4027f70:	010101b4 	movhi	r4,1030
 4027f74:	21236d04 	addi	r4,r4,-29260
 4027f78:	e17ffc17 	ldw	r5,-16(fp)
 4027f7c:	e1fffd17 	ldw	r7,-12(fp)
 4027f80:	40428400 	call	4042840 <in_pcblookup>
 4027f84:	e0bffa15 	stw	r2,-24(fp)
      if (inp == 0)
 4027f88:	e0bffa17 	ldw	r2,-24(fp)
 4027f8c:	1005003a 	cmpeq	r2,r2,zero
 4027f90:	10005f1e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
         goto done;
      so = inp->inp_socket;
 4027f94:	e0bffa17 	ldw	r2,-24(fp)
 4027f98:	10800817 	ldw	r2,32(r2)
 4027f9c:	e0bff915 	stw	r2,-28(fp)
      if (so == 0)
 4027fa0:	e0bff917 	ldw	r2,-28(fp)
 4027fa4:	1005003a 	cmpeq	r2,r2,zero
 4027fa8:	1000591e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
         goto done;
      tp = intotcpcb(inp);
 4027fac:	e0bffa17 	ldw	r2,-24(fp)
 4027fb0:	10800917 	ldw	r2,36(r2)
 4027fb4:	e0bff815 	stw	r2,-32(fp)
      if (tp)
 4027fb8:	e0bff817 	ldw	r2,-32(fp)
 4027fbc:	1005003a 	cmpeq	r2,r2,zero
 4027fc0:	1000061e 	bne	r2,zero,4027fdc <so_icmpdu+0x1f8>
      {
         if (tp->t_state <= TCPS_LISTEN)
 4027fc4:	e0bff817 	ldw	r2,-32(fp)
 4027fc8:	10800217 	ldw	r2,8(r2)
 4027fcc:	10800090 	cmplti	r2,r2,2
 4027fd0:	10004f1e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
               goto done;
        }
   }
#endif

         tcp_close(tp);
 4027fd4:	e13ff817 	ldw	r4,-32(fp)
 4027fd8:	4032e8c0 	call	4032e8c <tcp_close>
      }
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 4027fdc:	e0fff917 	ldw	r3,-28(fp)
 4027fe0:	00801bc4 	movi	r2,111
 4027fe4:	18800615 	stw	r2,24(r3)
 4027fe8:	00004906 	br	4028110 <so_icmpdu+0x32c>
   }   
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
 4027fec:	e0bfff17 	ldw	r2,-4(fp)
 4027ff0:	10800443 	ldbu	r2,17(r2)
 4027ff4:	10803fcc 	andi	r2,r2,255
 4027ff8:	10800458 	cmpnei	r2,r2,17
 4027ffc:	1000441e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 4028000:	00810174 	movhi	r2,1029
 4028004:	1081d804 	addi	r2,r2,1888
 4028008:	10800017 	ldw	r2,0(r2)
 402800c:	e0bff715 	stw	r2,-36(fp)
 4028010:	00002406 	br	40280a4 <so_icmpdu+0x2c0>
         if ((tmp->u_fport == fport || tmp->u_fport == 0) &&
 4028014:	e0bff717 	ldw	r2,-36(fp)
 4028018:	1080020b 	ldhu	r2,8(r2)
 402801c:	10ffffcc 	andi	r3,r2,65535
 4028020:	e0bffb8b 	ldhu	r2,-18(fp)
 4028024:	18800526 	beq	r3,r2,402803c <so_icmpdu+0x258>
 4028028:	e0bff717 	ldw	r2,-36(fp)
 402802c:	1080020b 	ldhu	r2,8(r2)
 4028030:	10bfffcc 	andi	r2,r2,65535
 4028034:	1004c03a 	cmpne	r2,r2,zero
 4028038:	1000171e 	bne	r2,zero,4028098 <so_icmpdu+0x2b4>
 402803c:	e0bff717 	ldw	r2,-36(fp)
 4028040:	11000417 	ldw	r4,16(r2)
 4028044:	e0bffc17 	ldw	r2,-16(fp)
 4028048:	1004d63a 	srli	r2,r2,24
 402804c:	10c03fcc 	andi	r3,r2,255
 4028050:	e0bffc17 	ldw	r2,-16(fp)
 4028054:	1004d23a 	srli	r2,r2,8
 4028058:	10bfc00c 	andi	r2,r2,65280
 402805c:	1886b03a 	or	r3,r3,r2
 4028060:	e0bffc17 	ldw	r2,-16(fp)
 4028064:	10bfc00c 	andi	r2,r2,65280
 4028068:	1004923a 	slli	r2,r2,8
 402806c:	1886b03a 	or	r3,r3,r2
 4028070:	e0bffc17 	ldw	r2,-16(fp)
 4028074:	10803fcc 	andi	r2,r2,255
 4028078:	1004963a 	slli	r2,r2,24
 402807c:	1884b03a 	or	r2,r3,r2
 4028080:	2080051e 	bne	r4,r2,4028098 <so_icmpdu+0x2b4>
 4028084:	e0bff717 	ldw	r2,-36(fp)
 4028088:	1080018b 	ldhu	r2,6(r2)
 402808c:	10ffffcc 	andi	r3,r2,65535
 4028090:	e0bffb0b 	ldhu	r2,-20(fp)
 4028094:	18800626 	beq	r3,r2,40280b0 <so_icmpdu+0x2cc>
#ifdef UDP_SOCKETS   /* this sockets layer supports UDP too */
   else if(pdp->dip.ip_prot == UDP_PROT)
   {
      UDPCONN tmp;
      /* search udp table (which keeps hosts in net endian) */
      for (tmp = firstudp; tmp; tmp = tmp->u_next)
 4028098:	e0bff717 	ldw	r2,-36(fp)
 402809c:	10800017 	ldw	r2,0(r2)
 40280a0:	e0bff715 	stw	r2,-36(fp)
 40280a4:	e0bff717 	ldw	r2,-36(fp)
 40280a8:	1004c03a 	cmpne	r2,r2,zero
 40280ac:	103fd91e 	bne	r2,zero,4028014 <so_icmpdu+0x230>
             (tmp->u_fhost == htonl(fhost)) &&
             (tmp->u_lport == lport))
         {
            break;   /* found our UDP table entry */
         }
      if (!tmp) 
 40280b0:	e0bff717 	ldw	r2,-36(fp)
 40280b4:	1005003a 	cmpeq	r2,r2,zero
 40280b8:	1000151e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
         goto done;
      so = (struct socket *)tmp->u_data;
 40280bc:	e0bff717 	ldw	r2,-36(fp)
 40280c0:	10800617 	ldw	r2,24(r2)
 40280c4:	e0bff915 	stw	r2,-28(fp)
      /* May be non-socket (lightweight) UDP connection. */
      if (so->so_type != SOCK_DGRAM)
 40280c8:	e0bff917 	ldw	r2,-28(fp)
 40280cc:	10800983 	ldbu	r2,38(r2)
 40280d0:	10803fcc 	andi	r2,r2,255
 40280d4:	1080201c 	xori	r2,r2,128
 40280d8:	10bfe004 	addi	r2,r2,-128
 40280dc:	10800098 	cmpnei	r2,r2,2
 40280e0:	10000b1e 	bne	r2,zero,4028110 <so_icmpdu+0x32c>
         goto done;
      so->so_error = ECONNREFUSED;  /* set error for socket owner */
 40280e4:	e0fff917 	ldw	r3,-28(fp)
 40280e8:	00801bc4 	movi	r2,111
 40280ec:	18800615 	stw	r2,24(r3)
      /* do a select() notify on socket here */
      sorwakeup(so);
 40280f0:	e0bff917 	ldw	r2,-28(fp)
 40280f4:	11400a04 	addi	r5,r2,40
 40280f8:	e13ff917 	ldw	r4,-28(fp)
 40280fc:	402cf340 	call	402cf34 <sbwakeup>
      sowwakeup(so);
 4028100:	e0bff917 	ldw	r2,-28(fp)
 4028104:	11401204 	addi	r5,r2,72
 4028108:	e13ff917 	ldw	r4,-28(fp)
 402810c:	402cf340 	call	402cf34 <sbwakeup>
   if (pdp->dcode == DSTFRAG)
      pmtucache_set(pdp->dip.ip_dest, htons(pdp->dno2));
#endif   /* IP_PMTU */

done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4028110:	01000084 	movi	r4,2
 4028114:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p); /* done with original packet */
 4028118:	e13ffe17 	ldw	r4,-8(fp)
 402811c:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4028120:	01000084 	movi	r4,2
 4028124:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return;
}
 4028128:	e037883a 	mov	sp,fp
 402812c:	dfc00117 	ldw	ra,4(sp)
 4028130:	df000017 	ldw	fp,0(sp)
 4028134:	dec00204 	addi	sp,sp,8
 4028138:	f800283a 	ret

0402813c <tcp_tick>:
unsigned long nextslow = 0L;     /* next slow tcp timer time */
static int in_tcptick = 0;       /* reentry gaurd */

void
tcp_tick()
{
 402813c:	defffe04 	addi	sp,sp,-8
 4028140:	dfc00115 	stw	ra,4(sp)
 4028144:	df000015 	stw	fp,0(sp)
 4028148:	d839883a 	mov	fp,sp
   /* guard against re-entry */
   if (in_tcptick)
 402814c:	d0a82b17 	ldw	r2,-24404(gp)
 4028150:	1004c03a 	cmpne	r2,r2,zero
 4028154:	1000151e 	bne	r2,zero,40281ac <tcp_tick+0x70>
      return;
   in_tcptick++;
 4028158:	d0a82b17 	ldw	r2,-24404(gp)
 402815c:	10800044 	addi	r2,r2,1
 4028160:	d0a82b15 	stw	r2,-24404(gp)

   LOCK_NET_RESOURCE(NET_RESID);
 4028164:	0009883a 	mov	r4,zero
 4028168:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   if (cticks >= nextslow) /* time to do it again */
 402816c:	00810174 	movhi	r2,1029
 4028170:	1081e404 	addi	r2,r2,1936
 4028174:	10c00017 	ldw	r3,0(r2)
 4028178:	d0a82a17 	ldw	r2,-24408(gp)
 402817c:	18800636 	bltu	r3,r2,4028198 <tcp_tick+0x5c>
   {
      tcp_slowtimo();      /* call routine in BSD tcp_timr.c */
 4028180:	40330b80 	call	40330b8 <tcp_slowtimo>
#ifdef CSUM_DEMO
      nextslow = cticks + (TPS/5);  /* another 200 ms */
#else
      nextslow = cticks + (TPS/2);  /* another 500 ms */
 4028184:	00810174 	movhi	r2,1029
 4028188:	1081e404 	addi	r2,r2,1936
 402818c:	10800017 	ldw	r2,0(r2)
 4028190:	10800c84 	addi	r2,r2,50
 4028194:	d0a82a15 	stw	r2,-24408(gp)

#ifdef DO_DELAY_ACKS
   tcp_fasttimo();
#endif   /* DO_DELAY_ACKS */

   UNLOCK_NET_RESOURCE(NET_RESID);
 4028198:	0009883a 	mov	r4,zero
 402819c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   in_tcptick--;
 40281a0:	d0a82b17 	ldw	r2,-24404(gp)
 40281a4:	10bfffc4 	addi	r2,r2,-1
 40281a8:	d0a82b15 	stw	r2,-24404(gp)
}
 40281ac:	e037883a 	mov	sp,fp
 40281b0:	dfc00117 	ldw	ra,4(sp)
 40281b4:	df000017 	ldw	fp,0(sp)
 40281b8:	dec00204 	addi	sp,sp,8
 40281bc:	f800283a 	ret

040281c0 <rawip_lookup>:
 *          or NULL if no matching raw IP endpoint is found.
 */

struct ipraw_ep *
rawip_lookup(struct socket * so)
{
 40281c0:	defffc04 	addi	sp,sp,-16
 40281c4:	df000315 	stw	fp,12(sp)
 40281c8:	df000304 	addi	fp,sp,12
 40281cc:	e13ffe15 	stw	r4,-8(fp)
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 40281d0:	00810174 	movhi	r2,1029
 40281d4:	10820b04 	addi	r2,r2,2092
 40281d8:	10800017 	ldw	r2,0(r2)
 40281dc:	e0bffd15 	stw	r2,-12(fp)
 40281e0:	00000a06 	br	402820c <rawip_lookup+0x4c>
      if (tmp->ipr_data == (void*)so)
 40281e4:	e0bffd17 	ldw	r2,-12(fp)
 40281e8:	10c00417 	ldw	r3,16(r2)
 40281ec:	e0bffe17 	ldw	r2,-8(fp)
 40281f0:	1880031e 	bne	r3,r2,4028200 <rawip_lookup+0x40>
      return (tmp);
 40281f4:	e0bffd17 	ldw	r2,-12(fp)
 40281f8:	e0bfff15 	stw	r2,-4(fp)
 40281fc:	00000706 	br	402821c <rawip_lookup+0x5c>
struct ipraw_ep *
rawip_lookup(struct socket * so)
{
   struct ipraw_ep * tmp;

   for (tmp = ipraw_eps; tmp; tmp = tmp->ipr_next)
 4028200:	e0bffd17 	ldw	r2,-12(fp)
 4028204:	10800017 	ldw	r2,0(r2)
 4028208:	e0bffd15 	stw	r2,-12(fp)
 402820c:	e0bffd17 	ldw	r2,-12(fp)
 4028210:	1004c03a 	cmpne	r2,r2,zero
 4028214:	103ff31e 	bne	r2,zero,40281e4 <rawip_lookup+0x24>
      if (tmp->ipr_data == (void*)so)
      return (tmp);

   return NULL;   /* didn't find it */
 4028218:	e03fff15 	stw	zero,-4(fp)
 402821c:	e0bfff17 	ldw	r2,-4(fp)
}
 4028220:	e037883a 	mov	sp,fp
 4028224:	df000017 	ldw	fp,0(sp)
 4028228:	dec00104 	addi	sp,sp,4
 402822c:	f800283a 	ret

04028230 <rawip_soinput>:
 *          indicates that the packet has not been accepted.
 */

int
rawip_soinput(PACKET pkt, void * so_ptr)
{
 4028230:	defff404 	addi	sp,sp,-48
 4028234:	dfc00b15 	stw	ra,44(sp)
 4028238:	df000a15 	stw	fp,40(sp)
 402823c:	df000a04 	addi	fp,sp,40
 4028240:	e13ffd15 	stw	r4,-12(fp)
 4028244:	e17ffe15 	stw	r5,-8(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
 4028248:	e0bffe17 	ldw	r2,-8(fp)
 402824c:	e0bff715 	stw	r2,-36(fp)
   struct sockaddr_in   sin;

   LOCK_NET_RESOURCE(NET_RESID); 
 4028250:	0009883a 	mov	r4,zero
 4028254:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 4028258:	e0bff717 	ldw	r2,-36(fp)
 402825c:	10c00a17 	ldw	r3,40(r2)
 4028260:	e0bffd17 	ldw	r2,-12(fp)
 4028264:	10800417 	ldw	r2,16(r2)
 4028268:	1887883a 	add	r3,r3,r2
 402826c:	e0bff717 	ldw	r2,-36(fp)
 4028270:	10800b17 	ldw	r2,44(r2)
 4028274:	18800536 	bltu	r3,r2,402828c <rawip_soinput+0x5c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 4028278:	0009883a 	mov	r4,zero
 402827c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 4028280:	00801a44 	movi	r2,105
 4028284:	e0bfff15 	stw	r2,-4(fp)
 4028288:	00005806 	br	40283ec <rawip_soinput+0x1bc>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 402828c:	01000044 	movi	r4,1
 4028290:	000b883a 	mov	r5,zero
 4028294:	40269b40 	call	40269b4 <m_getnbuf>
 4028298:	e0bff815 	stw	r2,-32(fp)
   if (!m_in)
 402829c:	e0bff817 	ldw	r2,-32(fp)
 40282a0:	1004c03a 	cmpne	r2,r2,zero
 40282a4:	1000051e 	bne	r2,zero,40282bc <rawip_soinput+0x8c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 40282a8:	0009883a 	mov	r4,zero
 40282ac:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 40282b0:	00801a44 	movi	r2,105
 40282b4:	e0bfff15 	stw	r2,-4(fp)
 40282b8:	00004c06 	br	40283ec <rawip_soinput+0x1bc>
   }

   /* set data mbuf to point to start of IP header */
   m_in->pkt = pkt;
 40282bc:	e0fff817 	ldw	r3,-32(fp)
 40282c0:	e0bffd17 	ldw	r2,-12(fp)
 40282c4:	18800115 	stw	r2,4(r3)
   m_in->m_base = pkt->nb_buff;
 40282c8:	e0bffd17 	ldw	r2,-12(fp)
 40282cc:	10c00117 	ldw	r3,4(r2)
 40282d0:	e0bff817 	ldw	r2,-32(fp)
 40282d4:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
 40282d8:	e0bffd17 	ldw	r2,-12(fp)
 40282dc:	10c00217 	ldw	r3,8(r2)
 40282e0:	e0bff817 	ldw	r2,-32(fp)
 40282e4:	10c00515 	stw	r3,20(r2)
   m_in->m_data = pkt->nb_prot;
 40282e8:	e0bffd17 	ldw	r2,-12(fp)
 40282ec:	10c00317 	ldw	r3,12(r2)
 40282f0:	e0bff817 	ldw	r2,-32(fp)
 40282f4:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 40282f8:	e0bffd17 	ldw	r2,-12(fp)
 40282fc:	10c00417 	ldw	r3,16(r2)
 4028300:	e0bff817 	ldw	r2,-32(fp)
 4028304:	10c00215 	stw	r3,8(r2)

   /* if this socket doesn't have IP_HDRINCL set, adjust the
    * mbuf to skip past the IP header
    */
   if (!(so->so_options & SO_HDRINCL))
 4028308:	e0bff717 	ldw	r2,-36(fp)
 402830c:	10800417 	ldw	r2,16(r2)
 4028310:	1088000c 	andi	r2,r2,8192
 4028314:	1004c03a 	cmpne	r2,r2,zero
 4028318:	1000141e 	bne	r2,zero,402836c <rawip_soinput+0x13c>
   {
      unsigned int ihl = 
         (((struct ip *)(pkt->nb_prot))->ip_ver_ihl & 0x0f) << 2;
 402831c:	e0bffd17 	ldw	r2,-12(fp)
 4028320:	10800317 	ldw	r2,12(r2)
 4028324:	10800003 	ldbu	r2,0(r2)
 4028328:	10803fcc 	andi	r2,r2,255
 402832c:	108003cc 	andi	r2,r2,15
 4028330:	1085883a 	add	r2,r2,r2
 4028334:	1085883a 	add	r2,r2,r2
 4028338:	e0bff615 	stw	r2,-40(fp)
      m_in->m_data += ihl;
 402833c:	e0bff817 	ldw	r2,-32(fp)
 4028340:	10c00317 	ldw	r3,12(r2)
 4028344:	e0bff617 	ldw	r2,-40(fp)
 4028348:	1887883a 	add	r3,r3,r2
 402834c:	e0bff817 	ldw	r2,-32(fp)
 4028350:	10c00315 	stw	r3,12(r2)
      m_in->m_len -= ihl;
 4028354:	e0bff817 	ldw	r2,-32(fp)
 4028358:	10c00217 	ldw	r3,8(r2)
 402835c:	e0bff617 	ldw	r2,-40(fp)
 4028360:	1887c83a 	sub	r3,r3,r2
 4028364:	e0bff817 	ldw	r2,-32(fp)
 4028368:	10c00215 	stw	r3,8(r2)
   }

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 402836c:	e0bffd17 	ldw	r2,-12(fp)
 4028370:	10800717 	ldw	r2,28(r2)
 4028374:	e0bffa15 	stw	r2,-24(fp)
   sin.sin_port = 0;
 4028378:	e03ff98d 	sth	zero,-26(fp)
   sin.sin_family = AF_INET;
 402837c:	00800084 	movi	r2,2
 4028380:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 4028384:	e0bff717 	ldw	r2,-36(fp)
 4028388:	11000a04 	addi	r4,r2,40
 402838c:	e17ff904 	addi	r5,fp,-28
 4028390:	e1bff817 	ldw	r6,-32(fp)
 4028394:	402d2800 	call	402d280 <sbappendaddr>
 4028398:	1004c03a 	cmpne	r2,r2,zero
 402839c:	1000091e 	bne	r2,zero,40283c4 <rawip_soinput+0x194>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       * underlying stack
       */
      m_in->pkt = NULL;
 40283a0:	e0bff817 	ldw	r2,-32(fp)
 40283a4:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
 40283a8:	e13ff817 	ldw	r4,-32(fp)
 40283ac:	4026b5c0 	call	4026b5c <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 40283b0:	0009883a 	mov	r4,zero
 40283b4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 40283b8:	00801a44 	movi	r2,105
 40283bc:	e0bfff15 	stw	r2,-4(fp)
 40283c0:	00000a06 	br	40283ec <rawip_soinput+0x1bc>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 40283c4:	e0bff717 	ldw	r2,-36(fp)
 40283c8:	11000a04 	addi	r4,r2,40
 40283cc:	40219280 	call	4021928 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 40283d0:	e0bff717 	ldw	r2,-36(fp)
 40283d4:	11400a04 	addi	r5,r2,40
 40283d8:	e13ff717 	ldw	r4,-36(fp)
 40283dc:	402cf340 	call	402cf34 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 40283e0:	0009883a 	mov	r4,zero
 40283e4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return 0;
 40283e8:	e03fff15 	stw	zero,-4(fp)
 40283ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40283f0:	e037883a 	mov	sp,fp
 40283f4:	dfc00117 	ldw	ra,4(sp)
 40283f8:	df000017 	ldw	fp,0(sp)
 40283fc:	dec00204 	addi	sp,sp,8
 4028400:	f800283a 	ret

04028404 <rawip_usrreq>:

int
rawip_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 4028404:	deffee04 	addi	sp,sp,-72
 4028408:	dfc01115 	stw	ra,68(sp)
 402840c:	df001015 	stw	fp,64(sp)
 4028410:	dc000f15 	stw	r16,60(sp)
 4028414:	df000f04 	addi	fp,sp,60
 4028418:	e13ffc15 	stw	r4,-16(fp)
 402841c:	e17ffd15 	stw	r5,-12(fp)
 4028420:	e1bffe15 	stw	r6,-8(fp)
   u_char prot;
   struct ip * pip;
   int   req;
   NET   ifp;     /* ptr to network interface structure */

   req = so->so_req;    /* get request from socket struct */
 4028424:	e0bffc17 	ldw	r2,-16(fp)
 4028428:	10800717 	ldw	r2,28(r2)
 402842c:	e0bff315 	stw	r2,-52(fp)

   switch (req) 
 4028430:	e0bff317 	ldw	r2,-52(fp)
 4028434:	10800468 	cmpgeui	r2,r2,17
 4028438:	1001e31e 	bne	r2,zero,4028bc8 <rawip_usrreq+0x7c4>
 402843c:	e0bff317 	ldw	r2,-52(fp)
 4028440:	1085883a 	add	r2,r2,r2
 4028444:	1087883a 	add	r3,r2,r2
 4028448:	008100f4 	movhi	r2,1027
 402844c:	10a11704 	addi	r2,r2,-31652
 4028450:	1885883a 	add	r2,r3,r2
 4028454:	10800017 	ldw	r2,0(r2)
 4028458:	1000683a 	jmp	r2
 402845c:	040284a0 	cmpeqi	r16,zero,2578
 4028460:	04028528 	cmpgeui	r16,zero,2580
 4028464:	0402856c 	andhi	r16,zero,2581
 4028468:	04028bc8 	cmpgei	r16,zero,2607
 402846c:	0402856c 	andhi	r16,zero,2581
 4028470:	04028bc8 	cmpgei	r16,zero,2607
 4028474:	04028bbc 	xorhi	r16,zero,2606
 4028478:	04028bc8 	cmpgei	r16,zero,2607
 402847c:	04028bbc 	xorhi	r16,zero,2606
 4028480:	04028720 	cmpeqi	r16,zero,2588
 4028484:	04028bc8 	cmpgei	r16,zero,2607
 4028488:	04028bc8 	cmpgei	r16,zero,2607
 402848c:	04028bc8 	cmpgei	r16,zero,2607
 4028490:	04028bc8 	cmpgei	r16,zero,2607
 4028494:	04028bc8 	cmpgei	r16,zero,2607
 4028498:	04028b10 	cmplti	r16,zero,2604
 402849c:	04028b10 	cmplti	r16,zero,2604
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = 
 40284a0:	e0bffc17 	ldw	r2,-16(fp)
 40284a4:	10800417 	ldw	r2,16(r2)
 40284a8:	1108000c 	andi	r4,r2,8192
 40284ac:	403e04c0 	call	403e04c <ip_raw_maxalloc>
 40284b0:	1007883a 	mov	r3,r2
 40284b4:	e0bffc17 	ldw	r2,-16(fp)
 40284b8:	10c01315 	stw	r3,76(r2)
 40284bc:	e0bffc17 	ldw	r2,-16(fp)
 40284c0:	10c01317 	ldw	r3,76(r2)
 40284c4:	e0bffc17 	ldw	r2,-16(fp)
 40284c8:	10c00b15 	stw	r3,44(r2)
         ip_raw_maxalloc(so->so_options & SO_HDRINCL);
      /* make a raw IP endpoint */
      prot = (u_char)(MBUF2LONG(nam));
 40284cc:	e0bffe17 	ldw	r2,-8(fp)
 40284d0:	e0bff505 	stb	r2,-44(fp)
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 40284d4:	0009883a 	mov	r4,zero
 40284d8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ep = ip_raw_open(prot, 0L, 0L, rawip_soinput, so);
 40284dc:	e13ff503 	ldbu	r4,-44(fp)
 40284e0:	e0bffc17 	ldw	r2,-16(fp)
 40284e4:	d8800015 	stw	r2,0(sp)
 40284e8:	000b883a 	mov	r5,zero
 40284ec:	000d883a 	mov	r6,zero
 40284f0:	01c100f4 	movhi	r7,1027
 40284f4:	39e08c04 	addi	r7,r7,-32208
 40284f8:	403db580 	call	403db58 <ip_raw_open>
 40284fc:	e0bff815 	stw	r2,-32(fp)
      LOCK_NET_RESOURCE(NET_RESID);
 4028500:	0009883a 	mov	r4,zero
 4028504:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      if (!ep)
 4028508:	e0bff817 	ldw	r2,-32(fp)
 402850c:	1004c03a 	cmpne	r2,r2,zero
 4028510:	1000031e 	bne	r2,zero,4028520 <rawip_usrreq+0x11c>
         return(EINVAL);
 4028514:	00800584 	movi	r2,22
 4028518:	e0bfff15 	stw	r2,-4(fp)
 402851c:	0001ac06 	br	4028bd0 <rawip_usrreq+0x7cc>
      return 0;
 4028520:	e03fff15 	stw	zero,-4(fp)
 4028524:	0001aa06 	br	4028bd0 <rawip_usrreq+0x7cc>
   case PRU_DETACH:
      /* delete the raw IP endpoint */
      ep = rawip_lookup(so);
 4028528:	e13ffc17 	ldw	r4,-16(fp)
 402852c:	40281c00 	call	40281c0 <rawip_lookup>
 4028530:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 4028534:	e0bff817 	ldw	r2,-32(fp)
 4028538:	1004c03a 	cmpne	r2,r2,zero
 402853c:	1000031e 	bne	r2,zero,402854c <rawip_usrreq+0x148>
         return(EINVAL);
 4028540:	00800584 	movi	r2,22
 4028544:	e0bfff15 	stw	r2,-4(fp)
 4028548:	0001a106 	br	4028bd0 <rawip_usrreq+0x7cc>
      /* unlock the net resource; IP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 402854c:	0009883a 	mov	r4,zero
 4028550:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ip_raw_close(ep);
 4028554:	e13ff817 	ldw	r4,-32(fp)
 4028558:	403dc480 	call	403dc48 <ip_raw_close>
      LOCK_NET_RESOURCE(NET_RESID);
 402855c:	0009883a 	mov	r4,zero
 4028560:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      return 0;
 4028564:	e03fff15 	stw	zero,-4(fp)
 4028568:	00019906 	br	4028bd0 <rawip_usrreq+0x7cc>
       * a default address for sending
       */
      /* fall through to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 402856c:	e0bffe17 	ldw	r2,-8(fp)
 4028570:	1004c03a 	cmpne	r2,r2,zero
 4028574:	1000031e 	bne	r2,zero,4028584 <rawip_usrreq+0x180>
         return(EINVAL);
 4028578:	00800584 	movi	r2,22
 402857c:	e0bfff15 	stw	r2,-4(fp)
 4028580:	00019306 	br	4028bd0 <rawip_usrreq+0x7cc>
      sin = mtod(nam, struct sockaddr_in *);
 4028584:	e0bffe17 	ldw	r2,-8(fp)
 4028588:	10800317 	ldw	r2,12(r2)
 402858c:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
 4028590:	e0bff917 	ldw	r2,-28(fp)
 4028594:	1004c03a 	cmpne	r2,r2,zero
 4028598:	1000031e 	bne	r2,zero,40285a8 <rawip_usrreq+0x1a4>
         return(EINVAL);
 402859c:	00800584 	movi	r2,22
 40285a0:	e0bfff15 	stw	r2,-4(fp)
 40285a4:	00018a06 	br	4028bd0 <rawip_usrreq+0x7cc>
      if (nam->m_len != sizeof (*sin))
 40285a8:	e0bffe17 	ldw	r2,-8(fp)
 40285ac:	10800217 	ldw	r2,8(r2)
 40285b0:	10800420 	cmpeqi	r2,r2,16
 40285b4:	1000031e 	bne	r2,zero,40285c4 <rawip_usrreq+0x1c0>
         return(EINVAL);
 40285b8:	00800584 	movi	r2,22
 40285bc:	e0bfff15 	stw	r2,-4(fp)
 40285c0:	00018306 	br	4028bd0 <rawip_usrreq+0x7cc>
      ep = rawip_lookup(so);
 40285c4:	e13ffc17 	ldw	r4,-16(fp)
 40285c8:	40281c00 	call	40281c0 <rawip_lookup>
 40285cc:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 40285d0:	e0bff817 	ldw	r2,-32(fp)
 40285d4:	1004c03a 	cmpne	r2,r2,zero
 40285d8:	1000031e 	bne	r2,zero,40285e8 <rawip_usrreq+0x1e4>
         return(EINVAL);
 40285dc:	00800584 	movi	r2,22
 40285e0:	e0bfff15 	stw	r2,-4(fp)
 40285e4:	00017a06 	br	4028bd0 <rawip_usrreq+0x7cc>
      if (req == PRU_BIND)
 40285e8:	e0bff317 	ldw	r2,-52(fp)
 40285ec:	10800098 	cmpnei	r2,r2,2
 40285f0:	1000221e 	bne	r2,zero,402867c <rawip_usrreq+0x278>
          * if the caller-supplied address is INADDR_ANY,
          * don't bind to a specific address; else, 
          * make sure the caller-supplied address is
          * an interface IP address and if so, bind to that
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 40285f4:	e0bff917 	ldw	r2,-28(fp)
 40285f8:	10800117 	ldw	r2,4(r2)
 40285fc:	1004c03a 	cmpne	r2,r2,zero
 4028600:	1000021e 	bne	r2,zero,402860c <rawip_usrreq+0x208>
         {
            lhost = 0L;
 4028604:	e03ff615 	stw	zero,-40(fp)
 4028608:	00001806 	br	402866c <rawip_usrreq+0x268>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
 402860c:	e0bff917 	ldw	r2,-28(fp)
 4028610:	10800117 	ldw	r2,4(r2)
 4028614:	e0bff615 	stw	r2,-40(fp)
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028618:	008101b4 	movhi	r2,1030
 402861c:	10a44904 	addi	r2,r2,-28380
 4028620:	10800017 	ldw	r2,0(r2)
 4028624:	e0bff215 	stw	r2,-56(fp)
 4028628:	00000706 	br	4028648 <rawip_usrreq+0x244>
               if (ifp->n_ipaddr == lhost)
 402862c:	e0bff217 	ldw	r2,-56(fp)
 4028630:	10c00a17 	ldw	r3,40(r2)
 4028634:	e0bff617 	ldw	r2,-40(fp)
 4028638:	18800626 	beq	r3,r2,4028654 <rawip_usrreq+0x250>
         }
         else
         {
            lhost = sin->sin_addr.s_addr;
            /* verify that lhost is a local interface address */
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 402863c:	e0bff217 	ldw	r2,-56(fp)
 4028640:	10800017 	ldw	r2,0(r2)
 4028644:	e0bff215 	stw	r2,-56(fp)
 4028648:	e0bff217 	ldw	r2,-56(fp)
 402864c:	1004c03a 	cmpne	r2,r2,zero
 4028650:	103ff61e 	bne	r2,zero,402862c <rawip_usrreq+0x228>
               if (ifp->n_ipaddr == lhost)
                  break;
            if (ifp == NULL)
 4028654:	e0bff217 	ldw	r2,-56(fp)
 4028658:	1004c03a 	cmpne	r2,r2,zero
 402865c:	1000031e 	bne	r2,zero,402866c <rawip_usrreq+0x268>
               return(EADDRNOTAVAIL);
 4028660:	00801f44 	movi	r2,125
 4028664:	e0bfff15 	stw	r2,-4(fp)
 4028668:	00015906 	br	4028bd0 <rawip_usrreq+0x7cc>
         }

         /* bind the endpoint */
         ep->ipr_laddr = lhost;
 402866c:	e0fff817 	ldw	r3,-32(fp)
 4028670:	e0bff617 	ldw	r2,-40(fp)
 4028674:	18800115 	stw	r2,4(r3)
 4028678:	00002706 	br	4028718 <rawip_usrreq+0x314>
          *
          * if the caller-supplied address is INADDR_ANY,
          * use the wildcard address; else, use the caller-
          * supplied address
          */
         if (sin->sin_addr.s_addr == INADDR_ANY)
 402867c:	e0bff917 	ldw	r2,-28(fp)
 4028680:	10800117 	ldw	r2,4(r2)
 4028684:	1004c03a 	cmpne	r2,r2,zero
 4028688:	1000021e 	bne	r2,zero,4028694 <rawip_usrreq+0x290>
            fhost = 0L;
 402868c:	e03ff715 	stw	zero,-36(fp)
 4028690:	00000306 	br	40286a0 <rawip_usrreq+0x29c>
         else
            fhost = sin->sin_addr.s_addr;
 4028694:	e0bff917 	ldw	r2,-28(fp)
 4028698:	10800117 	ldw	r2,4(r2)
 402869c:	e0bff715 	stw	r2,-36(fp)
         /* connect the IP endpoint */
         ep->ipr_faddr = fhost;
 40286a0:	e0fff817 	ldw	r3,-32(fp)
 40286a4:	e0bff717 	ldw	r2,-36(fp)
 40286a8:	18800215 	stw	r2,8(r3)
         /* mark the socket as connected or disconnected, as appropriate */
         if (fhost != 0L) {
 40286ac:	e0bff717 	ldw	r2,-36(fp)
 40286b0:	1005003a 	cmpeq	r2,r2,zero
 40286b4:	10000e1e 	bne	r2,zero,40286f0 <rawip_usrreq+0x2ec>
            so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 40286b8:	e0bffc17 	ldw	r2,-16(fp)
 40286bc:	10c0088b 	ldhu	r3,34(r2)
 40286c0:	00bffcc4 	movi	r2,-13
 40286c4:	1884703a 	and	r2,r3,r2
 40286c8:	1007883a 	mov	r3,r2
 40286cc:	e0bffc17 	ldw	r2,-16(fp)
 40286d0:	10c0088d 	sth	r3,34(r2)
            so->so_state |= SS_ISCONNECTED;
 40286d4:	e0bffc17 	ldw	r2,-16(fp)
 40286d8:	1080088b 	ldhu	r2,34(r2)
 40286dc:	10800094 	ori	r2,r2,2
 40286e0:	1007883a 	mov	r3,r2
 40286e4:	e0bffc17 	ldw	r2,-16(fp)
 40286e8:	10c0088d 	sth	r3,34(r2)
 40286ec:	00000706 	br	402870c <rawip_usrreq+0x308>
         }
         else
         {
            so->so_state &= ~SS_ISCONNECTED;
 40286f0:	e0bffc17 	ldw	r2,-16(fp)
 40286f4:	10c0088b 	ldhu	r3,34(r2)
 40286f8:	00bfff44 	movi	r2,-3
 40286fc:	1884703a 	and	r2,r3,r2
 4028700:	1007883a 	mov	r3,r2
 4028704:	e0bffc17 	ldw	r2,-16(fp)
 4028708:	10c0088d 	sth	r3,34(r2)
         }
         /* since socket was in listen state, packets may be queued */
         sbflush(&so->so_rcv);   /* dump these now */
 402870c:	e0bffc17 	ldw	r2,-16(fp)
 4028710:	11000a04 	addi	r4,r2,40
 4028714:	402d6700 	call	402d670 <sbflush>
      }
      return 0;
 4028718:	e03fff15 	stw	zero,-4(fp)
 402871c:	00012c06 	br	4028bd0 <rawip_usrreq+0x7cc>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 4028720:	e0bffd17 	ldw	r2,-12(fp)
 4028724:	1004c03a 	cmpne	r2,r2,zero
 4028728:	1000031e 	bne	r2,zero,4028738 <rawip_usrreq+0x334>
         return(EINVAL);
 402872c:	00800584 	movi	r2,22
 4028730:	e0bfff15 	stw	r2,-4(fp)
 4028734:	00012606 	br	4028bd0 <rawip_usrreq+0x7cc>

      ep = rawip_lookup(so);
 4028738:	e13ffc17 	ldw	r4,-16(fp)
 402873c:	40281c00 	call	40281c0 <rawip_lookup>
 4028740:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 4028744:	e0bff817 	ldw	r2,-32(fp)
 4028748:	1004c03a 	cmpne	r2,r2,zero
 402874c:	1000051e 	bne	r2,zero,4028764 <rawip_usrreq+0x360>
      {
         m_free(m);
 4028750:	e13ffd17 	ldw	r4,-12(fp)
 4028754:	4026b5c0 	call	4026b5c <m_free>
         /* may be bogus socket, but more likely the connection may 
         have closed due to ICMP dest unreachable from other side. */
         return(ECONNREFUSED);
 4028758:	00801bc4 	movi	r2,111
 402875c:	e0bfff15 	stw	r2,-4(fp)
 4028760:	00011b06 	br	4028bd0 <rawip_usrreq+0x7cc>
      }

      if (nam == NULL)  /* no sendto() info passed, must be send() */
 4028764:	e0bffe17 	ldw	r2,-8(fp)
 4028768:	1004c03a 	cmpne	r2,r2,zero
 402876c:	10000d1e 	bne	r2,zero,40287a4 <rawip_usrreq+0x3a0>
      {
         if (!(so->so_state & SS_ISCONNECTED))
 4028770:	e0bffc17 	ldw	r2,-16(fp)
 4028774:	1080088b 	ldhu	r2,34(r2)
 4028778:	10bfffcc 	andi	r2,r2,65535
 402877c:	1080008c 	andi	r2,r2,2
 4028780:	1004c03a 	cmpne	r2,r2,zero
 4028784:	1000031e 	bne	r2,zero,4028794 <rawip_usrreq+0x390>
            return (ENOTCONN);
 4028788:	00802004 	movi	r2,128
 402878c:	e0bfff15 	stw	r2,-4(fp)
 4028790:	00010f06 	br	4028bd0 <rawip_usrreq+0x7cc>
         fhost = ep->ipr_faddr;
 4028794:	e0bff817 	ldw	r2,-32(fp)
 4028798:	10800217 	ldw	r2,8(r2)
 402879c:	e0bff715 	stw	r2,-36(fp)
 40287a0:	00001706 	br	4028800 <rawip_usrreq+0x3fc>
      }
      else 
      {
         if (so->so_state & SS_ISCONNECTED)
 40287a4:	e0bffc17 	ldw	r2,-16(fp)
 40287a8:	1080088b 	ldhu	r2,34(r2)
 40287ac:	10bfffcc 	andi	r2,r2,65535
 40287b0:	1080008c 	andi	r2,r2,2
 40287b4:	1005003a 	cmpeq	r2,r2,zero
 40287b8:	1000031e 	bne	r2,zero,40287c8 <rawip_usrreq+0x3c4>
            return (EISCONN);
 40287bc:	00801fc4 	movi	r2,127
 40287c0:	e0bfff15 	stw	r2,-4(fp)
 40287c4:	00010206 	br	4028bd0 <rawip_usrreq+0x7cc>
         if (nam->m_len != sizeof (*sin))
 40287c8:	e0bffe17 	ldw	r2,-8(fp)
 40287cc:	10800217 	ldw	r2,8(r2)
 40287d0:	10800420 	cmpeqi	r2,r2,16
 40287d4:	1000041e 	bne	r2,zero,40287e8 <rawip_usrreq+0x3e4>
         {
            dtrap();
 40287d8:	4025bb40 	call	4025bb4 <dtrap>
            return (EINVAL);
 40287dc:	00800584 	movi	r2,22
 40287e0:	e0bfff15 	stw	r2,-4(fp)
 40287e4:	0000fa06 	br	4028bd0 <rawip_usrreq+0x7cc>
         }
         sin = mtod(nam, struct sockaddr_in *);
 40287e8:	e0bffe17 	ldw	r2,-8(fp)
 40287ec:	10800317 	ldw	r2,12(r2)
 40287f0:	e0bff915 	stw	r2,-28(fp)
         fhost = sin->sin_addr.s_addr;
 40287f4:	e0bff917 	ldw	r2,-28(fp)
 40287f8:	10800117 	ldw	r2,4(r2)
 40287fc:	e0bff715 	stw	r2,-36(fp)

      /* since our pkt->nb_buff size is tied to max packet size, we 
       * assume our raw IP datagrams are always in one mbuf and that the 
       * mbuf -- but check anyway
       */
      if (m->m_len > (unsigned)ip_raw_maxalloc(so->so_options & SO_HDRINCL))
 4028800:	e0bffd17 	ldw	r2,-12(fp)
 4028804:	14000217 	ldw	r16,8(r2)
 4028808:	e0bffc17 	ldw	r2,-16(fp)
 402880c:	10800417 	ldw	r2,16(r2)
 4028810:	1108000c 	andi	r4,r2,8192
 4028814:	403e04c0 	call	403e04c <ip_raw_maxalloc>
 4028818:	1400042e 	bgeu	r2,r16,402882c <rawip_usrreq+0x428>
      {
         dtrap(); /* should never happen */
 402881c:	4025bb40 	call	4025bb4 <dtrap>
         return EMSGSIZE;  /* try to recover */
 4028820:	00801e84 	movi	r2,122
 4028824:	e0bfff15 	stw	r2,-4(fp)
 4028828:	0000e906 	br	4028bd0 <rawip_usrreq+0x7cc>
      }
      /* get a packet buffer for send */
      pkt = ip_raw_alloc(m->m_len, so->so_options & SO_HDRINCL);
 402882c:	e0bffd17 	ldw	r2,-12(fp)
 4028830:	10800217 	ldw	r2,8(r2)
 4028834:	1009883a 	mov	r4,r2
 4028838:	e0bffc17 	ldw	r2,-16(fp)
 402883c:	10800417 	ldw	r2,16(r2)
 4028840:	1148000c 	andi	r5,r2,8192
 4028844:	403df400 	call	403df40 <ip_raw_alloc>
 4028848:	e0bffa15 	stw	r2,-24(fp)
      if (!pkt)
 402884c:	e0bffa17 	ldw	r2,-24(fp)
 4028850:	1004c03a 	cmpne	r2,r2,zero
 4028854:	1000051e 	bne	r2,zero,402886c <rawip_usrreq+0x468>
      {
         m_free(m);
 4028858:	e13ffd17 	ldw	r4,-12(fp)
 402885c:	4026b5c0 	call	4026b5c <m_free>
         return ENOBUFS;   /* report buffer shortages */
 4028860:	00801a44 	movi	r2,105
 4028864:	e0bfff15 	stw	r2,-4(fp)
 4028868:	0000d906 	br	4028bd0 <rawip_usrreq+0x7cc>
      }
      MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 402886c:	e0bffa17 	ldw	r2,-24(fp)
 4028870:	10c00317 	ldw	r3,12(r2)
 4028874:	e0bffd17 	ldw	r2,-12(fp)
 4028878:	11400317 	ldw	r5,12(r2)
 402887c:	e0bffd17 	ldw	r2,-12(fp)
 4028880:	10800217 	ldw	r2,8(r2)
 4028884:	1809883a 	mov	r4,r3
 4028888:	100d883a 	mov	r6,r2
 402888c:	4001de40 	call	4001de4 <memcpy>
      pkt->nb_plen = m->m_len;
 4028890:	e0bffd17 	ldw	r2,-12(fp)
 4028894:	10c00217 	ldw	r3,8(r2)
 4028898:	e0bffa17 	ldw	r2,-24(fp)
 402889c:	10c00415 	stw	r3,16(r2)
      /* finished with mbuf, free it now */
      m_free(m);
 40288a0:	e13ffd17 	ldw	r4,-12(fp)
 40288a4:	4026b5c0 	call	4026b5c <m_free>
      pkt->fhost = fhost;
 40288a8:	e0fffa17 	ldw	r3,-24(fp)
 40288ac:	e0bff717 	ldw	r2,-36(fp)
 40288b0:	18800715 	stw	r2,28(r3)
       * is up; if (after all that) we don't have an interface then we
       * fail with error EADDRNOTAVAIL; and finally, if we're built
       * for a single-homed configuration where there's only one
       * interface, we might as well use it, so we do.  
       */
      if (fhost == 0xffffffff)
 40288b4:	e0bff717 	ldw	r2,-36(fp)
 40288b8:	10bfffd8 	cmpnei	r2,r2,-1
 40288bc:	10004f1e 	bne	r2,zero,40289fc <rawip_usrreq+0x5f8>
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
 40288c0:	e0bff817 	ldw	r2,-32(fp)
 40288c4:	10800117 	ldw	r2,4(r2)
 40288c8:	1005003a 	cmpeq	r2,r2,zero
 40288cc:	1000111e 	bne	r2,zero,4028914 <rawip_usrreq+0x510>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40288d0:	008101b4 	movhi	r2,1030
 40288d4:	10a44904 	addi	r2,r2,-28380
 40288d8:	10800017 	ldw	r2,0(r2)
 40288dc:	e0bff215 	stw	r2,-56(fp)
 40288e0:	00000806 	br	4028904 <rawip_usrreq+0x500>
               if (ifp->n_ipaddr == ep->ipr_laddr)
 40288e4:	e0bff217 	ldw	r2,-56(fp)
 40288e8:	10c00a17 	ldw	r3,40(r2)
 40288ec:	e0bff817 	ldw	r2,-32(fp)
 40288f0:	10800117 	ldw	r2,4(r2)
 40288f4:	18802126 	beq	r3,r2,402897c <rawip_usrreq+0x578>
      if (fhost == 0xffffffff)
      {
#ifdef MULTI_HOMED
         if (ep->ipr_laddr != 0L)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40288f8:	e0bff217 	ldw	r2,-56(fp)
 40288fc:	10800017 	ldw	r2,0(r2)
 4028900:	e0bff215 	stw	r2,-56(fp)
 4028904:	e0bff217 	ldw	r2,-56(fp)
 4028908:	1004c03a 	cmpne	r2,r2,zero
 402890c:	103ff51e 	bne	r2,zero,40288e4 <rawip_usrreq+0x4e0>
 4028910:	00001a06 	br	402897c <rawip_usrreq+0x578>
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028914:	008101b4 	movhi	r2,1030
 4028918:	10a44904 	addi	r2,r2,-28380
 402891c:	10800017 	ldw	r2,0(r2)
 4028920:	e0bff215 	stw	r2,-56(fp)
 4028924:	00001206 	br	4028970 <rawip_usrreq+0x56c>
               if ((ifp->n_flags & NF_BCAST) &&
 4028928:	e0bff217 	ldw	r2,-56(fp)
 402892c:	10802a17 	ldw	r2,168(r2)
 4028930:	1080004c 	andi	r2,r2,1
 4028934:	10803fcc 	andi	r2,r2,255
 4028938:	1005003a 	cmpeq	r2,r2,zero
 402893c:	1000091e 	bne	r2,zero,4028964 <rawip_usrreq+0x560>
 4028940:	e0bff217 	ldw	r2,-56(fp)
 4028944:	10802717 	ldw	r2,156(r2)
 4028948:	1005003a 	cmpeq	r2,r2,zero
 402894c:	1000051e 	bne	r2,zero,4028964 <rawip_usrreq+0x560>
 4028950:	e0bff217 	ldw	r2,-56(fp)
 4028954:	10802717 	ldw	r2,156(r2)
 4028958:	10800617 	ldw	r2,24(r2)
 402895c:	10800060 	cmpeqi	r2,r2,1
 4028960:	1000061e 	bne	r2,zero,402897c <rawip_usrreq+0x578>
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
               if (ifp->n_ipaddr == ep->ipr_laddr)
                  break;
         }
         else {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028964:	e0bff217 	ldw	r2,-56(fp)
 4028968:	10800017 	ldw	r2,0(r2)
 402896c:	e0bff215 	stw	r2,-56(fp)
 4028970:	e0bff217 	ldw	r2,-56(fp)
 4028974:	1004c03a 	cmpne	r2,r2,zero
 4028978:	103feb1e 	bne	r2,zero,4028928 <rawip_usrreq+0x524>
               if ((ifp->n_flags & NF_BCAST) &&
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
 402897c:	e0bff217 	ldw	r2,-56(fp)
 4028980:	1004c03a 	cmpne	r2,r2,zero
 4028984:	10001a1e 	bne	r2,zero,40289f0 <rawip_usrreq+0x5ec>
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4028988:	008101b4 	movhi	r2,1030
 402898c:	10a44904 	addi	r2,r2,-28380
 4028990:	10800017 	ldw	r2,0(r2)
 4028994:	e0bff215 	stw	r2,-56(fp)
 4028998:	00000c06 	br	40289cc <rawip_usrreq+0x5c8>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 402899c:	e0bff217 	ldw	r2,-56(fp)
 40289a0:	10802717 	ldw	r2,156(r2)
 40289a4:	1005003a 	cmpeq	r2,r2,zero
 40289a8:	1000051e 	bne	r2,zero,40289c0 <rawip_usrreq+0x5bc>
 40289ac:	e0bff217 	ldw	r2,-56(fp)
 40289b0:	10802717 	ldw	r2,156(r2)
 40289b4:	10800617 	ldw	r2,24(r2)
 40289b8:	10800060 	cmpeqi	r2,r2,1
 40289bc:	1000061e 	bne	r2,zero,40289d8 <rawip_usrreq+0x5d4>
                   (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
         }
         if (ifp == NULL)
         {
            for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40289c0:	e0bff217 	ldw	r2,-56(fp)
 40289c4:	10800017 	ldw	r2,0(r2)
 40289c8:	e0bff215 	stw	r2,-56(fp)
 40289cc:	e0bff217 	ldw	r2,-56(fp)
 40289d0:	1004c03a 	cmpne	r2,r2,zero
 40289d4:	103ff11e 	bne	r2,zero,402899c <rawip_usrreq+0x598>
               if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
                  break;
            if (ifp == NULL)
 40289d8:	e0bff217 	ldw	r2,-56(fp)
 40289dc:	1004c03a 	cmpne	r2,r2,zero
 40289e0:	1000031e 	bne	r2,zero,40289f0 <rawip_usrreq+0x5ec>
               return(EADDRNOTAVAIL);
 40289e4:	00801f44 	movi	r2,125
 40289e8:	e0bfff15 	stw	r2,-4(fp)
 40289ec:	00007806 	br	4028bd0 <rawip_usrreq+0x7cc>
         }
         pkt->net = ifp;
 40289f0:	e0fffa17 	ldw	r3,-24(fp)
 40289f4:	e0bff217 	ldw	r2,-56(fp)
 40289f8:	18800615 	stw	r2,24(r3)
#ifdef IP_MULTICAST

      /* If the socket has an IP moptions structure for multicast options,
       * place a pointer to this structure in the PACKET structure.
       */
      if (so->inp_moptions)
 40289fc:	e0bffc17 	ldw	r2,-16(fp)
 4028a00:	10800317 	ldw	r2,12(r2)
 4028a04:	1005003a 	cmpeq	r2,r2,zero
 4028a08:	1000041e 	bne	r2,zero,4028a1c <rawip_usrreq+0x618>
         pkt->imo = so->inp_moptions;
 4028a0c:	e0bffc17 	ldw	r2,-16(fp)
 4028a10:	10c00317 	ldw	r3,12(r2)
 4028a14:	e0bffa17 	ldw	r2,-24(fp)
 4028a18:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

      if (so->so_options & SO_HDRINCL)
 4028a1c:	e0bffc17 	ldw	r2,-16(fp)
 4028a20:	10800417 	ldw	r2,16(r2)
 4028a24:	1088000c 	andi	r2,r2,8192
 4028a28:	1005003a 	cmpeq	r2,r2,zero
 4028a2c:	1000081e 	bne	r2,zero,4028a50 <rawip_usrreq+0x64c>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 4028a30:	0009883a 	mov	r4,zero
 4028a34:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         e = ip_raw_write(pkt);
 4028a38:	e13ffa17 	ldw	r4,-24(fp)
 4028a3c:	40399240 	call	4039924 <ip_raw_write>
 4028a40:	e0bffb15 	stw	r2,-20(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 4028a44:	0009883a 	mov	r4,zero
 4028a48:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
 4028a4c:	00002806 	br	4028af0 <rawip_usrreq+0x6ec>
      }
      else
      {
         pip = (struct ip *)(pkt->nb_prot - IPHSIZ);
 4028a50:	e0bffa17 	ldw	r2,-24(fp)
 4028a54:	10800317 	ldw	r2,12(r2)
 4028a58:	10bffb04 	addi	r2,r2,-20
 4028a5c:	e0bff415 	stw	r2,-48(fp)
         if (ep->ipr_laddr)
 4028a60:	e0bff817 	ldw	r2,-32(fp)
 4028a64:	10800117 	ldw	r2,4(r2)
 4028a68:	1005003a 	cmpeq	r2,r2,zero
 4028a6c:	1000051e 	bne	r2,zero,4028a84 <rawip_usrreq+0x680>
            pip->ip_src = ep->ipr_laddr;
 4028a70:	e0bff817 	ldw	r2,-32(fp)
 4028a74:	10c00117 	ldw	r3,4(r2)
 4028a78:	e0bff417 	ldw	r2,-48(fp)
 4028a7c:	10c00315 	stw	r3,12(r2)
 4028a80:	00000e06 	br	4028abc <rawip_usrreq+0x6b8>
         else
         {
            if (fhost == 0xffffffff)
 4028a84:	e0bff717 	ldw	r2,-36(fp)
 4028a88:	10bfffd8 	cmpnei	r2,r2,-1
 4028a8c:	1000061e 	bne	r2,zero,4028aa8 <rawip_usrreq+0x6a4>
               pip->ip_src = pkt->net->n_ipaddr;
 4028a90:	e0bffa17 	ldw	r2,-24(fp)
 4028a94:	10800617 	ldw	r2,24(r2)
 4028a98:	10c00a17 	ldw	r3,40(r2)
 4028a9c:	e0bff417 	ldw	r2,-48(fp)
 4028aa0:	10c00315 	stw	r3,12(r2)
 4028aa4:	00000506 	br	4028abc <rawip_usrreq+0x6b8>
            else
               pip->ip_src = ip_mymach(fhost);
 4028aa8:	e13ff717 	ldw	r4,-36(fp)
 4028aac:	403a4b00 	call	403a4b0 <ip_mymach>
 4028ab0:	1007883a 	mov	r3,r2
 4028ab4:	e0bff417 	ldw	r2,-48(fp)
 4028ab8:	10c00315 	stw	r3,12(r2)
         }
         pip->ip_dest = fhost;
 4028abc:	e0fff417 	ldw	r3,-48(fp)
 4028ac0:	e0bff717 	ldw	r2,-36(fp)
 4028ac4:	18800415 	stw	r2,16(r3)
         UNLOCK_NET_RESOURCE(NET_RESID);
 4028ac8:	0009883a 	mov	r4,zero
 4028acc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         e = ip_write(ep->ipr_prot, pkt);
 4028ad0:	e0bff817 	ldw	r2,-32(fp)
 4028ad4:	10800503 	ldbu	r2,20(r2)
 4028ad8:	11003fcc 	andi	r4,r2,255
 4028adc:	e17ffa17 	ldw	r5,-24(fp)
 4028ae0:	403932c0 	call	403932c <ip_write>
 4028ae4:	e0bffb15 	stw	r2,-20(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 4028ae8:	0009883a 	mov	r4,zero
 4028aec:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      }         
      if (e < 0) 
 4028af0:	e0bffb17 	ldw	r2,-20(fp)
 4028af4:	1004403a 	cmpge	r2,r2,zero
 4028af8:	1000031e 	bne	r2,zero,4028b08 <rawip_usrreq+0x704>
         return(e);
 4028afc:	e0bffb17 	ldw	r2,-20(fp)
 4028b00:	e0bfff15 	stw	r2,-4(fp)
 4028b04:	00003206 	br	4028bd0 <rawip_usrreq+0x7cc>
      return 0;
 4028b08:	e03fff15 	stw	zero,-4(fp)
 4028b0c:	00003006 	br	4028bd0 <rawip_usrreq+0x7cc>
   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 4028b10:	e0bffe17 	ldw	r2,-8(fp)
 4028b14:	1004c03a 	cmpne	r2,r2,zero
 4028b18:	1000031e 	bne	r2,zero,4028b28 <rawip_usrreq+0x724>
         return(EINVAL);
 4028b1c:	00800584 	movi	r2,22
 4028b20:	e0bfff15 	stw	r2,-4(fp)
 4028b24:	00002a06 	br	4028bd0 <rawip_usrreq+0x7cc>
      sin = mtod(nam, struct sockaddr_in *);
 4028b28:	e0bffe17 	ldw	r2,-8(fp)
 4028b2c:	10800317 	ldw	r2,12(r2)
 4028b30:	e0bff915 	stw	r2,-28(fp)
      if (sin == NULL)
 4028b34:	e0bff917 	ldw	r2,-28(fp)
 4028b38:	1004c03a 	cmpne	r2,r2,zero
 4028b3c:	1000031e 	bne	r2,zero,4028b4c <rawip_usrreq+0x748>
         return(EINVAL);
 4028b40:	00800584 	movi	r2,22
 4028b44:	e0bfff15 	stw	r2,-4(fp)
 4028b48:	00002106 	br	4028bd0 <rawip_usrreq+0x7cc>
      ep = rawip_lookup(so);
 4028b4c:	e13ffc17 	ldw	r4,-16(fp)
 4028b50:	40281c00 	call	40281c0 <rawip_lookup>
 4028b54:	e0bff815 	stw	r2,-32(fp)
      if (!ep)
 4028b58:	e0bff817 	ldw	r2,-32(fp)
 4028b5c:	1004c03a 	cmpne	r2,r2,zero
 4028b60:	1000031e 	bne	r2,zero,4028b70 <rawip_usrreq+0x76c>
         return(EINVAL);
 4028b64:	00800584 	movi	r2,22
 4028b68:	e0bfff15 	stw	r2,-4(fp)
 4028b6c:	00001806 	br	4028bd0 <rawip_usrreq+0x7cc>
      sin->sin_port = 0;
 4028b70:	e0bff917 	ldw	r2,-28(fp)
 4028b74:	1000008d 	sth	zero,2(r2)
      nam->m_len = sizeof(*sin);
 4028b78:	e0fffe17 	ldw	r3,-8(fp)
 4028b7c:	00800404 	movi	r2,16
 4028b80:	18800215 	stw	r2,8(r3)
      if (req == PRU_SOCKADDR)
 4028b84:	e0bff317 	ldw	r2,-52(fp)
 4028b88:	108003d8 	cmpnei	r2,r2,15
 4028b8c:	1000051e 	bne	r2,zero,4028ba4 <rawip_usrreq+0x7a0>
      {
         sin->sin_addr.s_addr = ep->ipr_laddr;
 4028b90:	e0bff817 	ldw	r2,-32(fp)
 4028b94:	10c00117 	ldw	r3,4(r2)
 4028b98:	e0bff917 	ldw	r2,-28(fp)
 4028b9c:	10c00115 	stw	r3,4(r2)
 4028ba0:	00000406 	br	4028bb4 <rawip_usrreq+0x7b0>
      }
      else /* PRU_PEERADDR */
      {
         sin->sin_addr.s_addr = ep->ipr_faddr;
 4028ba4:	e0bff817 	ldw	r2,-32(fp)
 4028ba8:	10c00217 	ldw	r3,8(r2)
 4028bac:	e0bff917 	ldw	r2,-28(fp)
 4028bb0:	10c00115 	stw	r3,4(r2)
      }
      return 0;
 4028bb4:	e03fff15 	stw	zero,-4(fp)
 4028bb8:	00000506 	br	4028bd0 <rawip_usrreq+0x7cc>
   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 4028bbc:	4025bb40 	call	4025bb4 <dtrap>
      return 0;
 4028bc0:	e03fff15 	stw	zero,-4(fp)
 4028bc4:	00000206 	br	4028bd0 <rawip_usrreq+0x7cc>
   case PRU_LISTEN:     /* don't support these for raw IP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
 4028bc8:	008017c4 	movi	r2,95
 4028bcc:	e0bfff15 	stw	r2,-4(fp)
 4028bd0:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 4028bd4:	e037883a 	mov	sp,fp
 4028bd8:	dfc00217 	ldw	ra,8(sp)
 4028bdc:	df000117 	ldw	fp,4(sp)
 4028be0:	dc000017 	ldw	r16,0(sp)
 4028be4:	dec00304 	addi	sp,sp,12
 4028be8:	f800283a 	ret

04028bec <DOMAIN_CHECK>:
 */

#ifdef NPDEBUG
void
DOMAIN_CHECK(struct socket * so, int size)
{
 4028bec:	defffc04 	addi	sp,sp,-16
 4028bf0:	dfc00315 	stw	ra,12(sp)
 4028bf4:	df000215 	stw	fp,8(sp)
 4028bf8:	df000204 	addi	fp,sp,8
 4028bfc:	e13ffe15 	stw	r4,-8(fp)
 4028c00:	e17fff15 	stw	r5,-4(fp)
#ifdef IP_V4
   if((so->so_domain == AF_INET) &&
 4028c04:	e0bffe17 	ldw	r2,-8(fp)
 4028c08:	10800517 	ldw	r2,20(r2)
 4028c0c:	10800098 	cmpnei	r2,r2,2
 4028c10:	1000041e 	bne	r2,zero,4028c24 <DOMAIN_CHECK+0x38>
 4028c14:	e0bfff17 	ldw	r2,-4(fp)
 4028c18:	10800428 	cmpgeui	r2,r2,16
 4028c1c:	1000011e 	bne	r2,zero,4028c24 <DOMAIN_CHECK+0x38>
      (size < sizeof(struct sockaddr_in)))
   {
      dtrap(); /* programmer passed wrong structure */
 4028c20:	4025bb40 	call	4025bb4 <dtrap>
      (size != sizeof(struct sockaddr_in6)))
   {
      dtrap(); /* programmer passed wrong structure */
   }
#endif   /* IP_V6 */
}
 4028c24:	e037883a 	mov	sp,fp
 4028c28:	dfc00117 	ldw	ra,4(sp)
 4028c2c:	df000017 	ldw	fp,0(sp)
 4028c30:	dec00204 	addi	sp,sp,8
 4028c34:	f800283a 	ret

04028c38 <t_socket>:

long
t_socket(int family, 
   int   type, 
   int   proto)
{
 4028c38:	defff904 	addi	sp,sp,-28
 4028c3c:	dfc00615 	stw	ra,24(sp)
 4028c40:	df000515 	stw	fp,20(sp)
 4028c44:	df000504 	addi	fp,sp,20
 4028c48:	e13ffc15 	stw	r4,-16(fp)
 4028c4c:	e17ffd15 	stw	r5,-12(fp)
 4028c50:	e1bffe15 	stw	r6,-8(fp)
   struct socket *   so;

   INET_TRACE (INETM_SOCKET, ("SOCK:sock:family %d, typ %d, proto %d\n",
    family, type, proto));
   LOCK_NET_RESOURCE(NET_RESID);
 4028c54:	0009883a 	mov	r4,zero
 4028c58:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   if ((so = socreate (family, type, proto)) == NULL) 
 4028c5c:	e13ffc17 	ldw	r4,-16(fp)
 4028c60:	e17ffd17 	ldw	r5,-12(fp)
 4028c64:	e1bffe17 	ldw	r6,-8(fp)
 4028c68:	402a3e80 	call	402a3e8 <socreate>
 4028c6c:	e0bffb15 	stw	r2,-20(fp)
 4028c70:	e0bffb17 	ldw	r2,-20(fp)
 4028c74:	1004c03a 	cmpne	r2,r2,zero
 4028c78:	1000051e 	bne	r2,zero,4028c90 <t_socket+0x58>
   {  /* can't really return error info since no socket.... */
      UNLOCK_NET_RESOURCE(NET_RESID);
 4028c7c:	0009883a 	mov	r4,zero
 4028c80:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 4028c84:	00bfffc4 	movi	r2,-1
 4028c88:	e0bfff15 	stw	r2,-4(fp)
 4028c8c:	00000806 	br	4028cb0 <t_socket+0x78>
   }
   SOC_RANGE(so);
   so->so_error = 0;
 4028c90:	e0bffb17 	ldw	r2,-20(fp)
 4028c94:	10000615 	stw	zero,24(r2)
   UNLOCK_NET_RESOURCE(NET_RESID);
 4028c98:	0009883a 	mov	r4,zero
 4028c9c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return SO2LONG(so);
 4028ca0:	e0bffb17 	ldw	r2,-20(fp)
 4028ca4:	1004d0ba 	srli	r2,r2,2
 4028ca8:	10800804 	addi	r2,r2,32
 4028cac:	e0bfff15 	stw	r2,-4(fp)
 4028cb0:	e0bfff17 	ldw	r2,-4(fp)
}
 4028cb4:	e037883a 	mov	sp,fp
 4028cb8:	dfc00117 	ldw	ra,4(sp)
 4028cbc:	df000017 	ldw	fp,0(sp)
 4028cc0:	dec00204 	addi	sp,sp,8
 4028cc4:	f800283a 	ret

04028cc8 <t_bind>:

int
t_bind (long s, 
   struct sockaddr * addr,
   int addrlen)
{
 4028cc8:	defff104 	addi	sp,sp,-60
 4028ccc:	dfc00e15 	stw	ra,56(sp)
 4028cd0:	df000d15 	stw	fp,52(sp)
 4028cd4:	df000d04 	addi	fp,sp,52
 4028cd8:	e13ffc15 	stw	r4,-16(fp)
 4028cdc:	e17ffd15 	stw	r5,-12(fp)
 4028ce0:	e1bffe15 	stw	r6,-8(fp)
   struct sockaddr   sa;
   struct sockaddr * sap;
   struct socket *   so;
   int               err;

   so = LONG2SO(s);  /* convert long to socket */
 4028ce4:	e0bffc17 	ldw	r2,-16(fp)
 4028ce8:	10bff804 	addi	r2,r2,-32
 4028cec:	1085883a 	add	r2,r2,r2
 4028cf0:	1085883a 	add	r2,r2,r2
 4028cf4:	e0bff515 	stw	r2,-44(fp)
   SOC_CHECK(so);
 4028cf8:	008101b4 	movhi	r2,1030
 4028cfc:	10a34504 	addi	r2,r2,-29420
 4028d00:	e0bff315 	stw	r2,-52(fp)
 4028d04:	00000606 	br	4028d20 <t_bind+0x58>
 4028d08:	e0fff317 	ldw	r3,-52(fp)
 4028d0c:	e0bff517 	ldw	r2,-44(fp)
 4028d10:	18800626 	beq	r3,r2,4028d2c <t_bind+0x64>
 4028d14:	e0bff317 	ldw	r2,-52(fp)
 4028d18:	10800017 	ldw	r2,0(r2)
 4028d1c:	e0bff315 	stw	r2,-52(fp)
 4028d20:	e0bff317 	ldw	r2,-52(fp)
 4028d24:	1004c03a 	cmpne	r2,r2,zero
 4028d28:	103ff71e 	bne	r2,zero,4028d08 <t_bind+0x40>
 4028d2c:	e0fff317 	ldw	r3,-52(fp)
 4028d30:	e0bff517 	ldw	r2,-44(fp)
 4028d34:	18800426 	beq	r3,r2,4028d48 <t_bind+0x80>
 4028d38:	4025bb40 	call	4025bb4 <dtrap>
 4028d3c:	00bfffc4 	movi	r2,-1
 4028d40:	e0bfff15 	stw	r2,-4(fp)
 4028d44:	00003906 	br	4028e2c <t_bind+0x164>
   DOMAIN_CHECK(so, addrlen);
 4028d48:	e13ff517 	ldw	r4,-44(fp)
 4028d4c:	e17ffe17 	ldw	r5,-8(fp)
 4028d50:	4028bec0 	call	4028bec <DOMAIN_CHECK>

   so->so_error = 0;
 4028d54:	e0bff517 	ldw	r2,-44(fp)
 4028d58:	10000615 	stw	zero,24(r2)
   if (addr == (struct sockaddr *)NULL) 
 4028d5c:	e0bffd17 	ldw	r2,-12(fp)
 4028d60:	1004c03a 	cmpne	r2,r2,zero
 4028d64:	10000d1e 	bne	r2,zero,4028d9c <t_bind+0xd4>
   {
      MEMSET ((void *)&sa, 0, sizeof(sa));
 4028d68:	e0bff804 	addi	r2,fp,-32
 4028d6c:	10000015 	stw	zero,0(r2)
 4028d70:	10000115 	stw	zero,4(r2)
 4028d74:	10000215 	stw	zero,8(r2)
 4028d78:	10000315 	stw	zero,12(r2)
      addrlen = sizeof(sa);
 4028d7c:	00800404 	movi	r2,16
 4028d80:	e0bffe15 	stw	r2,-8(fp)
      sa.sa_family = so->so_domain;
 4028d84:	e0bff517 	ldw	r2,-44(fp)
 4028d88:	10800517 	ldw	r2,20(r2)
 4028d8c:	e0bff80d 	sth	r2,-32(fp)
      sap = &sa;
 4028d90:	e0bff804 	addi	r2,fp,-32
 4028d94:	e0bff615 	stw	r2,-40(fp)
 4028d98:	00000206 	br	4028da4 <t_bind+0xdc>
   } else
      sap = addr;
 4028d9c:	e0bffd17 	ldw	r2,-12(fp)
 4028da0:	e0bff615 	stw	r2,-40(fp)

   if ((nam = sockargs (sap, addrlen, MT_SONAME)) == NULL) 
 4028da4:	e13ff617 	ldw	r4,-40(fp)
 4028da8:	e17ffe17 	ldw	r5,-8(fp)
 4028dac:	01800244 	movi	r6,9
 4028db0:	402a2b40 	call	402a2b4 <sockargs>
 4028db4:	e0bff715 	stw	r2,-36(fp)
 4028db8:	e0bff717 	ldw	r2,-36(fp)
 4028dbc:	1004c03a 	cmpne	r2,r2,zero
 4028dc0:	1000061e 	bne	r2,zero,4028ddc <t_bind+0x114>
   {
      so->so_error = ENOMEM;
 4028dc4:	e0fff517 	ldw	r3,-44(fp)
 4028dc8:	00800304 	movi	r2,12
 4028dcc:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4028dd0:	00bfffc4 	movi	r2,-1
 4028dd4:	e0bfff15 	stw	r2,-4(fp)
 4028dd8:	00001406 	br	4028e2c <t_bind+0x164>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 4028ddc:	0009883a 	mov	r4,zero
 4028de0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   err = sobind (so, nam);
 4028de4:	e13ff517 	ldw	r4,-44(fp)
 4028de8:	e17ff717 	ldw	r5,-36(fp)
 4028dec:	402a5b40 	call	402a5b4 <sobind>
 4028df0:	e0bff415 	stw	r2,-48(fp)
   m_freem(nam);
 4028df4:	e13ff717 	ldw	r4,-36(fp)
 4028df8:	4026c900 	call	4026c90 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 4028dfc:	0009883a 	mov	r4,zero
 4028e00:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (err) 
 4028e04:	e0bff417 	ldw	r2,-48(fp)
 4028e08:	1005003a 	cmpeq	r2,r2,zero
 4028e0c:	1000061e 	bne	r2,zero,4028e28 <t_bind+0x160>
   {
      so->so_error = err;
 4028e10:	e0fff517 	ldw	r3,-44(fp)
 4028e14:	e0bff417 	ldw	r2,-48(fp)
 4028e18:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4028e1c:	00bfffc4 	movi	r2,-1
 4028e20:	e0bfff15 	stw	r2,-4(fp)
 4028e24:	00000106 	br	4028e2c <t_bind+0x164>
   }
   return 0;
 4028e28:	e03fff15 	stw	zero,-4(fp)
 4028e2c:	e0bfff17 	ldw	r2,-4(fp)
}
 4028e30:	e037883a 	mov	sp,fp
 4028e34:	dfc00117 	ldw	ra,4(sp)
 4028e38:	df000017 	ldw	fp,0(sp)
 4028e3c:	dec00204 	addi	sp,sp,8
 4028e40:	f800283a 	ret

04028e44 <t_listen>:
 */

int
t_listen(long s, 
   int   backlog)
{
 4028e44:	defff804 	addi	sp,sp,-32
 4028e48:	dfc00715 	stw	ra,28(sp)
 4028e4c:	df000615 	stw	fp,24(sp)
 4028e50:	df000604 	addi	fp,sp,24
 4028e54:	e13ffd15 	stw	r4,-12(fp)
 4028e58:	e17ffe15 	stw	r5,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);  /* convert long to socket */
 4028e5c:	e0bffd17 	ldw	r2,-12(fp)
 4028e60:	10bff804 	addi	r2,r2,-32
 4028e64:	1085883a 	add	r2,r2,r2
 4028e68:	1085883a 	add	r2,r2,r2
 4028e6c:	e0bffc15 	stw	r2,-16(fp)
   SOC_CHECK(so);
 4028e70:	008101b4 	movhi	r2,1030
 4028e74:	10a34504 	addi	r2,r2,-29420
 4028e78:	e0bffa15 	stw	r2,-24(fp)
 4028e7c:	00000606 	br	4028e98 <t_listen+0x54>
 4028e80:	e0fffa17 	ldw	r3,-24(fp)
 4028e84:	e0bffc17 	ldw	r2,-16(fp)
 4028e88:	18800626 	beq	r3,r2,4028ea4 <t_listen+0x60>
 4028e8c:	e0bffa17 	ldw	r2,-24(fp)
 4028e90:	10800017 	ldw	r2,0(r2)
 4028e94:	e0bffa15 	stw	r2,-24(fp)
 4028e98:	e0bffa17 	ldw	r2,-24(fp)
 4028e9c:	1004c03a 	cmpne	r2,r2,zero
 4028ea0:	103ff71e 	bne	r2,zero,4028e80 <t_listen+0x3c>
 4028ea4:	e0fffa17 	ldw	r3,-24(fp)
 4028ea8:	e0bffc17 	ldw	r2,-16(fp)
 4028eac:	18800426 	beq	r3,r2,4028ec0 <t_listen+0x7c>
 4028eb0:	4025bb40 	call	4025bb4 <dtrap>
 4028eb4:	00bfffc4 	movi	r2,-1
 4028eb8:	e0bfff15 	stw	r2,-4(fp)
 4028ebc:	00001406 	br	4028f10 <t_listen+0xcc>
   so->so_error = 0;
 4028ec0:	e0bffc17 	ldw	r2,-16(fp)
 4028ec4:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("SOCK:listen:qlen %d\n", backlog));

   LOCK_NET_RESOURCE(NET_RESID);
 4028ec8:	0009883a 	mov	r4,zero
 4028ecc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   err = solisten (so, backlog);
 4028ed0:	e13ffc17 	ldw	r4,-16(fp)
 4028ed4:	e17ffe17 	ldw	r5,-8(fp)
 4028ed8:	402a6100 	call	402a610 <solisten>
 4028edc:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 4028ee0:	0009883a 	mov	r4,zero
 4028ee4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 4028ee8:	e0bffb17 	ldw	r2,-20(fp)
 4028eec:	1005003a 	cmpeq	r2,r2,zero
 4028ef0:	1000061e 	bne	r2,zero,4028f0c <t_listen+0xc8>
   {
      so->so_error = err;
 4028ef4:	e0fffc17 	ldw	r3,-16(fp)
 4028ef8:	e0bffb17 	ldw	r2,-20(fp)
 4028efc:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4028f00:	00bfffc4 	movi	r2,-1
 4028f04:	e0bfff15 	stw	r2,-4(fp)
 4028f08:	00000106 	br	4028f10 <t_listen+0xcc>
   }
   return 0;
 4028f0c:	e03fff15 	stw	zero,-4(fp)
 4028f10:	e0bfff17 	ldw	r2,-4(fp)
}
 4028f14:	e037883a 	mov	sp,fp
 4028f18:	dfc00117 	ldw	ra,4(sp)
 4028f1c:	df000017 	ldw	fp,0(sp)
 4028f20:	dec00204 	addi	sp,sp,8
 4028f24:	f800283a 	ret

04028f28 <t_accept>:

long
t_accept(long s, 
   struct sockaddr * addr,
   int * addrlen)
{
 4028f28:	defff604 	addi	sp,sp,-40
 4028f2c:	dfc00915 	stw	ra,36(sp)
 4028f30:	df000815 	stw	fp,32(sp)
 4028f34:	df000804 	addi	fp,sp,32
 4028f38:	e13ffc15 	stw	r4,-16(fp)
 4028f3c:	e17ffd15 	stw	r5,-12(fp)
 4028f40:	e1bffe15 	stw	r6,-8(fp)
   char logbuf[10];
#endif
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 4028f44:	e0bffc17 	ldw	r2,-16(fp)
 4028f48:	10bff804 	addi	r2,r2,-32
 4028f4c:	1085883a 	add	r2,r2,r2
 4028f50:	1085883a 	add	r2,r2,r2
 4028f54:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
 4028f58:	008101b4 	movhi	r2,1030
 4028f5c:	10a34504 	addi	r2,r2,-29420
 4028f60:	e0bff915 	stw	r2,-28(fp)
 4028f64:	00000606 	br	4028f80 <t_accept+0x58>
 4028f68:	e0fff917 	ldw	r3,-28(fp)
 4028f6c:	e0bffb17 	ldw	r2,-20(fp)
 4028f70:	18800626 	beq	r3,r2,4028f8c <t_accept+0x64>
 4028f74:	e0bff917 	ldw	r2,-28(fp)
 4028f78:	10800017 	ldw	r2,0(r2)
 4028f7c:	e0bff915 	stw	r2,-28(fp)
 4028f80:	e0bff917 	ldw	r2,-28(fp)
 4028f84:	1004c03a 	cmpne	r2,r2,zero
 4028f88:	103ff71e 	bne	r2,zero,4028f68 <t_accept+0x40>
 4028f8c:	e0fff917 	ldw	r3,-28(fp)
 4028f90:	e0bffb17 	ldw	r2,-20(fp)
 4028f94:	18800426 	beq	r3,r2,4028fa8 <t_accept+0x80>
 4028f98:	4025bb40 	call	4025bb4 <dtrap>
 4028f9c:	00bfffc4 	movi	r2,-1
 4028fa0:	e0bfff15 	stw	r2,-4(fp)
 4028fa4:	00008006 	br	40291a8 <t_accept+0x280>
   DOMAIN_CHECK(so, *addrlen);
 4028fa8:	e0bffe17 	ldw	r2,-8(fp)
 4028fac:	11400017 	ldw	r5,0(r2)
 4028fb0:	e13ffb17 	ldw	r4,-20(fp)
 4028fb4:	4028bec0 	call	4028bec <DOMAIN_CHECK>

   so->so_error = 0;
 4028fb8:	e0bffb17 	ldw	r2,-20(fp)
 4028fbc:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
      ("INET:accept:so %x so_qlen %d so_state %x\n", so, so->so_qlen, so->so_state));
   if ((so->so_options & SO_ACCEPTCONN) == 0)
 4028fc0:	e0bffb17 	ldw	r2,-20(fp)
 4028fc4:	10800417 	ldw	r2,16(r2)
 4028fc8:	1080008c 	andi	r2,r2,2
 4028fcc:	1004c03a 	cmpne	r2,r2,zero
 4028fd0:	1000061e 	bne	r2,zero,4028fec <t_accept+0xc4>
   {
      so->so_error = EINVAL;
 4028fd4:	e0fffb17 	ldw	r3,-20(fp)
 4028fd8:	00800584 	movi	r2,22
 4028fdc:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 4028fe0:	00bfffc4 	movi	r2,-1
 4028fe4:	e0bfff15 	stw	r2,-4(fp)
 4028fe8:	00006f06 	br	40291a8 <t_accept+0x280>
   }
   if ((so->so_state & SS_NBIO) && so->so_qlen == 0)
 4028fec:	e0bffb17 	ldw	r2,-20(fp)
 4028ff0:	1080088b 	ldhu	r2,34(r2)
 4028ff4:	10bfffcc 	andi	r2,r2,65535
 4028ff8:	1080400c 	andi	r2,r2,256
 4028ffc:	1005003a 	cmpeq	r2,r2,zero
 4029000:	10000d1e 	bne	r2,zero,4029038 <t_accept+0x110>
 4029004:	e0bffb17 	ldw	r2,-20(fp)
 4029008:	10801e43 	ldbu	r2,121(r2)
 402900c:	10803fcc 	andi	r2,r2,255
 4029010:	1080201c 	xori	r2,r2,128
 4029014:	10bfe004 	addi	r2,r2,-128
 4029018:	1004c03a 	cmpne	r2,r2,zero
 402901c:	1000061e 	bne	r2,zero,4029038 <t_accept+0x110>
   {
      so->so_error = EWOULDBLOCK;
 4029020:	e0fffb17 	ldw	r3,-20(fp)
 4029024:	008002c4 	movi	r2,11
 4029028:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 402902c:	00bfffc4 	movi	r2,-1
 4029030:	e0bfff15 	stw	r2,-4(fp)
 4029034:	00005c06 	br	40291a8 <t_accept+0x280>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 4029038:	0009883a 	mov	r4,zero
 402903c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   while (so->so_qlen == 0 && so->so_error == 0)
 4029040:	00001206 	br	402908c <t_accept+0x164>
   {
      if (so->so_state & SS_CANTRCVMORE)
 4029044:	e0bffb17 	ldw	r2,-20(fp)
 4029048:	1080088b 	ldhu	r2,34(r2)
 402904c:	10bfffcc 	andi	r2,r2,65535
 4029050:	1080080c 	andi	r2,r2,32
 4029054:	1005003a 	cmpeq	r2,r2,zero
 4029058:	1000081e 	bne	r2,zero,402907c <t_accept+0x154>
      {
         so->so_error = ECONNABORTED;
 402905c:	e0fffb17 	ldw	r3,-20(fp)
 4029060:	00801c44 	movi	r2,113
 4029064:	18800615 	stw	r2,24(r3)
         UNLOCK_NET_RESOURCE(NET_RESID);
 4029068:	0009883a 	mov	r4,zero
 402906c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 4029070:	00bfffc4 	movi	r2,-1
 4029074:	e0bfff15 	stw	r2,-4(fp)
 4029078:	00004b06 	br	40291a8 <t_accept+0x280>
      }
      tcp_sleep ((char *)&so->so_timeo);
 402907c:	e0bffb17 	ldw	r2,-20(fp)
 4029080:	10800904 	addi	r2,r2,36
 4029084:	1009883a 	mov	r4,r2
 4029088:	40217880 	call	4021788 <tcp_sleep>
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
   }
   LOCK_NET_RESOURCE(NET_RESID);
   while (so->so_qlen == 0 && so->so_error == 0)
 402908c:	e0bffb17 	ldw	r2,-20(fp)
 4029090:	10801e43 	ldbu	r2,121(r2)
 4029094:	10803fcc 	andi	r2,r2,255
 4029098:	1080201c 	xori	r2,r2,128
 402909c:	10bfe004 	addi	r2,r2,-128
 40290a0:	1004c03a 	cmpne	r2,r2,zero
 40290a4:	1000041e 	bne	r2,zero,40290b8 <t_accept+0x190>
 40290a8:	e0bffb17 	ldw	r2,-20(fp)
 40290ac:	10800617 	ldw	r2,24(r2)
 40290b0:	1005003a 	cmpeq	r2,r2,zero
 40290b4:	103fe31e 	bne	r2,zero,4029044 <t_accept+0x11c>
         UNLOCK_NET_RESOURCE(NET_RESID);
         return SOCKET_ERROR;
      }
      tcp_sleep ((char *)&so->so_timeo);
   }
   if (so->so_error)
 40290b8:	e0bffb17 	ldw	r2,-20(fp)
 40290bc:	10800617 	ldw	r2,24(r2)
 40290c0:	1005003a 	cmpeq	r2,r2,zero
 40290c4:	1000051e 	bne	r2,zero,40290dc <t_accept+0x1b4>
   {
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 40290c8:	0009883a 	mov	r4,zero
 40290cc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 40290d0:	00bfffc4 	movi	r2,-1
 40290d4:	e0bfff15 	stw	r2,-4(fp)
 40290d8:	00003306 	br	40291a8 <t_accept+0x280>
   }
   nam = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 40290dc:	01000244 	movi	r4,9
 40290e0:	01400404 	movi	r5,16
 40290e4:	40269b40 	call	40269b4 <m_getnbuf>
 40290e8:	e0bffa15 	stw	r2,-24(fp)
   if (nam == NULL) 
 40290ec:	e0bffa17 	ldw	r2,-24(fp)
 40290f0:	1004c03a 	cmpne	r2,r2,zero
 40290f4:	1000081e 	bne	r2,zero,4029118 <t_accept+0x1f0>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 40290f8:	0009883a 	mov	r4,zero
 40290fc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      so->so_error = ENOMEM;
 4029100:	e0fffb17 	ldw	r3,-20(fp)
 4029104:	00800304 	movi	r2,12
 4029108:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_accept[%d]: %d", __LINE__, so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 402910c:	00bfffc4 	movi	r2,-1
 4029110:	e0bfff15 	stw	r2,-4(fp)
 4029114:	00002406 	br	40291a8 <t_accept+0x280>
   }
   { 
      struct socket *aso = so->so_q;
 4029118:	e0bffb17 	ldw	r2,-20(fp)
 402911c:	10801d17 	ldw	r2,116(r2)
 4029120:	e0bff815 	stw	r2,-32(fp)
      if (soqremque (aso, 1) == 0)
 4029124:	e13ff817 	ldw	r4,-32(fp)
 4029128:	01400044 	movi	r5,1
 402912c:	402ccd40 	call	402ccd4 <soqremque>
 4029130:	1004c03a 	cmpne	r2,r2,zero
 4029134:	1000031e 	bne	r2,zero,4029144 <t_accept+0x21c>
         panic("accept");
 4029138:	01010174 	movhi	r4,1029
 402913c:	212e4804 	addi	r4,r4,-18144
 4029140:	4020e100 	call	4020e10 <panic>
      so = aso;
 4029144:	e0bff817 	ldw	r2,-32(fp)
 4029148:	e0bffb15 	stw	r2,-20(fp)
   }
   (void)soaccept (so, nam);
 402914c:	e13ffb17 	ldw	r4,-20(fp)
 4029150:	e17ffa17 	ldw	r5,-24(fp)
 4029154:	402ab740 	call	402ab74 <soaccept>
      INET_TRACE (INETM_SOCKET, ("INET:accept:done so %lx port %d addr %lx\n",
       so, sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_INET */
   /* return the addressing info in the passed structure */
   if (addr != NULL)
 4029158:	e0bffd17 	ldw	r2,-12(fp)
 402915c:	1005003a 	cmpeq	r2,r2,zero
 4029160:	1000091e 	bne	r2,zero,4029188 <t_accept+0x260>
      MEMCPY(addr, nam->m_data, *addrlen);
 4029164:	e0bffa17 	ldw	r2,-24(fp)
 4029168:	11400317 	ldw	r5,12(r2)
 402916c:	e0bffe17 	ldw	r2,-8(fp)
 4029170:	10800017 	ldw	r2,0(r2)
 4029174:	1007883a 	mov	r3,r2
 4029178:	e0bffd17 	ldw	r2,-12(fp)
 402917c:	1009883a 	mov	r4,r2
 4029180:	180d883a 	mov	r6,r3
 4029184:	4001de40 	call	4001de4 <memcpy>
   m_freem (nam);
 4029188:	e13ffa17 	ldw	r4,-24(fp)
 402918c:	4026c900 	call	4026c90 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 4029190:	0009883a 	mov	r4,zero
 4029194:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   SOC_RANGE(so);
   return SO2LONG(so);
 4029198:	e0bffb17 	ldw	r2,-20(fp)
 402919c:	1004d0ba 	srli	r2,r2,2
 40291a0:	10800804 	addi	r2,r2,32
 40291a4:	e0bfff15 	stw	r2,-4(fp)
 40291a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40291ac:	e037883a 	mov	sp,fp
 40291b0:	dfc00117 	ldw	ra,4(sp)
 40291b4:	df000017 	ldw	fp,0(sp)
 40291b8:	dec00204 	addi	sp,sp,8
 40291bc:	f800283a 	ret

040291c0 <t_connect>:

int
t_connect(long s, 
   struct sockaddr * addr,
   int   addrlen)
{
 40291c0:	defff704 	addi	sp,sp,-36
 40291c4:	dfc00815 	stw	ra,32(sp)
 40291c8:	df000715 	stw	fp,28(sp)
 40291cc:	df000704 	addi	fp,sp,28
 40291d0:	e13ffc15 	stw	r4,-16(fp)
 40291d4:	e17ffd15 	stw	r5,-12(fp)
 40291d8:	e1bffe15 	stw	r6,-8(fp)
   struct socket *   so;
   struct mbuf *  nam;

   so = LONG2SO(s);
 40291dc:	e0bffc17 	ldw	r2,-16(fp)
 40291e0:	10bff804 	addi	r2,r2,-32
 40291e4:	1085883a 	add	r2,r2,r2
 40291e8:	1085883a 	add	r2,r2,r2
 40291ec:	e0bffb15 	stw	r2,-20(fp)
   SOC_CHECK(so);
 40291f0:	008101b4 	movhi	r2,1030
 40291f4:	10a34504 	addi	r2,r2,-29420
 40291f8:	e0bff915 	stw	r2,-28(fp)
 40291fc:	00000606 	br	4029218 <t_connect+0x58>
 4029200:	e0fff917 	ldw	r3,-28(fp)
 4029204:	e0bffb17 	ldw	r2,-20(fp)
 4029208:	18800626 	beq	r3,r2,4029224 <t_connect+0x64>
 402920c:	e0bff917 	ldw	r2,-28(fp)
 4029210:	10800017 	ldw	r2,0(r2)
 4029214:	e0bff915 	stw	r2,-28(fp)
 4029218:	e0bff917 	ldw	r2,-28(fp)
 402921c:	1004c03a 	cmpne	r2,r2,zero
 4029220:	103ff71e 	bne	r2,zero,4029200 <t_connect+0x40>
 4029224:	e0fff917 	ldw	r3,-28(fp)
 4029228:	e0bffb17 	ldw	r2,-20(fp)
 402922c:	18800426 	beq	r3,r2,4029240 <t_connect+0x80>
 4029230:	4025bb40 	call	4025bb4 <dtrap>
 4029234:	00bfffc4 	movi	r2,-1
 4029238:	e0bfff15 	stw	r2,-4(fp)
 402923c:	00008406 	br	4029450 <t_connect+0x290>
   DOMAIN_CHECK(so, addrlen);
 4029240:	e13ffb17 	ldw	r4,-20(fp)
 4029244:	e17ffe17 	ldw	r5,-8(fp)
 4029248:	4028bec0 	call	4028bec <DOMAIN_CHECK>

#ifdef NB_CONNECT
   /* need to test non blocking connect bits in case this is a 
      poll of a previous request */
   if (so->so_state & SS_NBIO)
 402924c:	e0bffb17 	ldw	r2,-20(fp)
 4029250:	1080088b 	ldhu	r2,34(r2)
 4029254:	10bfffcc 	andi	r2,r2,65535
 4029258:	1080400c 	andi	r2,r2,256
 402925c:	1005003a 	cmpeq	r2,r2,zero
 4029260:	10002a1e 	bne	r2,zero,402930c <t_connect+0x14c>
   {
      if (so->so_state & SS_ISCONNECTING) /* still trying */
 4029264:	e0bffb17 	ldw	r2,-20(fp)
 4029268:	1080088b 	ldhu	r2,34(r2)
 402926c:	10bfffcc 	andi	r2,r2,65535
 4029270:	1080010c 	andi	r2,r2,4
 4029274:	1005003a 	cmpeq	r2,r2,zero
 4029278:	1000061e 	bne	r2,zero,4029294 <t_connect+0xd4>
      {
         so->so_error = EINPROGRESS;
 402927c:	e0fffb17 	ldw	r3,-20(fp)
 4029280:	00801dc4 	movi	r2,119
 4029284:	18800615 	stw	r2,24(r3)
         return SOCKET_ERROR;
 4029288:	00bfffc4 	movi	r2,-1
 402928c:	e0bfff15 	stw	r2,-4(fp)
 4029290:	00006f06 	br	4029450 <t_connect+0x290>
      }
      if (so->so_state & SS_ISCONNECTED)  /* connected OK */
 4029294:	e0bffb17 	ldw	r2,-20(fp)
 4029298:	1080088b 	ldhu	r2,34(r2)
 402929c:	10bfffcc 	andi	r2,r2,65535
 40292a0:	1080008c 	andi	r2,r2,2
 40292a4:	1005003a 	cmpeq	r2,r2,zero
 40292a8:	1000041e 	bne	r2,zero,40292bc <t_connect+0xfc>
      {
         so->so_error = 0;
 40292ac:	e0bffb17 	ldw	r2,-20(fp)
 40292b0:	10000615 	stw	zero,24(r2)
         return 0;
 40292b4:	e03fff15 	stw	zero,-4(fp)
 40292b8:	00006506 	br	4029450 <t_connect+0x290>
      }
      if (so->so_state & SS_WASCONNECTING)
 40292bc:	e0bffb17 	ldw	r2,-20(fp)
 40292c0:	1080088b 	ldhu	r2,34(r2)
 40292c4:	10bfffcc 	andi	r2,r2,65535
 40292c8:	1088000c 	andi	r2,r2,8192
 40292cc:	1005003a 	cmpeq	r2,r2,zero
 40292d0:	10000e1e 	bne	r2,zero,402930c <t_connect+0x14c>
      {
         so->so_state &= ~SS_WASCONNECTING;
 40292d4:	e0bffb17 	ldw	r2,-20(fp)
 40292d8:	10c0088b 	ldhu	r3,34(r2)
 40292dc:	00b7ffc4 	movi	r2,-8193
 40292e0:	1884703a 	and	r2,r3,r2
 40292e4:	1007883a 	mov	r3,r2
 40292e8:	e0bffb17 	ldw	r2,-20(fp)
 40292ec:	10c0088d 	sth	r3,34(r2)
         if (so->so_error) /* connect error - maybe timeout */
 40292f0:	e0bffb17 	ldw	r2,-20(fp)
 40292f4:	10800617 	ldw	r2,24(r2)
 40292f8:	1005003a 	cmpeq	r2,r2,zero
 40292fc:	1000031e 	bne	r2,zero,402930c <t_connect+0x14c>
            return SOCKET_ERROR;
 4029300:	00bfffc4 	movi	r2,-1
 4029304:	e0bfff15 	stw	r2,-4(fp)
 4029308:	00005106 	br	4029450 <t_connect+0x290>
      }
   }
#endif   /*  NB_CONNECT */

   so->so_error = 0;
 402930c:	e0bffb17 	ldw	r2,-20(fp)
 4029310:	10000615 	stw	zero,24(r2)

   if ((nam = sockargs (addr, addrlen, MT_SONAME))
 4029314:	e13ffd17 	ldw	r4,-12(fp)
 4029318:	e17ffe17 	ldw	r5,-8(fp)
 402931c:	01800244 	movi	r6,9
 4029320:	402a2b40 	call	402a2b4 <sockargs>
 4029324:	e0bffa15 	stw	r2,-24(fp)
 4029328:	e0bffa17 	ldw	r2,-24(fp)
 402932c:	1004c03a 	cmpne	r2,r2,zero
 4029330:	1000061e 	bne	r2,zero,402934c <t_connect+0x18c>
       == NULL)
   {
      so->so_error = ENOMEM;
 4029334:	e0fffb17 	ldw	r3,-20(fp)
 4029338:	00800304 	movi	r2,12
 402933c:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4029340:	00bfffc4 	movi	r2,-1
 4029344:	e0bfff15 	stw	r2,-4(fp)
 4029348:	00004106 	br	4029450 <t_connect+0x290>
      INET_TRACE (INETM_SOCKET, ("INET: connect, port %d addr %lx\n",
       sin->sin_port, sin->sin_addr.s_addr));
   }
#endif   /* TRACE_DEBUG */

   LOCK_NET_RESOURCE(NET_RESID);
 402934c:	0009883a 	mov	r4,zero
 4029350:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   if ((so->so_error = soconnect (so, nam)) != 0)
 4029354:	e13ffb17 	ldw	r4,-20(fp)
 4029358:	e17ffa17 	ldw	r5,-24(fp)
 402935c:	402ac100 	call	402ac10 <soconnect>
 4029360:	1007883a 	mov	r3,r2
 4029364:	e0bffb17 	ldw	r2,-20(fp)
 4029368:	10c00615 	stw	r3,24(r2)
 402936c:	e0bffb17 	ldw	r2,-20(fp)
 4029370:	10800617 	ldw	r2,24(r2)
 4029374:	1004c03a 	cmpne	r2,r2,zero
 4029378:	10001e1e 	bne	r2,zero,40293f4 <t_connect+0x234>
      goto bad;

#ifdef NB_CONNECT
   /* need to test non blocking connect bits after soconnect() call */
   if ((so->so_state & SS_NBIO)&& (so->so_state & SS_ISCONNECTING))
 402937c:	e0bffb17 	ldw	r2,-20(fp)
 4029380:	1080088b 	ldhu	r2,34(r2)
 4029384:	10bfffcc 	andi	r2,r2,65535
 4029388:	1080400c 	andi	r2,r2,256
 402938c:	1005003a 	cmpeq	r2,r2,zero
 4029390:	10000e1e 	bne	r2,zero,40293cc <t_connect+0x20c>
 4029394:	e0bffb17 	ldw	r2,-20(fp)
 4029398:	1080088b 	ldhu	r2,34(r2)
 402939c:	10bfffcc 	andi	r2,r2,65535
 40293a0:	1080010c 	andi	r2,r2,4
 40293a4:	1005003a 	cmpeq	r2,r2,zero
 40293a8:	1000081e 	bne	r2,zero,40293cc <t_connect+0x20c>
   {
      so->so_error = EINPROGRESS;
 40293ac:	e0fffb17 	ldw	r3,-20(fp)
 40293b0:	00801dc4 	movi	r2,119
 40293b4:	18800615 	stw	r2,24(r3)
      goto bad;
 40293b8:	00000e06 	br	40293f4 <t_connect+0x234>
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
   {
      tcp_sleep ((char *)&so->so_timeo);
 40293bc:	e0bffb17 	ldw	r2,-20(fp)
 40293c0:	10800904 	addi	r2,r2,36
 40293c4:	1009883a 	mov	r4,r2
 40293c8:	40217880 	call	4021788 <tcp_sleep>
   }
#endif   /*  NB_CONNECT */
   INET_TRACE (INETM_SOCKET, ("INET: connect, so %x so_state %x so_error %d\n",
    so, so->so_state, so->so_error));

   while ((so->so_state & SS_ISCONNECTING) && so->so_error == 0) 
 40293cc:	e0bffb17 	ldw	r2,-20(fp)
 40293d0:	1080088b 	ldhu	r2,34(r2)
 40293d4:	10bfffcc 	andi	r2,r2,65535
 40293d8:	1080010c 	andi	r2,r2,4
 40293dc:	1005003a 	cmpeq	r2,r2,zero
 40293e0:	1000041e 	bne	r2,zero,40293f4 <t_connect+0x234>
 40293e4:	e0bffb17 	ldw	r2,-20(fp)
 40293e8:	10800617 	ldw	r2,24(r2)
 40293ec:	1005003a 	cmpeq	r2,r2,zero
 40293f0:	103ff21e 	bne	r2,zero,40293bc <t_connect+0x1fc>
   {
      tcp_sleep ((char *)&so->so_timeo);
   }
bad:
   if (so->so_error != EINPROGRESS)
 40293f4:	e0bffb17 	ldw	r2,-20(fp)
 40293f8:	10800617 	ldw	r2,24(r2)
 40293fc:	10801de0 	cmpeqi	r2,r2,119
 4029400:	1000071e 	bne	r2,zero,4029420 <t_connect+0x260>
      so->so_state &= ~(SS_ISCONNECTING|SS_WASCONNECTING);
 4029404:	e0bffb17 	ldw	r2,-20(fp)
 4029408:	10c0088b 	ldhu	r3,34(r2)
 402940c:	00b7fec4 	movi	r2,-8197
 4029410:	1884703a 	and	r2,r3,r2
 4029414:	1007883a 	mov	r3,r2
 4029418:	e0bffb17 	ldw	r2,-20(fp)
 402941c:	10c0088d 	sth	r3,34(r2)
   m_freem (nam);
 4029420:	e13ffa17 	ldw	r4,-24(fp)
 4029424:	4026c900 	call	4026c90 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 4029428:	0009883a 	mov	r4,zero
 402942c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (so->so_error)
 4029430:	e0bffb17 	ldw	r2,-20(fp)
 4029434:	10800617 	ldw	r2,24(r2)
 4029438:	1005003a 	cmpeq	r2,r2,zero
 402943c:	1000031e 	bne	r2,zero,402944c <t_connect+0x28c>
   {
/*      printf("t_connect(): so_error = %d\n", so->so_error);*/
      return SOCKET_ERROR;
 4029440:	00bfffc4 	movi	r2,-1
 4029444:	e0bfff15 	stw	r2,-4(fp)
 4029448:	00000106 	br	4029450 <t_connect+0x290>

   }
      return 0;
 402944c:	e03fff15 	stw	zero,-4(fp)
 4029450:	e0bfff17 	ldw	r2,-4(fp)
}
 4029454:	e037883a 	mov	sp,fp
 4029458:	dfc00117 	ldw	ra,4(sp)
 402945c:	df000017 	ldw	fp,0(sp)
 4029460:	dec00204 	addi	sp,sp,8
 4029464:	f800283a 	ret

04029468 <t_getpeername>:
 * RETURNS: 
 */

int
t_getpeername(long s, struct sockaddr * addr, int * addrlen)
{
 4029468:	defffb04 	addi	sp,sp,-20
 402946c:	dfc00415 	stw	ra,16(sp)
 4029470:	df000315 	stw	fp,12(sp)
 4029474:	df000304 	addi	fp,sp,12
 4029478:	e13ffd15 	stw	r4,-12(fp)
 402947c:	e17ffe15 	stw	r5,-8(fp)
 4029480:	e1bfff15 	stw	r6,-4(fp)
   return(t_getname(s, addr, addrlen, PRU_PEERADDR));
 4029484:	e13ffd17 	ldw	r4,-12(fp)
 4029488:	e17ffe17 	ldw	r5,-8(fp)
 402948c:	e1bfff17 	ldw	r6,-4(fp)
 4029490:	01c00404 	movi	r7,16
 4029494:	40294f00 	call	40294f0 <t_getname>
}
 4029498:	e037883a 	mov	sp,fp
 402949c:	dfc00117 	ldw	ra,4(sp)
 40294a0:	df000017 	ldw	fp,0(sp)
 40294a4:	dec00204 	addi	sp,sp,8
 40294a8:	f800283a 	ret

040294ac <t_getsockname>:
 * RETURNS: 
 */

int 
t_getsockname(long s, struct sockaddr * addr, int * addrlen)
{
 40294ac:	defffb04 	addi	sp,sp,-20
 40294b0:	dfc00415 	stw	ra,16(sp)
 40294b4:	df000315 	stw	fp,12(sp)
 40294b8:	df000304 	addi	fp,sp,12
 40294bc:	e13ffd15 	stw	r4,-12(fp)
 40294c0:	e17ffe15 	stw	r5,-8(fp)
 40294c4:	e1bfff15 	stw	r6,-4(fp)
   return(t_getname(s, addr, addrlen, PRU_SOCKADDR));
 40294c8:	e13ffd17 	ldw	r4,-12(fp)
 40294cc:	e17ffe17 	ldw	r5,-8(fp)
 40294d0:	e1bfff17 	ldw	r6,-4(fp)
 40294d4:	01c003c4 	movi	r7,15
 40294d8:	40294f00 	call	40294f0 <t_getname>
}
 40294dc:	e037883a 	mov	sp,fp
 40294e0:	dfc00117 	ldw	ra,4(sp)
 40294e4:	df000017 	ldw	fp,0(sp)
 40294e8:	dec00204 	addi	sp,sp,8
 40294ec:	f800283a 	ret

040294f0 <t_getname>:
 * RETURNS: 
 */

static int
t_getname(long s, struct sockaddr * addr, int * addrlen, int opcode)
{
 40294f0:	defff504 	addi	sp,sp,-44
 40294f4:	dfc00a15 	stw	ra,40(sp)
 40294f8:	df000915 	stw	fp,36(sp)
 40294fc:	df000904 	addi	fp,sp,36
 4029500:	e13ffb15 	stw	r4,-20(fp)
 4029504:	e17ffc15 	stw	r5,-16(fp)
 4029508:	e1bffd15 	stw	r6,-12(fp)
 402950c:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   struct mbuf *  m;
   int   err;

   so = LONG2SO(s);
 4029510:	e0bffb17 	ldw	r2,-20(fp)
 4029514:	10bff804 	addi	r2,r2,-32
 4029518:	1085883a 	add	r2,r2,r2
 402951c:	1085883a 	add	r2,r2,r2
 4029520:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
 4029524:	008101b4 	movhi	r2,1030
 4029528:	10a34504 	addi	r2,r2,-29420
 402952c:	e0bff715 	stw	r2,-36(fp)
 4029530:	00000606 	br	402954c <t_getname+0x5c>
 4029534:	e0fff717 	ldw	r3,-36(fp)
 4029538:	e0bffa17 	ldw	r2,-24(fp)
 402953c:	18800626 	beq	r3,r2,4029558 <t_getname+0x68>
 4029540:	e0bff717 	ldw	r2,-36(fp)
 4029544:	10800017 	ldw	r2,0(r2)
 4029548:	e0bff715 	stw	r2,-36(fp)
 402954c:	e0bff717 	ldw	r2,-36(fp)
 4029550:	1004c03a 	cmpne	r2,r2,zero
 4029554:	103ff71e 	bne	r2,zero,4029534 <t_getname+0x44>
 4029558:	e0fff717 	ldw	r3,-36(fp)
 402955c:	e0bffa17 	ldw	r2,-24(fp)
 4029560:	18800426 	beq	r3,r2,4029574 <t_getname+0x84>
 4029564:	4025bb40 	call	4025bb4 <dtrap>
 4029568:	00bfffc4 	movi	r2,-1
 402956c:	e0bfff15 	stw	r2,-4(fp)
 4029570:	00005806 	br	40296d4 <t_getname+0x1e4>

   so->so_error = 0;
 4029574:	e0bffa17 	ldw	r2,-24(fp)
 4029578:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:get[sock|peer]name so %x\n", so));
   if((opcode == PRU_PEERADDR) && (so->so_state & SS_ISCONNECTED) == 0)
 402957c:	e0bffe17 	ldw	r2,-8(fp)
 4029580:	10800418 	cmpnei	r2,r2,16
 4029584:	10000c1e 	bne	r2,zero,40295b8 <t_getname+0xc8>
 4029588:	e0bffa17 	ldw	r2,-24(fp)
 402958c:	1080088b 	ldhu	r2,34(r2)
 4029590:	10bfffcc 	andi	r2,r2,65535
 4029594:	1080008c 	andi	r2,r2,2
 4029598:	1004c03a 	cmpne	r2,r2,zero
 402959c:	1000061e 	bne	r2,zero,40295b8 <t_getname+0xc8>
   {
      so->so_error = ENOTCONN;
 40295a0:	e0fffa17 	ldw	r3,-24(fp)
 40295a4:	00802004 	movi	r2,128
 40295a8:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 40295ac:	00bfffc4 	movi	r2,-1
 40295b0:	e0bfff15 	stw	r2,-4(fp)
 40295b4:	00004706 	br	40296d4 <t_getname+0x1e4>
   }
   LOCK_NET_RESOURCE(NET_RESID);
 40295b8:	0009883a 	mov	r4,zero
 40295bc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 40295c0:	01000244 	movi	r4,9
 40295c4:	01400404 	movi	r5,16
 40295c8:	40269b40 	call	40269b4 <m_getnbuf>
 40295cc:	e0bff915 	stw	r2,-28(fp)
   if (m == NULL) 
 40295d0:	e0bff917 	ldw	r2,-28(fp)
 40295d4:	1004c03a 	cmpne	r2,r2,zero
 40295d8:	1000081e 	bne	r2,zero,40295fc <t_getname+0x10c>
   {
      so->so_error = ENOMEM;
 40295dc:	e0fffa17 	ldw	r3,-24(fp)
 40295e0:	00800304 	movi	r2,12
 40295e4:	18800615 	stw	r2,24(r3)
      UNLOCK_NET_RESOURCE(NET_RESID);
 40295e8:	0009883a 	mov	r4,zero
 40295ec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return SOCKET_ERROR;
 40295f0:	00bfffc4 	movi	r2,-1
 40295f4:	e0bfff15 	stw	r2,-4(fp)
 40295f8:	00003606 	br	40296d4 <t_getname+0x1e4>
   }
   so->so_req = opcode;
 40295fc:	e0fffa17 	ldw	r3,-24(fp)
 4029600:	e0bffe17 	ldw	r2,-8(fp)
 4029604:	18800715 	stw	r2,28(r3)
   if ((err = (*so->so_proto->pr_usrreq)(so, 0, m)) != 0)
 4029608:	e0bffa17 	ldw	r2,-24(fp)
 402960c:	10800217 	ldw	r2,8(r2)
 4029610:	10800317 	ldw	r2,12(r2)
 4029614:	e13ffa17 	ldw	r4,-24(fp)
 4029618:	000b883a 	mov	r5,zero
 402961c:	e1bff917 	ldw	r6,-28(fp)
 4029620:	103ee83a 	callr	r2
 4029624:	e0bff815 	stw	r2,-32(fp)
 4029628:	e0bff817 	ldw	r2,-32(fp)
 402962c:	1004c03a 	cmpne	r2,r2,zero
 4029630:	10001a1e 	bne	r2,zero,402969c <t_getname+0x1ac>
      goto bad;

#ifdef IP_V4
   if(so->so_domain == AF_INET)
 4029634:	e0bffa17 	ldw	r2,-24(fp)
 4029638:	10800517 	ldw	r2,20(r2)
 402963c:	10800098 	cmpnei	r2,r2,2
 4029640:	1000161e 	bne	r2,zero,402969c <t_getname+0x1ac>
   {
      if(*addrlen < sizeof(struct sockaddr_in))
 4029644:	e0bffd17 	ldw	r2,-12(fp)
 4029648:	10800017 	ldw	r2,0(r2)
 402964c:	10800428 	cmpgeui	r2,r2,16
 4029650:	1000081e 	bne	r2,zero,4029674 <t_getname+0x184>
      {
         dtrap();    /* programming error */
 4029654:	4025bb40 	call	4025bb4 <dtrap>
         m_freem(m);
 4029658:	e13ff917 	ldw	r4,-28(fp)
 402965c:	4026c900 	call	4026c90 <m_freem>
         UNLOCK_NET_RESOURCE(NET_RESID);
 4029660:	0009883a 	mov	r4,zero
 4029664:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return EINVAL;
 4029668:	00800584 	movi	r2,22
 402966c:	e0bfff15 	stw	r2,-4(fp)
 4029670:	00001806 	br	40296d4 <t_getname+0x1e4>
      }
      MEMCPY(addr, m->m_data, sizeof(struct sockaddr_in));
 4029674:	e0bff917 	ldw	r2,-28(fp)
 4029678:	10c00317 	ldw	r3,12(r2)
 402967c:	e0bffc17 	ldw	r2,-16(fp)
 4029680:	1009883a 	mov	r4,r2
 4029684:	180b883a 	mov	r5,r3
 4029688:	01800404 	movi	r6,16
 402968c:	4001de40 	call	4001de4 <memcpy>
      *addrlen = sizeof(struct sockaddr_in);
 4029690:	e0fffd17 	ldw	r3,-12(fp)
 4029694:	00800404 	movi	r2,16
 4029698:	18800015 	stw	r2,0(r3)
   }
#endif   /* IP_V6 */


bad:
   m_freem(m);
 402969c:	e13ff917 	ldw	r4,-28(fp)
 40296a0:	4026c900 	call	4026c90 <m_freem>
   UNLOCK_NET_RESOURCE(NET_RESID);
 40296a4:	0009883a 	mov	r4,zero
 40296a8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (err) 
 40296ac:	e0bff817 	ldw	r2,-32(fp)
 40296b0:	1005003a 	cmpeq	r2,r2,zero
 40296b4:	1000061e 	bne	r2,zero,40296d0 <t_getname+0x1e0>
   {
      so->so_error = err;
 40296b8:	e0fffa17 	ldw	r3,-24(fp)
 40296bc:	e0bff817 	ldw	r2,-32(fp)
 40296c0:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 40296c4:	00bfffc4 	movi	r2,-1
 40296c8:	e0bfff15 	stw	r2,-4(fp)
 40296cc:	00000106 	br	40296d4 <t_getname+0x1e4>
   }
   return 0;
 40296d0:	e03fff15 	stw	zero,-4(fp)
 40296d4:	e0bfff17 	ldw	r2,-4(fp)
}
 40296d8:	e037883a 	mov	sp,fp
 40296dc:	dfc00117 	ldw	ra,4(sp)
 40296e0:	df000017 	ldw	fp,0(sp)
 40296e4:	dec00204 	addi	sp,sp,8
 40296e8:	f800283a 	ret

040296ec <t_setsockopt>:
t_setsockopt(long s,
   int   level,
   int   name,
   void * arg,
   int arglen)
{
 40296ec:	defff604 	addi	sp,sp,-40
 40296f0:	dfc00915 	stw	ra,36(sp)
 40296f4:	df000815 	stw	fp,32(sp)
 40296f8:	df000804 	addi	fp,sp,32
 40296fc:	e13ffb15 	stw	r4,-20(fp)
 4029700:	e17ffc15 	stw	r5,-16(fp)
 4029704:	e1bffd15 	stw	r6,-12(fp)
 4029708:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 402970c:	e0bffb17 	ldw	r2,-20(fp)
 4029710:	10bff804 	addi	r2,r2,-32
 4029714:	1085883a 	add	r2,r2,r2
 4029718:	1085883a 	add	r2,r2,r2
 402971c:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
 4029720:	008101b4 	movhi	r2,1030
 4029724:	10a34504 	addi	r2,r2,-29420
 4029728:	e0bff815 	stw	r2,-32(fp)
 402972c:	00000606 	br	4029748 <t_setsockopt+0x5c>
 4029730:	e0fff817 	ldw	r3,-32(fp)
 4029734:	e0bffa17 	ldw	r2,-24(fp)
 4029738:	18800626 	beq	r3,r2,4029754 <t_setsockopt+0x68>
 402973c:	e0bff817 	ldw	r2,-32(fp)
 4029740:	10800017 	ldw	r2,0(r2)
 4029744:	e0bff815 	stw	r2,-32(fp)
 4029748:	e0bff817 	ldw	r2,-32(fp)
 402974c:	1004c03a 	cmpne	r2,r2,zero
 4029750:	103ff71e 	bne	r2,zero,4029730 <t_setsockopt+0x44>
 4029754:	e0fff817 	ldw	r3,-32(fp)
 4029758:	e0bffa17 	ldw	r2,-24(fp)
 402975c:	18800426 	beq	r3,r2,4029770 <t_setsockopt+0x84>
 4029760:	4025bb40 	call	4025bb4 <dtrap>
 4029764:	00bfffc4 	movi	r2,-1
 4029768:	e0bfff15 	stw	r2,-4(fp)
 402976c:	00005006 	br	40298b0 <t_setsockopt+0x1c4>
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 4029770:	0009883a 	mov	r4,zero
 4029774:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   so->so_error = 0;
 4029778:	e0bffa17 	ldw	r2,-24(fp)
 402977c:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET,
    ("INET: setsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 4029780:	e0bffc17 	ldw	r2,-16(fp)
 4029784:	10800060 	cmpeqi	r2,r2,1
 4029788:	1000101e 	bne	r2,zero,40297cc <t_setsockopt+0xe0>
   {
      if ((err = sosetopt (so, name, arg)) != 0) 
 402978c:	e13ffa17 	ldw	r4,-24(fp)
 4029790:	e17ffd17 	ldw	r5,-12(fp)
 4029794:	e1bffe17 	ldw	r6,-8(fp)
 4029798:	402bd180 	call	402bd18 <sosetopt>
 402979c:	e0bff915 	stw	r2,-28(fp)
 40297a0:	e0bff917 	ldw	r2,-28(fp)
 40297a4:	1005003a 	cmpeq	r2,r2,zero
 40297a8:	10003e1e 	bne	r2,zero,40298a4 <t_setsockopt+0x1b8>
      {
         so->so_error = err;
 40297ac:	e0fffa17 	ldw	r3,-24(fp)
 40297b0:	e0bff917 	ldw	r2,-28(fp)
 40297b4:	18800615 	stw	r2,24(r3)
         UNLOCK_NET_RESOURCE (NET_RESID);
 40297b8:	0009883a 	mov	r4,zero
 40297bc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 40297c0:	00bfffc4 	movi	r2,-1
 40297c4:	e0bfff15 	stw	r2,-4(fp)
 40297c8:	00003906 	br	40298b0 <t_setsockopt+0x1c4>
   {
   /* level 1 options are for the IP packet level.
    * the info is carried in the socket CB, then put 
    * into the PACKET.
    */
      if (!so->so_optsPack)
 40297cc:	e0bffa17 	ldw	r2,-24(fp)
 40297d0:	10801f17 	ldw	r2,124(r2)
 40297d4:	1004c03a 	cmpne	r2,r2,zero
 40297d8:	1000111e 	bne	r2,zero,4029820 <t_setsockopt+0x134>
      {
         so->so_optsPack = (struct ip_socopts *) SOCOPT_ALLOC (sizeof(struct ip_socopts *));
 40297dc:	01000104 	movi	r4,4
 40297e0:	40265f80 	call	40265f8 <npalloc>
 40297e4:	1007883a 	mov	r3,r2
 40297e8:	e0bffa17 	ldw	r2,-24(fp)
 40297ec:	10c01f15 	stw	r3,124(r2)
         if (!so->so_optsPack) 
 40297f0:	e0bffa17 	ldw	r2,-24(fp)
 40297f4:	10801f17 	ldw	r2,124(r2)
 40297f8:	1004c03a 	cmpne	r2,r2,zero
 40297fc:	1000081e 	bne	r2,zero,4029820 <t_setsockopt+0x134>
         {
            so->so_error = ENOMEM;
 4029800:	e0fffa17 	ldw	r3,-24(fp)
 4029804:	00800304 	movi	r2,12
 4029808:	18800615 	stw	r2,24(r3)
            UNLOCK_NET_RESOURCE (NET_RESID);
 402980c:	0009883a 	mov	r4,zero
 4029810:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            return SOCKET_ERROR;
 4029814:	00bfffc4 	movi	r2,-1
 4029818:	e0bfff15 	stw	r2,-4(fp)
 402981c:	00002406 	br	40298b0 <t_setsockopt+0x1c4>
         }
      }
      
      if (name == IP_TTL_OPT)
 4029820:	e0bffd17 	ldw	r2,-12(fp)
 4029824:	10800118 	cmpnei	r2,r2,4
 4029828:	1000061e 	bne	r2,zero,4029844 <t_setsockopt+0x158>
         so->so_optsPack->ip_ttl = (u_char)(*(int *)arg);
 402982c:	e0bffa17 	ldw	r2,-24(fp)
 4029830:	10c01f17 	ldw	r3,124(r2)
 4029834:	e0bffe17 	ldw	r2,-8(fp)
 4029838:	10800017 	ldw	r2,0(r2)
 402983c:	18800045 	stb	r2,1(r3)
 4029840:	00001806 	br	40298a4 <t_setsockopt+0x1b8>
      else
      if (name == IP_TOS)
 4029844:	e0bffd17 	ldw	r2,-12(fp)
 4029848:	108000d8 	cmpnei	r2,r2,3
 402984c:	1000061e 	bne	r2,zero,4029868 <t_setsockopt+0x17c>
         so->so_optsPack->ip_tos = (u_char)(*(int *)arg);
 4029850:	e0bffa17 	ldw	r2,-24(fp)
 4029854:	10c01f17 	ldw	r3,124(r2)
 4029858:	e0bffe17 	ldw	r2,-8(fp)
 402985c:	10800017 	ldw	r2,0(r2)
 4029860:	18800005 	stb	r2,0(r3)
 4029864:	00000f06 	br	40298a4 <t_setsockopt+0x1b8>
	   else
	   if (name == IP_SCOPEID)
 4029868:	e0bffd17 	ldw	r2,-12(fp)
 402986c:	10800398 	cmpnei	r2,r2,14
 4029870:	1000071e 	bne	r2,zero,4029890 <t_setsockopt+0x1a4>
            so->so_optsPack->ip_scopeid = (u_char)(*(u_int *)arg);
 4029874:	e0bffa17 	ldw	r2,-24(fp)
 4029878:	10c01f17 	ldw	r3,124(r2)
 402987c:	e0bffe17 	ldw	r2,-8(fp)
 4029880:	10800017 	ldw	r2,0(r2)
 4029884:	10803fcc 	andi	r2,r2,255
 4029888:	18800115 	stw	r2,4(r3)
 402988c:	00000506 	br	40298a4 <t_setsockopt+0x1b8>
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 4029890:	0009883a 	mov	r4,zero
 4029894:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 4029898:	00bfffc4 	movi	r2,-1
 402989c:	e0bfff15 	stw	r2,-4(fp)
 40298a0:	00000306 	br	40298b0 <t_setsockopt+0x1c4>
      }   
   }

   UNLOCK_NET_RESOURCE (NET_RESID);
 40298a4:	0009883a 	mov	r4,zero
 40298a8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return 0;
 40298ac:	e03fff15 	stw	zero,-4(fp)
 40298b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40298b4:	e037883a 	mov	sp,fp
 40298b8:	dfc00117 	ldw	ra,4(sp)
 40298bc:	df000017 	ldw	fp,0(sp)
 40298c0:	dec00204 	addi	sp,sp,8
 40298c4:	f800283a 	ret

040298c8 <t_getsockopt>:
   int   level,
   int   name,
   void *   arg,
   int   arglen)

{
 40298c8:	defff604 	addi	sp,sp,-40
 40298cc:	dfc00915 	stw	ra,36(sp)
 40298d0:	df000815 	stw	fp,32(sp)
 40298d4:	df000804 	addi	fp,sp,32
 40298d8:	e13ffb15 	stw	r4,-20(fp)
 40298dc:	e17ffc15 	stw	r5,-16(fp)
 40298e0:	e1bffd15 	stw	r6,-12(fp)
 40298e4:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 40298e8:	e0bffb17 	ldw	r2,-20(fp)
 40298ec:	10bff804 	addi	r2,r2,-32
 40298f0:	1085883a 	add	r2,r2,r2
 40298f4:	1085883a 	add	r2,r2,r2
 40298f8:	e0bffa15 	stw	r2,-24(fp)
   SOC_CHECK(so);
 40298fc:	008101b4 	movhi	r2,1030
 4029900:	10a34504 	addi	r2,r2,-29420
 4029904:	e0bff815 	stw	r2,-32(fp)
 4029908:	00000606 	br	4029924 <t_getsockopt+0x5c>
 402990c:	e0fff817 	ldw	r3,-32(fp)
 4029910:	e0bffa17 	ldw	r2,-24(fp)
 4029914:	18800626 	beq	r3,r2,4029930 <t_getsockopt+0x68>
 4029918:	e0bff817 	ldw	r2,-32(fp)
 402991c:	10800017 	ldw	r2,0(r2)
 4029920:	e0bff815 	stw	r2,-32(fp)
 4029924:	e0bff817 	ldw	r2,-32(fp)
 4029928:	1004c03a 	cmpne	r2,r2,zero
 402992c:	103ff71e 	bne	r2,zero,402990c <t_getsockopt+0x44>
 4029930:	e0fff817 	ldw	r3,-32(fp)
 4029934:	e0bffa17 	ldw	r2,-24(fp)
 4029938:	18800426 	beq	r3,r2,402994c <t_getsockopt+0x84>
 402993c:	4025bb40 	call	4025bb4 <dtrap>
 4029940:	00bfffc4 	movi	r2,-1
 4029944:	e0bfff15 	stw	r2,-4(fp)
 4029948:	00004206 	br	4029a54 <t_getsockopt+0x18c>
   USE_ARG(level);
   USE_ARG(arglen);

   LOCK_NET_RESOURCE (NET_RESID);
 402994c:	0009883a 	mov	r4,zero
 4029950:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   INET_TRACE (INETM_SOCKET,
    ("INET: getsockopt: name %x val %x valsize %d\n",
    name, val));

   /* is it a level IP_OPTIONS call? */
   if (level != IP_OPTIONS)
 4029954:	e0bffc17 	ldw	r2,-16(fp)
 4029958:	10800060 	cmpeqi	r2,r2,1
 402995c:	1000101e 	bne	r2,zero,40299a0 <t_getsockopt+0xd8>
   {
      if ((err = sogetopt (so, name, arg)) != 0) 
 4029960:	e13ffa17 	ldw	r4,-24(fp)
 4029964:	e17ffd17 	ldw	r5,-12(fp)
 4029968:	e1bffe17 	ldw	r6,-8(fp)
 402996c:	402c1d80 	call	402c1d8 <sogetopt>
 4029970:	e0bff915 	stw	r2,-28(fp)
 4029974:	e0bff917 	ldw	r2,-28(fp)
 4029978:	1005003a 	cmpeq	r2,r2,zero
 402997c:	1000301e 	bne	r2,zero,4029a40 <t_getsockopt+0x178>
      {
         so->so_error = err;
 4029980:	e0fffa17 	ldw	r3,-24(fp)
 4029984:	e0bff917 	ldw	r2,-28(fp)
 4029988:	18800615 	stw	r2,24(r3)
         UNLOCK_NET_RESOURCE (NET_RESID);
 402998c:	0009883a 	mov	r4,zero
 4029990:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 4029994:	00bfffc4 	movi	r2,-1
 4029998:	e0bfff15 	stw	r2,-4(fp)
 402999c:	00002d06 	br	4029a54 <t_getsockopt+0x18c>
   {
      /* level 1 options are for the IP packet level.
       * the info is carried in the socket CB, then put 
       * into the PACKET.
       */
      if (name == IP_TTL_OPT)
 40299a0:	e0bffd17 	ldw	r2,-12(fp)
 40299a4:	10800118 	cmpnei	r2,r2,4
 40299a8:	10000f1e 	bne	r2,zero,40299e8 <t_getsockopt+0x120>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TTL;
 40299ac:	e0bffa17 	ldw	r2,-24(fp)
 40299b0:	10801f17 	ldw	r2,124(r2)
 40299b4:	1004c03a 	cmpne	r2,r2,zero
 40299b8:	1000041e 	bne	r2,zero,40299cc <t_getsockopt+0x104>
 40299bc:	e0fffe17 	ldw	r3,-8(fp)
 40299c0:	00801004 	movi	r2,64
 40299c4:	18800015 	stw	r2,0(r3)
 40299c8:	00001d06 	br	4029a40 <t_getsockopt+0x178>
         else *(int *)arg = (int)so->so_optsPack->ip_ttl;
 40299cc:	e0fffe17 	ldw	r3,-8(fp)
 40299d0:	e0bffa17 	ldw	r2,-24(fp)
 40299d4:	10801f17 	ldw	r2,124(r2)
 40299d8:	10800043 	ldbu	r2,1(r2)
 40299dc:	10803fcc 	andi	r2,r2,255
 40299e0:	18800015 	stw	r2,0(r3)
 40299e4:	00001606 	br	4029a40 <t_getsockopt+0x178>
      }
      else if (name == IP_TOS)
 40299e8:	e0bffd17 	ldw	r2,-12(fp)
 40299ec:	108000d8 	cmpnei	r2,r2,3
 40299f0:	10000e1e 	bne	r2,zero,4029a2c <t_getsockopt+0x164>
      {
         if (!so->so_optsPack) *(int *)arg = IP_TOS_DEFVAL;
 40299f4:	e0bffa17 	ldw	r2,-24(fp)
 40299f8:	10801f17 	ldw	r2,124(r2)
 40299fc:	1004c03a 	cmpne	r2,r2,zero
 4029a00:	1000031e 	bne	r2,zero,4029a10 <t_getsockopt+0x148>
 4029a04:	e0bffe17 	ldw	r2,-8(fp)
 4029a08:	10000015 	stw	zero,0(r2)
 4029a0c:	00000c06 	br	4029a40 <t_getsockopt+0x178>
         else *(int *)arg = (int)so->so_optsPack->ip_tos;
 4029a10:	e0fffe17 	ldw	r3,-8(fp)
 4029a14:	e0bffa17 	ldw	r2,-24(fp)
 4029a18:	10801f17 	ldw	r2,124(r2)
 4029a1c:	10800003 	ldbu	r2,0(r2)
 4029a20:	10803fcc 	andi	r2,r2,255
 4029a24:	18800015 	stw	r2,0(r3)
 4029a28:	00000506 	br	4029a40 <t_getsockopt+0x178>
      }
      else
      {
         UNLOCK_NET_RESOURCE (NET_RESID);
 4029a2c:	0009883a 	mov	r4,zero
 4029a30:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return SOCKET_ERROR;
 4029a34:	00bfffc4 	movi	r2,-1
 4029a38:	e0bfff15 	stw	r2,-4(fp)
 4029a3c:	00000506 	br	4029a54 <t_getsockopt+0x18c>
      }
   }   
   so->so_error = 0;
 4029a40:	e0bffa17 	ldw	r2,-24(fp)
 4029a44:	10000615 	stw	zero,24(r2)

   UNLOCK_NET_RESOURCE (NET_RESID);
 4029a48:	0009883a 	mov	r4,zero
 4029a4c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return 0;
 4029a50:	e03fff15 	stw	zero,-4(fp)
 4029a54:	e0bfff17 	ldw	r2,-4(fp)
}
 4029a58:	e037883a 	mov	sp,fp
 4029a5c:	dfc00117 	ldw	ra,4(sp)
 4029a60:	df000017 	ldw	fp,0(sp)
 4029a64:	dec00204 	addi	sp,sp,8
 4029a68:	f800283a 	ret

04029a6c <t_recv>:
int
t_recv (long s, 
   char *   buf,
   int   len, 
   int   flag)
{
 4029a6c:	defff504 	addi	sp,sp,-44
 4029a70:	dfc00a15 	stw	ra,40(sp)
 4029a74:	df000915 	stw	fp,36(sp)
 4029a78:	df000904 	addi	fp,sp,36
 4029a7c:	e13ffb15 	stw	r4,-20(fp)
 4029a80:	e17ffc15 	stw	r5,-16(fp)
 4029a84:	e1bffd15 	stw	r6,-12(fp)
 4029a88:	e1fffe15 	stw	r7,-8(fp)
#ifdef SOCKDEBUG
   char logbuf[10];
#endif
   struct socket *   so;
   int   err;
   int   sendlen = len;
 4029a8c:	e0bffd17 	ldw	r2,-12(fp)
 4029a90:	e0bff815 	stw	r2,-32(fp)

   so = LONG2SO(s);
 4029a94:	e0bffb17 	ldw	r2,-20(fp)
 4029a98:	10bff804 	addi	r2,r2,-32
 4029a9c:	1085883a 	add	r2,r2,r2
 4029aa0:	1085883a 	add	r2,r2,r2
 4029aa4:	e0bffa15 	stw	r2,-24(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 4029aa8:	e0bffa17 	ldw	r2,-24(fp)
 4029aac:	1080088b 	ldhu	r2,34(r2)
 4029ab0:	10bfffcc 	andi	r2,r2,65535
 4029ab4:	1080038c 	andi	r2,r2,14
 4029ab8:	108000a0 	cmpeqi	r2,r2,2
 4029abc:	1000061e 	bne	r2,zero,4029ad8 <t_recv+0x6c>
   {
      so->so_error = EPIPE;
 4029ac0:	e0fffa17 	ldw	r3,-24(fp)
 4029ac4:	00800804 	movi	r2,32
 4029ac8:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 4029acc:	00bfffc4 	movi	r2,-1
 4029ad0:	e0bfff15 	stw	r2,-4(fp)
 4029ad4:	00001b06 	br	4029b44 <t_recv+0xd8>
   }
   so->so_error = 0;
 4029ad8:	e0bffa17 	ldw	r2,-24(fp)
 4029adc:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
 4029ae0:	0009883a 	mov	r4,zero
 4029ae4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   IN_PROFILER(PF_TCP, PF_ENTRY);        /* measure time in TCP */
   INET_TRACE (INETM_IO, ("INET:recv: so %x, len %d\n", so, len));
   err = soreceive(so, NULL, buf, &len, flag);
 4029ae8:	e1fffd04 	addi	r7,fp,-12
 4029aec:	e0bffe17 	ldw	r2,-8(fp)
 4029af0:	d8800015 	stw	r2,0(sp)
 4029af4:	e13ffa17 	ldw	r4,-24(fp)
 4029af8:	000b883a 	mov	r5,zero
 4029afc:	e1bffc17 	ldw	r6,-16(fp)
 4029b00:	402b38c0 	call	402b38c <soreceive>
 4029b04:	e0bff915 	stw	r2,-28(fp)
   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   UNLOCK_NET_RESOURCE(NET_RESID);
 4029b08:	0009883a 	mov	r4,zero
 4029b0c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if(err)
 4029b10:	e0bff917 	ldw	r2,-28(fp)
 4029b14:	1005003a 	cmpeq	r2,r2,zero
 4029b18:	1000061e 	bne	r2,zero,4029b34 <t_recv+0xc8>
   {
      so->so_error = err;
 4029b1c:	e0fffa17 	ldw	r3,-24(fp)
 4029b20:	e0bff917 	ldw	r2,-28(fp)
 4029b24:	18800615 	stw	r2,24(r3)
#ifdef SOCKDEBUG
      sprintf(logbuf, "t_recv: %d", so->so_error);
      glog_with_type(LOG_TYPE_DEBUG, logbuf, 1);
#endif
      return SOCKET_ERROR;
 4029b28:	00bfffc4 	movi	r2,-1
 4029b2c:	e0bfff15 	stw	r2,-4(fp)
 4029b30:	00000406 	br	4029b44 <t_recv+0xd8>
   }

   /* return bytes we sent - the amount we wanted to send minus
    * the amount left in the buffer.
    */
   return (sendlen - len);
 4029b34:	e0fffd17 	ldw	r3,-12(fp)
 4029b38:	e0bff817 	ldw	r2,-32(fp)
 4029b3c:	10c5c83a 	sub	r2,r2,r3
 4029b40:	e0bfff15 	stw	r2,-4(fp)
 4029b44:	e0bfff17 	ldw	r2,-4(fp)
}
 4029b48:	e037883a 	mov	sp,fp
 4029b4c:	dfc00117 	ldw	ra,4(sp)
 4029b50:	df000017 	ldw	fp,0(sp)
 4029b54:	dec00204 	addi	sp,sp,8
 4029b58:	f800283a 	ret

04029b5c <t_recvfrom>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * from,
   int * fromlen)
{
 4029b5c:	defff304 	addi	sp,sp,-52
 4029b60:	dfc00c15 	stw	ra,48(sp)
 4029b64:	df000b15 	stw	fp,44(sp)
 4029b68:	df000b04 	addi	fp,sp,44
 4029b6c:	e13ffb15 	stw	r4,-20(fp)
 4029b70:	e17ffc15 	stw	r5,-16(fp)
 4029b74:	e1bffd15 	stw	r6,-12(fp)
 4029b78:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   struct mbuf *     sender = NULL;
 4029b7c:	e03ffa15 	stw	zero,-24(fp)
   int   err;
   int   sendlen = len;
 4029b80:	e0bffd17 	ldw	r2,-12(fp)
 4029b84:	e0bff715 	stw	r2,-36(fp)

   so = LONG2SO(s);
 4029b88:	e0bffb17 	ldw	r2,-20(fp)
 4029b8c:	10bff804 	addi	r2,r2,-32
 4029b90:	1085883a 	add	r2,r2,r2
 4029b94:	1085883a 	add	r2,r2,r2
 4029b98:	e0bff915 	stw	r2,-28(fp)
   SOC_CHECK(so);
 4029b9c:	008101b4 	movhi	r2,1030
 4029ba0:	10a34504 	addi	r2,r2,-29420
 4029ba4:	e0bff615 	stw	r2,-40(fp)
 4029ba8:	00000606 	br	4029bc4 <t_recvfrom+0x68>
 4029bac:	e0fff617 	ldw	r3,-40(fp)
 4029bb0:	e0bff917 	ldw	r2,-28(fp)
 4029bb4:	18800626 	beq	r3,r2,4029bd0 <t_recvfrom+0x74>
 4029bb8:	e0bff617 	ldw	r2,-40(fp)
 4029bbc:	10800017 	ldw	r2,0(r2)
 4029bc0:	e0bff615 	stw	r2,-40(fp)
 4029bc4:	e0bff617 	ldw	r2,-40(fp)
 4029bc8:	1004c03a 	cmpne	r2,r2,zero
 4029bcc:	103ff71e 	bne	r2,zero,4029bac <t_recvfrom+0x50>
 4029bd0:	e0fff617 	ldw	r3,-40(fp)
 4029bd4:	e0bff917 	ldw	r2,-28(fp)
 4029bd8:	18800426 	beq	r3,r2,4029bec <t_recvfrom+0x90>
 4029bdc:	4025bb40 	call	4025bb4 <dtrap>
 4029be0:	00bfffc4 	movi	r2,-1
 4029be4:	e0bfff15 	stw	r2,-4(fp)
 4029be8:	00002a06 	br	4029c94 <t_recvfrom+0x138>
   so->so_error = 0;
 4029bec:	e0bff917 	ldw	r2,-28(fp)
 4029bf0:	10000615 	stw	zero,24(r2)

   LOCK_NET_RESOURCE(NET_RESID);
 4029bf4:	0009883a 	mov	r4,zero
 4029bf8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   err = soreceive(so, &sender, buf, &len, flags);
 4029bfc:	e17ffa04 	addi	r5,fp,-24
 4029c00:	e1fffd04 	addi	r7,fp,-12
 4029c04:	e0bffe17 	ldw	r2,-8(fp)
 4029c08:	d8800015 	stw	r2,0(sp)
 4029c0c:	e13ff917 	ldw	r4,-28(fp)
 4029c10:	e1bffc17 	ldw	r6,-16(fp)
 4029c14:	402b38c0 	call	402b38c <soreceive>
 4029c18:	e0bff815 	stw	r2,-32(fp)

   /* copy sender info from mbuf to sockaddr */
   if (sender)
 4029c1c:	e0bffa17 	ldw	r2,-24(fp)
 4029c20:	1005003a 	cmpeq	r2,r2,zero
 4029c24:	10000c1e 	bne	r2,zero,4029c58 <t_recvfrom+0xfc>
   {
      MEMCPY(from, (mtod(sender, struct sockaddr *)), *fromlen );
 4029c28:	e0bffa17 	ldw	r2,-24(fp)
 4029c2c:	10800317 	ldw	r2,12(r2)
 4029c30:	100b883a 	mov	r5,r2
 4029c34:	e0800317 	ldw	r2,12(fp)
 4029c38:	10800017 	ldw	r2,0(r2)
 4029c3c:	1007883a 	mov	r3,r2
 4029c40:	e0800217 	ldw	r2,8(fp)
 4029c44:	1009883a 	mov	r4,r2
 4029c48:	180d883a 	mov	r6,r3
 4029c4c:	4001de40 	call	4001de4 <memcpy>
      m_freem (sender);
 4029c50:	e13ffa17 	ldw	r4,-24(fp)
 4029c54:	4026c900 	call	4026c90 <m_freem>
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 4029c58:	0009883a 	mov	r4,zero
 4029c5c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if(err)
 4029c60:	e0bff817 	ldw	r2,-32(fp)
 4029c64:	1005003a 	cmpeq	r2,r2,zero
 4029c68:	1000061e 	bne	r2,zero,4029c84 <t_recvfrom+0x128>
   {
      so->so_error = err;
 4029c6c:	e0fff917 	ldw	r3,-28(fp)
 4029c70:	e0bff817 	ldw	r2,-32(fp)
 4029c74:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4029c78:	00bfffc4 	movi	r2,-1
 4029c7c:	e0bfff15 	stw	r2,-4(fp)
 4029c80:	00000406 	br	4029c94 <t_recvfrom+0x138>
   }

   /* OK return: amount of data actually sent */
   return (sendlen - len);
 4029c84:	e0fffd17 	ldw	r3,-12(fp)
 4029c88:	e0bff717 	ldw	r2,-36(fp)
 4029c8c:	10c5c83a 	sub	r2,r2,r3
 4029c90:	e0bfff15 	stw	r2,-4(fp)
 4029c94:	e0bfff17 	ldw	r2,-4(fp)
}
 4029c98:	e037883a 	mov	sp,fp
 4029c9c:	dfc00117 	ldw	ra,4(sp)
 4029ca0:	df000017 	ldw	fp,0(sp)
 4029ca4:	dec00204 	addi	sp,sp,8
 4029ca8:	f800283a 	ret

04029cac <t_sendto>:
   char *   buf,
   int   len, 
   int   flags,
   struct sockaddr * to,
   int   tolen)
{
 4029cac:	defff204 	addi	sp,sp,-56
 4029cb0:	dfc00d15 	stw	ra,52(sp)
 4029cb4:	df000c15 	stw	fp,48(sp)
 4029cb8:	df000c04 	addi	fp,sp,48
 4029cbc:	e13ffa15 	stw	r4,-24(fp)
 4029cc0:	e17ffb15 	stw	r5,-20(fp)
 4029cc4:	e1bffc15 	stw	r6,-16(fp)
 4029cc8:	e1fffd15 	stw	r7,-12(fp)
   struct socket *   so;
   int   sendlen;
   int   err;
   struct mbuf *     name;

   so = LONG2SO(s);
 4029ccc:	e0bffa17 	ldw	r2,-24(fp)
 4029cd0:	10bff804 	addi	r2,r2,-32
 4029cd4:	1085883a 	add	r2,r2,r2
 4029cd8:	1085883a 	add	r2,r2,r2
 4029cdc:	e0bff815 	stw	r2,-32(fp)
   SOC_CHECK(so);
 4029ce0:	008101b4 	movhi	r2,1030
 4029ce4:	10a34504 	addi	r2,r2,-29420
 4029ce8:	e0bff515 	stw	r2,-44(fp)
 4029cec:	00000606 	br	4029d08 <t_sendto+0x5c>
 4029cf0:	e0fff517 	ldw	r3,-44(fp)
 4029cf4:	e0bff817 	ldw	r2,-32(fp)
 4029cf8:	18800626 	beq	r3,r2,4029d14 <t_sendto+0x68>
 4029cfc:	e0bff517 	ldw	r2,-44(fp)
 4029d00:	10800017 	ldw	r2,0(r2)
 4029d04:	e0bff515 	stw	r2,-44(fp)
 4029d08:	e0bff517 	ldw	r2,-44(fp)
 4029d0c:	1004c03a 	cmpne	r2,r2,zero
 4029d10:	103ff71e 	bne	r2,zero,4029cf0 <t_sendto+0x44>
 4029d14:	e0fff517 	ldw	r3,-44(fp)
 4029d18:	e0bff817 	ldw	r2,-32(fp)
 4029d1c:	18800426 	beq	r3,r2,4029d30 <t_sendto+0x84>
 4029d20:	4025bb40 	call	4025bb4 <dtrap>
 4029d24:	00bfffc4 	movi	r2,-1
 4029d28:	e0bfff15 	stw	r2,-4(fp)
 4029d2c:	00006406 	br	4029ec0 <t_sendto+0x214>
   so->so_error = 0;
 4029d30:	e0bff817 	ldw	r2,-32(fp)
 4029d34:	10000615 	stw	zero,24(r2)

   switch (so->so_type)
 4029d38:	e0bff817 	ldw	r2,-32(fp)
 4029d3c:	10800983 	ldbu	r2,38(r2)
 4029d40:	10803fcc 	andi	r2,r2,255
 4029d44:	1080201c 	xori	r2,r2,128
 4029d48:	10bfe004 	addi	r2,r2,-128
 4029d4c:	e0bffe15 	stw	r2,-8(fp)
 4029d50:	e0fffe17 	ldw	r3,-8(fp)
 4029d54:	188000a0 	cmpeqi	r2,r3,2
 4029d58:	10000e1e 	bne	r2,zero,4029d94 <t_sendto+0xe8>
 4029d5c:	e0fffe17 	ldw	r3,-8(fp)
 4029d60:	188000e0 	cmpeqi	r2,r3,3
 4029d64:	10000e1e 	bne	r2,zero,4029da0 <t_sendto+0xf4>
 4029d68:	e0fffe17 	ldw	r3,-8(fp)
 4029d6c:	18800060 	cmpeqi	r2,r3,1
 4029d70:	1000011e 	bne	r2,zero,4029d78 <t_sendto+0xcc>
 4029d74:	00001006 	br	4029db8 <t_sendto+0x10c>
   {
   case SOCK_STREAM:
      /* this is a stream socket, so pass this request through
       * t_send() for its large-send support.
       */
      return t_send(s, buf, len, flags);
 4029d78:	e13ffa17 	ldw	r4,-24(fp)
 4029d7c:	e17ffb17 	ldw	r5,-20(fp)
 4029d80:	e1bffc17 	ldw	r6,-16(fp)
 4029d84:	e1fffd17 	ldw	r7,-12(fp)
 4029d88:	4029ed80 	call	4029ed8 <t_send>
 4029d8c:	e0bfff15 	stw	r2,-4(fp)
 4029d90:	00004b06 	br	4029ec0 <t_sendto+0x214>
      /*NOTREACHED*/
   case SOCK_DGRAM:
      /* datagram (UDP) socket -- prepare to check length */
      sendlen = udp_maxalloc();
 4029d94:	403f5680 	call	403f568 <udp_maxalloc>
 4029d98:	e0bff915 	stw	r2,-28(fp)
      break;
 4029d9c:	00000d06 	br	4029dd4 <t_sendto+0x128>
#ifdef IP_RAW
   case SOCK_RAW:
      /* raw socket -- prepare to check length */
      sendlen = ip_raw_maxalloc(so->so_options & SO_HDRINCL);
 4029da0:	e0bff817 	ldw	r2,-32(fp)
 4029da4:	10800417 	ldw	r2,16(r2)
 4029da8:	1108000c 	andi	r4,r2,8192
 4029dac:	403e04c0 	call	403e04c <ip_raw_maxalloc>
 4029db0:	e0bff915 	stw	r2,-28(fp)
      break;
 4029db4:	00000706 	br	4029dd4 <t_sendto+0x128>
#endif /* IP_RAW */
   default:
      /* socket has unknown type */
      dtrap();
 4029db8:	4025bb40 	call	4025bb4 <dtrap>
      so->so_error = EFAULT;
 4029dbc:	e0fff817 	ldw	r3,-32(fp)
 4029dc0:	00800384 	movi	r2,14
 4029dc4:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4029dc8:	00bfffc4 	movi	r2,-1
 4029dcc:	e0bfff15 	stw	r2,-4(fp)
 4029dd0:	00003b06 	br	4029ec0 <t_sendto+0x214>
   /* fall through for non-stream sockets: SOCK_DGRAM (UDP) and
    * SOCK_RAW (raw IP)
    */

   /* check length against underlying stack's maximum */
   if (len > sendlen)
 4029dd4:	e0fff917 	ldw	r3,-28(fp)
 4029dd8:	e0bffc17 	ldw	r2,-16(fp)
 4029ddc:	1880060e 	bge	r3,r2,4029df8 <t_sendto+0x14c>
   {
      so->so_error = EMSGSIZE;
 4029de0:	e0fff817 	ldw	r3,-32(fp)
 4029de4:	00801e84 	movi	r2,122
 4029de8:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4029dec:	00ffffc4 	movi	r3,-1
 4029df0:	e0ffff15 	stw	r3,-4(fp)
 4029df4:	00003206 	br	4029ec0 <t_sendto+0x214>
   /* if a sockaddr was passed, wrap it in an mbuf and pas it into the
    * bowels of the BSD code; else assume this is a bound UDP socket
    * and this call came from t_send() below.
    */

   if (to)  /* sockaddr was passed */
 4029df8:	e0800217 	ldw	r2,8(fp)
 4029dfc:	1005003a 	cmpeq	r2,r2,zero
 4029e00:	10000e1e 	bne	r2,zero,4029e3c <t_sendto+0x190>
   {
      name = sockargs(to, tolen, MT_SONAME);
 4029e04:	e1000217 	ldw	r4,8(fp)
 4029e08:	e1400317 	ldw	r5,12(fp)
 4029e0c:	01800244 	movi	r6,9
 4029e10:	402a2b40 	call	402a2b4 <sockargs>
 4029e14:	e0bff615 	stw	r2,-40(fp)
      if(name == NULL)
 4029e18:	e0bff617 	ldw	r2,-40(fp)
 4029e1c:	1004c03a 	cmpne	r2,r2,zero
 4029e20:	1000071e 	bne	r2,zero,4029e40 <t_sendto+0x194>
      {
         so->so_error = ENOMEM;
 4029e24:	e0fff817 	ldw	r3,-32(fp)
 4029e28:	00800304 	movi	r2,12
 4029e2c:	18800615 	stw	r2,24(r3)
         return SOCKET_ERROR;
 4029e30:	00bfffc4 	movi	r2,-1
 4029e34:	e0bfff15 	stw	r2,-4(fp)
 4029e38:	00002106 	br	4029ec0 <t_sendto+0x214>
      }
   }
   else     /* hope user called bind() first... */
      name = NULL;
 4029e3c:	e03ff615 	stw	zero,-40(fp)
   
   sendlen = len;
 4029e40:	e0bffc17 	ldw	r2,-16(fp)
 4029e44:	e0bff915 	stw	r2,-28(fp)

   LOCK_NET_RESOURCE(NET_RESID);
 4029e48:	0009883a 	mov	r4,zero
 4029e4c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   err = sosend (so, name, buf, &sendlen, flags);
 4029e50:	e1fff904 	addi	r7,fp,-28
 4029e54:	e0bffd17 	ldw	r2,-12(fp)
 4029e58:	d8800015 	stw	r2,0(sp)
 4029e5c:	e13ff817 	ldw	r4,-32(fp)
 4029e60:	e17ff617 	ldw	r5,-40(fp)
 4029e64:	e1bffb17 	ldw	r6,-20(fp)
 4029e68:	402ad840 	call	402ad84 <sosend>
 4029e6c:	e0bff715 	stw	r2,-36(fp)

   if (name)
 4029e70:	e0bff617 	ldw	r2,-40(fp)
 4029e74:	1005003a 	cmpeq	r2,r2,zero
 4029e78:	1000021e 	bne	r2,zero,4029e84 <t_sendto+0x1d8>
      m_freem(name);
 4029e7c:	e13ff617 	ldw	r4,-40(fp)
 4029e80:	4026c900 	call	4026c90 <m_freem>

   UNLOCK_NET_RESOURCE(NET_RESID);
 4029e84:	0009883a 	mov	r4,zero
 4029e88:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (err != 0)
 4029e8c:	e0bff717 	ldw	r2,-36(fp)
 4029e90:	1005003a 	cmpeq	r2,r2,zero
 4029e94:	1000061e 	bne	r2,zero,4029eb0 <t_sendto+0x204>
   {
      so->so_error = err;
 4029e98:	e0fff817 	ldw	r3,-32(fp)
 4029e9c:	e0bff717 	ldw	r2,-36(fp)
 4029ea0:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4029ea4:	00ffffc4 	movi	r3,-1
 4029ea8:	e0ffff15 	stw	r3,-4(fp)
 4029eac:	00000406 	br	4029ec0 <t_sendto+0x214>
   }

   return (len - sendlen);
 4029eb0:	e0fff917 	ldw	r3,-28(fp)
 4029eb4:	e0bffc17 	ldw	r2,-16(fp)
 4029eb8:	10c5c83a 	sub	r2,r2,r3
 4029ebc:	e0bfff15 	stw	r2,-4(fp)
 4029ec0:	e0bfff17 	ldw	r2,-4(fp)
}
 4029ec4:	e037883a 	mov	sp,fp
 4029ec8:	dfc00117 	ldw	ra,4(sp)
 4029ecc:	df000017 	ldw	fp,0(sp)
 4029ed0:	dec00204 	addi	sp,sp,8
 4029ed4:	f800283a 	ret

04029ed8 <t_send>:
int
t_send(long s, 
   char *   buf,
   int      len, 
   int      flags)
{
 4029ed8:	defff004 	addi	sp,sp,-64
 4029edc:	dfc00f15 	stw	ra,60(sp)
 4029ee0:	df000e15 	stw	fp,56(sp)
 4029ee4:	df000e04 	addi	fp,sp,56
 4029ee8:	e13ffb15 	stw	r4,-20(fp)
 4029eec:	e17ffc15 	stw	r5,-16(fp)
 4029ef0:	e1bffd15 	stw	r6,-12(fp)
 4029ef4:	e1fffe15 	stw	r7,-8(fp)
   struct socket *   so;
   int   e;       /* error holder */
   int   total_sent  =  0;
 4029ef8:	e03ff715 	stw	zero,-36(fp)
   int   maxpkt;
   int   sendlen;
   int   sent;

   so = LONG2SO(s);
 4029efc:	e0bffb17 	ldw	r2,-20(fp)
 4029f00:	10bff804 	addi	r2,r2,-32
 4029f04:	1085883a 	add	r2,r2,r2
 4029f08:	1085883a 	add	r2,r2,r2
 4029f0c:	e0bff915 	stw	r2,-28(fp)
#ifdef SOC_CHECK_ALWAYS
   SOC_CHECK(so);
#endif
   if ((so->so_state & SO_IO_OK) != SS_ISCONNECTED)
 4029f10:	e0bff917 	ldw	r2,-28(fp)
 4029f14:	1080088b 	ldhu	r2,34(r2)
 4029f18:	10bfffcc 	andi	r2,r2,65535
 4029f1c:	1080038c 	andi	r2,r2,14
 4029f20:	108000a0 	cmpeqi	r2,r2,2
 4029f24:	1000061e 	bne	r2,zero,4029f40 <t_send+0x68>
   {
      so->so_error = EPIPE;
 4029f28:	e0fff917 	ldw	r3,-28(fp)
 4029f2c:	00800804 	movi	r2,32
 4029f30:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 4029f34:	00bfffc4 	movi	r2,-1
 4029f38:	e0bfff15 	stw	r2,-4(fp)
 4029f3c:	00006a06 	br	402a0e8 <t_send+0x210>
   }
   so->so_error = 0;
 4029f40:	e0bff917 	ldw	r2,-28(fp)
 4029f44:	10000615 	stw	zero,24(r2)

   /* If this is not a stream socket, assume it is bound and pass to
    * t_sendto() with a null sockaddr
    */
   if (so->so_type != SOCK_STREAM)
 4029f48:	e0bff917 	ldw	r2,-28(fp)
 4029f4c:	10800983 	ldbu	r2,38(r2)
 4029f50:	10803fcc 	andi	r2,r2,255
 4029f54:	1080201c 	xori	r2,r2,128
 4029f58:	10bfe004 	addi	r2,r2,-128
 4029f5c:	10800060 	cmpeqi	r2,r2,1
 4029f60:	1000091e 	bne	r2,zero,4029f88 <t_send+0xb0>
      return(t_sendto(s, buf, len, flags, NULL, 0));
 4029f64:	d8000015 	stw	zero,0(sp)
 4029f68:	d8000115 	stw	zero,4(sp)
 4029f6c:	e13ffb17 	ldw	r4,-20(fp)
 4029f70:	e17ffc17 	ldw	r5,-16(fp)
 4029f74:	e1bffd17 	ldw	r6,-12(fp)
 4029f78:	e1fffe17 	ldw	r7,-8(fp)
 4029f7c:	4029cac0 	call	4029cac <t_sendto>
 4029f80:	e0bfff15 	stw	r2,-4(fp)
 4029f84:	00005806 	br	402a0e8 <t_send+0x210>

   maxpkt = TCP_MSS;
 4029f88:	00816d04 	movi	r2,1460
 4029f8c:	e0bff615 	stw	r2,-40(fp)
   if(so->so_pcb)
 4029f90:	e0bff917 	ldw	r2,-28(fp)
 4029f94:	10800117 	ldw	r2,4(r2)
 4029f98:	1005003a 	cmpeq	r2,r2,zero
 4029f9c:	10004d1e 	bne	r2,zero,402a0d4 <t_send+0x1fc>
   { 
      struct tcpcb * tp;
      tp = intotcpcb(so->so_pcb);   /* get tcp structure with mss */
 4029fa0:	e0bff917 	ldw	r2,-28(fp)
 4029fa4:	10800117 	ldw	r2,4(r2)
 4029fa8:	10800917 	ldw	r2,36(r2)
 4029fac:	e0bff415 	stw	r2,-48(fp)
      if(tp->t_maxseg)              /* Make sure it's set */
 4029fb0:	e0bff417 	ldw	r2,-48(fp)
 4029fb4:	10800a0b 	ldhu	r2,40(r2)
 4029fb8:	10bfffcc 	andi	r2,r2,65535
 4029fbc:	1005003a 	cmpeq	r2,r2,zero
 4029fc0:	1000441e 	bne	r2,zero,402a0d4 <t_send+0x1fc>
         maxpkt = tp->t_maxseg;
 4029fc4:	e0bff417 	ldw	r2,-48(fp)
 4029fc8:	10800a0b 	ldhu	r2,40(r2)
 4029fcc:	10bfffcc 	andi	r2,r2,65535
 4029fd0:	e0bff615 	stw	r2,-40(fp)
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
 4029fd4:	00003f06 	br	402a0d4 <t_send+0x1fc>
   {
      if (len > maxpkt)
 4029fd8:	e0fffd17 	ldw	r3,-12(fp)
 4029fdc:	e0bff617 	ldw	r2,-40(fp)
 4029fe0:	10c0030e 	bge	r2,r3,4029ff0 <t_send+0x118>
         sendlen = maxpkt;  /* take biggest block we can */
 4029fe4:	e0bff617 	ldw	r2,-40(fp)
 4029fe8:	e0bffa15 	stw	r2,-24(fp)
 4029fec:	00000206 	br	4029ff8 <t_send+0x120>
      else
         sendlen = len;
 4029ff0:	e0bffd17 	ldw	r2,-12(fp)
 4029ff4:	e0bffa15 	stw	r2,-24(fp)
      sent = sendlen;
 4029ff8:	e0bffa17 	ldw	r2,-24(fp)
 4029ffc:	e0bff515 	stw	r2,-44(fp)

      LOCK_NET_RESOURCE(NET_RESID);
 402a000:	0009883a 	mov	r4,zero
 402a004:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      e = sosend (so, NULL, buf, &sendlen, flags);
 402a008:	e1fffa04 	addi	r7,fp,-24
 402a00c:	e0bffe17 	ldw	r2,-8(fp)
 402a010:	d8800015 	stw	r2,0(sp)
 402a014:	e13ff917 	ldw	r4,-28(fp)
 402a018:	000b883a 	mov	r5,zero
 402a01c:	e1bffc17 	ldw	r6,-16(fp)
 402a020:	402ad840 	call	402ad84 <sosend>
 402a024:	e0bff815 	stw	r2,-32(fp)
      UNLOCK_NET_RESOURCE(NET_RESID);
 402a028:	0009883a 	mov	r4,zero
 402a02c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
 
      if (e != 0)  /* sock_sendit failed? */
 402a030:	e0bff817 	ldw	r2,-32(fp)
 402a034:	1005003a 	cmpeq	r2,r2,zero
 402a038:	1000121e 	bne	r2,zero,402a084 <t_send+0x1ac>
      {
         /* if we simply ran out of bufs, report back to caller. */
         if ((e == ENOBUFS) || (e == EWOULDBLOCK))
 402a03c:	e0bff817 	ldw	r2,-32(fp)
 402a040:	10801a60 	cmpeqi	r2,r2,105
 402a044:	1000031e 	bne	r2,zero,402a054 <t_send+0x17c>
 402a048:	e0bff817 	ldw	r2,-32(fp)
 402a04c:	108002d8 	cmpnei	r2,r2,11
 402a050:	1000061e 	bne	r2,zero,402a06c <t_send+0x194>
            /* if we actually sent something before running out
             * of buffers, report what we sent; 
             * else, report the error and let the application 
             * retry the call later
             */
            if (total_sent != 0)
 402a054:	e0bff717 	ldw	r2,-36(fp)
 402a058:	1005003a 	cmpeq	r2,r2,zero
 402a05c:	1000031e 	bne	r2,zero,402a06c <t_send+0x194>
            {
               so->so_error = 0;
 402a060:	e0bff917 	ldw	r2,-28(fp)
 402a064:	10000615 	stw	zero,24(r2)
               break;      /* break out of while(len) loop */
 402a068:	00001d06 	br	402a0e0 <t_send+0x208>
            }
         }
         so->so_error = e;
 402a06c:	e0fff917 	ldw	r3,-28(fp)
 402a070:	e0bff817 	ldw	r2,-32(fp)
 402a074:	18800615 	stw	r2,24(r3)
         return SOCKET_ERROR;
 402a078:	00bfffc4 	movi	r2,-1
 402a07c:	e0bfff15 	stw	r2,-4(fp)
 402a080:	00001906 	br	402a0e8 <t_send+0x210>
      }
      /* if we can't send anymore, return now */
      if (sendlen != 0)
 402a084:	e0bffa17 	ldw	r2,-24(fp)
 402a088:	1004c03a 	cmpne	r2,r2,zero
 402a08c:	1000141e 	bne	r2,zero,402a0e0 <t_send+0x208>
         break;         /* break out of while(len) loop */

      /* adjust numbers & pointers, and go do next send loop */
      sent -= sendlen;        /* subtract anything that didn't get sent */
 402a090:	e0fffa17 	ldw	r3,-24(fp)
 402a094:	e0bff517 	ldw	r2,-44(fp)
 402a098:	10c5c83a 	sub	r2,r2,r3
 402a09c:	e0bff515 	stw	r2,-44(fp)
      buf += sent;
 402a0a0:	e0bff517 	ldw	r2,-44(fp)
 402a0a4:	1007883a 	mov	r3,r2
 402a0a8:	e0bffc17 	ldw	r2,-16(fp)
 402a0ac:	10c5883a 	add	r2,r2,r3
 402a0b0:	e0bffc15 	stw	r2,-16(fp)
      len -= sent;
 402a0b4:	e0fffd17 	ldw	r3,-12(fp)
 402a0b8:	e0bff517 	ldw	r2,-44(fp)
 402a0bc:	1885c83a 	sub	r2,r3,r2
 402a0c0:	e0bffd15 	stw	r2,-12(fp)
      total_sent += sent;
 402a0c4:	e0fff717 	ldw	r3,-36(fp)
 402a0c8:	e0bff517 	ldw	r2,-44(fp)
 402a0cc:	1885883a 	add	r2,r3,r2
 402a0d0:	e0bff715 	stw	r2,-36(fp)
         maxpkt = tp->t_maxseg;
   }

   IN_PROFILER(PF_TCP, PF_ENTRY);       /* measure time in TCP */

   while (len)
 402a0d4:	e0bffd17 	ldw	r2,-12(fp)
 402a0d8:	1004c03a 	cmpne	r2,r2,zero
 402a0dc:	103fbe1e 	bne	r2,zero,4029fd8 <t_send+0x100>
      len -= sent;
      total_sent += sent;
   }

   IN_PROFILER(PF_TCP, PF_EXIT);        /* measure time in TCP */
   return total_sent;
 402a0e0:	e0bff717 	ldw	r2,-36(fp)
 402a0e4:	e0bfff15 	stw	r2,-4(fp)
 402a0e8:	e0bfff17 	ldw	r2,-4(fp)
}
 402a0ec:	e037883a 	mov	sp,fp
 402a0f0:	dfc00117 	ldw	ra,4(sp)
 402a0f4:	df000017 	ldw	fp,0(sp)
 402a0f8:	dec00204 	addi	sp,sp,8
 402a0fc:	f800283a 	ret

0402a100 <t_shutdown>:
 * RETURNS: 
 */

int
t_shutdown(long s, int   how)
{
 402a100:	defff804 	addi	sp,sp,-32
 402a104:	dfc00715 	stw	ra,28(sp)
 402a108:	df000615 	stw	fp,24(sp)
 402a10c:	df000604 	addi	fp,sp,24
 402a110:	e13ffd15 	stw	r4,-12(fp)
 402a114:	e17ffe15 	stw	r5,-8(fp)
   struct socket *so;
   int   err;

   so = LONG2SO(s);
 402a118:	e0bffd17 	ldw	r2,-12(fp)
 402a11c:	10bff804 	addi	r2,r2,-32
 402a120:	1085883a 	add	r2,r2,r2
 402a124:	1085883a 	add	r2,r2,r2
 402a128:	e0bffc15 	stw	r2,-16(fp)
   SOC_CHECK(so);
 402a12c:	008101b4 	movhi	r2,1030
 402a130:	10a34504 	addi	r2,r2,-29420
 402a134:	e0bffa15 	stw	r2,-24(fp)
 402a138:	00000606 	br	402a154 <t_shutdown+0x54>
 402a13c:	e0fffa17 	ldw	r3,-24(fp)
 402a140:	e0bffc17 	ldw	r2,-16(fp)
 402a144:	18800626 	beq	r3,r2,402a160 <t_shutdown+0x60>
 402a148:	e0bffa17 	ldw	r2,-24(fp)
 402a14c:	10800017 	ldw	r2,0(r2)
 402a150:	e0bffa15 	stw	r2,-24(fp)
 402a154:	e0bffa17 	ldw	r2,-24(fp)
 402a158:	1004c03a 	cmpne	r2,r2,zero
 402a15c:	103ff71e 	bne	r2,zero,402a13c <t_shutdown+0x3c>
 402a160:	e0fffa17 	ldw	r3,-24(fp)
 402a164:	e0bffc17 	ldw	r2,-16(fp)
 402a168:	18800426 	beq	r3,r2,402a17c <t_shutdown+0x7c>
 402a16c:	4025bb40 	call	4025bb4 <dtrap>
 402a170:	00bfffc4 	movi	r2,-1
 402a174:	e0bfff15 	stw	r2,-4(fp)
 402a178:	00001406 	br	402a1cc <t_shutdown+0xcc>
   so->so_error = 0;
 402a17c:	e0bffc17 	ldw	r2,-16(fp)
 402a180:	10000615 	stw	zero,24(r2)
   INET_TRACE (INETM_SOCKET, ("INET:shutdown so %x how %d\n", so, how));

   LOCK_NET_RESOURCE(NET_RESID);
 402a184:	0009883a 	mov	r4,zero
 402a188:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   err = soshutdown(so, how);
 402a18c:	e13ffc17 	ldw	r4,-16(fp)
 402a190:	e17ffe17 	ldw	r5,-8(fp)
 402a194:	402bb700 	call	402bb70 <soshutdown>
 402a198:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 402a19c:	0009883a 	mov	r4,zero
 402a1a0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (err != 0)
 402a1a4:	e0bffb17 	ldw	r2,-20(fp)
 402a1a8:	1005003a 	cmpeq	r2,r2,zero
 402a1ac:	1000061e 	bne	r2,zero,402a1c8 <t_shutdown+0xc8>
   {
      so->so_error = err;
 402a1b0:	e0fffc17 	ldw	r3,-16(fp)
 402a1b4:	e0bffb17 	ldw	r2,-20(fp)
 402a1b8:	18800615 	stw	r2,24(r3)
      return SOCKET_ERROR;
 402a1bc:	00bfffc4 	movi	r2,-1
 402a1c0:	e0bfff15 	stw	r2,-4(fp)
 402a1c4:	00000106 	br	402a1cc <t_shutdown+0xcc>
   }
   return 0;
 402a1c8:	e03fff15 	stw	zero,-4(fp)
 402a1cc:	e0bfff17 	ldw	r2,-4(fp)
}
 402a1d0:	e037883a 	mov	sp,fp
 402a1d4:	dfc00117 	ldw	ra,4(sp)
 402a1d8:	df000017 	ldw	fp,0(sp)
 402a1dc:	dec00204 	addi	sp,sp,8
 402a1e0:	f800283a 	ret

0402a1e4 <t_socketclose>:
 * RETURNS: 
 */

int
t_socketclose(long s)
{
 402a1e4:	defff904 	addi	sp,sp,-28
 402a1e8:	dfc00615 	stw	ra,24(sp)
 402a1ec:	df000515 	stw	fp,20(sp)
 402a1f0:	df000504 	addi	fp,sp,20
 402a1f4:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so;
   int   err;

   so = LONG2SO(s);
 402a1f8:	e0bffe17 	ldw	r2,-8(fp)
 402a1fc:	10bff804 	addi	r2,r2,-32
 402a200:	1085883a 	add	r2,r2,r2
 402a204:	1085883a 	add	r2,r2,r2
 402a208:	e0bffd15 	stw	r2,-12(fp)
   SOC_CHECK(so);
 402a20c:	008101b4 	movhi	r2,1030
 402a210:	10a34504 	addi	r2,r2,-29420
 402a214:	e0bffb15 	stw	r2,-20(fp)
 402a218:	00000606 	br	402a234 <t_socketclose+0x50>
 402a21c:	e0fffb17 	ldw	r3,-20(fp)
 402a220:	e0bffd17 	ldw	r2,-12(fp)
 402a224:	18800626 	beq	r3,r2,402a240 <t_socketclose+0x5c>
 402a228:	e0bffb17 	ldw	r2,-20(fp)
 402a22c:	10800017 	ldw	r2,0(r2)
 402a230:	e0bffb15 	stw	r2,-20(fp)
 402a234:	e0bffb17 	ldw	r2,-20(fp)
 402a238:	1004c03a 	cmpne	r2,r2,zero
 402a23c:	103ff71e 	bne	r2,zero,402a21c <t_socketclose+0x38>
 402a240:	e0fffb17 	ldw	r3,-20(fp)
 402a244:	e0bffd17 	ldw	r2,-12(fp)
 402a248:	18800426 	beq	r3,r2,402a25c <t_socketclose+0x78>
 402a24c:	4025bb40 	call	4025bb4 <dtrap>
 402a250:	00bfffc4 	movi	r2,-1
 402a254:	e0bfff15 	stw	r2,-4(fp)
 402a258:	00001006 	br	402a29c <t_socketclose+0xb8>
   so->so_error = 0;
 402a25c:	e0bffd17 	ldw	r2,-12(fp)
 402a260:	10000615 	stw	zero,24(r2)
   INET_TRACE ((INETM_CLOSE|INETM_SOCKET), ("INET:close, so %lx\n",so));

   LOCK_NET_RESOURCE(NET_RESID);
 402a264:	0009883a 	mov	r4,zero
 402a268:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   err = soclose(so);
 402a26c:	e13ffd17 	ldw	r4,-12(fp)
 402a270:	402a8300 	call	402a830 <soclose>
 402a274:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 402a278:	0009883a 	mov	r4,zero
 402a27c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (err != 0) 
 402a280:	e0bffc17 	ldw	r2,-16(fp)
 402a284:	1005003a 	cmpeq	r2,r2,zero
 402a288:	1000031e 	bne	r2,zero,402a298 <t_socketclose+0xb4>
   {
      /* do not do the following assignment since the socket structure
         addressed by so has been freed by this point, jharan 12-10-98 */
      /*      so->so_error = err;   */
      return SOCKET_ERROR;
 402a28c:	00bfffc4 	movi	r2,-1
 402a290:	e0bfff15 	stw	r2,-4(fp)
 402a294:	00000106 	br	402a29c <t_socketclose+0xb8>
   }
   return 0;
 402a298:	e03fff15 	stw	zero,-4(fp)
 402a29c:	e0bfff17 	ldw	r2,-4(fp)
}
 402a2a0:	e037883a 	mov	sp,fp
 402a2a4:	dfc00117 	ldw	ra,4(sp)
 402a2a8:	df000017 	ldw	fp,0(sp)
 402a2ac:	dec00204 	addi	sp,sp,8
 402a2b0:	f800283a 	ret

0402a2b4 <sockargs>:

static struct mbuf  * 
sockargs (void * arg, 
   int   arglen, 
   int   type)
{
 402a2b4:	defff904 	addi	sp,sp,-28
 402a2b8:	dfc00615 	stw	ra,24(sp)
 402a2bc:	df000515 	stw	fp,20(sp)
 402a2c0:	df000504 	addi	fp,sp,20
 402a2c4:	e13ffc15 	stw	r4,-16(fp)
 402a2c8:	e17ffd15 	stw	r5,-12(fp)
 402a2cc:	e1bffe15 	stw	r6,-8(fp)
   struct mbuf *  m;

   LOCK_NET_RESOURCE(NET_RESID);    /* protect mfreeq */
 402a2d0:	0009883a 	mov	r4,zero
 402a2d4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   m = m_getwithdata (type, arglen);
 402a2d8:	e13ffe17 	ldw	r4,-8(fp)
 402a2dc:	e17ffd17 	ldw	r5,-12(fp)
 402a2e0:	40269b40 	call	40269b4 <m_getnbuf>
 402a2e4:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 402a2e8:	0009883a 	mov	r4,zero
 402a2ec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (m == NULL)
 402a2f0:	e0bffb17 	ldw	r2,-20(fp)
 402a2f4:	1004c03a 	cmpne	r2,r2,zero
 402a2f8:	1000021e 	bne	r2,zero,402a304 <sockargs+0x50>
      return NULL;
 402a2fc:	e03fff15 	stw	zero,-4(fp)
 402a300:	00000c06 	br	402a334 <sockargs+0x80>
   m->m_len = arglen;
 402a304:	e0fffd17 	ldw	r3,-12(fp)
 402a308:	e0bffb17 	ldw	r2,-20(fp)
 402a30c:	10c00215 	stw	r3,8(r2)
   MEMCPY(mtod (m, char *), arg, arglen);
 402a310:	e0bffb17 	ldw	r2,-20(fp)
 402a314:	10c00317 	ldw	r3,12(r2)
 402a318:	e1bffd17 	ldw	r6,-12(fp)
 402a31c:	e0bffc17 	ldw	r2,-16(fp)
 402a320:	1809883a 	mov	r4,r3
 402a324:	100b883a 	mov	r5,r2
 402a328:	4001de40 	call	4001de4 <memcpy>
   return m;
 402a32c:	e0bffb17 	ldw	r2,-20(fp)
 402a330:	e0bfff15 	stw	r2,-4(fp)
 402a334:	e0bfff17 	ldw	r2,-4(fp)
}
 402a338:	e037883a 	mov	sp,fp
 402a33c:	dfc00117 	ldw	ra,4(sp)
 402a340:	df000017 	ldw	fp,0(sp)
 402a344:	dec00204 	addi	sp,sp,8
 402a348:	f800283a 	ret

0402a34c <t_errno>:
 *                            ENOTSOCK if socket not found
 */

int
t_errno(long s)
{
 402a34c:	defffa04 	addi	sp,sp,-24
 402a350:	dfc00515 	stw	ra,20(sp)
 402a354:	df000415 	stw	fp,16(sp)
 402a358:	df000404 	addi	fp,sp,16
 402a35c:	e13fff15 	stw	r4,-4(fp)
   struct socket *so = LONG2SO(s);
 402a360:	e0bfff17 	ldw	r2,-4(fp)
 402a364:	10bff804 	addi	r2,r2,-32
 402a368:	1085883a 	add	r2,r2,r2
 402a36c:	1085883a 	add	r2,r2,r2
 402a370:	e0bffe15 	stw	r2,-8(fp)
   struct socket *tmp;
   int errcode = ENOTSOCK;
 402a374:	00801b04 	movi	r2,108
 402a378:	e0bffc15 	stw	r2,-16(fp)

   LOCK_NET_RESOURCE(NET_RESID);    /* protect soq */
 402a37c:	0009883a 	mov	r4,zero
 402a380:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 402a384:	008101b4 	movhi	r2,1030
 402a388:	10a34504 	addi	r2,r2,-29420
 402a38c:	e0bffd15 	stw	r2,-12(fp)
 402a390:	00000a06 	br	402a3bc <t_errno+0x70>
   {
      if (tmp == so)  /* found socket, return error */
 402a394:	e0fffd17 	ldw	r3,-12(fp)
 402a398:	e0bffe17 	ldw	r2,-8(fp)
 402a39c:	1880041e 	bne	r3,r2,402a3b0 <t_errno+0x64>
      {
         errcode = so->so_error;
 402a3a0:	e0bffe17 	ldw	r2,-8(fp)
 402a3a4:	10800617 	ldw	r2,24(r2)
 402a3a8:	e0bffc15 	stw	r2,-16(fp)
         break;
 402a3ac:	00000606 	br	402a3c8 <t_errno+0x7c>

   /* search socket queue for passed socket. This routine should
    * not use SOC_CHECK since it can be ifdeffed out, and we must
    * be ready to return EPIPE if the socket does not exist.
    */
   for (tmp = (struct socket *)(&soq); tmp; tmp = tmp->next)
 402a3b0:	e0bffd17 	ldw	r2,-12(fp)
 402a3b4:	10800017 	ldw	r2,0(r2)
 402a3b8:	e0bffd15 	stw	r2,-12(fp)
 402a3bc:	e0bffd17 	ldw	r2,-12(fp)
 402a3c0:	1004c03a 	cmpne	r2,r2,zero
 402a3c4:	103ff31e 	bne	r2,zero,402a394 <t_errno+0x48>
         errcode = so->so_error;
         break;
      }
   }

   UNLOCK_NET_RESOURCE(NET_RESID);
 402a3c8:	0009883a 	mov	r4,zero
 402a3cc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   return errcode;
 402a3d0:	e0bffc17 	ldw	r2,-16(fp)
}
 402a3d4:	e037883a 	mov	sp,fp
 402a3d8:	dfc00117 	ldw	ra,4(sp)
 402a3dc:	df000017 	ldw	fp,0(sp)
 402a3e0:	dec00204 	addi	sp,sp,8
 402a3e4:	f800283a 	ret

0402a3e8 <socreate>:
 * RETURNS: 
 */

struct socket *   
socreate (int dom, int type, int proto)
{
 402a3e8:	defff604 	addi	sp,sp,-40
 402a3ec:	dfc00915 	stw	ra,36(sp)
 402a3f0:	df000815 	stw	fp,32(sp)
 402a3f4:	df000804 	addi	fp,sp,32
 402a3f8:	e13ffc15 	stw	r4,-16(fp)
 402a3fc:	e17ffd15 	stw	r5,-12(fp)
 402a400:	e1bffe15 	stw	r6,-8(fp)
   struct protosw *prp;
   struct socket *so;
   int   error;
   int rc;

   if (proto)
 402a404:	e0bffe17 	ldw	r2,-8(fp)
 402a408:	1005003a 	cmpeq	r2,r2,zero
 402a40c:	1000061e 	bne	r2,zero,402a428 <socreate+0x40>
      prp = pffindproto(dom, proto, type);
 402a410:	e13ffc17 	ldw	r4,-16(fp)
 402a414:	e17ffe17 	ldw	r5,-8(fp)
 402a418:	e1bffd17 	ldw	r6,-12(fp)
 402a41c:	40268e40 	call	40268e4 <pffindproto>
 402a420:	e0bffb15 	stw	r2,-20(fp)
 402a424:	00000406 	br	402a438 <socreate+0x50>
   else
      prp = pffindtype(dom, type);
 402a428:	e13ffc17 	ldw	r4,-16(fp)
 402a42c:	e17ffd17 	ldw	r5,-12(fp)
 402a430:	40268440 	call	4026844 <pffindtype>
 402a434:	e0bffb15 	stw	r2,-20(fp)
   if (prp == 0)
 402a438:	e0bffb17 	ldw	r2,-20(fp)
 402a43c:	1004c03a 	cmpne	r2,r2,zero
 402a440:	1000021e 	bne	r2,zero,402a44c <socreate+0x64>
      return NULL;
 402a444:	e03fff15 	stw	zero,-4(fp)
 402a448:	00005406 	br	402a59c <socreate+0x1b4>
   if (prp->pr_type != type)
 402a44c:	e0bffb17 	ldw	r2,-20(fp)
 402a450:	1080000b 	ldhu	r2,0(r2)
 402a454:	10ffffcc 	andi	r3,r2,65535
 402a458:	18e0001c 	xori	r3,r3,32768
 402a45c:	18e00004 	addi	r3,r3,-32768
 402a460:	e0bffd17 	ldw	r2,-12(fp)
 402a464:	18800226 	beq	r3,r2,402a470 <socreate+0x88>
      return NULL;
 402a468:	e03fff15 	stw	zero,-4(fp)
 402a46c:	00004b06 	br	402a59c <socreate+0x1b4>
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 402a470:	01002104 	movi	r4,132
 402a474:	40265f80 	call	40265f8 <npalloc>
 402a478:	e0bffa15 	stw	r2,-24(fp)
 402a47c:	e0bffa17 	ldw	r2,-24(fp)
 402a480:	1004c03a 	cmpne	r2,r2,zero
 402a484:	1000021e 	bne	r2,zero,402a490 <socreate+0xa8>
      return NULL;
 402a488:	e03fff15 	stw	zero,-4(fp)
 402a48c:	00004306 	br	402a59c <socreate+0x1b4>
   so->next = NULL;
 402a490:	e0bffa17 	ldw	r2,-24(fp)
 402a494:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);
 402a498:	e17ffa17 	ldw	r5,-24(fp)
 402a49c:	010101b4 	movhi	r4,1030
 402a4a0:	21234504 	addi	r4,r4,-29420
 402a4a4:	40255440 	call	4025544 <putq>

   so->so_options = socket_defaults;
 402a4a8:	d0a0390b 	ldhu	r2,-32540(gp)
 402a4ac:	10ffffcc 	andi	r3,r2,65535
 402a4b0:	e0bffa17 	ldw	r2,-24(fp)
 402a4b4:	10c00415 	stw	r3,16(r2)
   so->so_domain = dom;
 402a4b8:	e0fffa17 	ldw	r3,-24(fp)
 402a4bc:	e0bffc17 	ldw	r2,-16(fp)
 402a4c0:	18800515 	stw	r2,20(r3)
   so->so_state = 0;
 402a4c4:	e0bffa17 	ldw	r2,-24(fp)
 402a4c8:	1000088d 	sth	zero,34(r2)
   so->so_type = (char)type;
 402a4cc:	e0bffd17 	ldw	r2,-12(fp)
 402a4d0:	1007883a 	mov	r3,r2
 402a4d4:	e0bffa17 	ldw	r2,-24(fp)
 402a4d8:	10c00985 	stb	r3,38(r2)
   so->so_proto = prp;
 402a4dc:	e0fffa17 	ldw	r3,-24(fp)
 402a4e0:	e0bffb17 	ldw	r2,-20(fp)
 402a4e4:	18800215 	stw	r2,8(r3)

#ifdef IP_MULTICAST
   so->inp_moptions = NULL;
 402a4e8:	e0bffa17 	ldw	r2,-24(fp)
 402a4ec:	10000315 	stw	zero,12(r2)
#endif   /* IP_MULTICAST */

   so->so_req = PRU_ATTACH;
 402a4f0:	e0bffa17 	ldw	r2,-24(fp)
 402a4f4:	10000715 	stw	zero,28(r2)
   error = (*prp->pr_usrreq)(so,(struct mbuf *)0, LONG2MBUF((long)proto));
 402a4f8:	e0bffb17 	ldw	r2,-20(fp)
 402a4fc:	10800317 	ldw	r2,12(r2)
 402a500:	e1bffe17 	ldw	r6,-8(fp)
 402a504:	e13ffa17 	ldw	r4,-24(fp)
 402a508:	000b883a 	mov	r5,zero
 402a50c:	103ee83a 	callr	r2
 402a510:	e0bff915 	stw	r2,-28(fp)
   if (error) goto bad;
 402a514:	e0bff917 	ldw	r2,-28(fp)
 402a518:	1004c03a 	cmpne	r2,r2,zero
 402a51c:	10000f1e 	bne	r2,zero,402a55c <socreate+0x174>

   if (so_evtmap)
 402a520:	00810174 	movhi	r2,1029
 402a524:	10820a04 	addi	r2,r2,2088
 402a528:	10800003 	ldbu	r2,0(r2)
 402a52c:	10803fcc 	andi	r2,r2,255
 402a530:	1005003a 	cmpeq	r2,r2,zero
 402a534:	1000171e 	bne	r2,zero,402a594 <socreate+0x1ac>
   {                       
      rc = (*so_evtmap_create) (so);
 402a538:	00810174 	movhi	r2,1029
 402a53c:	10820804 	addi	r2,r2,2080
 402a540:	10800017 	ldw	r2,0(r2)
 402a544:	e13ffa17 	ldw	r4,-24(fp)
 402a548:	103ee83a 	callr	r2
 402a54c:	e0bff815 	stw	r2,-32(fp)
      if (rc != 0)
 402a550:	e0bff817 	ldw	r2,-32(fp)
 402a554:	1005003a 	cmpeq	r2,r2,zero
 402a558:	10000a1e 	bne	r2,zero,402a584 <socreate+0x19c>
      {
bad:   
         so->so_state |= SS_NOFDREF;
 402a55c:	e0bffa17 	ldw	r2,-24(fp)
 402a560:	1080088b 	ldhu	r2,34(r2)
 402a564:	10800054 	ori	r2,r2,1
 402a568:	1007883a 	mov	r3,r2
 402a56c:	e0bffa17 	ldw	r2,-24(fp)
 402a570:	10c0088d 	sth	r3,34(r2)
         sofree (so);
 402a574:	e13ffa17 	ldw	r4,-24(fp)
 402a578:	402a7000 	call	402a700 <sofree>
         return NULL;   
 402a57c:	e03fff15 	stw	zero,-4(fp)
 402a580:	00000606 	br	402a59c <socreate+0x1b4>
      /*
       * Altera Niche Stack Nios port modification:
       * Remove (void *) cast since -> owner is now TK_OBJECT
       * to fix build warning.
       */
      so->owner = TK_THIS;
 402a584:	4021a2c0 	call	4021a2c <TK_OSTaskQuery>
 402a588:	1007883a 	mov	r3,r2
 402a58c:	e0bffa17 	ldw	r2,-24(fp)
 402a590:	10c02005 	stb	r3,128(r2)
   }

   return so;
 402a594:	e0bffa17 	ldw	r2,-24(fp)
 402a598:	e0bfff15 	stw	r2,-4(fp)
 402a59c:	e0bfff17 	ldw	r2,-4(fp)
}
 402a5a0:	e037883a 	mov	sp,fp
 402a5a4:	dfc00117 	ldw	ra,4(sp)
 402a5a8:	df000017 	ldw	fp,0(sp)
 402a5ac:	dec00204 	addi	sp,sp,8
 402a5b0:	f800283a 	ret

0402a5b4 <sobind>:
 */

int
sobind(struct socket * so, 
   struct mbuf *  nam)
{
 402a5b4:	defffb04 	addi	sp,sp,-20
 402a5b8:	dfc00415 	stw	ra,16(sp)
 402a5bc:	df000315 	stw	fp,12(sp)
 402a5c0:	df000304 	addi	fp,sp,12
 402a5c4:	e13ffe15 	stw	r4,-8(fp)
 402a5c8:	e17fff15 	stw	r5,-4(fp)
   int   error;

   so->so_req = PRU_BIND;
 402a5cc:	e0fffe17 	ldw	r3,-8(fp)
 402a5d0:	00800084 	movi	r2,2
 402a5d4:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 402a5d8:	e0bffe17 	ldw	r2,-8(fp)
 402a5dc:	10800217 	ldw	r2,8(r2)
 402a5e0:	10800317 	ldw	r2,12(r2)
 402a5e4:	e13ffe17 	ldw	r4,-8(fp)
 402a5e8:	000b883a 	mov	r5,zero
 402a5ec:	e1bfff17 	ldw	r6,-4(fp)
 402a5f0:	103ee83a 	callr	r2
 402a5f4:	e0bffd15 	stw	r2,-12(fp)
   return (error);
 402a5f8:	e0bffd17 	ldw	r2,-12(fp)
}
 402a5fc:	e037883a 	mov	sp,fp
 402a600:	dfc00117 	ldw	ra,4(sp)
 402a604:	df000017 	ldw	fp,0(sp)
 402a608:	dec00204 	addi	sp,sp,8
 402a60c:	f800283a 	ret

0402a610 <solisten>:
 */

int
solisten(struct socket * so, 
   int   backlog)
{
 402a610:	defff904 	addi	sp,sp,-28
 402a614:	dfc00615 	stw	ra,24(sp)
 402a618:	df000515 	stw	fp,20(sp)
 402a61c:	df000504 	addi	fp,sp,20
 402a620:	e13ffc15 	stw	r4,-16(fp)
 402a624:	e17ffd15 	stw	r5,-12(fp)
   int   error;

   so->so_req = PRU_LISTEN;
 402a628:	e0fffc17 	ldw	r3,-16(fp)
 402a62c:	008000c4 	movi	r2,3
 402a630:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so,
 402a634:	e0bffc17 	ldw	r2,-16(fp)
 402a638:	10800217 	ldw	r2,8(r2)
 402a63c:	10800317 	ldw	r2,12(r2)
 402a640:	e13ffc17 	ldw	r4,-16(fp)
 402a644:	000b883a 	mov	r5,zero
 402a648:	000d883a 	mov	r6,zero
 402a64c:	103ee83a 	callr	r2
 402a650:	e0bffb15 	stw	r2,-20(fp)
    (struct mbuf *)0, (struct mbuf *)0);
   if (error) 
 402a654:	e0bffb17 	ldw	r2,-20(fp)
 402a658:	1005003a 	cmpeq	r2,r2,zero
 402a65c:	1000031e 	bne	r2,zero,402a66c <solisten+0x5c>
   {
      return (error);
 402a660:	e0bffb17 	ldw	r2,-20(fp)
 402a664:	e0bfff15 	stw	r2,-4(fp)
 402a668:	00001f06 	br	402a6e8 <solisten+0xd8>
   }
   if (so->so_q == 0) 
 402a66c:	e0bffc17 	ldw	r2,-16(fp)
 402a670:	10801d17 	ldw	r2,116(r2)
 402a674:	1004c03a 	cmpne	r2,r2,zero
 402a678:	10000b1e 	bne	r2,zero,402a6a8 <solisten+0x98>
   {
      so->so_q = so;
 402a67c:	e0fffc17 	ldw	r3,-16(fp)
 402a680:	e0bffc17 	ldw	r2,-16(fp)
 402a684:	18801d15 	stw	r2,116(r3)
      so->so_q0 = so;
 402a688:	e0fffc17 	ldw	r3,-16(fp)
 402a68c:	e0bffc17 	ldw	r2,-16(fp)
 402a690:	18801c15 	stw	r2,112(r3)
      so->so_options |= SO_ACCEPTCONN;
 402a694:	e0bffc17 	ldw	r2,-16(fp)
 402a698:	10800417 	ldw	r2,16(r2)
 402a69c:	10c00094 	ori	r3,r2,2
 402a6a0:	e0bffc17 	ldw	r2,-16(fp)
 402a6a4:	10c00415 	stw	r3,16(r2)
   }
   if (backlog < 0)
 402a6a8:	e0bffd17 	ldw	r2,-12(fp)
 402a6ac:	1004403a 	cmpge	r2,r2,zero
 402a6b0:	1000011e 	bne	r2,zero,402a6b8 <solisten+0xa8>
      backlog = 0;
 402a6b4:	e03ffd15 	stw	zero,-12(fp)
   so->so_qlimit = (char)MIN(backlog, SOMAXCONN);
 402a6b8:	e0fffd17 	ldw	r3,-12(fp)
 402a6bc:	e0fffe15 	stw	r3,-8(fp)
 402a6c0:	e0fffe17 	ldw	r3,-8(fp)
 402a6c4:	18800190 	cmplti	r2,r3,6
 402a6c8:	1000021e 	bne	r2,zero,402a6d4 <solisten+0xc4>
 402a6cc:	00800144 	movi	r2,5
 402a6d0:	e0bffe15 	stw	r2,-8(fp)
 402a6d4:	e0bffe17 	ldw	r2,-8(fp)
 402a6d8:	1007883a 	mov	r3,r2
 402a6dc:	e0bffc17 	ldw	r2,-16(fp)
 402a6e0:	10c01e85 	stb	r3,122(r2)
   return 0;
 402a6e4:	e03fff15 	stw	zero,-4(fp)
 402a6e8:	e0bfff17 	ldw	r2,-4(fp)
}
 402a6ec:	e037883a 	mov	sp,fp
 402a6f0:	dfc00117 	ldw	ra,4(sp)
 402a6f4:	df000017 	ldw	fp,0(sp)
 402a6f8:	dec00204 	addi	sp,sp,8
 402a6fc:	f800283a 	ret

0402a700 <sofree>:
 * RETURNS: 
 */

void
sofree(struct socket * so)
{
 402a700:	defffd04 	addi	sp,sp,-12
 402a704:	dfc00215 	stw	ra,8(sp)
 402a708:	df000115 	stw	fp,4(sp)
 402a70c:	df000104 	addi	fp,sp,4
 402a710:	e13fff15 	stw	r4,-4(fp)
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sofree, so %lx so_pcb %lx so_state %x so_head %lx\n",
    so, so->so_pcb, so->so_state, so->so_head));

   if (so->so_pcb || (so->so_state & SS_NOFDREF) == 0)
 402a714:	e0bfff17 	ldw	r2,-4(fp)
 402a718:	10800117 	ldw	r2,4(r2)
 402a71c:	1004c03a 	cmpne	r2,r2,zero
 402a720:	10003e1e 	bne	r2,zero,402a81c <sofree+0x11c>
 402a724:	e0bfff17 	ldw	r2,-4(fp)
 402a728:	1080088b 	ldhu	r2,34(r2)
 402a72c:	10bfffcc 	andi	r2,r2,65535
 402a730:	1080004c 	andi	r2,r2,1
 402a734:	1004c03a 	cmpne	r2,r2,zero
 402a738:	1000011e 	bne	r2,zero,402a740 <sofree+0x40>
      return;
 402a73c:	00003706 	br	402a81c <sofree+0x11c>
   if (so->so_head) 
 402a740:	e0bfff17 	ldw	r2,-4(fp)
 402a744:	10801b17 	ldw	r2,108(r2)
 402a748:	1005003a 	cmpeq	r2,r2,zero
 402a74c:	10000f1e 	bne	r2,zero,402a78c <sofree+0x8c>
   {
      if (!soqremque(so, 0) && !soqremque(so, 1))
 402a750:	e13fff17 	ldw	r4,-4(fp)
 402a754:	000b883a 	mov	r5,zero
 402a758:	402ccd40 	call	402ccd4 <soqremque>
 402a75c:	1004c03a 	cmpne	r2,r2,zero
 402a760:	1000081e 	bne	r2,zero,402a784 <sofree+0x84>
 402a764:	e13fff17 	ldw	r4,-4(fp)
 402a768:	01400044 	movi	r5,1
 402a76c:	402ccd40 	call	402ccd4 <soqremque>
 402a770:	1004c03a 	cmpne	r2,r2,zero
 402a774:	1000031e 	bne	r2,zero,402a784 <sofree+0x84>
         panic("sofree");
 402a778:	01010174 	movhi	r4,1029
 402a77c:	212e4a04 	addi	r4,r4,-18136
 402a780:	4020e100 	call	4020e10 <panic>
      so->so_head = 0;
 402a784:	e0bfff17 	ldw	r2,-4(fp)
 402a788:	10001b15 	stw	zero,108(r2)
   }
   sbrelease(&so->so_snd);
 402a78c:	e0bfff17 	ldw	r2,-4(fp)
 402a790:	11001204 	addi	r4,r2,72
 402a794:	402d0b00 	call	402d0b0 <sbrelease>
   sorflush(so);
 402a798:	e13fff17 	ldw	r4,-4(fp)
 402a79c:	402bc180 	call	402bc18 <sorflush>
      _socket_free_entry (so);
#endif   /* SAVE_SOCK_ENDPOINTS */

#ifdef IP_MULTICAST
   /* multicast opts? */
   if (so->inp_moptions)
 402a7a0:	e0bfff17 	ldw	r2,-4(fp)
 402a7a4:	10800317 	ldw	r2,12(r2)
 402a7a8:	1005003a 	cmpeq	r2,r2,zero
 402a7ac:	1000031e 	bne	r2,zero,402a7bc <sofree+0xbc>
	   ip_freemoptions(so->inp_moptions);
 402a7b0:	e0bfff17 	ldw	r2,-4(fp)
 402a7b4:	11000317 	ldw	r4,12(r2)
 402a7b8:	40408fc0 	call	40408fc <ip_freemoptions>
#endif   /* IP_MULTICAST */

   /* IP_TOS opts? */
   if (so->so_optsPack)
 402a7bc:	e0bfff17 	ldw	r2,-4(fp)
 402a7c0:	10801f17 	ldw	r2,124(r2)
 402a7c4:	1005003a 	cmpeq	r2,r2,zero
 402a7c8:	1000031e 	bne	r2,zero,402a7d8 <sofree+0xd8>
      SOCOPT_FREE(so->so_optsPack);
 402a7cc:	e0bfff17 	ldw	r2,-4(fp)
 402a7d0:	11001f17 	ldw	r4,124(r2)
 402a7d4:	40266ec0 	call	40266ec <npfree>
	   
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 402a7d8:	010101b4 	movhi	r4,1030
 402a7dc:	21234504 	addi	r4,r4,-29420
 402a7e0:	e17fff17 	ldw	r5,-4(fp)
 402a7e4:	40255f40 	call	40255f4 <qdel>
   
   if (so_evtmap)  
 402a7e8:	00810174 	movhi	r2,1029
 402a7ec:	10820a04 	addi	r2,r2,2088
 402a7f0:	10800003 	ldbu	r2,0(r2)
 402a7f4:	10803fcc 	andi	r2,r2,255
 402a7f8:	1005003a 	cmpeq	r2,r2,zero
 402a7fc:	1000051e 	bne	r2,zero,402a814 <sofree+0x114>
      (*so_evtmap_delete) (so);
 402a800:	00810174 	movhi	r2,1029
 402a804:	10820904 	addi	r2,r2,2084
 402a808:	10800017 	ldw	r2,0(r2)
 402a80c:	e13fff17 	ldw	r4,-4(fp)
 402a810:	103ee83a 	callr	r2
   
   SOC_FREE(so);
 402a814:	e13fff17 	ldw	r4,-4(fp)
 402a818:	40266ec0 	call	40266ec <npfree>
}
 402a81c:	e037883a 	mov	sp,fp
 402a820:	dfc00117 	ldw	ra,4(sp)
 402a824:	df000017 	ldw	fp,0(sp)
 402a828:	dec00204 	addi	sp,sp,8
 402a82c:	f800283a 	ret

0402a830 <soclose>:
 * RETURNS: 
 */

int
soclose(struct socket * so)
{
 402a830:	defff804 	addi	sp,sp,-32
 402a834:	dfc00715 	stw	ra,28(sp)
 402a838:	df000615 	stw	fp,24(sp)
 402a83c:	df000604 	addi	fp,sp,24
 402a840:	e13ffe15 	stw	r4,-8(fp)
   int   error =  0;
 402a844:	e03ffd15 	stw	zero,-12(fp)
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 402a848:	008101b4 	movhi	r2,1030
 402a84c:	10a34504 	addi	r2,r2,-29420
 402a850:	10800017 	ldw	r2,0(r2)
 402a854:	e0bffc15 	stw	r2,-16(fp)
 402a858:	00000606 	br	402a874 <soclose+0x44>
   {
      if (so == tmpso)
 402a85c:	e0fffe17 	ldw	r3,-8(fp)
 402a860:	e0bffc17 	ldw	r2,-16(fp)
 402a864:	18800626 	beq	r3,r2,402a880 <soclose+0x50>
   unsigned long endtime;

   /* Check whether the closing socket is in the socket queue.  If it is
    * not, return a EINVAL error code to the caller.
    */
   for ((tmpso=(struct socket *)soq.q_head);tmpso != NULL;tmpso=tmpso->next)
 402a868:	e0bffc17 	ldw	r2,-16(fp)
 402a86c:	10800017 	ldw	r2,0(r2)
 402a870:	e0bffc15 	stw	r2,-16(fp)
 402a874:	e0bffc17 	ldw	r2,-16(fp)
 402a878:	1004c03a 	cmpne	r2,r2,zero
 402a87c:	103ff71e 	bne	r2,zero,402a85c <soclose+0x2c>
   {
      if (so == tmpso)
         break;
   }
   if ( tmpso == NULL)
 402a880:	e0bffc17 	ldw	r2,-16(fp)
 402a884:	1004c03a 	cmpne	r2,r2,zero
 402a888:	1000031e 	bne	r2,zero,402a898 <soclose+0x68>
      return EINVAL;
 402a88c:	00800584 	movi	r2,22
 402a890:	e0bfff15 	stw	r2,-4(fp)
 402a894:	00009d06 	br	402ab0c <soclose+0x2dc>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
 402a898:	e0bffe17 	ldw	r2,-8(fp)
 402a89c:	10800417 	ldw	r2,16(r2)
 402a8a0:	1080008c 	andi	r2,r2,2
 402a8a4:	1005003a 	cmpeq	r2,r2,zero
 402a8a8:	1000101e 	bne	r2,zero,402a8ec <soclose+0xbc>
   {
      while (so->so_q0 != so)
 402a8ac:	00000306 	br	402a8bc <soclose+0x8c>
         (void) soabort(so->so_q0);
 402a8b0:	e0bffe17 	ldw	r2,-8(fp)
 402a8b4:	11001c17 	ldw	r4,112(r2)
 402a8b8:	402ab240 	call	402ab24 <soabort>
   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: soclose, so %lx  so_pcb %lx so_state %x so_q %lx\n",
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
 402a8bc:	e0bffe17 	ldw	r2,-8(fp)
 402a8c0:	10c01c17 	ldw	r3,112(r2)
 402a8c4:	e0bffe17 	ldw	r2,-8(fp)
 402a8c8:	18bff91e 	bne	r3,r2,402a8b0 <soclose+0x80>
         (void) soabort(so->so_q0);
      while (so->so_q != so)
 402a8cc:	00000306 	br	402a8dc <soclose+0xac>
         (void) soabort(so->so_q);
 402a8d0:	e0bffe17 	ldw	r2,-8(fp)
 402a8d4:	11001d17 	ldw	r4,116(r2)
 402a8d8:	402ab240 	call	402ab24 <soabort>
    so, so->so_pcb, so->so_state, so->so_q));
   if (so->so_options & SO_ACCEPTCONN)
   {
      while (so->so_q0 != so)
         (void) soabort(so->so_q0);
      while (so->so_q != so)
 402a8dc:	e0bffe17 	ldw	r2,-8(fp)
 402a8e0:	10c01d17 	ldw	r3,116(r2)
 402a8e4:	e0bffe17 	ldw	r2,-8(fp)
 402a8e8:	18bff91e 	bne	r3,r2,402a8d0 <soclose+0xa0>
         (void) soabort(so->so_q);
   }
   /* for datagram-oriented sockets, dispense with further tests */
   if (so->so_type != SOCK_STREAM)
 402a8ec:	e0bffe17 	ldw	r2,-8(fp)
 402a8f0:	10800983 	ldbu	r2,38(r2)
 402a8f4:	10803fcc 	andi	r2,r2,255
 402a8f8:	1080201c 	xori	r2,r2,128
 402a8fc:	10bfe004 	addi	r2,r2,-128
 402a900:	10800060 	cmpeqi	r2,r2,1
 402a904:	10000c1e 	bne	r2,zero,402a938 <soclose+0x108>
   { 
      so->so_req = PRU_DETACH;
 402a908:	e0fffe17 	ldw	r3,-8(fp)
 402a90c:	00800044 	movi	r2,1
 402a910:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so,
 402a914:	e0bffe17 	ldw	r2,-8(fp)
 402a918:	10800217 	ldw	r2,8(r2)
 402a91c:	10800317 	ldw	r2,12(r2)
 402a920:	e13ffe17 	ldw	r4,-8(fp)
 402a924:	000b883a 	mov	r5,zero
 402a928:	000d883a 	mov	r6,zero
 402a92c:	103ee83a 	callr	r2
 402a930:	e0bffd15 	stw	r2,-12(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      goto discard;
 402a934:	00006306 	br	402aac4 <soclose+0x294>
   }

   if (so->so_pcb == 0)
 402a938:	e0bffe17 	ldw	r2,-8(fp)
 402a93c:	10800117 	ldw	r2,4(r2)
 402a940:	1005003a 	cmpeq	r2,r2,zero
 402a944:	10005f1e 	bne	r2,zero,402aac4 <soclose+0x294>
      goto discard;
   if (so->so_state & SS_ISCONNECTED) 
 402a948:	e0bffe17 	ldw	r2,-8(fp)
 402a94c:	1080088b 	ldhu	r2,34(r2)
 402a950:	10bfffcc 	andi	r2,r2,65535
 402a954:	1080008c 	andi	r2,r2,2
 402a958:	1005003a 	cmpeq	r2,r2,zero
 402a95c:	1000451e 	bne	r2,zero,402aa74 <soclose+0x244>
   {
      if ((so->so_state & SS_ISDISCONNECTING) == 0) 
 402a960:	e0bffe17 	ldw	r2,-8(fp)
 402a964:	1080088b 	ldhu	r2,34(r2)
 402a968:	10bfffcc 	andi	r2,r2,65535
 402a96c:	1080020c 	andi	r2,r2,8
 402a970:	1004c03a 	cmpne	r2,r2,zero
 402a974:	1000061e 	bne	r2,zero,402a990 <soclose+0x160>
      {
         error = sodisconnect(so);
 402a978:	e13ffe17 	ldw	r4,-8(fp)
 402a97c:	402ace40 	call	402ace4 <sodisconnect>
 402a980:	e0bffd15 	stw	r2,-12(fp)
         if (error)
 402a984:	e0bffd17 	ldw	r2,-12(fp)
 402a988:	1004c03a 	cmpne	r2,r2,zero
 402a98c:	1000391e 	bne	r2,zero,402aa74 <soclose+0x244>
            goto drop;
      }
      if (so->so_options & SO_LINGER) 
 402a990:	e0bffe17 	ldw	r2,-8(fp)
 402a994:	10800417 	ldw	r2,16(r2)
 402a998:	1080200c 	andi	r2,r2,128
 402a99c:	1005003a 	cmpeq	r2,r2,zero
 402a9a0:	1000281e 	bne	r2,zero,402aa44 <soclose+0x214>
      {
         if ((so->so_state & SS_ISDISCONNECTING) &&
 402a9a4:	e0bffe17 	ldw	r2,-8(fp)
 402a9a8:	1080088b 	ldhu	r2,34(r2)
 402a9ac:	10bfffcc 	andi	r2,r2,65535
 402a9b0:	1080020c 	andi	r2,r2,8
 402a9b4:	1005003a 	cmpeq	r2,r2,zero
 402a9b8:	1000061e 	bne	r2,zero,402a9d4 <soclose+0x1a4>
 402a9bc:	e0bffe17 	ldw	r2,-8(fp)
 402a9c0:	1080088b 	ldhu	r2,34(r2)
 402a9c4:	10bfffcc 	andi	r2,r2,65535
 402a9c8:	1080400c 	andi	r2,r2,256
 402a9cc:	1004c03a 	cmpne	r2,r2,zero
 402a9d0:	1000281e 	bne	r2,zero,402aa74 <soclose+0x244>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
 402a9d4:	e0bffe17 	ldw	r2,-8(fp)
 402a9d8:	1080080b 	ldhu	r2,32(r2)
 402a9dc:	10bfffcc 	andi	r2,r2,65535
 402a9e0:	10a0001c 	xori	r2,r2,32768
 402a9e4:	10a00004 	addi	r2,r2,-32768
 402a9e8:	10c01924 	muli	r3,r2,100
 402a9ec:	00810174 	movhi	r2,1029
 402a9f0:	1081e404 	addi	r2,r2,1936
 402a9f4:	10800017 	ldw	r2,0(r2)
 402a9f8:	1885883a 	add	r2,r3,r2
 402a9fc:	e0bffb15 	stw	r2,-20(fp)
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 402aa00:	00000406 	br	402aa14 <soclose+0x1e4>
         {
            tcp_sleep((char *)&so->so_timeo);
 402aa04:	e0bffe17 	ldw	r2,-8(fp)
 402aa08:	10800904 	addi	r2,r2,36
 402aa0c:	1009883a 	mov	r4,r2
 402aa10:	40217880 	call	4021788 <tcp_sleep>
             (so->so_state & SS_NBIO))
         {
            goto drop;
         }
         endtime = cticks + (unsigned long)so->so_linger * TPS;         
         while ((so->so_state & SS_ISCONNECTED) && (cticks < endtime))
 402aa14:	e0bffe17 	ldw	r2,-8(fp)
 402aa18:	1080088b 	ldhu	r2,34(r2)
 402aa1c:	10bfffcc 	andi	r2,r2,65535
 402aa20:	1080008c 	andi	r2,r2,2
 402aa24:	1005003a 	cmpeq	r2,r2,zero
 402aa28:	1000121e 	bne	r2,zero,402aa74 <soclose+0x244>
 402aa2c:	00810174 	movhi	r2,1029
 402aa30:	1081e404 	addi	r2,r2,1936
 402aa34:	10c00017 	ldw	r3,0(r2)
 402aa38:	e0bffb17 	ldw	r2,-20(fp)
 402aa3c:	18bff136 	bltu	r3,r2,402aa04 <soclose+0x1d4>
 402aa40:	00000c06 	br	402aa74 <soclose+0x244>
      {
         /* If socket still has send data just return now, leaving the 
          * socket intact so the data can be sent. Socket should be cleaned
          * up later by timers.
          */
         if(so->so_snd.sb_cc)
 402aa44:	e0bffe17 	ldw	r2,-8(fp)
 402aa48:	10801217 	ldw	r2,72(r2)
 402aa4c:	1005003a 	cmpeq	r2,r2,zero
 402aa50:	1000081e 	bne	r2,zero,402aa74 <soclose+0x244>
         {
            so->so_state |= SS_NOFDREF;   /* mark as OK to close */
 402aa54:	e0bffe17 	ldw	r2,-8(fp)
 402aa58:	1080088b 	ldhu	r2,34(r2)
 402aa5c:	10800054 	ori	r2,r2,1
 402aa60:	1007883a 	mov	r3,r2
 402aa64:	e0bffe17 	ldw	r2,-8(fp)
 402aa68:	10c0088d 	sth	r3,34(r2)
            return 0;
 402aa6c:	e03fff15 	stw	zero,-4(fp)
 402aa70:	00002606 	br	402ab0c <soclose+0x2dc>
         }
      }
   }
drop:
   if (so->so_pcb) 
 402aa74:	e0bffe17 	ldw	r2,-8(fp)
 402aa78:	10800117 	ldw	r2,4(r2)
 402aa7c:	1005003a 	cmpeq	r2,r2,zero
 402aa80:	1000101e 	bne	r2,zero,402aac4 <soclose+0x294>
   {
      int   error2;
      so->so_req = PRU_DETACH;
 402aa84:	e0fffe17 	ldw	r3,-8(fp)
 402aa88:	00800044 	movi	r2,1
 402aa8c:	18800715 	stw	r2,28(r3)
      error2 = (*so->so_proto->pr_usrreq)(so,
 402aa90:	e0bffe17 	ldw	r2,-8(fp)
 402aa94:	10800217 	ldw	r2,8(r2)
 402aa98:	10800317 	ldw	r2,12(r2)
 402aa9c:	e13ffe17 	ldw	r4,-8(fp)
 402aaa0:	000b883a 	mov	r5,zero
 402aaa4:	000d883a 	mov	r6,zero
 402aaa8:	103ee83a 	callr	r2
 402aaac:	e0bffa15 	stw	r2,-24(fp)
       (struct mbuf *)0, (struct mbuf *)0);
      if (error == 0)
 402aab0:	e0bffd17 	ldw	r2,-12(fp)
 402aab4:	1004c03a 	cmpne	r2,r2,zero
 402aab8:	1000021e 	bne	r2,zero,402aac4 <soclose+0x294>
         error = error2;
 402aabc:	e0bffa17 	ldw	r2,-24(fp)
 402aac0:	e0bffd15 	stw	r2,-12(fp)
   }
discard:
   if (so->so_state & SS_NOFDREF)
 402aac4:	e0bffe17 	ldw	r2,-8(fp)
 402aac8:	1080088b 	ldhu	r2,34(r2)
 402aacc:	10bfffcc 	andi	r2,r2,65535
 402aad0:	1080004c 	andi	r2,r2,1
 402aad4:	10803fcc 	andi	r2,r2,255
 402aad8:	1005003a 	cmpeq	r2,r2,zero
 402aadc:	1000011e 	bne	r2,zero,402aae4 <soclose+0x2b4>
   {
      /* panic("soclose");  - non-fatal - degrade to dtrap() for now */
      dtrap();
 402aae0:	4025bb40 	call	4025bb4 <dtrap>
   }
   so->so_state |= SS_NOFDREF;
 402aae4:	e0bffe17 	ldw	r2,-8(fp)
 402aae8:	1080088b 	ldhu	r2,34(r2)
 402aaec:	10800054 	ori	r2,r2,1
 402aaf0:	1007883a 	mov	r3,r2
 402aaf4:	e0bffe17 	ldw	r2,-8(fp)
 402aaf8:	10c0088d 	sth	r3,34(r2)
   sofree(so);
 402aafc:	e13ffe17 	ldw	r4,-8(fp)
 402ab00:	402a7000 	call	402a700 <sofree>
   return (error);
 402ab04:	e0bffd17 	ldw	r2,-12(fp)
 402ab08:	e0bfff15 	stw	r2,-4(fp)
 402ab0c:	e0bfff17 	ldw	r2,-4(fp)
}
 402ab10:	e037883a 	mov	sp,fp
 402ab14:	dfc00117 	ldw	ra,4(sp)
 402ab18:	df000017 	ldw	fp,0(sp)
 402ab1c:	dec00204 	addi	sp,sp,8
 402ab20:	f800283a 	ret

0402ab24 <soabort>:
 * RETURNS: 
 */

int
soabort(struct socket * so)
{
 402ab24:	defffd04 	addi	sp,sp,-12
 402ab28:	dfc00215 	stw	ra,8(sp)
 402ab2c:	df000115 	stw	fp,4(sp)
 402ab30:	df000104 	addi	fp,sp,4
 402ab34:	e13fff15 	stw	r4,-4(fp)
   so->so_req = PRU_ABORT;
 402ab38:	e0ffff17 	ldw	r3,-4(fp)
 402ab3c:	00800284 	movi	r2,10
 402ab40:	18800715 	stw	r2,28(r3)
   return(*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 402ab44:	e0bfff17 	ldw	r2,-4(fp)
 402ab48:	10800217 	ldw	r2,8(r2)
 402ab4c:	10800317 	ldw	r2,12(r2)
 402ab50:	e13fff17 	ldw	r4,-4(fp)
 402ab54:	000b883a 	mov	r5,zero
 402ab58:	000d883a 	mov	r6,zero
 402ab5c:	103ee83a 	callr	r2
}
 402ab60:	e037883a 	mov	sp,fp
 402ab64:	dfc00117 	ldw	ra,4(sp)
 402ab68:	df000017 	ldw	fp,0(sp)
 402ab6c:	dec00204 	addi	sp,sp,8
 402ab70:	f800283a 	ret

0402ab74 <soaccept>:
 */

int
soaccept(struct socket * so, 
   struct mbuf *  nam)
{
 402ab74:	defffb04 	addi	sp,sp,-20
 402ab78:	dfc00415 	stw	ra,16(sp)
 402ab7c:	df000315 	stw	fp,12(sp)
 402ab80:	df000304 	addi	fp,sp,12
 402ab84:	e13ffe15 	stw	r4,-8(fp)
 402ab88:	e17fff15 	stw	r5,-4(fp)
   int   error;

   if ((so->so_state & SS_NOFDREF) == 0)
 402ab8c:	e0bffe17 	ldw	r2,-8(fp)
 402ab90:	1080088b 	ldhu	r2,34(r2)
 402ab94:	10bfffcc 	andi	r2,r2,65535
 402ab98:	1080004c 	andi	r2,r2,1
 402ab9c:	1004c03a 	cmpne	r2,r2,zero
 402aba0:	1000031e 	bne	r2,zero,402abb0 <soaccept+0x3c>
      panic("soaccept");
 402aba4:	01010174 	movhi	r4,1029
 402aba8:	212e4c04 	addi	r4,r4,-18128
 402abac:	4020e100 	call	4020e10 <panic>
   so->so_state &= ~SS_NOFDREF;
 402abb0:	e0bffe17 	ldw	r2,-8(fp)
 402abb4:	10c0088b 	ldhu	r3,34(r2)
 402abb8:	00bfff84 	movi	r2,-2
 402abbc:	1884703a 	and	r2,r3,r2
 402abc0:	1007883a 	mov	r3,r2
 402abc4:	e0bffe17 	ldw	r2,-8(fp)
 402abc8:	10c0088d 	sth	r3,34(r2)
   so->so_req = PRU_ACCEPT;
 402abcc:	e0fffe17 	ldw	r3,-8(fp)
 402abd0:	00800144 	movi	r2,5
 402abd4:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 402abd8:	e0bffe17 	ldw	r2,-8(fp)
 402abdc:	10800217 	ldw	r2,8(r2)
 402abe0:	10800317 	ldw	r2,12(r2)
 402abe4:	e13ffe17 	ldw	r4,-8(fp)
 402abe8:	000b883a 	mov	r5,zero
 402abec:	e1bfff17 	ldw	r6,-4(fp)
 402abf0:	103ee83a 	callr	r2
 402abf4:	e0bffd15 	stw	r2,-12(fp)

   return (error);
 402abf8:	e0bffd17 	ldw	r2,-12(fp)
}
 402abfc:	e037883a 	mov	sp,fp
 402ac00:	dfc00117 	ldw	ra,4(sp)
 402ac04:	df000017 	ldw	fp,0(sp)
 402ac08:	dec00204 	addi	sp,sp,8
 402ac0c:	f800283a 	ret

0402ac10 <soconnect>:
 */

int
soconnect(struct socket * so, 
   struct mbuf *  nam)
{
 402ac10:	defffa04 	addi	sp,sp,-24
 402ac14:	dfc00515 	stw	ra,20(sp)
 402ac18:	df000415 	stw	fp,16(sp)
 402ac1c:	df000404 	addi	fp,sp,16
 402ac20:	e13ffd15 	stw	r4,-12(fp)
 402ac24:	e17ffe15 	stw	r5,-8(fp)
   int   error;

   if (so->so_options & SO_ACCEPTCONN)
 402ac28:	e0bffd17 	ldw	r2,-12(fp)
 402ac2c:	10800417 	ldw	r2,16(r2)
 402ac30:	1080008c 	andi	r2,r2,2
 402ac34:	1005003a 	cmpeq	r2,r2,zero
 402ac38:	1000031e 	bne	r2,zero,402ac48 <soconnect+0x38>
      return (EOPNOTSUPP);
 402ac3c:	008017c4 	movi	r2,95
 402ac40:	e0bfff15 	stw	r2,-4(fp)
 402ac44:	00002106 	br	402accc <soconnect+0xbc>
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 402ac48:	e0bffd17 	ldw	r2,-12(fp)
 402ac4c:	1080088b 	ldhu	r2,34(r2)
 402ac50:	10bfffcc 	andi	r2,r2,65535
 402ac54:	1080018c 	andi	r2,r2,6
 402ac58:	1005003a 	cmpeq	r2,r2,zero
 402ac5c:	10000e1e 	bne	r2,zero,402ac98 <soconnect+0x88>
 402ac60:	e0bffd17 	ldw	r2,-12(fp)
 402ac64:	10800217 	ldw	r2,8(r2)
 402ac68:	1080010b 	ldhu	r2,4(r2)
 402ac6c:	10bfffcc 	andi	r2,r2,65535
 402ac70:	1080010c 	andi	r2,r2,4
 402ac74:	1004c03a 	cmpne	r2,r2,zero
 402ac78:	1000041e 	bne	r2,zero,402ac8c <soconnect+0x7c>
 402ac7c:	e13ffd17 	ldw	r4,-12(fp)
 402ac80:	402ace40 	call	402ace4 <sodisconnect>
 402ac84:	1005003a 	cmpeq	r2,r2,zero
 402ac88:	1000031e 	bne	r2,zero,402ac98 <soconnect+0x88>
       ((so->so_proto->pr_flags & PR_CONNREQUIRED) ||
       (sodisconnect(so) != 0)))
   {
      error = EISCONN;
 402ac8c:	00801fc4 	movi	r2,127
 402ac90:	e0bffc15 	stw	r2,-16(fp)
    * If protocol is connection-based, can only connect once.
    * Otherwise, if connected, try to disconnect first.
    * This allows user to disconnect by connecting to, e.g.,
    * a null address.
    */
   if (so->so_state & (SS_ISCONNECTED|SS_ISCONNECTING) &&
 402ac94:	00000b06 	br	402acc4 <soconnect+0xb4>
   {
      error = EISCONN;
   }
   else
   {
      so->so_req = PRU_CONNECT;
 402ac98:	e0fffd17 	ldw	r3,-12(fp)
 402ac9c:	00800104 	movi	r2,4
 402aca0:	18800715 	stw	r2,28(r3)
      error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, nam);
 402aca4:	e0bffd17 	ldw	r2,-12(fp)
 402aca8:	10800217 	ldw	r2,8(r2)
 402acac:	10800317 	ldw	r2,12(r2)
 402acb0:	e13ffd17 	ldw	r4,-12(fp)
 402acb4:	000b883a 	mov	r5,zero
 402acb8:	e1bffe17 	ldw	r6,-8(fp)
 402acbc:	103ee83a 	callr	r2
 402acc0:	e0bffc15 	stw	r2,-16(fp)
   }
   return error;
 402acc4:	e0bffc17 	ldw	r2,-16(fp)
 402acc8:	e0bfff15 	stw	r2,-4(fp)
 402accc:	e0bfff17 	ldw	r2,-4(fp)
}
 402acd0:	e037883a 	mov	sp,fp
 402acd4:	dfc00117 	ldw	ra,4(sp)
 402acd8:	df000017 	ldw	fp,0(sp)
 402acdc:	dec00204 	addi	sp,sp,8
 402ace0:	f800283a 	ret

0402ace4 <sodisconnect>:
 * RETURNS: 
 */

int
sodisconnect(struct socket * so)
{
 402ace4:	defffc04 	addi	sp,sp,-16
 402ace8:	dfc00315 	stw	ra,12(sp)
 402acec:	df000215 	stw	fp,8(sp)
 402acf0:	df000204 	addi	fp,sp,8
 402acf4:	e13fff15 	stw	r4,-4(fp)
   int   error;

   INET_TRACE (INETM_SOCKET|INETM_CLOSE,
    ("INET: sodisconnect, so %lx so_state %x\n", so, so->so_state));

   if ((so->so_state & SS_ISCONNECTED) == 0) 
 402acf8:	e0bfff17 	ldw	r2,-4(fp)
 402acfc:	1080088b 	ldhu	r2,34(r2)
 402ad00:	10bfffcc 	andi	r2,r2,65535
 402ad04:	1080008c 	andi	r2,r2,2
 402ad08:	1004c03a 	cmpne	r2,r2,zero
 402ad0c:	1000031e 	bne	r2,zero,402ad1c <sodisconnect+0x38>
   {
      error = ENOTCONN;
 402ad10:	00802004 	movi	r2,128
 402ad14:	e0bffe15 	stw	r2,-8(fp)
      goto bad;
 402ad18:	00001406 	br	402ad6c <sodisconnect+0x88>
   }
   if (so->so_state & SS_ISDISCONNECTING) 
 402ad1c:	e0bfff17 	ldw	r2,-4(fp)
 402ad20:	1080088b 	ldhu	r2,34(r2)
 402ad24:	10bfffcc 	andi	r2,r2,65535
 402ad28:	1080020c 	andi	r2,r2,8
 402ad2c:	1005003a 	cmpeq	r2,r2,zero
 402ad30:	1000031e 	bne	r2,zero,402ad40 <sodisconnect+0x5c>
   {
      error = EALREADY;
 402ad34:	00801e04 	movi	r2,120
 402ad38:	e0bffe15 	stw	r2,-8(fp)
      goto bad;
 402ad3c:	00000b06 	br	402ad6c <sodisconnect+0x88>
   }
   so->so_req = PRU_DISCONNECT;
 402ad40:	e0ffff17 	ldw	r3,-4(fp)
 402ad44:	00800184 	movi	r2,6
 402ad48:	18800715 	stw	r2,28(r3)
   error = (*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0);
 402ad4c:	e0bfff17 	ldw	r2,-4(fp)
 402ad50:	10800217 	ldw	r2,8(r2)
 402ad54:	10800317 	ldw	r2,12(r2)
 402ad58:	e13fff17 	ldw	r4,-4(fp)
 402ad5c:	000b883a 	mov	r5,zero
 402ad60:	000d883a 	mov	r6,zero
 402ad64:	103ee83a 	callr	r2
 402ad68:	e0bffe15 	stw	r2,-8(fp)

bad:
   return (error);
 402ad6c:	e0bffe17 	ldw	r2,-8(fp)
}
 402ad70:	e037883a 	mov	sp,fp
 402ad74:	dfc00117 	ldw	ra,4(sp)
 402ad78:	df000017 	ldw	fp,0(sp)
 402ad7c:	dec00204 	addi	sp,sp,8
 402ad80:	f800283a 	ret

0402ad84 <sosend>:
sosend(struct socket *so, 
       struct mbuf *nam,      /* sockaddr, if UDP socket, NULL if TCP */
       char  *data,           /* data to send */
       int   *data_length,    /* IN/OUT  length of (remaining) data */
       int   flags)
{
 402ad84:	deffee04 	addi	sp,sp,-72
 402ad88:	dfc01115 	stw	ra,68(sp)
 402ad8c:	df001015 	stw	fp,64(sp)
 402ad90:	df001004 	addi	fp,sp,64
 402ad94:	e13ff815 	stw	r4,-32(fp)
 402ad98:	e17ff915 	stw	r5,-28(fp)
 402ad9c:	e1bffa15 	stw	r6,-24(fp)
 402ada0:	e1fffb15 	stw	r7,-20(fp)
   struct mbuf *head = (struct mbuf *)NULL;
 402ada4:	e03ff715 	stw	zero,-36(fp)
   struct mbuf *m;
   int   space;
   int   resid;
   int   len;
   int   error = 0;
 402ada8:	e03ff215 	stw	zero,-56(fp)
   int   dontroute;
   int   first = 1;
 402adac:	00800044 	movi	r2,1
 402adb0:	e0bff015 	stw	r2,-64(fp)

   resid = *data_length;
 402adb4:	e0bffb17 	ldw	r2,-20(fp)
 402adb8:	10800017 	ldw	r2,0(r2)
 402adbc:	e0bff415 	stw	r2,-48(fp)
    * However, space must be signed, as it might be less than 0
    * if we over-committed, and we must use a signed comparison
    * of space and resid.  On the other hand, a negative resid
    * causes us to loop sending 0-length segments to the protocol.
    */
   if (resid < 0)
 402adc0:	e0bff417 	ldw	r2,-48(fp)
 402adc4:	1004403a 	cmpge	r2,r2,zero
 402adc8:	1000031e 	bne	r2,zero,402add8 <sosend+0x54>
      return (EINVAL);
 402adcc:	00800584 	movi	r2,22
 402add0:	e0bfff15 	stw	r2,-4(fp)
 402add4:	00016706 	br	402b374 <sosend+0x5f0>

   INET_TRACE (INETM_IO, ("INET:sosend: so %lx resid %d sb_hiwat %d so_state %x\n",
               so, resid, so->so_snd.sb_hiwat, so->so_state));

   if (sosendallatonce(so) && (resid > (int)so->so_snd.sb_hiwat))
 402add8:	e0bff817 	ldw	r2,-32(fp)
 402addc:	10800217 	ldw	r2,8(r2)
 402ade0:	1080010b 	ldhu	r2,4(r2)
 402ade4:	10bfffcc 	andi	r2,r2,65535
 402ade8:	1080004c 	andi	r2,r2,1
 402adec:	10803fcc 	andi	r2,r2,255
 402adf0:	1005003a 	cmpeq	r2,r2,zero
 402adf4:	1000081e 	bne	r2,zero,402ae18 <sosend+0x94>
 402adf8:	e0bff817 	ldw	r2,-32(fp)
 402adfc:	10801317 	ldw	r2,76(r2)
 402ae00:	1007883a 	mov	r3,r2
 402ae04:	e0bff417 	ldw	r2,-48(fp)
 402ae08:	1880030e 	bge	r3,r2,402ae18 <sosend+0x94>
      return (EMSGSIZE);
 402ae0c:	00c01e84 	movi	r3,122
 402ae10:	e0ffff15 	stw	r3,-4(fp)
 402ae14:	00015706 	br	402b374 <sosend+0x5f0>

   dontroute = (flags & MSG_DONTROUTE) &&
 402ae18:	e0800217 	ldw	r2,8(fp)
 402ae1c:	1080010c 	andi	r2,r2,4
 402ae20:	1005003a 	cmpeq	r2,r2,zero
 402ae24:	1000111e 	bne	r2,zero,402ae6c <sosend+0xe8>
 402ae28:	e0bff817 	ldw	r2,-32(fp)
 402ae2c:	10800417 	ldw	r2,16(r2)
 402ae30:	1080040c 	andi	r2,r2,16
 402ae34:	1004c03a 	cmpne	r2,r2,zero
 402ae38:	10000c1e 	bne	r2,zero,402ae6c <sosend+0xe8>
 402ae3c:	e0bff817 	ldw	r2,-32(fp)
 402ae40:	10800217 	ldw	r2,8(r2)
 402ae44:	1080010b 	ldhu	r2,4(r2)
 402ae48:	10bfffcc 	andi	r2,r2,65535
 402ae4c:	1080004c 	andi	r2,r2,1
 402ae50:	1080005c 	xori	r2,r2,1
 402ae54:	10803fcc 	andi	r2,r2,255
 402ae58:	1004c03a 	cmpne	r2,r2,zero
 402ae5c:	1000031e 	bne	r2,zero,402ae6c <sosend+0xe8>
 402ae60:	00800044 	movi	r2,1
 402ae64:	e0bffe15 	stw	r2,-8(fp)
 402ae68:	00000106 	br	402ae70 <sosend+0xec>
 402ae6c:	e03ffe15 	stw	zero,-8(fp)
 402ae70:	e0fffe17 	ldw	r3,-8(fp)
 402ae74:	e0fff115 	stw	r3,-60(fp)
               (so->so_proto->pr_flags & PR_ATOMIC);

#define     snderr(errno)     {  error =  errno;   goto  release; }

restart:
   sblock(&so->so_snd);
 402ae78:	00000406 	br	402ae8c <sosend+0x108>
 402ae7c:	e0bff817 	ldw	r2,-32(fp)
 402ae80:	10801904 	addi	r2,r2,100
 402ae84:	1009883a 	mov	r4,r2
 402ae88:	40217880 	call	4021788 <tcp_sleep>
 402ae8c:	e0bff817 	ldw	r2,-32(fp)
 402ae90:	1080190b 	ldhu	r2,100(r2)
 402ae94:	10bfffcc 	andi	r2,r2,65535
 402ae98:	1080004c 	andi	r2,r2,1
 402ae9c:	10803fcc 	andi	r2,r2,255
 402aea0:	1004c03a 	cmpne	r2,r2,zero
 402aea4:	103ff51e 	bne	r2,zero,402ae7c <sosend+0xf8>
 402aea8:	e0bff817 	ldw	r2,-32(fp)
 402aeac:	1080190b 	ldhu	r2,100(r2)
 402aeb0:	10800054 	ori	r2,r2,1
 402aeb4:	1007883a 	mov	r3,r2
 402aeb8:	e0bff817 	ldw	r2,-32(fp)
 402aebc:	10c0190d 	sth	r3,100(r2)
   do 
   {
      if (so->so_error) 
 402aec0:	e0bff817 	ldw	r2,-32(fp)
 402aec4:	10800617 	ldw	r2,24(r2)
 402aec8:	1005003a 	cmpeq	r2,r2,zero
 402aecc:	1000061e 	bne	r2,zero,402aee8 <sosend+0x164>
      {
         error = so->so_error;
 402aed0:	e0bff817 	ldw	r2,-32(fp)
 402aed4:	10800617 	ldw	r2,24(r2)
 402aed8:	e0bff215 	stw	r2,-56(fp)
         so->so_error = 0;          /* ??? */
 402aedc:	e0bff817 	ldw	r2,-32(fp)
 402aee0:	10000615 	stw	zero,24(r2)
         goto release;
 402aee4:	00011106 	br	402b32c <sosend+0x5a8>
      }
      if (so->so_state & SS_CANTSENDMORE)
 402aee8:	e0bff817 	ldw	r2,-32(fp)
 402aeec:	1080088b 	ldhu	r2,34(r2)
 402aef0:	10bfffcc 	andi	r2,r2,65535
 402aef4:	1080040c 	andi	r2,r2,16
 402aef8:	1005003a 	cmpeq	r2,r2,zero
 402aefc:	1000031e 	bne	r2,zero,402af0c <sosend+0x188>
         snderr(EPIPE);
 402af00:	00800804 	movi	r2,32
 402af04:	e0bff215 	stw	r2,-56(fp)
 402af08:	00010806 	br	402b32c <sosend+0x5a8>
      if ((so->so_state & SS_ISCONNECTED) == 0) 
 402af0c:	e0bff817 	ldw	r2,-32(fp)
 402af10:	1080088b 	ldhu	r2,34(r2)
 402af14:	10bfffcc 	andi	r2,r2,65535
 402af18:	1080008c 	andi	r2,r2,2
 402af1c:	1004c03a 	cmpne	r2,r2,zero
 402af20:	1000101e 	bne	r2,zero,402af64 <sosend+0x1e0>
      {
         if (so->so_proto->pr_flags & PR_CONNREQUIRED)
 402af24:	e0bff817 	ldw	r2,-32(fp)
 402af28:	10800217 	ldw	r2,8(r2)
 402af2c:	1080010b 	ldhu	r2,4(r2)
 402af30:	10bfffcc 	andi	r2,r2,65535
 402af34:	1080010c 	andi	r2,r2,4
 402af38:	1005003a 	cmpeq	r2,r2,zero
 402af3c:	1000031e 	bne	r2,zero,402af4c <sosend+0x1c8>
            snderr(ENOTCONN);
 402af40:	00802004 	movi	r2,128
 402af44:	e0bff215 	stw	r2,-56(fp)
 402af48:	0000f806 	br	402b32c <sosend+0x5a8>
         if (nam == 0)
 402af4c:	e0bff917 	ldw	r2,-28(fp)
 402af50:	1004c03a 	cmpne	r2,r2,zero
 402af54:	1000031e 	bne	r2,zero,402af64 <sosend+0x1e0>
            snderr(EDESTADDRREQ);
 402af58:	00801e44 	movi	r2,121
 402af5c:	e0bff215 	stw	r2,-56(fp)
 402af60:	0000f206 	br	402b32c <sosend+0x5a8>
      }
      if (flags & MSG_OOB)
 402af64:	e0800217 	ldw	r2,8(fp)
 402af68:	1080004c 	andi	r2,r2,1
 402af6c:	10803fcc 	andi	r2,r2,255
 402af70:	1005003a 	cmpeq	r2,r2,zero
 402af74:	1000031e 	bne	r2,zero,402af84 <sosend+0x200>
         space = 1024;
 402af78:	00810004 	movi	r2,1024
 402af7c:	e0bff515 	stw	r2,-44(fp)
 402af80:	00005106 	br	402b0c8 <sosend+0x344>
      else 
      {
         space = (int)sbspace(&so->so_snd);
 402af84:	e0bff817 	ldw	r2,-32(fp)
 402af88:	10801317 	ldw	r2,76(r2)
 402af8c:	1007883a 	mov	r3,r2
 402af90:	e0bff817 	ldw	r2,-32(fp)
 402af94:	10801217 	ldw	r2,72(r2)
 402af98:	1885c83a 	sub	r2,r3,r2
 402af9c:	1004803a 	cmplt	r2,r2,zero
 402afa0:	1000071e 	bne	r2,zero,402afc0 <sosend+0x23c>
 402afa4:	e0bff817 	ldw	r2,-32(fp)
 402afa8:	10c01317 	ldw	r3,76(r2)
 402afac:	e0bff817 	ldw	r2,-32(fp)
 402afb0:	10801217 	ldw	r2,72(r2)
 402afb4:	1885c83a 	sub	r2,r3,r2
 402afb8:	e0bffd15 	stw	r2,-12(fp)
 402afbc:	00000106 	br	402afc4 <sosend+0x240>
 402afc0:	e03ffd15 	stw	zero,-12(fp)
 402afc4:	e0bffd17 	ldw	r2,-12(fp)
 402afc8:	e0bff515 	stw	r2,-44(fp)
         if ((sosendallatonce(so) && (space < resid)) ||
 402afcc:	e0bff817 	ldw	r2,-32(fp)
 402afd0:	10800217 	ldw	r2,8(r2)
 402afd4:	1080010b 	ldhu	r2,4(r2)
 402afd8:	10bfffcc 	andi	r2,r2,65535
 402afdc:	1080004c 	andi	r2,r2,1
 402afe0:	1080005c 	xori	r2,r2,1
 402afe4:	10803fcc 	andi	r2,r2,255
 402afe8:	1004c03a 	cmpne	r2,r2,zero
 402afec:	1000031e 	bne	r2,zero,402affc <sosend+0x278>
 402aff0:	e0fff517 	ldw	r3,-44(fp)
 402aff4:	e0bff417 	ldw	r2,-48(fp)
 402aff8:	18801416 	blt	r3,r2,402b04c <sosend+0x2c8>
 402affc:	e0bff417 	ldw	r2,-48(fp)
 402b000:	10815e10 	cmplti	r2,r2,1400
 402b004:	1000301e 	bne	r2,zero,402b0c8 <sosend+0x344>
 402b008:	e0bff517 	ldw	r2,-44(fp)
 402b00c:	10815e08 	cmpgei	r2,r2,1400
 402b010:	10002d1e 	bne	r2,zero,402b0c8 <sosend+0x344>
 402b014:	e0bff817 	ldw	r2,-32(fp)
 402b018:	10801217 	ldw	r2,72(r2)
 402b01c:	10815e30 	cmpltui	r2,r2,1400
 402b020:	1000291e 	bne	r2,zero,402b0c8 <sosend+0x344>
 402b024:	e0bff817 	ldw	r2,-32(fp)
 402b028:	1080088b 	ldhu	r2,34(r2)
 402b02c:	10bfffcc 	andi	r2,r2,65535
 402b030:	1080400c 	andi	r2,r2,256
 402b034:	1004c03a 	cmpne	r2,r2,zero
 402b038:	1000231e 	bne	r2,zero,402b0c8 <sosend+0x344>
 402b03c:	e0800217 	ldw	r2,8(fp)
 402b040:	1080080c 	andi	r2,r2,32
 402b044:	1004c03a 	cmpne	r2,r2,zero
 402b048:	10001f1e 	bne	r2,zero,402b0c8 <sosend+0x344>
             ((resid >= CLBYTES) && (space < CLBYTES) &&
              (so->so_snd.sb_cc >= CLBYTES) &&
              ((so->so_state & SS_NBIO) == 0) &&
              ((flags & MSG_DONTWAIT) == 0)))
         {
            if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 402b04c:	e0bff817 	ldw	r2,-32(fp)
 402b050:	1080088b 	ldhu	r2,34(r2)
 402b054:	10bfffcc 	andi	r2,r2,65535
 402b058:	1080400c 	andi	r2,r2,256
 402b05c:	1004c03a 	cmpne	r2,r2,zero
 402b060:	1000041e 	bne	r2,zero,402b074 <sosend+0x2f0>
 402b064:	e0800217 	ldw	r2,8(fp)
 402b068:	1080080c 	andi	r2,r2,32
 402b06c:	1005003a 	cmpeq	r2,r2,zero
 402b070:	1000061e 	bne	r2,zero,402b08c <sosend+0x308>
            {
               if (first)
 402b074:	e0bff017 	ldw	r2,-64(fp)
 402b078:	1005003a 	cmpeq	r2,r2,zero
 402b07c:	1000ab1e 	bne	r2,zero,402b32c <sosend+0x5a8>
                  error = EWOULDBLOCK;
 402b080:	008002c4 	movi	r2,11
 402b084:	e0bff215 	stw	r2,-56(fp)
               goto release;
 402b088:	0000a806 	br	402b32c <sosend+0x5a8>
            }
            sbunlock(&so->so_snd);
 402b08c:	e0bff817 	ldw	r2,-32(fp)
 402b090:	10c0190b 	ldhu	r3,100(r2)
 402b094:	00bfff84 	movi	r2,-2
 402b098:	1884703a 	and	r2,r3,r2
 402b09c:	1007883a 	mov	r3,r2
 402b0a0:	e0bff817 	ldw	r2,-32(fp)
 402b0a4:	10c0190d 	sth	r3,100(r2)
 402b0a8:	e0bff817 	ldw	r2,-32(fp)
 402b0ac:	10801904 	addi	r2,r2,100
 402b0b0:	1009883a 	mov	r4,r2
 402b0b4:	40219280 	call	4021928 <tcp_wakeup>
            sbwait(&so->so_snd);
 402b0b8:	e0bff817 	ldw	r2,-32(fp)
 402b0bc:	11001204 	addi	r4,r2,72
 402b0c0:	402cecc0 	call	402cecc <sbwait>
            goto restart;
 402b0c4:	003f7106 	br	402ae8c <sosend+0x108>
         }
      }
      if ( space <= 0 ) 
 402b0c8:	e0bff517 	ldw	r2,-44(fp)
 402b0cc:	10800048 	cmpgei	r2,r2,1
 402b0d0:	1000651e 	bne	r2,zero,402b268 <sosend+0x4e4>
      {
         /* no space in socket send buffer - see if we can wait */
         if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT))
 402b0d4:	e0bff817 	ldw	r2,-32(fp)
 402b0d8:	1080088b 	ldhu	r2,34(r2)
 402b0dc:	10bfffcc 	andi	r2,r2,65535
 402b0e0:	1080400c 	andi	r2,r2,256
 402b0e4:	1004c03a 	cmpne	r2,r2,zero
 402b0e8:	1000041e 	bne	r2,zero,402b0fc <sosend+0x378>
 402b0ec:	e0800217 	ldw	r2,8(fp)
 402b0f0:	1080080c 	andi	r2,r2,32
 402b0f4:	1005003a 	cmpeq	r2,r2,zero
 402b0f8:	1000061e 	bne	r2,zero,402b114 <sosend+0x390>
         {
            if (first)     /* report first error */
 402b0fc:	e0bff017 	ldw	r2,-64(fp)
 402b100:	1005003a 	cmpeq	r2,r2,zero
 402b104:	1000891e 	bne	r2,zero,402b32c <sosend+0x5a8>
               error = EWOULDBLOCK;
 402b108:	008002c4 	movi	r2,11
 402b10c:	e0bff215 	stw	r2,-56(fp)
            goto release;
 402b110:	00008606 	br	402b32c <sosend+0x5a8>
         }
         /* If blocking socket, let someone else run */
         sbunlock(&so->so_snd);
 402b114:	e0bff817 	ldw	r2,-32(fp)
 402b118:	10c0190b 	ldhu	r3,100(r2)
 402b11c:	00bfff84 	movi	r2,-2
 402b120:	1884703a 	and	r2,r3,r2
 402b124:	1007883a 	mov	r3,r2
 402b128:	e0bff817 	ldw	r2,-32(fp)
 402b12c:	10c0190d 	sth	r3,100(r2)
 402b130:	e0bff817 	ldw	r2,-32(fp)
 402b134:	10801904 	addi	r2,r2,100
 402b138:	1009883a 	mov	r4,r2
 402b13c:	40219280 	call	4021928 <tcp_wakeup>
         sbwait(&so->so_snd);
 402b140:	e0bff817 	ldw	r2,-32(fp)
 402b144:	11001204 	addi	r4,r2,72
 402b148:	402cecc0 	call	402cecc <sbwait>
         goto restart;
 402b14c:	003f4f06 	br	402ae8c <sosend+0x108>
      }

      while (space > 0) 
      {
         len = resid;
 402b150:	e0bff417 	ldw	r2,-48(fp)
 402b154:	e0bff315 	stw	r2,-52(fp)
         if ( so->so_type == SOCK_STREAM )
 402b158:	e0bff817 	ldw	r2,-32(fp)
 402b15c:	10800983 	ldbu	r2,38(r2)
 402b160:	10803fcc 	andi	r2,r2,255
 402b164:	1080201c 	xori	r2,r2,128
 402b168:	10bfe004 	addi	r2,r2,-128
 402b16c:	10800058 	cmpnei	r2,r2,1
 402b170:	1000181e 	bne	r2,zero,402b1d4 <sosend+0x450>
         {
            m = m_getwithdata(MT_TXDATA, len);
 402b174:	01000084 	movi	r4,2
 402b178:	e17ff317 	ldw	r5,-52(fp)
 402b17c:	40269b40 	call	40269b4 <m_getnbuf>
 402b180:	e0bff615 	stw	r2,-40(fp)
            if (!m)   
 402b184:	e0bff617 	ldw	r2,-40(fp)
 402b188:	1004c03a 	cmpne	r2,r2,zero
 402b18c:	1000031e 	bne	r2,zero,402b19c <sosend+0x418>
               snderr(ENOBUFS);
 402b190:	00801a44 	movi	r2,105
 402b194:	e0bff215 	stw	r2,-56(fp)
 402b198:	00006406 	br	402b32c <sosend+0x5a8>
            MEMCPY(m->m_data, data, len);
 402b19c:	e0bff617 	ldw	r2,-40(fp)
 402b1a0:	10c00317 	ldw	r3,12(r2)
 402b1a4:	e1bff317 	ldw	r6,-52(fp)
 402b1a8:	e0bffa17 	ldw	r2,-24(fp)
 402b1ac:	1809883a 	mov	r4,r3
 402b1b0:	100b883a 	mov	r5,r2
 402b1b4:	4001de40 	call	4001de4 <memcpy>
            so->so_snd.sb_flags |= SB_MBCOMP;   /* allow compression */
 402b1b8:	e0bff817 	ldw	r2,-32(fp)
 402b1bc:	1080190b 	ldhu	r2,100(r2)
 402b1c0:	10802014 	ori	r2,r2,128
 402b1c4:	1007883a 	mov	r3,r2
 402b1c8:	e0bff817 	ldw	r2,-32(fp)
 402b1cc:	10c0190d 	sth	r3,100(r2)
 402b1d0:	00000706 	br	402b1f0 <sosend+0x46c>
         }
         else
         {
            m = m_get (M_WAIT, MT_TXDATA);
 402b1d4:	01000084 	movi	r4,2
 402b1d8:	000b883a 	mov	r5,zero
 402b1dc:	40269b40 	call	40269b4 <m_getnbuf>
 402b1e0:	e0bff615 	stw	r2,-40(fp)
            m->m_data = data;
 402b1e4:	e0fff617 	ldw	r3,-40(fp)
 402b1e8:	e0bffa17 	ldw	r2,-24(fp)
 402b1ec:	18800315 	stw	r2,12(r3)
         }
         INET_TRACE (INETM_IO,
          ("sosend:got %d bytes so %lx mlen %d, off %d mtod %x\n",
             len, so, m->m_len, m->m_off, mtod (m, caddr_t)));

         *data_length -= len;
 402b1f0:	e0bffb17 	ldw	r2,-20(fp)
 402b1f4:	10c00017 	ldw	r3,0(r2)
 402b1f8:	e0bff317 	ldw	r2,-52(fp)
 402b1fc:	1887c83a 	sub	r3,r3,r2
 402b200:	e0bffb17 	ldw	r2,-20(fp)
 402b204:	10c00015 	stw	r3,0(r2)
         resid -= len;
 402b208:	e0fff417 	ldw	r3,-48(fp)
 402b20c:	e0bff317 	ldw	r2,-52(fp)
 402b210:	1885c83a 	sub	r2,r3,r2
 402b214:	e0bff415 	stw	r2,-48(fp)
         data += len;
 402b218:	e0bff317 	ldw	r2,-52(fp)
 402b21c:	1007883a 	mov	r3,r2
 402b220:	e0bffa17 	ldw	r2,-24(fp)
 402b224:	10c5883a 	add	r2,r2,r3
 402b228:	e0bffa15 	stw	r2,-24(fp)
         m->m_len = len;
 402b22c:	e0fff317 	ldw	r3,-52(fp)
 402b230:	e0bff617 	ldw	r2,-40(fp)
 402b234:	10c00215 	stw	r3,8(r2)
         if (head == (struct mbuf *)NULL)
 402b238:	e0bff717 	ldw	r2,-36(fp)
 402b23c:	1004c03a 	cmpne	r2,r2,zero
 402b240:	1000021e 	bne	r2,zero,402b24c <sosend+0x4c8>
            head = m;
 402b244:	e0bff617 	ldw	r2,-40(fp)
 402b248:	e0bff715 	stw	r2,-36(fp)
         if (error)
 402b24c:	e0bff217 	ldw	r2,-56(fp)
 402b250:	1004c03a 	cmpne	r2,r2,zero
 402b254:	1000351e 	bne	r2,zero,402b32c <sosend+0x5a8>
            goto release;
         if (*data_length <= 0)
 402b258:	e0bffb17 	ldw	r2,-20(fp)
 402b25c:	10800017 	ldw	r2,0(r2)
 402b260:	10800050 	cmplti	r2,r2,1
 402b264:	1000031e 	bne	r2,zero,402b274 <sosend+0x4f0>
         sbunlock(&so->so_snd);
         sbwait(&so->so_snd);
         goto restart;
      }

      while (space > 0) 
 402b268:	e0bff517 	ldw	r2,-44(fp)
 402b26c:	10800048 	cmpgei	r2,r2,1
 402b270:	103fb71e 	bne	r2,zero,402b150 <sosend+0x3cc>
            goto release;
         if (*data_length <= 0)
            break;
      }

      if (dontroute)
 402b274:	e0bff117 	ldw	r2,-60(fp)
 402b278:	1005003a 	cmpeq	r2,r2,zero
 402b27c:	1000051e 	bne	r2,zero,402b294 <sosend+0x510>
         so->so_options |= SO_DONTROUTE;
 402b280:	e0bff817 	ldw	r2,-32(fp)
 402b284:	10800417 	ldw	r2,16(r2)
 402b288:	10c00414 	ori	r3,r2,16
 402b28c:	e0bff817 	ldw	r2,-32(fp)
 402b290:	10c00415 	stw	r3,16(r2)

      so->so_req = (flags & MSG_OOB) ? PRU_SENDOOB : PRU_SEND;
 402b294:	e0800217 	ldw	r2,8(fp)
 402b298:	1080004c 	andi	r2,r2,1
 402b29c:	10803fcc 	andi	r2,r2,255
 402b2a0:	1005003a 	cmpeq	r2,r2,zero
 402b2a4:	1000031e 	bne	r2,zero,402b2b4 <sosend+0x530>
 402b2a8:	00c00384 	movi	r3,14
 402b2ac:	e0fffc15 	stw	r3,-16(fp)
 402b2b0:	00000206 	br	402b2bc <sosend+0x538>
 402b2b4:	00800244 	movi	r2,9
 402b2b8:	e0bffc15 	stw	r2,-16(fp)
 402b2bc:	e0bff817 	ldw	r2,-32(fp)
 402b2c0:	e0fffc17 	ldw	r3,-16(fp)
 402b2c4:	10c00715 	stw	r3,28(r2)
      error = (*so->so_proto->pr_usrreq)(so, head, nam);
 402b2c8:	e0bff817 	ldw	r2,-32(fp)
 402b2cc:	10800217 	ldw	r2,8(r2)
 402b2d0:	10800317 	ldw	r2,12(r2)
 402b2d4:	e13ff817 	ldw	r4,-32(fp)
 402b2d8:	e17ff717 	ldw	r5,-36(fp)
 402b2dc:	e1bff917 	ldw	r6,-28(fp)
 402b2e0:	103ee83a 	callr	r2
 402b2e4:	e0bff215 	stw	r2,-56(fp)

      if (dontroute)
 402b2e8:	e0bff117 	ldw	r2,-60(fp)
 402b2ec:	1005003a 	cmpeq	r2,r2,zero
 402b2f0:	1000061e 	bne	r2,zero,402b30c <sosend+0x588>
         so->so_options &= ~SO_DONTROUTE;
 402b2f4:	e0bff817 	ldw	r2,-32(fp)
 402b2f8:	10c00417 	ldw	r3,16(r2)
 402b2fc:	00bffbc4 	movi	r2,-17
 402b300:	1886703a 	and	r3,r3,r2
 402b304:	e0bff817 	ldw	r2,-32(fp)
 402b308:	10c00415 	stw	r3,16(r2)

      head = (struct mbuf *)NULL;
 402b30c:	e03ff715 	stw	zero,-36(fp)
      first = 0;
 402b310:	e03ff015 	stw	zero,-64(fp)
   } while ((resid != 0) && (error == 0));
 402b314:	e0bff417 	ldw	r2,-48(fp)
 402b318:	1005003a 	cmpeq	r2,r2,zero
 402b31c:	1000031e 	bne	r2,zero,402b32c <sosend+0x5a8>
 402b320:	e0bff217 	ldw	r2,-56(fp)
 402b324:	1005003a 	cmpeq	r2,r2,zero
 402b328:	103ee51e 	bne	r2,zero,402aec0 <sosend+0x13c>

release:
   sbunlock(&so->so_snd);  
 402b32c:	e0bff817 	ldw	r2,-32(fp)
 402b330:	10c0190b 	ldhu	r3,100(r2)
 402b334:	00bfff84 	movi	r2,-2
 402b338:	1884703a 	and	r2,r3,r2
 402b33c:	1007883a 	mov	r3,r2
 402b340:	e0bff817 	ldw	r2,-32(fp)
 402b344:	10c0190d 	sth	r3,100(r2)
 402b348:	e0bff817 	ldw	r2,-32(fp)
 402b34c:	10801904 	addi	r2,r2,100
 402b350:	1009883a 	mov	r4,r2
 402b354:	40219280 	call	4021928 <tcp_wakeup>
   if (head)
 402b358:	e0bff717 	ldw	r2,-36(fp)
 402b35c:	1005003a 	cmpeq	r2,r2,zero
 402b360:	1000021e 	bne	r2,zero,402b36c <sosend+0x5e8>
      m_freem(head);
 402b364:	e13ff717 	ldw	r4,-36(fp)
 402b368:	4026c900 	call	4026c90 <m_freem>
   return error;
 402b36c:	e0bff217 	ldw	r2,-56(fp)
 402b370:	e0bfff15 	stw	r2,-4(fp)
 402b374:	e0bfff17 	ldw	r2,-4(fp)
}
 402b378:	e037883a 	mov	sp,fp
 402b37c:	dfc00117 	ldw	ra,4(sp)
 402b380:	df000017 	ldw	fp,0(sp)
 402b384:	dec00204 	addi	sp,sp,8
 402b388:	f800283a 	ret

0402b38c <soreceive>:
soreceive(struct socket * so, 
   struct mbuf **aname,
   char * data,
   int * datalen,
   int   flags)
{
 402b38c:	defff104 	addi	sp,sp,-60
 402b390:	dfc00e15 	stw	ra,56(sp)
 402b394:	df000d15 	stw	fp,52(sp)
 402b398:	df000d04 	addi	fp,sp,52
 402b39c:	e13ffb15 	stw	r4,-20(fp)
 402b3a0:	e17ffc15 	stw	r5,-16(fp)
 402b3a4:	e1bffd15 	stw	r6,-12(fp)
 402b3a8:	e1fffe15 	stw	r7,-8(fp)
   struct mbuf *  m;
   int   len;
   int   error =  0;
 402b3ac:	e03ff815 	stw	zero,-32(fp)
   int   offset;
   struct protosw *  pr =  so->so_proto;
 402b3b0:	e0bffb17 	ldw	r2,-20(fp)
 402b3b4:	10800217 	ldw	r2,8(r2)
 402b3b8:	e0bff615 	stw	r2,-40(fp)
   struct mbuf *  nextrecord;
   int   moff;
   int   lflags;

   if (aname)
 402b3bc:	e0bffc17 	ldw	r2,-16(fp)
 402b3c0:	1005003a 	cmpeq	r2,r2,zero
 402b3c4:	1000021e 	bne	r2,zero,402b3d0 <soreceive+0x44>
      *aname = 0;
 402b3c8:	e0bffc17 	ldw	r2,-16(fp)
 402b3cc:	10000015 	stw	zero,0(r2)
   if (flags & MSG_OOB) 
 402b3d0:	e0800217 	ldw	r2,8(fp)
 402b3d4:	1080004c 	andi	r2,r2,1
 402b3d8:	10803fcc 	andi	r2,r2,255
 402b3dc:	1005003a 	cmpeq	r2,r2,zero
 402b3e0:	10004d1e 	bne	r2,zero,402b518 <soreceive+0x18c>
   {
      m = m_get (M_WAIT, MT_RXDATA);
 402b3e4:	01000044 	movi	r4,1
 402b3e8:	000b883a 	mov	r5,zero
 402b3ec:	40269b40 	call	40269b4 <m_getnbuf>
 402b3f0:	e0bffa15 	stw	r2,-24(fp)
      if (m == NULL)
 402b3f4:	e0bffa17 	ldw	r2,-24(fp)
 402b3f8:	1004c03a 	cmpne	r2,r2,zero
 402b3fc:	1000031e 	bne	r2,zero,402b40c <soreceive+0x80>
         return ENOBUFS;
 402b400:	00801a44 	movi	r2,105
 402b404:	e0bfff15 	stw	r2,-4(fp)
 402b408:	0001d306 	br	402bb58 <soreceive+0x7cc>
      lflags = flags & MSG_PEEK;
 402b40c:	e0800217 	ldw	r2,8(fp)
 402b410:	1080008c 	andi	r2,r2,2
 402b414:	e0bff315 	stw	r2,-52(fp)

      so->so_req = PRU_RCVOOB;
 402b418:	e0fffb17 	ldw	r3,-20(fp)
 402b41c:	00800344 	movi	r2,13
 402b420:	18800715 	stw	r2,28(r3)
      error = (*pr->pr_usrreq)(so, m, LONG2MBUF((long)lflags));
 402b424:	e0bff617 	ldw	r2,-40(fp)
 402b428:	10800317 	ldw	r2,12(r2)
 402b42c:	e1bff317 	ldw	r6,-52(fp)
 402b430:	e13ffb17 	ldw	r4,-20(fp)
 402b434:	e17ffa17 	ldw	r5,-24(fp)
 402b438:	103ee83a 	callr	r2
 402b43c:	e0bff815 	stw	r2,-32(fp)
      if (error == 0)
 402b440:	e0bff817 	ldw	r2,-32(fp)
 402b444:	1004c03a 	cmpne	r2,r2,zero
 402b448:	1000271e 	bne	r2,zero,402b4e8 <soreceive+0x15c>
      {
         do 
         {
            len = *datalen;
 402b44c:	e0bffe17 	ldw	r2,-8(fp)
 402b450:	10800017 	ldw	r2,0(r2)
 402b454:	e0bff915 	stw	r2,-28(fp)
            if (len > (int)m->m_len)
 402b458:	e0bffa17 	ldw	r2,-24(fp)
 402b45c:	10800217 	ldw	r2,8(r2)
 402b460:	1007883a 	mov	r3,r2
 402b464:	e0bff917 	ldw	r2,-28(fp)
 402b468:	1880030e 	bge	r3,r2,402b478 <soreceive+0xec>
               len = m->m_len;
 402b46c:	e0bffa17 	ldw	r2,-24(fp)
 402b470:	10800217 	ldw	r2,8(r2)
 402b474:	e0bff915 	stw	r2,-28(fp)

            MEMCPY(data, mtod(m, char*), len);
 402b478:	e0bffa17 	ldw	r2,-24(fp)
 402b47c:	10c00317 	ldw	r3,12(r2)
 402b480:	e1bff917 	ldw	r6,-28(fp)
 402b484:	e0bffd17 	ldw	r2,-12(fp)
 402b488:	1009883a 	mov	r4,r2
 402b48c:	180b883a 	mov	r5,r3
 402b490:	4001de40 	call	4001de4 <memcpy>
            data += len;
 402b494:	e0bff917 	ldw	r2,-28(fp)
 402b498:	1007883a 	mov	r3,r2
 402b49c:	e0bffd17 	ldw	r2,-12(fp)
 402b4a0:	10c5883a 	add	r2,r2,r3
 402b4a4:	e0bffd15 	stw	r2,-12(fp)
            *datalen = len;
 402b4a8:	e0fffe17 	ldw	r3,-8(fp)
 402b4ac:	e0bff917 	ldw	r2,-28(fp)
 402b4b0:	18800015 	stw	r2,0(r3)
            m = m_free(m);
 402b4b4:	e13ffa17 	ldw	r4,-24(fp)
 402b4b8:	4026b5c0 	call	4026b5c <m_free>
 402b4bc:	e0bffa15 	stw	r2,-24(fp)
         } while (*datalen && (error == 0) && m);
 402b4c0:	e0bffe17 	ldw	r2,-8(fp)
 402b4c4:	10800017 	ldw	r2,0(r2)
 402b4c8:	1005003a 	cmpeq	r2,r2,zero
 402b4cc:	1000061e 	bne	r2,zero,402b4e8 <soreceive+0x15c>
 402b4d0:	e0bff817 	ldw	r2,-32(fp)
 402b4d4:	1004c03a 	cmpne	r2,r2,zero
 402b4d8:	1000031e 	bne	r2,zero,402b4e8 <soreceive+0x15c>
 402b4dc:	e0bffa17 	ldw	r2,-24(fp)
 402b4e0:	1004c03a 	cmpne	r2,r2,zero
 402b4e4:	103fd91e 	bne	r2,zero,402b44c <soreceive+0xc0>
      }

      if (m)
 402b4e8:	e0bffa17 	ldw	r2,-24(fp)
 402b4ec:	1005003a 	cmpeq	r2,r2,zero
 402b4f0:	1000021e 	bne	r2,zero,402b4fc <soreceive+0x170>
         m_freem(m);
 402b4f4:	e13ffa17 	ldw	r4,-24(fp)
 402b4f8:	4026c900 	call	4026c90 <m_freem>
      return (error);
 402b4fc:	e0bff817 	ldw	r2,-32(fp)
 402b500:	e0bfff15 	stw	r2,-4(fp)
 402b504:	00019406 	br	402bb58 <soreceive+0x7cc>
   }

restart:
   sblock (&so->so_rcv);
 402b508:	e0bffb17 	ldw	r2,-20(fp)
 402b50c:	10801104 	addi	r2,r2,68
 402b510:	1009883a 	mov	r4,r2
 402b514:	40217880 	call	4021788 <tcp_sleep>
 402b518:	e0bffb17 	ldw	r2,-20(fp)
 402b51c:	1080110b 	ldhu	r2,68(r2)
 402b520:	10bfffcc 	andi	r2,r2,65535
 402b524:	1080004c 	andi	r2,r2,1
 402b528:	10803fcc 	andi	r2,r2,255
 402b52c:	1004c03a 	cmpne	r2,r2,zero
 402b530:	103ff51e 	bne	r2,zero,402b508 <soreceive+0x17c>
 402b534:	e0bffb17 	ldw	r2,-20(fp)
 402b538:	1080110b 	ldhu	r2,68(r2)
 402b53c:	10800054 	ori	r2,r2,1
 402b540:	1007883a 	mov	r3,r2
 402b544:	e0bffb17 	ldw	r2,-20(fp)
 402b548:	10c0110d 	sth	r3,68(r2)
   INET_TRACE (INETM_IO,
    ("INET:soreceive sbcc %d soerror %d so_state %d *datalen %d\n",
    so->so_rcv.sb_cc, so->so_error, so->so_state, *datalen));

   /* If no data is ready, see if we should wait or return */
   if (so->so_rcv.sb_cc == 0) 
 402b54c:	e0bffb17 	ldw	r2,-20(fp)
 402b550:	10800a17 	ldw	r2,40(r2)
 402b554:	1004c03a 	cmpne	r2,r2,zero
 402b558:	1000401e 	bne	r2,zero,402b65c <soreceive+0x2d0>
   {
      if (so->so_error) 
 402b55c:	e0bffb17 	ldw	r2,-20(fp)
 402b560:	10800617 	ldw	r2,24(r2)
 402b564:	1005003a 	cmpeq	r2,r2,zero
 402b568:	1000061e 	bne	r2,zero,402b584 <soreceive+0x1f8>
      {
         error = so->so_error;
 402b56c:	e0bffb17 	ldw	r2,-20(fp)
 402b570:	10800617 	ldw	r2,24(r2)
 402b574:	e0bff815 	stw	r2,-32(fp)
         so->so_error = 0;
 402b578:	e0bffb17 	ldw	r2,-20(fp)
 402b57c:	10000615 	stw	zero,24(r2)
         goto release;
 402b580:	00016806 	br	402bb24 <soreceive+0x798>
      }
      if (so->so_state & SS_CANTRCVMORE)
 402b584:	e0bffb17 	ldw	r2,-20(fp)
 402b588:	1080088b 	ldhu	r2,34(r2)
 402b58c:	10bfffcc 	andi	r2,r2,65535
 402b590:	1080080c 	andi	r2,r2,32
 402b594:	1004c03a 	cmpne	r2,r2,zero
 402b598:	1001621e 	bne	r2,zero,402bb24 <soreceive+0x798>
         goto release;
      if ((so->so_state & SS_ISCONNECTED) == 0 &&
 402b59c:	e0bffb17 	ldw	r2,-20(fp)
 402b5a0:	1080088b 	ldhu	r2,34(r2)
 402b5a4:	10bfffcc 	andi	r2,r2,65535
 402b5a8:	1080008c 	andi	r2,r2,2
 402b5ac:	1004c03a 	cmpne	r2,r2,zero
 402b5b0:	10000a1e 	bne	r2,zero,402b5dc <soreceive+0x250>
 402b5b4:	e0bffb17 	ldw	r2,-20(fp)
 402b5b8:	10800217 	ldw	r2,8(r2)
 402b5bc:	1080010b 	ldhu	r2,4(r2)
 402b5c0:	10bfffcc 	andi	r2,r2,65535
 402b5c4:	1080010c 	andi	r2,r2,4
 402b5c8:	1005003a 	cmpeq	r2,r2,zero
 402b5cc:	1000031e 	bne	r2,zero,402b5dc <soreceive+0x250>
          (so->so_proto->pr_flags & PR_CONNREQUIRED)) 
      {
         error = ENOTCONN;
 402b5d0:	00802004 	movi	r2,128
 402b5d4:	e0bff815 	stw	r2,-32(fp)
         goto release;
 402b5d8:	00015206 	br	402bb24 <soreceive+0x798>
      }
      if (*datalen == 0)
 402b5dc:	e0bffe17 	ldw	r2,-8(fp)
 402b5e0:	10800017 	ldw	r2,0(r2)
 402b5e4:	1005003a 	cmpeq	r2,r2,zero
 402b5e8:	10014e1e 	bne	r2,zero,402bb24 <soreceive+0x798>
         goto release;
      if ((so->so_state & SS_NBIO) || (flags & MSG_DONTWAIT)) 
 402b5ec:	e0bffb17 	ldw	r2,-20(fp)
 402b5f0:	1080088b 	ldhu	r2,34(r2)
 402b5f4:	10bfffcc 	andi	r2,r2,65535
 402b5f8:	1080400c 	andi	r2,r2,256
 402b5fc:	1004c03a 	cmpne	r2,r2,zero
 402b600:	1000041e 	bne	r2,zero,402b614 <soreceive+0x288>
 402b604:	e0800217 	ldw	r2,8(fp)
 402b608:	1080080c 	andi	r2,r2,32
 402b60c:	1005003a 	cmpeq	r2,r2,zero
 402b610:	1000031e 	bne	r2,zero,402b620 <soreceive+0x294>
      {
         error = EWOULDBLOCK;
 402b614:	008002c4 	movi	r2,11
 402b618:	e0bff815 	stw	r2,-32(fp)
         goto release;
 402b61c:	00014106 	br	402bb24 <soreceive+0x798>
      }
      sbunlock(&so->so_rcv);
 402b620:	e0bffb17 	ldw	r2,-20(fp)
 402b624:	10c0110b 	ldhu	r3,68(r2)
 402b628:	00bfff84 	movi	r2,-2
 402b62c:	1884703a 	and	r2,r3,r2
 402b630:	1007883a 	mov	r3,r2
 402b634:	e0bffb17 	ldw	r2,-20(fp)
 402b638:	10c0110d 	sth	r3,68(r2)
 402b63c:	e0bffb17 	ldw	r2,-20(fp)
 402b640:	10801104 	addi	r2,r2,68
 402b644:	1009883a 	mov	r4,r2
 402b648:	40219280 	call	4021928 <tcp_wakeup>
      sbwait(&so->so_rcv);
 402b64c:	e0bffb17 	ldw	r2,-20(fp)
 402b650:	11000a04 	addi	r4,r2,40
 402b654:	402cecc0 	call	402cecc <sbwait>
      goto restart;
 402b658:	003faf06 	br	402b518 <soreceive+0x18c>
   }
   m = so->so_rcv.sb_mb;
 402b65c:	e0bffb17 	ldw	r2,-20(fp)
 402b660:	10801017 	ldw	r2,64(r2)
 402b664:	e0bffa15 	stw	r2,-24(fp)
   if (m == 0)
 402b668:	e0bffa17 	ldw	r2,-24(fp)
 402b66c:	1004c03a 	cmpne	r2,r2,zero
 402b670:	1000031e 	bne	r2,zero,402b680 <soreceive+0x2f4>
      panic("sorecv 1");
 402b674:	01010174 	movhi	r4,1029
 402b678:	212e4f04 	addi	r4,r4,-18116
 402b67c:	4020e100 	call	4020e10 <panic>
   nextrecord = m->m_act;
 402b680:	e0bffa17 	ldw	r2,-24(fp)
 402b684:	10800717 	ldw	r2,28(r2)
 402b688:	e0bff515 	stw	r2,-44(fp)
   if (pr->pr_flags & PR_ADDR) 
 402b68c:	e0bff617 	ldw	r2,-40(fp)
 402b690:	1080010b 	ldhu	r2,4(r2)
 402b694:	10bfffcc 	andi	r2,r2,65535
 402b698:	1080008c 	andi	r2,r2,2
 402b69c:	1005003a 	cmpeq	r2,r2,zero
 402b6a0:	1000451e 	bne	r2,zero,402b7b8 <soreceive+0x42c>
   {
      if (m->m_type != MT_SONAME) 
 402b6a4:	e0bffa17 	ldw	r2,-24(fp)
 402b6a8:	10800817 	ldw	r2,32(r2)
 402b6ac:	10800260 	cmpeqi	r2,r2,9
 402b6b0:	1000081e 	bne	r2,zero,402b6d4 <soreceive+0x348>
      {
         dprintf ("sorecv:type %d not nam", m->m_type);
 402b6b4:	e0bffa17 	ldw	r2,-24(fp)
 402b6b8:	11400817 	ldw	r5,32(r2)
 402b6bc:	01010174 	movhi	r4,1029
 402b6c0:	212e5204 	addi	r4,r4,-18104
 402b6c4:	400207c0 	call	400207c <printf>
         panic("sorecv 2");
 402b6c8:	01010174 	movhi	r4,1029
 402b6cc:	212e5804 	addi	r4,r4,-18080
 402b6d0:	4020e100 	call	4020e10 <panic>
      }
      if (flags & MSG_PEEK) 
 402b6d4:	e0800217 	ldw	r2,8(fp)
 402b6d8:	1080008c 	andi	r2,r2,2
 402b6dc:	1005003a 	cmpeq	r2,r2,zero
 402b6e0:	1000101e 	bne	r2,zero,402b724 <soreceive+0x398>
      {
         if (aname)
 402b6e4:	e0bffc17 	ldw	r2,-16(fp)
 402b6e8:	1005003a 	cmpeq	r2,r2,zero
 402b6ec:	1000091e 	bne	r2,zero,402b714 <soreceive+0x388>
            *aname = m_copy (m, 0, m->m_len);
 402b6f0:	e0bffa17 	ldw	r2,-24(fp)
 402b6f4:	10800217 	ldw	r2,8(r2)
 402b6f8:	100d883a 	mov	r6,r2
 402b6fc:	e13ffa17 	ldw	r4,-24(fp)
 402b700:	000b883a 	mov	r5,zero
 402b704:	4026cd40 	call	4026cd4 <m_copy>
 402b708:	1007883a 	mov	r3,r2
 402b70c:	e0bffc17 	ldw	r2,-16(fp)
 402b710:	10c00015 	stw	r3,0(r2)
         m = m->m_next;
 402b714:	e0bffa17 	ldw	r2,-24(fp)
 402b718:	10800617 	ldw	r2,24(r2)
 402b71c:	e0bffa15 	stw	r2,-24(fp)
 402b720:	00002506 	br	402b7b8 <soreceive+0x42c>
      } else 
      {
         sbfree (&so->so_rcv, m);
 402b724:	e0bffb17 	ldw	r2,-20(fp)
 402b728:	10c00a17 	ldw	r3,40(r2)
 402b72c:	e0bffa17 	ldw	r2,-24(fp)
 402b730:	10800217 	ldw	r2,8(r2)
 402b734:	1887c83a 	sub	r3,r3,r2
 402b738:	e0bffb17 	ldw	r2,-20(fp)
 402b73c:	10c00a15 	stw	r3,40(r2)
         if (aname) 
 402b740:	e0bffc17 	ldw	r2,-16(fp)
 402b744:	1005003a 	cmpeq	r2,r2,zero
 402b748:	10000d1e 	bne	r2,zero,402b780 <soreceive+0x3f4>
         {
            *aname = m;
 402b74c:	e0fffc17 	ldw	r3,-16(fp)
 402b750:	e0bffa17 	ldw	r2,-24(fp)
 402b754:	18800015 	stw	r2,0(r3)
            m = m->m_next;
 402b758:	e0bffa17 	ldw	r2,-24(fp)
 402b75c:	10800617 	ldw	r2,24(r2)
 402b760:	e0bffa15 	stw	r2,-24(fp)
            (*aname)->m_next = 0;
 402b764:	e0bffc17 	ldw	r2,-16(fp)
 402b768:	10800017 	ldw	r2,0(r2)
 402b76c:	10000615 	stw	zero,24(r2)
            so->so_rcv.sb_mb = m;
 402b770:	e0fffb17 	ldw	r3,-20(fp)
 402b774:	e0bffa17 	ldw	r2,-24(fp)
 402b778:	18801015 	stw	r2,64(r3)
 402b77c:	00000806 	br	402b7a0 <soreceive+0x414>
         } else 
         {
            MFREE(m, so->so_rcv.sb_mb);
 402b780:	e13ffa17 	ldw	r4,-24(fp)
 402b784:	4026b5c0 	call	4026b5c <m_free>
 402b788:	1007883a 	mov	r3,r2
 402b78c:	e0bffb17 	ldw	r2,-20(fp)
 402b790:	10c01015 	stw	r3,64(r2)
            m = so->so_rcv.sb_mb;
 402b794:	e0bffb17 	ldw	r2,-20(fp)
 402b798:	10801017 	ldw	r2,64(r2)
 402b79c:	e0bffa15 	stw	r2,-24(fp)
         }
         if (m)
 402b7a0:	e0bffa17 	ldw	r2,-24(fp)
 402b7a4:	1005003a 	cmpeq	r2,r2,zero
 402b7a8:	1000031e 	bne	r2,zero,402b7b8 <soreceive+0x42c>
            m->m_act = nextrecord;
 402b7ac:	e0fffa17 	ldw	r3,-24(fp)
 402b7b0:	e0bff517 	ldw	r2,-44(fp)
 402b7b4:	18800715 	stw	r2,28(r3)
      }
   }
   moff = 0;
 402b7b8:	e03ff415 	stw	zero,-48(fp)
   offset = 0;
 402b7bc:	e03ff715 	stw	zero,-36(fp)
   while (m && (*datalen > 0) && (error == 0))
 402b7c0:	0000a606 	br	402ba5c <soreceive+0x6d0>
   {
      if (m->m_type != MT_RXDATA && m->m_type != MT_HEADER)
 402b7c4:	e0bffa17 	ldw	r2,-24(fp)
 402b7c8:	10800817 	ldw	r2,32(r2)
 402b7cc:	10800060 	cmpeqi	r2,r2,1
 402b7d0:	1000071e 	bne	r2,zero,402b7f0 <soreceive+0x464>
 402b7d4:	e0bffa17 	ldw	r2,-24(fp)
 402b7d8:	10800817 	ldw	r2,32(r2)
 402b7dc:	108000e0 	cmpeqi	r2,r2,3
 402b7e0:	1000031e 	bne	r2,zero,402b7f0 <soreceive+0x464>
         panic("sorecv 3");
 402b7e4:	01010174 	movhi	r4,1029
 402b7e8:	212e5b04 	addi	r4,r4,-18068
 402b7ec:	4020e100 	call	4020e10 <panic>
      len = *datalen;
 402b7f0:	e0bffe17 	ldw	r2,-8(fp)
 402b7f4:	10800017 	ldw	r2,0(r2)
 402b7f8:	e0bff915 	stw	r2,-28(fp)
      so->so_state &= ~SS_RCVATMARK;
 402b7fc:	e0bffb17 	ldw	r2,-20(fp)
 402b800:	10c0088b 	ldhu	r3,34(r2)
 402b804:	00bfefc4 	movi	r2,-65
 402b808:	1884703a 	and	r2,r3,r2
 402b80c:	1007883a 	mov	r3,r2
 402b810:	e0bffb17 	ldw	r2,-20(fp)
 402b814:	10c0088d 	sth	r3,34(r2)
      if (so->so_oobmark && (len > (int)(so->so_oobmark - offset)))
 402b818:	e0bffb17 	ldw	r2,-20(fp)
 402b81c:	10801a17 	ldw	r2,104(r2)
 402b820:	1005003a 	cmpeq	r2,r2,zero
 402b824:	10000c1e 	bne	r2,zero,402b858 <soreceive+0x4cc>
 402b828:	e0bffb17 	ldw	r2,-20(fp)
 402b82c:	10c01a17 	ldw	r3,104(r2)
 402b830:	e0bff717 	ldw	r2,-36(fp)
 402b834:	1885c83a 	sub	r2,r3,r2
 402b838:	1007883a 	mov	r3,r2
 402b83c:	e0bff917 	ldw	r2,-28(fp)
 402b840:	1880050e 	bge	r3,r2,402b858 <soreceive+0x4cc>
         len = (int)(so->so_oobmark - offset);
 402b844:	e0bffb17 	ldw	r2,-20(fp)
 402b848:	10c01a17 	ldw	r3,104(r2)
 402b84c:	e0bff717 	ldw	r2,-36(fp)
 402b850:	1885c83a 	sub	r2,r3,r2
 402b854:	e0bff915 	stw	r2,-28(fp)
      if (len > (int)(m->m_len - moff))
 402b858:	e0bffa17 	ldw	r2,-24(fp)
 402b85c:	10c00217 	ldw	r3,8(r2)
 402b860:	e0bff417 	ldw	r2,-48(fp)
 402b864:	1885c83a 	sub	r2,r3,r2
 402b868:	1007883a 	mov	r3,r2
 402b86c:	e0bff917 	ldw	r2,-28(fp)
 402b870:	1880050e 	bge	r3,r2,402b888 <soreceive+0x4fc>
         len = m->m_len - moff;
 402b874:	e0bffa17 	ldw	r2,-24(fp)
 402b878:	10c00217 	ldw	r3,8(r2)
 402b87c:	e0bff417 	ldw	r2,-48(fp)
 402b880:	1885c83a 	sub	r2,r3,r2
 402b884:	e0bff915 	stw	r2,-28(fp)
       * it points to next record) when we drop priority;
       * we must note any additions to the sockbuf when we
       * block interrupts again.
       */

      MEMCPY(data, (mtod(m, char *) + moff), len);
 402b888:	e0bffa17 	ldw	r2,-24(fp)
 402b88c:	10c00317 	ldw	r3,12(r2)
 402b890:	e0bff417 	ldw	r2,-48(fp)
 402b894:	1887883a 	add	r3,r3,r2
 402b898:	e1bff917 	ldw	r6,-28(fp)
 402b89c:	e0bffd17 	ldw	r2,-12(fp)
 402b8a0:	1009883a 	mov	r4,r2
 402b8a4:	180b883a 	mov	r5,r3
 402b8a8:	4001de40 	call	4001de4 <memcpy>
      data += len;
 402b8ac:	e0bff917 	ldw	r2,-28(fp)
 402b8b0:	1007883a 	mov	r3,r2
 402b8b4:	e0bffd17 	ldw	r2,-12(fp)
 402b8b8:	10c5883a 	add	r2,r2,r3
 402b8bc:	e0bffd15 	stw	r2,-12(fp)
      *datalen -= len;
 402b8c0:	e0bffe17 	ldw	r2,-8(fp)
 402b8c4:	10c00017 	ldw	r3,0(r2)
 402b8c8:	e0bff917 	ldw	r2,-28(fp)
 402b8cc:	1887c83a 	sub	r3,r3,r2
 402b8d0:	e0bffe17 	ldw	r2,-8(fp)
 402b8d4:	10c00015 	stw	r3,0(r2)

      if (len == (int)(m->m_len - moff))
 402b8d8:	e0bffa17 	ldw	r2,-24(fp)
 402b8dc:	10c00217 	ldw	r3,8(r2)
 402b8e0:	e0bff417 	ldw	r2,-48(fp)
 402b8e4:	1885c83a 	sub	r2,r3,r2
 402b8e8:	1007883a 	mov	r3,r2
 402b8ec:	e0bff917 	ldw	r2,-28(fp)
 402b8f0:	1880221e 	bne	r3,r2,402b97c <soreceive+0x5f0>
      {
         if (flags & MSG_PEEK) 
 402b8f4:	e0800217 	ldw	r2,8(fp)
 402b8f8:	1080008c 	andi	r2,r2,2
 402b8fc:	1005003a 	cmpeq	r2,r2,zero
 402b900:	1000051e 	bne	r2,zero,402b918 <soreceive+0x58c>
         {
            m = m->m_next;
 402b904:	e0bffa17 	ldw	r2,-24(fp)
 402b908:	10800617 	ldw	r2,24(r2)
 402b90c:	e0bffa15 	stw	r2,-24(fp)
            moff = 0;
 402b910:	e03ff415 	stw	zero,-48(fp)
 402b914:	00003406 	br	402b9e8 <soreceive+0x65c>
         } else 
         {
            nextrecord = m->m_act;
 402b918:	e0bffa17 	ldw	r2,-24(fp)
 402b91c:	10800717 	ldw	r2,28(r2)
 402b920:	e0bff515 	stw	r2,-44(fp)
            sbfree(&so->so_rcv, m);
 402b924:	e0bffb17 	ldw	r2,-20(fp)
 402b928:	10c00a17 	ldw	r3,40(r2)
 402b92c:	e0bffa17 	ldw	r2,-24(fp)
 402b930:	10800217 	ldw	r2,8(r2)
 402b934:	1887c83a 	sub	r3,r3,r2
 402b938:	e0bffb17 	ldw	r2,-20(fp)
 402b93c:	10c00a15 	stw	r3,40(r2)
            {
               MFREE(m, so->so_rcv.sb_mb);
 402b940:	e13ffa17 	ldw	r4,-24(fp)
 402b944:	4026b5c0 	call	4026b5c <m_free>
 402b948:	1007883a 	mov	r3,r2
 402b94c:	e0bffb17 	ldw	r2,-20(fp)
 402b950:	10c01015 	stw	r3,64(r2)
               m = so->so_rcv.sb_mb;
 402b954:	e0bffb17 	ldw	r2,-20(fp)
 402b958:	10801017 	ldw	r2,64(r2)
 402b95c:	e0bffa15 	stw	r2,-24(fp)
            }
            if (m)
 402b960:	e0bffa17 	ldw	r2,-24(fp)
 402b964:	1005003a 	cmpeq	r2,r2,zero
 402b968:	10001f1e 	bne	r2,zero,402b9e8 <soreceive+0x65c>
               m->m_act = nextrecord;
 402b96c:	e0fffa17 	ldw	r3,-24(fp)
 402b970:	e0bff517 	ldw	r2,-44(fp)
 402b974:	18800715 	stw	r2,28(r3)
 402b978:	00001b06 	br	402b9e8 <soreceive+0x65c>
         }
      } else 
      {
         if (flags & MSG_PEEK)
 402b97c:	e0800217 	ldw	r2,8(fp)
 402b980:	1080008c 	andi	r2,r2,2
 402b984:	1005003a 	cmpeq	r2,r2,zero
 402b988:	1000051e 	bne	r2,zero,402b9a0 <soreceive+0x614>
            moff += len;
 402b98c:	e0bff417 	ldw	r2,-48(fp)
 402b990:	e0fff917 	ldw	r3,-28(fp)
 402b994:	10c5883a 	add	r2,r2,r3
 402b998:	e0bff415 	stw	r2,-48(fp)
 402b99c:	00001206 	br	402b9e8 <soreceive+0x65c>
         else 
         {
            m->m_data += len;
 402b9a0:	e0bffa17 	ldw	r2,-24(fp)
 402b9a4:	10c00317 	ldw	r3,12(r2)
 402b9a8:	e0bff917 	ldw	r2,-28(fp)
 402b9ac:	1887883a 	add	r3,r3,r2
 402b9b0:	e0bffa17 	ldw	r2,-24(fp)
 402b9b4:	10c00315 	stw	r3,12(r2)
            m->m_len -= len;
 402b9b8:	e0bffa17 	ldw	r2,-24(fp)
 402b9bc:	10c00217 	ldw	r3,8(r2)
 402b9c0:	e0bff917 	ldw	r2,-28(fp)
 402b9c4:	1887c83a 	sub	r3,r3,r2
 402b9c8:	e0bffa17 	ldw	r2,-24(fp)
 402b9cc:	10c00215 	stw	r3,8(r2)
            so->so_rcv.sb_cc -= len;
 402b9d0:	e0bffb17 	ldw	r2,-20(fp)
 402b9d4:	10c00a17 	ldw	r3,40(r2)
 402b9d8:	e0bff917 	ldw	r2,-28(fp)
 402b9dc:	1887c83a 	sub	r3,r3,r2
 402b9e0:	e0bffb17 	ldw	r2,-20(fp)
 402b9e4:	10c00a15 	stw	r3,40(r2)
         }
      }
      if (so->so_oobmark) 
 402b9e8:	e0bffb17 	ldw	r2,-20(fp)
 402b9ec:	10801a17 	ldw	r2,104(r2)
 402b9f0:	1005003a 	cmpeq	r2,r2,zero
 402b9f4:	1000191e 	bne	r2,zero,402ba5c <soreceive+0x6d0>
      {
         if ((flags & MSG_PEEK) == 0) 
 402b9f8:	e0800217 	ldw	r2,8(fp)
 402b9fc:	1080008c 	andi	r2,r2,2
 402ba00:	1004c03a 	cmpne	r2,r2,zero
 402ba04:	1000111e 	bne	r2,zero,402ba4c <soreceive+0x6c0>
         {
            so->so_oobmark -= len;
 402ba08:	e0bffb17 	ldw	r2,-20(fp)
 402ba0c:	10c01a17 	ldw	r3,104(r2)
 402ba10:	e0bff917 	ldw	r2,-28(fp)
 402ba14:	1887c83a 	sub	r3,r3,r2
 402ba18:	e0bffb17 	ldw	r2,-20(fp)
 402ba1c:	10c01a15 	stw	r3,104(r2)
            if (so->so_oobmark == 0) 
 402ba20:	e0bffb17 	ldw	r2,-20(fp)
 402ba24:	10801a17 	ldw	r2,104(r2)
 402ba28:	1004c03a 	cmpne	r2,r2,zero
 402ba2c:	10000b1e 	bne	r2,zero,402ba5c <soreceive+0x6d0>
            {
               so->so_state |= SS_RCVATMARK;
 402ba30:	e0bffb17 	ldw	r2,-20(fp)
 402ba34:	1080088b 	ldhu	r2,34(r2)
 402ba38:	10801014 	ori	r2,r2,64
 402ba3c:	1007883a 	mov	r3,r2
 402ba40:	e0bffb17 	ldw	r2,-20(fp)
 402ba44:	10c0088d 	sth	r3,34(r2)
               break;
 402ba48:	00000e06 	br	402ba84 <soreceive+0x6f8>
            }
         } else
            offset += len;
 402ba4c:	e0bff717 	ldw	r2,-36(fp)
 402ba50:	e0fff917 	ldw	r3,-28(fp)
 402ba54:	10c5883a 	add	r2,r2,r3
 402ba58:	e0bff715 	stw	r2,-36(fp)
            m->m_act = nextrecord;
      }
   }
   moff = 0;
   offset = 0;
   while (m && (*datalen > 0) && (error == 0))
 402ba5c:	e0bffa17 	ldw	r2,-24(fp)
 402ba60:	1005003a 	cmpeq	r2,r2,zero
 402ba64:	1000071e 	bne	r2,zero,402ba84 <soreceive+0x6f8>
 402ba68:	e0bffe17 	ldw	r2,-8(fp)
 402ba6c:	10800017 	ldw	r2,0(r2)
 402ba70:	10800050 	cmplti	r2,r2,1
 402ba74:	1000031e 	bne	r2,zero,402ba84 <soreceive+0x6f8>
 402ba78:	e0bff817 	ldw	r2,-32(fp)
 402ba7c:	1005003a 	cmpeq	r2,r2,zero
 402ba80:	103f501e 	bne	r2,zero,402b7c4 <soreceive+0x438>
         } else
            offset += len;
      }
   }

   if ((flags & MSG_PEEK) == 0) 
 402ba84:	e0800217 	ldw	r2,8(fp)
 402ba88:	1080008c 	andi	r2,r2,2
 402ba8c:	1004c03a 	cmpne	r2,r2,zero
 402ba90:	1000241e 	bne	r2,zero,402bb24 <soreceive+0x798>
   {
      if (m == 0)
 402ba94:	e0bffa17 	ldw	r2,-24(fp)
 402ba98:	1004c03a 	cmpne	r2,r2,zero
 402ba9c:	1000041e 	bne	r2,zero,402bab0 <soreceive+0x724>
         so->so_rcv.sb_mb = nextrecord;
 402baa0:	e0fffb17 	ldw	r3,-20(fp)
 402baa4:	e0bff517 	ldw	r2,-44(fp)
 402baa8:	18801015 	stw	r2,64(r3)
 402baac:	00000a06 	br	402bad8 <soreceive+0x74c>
      else if (pr->pr_flags & PR_ATOMIC)
 402bab0:	e0bff617 	ldw	r2,-40(fp)
 402bab4:	1080010b 	ldhu	r2,4(r2)
 402bab8:	10bfffcc 	andi	r2,r2,65535
 402babc:	1080004c 	andi	r2,r2,1
 402bac0:	10803fcc 	andi	r2,r2,255
 402bac4:	1005003a 	cmpeq	r2,r2,zero
 402bac8:	1000031e 	bne	r2,zero,402bad8 <soreceive+0x74c>
         (void) sbdroprecord(&so->so_rcv);
 402bacc:	e0bffb17 	ldw	r2,-20(fp)
 402bad0:	11000a04 	addi	r4,r2,40
 402bad4:	402d9e00 	call	402d9e0 <sbdroprecord>
      if (pr->pr_flags & PR_WANTRCVD && so->so_pcb)
 402bad8:	e0bff617 	ldw	r2,-40(fp)
 402badc:	1080010b 	ldhu	r2,4(r2)
 402bae0:	10bfffcc 	andi	r2,r2,65535
 402bae4:	1080020c 	andi	r2,r2,8
 402bae8:	1005003a 	cmpeq	r2,r2,zero
 402baec:	10000d1e 	bne	r2,zero,402bb24 <soreceive+0x798>
 402baf0:	e0bffb17 	ldw	r2,-20(fp)
 402baf4:	10800117 	ldw	r2,4(r2)
 402baf8:	1005003a 	cmpeq	r2,r2,zero
 402bafc:	1000091e 	bne	r2,zero,402bb24 <soreceive+0x798>
      {
         so->so_req = PRU_RCVD;
 402bb00:	e0fffb17 	ldw	r3,-20(fp)
 402bb04:	00800204 	movi	r2,8
 402bb08:	18800715 	stw	r2,28(r3)
         (*pr->pr_usrreq)(so, (struct mbuf *)0,
 402bb0c:	e0bff617 	ldw	r2,-40(fp)
 402bb10:	10800317 	ldw	r2,12(r2)
 402bb14:	e13ffb17 	ldw	r4,-20(fp)
 402bb18:	000b883a 	mov	r5,zero
 402bb1c:	000d883a 	mov	r6,zero
 402bb20:	103ee83a 	callr	r2
          (struct mbuf *)0);
      }
   }
release:
   sbunlock(&so->so_rcv);
 402bb24:	e0bffb17 	ldw	r2,-20(fp)
 402bb28:	10c0110b 	ldhu	r3,68(r2)
 402bb2c:	00bfff84 	movi	r2,-2
 402bb30:	1884703a 	and	r2,r3,r2
 402bb34:	1007883a 	mov	r3,r2
 402bb38:	e0bffb17 	ldw	r2,-20(fp)
 402bb3c:	10c0110d 	sth	r3,68(r2)
 402bb40:	e0bffb17 	ldw	r2,-20(fp)
 402bb44:	10801104 	addi	r2,r2,68
 402bb48:	1009883a 	mov	r4,r2
 402bb4c:	40219280 	call	4021928 <tcp_wakeup>
   return (error);
 402bb50:	e0bff817 	ldw	r2,-32(fp)
 402bb54:	e0bfff15 	stw	r2,-4(fp)
 402bb58:	e0bfff17 	ldw	r2,-4(fp)
}
 402bb5c:	e037883a 	mov	sp,fp
 402bb60:	dfc00117 	ldw	ra,4(sp)
 402bb64:	df000017 	ldw	fp,0(sp)
 402bb68:	dec00204 	addi	sp,sp,8
 402bb6c:	f800283a 	ret

0402bb70 <soshutdown>:
 *
 * RETURNS: int               0 if successful, else error code
 */
int
soshutdown(struct socket *so, int how)
{
 402bb70:	defffb04 	addi	sp,sp,-20
 402bb74:	dfc00415 	stw	ra,16(sp)
 402bb78:	df000315 	stw	fp,12(sp)
 402bb7c:	df000304 	addi	fp,sp,12
 402bb80:	e13ffd15 	stw	r4,-12(fp)
 402bb84:	e17ffe15 	stw	r5,-8(fp)
   how++;   /* convert 0,1,2 into 1,2,3 */
 402bb88:	e0bffe17 	ldw	r2,-8(fp)
 402bb8c:	10800044 	addi	r2,r2,1
 402bb90:	e0bffe15 	stw	r2,-8(fp)
   if (how & 1)   /* caller wanted READ or BOTH */
 402bb94:	e0bffe17 	ldw	r2,-8(fp)
 402bb98:	1080004c 	andi	r2,r2,1
 402bb9c:	10803fcc 	andi	r2,r2,255
 402bba0:	1005003a 	cmpeq	r2,r2,zero
 402bba4:	1000021e 	bne	r2,zero,402bbb0 <soshutdown+0x40>
      sorflush(so);
 402bba8:	e13ffd17 	ldw	r4,-12(fp)
 402bbac:	402bc180 	call	402bc18 <sorflush>

   if (how & 2)   /* caller wanted WRITE or BOTH */
 402bbb0:	e0bffe17 	ldw	r2,-8(fp)
 402bbb4:	1080008c 	andi	r2,r2,2
 402bbb8:	1005003a 	cmpeq	r2,r2,zero
 402bbbc:	10000f1e 	bne	r2,zero,402bbfc <soshutdown+0x8c>
   {
      sbflush(&so->so_snd); /* flush the socket send queue */
 402bbc0:	e0bffd17 	ldw	r2,-12(fp)
 402bbc4:	11001204 	addi	r4,r2,72
 402bbc8:	402d6700 	call	402d670 <sbflush>
      so->so_req = PRU_SHUTDOWN;
 402bbcc:	e0fffd17 	ldw	r3,-12(fp)
 402bbd0:	008001c4 	movi	r2,7
 402bbd4:	18800715 	stw	r2,28(r3)
      return ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0));
 402bbd8:	e0bffd17 	ldw	r2,-12(fp)
 402bbdc:	10800217 	ldw	r2,8(r2)
 402bbe0:	10800317 	ldw	r2,12(r2)
 402bbe4:	e13ffd17 	ldw	r4,-12(fp)
 402bbe8:	000b883a 	mov	r5,zero
 402bbec:	000d883a 	mov	r6,zero
 402bbf0:	103ee83a 	callr	r2
 402bbf4:	e0bfff15 	stw	r2,-4(fp)
 402bbf8:	00000106 	br	402bc00 <soshutdown+0x90>
   }

   return 0;
 402bbfc:	e03fff15 	stw	zero,-4(fp)
 402bc00:	e0bfff17 	ldw	r2,-4(fp)
}
 402bc04:	e037883a 	mov	sp,fp
 402bc08:	dfc00117 	ldw	ra,4(sp)
 402bc0c:	df000017 	ldw	fp,0(sp)
 402bc10:	dec00204 	addi	sp,sp,8
 402bc14:	f800283a 	ret

0402bc18 <sorflush>:
 * socket receive buffer is discarded. Wakeup any processes waiting
 * on the socket.
 */
void
sorflush(struct socket * so)
{
 402bc18:	defffb04 	addi	sp,sp,-20
 402bc1c:	dfc00415 	stw	ra,16(sp)
 402bc20:	df000315 	stw	fp,12(sp)
 402bc24:	df000304 	addi	fp,sp,12
 402bc28:	e13fff15 	stw	r4,-4(fp)
   struct sockbuf *sb =  &so->so_rcv;
 402bc2c:	e0bfff17 	ldw	r2,-4(fp)
 402bc30:	10800a04 	addi	r2,r2,40
 402bc34:	e0bffe15 	stw	r2,-8(fp)
   int   s;

   sblock(sb);
 402bc38:	00000406 	br	402bc4c <sorflush+0x34>
 402bc3c:	e0bffe17 	ldw	r2,-8(fp)
 402bc40:	10800704 	addi	r2,r2,28
 402bc44:	1009883a 	mov	r4,r2
 402bc48:	40217880 	call	4021788 <tcp_sleep>
 402bc4c:	e0bffe17 	ldw	r2,-8(fp)
 402bc50:	1080070b 	ldhu	r2,28(r2)
 402bc54:	10bfffcc 	andi	r2,r2,65535
 402bc58:	1080004c 	andi	r2,r2,1
 402bc5c:	10803fcc 	andi	r2,r2,255
 402bc60:	1004c03a 	cmpne	r2,r2,zero
 402bc64:	103ff51e 	bne	r2,zero,402bc3c <sorflush+0x24>
 402bc68:	e0bffe17 	ldw	r2,-8(fp)
 402bc6c:	1080070b 	ldhu	r2,28(r2)
 402bc70:	10800054 	ori	r2,r2,1
 402bc74:	1007883a 	mov	r3,r2
 402bc78:	e0bffe17 	ldw	r2,-8(fp)
 402bc7c:	10c0070d 	sth	r3,28(r2)
   socantrcvmore(so);
 402bc80:	e13fff17 	ldw	r4,-4(fp)
 402bc84:	402ce440 	call	402ce44 <socantrcvmore>
   sbunlock(sb);
 402bc88:	e0bffe17 	ldw	r2,-8(fp)
 402bc8c:	10c0070b 	ldhu	r3,28(r2)
 402bc90:	00bfff84 	movi	r2,-2
 402bc94:	1884703a 	and	r2,r3,r2
 402bc98:	1007883a 	mov	r3,r2
 402bc9c:	e0bffe17 	ldw	r2,-8(fp)
 402bca0:	10c0070d 	sth	r3,28(r2)
 402bca4:	e0bffe17 	ldw	r2,-8(fp)
 402bca8:	10800704 	addi	r2,r2,28
 402bcac:	1009883a 	mov	r4,r2
 402bcb0:	40219280 	call	4021928 <tcp_wakeup>
   sbrelease(sb);
 402bcb4:	e13ffe17 	ldw	r4,-8(fp)
 402bcb8:	402d0b00 	call	402d0b0 <sbrelease>
   MEMSET((char *)sb, 0, sizeof (*sb));
 402bcbc:	e0bffe17 	ldw	r2,-8(fp)
 402bcc0:	1009883a 	mov	r4,r2
 402bcc4:	01800804 	movi	r6,32
 402bcc8:	000b883a 	mov	r5,zero
 402bccc:	4001f640 	call	4001f64 <memset>
   s = so->so_error;
 402bcd0:	e0bfff17 	ldw	r2,-4(fp)
 402bcd4:	10800617 	ldw	r2,24(r2)
 402bcd8:	e0bffd15 	stw	r2,-12(fp)
   so->so_error = ESHUTDOWN;
 402bcdc:	e0ffff17 	ldw	r3,-4(fp)
 402bce0:	00801b84 	movi	r2,110
 402bce4:	18800615 	stw	r2,24(r3)
   sorwakeup(so);
 402bce8:	e0bfff17 	ldw	r2,-4(fp)
 402bcec:	11400a04 	addi	r5,r2,40
 402bcf0:	e13fff17 	ldw	r4,-4(fp)
 402bcf4:	402cf340 	call	402cf34 <sbwakeup>
   so->so_error = s;
 402bcf8:	e0ffff17 	ldw	r3,-4(fp)
 402bcfc:	e0bffd17 	ldw	r2,-12(fp)
 402bd00:	18800615 	stw	r2,24(r3)
}
 402bd04:	e037883a 	mov	sp,fp
 402bd08:	dfc00117 	ldw	ra,4(sp)
 402bd0c:	df000017 	ldw	fp,0(sp)
 402bd10:	dec00204 	addi	sp,sp,8
 402bd14:	f800283a 	ret

0402bd18 <sosetopt>:

int
sosetopt(struct socket * so, 
   int   optname,
   void *   arg)
{
 402bd18:	defff404 	addi	sp,sp,-48
 402bd1c:	dfc00b15 	stw	ra,44(sp)
 402bd20:	df000a15 	stw	fp,40(sp)
 402bd24:	df000a04 	addi	fp,sp,40
 402bd28:	e13ffb15 	stw	r4,-20(fp)
 402bd2c:	e17ffc15 	stw	r5,-16(fp)
 402bd30:	e1bffd15 	stw	r6,-12(fp)
   int   error =  0;
 402bd34:	e03ffa15 	stw	zero,-24(fp)

   switch (optname) 
 402bd38:	e0bffc17 	ldw	r2,-16(fp)
 402bd3c:	e0bfff15 	stw	r2,-4(fp)
 402bd40:	e0ffff17 	ldw	r3,-4(fp)
 402bd44:	18808020 	cmpeqi	r2,r3,512
 402bd48:	1000521e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402bd4c:	e0ffff17 	ldw	r3,-4(fp)
 402bd50:	18808048 	cmpgei	r2,r3,513
 402bd54:	1000211e 	bne	r2,zero,402bddc <sosetopt+0xc4>
 402bd58:	e0ffff17 	ldw	r3,-4(fp)
 402bd5c:	18800388 	cmpgei	r2,r3,14
 402bd60:	10000d1e 	bne	r2,zero,402bd98 <sosetopt+0x80>
 402bd64:	e0ffff17 	ldw	r3,-4(fp)
 402bd68:	18800248 	cmpgei	r2,r3,9
 402bd6c:	10009d1e 	bne	r2,zero,402bfe4 <sosetopt+0x2cc>
 402bd70:	e0ffff17 	ldw	r3,-4(fp)
 402bd74:	18800120 	cmpeqi	r2,r3,4
 402bd78:	1000461e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402bd7c:	e0ffff17 	ldw	r3,-4(fp)
 402bd80:	18800220 	cmpeqi	r2,r3,8
 402bd84:	1000431e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402bd88:	e0ffff17 	ldw	r3,-4(fp)
 402bd8c:	188000a0 	cmpeqi	r2,r3,2
 402bd90:	10009a1e 	bne	r2,zero,402bffc <sosetopt+0x2e4>
 402bd94:	00010806 	br	402c1b8 <sosetopt+0x4a0>
 402bd98:	e0ffff17 	ldw	r3,-4(fp)
 402bd9c:	18800820 	cmpeqi	r2,r3,32
 402bda0:	10003c1e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402bda4:	e0ffff17 	ldw	r3,-4(fp)
 402bda8:	18800848 	cmpgei	r2,r3,33
 402bdac:	1000041e 	bne	r2,zero,402bdc0 <sosetopt+0xa8>
 402bdb0:	e0ffff17 	ldw	r3,-4(fp)
 402bdb4:	18800420 	cmpeqi	r2,r3,16
 402bdb8:	1000361e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402bdbc:	0000fe06 	br	402c1b8 <sosetopt+0x4a0>
 402bdc0:	e0ffff17 	ldw	r3,-4(fp)
 402bdc4:	18802020 	cmpeqi	r2,r3,128
 402bdc8:	10002d1e 	bne	r2,zero,402be80 <sosetopt+0x168>
 402bdcc:	e0ffff17 	ldw	r3,-4(fp)
 402bdd0:	18804020 	cmpeqi	r2,r3,256
 402bdd4:	10002f1e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402bdd8:	0000f706 	br	402c1b8 <sosetopt+0x4a0>
 402bddc:	e0ffff17 	ldw	r3,-4(fp)
 402bde0:	18840520 	cmpeqi	r2,r3,4116
 402bde4:	1000571e 	bne	r2,zero,402bf44 <sosetopt+0x22c>
 402bde8:	e0ffff17 	ldw	r3,-4(fp)
 402bdec:	18840548 	cmpgei	r2,r3,4117
 402bdf0:	10000f1e 	bne	r2,zero,402be30 <sosetopt+0x118>
 402bdf4:	e0ffff17 	ldw	r3,-4(fp)
 402bdf8:	188401a0 	cmpeqi	r2,r3,4102
 402bdfc:	10004c1e 	bne	r2,zero,402bf30 <sosetopt+0x218>
 402be00:	e0ffff17 	ldw	r3,-4(fp)
 402be04:	188401c8 	cmpgei	r2,r3,4103
 402be08:	1000051e 	bne	r2,zero,402be20 <sosetopt+0x108>
 402be0c:	e0ffff17 	ldw	r3,-4(fp)
 402be10:	18bbffc4 	addi	r2,r3,-4097
 402be14:	108000a8 	cmpgeui	r2,r2,2
 402be18:	1000e71e 	bne	r2,zero,402c1b8 <sosetopt+0x4a0>
 402be1c:	00003006 	br	402bee0 <sosetopt+0x1c8>
 402be20:	e0ffff17 	ldw	r3,-4(fp)
 402be24:	18840420 	cmpeqi	r2,r3,4112
 402be28:	1000ba1e 	bne	r2,zero,402c114 <sosetopt+0x3fc>
 402be2c:	0000e206 	br	402c1b8 <sosetopt+0x4a0>
 402be30:	e0ffff17 	ldw	r3,-4(fp)
 402be34:	188800e0 	cmpeqi	r2,r3,8195
 402be38:	1000b61e 	bne	r2,zero,402c114 <sosetopt+0x3fc>
 402be3c:	e0ffff17 	ldw	r3,-4(fp)
 402be40:	18880108 	cmpgei	r2,r3,8196
 402be44:	1000071e 	bne	r2,zero,402be64 <sosetopt+0x14c>
 402be48:	e0ffff17 	ldw	r3,-4(fp)
 402be4c:	18840560 	cmpeqi	r2,r3,4117
 402be50:	1000431e 	bne	r2,zero,402bf60 <sosetopt+0x248>
 402be54:	e0ffff17 	ldw	r3,-4(fp)
 402be58:	188405a0 	cmpeqi	r2,r3,4118
 402be5c:	1000481e 	bne	r2,zero,402bf80 <sosetopt+0x268>
 402be60:	0000d506 	br	402c1b8 <sosetopt+0x4a0>
 402be64:	e0ffff17 	ldw	r3,-4(fp)
 402be68:	18880120 	cmpeqi	r2,r3,8196
 402be6c:	10007a1e 	bne	r2,zero,402c058 <sosetopt+0x340>
 402be70:	e0ffff17 	ldw	r3,-4(fp)
 402be74:	18900020 	cmpeqi	r2,r3,16384
 402be78:	1000061e 	bne	r2,zero,402be94 <sosetopt+0x17c>
 402be7c:	0000ce06 	br	402c1b8 <sosetopt+0x4a0>
   {
   case SO_LINGER:
      so->so_linger = (short)((struct linger *)arg)->l_linger;
 402be80:	e0bffd17 	ldw	r2,-12(fp)
 402be84:	10800117 	ldw	r2,4(r2)
 402be88:	1007883a 	mov	r3,r2
 402be8c:	e0bffb17 	ldw	r2,-20(fp)
 402be90:	10c0080d 	sth	r3,32(r2)
   case SO_TCPSACK:
   case SO_NOSLOWSTART:
#ifdef SUPPORT_SO_FULLMSS
   case SO_FULLMSS:
#endif
      if (*(int *)arg) 
 402be94:	e0bffd17 	ldw	r2,-12(fp)
 402be98:	10800017 	ldw	r2,0(r2)
 402be9c:	1005003a 	cmpeq	r2,r2,zero
 402bea0:	1000071e 	bne	r2,zero,402bec0 <sosetopt+0x1a8>
         so->so_options |= optname;
 402bea4:	e0bffb17 	ldw	r2,-20(fp)
 402bea8:	10c00417 	ldw	r3,16(r2)
 402beac:	e0bffc17 	ldw	r2,-16(fp)
 402beb0:	1886b03a 	or	r3,r3,r2
 402beb4:	e0bffb17 	ldw	r2,-20(fp)
 402beb8:	10c00415 	stw	r3,16(r2)
 402bebc:	0000c006 	br	402c1c0 <sosetopt+0x4a8>
      else
         so->so_options &= ~optname;
 402bec0:	e0bffb17 	ldw	r2,-20(fp)
 402bec4:	10c00417 	ldw	r3,16(r2)
 402bec8:	e0bffc17 	ldw	r2,-16(fp)
 402becc:	0084303a 	nor	r2,zero,r2
 402bed0:	1886703a 	and	r3,r3,r2
 402bed4:	e0bffb17 	ldw	r2,-20(fp)
 402bed8:	10c00415 	stw	r3,16(r2)
      break;
 402bedc:	0000b806 	br	402c1c0 <sosetopt+0x4a8>
      break;
#endif /* TCP_BIGCWND */

   case SO_SNDBUF:
   case SO_RCVBUF:
      if (sbreserve(optname == SO_SNDBUF ?
 402bee0:	e0bffc17 	ldw	r2,-16(fp)
 402bee4:	10840058 	cmpnei	r2,r2,4097
 402bee8:	1000041e 	bne	r2,zero,402befc <sosetopt+0x1e4>
 402beec:	e0bffb17 	ldw	r2,-20(fp)
 402bef0:	10801204 	addi	r2,r2,72
 402bef4:	e0bffe15 	stw	r2,-8(fp)
 402bef8:	00000306 	br	402bf08 <sosetopt+0x1f0>
 402befc:	e0bffb17 	ldw	r2,-20(fp)
 402bf00:	10800a04 	addi	r2,r2,40
 402bf04:	e0bffe15 	stw	r2,-8(fp)
 402bf08:	e0bffd17 	ldw	r2,-12(fp)
 402bf0c:	10800017 	ldw	r2,0(r2)
 402bf10:	100b883a 	mov	r5,r2
 402bf14:	e13ffe17 	ldw	r4,-8(fp)
 402bf18:	402d0500 	call	402d050 <sbreserve>
 402bf1c:	1004c03a 	cmpne	r2,r2,zero
 402bf20:	1000a71e 	bne	r2,zero,402c1c0 <sosetopt+0x4a8>
          &so->so_snd : &so->so_rcv,
          (u_long) * (int *)arg) == 0) 
      {
         error = ENOBUFS;
 402bf24:	00801a44 	movi	r2,105
 402bf28:	e0bffa15 	stw	r2,-24(fp)
         goto bad;
 402bf2c:	0000a406 	br	402c1c0 <sosetopt+0x4a8>
      }
      break;

   case SO_RCVTIMEO:
      so->so_rcv.sb_timeo = *(short *)arg;
 402bf30:	e0bffd17 	ldw	r2,-12(fp)
 402bf34:	10c0000b 	ldhu	r3,0(r2)
 402bf38:	e0bffb17 	ldw	r2,-20(fp)
 402bf3c:	10c0118d 	sth	r3,70(r2)
      break;
 402bf40:	00009f06 	br	402c1c0 <sosetopt+0x4a8>

   case SO_NBIO:     /* set socket into NON-blocking mode */
      so->so_state |= SS_NBIO;
 402bf44:	e0bffb17 	ldw	r2,-20(fp)
 402bf48:	1080088b 	ldhu	r2,34(r2)
 402bf4c:	10804014 	ori	r2,r2,256
 402bf50:	1007883a 	mov	r3,r2
 402bf54:	e0bffb17 	ldw	r2,-20(fp)
 402bf58:	10c0088d 	sth	r3,34(r2)
      break;
 402bf5c:	00009806 	br	402c1c0 <sosetopt+0x4a8>

   case SO_BIO:   /* set socket into blocking mode */
      so->so_state &= ~SS_NBIO;
 402bf60:	e0bffb17 	ldw	r2,-20(fp)
 402bf64:	10c0088b 	ldhu	r3,34(r2)
 402bf68:	00bfbfc4 	movi	r2,-257
 402bf6c:	1884703a 	and	r2,r3,r2
 402bf70:	1007883a 	mov	r3,r2
 402bf74:	e0bffb17 	ldw	r2,-20(fp)
 402bf78:	10c0088d 	sth	r3,34(r2)
      break;
 402bf7c:	00009006 	br	402c1c0 <sosetopt+0x4a8>

   case SO_NONBLOCK:    /* set blocking mode according to arg */
      /* sanity check the arg parameter */
      if (!arg)
 402bf80:	e0bffd17 	ldw	r2,-12(fp)
 402bf84:	1004c03a 	cmpne	r2,r2,zero
 402bf88:	1000031e 	bne	r2,zero,402bf98 <sosetopt+0x280>
      {
         error = ENP_PARAM;
 402bf8c:	00bffd84 	movi	r2,-10
 402bf90:	e0bffa15 	stw	r2,-24(fp)
         break;
 402bf94:	00008a06 	br	402c1c0 <sosetopt+0x4a8>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 402bf98:	e0bffd17 	ldw	r2,-12(fp)
 402bf9c:	10800017 	ldw	r2,0(r2)
 402bfa0:	1005003a 	cmpeq	r2,r2,zero
 402bfa4:	1000071e 	bne	r2,zero,402bfc4 <sosetopt+0x2ac>
         so->so_state |= SS_NBIO;   /* set non-blocking mode */
 402bfa8:	e0bffb17 	ldw	r2,-20(fp)
 402bfac:	1080088b 	ldhu	r2,34(r2)
 402bfb0:	10804014 	ori	r2,r2,256
 402bfb4:	1007883a 	mov	r3,r2
 402bfb8:	e0bffb17 	ldw	r2,-20(fp)
 402bfbc:	10c0088d 	sth	r3,34(r2)
 402bfc0:	00007f06 	br	402c1c0 <sosetopt+0x4a8>
      else
         so->so_state &= ~SS_NBIO;  /* set blocking mode */
 402bfc4:	e0bffb17 	ldw	r2,-20(fp)
 402bfc8:	10c0088b 	ldhu	r3,34(r2)
 402bfcc:	00bfbfc4 	movi	r2,-257
 402bfd0:	1884703a 	and	r2,r3,r2
 402bfd4:	1007883a 	mov	r3,r2
 402bfd8:	e0bffb17 	ldw	r2,-20(fp)
 402bfdc:	10c0088d 	sth	r3,34(r2)
      break;
 402bfe0:	00007706 	br	402c1c0 <sosetopt+0x4a8>
   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
   case IP_ADD_MEMBERSHIP:
   case IP_DROP_MEMBERSHIP:
      error = ip_setmoptions(optname, so, arg);
 402bfe4:	e13ffc17 	ldw	r4,-16(fp)
 402bfe8:	e17ffb17 	ldw	r5,-20(fp)
 402bfec:	e1bffd17 	ldw	r6,-12(fp)
 402bff0:	40401cc0 	call	40401cc <ip_setmoptions>
 402bff4:	e0bffa15 	stw	r2,-24(fp)
      break;
 402bff8:	00007106 	br	402c1c0 <sosetopt+0x4a8>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 402bffc:	e0bffd17 	ldw	r2,-12(fp)
 402c000:	1004c03a 	cmpne	r2,r2,zero
 402c004:	1000031e 	bne	r2,zero,402c014 <sosetopt+0x2fc>
      {
         error = ENP_PARAM;
 402c008:	00bffd84 	movi	r2,-10
 402c00c:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c010:	00006b06 	br	402c1c0 <sosetopt+0x4a8>
      }
      /* set the socket option flag based on the pointed-to argument */
      if (*(int *)arg)
 402c014:	e0bffd17 	ldw	r2,-12(fp)
 402c018:	10800017 	ldw	r2,0(r2)
 402c01c:	1005003a 	cmpeq	r2,r2,zero
 402c020:	1000061e 	bne	r2,zero,402c03c <sosetopt+0x324>
         so->so_options |= SO_HDRINCL;
 402c024:	e0bffb17 	ldw	r2,-20(fp)
 402c028:	10800417 	ldw	r2,16(r2)
 402c02c:	10c80014 	ori	r3,r2,8192
 402c030:	e0bffb17 	ldw	r2,-20(fp)
 402c034:	10c00415 	stw	r3,16(r2)
 402c038:	00006106 	br	402c1c0 <sosetopt+0x4a8>
      else
         so->so_options &= ~SO_HDRINCL;
 402c03c:	e0bffb17 	ldw	r2,-20(fp)
 402c040:	10c00417 	ldw	r3,16(r2)
 402c044:	00b7ffc4 	movi	r2,-8193
 402c048:	1886703a 	and	r3,r3,r2
 402c04c:	e0bffb17 	ldw	r2,-20(fp)
 402c050:	10c00415 	stw	r3,16(r2)
      break;
 402c054:	00005a06 	br	402c1c0 <sosetopt+0x4a8>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 402c058:	e0bffb17 	ldw	r2,-20(fp)
 402c05c:	10800983 	ldbu	r2,38(r2)
 402c060:	10803fcc 	andi	r2,r2,255
 402c064:	1080201c 	xori	r2,r2,128
 402c068:	10bfe004 	addi	r2,r2,-128
 402c06c:	10800060 	cmpeqi	r2,r2,1
 402c070:	1000031e 	bne	r2,zero,402c080 <sosetopt+0x368>
      {
         error = EINVAL;
 402c074:	00800584 	movi	r2,22
 402c078:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c07c:	00005006 	br	402c1c0 <sosetopt+0x4a8>
      }
      inp = (struct inpcb *)(so->so_pcb);
 402c080:	e0bffb17 	ldw	r2,-20(fp)
 402c084:	10800117 	ldw	r2,4(r2)
 402c088:	e0bff915 	stw	r2,-28(fp)
      tp = intotcpcb(inp);
 402c08c:	e0bff917 	ldw	r2,-28(fp)
 402c090:	10800917 	ldw	r2,36(r2)
 402c094:	e0bff815 	stw	r2,-32(fp)
      if(!tp)
 402c098:	e0bff817 	ldw	r2,-32(fp)
 402c09c:	1004c03a 	cmpne	r2,r2,zero
 402c0a0:	1000031e 	bne	r2,zero,402c0b0 <sosetopt+0x398>
      {
         error = ENOTCONN;
 402c0a4:	00802004 	movi	r2,128
 402c0a8:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c0ac:	00004406 	br	402c1c0 <sosetopt+0x4a8>
      }
      /* try to make sure that the argument pointer is valid */
      if (arg == NULL)
 402c0b0:	e0bffd17 	ldw	r2,-12(fp)
 402c0b4:	1004c03a 	cmpne	r2,r2,zero
 402c0b8:	1000031e 	bne	r2,zero,402c0c8 <sosetopt+0x3b0>
      {
         error = ENP_PARAM;
 402c0bc:	00bffd84 	movi	r2,-10
 402c0c0:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c0c4:	00003e06 	br	402c1c0 <sosetopt+0x4a8>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (*(int *) arg)
 402c0c8:	e0bffd17 	ldw	r2,-12(fp)
 402c0cc:	10800017 	ldw	r2,0(r2)
 402c0d0:	1005003a 	cmpeq	r2,r2,zero
 402c0d4:	1000071e 	bne	r2,zero,402c0f4 <sosetopt+0x3dc>
         tp->t_flags |= TF_NODELAY;   /* Disable Nagle Algorithm */
 402c0d8:	e0bff817 	ldw	r2,-32(fp)
 402c0dc:	10800b0b 	ldhu	r2,44(r2)
 402c0e0:	10800114 	ori	r2,r2,4
 402c0e4:	1007883a 	mov	r3,r2
 402c0e8:	e0bff817 	ldw	r2,-32(fp)
 402c0ec:	10c00b0d 	sth	r3,44(r2)
 402c0f0:	00003306 	br	402c1c0 <sosetopt+0x4a8>
      else
         tp->t_flags &= ~TF_NODELAY;  /* Enable Nagle Algorithm */
 402c0f4:	e0bff817 	ldw	r2,-32(fp)
 402c0f8:	10c00b0b 	ldhu	r3,44(r2)
 402c0fc:	00bffec4 	movi	r2,-5
 402c100:	1884703a 	and	r2,r3,r2
 402c104:	1007883a 	mov	r3,r2
 402c108:	e0bff817 	ldw	r2,-32(fp)
 402c10c:	10c00b0d 	sth	r3,44(r2)

      break;
 402c110:	00002b06 	br	402c1c0 <sosetopt+0x4a8>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 402c114:	e0bffb17 	ldw	r2,-20(fp)
 402c118:	10800983 	ldbu	r2,38(r2)
 402c11c:	10803fcc 	andi	r2,r2,255
 402c120:	1080201c 	xori	r2,r2,128
 402c124:	10bfe004 	addi	r2,r2,-128
 402c128:	10800060 	cmpeqi	r2,r2,1
 402c12c:	1000031e 	bne	r2,zero,402c13c <sosetopt+0x424>
      {
         error = EINVAL;
 402c130:	00800584 	movi	r2,22
 402c134:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c138:	00002106 	br	402c1c0 <sosetopt+0x4a8>
      }
      inp = (struct inpcb *)(so->so_pcb);
 402c13c:	e0bffb17 	ldw	r2,-20(fp)
 402c140:	10800117 	ldw	r2,4(r2)
 402c144:	e0bff715 	stw	r2,-36(fp)
      tp = intotcpcb(inp);
 402c148:	e0bff717 	ldw	r2,-36(fp)
 402c14c:	10800917 	ldw	r2,36(r2)
 402c150:	e0bff615 	stw	r2,-40(fp)
      if(!tp)
 402c154:	e0bff617 	ldw	r2,-40(fp)
 402c158:	1004c03a 	cmpne	r2,r2,zero
 402c15c:	1000031e 	bne	r2,zero,402c16c <sosetopt+0x454>
      {
         error = ENOTCONN;
 402c160:	00802004 	movi	r2,128
 402c164:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c168:	00001506 	br	402c1c0 <sosetopt+0x4a8>
      }
      if (tp->t_state != TCPS_CLOSED)
 402c16c:	e0bff617 	ldw	r2,-40(fp)
 402c170:	10800217 	ldw	r2,8(r2)
 402c174:	1005003a 	cmpeq	r2,r2,zero
 402c178:	1000031e 	bne	r2,zero,402c188 <sosetopt+0x470>
      {
         error = EINVAL;
 402c17c:	00800584 	movi	r2,22
 402c180:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c184:	00000e06 	br	402c1c0 <sosetopt+0x4a8>
      }
      tp->t_maxseg = *(int*)(arg);    /* set TCP MSS */
 402c188:	e0bffd17 	ldw	r2,-12(fp)
 402c18c:	10800017 	ldw	r2,0(r2)
 402c190:	1007883a 	mov	r3,r2
 402c194:	e0bff617 	ldw	r2,-40(fp)
 402c198:	10c00a0d 	sth	r3,40(r2)
      tp->t_flags |= TF_MAXSEG;   /* mark as user set max seg */
 402c19c:	e0bff617 	ldw	r2,-40(fp)
 402c1a0:	10800b0b 	ldhu	r2,44(r2)
 402c1a4:	10810014 	ori	r2,r2,1024
 402c1a8:	1007883a 	mov	r3,r2
 402c1ac:	e0bff617 	ldw	r2,-40(fp)
 402c1b0:	10c00b0d 	sth	r3,44(r2)
      break;
 402c1b4:	00000206 	br	402c1c0 <sosetopt+0x4a8>
   }
   default:
      error = ENOPROTOOPT;
 402c1b8:	00801b44 	movi	r2,109
 402c1bc:	e0bffa15 	stw	r2,-24(fp)
      break;
   }
bad:
   return (error);
 402c1c0:	e0bffa17 	ldw	r2,-24(fp)
}
 402c1c4:	e037883a 	mov	sp,fp
 402c1c8:	dfc00117 	ldw	ra,4(sp)
 402c1cc:	df000017 	ldw	fp,0(sp)
 402c1d0:	dec00204 	addi	sp,sp,8
 402c1d4:	f800283a 	ret

0402c1d8 <sogetopt>:

int
sogetopt(struct socket * so, 
   int   optname,
   void *   val)
{
 402c1d8:	defff304 	addi	sp,sp,-52
 402c1dc:	dfc00c15 	stw	ra,48(sp)
 402c1e0:	df000b15 	stw	fp,44(sp)
 402c1e4:	df000b04 	addi	fp,sp,44
 402c1e8:	e13ffb15 	stw	r4,-20(fp)
 402c1ec:	e17ffc15 	stw	r5,-16(fp)
 402c1f0:	e1bffd15 	stw	r6,-12(fp)
   int   error =  0;
 402c1f4:	e03ffa15 	stw	zero,-24(fp)

   /* sanity check the val parameter */
   if (!val)
 402c1f8:	e0bffd17 	ldw	r2,-12(fp)
 402c1fc:	1004c03a 	cmpne	r2,r2,zero
 402c200:	1000031e 	bne	r2,zero,402c210 <sogetopt+0x38>
   {
      return ENP_PARAM;
 402c204:	00bffd84 	movi	r2,-10
 402c208:	e0bffe15 	stw	r2,-8(fp)
 402c20c:	00013c06 	br	402c700 <sogetopt+0x528>
   }

   switch (optname) 
 402c210:	e0fffc17 	ldw	r3,-16(fp)
 402c214:	e0ffff15 	stw	r3,-4(fp)
 402c218:	e0ffff17 	ldw	r3,-4(fp)
 402c21c:	188400e0 	cmpeqi	r2,r3,4099
 402c220:	10008f1e 	bne	r2,zero,402c460 <sogetopt+0x288>
 402c224:	e0ffff17 	ldw	r3,-4(fp)
 402c228:	18840108 	cmpgei	r2,r3,4100
 402c22c:	10002e1e 	bne	r2,zero,402c2e8 <sogetopt+0x110>
 402c230:	e0ffff17 	ldw	r3,-4(fp)
 402c234:	18800420 	cmpeqi	r2,r3,16
 402c238:	1000821e 	bne	r2,zero,402c444 <sogetopt+0x26c>
 402c23c:	e0ffff17 	ldw	r3,-4(fp)
 402c240:	18800448 	cmpgei	r2,r3,17
 402c244:	1000111e 	bne	r2,zero,402c28c <sogetopt+0xb4>
 402c248:	e0ffff17 	ldw	r3,-4(fp)
 402c24c:	18800220 	cmpeqi	r2,r3,8
 402c250:	10007c1e 	bne	r2,zero,402c444 <sogetopt+0x26c>
 402c254:	e0ffff17 	ldw	r3,-4(fp)
 402c258:	18800248 	cmpgei	r2,r3,9
 402c25c:	1000071e 	bne	r2,zero,402c27c <sogetopt+0xa4>
 402c260:	e0ffff17 	ldw	r3,-4(fp)
 402c264:	188000a0 	cmpeqi	r2,r3,2
 402c268:	1000eb1e 	bne	r2,zero,402c618 <sogetopt+0x440>
 402c26c:	e0ffff17 	ldw	r3,-4(fp)
 402c270:	18800120 	cmpeqi	r2,r3,4
 402c274:	1000731e 	bne	r2,zero,402c444 <sogetopt+0x26c>
 402c278:	00011c06 	br	402c6ec <sogetopt+0x514>
 402c27c:	e0ffff17 	ldw	r3,-4(fp)
 402c280:	18800308 	cmpgei	r2,r3,12
 402c284:	1001191e 	bne	r2,zero,402c6ec <sogetopt+0x514>
 402c288:	0000dd06 	br	402c600 <sogetopt+0x428>
 402c28c:	e0ffff17 	ldw	r3,-4(fp)
 402c290:	18804020 	cmpeqi	r2,r3,256
 402c294:	10006b1e 	bne	r2,zero,402c444 <sogetopt+0x26c>
 402c298:	e0ffff17 	ldw	r3,-4(fp)
 402c29c:	18804048 	cmpgei	r2,r3,257
 402c2a0:	1000071e 	bne	r2,zero,402c2c0 <sogetopt+0xe8>
 402c2a4:	e0ffff17 	ldw	r3,-4(fp)
 402c2a8:	18800820 	cmpeqi	r2,r3,32
 402c2ac:	1000651e 	bne	r2,zero,402c444 <sogetopt+0x26c>
 402c2b0:	e0ffff17 	ldw	r3,-4(fp)
 402c2b4:	18802020 	cmpeqi	r2,r3,128
 402c2b8:	1000531e 	bne	r2,zero,402c408 <sogetopt+0x230>
 402c2bc:	00010b06 	br	402c6ec <sogetopt+0x514>
 402c2c0:	e0ffff17 	ldw	r3,-4(fp)
 402c2c4:	18840060 	cmpeqi	r2,r3,4097
 402c2c8:	10006f1e 	bne	r2,zero,402c488 <sogetopt+0x2b0>
 402c2cc:	e0ffff17 	ldw	r3,-4(fp)
 402c2d0:	18840088 	cmpgei	r2,r3,4098
 402c2d4:	1000711e 	bne	r2,zero,402c49c <sogetopt+0x2c4>
 402c2d8:	e0ffff17 	ldw	r3,-4(fp)
 402c2dc:	18808020 	cmpeqi	r2,r3,512
 402c2e0:	1000581e 	bne	r2,zero,402c444 <sogetopt+0x26c>
 402c2e4:	00010106 	br	402c6ec <sogetopt+0x514>
 402c2e8:	e0ffff17 	ldw	r3,-4(fp)
 402c2ec:	18840420 	cmpeqi	r2,r3,4112
 402c2f0:	1000881e 	bne	r2,zero,402c514 <sogetopt+0x33c>
 402c2f4:	e0ffff17 	ldw	r3,-4(fp)
 402c2f8:	18840448 	cmpgei	r2,r3,4113
 402c2fc:	1000171e 	bne	r2,zero,402c35c <sogetopt+0x184>
 402c300:	e0ffff17 	ldw	r3,-4(fp)
 402c304:	188401a0 	cmpeqi	r2,r3,4102
 402c308:	1000a31e 	bne	r2,zero,402c598 <sogetopt+0x3c0>
 402c30c:	e0ffff17 	ldw	r3,-4(fp)
 402c310:	188401c8 	cmpgei	r2,r3,4103
 402c314:	1000071e 	bne	r2,zero,402c334 <sogetopt+0x15c>
 402c318:	e0ffff17 	ldw	r3,-4(fp)
 402c31c:	18840120 	cmpeqi	r2,r3,4100
 402c320:	1000541e 	bne	r2,zero,402c474 <sogetopt+0x29c>
 402c324:	e0ffff17 	ldw	r3,-4(fp)
 402c328:	18840160 	cmpeqi	r2,r3,4101
 402c32c:	1000951e 	bne	r2,zero,402c584 <sogetopt+0x3ac>
 402c330:	0000ee06 	br	402c6ec <sogetopt+0x514>
 402c334:	e0ffff17 	ldw	r3,-4(fp)
 402c338:	18840220 	cmpeqi	r2,r3,4104
 402c33c:	1000661e 	bne	r2,zero,402c4d8 <sogetopt+0x300>
 402c340:	e0ffff17 	ldw	r3,-4(fp)
 402c344:	18840210 	cmplti	r2,r3,4104
 402c348:	10006b1e 	bne	r2,zero,402c4f8 <sogetopt+0x320>
 402c34c:	e0ffff17 	ldw	r3,-4(fp)
 402c350:	18840260 	cmpeqi	r2,r3,4105
 402c354:	1000951e 	bne	r2,zero,402c5ac <sogetopt+0x3d4>
 402c358:	0000e406 	br	402c6ec <sogetopt+0x514>
 402c35c:	e0ffff17 	ldw	r3,-4(fp)
 402c360:	188404e0 	cmpeqi	r2,r3,4115
 402c364:	1000141e 	bne	r2,zero,402c3b8 <sogetopt+0x1e0>
 402c368:	e0ffff17 	ldw	r3,-4(fp)
 402c36c:	18840508 	cmpgei	r2,r3,4116
 402c370:	1000071e 	bne	r2,zero,402c390 <sogetopt+0x1b8>
 402c374:	e0ffff17 	ldw	r3,-4(fp)
 402c378:	18840460 	cmpeqi	r2,r3,4113
 402c37c:	10004c1e 	bne	r2,zero,402c4b0 <sogetopt+0x2d8>
 402c380:	e0ffff17 	ldw	r3,-4(fp)
 402c384:	188404a0 	cmpeqi	r2,r3,4114
 402c388:	10004e1e 	bne	r2,zero,402c4c4 <sogetopt+0x2ec>
 402c38c:	0000d706 	br	402c6ec <sogetopt+0x514>
 402c390:	e0ffff17 	ldw	r3,-4(fp)
 402c394:	188800e0 	cmpeqi	r2,r3,8195
 402c398:	10005e1e 	bne	r2,zero,402c514 <sogetopt+0x33c>
 402c39c:	e0ffff17 	ldw	r3,-4(fp)
 402c3a0:	18880120 	cmpeqi	r2,r3,8196
 402c3a4:	1000a81e 	bne	r2,zero,402c648 <sogetopt+0x470>
 402c3a8:	e0ffff17 	ldw	r3,-4(fp)
 402c3ac:	188405a0 	cmpeqi	r2,r3,4118
 402c3b0:	1000861e 	bne	r2,zero,402c5cc <sogetopt+0x3f4>
 402c3b4:	0000cd06 	br	402c6ec <sogetopt+0x514>
   {
   case SO_MYADDR:
      /* Get my IP address. */
      if (so->so_state & SS_ISCONNECTED)
 402c3b8:	e0bffb17 	ldw	r2,-20(fp)
 402c3bc:	1080088b 	ldhu	r2,34(r2)
 402c3c0:	10bfffcc 	andi	r2,r2,65535
 402c3c4:	1080008c 	andi	r2,r2,2
 402c3c8:	1005003a 	cmpeq	r2,r2,zero
 402c3cc:	1000071e 	bne	r2,zero,402c3ec <sogetopt+0x214>
      {
         *(u_long *)val = so->so_pcb->ifp->n_ipaddr;
 402c3d0:	e0fffd17 	ldw	r3,-12(fp)
 402c3d4:	e0bffb17 	ldw	r2,-20(fp)
 402c3d8:	10800117 	ldw	r2,4(r2)
 402c3dc:	10800a17 	ldw	r2,40(r2)
 402c3e0:	10800a17 	ldw	r2,40(r2)
 402c3e4:	18800015 	stw	r2,0(r3)
 402c3e8:	0000c306 	br	402c6f8 <sogetopt+0x520>
      }
      else  /* not connected, use first iface */
         *(u_long *)val = nets[0]->n_ipaddr;
 402c3ec:	e0fffd17 	ldw	r3,-12(fp)
 402c3f0:	008101b4 	movhi	r2,1030
 402c3f4:	10a20804 	addi	r2,r2,-30688
 402c3f8:	10800017 	ldw	r2,0(r2)
 402c3fc:	10800a17 	ldw	r2,40(r2)
 402c400:	18800015 	stw	r2,0(r3)
      break;
 402c404:	0000bc06 	br	402c6f8 <sogetopt+0x520>
   case SO_LINGER:
      {
         struct linger *   l  =  (struct  linger *)val;
 402c408:	e0bffd17 	ldw	r2,-12(fp)
 402c40c:	e0bff915 	stw	r2,-28(fp)
         l->l_onoff = so->so_options & SO_LINGER;
 402c410:	e0bffb17 	ldw	r2,-20(fp)
 402c414:	10800417 	ldw	r2,16(r2)
 402c418:	10c0200c 	andi	r3,r2,128
 402c41c:	e0bff917 	ldw	r2,-28(fp)
 402c420:	10c00015 	stw	r3,0(r2)
         l->l_linger = so->so_linger;
 402c424:	e0bffb17 	ldw	r2,-20(fp)
 402c428:	1080080b 	ldhu	r2,32(r2)
 402c42c:	10ffffcc 	andi	r3,r2,65535
 402c430:	18e0001c 	xori	r3,r3,32768
 402c434:	18e00004 	addi	r3,r3,-32768
 402c438:	e0bff917 	ldw	r2,-28(fp)
 402c43c:	10c00115 	stw	r3,4(r2)
      }
      break;
 402c440:	0000ad06 	br	402c6f8 <sogetopt+0x520>
   case SO_OOBINLINE:
   case SO_DONTROUTE:
   case SO_REUSEADDR:
   case SO_BROADCAST:
   case SO_TCPSACK:
      *(int *)val = so->so_options & optname;
 402c444:	e13ffd17 	ldw	r4,-12(fp)
 402c448:	e0bffb17 	ldw	r2,-20(fp)
 402c44c:	10c00417 	ldw	r3,16(r2)
 402c450:	e0bffc17 	ldw	r2,-16(fp)
 402c454:	1884703a 	and	r2,r3,r2
 402c458:	20800015 	stw	r2,0(r4)
      break;
 402c45c:	0000a606 	br	402c6f8 <sogetopt+0x520>

   case SO_SNDLOWAT:
      *(int *)val = (int)so->so_snd.sb_lowat;
 402c460:	e0fffd17 	ldw	r3,-12(fp)
 402c464:	e0bffb17 	ldw	r2,-20(fp)
 402c468:	10801617 	ldw	r2,88(r2)
 402c46c:	18800015 	stw	r2,0(r3)
      break;
 402c470:	0000a106 	br	402c6f8 <sogetopt+0x520>

   case SO_RCVLOWAT:
      *(int *)val = (int)so->so_rcv.sb_lowat;
 402c474:	e0fffd17 	ldw	r3,-12(fp)
 402c478:	e0bffb17 	ldw	r2,-20(fp)
 402c47c:	10800e17 	ldw	r2,56(r2)
 402c480:	18800015 	stw	r2,0(r3)
      break;
 402c484:	00009c06 	br	402c6f8 <sogetopt+0x520>

   case SO_SNDBUF:
      *(int *)val = (int)so->so_snd.sb_hiwat;
 402c488:	e0fffd17 	ldw	r3,-12(fp)
 402c48c:	e0bffb17 	ldw	r2,-20(fp)
 402c490:	10801317 	ldw	r2,76(r2)
 402c494:	18800015 	stw	r2,0(r3)
      break;
 402c498:	00009706 	br	402c6f8 <sogetopt+0x520>

   case SO_RCVBUF:
      *(int *)val = (int)so->so_rcv.sb_hiwat;
 402c49c:	e0fffd17 	ldw	r3,-12(fp)
 402c4a0:	e0bffb17 	ldw	r2,-20(fp)
 402c4a4:	10800b17 	ldw	r2,44(r2)
 402c4a8:	18800015 	stw	r2,0(r3)
      break;
 402c4ac:	00009206 	br	402c6f8 <sogetopt+0x520>

   case SO_RXDATA:   /* added, JB */
      *(int *)val = (int)so->so_rcv.sb_cc;
 402c4b0:	e0fffd17 	ldw	r3,-12(fp)
 402c4b4:	e0bffb17 	ldw	r2,-20(fp)
 402c4b8:	10800a17 	ldw	r2,40(r2)
 402c4bc:	18800015 	stw	r2,0(r3)
      break;
 402c4c0:	00008d06 	br	402c6f8 <sogetopt+0x520>

   case SO_TXDATA:   /* added for rel 1.8 */
      *(int *)val = (int)so->so_snd.sb_cc;
 402c4c4:	e0fffd17 	ldw	r3,-12(fp)
 402c4c8:	e0bffb17 	ldw	r2,-20(fp)
 402c4cc:	10801217 	ldw	r2,72(r2)
 402c4d0:	18800015 	stw	r2,0(r3)
      break;
 402c4d4:	00008806 	br	402c6f8 <sogetopt+0x520>

   case SO_TYPE:
      *(int *)val = so->so_type;
 402c4d8:	e0fffd17 	ldw	r3,-12(fp)
 402c4dc:	e0bffb17 	ldw	r2,-20(fp)
 402c4e0:	10800983 	ldbu	r2,38(r2)
 402c4e4:	10803fcc 	andi	r2,r2,255
 402c4e8:	1080201c 	xori	r2,r2,128
 402c4ec:	10bfe004 	addi	r2,r2,-128
 402c4f0:	18800015 	stw	r2,0(r3)
      break;
 402c4f4:	00008006 	br	402c6f8 <sogetopt+0x520>

   case SO_ERROR:
      *(int *)val = so->so_error;
 402c4f8:	e0fffd17 	ldw	r3,-12(fp)
 402c4fc:	e0bffb17 	ldw	r2,-20(fp)
 402c500:	10800617 	ldw	r2,24(r2)
 402c504:	18800015 	stw	r2,0(r3)
      so->so_error = 0;
 402c508:	e0bffb17 	ldw	r2,-20(fp)
 402c50c:	10000615 	stw	zero,24(r2)
      break;
 402c510:	00007906 	br	402c6f8 <sogetopt+0x520>
   case TCP_MAXSEG:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 402c514:	e0bffb17 	ldw	r2,-20(fp)
 402c518:	10800983 	ldbu	r2,38(r2)
 402c51c:	10803fcc 	andi	r2,r2,255
 402c520:	1080201c 	xori	r2,r2,128
 402c524:	10bfe004 	addi	r2,r2,-128
 402c528:	10800060 	cmpeqi	r2,r2,1
 402c52c:	1000031e 	bne	r2,zero,402c53c <sogetopt+0x364>
      {
         error = EINVAL;
 402c530:	00800584 	movi	r2,22
 402c534:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c538:	00006f06 	br	402c6f8 <sogetopt+0x520>
      }
      inp = (struct inpcb *)(so->so_pcb);
 402c53c:	e0bffb17 	ldw	r2,-20(fp)
 402c540:	10800117 	ldw	r2,4(r2)
 402c544:	e0bff815 	stw	r2,-32(fp)
      tp = intotcpcb(inp);
 402c548:	e0bff817 	ldw	r2,-32(fp)
 402c54c:	10800917 	ldw	r2,36(r2)
 402c550:	e0bff715 	stw	r2,-36(fp)
      if(!tp)
 402c554:	e0bff717 	ldw	r2,-36(fp)
 402c558:	1004c03a 	cmpne	r2,r2,zero
 402c55c:	1000031e 	bne	r2,zero,402c56c <sogetopt+0x394>
      {
         error = ENOTCONN;
 402c560:	00802004 	movi	r2,128
 402c564:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c568:	00006306 	br	402c6f8 <sogetopt+0x520>
      }
      *(int *)val = tp->t_maxseg;     /* Fill in TCP MSS for current socket */
 402c56c:	e0fffd17 	ldw	r3,-12(fp)
 402c570:	e0bff717 	ldw	r2,-36(fp)
 402c574:	10800a0b 	ldhu	r2,40(r2)
 402c578:	10bfffcc 	andi	r2,r2,65535
 402c57c:	18800015 	stw	r2,0(r3)
      break;
 402c580:	00005d06 	br	402c6f8 <sogetopt+0x520>
   }
 
   case SO_SNDTIMEO:
      *(short*)val = so->so_snd.sb_timeo;
 402c584:	e0bffd17 	ldw	r2,-12(fp)
 402c588:	e0fffb17 	ldw	r3,-20(fp)
 402c58c:	18c0198b 	ldhu	r3,102(r3)
 402c590:	10c0000d 	sth	r3,0(r2)
      break;
 402c594:	00005806 	br	402c6f8 <sogetopt+0x520>

   case SO_RCVTIMEO:
      *(short*)val = so->so_rcv.sb_timeo;
 402c598:	e0bffd17 	ldw	r2,-12(fp)
 402c59c:	e0fffb17 	ldw	r3,-20(fp)
 402c5a0:	18c0118b 	ldhu	r3,70(r3)
 402c5a4:	10c0000d 	sth	r3,0(r2)
      break;
 402c5a8:	00005306 	br	402c6f8 <sogetopt+0x520>

   case SO_HOPCNT:
      *(int *)val = so->so_hopcnt;
 402c5ac:	e0fffd17 	ldw	r3,-12(fp)
 402c5b0:	e0bffb17 	ldw	r2,-20(fp)
 402c5b4:	108009c3 	ldbu	r2,39(r2)
 402c5b8:	10803fcc 	andi	r2,r2,255
 402c5bc:	1080201c 	xori	r2,r2,128
 402c5c0:	10bfe004 	addi	r2,r2,-128
 402c5c4:	18800015 	stw	r2,0(r3)
      break;
 402c5c8:	00004b06 	br	402c6f8 <sogetopt+0x520>

   case SO_NONBLOCK:    /* get blocking mode according to val */
      /* if the non-blocking I/O bit is set in the state */
      if (so->so_state & SS_NBIO)
 402c5cc:	e0bffb17 	ldw	r2,-20(fp)
 402c5d0:	1080088b 	ldhu	r2,34(r2)
 402c5d4:	10bfffcc 	andi	r2,r2,65535
 402c5d8:	1080400c 	andi	r2,r2,256
 402c5dc:	1005003a 	cmpeq	r2,r2,zero
 402c5e0:	1000041e 	bne	r2,zero,402c5f4 <sogetopt+0x41c>
         *(int *)val = 1;   /* return 1 in val */
 402c5e4:	e0fffd17 	ldw	r3,-12(fp)
 402c5e8:	00800044 	movi	r2,1
 402c5ec:	18800015 	stw	r2,0(r3)
 402c5f0:	00004106 	br	402c6f8 <sogetopt+0x520>
      else
         *(int *)val = 0;     /* return 0 in val */
 402c5f4:	e0bffd17 	ldw	r2,-12(fp)
 402c5f8:	10000015 	stw	zero,0(r2)
      break;
 402c5fc:	00003e06 	br	402c6f8 <sogetopt+0x520>
#ifdef IP_MULTICAST

   case IP_MULTICAST_IF:
   case IP_MULTICAST_TTL:
   case IP_MULTICAST_LOOP:
      error = ip_getmoptions(optname, so, val);
 402c600:	e13ffc17 	ldw	r4,-16(fp)
 402c604:	e17ffb17 	ldw	r5,-20(fp)
 402c608:	e1bffd17 	ldw	r6,-12(fp)
 402c60c:	40407bc0 	call	40407bc <ip_getmoptions>
 402c610:	e0bffa15 	stw	r2,-24(fp)
      break;
 402c614:	00003806 	br	402c6f8 <sogetopt+0x520>

#ifdef IP_RAW

   case IP_HDRINCL:
      /* indicate based on header-include flag in socket state */
      if (so->so_options & SO_HDRINCL)
 402c618:	e0bffb17 	ldw	r2,-20(fp)
 402c61c:	10800417 	ldw	r2,16(r2)
 402c620:	1088000c 	andi	r2,r2,8192
 402c624:	1005003a 	cmpeq	r2,r2,zero
 402c628:	1000041e 	bne	r2,zero,402c63c <sogetopt+0x464>
         *(int *)val = 1;
 402c62c:	e0fffd17 	ldw	r3,-12(fp)
 402c630:	00800044 	movi	r2,1
 402c634:	18800015 	stw	r2,0(r3)
 402c638:	00002f06 	br	402c6f8 <sogetopt+0x520>
      else
         *(int *)val = 0;
 402c63c:	e0bffd17 	ldw	r2,-12(fp)
 402c640:	10000015 	stw	zero,0(r2)
      break;
 402c644:	00002c06 	br	402c6f8 <sogetopt+0x520>
   case TCP_NODELAY:
   {
      struct inpcb * inp;
      struct tcpcb * tp;

      if(so->so_type != SOCK_STREAM)
 402c648:	e0bffb17 	ldw	r2,-20(fp)
 402c64c:	10800983 	ldbu	r2,38(r2)
 402c650:	10803fcc 	andi	r2,r2,255
 402c654:	1080201c 	xori	r2,r2,128
 402c658:	10bfe004 	addi	r2,r2,-128
 402c65c:	10800060 	cmpeqi	r2,r2,1
 402c660:	1000031e 	bne	r2,zero,402c670 <sogetopt+0x498>
      {
         error = EINVAL;
 402c664:	00800584 	movi	r2,22
 402c668:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c66c:	00002206 	br	402c6f8 <sogetopt+0x520>
      }
      inp = (struct inpcb *)(so->so_pcb);
 402c670:	e0bffb17 	ldw	r2,-20(fp)
 402c674:	10800117 	ldw	r2,4(r2)
 402c678:	e0bff615 	stw	r2,-40(fp)
      tp = intotcpcb(inp);
 402c67c:	e0bff617 	ldw	r2,-40(fp)
 402c680:	10800917 	ldw	r2,36(r2)
 402c684:	e0bff515 	stw	r2,-44(fp)
      if (!tp)
 402c688:	e0bff517 	ldw	r2,-44(fp)
 402c68c:	1004c03a 	cmpne	r2,r2,zero
 402c690:	1000031e 	bne	r2,zero,402c6a0 <sogetopt+0x4c8>
      {
         error = ENOTCONN;
 402c694:	00802004 	movi	r2,128
 402c698:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c69c:	00001606 	br	402c6f8 <sogetopt+0x520>
      }
      /* try to make sure that the argument pointer is valid */
      if (val == NULL)
 402c6a0:	e0bffd17 	ldw	r2,-12(fp)
 402c6a4:	1004c03a 	cmpne	r2,r2,zero
 402c6a8:	1000031e 	bne	r2,zero,402c6b8 <sogetopt+0x4e0>
      {
         error = ENP_PARAM;
 402c6ac:	00bffd84 	movi	r2,-10
 402c6b0:	e0bffa15 	stw	r2,-24(fp)
         break;
 402c6b4:	00001006 	br	402c6f8 <sogetopt+0x520>
      }
      /* if contents of integer addressed by arg are non-zero */
      if (tp->t_flags & TF_NODELAY)
 402c6b8:	e0bff517 	ldw	r2,-44(fp)
 402c6bc:	10800b0b 	ldhu	r2,44(r2)
 402c6c0:	10bfffcc 	andi	r2,r2,65535
 402c6c4:	1080010c 	andi	r2,r2,4
 402c6c8:	1005003a 	cmpeq	r2,r2,zero
 402c6cc:	1000041e 	bne	r2,zero,402c6e0 <sogetopt+0x508>
         *(int *)val = 1;  /* Nagle Algorithm is Enabled */
 402c6d0:	e0fffd17 	ldw	r3,-12(fp)
 402c6d4:	00800044 	movi	r2,1
 402c6d8:	18800015 	stw	r2,0(r3)
 402c6dc:	00000606 	br	402c6f8 <sogetopt+0x520>
      else
         *(int *)val = 0;  /* Nagle Algorithm is NOT Enabled */
 402c6e0:	e0bffd17 	ldw	r2,-12(fp)
 402c6e4:	10000015 	stw	zero,0(r2)

      break;
 402c6e8:	00000306 	br	402c6f8 <sogetopt+0x520>
   }

   default:
      return ENOPROTOOPT;
 402c6ec:	00801b44 	movi	r2,109
 402c6f0:	e0bffe15 	stw	r2,-8(fp)
 402c6f4:	00000206 	br	402c700 <sogetopt+0x528>
   }
   return error;     /* no error */
 402c6f8:	e0fffa17 	ldw	r3,-24(fp)
 402c6fc:	e0fffe15 	stw	r3,-8(fp)
 402c700:	e0bffe17 	ldw	r2,-8(fp)
}
 402c704:	e037883a 	mov	sp,fp
 402c708:	dfc00117 	ldw	ra,4(sp)
 402c70c:	df000017 	ldw	fp,0(sp)
 402c710:	dec00204 	addi	sp,sp,8
 402c714:	f800283a 	ret

0402c718 <sohasoutofband>:
 * RETURNS: 
 */

void
sohasoutofband(struct socket * so)
{
 402c718:	defffd04 	addi	sp,sp,-12
 402c71c:	dfc00215 	stw	ra,8(sp)
 402c720:	df000115 	stw	fp,4(sp)
 402c724:	df000104 	addi	fp,sp,4
 402c728:	e13fff15 	stw	r4,-4(fp)
   so->so_error = EHAVEOOB;   /* WILL be picked up by the socket */
 402c72c:	e0ffff17 	ldw	r3,-4(fp)
 402c730:	00803644 	movi	r2,217
 402c734:	18800615 	stw	r2,24(r3)
   sorwakeup (so);
 402c738:	e0bfff17 	ldw	r2,-4(fp)
 402c73c:	11400a04 	addi	r5,r2,40
 402c740:	e13fff17 	ldw	r4,-4(fp)
 402c744:	402cf340 	call	402cf34 <sbwakeup>
}
 402c748:	e037883a 	mov	sp,fp
 402c74c:	dfc00117 	ldw	ra,4(sp)
 402c750:	df000017 	ldw	fp,0(sp)
 402c754:	dec00204 	addi	sp,sp,8
 402c758:	f800283a 	ret

0402c75c <soisconnecting>:
 * RETURNS: 
 */

void
soisconnecting(struct socket * so)
{
 402c75c:	defffd04 	addi	sp,sp,-12
 402c760:	dfc00215 	stw	ra,8(sp)
 402c764:	df000115 	stw	fp,4(sp)
 402c768:	df000104 	addi	fp,sp,4
 402c76c:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~(SS_ISCONNECTED|SS_ISDISCONNECTING);
 402c770:	e0bfff17 	ldw	r2,-4(fp)
 402c774:	10c0088b 	ldhu	r3,34(r2)
 402c778:	00bffd44 	movi	r2,-11
 402c77c:	1884703a 	and	r2,r3,r2
 402c780:	1007883a 	mov	r3,r2
 402c784:	e0bfff17 	ldw	r2,-4(fp)
 402c788:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTING;
 402c78c:	e0bfff17 	ldw	r2,-4(fp)
 402c790:	1080088b 	ldhu	r2,34(r2)
 402c794:	10800114 	ori	r2,r2,4
 402c798:	1007883a 	mov	r3,r2
 402c79c:	e0bfff17 	ldw	r2,-4(fp)
 402c7a0:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
 402c7a4:	e0bfff17 	ldw	r2,-4(fp)
 402c7a8:	10800904 	addi	r2,r2,36
 402c7ac:	1009883a 	mov	r4,r2
 402c7b0:	40219280 	call	4021928 <tcp_wakeup>
}
 402c7b4:	e037883a 	mov	sp,fp
 402c7b8:	dfc00117 	ldw	ra,4(sp)
 402c7bc:	df000017 	ldw	fp,0(sp)
 402c7c0:	dec00204 	addi	sp,sp,8
 402c7c4:	f800283a 	ret

0402c7c8 <soisconnected>:
 * RETURNS: 
 */

void
soisconnected(struct socket * so)
{
 402c7c8:	defffc04 	addi	sp,sp,-16
 402c7cc:	dfc00315 	stw	ra,12(sp)
 402c7d0:	df000215 	stw	fp,8(sp)
 402c7d4:	df000204 	addi	fp,sp,8
 402c7d8:	e13fff15 	stw	r4,-4(fp)
   struct socket *   head  =  so->so_head;
 402c7dc:	e0bfff17 	ldw	r2,-4(fp)
 402c7e0:	10801b17 	ldw	r2,108(r2)
 402c7e4:	e0bffe15 	stw	r2,-8(fp)

   if (head) 
 402c7e8:	e0bffe17 	ldw	r2,-8(fp)
 402c7ec:	1005003a 	cmpeq	r2,r2,zero
 402c7f0:	1000141e 	bne	r2,zero,402c844 <soisconnected+0x7c>
   {
      if (soqremque(so, 0) == 0)
 402c7f4:	e13fff17 	ldw	r4,-4(fp)
 402c7f8:	000b883a 	mov	r5,zero
 402c7fc:	402ccd40 	call	402ccd4 <soqremque>
 402c800:	1004c03a 	cmpne	r2,r2,zero
 402c804:	1000031e 	bne	r2,zero,402c814 <soisconnected+0x4c>
         panic("soisconnected");
 402c808:	01010174 	movhi	r4,1029
 402c80c:	212e5e04 	addi	r4,r4,-18056
 402c810:	4020e100 	call	4020e10 <panic>
      soqinsque(head, so, 1);
 402c814:	e13ffe17 	ldw	r4,-8(fp)
 402c818:	e17fff17 	ldw	r5,-4(fp)
 402c81c:	01800044 	movi	r6,1
 402c820:	402cc280 	call	402cc28 <soqinsque>
      sorwakeup(head);
 402c824:	e0bffe17 	ldw	r2,-8(fp)
 402c828:	11400a04 	addi	r5,r2,40
 402c82c:	e13ffe17 	ldw	r4,-8(fp)
 402c830:	402cf340 	call	402cf34 <sbwakeup>
      tcp_wakeup ((char *)&head->so_timeo);
 402c834:	e0bffe17 	ldw	r2,-8(fp)
 402c838:	10800904 	addi	r2,r2,36
 402c83c:	1009883a 	mov	r4,r2
 402c840:	40219280 	call	4021928 <tcp_wakeup>
   }

   so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 402c844:	e0bfff17 	ldw	r2,-4(fp)
 402c848:	10c0088b 	ldhu	r3,34(r2)
 402c84c:	00bffcc4 	movi	r2,-13
 402c850:	1884703a 	and	r2,r3,r2
 402c854:	1007883a 	mov	r3,r2
 402c858:	e0bfff17 	ldw	r2,-4(fp)
 402c85c:	10c0088d 	sth	r3,34(r2)
   so->so_state |= SS_ISCONNECTED;
 402c860:	e0bfff17 	ldw	r2,-4(fp)
 402c864:	1080088b 	ldhu	r2,34(r2)
 402c868:	10800094 	ori	r2,r2,2
 402c86c:	1007883a 	mov	r3,r2
 402c870:	e0bfff17 	ldw	r2,-4(fp)
 402c874:	10c0088d 	sth	r3,34(r2)
   so->so_error = 0;
 402c878:	e0bfff17 	ldw	r2,-4(fp)
 402c87c:	10000615 	stw	zero,24(r2)
   tcp_wakeup  ((char *)&so->so_timeo);
 402c880:	e0bfff17 	ldw	r2,-4(fp)
 402c884:	10800904 	addi	r2,r2,36
 402c888:	1009883a 	mov	r4,r2
 402c88c:	40219280 	call	4021928 <tcp_wakeup>
   sorwakeup (so);
 402c890:	e0bfff17 	ldw	r2,-4(fp)
 402c894:	11400a04 	addi	r5,r2,40
 402c898:	e13fff17 	ldw	r4,-4(fp)
 402c89c:	402cf340 	call	402cf34 <sbwakeup>
   sowwakeup (so);
 402c8a0:	e0bfff17 	ldw	r2,-4(fp)
 402c8a4:	11401204 	addi	r5,r2,72
 402c8a8:	e13fff17 	ldw	r4,-4(fp)
 402c8ac:	402cf340 	call	402cf34 <sbwakeup>
}
 402c8b0:	e037883a 	mov	sp,fp
 402c8b4:	dfc00117 	ldw	ra,4(sp)
 402c8b8:	df000017 	ldw	fp,0(sp)
 402c8bc:	dec00204 	addi	sp,sp,8
 402c8c0:	f800283a 	ret

0402c8c4 <soisdisconnecting>:
 * RETURNS: 
 */

void
soisdisconnecting(struct socket * so)
{
 402c8c4:	defffd04 	addi	sp,sp,-12
 402c8c8:	dfc00215 	stw	ra,8(sp)
 402c8cc:	df000115 	stw	fp,4(sp)
 402c8d0:	df000104 	addi	fp,sp,4
 402c8d4:	e13fff15 	stw	r4,-4(fp)
   so->so_state &= ~SS_ISCONNECTING;
 402c8d8:	e0bfff17 	ldw	r2,-4(fp)
 402c8dc:	10c0088b 	ldhu	r3,34(r2)
 402c8e0:	00bffec4 	movi	r2,-5
 402c8e4:	1884703a 	and	r2,r3,r2
 402c8e8:	1007883a 	mov	r3,r2
 402c8ec:	e0bfff17 	ldw	r2,-4(fp)
 402c8f0:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_ISDISCONNECTING|SS_CANTRCVMORE|SS_CANTSENDMORE);
 402c8f4:	e0bfff17 	ldw	r2,-4(fp)
 402c8f8:	1080088b 	ldhu	r2,34(r2)
 402c8fc:	10800e14 	ori	r2,r2,56
 402c900:	1007883a 	mov	r3,r2
 402c904:	e0bfff17 	ldw	r2,-4(fp)
 402c908:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup  ((char *)&so->so_timeo);   
 402c90c:	e0bfff17 	ldw	r2,-4(fp)
 402c910:	10800904 	addi	r2,r2,36
 402c914:	1009883a 	mov	r4,r2
 402c918:	40219280 	call	4021928 <tcp_wakeup>
   sowwakeup (so);
 402c91c:	e0bfff17 	ldw	r2,-4(fp)
 402c920:	11401204 	addi	r5,r2,72
 402c924:	e13fff17 	ldw	r4,-4(fp)
 402c928:	402cf340 	call	402cf34 <sbwakeup>
   sorwakeup (so);
 402c92c:	e0bfff17 	ldw	r2,-4(fp)
 402c930:	11400a04 	addi	r5,r2,40
 402c934:	e13fff17 	ldw	r4,-4(fp)
 402c938:	402cf340 	call	402cf34 <sbwakeup>
}
 402c93c:	e037883a 	mov	sp,fp
 402c940:	dfc00117 	ldw	ra,4(sp)
 402c944:	df000017 	ldw	fp,0(sp)
 402c948:	dec00204 	addi	sp,sp,8
 402c94c:	f800283a 	ret

0402c950 <soisdisconnected>:
 * RETURNS: 
 */

void
soisdisconnected(struct socket * so)
{
 402c950:	defffd04 	addi	sp,sp,-12
 402c954:	dfc00215 	stw	ra,8(sp)
 402c958:	df000115 	stw	fp,4(sp)
 402c95c:	df000104 	addi	fp,sp,4
 402c960:	e13fff15 	stw	r4,-4(fp)
   if (so->so_state & SS_ISCONNECTING)
 402c964:	e0bfff17 	ldw	r2,-4(fp)
 402c968:	1080088b 	ldhu	r2,34(r2)
 402c96c:	10bfffcc 	andi	r2,r2,65535
 402c970:	1080010c 	andi	r2,r2,4
 402c974:	1005003a 	cmpeq	r2,r2,zero
 402c978:	1000061e 	bne	r2,zero,402c994 <soisdisconnected+0x44>
      so->so_state |= SS_WASCONNECTING;
 402c97c:	e0bfff17 	ldw	r2,-4(fp)
 402c980:	1080088b 	ldhu	r2,34(r2)
 402c984:	10880014 	ori	r2,r2,8192
 402c988:	1007883a 	mov	r3,r2
 402c98c:	e0bfff17 	ldw	r2,-4(fp)
 402c990:	10c0088d 	sth	r3,34(r2)
   so->so_state &= ~(SS_ISCONNECTING|SS_ISCONNECTED|SS_ISDISCONNECTING);
 402c994:	e0bfff17 	ldw	r2,-4(fp)
 402c998:	10c0088b 	ldhu	r3,34(r2)
 402c99c:	00bffc44 	movi	r2,-15
 402c9a0:	1884703a 	and	r2,r3,r2
 402c9a4:	1007883a 	mov	r3,r2
 402c9a8:	e0bfff17 	ldw	r2,-4(fp)
 402c9ac:	10c0088d 	sth	r3,34(r2)
   so->so_state |= (SS_CANTRCVMORE|SS_CANTSENDMORE);
 402c9b0:	e0bfff17 	ldw	r2,-4(fp)
 402c9b4:	1080088b 	ldhu	r2,34(r2)
 402c9b8:	10800c14 	ori	r2,r2,48
 402c9bc:	1007883a 	mov	r3,r2
 402c9c0:	e0bfff17 	ldw	r2,-4(fp)
 402c9c4:	10c0088d 	sth	r3,34(r2)
   tcp_wakeup ((char *)&so->so_timeo);
 402c9c8:	e0bfff17 	ldw	r2,-4(fp)
 402c9cc:	10800904 	addi	r2,r2,36
 402c9d0:	1009883a 	mov	r4,r2
 402c9d4:	40219280 	call	4021928 <tcp_wakeup>
   sowwakeup (so);
 402c9d8:	e0bfff17 	ldw	r2,-4(fp)
 402c9dc:	11401204 	addi	r5,r2,72
 402c9e0:	e13fff17 	ldw	r4,-4(fp)
 402c9e4:	402cf340 	call	402cf34 <sbwakeup>
   sorwakeup (so);
 402c9e8:	e0bfff17 	ldw	r2,-4(fp)
 402c9ec:	11400a04 	addi	r5,r2,40
 402c9f0:	e13fff17 	ldw	r4,-4(fp)
 402c9f4:	402cf340 	call	402cf34 <sbwakeup>
}
 402c9f8:	e037883a 	mov	sp,fp
 402c9fc:	dfc00117 	ldw	ra,4(sp)
 402ca00:	df000017 	ldw	fp,0(sp)
 402ca04:	dec00204 	addi	sp,sp,8
 402ca08:	f800283a 	ret

0402ca0c <sonewconn>:
 * RETURNS: 
 */

struct socket *   
sonewconn(struct socket * head)
{
 402ca0c:	defffa04 	addi	sp,sp,-24
 402ca10:	dfc00515 	stw	ra,20(sp)
 402ca14:	df000415 	stw	fp,16(sp)
 402ca18:	df000404 	addi	fp,sp,16
 402ca1c:	e13ffe15 	stw	r4,-8(fp)
   struct socket *   so;
   int rc;  

   if (head->so_qlen + head->so_q0len > 3 * head->so_qlimit / 2)
 402ca20:	e0bffe17 	ldw	r2,-8(fp)
 402ca24:	10801e43 	ldbu	r2,121(r2)
 402ca28:	10c03fcc 	andi	r3,r2,255
 402ca2c:	18c0201c 	xori	r3,r3,128
 402ca30:	18ffe004 	addi	r3,r3,-128
 402ca34:	e0bffe17 	ldw	r2,-8(fp)
 402ca38:	10801e03 	ldbu	r2,120(r2)
 402ca3c:	10803fcc 	andi	r2,r2,255
 402ca40:	1080201c 	xori	r2,r2,128
 402ca44:	10bfe004 	addi	r2,r2,-128
 402ca48:	1889883a 	add	r4,r3,r2
 402ca4c:	e0bffe17 	ldw	r2,-8(fp)
 402ca50:	10801e83 	ldbu	r2,122(r2)
 402ca54:	10c03fcc 	andi	r3,r2,255
 402ca58:	18c0201c 	xori	r3,r3,128
 402ca5c:	18ffe004 	addi	r3,r3,-128
 402ca60:	1805883a 	mov	r2,r3
 402ca64:	1085883a 	add	r2,r2,r2
 402ca68:	10c7883a 	add	r3,r2,r3
 402ca6c:	1804d7fa 	srli	r2,r3,31
 402ca70:	10c5883a 	add	r2,r2,r3
 402ca74:	1005d07a 	srai	r2,r2,1
 402ca78:	11006416 	blt	r2,r4,402cc0c <sonewconn+0x200>
      goto bad;
   if ((so = SOC_ALLOC (sizeof (*so))) == NULL)
 402ca7c:	01002104 	movi	r4,132
 402ca80:	40265f80 	call	40265f8 <npalloc>
 402ca84:	e0bffd15 	stw	r2,-12(fp)
 402ca88:	e0bffd17 	ldw	r2,-12(fp)
 402ca8c:	1005003a 	cmpeq	r2,r2,zero
 402ca90:	10005e1e 	bne	r2,zero,402cc0c <sonewconn+0x200>
      goto bad;
   so->next = NULL;
 402ca94:	e0bffd17 	ldw	r2,-12(fp)
 402ca98:	10000015 	stw	zero,0(r2)
   putq(&soq,(qp)so);      /* Place newly created socket in a queue */
 402ca9c:	e17ffd17 	ldw	r5,-12(fp)
 402caa0:	010101b4 	movhi	r4,1030
 402caa4:	21234504 	addi	r4,r4,-29420
 402caa8:	40255440 	call	4025544 <putq>
   so->so_type = head->so_type;
 402caac:	e0bffe17 	ldw	r2,-8(fp)
 402cab0:	10c00983 	ldbu	r3,38(r2)
 402cab4:	e0bffd17 	ldw	r2,-12(fp)
 402cab8:	10c00985 	stb	r3,38(r2)
   so->so_options = head->so_options &~ (unshort)SO_ACCEPTCONN;
 402cabc:	e0bffe17 	ldw	r2,-8(fp)
 402cac0:	10c00417 	ldw	r3,16(r2)
 402cac4:	00bfff44 	movi	r2,-3
 402cac8:	1886703a 	and	r3,r3,r2
 402cacc:	e0bffd17 	ldw	r2,-12(fp)
 402cad0:	10c00415 	stw	r3,16(r2)
   so->so_linger = head->so_linger;
 402cad4:	e0bffe17 	ldw	r2,-8(fp)
 402cad8:	10c0080b 	ldhu	r3,32(r2)
 402cadc:	e0bffd17 	ldw	r2,-12(fp)
 402cae0:	10c0080d 	sth	r3,32(r2)
   so->so_state = head->so_state | (unshort)SS_NOFDREF;
 402cae4:	e0bffe17 	ldw	r2,-8(fp)
 402cae8:	1080088b 	ldhu	r2,34(r2)
 402caec:	10800054 	ori	r2,r2,1
 402caf0:	1007883a 	mov	r3,r2
 402caf4:	e0bffd17 	ldw	r2,-12(fp)
 402caf8:	10c0088d 	sth	r3,34(r2)
   so->so_proto = head->so_proto;
 402cafc:	e0bffe17 	ldw	r2,-8(fp)
 402cb00:	10c00217 	ldw	r3,8(r2)
 402cb04:	e0bffd17 	ldw	r2,-12(fp)
 402cb08:	10c00215 	stw	r3,8(r2)
   so->so_timeo = head->so_timeo;
 402cb0c:	e0bffe17 	ldw	r2,-8(fp)
 402cb10:	10c0090b 	ldhu	r3,36(r2)
 402cb14:	e0bffd17 	ldw	r2,-12(fp)
 402cb18:	10c0090d 	sth	r3,36(r2)
   so->so_rcv.sb_hiwat = (u_int)tcp_recvspace;
 402cb1c:	00810174 	movhi	r2,1029
 402cb20:	10b9fc04 	addi	r2,r2,-6160
 402cb24:	10c00017 	ldw	r3,0(r2)
 402cb28:	e0bffd17 	ldw	r2,-12(fp)
 402cb2c:	10c00b15 	stw	r3,44(r2)
   so->so_snd.sb_hiwat = (u_int)tcp_sendspace;
 402cb30:	00810174 	movhi	r2,1029
 402cb34:	10b9fb04 	addi	r2,r2,-6164
 402cb38:	10c00017 	ldw	r3,0(r2)
 402cb3c:	e0bffd17 	ldw	r2,-12(fp)
 402cb40:	10c01315 	stw	r3,76(r2)
   soqinsque (head, so, 0);
 402cb44:	e13ffe17 	ldw	r4,-8(fp)
 402cb48:	e17ffd17 	ldw	r5,-12(fp)
 402cb4c:	000d883a 	mov	r6,zero
 402cb50:	402cc280 	call	402cc28 <soqinsque>
   so->so_req = PRU_ATTACH;
 402cb54:	e0bffd17 	ldw	r2,-12(fp)
 402cb58:	10000715 	stw	zero,28(r2)
   so->so_domain = head->so_domain;
 402cb5c:	e0bffe17 	ldw	r2,-8(fp)
 402cb60:	10c00517 	ldw	r3,20(r2)
 402cb64:	e0bffd17 	ldw	r2,-12(fp)
 402cb68:	10c00515 	stw	r3,20(r2)

   if ((*so->so_proto->pr_usrreq)(so, (struct mbuf *)0, (struct mbuf *)0))
 402cb6c:	e0bffd17 	ldw	r2,-12(fp)
 402cb70:	10800217 	ldw	r2,8(r2)
 402cb74:	10800317 	ldw	r2,12(r2)
 402cb78:	e13ffd17 	ldw	r4,-12(fp)
 402cb7c:	000b883a 	mov	r5,zero
 402cb80:	000d883a 	mov	r6,zero
 402cb84:	103ee83a 	callr	r2
 402cb88:	1004c03a 	cmpne	r2,r2,zero
 402cb8c:	1000161e 	bne	r2,zero,402cbe8 <sonewconn+0x1dc>
      goto bad2;
   if (so_evtmap)
 402cb90:	00810174 	movhi	r2,1029
 402cb94:	10820a04 	addi	r2,r2,2088
 402cb98:	10800003 	ldbu	r2,0(r2)
 402cb9c:	10803fcc 	andi	r2,r2,255
 402cba0:	1005003a 	cmpeq	r2,r2,zero
 402cba4:	10000d1e 	bne	r2,zero,402cbdc <sonewconn+0x1d0>
   {
      rc = (*so_evtmap_create) (so);                       
 402cba8:	00810174 	movhi	r2,1029
 402cbac:	10820804 	addi	r2,r2,2080
 402cbb0:	10800017 	ldw	r2,0(r2)
 402cbb4:	e13ffd17 	ldw	r4,-12(fp)
 402cbb8:	103ee83a 	callr	r2
 402cbbc:	e0bffc15 	stw	r2,-16(fp)
      if (rc != 0) goto bad2;
 402cbc0:	e0bffc17 	ldw	r2,-16(fp)
 402cbc4:	1004c03a 	cmpne	r2,r2,zero
 402cbc8:	1000071e 	bne	r2,zero,402cbe8 <sonewconn+0x1dc>
      so->owner = head->owner;
 402cbcc:	e0bffe17 	ldw	r2,-8(fp)
 402cbd0:	10c02003 	ldbu	r3,128(r2)
 402cbd4:	e0bffd17 	ldw	r2,-12(fp)
 402cbd8:	10c02005 	stb	r3,128(r2)
   }
   return (so);
 402cbdc:	e0bffd17 	ldw	r2,-12(fp)
 402cbe0:	e0bfff15 	stw	r2,-4(fp)
 402cbe4:	00000a06 	br	402cc10 <sonewconn+0x204>
   
bad2:
   (void) soqremque (so, 0);
 402cbe8:	e13ffd17 	ldw	r4,-12(fp)
 402cbec:	000b883a 	mov	r5,zero
 402cbf0:	402ccd40 	call	402ccd4 <soqremque>
   qdel(&soq, so);   /* Delete the socket entry from the queue */
 402cbf4:	010101b4 	movhi	r4,1030
 402cbf8:	21234504 	addi	r4,r4,-29420
 402cbfc:	e17ffd17 	ldw	r5,-12(fp)
 402cc00:	40255f40 	call	40255f4 <qdel>
   SOC_FREE(so);  /* Free the socket structure */
 402cc04:	e13ffd17 	ldw	r4,-12(fp)
 402cc08:	40266ec0 	call	40266ec <npfree>
bad:
   return ((struct socket *)0);
 402cc0c:	e03fff15 	stw	zero,-4(fp)
 402cc10:	e0bfff17 	ldw	r2,-4(fp)
}
 402cc14:	e037883a 	mov	sp,fp
 402cc18:	dfc00117 	ldw	ra,4(sp)
 402cc1c:	df000017 	ldw	fp,0(sp)
 402cc20:	dec00204 	addi	sp,sp,8
 402cc24:	f800283a 	ret

0402cc28 <soqinsque>:

void
soqinsque(struct socket * head, 
   struct socket *   so,
   int   q)
{
 402cc28:	defffc04 	addi	sp,sp,-16
 402cc2c:	df000315 	stw	fp,12(sp)
 402cc30:	df000304 	addi	fp,sp,12
 402cc34:	e13ffd15 	stw	r4,-12(fp)
 402cc38:	e17ffe15 	stw	r5,-8(fp)
 402cc3c:	e1bfff15 	stw	r6,-4(fp)
   so->so_head = head;
 402cc40:	e0fffe17 	ldw	r3,-8(fp)
 402cc44:	e0bffd17 	ldw	r2,-12(fp)
 402cc48:	18801b15 	stw	r2,108(r3)
   if (q == 0) 
 402cc4c:	e0bfff17 	ldw	r2,-4(fp)
 402cc50:	1004c03a 	cmpne	r2,r2,zero
 402cc54:	10000e1e 	bne	r2,zero,402cc90 <soqinsque+0x68>
   {
      head->so_q0len++;
 402cc58:	e0bffd17 	ldw	r2,-12(fp)
 402cc5c:	10801e03 	ldbu	r2,120(r2)
 402cc60:	10800044 	addi	r2,r2,1
 402cc64:	1007883a 	mov	r3,r2
 402cc68:	e0bffd17 	ldw	r2,-12(fp)
 402cc6c:	10c01e05 	stb	r3,120(r2)
      so->so_q0 = head->so_q0;
 402cc70:	e0bffd17 	ldw	r2,-12(fp)
 402cc74:	10c01c17 	ldw	r3,112(r2)
 402cc78:	e0bffe17 	ldw	r2,-8(fp)
 402cc7c:	10c01c15 	stw	r3,112(r2)
      head->so_q0 = so;
 402cc80:	e0fffd17 	ldw	r3,-12(fp)
 402cc84:	e0bffe17 	ldw	r2,-8(fp)
 402cc88:	18801c15 	stw	r2,112(r3)
 402cc8c:	00000d06 	br	402ccc4 <soqinsque+0x9c>
   } else 
   {
      head->so_qlen++;
 402cc90:	e0bffd17 	ldw	r2,-12(fp)
 402cc94:	10801e43 	ldbu	r2,121(r2)
 402cc98:	10800044 	addi	r2,r2,1
 402cc9c:	1007883a 	mov	r3,r2
 402cca0:	e0bffd17 	ldw	r2,-12(fp)
 402cca4:	10c01e45 	stb	r3,121(r2)
      so->so_q = head->so_q;
 402cca8:	e0bffd17 	ldw	r2,-12(fp)
 402ccac:	10c01d17 	ldw	r3,116(r2)
 402ccb0:	e0bffe17 	ldw	r2,-8(fp)
 402ccb4:	10c01d15 	stw	r3,116(r2)
      head->so_q = so;
 402ccb8:	e0fffd17 	ldw	r3,-12(fp)
 402ccbc:	e0bffe17 	ldw	r2,-8(fp)
 402ccc0:	18801d15 	stw	r2,116(r3)
   }
}
 402ccc4:	e037883a 	mov	sp,fp
 402ccc8:	df000017 	ldw	fp,0(sp)
 402cccc:	dec00104 	addi	sp,sp,4
 402ccd0:	f800283a 	ret

0402ccd4 <soqremque>:
 * RETURNS: 
 */

int
soqremque(struct socket * so, int q)
{
 402ccd4:	defff804 	addi	sp,sp,-32
 402ccd8:	df000715 	stw	fp,28(sp)
 402ccdc:	df000704 	addi	fp,sp,28
 402cce0:	e13ffc15 	stw	r4,-16(fp)
 402cce4:	e17ffd15 	stw	r5,-12(fp)
   struct socket *   head, *  prev, *  next;

   head = so->so_head;
 402cce8:	e0bffc17 	ldw	r2,-16(fp)
 402ccec:	10801b17 	ldw	r2,108(r2)
 402ccf0:	e0bffb15 	stw	r2,-20(fp)
   prev = head;
 402ccf4:	e0bffb17 	ldw	r2,-20(fp)
 402ccf8:	e0bffa15 	stw	r2,-24(fp)
   for (;;) 
   {
      next = q ? prev->so_q : prev->so_q0;
 402ccfc:	e0bffd17 	ldw	r2,-12(fp)
 402cd00:	1005003a 	cmpeq	r2,r2,zero
 402cd04:	1000041e 	bne	r2,zero,402cd18 <soqremque+0x44>
 402cd08:	e0bffa17 	ldw	r2,-24(fp)
 402cd0c:	10801d17 	ldw	r2,116(r2)
 402cd10:	e0bfff15 	stw	r2,-4(fp)
 402cd14:	00000306 	br	402cd24 <soqremque+0x50>
 402cd18:	e0bffa17 	ldw	r2,-24(fp)
 402cd1c:	10801c17 	ldw	r2,112(r2)
 402cd20:	e0bfff15 	stw	r2,-4(fp)
 402cd24:	e0bfff17 	ldw	r2,-4(fp)
 402cd28:	e0bff915 	stw	r2,-28(fp)
      if (next == so)
 402cd2c:	e0fff917 	ldw	r3,-28(fp)
 402cd30:	e0bffc17 	ldw	r2,-16(fp)
 402cd34:	18800826 	beq	r3,r2,402cd58 <soqremque+0x84>
         break;
      if (next == head)
 402cd38:	e0fff917 	ldw	r3,-28(fp)
 402cd3c:	e0bffb17 	ldw	r2,-20(fp)
 402cd40:	1880021e 	bne	r3,r2,402cd4c <soqremque+0x78>
         return (0);
 402cd44:	e03ffe15 	stw	zero,-8(fp)
 402cd48:	00002506 	br	402cde0 <soqremque+0x10c>
      prev = next;
 402cd4c:	e0bff917 	ldw	r2,-28(fp)
 402cd50:	e0bffa15 	stw	r2,-24(fp)
   }
 402cd54:	003fe906 	br	402ccfc <soqremque+0x28>
   if (q == 0) 
 402cd58:	e0bffd17 	ldw	r2,-12(fp)
 402cd5c:	1004c03a 	cmpne	r2,r2,zero
 402cd60:	10000b1e 	bne	r2,zero,402cd90 <soqremque+0xbc>
   {
      prev->so_q0 = next->so_q0;
 402cd64:	e0bff917 	ldw	r2,-28(fp)
 402cd68:	10c01c17 	ldw	r3,112(r2)
 402cd6c:	e0bffa17 	ldw	r2,-24(fp)
 402cd70:	10c01c15 	stw	r3,112(r2)
      head->so_q0len--;
 402cd74:	e0bffb17 	ldw	r2,-20(fp)
 402cd78:	10801e03 	ldbu	r2,120(r2)
 402cd7c:	10bfffc4 	addi	r2,r2,-1
 402cd80:	1007883a 	mov	r3,r2
 402cd84:	e0bffb17 	ldw	r2,-20(fp)
 402cd88:	10c01e05 	stb	r3,120(r2)
 402cd8c:	00000a06 	br	402cdb8 <soqremque+0xe4>
   } else 
   {
      prev->so_q = next->so_q;
 402cd90:	e0bff917 	ldw	r2,-28(fp)
 402cd94:	10c01d17 	ldw	r3,116(r2)
 402cd98:	e0bffa17 	ldw	r2,-24(fp)
 402cd9c:	10c01d15 	stw	r3,116(r2)
      head->so_qlen--;
 402cda0:	e0bffb17 	ldw	r2,-20(fp)
 402cda4:	10801e43 	ldbu	r2,121(r2)
 402cda8:	10bfffc4 	addi	r2,r2,-1
 402cdac:	1007883a 	mov	r3,r2
 402cdb0:	e0bffb17 	ldw	r2,-20(fp)
 402cdb4:	10c01e45 	stb	r3,121(r2)
   }
   next->so_q0 = next->so_q = 0;
 402cdb8:	e0bff917 	ldw	r2,-28(fp)
 402cdbc:	10001d15 	stw	zero,116(r2)
 402cdc0:	e0bff917 	ldw	r2,-28(fp)
 402cdc4:	10c01d17 	ldw	r3,116(r2)
 402cdc8:	e0bff917 	ldw	r2,-28(fp)
 402cdcc:	10c01c15 	stw	r3,112(r2)
   next->so_head = 0;
 402cdd0:	e0bff917 	ldw	r2,-28(fp)
 402cdd4:	10001b15 	stw	zero,108(r2)
   return 1;
 402cdd8:	00800044 	movi	r2,1
 402cddc:	e0bffe15 	stw	r2,-8(fp)
 402cde0:	e0bffe17 	ldw	r2,-8(fp)
}
 402cde4:	e037883a 	mov	sp,fp
 402cde8:	df000017 	ldw	fp,0(sp)
 402cdec:	dec00104 	addi	sp,sp,4
 402cdf0:	f800283a 	ret

0402cdf4 <socantsendmore>:
 * RETURNS: 
 */

void
socantsendmore(struct socket * so)
{
 402cdf4:	defffd04 	addi	sp,sp,-12
 402cdf8:	dfc00215 	stw	ra,8(sp)
 402cdfc:	df000115 	stw	fp,4(sp)
 402ce00:	df000104 	addi	fp,sp,4
 402ce04:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTSENDMORE;
 402ce08:	e0bfff17 	ldw	r2,-4(fp)
 402ce0c:	1080088b 	ldhu	r2,34(r2)
 402ce10:	10800414 	ori	r2,r2,16
 402ce14:	1007883a 	mov	r3,r2
 402ce18:	e0bfff17 	ldw	r2,-4(fp)
 402ce1c:	10c0088d 	sth	r3,34(r2)
   sowwakeup(so);
 402ce20:	e0bfff17 	ldw	r2,-4(fp)
 402ce24:	11401204 	addi	r5,r2,72
 402ce28:	e13fff17 	ldw	r4,-4(fp)
 402ce2c:	402cf340 	call	402cf34 <sbwakeup>
}
 402ce30:	e037883a 	mov	sp,fp
 402ce34:	dfc00117 	ldw	ra,4(sp)
 402ce38:	df000017 	ldw	fp,0(sp)
 402ce3c:	dec00204 	addi	sp,sp,8
 402ce40:	f800283a 	ret

0402ce44 <socantrcvmore>:
 * RETURNS: 
 */

void
socantrcvmore(struct socket * so)
{
 402ce44:	defffd04 	addi	sp,sp,-12
 402ce48:	dfc00215 	stw	ra,8(sp)
 402ce4c:	df000115 	stw	fp,4(sp)
 402ce50:	df000104 	addi	fp,sp,4
 402ce54:	e13fff15 	stw	r4,-4(fp)
   so->so_state |= SS_CANTRCVMORE;
 402ce58:	e0bfff17 	ldw	r2,-4(fp)
 402ce5c:	1080088b 	ldhu	r2,34(r2)
 402ce60:	10800814 	ori	r2,r2,32
 402ce64:	1007883a 	mov	r3,r2
 402ce68:	e0bfff17 	ldw	r2,-4(fp)
 402ce6c:	10c0088d 	sth	r3,34(r2)
   sorwakeup(so);
 402ce70:	e0bfff17 	ldw	r2,-4(fp)
 402ce74:	11400a04 	addi	r5,r2,40
 402ce78:	e13fff17 	ldw	r4,-4(fp)
 402ce7c:	402cf340 	call	402cf34 <sbwakeup>
}
 402ce80:	e037883a 	mov	sp,fp
 402ce84:	dfc00117 	ldw	ra,4(sp)
 402ce88:	df000017 	ldw	fp,0(sp)
 402ce8c:	dec00204 	addi	sp,sp,8
 402ce90:	f800283a 	ret

0402ce94 <sbselqueue>:
 * RETURNS: 
 */

void
sbselqueue(struct sockbuf * sb)
{
 402ce94:	defffe04 	addi	sp,sp,-8
 402ce98:	df000115 	stw	fp,4(sp)
 402ce9c:	df000104 	addi	fp,sp,4
 402cea0:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_SEL;
 402cea4:	e0bfff17 	ldw	r2,-4(fp)
 402cea8:	1080070b 	ldhu	r2,28(r2)
 402ceac:	10800214 	ori	r2,r2,8
 402ceb0:	1007883a 	mov	r3,r2
 402ceb4:	e0bfff17 	ldw	r2,-4(fp)
 402ceb8:	10c0070d 	sth	r3,28(r2)
}
 402cebc:	e037883a 	mov	sp,fp
 402cec0:	df000017 	ldw	fp,0(sp)
 402cec4:	dec00104 	addi	sp,sp,4
 402cec8:	f800283a 	ret

0402cecc <sbwait>:
 * RETURNS: 
 */

void
sbwait(struct sockbuf * sb)
{
 402cecc:	defffd04 	addi	sp,sp,-12
 402ced0:	dfc00215 	stw	ra,8(sp)
 402ced4:	df000115 	stw	fp,4(sp)
 402ced8:	df000104 	addi	fp,sp,4
 402cedc:	e13fff15 	stw	r4,-4(fp)
   sb->sb_flags |= SB_WAIT;
 402cee0:	e0bfff17 	ldw	r2,-4(fp)
 402cee4:	1080070b 	ldhu	r2,28(r2)
 402cee8:	10800114 	ori	r2,r2,4
 402ceec:	1007883a 	mov	r3,r2
 402cef0:	e0bfff17 	ldw	r2,-4(fp)
 402cef4:	10c0070d 	sth	r3,28(r2)
   tcp_sleep ((char *)&sb->sb_cc);
 402cef8:	e0bfff17 	ldw	r2,-4(fp)
 402cefc:	1009883a 	mov	r4,r2
 402cf00:	40217880 	call	4021788 <tcp_sleep>
   sb->sb_flags &= ~SB_WAIT;
 402cf04:	e0bfff17 	ldw	r2,-4(fp)
 402cf08:	10c0070b 	ldhu	r3,28(r2)
 402cf0c:	00bffec4 	movi	r2,-5
 402cf10:	1884703a 	and	r2,r3,r2
 402cf14:	1007883a 	mov	r3,r2
 402cf18:	e0bfff17 	ldw	r2,-4(fp)
 402cf1c:	10c0070d 	sth	r3,28(r2)
}
 402cf20:	e037883a 	mov	sp,fp
 402cf24:	dfc00117 	ldw	ra,4(sp)
 402cf28:	df000017 	ldw	fp,0(sp)
 402cf2c:	dec00204 	addi	sp,sp,8
 402cf30:	f800283a 	ret

0402cf34 <sbwakeup>:
 * RETURNS: 
 */

void
sbwakeup(struct socket * so, struct sockbuf * sb)
{
 402cf34:	defffc04 	addi	sp,sp,-16
 402cf38:	dfc00315 	stw	ra,12(sp)
 402cf3c:	df000215 	stw	fp,8(sp)
 402cf40:	df000204 	addi	fp,sp,8
 402cf44:	e13ffe15 	stw	r4,-8(fp)
 402cf48:	e17fff15 	stw	r5,-4(fp)
   if (sb->sb_flags & SB_SEL) 
 402cf4c:	e0bfff17 	ldw	r2,-4(fp)
 402cf50:	1080070b 	ldhu	r2,28(r2)
 402cf54:	10bfffcc 	andi	r2,r2,65535
 402cf58:	1080020c 	andi	r2,r2,8
 402cf5c:	1005003a 	cmpeq	r2,r2,zero
 402cf60:	10000d1e 	bne	r2,zero,402cf98 <sbwakeup+0x64>
   {
      select_wait = 0;
 402cf64:	00810174 	movhi	r2,1029
 402cf68:	1081ec04 	addi	r2,r2,1968
 402cf6c:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
      tcp_wakeup ((char *)&select_wait);
 402cf70:	01010174 	movhi	r4,1029
 402cf74:	2101ec04 	addi	r4,r4,1968
 402cf78:	40219280 	call	4021928 <tcp_wakeup>
#else
      tcp_wakeup2 (so->owner);
#endif      
      sb->sb_flags &= ~SB_SEL;
 402cf7c:	e0bfff17 	ldw	r2,-4(fp)
 402cf80:	10c0070b 	ldhu	r3,28(r2)
 402cf84:	00bffdc4 	movi	r2,-9
 402cf88:	1884703a 	and	r2,r3,r2
 402cf8c:	1007883a 	mov	r3,r2
 402cf90:	e0bfff17 	ldw	r2,-4(fp)
 402cf94:	10c0070d 	sth	r3,28(r2)
#ifdef SOCK_WAKEALWAYS  /* Always wake the socket? */
   /* Systems Like Green Hills Integrity RTOS, need to process socket
      input even if looks like no one is blocked on the socket */
   tcp_wakeup ((char *)&sb->sb_cc); /* signal wake on socket */
#else /* older BSD style code - only call tcp_wakeup if blocked */
   if (sb->sb_flags & SB_WAIT)   /* is sockbuf's WAIT flag set? */
 402cf98:	e0bfff17 	ldw	r2,-4(fp)
 402cf9c:	1080070b 	ldhu	r2,28(r2)
 402cfa0:	10bfffcc 	andi	r2,r2,65535
 402cfa4:	1080010c 	andi	r2,r2,4
 402cfa8:	1005003a 	cmpeq	r2,r2,zero
 402cfac:	1000031e 	bne	r2,zero,402cfbc <sbwakeup+0x88>
   {
      tcp_wakeup ((char *)&sb->sb_cc);   /* call port wakeup routine */
 402cfb0:	e0bfff17 	ldw	r2,-4(fp)
 402cfb4:	1009883a 	mov	r4,r2
 402cfb8:	40219280 	call	4021928 <tcp_wakeup>
   }
#endif   /* SOCK_WAKEALWAYS */
}
 402cfbc:	e037883a 	mov	sp,fp
 402cfc0:	dfc00117 	ldw	ra,4(sp)
 402cfc4:	df000017 	ldw	fp,0(sp)
 402cfc8:	dec00204 	addi	sp,sp,8
 402cfcc:	f800283a 	ret

0402cfd0 <soreserve>:

int
soreserve(struct socket * so, 
   u_long   sndcc, 
   u_long   rcvcc)
{
 402cfd0:	defffa04 	addi	sp,sp,-24
 402cfd4:	dfc00515 	stw	ra,20(sp)
 402cfd8:	df000415 	stw	fp,16(sp)
 402cfdc:	df000404 	addi	fp,sp,16
 402cfe0:	e13ffc15 	stw	r4,-16(fp)
 402cfe4:	e17ffd15 	stw	r5,-12(fp)
 402cfe8:	e1bffe15 	stw	r6,-8(fp)
   if (sbreserve(&so->so_snd, sndcc) == 0)
 402cfec:	e0bffc17 	ldw	r2,-16(fp)
 402cff0:	11001204 	addi	r4,r2,72
 402cff4:	e17ffd17 	ldw	r5,-12(fp)
 402cff8:	402d0500 	call	402d050 <sbreserve>
 402cffc:	1005003a 	cmpeq	r2,r2,zero
 402d000:	10000b1e 	bne	r2,zero,402d030 <soreserve+0x60>
      goto bad;
   if (sbreserve(&so->so_rcv, rcvcc) == 0)
 402d004:	e0bffc17 	ldw	r2,-16(fp)
 402d008:	11000a04 	addi	r4,r2,40
 402d00c:	e17ffe17 	ldw	r5,-8(fp)
 402d010:	402d0500 	call	402d050 <sbreserve>
 402d014:	1005003a 	cmpeq	r2,r2,zero
 402d018:	1000021e 	bne	r2,zero,402d024 <soreserve+0x54>
      goto bad2;
   return (0);
 402d01c:	e03fff15 	stw	zero,-4(fp)
 402d020:	00000506 	br	402d038 <soreserve+0x68>
bad2:
   sbrelease(&so->so_snd);
 402d024:	e0bffc17 	ldw	r2,-16(fp)
 402d028:	11001204 	addi	r4,r2,72
 402d02c:	402d0b00 	call	402d0b0 <sbrelease>
bad:
   return (ENOBUFS);
 402d030:	00801a44 	movi	r2,105
 402d034:	e0bfff15 	stw	r2,-4(fp)
 402d038:	e0bfff17 	ldw	r2,-4(fp)
}
 402d03c:	e037883a 	mov	sp,fp
 402d040:	dfc00117 	ldw	ra,4(sp)
 402d044:	df000017 	ldw	fp,0(sp)
 402d048:	dec00204 	addi	sp,sp,8
 402d04c:	f800283a 	ret

0402d050 <sbreserve>:
 * RETURNS: 
 */

int
sbreserve(struct sockbuf * sb, u_long cc)
{
 402d050:	defffc04 	addi	sp,sp,-16
 402d054:	df000315 	stw	fp,12(sp)
 402d058:	df000304 	addi	fp,sp,12
 402d05c:	e13ffd15 	stw	r4,-12(fp)
 402d060:	e17ffe15 	stw	r5,-8(fp)
#ifdef COMPILER_32BIT
   if (cc > (u_long)SB_MAX * CLBYTES / (2 * MSIZE + CLBYTES))
      return (0);
#endif
   sb->sb_hiwat = cc;
 402d064:	e0fffd17 	ldw	r3,-12(fp)
 402d068:	e0bffe17 	ldw	r2,-8(fp)
 402d06c:	18800115 	stw	r2,4(r3)
   sb->sb_mbmax = MIN(cc * 2, SB_MAX);
 402d070:	e0bffe17 	ldw	r2,-8(fp)
 402d074:	1085883a 	add	r2,r2,r2
 402d078:	e0bfff15 	stw	r2,-4(fp)
 402d07c:	e0ffff17 	ldw	r3,-4(fp)
 402d080:	18900070 	cmpltui	r2,r3,16385
 402d084:	1000021e 	bne	r2,zero,402d090 <sbreserve+0x40>
 402d088:	00900004 	movi	r2,16384
 402d08c:	e0bfff15 	stw	r2,-4(fp)
 402d090:	e0bffd17 	ldw	r2,-12(fp)
 402d094:	e0ffff17 	ldw	r3,-4(fp)
 402d098:	10c00315 	stw	r3,12(r2)
   return (1);
 402d09c:	00800044 	movi	r2,1
}
 402d0a0:	e037883a 	mov	sp,fp
 402d0a4:	df000017 	ldw	fp,0(sp)
 402d0a8:	dec00104 	addi	sp,sp,4
 402d0ac:	f800283a 	ret

0402d0b0 <sbrelease>:
 * RETURNS: 
 */

void
sbrelease(struct sockbuf * sb)
{
 402d0b0:	defffd04 	addi	sp,sp,-12
 402d0b4:	dfc00215 	stw	ra,8(sp)
 402d0b8:	df000115 	stw	fp,4(sp)
 402d0bc:	df000104 	addi	fp,sp,4
 402d0c0:	e13fff15 	stw	r4,-4(fp)
   sbflush(sb);
 402d0c4:	e13fff17 	ldw	r4,-4(fp)
 402d0c8:	402d6700 	call	402d670 <sbflush>
   sb->sb_hiwat = sb->sb_mbmax = 0;
 402d0cc:	e0bfff17 	ldw	r2,-4(fp)
 402d0d0:	10000315 	stw	zero,12(r2)
 402d0d4:	e0bfff17 	ldw	r2,-4(fp)
 402d0d8:	10c00317 	ldw	r3,12(r2)
 402d0dc:	e0bfff17 	ldw	r2,-4(fp)
 402d0e0:	10c00115 	stw	r3,4(r2)
}
 402d0e4:	e037883a 	mov	sp,fp
 402d0e8:	dfc00117 	ldw	ra,4(sp)
 402d0ec:	df000017 	ldw	fp,0(sp)
 402d0f0:	dec00204 	addi	sp,sp,8
 402d0f4:	f800283a 	ret

0402d0f8 <sbappend>:
 * RETURNS: 
 */

void
sbappend(struct sockbuf * sb, struct mbuf * m)
{
 402d0f8:	defffb04 	addi	sp,sp,-20
 402d0fc:	dfc00415 	stw	ra,16(sp)
 402d100:	df000315 	stw	fp,12(sp)
 402d104:	df000304 	addi	fp,sp,12
 402d108:	e13ffe15 	stw	r4,-8(fp)
 402d10c:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  n;

   if (m == 0)
 402d110:	e0bfff17 	ldw	r2,-4(fp)
 402d114:	1005003a 	cmpeq	r2,r2,zero
 402d118:	10001c1e 	bne	r2,zero,402d18c <sbappend+0x94>
      return;
   ENTER_CRIT_SECTION(sb);
 402d11c:	4025db40 	call	4025db4 <irq_Mask>
   if ((n = sb->sb_mb) != NULL) 
 402d120:	e0bffe17 	ldw	r2,-8(fp)
 402d124:	10800617 	ldw	r2,24(r2)
 402d128:	e0bffd15 	stw	r2,-12(fp)
 402d12c:	e0bffd17 	ldw	r2,-12(fp)
 402d130:	1005003a 	cmpeq	r2,r2,zero
 402d134:	1000101e 	bne	r2,zero,402d178 <sbappend+0x80>
   {
      while (n->m_act)
 402d138:	00000306 	br	402d148 <sbappend+0x50>
         n = n->m_act;
 402d13c:	e0bffd17 	ldw	r2,-12(fp)
 402d140:	10800717 	ldw	r2,28(r2)
 402d144:	e0bffd15 	stw	r2,-12(fp)
   if (m == 0)
      return;
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
 402d148:	e0bffd17 	ldw	r2,-12(fp)
 402d14c:	10800717 	ldw	r2,28(r2)
 402d150:	1004c03a 	cmpne	r2,r2,zero
 402d154:	103ff91e 	bne	r2,zero,402d13c <sbappend+0x44>
         n = n->m_act;
      while (n->m_next)
 402d158:	00000306 	br	402d168 <sbappend+0x70>
         n = n->m_next;
 402d15c:	e0bffd17 	ldw	r2,-12(fp)
 402d160:	10800617 	ldw	r2,24(r2)
 402d164:	e0bffd15 	stw	r2,-12(fp)
   ENTER_CRIT_SECTION(sb);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
         n = n->m_act;
      while (n->m_next)
 402d168:	e0bffd17 	ldw	r2,-12(fp)
 402d16c:	10800617 	ldw	r2,24(r2)
 402d170:	1004c03a 	cmpne	r2,r2,zero
 402d174:	103ff91e 	bne	r2,zero,402d15c <sbappend+0x64>
         n = n->m_next;
   }
   sbcompress(sb, m, n);
 402d178:	e13ffe17 	ldw	r4,-8(fp)
 402d17c:	e17fff17 	ldw	r5,-4(fp)
 402d180:	e1bffd17 	ldw	r6,-12(fp)
 402d184:	402d4880 	call	402d488 <sbcompress>
   EXIT_CRIT_SECTION(sb);
 402d188:	4025e100 	call	4025e10 <irq_Unmask>
}
 402d18c:	e037883a 	mov	sp,fp
 402d190:	dfc00117 	ldw	ra,4(sp)
 402d194:	df000017 	ldw	fp,0(sp)
 402d198:	dec00204 	addi	sp,sp,8
 402d19c:	f800283a 	ret

0402d1a0 <sbappendrecord>:
 */

void
sbappendrecord(struct sockbuf * sb, 
   struct mbuf *  m0)
{
 402d1a0:	defffb04 	addi	sp,sp,-20
 402d1a4:	dfc00415 	stw	ra,16(sp)
 402d1a8:	df000315 	stw	fp,12(sp)
 402d1ac:	df000304 	addi	fp,sp,12
 402d1b0:	e13ffe15 	stw	r4,-8(fp)
 402d1b4:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m;

   if (m0 == 0)
 402d1b8:	e0bfff17 	ldw	r2,-4(fp)
 402d1bc:	1005003a 	cmpeq	r2,r2,zero
 402d1c0:	10002a1e 	bne	r2,zero,402d26c <sbappendrecord+0xcc>
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
 402d1c4:	4025db40 	call	4025db4 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 402d1c8:	e0bffe17 	ldw	r2,-8(fp)
 402d1cc:	10800617 	ldw	r2,24(r2)
 402d1d0:	e0bffd15 	stw	r2,-12(fp)
 402d1d4:	e0bffd17 	ldw	r2,-12(fp)
 402d1d8:	1005003a 	cmpeq	r2,r2,zero
 402d1dc:	1000081e 	bne	r2,zero,402d200 <sbappendrecord+0x60>
      while (m->m_act)
 402d1e0:	00000306 	br	402d1f0 <sbappendrecord+0x50>
      m = m->m_act;
 402d1e4:	e0bffd17 	ldw	r2,-12(fp)
 402d1e8:	10800717 	ldw	r2,28(r2)
 402d1ec:	e0bffd15 	stw	r2,-12(fp)

   if (m0 == 0)
      return;
   ENTER_CRIT_SECTION(sb);    /* protect so_rcv operations */
   if ((m = sb->sb_mb) != NULL)
      while (m->m_act)
 402d1f0:	e0bffd17 	ldw	r2,-12(fp)
 402d1f4:	10800717 	ldw	r2,28(r2)
 402d1f8:	1004c03a 	cmpne	r2,r2,zero
 402d1fc:	103ff91e 	bne	r2,zero,402d1e4 <sbappendrecord+0x44>
      m = m->m_act;
   /*
    * Put the first mbuf on the queue.
    * Note this permits zero length records.
    */
   sballoc(sb, m0);
 402d200:	e0bffe17 	ldw	r2,-8(fp)
 402d204:	10c00017 	ldw	r3,0(r2)
 402d208:	e0bfff17 	ldw	r2,-4(fp)
 402d20c:	10800217 	ldw	r2,8(r2)
 402d210:	1887883a 	add	r3,r3,r2
 402d214:	e0bffe17 	ldw	r2,-8(fp)
 402d218:	10c00015 	stw	r3,0(r2)
   if (m)
 402d21c:	e0bffd17 	ldw	r2,-12(fp)
 402d220:	1005003a 	cmpeq	r2,r2,zero
 402d224:	1000041e 	bne	r2,zero,402d238 <sbappendrecord+0x98>
      m->m_act = m0;
 402d228:	e0fffd17 	ldw	r3,-12(fp)
 402d22c:	e0bfff17 	ldw	r2,-4(fp)
 402d230:	18800715 	stw	r2,28(r3)
 402d234:	00000306 	br	402d244 <sbappendrecord+0xa4>
   else
      sb->sb_mb = m0;
 402d238:	e0fffe17 	ldw	r3,-8(fp)
 402d23c:	e0bfff17 	ldw	r2,-4(fp)
 402d240:	18800615 	stw	r2,24(r3)
   m = m0->m_next;
 402d244:	e0bfff17 	ldw	r2,-4(fp)
 402d248:	10800617 	ldw	r2,24(r2)
 402d24c:	e0bffd15 	stw	r2,-12(fp)
   m0->m_next = 0;
 402d250:	e0bfff17 	ldw	r2,-4(fp)
 402d254:	10000615 	stw	zero,24(r2)
   sbcompress(sb, m, m0);
 402d258:	e13ffe17 	ldw	r4,-8(fp)
 402d25c:	e17ffd17 	ldw	r5,-12(fp)
 402d260:	e1bfff17 	ldw	r6,-4(fp)
 402d264:	402d4880 	call	402d488 <sbcompress>
   EXIT_CRIT_SECTION(sb);
 402d268:	4025e100 	call	4025e10 <irq_Unmask>
}
 402d26c:	e037883a 	mov	sp,fp
 402d270:	dfc00117 	ldw	ra,4(sp)
 402d274:	df000017 	ldw	fp,0(sp)
 402d278:	dec00204 	addi	sp,sp,8
 402d27c:	f800283a 	ret

0402d280 <sbappendaddr>:

int
sbappendaddr(struct sockbuf * sb, 
   struct sockaddr * asa,
   struct mbuf *  m0)
{
 402d280:	defff604 	addi	sp,sp,-40
 402d284:	dfc00915 	stw	ra,36(sp)
 402d288:	df000815 	stw	fp,32(sp)
 402d28c:	df000804 	addi	fp,sp,32
 402d290:	e13ffb15 	stw	r4,-20(fp)
 402d294:	e17ffc15 	stw	r5,-16(fp)
 402d298:	e1bffd15 	stw	r6,-12(fp)
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);
 402d29c:	00800404 	movi	r2,16
 402d2a0:	e0bff815 	stw	r2,-32(fp)

   ENTER_CRIT_SECTION(sb);
 402d2a4:	4025db40 	call	4025db4 <irq_Mask>
   for (m = m0; m; m = m->m_next)
 402d2a8:	e0bffd17 	ldw	r2,-12(fp)
 402d2ac:	e0bffa15 	stw	r2,-24(fp)
 402d2b0:	00000806 	br	402d2d4 <sbappendaddr+0x54>
      space += m->m_len;
 402d2b4:	e0bffa17 	ldw	r2,-24(fp)
 402d2b8:	10c00217 	ldw	r3,8(r2)
 402d2bc:	e0bff817 	ldw	r2,-32(fp)
 402d2c0:	1885883a 	add	r2,r3,r2
 402d2c4:	e0bff815 	stw	r2,-32(fp)
{
   struct mbuf *  m, *  n;
   int   space =  sizeof   (*asa);

   ENTER_CRIT_SECTION(sb);
   for (m = m0; m; m = m->m_next)
 402d2c8:	e0bffa17 	ldw	r2,-24(fp)
 402d2cc:	10800617 	ldw	r2,24(r2)
 402d2d0:	e0bffa15 	stw	r2,-24(fp)
 402d2d4:	e0bffa17 	ldw	r2,-24(fp)
 402d2d8:	1004c03a 	cmpne	r2,r2,zero
 402d2dc:	103ff51e 	bne	r2,zero,402d2b4 <sbappendaddr+0x34>
      space += m->m_len;
   if (space > (int)sbspace(sb))
 402d2e0:	e0bffb17 	ldw	r2,-20(fp)
 402d2e4:	10800117 	ldw	r2,4(r2)
 402d2e8:	1007883a 	mov	r3,r2
 402d2ec:	e0bffb17 	ldw	r2,-20(fp)
 402d2f0:	10800017 	ldw	r2,0(r2)
 402d2f4:	1885c83a 	sub	r2,r3,r2
 402d2f8:	1004803a 	cmplt	r2,r2,zero
 402d2fc:	1000071e 	bne	r2,zero,402d31c <sbappendaddr+0x9c>
 402d300:	e0bffb17 	ldw	r2,-20(fp)
 402d304:	10c00117 	ldw	r3,4(r2)
 402d308:	e0bffb17 	ldw	r2,-20(fp)
 402d30c:	10800017 	ldw	r2,0(r2)
 402d310:	1885c83a 	sub	r2,r3,r2
 402d314:	e0bfff15 	stw	r2,-4(fp)
 402d318:	00000106 	br	402d320 <sbappendaddr+0xa0>
 402d31c:	e03fff15 	stw	zero,-4(fp)
 402d320:	e0bff817 	ldw	r2,-32(fp)
 402d324:	e0ffff17 	ldw	r3,-4(fp)
 402d328:	1880030e 	bge	r3,r2,402d338 <sbappendaddr+0xb8>
   {
      EXIT_CRIT_SECTION(sb);
 402d32c:	4025e100 	call	4025e10 <irq_Unmask>
      return (0);
 402d330:	e03ffe15 	stw	zero,-8(fp)
 402d334:	00004e06 	br	402d470 <sbappendaddr+0x1f0>
   }
   if ((m = m_getwithdata (MT_SONAME, sizeof (struct sockaddr))) == NULL)
 402d338:	01000244 	movi	r4,9
 402d33c:	01400404 	movi	r5,16
 402d340:	40269b40 	call	40269b4 <m_getnbuf>
 402d344:	e0bffa15 	stw	r2,-24(fp)
 402d348:	e0bffa17 	ldw	r2,-24(fp)
 402d34c:	1004c03a 	cmpne	r2,r2,zero
 402d350:	1000031e 	bne	r2,zero,402d360 <sbappendaddr+0xe0>
   {
      EXIT_CRIT_SECTION(sb);
 402d354:	4025e100 	call	4025e10 <irq_Unmask>
      return 0;
 402d358:	e03ffe15 	stw	zero,-8(fp)
 402d35c:	00004406 	br	402d470 <sbappendaddr+0x1f0>
   }
   *mtod(m, struct sockaddr *) = *asa;
 402d360:	e0bffa17 	ldw	r2,-24(fp)
 402d364:	10800317 	ldw	r2,12(r2)
 402d368:	1009883a 	mov	r4,r2
 402d36c:	e0fffc17 	ldw	r3,-16(fp)
 402d370:	1880000b 	ldhu	r2,0(r3)
 402d374:	2080000d 	sth	r2,0(r4)
 402d378:	1880008b 	ldhu	r2,2(r3)
 402d37c:	2080008d 	sth	r2,2(r4)
 402d380:	1880010b 	ldhu	r2,4(r3)
 402d384:	2080010d 	sth	r2,4(r4)
 402d388:	1880018b 	ldhu	r2,6(r3)
 402d38c:	2080018d 	sth	r2,6(r4)
 402d390:	1880020b 	ldhu	r2,8(r3)
 402d394:	2080020d 	sth	r2,8(r4)
 402d398:	1880028b 	ldhu	r2,10(r3)
 402d39c:	2080028d 	sth	r2,10(r4)
 402d3a0:	1880030b 	ldhu	r2,12(r3)
 402d3a4:	2080030d 	sth	r2,12(r4)
 402d3a8:	1880038b 	ldhu	r2,14(r3)
 402d3ac:	2080038d 	sth	r2,14(r4)
   m->m_len = sizeof (*asa);
 402d3b0:	e0fffa17 	ldw	r3,-24(fp)
 402d3b4:	00800404 	movi	r2,16
 402d3b8:	18800215 	stw	r2,8(r3)
   sballoc (sb, m);
 402d3bc:	e0bffb17 	ldw	r2,-20(fp)
 402d3c0:	10c00017 	ldw	r3,0(r2)
 402d3c4:	e0bffa17 	ldw	r2,-24(fp)
 402d3c8:	10800217 	ldw	r2,8(r2)
 402d3cc:	1887883a 	add	r3,r3,r2
 402d3d0:	e0bffb17 	ldw	r2,-20(fp)
 402d3d4:	10c00015 	stw	r3,0(r2)
   if ((n = sb->sb_mb) != NULL) 
 402d3d8:	e0bffb17 	ldw	r2,-20(fp)
 402d3dc:	10800617 	ldw	r2,24(r2)
 402d3e0:	e0bff915 	stw	r2,-28(fp)
 402d3e4:	e0bff917 	ldw	r2,-28(fp)
 402d3e8:	1005003a 	cmpeq	r2,r2,zero
 402d3ec:	10000c1e 	bne	r2,zero,402d420 <sbappendaddr+0x1a0>
   {
      while (n->m_act)
 402d3f0:	00000306 	br	402d400 <sbappendaddr+0x180>
         n = n->m_act;
 402d3f4:	e0bff917 	ldw	r2,-28(fp)
 402d3f8:	10800717 	ldw	r2,28(r2)
 402d3fc:	e0bff915 	stw	r2,-28(fp)
   *mtod(m, struct sockaddr *) = *asa;
   m->m_len = sizeof (*asa);
   sballoc (sb, m);
   if ((n = sb->sb_mb) != NULL) 
   {
      while (n->m_act)
 402d400:	e0bff917 	ldw	r2,-28(fp)
 402d404:	10800717 	ldw	r2,28(r2)
 402d408:	1004c03a 	cmpne	r2,r2,zero
 402d40c:	103ff91e 	bne	r2,zero,402d3f4 <sbappendaddr+0x174>
         n = n->m_act;
      n->m_act = m;
 402d410:	e0fff917 	ldw	r3,-28(fp)
 402d414:	e0bffa17 	ldw	r2,-24(fp)
 402d418:	18800715 	stw	r2,28(r3)
 402d41c:	00000306 	br	402d42c <sbappendaddr+0x1ac>
   } else
      sb->sb_mb = m;
 402d420:	e0fffb17 	ldw	r3,-20(fp)
 402d424:	e0bffa17 	ldw	r2,-24(fp)
 402d428:	18800615 	stw	r2,24(r3)
   if (m->m_next)
 402d42c:	e0bffa17 	ldw	r2,-24(fp)
 402d430:	10800617 	ldw	r2,24(r2)
 402d434:	1005003a 	cmpeq	r2,r2,zero
 402d438:	1000031e 	bne	r2,zero,402d448 <sbappendaddr+0x1c8>
      m = m->m_next;
 402d43c:	e0bffa17 	ldw	r2,-24(fp)
 402d440:	10800617 	ldw	r2,24(r2)
 402d444:	e0bffa15 	stw	r2,-24(fp)
   if (m0)
 402d448:	e0bffd17 	ldw	r2,-12(fp)
 402d44c:	1005003a 	cmpeq	r2,r2,zero
 402d450:	1000041e 	bne	r2,zero,402d464 <sbappendaddr+0x1e4>
      sbcompress(sb, m0, m);
 402d454:	e13ffb17 	ldw	r4,-20(fp)
 402d458:	e17ffd17 	ldw	r5,-12(fp)
 402d45c:	e1bffa17 	ldw	r6,-24(fp)
 402d460:	402d4880 	call	402d488 <sbcompress>

   EXIT_CRIT_SECTION(sb);
 402d464:	4025e100 	call	4025e10 <irq_Unmask>
   return (1);
 402d468:	00800044 	movi	r2,1
 402d46c:	e0bffe15 	stw	r2,-8(fp)
 402d470:	e0bffe17 	ldw	r2,-8(fp)
}
 402d474:	e037883a 	mov	sp,fp
 402d478:	dfc00117 	ldw	ra,4(sp)
 402d47c:	df000017 	ldw	fp,0(sp)
 402d480:	dec00204 	addi	sp,sp,8
 402d484:	f800283a 	ret

0402d488 <sbcompress>:

void
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{
 402d488:	defffb04 	addi	sp,sp,-20
 402d48c:	dfc00415 	stw	ra,16(sp)
 402d490:	df000315 	stw	fp,12(sp)
 402d494:	df000304 	addi	fp,sp,12
 402d498:	e13ffd15 	stw	r4,-12(fp)
 402d49c:	e17ffe15 	stw	r5,-8(fp)
 402d4a0:	e1bfff15 	stw	r6,-4(fp)

   while (m) 
 402d4a4:	00006a06 	br	402d650 <sbcompress+0x1c8>
   {
      if (m->m_len == 0) 
 402d4a8:	e0bffe17 	ldw	r2,-8(fp)
 402d4ac:	10800217 	ldw	r2,8(r2)
 402d4b0:	1004c03a 	cmpne	r2,r2,zero
 402d4b4:	1000041e 	bne	r2,zero,402d4c8 <sbcompress+0x40>
      {
         m = m_free(m);
 402d4b8:	e13ffe17 	ldw	r4,-8(fp)
 402d4bc:	4026b5c0 	call	4026b5c <m_free>
 402d4c0:	e0bffe15 	stw	r2,-8(fp)
         continue;
 402d4c4:	00006206 	br	402d650 <sbcompress+0x1c8>
      }
      if (m->m_type != MT_RXDATA && 
 402d4c8:	e0bffe17 	ldw	r2,-8(fp)
 402d4cc:	10800817 	ldw	r2,32(r2)
 402d4d0:	10800060 	cmpeqi	r2,r2,1
 402d4d4:	1000101e 	bne	r2,zero,402d518 <sbcompress+0x90>
 402d4d8:	e0bffe17 	ldw	r2,-8(fp)
 402d4dc:	10800817 	ldw	r2,32(r2)
 402d4e0:	108000a0 	cmpeqi	r2,r2,2
 402d4e4:	10000c1e 	bne	r2,zero,402d518 <sbcompress+0x90>
 402d4e8:	e0bffe17 	ldw	r2,-8(fp)
 402d4ec:	10800817 	ldw	r2,32(r2)
 402d4f0:	10800260 	cmpeqi	r2,r2,9
 402d4f4:	1000081e 	bne	r2,zero,402d518 <sbcompress+0x90>
          m->m_type != MT_TXDATA && 
          m->m_type != MT_SONAME) 
      {
         dprintf ("sbcomp:bad type %d\n", m->m_type);
 402d4f8:	e0bffe17 	ldw	r2,-8(fp)
 402d4fc:	11400817 	ldw	r5,32(r2)
 402d500:	01010174 	movhi	r4,1029
 402d504:	212e6204 	addi	r4,r4,-18040
 402d508:	400207c0 	call	400207c <printf>
         panic ("sbcomp:bad");
 402d50c:	01010174 	movhi	r4,1029
 402d510:	212e6704 	addi	r4,r4,-18020
 402d514:	4020e100 	call	4020e10 <panic>
      /* If there is room for all the data in M in N, then
       * just copy the data to N.  Note that sbdrop will 
       * increment the n->m_data pointer, so that we must
       * correct n->m_memsz.
       */
      if ( n && (sb->sb_flags & SB_MBCOMP) &&
 402d518:	e0bfff17 	ldw	r2,-4(fp)
 402d51c:	1005003a 	cmpeq	r2,r2,zero
 402d520:	1000331e 	bne	r2,zero,402d5f0 <sbcompress+0x168>
 402d524:	e0bffd17 	ldw	r2,-12(fp)
 402d528:	1080070b 	ldhu	r2,28(r2)
 402d52c:	10bfffcc 	andi	r2,r2,65535
 402d530:	1080200c 	andi	r2,r2,128
 402d534:	1005003a 	cmpeq	r2,r2,zero
 402d538:	10002d1e 	bne	r2,zero,402d5f0 <sbcompress+0x168>
 402d53c:	e0bfff17 	ldw	r2,-4(fp)
 402d540:	10c00217 	ldw	r3,8(r2)
 402d544:	e0bffe17 	ldw	r2,-8(fp)
 402d548:	10800217 	ldw	r2,8(r2)
 402d54c:	188b883a 	add	r5,r3,r2
 402d550:	e0bfff17 	ldw	r2,-4(fp)
 402d554:	11000517 	ldw	r4,20(r2)
 402d558:	e0bfff17 	ldw	r2,-4(fp)
 402d55c:	10800317 	ldw	r2,12(r2)
 402d560:	1007883a 	mov	r3,r2
 402d564:	e0bfff17 	ldw	r2,-4(fp)
 402d568:	10800417 	ldw	r2,16(r2)
 402d56c:	1885c83a 	sub	r2,r3,r2
 402d570:	2085c83a 	sub	r2,r4,r2
 402d574:	28801e2e 	bgeu	r5,r2,402d5f0 <sbcompress+0x168>
          ((n->m_len + m->m_len) <
          n->m_memsz - (n->m_data - n->m_base) ) ) 
      {
         MEMCPY(n->m_data+n->m_len, m->m_data, m->m_len);
 402d578:	e0bfff17 	ldw	r2,-4(fp)
 402d57c:	10c00317 	ldw	r3,12(r2)
 402d580:	e0bfff17 	ldw	r2,-4(fp)
 402d584:	10800217 	ldw	r2,8(r2)
 402d588:	1887883a 	add	r3,r3,r2
 402d58c:	e0bffe17 	ldw	r2,-8(fp)
 402d590:	11400317 	ldw	r5,12(r2)
 402d594:	e0bffe17 	ldw	r2,-8(fp)
 402d598:	10800217 	ldw	r2,8(r2)
 402d59c:	1809883a 	mov	r4,r3
 402d5a0:	100d883a 	mov	r6,r2
 402d5a4:	4001de40 	call	4001de4 <memcpy>
         sballoc(sb, m);
 402d5a8:	e0bffd17 	ldw	r2,-12(fp)
 402d5ac:	10c00017 	ldw	r3,0(r2)
 402d5b0:	e0bffe17 	ldw	r2,-8(fp)
 402d5b4:	10800217 	ldw	r2,8(r2)
 402d5b8:	1887883a 	add	r3,r3,r2
 402d5bc:	e0bffd17 	ldw	r2,-12(fp)
 402d5c0:	10c00015 	stw	r3,0(r2)
         n->m_len += m->m_len;
 402d5c4:	e0bfff17 	ldw	r2,-4(fp)
 402d5c8:	10c00217 	ldw	r3,8(r2)
 402d5cc:	e0bffe17 	ldw	r2,-8(fp)
 402d5d0:	10800217 	ldw	r2,8(r2)
 402d5d4:	1887883a 	add	r3,r3,r2
 402d5d8:	e0bfff17 	ldw	r2,-4(fp)
 402d5dc:	10c00215 	stw	r3,8(r2)
         m = m_free(m);
 402d5e0:	e13ffe17 	ldw	r4,-8(fp)
 402d5e4:	4026b5c0 	call	4026b5c <m_free>
 402d5e8:	e0bffe15 	stw	r2,-8(fp)
         continue;
 402d5ec:	00001806 	br	402d650 <sbcompress+0x1c8>
      }
      sballoc(sb, m);
 402d5f0:	e0bffd17 	ldw	r2,-12(fp)
 402d5f4:	10c00017 	ldw	r3,0(r2)
 402d5f8:	e0bffe17 	ldw	r2,-8(fp)
 402d5fc:	10800217 	ldw	r2,8(r2)
 402d600:	1887883a 	add	r3,r3,r2
 402d604:	e0bffd17 	ldw	r2,-12(fp)
 402d608:	10c00015 	stw	r3,0(r2)
      if (n)
 402d60c:	e0bfff17 	ldw	r2,-4(fp)
 402d610:	1005003a 	cmpeq	r2,r2,zero
 402d614:	1000041e 	bne	r2,zero,402d628 <sbcompress+0x1a0>
         n->m_next = m;
 402d618:	e0ffff17 	ldw	r3,-4(fp)
 402d61c:	e0bffe17 	ldw	r2,-8(fp)
 402d620:	18800615 	stw	r2,24(r3)
 402d624:	00000306 	br	402d634 <sbcompress+0x1ac>
      else
         sb->sb_mb = m;
 402d628:	e0fffd17 	ldw	r3,-12(fp)
 402d62c:	e0bffe17 	ldw	r2,-8(fp)
 402d630:	18800615 	stw	r2,24(r3)
      n = m;
 402d634:	e0bffe17 	ldw	r2,-8(fp)
 402d638:	e0bfff15 	stw	r2,-4(fp)
      m = m->m_next;
 402d63c:	e0bffe17 	ldw	r2,-8(fp)
 402d640:	10800617 	ldw	r2,24(r2)
 402d644:	e0bffe15 	stw	r2,-8(fp)
      n->m_next = 0;
 402d648:	e0bfff17 	ldw	r2,-4(fp)
 402d64c:	10000615 	stw	zero,24(r2)
sbcompress(struct sockbuf * sb, 
   struct mbuf *  m,
   struct mbuf *  n)
{

   while (m) 
 402d650:	e0bffe17 	ldw	r2,-8(fp)
 402d654:	1004c03a 	cmpne	r2,r2,zero
 402d658:	103f931e 	bne	r2,zero,402d4a8 <sbcompress+0x20>
         sb->sb_mb = m;
      n = m;
      m = m->m_next;
      n->m_next = 0;
   }
}
 402d65c:	e037883a 	mov	sp,fp
 402d660:	dfc00117 	ldw	ra,4(sp)
 402d664:	df000017 	ldw	fp,0(sp)
 402d668:	dec00204 	addi	sp,sp,8
 402d66c:	f800283a 	ret

0402d670 <sbflush>:
 * RETURNS: 
 */

void
sbflush(struct sockbuf * sb)
{
 402d670:	defffd04 	addi	sp,sp,-12
 402d674:	dfc00215 	stw	ra,8(sp)
 402d678:	df000115 	stw	fp,4(sp)
 402d67c:	df000104 	addi	fp,sp,4
 402d680:	e13fff15 	stw	r4,-4(fp)
   ENTER_CRIT_SECTION(sb);
 402d684:	4025db40 	call	4025db4 <irq_Mask>
   if (sb->sb_flags & SB_LOCK)
 402d688:	e0bfff17 	ldw	r2,-4(fp)
 402d68c:	1080070b 	ldhu	r2,28(r2)
 402d690:	10bfffcc 	andi	r2,r2,65535
 402d694:	1080004c 	andi	r2,r2,1
 402d698:	10803fcc 	andi	r2,r2,255
 402d69c:	1005003a 	cmpeq	r2,r2,zero
 402d6a0:	1000091e 	bne	r2,zero,402d6c8 <sbflush+0x58>
      panic("sbflush");
 402d6a4:	01010174 	movhi	r4,1029
 402d6a8:	212e6a04 	addi	r4,r4,-18008
 402d6ac:	4020e100 	call	4020e10 <panic>
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 402d6b0:	00000506 	br	402d6c8 <sbflush+0x58>
      sbdrop (sb, (int)sb->sb_cc);
 402d6b4:	e0bfff17 	ldw	r2,-4(fp)
 402d6b8:	10800017 	ldw	r2,0(r2)
 402d6bc:	100b883a 	mov	r5,r2
 402d6c0:	e13fff17 	ldw	r4,-4(fp)
 402d6c4:	402d7000 	call	402d700 <sbdrop>
sbflush(struct sockbuf * sb)
{
   ENTER_CRIT_SECTION(sb);
   if (sb->sb_flags & SB_LOCK)
      panic("sbflush");
   while ((sb->sb_mbcnt) || (sb->sb_cc))
 402d6c8:	e0bfff17 	ldw	r2,-4(fp)
 402d6cc:	10800217 	ldw	r2,8(r2)
 402d6d0:	1004c03a 	cmpne	r2,r2,zero
 402d6d4:	103ff71e 	bne	r2,zero,402d6b4 <sbflush+0x44>
 402d6d8:	e0bfff17 	ldw	r2,-4(fp)
 402d6dc:	10800017 	ldw	r2,0(r2)
 402d6e0:	1004c03a 	cmpne	r2,r2,zero
 402d6e4:	103ff31e 	bne	r2,zero,402d6b4 <sbflush+0x44>
      sbdrop (sb, (int)sb->sb_cc);
   EXIT_CRIT_SECTION(sb);
 402d6e8:	4025e100 	call	4025e10 <irq_Unmask>
}
 402d6ec:	e037883a 	mov	sp,fp
 402d6f0:	dfc00117 	ldw	ra,4(sp)
 402d6f4:	df000017 	ldw	fp,0(sp)
 402d6f8:	dec00204 	addi	sp,sp,8
 402d6fc:	f800283a 	ret

0402d700 <sbdrop>:
 * RETURNS: 
 */

void
sbdrop(struct sockbuf * sb, int len)
{
 402d700:	defff904 	addi	sp,sp,-28
 402d704:	dfc00615 	stw	ra,24(sp)
 402d708:	df000515 	stw	fp,20(sp)
 402d70c:	df000504 	addi	fp,sp,20
 402d710:	e13ffe15 	stw	r4,-8(fp)
 402d714:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  m, *  mn;
   struct mbuf *  next;

   ENTER_CRIT_SECTION(sb);
 402d718:	4025db40 	call	4025db4 <irq_Mask>
   if ((m = sb->sb_mb) != NULL)
 402d71c:	e0bffe17 	ldw	r2,-8(fp)
 402d720:	10800617 	ldw	r2,24(r2)
 402d724:	e0bffd15 	stw	r2,-12(fp)
 402d728:	e0bffd17 	ldw	r2,-12(fp)
 402d72c:	1005003a 	cmpeq	r2,r2,zero
 402d730:	1000041e 	bne	r2,zero,402d744 <sbdrop+0x44>
      next = m->m_act;
 402d734:	e0bffd17 	ldw	r2,-12(fp)
 402d738:	10800717 	ldw	r2,28(r2)
 402d73c:	e0bffb15 	stw	r2,-20(fp)
 402d740:	00003906 	br	402d828 <sbdrop+0x128>
   else
      next = NULL;
 402d744:	e03ffb15 	stw	zero,-20(fp)
   while (len > 0) 
 402d748:	00003706 	br	402d828 <sbdrop+0x128>
   {
      if (m == 0) 
 402d74c:	e0bffd17 	ldw	r2,-12(fp)
 402d750:	1004c03a 	cmpne	r2,r2,zero
 402d754:	10000c1e 	bne	r2,zero,402d788 <sbdrop+0x88>
      {
         if (next == 0)
 402d758:	e0bffb17 	ldw	r2,-20(fp)
 402d75c:	1004c03a 	cmpne	r2,r2,zero
 402d760:	1000031e 	bne	r2,zero,402d770 <sbdrop+0x70>
            panic("sbdrop");
 402d764:	01010174 	movhi	r4,1029
 402d768:	212e6c04 	addi	r4,r4,-18000
 402d76c:	4020e100 	call	4020e10 <panic>
         m = next;
 402d770:	e0bffb17 	ldw	r2,-20(fp)
 402d774:	e0bffd15 	stw	r2,-12(fp)
         next = m->m_act;
 402d778:	e0bffd17 	ldw	r2,-12(fp)
 402d77c:	10800717 	ldw	r2,28(r2)
 402d780:	e0bffb15 	stw	r2,-20(fp)
         continue;
 402d784:	00002806 	br	402d828 <sbdrop+0x128>
      }
      if (m->m_len > (unsigned)len) 
 402d788:	e0bffd17 	ldw	r2,-12(fp)
 402d78c:	10c00217 	ldw	r3,8(r2)
 402d790:	e0bfff17 	ldw	r2,-4(fp)
 402d794:	10c0132e 	bgeu	r2,r3,402d7e4 <sbdrop+0xe4>
      {
         m->m_len -= len;
 402d798:	e0bffd17 	ldw	r2,-12(fp)
 402d79c:	10c00217 	ldw	r3,8(r2)
 402d7a0:	e0bfff17 	ldw	r2,-4(fp)
 402d7a4:	1887c83a 	sub	r3,r3,r2
 402d7a8:	e0bffd17 	ldw	r2,-12(fp)
 402d7ac:	10c00215 	stw	r3,8(r2)
         m->m_data += len;
 402d7b0:	e0bffd17 	ldw	r2,-12(fp)
 402d7b4:	10c00317 	ldw	r3,12(r2)
 402d7b8:	e0bfff17 	ldw	r2,-4(fp)
 402d7bc:	1887883a 	add	r3,r3,r2
 402d7c0:	e0bffd17 	ldw	r2,-12(fp)
 402d7c4:	10c00315 	stw	r3,12(r2)
         sb->sb_cc -= len;
 402d7c8:	e0bffe17 	ldw	r2,-8(fp)
 402d7cc:	10c00017 	ldw	r3,0(r2)
 402d7d0:	e0bfff17 	ldw	r2,-4(fp)
 402d7d4:	1887c83a 	sub	r3,r3,r2
 402d7d8:	e0bffe17 	ldw	r2,-8(fp)
 402d7dc:	10c00015 	stw	r3,0(r2)
         break;
 402d7e0:	00002106 	br	402d868 <sbdrop+0x168>
      }
      len -= m->m_len;
 402d7e4:	e0ffff17 	ldw	r3,-4(fp)
 402d7e8:	e0bffd17 	ldw	r2,-12(fp)
 402d7ec:	10800217 	ldw	r2,8(r2)
 402d7f0:	1885c83a 	sub	r2,r3,r2
 402d7f4:	e0bfff15 	stw	r2,-4(fp)
      sbfree (sb, m);
 402d7f8:	e0bffe17 	ldw	r2,-8(fp)
 402d7fc:	10c00017 	ldw	r3,0(r2)
 402d800:	e0bffd17 	ldw	r2,-12(fp)
 402d804:	10800217 	ldw	r2,8(r2)
 402d808:	1887c83a 	sub	r3,r3,r2
 402d80c:	e0bffe17 	ldw	r2,-8(fp)
 402d810:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
 402d814:	e13ffd17 	ldw	r4,-12(fp)
 402d818:	4026b5c0 	call	4026b5c <m_free>
 402d81c:	e0bffc15 	stw	r2,-16(fp)
      m = mn;
 402d820:	e0bffc17 	ldw	r2,-16(fp)
 402d824:	e0bffd15 	stw	r2,-12(fp)
   ENTER_CRIT_SECTION(sb);
   if ((m = sb->sb_mb) != NULL)
      next = m->m_act;
   else
      next = NULL;
   while (len > 0) 
 402d828:	e0bfff17 	ldw	r2,-4(fp)
 402d82c:	10800048 	cmpgei	r2,r2,1
 402d830:	103fc61e 	bne	r2,zero,402d74c <sbdrop+0x4c>
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
 402d834:	00000c06 	br	402d868 <sbdrop+0x168>
   {
      sbfree(sb, m);
 402d838:	e0bffe17 	ldw	r2,-8(fp)
 402d83c:	10c00017 	ldw	r3,0(r2)
 402d840:	e0bffd17 	ldw	r2,-12(fp)
 402d844:	10800217 	ldw	r2,8(r2)
 402d848:	1887c83a 	sub	r3,r3,r2
 402d84c:	e0bffe17 	ldw	r2,-8(fp)
 402d850:	10c00015 	stw	r3,0(r2)
      MFREE(m, mn);
 402d854:	e13ffd17 	ldw	r4,-12(fp)
 402d858:	4026b5c0 	call	4026b5c <m_free>
 402d85c:	e0bffc15 	stw	r2,-16(fp)
      m = mn;
 402d860:	e0bffc17 	ldw	r2,-16(fp)
 402d864:	e0bffd15 	stw	r2,-12(fp)
      len -= m->m_len;
      sbfree (sb, m);
      MFREE(m, mn);
      m = mn;
   }
   while (m && m->m_len == 0) 
 402d868:	e0bffd17 	ldw	r2,-12(fp)
 402d86c:	1005003a 	cmpeq	r2,r2,zero
 402d870:	1000041e 	bne	r2,zero,402d884 <sbdrop+0x184>
 402d874:	e0bffd17 	ldw	r2,-12(fp)
 402d878:	10800217 	ldw	r2,8(r2)
 402d87c:	1005003a 	cmpeq	r2,r2,zero
 402d880:	103fed1e 	bne	r2,zero,402d838 <sbdrop+0x138>
   {
      sbfree(sb, m);
      MFREE(m, mn);
      m = mn;
   }
   if (m) 
 402d884:	e0bffd17 	ldw	r2,-12(fp)
 402d888:	1005003a 	cmpeq	r2,r2,zero
 402d88c:	1000071e 	bne	r2,zero,402d8ac <sbdrop+0x1ac>
   {
      sb->sb_mb = m;
 402d890:	e0fffe17 	ldw	r3,-8(fp)
 402d894:	e0bffd17 	ldw	r2,-12(fp)
 402d898:	18800615 	stw	r2,24(r3)
      m->m_act = next;
 402d89c:	e0fffd17 	ldw	r3,-12(fp)
 402d8a0:	e0bffb17 	ldw	r2,-20(fp)
 402d8a4:	18800715 	stw	r2,28(r3)
 402d8a8:	00000306 	br	402d8b8 <sbdrop+0x1b8>
   } else
      sb->sb_mb = next;
 402d8ac:	e0fffe17 	ldw	r3,-8(fp)
 402d8b0:	e0bffb17 	ldw	r2,-20(fp)
 402d8b4:	18800615 	stw	r2,24(r3)
   EXIT_CRIT_SECTION(sb);
 402d8b8:	4025e100 	call	4025e10 <irq_Unmask>
}
 402d8bc:	e037883a 	mov	sp,fp
 402d8c0:	dfc00117 	ldw	ra,4(sp)
 402d8c4:	df000017 	ldw	fp,0(sp)
 402d8c8:	dec00204 	addi	sp,sp,8
 402d8cc:	f800283a 	ret

0402d8d0 <sbdropend>:
 * RETURNS: 
 */

void
sbdropend(struct sockbuf * sb, struct mbuf * m)
{
 402d8d0:	defff904 	addi	sp,sp,-28
 402d8d4:	dfc00615 	stw	ra,24(sp)
 402d8d8:	df000515 	stw	fp,20(sp)
 402d8dc:	df000504 	addi	fp,sp,20
 402d8e0:	e13ffe15 	stw	r4,-8(fp)
 402d8e4:	e17fff15 	stw	r5,-4(fp)
   struct mbuf *  nmb, *   pmb;
   int   len;
   ENTER_CRIT_SECTION(sb);
 402d8e8:	4025db40 	call	4025db4 <irq_Mask>
   len = mbuf_len(m);
 402d8ec:	e13fff17 	ldw	r4,-4(fp)
 402d8f0:	40271c80 	call	40271c8 <mbuf_len>
 402d8f4:	e0bffb15 	stw	r2,-20(fp)
   if (len > 0)
 402d8f8:	e0bffb17 	ldw	r2,-20(fp)
 402d8fc:	10800050 	cmplti	r2,r2,1
 402d900:	1000051e 	bne	r2,zero,402d918 <sbdropend+0x48>
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
 402d904:	e0bffe17 	ldw	r2,-8(fp)
 402d908:	11000617 	ldw	r4,24(r2)
 402d90c:	e0bffb17 	ldw	r2,-20(fp)
 402d910:	008bc83a 	sub	r5,zero,r2
 402d914:	4026ff80 	call	4026ff8 <m_adj>
   nmb = sb->sb_mb;
 402d918:	e0bffe17 	ldw	r2,-8(fp)
 402d91c:	10800617 	ldw	r2,24(r2)
 402d920:	e0bffd15 	stw	r2,-12(fp)
   pmb = NULL;
 402d924:	e03ffc15 	stw	zero,-16(fp)
   if (sb->sb_mb->m_len == 0)
 402d928:	e0bffe17 	ldw	r2,-8(fp)
 402d92c:	10800617 	ldw	r2,24(r2)
 402d930:	10800217 	ldw	r2,8(r2)
 402d934:	1004c03a 	cmpne	r2,r2,zero
 402d938:	1000081e 	bne	r2,zero,402d95c <sbdropend+0x8c>
      sb->sb_mb = NULL;
 402d93c:	e0bffe17 	ldw	r2,-8(fp)
 402d940:	10000615 	stw	zero,24(r2)
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 402d944:	00000506 	br	402d95c <sbdropend+0x8c>
   {
      pmb = nmb;  /* Remember previous */
 402d948:	e0bffd17 	ldw	r2,-12(fp)
 402d94c:	e0bffc15 	stw	r2,-16(fp)
      nmb = nmb->m_next;    
 402d950:	e0bffd17 	ldw	r2,-12(fp)
 402d954:	10800617 	ldw	r2,24(r2)
 402d958:	e0bffd15 	stw	r2,-12(fp)
      m_adj(sb->sb_mb, -len); /* Adjust the lengths of the mbuf chain */
   nmb = sb->sb_mb;
   pmb = NULL;
   if (sb->sb_mb->m_len == 0)
      sb->sb_mb = NULL;
   while (nmb && (nmb->m_len !=0))  /* Release mbufs that have a 0 len */
 402d95c:	e0bffd17 	ldw	r2,-12(fp)
 402d960:	1005003a 	cmpeq	r2,r2,zero
 402d964:	1000041e 	bne	r2,zero,402d978 <sbdropend+0xa8>
 402d968:	e0bffd17 	ldw	r2,-12(fp)
 402d96c:	10800217 	ldw	r2,8(r2)
 402d970:	1004c03a 	cmpne	r2,r2,zero
 402d974:	103ff41e 	bne	r2,zero,402d948 <sbdropend+0x78>
   {
      pmb = nmb;  /* Remember previous */
      nmb = nmb->m_next;    
   }
   if (nmb && (nmb->m_len == 0)) /* Assume once 0 len found, all the rest */
 402d978:	e0bffd17 	ldw	r2,-12(fp)
 402d97c:	1005003a 	cmpeq	r2,r2,zero
 402d980:	10000b1e 	bne	r2,zero,402d9b0 <sbdropend+0xe0>
 402d984:	e0bffd17 	ldw	r2,-12(fp)
 402d988:	10800217 	ldw	r2,8(r2)
 402d98c:	1004c03a 	cmpne	r2,r2,zero
 402d990:	1000071e 	bne	r2,zero,402d9b0 <sbdropend+0xe0>
   {                             /* are zeroes */ 
      if (pmb != NULL)
 402d994:	e0bffc17 	ldw	r2,-16(fp)
 402d998:	1005003a 	cmpeq	r2,r2,zero
 402d99c:	1000021e 	bne	r2,zero,402d9a8 <sbdropend+0xd8>
         pmb->m_next = NULL;
 402d9a0:	e0bffc17 	ldw	r2,-16(fp)
 402d9a4:	10000615 	stw	zero,24(r2)
      m_freem(nmb);            
 402d9a8:	e13ffd17 	ldw	r4,-12(fp)
 402d9ac:	4026c900 	call	4026c90 <m_freem>
   }
   sb->sb_cc -= len;       /* Do a sbfree using the len */
 402d9b0:	e0bffe17 	ldw	r2,-8(fp)
 402d9b4:	10c00017 	ldw	r3,0(r2)
 402d9b8:	e0bffb17 	ldw	r2,-20(fp)
 402d9bc:	1887c83a 	sub	r3,r3,r2
 402d9c0:	e0bffe17 	ldw	r2,-8(fp)
 402d9c4:	10c00015 	stw	r3,0(r2)
   EXIT_CRIT_SECTION(sb);
 402d9c8:	4025e100 	call	4025e10 <irq_Unmask>
}
 402d9cc:	e037883a 	mov	sp,fp
 402d9d0:	dfc00117 	ldw	ra,4(sp)
 402d9d4:	df000017 	ldw	fp,0(sp)
 402d9d8:	dec00204 	addi	sp,sp,8
 402d9dc:	f800283a 	ret

0402d9e0 <sbdroprecord>:
 * RETURNS: 
 */

void
sbdroprecord(struct sockbuf * sb)
{
 402d9e0:	defffb04 	addi	sp,sp,-20
 402d9e4:	dfc00415 	stw	ra,16(sp)
 402d9e8:	df000315 	stw	fp,12(sp)
 402d9ec:	df000304 	addi	fp,sp,12
 402d9f0:	e13fff15 	stw	r4,-4(fp)
   struct mbuf *  m, *  mn;

   ENTER_CRIT_SECTION(sb);
 402d9f4:	4025db40 	call	4025db4 <irq_Mask>
   m = sb->sb_mb;
 402d9f8:	e0bfff17 	ldw	r2,-4(fp)
 402d9fc:	10800617 	ldw	r2,24(r2)
 402da00:	e0bffe15 	stw	r2,-8(fp)
   if (m)
 402da04:	e0bffe17 	ldw	r2,-8(fp)
 402da08:	1005003a 	cmpeq	r2,r2,zero
 402da0c:	1000131e 	bne	r2,zero,402da5c <sbdroprecord+0x7c>
   {  sb->sb_mb = m->m_act;
 402da10:	e0bffe17 	ldw	r2,-8(fp)
 402da14:	10c00717 	ldw	r3,28(r2)
 402da18:	e0bfff17 	ldw	r2,-4(fp)
 402da1c:	10c00615 	stw	r3,24(r2)
      do 
      {  sbfree(sb, m);
 402da20:	e0bfff17 	ldw	r2,-4(fp)
 402da24:	10c00017 	ldw	r3,0(r2)
 402da28:	e0bffe17 	ldw	r2,-8(fp)
 402da2c:	10800217 	ldw	r2,8(r2)
 402da30:	1887c83a 	sub	r3,r3,r2
 402da34:	e0bfff17 	ldw	r2,-4(fp)
 402da38:	10c00015 	stw	r3,0(r2)
         MFREE(m, mn);
 402da3c:	e13ffe17 	ldw	r4,-8(fp)
 402da40:	4026b5c0 	call	4026b5c <m_free>
 402da44:	e0bffd15 	stw	r2,-12(fp)
      } while ((m = mn) != NULL);
 402da48:	e0bffd17 	ldw	r2,-12(fp)
 402da4c:	e0bffe15 	stw	r2,-8(fp)
 402da50:	e0bffe17 	ldw	r2,-8(fp)
 402da54:	1004c03a 	cmpne	r2,r2,zero
 402da58:	103ff11e 	bne	r2,zero,402da20 <sbdroprecord+0x40>
         }
   EXIT_CRIT_SECTION(sb);
 402da5c:	4025e100 	call	4025e10 <irq_Unmask>
}
 402da60:	e037883a 	mov	sp,fp
 402da64:	dfc00117 	ldw	ra,4(sp)
 402da68:	df000017 	ldw	fp,0(sp)
 402da6c:	dec00204 	addi	sp,sp,8
 402da70:	f800283a 	ret

0402da74 <t_select>:
int
t_select(fd_set * in,   /* lists of sockets to watch */
   fd_set * out,
   fd_set * ex,
   long  tv)   /* ticks to wait */
{
 402da74:	defe7204 	addi	sp,sp,-1592
 402da78:	dfc18d15 	stw	ra,1588(sp)
 402da7c:	df018c15 	stw	fp,1584(sp)
 402da80:	df018c04 	addi	fp,sp,1584
 402da84:	e13ffc15 	stw	r4,-16(fp)
 402da88:	e17ffd15 	stw	r5,-12(fp)
 402da8c:	e1bffe15 	stw	r6,-8(fp)
 402da90:	e1ffff15 	stw	r7,-4(fp)
   fd_set obits[3], ibits [3];
   u_long   tmo;
   int   retval   =  0;
 402da94:	e03e7415 	stw	zero,-1584(fp)

   MEMSET(&obits, 0, sizeof(obits));
 402da98:	e0be7604 	addi	r2,fp,-1576
 402da9c:	1009883a 	mov	r4,r2
 402daa0:	0180c304 	movi	r6,780
 402daa4:	000b883a 	mov	r5,zero
 402daa8:	4001f640 	call	4001f64 <memset>
   MEMSET(&ibits, 0, sizeof(ibits));
 402daac:	e0bf3904 	addi	r2,fp,-796
 402dab0:	1009883a 	mov	r4,r2
 402dab4:	0180c304 	movi	r6,780
 402dab8:	000b883a 	mov	r5,zero
 402dabc:	4001f640 	call	4001f64 <memset>

   if (in)
 402dac0:	e0bffc17 	ldw	r2,-16(fp)
 402dac4:	1005003a 	cmpeq	r2,r2,zero
 402dac8:	1000061e 	bne	r2,zero,402dae4 <t_select+0x70>
      MEMCPY(&ibits[0], in, sizeof(fd_set));
 402dacc:	e0bf3904 	addi	r2,fp,-796
 402dad0:	e0fffc17 	ldw	r3,-16(fp)
 402dad4:	1009883a 	mov	r4,r2
 402dad8:	180b883a 	mov	r5,r3
 402dadc:	01804104 	movi	r6,260
 402dae0:	4001de40 	call	4001de4 <memcpy>
   if (out)
 402dae4:	e0bffd17 	ldw	r2,-12(fp)
 402dae8:	1005003a 	cmpeq	r2,r2,zero
 402daec:	1000071e 	bne	r2,zero,402db0c <t_select+0x98>
      MEMCPY(&ibits[1], out, sizeof(fd_set));
 402daf0:	e0bf3904 	addi	r2,fp,-796
 402daf4:	10804104 	addi	r2,r2,260
 402daf8:	e0fffd17 	ldw	r3,-12(fp)
 402dafc:	1009883a 	mov	r4,r2
 402db00:	180b883a 	mov	r5,r3
 402db04:	01804104 	movi	r6,260
 402db08:	4001de40 	call	4001de4 <memcpy>
   if (ex)
 402db0c:	e0bffe17 	ldw	r2,-8(fp)
 402db10:	1005003a 	cmpeq	r2,r2,zero
 402db14:	1000071e 	bne	r2,zero,402db34 <t_select+0xc0>
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
 402db18:	e0bf3904 	addi	r2,fp,-796
 402db1c:	10808204 	addi	r2,r2,520
 402db20:	e0fffe17 	ldw	r3,-8(fp)
 402db24:	1009883a 	mov	r4,r2
 402db28:	180b883a 	mov	r5,r3
 402db2c:	01804104 	movi	r6,260
 402db30:	4001de40 	call	4001de4 <memcpy>
   tmo = cticks + tv;
 402db34:	00810174 	movhi	r2,1029
 402db38:	1081e404 	addi	r2,r2,1936
 402db3c:	10c00017 	ldw	r3,0(r2)
 402db40:	e0bfff17 	ldw	r2,-4(fp)
 402db44:	1885883a 	add	r2,r3,r2
 402db48:	e0be7515 	stw	r2,-1580(fp)

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 402db4c:	e0bf3917 	ldw	r2,-796(fp)
 402db50:	1004c03a 	cmpne	r2,r2,zero
 402db54:	10000e1e 	bne	r2,zero,402db90 <t_select+0x11c>
 402db58:	e0bf7a17 	ldw	r2,-536(fp)
 402db5c:	1004c03a 	cmpne	r2,r2,zero
 402db60:	10000b1e 	bne	r2,zero,402db90 <t_select+0x11c>
 402db64:	e0bfbb17 	ldw	r2,-276(fp)
 402db68:	1004c03a 	cmpne	r2,r2,zero
 402db6c:	1000081e 	bne	r2,zero,402db90 <t_select+0x11c>
       (ibits[2].fd_count == 0))
   {
      if (tv > 0)      /* make sure we don't block on nothing forever */
 402db70:	e0bfff17 	ldw	r2,-4(fp)
 402db74:	10800050 	cmplti	r2,r2,1
 402db78:	1000201e 	bne	r2,zero,402dbfc <t_select+0x188>
         while (tmo > cticks)
         {
            tk_yield();
         }
#else
         TK_SLEEP(tv);
 402db7c:	e0bfff17 	ldw	r2,-4(fp)
 402db80:	10800044 	addi	r2,r2,1
 402db84:	113fffcc 	andi	r4,r2,65535
 402db88:	40148840 	call	4014884 <OSTimeDly>
   if (ex)
      MEMCPY(&ibits[2], ex, sizeof(fd_set));
   tmo = cticks + tv;

   /* if all the fd_sets are empty, just block;  else do a real select() */
   if ((ibits[0].fd_count == 0) && (ibits[1].fd_count == 0) &&
 402db8c:	00001b06 	br	402dbfc <t_select+0x188>

      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
 402db90:	0009883a 	mov	r4,zero
 402db94:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      while ((retval = sock_selscan(ibits, obits)) == 0)
 402db98:	00000f06 	br	402dbd8 <t_select+0x164>
      {
         if (tv != -1L) 
 402db9c:	e0bfff17 	ldw	r2,-4(fp)
 402dba0:	10bfffe0 	cmpeqi	r2,r2,-1
 402dba4:	1000051e 	bne	r2,zero,402dbbc <t_select+0x148>
         {
            if (tmo <= cticks)
 402dba8:	00810174 	movhi	r2,1029
 402dbac:	1081e404 	addi	r2,r2,1936
 402dbb0:	10c00017 	ldw	r3,0(r2)
 402dbb4:	e0be7517 	ldw	r2,-1580(fp)
 402dbb8:	18800e2e 	bgeu	r3,r2,402dbf4 <t_select+0x180>
               break;
         }
         select_wait = 1;
 402dbbc:	00c10174 	movhi	r3,1029
 402dbc0:	18c1ec04 	addi	r3,r3,1968
 402dbc4:	00800044 	movi	r2,1
 402dbc8:	1880000d 	sth	r2,0(r3)
         tcp_sleep (&select_wait);
 402dbcc:	01010174 	movhi	r4,1029
 402dbd0:	2101ec04 	addi	r4,r4,1968
 402dbd4:	40217880 	call	4021788 <tcp_sleep>
      /* Lock the net semaphore before going into selscan. Upon
       * return we will either call tcp_sleep(), which unlocks the
       * semaphore, or fall into the unlock statement.
       */
      LOCK_NET_RESOURCE(NET_RESID);
      while ((retval = sock_selscan(ibits, obits)) == 0)
 402dbd8:	e13f3904 	addi	r4,fp,-796
 402dbdc:	e17e7604 	addi	r5,fp,-1576
 402dbe0:	402dc940 	call	402dc94 <sock_selscan>
 402dbe4:	e0be7415 	stw	r2,-1584(fp)
 402dbe8:	e0be7417 	ldw	r2,-1584(fp)
 402dbec:	1005003a 	cmpeq	r2,r2,zero
 402dbf0:	103fea1e 	bne	r2,zero,402db9c <t_select+0x128>
               break;
         }
         select_wait = 1;
         tcp_sleep (&select_wait);
      }
      UNLOCK_NET_RESOURCE(NET_RESID);
 402dbf4:	0009883a 	mov	r4,zero
 402dbf8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   }

   if (retval >= 0)
 402dbfc:	e0be7417 	ldw	r2,-1584(fp)
 402dc00:	1004803a 	cmplt	r2,r2,zero
 402dc04:	10001d1e 	bne	r2,zero,402dc7c <t_select+0x208>
   {
      if (in)
 402dc08:	e0bffc17 	ldw	r2,-16(fp)
 402dc0c:	1005003a 	cmpeq	r2,r2,zero
 402dc10:	1000061e 	bne	r2,zero,402dc2c <t_select+0x1b8>
         MEMCPY(in, &obits[0], sizeof(fd_set));
 402dc14:	e0bffc17 	ldw	r2,-16(fp)
 402dc18:	e0fe7604 	addi	r3,fp,-1576
 402dc1c:	1009883a 	mov	r4,r2
 402dc20:	180b883a 	mov	r5,r3
 402dc24:	01804104 	movi	r6,260
 402dc28:	4001de40 	call	4001de4 <memcpy>
      if (out)
 402dc2c:	e0bffd17 	ldw	r2,-12(fp)
 402dc30:	1005003a 	cmpeq	r2,r2,zero
 402dc34:	1000071e 	bne	r2,zero,402dc54 <t_select+0x1e0>
         MEMCPY(out, &obits[1], sizeof(fd_set));
 402dc38:	e0be7604 	addi	r2,fp,-1576
 402dc3c:	10c04104 	addi	r3,r2,260
 402dc40:	e0bffd17 	ldw	r2,-12(fp)
 402dc44:	1009883a 	mov	r4,r2
 402dc48:	180b883a 	mov	r5,r3
 402dc4c:	01804104 	movi	r6,260
 402dc50:	4001de40 	call	4001de4 <memcpy>
      if (ex)
 402dc54:	e0bffe17 	ldw	r2,-8(fp)
 402dc58:	1005003a 	cmpeq	r2,r2,zero
 402dc5c:	1000071e 	bne	r2,zero,402dc7c <t_select+0x208>
         MEMCPY(ex, &obits[2], sizeof(fd_set));
 402dc60:	e0be7604 	addi	r2,fp,-1576
 402dc64:	10c08204 	addi	r3,r2,520
 402dc68:	e0bffe17 	ldw	r2,-8(fp)
 402dc6c:	1009883a 	mov	r4,r2
 402dc70:	180b883a 	mov	r5,r3
 402dc74:	01804104 	movi	r6,260
 402dc78:	4001de40 	call	4001de4 <memcpy>
   }
   return retval;
 402dc7c:	e0be7417 	ldw	r2,-1584(fp)
}
 402dc80:	e037883a 	mov	sp,fp
 402dc84:	dfc00117 	ldw	ra,4(sp)
 402dc88:	df000017 	ldw	fp,0(sp)
 402dc8c:	dec00204 	addi	sp,sp,8
 402dc90:	f800283a 	ret

0402dc94 <sock_selscan>:
 * RETURNS: 
 */

int
sock_selscan(fd_set * ibits, fd_set * obits)
{
 402dc94:	defff504 	addi	sp,sp,-44
 402dc98:	dfc00a15 	stw	ra,40(sp)
 402dc9c:	df000915 	stw	fp,36(sp)
 402dca0:	df000904 	addi	fp,sp,36
 402dca4:	e13ffd15 	stw	r4,-12(fp)
 402dca8:	e17ffe15 	stw	r5,-8(fp)
   fd_set *in, *out;
   int   which;
   int   sock;
   int   flag  =  0;
 402dcac:	e03ff815 	stw	zero,-32(fp)
   int   num_sel  =  0;
 402dcb0:	e03ff715 	stw	zero,-36(fp)

   for (which = 0; which < 3; which++)
 402dcb4:	e03ffa15 	stw	zero,-24(fp)
 402dcb8:	00004306 	br	402ddc8 <sock_selscan+0x134>
   {
      switch (which)
 402dcbc:	e0bffa17 	ldw	r2,-24(fp)
 402dcc0:	e0bfff15 	stw	r2,-4(fp)
 402dcc4:	e0ffff17 	ldw	r3,-4(fp)
 402dcc8:	18800060 	cmpeqi	r2,r3,1
 402dccc:	10000a1e 	bne	r2,zero,402dcf8 <sock_selscan+0x64>
 402dcd0:	e0ffff17 	ldw	r3,-4(fp)
 402dcd4:	188000a0 	cmpeqi	r2,r3,2
 402dcd8:	10000a1e 	bne	r2,zero,402dd04 <sock_selscan+0x70>
 402dcdc:	e0ffff17 	ldw	r3,-4(fp)
 402dce0:	1805003a 	cmpeq	r2,r3,zero
 402dce4:	1000011e 	bne	r2,zero,402dcec <sock_selscan+0x58>
 402dce8:	00000706 	br	402dd08 <sock_selscan+0x74>
      {
      case 0:
         flag = SOREAD; break;
 402dcec:	00800044 	movi	r2,1
 402dcf0:	e0bff815 	stw	r2,-32(fp)
 402dcf4:	00000406 	br	402dd08 <sock_selscan+0x74>

      case 1:
         flag = SOWRITE; break;
 402dcf8:	00800084 	movi	r2,2
 402dcfc:	e0bff815 	stw	r2,-32(fp)
 402dd00:	00000106 	br	402dd08 <sock_selscan+0x74>

      case 2:
         flag = 0; break;
 402dd04:	e03ff815 	stw	zero,-32(fp)
      }
      in = &ibits [which];
 402dd08:	e0bffa17 	ldw	r2,-24(fp)
 402dd0c:	10804124 	muli	r2,r2,260
 402dd10:	1007883a 	mov	r3,r2
 402dd14:	e0bffd17 	ldw	r2,-12(fp)
 402dd18:	1885883a 	add	r2,r3,r2
 402dd1c:	e0bffc15 	stw	r2,-16(fp)
      out = &obits [which];
 402dd20:	e0bffa17 	ldw	r2,-24(fp)
 402dd24:	10804124 	muli	r2,r2,260
 402dd28:	1007883a 	mov	r3,r2
 402dd2c:	e0bffe17 	ldw	r2,-8(fp)
 402dd30:	1885883a 	add	r2,r3,r2
 402dd34:	e0bffb15 	stw	r2,-20(fp)
      for (sock = 0; sock < (int)in->fd_count; sock++)
 402dd38:	e03ff915 	stw	zero,-28(fp)
 402dd3c:	00001a06 	br	402dda8 <sock_selscan+0x114>
      {
         if (sock_select (in->fd_array[sock], flag))
 402dd40:	e0bff917 	ldw	r2,-28(fp)
 402dd44:	e0fffc17 	ldw	r3,-16(fp)
 402dd48:	1085883a 	add	r2,r2,r2
 402dd4c:	1085883a 	add	r2,r2,r2
 402dd50:	10c5883a 	add	r2,r2,r3
 402dd54:	10800104 	addi	r2,r2,4
 402dd58:	11000017 	ldw	r4,0(r2)
 402dd5c:	e17ff817 	ldw	r5,-32(fp)
 402dd60:	402ddec0 	call	402ddec <sock_select>
 402dd64:	1005003a 	cmpeq	r2,r2,zero
 402dd68:	10000c1e 	bne	r2,zero,402dd9c <sock_selscan+0x108>
         {
            FD_SET(in->fd_array[sock], out);
 402dd6c:	e0bff917 	ldw	r2,-28(fp)
 402dd70:	e0fffc17 	ldw	r3,-16(fp)
 402dd74:	1085883a 	add	r2,r2,r2
 402dd78:	1085883a 	add	r2,r2,r2
 402dd7c:	10c5883a 	add	r2,r2,r3
 402dd80:	10800104 	addi	r2,r2,4
 402dd84:	11000017 	ldw	r4,0(r2)
 402dd88:	e17ffb17 	ldw	r5,-20(fp)
 402dd8c:	402e2240 	call	402e224 <ifd_set>
            num_sel++;
 402dd90:	e0bff717 	ldw	r2,-36(fp)
 402dd94:	10800044 	addi	r2,r2,1
 402dd98:	e0bff715 	stw	r2,-36(fp)
      case 2:
         flag = 0; break;
      }
      in = &ibits [which];
      out = &obits [which];
      for (sock = 0; sock < (int)in->fd_count; sock++)
 402dd9c:	e0bff917 	ldw	r2,-28(fp)
 402dda0:	10800044 	addi	r2,r2,1
 402dda4:	e0bff915 	stw	r2,-28(fp)
 402dda8:	e0bffc17 	ldw	r2,-16(fp)
 402ddac:	10800017 	ldw	r2,0(r2)
 402ddb0:	1007883a 	mov	r3,r2
 402ddb4:	e0bff917 	ldw	r2,-28(fp)
 402ddb8:	10ffe116 	blt	r2,r3,402dd40 <sock_selscan+0xac>
   int   which;
   int   sock;
   int   flag  =  0;
   int   num_sel  =  0;

   for (which = 0; which < 3; which++)
 402ddbc:	e0bffa17 	ldw	r2,-24(fp)
 402ddc0:	10800044 	addi	r2,r2,1
 402ddc4:	e0bffa15 	stw	r2,-24(fp)
 402ddc8:	e0bffa17 	ldw	r2,-24(fp)
 402ddcc:	108000d0 	cmplti	r2,r2,3
 402ddd0:	103fba1e 	bne	r2,zero,402dcbc <sock_selscan+0x28>
            FD_SET(in->fd_array[sock], out);
            num_sel++;
         }
      }
   }
   return num_sel;
 402ddd4:	e0bff717 	ldw	r2,-36(fp)
}
 402ddd8:	e037883a 	mov	sp,fp
 402dddc:	dfc00117 	ldw	ra,4(sp)
 402dde0:	df000017 	ldw	fp,0(sp)
 402dde4:	dec00204 	addi	sp,sp,8
 402dde8:	f800283a 	ret

0402ddec <sock_select>:
 * RETURNS: 
 */

int
sock_select(long sock, int flag)
{
 402ddec:	defff904 	addi	sp,sp,-28
 402ddf0:	dfc00615 	stw	ra,24(sp)
 402ddf4:	df000515 	stw	fp,20(sp)
 402ddf8:	df000504 	addi	fp,sp,20
 402ddfc:	e13ffd15 	stw	r4,-12(fp)
 402de00:	e17ffe15 	stw	r5,-8(fp)
   struct socket *   so;
   int   ready =  0;
 402de04:	e03ffb15 	stw	zero,-20(fp)

   so = LONG2SO(sock);
 402de08:	e0bffd17 	ldw	r2,-12(fp)
 402de0c:	10bff804 	addi	r2,r2,-32
 402de10:	1085883a 	add	r2,r2,r2
 402de14:	1085883a 	add	r2,r2,r2
 402de18:	e0bffc15 	stw	r2,-16(fp)

   switch (flag) 
 402de1c:	e0bffe17 	ldw	r2,-8(fp)
 402de20:	e0bfff15 	stw	r2,-4(fp)
 402de24:	e0ffff17 	ldw	r3,-4(fp)
 402de28:	18800060 	cmpeqi	r2,r3,1
 402de2c:	1000071e 	bne	r2,zero,402de4c <sock_select+0x60>
 402de30:	e0ffff17 	ldw	r3,-4(fp)
 402de34:	188000a0 	cmpeqi	r2,r3,2
 402de38:	1000251e 	bne	r2,zero,402ded0 <sock_select+0xe4>
 402de3c:	e0ffff17 	ldw	r3,-4(fp)
 402de40:	1805003a 	cmpeq	r2,r3,zero
 402de44:	1000491e 	bne	r2,zero,402df6c <sock_select+0x180>
 402de48:	00006706 	br	402dfe8 <sock_select+0x1fc>
   {
   case SOREAD:
      /* can we read something from so? */
      if (so->so_rcv.sb_cc)
 402de4c:	e0bffc17 	ldw	r2,-16(fp)
 402de50:	10800a17 	ldw	r2,40(r2)
 402de54:	1005003a 	cmpeq	r2,r2,zero
 402de58:	1000031e 	bne	r2,zero,402de68 <sock_select+0x7c>
      {
         ready = 1;
 402de5c:	00800044 	movi	r2,1
 402de60:	e0bffb15 	stw	r2,-20(fp)
         break;
 402de64:	00006006 	br	402dfe8 <sock_select+0x1fc>
      }
      if (so->so_state & SS_CANTRCVMORE)
 402de68:	e0bffc17 	ldw	r2,-16(fp)
 402de6c:	1080088b 	ldhu	r2,34(r2)
 402de70:	10bfffcc 	andi	r2,r2,65535
 402de74:	1080080c 	andi	r2,r2,32
 402de78:	1005003a 	cmpeq	r2,r2,zero
 402de7c:	1000031e 	bne	r2,zero,402de8c <sock_select+0xa0>
      {  ready = 1;
 402de80:	00800044 	movi	r2,1
 402de84:	e0bffb15 	stw	r2,-20(fp)
         break;
 402de88:	00005706 	br	402dfe8 <sock_select+0x1fc>
      }
      if (so->so_qlen)  /* attach is ready */
 402de8c:	e0bffc17 	ldw	r2,-16(fp)
 402de90:	10801e43 	ldbu	r2,121(r2)
 402de94:	10803fcc 	andi	r2,r2,255
 402de98:	1080201c 	xori	r2,r2,128
 402de9c:	10bfe004 	addi	r2,r2,-128
 402dea0:	1005003a 	cmpeq	r2,r2,zero
 402dea4:	1000031e 	bne	r2,zero,402deb4 <sock_select+0xc8>
      {
         ready = 1;
 402dea8:	00800044 	movi	r2,1
 402deac:	e0bffb15 	stw	r2,-20(fp)
         break;
 402deb0:	00004d06 	br	402dfe8 <sock_select+0x1fc>
         }
      }
#endif   /* TCP_ZEROCOPY */

      /* fall to here if so is not ready to read */
      so->so_rcv.sb_flags |= SB_SEL;   /* set flag for select wakeup */
 402deb4:	e0bffc17 	ldw	r2,-16(fp)
 402deb8:	1080110b 	ldhu	r2,68(r2)
 402debc:	10800214 	ori	r2,r2,8
 402dec0:	1007883a 	mov	r3,r2
 402dec4:	e0bffc17 	ldw	r2,-16(fp)
 402dec8:	10c0110d 	sth	r3,68(r2)
      break;
 402decc:	00004606 	br	402dfe8 <sock_select+0x1fc>

   case SOWRITE:
      if ((sbspace(&(so)->so_snd) > 0) && 
 402ded0:	e0bffc17 	ldw	r2,-16(fp)
 402ded4:	10801317 	ldw	r2,76(r2)
 402ded8:	1007883a 	mov	r3,r2
 402dedc:	e0bffc17 	ldw	r2,-16(fp)
 402dee0:	10801217 	ldw	r2,72(r2)
 402dee4:	1885c83a 	sub	r2,r3,r2
 402dee8:	1004803a 	cmplt	r2,r2,zero
 402deec:	10001b1e 	bne	r2,zero,402df5c <sock_select+0x170>
 402def0:	e0bffc17 	ldw	r2,-16(fp)
 402def4:	10c01317 	ldw	r3,76(r2)
 402def8:	e0bffc17 	ldw	r2,-16(fp)
 402defc:	10801217 	ldw	r2,72(r2)
 402df00:	18801626 	beq	r3,r2,402df5c <sock_select+0x170>
 402df04:	e0bffc17 	ldw	r2,-16(fp)
 402df08:	1080088b 	ldhu	r2,34(r2)
 402df0c:	10bfffcc 	andi	r2,r2,65535
 402df10:	1080008c 	andi	r2,r2,2
 402df14:	1004c03a 	cmpne	r2,r2,zero
 402df18:	10000d1e 	bne	r2,zero,402df50 <sock_select+0x164>
 402df1c:	e0bffc17 	ldw	r2,-16(fp)
 402df20:	10800217 	ldw	r2,8(r2)
 402df24:	1080010b 	ldhu	r2,4(r2)
 402df28:	10bfffcc 	andi	r2,r2,65535
 402df2c:	1080010c 	andi	r2,r2,4
 402df30:	1005003a 	cmpeq	r2,r2,zero
 402df34:	1000061e 	bne	r2,zero,402df50 <sock_select+0x164>
 402df38:	e0bffc17 	ldw	r2,-16(fp)
 402df3c:	1080088b 	ldhu	r2,34(r2)
 402df40:	10bfffcc 	andi	r2,r2,65535
 402df44:	1080040c 	andi	r2,r2,16
 402df48:	1005003a 	cmpeq	r2,r2,zero
 402df4c:	1000031e 	bne	r2,zero,402df5c <sock_select+0x170>
          ((((so)->so_state&SS_ISCONNECTED) || 
            ((so)->so_proto->pr_flags&PR_CONNREQUIRED)==0) || 
           ((so)->so_state & SS_CANTSENDMORE)))
      {
         ready = 1;
 402df50:	00800044 	movi	r2,1
 402df54:	e0bffb15 	stw	r2,-20(fp)
         break;
 402df58:	00002306 	br	402dfe8 <sock_select+0x1fc>
      }
      sbselqueue (&so->so_snd);
 402df5c:	e0bffc17 	ldw	r2,-16(fp)
 402df60:	11001204 	addi	r4,r2,72
 402df64:	402ce940 	call	402ce94 <sbselqueue>
      break;
 402df68:	00001f06 	br	402dfe8 <sock_select+0x1fc>

   case 0:
      if (so->so_oobmark || (so->so_state & SS_RCVATMARK))
 402df6c:	e0bffc17 	ldw	r2,-16(fp)
 402df70:	10801a17 	ldw	r2,104(r2)
 402df74:	1004c03a 	cmpne	r2,r2,zero
 402df78:	1000061e 	bne	r2,zero,402df94 <sock_select+0x1a8>
 402df7c:	e0bffc17 	ldw	r2,-16(fp)
 402df80:	1080088b 	ldhu	r2,34(r2)
 402df84:	10bfffcc 	andi	r2,r2,65535
 402df88:	1080100c 	andi	r2,r2,64
 402df8c:	1005003a 	cmpeq	r2,r2,zero
 402df90:	1000031e 	bne	r2,zero,402dfa0 <sock_select+0x1b4>
      {
         ready = 1;
 402df94:	00800044 	movi	r2,1
 402df98:	e0bffb15 	stw	r2,-20(fp)
         break;
 402df9c:	00001206 	br	402dfe8 <sock_select+0x1fc>
      }
      if (so->so_error &&
 402dfa0:	e0bffc17 	ldw	r2,-16(fp)
 402dfa4:	10800617 	ldw	r2,24(r2)
 402dfa8:	1005003a 	cmpeq	r2,r2,zero
 402dfac:	10000b1e 	bne	r2,zero,402dfdc <sock_select+0x1f0>
 402dfb0:	e0bffc17 	ldw	r2,-16(fp)
 402dfb4:	10800617 	ldw	r2,24(r2)
 402dfb8:	10801de0 	cmpeqi	r2,r2,119
 402dfbc:	1000071e 	bne	r2,zero,402dfdc <sock_select+0x1f0>
 402dfc0:	e0bffc17 	ldw	r2,-16(fp)
 402dfc4:	10800617 	ldw	r2,24(r2)
 402dfc8:	108002e0 	cmpeqi	r2,r2,11
 402dfcc:	1000031e 	bne	r2,zero,402dfdc <sock_select+0x1f0>
          (so->so_error != EINPROGRESS) &&
          (so->so_error != EWOULDBLOCK))
      {
         ready = 1;
 402dfd0:	00800044 	movi	r2,1
 402dfd4:	e0bffb15 	stw	r2,-20(fp)
         break;
 402dfd8:	00000306 	br	402dfe8 <sock_select+0x1fc>
      }
      sbselqueue(&so->so_rcv);
 402dfdc:	e0bffc17 	ldw	r2,-16(fp)
 402dfe0:	11000a04 	addi	r4,r2,40
 402dfe4:	402ce940 	call	402ce94 <sbselqueue>
      break;
   }

   return ready;
 402dfe8:	e0bffb17 	ldw	r2,-20(fp)
}
 402dfec:	e037883a 	mov	sp,fp
 402dff0:	dfc00117 	ldw	ra,4(sp)
 402dff4:	df000017 	ldw	fp,0(sp)
 402dff8:	dec00204 	addi	sp,sp,8
 402dffc:	f800283a 	ret

0402e000 <in_pcbnotify>:
void
in_pcbnotify(struct inpcb * head, 
   struct in_addr *  dst,
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
 402e000:	defff804 	addi	sp,sp,-32
 402e004:	dfc00715 	stw	ra,28(sp)
 402e008:	df000615 	stw	fp,24(sp)
 402e00c:	df000604 	addi	fp,sp,24
 402e010:	e13ffc15 	stw	r4,-16(fp)
 402e014:	e17ffd15 	stw	r5,-12(fp)
 402e018:	e1bffe15 	stw	r6,-8(fp)
 402e01c:	e1ffff15 	stw	r7,-4(fp)
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 402e020:	e0bffc17 	ldw	r2,-16(fp)
 402e024:	10800017 	ldw	r2,0(r2)
 402e028:	e0bffb15 	stw	r2,-20(fp)
 402e02c:	00001f06 	br	402e0ac <in_pcbnotify+0xac>
   {
      if (inp->inp_faddr.s_addr != dst->s_addr ||
 402e030:	e0bffb17 	ldw	r2,-20(fp)
 402e034:	10c00317 	ldw	r3,12(r2)
 402e038:	e0bffd17 	ldw	r2,-12(fp)
 402e03c:	10800017 	ldw	r2,0(r2)
 402e040:	1880041e 	bne	r3,r2,402e054 <in_pcbnotify+0x54>
 402e044:	e0bffb17 	ldw	r2,-20(fp)
 402e048:	10800817 	ldw	r2,32(r2)
 402e04c:	1004c03a 	cmpne	r2,r2,zero
 402e050:	1000041e 	bne	r2,zero,402e064 <in_pcbnotify+0x64>
          inp->inp_socket == 0) 
      {
         inp = inp->inp_next;
 402e054:	e0bffb17 	ldw	r2,-20(fp)
 402e058:	10800017 	ldw	r2,0(r2)
 402e05c:	e0bffb15 	stw	r2,-20(fp)
         continue;
 402e060:	00001206 	br	402e0ac <in_pcbnotify+0xac>
      }
      if (errnum) 
 402e064:	e0bffe17 	ldw	r2,-8(fp)
 402e068:	1005003a 	cmpeq	r2,r2,zero
 402e06c:	1000041e 	bne	r2,zero,402e080 <in_pcbnotify+0x80>
         inp->inp_socket->so_error = errnum;
 402e070:	e0bffb17 	ldw	r2,-20(fp)
 402e074:	10c00817 	ldw	r3,32(r2)
 402e078:	e0bffe17 	ldw	r2,-8(fp)
 402e07c:	18800615 	stw	r2,24(r3)
      oinp = inp;
 402e080:	e0bffb17 	ldw	r2,-20(fp)
 402e084:	e0bffa15 	stw	r2,-24(fp)
      inp = inp->inp_next;
 402e088:	e0bffb17 	ldw	r2,-20(fp)
 402e08c:	10800017 	ldw	r2,0(r2)
 402e090:	e0bffb15 	stw	r2,-20(fp)
      if (notify)
 402e094:	e0bfff17 	ldw	r2,-4(fp)
 402e098:	1005003a 	cmpeq	r2,r2,zero
 402e09c:	1000031e 	bne	r2,zero,402e0ac <in_pcbnotify+0xac>
         (*notify)(oinp);
 402e0a0:	e0bfff17 	ldw	r2,-4(fp)
 402e0a4:	e13ffa17 	ldw	r4,-24(fp)
 402e0a8:	103ee83a 	callr	r2
   int   errnum,
   void (*notify) __P ((struct inpcb *)))
{
   struct inpcb * inp, *   oinp;

   for (inp = head->inp_next; inp != head;) 
 402e0ac:	e0fffb17 	ldw	r3,-20(fp)
 402e0b0:	e0bffc17 	ldw	r2,-16(fp)
 402e0b4:	18bfde1e 	bne	r3,r2,402e030 <in_pcbnotify+0x30>
      oinp = inp;
      inp = inp->inp_next;
      if (notify)
         (*notify)(oinp);
   }
}
 402e0b8:	e037883a 	mov	sp,fp
 402e0bc:	dfc00117 	ldw	ra,4(sp)
 402e0c0:	df000017 	ldw	fp,0(sp)
 402e0c4:	dec00204 	addi	sp,sp,8
 402e0c8:	f800283a 	ret

0402e0cc <tcp_notify>:
 * RETURNS: 
 */

void
tcp_notify(struct inpcb * inp)
{
 402e0cc:	defffd04 	addi	sp,sp,-12
 402e0d0:	dfc00215 	stw	ra,8(sp)
 402e0d4:	df000115 	stw	fp,4(sp)
 402e0d8:	df000104 	addi	fp,sp,4
 402e0dc:	e13fff15 	stw	r4,-4(fp)
   tcp_wakeup(&inp->inp_socket->so_timeo);
 402e0e0:	e0bfff17 	ldw	r2,-4(fp)
 402e0e4:	10800817 	ldw	r2,32(r2)
 402e0e8:	11000904 	addi	r4,r2,36
 402e0ec:	40219280 	call	4021928 <tcp_wakeup>
   sorwakeup(inp->inp_socket);
 402e0f0:	e0bfff17 	ldw	r2,-4(fp)
 402e0f4:	11000817 	ldw	r4,32(r2)
 402e0f8:	e0bfff17 	ldw	r2,-4(fp)
 402e0fc:	10800817 	ldw	r2,32(r2)
 402e100:	11400a04 	addi	r5,r2,40
 402e104:	402cf340 	call	402cf34 <sbwakeup>
   sowwakeup(inp->inp_socket);
 402e108:	e0bfff17 	ldw	r2,-4(fp)
 402e10c:	11000817 	ldw	r4,32(r2)
 402e110:	e0bfff17 	ldw	r2,-4(fp)
 402e114:	10800817 	ldw	r2,32(r2)
 402e118:	11401204 	addi	r5,r2,72
 402e11c:	402cf340 	call	402cf34 <sbwakeup>
}
 402e120:	e037883a 	mov	sp,fp
 402e124:	dfc00117 	ldw	ra,4(sp)
 402e128:	df000017 	ldw	fp,0(sp)
 402e12c:	dec00204 	addi	sp,sp,8
 402e130:	f800283a 	ret

0402e134 <ifd_clr>:
 * compacts the fd_set.
 */

void
ifd_clr(long sock, fd_set *set)
{
 402e134:	defffb04 	addi	sp,sp,-20
 402e138:	dfc00415 	stw	ra,16(sp)
 402e13c:	df000315 	stw	fp,12(sp)
 402e140:	df000304 	addi	fp,sp,12
 402e144:	e13ffe15 	stw	r4,-8(fp)
 402e148:	e17fff15 	stw	r5,-4(fp)
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
 402e14c:	e03ffd15 	stw	zero,-12(fp)
 402e150:	00002a06 	br	402e1fc <ifd_clr+0xc8>
   {
      if (set->fd_array[i] == sock)
 402e154:	e0bffd17 	ldw	r2,-12(fp)
 402e158:	e0ffff17 	ldw	r3,-4(fp)
 402e15c:	1085883a 	add	r2,r2,r2
 402e160:	1085883a 	add	r2,r2,r2
 402e164:	10c5883a 	add	r2,r2,r3
 402e168:	10800104 	addi	r2,r2,4
 402e16c:	10c00017 	ldw	r3,0(r2)
 402e170:	e0bffe17 	ldw	r2,-8(fp)
 402e174:	18801e1e 	bne	r3,r2,402e1f0 <ifd_clr+0xbc>
      {
         while (i + 1 < set->fd_count)
 402e178:	00001206 	br	402e1c4 <ifd_clr+0x90>
         {
            set->fd_array[i] = set->fd_array[i + 1];
 402e17c:	e13ffd17 	ldw	r4,-12(fp)
 402e180:	e0bffd17 	ldw	r2,-12(fp)
 402e184:	10800044 	addi	r2,r2,1
 402e188:	e0ffff17 	ldw	r3,-4(fp)
 402e18c:	1085883a 	add	r2,r2,r2
 402e190:	1085883a 	add	r2,r2,r2
 402e194:	10c5883a 	add	r2,r2,r3
 402e198:	10800104 	addi	r2,r2,4
 402e19c:	11400017 	ldw	r5,0(r2)
 402e1a0:	e0ffff17 	ldw	r3,-4(fp)
 402e1a4:	2105883a 	add	r2,r4,r4
 402e1a8:	1085883a 	add	r2,r2,r2
 402e1ac:	10c5883a 	add	r2,r2,r3
 402e1b0:	10800104 	addi	r2,r2,4
 402e1b4:	11400015 	stw	r5,0(r2)
            i++;
 402e1b8:	e0bffd17 	ldw	r2,-12(fp)
 402e1bc:	10800044 	addi	r2,r2,1
 402e1c0:	e0bffd15 	stw	r2,-12(fp)

   for (i = 0; i < set->fd_count ; i++) 
   {
      if (set->fd_array[i] == sock)
      {
         while (i + 1 < set->fd_count)
 402e1c4:	e0bffd17 	ldw	r2,-12(fp)
 402e1c8:	10c00044 	addi	r3,r2,1
 402e1cc:	e0bfff17 	ldw	r2,-4(fp)
 402e1d0:	10800017 	ldw	r2,0(r2)
 402e1d4:	18bfe936 	bltu	r3,r2,402e17c <ifd_clr+0x48>
         {
            set->fd_array[i] = set->fd_array[i + 1];
            i++;
         }
         set->fd_count--;
 402e1d8:	e0bfff17 	ldw	r2,-4(fp)
 402e1dc:	10800017 	ldw	r2,0(r2)
 402e1e0:	10ffffc4 	addi	r3,r2,-1
 402e1e4:	e0bfff17 	ldw	r2,-4(fp)
 402e1e8:	10c00015 	stw	r3,0(r2)
         return;
 402e1ec:	00000806 	br	402e210 <ifd_clr+0xdc>
void
ifd_clr(long sock, fd_set *set)
{
   u_int i;

   for (i = 0; i < set->fd_count ; i++) 
 402e1f0:	e0bffd17 	ldw	r2,-12(fp)
 402e1f4:	10800044 	addi	r2,r2,1
 402e1f8:	e0bffd15 	stw	r2,-12(fp)
 402e1fc:	e0bfff17 	ldw	r2,-4(fp)
 402e200:	10c00017 	ldw	r3,0(r2)
 402e204:	e0bffd17 	ldw	r2,-12(fp)
 402e208:	10ffd236 	bltu	r2,r3,402e154 <ifd_clr+0x20>
         return;
      }
   }

#ifdef NPDEBUG
   dtrap(); /* socket wasn't found in array */
 402e20c:	4025bb40 	call	4025bb4 <dtrap>
#endif
}
 402e210:	e037883a 	mov	sp,fp
 402e214:	dfc00117 	ldw	ra,4(sp)
 402e218:	df000017 	ldw	fp,0(sp)
 402e21c:	dec00204 	addi	sp,sp,8
 402e220:	f800283a 	ret

0402e224 <ifd_set>:
 * called if the fd_set structure is already full.
 */

void
ifd_set(long sock, fd_set *set)
{
 402e224:	defffc04 	addi	sp,sp,-16
 402e228:	dfc00315 	stw	ra,12(sp)
 402e22c:	df000215 	stw	fp,8(sp)
 402e230:	df000204 	addi	fp,sp,8
 402e234:	e13ffe15 	stw	r4,-8(fp)
 402e238:	e17fff15 	stw	r5,-4(fp)
   if (set->fd_count < FD_SETSIZE)
 402e23c:	e0bfff17 	ldw	r2,-4(fp)
 402e240:	10800017 	ldw	r2,0(r2)
 402e244:	10801028 	cmpgeui	r2,r2,64
 402e248:	10000d1e 	bne	r2,zero,402e280 <ifd_set+0x5c>
      set->fd_array[set->fd_count++] = sock;
 402e24c:	e0bfff17 	ldw	r2,-4(fp)
 402e250:	10c00017 	ldw	r3,0(r2)
 402e254:	e13fff17 	ldw	r4,-4(fp)
 402e258:	18c5883a 	add	r2,r3,r3
 402e25c:	1085883a 	add	r2,r2,r2
 402e260:	1105883a 	add	r2,r2,r4
 402e264:	11000104 	addi	r4,r2,4
 402e268:	e0bffe17 	ldw	r2,-8(fp)
 402e26c:	20800015 	stw	r2,0(r4)
 402e270:	18c00044 	addi	r3,r3,1
 402e274:	e0bfff17 	ldw	r2,-4(fp)
 402e278:	10c00015 	stw	r3,0(r2)
 402e27c:	00000106 	br	402e284 <ifd_set+0x60>
#ifdef NPDEBUG
   else
      dtrap();
 402e280:	4025bb40 	call	4025bb4 <dtrap>
#endif
}
 402e284:	e037883a 	mov	sp,fp
 402e288:	dfc00117 	ldw	ra,4(sp)
 402e28c:	df000017 	ldw	fp,0(sp)
 402e290:	dec00204 	addi	sp,sp,8
 402e294:	f800283a 	ret

0402e298 <ifd_isset>:
 * Tests if a socket is a member of a file descriptor set.
 */

int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
 402e298:	defffb04 	addi	sp,sp,-20
 402e29c:	df000415 	stw	fp,16(sp)
 402e2a0:	df000404 	addi	fp,sp,16
 402e2a4:	e13ffd15 	stw	r4,-12(fp)
 402e2a8:	e17ffe15 	stw	r5,-8(fp)
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 402e2ac:	e03ffc15 	stw	zero,-16(fp)
 402e2b0:	00000f06 	br	402e2f0 <ifd_isset+0x58>
   {
      if (set->fd_array[i] == sock)
 402e2b4:	e0bffc17 	ldw	r2,-16(fp)
 402e2b8:	e0fffe17 	ldw	r3,-8(fp)
 402e2bc:	1085883a 	add	r2,r2,r2
 402e2c0:	1085883a 	add	r2,r2,r2
 402e2c4:	10c5883a 	add	r2,r2,r3
 402e2c8:	10800104 	addi	r2,r2,4
 402e2cc:	10c00017 	ldw	r3,0(r2)
 402e2d0:	e0bffd17 	ldw	r2,-12(fp)
 402e2d4:	1880031e 	bne	r3,r2,402e2e4 <ifd_isset+0x4c>
         return TRUE;
 402e2d8:	00800044 	movi	r2,1
 402e2dc:	e0bfff15 	stw	r2,-4(fp)
 402e2e0:	00000806 	br	402e304 <ifd_isset+0x6c>
int   /* actually, boolean */
ifd_isset(long sock, fd_set *set)
{
   u_int   i;

   for (i = 0; i < set->fd_count ; i++)
 402e2e4:	e0bffc17 	ldw	r2,-16(fp)
 402e2e8:	10800044 	addi	r2,r2,1
 402e2ec:	e0bffc15 	stw	r2,-16(fp)
 402e2f0:	e0bffe17 	ldw	r2,-8(fp)
 402e2f4:	10c00017 	ldw	r3,0(r2)
 402e2f8:	e0bffc17 	ldw	r2,-16(fp)
 402e2fc:	10ffed36 	bltu	r2,r3,402e2b4 <ifd_isset+0x1c>
   {
      if (set->fd_array[i] == sock)
         return TRUE;
   }
   return FALSE;
 402e300:	e03fff15 	stw	zero,-4(fp)
 402e304:	e0bfff17 	ldw	r2,-4(fp)
}
 402e308:	e037883a 	mov	sp,fp
 402e30c:	df000017 	ldw	fp,0(sp)
 402e310:	dec00104 	addi	sp,sp,4
 402e314:	f800283a 	ret

0402e318 <ifd_get>:
 * NOTE: This is not part of the original FD_XXX() functionality.
 */

long
ifd_get(unsigned i, fd_set *set)
{
 402e318:	defffb04 	addi	sp,sp,-20
 402e31c:	dfc00415 	stw	ra,16(sp)
 402e320:	df000315 	stw	fp,12(sp)
 402e324:	df000304 	addi	fp,sp,12
 402e328:	e13ffd15 	stw	r4,-12(fp)
 402e32c:	e17ffe15 	stw	r5,-8(fp)
   if (i < set->fd_count)
 402e330:	e0bffe17 	ldw	r2,-8(fp)
 402e334:	10c00017 	ldw	r3,0(r2)
 402e338:	e0bffd17 	ldw	r2,-12(fp)
 402e33c:	10c0092e 	bgeu	r2,r3,402e364 <ifd_get+0x4c>
      return set->fd_array[i];
 402e340:	e0bffd17 	ldw	r2,-12(fp)
 402e344:	e0fffe17 	ldw	r3,-8(fp)
 402e348:	1085883a 	add	r2,r2,r2
 402e34c:	1085883a 	add	r2,r2,r2
 402e350:	10c5883a 	add	r2,r2,r3
 402e354:	10800104 	addi	r2,r2,4
 402e358:	10800017 	ldw	r2,0(r2)
 402e35c:	e0bfff15 	stw	r2,-4(fp)
 402e360:	00000306 	br	402e370 <ifd_get+0x58>
   else
   {
#ifdef NPDEBUG
      dtrap();
 402e364:	4025bb40 	call	4025bb4 <dtrap>
#endif
      return INVALID_SOCKET;
 402e368:	00bfffc4 	movi	r2,-1
 402e36c:	e0bfff15 	stw	r2,-4(fp)
 402e370:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 402e374:	e037883a 	mov	sp,fp
 402e378:	dfc00117 	ldw	ra,4(sp)
 402e37c:	df000017 	ldw	fp,0(sp)
 402e380:	dec00204 	addi	sp,sp,8
 402e384:	f800283a 	ret

0402e388 <tcp_reass>:

int
tcp_reass(struct tcpcb * tp, 
   struct tcpiphdr * ti,
   struct mbuf *  ti_mbuf)
{
 402e388:	defff404 	addi	sp,sp,-48
 402e38c:	dfc00b15 	stw	ra,44(sp)
 402e390:	df000a15 	stw	fp,40(sp)
 402e394:	df000a04 	addi	fp,sp,40
 402e398:	e13ffc15 	stw	r4,-16(fp)
 402e39c:	e17ffd15 	stw	r5,-12(fp)
 402e3a0:	e1bffe15 	stw	r6,-8(fp)
   struct tcpiphdr * q;
   struct socket *   so =  tp->t_inpcb->inp_socket;
 402e3a4:	e0bffc17 	ldw	r2,-16(fp)
 402e3a8:	10800d17 	ldw	r2,52(r2)
 402e3ac:	10800817 	ldw	r2,32(r2)
 402e3b0:	e0bffa15 	stw	r2,-24(fp)

   /*
    * Call with ti==0 after become established to
    * force pre-ESTABLISHED data up to user socket.
    */
   if (ti == 0)
 402e3b4:	e0bffd17 	ldw	r2,-12(fp)
 402e3b8:	1005003a 	cmpeq	r2,r2,zero
 402e3bc:	10009c1e 	bne	r2,zero,402e630 <tcp_reass+0x2a8>
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 402e3c0:	e0bffc17 	ldw	r2,-16(fp)
 402e3c4:	10800017 	ldw	r2,0(r2)
 402e3c8:	e0bffb15 	stw	r2,-20(fp)
 402e3cc:	00000a06 	br	402e3f8 <tcp_reass+0x70>
       q = (struct tcpiphdr *)q->ti_next)
   {
      if (SEQ_GT(q->ti_seq, ti->ti_seq))
 402e3d0:	e0bffb17 	ldw	r2,-20(fp)
 402e3d4:	10c00617 	ldw	r3,24(r2)
 402e3d8:	e0bffd17 	ldw	r2,-12(fp)
 402e3dc:	10800617 	ldw	r2,24(r2)
 402e3e0:	1885c83a 	sub	r2,r3,r2
 402e3e4:	10800048 	cmpgei	r2,r2,1
 402e3e8:	1000061e 	bne	r2,zero,402e404 <tcp_reass+0x7c>

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
       q = (struct tcpiphdr *)q->ti_next)
 402e3ec:	e0bffb17 	ldw	r2,-20(fp)
 402e3f0:	10800017 	ldw	r2,0(r2)
 402e3f4:	e0bffb15 	stw	r2,-20(fp)
      goto present;

   /*
    * Find a segment which begins after this one does.
    */
   for (q = tp->seg_next; q != (struct tcpiphdr *)tp;
 402e3f8:	e0fffc17 	ldw	r3,-16(fp)
 402e3fc:	e0bffb17 	ldw	r2,-20(fp)
 402e400:	10fff31e 	bne	r2,r3,402e3d0 <tcp_reass+0x48>
   /*
    * If there is a preceding segment, it may provide some of
    * our data already.  If so, drop the data from the incoming
    * segment.  If it provides all of our data, drop us.
    */
   if ((struct tcpiphdr *)q->ti_prev != (struct tcpiphdr *)tp) 
 402e404:	e0bffb17 	ldw	r2,-20(fp)
 402e408:	10800117 	ldw	r2,4(r2)
 402e40c:	1007883a 	mov	r3,r2
 402e410:	e0bffc17 	ldw	r2,-16(fp)
 402e414:	18803c26 	beq	r3,r2,402e508 <tcp_reass+0x180>
   {
      long  i;
      q = (struct tcpiphdr *)q->ti_prev;
 402e418:	e0bffb17 	ldw	r2,-20(fp)
 402e41c:	10800117 	ldw	r2,4(r2)
 402e420:	e0bffb15 	stw	r2,-20(fp)
      /* conversion to int (in i) handles seq wraparound */
      i = q->ti_seq + q->ti_len - ti->ti_seq;
 402e424:	e0bffb17 	ldw	r2,-20(fp)
 402e428:	10c00617 	ldw	r3,24(r2)
 402e42c:	e0bffb17 	ldw	r2,-20(fp)
 402e430:	1080028b 	ldhu	r2,10(r2)
 402e434:	10bfffcc 	andi	r2,r2,65535
 402e438:	1887883a 	add	r3,r3,r2
 402e43c:	e0bffd17 	ldw	r2,-12(fp)
 402e440:	10800617 	ldw	r2,24(r2)
 402e444:	1885c83a 	sub	r2,r3,r2
 402e448:	e0bff715 	stw	r2,-36(fp)
      if (i > 0) 
 402e44c:	e0bff717 	ldw	r2,-36(fp)
 402e450:	10800050 	cmplti	r2,r2,1
 402e454:	1000291e 	bne	r2,zero,402e4fc <tcp_reass+0x174>
      {
         if (i >= (long)ti->ti_len) 
 402e458:	e0bffd17 	ldw	r2,-12(fp)
 402e45c:	1080028b 	ldhu	r2,10(r2)
 402e460:	10ffffcc 	andi	r3,r2,65535
 402e464:	e0bff717 	ldw	r2,-36(fp)
 402e468:	10c01416 	blt	r2,r3,402e4bc <tcp_reass+0x134>
         {
            tcpstat.tcps_rcvduppack++;
 402e46c:	008101b4 	movhi	r2,1030
 402e470:	10a37804 	addi	r2,r2,-29216
 402e474:	10801f17 	ldw	r2,124(r2)
 402e478:	10c00044 	addi	r3,r2,1
 402e47c:	008101b4 	movhi	r2,1030
 402e480:	10a37804 	addi	r2,r2,-29216
 402e484:	10c01f15 	stw	r3,124(r2)
            tcpstat.tcps_rcvdupbyte += ti->ti_len;
 402e488:	008101b4 	movhi	r2,1030
 402e48c:	10a37804 	addi	r2,r2,-29216
 402e490:	10c02017 	ldw	r3,128(r2)
 402e494:	e0bffd17 	ldw	r2,-12(fp)
 402e498:	1080028b 	ldhu	r2,10(r2)
 402e49c:	10bfffcc 	andi	r2,r2,65535
 402e4a0:	1887883a 	add	r3,r3,r2
 402e4a4:	008101b4 	movhi	r2,1030
 402e4a8:	10a37804 	addi	r2,r2,-29216
 402e4ac:	10c02015 	stw	r3,128(r2)
            GOTO_DROP;
 402e4b0:	008025c4 	movi	r2,151
 402e4b4:	d0a83015 	stw	r2,-24384(gp)
 402e4b8:	0000ac06 	br	402e76c <tcp_reass+0x3e4>
         }
         m_adj (ti_mbuf, (int)i);
 402e4bc:	e13ffe17 	ldw	r4,-8(fp)
 402e4c0:	e17ff717 	ldw	r5,-36(fp)
 402e4c4:	4026ff80 	call	4026ff8 <m_adj>
         ti->ti_len -= (short)i;
 402e4c8:	e0bffd17 	ldw	r2,-12(fp)
 402e4cc:	10c0028b 	ldhu	r3,10(r2)
 402e4d0:	e0bff717 	ldw	r2,-36(fp)
 402e4d4:	1885c83a 	sub	r2,r3,r2
 402e4d8:	1007883a 	mov	r3,r2
 402e4dc:	e0bffd17 	ldw	r2,-12(fp)
 402e4e0:	10c0028d 	sth	r3,10(r2)
         ti->ti_seq += (tcp_seq)i;
 402e4e4:	e0bffd17 	ldw	r2,-12(fp)
 402e4e8:	10c00617 	ldw	r3,24(r2)
 402e4ec:	e0bff717 	ldw	r2,-36(fp)
 402e4f0:	1887883a 	add	r3,r3,r2
 402e4f4:	e0bffd17 	ldw	r2,-12(fp)
 402e4f8:	10c00615 	stw	r3,24(r2)
      }
      q = (struct tcpiphdr *)(q->ti_next);
 402e4fc:	e0bffb17 	ldw	r2,-20(fp)
 402e500:	10800017 	ldw	r2,0(r2)
 402e504:	e0bffb15 	stw	r2,-20(fp)
   }
   tcpstat.tcps_rcvoopack++;
 402e508:	008101b4 	movhi	r2,1030
 402e50c:	10a37804 	addi	r2,r2,-29216
 402e510:	10802317 	ldw	r2,140(r2)
 402e514:	10c00044 	addi	r3,r2,1
 402e518:	008101b4 	movhi	r2,1030
 402e51c:	10a37804 	addi	r2,r2,-29216
 402e520:	10c02315 	stw	r3,140(r2)
   tcpstat.tcps_rcvoobyte += ti->ti_len;
 402e524:	008101b4 	movhi	r2,1030
 402e528:	10a37804 	addi	r2,r2,-29216
 402e52c:	10c02417 	ldw	r3,144(r2)
 402e530:	e0bffd17 	ldw	r2,-12(fp)
 402e534:	1080028b 	ldhu	r2,10(r2)
 402e538:	10bfffcc 	andi	r2,r2,65535
 402e53c:	1887883a 	add	r3,r3,r2
 402e540:	008101b4 	movhi	r2,1030
 402e544:	10a37804 	addi	r2,r2,-29216
 402e548:	10c02415 	stw	r3,144(r2)

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
 402e54c:	00003106 	br	402e614 <tcp_reass+0x28c>
   {
      int   i  =  (int)((ti->ti_seq +  ti->ti_len) -  q->ti_seq);
 402e550:	e0bffd17 	ldw	r2,-12(fp)
 402e554:	10c00617 	ldw	r3,24(r2)
 402e558:	e0bffd17 	ldw	r2,-12(fp)
 402e55c:	1080028b 	ldhu	r2,10(r2)
 402e560:	10bfffcc 	andi	r2,r2,65535
 402e564:	1887883a 	add	r3,r3,r2
 402e568:	e0bffb17 	ldw	r2,-20(fp)
 402e56c:	10800617 	ldw	r2,24(r2)
 402e570:	1885c83a 	sub	r2,r3,r2
 402e574:	e0bff615 	stw	r2,-40(fp)
      if (i <= 0)
 402e578:	e0bff617 	ldw	r2,-40(fp)
 402e57c:	10800050 	cmplti	r2,r2,1
 402e580:	1000271e 	bne	r2,zero,402e620 <tcp_reass+0x298>
         break;
      if (i < (int)(q->ti_len))
 402e584:	e0bffb17 	ldw	r2,-20(fp)
 402e588:	1080028b 	ldhu	r2,10(r2)
 402e58c:	10ffffcc 	andi	r3,r2,65535
 402e590:	e0bff617 	ldw	r2,-40(fp)
 402e594:	10c0130e 	bge	r2,r3,402e5e4 <tcp_reass+0x25c>
      {
         q->ti_seq += i;
 402e598:	e0bffb17 	ldw	r2,-20(fp)
 402e59c:	10c00617 	ldw	r3,24(r2)
 402e5a0:	e0bff617 	ldw	r2,-40(fp)
 402e5a4:	1887883a 	add	r3,r3,r2
 402e5a8:	e0bffb17 	ldw	r2,-20(fp)
 402e5ac:	10c00615 	stw	r3,24(r2)
         q->ti_len -= (u_short)i;
 402e5b0:	e0bffb17 	ldw	r2,-20(fp)
 402e5b4:	10c0028b 	ldhu	r3,10(r2)
 402e5b8:	e0bff617 	ldw	r2,-40(fp)
 402e5bc:	1885c83a 	sub	r2,r3,r2
 402e5c0:	1007883a 	mov	r3,r2
 402e5c4:	e0bffb17 	ldw	r2,-20(fp)
 402e5c8:	10c0028d 	sth	r3,10(r2)
         m_adj (dtom(q), (int)i);
 402e5cc:	e13ffb17 	ldw	r4,-20(fp)
 402e5d0:	40272200 	call	4027220 <dtom>
 402e5d4:	1009883a 	mov	r4,r2
 402e5d8:	e17ff617 	ldw	r5,-40(fp)
 402e5dc:	4026ff80 	call	4026ff8 <m_adj>
         break;
 402e5e0:	00000f06 	br	402e620 <tcp_reass+0x298>
      }
      q = (struct tcpiphdr *)q->ti_next;
 402e5e4:	e0bffb17 	ldw	r2,-20(fp)
 402e5e8:	10800017 	ldw	r2,0(r2)
 402e5ec:	e0bffb15 	stw	r2,-20(fp)
      m = dtom(q->ti_prev);
 402e5f0:	e0bffb17 	ldw	r2,-20(fp)
 402e5f4:	11000117 	ldw	r4,4(r2)
 402e5f8:	40272200 	call	4027220 <dtom>
 402e5fc:	e0bff915 	stw	r2,-28(fp)
      remque (q->ti_prev);
 402e600:	e0bffb17 	ldw	r2,-20(fp)
 402e604:	11000117 	ldw	r4,4(r2)
 402e608:	40272c80 	call	40272c8 <remque>
      m_freem (m);
 402e60c:	e13ff917 	ldw	r4,-28(fp)
 402e610:	4026c900 	call	4026c90 <m_freem>

   /*
    * While we overlap succeeding segments trim them or,
    * if they are completely covered, dequeue them.
    */
   while (q != (struct tcpiphdr *)tp) 
 402e614:	e0fffc17 	ldw	r3,-16(fp)
 402e618:	e0bffb17 	ldw	r2,-20(fp)
 402e61c:	10ffcc1e 	bne	r2,r3,402e550 <tcp_reass+0x1c8>
   }

   /*
    * Stick new segment in its place.
    */
   insque(ti, q->ti_prev);
 402e620:	e0bffb17 	ldw	r2,-20(fp)
 402e624:	11400117 	ldw	r5,4(r2)
 402e628:	e13ffd17 	ldw	r4,-12(fp)
 402e62c:	40273380 	call	4027338 <insque>
present:
   /*
    * Present data to user, advancing rcv_nxt through
    * completed sequence space.
    */
   if (TCPS_HAVERCVDSYN (tp->t_state) == 0)
 402e630:	e0bffc17 	ldw	r2,-16(fp)
 402e634:	10800217 	ldw	r2,8(r2)
 402e638:	108000c8 	cmpgei	r2,r2,3
 402e63c:	1000021e 	bne	r2,zero,402e648 <tcp_reass+0x2c0>
      return (0);
 402e640:	e03fff15 	stw	zero,-4(fp)
 402e644:	00004c06 	br	402e778 <tcp_reass+0x3f0>
   ti = tp->seg_next;
 402e648:	e0bffc17 	ldw	r2,-16(fp)
 402e64c:	10800017 	ldw	r2,0(r2)
 402e650:	e0bffd15 	stw	r2,-12(fp)
   if (ti == (struct tcpiphdr *)tp || ti->ti_seq != tp->rcv_nxt)
 402e654:	e0fffc17 	ldw	r3,-16(fp)
 402e658:	e0bffd17 	ldw	r2,-12(fp)
 402e65c:	10c00526 	beq	r2,r3,402e674 <tcp_reass+0x2ec>
 402e660:	e0bffd17 	ldw	r2,-12(fp)
 402e664:	10c00617 	ldw	r3,24(r2)
 402e668:	e0bffc17 	ldw	r2,-16(fp)
 402e66c:	10801617 	ldw	r2,88(r2)
 402e670:	18800226 	beq	r3,r2,402e67c <tcp_reass+0x2f4>
      return (0);
 402e674:	e03fff15 	stw	zero,-4(fp)
 402e678:	00003f06 	br	402e778 <tcp_reass+0x3f0>
   if (tp->t_state == TCPS_SYN_RECEIVED && ti->ti_len)
 402e67c:	e0bffc17 	ldw	r2,-16(fp)
 402e680:	10800217 	ldw	r2,8(r2)
 402e684:	108000d8 	cmpnei	r2,r2,3
 402e688:	1000071e 	bne	r2,zero,402e6a8 <tcp_reass+0x320>
 402e68c:	e0bffd17 	ldw	r2,-12(fp)
 402e690:	1080028b 	ldhu	r2,10(r2)
 402e694:	10bfffcc 	andi	r2,r2,65535
 402e698:	1005003a 	cmpeq	r2,r2,zero
 402e69c:	1000021e 	bne	r2,zero,402e6a8 <tcp_reass+0x320>
      return (0);
 402e6a0:	e03fff15 	stw	zero,-4(fp)
 402e6a4:	00003406 	br	402e778 <tcp_reass+0x3f0>
   do 
   {
      tp->rcv_nxt += ti->ti_len;
 402e6a8:	e0bffc17 	ldw	r2,-16(fp)
 402e6ac:	10c01617 	ldw	r3,88(r2)
 402e6b0:	e0bffd17 	ldw	r2,-12(fp)
 402e6b4:	1080028b 	ldhu	r2,10(r2)
 402e6b8:	10bfffcc 	andi	r2,r2,65535
 402e6bc:	1887883a 	add	r3,r3,r2
 402e6c0:	e0bffc17 	ldw	r2,-16(fp)
 402e6c4:	10c01615 	stw	r3,88(r2)
      flags = ti->ti_flags & TH_FIN;
 402e6c8:	e0bffd17 	ldw	r2,-12(fp)
 402e6cc:	10800843 	ldbu	r2,33(r2)
 402e6d0:	10803fcc 	andi	r2,r2,255
 402e6d4:	1080004c 	andi	r2,r2,1
 402e6d8:	e0bff815 	stw	r2,-32(fp)
      remque(ti);
 402e6dc:	e13ffd17 	ldw	r4,-12(fp)
 402e6e0:	40272c80 	call	40272c8 <remque>
      m = dtom(ti);
 402e6e4:	e13ffd17 	ldw	r4,-12(fp)
 402e6e8:	40272200 	call	4027220 <dtom>
 402e6ec:	e0bff915 	stw	r2,-28(fp)
      ti = (struct tcpiphdr *)ti->ti_next;
 402e6f0:	e0bffd17 	ldw	r2,-12(fp)
 402e6f4:	10800017 	ldw	r2,0(r2)
 402e6f8:	e0bffd15 	stw	r2,-12(fp)
      if (so->so_state & SS_CANTRCVMORE)
 402e6fc:	e0bffa17 	ldw	r2,-24(fp)
 402e700:	1080088b 	ldhu	r2,34(r2)
 402e704:	10bfffcc 	andi	r2,r2,65535
 402e708:	1080080c 	andi	r2,r2,32
 402e70c:	1005003a 	cmpeq	r2,r2,zero
 402e710:	1000031e 	bne	r2,zero,402e720 <tcp_reass+0x398>
         m_freem (m);
 402e714:	e13ff917 	ldw	r4,-28(fp)
 402e718:	4026c900 	call	4026c90 <m_freem>
 402e71c:	00000406 	br	402e730 <tcp_reass+0x3a8>
      else
         sbappend (&so->so_rcv, m);
 402e720:	e0bffa17 	ldw	r2,-24(fp)
 402e724:	11000a04 	addi	r4,r2,40
 402e728:	e17ff917 	ldw	r5,-28(fp)
 402e72c:	402d0f80 	call	402d0f8 <sbappend>
   } while (ti != (struct tcpiphdr *)tp && ti->ti_seq == tp->rcv_nxt);
 402e730:	e0fffc17 	ldw	r3,-16(fp)
 402e734:	e0bffd17 	ldw	r2,-12(fp)
 402e738:	10c00526 	beq	r2,r3,402e750 <tcp_reass+0x3c8>
 402e73c:	e0bffd17 	ldw	r2,-12(fp)
 402e740:	10c00617 	ldw	r3,24(r2)
 402e744:	e0bffc17 	ldw	r2,-16(fp)
 402e748:	10801617 	ldw	r2,88(r2)
 402e74c:	18bfd626 	beq	r3,r2,402e6a8 <tcp_reass+0x320>
      sorwakeup(so);
 402e750:	e0bffa17 	ldw	r2,-24(fp)
 402e754:	11400a04 	addi	r5,r2,40
 402e758:	e13ffa17 	ldw	r4,-24(fp)
 402e75c:	402cf340 	call	402cf34 <sbwakeup>
   return (flags);
 402e760:	e0bff817 	ldw	r2,-32(fp)
 402e764:	e0bfff15 	stw	r2,-4(fp)
 402e768:	00000306 	br	402e778 <tcp_reass+0x3f0>
drop:
   /**m_freem (dtom(ti));**/
   m_freem (ti_mbuf);
 402e76c:	e13ffe17 	ldw	r4,-8(fp)
 402e770:	4026c900 	call	4026c90 <m_freem>
   return (0);
 402e774:	e03fff15 	stw	zero,-4(fp)
 402e778:	e0bfff17 	ldw	r2,-4(fp)
}
 402e77c:	e037883a 	mov	sp,fp
 402e780:	dfc00117 	ldw	ra,4(sp)
 402e784:	df000017 	ldw	fp,0(sp)
 402e788:	dec00204 	addi	sp,sp,8
 402e78c:	f800283a 	ret

0402e790 <tcp_input>:
 * RETURNS: void
 */

void
tcp_input(struct mbuf * m, NET ifp)
{
 402e790:	deffd004 	addi	sp,sp,-192
 402e794:	dfc02f15 	stw	ra,188(sp)
 402e798:	df002e15 	stw	fp,184(sp)
 402e79c:	df002e04 	addi	fp,sp,184
 402e7a0:	e13ff015 	stw	r4,-64(fp)
 402e7a4:	e17ff115 	stw	r5,-60(fp)
   ip6_addr    ip6_src;
   ip6_addr    ip6_dst;
#endif   /* IP_V6 */
   struct tcpiphdr * ti;
   struct inpcb * inp;
   struct mbuf *  om =  0;
 402e7a8:	e03feb15 	stw	zero,-84(fp)
   int   len,  tlen, off;
   struct tcpcb * tp =  0;
 402e7ac:	e03fe715 	stw	zero,-100(fp)
   int   tiflags;
   struct socket *   so =  NULL;
 402e7b0:	e03fe515 	stw	zero,-108(fp)
   int   todrop,  acked,   ourfinisacked, needoutput  =  0;
 402e7b4:	e03fe115 	stw	zero,-124(fp)
   int   dropsocket  =  0;
 402e7b8:	e03fe015 	stw	zero,-128(fp)
   long  iss   =  0;
 402e7bc:	e03fdf15 	stw	zero,-132(fp)
#ifdef DO_TCPTRACE
   int   ostate;
#endif


   tcpstat.tcps_rcvtotal++;
 402e7c0:	008101b4 	movhi	r2,1030
 402e7c4:	10a37804 	addi	r2,r2,-29216
 402e7c8:	10801917 	ldw	r2,100(r2)
 402e7cc:	10c00044 	addi	r3,r2,1
 402e7d0:	008101b4 	movhi	r2,1030
 402e7d4:	10a37804 	addi	r2,r2,-29216
 402e7d8:	10c01915 	stw	r3,100(r2)
   TCP_MIB_INC(tcpInSegs);    /* keep MIB stats */
 402e7dc:	008101b4 	movhi	r2,1030
 402e7e0:	10a34a04 	addi	r2,r2,-29400
 402e7e4:	10800917 	ldw	r2,36(r2)
 402e7e8:	10c00044 	addi	r3,r2,1
 402e7ec:	008101b4 	movhi	r2,1030
 402e7f0:	10a34a04 	addi	r2,r2,-29400
 402e7f4:	10c00915 	stw	r3,36(r2)
   {
      /*
       * Get IP and TCP header together in first mbuf.
       * Note: IP leaves IP header in first mbuf.
       */
      pip = mtod(m, struct ip *);
 402e7f8:	e0bff017 	ldw	r2,-64(fp)
 402e7fc:	10800317 	ldw	r2,12(r2)
 402e800:	e0bfee15 	stw	r2,-72(fp)
      if (pip->ip_ver_ihl > 0x45)   /* IP v4, 5 dword hdr len */
 402e804:	e0bfee17 	ldw	r2,-72(fp)
 402e808:	10800003 	ldbu	r2,0(r2)
 402e80c:	10803fcc 	andi	r2,r2,255
 402e810:	108011b0 	cmpltui	r2,r2,70
 402e814:	1000061e 	bne	r2,zero,402e830 <tcp_input+0xa0>
      {
         np_stripoptions(pip, (struct mbuf *)m);
 402e818:	e13fee17 	ldw	r4,-72(fp)
 402e81c:	e17ff017 	ldw	r5,-64(fp)
 402e820:	4027cfc0 	call	4027cfc <np_stripoptions>
         pip = mtod(m, struct ip *);
 402e824:	e0bff017 	ldw	r2,-64(fp)
 402e828:	10800317 	ldw	r2,12(r2)
 402e82c:	e0bfee15 	stw	r2,-72(fp)
      }
      if (m->m_len < ((sizeof (struct ip) + sizeof (struct tcphdr))))
 402e830:	e0bff017 	ldw	r2,-64(fp)
 402e834:	10800217 	ldw	r2,8(r2)
 402e838:	10800a28 	cmpgeui	r2,r2,40
 402e83c:	1000081e 	bne	r2,zero,402e860 <tcp_input+0xd0>
      {
         tcpstat.tcps_rcvshort++;
 402e840:	008101b4 	movhi	r2,1030
 402e844:	10a37804 	addi	r2,r2,-29216
 402e848:	10801e17 	ldw	r2,120(r2)
 402e84c:	10c00044 	addi	r3,r2,1
 402e850:	008101b4 	movhi	r2,1030
 402e854:	10a37804 	addi	r2,r2,-29216
 402e858:	10c01e15 	stw	r3,120(r2)
         return;
 402e85c:	00091c06 	br	4030cd0 <tcp_input+0x2540>
      }
      tlen = pip->ip_len;     /* this was fudged by IP layer */
 402e860:	e0bfee17 	ldw	r2,-72(fp)
 402e864:	1080008b 	ldhu	r2,2(r2)
 402e868:	10bfffcc 	andi	r2,r2,65535
 402e86c:	e0bfe915 	stw	r2,-92(fp)
      /* The following is needed in the cases where the size of the
       * overlay structure is larger than the size of the ip header.
       * This can happen if the ih_next and ih_prev pointers in the
       * overlay structure are larger than 32 bit pointers.
       */
      ti = (struct tcpiphdr *)(m->m_data + sizeof(struct ip) - 
 402e870:	e0bff017 	ldw	r2,-64(fp)
 402e874:	10800317 	ldw	r2,12(r2)
 402e878:	e0bfed15 	stw	r2,-76(fp)
         sizeof(struct ipovly));
      if ((char *)ti < m->pkt->nb_buff)
 402e87c:	e0bff017 	ldw	r2,-64(fp)
 402e880:	10800117 	ldw	r2,4(r2)
 402e884:	10c00117 	ldw	r3,4(r2)
 402e888:	e0bfed17 	ldw	r2,-76(fp)
 402e88c:	10c0032e 	bgeu	r2,r3,402e89c <tcp_input+0x10c>
      {
         panic("tcp_input");
 402e890:	01010174 	movhi	r4,1029
 402e894:	212e6e04 	addi	r4,r4,-17992
 402e898:	4020e100 	call	4020e10 <panic>
   /*
    * Check that TCP offset makes sense,
    * pull out TCP options and adjust length.
    */

   off = GET_TH_OFF(ti->ti_t) << 2;
 402e89c:	e0bfed17 	ldw	r2,-76(fp)
 402e8a0:	10800803 	ldbu	r2,32(r2)
 402e8a4:	10803fcc 	andi	r2,r2,255
 402e8a8:	1004d13a 	srli	r2,r2,4
 402e8ac:	10803fcc 	andi	r2,r2,255
 402e8b0:	1085883a 	add	r2,r2,r2
 402e8b4:	1085883a 	add	r2,r2,r2
 402e8b8:	e0bfe815 	stw	r2,-96(fp)
   if (off < sizeof (struct tcphdr) || off > tlen) 
 402e8bc:	e0bfe817 	ldw	r2,-96(fp)
 402e8c0:	10800530 	cmpltui	r2,r2,20
 402e8c4:	1000031e 	bne	r2,zero,402e8d4 <tcp_input+0x144>
 402e8c8:	e0ffe817 	ldw	r3,-96(fp)
 402e8cc:	e0bfe917 	ldw	r2,-92(fp)
 402e8d0:	10c0110e 	bge	r2,r3,402e918 <tcp_input+0x188>
   {
#ifdef DO_TCPTRACE
      tcp_trace("tcp off: src %x off %d\n", ti->ti_src, off);
#endif
      tcpstat.tcps_rcvbadoff++;
 402e8d4:	008101b4 	movhi	r2,1030
 402e8d8:	10a37804 	addi	r2,r2,-29216
 402e8dc:	10801d17 	ldw	r2,116(r2)
 402e8e0:	10c00044 	addi	r3,r2,1
 402e8e4:	008101b4 	movhi	r2,1030
 402e8e8:	10a37804 	addi	r2,r2,-29216
 402e8ec:	10c01d15 	stw	r3,116(r2)
      TCP_MIB_INC(tcpInErrs);   /* keep MIB stats */
 402e8f0:	008101b4 	movhi	r2,1030
 402e8f4:	10a34a04 	addi	r2,r2,-29400
 402e8f8:	10800d17 	ldw	r2,52(r2)
 402e8fc:	10c00044 	addi	r3,r2,1
 402e900:	008101b4 	movhi	r2,1030
 402e904:	10a34a04 	addi	r2,r2,-29400
 402e908:	10c00d15 	stw	r3,52(r2)
      GOTO_DROP;
 402e90c:	00805784 	movi	r2,350
 402e910:	d0a83015 	stw	r2,-24384(gp)
 402e914:	0008e206 	br	4030ca0 <tcp_input+0x2510>
   }
   tlen -= (int)off;
 402e918:	e0ffe917 	ldw	r3,-92(fp)
 402e91c:	e0bfe817 	ldw	r2,-96(fp)
 402e920:	1885c83a 	sub	r2,r3,r2
 402e924:	e0bfe915 	stw	r2,-92(fp)
   ti->ti_len = (u_short)tlen;
 402e928:	e0bfe917 	ldw	r2,-92(fp)
 402e92c:	1007883a 	mov	r3,r2
 402e930:	e0bfed17 	ldw	r2,-76(fp)
 402e934:	10c0028d 	sth	r3,10(r2)
   if (off > sizeof (struct tcphdr)) 
 402e938:	e0bfe817 	ldw	r2,-96(fp)
 402e93c:	10800570 	cmpltui	r2,r2,21
 402e940:	1000341e 	bne	r2,zero,402ea14 <tcp_input+0x284>
   {
      int olen;      /* length of options field */
      u_char * op;   /* scratch option pointer */

      olen = off - sizeof (struct tcphdr);   /* get options length */
 402e944:	e0bfe817 	ldw	r2,-96(fp)
 402e948:	10bffb04 	addi	r2,r2,-20
 402e94c:	e0bfdd15 	stw	r2,-140(fp)
      om = m_getwithdata (MT_RXDATA, olen);  /* get mbuf for opts */
 402e950:	01000044 	movi	r4,1
 402e954:	e17fdd17 	ldw	r5,-140(fp)
 402e958:	40269b40 	call	40269b4 <m_getnbuf>
 402e95c:	e0bfeb15 	stw	r2,-84(fp)
      if (om == 0)
 402e960:	e0bfeb17 	ldw	r2,-84(fp)
 402e964:	1004c03a 	cmpne	r2,r2,zero
 402e968:	1000031e 	bne	r2,zero,402e978 <tcp_input+0x1e8>
         GOTO_DROP;
 402e96c:	00805a84 	movi	r2,362
 402e970:	d0a83015 	stw	r2,-24384(gp)
 402e974:	0008ca06 	br	4030ca0 <tcp_input+0x2510>
      om->m_len = olen;       /* set mbuf length */
 402e978:	e0ffdd17 	ldw	r3,-140(fp)
 402e97c:	e0bfeb17 	ldw	r2,-84(fp)
 402e980:	10c00215 	stw	r3,8(r2)
      /* set pointer to options field at end of TCP header */
      if(m->pkt->type == htons(0x86DD))   /* IPv6 packet */
 402e984:	e0bff017 	ldw	r2,-64(fp)
 402e988:	10800117 	ldw	r2,4(r2)
 402e98c:	1080080b 	ldhu	r2,32(r2)
 402e990:	10ffffcc 	andi	r3,r2,65535
 402e994:	00b76194 	movui	r2,56710
 402e998:	1880051e 	bne	r3,r2,402e9b0 <tcp_input+0x220>
         op = (u_char*)(m->m_data + 20);  /* past TCP header */
 402e99c:	e0bff017 	ldw	r2,-64(fp)
 402e9a0:	10800317 	ldw	r2,12(r2)
 402e9a4:	10800504 	addi	r2,r2,20
 402e9a8:	e0bfdc15 	stw	r2,-144(fp)
 402e9ac:	00000406 	br	402e9c0 <tcp_input+0x230>
      else
         op = (u_char*)(m->m_data + 40);  /* past IP + TCP */
 402e9b0:	e0bff017 	ldw	r2,-64(fp)
 402e9b4:	10800317 	ldw	r2,12(r2)
 402e9b8:	10800a04 	addi	r2,r2,40
 402e9bc:	e0bfdc15 	stw	r2,-144(fp)
      MEMCPY(om->m_data, op, olen); /* copy to new mbuf */
 402e9c0:	e0bfeb17 	ldw	r2,-84(fp)
 402e9c4:	10c00317 	ldw	r3,12(r2)
 402e9c8:	e1bfdd17 	ldw	r6,-140(fp)
 402e9cc:	e0bfdc17 	ldw	r2,-144(fp)
 402e9d0:	1809883a 	mov	r4,r3
 402e9d4:	100b883a 	mov	r5,r2
 402e9d8:	4001de40 	call	4001de4 <memcpy>

      /* strip options from data mbuf. This actually just cuts the first 
       * m_len bytes from the TCP header, but it leaves the mbuf members 
       * set so the adjustment below does the right thing.
       */
      m->m_data += om->m_len;
 402e9dc:	e0bff017 	ldw	r2,-64(fp)
 402e9e0:	10c00317 	ldw	r3,12(r2)
 402e9e4:	e0bfeb17 	ldw	r2,-84(fp)
 402e9e8:	10800217 	ldw	r2,8(r2)
 402e9ec:	1887883a 	add	r3,r3,r2
 402e9f0:	e0bff017 	ldw	r2,-64(fp)
 402e9f4:	10c00315 	stw	r3,12(r2)
      m->m_len -= om->m_len;
 402e9f8:	e0bff017 	ldw	r2,-64(fp)
 402e9fc:	10c00217 	ldw	r3,8(r2)
 402ea00:	e0bfeb17 	ldw	r2,-84(fp)
 402ea04:	10800217 	ldw	r2,8(r2)
 402ea08:	1887c83a 	sub	r3,r3,r2
 402ea0c:	e0bff017 	ldw	r2,-64(fp)
 402ea10:	10c00215 	stw	r3,8(r2)
   }
   tiflags = ti->ti_flags;
 402ea14:	e0bfed17 	ldw	r2,-76(fp)
 402ea18:	10800843 	ldbu	r2,33(r2)
 402ea1c:	10803fcc 	andi	r2,r2,255
 402ea20:	e0bfe615 	stw	r2,-104(fp)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   /* Convert TCP protocol specific fields to host format. */
   ti->ti_seq = ntohl(ti->ti_seq);
 402ea24:	e0bfed17 	ldw	r2,-76(fp)
 402ea28:	10800617 	ldw	r2,24(r2)
 402ea2c:	1004d63a 	srli	r2,r2,24
 402ea30:	10c03fcc 	andi	r3,r2,255
 402ea34:	e0bfed17 	ldw	r2,-76(fp)
 402ea38:	10800617 	ldw	r2,24(r2)
 402ea3c:	1004d23a 	srli	r2,r2,8
 402ea40:	10bfc00c 	andi	r2,r2,65280
 402ea44:	1886b03a 	or	r3,r3,r2
 402ea48:	e0bfed17 	ldw	r2,-76(fp)
 402ea4c:	10800617 	ldw	r2,24(r2)
 402ea50:	10bfc00c 	andi	r2,r2,65280
 402ea54:	1004923a 	slli	r2,r2,8
 402ea58:	1886b03a 	or	r3,r3,r2
 402ea5c:	e0bfed17 	ldw	r2,-76(fp)
 402ea60:	10800617 	ldw	r2,24(r2)
 402ea64:	10803fcc 	andi	r2,r2,255
 402ea68:	1004963a 	slli	r2,r2,24
 402ea6c:	1886b03a 	or	r3,r3,r2
 402ea70:	e0bfed17 	ldw	r2,-76(fp)
 402ea74:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = ntohl(ti->ti_ack);
 402ea78:	e0bfed17 	ldw	r2,-76(fp)
 402ea7c:	10800717 	ldw	r2,28(r2)
 402ea80:	1004d63a 	srli	r2,r2,24
 402ea84:	10c03fcc 	andi	r3,r2,255
 402ea88:	e0bfed17 	ldw	r2,-76(fp)
 402ea8c:	10800717 	ldw	r2,28(r2)
 402ea90:	1004d23a 	srli	r2,r2,8
 402ea94:	10bfc00c 	andi	r2,r2,65280
 402ea98:	1886b03a 	or	r3,r3,r2
 402ea9c:	e0bfed17 	ldw	r2,-76(fp)
 402eaa0:	10800717 	ldw	r2,28(r2)
 402eaa4:	10bfc00c 	andi	r2,r2,65280
 402eaa8:	1004923a 	slli	r2,r2,8
 402eaac:	1886b03a 	or	r3,r3,r2
 402eab0:	e0bfed17 	ldw	r2,-76(fp)
 402eab4:	10800717 	ldw	r2,28(r2)
 402eab8:	10803fcc 	andi	r2,r2,255
 402eabc:	1004963a 	slli	r2,r2,24
 402eac0:	1886b03a 	or	r3,r3,r2
 402eac4:	e0bfed17 	ldw	r2,-76(fp)
 402eac8:	10c00715 	stw	r3,28(r2)
   ti->ti_urp = ntohs(ti->ti_urp);
 402eacc:	e0bfed17 	ldw	r2,-76(fp)
 402ead0:	1080098b 	ldhu	r2,38(r2)
 402ead4:	10bfffcc 	andi	r2,r2,65535
 402ead8:	1004d23a 	srli	r2,r2,8
 402eadc:	10803fcc 	andi	r2,r2,255
 402eae0:	1009883a 	mov	r4,r2
 402eae4:	e0bfed17 	ldw	r2,-76(fp)
 402eae8:	1080098b 	ldhu	r2,38(r2)
 402eaec:	10bfffcc 	andi	r2,r2,65535
 402eaf0:	1004923a 	slli	r2,r2,8
 402eaf4:	1007883a 	mov	r3,r2
 402eaf8:	00bfc004 	movi	r2,-256
 402eafc:	1884703a 	and	r2,r3,r2
 402eb00:	2084b03a 	or	r2,r4,r2
 402eb04:	1007883a 	mov	r3,r2
 402eb08:	e0bfed17 	ldw	r2,-76(fp)
 402eb0c:	10c0098d 	sth	r3,38(r2)
   /*
    * Locate pcb for segment.
    */
findpcb:

   switch(m->pkt->type)
 402eb10:	e0bff017 	ldw	r2,-64(fp)
 402eb14:	10800117 	ldw	r2,4(r2)
 402eb18:	1080080b 	ldhu	r2,32(r2)
 402eb1c:	10bfffcc 	andi	r2,r2,65535
 402eb20:	10800220 	cmpeqi	r2,r2,8
 402eb24:	1000011e 	bne	r2,zero,402eb2c <tcp_input+0x39c>
 402eb28:	00001f06 	br	402eba8 <tcp_input+0x418>
   {
#ifdef IP_V4
   case  IPTP:   /* IPv4 packet */
      /* Drop TCP and IP headers; TCP options were dropped above. */
      m->m_data += 40;
 402eb2c:	e0bff017 	ldw	r2,-64(fp)
 402eb30:	10800317 	ldw	r2,12(r2)
 402eb34:	10c00a04 	addi	r3,r2,40
 402eb38:	e0bff017 	ldw	r2,-64(fp)
 402eb3c:	10c00315 	stw	r3,12(r2)
      m->m_len -= 40;
 402eb40:	e0bff017 	ldw	r2,-64(fp)
 402eb44:	10800217 	ldw	r2,8(r2)
 402eb48:	10fff604 	addi	r3,r2,-40
 402eb4c:	e0bff017 	ldw	r2,-64(fp)
 402eb50:	10c00215 	stw	r3,8(r2)

      inp = in_pcblookup(&tcb, ti->ti_src.s_addr, ti->ti_sport, 
 402eb54:	e0bfed17 	ldw	r2,-76(fp)
 402eb58:	11400317 	ldw	r5,12(r2)
 402eb5c:	e0bfed17 	ldw	r2,-76(fp)
 402eb60:	1080050b 	ldhu	r2,20(r2)
 402eb64:	11bfffcc 	andi	r6,r2,65535
 402eb68:	e0bfed17 	ldw	r2,-76(fp)
 402eb6c:	11c00417 	ldw	r7,16(r2)
 402eb70:	e0bfed17 	ldw	r2,-76(fp)
 402eb74:	1080058b 	ldhu	r2,22(r2)
 402eb78:	10bfffcc 	andi	r2,r2,65535
 402eb7c:	d8800015 	stw	r2,0(sp)
 402eb80:	00800044 	movi	r2,1
 402eb84:	d8800115 	stw	r2,4(sp)
 402eb88:	010101b4 	movhi	r4,1030
 402eb8c:	21236d04 	addi	r4,r4,-29260
 402eb90:	40428400 	call	4042840 <in_pcblookup>
 402eb94:	e0bfec15 	stw	r2,-80(fp)
    * If the state is CLOSED (i.e., TCB does not exist) then
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
 402eb98:	e0bfec17 	ldw	r2,-80(fp)
 402eb9c:	1005003a 	cmpeq	r2,r2,zero
 402eba0:	1000031e 	bne	r2,zero,402ebb0 <tcp_input+0x420>
 402eba4:	00000506 	br	402ebbc <tcp_input+0x42c>
      inp = ip6_pcblookup(&tcb, &ip6_src, ti->ti_sport, 
         &ip6_dst, ti->ti_dport, INPLOOKUP_WILDCARD);
      break;
#endif   /* IP_V6 */
   default:
      dtrap();
 402eba8:	4025bb40 	call	4025bb4 <dtrap>
      return;
 402ebac:	00084806 	br	4030cd0 <tcp_input+0x2540>
    * all data in the incoming segment is discarded.
    * If the TCB exists but is in CLOSED state, it is embryonic,
    * but should either do a listen or a connect soon.
    */
   if (inp == 0)
      GOTO_DROPWITHRESET;
 402ebb0:	00806b04 	movi	r2,428
 402ebb4:	d0a83015 	stw	r2,-24384(gp)
 402ebb8:	0007f506 	br	4030b90 <tcp_input+0x2400>
   tp = intotcpcb (inp);
 402ebbc:	e0bfec17 	ldw	r2,-80(fp)
 402ebc0:	10800917 	ldw	r2,36(r2)
 402ebc4:	e0bfe715 	stw	r2,-100(fp)
   if (tp == 0)
 402ebc8:	e0bfe717 	ldw	r2,-100(fp)
 402ebcc:	1004c03a 	cmpne	r2,r2,zero
 402ebd0:	1000031e 	bne	r2,zero,402ebe0 <tcp_input+0x450>
      GOTO_DROPWITHRESET;
 402ebd4:	00806bc4 	movi	r2,431
 402ebd8:	d0a83015 	stw	r2,-24384(gp)
 402ebdc:	0007ec06 	br	4030b90 <tcp_input+0x2400>
   if (tp->t_state == TCPS_CLOSED)
 402ebe0:	e0bfe717 	ldw	r2,-100(fp)
 402ebe4:	10800217 	ldw	r2,8(r2)
 402ebe8:	1004c03a 	cmpne	r2,r2,zero
 402ebec:	1000031e 	bne	r2,zero,402ebfc <tcp_input+0x46c>
      GOTO_DROP;
 402ebf0:	00806c44 	movi	r2,433
 402ebf4:	d0a83015 	stw	r2,-24384(gp)
 402ebf8:	00082906 	br	4030ca0 <tcp_input+0x2510>
   so = inp->inp_socket;
 402ebfc:	e0bfec17 	ldw	r2,-80(fp)
 402ec00:	10800817 	ldw	r2,32(r2)
 402ec04:	e0bfe515 	stw	r2,-108(fp)
      tcp_saveti = *ti;
   }
#endif

   /* figure out the size of the other guy's receive window */
   rx_win = (tcp_win)(ntohs(ti->ti_win));    /* convert endian */
 402ec08:	e0bfed17 	ldw	r2,-76(fp)
 402ec0c:	1080088b 	ldhu	r2,34(r2)
 402ec10:	10bfffcc 	andi	r2,r2,65535
 402ec14:	1004d23a 	srli	r2,r2,8
 402ec18:	10bfffcc 	andi	r2,r2,65535
 402ec1c:	10c03fcc 	andi	r3,r2,255
 402ec20:	e0bfed17 	ldw	r2,-76(fp)
 402ec24:	1080088b 	ldhu	r2,34(r2)
 402ec28:	10bfffcc 	andi	r2,r2,65535
 402ec2c:	1004923a 	slli	r2,r2,8
 402ec30:	10bfc00c 	andi	r2,r2,65280
 402ec34:	1884b03a 	or	r2,r3,r2
 402ec38:	e0bfde15 	stw	r2,-136(fp)
   {
      rx_win <<= tp->snd_wind_scale;         /* apply scale */
   }
#endif /* TCP_WIN_SCALE */

   if (so->so_options & SO_ACCEPTCONN) 
 402ec3c:	e0bfe517 	ldw	r2,-108(fp)
 402ec40:	10800417 	ldw	r2,16(r2)
 402ec44:	1080008c 	andi	r2,r2,2
 402ec48:	1005003a 	cmpeq	r2,r2,zero
 402ec4c:	10002d1e 	bne	r2,zero,402ed04 <tcp_input+0x574>
   {
      so = sonewconn(so);
 402ec50:	e13fe517 	ldw	r4,-108(fp)
 402ec54:	402ca0c0 	call	402ca0c <sonewconn>
 402ec58:	e0bfe515 	stw	r2,-108(fp)
      if (so == 0)
 402ec5c:	e0bfe517 	ldw	r2,-108(fp)
 402ec60:	1004c03a 	cmpne	r2,r2,zero
 402ec64:	1000031e 	bne	r2,zero,402ec74 <tcp_input+0x4e4>
         GOTO_DROP;
 402ec68:	00807344 	movi	r2,461
 402ec6c:	d0a83015 	stw	r2,-24384(gp)
 402ec70:	00080b06 	br	4030ca0 <tcp_input+0x2510>
       * flag dropsocket to see if the temporary
       * socket created here should be discarded.
       * We mark the socket as discardable until
       * we're committed to it below in TCPS_LISTEN.
       */
      dropsocket++;
 402ec74:	e0bfe017 	ldw	r2,-128(fp)
 402ec78:	10800044 	addi	r2,r2,1
 402ec7c:	e0bfe015 	stw	r2,-128(fp)

      inp = (struct inpcb *)so->so_pcb;
 402ec80:	e0bfe517 	ldw	r2,-108(fp)
 402ec84:	10800117 	ldw	r2,4(r2)
 402ec88:	e0bfec15 	stw	r2,-80(fp)
      inp->ifp = ifp;      /* save iface to peer */
 402ec8c:	e0ffec17 	ldw	r3,-80(fp)
 402ec90:	e0bff117 	ldw	r2,-60(fp)
 402ec94:	18800a15 	stw	r2,40(r3)

      switch(so->so_domain)
 402ec98:	e0bfe517 	ldw	r2,-108(fp)
 402ec9c:	10800517 	ldw	r2,20(r2)
 402eca0:	108000a0 	cmpeqi	r2,r2,2
 402eca4:	1000011e 	bne	r2,zero,402ecac <tcp_input+0x51c>
 402eca8:	00000c06 	br	402ecdc <tcp_input+0x54c>
      {
#ifdef IP_V4
      case AF_INET:
         inp->inp_laddr = ti->ti_dst;
 402ecac:	e0bfed17 	ldw	r2,-76(fp)
 402ecb0:	10c00417 	ldw	r3,16(r2)
 402ecb4:	e0bfec17 	ldw	r2,-80(fp)
 402ecb8:	10c00415 	stw	r3,16(r2)
#ifdef IP_PMTU
         inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
         inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 402ecbc:	e0bff117 	ldw	r2,-60(fp)
 402ecc0:	10c00917 	ldw	r3,36(r2)
 402ecc4:	e0bff117 	ldw	r2,-60(fp)
 402ecc8:	10800817 	ldw	r2,32(r2)
 402eccc:	1885c83a 	sub	r2,r3,r2
 402ecd0:	10fff604 	addi	r3,r2,-40
 402ecd4:	e0bfec17 	ldw	r2,-80(fp)
 402ecd8:	10c00615 	stw	r3,24(r2)
         inp->inp_pmtu = ip6_pmtulookup(&ip6_src, ifp);
         break;
#endif   /* end v6 */
      }

      inp->inp_lport = ti->ti_dport;
 402ecdc:	e0bfed17 	ldw	r2,-76(fp)
 402ece0:	10c0058b 	ldhu	r3,22(r2)
 402ece4:	e0bfec17 	ldw	r2,-80(fp)
 402ece8:	10c0078d 	sth	r3,30(r2)
      tp = intotcpcb(inp);
 402ecec:	e0bfec17 	ldw	r2,-80(fp)
 402ecf0:	10800917 	ldw	r2,36(r2)
 402ecf4:	e0bfe715 	stw	r2,-100(fp)
      tp->t_state = TCPS_LISTEN;
 402ecf8:	e0ffe717 	ldw	r3,-100(fp)
 402ecfc:	00800044 	movi	r2,1
 402ed00:	18800215 	stw	r2,8(r3)

   /*
    * Segment received on connection.
    * Reset idle time and keep-alive timer.
    */
   tp->t_idle = 0;
 402ed04:	e0bfe717 	ldw	r2,-100(fp)
 402ed08:	10001d15 	stw	zero,116(r2)
   tp->t_timer[TCPT_KEEP] = tcp_keepidle;
 402ed0c:	00810174 	movhi	r2,1029
 402ed10:	10b9f904 	addi	r2,r2,-6172
 402ed14:	10c00017 	ldw	r3,0(r2)
 402ed18:	e0bfe717 	ldw	r2,-100(fp)
 402ed1c:	10c00515 	stw	r3,20(r2)

   /*
    * Process options if not in LISTEN state,
    * else do it below (after getting remote address).
    */
   if (om && tp->t_state != TCPS_LISTEN) 
 402ed20:	e0bfeb17 	ldw	r2,-84(fp)
 402ed24:	1005003a 	cmpeq	r2,r2,zero
 402ed28:	1000091e 	bne	r2,zero,402ed50 <tcp_input+0x5c0>
 402ed2c:	e0bfe717 	ldw	r2,-100(fp)
 402ed30:	10800217 	ldw	r2,8(r2)
 402ed34:	10800060 	cmpeqi	r2,r2,1
 402ed38:	1000051e 	bne	r2,zero,402ed50 <tcp_input+0x5c0>
   {
      tcp_dooptions(tp, om, ti);
 402ed3c:	e13fe717 	ldw	r4,-100(fp)
 402ed40:	e17feb17 	ldw	r5,-84(fp)
 402ed44:	e1bfed17 	ldw	r6,-76(fp)
 402ed48:	4030ce40 	call	4030ce4 <tcp_dooptions>
      om = 0;
 402ed4c:	e03feb15 	stw	zero,-84(fp)
   }

   acked = (int)(ti->ti_ack - tp->snd_una);
 402ed50:	e0bfed17 	ldw	r2,-76(fp)
 402ed54:	10c00717 	ldw	r3,28(r2)
 402ed58:	e0bfe717 	ldw	r2,-100(fp)
 402ed5c:	10800e17 	ldw	r2,56(r2)
 402ed60:	1885c83a 	sub	r2,r3,r2
 402ed64:	e0bfe315 	stw	r2,-116(fp)
    * Receive window is amount of space in rcv queue,
    * but not less than advertised window.
    */
   { long win;

      win = (long)sbspace(&so->so_rcv);
 402ed68:	e0bfe517 	ldw	r2,-108(fp)
 402ed6c:	10800b17 	ldw	r2,44(r2)
 402ed70:	1007883a 	mov	r3,r2
 402ed74:	e0bfe517 	ldw	r2,-108(fp)
 402ed78:	10800a17 	ldw	r2,40(r2)
 402ed7c:	1885c83a 	sub	r2,r3,r2
 402ed80:	1004803a 	cmplt	r2,r2,zero
 402ed84:	1000071e 	bne	r2,zero,402eda4 <tcp_input+0x614>
 402ed88:	e0bfe517 	ldw	r2,-108(fp)
 402ed8c:	10c00b17 	ldw	r3,44(r2)
 402ed90:	e0bfe517 	ldw	r2,-108(fp)
 402ed94:	10800a17 	ldw	r2,40(r2)
 402ed98:	1885c83a 	sub	r2,r3,r2
 402ed9c:	e0bffd15 	stw	r2,-12(fp)
 402eda0:	00000106 	br	402eda8 <tcp_input+0x618>
 402eda4:	e03ffd15 	stw	zero,-12(fp)
 402eda8:	e0bffd17 	ldw	r2,-12(fp)
 402edac:	e0bfdb15 	stw	r2,-148(fp)
      if (win < 0)
 402edb0:	e0bfdb17 	ldw	r2,-148(fp)
 402edb4:	1004403a 	cmpge	r2,r2,zero
 402edb8:	1000011e 	bne	r2,zero,402edc0 <tcp_input+0x630>
         win = 0;
 402edbc:	e03fdb15 	stw	zero,-148(fp)
      tp->rcv_wnd = (tcp_win)MAX((u_long)win, (tp->rcv_adv - tp->rcv_nxt));
 402edc0:	e0bfe717 	ldw	r2,-100(fp)
 402edc4:	10c01917 	ldw	r3,100(r2)
 402edc8:	e0bfe717 	ldw	r2,-100(fp)
 402edcc:	10801617 	ldw	r2,88(r2)
 402edd0:	1885c83a 	sub	r2,r3,r2
 402edd4:	e0ffdb17 	ldw	r3,-148(fp)
 402edd8:	e0fffc15 	stw	r3,-16(fp)
 402eddc:	e0bffb15 	stw	r2,-20(fp)
 402ede0:	e13ffb17 	ldw	r4,-20(fp)
 402ede4:	e0bffc17 	ldw	r2,-16(fp)
 402ede8:	2080022e 	bgeu	r4,r2,402edf4 <tcp_input+0x664>
 402edec:	e0fffc17 	ldw	r3,-16(fp)
 402edf0:	e0fffb15 	stw	r3,-20(fp)
 402edf4:	e0bfe717 	ldw	r2,-100(fp)
 402edf8:	e13ffb17 	ldw	r4,-20(fp)
 402edfc:	11001515 	stw	r4,84(r2)
    * is non-zero and the ack didn't move, we're the
    * receiver side.  If we're getting packets in-order
    * (the reassembly queue is empty), add the data to
    * the socket buffer and note that we need a delayed ack.
    */
   if ((tp->t_state == TCPS_ESTABLISHED) &&
 402ee00:	e0bfe717 	ldw	r2,-100(fp)
 402ee04:	10800217 	ldw	r2,8(r2)
 402ee08:	10800118 	cmpnei	r2,r2,4
 402ee0c:	10010f1e 	bne	r2,zero,402f24c <tcp_input+0xabc>
 402ee10:	e0bfe617 	ldw	r2,-104(fp)
 402ee14:	10800dcc 	andi	r2,r2,55
 402ee18:	10800418 	cmpnei	r2,r2,16
 402ee1c:	10010b1e 	bne	r2,zero,402f24c <tcp_input+0xabc>
 402ee20:	e0bfed17 	ldw	r2,-76(fp)
 402ee24:	10c00617 	ldw	r3,24(r2)
 402ee28:	e0bfe717 	ldw	r2,-100(fp)
 402ee2c:	10801617 	ldw	r2,88(r2)
 402ee30:	1881061e 	bne	r3,r2,402f24c <tcp_input+0xabc>
 402ee34:	e0bfde17 	ldw	r2,-136(fp)
 402ee38:	1005003a 	cmpeq	r2,r2,zero
 402ee3c:	1001031e 	bne	r2,zero,402f24c <tcp_input+0xabc>
 402ee40:	e0bfe717 	ldw	r2,-100(fp)
 402ee44:	10c01417 	ldw	r3,80(r2)
 402ee48:	e0bfde17 	ldw	r2,-136(fp)
 402ee4c:	1880ff1e 	bne	r3,r2,402f24c <tcp_input+0xabc>
 402ee50:	e0bfe717 	ldw	r2,-100(fp)
 402ee54:	10c00f17 	ldw	r3,60(r2)
 402ee58:	e0bfe717 	ldw	r2,-100(fp)
 402ee5c:	10801a17 	ldw	r2,104(r2)
 402ee60:	1880fa1e 	bne	r3,r2,402f24c <tcp_input+0xabc>
       ((tiflags & (TH_SYN|TH_FIN|TH_RST|TH_URG|TH_ACK)) == TH_ACK) &&
       (ti->ti_seq == tp->rcv_nxt) &&
       (rx_win && rx_win == tp->snd_wnd) &&
       (tp->snd_nxt == tp->snd_max))
   {
      if (ti->ti_len == 0)
 402ee64:	e0bfed17 	ldw	r2,-76(fp)
 402ee68:	1080028b 	ldhu	r2,10(r2)
 402ee6c:	10bfffcc 	andi	r2,r2,65535
 402ee70:	1004c03a 	cmpne	r2,r2,zero
 402ee74:	1000651e 	bne	r2,zero,402f00c <tcp_input+0x87c>
      {
         if (SEQ_GT(ti->ti_ack, tp->snd_una) &&
 402ee78:	e0bfed17 	ldw	r2,-76(fp)
 402ee7c:	10c00717 	ldw	r3,28(r2)
 402ee80:	e0bfe717 	ldw	r2,-100(fp)
 402ee84:	10800e17 	ldw	r2,56(r2)
 402ee88:	1885c83a 	sub	r2,r3,r2
 402ee8c:	10800050 	cmplti	r2,r2,1
 402ee90:	1000ee1e 	bne	r2,zero,402f24c <tcp_input+0xabc>
 402ee94:	e0bfed17 	ldw	r2,-76(fp)
 402ee98:	10c00717 	ldw	r3,28(r2)
 402ee9c:	e0bfe717 	ldw	r2,-100(fp)
 402eea0:	10801a17 	ldw	r2,104(r2)
 402eea4:	1885c83a 	sub	r2,r3,r2
 402eea8:	10800048 	cmpgei	r2,r2,1
 402eeac:	1000e71e 	bne	r2,zero,402f24c <tcp_input+0xabc>
 402eeb0:	e0bfe717 	ldw	r2,-100(fp)
 402eeb4:	10c01b17 	ldw	r3,108(r2)
 402eeb8:	e0bfe717 	ldw	r2,-100(fp)
 402eebc:	10801417 	ldw	r2,80(r2)
 402eec0:	1880e236 	bltu	r3,r2,402f24c <tcp_input+0xabc>
             tp->snd_cwnd >= tp->snd_wnd) 
         {
            /*
             * this is a pure ack for outstanding data.
             */
            ++tcpstat.tcps_predack;
 402eec4:	008101b4 	movhi	r2,1030
 402eec8:	10a37804 	addi	r2,r2,-29216
 402eecc:	10803517 	ldw	r2,212(r2)
 402eed0:	10c00044 	addi	r3,r2,1
 402eed4:	008101b4 	movhi	r2,1030
 402eed8:	10a37804 	addi	r2,r2,-29216
 402eedc:	10c03515 	stw	r3,212(r2)
            if (tp->t_rttick && 
 402eee0:	e0bfe717 	ldw	r2,-100(fp)
 402eee4:	10801e17 	ldw	r2,120(r2)
 402eee8:	1005003a 	cmpeq	r2,r2,zero
 402eeec:	1000091e 	bne	r2,zero,402ef14 <tcp_input+0x784>
 402eef0:	e0bfed17 	ldw	r2,-76(fp)
 402eef4:	10c00717 	ldw	r3,28(r2)
 402eef8:	e0bfe717 	ldw	r2,-100(fp)
 402eefc:	10801f17 	ldw	r2,124(r2)
 402ef00:	1885c83a 	sub	r2,r3,r2
 402ef04:	10800050 	cmplti	r2,r2,1
 402ef08:	1000021e 	bne	r2,zero,402ef14 <tcp_input+0x784>
#ifdef TCP_TIMESTAMP
               ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
               (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
            {
               tcp_xmit_timer(tp);
 402ef0c:	e13fe717 	ldw	r4,-100(fp)
 402ef10:	4030fa00 	call	4030fa0 <tcp_xmit_timer>
            }

            tcpstat.tcps_rcvackpack++;
 402ef14:	008101b4 	movhi	r2,1030
 402ef18:	10a37804 	addi	r2,r2,-29216
 402ef1c:	10802b17 	ldw	r2,172(r2)
 402ef20:	10c00044 	addi	r3,r2,1
 402ef24:	008101b4 	movhi	r2,1030
 402ef28:	10a37804 	addi	r2,r2,-29216
 402ef2c:	10c02b15 	stw	r3,172(r2)
            tcpstat.tcps_rcvackbyte += acked;
 402ef30:	008101b4 	movhi	r2,1030
 402ef34:	10a37804 	addi	r2,r2,-29216
 402ef38:	10c02c17 	ldw	r3,176(r2)
 402ef3c:	e0bfe317 	ldw	r2,-116(fp)
 402ef40:	1887883a 	add	r3,r3,r2
 402ef44:	008101b4 	movhi	r2,1030
 402ef48:	10a37804 	addi	r2,r2,-29216
 402ef4c:	10c02c15 	stw	r3,176(r2)
            sbdrop(&so->so_snd, acked);
 402ef50:	e0bfe517 	ldw	r2,-108(fp)
 402ef54:	11001204 	addi	r4,r2,72
 402ef58:	e17fe317 	ldw	r5,-116(fp)
 402ef5c:	402d7000 	call	402d700 <sbdrop>
            tp->snd_una = ti->ti_ack;
 402ef60:	e0bfed17 	ldw	r2,-76(fp)
 402ef64:	10c00717 	ldw	r3,28(r2)
 402ef68:	e0bfe717 	ldw	r2,-100(fp)
 402ef6c:	10c00e15 	stw	r3,56(r2)
            m_freem(m);
 402ef70:	e13ff017 	ldw	r4,-64(fp)
 402ef74:	4026c900 	call	4026c90 <m_freem>
             * If process is waiting for space,
             * wakeup/selwakeup/signal.  If data
             * are ready to send, let tcp_output
             * decide between more output or persist.
             */
            if (tp->snd_una == tp->snd_max)
 402ef78:	e0bfe717 	ldw	r2,-100(fp)
 402ef7c:	10c00e17 	ldw	r3,56(r2)
 402ef80:	e0bfe717 	ldw	r2,-100(fp)
 402ef84:	10801a17 	ldw	r2,104(r2)
 402ef88:	1880031e 	bne	r3,r2,402ef98 <tcp_input+0x808>
               tp->t_timer[TCPT_REXMT] = 0;
 402ef8c:	e0bfe717 	ldw	r2,-100(fp)
 402ef90:	10000315 	stw	zero,12(r2)
 402ef94:	00000806 	br	402efb8 <tcp_input+0x828>
            else if (tp->t_timer[TCPT_PERSIST] == 0)
 402ef98:	e0bfe717 	ldw	r2,-100(fp)
 402ef9c:	10800417 	ldw	r2,16(r2)
 402efa0:	1004c03a 	cmpne	r2,r2,zero
 402efa4:	1000041e 	bne	r2,zero,402efb8 <tcp_input+0x828>
               tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 402efa8:	e0bfe717 	ldw	r2,-100(fp)
 402efac:	10c00817 	ldw	r3,32(r2)
 402efb0:	e0bfe717 	ldw	r2,-100(fp)
 402efb4:	10c00315 	stw	r3,12(r2)

            if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 402efb8:	e0bfe517 	ldw	r2,-108(fp)
 402efbc:	1080190b 	ldhu	r2,100(r2)
 402efc0:	10bfffcc 	andi	r2,r2,65535
 402efc4:	1080030c 	andi	r2,r2,12
 402efc8:	1005003a 	cmpeq	r2,r2,zero
 402efcc:	1000041e 	bne	r2,zero,402efe0 <tcp_input+0x850>
               sowwakeup(so);
 402efd0:	e0bfe517 	ldw	r2,-108(fp)
 402efd4:	11401204 	addi	r5,r2,72
 402efd8:	e13fe517 	ldw	r4,-108(fp)
 402efdc:	402cf340 	call	402cf34 <sbwakeup>

            /* If there is more data in the send buffer, and some is
             * still unsent, then call tcp_output() to try to send it
             */
            if (so->so_snd.sb_cc > (tp->snd_nxt - tp->snd_una))
 402efe0:	e0bfe517 	ldw	r2,-108(fp)
 402efe4:	11001217 	ldw	r4,72(r2)
 402efe8:	e0bfe717 	ldw	r2,-100(fp)
 402efec:	10c00f17 	ldw	r3,60(r2)
 402eff0:	e0bfe717 	ldw	r2,-100(fp)
 402eff4:	10800e17 	ldw	r2,56(r2)
 402eff8:	1885c83a 	sub	r2,r3,r2
 402effc:	1107342e 	bgeu	r2,r4,4030cd0 <tcp_input+0x2540>
               (void) tcp_output(tp);
 402f000:	e13fe717 	ldw	r4,-100(fp)
 402f004:	40313700 	call	4031370 <tcp_output>
            return;
 402f008:	00073106 	br	4030cd0 <tcp_input+0x2540>
         }
      }
      else if (ti->ti_ack == tp->snd_una &&
 402f00c:	e0bfed17 	ldw	r2,-76(fp)
 402f010:	10c00717 	ldw	r3,28(r2)
 402f014:	e0bfe717 	ldw	r2,-100(fp)
 402f018:	10800e17 	ldw	r2,56(r2)
 402f01c:	18808b1e 	bne	r3,r2,402f24c <tcp_input+0xabc>
 402f020:	e0bfe717 	ldw	r2,-100(fp)
 402f024:	10c00017 	ldw	r3,0(r2)
 402f028:	e0bfe717 	ldw	r2,-100(fp)
 402f02c:	1880871e 	bne	r3,r2,402f24c <tcp_input+0xabc>
 402f030:	e0bfed17 	ldw	r2,-76(fp)
 402f034:	1080028b 	ldhu	r2,10(r2)
 402f038:	10bfffcc 	andi	r2,r2,65535
 402f03c:	e0bffa15 	stw	r2,-24(fp)
 402f040:	e0bfe517 	ldw	r2,-108(fp)
 402f044:	10800b17 	ldw	r2,44(r2)
 402f048:	1007883a 	mov	r3,r2
 402f04c:	e0bfe517 	ldw	r2,-108(fp)
 402f050:	10800a17 	ldw	r2,40(r2)
 402f054:	1885c83a 	sub	r2,r3,r2
 402f058:	1004803a 	cmplt	r2,r2,zero
 402f05c:	1000071e 	bne	r2,zero,402f07c <tcp_input+0x8ec>
 402f060:	e0bfe517 	ldw	r2,-108(fp)
 402f064:	10c00b17 	ldw	r3,44(r2)
 402f068:	e0bfe517 	ldw	r2,-108(fp)
 402f06c:	10800a17 	ldw	r2,40(r2)
 402f070:	1887c83a 	sub	r3,r3,r2
 402f074:	e0fff915 	stw	r3,-28(fp)
 402f078:	00000106 	br	402f080 <tcp_input+0x8f0>
 402f07c:	e03ff915 	stw	zero,-28(fp)
 402f080:	e0bff917 	ldw	r2,-28(fp)
 402f084:	e0fffa17 	ldw	r3,-24(fp)
 402f088:	10c07036 	bltu	r2,r3,402f24c <tcp_input+0xabc>
#endif   /* TCP_ZEROCOPY */

         /* this may also be a garden-variety probe received because
          * the socket sendbuf was full.
          */
         if(tp->rcv_wnd == 0)
 402f08c:	e0bfe717 	ldw	r2,-100(fp)
 402f090:	10801517 	ldw	r2,84(r2)
 402f094:	1004c03a 	cmpne	r2,r2,zero
 402f098:	10000c1e 	bne	r2,zero,402f0cc <tcp_input+0x93c>
             * info in this seg, but Windows NT 4.0 has a nasty bug where it
             * will hammer us mericilessly with these probes (one customer
             * reports thousands per second) so we just dump it ASAP to
             * save cycles.
             */
            tcpstat.tcps_rcvwinprobe++;
 402f09c:	008101b4 	movhi	r2,1030
 402f0a0:	10a37804 	addi	r2,r2,-29216
 402f0a4:	10802817 	ldw	r2,160(r2)
 402f0a8:	10c00044 	addi	r3,r2,1
 402f0ac:	008101b4 	movhi	r2,1030
 402f0b0:	10a37804 	addi	r2,r2,-29216
 402f0b4:	10c02815 	stw	r3,160(r2)
            m_freem (m);      /* free the received mbuf */
 402f0b8:	e13ff017 	ldw	r4,-64(fp)
 402f0bc:	4026c900 	call	4026c90 <m_freem>
            tcp_output(tp);   /* send the ack now... */
 402f0c0:	e13fe717 	ldw	r4,-100(fp)
 402f0c4:	40313700 	call	4031370 <tcp_output>
            return;
 402f0c8:	00070106 	br	4030cd0 <tcp_input+0x2540>
         /*
          * this is a pure, in-sequence data packet
          * with nothing on the reassembly queue and
          * we have enough buffer space to take it.
          */
         ++tcpstat.tcps_preddat;
 402f0cc:	008101b4 	movhi	r2,1030
 402f0d0:	10a37804 	addi	r2,r2,-29216
 402f0d4:	10803617 	ldw	r2,216(r2)
 402f0d8:	10c00044 	addi	r3,r2,1
 402f0dc:	008101b4 	movhi	r2,1030
 402f0e0:	10a37804 	addi	r2,r2,-29216
 402f0e4:	10c03615 	stw	r3,216(r2)
         tp->rcv_nxt += ti->ti_len;
 402f0e8:	e0bfe717 	ldw	r2,-100(fp)
 402f0ec:	10c01617 	ldw	r3,88(r2)
 402f0f0:	e0bfed17 	ldw	r2,-76(fp)
 402f0f4:	1080028b 	ldhu	r2,10(r2)
 402f0f8:	10bfffcc 	andi	r2,r2,65535
 402f0fc:	1887883a 	add	r3,r3,r2
 402f100:	e0bfe717 	ldw	r2,-100(fp)
 402f104:	10c01615 	stw	r3,88(r2)
         tcpstat.tcps_rcvpack++;
 402f108:	008101b4 	movhi	r2,1030
 402f10c:	10a37804 	addi	r2,r2,-29216
 402f110:	10801a17 	ldw	r2,104(r2)
 402f114:	10c00044 	addi	r3,r2,1
 402f118:	008101b4 	movhi	r2,1030
 402f11c:	10a37804 	addi	r2,r2,-29216
 402f120:	10c01a15 	stw	r3,104(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 402f124:	008101b4 	movhi	r2,1030
 402f128:	10a37804 	addi	r2,r2,-29216
 402f12c:	10c01b17 	ldw	r3,108(r2)
 402f130:	e0bfed17 	ldw	r2,-76(fp)
 402f134:	1080028b 	ldhu	r2,10(r2)
 402f138:	10bfffcc 	andi	r2,r2,65535
 402f13c:	1887883a 	add	r3,r3,r2
 402f140:	008101b4 	movhi	r2,1030
 402f144:	10a37804 	addi	r2,r2,-29216
 402f148:	10c01b15 	stw	r3,108(r2)
         /*
          * Add data to socket buffer.
          */
         sbappend(&so->so_rcv, m);
 402f14c:	e0bfe517 	ldw	r2,-108(fp)
 402f150:	11000a04 	addi	r4,r2,40
 402f154:	e17ff017 	ldw	r5,-64(fp)
 402f158:	402d0f80 	call	402d0f8 <sbappend>
         sorwakeup(so);
 402f15c:	e0bfe517 	ldw	r2,-108(fp)
 402f160:	11400a04 	addi	r5,r2,40
 402f164:	e13fe517 	ldw	r4,-108(fp)
 402f168:	402cf340 	call	402cf34 <sbwakeup>
         /*
          * If this is a short packet, then ACK now - with Nagel
          *   congestion avoidance sender won't send more until
          *   he gets an ACK.
          */
         if (tiflags & TH_PUSH)
 402f16c:	e0bfe617 	ldw	r2,-104(fp)
 402f170:	1080020c 	andi	r2,r2,8
 402f174:	1005003a 	cmpeq	r2,r2,zero
 402f178:	1000071e 	bne	r2,zero,402f198 <tcp_input+0xa08>
            tp->t_flags |= TF_ACKNOW;
 402f17c:	e0bfe717 	ldw	r2,-100(fp)
 402f180:	10800b0b 	ldhu	r2,44(r2)
 402f184:	10800054 	ori	r2,r2,1
 402f188:	1007883a 	mov	r3,r2
 402f18c:	e0bfe717 	ldw	r2,-100(fp)
 402f190:	10c00b0d 	sth	r3,44(r2)
 402f194:	00000606 	br	402f1b0 <tcp_input+0xa20>
         else
            tp->t_flags |= TF_DELACK;
 402f198:	e0bfe717 	ldw	r2,-100(fp)
 402f19c:	10800b0b 	ldhu	r2,44(r2)
 402f1a0:	10800094 	ori	r2,r2,2
 402f1a4:	1007883a 	mov	r3,r2
 402f1a8:	e0bfe717 	ldw	r2,-100(fp)
 402f1ac:	10c00b0d 	sth	r3,44(r2)

         /* see if we need to send an ack */
         adv = (int)(tp->rcv_wnd - (tcp_win)(tp->rcv_adv - tp->rcv_nxt));
 402f1b0:	e0bfe717 	ldw	r2,-100(fp)
 402f1b4:	11001517 	ldw	r4,84(r2)
 402f1b8:	e0bfe717 	ldw	r2,-100(fp)
 402f1bc:	10c01917 	ldw	r3,100(r2)
 402f1c0:	e0bfe717 	ldw	r2,-100(fp)
 402f1c4:	10801617 	ldw	r2,88(r2)
 402f1c8:	1885c83a 	sub	r2,r3,r2
 402f1cc:	2085c83a 	sub	r2,r4,r2
 402f1d0:	e0bfda15 	stw	r2,-152(fp)

         if ((adv >= (int)(tp->t_maxseg * 2)) ||
 402f1d4:	e0bfe717 	ldw	r2,-100(fp)
 402f1d8:	10800a0b 	ldhu	r2,40(r2)
 402f1dc:	10bfffcc 	andi	r2,r2,65535
 402f1e0:	1085883a 	add	r2,r2,r2
 402f1e4:	1007883a 	mov	r3,r2
 402f1e8:	e0bfda17 	ldw	r2,-152(fp)
 402f1ec:	10c0070e 	bge	r2,r3,402f20c <tcp_input+0xa7c>
 402f1f0:	e0bfe717 	ldw	r2,-100(fp)
 402f1f4:	10800b0b 	ldhu	r2,44(r2)
 402f1f8:	10bfffcc 	andi	r2,r2,65535
 402f1fc:	1080004c 	andi	r2,r2,1
 402f200:	10803fcc 	andi	r2,r2,255
 402f204:	1005003a 	cmpeq	r2,r2,zero
 402f208:	1006b11e 	bne	r2,zero,4030cd0 <tcp_input+0x2540>
               tp->t_flags &= ~TF_ACKNOW;
               return;
            }
#endif   /* DO_DELAY_ACKS */

            tp->t_flags |= TF_ACKNOW;
 402f20c:	e0bfe717 	ldw	r2,-100(fp)
 402f210:	10800b0b 	ldhu	r2,44(r2)
 402f214:	10800054 	ori	r2,r2,1
 402f218:	1007883a 	mov	r3,r2
 402f21c:	e0bfe717 	ldw	r2,-100(fp)
 402f220:	10c00b0d 	sth	r3,44(r2)
            tp->t_flags &= ~TF_DELACK;
 402f224:	e0bfe717 	ldw	r2,-100(fp)
 402f228:	10c00b0b 	ldhu	r3,44(r2)
 402f22c:	00bfff44 	movi	r2,-3
 402f230:	1884703a 	and	r2,r3,r2
 402f234:	1007883a 	mov	r3,r2
 402f238:	e0bfe717 	ldw	r2,-100(fp)
 402f23c:	10c00b0d 	sth	r3,44(r2)
            tcp_output(tp);   /* send the ack now... */
 402f240:	e13fe717 	ldw	r4,-100(fp)
 402f244:	40313700 	call	4031370 <tcp_output>
         }

         return;
 402f248:	0006a106 	br	4030cd0 <tcp_input+0x2540>
      }
   }

   switch (tp->t_state) 
 402f24c:	e0bfe717 	ldw	r2,-100(fp)
 402f250:	10800217 	ldw	r2,8(r2)
 402f254:	e0bff815 	stw	r2,-32(fp)
 402f258:	e13ff817 	ldw	r4,-32(fp)
 402f25c:	20800060 	cmpeqi	r2,r4,1
 402f260:	1000041e 	bne	r2,zero,402f274 <tcp_input+0xae4>
 402f264:	e0fff817 	ldw	r3,-32(fp)
 402f268:	188000a0 	cmpeqi	r2,r3,2
 402f26c:	1000b91e 	bne	r2,zero,402f554 <tcp_input+0xdc4>
 402f270:	00019806 	br	402f8d4 <tcp_input+0x1144>
    */
   case TCPS_LISTEN: 
   {
         struct mbuf *  am;

         if (tiflags & TH_RST)
 402f274:	e0bfe617 	ldw	r2,-104(fp)
 402f278:	1080010c 	andi	r2,r2,4
 402f27c:	1005003a 	cmpeq	r2,r2,zero
 402f280:	1000031e 	bne	r2,zero,402f290 <tcp_input+0xb00>
            GOTO_DROP;
 402f284:	0080bec4 	movi	r2,763
 402f288:	d0a83015 	stw	r2,-24384(gp)
 402f28c:	00068406 	br	4030ca0 <tcp_input+0x2510>
         if (tiflags & TH_ACK)
 402f290:	e0bfe617 	ldw	r2,-104(fp)
 402f294:	1080040c 	andi	r2,r2,16
 402f298:	1005003a 	cmpeq	r2,r2,zero
 402f29c:	1000031e 	bne	r2,zero,402f2ac <tcp_input+0xb1c>
            GOTO_DROPWITHRESET;
 402f2a0:	0080bf44 	movi	r2,765
 402f2a4:	d0a83015 	stw	r2,-24384(gp)
 402f2a8:	00063906 	br	4030b90 <tcp_input+0x2400>
         if ((tiflags & TH_SYN) == 0)
 402f2ac:	e0bfe617 	ldw	r2,-104(fp)
 402f2b0:	1080008c 	andi	r2,r2,2
 402f2b4:	1004c03a 	cmpne	r2,r2,zero
 402f2b8:	1000031e 	bne	r2,zero,402f2c8 <tcp_input+0xb38>
            GOTO_DROP;
 402f2bc:	0080bfc4 	movi	r2,767
 402f2c0:	d0a83015 	stw	r2,-24384(gp)
 402f2c4:	00067606 	br	4030ca0 <tcp_input+0x2510>
         if(in_broadcast(ti->ti_dst.s_addr))
 402f2c8:	e0bfed17 	ldw	r2,-76(fp)
 402f2cc:	11000417 	ldw	r4,16(r2)
 402f2d0:	4027cbc0 	call	4027cbc <in_broadcast>
 402f2d4:	1005003a 	cmpeq	r2,r2,zero
 402f2d8:	1000031e 	bne	r2,zero,402f2e8 <tcp_input+0xb58>
            GOTO_DROP;
 402f2dc:	0080c044 	movi	r2,769
 402f2e0:	d0a83015 	stw	r2,-24384(gp)
 402f2e4:	00066e06 	br	4030ca0 <tcp_input+0x2510>
         am = m_getwithdata (MT_SONAME, sizeof (struct sockaddr));
 402f2e8:	01000244 	movi	r4,9
 402f2ec:	01400404 	movi	r5,16
 402f2f0:	40269b40 	call	40269b4 <m_getnbuf>
 402f2f4:	e0bfd915 	stw	r2,-156(fp)
         if (am == NULL)
 402f2f8:	e0bfd917 	ldw	r2,-156(fp)
 402f2fc:	1004c03a 	cmpne	r2,r2,zero
 402f300:	1000031e 	bne	r2,zero,402f310 <tcp_input+0xb80>
            GOTO_DROP;
 402f304:	0080c104 	movi	r2,772
 402f308:	d0a83015 	stw	r2,-24384(gp)
 402f30c:	00066406 	br	4030ca0 <tcp_input+0x2510>

#ifdef IP_V4
         if(inp->inp_socket->so_domain == AF_INET)
 402f310:	e0bfec17 	ldw	r2,-80(fp)
 402f314:	10800817 	ldw	r2,32(r2)
 402f318:	10800517 	ldw	r2,20(r2)
 402f31c:	10800098 	cmpnei	r2,r2,2
 402f320:	10002e1e 	bne	r2,zero,402f3dc <tcp_input+0xc4c>
         {
         struct sockaddr_in * sin;
         am->m_len = sizeof (struct sockaddr_in);
 402f324:	e0ffd917 	ldw	r3,-156(fp)
 402f328:	00800404 	movi	r2,16
 402f32c:	18800215 	stw	r2,8(r3)
         sin = mtod(am, struct sockaddr_in *);
 402f330:	e0bfd917 	ldw	r2,-156(fp)
 402f334:	10800317 	ldw	r2,12(r2)
 402f338:	e0bfd815 	stw	r2,-160(fp)
         sin->sin_family = AF_INET;
 402f33c:	e0ffd817 	ldw	r3,-160(fp)
 402f340:	00800084 	movi	r2,2
 402f344:	1880000d 	sth	r2,0(r3)
         sin->sin_addr = ti->ti_src;
 402f348:	e0bfed17 	ldw	r2,-76(fp)
 402f34c:	10c00317 	ldw	r3,12(r2)
 402f350:	e0bfd817 	ldw	r2,-160(fp)
 402f354:	10c00115 	stw	r3,4(r2)
         sin->sin_port = ti->ti_sport;
 402f358:	e0bfed17 	ldw	r2,-76(fp)
 402f35c:	10c0050b 	ldhu	r3,20(r2)
 402f360:	e0bfd817 	ldw	r2,-160(fp)
 402f364:	10c0008d 	sth	r3,2(r2)
         /* Assuming pcbconnect will work, we put the sender's address in 
          * the inp_laddr (after saving a local laddr copy). If the connect
          * fails we restore the inpcb before going to drop:
          */
         laddr = inp->inp_laddr;    /* save tmp laddr */
 402f368:	e0bfec17 	ldw	r2,-80(fp)
 402f36c:	10800417 	ldw	r2,16(r2)
 402f370:	e0bfef15 	stw	r2,-68(fp)
         if (inp->inp_laddr.s_addr == INADDR_ANY)
 402f374:	e0bfec17 	ldw	r2,-80(fp)
 402f378:	10800417 	ldw	r2,16(r2)
 402f37c:	1004c03a 	cmpne	r2,r2,zero
 402f380:	1000041e 	bne	r2,zero,402f394 <tcp_input+0xc04>
            inp->inp_laddr = ti->ti_dst;
 402f384:	e0bfed17 	ldw	r2,-76(fp)
 402f388:	10c00417 	ldw	r3,16(r2)
 402f38c:	e0bfec17 	ldw	r2,-80(fp)
 402f390:	10c00415 	stw	r3,16(r2)
         if (in_pcbconnect (inp, am)) 
 402f394:	e13fec17 	ldw	r4,-80(fp)
 402f398:	e17fd917 	ldw	r5,-156(fp)
 402f39c:	40424d80 	call	40424d8 <in_pcbconnect>
 402f3a0:	1005003a 	cmpeq	r2,r2,zero
 402f3a4:	1000081e 	bne	r2,zero,402f3c8 <tcp_input+0xc38>
         {
            inp->inp_laddr = laddr;
 402f3a8:	e0bfec17 	ldw	r2,-80(fp)
 402f3ac:	e0ffef17 	ldw	r3,-68(fp)
 402f3b0:	10c00415 	stw	r3,16(r2)
            (void) m_free(am);
 402f3b4:	e13fd917 	ldw	r4,-156(fp)
 402f3b8:	4026b5c0 	call	4026b5c <m_free>
            GOTO_DROP;
 402f3bc:	0080c684 	movi	r2,794
 402f3c0:	d0a83015 	stw	r2,-24384(gp)
 402f3c4:	00063606 	br	4030ca0 <tcp_input+0x2510>
         }
         
         inp->ifp = ifp;      /* set interface for conn.*/
 402f3c8:	e0ffec17 	ldw	r3,-80(fp)
 402f3cc:	e0bff117 	ldw	r2,-60(fp)
 402f3d0:	18800a15 	stw	r2,40(r3)
         
         (void) m_free (am);
 402f3d4:	e13fd917 	ldw	r4,-156(fp)
 402f3d8:	4026b5c0 	call	4026b5c <m_free>
            }
            (void) m_free(am);
         }
#endif   /* end v6 */

         tp->t_template = tcp_template(tp);
 402f3dc:	e13fe717 	ldw	r4,-100(fp)
 402f3e0:	40327280 	call	4032728 <tcp_template>
 402f3e4:	1007883a 	mov	r3,r2
 402f3e8:	e0bfe717 	ldw	r2,-100(fp)
 402f3ec:	10c00c15 	stw	r3,48(r2)
         if (tp->t_template == 0) 
 402f3f0:	e0bfe717 	ldw	r2,-100(fp)
 402f3f4:	10800c17 	ldw	r2,48(r2)
 402f3f8:	1004c03a 	cmpne	r2,r2,zero
 402f3fc:	1000071e 	bne	r2,zero,402f41c <tcp_input+0xc8c>
         {
            SETTP(tp, tcp_drop(tp, ENOBUFS));
 402f400:	e13fe717 	ldw	r4,-100(fp)
 402f404:	01401a44 	movi	r5,105
 402f408:	4032de00 	call	4032de0 <tcp_drop>
            dropsocket = 0;      /* socket is already gone */
 402f40c:	e03fe015 	stw	zero,-128(fp)
            GOTO_DROP;
 402f410:	0080d1c4 	movi	r2,839
 402f414:	d0a83015 	stw	r2,-24384(gp)
 402f418:	00062106 	br	4030ca0 <tcp_input+0x2510>
         }
         if (om) 
 402f41c:	e0bfeb17 	ldw	r2,-84(fp)
 402f420:	1005003a 	cmpeq	r2,r2,zero
 402f424:	1000051e 	bne	r2,zero,402f43c <tcp_input+0xcac>
         {
            tcp_dooptions(tp, om, ti);
 402f428:	e13fe717 	ldw	r4,-100(fp)
 402f42c:	e17feb17 	ldw	r5,-84(fp)
 402f430:	e1bfed17 	ldw	r6,-76(fp)
 402f434:	4030ce40 	call	4030ce4 <tcp_dooptions>
            om = 0;
 402f438:	e03feb15 	stw	zero,-84(fp)
         }
         if (iss)
 402f43c:	e0bfdf17 	ldw	r2,-132(fp)
 402f440:	1005003a 	cmpeq	r2,r2,zero
 402f444:	1000041e 	bne	r2,zero,402f458 <tcp_input+0xcc8>
            tp->iss = iss;
 402f448:	e0ffdf17 	ldw	r3,-132(fp)
 402f44c:	e0bfe717 	ldw	r2,-100(fp)
 402f450:	10c01315 	stw	r3,76(r2)
 402f454:	00000506 	br	402f46c <tcp_input+0xcdc>
         else
            tp->iss = tcp_iss;
 402f458:	00810174 	movhi	r2,1029
 402f45c:	1081f104 	addi	r2,r2,1988
 402f460:	10c00017 	ldw	r3,0(r2)
 402f464:	e0bfe717 	ldw	r2,-100(fp)
 402f468:	10c01315 	stw	r3,76(r2)
         tcp_iss += (unsigned)(TCP_ISSINCR/2);
 402f46c:	00810174 	movhi	r2,1029
 402f470:	1081f104 	addi	r2,r2,1988
 402f474:	10c00017 	ldw	r3,0(r2)
 402f478:	00be9fd4 	movui	r2,64127
 402f47c:	1887883a 	add	r3,r3,r2
 402f480:	00810174 	movhi	r2,1029
 402f484:	1081f104 	addi	r2,r2,1988
 402f488:	10c00015 	stw	r3,0(r2)
         tp->irs = ti->ti_seq;
 402f48c:	e0bfed17 	ldw	r2,-76(fp)
 402f490:	10c00617 	ldw	r3,24(r2)
 402f494:	e0bfe717 	ldw	r2,-100(fp)
 402f498:	10c01815 	stw	r3,96(r2)
         tcp_sendseqinit(tp);
 402f49c:	e0bfe717 	ldw	r2,-100(fp)
 402f4a0:	10c01317 	ldw	r3,76(r2)
 402f4a4:	e0bfe717 	ldw	r2,-100(fp)
 402f4a8:	10c01015 	stw	r3,64(r2)
 402f4ac:	e0bfe717 	ldw	r2,-100(fp)
 402f4b0:	10c01017 	ldw	r3,64(r2)
 402f4b4:	e0bfe717 	ldw	r2,-100(fp)
 402f4b8:	10c01a15 	stw	r3,104(r2)
 402f4bc:	e0bfe717 	ldw	r2,-100(fp)
 402f4c0:	10c01a17 	ldw	r3,104(r2)
 402f4c4:	e0bfe717 	ldw	r2,-100(fp)
 402f4c8:	10c00f15 	stw	r3,60(r2)
 402f4cc:	e0bfe717 	ldw	r2,-100(fp)
 402f4d0:	10c00f17 	ldw	r3,60(r2)
 402f4d4:	e0bfe717 	ldw	r2,-100(fp)
 402f4d8:	10c00e15 	stw	r3,56(r2)
         tcp_rcvseqinit(tp);
 402f4dc:	e0bfe717 	ldw	r2,-100(fp)
 402f4e0:	10801817 	ldw	r2,96(r2)
 402f4e4:	10c00044 	addi	r3,r2,1
 402f4e8:	e0bfe717 	ldw	r2,-100(fp)
 402f4ec:	10c01615 	stw	r3,88(r2)
 402f4f0:	e0bfe717 	ldw	r2,-100(fp)
 402f4f4:	10c01617 	ldw	r3,88(r2)
 402f4f8:	e0bfe717 	ldw	r2,-100(fp)
 402f4fc:	10c01915 	stw	r3,100(r2)
         tp->t_flags |= TF_ACKNOW;
 402f500:	e0bfe717 	ldw	r2,-100(fp)
 402f504:	10800b0b 	ldhu	r2,44(r2)
 402f508:	10800054 	ori	r2,r2,1
 402f50c:	1007883a 	mov	r3,r2
 402f510:	e0bfe717 	ldw	r2,-100(fp)
 402f514:	10c00b0d 	sth	r3,44(r2)
         tp->t_state = TCPS_SYN_RECEIVED;
 402f518:	e0ffe717 	ldw	r3,-100(fp)
 402f51c:	008000c4 	movi	r2,3
 402f520:	18800215 	stw	r2,8(r3)
         tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 402f524:	e0ffe717 	ldw	r3,-100(fp)
 402f528:	00802584 	movi	r2,150
 402f52c:	18800515 	stw	r2,20(r3)
         dropsocket = 0;      /* committed to socket */
 402f530:	e03fe015 	stw	zero,-128(fp)
         tcpstat.tcps_accepts++;
 402f534:	008101b4 	movhi	r2,1030
 402f538:	10a37804 	addi	r2,r2,-29216
 402f53c:	10800117 	ldw	r2,4(r2)
 402f540:	10c00044 	addi	r3,r2,1
 402f544:	008101b4 	movhi	r2,1030
 402f548:	10a37804 	addi	r2,r2,-29216
 402f54c:	10c00115 	stw	r3,4(r2)
         goto trimthenstep6;
 402f550:	00009d06 	br	402f7c8 <tcp_input+0x1038>
    *   if SYN has been acked change to ESTABLISHED else SYN_RCVD state
    *   arrange for segment to be acked (eventually)
    *   continue processing rest of data/controls, beginning with URG
    */
   case TCPS_SYN_SENT:
      inp->ifp = ifp;
 402f554:	e0ffec17 	ldw	r3,-80(fp)
 402f558:	e0bff117 	ldw	r2,-60(fp)
 402f55c:	18800a15 	stw	r2,40(r3)
      if ((tiflags & TH_ACK) &&
 402f560:	e0bfe617 	ldw	r2,-104(fp)
 402f564:	1080040c 	andi	r2,r2,16
 402f568:	1005003a 	cmpeq	r2,r2,zero
 402f56c:	1000111e 	bne	r2,zero,402f5b4 <tcp_input+0xe24>
 402f570:	e0bfed17 	ldw	r2,-76(fp)
 402f574:	10c00717 	ldw	r3,28(r2)
 402f578:	e0bfe717 	ldw	r2,-100(fp)
 402f57c:	10801317 	ldw	r2,76(r2)
 402f580:	1885c83a 	sub	r2,r3,r2
 402f584:	10800050 	cmplti	r2,r2,1
 402f588:	1000071e 	bne	r2,zero,402f5a8 <tcp_input+0xe18>
 402f58c:	e0bfed17 	ldw	r2,-76(fp)
 402f590:	10c00717 	ldw	r3,28(r2)
 402f594:	e0bfe717 	ldw	r2,-100(fp)
 402f598:	10801a17 	ldw	r2,104(r2)
 402f59c:	1885c83a 	sub	r2,r3,r2
 402f5a0:	10800050 	cmplti	r2,r2,1
 402f5a4:	1000031e 	bne	r2,zero,402f5b4 <tcp_input+0xe24>
          (SEQ_LEQ(ti->ti_ack, tp->iss) ||
          SEQ_GT(ti->ti_ack, tp->snd_max)))
      {
         GOTO_DROPWITHRESET;
 402f5a8:	0080dc04 	movi	r2,880
 402f5ac:	d0a83015 	stw	r2,-24384(gp)
 402f5b0:	00057706 	br	4030b90 <tcp_input+0x2400>
      }
      if (tiflags & TH_RST) 
 402f5b4:	e0bfe617 	ldw	r2,-104(fp)
 402f5b8:	1080010c 	andi	r2,r2,4
 402f5bc:	1005003a 	cmpeq	r2,r2,zero
 402f5c0:	10000a1e 	bne	r2,zero,402f5ec <tcp_input+0xe5c>
      {
         if (tiflags & TH_ACK)
 402f5c4:	e0bfe617 	ldw	r2,-104(fp)
 402f5c8:	1080040c 	andi	r2,r2,16
 402f5cc:	1005003a 	cmpeq	r2,r2,zero
 402f5d0:	1000031e 	bne	r2,zero,402f5e0 <tcp_input+0xe50>
            SETTP(tp, tcp_drop(tp, ECONNREFUSED));
 402f5d4:	e13fe717 	ldw	r4,-100(fp)
 402f5d8:	01401bc4 	movi	r5,111
 402f5dc:	4032de00 	call	4032de0 <tcp_drop>
         GOTO_DROP;
 402f5e0:	0080dd84 	movi	r2,886
 402f5e4:	d0a83015 	stw	r2,-24384(gp)
 402f5e8:	0005ad06 	br	4030ca0 <tcp_input+0x2510>
      }
      if ((tiflags & TH_SYN) == 0)
 402f5ec:	e0bfe617 	ldw	r2,-104(fp)
 402f5f0:	1080008c 	andi	r2,r2,2
 402f5f4:	1004c03a 	cmpne	r2,r2,zero
 402f5f8:	1000031e 	bne	r2,zero,402f608 <tcp_input+0xe78>
         GOTO_DROP;
 402f5fc:	0080de44 	movi	r2,889
 402f600:	d0a83015 	stw	r2,-24384(gp)
 402f604:	0005a606 	br	4030ca0 <tcp_input+0x2510>
      if (tiflags & TH_ACK) 
 402f608:	e0bfe617 	ldw	r2,-104(fp)
 402f60c:	1080040c 	andi	r2,r2,16
 402f610:	1005003a 	cmpeq	r2,r2,zero
 402f614:	10000f1e 	bne	r2,zero,402f654 <tcp_input+0xec4>
      {
         tp->snd_una = ti->ti_ack;
 402f618:	e0bfed17 	ldw	r2,-76(fp)
 402f61c:	10c00717 	ldw	r3,28(r2)
 402f620:	e0bfe717 	ldw	r2,-100(fp)
 402f624:	10c00e15 	stw	r3,56(r2)
         if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 402f628:	e0bfe717 	ldw	r2,-100(fp)
 402f62c:	10c00f17 	ldw	r3,60(r2)
 402f630:	e0bfe717 	ldw	r2,-100(fp)
 402f634:	10800e17 	ldw	r2,56(r2)
 402f638:	1885c83a 	sub	r2,r3,r2
 402f63c:	1004403a 	cmpge	r2,r2,zero
 402f640:	1000041e 	bne	r2,zero,402f654 <tcp_input+0xec4>
            tp->snd_nxt = tp->snd_una;
 402f644:	e0bfe717 	ldw	r2,-100(fp)
 402f648:	10c00e17 	ldw	r3,56(r2)
 402f64c:	e0bfe717 	ldw	r2,-100(fp)
 402f650:	10c00f15 	stw	r3,60(r2)
      }
      tp->t_timer[TCPT_REXMT] = 0;
 402f654:	e0bfe717 	ldw	r2,-100(fp)
 402f658:	10000315 	stw	zero,12(r2)
      tp->irs = ti->ti_seq;
 402f65c:	e0bfed17 	ldw	r2,-76(fp)
 402f660:	10c00617 	ldw	r3,24(r2)
 402f664:	e0bfe717 	ldw	r2,-100(fp)
 402f668:	10c01815 	stw	r3,96(r2)
      tcp_rcvseqinit(tp);
 402f66c:	e0bfe717 	ldw	r2,-100(fp)
 402f670:	10801817 	ldw	r2,96(r2)
 402f674:	10c00044 	addi	r3,r2,1
 402f678:	e0bfe717 	ldw	r2,-100(fp)
 402f67c:	10c01615 	stw	r3,88(r2)
 402f680:	e0bfe717 	ldw	r2,-100(fp)
 402f684:	10c01617 	ldw	r3,88(r2)
 402f688:	e0bfe717 	ldw	r2,-100(fp)
 402f68c:	10c01915 	stw	r3,100(r2)
      if (inp->inp_laddr.s_addr != ti->ti_dst.s_addr) 
 402f690:	e0bfec17 	ldw	r2,-80(fp)
 402f694:	10c00417 	ldw	r3,16(r2)
 402f698:	e0bfed17 	ldw	r2,-76(fp)
 402f69c:	10800417 	ldw	r2,16(r2)
 402f6a0:	18801926 	beq	r3,r2,402f708 <tcp_input+0xf78>
          * the IP interface may have changed address since we sent our SYN
          * (e.g. PPP brings link up as a result of said SYN and gets new
          * address via IPCP); if so we need to update the inpcb and the
          * TCP header template with the new address.
          */
         if ((m->pkt->net != NULL)
 402f6a4:	e0bff017 	ldw	r2,-64(fp)
 402f6a8:	10800117 	ldw	r2,4(r2)
 402f6ac:	10800617 	ldw	r2,24(r2)
 402f6b0:	1005003a 	cmpeq	r2,r2,zero
 402f6b4:	1000141e 	bne	r2,zero,402f708 <tcp_input+0xf78>
 402f6b8:	e0bff017 	ldw	r2,-64(fp)
 402f6bc:	10800117 	ldw	r2,4(r2)
 402f6c0:	10800617 	ldw	r2,24(r2)
 402f6c4:	10c00a17 	ldw	r3,40(r2)
 402f6c8:	e0bfed17 	ldw	r2,-76(fp)
 402f6cc:	10800417 	ldw	r2,16(r2)
 402f6d0:	18800d1e 	bne	r3,r2,402f708 <tcp_input+0xf78>
             && (m->pkt->net->n_ipaddr == ti->ti_dst.s_addr)) 
      /* send an ack */
         {
            inp->inp_laddr = ti->ti_dst;
 402f6d4:	e0bfed17 	ldw	r2,-76(fp)
 402f6d8:	10c00417 	ldw	r3,16(r2)
 402f6dc:	e0bfec17 	ldw	r2,-80(fp)
 402f6e0:	10c00415 	stw	r3,16(r2)
            if (tp->t_template != NULL)
 402f6e4:	e0bfe717 	ldw	r2,-100(fp)
 402f6e8:	10800c17 	ldw	r2,48(r2)
 402f6ec:	1005003a 	cmpeq	r2,r2,zero
 402f6f0:	1000051e 	bne	r2,zero,402f708 <tcp_input+0xf78>
               tp->t_template->ti_src = ti->ti_dst;
 402f6f4:	e0bfe717 	ldw	r2,-100(fp)
 402f6f8:	10c00c17 	ldw	r3,48(r2)
 402f6fc:	e0bfed17 	ldw	r2,-76(fp)
 402f700:	10800417 	ldw	r2,16(r2)
 402f704:	18800315 	stw	r2,12(r3)
         }
      }
      tp->t_flags |= TF_ACKNOW;
 402f708:	e0bfe717 	ldw	r2,-100(fp)
 402f70c:	10800b0b 	ldhu	r2,44(r2)
 402f710:	10800054 	ori	r2,r2,1
 402f714:	1007883a 	mov	r3,r2
 402f718:	e0bfe717 	ldw	r2,-100(fp)
 402f71c:	10c00b0d 	sth	r3,44(r2)
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
 402f720:	e0bfe617 	ldw	r2,-104(fp)
 402f724:	1080040c 	andi	r2,r2,16
 402f728:	1005003a 	cmpeq	r2,r2,zero
 402f72c:	1000231e 	bne	r2,zero,402f7bc <tcp_input+0x102c>
 402f730:	e0bfe717 	ldw	r2,-100(fp)
 402f734:	10c00e17 	ldw	r3,56(r2)
 402f738:	e0bfe717 	ldw	r2,-100(fp)
 402f73c:	10801317 	ldw	r2,76(r2)
 402f740:	1885c83a 	sub	r2,r3,r2
 402f744:	10800050 	cmplti	r2,r2,1
 402f748:	10001c1e 	bne	r2,zero,402f7bc <tcp_input+0x102c>
      {
         tcpstat.tcps_connects++;
 402f74c:	008101b4 	movhi	r2,1030
 402f750:	10a37804 	addi	r2,r2,-29216
 402f754:	10800217 	ldw	r2,8(r2)
 402f758:	10c00044 	addi	r3,r2,1
 402f75c:	008101b4 	movhi	r2,1030
 402f760:	10a37804 	addi	r2,r2,-29216
 402f764:	10c00215 	stw	r3,8(r2)
         tp->t_state = TCPS_ESTABLISHED;
 402f768:	e0ffe717 	ldw	r3,-100(fp)
 402f76c:	00800104 	movi	r2,4
 402f770:	18800215 	stw	r2,8(r3)
         soisconnected (so);
 402f774:	e13fe517 	ldw	r4,-108(fp)
 402f778:	402c7c80 	call	402c7c8 <soisconnected>
         tp->t_maxseg = tcp_mss(so);
 402f77c:	e13fe517 	ldw	r4,-108(fp)
 402f780:	40312540 	call	4031254 <tcp_mss>
 402f784:	1007883a 	mov	r3,r2
 402f788:	e0bfe717 	ldw	r2,-100(fp)
 402f78c:	10c00a0d 	sth	r3,40(r2)
         (void) tcp_reass (tp, (struct tcpiphdr *)0, m);
 402f790:	e13fe717 	ldw	r4,-100(fp)
 402f794:	000b883a 	mov	r5,zero
 402f798:	e1bff017 	ldw	r6,-64(fp)
 402f79c:	402e3880 	call	402e388 <tcp_reass>
         /*
          * if we didn't have to retransmit the SYN,
          * use its rtt as our initial srtt & rtt var.
          */
         if (tp->t_rttick) 
 402f7a0:	e0bfe717 	ldw	r2,-100(fp)
 402f7a4:	10801e17 	ldw	r2,120(r2)
 402f7a8:	1005003a 	cmpeq	r2,r2,zero
 402f7ac:	1000061e 	bne	r2,zero,402f7c8 <tcp_input+0x1038>
         {
            tcp_xmit_timer(tp);
 402f7b0:	e13fe717 	ldw	r4,-100(fp)
 402f7b4:	4030fa00 	call	4030fa0 <tcp_xmit_timer>
            if (tp->t_template != NULL)
               tp->t_template->ti_src = ti->ti_dst;
         }
      }
      tp->t_flags |= TF_ACKNOW;
      if (tiflags & TH_ACK && SEQ_GT(tp->snd_una, tp->iss)) 
 402f7b8:	00000306 	br	402f7c8 <tcp_input+0x1038>
         if (tp->t_rttick) 
         {
            tcp_xmit_timer(tp);
         }
      } else
         tp->t_state = TCPS_SYN_RECEIVED;
 402f7bc:	e0ffe717 	ldw	r3,-100(fp)
 402f7c0:	008000c4 	movi	r2,3
 402f7c4:	18800215 	stw	r2,8(r3)
      /*
       * Advance ti->ti_seq to correspond to first data byte.
       * If data, trim to stay within window,
       * dropping FIN if necessary.
       */
      ti->ti_seq++;
 402f7c8:	e0bfed17 	ldw	r2,-76(fp)
 402f7cc:	10800617 	ldw	r2,24(r2)
 402f7d0:	10c00044 	addi	r3,r2,1
 402f7d4:	e0bfed17 	ldw	r2,-76(fp)
 402f7d8:	10c00615 	stw	r3,24(r2)
      if ((tcp_win)ti->ti_len > tp->rcv_wnd) 
 402f7dc:	e0bfed17 	ldw	r2,-76(fp)
 402f7e0:	1080028b 	ldhu	r2,10(r2)
 402f7e4:	10ffffcc 	andi	r3,r2,65535
 402f7e8:	e0bfe717 	ldw	r2,-100(fp)
 402f7ec:	10801517 	ldw	r2,84(r2)
 402f7f0:	10c02e2e 	bgeu	r2,r3,402f8ac <tcp_input+0x111c>
      {
         todrop = ti->ti_len - (u_short)tp->rcv_wnd;
 402f7f4:	e0bfed17 	ldw	r2,-76(fp)
 402f7f8:	1080028b 	ldhu	r2,10(r2)
 402f7fc:	10ffffcc 	andi	r3,r2,65535
 402f800:	e0bfe717 	ldw	r2,-100(fp)
 402f804:	10801517 	ldw	r2,84(r2)
 402f808:	10bfffcc 	andi	r2,r2,65535
 402f80c:	1885c83a 	sub	r2,r3,r2
 402f810:	e0bfe415 	stw	r2,-112(fp)
         /* XXX work around 4.2 m_adj bug */
         if (m->m_len) 
 402f814:	e0bff017 	ldw	r2,-64(fp)
 402f818:	10800217 	ldw	r2,8(r2)
 402f81c:	1005003a 	cmpeq	r2,r2,zero
 402f820:	1000051e 	bne	r2,zero,402f838 <tcp_input+0x10a8>
         {
            m_adj(m, -todrop);
 402f824:	e0bfe417 	ldw	r2,-112(fp)
 402f828:	008bc83a 	sub	r5,zero,r2
 402f82c:	e13ff017 	ldw	r4,-64(fp)
 402f830:	4026ff80 	call	4026ff8 <m_adj>
 402f834:	00000506 	br	402f84c <tcp_input+0x10bc>
         }
         else 
         {
            /* skip tcp/ip header in first mbuf */
            m_adj(m->m_next, -todrop);
 402f838:	e0bff017 	ldw	r2,-64(fp)
 402f83c:	11000617 	ldw	r4,24(r2)
 402f840:	e0bfe417 	ldw	r2,-112(fp)
 402f844:	008bc83a 	sub	r5,zero,r2
 402f848:	4026ff80 	call	4026ff8 <m_adj>
         }
         ti->ti_len = (u_short)tp->rcv_wnd;
 402f84c:	e0bfe717 	ldw	r2,-100(fp)
 402f850:	10801517 	ldw	r2,84(r2)
 402f854:	1007883a 	mov	r3,r2
 402f858:	e0bfed17 	ldw	r2,-76(fp)
 402f85c:	10c0028d 	sth	r3,10(r2)
         tiflags &= ~TH_FIN;
 402f860:	e0ffe617 	ldw	r3,-104(fp)
 402f864:	00bfff84 	movi	r2,-2
 402f868:	1884703a 	and	r2,r3,r2
 402f86c:	e0bfe615 	stw	r2,-104(fp)
         tcpstat.tcps_rcvpackafterwin++;
 402f870:	008101b4 	movhi	r2,1030
 402f874:	10a37804 	addi	r2,r2,-29216
 402f878:	10802517 	ldw	r2,148(r2)
 402f87c:	10c00044 	addi	r3,r2,1
 402f880:	008101b4 	movhi	r2,1030
 402f884:	10a37804 	addi	r2,r2,-29216
 402f888:	10c02515 	stw	r3,148(r2)
         tcpstat.tcps_rcvbyteafterwin += todrop;
 402f88c:	008101b4 	movhi	r2,1030
 402f890:	10a37804 	addi	r2,r2,-29216
 402f894:	10c02617 	ldw	r3,152(r2)
 402f898:	e0bfe417 	ldw	r2,-112(fp)
 402f89c:	1887883a 	add	r3,r3,r2
 402f8a0:	008101b4 	movhi	r2,1030
 402f8a4:	10a37804 	addi	r2,r2,-29216
 402f8a8:	10c02615 	stw	r3,152(r2)
      }
      tp->snd_wl1 = ti->ti_seq - 1;
 402f8ac:	e0bfed17 	ldw	r2,-76(fp)
 402f8b0:	10800617 	ldw	r2,24(r2)
 402f8b4:	10ffffc4 	addi	r3,r2,-1
 402f8b8:	e0bfe717 	ldw	r2,-100(fp)
 402f8bc:	10c01115 	stw	r3,68(r2)
      tp->rcv_up = ti->ti_seq;
 402f8c0:	e0bfed17 	ldw	r2,-76(fp)
 402f8c4:	10c00617 	ldw	r3,24(r2)
 402f8c8:	e0bfe717 	ldw	r2,-100(fp)
 402f8cc:	10c01715 	stw	r3,92(r2)
      goto step6;
 402f8d0:	00032406 	br	4030564 <tcp_input+0x1dd4>
    * States other than LISTEN or SYN_SENT.
    * First check that at least some bytes of segment are within 
    * receive window.  If segment begins before rcv_nxt,
    * drop leading data (and SYN); if nothing left, just ack.
    */
   todrop = (int)(tp->rcv_nxt - ti->ti_seq);
 402f8d4:	e0bfe717 	ldw	r2,-100(fp)
 402f8d8:	10c01617 	ldw	r3,88(r2)
 402f8dc:	e0bfed17 	ldw	r2,-76(fp)
 402f8e0:	10800617 	ldw	r2,24(r2)
 402f8e4:	1885c83a 	sub	r2,r3,r2
 402f8e8:	e0bfe415 	stw	r2,-112(fp)
   if (todrop > 0) 
 402f8ec:	e0bfe417 	ldw	r2,-112(fp)
 402f8f0:	10800050 	cmplti	r2,r2,1
 402f8f4:	1000971e 	bne	r2,zero,402fb54 <tcp_input+0x13c4>
   {
      if (tiflags & TH_SYN) 
 402f8f8:	e0bfe617 	ldw	r2,-104(fp)
 402f8fc:	1080008c 	andi	r2,r2,2
 402f900:	1005003a 	cmpeq	r2,r2,zero
 402f904:	10001c1e 	bne	r2,zero,402f978 <tcp_input+0x11e8>
      {
         tiflags &= ~TH_SYN;
 402f908:	e0ffe617 	ldw	r3,-104(fp)
 402f90c:	00bfff44 	movi	r2,-3
 402f910:	1884703a 	and	r2,r3,r2
 402f914:	e0bfe615 	stw	r2,-104(fp)
         ti->ti_seq++;
 402f918:	e0bfed17 	ldw	r2,-76(fp)
 402f91c:	10800617 	ldw	r2,24(r2)
 402f920:	10c00044 	addi	r3,r2,1
 402f924:	e0bfed17 	ldw	r2,-76(fp)
 402f928:	10c00615 	stw	r3,24(r2)
         if (ti->ti_urp > 1) 
 402f92c:	e0bfed17 	ldw	r2,-76(fp)
 402f930:	1080098b 	ldhu	r2,38(r2)
 402f934:	10bfffcc 	andi	r2,r2,65535
 402f938:	108000b0 	cmpltui	r2,r2,2
 402f93c:	1000071e 	bne	r2,zero,402f95c <tcp_input+0x11cc>
            ti->ti_urp--;
 402f940:	e0bfed17 	ldw	r2,-76(fp)
 402f944:	1080098b 	ldhu	r2,38(r2)
 402f948:	10bfffc4 	addi	r2,r2,-1
 402f94c:	1007883a 	mov	r3,r2
 402f950:	e0bfed17 	ldw	r2,-76(fp)
 402f954:	10c0098d 	sth	r3,38(r2)
 402f958:	00000406 	br	402f96c <tcp_input+0x11dc>
         else
            tiflags &= ~TH_URG;
 402f95c:	e0bfe617 	ldw	r2,-104(fp)
 402f960:	00fff7c4 	movi	r3,-33
 402f964:	10c4703a 	and	r2,r2,r3
 402f968:	e0bfe615 	stw	r2,-104(fp)
         todrop--;
 402f96c:	e0bfe417 	ldw	r2,-112(fp)
 402f970:	10bfffc4 	addi	r2,r2,-1
 402f974:	e0bfe415 	stw	r2,-112(fp)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
 402f978:	e0bfed17 	ldw	r2,-76(fp)
 402f97c:	1080028b 	ldhu	r2,10(r2)
 402f980:	10ffffcc 	andi	r3,r2,65535
 402f984:	e0bfe417 	ldw	r2,-112(fp)
 402f988:	18800916 	blt	r3,r2,402f9b0 <tcp_input+0x1220>
 402f98c:	e0bfed17 	ldw	r2,-76(fp)
 402f990:	1080028b 	ldhu	r2,10(r2)
 402f994:	10ffffcc 	andi	r3,r2,65535
 402f998:	e0bfe417 	ldw	r2,-112(fp)
 402f99c:	18803a1e 	bne	r3,r2,402fa88 <tcp_input+0x12f8>
 402f9a0:	e0bfe617 	ldw	r2,-104(fp)
 402f9a4:	1080004c 	andi	r2,r2,1
 402f9a8:	1004c03a 	cmpne	r2,r2,zero
 402f9ac:	1000361e 	bne	r2,zero,402fa88 <tcp_input+0x12f8>
          ((todrop == (int)ti->ti_len) && 
          (tiflags&TH_FIN) == 0)) 
      {
         tcpstat.tcps_rcvduppack++;
 402f9b0:	008101b4 	movhi	r2,1030
 402f9b4:	10a37804 	addi	r2,r2,-29216
 402f9b8:	10801f17 	ldw	r2,124(r2)
 402f9bc:	10c00044 	addi	r3,r2,1
 402f9c0:	008101b4 	movhi	r2,1030
 402f9c4:	10a37804 	addi	r2,r2,-29216
 402f9c8:	10c01f15 	stw	r3,124(r2)
         tcpstat.tcps_rcvdupbyte += ti->ti_len;
 402f9cc:	008101b4 	movhi	r2,1030
 402f9d0:	10a37804 	addi	r2,r2,-29216
 402f9d4:	10c02017 	ldw	r3,128(r2)
 402f9d8:	e0bfed17 	ldw	r2,-76(fp)
 402f9dc:	1080028b 	ldhu	r2,10(r2)
 402f9e0:	10bfffcc 	andi	r2,r2,65535
 402f9e4:	1887883a 	add	r3,r3,r2
 402f9e8:	008101b4 	movhi	r2,1030
 402f9ec:	10a37804 	addi	r2,r2,-29216
 402f9f0:	10c02015 	stw	r3,128(r2)
          *    it, but check the ACK or we will get into FIN
          *    wars if our FINs crossed (both CLOSING).
          * In either case, send ACK to resynchronize,
          * but keep on processing for RST or ACK.
          */
         if ((tiflags & TH_FIN && todrop == (int)ti->ti_len + 1) ||
 402f9f4:	e0bfe617 	ldw	r2,-104(fp)
 402f9f8:	1080004c 	andi	r2,r2,1
 402f9fc:	1080005c 	xori	r2,r2,1
 402fa00:	10803fcc 	andi	r2,r2,255
 402fa04:	1004c03a 	cmpne	r2,r2,zero
 402fa08:	1000061e 	bne	r2,zero,402fa24 <tcp_input+0x1294>
 402fa0c:	e0bfed17 	ldw	r2,-76(fp)
 402fa10:	1080028b 	ldhu	r2,10(r2)
 402fa14:	10bfffcc 	andi	r2,r2,65535
 402fa18:	10c00044 	addi	r3,r2,1
 402fa1c:	e0bfe417 	ldw	r2,-112(fp)
 402fa20:	18800a26 	beq	r3,r2,402fa4c <tcp_input+0x12bc>
 402fa24:	e0bfe617 	ldw	r2,-104(fp)
 402fa28:	1080010c 	andi	r2,r2,4
 402fa2c:	1005003a 	cmpeq	r2,r2,zero
 402fa30:	1004451e 	bne	r2,zero,4030b48 <tcp_input+0x23b8>
 402fa34:	e0bfed17 	ldw	r2,-76(fp)
 402fa38:	10c00617 	ldw	r3,24(r2)
 402fa3c:	e0bfe717 	ldw	r2,-100(fp)
 402fa40:	10801617 	ldw	r2,88(r2)
 402fa44:	10bfffc4 	addi	r2,r2,-1
 402fa48:	18843f1e 	bne	r3,r2,4030b48 <tcp_input+0x23b8>
            (tiflags & TH_RST && ti->ti_seq == tp->rcv_nxt - 1))
         {
            todrop = ti->ti_len;
 402fa4c:	e0bfed17 	ldw	r2,-76(fp)
 402fa50:	1080028b 	ldhu	r2,10(r2)
 402fa54:	10bfffcc 	andi	r2,r2,65535
 402fa58:	e0bfe415 	stw	r2,-112(fp)
            tiflags &= ~TH_FIN;
 402fa5c:	e0ffe617 	ldw	r3,-104(fp)
 402fa60:	00bfff84 	movi	r2,-2
 402fa64:	1884703a 	and	r2,r3,r2
 402fa68:	e0bfe615 	stw	r2,-104(fp)
            tp->t_flags |= TF_ACKNOW;
 402fa6c:	e0bfe717 	ldw	r2,-100(fp)
 402fa70:	10800b0b 	ldhu	r2,44(r2)
 402fa74:	10800054 	ori	r2,r2,1
 402fa78:	1007883a 	mov	r3,r2
 402fa7c:	e0bfe717 	ldw	r2,-100(fp)
 402fa80:	10c00b0d 	sth	r3,44(r2)
      /*
       * Altera Niche Stack Nios port modification:
       * Add parenthesis to remove implicit order of operaton
       * & possible build warning.
       */
      if ((todrop > (int)ti->ti_len) ||
 402fa84:	00000f06 	br	402fac4 <tcp_input+0x1334>
         else
            goto dropafterack;
      }
      else 
      {
         tcpstat.tcps_rcvpartduppack++;
 402fa88:	008101b4 	movhi	r2,1030
 402fa8c:	10a37804 	addi	r2,r2,-29216
 402fa90:	10802117 	ldw	r2,132(r2)
 402fa94:	10c00044 	addi	r3,r2,1
 402fa98:	008101b4 	movhi	r2,1030
 402fa9c:	10a37804 	addi	r2,r2,-29216
 402faa0:	10c02115 	stw	r3,132(r2)
         tcpstat.tcps_rcvpartdupbyte += todrop;
 402faa4:	008101b4 	movhi	r2,1030
 402faa8:	10a37804 	addi	r2,r2,-29216
 402faac:	10c02217 	ldw	r3,136(r2)
 402fab0:	e0bfe417 	ldw	r2,-112(fp)
 402fab4:	1887883a 	add	r3,r3,r2
 402fab8:	008101b4 	movhi	r2,1030
 402fabc:	10a37804 	addi	r2,r2,-29216
 402fac0:	10c02215 	stw	r3,136(r2)
      }
      m_adj(m, todrop);
 402fac4:	e13ff017 	ldw	r4,-64(fp)
 402fac8:	e17fe417 	ldw	r5,-112(fp)
 402facc:	4026ff80 	call	4026ff8 <m_adj>
      ti->ti_seq += todrop;
 402fad0:	e0bfed17 	ldw	r2,-76(fp)
 402fad4:	10c00617 	ldw	r3,24(r2)
 402fad8:	e0bfe417 	ldw	r2,-112(fp)
 402fadc:	1887883a 	add	r3,r3,r2
 402fae0:	e0bfed17 	ldw	r2,-76(fp)
 402fae4:	10c00615 	stw	r3,24(r2)
      ti->ti_len -= (u_short)todrop;
 402fae8:	e0bfed17 	ldw	r2,-76(fp)
 402faec:	10c0028b 	ldhu	r3,10(r2)
 402faf0:	e0bfe417 	ldw	r2,-112(fp)
 402faf4:	1885c83a 	sub	r2,r3,r2
 402faf8:	1007883a 	mov	r3,r2
 402fafc:	e0bfed17 	ldw	r2,-76(fp)
 402fb00:	10c0028d 	sth	r3,10(r2)
      if (ti->ti_urp > (u_short)todrop)
 402fb04:	e0bfed17 	ldw	r2,-76(fp)
 402fb08:	10c0098b 	ldhu	r3,38(r2)
 402fb0c:	e0bfe417 	ldw	r2,-112(fp)
 402fb10:	18ffffcc 	andi	r3,r3,65535
 402fb14:	10bfffcc 	andi	r2,r2,65535
 402fb18:	10c0082e 	bgeu	r2,r3,402fb3c <tcp_input+0x13ac>
         ti->ti_urp -= (u_short)todrop;
 402fb1c:	e0bfed17 	ldw	r2,-76(fp)
 402fb20:	10c0098b 	ldhu	r3,38(r2)
 402fb24:	e0bfe417 	ldw	r2,-112(fp)
 402fb28:	1885c83a 	sub	r2,r3,r2
 402fb2c:	1007883a 	mov	r3,r2
 402fb30:	e0bfed17 	ldw	r2,-76(fp)
 402fb34:	10c0098d 	sth	r3,38(r2)
 402fb38:	00000606 	br	402fb54 <tcp_input+0x13c4>
      else 
      {
         tiflags &= ~TH_URG;
 402fb3c:	e0ffe617 	ldw	r3,-104(fp)
 402fb40:	00bff7c4 	movi	r2,-33
 402fb44:	1884703a 	and	r2,r3,r2
 402fb48:	e0bfe615 	stw	r2,-104(fp)
         ti->ti_urp = 0;
 402fb4c:	e0bfed17 	ldw	r2,-76(fp)
 402fb50:	1000098d 	sth	zero,38(r2)

   /*
    * If new data are received on a connection after the
    * user processes are gone, then RST the other end.
    */
   if ((so->so_state & SS_NOFDREF) &&
 402fb54:	e0bfe517 	ldw	r2,-108(fp)
 402fb58:	1080088b 	ldhu	r2,34(r2)
 402fb5c:	10bfffcc 	andi	r2,r2,65535
 402fb60:	1080004c 	andi	r2,r2,1
 402fb64:	10803fcc 	andi	r2,r2,255
 402fb68:	1005003a 	cmpeq	r2,r2,zero
 402fb6c:	1000161e 	bne	r2,zero,402fbc8 <tcp_input+0x1438>
 402fb70:	e0bfe717 	ldw	r2,-100(fp)
 402fb74:	10800217 	ldw	r2,8(r2)
 402fb78:	10800190 	cmplti	r2,r2,6
 402fb7c:	1000121e 	bne	r2,zero,402fbc8 <tcp_input+0x1438>
 402fb80:	e0bfed17 	ldw	r2,-76(fp)
 402fb84:	1080028b 	ldhu	r2,10(r2)
 402fb88:	10bfffcc 	andi	r2,r2,65535
 402fb8c:	1005003a 	cmpeq	r2,r2,zero
 402fb90:	10000d1e 	bne	r2,zero,402fbc8 <tcp_input+0x1438>
       tp->t_state > TCPS_CLOSE_WAIT && ti->ti_len) 
   {
      tp = tcp_close(tp);
 402fb94:	e13fe717 	ldw	r4,-100(fp)
 402fb98:	4032e8c0 	call	4032e8c <tcp_close>
 402fb9c:	e0bfe715 	stw	r2,-100(fp)
      tcpstat.tcps_rcvafterclose++;
 402fba0:	008101b4 	movhi	r2,1030
 402fba4:	10a37804 	addi	r2,r2,-29216
 402fba8:	10802717 	ldw	r2,156(r2)
 402fbac:	10c00044 	addi	r3,r2,1
 402fbb0:	008101b4 	movhi	r2,1030
 402fbb4:	10a37804 	addi	r2,r2,-29216
 402fbb8:	10c02715 	stw	r3,156(r2)
      GOTO_DROPWITHRESET;
 402fbbc:	00810444 	movi	r2,1041
 402fbc0:	d0a83015 	stw	r2,-24384(gp)
 402fbc4:	0003f206 	br	4030b90 <tcp_input+0x2400>

   /*
    * If segment ends after window, drop trailing data
    * (and PUSH and FIN); if nothing left, just ACK.
    */
   todrop = (int)((ti->ti_seq + (short)ti->ti_len) - (tp->rcv_nxt+tp->rcv_wnd));
 402fbc8:	e0bfed17 	ldw	r2,-76(fp)
 402fbcc:	10c00617 	ldw	r3,24(r2)
 402fbd0:	e0bfed17 	ldw	r2,-76(fp)
 402fbd4:	1080028b 	ldhu	r2,10(r2)
 402fbd8:	10bfffcc 	andi	r2,r2,65535
 402fbdc:	10a0001c 	xori	r2,r2,32768
 402fbe0:	10a00004 	addi	r2,r2,-32768
 402fbe4:	1889883a 	add	r4,r3,r2
 402fbe8:	e0bfe717 	ldw	r2,-100(fp)
 402fbec:	10c01617 	ldw	r3,88(r2)
 402fbf0:	e0bfe717 	ldw	r2,-100(fp)
 402fbf4:	10801517 	ldw	r2,84(r2)
 402fbf8:	1885883a 	add	r2,r3,r2
 402fbfc:	2085c83a 	sub	r2,r4,r2
 402fc00:	e0bfe415 	stw	r2,-112(fp)
   if (todrop > 0) 
 402fc04:	e0bfe417 	ldw	r2,-112(fp)
 402fc08:	10800050 	cmplti	r2,r2,1
 402fc0c:	10006b1e 	bne	r2,zero,402fdbc <tcp_input+0x162c>
   {
      tcpstat.tcps_rcvpackafterwin++;
 402fc10:	008101b4 	movhi	r2,1030
 402fc14:	10a37804 	addi	r2,r2,-29216
 402fc18:	10802517 	ldw	r2,148(r2)
 402fc1c:	10c00044 	addi	r3,r2,1
 402fc20:	008101b4 	movhi	r2,1030
 402fc24:	10a37804 	addi	r2,r2,-29216
 402fc28:	10c02515 	stw	r3,148(r2)
      if (todrop >= (int)ti->ti_len) 
 402fc2c:	e0bfed17 	ldw	r2,-76(fp)
 402fc30:	1080028b 	ldhu	r2,10(r2)
 402fc34:	10ffffcc 	andi	r3,r2,65535
 402fc38:	e0bfe417 	ldw	r2,-112(fp)
 402fc3c:	10c03e16 	blt	r2,r3,402fd38 <tcp_input+0x15a8>
      {
         tcpstat.tcps_rcvbyteafterwin += ti->ti_len;
 402fc40:	008101b4 	movhi	r2,1030
 402fc44:	10a37804 	addi	r2,r2,-29216
 402fc48:	10c02617 	ldw	r3,152(r2)
 402fc4c:	e0bfed17 	ldw	r2,-76(fp)
 402fc50:	1080028b 	ldhu	r2,10(r2)
 402fc54:	10bfffcc 	andi	r2,r2,65535
 402fc58:	1887883a 	add	r3,r3,r2
 402fc5c:	008101b4 	movhi	r2,1030
 402fc60:	10a37804 	addi	r2,r2,-29216
 402fc64:	10c02615 	stw	r3,152(r2)
          * If a new connection request is received
          * while in TIME_WAIT, drop the old connection
          * and start over if the sequence numbers
          * are above the previous ones.
          */
         if (tiflags & TH_SYN &&
 402fc68:	e0bfe617 	ldw	r2,-104(fp)
 402fc6c:	1080008c 	andi	r2,r2,2
 402fc70:	1005003a 	cmpeq	r2,r2,zero
 402fc74:	1000191e 	bne	r2,zero,402fcdc <tcp_input+0x154c>
 402fc78:	e0bfe717 	ldw	r2,-100(fp)
 402fc7c:	10800217 	ldw	r2,8(r2)
 402fc80:	10800298 	cmpnei	r2,r2,10
 402fc84:	1000151e 	bne	r2,zero,402fcdc <tcp_input+0x154c>
 402fc88:	e0bfed17 	ldw	r2,-76(fp)
 402fc8c:	10c00617 	ldw	r3,24(r2)
 402fc90:	e0bfe717 	ldw	r2,-100(fp)
 402fc94:	10801617 	ldw	r2,88(r2)
 402fc98:	1885c83a 	sub	r2,r3,r2
 402fc9c:	10800050 	cmplti	r2,r2,1
 402fca0:	10000e1e 	bne	r2,zero,402fcdc <tcp_input+0x154c>
             tp->t_state == TCPS_TIME_WAIT &&
             SEQ_GT(ti->ti_seq, tp->rcv_nxt)) 
         {
            iss = (tcp_seq)(tp->rcv_nxt + (TCP_ISSINCR));
 402fca4:	e0bfe717 	ldw	r2,-100(fp)
 402fca8:	10c01617 	ldw	r3,88(r2)
 402fcac:	008000b4 	movhi	r2,2
 402fcb0:	10bd3fc4 	addi	r2,r2,-2817
 402fcb4:	1885883a 	add	r2,r3,r2
 402fcb8:	e0bfdf15 	stw	r2,-132(fp)
            if (iss & 0xff000000)
 402fcbc:	e0bfdf17 	ldw	r2,-132(fp)
 402fcc0:	10bfc02c 	andhi	r2,r2,65280
 402fcc4:	1005003a 	cmpeq	r2,r2,zero
 402fcc8:	1000011e 	bne	r2,zero,402fcd0 <tcp_input+0x1540>
            {
               iss = 0L;
 402fccc:	e03fdf15 	stw	zero,-132(fp)
            }
            (void) tcp_close(tp);
 402fcd0:	e13fe717 	ldw	r4,-100(fp)
 402fcd4:	4032e8c0 	call	4032e8c <tcp_close>
            goto findpcb;
 402fcd8:	003b8d06 	br	402eb10 <tcp_input+0x380>
          * window edge, and have to drop data and PUSH from
          * incoming segments.  Continue processing, but
          * remember to ack.  Otherwise, drop segment
          * and ack.
          */
         if ((tp->rcv_wnd == 0) && (ti->ti_seq == tp->rcv_nxt))
 402fcdc:	e0bfe717 	ldw	r2,-100(fp)
 402fce0:	10801517 	ldw	r2,84(r2)
 402fce4:	1004c03a 	cmpne	r2,r2,zero
 402fce8:	1003971e 	bne	r2,zero,4030b48 <tcp_input+0x23b8>
 402fcec:	e0bfed17 	ldw	r2,-76(fp)
 402fcf0:	10c00617 	ldw	r3,24(r2)
 402fcf4:	e0bfe717 	ldw	r2,-100(fp)
 402fcf8:	10801617 	ldw	r2,88(r2)
 402fcfc:	1883921e 	bne	r3,r2,4030b48 <tcp_input+0x23b8>
         {
            tp->t_flags |= TF_ACKNOW;
 402fd00:	e0bfe717 	ldw	r2,-100(fp)
 402fd04:	10800b0b 	ldhu	r2,44(r2)
 402fd08:	10800054 	ori	r2,r2,1
 402fd0c:	1007883a 	mov	r3,r2
 402fd10:	e0bfe717 	ldw	r2,-100(fp)
 402fd14:	10c00b0d 	sth	r3,44(r2)
            tcpstat.tcps_rcvwinprobe++;
 402fd18:	008101b4 	movhi	r2,1030
 402fd1c:	10a37804 	addi	r2,r2,-29216
 402fd20:	10802817 	ldw	r2,160(r2)
 402fd24:	10c00044 	addi	r3,r2,1
 402fd28:	008101b4 	movhi	r2,1030
 402fd2c:	10a37804 	addi	r2,r2,-29216
 402fd30:	10c02815 	stw	r3,160(r2)
 402fd34:	00000806 	br	402fd58 <tcp_input+0x15c8>
         } else
            goto dropafterack;
      } else
         tcpstat.tcps_rcvbyteafterwin += todrop;
 402fd38:	008101b4 	movhi	r2,1030
 402fd3c:	10a37804 	addi	r2,r2,-29216
 402fd40:	10c02617 	ldw	r3,152(r2)
 402fd44:	e0bfe417 	ldw	r2,-112(fp)
 402fd48:	1887883a 	add	r3,r3,r2
 402fd4c:	008101b4 	movhi	r2,1030
 402fd50:	10a37804 	addi	r2,r2,-29216
 402fd54:	10c02615 	stw	r3,152(r2)
      /* XXX work around m_adj bug */
      if (m->m_len) 
 402fd58:	e0bff017 	ldw	r2,-64(fp)
 402fd5c:	10800217 	ldw	r2,8(r2)
 402fd60:	1005003a 	cmpeq	r2,r2,zero
 402fd64:	1000051e 	bne	r2,zero,402fd7c <tcp_input+0x15ec>
      {
         m_adj(m, -todrop);
 402fd68:	e0bfe417 	ldw	r2,-112(fp)
 402fd6c:	008bc83a 	sub	r5,zero,r2
 402fd70:	e13ff017 	ldw	r4,-64(fp)
 402fd74:	4026ff80 	call	4026ff8 <m_adj>
 402fd78:	00000506 	br	402fd90 <tcp_input+0x1600>
      }
      else 
      {
         /* skip tcp/ip header in first mbuf */
         m_adj(m->m_next, -todrop);
 402fd7c:	e0bff017 	ldw	r2,-64(fp)
 402fd80:	11000617 	ldw	r4,24(r2)
 402fd84:	e0bfe417 	ldw	r2,-112(fp)
 402fd88:	008bc83a 	sub	r5,zero,r2
 402fd8c:	4026ff80 	call	4026ff8 <m_adj>
      }
      ti->ti_len -= (u_short)todrop;
 402fd90:	e0bfed17 	ldw	r2,-76(fp)
 402fd94:	10c0028b 	ldhu	r3,10(r2)
 402fd98:	e0bfe417 	ldw	r2,-112(fp)
 402fd9c:	1885c83a 	sub	r2,r3,r2
 402fda0:	1007883a 	mov	r3,r2
 402fda4:	e0bfed17 	ldw	r2,-76(fp)
 402fda8:	10c0028d 	sth	r3,10(r2)
      tiflags &= ~(TH_PUSH|TH_FIN);
 402fdac:	e0ffe617 	ldw	r3,-104(fp)
 402fdb0:	00bffd84 	movi	r2,-10
 402fdb4:	1884703a 	and	r2,r3,r2
 402fdb8:	e0bfe615 	stw	r2,-104(fp)
      tiflags &= ~TH_RST;  /* clear reset flag */
      goto dropafterack;   /* send an ack and drop current packet */
   }
#endif /* DOS_RST */

   if (tiflags&TH_RST) 
 402fdbc:	e0bfe617 	ldw	r2,-104(fp)
 402fdc0:	1080010c 	andi	r2,r2,4
 402fdc4:	1005003a 	cmpeq	r2,r2,zero
 402fdc8:	1000391e 	bne	r2,zero,402feb0 <tcp_input+0x1720>
   {
      switch (tp->t_state) 
 402fdcc:	e0bfe717 	ldw	r2,-100(fp)
 402fdd0:	10800217 	ldw	r2,8(r2)
 402fdd4:	10bfff44 	addi	r2,r2,-3
 402fdd8:	e0bffe15 	stw	r2,-8(fp)
 402fddc:	e13ffe17 	ldw	r4,-8(fp)
 402fde0:	20800228 	cmpgeui	r2,r4,8
 402fde4:	1000321e 	bne	r2,zero,402feb0 <tcp_input+0x1720>
 402fde8:	e0fffe17 	ldw	r3,-8(fp)
 402fdec:	e0fffe17 	ldw	r3,-8(fp)
 402fdf0:	18c5883a 	add	r2,r3,r3
 402fdf4:	1087883a 	add	r3,r2,r2
 402fdf8:	008100f4 	movhi	r2,1027
 402fdfc:	10bf8304 	addi	r2,r2,-500
 402fe00:	1885883a 	add	r2,r3,r2
 402fe04:	10800017 	ldw	r2,0(r2)
 402fe08:	1000683a 	jmp	r2
 402fe0c:	0402fe2c 	andhi	r16,zero,3064
 402fe10:	0402fe3c 	xorhi	r16,zero,3064
 402fe14:	0402fe58 	cmpnei	r16,zero,3065
 402fe18:	0402fe58 	cmpnei	r16,zero,3065
 402fe1c:	0402fe9c 	xori	r16,zero,3066
 402fe20:	0402fe9c 	xori	r16,zero,3066
 402fe24:	0402fe58 	cmpnei	r16,zero,3065
 402fe28:	0402fe9c 	xori	r16,zero,3066
      {
   
      case TCPS_SYN_RECEIVED:
         so->so_error = ECONNREFUSED;
 402fe2c:	e0ffe517 	ldw	r3,-108(fp)
 402fe30:	00801bc4 	movi	r2,111
 402fe34:	18800615 	stw	r2,24(r3)
         goto close;
 402fe38:	00000a06 	br	402fe64 <tcp_input+0x16d4>
   
      case TCPS_ESTABLISHED:
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 402fe3c:	008101b4 	movhi	r2,1030
 402fe40:	10a34a04 	addi	r2,r2,-29400
 402fe44:	10800717 	ldw	r2,28(r2)
 402fe48:	10c00044 	addi	r3,r2,1
 402fe4c:	008101b4 	movhi	r2,1030
 402fe50:	10a34a04 	addi	r2,r2,-29400
 402fe54:	10c00715 	stw	r3,28(r2)
      case TCPS_FIN_WAIT_1:
      case TCPS_FIN_WAIT_2:
      case TCPS_CLOSE_WAIT:
         so->so_error = ECONNRESET;
 402fe58:	e0ffe517 	ldw	r3,-108(fp)
 402fe5c:	00801a04 	movi	r2,104
 402fe60:	18800615 	stw	r2,24(r3)
         close:
         tp->t_state = TCPS_CLOSED;
 402fe64:	e0bfe717 	ldw	r2,-100(fp)
 402fe68:	10000215 	stw	zero,8(r2)
         tcpstat.tcps_drops++;
 402fe6c:	008101b4 	movhi	r2,1030
 402fe70:	10a37804 	addi	r2,r2,-29216
 402fe74:	10800317 	ldw	r2,12(r2)
 402fe78:	10c00044 	addi	r3,r2,1
 402fe7c:	008101b4 	movhi	r2,1030
 402fe80:	10a37804 	addi	r2,r2,-29216
 402fe84:	10c00315 	stw	r3,12(r2)
         SETTP(tp, tcp_close(tp));
 402fe88:	e13fe717 	ldw	r4,-100(fp)
 402fe8c:	4032e8c0 	call	4032e8c <tcp_close>
#ifdef TCP_ZEROCOPY
         if (so->rx_upcall)
            so->rx_upcall(so, NULL, ECONNRESET);
#endif   /* TCP_ZEROCOPY */
         GOTO_DROP;
 402fe90:	00812204 	movi	r2,1160
 402fe94:	d0a83015 	stw	r2,-24384(gp)
 402fe98:	00038106 	br	4030ca0 <tcp_input+0x2510>
   
      case TCPS_CLOSING:
      case TCPS_LAST_ACK:
      case TCPS_TIME_WAIT:
         SETTP(tp, tcp_close(tp));
 402fe9c:	e13fe717 	ldw	r4,-100(fp)
 402fea0:	4032e8c0 	call	4032e8c <tcp_close>
         GOTO_DROP;
 402fea4:	00812384 	movi	r2,1166
 402fea8:	d0a83015 	stw	r2,-24384(gp)
 402feac:	00037c06 	br	4030ca0 <tcp_input+0x2510>
     tcp_trace("rcvd SYN in established state - ignoring SYN.\n");
#endif
      GOTO_DROP;
   }
#else
   if (tiflags & TH_SYN) 
 402feb0:	e0bfe617 	ldw	r2,-104(fp)
 402feb4:	1080008c 	andi	r2,r2,2
 402feb8:	1005003a 	cmpeq	r2,r2,zero
 402febc:	1000071e 	bne	r2,zero,402fedc <tcp_input+0x174c>
   {
      tp = tcp_drop(tp, ECONNRESET);
 402fec0:	e13fe717 	ldw	r4,-100(fp)
 402fec4:	01401a04 	movi	r5,104
 402fec8:	4032de00 	call	4032de0 <tcp_drop>
 402fecc:	e0bfe715 	stw	r2,-100(fp)
      GOTO_DROPWITHRESET;
 402fed0:	00812b04 	movi	r2,1196
 402fed4:	d0a83015 	stw	r2,-24384(gp)
 402fed8:	00032d06 	br	4030b90 <tcp_input+0x2400>
#endif /* end of else of DOS_SYN */

   /*
    * If the ACK bit is off we drop the segment and return.
    */
   if ((tiflags & TH_ACK) == 0)
 402fedc:	e0bfe617 	ldw	r2,-104(fp)
 402fee0:	1080040c 	andi	r2,r2,16
 402fee4:	1004c03a 	cmpne	r2,r2,zero
 402fee8:	1000031e 	bne	r2,zero,402fef8 <tcp_input+0x1768>
      GOTO_DROP;
 402feec:	00812d04 	movi	r2,1204
 402fef0:	d0a83015 	stw	r2,-24384(gp)
 402fef4:	00036a06 	br	4030ca0 <tcp_input+0x2510>

   /*
    * Ack processing.
    */
   switch (tp->t_state) 
 402fef8:	e0bfe717 	ldw	r2,-100(fp)
 402fefc:	10800217 	ldw	r2,8(r2)
 402ff00:	e0bff715 	stw	r2,-36(fp)
 402ff04:	e13ff717 	ldw	r4,-36(fp)
 402ff08:	208000e0 	cmpeqi	r2,r4,3
 402ff0c:	1000071e 	bne	r2,zero,402ff2c <tcp_input+0x179c>
 402ff10:	e0fff717 	ldw	r3,-36(fp)
 402ff14:	188000d0 	cmplti	r2,r3,3
 402ff18:	1001921e 	bne	r2,zero,4030564 <tcp_input+0x1dd4>
 402ff1c:	e13ff717 	ldw	r4,-36(fp)
 402ff20:	208002c8 	cmpgei	r2,r4,11
 402ff24:	10018f1e 	bne	r2,zero,4030564 <tcp_input+0x1dd4>
 402ff28:	00003206 	br	402fff4 <tcp_input+0x1864>
    * In SYN_RECEIVED state if the ack ACKs our SYN then enter
    * ESTABLISHED state and continue processing, otherwise
    * send an RST.
    */
   case TCPS_SYN_RECEIVED:
      if (SEQ_GT(tp->snd_una, ti->ti_ack) ||
 402ff2c:	e0bfe717 	ldw	r2,-100(fp)
 402ff30:	10c00e17 	ldw	r3,56(r2)
 402ff34:	e0bfed17 	ldw	r2,-76(fp)
 402ff38:	10800717 	ldw	r2,28(r2)
 402ff3c:	1885c83a 	sub	r2,r3,r2
 402ff40:	10800048 	cmpgei	r2,r2,1
 402ff44:	1000071e 	bne	r2,zero,402ff64 <tcp_input+0x17d4>
 402ff48:	e0bfed17 	ldw	r2,-76(fp)
 402ff4c:	10c00717 	ldw	r3,28(r2)
 402ff50:	e0bfe717 	ldw	r2,-100(fp)
 402ff54:	10801a17 	ldw	r2,104(r2)
 402ff58:	1885c83a 	sub	r2,r3,r2
 402ff5c:	10800050 	cmplti	r2,r2,1
 402ff60:	10000a1e 	bne	r2,zero,402ff8c <tcp_input+0x17fc>
          SEQ_GT(ti->ti_ack, tp->snd_max))
      {
         TCP_MIB_INC(tcpEstabResets);     /* keep MIB stats */
 402ff64:	008101b4 	movhi	r2,1030
 402ff68:	10a34a04 	addi	r2,r2,-29400
 402ff6c:	10800717 	ldw	r2,28(r2)
 402ff70:	10c00044 	addi	r3,r2,1
 402ff74:	008101b4 	movhi	r2,1030
 402ff78:	10a34a04 	addi	r2,r2,-29400
 402ff7c:	10c00715 	stw	r3,28(r2)
         GOTO_DROPWITHRESET;
 402ff80:	00813184 	movi	r2,1222
 402ff84:	d0a83015 	stw	r2,-24384(gp)
 402ff88:	00030106 	br	4030b90 <tcp_input+0x2400>
      }
      tcpstat.tcps_connects++;
 402ff8c:	008101b4 	movhi	r2,1030
 402ff90:	10a37804 	addi	r2,r2,-29216
 402ff94:	10800217 	ldw	r2,8(r2)
 402ff98:	10c00044 	addi	r3,r2,1
 402ff9c:	008101b4 	movhi	r2,1030
 402ffa0:	10a37804 	addi	r2,r2,-29216
 402ffa4:	10c00215 	stw	r3,8(r2)
      tp->t_state = TCPS_ESTABLISHED;
 402ffa8:	e0ffe717 	ldw	r3,-100(fp)
 402ffac:	00800104 	movi	r2,4
 402ffb0:	18800215 	stw	r2,8(r3)
      soisconnected(so);
 402ffb4:	e13fe517 	ldw	r4,-108(fp)
 402ffb8:	402c7c80 	call	402c7c8 <soisconnected>
      tp->t_maxseg = tcp_mss(so);
 402ffbc:	e13fe517 	ldw	r4,-108(fp)
 402ffc0:	40312540 	call	4031254 <tcp_mss>
 402ffc4:	1007883a 	mov	r3,r2
 402ffc8:	e0bfe717 	ldw	r2,-100(fp)
 402ffcc:	10c00a0d 	sth	r3,40(r2)
      (void) tcp_reass(tp, (struct tcpiphdr *)0, m);
 402ffd0:	e13fe717 	ldw	r4,-100(fp)
 402ffd4:	000b883a 	mov	r5,zero
 402ffd8:	e1bff017 	ldw	r6,-64(fp)
 402ffdc:	402e3880 	call	402e388 <tcp_reass>
      tp->snd_wl1 = ti->ti_seq - 1;
 402ffe0:	e0bfed17 	ldw	r2,-76(fp)
 402ffe4:	10800617 	ldw	r2,24(r2)
 402ffe8:	10ffffc4 	addi	r3,r2,-1
 402ffec:	e0bfe717 	ldw	r2,-100(fp)
 402fff0:	10c01115 	stw	r3,68(r2)
   case TCPS_CLOSE_WAIT:
   case TCPS_CLOSING:
   case TCPS_LAST_ACK:
   case TCPS_TIME_WAIT:

      if (SEQ_LEQ(ti->ti_ack, tp->snd_una)) 
 402fff4:	e0bfed17 	ldw	r2,-76(fp)
 402fff8:	10c00717 	ldw	r3,28(r2)
 402fffc:	e0bfe717 	ldw	r2,-100(fp)
 4030000:	10800e17 	ldw	r2,56(r2)
 4030004:	1885c83a 	sub	r2,r3,r2
 4030008:	10800048 	cmpgei	r2,r2,1
 403000c:	1000671e 	bne	r2,zero,40301ac <tcp_input+0x1a1c>
      {
         if (ti->ti_len == 0 && rx_win == tp->snd_wnd) 
 4030010:	e0bfed17 	ldw	r2,-76(fp)
 4030014:	1080028b 	ldhu	r2,10(r2)
 4030018:	10bfffcc 	andi	r2,r2,65535
 403001c:	1004c03a 	cmpne	r2,r2,zero
 4030020:	10005f1e 	bne	r2,zero,40301a0 <tcp_input+0x1a10>
 4030024:	e0bfe717 	ldw	r2,-100(fp)
 4030028:	10c01417 	ldw	r3,80(r2)
 403002c:	e0bfde17 	ldw	r2,-136(fp)
 4030030:	18805b1e 	bne	r3,r2,40301a0 <tcp_input+0x1a10>
         {
            tcpstat.tcps_rcvdupack++;
 4030034:	008101b4 	movhi	r2,1030
 4030038:	10a37804 	addi	r2,r2,-29216
 403003c:	10802917 	ldw	r2,164(r2)
 4030040:	10c00044 	addi	r3,r2,1
 4030044:	008101b4 	movhi	r2,1030
 4030048:	10a37804 	addi	r2,r2,-29216
 403004c:	10c02915 	stw	r3,164(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 4030050:	e0bfe717 	ldw	r2,-100(fp)
 4030054:	10800317 	ldw	r2,12(r2)
 4030058:	1005003a 	cmpeq	r2,r2,zero
 403005c:	1000051e 	bne	r2,zero,4030074 <tcp_input+0x18e4>
 4030060:	e0bfed17 	ldw	r2,-76(fp)
 4030064:	10c00717 	ldw	r3,28(r2)
 4030068:	e0bfe717 	ldw	r2,-100(fp)
 403006c:	10800e17 	ldw	r2,56(r2)
 4030070:	18800326 	beq	r3,r2,4030080 <tcp_input+0x18f0>
                ti->ti_ack != tp->snd_una)
            {
               tp->t_dupacks = 0;
 4030074:	e0bfe717 	ldw	r2,-100(fp)
 4030078:	10000915 	stw	zero,36(r2)
             * ack and the exp-to-linear thresh
             * set for half the current window
             * size (since we know we're losing at
             * the current window size).
             */
            if (tp->t_timer[TCPT_REXMT] == 0 ||
 403007c:	00013906 	br	4030564 <tcp_input+0x1dd4>
                ti->ti_ack != tp->snd_una)
            {
               tp->t_dupacks = 0;
            }
            else if (++tp->t_dupacks == tcprexmtthresh) 
 4030080:	e0bfe717 	ldw	r2,-100(fp)
 4030084:	10800917 	ldw	r2,36(r2)
 4030088:	10c00044 	addi	r3,r2,1
 403008c:	e0bfe717 	ldw	r2,-100(fp)
 4030090:	10c00915 	stw	r3,36(r2)
 4030094:	e0bfe717 	ldw	r2,-100(fp)
 4030098:	10c00917 	ldw	r3,36(r2)
 403009c:	d0a03983 	ldbu	r2,-32538(gp)
 40300a0:	10803fcc 	andi	r2,r2,255
 40300a4:	1080201c 	xori	r2,r2,128
 40300a8:	10bfe004 	addi	r2,r2,-128
 40300ac:	18812d1e 	bne	r3,r2,4030564 <tcp_input+0x1dd4>
            {
               tcp_seq onxt = tp->snd_nxt;
 40300b0:	e0bfe717 	ldw	r2,-100(fp)
 40300b4:	10800f17 	ldw	r2,60(r2)
 40300b8:	e0bfd715 	stw	r2,-164(fp)
               u_short  win   =
               MIN(tp->snd_wnd, tp->snd_cwnd) / 2 /
               tp->t_maxseg;
 40300bc:	e0bfe717 	ldw	r2,-100(fp)
 40300c0:	10c01417 	ldw	r3,80(r2)
 40300c4:	e0bfe717 	ldw	r2,-100(fp)
 40300c8:	10801b17 	ldw	r2,108(r2)
 40300cc:	e0bff615 	stw	r2,-40(fp)
 40300d0:	e0fff515 	stw	r3,-44(fp)
 40300d4:	e0bff617 	ldw	r2,-40(fp)
 40300d8:	e0fff517 	ldw	r3,-44(fp)
 40300dc:	10c0022e 	bgeu	r2,r3,40300e8 <tcp_input+0x1958>
 40300e0:	e13ff617 	ldw	r4,-40(fp)
 40300e4:	e13ff515 	stw	r4,-44(fp)
 40300e8:	e0bff517 	ldw	r2,-44(fp)
 40300ec:	1006d07a 	srli	r3,r2,1
 40300f0:	e0bfe717 	ldw	r2,-100(fp)
 40300f4:	10800a0b 	ldhu	r2,40(r2)
 40300f8:	10bfffcc 	andi	r2,r2,65535
 40300fc:	1885203a 	divu	r2,r3,r2
 4030100:	e0bfd60d 	sth	r2,-168(fp)

               if (win < 2)
 4030104:	e0bfd60b 	ldhu	r2,-168(fp)
 4030108:	108000a8 	cmpgeui	r2,r2,2
 403010c:	1000021e 	bne	r2,zero,4030118 <tcp_input+0x1988>
                  win = 2;
 4030110:	00800084 	movi	r2,2
 4030114:	e0bfd60d 	sth	r2,-168(fp)
               tp->snd_ssthresh = (u_short)(win * tp->t_maxseg);
 4030118:	e0bfe717 	ldw	r2,-100(fp)
 403011c:	10c00a0b 	ldhu	r3,40(r2)
 4030120:	e0bfd60b 	ldhu	r2,-168(fp)
 4030124:	1885383a 	mul	r2,r3,r2
 4030128:	10ffffcc 	andi	r3,r2,65535
 403012c:	e0bfe717 	ldw	r2,-100(fp)
 4030130:	10c01c15 	stw	r3,112(r2)

               tp->t_timer[TCPT_REXMT] = 0;
 4030134:	e0bfe717 	ldw	r2,-100(fp)
 4030138:	10000315 	stw	zero,12(r2)
               tp->t_rttick = 0;
 403013c:	e0bfe717 	ldw	r2,-100(fp)
 4030140:	10001e15 	stw	zero,120(r2)
               tp->snd_nxt = ti->ti_ack;
 4030144:	e0bfed17 	ldw	r2,-76(fp)
 4030148:	10c00717 	ldw	r3,28(r2)
 403014c:	e0bfe717 	ldw	r2,-100(fp)
 4030150:	10c00f15 	stw	r3,60(r2)
               tp->snd_cwnd = tp->t_maxseg;
 4030154:	e0bfe717 	ldw	r2,-100(fp)
 4030158:	10800a0b 	ldhu	r2,40(r2)
 403015c:	10ffffcc 	andi	r3,r2,65535
 4030160:	e0bfe717 	ldw	r2,-100(fp)
 4030164:	10c01b15 	stw	r3,108(r2)
               (void) tcp_output(tp);
 4030168:	e13fe717 	ldw	r4,-100(fp)
 403016c:	40313700 	call	4031370 <tcp_output>

               if (SEQ_GT(onxt, tp->snd_nxt))
 4030170:	e0bfe717 	ldw	r2,-100(fp)
 4030174:	10c00f17 	ldw	r3,60(r2)
 4030178:	e0bfd717 	ldw	r2,-164(fp)
 403017c:	10c5c83a 	sub	r2,r2,r3
 4030180:	10800050 	cmplti	r2,r2,1
 4030184:	1000031e 	bne	r2,zero,4030194 <tcp_input+0x1a04>
                  tp->snd_nxt = onxt;
 4030188:	e0ffe717 	ldw	r3,-100(fp)
 403018c:	e0bfd717 	ldw	r2,-164(fp)
 4030190:	18800f15 	stw	r2,60(r3)
               GOTO_DROP;
 4030194:	00814544 	movi	r2,1301
 4030198:	d0a83015 	stw	r2,-24384(gp)
 403019c:	0002c006 	br	4030ca0 <tcp_input+0x2510>
            }
         } else
            tp->t_dupacks = 0;
 40301a0:	e0bfe717 	ldw	r2,-100(fp)
 40301a4:	10000915 	stw	zero,36(r2)
         break;
 40301a8:	0000ee06 	br	4030564 <tcp_input+0x1dd4>
      }
      tp->t_dupacks = 0;
 40301ac:	e0bfe717 	ldw	r2,-100(fp)
 40301b0:	10000915 	stw	zero,36(r2)
      if (SEQ_GT(ti->ti_ack, tp->snd_max)) 
 40301b4:	e0bfed17 	ldw	r2,-76(fp)
 40301b8:	10c00717 	ldw	r3,28(r2)
 40301bc:	e0bfe717 	ldw	r2,-100(fp)
 40301c0:	10801a17 	ldw	r2,104(r2)
 40301c4:	1885c83a 	sub	r2,r3,r2
 40301c8:	10800050 	cmplti	r2,r2,1
 40301cc:	1000081e 	bne	r2,zero,40301f0 <tcp_input+0x1a60>
      {
         tcpstat.tcps_rcvacktoomuch++;
 40301d0:	008101b4 	movhi	r2,1030
 40301d4:	10a37804 	addi	r2,r2,-29216
 40301d8:	10802a17 	ldw	r2,168(r2)
 40301dc:	10c00044 	addi	r3,r2,1
 40301e0:	008101b4 	movhi	r2,1030
 40301e4:	10a37804 	addi	r2,r2,-29216
 40301e8:	10c02a15 	stw	r3,168(r2)
         goto dropafterack;
 40301ec:	00025606 	br	4030b48 <tcp_input+0x23b8>
      }
      acked = (int)(ti->ti_ack - tp->snd_una);
 40301f0:	e0bfed17 	ldw	r2,-76(fp)
 40301f4:	10c00717 	ldw	r3,28(r2)
 40301f8:	e0bfe717 	ldw	r2,-100(fp)
 40301fc:	10800e17 	ldw	r2,56(r2)
 4030200:	1885c83a 	sub	r2,r3,r2
 4030204:	e0bfe315 	stw	r2,-116(fp)
      tcpstat.tcps_rcvackpack++;
 4030208:	008101b4 	movhi	r2,1030
 403020c:	10a37804 	addi	r2,r2,-29216
 4030210:	10802b17 	ldw	r2,172(r2)
 4030214:	10c00044 	addi	r3,r2,1
 4030218:	008101b4 	movhi	r2,1030
 403021c:	10a37804 	addi	r2,r2,-29216
 4030220:	10c02b15 	stw	r3,172(r2)
      tcpstat.tcps_rcvackbyte += acked;
 4030224:	008101b4 	movhi	r2,1030
 4030228:	10a37804 	addi	r2,r2,-29216
 403022c:	10c02c17 	ldw	r3,176(r2)
 4030230:	e0bfe317 	ldw	r2,-116(fp)
 4030234:	1887883a 	add	r3,r3,r2
 4030238:	008101b4 	movhi	r2,1030
 403023c:	10a37804 	addi	r2,r2,-29216
 4030240:	10c02c15 	stw	r3,176(r2)
       * number was acked, update smoothed round trip time.
       * Since we now have an rtt measurement, cancel the
       * timer backoff (cf., Phil Karn's retransmit alg.).
       * Recompute the initial retransmit timer.
       */
      if((tp->t_rttick) && 
 4030244:	e0bfe717 	ldw	r2,-100(fp)
 4030248:	10801e17 	ldw	r2,120(r2)
 403024c:	1005003a 	cmpeq	r2,r2,zero
 4030250:	1000091e 	bne	r2,zero,4030278 <tcp_input+0x1ae8>
 4030254:	e0bfed17 	ldw	r2,-76(fp)
 4030258:	10c00717 	ldw	r3,28(r2)
 403025c:	e0bfe717 	ldw	r2,-100(fp)
 4030260:	10801f17 	ldw	r2,124(r2)
 4030264:	1885c83a 	sub	r2,r3,r2
 4030268:	10800050 	cmplti	r2,r2,1
 403026c:	1000021e 	bne	r2,zero,4030278 <tcp_input+0x1ae8>
#ifdef TCP_TIMESTAMP
         ((tp->t_flags & TF_TIMESTAMP) == 0) && 
#endif /* TCP_TIMESTAMP */
         (SEQ_GT(ti->ti_ack, tp->t_rtseq)))
         tcp_xmit_timer(tp);
 4030270:	e13fe717 	ldw	r4,-100(fp)
 4030274:	4030fa00 	call	4030fa0 <tcp_xmit_timer>
       * If all outstanding data is acked, stop retransmit
       * timer and remember to restart (more output or persist).
       * If there is more data to be acked, restart retransmit
       * timer, using current (possibly backed-off) value.
       */
      if (ti->ti_ack == tp->snd_max) 
 4030278:	e0bfed17 	ldw	r2,-76(fp)
 403027c:	10c00717 	ldw	r3,28(r2)
 4030280:	e0bfe717 	ldw	r2,-100(fp)
 4030284:	10801a17 	ldw	r2,104(r2)
 4030288:	1880051e 	bne	r3,r2,40302a0 <tcp_input+0x1b10>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 403028c:	e0bfe717 	ldw	r2,-100(fp)
 4030290:	10000315 	stw	zero,12(r2)
         needoutput = 1;
 4030294:	00800044 	movi	r2,1
 4030298:	e0bfe115 	stw	r2,-124(fp)
 403029c:	00000806 	br	40302c0 <tcp_input+0x1b30>
      } else if (tp->t_timer[TCPT_PERSIST] == 0)
 40302a0:	e0bfe717 	ldw	r2,-100(fp)
 40302a4:	10800417 	ldw	r2,16(r2)
 40302a8:	1004c03a 	cmpne	r2,r2,zero
 40302ac:	1000041e 	bne	r2,zero,40302c0 <tcp_input+0x1b30>
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 40302b0:	e0bfe717 	ldw	r2,-100(fp)
 40302b4:	10c00817 	ldw	r3,32(r2)
 40302b8:	e0bfe717 	ldw	r2,-100(fp)
 40302bc:	10c00315 	stw	r3,12(r2)
       * in flight, open exponentially (maxseg per packet).
       * Otherwise open linearly (maxseg per window,
       * or maxseg^2 / cwnd per packet).
       */
      {
         tcp_win  cw =  tp->snd_cwnd;
 40302c0:	e0bfe717 	ldw	r2,-100(fp)
 40302c4:	10801b17 	ldw	r2,108(r2)
 40302c8:	e0bfd515 	stw	r2,-172(fp)
         u_short  incr  =  tp->t_maxseg;
 40302cc:	e0bfe717 	ldw	r2,-100(fp)
 40302d0:	10800a0b 	ldhu	r2,40(r2)
 40302d4:	e0bfd40d 	sth	r2,-176(fp)

         if (cw > tp->snd_ssthresh)
 40302d8:	e0bfe717 	ldw	r2,-100(fp)
 40302dc:	10c01c17 	ldw	r3,112(r2)
 40302e0:	e0bfd517 	ldw	r2,-172(fp)
 40302e4:	18800e2e 	bgeu	r3,r2,4030320 <tcp_input+0x1b90>
            incr = MAX( (incr * incr / cw), (ALIGN_TYPE << 2) );
 40302e8:	e0ffd40b 	ldhu	r3,-176(fp)
 40302ec:	e0bfd40b 	ldhu	r2,-176(fp)
 40302f0:	1885383a 	mul	r2,r3,r2
 40302f4:	1007883a 	mov	r3,r2
 40302f8:	e0bfd517 	ldw	r2,-172(fp)
 40302fc:	1885203a 	divu	r2,r3,r2
 4030300:	e0bff415 	stw	r2,-48(fp)
 4030304:	e0fff417 	ldw	r3,-48(fp)
 4030308:	18800428 	cmpgeui	r2,r3,16
 403030c:	1000021e 	bne	r2,zero,4030318 <tcp_input+0x1b88>
 4030310:	01000404 	movi	r4,16
 4030314:	e13ff415 	stw	r4,-48(fp)
 4030318:	e0bff417 	ldw	r2,-48(fp)
 403031c:	e0bfd40d 	sth	r2,-176(fp)

         tp->snd_cwnd = MIN(cw + (u_short)incr, (IP_MAXPACKET));
 4030320:	e0ffd40b 	ldhu	r3,-176(fp)
 4030324:	e0bfd517 	ldw	r2,-172(fp)
 4030328:	1885883a 	add	r2,r3,r2
 403032c:	e0bff315 	stw	r2,-52(fp)
 4030330:	e0fff317 	ldw	r3,-52(fp)
 4030334:	18980070 	cmpltui	r2,r3,24577
 4030338:	1000021e 	bne	r2,zero,4030344 <tcp_input+0x1bb4>
 403033c:	01180004 	movi	r4,24576
 4030340:	e13ff315 	stw	r4,-52(fp)
 4030344:	e0bfe717 	ldw	r2,-100(fp)
 4030348:	e0fff317 	ldw	r3,-52(fp)
 403034c:	10c01b15 	stw	r3,108(r2)
      }
      if (acked > (int)so->so_snd.sb_cc) 
 4030350:	e0bfe517 	ldw	r2,-108(fp)
 4030354:	10801217 	ldw	r2,72(r2)
 4030358:	1007883a 	mov	r3,r2
 403035c:	e0bfe317 	ldw	r2,-116(fp)
 4030360:	1880110e 	bge	r3,r2,40303a8 <tcp_input+0x1c18>
      {
         tp->snd_wnd -= (u_short)so->so_snd.sb_cc;
 4030364:	e0bfe717 	ldw	r2,-100(fp)
 4030368:	10c01417 	ldw	r3,80(r2)
 403036c:	e0bfe517 	ldw	r2,-108(fp)
 4030370:	10801217 	ldw	r2,72(r2)
 4030374:	10bfffcc 	andi	r2,r2,65535
 4030378:	1887c83a 	sub	r3,r3,r2
 403037c:	e0bfe717 	ldw	r2,-100(fp)
 4030380:	10c01415 	stw	r3,80(r2)
         sbdrop(&so->so_snd, (int)so->so_snd.sb_cc);
 4030384:	e0bfe517 	ldw	r2,-108(fp)
 4030388:	11001204 	addi	r4,r2,72
 403038c:	e0bfe517 	ldw	r2,-108(fp)
 4030390:	10801217 	ldw	r2,72(r2)
 4030394:	100b883a 	mov	r5,r2
 4030398:	402d7000 	call	402d700 <sbdrop>
         ourfinisacked = 1;
 403039c:	00800044 	movi	r2,1
 40303a0:	e0bfe215 	stw	r2,-120(fp)
 40303a4:	00000c06 	br	40303d8 <tcp_input+0x1c48>
      } 
      else 
      {
         sbdrop(&so->so_snd, acked);
 40303a8:	e0bfe517 	ldw	r2,-108(fp)
 40303ac:	11001204 	addi	r4,r2,72
 40303b0:	e17fe317 	ldw	r5,-116(fp)
 40303b4:	402d7000 	call	402d700 <sbdrop>
         tp->snd_wnd -= (u_short)acked;
 40303b8:	e0bfe717 	ldw	r2,-100(fp)
 40303bc:	10c01417 	ldw	r3,80(r2)
 40303c0:	e0bfe317 	ldw	r2,-116(fp)
 40303c4:	10bfffcc 	andi	r2,r2,65535
 40303c8:	1887c83a 	sub	r3,r3,r2
 40303cc:	e0bfe717 	ldw	r2,-100(fp)
 40303d0:	10c01415 	stw	r3,80(r2)
         ourfinisacked = 0;
 40303d4:	e03fe215 	stw	zero,-120(fp)
      }

      if (so->so_snd.sb_flags & (SB_WAIT | SB_SEL))
 40303d8:	e0bfe517 	ldw	r2,-108(fp)
 40303dc:	1080190b 	ldhu	r2,100(r2)
 40303e0:	10bfffcc 	andi	r2,r2,65535
 40303e4:	1080030c 	andi	r2,r2,12
 40303e8:	1005003a 	cmpeq	r2,r2,zero
 40303ec:	1000041e 	bne	r2,zero,4030400 <tcp_input+0x1c70>
         sowwakeup(so);
 40303f0:	e0bfe517 	ldw	r2,-108(fp)
 40303f4:	11401204 	addi	r5,r2,72
 40303f8:	e13fe517 	ldw	r4,-108(fp)
 40303fc:	402cf340 	call	402cf34 <sbwakeup>

      tp->snd_una = ti->ti_ack;
 4030400:	e0bfed17 	ldw	r2,-76(fp)
 4030404:	10c00717 	ldw	r3,28(r2)
 4030408:	e0bfe717 	ldw	r2,-100(fp)
 403040c:	10c00e15 	stw	r3,56(r2)
      if (SEQ_LT(tp->snd_nxt, tp->snd_una))
 4030410:	e0bfe717 	ldw	r2,-100(fp)
 4030414:	10c00f17 	ldw	r3,60(r2)
 4030418:	e0bfe717 	ldw	r2,-100(fp)
 403041c:	10800e17 	ldw	r2,56(r2)
 4030420:	1885c83a 	sub	r2,r3,r2
 4030424:	1004403a 	cmpge	r2,r2,zero
 4030428:	1000041e 	bne	r2,zero,403043c <tcp_input+0x1cac>
         tp->snd_nxt = tp->snd_una;
 403042c:	e0bfe717 	ldw	r2,-100(fp)
 4030430:	10c00e17 	ldw	r3,56(r2)
 4030434:	e0bfe717 	ldw	r2,-100(fp)
 4030438:	10c00f15 	stw	r3,60(r2)


      switch (tp->t_state) 
 403043c:	e0bfe717 	ldw	r2,-100(fp)
 4030440:	10800217 	ldw	r2,8(r2)
 4030444:	e0bff215 	stw	r2,-56(fp)
 4030448:	e13ff217 	ldw	r4,-56(fp)
 403044c:	208001e0 	cmpeqi	r2,r4,7
 4030450:	1000221e 	bne	r2,zero,40304dc <tcp_input+0x1d4c>
 4030454:	e0fff217 	ldw	r3,-56(fp)
 4030458:	18800208 	cmpgei	r2,r3,8
 403045c:	1000041e 	bne	r2,zero,4030470 <tcp_input+0x1ce0>
 4030460:	e13ff217 	ldw	r4,-56(fp)
 4030464:	208001a0 	cmpeqi	r2,r4,6
 4030468:	1000081e 	bne	r2,zero,403048c <tcp_input+0x1cfc>
 403046c:	00003d06 	br	4030564 <tcp_input+0x1dd4>
 4030470:	e0fff217 	ldw	r3,-56(fp)
 4030474:	18800220 	cmpeqi	r2,r3,8
 4030478:	10002a1e 	bne	r2,zero,4030524 <tcp_input+0x1d94>
 403047c:	e13ff217 	ldw	r4,-56(fp)
 4030480:	208002a0 	cmpeqi	r2,r4,10
 4030484:	10002f1e 	bne	r2,zero,4030544 <tcp_input+0x1db4>
 4030488:	00003606 	br	4030564 <tcp_input+0x1dd4>
       * In FIN_WAIT_1 STATE in addition to the processing
       * for the ESTABLISHED state if our FIN is now acknowledged
       * then enter FIN_WAIT_2.
       */
      case TCPS_FIN_WAIT_1:
         if (ourfinisacked) 
 403048c:	e0bfe217 	ldw	r2,-120(fp)
 4030490:	1005003a 	cmpeq	r2,r2,zero
 4030494:	1000331e 	bne	r2,zero,4030564 <tcp_input+0x1dd4>
             * data, then closing user can proceed.
             * Starting the timer is contrary to the
             * specification, but if we don't get a FIN
             * we'll hang forever.
             */
            if (so->so_state & SS_CANTRCVMORE) 
 4030498:	e0bfe517 	ldw	r2,-108(fp)
 403049c:	1080088b 	ldhu	r2,34(r2)
 40304a0:	10bfffcc 	andi	r2,r2,65535
 40304a4:	1080080c 	andi	r2,r2,32
 40304a8:	1005003a 	cmpeq	r2,r2,zero
 40304ac:	1000071e 	bne	r2,zero,40304cc <tcp_input+0x1d3c>
            {
               soisdisconnected(so);
 40304b0:	e13fe517 	ldw	r4,-108(fp)
 40304b4:	402c9500 	call	402c950 <soisdisconnected>
               tp->t_timer[TCPT_2MSL] = tcp_maxidle;
 40304b8:	00810174 	movhi	r2,1029
 40304bc:	1081f004 	addi	r2,r2,1984
 40304c0:	10c00017 	ldw	r3,0(r2)
 40304c4:	e0bfe717 	ldw	r2,-100(fp)
 40304c8:	10c00615 	stw	r3,24(r2)
            }
            tp->t_state = TCPS_FIN_WAIT_2;
 40304cc:	e0ffe717 	ldw	r3,-100(fp)
 40304d0:	00800244 	movi	r2,9
 40304d4:	18800215 	stw	r2,8(r3)
         }
         break;
 40304d8:	00002206 	br	4030564 <tcp_input+0x1dd4>
       * the ESTABLISHED state if the ACK acknowledges our FIN
       * then enter the TIME-WAIT state, otherwise ignore
       * the segment.
       */
      case TCPS_CLOSING:
         if (ourfinisacked) 
 40304dc:	e0bfe217 	ldw	r2,-120(fp)
 40304e0:	1005003a 	cmpeq	r2,r2,zero
 40304e4:	10001f1e 	bne	r2,zero,4030564 <tcp_input+0x1dd4>
         {
            tp->t_state = TCPS_TIME_WAIT;
 40304e8:	e0ffe717 	ldw	r3,-100(fp)
 40304ec:	00800284 	movi	r2,10
 40304f0:	18800215 	stw	r2,8(r3)
            tcp_canceltimers(tp);
 40304f4:	e13fe717 	ldw	r4,-100(fp)
 40304f8:	40333580 	call	4033358 <tcp_canceltimers>
            tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 40304fc:	00810174 	movhi	r2,1029
 4030500:	10b9f604 	addi	r2,r2,-6184
 4030504:	10800017 	ldw	r2,0(r2)
 4030508:	1085883a 	add	r2,r2,r2
 403050c:	1007883a 	mov	r3,r2
 4030510:	e0bfe717 	ldw	r2,-100(fp)
 4030514:	10c00615 	stw	r3,24(r2)
            soisdisconnected(so);
 4030518:	e13fe517 	ldw	r4,-108(fp)
 403051c:	402c9500 	call	402c950 <soisdisconnected>
         }
         break;
 4030520:	00001006 	br	4030564 <tcp_input+0x1dd4>
       * and/or to be acked, as well as for the ack of our FIN.
       * If our FIN is now acknowledged, delete the TCB,
       * enter the closed state and return.
       */
      case TCPS_LAST_ACK:
         if (ourfinisacked) 
 4030524:	e0bfe217 	ldw	r2,-120(fp)
 4030528:	1005003a 	cmpeq	r2,r2,zero
 403052c:	10000d1e 	bne	r2,zero,4030564 <tcp_input+0x1dd4>
         {
            SETTP(tp, tcp_close(tp));
 4030530:	e13fe717 	ldw	r4,-100(fp)
 4030534:	4032e8c0 	call	4032e8c <tcp_close>
            GOTO_DROP;
 4030538:	00816644 	movi	r2,1433
 403053c:	d0a83015 	stw	r2,-24384(gp)
 4030540:	0001d706 	br	4030ca0 <tcp_input+0x2510>
       * In TIME_WAIT state the only thing that should arrive
       * is a retransmission of the remote FIN.  Acknowledge
       * it and restart the finack timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 4030544:	00810174 	movhi	r2,1029
 4030548:	10b9f604 	addi	r2,r2,-6184
 403054c:	10800017 	ldw	r2,0(r2)
 4030550:	1085883a 	add	r2,r2,r2
 4030554:	1007883a 	mov	r3,r2
 4030558:	e0bfe717 	ldw	r2,-100(fp)
 403055c:	10c00615 	stw	r3,24(r2)
         goto dropafterack;
 4030560:	00017906 	br	4030b48 <tcp_input+0x23b8>
step6:
   /*
    * Update window information.
    * Don't look at window if no ACK: TAC's send garbage on first SYN.
    */
   if ((tiflags & TH_ACK) &&
 4030564:	e0bfe617 	ldw	r2,-104(fp)
 4030568:	1080040c 	andi	r2,r2,16
 403056c:	1005003a 	cmpeq	r2,r2,zero
 4030570:	1000471e 	bne	r2,zero,4030690 <tcp_input+0x1f00>
 4030574:	e0bfe717 	ldw	r2,-100(fp)
 4030578:	10c01117 	ldw	r3,68(r2)
 403057c:	e0bfed17 	ldw	r2,-76(fp)
 4030580:	10800617 	ldw	r2,24(r2)
 4030584:	1885c83a 	sub	r2,r3,r2
 4030588:	1004803a 	cmplt	r2,r2,zero
 403058c:	1000151e 	bne	r2,zero,40305e4 <tcp_input+0x1e54>
 4030590:	e0bfe717 	ldw	r2,-100(fp)
 4030594:	10c01117 	ldw	r3,68(r2)
 4030598:	e0bfed17 	ldw	r2,-76(fp)
 403059c:	10800617 	ldw	r2,24(r2)
 40305a0:	18803b1e 	bne	r3,r2,4030690 <tcp_input+0x1f00>
 40305a4:	e0bfe717 	ldw	r2,-100(fp)
 40305a8:	10c01217 	ldw	r3,72(r2)
 40305ac:	e0bfed17 	ldw	r2,-76(fp)
 40305b0:	10800717 	ldw	r2,28(r2)
 40305b4:	1885c83a 	sub	r2,r3,r2
 40305b8:	1004803a 	cmplt	r2,r2,zero
 40305bc:	1000091e 	bne	r2,zero,40305e4 <tcp_input+0x1e54>
 40305c0:	e0bfe717 	ldw	r2,-100(fp)
 40305c4:	10c01217 	ldw	r3,72(r2)
 40305c8:	e0bfed17 	ldw	r2,-76(fp)
 40305cc:	10800717 	ldw	r2,28(r2)
 40305d0:	18802f1e 	bne	r3,r2,4030690 <tcp_input+0x1f00>
 40305d4:	e0bfe717 	ldw	r2,-100(fp)
 40305d8:	10c01417 	ldw	r3,80(r2)
 40305dc:	e0bfde17 	ldw	r2,-136(fp)
 40305e0:	18802b2e 	bgeu	r3,r2,4030690 <tcp_input+0x1f00>
       (SEQ_LT(tp->snd_wl1, ti->ti_seq) || (tp->snd_wl1 == ti->ti_seq &&
       (SEQ_LT(tp->snd_wl2, ti->ti_ack) ||
       ((tp->snd_wl2 == ti->ti_ack) && (rx_win > tp->snd_wnd)))))) 
   {
      /* keep track of pure window updates */
      if ((ti->ti_len == 0) &&
 40305e4:	e0bfed17 	ldw	r2,-76(fp)
 40305e8:	1080028b 	ldhu	r2,10(r2)
 40305ec:	10bfffcc 	andi	r2,r2,65535
 40305f0:	1004c03a 	cmpne	r2,r2,zero
 40305f4:	1000101e 	bne	r2,zero,4030638 <tcp_input+0x1ea8>
 40305f8:	e0bfe717 	ldw	r2,-100(fp)
 40305fc:	10c01217 	ldw	r3,72(r2)
 4030600:	e0bfed17 	ldw	r2,-76(fp)
 4030604:	10800717 	ldw	r2,28(r2)
 4030608:	18800b1e 	bne	r3,r2,4030638 <tcp_input+0x1ea8>
 403060c:	e0bfe717 	ldw	r2,-100(fp)
 4030610:	10c01417 	ldw	r3,80(r2)
 4030614:	e0bfde17 	ldw	r2,-136(fp)
 4030618:	1880072e 	bgeu	r3,r2,4030638 <tcp_input+0x1ea8>
          (tp->snd_wl2 == ti->ti_ack) &&
          (rx_win > tp->snd_wnd))
      {
         tcpstat.tcps_rcvwinupd++;
 403061c:	008101b4 	movhi	r2,1030
 4030620:	10a37804 	addi	r2,r2,-29216
 4030624:	10802d17 	ldw	r2,180(r2)
 4030628:	10c00044 	addi	r3,r2,1
 403062c:	008101b4 	movhi	r2,1030
 4030630:	10a37804 	addi	r2,r2,-29216
 4030634:	10c02d15 	stw	r3,180(r2)
      }
      tp->snd_wnd = rx_win;
 4030638:	e0ffe717 	ldw	r3,-100(fp)
 403063c:	e0bfde17 	ldw	r2,-136(fp)
 4030640:	18801415 	stw	r2,80(r3)
      tp->snd_wl1 = ti->ti_seq;
 4030644:	e0bfed17 	ldw	r2,-76(fp)
 4030648:	10c00617 	ldw	r3,24(r2)
 403064c:	e0bfe717 	ldw	r2,-100(fp)
 4030650:	10c01115 	stw	r3,68(r2)
      tp->snd_wl2 = ti->ti_ack;
 4030654:	e0bfed17 	ldw	r2,-76(fp)
 4030658:	10c00717 	ldw	r3,28(r2)
 403065c:	e0bfe717 	ldw	r2,-100(fp)
 4030660:	10c01215 	stw	r3,72(r2)
      if (tp->snd_wnd > tp->max_sndwnd)
 4030664:	e0bfe717 	ldw	r2,-100(fp)
 4030668:	10c01417 	ldw	r3,80(r2)
 403066c:	e0bfe717 	ldw	r2,-100(fp)
 4030670:	10802317 	ldw	r2,140(r2)
 4030674:	10c0042e 	bgeu	r2,r3,4030688 <tcp_input+0x1ef8>
         tp->max_sndwnd = tp->snd_wnd;
 4030678:	e0bfe717 	ldw	r2,-100(fp)
 403067c:	10c01417 	ldw	r3,80(r2)
 4030680:	e0bfe717 	ldw	r2,-100(fp)
 4030684:	10c02315 	stw	r3,140(r2)
      needoutput = 1;
 4030688:	00800044 	movi	r2,1
 403068c:	e0bfe115 	stw	r2,-124(fp)
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
 4030690:	e0bfe617 	ldw	r2,-104(fp)
 4030694:	1080080c 	andi	r2,r2,32
 4030698:	1005003a 	cmpeq	r2,r2,zero
 403069c:	10005a1e 	bne	r2,zero,4030808 <tcp_input+0x2078>
 40306a0:	e0bfed17 	ldw	r2,-76(fp)
 40306a4:	1080098b 	ldhu	r2,38(r2)
 40306a8:	10bfffcc 	andi	r2,r2,65535
 40306ac:	1005003a 	cmpeq	r2,r2,zero
 40306b0:	1000551e 	bne	r2,zero,4030808 <tcp_input+0x2078>
 40306b4:	e0bfe717 	ldw	r2,-100(fp)
 40306b8:	10800217 	ldw	r2,8(r2)
 40306bc:	10800288 	cmpgei	r2,r2,10
 40306c0:	1000511e 	bne	r2,zero,4030808 <tcp_input+0x2078>
       * This is a kludge, but if we receive and accept
       * random urgent pointers, we'll crash in
       * soreceive.  It's hard to imagine someone
       * actually wanting to send this much urgent data.
       */
      if (ti->ti_urp + so->so_rcv.sb_cc > SB_MAX) 
 40306c4:	e0bfed17 	ldw	r2,-76(fp)
 40306c8:	1080098b 	ldhu	r2,38(r2)
 40306cc:	10ffffcc 	andi	r3,r2,65535
 40306d0:	e0bfe517 	ldw	r2,-108(fp)
 40306d4:	10800a17 	ldw	r2,40(r2)
 40306d8:	1885883a 	add	r2,r3,r2
 40306dc:	10900070 	cmpltui	r2,r2,16385
 40306e0:	1000071e 	bne	r2,zero,4030700 <tcp_input+0x1f70>
      {
         ti->ti_urp = 0;         /* XXX */
 40306e4:	e0bfed17 	ldw	r2,-76(fp)
 40306e8:	1000098d 	sth	zero,38(r2)
         tiflags &= ~TH_URG;     /* XXX */
 40306ec:	e0ffe617 	ldw	r3,-104(fp)
 40306f0:	00bff7c4 	movi	r2,-33
 40306f4:	1884703a 	and	r2,r3,r2
 40306f8:	e0bfe615 	stw	r2,-104(fp)
         goto dodata;         /* XXX */
 40306fc:	00004d06 	br	4030834 <tcp_input+0x20a4>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section
       * as the original spec states.
       */
      if (SEQ_GT(ti->ti_seq+ti->ti_urp, tp->rcv_up)) 
 4030700:	e0bfed17 	ldw	r2,-76(fp)
 4030704:	10c00617 	ldw	r3,24(r2)
 4030708:	e0bfed17 	ldw	r2,-76(fp)
 403070c:	1080098b 	ldhu	r2,38(r2)
 4030710:	10bfffcc 	andi	r2,r2,65535
 4030714:	1887883a 	add	r3,r3,r2
 4030718:	e0bfe717 	ldw	r2,-100(fp)
 403071c:	10801717 	ldw	r2,92(r2)
 4030720:	1885c83a 	sub	r2,r3,r2
 4030724:	10800050 	cmplti	r2,r2,1
 4030728:	1000261e 	bne	r2,zero,40307c4 <tcp_input+0x2034>
      {
         tp->rcv_up = ti->ti_seq + ti->ti_urp;
 403072c:	e0bfed17 	ldw	r2,-76(fp)
 4030730:	10c00617 	ldw	r3,24(r2)
 4030734:	e0bfed17 	ldw	r2,-76(fp)
 4030738:	1080098b 	ldhu	r2,38(r2)
 403073c:	10bfffcc 	andi	r2,r2,65535
 4030740:	1887883a 	add	r3,r3,r2
 4030744:	e0bfe717 	ldw	r2,-100(fp)
 4030748:	10c01715 	stw	r3,92(r2)
         so->so_oobmark = so->so_rcv.sb_cc +
 403074c:	e0bfe517 	ldw	r2,-108(fp)
 4030750:	11000a17 	ldw	r4,40(r2)
 4030754:	e0bfe717 	ldw	r2,-100(fp)
 4030758:	10c01717 	ldw	r3,92(r2)
 403075c:	e0bfe717 	ldw	r2,-100(fp)
 4030760:	10801617 	ldw	r2,88(r2)
 4030764:	1885c83a 	sub	r2,r3,r2
 4030768:	2085883a 	add	r2,r4,r2
 403076c:	10ffffc4 	addi	r3,r2,-1
 4030770:	e0bfe517 	ldw	r2,-108(fp)
 4030774:	10c01a15 	stw	r3,104(r2)
         (tp->rcv_up - tp->rcv_nxt) - 1;
         if (so->so_oobmark == 0)
 4030778:	e0bfe517 	ldw	r2,-108(fp)
 403077c:	10801a17 	ldw	r2,104(r2)
 4030780:	1004c03a 	cmpne	r2,r2,zero
 4030784:	1000061e 	bne	r2,zero,40307a0 <tcp_input+0x2010>
            so->so_state |= SS_RCVATMARK;
 4030788:	e0bfe517 	ldw	r2,-108(fp)
 403078c:	1080088b 	ldhu	r2,34(r2)
 4030790:	10801014 	ori	r2,r2,64
 4030794:	1007883a 	mov	r3,r2
 4030798:	e0bfe517 	ldw	r2,-108(fp)
 403079c:	10c0088d 	sth	r3,34(r2)
         sohasoutofband(so);
 40307a0:	e13fe517 	ldw	r4,-108(fp)
 40307a4:	402c7180 	call	402c718 <sohasoutofband>
         tp->t_oobflags &= ~(TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 40307a8:	e0bfe717 	ldw	r2,-100(fp)
 40307ac:	10c02403 	ldbu	r3,144(r2)
 40307b0:	00bfff04 	movi	r2,-4
 40307b4:	1884703a 	and	r2,r3,r2
 40307b8:	1007883a 	mov	r3,r2
 40307bc:	e0bfe717 	ldw	r2,-100(fp)
 40307c0:	10c02405 	stb	r3,144(r2)
       * Remove out of band data so doesn't get presented to user.
       * This can happen independent of advancing the URG pointer,
       * but if two URG's are pending at once, some out-of-band
       * data may creep in... ick.
       */
      if ( (ti->ti_urp <= ti->ti_len)
 40307c4:	e0bfed17 	ldw	r2,-76(fp)
 40307c8:	10c0098b 	ldhu	r3,38(r2)
 40307cc:	e0bfed17 	ldw	r2,-76(fp)
 40307d0:	1080028b 	ldhu	r2,10(r2)
 40307d4:	18ffffcc 	andi	r3,r3,65535
 40307d8:	10bfffcc 	andi	r2,r2,65535
 40307dc:	10c01536 	bltu	r2,r3,4030834 <tcp_input+0x20a4>
 40307e0:	e0bfe517 	ldw	r2,-108(fp)
 40307e4:	10800417 	ldw	r2,16(r2)
 40307e8:	1080400c 	andi	r2,r2,256
 40307ec:	1004c03a 	cmpne	r2,r2,zero
 40307f0:	1000101e 	bne	r2,zero,4030834 <tcp_input+0x20a4>
#ifdef SO_OOBINLINE
       && (so->so_options & SO_OOBINLINE) == 0
#endif
       )
      {
         tcp_pulloutofband(so, ti, m);
 40307f4:	e13fe517 	ldw	r4,-108(fp)
 40307f8:	e17fed17 	ldw	r5,-76(fp)
 40307fc:	e1bff017 	ldw	r6,-64(fp)
 4030800:	4030e740 	call	4030e74 <tcp_pulloutofband>
   }

   /*
    * Process segments with URG.
    */
   if ((tiflags & TH_URG) && ti->ti_urp &&
 4030804:	00000b06 	br	4030834 <tcp_input+0x20a4>
      /*
       * If no out of band data is expected,
       * pull receive urgent pointer along
       * with the receive window.
       */
   if (SEQ_GT(tp->rcv_nxt, tp->rcv_up))
 4030808:	e0bfe717 	ldw	r2,-100(fp)
 403080c:	10c01617 	ldw	r3,88(r2)
 4030810:	e0bfe717 	ldw	r2,-100(fp)
 4030814:	10801717 	ldw	r2,92(r2)
 4030818:	1885c83a 	sub	r2,r3,r2
 403081c:	10800050 	cmplti	r2,r2,1
 4030820:	1000041e 	bne	r2,zero,4030834 <tcp_input+0x20a4>
      tp->rcv_up = tp->rcv_nxt;
 4030824:	e0bfe717 	ldw	r2,-100(fp)
 4030828:	10c01617 	ldw	r3,88(r2)
 403082c:	e0bfe717 	ldw	r2,-100(fp)
 4030830:	10c01715 	stw	r3,92(r2)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 4030834:	e0bfed17 	ldw	r2,-76(fp)
 4030838:	1080028b 	ldhu	r2,10(r2)
 403083c:	10bfffcc 	andi	r2,r2,65535
 4030840:	1004c03a 	cmpne	r2,r2,zero
 4030844:	1000051e 	bne	r2,zero,403085c <tcp_input+0x20cc>
 4030848:	e0bfe617 	ldw	r2,-104(fp)
 403084c:	1080004c 	andi	r2,r2,1
 4030850:	10803fcc 	andi	r2,r2,255
 4030854:	1005003a 	cmpeq	r2,r2,zero
 4030858:	10005c1e 	bne	r2,zero,40309cc <tcp_input+0x223c>
 403085c:	e0bfe717 	ldw	r2,-100(fp)
 4030860:	10800217 	ldw	r2,8(r2)
 4030864:	10800288 	cmpgei	r2,r2,10
 4030868:	1000581e 	bne	r2,zero,40309cc <tcp_input+0x223c>
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
 403086c:	e0bfed17 	ldw	r2,-76(fp)
 4030870:	10c00617 	ldw	r3,24(r2)
 4030874:	e0bfe717 	ldw	r2,-100(fp)
 4030878:	10801617 	ldw	r2,88(r2)
 403087c:	1880351e 	bne	r3,r2,4030954 <tcp_input+0x21c4>
 4030880:	e0bfe717 	ldw	r2,-100(fp)
 4030884:	10c00017 	ldw	r3,0(r2)
 4030888:	e0bfe717 	ldw	r2,-100(fp)
 403088c:	1880311e 	bne	r3,r2,4030954 <tcp_input+0x21c4>
 4030890:	e0bfe717 	ldw	r2,-100(fp)
 4030894:	10800217 	ldw	r2,8(r2)
 4030898:	10800118 	cmpnei	r2,r2,4
 403089c:	10002d1e 	bne	r2,zero,4030954 <tcp_input+0x21c4>
         else
         {
            tp->t_flags |= TF_ACKNOW;
         }
#else    /* not DO_DELAY_ACKS */
            tp->t_flags |= TF_ACKNOW;
 40308a0:	e0bfe717 	ldw	r2,-100(fp)
 40308a4:	10800b0b 	ldhu	r2,44(r2)
 40308a8:	10800054 	ori	r2,r2,1
 40308ac:	1007883a 	mov	r3,r2
 40308b0:	e0bfe717 	ldw	r2,-100(fp)
 40308b4:	10c00b0d 	sth	r3,44(r2)
#endif   /* DO_DELAY_ACKS */

         tp->rcv_nxt += ti->ti_len;
 40308b8:	e0bfe717 	ldw	r2,-100(fp)
 40308bc:	10c01617 	ldw	r3,88(r2)
 40308c0:	e0bfed17 	ldw	r2,-76(fp)
 40308c4:	1080028b 	ldhu	r2,10(r2)
 40308c8:	10bfffcc 	andi	r2,r2,65535
 40308cc:	1887883a 	add	r3,r3,r2
 40308d0:	e0bfe717 	ldw	r2,-100(fp)
 40308d4:	10c01615 	stw	r3,88(r2)
         tiflags = ti->ti_flags & TH_FIN;
 40308d8:	e0bfed17 	ldw	r2,-76(fp)
 40308dc:	10800843 	ldbu	r2,33(r2)
 40308e0:	10803fcc 	andi	r2,r2,255
 40308e4:	1080004c 	andi	r2,r2,1
 40308e8:	e0bfe615 	stw	r2,-104(fp)
         tcpstat.tcps_rcvpack++;
 40308ec:	008101b4 	movhi	r2,1030
 40308f0:	10a37804 	addi	r2,r2,-29216
 40308f4:	10801a17 	ldw	r2,104(r2)
 40308f8:	10c00044 	addi	r3,r2,1
 40308fc:	008101b4 	movhi	r2,1030
 4030900:	10a37804 	addi	r2,r2,-29216
 4030904:	10c01a15 	stw	r3,104(r2)
         tcpstat.tcps_rcvbyte += ti->ti_len;
 4030908:	008101b4 	movhi	r2,1030
 403090c:	10a37804 	addi	r2,r2,-29216
 4030910:	10c01b17 	ldw	r3,108(r2)
 4030914:	e0bfed17 	ldw	r2,-76(fp)
 4030918:	1080028b 	ldhu	r2,10(r2)
 403091c:	10bfffcc 	andi	r2,r2,65535
 4030920:	1887883a 	add	r3,r3,r2
 4030924:	008101b4 	movhi	r2,1030
 4030928:	10a37804 	addi	r2,r2,-29216
 403092c:	10c01b15 	stw	r3,108(r2)
         sbappend(&so->so_rcv, (m));
 4030930:	e0bfe517 	ldw	r2,-108(fp)
 4030934:	11000a04 	addi	r4,r2,40
 4030938:	e17ff017 	ldw	r5,-64(fp)
 403093c:	402d0f80 	call	402d0f8 <sbappend>
         sorwakeup(so);
 4030940:	e0bfe517 	ldw	r2,-108(fp)
 4030944:	11400a04 	addi	r5,r2,40
 4030948:	e13fe517 	ldw	r4,-108(fp)
 403094c:	402cf340 	call	402cf34 <sbwakeup>
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
       TCPS_HAVERCVDFIN(tp->t_state) == 0) 
   {

      /* Do the common segment reassembly case inline */
      if((ti->ti_seq == tp->rcv_nxt) &&
 4030950:	00000b06 	br	4030980 <tcp_input+0x21f0>
#endif /* TCP_SACK */
      }
      else     /* received out of sequence segment */
      {
         /* Drop it in the reassmbly queue */
         tiflags = tcp_reass(tp, ti, m);
 4030954:	e13fe717 	ldw	r4,-100(fp)
 4030958:	e17fed17 	ldw	r5,-76(fp)
 403095c:	e1bff017 	ldw	r6,-64(fp)
 4030960:	402e3880 	call	402e388 <tcp_reass>
 4030964:	e0bfe615 	stw	r2,-104(fp)
         tp->t_flags |= TF_ACKNOW;
 4030968:	e0bfe717 	ldw	r2,-100(fp)
 403096c:	10800b0b 	ldhu	r2,44(r2)
 4030970:	10800054 	ori	r2,r2,1
 4030974:	1007883a 	mov	r3,r2
 4030978:	e0bfe717 	ldw	r2,-100(fp)
 403097c:	10c00b0d 	sth	r3,44(r2)
      /*
       * Note the amount of data that peer has sent into
       * our window, in order to estimate the sender's
       * buffer size.
       */
      len = (int)(so->so_rcv.sb_hiwat - (tp->rcv_adv - tp->rcv_nxt));
 4030980:	e0bfe517 	ldw	r2,-108(fp)
 4030984:	11000b17 	ldw	r4,44(r2)
 4030988:	e0bfe717 	ldw	r2,-100(fp)
 403098c:	10c01917 	ldw	r3,100(r2)
 4030990:	e0bfe717 	ldw	r2,-100(fp)
 4030994:	10801617 	ldw	r2,88(r2)
 4030998:	1885c83a 	sub	r2,r3,r2
 403099c:	2085c83a 	sub	r2,r4,r2
 40309a0:	e0bfea15 	stw	r2,-88(fp)
      if (len > (int)tp->max_rcvd)
 40309a4:	e0bfe717 	ldw	r2,-100(fp)
 40309a8:	10802217 	ldw	r2,136(r2)
 40309ac:	1007883a 	mov	r3,r2
 40309b0:	e0bfea17 	ldw	r2,-88(fp)
 40309b4:	18800b0e 	bge	r3,r2,40309e4 <tcp_input+0x2254>
         tp->max_rcvd = (u_short)len;
 40309b8:	e0bfea17 	ldw	r2,-88(fp)
 40309bc:	10ffffcc 	andi	r3,r2,65535
 40309c0:	e0bfe717 	ldw	r2,-100(fp)
 40309c4:	10c02215 	stw	r3,136(r2)
    * This process logically involves adjusting tp->rcv_wnd as data
    * is presented to the user (this happens in tcp_usrreq.c,
    * case PRU_RCVD).  If a FIN has already been received on this
    * connection then we just ignore the text.
    */
   if ((ti->ti_len || (tiflags&TH_FIN)) &&
 40309c8:	00000606 	br	40309e4 <tcp_input+0x2254>
      }
#endif   /* TCP_ZEROCOPY */
   } 
   else
   {
      m_freem(m);
 40309cc:	e13ff017 	ldw	r4,-64(fp)
 40309d0:	4026c900 	call	4026c90 <m_freem>
      tiflags &= ~TH_FIN;
 40309d4:	e0bfe617 	ldw	r2,-104(fp)
 40309d8:	00ffff84 	movi	r3,-2
 40309dc:	10c4703a 	and	r2,r2,r3
 40309e0:	e0bfe615 	stw	r2,-104(fp)

   /*
    * If FIN is received ACK the FIN and let the user know
    * that the connection is closing.
    */
   if (tiflags & TH_FIN) 
 40309e4:	e0bfe617 	ldw	r2,-104(fp)
 40309e8:	1080004c 	andi	r2,r2,1
 40309ec:	10803fcc 	andi	r2,r2,255
 40309f0:	1005003a 	cmpeq	r2,r2,zero
 40309f4:	1000471e 	bne	r2,zero,4030b14 <tcp_input+0x2384>
   {
      if (TCPS_HAVERCVDFIN(tp->t_state) == 0) 
 40309f8:	e0bfe717 	ldw	r2,-100(fp)
 40309fc:	10800217 	ldw	r2,8(r2)
 4030a00:	10800288 	cmpgei	r2,r2,10
 4030a04:	10000d1e 	bne	r2,zero,4030a3c <tcp_input+0x22ac>
      {
         socantrcvmore(so);
 4030a08:	e13fe517 	ldw	r4,-108(fp)
 4030a0c:	402ce440 	call	402ce44 <socantrcvmore>
         tp->t_flags |= TF_ACKNOW;
 4030a10:	e0bfe717 	ldw	r2,-100(fp)
 4030a14:	10800b0b 	ldhu	r2,44(r2)
 4030a18:	10800054 	ori	r2,r2,1
 4030a1c:	1007883a 	mov	r3,r2
 4030a20:	e0bfe717 	ldw	r2,-100(fp)
 4030a24:	10c00b0d 	sth	r3,44(r2)
         tp->rcv_nxt++;
 4030a28:	e0bfe717 	ldw	r2,-100(fp)
 4030a2c:	10801617 	ldw	r2,88(r2)
 4030a30:	10c00044 	addi	r3,r2,1
 4030a34:	e0bfe717 	ldw	r2,-100(fp)
 4030a38:	10c01615 	stw	r3,88(r2)
      }
      switch (tp->t_state) 
 4030a3c:	e0bfe717 	ldw	r2,-100(fp)
 4030a40:	10800217 	ldw	r2,8(r2)
 4030a44:	10bfff44 	addi	r2,r2,-3
 4030a48:	e0bfff15 	stw	r2,-4(fp)
 4030a4c:	e0ffff17 	ldw	r3,-4(fp)
 4030a50:	18800228 	cmpgeui	r2,r3,8
 4030a54:	10002f1e 	bne	r2,zero,4030b14 <tcp_input+0x2384>
 4030a58:	e13fff17 	ldw	r4,-4(fp)
 4030a5c:	e13fff17 	ldw	r4,-4(fp)
 4030a60:	2105883a 	add	r2,r4,r4
 4030a64:	1087883a 	add	r3,r2,r2
 4030a68:	008100f4 	movhi	r2,1027
 4030a6c:	10829f04 	addi	r2,r2,2684
 4030a70:	1885883a 	add	r2,r3,r2
 4030a74:	10800017 	ldw	r2,0(r2)
 4030a78:	1000683a 	jmp	r2
 4030a7c:	04030a9c 	xori	r16,zero,3114
 4030a80:	04030a9c 	xori	r16,zero,3114
 4030a84:	04030b14 	movui	r16,3116
 4030a88:	04030aac 	andhi	r16,zero,3114
 4030a8c:	04030b14 	movui	r16,3116
 4030a90:	04030b14 	movui	r16,3116
 4030a94:	04030abc 	xorhi	r16,zero,3114
 4030a98:	04030af8 	rdprs	r16,zero,3115
       * In SYN_RECEIVED and ESTABLISHED STATES
       * enter the CLOSE_WAIT state.
       */
      case TCPS_SYN_RECEIVED:
      case TCPS_ESTABLISHED:
         tp->t_state = TCPS_CLOSE_WAIT;
 4030a9c:	e0ffe717 	ldw	r3,-100(fp)
 4030aa0:	00800144 	movi	r2,5
 4030aa4:	18800215 	stw	r2,8(r3)
         break;
 4030aa8:	00001a06 	br	4030b14 <tcp_input+0x2384>
       /*
       * If still in FIN_WAIT_1 STATE FIN has not been acked so
       * enter the CLOSING state.
       */
      case TCPS_FIN_WAIT_1:
         tp->t_state = TCPS_CLOSING;
 4030aac:	e0ffe717 	ldw	r3,-100(fp)
 4030ab0:	008001c4 	movi	r2,7
 4030ab4:	18800215 	stw	r2,8(r3)
         break;
 4030ab8:	00001606 	br	4030b14 <tcp_input+0x2384>
       * In FIN_WAIT_2 state enter the TIME_WAIT state,
       * starting the time-wait timer, turning off the other 
       * standard timers.
       */
      case TCPS_FIN_WAIT_2:
         tp->t_state = TCPS_TIME_WAIT;
 4030abc:	e0ffe717 	ldw	r3,-100(fp)
 4030ac0:	00800284 	movi	r2,10
 4030ac4:	18800215 	stw	r2,8(r3)
         tcp_canceltimers(tp);
 4030ac8:	e13fe717 	ldw	r4,-100(fp)
 4030acc:	40333580 	call	4033358 <tcp_canceltimers>
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 4030ad0:	00810174 	movhi	r2,1029
 4030ad4:	10b9f604 	addi	r2,r2,-6184
 4030ad8:	10800017 	ldw	r2,0(r2)
 4030adc:	1085883a 	add	r2,r2,r2
 4030ae0:	1007883a 	mov	r3,r2
 4030ae4:	e0bfe717 	ldw	r2,-100(fp)
 4030ae8:	10c00615 	stw	r3,24(r2)
         soisdisconnected(so);
 4030aec:	e13fe517 	ldw	r4,-108(fp)
 4030af0:	402c9500 	call	402c950 <soisdisconnected>
         break;
 4030af4:	00000706 	br	4030b14 <tcp_input+0x2384>

      /*
       * In TIME_WAIT state restart the 2 MSL time_wait timer.
       */
      case TCPS_TIME_WAIT:
         tp->t_timer[TCPT_2MSL] = 2 * TCPTV_MSL;
 4030af8:	00810174 	movhi	r2,1029
 4030afc:	10b9f604 	addi	r2,r2,-6184
 4030b00:	10800017 	ldw	r2,0(r2)
 4030b04:	1085883a 	add	r2,r2,r2
 4030b08:	1007883a 	mov	r3,r2
 4030b0c:	e0bfe717 	ldw	r2,-100(fp)
 4030b10:	10c00615 	stw	r3,24(r2)
    ostate, tp, &tcp_saveti);
#endif
   /*
    * Return any desired output.
    */
   if (needoutput || (tp->t_flags & TF_ACKNOW))
 4030b14:	e0bfe117 	ldw	r2,-124(fp)
 4030b18:	1004c03a 	cmpne	r2,r2,zero
 4030b1c:	1000071e 	bne	r2,zero,4030b3c <tcp_input+0x23ac>
 4030b20:	e0bfe717 	ldw	r2,-100(fp)
 4030b24:	10800b0b 	ldhu	r2,44(r2)
 4030b28:	10bfffcc 	andi	r2,r2,65535
 4030b2c:	1080004c 	andi	r2,r2,1
 4030b30:	10803fcc 	andi	r2,r2,255
 4030b34:	1005003a 	cmpeq	r2,r2,zero
 4030b38:	1000651e 	bne	r2,zero,4030cd0 <tcp_input+0x2540>
      (void) tcp_output(tp);
 4030b3c:	e13fe717 	ldw	r4,-100(fp)
 4030b40:	40313700 	call	4031370 <tcp_output>
   return;
 4030b44:	00006206 	br	4030cd0 <tcp_input+0x2540>
dropafterack:
   /*
    * Generate an ACK dropping incoming segment if it occupies
    * sequence space, where the ACK reflects our state.
    */
   if (tiflags & TH_RST)
 4030b48:	e0bfe617 	ldw	r2,-104(fp)
 4030b4c:	1080010c 	andi	r2,r2,4
 4030b50:	1005003a 	cmpeq	r2,r2,zero
 4030b54:	1000031e 	bne	r2,zero,4030b64 <tcp_input+0x23d4>
      GOTO_DROP;
 4030b58:	0081a904 	movi	r2,1700
 4030b5c:	d0a83015 	stw	r2,-24384(gp)
 4030b60:	00004f06 	br	4030ca0 <tcp_input+0x2510>
   m_freem (m);
 4030b64:	e13ff017 	ldw	r4,-64(fp)
 4030b68:	4026c900 	call	4026c90 <m_freem>
   tp->t_flags |= TF_ACKNOW;
 4030b6c:	e0bfe717 	ldw	r2,-100(fp)
 4030b70:	10800b0b 	ldhu	r2,44(r2)
 4030b74:	10800054 	ori	r2,r2,1
 4030b78:	1007883a 	mov	r3,r2
 4030b7c:	e0bfe717 	ldw	r2,-100(fp)
 4030b80:	10c00b0d 	sth	r3,44(r2)
   (void) tcp_output (tp);
 4030b84:	e13fe717 	ldw	r4,-100(fp)
 4030b88:	40313700 	call	4031370 <tcp_output>
   return;
 4030b8c:	00005006 	br	4030cd0 <tcp_input+0x2540>

dropwithreset:
   TCP_MIB_INC(tcpInErrs);    /* keep MIB stats */
 4030b90:	008101b4 	movhi	r2,1030
 4030b94:	10a34a04 	addi	r2,r2,-29400
 4030b98:	10800d17 	ldw	r2,52(r2)
 4030b9c:	10c00044 	addi	r3,r2,1
 4030ba0:	008101b4 	movhi	r2,1030
 4030ba4:	10a34a04 	addi	r2,r2,-29400
 4030ba8:	10c00d15 	stw	r3,52(r2)
   if (om) 
 4030bac:	e0bfeb17 	ldw	r2,-84(fp)
 4030bb0:	1005003a 	cmpeq	r2,r2,zero
 4030bb4:	1000031e 	bne	r2,zero,4030bc4 <tcp_input+0x2434>
   {
      (void) m_free(om);
 4030bb8:	e13feb17 	ldw	r4,-84(fp)
 4030bbc:	4026b5c0 	call	4026b5c <m_free>
      om = 0;
 4030bc0:	e03feb15 	stw	zero,-84(fp)
   }

   /* Don't reset resets */
   if (tiflags & TH_RST)
 4030bc4:	e0bfe617 	ldw	r2,-104(fp)
 4030bc8:	1080010c 	andi	r2,r2,4
 4030bcc:	1005003a 	cmpeq	r2,r2,zero
 4030bd0:	1000031e 	bne	r2,zero,4030be0 <tcp_input+0x2450>
      GOTO_DROP;
 4030bd4:	0081ad04 	movi	r2,1716
 4030bd8:	d0a83015 	stw	r2,-24384(gp)
 4030bdc:	00003006 	br	4030ca0 <tcp_input+0x2510>
    * Generate a RST, dropping incoming segment.
    * Make ACK acceptable to originator of segment.
    * Don't bother to respond if destination was broadcast.
    */
#ifdef IP_V4
   if (in_broadcast(ti->ti_dst.s_addr))
 4030be0:	e0bfed17 	ldw	r2,-76(fp)
 4030be4:	11000417 	ldw	r4,16(r2)
 4030be8:	4027cbc0 	call	4027cbc <in_broadcast>
 4030bec:	1005003a 	cmpeq	r2,r2,zero
 4030bf0:	1000031e 	bne	r2,zero,4030c00 <tcp_input+0x2470>
      GOTO_DROP;
 4030bf4:	0081af44 	movi	r2,1725
 4030bf8:	d0a83015 	stw	r2,-24384(gp)
 4030bfc:	00002806 	br	4030ca0 <tcp_input+0x2510>
      IP6CPY(&(m->pkt->ip6_hdr->ip_src), &ip6_src);
      IP6CPY(&(m->pkt->ip6_hdr->ip_dest), &ip6_dst);
   }
#endif   /* IP_V6 */

   if (tiflags & TH_ACK)
 4030c00:	e0bfe617 	ldw	r2,-104(fp)
 4030c04:	1080040c 	andi	r2,r2,16
 4030c08:	1005003a 	cmpeq	r2,r2,zero
 4030c0c:	10000b1e 	bne	r2,zero,4030c3c <tcp_input+0x24ac>
      tcp_respond (tp, ti, (tcp_seq)0, ti->ti_ack, TH_RST, m);
 4030c10:	e0bfed17 	ldw	r2,-76(fp)
 4030c14:	11c00717 	ldw	r7,28(r2)
 4030c18:	00800104 	movi	r2,4
 4030c1c:	d8800015 	stw	r2,0(sp)
 4030c20:	e0bff017 	ldw	r2,-64(fp)
 4030c24:	d8800115 	stw	r2,4(sp)
 4030c28:	e13fe717 	ldw	r4,-100(fp)
 4030c2c:	e17fed17 	ldw	r5,-76(fp)
 4030c30:	000d883a 	mov	r6,zero
 4030c34:	40328400 	call	4032840 <tcp_respond>
 4030c38:	00001306 	br	4030c88 <tcp_input+0x24f8>
   else
   {
      if (tiflags & TH_SYN)
 4030c3c:	e0bfe617 	ldw	r2,-104(fp)
 4030c40:	1080008c 	andi	r2,r2,2
 4030c44:	1005003a 	cmpeq	r2,r2,zero
 4030c48:	1000051e 	bne	r2,zero,4030c60 <tcp_input+0x24d0>
         ti->ti_seq++;
 4030c4c:	e0bfed17 	ldw	r2,-76(fp)
 4030c50:	10800617 	ldw	r2,24(r2)
 4030c54:	10c00044 	addi	r3,r2,1
 4030c58:	e0bfed17 	ldw	r2,-76(fp)
 4030c5c:	10c00615 	stw	r3,24(r2)
      tcp_respond(tp, ti, ti->ti_seq, (tcp_seq)0, TH_RST|TH_ACK, m);
 4030c60:	e0bfed17 	ldw	r2,-76(fp)
 4030c64:	11800617 	ldw	r6,24(r2)
 4030c68:	00800504 	movi	r2,20
 4030c6c:	d8800015 	stw	r2,0(sp)
 4030c70:	e0bff017 	ldw	r2,-64(fp)
 4030c74:	d8800115 	stw	r2,4(sp)
 4030c78:	e13fe717 	ldw	r4,-100(fp)
 4030c7c:	e17fed17 	ldw	r5,-76(fp)
 4030c80:	000f883a 	mov	r7,zero
 4030c84:	40328400 	call	4032840 <tcp_respond>
   }
   /* destroy temporarily created socket */
   if (dropsocket)
 4030c88:	e0bfe017 	ldw	r2,-128(fp)
 4030c8c:	1005003a 	cmpeq	r2,r2,zero
 4030c90:	10000f1e 	bne	r2,zero,4030cd0 <tcp_input+0x2540>
      (void) soabort(so);
 4030c94:	e13fe517 	ldw	r4,-108(fp)
 4030c98:	402ab240 	call	402ab24 <soabort>
   return;
 4030c9c:	00000c06 	br	4030cd0 <tcp_input+0x2540>

drop:
   if (om)
 4030ca0:	e0bfeb17 	ldw	r2,-84(fp)
 4030ca4:	1005003a 	cmpeq	r2,r2,zero
 4030ca8:	1000021e 	bne	r2,zero,4030cb4 <tcp_input+0x2524>
      (void) m_free(om);
 4030cac:	e13feb17 	ldw	r4,-84(fp)
 4030cb0:	4026b5c0 	call	4026b5c <m_free>
#ifdef DO_TCPTRACE
   if (tp && (tp->t_inpcb->inp_socket->so_options & SO_DEBUG))
      tcp_trace("drop: state %d, tcpcb: %x, saveti: %x",
    ostate, tp, &tcp_saveti);
#endif
   m_freem(m);
 4030cb4:	e13ff017 	ldw	r4,-64(fp)
 4030cb8:	4026c900 	call	4026c90 <m_freem>
   /* destroy temporarily created socket */
   if (dropsocket)
 4030cbc:	e0bfe017 	ldw	r2,-128(fp)
 4030cc0:	1005003a 	cmpeq	r2,r2,zero
 4030cc4:	1000021e 	bne	r2,zero,4030cd0 <tcp_input+0x2540>
      (void) soabort(so);
 4030cc8:	e13fe517 	ldw	r4,-108(fp)
 4030ccc:	402ab240 	call	402ab24 <soabort>
   return;
}
 4030cd0:	e037883a 	mov	sp,fp
 4030cd4:	dfc00117 	ldw	ra,4(sp)
 4030cd8:	df000017 	ldw	fp,0(sp)
 4030cdc:	dec00204 	addi	sp,sp,8
 4030ce0:	f800283a 	ret

04030ce4 <tcp_dooptions>:

void
tcp_dooptions(struct tcpcb * tp, 
   struct mbuf *  om,
   struct tcpiphdr * ti)
{
 4030ce4:	defff404 	addi	sp,sp,-48
 4030ce8:	dfc00b15 	stw	ra,44(sp)
 4030cec:	df000a15 	stw	fp,40(sp)
 4030cf0:	df000a04 	addi	fp,sp,40
 4030cf4:	e13ffc15 	stw	r4,-16(fp)
 4030cf8:	e17ffd15 	stw	r5,-12(fp)
 4030cfc:	e1bffe15 	stw	r6,-8(fp)
   u_char * cp;   /* pointer into option buffer */
   int   opt;     /* current option code */
   int   optlen;  /* length of current option */
   int   cnt;     /* byte count left in header */
   struct socket * so = tp->t_inpcb->inp_socket;
 4030d00:	e0bffc17 	ldw	r2,-16(fp)
 4030d04:	10800d17 	ldw	r2,52(r2)
 4030d08:	10800817 	ldw	r2,32(r2)
 4030d0c:	e0bff715 	stw	r2,-36(fp)
#ifdef TCP_TIMESTAMP
   int   gotstamp = FALSE;    /* TRUE if we got a timestamp */
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
 4030d10:	e0bffd17 	ldw	r2,-12(fp)
 4030d14:	10800317 	ldw	r2,12(r2)
 4030d18:	e0bffb15 	stw	r2,-20(fp)
   cnt = om->m_len;
 4030d1c:	e0bffd17 	ldw	r2,-12(fp)
 4030d20:	10800217 	ldw	r2,8(r2)
 4030d24:	e0bff815 	stw	r2,-32(fp)
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 4030d28:	00004806 	br	4030e4c <tcp_dooptions+0x168>
   {
      opt = cp[0];
 4030d2c:	e0bffb17 	ldw	r2,-20(fp)
 4030d30:	10800003 	ldbu	r2,0(r2)
 4030d34:	10803fcc 	andi	r2,r2,255
 4030d38:	e0bffa15 	stw	r2,-24(fp)
      if (opt == TCPOPT_EOL)
 4030d3c:	e0bffa17 	ldw	r2,-24(fp)
 4030d40:	1005003a 	cmpeq	r2,r2,zero
 4030d44:	1000441e 	bne	r2,zero,4030e58 <tcp_dooptions+0x174>
         break;
      if (opt == TCPOPT_NOP)
 4030d48:	e0bffa17 	ldw	r2,-24(fp)
 4030d4c:	10800058 	cmpnei	r2,r2,1
 4030d50:	1000031e 	bne	r2,zero,4030d60 <tcp_dooptions+0x7c>
         optlen = 1;
 4030d54:	00800044 	movi	r2,1
 4030d58:	e0bff915 	stw	r2,-28(fp)
 4030d5c:	00000806 	br	4030d80 <tcp_dooptions+0x9c>
      else 
      {
         optlen = cp[1];
 4030d60:	e0bffb17 	ldw	r2,-20(fp)
 4030d64:	10800044 	addi	r2,r2,1
 4030d68:	10800003 	ldbu	r2,0(r2)
 4030d6c:	10803fcc 	andi	r2,r2,255
 4030d70:	e0bff915 	stw	r2,-28(fp)
         if (optlen <= 0)
 4030d74:	e0bff917 	ldw	r2,-28(fp)
 4030d78:	10800050 	cmplti	r2,r2,1
 4030d7c:	1000361e 	bne	r2,zero,4030e58 <tcp_dooptions+0x174>
            break;
      }

      switch (opt) 
 4030d80:	e0bffa17 	ldw	r2,-24(fp)
 4030d84:	108000a0 	cmpeqi	r2,r2,2
 4030d88:	1000011e 	bne	r2,zero,4030d90 <tcp_dooptions+0xac>
 4030d8c:	00002606 	br	4030e28 <tcp_dooptions+0x144>
      {
      case TCPOPT_MAXSEG:
      {
         u_short mssval;
         if (optlen != 4)
 4030d90:	e0bff917 	ldw	r2,-28(fp)
 4030d94:	10800118 	cmpnei	r2,r2,4
 4030d98:	1000231e 	bne	r2,zero,4030e28 <tcp_dooptions+0x144>
            continue;
         if (!(ti->ti_flags & TH_SYN))    /* MSS only on SYN */
 4030d9c:	e0bffe17 	ldw	r2,-8(fp)
 4030da0:	10800843 	ldbu	r2,33(r2)
 4030da4:	10803fcc 	andi	r2,r2,255
 4030da8:	1080008c 	andi	r2,r2,2
 4030dac:	1005003a 	cmpeq	r2,r2,zero
 4030db0:	10001d1e 	bne	r2,zero,4030e28 <tcp_dooptions+0x144>
            continue;
         mssval = *(u_short *)(cp + 2);
 4030db4:	e0bffb17 	ldw	r2,-20(fp)
 4030db8:	10800084 	addi	r2,r2,2
 4030dbc:	1080000b 	ldhu	r2,0(r2)
 4030dc0:	e0bff60d 	sth	r2,-40(fp)
         mssval = ntohs(mssval);
 4030dc4:	e0bff60b 	ldhu	r2,-40(fp)
 4030dc8:	1004d23a 	srli	r2,r2,8
 4030dcc:	10803fcc 	andi	r2,r2,255
 4030dd0:	1009883a 	mov	r4,r2
 4030dd4:	e0bff60b 	ldhu	r2,-40(fp)
 4030dd8:	1004923a 	slli	r2,r2,8
 4030ddc:	1007883a 	mov	r3,r2
 4030de0:	00bfc004 	movi	r2,-256
 4030de4:	1884703a 	and	r2,r3,r2
 4030de8:	2084b03a 	or	r2,r4,r2
 4030dec:	e0bff60d 	sth	r2,-40(fp)
         tp->t_maxseg = (u_short)MIN(mssval, (u_short)tcp_mss(so));
 4030df0:	e13ff717 	ldw	r4,-36(fp)
 4030df4:	40312540 	call	4031254 <tcp_mss>
 4030df8:	10ffffcc 	andi	r3,r2,65535
 4030dfc:	e0bff60b 	ldhu	r2,-40(fp)
 4030e00:	1880042e 	bgeu	r3,r2,4030e14 <tcp_dooptions+0x130>
 4030e04:	e13ff717 	ldw	r4,-36(fp)
 4030e08:	40312540 	call	4031254 <tcp_mss>
 4030e0c:	e0bfff0d 	sth	r2,-4(fp)
 4030e10:	00000206 	br	4030e1c <tcp_dooptions+0x138>
 4030e14:	e0bff60b 	ldhu	r2,-40(fp)
 4030e18:	e0bfff0d 	sth	r2,-4(fp)
 4030e1c:	e0bffc17 	ldw	r2,-16(fp)
 4030e20:	e0ffff0b 	ldhu	r3,-4(fp)
 4030e24:	10c00a0d 	sth	r3,40(r2)
#endif   /* TCP_TIMESTAMP */


   cp = mtod(om, u_char *);
   cnt = om->m_len;
   for (; cnt > 0; cnt -= optlen, cp += optlen) 
 4030e28:	e0fff817 	ldw	r3,-32(fp)
 4030e2c:	e0bff917 	ldw	r2,-28(fp)
 4030e30:	1885c83a 	sub	r2,r3,r2
 4030e34:	e0bff815 	stw	r2,-32(fp)
 4030e38:	e0bff917 	ldw	r2,-28(fp)
 4030e3c:	1007883a 	mov	r3,r2
 4030e40:	e0bffb17 	ldw	r2,-20(fp)
 4030e44:	10c5883a 	add	r2,r2,r3
 4030e48:	e0bffb15 	stw	r2,-20(fp)
 4030e4c:	e0bff817 	ldw	r2,-32(fp)
 4030e50:	10800048 	cmpgei	r2,r2,1
 4030e54:	103fb51e 	bne	r2,zero,4030d2c <tcp_dooptions+0x48>

      default:
         break;
      }
   }
   (void) m_free(om);
 4030e58:	e13ffd17 	ldw	r4,-12(fp)
 4030e5c:	4026b5c0 	call	4026b5c <m_free>
         tp->t_flags &= ~TF_TIMESTAMP;
   }
#endif /* TCP_TIMESTAMP */

   return;
}
 4030e60:	e037883a 	mov	sp,fp
 4030e64:	dfc00117 	ldw	ra,4(sp)
 4030e68:	df000017 	ldw	fp,0(sp)
 4030e6c:	dec00204 	addi	sp,sp,8
 4030e70:	f800283a 	ret

04030e74 <tcp_pulloutofband>:

void
tcp_pulloutofband(struct socket * so, 
   struct tcpiphdr * ti,
   struct mbuf *  m)
{
 4030e74:	defff804 	addi	sp,sp,-32
 4030e78:	dfc00715 	stw	ra,28(sp)
 4030e7c:	df000615 	stw	fp,24(sp)
 4030e80:	df000604 	addi	fp,sp,24
 4030e84:	e13ffd15 	stw	r4,-12(fp)
 4030e88:	e17ffe15 	stw	r5,-8(fp)
 4030e8c:	e1bfff15 	stw	r6,-4(fp)
   int   cnt   =  ti->ti_urp  -  1;
 4030e90:	e0bffe17 	ldw	r2,-8(fp)
 4030e94:	1080098b 	ldhu	r2,38(r2)
 4030e98:	10bfffcc 	andi	r2,r2,65535
 4030e9c:	10bfffc4 	addi	r2,r2,-1
 4030ea0:	e0bffc15 	stw	r2,-16(fp)

   /**m = dtom(ti);**/
   while (cnt >= 0) 
 4030ea4:	00003306 	br	4030f74 <tcp_pulloutofband+0x100>
   {
      if (m->m_len > (unsigned)cnt) 
 4030ea8:	e0bfff17 	ldw	r2,-4(fp)
 4030eac:	10c00217 	ldw	r3,8(r2)
 4030eb0:	e0bffc17 	ldw	r2,-16(fp)
 4030eb4:	10c0242e 	bgeu	r2,r3,4030f48 <tcp_pulloutofband+0xd4>
      {
         char *   cp =  mtod(m,  char *) +  cnt;
 4030eb8:	e0bfff17 	ldw	r2,-4(fp)
 4030ebc:	10c00317 	ldw	r3,12(r2)
 4030ec0:	e0bffc17 	ldw	r2,-16(fp)
 4030ec4:	1885883a 	add	r2,r3,r2
 4030ec8:	e0bffb15 	stw	r2,-20(fp)
         struct tcpcb * tp =  sototcpcb(so);
 4030ecc:	e0bffd17 	ldw	r2,-12(fp)
 4030ed0:	10800117 	ldw	r2,4(r2)
 4030ed4:	10800917 	ldw	r2,36(r2)
 4030ed8:	e0bffa15 	stw	r2,-24(fp)

         tp->t_iobc = *cp;
 4030edc:	e0bffb17 	ldw	r2,-20(fp)
 4030ee0:	10c00003 	ldbu	r3,0(r2)
 4030ee4:	e0bffa17 	ldw	r2,-24(fp)
 4030ee8:	10c02445 	stb	r3,145(r2)
         tp->t_oobflags |= TCPOOB_HAVEDATA;
 4030eec:	e0bffa17 	ldw	r2,-24(fp)
 4030ef0:	10802403 	ldbu	r2,144(r2)
 4030ef4:	10800054 	ori	r2,r2,1
 4030ef8:	1007883a 	mov	r3,r2
 4030efc:	e0bffa17 	ldw	r2,-24(fp)
 4030f00:	10c02405 	stb	r3,144(r2)
         MEMCPY(cp, cp+1, (unsigned)(m->m_len - cnt - 1));
 4030f04:	e0bffb17 	ldw	r2,-20(fp)
 4030f08:	11400044 	addi	r5,r2,1
 4030f0c:	e0bfff17 	ldw	r2,-4(fp)
 4030f10:	10c00217 	ldw	r3,8(r2)
 4030f14:	e0bffc17 	ldw	r2,-16(fp)
 4030f18:	1885c83a 	sub	r2,r3,r2
 4030f1c:	10ffffc4 	addi	r3,r2,-1
 4030f20:	e0bffb17 	ldw	r2,-20(fp)
 4030f24:	1009883a 	mov	r4,r2
 4030f28:	180d883a 	mov	r6,r3
 4030f2c:	4001de40 	call	4001de4 <memcpy>
         m->m_len--;
 4030f30:	e0bfff17 	ldw	r2,-4(fp)
 4030f34:	10800217 	ldw	r2,8(r2)
 4030f38:	10ffffc4 	addi	r3,r2,-1
 4030f3c:	e0bfff17 	ldw	r2,-4(fp)
 4030f40:	10c00215 	stw	r3,8(r2)
         return;
 4030f44:	00001106 	br	4030f8c <tcp_pulloutofband+0x118>
      }
      cnt -= m->m_len;
 4030f48:	e0fffc17 	ldw	r3,-16(fp)
 4030f4c:	e0bfff17 	ldw	r2,-4(fp)
 4030f50:	10800217 	ldw	r2,8(r2)
 4030f54:	1885c83a 	sub	r2,r3,r2
 4030f58:	e0bffc15 	stw	r2,-16(fp)
      m = m->m_next;
 4030f5c:	e0bfff17 	ldw	r2,-4(fp)
 4030f60:	10800617 	ldw	r2,24(r2)
 4030f64:	e0bfff15 	stw	r2,-4(fp)
      if (m == 0)
 4030f68:	e0bfff17 	ldw	r2,-4(fp)
 4030f6c:	1005003a 	cmpeq	r2,r2,zero
 4030f70:	1000031e 	bne	r2,zero,4030f80 <tcp_pulloutofband+0x10c>
   struct mbuf *  m)
{
   int   cnt   =  ti->ti_urp  -  1;

   /**m = dtom(ti);**/
   while (cnt >= 0) 
 4030f74:	e0bffc17 	ldw	r2,-16(fp)
 4030f78:	1004403a 	cmpge	r2,r2,zero
 4030f7c:	103fca1e 	bne	r2,zero,4030ea8 <tcp_pulloutofband+0x34>
      cnt -= m->m_len;
      m = m->m_next;
      if (m == 0)
         break;
   }
   panic("tcp_pulloutofband");
 4030f80:	01010174 	movhi	r4,1029
 4030f84:	212e7104 	addi	r4,r4,-17980
 4030f88:	4020e100 	call	4020e10 <panic>
}
 4030f8c:	e037883a 	mov	sp,fp
 4030f90:	dfc00117 	ldw	ra,4(sp)
 4030f94:	df000017 	ldw	fp,0(sp)
 4030f98:	dec00204 	addi	sp,sp,8
 4030f9c:	f800283a 	ret

04030fa0 <tcp_xmit_timer>:
 * RETURNS: 
 */

void
tcp_xmit_timer(struct tcpcb * tp)
{
 4030fa0:	defffb04 	addi	sp,sp,-20
 4030fa4:	dfc00415 	stw	ra,16(sp)
 4030fa8:	df000315 	stw	fp,12(sp)
 4030fac:	df000304 	addi	fp,sp,12
 4030fb0:	e13fff15 	stw	r4,-4(fp)
   int delta;
   int rtt;

#ifdef NPDEBUG
   if(tp->t_rttick == 0){ dtrap(); return; }
 4030fb4:	e0bfff17 	ldw	r2,-4(fp)
 4030fb8:	10801e17 	ldw	r2,120(r2)
 4030fbc:	1004c03a 	cmpne	r2,r2,zero
 4030fc0:	1000021e 	bne	r2,zero,4030fcc <tcp_xmit_timer+0x2c>
 4030fc4:	4025bb40 	call	4025bb4 <dtrap>
 4030fc8:	00008b06 	br	40311f8 <tcp_xmit_timer+0x258>
#endif

   tcpstat.tcps_rttupdated++;
 4030fcc:	008101b4 	movhi	r2,1030
 4030fd0:	10a37804 	addi	r2,r2,-29216
 4030fd4:	10800717 	ldw	r2,28(r2)
 4030fd8:	10c00044 	addi	r3,r2,1
 4030fdc:	008101b4 	movhi	r2,1030
 4030fe0:	10a37804 	addi	r2,r2,-29216
 4030fe4:	10c00715 	stw	r3,28(r2)

   /* get  this rtt. Convert from cticks to TCP slow ticks */
   rtt = (int)((cticks - tp->t_rttick) / (TPS/2));
 4030fe8:	00810174 	movhi	r2,1029
 4030fec:	1081e404 	addi	r2,r2,1936
 4030ff0:	10c00017 	ldw	r3,0(r2)
 4030ff4:	e0bfff17 	ldw	r2,-4(fp)
 4030ff8:	10801e17 	ldw	r2,120(r2)
 4030ffc:	1887c83a 	sub	r3,r3,r2
 4031000:	00800c84 	movi	r2,50
 4031004:	1885203a 	divu	r2,r3,r2
 4031008:	e0bffd15 	stw	r2,-12(fp)
   if(tp->t_srtt != 0)
 403100c:	e0bfff17 	ldw	r2,-4(fp)
 4031010:	10802017 	ldw	r2,128(r2)
 4031014:	1005003a 	cmpeq	r2,r2,zero
 4031018:	10004a1e 	bne	r2,zero,4031144 <tcp_xmit_timer+0x1a4>
   {
      if(rtt == 0)      /* fast path for small round trip */
 403101c:	e0bffd17 	ldw	r2,-12(fp)
 4031020:	1004c03a 	cmpne	r2,r2,zero
 4031024:	1000131e 	bne	r2,zero,4031074 <tcp_xmit_timer+0xd4>
      {
         /* if either the rtt or varience is over 1, reduce it. */
         if(tp->t_srtt > 1)
 4031028:	e0bfff17 	ldw	r2,-4(fp)
 403102c:	10802017 	ldw	r2,128(r2)
 4031030:	10800090 	cmplti	r2,r2,2
 4031034:	1000051e 	bne	r2,zero,403104c <tcp_xmit_timer+0xac>
            tp->t_srtt--;
 4031038:	e0bfff17 	ldw	r2,-4(fp)
 403103c:	10802017 	ldw	r2,128(r2)
 4031040:	10ffffc4 	addi	r3,r2,-1
 4031044:	e0bfff17 	ldw	r2,-4(fp)
 4031048:	10c02015 	stw	r3,128(r2)
         if(tp->t_rttvar > 1)
 403104c:	e0bfff17 	ldw	r2,-4(fp)
 4031050:	10802117 	ldw	r2,132(r2)
 4031054:	10800090 	cmplti	r2,r2,2
 4031058:	1000481e 	bne	r2,zero,403117c <tcp_xmit_timer+0x1dc>
            tp->t_rttvar--;
 403105c:	e0bfff17 	ldw	r2,-4(fp)
 4031060:	10802117 	ldw	r2,132(r2)
 4031064:	10ffffc4 	addi	r3,r2,-1
 4031068:	e0bfff17 	ldw	r2,-4(fp)
 403106c:	10c02115 	stw	r3,132(r2)
 4031070:	00004206 	br	403117c <tcp_xmit_timer+0x1dc>
       * The following magic is equivalent
       * to the smoothing algorithm in rfc793
       * with an alpha of .875
       * (srtt = rtt/8 + srtt*7/8 in fixed point).
       */
      delta = ((rtt - 1) << 2) - (int)(tp->t_srtt >> 3);
 4031074:	e0bffd17 	ldw	r2,-12(fp)
 4031078:	10bfffc4 	addi	r2,r2,-1
 403107c:	1085883a 	add	r2,r2,r2
 4031080:	1085883a 	add	r2,r2,r2
 4031084:	1007883a 	mov	r3,r2
 4031088:	e0bfff17 	ldw	r2,-4(fp)
 403108c:	10802017 	ldw	r2,128(r2)
 4031090:	1005d0fa 	srai	r2,r2,3
 4031094:	1885c83a 	sub	r2,r3,r2
 4031098:	e0bffe15 	stw	r2,-8(fp)
      if ((tp->t_srtt += delta) <= 0)
 403109c:	e0bfff17 	ldw	r2,-4(fp)
 40310a0:	10c02017 	ldw	r3,128(r2)
 40310a4:	e0bffe17 	ldw	r2,-8(fp)
 40310a8:	1887883a 	add	r3,r3,r2
 40310ac:	e0bfff17 	ldw	r2,-4(fp)
 40310b0:	10c02015 	stw	r3,128(r2)
 40310b4:	e0bfff17 	ldw	r2,-4(fp)
 40310b8:	10802017 	ldw	r2,128(r2)
 40310bc:	10800048 	cmpgei	r2,r2,1
 40310c0:	1000031e 	bne	r2,zero,40310d0 <tcp_xmit_timer+0x130>
         tp->t_srtt = 1;
 40310c4:	e0ffff17 	ldw	r3,-4(fp)
 40310c8:	00800044 	movi	r2,1
 40310cc:	18802015 	stw	r2,128(r3)
       * (scaled by 4).  The following is equivalent
       * to rfc793 smoothing with an alpha of .75
       * (rttvar = rttvar*3/4 + |delta| / 4).
       * This replaces rfc793's wired-in beta.
       */
      if (delta < 0)
 40310d0:	e0bffe17 	ldw	r2,-8(fp)
 40310d4:	1004403a 	cmpge	r2,r2,zero
 40310d8:	1000031e 	bne	r2,zero,40310e8 <tcp_xmit_timer+0x148>
         delta = -delta;
 40310dc:	e0bffe17 	ldw	r2,-8(fp)
 40310e0:	0085c83a 	sub	r2,zero,r2
 40310e4:	e0bffe15 	stw	r2,-8(fp)
      delta -= (short)(tp->t_rttvar >> 1);
 40310e8:	e0bfff17 	ldw	r2,-4(fp)
 40310ec:	10802117 	ldw	r2,132(r2)
 40310f0:	1005d07a 	srai	r2,r2,1
 40310f4:	10ffffcc 	andi	r3,r2,65535
 40310f8:	18e0001c 	xori	r3,r3,32768
 40310fc:	18e00004 	addi	r3,r3,-32768
 4031100:	e0bffe17 	ldw	r2,-8(fp)
 4031104:	10c5c83a 	sub	r2,r2,r3
 4031108:	e0bffe15 	stw	r2,-8(fp)
      if ((tp->t_rttvar += delta) <= 0)
 403110c:	e0bfff17 	ldw	r2,-4(fp)
 4031110:	10c02117 	ldw	r3,132(r2)
 4031114:	e0bffe17 	ldw	r2,-8(fp)
 4031118:	1887883a 	add	r3,r3,r2
 403111c:	e0bfff17 	ldw	r2,-4(fp)
 4031120:	10c02115 	stw	r3,132(r2)
 4031124:	e0bfff17 	ldw	r2,-4(fp)
 4031128:	10802117 	ldw	r2,132(r2)
 403112c:	10800048 	cmpgei	r2,r2,1
 4031130:	1000121e 	bne	r2,zero,403117c <tcp_xmit_timer+0x1dc>
         tp->t_rttvar = 1;
 4031134:	e0ffff17 	ldw	r3,-4(fp)
 4031138:	00800044 	movi	r2,1
 403113c:	18802115 	stw	r2,132(r3)
 4031140:	00000e06 	br	403117c <tcp_xmit_timer+0x1dc>
       * No rtt measurement yet - use the
       * unsmoothed rtt.  Set the variance
       * to half the rtt (so our first
       * retransmit happens at 2*rtt)
       */
      if(rtt < 1)
 4031144:	e0bffd17 	ldw	r2,-12(fp)
 4031148:	10800048 	cmpgei	r2,r2,1
 403114c:	1000021e 	bne	r2,zero,4031158 <tcp_xmit_timer+0x1b8>
         rtt = 1;
 4031150:	00800044 	movi	r2,1
 4031154:	e0bffd15 	stw	r2,-12(fp)
      tp->t_srtt = rtt << 3;
 4031158:	e0bffd17 	ldw	r2,-12(fp)
 403115c:	100690fa 	slli	r3,r2,3
 4031160:	e0bfff17 	ldw	r2,-4(fp)
 4031164:	10c02015 	stw	r3,128(r2)
      tp->t_rttvar = rtt << 1;
 4031168:	e0bffd17 	ldw	r2,-12(fp)
 403116c:	1085883a 	add	r2,r2,r2
 4031170:	1007883a 	mov	r3,r2
 4031174:	e0bfff17 	ldw	r2,-4(fp)
 4031178:	10c02115 	stw	r3,132(r2)
   }
   tp->t_rttick = 0;       /* clear RT timer */
 403117c:	e0bfff17 	ldw	r2,-4(fp)
 4031180:	10001e15 	stw	zero,120(r2)
   tp->t_rxtshift = 0;
 4031184:	e0bfff17 	ldw	r2,-4(fp)
 4031188:	10000715 	stw	zero,28(r2)
   TCPT_RANGESET(tp->t_rxtcur, 
 403118c:	e0bfff17 	ldw	r2,-4(fp)
 4031190:	10802017 	ldw	r2,128(r2)
 4031194:	1007d0ba 	srai	r3,r2,2
 4031198:	e0bfff17 	ldw	r2,-4(fp)
 403119c:	10802117 	ldw	r2,132(r2)
 40311a0:	1885883a 	add	r2,r3,r2
 40311a4:	1005d07a 	srai	r2,r2,1
 40311a8:	10ffffcc 	andi	r3,r2,65535
 40311ac:	18e0001c 	xori	r3,r3,32768
 40311b0:	18e00004 	addi	r3,r3,-32768
 40311b4:	e0bfff17 	ldw	r2,-4(fp)
 40311b8:	10c00815 	stw	r3,32(r2)
 40311bc:	e0bfff17 	ldw	r2,-4(fp)
 40311c0:	10800817 	ldw	r2,32(r2)
 40311c4:	10800088 	cmpgei	r2,r2,2
 40311c8:	1000041e 	bne	r2,zero,40311dc <tcp_xmit_timer+0x23c>
 40311cc:	e0ffff17 	ldw	r3,-4(fp)
 40311d0:	00800084 	movi	r2,2
 40311d4:	18800815 	stw	r2,32(r3)
 40311d8:	00000706 	br	40311f8 <tcp_xmit_timer+0x258>
 40311dc:	e0bfff17 	ldw	r2,-4(fp)
 40311e0:	10800817 	ldw	r2,32(r2)
 40311e4:	10802050 	cmplti	r2,r2,129
 40311e8:	1000031e 	bne	r2,zero,40311f8 <tcp_xmit_timer+0x258>
 40311ec:	e0ffff17 	ldw	r3,-4(fp)
 40311f0:	00802004 	movi	r2,128
 40311f4:	18800815 	stw	r2,32(r3)
    ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1,
    TCPTV_MIN, TCPTV_REXMTMAX);
}
 40311f8:	e037883a 	mov	sp,fp
 40311fc:	dfc00117 	ldw	ra,4(sp)
 4031200:	df000017 	ldw	fp,0(sp)
 4031204:	dec00204 	addi	sp,sp,8
 4031208:	f800283a 	ret

0403120c <ip4_tcpmss>:


#ifdef IP_V4
int
ip4_tcpmss(struct socket * so)
{
 403120c:	defffd04 	addi	sp,sp,-12
 4031210:	df000215 	stw	fp,8(sp)
 4031214:	df000204 	addi	fp,sp,8
 4031218:	e13fff15 	stw	r4,-4(fp)
   NET ifp;

   ifp = so->so_pcb->ifp;
 403121c:	e0bfff17 	ldw	r2,-4(fp)
 4031220:	10800117 	ldw	r2,4(r2)
 4031224:	10800a17 	ldw	r2,40(r2)
 4031228:	e0bffe15 	stw	r2,-8(fp)
   return(ifp->n_mtu - (40 + ifp->n_lnh));
 403122c:	e0bffe17 	ldw	r2,-8(fp)
 4031230:	10c00917 	ldw	r3,36(r2)
 4031234:	e0bffe17 	ldw	r2,-8(fp)
 4031238:	10800817 	ldw	r2,32(r2)
 403123c:	1885c83a 	sub	r2,r3,r2
 4031240:	10bff604 	addi	r2,r2,-40
}
 4031244:	e037883a 	mov	sp,fp
 4031248:	df000017 	ldw	fp,0(sp)
 403124c:	dec00104 	addi	sp,sp,4
 4031250:	f800283a 	ret

04031254 <tcp_mss>:
 */


int
tcp_mss(struct socket * so)
{
 4031254:	defff904 	addi	sp,sp,-28
 4031258:	dfc00615 	stw	ra,24(sp)
 403125c:	df000515 	stw	fp,20(sp)
 4031260:	df000504 	addi	fp,sp,20
 4031264:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp;
#ifdef IP_V6
   NET  ifp = 0;
#endif

   if ((so == NULL) ||
 4031268:	e0bffe17 	ldw	r2,-8(fp)
 403126c:	1005003a 	cmpeq	r2,r2,zero
 4031270:	1000091e 	bne	r2,zero,4031298 <tcp_mss+0x44>
 4031274:	e0bffe17 	ldw	r2,-8(fp)
 4031278:	10800117 	ldw	r2,4(r2)
 403127c:	1005003a 	cmpeq	r2,r2,zero
 4031280:	1000051e 	bne	r2,zero,4031298 <tcp_mss+0x44>
 4031284:	e0bffe17 	ldw	r2,-8(fp)
 4031288:	10800117 	ldw	r2,4(r2)
 403128c:	10800a17 	ldw	r2,40(r2)
 4031290:	1004c03a 	cmpne	r2,r2,zero
 4031294:	1000071e 	bne	r2,zero,40312b4 <tcp_mss+0x60>
       (so->so_pcb == NULL) ||
       (so->so_pcb->ifp == NULL))
   {
      if (so->so_domain == AF_INET)  /* IPv4 */
 4031298:	e0bffe17 	ldw	r2,-8(fp)
 403129c:	10800517 	ldw	r2,20(r2)
 40312a0:	10800098 	cmpnei	r2,r2,2
 40312a4:	1000031e 	bne	r2,zero,40312b4 <tcp_mss+0x60>
         return TCP_MSS;            /* user defined */
 40312a8:	00816d04 	movi	r2,1460
 40312ac:	e0bfff15 	stw	r2,-4(fp)
 40312b0:	00002906 	br	4031358 <tcp_mss+0x104>
#endif   /* IP_V6 */


#ifdef IP_V4   /* Begin messy domain defines */
#ifndef IP_V6  /* V4 only version */
   mss = ip4_tcpmss(so);
 40312b4:	e13ffe17 	ldw	r4,-8(fp)
 40312b8:	403120c0 	call	403120c <ip4_tcpmss>
 40312bc:	e0bffd15 	stw	r2,-12(fp)
#endif         /* end of dual mode */
#else          /* no IP_v4, assume V6 only */
      mss = ip6_tcpmss(so, ifp);
#endif         /* end messy domain defines */

   if (mss > TCP_MSS)    /* check upper limit from compile */
 40312c0:	e0bffd17 	ldw	r2,-12(fp)
 40312c4:	10816d50 	cmplti	r2,r2,1461
 40312c8:	1000021e 	bne	r2,zero,40312d4 <tcp_mss+0x80>
      mss = TCP_MSS;
 40312cc:	00816d04 	movi	r2,1460
 40312d0:	e0bffd15 	stw	r2,-12(fp)

   /* check upper limit which may be set by setsockopt() */
   inp = (struct inpcb *)so->so_pcb;         /* Map socket to IP cb */
 40312d4:	e0bffe17 	ldw	r2,-8(fp)
 40312d8:	10800117 	ldw	r2,4(r2)
 40312dc:	e0bffc15 	stw	r2,-16(fp)
   tp = (struct tcpcb *)inp->inp_ppcb;       /* Map IP to TCP cb */
 40312e0:	e0bffc17 	ldw	r2,-16(fp)
 40312e4:	10800917 	ldw	r2,36(r2)
 40312e8:	e0bffb15 	stw	r2,-20(fp)
   
   /* has user set max seg? */
   if (tp->t_flags & TF_MAXSEG)
 40312ec:	e0bffb17 	ldw	r2,-20(fp)
 40312f0:	10800b0b 	ldhu	r2,44(r2)
 40312f4:	10bfffcc 	andi	r2,r2,65535
 40312f8:	1081000c 	andi	r2,r2,1024
 40312fc:	1005003a 	cmpeq	r2,r2,zero
 4031300:	1000051e 	bne	r2,zero,4031318 <tcp_mss+0xc4>
      return tp->t_maxseg;    /* yup */
 4031304:	e0bffb17 	ldw	r2,-20(fp)
 4031308:	10800a0b 	ldhu	r2,40(r2)
 403130c:	10bfffcc 	andi	r2,r2,65535
 4031310:	e0bfff15 	stw	r2,-4(fp)
 4031314:	00001006 	br	4031358 <tcp_mss+0x104>
      
   if (tp->t_maxseg && (mss > tp->t_maxseg))  /* check tcp's mss */
 4031318:	e0bffb17 	ldw	r2,-20(fp)
 403131c:	10800a0b 	ldhu	r2,40(r2)
 4031320:	10bfffcc 	andi	r2,r2,65535
 4031324:	1005003a 	cmpeq	r2,r2,zero
 4031328:	1000091e 	bne	r2,zero,4031350 <tcp_mss+0xfc>
 403132c:	e0bffb17 	ldw	r2,-20(fp)
 4031330:	10800a0b 	ldhu	r2,40(r2)
 4031334:	10ffffcc 	andi	r3,r2,65535
 4031338:	e0bffd17 	ldw	r2,-12(fp)
 403133c:	1880040e 	bge	r3,r2,4031350 <tcp_mss+0xfc>
   {
      mss = tp->t_maxseg;        /* limit new MSS to set MSS */
 4031340:	e0bffb17 	ldw	r2,-20(fp)
 4031344:	10800a0b 	ldhu	r2,40(r2)
 4031348:	10bfffcc 	andi	r2,r2,65535
 403134c:	e0bffd15 	stw	r2,-12(fp)
   }

   return mss;
 4031350:	e0bffd17 	ldw	r2,-12(fp)
 4031354:	e0bfff15 	stw	r2,-4(fp)
 4031358:	e0bfff17 	ldw	r2,-4(fp)
}
 403135c:	e037883a 	mov	sp,fp
 4031360:	dfc00117 	ldw	ra,4(sp)
 4031364:	df000017 	ldw	fp,0(sp)
 4031368:	dec00204 	addi	sp,sp,8
 403136c:	f800283a 	ret

04031370 <tcp_output>:
 * RETURNS: 0 if OK, else a sockets error code.
 */

int
tcp_output(struct tcpcb * tp)
{
 4031370:	deffe004 	addi	sp,sp,-128
 4031374:	dfc01f15 	stw	ra,124(sp)
 4031378:	df001e15 	stw	fp,120(sp)
 403137c:	df001e04 	addi	fp,sp,120
 4031380:	e13ff715 	stw	r4,-36(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4031384:	e0bff717 	ldw	r2,-36(fp)
 4031388:	10800d17 	ldw	r2,52(r2)
 403138c:	10800817 	ldw	r2,32(r2)
 4031390:	e0bff515 	stw	r2,-44(fp)
   int   len;
   long  win;
   int   off,  flags,   error;
   struct mbuf *  m;
   struct tcpiphdr * ti;
   unsigned optlen = 0;
 4031394:	e03fed15 	stw	zero,-76(fp)
    * Determine length of data that should be transmitted,
    * and flags that will be used.
    * If there is some data or critical controls (SYN, RST)
    * to send, then transmit; otherwise, investigate further.
    */
   idle = (tp->snd_max == tp->snd_una);
 4031398:	e0bff717 	ldw	r2,-36(fp)
 403139c:	10c01a17 	ldw	r3,104(r2)
 40313a0:	e0bff717 	ldw	r2,-36(fp)
 40313a4:	10800e17 	ldw	r2,56(r2)
 40313a8:	1885003a 	cmpeq	r2,r3,r2
 40313ac:	e0bfec15 	stw	r2,-80(fp)

again:
   sendalot = 0;
 40313b0:	e03feb15 	stw	zero,-84(fp)
   off = (int)(tp->snd_nxt - tp->snd_una);
 40313b4:	e0bff717 	ldw	r2,-36(fp)
 40313b8:	10c00f17 	ldw	r3,60(r2)
 40313bc:	e0bff717 	ldw	r2,-36(fp)
 40313c0:	10800e17 	ldw	r2,56(r2)
 40313c4:	1885c83a 	sub	r2,r3,r2
 40313c8:	e0bff215 	stw	r2,-56(fp)
   win = (long)tp->snd_wnd;   /* set basic send window */
 40313cc:	e0bff717 	ldw	r2,-36(fp)
 40313d0:	10801417 	ldw	r2,80(r2)
 40313d4:	e0bff315 	stw	r2,-52(fp)
   if (win > (long)tp->snd_cwnd) /* see if we need congestion control */
 40313d8:	e0bff717 	ldw	r2,-36(fp)
 40313dc:	10801b17 	ldw	r2,108(r2)
 40313e0:	1007883a 	mov	r3,r2
 40313e4:	e0bff317 	ldw	r2,-52(fp)
 40313e8:	1880060e 	bge	r3,r2,4031404 <tcp_output+0x94>
   {
      win = (int)(tp->snd_cwnd & ~(ALIGN_TYPE-1)); /* keep data aligned */
 40313ec:	e0bff717 	ldw	r2,-36(fp)
 40313f0:	10801b17 	ldw	r2,108(r2)
 40313f4:	1007883a 	mov	r3,r2
 40313f8:	00bfff04 	movi	r2,-4
 40313fc:	1884703a 	and	r2,r3,r2
 4031400:	e0bff315 	stw	r2,-52(fp)
    * If in persist timeout with window of 0, send 1 byte.
    * Otherwise, if window is small but nonzero
    * and timer expired, we will send what we can
    * and go to transmit state.
    */
   if (tp->t_force) 
 4031404:	e0bff717 	ldw	r2,-36(fp)
 4031408:	10800a83 	ldbu	r2,42(r2)
 403140c:	10803fcc 	andi	r2,r2,255
 4031410:	1080201c 	xori	r2,r2,128
 4031414:	10bfe004 	addi	r2,r2,-128
 4031418:	1005003a 	cmpeq	r2,r2,zero
 403141c:	10000a1e 	bne	r2,zero,4031448 <tcp_output+0xd8>
   {
      if (win == 0)
 4031420:	e0bff317 	ldw	r2,-52(fp)
 4031424:	1004c03a 	cmpne	r2,r2,zero
 4031428:	1000031e 	bne	r2,zero,4031438 <tcp_output+0xc8>
         win = 1;
 403142c:	00800044 	movi	r2,1
 4031430:	e0bff315 	stw	r2,-52(fp)
 4031434:	00000406 	br	4031448 <tcp_output+0xd8>
      else 
      {
         tp->t_timer[TCPT_PERSIST] = 0;
 4031438:	e0bff717 	ldw	r2,-36(fp)
 403143c:	10000415 	stw	zero,16(r2)
         tp->t_rxtshift = 0;
 4031440:	e0bff717 	ldw	r2,-36(fp)
 4031444:	10000715 	stw	zero,28(r2)
   }
   else
#endif /* TCP_SACK */
   {
      /* set length of packets which are not sack resends */
      len = (int)MIN(so->so_snd.sb_cc, (unsigned)win) - off;
 4031448:	e0bff517 	ldw	r2,-44(fp)
 403144c:	10801217 	ldw	r2,72(r2)
 4031450:	e0fff317 	ldw	r3,-52(fp)
 4031454:	e0fffb15 	stw	r3,-20(fp)
 4031458:	e0bffa15 	stw	r2,-24(fp)
 403145c:	e0bffb17 	ldw	r2,-20(fp)
 4031460:	e0fffa17 	ldw	r3,-24(fp)
 4031464:	10c0022e 	bgeu	r2,r3,4031470 <tcp_output+0x100>
 4031468:	e0bffb17 	ldw	r2,-20(fp)
 403146c:	e0bffa15 	stw	r2,-24(fp)
 4031470:	e0fffa17 	ldw	r3,-24(fp)
 4031474:	e0bff217 	ldw	r2,-56(fp)
 4031478:	1885c83a 	sub	r2,r3,r2
 403147c:	e0bff415 	stw	r2,-48(fp)
   }

   flags = tcp_outflags[tp->t_state];
 4031480:	e0bff717 	ldw	r2,-36(fp)
 4031484:	10c00217 	ldw	r3,8(r2)
 4031488:	00810174 	movhi	r2,1029
 403148c:	10b8ea04 	addi	r2,r2,-7256
 4031490:	10c5883a 	add	r2,r2,r3
 4031494:	10800003 	ldbu	r2,0(r2)
 4031498:	10803fcc 	andi	r2,r2,255
 403149c:	e0bff115 	stw	r2,-60(fp)
   }
#else
   /* If other options not defined this build then don't bother to call bld_options() except 
    * on SYN packets
    */
   if(flags & TH_SYN)
 40314a0:	e0bff117 	ldw	r2,-60(fp)
 40314a4:	1080008c 	andi	r2,r2,2
 40314a8:	1005003a 	cmpeq	r2,r2,zero
 40314ac:	1000081e 	bne	r2,zero,40314d0 <tcp_output+0x160>
   {
      optlen = bld_options(tp, &tcp_optionbuf[optlen], flags, so);
 40314b0:	e0ffed17 	ldw	r3,-76(fp)
 40314b4:	d0a83104 	addi	r2,gp,-24380
 40314b8:	188b883a 	add	r5,r3,r2
 40314bc:	e13ff717 	ldw	r4,-36(fp)
 40314c0:	e1bff117 	ldw	r6,-60(fp)
 40314c4:	e1fff517 	ldw	r7,-44(fp)
 40314c8:	40325e80 	call	40325e8 <bld_options>
 40314cc:	e0bfed15 	stw	r2,-76(fp)
   }
#endif

   if (len < 0)
 40314d0:	e0bff417 	ldw	r2,-48(fp)
 40314d4:	1004403a 	cmpge	r2,r2,zero
 40314d8:	10000a1e 	bne	r2,zero,4031504 <tcp_output+0x194>
       * cancel pending retransmit and pull snd_nxt
       * back to (closed) window.  We will enter persist
       * state below.  If the window didn't close completely,
       * just wait for an ACK.
       */
      len = 0;
 40314dc:	e03ff415 	stw	zero,-48(fp)
      if (win == 0) 
 40314e0:	e0bff317 	ldw	r2,-52(fp)
 40314e4:	1004c03a 	cmpne	r2,r2,zero
 40314e8:	1000061e 	bne	r2,zero,4031504 <tcp_output+0x194>
      {
         tp->t_timer[TCPT_REXMT] = 0;
 40314ec:	e0bff717 	ldw	r2,-36(fp)
 40314f0:	10000315 	stw	zero,12(r2)
         tp->snd_nxt = tp->snd_una;
 40314f4:	e0bff717 	ldw	r2,-36(fp)
 40314f8:	10c00e17 	ldw	r3,56(r2)
 40314fc:	e0bff717 	ldw	r2,-36(fp)
 4031500:	10c00f15 	stw	r3,60(r2)
      }
   }

   if (len > (int)tp->t_maxseg)
 4031504:	e0bff717 	ldw	r2,-36(fp)
 4031508:	10800a0b 	ldhu	r2,40(r2)
 403150c:	10ffffcc 	andi	r3,r2,65535
 4031510:	e0bff417 	ldw	r2,-48(fp)
 4031514:	1880060e 	bge	r3,r2,4031530 <tcp_output+0x1c0>
   {
      len = tp->t_maxseg;
 4031518:	e0bff717 	ldw	r2,-36(fp)
 403151c:	10800a0b 	ldhu	r2,40(r2)
 4031520:	10bfffcc 	andi	r2,r2,65535
 4031524:	e0bff415 	stw	r2,-48(fp)
      sendalot = 1;
 4031528:	00800044 	movi	r2,1
 403152c:	e0bfeb15 	stw	r2,-84(fp)
   /* We don't need a pmtu test for IPv6. V6 code limits t_maxseg to
    * the Path MTU, so the test above the v4 ifdef above covers us.
    */
#endif /* IP_V4 */

   if (SEQ_LT(tp->snd_nxt + len, tp->snd_una + so->so_snd.sb_cc))
 4031530:	e0bff717 	ldw	r2,-36(fp)
 4031534:	10c00f17 	ldw	r3,60(r2)
 4031538:	e0bff417 	ldw	r2,-48(fp)
 403153c:	1889883a 	add	r4,r3,r2
 4031540:	e0bff717 	ldw	r2,-36(fp)
 4031544:	10c00e17 	ldw	r3,56(r2)
 4031548:	e0bff517 	ldw	r2,-44(fp)
 403154c:	10801217 	ldw	r2,72(r2)
 4031550:	1885883a 	add	r2,r3,r2
 4031554:	2085c83a 	sub	r2,r4,r2
 4031558:	1004403a 	cmpge	r2,r2,zero
 403155c:	1000041e 	bne	r2,zero,4031570 <tcp_output+0x200>
      flags &= ~TH_FIN;
 4031560:	e0bff117 	ldw	r2,-60(fp)
 4031564:	00ffff84 	movi	r3,-2
 4031568:	10c4703a 	and	r2,r2,r3
 403156c:	e0bff115 	stw	r2,-60(fp)
   win = (long)(sbspace(&so->so_rcv));
 4031570:	e0bff517 	ldw	r2,-44(fp)
 4031574:	10800b17 	ldw	r2,44(r2)
 4031578:	1007883a 	mov	r3,r2
 403157c:	e0bff517 	ldw	r2,-44(fp)
 4031580:	10800a17 	ldw	r2,40(r2)
 4031584:	1885c83a 	sub	r2,r3,r2
 4031588:	1004803a 	cmplt	r2,r2,zero
 403158c:	1000071e 	bne	r2,zero,40315ac <tcp_output+0x23c>
 4031590:	e0bff517 	ldw	r2,-44(fp)
 4031594:	10c00b17 	ldw	r3,44(r2)
 4031598:	e0bff517 	ldw	r2,-44(fp)
 403159c:	10800a17 	ldw	r2,40(r2)
 40315a0:	1885c83a 	sub	r2,r3,r2
 40315a4:	e0bff915 	stw	r2,-28(fp)
 40315a8:	00000106 	br	40315b0 <tcp_output+0x240>
 40315ac:	e03ff915 	stw	zero,-28(fp)
 40315b0:	e0fff917 	ldw	r3,-28(fp)
 40315b4:	e0fff315 	stw	r3,-52(fp)
   /*
    * If our state indicates that FIN should be sent
    * and we have not yet done so, or we're retransmitting the FIN,
    * then we need to send.
    */
   if ((flags & TH_FIN) &&
 40315b8:	e0bff117 	ldw	r2,-60(fp)
 40315bc:	1080004c 	andi	r2,r2,1
 40315c0:	10803fcc 	andi	r2,r2,255
 40315c4:	1005003a 	cmpeq	r2,r2,zero
 40315c8:	10000f1e 	bne	r2,zero,4031608 <tcp_output+0x298>
 40315cc:	e0bff517 	ldw	r2,-44(fp)
 40315d0:	10801217 	ldw	r2,72(r2)
 40315d4:	1004c03a 	cmpne	r2,r2,zero
 40315d8:	10000b1e 	bne	r2,zero,4031608 <tcp_output+0x298>
 40315dc:	e0bff717 	ldw	r2,-36(fp)
 40315e0:	10800b0b 	ldhu	r2,44(r2)
 40315e4:	10bfffcc 	andi	r2,r2,65535
 40315e8:	1080040c 	andi	r2,r2,16
 40315ec:	1005003a 	cmpeq	r2,r2,zero
 40315f0:	1000721e 	bne	r2,zero,40317bc <tcp_output+0x44c>
 40315f4:	e0bff717 	ldw	r2,-36(fp)
 40315f8:	10c00f17 	ldw	r3,60(r2)
 40315fc:	e0bff717 	ldw	r2,-36(fp)
 4031600:	10800e17 	ldw	r2,56(r2)
 4031604:	18806d26 	beq	r3,r2,40317bc <tcp_output+0x44c>
      goto send;
   }
   /*
    * Send if we owe peer an ACK.
    */
   if (tp->t_flags & TF_ACKNOW)
 4031608:	e0bff717 	ldw	r2,-36(fp)
 403160c:	10800b0b 	ldhu	r2,44(r2)
 4031610:	10bfffcc 	andi	r2,r2,65535
 4031614:	1080004c 	andi	r2,r2,1
 4031618:	10803fcc 	andi	r2,r2,255
 403161c:	1004c03a 	cmpne	r2,r2,zero
 4031620:	1000661e 	bne	r2,zero,40317bc <tcp_output+0x44c>
      goto send;
   if (flags & (TH_SYN|TH_RST))
 4031624:	e0bff117 	ldw	r2,-60(fp)
 4031628:	1080018c 	andi	r2,r2,6
 403162c:	1004c03a 	cmpne	r2,r2,zero
 4031630:	1000621e 	bne	r2,zero,40317bc <tcp_output+0x44c>
      goto send;
   if (SEQ_GT(tp->snd_up, tp->snd_una))
 4031634:	e0bff717 	ldw	r2,-36(fp)
 4031638:	10c01017 	ldw	r3,64(r2)
 403163c:	e0bff717 	ldw	r2,-36(fp)
 4031640:	10800e17 	ldw	r2,56(r2)
 4031644:	1885c83a 	sub	r2,r3,r2
 4031648:	10800048 	cmpgei	r2,r2,1
 403164c:	10005b1e 	bne	r2,zero,40317bc <tcp_output+0x44c>
    * If peer's buffer is tiny, then send
    * when window is at least half open.
    * If retransmitting (possibly after persist timer forced us
    * to send into a small window), then must resend.
    */
   if (len)
 4031650:	e0bff417 	ldw	r2,-48(fp)
 4031654:	1005003a 	cmpeq	r2,r2,zero
 4031658:	1000281e 	bne	r2,zero,40316fc <tcp_output+0x38c>
   {
      if (len == (int)tp->t_maxseg)
 403165c:	e0bff717 	ldw	r2,-36(fp)
 4031660:	10800a0b 	ldhu	r2,40(r2)
 4031664:	10ffffcc 	andi	r3,r2,65535
 4031668:	e0bff417 	ldw	r2,-48(fp)
 403166c:	18805326 	beq	r3,r2,40317bc <tcp_output+0x44c>
         goto send;
      if ((idle || tp->t_flags & TF_NODELAY) &&
 4031670:	e0bfec17 	ldw	r2,-80(fp)
 4031674:	1004c03a 	cmpne	r2,r2,zero
 4031678:	1000061e 	bne	r2,zero,4031694 <tcp_output+0x324>
 403167c:	e0bff717 	ldw	r2,-36(fp)
 4031680:	10800b0b 	ldhu	r2,44(r2)
 4031684:	10bfffcc 	andi	r2,r2,65535
 4031688:	1080010c 	andi	r2,r2,4
 403168c:	1005003a 	cmpeq	r2,r2,zero
 4031690:	1000061e 	bne	r2,zero,40316ac <tcp_output+0x33c>
 4031694:	e0fff417 	ldw	r3,-48(fp)
 4031698:	e0bff217 	ldw	r2,-56(fp)
 403169c:	1887883a 	add	r3,r3,r2
 40316a0:	e0bff517 	ldw	r2,-44(fp)
 40316a4:	10801217 	ldw	r2,72(r2)
 40316a8:	1880440e 	bge	r3,r2,40317bc <tcp_output+0x44c>
          len + off >= (int)so->so_snd.sb_cc)
      {
         goto send;
      }
      if (tp->t_force)
 40316ac:	e0bff717 	ldw	r2,-36(fp)
 40316b0:	10800a83 	ldbu	r2,42(r2)
 40316b4:	10803fcc 	andi	r2,r2,255
 40316b8:	1080201c 	xori	r2,r2,128
 40316bc:	10bfe004 	addi	r2,r2,-128
 40316c0:	1004c03a 	cmpne	r2,r2,zero
 40316c4:	10003d1e 	bne	r2,zero,40317bc <tcp_output+0x44c>
         goto send;
      if (len >= (int)(tp->max_sndwnd / 2))
 40316c8:	e0bff717 	ldw	r2,-36(fp)
 40316cc:	10802317 	ldw	r2,140(r2)
 40316d0:	1004d07a 	srli	r2,r2,1
 40316d4:	1007883a 	mov	r3,r2
 40316d8:	e0bff417 	ldw	r2,-48(fp)
 40316dc:	10c0370e 	bge	r2,r3,40317bc <tcp_output+0x44c>
         goto send;
      if (SEQ_LT(tp->snd_nxt, tp->snd_max))
 40316e0:	e0bff717 	ldw	r2,-36(fp)
 40316e4:	10c00f17 	ldw	r3,60(r2)
 40316e8:	e0bff717 	ldw	r2,-36(fp)
 40316ec:	10801a17 	ldw	r2,104(r2)
 40316f0:	1885c83a 	sub	r2,r3,r2
 40316f4:	1004803a 	cmplt	r2,r2,zero
 40316f8:	1000301e 	bne	r2,zero,40317bc <tcp_output+0x44c>
    * known to peer (as advertised window less
    * next expected input).  If the difference is at least two
    * max size segments or at least 35% of the maximum possible
    * window, then want to send a window update to peer.
    */
   if (win > 0)
 40316fc:	e0bff317 	ldw	r2,-52(fp)
 4031700:	10800050 	cmplti	r2,r2,1
 4031704:	10001b1e 	bne	r2,zero,4031774 <tcp_output+0x404>
   {
      int   adv   =  (int)win -  (int)(tp->rcv_adv -  tp->rcv_nxt);
 4031708:	e0bff717 	ldw	r2,-36(fp)
 403170c:	10c01917 	ldw	r3,100(r2)
 4031710:	e0bff717 	ldw	r2,-36(fp)
 4031714:	10801617 	ldw	r2,88(r2)
 4031718:	1885c83a 	sub	r2,r3,r2
 403171c:	1007883a 	mov	r3,r2
 4031720:	e0bff317 	ldw	r2,-52(fp)
 4031724:	10c5c83a 	sub	r2,r2,r3
 4031728:	e0bfe715 	stw	r2,-100(fp)

      if (so->so_rcv.sb_cc == 0 && adv >= (int)(tp->t_maxseg * 2))
 403172c:	e0bff517 	ldw	r2,-44(fp)
 4031730:	10800a17 	ldw	r2,40(r2)
 4031734:	1004c03a 	cmpne	r2,r2,zero
 4031738:	1000071e 	bne	r2,zero,4031758 <tcp_output+0x3e8>
 403173c:	e0bff717 	ldw	r2,-36(fp)
 4031740:	10800a0b 	ldhu	r2,40(r2)
 4031744:	10bfffcc 	andi	r2,r2,65535
 4031748:	1085883a 	add	r2,r2,r2
 403174c:	1007883a 	mov	r3,r2
 4031750:	e0bfe717 	ldw	r2,-100(fp)
 4031754:	10c0190e 	bge	r2,r3,40317bc <tcp_output+0x44c>
         goto send;
      if (100 * (u_int)adv / so->so_rcv.sb_hiwat >= 35)
 4031758:	e0bfe717 	ldw	r2,-100(fp)
 403175c:	10c01924 	muli	r3,r2,100
 4031760:	e0bff517 	ldw	r2,-44(fp)
 4031764:	10800b17 	ldw	r2,44(r2)
 4031768:	1885203a 	divu	r2,r3,r2
 403176c:	108008e8 	cmpgeui	r2,r2,35
 4031770:	1000121e 	bne	r2,zero,40317bc <tcp_output+0x44c>
    * retransmit or persist is pending, then go to persist state.
    * If nothing happens soon, send when timer expires:
    * if window is nonzero, transmit what we can,
    * otherwise force out a byte.
    */
   if (so->so_snd.sb_cc && tp->t_timer[TCPT_REXMT] == 0 &&
 4031774:	e0bff517 	ldw	r2,-44(fp)
 4031778:	10801217 	ldw	r2,72(r2)
 403177c:	1005003a 	cmpeq	r2,r2,zero
 4031780:	10000c1e 	bne	r2,zero,40317b4 <tcp_output+0x444>
 4031784:	e0bff717 	ldw	r2,-36(fp)
 4031788:	10800317 	ldw	r2,12(r2)
 403178c:	1004c03a 	cmpne	r2,r2,zero
 4031790:	1000081e 	bne	r2,zero,40317b4 <tcp_output+0x444>
 4031794:	e0bff717 	ldw	r2,-36(fp)
 4031798:	10800417 	ldw	r2,16(r2)
 403179c:	1004c03a 	cmpne	r2,r2,zero
 40317a0:	1000041e 	bne	r2,zero,40317b4 <tcp_output+0x444>
       tp->t_timer[TCPT_PERSIST] == 0) 
   {
      tp->t_rxtshift = 0;
 40317a4:	e0bff717 	ldw	r2,-36(fp)
 40317a8:	10000715 	stw	zero,28(r2)
      tcp_setpersist(tp);
 40317ac:	e13ff717 	ldw	r4,-36(fp)
 40317b0:	40324ec0 	call	40324ec <tcp_setpersist>
   }

   /*
    * No reason to send a segment, just return.
    */
   return (0);
 40317b4:	e03ff815 	stw	zero,-32(fp)
 40317b8:	00034606 	br	40324d4 <tcp_output+0x1164>

send:
   ENTER_CRIT_SECTION(tp);
 40317bc:	4025db40 	call	4025db4 <irq_Mask>

   /* Limit send length to the current buffer so as to
    * avoid doing the "mbuf shuffle" in m_copy().
    */
   bufoff = off;
 40317c0:	e0bff217 	ldw	r2,-56(fp)
 40317c4:	e0bfe815 	stw	r2,-96(fp)
   sendm = so->so_snd.sb_mb;
 40317c8:	e0bff517 	ldw	r2,-44(fp)
 40317cc:	10801817 	ldw	r2,96(r2)
 40317d0:	e0bfea15 	stw	r2,-88(fp)
   if (len)
 40317d4:	e0bff417 	ldw	r2,-48(fp)
 40317d8:	1005003a 	cmpeq	r2,r2,zero
 40317dc:	10006b1e 	bne	r2,zero,403198c <tcp_output+0x61c>
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
 40317e0:	00000b06 	br	4031810 <tcp_output+0x4a0>
      {
         bufoff -= sendm->m_len;
 40317e4:	e0ffe817 	ldw	r3,-96(fp)
 40317e8:	e0bfea17 	ldw	r2,-88(fp)
 40317ec:	10800217 	ldw	r2,8(r2)
 40317f0:	1885c83a 	sub	r2,r3,r2
 40317f4:	e0bfe815 	stw	r2,-96(fp)
         if (bufoff < 0)   /* if off is in this buffer, break */
 40317f8:	e0bfe817 	ldw	r2,-96(fp)
 40317fc:	1004803a 	cmplt	r2,r2,zero
 4031800:	1000061e 	bne	r2,zero,403181c <tcp_output+0x4ac>
            break;
         sendm = sendm->m_next;
 4031804:	e0bfea17 	ldw	r2,-88(fp)
 4031808:	10800617 	ldw	r2,24(r2)
 403180c:	e0bfea15 	stw	r2,-88(fp)
   bufoff = off;
   sendm = so->so_snd.sb_mb;
   if (len)
   {
      /* find mbuf containing data to send (at "off") */
      while (sendm)  /* loop through socket send list */
 4031810:	e0bfea17 	ldw	r2,-88(fp)
 4031814:	1004c03a 	cmpne	r2,r2,zero
 4031818:	103ff21e 	bne	r2,zero,40317e4 <tcp_output+0x474>
         bufoff -= sendm->m_len;
         if (bufoff < 0)   /* if off is in this buffer, break */
            break;
         sendm = sendm->m_next;
      }
      if (!sendm) { dtrap();  /* shouldn't happen */ }
 403181c:	e0bfea17 	ldw	r2,-88(fp)
 4031820:	1004c03a 	cmpne	r2,r2,zero
 4031824:	1000011e 	bne	r2,zero,403182c <tcp_output+0x4bc>
 4031828:	4025bb40 	call	4025bb4 <dtrap>
      bufoff += sendm->m_len; /* index to next data to send in msend */
 403182c:	e0bfea17 	ldw	r2,-88(fp)
 4031830:	10c00217 	ldw	r3,8(r2)
 4031834:	e0bfe817 	ldw	r2,-96(fp)
 4031838:	1885883a 	add	r2,r3,r2
 403183c:	e0bfe815 	stw	r2,-96(fp)

      /* if socket has multiple unsent mbufs, set flag for send to loop */
      if ((sendm->m_next) && (len > (int)sendm->m_len))
 4031840:	e0bfea17 	ldw	r2,-88(fp)
 4031844:	10800617 	ldw	r2,24(r2)
 4031848:	1005003a 	cmpeq	r2,r2,zero
 403184c:	10000b1e 	bne	r2,zero,403187c <tcp_output+0x50c>
 4031850:	e0bfea17 	ldw	r2,-88(fp)
 4031854:	10800217 	ldw	r2,8(r2)
 4031858:	1007883a 	mov	r3,r2
 403185c:	e0bff417 	ldw	r2,-48(fp)
 4031860:	1880060e 	bge	r3,r2,403187c <tcp_output+0x50c>
      {
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 4031864:	e0fff117 	ldw	r3,-60(fp)
 4031868:	00bfff84 	movi	r2,-2
 403186c:	1884703a 	and	r2,r3,r2
 4031870:	e0bff115 	stw	r2,-60(fp)
         sendalot = 1;     /* set to send more segments */
 4031874:	00800044 	movi	r2,1
 4031878:	e0bfeb15 	stw	r2,-84(fp)
      }
      if((flags & TH_FIN) && (so->so_snd.sb_cc > (unsigned)len))
 403187c:	e0bff117 	ldw	r2,-60(fp)
 4031880:	1080004c 	andi	r2,r2,1
 4031884:	10803fcc 	andi	r2,r2,255
 4031888:	1005003a 	cmpeq	r2,r2,zero
 403188c:	1000081e 	bne	r2,zero,40318b0 <tcp_output+0x540>
 4031890:	e0bff517 	ldw	r2,-44(fp)
 4031894:	10c01217 	ldw	r3,72(r2)
 4031898:	e0bff417 	ldw	r2,-48(fp)
 403189c:	10c0042e 	bgeu	r2,r3,40318b0 <tcp_output+0x540>
      {
         /* This can happen on slow links (PPP) which retry the last 
          * segment - the one with the FIN bit attached to data.
          */
         flags &= ~TH_FIN; /* don't FIN on segment prior to last */
 40318a0:	e0bff117 	ldw	r2,-60(fp)
 40318a4:	00ffff84 	movi	r3,-2
 40318a8:	10c4703a 	and	r2,r2,r3
 40318ac:	e0bff115 	stw	r2,-60(fp)
      }

      /* only send the rest of msend */
      len = min(len, (int)sendm->m_len);
 40318b0:	e0bfea17 	ldw	r2,-88(fp)
 40318b4:	10800217 	ldw	r2,8(r2)
 40318b8:	e0fff417 	ldw	r3,-48(fp)
 40318bc:	e0fffd15 	stw	r3,-12(fp)
 40318c0:	e0bffc15 	stw	r2,-16(fp)
 40318c4:	e0bffd17 	ldw	r2,-12(fp)
 40318c8:	e0fffc17 	ldw	r3,-16(fp)
 40318cc:	10c0020e 	bge	r2,r3,40318d8 <tcp_output+0x568>
 40318d0:	e0bffd17 	ldw	r2,-12(fp)
 40318d4:	e0bffc15 	stw	r2,-16(fp)
 40318d8:	e0fffc17 	ldw	r3,-16(fp)
 40318dc:	e0fff415 	stw	r3,-48(fp)
       * Similarly, if sendm->m_data is not aligned with respect to 
       * sendm->m_base and ALIGN_TYPE, we will copy the data to 
       * ensure that it (and the then-prepended IP/TCP headers) will 
       * be aligned according to ALIGN_TYPE. 
       */
      if ((bufoff != 0) ||       /* data not front aligned in send mbuf? */
 40318e0:	e0bfe817 	ldw	r2,-96(fp)
 40318e4:	1004c03a 	cmpne	r2,r2,zero
 40318e8:	1000091e 	bne	r2,zero,4031910 <tcp_output+0x5a0>
 40318ec:	e0bfea17 	ldw	r2,-88(fp)
 40318f0:	10800317 	ldw	r2,12(r2)
 40318f4:	1007883a 	mov	r3,r2
 40318f8:	e0bfea17 	ldw	r2,-88(fp)
 40318fc:	10800417 	ldw	r2,16(r2)
 4031900:	1885c83a 	sub	r2,r3,r2
 4031904:	108000cc 	andi	r2,r2,3
 4031908:	1005003a 	cmpeq	r2,r2,zero
 403190c:	10001f1e 	bne	r2,zero,403198c <tcp_output+0x61c>
          (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) != 0))
      {
         len = min(len, (int)(sendm->m_len - bufoff));   /* limit len again */
 4031910:	e0bfea17 	ldw	r2,-88(fp)
 4031914:	10c00217 	ldw	r3,8(r2)
 4031918:	e0bfe817 	ldw	r2,-96(fp)
 403191c:	1885c83a 	sub	r2,r3,r2
 4031920:	e0fff417 	ldw	r3,-48(fp)
 4031924:	e0ffff15 	stw	r3,-4(fp)
 4031928:	e0bffe15 	stw	r2,-8(fp)
 403192c:	e0bfff17 	ldw	r2,-4(fp)
 4031930:	e0fffe17 	ldw	r3,-8(fp)
 4031934:	10c0020e 	bge	r2,r3,4031940 <tcp_output+0x5d0>
 4031938:	e0bfff17 	ldw	r2,-4(fp)
 403193c:	e0bffe15 	stw	r2,-8(fp)
 4031940:	e0fffe17 	ldw	r3,-8(fp)
 4031944:	e0fff415 	stw	r3,-48(fp)
          * of the m_data buffer then we can't use it in place, else we
          * might write the IP/TCP header over data that has not yet
          * been acked. In this case we must make sure our send
          * fits into a little buffer and send what we can.
          */
         if ((len > (int)(lilbufsiz - HDRSLEN)) && /* length is bigger the small buffer? */
 4031948:	00810174 	movhi	r2,1029
 403194c:	10b9f204 	addi	r2,r2,-6200
 4031950:	10800017 	ldw	r2,0(r2)
 4031954:	10bff204 	addi	r2,r2,-56
 4031958:	1007883a 	mov	r3,r2
 403195c:	e0bff417 	ldw	r2,-48(fp)
 4031960:	18800a0e 	bge	r3,r2,403198c <tcp_output+0x61c>
 4031964:	008101b4 	movhi	r2,1030
 4031968:	10a2af04 	addi	r2,r2,-30020
 403196c:	10800217 	ldw	r2,8(r2)
 4031970:	10800088 	cmpgei	r2,r2,2
 4031974:	1000051e 	bne	r2,zero,403198c <tcp_output+0x61c>
             (bigfreeq.q_len < 2))      /* and we are low on big buffers */
         {
            len = lilbufsiz - HDRSLEN;
 4031978:	00810174 	movhi	r2,1029
 403197c:	10b9f204 	addi	r2,r2,-6200
 4031980:	10800017 	ldw	r2,0(r2)
 4031984:	10bff204 	addi	r2,r2,-56
 4031988:	e0bff415 	stw	r2,-48(fp)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
 403198c:	e0bff417 	ldw	r2,-48(fp)
 4031990:	1005003a 	cmpeq	r2,r2,zero
 4031994:	10003b1e 	bne	r2,zero,4031a84 <tcp_output+0x714>
 4031998:	e0bfe817 	ldw	r2,-96(fp)
 403199c:	1004c03a 	cmpne	r2,r2,zero
 40319a0:	1000381e 	bne	r2,zero,4031a84 <tcp_output+0x714>
 40319a4:	e0bfea17 	ldw	r2,-88(fp)
 40319a8:	10800117 	ldw	r2,4(r2)
 40319ac:	10800917 	ldw	r2,36(r2)
 40319b0:	10800058 	cmpnei	r2,r2,1
 40319b4:	1000331e 	bne	r2,zero,4031a84 <tcp_output+0x714>
 40319b8:	e0bfea17 	ldw	r2,-88(fp)
 40319bc:	10800317 	ldw	r2,12(r2)
 40319c0:	1007883a 	mov	r3,r2
 40319c4:	e0bfea17 	ldw	r2,-88(fp)
 40319c8:	10800417 	ldw	r2,16(r2)
 40319cc:	1885c83a 	sub	r2,r3,r2
 40319d0:	108000cc 	andi	r2,r2,3
 40319d4:	1004c03a 	cmpne	r2,r2,zero
 40319d8:	10002a1e 	bne	r2,zero,4031a84 <tcp_output+0x714>
 40319dc:	e0bfed17 	ldw	r2,-76(fp)
 40319e0:	1004c03a 	cmpne	r2,r2,zero
 40319e4:	1000271e 	bne	r2,zero,4031a84 <tcp_output+0x714>
       (sendm->pkt->inuse == 1) &&
       (((sendm->m_data - sendm->m_base) & (ALIGN_TYPE - 1)) == 0) && 
       (optlen == 0))
   {
      /* get an empty mbuf to "clone" the data */
      m = m_getnbuf(MT_TXDATA, 0);
 40319e8:	01000084 	movi	r4,2
 40319ec:	000b883a 	mov	r5,zero
 40319f0:	40269b40 	call	40269b4 <m_getnbuf>
 40319f4:	e0bfef15 	stw	r2,-68(fp)
      if (!m)
 40319f8:	e0bfef17 	ldw	r2,-68(fp)
 40319fc:	1004c03a 	cmpne	r2,r2,zero
 4031a00:	1000041e 	bne	r2,zero,4031a14 <tcp_output+0x6a4>
      {
         EXIT_CRIT_SECTION(tp);
 4031a04:	4025e100 	call	4025e10 <irq_Unmask>
         return (ENOBUFS);
 4031a08:	00801a44 	movi	r2,105
 4031a0c:	e0bff815 	stw	r2,-32(fp)
 4031a10:	0002b006 	br	40324d4 <tcp_output+0x1164>
      }
      m->pkt = sendm->pkt; /* copy packet location in new mbuf */
 4031a14:	e0bfea17 	ldw	r2,-88(fp)
 4031a18:	10c00117 	ldw	r3,4(r2)
 4031a1c:	e0bfef17 	ldw	r2,-68(fp)
 4031a20:	10c00115 	stw	r3,4(r2)
      m->pkt->inuse++;     /* bump packet's use count */
 4031a24:	e0bfef17 	ldw	r2,-68(fp)
 4031a28:	10c00117 	ldw	r3,4(r2)
 4031a2c:	18800917 	ldw	r2,36(r3)
 4031a30:	10800044 	addi	r2,r2,1
 4031a34:	18800915 	stw	r2,36(r3)
      m->m_base = sendm->m_base; /* clone mbuf members */
 4031a38:	e0bfea17 	ldw	r2,-88(fp)
 4031a3c:	10c00417 	ldw	r3,16(r2)
 4031a40:	e0bfef17 	ldw	r2,-68(fp)
 4031a44:	10c00415 	stw	r3,16(r2)
      m->m_memsz = sendm->m_memsz;
 4031a48:	e0bfea17 	ldw	r2,-88(fp)
 4031a4c:	10c00517 	ldw	r3,20(r2)
 4031a50:	e0bfef17 	ldw	r2,-68(fp)
 4031a54:	10c00515 	stw	r3,20(r2)
      m->m_len = len + TCPIPHDRSZ;  /* adjust clone for header */
 4031a58:	e0bff417 	ldw	r2,-48(fp)
 4031a5c:	10800a04 	addi	r2,r2,40
 4031a60:	1007883a 	mov	r3,r2
 4031a64:	e0bfef17 	ldw	r2,-68(fp)
 4031a68:	10c00215 	stw	r3,8(r2)
      m->m_data = sendm->m_data - TCPIPHDRSZ;
 4031a6c:	e0bfea17 	ldw	r2,-88(fp)
 4031a70:	10800317 	ldw	r2,12(r2)
 4031a74:	10fff604 	addi	r3,r2,-40
 4031a78:	e0bfef17 	ldw	r2,-68(fp)
 4031a7c:	10c00315 	stw	r3,12(r2)
   }

   /* if send data is sufficiently aligned in packet, prepend TCP/IP header
    * in the space provided. 
    */
   if (len && (bufoff == 0) && 
 4031a80:	00002e06 	br	4031b3c <tcp_output+0x7cc>
   {
      /* Grab a header mbuf, attaching a copy of data to be 
       * transmitted, and initialize the header from 
       * the template for sends on this connection.
       */
      m = m_getwithdata (MT_HEADER, IFNETHDR_SIZE + TCPIPHDRSZ);
 4031a84:	00810174 	movhi	r2,1029
 4031a88:	1081bd04 	addi	r2,r2,1780
 4031a8c:	10800017 	ldw	r2,0(r2)
 4031a90:	11400a04 	addi	r5,r2,40
 4031a94:	010000c4 	movi	r4,3
 4031a98:	40269b40 	call	40269b4 <m_getnbuf>
 4031a9c:	e0bfef15 	stw	r2,-68(fp)
      if (m ==(struct mbuf *)NULL)
 4031aa0:	e0bfef17 	ldw	r2,-68(fp)
 4031aa4:	1004c03a 	cmpne	r2,r2,zero
 4031aa8:	1000041e 	bne	r2,zero,4031abc <tcp_output+0x74c>
      {
         EXIT_CRIT_SECTION(tp);
 4031aac:	4025e100 	call	4025e10 <irq_Unmask>
         return ENOBUFS;
 4031ab0:	00c01a44 	movi	r3,105
 4031ab4:	e0fff815 	stw	r3,-32(fp)
 4031ab8:	00028606 	br	40324d4 <tcp_output+0x1164>
      }

      m->m_len = TCPIPHDRSZ;
 4031abc:	e0ffef17 	ldw	r3,-68(fp)
 4031ac0:	00800a04 	movi	r2,40
 4031ac4:	18800215 	stw	r2,8(r3)
      m->m_data += IFNETHDR_SIZE;/* Move this to sizeof tcpip hdr leave*/
 4031ac8:	e0bfef17 	ldw	r2,-68(fp)
 4031acc:	10c00317 	ldw	r3,12(r2)
 4031ad0:	00810174 	movhi	r2,1029
 4031ad4:	1081bd04 	addi	r2,r2,1780
 4031ad8:	10800017 	ldw	r2,0(r2)
 4031adc:	1887883a 	add	r3,r3,r2
 4031ae0:	e0bfef17 	ldw	r2,-68(fp)
 4031ae4:	10c00315 	stw	r3,12(r2)
      /* 14 bytes for ethernet header      */

      if (len) /* attach any data to send */
 4031ae8:	e0bff417 	ldw	r2,-48(fp)
 4031aec:	1005003a 	cmpeq	r2,r2,zero
 4031af0:	1000121e 	bne	r2,zero,4031b3c <tcp_output+0x7cc>
      {
         m->m_next = m_copy(so->so_snd.sb_mb, off, (int) len);
 4031af4:	e0bff517 	ldw	r2,-44(fp)
 4031af8:	11001817 	ldw	r4,96(r2)
 4031afc:	e17ff217 	ldw	r5,-56(fp)
 4031b00:	e1bff417 	ldw	r6,-48(fp)
 4031b04:	4026cd40 	call	4026cd4 <m_copy>
 4031b08:	1007883a 	mov	r3,r2
 4031b0c:	e0bfef17 	ldw	r2,-68(fp)
 4031b10:	10c00615 	stw	r3,24(r2)
         if (m->m_next == 0)
 4031b14:	e0bfef17 	ldw	r2,-68(fp)
 4031b18:	10800617 	ldw	r2,24(r2)
 4031b1c:	1004c03a 	cmpne	r2,r2,zero
 4031b20:	1000061e 	bne	r2,zero,4031b3c <tcp_output+0x7cc>
         {
            m_freem(m);
 4031b24:	e13fef17 	ldw	r4,-68(fp)
 4031b28:	4026c900 	call	4026c90 <m_freem>
            EXIT_CRIT_SECTION(tp);
 4031b2c:	4025e100 	call	4025e10 <irq_Unmask>
            return ENOBUFS;
 4031b30:	00801a44 	movi	r2,105
 4031b34:	e0bff815 	stw	r2,-32(fp)
 4031b38:	00026606 	br	40324d4 <tcp_output+0x1164>
         }
      }
   }
   EXIT_CRIT_SECTION(tp);
 4031b3c:	4025e100 	call	4025e10 <irq_Unmask>

   if (len) 
 4031b40:	e0bff417 	ldw	r2,-48(fp)
 4031b44:	1005003a 	cmpeq	r2,r2,zero
 4031b48:	1000391e 	bne	r2,zero,4031c30 <tcp_output+0x8c0>
   {
      if (tp->t_force && len == 1)
 4031b4c:	e0bff717 	ldw	r2,-36(fp)
 4031b50:	10800a83 	ldbu	r2,42(r2)
 4031b54:	10803fcc 	andi	r2,r2,255
 4031b58:	1080201c 	xori	r2,r2,128
 4031b5c:	10bfe004 	addi	r2,r2,-128
 4031b60:	1005003a 	cmpeq	r2,r2,zero
 4031b64:	10000b1e 	bne	r2,zero,4031b94 <tcp_output+0x824>
 4031b68:	e0bff417 	ldw	r2,-48(fp)
 4031b6c:	10800058 	cmpnei	r2,r2,1
 4031b70:	1000081e 	bne	r2,zero,4031b94 <tcp_output+0x824>
         tcpstat.tcps_sndprobe++;
 4031b74:	008101b4 	movhi	r2,1030
 4031b78:	10a37804 	addi	r2,r2,-29216
 4031b7c:	10801517 	ldw	r2,84(r2)
 4031b80:	10c00044 	addi	r3,r2,1
 4031b84:	008101b4 	movhi	r2,1030
 4031b88:	10a37804 	addi	r2,r2,-29216
 4031b8c:	10c01515 	stw	r3,84(r2)
   }
   EXIT_CRIT_SECTION(tp);

   if (len) 
   {
      if (tp->t_force && len == 1)
 4031b90:	00005806 	br	4031cf4 <tcp_output+0x984>
         tcpstat.tcps_sndprobe++;
      else if (SEQ_LT(tp->snd_nxt, tp->snd_max)) 
 4031b94:	e0bff717 	ldw	r2,-36(fp)
 4031b98:	10c00f17 	ldw	r3,60(r2)
 4031b9c:	e0bff717 	ldw	r2,-36(fp)
 4031ba0:	10801a17 	ldw	r2,104(r2)
 4031ba4:	1885c83a 	sub	r2,r3,r2
 4031ba8:	1004403a 	cmpge	r2,r2,zero
 4031bac:	1000101e 	bne	r2,zero,4031bf0 <tcp_output+0x880>
      {
         tcpstat.tcps_sndrexmitpack++;
 4031bb0:	008101b4 	movhi	r2,1030
 4031bb4:	10a37804 	addi	r2,r2,-29216
 4031bb8:	10801217 	ldw	r2,72(r2)
 4031bbc:	10c00044 	addi	r3,r2,1
 4031bc0:	008101b4 	movhi	r2,1030
 4031bc4:	10a37804 	addi	r2,r2,-29216
 4031bc8:	10c01215 	stw	r3,72(r2)
         tcpstat.tcps_sndrexmitbyte += len;
 4031bcc:	008101b4 	movhi	r2,1030
 4031bd0:	10a37804 	addi	r2,r2,-29216
 4031bd4:	10c01317 	ldw	r3,76(r2)
 4031bd8:	e0bff417 	ldw	r2,-48(fp)
 4031bdc:	1887883a 	add	r3,r3,r2
 4031be0:	008101b4 	movhi	r2,1030
 4031be4:	10a37804 	addi	r2,r2,-29216
 4031be8:	10c01315 	stw	r3,76(r2)
 4031bec:	00004106 	br	4031cf4 <tcp_output+0x984>
         tcpstat.tcps_sackresend++;
#endif
      } 
      else 
      {
         tcpstat.tcps_sndpack++;
 4031bf0:	008101b4 	movhi	r2,1030
 4031bf4:	10a37804 	addi	r2,r2,-29216
 4031bf8:	10801017 	ldw	r2,64(r2)
 4031bfc:	10c00044 	addi	r3,r2,1
 4031c00:	008101b4 	movhi	r2,1030
 4031c04:	10a37804 	addi	r2,r2,-29216
 4031c08:	10c01015 	stw	r3,64(r2)
         tcpstat.tcps_sndbyte += len;
 4031c0c:	008101b4 	movhi	r2,1030
 4031c10:	10a37804 	addi	r2,r2,-29216
 4031c14:	10c01117 	ldw	r3,68(r2)
 4031c18:	e0bff417 	ldw	r2,-48(fp)
 4031c1c:	1887883a 	add	r3,r3,r2
 4031c20:	008101b4 	movhi	r2,1030
 4031c24:	10a37804 	addi	r2,r2,-29216
 4031c28:	10c01115 	stw	r3,68(r2)
 4031c2c:	00003106 	br	4031cf4 <tcp_output+0x984>
      }
   }
   else if (tp->t_flags & TF_ACKNOW)
 4031c30:	e0bff717 	ldw	r2,-36(fp)
 4031c34:	10800b0b 	ldhu	r2,44(r2)
 4031c38:	10bfffcc 	andi	r2,r2,65535
 4031c3c:	1080004c 	andi	r2,r2,1
 4031c40:	10803fcc 	andi	r2,r2,255
 4031c44:	1005003a 	cmpeq	r2,r2,zero
 4031c48:	1000081e 	bne	r2,zero,4031c6c <tcp_output+0x8fc>
   {
      tcpstat.tcps_sndacks++;
 4031c4c:	008101b4 	movhi	r2,1030
 4031c50:	10a37804 	addi	r2,r2,-29216
 4031c54:	10801417 	ldw	r2,80(r2)
 4031c58:	10c00044 	addi	r3,r2,1
 4031c5c:	008101b4 	movhi	r2,1030
 4031c60:	10a37804 	addi	r2,r2,-29216
 4031c64:	10c01415 	stw	r3,80(r2)
 4031c68:	00002206 	br	4031cf4 <tcp_output+0x984>
   }
   else if (flags & (TH_SYN|TH_FIN|TH_RST))
 4031c6c:	e0bff117 	ldw	r2,-60(fp)
 4031c70:	108001cc 	andi	r2,r2,7
 4031c74:	1005003a 	cmpeq	r2,r2,zero
 4031c78:	1000081e 	bne	r2,zero,4031c9c <tcp_output+0x92c>
      tcpstat.tcps_sndctrl++;
 4031c7c:	008101b4 	movhi	r2,1030
 4031c80:	10a37804 	addi	r2,r2,-29216
 4031c84:	10801817 	ldw	r2,96(r2)
 4031c88:	10c00044 	addi	r3,r2,1
 4031c8c:	008101b4 	movhi	r2,1030
 4031c90:	10a37804 	addi	r2,r2,-29216
 4031c94:	10c01815 	stw	r3,96(r2)
 4031c98:	00001606 	br	4031cf4 <tcp_output+0x984>
   else if (SEQ_GT(tp->snd_up, tp->snd_una))
 4031c9c:	e0bff717 	ldw	r2,-36(fp)
 4031ca0:	10c01017 	ldw	r3,64(r2)
 4031ca4:	e0bff717 	ldw	r2,-36(fp)
 4031ca8:	10800e17 	ldw	r2,56(r2)
 4031cac:	1885c83a 	sub	r2,r3,r2
 4031cb0:	10800050 	cmplti	r2,r2,1
 4031cb4:	1000081e 	bne	r2,zero,4031cd8 <tcp_output+0x968>
      tcpstat.tcps_sndurg++;
 4031cb8:	008101b4 	movhi	r2,1030
 4031cbc:	10a37804 	addi	r2,r2,-29216
 4031cc0:	10801617 	ldw	r2,88(r2)
 4031cc4:	10c00044 	addi	r3,r2,1
 4031cc8:	008101b4 	movhi	r2,1030
 4031ccc:	10a37804 	addi	r2,r2,-29216
 4031cd0:	10c01615 	stw	r3,88(r2)
 4031cd4:	00000706 	br	4031cf4 <tcp_output+0x984>
   else
      tcpstat.tcps_sndwinup++;
 4031cd8:	008101b4 	movhi	r2,1030
 4031cdc:	10a37804 	addi	r2,r2,-29216
 4031ce0:	10801717 	ldw	r2,92(r2)
 4031ce4:	10c00044 	addi	r3,r2,1
 4031ce8:	008101b4 	movhi	r2,1030
 4031cec:	10a37804 	addi	r2,r2,-29216
 4031cf0:	10c01715 	stw	r3,92(r2)

   ti = (struct tcpiphdr *)(m->m_data+sizeof(struct ip)-sizeof(struct ipovly));
 4031cf4:	e0bfef17 	ldw	r2,-68(fp)
 4031cf8:	10800317 	ldw	r2,12(r2)
 4031cfc:	e0bfee15 	stw	r2,-72(fp)
   if ((char *)ti < m->pkt->nb_buff)
 4031d00:	e0bfef17 	ldw	r2,-68(fp)
 4031d04:	10800117 	ldw	r2,4(r2)
 4031d08:	10c00117 	ldw	r3,4(r2)
 4031d0c:	e0bfee17 	ldw	r2,-72(fp)
 4031d10:	10c0032e 	bgeu	r2,r3,4031d20 <tcp_output+0x9b0>
   {
      panic("tcp_out- packet ptr underflow\n");
 4031d14:	01010174 	movhi	r4,1029
 4031d18:	212e7604 	addi	r4,r4,-17960
 4031d1c:	4020e100 	call	4020e10 <panic>
   }
   tcp_mbuf = m;        /* flag TCP header mbuf */
 4031d20:	e0bfef17 	ldw	r2,-68(fp)
 4031d24:	e0bfe915 	stw	r2,-92(fp)
      tcp_mbuf->m_data += sizeof(struct ipovly);
      tcp_mbuf->m_len -= sizeof(struct ipovly);
   }
#endif   /* end IP_V6 */

   if (tp->t_template == 0)
 4031d28:	e0bff717 	ldw	r2,-36(fp)
 4031d2c:	10800c17 	ldw	r2,48(r2)
 4031d30:	1004c03a 	cmpne	r2,r2,zero
 4031d34:	1000031e 	bne	r2,zero,4031d44 <tcp_output+0x9d4>
      panic("tcp_output");
 4031d38:	01010174 	movhi	r4,1029
 4031d3c:	212e7e04 	addi	r4,r4,-17928
 4031d40:	4020e100 	call	4020e10 <panic>

   MEMCPY((char*)ti, (char*)tp->t_template, sizeof(struct tcpiphdr));
 4031d44:	e0ffee17 	ldw	r3,-72(fp)
 4031d48:	e0bff717 	ldw	r2,-36(fp)
 4031d4c:	10800c17 	ldw	r2,48(r2)
 4031d50:	1809883a 	mov	r4,r3
 4031d54:	100b883a 	mov	r5,r2
 4031d58:	01800a04 	movi	r6,40
 4031d5c:	4001de40 	call	4001de4 <memcpy>
   /*
    * Fill in fields, remembering maximum advertised
    * window for use in delaying messages about window sizes.
    * If resending a FIN, be sure not to use a new sequence number.
    */
   if (flags & TH_FIN && tp->t_flags & TF_SENTFIN && 
 4031d60:	e0bff117 	ldw	r2,-60(fp)
 4031d64:	1080004c 	andi	r2,r2,1
 4031d68:	10803fcc 	andi	r2,r2,255
 4031d6c:	1005003a 	cmpeq	r2,r2,zero
 4031d70:	1000101e 	bne	r2,zero,4031db4 <tcp_output+0xa44>
 4031d74:	e0bff717 	ldw	r2,-36(fp)
 4031d78:	10800b0b 	ldhu	r2,44(r2)
 4031d7c:	10bfffcc 	andi	r2,r2,65535
 4031d80:	1080040c 	andi	r2,r2,16
 4031d84:	1005003a 	cmpeq	r2,r2,zero
 4031d88:	10000a1e 	bne	r2,zero,4031db4 <tcp_output+0xa44>
 4031d8c:	e0bff717 	ldw	r2,-36(fp)
 4031d90:	10c00f17 	ldw	r3,60(r2)
 4031d94:	e0bff717 	ldw	r2,-36(fp)
 4031d98:	10801a17 	ldw	r2,104(r2)
 4031d9c:	1880051e 	bne	r3,r2,4031db4 <tcp_output+0xa44>
       tp->snd_nxt == tp->snd_max)
   {
      tp->snd_nxt--;
 4031da0:	e0bff717 	ldw	r2,-36(fp)
 4031da4:	10800f17 	ldw	r2,60(r2)
 4031da8:	10ffffc4 	addi	r3,r2,-1
 4031dac:	e0bff717 	ldw	r2,-36(fp)
 4031db0:	10c00f15 	stw	r3,60(r2)
   }

   ti->ti_seq = htonl(tp->snd_nxt);
 4031db4:	e0bff717 	ldw	r2,-36(fp)
 4031db8:	10800f17 	ldw	r2,60(r2)
 4031dbc:	1004d63a 	srli	r2,r2,24
 4031dc0:	10c03fcc 	andi	r3,r2,255
 4031dc4:	e0bff717 	ldw	r2,-36(fp)
 4031dc8:	10800f17 	ldw	r2,60(r2)
 4031dcc:	1004d23a 	srli	r2,r2,8
 4031dd0:	10bfc00c 	andi	r2,r2,65280
 4031dd4:	1886b03a 	or	r3,r3,r2
 4031dd8:	e0bff717 	ldw	r2,-36(fp)
 4031ddc:	10800f17 	ldw	r2,60(r2)
 4031de0:	10bfc00c 	andi	r2,r2,65280
 4031de4:	1004923a 	slli	r2,r2,8
 4031de8:	1886b03a 	or	r3,r3,r2
 4031dec:	e0bff717 	ldw	r2,-36(fp)
 4031df0:	10800f17 	ldw	r2,60(r2)
 4031df4:	10803fcc 	andi	r2,r2,255
 4031df8:	1004963a 	slli	r2,r2,24
 4031dfc:	1886b03a 	or	r3,r3,r2
 4031e00:	e0bfee17 	ldw	r2,-72(fp)
 4031e04:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(tp->rcv_nxt);
 4031e08:	e0bff717 	ldw	r2,-36(fp)
 4031e0c:	10801617 	ldw	r2,88(r2)
 4031e10:	1004d63a 	srli	r2,r2,24
 4031e14:	10c03fcc 	andi	r3,r2,255
 4031e18:	e0bff717 	ldw	r2,-36(fp)
 4031e1c:	10801617 	ldw	r2,88(r2)
 4031e20:	1004d23a 	srli	r2,r2,8
 4031e24:	10bfc00c 	andi	r2,r2,65280
 4031e28:	1886b03a 	or	r3,r3,r2
 4031e2c:	e0bff717 	ldw	r2,-36(fp)
 4031e30:	10801617 	ldw	r2,88(r2)
 4031e34:	10bfc00c 	andi	r2,r2,65280
 4031e38:	1004923a 	slli	r2,r2,8
 4031e3c:	1886b03a 	or	r3,r3,r2
 4031e40:	e0bff717 	ldw	r2,-36(fp)
 4031e44:	10801617 	ldw	r2,88(r2)
 4031e48:	10803fcc 	andi	r2,r2,255
 4031e4c:	1004963a 	slli	r2,r2,24
 4031e50:	1886b03a 	or	r3,r3,r2
 4031e54:	e0bfee17 	ldw	r2,-72(fp)
 4031e58:	10c00715 	stw	r3,28(r2)
    * a retransmission, and the original SYN caused PPP to start
    * bringing the interface up, and PPP has got a new IP address
    * via IPCP), update the template and the inpcb with the new 
    * address.
    */
   if (flags & TH_SYN)
 4031e5c:	e0bff117 	ldw	r2,-60(fp)
 4031e60:	1080008c 	andi	r2,r2,2
 4031e64:	1005003a 	cmpeq	r2,r2,zero
 4031e68:	1000221e 	bne	r2,zero,4031ef4 <tcp_output+0xb84>
   {
      struct inpcb * inp;
      inp = (struct inpcb *)so->so_pcb;
 4031e6c:	e0bff517 	ldw	r2,-44(fp)
 4031e70:	10800117 	ldw	r2,4(r2)
 4031e74:	e0bfe615 	stw	r2,-104(fp)

      switch(so->so_domain)
 4031e78:	e0bff517 	ldw	r2,-44(fp)
 4031e7c:	10800517 	ldw	r2,20(r2)
 4031e80:	108000a0 	cmpeqi	r2,r2,2
 4031e84:	1000011e 	bne	r2,zero,4031e8c <tcp_output+0xb1c>
 4031e88:	00001906 	br	4031ef0 <tcp_output+0xb80>
         }
         }
#endif   /* INCLUDE_PPP */

         /* If this is a SYN (not a SYN/ACK) then set the pmtu */
         if((flags & TH_ACK) == 0)
 4031e8c:	e0bff117 	ldw	r2,-60(fp)
 4031e90:	1080040c 	andi	r2,r2,16
 4031e94:	1004c03a 	cmpne	r2,r2,zero
 4031e98:	1000161e 	bne	r2,zero,4031ef4 <tcp_output+0xb84>
            inp->inp_pmtu = pmtucache_get(inp->inp_faddr.s_addr);
#else    /* not compiled for pathmtu, guess based on iface */
            {
               NET ifp;
               /* find iface for route. Pass "src" as nexthop return */
               ifp = iproute(ti->ti_dst.s_addr, &src);
 4031e9c:	e0bfee17 	ldw	r2,-72(fp)
 4031ea0:	11000417 	ldw	r4,16(r2)
 4031ea4:	e17ff604 	addi	r5,fp,-40
 4031ea8:	403a8140 	call	403a814 <iproute>
 4031eac:	e0bfe515 	stw	r2,-108(fp)
               if(ifp)
 4031eb0:	e0bfe517 	ldw	r2,-108(fp)
 4031eb4:	1005003a 	cmpeq	r2,r2,zero
 4031eb8:	1000091e 	bne	r2,zero,4031ee0 <tcp_output+0xb70>
                  inp->inp_pmtu = ifp->n_mtu - (ifp->n_lnh + 40);
 4031ebc:	e0bfe517 	ldw	r2,-108(fp)
 4031ec0:	10c00917 	ldw	r3,36(r2)
 4031ec4:	e0bfe517 	ldw	r2,-108(fp)
 4031ec8:	10800817 	ldw	r2,32(r2)
 4031ecc:	1885c83a 	sub	r2,r3,r2
 4031ed0:	10fff604 	addi	r3,r2,-40
 4031ed4:	e0bfe617 	ldw	r2,-104(fp)
 4031ed8:	10c00615 	stw	r3,24(r2)
 4031edc:	00000506 	br	4031ef4 <tcp_output+0xb84>
               else
                  inp->inp_pmtu = 580;  /* Ugh. */
 4031ee0:	e0ffe617 	ldw	r3,-104(fp)
 4031ee4:	00809104 	movi	r2,580
 4031ee8:	18800615 	stw	r2,24(r3)
            }
#endif   /* IP_PMTU */
         }
         break;
 4031eec:	00000106 	br	4031ef4 <tcp_output+0xb84>
         }
         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();    /* bad domain setting */
 4031ef0:	4025bb40 	call	4025bb4 <dtrap>
      }
   }

   /* fill in options if any are set */
   if (optlen)
 4031ef4:	e0bfed17 	ldw	r2,-76(fp)
 4031ef8:	1005003a 	cmpeq	r2,r2,zero
 4031efc:	10002f1e 	bne	r2,zero,4031fbc <tcp_output+0xc4c>
   {
      struct mbuf * mopt;

      mopt = m_getwithdata(MT_TXDATA, MAXOPTLEN);
 4031f00:	01000084 	movi	r4,2
 4031f04:	01404004 	movi	r5,256
 4031f08:	40269b40 	call	40269b4 <m_getnbuf>
 4031f0c:	e0bfe415 	stw	r2,-112(fp)
      if (mopt == NULL) 
 4031f10:	e0bfe417 	ldw	r2,-112(fp)
 4031f14:	1004c03a 	cmpne	r2,r2,zero
 4031f18:	1000051e 	bne	r2,zero,4031f30 <tcp_output+0xbc0>
      {
         m_freem(m);
 4031f1c:	e13fef17 	ldw	r4,-68(fp)
 4031f20:	4026c900 	call	4026c90 <m_freem>
         return (ENOBUFS);
 4031f24:	00c01a44 	movi	r3,105
 4031f28:	e0fff815 	stw	r3,-32(fp)
 4031f2c:	00016906 	br	40324d4 <tcp_output+0x1164>
      }

      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
 4031f30:	e0bfe917 	ldw	r2,-92(fp)
 4031f34:	10c00617 	ldw	r3,24(r2)
 4031f38:	e0bfe417 	ldw	r2,-112(fp)
 4031f3c:	10c00615 	stw	r3,24(r2)
      tcp_mbuf->m_next = mopt;
 4031f40:	e0ffe917 	ldw	r3,-92(fp)
 4031f44:	e0bfe417 	ldw	r2,-112(fp)
 4031f48:	18800615 	stw	r2,24(r3)

      /* extend options to aligned address */
      while(optlen & 0x03)
 4031f4c:	00000706 	br	4031f6c <tcp_output+0xbfc>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;
 4031f50:	e0ffed17 	ldw	r3,-76(fp)
 4031f54:	d0a83104 	addi	r2,gp,-24380
 4031f58:	1885883a 	add	r2,r3,r2
 4031f5c:	10000005 	stb	zero,0(r2)
 4031f60:	e0bfed17 	ldw	r2,-76(fp)
 4031f64:	10800044 	addi	r2,r2,1
 4031f68:	e0bfed15 	stw	r2,-76(fp)
      /* insert options mbuf after after tmp_mbuf */
      mopt->m_next = tcp_mbuf->m_next;
      tcp_mbuf->m_next = mopt;

      /* extend options to aligned address */
      while(optlen & 0x03)
 4031f6c:	e0bfed17 	ldw	r2,-76(fp)
 4031f70:	108000cc 	andi	r2,r2,3
 4031f74:	1004c03a 	cmpne	r2,r2,zero
 4031f78:	103ff51e 	bne	r2,zero,4031f50 <tcp_output+0xbe0>
         tcp_optionbuf[optlen++] = TCPOPT_EOL;

      MEMCPY(mtod(mopt, char *), tcp_optionbuf, optlen);
 4031f7c:	e0bfe417 	ldw	r2,-112(fp)
 4031f80:	10800317 	ldw	r2,12(r2)
 4031f84:	1009883a 	mov	r4,r2
 4031f88:	d1683104 	addi	r5,gp,-24380
 4031f8c:	e1bfed17 	ldw	r6,-76(fp)
 4031f90:	4001de40 	call	4001de4 <memcpy>
      mopt->m_len = optlen;
 4031f94:	e0ffe417 	ldw	r3,-112(fp)
 4031f98:	e0bfed17 	ldw	r2,-76(fp)
 4031f9c:	18800215 	stw	r2,8(r3)
      /* use portable macro to set tcp data offset bits */
      SET_TH_OFF(ti->ti_t, ((sizeof (struct tcphdr) + optlen) >> 2));
 4031fa0:	e0bfed17 	ldw	r2,-76(fp)
 4031fa4:	10800504 	addi	r2,r2,20
 4031fa8:	1004d0ba 	srli	r2,r2,2
 4031fac:	1004913a 	slli	r2,r2,4
 4031fb0:	1007883a 	mov	r3,r2
 4031fb4:	e0bfee17 	ldw	r2,-72(fp)
 4031fb8:	10c00805 	stb	r3,32(r2)
   }

   ti->ti_flags = (u_char)flags;
 4031fbc:	e0bff117 	ldw	r2,-60(fp)
 4031fc0:	1007883a 	mov	r3,r2
 4031fc4:	e0bfee17 	ldw	r2,-72(fp)
 4031fc8:	10c00845 	stb	r3,33(r2)
   /*
    * Calculate receive window. Don't shrink window,
    * but avoid silly window syndrome.
    */
   if (win < (long)(so->so_rcv.sb_hiwat / 4) && win < (long)tp->t_maxseg)
 4031fcc:	e0bff517 	ldw	r2,-44(fp)
 4031fd0:	10800b17 	ldw	r2,44(r2)
 4031fd4:	1004d0ba 	srli	r2,r2,2
 4031fd8:	1007883a 	mov	r3,r2
 4031fdc:	e0bff317 	ldw	r2,-52(fp)
 4031fe0:	10c0060e 	bge	r2,r3,4031ffc <tcp_output+0xc8c>
 4031fe4:	e0bff717 	ldw	r2,-36(fp)
 4031fe8:	10800a0b 	ldhu	r2,40(r2)
 4031fec:	10ffffcc 	andi	r3,r2,65535
 4031ff0:	e0bff317 	ldw	r2,-52(fp)
 4031ff4:	10c0010e 	bge	r2,r3,4031ffc <tcp_output+0xc8c>
      win = 0;
 4031ff8:	e03ff315 	stw	zero,-52(fp)
   if (win < (long)(tp->rcv_adv - tp->rcv_nxt))
 4031ffc:	e0bff717 	ldw	r2,-36(fp)
 4032000:	10c01917 	ldw	r3,100(r2)
 4032004:	e0bff717 	ldw	r2,-36(fp)
 4032008:	10801617 	ldw	r2,88(r2)
 403200c:	1885c83a 	sub	r2,r3,r2
 4032010:	1007883a 	mov	r3,r2
 4032014:	e0bff317 	ldw	r2,-52(fp)
 4032018:	10c0060e 	bge	r2,r3,4032034 <tcp_output+0xcc4>
      win = (long)(tp->rcv_adv - tp->rcv_nxt);
 403201c:	e0bff717 	ldw	r2,-36(fp)
 4032020:	10c01917 	ldw	r3,100(r2)
 4032024:	e0bff717 	ldw	r2,-36(fp)
 4032028:	10801617 	ldw	r2,88(r2)
 403202c:	1885c83a 	sub	r2,r3,r2
 4032030:	e0bff315 	stw	r2,-52(fp)

   /* do check for Iniche buffer limits -JB- */
   if (bigfreeq.q_len == 0)   /* If queue length is 0, set window to 0 */
 4032034:	008101b4 	movhi	r2,1030
 4032038:	10a2af04 	addi	r2,r2,-30020
 403203c:	10800217 	ldw	r2,8(r2)
 4032040:	1004c03a 	cmpne	r2,r2,zero
 4032044:	1000021e 	bne	r2,zero,4032050 <tcp_output+0xce0>
   {
      win = 0;
 4032048:	e03ff315 	stw	zero,-52(fp)
 403204c:	00001406 	br	40320a0 <tcp_output+0xd30>
   }
   else if(win > (((long)bigfreeq.q_len - 1) * (long)bigbufsiz))
 4032050:	008101b4 	movhi	r2,1030
 4032054:	10a2af04 	addi	r2,r2,-30020
 4032058:	10800217 	ldw	r2,8(r2)
 403205c:	10ffffc4 	addi	r3,r2,-1
 4032060:	00810174 	movhi	r2,1029
 4032064:	10b9f404 	addi	r2,r2,-6192
 4032068:	10800017 	ldw	r2,0(r2)
 403206c:	1887383a 	mul	r3,r3,r2
 4032070:	e0bff317 	ldw	r2,-52(fp)
 4032074:	18800a0e 	bge	r3,r2,40320a0 <tcp_output+0xd30>
   {
      win = ((long)bigfreeq.q_len - 1) * bigbufsiz;
 4032078:	008101b4 	movhi	r2,1030
 403207c:	10a2af04 	addi	r2,r2,-30020
 4032080:	10800217 	ldw	r2,8(r2)
 4032084:	10bfffc4 	addi	r2,r2,-1
 4032088:	1007883a 	mov	r3,r2
 403208c:	00810174 	movhi	r2,1029
 4032090:	10b9f404 	addi	r2,r2,-6192
 4032094:	10800017 	ldw	r2,0(r2)
 4032098:	1885383a 	mul	r2,r3,r2
 403209c:	e0bff315 	stw	r2,-52(fp)
      ti->ti_win = htons((u_short)(win >> tp->rcv_wind_scale)); /* apply scale */
   }
   else
#endif /* TCP_WIN_SCALE */
   {
      ti->ti_win = htons((u_short)win);
 40320a0:	e0bff317 	ldw	r2,-52(fp)
 40320a4:	10bfffcc 	andi	r2,r2,65535
 40320a8:	1004d23a 	srli	r2,r2,8
 40320ac:	10803fcc 	andi	r2,r2,255
 40320b0:	1009883a 	mov	r4,r2
 40320b4:	e0bff317 	ldw	r2,-52(fp)
 40320b8:	10bfffcc 	andi	r2,r2,65535
 40320bc:	1004923a 	slli	r2,r2,8
 40320c0:	1007883a 	mov	r3,r2
 40320c4:	00bfc004 	movi	r2,-256
 40320c8:	1884703a 	and	r2,r3,r2
 40320cc:	2084b03a 	or	r2,r4,r2
 40320d0:	1007883a 	mov	r3,r2
 40320d4:	e0bfee17 	ldw	r2,-72(fp)
 40320d8:	10c0088d 	sth	r3,34(r2)
   }

   if (SEQ_GT(tp->snd_up, tp->snd_nxt)) 
 40320dc:	e0bff717 	ldw	r2,-36(fp)
 40320e0:	10c01017 	ldw	r3,64(r2)
 40320e4:	e0bff717 	ldw	r2,-36(fp)
 40320e8:	10800f17 	ldw	r2,60(r2)
 40320ec:	1885c83a 	sub	r2,r3,r2
 40320f0:	10800050 	cmplti	r2,r2,1
 40320f4:	1000201e 	bne	r2,zero,4032178 <tcp_output+0xe08>
   {
      ti->ti_urp = htons((u_short)(tp->snd_up - tp->snd_nxt));
 40320f8:	e0bff717 	ldw	r2,-36(fp)
 40320fc:	10801017 	ldw	r2,64(r2)
 4032100:	1007883a 	mov	r3,r2
 4032104:	e0bff717 	ldw	r2,-36(fp)
 4032108:	10800f17 	ldw	r2,60(r2)
 403210c:	1885c83a 	sub	r2,r3,r2
 4032110:	10bfffcc 	andi	r2,r2,65535
 4032114:	1004d23a 	srli	r2,r2,8
 4032118:	10803fcc 	andi	r2,r2,255
 403211c:	1009883a 	mov	r4,r2
 4032120:	e0bff717 	ldw	r2,-36(fp)
 4032124:	10801017 	ldw	r2,64(r2)
 4032128:	1007883a 	mov	r3,r2
 403212c:	e0bff717 	ldw	r2,-36(fp)
 4032130:	10800f17 	ldw	r2,60(r2)
 4032134:	1885c83a 	sub	r2,r3,r2
 4032138:	10bfffcc 	andi	r2,r2,65535
 403213c:	1004923a 	slli	r2,r2,8
 4032140:	1007883a 	mov	r3,r2
 4032144:	00bfc004 	movi	r2,-256
 4032148:	1884703a 	and	r2,r3,r2
 403214c:	2084b03a 	or	r2,r4,r2
 4032150:	1007883a 	mov	r3,r2
 4032154:	e0bfee17 	ldw	r2,-72(fp)
 4032158:	10c0098d 	sth	r3,38(r2)
      ti->ti_flags |= TH_URG;
 403215c:	e0bfee17 	ldw	r2,-72(fp)
 4032160:	10800843 	ldbu	r2,33(r2)
 4032164:	10800814 	ori	r2,r2,32
 4032168:	1007883a 	mov	r3,r2
 403216c:	e0bfee17 	ldw	r2,-72(fp)
 4032170:	10c00845 	stb	r3,33(r2)
 4032174:	00000406 	br	4032188 <tcp_output+0xe18>
       * If no urgent pointer to send, then we pull
       * the urgent pointer to the left edge of the send window
       * so that it doesn't drift into the send window on sequence
       * number wraparound.
       */
      tp->snd_up = tp->snd_una;        /* drag it along */
 4032178:	e0bff717 	ldw	r2,-36(fp)
 403217c:	10c00e17 	ldw	r3,56(r2)
 4032180:	e0bff717 	ldw	r2,-36(fp)
 4032184:	10c01015 	stw	r3,64(r2)
   /*
    * If anything to send and we can send it all, set PUSH.
    * (This will keep happy those implementations which only
    * give data to the user when a buffer fills or a PUSH comes in.)
    */
   if (len && off+len == (int)so->so_snd.sb_cc)
 4032188:	e0bff417 	ldw	r2,-48(fp)
 403218c:	1005003a 	cmpeq	r2,r2,zero
 4032190:	10000c1e 	bne	r2,zero,40321c4 <tcp_output+0xe54>
 4032194:	e0fff217 	ldw	r3,-56(fp)
 4032198:	e0bff417 	ldw	r2,-48(fp)
 403219c:	1887883a 	add	r3,r3,r2
 40321a0:	e0bff517 	ldw	r2,-44(fp)
 40321a4:	10801217 	ldw	r2,72(r2)
 40321a8:	1880061e 	bne	r3,r2,40321c4 <tcp_output+0xe54>
      ti->ti_flags |= TH_PUSH;
 40321ac:	e0bfee17 	ldw	r2,-72(fp)
 40321b0:	10800843 	ldbu	r2,33(r2)
 40321b4:	10800214 	ori	r2,r2,8
 40321b8:	1007883a 	mov	r3,r2
 40321bc:	e0bfee17 	ldw	r2,-72(fp)
 40321c0:	10c00845 	stb	r3,33(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
 40321c4:	e0bff717 	ldw	r2,-36(fp)
 40321c8:	10800a83 	ldbu	r2,42(r2)
 40321cc:	10803fcc 	andi	r2,r2,255
 40321d0:	1080201c 	xori	r2,r2,128
 40321d4:	10bfe004 	addi	r2,r2,-128
 40321d8:	1005003a 	cmpeq	r2,r2,zero
 40321dc:	1000041e 	bne	r2,zero,40321f0 <tcp_output+0xe80>
 40321e0:	e0bff717 	ldw	r2,-36(fp)
 40321e4:	10800417 	ldw	r2,16(r2)
 40321e8:	1004c03a 	cmpne	r2,r2,zero
 40321ec:	1000561e 	bne	r2,zero,4032348 <tcp_output+0xfd8>
   {
      tcp_seq startseq = tp->snd_nxt;
 40321f0:	e0bff717 	ldw	r2,-36(fp)
 40321f4:	10800f17 	ldw	r2,60(r2)
 40321f8:	e0bfe315 	stw	r2,-116(fp)

      /*
       * Advance snd_nxt over sequence space of this segment.
       */
      if (flags & TH_SYN)
 40321fc:	e0bff117 	ldw	r2,-60(fp)
 4032200:	1080008c 	andi	r2,r2,2
 4032204:	1005003a 	cmpeq	r2,r2,zero
 4032208:	1000051e 	bne	r2,zero,4032220 <tcp_output+0xeb0>
         tp->snd_nxt++;
 403220c:	e0bff717 	ldw	r2,-36(fp)
 4032210:	10800f17 	ldw	r2,60(r2)
 4032214:	10c00044 	addi	r3,r2,1
 4032218:	e0bff717 	ldw	r2,-36(fp)
 403221c:	10c00f15 	stw	r3,60(r2)

      if (flags & TH_FIN)
 4032220:	e0bff117 	ldw	r2,-60(fp)
 4032224:	1080004c 	andi	r2,r2,1
 4032228:	10803fcc 	andi	r2,r2,255
 403222c:	1005003a 	cmpeq	r2,r2,zero
 4032230:	10000b1e 	bne	r2,zero,4032260 <tcp_output+0xef0>
      {
         tp->snd_nxt++;
 4032234:	e0bff717 	ldw	r2,-36(fp)
 4032238:	10800f17 	ldw	r2,60(r2)
 403223c:	10c00044 	addi	r3,r2,1
 4032240:	e0bff717 	ldw	r2,-36(fp)
 4032244:	10c00f15 	stw	r3,60(r2)
         tp->t_flags |= TF_SENTFIN;
 4032248:	e0bff717 	ldw	r2,-36(fp)
 403224c:	10800b0b 	ldhu	r2,44(r2)
 4032250:	10800414 	ori	r2,r2,16
 4032254:	1007883a 	mov	r3,r2
 4032258:	e0bff717 	ldw	r2,-36(fp)
 403225c:	10c00b0d 	sth	r3,44(r2)
      }
      tp->snd_nxt += len;
 4032260:	e0bff717 	ldw	r2,-36(fp)
 4032264:	10c00f17 	ldw	r3,60(r2)
 4032268:	e0bff417 	ldw	r2,-48(fp)
 403226c:	1887883a 	add	r3,r3,r2
 4032270:	e0bff717 	ldw	r2,-36(fp)
 4032274:	10c00f15 	stw	r3,60(r2)
      if (SEQ_GT(tp->snd_nxt, tp->snd_max)) 
 4032278:	e0bff717 	ldw	r2,-36(fp)
 403227c:	10c00f17 	ldw	r3,60(r2)
 4032280:	e0bff717 	ldw	r2,-36(fp)
 4032284:	10801a17 	ldw	r2,104(r2)
 4032288:	1885c83a 	sub	r2,r3,r2
 403228c:	10800050 	cmplti	r2,r2,1
 4032290:	1000171e 	bne	r2,zero,40322f0 <tcp_output+0xf80>
      {
         tp->snd_max = tp->snd_nxt;
 4032294:	e0bff717 	ldw	r2,-36(fp)
 4032298:	10c00f17 	ldw	r3,60(r2)
 403229c:	e0bff717 	ldw	r2,-36(fp)
 40322a0:	10c01a15 	stw	r3,104(r2)
         /*
          * Time this transmission if not a retransmission and
          * not currently timing anything.
          */
         if (tp->t_rttick == 0) 
 40322a4:	e0bff717 	ldw	r2,-36(fp)
 40322a8:	10801e17 	ldw	r2,120(r2)
 40322ac:	1004c03a 	cmpne	r2,r2,zero
 40322b0:	10000f1e 	bne	r2,zero,40322f0 <tcp_output+0xf80>
         {
            tp->t_rttick = cticks;
 40322b4:	00810174 	movhi	r2,1029
 40322b8:	1081e404 	addi	r2,r2,1936
 40322bc:	10c00017 	ldw	r3,0(r2)
 40322c0:	e0bff717 	ldw	r2,-36(fp)
 40322c4:	10c01e15 	stw	r3,120(r2)
            tp->t_rtseq = startseq;
 40322c8:	e0fff717 	ldw	r3,-36(fp)
 40322cc:	e0bfe317 	ldw	r2,-116(fp)
 40322d0:	18801f15 	stw	r2,124(r3)
            tcpstat.tcps_segstimed++;
 40322d4:	008101b4 	movhi	r2,1030
 40322d8:	10a37804 	addi	r2,r2,-29216
 40322dc:	10800617 	ldw	r2,24(r2)
 40322e0:	10c00044 	addi	r3,r2,1
 40322e4:	008101b4 	movhi	r2,1030
 40322e8:	10a37804 	addi	r2,r2,-29216
 40322ec:	10c00615 	stw	r3,24(r2)
       * Initial value for retransmit timer is smoothed
       * round-trip time + 2 * round-trip time variance.
       * Initialize shift counter which is used for backoff
       * of retransmit time.
       */
      if (tp->t_timer[TCPT_REXMT] == 0 &&
 40322f0:	e0bff717 	ldw	r2,-36(fp)
 40322f4:	10800317 	ldw	r2,12(r2)
 40322f8:	1004c03a 	cmpne	r2,r2,zero
 40322fc:	1000211e 	bne	r2,zero,4032384 <tcp_output+0x1014>
 4032300:	e0bff717 	ldw	r2,-36(fp)
 4032304:	10c00f17 	ldw	r3,60(r2)
 4032308:	e0bff717 	ldw	r2,-36(fp)
 403230c:	10800e17 	ldw	r2,56(r2)
 4032310:	18801c26 	beq	r3,r2,4032384 <tcp_output+0x1014>
          tp->snd_nxt != tp->snd_una) 
      {
         tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 4032314:	e0bff717 	ldw	r2,-36(fp)
 4032318:	10c00817 	ldw	r3,32(r2)
 403231c:	e0bff717 	ldw	r2,-36(fp)
 4032320:	10c00315 	stw	r3,12(r2)
         if (tp->t_timer[TCPT_PERSIST]) 
 4032324:	e0bff717 	ldw	r2,-36(fp)
 4032328:	10800417 	ldw	r2,16(r2)
 403232c:	1005003a 	cmpeq	r2,r2,zero
 4032330:	1000141e 	bne	r2,zero,4032384 <tcp_output+0x1014>
         {
            tp->t_timer[TCPT_PERSIST] = 0;
 4032334:	e0bff717 	ldw	r2,-36(fp)
 4032338:	10000415 	stw	zero,16(r2)
            tp->t_rxtshift = 0;
 403233c:	e0bff717 	ldw	r2,-36(fp)
 4032340:	10000715 	stw	zero,28(r2)

   /*
    * In transmit state, time the transmission and arrange for
    * the retransmit.  In persist state, just set snd_max.
    */
   if (tp->t_force == 0 || tp->t_timer[TCPT_PERSIST] == 0) 
 4032344:	00000f06 	br	4032384 <tcp_output+0x1014>
         }
      }
   }
   else
   {
      if (SEQ_GT(tp->snd_nxt + len, tp->snd_max))
 4032348:	e0bff717 	ldw	r2,-36(fp)
 403234c:	10c00f17 	ldw	r3,60(r2)
 4032350:	e0bff417 	ldw	r2,-48(fp)
 4032354:	1887883a 	add	r3,r3,r2
 4032358:	e0bff717 	ldw	r2,-36(fp)
 403235c:	10801a17 	ldw	r2,104(r2)
 4032360:	1885c83a 	sub	r2,r3,r2
 4032364:	10800050 	cmplti	r2,r2,1
 4032368:	1000061e 	bne	r2,zero,4032384 <tcp_output+0x1014>
         tp->snd_max = tp->snd_nxt + len;
 403236c:	e0bff717 	ldw	r2,-36(fp)
 4032370:	10c00f17 	ldw	r3,60(r2)
 4032374:	e0bff417 	ldw	r2,-48(fp)
 4032378:	1887883a 	add	r3,r3,r2
 403237c:	e0bff717 	ldw	r2,-36(fp)
 4032380:	10c01a15 	stw	r3,104(r2)
   tcp_trace("tcp_output: sending, state %d, tcpcb: %x",
    tp->t_state, tp );
#endif

#ifdef MUTE_WARNS
   error = 0;
 4032384:	e03ff015 	stw	zero,-64(fp)
   if(so->so_domain != AF_INET6)
#endif   /* IP_V6 */
   {
      struct ip * pip;
   
      pip = mtod(m, struct ip *);
 4032388:	e0bfef17 	ldw	r2,-68(fp)
 403238c:	10800317 	ldw	r2,12(r2)
 4032390:	e0bfe215 	stw	r2,-120(fp)
      /* Fill in IP length and send to IP level. */
      pip->ip_len = (u_short)(TCPIPHDRSZ + optlen + len);
 4032394:	e0bfed17 	ldw	r2,-76(fp)
 4032398:	1007883a 	mov	r3,r2
 403239c:	e0bff417 	ldw	r2,-48(fp)
 40323a0:	1885883a 	add	r2,r3,r2
 40323a4:	10800a04 	addi	r2,r2,40
 40323a8:	1007883a 	mov	r3,r2
 40323ac:	e0bfe217 	ldw	r2,-120(fp)
 40323b0:	10c0008d 	sth	r3,2(r2)
      error = ip_output(m, so->so_optsPack);
 40323b4:	e0bff517 	ldw	r2,-44(fp)
 40323b8:	11401f17 	ldw	r5,124(r2)
 40323bc:	e13fef17 	ldw	r4,-68(fp)
 40323c0:	40276c40 	call	40276c4 <ip_output>
 40323c4:	e0bff015 	stw	r2,-64(fp)
                    (sizeof(struct ipv6) + sizeof(struct tcphdr) + optlen + len),
                    (struct   ip_socopts *)0);          
   }
#endif   /* IP_V6 */

   if (error)
 40323c8:	e0bff017 	ldw	r2,-64(fp)
 40323cc:	1005003a 	cmpeq	r2,r2,zero
 40323d0:	1000151e 	bne	r2,zero,4032428 <tcp_output+0x10b8>
   {
      if (error == ENOBUFS)   /* ip_output needed a copy buffer it couldn't get */
 40323d4:	e0bff017 	ldw	r2,-64(fp)
 40323d8:	10801a58 	cmpnei	r2,r2,105
 40323dc:	10000f1e 	bne	r2,zero,403241c <tcp_output+0x10ac>
      {
         if (m->m_type == MT_FREE)  /* ip_output() probably freed first mbuf */
 40323e0:	e0bfef17 	ldw	r2,-68(fp)
 40323e4:	10800817 	ldw	r2,32(r2)
 40323e8:	1004c03a 	cmpne	r2,r2,zero
 40323ec:	1000031e 	bne	r2,zero,40323fc <tcp_output+0x108c>
            m = m->m_next;
 40323f0:	e0bfef17 	ldw	r2,-68(fp)
 40323f4:	10800617 	ldw	r2,24(r2)
 40323f8:	e0bfef15 	stw	r2,-68(fp)
         m_freem(m); /* free the mbuf chain */
 40323fc:	e13fef17 	ldw	r4,-68(fp)
 4032400:	4026c900 	call	4026c90 <m_freem>
         tcp_quench(tp->t_inpcb);
 4032404:	e0bff717 	ldw	r2,-36(fp)
 4032408:	11000d17 	ldw	r4,52(r2)
 403240c:	4032f740 	call	4032f74 <tcp_quench>
         return (error);
 4032410:	e0bff017 	ldw	r2,-64(fp)
 4032414:	e0bff815 	stw	r2,-32(fp)
 4032418:	00002e06 	br	40324d4 <tcp_output+0x1164>
      }
      return (error);
 403241c:	e0fff017 	ldw	r3,-64(fp)
 4032420:	e0fff815 	stw	r3,-32(fp)
 4032424:	00002b06 	br	40324d4 <tcp_output+0x1164>

   /*
    * Data sent (as far as we can tell).
    */

   TCP_MIB_INC(tcpOutSegs);   /* keep MIB stats */
 4032428:	008101b4 	movhi	r2,1030
 403242c:	10a34a04 	addi	r2,r2,-29400
 4032430:	10800a17 	ldw	r2,40(r2)
 4032434:	10c00044 	addi	r3,r2,1
 4032438:	008101b4 	movhi	r2,1030
 403243c:	10a34a04 	addi	r2,r2,-29400
 4032440:	10c00a15 	stw	r3,40(r2)
   tcpstat.tcps_sndtotal++;
 4032444:	008101b4 	movhi	r2,1030
 4032448:	10a37804 	addi	r2,r2,-29216
 403244c:	10800f17 	ldw	r2,60(r2)
 4032450:	10c00044 	addi	r3,r2,1
 4032454:	008101b4 	movhi	r2,1030
 4032458:	10a37804 	addi	r2,r2,-29216
 403245c:	10c00f15 	stw	r3,60(r2)
   /*
    * If this advertises a larger window than any other segment,
    * then remember the size of the advertised window.
    * Any pending ACK has now been sent.
    */
   if (win > 0 && SEQ_GT(tp->rcv_nxt+win, tp->rcv_adv))
 4032460:	e0bff317 	ldw	r2,-52(fp)
 4032464:	10800050 	cmplti	r2,r2,1
 4032468:	10000f1e 	bne	r2,zero,40324a8 <tcp_output+0x1138>
 403246c:	e0bff717 	ldw	r2,-36(fp)
 4032470:	10c01617 	ldw	r3,88(r2)
 4032474:	e0bff317 	ldw	r2,-52(fp)
 4032478:	1887883a 	add	r3,r3,r2
 403247c:	e0bff717 	ldw	r2,-36(fp)
 4032480:	10801917 	ldw	r2,100(r2)
 4032484:	1885c83a 	sub	r2,r3,r2
 4032488:	10800050 	cmplti	r2,r2,1
 403248c:	1000061e 	bne	r2,zero,40324a8 <tcp_output+0x1138>
      tp->rcv_adv = tp->rcv_nxt + (unsigned)win;
 4032490:	e0bff717 	ldw	r2,-36(fp)
 4032494:	10c01617 	ldw	r3,88(r2)
 4032498:	e0bff317 	ldw	r2,-52(fp)
 403249c:	1887883a 	add	r3,r3,r2
 40324a0:	e0bff717 	ldw	r2,-36(fp)
 40324a4:	10c01915 	stw	r3,100(r2)
   tp->t_flags &= ~(TF_ACKNOW|TF_SACKNOW|TF_DELACK);
 40324a8:	e0bff717 	ldw	r2,-36(fp)
 40324ac:	10c00b0b 	ldhu	r3,44(r2)
 40324b0:	00bfef04 	movi	r2,-68
 40324b4:	1884703a 	and	r2,r3,r2
 40324b8:	1007883a 	mov	r3,r2
 40324bc:	e0bff717 	ldw	r2,-36(fp)
 40324c0:	10c00b0d 	sth	r3,44(r2)
   if (sendalot)
 40324c4:	e0bfeb17 	ldw	r2,-84(fp)
 40324c8:	1004c03a 	cmpne	r2,r2,zero
 40324cc:	103bb81e 	bne	r2,zero,40313b0 <tcp_output+0x40>
      goto again;
   return (0);
 40324d0:	e03ff815 	stw	zero,-32(fp)
 40324d4:	e0bff817 	ldw	r2,-32(fp)
}
 40324d8:	e037883a 	mov	sp,fp
 40324dc:	dfc00117 	ldw	ra,4(sp)
 40324e0:	df000017 	ldw	fp,0(sp)
 40324e4:	dec00204 	addi	sp,sp,8
 40324e8:	f800283a 	ret

040324ec <tcp_setpersist>:
 * RETURNS: NA
 */

void
tcp_setpersist(struct tcpcb * tp)
{
 40324ec:	defffc04 	addi	sp,sp,-16
 40324f0:	dfc00315 	stw	ra,12(sp)
 40324f4:	df000215 	stw	fp,8(sp)
 40324f8:	df000204 	addi	fp,sp,8
 40324fc:	e13fff15 	stw	r4,-4(fp)
   int   t;

   t = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 4032500:	e0bfff17 	ldw	r2,-4(fp)
 4032504:	10802017 	ldw	r2,128(r2)
 4032508:	1007d0ba 	srai	r3,r2,2
 403250c:	e0bfff17 	ldw	r2,-4(fp)
 4032510:	10802117 	ldw	r2,132(r2)
 4032514:	1885883a 	add	r2,r3,r2
 4032518:	1005d07a 	srai	r2,r2,1
 403251c:	e0bffe15 	stw	r2,-8(fp)

   if (tp->t_timer[TCPT_REXMT])
 4032520:	e0bfff17 	ldw	r2,-4(fp)
 4032524:	10800317 	ldw	r2,12(r2)
 4032528:	1005003a 	cmpeq	r2,r2,zero
 403252c:	1000031e 	bne	r2,zero,403253c <tcp_setpersist+0x50>
      panic("tcp_output REXMT");
 4032530:	01010174 	movhi	r4,1029
 4032534:	212e8104 	addi	r4,r4,-17916
 4032538:	4020e100 	call	4020e10 <panic>
   /*
    * Start/restart persistance timer.
    */
   TCPT_RANGESET(tp->t_timer[TCPT_PERSIST],
 403253c:	e0bfff17 	ldw	r2,-4(fp)
 4032540:	10c00717 	ldw	r3,28(r2)
 4032544:	00810174 	movhi	r2,1029
 4032548:	10b8ecc4 	addi	r2,r2,-7245
 403254c:	10c5883a 	add	r2,r2,r3
 4032550:	10800003 	ldbu	r2,0(r2)
 4032554:	10c03fcc 	andi	r3,r2,255
 4032558:	e0bffe17 	ldw	r2,-8(fp)
 403255c:	1885383a 	mul	r2,r3,r2
 4032560:	10ffffcc 	andi	r3,r2,65535
 4032564:	18e0001c 	xori	r3,r3,32768
 4032568:	18e00004 	addi	r3,r3,-32768
 403256c:	e0bfff17 	ldw	r2,-4(fp)
 4032570:	10c00415 	stw	r3,16(r2)
 4032574:	e0bfff17 	ldw	r2,-4(fp)
 4032578:	10800417 	ldw	r2,16(r2)
 403257c:	10800288 	cmpgei	r2,r2,10
 4032580:	1000041e 	bne	r2,zero,4032594 <tcp_setpersist+0xa8>
 4032584:	e0ffff17 	ldw	r3,-4(fp)
 4032588:	00800284 	movi	r2,10
 403258c:	18800415 	stw	r2,16(r3)
 4032590:	00000706 	br	40325b0 <tcp_setpersist+0xc4>
 4032594:	e0bfff17 	ldw	r2,-4(fp)
 4032598:	10800417 	ldw	r2,16(r2)
 403259c:	10801e50 	cmplti	r2,r2,121
 40325a0:	1000031e 	bne	r2,zero,40325b0 <tcp_setpersist+0xc4>
 40325a4:	e0ffff17 	ldw	r3,-4(fp)
 40325a8:	00801e04 	movi	r2,120
 40325ac:	18800415 	stw	r2,16(r3)
    t * tcp_backoff[tp->t_rxtshift],
    TCPTV_PERSMIN, TCPTV_PERSMAX);
   if (tp->t_rxtshift < TCP_MAXRXTSHIFT)
 40325b0:	e0bfff17 	ldw	r2,-4(fp)
 40325b4:	10800717 	ldw	r2,28(r2)
 40325b8:	10800308 	cmpgei	r2,r2,12
 40325bc:	1000051e 	bne	r2,zero,40325d4 <tcp_setpersist+0xe8>
      tp->t_rxtshift++;
 40325c0:	e0bfff17 	ldw	r2,-4(fp)
 40325c4:	10800717 	ldw	r2,28(r2)
 40325c8:	10c00044 	addi	r3,r2,1
 40325cc:	e0bfff17 	ldw	r2,-4(fp)
 40325d0:	10c00715 	stw	r3,28(r2)

}
 40325d4:	e037883a 	mov	sp,fp
 40325d8:	dfc00117 	ldw	ra,4(sp)
 40325dc:	df000017 	ldw	fp,0(sp)
 40325e0:	dec00204 	addi	sp,sp,8
 40325e4:	f800283a 	ret

040325e8 <bld_options>:
 * RETURNS: length of option data added to buffer
 */

static int
bld_options(struct tcpcb * tp, u_char * cp, int flags, struct socket * so)
{
 40325e8:	defff704 	addi	sp,sp,-36
 40325ec:	dfc00815 	stw	ra,32(sp)
 40325f0:	df000715 	stw	fp,28(sp)
 40325f4:	df000704 	addi	fp,sp,28
 40325f8:	e13ffb15 	stw	r4,-20(fp)
 40325fc:	e17ffc15 	stw	r5,-16(fp)
 4032600:	e1bffd15 	stw	r6,-12(fp)
 4032604:	e1fffe15 	stw	r7,-8(fp)
   int      len;
   u_short  mss;

   if(tp->t_flags & TF_NOOPT)    /* no options allowed? */
 4032608:	e0bffb17 	ldw	r2,-20(fp)
 403260c:	10800b0b 	ldhu	r2,44(r2)
 4032610:	10bfffcc 	andi	r2,r2,65535
 4032614:	1080020c 	andi	r2,r2,8
 4032618:	1005003a 	cmpeq	r2,r2,zero
 403261c:	1000021e 	bne	r2,zero,4032628 <bld_options+0x40>
      return 0;
 4032620:	e03fff15 	stw	zero,-4(fp)
 4032624:	00002406 	br	40326b8 <bld_options+0xd0>

   /* Alway put MSS option on SYN packets */
   if (flags & TH_SYN)
 4032628:	e0bffd17 	ldw	r2,-12(fp)
 403262c:	1080008c 	andi	r2,r2,2
 4032630:	1005003a 	cmpeq	r2,r2,zero
 4032634:	10001d1e 	bne	r2,zero,40326ac <bld_options+0xc4>
   {
      mss   =  (u_short)tcp_mss(so);
 4032638:	e13ffe17 	ldw	r4,-8(fp)
 403263c:	40312540 	call	4031254 <tcp_mss>
 4032640:	e0bff90d 	sth	r2,-28(fp)

      /* always send MSS option on SYN, fill in MSS parm */
      *(cp + 0) = TCPOPT_MAXSEG;
 4032644:	e0fffc17 	ldw	r3,-16(fp)
 4032648:	00800084 	movi	r2,2
 403264c:	18800005 	stb	r2,0(r3)
      *(cp + 1) = MSSOPT_LEN;               /* length byte */
 4032650:	e0bffc17 	ldw	r2,-16(fp)
 4032654:	10c00044 	addi	r3,r2,1
 4032658:	00800104 	movi	r2,4
 403265c:	18800005 	stb	r2,0(r3)
      *(cp + 2)  = (u_char) ((mss & 0xff00) >> 8);
 4032660:	e0bffc17 	ldw	r2,-16(fp)
 4032664:	10c00084 	addi	r3,r2,2
 4032668:	e0bff90b 	ldhu	r2,-28(fp)
 403266c:	10bfc00c 	andi	r2,r2,65280
 4032670:	1005d23a 	srai	r2,r2,8
 4032674:	18800005 	stb	r2,0(r3)
      *(cp + 3)  = (u_char) (mss & 0xff);
 4032678:	e0bffc17 	ldw	r2,-16(fp)
 403267c:	110000c4 	addi	r4,r2,3
 4032680:	e0bff90b 	ldhu	r2,-28(fp)
 4032684:	1007883a 	mov	r3,r2
 4032688:	00bfffc4 	movi	r2,-1
 403268c:	1884703a 	and	r2,r3,r2
 4032690:	20800005 	stb	r2,0(r4)
      len = 4;
 4032694:	00800104 	movi	r2,4
 4032698:	e0bffa15 	stw	r2,-24(fp)
      cp += 4;
 403269c:	e0bffc17 	ldw	r2,-16(fp)
 40326a0:	10800104 	addi	r2,r2,4
 40326a4:	e0bffc15 	stw	r2,-16(fp)
 40326a8:	00000106 	br	40326b0 <bld_options+0xc8>
   }
   else
      len = 0;
 40326ac:	e03ffa15 	stw	zero,-24(fp)
      len += 10;
   }
#endif   /* TCP_TIMESTAMP */

   USE_ARG(so);
   return len;
 40326b0:	e0bffa17 	ldw	r2,-24(fp)
 40326b4:	e0bfff15 	stw	r2,-4(fp)
 40326b8:	e0bfff17 	ldw	r2,-4(fp)
}
 40326bc:	e037883a 	mov	sp,fp
 40326c0:	dfc00117 	ldw	ra,4(sp)
 40326c4:	df000017 	ldw	fp,0(sp)
 40326c8:	dec00204 	addi	sp,sp,8
 40326cc:	f800283a 	ret

040326d0 <tcp_init>:
 * RETURNS: 
 */

void
tcp_init()
{
 40326d0:	deffff04 	addi	sp,sp,-4
 40326d4:	df000015 	stw	fp,0(sp)
 40326d8:	d839883a 	mov	fp,sp
   tcp_iss = 1;      /* wrong */
 40326dc:	00c10174 	movhi	r3,1029
 40326e0:	18c1f104 	addi	r3,r3,1988
 40326e4:	00800044 	movi	r2,1
 40326e8:	18800015 	stw	r2,0(r3)
   tcb.inp_next = tcb.inp_prev = &tcb;
 40326ec:	00c101b4 	movhi	r3,1030
 40326f0:	18e36d04 	addi	r3,r3,-29260
 40326f4:	008101b4 	movhi	r2,1030
 40326f8:	10a36d04 	addi	r2,r2,-29260
 40326fc:	18800115 	stw	r2,4(r3)
 4032700:	008101b4 	movhi	r2,1030
 4032704:	10a36d04 	addi	r2,r2,-29260
 4032708:	10c00117 	ldw	r3,4(r2)
 403270c:	008101b4 	movhi	r2,1030
 4032710:	10a36d04 	addi	r2,r2,-29260
 4032714:	10c00015 	stw	r3,0(r2)
}
 4032718:	e037883a 	mov	sp,fp
 403271c:	df000017 	ldw	fp,0(sp)
 4032720:	dec00104 	addi	sp,sp,4
 4032724:	f800283a 	ret

04032728 <tcp_template>:
 * RETURNS: 
 */

struct tcpiphdr * 
tcp_template(struct tcpcb * tp)
{
 4032728:	defffa04 	addi	sp,sp,-24
 403272c:	dfc00515 	stw	ra,20(sp)
 4032730:	df000415 	stw	fp,16(sp)
 4032734:	df000404 	addi	fp,sp,16
 4032738:	e13ffe15 	stw	r4,-8(fp)
   struct inpcb * inp   =  tp->t_inpcb;
 403273c:	e0bffe17 	ldw	r2,-8(fp)
 4032740:	10800d17 	ldw	r2,52(r2)
 4032744:	e0bffd15 	stw	r2,-12(fp)
   struct tcpiphdr * n;

   if ((n = tp->t_template) == 0)
 4032748:	e0bffe17 	ldw	r2,-8(fp)
 403274c:	10800c17 	ldw	r2,48(r2)
 4032750:	e0bffc15 	stw	r2,-16(fp)
 4032754:	e0bffc17 	ldw	r2,-16(fp)
 4032758:	1004c03a 	cmpne	r2,r2,zero
 403275c:	1000081e 	bne	r2,zero,4032780 <tcp_template+0x58>
   {
      n = (struct tcpiphdr *)TPH_ALLOC (sizeof (*n));
 4032760:	01000a04 	movi	r4,40
 4032764:	40265f80 	call	40265f8 <npalloc>
 4032768:	e0bffc15 	stw	r2,-16(fp)
      if (n == NULL)
 403276c:	e0bffc17 	ldw	r2,-16(fp)
 4032770:	1004c03a 	cmpne	r2,r2,zero
 4032774:	1000021e 	bne	r2,zero,4032780 <tcp_template+0x58>
         return (0);
 4032778:	e03fff15 	stw	zero,-4(fp)
 403277c:	00002a06 	br	4032828 <tcp_template+0x100>
   }
   n->ti_next = n->ti_prev = 0;
 4032780:	e0bffc17 	ldw	r2,-16(fp)
 4032784:	10000115 	stw	zero,4(r2)
 4032788:	e0bffc17 	ldw	r2,-16(fp)
 403278c:	10c00117 	ldw	r3,4(r2)
 4032790:	e0bffc17 	ldw	r2,-16(fp)
 4032794:	10c00015 	stw	r3,0(r2)
   n->ti_len = htons(sizeof (struct tcpiphdr) - sizeof (struct ip));
 4032798:	e0fffc17 	ldw	r3,-16(fp)
 403279c:	00850004 	movi	r2,5120
 40327a0:	1880028d 	sth	r2,10(r3)
   n->ti_src = inp->inp_laddr;
 40327a4:	e0bffd17 	ldw	r2,-12(fp)
 40327a8:	10c00417 	ldw	r3,16(r2)
 40327ac:	e0bffc17 	ldw	r2,-16(fp)
 40327b0:	10c00315 	stw	r3,12(r2)
   n->ti_dst = inp->inp_faddr;
 40327b4:	e0bffd17 	ldw	r2,-12(fp)
 40327b8:	10c00317 	ldw	r3,12(r2)
 40327bc:	e0bffc17 	ldw	r2,-16(fp)
 40327c0:	10c00415 	stw	r3,16(r2)
   n->ti_sport = inp->inp_lport;
 40327c4:	e0bffd17 	ldw	r2,-12(fp)
 40327c8:	10c0078b 	ldhu	r3,30(r2)
 40327cc:	e0bffc17 	ldw	r2,-16(fp)
 40327d0:	10c0050d 	sth	r3,20(r2)
   n->ti_dport = inp->inp_fport;
 40327d4:	e0bffd17 	ldw	r2,-12(fp)
 40327d8:	10c0070b 	ldhu	r3,28(r2)
 40327dc:	e0bffc17 	ldw	r2,-16(fp)
 40327e0:	10c0058d 	sth	r3,22(r2)
   n->ti_seq = 0;
 40327e4:	e0bffc17 	ldw	r2,-16(fp)
 40327e8:	10000615 	stw	zero,24(r2)
   n->ti_ack = 0;
 40327ec:	e0bffc17 	ldw	r2,-16(fp)
 40327f0:	10000715 	stw	zero,28(r2)
   n->ti_t.th_doff = (5 << 4);   /* NetPort */
 40327f4:	e0fffc17 	ldw	r3,-16(fp)
 40327f8:	00801404 	movi	r2,80
 40327fc:	18800805 	stb	r2,32(r3)
   n->ti_flags = 0;
 4032800:	e0bffc17 	ldw	r2,-16(fp)
 4032804:	10000845 	stb	zero,33(r2)
   n->ti_win = 0;
 4032808:	e0bffc17 	ldw	r2,-16(fp)
 403280c:	1000088d 	sth	zero,34(r2)
   n->ti_sum = 0;
 4032810:	e0bffc17 	ldw	r2,-16(fp)
 4032814:	1000090d 	sth	zero,36(r2)
   n->ti_urp = 0;
 4032818:	e0bffc17 	ldw	r2,-16(fp)
 403281c:	1000098d 	sth	zero,38(r2)
   return (n);
 4032820:	e0bffc17 	ldw	r2,-16(fp)
 4032824:	e0bfff15 	stw	r2,-4(fp)
 4032828:	e0bfff17 	ldw	r2,-4(fp)
}
 403282c:	e037883a 	mov	sp,fp
 4032830:	dfc00117 	ldw	ra,4(sp)
 4032834:	df000017 	ldw	fp,0(sp)
 4032838:	dec00204 	addi	sp,sp,8
 403283c:	f800283a 	ret

04032840 <tcp_respond>:
   struct tcpiphdr * ti,
   tcp_seq  ack,
   tcp_seq  seq,
   int   flags,
   struct mbuf *  ti_mbuf)
{
 4032840:	defff104 	addi	sp,sp,-60
 4032844:	dfc00e15 	stw	ra,56(sp)
 4032848:	df000d15 	stw	fp,52(sp)
 403284c:	df000d04 	addi	fp,sp,52
 4032850:	e13ffb15 	stw	r4,-20(fp)
 4032854:	e17ffc15 	stw	r5,-16(fp)
 4032858:	e1bffd15 	stw	r6,-12(fp)
 403285c:	e1fffe15 	stw	r7,-8(fp)
   int      tlen;       /* tcp data len - 0 or 1 */
   int      domain;     /* AF_INET or AF_INET6 */
   int      win = 0;    /* window to use in sent packet */
 4032860:	e03ff815 	stw	zero,-32(fp)
   struct mbuf *  m;    /* mbuf to send */
   struct tcpiphdr * tmp_thdr;   /* scratch */

   if (tp)
 4032864:	e0bffb17 	ldw	r2,-20(fp)
 4032868:	1005003a 	cmpeq	r2,r2,zero
 403286c:	10001a1e 	bne	r2,zero,40328d8 <tcp_respond+0x98>
      win = (int)sbspace(&tp->t_inpcb->inp_socket->so_rcv);
 4032870:	e0bffb17 	ldw	r2,-20(fp)
 4032874:	10800d17 	ldw	r2,52(r2)
 4032878:	10800817 	ldw	r2,32(r2)
 403287c:	10800b17 	ldw	r2,44(r2)
 4032880:	1007883a 	mov	r3,r2
 4032884:	e0bffb17 	ldw	r2,-20(fp)
 4032888:	10800d17 	ldw	r2,52(r2)
 403288c:	10800817 	ldw	r2,32(r2)
 4032890:	10800a17 	ldw	r2,40(r2)
 4032894:	1885c83a 	sub	r2,r3,r2
 4032898:	1004803a 	cmplt	r2,r2,zero
 403289c:	10000b1e 	bne	r2,zero,40328cc <tcp_respond+0x8c>
 40328a0:	e0bffb17 	ldw	r2,-20(fp)
 40328a4:	10800d17 	ldw	r2,52(r2)
 40328a8:	10800817 	ldw	r2,32(r2)
 40328ac:	10c00b17 	ldw	r3,44(r2)
 40328b0:	e0bffb17 	ldw	r2,-20(fp)
 40328b4:	10800d17 	ldw	r2,52(r2)
 40328b8:	10800817 	ldw	r2,32(r2)
 40328bc:	10800a17 	ldw	r2,40(r2)
 40328c0:	1885c83a 	sub	r2,r3,r2
 40328c4:	e0bfff15 	stw	r2,-4(fp)
 40328c8:	00000106 	br	40328d0 <tcp_respond+0x90>
 40328cc:	e03fff15 	stw	zero,-4(fp)
 40328d0:	e0bfff17 	ldw	r2,-4(fp)
 40328d4:	e0bff815 	stw	r2,-32(fp)

   /* Figure out of we can recycle the passed buffer or if we need a 
    * new one. Construct the easy parts of the the TCP and IP headers.
    */
   if (flags == 0)   /* sending keepalive from timer */
 40328d8:	e0800217 	ldw	r2,8(fp)
 40328dc:	1004c03a 	cmpne	r2,r2,zero
 40328e0:	1000391e 	bne	r2,zero,40329c8 <tcp_respond+0x188>
   {
      /* no flags == need a new buffer */
      m = m_getwithdata (MT_HEADER, 64);
 40328e4:	010000c4 	movi	r4,3
 40328e8:	01401004 	movi	r5,64
 40328ec:	40269b40 	call	40269b4 <m_getnbuf>
 40328f0:	e0bff715 	stw	r2,-36(fp)
      if (m == NULL)
 40328f4:	e0bff717 	ldw	r2,-36(fp)
 40328f8:	1005003a 	cmpeq	r2,r2,zero
 40328fc:	1000ed1e 	bne	r2,zero,4032cb4 <tcp_respond+0x474>
         return;
      tlen = 1;   /* Keepalives have one byte of data */
 4032900:	00800044 	movi	r2,1
 4032904:	e0bffa15 	stw	r2,-24(fp)
      m->m_len = TCPIPHDRSZ + tlen;
 4032908:	e0bffa17 	ldw	r2,-24(fp)
 403290c:	10800a04 	addi	r2,r2,40
 4032910:	1007883a 	mov	r3,r2
 4032914:	e0bff717 	ldw	r2,-36(fp)
 4032918:	10c00215 	stw	r3,8(r2)
      /*
       * Copy template contents into the mbuf and set ti to point
       * to the header structure in the mbuf.
       */
      tmp_thdr = (struct tcpiphdr *)((char *)m->m_data+sizeof(struct ip)
 403291c:	e0bff717 	ldw	r2,-36(fp)
 4032920:	10800317 	ldw	r2,12(r2)
 4032924:	e0bff615 	stw	r2,-40(fp)
         - sizeof(struct ipovly));
      if ((char *)tmp_thdr < m->pkt->nb_buff)
 4032928:	e0bff717 	ldw	r2,-36(fp)
 403292c:	10800117 	ldw	r2,4(r2)
 4032930:	10c00117 	ldw	r3,4(r2)
 4032934:	e0bff617 	ldw	r2,-40(fp)
 4032938:	10c0032e 	bgeu	r2,r3,4032948 <tcp_respond+0x108>
      {
         panic("tcp_respond- packet ptr underflow\n");
 403293c:	01010174 	movhi	r4,1029
 4032940:	212e8604 	addi	r4,r4,-17896
 4032944:	4020e100 	call	4020e10 <panic>
      }
      MEMCPY(tmp_thdr, ti, sizeof(struct tcpiphdr));
 4032948:	e13ff617 	ldw	r4,-40(fp)
 403294c:	e0fffc17 	ldw	r3,-16(fp)
 4032950:	18800017 	ldw	r2,0(r3)
 4032954:	20800015 	stw	r2,0(r4)
 4032958:	18800117 	ldw	r2,4(r3)
 403295c:	20800115 	stw	r2,4(r4)
 4032960:	18800217 	ldw	r2,8(r3)
 4032964:	20800215 	stw	r2,8(r4)
 4032968:	18800317 	ldw	r2,12(r3)
 403296c:	20800315 	stw	r2,12(r4)
 4032970:	18800417 	ldw	r2,16(r3)
 4032974:	20800415 	stw	r2,16(r4)
 4032978:	18800517 	ldw	r2,20(r3)
 403297c:	20800515 	stw	r2,20(r4)
 4032980:	18800617 	ldw	r2,24(r3)
 4032984:	20800615 	stw	r2,24(r4)
 4032988:	18800717 	ldw	r2,28(r3)
 403298c:	20800715 	stw	r2,28(r4)
 4032990:	18800817 	ldw	r2,32(r3)
 4032994:	20800815 	stw	r2,32(r4)
 4032998:	18800917 	ldw	r2,36(r3)
 403299c:	20800915 	stw	r2,36(r4)
      ti = tmp_thdr;
 40329a0:	e0bff617 	ldw	r2,-40(fp)
 40329a4:	e0bffc15 	stw	r2,-16(fp)
      flags = TH_ACK;
 40329a8:	00800404 	movi	r2,16
 40329ac:	e0800215 	stw	r2,8(fp)
      domain = tp->t_inpcb->inp_socket->so_domain;
 40329b0:	e0bffb17 	ldw	r2,-20(fp)
 40329b4:	10800d17 	ldw	r2,52(r2)
 40329b8:	10800817 	ldw	r2,32(r2)
 40329bc:	10800517 	ldw	r2,20(r2)
 40329c0:	e0bff915 	stw	r2,-28(fp)
 40329c4:	00003b06 	br	4032ab4 <tcp_respond+0x274>
   }
   else  /* Flag was passed (e.g. reset); recycle passed mbuf */
   {
      m = ti_mbuf;   /*dtom(ti);*/
 40329c8:	e0800317 	ldw	r2,12(fp)
 40329cc:	e0bff715 	stw	r2,-36(fp)
      if(m->pkt->type == IPTP)   /* IPv4 packet */
 40329d0:	e0bff717 	ldw	r2,-36(fp)
 40329d4:	10800117 	ldw	r2,4(r2)
 40329d8:	1080080b 	ldhu	r2,32(r2)
 40329dc:	10bfffcc 	andi	r2,r2,65535
 40329e0:	10800218 	cmpnei	r2,r2,8
 40329e4:	1000031e 	bne	r2,zero,40329f4 <tcp_respond+0x1b4>
         domain = AF_INET;
 40329e8:	00800084 	movi	r2,2
 40329ec:	e0bff915 	stw	r2,-28(fp)
 40329f0:	00000206 	br	40329fc <tcp_respond+0x1bc>
      else
         domain = AF_INET6;
 40329f4:	008000c4 	movi	r2,3
 40329f8:	e0bff915 	stw	r2,-28(fp)

      m_freem(m->m_next);
 40329fc:	e0bff717 	ldw	r2,-36(fp)
 4032a00:	11000617 	ldw	r4,24(r2)
 4032a04:	4026c900 	call	4026c90 <m_freem>
      m->m_next = 0;
 4032a08:	e0bff717 	ldw	r2,-36(fp)
 4032a0c:	10000615 	stw	zero,24(r2)
      tlen = 0;         /* NO data */
 4032a10:	e03ffa15 	stw	zero,-24(fp)
      m->m_len = TCPIPHDRSZ;
 4032a14:	e0fff717 	ldw	r3,-36(fp)
 4032a18:	00800a04 	movi	r2,40
 4032a1c:	18800215 	stw	r2,8(r3)
      xchg(ti->ti_dport, ti->ti_sport, u_short);
 4032a20:	e0bffc17 	ldw	r2,-16(fp)
 4032a24:	1080058b 	ldhu	r2,22(r2)
 4032a28:	e0bff50d 	sth	r2,-44(fp)
 4032a2c:	e0bffc17 	ldw	r2,-16(fp)
 4032a30:	10c0050b 	ldhu	r3,20(r2)
 4032a34:	e0bffc17 	ldw	r2,-16(fp)
 4032a38:	10c0058d 	sth	r3,22(r2)
 4032a3c:	e0fffc17 	ldw	r3,-16(fp)
 4032a40:	e0bff50b 	ldhu	r2,-44(fp)
 4032a44:	1880050d 	sth	r2,20(r3)
      if(m->pkt->type == IPTP)
 4032a48:	e0bff717 	ldw	r2,-36(fp)
 4032a4c:	10800117 	ldw	r2,4(r2)
 4032a50:	1080080b 	ldhu	r2,32(r2)
 4032a54:	10bfffcc 	andi	r2,r2,65535
 4032a58:	10800218 	cmpnei	r2,r2,8
 4032a5c:	10000a1e 	bne	r2,zero,4032a88 <tcp_respond+0x248>
         xchg(ti->ti_dst.s_addr, ti->ti_src.s_addr, u_long);
 4032a60:	e0bffc17 	ldw	r2,-16(fp)
 4032a64:	10800417 	ldw	r2,16(r2)
 4032a68:	e0bff415 	stw	r2,-48(fp)
 4032a6c:	e0bffc17 	ldw	r2,-16(fp)
 4032a70:	10c00317 	ldw	r3,12(r2)
 4032a74:	e0bffc17 	ldw	r2,-16(fp)
 4032a78:	10c00415 	stw	r3,16(r2)
 4032a7c:	e0fffc17 	ldw	r3,-16(fp)
 4032a80:	e0bff417 	ldw	r2,-48(fp)
 4032a84:	18800315 	stw	r2,12(r3)
      if (flags & TH_RST)  /* count resets in MIB */
 4032a88:	e0800217 	ldw	r2,8(fp)
 4032a8c:	1080010c 	andi	r2,r2,4
 4032a90:	1005003a 	cmpeq	r2,r2,zero
 4032a94:	1000071e 	bne	r2,zero,4032ab4 <tcp_respond+0x274>
         TCP_MIB_INC(tcpOutRsts);   /* keep MIB stats */
 4032a98:	008101b4 	movhi	r2,1030
 4032a9c:	10a34a04 	addi	r2,r2,-29400
 4032aa0:	10800e17 	ldw	r2,56(r2)
 4032aa4:	10c00044 	addi	r3,r2,1
 4032aa8:	008101b4 	movhi	r2,1030
 4032aac:	10a34a04 	addi	r2,r2,-29400
 4032ab0:	10c00e15 	stw	r3,56(r2)
   }

   /* finish constructing the TCP header */
   ti->ti_seq = htonl(seq);
 4032ab4:	e0bffe17 	ldw	r2,-8(fp)
 4032ab8:	1004d63a 	srli	r2,r2,24
 4032abc:	10c03fcc 	andi	r3,r2,255
 4032ac0:	e0bffe17 	ldw	r2,-8(fp)
 4032ac4:	1004d23a 	srli	r2,r2,8
 4032ac8:	10bfc00c 	andi	r2,r2,65280
 4032acc:	1886b03a 	or	r3,r3,r2
 4032ad0:	e0bffe17 	ldw	r2,-8(fp)
 4032ad4:	10bfc00c 	andi	r2,r2,65280
 4032ad8:	1004923a 	slli	r2,r2,8
 4032adc:	1886b03a 	or	r3,r3,r2
 4032ae0:	e0bffe17 	ldw	r2,-8(fp)
 4032ae4:	10803fcc 	andi	r2,r2,255
 4032ae8:	1004963a 	slli	r2,r2,24
 4032aec:	1886b03a 	or	r3,r3,r2
 4032af0:	e0bffc17 	ldw	r2,-16(fp)
 4032af4:	10c00615 	stw	r3,24(r2)
   ti->ti_ack = htonl(ack);
 4032af8:	e0bffd17 	ldw	r2,-12(fp)
 4032afc:	1004d63a 	srli	r2,r2,24
 4032b00:	10c03fcc 	andi	r3,r2,255
 4032b04:	e0bffd17 	ldw	r2,-12(fp)
 4032b08:	1004d23a 	srli	r2,r2,8
 4032b0c:	10bfc00c 	andi	r2,r2,65280
 4032b10:	1886b03a 	or	r3,r3,r2
 4032b14:	e0bffd17 	ldw	r2,-12(fp)
 4032b18:	10bfc00c 	andi	r2,r2,65280
 4032b1c:	1004923a 	slli	r2,r2,8
 4032b20:	1886b03a 	or	r3,r3,r2
 4032b24:	e0bffd17 	ldw	r2,-12(fp)
 4032b28:	10803fcc 	andi	r2,r2,255
 4032b2c:	1004963a 	slli	r2,r2,24
 4032b30:	1886b03a 	or	r3,r3,r2
 4032b34:	e0bffc17 	ldw	r2,-16(fp)
 4032b38:	10c00715 	stw	r3,28(r2)
   ti->ti_t.th_doff = 0x50;      /* NetPort: init data offset bits */
 4032b3c:	e0fffc17 	ldw	r3,-16(fp)
 4032b40:	00801404 	movi	r2,80
 4032b44:	18800805 	stb	r2,32(r3)
   ti->ti_flags = (u_char)flags;
 4032b48:	e0800217 	ldw	r2,8(fp)
 4032b4c:	1007883a 	mov	r3,r2
 4032b50:	e0bffc17 	ldw	r2,-16(fp)
 4032b54:	10c00845 	stb	r3,33(r2)
   ti->ti_win = htons((u_short)win);
 4032b58:	e0bff817 	ldw	r2,-32(fp)
 4032b5c:	10bfffcc 	andi	r2,r2,65535
 4032b60:	1004d23a 	srli	r2,r2,8
 4032b64:	10803fcc 	andi	r2,r2,255
 4032b68:	1009883a 	mov	r4,r2
 4032b6c:	e0bff817 	ldw	r2,-32(fp)
 4032b70:	10bfffcc 	andi	r2,r2,65535
 4032b74:	1004923a 	slli	r2,r2,8
 4032b78:	1007883a 	mov	r3,r2
 4032b7c:	00bfc004 	movi	r2,-256
 4032b80:	1884703a 	and	r2,r3,r2
 4032b84:	2084b03a 	or	r2,r4,r2
 4032b88:	1007883a 	mov	r3,r2
 4032b8c:	e0bffc17 	ldw	r2,-16(fp)
 4032b90:	10c0088d 	sth	r3,34(r2)
   ti->ti_urp = 0;
 4032b94:	e0bffc17 	ldw	r2,-16(fp)
 4032b98:	1000098d 	sth	zero,38(r2)

   /* Finish constructing IP header and send, based on IP type in use */
   switch(domain)
 4032b9c:	e0bff917 	ldw	r2,-28(fp)
 4032ba0:	108000a0 	cmpeqi	r2,r2,2
 4032ba4:	1000011e 	bne	r2,zero,4032bac <tcp_respond+0x36c>
 4032ba8:	00004106 	br	4032cb0 <tcp_respond+0x470>
#ifdef IP_V4
      case AF_INET:
      {
         struct ip * pip;

         pip = (struct ip *)((char*)ti+sizeof(struct ipovly)-sizeof(struct ip));
 4032bac:	e0bffc17 	ldw	r2,-16(fp)
 4032bb0:	e0bff315 	stw	r2,-52(fp)

         pip->ip_len = (unshort)(TCPIPHDRSZ + tlen);
 4032bb4:	e0bffa17 	ldw	r2,-24(fp)
 4032bb8:	10800a04 	addi	r2,r2,40
 4032bbc:	1007883a 	mov	r3,r2
 4032bc0:	e0bff317 	ldw	r2,-52(fp)
 4032bc4:	10c0008d 	sth	r3,2(r2)
         /* If our system's max. MAC header size is geater than the size 
          * of the MAC header in the received packet then we need to 
          * adjust the IP header offset to allow for this. Since the packets 
          * are only headers they should always fit.
          */
         if(pip >= (struct ip *)(m->pkt->nb_buff + MaxLnh))
 4032bc8:	e0bff717 	ldw	r2,-36(fp)
 4032bcc:	10800117 	ldw	r2,4(r2)
 4032bd0:	10c00117 	ldw	r3,4(r2)
 4032bd4:	00810174 	movhi	r2,1029
 4032bd8:	1081bd04 	addi	r2,r2,1780
 4032bdc:	10800017 	ldw	r2,0(r2)
 4032be0:	1885883a 	add	r2,r3,r2
 4032be4:	1007883a 	mov	r3,r2
 4032be8:	e0bff317 	ldw	r2,-52(fp)
 4032bec:	10c00436 	bltu	r2,r3,4032c00 <tcp_respond+0x3c0>
         {
            m->m_data = (char*)pip; /* headers will fit, just set pointer */
 4032bf0:	e0fff317 	ldw	r3,-52(fp)
 4032bf4:	e0bff717 	ldw	r2,-36(fp)
 4032bf8:	10c00315 	stw	r3,12(r2)
 4032bfc:	00001206 	br	4032c48 <tcp_respond+0x408>
         }
         else     /* MAC may not fit, adjust pointer and move headers back */
         {
            m->m_data = m->pkt->nb_prot = m->pkt->nb_buff + MaxLnh;  /* new ptr */
 4032c00:	e0bff717 	ldw	r2,-36(fp)
 4032c04:	11000117 	ldw	r4,4(r2)
 4032c08:	e0bff717 	ldw	r2,-36(fp)
 4032c0c:	10800117 	ldw	r2,4(r2)
 4032c10:	10c00117 	ldw	r3,4(r2)
 4032c14:	00810174 	movhi	r2,1029
 4032c18:	1081bd04 	addi	r2,r2,1780
 4032c1c:	10800017 	ldw	r2,0(r2)
 4032c20:	1885883a 	add	r2,r3,r2
 4032c24:	20800315 	stw	r2,12(r4)
 4032c28:	20c00317 	ldw	r3,12(r4)
 4032c2c:	e0bff717 	ldw	r2,-36(fp)
 4032c30:	10c00315 	stw	r3,12(r2)
            MEMMOVE(m->m_data, pip, TCPIPHDRSZ);  /* move back tcp/ip headers */
 4032c34:	e0bff717 	ldw	r2,-36(fp)
 4032c38:	11000317 	ldw	r4,12(r2)
 4032c3c:	e17ff317 	ldw	r5,-52(fp)
 4032c40:	01800a04 	movi	r6,40
 4032c44:	4001e840 	call	4001e84 <memmove>

         /*
          * In the case of a SYN DOS attack, many RST|ACK replies
          *   have no tp structure and need to be freed.
          */
         if (!tp)
 4032c48:	e0bffb17 	ldw	r2,-20(fp)
 4032c4c:	1004c03a 	cmpne	r2,r2,zero
 4032c50:	1000031e 	bne	r2,zero,4032c60 <tcp_respond+0x420>
              m_freem(m);
 4032c54:	e13ff717 	ldw	r4,-36(fp)
 4032c58:	4026c900 	call	4026c90 <m_freem>
 4032c5c:	00001506 	br	4032cb4 <tcp_respond+0x474>
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
 4032c60:	e0bffb17 	ldw	r2,-20(fp)
 4032c64:	10800d17 	ldw	r2,52(r2)
 4032c68:	1005003a 	cmpeq	r2,r2,zero
 4032c6c:	10000c1e 	bne	r2,zero,4032ca0 <tcp_respond+0x460>
 4032c70:	e0bffb17 	ldw	r2,-20(fp)
 4032c74:	10800d17 	ldw	r2,52(r2)
 4032c78:	10800817 	ldw	r2,32(r2)
 4032c7c:	1005003a 	cmpeq	r2,r2,zero
 4032c80:	1000071e 	bne	r2,zero,4032ca0 <tcp_respond+0x460>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
 4032c84:	e0bffb17 	ldw	r2,-20(fp)
 4032c88:	10800d17 	ldw	r2,52(r2)
 4032c8c:	10800817 	ldw	r2,32(r2)
 4032c90:	11401f17 	ldw	r5,124(r2)
 4032c94:	e13ff717 	ldw	r4,-36(fp)
 4032c98:	40276c40 	call	40276c4 <ip_output>
          */
         if (!tp)
              m_freem(m);
         else
		 {
			 if ((tp->t_inpcb) && (tp->t_inpcb->inp_socket))
 4032c9c:	00000506 	br	4032cb4 <tcp_respond+0x474>
				ip_output(m, tp->t_inpcb->inp_socket->so_optsPack);
			 else
				ip_output(m, (struct   ip_socopts *)NULL);
 4032ca0:	e13ff717 	ldw	r4,-36(fp)
 4032ca4:	000b883a 	mov	r5,zero
 4032ca8:	40276c40 	call	40276c4 <ip_output>
		 }

         break;
 4032cac:	00000106 	br	4032cb4 <tcp_respond+0x474>

         break;
      }
#endif   /* IP_V6 */
      default:
         dtrap();
 4032cb0:	4025bb40 	call	4025bb4 <dtrap>
         break;
   }
   return;
}
 4032cb4:	e037883a 	mov	sp,fp
 4032cb8:	dfc00117 	ldw	ra,4(sp)
 4032cbc:	df000017 	ldw	fp,0(sp)
 4032cc0:	dec00204 	addi	sp,sp,8
 4032cc4:	f800283a 	ret

04032cc8 <tcp_newtcpcb>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_newtcpcb(struct inpcb * inp)
{
 4032cc8:	defffa04 	addi	sp,sp,-24
 4032ccc:	dfc00515 	stw	ra,20(sp)
 4032cd0:	df000415 	stw	fp,16(sp)
 4032cd4:	df000404 	addi	fp,sp,16
 4032cd8:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp;
   short t_time;

   tp = TCB_ALLOC(sizeof (*tp));
 4032cdc:	01002504 	movi	r4,148
 4032ce0:	40265f80 	call	40265f8 <npalloc>
 4032ce4:	e0bffd15 	stw	r2,-12(fp)
   if (tp == NULL)
 4032ce8:	e0bffd17 	ldw	r2,-12(fp)
 4032cec:	1004c03a 	cmpne	r2,r2,zero
 4032cf0:	1000021e 	bne	r2,zero,4032cfc <tcp_newtcpcb+0x34>
      return (struct tcpcb *)NULL;
 4032cf4:	e03fff15 	stw	zero,-4(fp)
 4032cf8:	00003306 	br	4032dc8 <tcp_newtcpcb+0x100>
   tp->seg_next = tp->seg_prev = (struct tcpiphdr *)tp;
 4032cfc:	e0fffd17 	ldw	r3,-12(fp)
 4032d00:	e0bffd17 	ldw	r2,-12(fp)
 4032d04:	10c00115 	stw	r3,4(r2)
 4032d08:	e0bffd17 	ldw	r2,-12(fp)
 4032d0c:	10c00117 	ldw	r3,4(r2)
 4032d10:	e0bffd17 	ldw	r2,-12(fp)
 4032d14:	10c00015 	stw	r3,0(r2)
   tp->t_maxseg = TCP_MSS;
 4032d18:	e0fffd17 	ldw	r3,-12(fp)
 4032d1c:	00816d04 	movi	r2,1460
 4032d20:	18800a0d 	sth	r2,40(r3)
   tp->t_flags = 0;        /* sends options! */
 4032d24:	e0bffd17 	ldw	r2,-12(fp)
 4032d28:	10000b0d 	sth	zero,44(r2)
   tp->t_inpcb = inp;
 4032d2c:	e0fffd17 	ldw	r3,-12(fp)
 4032d30:	e0bffe17 	ldw	r2,-8(fp)
 4032d34:	18800d15 	stw	r2,52(r3)
   /*
    * Init srtt to TCPTV_SRTTBASE (0), so we can tell that we have no
    * rtt estimate.  Set rttvar so that srtt + 2 * rttvar gives
    * reasonable initial retransmit time.
    */
   tp->t_srtt = TCPTV_SRTTBASE;
 4032d38:	e0bffd17 	ldw	r2,-12(fp)
 4032d3c:	10002015 	stw	zero,128(r2)
   tp->t_rttvar = TCPTV_SRTTDFLT << 2;
 4032d40:	e0fffd17 	ldw	r3,-12(fp)
 4032d44:	00800604 	movi	r2,24
 4032d48:	18802115 	stw	r2,132(r3)

   t_time = ((TCPTV_SRTTBASE >> 2) + (TCPTV_SRTTDFLT << 2)) >> 1;
 4032d4c:	00800304 	movi	r2,12
 4032d50:	e0bffc0d 	sth	r2,-16(fp)
   TCPT_RANGESET(tp->t_rxtcur, t_time, TCPTV_MIN, TCPTV_REXMTMAX);
 4032d54:	e0fffc0f 	ldh	r3,-16(fp)
 4032d58:	e0bffd17 	ldw	r2,-12(fp)
 4032d5c:	10c00815 	stw	r3,32(r2)
 4032d60:	e0bffd17 	ldw	r2,-12(fp)
 4032d64:	10800817 	ldw	r2,32(r2)
 4032d68:	10800088 	cmpgei	r2,r2,2
 4032d6c:	1000041e 	bne	r2,zero,4032d80 <tcp_newtcpcb+0xb8>
 4032d70:	e0fffd17 	ldw	r3,-12(fp)
 4032d74:	00800084 	movi	r2,2
 4032d78:	18800815 	stw	r2,32(r3)
 4032d7c:	00000706 	br	4032d9c <tcp_newtcpcb+0xd4>
 4032d80:	e0bffd17 	ldw	r2,-12(fp)
 4032d84:	10800817 	ldw	r2,32(r2)
 4032d88:	10802050 	cmplti	r2,r2,129
 4032d8c:	1000031e 	bne	r2,zero,4032d9c <tcp_newtcpcb+0xd4>
 4032d90:	e0fffd17 	ldw	r3,-12(fp)
 4032d94:	00802004 	movi	r2,128
 4032d98:	18800815 	stw	r2,32(r3)

   /* Set initial congestion window - RFC-2581, pg 4. */
   tp->snd_cwnd = 2 * TCP_MSS;
 4032d9c:	e0fffd17 	ldw	r3,-12(fp)
 4032da0:	0082da04 	movi	r2,2920
 4032da4:	18801b15 	stw	r2,108(r3)

#ifdef DO_DELAY_ACKS
   tp->t_delacktime = 1;
#endif   /* DO_DELAY_ACKS */

   tp->snd_ssthresh = 65535;  /* Start with high slow-start threshold */
 4032da8:	e0fffd17 	ldw	r3,-12(fp)
 4032dac:	00bfffd4 	movui	r2,65535
 4032db0:	18801c15 	stw	r2,112(r3)

   inp->inp_ppcb = (char *)tp;
 4032db4:	e0fffd17 	ldw	r3,-12(fp)
 4032db8:	e0bffe17 	ldw	r2,-8(fp)
 4032dbc:	10c00915 	stw	r3,36(r2)
   return (tp);
 4032dc0:	e0bffd17 	ldw	r2,-12(fp)
 4032dc4:	e0bfff15 	stw	r2,-4(fp)
 4032dc8:	e0bfff17 	ldw	r2,-4(fp)
}
 4032dcc:	e037883a 	mov	sp,fp
 4032dd0:	dfc00117 	ldw	ra,4(sp)
 4032dd4:	df000017 	ldw	fp,0(sp)
 4032dd8:	dec00204 	addi	sp,sp,8
 4032ddc:	f800283a 	ret

04032de0 <tcp_drop>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_drop(struct tcpcb * tp, int err)
{
 4032de0:	defffb04 	addi	sp,sp,-20
 4032de4:	dfc00415 	stw	ra,16(sp)
 4032de8:	df000315 	stw	fp,12(sp)
 4032dec:	df000304 	addi	fp,sp,12
 4032df0:	e13ffe15 	stw	r4,-8(fp)
 4032df4:	e17fff15 	stw	r5,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 4032df8:	e0bffe17 	ldw	r2,-8(fp)
 4032dfc:	10800d17 	ldw	r2,52(r2)
 4032e00:	10800817 	ldw	r2,32(r2)
 4032e04:	e0bffd15 	stw	r2,-12(fp)

   if (TCPS_HAVERCVDSYN(tp->t_state)) 
 4032e08:	e0bffe17 	ldw	r2,-8(fp)
 4032e0c:	10800217 	ldw	r2,8(r2)
 4032e10:	108000d0 	cmplti	r2,r2,3
 4032e14:	10000c1e 	bne	r2,zero,4032e48 <tcp_drop+0x68>
   {
      tp->t_state = TCPS_CLOSED;
 4032e18:	e0bffe17 	ldw	r2,-8(fp)
 4032e1c:	10000215 	stw	zero,8(r2)
      (void) tcp_output(tp);
 4032e20:	e13ffe17 	ldw	r4,-8(fp)
 4032e24:	40313700 	call	4031370 <tcp_output>
      tcpstat.tcps_drops++;
 4032e28:	008101b4 	movhi	r2,1030
 4032e2c:	10a37804 	addi	r2,r2,-29216
 4032e30:	10800317 	ldw	r2,12(r2)
 4032e34:	10c00044 	addi	r3,r2,1
 4032e38:	008101b4 	movhi	r2,1030
 4032e3c:	10a37804 	addi	r2,r2,-29216
 4032e40:	10c00315 	stw	r3,12(r2)
 4032e44:	00000706 	br	4032e64 <tcp_drop+0x84>
   }
   else
      tcpstat.tcps_conndrops++;
 4032e48:	008101b4 	movhi	r2,1030
 4032e4c:	10a37804 	addi	r2,r2,-29216
 4032e50:	10800417 	ldw	r2,16(r2)
 4032e54:	10c00044 	addi	r3,r2,1
 4032e58:	008101b4 	movhi	r2,1030
 4032e5c:	10a37804 	addi	r2,r2,-29216
 4032e60:	10c00415 	stw	r3,16(r2)
   so->so_error = err;
 4032e64:	e0fffd17 	ldw	r3,-12(fp)
 4032e68:	e0bfff17 	ldw	r2,-4(fp)
 4032e6c:	18800615 	stw	r2,24(r3)
#ifdef TCP_ZEROCOPY
   if (so->rx_upcall)
      so->rx_upcall(so, NULL, err);
#endif   /* TCP_ZEROCOPY */
   return (tcp_close(tp));
 4032e70:	e13ffe17 	ldw	r4,-8(fp)
 4032e74:	4032e8c0 	call	4032e8c <tcp_close>
}
 4032e78:	e037883a 	mov	sp,fp
 4032e7c:	dfc00117 	ldw	ra,4(sp)
 4032e80:	df000017 	ldw	fp,0(sp)
 4032e84:	dec00204 	addi	sp,sp,8
 4032e88:	f800283a 	ret

04032e8c <tcp_close>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_close(struct tcpcb * tp)
{
 4032e8c:	defff904 	addi	sp,sp,-28
 4032e90:	dfc00615 	stw	ra,24(sp)
 4032e94:	df000515 	stw	fp,20(sp)
 4032e98:	df000504 	addi	fp,sp,20
 4032e9c:	e13fff15 	stw	r4,-4(fp)
   struct tcpiphdr * t;
   struct inpcb * inp   =  tp->t_inpcb;
 4032ea0:	e0bfff17 	ldw	r2,-4(fp)
 4032ea4:	10800d17 	ldw	r2,52(r2)
 4032ea8:	e0bffd15 	stw	r2,-12(fp)
   struct socket *   so =  inp->inp_socket;
 4032eac:	e0bffd17 	ldw	r2,-12(fp)
 4032eb0:	10800817 	ldw	r2,32(r2)
 4032eb4:	e0bffc15 	stw	r2,-16(fp)
   struct mbuf *  m;

   t = tp->seg_next;
 4032eb8:	e0bfff17 	ldw	r2,-4(fp)
 4032ebc:	10800017 	ldw	r2,0(r2)
 4032ec0:	e0bffe15 	stw	r2,-8(fp)
   while (t != (struct tcpiphdr *)tp) 
 4032ec4:	00000c06 	br	4032ef8 <tcp_close+0x6c>
   {
      t = (struct tcpiphdr *)t->ti_next;
 4032ec8:	e0bffe17 	ldw	r2,-8(fp)
 4032ecc:	10800017 	ldw	r2,0(r2)
 4032ed0:	e0bffe15 	stw	r2,-8(fp)
      m = dtom(t->ti_prev);
 4032ed4:	e0bffe17 	ldw	r2,-8(fp)
 4032ed8:	11000117 	ldw	r4,4(r2)
 4032edc:	40272200 	call	4027220 <dtom>
 4032ee0:	e0bffb15 	stw	r2,-20(fp)
      remque(t->ti_prev);
 4032ee4:	e0bffe17 	ldw	r2,-8(fp)
 4032ee8:	11000117 	ldw	r4,4(r2)
 4032eec:	40272c80 	call	40272c8 <remque>
      m_freem (m);
 4032ef0:	e13ffb17 	ldw	r4,-20(fp)
 4032ef4:	4026c900 	call	4026c90 <m_freem>
   struct inpcb * inp   =  tp->t_inpcb;
   struct socket *   so =  inp->inp_socket;
   struct mbuf *  m;

   t = tp->seg_next;
   while (t != (struct tcpiphdr *)tp) 
 4032ef8:	e0ffff17 	ldw	r3,-4(fp)
 4032efc:	e0bffe17 	ldw	r2,-8(fp)
 4032f00:	10fff11e 	bne	r2,r3,4032ec8 <tcp_close+0x3c>
      t = (struct tcpiphdr *)t->ti_next;
      m = dtom(t->ti_prev);
      remque(t->ti_prev);
      m_freem (m);
   }
   if (tp->t_template)
 4032f04:	e0bfff17 	ldw	r2,-4(fp)
 4032f08:	10800c17 	ldw	r2,48(r2)
 4032f0c:	1005003a 	cmpeq	r2,r2,zero
 4032f10:	1000031e 	bne	r2,zero,4032f20 <tcp_close+0x94>
      TPH_FREE (tp->t_template);
 4032f14:	e0bfff17 	ldw	r2,-4(fp)
 4032f18:	11000c17 	ldw	r4,48(r2)
 4032f1c:	40266ec0 	call	40266ec <npfree>
   TCB_FREE (tp);
 4032f20:	e13fff17 	ldw	r4,-4(fp)
 4032f24:	40266ec0 	call	40266ec <npfree>
   inp->inp_ppcb = 0;
 4032f28:	e0bffd17 	ldw	r2,-12(fp)
 4032f2c:	10000915 	stw	zero,36(r2)
   soisdisconnected(so);
 4032f30:	e13ffc17 	ldw	r4,-16(fp)
 4032f34:	402c9500 	call	402c950 <soisdisconnected>
   in_pcbdetach(inp);
 4032f38:	e13ffd17 	ldw	r4,-12(fp)
 4032f3c:	40422300 	call	4042230 <in_pcbdetach>
   tcpstat.tcps_closed++;
 4032f40:	008101b4 	movhi	r2,1030
 4032f44:	10a37804 	addi	r2,r2,-29216
 4032f48:	10800517 	ldw	r2,20(r2)
 4032f4c:	10c00044 	addi	r3,r2,1
 4032f50:	008101b4 	movhi	r2,1030
 4032f54:	10a37804 	addi	r2,r2,-29216
 4032f58:	10c00515 	stw	r3,20(r2)
   return ((struct tcpcb *)0);
 4032f5c:	0005883a 	mov	r2,zero
}
 4032f60:	e037883a 	mov	sp,fp
 4032f64:	dfc00117 	ldw	ra,4(sp)
 4032f68:	df000017 	ldw	fp,0(sp)
 4032f6c:	dec00204 	addi	sp,sp,8
 4032f70:	f800283a 	ret

04032f74 <tcp_quench>:
 * RETURNS: 
 */

void
tcp_quench(struct inpcb * inp)
{
 4032f74:	defffd04 	addi	sp,sp,-12
 4032f78:	df000215 	stw	fp,8(sp)
 4032f7c:	df000204 	addi	fp,sp,8
 4032f80:	e13fff15 	stw	r4,-4(fp)
   struct tcpcb * tp =  intotcpcb(inp);
 4032f84:	e0bfff17 	ldw	r2,-4(fp)
 4032f88:	10800917 	ldw	r2,36(r2)
 4032f8c:	e0bffe15 	stw	r2,-8(fp)

   if (tp)
 4032f90:	e0bffe17 	ldw	r2,-8(fp)
 4032f94:	1005003a 	cmpeq	r2,r2,zero
 4032f98:	1000051e 	bne	r2,zero,4032fb0 <tcp_quench+0x3c>
      tp->snd_cwnd = tp->t_maxseg;
 4032f9c:	e0bffe17 	ldw	r2,-8(fp)
 4032fa0:	10800a0b 	ldhu	r2,40(r2)
 4032fa4:	10ffffcc 	andi	r3,r2,65535
 4032fa8:	e0bffe17 	ldw	r2,-8(fp)
 4032fac:	10c01b15 	stw	r3,108(r2)
}
 4032fb0:	e037883a 	mov	sp,fp
 4032fb4:	df000017 	ldw	fp,0(sp)
 4032fb8:	dec00104 	addi	sp,sp,4
 4032fbc:	f800283a 	ret

04032fc0 <tcp_putseq>:

/* tcp_putseq()  */

u_char *
tcp_putseq(u_char * cp, tcp_seq seq)
{
 4032fc0:	defffc04 	addi	sp,sp,-16
 4032fc4:	df000315 	stw	fp,12(sp)
 4032fc8:	df000304 	addi	fp,sp,12
 4032fcc:	e13ffe15 	stw	r4,-8(fp)
 4032fd0:	e17fff15 	stw	r5,-4(fp)
   int   i;

   cp += 3;                /* do low byte first */
 4032fd4:	e0bffe17 	ldw	r2,-8(fp)
 4032fd8:	108000c4 	addi	r2,r2,3
 4032fdc:	e0bffe15 	stw	r2,-8(fp)
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 4032fe0:	e03ffd15 	stw	zero,-12(fp)
 4032fe4:	00000d06 	br	403301c <tcp_putseq+0x5c>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
 4032fe8:	e0bfff17 	ldw	r2,-4(fp)
 4032fec:	1007883a 	mov	r3,r2
 4032ff0:	e0bffe17 	ldw	r2,-8(fp)
 4032ff4:	10c00005 	stb	r3,0(r2)
 4032ff8:	e0bffe17 	ldw	r2,-8(fp)
 4032ffc:	10bfffc4 	addi	r2,r2,-1
 4033000:	e0bffe15 	stw	r2,-8(fp)
      seq >>= 8;
 4033004:	e0bfff17 	ldw	r2,-4(fp)
 4033008:	1004d23a 	srli	r2,r2,8
 403300c:	e0bfff15 	stw	r2,-4(fp)
tcp_putseq(u_char * cp, tcp_seq seq)
{
   int   i;

   cp += 3;                /* do low byte first */
   for(i = 0; i< 4; i++)   /* put 4 bytes into buffer */
 4033010:	e0bffd17 	ldw	r2,-12(fp)
 4033014:	10800044 	addi	r2,r2,1
 4033018:	e0bffd15 	stw	r2,-12(fp)
 403301c:	e0bffd17 	ldw	r2,-12(fp)
 4033020:	10800110 	cmplti	r2,r2,4
 4033024:	103ff01e 	bne	r2,zero,4032fe8 <tcp_putseq+0x28>
   {
      *cp-- = (u_char)(seq & 0xFF);  /* back through buffer */
      seq >>= 8;
   }
   return (cp + 5);
 4033028:	e0bffe17 	ldw	r2,-8(fp)
 403302c:	10800144 	addi	r2,r2,5
}
 4033030:	e037883a 	mov	sp,fp
 4033034:	df000017 	ldw	fp,0(sp)
 4033038:	dec00104 	addi	sp,sp,4
 403303c:	f800283a 	ret

04033040 <tcp_getseq>:
 * RETURNS: a long in local endian
 */

u_long
tcp_getseq(u_char * cp)
{
 4033040:	defffc04 	addi	sp,sp,-16
 4033044:	df000315 	stw	fp,12(sp)
 4033048:	df000304 	addi	fp,sp,12
 403304c:	e13fff15 	stw	r4,-4(fp)
   int i;
   ulong seq = 0;
 4033050:	e03ffd15 	stw	zero,-12(fp)

   for(i = 0; i < 4; i++)
 4033054:	e03ffe15 	stw	zero,-8(fp)
 4033058:	00000f06 	br	4033098 <tcp_getseq+0x58>
   {
      seq <<= 8;
 403305c:	e0bffd17 	ldw	r2,-12(fp)
 4033060:	1004923a 	slli	r2,r2,8
 4033064:	e0bffd15 	stw	r2,-12(fp)
      seq += (u_long)*(cp++);
 4033068:	e0bfff17 	ldw	r2,-4(fp)
 403306c:	10800003 	ldbu	r2,0(r2)
 4033070:	10c03fcc 	andi	r3,r2,255
 4033074:	e0bffd17 	ldw	r2,-12(fp)
 4033078:	10c5883a 	add	r2,r2,r3
 403307c:	e0bffd15 	stw	r2,-12(fp)
 4033080:	e0bfff17 	ldw	r2,-4(fp)
 4033084:	10800044 	addi	r2,r2,1
 4033088:	e0bfff15 	stw	r2,-4(fp)
tcp_getseq(u_char * cp)
{
   int i;
   ulong seq = 0;

   for(i = 0; i < 4; i++)
 403308c:	e0bffe17 	ldw	r2,-8(fp)
 4033090:	10800044 	addi	r2,r2,1
 4033094:	e0bffe15 	stw	r2,-8(fp)
 4033098:	e0bffe17 	ldw	r2,-8(fp)
 403309c:	10800110 	cmplti	r2,r2,4
 40330a0:	103fee1e 	bne	r2,zero,403305c <tcp_getseq+0x1c>
   {
      seq <<= 8;
      seq += (u_long)*(cp++);
   }
   return seq;
 40330a4:	e0bffd17 	ldw	r2,-12(fp)
}
 40330a8:	e037883a 	mov	sp,fp
 40330ac:	df000017 	ldw	fp,0(sp)
 40330b0:	dec00104 	addi	sp,sp,4
 40330b4:	f800283a 	ret

040330b8 <tcp_slowtimo>:
 * RETURNS: 
 */

void
tcp_slowtimo(void)
{
 40330b8:	defff704 	addi	sp,sp,-36
 40330bc:	dfc00815 	stw	ra,32(sp)
 40330c0:	df000715 	stw	fp,28(sp)
 40330c4:	df000704 	addi	fp,sp,28
   struct tcpcb * tp;
   int   i;
   struct socket * so, * sonext;
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;
 40330c8:	d0a03c17 	ldw	r2,-32528(gp)
 40330cc:	100490fa 	slli	r2,r2,3
 40330d0:	d0a83215 	stw	r2,-24376(gp)

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 40330d4:	008101b4 	movhi	r2,1030
 40330d8:	10a34504 	addi	r2,r2,-29420
 40330dc:	10800017 	ldw	r2,0(r2)
 40330e0:	e0bffb15 	stw	r2,-20(fp)
 40330e4:	00008306 	br	40332f4 <tcp_slowtimo+0x23c>
   {
      sonext = so->next;
 40330e8:	e0bffb17 	ldw	r2,-20(fp)
 40330ec:	10800017 	ldw	r2,0(r2)
 40330f0:	e0bffa15 	stw	r2,-24(fp)

      /* for SOCK_STREAM (TCP) sockets, we must do slow-timeout 
       * processing and (optionally) processing of pending 
       * zero-copy socket upcalls.
       */
      if (so->so_type == SOCK_STREAM)
 40330f4:	e0bffb17 	ldw	r2,-20(fp)
 40330f8:	10800983 	ldbu	r2,38(r2)
 40330fc:	10803fcc 	andi	r2,r2,255
 4033100:	1080201c 	xori	r2,r2,128
 4033104:	10bfe004 	addi	r2,r2,-128
 4033108:	10800058 	cmpnei	r2,r2,1
 403310c:	1000471e 	bne	r2,zero,403322c <tcp_slowtimo+0x174>
      {
         ip = so->so_pcb;
 4033110:	e0bffb17 	ldw	r2,-20(fp)
 4033114:	10800117 	ldw	r2,4(r2)
 4033118:	e0bfff15 	stw	r2,-4(fp)
         if (!ip)
 403311c:	e0bfff17 	ldw	r2,-4(fp)
 4033120:	1005003a 	cmpeq	r2,r2,zero
 4033124:	1000711e 	bne	r2,zero,40332ec <tcp_slowtimo+0x234>
            continue;
         ipnxt = ip->inp_next;
 4033128:	e0bfff17 	ldw	r2,-4(fp)
 403312c:	10800017 	ldw	r2,0(r2)
 4033130:	e0bffe15 	stw	r2,-8(fp)

         tp = intotcpcb(so->so_pcb);
 4033134:	e0bffb17 	ldw	r2,-20(fp)
 4033138:	10800117 	ldw	r2,4(r2)
 403313c:	10800917 	ldw	r2,36(r2)
 4033140:	e0bffd15 	stw	r2,-12(fp)
         if (!tp)
 4033144:	e0bffd17 	ldw	r2,-12(fp)
 4033148:	1005003a 	cmpeq	r2,r2,zero
 403314c:	1000671e 	bne	r2,zero,40332ec <tcp_slowtimo+0x234>
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
 4033150:	e03ffc15 	stw	zero,-16(fp)
 4033154:	00002d06 	br	403320c <tcp_slowtimo+0x154>
         {
            if (tp->t_timer[i] && --tp->t_timer[i] == 0) 
 4033158:	e0bffc17 	ldw	r2,-16(fp)
 403315c:	e0fffd17 	ldw	r3,-12(fp)
 4033160:	1085883a 	add	r2,r2,r2
 4033164:	1085883a 	add	r2,r2,r2
 4033168:	10c5883a 	add	r2,r2,r3
 403316c:	10800304 	addi	r2,r2,12
 4033170:	10800017 	ldw	r2,0(r2)
 4033174:	1005003a 	cmpeq	r2,r2,zero
 4033178:	1000211e 	bne	r2,zero,4033200 <tcp_slowtimo+0x148>
 403317c:	e0fffc17 	ldw	r3,-16(fp)
 4033180:	e13ffd17 	ldw	r4,-12(fp)
 4033184:	18c5883a 	add	r2,r3,r3
 4033188:	1085883a 	add	r2,r2,r2
 403318c:	1105883a 	add	r2,r2,r4
 4033190:	10800304 	addi	r2,r2,12
 4033194:	10800017 	ldw	r2,0(r2)
 4033198:	117fffc4 	addi	r5,r2,-1
 403319c:	e13ffd17 	ldw	r4,-12(fp)
 40331a0:	18c5883a 	add	r2,r3,r3
 40331a4:	1085883a 	add	r2,r2,r2
 40331a8:	1105883a 	add	r2,r2,r4
 40331ac:	10800304 	addi	r2,r2,12
 40331b0:	11400015 	stw	r5,0(r2)
 40331b4:	e13ffd17 	ldw	r4,-12(fp)
 40331b8:	18c5883a 	add	r2,r3,r3
 40331bc:	1085883a 	add	r2,r2,r2
 40331c0:	1105883a 	add	r2,r2,r4
 40331c4:	10800304 	addi	r2,r2,12
 40331c8:	10800017 	ldw	r2,0(r2)
 40331cc:	1004c03a 	cmpne	r2,r2,zero
 40331d0:	10000b1e 	bne	r2,zero,4033200 <tcp_slowtimo+0x148>
            {
               /* call usrreq to do actual work */
               so->so_req = PRU_SLOWTIMO;
 40331d4:	e0fffb17 	ldw	r3,-20(fp)
 40331d8:	008004c4 	movi	r2,19
 40331dc:	18800715 	stw	r2,28(r3)
               (void) tcp_usrreq(so, (struct mbuf *)0, 
 40331e0:	e1bffc17 	ldw	r6,-16(fp)
 40331e4:	e13ffb17 	ldw	r4,-20(fp)
 40331e8:	000b883a 	mov	r5,zero
 40331ec:	40338500 	call	4033850 <tcp_usrreq>
                                 LONG2MBUF((long)i));

               /* If ip disappeared on us, handle it */
               if (ipnxt->inp_prev != ip)
 40331f0:	e0bffe17 	ldw	r2,-8(fp)
 40331f4:	10c00117 	ldw	r3,4(r2)
 40331f8:	e0bfff17 	ldw	r2,-4(fp)
 40331fc:	18803b1e 	bne	r3,r2,40332ec <tcp_slowtimo+0x234>

         tp = intotcpcb(so->so_pcb);
         if (!tp)
            continue;

         for (i = 0; i < TCPT_NTIMERS; i++) 
 4033200:	e0bffc17 	ldw	r2,-16(fp)
 4033204:	10800044 	addi	r2,r2,1
 4033208:	e0bffc15 	stw	r2,-16(fp)
 403320c:	e0bffc17 	ldw	r2,-16(fp)
 4033210:	10800110 	cmplti	r2,r2,4
 4033214:	103fd01e 	bne	r2,zero,4033158 <tcp_slowtimo+0xa0>
               }
            }
         }
#endif   /* TCP_ZEROCOPY */

         tp->t_idle++;
 4033218:	e0bffd17 	ldw	r2,-12(fp)
 403321c:	10801d17 	ldw	r2,116(r2)
 4033220:	10c00044 	addi	r3,r2,1
 4033224:	e0bffd17 	ldw	r2,-12(fp)
 4033228:	10c01d15 	stw	r3,116(r2)
      }

      /* wake up anyone sleeping in a select() involving this socket */
      sb = &so->so_rcv;
 403322c:	e0bffb17 	ldw	r2,-20(fp)
 4033230:	10800a04 	addi	r2,r2,40
 4033234:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
 4033238:	e0bff917 	ldw	r2,-28(fp)
 403323c:	1080070b 	ldhu	r2,28(r2)
 4033240:	10bfffcc 	andi	r2,r2,65535
 4033244:	1080020c 	andi	r2,r2,8
 4033248:	1005003a 	cmpeq	r2,r2,zero
 403324c:	10000d1e 	bne	r2,zero,4033284 <tcp_slowtimo+0x1cc>
      {
         select_wait = 0;
 4033250:	00810174 	movhi	r2,1029
 4033254:	1081ec04 	addi	r2,r2,1968
 4033258:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 403325c:	01010174 	movhi	r4,1029
 4033260:	2101ec04 	addi	r4,r4,1968
 4033264:	40219280 	call	4021928 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 4033268:	e0bff917 	ldw	r2,-28(fp)
 403326c:	10c0070b 	ldhu	r3,28(r2)
 4033270:	00bffdc4 	movi	r2,-9
 4033274:	1884703a 	and	r2,r3,r2
 4033278:	1007883a 	mov	r3,r2
 403327c:	e0bff917 	ldw	r2,-28(fp)
 4033280:	10c0070d 	sth	r3,28(r2)
      }
      sb = &so->so_snd;
 4033284:	e0bffb17 	ldw	r2,-20(fp)
 4033288:	10801204 	addi	r2,r2,72
 403328c:	e0bff915 	stw	r2,-28(fp)
      if (sb->sb_flags & SB_SEL) 
 4033290:	e0bff917 	ldw	r2,-28(fp)
 4033294:	1080070b 	ldhu	r2,28(r2)
 4033298:	10bfffcc 	andi	r2,r2,65535
 403329c:	1080020c 	andi	r2,r2,8
 40332a0:	1005003a 	cmpeq	r2,r2,zero
 40332a4:	10000d1e 	bne	r2,zero,40332dc <tcp_slowtimo+0x224>
      {
         select_wait = 0;         
 40332a8:	00810174 	movhi	r2,1029
 40332ac:	1081ec04 	addi	r2,r2,1968
 40332b0:	1000000d 	sth	zero,0(r2)
#ifndef SOCK_MAP_EVENTS
         tcp_wakeup ((char *)&select_wait);
 40332b4:	01010174 	movhi	r4,1029
 40332b8:	2101ec04 	addi	r4,r4,1968
 40332bc:	40219280 	call	4021928 <tcp_wakeup>
#else
         tcp_wakeup2 (so->owner);
#endif
         sb->sb_flags &= ~SB_SEL;
 40332c0:	e0bff917 	ldw	r2,-28(fp)
 40332c4:	10c0070b 	ldhu	r3,28(r2)
 40332c8:	00bffdc4 	movi	r2,-9
 40332cc:	1884703a 	and	r2,r3,r2
 40332d0:	1007883a 	mov	r3,r2
 40332d4:	e0bff917 	ldw	r2,-28(fp)
 40332d8:	10c0070d 	sth	r3,28(r2)
      }

      /* wake any thread with a timer going for a connection state change */     
      tcp_wakeup((char*)&so->so_timeo);
 40332dc:	e0bffb17 	ldw	r2,-20(fp)
 40332e0:	10800904 	addi	r2,r2,36
 40332e4:	1009883a 	mov	r4,r2
 40332e8:	40219280 	call	4021928 <tcp_wakeup>
   struct sockbuf *  sb;

   tcp_maxidle = TCPTV_KEEPCNT * tcp_keepintvl;

   /* search through open sockets */
   for (so = (struct socket *)soq.q_head; so != NULL; so = sonext)
 40332ec:	e0bffa17 	ldw	r2,-24(fp)
 40332f0:	e0bffb15 	stw	r2,-20(fp)
 40332f4:	e0bffb17 	ldw	r2,-20(fp)
 40332f8:	1004c03a 	cmpne	r2,r2,zero
 40332fc:	103f7a1e 	bne	r2,zero,40330e8 <tcp_slowtimo+0x30>

tpgone:
      ;
   }

   tcp_iss += (unsigned)(TCP_ISSINCR/PR_SLOWHZ);      /* increment iss */
 4033300:	00810174 	movhi	r2,1029
 4033304:	1081f104 	addi	r2,r2,1988
 4033308:	10c00017 	ldw	r3,0(r2)
 403330c:	00be9fd4 	movui	r2,64127
 4033310:	1887883a 	add	r3,r3,r2
 4033314:	00810174 	movhi	r2,1029
 4033318:	1081f104 	addi	r2,r2,1988
 403331c:	10c00015 	stw	r3,0(r2)

   if (tcp_iss & 0xff000000)
 4033320:	00810174 	movhi	r2,1029
 4033324:	1081f104 	addi	r2,r2,1988
 4033328:	10800017 	ldw	r2,0(r2)
 403332c:	10bfc02c 	andhi	r2,r2,65280
 4033330:	1005003a 	cmpeq	r2,r2,zero
 4033334:	1000031e 	bne	r2,zero,4033344 <tcp_slowtimo+0x28c>
      tcp_iss = 0L;
 4033338:	00810174 	movhi	r2,1029
 403333c:	1081f104 	addi	r2,r2,1988
 4033340:	10000015 	stw	zero,0(r2)
}
 4033344:	e037883a 	mov	sp,fp
 4033348:	dfc00117 	ldw	ra,4(sp)
 403334c:	df000017 	ldw	fp,0(sp)
 4033350:	dec00204 	addi	sp,sp,8
 4033354:	f800283a 	ret

04033358 <tcp_canceltimers>:
 * RETURNS: 
 */

void
tcp_canceltimers(struct tcpcb * tp)
{
 4033358:	defffd04 	addi	sp,sp,-12
 403335c:	df000215 	stw	fp,8(sp)
 4033360:	df000204 	addi	fp,sp,8
 4033364:	e13fff15 	stw	r4,-4(fp)
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
 4033368:	e03ffe15 	stw	zero,-8(fp)
 403336c:	00000a06 	br	4033398 <tcp_canceltimers+0x40>
      tp->t_timer[i] = 0;
 4033370:	e0bffe17 	ldw	r2,-8(fp)
 4033374:	e0ffff17 	ldw	r3,-4(fp)
 4033378:	1085883a 	add	r2,r2,r2
 403337c:	1085883a 	add	r2,r2,r2
 4033380:	10c5883a 	add	r2,r2,r3
 4033384:	10800304 	addi	r2,r2,12
 4033388:	10000015 	stw	zero,0(r2)
void
tcp_canceltimers(struct tcpcb * tp)
{
   int   i;

   for (i = 0; i < TCPT_NTIMERS; i++)
 403338c:	e0bffe17 	ldw	r2,-8(fp)
 4033390:	10800044 	addi	r2,r2,1
 4033394:	e0bffe15 	stw	r2,-8(fp)
 4033398:	e0bffe17 	ldw	r2,-8(fp)
 403339c:	10800110 	cmplti	r2,r2,4
 40333a0:	103ff31e 	bne	r2,zero,4033370 <tcp_canceltimers+0x18>
      tp->t_timer[i] = 0;
}
 40333a4:	e037883a 	mov	sp,fp
 40333a8:	df000017 	ldw	fp,0(sp)
 40333ac:	dec00104 	addi	sp,sp,4
 40333b0:	f800283a 	ret

040333b4 <tcp_timers>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_timers(struct tcpcb * tp, int timer)
{
 40333b4:	defff504 	addi	sp,sp,-44
 40333b8:	dfc00a15 	stw	ra,40(sp)
 40333bc:	df000915 	stw	fp,36(sp)
 40333c0:	df000904 	addi	fp,sp,36
 40333c4:	e13ffb15 	stw	r4,-20(fp)
 40333c8:	e17ffc15 	stw	r5,-16(fp)
   int   rexmt;

   switch (timer) 
 40333cc:	e0bffc17 	ldw	r2,-16(fp)
 40333d0:	e0bffe15 	stw	r2,-8(fp)
 40333d4:	e0fffe17 	ldw	r3,-8(fp)
 40333d8:	18800060 	cmpeqi	r2,r3,1
 40333dc:	1000bd1e 	bne	r2,zero,40336d4 <tcp_timers+0x320>
 40333e0:	e0fffe17 	ldw	r3,-8(fp)
 40333e4:	18800088 	cmpgei	r2,r3,2
 40333e8:	1000041e 	bne	r2,zero,40333fc <tcp_timers+0x48>
 40333ec:	e0fffe17 	ldw	r3,-8(fp)
 40333f0:	1805003a 	cmpeq	r2,r3,zero
 40333f4:	10001b1e 	bne	r2,zero,4033464 <tcp_timers+0xb0>
 40333f8:	00010f06 	br	4033838 <tcp_timers+0x484>
 40333fc:	e0fffe17 	ldw	r3,-8(fp)
 4033400:	188000a0 	cmpeqi	r2,r3,2
 4033404:	1000c41e 	bne	r2,zero,4033718 <tcp_timers+0x364>
 4033408:	e0fffe17 	ldw	r3,-8(fp)
 403340c:	188000e0 	cmpeqi	r2,r3,3
 4033410:	1000011e 	bne	r2,zero,4033418 <tcp_timers+0x64>
 4033414:	00010806 	br	4033838 <tcp_timers+0x484>
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
 4033418:	e0bffb17 	ldw	r2,-20(fp)
 403341c:	10800217 	ldw	r2,8(r2)
 4033420:	108002a0 	cmpeqi	r2,r2,10
 4033424:	10000b1e 	bne	r2,zero,4033454 <tcp_timers+0xa0>
 4033428:	e0bffb17 	ldw	r2,-20(fp)
 403342c:	10c01d17 	ldw	r3,116(r2)
 4033430:	d0a83217 	ldw	r2,-24376(gp)
 4033434:	10c00716 	blt	r2,r3,4033454 <tcp_timers+0xa0>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
 4033438:	d0a03c17 	ldw	r2,-32528(gp)
 403343c:	10ffffcc 	andi	r3,r2,65535
 4033440:	18e0001c 	xori	r3,r3,32768
 4033444:	18e00004 	addi	r3,r3,-32768
 4033448:	e0bffb17 	ldw	r2,-20(fp)
 403344c:	10c00615 	stw	r3,24(r2)
    * still waiting for peer to close and connection has been idle
    * too long, or if 2MSL time is up from TIME_WAIT, delete connection
    * control block.  Otherwise, check again in a bit.
    */
   case TCPT_2MSL:
      if (tp->t_state != TCPS_TIME_WAIT &&
 4033450:	0000f906 	br	4033838 <tcp_timers+0x484>
          tp->t_idle <= tcp_maxidle)
      {
         tp->t_timer[TCPT_2MSL] = (short)tcp_keepintvl;
      }
      else
         tp = tcp_close(tp);
 4033454:	e13ffb17 	ldw	r4,-20(fp)
 4033458:	4032e8c0 	call	4032e8c <tcp_close>
 403345c:	e0bffb15 	stw	r2,-20(fp)
      break;
 4033460:	0000f506 	br	4033838 <tcp_timers+0x484>
    * Retransmission timer went off.  Message has not
    * been acked within retransmit interval.  Back off
    * to a longer retransmit interval and retransmit one segment.
    */
   case TCPT_REXMT:
      TCP_MIB_INC(tcpRetransSegs);     /* keep MIB stats */
 4033464:	008101b4 	movhi	r2,1030
 4033468:	10a34a04 	addi	r2,r2,-29400
 403346c:	10800b17 	ldw	r2,44(r2)
 4033470:	10c00044 	addi	r3,r2,1
 4033474:	008101b4 	movhi	r2,1030
 4033478:	10a34a04 	addi	r2,r2,-29400
 403347c:	10c00b15 	stw	r3,44(r2)
      if (++tp->t_rxtshift > TCP_MAXRXTSHIFT) 
 4033480:	e0bffb17 	ldw	r2,-20(fp)
 4033484:	10800717 	ldw	r2,28(r2)
 4033488:	10c00044 	addi	r3,r2,1
 403348c:	e0bffb17 	ldw	r2,-20(fp)
 4033490:	10c00715 	stw	r3,28(r2)
 4033494:	e0bffb17 	ldw	r2,-20(fp)
 4033498:	10800717 	ldw	r2,28(r2)
 403349c:	10800350 	cmplti	r2,r2,13
 40334a0:	10000f1e 	bne	r2,zero,40334e0 <tcp_timers+0x12c>
      {
         tp->t_rxtshift = TCP_MAXRXTSHIFT;
 40334a4:	e0fffb17 	ldw	r3,-20(fp)
 40334a8:	00800304 	movi	r2,12
 40334ac:	18800715 	stw	r2,28(r3)
         tcpstat.tcps_timeoutdrop++;
 40334b0:	008101b4 	movhi	r2,1030
 40334b4:	10a37804 	addi	r2,r2,-29216
 40334b8:	10800917 	ldw	r2,36(r2)
 40334bc:	10c00044 	addi	r3,r2,1
 40334c0:	008101b4 	movhi	r2,1030
 40334c4:	10a37804 	addi	r2,r2,-29216
 40334c8:	10c00915 	stw	r3,36(r2)
         tp = tcp_drop(tp, ETIMEDOUT);
 40334cc:	e13ffb17 	ldw	r4,-20(fp)
 40334d0:	01401d04 	movi	r5,116
 40334d4:	4032de00 	call	4032de0 <tcp_drop>
 40334d8:	e0bffb15 	stw	r2,-20(fp)
         break;
 40334dc:	0000d606 	br	4033838 <tcp_timers+0x484>
      }
      tcpstat.tcps_rexmttimeo++;
 40334e0:	008101b4 	movhi	r2,1030
 40334e4:	10a37804 	addi	r2,r2,-29216
 40334e8:	10800a17 	ldw	r2,40(r2)
 40334ec:	10c00044 	addi	r3,r2,1
 40334f0:	008101b4 	movhi	r2,1030
 40334f4:	10a37804 	addi	r2,r2,-29216
 40334f8:	10c00a15 	stw	r3,40(r2)
      rexmt = ((tp->t_srtt >> 2) + tp->t_rttvar) >> 1;
 40334fc:	e0bffb17 	ldw	r2,-20(fp)
 4033500:	10802017 	ldw	r2,128(r2)
 4033504:	1007d0ba 	srai	r3,r2,2
 4033508:	e0bffb17 	ldw	r2,-20(fp)
 403350c:	10802117 	ldw	r2,132(r2)
 4033510:	1885883a 	add	r2,r3,r2
 4033514:	1005d07a 	srai	r2,r2,1
 4033518:	e0bffa15 	stw	r2,-24(fp)
      rexmt *= tcp_backoff[tp->t_rxtshift];
 403351c:	e0bffb17 	ldw	r2,-20(fp)
 4033520:	10c00717 	ldw	r3,28(r2)
 4033524:	00810174 	movhi	r2,1029
 4033528:	10b8ecc4 	addi	r2,r2,-7245
 403352c:	10c5883a 	add	r2,r2,r3
 4033530:	10800003 	ldbu	r2,0(r2)
 4033534:	10c03fcc 	andi	r3,r2,255
 4033538:	e0bffa17 	ldw	r2,-24(fp)
 403353c:	10c5383a 	mul	r2,r2,r3
 4033540:	e0bffa15 	stw	r2,-24(fp)
      TCPT_RANGESET(tp->t_rxtcur, rexmt, TCPTV_MIN, TCPTV_REXMTMAX);
 4033544:	e0bffa17 	ldw	r2,-24(fp)
 4033548:	10ffffcc 	andi	r3,r2,65535
 403354c:	18e0001c 	xori	r3,r3,32768
 4033550:	18e00004 	addi	r3,r3,-32768
 4033554:	e0bffb17 	ldw	r2,-20(fp)
 4033558:	10c00815 	stw	r3,32(r2)
 403355c:	e0bffb17 	ldw	r2,-20(fp)
 4033560:	10800817 	ldw	r2,32(r2)
 4033564:	10800088 	cmpgei	r2,r2,2
 4033568:	1000041e 	bne	r2,zero,403357c <tcp_timers+0x1c8>
 403356c:	e0fffb17 	ldw	r3,-20(fp)
 4033570:	00800084 	movi	r2,2
 4033574:	18800815 	stw	r2,32(r3)
 4033578:	00000706 	br	4033598 <tcp_timers+0x1e4>
 403357c:	e0bffb17 	ldw	r2,-20(fp)
 4033580:	10800817 	ldw	r2,32(r2)
 4033584:	10802050 	cmplti	r2,r2,129
 4033588:	1000031e 	bne	r2,zero,4033598 <tcp_timers+0x1e4>
 403358c:	e0fffb17 	ldw	r3,-20(fp)
 4033590:	00802004 	movi	r2,128
 4033594:	18800815 	stw	r2,32(r3)
      tp->t_timer[TCPT_REXMT] = tp->t_rxtcur;
 4033598:	e0bffb17 	ldw	r2,-20(fp)
 403359c:	10c00817 	ldw	r3,32(r2)
 40335a0:	e0bffb17 	ldw	r2,-20(fp)
 40335a4:	10c00315 	stw	r3,12(r2)
       * so we'll take the next rtt measurement as our srtt;
       * move the current srtt into rttvar to keep the current
       * retransmit times until then. Don't clobber with rtt
       * if we got it from a timestamp option.
       */
      if((tp->t_rxtshift > TCP_MAXRXTSHIFT / 4) &&
 40335a8:	e0bffb17 	ldw	r2,-20(fp)
 40335ac:	10800717 	ldw	r2,28(r2)
 40335b0:	10800110 	cmplti	r2,r2,4
 40335b4:	1000101e 	bne	r2,zero,40335f8 <tcp_timers+0x244>
 40335b8:	e0bffb17 	ldw	r2,-20(fp)
 40335bc:	10800b0b 	ldhu	r2,44(r2)
 40335c0:	10bfffcc 	andi	r2,r2,65535
 40335c4:	1080400c 	andi	r2,r2,256
 40335c8:	1004c03a 	cmpne	r2,r2,zero
 40335cc:	10000a1e 	bne	r2,zero,40335f8 <tcp_timers+0x244>
         ((tp->t_flags & TF_TIMESTAMP) == 0))
      {
         tp->t_rttvar += (tp->t_srtt >> 2);
 40335d0:	e0bffb17 	ldw	r2,-20(fp)
 40335d4:	10c02117 	ldw	r3,132(r2)
 40335d8:	e0bffb17 	ldw	r2,-20(fp)
 40335dc:	10802017 	ldw	r2,128(r2)
 40335e0:	1005d0ba 	srai	r2,r2,2
 40335e4:	1887883a 	add	r3,r3,r2
 40335e8:	e0bffb17 	ldw	r2,-20(fp)
 40335ec:	10c02115 	stw	r3,132(r2)
         tp->t_srtt = 0;
 40335f0:	e0bffb17 	ldw	r2,-20(fp)
 40335f4:	10002015 	stw	zero,128(r2)
      }
      tp->snd_nxt = tp->snd_una;
 40335f8:	e0bffb17 	ldw	r2,-20(fp)
 40335fc:	10c00e17 	ldw	r3,56(r2)
 4033600:	e0bffb17 	ldw	r2,-20(fp)
 4033604:	10c00f15 	stw	r3,60(r2)
      /*
       * If timing a segment in this window, stop the timer.
       */
      tp->t_rttick = 0;
 4033608:	e0bffb17 	ldw	r2,-20(fp)
 403360c:	10001e15 	stw	zero,120(r2)
       * to go below this.)
       *
       * Vers 1.9 - Skip slow start if the SO_NOSLOWSTART socket option
       * is set.
       */
      if((tp->t_inpcb->inp_socket->so_options & SO_NOSLOWSTART) == 0)
 4033610:	e0bffb17 	ldw	r2,-20(fp)
 4033614:	10800d17 	ldw	r2,52(r2)
 4033618:	10800817 	ldw	r2,32(r2)
 403361c:	10800417 	ldw	r2,16(r2)
 4033620:	1090000c 	andi	r2,r2,16384
 4033624:	1004c03a 	cmpne	r2,r2,zero
 4033628:	1000271e 	bne	r2,zero,40336c8 <tcp_timers+0x314>
      {
         u_int win = MIN(tp->snd_wnd, tp->snd_cwnd);
 403362c:	e0bffb17 	ldw	r2,-20(fp)
 4033630:	10c01417 	ldw	r3,80(r2)
 4033634:	e0bffb17 	ldw	r2,-20(fp)
 4033638:	10801b17 	ldw	r2,108(r2)
 403363c:	e0bffd15 	stw	r2,-12(fp)
 4033640:	e0ffff15 	stw	r3,-4(fp)
 4033644:	e0bffd17 	ldw	r2,-12(fp)
 4033648:	e0ffff17 	ldw	r3,-4(fp)
 403364c:	10c0022e 	bgeu	r2,r3,4033658 <tcp_timers+0x2a4>
 4033650:	e0bffd17 	ldw	r2,-12(fp)
 4033654:	e0bfff15 	stw	r2,-4(fp)
 4033658:	e0ffff17 	ldw	r3,-4(fp)
 403365c:	e0fff915 	stw	r3,-28(fp)
         win = win / 2 / tp->t_maxseg;
 4033660:	e0bff917 	ldw	r2,-28(fp)
 4033664:	1006d07a 	srli	r3,r2,1
 4033668:	e0bffb17 	ldw	r2,-20(fp)
 403366c:	10800a0b 	ldhu	r2,40(r2)
 4033670:	10bfffcc 	andi	r2,r2,65535
 4033674:	1885203a 	divu	r2,r3,r2
 4033678:	e0bff915 	stw	r2,-28(fp)
         if (win < 2)
 403367c:	e0bff917 	ldw	r2,-28(fp)
 4033680:	108000a8 	cmpgeui	r2,r2,2
 4033684:	1000021e 	bne	r2,zero,4033690 <tcp_timers+0x2dc>
            win = 2;
 4033688:	00800084 	movi	r2,2
 403368c:	e0bff915 	stw	r2,-28(fp)
         tp->snd_cwnd = tp->t_maxseg;
 4033690:	e0bffb17 	ldw	r2,-20(fp)
 4033694:	10800a0b 	ldhu	r2,40(r2)
 4033698:	10ffffcc 	andi	r3,r2,65535
 403369c:	e0bffb17 	ldw	r2,-20(fp)
 40336a0:	10c01b15 	stw	r3,108(r2)
         tp->snd_ssthresh = (u_short)win * tp->t_maxseg;
 40336a4:	e0bff917 	ldw	r2,-28(fp)
 40336a8:	10ffffcc 	andi	r3,r2,65535
 40336ac:	e0bffb17 	ldw	r2,-20(fp)
 40336b0:	10800a0b 	ldhu	r2,40(r2)
 40336b4:	10bfffcc 	andi	r2,r2,65535
 40336b8:	1885383a 	mul	r2,r3,r2
 40336bc:	1007883a 	mov	r3,r2
 40336c0:	e0bffb17 	ldw	r2,-20(fp)
 40336c4:	10c01c15 	stw	r3,112(r2)
      }
      (void) tcp_output(tp);
 40336c8:	e13ffb17 	ldw	r4,-20(fp)
 40336cc:	40313700 	call	4031370 <tcp_output>
      break;
 40336d0:	00005906 	br	4033838 <tcp_timers+0x484>
   /*
    * Persistance timer into zero window.
    * Force a byte to be output, if possible.
    */
   case TCPT_PERSIST:
      tcpstat.tcps_persisttimeo++;
 40336d4:	008101b4 	movhi	r2,1030
 40336d8:	10a37804 	addi	r2,r2,-29216
 40336dc:	10800b17 	ldw	r2,44(r2)
 40336e0:	10c00044 	addi	r3,r2,1
 40336e4:	008101b4 	movhi	r2,1030
 40336e8:	10a37804 	addi	r2,r2,-29216
 40336ec:	10c00b15 	stw	r3,44(r2)
      tcp_setpersist(tp);
 40336f0:	e13ffb17 	ldw	r4,-20(fp)
 40336f4:	40324ec0 	call	40324ec <tcp_setpersist>
      tp->t_force = 1;
 40336f8:	e0fffb17 	ldw	r3,-20(fp)
 40336fc:	00800044 	movi	r2,1
 4033700:	18800a85 	stb	r2,42(r3)
      (void) tcp_output(tp);
 4033704:	e13ffb17 	ldw	r4,-20(fp)
 4033708:	40313700 	call	4031370 <tcp_output>
      tp->t_force = 0;
 403370c:	e0bffb17 	ldw	r2,-20(fp)
 4033710:	10000a85 	stb	zero,42(r2)
      break;
 4033714:	00004806 	br	4033838 <tcp_timers+0x484>
   /*
    * Keep-alive timer went off; send something
    * or drop connection if idle for too long.
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
 4033718:	008101b4 	movhi	r2,1030
 403371c:	10a37804 	addi	r2,r2,-29216
 4033720:	10800c17 	ldw	r2,48(r2)
 4033724:	10c00044 	addi	r3,r2,1
 4033728:	008101b4 	movhi	r2,1030
 403372c:	10a37804 	addi	r2,r2,-29216
 4033730:	10c00c15 	stw	r3,48(r2)
      if (tp->t_state < TCPS_ESTABLISHED)
 4033734:	e0bffb17 	ldw	r2,-20(fp)
 4033738:	10800217 	ldw	r2,8(r2)
 403373c:	10800110 	cmplti	r2,r2,4
 4033740:	1000321e 	bne	r2,zero,403380c <tcp_timers+0x458>
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 4033744:	e0bffb17 	ldw	r2,-20(fp)
 4033748:	10800d17 	ldw	r2,52(r2)
 403374c:	10800817 	ldw	r2,32(r2)
 4033750:	10800417 	ldw	r2,16(r2)
 4033754:	1080020c 	andi	r2,r2,8
 4033758:	1005003a 	cmpeq	r2,r2,zero
 403375c:	1000241e 	bne	r2,zero,40337f0 <tcp_timers+0x43c>
 4033760:	e0bffb17 	ldw	r2,-20(fp)
 4033764:	10800217 	ldw	r2,8(r2)
 4033768:	10800188 	cmpgei	r2,r2,6
 403376c:	1000201e 	bne	r2,zero,40337f0 <tcp_timers+0x43c>
          tp->t_state <= TCPS_CLOSE_WAIT) 
      {
         if (tp->t_idle >= tcp_keepidle + tcp_maxidle)
 4033770:	e0bffb17 	ldw	r2,-20(fp)
 4033774:	11001d17 	ldw	r4,116(r2)
 4033778:	d0e03b17 	ldw	r3,-32532(gp)
 403377c:	d0a83217 	ldw	r2,-24376(gp)
 4033780:	1885883a 	add	r2,r3,r2
 4033784:	2080210e 	bge	r4,r2,403380c <tcp_timers+0x458>
          * causes the transmitted zero-length segment
          * to lie outside the receive window;
          * by the protocol spec, this requires the
          * correspondent TCP to respond.
          */
         tcpstat.tcps_keepprobe++;
 4033788:	008101b4 	movhi	r2,1030
 403378c:	10a37804 	addi	r2,r2,-29216
 4033790:	10800d17 	ldw	r2,52(r2)
 4033794:	10c00044 	addi	r3,r2,1
 4033798:	008101b4 	movhi	r2,1030
 403379c:	10a37804 	addi	r2,r2,-29216
 40337a0:	10c00d15 	stw	r3,52(r2)

         /*
          * The keepalive packet must have nonzero length
          * to get a 4.2 host to respond.
          */
         tcp_respond(tp, tp->t_template, tp->rcv_nxt - 1,
 40337a4:	e0bffb17 	ldw	r2,-20(fp)
 40337a8:	11400c17 	ldw	r5,48(r2)
 40337ac:	e0bffb17 	ldw	r2,-20(fp)
 40337b0:	10801617 	ldw	r2,88(r2)
 40337b4:	11bfffc4 	addi	r6,r2,-1
 40337b8:	e0bffb17 	ldw	r2,-20(fp)
 40337bc:	10800e17 	ldw	r2,56(r2)
 40337c0:	11ffffc4 	addi	r7,r2,-1
 40337c4:	d8000015 	stw	zero,0(sp)
 40337c8:	d8000115 	stw	zero,4(sp)
 40337cc:	e13ffb17 	ldw	r4,-20(fp)
 40337d0:	40328400 	call	4032840 <tcp_respond>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
 40337d4:	d0a03c17 	ldw	r2,-32528(gp)
 40337d8:	10ffffcc 	andi	r3,r2,65535
 40337dc:	18e0001c 	xori	r3,r3,32768
 40337e0:	18e00004 	addi	r3,r3,-32768
 40337e4:	e0bffb17 	ldw	r2,-20(fp)
 40337e8:	10c00515 	stw	r3,20(r2)
    */
   case TCPT_KEEP:
      tcpstat.tcps_keeptimeo++;
      if (tp->t_state < TCPS_ESTABLISHED)
         goto dropit;
      if (tp->t_inpcb->inp_socket->so_options & SO_KEEPALIVE &&
 40337ec:	00001206 	br	4033838 <tcp_timers+0x484>
            tp->snd_una - 1, 0, (struct mbuf *)NULL);

         tp->t_timer[TCPT_KEEP] = (short)tcp_keepintvl;
      }
      else
         tp->t_timer[TCPT_KEEP] = (short)tcp_keepidle;
 40337f0:	d0a03b17 	ldw	r2,-32532(gp)
 40337f4:	10ffffcc 	andi	r3,r2,65535
 40337f8:	18e0001c 	xori	r3,r3,32768
 40337fc:	18e00004 	addi	r3,r3,-32768
 4033800:	e0bffb17 	ldw	r2,-20(fp)
 4033804:	10c00515 	stw	r3,20(r2)
      break;
 4033808:	00000b06 	br	4033838 <tcp_timers+0x484>
      dropit:
      tcpstat.tcps_keepdrops++;
 403380c:	008101b4 	movhi	r2,1030
 4033810:	10a37804 	addi	r2,r2,-29216
 4033814:	10800e17 	ldw	r2,56(r2)
 4033818:	10c00044 	addi	r3,r2,1
 403381c:	008101b4 	movhi	r2,1030
 4033820:	10a37804 	addi	r2,r2,-29216
 4033824:	10c00e15 	stw	r3,56(r2)
      tp = tcp_drop (tp, ETIMEDOUT);
 4033828:	e13ffb17 	ldw	r4,-20(fp)
 403382c:	01401d04 	movi	r5,116
 4033830:	4032de00 	call	4032de0 <tcp_drop>
 4033834:	e0bffb15 	stw	r2,-20(fp)
      break;
   }
   return tp;
 4033838:	e0bffb17 	ldw	r2,-20(fp)
}
 403383c:	e037883a 	mov	sp,fp
 4033840:	dfc00117 	ldw	ra,4(sp)
 4033844:	df000017 	ldw	fp,0(sp)
 4033848:	dec00204 	addi	sp,sp,8
 403384c:	f800283a 	ret

04033850 <tcp_usrreq>:

int
tcp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 4033850:	defff504 	addi	sp,sp,-44
 4033854:	dfc00a15 	stw	ra,40(sp)
 4033858:	df000915 	stw	fp,36(sp)
 403385c:	df000904 	addi	fp,sp,36
 4033860:	e13ffc15 	stw	r4,-16(fp)
 4033864:	e17ffd15 	stw	r5,-12(fp)
 4033868:	e1bffe15 	stw	r6,-8(fp)
   struct inpcb * inp;
   struct tcpcb * tp;
   int   error =  0;
 403386c:	e03ff915 	stw	zero,-28(fp)

#ifdef DO_TCPTRACE
   int   ostate;
#endif

   req = so->so_req;    /* get request from socket struct */
 4033870:	e0bffc17 	ldw	r2,-16(fp)
 4033874:	10800717 	ldw	r2,28(r2)
 4033878:	e0bff815 	stw	r2,-32(fp)
   inp = sotoinpcb(so);
 403387c:	e0bffc17 	ldw	r2,-16(fp)
 4033880:	10800117 	ldw	r2,4(r2)
 4033884:	e0bffb15 	stw	r2,-20(fp)
   /*
    * When a TCP is attached to a socket, then there will be
    * a (struct inpcb) pointed at by the socket, and this
    * structure will point at a subsidary (struct tcpcb).
    */
   if (inp == 0 && req != PRU_ATTACH) 
 4033888:	e0bffb17 	ldw	r2,-20(fp)
 403388c:	1004c03a 	cmpne	r2,r2,zero
 4033890:	1000061e 	bne	r2,zero,40338ac <tcp_usrreq+0x5c>
 4033894:	e0bff817 	ldw	r2,-32(fp)
 4033898:	1005003a 	cmpeq	r2,r2,zero
 403389c:	1000031e 	bne	r2,zero,40338ac <tcp_usrreq+0x5c>
   {
      return (EINVAL);
 40338a0:	00800584 	movi	r2,22
 40338a4:	e0bfff15 	stw	r2,-4(fp)
 40338a8:	0001a406 	br	4033f3c <tcp_usrreq+0x6ec>
   }

   if (inp)
 40338ac:	e0bffb17 	ldw	r2,-20(fp)
 40338b0:	1005003a 	cmpeq	r2,r2,zero
 40338b4:	1000041e 	bne	r2,zero,40338c8 <tcp_usrreq+0x78>
      tp = intotcpcb(inp);
 40338b8:	e0bffb17 	ldw	r2,-20(fp)
 40338bc:	10800917 	ldw	r2,36(r2)
 40338c0:	e0bffa15 	stw	r2,-24(fp)
 40338c4:	00000906 	br	40338ec <tcp_usrreq+0x9c>
   else  /* inp and tp not set, make sure this is OK: */
   { 
      if (req == PRU_ATTACH)
 40338c8:	e0bff817 	ldw	r2,-32(fp)
 40338cc:	1004c03a 	cmpne	r2,r2,zero
 40338d0:	1000021e 	bne	r2,zero,40338dc <tcp_usrreq+0x8c>
         tp = NULL;  /* stifle compiler warnings about using unassigned tp*/
 40338d4:	e03ffa15 	stw	zero,-24(fp)
 40338d8:	00000406 	br	40338ec <tcp_usrreq+0x9c>
      else
      {
         dtrap(); /* programming error? */
 40338dc:	4025bb40 	call	4025bb4 <dtrap>
         return EINVAL;
 40338e0:	00800584 	movi	r2,22
 40338e4:	e0bfff15 	stw	r2,-4(fp)
 40338e8:	00019406 	br	4033f3c <tcp_usrreq+0x6ec>
      }
   }

   switch (req) 
 40338ec:	e0bff817 	ldw	r2,-32(fp)
 40338f0:	10800528 	cmpgeui	r2,r2,20
 40338f4:	10018c1e 	bne	r2,zero,4033f28 <tcp_usrreq+0x6d8>
 40338f8:	e0bff817 	ldw	r2,-32(fp)
 40338fc:	1085883a 	add	r2,r2,r2
 4033900:	1087883a 	add	r3,r2,r2
 4033904:	008100f4 	movhi	r2,1027
 4033908:	108e4604 	addi	r2,r2,14616
 403390c:	1885883a 	add	r2,r3,r2
 4033910:	10800017 	ldw	r2,0(r2)
 4033914:	1000683a 	jmp	r2
 4033918:	04033968 	cmpgeui	r16,zero,3301
 403391c:	040339d8 	cmpnei	r16,zero,3303
 4033920:	04033a00 	call	4033a0 <OSCtxSw_SWITCH_PC+0x403360>
 4033924:	04033a38 	rdprs	r16,zero,3304
 4033928:	04033a78 	rdprs	r16,zero,3305
 403392c:	04033bfc 	xorhi	r16,zero,3311
 4033930:	04033bf0 	cmpltui	r16,zero,3311
 4033934:	04033ca8 	cmpgeui	r16,zero,3314
 4033938:	04033cd8 	cmpnei	r16,zero,3315
 403393c:	04033ce4 	muli	r16,zero,3315
 4033940:	04033d3c 	xorhi	r16,zero,3316
 4033944:	04033f28 	cmpgeui	r16,zero,3324
 4033948:	04033d4c 	andi	r16,zero,3317
 403394c:	04033d58 	cmpnei	r16,zero,3317
 4033950:	04033e28 	cmpgeui	r16,zero,3320
 4033954:	04033ef8 	rdprs	r16,zero,3323
 4033958:	04033f08 	cmpgei	r16,zero,3324
 403395c:	04033be4 	muli	r16,zero,3311
 4033960:	04033f28 	cmpgeui	r16,zero,3324
 4033964:	04033f18 	cmpnei	r16,zero,3324
   /*
    * TCP attaches to socket via PRU_ATTACH, reserving space,
    * and an internet control block.
    */
   case PRU_ATTACH:
      if (inp) 
 4033968:	e0bffb17 	ldw	r2,-20(fp)
 403396c:	1005003a 	cmpeq	r2,r2,zero
 4033970:	1000031e 	bne	r2,zero,4033980 <tcp_usrreq+0x130>
      {
         error = EISCONN;
 4033974:	00801fc4 	movi	r2,127
 4033978:	e0bff915 	stw	r2,-28(fp)
         break;
 403397c:	00016d06 	br	4033f34 <tcp_usrreq+0x6e4>
      }
      error = tcp_attach(so);
 4033980:	e13ffc17 	ldw	r4,-16(fp)
 4033984:	4033f540 	call	4033f54 <tcp_attach>
 4033988:	e0bff915 	stw	r2,-28(fp)
      if (error)
 403398c:	e0bff917 	ldw	r2,-28(fp)
 4033990:	1004c03a 	cmpne	r2,r2,zero
 4033994:	1001671e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         break;
      if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 4033998:	e0bffc17 	ldw	r2,-16(fp)
 403399c:	10800417 	ldw	r2,16(r2)
 40339a0:	1080200c 	andi	r2,r2,128
 40339a4:	1005003a 	cmpeq	r2,r2,zero
 40339a8:	1001621e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
 40339ac:	e0bffc17 	ldw	r2,-16(fp)
 40339b0:	1080080b 	ldhu	r2,32(r2)
 40339b4:	10bfffcc 	andi	r2,r2,65535
 40339b8:	10a0001c 	xori	r2,r2,32768
 40339bc:	10a00004 	addi	r2,r2,-32768
 40339c0:	1004c03a 	cmpne	r2,r2,zero
 40339c4:	10015b1e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         so->so_linger = TCP_LINGERTIME;
 40339c8:	e0fffc17 	ldw	r3,-16(fp)
 40339cc:	00801e04 	movi	r2,120
 40339d0:	1880080d 	sth	r2,32(r3)
#ifdef   DO_TCPTRACE
      SETTP(tp, sototcpcb(so));
#endif
      break;
 40339d4:	00015706 	br	4033f34 <tcp_usrreq+0x6e4>
    * do this directly: have to initiate a PRU_DISCONNECT,
    * which may finish later; embryonic TCB's can just
    * be discarded here.
    */
   case PRU_DETACH:
      if (tp->t_state > TCPS_LISTEN)
 40339d8:	e0bffa17 	ldw	r2,-24(fp)
 40339dc:	10800217 	ldw	r2,8(r2)
 40339e0:	10800090 	cmplti	r2,r2,2
 40339e4:	1000031e 	bne	r2,zero,40339f4 <tcp_usrreq+0x1a4>
         SETTP(tp, tcp_disconnect(tp));
 40339e8:	e13ffa17 	ldw	r4,-24(fp)
 40339ec:	40340880 	call	4034088 <tcp_disconnect>
 40339f0:	00015006 	br	4033f34 <tcp_usrreq+0x6e4>
      else
         SETTP(tp, tcp_close(tp));
 40339f4:	e13ffa17 	ldw	r4,-24(fp)
 40339f8:	4032e8c0 	call	4032e8c <tcp_close>
      break;
 40339fc:	00014d06 	br	4033f34 <tcp_usrreq+0x6e4>
      /* bind is quite different for IPv4 and v6, so we use two 
       * seperate pcbbind routines. so_domain was checked for 
       * validity way up in t_bind()
       */
#ifdef IP_V4
      if(inp->inp_socket->so_domain == AF_INET)
 4033a00:	e0bffb17 	ldw	r2,-20(fp)
 4033a04:	10800817 	ldw	r2,32(r2)
 4033a08:	10800517 	ldw	r2,20(r2)
 4033a0c:	10800098 	cmpnei	r2,r2,2
 4033a10:	1000051e 	bne	r2,zero,4033a28 <tcp_usrreq+0x1d8>
      {
         error = in_pcbbind(inp, nam);
 4033a14:	e13ffb17 	ldw	r4,-20(fp)
 4033a18:	e17ffe17 	ldw	r5,-8(fp)
 4033a1c:	40422840 	call	4042284 <in_pcbbind>
 4033a20:	e0bff915 	stw	r2,-28(fp)
         break;
 4033a24:	00014306 	br	4033f34 <tcp_usrreq+0x6e4>
      {
         error = ip6_pcbbind(inp, nam);
         break;
      }
#endif /* IP_V6 */
      dtrap();    /* not v4 or v6? */
 4033a28:	4025bb40 	call	4025bb4 <dtrap>
      error = EINVAL;
 4033a2c:	00800584 	movi	r2,22
 4033a30:	e0bff915 	stw	r2,-28(fp)
      break;
 4033a34:	00013f06 	br	4033f34 <tcp_usrreq+0x6e4>
   /*
    * Prepare to accept connections.
    */
   case PRU_LISTEN:
      if (inp->inp_lport == 0)
 4033a38:	e0bffb17 	ldw	r2,-20(fp)
 4033a3c:	1080078b 	ldhu	r2,30(r2)
 4033a40:	10bfffcc 	andi	r2,r2,65535
 4033a44:	1004c03a 	cmpne	r2,r2,zero
 4033a48:	1000041e 	bne	r2,zero,4033a5c <tcp_usrreq+0x20c>
         error = in_pcbbind(inp, (struct mbuf *)0);
 4033a4c:	e13ffb17 	ldw	r4,-20(fp)
 4033a50:	000b883a 	mov	r5,zero
 4033a54:	40422840 	call	4042284 <in_pcbbind>
 4033a58:	e0bff915 	stw	r2,-28(fp)
      if (error == 0)
 4033a5c:	e0bff917 	ldw	r2,-28(fp)
 4033a60:	1004c03a 	cmpne	r2,r2,zero
 4033a64:	1001331e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         tp->t_state = TCPS_LISTEN;
 4033a68:	e0fffa17 	ldw	r3,-24(fp)
 4033a6c:	00800044 	movi	r2,1
 4033a70:	18800215 	stw	r2,8(r3)
      break;
 4033a74:	00012f06 	br	4033f34 <tcp_usrreq+0x6e4>
    * Enter SYN_SENT state, and mark socket as connecting.
    * Start keep-alive timer, and seed output sequence space.
    * Send initial segment on connection.
    */
   case PRU_CONNECT:
      if (inp->inp_lport == 0) 
 4033a78:	e0bffb17 	ldw	r2,-20(fp)
 4033a7c:	1080078b 	ldhu	r2,30(r2)
 4033a80:	10bfffcc 	andi	r2,r2,65535
 4033a84:	1004c03a 	cmpne	r2,r2,zero
 4033a88:	1000071e 	bne	r2,zero,4033aa8 <tcp_usrreq+0x258>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbbind(inp, (struct mbuf *)0);
 4033a8c:	e13ffb17 	ldw	r4,-20(fp)
 4033a90:	000b883a 	mov	r5,zero
 4033a94:	40422840 	call	4042284 <in_pcbbind>
 4033a98:	e0bff915 	stw	r2,-28(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbbind(inp, (struct mbuf *)0);
#endif   /* end v6 only */

         if (error)
 4033a9c:	e0bff917 	ldw	r2,-28(fp)
 4033aa0:	1004c03a 	cmpne	r2,r2,zero
 4033aa4:	1001231e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
            break;
      }

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      error = in_pcbconnect(inp, nam);
 4033aa8:	e13ffb17 	ldw	r4,-20(fp)
 4033aac:	e17ffe17 	ldw	r5,-8(fp)
 4033ab0:	40424d80 	call	40424d8 <in_pcbconnect>
 4033ab4:	e0bff915 	stw	r2,-28(fp)
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
      error = ip6_pcbconnect(inp, nam);
#endif   /* end v6 only */

      if (error)
 4033ab8:	e0bff917 	ldw	r2,-28(fp)
 4033abc:	1004c03a 	cmpne	r2,r2,zero
 4033ac0:	10011c1e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         break;
      tp->t_template = tcp_template(tp);
 4033ac4:	e13ffa17 	ldw	r4,-24(fp)
 4033ac8:	40327280 	call	4032728 <tcp_template>
 4033acc:	1007883a 	mov	r3,r2
 4033ad0:	e0bffa17 	ldw	r2,-24(fp)
 4033ad4:	10c00c15 	stw	r3,48(r2)
      if (tp->t_template == 0) 
 4033ad8:	e0bffa17 	ldw	r2,-24(fp)
 4033adc:	10800c17 	ldw	r2,48(r2)
 4033ae0:	1004c03a 	cmpne	r2,r2,zero
 4033ae4:	1000051e 	bne	r2,zero,4033afc <tcp_usrreq+0x2ac>
      {

#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
         in_pcbdisconnect(inp);
 4033ae8:	e13ffb17 	ldw	r4,-20(fp)
 4033aec:	40426e80 	call	40426e8 <in_pcbdisconnect>
#endif   /* end dual mode code */
#else    /* no v4, v6 only */
         ip6_pcbdisconnect(inp);
#endif   /* end v6 only */

         error = ENOBUFS;
 4033af0:	00801a44 	movi	r2,105
 4033af4:	e0bff915 	stw	r2,-28(fp)
         break;
 4033af8:	00010e06 	br	4033f34 <tcp_usrreq+0x6e4>
      }

      soisconnecting(so);
 4033afc:	e13ffc17 	ldw	r4,-16(fp)
 4033b00:	402c75c0 	call	402c75c <soisconnecting>
      tcpstat.tcps_connattempt++;
 4033b04:	008101b4 	movhi	r2,1030
 4033b08:	10a37804 	addi	r2,r2,-29216
 4033b0c:	10800017 	ldw	r2,0(r2)
 4033b10:	10c00044 	addi	r3,r2,1
 4033b14:	008101b4 	movhi	r2,1030
 4033b18:	10a37804 	addi	r2,r2,-29216
 4033b1c:	10c00015 	stw	r3,0(r2)
      tp->t_state = TCPS_SYN_SENT;
 4033b20:	e0fffa17 	ldw	r3,-24(fp)
 4033b24:	00800084 	movi	r2,2
 4033b28:	18800215 	stw	r2,8(r3)
      tp->t_timer[TCPT_KEEP] = TCPTV_KEEP_INIT;
 4033b2c:	e0fffa17 	ldw	r3,-24(fp)
 4033b30:	00802584 	movi	r2,150
 4033b34:	18800515 	stw	r2,20(r3)
      tp->iss = tcp_iss; 
 4033b38:	00810174 	movhi	r2,1029
 4033b3c:	1081f104 	addi	r2,r2,1988
 4033b40:	10c00017 	ldw	r3,0(r2)
 4033b44:	e0bffa17 	ldw	r2,-24(fp)
 4033b48:	10c01315 	stw	r3,76(r2)
      tcp_iss += (tcp_seq)(TCP_ISSINCR/2);
 4033b4c:	00810174 	movhi	r2,1029
 4033b50:	1081f104 	addi	r2,r2,1988
 4033b54:	10c00017 	ldw	r3,0(r2)
 4033b58:	00be9fd4 	movui	r2,64127
 4033b5c:	1887883a 	add	r3,r3,r2
 4033b60:	00810174 	movhi	r2,1029
 4033b64:	1081f104 	addi	r2,r2,1988
 4033b68:	10c00015 	stw	r3,0(r2)
      tcp_sendseqinit(tp);
 4033b6c:	e0bffa17 	ldw	r2,-24(fp)
 4033b70:	10c01317 	ldw	r3,76(r2)
 4033b74:	e0bffa17 	ldw	r2,-24(fp)
 4033b78:	10c01015 	stw	r3,64(r2)
 4033b7c:	e0bffa17 	ldw	r2,-24(fp)
 4033b80:	10c01017 	ldw	r3,64(r2)
 4033b84:	e0bffa17 	ldw	r2,-24(fp)
 4033b88:	10c01a15 	stw	r3,104(r2)
 4033b8c:	e0bffa17 	ldw	r2,-24(fp)
 4033b90:	10c01a17 	ldw	r3,104(r2)
 4033b94:	e0bffa17 	ldw	r2,-24(fp)
 4033b98:	10c00f15 	stw	r3,60(r2)
 4033b9c:	e0bffa17 	ldw	r2,-24(fp)
 4033ba0:	10c00f17 	ldw	r3,60(r2)
 4033ba4:	e0bffa17 	ldw	r2,-24(fp)
 4033ba8:	10c00e15 	stw	r3,56(r2)
      error = tcp_output(tp);
 4033bac:	e13ffa17 	ldw	r4,-24(fp)
 4033bb0:	40313700 	call	4031370 <tcp_output>
 4033bb4:	e0bff915 	stw	r2,-28(fp)
      if (!error)
 4033bb8:	e0bff917 	ldw	r2,-28(fp)
 4033bbc:	1004c03a 	cmpne	r2,r2,zero
 4033bc0:	1000dc1e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         TCP_MIB_INC(tcpActiveOpens);     /* keep MIB stats */
 4033bc4:	008101b4 	movhi	r2,1030
 4033bc8:	10a34a04 	addi	r2,r2,-29400
 4033bcc:	10800417 	ldw	r2,16(r2)
 4033bd0:	10c00044 	addi	r3,r2,1
 4033bd4:	008101b4 	movhi	r2,1030
 4033bd8:	10a34a04 	addi	r2,r2,-29400
 4033bdc:	10c00415 	stw	r3,16(r2)
      break;
 4033be0:	0000d406 	br	4033f34 <tcp_usrreq+0x6e4>

   /*
    * Create a TCP connection between two sockets.
    */
   case PRU_CONNECT2:
      error = EOPNOTSUPP;
 4033be4:	008017c4 	movi	r2,95
 4033be8:	e0bff915 	stw	r2,-28(fp)
      break;
 4033bec:	0000d106 	br	4033f34 <tcp_usrreq+0x6e4>
    * when peer sends FIN and acks ours.
    *
    * SHOULD IMPLEMENT LATER PRU_CONNECT VIA REALLOC TCPCB.
    */
   case PRU_DISCONNECT:
      SETTP(tp, tcp_disconnect(tp));
 4033bf0:	e13ffa17 	ldw	r4,-24(fp)
 4033bf4:	40340880 	call	4034088 <tcp_disconnect>
      break;
 4033bf8:	0000ce06 	br	4033f34 <tcp_usrreq+0x6e4>
    * done at higher levels; just return the address
    * of the peer, storing through addr.
    */
   case PRU_ACCEPT: 
   {
         struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 4033bfc:	e0bffe17 	ldw	r2,-8(fp)
 4033c00:	10800317 	ldw	r2,12(r2)
 4033c04:	e0bff715 	stw	r2,-36(fp)
            IP6CPY(&sin6->sin6_addr, &inp->ip6_faddr);
         }
#endif

#ifdef IP_V4
         if (so->so_domain == AF_INET)
 4033c08:	e0bffc17 	ldw	r2,-16(fp)
 4033c0c:	10800517 	ldw	r2,20(r2)
 4033c10:	10800098 	cmpnei	r2,r2,2
 4033c14:	10000e1e 	bne	r2,zero,4033c50 <tcp_usrreq+0x400>
         {
            nam->m_len = sizeof (struct sockaddr_in);
 4033c18:	e0fffe17 	ldw	r3,-8(fp)
 4033c1c:	00800404 	movi	r2,16
 4033c20:	18800215 	stw	r2,8(r3)
            sin->sin_family = AF_INET;
 4033c24:	e0fff717 	ldw	r3,-36(fp)
 4033c28:	00800084 	movi	r2,2
 4033c2c:	1880000d 	sth	r2,0(r3)
            sin->sin_port = inp->inp_fport;
 4033c30:	e0bffb17 	ldw	r2,-20(fp)
 4033c34:	10c0070b 	ldhu	r3,28(r2)
 4033c38:	e0bff717 	ldw	r2,-36(fp)
 4033c3c:	10c0008d 	sth	r3,2(r2)
            sin->sin_addr = inp->inp_faddr;
 4033c40:	e0bffb17 	ldw	r2,-20(fp)
 4033c44:	10c00317 	ldw	r3,12(r2)
 4033c48:	e0bff717 	ldw	r2,-36(fp)
 4033c4c:	10c00115 	stw	r3,4(r2)
         }
#endif
         if ( !(so->so_domain == AF_INET) &&
 4033c50:	e0bffc17 	ldw	r2,-16(fp)
 4033c54:	10800517 	ldw	r2,20(r2)
 4033c58:	108000a0 	cmpeqi	r2,r2,2
 4033c5c:	10000a1e 	bne	r2,zero,4033c88 <tcp_usrreq+0x438>
 4033c60:	e0bffc17 	ldw	r2,-16(fp)
 4033c64:	10800517 	ldw	r2,20(r2)
 4033c68:	108000e0 	cmpeqi	r2,r2,3
 4033c6c:	1000061e 	bne	r2,zero,4033c88 <tcp_usrreq+0x438>
              !(so->so_domain == AF_INET6)
             )
         {
            dprintf("*** PRU_ACCEPT bad domain = %d\n", so->so_domain);
 4033c70:	e0bffc17 	ldw	r2,-16(fp)
 4033c74:	11400517 	ldw	r5,20(r2)
 4033c78:	01010174 	movhi	r4,1029
 4033c7c:	212e8f04 	addi	r4,r4,-17860
 4033c80:	400207c0 	call	400207c <printf>
            dtrap();
 4033c84:	4025bb40 	call	4025bb4 <dtrap>
         } 
         TCP_MIB_INC(tcpPassiveOpens);    /* keep MIB stats */
 4033c88:	008101b4 	movhi	r2,1030
 4033c8c:	10a34a04 	addi	r2,r2,-29400
 4033c90:	10800517 	ldw	r2,20(r2)
 4033c94:	10c00044 	addi	r3,r2,1
 4033c98:	008101b4 	movhi	r2,1030
 4033c9c:	10a34a04 	addi	r2,r2,-29400
 4033ca0:	10c00515 	stw	r3,20(r2)
         break;
 4033ca4:	0000a306 	br	4033f34 <tcp_usrreq+0x6e4>

   /*
    * Mark the connection as being incapable of further output.
    */
   case PRU_SHUTDOWN:
      socantsendmore(so);
 4033ca8:	e13ffc17 	ldw	r4,-16(fp)
 4033cac:	402cdf40 	call	402cdf4 <socantsendmore>
      tp = tcp_usrclosed(tp);
 4033cb0:	e13ffa17 	ldw	r4,-24(fp)
 4033cb4:	403415c0 	call	403415c <tcp_usrclosed>
 4033cb8:	e0bffa15 	stw	r2,-24(fp)
      if (tp)
 4033cbc:	e0bffa17 	ldw	r2,-24(fp)
 4033cc0:	1005003a 	cmpeq	r2,r2,zero
 4033cc4:	10009b1e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         error = tcp_output(tp);
 4033cc8:	e13ffa17 	ldw	r4,-24(fp)
 4033ccc:	40313700 	call	4031370 <tcp_output>
 4033cd0:	e0bff915 	stw	r2,-28(fp)
      break;
 4033cd4:	00009706 	br	4033f34 <tcp_usrreq+0x6e4>

   /*
    * After a receive, possibly send window update to peer.
    */
   case PRU_RCVD:
      (void) tcp_output(tp);
 4033cd8:	e13ffa17 	ldw	r4,-24(fp)
 4033cdc:	40313700 	call	4031370 <tcp_output>
      break;
 4033ce0:	00009406 	br	4033f34 <tcp_usrreq+0x6e4>
   /*
    * Do a send by putting data in output queue and updating urgent
    * marker if URG set.  Possibly send more data.
    */
   case PRU_SEND:
      if (so->so_pcb == NULL)
 4033ce4:	e0bffc17 	ldw	r2,-16(fp)
 4033ce8:	10800117 	ldw	r2,4(r2)
 4033cec:	1004c03a 	cmpne	r2,r2,zero
 4033cf0:	1000031e 	bne	r2,zero,4033d00 <tcp_usrreq+0x4b0>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
 4033cf4:	00800804 	movi	r2,32
 4033cf8:	e0bff915 	stw	r2,-28(fp)
         break;
 4033cfc:	00008d06 	br	4033f34 <tcp_usrreq+0x6e4>
      }
      sbappend(&so->so_snd, m);
 4033d00:	e0bffc17 	ldw	r2,-16(fp)
 4033d04:	11001204 	addi	r4,r2,72
 4033d08:	e17ffd17 	ldw	r5,-12(fp)
 4033d0c:	402d0f80 	call	402d0f8 <sbappend>
      error = tcp_output(tp);
 4033d10:	e13ffa17 	ldw	r4,-24(fp)
 4033d14:	40313700 	call	4031370 <tcp_output>
 4033d18:	e0bff915 	stw	r2,-28(fp)
      if (error == ENOBUFS)
 4033d1c:	e0bff917 	ldw	r2,-28(fp)
 4033d20:	10801a58 	cmpnei	r2,r2,105
 4033d24:	1000831e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 4033d28:	e0bffc17 	ldw	r2,-16(fp)
 4033d2c:	11001204 	addi	r4,r2,72
 4033d30:	e17ffd17 	ldw	r5,-12(fp)
 4033d34:	402d8d00 	call	402d8d0 <sbdropend>
      break;
 4033d38:	00007e06 	br	4033f34 <tcp_usrreq+0x6e4>

   /*
    * Abort the TCP.
    */
   case PRU_ABORT:
      SETTP(tp, tcp_drop(tp, ECONNABORTED));
 4033d3c:	e13ffa17 	ldw	r4,-24(fp)
 4033d40:	01401c44 	movi	r5,113
 4033d44:	4032de00 	call	4032de0 <tcp_drop>
      break;
 4033d48:	00007a06 	br	4033f34 <tcp_usrreq+0x6e4>

   case PRU_SENSE:
      /*      ((struct stat *) m)->st_blksize = so->so_snd.sb_hiwat; */
      dtrap();    /* does this ever happen? */
 4033d4c:	4025bb40 	call	4025bb4 <dtrap>
      return (0);
 4033d50:	e03fff15 	stw	zero,-4(fp)
 4033d54:	00007906 	br	4033f3c <tcp_usrreq+0x6ec>

   case PRU_RCVOOB:
      if ((so->so_oobmark == 0 &&
 4033d58:	e0bffc17 	ldw	r2,-16(fp)
 4033d5c:	10801a17 	ldw	r2,104(r2)
 4033d60:	1004c03a 	cmpne	r2,r2,zero
 4033d64:	1000061e 	bne	r2,zero,4033d80 <tcp_usrreq+0x530>
 4033d68:	e0bffc17 	ldw	r2,-16(fp)
 4033d6c:	1080088b 	ldhu	r2,34(r2)
 4033d70:	10bfffcc 	andi	r2,r2,65535
 4033d74:	1080100c 	andi	r2,r2,64
 4033d78:	1005003a 	cmpeq	r2,r2,zero
 4033d7c:	10000b1e 	bne	r2,zero,4033dac <tcp_usrreq+0x55c>
 4033d80:	e0bffc17 	ldw	r2,-16(fp)
 4033d84:	10800417 	ldw	r2,16(r2)
 4033d88:	1080400c 	andi	r2,r2,256
 4033d8c:	1004c03a 	cmpne	r2,r2,zero
 4033d90:	1000061e 	bne	r2,zero,4033dac <tcp_usrreq+0x55c>
 4033d94:	e0bffa17 	ldw	r2,-24(fp)
 4033d98:	10802403 	ldbu	r2,144(r2)
 4033d9c:	10803fcc 	andi	r2,r2,255
 4033da0:	1080008c 	andi	r2,r2,2
 4033da4:	1005003a 	cmpeq	r2,r2,zero
 4033da8:	1000031e 	bne	r2,zero,4033db8 <tcp_usrreq+0x568>
#ifdef SO_OOBINLINE
       so->so_options & SO_OOBINLINE ||
#endif
       tp->t_oobflags & TCPOOB_HADDATA) 
       {
         error = EINVAL;
 4033dac:	00800584 	movi	r2,22
 4033db0:	e0bff915 	stw	r2,-28(fp)
         break;
 4033db4:	00005f06 	br	4033f34 <tcp_usrreq+0x6e4>
      }
      if ((tp->t_oobflags & TCPOOB_HAVEDATA) == 0) 
 4033db8:	e0bffa17 	ldw	r2,-24(fp)
 4033dbc:	10802403 	ldbu	r2,144(r2)
 4033dc0:	10803fcc 	andi	r2,r2,255
 4033dc4:	1080004c 	andi	r2,r2,1
 4033dc8:	1004c03a 	cmpne	r2,r2,zero
 4033dcc:	1000031e 	bne	r2,zero,4033ddc <tcp_usrreq+0x58c>
      {
         error = EWOULDBLOCK;
 4033dd0:	008002c4 	movi	r2,11
 4033dd4:	e0bff915 	stw	r2,-28(fp)
         break;
 4033dd8:	00005606 	br	4033f34 <tcp_usrreq+0x6e4>
      }
      m->m_len = 1;
 4033ddc:	e0fffd17 	ldw	r3,-12(fp)
 4033de0:	00800044 	movi	r2,1
 4033de4:	18800215 	stw	r2,8(r3)
      *mtod(m, char *) = tp->t_iobc;
 4033de8:	e0bffd17 	ldw	r2,-12(fp)
 4033dec:	10c00317 	ldw	r3,12(r2)
 4033df0:	e0bffa17 	ldw	r2,-24(fp)
 4033df4:	10802443 	ldbu	r2,145(r2)
 4033df8:	18800005 	stb	r2,0(r3)
      if ((MBUF2LONG(nam) & MSG_PEEK) == 0)
 4033dfc:	e0bffe17 	ldw	r2,-8(fp)
 4033e00:	1080008c 	andi	r2,r2,2
 4033e04:	1004c03a 	cmpne	r2,r2,zero
 4033e08:	10004a1e 	bne	r2,zero,4033f34 <tcp_usrreq+0x6e4>
         tp->t_oobflags ^= (TCPOOB_HAVEDATA | TCPOOB_HADDATA);
 4033e0c:	e0bffa17 	ldw	r2,-24(fp)
 4033e10:	10802403 	ldbu	r2,144(r2)
 4033e14:	108000dc 	xori	r2,r2,3
 4033e18:	1007883a 	mov	r3,r2
 4033e1c:	e0bffa17 	ldw	r2,-24(fp)
 4033e20:	10c02405 	stb	r3,144(r2)
      break;
 4033e24:	00004306 	br	4033f34 <tcp_usrreq+0x6e4>

   case PRU_SENDOOB:
      if (so->so_pcb == NULL)
 4033e28:	e0bffc17 	ldw	r2,-16(fp)
 4033e2c:	10800117 	ldw	r2,4(r2)
 4033e30:	1004c03a 	cmpne	r2,r2,zero
 4033e34:	1000031e 	bne	r2,zero,4033e44 <tcp_usrreq+0x5f4>
      {                    /* Return EPIPE error if socket is not connected */
         error = EPIPE;
 4033e38:	00800804 	movi	r2,32
 4033e3c:	e0bff915 	stw	r2,-28(fp)
         break;
 4033e40:	00003c06 	br	4033f34 <tcp_usrreq+0x6e4>
      }
      if (sbspace(&so->so_snd) == 0) 
 4033e44:	e0bffc17 	ldw	r2,-16(fp)
 4033e48:	10801317 	ldw	r2,76(r2)
 4033e4c:	1007883a 	mov	r3,r2
 4033e50:	e0bffc17 	ldw	r2,-16(fp)
 4033e54:	10801217 	ldw	r2,72(r2)
 4033e58:	1885c83a 	sub	r2,r3,r2
 4033e5c:	1004803a 	cmplt	r2,r2,zero
 4033e60:	1000051e 	bne	r2,zero,4033e78 <tcp_usrreq+0x628>
 4033e64:	e0bffc17 	ldw	r2,-16(fp)
 4033e68:	10c01317 	ldw	r3,76(r2)
 4033e6c:	e0bffc17 	ldw	r2,-16(fp)
 4033e70:	10801217 	ldw	r2,72(r2)
 4033e74:	1880051e 	bne	r3,r2,4033e8c <tcp_usrreq+0x63c>
      {
         m_freem(m);
 4033e78:	e13ffd17 	ldw	r4,-12(fp)
 4033e7c:	4026c900 	call	4026c90 <m_freem>
         error = ENOBUFS;
 4033e80:	00801a44 	movi	r2,105
 4033e84:	e0bff915 	stw	r2,-28(fp)
         break;
 4033e88:	00002a06 	br	4033f34 <tcp_usrreq+0x6e4>
       * of urgent data.  We continue, however,
       * to consider it to indicate the first octet
       * of data past the urgent section.
       * Otherwise, snd_up should be one lower.
       */
      sbappend(&so->so_snd, m);
 4033e8c:	e0bffc17 	ldw	r2,-16(fp)
 4033e90:	11001204 	addi	r4,r2,72
 4033e94:	e17ffd17 	ldw	r5,-12(fp)
 4033e98:	402d0f80 	call	402d0f8 <sbappend>
      tp->snd_up = tp->snd_una + so->so_snd.sb_cc;
 4033e9c:	e0bffa17 	ldw	r2,-24(fp)
 4033ea0:	10c00e17 	ldw	r3,56(r2)
 4033ea4:	e0bffc17 	ldw	r2,-16(fp)
 4033ea8:	10801217 	ldw	r2,72(r2)
 4033eac:	1887883a 	add	r3,r3,r2
 4033eb0:	e0bffa17 	ldw	r2,-24(fp)
 4033eb4:	10c01015 	stw	r3,64(r2)
      tp->t_force = 1;
 4033eb8:	e0fffa17 	ldw	r3,-24(fp)
 4033ebc:	00800044 	movi	r2,1
 4033ec0:	18800a85 	stb	r2,42(r3)
      error = tcp_output(tp);
 4033ec4:	e13ffa17 	ldw	r4,-24(fp)
 4033ec8:	40313700 	call	4031370 <tcp_output>
 4033ecc:	e0bff915 	stw	r2,-28(fp)
      if (error == ENOBUFS)
 4033ed0:	e0bff917 	ldw	r2,-28(fp)
 4033ed4:	10801a58 	cmpnei	r2,r2,105
 4033ed8:	1000041e 	bne	r2,zero,4033eec <tcp_usrreq+0x69c>
         sbdropend(&so->so_snd,m);  /* Remove data from socket buffer */
 4033edc:	e0bffc17 	ldw	r2,-16(fp)
 4033ee0:	11001204 	addi	r4,r2,72
 4033ee4:	e17ffd17 	ldw	r5,-12(fp)
 4033ee8:	402d8d00 	call	402d8d0 <sbdropend>
      tp->t_force = 0;
 4033eec:	e0bffa17 	ldw	r2,-24(fp)
 4033ef0:	10000a85 	stb	zero,42(r2)
      break;
 4033ef4:	00000f06 	br	4033f34 <tcp_usrreq+0x6e4>
   case PRU_SOCKADDR:

   /* sockaddr and peeraddr have to switch based on IP type */
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setsockaddr(inp, nam);
 4033ef8:	e13ffb17 	ldw	r4,-20(fp)
 4033efc:	e17ffe17 	ldw	r5,-8(fp)
 4033f00:	40427480 	call	4042748 <in_setsockaddr>
         in_setsockaddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setsockaddr(inp, nam);
#endif
      break;         
 4033f04:	00000b06 	br	4033f34 <tcp_usrreq+0x6e4>

   case PRU_PEERADDR:
#ifdef IP_V4
#ifndef IP_V6  /* v4 only */
      in_setpeeraddr(inp, nam);
 4033f08:	e13ffb17 	ldw	r4,-20(fp)
 4033f0c:	e17ffe17 	ldw	r5,-8(fp)
 4033f10:	40427c40 	call	40427c4 <in_setpeeraddr>
         in_setpeeraddr(inp, nam);
#endif   /* dual mode */
#else    /* IP_V6 */
         ip6_setpeeraddr(inp, nam);
#endif
      break;
 4033f14:	00000706 	br	4033f34 <tcp_usrreq+0x6e4>

   case PRU_SLOWTIMO:
      SETTP(tp, tcp_timers(tp, (int)MBUF2LONG(nam)));
 4033f18:	e17ffe17 	ldw	r5,-8(fp)
 4033f1c:	e13ffa17 	ldw	r4,-24(fp)
 4033f20:	40333b40 	call	40333b4 <tcp_timers>
#ifdef DO_TCPTRACE
      req |= (long)nam << 8;        /* for debug's sake */
#endif
      break;
 4033f24:	00000306 	br	4033f34 <tcp_usrreq+0x6e4>

      default:
      panic("tcp_usrreq");
 4033f28:	01010174 	movhi	r4,1029
 4033f2c:	212e9704 	addi	r4,r4,-17828
 4033f30:	4020e100 	call	4020e10 <panic>
#ifdef DO_TCPTRACE
   if (tp && (so->so_options & SO_DEBUG))
      tcp_trace("usrreq: state: %d, tcpcb: %x, req: %d",
    ostate, tp, req);
#endif
   return (error);
 4033f34:	e0bff917 	ldw	r2,-28(fp)
 4033f38:	e0bfff15 	stw	r2,-4(fp)
 4033f3c:	e0bfff17 	ldw	r2,-4(fp)
}
 4033f40:	e037883a 	mov	sp,fp
 4033f44:	dfc00117 	ldw	ra,4(sp)
 4033f48:	df000017 	ldw	fp,0(sp)
 4033f4c:	dec00204 	addi	sp,sp,8
 4033f50:	f800283a 	ret

04033f54 <tcp_attach>:
 * RETURNS: 0 if OK, or nonzero error code.
 */

int
tcp_attach(struct socket * so)
{
 4033f54:	defff804 	addi	sp,sp,-32
 4033f58:	dfc00715 	stw	ra,28(sp)
 4033f5c:	df000615 	stw	fp,24(sp)
 4033f60:	df000604 	addi	fp,sp,24
 4033f64:	e13ffe15 	stw	r4,-8(fp)
   struct tcpcb * tp;
   struct inpcb * inp;
   int   error;

   if (so->so_snd.sb_hiwat == 0 || so->so_rcv.sb_hiwat == 0) 
 4033f68:	e0bffe17 	ldw	r2,-8(fp)
 4033f6c:	10801317 	ldw	r2,76(r2)
 4033f70:	1005003a 	cmpeq	r2,r2,zero
 4033f74:	1000041e 	bne	r2,zero,4033f88 <tcp_attach+0x34>
 4033f78:	e0bffe17 	ldw	r2,-8(fp)
 4033f7c:	10800b17 	ldw	r2,44(r2)
 4033f80:	1004c03a 	cmpne	r2,r2,zero
 4033f84:	10000b1e 	bne	r2,zero,4033fb4 <tcp_attach+0x60>
   {
      error = soreserve(so, tcp_sendspace, tcp_recvspace);
 4033f88:	d1603d17 	ldw	r5,-32524(gp)
 4033f8c:	d1a03e17 	ldw	r6,-32520(gp)
 4033f90:	e13ffe17 	ldw	r4,-8(fp)
 4033f94:	402cfd00 	call	402cfd0 <soreserve>
 4033f98:	e0bffb15 	stw	r2,-20(fp)
      if (error)
 4033f9c:	e0bffb17 	ldw	r2,-20(fp)
 4033fa0:	1005003a 	cmpeq	r2,r2,zero
 4033fa4:	1000031e 	bne	r2,zero,4033fb4 <tcp_attach+0x60>
         return (error);
 4033fa8:	e0bffb17 	ldw	r2,-20(fp)
 4033fac:	e0bfff15 	stw	r2,-4(fp)
 4033fb0:	00002f06 	br	4034070 <tcp_attach+0x11c>
   }
   error = in_pcballoc(so, &tcb);
 4033fb4:	e13ffe17 	ldw	r4,-8(fp)
 4033fb8:	014101b4 	movhi	r5,1030
 4033fbc:	29636d04 	addi	r5,r5,-29260
 4033fc0:	404219c0 	call	404219c <in_pcballoc>
 4033fc4:	e0bffb15 	stw	r2,-20(fp)
   if (error)
 4033fc8:	e0bffb17 	ldw	r2,-20(fp)
 4033fcc:	1005003a 	cmpeq	r2,r2,zero
 4033fd0:	1000031e 	bne	r2,zero,4033fe0 <tcp_attach+0x8c>
      return (error);
 4033fd4:	e0bffb17 	ldw	r2,-20(fp)
 4033fd8:	e0bfff15 	stw	r2,-4(fp)
 4033fdc:	00002406 	br	4034070 <tcp_attach+0x11c>
   inp = sotoinpcb(so);
 4033fe0:	e0bffe17 	ldw	r2,-8(fp)
 4033fe4:	10800117 	ldw	r2,4(r2)
 4033fe8:	e0bffc15 	stw	r2,-16(fp)
   tp = tcp_newtcpcb(inp);
 4033fec:	e13ffc17 	ldw	r4,-16(fp)
 4033ff0:	4032cc80 	call	4032cc8 <tcp_newtcpcb>
 4033ff4:	e0bffd15 	stw	r2,-12(fp)
   if (tp == 0) 
 4033ff8:	e0bffd17 	ldw	r2,-12(fp)
 4033ffc:	1004c03a 	cmpne	r2,r2,zero
 4034000:	1000181e 	bne	r2,zero,4034064 <tcp_attach+0x110>
   {
      int   nofd  =  so->so_state   &  SS_NOFDREF; /* XXX */
 4034004:	e0bffe17 	ldw	r2,-8(fp)
 4034008:	1080088b 	ldhu	r2,34(r2)
 403400c:	10bfffcc 	andi	r2,r2,65535
 4034010:	1080004c 	andi	r2,r2,1
 4034014:	e0bffa15 	stw	r2,-24(fp)

      so->so_state &= ~SS_NOFDREF;     /* don't free the socket yet */
 4034018:	e0bffe17 	ldw	r2,-8(fp)
 403401c:	10c0088b 	ldhu	r3,34(r2)
 4034020:	00bfff84 	movi	r2,-2
 4034024:	1884703a 	and	r2,r3,r2
 4034028:	1007883a 	mov	r3,r2
 403402c:	e0bffe17 	ldw	r2,-8(fp)
 4034030:	10c0088d 	sth	r3,34(r2)
      in_pcbdetach(inp);
 4034034:	e13ffc17 	ldw	r4,-16(fp)
 4034038:	40422300 	call	4042230 <in_pcbdetach>
      so->so_state |= nofd;
 403403c:	e0bffe17 	ldw	r2,-8(fp)
 4034040:	10c0088b 	ldhu	r3,34(r2)
 4034044:	e0bffa17 	ldw	r2,-24(fp)
 4034048:	1884b03a 	or	r2,r3,r2
 403404c:	1007883a 	mov	r3,r2
 4034050:	e0bffe17 	ldw	r2,-8(fp)
 4034054:	10c0088d 	sth	r3,34(r2)
      return (ENOBUFS);
 4034058:	00801a44 	movi	r2,105
 403405c:	e0bfff15 	stw	r2,-4(fp)
 4034060:	00000306 	br	4034070 <tcp_attach+0x11c>
   }
   tp->t_state = TCPS_CLOSED;
 4034064:	e0bffd17 	ldw	r2,-12(fp)
 4034068:	10000215 	stw	zero,8(r2)
   return (0);
 403406c:	e03fff15 	stw	zero,-4(fp)
 4034070:	e0bfff17 	ldw	r2,-4(fp)
}
 4034074:	e037883a 	mov	sp,fp
 4034078:	dfc00117 	ldw	ra,4(sp)
 403407c:	df000017 	ldw	fp,0(sp)
 4034080:	dec00204 	addi	sp,sp,8
 4034084:	f800283a 	ret

04034088 <tcp_disconnect>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_disconnect(struct tcpcb * tp)
{
 4034088:	defffc04 	addi	sp,sp,-16
 403408c:	dfc00315 	stw	ra,12(sp)
 4034090:	df000215 	stw	fp,8(sp)
 4034094:	df000204 	addi	fp,sp,8
 4034098:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  tp->t_inpcb->inp_socket;
 403409c:	e0bfff17 	ldw	r2,-4(fp)
 40340a0:	10800d17 	ldw	r2,52(r2)
 40340a4:	10800817 	ldw	r2,32(r2)
 40340a8:	e0bffe15 	stw	r2,-8(fp)

   if (tp->t_state < TCPS_ESTABLISHED)
 40340ac:	e0bfff17 	ldw	r2,-4(fp)
 40340b0:	10800217 	ldw	r2,8(r2)
 40340b4:	10800108 	cmpgei	r2,r2,4
 40340b8:	1000041e 	bne	r2,zero,40340cc <tcp_disconnect+0x44>
      tp = tcp_close(tp);
 40340bc:	e13fff17 	ldw	r4,-4(fp)
 40340c0:	4032e8c0 	call	4032e8c <tcp_close>
 40340c4:	e0bfff15 	stw	r2,-4(fp)
 40340c8:	00001e06 	br	4034144 <tcp_disconnect+0xbc>
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 40340cc:	e0bffe17 	ldw	r2,-8(fp)
 40340d0:	10800417 	ldw	r2,16(r2)
 40340d4:	1080200c 	andi	r2,r2,128
 40340d8:	1005003a 	cmpeq	r2,r2,zero
 40340dc:	10000c1e 	bne	r2,zero,4034110 <tcp_disconnect+0x88>
 40340e0:	e0bffe17 	ldw	r2,-8(fp)
 40340e4:	1080080b 	ldhu	r2,32(r2)
 40340e8:	10bfffcc 	andi	r2,r2,65535
 40340ec:	10a0001c 	xori	r2,r2,32768
 40340f0:	10a00004 	addi	r2,r2,-32768
 40340f4:	1004c03a 	cmpne	r2,r2,zero
 40340f8:	1000051e 	bne	r2,zero,4034110 <tcp_disconnect+0x88>
      tp = tcp_drop(tp, 0);
 40340fc:	e13fff17 	ldw	r4,-4(fp)
 4034100:	000b883a 	mov	r5,zero
 4034104:	4032de00 	call	4032de0 <tcp_drop>
 4034108:	e0bfff15 	stw	r2,-4(fp)
{
   struct socket *   so =  tp->t_inpcb->inp_socket;

   if (tp->t_state < TCPS_ESTABLISHED)
      tp = tcp_close(tp);
   else if ((so->so_options & SO_LINGER) && so->so_linger == 0)
 403410c:	00000d06 	br	4034144 <tcp_disconnect+0xbc>
      tp = tcp_drop(tp, 0);
   else 
   {
      soisdisconnecting(so);
 4034110:	e13ffe17 	ldw	r4,-8(fp)
 4034114:	402c8c40 	call	402c8c4 <soisdisconnecting>
      sbflush(&so->so_rcv);
 4034118:	e0bffe17 	ldw	r2,-8(fp)
 403411c:	11000a04 	addi	r4,r2,40
 4034120:	402d6700 	call	402d670 <sbflush>
      tp = tcp_usrclosed(tp);
 4034124:	e13fff17 	ldw	r4,-4(fp)
 4034128:	403415c0 	call	403415c <tcp_usrclosed>
 403412c:	e0bfff15 	stw	r2,-4(fp)
      if (tp)
 4034130:	e0bfff17 	ldw	r2,-4(fp)
 4034134:	1005003a 	cmpeq	r2,r2,zero
 4034138:	1000021e 	bne	r2,zero,4034144 <tcp_disconnect+0xbc>
         (void) tcp_output(tp);
 403413c:	e13fff17 	ldw	r4,-4(fp)
 4034140:	40313700 	call	4031370 <tcp_output>
   }
   return (tp);
 4034144:	e0bfff17 	ldw	r2,-4(fp)
}
 4034148:	e037883a 	mov	sp,fp
 403414c:	dfc00117 	ldw	ra,4(sp)
 4034150:	df000017 	ldw	fp,0(sp)
 4034154:	dec00204 	addi	sp,sp,8
 4034158:	f800283a 	ret

0403415c <tcp_usrclosed>:
 * RETURNS: 
 */

struct tcpcb * 
tcp_usrclosed(struct tcpcb * tp)
{
 403415c:	defffc04 	addi	sp,sp,-16
 4034160:	dfc00315 	stw	ra,12(sp)
 4034164:	df000215 	stw	fp,8(sp)
 4034168:	df000204 	addi	fp,sp,8
 403416c:	e13ffe15 	stw	r4,-8(fp)

   switch (tp->t_state) 
 4034170:	e0bffe17 	ldw	r2,-8(fp)
 4034174:	10800217 	ldw	r2,8(r2)
 4034178:	e0bfff15 	stw	r2,-4(fp)
 403417c:	e0ffff17 	ldw	r3,-4(fp)
 4034180:	188001a8 	cmpgeui	r2,r3,6
 4034184:	10001c1e 	bne	r2,zero,40341f8 <tcp_usrclosed+0x9c>
 4034188:	e13fff17 	ldw	r4,-4(fp)
 403418c:	e13fff17 	ldw	r4,-4(fp)
 4034190:	2105883a 	add	r2,r4,r4
 4034194:	1087883a 	add	r3,r2,r2
 4034198:	008100f4 	movhi	r2,1027
 403419c:	10906b04 	addi	r2,r2,16812
 40341a0:	1885883a 	add	r2,r3,r2
 40341a4:	10800017 	ldw	r2,0(r2)
 40341a8:	1000683a 	jmp	r2
 40341ac:	040341c4 	movi	r16,3335
 40341b0:	040341c4 	movi	r16,3335
 40341b4:	040341c4 	movi	r16,3335
 40341b8:	040341dc 	xori	r16,zero,3335
 40341bc:	040341dc 	xori	r16,zero,3335
 40341c0:	040341ec 	andhi	r16,zero,3335
   {
   case TCPS_CLOSED:
   case TCPS_LISTEN:
   case TCPS_SYN_SENT:
      tp->t_state = TCPS_CLOSED;
 40341c4:	e0bffe17 	ldw	r2,-8(fp)
 40341c8:	10000215 	stw	zero,8(r2)
      tp = tcp_close(tp);
 40341cc:	e13ffe17 	ldw	r4,-8(fp)
 40341d0:	4032e8c0 	call	4032e8c <tcp_close>
 40341d4:	e0bffe15 	stw	r2,-8(fp)
      break;
 40341d8:	00000706 	br	40341f8 <tcp_usrclosed+0x9c>

   case TCPS_SYN_RECEIVED:
   case TCPS_ESTABLISHED:
      tp->t_state = TCPS_FIN_WAIT_1;
 40341dc:	e0fffe17 	ldw	r3,-8(fp)
 40341e0:	00800184 	movi	r2,6
 40341e4:	18800215 	stw	r2,8(r3)
      break;
 40341e8:	00000306 	br	40341f8 <tcp_usrclosed+0x9c>

   case TCPS_CLOSE_WAIT:
      tp->t_state = TCPS_LAST_ACK;
 40341ec:	e0fffe17 	ldw	r3,-8(fp)
 40341f0:	00800204 	movi	r2,8
 40341f4:	18800215 	stw	r2,8(r3)
      break;
   }
   if (tp && tp->t_state >= TCPS_FIN_WAIT_2)
 40341f8:	e0bffe17 	ldw	r2,-8(fp)
 40341fc:	1005003a 	cmpeq	r2,r2,zero
 4034200:	1000081e 	bne	r2,zero,4034224 <tcp_usrclosed+0xc8>
 4034204:	e0bffe17 	ldw	r2,-8(fp)
 4034208:	10800217 	ldw	r2,8(r2)
 403420c:	10800250 	cmplti	r2,r2,9
 4034210:	1000041e 	bne	r2,zero,4034224 <tcp_usrclosed+0xc8>
      soisdisconnected(tp->t_inpcb->inp_socket);
 4034214:	e0bffe17 	ldw	r2,-8(fp)
 4034218:	10800d17 	ldw	r2,52(r2)
 403421c:	11000817 	ldw	r4,32(r2)
 4034220:	402c9500 	call	402c950 <soisdisconnected>
   return (tp);
 4034224:	e0bffe17 	ldw	r2,-8(fp)
}
 4034228:	e037883a 	mov	sp,fp
 403422c:	dfc00117 	ldw	ra,4(sp)
 4034230:	df000017 	ldw	fp,0(sp)
 4034234:	dec00204 	addi	sp,sp,8
 4034238:	f800283a 	ret

0403423c <tcpinit>:
 * RETURNS: 0 if OK, else one of the ENP_ error codes
 */

int
tcpinit(void)
{
 403423c:	defffc04 	addi	sp,sp,-16
 4034240:	dfc00315 	stw	ra,12(sp)
 4034244:	df000215 	stw	fp,8(sp)
 4034248:	df000204 	addi	fp,sp,8
   tcp_sendspace = (TCP_MSS) * 2;
   tcp_recvspace = (TCP_MSS) * 2;
   TCPTV_MSL =    (4 * PR_SLOWHZ);     /* max seg lifetime default */
#endif

   e = nptcp_init();    /* call the NetPort init in nptcp.c */
 403424c:	40273b40 	call	40273b4 <nptcp_init>
 4034250:	e0bffe15 	stw	r2,-8(fp)
   if (e)
 4034254:	e0bffe17 	ldw	r2,-8(fp)
 4034258:	1005003a 	cmpeq	r2,r2,zero
 403425c:	1000031e 	bne	r2,zero,403426c <tcpinit+0x30>
      return e;
 4034260:	e0bffe17 	ldw	r2,-8(fp)
 4034264:	e0bfff15 	stw	r2,-4(fp)
 4034268:	00000106 	br	4034270 <tcpinit+0x34>

   return 0;   /* good return */
 403426c:	e03fff15 	stw	zero,-4(fp)
 4034270:	e0bfff17 	ldw	r2,-4(fp)
}
 4034274:	e037883a 	mov	sp,fp
 4034278:	dfc00117 	ldw	ra,4(sp)
 403427c:	df000017 	ldw	fp,0(sp)
 4034280:	dec00204 	addi	sp,sp,8
 4034284:	f800283a 	ret

04034288 <udp_lookup>:
 * RETURNS: 
 */

UDPCONN
udp_lookup(struct socket * so)
{
 4034288:	defffc04 	addi	sp,sp,-16
 403428c:	df000315 	stw	fp,12(sp)
 4034290:	df000304 	addi	fp,sp,12
 4034294:	e13ffe15 	stw	r4,-8(fp)
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 4034298:	00810174 	movhi	r2,1029
 403429c:	1081d804 	addi	r2,r2,1888
 40342a0:	10800017 	ldw	r2,0(r2)
 40342a4:	e0bffd15 	stw	r2,-12(fp)
 40342a8:	00000a06 	br	40342d4 <udp_lookup+0x4c>
      if (tmp->u_data == (void*)so)
 40342ac:	e0bffd17 	ldw	r2,-12(fp)
 40342b0:	10c00617 	ldw	r3,24(r2)
 40342b4:	e0bffe17 	ldw	r2,-8(fp)
 40342b8:	1880031e 	bne	r3,r2,40342c8 <udp_lookup+0x40>
      return (tmp);
 40342bc:	e0bffd17 	ldw	r2,-12(fp)
 40342c0:	e0bfff15 	stw	r2,-4(fp)
 40342c4:	00000706 	br	40342e4 <udp_lookup+0x5c>
UDPCONN
udp_lookup(struct socket * so)
{
   UDPCONN tmp;

   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 40342c8:	e0bffd17 	ldw	r2,-12(fp)
 40342cc:	10800017 	ldw	r2,0(r2)
 40342d0:	e0bffd15 	stw	r2,-12(fp)
 40342d4:	e0bffd17 	ldw	r2,-12(fp)
 40342d8:	1004c03a 	cmpne	r2,r2,zero
 40342dc:	103ff31e 	bne	r2,zero,40342ac <udp_lookup+0x24>
      if (tmp->u_data == (void*)so)
      return (tmp);

   return NULL;   /* didn't find it */
 40342e0:	e03fff15 	stw	zero,-4(fp)
 40342e4:	e0bfff17 	ldw	r2,-4(fp)
}
 40342e8:	e037883a 	mov	sp,fp
 40342ec:	df000017 	ldw	fp,0(sp)
 40342f0:	dec00104 	addi	sp,sp,4
 40342f4:	f800283a 	ret

040342f8 <udp_soinput>:
 * RETURNS: 
 */

int
udp_soinput(PACKET pkt, void * so_ptr)
{
 40342f8:	defff404 	addi	sp,sp,-48
 40342fc:	dfc00b15 	stw	ra,44(sp)
 4034300:	df000a15 	stw	fp,40(sp)
 4034304:	df000a04 	addi	fp,sp,40
 4034308:	e13ffd15 	stw	r4,-12(fp)
 403430c:	e17ffe15 	stw	r5,-8(fp)
   struct mbuf *  m_in;    /* packet/data mbuf */
   struct socket *   so =  (struct  socket *)so_ptr;
 4034310:	e0bffe17 	ldw	r2,-8(fp)
 4034314:	e0bff715 	stw	r2,-36(fp)
   struct sockaddr_in   sin;
   struct udp *   udpp;

   LOCK_NET_RESOURCE(NET_RESID); 
 4034318:	0009883a 	mov	r4,zero
 403431c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   /* make sure we're not flooding input buffers */
   if ((so->so_rcv.sb_cc + pkt->nb_plen) >= so->so_rcv.sb_hiwat)
 4034320:	e0bff717 	ldw	r2,-36(fp)
 4034324:	10c00a17 	ldw	r3,40(r2)
 4034328:	e0bffd17 	ldw	r2,-12(fp)
 403432c:	10800417 	ldw	r2,16(r2)
 4034330:	1887883a 	add	r3,r3,r2
 4034334:	e0bff717 	ldw	r2,-36(fp)
 4034338:	10800b17 	ldw	r2,44(r2)
 403433c:	18800536 	bltu	r3,r2,4034354 <udp_soinput+0x5c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 4034340:	0009883a 	mov	r4,zero
 4034344:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 4034348:	00801a44 	movi	r2,105
 403434c:	e0bfff15 	stw	r2,-4(fp)
 4034350:	00005106 	br	4034498 <udp_soinput+0x1a0>
   }

   /* alloc mbuf for received data */
   m_in = m_getnbuf(MT_RXDATA, 0);
 4034354:	01000044 	movi	r4,1
 4034358:	000b883a 	mov	r5,zero
 403435c:	40269b40 	call	40269b4 <m_getnbuf>
 4034360:	e0bff815 	stw	r2,-32(fp)
   if (!m_in)
 4034364:	e0bff817 	ldw	r2,-32(fp)
 4034368:	1004c03a 	cmpne	r2,r2,zero
 403436c:	1000051e 	bne	r2,zero,4034384 <udp_soinput+0x8c>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 4034370:	0009883a 	mov	r4,zero
 4034374:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 4034378:	00801a44 	movi	r2,105
 403437c:	e0bfff15 	stw	r2,-4(fp)
 4034380:	00004506 	br	4034498 <udp_soinput+0x1a0>
   }

   /* set data mbuf to point to start of UDP data */
   m_in->pkt = pkt;
 4034384:	e0fff817 	ldw	r3,-32(fp)
 4034388:	e0bffd17 	ldw	r2,-12(fp)
 403438c:	18800115 	stw	r2,4(r3)
   m_in->m_data = pkt->nb_prot;
 4034390:	e0bffd17 	ldw	r2,-12(fp)
 4034394:	10c00317 	ldw	r3,12(r2)
 4034398:	e0bff817 	ldw	r2,-32(fp)
 403439c:	10c00315 	stw	r3,12(r2)
   m_in->m_len = pkt->nb_plen;
 40343a0:	e0bffd17 	ldw	r2,-12(fp)
 40343a4:	10c00417 	ldw	r3,16(r2)
 40343a8:	e0bff817 	ldw	r2,-32(fp)
 40343ac:	10c00215 	stw	r3,8(r2)
   m_in->m_base = pkt->nb_buff;
 40343b0:	e0bffd17 	ldw	r2,-12(fp)
 40343b4:	10c00117 	ldw	r3,4(r2)
 40343b8:	e0bff817 	ldw	r2,-32(fp)
 40343bc:	10c00415 	stw	r3,16(r2)
   m_in->m_memsz = pkt->nb_blen;
 40343c0:	e0bffd17 	ldw	r2,-12(fp)
 40343c4:	10c00217 	ldw	r3,8(r2)
 40343c8:	e0bff817 	ldw	r2,-32(fp)
 40343cc:	10c00515 	stw	r3,20(r2)

   /* fill in net address info for pass to socket append()ers */
   sin.sin_addr.s_addr = pkt->fhost;
 40343d0:	e0bffd17 	ldw	r2,-12(fp)
 40343d4:	10800717 	ldw	r2,28(r2)
 40343d8:	e0bffa15 	stw	r2,-24(fp)
   udpp = (struct udp *)(pkt->nb_prot - sizeof(struct udp));
 40343dc:	e0bffd17 	ldw	r2,-12(fp)
 40343e0:	10800317 	ldw	r2,12(r2)
 40343e4:	10bffe04 	addi	r2,r2,-8
 40343e8:	e0bff615 	stw	r2,-40(fp)
   sin.sin_port = htons(udpp->ud_srcp);
 40343ec:	e0bff617 	ldw	r2,-40(fp)
 40343f0:	1080000b 	ldhu	r2,0(r2)
 40343f4:	10bfffcc 	andi	r2,r2,65535
 40343f8:	1004d23a 	srli	r2,r2,8
 40343fc:	10803fcc 	andi	r2,r2,255
 4034400:	1009883a 	mov	r4,r2
 4034404:	e0bff617 	ldw	r2,-40(fp)
 4034408:	1080000b 	ldhu	r2,0(r2)
 403440c:	10bfffcc 	andi	r2,r2,65535
 4034410:	1004923a 	slli	r2,r2,8
 4034414:	1007883a 	mov	r3,r2
 4034418:	00bfc004 	movi	r2,-256
 403441c:	1884703a 	and	r2,r3,r2
 4034420:	2084b03a 	or	r2,r4,r2
 4034424:	e0bff98d 	sth	r2,-26(fp)
   sin.sin_family = AF_INET;
 4034428:	00800084 	movi	r2,2
 403442c:	e0bff90d 	sth	r2,-28(fp)

   /* attempt to append address information to mbuf */
   if (!sbappendaddr(&so->so_rcv, (struct sockaddr *)&sin, m_in))
 4034430:	e0bff717 	ldw	r2,-36(fp)
 4034434:	11000a04 	addi	r4,r2,40
 4034438:	e17ff904 	addi	r5,fp,-28
 403443c:	e1bff817 	ldw	r6,-32(fp)
 4034440:	402d2800 	call	402d280 <sbappendaddr>
 4034444:	1004c03a 	cmpne	r2,r2,zero
 4034448:	1000091e 	bne	r2,zero,4034470 <udp_soinput+0x178>
   {
      /* set the pkt field in the mbuf to NULL so m_free() below wont 
       * free the packet buffer, because that is left to the 
       */
      m_in->pkt = NULL;
 403444c:	e0bff817 	ldw	r2,-32(fp)
 4034450:	10000115 	stw	zero,4(r2)
      /* free only the mbuf itself */
      m_free(m_in);
 4034454:	e13ff817 	ldw	r4,-32(fp)
 4034458:	4026b5c0 	call	4026b5c <m_free>
      /* return error condition so caller can free the packet buffer */
      UNLOCK_NET_RESOURCE(NET_RESID);
 403445c:	0009883a 	mov	r4,zero
 4034460:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENOBUFS;
 4034464:	00801a44 	movi	r2,105
 4034468:	e0bfff15 	stw	r2,-4(fp)
 403446c:	00000a06 	br	4034498 <udp_soinput+0x1a0>
   }

   tcp_wakeup(&so->so_rcv);   /* wake anyone waiting for this */
 4034470:	e0bff717 	ldw	r2,-36(fp)
 4034474:	11000a04 	addi	r4,r2,40
 4034478:	40219280 	call	4021928 <tcp_wakeup>

   sorwakeup(so);    /* wake up selects too */
 403447c:	e0bff717 	ldw	r2,-36(fp)
 4034480:	11400a04 	addi	r5,r2,40
 4034484:	e13ff717 	ldw	r4,-36(fp)
 4034488:	402cf340 	call	402cf34 <sbwakeup>

   UNLOCK_NET_RESOURCE(NET_RESID);
 403448c:	0009883a 	mov	r4,zero
 4034490:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return 0;
 4034494:	e03fff15 	stw	zero,-4(fp)
 4034498:	e0bfff17 	ldw	r2,-4(fp)
}
 403449c:	e037883a 	mov	sp,fp
 40344a0:	dfc00117 	ldw	ra,4(sp)
 40344a4:	df000017 	ldw	fp,0(sp)
 40344a8:	dec00204 	addi	sp,sp,8
 40344ac:	f800283a 	ret

040344b0 <udp_usrreq>:

int
udp_usrreq(struct socket * so, 
   struct mbuf *  m,
   struct mbuf *  nam)
{
 40344b0:	defff704 	addi	sp,sp,-36
 40344b4:	dfc00815 	stw	ra,32(sp)
 40344b8:	df000715 	stw	fp,28(sp)
 40344bc:	df000704 	addi	fp,sp,28
 40344c0:	e13ffc15 	stw	r4,-16(fp)
 40344c4:	e17ffd15 	stw	r5,-12(fp)
 40344c8:	e1bffe15 	stw	r6,-8(fp)
   UDPCONN udpconn = (UDPCONN)NULL;
 40344cc:	e03ffb15 	stw	zero,-20(fp)
   int   req;

   req = so->so_req;    /* get request from socket struct */
 40344d0:	e0bffc17 	ldw	r2,-16(fp)
 40344d4:	10800717 	ldw	r2,28(r2)
 40344d8:	e0bffa15 	stw	r2,-24(fp)

   switch (req) 
 40344dc:	e0bffa17 	ldw	r2,-24(fp)
 40344e0:	10800468 	cmpgeui	r2,r2,17
 40344e4:	10008b1e 	bne	r2,zero,4034714 <udp_usrreq+0x264>
 40344e8:	e0bffa17 	ldw	r2,-24(fp)
 40344ec:	1085883a 	add	r2,r2,r2
 40344f0:	1087883a 	add	r3,r2,r2
 40344f4:	008100f4 	movhi	r2,1027
 40344f8:	10914204 	addi	r2,r2,17672
 40344fc:	1885883a 	add	r2,r3,r2
 4034500:	10800017 	ldw	r2,0(r2)
 4034504:	1000683a 	jmp	r2
 4034508:	0403454c 	andi	r16,zero,3349
 403450c:	040345d4 	movui	r16,3351
 4034510:	04034618 	cmpnei	r16,zero,3352
 4034514:	04034714 	movui	r16,3356
 4034518:	04034618 	cmpnei	r16,zero,3352
 403451c:	04034714 	movui	r16,3356
 4034520:	04034708 	cmpgei	r16,zero,3356
 4034524:	04034714 	movui	r16,3356
 4034528:	04034708 	cmpgei	r16,zero,3356
 403452c:	04034668 	cmpgeui	r16,zero,3353
 4034530:	04034714 	movui	r16,3356
 4034534:	04034714 	movui	r16,3356
 4034538:	04034714 	movui	r16,3356
 403453c:	04034714 	movui	r16,3356
 4034540:	04034714 	movui	r16,3356
 4034544:	040346b8 	rdprs	r16,zero,3354
 4034548:	040346b8 	rdprs	r16,zero,3354
   {
   case PRU_ATTACH:
      /* fake small windows so sockets asks us to move data */
      so->so_rcv.sb_hiwat = so->so_snd.sb_hiwat = udp_maxalloc();
 403454c:	403f5680 	call	403f568 <udp_maxalloc>
 4034550:	1007883a 	mov	r3,r2
 4034554:	e0bffc17 	ldw	r2,-16(fp)
 4034558:	10c01315 	stw	r3,76(r2)
 403455c:	e0bffc17 	ldw	r2,-16(fp)
 4034560:	10c01317 	ldw	r3,76(r2)
 4034564:	e0bffc17 	ldw	r2,-16(fp)
 4034568:	10c00b15 	stw	r3,44(r2)

#ifdef IP_V4
      /* make a NetPort UDP connection */
      /* unlock the net resource; UDP will immediatly re-lock it */
      if (so->so_domain  == AF_INET){
 403456c:	e0bffc17 	ldw	r2,-16(fp)
 4034570:	10800517 	ldw	r2,20(r2)
 4034574:	10800098 	cmpnei	r2,r2,2
 4034578:	10000e1e 	bne	r2,zero,40345b4 <udp_usrreq+0x104>
        UNLOCK_NET_RESOURCE(NET_RESID);
 403457c:	0009883a 	mov	r4,zero
 4034580:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
        udpconn = udp_open(0L, 0, udp_socket(), udp_soinput, so);
 4034584:	403f3d80 	call	403f3d8 <udp_socket>
 4034588:	11bfffcc 	andi	r6,r2,65535
 403458c:	e0bffc17 	ldw	r2,-16(fp)
 4034590:	d8800015 	stw	r2,0(sp)
 4034594:	0009883a 	mov	r4,zero
 4034598:	000b883a 	mov	r5,zero
 403459c:	01c100f4 	movhi	r7,1027
 40345a0:	39d0be04 	addi	r7,r7,17144
 40345a4:	40257040 	call	4025704 <udp_open>
 40345a8:	e0bffb15 	stw	r2,-20(fp)
        LOCK_NET_RESOURCE(NET_RESID);
 40345ac:	0009883a 	mov	r4,zero
 40345b0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
        UNLOCK_NET_RESOURCE(NET_RESID);
        udpconn = udp6_open(0L, 0, udp_socket(), udp6_soinput, so);
        LOCK_NET_RESOURCE(NET_RESID);
      }
#endif
      if (!udpconn)
 40345b4:	e0bffb17 	ldw	r2,-20(fp)
 40345b8:	1004c03a 	cmpne	r2,r2,zero
 40345bc:	1000031e 	bne	r2,zero,40345cc <udp_usrreq+0x11c>
         return(EINVAL);
 40345c0:	00800584 	movi	r2,22
 40345c4:	e0bfff15 	stw	r2,-4(fp)
 40345c8:	00005406 	br	403471c <udp_usrreq+0x26c>
      return 0;
 40345cc:	e03fff15 	stw	zero,-4(fp)
 40345d0:	00005206 	br	403471c <udp_usrreq+0x26c>
   case PRU_DETACH:
      /* delete the NetPort UDP connection */
      udpconn = udp_lookup(so);
 40345d4:	e13ffc17 	ldw	r4,-16(fp)
 40345d8:	40342880 	call	4034288 <udp_lookup>
 40345dc:	e0bffb15 	stw	r2,-20(fp)
      if (!udpconn)
 40345e0:	e0bffb17 	ldw	r2,-20(fp)
 40345e4:	1004c03a 	cmpne	r2,r2,zero
 40345e8:	1000031e 	bne	r2,zero,40345f8 <udp_usrreq+0x148>
         return(EINVAL);
 40345ec:	00800584 	movi	r2,22
 40345f0:	e0bfff15 	stw	r2,-4(fp)
 40345f4:	00004906 	br	403471c <udp_usrreq+0x26c>
      /* unlock the net resource; UDP will immediatly re-lock it */
      UNLOCK_NET_RESOURCE(NET_RESID);
 40345f8:	0009883a 	mov	r4,zero
 40345fc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      udp_close(udpconn);
 4034600:	e13ffb17 	ldw	r4,-20(fp)
 4034604:	402593c0 	call	402593c <udp_close>
      LOCK_NET_RESOURCE(NET_RESID);
 4034608:	0009883a 	mov	r4,zero
 403460c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      return 0;
 4034610:	e03fff15 	stw	zero,-4(fp)
 4034614:	00004106 	br	403471c <udp_usrreq+0x26c>
   case PRU_CONNECT:
      /* Install foreign port for UDP, making a virtual connection */
      /* fall to shared bind logic */
   case PRU_BIND:
      /* do bind parameters lookups and tests */
      if (nam == NULL)
 4034618:	e0bffe17 	ldw	r2,-8(fp)
 403461c:	1004c03a 	cmpne	r2,r2,zero
 4034620:	1000031e 	bne	r2,zero,4034630 <udp_usrreq+0x180>
         return(EINVAL);
 4034624:	00800584 	movi	r2,22
 4034628:	e0bfff15 	stw	r2,-4(fp)
 403462c:	00003b06 	br	403471c <udp_usrreq+0x26c>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 4034630:	e0bffc17 	ldw	r2,-16(fp)
 4034634:	10800517 	ldw	r2,20(r2)
 4034638:	10800098 	cmpnei	r2,r2,2
 403463c:	1000061e 	bne	r2,zero,4034658 <udp_usrreq+0x1a8>
        return udp4_sockbind(so, nam, req );
 4034640:	e13ffc17 	ldw	r4,-16(fp)
 4034644:	e17ffe17 	ldw	r5,-8(fp)
 4034648:	e1bffa17 	ldw	r6,-24(fp)
 403464c:	40347340 	call	4034734 <udp4_sockbind>
 4034650:	e0bfff15 	stw	r2,-4(fp)
 4034654:	00003106 	br	403471c <udp_usrreq+0x26c>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockbind(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 4034658:	4025bb40 	call	4025bb4 <dtrap>
      return EINVAL;
 403465c:	00800584 	movi	r2,22
 4034660:	e0bfff15 	stw	r2,-4(fp)
 4034664:	00002d06 	br	403471c <udp_usrreq+0x26c>
   case PRU_SEND:
      /* do parameter lookups and tests */
      if (!m)  /* no data passed? */
 4034668:	e0bffd17 	ldw	r2,-12(fp)
 403466c:	1004c03a 	cmpne	r2,r2,zero
 4034670:	1000031e 	bne	r2,zero,4034680 <udp_usrreq+0x1d0>
         return(EINVAL);
 4034674:	00800584 	movi	r2,22
 4034678:	e0bfff15 	stw	r2,-4(fp)
 403467c:	00002706 	br	403471c <udp_usrreq+0x26c>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 4034680:	e0bffc17 	ldw	r2,-16(fp)
 4034684:	10800517 	ldw	r2,20(r2)
 4034688:	10800098 	cmpnei	r2,r2,2
 403468c:	1000061e 	bne	r2,zero,40346a8 <udp_usrreq+0x1f8>
        return udp4_socksend(so, m, nam );
 4034690:	e13ffc17 	ldw	r4,-16(fp)
 4034694:	e17ffd17 	ldw	r5,-12(fp)
 4034698:	e1bffe17 	ldw	r6,-8(fp)
 403469c:	4034a700 	call	4034a70 <udp4_socksend>
 40346a0:	e0bfff15 	stw	r2,-4(fp)
 40346a4:	00001d06 	br	403471c <udp_usrreq+0x26c>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_socksend(so, m, nam);
      }
#endif
      dtrap();   /* invalid address */
 40346a8:	4025bb40 	call	4025bb4 <dtrap>
      return EINVAL;
 40346ac:	00800584 	movi	r2,22
 40346b0:	e0bfff15 	stw	r2,-4(fp)
 40346b4:	00001906 	br	403471c <udp_usrreq+0x26c>

   case PRU_SOCKADDR:
      /* fall through to share PRU_PEERADDR prefix */
   case PRU_PEERADDR:
      if (nam == NULL)
 40346b8:	e0bffe17 	ldw	r2,-8(fp)
 40346bc:	1004c03a 	cmpne	r2,r2,zero
 40346c0:	1000031e 	bne	r2,zero,40346d0 <udp_usrreq+0x220>
         return(EINVAL);
 40346c4:	00800584 	movi	r2,22
 40346c8:	e0bfff15 	stw	r2,-4(fp)
 40346cc:	00001306 	br	403471c <udp_usrreq+0x26c>
#ifdef IP_V4
      if (so->so_domain == AF_INET){
 40346d0:	e0bffc17 	ldw	r2,-16(fp)
 40346d4:	10800517 	ldw	r2,20(r2)
 40346d8:	10800098 	cmpnei	r2,r2,2
 40346dc:	1000061e 	bne	r2,zero,40346f8 <udp_usrreq+0x248>
        return udp4_sockaddr(so, nam, req );
 40346e0:	e13ffc17 	ldw	r4,-16(fp)
 40346e4:	e17ffe17 	ldw	r5,-8(fp)
 40346e8:	e1bffa17 	ldw	r6,-24(fp)
 40346ec:	4034e4c0 	call	4034e4c <udp4_sockaddr>
 40346f0:	e0bfff15 	stw	r2,-4(fp)
 40346f4:	00000906 	br	403471c <udp_usrreq+0x26c>
#ifdef IP_V6
      if (so->so_domain == AF_INET6){
        return udp6_sockaddr(so, nam, req);
      }
#endif
      dtrap();   /* invalid address */
 40346f8:	4025bb40 	call	4025bb4 <dtrap>
      return EINVAL;
 40346fc:	00800584 	movi	r2,22
 4034700:	e0bfff15 	stw	r2,-4(fp)
 4034704:	00000506 	br	403471c <udp_usrreq+0x26c>

   case PRU_DISCONNECT:
   case PRU_RCVD:
      dtrap();
 4034708:	4025bb40 	call	4025bb4 <dtrap>
      return 0;
 403470c:	e03fff15 	stw	zero,-4(fp)
 4034710:	00000206 	br	403471c <udp_usrreq+0x26c>
   case PRU_LISTEN:     /* don't support these for UDP */
   case PRU_ACCEPT:
   default:
      return EOPNOTSUPP;
 4034714:	008017c4 	movi	r2,95
 4034718:	e0bfff15 	stw	r2,-4(fp)
 403471c:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 4034720:	e037883a 	mov	sp,fp
 4034724:	dfc00117 	ldw	ra,4(sp)
 4034728:	df000017 	ldw	fp,0(sp)
 403472c:	dec00204 	addi	sp,sp,8
 4034730:	f800283a 	ret

04034734 <udp4_sockbind>:

#ifdef IP_V4
int udp4_sockbind(struct socket *so, struct mbuf *nam, int req ) 
{
 4034734:	defff304 	addi	sp,sp,-52
 4034738:	dfc00c15 	stw	ra,48(sp)
 403473c:	df000b15 	stw	fp,44(sp)
 4034740:	df000b04 	addi	fp,sp,44
 4034744:	e13ffc15 	stw	r4,-16(fp)
 4034748:	e17ffd15 	stw	r5,-12(fp)
 403474c:	e1bffe15 	stw	r6,-8(fp)
  u_short  lport;   /* local port (local byte order) */
  ip_addr fhost; /* host to send to/recv from (network byte order) */
  ip_addr lhost; /* local IP address to bind to (network byte order) */
  NET ifp;

  sin = mtod(nam, struct sockaddr_in *);
 4034750:	e0bffd17 	ldw	r2,-12(fp)
 4034754:	10800317 	ldw	r2,12(r2)
 4034758:	e0bffb15 	stw	r2,-20(fp)
  if (sin == NULL)
 403475c:	e0bffb17 	ldw	r2,-20(fp)
 4034760:	1004c03a 	cmpne	r2,r2,zero
 4034764:	1000031e 	bne	r2,zero,4034774 <udp4_sockbind+0x40>
    return(EINVAL);
 4034768:	00800584 	movi	r2,22
 403476c:	e0bfff15 	stw	r2,-4(fp)
 4034770:	0000b906 	br	4034a58 <udp4_sockbind+0x324>
  if (nam->m_len != sizeof (*sin))
 4034774:	e0bffd17 	ldw	r2,-12(fp)
 4034778:	10800217 	ldw	r2,8(r2)
 403477c:	10800420 	cmpeqi	r2,r2,16
 4034780:	1000031e 	bne	r2,zero,4034790 <udp4_sockbind+0x5c>
    return(EINVAL);
 4034784:	00800584 	movi	r2,22
 4034788:	e0bfff15 	stw	r2,-4(fp)
 403478c:	0000b206 	br	4034a58 <udp4_sockbind+0x324>
  udpconn = udp_lookup(so);
 4034790:	e13ffc17 	ldw	r4,-16(fp)
 4034794:	40342880 	call	4034288 <udp_lookup>
 4034798:	e0bffa15 	stw	r2,-24(fp)
  if (!udpconn)
 403479c:	e0bffa17 	ldw	r2,-24(fp)
 40347a0:	1004c03a 	cmpne	r2,r2,zero
 40347a4:	1000031e 	bne	r2,zero,40347b4 <udp4_sockbind+0x80>
     return(EINVAL);
 40347a8:	00800584 	movi	r2,22
 40347ac:	e0bfff15 	stw	r2,-4(fp)
 40347b0:	0000a906 	br	4034a58 <udp4_sockbind+0x324>
  if (req == PRU_BIND)
 40347b4:	e0bffe17 	ldw	r2,-8(fp)
 40347b8:	10800098 	cmpnei	r2,r2,2
 40347bc:	1000601e 	bne	r2,zero,4034940 <udp4_sockbind+0x20c>
     * if the caller-supplied port is 0, try to get
     * the port from the UDP endpoint, or pick a new
     * unique port; else, use the caller-supplied
     * port
     */
    if (sin->sin_port == 0)
 40347c0:	e0bffb17 	ldw	r2,-20(fp)
 40347c4:	1080008b 	ldhu	r2,2(r2)
 40347c8:	10bfffcc 	andi	r2,r2,65535
 40347cc:	1004c03a 	cmpne	r2,r2,zero
 40347d0:	10000c1e 	bne	r2,zero,4034804 <udp4_sockbind+0xd0>
    {
      if (udpconn->u_lport != 0)
 40347d4:	e0bffa17 	ldw	r2,-24(fp)
 40347d8:	1080018b 	ldhu	r2,6(r2)
 40347dc:	10bfffcc 	andi	r2,r2,65535
 40347e0:	1005003a 	cmpeq	r2,r2,zero
 40347e4:	1000041e 	bne	r2,zero,40347f8 <udp4_sockbind+0xc4>
        lport = udpconn->u_lport;
 40347e8:	e0bffa17 	ldw	r2,-24(fp)
 40347ec:	1080018b 	ldhu	r2,6(r2)
 40347f0:	e0bff80d 	sth	r2,-32(fp)
 40347f4:	00001206 	br	4034840 <udp4_sockbind+0x10c>
      else
        lport = udp_socket();
 40347f8:	403f3d80 	call	403f3d8 <udp_socket>
 40347fc:	e0bff80d 	sth	r2,-32(fp)
 4034800:	00000f06 	br	4034840 <udp4_sockbind+0x10c>
    }
    else
    {
      lport = ntohs(sin->sin_port);
 4034804:	e0bffb17 	ldw	r2,-20(fp)
 4034808:	1080008b 	ldhu	r2,2(r2)
 403480c:	10bfffcc 	andi	r2,r2,65535
 4034810:	1004d23a 	srli	r2,r2,8
 4034814:	10803fcc 	andi	r2,r2,255
 4034818:	1009883a 	mov	r4,r2
 403481c:	e0bffb17 	ldw	r2,-20(fp)
 4034820:	1080008b 	ldhu	r2,2(r2)
 4034824:	10bfffcc 	andi	r2,r2,65535
 4034828:	1004923a 	slli	r2,r2,8
 403482c:	1007883a 	mov	r3,r2
 4034830:	00bfc004 	movi	r2,-256
 4034834:	1884703a 	and	r2,r3,r2
 4034838:	2084b03a 	or	r2,r4,r2
 403483c:	e0bff80d 	sth	r2,-32(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * don't bind to a specific address; else, 
     * make sure the caller-supplied address is
     * an interface IP address and if so, bind to that
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 4034840:	e0bffb17 	ldw	r2,-20(fp)
 4034844:	10800117 	ldw	r2,4(r2)
 4034848:	1004c03a 	cmpne	r2,r2,zero
 403484c:	1000021e 	bne	r2,zero,4034858 <udp4_sockbind+0x124>
    {
      lhost = 0L;
 4034850:	e03ff615 	stw	zero,-40(fp)
 4034854:	00001806 	br	40348b8 <udp4_sockbind+0x184>
    }
    else
    {
      lhost = sin->sin_addr.s_addr;
 4034858:	e0bffb17 	ldw	r2,-20(fp)
 403485c:	10800117 	ldw	r2,4(r2)
 4034860:	e0bff615 	stw	r2,-40(fp)
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034864:	008101b4 	movhi	r2,1030
 4034868:	10a44904 	addi	r2,r2,-28380
 403486c:	10800017 	ldw	r2,0(r2)
 4034870:	e0bff515 	stw	r2,-44(fp)
 4034874:	00000706 	br	4034894 <udp4_sockbind+0x160>
        if (ifp->n_ipaddr == lhost)
 4034878:	e0bff517 	ldw	r2,-44(fp)
 403487c:	10c00a17 	ldw	r3,40(r2)
 4034880:	e0bff617 	ldw	r2,-40(fp)
 4034884:	18800626 	beq	r3,r2,40348a0 <udp4_sockbind+0x16c>
    else
    {
      lhost = sin->sin_addr.s_addr;
#ifndef UDP_SKIP_LCL_ADDR_CHECK
      /* verify that lhost is a local interface address */
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034888:	e0bff517 	ldw	r2,-44(fp)
 403488c:	10800017 	ldw	r2,0(r2)
 4034890:	e0bff515 	stw	r2,-44(fp)
 4034894:	e0bff517 	ldw	r2,-44(fp)
 4034898:	1004c03a 	cmpne	r2,r2,zero
 403489c:	103ff61e 	bne	r2,zero,4034878 <udp4_sockbind+0x144>
        if (ifp->n_ipaddr == lhost)
          break;
      if (ifp == NULL)
 40348a0:	e0bff517 	ldw	r2,-44(fp)
 40348a4:	1004c03a 	cmpne	r2,r2,zero
 40348a8:	1000031e 	bne	r2,zero,40348b8 <udp4_sockbind+0x184>
        return(EADDRNOTAVAIL);
 40348ac:	00801f44 	movi	r2,125
 40348b0:	e0bfff15 	stw	r2,-4(fp)
 40348b4:	00006806 	br	4034a58 <udp4_sockbind+0x324>
    }

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
 40348b8:	e0bffc17 	ldw	r2,-16(fp)
 40348bc:	10800417 	ldw	r2,16(r2)
 40348c0:	1080010c 	andi	r2,r2,4
 40348c4:	1004c03a 	cmpne	r2,r2,zero
 40348c8:	1000161e 	bne	r2,zero,4034924 <udp4_sockbind+0x1f0>
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 40348cc:	00810174 	movhi	r2,1029
 40348d0:	1081d804 	addi	r2,r2,1888
 40348d4:	10800017 	ldw	r2,0(r2)
 40348d8:	e0bff915 	stw	r2,-28(fp)
 40348dc:	00000e06 	br	4034918 <udp4_sockbind+0x1e4>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
 40348e0:	e0bff917 	ldw	r2,-28(fp)
 40348e4:	1080018b 	ldhu	r2,6(r2)
 40348e8:	10ffffcc 	andi	r3,r2,65535
 40348ec:	e0bff80b 	ldhu	r2,-32(fp)
 40348f0:	1880061e 	bne	r3,r2,403490c <udp4_sockbind+0x1d8>
 40348f4:	e0fff917 	ldw	r3,-28(fp)
 40348f8:	e0bffa17 	ldw	r2,-24(fp)
 40348fc:	18800326 	beq	r3,r2,403490c <udp4_sockbind+0x1d8>
          return(EADDRINUSE);
 4034900:	00801c04 	movi	r2,112
 4034904:	e0bfff15 	stw	r2,-4(fp)
 4034908:	00005306 	br	4034a58 <udp4_sockbind+0x324>

    /* make sure we're not about to collide with an
     * existing binding
     */
    if (!(so->so_options & SO_REUSEADDR))
      for (udptmp = firstudp; udptmp; udptmp = udptmp->u_next)
 403490c:	e0bff917 	ldw	r2,-28(fp)
 4034910:	10800017 	ldw	r2,0(r2)
 4034914:	e0bff915 	stw	r2,-28(fp)
 4034918:	e0bff917 	ldw	r2,-28(fp)
 403491c:	1004c03a 	cmpne	r2,r2,zero
 4034920:	103fef1e 	bne	r2,zero,40348e0 <udp4_sockbind+0x1ac>
        if ((udptmp->u_lport == lport) && (udptmp != udpconn))
          return(EADDRINUSE);
    /* bind the UDP endpoint */
    udpconn->u_lport = lport;
 4034924:	e0fffa17 	ldw	r3,-24(fp)
 4034928:	e0bff80b 	ldhu	r2,-32(fp)
 403492c:	1880018d 	sth	r2,6(r3)
    udpconn->u_lhost = lhost;
 4034930:	e0fffa17 	ldw	r3,-24(fp)
 4034934:	e0bff617 	ldw	r2,-40(fp)
 4034938:	18800315 	stw	r2,12(r3)
 403493c:	00004506 	br	4034a54 <udp4_sockbind+0x320>
  else /* PRU_CONNECT */
  {
    /* connect the socket to a remote IP address and
     * UDP port.
     */
    fport = ntohs(sin->sin_port);
 4034940:	e0bffb17 	ldw	r2,-20(fp)
 4034944:	1080008b 	ldhu	r2,2(r2)
 4034948:	10bfffcc 	andi	r2,r2,65535
 403494c:	1004d23a 	srli	r2,r2,8
 4034950:	10803fcc 	andi	r2,r2,255
 4034954:	1009883a 	mov	r4,r2
 4034958:	e0bffb17 	ldw	r2,-20(fp)
 403495c:	1080008b 	ldhu	r2,2(r2)
 4034960:	10bfffcc 	andi	r2,r2,65535
 4034964:	1004923a 	slli	r2,r2,8
 4034968:	1007883a 	mov	r3,r2
 403496c:	00bfc004 	movi	r2,-256
 4034970:	1884703a 	and	r2,r3,r2
 4034974:	2084b03a 	or	r2,r4,r2
 4034978:	e0bff88d 	sth	r2,-30(fp)
    /* if the caller-supplied address is INADDR_ANY,
     * use the wildcard address; else, use the caller-
     * supplied address
     */
    if (sin->sin_addr.s_addr == INADDR_ANY)
 403497c:	e0bffb17 	ldw	r2,-20(fp)
 4034980:	10800117 	ldw	r2,4(r2)
 4034984:	1004c03a 	cmpne	r2,r2,zero
 4034988:	1000021e 	bne	r2,zero,4034994 <udp4_sockbind+0x260>
      fhost = 0L;
 403498c:	e03ff715 	stw	zero,-36(fp)
 4034990:	00000306 	br	40349a0 <udp4_sockbind+0x26c>
    else
      fhost = sin->sin_addr.s_addr;
 4034994:	e0bffb17 	ldw	r2,-20(fp)
 4034998:	10800117 	ldw	r2,4(r2)
 403499c:	e0bff715 	stw	r2,-36(fp)
    /* prepare to bind the socket to the appropriate 
     * local interface address for the to-be-connected 
     * peer
     */
    lhost = ip_mymach(fhost);
 40349a0:	e13ff717 	ldw	r4,-36(fp)
 40349a4:	403a4b00 	call	403a4b0 <ip_mymach>
 40349a8:	e0bff615 	stw	r2,-40(fp)
    if (lhost == 0)
 40349ac:	e0bff617 	ldw	r2,-40(fp)
 40349b0:	1004c03a 	cmpne	r2,r2,zero
 40349b4:	1000031e 	bne	r2,zero,40349c4 <udp4_sockbind+0x290>
      return(ENETUNREACH);
 40349b8:	00801c84 	movi	r2,114
 40349bc:	e0bfff15 	stw	r2,-4(fp)
 40349c0:	00002506 	br	4034a58 <udp4_sockbind+0x324>
    /* if the socket hasn't been bound to a local
     * port yet, do so now
     */
    lport = udpconn->u_lport;
 40349c4:	e0bffa17 	ldw	r2,-24(fp)
 40349c8:	1080018b 	ldhu	r2,6(r2)
 40349cc:	e0bff80d 	sth	r2,-32(fp)
    if (lport == 0)
 40349d0:	e0bff80b 	ldhu	r2,-32(fp)
 40349d4:	1004c03a 	cmpne	r2,r2,zero
 40349d8:	1000021e 	bne	r2,zero,40349e4 <udp4_sockbind+0x2b0>
      lport = udp_socket();
 40349dc:	403f3d80 	call	403f3d8 <udp_socket>
 40349e0:	e0bff80d 	sth	r2,-32(fp)
    /* bind and connect the UDP endpoint */
    udpconn->u_lhost = lhost;
 40349e4:	e0fffa17 	ldw	r3,-24(fp)
 40349e8:	e0bff617 	ldw	r2,-40(fp)
 40349ec:	18800315 	stw	r2,12(r3)
    udpconn->u_lport = lport;
 40349f0:	e0fffa17 	ldw	r3,-24(fp)
 40349f4:	e0bff80b 	ldhu	r2,-32(fp)
 40349f8:	1880018d 	sth	r2,6(r3)
    udpconn->u_fhost = fhost;
 40349fc:	e0fffa17 	ldw	r3,-24(fp)
 4034a00:	e0bff717 	ldw	r2,-36(fp)
 4034a04:	18800415 	stw	r2,16(r3)
    udpconn->u_fport = fport;
 4034a08:	e0fffa17 	ldw	r3,-24(fp)
 4034a0c:	e0bff88b 	ldhu	r2,-30(fp)
 4034a10:	1880020d 	sth	r2,8(r3)
    /* mark the socket as connected */
    so->so_state &= ~(SS_ISCONNECTING|SS_ISDISCONNECTING);
 4034a14:	e0bffc17 	ldw	r2,-16(fp)
 4034a18:	10c0088b 	ldhu	r3,34(r2)
 4034a1c:	00bffcc4 	movi	r2,-13
 4034a20:	1884703a 	and	r2,r3,r2
 4034a24:	1007883a 	mov	r3,r2
 4034a28:	e0bffc17 	ldw	r2,-16(fp)
 4034a2c:	10c0088d 	sth	r3,34(r2)
    so->so_state |= SS_ISCONNECTED;
 4034a30:	e0bffc17 	ldw	r2,-16(fp)
 4034a34:	1080088b 	ldhu	r2,34(r2)
 4034a38:	10800094 	ori	r2,r2,2
 4034a3c:	1007883a 	mov	r3,r2
 4034a40:	e0bffc17 	ldw	r2,-16(fp)
 4034a44:	10c0088d 	sth	r3,34(r2)
    /* since socket was in listen state, packets may be queued */
    sbflush(&so->so_rcv);   /* dump these now */
 4034a48:	e0bffc17 	ldw	r2,-16(fp)
 4034a4c:	11000a04 	addi	r4,r2,40
 4034a50:	402d6700 	call	402d670 <sbflush>
  }
  return 0;
 4034a54:	e03fff15 	stw	zero,-4(fp)
 4034a58:	e0bfff17 	ldw	r2,-4(fp)
}
 4034a5c:	e037883a 	mov	sp,fp
 4034a60:	dfc00117 	ldw	ra,4(sp)
 4034a64:	df000017 	ldw	fp,0(sp)
 4034a68:	dec00204 	addi	sp,sp,8
 4034a6c:	f800283a 	ret

04034a70 <udp4_socksend>:

int udp4_socksend(struct socket *so, struct mbuf *m, 
		struct mbuf *nam ) 
{
 4034a70:	defff204 	addi	sp,sp,-56
 4034a74:	dfc00d15 	stw	ra,52(sp)
 4034a78:	df000c15 	stw	fp,48(sp)
 4034a7c:	dc000b15 	stw	r16,44(sp)
 4034a80:	df000b04 	addi	fp,sp,44
 4034a84:	e13ffc15 	stw	r4,-16(fp)
 4034a88:	e17ffd15 	stw	r5,-12(fp)
 4034a8c:	e1bffe15 	stw	r6,-8(fp)
  PACKET pkt;
#ifdef MULTI_HOMED
  NET ifp;
#endif

  udpconn = udp_lookup(so);
 4034a90:	e13ffc17 	ldw	r4,-16(fp)
 4034a94:	40342880 	call	4034288 <udp_lookup>
 4034a98:	e0bff915 	stw	r2,-28(fp)
  if (!udpconn)
 4034a9c:	e0bff917 	ldw	r2,-28(fp)
 4034aa0:	1004c03a 	cmpne	r2,r2,zero
 4034aa4:	1000051e 	bne	r2,zero,4034abc <udp4_socksend+0x4c>
  {
    m_free(m);
 4034aa8:	e13ffd17 	ldw	r4,-12(fp)
 4034aac:	4026b5c0 	call	4026b5c <m_free>
    /* may be bogus socket, but more likely the connection may 
       have closed due to ICMP dest unreachable from other side. */
    return(ECONNREFUSED);
 4034ab0:	00801bc4 	movi	r2,111
 4034ab4:	e0bfff15 	stw	r2,-4(fp)
 4034ab8:	0000dd06 	br	4034e30 <udp4_socksend+0x3c0>
  }

  if (nam == NULL)  /* no sendto() info passed, must be send() */
 4034abc:	e0bffe17 	ldw	r2,-8(fp)
 4034ac0:	1004c03a 	cmpne	r2,r2,zero
 4034ac4:	1000101e 	bne	r2,zero,4034b08 <udp4_socksend+0x98>
  { 
    if (so->so_state & SS_ISCONNECTED)
 4034ac8:	e0bffc17 	ldw	r2,-16(fp)
 4034acc:	1080088b 	ldhu	r2,34(r2)
 4034ad0:	10bfffcc 	andi	r2,r2,65535
 4034ad4:	1080008c 	andi	r2,r2,2
 4034ad8:	1005003a 	cmpeq	r2,r2,zero
 4034adc:	1000071e 	bne	r2,zero,4034afc <udp4_socksend+0x8c>
    {
      fport = udpconn->u_fport;
 4034ae0:	e0bff917 	ldw	r2,-28(fp)
 4034ae4:	1080020b 	ldhu	r2,8(r2)
 4034ae8:	e0bff80d 	sth	r2,-32(fp)
      fhost = udpconn->u_fhost;
 4034aec:	e0bff917 	ldw	r2,-28(fp)
 4034af0:	10800417 	ldw	r2,16(r2)
 4034af4:	e0bff715 	stw	r2,-36(fp)
 4034af8:	00003106 	br	4034bc0 <udp4_socksend+0x150>
    }
    else
      return (EINVAL);
 4034afc:	00800584 	movi	r2,22
 4034b00:	e0bfff15 	stw	r2,-4(fp)
 4034b04:	0000ca06 	br	4034e30 <udp4_socksend+0x3c0>
  }
  else if(nam->m_len != sizeof (*sin))
 4034b08:	e0bffe17 	ldw	r2,-8(fp)
 4034b0c:	10800217 	ldw	r2,8(r2)
 4034b10:	10800420 	cmpeqi	r2,r2,16
 4034b14:	1000041e 	bne	r2,zero,4034b28 <udp4_socksend+0xb8>
  {
    dtrap();
 4034b18:	4025bb40 	call	4025bb4 <dtrap>
    return (EINVAL);
 4034b1c:	00800584 	movi	r2,22
 4034b20:	e0bfff15 	stw	r2,-4(fp)
 4034b24:	0000c206 	br	4034e30 <udp4_socksend+0x3c0>
  }
  else
  {
    sin = mtod(nam, struct sockaddr_in *);
 4034b28:	e0bffe17 	ldw	r2,-8(fp)
 4034b2c:	10800317 	ldw	r2,12(r2)
 4034b30:	e0bffa15 	stw	r2,-24(fp)
    fhost = sin->sin_addr.s_addr;
 4034b34:	e0bffa17 	ldw	r2,-24(fp)
 4034b38:	10800117 	ldw	r2,4(r2)
 4034b3c:	e0bff715 	stw	r2,-36(fp)
    /* use caller's fport if specified, ours may be a wildcard */
    if (sin->sin_port)   /* caller gets to change fport on the fly */
 4034b40:	e0bffa17 	ldw	r2,-24(fp)
 4034b44:	1080008b 	ldhu	r2,2(r2)
 4034b48:	10bfffcc 	andi	r2,r2,65535
 4034b4c:	1005003a 	cmpeq	r2,r2,zero
 4034b50:	1000101e 	bne	r2,zero,4034b94 <udp4_socksend+0x124>
      fport = ntohs(sin->sin_port);
 4034b54:	e0bffa17 	ldw	r2,-24(fp)
 4034b58:	1080008b 	ldhu	r2,2(r2)
 4034b5c:	10bfffcc 	andi	r2,r2,65535
 4034b60:	1004d23a 	srli	r2,r2,8
 4034b64:	10803fcc 	andi	r2,r2,255
 4034b68:	1009883a 	mov	r4,r2
 4034b6c:	e0bffa17 	ldw	r2,-24(fp)
 4034b70:	1080008b 	ldhu	r2,2(r2)
 4034b74:	10bfffcc 	andi	r2,r2,65535
 4034b78:	1004923a 	slli	r2,r2,8
 4034b7c:	1007883a 	mov	r3,r2
 4034b80:	00bfc004 	movi	r2,-256
 4034b84:	1884703a 	and	r2,r3,r2
 4034b88:	2084b03a 	or	r2,r4,r2
 4034b8c:	e0bff80d 	sth	r2,-32(fp)
 4034b90:	00000b06 	br	4034bc0 <udp4_socksend+0x150>
    else  /* use port already set in UDP connection */
    {
      if (udpconn->u_fport == 0) /* don't send to port 0 */
 4034b94:	e0bff917 	ldw	r2,-28(fp)
 4034b98:	1080020b 	ldhu	r2,8(r2)
 4034b9c:	10bfffcc 	andi	r2,r2,65535
 4034ba0:	1004c03a 	cmpne	r2,r2,zero
 4034ba4:	1000031e 	bne	r2,zero,4034bb4 <udp4_socksend+0x144>
        return (EINVAL);
 4034ba8:	00800584 	movi	r2,22
 4034bac:	e0bfff15 	stw	r2,-4(fp)
 4034bb0:	00009f06 	br	4034e30 <udp4_socksend+0x3c0>
      fport = udpconn->u_fport;
 4034bb4:	e0bff917 	ldw	r2,-28(fp)
 4034bb8:	1080020b 	ldhu	r2,8(r2)
 4034bbc:	e0bff80d 	sth	r2,-32(fp)

  /* since our pkt->nb_buff size is tied to max packet size, we 
   * assume our UDP datagrams are always in one mbuf and that the 
   * mbuf 
   */
  if (m->m_len > (unsigned)udp_maxalloc()) /* but check anyway:*/
 4034bc0:	e0bffd17 	ldw	r2,-12(fp)
 4034bc4:	14000217 	ldw	r16,8(r2)
 4034bc8:	403f5680 	call	403f568 <udp_maxalloc>
 4034bcc:	1400042e 	bgeu	r2,r16,4034be0 <udp4_socksend+0x170>
  {
    dtrap(); /* should never happen */
 4034bd0:	4025bb40 	call	4025bb4 <dtrap>
    return EMSGSIZE;  /* try to recover */
 4034bd4:	00801e84 	movi	r2,122
 4034bd8:	e0bfff15 	stw	r2,-4(fp)
 4034bdc:	00009406 	br	4034e30 <udp4_socksend+0x3c0>
  }
  pkt = udp_alloc(m->m_len, 0);    /* get a NetPort buffer for send */
 4034be0:	e0bffd17 	ldw	r2,-12(fp)
 4034be4:	10800217 	ldw	r2,8(r2)
 4034be8:	1009883a 	mov	r4,r2
 4034bec:	000b883a 	mov	r5,zero
 4034bf0:	403f4a80 	call	403f4a8 <udp_alloc>
 4034bf4:	e0bff615 	stw	r2,-40(fp)
  if (!pkt)
 4034bf8:	e0bff617 	ldw	r2,-40(fp)
 4034bfc:	1004c03a 	cmpne	r2,r2,zero
 4034c00:	1000051e 	bne	r2,zero,4034c18 <udp4_socksend+0x1a8>
  {
    m_free(m);
 4034c04:	e13ffd17 	ldw	r4,-12(fp)
 4034c08:	4026b5c0 	call	4026b5c <m_free>
    return ENOBUFS;   /* report buffer shortages */
 4034c0c:	00801a44 	movi	r2,105
 4034c10:	e0bfff15 	stw	r2,-4(fp)
 4034c14:	00008606 	br	4034e30 <udp4_socksend+0x3c0>
  }
  MEMCPY(pkt->nb_prot, m->m_data, m->m_len);
 4034c18:	e0bff617 	ldw	r2,-40(fp)
 4034c1c:	10c00317 	ldw	r3,12(r2)
 4034c20:	e0bffd17 	ldw	r2,-12(fp)
 4034c24:	11400317 	ldw	r5,12(r2)
 4034c28:	e0bffd17 	ldw	r2,-12(fp)
 4034c2c:	10800217 	ldw	r2,8(r2)
 4034c30:	1809883a 	mov	r4,r3
 4034c34:	100d883a 	mov	r6,r2
 4034c38:	4001de40 	call	4001de4 <memcpy>
  pkt->nb_plen = m->m_len;
 4034c3c:	e0bffd17 	ldw	r2,-12(fp)
 4034c40:	10c00217 	ldw	r3,8(r2)
 4034c44:	e0bff617 	ldw	r2,-40(fp)
 4034c48:	10c00415 	stw	r3,16(r2)
  /* finished with mbuf, free it now */
  m_free(m);
 4034c4c:	e13ffd17 	ldw	r4,-12(fp)
 4034c50:	4026b5c0 	call	4026b5c <m_free>
  pkt->fhost = fhost;
 4034c54:	e0fff617 	ldw	r3,-40(fp)
 4034c58:	e0bff717 	ldw	r2,-36(fp)
 4034c5c:	18800715 	stw	r2,28(r3)
     * is up; if (after all that) we don't have an interface then we
     * fail with error EADDRNOTAVAIL; and finally, if we're built
     * for a single-homed configuration where there's only one
     * interface, we might as well use it, so we do.  
   */
  if (fhost == 0xffffffff)
 4034c60:	e0bff717 	ldw	r2,-36(fp)
 4034c64:	10bfffd8 	cmpnei	r2,r2,-1
 4034c68:	10004f1e 	bne	r2,zero,4034da8 <udp4_socksend+0x338>
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
 4034c6c:	e0bff917 	ldw	r2,-28(fp)
 4034c70:	10800317 	ldw	r2,12(r2)
 4034c74:	1005003a 	cmpeq	r2,r2,zero
 4034c78:	1000111e 	bne	r2,zero,4034cc0 <udp4_socksend+0x250>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034c7c:	008101b4 	movhi	r2,1030
 4034c80:	10a44904 	addi	r2,r2,-28380
 4034c84:	10800017 	ldw	r2,0(r2)
 4034c88:	e0bff515 	stw	r2,-44(fp)
 4034c8c:	00000806 	br	4034cb0 <udp4_socksend+0x240>
        if (ifp->n_ipaddr == udpconn->u_lhost)
 4034c90:	e0bff517 	ldw	r2,-44(fp)
 4034c94:	10c00a17 	ldw	r3,40(r2)
 4034c98:	e0bff917 	ldw	r2,-28(fp)
 4034c9c:	10800317 	ldw	r2,12(r2)
 4034ca0:	18802126 	beq	r3,r2,4034d28 <udp4_socksend+0x2b8>
  if (fhost == 0xffffffff)
  {
#ifdef MULTI_HOMED
    if (udpconn->u_lhost != 0L)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034ca4:	e0bff517 	ldw	r2,-44(fp)
 4034ca8:	10800017 	ldw	r2,0(r2)
 4034cac:	e0bff515 	stw	r2,-44(fp)
 4034cb0:	e0bff517 	ldw	r2,-44(fp)
 4034cb4:	1004c03a 	cmpne	r2,r2,zero
 4034cb8:	103ff51e 	bne	r2,zero,4034c90 <udp4_socksend+0x220>
 4034cbc:	00001a06 	br	4034d28 <udp4_socksend+0x2b8>
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034cc0:	008101b4 	movhi	r2,1030
 4034cc4:	10a44904 	addi	r2,r2,-28380
 4034cc8:	10800017 	ldw	r2,0(r2)
 4034ccc:	e0bff515 	stw	r2,-44(fp)
 4034cd0:	00001206 	br	4034d1c <udp4_socksend+0x2ac>
        if ((ifp->n_flags & NF_BCAST) &&
 4034cd4:	e0bff517 	ldw	r2,-44(fp)
 4034cd8:	10802a17 	ldw	r2,168(r2)
 4034cdc:	1080004c 	andi	r2,r2,1
 4034ce0:	10803fcc 	andi	r2,r2,255
 4034ce4:	1005003a 	cmpeq	r2,r2,zero
 4034ce8:	1000091e 	bne	r2,zero,4034d10 <udp4_socksend+0x2a0>
 4034cec:	e0bff517 	ldw	r2,-44(fp)
 4034cf0:	10802717 	ldw	r2,156(r2)
 4034cf4:	1005003a 	cmpeq	r2,r2,zero
 4034cf8:	1000051e 	bne	r2,zero,4034d10 <udp4_socksend+0x2a0>
 4034cfc:	e0bff517 	ldw	r2,-44(fp)
 4034d00:	10802717 	ldw	r2,156(r2)
 4034d04:	10800617 	ldw	r2,24(r2)
 4034d08:	10800060 	cmpeqi	r2,r2,1
 4034d0c:	1000061e 	bne	r2,zero,4034d28 <udp4_socksend+0x2b8>
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
        if (ifp->n_ipaddr == udpconn->u_lhost)
          break;
    }
    else {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034d10:	e0bff517 	ldw	r2,-44(fp)
 4034d14:	10800017 	ldw	r2,0(r2)
 4034d18:	e0bff515 	stw	r2,-44(fp)
 4034d1c:	e0bff517 	ldw	r2,-44(fp)
 4034d20:	1004c03a 	cmpne	r2,r2,zero
 4034d24:	103feb1e 	bne	r2,zero,4034cd4 <udp4_socksend+0x264>
        if ((ifp->n_flags & NF_BCAST) &&
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
 4034d28:	e0bff517 	ldw	r2,-44(fp)
 4034d2c:	1004c03a 	cmpne	r2,r2,zero
 4034d30:	10001a1e 	bne	r2,zero,4034d9c <udp4_socksend+0x32c>
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034d34:	008101b4 	movhi	r2,1030
 4034d38:	10a44904 	addi	r2,r2,-28380
 4034d3c:	10800017 	ldw	r2,0(r2)
 4034d40:	e0bff515 	stw	r2,-44(fp)
 4034d44:	00000c06 	br	4034d78 <udp4_socksend+0x308>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
 4034d48:	e0bff517 	ldw	r2,-44(fp)
 4034d4c:	10802717 	ldw	r2,156(r2)
 4034d50:	1005003a 	cmpeq	r2,r2,zero
 4034d54:	1000051e 	bne	r2,zero,4034d6c <udp4_socksend+0x2fc>
 4034d58:	e0bff517 	ldw	r2,-44(fp)
 4034d5c:	10802717 	ldw	r2,156(r2)
 4034d60:	10800617 	ldw	r2,24(r2)
 4034d64:	10800060 	cmpeqi	r2,r2,1
 4034d68:	1000061e 	bne	r2,zero,4034d84 <udp4_socksend+0x314>
          (ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
           break;
    }
    if (ifp == NULL)
    {
      for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4034d6c:	e0bff517 	ldw	r2,-44(fp)
 4034d70:	10800017 	ldw	r2,0(r2)
 4034d74:	e0bff515 	stw	r2,-44(fp)
 4034d78:	e0bff517 	ldw	r2,-44(fp)
 4034d7c:	1004c03a 	cmpne	r2,r2,zero
 4034d80:	103ff11e 	bne	r2,zero,4034d48 <udp4_socksend+0x2d8>
        if ((ifp->n_mib) && (ifp->n_mib->ifAdminStatus == NI_UP))
          break;
      if (ifp == NULL)
 4034d84:	e0bff517 	ldw	r2,-44(fp)
 4034d88:	1004c03a 	cmpne	r2,r2,zero
 4034d8c:	1000031e 	bne	r2,zero,4034d9c <udp4_socksend+0x32c>
        return(EADDRNOTAVAIL);
 4034d90:	00801f44 	movi	r2,125
 4034d94:	e0bfff15 	stw	r2,-4(fp)
 4034d98:	00002506 	br	4034e30 <udp4_socksend+0x3c0>
    }
    pkt->net = ifp;
 4034d9c:	e0fff617 	ldw	r3,-40(fp)
 4034da0:	e0bff517 	ldw	r2,-44(fp)
 4034da4:	18800615 	stw	r2,24(r3)
#ifdef IP_MULTICAST

  /* If the socket has an IP moptions structure for multicast options,
   * place a pointer to this structure in the PACKET structure.
   */
  if (so->inp_moptions)
 4034da8:	e0bffc17 	ldw	r2,-16(fp)
 4034dac:	10800317 	ldw	r2,12(r2)
 4034db0:	1005003a 	cmpeq	r2,r2,zero
 4034db4:	1000041e 	bne	r2,zero,4034dc8 <udp4_socksend+0x358>
     pkt->imo = so->inp_moptions;
 4034db8:	e0bffc17 	ldw	r2,-16(fp)
 4034dbc:	10c00317 	ldw	r3,12(r2)
 4034dc0:	e0bff617 	ldw	r2,-40(fp)
 4034dc4:	10c00b15 	stw	r3,44(r2)

#endif   /* IP_MULTICAST */

   /* have we set options? */
   if (so->so_optsPack)
 4034dc8:	e0bffc17 	ldw	r2,-16(fp)
 4034dcc:	10801f17 	ldw	r2,124(r2)
 4034dd0:	1005003a 	cmpeq	r2,r2,zero
 4034dd4:	1000041e 	bne	r2,zero,4034de8 <udp4_socksend+0x378>
	   pkt->soxopts = so->so_optsPack; /* yup - copy to pkt */
 4034dd8:	e0bffc17 	ldw	r2,-16(fp)
 4034ddc:	10c01f17 	ldw	r3,124(r2)
 4034de0:	e0bff617 	ldw	r2,-40(fp)
 4034de4:	10c00c15 	stw	r3,48(r2)

  /* unlock the net resource; UDP will immediately re-lock it */
  UNLOCK_NET_RESOURCE(NET_RESID);
 4034de8:	0009883a 	mov	r4,zero
 4034dec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
  e = udp_send(fport, udpconn->u_lport, pkt);
 4034df0:	e13ff80b 	ldhu	r4,-32(fp)
 4034df4:	e0bff917 	ldw	r2,-28(fp)
 4034df8:	1080018b 	ldhu	r2,6(r2)
 4034dfc:	117fffcc 	andi	r5,r2,65535
 4034e00:	e1bff617 	ldw	r6,-40(fp)
 4034e04:	403eff00 	call	403eff0 <udp_send>
 4034e08:	e0bffb15 	stw	r2,-20(fp)
  LOCK_NET_RESOURCE(NET_RESID);
 4034e0c:	0009883a 	mov	r4,zero
 4034e10:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
  if (e < 0) 
 4034e14:	e0bffb17 	ldw	r2,-20(fp)
 4034e18:	1004403a 	cmpge	r2,r2,zero
 4034e1c:	1000031e 	bne	r2,zero,4034e2c <udp4_socksend+0x3bc>
     return(e);
 4034e20:	e0bffb17 	ldw	r2,-20(fp)
 4034e24:	e0bfff15 	stw	r2,-4(fp)
 4034e28:	00000106 	br	4034e30 <udp4_socksend+0x3c0>
  return 0;
 4034e2c:	e03fff15 	stw	zero,-4(fp)
 4034e30:	e0bfff17 	ldw	r2,-4(fp)
}
 4034e34:	e037883a 	mov	sp,fp
 4034e38:	dfc00217 	ldw	ra,8(sp)
 4034e3c:	df000117 	ldw	fp,4(sp)
 4034e40:	dc000017 	ldw	r16,0(sp)
 4034e44:	dec00304 	addi	sp,sp,12
 4034e48:	f800283a 	ret

04034e4c <udp4_sockaddr>:

int udp4_sockaddr(struct socket *so, struct mbuf *nam , int req)
{
 4034e4c:	defff804 	addi	sp,sp,-32
 4034e50:	dfc00715 	stw	ra,28(sp)
 4034e54:	df000615 	stw	fp,24(sp)
 4034e58:	df000604 	addi	fp,sp,24
 4034e5c:	e13ffc15 	stw	r4,-16(fp)
 4034e60:	e17ffd15 	stw	r5,-12(fp)
 4034e64:	e1bffe15 	stw	r6,-8(fp)
  struct sockaddr_in * sin;
  UDPCONN udpconn;

  sin = mtod(nam, struct sockaddr_in *);
 4034e68:	e0bffd17 	ldw	r2,-12(fp)
 4034e6c:	10800317 	ldw	r2,12(r2)
 4034e70:	e0bffb15 	stw	r2,-20(fp)
  if (sin == NULL)
 4034e74:	e0bffb17 	ldw	r2,-20(fp)
 4034e78:	1004c03a 	cmpne	r2,r2,zero
 4034e7c:	1000031e 	bne	r2,zero,4034e8c <udp4_sockaddr+0x40>
     return(EINVAL);
 4034e80:	00800584 	movi	r2,22
 4034e84:	e0bfff15 	stw	r2,-4(fp)
 4034e88:	00004106 	br	4034f90 <udp4_sockaddr+0x144>
  udpconn = udp_lookup(so);
 4034e8c:	e13ffc17 	ldw	r4,-16(fp)
 4034e90:	40342880 	call	4034288 <udp_lookup>
 4034e94:	e0bffa15 	stw	r2,-24(fp)
  if (!udpconn)
 4034e98:	e0bffa17 	ldw	r2,-24(fp)
 4034e9c:	1004c03a 	cmpne	r2,r2,zero
 4034ea0:	1000031e 	bne	r2,zero,4034eb0 <udp4_sockaddr+0x64>
     return(EINVAL);
 4034ea4:	00800584 	movi	r2,22
 4034ea8:	e0bfff15 	stw	r2,-4(fp)
 4034eac:	00003806 	br	4034f90 <udp4_sockaddr+0x144>
  nam->m_len = sizeof(*sin);
 4034eb0:	e0fffd17 	ldw	r3,-12(fp)
 4034eb4:	00800404 	movi	r2,16
 4034eb8:	18800215 	stw	r2,8(r3)
  if (req == PRU_SOCKADDR)
 4034ebc:	e0bffe17 	ldw	r2,-8(fp)
 4034ec0:	108003d8 	cmpnei	r2,r2,15
 4034ec4:	1000191e 	bne	r2,zero,4034f2c <udp4_sockaddr+0xe0>
  {
     sin->sin_family = AF_INET;
 4034ec8:	e0fffb17 	ldw	r3,-20(fp)
 4034ecc:	00800084 	movi	r2,2
 4034ed0:	1880000d 	sth	r2,0(r3)
     sin->sin_port = htons(udpconn->u_lport);
 4034ed4:	e0bffa17 	ldw	r2,-24(fp)
 4034ed8:	1080018b 	ldhu	r2,6(r2)
 4034edc:	10bfffcc 	andi	r2,r2,65535
 4034ee0:	1004d23a 	srli	r2,r2,8
 4034ee4:	10803fcc 	andi	r2,r2,255
 4034ee8:	1009883a 	mov	r4,r2
 4034eec:	e0bffa17 	ldw	r2,-24(fp)
 4034ef0:	1080018b 	ldhu	r2,6(r2)
 4034ef4:	10bfffcc 	andi	r2,r2,65535
 4034ef8:	1004923a 	slli	r2,r2,8
 4034efc:	1007883a 	mov	r3,r2
 4034f00:	00bfc004 	movi	r2,-256
 4034f04:	1884703a 	and	r2,r3,r2
 4034f08:	2084b03a 	or	r2,r4,r2
 4034f0c:	1007883a 	mov	r3,r2
 4034f10:	e0bffb17 	ldw	r2,-20(fp)
 4034f14:	10c0008d 	sth	r3,2(r2)
     sin->sin_addr.s_addr = udpconn->u_lhost;
 4034f18:	e0bffa17 	ldw	r2,-24(fp)
 4034f1c:	10c00317 	ldw	r3,12(r2)
 4034f20:	e0bffb17 	ldw	r2,-20(fp)
 4034f24:	10c00115 	stw	r3,4(r2)
 4034f28:	00001806 	br	4034f8c <udp4_sockaddr+0x140>
  }
  else /* PRU_PEERADDR */
  {
    sin->sin_family = AF_INET;
 4034f2c:	e0fffb17 	ldw	r3,-20(fp)
 4034f30:	00800084 	movi	r2,2
 4034f34:	1880000d 	sth	r2,0(r3)
    sin->sin_port = htons(udpconn->u_fport);
 4034f38:	e0bffa17 	ldw	r2,-24(fp)
 4034f3c:	1080020b 	ldhu	r2,8(r2)
 4034f40:	10bfffcc 	andi	r2,r2,65535
 4034f44:	1004d23a 	srli	r2,r2,8
 4034f48:	10803fcc 	andi	r2,r2,255
 4034f4c:	1009883a 	mov	r4,r2
 4034f50:	e0bffa17 	ldw	r2,-24(fp)
 4034f54:	1080020b 	ldhu	r2,8(r2)
 4034f58:	10bfffcc 	andi	r2,r2,65535
 4034f5c:	1004923a 	slli	r2,r2,8
 4034f60:	1007883a 	mov	r3,r2
 4034f64:	00bfc004 	movi	r2,-256
 4034f68:	1884703a 	and	r2,r3,r2
 4034f6c:	2084b03a 	or	r2,r4,r2
 4034f70:	1007883a 	mov	r3,r2
 4034f74:	e0bffb17 	ldw	r2,-20(fp)
 4034f78:	10c0008d 	sth	r3,2(r2)
    sin->sin_addr.s_addr = udpconn->u_fhost;
 4034f7c:	e0bffa17 	ldw	r2,-24(fp)
 4034f80:	10c00417 	ldw	r3,16(r2)
 4034f84:	e0bffb17 	ldw	r2,-20(fp)
 4034f88:	10c00115 	stw	r3,4(r2)
  }
  return 0;
 4034f8c:	e03fff15 	stw	zero,-4(fp)
 4034f90:	e0bfff17 	ldw	r2,-4(fp)
}
 4034f94:	e037883a 	mov	sp,fp
 4034f98:	dfc00117 	ldw	ra,4(sp)
 4034f9c:	df000017 	ldw	fp,0(sp)
 4034fa0:	dec00204 	addi	sp,sp,8
 4034fa4:	f800283a 	ret

04034fa8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4034fa8:	defff404 	addi	sp,sp,-48
 4034fac:	df000b15 	stw	fp,44(sp)
 4034fb0:	df000b04 	addi	fp,sp,44
 4034fb4:	e13ffb15 	stw	r4,-20(fp)
 4034fb8:	e17ffc15 	stw	r5,-16(fp)
 4034fbc:	e1bffd15 	stw	r6,-12(fp)
 4034fc0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4034fc4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4034fc8:	00810174 	movhi	r2,1029
 4034fcc:	1081f404 	addi	r2,r2,2000
 4034fd0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4034fd4:	1005003a 	cmpeq	r2,r2,zero
 4034fd8:	1000411e 	bne	r2,zero,40350e0 <alt_alarm_start+0x138>
  {
    if (alarm)
 4034fdc:	e0bffb17 	ldw	r2,-20(fp)
 4034fe0:	1005003a 	cmpeq	r2,r2,zero
 4034fe4:	10003b1e 	bne	r2,zero,40350d4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 4034fe8:	e0fffb17 	ldw	r3,-20(fp)
 4034fec:	e0bffd17 	ldw	r2,-12(fp)
 4034ff0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 4034ff4:	e0fffb17 	ldw	r3,-20(fp)
 4034ff8:	e0bffe17 	ldw	r2,-8(fp)
 4034ffc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035000:	0005303a 	rdctl	r2,status
 4035004:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035008:	e0fff817 	ldw	r3,-32(fp)
 403500c:	00bfff84 	movi	r2,-2
 4035010:	1884703a 	and	r2,r3,r2
 4035014:	1001703a 	wrctl	status,r2
  
  return context;
 4035018:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 403501c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4035020:	00810174 	movhi	r2,1029
 4035024:	1081f504 	addi	r2,r2,2004
 4035028:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 403502c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4035030:	e0fffc17 	ldw	r3,-16(fp)
 4035034:	e0bff917 	ldw	r2,-28(fp)
 4035038:	1885883a 	add	r2,r3,r2
 403503c:	10c00044 	addi	r3,r2,1
 4035040:	e0bffb17 	ldw	r2,-20(fp)
 4035044:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4035048:	e0bffb17 	ldw	r2,-20(fp)
 403504c:	10c00217 	ldw	r3,8(r2)
 4035050:	e0bff917 	ldw	r2,-28(fp)
 4035054:	1880042e 	bgeu	r3,r2,4035068 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4035058:	e0fffb17 	ldw	r3,-20(fp)
 403505c:	00800044 	movi	r2,1
 4035060:	18800405 	stb	r2,16(r3)
 4035064:	00000206 	br	4035070 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4035068:	e0bffb17 	ldw	r2,-20(fp)
 403506c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4035070:	e0fffb17 	ldw	r3,-20(fp)
 4035074:	00810174 	movhi	r2,1029
 4035078:	10ba0404 	addi	r2,r2,-6128
 403507c:	e0bff615 	stw	r2,-40(fp)
 4035080:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4035084:	e0fff717 	ldw	r3,-36(fp)
 4035088:	e0bff617 	ldw	r2,-40(fp)
 403508c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4035090:	e0bff617 	ldw	r2,-40(fp)
 4035094:	10c00017 	ldw	r3,0(r2)
 4035098:	e0bff717 	ldw	r2,-36(fp)
 403509c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40350a0:	e0bff617 	ldw	r2,-40(fp)
 40350a4:	10c00017 	ldw	r3,0(r2)
 40350a8:	e0bff717 	ldw	r2,-36(fp)
 40350ac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 40350b0:	e0fff617 	ldw	r3,-40(fp)
 40350b4:	e0bff717 	ldw	r2,-36(fp)
 40350b8:	18800015 	stw	r2,0(r3)
 40350bc:	e0bffa17 	ldw	r2,-24(fp)
 40350c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40350c4:	e0bff517 	ldw	r2,-44(fp)
 40350c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40350cc:	e03fff15 	stw	zero,-4(fp)
 40350d0:	00000506 	br	40350e8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 40350d4:	00bffa84 	movi	r2,-22
 40350d8:	e0bfff15 	stw	r2,-4(fp)
 40350dc:	00000206 	br	40350e8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 40350e0:	00bfde84 	movi	r2,-134
 40350e4:	e0bfff15 	stw	r2,-4(fp)
 40350e8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40350ec:	e037883a 	mov	sp,fp
 40350f0:	df000017 	ldw	fp,0(sp)
 40350f4:	dec00104 	addi	sp,sp,4
 40350f8:	f800283a 	ret

040350fc <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40350fc:	defff804 	addi	sp,sp,-32
 4035100:	dfc00715 	stw	ra,28(sp)
 4035104:	df000615 	stw	fp,24(sp)
 4035108:	df000604 	addi	fp,sp,24
 403510c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4035110:	e0bffc17 	ldw	r2,-16(fp)
 4035114:	1004803a 	cmplt	r2,r2,zero
 4035118:	1000081e 	bne	r2,zero,403513c <alt_close+0x40>
 403511c:	e0bffc17 	ldw	r2,-16(fp)
 4035120:	10800324 	muli	r2,r2,12
 4035124:	1007883a 	mov	r3,r2
 4035128:	00810174 	movhi	r2,1029
 403512c:	10b8fa04 	addi	r2,r2,-7192
 4035130:	1887883a 	add	r3,r3,r2
 4035134:	e0ffff15 	stw	r3,-4(fp)
 4035138:	00000106 	br	4035140 <alt_close+0x44>
 403513c:	e03fff15 	stw	zero,-4(fp)
 4035140:	e0bfff17 	ldw	r2,-4(fp)
 4035144:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4035148:	e0bffb17 	ldw	r2,-20(fp)
 403514c:	1005003a 	cmpeq	r2,r2,zero
 4035150:	10001d1e 	bne	r2,zero,40351c8 <alt_close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4035154:	e0bffb17 	ldw	r2,-20(fp)
 4035158:	10800017 	ldw	r2,0(r2)
 403515c:	10800417 	ldw	r2,16(r2)
 4035160:	1005003a 	cmpeq	r2,r2,zero
 4035164:	1000071e 	bne	r2,zero,4035184 <alt_close+0x88>
 4035168:	e0bffb17 	ldw	r2,-20(fp)
 403516c:	10800017 	ldw	r2,0(r2)
 4035170:	10800417 	ldw	r2,16(r2)
 4035174:	e13ffb17 	ldw	r4,-20(fp)
 4035178:	103ee83a 	callr	r2
 403517c:	e0bffe15 	stw	r2,-8(fp)
 4035180:	00000106 	br	4035188 <alt_close+0x8c>
 4035184:	e03ffe15 	stw	zero,-8(fp)
 4035188:	e0bffe17 	ldw	r2,-8(fp)
 403518c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4035190:	e13ffc17 	ldw	r4,-16(fp)
 4035194:	4035db40 	call	4035db4 <alt_release_fd>
    if (rval < 0)
 4035198:	e0bffa17 	ldw	r2,-24(fp)
 403519c:	1004403a 	cmpge	r2,r2,zero
 40351a0:	1000071e 	bne	r2,zero,40351c0 <alt_close+0xc4>
    {
      ALT_ERRNO = -rval;
 40351a4:	40351f80 	call	40351f8 <alt_get_errno>
 40351a8:	e0fffa17 	ldw	r3,-24(fp)
 40351ac:	00c7c83a 	sub	r3,zero,r3
 40351b0:	10c00015 	stw	r3,0(r2)
      return -1;
 40351b4:	00bfffc4 	movi	r2,-1
 40351b8:	e0bffd15 	stw	r2,-12(fp)
 40351bc:	00000806 	br	40351e0 <alt_close+0xe4>
    }
    return 0;
 40351c0:	e03ffd15 	stw	zero,-12(fp)
 40351c4:	00000606 	br	40351e0 <alt_close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40351c8:	40351f80 	call	40351f8 <alt_get_errno>
 40351cc:	1007883a 	mov	r3,r2
 40351d0:	00801444 	movi	r2,81
 40351d4:	18800015 	stw	r2,0(r3)
    return -1;
 40351d8:	00bfffc4 	movi	r2,-1
 40351dc:	e0bffd15 	stw	r2,-12(fp)
 40351e0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 40351e4:	e037883a 	mov	sp,fp
 40351e8:	dfc00117 	ldw	ra,4(sp)
 40351ec:	df000017 	ldw	fp,0(sp)
 40351f0:	dec00204 	addi	sp,sp,8
 40351f4:	f800283a 	ret

040351f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40351f8:	defffd04 	addi	sp,sp,-12
 40351fc:	dfc00215 	stw	ra,8(sp)
 4035200:	df000115 	stw	fp,4(sp)
 4035204:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4035208:	00810174 	movhi	r2,1029
 403520c:	10ba0204 	addi	r2,r2,-6136
 4035210:	10800017 	ldw	r2,0(r2)
 4035214:	1005003a 	cmpeq	r2,r2,zero
 4035218:	1000061e 	bne	r2,zero,4035234 <alt_get_errno+0x3c>
 403521c:	00810174 	movhi	r2,1029
 4035220:	10ba0204 	addi	r2,r2,-6136
 4035224:	10800017 	ldw	r2,0(r2)
 4035228:	103ee83a 	callr	r2
 403522c:	e0bfff15 	stw	r2,-4(fp)
 4035230:	00000306 	br	4035240 <alt_get_errno+0x48>
 4035234:	00810174 	movhi	r2,1029
 4035238:	10819f04 	addi	r2,r2,1660
 403523c:	e0bfff15 	stw	r2,-4(fp)
 4035240:	e0bfff17 	ldw	r2,-4(fp)
}
 4035244:	e037883a 	mov	sp,fp
 4035248:	dfc00117 	ldw	ra,4(sp)
 403524c:	df000017 	ldw	fp,0(sp)
 4035250:	dec00204 	addi	sp,sp,8
 4035254:	f800283a 	ret

04035258 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4035258:	defffe04 	addi	sp,sp,-8
 403525c:	df000115 	stw	fp,4(sp)
 4035260:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4035264:	e03fff15 	stw	zero,-4(fp)
 4035268:	00000506 	br	4035280 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 403526c:	e0bfff17 	ldw	r2,-4(fp)
 4035270:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4035274:	e0bfff17 	ldw	r2,-4(fp)
 4035278:	10800804 	addi	r2,r2,32
 403527c:	e0bfff15 	stw	r2,-4(fp)
 4035280:	e0bfff17 	ldw	r2,-4(fp)
 4035284:	10820030 	cmpltui	r2,r2,2048
 4035288:	103ff81e 	bne	r2,zero,403526c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 403528c:	e037883a 	mov	sp,fp
 4035290:	df000017 	ldw	fp,0(sp)
 4035294:	dec00104 	addi	sp,sp,4
 4035298:	f800283a 	ret

0403529c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 403529c:	defffc04 	addi	sp,sp,-16
 40352a0:	df000315 	stw	fp,12(sp)
 40352a4:	df000304 	addi	fp,sp,12
 40352a8:	e13ffd15 	stw	r4,-12(fp)
 40352ac:	e17ffe15 	stw	r5,-8(fp)
 40352b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40352b4:	e0bfff17 	ldw	r2,-4(fp)
}
 40352b8:	e037883a 	mov	sp,fp
 40352bc:	df000017 	ldw	fp,0(sp)
 40352c0:	dec00104 	addi	sp,sp,4
 40352c4:	f800283a 	ret

040352c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40352c8:	defff904 	addi	sp,sp,-28
 40352cc:	dfc00615 	stw	ra,24(sp)
 40352d0:	df000515 	stw	fp,20(sp)
 40352d4:	df000504 	addi	fp,sp,20
 40352d8:	e13ffd15 	stw	r4,-12(fp)
 40352dc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40352e0:	e0bffd17 	ldw	r2,-12(fp)
 40352e4:	1005003a 	cmpeq	r2,r2,zero
 40352e8:	1000041e 	bne	r2,zero,40352fc <alt_dev_llist_insert+0x34>
 40352ec:	e0bffd17 	ldw	r2,-12(fp)
 40352f0:	10800217 	ldw	r2,8(r2)
 40352f4:	1004c03a 	cmpne	r2,r2,zero
 40352f8:	1000071e 	bne	r2,zero,4035318 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 40352fc:	403537c0 	call	403537c <alt_get_errno>
 4035300:	1007883a 	mov	r3,r2
 4035304:	00800584 	movi	r2,22
 4035308:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 403530c:	00bffa84 	movi	r2,-22
 4035310:	e0bfff15 	stw	r2,-4(fp)
 4035314:	00001306 	br	4035364 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4035318:	e0fffd17 	ldw	r3,-12(fp)
 403531c:	e0bffe17 	ldw	r2,-8(fp)
 4035320:	e0bffb15 	stw	r2,-20(fp)
 4035324:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4035328:	e0fffc17 	ldw	r3,-16(fp)
 403532c:	e0bffb17 	ldw	r2,-20(fp)
 4035330:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4035334:	e0bffb17 	ldw	r2,-20(fp)
 4035338:	10c00017 	ldw	r3,0(r2)
 403533c:	e0bffc17 	ldw	r2,-16(fp)
 4035340:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4035344:	e0bffb17 	ldw	r2,-20(fp)
 4035348:	10c00017 	ldw	r3,0(r2)
 403534c:	e0bffc17 	ldw	r2,-16(fp)
 4035350:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4035354:	e0fffb17 	ldw	r3,-20(fp)
 4035358:	e0bffc17 	ldw	r2,-16(fp)
 403535c:	18800015 	stw	r2,0(r3)

  return 0;  
 4035360:	e03fff15 	stw	zero,-4(fp)
 4035364:	e0bfff17 	ldw	r2,-4(fp)
}
 4035368:	e037883a 	mov	sp,fp
 403536c:	dfc00117 	ldw	ra,4(sp)
 4035370:	df000017 	ldw	fp,0(sp)
 4035374:	dec00204 	addi	sp,sp,8
 4035378:	f800283a 	ret

0403537c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 403537c:	defffd04 	addi	sp,sp,-12
 4035380:	dfc00215 	stw	ra,8(sp)
 4035384:	df000115 	stw	fp,4(sp)
 4035388:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 403538c:	00810174 	movhi	r2,1029
 4035390:	10ba0204 	addi	r2,r2,-6136
 4035394:	10800017 	ldw	r2,0(r2)
 4035398:	1005003a 	cmpeq	r2,r2,zero
 403539c:	1000061e 	bne	r2,zero,40353b8 <alt_get_errno+0x3c>
 40353a0:	00810174 	movhi	r2,1029
 40353a4:	10ba0204 	addi	r2,r2,-6136
 40353a8:	10800017 	ldw	r2,0(r2)
 40353ac:	103ee83a 	callr	r2
 40353b0:	e0bfff15 	stw	r2,-4(fp)
 40353b4:	00000306 	br	40353c4 <alt_get_errno+0x48>
 40353b8:	00810174 	movhi	r2,1029
 40353bc:	10819f04 	addi	r2,r2,1660
 40353c0:	e0bfff15 	stw	r2,-4(fp)
 40353c4:	e0bfff17 	ldw	r2,-4(fp)
}
 40353c8:	e037883a 	mov	sp,fp
 40353cc:	dfc00117 	ldw	ra,4(sp)
 40353d0:	df000017 	ldw	fp,0(sp)
 40353d4:	dec00204 	addi	sp,sp,8
 40353d8:	f800283a 	ret

040353dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40353dc:	defffd04 	addi	sp,sp,-12
 40353e0:	dfc00215 	stw	ra,8(sp)
 40353e4:	df000115 	stw	fp,4(sp)
 40353e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40353ec:	00bfff04 	movi	r2,-4
 40353f0:	00c10134 	movhi	r3,1028
 40353f4:	18daf304 	addi	r3,r3,27596
 40353f8:	1885883a 	add	r2,r3,r2
 40353fc:	e0bfff15 	stw	r2,-4(fp)
 4035400:	00000606 	br	403541c <_do_ctors+0x40>
        (*ctor) (); 
 4035404:	e0bfff17 	ldw	r2,-4(fp)
 4035408:	10800017 	ldw	r2,0(r2)
 403540c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4035410:	e0bfff17 	ldw	r2,-4(fp)
 4035414:	10bfff04 	addi	r2,r2,-4
 4035418:	e0bfff15 	stw	r2,-4(fp)
 403541c:	e0ffff17 	ldw	r3,-4(fp)
 4035420:	00810134 	movhi	r2,1028
 4035424:	109af204 	addi	r2,r2,27592
 4035428:	18bff62e 	bgeu	r3,r2,4035404 <_do_ctors+0x28>
        (*ctor) (); 
}
 403542c:	e037883a 	mov	sp,fp
 4035430:	dfc00117 	ldw	ra,4(sp)
 4035434:	df000017 	ldw	fp,0(sp)
 4035438:	dec00204 	addi	sp,sp,8
 403543c:	f800283a 	ret

04035440 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4035440:	defffd04 	addi	sp,sp,-12
 4035444:	dfc00215 	stw	ra,8(sp)
 4035448:	df000115 	stw	fp,4(sp)
 403544c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4035450:	00bfff04 	movi	r2,-4
 4035454:	00c10134 	movhi	r3,1028
 4035458:	18daf304 	addi	r3,r3,27596
 403545c:	1885883a 	add	r2,r3,r2
 4035460:	e0bfff15 	stw	r2,-4(fp)
 4035464:	00000606 	br	4035480 <_do_dtors+0x40>
        (*dtor) (); 
 4035468:	e0bfff17 	ldw	r2,-4(fp)
 403546c:	10800017 	ldw	r2,0(r2)
 4035470:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4035474:	e0bfff17 	ldw	r2,-4(fp)
 4035478:	10bfff04 	addi	r2,r2,-4
 403547c:	e0bfff15 	stw	r2,-4(fp)
 4035480:	e0ffff17 	ldw	r3,-4(fp)
 4035484:	00810134 	movhi	r2,1028
 4035488:	109af304 	addi	r2,r2,27596
 403548c:	18bff62e 	bgeu	r3,r2,4035468 <_do_dtors+0x28>
        (*dtor) (); 
}
 4035490:	e037883a 	mov	sp,fp
 4035494:	dfc00117 	ldw	ra,4(sp)
 4035498:	df000017 	ldw	fp,0(sp)
 403549c:	dec00204 	addi	sp,sp,8
 40354a0:	f800283a 	ret

040354a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40354a4:	defff904 	addi	sp,sp,-28
 40354a8:	dfc00615 	stw	ra,24(sp)
 40354ac:	df000515 	stw	fp,20(sp)
 40354b0:	df000504 	addi	fp,sp,20
 40354b4:	e13ffd15 	stw	r4,-12(fp)
 40354b8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40354bc:	e0bffe17 	ldw	r2,-8(fp)
 40354c0:	10800017 	ldw	r2,0(r2)
 40354c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40354c8:	e13ffd17 	ldw	r4,-12(fp)
 40354cc:	40029d00 	call	40029d0 <strlen>
 40354d0:	10800044 	addi	r2,r2,1
 40354d4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40354d8:	00000d06 	br	4035510 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40354dc:	e0bffc17 	ldw	r2,-16(fp)
 40354e0:	11000217 	ldw	r4,8(r2)
 40354e4:	e1bffb17 	ldw	r6,-20(fp)
 40354e8:	e17ffd17 	ldw	r5,-12(fp)
 40354ec:	404600c0 	call	404600c <memcmp>
 40354f0:	1004c03a 	cmpne	r2,r2,zero
 40354f4:	1000031e 	bne	r2,zero,4035504 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40354f8:	e0bffc17 	ldw	r2,-16(fp)
 40354fc:	e0bfff15 	stw	r2,-4(fp)
 4035500:	00000706 	br	4035520 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4035504:	e0bffc17 	ldw	r2,-16(fp)
 4035508:	10800017 	ldw	r2,0(r2)
 403550c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4035510:	e0fffe17 	ldw	r3,-8(fp)
 4035514:	e0bffc17 	ldw	r2,-16(fp)
 4035518:	10fff01e 	bne	r2,r3,40354dc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 403551c:	e03fff15 	stw	zero,-4(fp)
 4035520:	e0bfff17 	ldw	r2,-4(fp)
}
 4035524:	e037883a 	mov	sp,fp
 4035528:	dfc00117 	ldw	ra,4(sp)
 403552c:	df000017 	ldw	fp,0(sp)
 4035530:	dec00204 	addi	sp,sp,8
 4035534:	f800283a 	ret

04035538 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4035538:	defffe04 	addi	sp,sp,-8
 403553c:	dfc00115 	stw	ra,4(sp)
 4035540:	df000015 	stw	fp,0(sp)
 4035544:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4035548:	0009883a 	mov	r4,zero
 403554c:	01440004 	movi	r5,4096
 4035550:	4044aa00 	call	4044aa0 <alt_icache_flush>
#endif
}
 4035554:	e037883a 	mov	sp,fp
 4035558:	dfc00117 	ldw	ra,4(sp)
 403555c:	df000017 	ldw	fp,0(sp)
 4035560:	dec00204 	addi	sp,sp,8
 4035564:	f800283a 	ret

04035568 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4035568:	defff904 	addi	sp,sp,-28
 403556c:	dfc00615 	stw	ra,24(sp)
 4035570:	df000515 	stw	fp,20(sp)
 4035574:	df000504 	addi	fp,sp,20
 4035578:	e13ffc15 	stw	r4,-16(fp)
 403557c:	e17ffd15 	stw	r5,-12(fp)
 4035580:	e1bffe15 	stw	r6,-8(fp)
 4035584:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4035588:	e0800217 	ldw	r2,8(fp)
 403558c:	d8800015 	stw	r2,0(sp)
 4035590:	e13ffc17 	ldw	r4,-16(fp)
 4035594:	e17ffd17 	ldw	r5,-12(fp)
 4035598:	e1bffe17 	ldw	r6,-8(fp)
 403559c:	e1ffff17 	ldw	r7,-4(fp)
 40355a0:	403573c0 	call	403573c <alt_iic_isr_register>
}  
 40355a4:	e037883a 	mov	sp,fp
 40355a8:	dfc00117 	ldw	ra,4(sp)
 40355ac:	df000017 	ldw	fp,0(sp)
 40355b0:	dec00204 	addi	sp,sp,8
 40355b4:	f800283a 	ret

040355b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40355b8:	defff904 	addi	sp,sp,-28
 40355bc:	df000615 	stw	fp,24(sp)
 40355c0:	df000604 	addi	fp,sp,24
 40355c4:	e13ffe15 	stw	r4,-8(fp)
 40355c8:	e17fff15 	stw	r5,-4(fp)
 40355cc:	e0bfff17 	ldw	r2,-4(fp)
 40355d0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40355d4:	0005303a 	rdctl	r2,status
 40355d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40355dc:	e0fffb17 	ldw	r3,-20(fp)
 40355e0:	00bfff84 	movi	r2,-2
 40355e4:	1884703a 	and	r2,r3,r2
 40355e8:	1001703a 	wrctl	status,r2
  
  return context;
 40355ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40355f0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 40355f4:	e0fffc17 	ldw	r3,-16(fp)
 40355f8:	00800044 	movi	r2,1
 40355fc:	10c4983a 	sll	r2,r2,r3
 4035600:	1007883a 	mov	r3,r2
 4035604:	00810174 	movhi	r2,1029
 4035608:	1081f304 	addi	r2,r2,1996
 403560c:	10800017 	ldw	r2,0(r2)
 4035610:	1886b03a 	or	r3,r3,r2
 4035614:	00810174 	movhi	r2,1029
 4035618:	1081f304 	addi	r2,r2,1996
 403561c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4035620:	00810174 	movhi	r2,1029
 4035624:	1081f304 	addi	r2,r2,1996
 4035628:	10800017 	ldw	r2,0(r2)
 403562c:	100170fa 	wrctl	ienable,r2
 4035630:	e0bffd17 	ldw	r2,-12(fp)
 4035634:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4035638:	e0bffa17 	ldw	r2,-24(fp)
 403563c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4035640:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4035644:	e037883a 	mov	sp,fp
 4035648:	df000017 	ldw	fp,0(sp)
 403564c:	dec00104 	addi	sp,sp,4
 4035650:	f800283a 	ret

04035654 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4035654:	defff904 	addi	sp,sp,-28
 4035658:	df000615 	stw	fp,24(sp)
 403565c:	df000604 	addi	fp,sp,24
 4035660:	e13ffe15 	stw	r4,-8(fp)
 4035664:	e17fff15 	stw	r5,-4(fp)
 4035668:	e0bfff17 	ldw	r2,-4(fp)
 403566c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035670:	0005303a 	rdctl	r2,status
 4035674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035678:	e0fffb17 	ldw	r3,-20(fp)
 403567c:	00bfff84 	movi	r2,-2
 4035680:	1884703a 	and	r2,r3,r2
 4035684:	1001703a 	wrctl	status,r2
  
  return context;
 4035688:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 403568c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4035690:	e0fffc17 	ldw	r3,-16(fp)
 4035694:	00800044 	movi	r2,1
 4035698:	10c4983a 	sll	r2,r2,r3
 403569c:	0084303a 	nor	r2,zero,r2
 40356a0:	1007883a 	mov	r3,r2
 40356a4:	00810174 	movhi	r2,1029
 40356a8:	1081f304 	addi	r2,r2,1996
 40356ac:	10800017 	ldw	r2,0(r2)
 40356b0:	1886703a 	and	r3,r3,r2
 40356b4:	00810174 	movhi	r2,1029
 40356b8:	1081f304 	addi	r2,r2,1996
 40356bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40356c0:	00810174 	movhi	r2,1029
 40356c4:	1081f304 	addi	r2,r2,1996
 40356c8:	10800017 	ldw	r2,0(r2)
 40356cc:	100170fa 	wrctl	ienable,r2
 40356d0:	e0bffd17 	ldw	r2,-12(fp)
 40356d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40356d8:	e0bffa17 	ldw	r2,-24(fp)
 40356dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40356e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 40356e4:	e037883a 	mov	sp,fp
 40356e8:	df000017 	ldw	fp,0(sp)
 40356ec:	dec00104 	addi	sp,sp,4
 40356f0:	f800283a 	ret

040356f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40356f4:	defffc04 	addi	sp,sp,-16
 40356f8:	df000315 	stw	fp,12(sp)
 40356fc:	df000304 	addi	fp,sp,12
 4035700:	e13ffe15 	stw	r4,-8(fp)
 4035704:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4035708:	000530fa 	rdctl	r2,ienable
 403570c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4035710:	e0ffff17 	ldw	r3,-4(fp)
 4035714:	00800044 	movi	r2,1
 4035718:	10c4983a 	sll	r2,r2,r3
 403571c:	1007883a 	mov	r3,r2
 4035720:	e0bffd17 	ldw	r2,-12(fp)
 4035724:	1884703a 	and	r2,r3,r2
 4035728:	1004c03a 	cmpne	r2,r2,zero
}
 403572c:	e037883a 	mov	sp,fp
 4035730:	df000017 	ldw	fp,0(sp)
 4035734:	dec00104 	addi	sp,sp,4
 4035738:	f800283a 	ret

0403573c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 403573c:	defff404 	addi	sp,sp,-48
 4035740:	dfc00b15 	stw	ra,44(sp)
 4035744:	df000a15 	stw	fp,40(sp)
 4035748:	df000a04 	addi	fp,sp,40
 403574c:	e13ffb15 	stw	r4,-20(fp)
 4035750:	e17ffc15 	stw	r5,-16(fp)
 4035754:	e1bffd15 	stw	r6,-12(fp)
 4035758:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 403575c:	00bffa84 	movi	r2,-22
 4035760:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4035764:	e0bffc17 	ldw	r2,-16(fp)
 4035768:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 403576c:	e0bff917 	ldw	r2,-28(fp)
 4035770:	10800808 	cmpgei	r2,r2,32
 4035774:	1000291e 	bne	r2,zero,403581c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035778:	0005303a 	rdctl	r2,status
 403577c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035780:	e0fff717 	ldw	r3,-36(fp)
 4035784:	00bfff84 	movi	r2,-2
 4035788:	1884703a 	and	r2,r3,r2
 403578c:	1001703a 	wrctl	status,r2
  
  return context;
 4035790:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4035794:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 4035798:	e0bff917 	ldw	r2,-28(fp)
 403579c:	00c101b4 	movhi	r3,1030
 40357a0:	18e3b004 	addi	r3,r3,-28992
 40357a4:	100490fa 	slli	r2,r2,3
 40357a8:	10c7883a 	add	r3,r2,r3
 40357ac:	e0bffd17 	ldw	r2,-12(fp)
 40357b0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 40357b4:	e0bff917 	ldw	r2,-28(fp)
 40357b8:	00c101b4 	movhi	r3,1030
 40357bc:	18e3b004 	addi	r3,r3,-28992
 40357c0:	100490fa 	slli	r2,r2,3
 40357c4:	10c5883a 	add	r2,r2,r3
 40357c8:	10c00104 	addi	r3,r2,4
 40357cc:	e0bffe17 	ldw	r2,-8(fp)
 40357d0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40357d4:	e0bffd17 	ldw	r2,-12(fp)
 40357d8:	1005003a 	cmpeq	r2,r2,zero
 40357dc:	1000051e 	bne	r2,zero,40357f4 <alt_iic_isr_register+0xb8>
 40357e0:	e17ff917 	ldw	r5,-28(fp)
 40357e4:	e13ffb17 	ldw	r4,-20(fp)
 40357e8:	40355b80 	call	40355b8 <alt_ic_irq_enable>
 40357ec:	e0bfff15 	stw	r2,-4(fp)
 40357f0:	00000406 	br	4035804 <alt_iic_isr_register+0xc8>
 40357f4:	e17ff917 	ldw	r5,-28(fp)
 40357f8:	e13ffb17 	ldw	r4,-20(fp)
 40357fc:	40356540 	call	4035654 <alt_ic_irq_disable>
 4035800:	e0bfff15 	stw	r2,-4(fp)
 4035804:	e0bfff17 	ldw	r2,-4(fp)
 4035808:	e0bffa15 	stw	r2,-24(fp)
 403580c:	e0bff817 	ldw	r2,-32(fp)
 4035810:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4035814:	e0bff617 	ldw	r2,-40(fp)
 4035818:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 403581c:	e0bffa17 	ldw	r2,-24(fp)
}
 4035820:	e037883a 	mov	sp,fp
 4035824:	dfc00117 	ldw	ra,4(sp)
 4035828:	df000017 	ldw	fp,0(sp)
 403582c:	dec00204 	addi	sp,sp,8
 4035830:	f800283a 	ret

04035834 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4035834:	defff904 	addi	sp,sp,-28
 4035838:	dfc00615 	stw	ra,24(sp)
 403583c:	df000515 	stw	fp,20(sp)
 4035840:	df000504 	addi	fp,sp,20
 4035844:	e13ffc15 	stw	r4,-16(fp)
 4035848:	e17ffd15 	stw	r5,-12(fp)
 403584c:	e1bffe15 	stw	r6,-8(fp)
 4035850:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4035854:	e13ffd17 	ldw	r4,-12(fp)
 4035858:	e17ffe17 	ldw	r5,-8(fp)
 403585c:	e1bfff17 	ldw	r6,-4(fp)
 4035860:	4035a4c0 	call	4035a4c <open>
 4035864:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4035868:	e0bffb17 	ldw	r2,-20(fp)
 403586c:	1004803a 	cmplt	r2,r2,zero
 4035870:	10001c1e 	bne	r2,zero,40358e4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4035874:	e0bffb17 	ldw	r2,-20(fp)
 4035878:	00c10174 	movhi	r3,1029
 403587c:	18f8fa04 	addi	r3,r3,-7192
 4035880:	10800324 	muli	r2,r2,12
 4035884:	10c5883a 	add	r2,r2,r3
 4035888:	10c00017 	ldw	r3,0(r2)
 403588c:	e0bffc17 	ldw	r2,-16(fp)
 4035890:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4035894:	e0bffb17 	ldw	r2,-20(fp)
 4035898:	00c10174 	movhi	r3,1029
 403589c:	18f8fa04 	addi	r3,r3,-7192
 40358a0:	10800324 	muli	r2,r2,12
 40358a4:	10c5883a 	add	r2,r2,r3
 40358a8:	10800104 	addi	r2,r2,4
 40358ac:	10c00017 	ldw	r3,0(r2)
 40358b0:	e0bffc17 	ldw	r2,-16(fp)
 40358b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40358b8:	e0bffb17 	ldw	r2,-20(fp)
 40358bc:	00c10174 	movhi	r3,1029
 40358c0:	18f8fa04 	addi	r3,r3,-7192
 40358c4:	10800324 	muli	r2,r2,12
 40358c8:	10c5883a 	add	r2,r2,r3
 40358cc:	10800204 	addi	r2,r2,8
 40358d0:	10c00017 	ldw	r3,0(r2)
 40358d4:	e0bffc17 	ldw	r2,-16(fp)
 40358d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40358dc:	e13ffb17 	ldw	r4,-20(fp)
 40358e0:	4035db40 	call	4035db4 <alt_release_fd>
  }
} 
 40358e4:	e037883a 	mov	sp,fp
 40358e8:	dfc00117 	ldw	ra,4(sp)
 40358ec:	df000017 	ldw	fp,0(sp)
 40358f0:	dec00204 	addi	sp,sp,8
 40358f4:	f800283a 	ret

040358f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40358f8:	defffb04 	addi	sp,sp,-20
 40358fc:	dfc00415 	stw	ra,16(sp)
 4035900:	df000315 	stw	fp,12(sp)
 4035904:	df000304 	addi	fp,sp,12
 4035908:	e13ffd15 	stw	r4,-12(fp)
 403590c:	e17ffe15 	stw	r5,-8(fp)
 4035910:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4035914:	01010174 	movhi	r4,1029
 4035918:	2138fd04 	addi	r4,r4,-7180
 403591c:	e17ffd17 	ldw	r5,-12(fp)
 4035920:	01800044 	movi	r6,1
 4035924:	01c07fc4 	movi	r7,511
 4035928:	40358340 	call	4035834 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 403592c:	01010174 	movhi	r4,1029
 4035930:	2138fa04 	addi	r4,r4,-7192
 4035934:	e17ffe17 	ldw	r5,-8(fp)
 4035938:	000d883a 	mov	r6,zero
 403593c:	01c07fc4 	movi	r7,511
 4035940:	40358340 	call	4035834 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4035944:	01010174 	movhi	r4,1029
 4035948:	21390004 	addi	r4,r4,-7168
 403594c:	e17fff17 	ldw	r5,-4(fp)
 4035950:	01800044 	movi	r6,1
 4035954:	01c07fc4 	movi	r7,511
 4035958:	40358340 	call	4035834 <alt_open_fd>
}  
 403595c:	e037883a 	mov	sp,fp
 4035960:	dfc00117 	ldw	ra,4(sp)
 4035964:	df000017 	ldw	fp,0(sp)
 4035968:	dec00204 	addi	sp,sp,8
 403596c:	f800283a 	ret

04035970 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4035970:	defffc04 	addi	sp,sp,-16
 4035974:	df000315 	stw	fp,12(sp)
 4035978:	df000304 	addi	fp,sp,12
 403597c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4035980:	e0bffe17 	ldw	r2,-8(fp)
 4035984:	10800217 	ldw	r2,8(r2)
 4035988:	10d00034 	orhi	r3,r2,16384
 403598c:	e0bffe17 	ldw	r2,-8(fp)
 4035990:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4035994:	e03ffd15 	stw	zero,-12(fp)
 4035998:	00002006 	br	4035a1c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 403599c:	e0bffd17 	ldw	r2,-12(fp)
 40359a0:	00c10174 	movhi	r3,1029
 40359a4:	18f8fa04 	addi	r3,r3,-7192
 40359a8:	10800324 	muli	r2,r2,12
 40359ac:	10c5883a 	add	r2,r2,r3
 40359b0:	10c00017 	ldw	r3,0(r2)
 40359b4:	e0bffe17 	ldw	r2,-8(fp)
 40359b8:	10800017 	ldw	r2,0(r2)
 40359bc:	1880141e 	bne	r3,r2,4035a10 <alt_file_locked+0xa0>
 40359c0:	e0bffd17 	ldw	r2,-12(fp)
 40359c4:	00c10174 	movhi	r3,1029
 40359c8:	18f8fa04 	addi	r3,r3,-7192
 40359cc:	10800324 	muli	r2,r2,12
 40359d0:	10c5883a 	add	r2,r2,r3
 40359d4:	10800204 	addi	r2,r2,8
 40359d8:	10800017 	ldw	r2,0(r2)
 40359dc:	1004403a 	cmpge	r2,r2,zero
 40359e0:	10000b1e 	bne	r2,zero,4035a10 <alt_file_locked+0xa0>
 40359e4:	e0bffd17 	ldw	r2,-12(fp)
 40359e8:	10800324 	muli	r2,r2,12
 40359ec:	1007883a 	mov	r3,r2
 40359f0:	00810174 	movhi	r2,1029
 40359f4:	10b8fa04 	addi	r2,r2,-7192
 40359f8:	1887883a 	add	r3,r3,r2
 40359fc:	e0bffe17 	ldw	r2,-8(fp)
 4035a00:	18800326 	beq	r3,r2,4035a10 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4035a04:	00bffcc4 	movi	r2,-13
 4035a08:	e0bfff15 	stw	r2,-4(fp)
 4035a0c:	00000a06 	br	4035a38 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4035a10:	e0bffd17 	ldw	r2,-12(fp)
 4035a14:	10800044 	addi	r2,r2,1
 4035a18:	e0bffd15 	stw	r2,-12(fp)
 4035a1c:	00810174 	movhi	r2,1029
 4035a20:	10ba0104 	addi	r2,r2,-6140
 4035a24:	10800017 	ldw	r2,0(r2)
 4035a28:	1007883a 	mov	r3,r2
 4035a2c:	e0bffd17 	ldw	r2,-12(fp)
 4035a30:	18bfda2e 	bgeu	r3,r2,403599c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4035a34:	e03fff15 	stw	zero,-4(fp)
 4035a38:	e0bfff17 	ldw	r2,-4(fp)
}
 4035a3c:	e037883a 	mov	sp,fp
 4035a40:	df000017 	ldw	fp,0(sp)
 4035a44:	dec00104 	addi	sp,sp,4
 4035a48:	f800283a 	ret

04035a4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4035a4c:	defff404 	addi	sp,sp,-48
 4035a50:	dfc00b15 	stw	ra,44(sp)
 4035a54:	df000a15 	stw	fp,40(sp)
 4035a58:	df000a04 	addi	fp,sp,40
 4035a5c:	e13ffb15 	stw	r4,-20(fp)
 4035a60:	e17ffc15 	stw	r5,-16(fp)
 4035a64:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4035a68:	00bfffc4 	movi	r2,-1
 4035a6c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4035a70:	00bffb44 	movi	r2,-19
 4035a74:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4035a78:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4035a7c:	e13ffb17 	ldw	r4,-20(fp)
 4035a80:	01410174 	movhi	r5,1029
 4035a84:	2979ff04 	addi	r5,r5,-6148
 4035a88:	40354a40 	call	40354a4 <alt_find_dev>
 4035a8c:	e0bffa15 	stw	r2,-24(fp)
 4035a90:	e0bffa17 	ldw	r2,-24(fp)
 4035a94:	1004c03a 	cmpne	r2,r2,zero
 4035a98:	1000051e 	bne	r2,zero,4035ab0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4035a9c:	e13ffb17 	ldw	r4,-20(fp)
 4035aa0:	404488c0 	call	404488c <alt_find_file>
 4035aa4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4035aa8:	00800044 	movi	r2,1
 4035aac:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4035ab0:	e0bffa17 	ldw	r2,-24(fp)
 4035ab4:	1005003a 	cmpeq	r2,r2,zero
 4035ab8:	1000301e 	bne	r2,zero,4035b7c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4035abc:	e13ffa17 	ldw	r4,-24(fp)
 4035ac0:	40449ac0 	call	40449ac <alt_get_fd>
 4035ac4:	e0bff815 	stw	r2,-32(fp)
 4035ac8:	e0bff817 	ldw	r2,-32(fp)
 4035acc:	1004403a 	cmpge	r2,r2,zero
 4035ad0:	1000031e 	bne	r2,zero,4035ae0 <open+0x94>
    {
      status = index;
 4035ad4:	e0bff817 	ldw	r2,-32(fp)
 4035ad8:	e0bff715 	stw	r2,-36(fp)
 4035adc:	00002906 	br	4035b84 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4035ae0:	e0bff817 	ldw	r2,-32(fp)
 4035ae4:	10800324 	muli	r2,r2,12
 4035ae8:	1007883a 	mov	r3,r2
 4035aec:	00810174 	movhi	r2,1029
 4035af0:	10b8fa04 	addi	r2,r2,-7192
 4035af4:	1885883a 	add	r2,r3,r2
 4035af8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4035afc:	e0fffc17 	ldw	r3,-16(fp)
 4035b00:	00900034 	movhi	r2,16384
 4035b04:	10bfffc4 	addi	r2,r2,-1
 4035b08:	1886703a 	and	r3,r3,r2
 4035b0c:	e0bff917 	ldw	r2,-28(fp)
 4035b10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4035b14:	e0bff617 	ldw	r2,-40(fp)
 4035b18:	1004c03a 	cmpne	r2,r2,zero
 4035b1c:	1000061e 	bne	r2,zero,4035b38 <open+0xec>
 4035b20:	e13ff917 	ldw	r4,-28(fp)
 4035b24:	40359700 	call	4035970 <alt_file_locked>
 4035b28:	e0bff715 	stw	r2,-36(fp)
 4035b2c:	e0bff717 	ldw	r2,-36(fp)
 4035b30:	1004803a 	cmplt	r2,r2,zero
 4035b34:	1000131e 	bne	r2,zero,4035b84 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4035b38:	e0bffa17 	ldw	r2,-24(fp)
 4035b3c:	10800317 	ldw	r2,12(r2)
 4035b40:	1005003a 	cmpeq	r2,r2,zero
 4035b44:	1000091e 	bne	r2,zero,4035b6c <open+0x120>
 4035b48:	e0bffa17 	ldw	r2,-24(fp)
 4035b4c:	10800317 	ldw	r2,12(r2)
 4035b50:	e13ff917 	ldw	r4,-28(fp)
 4035b54:	e17ffb17 	ldw	r5,-20(fp)
 4035b58:	e1bffc17 	ldw	r6,-16(fp)
 4035b5c:	e1fffd17 	ldw	r7,-12(fp)
 4035b60:	103ee83a 	callr	r2
 4035b64:	e0bfff15 	stw	r2,-4(fp)
 4035b68:	00000106 	br	4035b70 <open+0x124>
 4035b6c:	e03fff15 	stw	zero,-4(fp)
 4035b70:	e0bfff17 	ldw	r2,-4(fp)
 4035b74:	e0bff715 	stw	r2,-36(fp)
 4035b78:	00000206 	br	4035b84 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4035b7c:	00bffb44 	movi	r2,-19
 4035b80:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4035b84:	e0bff717 	ldw	r2,-36(fp)
 4035b88:	1004403a 	cmpge	r2,r2,zero
 4035b8c:	1000091e 	bne	r2,zero,4035bb4 <open+0x168>
  {
    alt_release_fd (index);  
 4035b90:	e13ff817 	ldw	r4,-32(fp)
 4035b94:	4035db40 	call	4035db4 <alt_release_fd>
    ALT_ERRNO = -status;
 4035b98:	4035bd40 	call	4035bd4 <alt_get_errno>
 4035b9c:	e0fff717 	ldw	r3,-36(fp)
 4035ba0:	00c7c83a 	sub	r3,zero,r3
 4035ba4:	10c00015 	stw	r3,0(r2)
    return -1;
 4035ba8:	00bfffc4 	movi	r2,-1
 4035bac:	e0bffe15 	stw	r2,-8(fp)
 4035bb0:	00000206 	br	4035bbc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 4035bb4:	e0bff817 	ldw	r2,-32(fp)
 4035bb8:	e0bffe15 	stw	r2,-8(fp)
 4035bbc:	e0bffe17 	ldw	r2,-8(fp)
}
 4035bc0:	e037883a 	mov	sp,fp
 4035bc4:	dfc00117 	ldw	ra,4(sp)
 4035bc8:	df000017 	ldw	fp,0(sp)
 4035bcc:	dec00204 	addi	sp,sp,8
 4035bd0:	f800283a 	ret

04035bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4035bd4:	defffd04 	addi	sp,sp,-12
 4035bd8:	dfc00215 	stw	ra,8(sp)
 4035bdc:	df000115 	stw	fp,4(sp)
 4035be0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4035be4:	00810174 	movhi	r2,1029
 4035be8:	10ba0204 	addi	r2,r2,-6136
 4035bec:	10800017 	ldw	r2,0(r2)
 4035bf0:	1005003a 	cmpeq	r2,r2,zero
 4035bf4:	1000061e 	bne	r2,zero,4035c10 <alt_get_errno+0x3c>
 4035bf8:	00810174 	movhi	r2,1029
 4035bfc:	10ba0204 	addi	r2,r2,-6136
 4035c00:	10800017 	ldw	r2,0(r2)
 4035c04:	103ee83a 	callr	r2
 4035c08:	e0bfff15 	stw	r2,-4(fp)
 4035c0c:	00000306 	br	4035c1c <alt_get_errno+0x48>
 4035c10:	00810174 	movhi	r2,1029
 4035c14:	10819f04 	addi	r2,r2,1660
 4035c18:	e0bfff15 	stw	r2,-4(fp)
 4035c1c:	e0bfff17 	ldw	r2,-4(fp)
}
 4035c20:	e037883a 	mov	sp,fp
 4035c24:	dfc00117 	ldw	ra,4(sp)
 4035c28:	df000017 	ldw	fp,0(sp)
 4035c2c:	dec00204 	addi	sp,sp,8
 4035c30:	f800283a 	ret

04035c34 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4035c34:	defff704 	addi	sp,sp,-36
 4035c38:	dfc00815 	stw	ra,32(sp)
 4035c3c:	df000715 	stw	fp,28(sp)
 4035c40:	df000704 	addi	fp,sp,28
 4035c44:	e13ffb15 	stw	r4,-20(fp)
 4035c48:	e17ffc15 	stw	r5,-16(fp)
 4035c4c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4035c50:	e0bffb17 	ldw	r2,-20(fp)
 4035c54:	1004803a 	cmplt	r2,r2,zero
 4035c58:	1000081e 	bne	r2,zero,4035c7c <alt_read+0x48>
 4035c5c:	e0bffb17 	ldw	r2,-20(fp)
 4035c60:	10800324 	muli	r2,r2,12
 4035c64:	1007883a 	mov	r3,r2
 4035c68:	00810174 	movhi	r2,1029
 4035c6c:	10b8fa04 	addi	r2,r2,-7192
 4035c70:	1887883a 	add	r3,r3,r2
 4035c74:	e0ffff15 	stw	r3,-4(fp)
 4035c78:	00000106 	br	4035c80 <alt_read+0x4c>
 4035c7c:	e03fff15 	stw	zero,-4(fp)
 4035c80:	e0bfff17 	ldw	r2,-4(fp)
 4035c84:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4035c88:	e0bffa17 	ldw	r2,-24(fp)
 4035c8c:	1005003a 	cmpeq	r2,r2,zero
 4035c90:	1000241e 	bne	r2,zero,4035d24 <alt_read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4035c94:	e0bffa17 	ldw	r2,-24(fp)
 4035c98:	10800217 	ldw	r2,8(r2)
 4035c9c:	108000cc 	andi	r2,r2,3
 4035ca0:	10800060 	cmpeqi	r2,r2,1
 4035ca4:	10001a1e 	bne	r2,zero,4035d10 <alt_read+0xdc>
 4035ca8:	e0bffa17 	ldw	r2,-24(fp)
 4035cac:	10800017 	ldw	r2,0(r2)
 4035cb0:	10800517 	ldw	r2,20(r2)
 4035cb4:	1005003a 	cmpeq	r2,r2,zero
 4035cb8:	1000151e 	bne	r2,zero,4035d10 <alt_read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4035cbc:	e0bffa17 	ldw	r2,-24(fp)
 4035cc0:	10800017 	ldw	r2,0(r2)
 4035cc4:	10800517 	ldw	r2,20(r2)
 4035cc8:	e17ffc17 	ldw	r5,-16(fp)
 4035ccc:	e1bffd17 	ldw	r6,-12(fp)
 4035cd0:	e13ffa17 	ldw	r4,-24(fp)
 4035cd4:	103ee83a 	callr	r2
 4035cd8:	e0bff915 	stw	r2,-28(fp)
 4035cdc:	e0bff917 	ldw	r2,-28(fp)
 4035ce0:	1004403a 	cmpge	r2,r2,zero
 4035ce4:	1000071e 	bne	r2,zero,4035d04 <alt_read+0xd0>
        {
          ALT_ERRNO = -rval;
 4035ce8:	4035d540 	call	4035d54 <alt_get_errno>
 4035cec:	e0fff917 	ldw	r3,-28(fp)
 4035cf0:	00c7c83a 	sub	r3,zero,r3
 4035cf4:	10c00015 	stw	r3,0(r2)
          return -1;
 4035cf8:	00bfffc4 	movi	r2,-1
 4035cfc:	e0bffe15 	stw	r2,-8(fp)
 4035d00:	00000e06 	br	4035d3c <alt_read+0x108>
        }
        return rval;
 4035d04:	e0bff917 	ldw	r2,-28(fp)
 4035d08:	e0bffe15 	stw	r2,-8(fp)
 4035d0c:	00000b06 	br	4035d3c <alt_read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4035d10:	4035d540 	call	4035d54 <alt_get_errno>
 4035d14:	1007883a 	mov	r3,r2
 4035d18:	00800344 	movi	r2,13
 4035d1c:	18800015 	stw	r2,0(r3)
 4035d20:	00000406 	br	4035d34 <alt_read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4035d24:	4035d540 	call	4035d54 <alt_get_errno>
 4035d28:	1007883a 	mov	r3,r2
 4035d2c:	00801444 	movi	r2,81
 4035d30:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4035d34:	00bfffc4 	movi	r2,-1
 4035d38:	e0bffe15 	stw	r2,-8(fp)
 4035d3c:	e0bffe17 	ldw	r2,-8(fp)
}
 4035d40:	e037883a 	mov	sp,fp
 4035d44:	dfc00117 	ldw	ra,4(sp)
 4035d48:	df000017 	ldw	fp,0(sp)
 4035d4c:	dec00204 	addi	sp,sp,8
 4035d50:	f800283a 	ret

04035d54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4035d54:	defffd04 	addi	sp,sp,-12
 4035d58:	dfc00215 	stw	ra,8(sp)
 4035d5c:	df000115 	stw	fp,4(sp)
 4035d60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4035d64:	00810174 	movhi	r2,1029
 4035d68:	10ba0204 	addi	r2,r2,-6136
 4035d6c:	10800017 	ldw	r2,0(r2)
 4035d70:	1005003a 	cmpeq	r2,r2,zero
 4035d74:	1000061e 	bne	r2,zero,4035d90 <alt_get_errno+0x3c>
 4035d78:	00810174 	movhi	r2,1029
 4035d7c:	10ba0204 	addi	r2,r2,-6136
 4035d80:	10800017 	ldw	r2,0(r2)
 4035d84:	103ee83a 	callr	r2
 4035d88:	e0bfff15 	stw	r2,-4(fp)
 4035d8c:	00000306 	br	4035d9c <alt_get_errno+0x48>
 4035d90:	00810174 	movhi	r2,1029
 4035d94:	10819f04 	addi	r2,r2,1660
 4035d98:	e0bfff15 	stw	r2,-4(fp)
 4035d9c:	e0bfff17 	ldw	r2,-4(fp)
}
 4035da0:	e037883a 	mov	sp,fp
 4035da4:	dfc00117 	ldw	ra,4(sp)
 4035da8:	df000017 	ldw	fp,0(sp)
 4035dac:	dec00204 	addi	sp,sp,8
 4035db0:	f800283a 	ret

04035db4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4035db4:	defffe04 	addi	sp,sp,-8
 4035db8:	df000115 	stw	fp,4(sp)
 4035dbc:	df000104 	addi	fp,sp,4
 4035dc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4035dc4:	e0bfff17 	ldw	r2,-4(fp)
 4035dc8:	108000d0 	cmplti	r2,r2,3
 4035dcc:	10000d1e 	bne	r2,zero,4035e04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4035dd0:	e0bfff17 	ldw	r2,-4(fp)
 4035dd4:	00c10174 	movhi	r3,1029
 4035dd8:	18f8fa04 	addi	r3,r3,-7192
 4035ddc:	10800324 	muli	r2,r2,12
 4035de0:	10c5883a 	add	r2,r2,r3
 4035de4:	10800204 	addi	r2,r2,8
 4035de8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4035dec:	e0bfff17 	ldw	r2,-4(fp)
 4035df0:	00c10174 	movhi	r3,1029
 4035df4:	18f8fa04 	addi	r3,r3,-7192
 4035df8:	10800324 	muli	r2,r2,12
 4035dfc:	10c5883a 	add	r2,r2,r3
 4035e00:	10000015 	stw	zero,0(r2)
  }
}
 4035e04:	e037883a 	mov	sp,fp
 4035e08:	df000017 	ldw	fp,0(sp)
 4035e0c:	dec00104 	addi	sp,sp,4
 4035e10:	f800283a 	ret

04035e14 <alt_remap_cached>:
 * Convert a pointer to a block of uncached memory, into a block of
 * cached memory.
 */

void* alt_remap_cached (volatile void* ptr, alt_u32 len)
{
 4035e14:	defffd04 	addi	sp,sp,-12
 4035e18:	df000215 	stw	fp,8(sp)
 4035e1c:	df000204 	addi	fp,sp,8
 4035e20:	e13ffe15 	stw	r4,-8(fp)
 4035e24:	e17fff15 	stw	r5,-4(fp)
  return (void*) (((alt_u32) ptr) & ~BYPASS_DCACHE_MASK);
 4035e28:	e0bffe17 	ldw	r2,-8(fp)
 4035e2c:	1007883a 	mov	r3,r2
 4035e30:	00a00034 	movhi	r2,32768
 4035e34:	10bfffc4 	addi	r2,r2,-1
 4035e38:	1884703a 	and	r2,r3,r2
}
 4035e3c:	e037883a 	mov	sp,fp
 4035e40:	df000017 	ldw	fp,0(sp)
 4035e44:	dec00104 	addi	sp,sp,4
 4035e48:	f800283a 	ret

04035e4c <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
 4035e4c:	defffc04 	addi	sp,sp,-16
 4035e50:	dfc00315 	stw	ra,12(sp)
 4035e54:	df000215 	stw	fp,8(sp)
 4035e58:	df000204 	addi	fp,sp,8
 4035e5c:	e13ffe15 	stw	r4,-8(fp)
 4035e60:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
 4035e64:	e13ffe17 	ldw	r4,-8(fp)
 4035e68:	e17fff17 	ldw	r5,-4(fp)
 4035e6c:	40446600 	call	4044660 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
 4035e70:	e0bffe17 	ldw	r2,-8(fp)
 4035e74:	10a00034 	orhi	r2,r2,32768
}
 4035e78:	e037883a 	mov	sp,fp
 4035e7c:	dfc00117 	ldw	ra,4(sp)
 4035e80:	df000017 	ldw	fp,0(sp)
 4035e84:	dec00204 	addi	sp,sp,8
 4035e88:	f800283a 	ret

04035e8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4035e8c:	defffa04 	addi	sp,sp,-24
 4035e90:	df000515 	stw	fp,20(sp)
 4035e94:	df000504 	addi	fp,sp,20
 4035e98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035e9c:	0005303a 	rdctl	r2,status
 4035ea0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035ea4:	e0fffd17 	ldw	r3,-12(fp)
 4035ea8:	00bfff84 	movi	r2,-2
 4035eac:	1884703a 	and	r2,r3,r2
 4035eb0:	1001703a 	wrctl	status,r2
  
  return context;
 4035eb4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4035eb8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4035ebc:	e0bfff17 	ldw	r2,-4(fp)
 4035ec0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4035ec4:	e0bffc17 	ldw	r2,-16(fp)
 4035ec8:	10c00017 	ldw	r3,0(r2)
 4035ecc:	e0bffc17 	ldw	r2,-16(fp)
 4035ed0:	10800117 	ldw	r2,4(r2)
 4035ed4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4035ed8:	e0bffc17 	ldw	r2,-16(fp)
 4035edc:	10c00117 	ldw	r3,4(r2)
 4035ee0:	e0bffc17 	ldw	r2,-16(fp)
 4035ee4:	10800017 	ldw	r2,0(r2)
 4035ee8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4035eec:	e0fffc17 	ldw	r3,-16(fp)
 4035ef0:	e0bffc17 	ldw	r2,-16(fp)
 4035ef4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4035ef8:	e0fffc17 	ldw	r3,-16(fp)
 4035efc:	e0bffc17 	ldw	r2,-16(fp)
 4035f00:	18800015 	stw	r2,0(r3)
 4035f04:	e0bffe17 	ldw	r2,-8(fp)
 4035f08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4035f0c:	e0bffb17 	ldw	r2,-20(fp)
 4035f10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4035f14:	e037883a 	mov	sp,fp
 4035f18:	df000017 	ldw	fp,0(sp)
 4035f1c:	dec00104 	addi	sp,sp,4
 4035f20:	f800283a 	ret

04035f24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4035f24:	defffb04 	addi	sp,sp,-20
 4035f28:	dfc00415 	stw	ra,16(sp)
 4035f2c:	df000315 	stw	fp,12(sp)
 4035f30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4035f34:	d0a04617 	ldw	r2,-32488(gp)
 4035f38:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4035f3c:	d0a83717 	ldw	r2,-24356(gp)
 4035f40:	10800044 	addi	r2,r2,1
 4035f44:	d0a83715 	stw	r2,-24356(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4035f48:	00003106 	br	4036010 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4035f4c:	e0bffe17 	ldw	r2,-8(fp)
 4035f50:	10800017 	ldw	r2,0(r2)
 4035f54:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4035f58:	e0bffe17 	ldw	r2,-8(fp)
 4035f5c:	10800403 	ldbu	r2,16(r2)
 4035f60:	10803fcc 	andi	r2,r2,255
 4035f64:	1005003a 	cmpeq	r2,r2,zero
 4035f68:	1000051e 	bne	r2,zero,4035f80 <alt_tick+0x5c>
 4035f6c:	d0a83717 	ldw	r2,-24356(gp)
 4035f70:	1004c03a 	cmpne	r2,r2,zero
 4035f74:	1000021e 	bne	r2,zero,4035f80 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4035f78:	e0bffe17 	ldw	r2,-8(fp)
 4035f7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4035f80:	e0bffe17 	ldw	r2,-8(fp)
 4035f84:	10c00217 	ldw	r3,8(r2)
 4035f88:	d0a83717 	ldw	r2,-24356(gp)
 4035f8c:	10c01e36 	bltu	r2,r3,4036008 <alt_tick+0xe4>
 4035f90:	e0bffe17 	ldw	r2,-8(fp)
 4035f94:	10800403 	ldbu	r2,16(r2)
 4035f98:	10803fcc 	andi	r2,r2,255
 4035f9c:	1004c03a 	cmpne	r2,r2,zero
 4035fa0:	1000191e 	bne	r2,zero,4036008 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4035fa4:	e0bffe17 	ldw	r2,-8(fp)
 4035fa8:	10c00317 	ldw	r3,12(r2)
 4035fac:	e0bffe17 	ldw	r2,-8(fp)
 4035fb0:	11000517 	ldw	r4,20(r2)
 4035fb4:	183ee83a 	callr	r3
 4035fb8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4035fbc:	e0bffd17 	ldw	r2,-12(fp)
 4035fc0:	1004c03a 	cmpne	r2,r2,zero
 4035fc4:	1000031e 	bne	r2,zero,4035fd4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4035fc8:	e13ffe17 	ldw	r4,-8(fp)
 4035fcc:	4035e8c0 	call	4035e8c <alt_alarm_stop>
 4035fd0:	00000d06 	br	4036008 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4035fd4:	e0bffe17 	ldw	r2,-8(fp)
 4035fd8:	10c00217 	ldw	r3,8(r2)
 4035fdc:	e0bffd17 	ldw	r2,-12(fp)
 4035fe0:	1887883a 	add	r3,r3,r2
 4035fe4:	e0bffe17 	ldw	r2,-8(fp)
 4035fe8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4035fec:	e0bffe17 	ldw	r2,-8(fp)
 4035ff0:	10c00217 	ldw	r3,8(r2)
 4035ff4:	d0a83717 	ldw	r2,-24356(gp)
 4035ff8:	1880032e 	bgeu	r3,r2,4036008 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4035ffc:	e0fffe17 	ldw	r3,-8(fp)
 4036000:	00800044 	movi	r2,1
 4036004:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4036008:	e0bfff17 	ldw	r2,-4(fp)
 403600c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4036010:	d0e04604 	addi	r3,gp,-32488
 4036014:	e0bffe17 	ldw	r2,-8(fp)
 4036018:	10ffcc1e 	bne	r2,r3,4035f4c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 403601c:	400d8d40 	call	400d8d4 <OSTimeTick>
}
 4036020:	e037883a 	mov	sp,fp
 4036024:	dfc00117 	ldw	ra,4(sp)
 4036028:	df000017 	ldw	fp,0(sp)
 403602c:	dec00204 	addi	sp,sp,8
 4036030:	f800283a 	ret

04036034 <alt_uncached_malloc>:
/*
 * Allocate a block of uncached memory.
 */

volatile void* alt_uncached_malloc (size_t size)
{
 4036034:	defffb04 	addi	sp,sp,-20
 4036038:	dfc00415 	stw	ra,16(sp)
 403603c:	df000315 	stw	fp,12(sp)
 4036040:	df000304 	addi	fp,sp,12
 4036044:	e13ffe15 	stw	r4,-8(fp)
  void* ptr;

  ptr = malloc (size);
 4036048:	e13ffe17 	ldw	r4,-8(fp)
 403604c:	4045ff80 	call	4045ff8 <malloc>
 4036050:	e0bffd15 	stw	r2,-12(fp)

  alt_dcache_flush (ptr, size);
 4036054:	e13ffd17 	ldw	r4,-12(fp)
 4036058:	e17ffe17 	ldw	r5,-8(fp)
 403605c:	40446600 	call	4044660 <alt_dcache_flush>

  return ptr ? (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK) : NULL;
 4036060:	e0bffd17 	ldw	r2,-12(fp)
 4036064:	1005003a 	cmpeq	r2,r2,zero
 4036068:	1000041e 	bne	r2,zero,403607c <alt_uncached_malloc+0x48>
 403606c:	e0bffd17 	ldw	r2,-12(fp)
 4036070:	10a00034 	orhi	r2,r2,32768
 4036074:	e0bfff15 	stw	r2,-4(fp)
 4036078:	00000106 	br	4036080 <alt_uncached_malloc+0x4c>
 403607c:	e03fff15 	stw	zero,-4(fp)
 4036080:	e0bfff17 	ldw	r2,-4(fp)
}
 4036084:	e037883a 	mov	sp,fp
 4036088:	dfc00117 	ldw	ra,4(sp)
 403608c:	df000017 	ldw	fp,0(sp)
 4036090:	dec00204 	addi	sp,sp,8
 4036094:	f800283a 	ret

04036098 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4036098:	defffa04 	addi	sp,sp,-24
 403609c:	dfc00515 	stw	ra,20(sp)
 40360a0:	df000415 	stw	fp,16(sp)
 40360a4:	df000404 	addi	fp,sp,16
 40360a8:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 40360ac:	00810174 	movhi	r2,1029
 40360b0:	1081a744 	addi	r2,r2,1693
 40360b4:	10800003 	ldbu	r2,0(r2)
 40360b8:	10803fcc 	andi	r2,r2,255
 40360bc:	1004c03a 	cmpne	r2,r2,zero
 40360c0:	1000041e 	bne	r2,zero,40360d4 <usleep+0x3c>
  {
    return alt_busy_sleep (us);
 40360c4:	e13ffe17 	ldw	r4,-8(fp)
 40360c8:	40445340 	call	4044534 <alt_busy_sleep>
 40360cc:	e0bfff15 	stw	r2,-4(fp)
 40360d0:	00003106 	br	4036198 <usleep+0x100>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40360d4:	00810174 	movhi	r2,1029
 40360d8:	1081f404 	addi	r2,r2,2000
 40360dc:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 40360e0:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 40360e4:	e0fffe17 	ldw	r3,-8(fp)
 40360e8:	008003f4 	movhi	r2,15
 40360ec:	10909004 	addi	r2,r2,16960
 40360f0:	1887203a 	divu	r3,r3,r2
 40360f4:	e0bffc17 	ldw	r2,-16(fp)
 40360f8:	188b383a 	mul	r5,r3,r2
 40360fc:	e13ffe17 	ldw	r4,-8(fp)
 4036100:	008003f4 	movhi	r2,15
 4036104:	10909004 	addi	r2,r2,16960
 4036108:	2087203a 	divu	r3,r4,r2
 403610c:	008003f4 	movhi	r2,15
 4036110:	10909004 	addi	r2,r2,16960
 4036114:	1885383a 	mul	r2,r3,r2
 4036118:	2087c83a 	sub	r3,r4,r2
 403611c:	e0bffc17 	ldw	r2,-16(fp)
 4036120:	1887383a 	mul	r3,r3,r2
 4036124:	008003f4 	movhi	r2,15
 4036128:	10909004 	addi	r2,r2,16960
 403612c:	1885203a 	divu	r2,r3,r2
 4036130:	2885883a 	add	r2,r5,r2
 4036134:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4036138:	00000706 	br	4036158 <usleep+0xc0>
  {
    OSTimeDly(0xffff);
 403613c:	013fffd4 	movui	r4,65535
 4036140:	40148840 	call	4014884 <OSTimeDly>
    ticks -= 0xffff;
 4036144:	e0bffd17 	ldw	r2,-12(fp)
 4036148:	00fffff4 	movhi	r3,65535
 403614c:	18c00044 	addi	r3,r3,1
 4036150:	10c5883a 	add	r2,r2,r3
 4036154:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 4036158:	e0fffd17 	ldw	r3,-12(fp)
 403615c:	00bfffd4 	movui	r2,65535
 4036160:	10fff636 	bltu	r2,r3,403613c <usleep+0xa4>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 4036164:	e0bffd17 	ldw	r2,-12(fp)
 4036168:	113fffcc 	andi	r4,r2,65535
 403616c:	40148840 	call	4014884 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 4036170:	00c003f4 	movhi	r3,15
 4036174:	18d09004 	addi	r3,r3,16960
 4036178:	e0bffc17 	ldw	r2,-16(fp)
 403617c:	1887203a 	divu	r3,r3,r2
 4036180:	e13ffe17 	ldw	r4,-8(fp)
 4036184:	20c5203a 	divu	r2,r4,r3
 4036188:	10c5383a 	mul	r2,r2,r3
 403618c:	2089c83a 	sub	r4,r4,r2
 4036190:	40445340 	call	4044534 <alt_busy_sleep>

  return 0;  
 4036194:	e03fff15 	stw	zero,-4(fp)
 4036198:	e0bfff17 	ldw	r2,-4(fp)
}
 403619c:	e037883a 	mov	sp,fp
 40361a0:	dfc00117 	ldw	ra,4(sp)
 40361a4:	df000017 	ldw	fp,0(sp)
 40361a8:	dec00204 	addi	sp,sp,8
 40361ac:	f800283a 	ret

040361b0 <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40361b0:	defff704 	addi	sp,sp,-36
 40361b4:	dfc00815 	stw	ra,32(sp)
 40361b8:	df000715 	stw	fp,28(sp)
 40361bc:	df000704 	addi	fp,sp,28
 40361c0:	e13ffb15 	stw	r4,-20(fp)
 40361c4:	e17ffc15 	stw	r5,-16(fp)
 40361c8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40361cc:	e0bffb17 	ldw	r2,-20(fp)
 40361d0:	1004803a 	cmplt	r2,r2,zero
 40361d4:	1000081e 	bne	r2,zero,40361f8 <alt_write+0x48>
 40361d8:	e0bffb17 	ldw	r2,-20(fp)
 40361dc:	10800324 	muli	r2,r2,12
 40361e0:	1007883a 	mov	r3,r2
 40361e4:	00810174 	movhi	r2,1029
 40361e8:	10b8fa04 	addi	r2,r2,-7192
 40361ec:	1887883a 	add	r3,r3,r2
 40361f0:	e0ffff15 	stw	r3,-4(fp)
 40361f4:	00000106 	br	40361fc <alt_write+0x4c>
 40361f8:	e03fff15 	stw	zero,-4(fp)
 40361fc:	e0bfff17 	ldw	r2,-4(fp)
 4036200:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4036204:	e0bffa17 	ldw	r2,-24(fp)
 4036208:	1005003a 	cmpeq	r2,r2,zero
 403620c:	1000241e 	bne	r2,zero,40362a0 <alt_write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4036210:	e0bffa17 	ldw	r2,-24(fp)
 4036214:	10800217 	ldw	r2,8(r2)
 4036218:	108000cc 	andi	r2,r2,3
 403621c:	1005003a 	cmpeq	r2,r2,zero
 4036220:	10001a1e 	bne	r2,zero,403628c <alt_write+0xdc>
 4036224:	e0bffa17 	ldw	r2,-24(fp)
 4036228:	10800017 	ldw	r2,0(r2)
 403622c:	10800617 	ldw	r2,24(r2)
 4036230:	1005003a 	cmpeq	r2,r2,zero
 4036234:	1000151e 	bne	r2,zero,403628c <alt_write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4036238:	e0bffa17 	ldw	r2,-24(fp)
 403623c:	10800017 	ldw	r2,0(r2)
 4036240:	10800617 	ldw	r2,24(r2)
 4036244:	e17ffc17 	ldw	r5,-16(fp)
 4036248:	e1bffd17 	ldw	r6,-12(fp)
 403624c:	e13ffa17 	ldw	r4,-24(fp)
 4036250:	103ee83a 	callr	r2
 4036254:	e0bff915 	stw	r2,-28(fp)
 4036258:	e0bff917 	ldw	r2,-28(fp)
 403625c:	1004403a 	cmpge	r2,r2,zero
 4036260:	1000071e 	bne	r2,zero,4036280 <alt_write+0xd0>
      {
        ALT_ERRNO = -rval;
 4036264:	40362d00 	call	40362d0 <alt_get_errno>
 4036268:	e0fff917 	ldw	r3,-28(fp)
 403626c:	00c7c83a 	sub	r3,zero,r3
 4036270:	10c00015 	stw	r3,0(r2)
        return -1;
 4036274:	00bfffc4 	movi	r2,-1
 4036278:	e0bffe15 	stw	r2,-8(fp)
 403627c:	00000e06 	br	40362b8 <alt_write+0x108>
      }
      return rval;
 4036280:	e0bff917 	ldw	r2,-28(fp)
 4036284:	e0bffe15 	stw	r2,-8(fp)
 4036288:	00000b06 	br	40362b8 <alt_write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 403628c:	40362d00 	call	40362d0 <alt_get_errno>
 4036290:	1007883a 	mov	r3,r2
 4036294:	00800344 	movi	r2,13
 4036298:	18800015 	stw	r2,0(r3)
 403629c:	00000406 	br	40362b0 <alt_write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40362a0:	40362d00 	call	40362d0 <alt_get_errno>
 40362a4:	1007883a 	mov	r3,r2
 40362a8:	00801444 	movi	r2,81
 40362ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40362b0:	00bfffc4 	movi	r2,-1
 40362b4:	e0bffe15 	stw	r2,-8(fp)
 40362b8:	e0bffe17 	ldw	r2,-8(fp)
}
 40362bc:	e037883a 	mov	sp,fp
 40362c0:	dfc00117 	ldw	ra,4(sp)
 40362c4:	df000017 	ldw	fp,0(sp)
 40362c8:	dec00204 	addi	sp,sp,8
 40362cc:	f800283a 	ret

040362d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40362d0:	defffd04 	addi	sp,sp,-12
 40362d4:	dfc00215 	stw	ra,8(sp)
 40362d8:	df000115 	stw	fp,4(sp)
 40362dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40362e0:	00810174 	movhi	r2,1029
 40362e4:	10ba0204 	addi	r2,r2,-6136
 40362e8:	10800017 	ldw	r2,0(r2)
 40362ec:	1005003a 	cmpeq	r2,r2,zero
 40362f0:	1000061e 	bne	r2,zero,403630c <alt_get_errno+0x3c>
 40362f4:	00810174 	movhi	r2,1029
 40362f8:	10ba0204 	addi	r2,r2,-6136
 40362fc:	10800017 	ldw	r2,0(r2)
 4036300:	103ee83a 	callr	r2
 4036304:	e0bfff15 	stw	r2,-4(fp)
 4036308:	00000306 	br	4036318 <alt_get_errno+0x48>
 403630c:	00810174 	movhi	r2,1029
 4036310:	10819f04 	addi	r2,r2,1660
 4036314:	e0bfff15 	stw	r2,-4(fp)
 4036318:	e0bfff17 	ldw	r2,-4(fp)
}
 403631c:	e037883a 	mov	sp,fp
 4036320:	dfc00117 	ldw	ra,4(sp)
 4036324:	df000017 	ldw	fp,0(sp)
 4036328:	dec00204 	addi	sp,sp,8
 403632c:	f800283a 	ret

04036330 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 4036330:	deffff04 	addi	sp,sp,-4
 4036334:	df000015 	stw	fp,0(sp)
 4036338:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 403633c:	000170fa 	wrctl	ienable,zero
}
 4036340:	e037883a 	mov	sp,fp
 4036344:	df000017 	ldw	fp,0(sp)
 4036348:	dec00104 	addi	sp,sp,4
 403634c:	f800283a 	ret

04036350 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 4036350:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 4036354:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 4036358:	d127f817 	ldw	r4,-24608(gp)

      stw ra,  0(sp)
 403635c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 4036360:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 4036364:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 4036368:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 403636c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 4036370:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4036374:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 4036378:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 403637c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 4036380:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 4036384:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 4036388:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 403638c:	40367700 	call	4036770 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 4036390:	d127f317 	ldw	r4,-24628(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 4036394:	d167eb07 	ldb	r5,-24660(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 4036398:	d127f815 	stw	r4,-24608(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 403639c:	d167eb45 	stb	r5,-24659(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 40363a0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 40363a4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 40363a8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 40363ac:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 40363b0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 40363b4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 40363b8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 40363bc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 40363c0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 40363c4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 40363c8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 40363cc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 40363d0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 40363d4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 40363d8:	f800283a 	ret

040363dc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 40363dc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 40363e0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 40363e4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 40363e8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 40363ec:	40367700 	call	4036770 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 40363f0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 40363f4:	d4a7e945 	stb	r18,-24667(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 40363f8:	003fe506 	br	4036390 <OSCtxSw+0x40>

040363fc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 40363fc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 4036400:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 4036404:	10800054 	ori	r2,r2,1
      wrctl status, r2
 4036408:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 403640c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 4036410:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 4036414:	dec00204 	addi	sp,sp,8

      callr r2
 4036418:	103ee83a 	callr	r2

      nop
 403641c:	0001883a 	nop

04036420 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4036420:	defff704 	addi	sp,sp,-36
 4036424:	dfc00815 	stw	ra,32(sp)
 4036428:	df000715 	stw	fp,28(sp)
 403642c:	df000704 	addi	fp,sp,28
 4036430:	e13ffc15 	stw	r4,-16(fp)
 4036434:	e17ffd15 	stw	r5,-12(fp)
 4036438:	e1bffe15 	stw	r6,-8(fp)
 403643c:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4036440:	e0bffe17 	ldw	r2,-8(fp)
 4036444:	1007883a 	mov	r3,r2
 4036448:	00bfff04 	movi	r2,-4
 403644c:	1884703a 	and	r2,r3,r2
 4036450:	10bf0004 	addi	r2,r2,-1024
 4036454:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 4036458:	e0bff917 	ldw	r2,-28(fp)
 403645c:	10000015 	stw	zero,0(r2)
 4036460:	e0bff917 	ldw	r2,-28(fp)
 4036464:	10c0bb04 	addi	r3,r2,748
 4036468:	e0bff917 	ldw	r2,-28(fp)
 403646c:	10c00115 	stw	r3,4(r2)
 4036470:	e0bff917 	ldw	r2,-28(fp)
 4036474:	1080bb04 	addi	r2,r2,748
 4036478:	10c01704 	addi	r3,r2,92
 403647c:	e0bff917 	ldw	r2,-28(fp)
 4036480:	10c00215 	stw	r3,8(r2)
 4036484:	e0bff917 	ldw	r2,-28(fp)
 4036488:	1080bb04 	addi	r2,r2,748
 403648c:	10c02e04 	addi	r3,r2,184
 4036490:	e0bff917 	ldw	r2,-28(fp)
 4036494:	10c00315 	stw	r3,12(r2)
 4036498:	e0bff917 	ldw	r2,-28(fp)
 403649c:	10000415 	stw	zero,16(r2)
 40364a0:	e0bff917 	ldw	r2,-28(fp)
 40364a4:	10800504 	addi	r2,r2,20
 40364a8:	1009883a 	mov	r4,r2
 40364ac:	01800644 	movi	r6,25
 40364b0:	000b883a 	mov	r5,zero
 40364b4:	4001f640 	call	4001f64 <memset>
 40364b8:	e0bff917 	ldw	r2,-28(fp)
 40364bc:	10000c15 	stw	zero,48(r2)
 40364c0:	e0fff917 	ldw	r3,-28(fp)
 40364c4:	00810174 	movhi	r2,1029
 40364c8:	10ae9d04 	addi	r2,r2,-17804
 40364cc:	18800d15 	stw	r2,52(r3)
 40364d0:	e0bff917 	ldw	r2,-28(fp)
 40364d4:	10000e15 	stw	zero,56(r2)
 40364d8:	e0bff917 	ldw	r2,-28(fp)
 40364dc:	10000f15 	stw	zero,60(r2)
 40364e0:	e0bff917 	ldw	r2,-28(fp)
 40364e4:	10001015 	stw	zero,64(r2)
 40364e8:	e0bff917 	ldw	r2,-28(fp)
 40364ec:	10001115 	stw	zero,68(r2)
 40364f0:	e0bff917 	ldw	r2,-28(fp)
 40364f4:	10001215 	stw	zero,72(r2)
 40364f8:	e0bff917 	ldw	r2,-28(fp)
 40364fc:	10001315 	stw	zero,76(r2)
 4036500:	e0bff917 	ldw	r2,-28(fp)
 4036504:	10001415 	stw	zero,80(r2)
 4036508:	e0bff917 	ldw	r2,-28(fp)
 403650c:	10001515 	stw	zero,84(r2)
 4036510:	e0bff917 	ldw	r2,-28(fp)
 4036514:	10001615 	stw	zero,88(r2)
 4036518:	e0bff917 	ldw	r2,-28(fp)
 403651c:	10001715 	stw	zero,92(r2)
 4036520:	e0bff917 	ldw	r2,-28(fp)
 4036524:	10001805 	stb	zero,96(r2)
 4036528:	e0bff917 	ldw	r2,-28(fp)
 403652c:	10801f04 	addi	r2,r2,124
 4036530:	10000015 	stw	zero,0(r2)
 4036534:	10000115 	stw	zero,4(r2)
 4036538:	10000215 	stw	zero,8(r2)
 403653c:	10000315 	stw	zero,12(r2)
 4036540:	10000415 	stw	zero,16(r2)
 4036544:	10000515 	stw	zero,20(r2)
 4036548:	10000615 	stw	zero,24(r2)
 403654c:	10000715 	stw	zero,28(r2)
 4036550:	10000815 	stw	zero,32(r2)
 4036554:	e0bff917 	ldw	r2,-28(fp)
 4036558:	10002815 	stw	zero,160(r2)
 403655c:	e0fff917 	ldw	r3,-28(fp)
 4036560:	00800044 	movi	r2,1
 4036564:	18802915 	stw	r2,164(r3)
 4036568:	18002a15 	stw	zero,168(r3)
 403656c:	e0fff917 	ldw	r3,-28(fp)
 4036570:	008cc384 	movi	r2,13070
 4036574:	18802b0d 	sth	r2,172(r3)
 4036578:	e0fff917 	ldw	r3,-28(fp)
 403657c:	00aaf344 	movi	r2,-21555
 4036580:	18802b8d 	sth	r2,174(r3)
 4036584:	e0fff917 	ldw	r3,-28(fp)
 4036588:	00848d04 	movi	r2,4660
 403658c:	18802c0d 	sth	r2,176(r3)
 4036590:	e0fff917 	ldw	r3,-28(fp)
 4036594:	00b99b44 	movi	r2,-6547
 4036598:	18802c8d 	sth	r2,178(r3)
 403659c:	e0fff917 	ldw	r3,-28(fp)
 40365a0:	00b7bb04 	movi	r2,-8468
 40365a4:	18802d0d 	sth	r2,180(r3)
 40365a8:	e0fff917 	ldw	r3,-28(fp)
 40365ac:	00800144 	movi	r2,5
 40365b0:	18802d8d 	sth	r2,182(r3)
 40365b4:	e0fff917 	ldw	r3,-28(fp)
 40365b8:	008002c4 	movi	r2,11
 40365bc:	18802e0d 	sth	r2,184(r3)
 40365c0:	e0bff917 	ldw	r2,-28(fp)
 40365c4:	10002f15 	stw	zero,188(r2)
 40365c8:	e0bff917 	ldw	r2,-28(fp)
 40365cc:	10003015 	stw	zero,192(r2)
 40365d0:	e0bff917 	ldw	r2,-28(fp)
 40365d4:	10003115 	stw	zero,196(r2)
 40365d8:	e0bff917 	ldw	r2,-28(fp)
 40365dc:	10003215 	stw	zero,200(r2)
 40365e0:	e0bff917 	ldw	r2,-28(fp)
 40365e4:	10003315 	stw	zero,204(r2)
 40365e8:	e0bff917 	ldw	r2,-28(fp)
 40365ec:	10003415 	stw	zero,208(r2)
 40365f0:	e0bff917 	ldw	r2,-28(fp)
 40365f4:	10003e15 	stw	zero,248(r2)
 40365f8:	e0bff917 	ldw	r2,-28(fp)
 40365fc:	10003f15 	stw	zero,252(r2)
 4036600:	e0bff917 	ldw	r2,-28(fp)
 4036604:	10004015 	stw	zero,256(r2)
 4036608:	e0bff917 	ldw	r2,-28(fp)
 403660c:	10004115 	stw	zero,260(r2)
 4036610:	e0bff917 	ldw	r2,-28(fp)
 4036614:	10004215 	stw	zero,264(r2)
 4036618:	e0bff917 	ldw	r2,-28(fp)
 403661c:	10004315 	stw	zero,268(r2)
 4036620:	e0bff917 	ldw	r2,-28(fp)
 4036624:	10004415 	stw	zero,272(r2)
 4036628:	e0bff917 	ldw	r2,-28(fp)
 403662c:	10004515 	stw	zero,276(r2)
 4036630:	e0bff917 	ldw	r2,-28(fp)
 4036634:	10004615 	stw	zero,280(r2)
 4036638:	e0bff917 	ldw	r2,-28(fp)
 403663c:	10004715 	stw	zero,284(r2)
 4036640:	e0bff917 	ldw	r2,-28(fp)
 4036644:	10003505 	stb	zero,212(r2)
 4036648:	e0bff917 	ldw	r2,-28(fp)
 403664c:	10003705 	stb	zero,220(r2)
 4036650:	e0bff917 	ldw	r2,-28(fp)
 4036654:	10003d15 	stw	zero,244(r2)
 4036658:	e0bff917 	ldw	r2,-28(fp)
 403665c:	10005215 	stw	zero,328(r2)
 4036660:	e0bff917 	ldw	r2,-28(fp)
 4036664:	10005315 	stw	zero,332(r2)
 4036668:	e0bff917 	ldw	r2,-28(fp)
 403666c:	10005415 	stw	zero,336(r2)
 4036670:	e0bff917 	ldw	r2,-28(fp)
 4036674:	10005515 	stw	zero,340(r2)
 4036678:	e0bff917 	ldw	r2,-28(fp)
 403667c:	1000b515 	stw	zero,724(r2)
 4036680:	e0bff917 	ldw	r2,-28(fp)
 4036684:	10007515 	stw	zero,468(r2)
 4036688:	e0bff917 	ldw	r2,-28(fp)
 403668c:	1000b715 	stw	zero,732(r2)
 4036690:	e0bff917 	ldw	r2,-28(fp)
 4036694:	1000b815 	stw	zero,736(r2)
 4036698:	e0bff917 	ldw	r2,-28(fp)
 403669c:	1000b915 	stw	zero,740(r2)
 40366a0:	e0bff917 	ldw	r2,-28(fp)
 40366a4:	1000ba15 	stw	zero,744(r2)
 40366a8:	e0bff917 	ldw	r2,-28(fp)
 40366ac:	1080bb04 	addi	r2,r2,748
 40366b0:	1009883a 	mov	r4,r2
 40366b4:	01804504 	movi	r6,276
 40366b8:	000b883a 	mov	r5,zero
 40366bc:	4001f640 	call	4001f64 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 40366c0:	e0bff917 	ldw	r2,-28(fp)
 40366c4:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 40366c8:	e0bffb17 	ldw	r2,-20(fp)
 40366cc:	10bff304 	addi	r2,r2,-52
 40366d0:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 40366d4:	e0bffa17 	ldw	r2,-24(fp)
 40366d8:	10c00c04 	addi	r3,r2,48
 40366dc:	e0bffc17 	ldw	r2,-16(fp)
 40366e0:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 40366e4:	e0bffa17 	ldw	r2,-24(fp)
 40366e8:	10c00b04 	addi	r3,r2,44
 40366ec:	e0bffd17 	ldw	r2,-12(fp)
 40366f0:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 40366f4:	e0bffa17 	ldw	r2,-24(fp)
 40366f8:	10c00a04 	addi	r3,r2,40
 40366fc:	e0bff917 	ldw	r2,-28(fp)
 4036700:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4036704:	008100f4 	movhi	r2,1027
 4036708:	1098ff04 	addi	r2,r2,25596
 403670c:	10c00104 	addi	r3,r2,4
 4036710:	e0bffa17 	ldw	r2,-24(fp)
 4036714:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 4036718:	e0bffa17 	ldw	r2,-24(fp)
}
 403671c:	e037883a 	mov	sp,fp
 4036720:	dfc00117 	ldw	ra,4(sp)
 4036724:	df000017 	ldw	fp,0(sp)
 4036728:	dec00204 	addi	sp,sp,8
 403672c:	f800283a 	ret

04036730 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 4036730:	defffe04 	addi	sp,sp,-8
 4036734:	df000115 	stw	fp,4(sp)
 4036738:	df000104 	addi	fp,sp,4
 403673c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 4036740:	e037883a 	mov	sp,fp
 4036744:	df000017 	ldw	fp,0(sp)
 4036748:	dec00104 	addi	sp,sp,4
 403674c:	f800283a 	ret

04036750 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 4036750:	defffe04 	addi	sp,sp,-8
 4036754:	df000115 	stw	fp,4(sp)
 4036758:	df000104 	addi	fp,sp,4
 403675c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 4036760:	e037883a 	mov	sp,fp
 4036764:	df000017 	ldw	fp,0(sp)
 4036768:	dec00104 	addi	sp,sp,4
 403676c:	f800283a 	ret

04036770 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 4036770:	deffff04 	addi	sp,sp,-4
 4036774:	df000015 	stw	fp,0(sp)
 4036778:	d839883a 	mov	fp,sp
}
 403677c:	e037883a 	mov	sp,fp
 4036780:	df000017 	ldw	fp,0(sp)
 4036784:	dec00104 	addi	sp,sp,4
 4036788:	f800283a 	ret

0403678c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 403678c:	deffff04 	addi	sp,sp,-4
 4036790:	df000015 	stw	fp,0(sp)
 4036794:	d839883a 	mov	fp,sp
}
 4036798:	e037883a 	mov	sp,fp
 403679c:	df000017 	ldw	fp,0(sp)
 40367a0:	dec00104 	addi	sp,sp,4
 40367a4:	f800283a 	ret

040367a8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 40367a8:	defffe04 	addi	sp,sp,-8
 40367ac:	dfc00115 	stw	ra,4(sp)
 40367b0:	df000015 	stw	fp,0(sp)
 40367b4:	d839883a 	mov	fp,sp
    }
#endif  
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
 40367b8:	4025d480 	call	4025d48 <cticks_hook>
#endif
}
 40367bc:	e037883a 	mov	sp,fp
 40367c0:	dfc00117 	ldw	ra,4(sp)
 40367c4:	df000017 	ldw	fp,0(sp)
 40367c8:	dec00204 	addi	sp,sp,8
 40367cc:	f800283a 	ret

040367d0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 40367d0:	deffff04 	addi	sp,sp,-4
 40367d4:	df000015 	stw	fp,0(sp)
 40367d8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 40367dc:	e037883a 	mov	sp,fp
 40367e0:	df000017 	ldw	fp,0(sp)
 40367e4:	dec00104 	addi	sp,sp,4
 40367e8:	f800283a 	ret

040367ec <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 40367ec:	deffff04 	addi	sp,sp,-4
 40367f0:	df000015 	stw	fp,0(sp)
 40367f4:	d839883a 	mov	fp,sp
}
 40367f8:	e037883a 	mov	sp,fp
 40367fc:	df000017 	ldw	fp,0(sp)
 4036800:	dec00104 	addi	sp,sp,4
 4036804:	f800283a 	ret

04036808 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 4036808:	deffff04 	addi	sp,sp,-4
 403680c:	df000015 	stw	fp,0(sp)
 4036810:	d839883a 	mov	fp,sp
}
 4036814:	e037883a 	mov	sp,fp
 4036818:	df000017 	ldw	fp,0(sp)
 403681c:	dec00104 	addi	sp,sp,4
 4036820:	f800283a 	ret

04036824 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 4036824:	defffe04 	addi	sp,sp,-8
 4036828:	df000115 	stw	fp,4(sp)
 403682c:	df000104 	addi	fp,sp,4
 4036830:	e13fff15 	stw	r4,-4(fp)
}
 4036834:	e037883a 	mov	sp,fp
 4036838:	df000017 	ldw	fp,0(sp)
 403683c:	dec00104 	addi	sp,sp,4
 4036840:	f800283a 	ret

04036844 <netmain_init>:
 * RETURNS: 
 */

void 
netmain_init(void)
{
 4036844:	defffb04 	addi	sp,sp,-20
 4036848:	dfc00415 	stw	ra,16(sp)
 403684c:	df000315 	stw	fp,12(sp)
 4036850:	dc000215 	stw	r16,8(sp)
 4036854:	df000204 	addi	fp,sp,8
   int   e = 0;
 4036858:	e03fff15 	stw	zero,-4(fp)
   char *   msg;
#ifdef IP_V6
   ip6_addr host;
#endif

   printf("%s\n", name);
 403685c:	d1204817 	ldw	r4,-32480(gp)
 4036860:	40021940 	call	4002194 <puts>
   printf("Copyright 1996-2008 by InterNiche Technologies. All rights reserved. \n");
 4036864:	01010174 	movhi	r4,1029
 4036868:	212ea904 	addi	r4,r4,-17756
 403686c:	40021940 	call	4002194 <puts>
#ifdef IN_MENUS
   install_version("allports3.1");
#endif
#ifndef SUPERLOOP
   /* call this to do pre-task setup including intialization of port_prep */
   msg = pre_task_setup();
 4036870:	40264f80 	call	40264f8 <pre_task_setup>
 4036874:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
 4036878:	e0bffe17 	ldw	r2,-8(fp)
 403687c:	1005003a 	cmpeq	r2,r2,zero
 4036880:	1000021e 	bne	r2,zero,403688c <netmain_init+0x48>
      panic(msg);
 4036884:	e13ffe17 	ldw	r4,-8(fp)
 4036888:	4020e100 	call	4020e10 <panic>
      printf("global_log_create() failed\n");
   }
   glog_with_type(LOG_TYPE_INFO, "INICHE LOG initialized", 1);
#endif

   msg = ip_startup();
 403688c:	401e9440 	call	401e944 <ip_startup>
 4036890:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
 4036894:	e0bffe17 	ldw	r2,-8(fp)
 4036898:	1005003a 	cmpeq	r2,r2,zero
 403689c:	1000071e 	bne	r2,zero,40368bc <netmain_init+0x78>
   {
      printf("inet startup error: %s\n", msg);
 40368a0:	01010174 	movhi	r4,1029
 40368a4:	212ebb04 	addi	r4,r4,-17684
 40368a8:	e17ffe17 	ldw	r5,-8(fp)
 40368ac:	400207c0 	call	400207c <printf>
      panic("IP");
 40368b0:	01010174 	movhi	r4,1029
 40368b4:	212ec104 	addi	r4,r4,-17660
 40368b8:	4020e100 	call	4020e10 <panic>
   }

#if defined(MEMDEV_SIZE) && defined(VFS_FILES)
   init_memdev(); /* init the mem and null test devices */
 40368bc:	40413b40 	call	40413b4 <init_memdev>
#endif

#ifdef IP_MULTICAST
#ifdef INCLUDE_TCP
   /* call the IP multicast test program */
   u_mctest_init();
 40368c0:	40409800 	call	4040980 <u_mctest_init>

   /* clear debugging flags. Port can optionally turn them
    * back on in post_task_setup();
    * NDEBUG = UPCTRACE | IPTRACE | TPTRACE ;  
    */
   NDEBUG = 0;    
 40368c4:	00810174 	movhi	r2,1029
 40368c8:	1081bf04 	addi	r2,r2,1788
 40368cc:	10000015 	stw	zero,0(r2)

   /* print IP address of the first interface - for user's benefit */
   printf("IP address of %s : %s\n" , ((NET)(netlist.q_head))->name,
 40368d0:	008101b4 	movhi	r2,1030
 40368d4:	10a44904 	addi	r2,r2,-28380
 40368d8:	10800017 	ldw	r2,0(r2)
 40368dc:	14000104 	addi	r16,r2,4
 40368e0:	008101b4 	movhi	r2,1030
 40368e4:	10a44904 	addi	r2,r2,-28380
 40368e8:	10800017 	ldw	r2,0(r2)
 40368ec:	11000a17 	ldw	r4,40(r2)
 40368f0:	4020c580 	call	4020c58 <print_ipad>
 40368f4:	100d883a 	mov	r6,r2
 40368f8:	01010174 	movhi	r4,1029
 40368fc:	212ec204 	addi	r4,r4,-17656
 4036900:	800b883a 	mov	r5,r16
 4036904:	400207c0 	call	400207c <printf>
      print_ipad(((NET)(netlist.q_head))->n_ipaddr));
 
#ifndef SUPERLOOP
   /* call this per-target routine after basic tasks & net are up */
   msg = post_task_setup();
 4036908:	402656c0 	call	402656c <post_task_setup>
 403690c:	e0bffe15 	stw	r2,-8(fp)
   if (msg)
 4036910:	e0bffe17 	ldw	r2,-8(fp)
 4036914:	1005003a 	cmpeq	r2,r2,zero
 4036918:	1000021e 	bne	r2,zero,4036924 <netmain_init+0xe0>
      panic(msg);
 403691c:	e13ffe17 	ldw	r4,-8(fp)
 4036920:	4020e100 	call	4020e10 <panic>
#ifdef USE_AUTOIP
   Upnp_init();      /* start Auto IP before DHCP client */
#endif   /* USE_AUTOIP */

#ifdef DHCP_CLIENT
   dhc_setup();   /* kick off any DHCP clients */
 4036924:	404102c0 	call	404102c <dhc_setup>
      panic("prep_modules");
   }
#endif
   USE_ARG(e);    /* Avoid compiler warnings */

} /* end of netmain_init() */
 4036928:	e037883a 	mov	sp,fp
 403692c:	dfc00217 	ldw	ra,8(sp)
 4036930:	df000117 	ldw	fp,4(sp)
 4036934:	dc000017 	ldw	r16,0(sp)
 4036938:	dec00304 	addi	sp,sp,12
 403693c:	f800283a 	ret

04036940 <icmp_port_du>:
 * RETURNS: 
 */

void
icmp_port_du(PACKET p, struct destun * pdp)
{
 4036940:	defffb04 	addi	sp,sp,-20
 4036944:	dfc00415 	stw	ra,16(sp)
 4036948:	df000315 	stw	fp,12(sp)
 403694c:	dc000215 	stw	r16,8(sp)
 4036950:	df000204 	addi	fp,sp,8
 4036954:	e13ffe15 	stw	r4,-8(fp)
 4036958:	e17fff15 	stw	r5,-4(fp)
   dprintf("got ICMP %s UNREACHABLE from %s\n", 
 403695c:	e0bfff17 	ldw	r2,-4(fp)
 4036960:	10800003 	ldbu	r2,0(r2)
 4036964:	10803fcc 	andi	r2,r2,255
 4036968:	1080201c 	xori	r2,r2,128
 403696c:	10bfe004 	addi	r2,r2,-128
 4036970:	00c10174 	movhi	r3,1029
 4036974:	18f95a04 	addi	r3,r3,-6808
 4036978:	1085883a 	add	r2,r2,r2
 403697c:	1085883a 	add	r2,r2,r2
 4036980:	10c5883a 	add	r2,r2,r3
 4036984:	14000017 	ldw	r16,0(r2)
 4036988:	e0bffe17 	ldw	r2,-8(fp)
 403698c:	11000717 	ldw	r4,28(r2)
 4036990:	4020c580 	call	4020c58 <print_ipad>
 4036994:	100d883a 	mov	r6,r2
 4036998:	01010174 	movhi	r4,1029
 403699c:	212ed204 	addi	r4,r4,-17592
 40369a0:	800b883a 	mov	r5,r16
 40369a4:	400207c0 	call	400207c <printf>
      icmpdu_types[(int)(pdp->dtype)], print_ipad(p->fhost) );
   dprintf(prompt);
 40369a8:	d1204917 	ldw	r4,-32476(gp)
 40369ac:	400207c0 	call	400207c <printf>
}
 40369b0:	e037883a 	mov	sp,fp
 40369b4:	dfc00217 	ldw	ra,8(sp)
 40369b8:	df000117 	ldw	fp,4(sp)
 40369bc:	dc000017 	ldw	r16,0(sp)
 40369c0:	dec00304 	addi	sp,sp,12
 40369c4:	f800283a 	ret

040369c8 <station_state>:
 * RETURNS: 
 */

int
station_state(void * pio)
{
 40369c8:	defff904 	addi	sp,sp,-28
 40369cc:	dfc00615 	stw	ra,24(sp)
 40369d0:	df000515 	stw	fp,20(sp)
 40369d4:	dc000415 	stw	r16,16(sp)
 40369d8:	df000404 	addi	fp,sp,16
 40369dc:	e13fff15 	stw	r4,-4(fp)
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 40369e0:	e03ffe15 	stw	zero,-8(fp)
 40369e4:	008101b4 	movhi	r2,1030
 40369e8:	10a44904 	addi	r2,r2,-28380
 40369ec:	10800017 	ldw	r2,0(r2)
 40369f0:	e0bffd15 	stw	r2,-12(fp)
 40369f4:	00002206 	br	4036a80 <station_state+0xb8>
   {
      ns_printf(pio, "iface %d-%s IP addr:%s  ", 
 40369f8:	e0bffd17 	ldw	r2,-12(fp)
 40369fc:	14000104 	addi	r16,r2,4
 4036a00:	e0bffd17 	ldw	r2,-12(fp)
 4036a04:	11000a17 	ldw	r4,40(r2)
 4036a08:	4020c580 	call	4020c58 <print_ipad>
 4036a0c:	d8800015 	stw	r2,0(sp)
 4036a10:	e13fff17 	ldw	r4,-4(fp)
 4036a14:	01410174 	movhi	r5,1029
 4036a18:	296edb04 	addi	r5,r5,-17556
 4036a1c:	e1bffe17 	ldw	r6,-8(fp)
 4036a20:	800f883a 	mov	r7,r16
 4036a24:	40210380 	call	4021038 <ns_printf>
       i, ifp->name, print_ipad(ifp->n_ipaddr) );
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
 4036a28:	e0bffd17 	ldw	r2,-12(fp)
 4036a2c:	11000c17 	ldw	r4,48(r2)
 4036a30:	4020c580 	call	4020c58 <print_ipad>
 4036a34:	100d883a 	mov	r6,r2
 4036a38:	e13fff17 	ldw	r4,-4(fp)
 4036a3c:	01410174 	movhi	r5,1029
 4036a40:	296ee204 	addi	r5,r5,-17528
 4036a44:	40210380 	call	4021038 <ns_printf>
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
 4036a48:	e0bffd17 	ldw	r2,-12(fp)
 4036a4c:	11000d17 	ldw	r4,52(r2)
 4036a50:	4020c580 	call	4020c58 <print_ipad>
 4036a54:	100d883a 	mov	r6,r2
 4036a58:	e13fff17 	ldw	r4,-4(fp)
 4036a5c:	01410174 	movhi	r5,1029
 4036a60:	296ee504 	addi	r5,r5,-17516
 4036a64:	40210380 	call	4021038 <ns_printf>
   int i;
   
#ifndef NO_INET_STACK
   NET ifp;

   for (i = 0, ifp = (NET)netlist.q_head; ifp; ifp = ifp->n_next, i++)
 4036a68:	e0bffd17 	ldw	r2,-12(fp)
 4036a6c:	10800017 	ldw	r2,0(r2)
 4036a70:	e0bffd15 	stw	r2,-12(fp)
 4036a74:	e0bffe17 	ldw	r2,-8(fp)
 4036a78:	10800044 	addi	r2,r2,1
 4036a7c:	e0bffe15 	stw	r2,-8(fp)
 4036a80:	e0bffd17 	ldw	r2,-12(fp)
 4036a84:	1004c03a 	cmpne	r2,r2,zero
 4036a88:	103fdb1e 	bne	r2,zero,40369f8 <station_state+0x30>
      ns_printf(pio, "subnet:%s  ", print_ipad(ifp->snmask) );
      ns_printf(pio, "gateway:%s\n", print_ipad(ifp->n_defgw) );
   }
#endif   /* NO_INET_STACK */

   ns_printf(pio, "current tick count %lu\n", cticks);
 4036a8c:	00810174 	movhi	r2,1029
 4036a90:	1081e404 	addi	r2,r2,1936
 4036a94:	11800017 	ldw	r6,0(r2)
 4036a98:	e13fff17 	ldw	r4,-4(fp)
 4036a9c:	01410174 	movhi	r5,1029
 4036aa0:	296ee804 	addi	r5,r5,-17504
 4036aa4:	40210380 	call	4021038 <ns_printf>

   ns_printf(pio, "common delay parameter:  %lu ticks (%lu ms).\n", pingdelay, (pingdelay * TIMEFOR1TICK));
 4036aa8:	d1a04a17 	ldw	r6,-32472(gp)
 4036aac:	d0a04a17 	ldw	r2,-32472(gp)
 4036ab0:	11c002a4 	muli	r7,r2,10
 4036ab4:	e13fff17 	ldw	r4,-4(fp)
 4036ab8:	01410174 	movhi	r5,1029
 4036abc:	296eee04 	addi	r5,r5,-17480
 4036ac0:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio, "common host parameter: %s\n", print_ipad(activehost));
 4036ac4:	d1283817 	ldw	r4,-24352(gp)
 4036ac8:	4020c580 	call	4020c58 <print_ipad>
 4036acc:	100d883a 	mov	r6,r2
 4036ad0:	e13fff17 	ldw	r4,-4(fp)
 4036ad4:	01410174 	movhi	r5,1029
 4036ad8:	296efa04 	addi	r5,r5,-17432
 4036adc:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio, "common length parameter: %d\n", deflength);
 4036ae0:	d1a04b17 	ldw	r6,-32468(gp)
 4036ae4:	e13fff17 	ldw	r4,-4(fp)
 4036ae8:	01410174 	movhi	r5,1029
 4036aec:	296f0104 	addi	r5,r5,-17404
 4036af0:	40210380 	call	4021038 <ns_printf>
#ifdef USE_PPP
   ns_printf(pio, "current dial-in user name is %s\n", pppcfg.username);
   ns_printf(pio, "current dial-in password is %s\n", pppcfg.password);
#endif   /* USE_PPP */

   task_stats(pio);
 4036af4:	e13fff17 	ldw	r4,-4(fp)
 4036af8:	40370a40 	call	40370a4 <task_stats>

   return 0;
 4036afc:	0005883a 	mov	r2,zero
}
 4036b00:	e037883a 	mov	sp,fp
 4036b04:	dfc00217 	ldw	ra,8(sp)
 4036b08:	df000117 	ldw	fp,4(sp)
 4036b0c:	dc000017 	ldw	r16,0(sp)
 4036b10:	dec00304 	addi	sp,sp,12
 4036b14:	f800283a 	ret

04036b18 <sysuptime>:
 * RETURNS: 
 */

unsigned long
sysuptime()
{
 4036b18:	deffff04 	addi	sp,sp,-4
 4036b1c:	df000015 	stw	fp,0(sp)
 4036b20:	d839883a 	mov	fp,sp
   return ((cticks/TPS)*100);    /* 100ths of a sec since boot time */
 4036b24:	00810174 	movhi	r2,1029
 4036b28:	1081e404 	addi	r2,r2,1936
 4036b2c:	10c00017 	ldw	r3,0(r2)
 4036b30:	00801904 	movi	r2,100
 4036b34:	1885203a 	divu	r2,r3,r2
 4036b38:	10801924 	muli	r2,r2,100
}
 4036b3c:	e037883a 	mov	sp,fp
 4036b40:	df000017 	ldw	fp,0(sp)
 4036b44:	dec00104 	addi	sp,sp,4
 4036b48:	f800283a 	ret

04036b4c <packet_check>:

static int inside_pktdemux = 0; 

void
packet_check(void)
{
 4036b4c:	defffe04 	addi	sp,sp,-8
 4036b50:	dfc00115 	stw	ra,4(sp)
 4036b54:	df000015 	stw	fp,0(sp)
 4036b58:	d839883a 	mov	fp,sp
   if(inside_pktdemux != 0)   /* check re-entrancy flag */
 4036b5c:	d0a83917 	ldw	r2,-24348(gp)
 4036b60:	1004c03a 	cmpne	r2,r2,zero
 4036b64:	1000071e 	bne	r2,zero,4036b84 <packet_check+0x38>
      return;           /* do not re-enter pktdemux(), packet will wait... */
   inside_pktdemux++;   /* set re-entrany flag */
 4036b68:	d0a83917 	ldw	r2,-24348(gp)
 4036b6c:	10800044 	addi	r2,r2,1
 4036b70:	d0a83915 	stw	r2,-24348(gp)
   pktdemux();          /* process low level packet input */
 4036b74:	401e2fc0 	call	401e2fc <pktdemux>
   inside_pktdemux--;   /* clear re-entrany flag */
 4036b78:	d0a83917 	ldw	r2,-24348(gp)
 4036b7c:	10bfffc4 	addi	r2,r2,-1
 4036b80:	d0a83915 	stw	r2,-24348(gp)
}
 4036b84:	e037883a 	mov	sp,fp
 4036b88:	dfc00117 	ldw	ra,4(sp)
 4036b8c:	df000017 	ldw	fp,0(sp)
 4036b90:	dec00204 	addi	sp,sp,8
 4036b94:	f800283a 	ret

04036b98 <mcastlist>:
 * RETURNS: 
 */

int
mcastlist(struct in_multi * multi_ptr)
{
 4036b98:	defffe04 	addi	sp,sp,-8
 4036b9c:	df000115 	stw	fp,4(sp)
 4036ba0:	df000104 	addi	fp,sp,4
 4036ba4:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(multi_ptr);

   return 0;
 4036ba8:	0005883a 	mov	r2,zero
}
 4036bac:	e037883a 	mov	sp,fp
 4036bb0:	df000017 	ldw	fp,0(sp)
 4036bb4:	dec00104 	addi	sp,sp,4
 4036bb8:	f800283a 	ret

04036bbc <prep_modules>:
#ifdef USE_MODEM
extern   int   prep_modem(void);
#endif   /* USE_MODEM */

int prep_modules(void)
{
 4036bbc:	defffd04 	addi	sp,sp,-12
 4036bc0:	dfc00215 	stw	ra,8(sp)
 4036bc4:	df000115 	stw	fp,4(sp)
 4036bc8:	df000104 	addi	fp,sp,4
#ifdef IP_V6
   ip6_addr host;
   int i;
#endif

int e = 0;
 4036bcc:	e03fff15 	stw	zero,-4(fp)
      panic("prep_modules");
   }
#endif   /* SMTP_ALERTS */

#ifdef VFS_FILES
   e = prep_vfs();
 4036bd0:	40445100 	call	4044510 <prep_vfs>
 4036bd4:	e0bfff15 	stw	r2,-4(fp)
   if (e != 0)
 4036bd8:	e0bfff17 	ldw	r2,-4(fp)
 4036bdc:	1005003a 	cmpeq	r2,r2,zero
 4036be0:	1000061e 	bne	r2,zero,4036bfc <prep_modules+0x40>
   {
      dprintf("VFS Module prep failed\n");
 4036be4:	01010174 	movhi	r4,1029
 4036be8:	212f0904 	addi	r4,r4,-17372
 4036bec:	40021940 	call	4002194 <puts>
      panic("prep_modules");
 4036bf0:	01010174 	movhi	r4,1029
 4036bf4:	212f0f04 	addi	r4,r4,-17348
 4036bf8:	4020e100 	call	4020e10 <panic>
   {
      dprintf("sslapp_init() failed\n");
      panic("prep_modules");
   }
#endif
   return 0;
 4036bfc:	0005883a 	mov	r2,zero
}
 4036c00:	e037883a 	mov	sp,fp
 4036c04:	dfc00117 	ldw	ra,4(sp)
 4036c08:	df000017 	ldw	fp,0(sp)
 4036c0c:	dec00204 	addi	sp,sp,8
 4036c10:	f800283a 	ret

04036c14 <inet_timer>:
 * RETURNS: 
 */

void
inet_timer(void)
{
 4036c14:	defffe04 	addi	sp,sp,-8
 4036c18:	dfc00115 	stw	ra,4(sp)
 4036c1c:	df000015 	stw	fp,0(sp)
 4036c20:	d839883a 	mov	fp,sp
#ifdef IP_FRAGMENTS
   /* run thru' the IP reassembly queue (once every second) */
   if (ire_cticks < cticks)
 4036c24:	00810174 	movhi	r2,1029
 4036c28:	10820504 	addi	r2,r2,2068
 4036c2c:	10c00017 	ldw	r3,0(r2)
 4036c30:	00810174 	movhi	r2,1029
 4036c34:	1081e404 	addi	r2,r2,1936
 4036c38:	10800017 	ldw	r2,0(r2)
 4036c3c:	1880012e 	bgeu	r3,r2,4036c44 <inet_timer+0x30>
      ip_reasm_process_timer_tick ();
 4036c40:	403c1b80 	call	403c1b8 <ip_reasm_process_timer_tick>
#endif

#ifdef INCLUDE_TCP
   tcp_tick();          /* run TCP timers */
 4036c44:	402813c0 	call	402813c <tcp_tick>
#endif

#ifdef INICHE_TIMERS    /* interval timers? */
   check_interval_timers();
 4036c48:	4036cd80 	call	4036cd8 <check_interval_timers>
#endif

#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   /* Call igmp timeout routine */
   if (igmp_cticks < cticks)  /* Call igmp timeout routine 5 times per sec */
 4036c4c:	00810174 	movhi	r2,1029
 4036c50:	1081c304 	addi	r2,r2,1804
 4036c54:	10c00017 	ldw	r3,0(r2)
 4036c58:	00810174 	movhi	r2,1029
 4036c5c:	1081e404 	addi	r2,r2,1936
 4036c60:	10800017 	ldw	r2,0(r2)
 4036c64:	1880012e 	bgeu	r3,r2,4036c6c <inet_timer+0x58>
      igmp_fasttimo();
 4036c68:	401ef9c0 	call	401ef9c <igmp_fasttimo>
#endif



   /* Some timer routines only need calling once a second: */
   if ((nextppp < cticks) ||  /* next call to PPP is due */
 4036c6c:	d0a83a17 	ldw	r2,-24344(gp)
 4036c70:	00c10174 	movhi	r3,1029
 4036c74:	18c1e404 	addi	r3,r3,1936
 4036c78:	18c00017 	ldw	r3,0(r3)
 4036c7c:	10c00636 	bltu	r2,r3,4036c98 <inet_timer+0x84>
 4036c80:	00810174 	movhi	r2,1029
 4036c84:	1081e404 	addi	r2,r2,1936
 4036c88:	10800017 	ldw	r2,0(r2)
 4036c8c:	10c0fa04 	addi	r3,r2,1000
 4036c90:	d0a83a17 	ldw	r2,-24344(gp)
 4036c94:	18800b2e 	bgeu	r3,r2,4036cc4 <inet_timer+0xb0>
       (nextppp > (cticks+(10*TPS))) )  /* for when cticks wraps */
   {
      nextppp = cticks + TPS;
 4036c98:	00810174 	movhi	r2,1029
 4036c9c:	1081e404 	addi	r2,r2,1936
 4036ca0:	10800017 	ldw	r2,0(r2)
 4036ca4:	10801904 	addi	r2,r2,100
 4036ca8:	d0a83a15 	stw	r2,-24344(gp)

      if (port_1s_callout != NULL)
 4036cac:	d0a83b17 	ldw	r2,-24340(gp)
 4036cb0:	1005003a 	cmpeq	r2,r2,zero
 4036cb4:	1000021e 	bne	r2,zero,4036cc0 <inet_timer+0xac>
         (*port_1s_callout)();
 4036cb8:	d0a83b17 	ldw	r2,-24340(gp)
 4036cbc:	103ee83a 	callr	r2

#ifdef USE_PPP
      ppp_timeisup();
#endif
#ifdef DHCP_CLIENT
      dhc_second();
 4036cc0:	402420c0 	call	402420c <dhc_second>
#endif
#ifdef IPSEC
      IPSecTimer();
#endif
   }
}
 4036cc4:	e037883a 	mov	sp,fp
 4036cc8:	dfc00117 	ldw	ra,4(sp)
 4036ccc:	df000017 	ldw	fp,0(sp)
 4036cd0:	dec00204 	addi	sp,sp,8
 4036cd4:	f800283a 	ret

04036cd8 <check_interval_timers>:

static int numtimers = 0;     /* number of active timers */

static void
check_interval_timers(void)
{
 4036cd8:	defffc04 	addi	sp,sp,-16
 4036cdc:	dfc00315 	stw	ra,12(sp)
 4036ce0:	df000215 	stw	fp,8(sp)
 4036ce4:	df000204 	addi	fp,sp,8
   int   i;
   int   found = 0;  /* number of valid timers found */
 4036ce8:	e03ffe15 	stw	zero,-8(fp)

   /* if no timers, just return */
   if (numtimers > 0)
 4036cec:	d0a83c17 	ldw	r2,-24336(gp)
 4036cf0:	10800050 	cmplti	r2,r2,1
 4036cf4:	1000591e 	bne	r2,zero,4036e5c <check_interval_timers+0x184>
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
 4036cf8:	e03fff15 	stw	zero,-4(fp)
 4036cfc:	00005406 	br	4036e50 <check_interval_timers+0x178>
      {
         if (intimers[i].callback)   /* is this timer active? */
 4036d00:	e0bfff17 	ldw	r2,-4(fp)
 4036d04:	00c101b4 	movhi	r3,1030
 4036d08:	18e3f004 	addi	r3,r3,-28736
 4036d0c:	10800524 	muli	r2,r2,20
 4036d10:	10c5883a 	add	r2,r2,r3
 4036d14:	10800017 	ldw	r2,0(r2)
 4036d18:	1005003a 	cmpeq	r2,r2,zero
 4036d1c:	1000491e 	bne	r2,zero,4036e44 <check_interval_timers+0x16c>
	 {
            if ((intimers[i].tmo < cticks) && (!intimers[i].inuse))  /* timer ready fire? */
 4036d20:	e0bfff17 	ldw	r2,-4(fp)
 4036d24:	00c101b4 	movhi	r3,1030
 4036d28:	18e3f004 	addi	r3,r3,-28736
 4036d2c:	10800524 	muli	r2,r2,20
 4036d30:	10c5883a 	add	r2,r2,r3
 4036d34:	10800304 	addi	r2,r2,12
 4036d38:	10c00017 	ldw	r3,0(r2)
 4036d3c:	00810174 	movhi	r2,1029
 4036d40:	1081e404 	addi	r2,r2,1936
 4036d44:	10800017 	ldw	r2,0(r2)
 4036d48:	1880382e 	bgeu	r3,r2,4036e2c <check_interval_timers+0x154>
 4036d4c:	e0bfff17 	ldw	r2,-4(fp)
 4036d50:	00c101b4 	movhi	r3,1030
 4036d54:	18e3f004 	addi	r3,r3,-28736
 4036d58:	10800524 	muli	r2,r2,20
 4036d5c:	10c5883a 	add	r2,r2,r3
 4036d60:	10800404 	addi	r2,r2,16
 4036d64:	10800017 	ldw	r2,0(r2)
 4036d68:	1004c03a 	cmpne	r2,r2,zero
 4036d6c:	10002f1e 	bne	r2,zero,4036e2c <check_interval_timers+0x154>
            {
               intimers[i].tmo = intimers[i].interval + cticks;   /* set next tmo */
 4036d70:	e17fff17 	ldw	r5,-4(fp)
 4036d74:	e0bfff17 	ldw	r2,-4(fp)
 4036d78:	00c101b4 	movhi	r3,1030
 4036d7c:	18e3f004 	addi	r3,r3,-28736
 4036d80:	10800524 	muli	r2,r2,20
 4036d84:	10c5883a 	add	r2,r2,r3
 4036d88:	10800204 	addi	r2,r2,8
 4036d8c:	10c00017 	ldw	r3,0(r2)
 4036d90:	00810174 	movhi	r2,1029
 4036d94:	1081e404 	addi	r2,r2,1936
 4036d98:	10800017 	ldw	r2,0(r2)
 4036d9c:	1889883a 	add	r4,r3,r2
 4036da0:	00c101b4 	movhi	r3,1030
 4036da4:	18e3f004 	addi	r3,r3,-28736
 4036da8:	28800524 	muli	r2,r5,20
 4036dac:	10c5883a 	add	r2,r2,r3
 4036db0:	10800304 	addi	r2,r2,12
 4036db4:	11000015 	stw	r4,0(r2)
               intimers[i].inuse = TRUE;
 4036db8:	e0bfff17 	ldw	r2,-4(fp)
 4036dbc:	00c101b4 	movhi	r3,1030
 4036dc0:	18e3f004 	addi	r3,r3,-28736
 4036dc4:	10800524 	muli	r2,r2,20
 4036dc8:	10c5883a 	add	r2,r2,r3
 4036dcc:	10c00404 	addi	r3,r2,16
 4036dd0:	00800044 	movi	r2,1
 4036dd4:	18800015 	stw	r2,0(r3)
               intimers[i].callback(intimers[i].parm);      /* call user routine */
 4036dd8:	e0bfff17 	ldw	r2,-4(fp)
 4036ddc:	00c101b4 	movhi	r3,1030
 4036de0:	18e3f004 	addi	r3,r3,-28736
 4036de4:	10800524 	muli	r2,r2,20
 4036de8:	10c5883a 	add	r2,r2,r3
 4036dec:	11400017 	ldw	r5,0(r2)
 4036df0:	e0bfff17 	ldw	r2,-4(fp)
 4036df4:	00c101b4 	movhi	r3,1030
 4036df8:	18e3f004 	addi	r3,r3,-28736
 4036dfc:	10800524 	muli	r2,r2,20
 4036e00:	10c5883a 	add	r2,r2,r3
 4036e04:	10800104 	addi	r2,r2,4
 4036e08:	11000017 	ldw	r4,0(r2)
 4036e0c:	283ee83a 	callr	r5
               intimers[i].inuse = FALSE;
 4036e10:	e0bfff17 	ldw	r2,-4(fp)
 4036e14:	00c101b4 	movhi	r3,1030
 4036e18:	18e3f004 	addi	r3,r3,-28736
 4036e1c:	10800524 	muli	r2,r2,20
 4036e20:	10c5883a 	add	r2,r2,r3
 4036e24:	10800404 	addi	r2,r2,16
 4036e28:	10000015 	stw	zero,0(r2)
            }
            /* If we've examined all the active timers, we're done */
            if (++found >= numtimers)
 4036e2c:	e0bffe17 	ldw	r2,-8(fp)
 4036e30:	10800044 	addi	r2,r2,1
 4036e34:	e0bffe15 	stw	r2,-8(fp)
 4036e38:	d0e83c17 	ldw	r3,-24336(gp)
 4036e3c:	e0bffe17 	ldw	r2,-8(fp)
 4036e40:	10c0060e 	bge	r2,r3,4036e5c <check_interval_timers+0x184>

   /* if no timers, just return */
   if (numtimers > 0)
   {
      /* loop throught the timer list looking for active timers ready to fire */
      for (i = 0; i < NUM_INTIMERS; i++)
 4036e44:	e0bfff17 	ldw	r2,-4(fp)
 4036e48:	10800044 	addi	r2,r2,1
 4036e4c:	e0bfff15 	stw	r2,-4(fp)
 4036e50:	e0bfff17 	ldw	r2,-4(fp)
 4036e54:	10800150 	cmplti	r2,r2,5
 4036e58:	103fa91e 	bne	r2,zero,4036d00 <check_interval_timers+0x28>
            if (++found >= numtimers)
               break;
         }
      }
   }
}
 4036e5c:	e037883a 	mov	sp,fp
 4036e60:	dfc00117 	ldw	ra,4(sp)
 4036e64:	df000017 	ldw	fp,0(sp)
 4036e68:	dec00204 	addi	sp,sp,8
 4036e6c:	f800283a 	ret

04036e70 <in_timerset>:
 * RETURNS: timer ID if OK, else if table is full.
 */

long
in_timerset(void (*callback)(long), long msecs, long parm)
{
 4036e70:	defffa04 	addi	sp,sp,-24
 4036e74:	df000515 	stw	fp,20(sp)
 4036e78:	df000504 	addi	fp,sp,20
 4036e7c:	e13ffc15 	stw	r4,-16(fp)
 4036e80:	e17ffd15 	stw	r5,-12(fp)
 4036e84:	e1bffe15 	stw	r6,-8(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4036e88:	e03ffb15 	stw	zero,-20(fp)
 4036e8c:	00004906 	br	4036fb4 <in_timerset+0x144>
   {
      if(intimers[i].callback == NULL)
 4036e90:	e0bffb17 	ldw	r2,-20(fp)
 4036e94:	00c101b4 	movhi	r3,1030
 4036e98:	18e3f004 	addi	r3,r3,-28736
 4036e9c:	10800524 	muli	r2,r2,20
 4036ea0:	10c5883a 	add	r2,r2,r3
 4036ea4:	10800017 	ldw	r2,0(r2)
 4036ea8:	1004c03a 	cmpne	r2,r2,zero
 4036eac:	10003e1e 	bne	r2,zero,4036fa8 <in_timerset+0x138>
      {
         /* found empty table entry, set up new timer */
         intimers[i].callback = callback;
 4036eb0:	e0bffb17 	ldw	r2,-20(fp)
 4036eb4:	00c101b4 	movhi	r3,1030
 4036eb8:	18e3f004 	addi	r3,r3,-28736
 4036ebc:	10800524 	muli	r2,r2,20
 4036ec0:	10c7883a 	add	r3,r2,r3
 4036ec4:	e0bffc17 	ldw	r2,-16(fp)
 4036ec8:	18800015 	stw	r2,0(r3)
         intimers[i].parm = parm;
 4036ecc:	e0bffb17 	ldw	r2,-20(fp)
 4036ed0:	00c101b4 	movhi	r3,1030
 4036ed4:	18e3f004 	addi	r3,r3,-28736
 4036ed8:	10800524 	muli	r2,r2,20
 4036edc:	10c5883a 	add	r2,r2,r3
 4036ee0:	10c00104 	addi	r3,r2,4
 4036ee4:	e0bffe17 	ldw	r2,-8(fp)
 4036ee8:	18800015 	stw	r2,0(r3)
         /* set interval, in TPS (cticks) units */
         intimers[i].interval = (msecs * TPS)/1000;
 4036eec:	e17ffb17 	ldw	r5,-20(fp)
 4036ef0:	e0bffd17 	ldw	r2,-12(fp)
 4036ef4:	10c01924 	muli	r3,r2,100
 4036ef8:	0080fa04 	movi	r2,1000
 4036efc:	1889203a 	divu	r4,r3,r2
 4036f00:	00c101b4 	movhi	r3,1030
 4036f04:	18e3f004 	addi	r3,r3,-28736
 4036f08:	28800524 	muli	r2,r5,20
 4036f0c:	10c5883a 	add	r2,r2,r3
 4036f10:	10800204 	addi	r2,r2,8
 4036f14:	11000015 	stw	r4,0(r2)
         intimers[i].tmo = intimers[i].interval + cticks;   /* first tmo */
 4036f18:	e17ffb17 	ldw	r5,-20(fp)
 4036f1c:	e0bffb17 	ldw	r2,-20(fp)
 4036f20:	00c101b4 	movhi	r3,1030
 4036f24:	18e3f004 	addi	r3,r3,-28736
 4036f28:	10800524 	muli	r2,r2,20
 4036f2c:	10c5883a 	add	r2,r2,r3
 4036f30:	10800204 	addi	r2,r2,8
 4036f34:	10c00017 	ldw	r3,0(r2)
 4036f38:	00810174 	movhi	r2,1029
 4036f3c:	1081e404 	addi	r2,r2,1936
 4036f40:	10800017 	ldw	r2,0(r2)
 4036f44:	1889883a 	add	r4,r3,r2
 4036f48:	00c101b4 	movhi	r3,1030
 4036f4c:	18e3f004 	addi	r3,r3,-28736
 4036f50:	28800524 	muli	r2,r5,20
 4036f54:	10c5883a 	add	r2,r2,r3
 4036f58:	10800304 	addi	r2,r2,12
 4036f5c:	11000015 	stw	r4,0(r2)
		 intimers[i].inuse = FALSE;
 4036f60:	e0bffb17 	ldw	r2,-20(fp)
 4036f64:	00c101b4 	movhi	r3,1030
 4036f68:	18e3f004 	addi	r3,r3,-28736
 4036f6c:	10800524 	muli	r2,r2,20
 4036f70:	10c5883a 	add	r2,r2,r3
 4036f74:	10800404 	addi	r2,r2,16
 4036f78:	10000015 	stw	zero,0(r2)
         numtimers++;
 4036f7c:	d0a83c17 	ldw	r2,-24336(gp)
 4036f80:	10800044 	addi	r2,r2,1
 4036f84:	d0a83c15 	stw	r2,-24336(gp)
         return (long)&intimers[i];
 4036f88:	e0bffb17 	ldw	r2,-20(fp)
 4036f8c:	10800524 	muli	r2,r2,20
 4036f90:	1007883a 	mov	r3,r2
 4036f94:	008101b4 	movhi	r2,1030
 4036f98:	10a3f004 	addi	r2,r2,-28736
 4036f9c:	1885883a 	add	r2,r3,r2
 4036fa0:	e0bfff15 	stw	r2,-4(fp)
 4036fa4:	00000706 	br	4036fc4 <in_timerset+0x154>
long
in_timerset(void (*callback)(long), long msecs, long parm)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4036fa8:	e0bffb17 	ldw	r2,-20(fp)
 4036fac:	10800044 	addi	r2,r2,1
 4036fb0:	e0bffb15 	stw	r2,-20(fp)
 4036fb4:	e0bffb17 	ldw	r2,-20(fp)
 4036fb8:	10800150 	cmplti	r2,r2,5
 4036fbc:	103fb41e 	bne	r2,zero,4036e90 <in_timerset+0x20>
		 intimers[i].inuse = FALSE;
         numtimers++;
         return (long)&intimers[i];
      }
   }
   return 0;
 4036fc0:	e03fff15 	stw	zero,-4(fp)
 4036fc4:	e0bfff17 	ldw	r2,-4(fp)
}
 4036fc8:	e037883a 	mov	sp,fp
 4036fcc:	df000017 	ldw	fp,0(sp)
 4036fd0:	dec00104 	addi	sp,sp,4
 4036fd4:	f800283a 	ret

04036fd8 <in_timerkill>:
 */


int
in_timerkill(long timer)
{
 4036fd8:	defffb04 	addi	sp,sp,-20
 4036fdc:	dfc00415 	stw	ra,16(sp)
 4036fe0:	df000315 	stw	fp,12(sp)
 4036fe4:	df000304 	addi	fp,sp,12
 4036fe8:	e13ffe15 	stw	r4,-8(fp)
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4036fec:	e03ffd15 	stw	zero,-12(fp)
 4036ff0:	00001706 	br	4037050 <in_timerkill+0x78>
   {
      if(timer == (long)&intimers[i])
 4036ff4:	e0bffd17 	ldw	r2,-12(fp)
 4036ff8:	10800524 	muli	r2,r2,20
 4036ffc:	1007883a 	mov	r3,r2
 4037000:	008101b4 	movhi	r2,1030
 4037004:	10a3f004 	addi	r2,r2,-28736
 4037008:	1885883a 	add	r2,r3,r2
 403700c:	1007883a 	mov	r3,r2
 4037010:	e0bffe17 	ldw	r2,-8(fp)
 4037014:	18800b1e 	bne	r3,r2,4037044 <in_timerkill+0x6c>
      {
         intimers[i].callback = NULL;
 4037018:	e0bffd17 	ldw	r2,-12(fp)
 403701c:	00c101b4 	movhi	r3,1030
 4037020:	18e3f004 	addi	r3,r3,-28736
 4037024:	10800524 	muli	r2,r2,20
 4037028:	10c5883a 	add	r2,r2,r3
 403702c:	10000015 	stw	zero,0(r2)
         numtimers--;
 4037030:	d0a83c17 	ldw	r2,-24336(gp)
 4037034:	10bfffc4 	addi	r2,r2,-1
 4037038:	d0a83c15 	stw	r2,-24336(gp)
         return 0;      /* OK return */
 403703c:	e03fff15 	stw	zero,-4(fp)
 4037040:	00000906 	br	4037068 <in_timerkill+0x90>
int
in_timerkill(long timer)
{
   int   i;

   for(i = 0; i < NUM_INTIMERS; i++)
 4037044:	e0bffd17 	ldw	r2,-12(fp)
 4037048:	10800044 	addi	r2,r2,1
 403704c:	e0bffd15 	stw	r2,-12(fp)
 4037050:	e0bffd17 	ldw	r2,-12(fp)
 4037054:	10800150 	cmplti	r2,r2,5
 4037058:	103fe61e 	bne	r2,zero,4036ff4 <in_timerkill+0x1c>
         intimers[i].callback = NULL;
         numtimers--;
         return 0;      /* OK return */
      }
   }
   dtrap();    /* timer to kill not found */
 403705c:	4025bb40 	call	4025bb4 <dtrap>
   return ENP_PARAM;
 4037060:	00bffd84 	movi	r2,-10
 4037064:	e0bfff15 	stw	r2,-4(fp)
 4037068:	e0bfff17 	ldw	r2,-4(fp)
}
 403706c:	e037883a 	mov	sp,fp
 4037070:	dfc00117 	ldw	ra,4(sp)
 4037074:	df000017 	ldw	fp,0(sp)
 4037078:	dec00204 	addi	sp,sp,8
 403707c:	f800283a 	ret

04037080 <create_apptasks>:
#endif
/* per-application thread definitions */

int
create_apptasks(void)
{
 4037080:	defffe04 	addi	sp,sp,-8
 4037084:	df000115 	stw	fp,4(sp)
 4037088:	df000104 	addi	fp,sp,4
int e = 0;
 403708c:	e03fff15 	stw	zero,-4(fp)
#endif
/* 
 * Altera Niche Stack Nios port modification:
 * return error code, if any 
 */
   return e;
 4037090:	e0bfff17 	ldw	r2,-4(fp)
}
 4037094:	e037883a 	mov	sp,fp
 4037098:	df000017 	ldw	fp,0(sp)
 403709c:	dec00104 	addi	sp,sp,4
 40370a0:	f800283a 	ret

040370a4 <task_stats>:
 */


void
task_stats(void * pio)
{
 40370a4:	defffd04 	addi	sp,sp,-12
 40370a8:	dfc00215 	stw	ra,8(sp)
 40370ac:	df000115 	stw	fp,4(sp)
 40370b0:	df000104 	addi	fp,sp,4
 40370b4:	e13fff15 	stw	r4,-4(fp)
   ns_printf(pio, "Task wakeups:");
 40370b8:	e13fff17 	ldw	r4,-4(fp)
 40370bc:	01410174 	movhi	r5,1029
 40370c0:	296f1304 	addi	r5,r5,-17332
 40370c4:	40210380 	call	4021038 <ns_printf>

#ifndef NO_INET_STACK
   ns_printf(pio, "netmain: %lu\n", netmain_wakes);
 40370c8:	00810174 	movhi	r2,1029
 40370cc:	1081c604 	addi	r2,r2,1816
 40370d0:	11800017 	ldw	r6,0(r2)
 40370d4:	e13fff17 	ldw	r4,-4(fp)
 40370d8:	01410174 	movhi	r5,1029
 40370dc:	296f1704 	addi	r5,r5,-17316
 40370e0:	40210380 	call	4021038 <ns_printf>
#endif
#ifndef NO_INET_TICK
   ns_printf(pio, "nettick: %lu\n", nettick_wakes);
 40370e4:	00810174 	movhi	r2,1029
 40370e8:	1081c704 	addi	r2,r2,1820
 40370ec:	11800017 	ldw	r6,0(r2)
 40370f0:	e13fff17 	ldw	r4,-4(fp)
 40370f4:	01410174 	movhi	r5,1029
 40370f8:	296f1b04 	addi	r5,r5,-17300
 40370fc:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio, "browtask: %lu  ", browtask_wakes);
#endif
#ifdef INCLUDE_SSLAPP
   ns_printf(pio, "INCLUDE_SSLAPP: %lu  ", sslapp_wakes);
#endif
   ns_printf(pio, "\n");
 4037100:	e13fff17 	ldw	r4,-4(fp)
 4037104:	01410174 	movhi	r5,1029
 4037108:	296f1f04 	addi	r5,r5,-17284
 403710c:	40210380 	call	4021038 <ns_printf>
}
 4037110:	e037883a 	mov	sp,fp
 4037114:	dfc00117 	ldw	ra,4(sp)
 4037118:	df000017 	ldw	fp,0(sp)
 403711c:	dec00204 	addi	sp,sp,8
 4037120:	f800283a 	ret

04037124 <fcntl>:
 * (for files and device drivers) or calls the InterNiche bsd_ioctl for 
 * sockets.
 */
 
int fcntl (int file, int cmd, ...)
{
 4037124:	defff704 	addi	sp,sp,-36
 4037128:	dfc00615 	stw	ra,24(sp)
 403712c:	df000515 	stw	fp,20(sp)
 4037130:	df000504 	addi	fp,sp,20
 4037134:	e13ffd15 	stw	r4,-12(fp)
 4037138:	e1800215 	stw	r6,8(fp)
 403713c:	e1c00315 	stw	r7,12(fp)
 4037140:	e17ffe15 	stw	r5,-8(fp)
  long     flags;
  va_list  argp;

  if (file < ALT_MAX_FD)
 4037144:	e0bffd17 	ldw	r2,-12(fp)
 4037148:	10800808 	cmpgei	r2,r2,32
 403714c:	10000e1e 	bne	r2,zero,4037188 <fcntl+0x64>
  {
    va_start(argp, cmd);
 4037150:	e0800204 	addi	r2,fp,8
 4037154:	e0bffc15 	stw	r2,-16(fp)
    flags = va_arg(argp, long);
 4037158:	e0fffc17 	ldw	r3,-16(fp)
 403715c:	18800104 	addi	r2,r3,4
 4037160:	e0bffc15 	stw	r2,-16(fp)
 4037164:	1805883a 	mov	r2,r3
 4037168:	10800017 	ldw	r2,0(r2)
 403716c:	e0bffb15 	stw	r2,-20(fp)
    va_end(argp);
    return alt_fcntl(file, cmd, flags);
 4037170:	e13ffd17 	ldw	r4,-12(fp)
 4037174:	e17ffe17 	ldw	r5,-8(fp)
 4037178:	e1bffb17 	ldw	r6,-20(fp)
 403717c:	40446d80 	call	40446d8 <alt_fcntl>
 4037180:	e0bfff15 	stw	r2,-4(fp)
 4037184:	00000d06 	br	40371bc <fcntl+0x98>
  }
  else
  {
    va_start(argp, cmd);
 4037188:	e0800204 	addi	r2,fp,8
 403718c:	e0bffc15 	stw	r2,-16(fp)
    flags = va_arg(argp, long);
 4037190:	e0fffc17 	ldw	r3,-16(fp)
 4037194:	18800104 	addi	r2,r3,4
 4037198:	e0bffc15 	stw	r2,-16(fp)
 403719c:	1805883a 	mov	r2,r3
 40371a0:	10800017 	ldw	r2,0(r2)
 40371a4:	e0bffb15 	stw	r2,-20(fp)
    va_end(argp);
    return bsd_ioctl(file, cmd, flags);
 40371a8:	e17ffe17 	ldw	r5,-8(fp)
 40371ac:	e13ffd17 	ldw	r4,-12(fp)
 40371b0:	e1bffb17 	ldw	r6,-20(fp)
 40371b4:	40204780 	call	4020478 <bsd_ioctl>
 40371b8:	e0bfff15 	stw	r2,-4(fp)
 40371bc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 40371c0:	e037883a 	mov	sp,fp
 40371c4:	dfc00117 	ldw	ra,4(sp)
 40371c8:	df000017 	ldw	fp,0(sp)
 40371cc:	dec00404 	addi	sp,sp,16
 40371d0:	f800283a 	ret

040371d4 <etainit>:
 * RETURNS: int               0 if OK, else nonzero
 */

int
etainit(void)
{
 40371d4:	defffd04 	addi	sp,sp,-12
 40371d8:	dfc00215 	stw	ra,8(sp)
 40371dc:	df000115 	stw	fp,4(sp)
 40371e0:	df000104 	addi	fp,sp,4
   /* register ARP type with the Net Driver */
   if (reg_type(ET_ARP) != 0)
 40371e4:	01018204 	movi	r4,1544
 40371e8:	40387d80 	call	40387d8 <reg_type>
 40371ec:	1005003a 	cmpeq	r2,r2,zero
 40371f0:	1000061e 	bne	r2,zero,403720c <etainit+0x38>
   {
#ifdef NPDEBUG
      dprintf("ARP: unable to register type with MAC Driver\n");
 40371f4:	01010174 	movhi	r4,1029
 40371f8:	212f2004 	addi	r4,r4,-17280
 40371fc:	40021940 	call	4002194 <puts>
#endif
      return (1);
 4037200:	00800044 	movi	r2,1
 4037204:	e0bfff15 	stw	r2,-4(fp)
 4037208:	00000106 	br	4037210 <etainit+0x3c>
   }
   return (0);
 403720c:	e03fff15 	stw	zero,-4(fp)
 4037210:	e0bfff17 	ldw	r2,-4(fp)
}
 4037214:	e037883a 	mov	sp,fp
 4037218:	dfc00117 	ldw	ra,4(sp)
 403721c:	df000017 	ldw	fp,0(sp)
 4037220:	dec00204 	addi	sp,sp,8
 4037224:	f800283a 	ret

04037228 <et_send>:
 * and MIB info in the packet header. 
 */

int
et_send(PACKET pkt, struct arptabent *tp)
{
 4037228:	defff904 	addi	sp,sp,-28
 403722c:	dfc00615 	stw	ra,24(sp)
 4037230:	df000515 	stw	fp,20(sp)
 4037234:	df000504 	addi	fp,sp,20
 4037238:	e13ffe15 	stw	r4,-8(fp)
 403723c:	e17fff15 	stw	r5,-4(fp)
   char *ethhdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 4037240:	e0bffe17 	ldw	r2,-8(fp)
 4037244:	10800617 	ldw	r2,24(r2)
 4037248:	10802717 	ldw	r2,156(r2)
 403724c:	e0bffc15 	stw	r2,-16(fp)
   int err;

   tp->lasttime = cticks;
 4037250:	00810174 	movhi	r2,1029
 4037254:	1081e404 	addi	r2,r2,1936
 4037258:	10c00017 	ldw	r3,0(r2)
 403725c:	e0bfff17 	ldw	r2,-4(fp)
 4037260:	10c00615 	stw	r3,24(r2)
   pkt->nb_prot -= ETHHDR_SIZE;  /* prepare for prepending ethernet header */
 4037264:	e0bffe17 	ldw	r2,-8(fp)
 4037268:	10800317 	ldw	r2,12(r2)
 403726c:	10fffc04 	addi	r3,r2,-16
 4037270:	e0bffe17 	ldw	r2,-8(fp)
 4037274:	10c00315 	stw	r3,12(r2)
   pkt->nb_plen += ETHHDR_SIZE;
 4037278:	e0bffe17 	ldw	r2,-8(fp)
 403727c:	10800417 	ldw	r2,16(r2)
 4037280:	10c00404 	addi	r3,r2,16
 4037284:	e0bffe17 	ldw	r2,-8(fp)
 4037288:	10c00415 	stw	r3,16(r2)
   ethhdr = pkt->nb_prot + ETHHDR_BIAS;
 403728c:	e0bffe17 	ldw	r2,-8(fp)
 4037290:	10800317 	ldw	r2,12(r2)
 4037294:	10800084 	addi	r2,r2,2
 4037298:	e0bffd15 	stw	r2,-12(fp)
      MEMMOVE(snap, snapdata, 6);
      snap->type = ARPIP;
   }
#endif   /* IEEE_802_3 */

   if (ethhdr < pkt->nb_buff)   /* sanity check pointer */
 403729c:	e0bffe17 	ldw	r2,-8(fp)
 40372a0:	10c00117 	ldw	r3,4(r2)
 40372a4:	e0bffd17 	ldw	r2,-12(fp)
 40372a8:	10c0032e 	bgeu	r2,r3,40372b8 <et_send+0x90>
      panic("et_send: prepend");
 40372ac:	01010174 	movhi	r4,1029
 40372b0:	212f2c04 	addi	r4,r4,-17232
 40372b4:	4020e100 	call	4020e10 <panic>

   MEMMOVE(ethhdr + ET_DSTOFF, tp->t_phy_addr, 6);  /* set pkt's MAC dst addr */
 40372b8:	e0bfff17 	ldw	r2,-4(fp)
 40372bc:	11400104 	addi	r5,r2,4
 40372c0:	e13ffd17 	ldw	r4,-12(fp)
 40372c4:	01800184 	movi	r6,6
 40372c8:	4001e840 	call	4001e84 <memmove>
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);  /* MAC src */
 40372cc:	e0bffd17 	ldw	r2,-12(fp)
 40372d0:	11000184 	addi	r4,r2,6
 40372d4:	e0bffc17 	ldw	r2,-16(fp)
 40372d8:	11400517 	ldw	r5,20(r2)
 40372dc:	01800184 	movi	r6,6
 40372e0:	4001e840 	call	4001e84 <memmove>

   /* nice clean ethernet II header */
   if ((tp->flags & (ET_ETH2|ET_SNAP)) != ET_SNAP)
 40372e4:	e0bfff17 	ldw	r2,-4(fp)
 40372e8:	1080070b 	ldhu	r2,28(r2)
 40372ec:	10bfffcc 	andi	r2,r2,65535
 40372f0:	108000cc 	andi	r2,r2,3
 40372f4:	108000a0 	cmpeqi	r2,r2,2
 40372f8:	1000041e 	bne	r2,zero,403730c <et_send+0xe4>
      ET_TYPE_SET(ethhdr, ntohs(ARPIP));
 40372fc:	e0bffd17 	ldw	r2,-12(fp)
 4037300:	10c00304 	addi	r3,r2,12
 4037304:	00800204 	movi	r2,8
 4037308:	18800005 	stb	r2,0(r3)
 403730c:	e0bffd17 	ldw	r2,-12(fp)
 4037310:	10800344 	addi	r2,r2,13
 4037314:	10000005 	stb	zero,0(r2)
      ET_TYPE_SET(ethhdr, len8023);
   }
#endif   /* IEEE_802_3 */

   /* if a packet oriented send exists, use it: */
   if (pkt->net->pkt_send)
 4037318:	e0bffe17 	ldw	r2,-8(fp)
 403731c:	10800617 	ldw	r2,24(r2)
 4037320:	10800417 	ldw	r2,16(r2)
 4037324:	1005003a 	cmpeq	r2,r2,zero
 4037328:	1000071e 	bne	r2,zero,4037348 <et_send+0x120>
      err = pkt->net->pkt_send(pkt);   /* send packet to media */
 403732c:	e0bffe17 	ldw	r2,-8(fp)
 4037330:	10800617 	ldw	r2,24(r2)
 4037334:	10800417 	ldw	r2,16(r2)
 4037338:	e13ffe17 	ldw	r4,-8(fp)
 403733c:	103ee83a 	callr	r2
 4037340:	e0bffb15 	stw	r2,-20(fp)
 4037344:	00001106 	br	403738c <et_send+0x164>
   else  /* else use older raw_send routine */
   {
      /* sent to media */
      err = pkt->net->raw_send(pkt->net, pkt->nb_prot, pkt->nb_plen);
 4037348:	e0bffe17 	ldw	r2,-8(fp)
 403734c:	10800617 	ldw	r2,24(r2)
 4037350:	10c00317 	ldw	r3,12(r2)
 4037354:	e0bffe17 	ldw	r2,-8(fp)
 4037358:	11000617 	ldw	r4,24(r2)
 403735c:	e0bffe17 	ldw	r2,-8(fp)
 4037360:	11400317 	ldw	r5,12(r2)
 4037364:	e0bffe17 	ldw	r2,-8(fp)
 4037368:	11800417 	ldw	r6,16(r2)
 403736c:	183ee83a 	callr	r3
 4037370:	e0bffb15 	stw	r2,-20(fp)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4037374:	01000084 	movi	r4,2
 4037378:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 403737c:	e13ffe17 	ldw	r4,-8(fp)
 4037380:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037384:	01000084 	movi	r4,2
 4037388:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   }

   return (err);
 403738c:	e0bffb17 	ldw	r2,-20(fp)
}
 4037390:	e037883a 	mov	sp,fp
 4037394:	dfc00117 	ldw	ra,4(sp)
 4037398:	df000017 	ldw	fp,0(sp)
 403739c:	dec00204 	addi	sp,sp,8
 40373a0:	f800283a 	ret

040373a4 <arp_free_pending>:
 * and mark the entry "unused".
 */

void
arp_free_pending(struct arptabent *entry)
{
 40373a4:	defffb04 	addi	sp,sp,-20
 40373a8:	dfc00415 	stw	ra,16(sp)
 40373ac:	df000315 	stw	fp,12(sp)
 40373b0:	df000304 	addi	fp,sp,12
 40373b4:	e13fff15 	stw	r4,-4(fp)
   PACKET tmppkt;
   PACKET nextpkt;

   /* entry->pending has the linked list of all pending packets */
   tmppkt = entry->pending;
 40373b8:	e0bfff17 	ldw	r2,-4(fp)
 40373bc:	10800417 	ldw	r2,16(r2)
 40373c0:	e0bffe15 	stw	r2,-8(fp)
   entry->pending = (PACKET)NULL;
 40373c4:	e0bfff17 	ldw	r2,-4(fp)
 40373c8:	10000415 	stw	zero,16(r2)

   LOCK_NET_RESOURCE(FREEQ_RESID);
 40373cc:	01000084 	movi	r4,2
 40373d0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   /* free all pending packets */
   while (tmppkt)
 40373d4:	00000906 	br	40373fc <arp_free_pending+0x58>
   {
      nextpkt = tmppkt->next;        /* save the next packet in list */
 40373d8:	e0bffe17 	ldw	r2,-8(fp)
 40373dc:	10800017 	ldw	r2,0(r2)
 40373e0:	e0bffd15 	stw	r2,-12(fp)
      tmppkt->next = (PACKET)NULL;
 40373e4:	e0bffe17 	ldw	r2,-8(fp)
 40373e8:	10000015 	stw	zero,0(r2)
      pk_free(tmppkt);               /* free current packet */
 40373ec:	e13ffe17 	ldw	r4,-8(fp)
 40373f0:	40253040 	call	4025304 <pk_free>
      tmppkt = nextpkt;              /* process the next packet */
 40373f4:	e0bffd17 	ldw	r2,-12(fp)
 40373f8:	e0bffe15 	stw	r2,-8(fp)
   entry->pending = (PACKET)NULL;

   LOCK_NET_RESOURCE(FREEQ_RESID);

   /* free all pending packets */
   while (tmppkt)
 40373fc:	e0bffe17 	ldw	r2,-8(fp)
 4037400:	1004c03a 	cmpne	r2,r2,zero
 4037404:	103ff41e 	bne	r2,zero,40373d8 <arp_free_pending+0x34>
      tmppkt->next = (PACKET)NULL;
      pk_free(tmppkt);               /* free current packet */
      tmppkt = nextpkt;              /* process the next packet */
   }

   entry->t_pro_addr = 0;     /* mark the entry "unused" */
 4037408:	e0bfff17 	ldw	r2,-4(fp)
 403740c:	10000015 	stw	zero,0(r2)

   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037410:	01000084 	movi	r4,2
 4037414:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
}
 4037418:	e037883a 	mov	sp,fp
 403741c:	dfc00117 	ldw	ra,4(sp)
 4037420:	df000017 	ldw	fp,0(sp)
 4037424:	dec00204 	addi	sp,sp,8
 4037428:	f800283a 	ret

0403742c <arp_send_pending>:
 * Clear the list (entry->pending) after sending the packets.
 */

void
arp_send_pending(struct arptabent *entry)
{
 403742c:	defffc04 	addi	sp,sp,-16
 4037430:	dfc00315 	stw	ra,12(sp)
 4037434:	df000215 	stw	fp,8(sp)
 4037438:	df000204 	addi	fp,sp,8
 403743c:	e13fff15 	stw	r4,-4(fp)
   PACKET tmppkt = entry->pending;
 4037440:	e0bfff17 	ldw	r2,-4(fp)
 4037444:	10800417 	ldw	r2,16(r2)
 4037448:	e0bffe15 	stw	r2,-8(fp)

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 403744c:	00000906 	br	4037474 <arp_send_pending+0x48>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
 4037450:	e0bffe17 	ldw	r2,-8(fp)
 4037454:	10c00017 	ldw	r3,0(r2)
 4037458:	e0bfff17 	ldw	r2,-4(fp)
 403745c:	10c00415 	stw	r3,16(r2)
      tmppkt->next = (PACKET)NULL;
 4037460:	e0bffe17 	ldw	r2,-8(fp)
 4037464:	10000015 	stw	zero,0(r2)
      et_send(tmppkt, entry);          /* try send again */
 4037468:	e13ffe17 	ldw	r4,-8(fp)
 403746c:	e17fff17 	ldw	r5,-4(fp)
 4037470:	40372280 	call	4037228 <et_send>
   PACKET tmppkt = entry->pending;

   /* entry->pending has the linked list of all pending packets */

   /* send all pending packets */
   while ((tmppkt = entry->pending) != (PACKET)NULL)
 4037474:	e0bfff17 	ldw	r2,-4(fp)
 4037478:	10800417 	ldw	r2,16(r2)
 403747c:	e0bffe15 	stw	r2,-8(fp)
 4037480:	e0bffe17 	ldw	r2,-8(fp)
 4037484:	1004c03a 	cmpne	r2,r2,zero
 4037488:	103ff11e 	bne	r2,zero,4037450 <arp_send_pending+0x24>
   {
      entry->pending = tmppkt->next;   /* unlink the next packet */
      tmppkt->next = (PACKET)NULL;
      et_send(tmppkt, entry);          /* try send again */
   }
}
 403748c:	e037883a 	mov	sp,fp
 4037490:	dfc00117 	ldw	ra,4(sp)
 4037494:	df000017 	ldw	fp,0(sp)
 4037498:	dec00204 	addi	sp,sp,8
 403749c:	f800283a 	ret

040374a0 <send_arp>:
 * timeout will eventually free packet. 
 */

int
send_arp(PACKET pkt, ip_addr dest_ip)
{
 40374a0:	defff304 	addi	sp,sp,-52
 40374a4:	dfc00c15 	stw	ra,48(sp)
 40374a8:	df000b15 	stw	fp,44(sp)
 40374ac:	df000b04 	addi	fp,sp,44
 40374b0:	e13ffd15 	stw	r4,-12(fp)
 40374b4:	e17ffe15 	stw	r5,-8(fp)
   struct arptabent *   oldest;
   char * ethhdr;
   NET net = pkt->net;
 40374b8:	e0bffd17 	ldw	r2,-12(fp)
 40374bc:	10800617 	ldw	r2,24(r2)
 40374c0:	e0bff915 	stw	r2,-28(fp)
   struct arp_hdr *  arphdr;
   IFMIB etif = pkt->net->n_mib;    /* mib info for this ethernet interface */
 40374c4:	e0bffd17 	ldw	r2,-12(fp)
 40374c8:	10800617 	ldw	r2,24(r2)
 40374cc:	10802717 	ldw	r2,156(r2)
 40374d0:	e0bff715 	stw	r2,-36(fp)
   } dest_ip_ptr;
#endif /* ETHMCAST */


   /* If we are broadcasting or multicasting ... */
   if ((dest_ip == 0xFFFFFFFF) ||  
 40374d4:	e0bffe17 	ldw	r2,-8(fp)
 40374d8:	10bfffe0 	cmpeqi	r2,r2,-1
 40374dc:	10001b1e 	bne	r2,zero,403754c <send_arp+0xac>
 40374e0:	e0bff917 	ldw	r2,-28(fp)
 40374e4:	10800c17 	ldw	r2,48(r2)
 40374e8:	0086303a 	nor	r3,zero,r2
 40374ec:	e0bffe17 	ldw	r2,-8(fp)
 40374f0:	1886703a 	and	r3,r3,r2
 40374f4:	e0bff917 	ldw	r2,-28(fp)
 40374f8:	10800c17 	ldw	r2,48(r2)
 40374fc:	0084303a 	nor	r2,zero,r2
 4037500:	18801226 	beq	r3,r2,403754c <send_arp+0xac>
 4037504:	e0bffe17 	ldw	r2,-8(fp)
 4037508:	1004d63a 	srli	r2,r2,24
 403750c:	10c03fcc 	andi	r3,r2,255
 4037510:	e0bffe17 	ldw	r2,-8(fp)
 4037514:	1004d23a 	srli	r2,r2,8
 4037518:	10bfc00c 	andi	r2,r2,65280
 403751c:	1886b03a 	or	r3,r3,r2
 4037520:	e0bffe17 	ldw	r2,-8(fp)
 4037524:	10bfc00c 	andi	r2,r2,65280
 4037528:	1004923a 	slli	r2,r2,8
 403752c:	1886b03a 	or	r3,r3,r2
 4037530:	e0bffe17 	ldw	r2,-8(fp)
 4037534:	10803fcc 	andi	r2,r2,255
 4037538:	1004963a 	slli	r2,r2,24
 403753c:	1884b03a 	or	r2,r3,r2
 4037540:	10fc002c 	andhi	r3,r2,61440
 4037544:	00b80034 	movhi	r2,57344
 4037548:	1880441e 	bne	r3,r2,403765c <send_arp+0x1bc>
      ((dest_ip & ~(net->snmask)) == (0xFFFFFFFF & ~(net->snmask))))

#endif /* IP_MULTICAST */
   {
      /* get unused or oldest entry in table */
      oldest = make_arp_entry(dest_ip, pkt->net);
 403754c:	e0bffd17 	ldw	r2,-12(fp)
 4037550:	11400617 	ldw	r5,24(r2)
 4037554:	e13ffe17 	ldw	r4,-8(fp)
 4037558:	4037ae00 	call	4037ae0 <make_arp_entry>
 403755c:	e0bffb15 	stw	r2,-20(fp)

      /* set MAC destination to ethernet broadcast (all FFs) */
      MEMSET(oldest->t_phy_addr, 0xFF, 6);
 4037560:	e0bffb17 	ldw	r2,-20(fp)
 4037564:	10c00104 	addi	r3,r2,4
 4037568:	00bfffc4 	movi	r2,-1
 403756c:	18800005 	stb	r2,0(r3)
 4037570:	00bfffc4 	movi	r2,-1
 4037574:	18800045 	stb	r2,1(r3)
 4037578:	00bfffc4 	movi	r2,-1
 403757c:	18800085 	stb	r2,2(r3)
 4037580:	00bfffc4 	movi	r2,-1
 4037584:	188000c5 	stb	r2,3(r3)
 4037588:	00bfffc4 	movi	r2,-1
 403758c:	18800105 	stb	r2,4(r3)
 4037590:	00bfffc4 	movi	r2,-1
 4037594:	18800145 	stb	r2,5(r3)
#ifdef IP_MULTICAST
      /* If n_mcastlist routine is defined in the net structure,
         map IP mcast to Ether multicast  */

#ifdef ETHMCAST
      if ((pkt->net->n_mcastlist) && (IN_MULTICAST(ntohl(dest_ip))))
 4037598:	e0bffd17 	ldw	r2,-12(fp)
 403759c:	10800617 	ldw	r2,24(r2)
 40375a0:	10802b17 	ldw	r2,172(r2)
 40375a4:	1005003a 	cmpeq	r2,r2,zero
 40375a8:	1000271e 	bne	r2,zero,4037648 <send_arp+0x1a8>
 40375ac:	e0bffe17 	ldw	r2,-8(fp)
 40375b0:	1004d63a 	srli	r2,r2,24
 40375b4:	10c03fcc 	andi	r3,r2,255
 40375b8:	e0bffe17 	ldw	r2,-8(fp)
 40375bc:	1004d23a 	srli	r2,r2,8
 40375c0:	10bfc00c 	andi	r2,r2,65280
 40375c4:	1886b03a 	or	r3,r3,r2
 40375c8:	e0bffe17 	ldw	r2,-8(fp)
 40375cc:	10bfc00c 	andi	r2,r2,65280
 40375d0:	1004923a 	slli	r2,r2,8
 40375d4:	1886b03a 	or	r3,r3,r2
 40375d8:	e0bffe17 	ldw	r2,-8(fp)
 40375dc:	10803fcc 	andi	r2,r2,255
 40375e0:	1004963a 	slli	r2,r2,24
 40375e4:	1884b03a 	or	r2,r3,r2
 40375e8:	10fc002c 	andhi	r3,r2,61440
 40375ec:	00b80034 	movhi	r2,57344
 40375f0:	1880151e 	bne	r3,r2,4037648 <send_arp+0x1a8>
      {
         /* If IP mcast to be mapped to Ethernet multicast */
         dest_ip_ptr.l = dest_ip;
 40375f4:	e0bffe17 	ldw	r2,-8(fp)
 40375f8:	e0bffc15 	stw	r2,-16(fp)
         oldest->t_phy_addr[0] = 0x01;
 40375fc:	e0fffb17 	ldw	r3,-20(fp)
 4037600:	00800044 	movi	r2,1
 4037604:	18800105 	stb	r2,4(r3)
         oldest->t_phy_addr[1] = 0x00;
 4037608:	e0bffb17 	ldw	r2,-20(fp)
 403760c:	10000145 	stb	zero,5(r2)
         oldest->t_phy_addr[2] = 0x5e;
 4037610:	e0fffb17 	ldw	r3,-20(fp)
 4037614:	00801784 	movi	r2,94
 4037618:	18800185 	stb	r2,6(r3)
         oldest->t_phy_addr[3] = (u_char )(dest_ip_ptr.c[1] & 0x7f);
 403761c:	e0bffc43 	ldbu	r2,-15(fp)
 4037620:	10801fcc 	andi	r2,r2,127
 4037624:	1007883a 	mov	r3,r2
 4037628:	e0bffb17 	ldw	r2,-20(fp)
 403762c:	10c001c5 	stb	r3,7(r2)
         oldest->t_phy_addr[4] = (u_char )dest_ip_ptr.c[2];
 4037630:	e0fffc83 	ldbu	r3,-14(fp)
 4037634:	e0bffb17 	ldw	r2,-20(fp)
 4037638:	10c00205 	stb	r3,8(r2)
         oldest->t_phy_addr[5] = (u_char )dest_ip_ptr.c[3];
 403763c:	e0fffcc3 	ldbu	r3,-13(fp)
 4037640:	e0bffb17 	ldw	r2,-20(fp)
 4037644:	10c00245 	stb	r3,9(r2)
      }
#endif /* ETHMCAST */
#endif /* IP_MULTICAST */
      return (et_send(pkt, oldest));
 4037648:	e13ffd17 	ldw	r4,-12(fp)
 403764c:	e17ffb17 	ldw	r5,-20(fp)
 4037650:	40372280 	call	4037228 <et_send>
 4037654:	e0bfff15 	stw	r2,-4(fp)
 4037658:	0000b106 	br	4037920 <send_arp+0x480>

   /* If packet is addressed to this Ethernet interface, and
    * it's not a loopback address, then don't send it on the wire. 
    * Instead, free the packet and return ENP_NO_ROUTE  
    */
   if ((pkt->fhost == pkt->net->n_ipaddr) &&
 403765c:	e0bffd17 	ldw	r2,-12(fp)
 4037660:	10c00717 	ldw	r3,28(r2)
 4037664:	e0bffd17 	ldw	r2,-12(fp)
 4037668:	10800617 	ldw	r2,24(r2)
 403766c:	10800a17 	ldw	r2,40(r2)
 4037670:	18800e1e 	bne	r3,r2,40376ac <send_arp+0x20c>
 4037674:	e0bffd17 	ldw	r2,-12(fp)
 4037678:	10800717 	ldw	r2,28(r2)
 403767c:	10803fcc 	andi	r2,r2,255
 4037680:	10801fe0 	cmpeqi	r2,r2,127
 4037684:	1000091e 	bne	r2,zero,40376ac <send_arp+0x20c>
      ((pkt->fhost & htonl(0xFF000000)) != htonl(0x7F000000)))
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4037688:	01000084 	movi	r4,2
 403768c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 4037690:	e13ffd17 	ldw	r4,-12(fp)
 4037694:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037698:	01000084 	movi	r4,2
 403769c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_NO_ROUTE;
 40376a0:	00bff7c4 	movi	r2,-33
 40376a4:	e0bfff15 	stw	r2,-4(fp)
 40376a8:	00009d06 	br	4037920 <send_arp+0x480>
   }

   /* not broadcasting, so get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 40376ac:	01000084 	movi	r4,2
 40376b0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 40376b4:	01000c04 	movi	r4,48
 40376b8:	4024f700 	call	4024f70 <pk_alloc>
 40376bc:	e0bff615 	stw	r2,-40(fp)
   if (!arppkt)
 40376c0:	e0bff617 	ldw	r2,-40(fp)
 40376c4:	1004c03a 	cmpne	r2,r2,zero
 40376c8:	1000071e 	bne	r2,zero,40376e8 <send_arp+0x248>
   {
      pk_free(pkt);
 40376cc:	e13ffd17 	ldw	r4,-12(fp)
 40376d0:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40376d4:	01000084 	movi	r4,2
 40376d8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
 40376dc:	00bffa84 	movi	r2,-22
 40376e0:	e0bfff15 	stw	r2,-4(fp)
 40376e4:	00008e06 	br	4037920 <send_arp+0x480>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40376e8:	01000084 	movi	r4,2
 40376ec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 40376f0:	e0bff617 	ldw	r2,-40(fp)
 40376f4:	10c00117 	ldw	r3,4(r2)
 40376f8:	e0bff617 	ldw	r2,-40(fp)
 40376fc:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
 4037700:	e0fff617 	ldw	r3,-40(fp)
 4037704:	00800c04 	movi	r2,48
 4037708:	18800415 	stw	r2,16(r3)
   arppkt->net = pkt->net;
 403770c:	e0bffd17 	ldw	r2,-12(fp)
 4037710:	10c00617 	ldw	r3,24(r2)
 4037714:	e0bff617 	ldw	r2,-40(fp)
 4037718:	10c00615 	stw	r3,24(r2)

   /* get unused or oldest entry in table */
   oldest = make_arp_entry(dest_ip, pkt->net);
 403771c:	e0bffd17 	ldw	r2,-12(fp)
 4037720:	11400617 	ldw	r5,24(r2)
 4037724:	e13ffe17 	ldw	r4,-8(fp)
 4037728:	4037ae00 	call	4037ae0 <make_arp_entry>
 403772c:	e0bffb15 	stw	r2,-20(fp)

   oldest->pending = pkt;           /* packet is "pended", not pk_free()d */
 4037730:	e0fffb17 	ldw	r3,-20(fp)
 4037734:	e0bffd17 	ldw	r2,-12(fp)
 4037738:	18800415 	stw	r2,16(r3)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 403773c:	e0bff617 	ldw	r2,-40(fp)
 4037740:	10800117 	ldw	r2,4(r2)
 4037744:	10800084 	addi	r2,r2,2
 4037748:	e0bffa15 	stw	r2,-24(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 403774c:	e0bff617 	ldw	r2,-40(fp)
 4037750:	10800117 	ldw	r2,4(r2)
 4037754:	10800404 	addi	r2,r2,16
 4037758:	e0bff815 	stw	r2,-32(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 403775c:	e0fff817 	ldw	r3,-32(fp)
 4037760:	00804004 	movi	r2,256
 4037764:	1880000d 	sth	r2,0(r3)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 4037768:	e0fff817 	ldw	r3,-32(fp)
 403776c:	00800204 	movi	r2,8
 4037770:	1880008d 	sth	r2,2(r3)
   arphdr->ar_hln = 6;
 4037774:	e0fff817 	ldw	r3,-32(fp)
 4037778:	00800184 	movi	r2,6
 403777c:	18800105 	stb	r2,4(r3)
   arphdr->ar_pln = 4;
 4037780:	e0fff817 	ldw	r3,-32(fp)
 4037784:	00800104 	movi	r2,4
 4037788:	18800145 	stb	r2,5(r3)
   arphdr->ar_op = ARREQ;
 403778c:	e0fff817 	ldw	r3,-32(fp)
 4037790:	00804004 	movi	r2,256
 4037794:	1880018d 	sth	r2,6(r3)
   arphdr->ar_tpa = dest_ip;        /* target's IP address */
 4037798:	e0fff817 	ldw	r3,-32(fp)
 403779c:	e0bffe17 	ldw	r2,-8(fp)
 40377a0:	18800715 	stw	r2,28(r3)
   arphdr->ar_spa = pkt->net->n_ipaddr;   /* my IP address */
 40377a4:	e0bffd17 	ldw	r2,-12(fp)
 40377a8:	10800617 	ldw	r2,24(r2)
 40377ac:	10c00a17 	ldw	r3,40(r2)
 40377b0:	e0bff817 	ldw	r2,-32(fp)
 40377b4:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 40377b8:	e0bff817 	ldw	r2,-32(fp)
 40377bc:	11000204 	addi	r4,r2,8
 40377c0:	e0bff717 	ldw	r2,-36(fp)
 40377c4:	11400517 	ldw	r5,20(r2)
 40377c8:	01800184 	movi	r6,6
 40377cc:	4001e840 	call	4001e84 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 40377d0:	e0fffa17 	ldw	r3,-24(fp)
 40377d4:	00bfffc4 	movi	r2,-1
 40377d8:	18800005 	stb	r2,0(r3)
 40377dc:	00bfffc4 	movi	r2,-1
 40377e0:	18800045 	stb	r2,1(r3)
 40377e4:	00bfffc4 	movi	r2,-1
 40377e8:	18800085 	stb	r2,2(r3)
 40377ec:	00bfffc4 	movi	r2,-1
 40377f0:	188000c5 	stb	r2,3(r3)
 40377f4:	00bfffc4 	movi	r2,-1
 40377f8:	18800105 	stb	r2,4(r3)
 40377fc:	00bfffc4 	movi	r2,-1
 4037800:	18800145 	stb	r2,5(r3)
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 4037804:	e0bffa17 	ldw	r2,-24(fp)
 4037808:	11000184 	addi	r4,r2,6
 403780c:	e0bff717 	ldw	r2,-36(fp)
 4037810:	11400517 	ldw	r5,20(r2)
 4037814:	01800184 	movi	r6,6
 4037818:	4001e840 	call	4001e84 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 403781c:	e0bffa17 	ldw	r2,-24(fp)
 4037820:	10c00304 	addi	r3,r2,12
 4037824:	00800204 	movi	r2,8
 4037828:	18800005 	stb	r2,0(r3)
 403782c:	e0bffa17 	ldw	r2,-24(fp)
 4037830:	10c00344 	addi	r3,r2,13
 4037834:	00800184 	movi	r2,6
 4037838:	18800005 	stb	r2,0(r3)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 403783c:	e0bff817 	ldw	r2,-32(fp)
 4037840:	e0bff515 	stw	r2,-44(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 4037844:	e0bff517 	ldw	r2,-44(fp)
 4037848:	11000204 	addi	r4,r2,8
 403784c:	e0bff817 	ldw	r2,-32(fp)
 4037850:	11400204 	addi	r5,r2,8
 4037854:	01800184 	movi	r6,6
 4037858:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 403785c:	e0bff517 	ldw	r2,-44(fp)
 4037860:	10800204 	addi	r2,r2,8
 4037864:	11000184 	addi	r4,r2,6
 4037868:	e0bff817 	ldw	r2,-32(fp)
 403786c:	11400404 	addi	r5,r2,16
 4037870:	01800104 	movi	r6,4
 4037874:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 4037878:	e0bff517 	ldw	r2,-44(fp)
 403787c:	10800204 	addi	r2,r2,8
 4037880:	11000284 	addi	r4,r2,10
 4037884:	e0bff817 	ldw	r2,-32(fp)
 4037888:	11400504 	addi	r5,r2,20
 403788c:	01800184 	movi	r6,6
 4037890:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 4037894:	e0bff517 	ldw	r2,-44(fp)
 4037898:	10800204 	addi	r2,r2,8
 403789c:	11000404 	addi	r4,r2,16
 40378a0:	e0bff817 	ldw	r2,-32(fp)
 40378a4:	11400704 	addi	r5,r2,28
 40378a8:	01800104 	movi	r6,4
 40378ac:	4001e840 	call	4001e84 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 40378b0:	e0bff917 	ldw	r2,-28(fp)
 40378b4:	10800417 	ldw	r2,16(r2)
 40378b8:	1005003a 	cmpeq	r2,r2,zero
 40378bc:	1000051e 	bne	r2,zero,40378d4 <send_arp+0x434>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 40378c0:	e0bff917 	ldw	r2,-28(fp)
 40378c4:	10800417 	ldw	r2,16(r2)
 40378c8:	e13ff617 	ldw	r4,-40(fp)
 40378cc:	103ee83a 	callr	r2
 40378d0:	00000e06 	br	403790c <send_arp+0x46c>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 40378d4:	e0bff917 	ldw	r2,-28(fp)
 40378d8:	10c00317 	ldw	r3,12(r2)
 40378dc:	e0bff617 	ldw	r2,-40(fp)
 40378e0:	11000617 	ldw	r4,24(r2)
 40378e4:	e0bff617 	ldw	r2,-40(fp)
 40378e8:	11400117 	ldw	r5,4(r2)
 40378ec:	01800c04 	movi	r6,48
 40378f0:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40378f4:	01000084 	movi	r4,2
 40378f8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 40378fc:	e13ff617 	ldw	r4,-40(fp)
 4037900:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037904:	01000084 	movi	r4,2
 4037908:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
 403790c:	d0a84017 	ldw	r2,-24320(gp)
 4037910:	10800044 	addi	r2,r2,1
 4037914:	d0a84015 	stw	r2,-24320(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
 4037918:	00800044 	movi	r2,1
 403791c:	e0bfff15 	stw	r2,-4(fp)
 4037920:	e0bfff17 	ldw	r2,-4(fp)
}
 4037924:	e037883a 	mov	sp,fp
 4037928:	dfc00117 	ldw	ra,4(sp)
 403792c:	df000017 	ldw	fp,0(sp)
 4037930:	dec00204 	addi	sp,sp,8
 4037934:	f800283a 	ret

04037938 <find_oldest_arp>:
 * Old entries are removed from the table.
 */

struct arptabent * 
find_oldest_arp(ip_addr dest_ip)
{
 4037938:	defff604 	addi	sp,sp,-40
 403793c:	dfc00915 	stw	ra,36(sp)
 4037940:	df000815 	stw	fp,32(sp)
 4037944:	df000804 	addi	fp,sp,32
 4037948:	e13ffd15 	stw	r4,-12(fp)
   struct arptabent *tp;
   struct arptabent *exact  = (struct arptabent *)NULL;
 403794c:	e03ffb15 	stw	zero,-20(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
 4037950:	e03ffa15 	stw	zero,-24(fp)
   struct arptabent *empty  = (struct arptabent *)NULL;
 4037954:	e03ff915 	stw	zero,-28(fp)
   unsigned long lticks = cticks;
 4037958:	00810174 	movhi	r2,1029
 403795c:	1081e404 	addi	r2,r2,1936
 4037960:	10800017 	ldw	r2,0(r2)
 4037964:	e0bff815 	stw	r2,-32(fp)

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4037968:	008101b4 	movhi	r2,1030
 403796c:	10a40904 	addi	r2,r2,-28636
 4037970:	e0bffc15 	stw	r2,-16(fp)
 4037974:	00004006 	br	4037a78 <find_oldest_arp+0x140>
   {
      /* age out old, pending entries */
      if (tp->pending)
 4037978:	e0bffc17 	ldw	r2,-16(fp)
 403797c:	10800417 	ldw	r2,16(r2)
 4037980:	1005003a 	cmpeq	r2,r2,zero
 4037984:	10000b1e 	bne	r2,zero,40379b4 <find_oldest_arp+0x7c>
      {
         /* purge if pending for more than one second */
         if ((lticks - tp->createtime) > TPS)
 4037988:	e0bffc17 	ldw	r2,-16(fp)
 403798c:	10c00517 	ldw	r3,20(r2)
 4037990:	e0bff817 	ldw	r2,-32(fp)
 4037994:	10c5c83a 	sub	r2,r2,r3
 4037998:	10801970 	cmpltui	r2,r2,101
 403799c:	1000181e 	bne	r2,zero,4037a00 <find_oldest_arp+0xc8>
         {
            arp_free_pending(tp);   /* free pending packets */
 40379a0:	e13ffc17 	ldw	r4,-16(fp)
 40379a4:	40373a40 	call	40373a4 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 40379a8:	e0bffc17 	ldw	r2,-16(fp)
 40379ac:	10000015 	stw	zero,0(r2)
 40379b0:	00001306 	br	4037a00 <find_oldest_arp+0xc8>
         }
      }
      else if ((tp->t_pro_addr != 0) &&
 40379b4:	e0bffc17 	ldw	r2,-16(fp)
 40379b8:	10800017 	ldw	r2,0(r2)
 40379bc:	1005003a 	cmpeq	r2,r2,zero
 40379c0:	10000f1e 	bne	r2,zero,4037a00 <find_oldest_arp+0xc8>
 40379c4:	e0bffc17 	ldw	r2,-16(fp)
 40379c8:	10c00517 	ldw	r3,20(r2)
 40379cc:	e0bff817 	ldw	r2,-32(fp)
 40379d0:	10c5c83a 	sub	r2,r2,r3
 40379d4:	1007883a 	mov	r3,r2
 40379d8:	d0a04c17 	ldw	r2,-32464(gp)
 40379dc:	18800816 	blt	r3,r2,4037a00 <find_oldest_arp+0xc8>
 40379e0:	e0bffc17 	ldw	r2,-16(fp)
 40379e4:	10c00617 	ldw	r3,24(r2)
 40379e8:	e0bff817 	ldw	r2,-32(fp)
 40379ec:	10c5c83a 	sub	r2,r2,r3
 40379f0:	10801930 	cmpltui	r2,r2,100
 40379f4:	1000021e 	bne	r2,zero,4037a00 <find_oldest_arp+0xc8>
               ((int)(lticks - tp->createtime) >= arp_ageout) &&
               ((int)(lticks - tp->lasttime)   >= TPS))
      {
         /* entry has "expired" and has not been reference in 1 sec. */
         tp->t_pro_addr = 0;     /* mark entry as "unused" */
 40379f8:	e0bffc17 	ldw	r2,-16(fp)
 40379fc:	10000015 	stw	zero,0(r2)
      }

      if (tp->t_pro_addr == dest_ip)   /* ip addr already has entry */
 4037a00:	e0bffc17 	ldw	r2,-16(fp)
 4037a04:	10c00017 	ldw	r3,0(r2)
 4037a08:	e0bffd17 	ldw	r2,-12(fp)
 4037a0c:	1880031e 	bne	r3,r2,4037a1c <find_oldest_arp+0xe4>
      {
         exact = tp;
 4037a10:	e0bffc17 	ldw	r2,-16(fp)
 4037a14:	e0bffb15 	stw	r2,-20(fp)
 4037a18:	00001406 	br	4037a6c <find_oldest_arp+0x134>
      }
      else if (tp->t_pro_addr != 0)
 4037a1c:	e0bffc17 	ldw	r2,-16(fp)
 4037a20:	10800017 	ldw	r2,0(r2)
 4037a24:	1005003a 	cmpeq	r2,r2,zero
 4037a28:	10000b1e 	bne	r2,zero,4037a58 <find_oldest_arp+0x120>
      {
         if (!oldest || (tp->lasttime < oldest->lasttime))
 4037a2c:	e0bffa17 	ldw	r2,-24(fp)
 4037a30:	1005003a 	cmpeq	r2,r2,zero
 4037a34:	1000051e 	bne	r2,zero,4037a4c <find_oldest_arp+0x114>
 4037a38:	e0bffc17 	ldw	r2,-16(fp)
 4037a3c:	10c00617 	ldw	r3,24(r2)
 4037a40:	e0bffa17 	ldw	r2,-24(fp)
 4037a44:	10800617 	ldw	r2,24(r2)
 4037a48:	1880082e 	bgeu	r3,r2,4037a6c <find_oldest_arp+0x134>
            oldest = tp;
 4037a4c:	e0bffc17 	ldw	r2,-16(fp)
 4037a50:	e0bffa15 	stw	r2,-24(fp)
 4037a54:	00000506 	br	4037a6c <find_oldest_arp+0x134>
      }
      else if (!empty)
 4037a58:	e0bff917 	ldw	r2,-28(fp)
 4037a5c:	1004c03a 	cmpne	r2,r2,zero
 4037a60:	1000021e 	bne	r2,zero,4037a6c <find_oldest_arp+0x134>
         empty = tp;          /* grab first empty slot */
 4037a64:	e0bffc17 	ldw	r2,-16(fp)
 4037a68:	e0bff915 	stw	r2,-28(fp)
   struct arptabent *oldest = (struct arptabent *)NULL;
   struct arptabent *empty  = (struct arptabent *)NULL;
   unsigned long lticks = cticks;

   /* find lru (or free) entry */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4037a6c:	e0bffc17 	ldw	r2,-16(fp)
 4037a70:	10800804 	addi	r2,r2,32
 4037a74:	e0bffc15 	stw	r2,-16(fp)
 4037a78:	00c101b4 	movhi	r3,1030
 4037a7c:	18e44904 	addi	r3,r3,-28380
 4037a80:	e0bffc17 	ldw	r2,-16(fp)
 4037a84:	10ffbc36 	bltu	r2,r3,4037978 <find_oldest_arp+0x40>
      }
      else if (!empty)
         empty = tp;          /* grab first empty slot */
   }

   return ((exact) ? exact : ((empty) ? empty : oldest));
 4037a88:	e0bffb17 	ldw	r2,-20(fp)
 4037a8c:	1004c03a 	cmpne	r2,r2,zero
 4037a90:	10000b1e 	bne	r2,zero,4037ac0 <find_oldest_arp+0x188>
 4037a94:	e0bff917 	ldw	r2,-28(fp)
 4037a98:	1005003a 	cmpeq	r2,r2,zero
 4037a9c:	1000031e 	bne	r2,zero,4037aac <find_oldest_arp+0x174>
 4037aa0:	e0bff917 	ldw	r2,-28(fp)
 4037aa4:	e0bffe15 	stw	r2,-8(fp)
 4037aa8:	00000206 	br	4037ab4 <find_oldest_arp+0x17c>
 4037aac:	e0bffa17 	ldw	r2,-24(fp)
 4037ab0:	e0bffe15 	stw	r2,-8(fp)
 4037ab4:	e0bffe17 	ldw	r2,-8(fp)
 4037ab8:	e0bfff15 	stw	r2,-4(fp)
 4037abc:	00000206 	br	4037ac8 <find_oldest_arp+0x190>
 4037ac0:	e0bffb17 	ldw	r2,-20(fp)
 4037ac4:	e0bfff15 	stw	r2,-4(fp)
 4037ac8:	e0bfff17 	ldw	r2,-4(fp)
}
 4037acc:	e037883a 	mov	sp,fp
 4037ad0:	dfc00117 	ldw	ra,4(sp)
 4037ad4:	df000017 	ldw	fp,0(sp)
 4037ad8:	dec00204 	addi	sp,sp,8
 4037adc:	f800283a 	ret

04037ae0 <make_arp_entry>:
 * active.
 */

struct arptabent *   
make_arp_entry(ip_addr dest_ip, NET net)
{
 4037ae0:	defffa04 	addi	sp,sp,-24
 4037ae4:	dfc00515 	stw	ra,20(sp)
 4037ae8:	df000415 	stw	fp,16(sp)
 4037aec:	df000404 	addi	fp,sp,16
 4037af0:	e13ffe15 	stw	r4,-8(fp)
 4037af4:	e17fff15 	stw	r5,-4(fp)
   struct arptabent *oldest;
   unsigned long lticks = cticks;
 4037af8:	00810174 	movhi	r2,1029
 4037afc:	1081e404 	addi	r2,r2,1936
 4037b00:	10800017 	ldw	r2,0(r2)
 4037b04:	e0bffc15 	stw	r2,-16(fp)

   /* find usable (or existing) ARP table entry */
   oldest = find_oldest_arp(dest_ip);
 4037b08:	e13ffe17 	ldw	r4,-8(fp)
 4037b0c:	40379380 	call	4037938 <find_oldest_arp>
 4037b10:	e0bffd15 	stw	r2,-12(fp)

   /* If recycling entry, don't leak packets which may be stuck here */
   if (oldest->pending && (oldest->t_pro_addr != dest_ip))
 4037b14:	e0bffd17 	ldw	r2,-12(fp)
 4037b18:	10800417 	ldw	r2,16(r2)
 4037b1c:	1005003a 	cmpeq	r2,r2,zero
 4037b20:	1000061e 	bne	r2,zero,4037b3c <make_arp_entry+0x5c>
 4037b24:	e0bffd17 	ldw	r2,-12(fp)
 4037b28:	10c00017 	ldw	r3,0(r2)
 4037b2c:	e0bffe17 	ldw	r2,-8(fp)
 4037b30:	18800226 	beq	r3,r2,4037b3c <make_arp_entry+0x5c>
   {
      arp_free_pending(oldest);
 4037b34:	e13ffd17 	ldw	r4,-12(fp)
 4037b38:	40373a40 	call	40373a4 <arp_free_pending>
   }

   /* partially fill in arp entry */
   oldest->t_pro_addr = dest_ip;
 4037b3c:	e0fffd17 	ldw	r3,-12(fp)
 4037b40:	e0bffe17 	ldw	r2,-8(fp)
 4037b44:	18800015 	stw	r2,0(r3)
   oldest->net = net;
 4037b48:	e0fffd17 	ldw	r3,-12(fp)
 4037b4c:	e0bfff17 	ldw	r2,-4(fp)
 4037b50:	18800315 	stw	r2,12(r3)
   oldest->flags = 0;
 4037b54:	e0bffd17 	ldw	r2,-12(fp)
 4037b58:	1000070d 	sth	zero,28(r2)
   MEMSET(oldest->t_phy_addr, '\0', 6);   /* clear mac address */
 4037b5c:	e0bffd17 	ldw	r2,-12(fp)
 4037b60:	10800104 	addi	r2,r2,4
 4037b64:	10000005 	stb	zero,0(r2)
 4037b68:	10000045 	stb	zero,1(r2)
 4037b6c:	10000085 	stb	zero,2(r2)
 4037b70:	100000c5 	stb	zero,3(r2)
 4037b74:	10000105 	stb	zero,4(r2)
 4037b78:	10000145 	stb	zero,5(r2)
   oldest->createtime = oldest->lasttime = lticks;
 4037b7c:	e0fffd17 	ldw	r3,-12(fp)
 4037b80:	e0bffc17 	ldw	r2,-16(fp)
 4037b84:	18800615 	stw	r2,24(r3)
 4037b88:	e0bffd17 	ldw	r2,-12(fp)
 4037b8c:	10c00617 	ldw	r3,24(r2)
 4037b90:	e0bffd17 	ldw	r2,-12(fp)
 4037b94:	10c00515 	stw	r3,20(r2)

   /* start a ARP timer if there isn't one already */
   /* update the timeout value if there is a timer */
   /* time is specified in milliseconds */
   if (arp_timer == 0)
 4037b98:	d0a83d17 	ldw	r2,-24332(gp)
 4037b9c:	1004c03a 	cmpne	r2,r2,zero
 4037ba0:	1000071e 	bne	r2,zero,4037bc0 <make_arp_entry+0xe0>
   {
      arp_timer = in_timerset(&cb_arpent_tmo, ARPENT_TMO * 1000, 0);
 4037ba4:	01010134 	movhi	r4,1028
 4037ba8:	2120a404 	addi	r4,r4,-32112
 4037bac:	0149c404 	movi	r5,10000
 4037bb0:	000d883a 	mov	r6,zero
 4037bb4:	4036e700 	call	4036e70 <in_timerset>
 4037bb8:	d0a83d15 	stw	r2,-24332(gp)
 4037bbc:	00000706 	br	4037bdc <make_arp_entry+0xfc>
   }
   else
   {
      ((struct intimer *)arp_timer)->tmo =
 4037bc0:	d0a83d17 	ldw	r2,-24332(gp)
 4037bc4:	1009883a 	mov	r4,r2
 4037bc8:	d0a83d17 	ldw	r2,-24332(gp)
 4037bcc:	10c00217 	ldw	r3,8(r2)
 4037bd0:	e0bffc17 	ldw	r2,-16(fp)
 4037bd4:	1885883a 	add	r2,r3,r2
 4037bd8:	20800315 	stw	r2,12(r4)
              ((struct intimer *)arp_timer)->interval + lticks;
   }

   return oldest;
 4037bdc:	e0bffd17 	ldw	r2,-12(fp)
}
 4037be0:	e037883a 	mov	sp,fp
 4037be4:	dfc00117 	ldw	ra,4(sp)
 4037be8:	df000017 	ldw	fp,0(sp)
 4037bec:	dec00204 	addi	sp,sp,8
 4037bf0:	f800283a 	ret

04037bf4 <arpReply>:
 * must be freed (or reused) herein. 
 */

void
arpReply(PACKET pkt)
{
 4037bf4:	defff704 	addi	sp,sp,-36
 4037bf8:	dfc00815 	stw	ra,32(sp)
 4037bfc:	df000715 	stw	fp,28(sp)
 4037c00:	df000704 	addi	fp,sp,28
 4037c04:	e13fff15 	stw	r4,-4(fp)
   struct arp_hdr *in;
   struct arp_hdr *out;
   char *ethout;
   char *ethin;

   LOCK_NET_RESOURCE(FREEQ_RESID);
 4037c08:	01000084 	movi	r4,2
 4037c0c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   outpkt = pk_alloc(arpsize);
 4037c10:	01000c04 	movi	r4,48
 4037c14:	4024f700 	call	4024f70 <pk_alloc>
 4037c18:	e0bffe15 	stw	r2,-8(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037c1c:	01000084 	movi	r4,2
 4037c20:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (!outpkt)
 4037c24:	e0bffe17 	ldw	r2,-8(fp)
 4037c28:	1004c03a 	cmpne	r2,r2,zero
 4037c2c:	1000021e 	bne	r2,zero,4037c38 <arpReply+0x44>
   {
      dtrap();
 4037c30:	4025bb40 	call	4025bb4 <dtrap>
      return;
 4037c34:	00008f06 	br	4037e74 <arpReply+0x280>
   }

   outpkt->net = pkt->net;    /* send back out the iface it came from */
 4037c38:	e0bfff17 	ldw	r2,-4(fp)
 4037c3c:	10c00617 	ldw	r3,24(r2)
 4037c40:	e0bffe17 	ldw	r2,-8(fp)
 4037c44:	10c00615 	stw	r3,24(r2)

   ethin = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 4037c48:	e0bfff17 	ldw	r2,-4(fp)
 4037c4c:	10800317 	ldw	r2,12(r2)
 4037c50:	10bffc84 	addi	r2,r2,-14
 4037c54:	e0bffa15 	stw	r2,-24(fp)
   ethout = outpkt->nb_buff + ETHHDR_BIAS;
 4037c58:	e0bffe17 	ldw	r2,-8(fp)
 4037c5c:	10800117 	ldw	r2,4(r2)
 4037c60:	10800084 	addi	r2,r2,2
 4037c64:	e0bffb15 	stw	r2,-20(fp)
      snap->type = ET_ARP;
   }
   else
#endif   /* IEEE_802_3 */
   {
      ET_TYPE_SET(ethout, ntohs(ET_ARP));   /* 0x0806 - ARP type on ethernet */
 4037c68:	e0bffb17 	ldw	r2,-20(fp)
 4037c6c:	10c00304 	addi	r3,r2,12
 4037c70:	00800204 	movi	r2,8
 4037c74:	18800005 	stb	r2,0(r3)
 4037c78:	e0bffb17 	ldw	r2,-20(fp)
 4037c7c:	10c00344 	addi	r3,r2,13
 4037c80:	00800184 	movi	r2,6
 4037c84:	18800005 	stb	r2,0(r3)
      in = (struct arp_hdr *)(pkt->nb_prot);
 4037c88:	e0bfff17 	ldw	r2,-4(fp)
 4037c8c:	10800317 	ldw	r2,12(r2)
 4037c90:	e0bffd15 	stw	r2,-12(fp)
      out = (struct arp_hdr *)(outpkt->nb_buff + ETHHDR_SIZE);
 4037c94:	e0bffe17 	ldw	r2,-8(fp)
 4037c98:	10800117 	ldw	r2,4(r2)
 4037c9c:	10800404 	addi	r2,r2,16
 4037ca0:	e0bffc15 	stw	r2,-16(fp)
      outpkt->nb_plen = arpsize;
 4037ca4:	e0fffe17 	ldw	r3,-8(fp)
 4037ca8:	00800c04 	movi	r2,48
 4037cac:	18800415 	stw	r2,16(r3)

   /* prepare outgoing arp packet */
#ifdef IEEE_802_3
   out->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   out->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4037cb0:	e0fffc17 	ldw	r3,-16(fp)
 4037cb4:	00804004 	movi	r2,256
 4037cb8:	1880000d 	sth	r2,0(r3)
#endif /* IEEE_802_3 */

   out->ar_pro = ARPIP;
 4037cbc:	e0fffc17 	ldw	r3,-16(fp)
 4037cc0:	00800204 	movi	r2,8
 4037cc4:	1880008d 	sth	r2,2(r3)
   out->ar_hln = 6;
 4037cc8:	e0fffc17 	ldw	r3,-16(fp)
 4037ccc:	00800184 	movi	r2,6
 4037cd0:	18800105 	stb	r2,4(r3)
   out->ar_pln = 4;
 4037cd4:	e0fffc17 	ldw	r3,-16(fp)
 4037cd8:	00800104 	movi	r2,4
 4037cdc:	18800145 	stb	r2,5(r3)
   out->ar_op = ARREP;
 4037ce0:	e0fffc17 	ldw	r3,-16(fp)
 4037ce4:	00808004 	movi	r2,512
 4037ce8:	1880018d 	sth	r2,6(r3)
   out->ar_tpa = in->ar_spa;     /* swap IP addresses */
 4037cec:	e0bffd17 	ldw	r2,-12(fp)
 4037cf0:	10c00417 	ldw	r3,16(r2)
 4037cf4:	e0bffc17 	ldw	r2,-16(fp)
 4037cf8:	10c00715 	stw	r3,28(r2)
   out->ar_spa = in->ar_tpa;
 4037cfc:	e0bffd17 	ldw	r2,-12(fp)
 4037d00:	10c00717 	ldw	r3,28(r2)
 4037d04:	e0bffc17 	ldw	r2,-16(fp)
 4037d08:	10c00415 	stw	r3,16(r2)
   MEMMOVE(out->ar_tha, in->ar_sha, 6);    /* move his MAC address */
 4037d0c:	e0bffc17 	ldw	r2,-16(fp)
 4037d10:	11000504 	addi	r4,r2,20
 4037d14:	e0bffd17 	ldw	r2,-12(fp)
 4037d18:	11400204 	addi	r5,r2,8
 4037d1c:	01800184 	movi	r6,6
 4037d20:	4001e840 	call	4001e84 <memmove>
   MEMMOVE(out->ar_sha, outpkt->net->n_mib->ifPhysAddress, 6);  /* fill in our mac address */
 4037d24:	e0bffc17 	ldw	r2,-16(fp)
 4037d28:	11000204 	addi	r4,r2,8
 4037d2c:	e0bffe17 	ldw	r2,-8(fp)
 4037d30:	10800617 	ldw	r2,24(r2)
 4037d34:	10802717 	ldw	r2,156(r2)
 4037d38:	11400517 	ldw	r5,20(r2)
 4037d3c:	01800184 	movi	r6,6
 4037d40:	4001e840 	call	4001e84 <memmove>

   /* prepend ethernet unicast header to arp reply */
   MEMMOVE(ethout + ET_DSTOFF, ethin + ET_SRCOFF, 6);
 4037d44:	e0bffa17 	ldw	r2,-24(fp)
 4037d48:	11400184 	addi	r5,r2,6
 4037d4c:	e13ffb17 	ldw	r4,-20(fp)
 4037d50:	01800184 	movi	r6,6
 4037d54:	4001e840 	call	4001e84 <memmove>
   MEMMOVE(ethout + ET_SRCOFF, outpkt->net->n_mib->ifPhysAddress, 6);
 4037d58:	e0bffb17 	ldw	r2,-20(fp)
 4037d5c:	11000184 	addi	r4,r2,6
 4037d60:	e0bffe17 	ldw	r2,-8(fp)
 4037d64:	10800617 	ldw	r2,24(r2)
 4037d68:	10802717 	ldw	r2,156(r2)
 4037d6c:	11400517 	ldw	r5,20(r2)
 4037d70:	01800184 	movi	r6,6
 4037d74:	4001e840 	call	4001e84 <memmove>

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)out;
 4037d78:	e0bffc17 	ldw	r2,-16(fp)
 4037d7c:	e0bff915 	stw	r2,-28(fp)
      MEMMOVE(&arwp->data[AR_SHA], out->ar_sha, 6);
 4037d80:	e0bff917 	ldw	r2,-28(fp)
 4037d84:	11000204 	addi	r4,r2,8
 4037d88:	e0bffc17 	ldw	r2,-16(fp)
 4037d8c:	11400204 	addi	r5,r2,8
 4037d90:	01800184 	movi	r6,6
 4037d94:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &out->ar_spa, 4);
 4037d98:	e0bff917 	ldw	r2,-28(fp)
 4037d9c:	10800204 	addi	r2,r2,8
 4037da0:	11000184 	addi	r4,r2,6
 4037da4:	e0bffc17 	ldw	r2,-16(fp)
 4037da8:	11400404 	addi	r5,r2,16
 4037dac:	01800104 	movi	r6,4
 4037db0:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_THA], out->ar_tha, 6);
 4037db4:	e0bff917 	ldw	r2,-28(fp)
 4037db8:	10800204 	addi	r2,r2,8
 4037dbc:	11000284 	addi	r4,r2,10
 4037dc0:	e0bffc17 	ldw	r2,-16(fp)
 4037dc4:	11400504 	addi	r5,r2,20
 4037dc8:	01800184 	movi	r6,6
 4037dcc:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_TPA], &out->ar_tpa, 4);
 4037dd0:	e0bff917 	ldw	r2,-28(fp)
 4037dd4:	10800204 	addi	r2,r2,8
 4037dd8:	11000404 	addi	r4,r2,16
 4037ddc:	e0bffc17 	ldw	r2,-16(fp)
 4037de0:	11400704 	addi	r5,r2,28
 4037de4:	01800104 	movi	r6,4
 4037de8:	4001e840 	call	4001e84 <memmove>
   }
#endif   /* NO_CC_PACKING */

   /* if a packet oriented send exists, use it: */
   if (outpkt->net->pkt_send)
 4037dec:	e0bffe17 	ldw	r2,-8(fp)
 4037df0:	10800617 	ldw	r2,24(r2)
 4037df4:	10800417 	ldw	r2,16(r2)
 4037df8:	1005003a 	cmpeq	r2,r2,zero
 4037dfc:	10000a1e 	bne	r2,zero,4037e28 <arpReply+0x234>
   {
      outpkt->nb_prot = outpkt->nb_buff;
 4037e00:	e0bffe17 	ldw	r2,-8(fp)
 4037e04:	10c00117 	ldw	r3,4(r2)
 4037e08:	e0bffe17 	ldw	r2,-8(fp)
 4037e0c:	10c00315 	stw	r3,12(r2)
      outpkt->net->pkt_send(outpkt);
 4037e10:	e0bffe17 	ldw	r2,-8(fp)
 4037e14:	10800617 	ldw	r2,24(r2)
 4037e18:	10800417 	ldw	r2,16(r2)
 4037e1c:	e13ffe17 	ldw	r4,-8(fp)
 4037e20:	103ee83a 	callr	r2
 4037e24:	00001006 	br	4037e68 <arpReply+0x274>
   }
   else
   {
      outpkt->net->raw_send(pkt->net, outpkt->nb_buff, outpkt->nb_plen);
 4037e28:	e0bffe17 	ldw	r2,-8(fp)
 4037e2c:	10800617 	ldw	r2,24(r2)
 4037e30:	10c00317 	ldw	r3,12(r2)
 4037e34:	e0bfff17 	ldw	r2,-4(fp)
 4037e38:	11000617 	ldw	r4,24(r2)
 4037e3c:	e0bffe17 	ldw	r2,-8(fp)
 4037e40:	11400117 	ldw	r5,4(r2)
 4037e44:	e0bffe17 	ldw	r2,-8(fp)
 4037e48:	11800417 	ldw	r6,16(r2)
 4037e4c:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4037e50:	01000084 	movi	r4,2
 4037e54:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(outpkt);
 4037e58:	e13ffe17 	ldw	r4,-8(fp)
 4037e5c:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037e60:	01000084 	movi	r4,2
 4037e64:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   }
   /* input 'pkt' will be freed by caller */
   arpRepsOut++;
 4037e68:	d0a84217 	ldw	r2,-24312(gp)
 4037e6c:	10800044 	addi	r2,r2,1
 4037e70:	d0a84215 	stw	r2,-24312(gp)
}
 4037e74:	e037883a 	mov	sp,fp
 4037e78:	dfc00117 	ldw	ra,4(sp)
 4037e7c:	df000017 	ldw	fp,0(sp)
 4037e80:	dec00204 	addi	sp,sp,8
 4037e84:	f800283a 	ret

04037e88 <arprcv>:
 *                            else a negative error code. 
 */

int
arprcv(PACKET pkt)
{
 4037e88:	defff804 	addi	sp,sp,-32
 4037e8c:	dfc00715 	stw	ra,28(sp)
 4037e90:	df000615 	stw	fp,24(sp)
 4037e94:	df000604 	addi	fp,sp,24
 4037e98:	e13ffe15 	stw	r4,-8(fp)
   char *eth;
#ifdef IEEE_802_3
   int      ieee = FALSE;     /* TRUE if received packet is 802.3 */
#endif

   eth = pkt->nb_prot - (ETHHDR_SIZE - ETHHDR_BIAS);
 4037e9c:	e0bffe17 	ldw	r2,-8(fp)
 4037ea0:	10800317 	ldw	r2,12(r2)
 4037ea4:	10bffc84 	addi	r2,r2,-14
 4037ea8:	e0bffb15 	stw	r2,-20(fp)
   arphdr = (struct arp_hdr *)(pkt->nb_prot);
 4037eac:	e0bffe17 	ldw	r2,-8(fp)
 4037eb0:	10800317 	ldw	r2,12(r2)
 4037eb4:	e0bffd15 	stw	r2,-12(fp)
#endif   /* IEEE_802_3_ONLY */
#endif   /* IEEE_802_3 */

#ifdef NO_CC_PACKING    /* force ARP fields to local CPU valid boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 4037eb8:	e0bffd17 	ldw	r2,-12(fp)
 4037ebc:	e0bffa15 	stw	r2,-24(fp)
      MEMMOVE(&arphdr->ar_tpa, &arwp->data[AR_TPA], 4);
 4037ec0:	e0bffd17 	ldw	r2,-12(fp)
 4037ec4:	11000704 	addi	r4,r2,28
 4037ec8:	e0bffa17 	ldw	r2,-24(fp)
 4037ecc:	10800204 	addi	r2,r2,8
 4037ed0:	11400404 	addi	r5,r2,16
 4037ed4:	01800104 	movi	r6,4
 4037ed8:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(arphdr->ar_tha, &arwp->data[AR_THA], 6);
 4037edc:	e0bffd17 	ldw	r2,-12(fp)
 4037ee0:	11000504 	addi	r4,r2,20
 4037ee4:	e0bffa17 	ldw	r2,-24(fp)
 4037ee8:	10800204 	addi	r2,r2,8
 4037eec:	11400284 	addi	r5,r2,10
 4037ef0:	01800184 	movi	r6,6
 4037ef4:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arphdr->ar_spa, &arwp->data[AR_SPA], 4);
 4037ef8:	e0bffd17 	ldw	r2,-12(fp)
 4037efc:	11000404 	addi	r4,r2,16
 4037f00:	e0bffa17 	ldw	r2,-24(fp)
 4037f04:	10800204 	addi	r2,r2,8
 4037f08:	11400184 	addi	r5,r2,6
 4037f0c:	01800104 	movi	r6,4
 4037f10:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(arphdr->ar_sha, &arwp->data[AR_SHA], 6);
 4037f14:	e0bffd17 	ldw	r2,-12(fp)
 4037f18:	11000204 	addi	r4,r2,8
 4037f1c:	e0bffa17 	ldw	r2,-24(fp)
 4037f20:	11400204 	addi	r5,r2,8
 4037f24:	01800184 	movi	r6,6
 4037f28:	4001e840 	call	4001e84 <memmove>
   }
#endif

   /* check ARP's target IP against our net's: */
#ifdef IP_MULTICAST
   if ((arphdr->ar_tpa != pkt->net->n_ipaddr) &&   /* if it's not for me.... */
 4037f2c:	e0bffd17 	ldw	r2,-12(fp)
 4037f30:	10c00717 	ldw	r3,28(r2)
 4037f34:	e0bffe17 	ldw	r2,-8(fp)
 4037f38:	10800617 	ldw	r2,24(r2)
 4037f3c:	10800a17 	ldw	r2,40(r2)
 4037f40:	18801f26 	beq	r3,r2,4037fc0 <arprcv+0x138>
 4037f44:	e0bffd17 	ldw	r2,-12(fp)
 4037f48:	10800717 	ldw	r2,28(r2)
 4037f4c:	1004d63a 	srli	r2,r2,24
 4037f50:	10c03fcc 	andi	r3,r2,255
 4037f54:	e0bffd17 	ldw	r2,-12(fp)
 4037f58:	10800717 	ldw	r2,28(r2)
 4037f5c:	1004d23a 	srli	r2,r2,8
 4037f60:	10bfc00c 	andi	r2,r2,65280
 4037f64:	1886b03a 	or	r3,r3,r2
 4037f68:	e0bffd17 	ldw	r2,-12(fp)
 4037f6c:	10800717 	ldw	r2,28(r2)
 4037f70:	10bfc00c 	andi	r2,r2,65280
 4037f74:	1004923a 	slli	r2,r2,8
 4037f78:	1886b03a 	or	r3,r3,r2
 4037f7c:	e0bffd17 	ldw	r2,-12(fp)
 4037f80:	10800717 	ldw	r2,28(r2)
 4037f84:	10803fcc 	andi	r2,r2,255
 4037f88:	1004963a 	slli	r2,r2,24
 4037f8c:	1884b03a 	or	r2,r3,r2
 4037f90:	10fc002c 	andhi	r3,r2,61440
 4037f94:	00b80034 	movhi	r2,57344
 4037f98:	18800926 	beq	r3,r2,4037fc0 <arprcv+0x138>
     (!IN_MULTICAST(ntohl(arphdr->ar_tpa))))
#else
   if (arphdr->ar_tpa != pkt->net->n_ipaddr)
#endif /* IP_MULTICAST */
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4037f9c:	01000084 	movi	r4,2
 4037fa0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);     /* not for us, dump & ret (proxy here later?) */
 4037fa4:	e13ffe17 	ldw	r4,-8(fp)
 4037fa8:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4037fac:	01000084 	movi	r4,2
 4037fb0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return (ENP_NOT_MINE);
 4037fb4:	00800084 	movi	r2,2
 4037fb8:	e0bfff15 	stw	r2,-4(fp)
 4037fbc:	00004406 	br	40380d0 <arprcv+0x248>
   }

   if (arphdr->ar_op == ARREQ)   /* is it an arp request? */
 4037fc0:	e0bffd17 	ldw	r2,-12(fp)
 4037fc4:	1080018b 	ldhu	r2,6(r2)
 4037fc8:	10bfffcc 	andi	r2,r2,65535
 4037fcc:	10804018 	cmpnei	r2,r2,256
 4037fd0:	10000b1e 	bne	r2,zero,4038000 <arprcv+0x178>
   {
      arpReqsIn++;   /* count these */
 4037fd4:	d0a83f17 	ldw	r2,-24324(gp)
 4037fd8:	10800044 	addi	r2,r2,1
 4037fdc:	d0a83f15 	stw	r2,-24324(gp)
      arpReply(pkt); /* send arp reply */
 4037fe0:	e13ffe17 	ldw	r4,-8(fp)
 4037fe4:	4037bf40 	call	4037bf4 <arpReply>
      /* make partial ARP table entry */
      make_arp_entry(arphdr->ar_spa, pkt->net);
 4037fe8:	e0bffd17 	ldw	r2,-12(fp)
 4037fec:	11000417 	ldw	r4,16(r2)
 4037ff0:	e0bffe17 	ldw	r2,-8(fp)
 4037ff4:	11400617 	ldw	r5,24(r2)
 4037ff8:	4037ae00 	call	4037ae0 <make_arp_entry>
 4037ffc:	00000306 	br	403800c <arprcv+0x184>
      /* fall thru to arp reply logic to finish our table entry */
   }
   else     /* ARP reply, count and fall thru to logic to update table */
   {
      arpRepsIn++;
 4038000:	d0a84117 	ldw	r2,-24316(gp)
 4038004:	10800044 	addi	r2,r2,1
 4038008:	d0a84115 	stw	r2,-24316(gp)
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 403800c:	008101b4 	movhi	r2,1030
 4038010:	10a40904 	addi	r2,r2,-28636
 4038014:	e0bffc15 	stw	r2,-16(fp)
 4038018:	00002106 	br	40380a0 <arprcv+0x218>
   {
      if (tp->t_pro_addr == arphdr->ar_spa)     /* we found IP address, update entry */
 403801c:	e0bffc17 	ldw	r2,-16(fp)
 4038020:	10c00017 	ldw	r3,0(r2)
 4038024:	e0bffd17 	ldw	r2,-12(fp)
 4038028:	10800417 	ldw	r2,16(r2)
 403802c:	1880191e 	bne	r3,r2,4038094 <arprcv+0x20c>
            tp->flags |= ET_SNAP;
         else
            tp->flags |= ET_ETH2;      /* else it's ethernet II */
#endif   /* IEEE_802_3 */

         MEMMOVE(tp->t_phy_addr, arphdr->ar_sha, 6);   /* update MAC adddress */
 4038030:	e0bffc17 	ldw	r2,-16(fp)
 4038034:	11000104 	addi	r4,r2,4
 4038038:	e0bffd17 	ldw	r2,-12(fp)
 403803c:	11400204 	addi	r5,r2,8
 4038040:	01800184 	movi	r6,6
 4038044:	4001e840 	call	4001e84 <memmove>
         tp->lasttime = cticks;
 4038048:	00810174 	movhi	r2,1029
 403804c:	1081e404 	addi	r2,r2,1936
 4038050:	10c00017 	ldw	r3,0(r2)
 4038054:	e0bffc17 	ldw	r2,-16(fp)
 4038058:	10c00615 	stw	r3,24(r2)
         if (tp->pending)     /* packet waiting for this IP entry? */
 403805c:	e0bffc17 	ldw	r2,-16(fp)
 4038060:	10800417 	ldw	r2,16(r2)
 4038064:	1005003a 	cmpeq	r2,r2,zero
 4038068:	1000021e 	bne	r2,zero,4038074 <arprcv+0x1ec>
         {
            arp_send_pending(tp);
 403806c:	e13ffc17 	ldw	r4,-16(fp)
 4038070:	403742c0 	call	403742c <arp_send_pending>
         }
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4038074:	01000084 	movi	r4,2
 4038078:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(pkt);
 403807c:	e13ffe17 	ldw	r4,-8(fp)
 4038080:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4038084:	01000084 	movi	r4,2
 4038088:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

         return (0);
 403808c:	e03fff15 	stw	zero,-4(fp)
 4038090:	00000f06 	br	40380d0 <arprcv+0x248>
      arpRepsIn++;
   }

   /* scan table for matching entry */
   /* check this for default gateway situations later, JB */
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4038094:	e0bffc17 	ldw	r2,-16(fp)
 4038098:	10800804 	addi	r2,r2,32
 403809c:	e0bffc15 	stw	r2,-16(fp)
 40380a0:	00c101b4 	movhi	r3,1030
 40380a4:	18e44904 	addi	r3,r3,-28380
 40380a8:	e0bffc17 	ldw	r2,-16(fp)
 40380ac:	10ffdb36 	bltu	r2,r3,403801c <arprcv+0x194>

#ifdef IEEE_802_3_ONLY
drop:
#endif /* IEEE_802_3_ONLY */
   /* fall to here if packet is not in table */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 40380b0:	01000084 	movi	r4,2
 40380b4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(pkt);
 40380b8:	e13ffe17 	ldw	r4,-8(fp)
 40380bc:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40380c0:	01000084 	movi	r4,2
 40380c4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   return ENP_NOT_MINE;
 40380c8:	00800084 	movi	r2,2
 40380cc:	e0bfff15 	stw	r2,-4(fp)
 40380d0:	e0bfff17 	ldw	r2,-4(fp)
}
 40380d4:	e037883a 	mov	sp,fp
 40380d8:	dfc00117 	ldw	ra,4(sp)
 40380dc:	df000017 	ldw	fp,0(sp)
 40380e0:	dec00204 	addi	sp,sp,8
 40380e4:	f800283a 	ret

040380e8 <send_via_arp>:
 * change the PC's IP address. 
 */

int
send_via_arp(PACKET pkt, ip_addr dest_ip)
{
 40380e8:	defff704 	addi	sp,sp,-36
 40380ec:	dfc00815 	stw	ra,32(sp)
 40380f0:	df000715 	stw	fp,28(sp)
 40380f4:	df000704 	addi	fp,sp,28
 40380f8:	e13ffd15 	stw	r4,-12(fp)
 40380fc:	e17ffe15 	stw	r5,-8(fp)
   struct arptabent *tp;
   unsigned long lticks = cticks;
 4038100:	00810174 	movhi	r2,1029
 4038104:	1081e404 	addi	r2,r2,1936
 4038108:	10800017 	ldw	r2,0(r2)
 403810c:	e0bffb15 	stw	r2,-20(fp)
   int err;

   /* don't allow zero dest */
   if (dest_ip == 0)
 4038110:	e0bffe17 	ldw	r2,-8(fp)
 4038114:	1004c03a 	cmpne	r2,r2,zero
 4038118:	1000091e 	bne	r2,zero,4038140 <send_via_arp+0x58>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 403811c:	01000084 	movi	r4,2
 4038120:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(pkt);
 4038124:	e13ffd17 	ldw	r4,-12(fp)
 4038128:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403812c:	01000084 	movi	r4,2
 4038130:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return SEND_DROPPED; 
 4038134:	00bffa84 	movi	r2,-22
 4038138:	e0bfff15 	stw	r2,-4(fp)
 403813c:	00004e06 	br	4038278 <send_via_arp+0x190>
   }

   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
 4038140:	d0e84317 	ldw	r3,-24308(gp)
 4038144:	e0bffb17 	ldw	r2,-20(fp)
 4038148:	10c5c83a 	sub	r2,r2,r3
 403814c:	10801970 	cmpltui	r2,r2,101
 4038150:	1000011e 	bne	r2,zero,4038158 <send_via_arp+0x70>
      arpcache = (struct arptabent *)NULL;
 4038154:	d0283e15 	stw	zero,-24328(gp)

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
 4038158:	d0a83e17 	ldw	r2,-24328(gp)
 403815c:	1005003a 	cmpeq	r2,r2,zero
 4038160:	1000071e 	bne	r2,zero,4038180 <send_via_arp+0x98>
 4038164:	d0a83e17 	ldw	r2,-24328(gp)
 4038168:	10c00017 	ldw	r3,0(r2)
 403816c:	e0bffe17 	ldw	r2,-8(fp)
 4038170:	1880031e 	bne	r3,r2,4038180 <send_via_arp+0x98>
      tp = arpcache;
 4038174:	d0a83e17 	ldw	r2,-24328(gp)
 4038178:	e0bffc15 	stw	r2,-16(fp)
   /* Force refresh of cache once a second */
   if ((lticks - cachetime) > TPS)
      arpcache = (struct arptabent *)NULL;

   /* look at the last ARP entry used. Good chance it's ours: */
   if (arpcache && (arpcache->t_pro_addr == dest_ip))
 403817c:	00000306 	br	403818c <send_via_arp+0xa4>
      tp = arpcache;
   else
   {
      /* scan arp table for an existing entry */
      tp = find_oldest_arp(dest_ip);
 4038180:	e13ffe17 	ldw	r4,-8(fp)
 4038184:	40379380 	call	4037938 <find_oldest_arp>
 4038188:	e0bffc15 	stw	r2,-16(fp)
   }

   if (tp->t_pro_addr == dest_ip)   /* we found our entry */
 403818c:	e0bffc17 	ldw	r2,-16(fp)
 4038190:	10c00017 	ldw	r3,0(r2)
 4038194:	e0bffe17 	ldw	r2,-8(fp)
 4038198:	1880311e 	bne	r3,r2,4038260 <send_via_arp+0x178>
   {
      if (tp->pending)  /* arp already pending for this IP? */
 403819c:	e0bffc17 	ldw	r2,-16(fp)
 40381a0:	10800417 	ldw	r2,16(r2)
 40381a4:	1005003a 	cmpeq	r2,r2,zero
 40381a8:	1000241e 	bne	r2,zero,403823c <send_via_arp+0x154>
      {
         if (lilfreeq.q_len < 2)
 40381ac:	008101b4 	movhi	r2,1030
 40381b0:	10a26a04 	addi	r2,r2,-30296
 40381b4:	10800217 	ldw	r2,8(r2)
 40381b8:	10800088 	cmpgei	r2,r2,2
 40381bc:	1000091e 	bne	r2,zero,40381e4 <send_via_arp+0xfc>
         {
            /* system is depleted of resources - free the
             * pkt instead of queueing it - so that we are in a
             * position to receive an arp reply 
             */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 40381c0:	01000084 	movi	r4,2
 40381c4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(pkt);  /* sorry, we have to dump this one.. */
 40381c8:	e13ffd17 	ldw	r4,-12(fp)
 40381cc:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40381d0:	01000084 	movi	r4,2
 40381d4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            err = SEND_DROPPED;    /* pkts already waiting for this IP entry */
 40381d8:	00bffa84 	movi	r2,-22
 40381dc:	e0bffa15 	stw	r2,-24(fp)
 40381e0:	00002306 	br	4038270 <send_via_arp+0x188>
         }
         else
         {
            PACKET tmppkt=tp->pending;
 40381e4:	e0bffc17 	ldw	r2,-16(fp)
 40381e8:	10800417 	ldw	r2,16(r2)
 40381ec:	e0bff915 	stw	r2,-28(fp)

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
 40381f0:	00000306 	br	4038200 <send_via_arp+0x118>
               tmppkt = tmppkt->next;
 40381f4:	e0bff917 	ldw	r2,-28(fp)
 40381f8:	10800017 	ldw	r2,0(r2)
 40381fc:	e0bff915 	stw	r2,-28(fp)
         else
         {
            PACKET tmppkt=tp->pending;

            /* queue the packet in pending list */
            while (tmppkt->next)     /* traverse to the last packet */
 4038200:	e0bff917 	ldw	r2,-28(fp)
 4038204:	10800017 	ldw	r2,0(r2)
 4038208:	1004c03a 	cmpne	r2,r2,zero
 403820c:	103ff91e 	bne	r2,zero,40381f4 <send_via_arp+0x10c>
               tmppkt = tmppkt->next;
            tmppkt->next = pkt;      /* add new pkt to end of list */
 4038210:	e0fff917 	ldw	r3,-28(fp)
 4038214:	e0bffd17 	ldw	r2,-12(fp)
 4038218:	18800015 	stw	r2,0(r3)
            if (pkt->next)
 403821c:	e0bffd17 	ldw	r2,-12(fp)
 4038220:	10800017 	ldw	r2,0(r2)
 4038224:	1005003a 	cmpeq	r2,r2,zero
 4038228:	1000011e 	bne	r2,zero,4038230 <send_via_arp+0x148>
            {
               dtrap();              /* chain of pkts to be sent ??? */
 403822c:	4025bb40 	call	4025bb4 <dtrap>
            }
            err = ENP_SEND_PENDING; /* packet queued pending ARP reply */
 4038230:	00800044 	movi	r2,1
 4038234:	e0bffa15 	stw	r2,-24(fp)
 4038238:	00000d06 	br	4038270 <send_via_arp+0x188>
         }
      }
      else  /* just send it */
      {
         arpcache = tp;       /* cache this entry */
 403823c:	e0bffc17 	ldw	r2,-16(fp)
 4038240:	d0a83e15 	stw	r2,-24328(gp)
         cachetime = lticks;  /* mark time we cached */
 4038244:	e0bffb17 	ldw	r2,-20(fp)
 4038248:	d0a84315 	stw	r2,-24308(gp)
         err = et_send(pkt, tp);
 403824c:	e13ffd17 	ldw	r4,-12(fp)
 4038250:	e17ffc17 	ldw	r5,-16(fp)
 4038254:	40372280 	call	4037228 <et_send>
 4038258:	e0bffa15 	stw	r2,-24(fp)
 403825c:	00000406 	br	4038270 <send_via_arp+0x188>
      }
   }
   else
      /* start the ARP process for this IP address */
      err = send_arp(pkt, dest_ip);
 4038260:	e13ffd17 	ldw	r4,-12(fp)
 4038264:	e17ffe17 	ldw	r5,-8(fp)
 4038268:	40374a00 	call	40374a0 <send_arp>
 403826c:	e0bffa15 	stw	r2,-24(fp)

   return (err);
 4038270:	e0bffa17 	ldw	r2,-24(fp)
 4038274:	e0bfff15 	stw	r2,-4(fp)
 4038278:	e0bfff17 	ldw	r2,-4(fp)
}
 403827c:	e037883a 	mov	sp,fp
 4038280:	dfc00117 	ldw	ra,4(sp)
 4038284:	df000017 	ldw	fp,0(sp)
 4038288:	dec00204 	addi	sp,sp,8
 403828c:	f800283a 	ret

04038290 <cb_arpent_tmo>:
 *
 * If there are no more unresolved entries, cancel the timer.
 */
void
cb_arpent_tmo(long arg)
{
 4038290:	defffa04 	addi	sp,sp,-24
 4038294:	dfc00515 	stw	ra,20(sp)
 4038298:	df000415 	stw	fp,16(sp)
 403829c:	df000404 	addi	fp,sp,16
 40382a0:	e13fff15 	stw	r4,-4(fp)
   struct arptabent *tp;
   int arp_count = 0;
 40382a4:	e03ffd15 	stw	zero,-12(fp)
   unsigned long lticks = cticks;
 40382a8:	00810174 	movhi	r2,1029
 40382ac:	1081e404 	addi	r2,r2,1936
 40382b0:	10800017 	ldw	r2,0(r2)
 40382b4:	e0bffc15 	stw	r2,-16(fp)

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 40382b8:	008101b4 	movhi	r2,1030
 40382bc:	10a40904 	addi	r2,r2,-28636
 40382c0:	e0bffe15 	stw	r2,-8(fp)
 40382c4:	00002906 	br	403836c <cb_arpent_tmo+0xdc>
   {
      if (tp->t_pro_addr != 0)
 40382c8:	e0bffe17 	ldw	r2,-8(fp)
 40382cc:	10800017 	ldw	r2,0(r2)
 40382d0:	1005003a 	cmpeq	r2,r2,zero
 40382d4:	1000221e 	bne	r2,zero,4038360 <cb_arpent_tmo+0xd0>
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
 40382d8:	e0bffe17 	ldw	r2,-8(fp)
 40382dc:	10800417 	ldw	r2,16(r2)
 40382e0:	1005003a 	cmpeq	r2,r2,zero
 40382e4:	10000b1e 	bne	r2,zero,4038314 <cb_arpent_tmo+0x84>
 40382e8:	e0bffe17 	ldw	r2,-8(fp)
 40382ec:	10c00517 	ldw	r3,20(r2)
 40382f0:	e0bffc17 	ldw	r2,-16(fp)
 40382f4:	10c5c83a 	sub	r2,r2,r3
 40382f8:	10801970 	cmpltui	r2,r2,101
 40382fc:	1000051e 	bne	r2,zero,4038314 <cb_arpent_tmo+0x84>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
 4038300:	e13ffe17 	ldw	r4,-8(fp)
 4038304:	40373a40 	call	40373a4 <arp_free_pending>
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 4038308:	e0bffe17 	ldw	r2,-8(fp)
 403830c:	10000015 	stw	zero,0(r2)
   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
   {
      if (tp->t_pro_addr != 0)
      {
         /* age out old, pending entries */
         if (tp->pending && ((lticks - tp->createtime) > TPS))
 4038310:	00001306 	br	4038360 <cb_arpent_tmo+0xd0>
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 4038314:	e0bffe17 	ldw	r2,-8(fp)
 4038318:	10c00517 	ldw	r3,20(r2)
 403831c:	e0bffc17 	ldw	r2,-16(fp)
 4038320:	10c5c83a 	sub	r2,r2,r3
 4038324:	1007883a 	mov	r3,r2
 4038328:	d0a04c17 	ldw	r2,-32464(gp)
 403832c:	18800916 	blt	r3,r2,4038354 <cb_arpent_tmo+0xc4>
 4038330:	e0bffe17 	ldw	r2,-8(fp)
 4038334:	10c00617 	ldw	r3,24(r2)
 4038338:	e0bffc17 	ldw	r2,-16(fp)
 403833c:	10c5c83a 	sub	r2,r2,r3
 4038340:	10801930 	cmpltui	r2,r2,100
 4038344:	1000031e 	bne	r2,zero,4038354 <cb_arpent_tmo+0xc4>
                  ((int)(lticks - tp->lasttime)   >= TPS))
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
 4038348:	e0bffe17 	ldw	r2,-8(fp)
 403834c:	10000015 	stw	zero,0(r2)
         {
            /* purge if pending for more than one second */
            arp_free_pending(tp);   /* free pending packets */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else if (((int)(lticks - tp->createtime) >= arp_ageout) &&
 4038350:	00000306 	br	4038360 <cb_arpent_tmo+0xd0>
         {
            /* entry has "expired" and has not been reference in 1 sec. */
            tp->t_pro_addr = 0;     /* mark entry as "unused" */
         }
         else
            arp_count++;
 4038354:	e0bffd17 	ldw	r2,-12(fp)
 4038358:	10800044 	addi	r2,r2,1
 403835c:	e0bffd15 	stw	r2,-12(fp)
{
   struct arptabent *tp;
   int arp_count = 0;
   unsigned long lticks = cticks;

   for (tp = &arp_table[0]; tp < &arp_table[MAXARPS]; tp++)
 4038360:	e0bffe17 	ldw	r2,-8(fp)
 4038364:	10800804 	addi	r2,r2,32
 4038368:	e0bffe15 	stw	r2,-8(fp)
 403836c:	00c101b4 	movhi	r3,1030
 4038370:	18e44904 	addi	r3,r3,-28380
 4038374:	e0bffe17 	ldw	r2,-8(fp)
 4038378:	10ffd336 	bltu	r2,r3,40382c8 <cb_arpent_tmo+0x38>
            arp_count++;
      }
   }

   /* if there are no more "pending" entries, kill the timer */
   if (arp_count == 0)
 403837c:	e0bffd17 	ldw	r2,-12(fp)
 4038380:	1004c03a 	cmpne	r2,r2,zero
 4038384:	1000031e 	bne	r2,zero,4038394 <cb_arpent_tmo+0x104>
   {
      in_timerkill(arp_timer);
 4038388:	d1283d17 	ldw	r4,-24332(gp)
 403838c:	4036fd80 	call	4036fd8 <in_timerkill>
      arp_timer = 0;
 4038390:	d0283d15 	stw	zero,-24332(gp)
   }
      
   USE_ARG(arg);
}
 4038394:	e037883a 	mov	sp,fp
 4038398:	dfc00117 	ldw	ra,4(sp)
 403839c:	df000017 	ldw	fp,0(sp)
 40383a0:	dec00204 	addi	sp,sp,8
 40383a4:	f800283a 	ret

040383a8 <grat_arp>:
 * RETURNS: Returns 0 if OK, or the usual ENP_ errors 
 */

int
grat_arp(NET net, int flag)
{
 40383a8:	defff604 	addi	sp,sp,-40
 40383ac:	dfc00915 	stw	ra,36(sp)
 40383b0:	df000815 	stw	fp,32(sp)
 40383b4:	df000804 	addi	fp,sp,32
 40383b8:	e13ffd15 	stw	r4,-12(fp)
 40383bc:	e17ffe15 	stw	r5,-8(fp)
   char * ethhdr;
   struct arp_hdr *  arphdr;
   IFMIB etif = net->n_mib;    /* mib info for this ethernet interface */
 40383c0:	e0bffd17 	ldw	r2,-12(fp)
 40383c4:	10802717 	ldw	r2,156(r2)
 40383c8:	e0bffa15 	stw	r2,-24(fp)
   PACKET arppkt;

   /* get a packet for an ARP request */
   LOCK_NET_RESOURCE(FREEQ_RESID); 
 40383cc:	01000084 	movi	r4,2
 40383d0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   arppkt = pk_alloc(arpsize);
 40383d4:	01000c04 	movi	r4,48
 40383d8:	4024f700 	call	4024f70 <pk_alloc>
 40383dc:	e0bff915 	stw	r2,-28(fp)
   if (!arppkt)
 40383e0:	e0bff917 	ldw	r2,-28(fp)
 40383e4:	1004c03a 	cmpne	r2,r2,zero
 40383e8:	1000051e 	bne	r2,zero,4038400 <grat_arp+0x58>
   {
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40383ec:	01000084 	movi	r4,2
 40383f0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_RESOURCE;
 40383f4:	00bffa84 	movi	r2,-22
 40383f8:	e0bfff15 	stw	r2,-4(fp)
 40383fc:	00009706 	br	403865c <grat_arp+0x2b4>
   }
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4038400:	01000084 	movi	r4,2
 4038404:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   arppkt->nb_prot = arppkt->nb_buff;
 4038408:	e0bff917 	ldw	r2,-28(fp)
 403840c:	10c00117 	ldw	r3,4(r2)
 4038410:	e0bff917 	ldw	r2,-28(fp)
 4038414:	10c00315 	stw	r3,12(r2)
   arppkt->nb_plen = arpsize;
 4038418:	e0fff917 	ldw	r3,-28(fp)
 403841c:	00800c04 	movi	r2,48
 4038420:	18800415 	stw	r2,16(r3)
   arppkt->net = net;
 4038424:	e0fff917 	ldw	r3,-28(fp)
 4038428:	e0bffd17 	ldw	r2,-12(fp)
 403842c:	18800615 	stw	r2,24(r3)

   /* build arp request packet */
   ethhdr = arppkt->nb_buff + ETHHDR_BIAS;     /* ethernet header at start of buffer */
 4038430:	e0bff917 	ldw	r2,-28(fp)
 4038434:	10800117 	ldw	r2,4(r2)
 4038438:	10800084 	addi	r2,r2,2
 403843c:	e0bffc15 	stw	r2,-16(fp)
   arphdr = (struct arp_hdr *)(arppkt->nb_buff + ETHHDR_SIZE); /* arp header follows */
 4038440:	e0bff917 	ldw	r2,-28(fp)
 4038444:	10800117 	ldw	r2,4(r2)
 4038448:	10800404 	addi	r2,r2,16
 403844c:	e0bffb15 	stw	r2,-20(fp)

#ifdef IEEE_802_3
   arphdr->ar_hd = ARP8023HW; /* net endian 802.3 arp hardware type (ethernet) */
#else
   arphdr->ar_hd = ARPHW;     /* net endian Ethernet arp hardware type (ethernet) */
 4038450:	e0fffb17 	ldw	r3,-20(fp)
 4038454:	00804004 	movi	r2,256
 4038458:	1880000d 	sth	r2,0(r3)
#endif /* IEEE_802_3 */

   arphdr->ar_pro = ARPIP;
 403845c:	e0fffb17 	ldw	r3,-20(fp)
 4038460:	00800204 	movi	r2,8
 4038464:	1880008d 	sth	r2,2(r3)
   arphdr->ar_hln = 6;
 4038468:	e0fffb17 	ldw	r3,-20(fp)
 403846c:	00800184 	movi	r2,6
 4038470:	18800105 	stb	r2,4(r3)
   arphdr->ar_pln = 4;
 4038474:	e0fffb17 	ldw	r3,-20(fp)
 4038478:	00800104 	movi	r2,4
 403847c:	18800145 	stb	r2,5(r3)
   
   /* ARP req? */
   if (flag == 0)
 4038480:	e0bffe17 	ldw	r2,-8(fp)
 4038484:	1004c03a 	cmpne	r2,r2,zero
 4038488:	1000041e 	bne	r2,zero,403849c <grat_arp+0xf4>
      /* yup */
      arphdr->ar_op = ARREQ;
 403848c:	e0fffb17 	ldw	r3,-20(fp)
 4038490:	00804004 	movi	r2,256
 4038494:	1880018d 	sth	r2,6(r3)
 4038498:	00000306 	br	40384a8 <grat_arp+0x100>
   else
     /* nope */
      arphdr->ar_op = ARREP;
 403849c:	e0fffb17 	ldw	r3,-20(fp)
 40384a0:	00808004 	movi	r2,512
 40384a4:	1880018d 	sth	r2,6(r3)
      
   arphdr->ar_tpa = net->n_ipaddr;        /* target's IP address */
 40384a8:	e0bffd17 	ldw	r2,-12(fp)
 40384ac:	10c00a17 	ldw	r3,40(r2)
 40384b0:	e0bffb17 	ldw	r2,-20(fp)
 40384b4:	10c00715 	stw	r3,28(r2)
   arphdr->ar_spa = net->n_ipaddr;   /* my IP address */
 40384b8:	e0bffd17 	ldw	r2,-12(fp)
 40384bc:	10c00a17 	ldw	r3,40(r2)
 40384c0:	e0bffb17 	ldw	r2,-20(fp)
 40384c4:	10c00415 	stw	r3,16(r2)
   MEMMOVE(arphdr->ar_sha, etif->ifPhysAddress, 6);
 40384c8:	e0bffb17 	ldw	r2,-20(fp)
 40384cc:	11000204 	addi	r4,r2,8
 40384d0:	e0bffa17 	ldw	r2,-24(fp)
 40384d4:	11400517 	ldw	r5,20(r2)
 40384d8:	01800184 	movi	r6,6
 40384dc:	4001e840 	call	4001e84 <memmove>
   MEMSET(ethhdr + ET_DSTOFF, 0xFF, 6);     /* destination to broadcast (all FFs) */
 40384e0:	e0fffc17 	ldw	r3,-16(fp)
 40384e4:	00bfffc4 	movi	r2,-1
 40384e8:	18800005 	stb	r2,0(r3)
 40384ec:	00bfffc4 	movi	r2,-1
 40384f0:	18800045 	stb	r2,1(r3)
 40384f4:	00bfffc4 	movi	r2,-1
 40384f8:	18800085 	stb	r2,2(r3)
 40384fc:	00bfffc4 	movi	r2,-1
 4038500:	188000c5 	stb	r2,3(r3)
 4038504:	00bfffc4 	movi	r2,-1
 4038508:	18800105 	stb	r2,4(r3)
 403850c:	00bfffc4 	movi	r2,-1
 4038510:	18800145 	stb	r2,5(r3)
   MEMMOVE(ethhdr + ET_SRCOFF, etif->ifPhysAddress, 6);
 4038514:	e0bffc17 	ldw	r2,-16(fp)
 4038518:	11000184 	addi	r4,r2,6
 403851c:	e0bffa17 	ldw	r2,-24(fp)
 4038520:	11400517 	ldw	r5,20(r2)
 4038524:	01800184 	movi	r6,6
 4038528:	4001e840 	call	4001e84 <memmove>
   ET_TYPE_SET(ethhdr, ntohs(ET_ARP));
 403852c:	e0bffc17 	ldw	r2,-16(fp)
 4038530:	10c00304 	addi	r3,r2,12
 4038534:	00800204 	movi	r2,8
 4038538:	18800005 	stb	r2,0(r3)
 403853c:	e0bffc17 	ldw	r2,-16(fp)
 4038540:	10c00344 	addi	r3,r2,13
 4038544:	00800184 	movi	r2,6
 4038548:	18800005 	stb	r2,0(r3)

#ifdef NO_CC_PACKING    /* move ARP fields to proper network boundaries */
   {
      struct arp_wire * arwp  =  (struct  arp_wire *)arphdr;
 403854c:	e0bffb17 	ldw	r2,-20(fp)
 4038550:	e0bff815 	stw	r2,-32(fp)
      MEMMOVE(&arwp->data[AR_SHA], arphdr->ar_sha, 6);
 4038554:	e0bff817 	ldw	r2,-32(fp)
 4038558:	11000204 	addi	r4,r2,8
 403855c:	e0bffb17 	ldw	r2,-20(fp)
 4038560:	11400204 	addi	r5,r2,8
 4038564:	01800184 	movi	r6,6
 4038568:	4001e840 	call	4001e84 <memmove>
      MEMMOVE(&arwp->data[AR_SPA], &arphdr->ar_spa, 4);
 403856c:	e0bff817 	ldw	r2,-32(fp)
 4038570:	10800204 	addi	r2,r2,8
 4038574:	11000184 	addi	r4,r2,6
 4038578:	e0bffb17 	ldw	r2,-20(fp)
 403857c:	11400404 	addi	r5,r2,16
 4038580:	01800104 	movi	r6,4
 4038584:	4001e840 	call	4001e84 <memmove>

   /* ARP req? */
   if (flag == 0)
 4038588:	e0bffe17 	ldw	r2,-8(fp)
 403858c:	1004c03a 	cmpne	r2,r2,zero
 4038590:	1000081e 	bne	r2,zero,40385b4 <grat_arp+0x20c>
      /* yup */      
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_tha, 6);
 4038594:	e0bff817 	ldw	r2,-32(fp)
 4038598:	10800204 	addi	r2,r2,8
 403859c:	11000284 	addi	r4,r2,10
 40385a0:	e0bffb17 	ldw	r2,-20(fp)
 40385a4:	11400504 	addi	r5,r2,20
 40385a8:	01800184 	movi	r6,6
 40385ac:	4001e840 	call	4001e84 <memmove>
 40385b0:	00000706 	br	40385d0 <grat_arp+0x228>
   else
      /* nope */
      MEMMOVE(&arwp->data[AR_THA], arphdr->ar_sha, 6);
 40385b4:	e0bff817 	ldw	r2,-32(fp)
 40385b8:	10800204 	addi	r2,r2,8
 40385bc:	11000284 	addi	r4,r2,10
 40385c0:	e0bffb17 	ldw	r2,-20(fp)
 40385c4:	11400204 	addi	r5,r2,8
 40385c8:	01800184 	movi	r6,6
 40385cc:	4001e840 	call	4001e84 <memmove>
      
      MEMMOVE(&arwp->data[AR_TPA], &arphdr->ar_tpa, 4);
 40385d0:	e0bff817 	ldw	r2,-32(fp)
 40385d4:	10800204 	addi	r2,r2,8
 40385d8:	11000404 	addi	r4,r2,16
 40385dc:	e0bffb17 	ldw	r2,-20(fp)
 40385e0:	11400704 	addi	r5,r2,28
 40385e4:	01800104 	movi	r6,4
 40385e8:	4001e840 	call	4001e84 <memmove>
   }
#endif   /* IEEE_802_3 */

#ifndef IEEE_802_3_ONLY
   /* send arp request - if a packet oriented send exists, use it: */
   if (net->pkt_send)
 40385ec:	e0bffd17 	ldw	r2,-12(fp)
 40385f0:	10800417 	ldw	r2,16(r2)
 40385f4:	1005003a 	cmpeq	r2,r2,zero
 40385f8:	1000051e 	bne	r2,zero,4038610 <grat_arp+0x268>
      net->pkt_send(arppkt);  /* driver should free arppkt later */
 40385fc:	e0bffd17 	ldw	r2,-12(fp)
 4038600:	10800417 	ldw	r2,16(r2)
 4038604:	e13ff917 	ldw	r4,-28(fp)
 4038608:	103ee83a 	callr	r2
 403860c:	00000e06 	br	4038648 <grat_arp+0x2a0>
   else  /* use old raw send */
   {
      net->raw_send(arppkt->net, arppkt->nb_buff, arpsize);
 4038610:	e0bffd17 	ldw	r2,-12(fp)
 4038614:	10c00317 	ldw	r3,12(r2)
 4038618:	e0bff917 	ldw	r2,-28(fp)
 403861c:	11000617 	ldw	r4,24(r2)
 4038620:	e0bff917 	ldw	r2,-28(fp)
 4038624:	11400117 	ldw	r5,4(r2)
 4038628:	01800c04 	movi	r6,48
 403862c:	183ee83a 	callr	r3
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4038630:	01000084 	movi	r4,2
 4038634:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(arppkt);
 4038638:	e13ff917 	ldw	r4,-28(fp)
 403863c:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4038640:	01000084 	movi	r4,2
 4038644:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   }
   arpReqsOut++;
 4038648:	d0a84017 	ldw	r2,-24320(gp)
 403864c:	10800044 	addi	r2,r2,1
 4038650:	d0a84015 	stw	r2,-24320(gp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(arppkt);
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif  /* IEEE_802_3_ONLY */
   
   return ENP_SEND_PENDING;
 4038654:	00800044 	movi	r2,1
 4038658:	e0bfff15 	stw	r2,-4(fp)
 403865c:	e0bfff17 	ldw	r2,-4(fp)
}
 4038660:	e037883a 	mov	sp,fp
 4038664:	dfc00117 	ldw	ra,4(sp)
 4038668:	df000017 	ldw	fp,0(sp)
 403866c:	dec00204 	addi	sp,sp,8
 4038670:	f800283a 	ret

04038674 <if_getbynum>:
 * RETURNS: Returns NET pointer, or NULL if out of range
 */

NET
if_getbynum(int ifnum)
{
 4038674:	defffb04 	addi	sp,sp,-20
 4038678:	dfc00415 	stw	ra,16(sp)
 403867c:	df000315 	stw	fp,12(sp)
 4038680:	df000304 	addi	fp,sp,12
 4038684:	e13ffe15 	stw	r4,-8(fp)
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4038688:	008101b4 	movhi	r2,1030
 403868c:	10a44904 	addi	r2,r2,-28380
 4038690:	10800017 	ldw	r2,0(r2)
 4038694:	e0bffd15 	stw	r2,-12(fp)
 4038698:	00000c06 	br	40386cc <if_getbynum+0x58>
   {
      if(ifnum-- == 0)
 403869c:	e0bffe17 	ldw	r2,-8(fp)
 40386a0:	10bfffc4 	addi	r2,r2,-1
 40386a4:	e0bffe15 	stw	r2,-8(fp)
 40386a8:	e0bffe17 	ldw	r2,-8(fp)
 40386ac:	10bfffd8 	cmpnei	r2,r2,-1
 40386b0:	1000031e 	bne	r2,zero,40386c0 <if_getbynum+0x4c>
         return ifp;
 40386b4:	e0bffd17 	ldw	r2,-12(fp)
 40386b8:	e0bfff15 	stw	r2,-4(fp)
 40386bc:	00000806 	br	40386e0 <if_getbynum+0x6c>

NET
if_getbynum(int ifnum)
{
   NET ifp;
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40386c0:	e0bffd17 	ldw	r2,-12(fp)
 40386c4:	10800017 	ldw	r2,0(r2)
 40386c8:	e0bffd15 	stw	r2,-12(fp)
 40386cc:	e0bffd17 	ldw	r2,-12(fp)
 40386d0:	1004c03a 	cmpne	r2,r2,zero
 40386d4:	103ff11e 	bne	r2,zero,403869c <if_getbynum+0x28>
   {
      if(ifnum-- == 0)
         return ifp;
   }
   dtrap();
 40386d8:	4025bb40 	call	4025bb4 <dtrap>
   return NULL;   /* list is not long enough */
 40386dc:	e03fff15 	stw	zero,-4(fp)
 40386e0:	e0bfff17 	ldw	r2,-4(fp)
}
 40386e4:	e037883a 	mov	sp,fp
 40386e8:	dfc00117 	ldw	ra,4(sp)
 40386ec:	df000017 	ldw	fp,0(sp)
 40386f0:	dec00204 	addi	sp,sp,8
 40386f4:	f800283a 	ret

040386f8 <isbcast>:
 * RETURNS:  Returns TRUE if broadcast, else false. 
 */

int
isbcast(NET ifc, unsigned char * addr)
{
 40386f8:	defffc04 	addi	sp,sp,-16
 40386fc:	df000315 	stw	fp,12(sp)
 4038700:	df000304 	addi	fp,sp,12
 4038704:	e13ffd15 	stw	r4,-12(fp)
 4038708:	e17ffe15 	stw	r5,-8(fp)
#if (ALIGN_TYPE > 2)
   /* On systems with 32bit alignment requirements we have to make
    * sure our tests are aligned. Specifically, this results in "data
    * abort" errors on the Samsung/ARM port. 
    */
   if((u_long)addr & (ALIGN_TYPE - 1))
 403870c:	e0bffe17 	ldw	r2,-8(fp)
 4038710:	108000cc 	andi	r2,r2,3
 4038714:	1005003a 	cmpeq	r2,r2,zero
 4038718:	10000e1e 	bne	r2,zero,4038754 <isbcast+0x5c>
   {
      /* check first two bytes */
      if ((u_short)*(u_short*)(addr) != 0xFFFF)
 403871c:	e0bffe17 	ldw	r2,-8(fp)
 4038720:	1080000b 	ldhu	r2,0(r2)
 4038724:	10ffffcc 	andi	r3,r2,65535
 4038728:	00bfffd4 	movui	r2,65535
 403872c:	18800226 	beq	r3,r2,4038738 <isbcast+0x40>
         return(FALSE);
 4038730:	e03fff15 	stw	zero,-4(fp)
 4038734:	00002306 	br	40387c4 <isbcast+0xcc>
      if ((u_long)(*(u_long*)(addr + 2)) != 0xFFFFFFFF)
 4038738:	e0bffe17 	ldw	r2,-8(fp)
 403873c:	10800084 	addi	r2,r2,2
 4038740:	10800017 	ldw	r2,0(r2)
 4038744:	10bfffe0 	cmpeqi	r2,r2,-1
 4038748:	1000101e 	bne	r2,zero,403878c <isbcast+0x94>
         return FALSE;
 403874c:	e03fff15 	stw	zero,-4(fp)
 4038750:	00001c06 	br	40387c4 <isbcast+0xcc>
#endif /* ALIGN_TYPE > 4 */
   {
      /* check first four bytes for all ones. Since this is the fastest
       * test, do it first
       */
      if ((u_long)(*(u_long*)addr) != 0xFFFFFFFF)
 4038754:	e0bffe17 	ldw	r2,-8(fp)
 4038758:	10800017 	ldw	r2,0(r2)
 403875c:	10bfffe0 	cmpeqi	r2,r2,-1
 4038760:	1000021e 	bne	r2,zero,403876c <isbcast+0x74>
         return FALSE;
 4038764:	e03fff15 	stw	zero,-4(fp)
 4038768:	00001606 	br	40387c4 <isbcast+0xcc>

      /* check last two bytes */
      if ((u_short)*(u_short*)(addr+4) != 0xFFFF)
 403876c:	e0bffe17 	ldw	r2,-8(fp)
 4038770:	10800104 	addi	r2,r2,4
 4038774:	1080000b 	ldhu	r2,0(r2)
 4038778:	10ffffcc 	andi	r3,r2,65535
 403877c:	00bfffd4 	movui	r2,65535
 4038780:	18800226 	beq	r3,r2,403878c <isbcast+0x94>
         return(FALSE);
 4038784:	e03fff15 	stw	zero,-4(fp)
 4038788:	00000e06 	br	40387c4 <isbcast+0xcc>
   }
   
   /* now reject any line type packets which don't support broadcast */
   if ((ifc->n_mib->ifType == PPP) ||
 403878c:	e0bffd17 	ldw	r2,-12(fp)
 4038790:	10802717 	ldw	r2,156(r2)
 4038794:	10800217 	ldw	r2,8(r2)
 4038798:	108005e0 	cmpeqi	r2,r2,23
 403879c:	1000051e 	bne	r2,zero,40387b4 <isbcast+0xbc>
 40387a0:	e0bffd17 	ldw	r2,-12(fp)
 40387a4:	10802717 	ldw	r2,156(r2)
 40387a8:	10800217 	ldw	r2,8(r2)
 40387ac:	10800718 	cmpnei	r2,r2,28
 40387b0:	1000021e 	bne	r2,zero,40387bc <isbcast+0xc4>
       (ifc->n_mib->ifType == SLIP))
   {
      return FALSE;
 40387b4:	e03fff15 	stw	zero,-4(fp)
 40387b8:	00000206 	br	40387c4 <isbcast+0xcc>
   }

   /* passed all tests, must be broadcast */
   return(TRUE);
 40387bc:	00800044 	movi	r2,1
 40387c0:	e0bfff15 	stw	r2,-4(fp)
 40387c4:	e0bfff17 	ldw	r2,-4(fp)
}
 40387c8:	e037883a 	mov	sp,fp
 40387cc:	df000017 	ldw	fp,0(sp)
 40387d0:	dec00104 	addi	sp,sp,4
 40387d4:	f800283a 	ret

040387d8 <reg_type>:
 * RETURNS: Returns 0 if OK, else non-zero error code. 
 */

int
reg_type(unshort type)
{
 40387d8:	defffa04 	addi	sp,sp,-24
 40387dc:	dfc00515 	stw	ra,20(sp)
 40387e0:	df000415 	stw	fp,16(sp)
 40387e4:	df000404 	addi	fp,sp,16
 40387e8:	e13ffe0d 	sth	r4,-8(fp)
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 40387ec:	008101b4 	movhi	r2,1030
 40387f0:	10a44904 	addi	r2,r2,-28380
 40387f4:	10800017 	ldw	r2,0(r2)
 40387f8:	e0bffd15 	stw	r2,-12(fp)
 40387fc:	00001306 	br	403884c <reg_type+0x74>
   {
      if (ifp->n_reg_type)    /* make sure call exists */
 4038800:	e0bffd17 	ldw	r2,-12(fp)
 4038804:	10800617 	ldw	r2,24(r2)
 4038808:	1005003a 	cmpeq	r2,r2,zero
 403880c:	10000c1e 	bne	r2,zero,4038840 <reg_type+0x68>
      {
         e = (ifp->n_reg_type)(type, ifp);
 4038810:	e0bffd17 	ldw	r2,-12(fp)
 4038814:	10800617 	ldw	r2,24(r2)
 4038818:	e13ffe0b 	ldhu	r4,-8(fp)
 403881c:	e17ffd17 	ldw	r5,-12(fp)
 4038820:	103ee83a 	callr	r2
 4038824:	e0bffc15 	stw	r2,-16(fp)
         if (e)
 4038828:	e0bffc17 	ldw	r2,-16(fp)
 403882c:	1005003a 	cmpeq	r2,r2,zero
 4038830:	1000031e 	bne	r2,zero,4038840 <reg_type+0x68>
            return e;   /* bails out if error */
 4038834:	e0bffc17 	ldw	r2,-16(fp)
 4038838:	e0bfff15 	stw	r2,-4(fp)
 403883c:	00000706 	br	403885c <reg_type+0x84>
   if (i >= PLLISTLEN)
      return ENP_RESOURCE;
#endif   /* DYNAMIC_IFACES */

   /* loop thru list of nets, making them all look at new type */
   for (ifp = (NET)(netlist.q_head); ifp; ifp = ifp->n_next)
 4038840:	e0bffd17 	ldw	r2,-12(fp)
 4038844:	10800017 	ldw	r2,0(r2)
 4038848:	e0bffd15 	stw	r2,-12(fp)
 403884c:	e0bffd17 	ldw	r2,-12(fp)
 4038850:	1004c03a 	cmpne	r2,r2,zero
 4038854:	103fea1e 	bne	r2,zero,4038800 <reg_type+0x28>
         e = (ifp->n_reg_type)(type, ifp);
         if (e)
            return e;   /* bails out if error */
      }
   }
   return 0;   /* OK code */
 4038858:	e03fff15 	stw	zero,-4(fp)
 403885c:	e0bfff17 	ldw	r2,-4(fp)
}
 4038860:	e037883a 	mov	sp,fp
 4038864:	dfc00117 	ldw	ra,4(sp)
 4038868:	df000017 	ldw	fp,0(sp)
 403886c:	dec00204 	addi	sp,sp,8
 4038870:	f800283a 	ret

04038874 <if_killsocks>:
 */

      /* kill this NETs sockets */
void
if_killsocks(NET ifp)
{
 4038874:	defffa04 	addi	sp,sp,-24
 4038878:	dfc00515 	stw	ra,20(sp)
 403887c:	df000415 	stw	fp,16(sp)
 4038880:	df000404 	addi	fp,sp,16
 4038884:	e13fff15 	stw	r4,-4(fp)
   struct socket * so;
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
 4038888:	008101b4 	movhi	r2,1030
 403888c:	10a34504 	addi	r2,r2,-29420
 4038890:	10800017 	ldw	r2,0(r2)
 4038894:	e0bffe15 	stw	r2,-8(fp)
   while(so)
 4038898:	00001406 	br	40388ec <if_killsocks+0x78>
   {
      if(so->so_pcb)
 403889c:	e0bffe17 	ldw	r2,-8(fp)
 40388a0:	10800117 	ldw	r2,4(r2)
 40388a4:	1005003a 	cmpeq	r2,r2,zero
 40388a8:	1000051e 	bne	r2,zero,40388c0 <if_killsocks+0x4c>
         so_ifp = so->so_pcb->ifp;
 40388ac:	e0bffe17 	ldw	r2,-8(fp)
 40388b0:	10800117 	ldw	r2,4(r2)
 40388b4:	10800a17 	ldw	r2,40(r2)
 40388b8:	e0bffc15 	stw	r2,-16(fp)
 40388bc:	00000106 	br	40388c4 <if_killsocks+0x50>
      else
         so_ifp = NULL;
 40388c0:	e03ffc15 	stw	zero,-16(fp)
      next = (struct socket *)so->next;
 40388c4:	e0bffe17 	ldw	r2,-8(fp)
 40388c8:	10800017 	ldw	r2,0(r2)
 40388cc:	e0bffd15 	stw	r2,-12(fp)
      if (so_ifp == ifp)
 40388d0:	e0fffc17 	ldw	r3,-16(fp)
 40388d4:	e0bfff17 	ldw	r2,-4(fp)
 40388d8:	1880021e 	bne	r3,r2,40388e4 <if_killsocks+0x70>
      {
         /* this is a direct heavy-handed close. A reset is sent
          * and all data is lost. The user should really have closed
          * all the sockets gracfully first.... 
          */
         soabort(so);
 40388dc:	e13ffe17 	ldw	r4,-8(fp)
 40388e0:	402ab240 	call	402ab24 <soabort>
      }
      so = next;
 40388e4:	e0bffd17 	ldw	r2,-12(fp)
 40388e8:	e0bffe15 	stw	r2,-8(fp)
   struct socket * next;
   NET      so_ifp;     /* interface of sockets in list */

   /* reset any sockets with this iface IP address */
   so = (struct socket *)(soq.q_head);
   while(so)
 40388ec:	e0bffe17 	ldw	r2,-8(fp)
 40388f0:	1004c03a 	cmpne	r2,r2,zero
 40388f4:	103fe91e 	bne	r2,zero,403889c <if_killsocks+0x28>
          */
         soabort(so);
      }
      so = next;
   }
}
 40388f8:	e037883a 	mov	sp,fp
 40388fc:	dfc00117 	ldw	ra,4(sp)
 4038900:	df000017 	ldw	fp,0(sp)
 4038904:	dec00204 	addi	sp,sp,8
 4038908:	f800283a 	ret

0403890c <ip_init>:
 * OK, else returns a non-zero error code. 
 */

int
ip_init(void)
{
 403890c:	defffd04 	addi	sp,sp,-12
 4038910:	dfc00215 	stw	ra,8(sp)
 4038914:	df000115 	stw	fp,4(sp)
 4038918:	df000104 	addi	fp,sp,4

   /* register IP type with link layer drivers */
   if (reg_type(IP_TYPE) != 0)
 403891c:	01000204 	movi	r4,8
 4038920:	40387d80 	call	40387d8 <reg_type>
 4038924:	1005003a 	cmpeq	r2,r2,zero
 4038928:	1000061e 	bne	r2,zero,4038944 <ip_init+0x38>
   {   
#ifdef NPDEBUG
      dprintf("IP_INIT: unable to register type with MAC driver\n");
 403892c:	01010174 	movhi	r4,1029
 4038930:	212f3104 	addi	r4,r4,-17212
 4038934:	40021940 	call	4002194 <puts>
#endif
      return(1);
 4038938:	00800044 	movi	r2,1
 403893c:	e0bfff15 	stw	r2,-4(fp)
 4038940:	00002b06 	br	40389f0 <ip_init+0xe4>
   }

   /* initialize the IP mib */
   MEMSET(&ip_mib, 0, sizeof(ip_mib));
 4038944:	008101b4 	movhi	r2,1030
 4038948:	10a44e04 	addi	r2,r2,-28360
 403894c:	1009883a 	mov	r4,r2
 4038950:	01801404 	movi	r6,80
 4038954:	000b883a 	mov	r5,zero
 4038958:	4001f640 	call	4001f64 <memset>
   ip_mib.ipForwarding = 2;   /* default to host, not gateway (router) */
 403895c:	00c101b4 	movhi	r3,1030
 4038960:	18e44e04 	addi	r3,r3,-28360
 4038964:	00800084 	movi	r2,2
 4038968:	18800015 	stw	r2,0(r3)
   ip_mib.ipDefaultTTL = IP_TTL;
 403896c:	00c101b4 	movhi	r3,1030
 4038970:	18e44e04 	addi	r3,r3,-28360
 4038974:	00801004 	movi	r2,64
 4038978:	18800115 	stw	r2,4(r3)

#ifdef IP_ROUTING
   /* alloc space for the route table */
   rt_mib = (struct RtMib*)RT_ALLOC(ipRoutes * sizeof(struct RtMib));
 403897c:	d0a04e17 	ldw	r2,-32456(gp)
 4038980:	11000f24 	muli	r4,r2,60
 4038984:	40265f80 	call	40265f8 <npalloc>
 4038988:	d0a84415 	stw	r2,-24304(gp)
   if (!rt_mib)
 403898c:	d0a84417 	ldw	r2,-24304(gp)
 4038990:	1004c03a 	cmpne	r2,r2,zero
 4038994:	1000061e 	bne	r2,zero,40389b0 <ip_init+0xa4>
   {
#ifdef NPDEBUG
      dprintf("IP_INIT ERROR: can't alloc route table\n");
 4038998:	01010174 	movhi	r4,1029
 403899c:	212f3e04 	addi	r4,r4,-17160
 40389a0:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG */
      return(ENP_NOMEM);
 40389a4:	00bffb04 	movi	r2,-20
 40389a8:	e0bfff15 	stw	r2,-4(fp)
 40389ac:	00001006 	br	40389f0 <ip_init+0xe4>
   }

  MEMSET(rt_mib,0, ipRoutes * sizeof(struct RtMib)) ;
 40389b0:	d0e84417 	ldw	r3,-24304(gp)
 40389b4:	d0a04e17 	ldw	r2,-32456(gp)
 40389b8:	10800f24 	muli	r2,r2,60
 40389bc:	1809883a 	mov	r4,r3
 40389c0:	100d883a 	mov	r6,r2
 40389c4:	000b883a 	mov	r5,zero
 40389c8:	4001f640 	call	4001f64 <memset>
  ip_mib.ipForwarding = 1;   /* override default, be gateway (router) */
 40389cc:	00c101b4 	movhi	r3,1030
 40389d0:	18e44e04 	addi	r3,r3,-28360
 40389d4:	00800044 	movi	r2,1
 40389d8:	18800015 	stw	r2,0(r3)
#endif   /* IP_ROUTING */

   /* set IP reassembly timeout */
   ip_mib.ipReasmTimeout = IRE_TMO;
 40389dc:	00c101b4 	movhi	r3,1030
 40389e0:	18e44e04 	addi	r3,r3,-28360
 40389e4:	00801e04 	movi	r2,120
 40389e8:	18800c15 	stw	r2,48(r3)
      return(1);
   }
#endif   /* IPSEC */

   /* everything opened OK return 0 */
   return(SUCCESS);
 40389ec:	e03fff15 	stw	zero,-4(fp)
 40389f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40389f4:	e037883a 	mov	sp,fp
 40389f8:	dfc00117 	ldw	ra,4(sp)
 40389fc:	df000017 	ldw	fp,0(sp)
 4038a00:	dec00204 	addi	sp,sp,8
 4038a04:	f800283a 	ret

04038a08 <ip_bldhead>:
 * RETURNS: void
 */

void
ip_bldhead(PACKET p, unsigned pid, u_char prot, unshort fragword)
{
 4038a08:	defff804 	addi	sp,sp,-32
 4038a0c:	dfc00715 	stw	ra,28(sp)
 4038a10:	df000615 	stw	fp,24(sp)
 4038a14:	df000604 	addi	fp,sp,24
 4038a18:	e13ffc15 	stw	r4,-16(fp)
 4038a1c:	e17ffd15 	stw	r5,-12(fp)
 4038a20:	e1bffe05 	stb	r6,-8(fp)
 4038a24:	e1ffff0d 	sth	r7,-4(fp)
   struct ip * pip;
   struct ip_socopts *sopts;

   /* prepend IP header to packet data */
   p->nb_prot -= sizeof(struct ip);       /* this assumes no send options! */
 4038a28:	e0bffc17 	ldw	r2,-16(fp)
 4038a2c:	10800317 	ldw	r2,12(r2)
 4038a30:	10fffb04 	addi	r3,r2,-20
 4038a34:	e0bffc17 	ldw	r2,-16(fp)
 4038a38:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
 4038a3c:	e0bffc17 	ldw	r2,-16(fp)
 4038a40:	10800417 	ldw	r2,16(r2)
 4038a44:	10c00504 	addi	r3,r2,20
 4038a48:	e0bffc17 	ldw	r2,-16(fp)
 4038a4c:	10c00415 	stw	r3,16(r2)

   pip = (struct ip*)p->nb_prot;
 4038a50:	e0bffc17 	ldw	r2,-16(fp)
 4038a54:	10800317 	ldw	r2,12(r2)
 4038a58:	e0bffb15 	stw	r2,-20(fp)

   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 4038a5c:	e0fffb17 	ldw	r3,-20(fp)
 4038a60:	00801144 	movi	r2,69
 4038a64:	18800005 	stb	r2,0(r3)
   pip->ip_flgs_foff = fragword; /* fragment flags and offset */
 4038a68:	e0fffb17 	ldw	r3,-20(fp)
 4038a6c:	e0bfff0b 	ldhu	r2,-4(fp)
 4038a70:	1880018d 	sth	r2,6(r3)
   pip->ip_id = htons((unshort)pid);   /* IP datagram ID */
 4038a74:	e0bffd17 	ldw	r2,-12(fp)
 4038a78:	10bfffcc 	andi	r2,r2,65535
 4038a7c:	1004d23a 	srli	r2,r2,8
 4038a80:	10803fcc 	andi	r2,r2,255
 4038a84:	1009883a 	mov	r4,r2
 4038a88:	e0bffd17 	ldw	r2,-12(fp)
 4038a8c:	10bfffcc 	andi	r2,r2,65535
 4038a90:	1004923a 	slli	r2,r2,8
 4038a94:	1007883a 	mov	r3,r2
 4038a98:	00bfc004 	movi	r2,-256
 4038a9c:	1884703a 	and	r2,r3,r2
 4038aa0:	2084b03a 	or	r2,r4,r2
 4038aa4:	1007883a 	mov	r3,r2
 4038aa8:	e0bffb17 	ldw	r2,-20(fp)
 4038aac:	10c0010d 	sth	r3,4(r2)
   pip->ip_len = htons((unshort)p->nb_plen);
 4038ab0:	e0bffc17 	ldw	r2,-16(fp)
 4038ab4:	10800417 	ldw	r2,16(r2)
 4038ab8:	10bfffcc 	andi	r2,r2,65535
 4038abc:	1004d23a 	srli	r2,r2,8
 4038ac0:	10803fcc 	andi	r2,r2,255
 4038ac4:	1009883a 	mov	r4,r2
 4038ac8:	e0bffc17 	ldw	r2,-16(fp)
 4038acc:	10800417 	ldw	r2,16(r2)
 4038ad0:	10bfffcc 	andi	r2,r2,65535
 4038ad4:	1004923a 	slli	r2,r2,8
 4038ad8:	1007883a 	mov	r3,r2
 4038adc:	00bfc004 	movi	r2,-256
 4038ae0:	1884703a 	and	r2,r3,r2
 4038ae4:	2084b03a 	or	r2,r4,r2
 4038ae8:	1007883a 	mov	r3,r2
 4038aec:	e0bffb17 	ldw	r2,-20(fp)
 4038af0:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;          /* install protocol ID (TCP, UDP, etc) */
 4038af4:	e0fffb17 	ldw	r3,-20(fp)
 4038af8:	e0bffe03 	ldbu	r2,-8(fp)
 4038afc:	18800245 	stb	r2,9(r3)

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 4038b00:	e0bffc17 	ldw	r2,-16(fp)
 4038b04:	10800c17 	ldw	r2,48(r2)
 4038b08:	e0bffa15 	stw	r2,-24(fp)
 4038b0c:	e0bffa17 	ldw	r2,-24(fp)
 4038b10:	1005003a 	cmpeq	r2,r2,zero
 4038b14:	1000121e 	bne	r2,zero,4038b60 <ip_bldhead+0x158>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 4038b18:	e0bffa17 	ldw	r2,-24(fp)
 4038b1c:	10800043 	ldbu	r2,1(r2)
 4038b20:	10803fcc 	andi	r2,r2,255
 4038b24:	1005003a 	cmpeq	r2,r2,zero
 4038b28:	1000051e 	bne	r2,zero,4038b40 <ip_bldhead+0x138>
         pip->ip_time = sopts->ip_ttl;
 4038b2c:	e0bffa17 	ldw	r2,-24(fp)
 4038b30:	10c00043 	ldbu	r3,1(r2)
 4038b34:	e0bffb17 	ldw	r2,-20(fp)
 4038b38:	10c00205 	stb	r3,8(r2)
 4038b3c:	00000306 	br	4038b4c <ip_bldhead+0x144>
	  else
         pip->ip_time = (u_char)IP_TTL;     /* default number of hops, really */
 4038b40:	e0fffb17 	ldw	r3,-20(fp)
 4038b44:	00801004 	movi	r2,64
 4038b48:	18800205 	stb	r2,8(r3)
      pip->ip_tos = sopts->ip_tos;
 4038b4c:	e0bffa17 	ldw	r2,-24(fp)
 4038b50:	10c00003 	ldbu	r3,0(r2)
 4038b54:	e0bffb17 	ldw	r2,-20(fp)
 4038b58:	10c00045 	stb	r3,1(r2)
 4038b5c:	00000506 	br	4038b74 <ip_bldhead+0x16c>
   }
   else
   {
	  /* nope */
      pip->ip_time = (u_char)IP_TTL;       /* default number of hops, really */
 4038b60:	e0bffb17 	ldw	r2,-20(fp)
 4038b64:	00c01004 	movi	r3,64
 4038b68:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 4038b6c:	e0bffb17 	ldw	r2,-20(fp)
 4038b70:	10000045 	stb	zero,1(r2)
   }
   
   pip->ip_chksum = IPXSUM;      /* clear checksum field for summing */
 4038b74:	e0bffb17 	ldw	r2,-20(fp)
 4038b78:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
 4038b7c:	e13ffb17 	ldw	r4,-20(fp)
 4038b80:	01400284 	movi	r5,10
 4038b84:	4020a000 	call	4020a00 <cksum>
 4038b88:	0084303a 	nor	r2,zero,r2
 4038b8c:	1007883a 	mov	r3,r2
 4038b90:	e0bffb17 	ldw	r2,-20(fp)
 4038b94:	10c0028d 	sth	r3,10(r2)
}
 4038b98:	e037883a 	mov	sp,fp
 4038b9c:	dfc00117 	ldw	ra,4(sp)
 4038ba0:	df000017 	ldw	fp,0(sp)
 4038ba4:	dec00204 	addi	sp,sp,8
 4038ba8:	f800283a 	ret

04038bac <ip_write_internal>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_write_internal(PACKET p)
{
 4038bac:	deffed04 	addi	sp,sp,-76
 4038bb0:	dfc01215 	stw	ra,72(sp)
 4038bb4:	df001115 	stw	fp,68(sp)
 4038bb8:	df001104 	addi	fp,sp,68
 4038bbc:	e13ffc15 	stw	r4,-16(fp)
   PACKET newpkt;
   unsigned maxbuflen;

#ifdef IP_MULTICAST
   /* If destination address is multicast, process multicast options */
   if (IN_MULTICAST(ntohl(p->fhost)))
 4038bc0:	e0bffc17 	ldw	r2,-16(fp)
 4038bc4:	10800717 	ldw	r2,28(r2)
 4038bc8:	1004d63a 	srli	r2,r2,24
 4038bcc:	10c03fcc 	andi	r3,r2,255
 4038bd0:	e0bffc17 	ldw	r2,-16(fp)
 4038bd4:	10800717 	ldw	r2,28(r2)
 4038bd8:	1004d23a 	srli	r2,r2,8
 4038bdc:	10bfc00c 	andi	r2,r2,65280
 4038be0:	1886b03a 	or	r3,r3,r2
 4038be4:	e0bffc17 	ldw	r2,-16(fp)
 4038be8:	10800717 	ldw	r2,28(r2)
 4038bec:	10bfc00c 	andi	r2,r2,65280
 4038bf0:	1004923a 	slli	r2,r2,8
 4038bf4:	1886b03a 	or	r3,r3,r2
 4038bf8:	e0bffc17 	ldw	r2,-16(fp)
 4038bfc:	10800717 	ldw	r2,28(r2)
 4038c00:	10803fcc 	andi	r2,r2,255
 4038c04:	1004963a 	slli	r2,r2,24
 4038c08:	1884b03a 	or	r2,r3,r2
 4038c0c:	10fc002c 	andhi	r3,r2,61440
 4038c10:	00b80034 	movhi	r2,57344
 4038c14:	1880b31e 	bne	r3,r2,4038ee4 <ip_write_internal+0x338>
   {
      if (p->imo != NULL)
 4038c18:	e0bffc17 	ldw	r2,-16(fp)
 4038c1c:	10800b17 	ldw	r2,44(r2)
 4038c20:	1005003a 	cmpeq	r2,r2,zero
 4038c24:	1000131e 	bne	r2,zero,4038c74 <ip_write_internal+0xc8>
         if (p->imo->imo_multicast_netp)
 4038c28:	e0bffc17 	ldw	r2,-16(fp)
 4038c2c:	10800b17 	ldw	r2,44(r2)
 4038c30:	10800017 	ldw	r2,0(r2)
 4038c34:	1005003a 	cmpeq	r2,r2,zero
 4038c38:	1000061e 	bne	r2,zero,4038c54 <ip_write_internal+0xa8>
            p->net = p->imo->imo_multicast_netp;
 4038c3c:	e0bffc17 	ldw	r2,-16(fp)
 4038c40:	10800b17 	ldw	r2,44(r2)
 4038c44:	10c00017 	ldw	r3,0(r2)
 4038c48:	e0bffc17 	ldw	r2,-16(fp)
 4038c4c:	10c00615 	stw	r3,24(r2)
 4038c50:	00002606 	br	4038cec <ip_write_internal+0x140>
         else
            p->net = iproute(p->fhost, &firsthop);
 4038c54:	e0bffc17 	ldw	r2,-16(fp)
 4038c58:	11000717 	ldw	r4,28(r2)
 4038c5c:	e17ffb04 	addi	r5,fp,-20
 4038c60:	403a8140 	call	403a814 <iproute>
 4038c64:	1007883a 	mov	r3,r2
 4038c68:	e0bffc17 	ldw	r2,-16(fp)
 4038c6c:	10c00615 	stw	r3,24(r2)
 4038c70:	00001e06 	br	4038cec <ip_write_internal+0x140>
      else
      {
         for (i = 0; i < ifNumber; i++)
 4038c74:	e03ff815 	stw	zero,-32(fp)
 4038c78:	00001706 	br	4038cd8 <ip_write_internal+0x12c>
            if (nets[i]->n_mcastlist)
 4038c7c:	e0bff817 	ldw	r2,-32(fp)
 4038c80:	00c101b4 	movhi	r3,1030
 4038c84:	18e20804 	addi	r3,r3,-30688
 4038c88:	1085883a 	add	r2,r2,r2
 4038c8c:	1085883a 	add	r2,r2,r2
 4038c90:	10c5883a 	add	r2,r2,r3
 4038c94:	10800017 	ldw	r2,0(r2)
 4038c98:	10802b17 	ldw	r2,172(r2)
 4038c9c:	1005003a 	cmpeq	r2,r2,zero
 4038ca0:	10000a1e 	bne	r2,zero,4038ccc <ip_write_internal+0x120>
            {
               p->net = nets[i];
 4038ca4:	e0bff817 	ldw	r2,-32(fp)
 4038ca8:	00c101b4 	movhi	r3,1030
 4038cac:	18e20804 	addi	r3,r3,-30688
 4038cb0:	1085883a 	add	r2,r2,r2
 4038cb4:	1085883a 	add	r2,r2,r2
 4038cb8:	10c5883a 	add	r2,r2,r3
 4038cbc:	10c00017 	ldw	r3,0(r2)
 4038cc0:	e0bffc17 	ldw	r2,-16(fp)
 4038cc4:	10c00615 	stw	r3,24(r2)
               break;
 4038cc8:	00000806 	br	4038cec <ip_write_internal+0x140>
            p->net = p->imo->imo_multicast_netp;
         else
            p->net = iproute(p->fhost, &firsthop);
      else
      {
         for (i = 0; i < ifNumber; i++)
 4038ccc:	e0bff817 	ldw	r2,-32(fp)
 4038cd0:	10800044 	addi	r2,r2,1
 4038cd4:	e0bff815 	stw	r2,-32(fp)
 4038cd8:	00810174 	movhi	r2,1029
 4038cdc:	1081c004 	addi	r2,r2,1792
 4038ce0:	10c00017 	ldw	r3,0(r2)
 4038ce4:	e0bff817 	ldw	r2,-32(fp)
 4038ce8:	10ffe436 	bltu	r2,r3,4038c7c <ip_write_internal+0xd0>
               break;
            }
      }

      /* Confirm that the outgoing interface supports multicast. */
      if ((p->net == NULL) || (p->net->n_mcastlist) == NULL)
 4038cec:	e0bffc17 	ldw	r2,-16(fp)
 4038cf0:	10800617 	ldw	r2,24(r2)
 4038cf4:	1005003a 	cmpeq	r2,r2,zero
 4038cf8:	1000051e 	bne	r2,zero,4038d10 <ip_write_internal+0x164>
 4038cfc:	e0bffc17 	ldw	r2,-16(fp)
 4038d00:	10800617 	ldw	r2,24(r2)
 4038d04:	10802b17 	ldw	r2,172(r2)
 4038d08:	1004c03a 	cmpne	r2,r2,zero
 4038d0c:	10002e1e 	bne	r2,zero,4038dc8 <ip_write_internal+0x21c>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 4038d10:	00810174 	movhi	r2,1029
 4038d14:	1081bf04 	addi	r2,r2,1788
 4038d18:	10800017 	ldw	r2,0(r2)
 4038d1c:	1080840c 	andi	r2,r2,528
 4038d20:	1005003a 	cmpeq	r2,r2,zero
 4038d24:	1000181e 	bne	r2,zero,4038d88 <ip_write_internal+0x1dc>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 4038d28:	e0bffc17 	ldw	r2,-16(fp)
 4038d2c:	11800417 	ldw	r6,16(r2)
 4038d30:	e0bffc17 	ldw	r2,-16(fp)
 4038d34:	10800717 	ldw	r2,28(r2)
 4038d38:	11c03fcc 	andi	r7,r2,255
 4038d3c:	e0bffc17 	ldw	r2,-16(fp)
 4038d40:	10800717 	ldw	r2,28(r2)
 4038d44:	1004d23a 	srli	r2,r2,8
 4038d48:	11003fcc 	andi	r4,r2,255
 4038d4c:	e0bffc17 	ldw	r2,-16(fp)
 4038d50:	10800717 	ldw	r2,28(r2)
 4038d54:	1004d43a 	srli	r2,r2,16
 4038d58:	10c03fcc 	andi	r3,r2,255
 4038d5c:	e0bffc17 	ldw	r2,-16(fp)
 4038d60:	10800717 	ldw	r2,28(r2)
 4038d64:	1004d63a 	srli	r2,r2,24
 4038d68:	d9000015 	stw	r4,0(sp)
 4038d6c:	d8c00115 	stw	r3,4(sp)
 4038d70:	d8800215 	stw	r2,8(sp)
 4038d74:	01010174 	movhi	r4,1029
 4038d78:	212f4804 	addi	r4,r4,-17120
 4038d7c:	e17ffc17 	ldw	r5,-16(fp)
 4038d80:	400207c0 	call	400207c <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
 4038d84:	4025bb40 	call	4025bb4 <dtrap>
         }
#endif
         ip_mib.ipOutNoRoutes++;
 4038d88:	008101b4 	movhi	r2,1030
 4038d8c:	10a44e04 	addi	r2,r2,-28360
 4038d90:	10800b17 	ldw	r2,44(r2)
 4038d94:	10c00044 	addi	r3,r2,1
 4038d98:	008101b4 	movhi	r2,1030
 4038d9c:	10a44e04 	addi	r2,r2,-28360
 4038da0:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4038da4:	01000084 	movi	r4,2
 4038da8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 4038dac:	e13ffc17 	ldw	r4,-16(fp)
 4038db0:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4038db4:	01000084 	movi	r4,2
 4038db8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
 4038dbc:	00bff7c4 	movi	r2,-33
 4038dc0:	e0bffd15 	stw	r2,-12(fp)
 4038dc4:	00015306 	br	4039314 <ip_write_internal+0x768>
       * If we belong to the destination multicast group
       * on the outgoing interface, and the caller did not
       * forbid loopback, put a copy of the packet on the
       * received queue.
       */
      inm = lookup_mcast(p->fhost, p->net);
 4038dc8:	e0bffc17 	ldw	r2,-16(fp)
 4038dcc:	11000717 	ldw	r4,28(r2)
 4038dd0:	e0bffc17 	ldw	r2,-16(fp)
 4038dd4:	11400617 	ldw	r5,24(r2)
 4038dd8:	403da040 	call	403da04 <lookup_mcast>
 4038ddc:	e0bff915 	stw	r2,-28(fp)
      if ((inm != NULL) &&
 4038de0:	e0bff917 	ldw	r2,-28(fp)
 4038de4:	1005003a 	cmpeq	r2,r2,zero
 4038de8:	10001f1e 	bne	r2,zero,4038e68 <ip_write_internal+0x2bc>
 4038dec:	e0bffc17 	ldw	r2,-16(fp)
 4038df0:	10800b17 	ldw	r2,44(r2)
 4038df4:	1005003a 	cmpeq	r2,r2,zero
 4038df8:	1000061e 	bne	r2,zero,4038e14 <ip_write_internal+0x268>
 4038dfc:	e0bffc17 	ldw	r2,-16(fp)
 4038e00:	10800b17 	ldw	r2,44(r2)
 4038e04:	10800143 	ldbu	r2,5(r2)
 4038e08:	10803fcc 	andi	r2,r2,255
 4038e0c:	1005003a 	cmpeq	r2,r2,zero
 4038e10:	1000151e 	bne	r2,zero,4038e68 <ip_write_internal+0x2bc>
          ((p->imo == NULL) || p->imo->imo_multicast_loop)) 
      {
         p->type = IPTP;
 4038e14:	e0fffc17 	ldw	r3,-16(fp)
 4038e18:	00800204 	movi	r2,8
 4038e1c:	1880080d 	sth	r2,32(r3)
         pkt2 = ip_copypkt(p);
 4038e20:	e13ffc17 	ldw	r4,-16(fp)
 4038e24:	403aa800 	call	403aa80 <ip_copypkt>
 4038e28:	e0bffa15 	stw	r2,-24(fp)
         if (pkt2)
 4038e2c:	e0bffa17 	ldw	r2,-24(fp)
 4038e30:	1005003a 	cmpeq	r2,r2,zero
 4038e34:	10000c1e 	bne	r2,zero,4038e68 <ip_write_internal+0x2bc>
         {
            LOCK_NET_RESOURCE(RXQ_RESID);
 4038e38:	01000044 	movi	r4,1
 4038e3c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            putq(&rcvdq, (q_elt)pkt2);
 4038e40:	e17ffa17 	ldw	r5,-24(fp)
 4038e44:	010101b4 	movhi	r4,1030
 4038e48:	21214304 	addi	r4,r4,-31476
 4038e4c:	40255440 	call	4025544 <putq>
            UNLOCK_NET_RESOURCE(RXQ_RESID);
 4038e50:	01000044 	movi	r4,1
 4038e54:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            SignalPktDemux();
 4038e58:	00810174 	movhi	r2,1029
 4038e5c:	1081e704 	addi	r2,r2,1948
 4038e60:	11000017 	ldw	r4,0(r2)
 4038e64:	4012ae80 	call	4012ae8 <OSSemPost>
       * Also, multicasts addressed to the loopback interface
       * are not sent -- a copy will already have been looped
       * back above if this host actually belongs to the
       * destination group on the loopback interface.
       */
      pip = (struct ip *)(p->nb_prot);
 4038e68:	e0bffc17 	ldw	r2,-16(fp)
 4038e6c:	10800317 	ldw	r2,12(r2)
 4038e70:	e0bff715 	stw	r2,-36(fp)
      if ((pip->ip_time == 0) || 
 4038e74:	e0bff717 	ldw	r2,-36(fp)
 4038e78:	10800203 	ldbu	r2,8(r2)
 4038e7c:	10803fcc 	andi	r2,r2,255
 4038e80:	1005003a 	cmpeq	r2,r2,zero
 4038e84:	10000b1e 	bne	r2,zero,4038eb4 <ip_write_internal+0x308>
 4038e88:	e0bffc17 	ldw	r2,-16(fp)
 4038e8c:	10800717 	ldw	r2,28(r2)
 4038e90:	10803fcc 	andi	r2,r2,255
 4038e94:	10801fe0 	cmpeqi	r2,r2,127
 4038e98:	1000061e 	bne	r2,zero,4038eb4 <ip_write_internal+0x308>
 4038e9c:	e0bffc17 	ldw	r2,-16(fp)
 4038ea0:	10c00717 	ldw	r3,28(r2)
 4038ea4:	e0bffc17 	ldw	r2,-16(fp)
 4038ea8:	10800617 	ldw	r2,24(r2)
 4038eac:	10800a17 	ldw	r2,40(r2)
 4038eb0:	1880081e 	bne	r3,r2,4038ed4 <ip_write_internal+0x328>
          ((p->fhost & htonl(0xFF000000)) == IPLBA) || 
          (p->fhost == p->net->n_ipaddr))
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4038eb4:	01000084 	movi	r4,2
 4038eb8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 4038ebc:	e13ffc17 	ldw	r4,-16(fp)
 4038ec0:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4038ec4:	01000084 	movi	r4,2
 4038ec8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return(SUCCESS);
 4038ecc:	e03ffd15 	stw	zero,-12(fp)
 4038ed0:	00011006 	br	4039314 <ip_write_internal+0x768>
      }

      firsthop = p->fhost;
 4038ed4:	e0bffc17 	ldw	r2,-16(fp)
 4038ed8:	10800717 	ldw	r2,28(r2)
 4038edc:	e0bffb15 	stw	r2,-20(fp)

      goto sendit;
 4038ee0:	00004106 	br	4038fe8 <ip_write_internal+0x43c>
   }

#endif /* IP_MULTICAST */

   /* if this is a broadcast packet, use the caller-selected network */
   if (p->fhost == 0xFFFFFFFF)
 4038ee4:	e0bffc17 	ldw	r2,-16(fp)
 4038ee8:	10800717 	ldw	r2,28(r2)
 4038eec:	10bfffd8 	cmpnei	r2,r2,-1
 4038ef0:	1000041e 	bne	r2,zero,4038f04 <ip_write_internal+0x358>
   {
      firsthop = p->fhost;
 4038ef4:	e0bffc17 	ldw	r2,-16(fp)
 4038ef8:	10800717 	ldw	r2,28(r2)
 4038efc:	e0bffb15 	stw	r2,-20(fp)
 4038f00:	00003906 	br	4038fe8 <ip_write_internal+0x43c>
   }
   else
   {
      p->net = iproute(p->fhost, &firsthop);
 4038f04:	e0bffc17 	ldw	r2,-16(fp)
 4038f08:	11000717 	ldw	r4,28(r2)
 4038f0c:	e17ffb04 	addi	r5,fp,-20
 4038f10:	403a8140 	call	403a814 <iproute>
 4038f14:	1007883a 	mov	r3,r2
 4038f18:	e0bffc17 	ldw	r2,-16(fp)
 4038f1c:	10c00615 	stw	r3,24(r2)
      if (p->net == NULL)
 4038f20:	e0bffc17 	ldw	r2,-16(fp)
 4038f24:	10800617 	ldw	r2,24(r2)
 4038f28:	1004c03a 	cmpne	r2,r2,zero
 4038f2c:	10002e1e 	bne	r2,zero,4038fe8 <ip_write_internal+0x43c>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (IPTRACE|PROTERR))
 4038f30:	00810174 	movhi	r2,1029
 4038f34:	1081bf04 	addi	r2,r2,1788
 4038f38:	10800017 	ldw	r2,0(r2)
 4038f3c:	1080840c 	andi	r2,r2,528
 4038f40:	1005003a 	cmpeq	r2,r2,zero
 4038f44:	1000181e 	bne	r2,zero,4038fa8 <ip_write_internal+0x3fc>
         {
            dprintf("ip_write_internal: pkt:%p len%u to %u.%u.%u.%u, can't route\n",
 4038f48:	e0bffc17 	ldw	r2,-16(fp)
 4038f4c:	11800417 	ldw	r6,16(r2)
 4038f50:	e0bffc17 	ldw	r2,-16(fp)
 4038f54:	10800717 	ldw	r2,28(r2)
 4038f58:	11c03fcc 	andi	r7,r2,255
 4038f5c:	e0bffc17 	ldw	r2,-16(fp)
 4038f60:	10800717 	ldw	r2,28(r2)
 4038f64:	1004d23a 	srli	r2,r2,8
 4038f68:	11003fcc 	andi	r4,r2,255
 4038f6c:	e0bffc17 	ldw	r2,-16(fp)
 4038f70:	10800717 	ldw	r2,28(r2)
 4038f74:	1004d43a 	srli	r2,r2,16
 4038f78:	10c03fcc 	andi	r3,r2,255
 4038f7c:	e0bffc17 	ldw	r2,-16(fp)
 4038f80:	10800717 	ldw	r2,28(r2)
 4038f84:	1004d63a 	srli	r2,r2,24
 4038f88:	d9000015 	stw	r4,0(sp)
 4038f8c:	d8c00115 	stw	r3,4(sp)
 4038f90:	d8800215 	stw	r2,8(sp)
 4038f94:	01010174 	movhi	r4,1029
 4038f98:	212f4804 	addi	r4,r4,-17120
 4038f9c:	e17ffc17 	ldw	r5,-16(fp)
 4038fa0:	400207c0 	call	400207c <printf>
                    p, p->nb_plen, PUSH_IPADDR(p->fhost));
            dtrap();
 4038fa4:	4025bb40 	call	4025bb4 <dtrap>
         }
#endif   /* NPDEBUG */
         ip_mib.ipOutNoRoutes++;
 4038fa8:	008101b4 	movhi	r2,1030
 4038fac:	10a44e04 	addi	r2,r2,-28360
 4038fb0:	10800b17 	ldw	r2,44(r2)
 4038fb4:	10c00044 	addi	r3,r2,1
 4038fb8:	008101b4 	movhi	r2,1030
 4038fbc:	10a44e04 	addi	r2,r2,-28360
 4038fc0:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4038fc4:	01000084 	movi	r4,2
 4038fc8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 4038fcc:	e13ffc17 	ldw	r4,-16(fp)
 4038fd0:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4038fd4:	01000084 	movi	r4,2
 4038fd8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NO_ROUTE);
 4038fdc:	00fff7c4 	movi	r3,-33
 4038fe0:	e0fffd15 	stw	r3,-12(fp)
 4038fe4:	0000cb06 	br	4039314 <ip_write_internal+0x768>
#ifdef   IP_MULTICAST
sendit:  /* label used for multicast packets to skip routing logic */
#endif   /* IP_MULTICAST */

#ifdef   NPDEBUG
   if (NDEBUG & IPTRACE)
 4038fe8:	00810174 	movhi	r2,1029
 4038fec:	1081bf04 	addi	r2,r2,1788
 4038ff0:	10800017 	ldw	r2,0(r2)
 4038ff4:	1080800c 	andi	r2,r2,512
 4038ff8:	1005003a 	cmpeq	r2,r2,zero
 4038ffc:	1000231e 	bne	r2,zero,403908c <ip_write_internal+0x4e0>
   {
      dprintf("ip_write: pkt[%u] to %u.%u.%u.%u,", 
 4039000:	e0bffc17 	ldw	r2,-16(fp)
 4039004:	11400417 	ldw	r5,16(r2)
 4039008:	e0bffc17 	ldw	r2,-16(fp)
 403900c:	10800717 	ldw	r2,28(r2)
 4039010:	11803fcc 	andi	r6,r2,255
 4039014:	e0bffc17 	ldw	r2,-16(fp)
 4039018:	10800717 	ldw	r2,28(r2)
 403901c:	1004d23a 	srli	r2,r2,8
 4039020:	11c03fcc 	andi	r7,r2,255
 4039024:	e0bffc17 	ldw	r2,-16(fp)
 4039028:	10800717 	ldw	r2,28(r2)
 403902c:	1004d43a 	srli	r2,r2,16
 4039030:	10c03fcc 	andi	r3,r2,255
 4039034:	e0bffc17 	ldw	r2,-16(fp)
 4039038:	10800717 	ldw	r2,28(r2)
 403903c:	1004d63a 	srli	r2,r2,24
 4039040:	d8c00015 	stw	r3,0(sp)
 4039044:	d8800115 	stw	r2,4(sp)
 4039048:	01010174 	movhi	r4,1029
 403904c:	212f5804 	addi	r4,r4,-17056
 4039050:	400207c0 	call	400207c <printf>
       p->nb_plen, PUSH_IPADDR(p->fhost));
      dprintf(" route %u.%u.%u.%u\n", PUSH_IPADDR(firsthop));
 4039054:	e0bffb17 	ldw	r2,-20(fp)
 4039058:	11403fcc 	andi	r5,r2,255
 403905c:	e0bffb17 	ldw	r2,-20(fp)
 4039060:	1004d23a 	srli	r2,r2,8
 4039064:	11803fcc 	andi	r6,r2,255
 4039068:	e0bffb17 	ldw	r2,-20(fp)
 403906c:	1004d43a 	srli	r2,r2,16
 4039070:	11c03fcc 	andi	r7,r2,255
 4039074:	e0bffb17 	ldw	r2,-20(fp)
 4039078:	1004d63a 	srli	r2,r2,24
 403907c:	d8800015 	stw	r2,0(sp)
 4039080:	01010174 	movhi	r4,1029
 4039084:	212f6104 	addi	r4,r4,-17020
 4039088:	400207c0 	call	400207c <printf>
#endif   /* IPSEC */

   /* If the packet is being sent to the same interface it will be sent
    * from, short-cut things and just put it on the received queue.
    */
   if ((p->net->n_ipaddr == p->fhost) &&
 403908c:	e0bffc17 	ldw	r2,-16(fp)
 4039090:	10800617 	ldw	r2,24(r2)
 4039094:	10c00a17 	ldw	r3,40(r2)
 4039098:	e0bffc17 	ldw	r2,-16(fp)
 403909c:	10800717 	ldw	r2,28(r2)
 40390a0:	18802a1e 	bne	r3,r2,403914c <ip_write_internal+0x5a0>
 40390a4:	e0bffc17 	ldw	r2,-16(fp)
 40390a8:	10800717 	ldw	r2,28(r2)
 40390ac:	10803fcc 	andi	r2,r2,255
 40390b0:	10801fe0 	cmpeqi	r2,r2,127
 40390b4:	1000251e 	bne	r2,zero,403914c <ip_write_internal+0x5a0>
       ((p->fhost & htonl(0xff000000)) != htonl(0x7f000000)))
   {
      if (!(p->net->n_flags & NF_NBPROT))
 40390b8:	e0bffc17 	ldw	r2,-16(fp)
 40390bc:	10800617 	ldw	r2,24(r2)
 40390c0:	10802a17 	ldw	r2,168(r2)
 40390c4:	1080020c 	andi	r2,r2,8
 40390c8:	1004c03a 	cmpne	r2,r2,zero
 40390cc:	10000a1e 	bne	r2,zero,40390f8 <ip_write_internal+0x54c>
          * IP or ARP protocol header) and nb_type to the protocol
          * type, and set the NF_NBPROT flag in its interfaces'
          * n_flags fields.
          */
#ifdef NPDEBUG
         dtrap();
 40390d0:	4025bb40 	call	4025bb4 <dtrap>
#endif
         LOCK_NET_RESOURCE(FREEQ_RESID);
 40390d4:	01000084 	movi	r4,2
 40390d8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 40390dc:	e13ffc17 	ldw	r4,-16(fp)
 40390e0:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40390e4:	01000084 	movi	r4,2
 40390e8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_LOGIC;
 40390ec:	00bffd44 	movi	r2,-11
 40390f0:	e0bffd15 	stw	r2,-12(fp)
 40390f4:	00008706 	br	4039314 <ip_write_internal+0x768>
      }
      p->type = IPTP;
 40390f8:	e0fffc17 	ldw	r3,-16(fp)
 40390fc:	00800204 	movi	r2,8
 4039100:	1880080d 	sth	r2,32(r3)
      UNLOCK_NET_RESOURCE(NET_RESID);
 4039104:	0009883a 	mov	r4,zero
 4039108:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(RXQ_RESID);
 403910c:	01000044 	movi	r4,1
 4039110:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      putq(&rcvdq, (q_elt)p);
 4039114:	e17ffc17 	ldw	r5,-16(fp)
 4039118:	010101b4 	movhi	r4,1030
 403911c:	21214304 	addi	r4,r4,-31476
 4039120:	40255440 	call	4025544 <putq>
      UNLOCK_NET_RESOURCE(RXQ_RESID);
 4039124:	01000044 	movi	r4,1
 4039128:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      LOCK_NET_RESOURCE(NET_RESID);
 403912c:	0009883a 	mov	r4,zero
 4039130:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);

      SignalPktDemux();
 4039134:	00810174 	movhi	r2,1029
 4039138:	1081e704 	addi	r2,r2,1948
 403913c:	11000017 	ldw	r4,0(r2)
 4039140:	4012ae80 	call	4012ae8 <OSSemPost>

      return SUCCESS;
 4039144:	e03ffd15 	stw	zero,-12(fp)
 4039148:	00007206 	br	4039314 <ip_write_internal+0x768>
   }

   /* determine if the buffer that needs to be transmitted is interrupt-safe */
   intrsafe_buf = ((p->flags & PKF_INTRUNSAFE) ? 0 : 1);
 403914c:	e0bffc17 	ldw	r2,-16(fp)
 4039150:	10800a17 	ldw	r2,40(r2)
 4039154:	1080040c 	andi	r2,r2,16
 4039158:	1005003a 	cmpeq	r2,r2,zero
 403915c:	e0bff605 	stb	r2,-40(fp)
   /* obtain the length of the largest interrupt-safe buffer that can be 
    * allocated via pk_alloc () */
   maxbuflen = pk_get_max_intrsafe_buf_len ();
 4039160:	40253b00 	call	40253b0 <pk_get_max_intrsafe_buf_len>
 4039164:	e0bff315 	stw	r2,-52(fp)
    * the original buffer is interrupt-safe, we just need to consider the
    * MTU of the egress interface.  If the original buffer is interrupt-
    * unsafe, we compute the MIN of the largest interrupt-safe buffer that
    * we can use and the MTU of the egress interface (since we must satisfy
    * both constraints) */
   if (!intrsafe_buf)
 4039168:	e0bff603 	ldbu	r2,-40(fp)
 403916c:	1004c03a 	cmpne	r2,r2,zero
 4039170:	10000e1e 	bne	r2,zero,40391ac <ip_write_internal+0x600>
       limit = MIN(maxbuflen,p->net->n_mtu);
 4039174:	e0bffc17 	ldw	r2,-16(fp)
 4039178:	10800617 	ldw	r2,24(r2)
 403917c:	10800917 	ldw	r2,36(r2)
 4039180:	e0fff317 	ldw	r3,-52(fp)
 4039184:	e0ffff15 	stw	r3,-4(fp)
 4039188:	e0bffe15 	stw	r2,-8(fp)
 403918c:	e0bfff17 	ldw	r2,-4(fp)
 4039190:	e0fffe17 	ldw	r3,-8(fp)
 4039194:	10c0022e 	bgeu	r2,r3,40391a0 <ip_write_internal+0x5f4>
 4039198:	e0bfff17 	ldw	r2,-4(fp)
 403919c:	e0bffe15 	stw	r2,-8(fp)
 40391a0:	e0fffe17 	ldw	r3,-8(fp)
 40391a4:	e0fff515 	stw	r3,-44(fp)
 40391a8:	00000406 	br	40391bc <ip_write_internal+0x610>
   else
       limit = p->net->n_mtu;
 40391ac:	e0bffc17 	ldw	r2,-16(fp)
 40391b0:	10800617 	ldw	r2,24(r2)
 40391b4:	10800917 	ldw	r2,36(r2)
 40391b8:	e0bff515 	stw	r2,-44(fp)

   if ((p->nb_plen + p->net->n_lnh) > limit)
 40391bc:	e0bffc17 	ldw	r2,-16(fp)
 40391c0:	10c00417 	ldw	r3,16(r2)
 40391c4:	e0bffc17 	ldw	r2,-16(fp)
 40391c8:	10800617 	ldw	r2,24(r2)
 40391cc:	10800817 	ldw	r2,32(r2)
 40391d0:	1887883a 	add	r3,r3,r2
 40391d4:	e0bff517 	ldw	r2,-44(fp)
 40391d8:	10c0072e 	bgeu	r2,r3,40391f8 <ip_write_internal+0x64c>
   {
#ifdef IP_FRAGMENTS
      int err;
      err = ip_fragment(p, firsthop);
 40391dc:	e17ffb17 	ldw	r5,-20(fp)
 40391e0:	e13ffc17 	ldw	r4,-16(fp)
 40391e4:	4039e840 	call	4039e84 <ip_fragment>
 40391e8:	e0bff215 	stw	r2,-56(fp)
      IN_PROFILER(PF_IP, PF_EXIT);
      return(err);
 40391ec:	e0bff217 	ldw	r2,-56(fp)
 40391f0:	e0bffd15 	stw	r2,-12(fp)
 40391f4:	00004706 	br	4039314 <ip_write_internal+0x768>
   }
   else
   {
      /* fragmentation is not required; check to see if we need to copy out of
       * an interrupt-unsafe buffer */ 
      if (!intrsafe_buf)
 40391f8:	e0bff603 	ldbu	r2,-40(fp)
 40391fc:	1004c03a 	cmpne	r2,r2,zero
 4039200:	1000401e 	bne	r2,zero,4039304 <ip_write_internal+0x758>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4039204:	01000084 	movi	r4,2
 4039208:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         newpkt = pk_alloc(p->nb_plen + p->net->n_lnh);
 403920c:	e0bffc17 	ldw	r2,-16(fp)
 4039210:	10c00417 	ldw	r3,16(r2)
 4039214:	e0bffc17 	ldw	r2,-16(fp)
 4039218:	10800617 	ldw	r2,24(r2)
 403921c:	10800817 	ldw	r2,32(r2)
 4039220:	1889883a 	add	r4,r3,r2
 4039224:	4024f700 	call	4024f70 <pk_alloc>
 4039228:	e0bff415 	stw	r2,-48(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403922c:	01000084 	movi	r4,2
 4039230:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         if (newpkt == 0)
 4039234:	e0bff417 	ldw	r2,-48(fp)
 4039238:	1004c03a 	cmpne	r2,r2,zero
 403923c:	1000091e 	bne	r2,zero,4039264 <ip_write_internal+0x6b8>
         {
            /* can't allocate interrupt-safe buffer, so free the packet that 
             * we are working with */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4039240:	01000084 	movi	r4,2
 4039244:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(p);
 4039248:	e13ffc17 	ldw	r4,-16(fp)
 403924c:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4039250:	01000084 	movi	r4,2
 4039254:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NOBUFFER;
 4039258:	00fffac4 	movi	r3,-21
 403925c:	e0fffd15 	stw	r3,-12(fp)
 4039260:	00002c06 	br	4039314 <ip_write_internal+0x768>
         }
         else
         {
            /* copy from interrupt-unsafe buffer into interrupt-safe buffer */
            newpkt->nb_prot = newpkt->nb_buff + p->net->n_lnh;
 4039264:	e0bff417 	ldw	r2,-48(fp)
 4039268:	10c00117 	ldw	r3,4(r2)
 403926c:	e0bffc17 	ldw	r2,-16(fp)
 4039270:	10800617 	ldw	r2,24(r2)
 4039274:	10800817 	ldw	r2,32(r2)
 4039278:	1887883a 	add	r3,r3,r2
 403927c:	e0bff417 	ldw	r2,-48(fp)
 4039280:	10c00315 	stw	r3,12(r2)
            MEMCPY(newpkt->nb_prot, p->nb_prot, p->nb_plen);
 4039284:	e0bff417 	ldw	r2,-48(fp)
 4039288:	10c00317 	ldw	r3,12(r2)
 403928c:	e0bffc17 	ldw	r2,-16(fp)
 4039290:	11400317 	ldw	r5,12(r2)
 4039294:	e0bffc17 	ldw	r2,-16(fp)
 4039298:	10800417 	ldw	r2,16(r2)
 403929c:	1809883a 	mov	r4,r3
 40392a0:	100d883a 	mov	r6,r2
 40392a4:	4001de40 	call	4001de4 <memcpy>
            /* setup various fields in the newly allocated PACKET structure */
            newpkt->nb_plen = p->nb_plen;
 40392a8:	e0bffc17 	ldw	r2,-16(fp)
 40392ac:	10c00417 	ldw	r3,16(r2)
 40392b0:	e0bff417 	ldw	r2,-48(fp)
 40392b4:	10c00415 	stw	r3,16(r2)
            newpkt->net = p->net;
 40392b8:	e0bffc17 	ldw	r2,-16(fp)
 40392bc:	10c00617 	ldw	r3,24(r2)
 40392c0:	e0bff417 	ldw	r2,-48(fp)
 40392c4:	10c00615 	stw	r3,24(r2)
            newpkt->fhost = p->fhost;
 40392c8:	e0bffc17 	ldw	r2,-16(fp)
 40392cc:	10c00717 	ldw	r3,28(r2)
 40392d0:	e0bff417 	ldw	r2,-48(fp)
 40392d4:	10c00715 	stw	r3,28(r2)
            /* free the original packet since it is no longer needed */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 40392d8:	01000084 	movi	r4,2
 40392dc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(p);
 40392e0:	e13ffc17 	ldw	r4,-16(fp)
 40392e4:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40392e8:	01000084 	movi	r4,2
 40392ec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            /* send packet to MAC layer. This will try to resolve MAC layer addressing 
             * and send packet. ip2mac() can return SUCCESS, PENDING, or error codes. 
             */
            return(ip2mac(newpkt, firsthop));
 40392f0:	e17ffb17 	ldw	r5,-20(fp)
 40392f4:	e13ff417 	ldw	r4,-48(fp)
 40392f8:	401e7a00 	call	401e7a0 <ip2mac>
 40392fc:	e0bffd15 	stw	r2,-12(fp)
 4039300:	00000406 	br	4039314 <ip_write_internal+0x768>
      else
      {
         /* since the packet is in an interrupt-safe buffer, it can be passed to 
          * ip2mac () without any additional work. */
         IN_PROFILER(PF_IP, PF_EXIT);
         return(ip2mac(p, firsthop));
 4039304:	e17ffb17 	ldw	r5,-20(fp)
 4039308:	e13ffc17 	ldw	r4,-16(fp)
 403930c:	401e7a00 	call	401e7a0 <ip2mac>
 4039310:	e0bffd15 	stw	r2,-12(fp)
 4039314:	e0bffd17 	ldw	r2,-12(fp)
      }
   }
}
 4039318:	e037883a 	mov	sp,fp
 403931c:	dfc00117 	ldw	ra,4(sp)
 4039320:	df000017 	ldw	fp,0(sp)
 4039324:	dec00204 	addi	sp,sp,8
 4039328:	f800283a 	ret

0403932c <ip_write>:

int
ip_write(
   u_char   prot,
   PACKET   p)
{
 403932c:	defff904 	addi	sp,sp,-28
 4039330:	dfc00615 	stw	ra,24(sp)
 4039334:	df000515 	stw	fp,20(sp)
 4039338:	df000504 	addi	fp,sp,20
 403933c:	e17fff15 	stw	r5,-4(fp)
 4039340:	e13ffe05 	stb	r4,-8(fp)
   u_char ttl;
   struct ip_socopts *sopts;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4039344:	008101b4 	movhi	r2,1030
 4039348:	10a44e04 	addi	r2,r2,-28360
 403934c:	10800917 	ldw	r2,36(r2)
 4039350:	10c00044 	addi	r3,r2,1
 4039354:	008101b4 	movhi	r2,1030
 4039358:	10a44e04 	addi	r2,r2,-28360
 403935c:	10c00915 	stw	r3,36(r2)

   /* make room for IP header, and form a pointer to it (pip) */
   p->nb_prot -= sizeof(struct ip);
 4039360:	e0bfff17 	ldw	r2,-4(fp)
 4039364:	10800317 	ldw	r2,12(r2)
 4039368:	10fffb04 	addi	r3,r2,-20
 403936c:	e0bfff17 	ldw	r2,-4(fp)
 4039370:	10c00315 	stw	r3,12(r2)
   p->nb_plen += sizeof(struct ip);
 4039374:	e0bfff17 	ldw	r2,-4(fp)
 4039378:	10800417 	ldw	r2,16(r2)
 403937c:	10c00504 	addi	r3,r2,20
 4039380:	e0bfff17 	ldw	r2,-4(fp)
 4039384:	10c00415 	stw	r3,16(r2)
   pip = (struct ip*)(p->nb_prot);
 4039388:	e0bfff17 	ldw	r2,-4(fp)
 403938c:	10800317 	ldw	r2,12(r2)
 4039390:	e0bffd15 	stw	r2,-12(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = 0x45;       /* 2 nibbles; VER:4, IHL:5. */
 4039394:	e0fffd17 	ldw	r3,-12(fp)
 4039398:	00801144 	movi	r2,69
 403939c:	18800005 	stb	r2,0(r3)
   pip->ip_flgs_foff = 0;        /* clear fragmentation info field */
 40393a0:	e0bffd17 	ldw	r2,-12(fp)
 40393a4:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
 40393a8:	d0a04d17 	ldw	r2,-32460(gp)
 40393ac:	10bfffcc 	andi	r2,r2,65535
 40393b0:	1004d23a 	srli	r2,r2,8
 40393b4:	10803fcc 	andi	r2,r2,255
 40393b8:	1009883a 	mov	r4,r2
 40393bc:	d0a04d17 	ldw	r2,-32460(gp)
 40393c0:	10bfffcc 	andi	r2,r2,65535
 40393c4:	1004923a 	slli	r2,r2,8
 40393c8:	1007883a 	mov	r3,r2
 40393cc:	00bfc004 	movi	r2,-256
 40393d0:	1884703a 	and	r2,r3,r2
 40393d4:	2084b03a 	or	r2,r4,r2
 40393d8:	1007883a 	mov	r3,r2
 40393dc:	e0bffd17 	ldw	r2,-12(fp)
 40393e0:	10c0010d 	sth	r3,4(r2)
   uid++;
 40393e4:	d0a04d17 	ldw	r2,-32460(gp)
 40393e8:	10800044 	addi	r2,r2,1
 40393ec:	d0a04d15 	stw	r2,-32460(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
 40393f0:	e0bfff17 	ldw	r2,-4(fp)
 40393f4:	10800417 	ldw	r2,16(r2)
 40393f8:	10bfffcc 	andi	r2,r2,65535
 40393fc:	1004d23a 	srli	r2,r2,8
 4039400:	10803fcc 	andi	r2,r2,255
 4039404:	1009883a 	mov	r4,r2
 4039408:	e0bfff17 	ldw	r2,-4(fp)
 403940c:	10800417 	ldw	r2,16(r2)
 4039410:	10bfffcc 	andi	r2,r2,65535
 4039414:	1004923a 	slli	r2,r2,8
 4039418:	1007883a 	mov	r3,r2
 403941c:	00bfc004 	movi	r2,-256
 4039420:	1884703a 	and	r2,r3,r2
 4039424:	2084b03a 	or	r2,r4,r2
 4039428:	1007883a 	mov	r3,r2
 403942c:	e0bffd17 	ldw	r2,-12(fp)
 4039430:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
 4039434:	e0fffd17 	ldw	r3,-12(fp)
 4039438:	e0bffe03 	ldbu	r2,-8(fp)
 403943c:	18800245 	stb	r2,9(r3)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 4039440:	e0bffd17 	ldw	r2,-12(fp)
 4039444:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
 4039448:	00801004 	movi	r2,64
 403944c:	e0bffc05 	stb	r2,-16(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4039450:	e0bfff17 	ldw	r2,-4(fp)
 4039454:	10800717 	ldw	r2,28(r2)
 4039458:	1004d63a 	srli	r2,r2,24
 403945c:	10c03fcc 	andi	r3,r2,255
 4039460:	e0bfff17 	ldw	r2,-4(fp)
 4039464:	10800717 	ldw	r2,28(r2)
 4039468:	1004d23a 	srli	r2,r2,8
 403946c:	10bfc00c 	andi	r2,r2,65280
 4039470:	1886b03a 	or	r3,r3,r2
 4039474:	e0bfff17 	ldw	r2,-4(fp)
 4039478:	10800717 	ldw	r2,28(r2)
 403947c:	10bfc00c 	andi	r2,r2,65280
 4039480:	1004923a 	slli	r2,r2,8
 4039484:	1886b03a 	or	r3,r3,r2
 4039488:	e0bfff17 	ldw	r2,-4(fp)
 403948c:	10800717 	ldw	r2,28(r2)
 4039490:	10803fcc 	andi	r2,r2,255
 4039494:	1004963a 	slli	r2,r2,24
 4039498:	1884b03a 	or	r2,r3,r2
 403949c:	10fc002c 	andhi	r3,r2,61440
 40394a0:	00b80034 	movhi	r2,57344
 40394a4:	1880081e 	bne	r3,r2,40394c8 <ip_write+0x19c>
 40394a8:	e0bfff17 	ldw	r2,-4(fp)
 40394ac:	10800b17 	ldw	r2,44(r2)
 40394b0:	1005003a 	cmpeq	r2,r2,zero
 40394b4:	1000041e 	bne	r2,zero,40394c8 <ip_write+0x19c>
      ttl = p->imo->imo_multicast_ttl;
 40394b8:	e0bfff17 	ldw	r2,-4(fp)
 40394bc:	10800b17 	ldw	r2,44(r2)
 40394c0:	10800103 	ldbu	r2,4(r2)
 40394c4:	e0bffc05 	stb	r2,-16(fp)
#endif /* IP_MULTICAST */

   /* have IP_TOS or IP_TTL been set? */
   if ((sopts = p->soxopts))
 40394c8:	e0bfff17 	ldw	r2,-4(fp)
 40394cc:	10800c17 	ldw	r2,48(r2)
 40394d0:	e0bffb15 	stw	r2,-20(fp)
 40394d4:	e0bffb17 	ldw	r2,-20(fp)
 40394d8:	1005003a 	cmpeq	r2,r2,zero
 40394dc:	1000121e 	bne	r2,zero,4039528 <ip_write+0x1fc>
   {
	  /* yup */
	  if (sopts->ip_ttl)
 40394e0:	e0bffb17 	ldw	r2,-20(fp)
 40394e4:	10800043 	ldbu	r2,1(r2)
 40394e8:	10803fcc 	andi	r2,r2,255
 40394ec:	1005003a 	cmpeq	r2,r2,zero
 40394f0:	1000051e 	bne	r2,zero,4039508 <ip_write+0x1dc>
         pip->ip_time = sopts->ip_ttl;
 40394f4:	e0bffb17 	ldw	r2,-20(fp)
 40394f8:	10c00043 	ldbu	r3,1(r2)
 40394fc:	e0bffd17 	ldw	r2,-12(fp)
 4039500:	10c00205 	stb	r3,8(r2)
 4039504:	00000306 	br	4039514 <ip_write+0x1e8>
	  else
         pip->ip_time = ttl;
 4039508:	e0fffd17 	ldw	r3,-12(fp)
 403950c:	e0bffc03 	ldbu	r2,-16(fp)
 4039510:	18800205 	stb	r2,8(r3)
      pip->ip_tos = sopts->ip_tos;
 4039514:	e0bffb17 	ldw	r2,-20(fp)
 4039518:	10c00003 	ldbu	r3,0(r2)
 403951c:	e0bffd17 	ldw	r2,-12(fp)
 4039520:	10c00045 	stb	r3,1(r2)
 4039524:	00000506 	br	403953c <ip_write+0x210>
   }
   else
   {
	  /* nope */
      pip->ip_time = ttl;
 4039528:	e0bffd17 	ldw	r2,-12(fp)
 403952c:	e0fffc03 	ldbu	r3,-16(fp)
 4039530:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 4039534:	e0bffd17 	ldw	r2,-12(fp)
 4039538:	10000045 	stb	zero,1(r2)
   }
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum(pip, 10);
 403953c:	e13ffd17 	ldw	r4,-12(fp)
 4039540:	01400284 	movi	r5,10
 4039544:	4020a000 	call	4020a00 <cksum>
 4039548:	0084303a 	nor	r2,zero,r2
 403954c:	1007883a 	mov	r3,r2
 4039550:	e0bffd17 	ldw	r2,-12(fp)
 4039554:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
 4039558:	e13fff17 	ldw	r4,-4(fp)
 403955c:	4038bac0 	call	4038bac <ip_write_internal>
}
 4039560:	e037883a 	mov	sp,fp
 4039564:	dfc00117 	ldw	ra,4(sp)
 4039568:	df000017 	ldw	fp,0(sp)
 403956c:	dec00204 	addi	sp,sp,8
 4039570:	f800283a 	ret

04039574 <ip_write2>:
 * OUTPUT: This function returns the return code from 
 *         ip_write_internal ().
 */

int ip_write2 (u_char prot, PACKET p, u_char * optp)
{
 4039574:	defff504 	addi	sp,sp,-44
 4039578:	dfc00a15 	stw	ra,40(sp)
 403957c:	df000915 	stw	fp,36(sp)
 4039580:	df000904 	addi	fp,sp,36
 4039584:	e17ffe15 	stw	r5,-8(fp)
 4039588:	e1bfff15 	stw	r6,-4(fp)
 403958c:	e13ffd05 	stb	r4,-12(fp)
   struct ip * pip;
   u_char ttl;
   struct ip_socopts * sopts;
   u_char iphlen = sizeof (struct ip);
 4039590:	00800504 	movi	r2,20
 4039594:	e0bff905 	stb	r2,-28(fp)
   u_char iphlen_pad;
   u_char i;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4039598:	008101b4 	movhi	r2,1030
 403959c:	10a44e04 	addi	r2,r2,-28360
 40395a0:	10800917 	ldw	r2,36(r2)
 40395a4:	10c00044 	addi	r3,r2,1
 40395a8:	008101b4 	movhi	r2,1030
 40395ac:	10a44e04 	addi	r2,r2,-28360
 40395b0:	10c00915 	stw	r3,36(r2)

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 40395b4:	e0bfff17 	ldw	r2,-4(fp)
 40395b8:	e0bff815 	stw	r2,-32(fp)
 40395bc:	00000c06 	br	40395f0 <ip_write2+0x7c>
   {
      /* account for options, if any (caller has already created
       * adequate space for the requested option) */
      switch (*tmpp)
 40395c0:	e0bff817 	ldw	r2,-32(fp)
 40395c4:	10800003 	ldbu	r2,0(r2)
 40395c8:	10803fcc 	andi	r2,r2,255
 40395cc:	10800520 	cmpeqi	r2,r2,20
 40395d0:	1000011e 	bne	r2,zero,40395d8 <ip_write2+0x64>
 40395d4:	00000306 	br	40395e4 <ip_write2+0x70>
      {
         case IP_RTR_ALERT_OPT:
            iphlen += IP_RTR_ALERT_OPT_SIZE;
 40395d8:	e0bff903 	ldbu	r2,-28(fp)
 40395dc:	10800104 	addi	r2,r2,4
 40395e0:	e0bff905 	stb	r2,-28(fp)
   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;

   /* compute the total length of the options requested */
   for (tmpp = optp; (*tmpp) != EOL_OPT; ++tmpp)
 40395e4:	e0bff817 	ldw	r2,-32(fp)
 40395e8:	10800044 	addi	r2,r2,1
 40395ec:	e0bff815 	stw	r2,-32(fp)
 40395f0:	e0bff817 	ldw	r2,-32(fp)
 40395f4:	10800003 	ldbu	r2,0(r2)
 40395f8:	10803fcc 	andi	r2,r2,255
 40395fc:	1004c03a 	cmpne	r2,r2,zero
 4039600:	103fef1e 	bne	r2,zero,40395c0 <ip_write2+0x4c>
   }

   /* compute the amount of padding required, if any (to ensure
    * that the IP header (including options) ends on a dword
    * (four byte) boundary */
   if (iphlen & 0x3)
 4039604:	e0bff903 	ldbu	r2,-28(fp)
 4039608:	108000cc 	andi	r2,r2,3
 403960c:	1005003a 	cmpeq	r2,r2,zero
 4039610:	1000071e 	bne	r2,zero,4039630 <ip_write2+0xbc>
      iphlen_pad = 4 - (iphlen & 0x3);
 4039614:	e0bff903 	ldbu	r2,-28(fp)
 4039618:	108000cc 	andi	r2,r2,3
 403961c:	1007883a 	mov	r3,r2
 4039620:	00800104 	movi	r2,4
 4039624:	10c5c83a 	sub	r2,r2,r3
 4039628:	e0bff745 	stb	r2,-35(fp)
 403962c:	00000106 	br	4039634 <ip_write2+0xc0>
   else iphlen_pad = 0; /* no header padding required */
 4039630:	e03ff745 	stb	zero,-35(fp)
   /* the packet passed to ip_write2 () has its nb_prot set to
    * point to start of the protocol's (e.g., IGMP) data, and 
    * nb_plen set to the length of that data.  locate start of 
    * the IP header (account for IP options), and form a pointer 
    * to it (pip) */
   p->nb_prot -= (iphlen + iphlen_pad);
 4039634:	e0bffe17 	ldw	r2,-8(fp)
 4039638:	11000317 	ldw	r4,12(r2)
 403963c:	e0fff903 	ldbu	r3,-28(fp)
 4039640:	e0bff743 	ldbu	r2,-35(fp)
 4039644:	1885883a 	add	r2,r3,r2
 4039648:	2087c83a 	sub	r3,r4,r2
 403964c:	e0bffe17 	ldw	r2,-8(fp)
 4039650:	10c00315 	stw	r3,12(r2)
   /* add padding length to the total length of the IP datagram */
   p->nb_plen += (iphlen + iphlen_pad);
 4039654:	e0bffe17 	ldw	r2,-8(fp)
 4039658:	11000417 	ldw	r4,16(r2)
 403965c:	e0fff903 	ldbu	r3,-28(fp)
 4039660:	e0bff743 	ldbu	r2,-35(fp)
 4039664:	1885883a 	add	r2,r3,r2
 4039668:	2087883a 	add	r3,r4,r2
 403966c:	e0bffe17 	ldw	r2,-8(fp)
 4039670:	10c00415 	stw	r3,16(r2)
   pip = (struct ip *) (p->nb_prot);
 4039674:	e0bffe17 	ldw	r2,-8(fp)
 4039678:	10800317 	ldw	r2,12(r2)
 403967c:	e0bffc15 	stw	r2,-16(fp)

   /* build the initial IP header:
    * IP source address (ip_src) and IP destination address (ip_dest)
    * should already have been filled in by upper-layer protocol
    */
   pip->ip_ver_ihl = ((IP_VER << 4) | ((iphlen + iphlen_pad) >> 2));
 4039680:	e0fff903 	ldbu	r3,-28(fp)
 4039684:	e0bff743 	ldbu	r2,-35(fp)
 4039688:	1885883a 	add	r2,r3,r2
 403968c:	1005d0ba 	srai	r2,r2,2
 4039690:	10801014 	ori	r2,r2,64
 4039694:	1007883a 	mov	r3,r2
 4039698:	e0bffc17 	ldw	r2,-16(fp)
 403969c:	10c00005 	stb	r3,0(r2)
   pip->ip_flgs_foff = 0; /* clear fragmentation info field */
 40396a0:	e0bffc17 	ldw	r2,-16(fp)
 40396a4:	1000018d 	sth	zero,6(r2)
   pip->ip_id = htons((unshort)uid);
 40396a8:	d0a04d17 	ldw	r2,-32460(gp)
 40396ac:	10bfffcc 	andi	r2,r2,65535
 40396b0:	1004d23a 	srli	r2,r2,8
 40396b4:	10803fcc 	andi	r2,r2,255
 40396b8:	1009883a 	mov	r4,r2
 40396bc:	d0a04d17 	ldw	r2,-32460(gp)
 40396c0:	10bfffcc 	andi	r2,r2,65535
 40396c4:	1004923a 	slli	r2,r2,8
 40396c8:	1007883a 	mov	r3,r2
 40396cc:	00bfc004 	movi	r2,-256
 40396d0:	1884703a 	and	r2,r3,r2
 40396d4:	2084b03a 	or	r2,r4,r2
 40396d8:	1007883a 	mov	r3,r2
 40396dc:	e0bffc17 	ldw	r2,-16(fp)
 40396e0:	10c0010d 	sth	r3,4(r2)
   uid++;
 40396e4:	d0a04d17 	ldw	r2,-32460(gp)
 40396e8:	10800044 	addi	r2,r2,1
 40396ec:	d0a04d15 	stw	r2,-32460(gp)
   pip->ip_len = htons((unshort)(p->nb_plen));
 40396f0:	e0bffe17 	ldw	r2,-8(fp)
 40396f4:	10800417 	ldw	r2,16(r2)
 40396f8:	10bfffcc 	andi	r2,r2,65535
 40396fc:	1004d23a 	srli	r2,r2,8
 4039700:	10803fcc 	andi	r2,r2,255
 4039704:	1009883a 	mov	r4,r2
 4039708:	e0bffe17 	ldw	r2,-8(fp)
 403970c:	10800417 	ldw	r2,16(r2)
 4039710:	10bfffcc 	andi	r2,r2,65535
 4039714:	1004923a 	slli	r2,r2,8
 4039718:	1007883a 	mov	r3,r2
 403971c:	00bfc004 	movi	r2,-256
 4039720:	1884703a 	and	r2,r3,r2
 4039724:	2084b03a 	or	r2,r4,r2
 4039728:	1007883a 	mov	r3,r2
 403972c:	e0bffc17 	ldw	r2,-16(fp)
 4039730:	10c0008d 	sth	r3,2(r2)
   pip->ip_prot = prot;
 4039734:	e0fffc17 	ldw	r3,-16(fp)
 4039738:	e0bffd03 	ldbu	r2,-12(fp)
 403973c:	18800245 	stb	r2,9(r3)
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 4039740:	e0bffc17 	ldw	r2,-16(fp)
 4039744:	1000028d 	sth	zero,10(r2)
   ttl = IP_TTL;
 4039748:	00801004 	movi	r2,64
 403974c:	e0bffb05 	stb	r2,-20(fp)
#ifdef IP_MULTICAST
   if ((IN_MULTICAST(ntohl(p->fhost))) && (p->imo != NULL))
 4039750:	e0bffe17 	ldw	r2,-8(fp)
 4039754:	10800717 	ldw	r2,28(r2)
 4039758:	1004d63a 	srli	r2,r2,24
 403975c:	10c03fcc 	andi	r3,r2,255
 4039760:	e0bffe17 	ldw	r2,-8(fp)
 4039764:	10800717 	ldw	r2,28(r2)
 4039768:	1004d23a 	srli	r2,r2,8
 403976c:	10bfc00c 	andi	r2,r2,65280
 4039770:	1886b03a 	or	r3,r3,r2
 4039774:	e0bffe17 	ldw	r2,-8(fp)
 4039778:	10800717 	ldw	r2,28(r2)
 403977c:	10bfc00c 	andi	r2,r2,65280
 4039780:	1004923a 	slli	r2,r2,8
 4039784:	1886b03a 	or	r3,r3,r2
 4039788:	e0bffe17 	ldw	r2,-8(fp)
 403978c:	10800717 	ldw	r2,28(r2)
 4039790:	10803fcc 	andi	r2,r2,255
 4039794:	1004963a 	slli	r2,r2,24
 4039798:	1884b03a 	or	r2,r3,r2
 403979c:	10fc002c 	andhi	r3,r2,61440
 40397a0:	00b80034 	movhi	r2,57344
 40397a4:	1880081e 	bne	r3,r2,40397c8 <ip_write2+0x254>
 40397a8:	e0bffe17 	ldw	r2,-8(fp)
 40397ac:	10800b17 	ldw	r2,44(r2)
 40397b0:	1005003a 	cmpeq	r2,r2,zero
 40397b4:	1000041e 	bne	r2,zero,40397c8 <ip_write2+0x254>
      ttl = p->imo->imo_multicast_ttl;
 40397b8:	e0bffe17 	ldw	r2,-8(fp)
 40397bc:	10800b17 	ldw	r2,44(r2)
 40397c0:	10800103 	ldbu	r2,4(r2)
 40397c4:	e0bffb05 	stb	r2,-20(fp)
#endif /* IP_MULTICAST */

   /* have TOS or TTL been set (via socket options)? */
   if ((sopts = p->soxopts))
 40397c8:	e0bffe17 	ldw	r2,-8(fp)
 40397cc:	10800c17 	ldw	r2,48(r2)
 40397d0:	e0bffa15 	stw	r2,-24(fp)
 40397d4:	e0bffa17 	ldw	r2,-24(fp)
 40397d8:	1005003a 	cmpeq	r2,r2,zero
 40397dc:	1000121e 	bne	r2,zero,4039828 <ip_write2+0x2b4>
   {
      if (sopts->ip_ttl)
 40397e0:	e0bffa17 	ldw	r2,-24(fp)
 40397e4:	10800043 	ldbu	r2,1(r2)
 40397e8:	10803fcc 	andi	r2,r2,255
 40397ec:	1005003a 	cmpeq	r2,r2,zero
 40397f0:	1000051e 	bne	r2,zero,4039808 <ip_write2+0x294>
         pip->ip_time = sopts->ip_ttl;
 40397f4:	e0bffa17 	ldw	r2,-24(fp)
 40397f8:	10c00043 	ldbu	r3,1(r2)
 40397fc:	e0bffc17 	ldw	r2,-16(fp)
 4039800:	10c00205 	stb	r3,8(r2)
 4039804:	00000306 	br	4039814 <ip_write2+0x2a0>
      else
         pip->ip_time = ttl;
 4039808:	e0fffc17 	ldw	r3,-16(fp)
 403980c:	e0bffb03 	ldbu	r2,-20(fp)
 4039810:	18800205 	stb	r2,8(r3)
      pip->ip_tos = sopts->ip_tos;
 4039814:	e0bffa17 	ldw	r2,-24(fp)
 4039818:	10c00003 	ldbu	r3,0(r2)
 403981c:	e0bffc17 	ldw	r2,-16(fp)
 4039820:	10c00045 	stb	r3,1(r2)
 4039824:	00000506 	br	403983c <ip_write2+0x2c8>
   }
   else
   {
      pip->ip_time = ttl;
 4039828:	e0bffc17 	ldw	r2,-16(fp)
 403982c:	e0fffb03 	ldbu	r3,-20(fp)
 4039830:	10c00205 	stb	r3,8(r2)
      pip->ip_tos = IP_TOS_DEFVAL;
 4039834:	e0bffc17 	ldw	r2,-16(fp)
 4039838:	10000045 	stb	zero,1(r2)
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 403983c:	e0bffe17 	ldw	r2,-8(fp)
 4039840:	10800317 	ldw	r2,12(r2)
 4039844:	10800504 	addi	r2,r2,20
 4039848:	e0bff815 	stw	r2,-32(fp)
 403984c:	00000f06 	br	403988c <ip_write2+0x318>
   {
      /* caller has already provided adequate space for the requested options */
      switch (*optp)
 4039850:	e0bfff17 	ldw	r2,-4(fp)
 4039854:	10800003 	ldbu	r2,0(r2)
 4039858:	10803fcc 	andi	r2,r2,255
 403985c:	10800520 	cmpeqi	r2,r2,20
 4039860:	1000011e 	bne	r2,zero,4039868 <ip_write2+0x2f4>
 4039864:	00000606 	br	4039880 <ip_write2+0x30c>
      {
         case IP_RTR_ALERT_OPT:
            *((u_long *) tmpp) = htonl (IP_RTR_ALERT_OPT_DATA);
 4039868:	e0fff817 	ldw	r3,-32(fp)
 403986c:	00812504 	movi	r2,1172
 4039870:	18800015 	stw	r2,0(r3)
            /* this option is 4 bytes long */
            tmpp += IP_RTR_ALERT_OPT_SIZE;
 4039874:	e0bff817 	ldw	r2,-32(fp)
 4039878:	10800104 	addi	r2,r2,4
 403987c:	e0bff815 	stw	r2,-32(fp)
      pip->ip_time = ttl;
      pip->ip_tos = IP_TOS_DEFVAL;
   }

   /* point to the start of the IP options, and insert the options */
   for (tmpp = (u_char *)(p->nb_prot + sizeof(struct ip)); *optp != EOL_OPT; ++optp)
 4039880:	e0bfff17 	ldw	r2,-4(fp)
 4039884:	10800044 	addi	r2,r2,1
 4039888:	e0bfff15 	stw	r2,-4(fp)
 403988c:	e0bfff17 	ldw	r2,-4(fp)
 4039890:	10800003 	ldbu	r2,0(r2)
 4039894:	10803fcc 	andi	r2,r2,255
 4039898:	1004c03a 	cmpne	r2,r2,zero
 403989c:	103fec1e 	bne	r2,zero,4039850 <ip_write2+0x2dc>
            break;
      }
   }

   /* add one (or more) one-byte long End of Option options (if required) */
   for (i = 0; i < iphlen_pad; ++i) *(tmpp + i) = 0;
 40398a0:	e03ff705 	stb	zero,-36(fp)
 40398a4:	00000806 	br	40398c8 <ip_write2+0x354>
 40398a8:	e0bff703 	ldbu	r2,-36(fp)
 40398ac:	1007883a 	mov	r3,r2
 40398b0:	e0bff817 	ldw	r2,-32(fp)
 40398b4:	1885883a 	add	r2,r3,r2
 40398b8:	10000005 	stb	zero,0(r2)
 40398bc:	e0bff703 	ldbu	r2,-36(fp)
 40398c0:	10800044 	addi	r2,r2,1
 40398c4:	e0bff705 	stb	r2,-36(fp)
 40398c8:	e0fff703 	ldbu	r3,-36(fp)
 40398cc:	e0bff743 	ldbu	r2,-35(fp)
 40398d0:	18bff536 	bltu	r3,r2,40398a8 <ip_write2+0x334>
   
   /* checksum the IP header */
   pip->ip_chksum = ~cksum (pip, ((iphlen + iphlen_pad)/2));
 40398d4:	e0fff903 	ldbu	r3,-28(fp)
 40398d8:	e0bff743 	ldbu	r2,-35(fp)
 40398dc:	1887883a 	add	r3,r3,r2
 40398e0:	1804d7fa 	srli	r2,r3,31
 40398e4:	10c5883a 	add	r2,r2,r3
 40398e8:	1005d07a 	srai	r2,r2,1
 40398ec:	100b883a 	mov	r5,r2
 40398f0:	e13ffc17 	ldw	r4,-16(fp)
 40398f4:	4020a000 	call	4020a00 <cksum>
 40398f8:	0084303a 	nor	r2,zero,r2
 40398fc:	1007883a 	mov	r3,r2
 4039900:	e0bffc17 	ldw	r2,-16(fp)
 4039904:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal (p));
 4039908:	e13ffe17 	ldw	r4,-8(fp)
 403990c:	4038bac0 	call	4038bac <ip_write_internal>
}
 4039910:	e037883a 	mov	sp,fp
 4039914:	dfc00117 	ldw	ra,4(sp)
 4039918:	df000017 	ldw	fp,0(sp)
 403991c:	dec00204 	addi	sp,sp,8
 4039920:	f800283a 	ret

04039924 <ip_raw_write>:
 * RETURNS: Returns 0 if sent OK, ENP_SEND_PENDING (1) if 
 * waiting for ARP, else negative error code if error detected. 
 */
int
ip_raw_write(PACKET p)
{
 4039924:	defffc04 	addi	sp,sp,-16
 4039928:	dfc00315 	stw	ra,12(sp)
 403992c:	df000215 	stw	fp,8(sp)
 4039930:	df000204 	addi	fp,sp,8
 4039934:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;

   IN_PROFILER(PF_IP, PF_ENTRY);       /* measure time in IP */

   ip_mib.ipOutRequests++;
 4039938:	008101b4 	movhi	r2,1030
 403993c:	10a44e04 	addi	r2,r2,-28360
 4039940:	10800917 	ldw	r2,36(r2)
 4039944:	10c00044 	addi	r3,r2,1
 4039948:	008101b4 	movhi	r2,1030
 403994c:	10a44e04 	addi	r2,r2,-28360
 4039950:	10c00915 	stw	r3,36(r2)

   /* form a pointer to IP header (pip) */
   pip = (struct ip*)(p->nb_prot);
 4039954:	e0bfff17 	ldw	r2,-4(fp)
 4039958:	10800317 	ldw	r2,12(r2)
 403995c:	e0bffe15 	stw	r2,-8(fp)
   
   /* if there's no IP id, give it one */
   if (pip->ip_id == 0)
 4039960:	e0bffe17 	ldw	r2,-8(fp)
 4039964:	1080010b 	ldhu	r2,4(r2)
 4039968:	10bfffcc 	andi	r2,r2,65535
 403996c:	1004c03a 	cmpne	r2,r2,zero
 4039970:	1000121e 	bne	r2,zero,40399bc <ip_raw_write+0x98>
   {
      pip->ip_id = htons((unshort)uid);
 4039974:	d0a04d17 	ldw	r2,-32460(gp)
 4039978:	10bfffcc 	andi	r2,r2,65535
 403997c:	1004d23a 	srli	r2,r2,8
 4039980:	10803fcc 	andi	r2,r2,255
 4039984:	1009883a 	mov	r4,r2
 4039988:	d0a04d17 	ldw	r2,-32460(gp)
 403998c:	10bfffcc 	andi	r2,r2,65535
 4039990:	1004923a 	slli	r2,r2,8
 4039994:	1007883a 	mov	r3,r2
 4039998:	00bfc004 	movi	r2,-256
 403999c:	1884703a 	and	r2,r3,r2
 40399a0:	2084b03a 	or	r2,r4,r2
 40399a4:	1007883a 	mov	r3,r2
 40399a8:	e0bffe17 	ldw	r2,-8(fp)
 40399ac:	10c0010d 	sth	r3,4(r2)
      uid++;
 40399b0:	d0a04d17 	ldw	r2,-32460(gp)
 40399b4:	10800044 	addi	r2,r2,1
 40399b8:	d0a04d15 	stw	r2,-32460(gp)
   }

   /* checksum the IP header */
   pip->ip_chksum = IPXSUM;      /* clear checksum field */
 40399bc:	e0bffe17 	ldw	r2,-8(fp)
 40399c0:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum(pip, 10);
 40399c4:	e13ffe17 	ldw	r4,-8(fp)
 40399c8:	01400284 	movi	r5,10
 40399cc:	4020a000 	call	4020a00 <cksum>
 40399d0:	0084303a 	nor	r2,zero,r2
 40399d4:	1007883a 	mov	r3,r2
 40399d8:	e0bffe17 	ldw	r2,-8(fp)
 40399dc:	10c0028d 	sth	r3,10(r2)

   /* do the actual write */
   return (ip_write_internal(p));
 40399e0:	e13fff17 	ldw	r4,-4(fp)
 40399e4:	4038bac0 	call	4038bac <ip_write_internal>
}
 40399e8:	e037883a 	mov	sp,fp
 40399ec:	dfc00117 	ldw	ra,4(sp)
 40399f0:	df000017 	ldw	fp,0(sp)
 40399f4:	dec00204 	addi	sp,sp,8
 40399f8:	f800283a 	ret

040399fc <ip_fragment_lc>:
 *              invocation of ip2mac () for the last generated fragment
 */

int
ip_fragment_lc(PACKET p, ip_addr firsthop)
{
 40399fc:	deffed04 	addi	sp,sp,-76
 4039a00:	dfc01215 	stw	ra,72(sp)
 4039a04:	df001115 	stw	fp,68(sp)
 4039a08:	df001104 	addi	fp,sp,68
 4039a0c:	e13ffa15 	stw	r4,-24(fp)
 4039a10:	e17ffb15 	stw	r5,-20(fp)
   int      e;
   struct ip * pip;
   int      iphlen;     /* IP header length */
   unshort  tmp_fraginfo   ;

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 4039a14:	008101b4 	movhi	r2,1030
 4039a18:	10a44e04 	addi	r2,r2,-28360
 4039a1c:	10801017 	ldw	r2,64(r2)
 4039a20:	10c00044 	addi	r3,r2,1
 4039a24:	008101b4 	movhi	r2,1030
 4039a28:	10a44e04 	addi	r2,r2,-28360
 4039a2c:	10c01015 	stw	r3,64(r2)
   pip = (struct ip *)(p->nb_prot);          /* get ptr to IP header */
 4039a30:	e0bffa17 	ldw	r2,-24(fp)
 4039a34:	10800317 	ldw	r2,12(r2)
 4039a38:	e0bff115 	stw	r2,-60(fp)
   iphlen = (pip->ip_ver_ihl & 0xf) << 2;    /* and its length */
 4039a3c:	e0bff117 	ldw	r2,-60(fp)
 4039a40:	10800003 	ldbu	r2,0(r2)
 4039a44:	10803fcc 	andi	r2,r2,255
 4039a48:	108003cc 	andi	r2,r2,15
 4039a4c:	1085883a 	add	r2,r2,r2
 4039a50:	1085883a 	add	r2,r2,r2
 4039a54:	e0bff015 	stw	r2,-64(fp)
   left = (int)p->nb_plen - iphlen; /* bytes left to send in datagram */
 4039a58:	e0bffa17 	ldw	r2,-24(fp)
 4039a5c:	10800417 	ldw	r2,16(r2)
 4039a60:	1007883a 	mov	r3,r2
 4039a64:	e0bff017 	ldw	r2,-64(fp)
 4039a68:	1885c83a 	sub	r2,r3,r2
 4039a6c:	e0bff415 	stw	r2,-48(fp)
    * of fragments to get a fragment length that will result
    * in similarly-sized segments (remembering to round this
    * length up to a multiple of 8 because that's how the IP 
    * Fragment Offset field is scaled).
    */
   maxipsize = p->net->n_mtu - (iphlen + p->net->n_lnh + 8);   /* 8 == for rounding up */
 4039a70:	e0bffa17 	ldw	r2,-24(fp)
 4039a74:	10800617 	ldw	r2,24(r2)
 4039a78:	11000917 	ldw	r4,36(r2)
 4039a7c:	e0bffa17 	ldw	r2,-24(fp)
 4039a80:	10800617 	ldw	r2,24(r2)
 4039a84:	10c00817 	ldw	r3,32(r2)
 4039a88:	e0bff017 	ldw	r2,-64(fp)
 4039a8c:	1885883a 	add	r2,r3,r2
 4039a90:	2085c83a 	sub	r2,r4,r2
 4039a94:	10bffe04 	addi	r2,r2,-8
 4039a98:	e0bff815 	stw	r2,-32(fp)
   if (maxipsize < 64)  /* to small to use */
 4039a9c:	e0bff817 	ldw	r2,-32(fp)
 4039aa0:	10801028 	cmpgeui	r2,r2,64
 4039aa4:	1000041e 	bne	r2,zero,4039ab8 <ip_fragment_lc+0xbc>
   {
      dtrap();    /* probably bad programming */
 4039aa8:	4025bb40 	call	4025bb4 <dtrap>
      return ENP_LOGIC;
 4039aac:	00bffd44 	movi	r2,-11
 4039ab0:	e0bffe15 	stw	r2,-8(fp)
 4039ab4:	0000ed06 	br	4039e6c <ip_fragment_lc+0x470>
   }
   numfrags = (p->nb_plen/maxipsize) + 1;    /* number of fragments */
 4039ab8:	e0bffa17 	ldw	r2,-24(fp)
 4039abc:	10c00417 	ldw	r3,16(r2)
 4039ac0:	e0bff817 	ldw	r2,-32(fp)
 4039ac4:	1885203a 	divu	r2,r3,r2
 4039ac8:	10800044 	addi	r2,r2,1
 4039acc:	e0bff715 	stw	r2,-36(fp)
   fragsize = (((p->nb_plen + (numfrags - 1)) / numfrags) + 7) & ~7; 
 4039ad0:	e0bffa17 	ldw	r2,-24(fp)
 4039ad4:	10c00417 	ldw	r3,16(r2)
 4039ad8:	e0bff717 	ldw	r2,-36(fp)
 4039adc:	1885883a 	add	r2,r3,r2
 4039ae0:	10ffffc4 	addi	r3,r2,-1
 4039ae4:	e0bff717 	ldw	r2,-36(fp)
 4039ae8:	1885203a 	divu	r2,r3,r2
 4039aec:	10c001c4 	addi	r3,r2,7
 4039af0:	00bffe04 	movi	r2,-8
 4039af4:	1884703a 	and	r2,r3,r2
 4039af8:	e0bff915 	stw	r2,-28(fp)
   foffset = 0;
 4039afc:	e03ff615 	stw	zero,-40(fp)

   /* Now update from any previous info */
   tmp_fraginfo = ntohs(pip->ip_flgs_foff);     /* get current frag info*/
 4039b00:	e0bff117 	ldw	r2,-60(fp)
 4039b04:	1080018b 	ldhu	r2,6(r2)
 4039b08:	10bfffcc 	andi	r2,r2,65535
 4039b0c:	1004d23a 	srli	r2,r2,8
 4039b10:	10803fcc 	andi	r2,r2,255
 4039b14:	1009883a 	mov	r4,r2
 4039b18:	e0bff117 	ldw	r2,-60(fp)
 4039b1c:	1080018b 	ldhu	r2,6(r2)
 4039b20:	10bfffcc 	andi	r2,r2,65535
 4039b24:	1004923a 	slli	r2,r2,8
 4039b28:	1007883a 	mov	r3,r2
 4039b2c:	00bfc004 	movi	r2,-256
 4039b30:	1884703a 	and	r2,r3,r2
 4039b34:	2084b03a 	or	r2,r4,r2
 4039b38:	e0bfef0d 	sth	r2,-68(fp)
   if ( tmp_fraginfo & (~IP_FLG_MASK) )
 4039b3c:	e0ffef0b 	ldhu	r3,-68(fp)
 4039b40:	00bffff4 	movhi	r2,65535
 4039b44:	1087ffc4 	addi	r2,r2,8191
 4039b48:	1884703a 	and	r2,r3,r2
 4039b4c:	1005003a 	cmpeq	r2,r2,zero
 4039b50:	1000081e 	bne	r2,zero,4039b74 <ip_fragment_lc+0x178>
   {
      /* When fragmenting an already fragmented packet, we need to
         add the initial offset */
      foffset = (tmp_fraginfo & (~IP_FLG_MASK))  ;
 4039b54:	e0ffef0b 	ldhu	r3,-68(fp)
 4039b58:	00bffff4 	movhi	r2,65535
 4039b5c:	1087ffc4 	addi	r2,r2,8191
 4039b60:	1884703a 	and	r2,r3,r2
 4039b64:	e0bff615 	stw	r2,-40(fp)
      foffset <<= 3;    /* Multiply by 8 to get "offset in num of bytes" */
 4039b68:	e0bff617 	ldw	r2,-40(fp)
 4039b6c:	100490fa 	slli	r2,r2,3
 4039b70:	e0bff615 	stw	r2,-40(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
 4039b74:	e0bffa17 	ldw	r2,-24(fp)
 4039b78:	e0bff315 	stw	r2,-52(fp)
   e = 0;
 4039b7c:	e03ff215 	stw	zero,-56(fp)
   while (left > 1)  /* more data left to send? */
 4039b80:	0000b506 	br	4039e58 <ip_fragment_lc+0x45c>
   {
      p = pkt2;  /* move next fragment up */
 4039b84:	e0bff317 	ldw	r2,-52(fp)
 4039b88:	e0bffa15 	stw	r2,-24(fp)
      pip = (struct ip *)(p->nb_prot);
 4039b8c:	e0bffa17 	ldw	r2,-24(fp)
 4039b90:	10800317 	ldw	r2,12(r2)
 4039b94:	e0bff115 	stw	r2,-60(fp)
      p->nb_plen = min((int)fragsize, left) + iphlen; /* set size of fragment */
 4039b98:	e0bff917 	ldw	r2,-28(fp)
 4039b9c:	e0fff417 	ldw	r3,-48(fp)
 4039ba0:	e0ffff15 	stw	r3,-4(fp)
 4039ba4:	e0bffd15 	stw	r2,-12(fp)
 4039ba8:	e0bfff17 	ldw	r2,-4(fp)
 4039bac:	e0fffd17 	ldw	r3,-12(fp)
 4039bb0:	10c0020e 	bge	r2,r3,4039bbc <ip_fragment_lc+0x1c0>
 4039bb4:	e0bfff17 	ldw	r2,-4(fp)
 4039bb8:	e0bffd15 	stw	r2,-12(fp)
 4039bbc:	e0bff017 	ldw	r2,-64(fp)
 4039bc0:	e0fffd17 	ldw	r3,-12(fp)
 4039bc4:	1885883a 	add	r2,r3,r2
 4039bc8:	1007883a 	mov	r3,r2
 4039bcc:	e0bffa17 	ldw	r2,-24(fp)
 4039bd0:	10c00415 	stw	r3,16(r2)
      left -= fragsize; /* decrement count of bytes left to send */
 4039bd4:	e0fff417 	ldw	r3,-48(fp)
 4039bd8:	e0bff917 	ldw	r2,-28(fp)
 4039bdc:	1885c83a 	sub	r2,r3,r2
 4039be0:	e0bff415 	stw	r2,-48(fp)

      /* set the IP datagram length */
      pip->ip_len = htons((unshort)p->nb_plen);
 4039be4:	e0bffa17 	ldw	r2,-24(fp)
 4039be8:	10800417 	ldw	r2,16(r2)
 4039bec:	10bfffcc 	andi	r2,r2,65535
 4039bf0:	1004d23a 	srli	r2,r2,8
 4039bf4:	10803fcc 	andi	r2,r2,255
 4039bf8:	1009883a 	mov	r4,r2
 4039bfc:	e0bffa17 	ldw	r2,-24(fp)
 4039c00:	10800417 	ldw	r2,16(r2)
 4039c04:	10bfffcc 	andi	r2,r2,65535
 4039c08:	1004923a 	slli	r2,r2,8
 4039c0c:	1007883a 	mov	r3,r2
 4039c10:	00bfc004 	movi	r2,-256
 4039c14:	1884703a 	and	r2,r3,r2
 4039c18:	2084b03a 	or	r2,r4,r2
 4039c1c:	1007883a 	mov	r3,r2
 4039c20:	e0bff117 	ldw	r2,-60(fp)
 4039c24:	10c0008d 	sth	r3,2(r2)

      /* build 16bit IP header field value for fragment flags & offset */
      fraginfo = (unshort)(foffset >> 3);    /* offset, in 8 byte chunks */
 4039c28:	e0bff617 	ldw	r2,-40(fp)
 4039c2c:	1004d0fa 	srli	r2,r2,3
 4039c30:	e0bff50d 	sth	r2,-44(fp)
      fraginfo |= ((left>1)?IP_FLG_MF:0);    /* OR in MoreFrags flag */
 4039c34:	e0bff417 	ldw	r2,-48(fp)
 4039c38:	10800090 	cmplti	r2,r2,2
 4039c3c:	1000031e 	bne	r2,zero,4039c4c <ip_fragment_lc+0x250>
 4039c40:	00880004 	movi	r2,8192
 4039c44:	e0bffc0d 	sth	r2,-16(fp)
 4039c48:	00000106 	br	4039c50 <ip_fragment_lc+0x254>
 4039c4c:	e03ffc0d 	sth	zero,-16(fp)
 4039c50:	e0bff50b 	ldhu	r2,-44(fp)
 4039c54:	e0fffc0b 	ldhu	r3,-16(fp)
 4039c58:	1884b03a 	or	r2,r3,r2
 4039c5c:	e0bff50d 	sth	r2,-44(fp)

      if ( tmp_fraginfo & IP_FLG_MF )             
 4039c60:	e0bfef0b 	ldhu	r2,-68(fp)
 4039c64:	1088000c 	andi	r2,r2,8192
 4039c68:	1005003a 	cmpeq	r2,r2,zero
 4039c6c:	1000031e 	bne	r2,zero,4039c7c <ip_fragment_lc+0x280>
      {
         /* As flag is set in main packet, it should be set in all
          * fragmented packets also 
          */
         fraginfo |= IP_FLG_MF;
 4039c70:	e0bff50b 	ldhu	r2,-44(fp)
 4039c74:	10880014 	ori	r2,r2,8192
 4039c78:	e0bff50d 	sth	r2,-44(fp)
      }

      pip->ip_flgs_foff = htons(fraginfo);   /* do htons macro on separate line */
 4039c7c:	e0bff50b 	ldhu	r2,-44(fp)
 4039c80:	1004d23a 	srli	r2,r2,8
 4039c84:	10803fcc 	andi	r2,r2,255
 4039c88:	1009883a 	mov	r4,r2
 4039c8c:	e0bff50b 	ldhu	r2,-44(fp)
 4039c90:	1004923a 	slli	r2,r2,8
 4039c94:	1007883a 	mov	r3,r2
 4039c98:	00bfc004 	movi	r2,-256
 4039c9c:	1884703a 	and	r2,r3,r2
 4039ca0:	2084b03a 	or	r2,r4,r2
 4039ca4:	1007883a 	mov	r3,r2
 4039ca8:	e0bff117 	ldw	r2,-60(fp)
 4039cac:	10c0018d 	sth	r3,6(r2)
      /* set up & save next fragment (pkt2) since ip2mac() will delete p */
      if (left > 1)
 4039cb0:	e0bff417 	ldw	r2,-48(fp)
 4039cb4:	10800090 	cmplti	r2,r2,2
 4039cb8:	1000401e 	bne	r2,zero,4039dbc <ip_fragment_lc+0x3c0>
      {
         LOCK_NET_RESOURCE(FREEQ_RESID);
 4039cbc:	01000084 	movi	r4,2
 4039cc0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pkt2 = pk_alloc(left + iphlen + MaxLnh);
 4039cc4:	e0fff417 	ldw	r3,-48(fp)
 4039cc8:	e0bff017 	ldw	r2,-64(fp)
 4039ccc:	1887883a 	add	r3,r3,r2
 4039cd0:	00810174 	movhi	r2,1029
 4039cd4:	1081bd04 	addi	r2,r2,1780
 4039cd8:	10800017 	ldw	r2,0(r2)
 4039cdc:	1885883a 	add	r2,r3,r2
 4039ce0:	1009883a 	mov	r4,r2
 4039ce4:	4024f700 	call	4024f70 <pk_alloc>
 4039ce8:	e0bff315 	stw	r2,-52(fp)
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4039cec:	01000084 	movi	r4,2
 4039cf0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         if (!pkt2)
 4039cf4:	e0bff317 	ldw	r2,-52(fp)
 4039cf8:	1004c03a 	cmpne	r2,r2,zero
 4039cfc:	1000111e 	bne	r2,zero,4039d44 <ip_fragment_lc+0x348>
         {
            dtrap();
 4039d00:	4025bb40 	call	4025bb4 <dtrap>
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4039d04:	01000084 	movi	r4,2
 4039d08:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(p);
 4039d0c:	e13ffa17 	ldw	r4,-24(fp)
 4039d10:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4039d14:	01000084 	movi	r4,2
 4039d18:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 4039d1c:	008101b4 	movhi	r2,1030
 4039d20:	10a44e04 	addi	r2,r2,-28360
 4039d24:	10801117 	ldw	r2,68(r2)
 4039d28:	10c00044 	addi	r3,r2,1
 4039d2c:	008101b4 	movhi	r2,1030
 4039d30:	10a44e04 	addi	r2,r2,-28360
 4039d34:	10c01115 	stw	r3,68(r2)
            return ENP_RESOURCE;
 4039d38:	00bffa84 	movi	r2,-22
 4039d3c:	e0bffe15 	stw	r2,-8(fp)
 4039d40:	00004a06 	br	4039e6c <ip_fragment_lc+0x470>
         }

         pkt2->net = p->net;       /* copy critical parms to new packet */
 4039d44:	e0bffa17 	ldw	r2,-24(fp)
 4039d48:	10c00617 	ldw	r3,24(r2)
 4039d4c:	e0bff317 	ldw	r2,-52(fp)
 4039d50:	10c00615 	stw	r3,24(r2)
         pkt2->fhost = p->fhost;
 4039d54:	e0bffa17 	ldw	r2,-24(fp)
 4039d58:	10c00717 	ldw	r3,28(r2)
 4039d5c:	e0bff317 	ldw	r2,-52(fp)
 4039d60:	10c00715 	stw	r3,28(r2)
         /* Duplicate the IPHeader */
         MEMCPY(pkt2->nb_prot, p->nb_prot, iphlen);
 4039d64:	e0bff317 	ldw	r2,-52(fp)
 4039d68:	11000317 	ldw	r4,12(r2)
 4039d6c:	e0bffa17 	ldw	r2,-24(fp)
 4039d70:	10800317 	ldw	r2,12(r2)
 4039d74:	e0fff017 	ldw	r3,-64(fp)
 4039d78:	100b883a 	mov	r5,r2
 4039d7c:	180d883a 	mov	r6,r3
 4039d80:	4001de40 	call	4001de4 <memcpy>
         /* copy data for NEXT fragment from p to pkt2 */
         MEMCPY(pkt2->nb_prot + iphlen, p->nb_prot + iphlen + fragsize, left);
 4039d84:	e0bff317 	ldw	r2,-52(fp)
 4039d88:	10c00317 	ldw	r3,12(r2)
 4039d8c:	e0bff017 	ldw	r2,-64(fp)
 4039d90:	1889883a 	add	r4,r3,r2
 4039d94:	e0bffa17 	ldw	r2,-24(fp)
 4039d98:	10c00317 	ldw	r3,12(r2)
 4039d9c:	e0bff017 	ldw	r2,-64(fp)
 4039da0:	1887883a 	add	r3,r3,r2
 4039da4:	e0bff917 	ldw	r2,-28(fp)
 4039da8:	1885883a 	add	r2,r3,r2
 4039dac:	e0fff417 	ldw	r3,-48(fp)
 4039db0:	100b883a 	mov	r5,r2
 4039db4:	180d883a 	mov	r6,r3
 4039db8:	4001de40 	call	4001de4 <memcpy>
      }

      /* we've changed the IP header, so recalculate the checksum */
      pip->ip_chksum = IPXSUM;
 4039dbc:	e0bff117 	ldw	r2,-60(fp)
 4039dc0:	1000028d 	sth	zero,10(r2)
      pip->ip_chksum = ~cksum(pip, 10);
 4039dc4:	e13ff117 	ldw	r4,-60(fp)
 4039dc8:	01400284 	movi	r5,10
 4039dcc:	4020a000 	call	4020a00 <cksum>
 4039dd0:	0084303a 	nor	r2,zero,r2
 4039dd4:	1007883a 	mov	r3,r2
 4039dd8:	e0bff117 	ldw	r2,-60(fp)
 4039ddc:	10c0028d 	sth	r3,10(r2)

      /* ip_dump(p); */

      e = ip2mac(p, firsthop);   /* send fragment in p */
 4039de0:	e13ffa17 	ldw	r4,-24(fp)
 4039de4:	e17ffb17 	ldw	r5,-20(fp)
 4039de8:	401e7a00 	call	401e7a0 <ip2mac>
 4039dec:	e0bff215 	stw	r2,-56(fp)
      ip_mib.ipFragCreates++;
 4039df0:	008101b4 	movhi	r2,1030
 4039df4:	10a44e04 	addi	r2,r2,-28360
 4039df8:	10801217 	ldw	r2,72(r2)
 4039dfc:	10c00044 	addi	r3,r2,1
 4039e00:	008101b4 	movhi	r2,1030
 4039e04:	10a44e04 	addi	r2,r2,-28360
 4039e08:	10c01215 	stw	r3,72(r2)
      if (e < 0)
 4039e0c:	e0bff217 	ldw	r2,-56(fp)
 4039e10:	1004403a 	cmpge	r2,r2,zero
 4039e14:	10000c1e 	bne	r2,zero,4039e48 <ip_fragment_lc+0x44c>
      {
         if (left > 1) 
 4039e18:	e0bff417 	ldw	r2,-48(fp)
 4039e1c:	10800090 	cmplti	r2,r2,2
 4039e20:	1000061e 	bne	r2,zero,4039e3c <ip_fragment_lc+0x440>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 4039e24:	01000084 	movi	r4,2
 4039e28:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(pkt2);
 4039e2c:	e13ff317 	ldw	r4,-52(fp)
 4039e30:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4039e34:	01000084 	movi	r4,2
 4039e38:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         }
         return e;
 4039e3c:	e0fff217 	ldw	r3,-56(fp)
 4039e40:	e0fffe15 	stw	r3,-8(fp)
 4039e44:	00000906 	br	4039e6c <ip_fragment_lc+0x470>
      }
      foffset += fragsize;    /* offset for next fragment */
 4039e48:	e0bff617 	ldw	r2,-40(fp)
 4039e4c:	e0fff917 	ldw	r3,-28(fp)
 4039e50:	10c5883a 	add	r2,r2,r3
 4039e54:	e0bff615 	stw	r2,-40(fp)
   }

   /* Loop through IP data area, sending it as fragments */
   pkt2 = p;  /* init these to avoid compiler warnings */
   e = 0;
   while (left > 1)  /* more data left to send? */
 4039e58:	e0bff417 	ldw	r2,-48(fp)
 4039e5c:	10800088 	cmpgei	r2,r2,2
 4039e60:	103f481e 	bne	r2,zero,4039b84 <ip_fragment_lc+0x188>
         }
         return e;
      }
      foffset += fragsize;    /* offset for next fragment */
   }
   return e;
 4039e64:	e0bff217 	ldw	r2,-56(fp)
 4039e68:	e0bffe15 	stw	r2,-8(fp)
 4039e6c:	e0bffe17 	ldw	r2,-8(fp)
}
 4039e70:	e037883a 	mov	sp,fp
 4039e74:	dfc00117 	ldw	ra,4(sp)
 4039e78:	df000017 	ldw	fp,0(sp)
 4039e7c:	dec00204 	addi	sp,sp,8
 4039e80:	f800283a 	ret

04039e84 <ip_fragment>:
 *              generated fragment, if less than zero
 *          (5) 0, if everything went okay
 */

int ip_fragment(PACKET p, ip_addr firsthop)
{
 4039e84:	deffed04 	addi	sp,sp,-76
 4039e88:	dfc01215 	stw	ra,72(sp)
 4039e8c:	df001115 	stw	fp,68(sp)
 4039e90:	df001104 	addi	fp,sp,68
 4039e94:	e13ffa15 	stw	r4,-24(fp)
 4039e98:	e17ffb15 	stw	r5,-20(fp)
   u_short parent_mf;
   PACKET newpkt;
   struct ip * newpip;
   int e;

   pip = ip_head(p);
 4039e9c:	e0bffa17 	ldw	r2,-24(fp)
 4039ea0:	10800317 	ldw	r2,12(r2)
 4039ea4:	e0bff815 	stw	r2,-32(fp)
   if ((ntohs(pip->ip_flgs_foff)) & IP_FLG_DF)
 4039ea8:	e0bff817 	ldw	r2,-32(fp)
 4039eac:	1080018b 	ldhu	r2,6(r2)
 4039eb0:	10bfffcc 	andi	r2,r2,65535
 4039eb4:	1004d23a 	srli	r2,r2,8
 4039eb8:	10bfffcc 	andi	r2,r2,65535
 4039ebc:	10c03fcc 	andi	r3,r2,255
 4039ec0:	e0bff817 	ldw	r2,-32(fp)
 4039ec4:	1080018b 	ldhu	r2,6(r2)
 4039ec8:	10bfffcc 	andi	r2,r2,65535
 4039ecc:	1004923a 	slli	r2,r2,8
 4039ed0:	10bfc00c 	andi	r2,r2,65280
 4039ed4:	1884b03a 	or	r2,r3,r2
 4039ed8:	1090000c 	andi	r2,r2,16384
 4039edc:	1005003a 	cmpeq	r2,r2,zero
 4039ee0:	10001a1e 	bne	r2,zero,4039f4c <ip_fragment+0xc8>
   {
      /* can't fragment a packet with the DF bit set */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4039ee4:	01000084 	movi	r4,2
 4039ee8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 4039eec:	e13ffa17 	ldw	r4,-24(fp)
 4039ef0:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4039ef4:	01000084 	movi	r4,2
 4039ef8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ip_mib.ipFragFails++;
 4039efc:	008101b4 	movhi	r2,1030
 4039f00:	10a44e04 	addi	r2,r2,-28360
 4039f04:	10801117 	ldw	r2,68(r2)
 4039f08:	10c00044 	addi	r3,r2,1
 4039f0c:	008101b4 	movhi	r2,1030
 4039f10:	10a44e04 	addi	r2,r2,-28360
 4039f14:	10c01115 	stw	r3,68(r2)
#ifdef FULL_ICMP
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 4039f18:	e0bff817 	ldw	r2,-32(fp)
 4039f1c:	11000317 	ldw	r4,12(r2)
 4039f20:	e0bffa17 	ldw	r2,-24(fp)
 4039f24:	10800617 	ldw	r2,24(r2)
 4039f28:	11400a17 	ldw	r5,40(r2)
 4039f2c:	e0bffa17 	ldw	r2,-24(fp)
 4039f30:	10800617 	ldw	r2,24(r2)
 4039f34:	d8800015 	stw	r2,0(sp)
 4039f38:	e1bff817 	ldw	r6,-32(fp)
 4039f3c:	01c00104 	movi	r7,4
 4039f40:	40457640 	call	4045764 <icmp_destun>
#endif   /* FULL_ICMP */
      return 0;
 4039f44:	e03ffe15 	stw	zero,-8(fp)
 4039f48:	00015306 	br	403a498 <ip_fragment+0x614>
   }

   maxbuflen = pk_get_max_intrsafe_buf_len ();
 4039f4c:	40253b00 	call	40253b0 <pk_get_max_intrsafe_buf_len>
 4039f50:	e0bff915 	stw	r2,-28(fp)

   /* the maximum amount of data that will be sent to ip2mac ().  Please note that
    * our definition of MTU is different from the traditional definition of that
    * parameter (which excludes the data link layer header). */
   maxl3_len = (unsigned short int) (MIN(maxbuflen, ((unsigned) p->net->n_mtu)));
 4039f54:	e0bffa17 	ldw	r2,-24(fp)
 4039f58:	10800617 	ldw	r2,24(r2)
 4039f5c:	10800917 	ldw	r2,36(r2)
 4039f60:	e0fff917 	ldw	r3,-28(fp)
 4039f64:	e0ffff15 	stw	r3,-4(fp)
 4039f68:	e0bffd15 	stw	r2,-12(fp)
 4039f6c:	e0bfff17 	ldw	r2,-4(fp)
 4039f70:	e0fffd17 	ldw	r3,-12(fp)
 4039f74:	10c0022e 	bgeu	r2,r3,4039f80 <ip_fragment+0xfc>
 4039f78:	e0bfff17 	ldw	r2,-4(fp)
 4039f7c:	e0bffd15 	stw	r2,-12(fp)
 4039f80:	e0fffd17 	ldw	r3,-12(fp)
 4039f84:	e0fff58d 	sth	r3,-42(fp)

   /* get the length of the IP header of the original, unfragmented datagram */
   iphlen = ip_hlen(pip);
 4039f88:	e0bff817 	ldw	r2,-32(fp)
 4039f8c:	10800003 	ldbu	r2,0(r2)
 4039f90:	108003cc 	andi	r2,r2,15
 4039f94:	1085883a 	add	r2,r2,r2
 4039f98:	1085883a 	add	r2,r2,r2
 4039f9c:	e0bff7c5 	stb	r2,-33(fp)

   /* obtain the useable payload length in an IP datagram (after accounting for the 
    * length of the IP and data link layer headers) */
   l2hdr_len = (u_char) p->net->n_lnh;
 4039fa0:	e0bffa17 	ldw	r2,-24(fp)
 4039fa4:	10800617 	ldw	r2,24(r2)
 4039fa8:	10800817 	ldw	r2,32(r2)
 4039fac:	e0bff785 	stb	r2,-34(fp)
   useable_payload_len = maxl3_len - iphlen - l2hdr_len;
 4039fb0:	e0fff7c3 	ldbu	r3,-33(fp)
 4039fb4:	e0bff58b 	ldhu	r2,-42(fp)
 4039fb8:	10c5c83a 	sub	r2,r2,r3
 4039fbc:	1007883a 	mov	r3,r2
 4039fc0:	e0bff783 	ldbu	r2,-34(fp)
 4039fc4:	1885c83a 	sub	r2,r3,r2
 4039fc8:	e0bff70d 	sth	r2,-36(fp)

   /* IP fragments must always have a length that is a multiple of 8 bytes, so we
    * need to round 'payload_len' down to the nearest multiple of 8 bytes. */
   useable_payload_len &= (~((unsigned short int) 0x07));
 4039fcc:	e0fff70b 	ldhu	r3,-36(fp)
 4039fd0:	00bffe04 	movi	r2,-8
 4039fd4:	1884703a 	and	r2,r3,r2
 4039fd8:	e0bff70d 	sth	r2,-36(fp)

   /* compute the number of packets that we need to send.  First compute the total
    * payload length of the "original" datagram (which could itself be a fragment). 
    */
   total_payload_len = (ntohs(pip->ip_len)) - iphlen;
 4039fdc:	e0bff817 	ldw	r2,-32(fp)
 4039fe0:	1080008b 	ldhu	r2,2(r2)
 4039fe4:	10bfffcc 	andi	r2,r2,65535
 4039fe8:	1004d23a 	srli	r2,r2,8
 4039fec:	10803fcc 	andi	r2,r2,255
 4039ff0:	1009883a 	mov	r4,r2
 4039ff4:	e0bff817 	ldw	r2,-32(fp)
 4039ff8:	1080008b 	ldhu	r2,2(r2)
 4039ffc:	10bfffcc 	andi	r2,r2,65535
 403a000:	1004923a 	slli	r2,r2,8
 403a004:	1007883a 	mov	r3,r2
 403a008:	00bfc004 	movi	r2,-256
 403a00c:	1884703a 	and	r2,r3,r2
 403a010:	2084b03a 	or	r2,r4,r2
 403a014:	1007883a 	mov	r3,r2
 403a018:	e0bff7c3 	ldbu	r2,-33(fp)
 403a01c:	1885c83a 	sub	r2,r3,r2
 403a020:	e0bff68d 	sth	r2,-38(fp)
   num_frags = (total_payload_len / useable_payload_len);
 403a024:	e0fff68b 	ldhu	r3,-38(fp)
 403a028:	e0bff70b 	ldhu	r2,-36(fp)
 403a02c:	1885203a 	divu	r2,r3,r2
 403a030:	e0bff50d 	sth	r2,-44(fp)
   if ((last_payload_len = (total_payload_len % useable_payload_len)) != 0)
 403a034:	e13ff68b 	ldhu	r4,-38(fp)
 403a038:	e0fff70b 	ldhu	r3,-36(fp)
 403a03c:	20c5203a 	divu	r2,r4,r3
 403a040:	10c5383a 	mul	r2,r2,r3
 403a044:	2085c83a 	sub	r2,r4,r2
 403a048:	e0bff60d 	sth	r2,-40(fp)
 403a04c:	e0bff60b 	ldhu	r2,-40(fp)
 403a050:	1005003a 	cmpeq	r2,r2,zero
 403a054:	1000031e 	bne	r2,zero,403a064 <ip_fragment+0x1e0>
   {
      /* we will have one additional (also last) fragment that is smaller than the 
       * other fragments */
      ++num_frags;
 403a058:	e0bff50b 	ldhu	r2,-44(fp)
 403a05c:	10800044 	addi	r2,r2,1
 403a060:	e0bff50d 	sth	r2,-44(fp)
    * the one passed to this function) is interrupt-safe, then we use 
    * ip_fragment_lc () for creating the child fragments.  This decreases the 
    * amount of copying that needs to be done in those cases (as compared to this 
    * function); however, for larger packets, ip_fragment () becomes more efficient 
    * (than ip_fragment_lc ()). */
   if ((num_frags <= FRAG_SCHEME_SWITCH_THRESHOLD) && (!(p->flags & PKF_INTRUNSAFE)))
 403a064:	e0bff50b 	ldhu	r2,-44(fp)
 403a068:	10800128 	cmpgeui	r2,r2,4
 403a06c:	10000a1e 	bne	r2,zero,403a098 <ip_fragment+0x214>
 403a070:	e0bffa17 	ldw	r2,-24(fp)
 403a074:	10800a17 	ldw	r2,40(r2)
 403a078:	1080040c 	andi	r2,r2,16
 403a07c:	1004c03a 	cmpne	r2,r2,zero
 403a080:	1000051e 	bne	r2,zero,403a098 <ip_fragment+0x214>
   {
      return (ip_fragment_lc (p, firsthop));
 403a084:	e13ffa17 	ldw	r4,-24(fp)
 403a088:	e17ffb17 	ldw	r5,-20(fp)
 403a08c:	40399fc0 	call	40399fc <ip_fragment_lc>
 403a090:	e0bffe15 	stw	r2,-8(fp)
 403a094:	00010006 	br	403a498 <ip_fragment+0x614>
   }

   parent_frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 403a098:	e0bff817 	ldw	r2,-32(fp)
 403a09c:	1080018b 	ldhu	r2,6(r2)
 403a0a0:	10bfffcc 	andi	r2,r2,65535
 403a0a4:	1004d23a 	srli	r2,r2,8
 403a0a8:	10803fcc 	andi	r2,r2,255
 403a0ac:	1009883a 	mov	r4,r2
 403a0b0:	e0bff817 	ldw	r2,-32(fp)
 403a0b4:	1080018b 	ldhu	r2,6(r2)
 403a0b8:	10bfffcc 	andi	r2,r2,65535
 403a0bc:	1004923a 	slli	r2,r2,8
 403a0c0:	1007883a 	mov	r3,r2
 403a0c4:	00bfc004 	movi	r2,-256
 403a0c8:	1884703a 	and	r2,r3,r2
 403a0cc:	2084b03a 	or	r2,r4,r2
 403a0d0:	1087ffcc 	andi	r2,r2,8191
 403a0d4:	100490fa 	slli	r2,r2,3
 403a0d8:	e0bff38d 	sth	r2,-50(fp)
   parent_mf = ((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF);
 403a0dc:	e0bff817 	ldw	r2,-32(fp)
 403a0e0:	1080018b 	ldhu	r2,6(r2)
 403a0e4:	10bfffcc 	andi	r2,r2,65535
 403a0e8:	1004d23a 	srli	r2,r2,8
 403a0ec:	10803fcc 	andi	r2,r2,255
 403a0f0:	1009883a 	mov	r4,r2
 403a0f4:	e0bff817 	ldw	r2,-32(fp)
 403a0f8:	1080018b 	ldhu	r2,6(r2)
 403a0fc:	10bfffcc 	andi	r2,r2,65535
 403a100:	1004923a 	slli	r2,r2,8
 403a104:	1007883a 	mov	r3,r2
 403a108:	00bfc004 	movi	r2,-256
 403a10c:	1884703a 	and	r2,r3,r2
 403a110:	2084b03a 	or	r2,r4,r2
 403a114:	1088000c 	andi	r2,r2,8192
 403a118:	e0bff30d 	sth	r2,-52(fp)
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 403a11c:	e03ff48d 	sth	zero,-46(fp)
 403a120:	0000cc06 	br	403a454 <ip_fragment+0x5d0>
   {
      LOCK_NET_RESOURCE(FREEQ_RESID);
 403a124:	01000084 	movi	r4,2
 403a128:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      newpkt = pk_alloc (useable_payload_len + iphlen + l2hdr_len); 
 403a12c:	e0fff70b 	ldhu	r3,-36(fp)
 403a130:	e0bff7c3 	ldbu	r2,-33(fp)
 403a134:	1887883a 	add	r3,r3,r2
 403a138:	e0bff783 	ldbu	r2,-34(fp)
 403a13c:	1885883a 	add	r2,r3,r2
 403a140:	1009883a 	mov	r4,r2
 403a144:	4024f700 	call	4024f70 <pk_alloc>
 403a148:	e0bff215 	stw	r2,-56(fp)
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403a14c:	01000084 	movi	r4,2
 403a150:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

      if (newpkt == 0)
 403a154:	e0bff217 	ldw	r2,-56(fp)
 403a158:	1004c03a 	cmpne	r2,r2,zero
 403a15c:	1000101e 	bne	r2,zero,403a1a0 <ip_fragment+0x31c>
      {
         /* free the packet that we are working with */
         LOCK_NET_RESOURCE(FREEQ_RESID);
 403a160:	01000084 	movi	r4,2
 403a164:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 403a168:	e13ffa17 	ldw	r4,-24(fp)
 403a16c:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403a170:	01000084 	movi	r4,2
 403a174:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         ip_mib.ipFragFails++;
 403a178:	008101b4 	movhi	r2,1030
 403a17c:	10a44e04 	addi	r2,r2,-28360
 403a180:	10801117 	ldw	r2,68(r2)
 403a184:	10c00044 	addi	r3,r2,1
 403a188:	008101b4 	movhi	r2,1030
 403a18c:	10a44e04 	addi	r2,r2,-28360
 403a190:	10c01115 	stw	r3,68(r2)
         return ENP_NOBUFFER;
 403a194:	00bffac4 	movi	r2,-21
 403a198:	e0bffe15 	stw	r2,-8(fp)
 403a19c:	0000be06 	br	403a498 <ip_fragment+0x614>
      }
      else
      {
         /* copy the IP header from the original datagram into the fragment */
         MEMCPY((newpkt->nb_buff + l2hdr_len), p->nb_prot, iphlen);
 403a1a0:	e0bff217 	ldw	r2,-56(fp)
 403a1a4:	10c00117 	ldw	r3,4(r2)
 403a1a8:	e0bff783 	ldbu	r2,-34(fp)
 403a1ac:	1889883a 	add	r4,r3,r2
 403a1b0:	e0bffa17 	ldw	r2,-24(fp)
 403a1b4:	10800317 	ldw	r2,12(r2)
 403a1b8:	e0fff7c3 	ldbu	r3,-33(fp)
 403a1bc:	100b883a 	mov	r5,r2
 403a1c0:	180d883a 	mov	r6,r3
 403a1c4:	4001de40 	call	4001de4 <memcpy>

         /* compute the amount of payload that needs to be copied into each 
          * child fragment */
         if (i < (num_frags - 1))
 403a1c8:	e0fff48b 	ldhu	r3,-46(fp)
 403a1cc:	e0bff50b 	ldhu	r2,-44(fp)
 403a1d0:	10bfffc4 	addi	r2,r2,-1
 403a1d4:	1880030e 	bge	r3,r2,403a1e4 <ip_fragment+0x360>
         {
            amt_to_copy = useable_payload_len;
 403a1d8:	e0bff70b 	ldhu	r2,-36(fp)
 403a1dc:	e0bff40d 	sth	r2,-48(fp)
 403a1e0:	00000a06 	br	403a20c <ip_fragment+0x388>
         }
         else
         {
            amt_to_copy = ((last_payload_len == 0) ? useable_payload_len : last_payload_len);
 403a1e4:	e0bff60b 	ldhu	r2,-40(fp)
 403a1e8:	1004c03a 	cmpne	r2,r2,zero
 403a1ec:	1000031e 	bne	r2,zero,403a1fc <ip_fragment+0x378>
 403a1f0:	e0fff70b 	ldhu	r3,-36(fp)
 403a1f4:	e0fffc0d 	sth	r3,-16(fp)
 403a1f8:	00000206 	br	403a204 <ip_fragment+0x380>
 403a1fc:	e0bff60b 	ldhu	r2,-40(fp)
 403a200:	e0bffc0d 	sth	r2,-16(fp)
 403a204:	e0fffc0b 	ldhu	r3,-16(fp)
 403a208:	e0fff40d 	sth	r3,-48(fp)
         }
         MEMCPY((newpkt->nb_buff + l2hdr_len + iphlen), p->nb_prot + iphlen + (useable_payload_len * i), amt_to_copy);
 403a20c:	e0bff217 	ldw	r2,-56(fp)
 403a210:	10c00117 	ldw	r3,4(r2)
 403a214:	e0bff783 	ldbu	r2,-34(fp)
 403a218:	1887883a 	add	r3,r3,r2
 403a21c:	e0bff7c3 	ldbu	r2,-33(fp)
 403a220:	188b883a 	add	r5,r3,r2
 403a224:	e0bffa17 	ldw	r2,-24(fp)
 403a228:	10c00317 	ldw	r3,12(r2)
 403a22c:	e0bff7c3 	ldbu	r2,-33(fp)
 403a230:	1889883a 	add	r4,r3,r2
 403a234:	e0fff70b 	ldhu	r3,-36(fp)
 403a238:	e0bff48b 	ldhu	r2,-46(fp)
 403a23c:	1885383a 	mul	r2,r3,r2
 403a240:	2085883a 	add	r2,r4,r2
 403a244:	e0fff40b 	ldhu	r3,-48(fp)
 403a248:	2809883a 	mov	r4,r5
 403a24c:	100b883a 	mov	r5,r2
 403a250:	180d883a 	mov	r6,r3
 403a254:	4001de40 	call	4001de4 <memcpy>

         /* set up the various netbuf fields for the fragment */
         newpkt->nb_prot = newpkt->nb_buff + l2hdr_len;
 403a258:	e0bff217 	ldw	r2,-56(fp)
 403a25c:	10c00117 	ldw	r3,4(r2)
 403a260:	e0bff783 	ldbu	r2,-34(fp)
 403a264:	1887883a 	add	r3,r3,r2
 403a268:	e0bff217 	ldw	r2,-56(fp)
 403a26c:	10c00315 	stw	r3,12(r2)
         newpkt->nb_plen = iphlen + amt_to_copy;
 403a270:	e0fff7c3 	ldbu	r3,-33(fp)
 403a274:	e0bff40b 	ldhu	r2,-48(fp)
 403a278:	1885883a 	add	r2,r3,r2
 403a27c:	1007883a 	mov	r3,r2
 403a280:	e0bff217 	ldw	r2,-56(fp)
 403a284:	10c00415 	stw	r3,16(r2)
         newpkt->net = p->net;
 403a288:	e0bffa17 	ldw	r2,-24(fp)
 403a28c:	10c00617 	ldw	r3,24(r2)
 403a290:	e0bff217 	ldw	r2,-56(fp)
 403a294:	10c00615 	stw	r3,24(r2)
         newpkt->fhost = p->fhost;
 403a298:	e0bffa17 	ldw	r2,-24(fp)
 403a29c:	10c00717 	ldw	r3,28(r2)
 403a2a0:	e0bff217 	ldw	r2,-56(fp)
 403a2a4:	10c00715 	stw	r3,28(r2)
         /* type and nb_tstamp fields are not used in the egress direction, but we set 'type' anyway */
         newpkt->type = htons(IPTP);
 403a2a8:	e0fff217 	ldw	r3,-56(fp)
 403a2ac:	00820004 	movi	r2,2048
 403a2b0:	1880080d 	sth	r2,32(r3)

         /* now set the Total Length, Fragment Offset, and More Fragments fields */
         newpip = ip_head(newpkt);
 403a2b4:	e0bff217 	ldw	r2,-56(fp)
 403a2b8:	10800317 	ldw	r2,12(r2)
 403a2bc:	e0bff115 	stw	r2,-60(fp)
         newpip->ip_len = htons(newpkt->nb_plen);
 403a2c0:	e0bff217 	ldw	r2,-56(fp)
 403a2c4:	10800417 	ldw	r2,16(r2)
 403a2c8:	1004d23a 	srli	r2,r2,8
 403a2cc:	10803fcc 	andi	r2,r2,255
 403a2d0:	1009883a 	mov	r4,r2
 403a2d4:	e0bff217 	ldw	r2,-56(fp)
 403a2d8:	10800417 	ldw	r2,16(r2)
 403a2dc:	1004923a 	slli	r2,r2,8
 403a2e0:	1007883a 	mov	r3,r2
 403a2e4:	00bfc004 	movi	r2,-256
 403a2e8:	1884703a 	and	r2,r3,r2
 403a2ec:	2084b03a 	or	r2,r4,r2
 403a2f0:	1007883a 	mov	r3,r2
 403a2f4:	e0bff117 	ldw	r2,-60(fp)
 403a2f8:	10c0008d 	sth	r3,2(r2)
         /* the following statement will reset DF and MF bits */
         newpip->ip_flgs_foff = htons((parent_frag_offset + (useable_payload_len * i)) >> 3);
 403a2fc:	e13ff38b 	ldhu	r4,-50(fp)
 403a300:	e0fff70b 	ldhu	r3,-36(fp)
 403a304:	e0bff48b 	ldhu	r2,-46(fp)
 403a308:	1885383a 	mul	r2,r3,r2
 403a30c:	2085883a 	add	r2,r4,r2
 403a310:	1005d2fa 	srai	r2,r2,11
 403a314:	10803fcc 	andi	r2,r2,255
 403a318:	100b883a 	mov	r5,r2
 403a31c:	e13ff38b 	ldhu	r4,-50(fp)
 403a320:	e0fff70b 	ldhu	r3,-36(fp)
 403a324:	e0bff48b 	ldhu	r2,-46(fp)
 403a328:	1885383a 	mul	r2,r3,r2
 403a32c:	2085883a 	add	r2,r4,r2
 403a330:	1005d0fa 	srai	r2,r2,3
 403a334:	1004923a 	slli	r2,r2,8
 403a338:	1007883a 	mov	r3,r2
 403a33c:	00bfc004 	movi	r2,-256
 403a340:	1884703a 	and	r2,r3,r2
 403a344:	2884b03a 	or	r2,r5,r2
 403a348:	1007883a 	mov	r3,r2
 403a34c:	e0bff117 	ldw	r2,-60(fp)
 403a350:	10c0018d 	sth	r3,6(r2)
          *     child fragments but the last will have the MF bit set)
          * (2) Parent fragment offset = x, MF = 1: first or middle fragment (FF or MF)
          *     (all child fragments will have the MF bit set)
          * (3) Parent fragment offset > 0, MF = 0: last fragment (LF) (all child fragments
          *     except the last will have the MF bit set) */
         if (i < (num_frags - 1))
 403a354:	e0fff48b 	ldhu	r3,-46(fp)
 403a358:	e0bff50b 	ldhu	r2,-44(fp)
 403a35c:	10bfffc4 	addi	r2,r2,-1
 403a360:	1880070e 	bge	r3,r2,403a380 <ip_fragment+0x4fc>
         {
            newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 403a364:	e0bff117 	ldw	r2,-60(fp)
 403a368:	1080018b 	ldhu	r2,6(r2)
 403a36c:	10800814 	ori	r2,r2,32
 403a370:	1007883a 	mov	r3,r2
 403a374:	e0bff117 	ldw	r2,-60(fp)
 403a378:	10c0018d 	sth	r3,6(r2)
 403a37c:	00000906 	br	403a3a4 <ip_fragment+0x520>
         }
         else
         {
            if (parent_mf)
 403a380:	e0bff30b 	ldhu	r2,-52(fp)
 403a384:	1005003a 	cmpeq	r2,r2,zero
 403a388:	1000061e 	bne	r2,zero,403a3a4 <ip_fragment+0x520>
            {
               newpip->ip_flgs_foff |= htons(IP_FLG_MF);
 403a38c:	e0bff117 	ldw	r2,-60(fp)
 403a390:	1080018b 	ldhu	r2,6(r2)
 403a394:	10800814 	ori	r2,r2,32
 403a398:	1007883a 	mov	r3,r2
 403a39c:	e0bff117 	ldw	r2,-60(fp)
 403a3a0:	10c0018d 	sth	r3,6(r2)
            }
         }

         /* finally, update the checksum */
         newpip->ip_chksum = IPXSUM;
 403a3a4:	e0bff117 	ldw	r2,-60(fp)
 403a3a8:	1000028d 	sth	zero,10(r2)
         newpip->ip_chksum = ~cksum(newpip, (iphlen/2));
 403a3ac:	e0bff7c3 	ldbu	r2,-33(fp)
 403a3b0:	1004d07a 	srli	r2,r2,1
 403a3b4:	11403fcc 	andi	r5,r2,255
 403a3b8:	e13ff117 	ldw	r4,-60(fp)
 403a3bc:	4020a000 	call	4020a00 <cksum>
 403a3c0:	0084303a 	nor	r2,zero,r2
 403a3c4:	1007883a 	mov	r3,r2
 403a3c8:	e0bff117 	ldw	r2,-60(fp)
 403a3cc:	10c0028d 	sth	r3,10(r2)

         ip_mib.ipFragCreates++;
 403a3d0:	008101b4 	movhi	r2,1030
 403a3d4:	10a44e04 	addi	r2,r2,-28360
 403a3d8:	10801217 	ldw	r2,72(r2)
 403a3dc:	10c00044 	addi	r3,r2,1
 403a3e0:	008101b4 	movhi	r2,1030
 403a3e4:	10a44e04 	addi	r2,r2,-28360
 403a3e8:	10c01215 	stw	r3,72(r2)

         /* we're done; hand the packet off to ip2mac () */
         e = ip2mac (newpkt, firsthop);
 403a3ec:	e13ff217 	ldw	r4,-56(fp)
 403a3f0:	e17ffb17 	ldw	r5,-20(fp)
 403a3f4:	401e7a00 	call	401e7a0 <ip2mac>
 403a3f8:	e0bff015 	stw	r2,-64(fp)
         if (e < 0)
 403a3fc:	e0bff017 	ldw	r2,-64(fp)
 403a400:	1004403a 	cmpge	r2,r2,zero
 403a404:	1000101e 	bne	r2,zero,403a448 <ip_fragment+0x5c4>
         {
            LOCK_NET_RESOURCE(FREEQ_RESID);
 403a408:	01000084 	movi	r4,2
 403a40c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(p);
 403a410:	e13ffa17 	ldw	r4,-24(fp)
 403a414:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403a418:	01000084 	movi	r4,2
 403a41c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            ip_mib.ipFragFails++;
 403a420:	008101b4 	movhi	r2,1030
 403a424:	10a44e04 	addi	r2,r2,-28360
 403a428:	10801117 	ldw	r2,68(r2)
 403a42c:	10c00044 	addi	r3,r2,1
 403a430:	008101b4 	movhi	r2,1030
 403a434:	10a44e04 	addi	r2,r2,-28360
 403a438:	10c01115 	stw	r3,68(r2)
            return e;
 403a43c:	e0bff017 	ldw	r2,-64(fp)
 403a440:	e0bffe15 	stw	r2,-8(fp)
 403a444:	00001406 	br	403a498 <ip_fragment+0x614>
   /* irrespective of whether the parent buffer is interrupt-safe or not, we attempt 
    * to allocate new buffers for all of the fragments.  Iterate thru' the original 
    * datagram, copying fragments into the newly allocated data buffers.  If we want
    * to send the fragments in reverse order, we just need to "reverse" the FOR loop.
    */
   for (i = 0; i < num_frags; ++i)
 403a448:	e0bff48b 	ldhu	r2,-46(fp)
 403a44c:	10800044 	addi	r2,r2,1
 403a450:	e0bff48d 	sth	r2,-46(fp)
 403a454:	e0fff48b 	ldhu	r3,-46(fp)
 403a458:	e0bff50b 	ldhu	r2,-44(fp)
 403a45c:	18bf3136 	bltu	r3,r2,403a124 <ip_fragment+0x2a0>

   } /* end FOR (all child fragments) */

   /* free the parent buffer since all of the data from it have been copied 
    * out into the child fragments */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403a460:	01000084 	movi	r4,2
 403a464:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 403a468:	e13ffa17 	ldw	r4,-24(fp)
 403a46c:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403a470:	01000084 	movi	r4,2
 403a474:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   ip_mib.ipFragOKs++;     /* count packets we fragmented */
 403a478:	008101b4 	movhi	r2,1030
 403a47c:	10a44e04 	addi	r2,r2,-28360
 403a480:	10801017 	ldw	r2,64(r2)
 403a484:	10c00044 	addi	r3,r2,1
 403a488:	008101b4 	movhi	r2,1030
 403a48c:	10a44e04 	addi	r2,r2,-28360
 403a490:	10c01015 	stw	r3,64(r2)

   return 0;
 403a494:	e03ffe15 	stw	zero,-8(fp)
 403a498:	e0bffe17 	ldw	r2,-8(fp)
}
 403a49c:	e037883a 	mov	sp,fp
 403a4a0:	dfc00117 	ldw	ra,4(sp)
 403a4a4:	df000017 	ldw	fp,0(sp)
 403a4a8:	dec00204 	addi	sp,sp,8
 403a4ac:	f800283a 	ret

0403a4b0 <ip_mymach>:
 * certain foreign host. 
 */

ip_addr
ip_mymach(ip_addr host)
{
 403a4b0:	defff904 	addi	sp,sp,-28
 403a4b4:	dfc00615 	stw	ra,24(sp)
 403a4b8:	df000515 	stw	fp,20(sp)
 403a4bc:	df000504 	addi	fp,sp,20
 403a4c0:	e13ffe15 	stw	r4,-8(fp)

#ifndef MULTI_HOMED /* single static interface */
   USE_ARG(host);
   return(nets[0]->n_ipaddr);   /* always use address from only net */
#else   /* MULTI_HOMED */
   tnet = iproute(host, &temp);
 403a4c4:	e17ffd04 	addi	r5,fp,-12
 403a4c8:	e13ffe17 	ldw	r4,-8(fp)
 403a4cc:	403a8140 	call	403a814 <iproute>
 403a4d0:	e0bffc15 	stw	r2,-16(fp)
   if (tnet == 0)
 403a4d4:	e0bffc17 	ldw	r2,-16(fp)
 403a4d8:	1004c03a 	cmpne	r2,r2,zero
 403a4dc:	1000161e 	bne	r2,zero,403a538 <ip_mymach+0x88>
   {
#ifdef   NPDEBUG
      if (NDEBUG & (PROTERR|INFOMSG))
 403a4e0:	00810174 	movhi	r2,1029
 403a4e4:	1081bf04 	addi	r2,r2,1788
 403a4e8:	10800017 	ldw	r2,0(r2)
 403a4ec:	1080050c 	andi	r2,r2,20
 403a4f0:	1005003a 	cmpeq	r2,r2,zero
 403a4f4:	10000e1e 	bne	r2,zero,403a530 <ip_mymach+0x80>
         dprintf("IP: Couldn't route to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 403a4f8:	e0bffe17 	ldw	r2,-8(fp)
 403a4fc:	11403fcc 	andi	r5,r2,255
 403a500:	e0bffe17 	ldw	r2,-8(fp)
 403a504:	1004d23a 	srli	r2,r2,8
 403a508:	11803fcc 	andi	r6,r2,255
 403a50c:	e0bffe17 	ldw	r2,-8(fp)
 403a510:	1004d43a 	srli	r2,r2,16
 403a514:	11c03fcc 	andi	r7,r2,255
 403a518:	e0bffe17 	ldw	r2,-8(fp)
 403a51c:	1004d63a 	srli	r2,r2,24
 403a520:	d8800015 	stw	r2,0(sp)
 403a524:	01010174 	movhi	r4,1029
 403a528:	212f6604 	addi	r4,r4,-17000
 403a52c:	400207c0 	call	400207c <printf>
#endif   /* NPDEBUG */
      return 0L;
 403a530:	e03fff15 	stw	zero,-4(fp)
 403a534:	00000306 	br	403a544 <ip_mymach+0x94>
   }
   return tnet->n_ipaddr;
 403a538:	e0bffc17 	ldw	r2,-16(fp)
 403a53c:	10800a17 	ldw	r2,40(r2)
 403a540:	e0bfff15 	stw	r2,-4(fp)
 403a544:	e0bfff17 	ldw	r2,-4(fp)
#endif /* MULTI_HOMED */
}
 403a548:	e037883a 	mov	sp,fp
 403a54c:	dfc00117 	ldw	ra,4(sp)
 403a550:	df000017 	ldw	fp,0(sp)
 403a554:	dec00204 	addi	sp,sp,8
 403a558:	f800283a 	ret

0403a55c <ip_dump>:
 * RETURNS: void
 */

void
ip_dump(PACKET p)
{
 403a55c:	defff204 	addi	sp,sp,-56
 403a560:	dfc00d15 	stw	ra,52(sp)
 403a564:	df000c15 	stw	fp,48(sp)
 403a568:	df000c04 	addi	fp,sp,48
 403a56c:	e13ffa15 	stw	r4,-24(fp)
   struct ip * pip;
   unsigned char * cp;
   unsigned short xsum, osum;

   pip = ip_head(p);
 403a570:	e0bffa17 	ldw	r2,-24(fp)
 403a574:	10800317 	ldw	r2,12(r2)
 403a578:	e0bff915 	stw	r2,-28(fp)
   osum = pip->ip_chksum;
 403a57c:	e0bff917 	ldw	r2,-28(fp)
 403a580:	1080028b 	ldhu	r2,10(r2)
 403a584:	e0bff70d 	sth	r2,-36(fp)
   pip->ip_chksum = 0;
 403a588:	e0bff917 	ldw	r2,-28(fp)
 403a58c:	1000028d 	sth	zero,10(r2)
   xsum = ~cksum(pip, ip_hlen(pip) >> 1);
 403a590:	e0bff917 	ldw	r2,-28(fp)
 403a594:	10800003 	ldbu	r2,0(r2)
 403a598:	10803fcc 	andi	r2,r2,255
 403a59c:	108003cc 	andi	r2,r2,15
 403a5a0:	1085883a 	add	r2,r2,r2
 403a5a4:	1085883a 	add	r2,r2,r2
 403a5a8:	1005d07a 	srai	r2,r2,1
 403a5ac:	100b883a 	mov	r5,r2
 403a5b0:	e13ff917 	ldw	r4,-28(fp)
 403a5b4:	4020a000 	call	4020a00 <cksum>
 403a5b8:	0084303a 	nor	r2,zero,r2
 403a5bc:	e0bff78d 	sth	r2,-34(fp)

   if (osum != xsum)          /* trap here if checksum is wrong */
 403a5c0:	e0fff70b 	ldhu	r3,-36(fp)
 403a5c4:	e0bff78b 	ldhu	r2,-34(fp)
 403a5c8:	18800126 	beq	r3,r2,403a5d0 <ip_dump+0x74>
   {
      dtrap();
 403a5cc:	4025bb40 	call	4025bb4 <dtrap>
   /* dtrap() is fatal in the default Windows implementation, so
    * we comment it out */
   dtrap();       /* use debugger to view variables & packet */
#endif

   ns_printf(NULL ,"IP packet header:\n");
 403a5d0:	0009883a 	mov	r4,zero
 403a5d4:	01410174 	movhi	r5,1029
 403a5d8:	296f6f04 	addi	r5,r5,-16964
 403a5dc:	40210380 	call	4021038 <ns_printf>
   cp = (unsigned char *)pip;    /* make char pointer for bitmasks */
 403a5e0:	e0bff917 	ldw	r2,-28(fp)
 403a5e4:	e0bff815 	stw	r2,-32(fp)
   ns_printf(NULL ,"ver/hlen: %02x, TOS: %02x, len: %04x, id: %04x\n",
 403a5e8:	e0bff817 	ldw	r2,-32(fp)
 403a5ec:	10800003 	ldbu	r2,0(r2)
 403a5f0:	11803fcc 	andi	r6,r2,255
 403a5f4:	e0bff817 	ldw	r2,-32(fp)
 403a5f8:	10800044 	addi	r2,r2,1
 403a5fc:	10800003 	ldbu	r2,0(r2)
 403a600:	11c03fcc 	andi	r7,r2,255
 403a604:	e0bff917 	ldw	r2,-28(fp)
 403a608:	1080008b 	ldhu	r2,2(r2)
 403a60c:	10bfffcc 	andi	r2,r2,65535
 403a610:	1004d23a 	srli	r2,r2,8
 403a614:	10bfffcc 	andi	r2,r2,65535
 403a618:	10c03fcc 	andi	r3,r2,255
 403a61c:	e0bff917 	ldw	r2,-28(fp)
 403a620:	1080008b 	ldhu	r2,2(r2)
 403a624:	10bfffcc 	andi	r2,r2,65535
 403a628:	1004923a 	slli	r2,r2,8
 403a62c:	10bfc00c 	andi	r2,r2,65280
 403a630:	1888b03a 	or	r4,r3,r2
 403a634:	e0bff917 	ldw	r2,-28(fp)
 403a638:	1080010b 	ldhu	r2,4(r2)
 403a63c:	10bfffcc 	andi	r2,r2,65535
 403a640:	1004d23a 	srli	r2,r2,8
 403a644:	10bfffcc 	andi	r2,r2,65535
 403a648:	10c03fcc 	andi	r3,r2,255
 403a64c:	e0bff917 	ldw	r2,-28(fp)
 403a650:	1080010b 	ldhu	r2,4(r2)
 403a654:	10bfffcc 	andi	r2,r2,65535
 403a658:	1004923a 	slli	r2,r2,8
 403a65c:	10bfc00c 	andi	r2,r2,65280
 403a660:	1884b03a 	or	r2,r3,r2
 403a664:	d9000015 	stw	r4,0(sp)
 403a668:	d8800115 	stw	r2,4(sp)
 403a66c:	0009883a 	mov	r4,zero
 403a670:	01410174 	movhi	r5,1029
 403a674:	296f7404 	addi	r5,r5,-16944
 403a678:	40210380 	call	4021038 <ns_printf>
    *cp, *(cp+1), htons(pip->ip_len), htons(pip->ip_id));
   ns_printf(NULL ,"flags/offs: %04x, TTL %02x, protocol: %02x, cksum: %04x (%s)\n",
 403a67c:	e0bff817 	ldw	r2,-32(fp)
 403a680:	10800184 	addi	r2,r2,6
 403a684:	1080000b 	ldhu	r2,0(r2)
 403a688:	10bfffcc 	andi	r2,r2,65535
 403a68c:	1004d23a 	srli	r2,r2,8
 403a690:	10bfffcc 	andi	r2,r2,65535
 403a694:	10c03fcc 	andi	r3,r2,255
 403a698:	e0bff817 	ldw	r2,-32(fp)
 403a69c:	10800184 	addi	r2,r2,6
 403a6a0:	1080000b 	ldhu	r2,0(r2)
 403a6a4:	10bfffcc 	andi	r2,r2,65535
 403a6a8:	1004923a 	slli	r2,r2,8
 403a6ac:	10bfc00c 	andi	r2,r2,65280
 403a6b0:	1886b03a 	or	r3,r3,r2
 403a6b4:	e0ffff15 	stw	r3,-4(fp)
 403a6b8:	e0bff917 	ldw	r2,-28(fp)
 403a6bc:	10800203 	ldbu	r2,8(r2)
 403a6c0:	10803fcc 	andi	r2,r2,255
 403a6c4:	e0bffe15 	stw	r2,-8(fp)
 403a6c8:	e0bff917 	ldw	r2,-28(fp)
 403a6cc:	10800243 	ldbu	r2,9(r2)
 403a6d0:	10803fcc 	andi	r2,r2,255
 403a6d4:	e0bffd15 	stw	r2,-12(fp)
 403a6d8:	e0bff70b 	ldhu	r2,-36(fp)
 403a6dc:	1004d23a 	srli	r2,r2,8
 403a6e0:	10bfffcc 	andi	r2,r2,65535
 403a6e4:	10c03fcc 	andi	r3,r2,255
 403a6e8:	e0bff70b 	ldhu	r2,-36(fp)
 403a6ec:	1004923a 	slli	r2,r2,8
 403a6f0:	10bfc00c 	andi	r2,r2,65280
 403a6f4:	1886b03a 	or	r3,r3,r2
 403a6f8:	e0fffc15 	stw	r3,-16(fp)
 403a6fc:	e0fff70b 	ldhu	r3,-36(fp)
 403a700:	e0bff78b 	ldhu	r2,-34(fp)
 403a704:	1880041e 	bne	r3,r2,403a718 <ip_dump+0x1bc>
 403a708:	00810174 	movhi	r2,1029
 403a70c:	10af8004 	addi	r2,r2,-16896
 403a710:	e0bffb15 	stw	r2,-20(fp)
 403a714:	00000306 	br	403a724 <ip_dump+0x1c8>
 403a718:	00810174 	movhi	r2,1029
 403a71c:	10af8104 	addi	r2,r2,-16892
 403a720:	e0bffb15 	stw	r2,-20(fp)
 403a724:	e0bffd17 	ldw	r2,-12(fp)
 403a728:	d8800015 	stw	r2,0(sp)
 403a72c:	e0bffc17 	ldw	r2,-16(fp)
 403a730:	d8800115 	stw	r2,4(sp)
 403a734:	e0bffb17 	ldw	r2,-20(fp)
 403a738:	d8800215 	stw	r2,8(sp)
 403a73c:	0009883a 	mov	r4,zero
 403a740:	01410174 	movhi	r5,1029
 403a744:	296f8204 	addi	r5,r5,-16888
 403a748:	e1bfff17 	ldw	r6,-4(fp)
 403a74c:	e1fffe17 	ldw	r7,-8(fp)
 403a750:	40210380 	call	4021038 <ns_printf>
    htons(*(unshort*)(cp+6)), pip->ip_time, pip->ip_prot, 
    htons(osum), (osum==xsum)?"ok":"bad");
   ns_printf(NULL ,"src: %u.%u.%u.%u  ", PUSH_IPADDR(pip->ip_src));
 403a754:	e0bff917 	ldw	r2,-28(fp)
 403a758:	10800317 	ldw	r2,12(r2)
 403a75c:	11803fcc 	andi	r6,r2,255
 403a760:	e0bff917 	ldw	r2,-28(fp)
 403a764:	10800317 	ldw	r2,12(r2)
 403a768:	1004d23a 	srli	r2,r2,8
 403a76c:	11c03fcc 	andi	r7,r2,255
 403a770:	e0bff917 	ldw	r2,-28(fp)
 403a774:	10800317 	ldw	r2,12(r2)
 403a778:	1004d43a 	srli	r2,r2,16
 403a77c:	10c03fcc 	andi	r3,r2,255
 403a780:	e0bff917 	ldw	r2,-28(fp)
 403a784:	10800317 	ldw	r2,12(r2)
 403a788:	1004d63a 	srli	r2,r2,24
 403a78c:	d8c00015 	stw	r3,0(sp)
 403a790:	d8800115 	stw	r2,4(sp)
 403a794:	0009883a 	mov	r4,zero
 403a798:	01410174 	movhi	r5,1029
 403a79c:	296f9204 	addi	r5,r5,-16824
 403a7a0:	40210380 	call	4021038 <ns_printf>
   ns_printf(NULL ,"dest: %u.%u.%u.%u\n", PUSH_IPADDR(pip->ip_dest));
 403a7a4:	e0bff917 	ldw	r2,-28(fp)
 403a7a8:	10800417 	ldw	r2,16(r2)
 403a7ac:	11803fcc 	andi	r6,r2,255
 403a7b0:	e0bff917 	ldw	r2,-28(fp)
 403a7b4:	10800417 	ldw	r2,16(r2)
 403a7b8:	1004d23a 	srli	r2,r2,8
 403a7bc:	11c03fcc 	andi	r7,r2,255
 403a7c0:	e0bff917 	ldw	r2,-28(fp)
 403a7c4:	10800417 	ldw	r2,16(r2)
 403a7c8:	1004d43a 	srli	r2,r2,16
 403a7cc:	10c03fcc 	andi	r3,r2,255
 403a7d0:	e0bff917 	ldw	r2,-28(fp)
 403a7d4:	10800417 	ldw	r2,16(r2)
 403a7d8:	1004d63a 	srli	r2,r2,24
 403a7dc:	d8c00015 	stw	r3,0(sp)
 403a7e0:	d8800115 	stw	r2,4(sp)
 403a7e4:	0009883a 	mov	r4,zero
 403a7e8:	01410174 	movhi	r5,1029
 403a7ec:	296f9704 	addi	r5,r5,-16804
 403a7f0:	40210380 	call	4021038 <ns_printf>

   pip->ip_chksum = osum;     /* fix what we clobbered */
 403a7f4:	e0fff917 	ldw	r3,-28(fp)
 403a7f8:	e0bff70b 	ldhu	r2,-36(fp)
 403a7fc:	1880028d 	sth	r2,10(r3)
}
 403a800:	e037883a 	mov	sp,fp
 403a804:	dfc00117 	ldw	ra,4(sp)
 403a808:	df000017 	ldw	fp,0(sp)
 403a80c:	dec00204 	addi	sp,sp,8
 403a810:	f800283a 	ret

0403a814 <iproute>:
 * RETURNS: Returns NULL when unable to route, else returns a NET pointer.
 */

NET
iproute(ip_addr host, ip_addr * hop1)
{
 403a814:	defff704 	addi	sp,sp,-36
 403a818:	dfc00815 	stw	ra,32(sp)
 403a81c:	df000715 	stw	fp,28(sp)
 403a820:	df000704 	addi	fp,sp,28
 403a824:	e13ffd15 	stw	r4,-12(fp)
 403a828:	e17ffe15 	stw	r5,-8(fp)
   NET      ifp;
#ifdef IP_ROUTING
   RTMIB    rtp;
#endif   /* IP_ROUTING */

   if (host == 0L)      /* Sanity check parameter. */
 403a82c:	e0bffd17 	ldw	r2,-12(fp)
 403a830:	1004c03a 	cmpne	r2,r2,zero
 403a834:	1000021e 	bne	r2,zero,403a840 <iproute+0x2c>
      return NULL;
 403a838:	e03fff15 	stw	zero,-4(fp)
 403a83c:	00008a06 	br	403aa68 <iproute+0x254>
    * stack has been initialized (tk_yield() gets called out of the 
    * dialer code as part of PPP initialization), one symptom of 
    * which is the routing table not being present yet. if this 
    * happens, quit. 
    */
   if (rt_mib == NULL)
 403a840:	d0a84417 	ldw	r2,-24304(gp)
 403a844:	1004c03a 	cmpne	r2,r2,zero
 403a848:	1000021e 	bne	r2,zero,403a854 <iproute+0x40>
      return NULL;
 403a84c:	e03fff15 	stw	zero,-4(fp)
 403a850:	00008506 	br	403aa68 <iproute+0x254>
#endif   /* BTREE_ROUTING */

   /* see if the host matches the cached route */
   if (cachedRoute)     /* don't test this if route is null  */
 403a854:	00810174 	movhi	r2,1029
 403a858:	10820c04 	addi	r2,r2,2096
 403a85c:	10800017 	ldw	r2,0(r2)
 403a860:	1005003a 	cmpeq	r2,r2,zero
 403a864:	1000191e 	bne	r2,zero,403a8cc <iproute+0xb8>
   {
      if (cachedRoute->ipRouteDest == host)    /* exact match */
 403a868:	00810174 	movhi	r2,1029
 403a86c:	10820c04 	addi	r2,r2,2096
 403a870:	10800017 	ldw	r2,0(r2)
 403a874:	10c00017 	ldw	r3,0(r2)
 403a878:	e0bffd17 	ldw	r2,-12(fp)
 403a87c:	1880131e 	bne	r3,r2,403a8cc <iproute+0xb8>
      {
         *hop1 = cachedRoute->ipRouteNextHop;   /* fill in nexthop IP addr */
 403a880:	00810174 	movhi	r2,1029
 403a884:	10820c04 	addi	r2,r2,2096
 403a888:	10800017 	ldw	r2,0(r2)
 403a88c:	10c00617 	ldw	r3,24(r2)
 403a890:	e0bffe17 	ldw	r2,-8(fp)
 403a894:	10c00015 	stw	r3,0(r2)
         cachedRoute->ipRouteAge = cticks;      /* timestamp route entry */
 403a898:	00810174 	movhi	r2,1029
 403a89c:	10820c04 	addi	r2,r2,2096
 403a8a0:	10c00017 	ldw	r3,0(r2)
 403a8a4:	00810174 	movhi	r2,1029
 403a8a8:	1081e404 	addi	r2,r2,1936
 403a8ac:	10800017 	ldw	r2,0(r2)
 403a8b0:	18800915 	stw	r2,36(r3)
         return(cachedRoute->ifp); /* net to send on */
 403a8b4:	00810174 	movhi	r2,1029
 403a8b8:	10820c04 	addi	r2,r2,2096
 403a8bc:	10800017 	ldw	r2,0(r2)
 403a8c0:	10800e17 	ldw	r2,56(r2)
 403a8c4:	e0bfff15 	stw	r2,-4(fp)
 403a8c8:	00006706 	br	403aa68 <iproute+0x254>
      }
   }

   rtp = rt_lookup(host);
 403a8cc:	e13ffd17 	ldw	r4,-12(fp)
 403a8d0:	403e0a80 	call	403e0a8 <rt_lookup>
 403a8d4:	e0bffa15 	stw	r2,-24(fp)
   if(rtp)
 403a8d8:	e0bffa17 	ldw	r2,-24(fp)
 403a8dc:	1005003a 	cmpeq	r2,r2,zero
 403a8e0:	10000c1e 	bne	r2,zero,403a914 <iproute+0x100>
   {
      cachedRoute = rtp;
 403a8e4:	00c10174 	movhi	r3,1029
 403a8e8:	18c20c04 	addi	r3,r3,2096
 403a8ec:	e0bffa17 	ldw	r2,-24(fp)
 403a8f0:	18800015 	stw	r2,0(r3)
      *hop1 = rtp->ipRouteNextHop;  /* fill in IP dest (next hop) */
 403a8f4:	e0bffa17 	ldw	r2,-24(fp)
 403a8f8:	10c00617 	ldw	r3,24(r2)
 403a8fc:	e0bffe17 	ldw	r2,-8(fp)
 403a900:	10c00015 	stw	r3,0(r2)
      return(rtp->ifp);             /* return pointer to net */
 403a904:	e0bffa17 	ldw	r2,-24(fp)
 403a908:	10800e17 	ldw	r2,56(r2)
 403a90c:	e0bfff15 	stw	r2,-4(fp)
 403a910:	00005506 	br	403aa68 <iproute+0x254>
    * the initial state for the for loop that iterates through the
    * list), but only build the iterator for multi-homed systems
    * because single-homed systems are often memory-limited systems as
    * well.  
    */
   ifp = (NET)(netlist.q_head);
 403a914:	008101b4 	movhi	r2,1030
 403a918:	10a44904 	addi	r2,r2,-28380
 403a91c:	10800017 	ldw	r2,0(r2)
 403a920:	e0bffb15 	stw	r2,-20(fp)
   i = 0;
 403a924:	e03ffc15 	stw	zero,-16(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
 403a928:	00002f06 	br	403a9e8 <iproute+0x1d4>
#endif /* MULTI_HOMED */
   {
      if((ifp->snmask != 0) &&      /* skip ifaces with no IP or subnet mask set */
 403a92c:	e0bffb17 	ldw	r2,-20(fp)
 403a930:	10800c17 	ldw	r2,48(r2)
 403a934:	1005003a 	cmpeq	r2,r2,zero
 403a938:	1000251e 	bne	r2,zero,403a9d0 <iproute+0x1bc>
 403a93c:	e0bffb17 	ldw	r2,-20(fp)
 403a940:	10800a17 	ldw	r2,40(r2)
 403a944:	1005003a 	cmpeq	r2,r2,zero
 403a948:	1000211e 	bne	r2,zero,403a9d0 <iproute+0x1bc>
 403a94c:	e0bffb17 	ldw	r2,-20(fp)
 403a950:	10c00a17 	ldw	r3,40(r2)
 403a954:	e0bffb17 	ldw	r2,-20(fp)
 403a958:	10800c17 	ldw	r2,48(r2)
 403a95c:	1888703a 	and	r4,r3,r2
 403a960:	e0bffb17 	ldw	r2,-20(fp)
 403a964:	10c00c17 	ldw	r3,48(r2)
 403a968:	e0bffd17 	ldw	r2,-12(fp)
 403a96c:	1884703a 	and	r2,r3,r2
 403a970:	2080171e 	bne	r4,r2,403a9d0 <iproute+0x1bc>
         (ifp->n_ipaddr != 0) && 
         ((ifp->n_ipaddr & ifp->snmask) == (host & ifp->snmask)))
      {
#ifdef IP_ROUTING
         /* make a cached Route entry for next time */
         cachedRoute = add_route(host, 0xFFFFFFFF, host, i, IPRP_OTHER);
 403a974:	00800044 	movi	r2,1
 403a978:	d8800015 	stw	r2,0(sp)
 403a97c:	e13ffd17 	ldw	r4,-12(fp)
 403a980:	017fffc4 	movi	r5,-1
 403a984:	e1bffd17 	ldw	r6,-12(fp)
 403a988:	e1fffc17 	ldw	r7,-16(fp)
 403a98c:	403e22c0 	call	403e22c <add_route>
 403a990:	1007883a 	mov	r3,r2
 403a994:	00810174 	movhi	r2,1029
 403a998:	10820c04 	addi	r2,r2,2096
 403a99c:	10c00015 	stw	r3,0(r2)
#ifdef NPDEBUG
         if (cachedRoute == NULL)
 403a9a0:	00810174 	movhi	r2,1029
 403a9a4:	10820c04 	addi	r2,r2,2096
 403a9a8:	10800017 	ldw	r2,0(r2)
 403a9ac:	1004c03a 	cmpne	r2,r2,zero
 403a9b0:	1000011e 	bne	r2,zero,403a9b8 <iproute+0x1a4>
            dtrap();
 403a9b4:	4025bb40 	call	4025bb4 <dtrap>
#endif   /* NPDEBUG */
#endif   /* IP_ROUTING */
         *hop1 = host;
 403a9b8:	e0fffe17 	ldw	r3,-8(fp)
 403a9bc:	e0bffd17 	ldw	r2,-12(fp)
 403a9c0:	18800015 	stw	r2,0(r3)
         return ifp;
 403a9c4:	e0bffb17 	ldw	r2,-20(fp)
 403a9c8:	e0bfff15 	stw	r2,-4(fp)
 403a9cc:	00002606 	br	403aa68 <iproute+0x254>
    * well.  
    */
   ifp = (NET)(netlist.q_head);
   i = 0;
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next, i++)
 403a9d0:	e0bffb17 	ldw	r2,-20(fp)
 403a9d4:	10800017 	ldw	r2,0(r2)
 403a9d8:	e0bffb15 	stw	r2,-20(fp)
 403a9dc:	e0bffc17 	ldw	r2,-16(fp)
 403a9e0:	10800044 	addi	r2,r2,1
 403a9e4:	e0bffc15 	stw	r2,-16(fp)
 403a9e8:	e0bffb17 	ldw	r2,-20(fp)
 403a9ec:	1004c03a 	cmpne	r2,r2,zero
 403a9f0:	103fce1e 	bne	r2,zero,403a92c <iproute+0x118>
#endif   /* IP_LOOPBACK */

   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
 403a9f4:	008101b4 	movhi	r2,1030
 403a9f8:	10a44904 	addi	r2,r2,-28380
 403a9fc:	10800017 	ldw	r2,0(r2)
 403aa00:	e0bffb15 	stw	r2,-20(fp)
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
 403aa04:	00000e06 	br	403aa40 <iproute+0x22c>
#endif   /* MULTI_HOMED */
   {
      /* Check if this net has a gateway */
      if(ifp->n_defgw)
 403aa08:	e0bffb17 	ldw	r2,-20(fp)
 403aa0c:	10800d17 	ldw	r2,52(r2)
 403aa10:	1005003a 	cmpeq	r2,r2,zero
 403aa14:	1000071e 	bne	r2,zero,403aa34 <iproute+0x220>
      {
         *hop1 = ifp->n_defgw;
 403aa18:	e0bffb17 	ldw	r2,-20(fp)
 403aa1c:	10c00d17 	ldw	r3,52(r2)
 403aa20:	e0bffe17 	ldw	r2,-8(fp)
 403aa24:	10c00015 	stw	r3,0(r2)
         return ifp;
 403aa28:	e0bffb17 	ldw	r2,-20(fp)
 403aa2c:	e0bfff15 	stw	r2,-4(fp)
 403aa30:	00000d06 	br	403aa68 <iproute+0x254>
   /* The host isn't on a net I'm on, so send it to the default 
    * gateway on the first net which has one. 
    */
   ifp = (NET)(netlist.q_head);
#ifdef MULTI_HOMED
   for(; ifp; ifp = ifp->n_next)
 403aa34:	e0bffb17 	ldw	r2,-20(fp)
 403aa38:	10800017 	ldw	r2,0(r2)
 403aa3c:	e0bffb15 	stw	r2,-20(fp)
 403aa40:	e0bffb17 	ldw	r2,-20(fp)
 403aa44:	1004c03a 	cmpne	r2,r2,zero
 403aa48:	103fef1e 	bne	r2,zero,403aa08 <iproute+0x1f4>
   /* if no gateway is set, then change the first hop address to the 
    * host we're trying to route to. this is just a kluge to make 
    * this work with arp routing. otherwise, we would try to return 
    * some sort of error indication. 
    */
   *hop1 = host;
 403aa4c:	e0fffe17 	ldw	r3,-8(fp)
 403aa50:	e0bffd17 	ldw	r2,-12(fp)
 403aa54:	18800015 	stw	r2,0(r3)
   return((NET)(netlist.q_head));
 403aa58:	008101b4 	movhi	r2,1030
 403aa5c:	10a44904 	addi	r2,r2,-28380
 403aa60:	10800017 	ldw	r2,0(r2)
 403aa64:	e0bfff15 	stw	r2,-4(fp)
 403aa68:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* STRICT_SUBNETTING */
}
 403aa6c:	e037883a 	mov	sp,fp
 403aa70:	dfc00117 	ldw	ra,4(sp)
 403aa74:	df000017 	ldw	fp,0(sp)
 403aa78:	dec00204 	addi	sp,sp,8
 403aa7c:	f800283a 	ret

0403aa80 <ip_copypkt>:
 * RETURNS: a pointer to the new copy of the packet,
 *          or NULL if no packet buffer could be allocated
 */
PACKET
ip_copypkt(PACKET p)
{
 403aa80:	defffa04 	addi	sp,sp,-24
 403aa84:	dfc00515 	stw	ra,20(sp)
 403aa88:	df000415 	stw	fp,16(sp)
 403aa8c:	df000404 	addi	fp,sp,16
 403aa90:	e13ffe15 	stw	r4,-8(fp)
   int len;

   /* figure out how much we need to copy from the packet, 
    * and allocate a new buffer to hold it 
    */
   len = p->nb_plen + (p->nb_prot - p->nb_buff);
 403aa94:	e0bffe17 	ldw	r2,-8(fp)
 403aa98:	11000417 	ldw	r4,16(r2)
 403aa9c:	e0bffe17 	ldw	r2,-8(fp)
 403aaa0:	10800317 	ldw	r2,12(r2)
 403aaa4:	1007883a 	mov	r3,r2
 403aaa8:	e0bffe17 	ldw	r2,-8(fp)
 403aaac:	10800117 	ldw	r2,4(r2)
 403aab0:	1885c83a 	sub	r2,r3,r2
 403aab4:	2085883a 	add	r2,r4,r2
 403aab8:	e0bffc15 	stw	r2,-16(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403aabc:	01000084 	movi	r4,2
 403aac0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   np = pk_alloc(len);
 403aac4:	e13ffc17 	ldw	r4,-16(fp)
 403aac8:	4024f700 	call	4024f70 <pk_alloc>
 403aacc:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403aad0:	01000084 	movi	r4,2
 403aad4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (np == NULL)
 403aad8:	e0bffd17 	ldw	r2,-12(fp)
 403aadc:	1004c03a 	cmpne	r2,r2,zero
 403aae0:	1000061e 	bne	r2,zero,403aafc <ip_copypkt+0x7c>
   {
#ifdef NPDEBUG
      dprintf("ip_copypkt(): unable to obtain packet (len %d)\n", len);
 403aae4:	01010174 	movhi	r4,1029
 403aae8:	212f9c04 	addi	r4,r4,-16784
 403aaec:	e17ffc17 	ldw	r5,-16(fp)
 403aaf0:	400207c0 	call	400207c <printf>
#endif
      return NULL;
 403aaf4:	e03fff15 	stw	zero,-4(fp)
 403aaf8:	00002906 	br	403aba0 <ip_copypkt+0x120>
   }

   /* copy packet data into new buffer */
   MEMCPY(np->nb_buff, p->nb_buff, len);
 403aafc:	e0bffd17 	ldw	r2,-12(fp)
 403ab00:	11000117 	ldw	r4,4(r2)
 403ab04:	e0bffe17 	ldw	r2,-8(fp)
 403ab08:	10800117 	ldw	r2,4(r2)
 403ab0c:	e0fffc17 	ldw	r3,-16(fp)
 403ab10:	100b883a 	mov	r5,r2
 403ab14:	180d883a 	mov	r6,r3
 403ab18:	4001de40 	call	4001de4 <memcpy>

   /* copy relevant packet fields */
   np->nb_prot = np->nb_buff + (p->nb_prot - p->nb_buff);
 403ab1c:	e0bffd17 	ldw	r2,-12(fp)
 403ab20:	11000117 	ldw	r4,4(r2)
 403ab24:	e0bffe17 	ldw	r2,-8(fp)
 403ab28:	10800317 	ldw	r2,12(r2)
 403ab2c:	1007883a 	mov	r3,r2
 403ab30:	e0bffe17 	ldw	r2,-8(fp)
 403ab34:	10800117 	ldw	r2,4(r2)
 403ab38:	1885c83a 	sub	r2,r3,r2
 403ab3c:	2087883a 	add	r3,r4,r2
 403ab40:	e0bffd17 	ldw	r2,-12(fp)
 403ab44:	10c00315 	stw	r3,12(r2)
   np->nb_plen = p->nb_plen;
 403ab48:	e0bffe17 	ldw	r2,-8(fp)
 403ab4c:	10c00417 	ldw	r3,16(r2)
 403ab50:	e0bffd17 	ldw	r2,-12(fp)
 403ab54:	10c00415 	stw	r3,16(r2)
   np->net = p->net;
 403ab58:	e0bffe17 	ldw	r2,-8(fp)
 403ab5c:	10c00617 	ldw	r3,24(r2)
 403ab60:	e0bffd17 	ldw	r2,-12(fp)
 403ab64:	10c00615 	stw	r3,24(r2)
   np->fhost = p->fhost;
 403ab68:	e0bffe17 	ldw	r2,-8(fp)
 403ab6c:	10c00717 	ldw	r3,28(r2)
 403ab70:	e0bffd17 	ldw	r2,-12(fp)
 403ab74:	10c00715 	stw	r3,28(r2)
   np->type = p->type;
 403ab78:	e0bffe17 	ldw	r2,-8(fp)
 403ab7c:	10c0080b 	ldhu	r3,32(r2)
 403ab80:	e0bffd17 	ldw	r2,-12(fp)
 403ab84:	10c0080d 	sth	r3,32(r2)
   np->nb_tstamp = p->nb_tstamp;
 403ab88:	e0bffe17 	ldw	r2,-8(fp)
 403ab8c:	10c00517 	ldw	r3,20(r2)
 403ab90:	e0bffd17 	ldw	r2,-12(fp)
 403ab94:	10c00515 	stw	r3,20(r2)

   /* return pointer to the copy */
   return np;
 403ab98:	e0bffd17 	ldw	r2,-12(fp)
 403ab9c:	e0bfff15 	stw	r2,-4(fp)
 403aba0:	e0bfff17 	ldw	r2,-4(fp)
}
 403aba4:	e037883a 	mov	sp,fp
 403aba8:	dfc00117 	ldw	ra,4(sp)
 403abac:	df000017 	ldw	fp,0(sp)
 403abb0:	dec00204 	addi	sp,sp,8
 403abb4:	f800283a 	ret

0403abb8 <ip_reasm_match_frag_with_ire>:
packet being processed.  If no such entry is found, this function returns 
NULL.
*/

IREP ip_reasm_match_frag_with_ire (struct ip * pip)
{
 403abb8:	defff904 	addi	sp,sp,-28
 403abbc:	df000615 	stw	fp,24(sp)
 403abc0:	df000604 	addi	fp,sp,24
 403abc4:	e13ffe15 	stw	r4,-8(fp)
   ip_addr dest;
   u_char prot;
   u_short id;
   IREP tmpp;
 
   src = pip->ip_src;
 403abc8:	e0bffe17 	ldw	r2,-8(fp)
 403abcc:	10800317 	ldw	r2,12(r2)
 403abd0:	e0bffd15 	stw	r2,-12(fp)
   dest = pip->ip_dest;
 403abd4:	e0bffe17 	ldw	r2,-8(fp)
 403abd8:	10800417 	ldw	r2,16(r2)
 403abdc:	e0bffc15 	stw	r2,-16(fp)
   prot = pip->ip_prot;
 403abe0:	e0bffe17 	ldw	r2,-8(fp)
 403abe4:	10800243 	ldbu	r2,9(r2)
 403abe8:	e0bffb85 	stb	r2,-18(fp)
   id = pip->ip_id;
 403abec:	e0bffe17 	ldw	r2,-8(fp)
 403abf0:	1080010b 	ldhu	r2,4(r2)
 403abf4:	e0bffb0d 	sth	r2,-20(fp)

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403abf8:	d0a84617 	ldw	r2,-24296(gp)
 403abfc:	e0bffa15 	stw	r2,-24(fp)
 403ac00:	00001806 	br	403ac64 <ip_reasm_match_frag_with_ire+0xac>
      {
      if ((tmpp->src == src) && (tmpp->dest == dest) && 
 403ac04:	e0bffa17 	ldw	r2,-24(fp)
 403ac08:	10c00117 	ldw	r3,4(r2)
 403ac0c:	e0bffd17 	ldw	r2,-12(fp)
 403ac10:	1880111e 	bne	r3,r2,403ac58 <ip_reasm_match_frag_with_ire+0xa0>
 403ac14:	e0bffa17 	ldw	r2,-24(fp)
 403ac18:	10c00217 	ldw	r3,8(r2)
 403ac1c:	e0bffc17 	ldw	r2,-16(fp)
 403ac20:	18800d1e 	bne	r3,r2,403ac58 <ip_reasm_match_frag_with_ire+0xa0>
 403ac24:	e0bffa17 	ldw	r2,-24(fp)
 403ac28:	10800383 	ldbu	r2,14(r2)
 403ac2c:	10c03fcc 	andi	r3,r2,255
 403ac30:	e0bffb83 	ldbu	r2,-18(fp)
 403ac34:	1880081e 	bne	r3,r2,403ac58 <ip_reasm_match_frag_with_ire+0xa0>
 403ac38:	e0bffa17 	ldw	r2,-24(fp)
 403ac3c:	1080030b 	ldhu	r2,12(r2)
 403ac40:	10ffffcc 	andi	r3,r2,65535
 403ac44:	e0bffb0b 	ldhu	r2,-20(fp)
 403ac48:	1880031e 	bne	r3,r2,403ac58 <ip_reasm_match_frag_with_ire+0xa0>
          (tmpp->prot == prot) && (tmpp->id == id))
         {
         return tmpp; /* we've found a match */
 403ac4c:	e0bffa17 	ldw	r2,-24(fp)
 403ac50:	e0bfff15 	stw	r2,-4(fp)
 403ac54:	00000706 	br	403ac74 <ip_reasm_match_frag_with_ire+0xbc>
   prot = pip->ip_prot;
   id = pip->ip_id;

   /* note that multi-byte fields such as the source address, destination address,
    * and id fields are stored in the IRE structure in network byte order */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403ac58:	e0bffa17 	ldw	r2,-24(fp)
 403ac5c:	10800017 	ldw	r2,0(r2)
 403ac60:	e0bffa15 	stw	r2,-24(fp)
 403ac64:	e0bffa17 	ldw	r2,-24(fp)
 403ac68:	1004c03a 	cmpne	r2,r2,zero
 403ac6c:	103fe51e 	bne	r2,zero,403ac04 <ip_reasm_match_frag_with_ire+0x4c>
         return tmpp; /* we've found a match */
         }
      }

   /* no match found */
   return NULL;
 403ac70:	e03fff15 	stw	zero,-4(fp)
 403ac74:	e0bfff17 	ldw	r2,-4(fp)
}
 403ac78:	e037883a 	mov	sp,fp
 403ac7c:	df000017 	ldw	fp,0(sp)
 403ac80:	dec00104 	addi	sp,sp,4
 403ac84:	f800283a 	ret

0403ac88 <ip_reasm_determine_type_of_frag>:
OUTPUT: One of the various IP_FRAGTYPE values (IP_CP, IP_FF, IP_MF, 
or IP_LF)
*/

IP_FRAGTYPE ip_reasm_determine_type_of_frag (struct ip * pip)
{
 403ac88:	defffc04 	addi	sp,sp,-16
 403ac8c:	df000315 	stw	fp,12(sp)
 403ac90:	df000304 	addi	fp,sp,12
 403ac94:	e13fff15 	stw	r4,-4(fp)
  u_short mf;
  u_short foff;
  IP_FRAGTYPE rc;

  mf = (((ntohs(pip->ip_flgs_foff)) & IP_FLG_MF) >> 13);
 403ac98:	e0bfff17 	ldw	r2,-4(fp)
 403ac9c:	1080018b 	ldhu	r2,6(r2)
 403aca0:	10bfffcc 	andi	r2,r2,65535
 403aca4:	1004d23a 	srli	r2,r2,8
 403aca8:	10bfffcc 	andi	r2,r2,65535
 403acac:	10c03fcc 	andi	r3,r2,255
 403acb0:	e0bfff17 	ldw	r2,-4(fp)
 403acb4:	1080018b 	ldhu	r2,6(r2)
 403acb8:	10bfffcc 	andi	r2,r2,65535
 403acbc:	1004923a 	slli	r2,r2,8
 403acc0:	10bfc00c 	andi	r2,r2,65280
 403acc4:	1884b03a 	or	r2,r3,r2
 403acc8:	1088000c 	andi	r2,r2,8192
 403accc:	1005d37a 	srai	r2,r2,13
 403acd0:	e0bffe8d 	sth	r2,-6(fp)
  foff = ((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF);
 403acd4:	e0bfff17 	ldw	r2,-4(fp)
 403acd8:	1080018b 	ldhu	r2,6(r2)
 403acdc:	10bfffcc 	andi	r2,r2,65535
 403ace0:	1004d23a 	srli	r2,r2,8
 403ace4:	10803fcc 	andi	r2,r2,255
 403ace8:	1009883a 	mov	r4,r2
 403acec:	e0bfff17 	ldw	r2,-4(fp)
 403acf0:	1080018b 	ldhu	r2,6(r2)
 403acf4:	10bfffcc 	andi	r2,r2,65535
 403acf8:	1004923a 	slli	r2,r2,8
 403acfc:	1007883a 	mov	r3,r2
 403ad00:	00bfc004 	movi	r2,-256
 403ad04:	1884703a 	and	r2,r3,r2
 403ad08:	2084b03a 	or	r2,r4,r2
 403ad0c:	1087ffcc 	andi	r2,r2,8191
 403ad10:	e0bffe0d 	sth	r2,-8(fp)

  if (mf == 0)
 403ad14:	e0bffe8b 	ldhu	r2,-6(fp)
 403ad18:	1004c03a 	cmpne	r2,r2,zero
 403ad1c:	1000081e 	bne	r2,zero,403ad40 <ip_reasm_determine_type_of_frag+0xb8>
     {
     if (foff == 0) {rc = IP_CP;}
 403ad20:	e0bffe0b 	ldhu	r2,-8(fp)
 403ad24:	1004c03a 	cmpne	r2,r2,zero
 403ad28:	1000021e 	bne	r2,zero,403ad34 <ip_reasm_determine_type_of_frag+0xac>
 403ad2c:	e03ffd15 	stw	zero,-12(fp)
 403ad30:	00000b06 	br	403ad60 <ip_reasm_determine_type_of_frag+0xd8>
     else {rc = IP_LF;}
 403ad34:	00800144 	movi	r2,5
 403ad38:	e0bffd15 	stw	r2,-12(fp)
 403ad3c:	00000806 	br	403ad60 <ip_reasm_determine_type_of_frag+0xd8>
     }
  else
     {
     if (foff == 0) {rc = IP_FF;}
 403ad40:	e0bffe0b 	ldhu	r2,-8(fp)
 403ad44:	1004c03a 	cmpne	r2,r2,zero
 403ad48:	1000031e 	bne	r2,zero,403ad58 <ip_reasm_determine_type_of_frag+0xd0>
 403ad4c:	00800044 	movi	r2,1
 403ad50:	e0bffd15 	stw	r2,-12(fp)
 403ad54:	00000206 	br	403ad60 <ip_reasm_determine_type_of_frag+0xd8>
     else {rc = IP_MF;}
 403ad58:	008000c4 	movi	r2,3
 403ad5c:	e0bffd15 	stw	r2,-12(fp)
     }

  return rc;
 403ad60:	e0bffd17 	ldw	r2,-12(fp)
}
 403ad64:	e037883a 	mov	sp,fp
 403ad68:	df000017 	ldw	fp,0(sp)
 403ad6c:	dec00104 	addi	sp,sp,4
 403ad70:	f800283a 	ret

0403ad74 <ip_reasm_check_mem_useage>:
OUTPUT: ENP_RESOURCE, if the increment request can't be allowed; 
otherwise it returns IPREASM_OK.
*/

int ip_reasm_check_mem_useage (u_short increment)
{
 403ad74:	defffd04 	addi	sp,sp,-12
 403ad78:	df000215 	stw	fp,8(sp)
 403ad7c:	df000204 	addi	fp,sp,8
 403ad80:	e13ffe0d 	sth	r4,-8(fp)
   /* sanity check */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 403ad84:	d0e84517 	ldw	r3,-24300(gp)
 403ad88:	008001b4 	movhi	r2,6
 403ad8c:	10c0072e 	bgeu	r2,r3,403adac <ip_reasm_check_mem_useage+0x38>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 403ad90:	008101b4 	movhi	r2,1030
 403ad94:	10a46204 	addi	r2,r2,-28280
 403ad98:	10800217 	ldw	r2,8(r2)
 403ad9c:	10c00044 	addi	r3,r2,1
 403ada0:	008101b4 	movhi	r2,1030
 403ada4:	10a46204 	addi	r2,r2,-28280
 403ada8:	10c00215 	stw	r3,8(r2)
   }

   /* check to see if we are already at limit OR if we may become over limit 
    * after accepting this new fragment */
   if ((ipr_curr_mem == IP_REASM_MAX_MEM) ||
 403adac:	d0e84517 	ldw	r3,-24300(gp)
 403adb0:	008001b4 	movhi	r2,6
 403adb4:	18800526 	beq	r3,r2,403adcc <ip_reasm_check_mem_useage+0x58>
 403adb8:	e0fffe0b 	ldhu	r3,-8(fp)
 403adbc:	d0a84517 	ldw	r2,-24300(gp)
 403adc0:	1887883a 	add	r3,r3,r2
 403adc4:	008001b4 	movhi	r2,6
 403adc8:	10c00a2e 	bgeu	r2,r3,403adf4 <ip_reasm_check_mem_useage+0x80>
       (ipr_curr_mem + increment > IP_REASM_MAX_MEM))
   {
      /* return an error indication */
      ++ire_stats.mem_check_fail;
 403adcc:	008101b4 	movhi	r2,1030
 403add0:	10a46204 	addi	r2,r2,-28280
 403add4:	10800317 	ldw	r2,12(r2)
 403add8:	10c00044 	addi	r3,r2,1
 403addc:	008101b4 	movhi	r2,1030
 403ade0:	10a46204 	addi	r2,r2,-28280
 403ade4:	10c00315 	stw	r3,12(r2)
      return ENP_RESOURCE;
 403ade8:	00bffa84 	movi	r2,-22
 403adec:	e0bfff15 	stw	r2,-4(fp)
 403adf0:	00000106 	br	403adf8 <ip_reasm_check_mem_useage+0x84>
   }

   /* memory limits will not be exceeded with this increment */
   return IPREASM_OK;
 403adf4:	e03fff15 	stw	zero,-4(fp)
 403adf8:	e0bfff17 	ldw	r2,-4(fp)
}
 403adfc:	e037883a 	mov	sp,fp
 403ae00:	df000017 	ldw	fp,0(sp)
 403ae04:	dec00104 	addi	sp,sp,4
 403ae08:	f800283a 	ret

0403ae0c <ip_reasm_incr_mem_useage>:
system exceeding the maximum limit or if the system has already exceeded 
the prespecified limit for memory useage; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_incr_mem_useage (u_short increment)
{
 403ae0c:	defffd04 	addi	sp,sp,-12
 403ae10:	df000215 	stw	fp,8(sp)
 403ae14:	df000204 	addi	fp,sp,8
 403ae18:	e13ffe0d 	sth	r4,-8(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 403ae1c:	d0e84517 	ldw	r3,-24300(gp)
 403ae20:	008001b4 	movhi	r2,6
 403ae24:	10c00a2e 	bgeu	r2,r3,403ae50 <ip_reasm_incr_mem_useage+0x44>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 403ae28:	008101b4 	movhi	r2,1030
 403ae2c:	10a46204 	addi	r2,r2,-28280
 403ae30:	10800217 	ldw	r2,8(r2)
 403ae34:	10c00044 	addi	r3,r2,1
 403ae38:	008101b4 	movhi	r2,1030
 403ae3c:	10a46204 	addi	r2,r2,-28280
 403ae40:	10c00215 	stw	r3,8(r2)
      return ENP_RESOURCE;
 403ae44:	00bffa84 	movi	r2,-22
 403ae48:	e0bfff15 	stw	r2,-4(fp)
 403ae4c:	00001406 	br	403aea0 <ip_reasm_incr_mem_useage+0x94>
   }
   if (ipr_curr_mem + increment > IP_REASM_MAX_MEM)
 403ae50:	e0fffe0b 	ldhu	r3,-8(fp)
 403ae54:	d0a84517 	ldw	r2,-24300(gp)
 403ae58:	1887883a 	add	r3,r3,r2
 403ae5c:	008001b4 	movhi	r2,6
 403ae60:	10c00a2e 	bgeu	r2,r3,403ae8c <ip_reasm_incr_mem_useage+0x80>
   {
      /* this should never happen since caller should have 
       * checked prior to asking for the increment */
      ++ire_stats.mem_incr_fail;
 403ae64:	008101b4 	movhi	r2,1030
 403ae68:	10a46204 	addi	r2,r2,-28280
 403ae6c:	10800417 	ldw	r2,16(r2)
 403ae70:	10c00044 	addi	r3,r2,1
 403ae74:	008101b4 	movhi	r2,1030
 403ae78:	10a46204 	addi	r2,r2,-28280
 403ae7c:	10c00415 	stw	r3,16(r2)
      return ENP_RESOURCE;
 403ae80:	00bffa84 	movi	r2,-22
 403ae84:	e0bfff15 	stw	r2,-4(fp)
 403ae88:	00000506 	br	403aea0 <ip_reasm_incr_mem_useage+0x94>
   }

   ipr_curr_mem += increment;
 403ae8c:	e0bffe0b 	ldhu	r2,-8(fp)
 403ae90:	d0e84517 	ldw	r3,-24300(gp)
 403ae94:	10c5883a 	add	r2,r2,r3
 403ae98:	d0a84515 	stw	r2,-24300(gp)

   /* successfully incremented memory useage counter */
   return IPREASM_OK;
 403ae9c:	e03fff15 	stw	zero,-4(fp)
 403aea0:	e0bfff17 	ldw	r2,-4(fp)
}
 403aea4:	e037883a 	mov	sp,fp
 403aea8:	df000017 	ldw	fp,0(sp)
 403aeac:	dec00104 	addi	sp,sp,4
 403aeb0:	f800283a 	ret

0403aeb4 <ip_reasm_decr_mem_useage>:
exceeded the prespecified limit for memory useage; otherwise, it returns 
IPREASM_OK.
*/

int ip_reasm_decr_mem_useage (u_short decrement)
{
 403aeb4:	defffd04 	addi	sp,sp,-12
 403aeb8:	df000215 	stw	fp,8(sp)
 403aebc:	df000204 	addi	fp,sp,8
 403aec0:	e13ffe0d 	sth	r4,-8(fp)
   /* sanity checks */
   if (ipr_curr_mem > IP_REASM_MAX_MEM)
 403aec4:	d0e84517 	ldw	r3,-24300(gp)
 403aec8:	008001b4 	movhi	r2,6
 403aecc:	10c00a2e 	bgeu	r2,r3,403aef8 <ip_reasm_decr_mem_useage+0x44>
   {
      /* this should never happen */
      ++ire_stats.bad_max_mem;
 403aed0:	008101b4 	movhi	r2,1030
 403aed4:	10a46204 	addi	r2,r2,-28280
 403aed8:	10800217 	ldw	r2,8(r2)
 403aedc:	10c00044 	addi	r3,r2,1
 403aee0:	008101b4 	movhi	r2,1030
 403aee4:	10a46204 	addi	r2,r2,-28280
 403aee8:	10c00215 	stw	r3,8(r2)
      return ENP_RESOURCE;
 403aeec:	00bffa84 	movi	r2,-22
 403aef0:	e0bfff15 	stw	r2,-4(fp)
 403aef4:	00001206 	br	403af40 <ip_reasm_decr_mem_useage+0x8c>
   }
   if (ipr_curr_mem < decrement)
 403aef8:	e0fffe0b 	ldhu	r3,-8(fp)
 403aefc:	d0a84517 	ldw	r2,-24300(gp)
 403af00:	10c00a2e 	bgeu	r2,r3,403af2c <ip_reasm_decr_mem_useage+0x78>
   {
      /* this should never happen since the current memory useage
       * counter must always be greater than or at least equal to
       * the allocation that is being "returned" */
      ++ire_stats.mem_decr_fail;
 403af04:	008101b4 	movhi	r2,1030
 403af08:	10a46204 	addi	r2,r2,-28280
 403af0c:	10800517 	ldw	r2,20(r2)
 403af10:	10c00044 	addi	r3,r2,1
 403af14:	008101b4 	movhi	r2,1030
 403af18:	10a46204 	addi	r2,r2,-28280
 403af1c:	10c00515 	stw	r3,20(r2)
      return ENP_RESOURCE;
 403af20:	00bffa84 	movi	r2,-22
 403af24:	e0bfff15 	stw	r2,-4(fp)
 403af28:	00000506 	br	403af40 <ip_reasm_decr_mem_useage+0x8c>
   }

   ipr_curr_mem -= decrement;
 403af2c:	d0a84517 	ldw	r2,-24300(gp)
 403af30:	e0fffe0b 	ldhu	r3,-8(fp)
 403af34:	10c5c83a 	sub	r2,r2,r3
 403af38:	d0a84515 	stw	r2,-24300(gp)

   /* successfully decremented memory useage counter */
   return IPREASM_OK;
 403af3c:	e03fff15 	stw	zero,-4(fp)
 403af40:	e0bfff17 	ldw	r2,-4(fp)
}
 403af44:	e037883a 	mov	sp,fp
 403af48:	df000017 	ldw	fp,0(sp)
 403af4c:	dec00104 	addi	sp,sp,4
 403af50:	f800283a 	ret

0403af54 <ip_reasm_process_first_fragment>:
OUTPUT: ENP_RESOURCE if the memory check (in ip_reasm_check_mem_useage ()) 
or the allocation for an IRE fails; otherwise, it returns IPREASM_OK.
*/

int ip_reasm_process_first_fragment (PACKET p)
{
 403af54:	defff604 	addi	sp,sp,-40
 403af58:	dfc00915 	stw	ra,36(sp)
 403af5c:	df000815 	stw	fp,32(sp)
 403af60:	df000804 	addi	fp,sp,32
 403af64:	e13ffe15 	stw	r4,-8(fp)
   u_short total_len;
   int rc;

   /* this is a fragment from a hitherto unknown fragment stream; 
    * check for resource limits before accepting it */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (IRE)))) != IPREASM_OK)
 403af68:	e0bffe17 	ldw	r2,-8(fp)
 403af6c:	10800217 	ldw	r2,8(r2)
 403af70:	10802204 	addi	r2,r2,136
 403af74:	113fffcc 	andi	r4,r2,65535
 403af78:	403ad740 	call	403ad74 <ip_reasm_check_mem_useage>
 403af7c:	e0bff815 	stw	r2,-32(fp)
 403af80:	e0bff817 	ldw	r2,-32(fp)
 403af84:	1005003a 	cmpeq	r2,r2,zero
 403af88:	1000101e 	bne	r2,zero,403afcc <ip_reasm_process_first_fragment+0x78>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 403af8c:	01000084 	movi	r4,2
 403af90:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free (p);
 403af94:	e13ffe17 	ldw	r4,-8(fp)
 403af98:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403af9c:	01000084 	movi	r4,2
 403afa0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 403afa4:	008101b4 	movhi	r2,1030
 403afa8:	10a44e04 	addi	r2,r2,-28360
 403afac:	10800f17 	ldw	r2,60(r2)
 403afb0:	10c00044 	addi	r3,r2,1
 403afb4:	008101b4 	movhi	r2,1030
 403afb8:	10a44e04 	addi	r2,r2,-28360
 403afbc:	10c00f15 	stw	r3,60(r2)
      return rc;
 403afc0:	e0bff817 	ldw	r2,-32(fp)
 403afc4:	e0bfff15 	stw	r2,-4(fp)
 403afc8:	00009406 	br	403b21c <ip_reasm_process_first_fragment+0x2c8>
   }

   /* we are ok wrt memory limits; since this is the first fragment, we need 
    * to create an IRE entry */
   irep = (IREP) IPR_ALLOC(sizeof(IRE));
 403afcc:	01002204 	movi	r4,136
 403afd0:	40265f80 	call	40265f8 <npalloc>
 403afd4:	e0bffc15 	stw	r2,-16(fp)
   if (irep == 0) 
 403afd8:	e0bffc17 	ldw	r2,-16(fp)
 403afdc:	1004c03a 	cmpne	r2,r2,zero
 403afe0:	1000101e 	bne	r2,zero,403b024 <ip_reasm_process_first_fragment+0xd0>
   {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 403afe4:	01000084 	movi	r4,2
 403afe8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free (p);
 403afec:	e13ffe17 	ldw	r4,-8(fp)
 403aff0:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403aff4:	01000084 	movi	r4,2
 403aff8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 403affc:	008101b4 	movhi	r2,1030
 403b000:	10a44e04 	addi	r2,r2,-28360
 403b004:	10800f17 	ldw	r2,60(r2)
 403b008:	10c00044 	addi	r3,r2,1
 403b00c:	008101b4 	movhi	r2,1030
 403b010:	10a44e04 	addi	r2,r2,-28360
 403b014:	10c00f15 	stw	r3,60(r2)
      return ENP_RESOURCE;
 403b018:	00bffa84 	movi	r2,-22
 403b01c:	e0bfff15 	stw	r2,-4(fp)
 403b020:	00007e06 	br	403b21c <ip_reasm_process_first_fragment+0x2c8>
   }

   pip = ip_head(p);
 403b024:	e0bffe17 	ldw	r2,-8(fp)
 403b028:	10800317 	ldw	r2,12(r2)
 403b02c:	e0bffd15 	stw	r2,-12(fp)
   iphlen = ip_hlen(pip);
 403b030:	e0bffd17 	ldw	r2,-12(fp)
 403b034:	10800003 	ldbu	r2,0(r2)
 403b038:	108003cc 	andi	r2,r2,15
 403b03c:	1085883a 	add	r2,r2,r2
 403b040:	1085883a 	add	r2,r2,r2
 403b044:	e0bffa05 	stb	r2,-24(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
 403b048:	e13ffd17 	ldw	r4,-12(fp)
 403b04c:	403ac880 	call	403ac88 <ip_reasm_determine_type_of_frag>
 403b050:	e0bffb15 	stw	r2,-20(fp)
   frag_offset = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 403b054:	e0bffd17 	ldw	r2,-12(fp)
 403b058:	1080018b 	ldhu	r2,6(r2)
 403b05c:	10bfffcc 	andi	r2,r2,65535
 403b060:	1004d23a 	srli	r2,r2,8
 403b064:	10803fcc 	andi	r2,r2,255
 403b068:	1009883a 	mov	r4,r2
 403b06c:	e0bffd17 	ldw	r2,-12(fp)
 403b070:	1080018b 	ldhu	r2,6(r2)
 403b074:	10bfffcc 	andi	r2,r2,65535
 403b078:	1004923a 	slli	r2,r2,8
 403b07c:	1007883a 	mov	r3,r2
 403b080:	00bfc004 	movi	r2,-256
 403b084:	1884703a 	and	r2,r3,r2
 403b088:	2084b03a 	or	r2,r4,r2
 403b08c:	1087ffcc 	andi	r2,r2,8191
 403b090:	100490fa 	slli	r2,r2,3
 403b094:	e0bff98d 	sth	r2,-26(fp)
   total_len = ntohs(pip->ip_len);
 403b098:	e0bffd17 	ldw	r2,-12(fp)
 403b09c:	1080008b 	ldhu	r2,2(r2)
 403b0a0:	10bfffcc 	andi	r2,r2,65535
 403b0a4:	1004d23a 	srli	r2,r2,8
 403b0a8:	10803fcc 	andi	r2,r2,255
 403b0ac:	1009883a 	mov	r4,r2
 403b0b0:	e0bffd17 	ldw	r2,-12(fp)
 403b0b4:	1080008b 	ldhu	r2,2(r2)
 403b0b8:	10bfffcc 	andi	r2,r2,65535
 403b0bc:	1004923a 	slli	r2,r2,8
 403b0c0:	1007883a 	mov	r3,r2
 403b0c4:	00bfc004 	movi	r2,-256
 403b0c8:	1884703a 	and	r2,r3,r2
 403b0cc:	2084b03a 	or	r2,r4,r2
 403b0d0:	e0bff90d 	sth	r2,-28(fp)

   /* now setup various fields in the IRE entry (multi-byte fields stored in network 
    * byte order) */
   irep->src = pip->ip_src;
 403b0d4:	e0bffd17 	ldw	r2,-12(fp)
 403b0d8:	10c00317 	ldw	r3,12(r2)
 403b0dc:	e0bffc17 	ldw	r2,-16(fp)
 403b0e0:	10c00115 	stw	r3,4(r2)
   irep->dest = pip->ip_dest;
 403b0e4:	e0bffd17 	ldw	r2,-12(fp)
 403b0e8:	10c00417 	ldw	r3,16(r2)
 403b0ec:	e0bffc17 	ldw	r2,-16(fp)
 403b0f0:	10c00215 	stw	r3,8(r2)
   irep->prot = pip->ip_prot;
 403b0f4:	e0bffd17 	ldw	r2,-12(fp)
 403b0f8:	10c00243 	ldbu	r3,9(r2)
 403b0fc:	e0bffc17 	ldw	r2,-16(fp)
 403b100:	10c00385 	stb	r3,14(r2)
   irep->id = pip->ip_id;
 403b104:	e0bffd17 	ldw	r2,-12(fp)
 403b108:	10c0010b 	ldhu	r3,4(r2)
 403b10c:	e0bffc17 	ldw	r2,-16(fp)
 403b110:	10c0030d 	sth	r3,12(r2)
   if (ftype == IP_LF)
 403b114:	e0bffb17 	ldw	r2,-20(fp)
 403b118:	10800158 	cmpnei	r2,r2,5
 403b11c:	10000a1e 	bne	r2,zero,403b148 <ip_reasm_process_first_fragment+0x1f4>
      {
      irep->length = frag_offset + (total_len - iphlen);
 403b120:	e0fffa03 	ldbu	r3,-24(fp)
 403b124:	e0bff90b 	ldhu	r2,-28(fp)
 403b128:	10c5c83a 	sub	r2,r2,r3
 403b12c:	1007883a 	mov	r3,r2
 403b130:	e0bff98b 	ldhu	r2,-26(fp)
 403b134:	1885883a 	add	r2,r3,r2
 403b138:	1007883a 	mov	r3,r2
 403b13c:	e0bffc17 	ldw	r2,-16(fp)
 403b140:	10c0040d 	sth	r3,16(r2)
 403b144:	00000a06 	br	403b170 <ip_reasm_process_first_fragment+0x21c>
      }
   else if (ftype == IP_FF)
 403b148:	e0bffb17 	ldw	r2,-20(fp)
 403b14c:	10800058 	cmpnei	r2,r2,1
 403b150:	1000071e 	bne	r2,zero,403b170 <ip_reasm_process_first_fragment+0x21c>
       * out, and results in the transmission of an ICMP Time Exceeded message (with the
       * code set to "fragment reassembly time exceeded").  Please note that the 'l2_hdr' 
       * as set below may not be the start address for the L2 header (but it is adequate 
       * for our use).  If the FF is never received, these fields stay at their initial
       * value of 0. */
      irep->l2_hdr = p->nb_buff;
 403b154:	e0bffe17 	ldw	r2,-8(fp)
 403b158:	10c00117 	ldw	r3,4(r2)
 403b15c:	e0bffc17 	ldw	r2,-16(fp)
 403b160:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
 403b164:	e0fffd17 	ldw	r3,-12(fp)
 403b168:	e0bffc17 	ldw	r2,-16(fp)
 403b16c:	10c02015 	stw	r3,128(r2)
      }

   /* note that the 'rcvd' and 'length' counters only keep track of the data part of 
    * the IP datagram */
   irep->rcvd = total_len - iphlen;
 403b170:	e0fffa03 	ldbu	r3,-24(fp)
 403b174:	e0bff90b 	ldhu	r2,-28(fp)
 403b178:	10c5c83a 	sub	r2,r2,r3
 403b17c:	1007883a 	mov	r3,r2
 403b180:	e0bffc17 	ldw	r2,-16(fp)
 403b184:	10c0048d 	sth	r3,18(r2)
   irep->age = 0;
 403b188:	e0bffc17 	ldw	r2,-16(fp)
 403b18c:	10000515 	stw	zero,20(r2)

   /* all RFQs are compact when created */
   irep->flags |= IPR_RFQ_COMPACT;
 403b190:	e0bffc17 	ldw	r2,-16(fp)
 403b194:	10802103 	ldbu	r2,132(r2)
 403b198:	10800054 	ori	r2,r2,1
 403b19c:	1007883a 	mov	r3,r2
 403b1a0:	e0bffc17 	ldw	r2,-16(fp)
 403b1a4:	10c02105 	stb	r3,132(r2)

   /* store PACKET pointer in the first location of the first RFQ */
   irep->rfq.bufp[0] = p;
 403b1a8:	e0fffc17 	ldw	r3,-16(fp)
 403b1ac:	e0bffe17 	ldw	r2,-8(fp)
 403b1b0:	18800715 	stw	r2,28(r3)
   irep->rfq.frag_offset[0] = frag_offset;
 403b1b4:	e0fffc17 	ldw	r3,-16(fp)
 403b1b8:	e0bff98b 	ldhu	r2,-26(fp)
 403b1bc:	1880170d 	sth	r2,92(r3)
   /* the next pointer in the RFQ is already 0 */

   p->nb_prot += iphlen;
 403b1c0:	e0bffe17 	ldw	r2,-8(fp)
 403b1c4:	10c00317 	ldw	r3,12(r2)
 403b1c8:	e0bffa03 	ldbu	r2,-24(fp)
 403b1cc:	1887883a 	add	r3,r3,r2
 403b1d0:	e0bffe17 	ldw	r2,-8(fp)
 403b1d4:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
 403b1d8:	e0bffe17 	ldw	r2,-8(fp)
 403b1dc:	10c00417 	ldw	r3,16(r2)
 403b1e0:	e0bffa03 	ldbu	r2,-24(fp)
 403b1e4:	1887c83a 	sub	r3,r3,r2
 403b1e8:	e0bffe17 	ldw	r2,-8(fp)
 403b1ec:	10c00415 	stw	r3,16(r2)

   /* insert at start of global IRE list */
   irep->next = h_ireq;
 403b1f0:	d0e84617 	ldw	r3,-24296(gp)
 403b1f4:	e0bffc17 	ldw	r2,-16(fp)
 403b1f8:	10c00015 	stw	r3,0(r2)
   h_ireq = irep;
 403b1fc:	e0bffc17 	ldw	r2,-16(fp)
 403b200:	d0a84615 	stw	r2,-24296(gp)

   /* increment the memory useage */
   ip_reasm_incr_mem_useage (p->nb_blen + (sizeof (IRE)));
 403b204:	e0bffe17 	ldw	r2,-8(fp)
 403b208:	10800217 	ldw	r2,8(r2)
 403b20c:	10802204 	addi	r2,r2,136
 403b210:	113fffcc 	andi	r4,r2,65535
 403b214:	403ae0c0 	call	403ae0c <ip_reasm_incr_mem_useage>

   return IPREASM_OK;
 403b218:	e03fff15 	stw	zero,-4(fp)
 403b21c:	e0bfff17 	ldw	r2,-4(fp)
}
 403b220:	e037883a 	mov	sp,fp
 403b224:	dfc00117 	ldw	ra,4(sp)
 403b228:	df000017 	ldw	fp,0(sp)
 403b22c:	dec00204 	addi	sp,sp,8
 403b230:	f800283a 	ret

0403b234 <ip_reassm>:
merely passes their return code back to its caller.  Otherwise, it returns
IPREASM_OK indicating that the fragment was successfully processed.
*/

int ip_reassm (PACKET p)
{
 403b234:	defff804 	addi	sp,sp,-32
 403b238:	dfc00715 	stw	ra,28(sp)
 403b23c:	df000615 	stw	fp,24(sp)
 403b240:	df000604 	addi	fp,sp,24
 403b244:	e13ffe15 	stw	r4,-8(fp)
   IREP irep;
   struct ip * pip;
   int rc1, rc2;

   pip = ip_head(p);
 403b248:	e0bffe17 	ldw	r2,-8(fp)
 403b24c:	10800317 	ldw	r2,12(r2)
 403b250:	e0bffc15 	stw	r2,-16(fp)

   /* we have just received a fragment, so let's start processing it.  First
    * check for a matching IRE entry. */
   irep = ip_reasm_match_frag_with_ire (pip);
 403b254:	e13ffc17 	ldw	r4,-16(fp)
 403b258:	403abb80 	call	403abb8 <ip_reasm_match_frag_with_ire>
 403b25c:	e0bffd15 	stw	r2,-12(fp)

   if (!irep)
 403b260:	e0bffd17 	ldw	r2,-12(fp)
 403b264:	1004c03a 	cmpne	r2,r2,zero
 403b268:	1000091e 	bne	r2,zero,403b290 <ip_reassm+0x5c>
   {
      /* this is the first packet for a "new" fragment stream */
      if ((rc1 = ip_reasm_process_first_fragment (p)) != IPREASM_OK)
 403b26c:	e13ffe17 	ldw	r4,-8(fp)
 403b270:	403af540 	call	403af54 <ip_reasm_process_first_fragment>
 403b274:	e0bffb15 	stw	r2,-20(fp)
 403b278:	e0bffb17 	ldw	r2,-20(fp)
 403b27c:	1005003a 	cmpeq	r2,r2,zero
 403b280:	10000d1e 	bne	r2,zero,403b2b8 <ip_reassm+0x84>
      {
         /* ip_reasm_process_first_fragment () will free the packet */
         return rc1;
 403b284:	e0bffb17 	ldw	r2,-20(fp)
 403b288:	e0bfff15 	stw	r2,-4(fp)
 403b28c:	00000b06 	br	403b2bc <ip_reassm+0x88>
      }
   }
   else
   {
      /* a matching IRE already exists for this fragment */
      if ((rc2 = ip_reasm_process_subsequent_fragments (p, irep)) != IPREASM_OK)
 403b290:	e13ffe17 	ldw	r4,-8(fp)
 403b294:	e17ffd17 	ldw	r5,-12(fp)
 403b298:	403b8640 	call	403b864 <ip_reasm_process_subsequent_fragments>
 403b29c:	e0bffa15 	stw	r2,-24(fp)
 403b2a0:	e0bffa17 	ldw	r2,-24(fp)
 403b2a4:	1005003a 	cmpeq	r2,r2,zero
 403b2a8:	1000031e 	bne	r2,zero,403b2b8 <ip_reassm+0x84>
      {
         /* ip_reasm_process_subsequent_fragments () has already deleted the IRE entry */
         return rc2;
 403b2ac:	e0bffa17 	ldw	r2,-24(fp)
 403b2b0:	e0bfff15 	stw	r2,-4(fp)
 403b2b4:	00000106 	br	403b2bc <ip_reassm+0x88>
      }
   }

   return IPREASM_OK;
 403b2b8:	e03fff15 	stw	zero,-4(fp)
 403b2bc:	e0bfff17 	ldw	r2,-4(fp)
}
 403b2c0:	e037883a 	mov	sp,fp
 403b2c4:	dfc00117 	ldw	ra,4(sp)
 403b2c8:	df000017 	ldw	fp,0(sp)
 403b2cc:	dec00204 	addi	sp,sp,8
 403b2d0:	f800283a 	ret

0403b2d4 <ip_reasm_compute_overlap>:
            (i.e., contains "unique" data).
*/

IPREASM_RC ip_reasm_compute_overlap (PACKET p, IREP irep, u_short * indexp, 
 RFQP * last_rfqpp, u_short * frag_offsetp, u_char * hole_createdp)
{
 403b2d4:	defff204 	addi	sp,sp,-56
 403b2d8:	dfc00d15 	stw	ra,52(sp)
 403b2dc:	df000c15 	stw	fp,48(sp)
 403b2e0:	df000c04 	addi	fp,sp,48
 403b2e4:	e13ffb15 	stw	r4,-20(fp)
 403b2e8:	e17ffc15 	stw	r5,-16(fp)
 403b2ec:	e1bffd15 	stw	r6,-12(fp)
 403b2f0:	e1fffe15 	stw	r7,-8(fp)
   u_short currend;
   u_short drop_len;
   u_char iphlen;
   u_short i;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 403b2f4:	e13ffc17 	ldw	r4,-16(fp)
 403b2f8:	403bdf80 	call	403bdf8 <ip_reasm_find_ire>
 403b2fc:	10803fcc 	andi	r2,r2,255
 403b300:	10800060 	cmpeqi	r2,r2,1
 403b304:	1000101e 	bne	r2,zero,403b348 <ip_reasm_compute_overlap+0x74>
      {
      ++ire_stats.bad_irep;
 403b308:	008101b4 	movhi	r2,1030
 403b30c:	10a46204 	addi	r2,r2,-28280
 403b310:	10800017 	ldw	r2,0(r2)
 403b314:	10c00044 	addi	r3,r2,1
 403b318:	008101b4 	movhi	r2,1030
 403b31c:	10a46204 	addi	r2,r2,-28280
 403b320:	10c00015 	stw	r3,0(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 403b324:	01000084 	movi	r4,2
 403b328:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free (p);
 403b32c:	e13ffb17 	ldw	r4,-20(fp)
 403b330:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403b334:	01000084 	movi	r4,2
 403b338:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return IPREASM_DROP_FRAG_BAD_PARAM;
 403b33c:	00800044 	movi	r2,1
 403b340:	e0bfff15 	stw	r2,-4(fp)
 403b344:	00014106 	br	403b84c <ip_reasm_compute_overlap+0x578>
      }

   jrip = ip_head(p);
 403b348:	e0bffb17 	ldw	r2,-20(fp)
 403b34c:	10800317 	ldw	r2,12(r2)
 403b350:	e0bff815 	stw	r2,-32(fp)
   iphlen = ip_hlen (jrip);
 403b354:	e0bff817 	ldw	r2,-32(fp)
 403b358:	10800003 	ldbu	r2,0(r2)
 403b35c:	108003cc 	andi	r2,r2,15
 403b360:	1085883a 	add	r2,r2,r2
 403b364:	1085883a 	add	r2,r2,r2
 403b368:	e0bff485 	stb	r2,-46(fp)
   jrstart = (((ntohs(jrip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3);
 403b36c:	e0bff817 	ldw	r2,-32(fp)
 403b370:	1080018b 	ldhu	r2,6(r2)
 403b374:	10bfffcc 	andi	r2,r2,65535
 403b378:	1004d23a 	srli	r2,r2,8
 403b37c:	10803fcc 	andi	r2,r2,255
 403b380:	1009883a 	mov	r4,r2
 403b384:	e0bff817 	ldw	r2,-32(fp)
 403b388:	1080018b 	ldhu	r2,6(r2)
 403b38c:	10bfffcc 	andi	r2,r2,65535
 403b390:	1004923a 	slli	r2,r2,8
 403b394:	1007883a 	mov	r3,r2
 403b398:	00bfc004 	movi	r2,-256
 403b39c:	1884703a 	and	r2,r3,r2
 403b3a0:	2084b03a 	or	r2,r4,r2
 403b3a4:	1087ffcc 	andi	r2,r2,8191
 403b3a8:	100490fa 	slli	r2,r2,3
 403b3ac:	e0bff70d 	sth	r2,-36(fp)
   jrend =   jrstart + ((ntohs(jrip->ip_len)) - iphlen) - 1;
 403b3b0:	e0bff817 	ldw	r2,-32(fp)
 403b3b4:	1080008b 	ldhu	r2,2(r2)
 403b3b8:	10bfffcc 	andi	r2,r2,65535
 403b3bc:	1004d23a 	srli	r2,r2,8
 403b3c0:	10803fcc 	andi	r2,r2,255
 403b3c4:	1009883a 	mov	r4,r2
 403b3c8:	e0bff817 	ldw	r2,-32(fp)
 403b3cc:	1080008b 	ldhu	r2,2(r2)
 403b3d0:	10bfffcc 	andi	r2,r2,65535
 403b3d4:	1004923a 	slli	r2,r2,8
 403b3d8:	1007883a 	mov	r3,r2
 403b3dc:	00bfc004 	movi	r2,-256
 403b3e0:	1884703a 	and	r2,r3,r2
 403b3e4:	2084b03a 	or	r2,r4,r2
 403b3e8:	1007883a 	mov	r3,r2
 403b3ec:	e0bff483 	ldbu	r2,-46(fp)
 403b3f0:	1885c83a 	sub	r2,r3,r2
 403b3f4:	1007883a 	mov	r3,r2
 403b3f8:	e0bff70b 	ldhu	r2,-36(fp)
 403b3fc:	1885883a 	add	r2,r3,r2
 403b400:	10bfffc4 	addi	r2,r2,-1
 403b404:	e0bff68d 	sth	r2,-38(fp)
   /* skip past the IP header of the just received fragment as we get ready 
    * to compare for overlap between the just received fragment and the 
    * fragments that are currently queued in the IRE entry for this fragment 
    * chain */
   p->nb_prot += iphlen;
 403b408:	e0bffb17 	ldw	r2,-20(fp)
 403b40c:	10c00317 	ldw	r3,12(r2)
 403b410:	e0bff483 	ldbu	r2,-46(fp)
 403b414:	1887883a 	add	r3,r3,r2
 403b418:	e0bffb17 	ldw	r2,-20(fp)
 403b41c:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= iphlen;
 403b420:	e0bffb17 	ldw	r2,-20(fp)
 403b424:	10c00417 	ldw	r3,16(r2)
 403b428:	e0bff483 	ldbu	r2,-46(fp)
 403b42c:	1887c83a 	sub	r3,r3,r2
 403b430:	e0bffb17 	ldw	r2,-20(fp)
 403b434:	10c00415 	stw	r3,16(r2)

   *frag_offsetp = jrstart;
 403b438:	e0c00217 	ldw	r3,8(fp)
 403b43c:	e0bff70b 	ldhu	r2,-36(fp)
 403b440:	1880000d 	sth	r2,0(r3)
   *indexp = INVALID_FRAG_INDEX;
 403b444:	e0fffd17 	ldw	r3,-12(fp)
 403b448:	00800404 	movi	r2,16
 403b44c:	1880000d 	sth	r2,0(r3)
   *last_rfqpp = 0;
 403b450:	e0bffe17 	ldw	r2,-8(fp)
 403b454:	10000015 	stw	zero,0(r2)
   *hole_createdp = IPREASM_FALSE;
 403b458:	e0800317 	ldw	r2,12(fp)
 403b45c:	10000005 	stb	zero,0(r2)

   rfqp = &(irep->rfq);
 403b460:	e0bffc17 	ldw	r2,-16(fp)
 403b464:	10800604 	addi	r2,r2,24
 403b468:	e0bffa15 	stw	r2,-24(fp)

   while (rfqp)
 403b46c:	0000ef06 	br	403b82c <ip_reasm_compute_overlap+0x558>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403b470:	e03ff40d 	sth	zero,-48(fp)
 403b474:	0000df06 	br	403b7f4 <ip_reasm_compute_overlap+0x520>
         {
         if ((currpkt = rfqp->bufp[i]) != 0)
 403b478:	e0bff40b 	ldhu	r2,-48(fp)
 403b47c:	e0fffa17 	ldw	r3,-24(fp)
 403b480:	1085883a 	add	r2,r2,r2
 403b484:	1085883a 	add	r2,r2,r2
 403b488:	10c5883a 	add	r2,r2,r3
 403b48c:	10800104 	addi	r2,r2,4
 403b490:	10800017 	ldw	r2,0(r2)
 403b494:	e0bff915 	stw	r2,-28(fp)
 403b498:	e0bff917 	ldw	r2,-28(fp)
 403b49c:	1005003a 	cmpeq	r2,r2,zero
 403b4a0:	1000bf1e 	bne	r2,zero,403b7a0 <ip_reasm_compute_overlap+0x4cc>
            {
            currstart = rfqp->frag_offset[i];
 403b4a4:	e0bff40b 	ldhu	r2,-48(fp)
 403b4a8:	e0fffa17 	ldw	r3,-24(fp)
 403b4ac:	1085883a 	add	r2,r2,r2
 403b4b0:	10c5883a 	add	r2,r2,r3
 403b4b4:	10801104 	addi	r2,r2,68
 403b4b8:	1080000b 	ldhu	r2,0(r2)
 403b4bc:	e0bff60d 	sth	r2,-40(fp)
            currend = currstart + currpkt->nb_plen - 1;
 403b4c0:	e0bff917 	ldw	r2,-28(fp)
 403b4c4:	10800417 	ldw	r2,16(r2)
 403b4c8:	1007883a 	mov	r3,r2
 403b4cc:	e0bff60b 	ldhu	r2,-40(fp)
 403b4d0:	1885883a 	add	r2,r3,r2
 403b4d4:	10bfffc4 	addi	r2,r2,-1
 403b4d8:	e0bff58d 	sth	r2,-42(fp)

            if (currstart < jrstart)
 403b4dc:	e0fff60b 	ldhu	r3,-40(fp)
 403b4e0:	e0bff70b 	ldhu	r2,-36(fp)
 403b4e4:	18802b2e 	bgeu	r3,r2,403b594 <ip_reasm_compute_overlap+0x2c0>
               {
               if (currend < jrend) /* cases A1 and A2 */
 403b4e8:	e0fff58b 	ldhu	r3,-42(fp)
 403b4ec:	e0bff68b 	ldhu	r2,-38(fp)
 403b4f0:	1880202e 	bgeu	r3,r2,403b574 <ip_reasm_compute_overlap+0x2a0>
                  {
                  if (currend < jrstart) /* A1 */
 403b4f4:	e0fff58b 	ldhu	r3,-42(fp)
 403b4f8:	e0bff70b 	ldhu	r2,-36(fp)
 403b4fc:	1880ba36 	bltu	r3,r2,403b7e8 <ip_reasm_compute_overlap+0x514>
                     {
                     /* the just received fragment partially overlaps current 
                      * fragment on the latter's right; increment start 
                      * pointer and decrement length of just received fragment.
                      * Move on to the next fragment in the RFQ. */
                     drop_len = (currend - jrstart) + 1;
 403b500:	e0fff58b 	ldhu	r3,-42(fp)
 403b504:	e0bff70b 	ldhu	r2,-36(fp)
 403b508:	1885c83a 	sub	r2,r3,r2
 403b50c:	10800044 	addi	r2,r2,1
 403b510:	e0bff50d 	sth	r2,-44(fp)
                     p->nb_prot += drop_len;
 403b514:	e0bffb17 	ldw	r2,-20(fp)
 403b518:	10c00317 	ldw	r3,12(r2)
 403b51c:	e0bff50b 	ldhu	r2,-44(fp)
 403b520:	1887883a 	add	r3,r3,r2
 403b524:	e0bffb17 	ldw	r2,-20(fp)
 403b528:	10c00315 	stw	r3,12(r2)
                     p->nb_plen -= drop_len;
 403b52c:	e0bffb17 	ldw	r2,-20(fp)
 403b530:	10c00417 	ldw	r3,16(r2)
 403b534:	e0bff50b 	ldhu	r2,-44(fp)
 403b538:	1887c83a 	sub	r3,r3,r2
 403b53c:	e0bffb17 	ldw	r2,-20(fp)
 403b540:	10c00415 	stw	r3,16(r2)
                     jrstart += drop_len;
 403b544:	e0fff70b 	ldhu	r3,-36(fp)
 403b548:	e0bff50b 	ldhu	r2,-44(fp)
 403b54c:	1885883a 	add	r2,r3,r2
 403b550:	e0bff70d 	sth	r2,-36(fp)
                     jrend = jrstart + p->nb_plen - 1;
 403b554:	e0bffb17 	ldw	r2,-20(fp)
 403b558:	10800417 	ldw	r2,16(r2)
 403b55c:	1007883a 	mov	r3,r2
 403b560:	e0bff70b 	ldhu	r2,-36(fp)
 403b564:	1885883a 	add	r2,r3,r2
 403b568:	10bfffc4 	addi	r2,r2,-1
 403b56c:	e0bff68d 	sth	r2,-38(fp)
 403b570:	00009d06 	br	403b7e8 <ip_reasm_compute_overlap+0x514>
               else
                  {
                  /* currend is greater than or equal to jrend (cases E1 and E2).
                   * The current fragment is a superset of the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 403b574:	01000084 	movi	r4,2
 403b578:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
                  pk_free (p);
 403b57c:	e13ffb17 	ldw	r4,-20(fp)
 403b580:	40253040 	call	4025304 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403b584:	01000084 	movi	r4,2
 403b588:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 403b58c:	e03fff15 	stw	zero,-4(fp)
 403b590:	0000ae06 	br	403b84c <ip_reasm_compute_overlap+0x578>
                  }
               }
            else if (currstart > jrstart)
 403b594:	e0fff60b 	ldhu	r3,-40(fp)
 403b598:	e0bff70b 	ldhu	r2,-36(fp)
 403b59c:	10c04d2e 	bgeu	r2,r3,403b6d4 <ip_reasm_compute_overlap+0x400>
               {
               if (currend > jrend) /* cases B1 and B2 */
 403b5a0:	e0fff58b 	ldhu	r3,-42(fp)
 403b5a4:	e0bff68b 	ldhu	r2,-38(fp)
 403b5a8:	10c0112e 	bgeu	r2,r3,403b5f0 <ip_reasm_compute_overlap+0x31c>
                  {
                  if (currstart > jrend) /* B1 */
 403b5ac:	e0fff60b 	ldhu	r3,-40(fp)
 403b5b0:	e0bff68b 	ldhu	r2,-38(fp)
 403b5b4:	10c08c36 	bltu	r2,r3,403b7e8 <ip_reasm_compute_overlap+0x514>
                     {
                     /* just received fragment partially overlaps current 
                      * fragment on the latter's left; decrement length of 
                      * just received fragment.  Move on to the next fragment 
                      * in the RFQ. */
                     p->nb_plen = currstart - jrstart;
 403b5b8:	e0fff60b 	ldhu	r3,-40(fp)
 403b5bc:	e0bff70b 	ldhu	r2,-36(fp)
 403b5c0:	1885c83a 	sub	r2,r3,r2
 403b5c4:	1007883a 	mov	r3,r2
 403b5c8:	e0bffb17 	ldw	r2,-20(fp)
 403b5cc:	10c00415 	stw	r3,16(r2)
                     /* start offset remains unchanged, but jrend must be updated */
                     jrend = jrstart + p->nb_plen - 1;
 403b5d0:	e0bffb17 	ldw	r2,-20(fp)
 403b5d4:	10800417 	ldw	r2,16(r2)
 403b5d8:	1007883a 	mov	r3,r2
 403b5dc:	e0bff70b 	ldhu	r2,-36(fp)
 403b5e0:	1885883a 	add	r2,r3,r2
 403b5e4:	10bfffc4 	addi	r2,r2,-1
 403b5e8:	e0bff68d 	sth	r2,-38(fp)
 403b5ec:	00007e06 	br	403b7e8 <ip_reasm_compute_overlap+0x514>
                     }
                  }
               else if (currend == jrend) /* F1 */
 403b5f0:	e0fff58b 	ldhu	r3,-42(fp)
 403b5f4:	e0bff68b 	ldhu	r2,-38(fp)
 403b5f8:	18800e1e 	bne	r3,r2,403b634 <ip_reasm_compute_overlap+0x360>
                  {
                  /* current fragment is a subset of the just received fragment.  
                   * Decrement the length of the just received fragment.  Move
                   * on to the next fragment in the RFQ. */
                  p->nb_plen = currstart - jrstart;
 403b5fc:	e0fff60b 	ldhu	r3,-40(fp)
 403b600:	e0bff70b 	ldhu	r2,-36(fp)
 403b604:	1885c83a 	sub	r2,r3,r2
 403b608:	1007883a 	mov	r3,r2
 403b60c:	e0bffb17 	ldw	r2,-20(fp)
 403b610:	10c00415 	stw	r3,16(r2)
                  jrend = jrstart + p->nb_plen - 1;
 403b614:	e0bffb17 	ldw	r2,-20(fp)
 403b618:	10800417 	ldw	r2,16(r2)
 403b61c:	1007883a 	mov	r3,r2
 403b620:	e0bff70b 	ldhu	r2,-36(fp)
 403b624:	1885883a 	add	r2,r3,r2
 403b628:	10bfffc4 	addi	r2,r2,-1
 403b62c:	e0bff68d 	sth	r2,-38(fp)
 403b630:	00006d06 	br	403b7e8 <ip_reasm_compute_overlap+0x514>
                  {
                  /* currend is less than jrend (case F2).  current fragment is 
                   * a subset of the just received fragment.  Drop current
                   * fragment.  Move on to the next fragment in the RFQ.  Decrement
                   * the amount of memory currently in use. */
                  ip_reasm_decr_mem_useage (currpkt->nb_blen);
 403b634:	e0bff917 	ldw	r2,-28(fp)
 403b638:	10800217 	ldw	r2,8(r2)
 403b63c:	113fffcc 	andi	r4,r2,65535
 403b640:	403aeb40 	call	403aeb4 <ip_reasm_decr_mem_useage>
                  irep->rcvd -= currpkt->nb_plen;
 403b644:	e0bffc17 	ldw	r2,-16(fp)
 403b648:	10c0048b 	ldhu	r3,18(r2)
 403b64c:	e0bff917 	ldw	r2,-28(fp)
 403b650:	10800417 	ldw	r2,16(r2)
 403b654:	1885c83a 	sub	r2,r3,r2
 403b658:	1007883a 	mov	r3,r2
 403b65c:	e0bffc17 	ldw	r2,-16(fp)
 403b660:	10c0048d 	sth	r3,18(r2)
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 403b664:	01000084 	movi	r4,2
 403b668:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
                  pk_free (currpkt);
 403b66c:	e13ff917 	ldw	r4,-28(fp)
 403b670:	40253040 	call	4025304 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403b674:	01000084 	movi	r4,2
 403b678:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
                  rfqp->bufp[i] = 0; /* mark slot as unused */
 403b67c:	e0bff40b 	ldhu	r2,-48(fp)
 403b680:	e0fffa17 	ldw	r3,-24(fp)
 403b684:	1085883a 	add	r2,r2,r2
 403b688:	1085883a 	add	r2,r2,r2
 403b68c:	10c5883a 	add	r2,r2,r3
 403b690:	10800104 	addi	r2,r2,4
 403b694:	10000015 	stw	zero,0(r2)
                  /* save the location of the empty slot */
                  if ((*indexp) == INVALID_FRAG_INDEX) 
 403b698:	e0bffd17 	ldw	r2,-12(fp)
 403b69c:	1080000b 	ldhu	r2,0(r2)
 403b6a0:	10bfffcc 	andi	r2,r2,65535
 403b6a4:	10800418 	cmpnei	r2,r2,16
 403b6a8:	1000061e 	bne	r2,zero,403b6c4 <ip_reasm_compute_overlap+0x3f0>
                     {
                     *indexp = i;
 403b6ac:	e0fffd17 	ldw	r3,-12(fp)
 403b6b0:	e0bff40b 	ldhu	r2,-48(fp)
 403b6b4:	1880000d 	sth	r2,0(r3)
                     *last_rfqpp = rfqp;
 403b6b8:	e0fffe17 	ldw	r3,-8(fp)
 403b6bc:	e0bffa17 	ldw	r2,-24(fp)
 403b6c0:	18800015 	stw	r2,0(r3)
                     }
                  /* we've just created a hole; the array may no longer be "compact" */
                  *hole_createdp = IPREASM_TRUE;
 403b6c4:	e0c00317 	ldw	r3,12(fp)
 403b6c8:	00800044 	movi	r2,1
 403b6cc:	18800005 	stb	r2,0(r3)
 403b6d0:	00004506 	br	403b7e8 <ip_reasm_compute_overlap+0x514>
                  }
               }
            else
               {
               /* currstart and jrstart are equal */
               if (currend == jrend) /* case C */
 403b6d4:	e0fff58b 	ldhu	r3,-42(fp)
 403b6d8:	e0bff68b 	ldhu	r2,-38(fp)
 403b6dc:	1880081e 	bne	r3,r2,403b700 <ip_reasm_compute_overlap+0x42c>
                  {
                  /* the current fragment is identical to the just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 403b6e0:	01000084 	movi	r4,2
 403b6e4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
                  pk_free (p);
 403b6e8:	e13ffb17 	ldw	r4,-20(fp)
 403b6ec:	40253040 	call	4025304 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403b6f0:	01000084 	movi	r4,2
 403b6f4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 403b6f8:	e03fff15 	stw	zero,-4(fp)
 403b6fc:	00005306 	br	403b84c <ip_reasm_compute_overlap+0x578>
                  }
               else if (currend > jrend) /* case D1 */
 403b700:	e0fff58b 	ldhu	r3,-42(fp)
 403b704:	e0bff68b 	ldhu	r2,-38(fp)
 403b708:	10c0082e 	bgeu	r2,r3,403b72c <ip_reasm_compute_overlap+0x458>
                  {
                  /* current fragment is a superset of just received 
                   * fragment.  Drop the just received fragment (and we're done). */
                  LOCK_NET_RESOURCE (FREEQ_RESID);
 403b70c:	01000084 	movi	r4,2
 403b710:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
                  pk_free (p);
 403b714:	e13ffb17 	ldw	r4,-20(fp)
 403b718:	40253040 	call	4025304 <pk_free>
                  UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403b71c:	01000084 	movi	r4,2
 403b720:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
                  return IPREASM_DROP_FRAG_DUPLICATE;
 403b724:	e03fff15 	stw	zero,-4(fp)
 403b728:	00004806 	br	403b84c <ip_reasm_compute_overlap+0x578>
                  /* currend is less than jrend (case D2).  current fragment 
                   * is a subset of the just received fragment.  Increment 
                   * the start pointer and decrement the length of the just
                   * received fragment.  Move on to the next fragment in 
                   * the RFQ. */
                  drop_len = (currend - jrstart) + 1;
 403b72c:	e0fff58b 	ldhu	r3,-42(fp)
 403b730:	e0bff70b 	ldhu	r2,-36(fp)
 403b734:	1885c83a 	sub	r2,r3,r2
 403b738:	10800044 	addi	r2,r2,1
 403b73c:	e0bff50d 	sth	r2,-44(fp)
                  p->nb_prot += drop_len;
 403b740:	e0bffb17 	ldw	r2,-20(fp)
 403b744:	10c00317 	ldw	r3,12(r2)
 403b748:	e0bff50b 	ldhu	r2,-44(fp)
 403b74c:	1887883a 	add	r3,r3,r2
 403b750:	e0bffb17 	ldw	r2,-20(fp)
 403b754:	10c00315 	stw	r3,12(r2)
                  p->nb_plen -= drop_len;
 403b758:	e0bffb17 	ldw	r2,-20(fp)
 403b75c:	10c00417 	ldw	r3,16(r2)
 403b760:	e0bff50b 	ldhu	r2,-44(fp)
 403b764:	1887c83a 	sub	r3,r3,r2
 403b768:	e0bffb17 	ldw	r2,-20(fp)
 403b76c:	10c00415 	stw	r3,16(r2)
                  jrstart += drop_len;
 403b770:	e0fff70b 	ldhu	r3,-36(fp)
 403b774:	e0bff50b 	ldhu	r2,-44(fp)
 403b778:	1885883a 	add	r2,r3,r2
 403b77c:	e0bff70d 	sth	r2,-36(fp)
                  jrend = jrstart + p->nb_plen - 1;
 403b780:	e0bffb17 	ldw	r2,-20(fp)
 403b784:	10800417 	ldw	r2,16(r2)
 403b788:	1007883a 	mov	r3,r2
 403b78c:	e0bff70b 	ldhu	r2,-36(fp)
 403b790:	1885883a 	add	r2,r3,r2
 403b794:	10bfffc4 	addi	r2,r2,-1
 403b798:	e0bff68d 	sth	r2,-38(fp)
 403b79c:	00001206 	br	403b7e8 <ip_reasm_compute_overlap+0x514>
                  }
               }
            } /* end if (PACKET buffer exists at this slot) */
         else
            {
            if ((*indexp) == INVALID_FRAG_INDEX)
 403b7a0:	e0bffd17 	ldw	r2,-12(fp)
 403b7a4:	1080000b 	ldhu	r2,0(r2)
 403b7a8:	10bfffcc 	andi	r2,r2,65535
 403b7ac:	10800418 	cmpnei	r2,r2,16
 403b7b0:	1000061e 	bne	r2,zero,403b7cc <ip_reasm_compute_overlap+0x4f8>
               {
               *indexp = i;
 403b7b4:	e0fffd17 	ldw	r3,-12(fp)
 403b7b8:	e0bff40b 	ldhu	r2,-48(fp)
 403b7bc:	1880000d 	sth	r2,0(r3)
               *last_rfqpp = rfqp;               
 403b7c0:	e0fffe17 	ldw	r3,-8(fp)
 403b7c4:	e0bffa17 	ldw	r2,-24(fp)
 403b7c8:	18800015 	stw	r2,0(r3)
               }
            if (irep->flags & IPR_RFQ_COMPACT)
 403b7cc:	e0bffc17 	ldw	r2,-16(fp)
 403b7d0:	10802103 	ldbu	r2,132(r2)
 403b7d4:	10803fcc 	andi	r2,r2,255
 403b7d8:	1080004c 	andi	r2,r2,1
 403b7dc:	10803fcc 	andi	r2,r2,255
 403b7e0:	1004c03a 	cmpne	r2,r2,zero
 403b7e4:	1000061e 	bne	r2,zero,403b800 <ip_reasm_compute_overlap+0x52c>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403b7e8:	e0bff40b 	ldhu	r2,-48(fp)
 403b7ec:	10800044 	addi	r2,r2,1
 403b7f0:	e0bff40d 	sth	r2,-48(fp)
 403b7f4:	e0bff40b 	ldhu	r2,-48(fp)
 403b7f8:	10800430 	cmpltui	r2,r2,16
 403b7fc:	103f1e1e 	bne	r2,zero,403b478 <ip_reasm_compute_overlap+0x1a4>
               }
            }
         } /* end FOR (0...(IPR_MAX_FRAGS - 1)) */

      /* skip saving RFQ pointer if we've already found an empty slot */
      if ((*indexp) == INVALID_FRAG_INDEX) 
 403b800:	e0bffd17 	ldw	r2,-12(fp)
 403b804:	1080000b 	ldhu	r2,0(r2)
 403b808:	10bfffcc 	andi	r2,r2,65535
 403b80c:	10800418 	cmpnei	r2,r2,16
 403b810:	1000031e 	bne	r2,zero,403b820 <ip_reasm_compute_overlap+0x54c>
         {
         *last_rfqpp = rfqp;
 403b814:	e0fffe17 	ldw	r3,-8(fp)
 403b818:	e0bffa17 	ldw	r2,-24(fp)
 403b81c:	18800015 	stw	r2,0(r3)
         }
      rfqp = rfqp->next;
 403b820:	e0bffa17 	ldw	r2,-24(fp)
 403b824:	10800017 	ldw	r2,0(r2)
 403b828:	e0bffa15 	stw	r2,-24(fp)
   *last_rfqpp = 0;
   *hole_createdp = IPREASM_FALSE;

   rfqp = &(irep->rfq);

   while (rfqp)
 403b82c:	e0bffa17 	ldw	r2,-24(fp)
 403b830:	1004c03a 	cmpne	r2,r2,zero
 403b834:	103f0e1e 	bne	r2,zero,403b470 <ip_reasm_compute_overlap+0x19c>
      } /* end while (rfqp) */

   /* if no empty slots were found, (*last_rfqpp) will contain a pointer 
    * to the last RFQ that we were working with */

   *frag_offsetp = jrstart; /* stored in host byte order */
 403b838:	e0c00217 	ldw	r3,8(fp)
 403b83c:	e0bff70b 	ldhu	r2,-36(fp)
 403b840:	1880000d 	sth	r2,0(r3)

   return IPREASM_ACCEPT_FRAG;
 403b844:	00800084 	movi	r2,2
 403b848:	e0bfff15 	stw	r2,-4(fp)
 403b84c:	e0bfff17 	ldw	r2,-4(fp)
}
 403b850:	e037883a 	mov	sp,fp
 403b854:	dfc00117 	ldw	ra,4(sp)
 403b858:	df000017 	ldw	fp,0(sp)
 403b85c:	dec00204 	addi	sp,sp,8
 403b860:	f800283a 	ret

0403b864 <ip_reasm_process_subsequent_fragments>:
            queued fragments (and hence has been dropped), or if the fragment
            has been processed successfully.
*/

int ip_reasm_process_subsequent_fragments (PACKET p, IREP irep)
{
 403b864:	deffed04 	addi	sp,sp,-76
 403b868:	dfc01215 	stw	ra,72(sp)
 403b86c:	df001115 	stw	fp,68(sp)
 403b870:	df001104 	addi	fp,sp,68
 403b874:	e13ffa15 	stw	r4,-24(fp)
 403b878:	e17ffb15 	stw	r5,-20(fp)
   PACKET reassy_pkt;
   struct ip * pip;
   RFQP new_rfqp = 0;
 403b87c:	e03ff415 	stw	zero,-48(fp)
   u_short index;
   RFQP rfqp;
   u_short frag_offset;
   u_char hole_created;

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 403b880:	e13ffb17 	ldw	r4,-20(fp)
 403b884:	403bdf80 	call	403bdf8 <ip_reasm_find_ire>
 403b888:	10803fcc 	andi	r2,r2,255
 403b88c:	10800060 	cmpeqi	r2,r2,1
 403b890:	1000171e 	bne	r2,zero,403b8f0 <ip_reasm_process_subsequent_fragments+0x8c>
      {
      ++ire_stats.bad_irep;
 403b894:	008101b4 	movhi	r2,1030
 403b898:	10a46204 	addi	r2,r2,-28280
 403b89c:	10800017 	ldw	r2,0(r2)
 403b8a0:	10c00044 	addi	r3,r2,1
 403b8a4:	008101b4 	movhi	r2,1030
 403b8a8:	10a46204 	addi	r2,r2,-28280
 403b8ac:	10c00015 	stw	r3,0(r2)
      LOCK_NET_RESOURCE (FREEQ_RESID);
 403b8b0:	01000084 	movi	r4,2
 403b8b4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free (p);
 403b8b8:	e13ffa17 	ldw	r4,-24(fp)
 403b8bc:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403b8c0:	01000084 	movi	r4,2
 403b8c4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ++ip_mib.ipReasmFails;
 403b8c8:	008101b4 	movhi	r2,1030
 403b8cc:	10a44e04 	addi	r2,r2,-28360
 403b8d0:	10800f17 	ldw	r2,60(r2)
 403b8d4:	10c00044 	addi	r3,r2,1
 403b8d8:	008101b4 	movhi	r2,1030
 403b8dc:	10a44e04 	addi	r2,r2,-28360
 403b8e0:	10c00f15 	stw	r3,60(r2)
      return ENP_PARAM;
 403b8e4:	00bffd84 	movi	r2,-10
 403b8e8:	e0bffe15 	stw	r2,-8(fp)
 403b8ec:	00013c06 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>
      }

   pip = ip_head(p);
 403b8f0:	e0bffa17 	ldw	r2,-24(fp)
 403b8f4:	10800317 	ldw	r2,12(r2)
 403b8f8:	e0bff515 	stw	r2,-44(fp)
   ftype = ip_reasm_determine_type_of_frag (pip);
 403b8fc:	e13ff517 	ldw	r4,-44(fp)
 403b900:	403ac880 	call	403ac88 <ip_reasm_determine_type_of_frag>
 403b904:	e0bff215 	stw	r2,-56(fp)
   /* this fragment is a destined for an already queued fragment stream.
    * we update the 'length' field for LFs here because ip_reasm_compute_overlap ()
    * modifies the received fragment's nb_prot pointer (thereby making its IP header 
    * inaccessible) */
   if (ftype == IP_LF)
 403b908:	e0bff217 	ldw	r2,-56(fp)
 403b90c:	10800158 	cmpnei	r2,r2,5
 403b910:	10002c1e 	bne	r2,zero,403b9c4 <ip_reasm_process_subsequent_fragments+0x160>
      {
      irep->length = (((ntohs(pip->ip_flgs_foff)) & IP_EXTRACT_FOFF) << 3) + ((ntohs(pip->ip_len)) - ip_hlen(pip));
 403b914:	e0bff517 	ldw	r2,-44(fp)
 403b918:	1080018b 	ldhu	r2,6(r2)
 403b91c:	10bfffcc 	andi	r2,r2,65535
 403b920:	1004d23a 	srli	r2,r2,8
 403b924:	10803fcc 	andi	r2,r2,255
 403b928:	1009883a 	mov	r4,r2
 403b92c:	e0bff517 	ldw	r2,-44(fp)
 403b930:	1080018b 	ldhu	r2,6(r2)
 403b934:	10bfffcc 	andi	r2,r2,65535
 403b938:	1004923a 	slli	r2,r2,8
 403b93c:	1007883a 	mov	r3,r2
 403b940:	00bfc004 	movi	r2,-256
 403b944:	1884703a 	and	r2,r3,r2
 403b948:	2084b03a 	or	r2,r4,r2
 403b94c:	1087ffcc 	andi	r2,r2,8191
 403b950:	100490fa 	slli	r2,r2,3
 403b954:	100b883a 	mov	r5,r2
 403b958:	e0bff517 	ldw	r2,-44(fp)
 403b95c:	1080008b 	ldhu	r2,2(r2)
 403b960:	10bfffcc 	andi	r2,r2,65535
 403b964:	1004d23a 	srli	r2,r2,8
 403b968:	10803fcc 	andi	r2,r2,255
 403b96c:	1009883a 	mov	r4,r2
 403b970:	e0bff517 	ldw	r2,-44(fp)
 403b974:	1080008b 	ldhu	r2,2(r2)
 403b978:	10bfffcc 	andi	r2,r2,65535
 403b97c:	1004923a 	slli	r2,r2,8
 403b980:	1007883a 	mov	r3,r2
 403b984:	00bfc004 	movi	r2,-256
 403b988:	1884703a 	and	r2,r3,r2
 403b98c:	2084b03a 	or	r2,r4,r2
 403b990:	1007883a 	mov	r3,r2
 403b994:	e0bff517 	ldw	r2,-44(fp)
 403b998:	10800003 	ldbu	r2,0(r2)
 403b99c:	10803fcc 	andi	r2,r2,255
 403b9a0:	108003cc 	andi	r2,r2,15
 403b9a4:	1085883a 	add	r2,r2,r2
 403b9a8:	1085883a 	add	r2,r2,r2
 403b9ac:	1885c83a 	sub	r2,r3,r2
 403b9b0:	2885883a 	add	r2,r5,r2
 403b9b4:	1007883a 	mov	r3,r2
 403b9b8:	e0bffb17 	ldw	r2,-20(fp)
 403b9bc:	10c0040d 	sth	r3,16(r2)
 403b9c0:	00000a06 	br	403b9ec <ip_reasm_process_subsequent_fragments+0x188>
      }
   else if (ftype == IP_FF)
 403b9c4:	e0bff217 	ldw	r2,-56(fp)
 403b9c8:	10800058 	cmpnei	r2,r2,1
 403b9cc:	1000071e 	bne	r2,zero,403b9ec <ip_reasm_process_subsequent_fragments+0x188>
      {
      irep->l2_hdr = p->nb_buff;
 403b9d0:	e0bffa17 	ldw	r2,-24(fp)
 403b9d4:	10c00117 	ldw	r3,4(r2)
 403b9d8:	e0bffb17 	ldw	r2,-20(fp)
 403b9dc:	10c01f15 	stw	r3,124(r2)
      irep->l3_hdr = (char *) pip;
 403b9e0:	e0fff517 	ldw	r3,-44(fp)
 403b9e4:	e0bffb17 	ldw	r2,-20(fp)
 403b9e8:	10c02015 	stw	r3,128(r2)
      }

   /* Check for overlap, and determine the increase in memory resource 
    * requirements from the newly arrived fragment */
   if ((rc2 = ip_reasm_compute_overlap (p, irep, &index, &rfqp, &frag_offset, &hole_created)) != IPREASM_ACCEPT_FRAG)
 403b9ec:	e1bff704 	addi	r6,fp,-36
 403b9f0:	e1fff804 	addi	r7,fp,-32
 403b9f4:	e0bff904 	addi	r2,fp,-28
 403b9f8:	d8800015 	stw	r2,0(sp)
 403b9fc:	e0bff984 	addi	r2,fp,-26
 403ba00:	d8800115 	stw	r2,4(sp)
 403ba04:	e13ffa17 	ldw	r4,-24(fp)
 403ba08:	e17ffb17 	ldw	r5,-20(fp)
 403ba0c:	403b2d40 	call	403b2d4 <ip_reasm_compute_overlap>
 403ba10:	e0bff115 	stw	r2,-60(fp)
 403ba14:	e0bff117 	ldw	r2,-60(fp)
 403ba18:	108000a0 	cmpeqi	r2,r2,2
 403ba1c:	10000e1e 	bne	r2,zero,403ba58 <ip_reasm_process_subsequent_fragments+0x1f4>
      {
      switch (rc2)
 403ba20:	e0fff117 	ldw	r3,-60(fp)
 403ba24:	e0ffff15 	stw	r3,-4(fp)
 403ba28:	e13fff17 	ldw	r4,-4(fp)
 403ba2c:	2005003a 	cmpeq	r2,r4,zero
 403ba30:	1000041e 	bne	r2,zero,403ba44 <ip_reasm_process_subsequent_fragments+0x1e0>
 403ba34:	e0ffff17 	ldw	r3,-4(fp)
 403ba38:	18800060 	cmpeqi	r2,r3,1
 403ba3c:	1000031e 	bne	r2,zero,403ba4c <ip_reasm_process_subsequent_fragments+0x1e8>
 403ba40:	00000506 	br	403ba58 <ip_reasm_process_subsequent_fragments+0x1f4>
         {
         case IPREASM_DROP_FRAG_DUPLICATE:
            /* this isn't really an error, since it indicates that the received 
             * fragment's information is a duplicate of what is present in the 
             * already queued fragments */
            return IPREASM_OK;
 403ba44:	e03ffe15 	stw	zero,-8(fp)
 403ba48:	0000e506 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>
         case IPREASM_DROP_FRAG_BAD_PARAM:
            /* this is a real error */
            return ENP_PARAM;
 403ba4c:	013ffd84 	movi	r4,-10
 403ba50:	e13ffe15 	stw	r4,-8(fp)
 403ba54:	0000e206 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>
      }

   /* this is a fragment from an existing fragment stream; 
    * check for resource limits before accepting it.  For now
    * assume that an extra RFQ is not required. */
   if ((rc = ip_reasm_check_mem_useage (p->nb_blen)) != IPREASM_OK)
 403ba58:	e0bffa17 	ldw	r2,-24(fp)
 403ba5c:	10800217 	ldw	r2,8(r2)
 403ba60:	113fffcc 	andi	r4,r2,65535
 403ba64:	403ad740 	call	403ad74 <ip_reasm_check_mem_useage>
 403ba68:	e0bff315 	stw	r2,-52(fp)
 403ba6c:	e0bff317 	ldw	r2,-52(fp)
 403ba70:	1005003a 	cmpeq	r2,r2,zero
 403ba74:	1000121e 	bne	r2,zero,403bac0 <ip_reasm_process_subsequent_fragments+0x25c>
      {
      LOCK_NET_RESOURCE (FREEQ_RESID);
 403ba78:	01000084 	movi	r4,2
 403ba7c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free (p);
 403ba80:	e13ffa17 	ldw	r4,-24(fp)
 403ba84:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403ba88:	01000084 	movi	r4,2
 403ba8c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      ip_reasm_delete_ire (irep);
 403ba90:	e13ffb17 	ldw	r4,-20(fp)
 403ba94:	403c29c0 	call	403c29c <ip_reasm_delete_ire>
      ++ip_mib.ipReasmFails;
 403ba98:	008101b4 	movhi	r2,1030
 403ba9c:	10a44e04 	addi	r2,r2,-28360
 403baa0:	10800f17 	ldw	r2,60(r2)
 403baa4:	10c00044 	addi	r3,r2,1
 403baa8:	008101b4 	movhi	r2,1030
 403baac:	10a44e04 	addi	r2,r2,-28360
 403bab0:	10c00f15 	stw	r3,60(r2)
      return rc;
 403bab4:	e0bff317 	ldw	r2,-52(fp)
 403bab8:	e0bffe15 	stw	r2,-8(fp)
 403babc:	0000c806 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>

   /* the two combinations of index and rfqp are as follows:
    * (1) index = INVALID_FRAG_INDEX, rfqp = non-zero: no empty slot found in RFQ(s),
    *     and rfqp points to the last RFQ that was processed
    * (2) index != INVALID_FRAG_INDEX, rfqp = non-zero: empty slot found in RFQ(s) */
   if (index != INVALID_FRAG_INDEX)
 403bac0:	e0bff70b 	ldhu	r2,-36(fp)
 403bac4:	10bfffcc 	andi	r2,r2,65535
 403bac8:	10800420 	cmpeqi	r2,r2,16
 403bacc:	1000121e 	bne	r2,zero,403bb18 <ip_reasm_process_subsequent_fragments+0x2b4>
      {
      /* we have an empty slot in the PACKET array into which we can place 
       * the just received fragment */
      rfqp->bufp[index] = p;
 403bad0:	e0fff817 	ldw	r3,-32(fp)
 403bad4:	e0bff70b 	ldhu	r2,-36(fp)
 403bad8:	10bfffcc 	andi	r2,r2,65535
 403badc:	1085883a 	add	r2,r2,r2
 403bae0:	1085883a 	add	r2,r2,r2
 403bae4:	10c5883a 	add	r2,r2,r3
 403bae8:	10c00104 	addi	r3,r2,4
 403baec:	e0bffa17 	ldw	r2,-24(fp)
 403baf0:	18800015 	stw	r2,0(r3)
      rfqp->frag_offset[index] = frag_offset;
 403baf4:	e0fff817 	ldw	r3,-32(fp)
 403baf8:	e0bff70b 	ldhu	r2,-36(fp)
 403bafc:	10bfffcc 	andi	r2,r2,65535
 403bb00:	e13ff90b 	ldhu	r4,-28(fp)
 403bb04:	1085883a 	add	r2,r2,r2
 403bb08:	10c5883a 	add	r2,r2,r3
 403bb0c:	10801104 	addi	r2,r2,68
 403bb10:	1100000d 	sth	r4,0(r2)
 403bb14:	00003c06 	br	403bc08 <ip_reasm_process_subsequent_fragments+0x3a4>
      }
   else
      {
      /* since we need to allocate an extra RFQ, check for memory useage again... */
      if ((rc = ip_reasm_check_mem_useage (p->nb_blen + (sizeof (RFQ)))) != IPREASM_OK)
 403bb18:	e0bffa17 	ldw	r2,-24(fp)
 403bb1c:	10800217 	ldw	r2,8(r2)
 403bb20:	10801904 	addi	r2,r2,100
 403bb24:	113fffcc 	andi	r4,r2,65535
 403bb28:	403ad740 	call	403ad74 <ip_reasm_check_mem_useage>
 403bb2c:	e0bff315 	stw	r2,-52(fp)
 403bb30:	e0bff317 	ldw	r2,-52(fp)
 403bb34:	1005003a 	cmpeq	r2,r2,zero
 403bb38:	1000121e 	bne	r2,zero,403bb84 <ip_reasm_process_subsequent_fragments+0x320>
         {
         LOCK_NET_RESOURCE (FREEQ_RESID);
 403bb3c:	01000084 	movi	r4,2
 403bb40:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free (p);
 403bb44:	e13ffa17 	ldw	r4,-24(fp)
 403bb48:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403bb4c:	01000084 	movi	r4,2
 403bb50:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 403bb54:	e13ffb17 	ldw	r4,-20(fp)
 403bb58:	403c29c0 	call	403c29c <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 403bb5c:	008101b4 	movhi	r2,1030
 403bb60:	10a44e04 	addi	r2,r2,-28360
 403bb64:	10800f17 	ldw	r2,60(r2)
 403bb68:	10c00044 	addi	r3,r2,1
 403bb6c:	008101b4 	movhi	r2,1030
 403bb70:	10a44e04 	addi	r2,r2,-28360
 403bb74:	10c00f15 	stw	r3,60(r2)
         return rc;
 403bb78:	e0fff317 	ldw	r3,-52(fp)
 403bb7c:	e0fffe15 	stw	r3,-8(fp)
 403bb80:	00009706 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>
         }

      /* no slots are available in the one (or more) existing RFQs; we 
       * need to create a new RFQ to store the just received fragment */
      new_rfqp = (RFQP) IPR_ALLOC (sizeof(RFQ));
 403bb84:	01001904 	movi	r4,100
 403bb88:	40265f80 	call	40265f8 <npalloc>
 403bb8c:	e0bff415 	stw	r2,-48(fp)
      if (new_rfqp == 0)
 403bb90:	e0bff417 	ldw	r2,-48(fp)
 403bb94:	1004c03a 	cmpne	r2,r2,zero
 403bb98:	1000121e 	bne	r2,zero,403bbe4 <ip_reasm_process_subsequent_fragments+0x380>
         {
         /* can't store the existing fragment, so we'll drop it */
         LOCK_NET_RESOURCE (FREEQ_RESID);
 403bb9c:	01000084 	movi	r4,2
 403bba0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free (p);
 403bba4:	e13ffa17 	ldw	r4,-24(fp)
 403bba8:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403bbac:	01000084 	movi	r4,2
 403bbb0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         ip_reasm_delete_ire (irep);
 403bbb4:	e13ffb17 	ldw	r4,-20(fp)
 403bbb8:	403c29c0 	call	403c29c <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 403bbbc:	008101b4 	movhi	r2,1030
 403bbc0:	10a44e04 	addi	r2,r2,-28360
 403bbc4:	10800f17 	ldw	r2,60(r2)
 403bbc8:	10c00044 	addi	r3,r2,1
 403bbcc:	008101b4 	movhi	r2,1030
 403bbd0:	10a44e04 	addi	r2,r2,-28360
 403bbd4:	10c00f15 	stw	r3,60(r2)
         return ENP_RESOURCE;
 403bbd8:	013ffa84 	movi	r4,-22
 403bbdc:	e13ffe15 	stw	r4,-8(fp)
 403bbe0:	00007f06 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>
         }
      else
         {
         new_rfqp->bufp[0] = p;
 403bbe4:	e0fff417 	ldw	r3,-48(fp)
 403bbe8:	e0bffa17 	ldw	r2,-24(fp)
 403bbec:	18800115 	stw	r2,4(r3)
         new_rfqp->frag_offset[0] = frag_offset;
 403bbf0:	e0fff90b 	ldhu	r3,-28(fp)
 403bbf4:	e0bff417 	ldw	r2,-48(fp)
 403bbf8:	10c0110d 	sth	r3,68(r2)
         rfqp->next = new_rfqp;
 403bbfc:	e0fff817 	ldw	r3,-32(fp)
 403bc00:	e0bff417 	ldw	r2,-48(fp)
 403bc04:	18800015 	stw	r2,0(r3)
         }
      }
      
      /* check to see if the RFQ is still compact, but only if hole(s) were created 
       * in ip_reasm_compute_overlap () */
      if (hole_created)
 403bc08:	e0bff983 	ldbu	r2,-26(fp)
 403bc0c:	10803fcc 	andi	r2,r2,255
 403bc10:	1005003a 	cmpeq	r2,r2,zero
 403bc14:	1000161e 	bne	r2,zero,403bc70 <ip_reasm_process_subsequent_fragments+0x40c>
         {
         if ((rc = ip_reasm_mark_compact_rfq (irep)) != IPREASM_OK)
 403bc18:	e13ffb17 	ldw	r4,-20(fp)
 403bc1c:	403c4640 	call	403c464 <ip_reasm_mark_compact_rfq>
 403bc20:	e0bff315 	stw	r2,-52(fp)
 403bc24:	e0bff317 	ldw	r2,-52(fp)
 403bc28:	1005003a 	cmpeq	r2,r2,zero
 403bc2c:	1000101e 	bne	r2,zero,403bc70 <ip_reasm_process_subsequent_fragments+0x40c>
            {
            /* an error return is due to a bad IRE pointer, which ip_reasm_mark_compact_rfq () logs */
            LOCK_NET_RESOURCE (FREEQ_RESID);
 403bc30:	01000084 	movi	r4,2
 403bc34:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free (p);
 403bc38:	e13ffa17 	ldw	r4,-24(fp)
 403bc3c:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403bc40:	01000084 	movi	r4,2
 403bc44:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            ++ip_mib.ipReasmFails;
 403bc48:	008101b4 	movhi	r2,1030
 403bc4c:	10a44e04 	addi	r2,r2,-28360
 403bc50:	10800f17 	ldw	r2,60(r2)
 403bc54:	10c00044 	addi	r3,r2,1
 403bc58:	008101b4 	movhi	r2,1030
 403bc5c:	10a44e04 	addi	r2,r2,-28360
 403bc60:	10c00f15 	stw	r3,60(r2)
            return rc;
 403bc64:	e0bff317 	ldw	r2,-52(fp)
 403bc68:	e0bffe15 	stw	r2,-8(fp)
 403bc6c:	00005c06 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>

   /* compute the total number of bytes queued in this IRE.  Note 
    * that the RHS has been updated to reflect the amount of "unique"
    * data in the just received fragment (the IP header has been dropped,
    * and perhaps additional duplicate data too (if present)) */
   irep->rcvd += (u_short) (p->nb_plen);
 403bc70:	e0bffb17 	ldw	r2,-20(fp)
 403bc74:	10c0048b 	ldhu	r3,18(r2)
 403bc78:	e0bffa17 	ldw	r2,-24(fp)
 403bc7c:	10800417 	ldw	r2,16(r2)
 403bc80:	1885883a 	add	r2,r3,r2
 403bc84:	1007883a 	mov	r3,r2
 403bc88:	e0bffb17 	ldw	r2,-20(fp)
 403bc8c:	10c0048d 	sth	r3,18(r2)
   ip_reasm_incr_mem_useage (p->nb_blen + ((new_rfqp == 0) ? 0 : (sizeof(RFQ))));
 403bc90:	e0bffa17 	ldw	r2,-24(fp)
 403bc94:	10800217 	ldw	r2,8(r2)
 403bc98:	e0bffd0d 	sth	r2,-12(fp)
 403bc9c:	e0bff417 	ldw	r2,-48(fp)
 403bca0:	1004c03a 	cmpne	r2,r2,zero
 403bca4:	1000021e 	bne	r2,zero,403bcb0 <ip_reasm_process_subsequent_fragments+0x44c>
 403bca8:	e03ffc0d 	sth	zero,-16(fp)
 403bcac:	00000206 	br	403bcb8 <ip_reasm_process_subsequent_fragments+0x454>
 403bcb0:	00c01904 	movi	r3,100
 403bcb4:	e0fffc0d 	sth	r3,-16(fp)
 403bcb8:	e13ffd0b 	ldhu	r4,-12(fp)
 403bcbc:	e0fffc0b 	ldhu	r3,-16(fp)
 403bcc0:	20c5883a 	add	r2,r4,r3
 403bcc4:	113fffcc 	andi	r4,r2,65535
 403bcc8:	403ae0c0 	call	403ae0c <ip_reasm_incr_mem_useage>

   if (irep->length != 0)
 403bccc:	e0bffb17 	ldw	r2,-20(fp)
 403bcd0:	1080040b 	ldhu	r2,16(r2)
 403bcd4:	10bfffcc 	andi	r2,r2,65535
 403bcd8:	1005003a 	cmpeq	r2,r2,zero
 403bcdc:	10003f1e 	bne	r2,zero,403bddc <ip_reasm_process_subsequent_fragments+0x578>
      {
      /* we know the total length of the original unfragmented datagram; 
       * let's check to see if we have all of the bytes... */
      if (irep->rcvd == irep->length)
 403bce0:	e0bffb17 	ldw	r2,-20(fp)
 403bce4:	10c0048b 	ldhu	r3,18(r2)
 403bce8:	e0bffb17 	ldw	r2,-20(fp)
 403bcec:	1080040b 	ldhu	r2,16(r2)
 403bcf0:	18ffffcc 	andi	r3,r3,65535
 403bcf4:	10bfffcc 	andi	r2,r2,65535
 403bcf8:	1880381e 	bne	r3,r2,403bddc <ip_reasm_process_subsequent_fragments+0x578>
          * Ensure that we allocate space for the data link header, IP header, 
          * and the payload of the original, unfragmented datagram.  We pick 
          * the data link layer and IP headers from the First Fragment (FF), 
          * but we need to adjust some of the fields in the IP header after 
          * reassembly is complete. */
         pip = (struct ip *) irep->l3_hdr;
 403bcfc:	e0bffb17 	ldw	r2,-20(fp)
 403bd00:	10802017 	ldw	r2,128(r2)
 403bd04:	e0bff515 	stw	r2,-44(fp)
         LOCK_NET_RESOURCE (FREEQ_RESID);
 403bd08:	01000084 	movi	r4,2
 403bd0c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         reassy_pkt = pk_alloc (irep->length + (irep->l3_hdr - irep->l2_hdr) + ip_hlen (pip));
 403bd10:	e0bffb17 	ldw	r2,-20(fp)
 403bd14:	1080040b 	ldhu	r2,16(r2)
 403bd18:	113fffcc 	andi	r4,r2,65535
 403bd1c:	e0bffb17 	ldw	r2,-20(fp)
 403bd20:	10802017 	ldw	r2,128(r2)
 403bd24:	1007883a 	mov	r3,r2
 403bd28:	e0bffb17 	ldw	r2,-20(fp)
 403bd2c:	10801f17 	ldw	r2,124(r2)
 403bd30:	1885c83a 	sub	r2,r3,r2
 403bd34:	2087883a 	add	r3,r4,r2
 403bd38:	e0bff517 	ldw	r2,-44(fp)
 403bd3c:	10800003 	ldbu	r2,0(r2)
 403bd40:	10803fcc 	andi	r2,r2,255
 403bd44:	108003cc 	andi	r2,r2,15
 403bd48:	1085883a 	add	r2,r2,r2
 403bd4c:	1085883a 	add	r2,r2,r2
 403bd50:	1885883a 	add	r2,r3,r2
 403bd54:	1009883a 	mov	r4,r2
 403bd58:	4024f700 	call	4024f70 <pk_alloc>
 403bd5c:	e0bff615 	stw	r2,-40(fp)
         UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403bd60:	01000084 	movi	r4,2
 403bd64:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         if (reassy_pkt == 0)
 403bd68:	e0bff617 	ldw	r2,-40(fp)
 403bd6c:	1004c03a 	cmpne	r2,r2,zero
 403bd70:	10000c1e 	bne	r2,zero,403bda4 <ip_reasm_process_subsequent_fragments+0x540>
            {
            /* the following call will delete all queued fragments, including
             * the currently received one */
            ip_reasm_delete_ire (irep);
 403bd74:	e13ffb17 	ldw	r4,-20(fp)
 403bd78:	403c29c0 	call	403c29c <ip_reasm_delete_ire>
            ++ip_mib.ipReasmFails;
 403bd7c:	008101b4 	movhi	r2,1030
 403bd80:	10a44e04 	addi	r2,r2,-28360
 403bd84:	10800f17 	ldw	r2,60(r2)
 403bd88:	10c00044 	addi	r3,r2,1
 403bd8c:	008101b4 	movhi	r2,1030
 403bd90:	10a44e04 	addi	r2,r2,-28360
 403bd94:	10c00f15 	stw	r3,60(r2)
            return ENP_NOBUFFER;
 403bd98:	013ffac4 	movi	r4,-21
 403bd9c:	e13ffe15 	stw	r4,-8(fp)
 403bda0:	00000f06 	br	403bde0 <ip_reasm_process_subsequent_fragments+0x57c>
            }
         else
            {
            ip_reasm_copy_queued_fragments_into_reassy_buffer (reassy_pkt, irep);
 403bda4:	e13ff617 	ldw	r4,-40(fp)
 403bda8:	e17ffb17 	ldw	r5,-20(fp)
 403bdac:	403be5c0 	call	403be5c <ip_reasm_copy_queued_fragments_into_reassy_buffer>
            /* free the IRE structure (and its constituent elements) */
            ip_reasm_delete_ire (irep);
 403bdb0:	e13ffb17 	ldw	r4,-20(fp)
 403bdb4:	403c29c0 	call	403c29c <ip_reasm_delete_ire>
            /* at this point, 'irep' is no longer a valid pointer, and so should 
             * not be referenced.  We're done, and we now pass the packet for 
             * demux'ing to the appropriate entity (e.g., UDP, TCP, etc.).  Note
             * that ip_demux () expects 'nb_prot' to point to the beginning of 
             * the IP header. */
            ++ip_mib.ipReasmOKs;
 403bdb8:	008101b4 	movhi	r2,1030
 403bdbc:	10a44e04 	addi	r2,r2,-28360
 403bdc0:	10800e17 	ldw	r2,56(r2)
 403bdc4:	10c00044 	addi	r3,r2,1
 403bdc8:	008101b4 	movhi	r2,1030
 403bdcc:	10a44e04 	addi	r2,r2,-28360
 403bdd0:	10c00e15 	stw	r3,56(r2)
            ip_demux (reassy_pkt);
 403bdd4:	e13ff617 	ldw	r4,-40(fp)
 403bdd8:	403d3540 	call	403d354 <ip_demux>
      {
      /* we haven't received the LF (so we don't know the total amount of data in 
       * the original, unfragmented datagram), and therefore reassembly can't complete yet */
      }

   return IPREASM_OK;
 403bddc:	e03ffe15 	stw	zero,-8(fp)
 403bde0:	e0bffe17 	ldw	r2,-8(fp)
}
 403bde4:	e037883a 	mov	sp,fp
 403bde8:	dfc00117 	ldw	ra,4(sp)
 403bdec:	df000017 	ldw	fp,0(sp)
 403bdf0:	dec00204 	addi	sp,sp,8
 403bdf4:	f800283a 	ret

0403bdf8 <ip_reasm_find_ire>:
OUTPUT: This function returns a IPREASM_TRUE if the IRE exists in the master 
IRE list; otherwise, it returns a IPREASM_FALSE.
*/

u_char ip_reasm_find_ire (IREP irep)
{
 403bdf8:	defffc04 	addi	sp,sp,-16
 403bdfc:	df000315 	stw	fp,12(sp)
 403be00:	df000304 	addi	fp,sp,12
 403be04:	e13ffe15 	stw	r4,-8(fp)
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403be08:	d0a84617 	ldw	r2,-24296(gp)
 403be0c:	e0bffd15 	stw	r2,-12(fp)
 403be10:	00000906 	br	403be38 <ip_reasm_find_ire+0x40>
      {
      if (tmpp == irep) 
 403be14:	e0fffd17 	ldw	r3,-12(fp)
 403be18:	e0bffe17 	ldw	r2,-8(fp)
 403be1c:	1880031e 	bne	r3,r2,403be2c <ip_reasm_find_ire+0x34>
         {
         return IPREASM_TRUE;
 403be20:	00800044 	movi	r2,1
 403be24:	e0bfff15 	stw	r2,-4(fp)
 403be28:	00000706 	br	403be48 <ip_reasm_find_ire+0x50>
u_char ip_reasm_find_ire (IREP irep)
{
   IREP tmpp;

   /* check to see if the IRE exists in the IREQ linked list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403be2c:	e0bffd17 	ldw	r2,-12(fp)
 403be30:	10800017 	ldw	r2,0(r2)
 403be34:	e0bffd15 	stw	r2,-12(fp)
 403be38:	e0bffd17 	ldw	r2,-12(fp)
 403be3c:	1004c03a 	cmpne	r2,r2,zero
 403be40:	103ff41e 	bne	r2,zero,403be14 <ip_reasm_find_ire+0x1c>
         {
         return IPREASM_TRUE;
         }
      }

   return IPREASM_FALSE;
 403be44:	e03fff15 	stw	zero,-4(fp)
 403be48:	e0bfff17 	ldw	r2,-4(fp)
}
 403be4c:	e037883a 	mov	sp,fp
 403be50:	df000017 	ldw	fp,0(sp)
 403be54:	dec00104 	addi	sp,sp,4
 403be58:	f800283a 	ret

0403be5c <ip_reasm_copy_queued_fragments_into_reassy_buffer>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_copy_queued_fragments_into_reassy_buffer (PACKET reassy_pkt, IREP irep)
{
 403be5c:	defff404 	addi	sp,sp,-48
 403be60:	dfc00b15 	stw	ra,44(sp)
 403be64:	df000a15 	stw	fp,40(sp)
 403be68:	df000a04 	addi	fp,sp,40
 403be6c:	e13ffe15 	stw	r4,-8(fp)
 403be70:	e17fff15 	stw	r5,-4(fp)
   RFQP rfqp;
   u_short i;
   PACKET p;
   u_char iphlen;
   char * writep;
   PACKET sav_pkt = 0;
 403be74:	e03ff615 	stw	zero,-40(fp)

   pip = (struct ip *) irep->l3_hdr;
 403be78:	e0bfff17 	ldw	r2,-4(fp)
 403be7c:	10802017 	ldw	r2,128(r2)
 403be80:	e0bffd15 	stw	r2,-12(fp)
   iphlen = ip_hlen (pip);
 403be84:	e0bffd17 	ldw	r2,-12(fp)
 403be88:	10800003 	ldbu	r2,0(r2)
 403be8c:	108003cc 	andi	r2,r2,15
 403be90:	1085883a 	add	r2,r2,r2
 403be94:	1085883a 	add	r2,r2,r2
 403be98:	e0bff805 	stb	r2,-32(fp)

   /* copy the data link and IP layer headers into place.  These headers are 
    * from the First Fragment (FF). */
   offset = (u_char) ((irep->l3_hdr - irep->l2_hdr) + iphlen);
 403be9c:	e0bfff17 	ldw	r2,-4(fp)
 403bea0:	10802017 	ldw	r2,128(r2)
 403bea4:	1007883a 	mov	r3,r2
 403bea8:	e0bfff17 	ldw	r2,-4(fp)
 403beac:	10801f17 	ldw	r2,124(r2)
 403beb0:	1885c83a 	sub	r2,r3,r2
 403beb4:	1007883a 	mov	r3,r2
 403beb8:	e0bff803 	ldbu	r2,-32(fp)
 403bebc:	1885883a 	add	r2,r3,r2
 403bec0:	e0bffc05 	stb	r2,-16(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);
 403bec4:	e0bffe17 	ldw	r2,-8(fp)
 403bec8:	11000117 	ldw	r4,4(r2)
 403becc:	e0bfff17 	ldw	r2,-4(fp)
 403bed0:	10801f17 	ldw	r2,124(r2)
 403bed4:	e0fffc03 	ldbu	r3,-16(fp)
 403bed8:	100b883a 	mov	r5,r2
 403bedc:	180d883a 	mov	r6,r3
 403bee0:	4001de40 	call	4001de4 <memcpy>

   rfqp = &(irep->rfq);
 403bee4:	e0bfff17 	ldw	r2,-4(fp)
 403bee8:	10800604 	addi	r2,r2,24
 403beec:	e0bffb15 	stw	r2,-20(fp)
   writep = reassy_pkt->nb_buff + offset;
 403bef0:	e0bffe17 	ldw	r2,-8(fp)
 403bef4:	10c00117 	ldw	r3,4(r2)
 403bef8:	e0bffc03 	ldbu	r2,-16(fp)
 403befc:	1885883a 	add	r2,r3,r2
 403bf00:	e0bff715 	stw	r2,-36(fp)

   while (rfqp)
 403bf04:	00004606 	br	403c020 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1c4>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403bf08:	e03ffa0d 	sth	zero,-24(fp)
 403bf0c:	00003e06 	br	403c008 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1ac>
         {
         if ((p = rfqp->bufp [i]) != 0)
 403bf10:	e0bffa0b 	ldhu	r2,-24(fp)
 403bf14:	e0fffb17 	ldw	r3,-20(fp)
 403bf18:	1085883a 	add	r2,r2,r2
 403bf1c:	1085883a 	add	r2,r2,r2
 403bf20:	10c5883a 	add	r2,r2,r3
 403bf24:	10800104 	addi	r2,r2,4
 403bf28:	10800017 	ldw	r2,0(r2)
 403bf2c:	e0bff915 	stw	r2,-28(fp)
 403bf30:	e0bff917 	ldw	r2,-28(fp)
 403bf34:	1005003a 	cmpeq	r2,r2,zero
 403bf38:	1000291e 	bne	r2,zero,403bfe0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x184>
            {
            /* note that rfqp->frag_offset[i] is the true value of the offset field, 
             * and does not require any scaling (like the Fragment Offset field in 
             * the IP header) */
            MEMCPY((writep + rfqp->frag_offset[i]), p->nb_prot, p->nb_plen);
 403bf3c:	e0bffa0b 	ldhu	r2,-24(fp)
 403bf40:	e0fffb17 	ldw	r3,-20(fp)
 403bf44:	1085883a 	add	r2,r2,r2
 403bf48:	10c5883a 	add	r2,r2,r3
 403bf4c:	10801104 	addi	r2,r2,68
 403bf50:	1080000b 	ldhu	r2,0(r2)
 403bf54:	10bfffcc 	andi	r2,r2,65535
 403bf58:	1007883a 	mov	r3,r2
 403bf5c:	e0bff717 	ldw	r2,-36(fp)
 403bf60:	1887883a 	add	r3,r3,r2
 403bf64:	e0bff917 	ldw	r2,-28(fp)
 403bf68:	11400317 	ldw	r5,12(r2)
 403bf6c:	e0bff917 	ldw	r2,-28(fp)
 403bf70:	10800417 	ldw	r2,16(r2)
 403bf74:	1809883a 	mov	r4,r3
 403bf78:	100d883a 	mov	r6,r2
 403bf7c:	4001de40 	call	4001de4 <memcpy>
            /* free fragment after we've copied data out from it (unless we need to
             * save it so that we can copy some fields from it later (after exiting 
             * from the loop)) */
            if (!sav_pkt) sav_pkt = p;
 403bf80:	e0bff617 	ldw	r2,-40(fp)
 403bf84:	1004c03a 	cmpne	r2,r2,zero
 403bf88:	1000031e 	bne	r2,zero,403bf98 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x13c>
 403bf8c:	e0bff917 	ldw	r2,-28(fp)
 403bf90:	e0bff615 	stw	r2,-40(fp)
 403bf94:	00000a06 	br	403bfc0 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x164>
            else
               {
               ip_reasm_decr_mem_useage (p->nb_blen);
 403bf98:	e0bff917 	ldw	r2,-28(fp)
 403bf9c:	10800217 	ldw	r2,8(r2)
 403bfa0:	113fffcc 	andi	r4,r2,65535
 403bfa4:	403aeb40 	call	403aeb4 <ip_reasm_decr_mem_useage>
               LOCK_NET_RESOURCE (FREEQ_RESID);
 403bfa8:	01000084 	movi	r4,2
 403bfac:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
               pk_free (p);
 403bfb0:	e13ff917 	ldw	r4,-28(fp)
 403bfb4:	40253040 	call	4025304 <pk_free>
               UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403bfb8:	01000084 	movi	r4,2
 403bfbc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
               }
            /* since we're done with the packet, mark slot as unused */
            rfqp->bufp [i] = 0;
 403bfc0:	e0bffa0b 	ldhu	r2,-24(fp)
 403bfc4:	e0fffb17 	ldw	r3,-20(fp)
 403bfc8:	1085883a 	add	r2,r2,r2
 403bfcc:	1085883a 	add	r2,r2,r2
 403bfd0:	10c5883a 	add	r2,r2,r3
 403bfd4:	10800104 	addi	r2,r2,4
 403bfd8:	10000015 	stw	zero,0(r2)
 403bfdc:	00000706 	br	403bffc <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1a0>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 403bfe0:	e0bfff17 	ldw	r2,-4(fp)
 403bfe4:	10802103 	ldbu	r2,132(r2)
 403bfe8:	10803fcc 	andi	r2,r2,255
 403bfec:	1080004c 	andi	r2,r2,1
 403bff0:	10803fcc 	andi	r2,r2,255
 403bff4:	1004c03a 	cmpne	r2,r2,zero
 403bff8:	1000061e 	bne	r2,zero,403c014 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0x1b8>
   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403bffc:	e0bffa0b 	ldhu	r2,-24(fp)
 403c000:	10800044 	addi	r2,r2,1
 403c004:	e0bffa0d 	sth	r2,-24(fp)
 403c008:	e0bffa0b 	ldhu	r2,-24(fp)
 403c00c:	10800430 	cmpltui	r2,r2,16
 403c010:	103fbf1e 	bne	r2,zero,403bf10 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xb4>
               break;
               }
            }
          }

      rfqp = rfqp->next;
 403c014:	e0bffb17 	ldw	r2,-20(fp)
 403c018:	10800017 	ldw	r2,0(r2)
 403c01c:	e0bffb15 	stw	r2,-20(fp)
   MEMCPY(reassy_pkt->nb_buff, irep->l2_hdr, offset);

   rfqp = &(irep->rfq);
   writep = reassy_pkt->nb_buff + offset;

   while (rfqp)
 403c020:	e0bffb17 	ldw	r2,-20(fp)
 403c024:	1004c03a 	cmpne	r2,r2,zero
 403c028:	103fb71e 	bne	r2,zero,403bf08 <ip_reasm_copy_queued_fragments_into_reassy_buffer+0xac>
      }

   /* update various fields in the reassembled packet.  Some fields will be 
    * picked from one of the constituent fragments (sav_pkt) which hasn't
    * been deleted yet. */
   reassy_pkt->nb_prot = reassy_pkt->nb_buff + (irep->l3_hdr - irep->l2_hdr);
 403c02c:	e0bffe17 	ldw	r2,-8(fp)
 403c030:	11000117 	ldw	r4,4(r2)
 403c034:	e0bfff17 	ldw	r2,-4(fp)
 403c038:	10802017 	ldw	r2,128(r2)
 403c03c:	1007883a 	mov	r3,r2
 403c040:	e0bfff17 	ldw	r2,-4(fp)
 403c044:	10801f17 	ldw	r2,124(r2)
 403c048:	1885c83a 	sub	r2,r3,r2
 403c04c:	2087883a 	add	r3,r4,r2
 403c050:	e0bffe17 	ldw	r2,-8(fp)
 403c054:	10c00315 	stw	r3,12(r2)
   reassy_pkt->nb_plen = irep->length + iphlen;
 403c058:	e0bfff17 	ldw	r2,-4(fp)
 403c05c:	1080040b 	ldhu	r2,16(r2)
 403c060:	10ffffcc 	andi	r3,r2,65535
 403c064:	e0bff803 	ldbu	r2,-32(fp)
 403c068:	1885883a 	add	r2,r3,r2
 403c06c:	1007883a 	mov	r3,r2
 403c070:	e0bffe17 	ldw	r2,-8(fp)
 403c074:	10c00415 	stw	r3,16(r2)
   reassy_pkt->nb_tstamp = cticks;
 403c078:	00810174 	movhi	r2,1029
 403c07c:	1081e404 	addi	r2,r2,1936
 403c080:	10800017 	ldw	r2,0(r2)
 403c084:	1007883a 	mov	r3,r2
 403c088:	e0bffe17 	ldw	r2,-8(fp)
 403c08c:	10c00515 	stw	r3,20(r2)
   reassy_pkt->flags |= ((sav_pkt->flags) & (PKF_BCAST | PKF_MCAST));
 403c090:	e0bffe17 	ldw	r2,-8(fp)
 403c094:	10c00a17 	ldw	r3,40(r2)
 403c098:	e0bff617 	ldw	r2,-40(fp)
 403c09c:	10800a17 	ldw	r2,40(r2)
 403c0a0:	108000cc 	andi	r2,r2,3
 403c0a4:	1886b03a 	or	r3,r3,r2
 403c0a8:	e0bffe17 	ldw	r2,-8(fp)
 403c0ac:	10c00a15 	stw	r3,40(r2)
   reassy_pkt->net = sav_pkt->net;
 403c0b0:	e0bff617 	ldw	r2,-40(fp)
 403c0b4:	10c00617 	ldw	r3,24(r2)
 403c0b8:	e0bffe17 	ldw	r2,-8(fp)
 403c0bc:	10c00615 	stw	r3,24(r2)
   reassy_pkt->type = sav_pkt->type;
 403c0c0:	e0bff617 	ldw	r2,-40(fp)
 403c0c4:	10c0080b 	ldhu	r3,32(r2)
 403c0c8:	e0bffe17 	ldw	r2,-8(fp)
 403c0cc:	10c0080d 	sth	r3,32(r2)
   /* fhost is set by ip_demux () before handing off to the packet to its 
    * intended destination (protocol) */

   /* free the saved packet too, since we don't need it anymore */
   ip_reasm_decr_mem_useage (sav_pkt->nb_blen);
 403c0d0:	e0bff617 	ldw	r2,-40(fp)
 403c0d4:	10800217 	ldw	r2,8(r2)
 403c0d8:	113fffcc 	andi	r4,r2,65535
 403c0dc:	403aeb40 	call	403aeb4 <ip_reasm_decr_mem_useage>
   LOCK_NET_RESOURCE (FREEQ_RESID);
 403c0e0:	01000084 	movi	r4,2
 403c0e4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free (sav_pkt);
 403c0e8:	e13ff617 	ldw	r4,-40(fp)
 403c0ec:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE (FREEQ_RESID);
 403c0f0:	01000084 	movi	r4,2
 403c0f4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   /* after the reassembly is complete, we update the following fields in
    * the IP header: Total Length, Flags/Fragment Offset, header checksum */
   pip = ip_head(reassy_pkt);
 403c0f8:	e0bffe17 	ldw	r2,-8(fp)
 403c0fc:	10800317 	ldw	r2,12(r2)
 403c100:	e0bffd15 	stw	r2,-12(fp)
   pip->ip_len = htons(reassy_pkt->nb_plen);
 403c104:	e0bffe17 	ldw	r2,-8(fp)
 403c108:	10800417 	ldw	r2,16(r2)
 403c10c:	1004d23a 	srli	r2,r2,8
 403c110:	10803fcc 	andi	r2,r2,255
 403c114:	1009883a 	mov	r4,r2
 403c118:	e0bffe17 	ldw	r2,-8(fp)
 403c11c:	10800417 	ldw	r2,16(r2)
 403c120:	1004923a 	slli	r2,r2,8
 403c124:	1007883a 	mov	r3,r2
 403c128:	00bfc004 	movi	r2,-256
 403c12c:	1884703a 	and	r2,r3,r2
 403c130:	2084b03a 	or	r2,r4,r2
 403c134:	1007883a 	mov	r3,r2
 403c138:	e0bffd17 	ldw	r2,-12(fp)
 403c13c:	10c0008d 	sth	r3,2(r2)
   /* turn off More Fragments (MF) bit; the DF bit stays unchanged */
   pip->ip_flgs_foff &= htons(~((u_short) IP_FLG_MF));
 403c140:	e0bffd17 	ldw	r2,-12(fp)
 403c144:	10c0018b 	ldhu	r3,6(r2)
 403c148:	00bff7c4 	movi	r2,-33
 403c14c:	1884703a 	and	r2,r3,r2
 403c150:	1007883a 	mov	r3,r2
 403c154:	e0bffd17 	ldw	r2,-12(fp)
 403c158:	10c0018d 	sth	r3,6(r2)
   /* clear the Fragment Offset bits */
   pip->ip_flgs_foff &= htons(~((u_short) IP_EXTRACT_FOFF)); 
 403c15c:	e0bffd17 	ldw	r2,-12(fp)
 403c160:	1080018b 	ldhu	r2,6(r2)
 403c164:	1080380c 	andi	r2,r2,224
 403c168:	1007883a 	mov	r3,r2
 403c16c:	e0bffd17 	ldw	r2,-12(fp)
 403c170:	10c0018d 	sth	r3,6(r2)
   /* the following isn't really required, and can be removed */
   pip->ip_chksum = IPXSUM;
 403c174:	e0bffd17 	ldw	r2,-12(fp)
 403c178:	1000028d 	sth	zero,10(r2)
   pip->ip_chksum = ~cksum (pip, (iphlen/2));
 403c17c:	e0bff803 	ldbu	r2,-32(fp)
 403c180:	1004d07a 	srli	r2,r2,1
 403c184:	11403fcc 	andi	r5,r2,255
 403c188:	e13ffd17 	ldw	r4,-12(fp)
 403c18c:	4020a000 	call	4020a00 <cksum>
 403c190:	0084303a 	nor	r2,zero,r2
 403c194:	1007883a 	mov	r3,r2
 403c198:	e0bffd17 	ldw	r2,-12(fp)
 403c19c:	10c0028d 	sth	r3,10(r2)

   return IPREASM_OK;
 403c1a0:	0005883a 	mov	r2,zero
}
 403c1a4:	e037883a 	mov	sp,fp
 403c1a8:	dfc00117 	ldw	ra,4(sp)
 403c1ac:	df000017 	ldw	fp,0(sp)
 403c1b0:	dec00204 	addi	sp,sp,8
 403c1b4:	f800283a 	ret

0403c1b8 <ip_reasm_process_timer_tick>:

OUTPUT: This function always returns IPREASM_OK.
*/

u_char ip_reasm_process_timer_tick (void)
{
 403c1b8:	defffc04 	addi	sp,sp,-16
 403c1bc:	dfc00315 	stw	ra,12(sp)
 403c1c0:	df000215 	stw	fp,8(sp)
 403c1c4:	df000204 	addi	fp,sp,8
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 403c1c8:	0009883a 	mov	r4,zero
 403c1cc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 403c1d0:	d0a84617 	ldw	r2,-24296(gp)
 403c1d4:	e0bfff15 	stw	r2,-4(fp)
 403c1d8:	00002006 	br	403c25c <ip_reasm_process_timer_tick+0xa4>
      {
      /* save the next pointer for the IRE that may be deleted */
      nxt_tmpp = tmpp->next;
 403c1dc:	e0bfff17 	ldw	r2,-4(fp)
 403c1e0:	10800017 	ldw	r2,0(r2)
 403c1e4:	e0bffe15 	stw	r2,-8(fp)
      ++tmpp->age;
 403c1e8:	e0bfff17 	ldw	r2,-4(fp)
 403c1ec:	10800517 	ldw	r2,20(r2)
 403c1f0:	10c00044 	addi	r3,r2,1
 403c1f4:	e0bfff17 	ldw	r2,-4(fp)
 403c1f8:	10c00515 	stw	r3,20(r2)
      /* check to see if this entry has reached its max age (expired)? */
      if (tmpp->age == IRE_TMO)
 403c1fc:	e0bfff17 	ldw	r2,-4(fp)
 403c200:	10800517 	ldw	r2,20(r2)
 403c204:	10801e18 	cmpnei	r2,r2,120
 403c208:	1000121e 	bne	r2,zero,403c254 <ip_reasm_process_timer_tick+0x9c>
         {
         /* it has...and therefore must be deleted. */
         ++ire_stats.ire_timed_out;
 403c20c:	008101b4 	movhi	r2,1030
 403c210:	10a46204 	addi	r2,r2,-28280
 403c214:	10800117 	ldw	r2,4(r2)
 403c218:	10c00044 	addi	r3,r2,1
 403c21c:	008101b4 	movhi	r2,1030
 403c220:	10a46204 	addi	r2,r2,-28280
 403c224:	10c00115 	stw	r3,4(r2)
#ifdef FULL_ICMP
         /* send ICMP Time Exceeded message with code 1 ("fragment reassembly time exceeded") */
         ip_reasm_send_icmp_timex (tmpp);
 403c228:	e13fff17 	ldw	r4,-4(fp)
 403c22c:	403c8f40 	call	403c8f4 <ip_reasm_send_icmp_timex>
#endif
         ip_reasm_delete_ire (tmpp);
 403c230:	e13fff17 	ldw	r4,-4(fp)
 403c234:	403c29c0 	call	403c29c <ip_reasm_delete_ire>
         ++ip_mib.ipReasmFails;
 403c238:	008101b4 	movhi	r2,1030
 403c23c:	10a44e04 	addi	r2,r2,-28360
 403c240:	10800f17 	ldw	r2,60(r2)
 403c244:	10c00044 	addi	r3,r2,1
 403c248:	008101b4 	movhi	r2,1030
 403c24c:	10a44e04 	addi	r2,r2,-28360
 403c250:	10c00f15 	stw	r3,60(r2)
   IREP tmpp;
   IREP nxt_tmpp;

   LOCK_NET_RESOURCE (NET_RESID);
 
   for (tmpp = h_ireq; tmpp; tmpp = nxt_tmpp)
 403c254:	e0bffe17 	ldw	r2,-8(fp)
 403c258:	e0bfff15 	stw	r2,-4(fp)
 403c25c:	e0bfff17 	ldw	r2,-4(fp)
 403c260:	1004c03a 	cmpne	r2,r2,zero
 403c264:	103fdd1e 	bne	r2,zero,403c1dc <ip_reasm_process_timer_tick+0x24>
         ++ip_mib.ipReasmFails;
         }
      }

   /* set the time for the next invocation of this routine (one second later) */
   ire_cticks = cticks + TPS;
 403c268:	00810174 	movhi	r2,1029
 403c26c:	1081e404 	addi	r2,r2,1936
 403c270:	10800017 	ldw	r2,0(r2)
 403c274:	10801904 	addi	r2,r2,100
 403c278:	d0a84715 	stw	r2,-24292(gp)

   UNLOCK_NET_RESOURCE (NET_RESID);
 403c27c:	0009883a 	mov	r4,zero
 403c280:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   return IPREASM_OK;
 403c284:	0005883a 	mov	r2,zero
}
 403c288:	e037883a 	mov	sp,fp
 403c28c:	dfc00117 	ldw	ra,4(sp)
 403c290:	df000017 	ldw	fp,0(sp)
 403c294:	dec00204 	addi	sp,sp,8
 403c298:	f800283a 	ret

0403c29c <ip_reasm_delete_ire>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in the 
master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_delete_ire (IREP irep)
{
 403c29c:	defff504 	addi	sp,sp,-44
 403c2a0:	dfc00a15 	stw	ra,40(sp)
 403c2a4:	df000915 	stw	fp,36(sp)
 403c2a8:	df000904 	addi	fp,sp,36
 403c2ac:	e13ffe15 	stw	r4,-8(fp)
   RFQP rfqp, first_rfqp, prev_rfqp;
   u_short i;
   PACKET p;
   IREP tmpp;
   IREP prev_tmpp = 0;
 403c2b0:	e03ff715 	stw	zero,-36(fp)

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403c2b4:	d0a84617 	ldw	r2,-24296(gp)
 403c2b8:	e0bff815 	stw	r2,-32(fp)
 403c2bc:	00001406 	br	403c310 <ip_reasm_delete_ire+0x74>
      {
      if (tmpp == irep) 
 403c2c0:	e0fff817 	ldw	r3,-32(fp)
 403c2c4:	e0bffe17 	ldw	r2,-8(fp)
 403c2c8:	18800c1e 	bne	r3,r2,403c2fc <ip_reasm_delete_ire+0x60>
         {
         /* update the head pointer to the list */
         if (tmpp == h_ireq) h_ireq = irep->next;
 403c2cc:	d0e84617 	ldw	r3,-24296(gp)
 403c2d0:	e0bff817 	ldw	r2,-32(fp)
 403c2d4:	10c0041e 	bne	r2,r3,403c2e8 <ip_reasm_delete_ire+0x4c>
 403c2d8:	e0bffe17 	ldw	r2,-8(fp)
 403c2dc:	10800017 	ldw	r2,0(r2)
 403c2e0:	d0a84615 	stw	r2,-24296(gp)
 403c2e4:	00000d06 	br	403c31c <ip_reasm_delete_ire+0x80>
         else prev_tmpp->next = irep->next;
 403c2e8:	e0bffe17 	ldw	r2,-8(fp)
 403c2ec:	10c00017 	ldw	r3,0(r2)
 403c2f0:	e0bff717 	ldw	r2,-36(fp)
 403c2f4:	10c00015 	stw	r3,0(r2)
         break;
 403c2f8:	00000806 	br	403c31c <ip_reasm_delete_ire+0x80>
         }
      prev_tmpp = tmpp;
 403c2fc:	e0bff817 	ldw	r2,-32(fp)
 403c300:	e0bff715 	stw	r2,-36(fp)
   IREP tmpp;
   IREP prev_tmpp = 0;

   /* check to see if the IRE exists in the master table; if it does,
    * remove it and also update the pointers in that list */
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403c304:	e0bff817 	ldw	r2,-32(fp)
 403c308:	10800017 	ldw	r2,0(r2)
 403c30c:	e0bff815 	stw	r2,-32(fp)
 403c310:	e0bff817 	ldw	r2,-32(fp)
 403c314:	1004c03a 	cmpne	r2,r2,zero
 403c318:	103fe91e 	bne	r2,zero,403c2c0 <ip_reasm_delete_ire+0x24>
      prev_tmpp = tmpp;
      }

   /* if the IRE entry does not exist in the master table, return an error 
    * to the caller */
   if (!tmpp)
 403c31c:	e0bff817 	ldw	r2,-32(fp)
 403c320:	1004c03a 	cmpne	r2,r2,zero
 403c324:	10000a1e 	bne	r2,zero,403c350 <ip_reasm_delete_ire+0xb4>
      {
      ++ire_stats.bad_irep;
 403c328:	008101b4 	movhi	r2,1030
 403c32c:	10a46204 	addi	r2,r2,-28280
 403c330:	10800017 	ldw	r2,0(r2)
 403c334:	10c00044 	addi	r3,r2,1
 403c338:	008101b4 	movhi	r2,1030
 403c33c:	10a46204 	addi	r2,r2,-28280
 403c340:	10c00015 	stw	r3,0(r2)
      return ENP_PARAM;
 403c344:	00bffd84 	movi	r2,-10
 403c348:	e0bfff15 	stw	r2,-4(fp)
 403c34c:	00003f06 	br	403c44c <ip_reasm_delete_ire+0x1b0>
      }

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);
 403c350:	e0bffe17 	ldw	r2,-8(fp)
 403c354:	10800604 	addi	r2,r2,24
 403c358:	e0bffc15 	stw	r2,-16(fp)
 403c35c:	e0bffc17 	ldw	r2,-16(fp)
 403c360:	e0bffd15 	stw	r2,-12(fp)

   while (rfqp)
 403c364:	00003106 	br	403c42c <ip_reasm_delete_ire+0x190>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403c368:	e03ffa0d 	sth	zero,-24(fp)
 403c36c:	00002006 	br	403c3f0 <ip_reasm_delete_ire+0x154>
         {
         if ((p = rfqp->bufp [i]) != 0)
 403c370:	e0bffa0b 	ldhu	r2,-24(fp)
 403c374:	e0fffd17 	ldw	r3,-12(fp)
 403c378:	1085883a 	add	r2,r2,r2
 403c37c:	1085883a 	add	r2,r2,r2
 403c380:	10c5883a 	add	r2,r2,r3
 403c384:	10800104 	addi	r2,r2,4
 403c388:	10800017 	ldw	r2,0(r2)
 403c38c:	e0bff915 	stw	r2,-28(fp)
 403c390:	e0bff917 	ldw	r2,-28(fp)
 403c394:	1005003a 	cmpeq	r2,r2,zero
 403c398:	10000b1e 	bne	r2,zero,403c3c8 <ip_reasm_delete_ire+0x12c>
            {
            ip_reasm_decr_mem_useage (p->nb_blen);
 403c39c:	e0bff917 	ldw	r2,-28(fp)
 403c3a0:	10800217 	ldw	r2,8(r2)
 403c3a4:	113fffcc 	andi	r4,r2,65535
 403c3a8:	403aeb40 	call	403aeb4 <ip_reasm_decr_mem_useage>
            LOCK_NET_RESOURCE (FREEQ_RESID);
 403c3ac:	01000084 	movi	r4,2
 403c3b0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free (p);
 403c3b4:	e13ff917 	ldw	r4,-28(fp)
 403c3b8:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE (FREEQ_RESID);               
 403c3bc:	01000084 	movi	r4,2
 403c3c0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
 403c3c4:	00000706 	br	403c3e4 <ip_reasm_delete_ire+0x148>
            }
         else
            {
            if (irep->flags & IPR_RFQ_COMPACT)
 403c3c8:	e0bffe17 	ldw	r2,-8(fp)
 403c3cc:	10802103 	ldbu	r2,132(r2)
 403c3d0:	10803fcc 	andi	r2,r2,255
 403c3d4:	1080004c 	andi	r2,r2,1
 403c3d8:	10803fcc 	andi	r2,r2,255
 403c3dc:	1004c03a 	cmpne	r2,r2,zero
 403c3e0:	1000061e 	bne	r2,zero,403c3fc <ip_reasm_delete_ire+0x160>
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403c3e4:	e0bffa0b 	ldhu	r2,-24(fp)
 403c3e8:	10800044 	addi	r2,r2,1
 403c3ec:	e0bffa0d 	sth	r2,-24(fp)
 403c3f0:	e0bffa0b 	ldhu	r2,-24(fp)
 403c3f4:	10800430 	cmpltui	r2,r2,16
 403c3f8:	103fdd1e 	bne	r2,zero,403c370 <ip_reasm_delete_ire+0xd4>
               break;
               }
            }
          }

       prev_rfqp = rfqp;
 403c3fc:	e0bffd17 	ldw	r2,-12(fp)
 403c400:	e0bffb15 	stw	r2,-20(fp)
       rfqp = rfqp->next;
 403c404:	e0bffd17 	ldw	r2,-12(fp)
 403c408:	10800017 	ldw	r2,0(r2)
 403c40c:	e0bffd15 	stw	r2,-12(fp)
       /* the first RFQ is statically allocated, and cannot be freed */
       if (prev_rfqp != first_rfqp)
 403c410:	e0fffb17 	ldw	r3,-20(fp)
 403c414:	e0bffc17 	ldw	r2,-16(fp)
 403c418:	18800426 	beq	r3,r2,403c42c <ip_reasm_delete_ire+0x190>
          {
          ip_reasm_decr_mem_useage (sizeof(RFQ));
 403c41c:	01001904 	movi	r4,100
 403c420:	403aeb40 	call	403aeb4 <ip_reasm_decr_mem_useage>
          IPR_FREE (prev_rfqp);
 403c424:	e13ffb17 	ldw	r4,-20(fp)
 403c428:	40266ec0 	call	40266ec <npfree>

   /* free any queued packets (there may be none if the IRE is being deleted
    * because the packet has been successfully reassembled) */
   rfqp = first_rfqp = &(irep->rfq);

   while (rfqp)
 403c42c:	e0bffd17 	ldw	r2,-12(fp)
 403c430:	1004c03a 	cmpne	r2,r2,zero
 403c434:	103fcc1e 	bne	r2,zero,403c368 <ip_reasm_delete_ire+0xcc>
          IPR_FREE (prev_rfqp);
          }
      }

   /* now free the parent entity */
   ip_reasm_decr_mem_useage (sizeof(IRE));
 403c438:	01002204 	movi	r4,136
 403c43c:	403aeb40 	call	403aeb4 <ip_reasm_decr_mem_useage>
   IPR_FREE (irep);
 403c440:	e13ffe17 	ldw	r4,-8(fp)
 403c444:	40266ec0 	call	40266ec <npfree>

   return IPREASM_OK;
 403c448:	e03fff15 	stw	zero,-4(fp)
 403c44c:	e0bfff17 	ldw	r2,-4(fp)
}
 403c450:	e037883a 	mov	sp,fp
 403c454:	dfc00117 	ldw	ra,4(sp)
 403c458:	df000017 	ldw	fp,0(sp)
 403c45c:	dec00204 	addi	sp,sp,8
 403c460:	f800283a 	ret

0403c464 <ip_reasm_mark_compact_rfq>:
OUTPUT: This function returns a ENP_PARAM if the IRE does not exist in 
the master IRE list; otherwise, it returns a IPREASM_OK.
*/

int ip_reasm_mark_compact_rfq (IREP irep)
{
 403c464:	defffa04 	addi	sp,sp,-24
 403c468:	dfc00515 	stw	ra,20(sp)
 403c46c:	df000415 	stw	fp,16(sp)
 403c470:	df000404 	addi	fp,sp,16
 403c474:	e13ffe15 	stw	r4,-8(fp)
   RFQP rfqp;
   u_short i;
   u_char empty_slot_discovered = IPREASM_FALSE;
 403c478:	e03ffc45 	stb	zero,-15(fp)
   u_char compact = IPREASM_TRUE;
 403c47c:	00800044 	movi	r2,1
 403c480:	e0bffc05 	stb	r2,-16(fp)

   if (ip_reasm_find_ire (irep) != IPREASM_TRUE)
 403c484:	e13ffe17 	ldw	r4,-8(fp)
 403c488:	403bdf80 	call	403bdf8 <ip_reasm_find_ire>
 403c48c:	10803fcc 	andi	r2,r2,255
 403c490:	10800060 	cmpeqi	r2,r2,1
 403c494:	10000a1e 	bne	r2,zero,403c4c0 <ip_reasm_mark_compact_rfq+0x5c>
   {
      ++ire_stats.bad_irep;
 403c498:	008101b4 	movhi	r2,1030
 403c49c:	10a46204 	addi	r2,r2,-28280
 403c4a0:	10800017 	ldw	r2,0(r2)
 403c4a4:	10c00044 	addi	r3,r2,1
 403c4a8:	008101b4 	movhi	r2,1030
 403c4ac:	10a46204 	addi	r2,r2,-28280
 403c4b0:	10c00015 	stw	r3,0(r2)
      return ENP_PARAM;
 403c4b4:	00bffd84 	movi	r2,-10
 403c4b8:	e0bfff15 	stw	r2,-4(fp)
 403c4bc:	00003506 	br	403c594 <ip_reasm_mark_compact_rfq+0x130>
   }

   rfqp = &(irep->rfq);
 403c4c0:	e0bffe17 	ldw	r2,-8(fp)
 403c4c4:	10800604 	addi	r2,r2,24
 403c4c8:	e0bffd15 	stw	r2,-12(fp)

   while (rfqp)
 403c4cc:	00001c06 	br	403c540 <ip_reasm_mark_compact_rfq+0xdc>
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403c4d0:	e03ffc8d 	sth	zero,-14(fp)
 403c4d4:	00001406 	br	403c528 <ip_reasm_mark_compact_rfq+0xc4>
         {
         if (rfqp->bufp [i] == 0)
 403c4d8:	e0bffc8b 	ldhu	r2,-14(fp)
 403c4dc:	e0fffd17 	ldw	r3,-12(fp)
 403c4e0:	1085883a 	add	r2,r2,r2
 403c4e4:	1085883a 	add	r2,r2,r2
 403c4e8:	10c5883a 	add	r2,r2,r3
 403c4ec:	10800104 	addi	r2,r2,4
 403c4f0:	10800017 	ldw	r2,0(r2)
 403c4f4:	1004c03a 	cmpne	r2,r2,zero
 403c4f8:	1000031e 	bne	r2,zero,403c508 <ip_reasm_mark_compact_rfq+0xa4>
            {            
            empty_slot_discovered = IPREASM_TRUE;
 403c4fc:	00800044 	movi	r2,1
 403c500:	e0bffc45 	stb	r2,-15(fp)
 403c504:	00000506 	br	403c51c <ip_reasm_mark_compact_rfq+0xb8>
            }
         else
            {
            if (empty_slot_discovered) 
 403c508:	e0bffc43 	ldbu	r2,-15(fp)
 403c50c:	1005003a 	cmpeq	r2,r2,zero
 403c510:	1000021e 	bne	r2,zero,403c51c <ip_reasm_mark_compact_rfq+0xb8>
               {
               compact = IPREASM_FALSE;
 403c514:	e03ffc05 	stb	zero,-16(fp)
               break;
 403c518:	00000606 	br	403c534 <ip_reasm_mark_compact_rfq+0xd0>

   rfqp = &(irep->rfq);

   while (rfqp)
      {
      for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403c51c:	e0bffc8b 	ldhu	r2,-14(fp)
 403c520:	10800044 	addi	r2,r2,1
 403c524:	e0bffc8d 	sth	r2,-14(fp)
 403c528:	e0bffc8b 	ldhu	r2,-14(fp)
 403c52c:	10800430 	cmpltui	r2,r2,16
 403c530:	103fe91e 	bne	r2,zero,403c4d8 <ip_reasm_mark_compact_rfq+0x74>
               compact = IPREASM_FALSE;
               break;
               }
            }
          }
       rfqp = rfqp->next;
 403c534:	e0bffd17 	ldw	r2,-12(fp)
 403c538:	10800017 	ldw	r2,0(r2)
 403c53c:	e0bffd15 	stw	r2,-12(fp)
      return ENP_PARAM;
   }

   rfqp = &(irep->rfq);

   while (rfqp)
 403c540:	e0bffd17 	ldw	r2,-12(fp)
 403c544:	1004c03a 	cmpne	r2,r2,zero
 403c548:	103fe11e 	bne	r2,zero,403c4d0 <ip_reasm_mark_compact_rfq+0x6c>
            }
          }
       rfqp = rfqp->next;
      }

   if (compact) 
 403c54c:	e0bffc03 	ldbu	r2,-16(fp)
 403c550:	1005003a 	cmpeq	r2,r2,zero
 403c554:	1000071e 	bne	r2,zero,403c574 <ip_reasm_mark_compact_rfq+0x110>
      {
      irep->flags |= IPR_RFQ_COMPACT;
 403c558:	e0bffe17 	ldw	r2,-8(fp)
 403c55c:	10802103 	ldbu	r2,132(r2)
 403c560:	10800054 	ori	r2,r2,1
 403c564:	1007883a 	mov	r3,r2
 403c568:	e0bffe17 	ldw	r2,-8(fp)
 403c56c:	10c02105 	stb	r3,132(r2)
 403c570:	00000706 	br	403c590 <ip_reasm_mark_compact_rfq+0x12c>
      }
   else 
      {
      irep->flags &= ~IPR_RFQ_COMPACT;
 403c574:	e0bffe17 	ldw	r2,-8(fp)
 403c578:	10c02103 	ldbu	r3,132(r2)
 403c57c:	00bfff84 	movi	r2,-2
 403c580:	1884703a 	and	r2,r3,r2
 403c584:	1007883a 	mov	r3,r2
 403c588:	e0bffe17 	ldw	r2,-8(fp)
 403c58c:	10c02105 	stb	r3,132(r2)
      }

   return IPREASM_OK;
 403c590:	e03fff15 	stw	zero,-4(fp)
 403c594:	e0bfff17 	ldw	r2,-4(fp)
}
 403c598:	e037883a 	mov	sp,fp
 403c59c:	dfc00117 	ldw	ra,4(sp)
 403c5a0:	df000017 	ldw	fp,0(sp)
 403c5a4:	dec00204 	addi	sp,sp,8
 403c5a8:	f800283a 	ret

0403c5ac <ipr_stats>:

OUTPUT: This function always returns IPREASM_OK.
*/

int ipr_stats(void * pio)
{
 403c5ac:	deffed04 	addi	sp,sp,-76
 403c5b0:	dfc01215 	stw	ra,72(sp)
 403c5b4:	df001115 	stw	fp,68(sp)
 403c5b8:	df001104 	addi	fp,sp,68
 403c5bc:	e13fff15 	stw	r4,-4(fp)
   unsigned long ticks_elapsed = cticks;
 403c5c0:	00810174 	movhi	r2,1029
 403c5c4:	1081e404 	addi	r2,r2,1936
 403c5c8:	10800017 	ldw	r2,0(r2)
 403c5cc:	e0bffe15 	stw	r2,-8(fp)
   u_short size_ire = sizeof(IRE);
 403c5d0:	00802204 	movi	r2,136
 403c5d4:	e0bffd8d 	sth	r2,-10(fp)
   u_short size_rfq = sizeof(RFQ);
 403c5d8:	00801904 	movi	r2,100
 403c5dc:	e0bffd0d 	sth	r2,-12(fp)
   IREP tmpp;
   u_short count = 0;
 403c5e0:	e03ffb0d 	sth	zero,-20(fp)
   RFQP rfqp;
   u_short frag_count = 0;
 403c5e4:	e03ff98d 	sth	zero,-26(fp)
   u_short i;

   ns_printf(pio,"IP reassembly statistics:\n");
 403c5e8:	e13fff17 	ldw	r4,-4(fp)
 403c5ec:	01410174 	movhi	r5,1029
 403c5f0:	296fa804 	addi	r5,r5,-16736
 403c5f4:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
 403c5f8:	d1a84517 	ldw	r6,-24300(gp)
 403c5fc:	e0fffe17 	ldw	r3,-8(fp)
 403c600:	00801904 	movi	r2,100
 403c604:	1885203a 	divu	r2,r3,r2
 403c608:	e0fffd8b 	ldhu	r3,-10(fp)
 403c60c:	e13ffd0b 	ldhu	r4,-12(fp)
 403c610:	d8800015 	stw	r2,0(sp)
 403c614:	d8c00115 	stw	r3,4(sp)
 403c618:	d9000215 	stw	r4,8(sp)
 403c61c:	e13fff17 	ldw	r4,-4(fp)
 403c620:	01410174 	movhi	r5,1029
 403c624:	296faf04 	addi	r5,r5,-16708
 403c628:	e1fffe17 	ldw	r7,-8(fp)
 403c62c:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
 403c630:	008101b4 	movhi	r2,1030
 403c634:	10a46204 	addi	r2,r2,-28280
 403c638:	11800117 	ldw	r6,4(r2)
 403c63c:	008101b4 	movhi	r2,1030
 403c640:	10a46204 	addi	r2,r2,-28280
 403c644:	11c00017 	ldw	r7,0(r2)
 403c648:	008101b4 	movhi	r2,1030
 403c64c:	10a46204 	addi	r2,r2,-28280
 403c650:	11000217 	ldw	r4,8(r2)
 403c654:	008101b4 	movhi	r2,1030
 403c658:	10a46204 	addi	r2,r2,-28280
 403c65c:	11400317 	ldw	r5,12(r2)
 403c660:	008101b4 	movhi	r2,1030
 403c664:	10a46204 	addi	r2,r2,-28280
 403c668:	10c00417 	ldw	r3,16(r2)
 403c66c:	008101b4 	movhi	r2,1030
 403c670:	10a46204 	addi	r2,r2,-28280
 403c674:	10800517 	ldw	r2,20(r2)
 403c678:	d9000015 	stw	r4,0(sp)
 403c67c:	d9400115 	stw	r5,4(sp)
 403c680:	d8c00215 	stw	r3,8(sp)
 403c684:	d8800315 	stw	r2,12(sp)
 403c688:	e13fff17 	ldw	r4,-4(fp)
 403c68c:	01410174 	movhi	r5,1029
 403c690:	296fbf04 	addi	r5,r5,-16644
 403c694:	40210380 	call	4021038 <ns_printf>
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
 403c698:	d1a84617 	ldw	r6,-24296(gp)
 403c69c:	e13fff17 	ldw	r4,-4(fp)
 403c6a0:	01410174 	movhi	r5,1029
 403c6a4:	296fd404 	addi	r5,r5,-16560
 403c6a8:	40210380 	call	4021038 <ns_printf>
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403c6ac:	d0a84617 	ldw	r2,-24296(gp)
 403c6b0:	e0bffc15 	stw	r2,-16(fp)
 403c6b4:	00008106 	br	403c8bc <ipr_stats+0x310>
      {
      ++count;
 403c6b8:	e0bffb0b 	ldhu	r2,-20(fp)
 403c6bc:	10800044 	addi	r2,r2,1
 403c6c0:	e0bffb0d 	sth	r2,-20(fp)
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
 403c6c4:	e0bffc17 	ldw	r2,-16(fp)
 403c6c8:	10800604 	addi	r2,r2,24
 403c6cc:	e0bffa15 	stw	r2,-24(fp)
      while (rfqp)
 403c6d0:	00001f06 	br	403c750 <ipr_stats+0x1a4>
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403c6d4:	e03ff90d 	sth	zero,-28(fp)
 403c6d8:	00001706 	br	403c738 <ipr_stats+0x18c>
            {
            if (rfqp->bufp [i] != 0)
 403c6dc:	e0bff90b 	ldhu	r2,-28(fp)
 403c6e0:	e0fffa17 	ldw	r3,-24(fp)
 403c6e4:	1085883a 	add	r2,r2,r2
 403c6e8:	1085883a 	add	r2,r2,r2
 403c6ec:	10c5883a 	add	r2,r2,r3
 403c6f0:	10800104 	addi	r2,r2,4
 403c6f4:	10800017 	ldw	r2,0(r2)
 403c6f8:	1005003a 	cmpeq	r2,r2,zero
 403c6fc:	1000041e 	bne	r2,zero,403c710 <ipr_stats+0x164>
               {
               ++frag_count;            
 403c700:	e0bff98b 	ldhu	r2,-26(fp)
 403c704:	10800044 	addi	r2,r2,1
 403c708:	e0bff98d 	sth	r2,-26(fp)
 403c70c:	00000706 	br	403c72c <ipr_stats+0x180>
               }
            else
               {
               if (tmpp->flags & IPR_RFQ_COMPACT)
 403c710:	e0bffc17 	ldw	r2,-16(fp)
 403c714:	10802103 	ldbu	r2,132(r2)
 403c718:	10803fcc 	andi	r2,r2,255
 403c71c:	1080004c 	andi	r2,r2,1
 403c720:	10803fcc 	andi	r2,r2,255
 403c724:	1004c03a 	cmpne	r2,r2,zero
 403c728:	1000061e 	bne	r2,zero,403c744 <ipr_stats+0x198>
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
         {
         for (i = 0; i < IPR_MAX_FRAGS; ++i)
 403c72c:	e0bff90b 	ldhu	r2,-28(fp)
 403c730:	10800044 	addi	r2,r2,1
 403c734:	e0bff90d 	sth	r2,-28(fp)
 403c738:	e0bff90b 	ldhu	r2,-28(fp)
 403c73c:	10800430 	cmpltui	r2,r2,16
 403c740:	103fe61e 	bne	r2,zero,403c6dc <ipr_stats+0x130>
                  {
                  break;
                  }
               }
            }
         rfqp = rfqp->next;
 403c744:	e0bffa17 	ldw	r2,-24(fp)
 403c748:	10800017 	ldw	r2,0(r2)
 403c74c:	e0bffa15 	stw	r2,-24(fp)
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
      {
      ++count;
      /* compute the total number of fragments queued awaiting reassembly for this IRE */
      rfqp = &(tmpp->rfq);
      while (rfqp)
 403c750:	e0bffa17 	ldw	r2,-24(fp)
 403c754:	1004c03a 	cmpne	r2,r2,zero
 403c758:	103fde1e 	bne	r2,zero,403c6d4 <ipr_stats+0x128>
                  }
               }
            }
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
 403c75c:	e1fff98b 	ldhu	r7,-26(fp)
 403c760:	e0bffc17 	ldw	r2,-16(fp)
 403c764:	10800117 	ldw	r2,4(r2)
 403c768:	1004d63a 	srli	r2,r2,24
 403c76c:	10c03fcc 	andi	r3,r2,255
 403c770:	e0bffc17 	ldw	r2,-16(fp)
 403c774:	10800117 	ldw	r2,4(r2)
 403c778:	1004d23a 	srli	r2,r2,8
 403c77c:	10bfc00c 	andi	r2,r2,65280
 403c780:	1886b03a 	or	r3,r3,r2
 403c784:	e0bffc17 	ldw	r2,-16(fp)
 403c788:	10800117 	ldw	r2,4(r2)
 403c78c:	10bfc00c 	andi	r2,r2,65280
 403c790:	1004923a 	slli	r2,r2,8
 403c794:	1886b03a 	or	r3,r3,r2
 403c798:	e0bffc17 	ldw	r2,-16(fp)
 403c79c:	10800117 	ldw	r2,4(r2)
 403c7a0:	10803fcc 	andi	r2,r2,255
 403c7a4:	1004963a 	slli	r2,r2,24
 403c7a8:	1888b03a 	or	r4,r3,r2
 403c7ac:	e0bffc17 	ldw	r2,-16(fp)
 403c7b0:	10800217 	ldw	r2,8(r2)
 403c7b4:	1004d63a 	srli	r2,r2,24
 403c7b8:	10c03fcc 	andi	r3,r2,255
 403c7bc:	e0bffc17 	ldw	r2,-16(fp)
 403c7c0:	10800217 	ldw	r2,8(r2)
 403c7c4:	1004d23a 	srli	r2,r2,8
 403c7c8:	10bfc00c 	andi	r2,r2,65280
 403c7cc:	1886b03a 	or	r3,r3,r2
 403c7d0:	e0bffc17 	ldw	r2,-16(fp)
 403c7d4:	10800217 	ldw	r2,8(r2)
 403c7d8:	10bfc00c 	andi	r2,r2,65280
 403c7dc:	1004923a 	slli	r2,r2,8
 403c7e0:	1886b03a 	or	r3,r3,r2
 403c7e4:	e0bffc17 	ldw	r2,-16(fp)
 403c7e8:	10800217 	ldw	r2,8(r2)
 403c7ec:	10803fcc 	andi	r2,r2,255
 403c7f0:	1004963a 	slli	r2,r2,24
 403c7f4:	188ab03a 	or	r5,r3,r2
 403c7f8:	e0bffc17 	ldw	r2,-16(fp)
 403c7fc:	10800383 	ldbu	r2,14(r2)
 403c800:	11803fcc 	andi	r6,r2,255
 403c804:	e0bffc17 	ldw	r2,-16(fp)
 403c808:	1080030b 	ldhu	r2,12(r2)
 403c80c:	10bfffcc 	andi	r2,r2,65535
 403c810:	1004d23a 	srli	r2,r2,8
 403c814:	10bfffcc 	andi	r2,r2,65535
 403c818:	10c03fcc 	andi	r3,r2,255
 403c81c:	e0bffc17 	ldw	r2,-16(fp)
 403c820:	1080030b 	ldhu	r2,12(r2)
 403c824:	10bfffcc 	andi	r2,r2,65535
 403c828:	1004923a 	slli	r2,r2,8
 403c82c:	10bfc00c 	andi	r2,r2,65280
 403c830:	1886b03a 	or	r3,r3,r2
 403c834:	e0bffc17 	ldw	r2,-16(fp)
 403c838:	1080040b 	ldhu	r2,16(r2)
 403c83c:	123fffcc 	andi	r8,r2,65535
 403c840:	e0bffc17 	ldw	r2,-16(fp)
 403c844:	1080048b 	ldhu	r2,18(r2)
 403c848:	127fffcc 	andi	r9,r2,65535
 403c84c:	e0bffc17 	ldw	r2,-16(fp)
 403c850:	12800517 	ldw	r10,20(r2)
 403c854:	e0bffc17 	ldw	r2,-16(fp)
 403c858:	12c01f17 	ldw	r11,124(r2)
 403c85c:	e0bffc17 	ldw	r2,-16(fp)
 403c860:	13002017 	ldw	r12,128(r2)
 403c864:	e0bffc17 	ldw	r2,-16(fp)
 403c868:	10802103 	ldbu	r2,132(r2)
 403c86c:	10803fcc 	andi	r2,r2,255
 403c870:	1080004c 	andi	r2,r2,1
 403c874:	d9000015 	stw	r4,0(sp)
 403c878:	d9400115 	stw	r5,4(sp)
 403c87c:	d9800215 	stw	r6,8(sp)
 403c880:	d8c00315 	stw	r3,12(sp)
 403c884:	da000415 	stw	r8,16(sp)
 403c888:	da400515 	stw	r9,20(sp)
 403c88c:	da800615 	stw	r10,24(sp)
 403c890:	dac00715 	stw	r11,28(sp)
 403c894:	db000815 	stw	r12,32(sp)
 403c898:	d8800915 	stw	r2,36(sp)
 403c89c:	e13fff17 	ldw	r4,-4(fp)
 403c8a0:	01410174 	movhi	r5,1029
 403c8a4:	296fda04 	addi	r5,r5,-16536
 403c8a8:	e1bffc17 	ldw	r6,-16(fp)
 403c8ac:	40210380 	call	4021038 <ns_printf>
   ns_printf(pio,"Current memory useage %lu, ticks %lu, secs %lu, IRE %u, RFQ %u\n",ipr_curr_mem,ticks_elapsed,(ticks_elapsed/TPS),size_ire,size_rfq);
   ns_printf(pio,"[ERR] IRE T/O %lu, IRE ptr %lu, max mem %lu, mem chk %lu, mem inc %lu, mem dec %lu\n",\
    ire_stats.ire_timed_out,ire_stats.bad_irep,ire_stats.bad_max_mem,ire_stats.mem_check_fail,ire_stats.mem_incr_fail,ire_stats.mem_decr_fail);

   ns_printf(pio,"Head of IRE queue %p\n",h_ireq); 
   for (tmpp = h_ireq; tmpp; tmpp = tmpp->next)
 403c8b0:	e0bffc17 	ldw	r2,-16(fp)
 403c8b4:	10800017 	ldw	r2,0(r2)
 403c8b8:	e0bffc15 	stw	r2,-16(fp)
 403c8bc:	e0bffc17 	ldw	r2,-16(fp)
 403c8c0:	1004c03a 	cmpne	r2,r2,zero
 403c8c4:	103f7c1e 	bne	r2,zero,403c6b8 <ipr_stats+0x10c>
         rfqp = rfqp->next;
         } /* end WHILE (fragments queued) */
      ns_printf(pio,"IRE %p [Frags queued %u] SA 0x%lx DA 0x%lx Prot %u Id %u Len %u Rcvd %u Age %lu L2H %p L3H %p Compact %u]\n",tmpp,frag_count,(ntohl(tmpp->src)),(ntohl(tmpp->dest)),tmpp->prot,(ntohs(tmpp->id)),tmpp->length,tmpp->rcvd,tmpp->age,tmpp->l2_hdr,tmpp->l3_hdr,((tmpp->flags) & IPR_RFQ_COMPACT));
      } /* end FOR (IRE linked list) */

   ns_printf(pio,"Found a total of %u IRE entries\n",count);
 403c8c8:	e1bffb0b 	ldhu	r6,-20(fp)
 403c8cc:	e13fff17 	ldw	r4,-4(fp)
 403c8d0:	01410174 	movhi	r5,1029
 403c8d4:	296ff504 	addi	r5,r5,-16428
 403c8d8:	40210380 	call	4021038 <ns_printf>

   return IPREASM_OK;
 403c8dc:	0005883a 	mov	r2,zero
}
 403c8e0:	e037883a 	mov	sp,fp
 403c8e4:	dfc00117 	ldw	ra,4(sp)
 403c8e8:	df000017 	ldw	fp,0(sp)
 403c8ec:	dec00204 	addi	sp,sp,8
 403c8f0:	f800283a 	ret

0403c8f4 <ip_reasm_send_icmp_timex>:
OUTPUT: This function always returns IPREASM_OK.
*/

#ifdef FULL_ICMP
u_long ip_reasm_send_icmp_timex (IREP irep)
{
 403c8f4:	defffc04 	addi	sp,sp,-16
 403c8f8:	dfc00315 	stw	ra,12(sp)
 403c8fc:	df000215 	stw	fp,8(sp)
 403c900:	df000204 	addi	fp,sp,8
 403c904:	e13fff15 	stw	r4,-4(fp)

   /* we can only send an ICMP Time Exceeded message with code 1 ("fragment reassembly 
    * time exceeded") if we have received the First Fragment (FF) of the original, 
    * unfragmented datagram.  This is indicated by a non-zero value for the l2_hdr and
    * l3_hdr fields in the IRE data structure. */
   if (irep->l2_hdr)
 403c908:	e0bfff17 	ldw	r2,-4(fp)
 403c90c:	10801f17 	ldw	r2,124(r2)
 403c910:	1005003a 	cmpeq	r2,r2,zero
 403c914:	1000061e 	bne	r2,zero,403c930 <ip_reasm_send_icmp_timex+0x3c>
      {
      pip = (struct ip *) irep->l3_hdr;
 403c918:	e0bfff17 	ldw	r2,-4(fp)
 403c91c:	10802017 	ldw	r2,128(r2)
 403c920:	e0bffe15 	stw	r2,-8(fp)
      icmp_timex (pip, TIMEX_REASSY_FAILED);
 403c924:	e13ffe17 	ldw	r4,-8(fp)
 403c928:	01400044 	movi	r5,1
 403c92c:	4045ab40 	call	4045ab4 <icmp_timex>
      }

   return IPREASM_OK;
 403c930:	0005883a 	mov	r2,zero
}
 403c934:	e037883a 	mov	sp,fp
 403c938:	dfc00117 	ldw	ra,4(sp)
 403c93c:	df000017 	ldw	fp,0(sp)
 403c940:	dec00204 	addi	sp,sp,8
 403c944:	f800283a 	ret

0403c948 <ip_rcv>:
 * RETURNS: 
 */

int
ip_rcv(PACKET p)
{
 403c948:	defff204 	addi	sp,sp,-56
 403c94c:	dfc00d15 	stw	ra,52(sp)
 403c950:	df000c15 	stw	fp,48(sp)
 403c954:	dc000b15 	stw	r16,44(sp)
 403c958:	df000b04 	addi	fp,sp,44
 403c95c:	e13ffe15 	stw	r4,-8(fp)
   unsigned hdrlen;  /* length of IP header including options */
   unsigned len;     /* total length including IP header */
   unsigned short int num_pkts;
   PACKET * pktp;
   unsigned char i;
   int rcvrc = -1;
 403c960:	00bfffc4 	movi	r2,-1
 403c964:	e0bff515 	stw	r2,-44(fp)
   unsigned char rc_ret;
#endif


#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403c968:	00810174 	movhi	r2,1029
 403c96c:	1081bf04 	addi	r2,r2,1788
 403c970:	10800017 	ldw	r2,0(r2)
 403c974:	1081000c 	andi	r2,r2,1024
 403c978:	1005003a 	cmpeq	r2,r2,zero
 403c97c:	1000101e 	bne	r2,zero,403c9c0 <ip_rcv+0x78>
 403c980:	00810174 	movhi	r2,1029
 403c984:	1081bf04 	addi	r2,r2,1788
 403c988:	10800017 	ldw	r2,0(r2)
 403c98c:	1080800c 	andi	r2,r2,512
 403c990:	1005003a 	cmpeq	r2,r2,zero
 403c994:	10000a1e 	bne	r2,zero,403c9c0 <ip_rcv+0x78>
      dprintf("ip_rcv: got packet, len:%d, if:%d\n",
 403c998:	e0bffe17 	ldw	r2,-8(fp)
 403c99c:	14000417 	ldw	r16,16(r2)
 403c9a0:	e0bffe17 	ldw	r2,-8(fp)
 403c9a4:	11000617 	ldw	r4,24(r2)
 403c9a8:	401ed640 	call	401ed64 <if_netnumber>
 403c9ac:	100d883a 	mov	r6,r2
 403c9b0:	01010174 	movhi	r4,1029
 403c9b4:	212ffe04 	addi	r4,r4,-16392
 403c9b8:	800b883a 	mov	r5,r16
 403c9bc:	400207c0 	call	400207c <printf>
         p->nb_plen, net_num(p->net));
#endif

   IN_PROFILER(PF_IP, PF_ENTRY);

   nt = p->net;      /* which interface it came in on */
 403c9c0:	e0bffe17 	ldw	r2,-8(fp)
 403c9c4:	10800617 	ldw	r2,24(r2)
 403c9c8:	e0bffb15 	stw	r2,-20(fp)
   ip_mib.ipInReceives++;
 403c9cc:	008101b4 	movhi	r2,1030
 403c9d0:	10a44e04 	addi	r2,r2,-28360
 403c9d4:	10800217 	ldw	r2,8(r2)
 403c9d8:	10c00044 	addi	r3,r2,1
 403c9dc:	008101b4 	movhi	r2,1030
 403c9e0:	10a44e04 	addi	r2,r2,-28360
 403c9e4:	10c00215 	stw	r3,8(r2)
   pip = ip_head(p);
 403c9e8:	e0bffe17 	ldw	r2,-8(fp)
 403c9ec:	10800317 	ldw	r2,12(r2)
 403c9f0:	e0bffd15 	stw	r2,-12(fp)

   /* test received MAC len against IP header len */
   if (p->nb_plen < (unsigned)htons(pip->ip_len))
 403c9f4:	e0bffe17 	ldw	r2,-8(fp)
 403c9f8:	11000417 	ldw	r4,16(r2)
 403c9fc:	e0bffd17 	ldw	r2,-12(fp)
 403ca00:	1080008b 	ldhu	r2,2(r2)
 403ca04:	10bfffcc 	andi	r2,r2,65535
 403ca08:	1004d23a 	srli	r2,r2,8
 403ca0c:	10bfffcc 	andi	r2,r2,65535
 403ca10:	10c03fcc 	andi	r3,r2,255
 403ca14:	e0bffd17 	ldw	r2,-12(fp)
 403ca18:	1080008b 	ldhu	r2,2(r2)
 403ca1c:	10bfffcc 	andi	r2,r2,65535
 403ca20:	1004923a 	slli	r2,r2,8
 403ca24:	10bfc00c 	andi	r2,r2,65280
 403ca28:	1884b03a 	or	r2,r3,r2
 403ca2c:	2080272e 	bgeu	r4,r2,403cacc <ip_rcv+0x184>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403ca30:	00810174 	movhi	r2,1029
 403ca34:	1081bf04 	addi	r2,r2,1788
 403ca38:	10800017 	ldw	r2,0(r2)
 403ca3c:	1081000c 	andi	r2,r2,1024
 403ca40:	1005003a 	cmpeq	r2,r2,zero
 403ca44:	1000111e 	bne	r2,zero,403ca8c <ip_rcv+0x144>
 403ca48:	00810174 	movhi	r2,1029
 403ca4c:	1081bf04 	addi	r2,r2,1788
 403ca50:	10800017 	ldw	r2,0(r2)
 403ca54:	1080800c 	andi	r2,r2,512
 403ca58:	1005003a 	cmpeq	r2,r2,zero
 403ca5c:	10000b1e 	bne	r2,zero,403ca8c <ip_rcv+0x144>
      {
         dprintf("ip_rcv: bad pkt len\n");
 403ca60:	01010174 	movhi	r4,1029
 403ca64:	21300704 	addi	r4,r4,-16356
 403ca68:	40021940 	call	4002194 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 403ca6c:	00810174 	movhi	r2,1029
 403ca70:	1081bf04 	addi	r2,r2,1788
 403ca74:	10800017 	ldw	r2,0(r2)
 403ca78:	1080008c 	andi	r2,r2,2
 403ca7c:	1005003a 	cmpeq	r2,r2,zero
 403ca80:	1000021e 	bne	r2,zero,403ca8c <ip_rcv+0x144>
 403ca84:	e13ffe17 	ldw	r4,-8(fp)
 403ca88:	403a55c0 	call	403a55c <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 403ca8c:	008101b4 	movhi	r2,1030
 403ca90:	10a44e04 	addi	r2,r2,-28360
 403ca94:	10800317 	ldw	r2,12(r2)
 403ca98:	10c00044 	addi	r3,r2,1
 403ca9c:	008101b4 	movhi	r2,1030
 403caa0:	10a44e04 	addi	r2,r2,-28360
 403caa4:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 403caa8:	01000084 	movi	r4,2
 403caac:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 403cab0:	e13ffe17 	ldw	r4,-8(fp)
 403cab4:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403cab8:	01000084 	movi	r4,2
 403cabc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 403cac0:	00bff804 	movi	r2,-32
 403cac4:	e0bfff15 	stw	r2,-4(fp)
 403cac8:	00009806 	br	403cd2c <ip_rcv+0x3e4>
   }

   /* use length from IP header; MAC value may be padded */
   len = htons(pip->ip_len);
 403cacc:	e0bffd17 	ldw	r2,-12(fp)
 403cad0:	1080008b 	ldhu	r2,2(r2)
 403cad4:	10bfffcc 	andi	r2,r2,65535
 403cad8:	1004d23a 	srli	r2,r2,8
 403cadc:	10bfffcc 	andi	r2,r2,65535
 403cae0:	10c03fcc 	andi	r3,r2,255
 403cae4:	e0bffd17 	ldw	r2,-12(fp)
 403cae8:	1080008b 	ldhu	r2,2(r2)
 403caec:	10bfffcc 	andi	r2,r2,65535
 403caf0:	1004923a 	slli	r2,r2,8
 403caf4:	10bfc00c 	andi	r2,r2,65280
 403caf8:	1884b03a 	or	r2,r3,r2
 403cafc:	e0bff915 	stw	r2,-28(fp)
   p->nb_plen = len;       /* fix pkt len */
 403cb00:	e0fffe17 	ldw	r3,-8(fp)
 403cb04:	e0bff917 	ldw	r2,-28(fp)
 403cb08:	18800415 	stw	r2,16(r3)

   if ( ((pip->ip_ver_ihl & 0xf0) >> 4) != IP_VER)
 403cb0c:	e0bffd17 	ldw	r2,-12(fp)
 403cb10:	10800003 	ldbu	r2,0(r2)
 403cb14:	10803fcc 	andi	r2,r2,255
 403cb18:	10803c0c 	andi	r2,r2,240
 403cb1c:	1005d13a 	srai	r2,r2,4
 403cb20:	10800120 	cmpeqi	r2,r2,4
 403cb24:	1000271e 	bne	r2,zero,403cbc4 <ip_rcv+0x27c>
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403cb28:	00810174 	movhi	r2,1029
 403cb2c:	1081bf04 	addi	r2,r2,1788
 403cb30:	10800017 	ldw	r2,0(r2)
 403cb34:	1081000c 	andi	r2,r2,1024
 403cb38:	1005003a 	cmpeq	r2,r2,zero
 403cb3c:	1000111e 	bne	r2,zero,403cb84 <ip_rcv+0x23c>
 403cb40:	00810174 	movhi	r2,1029
 403cb44:	1081bf04 	addi	r2,r2,1788
 403cb48:	10800017 	ldw	r2,0(r2)
 403cb4c:	1080800c 	andi	r2,r2,512
 403cb50:	1005003a 	cmpeq	r2,r2,zero
 403cb54:	10000b1e 	bne	r2,zero,403cb84 <ip_rcv+0x23c>
      {
         dprintf("ip_rcv: bad version number\n");
 403cb58:	01010174 	movhi	r4,1029
 403cb5c:	21300c04 	addi	r4,r4,-16336
 403cb60:	40021940 	call	4002194 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 403cb64:	00810174 	movhi	r2,1029
 403cb68:	1081bf04 	addi	r2,r2,1788
 403cb6c:	10800017 	ldw	r2,0(r2)
 403cb70:	1080008c 	andi	r2,r2,2
 403cb74:	1005003a 	cmpeq	r2,r2,zero
 403cb78:	1000021e 	bne	r2,zero,403cb84 <ip_rcv+0x23c>
 403cb7c:	e13ffe17 	ldw	r4,-8(fp)
 403cb80:	403a55c0 	call	403a55c <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 403cb84:	008101b4 	movhi	r2,1030
 403cb88:	10a44e04 	addi	r2,r2,-28360
 403cb8c:	10800317 	ldw	r2,12(r2)
 403cb90:	10c00044 	addi	r3,r2,1
 403cb94:	008101b4 	movhi	r2,1030
 403cb98:	10a44e04 	addi	r2,r2,-28360
 403cb9c:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 403cba0:	01000084 	movi	r4,2
 403cba4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 403cba8:	e13ffe17 	ldw	r4,-8(fp)
 403cbac:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403cbb0:	01000084 	movi	r4,2
 403cbb4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 403cbb8:	00bff804 	movi	r2,-32
 403cbbc:	e0bfff15 	stw	r2,-4(fp)
 403cbc0:	00005a06 	br	403cd2c <ip_rcv+0x3e4>
   }

   csum = pip->ip_chksum;
 403cbc4:	e0bffd17 	ldw	r2,-12(fp)
 403cbc8:	1080028b 	ldhu	r2,10(r2)
 403cbcc:	e0bffc8d 	sth	r2,-14(fp)
   pip->ip_chksum = 0;
 403cbd0:	e0bffd17 	ldw	r2,-12(fp)
 403cbd4:	1000028d 	sth	zero,10(r2)
   hdrlen = ip_hlen(pip);
 403cbd8:	e0bffd17 	ldw	r2,-12(fp)
 403cbdc:	10800003 	ldbu	r2,0(r2)
 403cbe0:	10803fcc 	andi	r2,r2,255
 403cbe4:	108003cc 	andi	r2,r2,15
 403cbe8:	1085883a 	add	r2,r2,r2
 403cbec:	1085883a 	add	r2,r2,r2
 403cbf0:	e0bffa15 	stw	r2,-24(fp)
   tempsum = ~cksum(pip, hdrlen >> 1);
 403cbf4:	e0bffa17 	ldw	r2,-24(fp)
 403cbf8:	100ad07a 	srli	r5,r2,1
 403cbfc:	e13ffd17 	ldw	r4,-12(fp)
 403cc00:	4020a000 	call	4020a00 <cksum>
 403cc04:	0084303a 	nor	r2,zero,r2
 403cc08:	e0bffc0d 	sth	r2,-16(fp)

   if (csum != tempsum)
 403cc0c:	e0fffc8b 	ldhu	r3,-14(fp)
 403cc10:	e0bffc0b 	ldhu	r2,-16(fp)
 403cc14:	18802a26 	beq	r3,r2,403ccc0 <ip_rcv+0x378>
   {
      pip->ip_chksum = csum;
 403cc18:	e0fffd17 	ldw	r3,-12(fp)
 403cc1c:	e0bffc8b 	ldhu	r2,-14(fp)
 403cc20:	1880028d 	sth	r2,10(r3)
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403cc24:	00810174 	movhi	r2,1029
 403cc28:	1081bf04 	addi	r2,r2,1788
 403cc2c:	10800017 	ldw	r2,0(r2)
 403cc30:	1081000c 	andi	r2,r2,1024
 403cc34:	1005003a 	cmpeq	r2,r2,zero
 403cc38:	1000111e 	bne	r2,zero,403cc80 <ip_rcv+0x338>
 403cc3c:	00810174 	movhi	r2,1029
 403cc40:	1081bf04 	addi	r2,r2,1788
 403cc44:	10800017 	ldw	r2,0(r2)
 403cc48:	1080800c 	andi	r2,r2,512
 403cc4c:	1005003a 	cmpeq	r2,r2,zero
 403cc50:	10000b1e 	bne	r2,zero,403cc80 <ip_rcv+0x338>
      {
         dprintf("ip_rcv: bad xsum\n");
 403cc54:	01010174 	movhi	r4,1029
 403cc58:	21301304 	addi	r4,r4,-16308
 403cc5c:	40021940 	call	4002194 <puts>
         if (NDEBUG & DUMP) ip_dump(p);
 403cc60:	00810174 	movhi	r2,1029
 403cc64:	1081bf04 	addi	r2,r2,1788
 403cc68:	10800017 	ldw	r2,0(r2)
 403cc6c:	1080008c 	andi	r2,r2,2
 403cc70:	1005003a 	cmpeq	r2,r2,zero
 403cc74:	1000021e 	bne	r2,zero,403cc80 <ip_rcv+0x338>
 403cc78:	e13ffe17 	ldw	r4,-8(fp)
 403cc7c:	403a55c0 	call	403a55c <ip_dump>
            }
#endif
      ip_mib.ipInHdrErrors++;
 403cc80:	008101b4 	movhi	r2,1030
 403cc84:	10a44e04 	addi	r2,r2,-28360
 403cc88:	10800317 	ldw	r2,12(r2)
 403cc8c:	10c00044 	addi	r3,r2,1
 403cc90:	008101b4 	movhi	r2,1030
 403cc94:	10a44e04 	addi	r2,r2,-28360
 403cc98:	10c00315 	stw	r3,12(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 403cc9c:	01000084 	movi	r4,2
 403cca0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 403cca4:	e13ffe17 	ldw	r4,-8(fp)
 403cca8:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403ccac:	01000084 	movi	r4,2
 403ccb0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      IN_PROFILER(PF_IP, PF_EXIT);
      return(ENP_BAD_HEADER);
 403ccb4:	00bff804 	movi	r2,-32
 403ccb8:	e0bfff15 	stw	r2,-4(fp)
 403ccbc:	00001b06 	br	403cd2c <ip_rcv+0x3e4>
   }

   pip->ip_chksum = csum;
 403ccc0:	e0fffd17 	ldw	r3,-12(fp)
 403ccc4:	e0bffc8b 	ldhu	r2,-14(fp)
 403ccc8:	1880028d 	sth	r2,10(r3)
#endif

    /* start off by assuming that we will only process the "current" packet;
     * these values may get overwritten by the NAT module if it returns
     * more than one packet back to this function (ip_rcv ()) */
    num_pkts = 1;
 403cccc:	00800044 	movi	r2,1
 403ccd0:	e0bff80d 	sth	r2,-32(fp)
    pktp = &p;
 403ccd4:	e0bffe04 	addi	r2,fp,-8
 403ccd8:	e0bff715 	stw	r2,-36(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
 403ccdc:	e03ff605 	stb	zero,-40(fp)
 403cce0:	00000c06 	br	403cd14 <ip_rcv+0x3cc>
   {
      rcvrc = ip_rcv_phase2 (*(pktp + i));
 403cce4:	e0bff603 	ldbu	r2,-40(fp)
 403cce8:	1085883a 	add	r2,r2,r2
 403ccec:	1085883a 	add	r2,r2,r2
 403ccf0:	1007883a 	mov	r3,r2
 403ccf4:	e0bff717 	ldw	r2,-36(fp)
 403ccf8:	1885883a 	add	r2,r3,r2
 403ccfc:	11000017 	ldw	r4,0(r2)
 403cd00:	403cd480 	call	403cd48 <ip_rcv_phase2>
 403cd04:	e0bff515 	stw	r2,-44(fp)
    * by other modules */
#endif   /* NATRT */

   /* we need to process 'num_pkts' packets.  Pointers to these packets are stored
    * in storage @ 'pktp' */
   for (i = 0; i < num_pkts; ++i)
 403cd08:	e0bff603 	ldbu	r2,-40(fp)
 403cd0c:	10800044 	addi	r2,r2,1
 403cd10:	e0bff605 	stb	r2,-40(fp)
 403cd14:	e0bff603 	ldbu	r2,-40(fp)
 403cd18:	10ffffcc 	andi	r3,r2,65535
 403cd1c:	e0bff80b 	ldhu	r2,-32(fp)
 403cd20:	18bff036 	bltu	r3,r2,403cce4 <ip_rcv+0x39c>
   if (pktp != &p) nat_free (pktp);
#endif /* NATRT */

   /* when multiple packets are processed in the loop above, the return code
    * contains the return code for the last packet */
   return rcvrc;
 403cd24:	e0bff517 	ldw	r2,-44(fp)
 403cd28:	e0bfff15 	stw	r2,-4(fp)
 403cd2c:	e0bfff17 	ldw	r2,-4(fp)
}
 403cd30:	e037883a 	mov	sp,fp
 403cd34:	dfc00217 	ldw	ra,8(sp)
 403cd38:	df000117 	ldw	fp,4(sp)
 403cd3c:	dc000017 	ldw	r16,0(sp)
 403cd40:	dec00304 	addi	sp,sp,12
 403cd44:	f800283a 	ret

0403cd48 <ip_rcv_phase2>:


int ip_rcv_phase2 (PACKET p)
{
 403cd48:	defff404 	addi	sp,sp,-48
 403cd4c:	dfc00b15 	stw	ra,44(sp)
 403cd50:	df000a15 	stw	fp,40(sp)
 403cd54:	df000a04 	addi	fp,sp,40
 403cd58:	e13ffe15 	stw	r4,-8(fp)

   struct ip * pip;     /* the internet header */
   NET nt;
   unsigned short tempsum;

   pip = ip_head(p);
 403cd5c:	e0bffe17 	ldw	r2,-8(fp)
 403cd60:	10800317 	ldw	r2,12(r2)
 403cd64:	e0bffc15 	stw	r2,-16(fp)
   nt = p->net;      /* which interface it came in on */
 403cd68:	e0bffe17 	ldw	r2,-8(fp)
 403cd6c:	10800617 	ldw	r2,24(r2)
 403cd70:	e0bffb15 	stw	r2,-20(fp)

#ifdef IP_MULTICAST

   if (IN_MULTICAST(ntohl(pip->ip_dest))) 
 403cd74:	e0bffc17 	ldw	r2,-16(fp)
 403cd78:	10800417 	ldw	r2,16(r2)
 403cd7c:	1004d63a 	srli	r2,r2,24
 403cd80:	10c03fcc 	andi	r3,r2,255
 403cd84:	e0bffc17 	ldw	r2,-16(fp)
 403cd88:	10800417 	ldw	r2,16(r2)
 403cd8c:	1004d23a 	srli	r2,r2,8
 403cd90:	10bfc00c 	andi	r2,r2,65280
 403cd94:	1886b03a 	or	r3,r3,r2
 403cd98:	e0bffc17 	ldw	r2,-16(fp)
 403cd9c:	10800417 	ldw	r2,16(r2)
 403cda0:	10bfc00c 	andi	r2,r2,65280
 403cda4:	1004923a 	slli	r2,r2,8
 403cda8:	1886b03a 	or	r3,r3,r2
 403cdac:	e0bffc17 	ldw	r2,-16(fp)
 403cdb0:	10800417 	ldw	r2,16(r2)
 403cdb4:	10803fcc 	andi	r2,r2,255
 403cdb8:	1004963a 	slli	r2,r2,24
 403cdbc:	1884b03a 	or	r2,r3,r2
 403cdc0:	10fc002c 	andhi	r3,r2,61440
 403cdc4:	00b80034 	movhi	r2,57344
 403cdc8:	1880181e 	bne	r3,r2,403ce2c <ip_rcv_phase2+0xe4>
      struct in_multi * inm;
      /*
       * See if we belong to the destination multicast group on the
       * arrival interface.
       */
      inm = lookup_mcast(pip->ip_dest, nt);
 403cdcc:	e0bffc17 	ldw	r2,-16(fp)
 403cdd0:	11000417 	ldw	r4,16(r2)
 403cdd4:	e17ffb17 	ldw	r5,-20(fp)
 403cdd8:	403da040 	call	403da04 <lookup_mcast>
 403cddc:	e0bff915 	stw	r2,-28(fp)
      if (inm == NULL) 
 403cde0:	e0bff917 	ldw	r2,-28(fp)
 403cde4:	1004c03a 	cmpne	r2,r2,zero
 403cde8:	10010d1e 	bne	r2,zero,403d220 <ip_rcv_phase2+0x4d8>
      {
         ip_mib.ipOutNoRoutes++;
 403cdec:	008101b4 	movhi	r2,1030
 403cdf0:	10a44e04 	addi	r2,r2,-28360
 403cdf4:	10800b17 	ldw	r2,44(r2)
 403cdf8:	10c00044 	addi	r3,r2,1
 403cdfc:	008101b4 	movhi	r2,1030
 403ce00:	10a44e04 	addi	r2,r2,-28360
 403ce04:	10c00b15 	stw	r3,44(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 403ce08:	01000084 	movi	r4,2
 403ce0c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 403ce10:	e13ffe17 	ldw	r4,-8(fp)
 403ce14:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403ce18:	01000084 	movi	r4,2
 403ce1c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return (ENP_NOT_MINE);
 403ce20:	00800084 	movi	r2,2
 403ce24:	e0bfff15 	stw	r2,-4(fp)
 403ce28:	00014406 	br	403d33c <ip_rcv_phase2+0x5f4>
      else
         goto ours;
   }
#endif   /* IP_MULTICAST */

   if ((pip->ip_dest != nt->n_ipaddr) &&  /* Quick check on our own addr */
 403ce2c:	e0bffc17 	ldw	r2,-16(fp)
 403ce30:	10c00417 	ldw	r3,16(r2)
 403ce34:	e0bffb17 	ldw	r2,-20(fp)
 403ce38:	10800a17 	ldw	r2,40(r2)
 403ce3c:	1880f826 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
 403ce40:	e0bffc17 	ldw	r2,-16(fp)
 403ce44:	10800417 	ldw	r2,16(r2)
 403ce48:	10bfffe0 	cmpeqi	r2,r2,-1
 403ce4c:	1000f41e 	bne	r2,zero,403d220 <ip_rcv_phase2+0x4d8>
 403ce50:	e0bffc17 	ldw	r2,-16(fp)
 403ce54:	10c00417 	ldw	r3,16(r2)
 403ce58:	e0bffb17 	ldw	r2,-20(fp)
 403ce5c:	10800e17 	ldw	r2,56(r2)
 403ce60:	1880ef26 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
 403ce64:	e0bffc17 	ldw	r2,-16(fp)
 403ce68:	10c00417 	ldw	r3,16(r2)
 403ce6c:	e0bffb17 	ldw	r2,-20(fp)
 403ce70:	10800f17 	ldw	r2,60(r2)
 403ce74:	1880ea26 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
 403ce78:	e0bffc17 	ldw	r2,-16(fp)
 403ce7c:	10c00417 	ldw	r3,16(r2)
 403ce80:	e0bffb17 	ldw	r2,-20(fp)
 403ce84:	10801017 	ldw	r2,64(r2)
 403ce88:	1880e526 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
 403ce8c:	e0bffb17 	ldw	r2,-20(fp)
 403ce90:	10c00a17 	ldw	r3,40(r2)
 403ce94:	e0bffb17 	ldw	r2,-20(fp)
 403ce98:	10800c17 	ldw	r2,48(r2)
 403ce9c:	0084303a 	nor	r2,zero,r2
 403cea0:	1884703a 	and	r2,r3,r2
 403cea4:	1005003a 	cmpeq	r2,r2,zero
 403cea8:	1000dd1e 	bne	r2,zero,403d220 <ip_rcv_phase2+0x4d8>
       (pip->ip_dest != nt->n_netbr42) && /* All subnet bcast (4.2bsd) */
       (pip->ip_dest != nt->n_subnetbr) &&/* Our subnet broadcast */
       (nt->n_ipaddr & ~nt->snmask))      /* Know our own host address? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403ceac:	00810174 	movhi	r2,1029
 403ceb0:	1081bf04 	addi	r2,r2,1788
 403ceb4:	10800017 	ldw	r2,0(r2)
 403ceb8:	1081000c 	andi	r2,r2,1024
 403cebc:	1005003a 	cmpeq	r2,r2,zero
 403cec0:	1000181e 	bne	r2,zero,403cf24 <ip_rcv_phase2+0x1dc>
 403cec4:	00810174 	movhi	r2,1029
 403cec8:	1081bf04 	addi	r2,r2,1788
 403cecc:	10800017 	ldw	r2,0(r2)
 403ced0:	1080800c 	andi	r2,r2,512
 403ced4:	1005003a 	cmpeq	r2,r2,zero
 403ced8:	1000121e 	bne	r2,zero,403cf24 <ip_rcv_phase2+0x1dc>
         dprintf("ip_rcv: got pkt not for me; for %u.%u.%u.%u\n",
 403cedc:	e0bffc17 	ldw	r2,-16(fp)
 403cee0:	10800417 	ldw	r2,16(r2)
 403cee4:	11403fcc 	andi	r5,r2,255
 403cee8:	e0bffc17 	ldw	r2,-16(fp)
 403ceec:	10800417 	ldw	r2,16(r2)
 403cef0:	1004d23a 	srli	r2,r2,8
 403cef4:	11803fcc 	andi	r6,r2,255
 403cef8:	e0bffc17 	ldw	r2,-16(fp)
 403cefc:	10800417 	ldw	r2,16(r2)
 403cf00:	1004d43a 	srli	r2,r2,16
 403cf04:	11c03fcc 	andi	r7,r2,255
 403cf08:	e0bffc17 	ldw	r2,-16(fp)
 403cf0c:	10800417 	ldw	r2,16(r2)
 403cf10:	1004d63a 	srli	r2,r2,24
 403cf14:	d8800015 	stw	r2,0(sp)
 403cf18:	01010174 	movhi	r4,1029
 403cf1c:	21301804 	addi	r4,r4,-16288
 403cf20:	400207c0 	call	400207c <printf>

#ifdef IP_ROUTING    /* if multi-homed router, try to route */
      /* Do routing only if ipForwarding is enabled in the IP MIB. This
       * is the switch for routing whether SNMP is used or not.
       */
      if (ip_mib.ipForwarding == 2)
 403cf24:	008101b4 	movhi	r2,1030
 403cf28:	10a44e04 	addi	r2,r2,-28360
 403cf2c:	10800017 	ldw	r2,0(r2)
 403cf30:	10800098 	cmpnei	r2,r2,2
 403cf34:	1000101e 	bne	r2,zero,403cf78 <ip_rcv_phase2+0x230>
      {
         ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 403cf38:	008101b4 	movhi	r2,1030
 403cf3c:	10a44e04 	addi	r2,r2,-28360
 403cf40:	10800a17 	ldw	r2,40(r2)
 403cf44:	10c00044 	addi	r3,r2,1
 403cf48:	008101b4 	movhi	r2,1030
 403cf4c:	10a44e04 	addi	r2,r2,-28360
 403cf50:	10c00a15 	stw	r3,40(r2)
         LOCK_NET_RESOURCE(FREEQ_RESID);
 403cf54:	01000084 	movi	r4,2
 403cf58:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
         pk_free(p);
 403cf5c:	e13ffe17 	ldw	r4,-8(fp)
 403cf60:	40253040 	call	4025304 <pk_free>
         UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403cf64:	01000084 	movi	r4,2
 403cf68:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         IN_PROFILER(PF_IP, PF_EXIT);
         return ENP_NO_ROUTE;
 403cf6c:	00bff7c4 	movi	r2,-33
 403cf70:	e0bfff15 	stw	r2,-4(fp)
 403cf74:	0000f106 	br	403d33c <ip_rcv_phase2+0x5f4>
         NET outnet;
#ifdef IP_FRAGMENTS
         int err;
#endif

         ip_mib.ipForwDatagrams++;  /* Count MIB-2 route attempts here */
 403cf78:	008101b4 	movhi	r2,1030
 403cf7c:	10a44e04 	addi	r2,r2,-28360
 403cf80:	10800517 	ldw	r2,20(r2)
 403cf84:	10c00044 	addi	r3,r2,1
 403cf88:	008101b4 	movhi	r2,1030
 403cf8c:	10a44e04 	addi	r2,r2,-28360
 403cf90:	10c00515 	stw	r3,20(r2)
         if (pip->ip_time <= 1)     /* Time to Live (hopcount) expired? */
 403cf94:	e0bffc17 	ldw	r2,-16(fp)
 403cf98:	10800203 	ldbu	r2,8(r2)
 403cf9c:	10803fcc 	andi	r2,r2,255
 403cfa0:	108000a8 	cmpgeui	r2,r2,2
 403cfa4:	10001b1e 	bne	r2,zero,403d014 <ip_rcv_phase2+0x2cc>
         {
            ip_mib.ipOutDiscards++; /* Is this the right counter for these? */
 403cfa8:	008101b4 	movhi	r2,1030
 403cfac:	10a44e04 	addi	r2,r2,-28360
 403cfb0:	10800a17 	ldw	r2,40(r2)
 403cfb4:	10c00044 	addi	r3,r2,1
 403cfb8:	008101b4 	movhi	r2,1030
 403cfbc:	10a44e04 	addi	r2,r2,-28360
 403cfc0:	10c00a15 	stw	r3,40(r2)
#ifdef FULL_ICMP
            icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, (TIMEX <<8), p->net);
 403cfc4:	e0bffc17 	ldw	r2,-16(fp)
 403cfc8:	11000317 	ldw	r4,12(r2)
 403cfcc:	e0bffe17 	ldw	r2,-8(fp)
 403cfd0:	10800617 	ldw	r2,24(r2)
 403cfd4:	11400a17 	ldw	r5,40(r2)
 403cfd8:	e0bffe17 	ldw	r2,-8(fp)
 403cfdc:	10800617 	ldw	r2,24(r2)
 403cfe0:	d8800015 	stw	r2,0(sp)
 403cfe4:	e1bffc17 	ldw	r6,-16(fp)
 403cfe8:	01c2c004 	movi	r7,2816
 403cfec:	40457640 	call	4045764 <icmp_destun>
#endif   /* FULL_ICMP */
            LOCK_NET_RESOURCE(FREEQ_RESID);
 403cff0:	01000084 	movi	r4,2
 403cff4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(p);
 403cff8:	e13ffe17 	ldw	r4,-8(fp)
 403cffc:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403d000:	01000084 	movi	r4,2
 403d004:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
 403d008:	00bff7c4 	movi	r2,-33
 403d00c:	e0bfff15 	stw	r2,-4(fp)
 403d010:	0000ca06 	br	403d33c <ip_rcv_phase2+0x5f4>
         }

         p->fhost = pip->ip_dest;   /* set packet's target IP in net endian */
 403d014:	e0bffc17 	ldw	r2,-16(fp)
 403d018:	10c00417 	ldw	r3,16(r2)
 403d01c:	e0bffe17 	ldw	r2,-8(fp)
 403d020:	10c00715 	stw	r3,28(r2)
         if ((outnet = iproute(p->fhost, &firsthop)) == NULL)  /* find route */
 403d024:	e0bffe17 	ldw	r2,-8(fp)
 403d028:	11000717 	ldw	r4,28(r2)
 403d02c:	e17ffd04 	addi	r5,fp,-12
 403d030:	403a8140 	call	403a814 <iproute>
 403d034:	e0bff815 	stw	r2,-32(fp)
 403d038:	e0bff817 	ldw	r2,-32(fp)
 403d03c:	1004c03a 	cmpne	r2,r2,zero
 403d040:	1000101e 	bne	r2,zero,403d084 <ip_rcv_phase2+0x33c>
         {
            ip_mib.ipOutNoRoutes++; /* count unroutable pkts */
 403d044:	008101b4 	movhi	r2,1030
 403d048:	10a44e04 	addi	r2,r2,-28360
 403d04c:	10800b17 	ldw	r2,44(r2)
 403d050:	10c00044 	addi	r3,r2,1
 403d054:	008101b4 	movhi	r2,1030
 403d058:	10a44e04 	addi	r2,r2,-28360
 403d05c:	10c00b15 	stw	r3,44(r2)
            LOCK_NET_RESOURCE(FREEQ_RESID);
 403d060:	01000084 	movi	r4,2
 403d064:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
            pk_free(p);
 403d068:	e13ffe17 	ldw	r4,-8(fp)
 403d06c:	40253040 	call	4025304 <pk_free>
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403d070:	01000084 	movi	r4,2
 403d074:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
            IN_PROFILER(PF_IP, PF_EXIT);
            return ENP_NO_ROUTE;
 403d078:	00bff7c4 	movi	r2,-33
 403d07c:	e0bfff15 	stw	r2,-4(fp)
 403d080:	0000ae06 	br	403d33c <ip_rcv_phase2+0x5f4>
         /* Check to see if the packet was is addressed to one of our IP
          * addresses other than the interface it was received on. If so,
          * routing should have returned that interface and we can trap this
          * situation by checking the interfaces IP address.
          */
         if(pip->ip_dest == outnet->n_ipaddr)
 403d084:	e0bffc17 	ldw	r2,-16(fp)
 403d088:	10c00417 	ldw	r3,16(r2)
 403d08c:	e0bff817 	ldw	r2,-32(fp)
 403d090:	10800a17 	ldw	r2,40(r2)
 403d094:	18806226 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
            goto ours;

         /* Make sure the packet is not a subnet broadcast for either the
          * source or destination network.
          */
         if((pip->ip_dest == outnet->n_netbr) ||
 403d098:	e0bffc17 	ldw	r2,-16(fp)
 403d09c:	10c00417 	ldw	r3,16(r2)
 403d0a0:	e0bff817 	ldw	r2,-32(fp)
 403d0a4:	10800e17 	ldw	r2,56(r2)
 403d0a8:	18805d26 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
 403d0ac:	e0bffc17 	ldw	r2,-16(fp)
 403d0b0:	10c00417 	ldw	r3,16(r2)
 403d0b4:	e0bffe17 	ldw	r2,-8(fp)
 403d0b8:	10800617 	ldw	r2,24(r2)
 403d0bc:	10800e17 	ldw	r2,56(r2)
 403d0c0:	18805726 	beq	r3,r2,403d220 <ip_rcv_phase2+0x4d8>
         {
            goto ours;            
         }

         /* Routed OK, prepare to send */
         p->net = outnet;           /* set iface to send on */
 403d0c4:	e0fffe17 	ldw	r3,-8(fp)
 403d0c8:	e0bff817 	ldw	r2,-32(fp)
 403d0cc:	18800615 	stw	r2,24(r3)
            }
         }
#endif   /* IPSEC */

         /* see if packet is too big for media of dest net */
         if ((p->nb_plen + p->net->n_lnh) > (unsigned)outnet->n_mtu)
 403d0d0:	e0bffe17 	ldw	r2,-8(fp)
 403d0d4:	10c00417 	ldw	r3,16(r2)
 403d0d8:	e0bffe17 	ldw	r2,-8(fp)
 403d0dc:	10800617 	ldw	r2,24(r2)
 403d0e0:	10800817 	ldw	r2,32(r2)
 403d0e4:	1887883a 	add	r3,r3,r2
 403d0e8:	e0bff817 	ldw	r2,-32(fp)
 403d0ec:	10800917 	ldw	r2,36(r2)
 403d0f0:	10c0372e 	bgeu	r2,r3,403d1d0 <ip_rcv_phase2+0x488>
         {
#ifdef IP_FRAGMENTS
            /* see if we're not supposed to fragment it */
            if (ntohs(pip->ip_flgs_foff) & IP_FLG_DF)
 403d0f4:	e0bffc17 	ldw	r2,-16(fp)
 403d0f8:	1080018b 	ldhu	r2,6(r2)
 403d0fc:	10bfffcc 	andi	r2,r2,65535
 403d100:	1004d23a 	srli	r2,r2,8
 403d104:	10bfffcc 	andi	r2,r2,65535
 403d108:	10c03fcc 	andi	r3,r2,255
 403d10c:	e0bffc17 	ldw	r2,-16(fp)
 403d110:	1080018b 	ldhu	r2,6(r2)
 403d114:	10bfffcc 	andi	r2,r2,65535
 403d118:	1004923a 	slli	r2,r2,8
 403d11c:	10bfc00c 	andi	r2,r2,65280
 403d120:	1884b03a 	or	r2,r3,r2
 403d124:	1090000c 	andi	r2,r2,16384
 403d128:	1005003a 	cmpeq	r2,r2,zero
 403d12c:	10001b1e 	bne	r2,zero,403d19c <ip_rcv_phase2+0x454>
            {
#ifdef FULL_ICMP
               icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTFRAG, p->net);
 403d130:	e0bffc17 	ldw	r2,-16(fp)
 403d134:	11000317 	ldw	r4,12(r2)
 403d138:	e0bffe17 	ldw	r2,-8(fp)
 403d13c:	10800617 	ldw	r2,24(r2)
 403d140:	11400a17 	ldw	r5,40(r2)
 403d144:	e0bffe17 	ldw	r2,-8(fp)
 403d148:	10800617 	ldw	r2,24(r2)
 403d14c:	d8800015 	stw	r2,0(sp)
 403d150:	e1bffc17 	ldw	r6,-16(fp)
 403d154:	01c00104 	movi	r7,4
 403d158:	40457640 	call	4045764 <icmp_destun>
#endif   /* FULL_ICMP */
               ip_mib.ipFragFails++;
 403d15c:	008101b4 	movhi	r2,1030
 403d160:	10a44e04 	addi	r2,r2,-28360
 403d164:	10801117 	ldw	r2,68(r2)
 403d168:	10c00044 	addi	r3,r2,1
 403d16c:	008101b4 	movhi	r2,1030
 403d170:	10a44e04 	addi	r2,r2,-28360
 403d174:	10c01115 	stw	r3,68(r2)
               LOCK_NET_RESOURCE(FREEQ_RESID);
 403d178:	01000084 	movi	r4,2
 403d17c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
               pk_free(p);
 403d180:	e13ffe17 	ldw	r4,-8(fp)
 403d184:	40253040 	call	4025304 <pk_free>
               UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403d188:	01000084 	movi	r4,2
 403d18c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
               IN_PROFILER(PF_IP, PF_EXIT);
               return ENP_LOGIC;
 403d190:	00bffd44 	movi	r2,-11
 403d194:	e0bfff15 	stw	r2,-4(fp)
 403d198:	00006806 	br	403d33c <ip_rcv_phase2+0x5f4>
            }

            /* fall to here if we're going to fragment it. */
            pip->ip_time--;            /* datagram's hop count */
 403d19c:	e0bffc17 	ldw	r2,-16(fp)
 403d1a0:	10800203 	ldbu	r2,8(r2)
 403d1a4:	10bfffc4 	addi	r2,r2,-1
 403d1a8:	1007883a 	mov	r3,r2
 403d1ac:	e0bffc17 	ldw	r2,-16(fp)
 403d1b0:	10c00205 	stb	r3,8(r2)
            err = ip_fragment(p, firsthop);
 403d1b4:	e17ffd17 	ldw	r5,-12(fp)
 403d1b8:	e13ffe17 	ldw	r4,-8(fp)
 403d1bc:	4039e840 	call	4039e84 <ip_fragment>
 403d1c0:	e0bff715 	stw	r2,-36(fp)
            IN_PROFILER(PF_IP, PF_EXIT);
            return(err);
 403d1c4:	e0bff717 	ldw	r2,-36(fp)
 403d1c8:	e0bfff15 	stw	r2,-4(fp)
 403d1cc:	00005b06 	br	403d33c <ip_rcv_phase2+0x5f4>
            pk_free(p);
            UNLOCK_NET_RESOURCE(FREEQ_RESID);
            return ENP_LOGIC;
#endif   /* IP_FRAGMENTS */
         }
         pip->ip_time--;            /* datagram's hop count */
 403d1d0:	e0bffc17 	ldw	r2,-16(fp)
 403d1d4:	10800203 	ldbu	r2,8(r2)
 403d1d8:	10bfffc4 	addi	r2,r2,-1
 403d1dc:	1007883a 	mov	r3,r2
 403d1e0:	e0bffc17 	ldw	r2,-16(fp)
 403d1e4:	10c00205 	stb	r3,8(r2)
         pip->ip_chksum = IPXSUM;   /* clear checksum field for summing */
 403d1e8:	e0bffc17 	ldw	r2,-16(fp)
 403d1ec:	1000028d 	sth	zero,10(r2)
         pip->ip_chksum = ~cksum(pip, 10);   /* new xsum */
 403d1f0:	e13ffc17 	ldw	r4,-16(fp)
 403d1f4:	01400284 	movi	r5,10
 403d1f8:	4020a000 	call	4020a00 <cksum>
 403d1fc:	0084303a 	nor	r2,zero,r2
 403d200:	1007883a 	mov	r3,r2
 403d204:	e0bffc17 	ldw	r2,-16(fp)
 403d208:	10c0028d 	sth	r3,10(r2)
         IN_PROFILER(PF_IP, PF_EXIT);
#ifdef RF_SIMULATION
         if(rfsim_routing)
            return(rfsim_send(p, firsthop));
#endif   /* RF_SIMULATION */
         return(ip2mac(p, firsthop));
 403d20c:	e17ffd17 	ldw	r5,-12(fp)
 403d210:	e13ffe17 	ldw	r4,-8(fp)
 403d214:	401e7a00 	call	401e7a0 <ip2mac>
 403d218:	e0bfff15 	stw	r2,-4(fp)
 403d21c:	00004706 	br	403d33c <ip_rcv_phase2+0x5f4>
#if defined (IP_MULTICAST) || defined (IP_ROUTING)
ours:
#endif

   /* Test for fragment: */
   tempsum = htons(pip->ip_flgs_foff); /* borrow cksum variable */
 403d220:	e0bffc17 	ldw	r2,-16(fp)
 403d224:	1080018b 	ldhu	r2,6(r2)
 403d228:	10bfffcc 	andi	r2,r2,65535
 403d22c:	1004d23a 	srli	r2,r2,8
 403d230:	10803fcc 	andi	r2,r2,255
 403d234:	1009883a 	mov	r4,r2
 403d238:	e0bffc17 	ldw	r2,-16(fp)
 403d23c:	1080018b 	ldhu	r2,6(r2)
 403d240:	10bfffcc 	andi	r2,r2,65535
 403d244:	1004923a 	slli	r2,r2,8
 403d248:	1007883a 	mov	r3,r2
 403d24c:	00bfc004 	movi	r2,-256
 403d250:	1884703a 	and	r2,r3,r2
 403d254:	2084b03a 	or	r2,r4,r2
 403d258:	e0bffa0d 	sth	r2,-24(fp)
   if ((tempsum & IP_FLG_MF) ||  /* IP flag for "More Fragments" set? */
 403d25c:	e0bffa0b 	ldhu	r2,-24(fp)
 403d260:	1088000c 	andi	r2,r2,8192
 403d264:	1004c03a 	cmpne	r2,r2,zero
 403d268:	1000061e 	bne	r2,zero,403d284 <ip_rcv_phase2+0x53c>
 403d26c:	e0fffa0b 	ldhu	r3,-24(fp)
 403d270:	00bffff4 	movhi	r2,65535
 403d274:	1087ffc4 	addi	r2,r2,8191
 403d278:	1884703a 	and	r2,r3,r2
 403d27c:	1005003a 	cmpeq	r2,r2,zero
 403d280:	10002b1e 	bne	r2,zero,403d330 <ip_rcv_phase2+0x5e8>
       (tempsum & ~IP_FLG_MASK))  /* or offset to last frag? */
   {
#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403d284:	00810174 	movhi	r2,1029
 403d288:	1081bf04 	addi	r2,r2,1788
 403d28c:	10800017 	ldw	r2,0(r2)
 403d290:	1081000c 	andi	r2,r2,1024
 403d294:	1005003a 	cmpeq	r2,r2,zero
 403d298:	10001a1e 	bne	r2,zero,403d304 <ip_rcv_phase2+0x5bc>
 403d29c:	00810174 	movhi	r2,1029
 403d2a0:	1081bf04 	addi	r2,r2,1788
 403d2a4:	10800017 	ldw	r2,0(r2)
 403d2a8:	1080800c 	andi	r2,r2,512
 403d2ac:	1005003a 	cmpeq	r2,r2,zero
 403d2b0:	1000141e 	bne	r2,zero,403d304 <ip_rcv_phase2+0x5bc>
      {
         dprintf("ip_rcv: fragment from %u.%u.%u.%u\n", 
 403d2b4:	e0bffc17 	ldw	r2,-16(fp)
 403d2b8:	10800317 	ldw	r2,12(r2)
 403d2bc:	11403fcc 	andi	r5,r2,255
 403d2c0:	e0bffc17 	ldw	r2,-16(fp)
 403d2c4:	10800317 	ldw	r2,12(r2)
 403d2c8:	1004d23a 	srli	r2,r2,8
 403d2cc:	11803fcc 	andi	r6,r2,255
 403d2d0:	e0bffc17 	ldw	r2,-16(fp)
 403d2d4:	10800317 	ldw	r2,12(r2)
 403d2d8:	1004d43a 	srli	r2,r2,16
 403d2dc:	11c03fcc 	andi	r7,r2,255
 403d2e0:	e0bffc17 	ldw	r2,-16(fp)
 403d2e4:	10800317 	ldw	r2,12(r2)
 403d2e8:	1004d63a 	srli	r2,r2,24
 403d2ec:	d8800015 	stw	r2,0(sp)
 403d2f0:	01010174 	movhi	r4,1029
 403d2f4:	21302404 	addi	r4,r4,-16240
 403d2f8:	400207c0 	call	400207c <printf>
          PUSH_IPADDR(pip->ip_src));
         ip_dump(p);
 403d2fc:	e13ffe17 	ldw	r4,-8(fp)
 403d300:	403a55c0 	call	403a55c <ip_dump>
      }
#endif
      ip_mib.ipReasmReqds++;     /* got a reassemble request; ie a frag */
 403d304:	008101b4 	movhi	r2,1030
 403d308:	10a44e04 	addi	r2,r2,-28360
 403d30c:	10800d17 	ldw	r2,52(r2)
 403d310:	10c00044 	addi	r3,r2,1
 403d314:	008101b4 	movhi	r2,1030
 403d318:	10a44e04 	addi	r2,r2,-28360
 403d31c:	10c00d15 	stw	r3,52(r2)
#ifdef IP_FRAGMENTS
      return(ip_reassm(p));
 403d320:	e13ffe17 	ldw	r4,-8(fp)
 403d324:	403b2340 	call	403b234 <ip_reassm>
 403d328:	e0bfff15 	stw	r2,-4(fp)
 403d32c:	00000306 	br	403d33c <ip_rcv_phase2+0x5f4>
   {
      return ENP_LOGIC;
   }
#endif /* IPSEC */

   return(ip_demux(p));    /* demux to correct to upper layer */
 403d330:	e13ffe17 	ldw	r4,-8(fp)
 403d334:	403d3540 	call	403d354 <ip_demux>
 403d338:	e0bfff15 	stw	r2,-4(fp)
 403d33c:	e0bfff17 	ldw	r2,-4(fp)
}
 403d340:	e037883a 	mov	sp,fp
 403d344:	dfc00117 	ldw	ra,4(sp)
 403d348:	df000017 	ldw	fp,0(sp)
 403d34c:	dec00204 	addi	sp,sp,8
 403d350:	f800283a 	ret

0403d354 <ip_demux>:
 * RETURNS: Same return values as ip_rcv(). 
 */

int
ip_demux(PACKET p)
{
 403d354:	defff704 	addi	sp,sp,-36
 403d358:	dfc00815 	stw	ra,32(sp)
 403d35c:	df000715 	stw	fp,28(sp)
 403d360:	df000704 	addi	fp,sp,28
 403d364:	e13ffd15 	stw	r4,-12(fp)
   int   err;

   /* The packet is verified; the header is correct. Now we have
    * to demultiplex it among our internet connections.
    */
   pip = (struct ip *)(p->nb_prot);
 403d368:	e0bffd17 	ldw	r2,-12(fp)
 403d36c:	10800317 	ldw	r2,12(r2)
 403d370:	e0bffc15 	stw	r2,-16(fp)

#ifdef NPDEBUG
   /* make sure the caller set p->nb_prot */
   if(pip->ip_ver_ihl != 0x45)
 403d374:	e0bffc17 	ldw	r2,-16(fp)
 403d378:	10800003 	ldbu	r2,0(r2)
 403d37c:	10803fcc 	andi	r2,r2,255
 403d380:	10801160 	cmpeqi	r2,r2,69
 403d384:	1000131e 	bne	r2,zero,403d3d4 <ip_demux+0x80>
   {
      if((pip->ip_ver_ihl < 0x45) ||
 403d388:	e0bffc17 	ldw	r2,-16(fp)
 403d38c:	10800003 	ldbu	r2,0(r2)
 403d390:	10803fcc 	andi	r2,r2,255
 403d394:	10801170 	cmpltui	r2,r2,69
 403d398:	1000051e 	bne	r2,zero,403d3b0 <ip_demux+0x5c>
 403d39c:	e0bffc17 	ldw	r2,-16(fp)
 403d3a0:	10800003 	ldbu	r2,0(r2)
 403d3a4:	10803fcc 	andi	r2,r2,255
 403d3a8:	10801230 	cmpltui	r2,r2,72
 403d3ac:	1000091e 	bne	r2,zero,403d3d4 <ip_demux+0x80>
         (pip->ip_ver_ihl > 0x47))
      {
         dprintf("ip_demux: bad IP type 0x%x\n", pip->ip_ver_ihl);
 403d3b0:	e0bffc17 	ldw	r2,-16(fp)
 403d3b4:	10800003 	ldbu	r2,0(r2)
 403d3b8:	11403fcc 	andi	r5,r2,255
 403d3bc:	01010174 	movhi	r4,1029
 403d3c0:	21302d04 	addi	r4,r4,-16204
 403d3c4:	400207c0 	call	400207c <printf>
         return ENP_LOGIC;
 403d3c8:	00bffd44 	movi	r2,-11
 403d3cc:	e0bfff15 	stw	r2,-4(fp)
 403d3d0:	0000e606 	br	403d76c <ip_demux+0x418>

   /* for profiling purposes count the upper layers (UDP, ICMP) in the IP
    * profile bucket. TCP will insert it's own nested profile calls 
    */
   IN_PROFILER(PF_IP, PF_ENTRY);
   p->fhost = pip->ip_src;
 403d3d4:	e0bffc17 	ldw	r2,-16(fp)
 403d3d8:	10c00317 	ldw	r3,12(r2)
 403d3dc:	e0bffd17 	ldw	r2,-12(fp)
 403d3e0:	10c00715 	stw	r3,28(r2)

#ifdef NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403d3e4:	00810174 	movhi	r2,1029
 403d3e8:	1081bf04 	addi	r2,r2,1788
 403d3ec:	10800017 	ldw	r2,0(r2)
 403d3f0:	1081000c 	andi	r2,r2,1024
 403d3f4:	1005003a 	cmpeq	r2,r2,zero
 403d3f8:	1000241e 	bne	r2,zero,403d48c <ip_demux+0x138>
 403d3fc:	00810174 	movhi	r2,1029
 403d400:	1081bf04 	addi	r2,r2,1788
 403d404:	10800017 	ldw	r2,0(r2)
 403d408:	1080800c 	andi	r2,r2,512
 403d40c:	1005003a 	cmpeq	r2,r2,zero
 403d410:	10001e1e 	bne	r2,zero,403d48c <ip_demux+0x138>
   {
      dprintf("ip_demux: pkt prot %u from %u.%u.%u.%u\n",
 403d414:	e0bffc17 	ldw	r2,-16(fp)
 403d418:	10800243 	ldbu	r2,9(r2)
 403d41c:	11403fcc 	andi	r5,r2,255
 403d420:	e0bffc17 	ldw	r2,-16(fp)
 403d424:	10800317 	ldw	r2,12(r2)
 403d428:	11803fcc 	andi	r6,r2,255
 403d42c:	e0bffc17 	ldw	r2,-16(fp)
 403d430:	10800317 	ldw	r2,12(r2)
 403d434:	1004d23a 	srli	r2,r2,8
 403d438:	11c03fcc 	andi	r7,r2,255
 403d43c:	e0bffc17 	ldw	r2,-16(fp)
 403d440:	10800317 	ldw	r2,12(r2)
 403d444:	1004d43a 	srli	r2,r2,16
 403d448:	10c03fcc 	andi	r3,r2,255
 403d44c:	e0bffc17 	ldw	r2,-16(fp)
 403d450:	10800317 	ldw	r2,12(r2)
 403d454:	1004d63a 	srli	r2,r2,24
 403d458:	d8c00015 	stw	r3,0(sp)
 403d45c:	d8800115 	stw	r2,4(sp)
 403d460:	01010174 	movhi	r4,1029
 403d464:	21303404 	addi	r4,r4,-16176
 403d468:	400207c0 	call	400207c <printf>
       pip->ip_prot, PUSH_IPADDR(pip->ip_src));
      if (NDEBUG & DUMP) ip_dump(p);
 403d46c:	00810174 	movhi	r2,1029
 403d470:	1081bf04 	addi	r2,r2,1788
 403d474:	10800017 	ldw	r2,0(r2)
 403d478:	1080008c 	andi	r2,r2,2
 403d47c:	1005003a 	cmpeq	r2,r2,zero
 403d480:	1000021e 	bne	r2,zero,403d48c <ip_demux+0x138>
 403d484:	e13ffd17 	ldw	r4,-12(fp)
 403d488:	403a55c0 	call	403a55c <ip_dump>
   }
#endif

   switch (pip->ip_prot)
 403d48c:	e0bffc17 	ldw	r2,-16(fp)
 403d490:	10800243 	ldbu	r2,9(r2)
 403d494:	10803fcc 	andi	r2,r2,255
 403d498:	e0bffe15 	stw	r2,-8(fp)
 403d49c:	e0fffe17 	ldw	r3,-8(fp)
 403d4a0:	188000a0 	cmpeqi	r2,r3,2
 403d4a4:	1000241e 	bne	r2,zero,403d538 <ip_demux+0x1e4>
 403d4a8:	e0fffe17 	ldw	r3,-8(fp)
 403d4ac:	188000c8 	cmpgei	r2,r3,3
 403d4b0:	1000041e 	bne	r2,zero,403d4c4 <ip_demux+0x170>
 403d4b4:	e0fffe17 	ldw	r3,-8(fp)
 403d4b8:	18800060 	cmpeqi	r2,r3,1
 403d4bc:	1000131e 	bne	r2,zero,403d50c <ip_demux+0x1b8>
 403d4c0:	00003306 	br	403d590 <ip_demux+0x23c>
 403d4c4:	e0fffe17 	ldw	r3,-8(fp)
 403d4c8:	188001a0 	cmpeqi	r2,r3,6
 403d4cc:	1000251e 	bne	r2,zero,403d564 <ip_demux+0x210>
 403d4d0:	e0fffe17 	ldw	r3,-8(fp)
 403d4d4:	18800460 	cmpeqi	r2,r3,17
 403d4d8:	1000011e 	bne	r2,zero,403d4e0 <ip_demux+0x18c>
 403d4dc:	00002c06 	br	403d590 <ip_demux+0x23c>
   {
   case UDP_PROT:
      ip_mib.ipInDelivers++;
 403d4e0:	008101b4 	movhi	r2,1030
 403d4e4:	10a44e04 	addi	r2,r2,-28360
 403d4e8:	10800817 	ldw	r2,32(r2)
 403d4ec:	10c00044 	addi	r3,r2,1
 403d4f0:	008101b4 	movhi	r2,1030
 403d4f4:	10a44e04 	addi	r2,r2,-28360
 403d4f8:	10c00815 	stw	r3,32(r2)
      err = udpdemux(p);
 403d4fc:	e13ffd17 	ldw	r4,-12(fp)
 403d500:	403e7980 	call	403e798 <udpdemux>
 403d504:	e0bffb15 	stw	r2,-20(fp)
      break;
 403d508:	00002b06 	br	403d5b8 <ip_demux+0x264>
   case ICMP_PROT:
      ip_mib.ipInDelivers++;
 403d50c:	008101b4 	movhi	r2,1030
 403d510:	10a44e04 	addi	r2,r2,-28360
 403d514:	10800817 	ldw	r2,32(r2)
 403d518:	10c00044 	addi	r3,r2,1
 403d51c:	008101b4 	movhi	r2,1030
 403d520:	10a44e04 	addi	r2,r2,-28360
 403d524:	10c00815 	stw	r3,32(r2)
      err = icmprcv(p);
 403d528:	e13ffd17 	ldw	r4,-12(fp)
 403d52c:	4044b300 	call	4044b30 <icmprcv>
 403d530:	e0bffb15 	stw	r2,-20(fp)
      break;
 403d534:	00002006 	br	403d5b8 <ip_demux+0x264>
#if defined (IP_MULTICAST) && (defined (IGMP_V1) || defined (IGMP_V2))
   case IGMP_PROT:
      ip_mib.ipInDelivers++;
 403d538:	008101b4 	movhi	r2,1030
 403d53c:	10a44e04 	addi	r2,r2,-28360
 403d540:	10800817 	ldw	r2,32(r2)
 403d544:	10c00044 	addi	r3,r2,1
 403d548:	008101b4 	movhi	r2,1030
 403d54c:	10a44e04 	addi	r2,r2,-28360
 403d550:	10c00815 	stw	r3,32(r2)
      err = igmp_input(p);
 403d554:	e13ffd17 	ldw	r4,-12(fp)
 403d558:	401eea40 	call	401eea4 <igmp_input>
 403d55c:	e0bffb15 	stw	r2,-20(fp)
      break;
 403d560:	00001506 	br	403d5b8 <ip_demux+0x264>
#endif   /* IP_MULTICAST and (IGMPv1 or IGMPv2) */
#ifdef INCLUDE_TCP
   case TCP_PROT:
      ip_mib.ipInDelivers++;
 403d564:	008101b4 	movhi	r2,1030
 403d568:	10a44e04 	addi	r2,r2,-28360
 403d56c:	10800817 	ldw	r2,32(r2)
 403d570:	10c00044 	addi	r3,r2,1
 403d574:	008101b4 	movhi	r2,1030
 403d578:	10a44e04 	addi	r2,r2,-28360
 403d57c:	10c00815 	stw	r3,32(r2)
      err = tcp_rcv(p);
 403d580:	e13ffd17 	ldw	r4,-12(fp)
 403d584:	40274d80 	call	40274d8 <tcp_rcv>
 403d588:	e0bffb15 	stw	r2,-20(fp)
      break;
 403d58c:	00000a06 	br	403d5b8 <ip_demux+0x264>
      err = v6t_rcv(p);
      break;
#endif /* IPV6_TUNNEL */
   default: /* unknown upper protocol */
#ifdef IP_RAW
      ip_mib.ipInDelivers++;
 403d590:	008101b4 	movhi	r2,1030
 403d594:	10a44e04 	addi	r2,r2,-28360
 403d598:	10800817 	ldw	r2,32(r2)
 403d59c:	10c00044 	addi	r3,r2,1
 403d5a0:	008101b4 	movhi	r2,1030
 403d5a4:	10a44e04 	addi	r2,r2,-28360
 403d5a8:	10c00815 	stw	r3,32(r2)
      err = ip_raw_input(p);
 403d5ac:	e13ffd17 	ldw	r4,-12(fp)
 403d5b0:	403dd080 	call	403dd08 <ip_raw_input>
 403d5b4:	e0bffb15 	stw	r2,-20(fp)
#endif /* IP_RAW */
   }

   IN_PROFILER(PF_IP, PF_EXIT);

   if(err != ENP_PARAM)
 403d5b8:	e0bffb17 	ldw	r2,-20(fp)
 403d5bc:	10bffda0 	cmpeqi	r2,r2,-10
 403d5c0:	1000031e 	bne	r2,zero,403d5d0 <ip_demux+0x27c>
   {
      return err;
 403d5c4:	e0bffb17 	ldw	r2,-20(fp)
 403d5c8:	e0bfff15 	stw	r2,-4(fp)
 403d5cc:	00006706 	br	403d76c <ip_demux+0x418>

#ifdef FULL_ICMP
   /* nobody's listening for this packet. Unless it was broadcast or 
    * multicast, send a destination unreachable. 
    */
   if ((pip->ip_dest != 0xffffffffL) &&   /* Physical cable broadcast addr*/
 403d5d0:	e0bffc17 	ldw	r2,-16(fp)
 403d5d4:	10800417 	ldw	r2,16(r2)
 403d5d8:	10bfffe0 	cmpeqi	r2,r2,-1
 403d5dc:	1000541e 	bne	r2,zero,403d730 <ip_demux+0x3dc>
 403d5e0:	e0bffc17 	ldw	r2,-16(fp)
 403d5e4:	10800417 	ldw	r2,16(r2)
 403d5e8:	1004d63a 	srli	r2,r2,24
 403d5ec:	10c03fcc 	andi	r3,r2,255
 403d5f0:	e0bffc17 	ldw	r2,-16(fp)
 403d5f4:	10800417 	ldw	r2,16(r2)
 403d5f8:	1004d23a 	srli	r2,r2,8
 403d5fc:	10bfc00c 	andi	r2,r2,65280
 403d600:	1886b03a 	or	r3,r3,r2
 403d604:	e0bffc17 	ldw	r2,-16(fp)
 403d608:	10800417 	ldw	r2,16(r2)
 403d60c:	10bfc00c 	andi	r2,r2,65280
 403d610:	1004923a 	slli	r2,r2,8
 403d614:	1886b03a 	or	r3,r3,r2
 403d618:	e0bffc17 	ldw	r2,-16(fp)
 403d61c:	10800417 	ldw	r2,16(r2)
 403d620:	10803fcc 	andi	r2,r2,255
 403d624:	1004963a 	slli	r2,r2,24
 403d628:	1884b03a 	or	r2,r3,r2
 403d62c:	10fc002c 	andhi	r3,r2,61440
 403d630:	00b80034 	movhi	r2,57344
 403d634:	18803e26 	beq	r3,r2,403d730 <ip_demux+0x3dc>
 403d638:	e0bffc17 	ldw	r2,-16(fp)
 403d63c:	10c00417 	ldw	r3,16(r2)
 403d640:	e0bffd17 	ldw	r2,-12(fp)
 403d644:	10800617 	ldw	r2,24(r2)
 403d648:	10800e17 	ldw	r2,56(r2)
 403d64c:	18803826 	beq	r3,r2,403d730 <ip_demux+0x3dc>
 403d650:	e0bffc17 	ldw	r2,-16(fp)
 403d654:	10c00417 	ldw	r3,16(r2)
 403d658:	e0bffd17 	ldw	r2,-12(fp)
 403d65c:	10800617 	ldw	r2,24(r2)
 403d660:	10800f17 	ldw	r2,60(r2)
 403d664:	18803226 	beq	r3,r2,403d730 <ip_demux+0x3dc>
 403d668:	e0bffc17 	ldw	r2,-16(fp)
 403d66c:	10c00417 	ldw	r3,16(r2)
 403d670:	e0bffd17 	ldw	r2,-12(fp)
 403d674:	10800617 	ldw	r2,24(r2)
 403d678:	10801017 	ldw	r2,64(r2)
 403d67c:	18802c26 	beq	r3,r2,403d730 <ip_demux+0x3dc>
 403d680:	e0bffd17 	ldw	r2,-12(fp)
 403d684:	10800617 	ldw	r2,24(r2)
 403d688:	10c00a17 	ldw	r3,40(r2)
 403d68c:	e0bffd17 	ldw	r2,-12(fp)
 403d690:	10800617 	ldw	r2,24(r2)
 403d694:	10801017 	ldw	r2,64(r2)
 403d698:	18802526 	beq	r3,r2,403d730 <ip_demux+0x3dc>
       (pip->ip_dest != p->net->n_subnetbr) &&   /* Our subnet broadcast */
       (p->net->n_ipaddr ^ p->net->n_subnetbr))  /* Know our own host address? */
   {

#ifdef NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 403d69c:	00810174 	movhi	r2,1029
 403d6a0:	1081bf04 	addi	r2,r2,1788
 403d6a4:	10800017 	ldw	r2,0(r2)
 403d6a8:	1081000c 	andi	r2,r2,1024
 403d6ac:	1005003a 	cmpeq	r2,r2,zero
 403d6b0:	1000141e 	bne	r2,zero,403d704 <ip_demux+0x3b0>
 403d6b4:	00810174 	movhi	r2,1029
 403d6b8:	1081bf04 	addi	r2,r2,1788
 403d6bc:	10800017 	ldw	r2,0(r2)
 403d6c0:	1080800c 	andi	r2,r2,512
 403d6c4:	1005003a 	cmpeq	r2,r2,zero
 403d6c8:	10000e1e 	bne	r2,zero,403d704 <ip_demux+0x3b0>
      {
         dprintf("ip_demux: unhandled prot %u\n", pip->ip_prot);
 403d6cc:	e0bffc17 	ldw	r2,-16(fp)
 403d6d0:	10800243 	ldbu	r2,9(r2)
 403d6d4:	11403fcc 	andi	r5,r2,255
 403d6d8:	01010174 	movhi	r4,1029
 403d6dc:	21303e04 	addi	r4,r4,-16136
 403d6e0:	400207c0 	call	400207c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 403d6e4:	00810174 	movhi	r2,1029
 403d6e8:	1081bf04 	addi	r2,r2,1788
 403d6ec:	10800017 	ldw	r2,0(r2)
 403d6f0:	1080008c 	andi	r2,r2,2
 403d6f4:	1005003a 	cmpeq	r2,r2,zero
 403d6f8:	1000021e 	bne	r2,zero,403d704 <ip_demux+0x3b0>
 403d6fc:	e13ffd17 	ldw	r4,-12(fp)
 403d700:	403a55c0 	call	403a55c <ip_dump>
      }
#endif   /* NPDEBUG */
      icmp_destun(pip->ip_src, p->net->n_ipaddr, pip, DSTPROT, p->net);
 403d704:	e0bffc17 	ldw	r2,-16(fp)
 403d708:	11000317 	ldw	r4,12(r2)
 403d70c:	e0bffd17 	ldw	r2,-12(fp)
 403d710:	10800617 	ldw	r2,24(r2)
 403d714:	11400a17 	ldw	r5,40(r2)
 403d718:	e0bffd17 	ldw	r2,-12(fp)
 403d71c:	10800617 	ldw	r2,24(r2)
 403d720:	d8800015 	stw	r2,0(sp)
 403d724:	e1bffc17 	ldw	r6,-16(fp)
 403d728:	01c00084 	movi	r7,2
 403d72c:	40457640 	call	4045764 <icmp_destun>
   }
#endif   /* FULL_ICMP */

   ip_mib.ipUnknownProtos++;
 403d730:	008101b4 	movhi	r2,1030
 403d734:	10a44e04 	addi	r2,r2,-28360
 403d738:	10800617 	ldw	r2,24(r2)
 403d73c:	10c00044 	addi	r3,r2,1
 403d740:	008101b4 	movhi	r2,1030
 403d744:	10a44e04 	addi	r2,r2,-28360
 403d748:	10c00615 	stw	r3,24(r2)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403d74c:	01000084 	movi	r4,2
 403d750:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 403d754:	e13ffd17 	ldw	r4,-12(fp)
 403d758:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403d75c:	01000084 	movi	r4,2
 403d760:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return ENP_NOT_MINE;
 403d764:	00c00084 	movi	r3,2
 403d768:	e0ffff15 	stw	r3,-4(fp)
 403d76c:	e0bfff17 	ldw	r2,-4(fp)
}
 403d770:	e037883a 	mov	sp,fp
 403d774:	dfc00117 	ldw	ra,4(sp)
 403d778:	df000017 	ldw	fp,0(sp)
 403d77c:	dec00204 	addi	sp,sp,8
 403d780:	f800283a 	ret

0403d784 <in_addmulti>:
 * RETURNS: 
 */

struct in_multi * 
in_addmulti(ip_addr *ap, struct net *netp, int addrtype)
{
 403d784:	defff804 	addi	sp,sp,-32
 403d788:	dfc00715 	stw	ra,28(sp)
 403d78c:	df000615 	stw	fp,24(sp)
 403d790:	df000604 	addi	fp,sp,24
 403d794:	e13ffc15 	stw	r4,-16(fp)
 403d798:	e17ffd15 	stw	r5,-12(fp)
 403d79c:	e1bffe15 	stw	r6,-8(fp)
   struct in_multi *inm = (struct in_multi *)NULL;
 403d7a0:	e03ffb15 	stw	zero,-20(fp)
   int error;

   /* check for good addr. */
   if ((ap == (ip_addr *)NULL) || (*ap == 0))
 403d7a4:	e0bffc17 	ldw	r2,-16(fp)
 403d7a8:	1005003a 	cmpeq	r2,r2,zero
 403d7ac:	1000041e 	bne	r2,zero,403d7c0 <in_addmulti+0x3c>
 403d7b0:	e0bffc17 	ldw	r2,-16(fp)
 403d7b4:	10800017 	ldw	r2,0(r2)
 403d7b8:	1004c03a 	cmpne	r2,r2,zero
 403d7bc:	1000021e 	bne	r2,zero,403d7c8 <in_addmulti+0x44>
      return ((struct in_multi *)NULL);  
 403d7c0:	e03fff15 	stw	zero,-4(fp)
 403d7c4:	00004306 	br	403d8d4 <in_addmulti+0x150>

   ENTER_CRIT_SECTION(netp);
 403d7c8:	4025db40 	call	4025db4 <irq_Mask>
#ifdef IP_V6
   if(addrtype == 6)
      inm = v6_lookup_mcast((ip6_addr*)ap, netp);
#endif
#ifdef IP_V4
   if(addrtype != 6)
 403d7cc:	e0bffe17 	ldw	r2,-8(fp)
 403d7d0:	108001a0 	cmpeqi	r2,r2,6
 403d7d4:	1000051e 	bne	r2,zero,403d7ec <in_addmulti+0x68>
      inm = lookup_mcast(*ap, netp);
 403d7d8:	e0bffc17 	ldw	r2,-16(fp)
 403d7dc:	11000017 	ldw	r4,0(r2)
 403d7e0:	e17ffd17 	ldw	r5,-12(fp)
 403d7e4:	403da040 	call	403da04 <lookup_mcast>
 403d7e8:	e0bffb15 	stw	r2,-20(fp)
#endif

   if (inm != (struct in_multi *)NULL) 
 403d7ec:	e0bffb17 	ldw	r2,-20(fp)
 403d7f0:	1005003a 	cmpeq	r2,r2,zero
 403d7f4:	1000061e 	bne	r2,zero,403d810 <in_addmulti+0x8c>
   {
      /* Found it; just increment the reference count. */
      ++inm->inm_refcount;
 403d7f8:	e0bffb17 	ldw	r2,-20(fp)
 403d7fc:	10800217 	ldw	r2,8(r2)
 403d800:	10c00044 	addi	r3,r2,1
 403d804:	e0bffb17 	ldw	r2,-20(fp)
 403d808:	10c00215 	stw	r3,8(r2)
 403d80c:	00002e06 	br	403d8c8 <in_addmulti+0x144>
   {
      /*
       * New address; allocate a new multicast record
       * and link it into the interface's multicast list.
       */
      inm = (struct in_multi *)INM_ALLOC(sizeof(*inm));
 403d810:	01000604 	movi	r4,24
 403d814:	40265f80 	call	40265f8 <npalloc>
 403d818:	e0bffb15 	stw	r2,-20(fp)

      if (inm == (struct in_multi *)NULL) 
 403d81c:	e0bffb17 	ldw	r2,-20(fp)
 403d820:	1004c03a 	cmpne	r2,r2,zero
 403d824:	1000031e 	bne	r2,zero,403d834 <in_addmulti+0xb0>
      {
         EXIT_CRIT_SECTION(netp);
 403d828:	4025e100 	call	4025e10 <irq_Unmask>
         return ((struct in_multi *)NULL);
 403d82c:	e03fff15 	stw	zero,-4(fp)
 403d830:	00002806 	br	403d8d4 <in_addmulti+0x150>
#ifdef IP_V6
      if(addrtype == 6)
         IP6CPY(&inm->ip6addr, (struct in6_addr *)ap);
#endif
#ifdef IP_V4
      if(addrtype != 6)
 403d834:	e0bffe17 	ldw	r2,-8(fp)
 403d838:	108001a0 	cmpeqi	r2,r2,6
 403d83c:	1000041e 	bne	r2,zero,403d850 <in_addmulti+0xcc>
         inm->inm_addr = *ap;
 403d840:	e0bffc17 	ldw	r2,-16(fp)
 403d844:	10c00017 	ldw	r3,0(r2)
 403d848:	e0bffb17 	ldw	r2,-20(fp)
 403d84c:	10c00015 	stw	r3,0(r2)
#endif
      inm->inm_netp = netp;
 403d850:	e0fffb17 	ldw	r3,-20(fp)
 403d854:	e0bffd17 	ldw	r2,-12(fp)
 403d858:	18800115 	stw	r2,4(r3)
      inm->inm_refcount = 1;
 403d85c:	e0fffb17 	ldw	r3,-20(fp)
 403d860:	00800044 	movi	r2,1
 403d864:	18800215 	stw	r2,8(r3)
      inm->inm_next = netp->mc_list;
 403d868:	e0bffd17 	ldw	r2,-12(fp)
 403d86c:	10c02c17 	ldw	r3,176(r2)
 403d870:	e0bffb17 	ldw	r2,-20(fp)
 403d874:	10c00515 	stw	r3,20(r2)
      netp->mc_list = inm;
 403d878:	e0fffd17 	ldw	r3,-12(fp)
 403d87c:	e0bffb17 	ldw	r2,-20(fp)
 403d880:	18802c15 	stw	r2,176(r3)
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the new address.
       */
      if(netp->n_mcastlist)
 403d884:	e0bffd17 	ldw	r2,-12(fp)
 403d888:	10802b17 	ldw	r2,172(r2)
 403d88c:	1005003a 	cmpeq	r2,r2,zero
 403d890:	1000061e 	bne	r2,zero,403d8ac <in_addmulti+0x128>
         error = netp->n_mcastlist(inm);
 403d894:	e0bffd17 	ldw	r2,-12(fp)
 403d898:	10802b17 	ldw	r2,172(r2)
 403d89c:	e13ffb17 	ldw	r4,-20(fp)
 403d8a0:	103ee83a 	callr	r2
 403d8a4:	e0bffa15 	stw	r2,-24(fp)
 403d8a8:	00000106 	br	403d8b0 <in_addmulti+0x12c>
      else
         error = 0;
 403d8ac:	e03ffa15 	stw	zero,-24(fp)
#if defined (IGMP_V1) || defined (IGMP_V2)
      /*
       * Let IGMP know that we have joined a new IP multicast group.
       */
      if (inm->inm_addr) igmp_joingroup(inm);
 403d8b0:	e0bffb17 	ldw	r2,-20(fp)
 403d8b4:	10800017 	ldw	r2,0(r2)
 403d8b8:	1005003a 	cmpeq	r2,r2,zero
 403d8bc:	1000021e 	bne	r2,zero,403d8c8 <in_addmulti+0x144>
 403d8c0:	e13ffb17 	ldw	r4,-20(fp)
 403d8c4:	401f3dc0 	call	401f3dc <igmp_joingroup>
#endif      
   }

   EXIT_CRIT_SECTION(netp);
 403d8c8:	4025e100 	call	4025e10 <irq_Unmask>
   USE_ARG(error);

   return (inm);
 403d8cc:	e0bffb17 	ldw	r2,-20(fp)
 403d8d0:	e0bfff15 	stw	r2,-4(fp)
 403d8d4:	e0bfff17 	ldw	r2,-4(fp)
}
 403d8d8:	e037883a 	mov	sp,fp
 403d8dc:	dfc00117 	ldw	ra,4(sp)
 403d8e0:	df000017 	ldw	fp,0(sp)
 403d8e4:	dec00204 	addi	sp,sp,8
 403d8e8:	f800283a 	ret

0403d8ec <in_delmulti>:
 * RETURNS: 
 */

void
in_delmulti(struct in_multi * inm)
{
 403d8ec:	defffa04 	addi	sp,sp,-24
 403d8f0:	dfc00515 	stw	ra,20(sp)
 403d8f4:	df000415 	stw	fp,16(sp)
 403d8f8:	df000404 	addi	fp,sp,16
 403d8fc:	e13fff15 	stw	r4,-4(fp)
   struct in_multi * p;
   NET         netp = inm->inm_netp;
 403d900:	e0bfff17 	ldw	r2,-4(fp)
 403d904:	10800117 	ldw	r2,4(r2)
 403d908:	e0bffd15 	stw	r2,-12(fp)
   int error;

   ENTER_CRIT_SECTION(inm);
 403d90c:	4025db40 	call	4025db4 <irq_Mask>
   if (--inm->inm_refcount == 0) 
 403d910:	e0bfff17 	ldw	r2,-4(fp)
 403d914:	10800217 	ldw	r2,8(r2)
 403d918:	10ffffc4 	addi	r3,r2,-1
 403d91c:	e0bfff17 	ldw	r2,-4(fp)
 403d920:	10c00215 	stw	r3,8(r2)
 403d924:	e0bfff17 	ldw	r2,-4(fp)
 403d928:	10800217 	ldw	r2,8(r2)
 403d92c:	1004c03a 	cmpne	r2,r2,zero
 403d930:	10002e1e 	bne	r2,zero,403d9ec <in_delmulti+0x100>
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 403d934:	e0bffd17 	ldw	r2,-12(fp)
 403d938:	10802c17 	ldw	r2,176(r2)
 403d93c:	e0bffe15 	stw	r2,-8(fp)
 403d940:	00001406 	br	403d994 <in_delmulti+0xa8>
      {
         if(p == inm)   /* inm is first in mc_list */
 403d944:	e0fffe17 	ldw	r3,-8(fp)
 403d948:	e0bfff17 	ldw	r2,-4(fp)
 403d94c:	1880051e 	bne	r3,r2,403d964 <in_delmulti+0x78>
         {
            netp->mc_list = p->inm_next;  /* unlink */
 403d950:	e0bffe17 	ldw	r2,-8(fp)
 403d954:	10c00517 	ldw	r3,20(r2)
 403d958:	e0bffd17 	ldw	r2,-12(fp)
 403d95c:	10c02c15 	stw	r3,176(r2)
            break;
 403d960:	00000f06 	br	403d9a0 <in_delmulti+0xb4>
         }
         else if(p->inm_next == inm)   /* inm is next */
 403d964:	e0bffe17 	ldw	r2,-8(fp)
 403d968:	10c00517 	ldw	r3,20(r2)
 403d96c:	e0bfff17 	ldw	r2,-4(fp)
 403d970:	1880051e 	bne	r3,r2,403d988 <in_delmulti+0x9c>
         {
            p->inm_next = inm->inm_next;  /* unlink */
 403d974:	e0bfff17 	ldw	r2,-4(fp)
 403d978:	10c00517 	ldw	r3,20(r2)
 403d97c:	e0bffe17 	ldw	r2,-8(fp)
 403d980:	10c00515 	stw	r3,20(r2)
            break;
 403d984:	00000606 	br	403d9a0 <in_delmulti+0xb4>

   ENTER_CRIT_SECTION(inm);
   if (--inm->inm_refcount == 0) 
   {
      /* Unlink from list.  */
      for (p = netp->mc_list; p; p = p->inm_next)
 403d988:	e0bffe17 	ldw	r2,-8(fp)
 403d98c:	10800517 	ldw	r2,20(r2)
 403d990:	e0bffe15 	stw	r2,-8(fp)
 403d994:	e0bffe17 	ldw	r2,-8(fp)
 403d998:	1004c03a 	cmpne	r2,r2,zero
 403d99c:	103fe91e 	bne	r2,zero,403d944 <in_delmulti+0x58>
      /*
       * If net has a multicast address registration routine then ask
       * the network driver to update its multicast reception
       * filter appropriately for the deleted address.
       */
      if(netp->n_mcastlist)
 403d9a0:	e0bffd17 	ldw	r2,-12(fp)
 403d9a4:	10802b17 	ldw	r2,172(r2)
 403d9a8:	1005003a 	cmpeq	r2,r2,zero
 403d9ac:	1000061e 	bne	r2,zero,403d9c8 <in_delmulti+0xdc>
         error = netp->n_mcastlist(inm);
 403d9b0:	e0bffd17 	ldw	r2,-12(fp)
 403d9b4:	10802b17 	ldw	r2,172(r2)
 403d9b8:	e13fff17 	ldw	r4,-4(fp)
 403d9bc:	103ee83a 	callr	r2
 403d9c0:	e0bffc15 	stw	r2,-16(fp)
 403d9c4:	00000106 	br	403d9cc <in_delmulti+0xe0>
      else
         error = 0;
 403d9c8:	e03ffc15 	stw	zero,-16(fp)
#if defined (IGMP_V2)
      /*
       * No remaining claims to this record; let IGMP know that
       * we are leaving the multicast group.
       */
      if (inm->inm_addr) igmp_leavegroup(inm);
 403d9cc:	e0bfff17 	ldw	r2,-4(fp)
 403d9d0:	10800017 	ldw	r2,0(r2)
 403d9d4:	1005003a 	cmpeq	r2,r2,zero
 403d9d8:	1000021e 	bne	r2,zero,403d9e4 <in_delmulti+0xf8>
 403d9dc:	e13fff17 	ldw	r4,-4(fp)
 403d9e0:	401f6580 	call	401f658 <igmp_leavegroup>
#endif      

      IM_FREE(inm);
 403d9e4:	e13fff17 	ldw	r4,-4(fp)
 403d9e8:	40266ec0 	call	40266ec <npfree>
   }
   EXIT_CRIT_SECTION(inm);
 403d9ec:	4025e100 	call	4025e10 <irq_Unmask>
}
 403d9f0:	e037883a 	mov	sp,fp
 403d9f4:	dfc00117 	ldw	ra,4(sp)
 403d9f8:	df000017 	ldw	fp,0(sp)
 403d9fc:	dec00204 	addi	sp,sp,8
 403da00:	f800283a 	ret

0403da04 <lookup_mcast>:
 * RETURNS: pointer to mcast addr structure, or NULL if not found.
 */

struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
 403da04:	defffb04 	addi	sp,sp,-20
 403da08:	df000415 	stw	fp,16(sp)
 403da0c:	df000404 	addi	fp,sp,16
 403da10:	e13ffd15 	stw	r4,-12(fp)
 403da14:	e17ffe15 	stw	r5,-8(fp)
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 403da18:	e0bffe17 	ldw	r2,-8(fp)
 403da1c:	10802c17 	ldw	r2,176(r2)
 403da20:	e0bffc15 	stw	r2,-16(fp)
 403da24:	00000a06 	br	403da50 <lookup_mcast+0x4c>
   {
      if(imp->inm_addr == addr)
 403da28:	e0bffc17 	ldw	r2,-16(fp)
 403da2c:	10c00017 	ldw	r3,0(r2)
 403da30:	e0bffd17 	ldw	r2,-12(fp)
 403da34:	1880031e 	bne	r3,r2,403da44 <lookup_mcast+0x40>
         return imp;
 403da38:	e0bffc17 	ldw	r2,-16(fp)
 403da3c:	e0bfff15 	stw	r2,-4(fp)
 403da40:	00000706 	br	403da60 <lookup_mcast+0x5c>
struct in_multi *
lookup_mcast(ip_addr addr, NET netp)
{
   struct in_multi * imp;

   for (imp = netp->mc_list; imp; imp = imp->inm_next)
 403da44:	e0bffc17 	ldw	r2,-16(fp)
 403da48:	10800517 	ldw	r2,20(r2)
 403da4c:	e0bffc15 	stw	r2,-16(fp)
 403da50:	e0bffc17 	ldw	r2,-16(fp)
 403da54:	1004c03a 	cmpne	r2,r2,zero
 403da58:	103ff31e 	bne	r2,zero,403da28 <lookup_mcast+0x24>
   {
      if(imp->inm_addr == addr)
         return imp;
   }
   return NULL;   /* addr not found in mcast list */
 403da5c:	e03fff15 	stw	zero,-4(fp)
 403da60:	e0bfff17 	ldw	r2,-4(fp)
}
 403da64:	e037883a 	mov	sp,fp
 403da68:	df000017 	ldw	fp,0(sp)
 403da6c:	dec00104 	addi	sp,sp,4
 403da70:	f800283a 	ret

0403da74 <prep_ifaces>:
 * passed value. 
 */

int
prep_ifaces(int ifaces_found)
{
 403da74:	defffc04 	addi	sp,sp,-16
 403da78:	dfc00315 	stw	ra,12(sp)
 403da7c:	df000215 	stw	fp,8(sp)
 403da80:	df000204 	addi	fp,sp,8
 403da84:	e13ffe15 	stw	r4,-8(fp)
   if (port_prep)
 403da88:	d0a84817 	ldw	r2,-24288(gp)
 403da8c:	1005003a 	cmpeq	r2,r2,zero
 403da90:	1000041e 	bne	r2,zero,403daa4 <prep_ifaces+0x30>
      ifaces_found = port_prep(ifaces_found);
 403da94:	d0a84817 	ldw	r2,-24288(gp)
 403da98:	e13ffe17 	ldw	r4,-8(fp)
 403da9c:	103ee83a 	callr	r2
 403daa0:	e0bffe15 	stw	r2,-8(fp)

#ifdef MAC_LOOPBACK
   ifaces_found = prep_lb(ifaces_found);
#endif   /* MAC_LOOPBACK */

   ifNumber = ifaces_found;   /* set global interface counter */
 403daa4:	e0fffe17 	ldw	r3,-8(fp)
 403daa8:	00810174 	movhi	r2,1029
 403daac:	1081c004 	addi	r2,r2,1792
 403dab0:	10c00015 	stw	r3,0(r2)

   initmsg("prepped %u interface%s, initializing...\n", 
 403dab4:	e0bffe17 	ldw	r2,-8(fp)
 403dab8:	10800058 	cmpnei	r2,r2,1
 403dabc:	1000041e 	bne	r2,zero,403dad0 <prep_ifaces+0x5c>
 403dac0:	00810174 	movhi	r2,1029
 403dac4:	10b04604 	addi	r2,r2,-16104
 403dac8:	e0bfff15 	stw	r2,-4(fp)
 403dacc:	00000306 	br	403dadc <prep_ifaces+0x68>
 403dad0:	00810174 	movhi	r2,1029
 403dad4:	10b04704 	addi	r2,r2,-16100
 403dad8:	e0bfff15 	stw	r2,-4(fp)
 403dadc:	01010174 	movhi	r4,1029
 403dae0:	21304804 	addi	r4,r4,-16096
 403dae4:	e17ffe17 	ldw	r5,-8(fp)
 403dae8:	e1bfff17 	ldw	r6,-4(fp)
 403daec:	400207c0 	call	400207c <printf>
      ifaces_found, ifaces_found==1?"":"s");

   return ifaces_found;
 403daf0:	e0bffe17 	ldw	r2,-8(fp)
}
 403daf4:	e037883a 	mov	sp,fp
 403daf8:	dfc00117 	ldw	ra,4(sp)
 403dafc:	df000017 	ldw	fp,0(sp)
 403db00:	dec00204 	addi	sp,sp,8
 403db04:	f800283a 	ret

0403db08 <netexit>:
 * RETURNS: SHould not return
 */

void
netexit(int err)      /* exit error level */
{
 403db08:	defffd04 	addi	sp,sp,-12
 403db0c:	dfc00215 	stw	ra,8(sp)
 403db10:	df000115 	stw	fp,4(sp)
 403db14:	df000104 	addi	fp,sp,4
 403db18:	e13fff15 	stw	r4,-4(fp)
   net_system_exit = TRUE; /* set flag for shutting down */
 403db1c:	00800044 	movi	r2,1
 403db20:	d0a84915 	stw	r2,-24284(gp)
   ip_exit();  /* do the exit_hook()ed stuff */
 403db24:	401ec940 	call	401ec94 <ip_exit>

   PORT_EXIT_FUNC(err);    /* should not return! */
 403db28:	e13fff17 	ldw	r4,-4(fp)
 403db2c:	4045e840 	call	4045e84 <exit>

0403db30 <evtmap_setup>:
 * INPUT: None.
 * OUTPUT: None
 */
 
void evtmap_setup (void)
{
 403db30:	deffff04 	addi	sp,sp,-4
 403db34:	df000015 	stw	fp,0(sp)
 403db38:	d839883a 	mov	fp,sp
#ifdef SOCK_MAP_EVENTS
   so_evtmap = TRUE;
   so_evtmap_create = evtmap_create;
   so_evtmap_delete = evtmap_delete;
#else
   so_evtmap = FALSE;
 403db3c:	d0284c05 	stb	zero,-24272(gp)
   so_evtmap_create = 0;
 403db40:	d0284a15 	stw	zero,-24280(gp)
   so_evtmap_delete = 0;
 403db44:	d0284b15 	stw	zero,-24276(gp)
#endif   /* SOCK_MAP_EVENTS */ 

}
 403db48:	e037883a 	mov	sp,fp
 403db4c:	df000017 	ldw	fp,0(sp)
 403db50:	dec00104 	addi	sp,sp,4
 403db54:	f800283a 	ret

0403db58 <ip_raw_open>:
ip_raw_open(u_char prot,
            ip_addr laddr,
            ip_addr faddr,
            int (*handler)(PACKET, void *),
            void * data)
{
 403db58:	defff804 	addi	sp,sp,-32
 403db5c:	dfc00715 	stw	ra,28(sp)
 403db60:	df000615 	stw	fp,24(sp)
 403db64:	df000604 	addi	fp,sp,24
 403db68:	e17ffc15 	stw	r5,-16(fp)
 403db6c:	e1bffd15 	stw	r6,-12(fp)
 403db70:	e1fffe15 	stw	r7,-8(fp)
 403db74:	e13ffb05 	stb	r4,-20(fp)
   struct ipraw_ep * ep;

   LOCK_NET_RESOURCE(NET_RESID);
 403db78:	0009883a 	mov	r4,zero
 403db7c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   /* allocate a structure for the endpoint */
   ep = (struct ipraw_ep *)IEP_ALLOC(sizeof(struct ipraw_ep));
 403db80:	01000604 	movi	r4,24
 403db84:	40265f80 	call	40265f8 <npalloc>
 403db88:	e0bffa15 	stw	r2,-24(fp)
   if (ep == NULL)
 403db8c:	e0bffa17 	ldw	r2,-24(fp)
 403db90:	1004c03a 	cmpne	r2,r2,zero
 403db94:	10000e1e 	bne	r2,zero,403dbd0 <ip_raw_open+0x78>
   {
#ifdef NPDEBUG
      if (NDEBUG & INFOMSG)
 403db98:	00810174 	movhi	r2,1029
 403db9c:	1081bf04 	addi	r2,r2,1788
 403dba0:	10800017 	ldw	r2,0(r2)
 403dba4:	1080010c 	andi	r2,r2,4
 403dba8:	1005003a 	cmpeq	r2,r2,zero
 403dbac:	1000031e 	bne	r2,zero,403dbbc <ip_raw_open+0x64>
         dprintf("IP: Couldn't allocate ep storage.\n");
 403dbb0:	01010174 	movhi	r4,1029
 403dbb4:	21305304 	addi	r4,r4,-16052
 403dbb8:	40021940 	call	4002194 <puts>
#endif
      UNLOCK_NET_RESOURCE(NET_RESID);
 403dbbc:	0009883a 	mov	r4,zero
 403dbc0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ep;
 403dbc4:	e0bffa17 	ldw	r2,-24(fp)
 403dbc8:	e0bfff15 	stw	r2,-4(fp)
 403dbcc:	00001806 	br	403dc30 <ip_raw_open+0xd8>
   }

   /* fill it in with the caller's requested binding */
   ep->ipr_laddr = laddr;
 403dbd0:	e0fffa17 	ldw	r3,-24(fp)
 403dbd4:	e0bffc17 	ldw	r2,-16(fp)
 403dbd8:	18800115 	stw	r2,4(r3)
   ep->ipr_faddr = faddr;
 403dbdc:	e0fffa17 	ldw	r3,-24(fp)
 403dbe0:	e0bffd17 	ldw	r2,-12(fp)
 403dbe4:	18800215 	stw	r2,8(r3)
   ep->ipr_prot = prot;
 403dbe8:	e0fffa17 	ldw	r3,-24(fp)
 403dbec:	e0bffb03 	ldbu	r2,-20(fp)
 403dbf0:	18800505 	stb	r2,20(r3)
   ep->ipr_rcv = handler;
 403dbf4:	e0fffa17 	ldw	r3,-24(fp)
 403dbf8:	e0bffe17 	ldw	r2,-8(fp)
 403dbfc:	18800315 	stw	r2,12(r3)
   ep->ipr_data = data;
 403dc00:	e0fffa17 	ldw	r3,-24(fp)
 403dc04:	e0800217 	ldw	r2,8(fp)
 403dc08:	18800415 	stw	r2,16(r3)

   /* link it into the list 
    * (at the head, because that's simple and fast) 
    */
   ep->ipr_next = ipraw_eps;
 403dc0c:	d0e84d17 	ldw	r3,-24268(gp)
 403dc10:	e0bffa17 	ldw	r2,-24(fp)
 403dc14:	10c00015 	stw	r3,0(r2)
   ipraw_eps = ep;
 403dc18:	e0bffa17 	ldw	r2,-24(fp)
 403dc1c:	d0a84d15 	stw	r2,-24268(gp)

   /* and return the pointer to the endpoint */
   UNLOCK_NET_RESOURCE(NET_RESID);
 403dc20:	0009883a 	mov	r4,zero
 403dc24:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return ep;
 403dc28:	e0bffa17 	ldw	r2,-24(fp)
 403dc2c:	e0bfff15 	stw	r2,-4(fp)
 403dc30:	e0bfff17 	ldw	r2,-4(fp)
}
 403dc34:	e037883a 	mov	sp,fp
 403dc38:	dfc00117 	ldw	ra,4(sp)
 403dc3c:	df000017 	ldw	fp,0(sp)
 403dc40:	dec00204 	addi	sp,sp,8
 403dc44:	f800283a 	ret

0403dc48 <ip_raw_close>:
 *                               that is to be closed
 * RETURNS: void
 */
void
ip_raw_close(struct ipraw_ep * ep)
{
 403dc48:	defffb04 	addi	sp,sp,-20
 403dc4c:	dfc00415 	stw	ra,16(sp)
 403dc50:	df000315 	stw	fp,12(sp)
 403dc54:	df000304 	addi	fp,sp,12
 403dc58:	e13fff15 	stw	r4,-4(fp)
   struct ipraw_ep * prev_ep;
   struct ipraw_ep * curr_ep;

   LOCK_NET_RESOURCE(NET_RESID);
 403dc5c:	0009883a 	mov	r4,zero
 403dc60:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
 403dc64:	e03ffe15 	stw	zero,-8(fp)
 403dc68:	d0a84d17 	ldw	r2,-24268(gp)
 403dc6c:	e0bffd15 	stw	r2,-12(fp)
        curr_ep != NULL;
 403dc70:	00000806 	br	403dc94 <ip_raw_close+0x4c>
        curr_ep = curr_ep->ipr_next)
   {
      if (curr_ep == ep)
 403dc74:	e0fffd17 	ldw	r3,-12(fp)
 403dc78:	e0bfff17 	ldw	r2,-4(fp)
 403dc7c:	18800826 	beq	r3,r2,403dca0 <ip_raw_close+0x58>
         break;
      prev_ep = curr_ep;
 403dc80:	e0bffd17 	ldw	r2,-12(fp)
 403dc84:	e0bffe15 	stw	r2,-8(fp)
   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
        curr_ep = curr_ep->ipr_next)
 403dc88:	e0bffd17 	ldw	r2,-12(fp)
 403dc8c:	10800017 	ldw	r2,0(r2)
 403dc90:	e0bffd15 	stw	r2,-12(fp)

   LOCK_NET_RESOURCE(NET_RESID);

   /* search the list of endpoints for the one we're supposed to close */
   for (prev_ep = NULL, curr_ep = ipraw_eps;
        curr_ep != NULL;
 403dc94:	e0bffd17 	ldw	r2,-12(fp)
 403dc98:	1004c03a 	cmpne	r2,r2,zero
 403dc9c:	103ff51e 	bne	r2,zero,403dc74 <ip_raw_close+0x2c>
         break;
      prev_ep = curr_ep;
   }

   /* if we didn't find it, we can't close it, so just return */
   if (curr_ep == NULL)
 403dca0:	e0bffd17 	ldw	r2,-12(fp)
 403dca4:	1004c03a 	cmpne	r2,r2,zero
 403dca8:	1000041e 	bne	r2,zero,403dcbc <ip_raw_close+0x74>
   {
#ifdef NPDEBUG
      /* caller passed pointer to endpoint not in list 
       * -- not fatal, but may be programming error
       */
      dtrap();
 403dcac:	4025bb40 	call	4025bb4 <dtrap>
#endif /* NPDEBUG */
      UNLOCK_NET_RESOURCE(NET_RESID);
 403dcb0:	0009883a 	mov	r4,zero
 403dcb4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return;
 403dcb8:	00000e06 	br	403dcf4 <ip_raw_close+0xac>
   }

   /* unlink it from the list */
   if (prev_ep)
 403dcbc:	e0bffe17 	ldw	r2,-8(fp)
 403dcc0:	1005003a 	cmpeq	r2,r2,zero
 403dcc4:	1000041e 	bne	r2,zero,403dcd8 <ip_raw_close+0x90>
      prev_ep = curr_ep->ipr_next;
 403dcc8:	e0bffd17 	ldw	r2,-12(fp)
 403dccc:	10800017 	ldw	r2,0(r2)
 403dcd0:	e0bffe15 	stw	r2,-8(fp)
 403dcd4:	00000306 	br	403dce4 <ip_raw_close+0x9c>
   else
      ipraw_eps = curr_ep->ipr_next;
 403dcd8:	e0bffd17 	ldw	r2,-12(fp)
 403dcdc:	10800017 	ldw	r2,0(r2)
 403dce0:	d0a84d15 	stw	r2,-24268(gp)

   /* free its storage */
   IEP_FREE(curr_ep);
 403dce4:	e13ffd17 	ldw	r4,-12(fp)
 403dce8:	40266ec0 	call	40266ec <npfree>

   /* and return */
   UNLOCK_NET_RESOURCE(NET_RESID);
 403dcec:	0009883a 	mov	r4,zero
 403dcf0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
}
 403dcf4:	e037883a 	mov	sp,fp
 403dcf8:	dfc00117 	ldw	ra,4(sp)
 403dcfc:	df000017 	ldw	fp,0(sp)
 403dd00:	dec00204 	addi	sp,sp,8
 403dd04:	f800283a 	ret

0403dd08 <ip_raw_input>:
 *          freed); else an error code indicating that the
 *          received packet was not accepted/processed
 */
int
ip_raw_input(PACKET p)
{
 403dd08:	defff604 	addi	sp,sp,-40
 403dd0c:	dfc00915 	stw	ra,36(sp)
 403dd10:	df000815 	stw	fp,32(sp)
 403dd14:	df000804 	addi	fp,sp,32
 403dd18:	e13fff15 	stw	r4,-4(fp)
   struct ip * pip;              /* the internet header */
   struct ipraw_ep * ep;
   struct ipraw_ep * next_ep;
   struct ipraw_ep * matched_ep = NULL;
 403dd1c:	e03ffb15 	stw	zero,-20(fp)
   int err;
   int delivered;

   /* start out expecting to not deliver the packet */
   delivered = 0;
 403dd20:	e03ff915 	stw	zero,-28(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);
 403dd24:	e0bfff17 	ldw	r2,-4(fp)
 403dd28:	10800317 	ldw	r2,12(r2)
 403dd2c:	e0bffe15 	stw	r2,-8(fp)

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 403dd30:	d0a84d17 	ldw	r2,-24268(gp)
 403dd34:	e0bffd15 	stw	r2,-12(fp)
 403dd38:	00004d06 	br	403de70 <ip_raw_input+0x168>
   {
      /* keep track of next endpoint -- defense against upcall
       * function closing its own endpoint
       */
      next_ep = ep->ipr_next;
 403dd3c:	e0bffd17 	ldw	r2,-12(fp)
 403dd40:	10800017 	ldw	r2,0(r2)
 403dd44:	e0bffc15 	stw	r2,-16(fp)

      /* if this packet doesn't match the endpoint's filters (IP
       * protocol ID, locally-bound address, connected-peer address)
       * then skip ahead to next endpoint
       */
      if (ep->ipr_prot && ep->ipr_prot != pip->ip_prot)
 403dd48:	e0bffd17 	ldw	r2,-12(fp)
 403dd4c:	10800503 	ldbu	r2,20(r2)
 403dd50:	10803fcc 	andi	r2,r2,255
 403dd54:	1005003a 	cmpeq	r2,r2,zero
 403dd58:	1000071e 	bne	r2,zero,403dd78 <ip_raw_input+0x70>
 403dd5c:	e0bffd17 	ldw	r2,-12(fp)
 403dd60:	10c00503 	ldbu	r3,20(r2)
 403dd64:	e0bffe17 	ldw	r2,-8(fp)
 403dd68:	10800243 	ldbu	r2,9(r2)
 403dd6c:	18c03fcc 	andi	r3,r3,255
 403dd70:	10803fcc 	andi	r2,r2,255
 403dd74:	18803c1e 	bne	r3,r2,403de68 <ip_raw_input+0x160>
         continue;
      if (ep->ipr_laddr && ep->ipr_laddr != pip->ip_dest)
 403dd78:	e0bffd17 	ldw	r2,-12(fp)
 403dd7c:	10800117 	ldw	r2,4(r2)
 403dd80:	1005003a 	cmpeq	r2,r2,zero
 403dd84:	1000051e 	bne	r2,zero,403dd9c <ip_raw_input+0x94>
 403dd88:	e0bffd17 	ldw	r2,-12(fp)
 403dd8c:	10c00117 	ldw	r3,4(r2)
 403dd90:	e0bffe17 	ldw	r2,-8(fp)
 403dd94:	10800417 	ldw	r2,16(r2)
 403dd98:	1880331e 	bne	r3,r2,403de68 <ip_raw_input+0x160>
         continue;
      if (ep->ipr_faddr && ep->ipr_faddr != pip->ip_src)
 403dd9c:	e0bffd17 	ldw	r2,-12(fp)
 403dda0:	10800217 	ldw	r2,8(r2)
 403dda4:	1005003a 	cmpeq	r2,r2,zero
 403dda8:	1000051e 	bne	r2,zero,403ddc0 <ip_raw_input+0xb8>
 403ddac:	e0bffd17 	ldw	r2,-12(fp)
 403ddb0:	10c00217 	ldw	r3,8(r2)
 403ddb4:	e0bffe17 	ldw	r2,-8(fp)
 403ddb8:	10800317 	ldw	r2,12(r2)
 403ddbc:	18802a1e 	bne	r3,r2,403de68 <ip_raw_input+0x160>
         continue;

      /* if the endpoint has a receive upcall function, 
       * keep track of the endpoint
       */
      if (ep->ipr_rcv != NULL)
 403ddc0:	e0bffd17 	ldw	r2,-12(fp)
 403ddc4:	10800317 	ldw	r2,12(r2)
 403ddc8:	1005003a 	cmpeq	r2,r2,zero
 403ddcc:	1000261e 	bne	r2,zero,403de68 <ip_raw_input+0x160>
          * copy the packet into a new buffer,
          * and pass the new copy to the previously matched 
          * endpoint's upcall function 
          * before we forget the previous endpoint
          */
         if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 403ddd0:	e0bffb17 	ldw	r2,-20(fp)
 403ddd4:	1005003a 	cmpeq	r2,r2,zero
 403ddd8:	1000211e 	bne	r2,zero,403de60 <ip_raw_input+0x158>
 403dddc:	e0bffb17 	ldw	r2,-20(fp)
 403dde0:	10800317 	ldw	r2,12(r2)
 403dde4:	1005003a 	cmpeq	r2,r2,zero
 403dde8:	10001d1e 	bne	r2,zero,403de60 <ip_raw_input+0x158>
         {
            PACKET p2;

            p2 = ip_copypkt(p);
 403ddec:	e13fff17 	ldw	r4,-4(fp)
 403ddf0:	403aa800 	call	403aa80 <ip_copypkt>
 403ddf4:	e0bff815 	stw	r2,-32(fp)
            if (p2)
 403ddf8:	e0bff817 	ldw	r2,-32(fp)
 403ddfc:	1005003a 	cmpeq	r2,r2,zero
 403de00:	1000171e 	bne	r2,zero,403de60 <ip_raw_input+0x158>
            {
               UNLOCK_NET_RESOURCE(NET_RESID);
 403de04:	0009883a 	mov	r4,zero
 403de08:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
               err = ((*matched_ep->ipr_rcv)(p2, matched_ep->ipr_data));
 403de0c:	e0bffb17 	ldw	r2,-20(fp)
 403de10:	10c00317 	ldw	r3,12(r2)
 403de14:	e0bffb17 	ldw	r2,-20(fp)
 403de18:	11400417 	ldw	r5,16(r2)
 403de1c:	e13ff817 	ldw	r4,-32(fp)
 403de20:	183ee83a 	callr	r3
 403de24:	e0bffa15 	stw	r2,-24(fp)
               LOCK_NET_RESOURCE(NET_RESID);
 403de28:	0009883a 	mov	r4,zero
 403de2c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
               if (err)
 403de30:	e0bffa17 	ldw	r2,-24(fp)
 403de34:	1005003a 	cmpeq	r2,r2,zero
 403de38:	1000071e 	bne	r2,zero,403de58 <ip_raw_input+0x150>
               {
                  LOCK_NET_RESOURCE(FREEQ_RESID);
 403de3c:	01000084 	movi	r4,2
 403de40:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
                  pk_free(p2);
 403de44:	e13ff817 	ldw	r4,-32(fp)
 403de48:	40253040 	call	4025304 <pk_free>
                  UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403de4c:	01000084 	movi	r4,2
 403de50:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
 403de54:	00000206 	br	403de60 <ip_raw_input+0x158>
               }
               else
                  delivered = 1;
 403de58:	00800044 	movi	r2,1
 403de5c:	e0bff915 	stw	r2,-28(fp)
            }
         }
         matched_ep = ep;
 403de60:	e0bffd17 	ldw	r2,-12(fp)
 403de64:	e0bffb15 	stw	r2,-20(fp)

   /* get a pointer to the received packet's IP header */
   pip = (struct ip *)(p->nb_prot);

   /* search the list of raw-IP endpoints for matches */
   for (ep = ipraw_eps; ep != NULL; ep = next_ep)
 403de68:	e0bffc17 	ldw	r2,-16(fp)
 403de6c:	e0bffd15 	stw	r2,-12(fp)
 403de70:	e0bffd17 	ldw	r2,-12(fp)
 403de74:	1004c03a 	cmpne	r2,r2,zero
 403de78:	103fb01e 	bne	r2,zero,403dd3c <ip_raw_input+0x34>
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 403de7c:	e0bffb17 	ldw	r2,-20(fp)
 403de80:	1005003a 	cmpeq	r2,r2,zero
 403de84:	1000151e 	bne	r2,zero,403dedc <ip_raw_input+0x1d4>
 403de88:	e0bffb17 	ldw	r2,-20(fp)
 403de8c:	10800317 	ldw	r2,12(r2)
 403de90:	1005003a 	cmpeq	r2,r2,zero
 403de94:	1000111e 	bne	r2,zero,403dedc <ip_raw_input+0x1d4>
   {
      UNLOCK_NET_RESOURCE(NET_RESID);
 403de98:	0009883a 	mov	r4,zero
 403de9c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      err = ((*matched_ep->ipr_rcv)(p, matched_ep->ipr_data));
 403dea0:	e0bffb17 	ldw	r2,-20(fp)
 403dea4:	10c00317 	ldw	r3,12(r2)
 403dea8:	e0bffb17 	ldw	r2,-20(fp)
 403deac:	11400417 	ldw	r5,16(r2)
 403deb0:	e13fff17 	ldw	r4,-4(fp)
 403deb4:	183ee83a 	callr	r3
 403deb8:	e0bffa15 	stw	r2,-24(fp)
      LOCK_NET_RESOURCE(NET_RESID);
 403debc:	0009883a 	mov	r4,zero
 403dec0:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      if (err == 0)
 403dec4:	e0bffa17 	ldw	r2,-24(fp)
 403dec8:	1004c03a 	cmpne	r2,r2,zero
 403decc:	10000c1e 	bne	r2,zero,403df00 <ip_raw_input+0x1f8>
         delivered = 1;
 403ded0:	00800044 	movi	r2,1
 403ded4:	e0bff915 	stw	r2,-28(fp)
   /* if we matched an endpoint, 
    * pass the packet to its upcall function
    * otherwise, return ENP_PARAM to indicate that the
    * packet was not processed and freed
    */
   if ((matched_ep != NULL) && (matched_ep->ipr_rcv != NULL))
 403ded8:	00000906 	br	403df00 <ip_raw_input+0x1f8>
      if (err == 0)
         delivered = 1;
   }
   else
   {
      err = ENP_PARAM;
 403dedc:	00bffd84 	movi	r2,-10
 403dee0:	e0bffa15 	stw	r2,-24(fp)
      ip_mib.ipUnknownProtos++;
 403dee4:	008101b4 	movhi	r2,1030
 403dee8:	10a44e04 	addi	r2,r2,-28360
 403deec:	10800617 	ldw	r2,24(r2)
 403def0:	10c00044 	addi	r3,r2,1
 403def4:	008101b4 	movhi	r2,1030
 403def8:	10a44e04 	addi	r2,r2,-28360
 403defc:	10c00615 	stw	r3,24(r2)
   }

   if (!delivered)
 403df00:	e0bff917 	ldw	r2,-28(fp)
 403df04:	1004c03a 	cmpne	r2,r2,zero
 403df08:	1000071e 	bne	r2,zero,403df28 <ip_raw_input+0x220>
      ip_mib.ipInDelivers--;
 403df0c:	008101b4 	movhi	r2,1030
 403df10:	10a44e04 	addi	r2,r2,-28360
 403df14:	10800817 	ldw	r2,32(r2)
 403df18:	10ffffc4 	addi	r3,r2,-1
 403df1c:	008101b4 	movhi	r2,1030
 403df20:	10a44e04 	addi	r2,r2,-28360
 403df24:	10c00815 	stw	r3,32(r2)

   return err;
 403df28:	e0bffa17 	ldw	r2,-24(fp)
}
 403df2c:	e037883a 	mov	sp,fp
 403df30:	dfc00117 	ldw	ra,4(sp)
 403df34:	df000017 	ldw	fp,0(sp)
 403df38:	dec00204 	addi	sp,sp,8
 403df3c:	f800283a 	ret

0403df40 <ip_raw_alloc>:
 *          inclhdr is zero.
 */

PACKET
ip_raw_alloc(int reqlen, int hdrincl)
{
 403df40:	defffa04 	addi	sp,sp,-24
 403df44:	dfc00515 	stw	ra,20(sp)
 403df48:	df000415 	stw	fp,16(sp)
 403df4c:	df000404 	addi	fp,sp,16
 403df50:	e13ffe15 	stw	r4,-8(fp)
 403df54:	e17fff15 	stw	r5,-4(fp)
   int len;
   PACKET p;

   len = (reqlen + 1) & ~1;
 403df58:	e0bffe17 	ldw	r2,-8(fp)
 403df5c:	10c00044 	addi	r3,r2,1
 403df60:	00bfff84 	movi	r2,-2
 403df64:	1884703a 	and	r2,r3,r2
 403df68:	e0bffd15 	stw	r2,-12(fp)
   if (!hdrincl)
 403df6c:	e0bfff17 	ldw	r2,-4(fp)
 403df70:	1004c03a 	cmpne	r2,r2,zero
 403df74:	1000031e 	bne	r2,zero,403df84 <ip_raw_alloc+0x44>
      len += IPHSIZ;
 403df78:	e0bffd17 	ldw	r2,-12(fp)
 403df7c:	10800504 	addi	r2,r2,20
 403df80:	e0bffd15 	stw	r2,-12(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403df84:	01000084 	movi	r4,2
 403df88:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + MaxLnh);
 403df8c:	00810174 	movhi	r2,1029
 403df90:	1081bd04 	addi	r2,r2,1780
 403df94:	10c00017 	ldw	r3,0(r2)
 403df98:	e0bffd17 	ldw	r2,-12(fp)
 403df9c:	1885883a 	add	r2,r3,r2
 403dfa0:	1009883a 	mov	r4,r2
 403dfa4:	4024f700 	call	4024f70 <pk_alloc>
 403dfa8:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403dfac:	01000084 	movi	r4,2
 403dfb0:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   if (p)
 403dfb4:	e0bffc17 	ldw	r2,-16(fp)
 403dfb8:	1005003a 	cmpeq	r2,r2,zero
 403dfbc:	10000d1e 	bne	r2,zero,403dff4 <ip_raw_alloc+0xb4>
   {
      if (!hdrincl)
 403dfc0:	e0bfff17 	ldw	r2,-4(fp)
 403dfc4:	1004c03a 	cmpne	r2,r2,zero
 403dfc8:	10000a1e 	bne	r2,zero,403dff4 <ip_raw_alloc+0xb4>
      {
         p->nb_prot += IPHSIZ;
 403dfcc:	e0bffc17 	ldw	r2,-16(fp)
 403dfd0:	10800317 	ldw	r2,12(r2)
 403dfd4:	10c00504 	addi	r3,r2,20
 403dfd8:	e0bffc17 	ldw	r2,-16(fp)
 403dfdc:	10c00315 	stw	r3,12(r2)
         p->nb_plen -= IPHSIZ;
 403dfe0:	e0bffc17 	ldw	r2,-16(fp)
 403dfe4:	10800417 	ldw	r2,16(r2)
 403dfe8:	10fffb04 	addi	r3,r2,-20
 403dfec:	e0bffc17 	ldw	r2,-16(fp)
 403dff0:	10c00415 	stw	r3,16(r2)
      }
   }
   return p;
 403dff4:	e0bffc17 	ldw	r2,-16(fp)
}
 403dff8:	e037883a 	mov	sp,fp
 403dffc:	dfc00117 	ldw	ra,4(sp)
 403e000:	df000017 	ldw	fp,0(sp)
 403e004:	dec00204 	addi	sp,sp,8
 403e008:	f800283a 	ret

0403e00c <ip_raw_free>:
 * RETURNS: void
 */

void
ip_raw_free(PACKET p)
{
 403e00c:	defffd04 	addi	sp,sp,-12
 403e010:	dfc00215 	stw	ra,8(sp)
 403e014:	df000115 	stw	fp,4(sp)
 403e018:	df000104 	addi	fp,sp,4
 403e01c:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403e020:	01000084 	movi	r4,2
 403e024:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 403e028:	e13fff17 	ldw	r4,-4(fp)
 403e02c:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403e030:	01000084 	movi	r4,2
 403e034:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
}
 403e038:	e037883a 	mov	sp,fp
 403e03c:	dfc00117 	ldw	ra,4(sp)
 403e040:	df000017 	ldw	fp,0(sp)
 403e044:	dec00204 	addi	sp,sp,8
 403e048:	f800283a 	ret

0403e04c <ip_raw_maxalloc>:
 *          for 
 */

int
ip_raw_maxalloc(int hdrincl)
{
 403e04c:	defffd04 	addi	sp,sp,-12
 403e050:	df000215 	stw	fp,8(sp)
 403e054:	df000204 	addi	fp,sp,8
 403e058:	e13fff15 	stw	r4,-4(fp)
   int len;

   len = bigbufsiz - MaxLnh;
 403e05c:	00810174 	movhi	r2,1029
 403e060:	10b9f404 	addi	r2,r2,-6192
 403e064:	10c00017 	ldw	r3,0(r2)
 403e068:	00810174 	movhi	r2,1029
 403e06c:	1081bd04 	addi	r2,r2,1780
 403e070:	10800017 	ldw	r2,0(r2)
 403e074:	1885c83a 	sub	r2,r3,r2
 403e078:	e0bffe15 	stw	r2,-8(fp)
   if (!hdrincl)
 403e07c:	e0bfff17 	ldw	r2,-4(fp)
 403e080:	1004c03a 	cmpne	r2,r2,zero
 403e084:	1000031e 	bne	r2,zero,403e094 <ip_raw_maxalloc+0x48>
      len -= IPHSIZ;
 403e088:	e0bffe17 	ldw	r2,-8(fp)
 403e08c:	10bffb04 	addi	r2,r2,-20
 403e090:	e0bffe15 	stw	r2,-8(fp)
   return len;
 403e094:	e0bffe17 	ldw	r2,-8(fp)
}
 403e098:	e037883a 	mov	sp,fp
 403e09c:	df000017 	ldw	fp,0(sp)
 403e0a0:	dec00104 	addi	sp,sp,4
 403e0a4:	f800283a 	ret

0403e0a8 <rt_lookup>:
 * entry was found.
 */

RTMIB
rt_lookup(ip_addr host)
{
 403e0a8:	defff804 	addi	sp,sp,-32
 403e0ac:	df000715 	stw	fp,28(sp)
 403e0b0:	df000704 	addi	fp,sp,28
 403e0b4:	e13fff15 	stw	r4,-4(fp)
   RTMIB    rtp;
   RTMIB    netmatch;
   unsigned char max_bits_matched = 0;
 403e0b8:	e03ffc45 	stb	zero,-15(fp)
   unsigned char curr_bits_matched;
   ip_addr  entry_mask;
   unsigned long int bitcount_mask;
   unsigned long int extracted_bit;

   netmatch = NULL;
 403e0bc:	e03ffd15 	stw	zero,-12(fp)

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 403e0c0:	00810174 	movhi	r2,1029
 403e0c4:	10820204 	addi	r2,r2,2056
 403e0c8:	10800017 	ldw	r2,0(r2)
 403e0cc:	e0bffe15 	stw	r2,-8(fp)
 403e0d0:	00003e06 	br	403e1cc <rt_lookup+0x124>
   {
      if (rtp->ipRouteNextHop == 0L)   /* skip over empty entries */
 403e0d4:	e0bffe17 	ldw	r2,-8(fp)
 403e0d8:	10800617 	ldw	r2,24(r2)
 403e0dc:	1005003a 	cmpeq	r2,r2,zero
 403e0e0:	1000371e 	bne	r2,zero,403e1c0 <rt_lookup+0x118>
#ifdef RIP_SUPPORT
      /* skip RIP private entries */
      if (rtp->ipRouteFlags & RIP_PRIVATE)
         continue;
#endif
      entry_mask = rtp->ipRouteMask;
 403e0e4:	e0bffe17 	ldw	r2,-8(fp)
 403e0e8:	10800a17 	ldw	r2,40(r2)
 403e0ec:	e0bffb15 	stw	r2,-20(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
 403e0f0:	e0bffe17 	ldw	r2,-8(fp)
 403e0f4:	10c00017 	ldw	r3,0(r2)
 403e0f8:	e0bffb17 	ldw	r2,-20(fp)
 403e0fc:	1888703a 	and	r4,r3,r2
 403e100:	e0ffff17 	ldw	r3,-4(fp)
 403e104:	e0bffb17 	ldw	r2,-20(fp)
 403e108:	1884703a 	and	r2,r3,r2
 403e10c:	20802c1e 	bne	r4,r2,403e1c0 <rt_lookup+0x118>
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 403e110:	e03ffc05 	stb	zero,-16(fp)
 403e114:	00a00034 	movhi	r2,32768
 403e118:	e0bffa15 	stw	r2,-24(fp)
 403e11c:	00001b06 	br	403e18c <rt_lookup+0xe4>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
 403e120:	e0bffb17 	ldw	r2,-20(fp)
 403e124:	1004d63a 	srli	r2,r2,24
 403e128:	10c03fcc 	andi	r3,r2,255
 403e12c:	e0bffb17 	ldw	r2,-20(fp)
 403e130:	1004d23a 	srli	r2,r2,8
 403e134:	10bfc00c 	andi	r2,r2,65280
 403e138:	1886b03a 	or	r3,r3,r2
 403e13c:	e0bffb17 	ldw	r2,-20(fp)
 403e140:	10bfc00c 	andi	r2,r2,65280
 403e144:	1004923a 	slli	r2,r2,8
 403e148:	1886b03a 	or	r3,r3,r2
 403e14c:	e0bffb17 	ldw	r2,-20(fp)
 403e150:	10803fcc 	andi	r2,r2,255
 403e154:	1004963a 	slli	r2,r2,24
 403e158:	1886b03a 	or	r3,r3,r2
 403e15c:	e0bffa17 	ldw	r2,-24(fp)
 403e160:	1884703a 	and	r2,r3,r2
 403e164:	e0bff915 	stw	r2,-28(fp)
            if (extracted_bit) ++curr_bits_matched;
 403e168:	e0bff917 	ldw	r2,-28(fp)
 403e16c:	1005003a 	cmpeq	r2,r2,zero
 403e170:	1000031e 	bne	r2,zero,403e180 <rt_lookup+0xd8>
 403e174:	e0bffc03 	ldbu	r2,-16(fp)
 403e178:	10800044 	addi	r2,r2,1
 403e17c:	e0bffc05 	stb	r2,-16(fp)
      /* check to see if we have a match in the route table */
      if ((rtp->ipRouteDest & entry_mask) == (host & entry_mask))
      {
         /* check to see if current match is better than the previous best
          * by computing the number of bits that matched */
         for (curr_bits_matched = 0, bitcount_mask = 0x80000000; bitcount_mask > 0; bitcount_mask >>= 1)
 403e180:	e0bffa17 	ldw	r2,-24(fp)
 403e184:	1004d07a 	srli	r2,r2,1
 403e188:	e0bffa15 	stw	r2,-24(fp)
 403e18c:	e0bffa17 	ldw	r2,-24(fp)
 403e190:	1004c03a 	cmpne	r2,r2,zero
 403e194:	103fe21e 	bne	r2,zero,403e120 <rt_lookup+0x78>
         {
            extracted_bit = (ntohl(entry_mask)) & bitcount_mask;
            if (extracted_bit) ++curr_bits_matched;
         }
         if (curr_bits_matched > max_bits_matched)
 403e198:	e0fffc03 	ldbu	r3,-16(fp)
 403e19c:	e0bffc43 	ldbu	r2,-15(fp)
 403e1a0:	10c0072e 	bgeu	r2,r3,403e1c0 <rt_lookup+0x118>
         {
            /* save a pointer to the best match */
            max_bits_matched = curr_bits_matched;
 403e1a4:	e0bffc03 	ldbu	r2,-16(fp)
 403e1a8:	e0bffc45 	stb	r2,-15(fp)
            netmatch = rtp;
 403e1ac:	e0bffe17 	ldw	r2,-8(fp)
 403e1b0:	e0bffd15 	stw	r2,-12(fp)
            /* if all 32 bits match, stop searching the route table */
            if (max_bits_matched == 32)
 403e1b4:	e0bffc43 	ldbu	r2,-15(fp)
 403e1b8:	10800820 	cmpeqi	r2,r2,32
 403e1bc:	10000e1e 	bne	r2,zero,403e1f8 <rt_lookup+0x150>
   unsigned long int extracted_bit;

   netmatch = NULL;

   /* see if it's in the route table. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 403e1c0:	e0bffe17 	ldw	r2,-8(fp)
 403e1c4:	10800f04 	addi	r2,r2,60
 403e1c8:	e0bffe15 	stw	r2,-8(fp)
 403e1cc:	00810174 	movhi	r2,1029
 403e1d0:	10ba0c04 	addi	r2,r2,-6096
 403e1d4:	10800017 	ldw	r2,0(r2)
 403e1d8:	10800f24 	muli	r2,r2,60
 403e1dc:	1007883a 	mov	r3,r2
 403e1e0:	00810174 	movhi	r2,1029
 403e1e4:	10820204 	addi	r2,r2,2056
 403e1e8:	10800017 	ldw	r2,0(r2)
 403e1ec:	1887883a 	add	r3,r3,r2
 403e1f0:	e0bffe17 	ldw	r2,-8(fp)
 403e1f4:	10ffb736 	bltu	r2,r3,403e0d4 <rt_lookup+0x2c>
               break;
         }
      }
   }

   if (netmatch)
 403e1f8:	e0bffd17 	ldw	r2,-12(fp)
 403e1fc:	1005003a 	cmpeq	r2,r2,zero
 403e200:	1000051e 	bne	r2,zero,403e218 <rt_lookup+0x170>
      netmatch->ipRouteAge = cticks;   /* timestamp entry we used */
 403e204:	00810174 	movhi	r2,1029
 403e208:	1081e404 	addi	r2,r2,1936
 403e20c:	10c00017 	ldw	r3,0(r2)
 403e210:	e0bffd17 	ldw	r2,-12(fp)
 403e214:	10c00915 	stw	r3,36(r2)

   return netmatch;
 403e218:	e0bffd17 	ldw	r2,-12(fp)
}
 403e21c:	e037883a 	mov	sp,fp
 403e220:	df000017 	ldw	fp,0(sp)
 403e224:	dec00104 	addi	sp,sp,4
 403e228:	f800283a 	ret

0403e22c <add_route>:
   ip_addr  dest,       /* ultimate destination */
   ip_addr  mask,       /* net mask, 0xFFFFFFFF if dest is host address */
   ip_addr  nexthop,    /* where to forward to */
   int      iface,      /* interface (net) for nexthop */
   int      prot)       /* how we know it: icmp, table, etc */
{
 403e22c:	defff604 	addi	sp,sp,-40
 403e230:	dfc00915 	stw	ra,36(sp)
 403e234:	df000815 	stw	fp,32(sp)
 403e238:	df000804 	addi	fp,sp,32
 403e23c:	e13ffb15 	stw	r4,-20(fp)
 403e240:	e17ffc15 	stw	r5,-16(fp)
 403e244:	e1bffd15 	stw	r6,-12(fp)
 403e248:	e1fffe15 	stw	r7,-8(fp)
   RTMIB rtp;           /* scratch route table entrry pointer */
   RTMIB newrt;         /* best entry for new route */
   struct net * ifp;    /* interface (net) for nexthop */

   newrt = NULL;     /* may be replaced with empty or more expendable entry */
 403e24c:	e03ff915 	stw	zero,-28(fp)
					 
   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   ifp = if_getbynum(iface);
 403e250:	e13ffe17 	ldw	r4,-8(fp)
 403e254:	40386740 	call	4038674 <if_getbynum>
 403e258:	e0bff815 	stw	r2,-32(fp)
   if(!ifp)
 403e25c:	e0bff817 	ldw	r2,-32(fp)
 403e260:	1004c03a 	cmpne	r2,r2,zero
 403e264:	1000021e 	bne	r2,zero,403e270 <add_route+0x44>
      return NULL;
 403e268:	e03fff15 	stw	zero,-4(fp)
 403e26c:	0000f306 	br	403e63c <add_route+0x410>

   if (rt_mib == NULL)
 403e270:	00810174 	movhi	r2,1029
 403e274:	10820204 	addi	r2,r2,2056
 403e278:	10800017 	ldw	r2,0(r2)
 403e27c:	1004c03a 	cmpne	r2,r2,zero
 403e280:	1000021e 	bne	r2,zero,403e28c <add_route+0x60>
      return NULL;
 403e284:	e03fff15 	stw	zero,-4(fp)
 403e288:	0000ec06 	br	403e63c <add_route+0x410>

   /* Don't add null masks or IP addresses - they give false positives on
    * net matches and don't belong here anyway.
    */
   if((dest == 0) || (mask == 0))
 403e28c:	e0bffb17 	ldw	r2,-20(fp)
 403e290:	1005003a 	cmpeq	r2,r2,zero
 403e294:	1000031e 	bne	r2,zero,403e2a4 <add_route+0x78>
 403e298:	e0bffc17 	ldw	r2,-16(fp)
 403e29c:	1004c03a 	cmpne	r2,r2,zero
 403e2a0:	1000241e 	bne	r2,zero,403e334 <add_route+0x108>
   {
      dtrap();    /* bad configuration? */
 403e2a4:	4025bb40 	call	4025bb4 <dtrap>
      dprintf("add_route: rejected null parm; dest: %lx, mask: %lx\n",
 403e2a8:	e0bffb17 	ldw	r2,-20(fp)
 403e2ac:	1004d63a 	srli	r2,r2,24
 403e2b0:	10c03fcc 	andi	r3,r2,255
 403e2b4:	e0bffb17 	ldw	r2,-20(fp)
 403e2b8:	1004d23a 	srli	r2,r2,8
 403e2bc:	10bfc00c 	andi	r2,r2,65280
 403e2c0:	1886b03a 	or	r3,r3,r2
 403e2c4:	e0bffb17 	ldw	r2,-20(fp)
 403e2c8:	10bfc00c 	andi	r2,r2,65280
 403e2cc:	1004923a 	slli	r2,r2,8
 403e2d0:	1886b03a 	or	r3,r3,r2
 403e2d4:	e0bffb17 	ldw	r2,-20(fp)
 403e2d8:	10803fcc 	andi	r2,r2,255
 403e2dc:	1004963a 	slli	r2,r2,24
 403e2e0:	188ab03a 	or	r5,r3,r2
 403e2e4:	e0bffc17 	ldw	r2,-16(fp)
 403e2e8:	1004d63a 	srli	r2,r2,24
 403e2ec:	10c03fcc 	andi	r3,r2,255
 403e2f0:	e0bffc17 	ldw	r2,-16(fp)
 403e2f4:	1004d23a 	srli	r2,r2,8
 403e2f8:	10bfc00c 	andi	r2,r2,65280
 403e2fc:	1886b03a 	or	r3,r3,r2
 403e300:	e0bffc17 	ldw	r2,-16(fp)
 403e304:	10bfc00c 	andi	r2,r2,65280
 403e308:	1004923a 	slli	r2,r2,8
 403e30c:	1886b03a 	or	r3,r3,r2
 403e310:	e0bffc17 	ldw	r2,-16(fp)
 403e314:	10803fcc 	andi	r2,r2,255
 403e318:	1004963a 	slli	r2,r2,24
 403e31c:	188cb03a 	or	r6,r3,r2
 403e320:	01010174 	movhi	r4,1029
 403e324:	21305c04 	addi	r4,r4,-16016
 403e328:	400207c0 	call	400207c <printf>
	      htonl(dest), htonl(mask) );
      return NULL;
 403e32c:	e03fff15 	stw	zero,-4(fp)
 403e330:	0000c206 	br	403e63c <add_route+0x410>
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 403e334:	00810174 	movhi	r2,1029
 403e338:	10820204 	addi	r2,r2,2056
 403e33c:	10800017 	ldw	r2,0(r2)
 403e340:	e0bffa15 	stw	r2,-24(fp)
 403e344:	00006f06 	br	403e504 <add_route+0x2d8>
   {
      if (rtp->ipRouteDest == dest) /* found existing entry for target */
 403e348:	e0bffa17 	ldw	r2,-24(fp)
 403e34c:	10c00017 	ldw	r3,0(r2)
 403e350:	e0bffb17 	ldw	r2,-20(fp)
 403e354:	1880181e 	bne	r3,r2,403e3b8 <add_route+0x18c>
      {
         rtp->ipRouteNextHop = nexthop;      /* fix entry */
 403e358:	e0fffa17 	ldw	r3,-24(fp)
 403e35c:	e0bffd17 	ldw	r2,-12(fp)
 403e360:	18800615 	stw	r2,24(r3)
         rtp->ipRouteAge = cticks;           /* timestamp it */
 403e364:	00810174 	movhi	r2,1029
 403e368:	1081e404 	addi	r2,r2,1936
 403e36c:	10c00017 	ldw	r3,0(r2)
 403e370:	e0bffa17 	ldw	r2,-24(fp)
 403e374:	10c00915 	stw	r3,36(r2)
         /* set the rfc1213 1-based SNMP-ish interface index */
         rtp->ipRouteIfIndex = (long)(iface) + 1;
 403e378:	e0bffe17 	ldw	r2,-8(fp)
 403e37c:	10c00044 	addi	r3,r2,1
 403e380:	e0bffa17 	ldw	r2,-24(fp)
 403e384:	10c00115 	stw	r3,4(r2)
         rtp->ipRouteProto = prot;           /* icmp, or whatever */
 403e388:	e0fffa17 	ldw	r3,-24(fp)
 403e38c:	e0800217 	ldw	r2,8(fp)
 403e390:	18800815 	stw	r2,32(r3)
         rtp->ipRouteMask = mask;
 403e394:	e0fffa17 	ldw	r3,-24(fp)
 403e398:	e0bffc17 	ldw	r2,-16(fp)
 403e39c:	18800a15 	stw	r2,40(r3)
         rtp->ifp = ifp;
 403e3a0:	e0fffa17 	ldw	r3,-24(fp)
 403e3a4:	e0bff817 	ldw	r2,-32(fp)
 403e3a8:	18800e15 	stw	r2,56(r3)
         return(rtp);   /* just update and exit */
 403e3ac:	e0bffa17 	ldw	r2,-24(fp)
 403e3b0:	e0bfff15 	stw	r2,-4(fp)
 403e3b4:	0000a106 	br	403e63c <add_route+0x410>
      }
      /* if we didn't find empty slot yet, look for good slot to recycle */
      if (!newrt || (newrt->ipRouteProto != 0))
 403e3b8:	e0bff917 	ldw	r2,-28(fp)
 403e3bc:	1005003a 	cmpeq	r2,r2,zero
 403e3c0:	1000041e 	bne	r2,zero,403e3d4 <add_route+0x1a8>
 403e3c4:	e0bff917 	ldw	r2,-28(fp)
 403e3c8:	10800817 	ldw	r2,32(r2)
 403e3cc:	1005003a 	cmpeq	r2,r2,zero
 403e3d0:	1000491e 	bne	r2,zero,403e4f8 <add_route+0x2cc>
      {
         if (!rtp->ipRouteNextHop)  /* found empty slot for use */
 403e3d4:	e0bffa17 	ldw	r2,-24(fp)
 403e3d8:	10800617 	ldw	r2,24(r2)
 403e3dc:	1004c03a 	cmpne	r2,r2,zero
 403e3e0:	1000051e 	bne	r2,zero,403e3f8 <add_route+0x1cc>
         {
            newrt = rtp;   /* record empty route for use */
 403e3e4:	e0bffa17 	ldw	r2,-24(fp)
 403e3e8:	e0bff915 	stw	r2,-28(fp)
            newrt->ipRouteProto = 0;
 403e3ec:	e0bff917 	ldw	r2,-28(fp)
 403e3f0:	10000815 	stw	zero,32(r2)
            continue;
 403e3f4:	00004006 	br	403e4f8 <add_route+0x2cc>
         }
         /* else see if the new route has higher priority than this slot: */
         if (rtp_priority[prot] >= rtp_priority[rtp->ipRouteProto])
 403e3f8:	e0c00217 	ldw	r3,8(fp)
 403e3fc:	00810174 	movhi	r2,1029
 403e400:	10b96004 	addi	r2,r2,-6784
 403e404:	10c5883a 	add	r2,r2,r3
 403e408:	11000003 	ldbu	r4,0(r2)
 403e40c:	e0bffa17 	ldw	r2,-24(fp)
 403e410:	10c00817 	ldw	r3,32(r2)
 403e414:	00810174 	movhi	r2,1029
 403e418:	10b96004 	addi	r2,r2,-6784
 403e41c:	10c5883a 	add	r2,r2,r3
 403e420:	10800003 	ldbu	r2,0(r2)
 403e424:	20c03fcc 	andi	r3,r4,255
 403e428:	10803fcc 	andi	r2,r2,255
 403e42c:	18803236 	bltu	r3,r2,403e4f8 <add_route+0x2cc>
         {
            if (!newrt)
 403e430:	e0bff917 	ldw	r2,-28(fp)
 403e434:	1004c03a 	cmpne	r2,r2,zero
 403e438:	1000031e 	bne	r2,zero,403e448 <add_route+0x21c>
            {
               newrt = rtp;
 403e43c:	e0bffa17 	ldw	r2,-24(fp)
 403e440:	e0bff915 	stw	r2,-28(fp)
               continue;
 403e444:	00002c06 	br	403e4f8 <add_route+0x2cc>
            }

            /* see if rtp is less important then newrtp */
            if (rtp_priority[rtp->ipRouteProto] < 
 403e448:	e0bffa17 	ldw	r2,-24(fp)
 403e44c:	10c00817 	ldw	r3,32(r2)
 403e450:	00810174 	movhi	r2,1029
 403e454:	10b96004 	addi	r2,r2,-6784
 403e458:	10c5883a 	add	r2,r2,r3
 403e45c:	11000003 	ldbu	r4,0(r2)
 403e460:	e0bff917 	ldw	r2,-28(fp)
 403e464:	10c00817 	ldw	r3,32(r2)
 403e468:	00810174 	movhi	r2,1029
 403e46c:	10b96004 	addi	r2,r2,-6784
 403e470:	10c5883a 	add	r2,r2,r3
 403e474:	10800003 	ldbu	r2,0(r2)
 403e478:	20c03fcc 	andi	r3,r4,255
 403e47c:	10803fcc 	andi	r2,r2,255
 403e480:	1880032e 	bgeu	r3,r2,403e490 <add_route+0x264>
                rtp_priority[newrt->ipRouteProto])
            {
               newrt = rtp;   /* save lower priority entry for recycle */
 403e484:	e0bffa17 	ldw	r2,-24(fp)
 403e488:	e0bff915 	stw	r2,-28(fp)
 403e48c:	00001a06 	br	403e4f8 <add_route+0x2cc>
            }
            else if(rtp_priority[rtp->ipRouteProto] == 
 403e490:	e0bffa17 	ldw	r2,-24(fp)
 403e494:	10c00817 	ldw	r3,32(r2)
 403e498:	00810174 	movhi	r2,1029
 403e49c:	10b96004 	addi	r2,r2,-6784
 403e4a0:	10c5883a 	add	r2,r2,r3
 403e4a4:	11000003 	ldbu	r4,0(r2)
 403e4a8:	e0bff917 	ldw	r2,-28(fp)
 403e4ac:	10c00817 	ldw	r3,32(r2)
 403e4b0:	00810174 	movhi	r2,1029
 403e4b4:	10b96004 	addi	r2,r2,-6784
 403e4b8:	10c5883a 	add	r2,r2,r3
 403e4bc:	10800003 	ldbu	r2,0(r2)
 403e4c0:	20c03fcc 	andi	r3,r4,255
 403e4c4:	10803fcc 	andi	r2,r2,255
 403e4c8:	18800b1e 	bne	r3,r2,403e4f8 <add_route+0x2cc>
                rtp_priority[newrt->ipRouteProto])
            {
               /* if equal priority, keep the older entry for deletion */
               if (c_older(rtp->ipRouteAge, newrt->ipRouteAge) == rtp->ipRouteAge)
 403e4cc:	e0bffa17 	ldw	r2,-24(fp)
 403e4d0:	11000917 	ldw	r4,36(r2)
 403e4d4:	e0bff917 	ldw	r2,-28(fp)
 403e4d8:	11400917 	ldw	r5,36(r2)
 403e4dc:	401e6d00 	call	401e6d0 <c_older>
 403e4e0:	1007883a 	mov	r3,r2
 403e4e4:	e0bffa17 	ldw	r2,-24(fp)
 403e4e8:	10800917 	ldw	r2,36(r2)
 403e4ec:	1880021e 	bne	r3,r2,403e4f8 <add_route+0x2cc>
                  newrt = rtp;   /* got an older one */
 403e4f0:	e0bffa17 	ldw	r2,-24(fp)
 403e4f4:	e0bff915 	stw	r2,-28(fp)
   }



   /* if it's already in the route table, just update it. */
   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 403e4f8:	e0bffa17 	ldw	r2,-24(fp)
 403e4fc:	10800f04 	addi	r2,r2,60
 403e500:	e0bffa15 	stw	r2,-24(fp)
 403e504:	00810174 	movhi	r2,1029
 403e508:	10ba0c04 	addi	r2,r2,-6096
 403e50c:	10800017 	ldw	r2,0(r2)
 403e510:	10800f24 	muli	r2,r2,60
 403e514:	1007883a 	mov	r3,r2
 403e518:	00810174 	movhi	r2,1029
 403e51c:	10820204 	addi	r2,r2,2056
 403e520:	10800017 	ldw	r2,0(r2)
 403e524:	1887883a 	add	r3,r3,r2
 403e528:	e0bffa17 	ldw	r2,-24(fp)
 403e52c:	10ff8636 	bltu	r2,r3,403e348 <add_route+0x11c>
         }
      }
   }

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
 403e530:	e0bff917 	ldw	r2,-28(fp)
 403e534:	1005003a 	cmpeq	r2,r2,zero
 403e538:	10002a1e 	bne	r2,zero,403e5e4 <add_route+0x3b8>
      rtp = newrt;   /* create new entry in lowest priority slot */
 403e53c:	e0bff917 	ldw	r2,-28(fp)
 403e540:	e0bffa15 	stw	r2,-24(fp)
   else  /* all slots have higher priority, new entry looses */
      return NULL;

   /* set default value in new route entry, caller can modiy further. */
   rtp->ifp = ifp;
 403e544:	e0fffa17 	ldw	r3,-24(fp)
 403e548:	e0bff817 	ldw	r2,-32(fp)
 403e54c:	18800e15 	stw	r2,56(r3)
   rtp->ipRouteDest = dest;
 403e550:	e0fffa17 	ldw	r3,-24(fp)
 403e554:	e0bffb17 	ldw	r2,-20(fp)
 403e558:	18800015 	stw	r2,0(r3)
   rtp->ipRouteIfIndex = (long)(if_netnumber(ifp)) + 1; /* set interface number */
 403e55c:	e13ff817 	ldw	r4,-32(fp)
 403e560:	401ed640 	call	401ed64 <if_netnumber>
 403e564:	10c00044 	addi	r3,r2,1
 403e568:	e0bffa17 	ldw	r2,-24(fp)
 403e56c:	10c00115 	stw	r3,4(r2)
   rtp->ipRouteMetric1 = ip_mib.ipDefaultTTL;
 403e570:	008101b4 	movhi	r2,1030
 403e574:	10a44e04 	addi	r2,r2,-28360
 403e578:	10800117 	ldw	r2,4(r2)
 403e57c:	1007883a 	mov	r3,r2
 403e580:	e0bffa17 	ldw	r2,-24(fp)
 403e584:	10c00215 	stw	r3,8(r2)
   rtp->ipRouteMetric2 = -1;
 403e588:	e0fffa17 	ldw	r3,-24(fp)
 403e58c:	00bfffc4 	movi	r2,-1
 403e590:	18800315 	stw	r2,12(r3)
   rtp->ipRouteMetric3 = -1;
 403e594:	e0fffa17 	ldw	r3,-24(fp)
 403e598:	00bfffc4 	movi	r2,-1
 403e59c:	18800415 	stw	r2,16(r3)
   rtp->ipRouteMetric4 = -1;
 403e5a0:	e0fffa17 	ldw	r3,-24(fp)
 403e5a4:	00bfffc4 	movi	r2,-1
 403e5a8:	18800515 	stw	r2,20(r3)
   rtp->ipRouteNextHop = nexthop;
 403e5ac:	e0fffa17 	ldw	r3,-24(fp)
 403e5b0:	e0bffd17 	ldw	r2,-12(fp)
 403e5b4:	18800615 	stw	r2,24(r3)
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */
 403e5b8:	e0fffa17 	ldw	r3,-24(fp)
 403e5bc:	e0800217 	ldw	r2,8(fp)
 403e5c0:	18800815 	stw	r2,32(r3)

   if ((dest & mask) == (nexthop & mask))
 403e5c4:	e0fffb17 	ldw	r3,-20(fp)
 403e5c8:	e0bffc17 	ldw	r2,-16(fp)
 403e5cc:	1888703a 	and	r4,r3,r2
 403e5d0:	e0fffd17 	ldw	r3,-12(fp)
 403e5d4:	e0bffc17 	ldw	r2,-16(fp)
 403e5d8:	1884703a 	and	r2,r3,r2
 403e5dc:	20800326 	beq	r4,r2,403e5ec <add_route+0x3c0>
 403e5e0:	00000606 	br	403e5fc <add_route+0x3d0>

   /* fall to here if not in table: create a new route */
   if (newrt)  /* did we find an empty or lower priority route entry? */
      rtp = newrt;   /* create new entry in lowest priority slot */
   else  /* all slots have higher priority, new entry looses */
      return NULL;
 403e5e4:	e03fff15 	stw	zero,-4(fp)
 403e5e8:	00001406 	br	403e63c <add_route+0x410>
   rtp->ipRouteMetric4 = -1;
   rtp->ipRouteNextHop = nexthop;
   rtp->ipRouteProto = prot;                 /* icmp, or whatever */

   if ((dest & mask) == (nexthop & mask))
      rtp->ipRouteType = IPRT_DIRECT;
 403e5ec:	e0fffa17 	ldw	r3,-24(fp)
 403e5f0:	008000c4 	movi	r2,3
 403e5f4:	18800715 	stw	r2,28(r3)
 403e5f8:	00000306 	br	403e608 <add_route+0x3dc>
   else
      rtp->ipRouteType = IPRT_INDIRECT;
 403e5fc:	e0fffa17 	ldw	r3,-24(fp)
 403e600:	00800104 	movi	r2,4
 403e604:	18800715 	stw	r2,28(r3)

   rtp->ipRouteAge = cticks;        /* timestamp it */
 403e608:	00810174 	movhi	r2,1029
 403e60c:	1081e404 	addi	r2,r2,1936
 403e610:	10c00017 	ldw	r3,0(r2)
 403e614:	e0bffa17 	ldw	r2,-24(fp)
 403e618:	10c00915 	stw	r3,36(r2)
   rtp->ipRouteMask = mask;
 403e61c:	e0fffa17 	ldw	r3,-24(fp)
 403e620:	e0bffc17 	ldw	r2,-16(fp)
 403e624:	18800a15 	stw	r2,40(r3)
   rtp->ipRouteMetric5 = -1;
 403e628:	e0fffa17 	ldw	r3,-24(fp)
 403e62c:	00bfffc4 	movi	r2,-1
 403e630:	18800b15 	stw	r2,44(r3)
   return(rtp);
 403e634:	e0bffa17 	ldw	r2,-24(fp)
 403e638:	e0bfff15 	stw	r2,-4(fp)
 403e63c:	e0bfff17 	ldw	r2,-4(fp)
}
 403e640:	e037883a 	mov	sp,fp
 403e644:	dfc00117 	ldw	ra,4(sp)
 403e648:	df000017 	ldw	fp,0(sp)
 403e64c:	dec00204 	addi	sp,sp,8
 403e650:	f800283a 	ret

0403e654 <del_route>:
 * RETURNS: Returns number of route table entries deleted. 
 */

int
del_route(ip_addr dest, ip_addr mask, int iface)
{
 403e654:	defff704 	addi	sp,sp,-36
 403e658:	dfc00815 	stw	ra,32(sp)
 403e65c:	df000715 	stw	fp,28(sp)
 403e660:	df000704 	addi	fp,sp,28
 403e664:	e13ffc15 	stw	r4,-16(fp)
 403e668:	e17ffd15 	stw	r5,-12(fp)
 403e66c:	e1bffe15 	stw	r6,-8(fp)
   RTMIB rtp;
   int   retval   =  0;
 403e670:	e03ffa15 	stw	zero,-24(fp)

   /* set the route interface pointer according to the index passed. This allows 
    * the passed index to be used to access dynamic interfaces, which do not appear 
    * in the nets[] array.
    */
   if(iface == -1)
 403e674:	e0bffe17 	ldw	r2,-8(fp)
 403e678:	10bfffd8 	cmpnei	r2,r2,-1
 403e67c:	1000021e 	bne	r2,zero,403e688 <del_route+0x34>
      ifp = NULL;    /* wildcard */
 403e680:	e03ff915 	stw	zero,-28(fp)
 403e684:	00000306 	br	403e694 <del_route+0x40>
   else
      ifp = if_getbynum(iface);
 403e688:	e13ffe17 	ldw	r4,-8(fp)
 403e68c:	40386740 	call	4038674 <if_getbynum>
 403e690:	e0bff915 	stw	r2,-28(fp)

   if (rt_mib == NULL)     /* Make sure we're up */
 403e694:	00810174 	movhi	r2,1029
 403e698:	10820204 	addi	r2,r2,2056
 403e69c:	10800017 	ldw	r2,0(r2)
 403e6a0:	1004c03a 	cmpne	r2,r2,zero
 403e6a4:	1000021e 	bne	r2,zero,403e6b0 <del_route+0x5c>
      return 0;
 403e6a8:	e03fff15 	stw	zero,-4(fp)
 403e6ac:	00003406 	br	403e780 <del_route+0x12c>

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 403e6b0:	00810174 	movhi	r2,1029
 403e6b4:	10820204 	addi	r2,r2,2056
 403e6b8:	10800017 	ldw	r2,0(r2)
 403e6bc:	e0bffb15 	stw	r2,-20(fp)
 403e6c0:	00002206 	br	403e74c <del_route+0xf8>
   {
      if (!rtp->ipRouteNextHop)  /* empty slot */
 403e6c4:	e0bffb17 	ldw	r2,-20(fp)
 403e6c8:	10800617 	ldw	r2,24(r2)
 403e6cc:	1005003a 	cmpeq	r2,r2,zero
 403e6d0:	10001b1e 	bne	r2,zero,403e740 <del_route+0xec>
         continue;
      if(ifp != NULL && ifp != rtp->ifp)
 403e6d4:	e0bff917 	ldw	r2,-28(fp)
 403e6d8:	1005003a 	cmpeq	r2,r2,zero
 403e6dc:	1000041e 	bne	r2,zero,403e6f0 <del_route+0x9c>
 403e6e0:	e0bffb17 	ldw	r2,-20(fp)
 403e6e4:	10c00e17 	ldw	r3,56(r2)
 403e6e8:	e0bff917 	ldw	r2,-28(fp)
 403e6ec:	1880141e 	bne	r3,r2,403e740 <del_route+0xec>
         continue;   /* interface didn't match */
      if ((rtp->ipRouteDest & mask) == (dest & mask))
 403e6f0:	e0bffb17 	ldw	r2,-20(fp)
 403e6f4:	10c00017 	ldw	r3,0(r2)
 403e6f8:	e0bffd17 	ldw	r2,-12(fp)
 403e6fc:	1888703a 	and	r4,r3,r2
 403e700:	e0fffc17 	ldw	r3,-16(fp)
 403e704:	e0bffd17 	ldw	r2,-12(fp)
 403e708:	1884703a 	and	r2,r3,r2
 403e70c:	2080081e 	bne	r4,r2,403e730 <del_route+0xdc>
      {
         MEMSET(rtp, 0, sizeof(*rtp)); /* clear entry */
 403e710:	e0bffb17 	ldw	r2,-20(fp)
 403e714:	1009883a 	mov	r4,r2
 403e718:	01800f04 	movi	r6,60
 403e71c:	000b883a 	mov	r5,zero
 403e720:	4001f640 	call	4001f64 <memset>
         retval++;
 403e724:	e0bffa17 	ldw	r2,-24(fp)
 403e728:	10800044 	addi	r2,r2,1
 403e72c:	e0bffa15 	stw	r2,-24(fp)
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
 403e730:	d0e84e17 	ldw	r3,-24264(gp)
 403e734:	e0bffb17 	ldw	r2,-20(fp)
 403e738:	1880011e 	bne	r3,r2,403e740 <del_route+0xec>
         cachedRoute = NULL;
 403e73c:	d0284e15 	stw	zero,-24264(gp)
      ifp = if_getbynum(iface);

   if (rt_mib == NULL)     /* Make sure we're up */
      return 0;

   for (rtp = rt_mib; rtp < rt_mib + ipRoutes; rtp++)
 403e740:	e0bffb17 	ldw	r2,-20(fp)
 403e744:	10800f04 	addi	r2,r2,60
 403e748:	e0bffb15 	stw	r2,-20(fp)
 403e74c:	00810174 	movhi	r2,1029
 403e750:	10ba0c04 	addi	r2,r2,-6096
 403e754:	10800017 	ldw	r2,0(r2)
 403e758:	10800f24 	muli	r2,r2,60
 403e75c:	1007883a 	mov	r3,r2
 403e760:	00810174 	movhi	r2,1029
 403e764:	10820204 	addi	r2,r2,2056
 403e768:	10800017 	ldw	r2,0(r2)
 403e76c:	1887883a 	add	r3,r3,r2
 403e770:	e0bffb17 	ldw	r2,-20(fp)
 403e774:	10ffd336 	bltu	r2,r3,403e6c4 <del_route+0x70>
         retval++;
      }
      if (cachedRoute == rtp) /* clear cache if it's being deleted */
         cachedRoute = NULL;
   }
   return retval;
 403e778:	e0bffa17 	ldw	r2,-24(fp)
 403e77c:	e0bfff15 	stw	r2,-4(fp)
 403e780:	e0bfff17 	ldw	r2,-4(fp)
}
 403e784:	e037883a 	mov	sp,fp
 403e788:	dfc00117 	ldw	ra,4(sp)
 403e78c:	df000017 	ldw	fp,0(sp)
 403e790:	dec00204 	addi	sp,sp,8
 403e794:	f800283a 	ret

0403e798 <udpdemux>:
 * RETURNS: 0 if OK or ENP error code
 */

int
udpdemux(PACKET p)
{
 403e798:	deffec04 	addi	sp,sp,-80
 403e79c:	dfc01315 	stw	ra,76(sp)
 403e7a0:	df001215 	stw	fp,72(sp)
 403e7a4:	df001204 	addi	fp,sp,72
 403e7a8:	e13ffe15 	stw	r4,-8(fp)
   unsigned short osum, xsum; /* scratch checksum holders */
   unsigned plen; /* packet length */
   int   e;    /* general error holder */

   /* First let's verify that it's a valid UDP packet. */
   pip = ip_head(p);       /* we'll need IP header info */
 403e7ac:	e0bffe17 	ldw	r2,-8(fp)
 403e7b0:	10800317 	ldw	r2,12(r2)
 403e7b4:	e0bffa15 	stw	r2,-24(fp)
   pup = (struct udp*)ip_data(pip);   /*  also need UDP header */
 403e7b8:	e0bffa17 	ldw	r2,-24(fp)
 403e7bc:	10800003 	ldbu	r2,0(r2)
 403e7c0:	10803fcc 	andi	r2,r2,255
 403e7c4:	108003cc 	andi	r2,r2,15
 403e7c8:	1085883a 	add	r2,r2,r2
 403e7cc:	1085883a 	add	r2,r2,r2
 403e7d0:	1007883a 	mov	r3,r2
 403e7d4:	e0bffa17 	ldw	r2,-24(fp)
 403e7d8:	1885883a 	add	r2,r3,r2
 403e7dc:	e0bff915 	stw	r2,-28(fp)
   plen = htons(pup->ud_len);
 403e7e0:	e0bff917 	ldw	r2,-28(fp)
 403e7e4:	1080010b 	ldhu	r2,4(r2)
 403e7e8:	10bfffcc 	andi	r2,r2,65535
 403e7ec:	1004d23a 	srli	r2,r2,8
 403e7f0:	10bfffcc 	andi	r2,r2,65535
 403e7f4:	10c03fcc 	andi	r3,r2,255
 403e7f8:	e0bff917 	ldw	r2,-28(fp)
 403e7fc:	1080010b 	ldhu	r2,4(r2)
 403e800:	10bfffcc 	andi	r2,r2,65535
 403e804:	1004923a 	slli	r2,r2,8
 403e808:	10bfc00c 	andi	r2,r2,65280
 403e80c:	1884b03a 	or	r2,r3,r2
 403e810:	e0bff615 	stw	r2,-40(fp)

   if (plen > p->nb_plen)
 403e814:	e0bffe17 	ldw	r2,-8(fp)
 403e818:	10c00417 	ldw	r3,16(r2)
 403e81c:	e0bff617 	ldw	r2,-40(fp)
 403e820:	18802a2e 	bgeu	r3,r2,403e8cc <udpdemux+0x134>
#ifdef   NPDEBUG
/* 
 * Altera Niche Stack Nios port modification:
 * cast arg to unsigned long to remove build warning
 */
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 403e824:	00810174 	movhi	r2,1029
 403e828:	1081bf04 	addi	r2,r2,1788
 403e82c:	10800017 	ldw	r2,0(r2)
 403e830:	1081000c 	andi	r2,r2,1024
 403e834:	1005003a 	cmpeq	r2,r2,zero
 403e838:	1000181e 	bne	r2,zero,403e89c <udpdemux+0x104>
 403e83c:	00810174 	movhi	r2,1029
 403e840:	1081bf04 	addi	r2,r2,1788
 403e844:	10800017 	ldw	r2,0(r2)
 403e848:	1080400c 	andi	r2,r2,256
 403e84c:	1005003a 	cmpeq	r2,r2,zero
 403e850:	1000121e 	bne	r2,zero,403e89c <udpdemux+0x104>
         dprintf("UDP: bad len pkt: rcvd: %u, hdr: %u.\n",
 403e854:	e0bffe17 	ldw	r2,-8(fp)
 403e858:	11400417 	ldw	r5,16(r2)
 403e85c:	e0bff917 	ldw	r2,-28(fp)
 403e860:	1080010b 	ldhu	r2,4(r2)
 403e864:	10bfffcc 	andi	r2,r2,65535
 403e868:	1004d23a 	srli	r2,r2,8
 403e86c:	10bfffcc 	andi	r2,r2,65535
 403e870:	10c03fcc 	andi	r3,r2,255
 403e874:	e0bff917 	ldw	r2,-28(fp)
 403e878:	1080010b 	ldhu	r2,4(r2)
 403e87c:	10bfffcc 	andi	r2,r2,65535
 403e880:	1004923a 	slli	r2,r2,8
 403e884:	10bfc00c 	andi	r2,r2,65280
 403e888:	1884b03a 	or	r2,r3,r2
 403e88c:	11800204 	addi	r6,r2,8
 403e890:	01010174 	movhi	r4,1029
 403e894:	21306a04 	addi	r4,r4,-15960
 403e898:	400207c0 	call	400207c <printf>
                 p->nb_plen, (unsigned int)(htons(pup->ud_len) + UDPLEN));
#endif
      udp_mib.udpInErrors++;
 403e89c:	008101b4 	movhi	r2,1030
 403e8a0:	10a46804 	addi	r2,r2,-28256
 403e8a4:	10800217 	ldw	r2,8(r2)
 403e8a8:	10c00044 	addi	r3,r2,1
 403e8ac:	008101b4 	movhi	r2,1030
 403e8b0:	10a46804 	addi	r2,r2,-28256
 403e8b4:	10c00215 	stw	r3,8(r2)
      udp_free(p);
 403e8b8:	e13ffe17 	ldw	r4,-8(fp)
 403e8bc:	403f5940 	call	403f594 <udp_free>
      return ENP_BAD_HEADER;
 403e8c0:	00bff804 	movi	r2,-32
 403e8c4:	e0bfff15 	stw	r2,-4(fp)
 403e8c8:	0001c306 	br	403efd8 <udpdemux+0x840>
   }

   osum = pup->ud_cksum;
 403e8cc:	e0bff917 	ldw	r2,-28(fp)
 403e8d0:	1080018b 	ldhu	r2,6(r2)
 403e8d4:	e0bff78d 	sth	r2,-34(fp)
   /* did other guy use checksumming? */
   if (osum)
 403e8d8:	e0bff78b 	ldhu	r2,-34(fp)
 403e8dc:	1005003a 	cmpeq	r2,r2,zero
 403e8e0:	1000631e 	bne	r2,zero,403ea70 <udpdemux+0x2d8>
   {
      if (plen & 1) ((char *)pup)[plen] = 0;
 403e8e4:	e0bff617 	ldw	r2,-40(fp)
 403e8e8:	1080004c 	andi	r2,r2,1
 403e8ec:	10803fcc 	andi	r2,r2,255
 403e8f0:	1005003a 	cmpeq	r2,r2,zero
 403e8f4:	1000041e 	bne	r2,zero,403e908 <udpdemux+0x170>
 403e8f8:	e0bff917 	ldw	r2,-28(fp)
 403e8fc:	e0fff617 	ldw	r3,-40(fp)
 403e900:	10c5883a 	add	r2,r2,r3
 403e904:	10000005 	stb	zero,0(r2)
         php.ph_src = p->fhost;
 403e908:	e0bffe17 	ldw	r2,-8(fp)
 403e90c:	10800717 	ldw	r2,28(r2)
 403e910:	e0bffb15 	stw	r2,-20(fp)
      php.ph_dest = pip->ip_dest;
 403e914:	e0bffa17 	ldw	r2,-24(fp)
 403e918:	10800417 	ldw	r2,16(r2)
 403e91c:	e0bffc15 	stw	r2,-16(fp)
      php.ph_zero = 0;
 403e920:	e03ffd05 	stb	zero,-12(fp)
      php.ph_prot = UDP_PROT;
 403e924:	00800444 	movi	r2,17
 403e928:	e0bffd45 	stb	r2,-11(fp)
      php.ph_len  = pup->ud_len;
 403e92c:	e0bff917 	ldw	r2,-28(fp)
 403e930:	1080010b 	ldhu	r2,4(r2)
 403e934:	e0bffd8d 	sth	r2,-10(fp)

      pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 403e938:	e13ffb04 	addi	r4,fp,-20
 403e93c:	01400184 	movi	r5,6
 403e940:	4020a000 	call	4020a00 <cksum>
 403e944:	1007883a 	mov	r3,r2
 403e948:	e0bff917 	ldw	r2,-28(fp)
 403e94c:	10c0018d 	sth	r3,6(r2)
      xsum = ~cksum(pup, (plen+1)>>1);
 403e950:	e0bff617 	ldw	r2,-40(fp)
 403e954:	10800044 	addi	r2,r2,1
 403e958:	100ad07a 	srli	r5,r2,1
 403e95c:	e13ff917 	ldw	r4,-28(fp)
 403e960:	4020a000 	call	4020a00 <cksum>
 403e964:	0084303a 	nor	r2,zero,r2
 403e968:	e0bff70d 	sth	r2,-36(fp)
      if (!xsum)
 403e96c:	e0bff70b 	ldhu	r2,-36(fp)
 403e970:	1004c03a 	cmpne	r2,r2,zero
 403e974:	1000021e 	bne	r2,zero,403e980 <udpdemux+0x1e8>
         xsum = 0xffff;
 403e978:	00bfffc4 	movi	r2,-1
 403e97c:	e0bff70d 	sth	r2,-36(fp)
      pup->ud_cksum = osum;
 403e980:	e0fff917 	ldw	r3,-28(fp)
 403e984:	e0bff78b 	ldhu	r2,-34(fp)
 403e988:	1880018d 	sth	r2,6(r3)
      if (xsum != osum)
 403e98c:	e0fff70b 	ldhu	r3,-36(fp)
 403e990:	e0bff78b 	ldhu	r2,-34(fp)
 403e994:	18803626 	beq	r3,r2,403ea70 <udpdemux+0x2d8>
      {
#ifdef   NPDEBUG
         if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 403e998:	00810174 	movhi	r2,1029
 403e99c:	1081bf04 	addi	r2,r2,1788
 403e9a0:	10800017 	ldw	r2,0(r2)
 403e9a4:	1081000c 	andi	r2,r2,1024
 403e9a8:	1005003a 	cmpeq	r2,r2,zero
 403e9ac:	1000241e 	bne	r2,zero,403ea40 <udpdemux+0x2a8>
 403e9b0:	00810174 	movhi	r2,1029
 403e9b4:	1081bf04 	addi	r2,r2,1788
 403e9b8:	10800017 	ldw	r2,0(r2)
 403e9bc:	1080400c 	andi	r2,r2,256
 403e9c0:	1005003a 	cmpeq	r2,r2,zero
 403e9c4:	10001e1e 	bne	r2,zero,403ea40 <udpdemux+0x2a8>
         {
            dprintf("UDPDEMUX: bad xsum %04x right %04x from %u.%u.%u.%u\n",
 403e9c8:	e17ff78b 	ldhu	r5,-34(fp)
 403e9cc:	e1bff70b 	ldhu	r6,-36(fp)
 403e9d0:	e0bffe17 	ldw	r2,-8(fp)
 403e9d4:	10800717 	ldw	r2,28(r2)
 403e9d8:	11c03fcc 	andi	r7,r2,255
 403e9dc:	e0bffe17 	ldw	r2,-8(fp)
 403e9e0:	10800717 	ldw	r2,28(r2)
 403e9e4:	1004d23a 	srli	r2,r2,8
 403e9e8:	11003fcc 	andi	r4,r2,255
 403e9ec:	e0bffe17 	ldw	r2,-8(fp)
 403e9f0:	10800717 	ldw	r2,28(r2)
 403e9f4:	1004d43a 	srli	r2,r2,16
 403e9f8:	10c03fcc 	andi	r3,r2,255
 403e9fc:	e0bffe17 	ldw	r2,-8(fp)
 403ea00:	10800717 	ldw	r2,28(r2)
 403ea04:	1004d63a 	srli	r2,r2,24
 403ea08:	d9000015 	stw	r4,0(sp)
 403ea0c:	d8c00115 	stw	r3,4(sp)
 403ea10:	d8800215 	stw	r2,8(sp)
 403ea14:	01010174 	movhi	r4,1029
 403ea18:	21307404 	addi	r4,r4,-15920
 403ea1c:	400207c0 	call	400207c <printf>
                    osum, xsum, PUSH_IPADDR(p->fhost));
            if (NDEBUG & DUMP)
 403ea20:	00810174 	movhi	r2,1029
 403ea24:	1081bf04 	addi	r2,r2,1788
 403ea28:	10800017 	ldw	r2,0(r2)
 403ea2c:	1080008c 	andi	r2,r2,2
 403ea30:	1005003a 	cmpeq	r2,r2,zero
 403ea34:	1000021e 	bne	r2,zero,403ea40 <udpdemux+0x2a8>
               ip_dump(p);
 403ea38:	e13ffe17 	ldw	r4,-8(fp)
 403ea3c:	403a55c0 	call	403a55c <ip_dump>
         }
#endif
         udp_mib.udpInErrors++;
 403ea40:	008101b4 	movhi	r2,1030
 403ea44:	10a46804 	addi	r2,r2,-28256
 403ea48:	10800217 	ldw	r2,8(r2)
 403ea4c:	10c00044 	addi	r3,r2,1
 403ea50:	008101b4 	movhi	r2,1030
 403ea54:	10a46804 	addi	r2,r2,-28256
 403ea58:	10c00215 	stw	r3,8(r2)
         udp_free(p);
 403ea5c:	e13ffe17 	ldw	r4,-8(fp)
 403ea60:	403f5940 	call	403f594 <udp_free>
         return ENP_BAD_HEADER;
 403ea64:	00bff804 	movi	r2,-32
 403ea68:	e0bfff15 	stw	r2,-4(fp)
 403ea6c:	00015a06 	br	403efd8 <udpdemux+0x840>
      }
   }

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 403ea70:	e13ff917 	ldw	r4,-28(fp)
 403ea74:	403f2a80 	call	403f2a8 <udpswap>
#endif

   /* Prior to upcall, adjust nb_prot for size of IP and UDP headers */
   e = (sizeof(struct udp) + ip_hlen(pip));
 403ea78:	e0bffa17 	ldw	r2,-24(fp)
 403ea7c:	10800003 	ldbu	r2,0(r2)
 403ea80:	10803fcc 	andi	r2,r2,255
 403ea84:	108003cc 	andi	r2,r2,15
 403ea88:	1085883a 	add	r2,r2,r2
 403ea8c:	1085883a 	add	r2,r2,r2
 403ea90:	10800204 	addi	r2,r2,8
 403ea94:	e0bff515 	stw	r2,-44(fp)
   p->nb_plen -= e;
 403ea98:	e0bffe17 	ldw	r2,-8(fp)
 403ea9c:	10c00417 	ldw	r3,16(r2)
 403eaa0:	e0bff517 	ldw	r2,-44(fp)
 403eaa4:	1887c83a 	sub	r3,r3,r2
 403eaa8:	e0bffe17 	ldw	r2,-8(fp)
 403eaac:	10c00415 	stw	r3,16(r2)
   p->nb_prot += e;
 403eab0:	e0bffe17 	ldw	r2,-8(fp)
 403eab4:	10c00317 	ldw	r3,12(r2)
 403eab8:	e0bff517 	ldw	r2,-44(fp)
 403eabc:	1887883a 	add	r3,r3,r2
 403eac0:	e0bffe17 	ldw	r2,-8(fp)
 403eac4:	10c00315 	stw	r3,12(r2)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 403eac8:	00810174 	movhi	r2,1029
 403eacc:	1081bf04 	addi	r2,r2,1788
 403ead0:	10800017 	ldw	r2,0(r2)
 403ead4:	1081000c 	andi	r2,r2,1024
 403ead8:	1005003a 	cmpeq	r2,r2,zero
 403eadc:	1000221e 	bne	r2,zero,403eb68 <udpdemux+0x3d0>
 403eae0:	00810174 	movhi	r2,1029
 403eae4:	1081bf04 	addi	r2,r2,1788
 403eae8:	10800017 	ldw	r2,0(r2)
 403eaec:	1080400c 	andi	r2,r2,256
 403eaf0:	1005003a 	cmpeq	r2,r2,zero
 403eaf4:	10001c1e 	bne	r2,zero,403eb68 <udpdemux+0x3d0>
   {
      dprintf("UDP: pkt[%u] from %u.%u.%u.%u:%d to %d\n",
 403eaf8:	e0bffe17 	ldw	r2,-8(fp)
 403eafc:	10800717 	ldw	r2,28(r2)
 403eb00:	11803fcc 	andi	r6,r2,255
 403eb04:	e0bffe17 	ldw	r2,-8(fp)
 403eb08:	10800717 	ldw	r2,28(r2)
 403eb0c:	1004d23a 	srli	r2,r2,8
 403eb10:	11c03fcc 	andi	r7,r2,255
 403eb14:	e0bffe17 	ldw	r2,-8(fp)
 403eb18:	10800717 	ldw	r2,28(r2)
 403eb1c:	1004d43a 	srli	r2,r2,16
 403eb20:	10c03fcc 	andi	r3,r2,255
 403eb24:	e0bffe17 	ldw	r2,-8(fp)
 403eb28:	10800717 	ldw	r2,28(r2)
 403eb2c:	1008d63a 	srli	r4,r2,24
 403eb30:	e0bff917 	ldw	r2,-28(fp)
 403eb34:	1080000b 	ldhu	r2,0(r2)
 403eb38:	117fffcc 	andi	r5,r2,65535
 403eb3c:	e0bff917 	ldw	r2,-28(fp)
 403eb40:	1080008b 	ldhu	r2,2(r2)
 403eb44:	10bfffcc 	andi	r2,r2,65535
 403eb48:	d8c00015 	stw	r3,0(sp)
 403eb4c:	d9000115 	stw	r4,4(sp)
 403eb50:	d9400215 	stw	r5,8(sp)
 403eb54:	d8800315 	stw	r2,12(sp)
 403eb58:	01010174 	movhi	r4,1029
 403eb5c:	21308204 	addi	r4,r4,-15864
 403eb60:	e17ff617 	ldw	r5,-40(fp)
 403eb64:	400207c0 	call	400207c <printf>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
 403eb68:	00810174 	movhi	r2,1029
 403eb6c:	1081d804 	addi	r2,r2,1888
 403eb70:	10800017 	ldw	r2,0(r2)
 403eb74:	e0bff815 	stw	r2,-32(fp)
 403eb78:	0000b106 	br	403ee40 <udpdemux+0x6a8>
         continue;
#endif

      /* enforce all three aspects of tuple matching. Old code
      assumed lport was unique, which is not always so. */
      if (con->u_lport && (con->u_lport != pup->ud_dstp))
 403eb7c:	e0bff817 	ldw	r2,-32(fp)
 403eb80:	1080018b 	ldhu	r2,6(r2)
 403eb84:	10bfffcc 	andi	r2,r2,65535
 403eb88:	1005003a 	cmpeq	r2,r2,zero
 403eb8c:	1000071e 	bne	r2,zero,403ebac <udpdemux+0x414>
 403eb90:	e0bff817 	ldw	r2,-32(fp)
 403eb94:	10c0018b 	ldhu	r3,6(r2)
 403eb98:	e0bff917 	ldw	r2,-28(fp)
 403eb9c:	1080008b 	ldhu	r2,2(r2)
 403eba0:	18ffffcc 	andi	r3,r3,65535
 403eba4:	10bfffcc 	andi	r2,r2,65535
 403eba8:	1880a21e 	bne	r3,r2,403ee34 <udpdemux+0x69c>
         continue;
      if (con->u_fport && (con->u_fport != pup->ud_srcp))
 403ebac:	e0bff817 	ldw	r2,-32(fp)
 403ebb0:	1080020b 	ldhu	r2,8(r2)
 403ebb4:	10bfffcc 	andi	r2,r2,65535
 403ebb8:	1005003a 	cmpeq	r2,r2,zero
 403ebbc:	1000071e 	bne	r2,zero,403ebdc <udpdemux+0x444>
 403ebc0:	e0bff817 	ldw	r2,-32(fp)
 403ebc4:	10c0020b 	ldhu	r3,8(r2)
 403ebc8:	e0bff917 	ldw	r2,-28(fp)
 403ebcc:	1080000b 	ldhu	r2,0(r2)
 403ebd0:	18ffffcc 	andi	r3,r3,65535
 403ebd4:	10bfffcc 	andi	r2,r2,65535
 403ebd8:	1880961e 	bne	r3,r2,403ee34 <udpdemux+0x69c>
         continue;
      if (con->u_fhost && (con->u_fhost != p->fhost))
 403ebdc:	e0bff817 	ldw	r2,-32(fp)
 403ebe0:	10800417 	ldw	r2,16(r2)
 403ebe4:	1005003a 	cmpeq	r2,r2,zero
 403ebe8:	1000051e 	bne	r2,zero,403ec00 <udpdemux+0x468>
 403ebec:	e0bff817 	ldw	r2,-32(fp)
 403ebf0:	10c00417 	ldw	r3,16(r2)
 403ebf4:	e0bffe17 	ldw	r2,-8(fp)
 403ebf8:	10800717 	ldw	r2,28(r2)
 403ebfc:	18808d1e 	bne	r3,r2,403ee34 <udpdemux+0x69c>
#ifdef IP_MULTICAST
      /* In the case of multicast, check if there is multicast membership
       * attached to this socket and if so, is the incoming packet
       * addressed to the multicast address
       */
      if (IN_MULTICAST(ntohl(pip->ip_dest)))
 403ec00:	e0bffa17 	ldw	r2,-24(fp)
 403ec04:	10800417 	ldw	r2,16(r2)
 403ec08:	1004d63a 	srli	r2,r2,24
 403ec0c:	10c03fcc 	andi	r3,r2,255
 403ec10:	e0bffa17 	ldw	r2,-24(fp)
 403ec14:	10800417 	ldw	r2,16(r2)
 403ec18:	1004d23a 	srli	r2,r2,8
 403ec1c:	10bfc00c 	andi	r2,r2,65280
 403ec20:	1886b03a 	or	r3,r3,r2
 403ec24:	e0bffa17 	ldw	r2,-24(fp)
 403ec28:	10800417 	ldw	r2,16(r2)
 403ec2c:	10bfc00c 	andi	r2,r2,65280
 403ec30:	1004923a 	slli	r2,r2,8
 403ec34:	1886b03a 	or	r3,r3,r2
 403ec38:	e0bffa17 	ldw	r2,-24(fp)
 403ec3c:	10800417 	ldw	r2,16(r2)
 403ec40:	10803fcc 	andi	r2,r2,255
 403ec44:	1004963a 	slli	r2,r2,24
 403ec48:	1884b03a 	or	r2,r3,r2
 403ec4c:	10fc002c 	andhi	r3,r2,61440
 403ec50:	00b80034 	movhi	r2,57344
 403ec54:	1880301e 	bne	r3,r2,403ed18 <udpdemux+0x580>
      {
         struct socket *soptr = (struct socket *)con->u_data;
 403ec58:	e0bff817 	ldw	r2,-32(fp)
 403ec5c:	10800617 	ldw	r2,24(r2)
 403ec60:	e0bff415 	stw	r2,-48(fp)

         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
 403ec64:	e0bff817 	ldw	r2,-32(fp)
 403ec68:	10c00517 	ldw	r3,20(r2)
 403ec6c:	008100f4 	movhi	r2,1027
 403ec70:	1090be04 	addi	r2,r2,17144
 403ec74:	1880281e 	bne	r3,r2,403ed18 <udpdemux+0x580>
 403ec78:	e0bff417 	ldw	r2,-48(fp)
 403ec7c:	10800317 	ldw	r2,12(r2)
 403ec80:	1005003a 	cmpeq	r2,r2,zero
 403ec84:	1000241e 	bne	r2,zero,403ed18 <udpdemux+0x580>
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;
 403ec88:	e0bff417 	ldw	r2,-48(fp)
 403ec8c:	10800317 	ldw	r2,12(r2)
 403ec90:	e0bff215 	stw	r2,-56(fp)

            for (i = 0; i < imo->imo_num_memberships; ++i)
 403ec94:	e03ff30d 	sth	zero,-52(fp)
 403ec98:	00001906 	br	403ed00 <udpdemux+0x568>
            {
               if ((imo->imo_membership[i]->inm_netp == p->net) &&
 403ec9c:	e0bff30b 	ldhu	r2,-52(fp)
 403eca0:	e0fff217 	ldw	r3,-56(fp)
 403eca4:	1085883a 	add	r2,r2,r2
 403eca8:	1085883a 	add	r2,r2,r2
 403ecac:	10c5883a 	add	r2,r2,r3
 403ecb0:	10800204 	addi	r2,r2,8
 403ecb4:	10800017 	ldw	r2,0(r2)
 403ecb8:	10c00117 	ldw	r3,4(r2)
 403ecbc:	e0bffe17 	ldw	r2,-8(fp)
 403ecc0:	10800617 	ldw	r2,24(r2)
 403ecc4:	18800b1e 	bne	r3,r2,403ecf4 <udpdemux+0x55c>
 403ecc8:	e0bff30b 	ldhu	r2,-52(fp)
 403eccc:	e0fff217 	ldw	r3,-56(fp)
 403ecd0:	1085883a 	add	r2,r2,r2
 403ecd4:	1085883a 	add	r2,r2,r2
 403ecd8:	10c5883a 	add	r2,r2,r3
 403ecdc:	10800204 	addi	r2,r2,8
 403ece0:	10800017 	ldw	r2,0(r2)
 403ece4:	10c00017 	ldw	r3,0(r2)
 403ece8:	e0bffa17 	ldw	r2,-24(fp)
 403ecec:	10800417 	ldw	r2,16(r2)
 403ecf0:	18800926 	beq	r3,r2,403ed18 <udpdemux+0x580>
         if ((con->u_rcv == udp_soinput) && (soptr->inp_moptions != NULL))
         {
            u_short  i;
            struct ip_moptions *imo = soptr->inp_moptions;

            for (i = 0; i < imo->imo_num_memberships; ++i)
 403ecf4:	e0bff30b 	ldhu	r2,-52(fp)
 403ecf8:	10800044 	addi	r2,r2,1
 403ecfc:	e0bff30d 	sth	r2,-52(fp)
 403ed00:	e0bff217 	ldw	r2,-56(fp)
 403ed04:	1080018b 	ldhu	r2,6(r2)
 403ed08:	10ffffcc 	andi	r3,r2,65535
 403ed0c:	e0bff30b 	ldhu	r2,-52(fp)
 403ed10:	10ffe236 	bltu	r2,r3,403ec9c <udpdemux+0x504>
                   (imo->imo_membership[i]->inm_addr == pip->ip_dest))
               {
                  goto found;
               }
            }
            continue;
 403ed14:	00004706 	br	403ee34 <udpdemux+0x69c>
#endif /* INCLUDE_TCP */

      /* if this endpoint has been bound to a local interface address,
       * make sure the packet was received on that interface address
       */
      if (!IN_MULTICAST(ntohl(pip->ip_dest)))
 403ed18:	e0bffa17 	ldw	r2,-24(fp)
 403ed1c:	10800417 	ldw	r2,16(r2)
 403ed20:	1004d63a 	srli	r2,r2,24
 403ed24:	10c03fcc 	andi	r3,r2,255
 403ed28:	e0bffa17 	ldw	r2,-24(fp)
 403ed2c:	10800417 	ldw	r2,16(r2)
 403ed30:	1004d23a 	srli	r2,r2,8
 403ed34:	10bfc00c 	andi	r2,r2,65280
 403ed38:	1886b03a 	or	r3,r3,r2
 403ed3c:	e0bffa17 	ldw	r2,-24(fp)
 403ed40:	10800417 	ldw	r2,16(r2)
 403ed44:	10bfc00c 	andi	r2,r2,65280
 403ed48:	1004923a 	slli	r2,r2,8
 403ed4c:	1886b03a 	or	r3,r3,r2
 403ed50:	e0bffa17 	ldw	r2,-24(fp)
 403ed54:	10800417 	ldw	r2,16(r2)
 403ed58:	10803fcc 	andi	r2,r2,255
 403ed5c:	1004963a 	slli	r2,r2,24
 403ed60:	1884b03a 	or	r2,r3,r2
 403ed64:	10fc002c 	andhi	r3,r2,61440
 403ed68:	00b80034 	movhi	r2,57344
 403ed6c:	18800926 	beq	r3,r2,403ed94 <udpdemux+0x5fc>
      {
         if ((con->u_lhost != 0) && (con->u_lhost != pip->ip_dest)) 
 403ed70:	e0bff817 	ldw	r2,-32(fp)
 403ed74:	10800317 	ldw	r2,12(r2)
 403ed78:	1005003a 	cmpeq	r2,r2,zero
 403ed7c:	1000051e 	bne	r2,zero,403ed94 <udpdemux+0x5fc>
 403ed80:	e0bff817 	ldw	r2,-32(fp)
 403ed84:	10c00317 	ldw	r3,12(r2)
 403ed88:	e0bffa17 	ldw	r2,-24(fp)
 403ed8c:	10800417 	ldw	r2,16(r2)
 403ed90:	1880281e 	bne	r3,r2,403ee34 <udpdemux+0x69c>
            continue;
      }

      /* fall to here if we found it */
      udp_mib.udpInDatagrams++;
 403ed94:	008101b4 	movhi	r2,1030
 403ed98:	10a46804 	addi	r2,r2,-28256
 403ed9c:	10800017 	ldw	r2,0(r2)
 403eda0:	10c00044 	addi	r3,r2,1
 403eda4:	008101b4 	movhi	r2,1030
 403eda8:	10a46804 	addi	r2,r2,-28256
 403edac:	10c00015 	stw	r3,0(r2)
      if (con->u_rcv)         /* if upcall address is set... */
 403edb0:	e0bff817 	ldw	r2,-32(fp)
 403edb4:	10800517 	ldw	r2,20(r2)
 403edb8:	1005003a 	cmpeq	r2,r2,zero
 403edbc:	10000c1e 	bne	r2,zero,403edf0 <udpdemux+0x658>
      {
         UNLOCK_NET_RESOURCE(NET_RESID);
 403edc0:	0009883a 	mov	r4,zero
 403edc4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         e = ((*con->u_rcv)(p, con->u_data));   /* upcall it */
 403edc8:	e0bff817 	ldw	r2,-32(fp)
 403edcc:	10c00517 	ldw	r3,20(r2)
 403edd0:	e0bff817 	ldw	r2,-32(fp)
 403edd4:	11400617 	ldw	r5,24(r2)
 403edd8:	e13ffe17 	ldw	r4,-8(fp)
 403eddc:	183ee83a 	callr	r3
 403ede0:	e0bff515 	stw	r2,-44(fp)
         LOCK_NET_RESOURCE(NET_RESID);
 403ede4:	0009883a 	mov	r4,zero
 403ede8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
 403edec:	00000206 	br	403edf8 <udpdemux+0x660>
      }
      else
         e = ENP_LOGIC;
 403edf0:	00bffd44 	movi	r2,-11
 403edf4:	e0bff515 	stw	r2,-44(fp)

      /* if error occurred in upcall or there was no upcall hander
         its up to this routine to free the packet buffer */
      if (e)
 403edf8:	e0bff517 	ldw	r2,-44(fp)
 403edfc:	1005003a 	cmpeq	r2,r2,zero
 403ee00:	1000091e 	bne	r2,zero,403ee28 <udpdemux+0x690>
      {
         udp_mib.udpInErrors++;
 403ee04:	008101b4 	movhi	r2,1030
 403ee08:	10a46804 	addi	r2,r2,-28256
 403ee0c:	10800217 	ldw	r2,8(r2)
 403ee10:	10c00044 	addi	r3,r2,1
 403ee14:	008101b4 	movhi	r2,1030
 403ee18:	10a46804 	addi	r2,r2,-28256
 403ee1c:	10c00215 	stw	r3,8(r2)
         udp_free(p);
 403ee20:	e13ffe17 	ldw	r4,-8(fp)
 403ee24:	403f5940 	call	403f594 <udp_free>
      }

      return(e);
 403ee28:	e0bff517 	ldw	r2,-44(fp)
 403ee2c:	e0bfff15 	stw	r2,-4(fp)
 403ee30:	00006906 	br	403efd8 <udpdemux+0x840>
#endif   /* INCLUDE_SNMPV3 */
#endif   /* PREBIND_AGENT */

   /* run through the demux table and try to upcall it */

   for (con = firstudp; con; con = con->u_next)
 403ee34:	e0bff817 	ldw	r2,-32(fp)
 403ee38:	10800017 	ldw	r2,0(r2)
 403ee3c:	e0bff815 	stw	r2,-32(fp)
 403ee40:	e0bff817 	ldw	r2,-32(fp)
 403ee44:	1004c03a 	cmpne	r2,r2,zero
 403ee48:	103f4c1e 	bne	r2,zero,403eb7c <udpdemux+0x3e4>

   /* Fall to here if packet is not for us. Check if the packet was 
    * sent to an ip broadcast address. If it was, don't send a 
    * destination unreachable. 
    */
   if ((pip->ip_dest == 0xffffffffL) ||   /* Physical cable broadcast addr*/
 403ee4c:	e0bffa17 	ldw	r2,-24(fp)
 403ee50:	10800417 	ldw	r2,16(r2)
 403ee54:	10bfffe0 	cmpeqi	r2,r2,-1
 403ee58:	1000121e 	bne	r2,zero,403eea4 <udpdemux+0x70c>
 403ee5c:	e0bffa17 	ldw	r2,-24(fp)
 403ee60:	10c00417 	ldw	r3,16(r2)
 403ee64:	e0bffe17 	ldw	r2,-8(fp)
 403ee68:	10800617 	ldw	r2,24(r2)
 403ee6c:	10800e17 	ldw	r2,56(r2)
 403ee70:	18800c26 	beq	r3,r2,403eea4 <udpdemux+0x70c>
 403ee74:	e0bffa17 	ldw	r2,-24(fp)
 403ee78:	10c00417 	ldw	r3,16(r2)
 403ee7c:	e0bffe17 	ldw	r2,-8(fp)
 403ee80:	10800617 	ldw	r2,24(r2)
 403ee84:	10800f17 	ldw	r2,60(r2)
 403ee88:	18800626 	beq	r3,r2,403eea4 <udpdemux+0x70c>
 403ee8c:	e0bffa17 	ldw	r2,-24(fp)
 403ee90:	10c00417 	ldw	r3,16(r2)
 403ee94:	e0bffe17 	ldw	r2,-8(fp)
 403ee98:	10800617 	ldw	r2,24(r2)
 403ee9c:	10801017 	ldw	r2,64(r2)
 403eea0:	18801b1e 	bne	r3,r2,403ef10 <udpdemux+0x778>
       (pip->ip_dest == p->net->n_netbr) ||   /* All subnet broadcast */
       (pip->ip_dest == p->net->n_netbr42) || /* All subnet bcast (4.2bsd) */
       (pip->ip_dest == p->net->n_subnetbr))  /* Our subnet broadcast */
   {
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 403eea4:	00810174 	movhi	r2,1029
 403eea8:	1081bf04 	addi	r2,r2,1788
 403eeac:	10800017 	ldw	r2,0(r2)
 403eeb0:	1081000c 	andi	r2,r2,1024
 403eeb4:	1005003a 	cmpeq	r2,r2,zero
 403eeb8:	1000091e 	bne	r2,zero,403eee0 <udpdemux+0x748>
 403eebc:	00810174 	movhi	r2,1029
 403eec0:	1081bf04 	addi	r2,r2,1788
 403eec4:	10800017 	ldw	r2,0(r2)
 403eec8:	1080400c 	andi	r2,r2,256
 403eecc:	1005003a 	cmpeq	r2,r2,zero
 403eed0:	1000031e 	bne	r2,zero,403eee0 <udpdemux+0x748>
         dprintf("UDP: ignoring ip broadcast\n");
 403eed4:	01010174 	movhi	r4,1029
 403eed8:	21308c04 	addi	r4,r4,-15824
 403eedc:	40021940 	call	4002194 <puts>
#endif
      udp_mib.udpInErrors++;
 403eee0:	008101b4 	movhi	r2,1030
 403eee4:	10a46804 	addi	r2,r2,-28256
 403eee8:	10800217 	ldw	r2,8(r2)
 403eeec:	10c00044 	addi	r3,r2,1
 403eef0:	008101b4 	movhi	r2,1030
 403eef4:	10a46804 	addi	r2,r2,-28256
 403eef8:	10c00215 	stw	r3,8(r2)
      udp_free(p);
 403eefc:	e13ffe17 	ldw	r4,-8(fp)
 403ef00:	403f5940 	call	403f594 <udp_free>
      return ENP_NOT_MINE;
 403ef04:	00800084 	movi	r2,2
 403ef08:	e0bfff15 	stw	r2,-4(fp)
 403ef0c:	00003206 	br	403efd8 <udpdemux+0x840>
   }

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & TPTRACE))
 403ef10:	00810174 	movhi	r2,1029
 403ef14:	1081bf04 	addi	r2,r2,1788
 403ef18:	10800017 	ldw	r2,0(r2)
 403ef1c:	1081000c 	andi	r2,r2,1024
 403ef20:	1005003a 	cmpeq	r2,r2,zero
 403ef24:	1000141e 	bne	r2,zero,403ef78 <udpdemux+0x7e0>
 403ef28:	00810174 	movhi	r2,1029
 403ef2c:	1081bf04 	addi	r2,r2,1788
 403ef30:	10800017 	ldw	r2,0(r2)
 403ef34:	1080400c 	andi	r2,r2,256
 403ef38:	1005003a 	cmpeq	r2,r2,zero
 403ef3c:	10000e1e 	bne	r2,zero,403ef78 <udpdemux+0x7e0>
   {
      dprintf("UDP: unexpected port %04x\n", pup->ud_dstp);
 403ef40:	e0bff917 	ldw	r2,-28(fp)
 403ef44:	1080008b 	ldhu	r2,2(r2)
 403ef48:	117fffcc 	andi	r5,r2,65535
 403ef4c:	01010174 	movhi	r4,1029
 403ef50:	21309304 	addi	r4,r4,-15796
 403ef54:	400207c0 	call	400207c <printf>
      if (NDEBUG & DUMP) 
 403ef58:	00810174 	movhi	r2,1029
 403ef5c:	1081bf04 	addi	r2,r2,1788
 403ef60:	10800017 	ldw	r2,0(r2)
 403ef64:	1080008c 	andi	r2,r2,2
 403ef68:	1005003a 	cmpeq	r2,r2,zero
 403ef6c:	1000021e 	bne	r2,zero,403ef78 <udpdemux+0x7e0>
         ip_dump(p);
 403ef70:	e13ffe17 	ldw	r4,-8(fp)
 403ef74:	403a55c0 	call	403a55c <ip_dump>
#ifdef FULL_ICMP
   /* send destination unreachable.  Swap back all the swapped information */
   /* so that the destun packet format is correct */

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 403ef78:	e13ff917 	ldw	r4,-28(fp)
 403ef7c:	403f2a80 	call	403f2a8 <udpswap>
#endif   /* BYTE_ORDER */
   
   icmp_destun(p->fhost, p->net->n_ipaddr, pip, DSTPORT, p->net);
 403ef80:	e0bffe17 	ldw	r2,-8(fp)
 403ef84:	11000717 	ldw	r4,28(r2)
 403ef88:	e0bffe17 	ldw	r2,-8(fp)
 403ef8c:	10800617 	ldw	r2,24(r2)
 403ef90:	11400a17 	ldw	r5,40(r2)
 403ef94:	e0bffe17 	ldw	r2,-8(fp)
 403ef98:	10800617 	ldw	r2,24(r2)
 403ef9c:	d8800015 	stw	r2,0(sp)
 403efa0:	e1bffa17 	ldw	r6,-24(fp)
 403efa4:	01c000c4 	movi	r7,3
 403efa8:	40457640 	call	4045764 <icmp_destun>
#endif   /* FULL_ICMP */

   udp_mib.udpNoPorts++;
 403efac:	008101b4 	movhi	r2,1030
 403efb0:	10a46804 	addi	r2,r2,-28256
 403efb4:	10800117 	ldw	r2,4(r2)
 403efb8:	10c00044 	addi	r3,r2,1
 403efbc:	008101b4 	movhi	r2,1030
 403efc0:	10a46804 	addi	r2,r2,-28256
 403efc4:	10c00115 	stw	r3,4(r2)
   udp_free(p);
 403efc8:	e13ffe17 	ldw	r4,-8(fp)
 403efcc:	403f5940 	call	403f594 <udp_free>
   return ENP_NOT_MINE;
 403efd0:	00800084 	movi	r2,2
 403efd4:	e0bfff15 	stw	r2,-4(fp)
 403efd8:	e0bfff17 	ldw	r2,-4(fp)
}
 403efdc:	e037883a 	mov	sp,fp
 403efe0:	dfc00117 	ldw	ra,4(sp)
 403efe4:	df000017 	ldw	fp,0(sp)
 403efe8:	dec00204 	addi	sp,sp,8
 403efec:	f800283a 	ret

0403eff0 <udp_send>:
 * detected. 
 */

int
udp_send(unshort fport, unshort lport, PACKET p)
{
 403eff0:	deffee04 	addi	sp,sp,-72
 403eff4:	dfc01115 	stw	ra,68(sp)
 403eff8:	df001015 	stw	fp,64(sp)
 403effc:	df001004 	addi	fp,sp,64
 403f000:	e1bffe15 	stw	r6,-8(fp)
 403f004:	e13ffc0d 	sth	r4,-16(fp)
 403f008:	e17ffd0d 	sth	r5,-12(fp)
   int         udplen;
   int         e;
   ip_addr     src_ip;    /* source IP, for checksumming purposes */

#ifdef   NPDEBUG
   if (NDEBUG & (INFOMSG|TPTRACE))
 403f00c:	00810174 	movhi	r2,1029
 403f010:	1081bf04 	addi	r2,r2,1788
 403f014:	10800017 	ldw	r2,0(r2)
 403f018:	1080410c 	andi	r2,r2,260
 403f01c:	1005003a 	cmpeq	r2,r2,zero
 403f020:	10001c1e 	bne	r2,zero,403f094 <udp_send+0xa4>
      dprintf("UDP: pkt [%u] %04x -> %u.%u.%u.%u:%04x\n", p->nb_plen, lport,
 403f024:	e0bffe17 	ldw	r2,-8(fp)
 403f028:	11800417 	ldw	r6,16(r2)
 403f02c:	e1fffd0b 	ldhu	r7,-12(fp)
 403f030:	e0bffe17 	ldw	r2,-8(fp)
 403f034:	10800717 	ldw	r2,28(r2)
 403f038:	12003fcc 	andi	r8,r2,255
 403f03c:	e0bffe17 	ldw	r2,-8(fp)
 403f040:	10800717 	ldw	r2,28(r2)
 403f044:	1004d23a 	srli	r2,r2,8
 403f048:	11003fcc 	andi	r4,r2,255
 403f04c:	e0bffe17 	ldw	r2,-8(fp)
 403f050:	10800717 	ldw	r2,28(r2)
 403f054:	1004d43a 	srli	r2,r2,16
 403f058:	11403fcc 	andi	r5,r2,255
 403f05c:	e0bffe17 	ldw	r2,-8(fp)
 403f060:	10800717 	ldw	r2,28(r2)
 403f064:	1004d63a 	srli	r2,r2,24
 403f068:	e0fffc0b 	ldhu	r3,-16(fp)
 403f06c:	d9000015 	stw	r4,0(sp)
 403f070:	d9400115 	stw	r5,4(sp)
 403f074:	d8800215 	stw	r2,8(sp)
 403f078:	d8c00315 	stw	r3,12(sp)
 403f07c:	01010174 	movhi	r4,1029
 403f080:	21309a04 	addi	r4,r4,-15768
 403f084:	300b883a 	mov	r5,r6
 403f088:	380d883a 	mov	r6,r7
 403f08c:	400f883a 	mov	r7,r8
 403f090:	400207c0 	call	400207c <printf>
    PUSH_IPADDR(p->fhost), fport);
#endif

   LOCK_NET_RESOURCE(NET_RESID);
 403f094:	0009883a 	mov	r4,zero
 403f098:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   /* prepend UDP header to upper layer's data */
   p->nb_prot -= sizeof(struct udp);
 403f09c:	e0bffe17 	ldw	r2,-8(fp)
 403f0a0:	10800317 	ldw	r2,12(r2)
 403f0a4:	10fffe04 	addi	r3,r2,-8
 403f0a8:	e0bffe17 	ldw	r2,-8(fp)
 403f0ac:	10c00315 	stw	r3,12(r2)
   pup = (struct udp*)p->nb_prot;
 403f0b0:	e0bffe17 	ldw	r2,-8(fp)
 403f0b4:	10800317 	ldw	r2,12(r2)
 403f0b8:	e0bff815 	stw	r2,-32(fp)
   udplen = p->nb_plen + sizeof(struct udp);
 403f0bc:	e0bffe17 	ldw	r2,-8(fp)
 403f0c0:	10800417 	ldw	r2,16(r2)
 403f0c4:	10800204 	addi	r2,r2,8
 403f0c8:	e0bff615 	stw	r2,-40(fp)
   p->nb_plen = udplen;
 403f0cc:	e0fff617 	ldw	r3,-40(fp)
 403f0d0:	e0bffe17 	ldw	r2,-8(fp)
 403f0d4:	10c00415 	stw	r3,16(r2)
   if (udplen & 1) ((char *)pup)[udplen] = 0;
 403f0d8:	e0bff617 	ldw	r2,-40(fp)
 403f0dc:	1080004c 	andi	r2,r2,1
 403f0e0:	10803fcc 	andi	r2,r2,255
 403f0e4:	1005003a 	cmpeq	r2,r2,zero
 403f0e8:	1000041e 	bne	r2,zero,403f0fc <udp_send+0x10c>
 403f0ec:	e0fff817 	ldw	r3,-32(fp)
 403f0f0:	e0bff617 	ldw	r2,-40(fp)
 403f0f4:	1885883a 	add	r2,r3,r2
 403f0f8:	10000005 	stb	zero,0(r2)

      pup->ud_len = (unshort)udplen;   /* fill in the UDP header */
 403f0fc:	e0bff617 	ldw	r2,-40(fp)
 403f100:	1007883a 	mov	r3,r2
 403f104:	e0bff817 	ldw	r2,-32(fp)
 403f108:	10c0010d 	sth	r3,4(r2)
   pup->ud_srcp = lport;
 403f10c:	e0fff817 	ldw	r3,-32(fp)
 403f110:	e0bffd0b 	ldhu	r2,-12(fp)
 403f114:	1880000d 	sth	r2,0(r3)
   pup->ud_dstp = fport;
 403f118:	e0fff817 	ldw	r3,-32(fp)
 403f11c:	e0bffc0b 	ldhu	r2,-16(fp)
 403f120:	1880008d 	sth	r2,2(r3)

#if (BYTE_ORDER == LITTLE_ENDIAN)
   udpswap(pup);
 403f124:	e13ff817 	ldw	r4,-32(fp)
 403f128:	403f2a80 	call	403f2a8 <udpswap>
#endif   /* BYTE_ORDER */
   
#ifdef MULTI_HOMED
   /* getting the source IP address for a broadcast is a bit tricky: */
   if (p->fhost == 0xffffffff)
 403f12c:	e0bffe17 	ldw	r2,-8(fp)
 403f130:	10800717 	ldw	r2,28(r2)
 403f134:	10bfffd8 	cmpnei	r2,r2,-1
 403f138:	1000111e 	bne	r2,zero,403f180 <udp_send+0x190>
   {
      if (!p->net)
 403f13c:	e0bffe17 	ldw	r2,-8(fp)
 403f140:	10800617 	ldw	r2,24(r2)
 403f144:	1004c03a 	cmpne	r2,r2,zero
 403f148:	1000081e 	bne	r2,zero,403f16c <udp_send+0x17c>
      {
         dtrap();    /* programmer forgot to select iface */
 403f14c:	4025bb40 	call	4025bb4 <dtrap>
         /* it would appear that the callers of udp_send() expect it
            to do cleanup on failure, so free the packet buffer here */
         udp_free(p);
 403f150:	e13ffe17 	ldw	r4,-8(fp)
 403f154:	403f5940 	call	403f594 <udp_free>
         UNLOCK_NET_RESOURCE(NET_RESID);
 403f158:	0009883a 	mov	r4,zero
 403f15c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
         return ENP_NO_IFACE;
 403f160:	00bff784 	movi	r2,-34
 403f164:	e0bfff15 	stw	r2,-4(fp)
 403f168:	00004906 	br	403f290 <udp_send+0x2a0>
      }
      src_ip = p->net->n_ipaddr;
 403f16c:	e0bffe17 	ldw	r2,-8(fp)
 403f170:	10800617 	ldw	r2,24(r2)
 403f174:	10800a17 	ldw	r2,40(r2)
 403f178:	e0bff415 	stw	r2,-48(fp)
 403f17c:	00000406 	br	403f190 <udp_send+0x1a0>
   /* set the IP addresses in the IP header. The pseudo header used for
    * checksumming overlays the addresses on the IP header area in the
    * buffer, so setting them there (which we need to do for cksum
    * anyway) sets up for IP too.
    */
   src_ip = ip_mymach(p->fhost);
 403f180:	e0bffe17 	ldw	r2,-8(fp)
 403f184:	11000717 	ldw	r4,28(r2)
 403f188:	403a4b00 	call	403a4b0 <ip_mymach>
 403f18c:	e0bff415 	stw	r2,-48(fp)
   php.ph_src = src_ip;
 403f190:	e0bff417 	ldw	r2,-48(fp)
 403f194:	e0bff915 	stw	r2,-28(fp)
   php.ph_dest = p->fhost;
 403f198:	e0bffe17 	ldw	r2,-8(fp)
 403f19c:	10800717 	ldw	r2,28(r2)
 403f1a0:	e0bffa15 	stw	r2,-24(fp)
#ifdef NO_UDP_CKSUM
   /* If no UDP checksum support, just zero the checksum field */
   pup->ud_cksum = 0;
#else
   /* finish filling in the pseudo header required for checksumming */
   php.ph_zero = 0;
 403f1a4:	e03ffb05 	stb	zero,-20(fp)
   php.ph_prot = UDP_PROT;
 403f1a8:	00800444 	movi	r2,17
 403f1ac:	e0bffb45 	stb	r2,-19(fp)
   php.ph_len = pup->ud_len;
 403f1b0:	e0bff817 	ldw	r2,-32(fp)
 403f1b4:	1080010b 	ldhu	r2,4(r2)
 403f1b8:	e0bffb8d 	sth	r2,-18(fp)
   pup->ud_cksum = cksum(&php, sizeof(struct ph)>>1);
 403f1bc:	e13ff904 	addi	r4,fp,-28
 403f1c0:	01400184 	movi	r5,6
 403f1c4:	4020a000 	call	4020a00 <cksum>
 403f1c8:	1007883a 	mov	r3,r2
 403f1cc:	e0bff817 	ldw	r2,-32(fp)
 403f1d0:	10c0018d 	sth	r3,6(r2)
   pup->ud_cksum = ~cksum(pup, (udplen+1)>>1);
 403f1d4:	e0bff617 	ldw	r2,-40(fp)
 403f1d8:	10800044 	addi	r2,r2,1
 403f1dc:	1005d07a 	srai	r2,r2,1
 403f1e0:	100b883a 	mov	r5,r2
 403f1e4:	e13ff817 	ldw	r4,-32(fp)
 403f1e8:	4020a000 	call	4020a00 <cksum>
 403f1ec:	0084303a 	nor	r2,zero,r2
 403f1f0:	1007883a 	mov	r3,r2
 403f1f4:	e0bff817 	ldw	r2,-32(fp)
 403f1f8:	10c0018d 	sth	r3,6(r2)
   if (pup->ud_cksum == 0)
 403f1fc:	e0bff817 	ldw	r2,-32(fp)
 403f200:	1080018b 	ldhu	r2,6(r2)
 403f204:	10bfffcc 	andi	r2,r2,65535
 403f208:	1004c03a 	cmpne	r2,r2,zero
 403f20c:	1000031e 	bne	r2,zero,403f21c <udp_send+0x22c>
      pup->ud_cksum = 0xffff;
 403f210:	e0fff817 	ldw	r3,-32(fp)
 403f214:	00bfffc4 	movi	r2,-1
 403f218:	1880018d 	sth	r2,6(r3)
#endif

   /* need to fill in IP addresses at this layer too */
   pip = (struct ip *)(p->nb_prot - sizeof(struct ip));
 403f21c:	e0bffe17 	ldw	r2,-8(fp)
 403f220:	10800317 	ldw	r2,12(r2)
 403f224:	10bffb04 	addi	r2,r2,-20
 403f228:	e0bff715 	stw	r2,-36(fp)
   pip->ip_src = src_ip;
 403f22c:	e0fff717 	ldw	r3,-36(fp)
 403f230:	e0bff417 	ldw	r2,-48(fp)
 403f234:	18800315 	stw	r2,12(r3)
   pip->ip_dest = p->fhost;
 403f238:	e0bffe17 	ldw	r2,-8(fp)
 403f23c:	10c00717 	ldw	r3,28(r2)
 403f240:	e0bff717 	ldw	r2,-36(fp)
 403f244:	10c00415 	stw	r3,16(r2)

   udp_mib.udpOutDatagrams++;
 403f248:	008101b4 	movhi	r2,1030
 403f24c:	10a46804 	addi	r2,r2,-28256
 403f250:	10800317 	ldw	r2,12(r2)
 403f254:	10c00044 	addi	r3,r2,1
 403f258:	008101b4 	movhi	r2,1030
 403f25c:	10a46804 	addi	r2,r2,-28256
 403f260:	10c00315 	stw	r3,12(r2)

   p->nb_plen = udplen;       /* nb_prot was adjusted above */
 403f264:	e0fff617 	ldw	r3,-40(fp)
 403f268:	e0bffe17 	ldw	r2,-8(fp)
 403f26c:	10c00415 	stw	r3,16(r2)
   e = ip_write(UDP_PROT, p);
 403f270:	01000444 	movi	r4,17
 403f274:	e17ffe17 	ldw	r5,-8(fp)
 403f278:	403932c0 	call	403932c <ip_write>
 403f27c:	e0bff515 	stw	r2,-44(fp)
   UNLOCK_NET_RESOURCE(NET_RESID);
 403f280:	0009883a 	mov	r4,zero
 403f284:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   return e;
 403f288:	e0bff517 	ldw	r2,-44(fp)
 403f28c:	e0bfff15 	stw	r2,-4(fp)
 403f290:	e0bfff17 	ldw	r2,-4(fp)
}
 403f294:	e037883a 	mov	sp,fp
 403f298:	dfc00117 	ldw	ra,4(sp)
 403f29c:	df000017 	ldw	fp,0(sp)
 403f2a0:	dec00204 	addi	sp,sp,8
 403f2a4:	f800283a 	ret

0403f2a8 <udpswap>:
 */

#if (BYTE_ORDER == LITTLE_ENDIAN)
void
udpswap(struct udp *pup)
{
 403f2a8:	defffe04 	addi	sp,sp,-8
 403f2ac:	df000115 	stw	fp,4(sp)
 403f2b0:	df000104 	addi	fp,sp,4
 403f2b4:	e13fff15 	stw	r4,-4(fp)

   pup->ud_srcp = htons(pup->ud_srcp);
 403f2b8:	e0bfff17 	ldw	r2,-4(fp)
 403f2bc:	1080000b 	ldhu	r2,0(r2)
 403f2c0:	10bfffcc 	andi	r2,r2,65535
 403f2c4:	1004d23a 	srli	r2,r2,8
 403f2c8:	10803fcc 	andi	r2,r2,255
 403f2cc:	1009883a 	mov	r4,r2
 403f2d0:	e0bfff17 	ldw	r2,-4(fp)
 403f2d4:	1080000b 	ldhu	r2,0(r2)
 403f2d8:	10bfffcc 	andi	r2,r2,65535
 403f2dc:	1004923a 	slli	r2,r2,8
 403f2e0:	1007883a 	mov	r3,r2
 403f2e4:	00bfc004 	movi	r2,-256
 403f2e8:	1884703a 	and	r2,r3,r2
 403f2ec:	2084b03a 	or	r2,r4,r2
 403f2f0:	1007883a 	mov	r3,r2
 403f2f4:	e0bfff17 	ldw	r2,-4(fp)
 403f2f8:	10c0000d 	sth	r3,0(r2)
   pup->ud_dstp = htons(pup->ud_dstp);
 403f2fc:	e0bfff17 	ldw	r2,-4(fp)
 403f300:	1080008b 	ldhu	r2,2(r2)
 403f304:	10bfffcc 	andi	r2,r2,65535
 403f308:	1004d23a 	srli	r2,r2,8
 403f30c:	10803fcc 	andi	r2,r2,255
 403f310:	1009883a 	mov	r4,r2
 403f314:	e0bfff17 	ldw	r2,-4(fp)
 403f318:	1080008b 	ldhu	r2,2(r2)
 403f31c:	10bfffcc 	andi	r2,r2,65535
 403f320:	1004923a 	slli	r2,r2,8
 403f324:	1007883a 	mov	r3,r2
 403f328:	00bfc004 	movi	r2,-256
 403f32c:	1884703a 	and	r2,r3,r2
 403f330:	2084b03a 	or	r2,r4,r2
 403f334:	1007883a 	mov	r3,r2
 403f338:	e0bfff17 	ldw	r2,-4(fp)
 403f33c:	10c0008d 	sth	r3,2(r2)
   pup->ud_len = htons(pup->ud_len);
 403f340:	e0bfff17 	ldw	r2,-4(fp)
 403f344:	1080010b 	ldhu	r2,4(r2)
 403f348:	10bfffcc 	andi	r2,r2,65535
 403f34c:	1004d23a 	srli	r2,r2,8
 403f350:	10803fcc 	andi	r2,r2,255
 403f354:	1009883a 	mov	r4,r2
 403f358:	e0bfff17 	ldw	r2,-4(fp)
 403f35c:	1080010b 	ldhu	r2,4(r2)
 403f360:	10bfffcc 	andi	r2,r2,65535
 403f364:	1004923a 	slli	r2,r2,8
 403f368:	1007883a 	mov	r3,r2
 403f36c:	00bfc004 	movi	r2,-256
 403f370:	1884703a 	and	r2,r3,r2
 403f374:	2084b03a 	or	r2,r4,r2
 403f378:	1007883a 	mov	r3,r2
 403f37c:	e0bfff17 	ldw	r2,-4(fp)
 403f380:	10c0010d 	sth	r3,4(r2)
   pup->ud_cksum = htons(pup->ud_cksum);
 403f384:	e0bfff17 	ldw	r2,-4(fp)
 403f388:	1080018b 	ldhu	r2,6(r2)
 403f38c:	10bfffcc 	andi	r2,r2,65535
 403f390:	1004d23a 	srli	r2,r2,8
 403f394:	10803fcc 	andi	r2,r2,255
 403f398:	1009883a 	mov	r4,r2
 403f39c:	e0bfff17 	ldw	r2,-4(fp)
 403f3a0:	1080018b 	ldhu	r2,6(r2)
 403f3a4:	10bfffcc 	andi	r2,r2,65535
 403f3a8:	1004923a 	slli	r2,r2,8
 403f3ac:	1007883a 	mov	r3,r2
 403f3b0:	00bfc004 	movi	r2,-256
 403f3b4:	1884703a 	and	r2,r3,r2
 403f3b8:	2084b03a 	or	r2,r4,r2
 403f3bc:	1007883a 	mov	r3,r2
 403f3c0:	e0bfff17 	ldw	r2,-4(fp)
 403f3c4:	10c0018d 	sth	r3,6(r2)
}
 403f3c8:	e037883a 	mov	sp,fp
 403f3cc:	df000017 	ldw	fp,0(sp)
 403f3d0:	dec00104 	addi	sp,sp,4
 403f3d4:	f800283a 	ret

0403f3d8 <udp_socket>:
#define  MINSOCKET   1200
static unshort usocket = 0;   /* next socket to grab */

unshort
udp_socket(void)
{
 403f3d8:	defffe04 	addi	sp,sp,-8
 403f3dc:	df000115 	stw	fp,4(sp)
 403f3e0:	df000104 	addi	fp,sp,4
   UDPCONN tmp;

   if (usocket < MINSOCKET)
 403f3e4:	d0a84f0b 	ldhu	r2,-24260(gp)
 403f3e8:	10bfffcc 	andi	r2,r2,65535
 403f3ec:	10812c28 	cmpgeui	r2,r2,1200
 403f3f0:	10000c1e 	bne	r2,zero,403f424 <udp_socket+0x4c>
   {
      /* logic for for init and after wraps */
      usocket = (unshort)(cticks & 0x7fff);
 403f3f4:	00810174 	movhi	r2,1029
 403f3f8:	1081e404 	addi	r2,r2,1936
 403f3fc:	10800017 	ldw	r2,0(r2)
 403f400:	109fffcc 	andi	r2,r2,32767
 403f404:	d0a84f0d 	sth	r2,-24260(gp)
      if (usocket < MINSOCKET)
 403f408:	d0a84f0b 	ldhu	r2,-24260(gp)
 403f40c:	10bfffcc 	andi	r2,r2,65535
 403f410:	10812c28 	cmpgeui	r2,r2,1200
 403f414:	1000031e 	bne	r2,zero,403f424 <udp_socket+0x4c>
         usocket += MINSOCKET;
 403f418:	d0a84f0b 	ldhu	r2,-24260(gp)
 403f41c:	10812c04 	addi	r2,r2,1200
 403f420:	d0a84f0d 	sth	r2,-24260(gp)
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 403f424:	00810174 	movhi	r2,1029
 403f428:	1081d804 	addi	r2,r2,1888
 403f42c:	10800017 	ldw	r2,0(r2)
 403f430:	e0bfff15 	stw	r2,-4(fp)
 403f434:	00001006 	br	403f478 <udp_socket+0xa0>
   {
      if (tmp->u_lport == usocket)
 403f438:	e0bfff17 	ldw	r2,-4(fp)
 403f43c:	1080018b 	ldhu	r2,6(r2)
 403f440:	d0e84f0b 	ldhu	r3,-24260(gp)
 403f444:	113fffcc 	andi	r4,r2,65535
 403f448:	18bfffcc 	andi	r2,r3,65535
 403f44c:	2080071e 	bne	r4,r2,403f46c <udp_socket+0x94>
      {
         usocket++;     /* bump socket number */
 403f450:	d0a84f0b 	ldhu	r2,-24260(gp)
 403f454:	10800044 	addi	r2,r2,1
 403f458:	d0a84f0d 	sth	r2,-24260(gp)
         tmp = firstudp;   /* restart scan */
 403f45c:	00810174 	movhi	r2,1029
 403f460:	1081d804 	addi	r2,r2,1888
 403f464:	10800017 	ldw	r2,0(r2)
 403f468:	e0bfff15 	stw	r2,-4(fp)
      usocket = (unshort)(cticks & 0x7fff);
      if (usocket < MINSOCKET)
         usocket += MINSOCKET;
   }
   /* scan existing connections, making sure socket isn't in use */
   for (tmp = firstudp; tmp; tmp = tmp->u_next)
 403f46c:	e0bfff17 	ldw	r2,-4(fp)
 403f470:	10800017 	ldw	r2,0(r2)
 403f474:	e0bfff15 	stw	r2,-4(fp)
 403f478:	e0bfff17 	ldw	r2,-4(fp)
 403f47c:	1004c03a 	cmpne	r2,r2,zero
 403f480:	103fed1e 	bne	r2,zero,403f438 <udp_socket+0x60>
         usocket++;     /* bump socket number */
         tmp = firstudp;   /* restart scan */
         continue;
      }
   }
   return usocket++;
 403f484:	d0a84f0b 	ldhu	r2,-24260(gp)
 403f488:	10ffffcc 	andi	r3,r2,65535
 403f48c:	10800044 	addi	r2,r2,1
 403f490:	d0a84f0d 	sth	r2,-24260(gp)
 403f494:	1805883a 	mov	r2,r3
}
 403f498:	e037883a 	mov	sp,fp
 403f49c:	df000017 	ldw	fp,0(sp)
 403f4a0:	dec00104 	addi	sp,sp,4
 403f4a4:	f800283a 	ret

0403f4a8 <udp_alloc>:
 * RETURNS:  Returns buffer, or NULL in no buffer was available. 
 */

PACKET
udp_alloc(int datalen, int optlen)
{
 403f4a8:	defffa04 	addi	sp,sp,-24
 403f4ac:	dfc00515 	stw	ra,20(sp)
 403f4b0:	df000415 	stw	fp,16(sp)
 403f4b4:	df000404 	addi	fp,sp,16
 403f4b8:	e13ffe15 	stw	r4,-8(fp)
 403f4bc:	e17fff15 	stw	r5,-4(fp)
   int   len;
   PACKET p;

   len = (datalen + sizeof(struct udp) + 1) & ~1;
 403f4c0:	e0bffe17 	ldw	r2,-8(fp)
 403f4c4:	10800244 	addi	r2,r2,9
 403f4c8:	1007883a 	mov	r3,r2
 403f4cc:	00bfff84 	movi	r2,-2
 403f4d0:	1884703a 	and	r2,r3,r2
 403f4d4:	e0bffd15 	stw	r2,-12(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403f4d8:	01000084 	movi	r4,2
 403f4dc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   p = pk_alloc(len + UDPHDRSLEN + optlen);
 403f4e0:	e0fffd17 	ldw	r3,-12(fp)
 403f4e4:	e0bfff17 	ldw	r2,-4(fp)
 403f4e8:	1885883a 	add	r2,r3,r2
 403f4ec:	10800904 	addi	r2,r2,36
 403f4f0:	1009883a 	mov	r4,r2
 403f4f4:	4024f700 	call	4024f70 <pk_alloc>
 403f4f8:	e0bffc15 	stw	r2,-16(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403f4fc:	01000084 	movi	r4,2
 403f500:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (p != (PACKET)NULL)
 403f504:	e0bffc17 	ldw	r2,-16(fp)
 403f508:	1005003a 	cmpeq	r2,r2,zero
 403f50c:	1000101e 	bne	r2,zero,403f550 <udp_alloc+0xa8>
   {
      /* set prot pointers past end of UDP header  */
      len = sizeof(struct ip) + (optlen >> 2) + sizeof(struct udp);
 403f510:	e0bfff17 	ldw	r2,-4(fp)
 403f514:	1005d0ba 	srai	r2,r2,2
 403f518:	10800704 	addi	r2,r2,28
 403f51c:	e0bffd15 	stw	r2,-12(fp)
      p->nb_prot += len;
 403f520:	e0bffc17 	ldw	r2,-16(fp)
 403f524:	10c00317 	ldw	r3,12(r2)
 403f528:	e0bffd17 	ldw	r2,-12(fp)
 403f52c:	1887883a 	add	r3,r3,r2
 403f530:	e0bffc17 	ldw	r2,-16(fp)
 403f534:	10c00315 	stw	r3,12(r2)
      p->nb_plen -= len;
 403f538:	e0bffc17 	ldw	r2,-16(fp)
 403f53c:	10c00417 	ldw	r3,16(r2)
 403f540:	e0bffd17 	ldw	r2,-12(fp)
 403f544:	1887c83a 	sub	r3,r3,r2
 403f548:	e0bffc17 	ldw	r2,-16(fp)
 403f54c:	10c00415 	stw	r3,16(r2)
   }

   return (p);
 403f550:	e0bffc17 	ldw	r2,-16(fp)
}
 403f554:	e037883a 	mov	sp,fp
 403f558:	dfc00117 	ldw	ra,4(sp)
 403f55c:	df000017 	ldw	fp,0(sp)
 403f560:	dec00204 	addi	sp,sp,8
 403f564:	f800283a 	ret

0403f568 <udp_maxalloc>:
 *          returned value, the allocation will fail
 */

int
udp_maxalloc(void)
{
 403f568:	deffff04 	addi	sp,sp,-4
 403f56c:	df000015 	stw	fp,0(sp)
 403f570:	d839883a 	mov	fp,sp
    * created is ((2^16 - 1) - (size of IP and UDP headers)) */
   return (0xFFFF - (sizeof (struct ip) + sizeof (struct udp)));
#else
   /* if heap buffers are not available, the largest size of a UDP datagram
    * is constrained by what will fit inside a big buffer */
   return (bigbufsiz - UDPHDRSLEN);
 403f574:	00810174 	movhi	r2,1029
 403f578:	10b9f404 	addi	r2,r2,-6192
 403f57c:	10800017 	ldw	r2,0(r2)
 403f580:	10bff704 	addi	r2,r2,-36
#endif
}
 403f584:	e037883a 	mov	sp,fp
 403f588:	df000017 	ldw	fp,0(sp)
 403f58c:	dec00104 	addi	sp,sp,4
 403f590:	f800283a 	ret

0403f594 <udp_free>:
 * RETURNS: void
 */

void
udp_free(PACKET p)
{
 403f594:	defffd04 	addi	sp,sp,-12
 403f598:	dfc00215 	stw	ra,8(sp)
 403f59c:	df000115 	stw	fp,4(sp)
 403f5a0:	df000104 	addi	fp,sp,4
 403f5a4:	e13fff15 	stw	r4,-4(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403f5a8:	01000084 	movi	r4,2
 403f5ac:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 403f5b0:	e13fff17 	ldw	r4,-4(fp)
 403f5b4:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403f5b8:	01000084 	movi	r4,2
 403f5bc:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
}
 403f5c0:	e037883a 	mov	sp,fp
 403f5c4:	dfc00117 	ldw	ra,4(sp)
 403f5c8:	df000017 	ldw	fp,0(sp)
 403f5cc:	dec00204 	addi	sp,sp,8
 403f5d0:	f800283a 	ret

0403f5d4 <igmpv1_input>:
 * OUTPUT: This function returns IGMP_ERR if it is passed an "unknown"
 * packet type.  Otherwise, it returns IGMP_OK.
 */

int igmpv1_input(PACKET p)
{
 403f5d4:	defff704 	addi	sp,sp,-36
 403f5d8:	dfc00815 	stw	ra,32(sp)
 403f5dc:	df000715 	stw	fp,28(sp)
 403f5e0:	df000704 	addi	fp,sp,28
 403f5e4:	e13ffe15 	stw	r4,-8(fp)
   struct igmp *  igmp;
   struct ip *    pip;
   struct in_multi * inm;
   NET netp  = p->net;
 403f5e8:	e0bffe17 	ldw	r2,-8(fp)
 403f5ec:	10800617 	ldw	r2,24(r2)
 403f5f0:	e0bffa15 	stw	r2,-24(fp)
   int rc;
         
   pip = ip_head (p);
 403f5f4:	e0bffe17 	ldw	r2,-8(fp)
 403f5f8:	10800317 	ldw	r2,12(r2)
 403f5fc:	e0bffc15 	stw	r2,-16(fp)
   igmp = (struct igmp *) (ip_data (pip));
 403f600:	e0bffc17 	ldw	r2,-16(fp)
 403f604:	10800003 	ldbu	r2,0(r2)
 403f608:	10803fcc 	andi	r2,r2,255
 403f60c:	108003cc 	andi	r2,r2,15
 403f610:	1085883a 	add	r2,r2,r2
 403f614:	1085883a 	add	r2,r2,r2
 403f618:	1007883a 	mov	r3,r2
 403f61c:	e0bffc17 	ldw	r2,-16(fp)
 403f620:	1885883a 	add	r2,r3,r2
 403f624:	e0bffd15 	stw	r2,-12(fp)

   switch (igmp->igmp_type) 
 403f628:	e0bffd17 	ldw	r2,-12(fp)
 403f62c:	10800003 	ldbu	r2,0(r2)
 403f630:	10803fcc 	andi	r2,r2,255
 403f634:	e0bfff15 	stw	r2,-4(fp)
 403f638:	e0ffff17 	ldw	r3,-4(fp)
 403f63c:	18800460 	cmpeqi	r2,r3,17
 403f640:	1000041e 	bne	r2,zero,403f654 <igmpv1_input+0x80>
 403f644:	e0ffff17 	ldw	r3,-4(fp)
 403f648:	188004a0 	cmpeqi	r2,r3,18
 403f64c:	1000631e 	bne	r2,zero,403f7dc <igmpv1_input+0x208>
 403f650:	00008706 	br	403f870 <igmpv1_input+0x29c>
   {
   case IGMP_HOST_MEMBERSHIP_QUERY:
      ++igmpstats.igmpv1mode_v1_queries_rcvd;
 403f654:	008101b4 	movhi	r2,1030
 403f658:	10a20c04 	addi	r2,r2,-30672
 403f65c:	10800117 	ldw	r2,4(r2)
 403f660:	10c00044 	addi	r3,r2,1
 403f664:	008101b4 	movhi	r2,1030
 403f668:	10a20c04 	addi	r2,r2,-30672
 403f66c:	10c00115 	stw	r3,4(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 403f670:	e0bffa17 	ldw	r2,-24(fp)
 403f674:	10802c17 	ldw	r2,176(r2)
 403f678:	e0bffb15 	stw	r2,-20(fp)
 403f67c:	00005206 	br	403f7c8 <igmpv1_input+0x1f4>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (inm->inm_addr == 0)
 403f680:	e0bffb17 	ldw	r2,-20(fp)
 403f684:	10800017 	ldw	r2,0(r2)
 403f688:	1005003a 	cmpeq	r2,r2,zero
 403f68c:	10004b1e 	bne	r2,zero,403f7bc <igmpv1_input+0x1e8>
            continue;
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 403f690:	e0bffb17 	ldw	r2,-20(fp)
 403f694:	10c00017 	ldw	r3,0(r2)
 403f698:	00810174 	movhi	r2,1029
 403f69c:	1081c404 	addi	r2,r2,1808
 403f6a0:	10800017 	ldw	r2,0(r2)
 403f6a4:	18804526 	beq	r3,r2,403f7bc <igmpv1_input+0x1e8>
         {
            if (inm->inm_timer == 0)
 403f6a8:	e0bffb17 	ldw	r2,-20(fp)
 403f6ac:	10800317 	ldw	r2,12(r2)
 403f6b0:	1004c03a 	cmpne	r2,r2,zero
 403f6b4:	1000411e 	bne	r2,zero,403f7bc <igmpv1_input+0x1e8>
            {
               inm->inm_timer = (unsigned) IGMP_RANDOM_DELAY(inm->inm_addr);
 403f6b8:	008101b4 	movhi	r2,1030
 403f6bc:	10a44e04 	addi	r2,r2,-28360
 403f6c0:	11000217 	ldw	r4,8(r2)
 403f6c4:	008101b4 	movhi	r2,1030
 403f6c8:	10a20804 	addi	r2,r2,-30688
 403f6cc:	10800017 	ldw	r2,0(r2)
 403f6d0:	10800a17 	ldw	r2,40(r2)
 403f6d4:	1004d63a 	srli	r2,r2,24
 403f6d8:	10c03fcc 	andi	r3,r2,255
 403f6dc:	008101b4 	movhi	r2,1030
 403f6e0:	10a20804 	addi	r2,r2,-30688
 403f6e4:	10800017 	ldw	r2,0(r2)
 403f6e8:	10800a17 	ldw	r2,40(r2)
 403f6ec:	1004d23a 	srli	r2,r2,8
 403f6f0:	10bfc00c 	andi	r2,r2,65280
 403f6f4:	1886b03a 	or	r3,r3,r2
 403f6f8:	008101b4 	movhi	r2,1030
 403f6fc:	10a20804 	addi	r2,r2,-30688
 403f700:	10800017 	ldw	r2,0(r2)
 403f704:	10800a17 	ldw	r2,40(r2)
 403f708:	10bfc00c 	andi	r2,r2,65280
 403f70c:	1004923a 	slli	r2,r2,8
 403f710:	1886b03a 	or	r3,r3,r2
 403f714:	008101b4 	movhi	r2,1030
 403f718:	10a20804 	addi	r2,r2,-30688
 403f71c:	10800017 	ldw	r2,0(r2)
 403f720:	10800a17 	ldw	r2,40(r2)
 403f724:	10803fcc 	andi	r2,r2,255
 403f728:	1004963a 	slli	r2,r2,24
 403f72c:	1884b03a 	or	r2,r3,r2
 403f730:	2089883a 	add	r4,r4,r2
 403f734:	e0bffb17 	ldw	r2,-20(fp)
 403f738:	10800017 	ldw	r2,0(r2)
 403f73c:	1004d63a 	srli	r2,r2,24
 403f740:	10c03fcc 	andi	r3,r2,255
 403f744:	e0bffb17 	ldw	r2,-20(fp)
 403f748:	10800017 	ldw	r2,0(r2)
 403f74c:	1004d23a 	srli	r2,r2,8
 403f750:	10bfc00c 	andi	r2,r2,65280
 403f754:	1886b03a 	or	r3,r3,r2
 403f758:	e0bffb17 	ldw	r2,-20(fp)
 403f75c:	10800017 	ldw	r2,0(r2)
 403f760:	10bfc00c 	andi	r2,r2,65280
 403f764:	1004923a 	slli	r2,r2,8
 403f768:	1886b03a 	or	r3,r3,r2
 403f76c:	e0bffb17 	ldw	r2,-20(fp)
 403f770:	10800017 	ldw	r2,0(r2)
 403f774:	10803fcc 	andi	r2,r2,255
 403f778:	1004963a 	slli	r2,r2,24
 403f77c:	1884b03a 	or	r2,r3,r2
 403f780:	2087883a 	add	r3,r4,r2
 403f784:	00800c84 	movi	r2,50
 403f788:	1885203a 	divu	r2,r3,r2
 403f78c:	10800ca4 	muli	r2,r2,50
 403f790:	1885c83a 	sub	r2,r3,r2
 403f794:	10c00044 	addi	r3,r2,1
 403f798:	e0bffb17 	ldw	r2,-20(fp)
 403f79c:	10c00315 	stw	r3,12(r2)
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
 403f7a0:	00810174 	movhi	r2,1029
 403f7a4:	1081c204 	addi	r2,r2,1800
 403f7a8:	10800017 	ldw	r2,0(r2)
 403f7ac:	10c00044 	addi	r3,r2,1
 403f7b0:	00810174 	movhi	r2,1029
 403f7b4:	1081c204 	addi	r2,r2,1800
 403f7b8:	10c00015 	stw	r3,0(r2)
       * Start the timers in all of our membership records for
       * the interface on which the query arrived, except those
       * that are already running and those that belong to the
       * "all-hosts" group.
       */
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 403f7bc:	e0bffb17 	ldw	r2,-20(fp)
 403f7c0:	10800517 	ldw	r2,20(r2)
 403f7c4:	e0bffb15 	stw	r2,-20(fp)
 403f7c8:	e0bffb17 	ldw	r2,-20(fp)
 403f7cc:	1004c03a 	cmpne	r2,r2,zero
 403f7d0:	103fab1e 	bne	r2,zero,403f680 <igmpv1_input+0xac>
               /* increment the count of running timers */
               ++igmp_timers_are_running;            
            }   
         }
      }
      rc = IGMP_OK;
 403f7d4:	e03ff915 	stw	zero,-28(fp)
      break;
 403f7d8:	00002e06 	br	403f894 <igmpv1_input+0x2c0>

   case IGMP_HOST_MEMBERSHIP_REPORT:
      ++igmpstats.igmpv1mode_v1_reports_rcvd;
 403f7dc:	008101b4 	movhi	r2,1030
 403f7e0:	10a20c04 	addi	r2,r2,-30672
 403f7e4:	10800217 	ldw	r2,8(r2)
 403f7e8:	10c00044 	addi	r3,r2,1
 403f7ec:	008101b4 	movhi	r2,1030
 403f7f0:	10a20c04 	addi	r2,r2,-30672
 403f7f4:	10c00215 	stw	r3,8(r2)
      /*
       * If we belong to the group being reported and have a 
       * running timer for that group, stop our timer for that 
       * group.
       */
      inm = lookup_mcast(igmp->igmp_group, netp);
 403f7f8:	e0bffd17 	ldw	r2,-12(fp)
 403f7fc:	11000117 	ldw	r4,4(r2)
 403f800:	e17ffa17 	ldw	r5,-24(fp)
 403f804:	403da040 	call	403da04 <lookup_mcast>
 403f808:	e0bffb15 	stw	r2,-20(fp)
      if (inm != NULL) 
 403f80c:	e0bffb17 	ldw	r2,-20(fp)
 403f810:	1005003a 	cmpeq	r2,r2,zero
 403f814:	1000141e 	bne	r2,zero,403f868 <igmpv1_input+0x294>
      {
         if (inm->inm_timer > 0)
 403f818:	e0bffb17 	ldw	r2,-20(fp)
 403f81c:	10800317 	ldw	r2,12(r2)
 403f820:	1005003a 	cmpeq	r2,r2,zero
 403f824:	1000101e 	bne	r2,zero,403f868 <igmpv1_input+0x294>
         {
            inm->inm_timer = 0;
 403f828:	e0bffb17 	ldw	r2,-20(fp)
 403f82c:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 403f830:	00810174 	movhi	r2,1029
 403f834:	1081c204 	addi	r2,r2,1800
 403f838:	10800017 	ldw	r2,0(r2)
 403f83c:	10ffffc4 	addi	r3,r2,-1
 403f840:	00810174 	movhi	r2,1029
 403f844:	1081c204 	addi	r2,r2,1800
 403f848:	10c00015 	stw	r3,0(r2)
            ++igmpstats.igmpv1mode_v1_reports_rcvd_canceled_timer;
 403f84c:	008101b4 	movhi	r2,1030
 403f850:	10a20c04 	addi	r2,r2,-30672
 403f854:	10800317 	ldw	r2,12(r2)
 403f858:	10c00044 	addi	r3,r2,1
 403f85c:	008101b4 	movhi	r2,1030
 403f860:	10a20c04 	addi	r2,r2,-30672
 403f864:	10c00315 	stw	r3,12(r2)
         }
      }
      rc = IGMP_OK;
 403f868:	e03ff915 	stw	zero,-28(fp)
      break;
 403f86c:	00000906 	br	403f894 <igmpv1_input+0x2c0>
      
   default:
      ++igmpstats.igmpv1mode_unknown_pkttype;
 403f870:	008101b4 	movhi	r2,1030
 403f874:	10a20c04 	addi	r2,r2,-30672
 403f878:	10801017 	ldw	r2,64(r2)
 403f87c:	10c00044 	addi	r3,r2,1
 403f880:	008101b4 	movhi	r2,1030
 403f884:	10a20c04 	addi	r2,r2,-30672
 403f888:	10c01015 	stw	r3,64(r2)
      rc = IGMP_ERR;
 403f88c:	00bfffc4 	movi	r2,-1
 403f890:	e0bff915 	stw	r2,-28(fp)
      break;   
   }

   /* we're done with the received packet; return packet buffer back 
    * to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403f894:	01000084 	movi	r4,2
 403f898:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 403f89c:	e13ffe17 	ldw	r4,-8(fp)
 403f8a0:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403f8a4:	01000084 	movi	r4,2
 403f8a8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      
   return rc;
 403f8ac:	e0bff917 	ldw	r2,-28(fp)
}
 403f8b0:	e037883a 	mov	sp,fp
 403f8b4:	dfc00117 	ldw	ra,4(sp)
 403f8b8:	df000017 	ldw	fp,0(sp)
 403f8bc:	dec00204 	addi	sp,sp,8
 403f8c0:	f800283a 	ret

0403f8c4 <igmpv2_input>:
 * from igmpv2_process_report (), IGMP_OK (for a received Leave Group
 * message only), or IGMP_ERR (for a message of an "unknown" type).
 */

int igmpv2_input (PACKET p)
{
 403f8c4:	defff704 	addi	sp,sp,-36
 403f8c8:	dfc00815 	stw	ra,32(sp)
 403f8cc:	df000715 	stw	fp,28(sp)
 403f8d0:	df000704 	addi	fp,sp,28
 403f8d4:	e13ffe15 	stw	r4,-8(fp)
   struct ip * pip;
   int igmplen;
   u_char type;
   int rc;

   pip = ip_head (p);    
 403f8d8:	e0bffe17 	ldw	r2,-8(fp)
 403f8dc:	10800317 	ldw	r2,12(r2)
 403f8e0:	e0bffc15 	stw	r2,-16(fp)
   /* compute length of IGMP packet (after accounting for IP header, 
    * including the IP Router Alert option (if present)) */   
   igmplen = p->nb_plen - ip_hlen (pip);
 403f8e4:	e0bffe17 	ldw	r2,-8(fp)
 403f8e8:	10c00417 	ldw	r3,16(r2)
 403f8ec:	e0bffc17 	ldw	r2,-16(fp)
 403f8f0:	10800003 	ldbu	r2,0(r2)
 403f8f4:	10803fcc 	andi	r2,r2,255
 403f8f8:	108003cc 	andi	r2,r2,15
 403f8fc:	1085883a 	add	r2,r2,r2
 403f900:	1085883a 	add	r2,r2,r2
 403f904:	1885c83a 	sub	r2,r3,r2
 403f908:	e0bffb15 	stw	r2,-20(fp)
   igmp = (struct igmp *) (ip_data (pip));   
 403f90c:	e0bffc17 	ldw	r2,-16(fp)
 403f910:	10800003 	ldbu	r2,0(r2)
 403f914:	10803fcc 	andi	r2,r2,255
 403f918:	108003cc 	andi	r2,r2,15
 403f91c:	1085883a 	add	r2,r2,r2
 403f920:	1085883a 	add	r2,r2,r2
 403f924:	1007883a 	mov	r3,r2
 403f928:	e0bffc17 	ldw	r2,-16(fp)
 403f92c:	1885883a 	add	r2,r3,r2
 403f930:	e0bffd15 	stw	r2,-12(fp)
   /* extract the IGMP packet type from received packet */
   type = igmp->igmp_type;
 403f934:	e0bffd17 	ldw	r2,-12(fp)
 403f938:	10800003 	ldbu	r2,0(r2)
 403f93c:	e0bffa05 	stb	r2,-24(fp)

   switch (type) 
 403f940:	e0bffa03 	ldbu	r2,-24(fp)
 403f944:	e0bfff15 	stw	r2,-4(fp)
 403f948:	e0ffff17 	ldw	r3,-4(fp)
 403f94c:	188004a0 	cmpeqi	r2,r3,18
 403f950:	1000121e 	bne	r2,zero,403f99c <igmpv2_input+0xd8>
 403f954:	e0ffff17 	ldw	r3,-4(fp)
 403f958:	188004c8 	cmpgei	r2,r3,19
 403f95c:	1000041e 	bne	r2,zero,403f970 <igmpv2_input+0xac>
 403f960:	e0ffff17 	ldw	r3,-4(fp)
 403f964:	18800460 	cmpeqi	r2,r3,17
 403f968:	1000081e 	bne	r2,zero,403f98c <igmpv2_input+0xc8>
 403f96c:	00001806 	br	403f9d0 <igmpv2_input+0x10c>
 403f970:	e0ffff17 	ldw	r3,-4(fp)
 403f974:	188005a0 	cmpeqi	r2,r3,22
 403f978:	1000081e 	bne	r2,zero,403f99c <igmpv2_input+0xd8>
 403f97c:	e0ffff17 	ldw	r3,-4(fp)
 403f980:	188005e0 	cmpeqi	r2,r3,23
 403f984:	1000091e 	bne	r2,zero,403f9ac <igmpv2_input+0xe8>
 403f988:	00001106 	br	403f9d0 <igmpv2_input+0x10c>
   {
      case IGMP_HOST_MEMBERSHIP_QUERY:
         rc = igmpv2_process_query (p);
 403f98c:	e13ffe17 	ldw	r4,-8(fp)
 403f990:	403fb700 	call	403fb70 <igmpv2_process_query>
 403f994:	e0bff915 	stw	r2,-28(fp)
         break;
 403f998:	00001606 	br	403f9f4 <igmpv2_input+0x130>

      case IGMP_HOST_MEMBERSHIP_REPORT:
      case IGMPv2_MEMBERSHIP_REPORT:
         rc = igmpv2_process_report (p);
 403f99c:	e13ffe17 	ldw	r4,-8(fp)
 403f9a0:	403fa240 	call	403fa24 <igmpv2_process_report>
 403f9a4:	e0bff915 	stw	r2,-28(fp)
         break;
 403f9a8:	00001206 	br	403f9f4 <igmpv2_input+0x130>
          * expect to receive such messages.  However, according to
          * RFC 2236, some implementations of an older version of the 
          * IGMPv2 specification send leave messages to the group 
          * being left.  If we do receive such a message, we will 
          * drop it. */       
         ++igmpstats.igmpv2mode_v2_leave_msgs_rcvd;
 403f9ac:	008101b4 	movhi	r2,1030
 403f9b0:	10a20c04 	addi	r2,r2,-30672
 403f9b4:	10800917 	ldw	r2,36(r2)
 403f9b8:	10c00044 	addi	r3,r2,1
 403f9bc:	008101b4 	movhi	r2,1030
 403f9c0:	10a20c04 	addi	r2,r2,-30672
 403f9c4:	10c00915 	stw	r3,36(r2)
         rc = IGMP_OK;
 403f9c8:	e03ff915 	stw	zero,-28(fp)
         break;               
 403f9cc:	00000906 	br	403f9f4 <igmpv2_input+0x130>

      default:     
         ++igmpstats.igmpv2mode_unknown_pkttype;
 403f9d0:	008101b4 	movhi	r2,1030
 403f9d4:	10a20c04 	addi	r2,r2,-30672
 403f9d8:	10801517 	ldw	r2,84(r2)
 403f9dc:	10c00044 	addi	r3,r2,1
 403f9e0:	008101b4 	movhi	r2,1030
 403f9e4:	10a20c04 	addi	r2,r2,-30672
 403f9e8:	10c01515 	stw	r3,84(r2)
         rc = IGMP_ERR;         
 403f9ec:	00bfffc4 	movi	r2,-1
 403f9f0:	e0bff915 	stw	r2,-28(fp)
         break;
   } /* end SWITCH */

   /* we're done processing the received packet; return packet buffer 
    * back to free pool */
   LOCK_NET_RESOURCE(FREEQ_RESID);
 403f9f4:	01000084 	movi	r4,2
 403f9f8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   pk_free(p);
 403f9fc:	e13ffe17 	ldw	r4,-8(fp)
 403fa00:	40253040 	call	4025304 <pk_free>
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 403fa04:	01000084 	movi	r4,2
 403fa08:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
   
   return rc;
 403fa0c:	e0bff917 	ldw	r2,-28(fp)
}
 403fa10:	e037883a 	mov	sp,fp
 403fa14:	dfc00117 	ldw	ra,4(sp)
 403fa18:	df000017 	ldw	fp,0(sp)
 403fa1c:	dec00204 	addi	sp,sp,8
 403fa20:	f800283a 	ret

0403fa24 <igmpv2_process_report>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_report (PACKET p)
{
 403fa24:	defff904 	addi	sp,sp,-28
 403fa28:	dfc00615 	stw	ra,24(sp)
 403fa2c:	df000515 	stw	fp,20(sp)
 403fa30:	df000504 	addi	fp,sp,20
 403fa34:	e13fff15 	stw	r4,-4(fp)
   struct igmp * igmp;
   struct ip * pip;
   NET netp;
   struct in_multi * inm;

   netp = p->net;
 403fa38:	e0bfff17 	ldw	r2,-4(fp)
 403fa3c:	10800617 	ldw	r2,24(r2)
 403fa40:	e0bffc15 	stw	r2,-16(fp)
   pip = ip_head (p);
 403fa44:	e0bfff17 	ldw	r2,-4(fp)
 403fa48:	10800317 	ldw	r2,12(r2)
 403fa4c:	e0bffd15 	stw	r2,-12(fp)
   igmp = (struct igmp *) (ip_data (pip));   
 403fa50:	e0bffd17 	ldw	r2,-12(fp)
 403fa54:	10800003 	ldbu	r2,0(r2)
 403fa58:	10803fcc 	andi	r2,r2,255
 403fa5c:	108003cc 	andi	r2,r2,15
 403fa60:	1085883a 	add	r2,r2,r2
 403fa64:	1085883a 	add	r2,r2,r2
 403fa68:	1007883a 	mov	r3,r2
 403fa6c:	e0bffd17 	ldw	r2,-12(fp)
 403fa70:	1885883a 	add	r2,r3,r2
 403fa74:	e0bffe15 	stw	r2,-8(fp)
    * processing IGMPv2 packets (it has "downgraded" itself because
    * there are IGMPv1 routers on that network); however, we do not
    * know that, and hence we don't cancel our timer (for the 
    * subsequent transmission of a IGMPv1 report).
    */
   inm = lookup_mcast(igmp->igmp_group, netp);
 403fa78:	e0bffe17 	ldw	r2,-8(fp)
 403fa7c:	11000117 	ldw	r4,4(r2)
 403fa80:	e17ffc17 	ldw	r5,-16(fp)
 403fa84:	403da040 	call	403da04 <lookup_mcast>
 403fa88:	e0bffb15 	stw	r2,-20(fp)
   if (inm != NULL) 
 403fa8c:	e0bffb17 	ldw	r2,-20(fp)
 403fa90:	1005003a 	cmpeq	r2,r2,zero
 403fa94:	1000291e 	bne	r2,zero,403fb3c <igmpv2_process_report+0x118>
   {
      if (inm->inm_timer != 0)
 403fa98:	e0bffb17 	ldw	r2,-20(fp)
 403fa9c:	10800317 	ldw	r2,12(r2)
 403faa0:	1005003a 	cmpeq	r2,r2,zero
 403faa4:	10001d1e 	bne	r2,zero,403fb1c <igmpv2_process_report+0xf8>
      {
         /* we have a timer running */
         if (!(netp->igmpv1_rtr_present && 
 403faa8:	e0bffc17 	ldw	r2,-16(fp)
 403faac:	10802d03 	ldbu	r2,180(r2)
 403fab0:	10803fcc 	andi	r2,r2,255
 403fab4:	1005003a 	cmpeq	r2,r2,zero
 403fab8:	1000051e 	bne	r2,zero,403fad0 <igmpv2_process_report+0xac>
 403fabc:	e0bffe17 	ldw	r2,-8(fp)
 403fac0:	10800003 	ldbu	r2,0(r2)
 403fac4:	10803fcc 	andi	r2,r2,255
 403fac8:	108005a0 	cmpeqi	r2,r2,22
 403facc:	1000221e 	bne	r2,zero,403fb58 <igmpv2_process_report+0x134>
             igmp->igmp_type == IGMPv2_MEMBERSHIP_REPORT))
         {
            /* cancel timer */
            inm->inm_timer = 0;
 403fad0:	e0bffb17 	ldw	r2,-20(fp)
 403fad4:	10000315 	stw	zero,12(r2)
            /* decrement the count of running timers */
            --igmp_timers_are_running;
 403fad8:	00810174 	movhi	r2,1029
 403fadc:	1081c204 	addi	r2,r2,1800
 403fae0:	10800017 	ldw	r2,0(r2)
 403fae4:	10ffffc4 	addi	r3,r2,-1
 403fae8:	00810174 	movhi	r2,1029
 403faec:	1081c204 	addi	r2,r2,1800
 403faf0:	10c00015 	stw	r3,0(r2)
            /* indicate that we are not the last host to send a 
             * report for this group */
            inm->last2send_report = IGMP_FALSE;
 403faf4:	e0bffb17 	ldw	r2,-20(fp)
 403faf8:	10000405 	stb	zero,16(r2)
            ++igmpstats.igmpv2mode_v12_reports_rcvd_canceled_timer;
 403fafc:	008101b4 	movhi	r2,1030
 403fb00:	10a20c04 	addi	r2,r2,-30672
 403fb04:	10800717 	ldw	r2,28(r2)
 403fb08:	10c00044 	addi	r3,r2,1
 403fb0c:	008101b4 	movhi	r2,1030
 403fb10:	10a20c04 	addi	r2,r2,-30672
 403fb14:	10c00715 	stw	r3,28(r2)
 403fb18:	00000f06 	br	403fb58 <igmpv2_process_report+0x134>
      else
      {
         /* we don't have a timer running; perhaps the source
          * host has just joined the group, and has sent an
          * unsolicited report */
         ++igmpstats.igmpv2mode_v12_reports_rcvd_no_timer;   
 403fb1c:	008101b4 	movhi	r2,1030
 403fb20:	10a20c04 	addi	r2,r2,-30672
 403fb24:	10800817 	ldw	r2,32(r2)
 403fb28:	10c00044 	addi	r3,r2,1
 403fb2c:	008101b4 	movhi	r2,1030
 403fb30:	10a20c04 	addi	r2,r2,-30672
 403fb34:	10c00815 	stw	r3,32(r2)
 403fb38:	00000706 	br	403fb58 <igmpv2_process_report+0x134>
       * on that interface.  Even if imperfect filtering at the 
       * device level causes reports for unregistered groups to 
       * be passed up to the IP module, ip_rcv_phase2 () is 
       * responsible for dropping them, and so we should never
       * receive such packets. */
      ++igmpstats.igmpv2mode_v12_unknown_grp_reports_rcvd;
 403fb3c:	008101b4 	movhi	r2,1030
 403fb40:	10a20c04 	addi	r2,r2,-30672
 403fb44:	10801317 	ldw	r2,76(r2)
 403fb48:	10c00044 	addi	r3,r2,1
 403fb4c:	008101b4 	movhi	r2,1030
 403fb50:	10a20c04 	addi	r2,r2,-30672
 403fb54:	10c01315 	stw	r3,76(r2)
   }
   
   return IGMP_OK;   
 403fb58:	0005883a 	mov	r2,zero
}
 403fb5c:	e037883a 	mov	sp,fp
 403fb60:	dfc00117 	ldw	ra,4(sp)
 403fb64:	df000017 	ldw	fp,0(sp)
 403fb68:	dec00204 	addi	sp,sp,8
 403fb6c:	f800283a 	ret

0403fb70 <igmpv2_process_query>:
 *
 * OUTPUT: This function always returns IGMP_OK.
 */

int igmpv2_process_query (PACKET p)
{
 403fb70:	defff704 	addi	sp,sp,-36
 403fb74:	dfc00815 	stw	ra,32(sp)
 403fb78:	df000715 	stw	fp,28(sp)
 403fb7c:	df000704 	addi	fp,sp,28
 403fb80:	e13fff15 	stw	r4,-4(fp)
   u_short max_resp_time;
   u_char process_all;
   struct in_multi * inm;
   ip_addr mcgrp_addr;

   netp = p->net;
 403fb84:	e0bfff17 	ldw	r2,-4(fp)
 403fb88:	10800617 	ldw	r2,24(r2)
 403fb8c:	e0bffc15 	stw	r2,-16(fp)
   pip = ip_head (p);
 403fb90:	e0bfff17 	ldw	r2,-4(fp)
 403fb94:	10800317 	ldw	r2,12(r2)
 403fb98:	e0bffd15 	stw	r2,-12(fp)
   igmp = (struct igmp *) (ip_data (pip));
 403fb9c:	e0bffd17 	ldw	r2,-12(fp)
 403fba0:	10800003 	ldbu	r2,0(r2)
 403fba4:	10803fcc 	andi	r2,r2,255
 403fba8:	108003cc 	andi	r2,r2,15
 403fbac:	1085883a 	add	r2,r2,r2
 403fbb0:	1085883a 	add	r2,r2,r2
 403fbb4:	1007883a 	mov	r3,r2
 403fbb8:	e0bffd17 	ldw	r2,-12(fp)
 403fbbc:	1885883a 	add	r2,r3,r2
 403fbc0:	e0bffe15 	stw	r2,-8(fp)
   mcgrp_addr = ntohl(igmp->igmp_group);
 403fbc4:	e0bffe17 	ldw	r2,-8(fp)
 403fbc8:	10800117 	ldw	r2,4(r2)
 403fbcc:	1004d63a 	srli	r2,r2,24
 403fbd0:	10c03fcc 	andi	r3,r2,255
 403fbd4:	e0bffe17 	ldw	r2,-8(fp)
 403fbd8:	10800117 	ldw	r2,4(r2)
 403fbdc:	1004d23a 	srli	r2,r2,8
 403fbe0:	10bfc00c 	andi	r2,r2,65280
 403fbe4:	1886b03a 	or	r3,r3,r2
 403fbe8:	e0bffe17 	ldw	r2,-8(fp)
 403fbec:	10800117 	ldw	r2,4(r2)
 403fbf0:	10bfc00c 	andi	r2,r2,65280
 403fbf4:	1004923a 	slli	r2,r2,8
 403fbf8:	1886b03a 	or	r3,r3,r2
 403fbfc:	e0bffe17 	ldw	r2,-8(fp)
 403fc00:	10800117 	ldw	r2,4(r2)
 403fc04:	10803fcc 	andi	r2,r2,255
 403fc08:	1004963a 	slli	r2,r2,24
 403fc0c:	1884b03a 	or	r2,r3,r2
 403fc10:	e0bff915 	stw	r2,-28(fp)

   if (igmp->igmp_code == 0)
 403fc14:	e0bffe17 	ldw	r2,-8(fp)
 403fc18:	10800043 	ldbu	r2,1(r2)
 403fc1c:	10803fcc 	andi	r2,r2,255
 403fc20:	1004c03a 	cmpne	r2,r2,zero
 403fc24:	1000141e 	bne	r2,zero,403fc78 <igmpv2_process_query+0x108>
   {
      /* this is a IGMPv1 Host Membership Query */
      netp->igmpv1_rtr_present = IGMP_TRUE;
 403fc28:	e0fffc17 	ldw	r3,-16(fp)
 403fc2c:	00800044 	movi	r2,1
 403fc30:	18802d05 	stb	r2,180(r3)
      netp->igmpv1_query_rcvd_time = cticks;      
 403fc34:	00810174 	movhi	r2,1029
 403fc38:	1081e404 	addi	r2,r2,1936
 403fc3c:	10c00017 	ldw	r3,0(r2)
 403fc40:	e0bffc17 	ldw	r2,-16(fp)
 403fc44:	10c02e15 	stw	r3,184(r2)
      ++igmpstats.igmpv2mode_v1_queries_rcvd;
 403fc48:	008101b4 	movhi	r2,1030
 403fc4c:	10a20c04 	addi	r2,r2,-30672
 403fc50:	10800417 	ldw	r2,16(r2)
 403fc54:	10c00044 	addi	r3,r2,1
 403fc58:	008101b4 	movhi	r2,1030
 403fc5c:	10a20c04 	addi	r2,r2,-30672
 403fc60:	10c00415 	stw	r3,16(r2)
      /* set maximum time to respond to the equivalent of 10 
       * seconds worth of "ticks" (the timeout routine is
       * intended to be invoked PR_FASTHZ (5) times a second,
       * so each tick is equal to 200 ms) */
      max_resp_time = IGMP_MAX_HOST_REPORT_DELAY * PR_FASTHZ;
 403fc64:	00800c84 	movi	r2,50
 403fc68:	e0bffb8d 	sth	r2,-18(fp)
      process_all = IGMP_TRUE;
 403fc6c:	00800044 	movi	r2,1
 403fc70:	e0bffb05 	stb	r2,-20(fp)
 403fc74:	00001d06 	br	403fcec <igmpv2_process_query+0x17c>
   }
   else
   {
      /* this is either a IGMPv2 General Query or 
       * a IGMPv2 Group-Specific Query */
      if (igmp->igmp_group == 0)
 403fc78:	e0bffe17 	ldw	r2,-8(fp)
 403fc7c:	10800117 	ldw	r2,4(r2)
 403fc80:	1004c03a 	cmpne	r2,r2,zero
 403fc84:	10000a1e 	bne	r2,zero,403fcb0 <igmpv2_process_query+0x140>
      {
         /* this is a IGMPv2 General Query */
         ++igmpstats.igmpv2mode_v2_general_queries_rcvd;
 403fc88:	008101b4 	movhi	r2,1030
 403fc8c:	10a20c04 	addi	r2,r2,-30672
 403fc90:	10800517 	ldw	r2,20(r2)
 403fc94:	10c00044 	addi	r3,r2,1
 403fc98:	008101b4 	movhi	r2,1030
 403fc9c:	10a20c04 	addi	r2,r2,-30672
 403fca0:	10c00515 	stw	r3,20(r2)
         process_all = IGMP_TRUE;
 403fca4:	00800044 	movi	r2,1
 403fca8:	e0bffb05 	stb	r2,-20(fp)
 403fcac:	00000806 	br	403fcd0 <igmpv2_process_query+0x160>
      }
      else
      {
         /* this is a IGMPv2 Group-Specific Query */       
         ++igmpstats.igmpv2mode_v2_grp_specific_queries_rcvd;
 403fcb0:	008101b4 	movhi	r2,1030
 403fcb4:	10a20c04 	addi	r2,r2,-30672
 403fcb8:	10800617 	ldw	r2,24(r2)
 403fcbc:	10c00044 	addi	r3,r2,1
 403fcc0:	008101b4 	movhi	r2,1030
 403fcc4:	10a20c04 	addi	r2,r2,-30672
 403fcc8:	10c00615 	stw	r3,24(r2)
         process_all = IGMP_FALSE;
 403fccc:	e03ffb05 	stb	zero,-20(fp)
       * IGMPv2 General Query or a IGMPv2 Group-Specific Query,
       * set maximum time to respond to value extracted 
       * from received message. The value in the message
       * is in tenths of a second.  max_resp_time is in
       * units of ticks (where one tick is 200 ms) */
      max_resp_time = (igmp->igmp_code * PR_FASTHZ) / 10;
 403fcd0:	e0bffe17 	ldw	r2,-8(fp)
 403fcd4:	10800043 	ldbu	r2,1(r2)
 403fcd8:	10c03fcc 	andi	r3,r2,255
 403fcdc:	1804d7fa 	srli	r2,r3,31
 403fce0:	10c5883a 	add	r2,r2,r3
 403fce4:	1005d07a 	srai	r2,r2,1
 403fce8:	e0bffb8d 	sth	r2,-18(fp)
   
   /* process all entries in a link's multicast address linked
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
 403fcec:	e0bffb03 	ldbu	r2,-20(fp)
 403fcf0:	1005003a 	cmpeq	r2,r2,zero
 403fcf4:	1000181e 	bne	r2,zero,403fd58 <igmpv2_process_query+0x1e8>
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 403fcf8:	e0bffc17 	ldw	r2,-16(fp)
 403fcfc:	10802c17 	ldw	r2,176(r2)
 403fd00:	e0bffa15 	stw	r2,-24(fp)
 403fd04:	00001006 	br	403fd48 <igmpv2_process_query+0x1d8>
      {
         /* skip all IPv6 entries - they are indicated by 
          * an IPv4 address field of 0 */
         if (!(inm->inm_addr)) continue;
 403fd08:	e0bffa17 	ldw	r2,-24(fp)
 403fd0c:	10800017 	ldw	r2,0(r2)
 403fd10:	1005003a 	cmpeq	r2,r2,zero
 403fd14:	1000091e 	bne	r2,zero,403fd3c <igmpv2_process_query+0x1cc>
         /* skip IPv4 multicast address of 224.0.0.1 (note that
          * the IPv4 address stored in inm_addr is in network 
          * byte order */
         if (inm->inm_addr != igmp_all_hosts_group)
 403fd18:	e0bffa17 	ldw	r2,-24(fp)
 403fd1c:	10c00017 	ldw	r3,0(r2)
 403fd20:	00810174 	movhi	r2,1029
 403fd24:	1081c404 	addi	r2,r2,1808
 403fd28:	10800017 	ldw	r2,0(r2)
 403fd2c:	18800326 	beq	r3,r2,403fd3c <igmpv2_process_query+0x1cc>
            igmpv2_chk_set_timer (inm, max_resp_time);
 403fd30:	e17ffb8b 	ldhu	r5,-18(fp)
 403fd34:	e13ffa17 	ldw	r4,-24(fp)
 403fd38:	403fdbc0 	call	403fdbc <igmpv2_chk_set_timer>
    * list (pointed to by mc_list) as part of the response to
    * the received IGMPv1 Host Membership Query or IGMPv2 General
    * Query message */
   if (process_all)
   {
      for (inm = netp->mc_list; inm; inm = inm->inm_next)
 403fd3c:	e0bffa17 	ldw	r2,-24(fp)
 403fd40:	10800517 	ldw	r2,20(r2)
 403fd44:	e0bffa15 	stw	r2,-24(fp)
 403fd48:	e0bffa17 	ldw	r2,-24(fp)
 403fd4c:	1004c03a 	cmpne	r2,r2,zero
 403fd50:	103fed1e 	bne	r2,zero,403fd08 <igmpv2_process_query+0x198>
 403fd54:	00001306 	br	403fda4 <igmpv2_process_query+0x234>
   {
      /* process one (for IGMPv2 Group-Specific Query) entry (the 
       * one that corresponds to the address listed in the received 
       * query) - it should be present in the link's multicast
       * address list */
      inm = lookup_mcast(igmp->igmp_group, netp);
 403fd58:	e0bffe17 	ldw	r2,-8(fp)
 403fd5c:	11000117 	ldw	r4,4(r2)
 403fd60:	e17ffc17 	ldw	r5,-16(fp)
 403fd64:	403da040 	call	403da04 <lookup_mcast>
 403fd68:	e0bffa15 	stw	r2,-24(fp)
      if (inm != NULL)
 403fd6c:	e0bffa17 	ldw	r2,-24(fp)
 403fd70:	1005003a 	cmpeq	r2,r2,zero
 403fd74:	1000041e 	bne	r2,zero,403fd88 <igmpv2_process_query+0x218>
         igmpv2_chk_set_timer (inm, max_resp_time);
 403fd78:	e17ffb8b 	ldhu	r5,-18(fp)
 403fd7c:	e13ffa17 	ldw	r4,-24(fp)
 403fd80:	403fdbc0 	call	403fdbc <igmpv2_chk_set_timer>
 403fd84:	00000706 	br	403fda4 <igmpv2_process_query+0x234>
      else ++igmpstats.igmpv2mode_v2_unknown_grp_specific_queries_rcvd;
 403fd88:	008101b4 	movhi	r2,1030
 403fd8c:	10a20c04 	addi	r2,r2,-30672
 403fd90:	10801217 	ldw	r2,72(r2)
 403fd94:	10c00044 	addi	r3,r2,1
 403fd98:	008101b4 	movhi	r2,1030
 403fd9c:	10a20c04 	addi	r2,r2,-30672
 403fda0:	10c01215 	stw	r3,72(r2)
   } /* end ELSE (process ALL) */
   
   /* return success; caller will the received packet back to the 
    * free pool */
   return IGMP_OK;
 403fda4:	0005883a 	mov	r2,zero
}
 403fda8:	e037883a 	mov	sp,fp
 403fdac:	dfc00117 	ldw	ra,4(sp)
 403fdb0:	df000017 	ldw	fp,0(sp)
 403fdb4:	dec00204 	addi	sp,sp,8
 403fdb8:	f800283a 	ret

0403fdbc <igmpv2_chk_set_timer>:
 *
 * OUTPUT: None.
 */

void igmpv2_chk_set_timer (struct in_multi * inm, u_short max_resp_time)
{  
 403fdbc:	defffd04 	addi	sp,sp,-12
 403fdc0:	df000215 	stw	fp,8(sp)
 403fdc4:	df000204 	addi	fp,sp,8
 403fdc8:	e13ffe15 	stw	r4,-8(fp)
 403fdcc:	e17fff0d 	sth	r5,-4(fp)

    * Otherwise, the current timer for this group is scheduled 
    * to expire within the duration indicated in the Query 
    * message, so we let it continue. 
    */
   if ((inm->inm_timer > max_resp_time) ||
 403fdd0:	e0bffe17 	ldw	r2,-8(fp)
 403fdd4:	10c00317 	ldw	r3,12(r2)
 403fdd8:	e0bfff0b 	ldhu	r2,-4(fp)
 403fddc:	10c00436 	bltu	r2,r3,403fdf0 <igmpv2_chk_set_timer+0x34>
 403fde0:	e0bffe17 	ldw	r2,-8(fp)
 403fde4:	10800317 	ldw	r2,12(r2)
 403fde8:	1004c03a 	cmpne	r2,r2,zero
 403fdec:	1000451e 	bne	r2,zero,403ff04 <igmpv2_chk_set_timer+0x148>
       (inm->inm_timer == 0))
   {
      if (inm->inm_timer == 0) ++igmp_timers_are_running;
 403fdf0:	e0bffe17 	ldw	r2,-8(fp)
 403fdf4:	10800317 	ldw	r2,12(r2)
 403fdf8:	1004c03a 	cmpne	r2,r2,zero
 403fdfc:	1000071e 	bne	r2,zero,403fe1c <igmpv2_chk_set_timer+0x60>
 403fe00:	00810174 	movhi	r2,1029
 403fe04:	1081c204 	addi	r2,r2,1800
 403fe08:	10800017 	ldw	r2,0(r2)
 403fe0c:	10c00044 	addi	r3,r2,1
 403fe10:	00810174 	movhi	r2,1029
 403fe14:	1081c204 	addi	r2,r2,1800
 403fe18:	10c00015 	stw	r3,0(r2)
      inm->inm_timer = (unsigned) IGMPv2_RANDOM_DELAY (max_resp_time, inm->inm_addr);                     
 403fe1c:	008101b4 	movhi	r2,1030
 403fe20:	10a44e04 	addi	r2,r2,-28360
 403fe24:	11000217 	ldw	r4,8(r2)
 403fe28:	008101b4 	movhi	r2,1030
 403fe2c:	10a20804 	addi	r2,r2,-30688
 403fe30:	10800017 	ldw	r2,0(r2)
 403fe34:	10800a17 	ldw	r2,40(r2)
 403fe38:	1004d63a 	srli	r2,r2,24
 403fe3c:	10c03fcc 	andi	r3,r2,255
 403fe40:	008101b4 	movhi	r2,1030
 403fe44:	10a20804 	addi	r2,r2,-30688
 403fe48:	10800017 	ldw	r2,0(r2)
 403fe4c:	10800a17 	ldw	r2,40(r2)
 403fe50:	1004d23a 	srli	r2,r2,8
 403fe54:	10bfc00c 	andi	r2,r2,65280
 403fe58:	1886b03a 	or	r3,r3,r2
 403fe5c:	008101b4 	movhi	r2,1030
 403fe60:	10a20804 	addi	r2,r2,-30688
 403fe64:	10800017 	ldw	r2,0(r2)
 403fe68:	10800a17 	ldw	r2,40(r2)
 403fe6c:	10bfc00c 	andi	r2,r2,65280
 403fe70:	1004923a 	slli	r2,r2,8
 403fe74:	1886b03a 	or	r3,r3,r2
 403fe78:	008101b4 	movhi	r2,1030
 403fe7c:	10a20804 	addi	r2,r2,-30688
 403fe80:	10800017 	ldw	r2,0(r2)
 403fe84:	10800a17 	ldw	r2,40(r2)
 403fe88:	10803fcc 	andi	r2,r2,255
 403fe8c:	1004963a 	slli	r2,r2,24
 403fe90:	1884b03a 	or	r2,r3,r2
 403fe94:	2089883a 	add	r4,r4,r2
 403fe98:	e0bffe17 	ldw	r2,-8(fp)
 403fe9c:	10800017 	ldw	r2,0(r2)
 403fea0:	1004d63a 	srli	r2,r2,24
 403fea4:	10c03fcc 	andi	r3,r2,255
 403fea8:	e0bffe17 	ldw	r2,-8(fp)
 403feac:	10800017 	ldw	r2,0(r2)
 403feb0:	1004d23a 	srli	r2,r2,8
 403feb4:	10bfc00c 	andi	r2,r2,65280
 403feb8:	1886b03a 	or	r3,r3,r2
 403febc:	e0bffe17 	ldw	r2,-8(fp)
 403fec0:	10800017 	ldw	r2,0(r2)
 403fec4:	10bfc00c 	andi	r2,r2,65280
 403fec8:	1004923a 	slli	r2,r2,8
 403fecc:	1886b03a 	or	r3,r3,r2
 403fed0:	e0bffe17 	ldw	r2,-8(fp)
 403fed4:	10800017 	ldw	r2,0(r2)
 403fed8:	10803fcc 	andi	r2,r2,255
 403fedc:	1004963a 	slli	r2,r2,24
 403fee0:	1884b03a 	or	r2,r3,r2
 403fee4:	2089883a 	add	r4,r4,r2
 403fee8:	e0ffff0b 	ldhu	r3,-4(fp)
 403feec:	20c5203a 	divu	r2,r4,r3
 403fef0:	10c5383a 	mul	r2,r2,r3
 403fef4:	2085c83a 	sub	r2,r4,r2
 403fef8:	10c00044 	addi	r3,r2,1
 403fefc:	e0bffe17 	ldw	r2,-8(fp)
 403ff00:	10c00315 	stw	r3,12(r2)
   }

   return;
}
 403ff04:	e037883a 	mov	sp,fp
 403ff08:	df000017 	ldw	fp,0(sp)
 403ff0c:	dec00104 	addi	sp,sp,4
 403ff10:	f800283a 	ret

0403ff14 <igmpv2_chk4_rtr_alert_opt>:
 *         the IP Router Alert option in the received
 *         packet, and IGMP_FALSE otherwise.
 */

u_char igmpv2_chk4_rtr_alert_opt (struct ip * pip)
{
 403ff14:	defff904 	addi	sp,sp,-28
 403ff18:	df000615 	stw	fp,24(sp)
 403ff1c:	df000604 	addi	fp,sp,24
 403ff20:	e13ffd15 	stw	r4,-12(fp)
   u_long * rtr_alert_optp;
   u_char total_optlen;
   u_char optlen;
   u_char optval;

   total_optlen = ip_hlen (pip) - sizeof (struct ip);
 403ff24:	e0bffd17 	ldw	r2,-12(fp)
 403ff28:	10800003 	ldbu	r2,0(r2)
 403ff2c:	108003cc 	andi	r2,r2,15
 403ff30:	1085883a 	add	r2,r2,r2
 403ff34:	1085883a 	add	r2,r2,r2
 403ff38:	10bffb04 	addi	r2,r2,-20
 403ff3c:	e0bffa85 	stb	r2,-22(fp)

   if (total_optlen > 0)
 403ff40:	e0bffa83 	ldbu	r2,-22(fp)
 403ff44:	1005003a 	cmpeq	r2,r2,zero
 403ff48:	1000481e 	bne	r2,zero,404006c <igmpv2_chk4_rtr_alert_opt+0x158>
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
 403ff4c:	e0bffd17 	ldw	r2,-12(fp)
 403ff50:	10800504 	addi	r2,r2,20
 403ff54:	e0bffc15 	stw	r2,-16(fp)
  
      while (total_optlen > 0)
 403ff58:	00004106 	br	4040060 <igmpv2_chk4_rtr_alert_opt+0x14c>
      {
         /* only the lowermost 5 bits are significant */    
         optval = (*optp) & IPOPT_TYPE_MASK;
 403ff5c:	e0bffc17 	ldw	r2,-16(fp)
 403ff60:	10800003 	ldbu	r2,0(r2)
 403ff64:	108007cc 	andi	r2,r2,31
 403ff68:	e0bffa05 	stb	r2,-24(fp)
         switch (optval)
 403ff6c:	e0bffa03 	ldbu	r2,-24(fp)
 403ff70:	e0bfff15 	stw	r2,-4(fp)
 403ff74:	e0ffff17 	ldw	r3,-4(fp)
 403ff78:	18800060 	cmpeqi	r2,r3,1
 403ff7c:	10000b1e 	bne	r2,zero,403ffac <igmpv2_chk4_rtr_alert_opt+0x98>
 403ff80:	e0ffff17 	ldw	r3,-4(fp)
 403ff84:	18800520 	cmpeqi	r2,r3,20
 403ff88:	10000b1e 	bne	r2,zero,403ffb8 <igmpv2_chk4_rtr_alert_opt+0xa4>
 403ff8c:	e0ffff17 	ldw	r3,-4(fp)
 403ff90:	1805003a 	cmpeq	r2,r3,zero
 403ff94:	1000011e 	bne	r2,zero,403ff9c <igmpv2_chk4_rtr_alert_opt+0x88>
 403ff98:	00002306 	br	4040028 <igmpv2_chk4_rtr_alert_opt+0x114>
         {
            case EOL_OPT:
               /* we've encountered the End of Option List option, 
                * and so setting optlen isn't necessary */
               optlen = 1;
 403ff9c:	00800044 	movi	r2,1
 403ffa0:	e0bffa45 	stb	r2,-23(fp)
               /* we're done - we couldn't locate the IP Router Alert 
                * option in this IP header */
               return IGMP_FALSE;
 403ffa4:	e03ffe15 	stw	zero,-8(fp)
 403ffa8:	00003106 	br	4040070 <igmpv2_chk4_rtr_alert_opt+0x15c>
         
            case NOOP_OPT:
               /* skip past the one byte of the No Operation option */
               optlen = 1;
 403ffac:	00800044 	movi	r2,1
 403ffb0:	e0bffa45 	stb	r2,-23(fp)
               break;
 403ffb4:	00002106 	br	404003c <igmpv2_chk4_rtr_alert_opt+0x128>
         
            case IP_RTR_ALERT_OPT:
               rtr_alert_optp = (u_long *) optp; 
 403ffb8:	e0bffc17 	ldw	r2,-16(fp)
 403ffbc:	e0bffb15 	stw	r2,-20(fp)
               if ((ntohl (*rtr_alert_optp)) == IP_RTR_ALERT_OPT_DATA)
 403ffc0:	e0bffb17 	ldw	r2,-20(fp)
 403ffc4:	10800017 	ldw	r2,0(r2)
 403ffc8:	1004d63a 	srli	r2,r2,24
 403ffcc:	10c03fcc 	andi	r3,r2,255
 403ffd0:	e0bffb17 	ldw	r2,-20(fp)
 403ffd4:	10800017 	ldw	r2,0(r2)
 403ffd8:	1004d23a 	srli	r2,r2,8
 403ffdc:	10bfc00c 	andi	r2,r2,65280
 403ffe0:	1886b03a 	or	r3,r3,r2
 403ffe4:	e0bffb17 	ldw	r2,-20(fp)
 403ffe8:	10800017 	ldw	r2,0(r2)
 403ffec:	10bfc00c 	andi	r2,r2,65280
 403fff0:	1004923a 	slli	r2,r2,8
 403fff4:	1886b03a 	or	r3,r3,r2
 403fff8:	e0bffb17 	ldw	r2,-20(fp)
 403fffc:	10800017 	ldw	r2,0(r2)
 4040000:	10803fcc 	andi	r2,r2,255
 4040004:	1004963a 	slli	r2,r2,24
 4040008:	1886b03a 	or	r3,r3,r2
 404000c:	00a50134 	movhi	r2,37892
 4040010:	1880031e 	bne	r3,r2,4040020 <igmpv2_chk4_rtr_alert_opt+0x10c>
                  /* found the option, return success */
                  return IGMP_TRUE;
 4040014:	00800044 	movi	r2,1
 4040018:	e0bffe15 	stw	r2,-8(fp)
 404001c:	00001406 	br	4040070 <igmpv2_chk4_rtr_alert_opt+0x15c>
               else return IGMP_FALSE;
 4040020:	e03ffe15 	stw	zero,-8(fp)
 4040024:	00001206 	br	4040070 <igmpv2_chk4_rtr_alert_opt+0x15c>
          
            default:
               /* extract the length of the current option, and compute
                * the total length of this option */
               optlen = (*(optp + 1)) + 2;
 4040028:	e0bffc17 	ldw	r2,-16(fp)
 404002c:	10800044 	addi	r2,r2,1
 4040030:	10800003 	ldbu	r2,0(r2)
 4040034:	10800084 	addi	r2,r2,2
 4040038:	e0bffa45 	stb	r2,-23(fp)
               break;
         }
         
         /* skip past the bytes associated with the current option to 
          * point to the next option. */
         optp += optlen;
 404003c:	e0bffa43 	ldbu	r2,-23(fp)
 4040040:	1007883a 	mov	r3,r2
 4040044:	e0bffc17 	ldw	r2,-16(fp)
 4040048:	10c5883a 	add	r2,r2,r3
 404004c:	e0bffc15 	stw	r2,-16(fp)
         total_optlen -= optlen;
 4040050:	e0fffa83 	ldbu	r3,-22(fp)
 4040054:	e0bffa43 	ldbu	r2,-23(fp)
 4040058:	1885c83a 	sub	r2,r3,r2
 404005c:	e0bffa85 	stb	r2,-22(fp)
   if (total_optlen > 0)
   {
      /* point to just past the end of the IP header */
      optp = (u_char *) (pip + 1);
  
      while (total_optlen > 0)
 4040060:	e0bffa83 	ldbu	r2,-22(fp)
 4040064:	1004c03a 	cmpne	r2,r2,zero
 4040068:	103fbc1e 	bne	r2,zero,403ff5c <igmpv2_chk4_rtr_alert_opt+0x48>
         total_optlen -= optlen;
      } /* end WHILE */
   }

   /* didn't find IP Alert option in IP header of rcvd packet */
   return IGMP_FALSE;
 404006c:	e03ffe15 	stw	zero,-8(fp)
 4040070:	e0bffe17 	ldw	r2,-8(fp)
}
 4040074:	e037883a 	mov	sp,fp
 4040078:	df000017 	ldw	fp,0(sp)
 404007c:	dec00104 	addi	sp,sp,4
 4040080:	f800283a 	ret

04040084 <IPADDR_TO_NETP>:
 * RETURNS: 
 */

void
IPADDR_TO_NETP(ip_addr addr, NET* netp)
{
 4040084:	defffc04 	addi	sp,sp,-16
 4040088:	df000315 	stw	fp,12(sp)
 404008c:	df000304 	addi	fp,sp,12
 4040090:	e13ffe15 	stw	r4,-8(fp)
 4040094:	e17fff15 	stw	r5,-4(fp)
   u_short  idx   =  0;
 4040098:	e03ffd0d 	sth	zero,-12(fp)
   *netp = nets[idx];
 404009c:	e0bffd0b 	ldhu	r2,-12(fp)
 40400a0:	00c101b4 	movhi	r3,1030
 40400a4:	18e20804 	addi	r3,r3,-30688
 40400a8:	1085883a 	add	r2,r2,r2
 40400ac:	1085883a 	add	r2,r2,r2
 40400b0:	10c5883a 	add	r2,r2,r3
 40400b4:	10c00017 	ldw	r3,0(r2)
 40400b8:	e0bfff17 	ldw	r2,-4(fp)
 40400bc:	10c00015 	stw	r3,0(r2)
/*
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
 40400c0:	e0bffe17 	ldw	r2,-8(fp)
 40400c4:	1004c03a 	cmpne	r2,r2,zero
 40400c8:	1000331e 	bne	r2,zero,4040198 <IPADDR_TO_NETP+0x114>
   {
      for (idx = 0; idx < ifNumber; idx++)
 40400cc:	e03ffd0d 	sth	zero,-12(fp)
 40400d0:	00001706 	br	4040130 <IPADDR_TO_NETP+0xac>
      {
         if (nets[idx]->n_mcastlist)
 40400d4:	e0bffd0b 	ldhu	r2,-12(fp)
 40400d8:	00c101b4 	movhi	r3,1030
 40400dc:	18e20804 	addi	r3,r3,-30688
 40400e0:	1085883a 	add	r2,r2,r2
 40400e4:	1085883a 	add	r2,r2,r2
 40400e8:	10c5883a 	add	r2,r2,r3
 40400ec:	10800017 	ldw	r2,0(r2)
 40400f0:	10802b17 	ldw	r2,172(r2)
 40400f4:	1005003a 	cmpeq	r2,r2,zero
 40400f8:	10000a1e 	bne	r2,zero,4040124 <IPADDR_TO_NETP+0xa0>
         {
            *netp = nets[idx];
 40400fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4040100:	00c101b4 	movhi	r3,1030
 4040104:	18e20804 	addi	r3,r3,-30688
 4040108:	1085883a 	add	r2,r2,r2
 404010c:	1085883a 	add	r2,r2,r2
 4040110:	10c5883a 	add	r2,r2,r3
 4040114:	10c00017 	ldw	r3,0(r2)
 4040118:	e0bfff17 	ldw	r2,-4(fp)
 404011c:	10c00015 	stw	r3,0(r2)
            break;
 4040120:	00002606 	br	40401bc <IPADDR_TO_NETP+0x138>
 * If ip address is not specified, return the first intfc that supports
 * multicast
 */
   if (addr == AADDR) 
   {
      for (idx = 0; idx < ifNumber; idx++)
 4040124:	e0bffd0b 	ldhu	r2,-12(fp)
 4040128:	10800044 	addi	r2,r2,1
 404012c:	e0bffd0d 	sth	r2,-12(fp)
 4040130:	e0bffd0b 	ldhu	r2,-12(fp)
 4040134:	00c10174 	movhi	r3,1029
 4040138:	18c1c004 	addi	r3,r3,1792
 404013c:	18c00017 	ldw	r3,0(r3)
 4040140:	10ffe436 	bltu	r2,r3,40400d4 <IPADDR_TO_NETP+0x50>
 4040144:	00001d06 	br	40401bc <IPADDR_TO_NETP+0x138>
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
      {
         idx++;
 4040148:	e0bffd0b 	ldhu	r2,-12(fp)
 404014c:	10800044 	addi	r2,r2,1
 4040150:	e0bffd0d 	sth	r2,-12(fp)
         if (idx >= ifNumber)
 4040154:	e0fffd0b 	ldhu	r3,-12(fp)
 4040158:	00810174 	movhi	r2,1029
 404015c:	1081c004 	addi	r2,r2,1792
 4040160:	10800017 	ldw	r2,0(r2)
 4040164:	18800336 	bltu	r3,r2,4040174 <IPADDR_TO_NETP+0xf0>
         {
            *netp = NULL;
 4040168:	e0bfff17 	ldw	r2,-4(fp)
 404016c:	10000015 	stw	zero,0(r2)
            break;
 4040170:	00001206 	br	40401bc <IPADDR_TO_NETP+0x138>
         }
         else
            *netp = nets[idx];
 4040174:	e0bffd0b 	ldhu	r2,-12(fp)
 4040178:	00c101b4 	movhi	r3,1030
 404017c:	18e20804 	addi	r3,r3,-30688
 4040180:	1085883a 	add	r2,r2,r2
 4040184:	1085883a 	add	r2,r2,r2
 4040188:	10c5883a 	add	r2,r2,r3
 404018c:	10c00017 	ldw	r3,0(r2)
 4040190:	e0bfff17 	ldw	r2,-4(fp)
 4040194:	10c00015 	stw	r3,0(r2)
         }
      }
   }
   else  /* ip address specified- return the corresponding interface */
   {
      while ((*netp != NULL) && ((*netp)->n_ipaddr != addr))
 4040198:	e0bfff17 	ldw	r2,-4(fp)
 404019c:	10800017 	ldw	r2,0(r2)
 40401a0:	1005003a 	cmpeq	r2,r2,zero
 40401a4:	1000051e 	bne	r2,zero,40401bc <IPADDR_TO_NETP+0x138>
 40401a8:	e0bfff17 	ldw	r2,-4(fp)
 40401ac:	10800017 	ldw	r2,0(r2)
 40401b0:	10c00a17 	ldw	r3,40(r2)
 40401b4:	e0bffe17 	ldw	r2,-8(fp)
 40401b8:	18bfe31e 	bne	r3,r2,4040148 <IPADDR_TO_NETP+0xc4>
         }
         else
            *netp = nets[idx];
      }
   }
}
 40401bc:	e037883a 	mov	sp,fp
 40401c0:	df000017 	ldw	fp,0(sp)
 40401c4:	dec00104 	addi	sp,sp,4
 40401c8:	f800283a 	ret

040401cc <ip_setmoptions>:
 * RETURNS: 
 */

int
ip_setmoptions(int optname, struct socket * so, void * val)
{
 40401cc:	defff104 	addi	sp,sp,-60
 40401d0:	dfc00e15 	stw	ra,56(sp)
 40401d4:	df000d15 	stw	fp,52(sp)
 40401d8:	dc000c15 	stw	r16,48(sp)
 40401dc:	df000c04 	addi	fp,sp,48
 40401e0:	e13ffb15 	stw	r4,-20(fp)
 40401e4:	e17ffc15 	stw	r5,-16(fp)
 40401e8:	e1bffd15 	stw	r6,-12(fp)
   int   error =  0;
 40401ec:	e03ff915 	stw	zero,-28(fp)
   u_short  i;
   struct ip_mreq *  mreq;
   struct net *   netp  =  NULL;
 40401f0:	e03ffa15 	stw	zero,-24(fp)
   struct ip_moptions * imo   =  so->inp_moptions;
 40401f4:	e0bffc17 	ldw	r2,-16(fp)
 40401f8:	10800317 	ldw	r2,12(r2)
 40401fc:	e0bff615 	stw	r2,-40(fp)
   struct ip_moptions **imop  =  &so->inp_moptions;
 4040200:	e0bffc17 	ldw	r2,-16(fp)
 4040204:	10800304 	addi	r2,r2,12
 4040208:	e0bff515 	stw	r2,-44(fp)
   ip_addr addr;


   if (imo == NULL) 
 404020c:	e0bff617 	ldw	r2,-40(fp)
 4040210:	1004c03a 	cmpne	r2,r2,zero
 4040214:	1000161e 	bne	r2,zero,4040270 <ip_setmoptions+0xa4>
   {
   /*
    * No multicast option buffer attached to the pcb;
    * allocate one and initialize to default values.
    */
      imo = (struct ip_moptions*)IM_ALLOC(sizeof(*imo));
 4040218:	01001604 	movi	r4,88
 404021c:	40265f80 	call	40265f8 <npalloc>
 4040220:	e0bff615 	stw	r2,-40(fp)

      if (imo == NULL)
 4040224:	e0bff617 	ldw	r2,-40(fp)
 4040228:	1004c03a 	cmpne	r2,r2,zero
 404022c:	1000031e 	bne	r2,zero,404023c <ip_setmoptions+0x70>
         return (ENOBUFS);
 4040230:	00801a44 	movi	r2,105
 4040234:	e0bffe15 	stw	r2,-8(fp)
 4040238:	00015906 	br	40407a0 <ip_setmoptions+0x5d4>
      *imop = imo;
 404023c:	e0fff517 	ldw	r3,-44(fp)
 4040240:	e0bff617 	ldw	r2,-40(fp)
 4040244:	18800015 	stw	r2,0(r3)
      imo->imo_multicast_netp = NULL;
 4040248:	e0bff617 	ldw	r2,-40(fp)
 404024c:	10000015 	stw	zero,0(r2)
      imo->imo_multicast_ttl = IP_DEFAULT_MULTICAST_TTL;
 4040250:	e0fff617 	ldw	r3,-40(fp)
 4040254:	00800044 	movi	r2,1
 4040258:	18800105 	stb	r2,4(r3)
      imo->imo_multicast_loop = IP_DEFAULT_MULTICAST_LOOP;
 404025c:	e0fff617 	ldw	r3,-40(fp)
 4040260:	00800044 	movi	r2,1
 4040264:	18800145 	stb	r2,5(r3)
      imo->imo_num_memberships = 0;
 4040268:	e0bff617 	ldw	r2,-40(fp)
 404026c:	1000018d 	sth	zero,6(r2)
   }

   switch (optname) 
 4040270:	e0bffb17 	ldw	r2,-20(fp)
 4040274:	10bffdc4 	addi	r2,r2,-9
 4040278:	e0bfff15 	stw	r2,-4(fp)
 404027c:	e0ffff17 	ldw	r3,-4(fp)
 4040280:	18800168 	cmpgeui	r2,r3,5
 4040284:	10012a1e 	bne	r2,zero,4040730 <ip_setmoptions+0x564>
 4040288:	e13fff17 	ldw	r4,-4(fp)
 404028c:	e13fff17 	ldw	r4,-4(fp)
 4040290:	2105883a 	add	r2,r4,r4
 4040294:	1087883a 	add	r3,r2,r2
 4040298:	00810134 	movhi	r2,1028
 404029c:	1080ab04 	addi	r2,r2,684
 40402a0:	1885883a 	add	r2,r3,r2
 40402a4:	10800017 	ldw	r2,0(r2)
 40402a8:	1000683a 	jmp	r2
 40402ac:	040402c0 	call	40402c <OSCtxSw_SWITCH_PC+0x403fec>
 40402b0:	04040334 	movhi	r16,4108
 40402b4:	04040348 	cmpgei	r16,zero,4109
 40402b8:	0404037c 	xorhi	r16,zero,4109
 40402bc:	0404054c 	andi	r16,zero,4117

   case IP_MULTICAST_IF:
      /*
       * Select the interface for outgoing multicast packets.
       */
      addr = *(ip_addr *)val;
 40402c0:	e0bffd17 	ldw	r2,-12(fp)
 40402c4:	10800017 	ldw	r2,0(r2)
 40402c8:	e0bff415 	stw	r2,-48(fp)
         /*
          * AADDR is used to remove a previous selection.
          * When no interface is selected, a default one is
          * chosen every time a multicast packet is sent.
          */
      if (addr == AADDR) 
 40402cc:	e0bff417 	ldw	r2,-48(fp)
 40402d0:	1004c03a 	cmpne	r2,r2,zero
 40402d4:	1000031e 	bne	r2,zero,40402e4 <ip_setmoptions+0x118>
      {
         imo->imo_multicast_netp = NULL;
 40402d8:	e0bff617 	ldw	r2,-40(fp)
 40402dc:	10000015 	stw	zero,0(r2)
         break;
 40402e0:	00011506 	br	4040738 <ip_setmoptions+0x56c>
         /*
          * The selected interface is identified by its local
          * IP address.  Find the interface and confirm that
          * it supports multicasting.
          */
      IPADDR_TO_NETP(addr, &netp);
 40402e4:	e17ffa04 	addi	r5,fp,-24
 40402e8:	e13ff417 	ldw	r4,-48(fp)
 40402ec:	40400840 	call	4040084 <IPADDR_TO_NETP>
      if ((netp == NULL) || (netp->n_mcastlist) == NULL) 
 40402f0:	e0bffa17 	ldw	r2,-24(fp)
 40402f4:	1005003a 	cmpeq	r2,r2,zero
 40402f8:	1000041e 	bne	r2,zero,404030c <ip_setmoptions+0x140>
 40402fc:	e0bffa17 	ldw	r2,-24(fp)
 4040300:	10802b17 	ldw	r2,172(r2)
 4040304:	1004c03a 	cmpne	r2,r2,zero
 4040308:	1000031e 	bne	r2,zero,4040318 <ip_setmoptions+0x14c>
      {
         error = EADDRNOTAVAIL;
 404030c:	00801f44 	movi	r2,125
 4040310:	e0bff915 	stw	r2,-28(fp)
         break;
 4040314:	00010806 	br	4040738 <ip_setmoptions+0x56c>
      }
      if (addr != AADDR) 
 4040318:	e0bff417 	ldw	r2,-48(fp)
 404031c:	1005003a 	cmpeq	r2,r2,zero
 4040320:	1001051e 	bne	r2,zero,4040738 <ip_setmoptions+0x56c>
         imo->imo_multicast_netp = netp;
 4040324:	e0fffa17 	ldw	r3,-24(fp)
 4040328:	e0bff617 	ldw	r2,-40(fp)
 404032c:	10c00015 	stw	r3,0(r2)
      break;
 4040330:	00010106 	br	4040738 <ip_setmoptions+0x56c>

   case IP_MULTICAST_TTL:
      /*
       * Set the IP time-to-live for outgoing multicast packets.
       */
      imo->imo_multicast_ttl = *(u_char *)val;
 4040334:	e0bffd17 	ldw	r2,-12(fp)
 4040338:	10c00003 	ldbu	r3,0(r2)
 404033c:	e0bff617 	ldw	r2,-40(fp)
 4040340:	10c00105 	stb	r3,4(r2)
      break;
 4040344:	0000fc06 	br	4040738 <ip_setmoptions+0x56c>
   case IP_MULTICAST_LOOP:
      /*
       * Set the loopback flag for outgoing multicast packets.
       * Must be zero or one.
       */
      if (*(u_char *)val > 1) 
 4040348:	e0bffd17 	ldw	r2,-12(fp)
 404034c:	10800003 	ldbu	r2,0(r2)
 4040350:	10803fcc 	andi	r2,r2,255
 4040354:	108000b0 	cmpltui	r2,r2,2
 4040358:	1000031e 	bne	r2,zero,4040368 <ip_setmoptions+0x19c>
      {
         error = EINVAL;
 404035c:	00800584 	movi	r2,22
 4040360:	e0bff915 	stw	r2,-28(fp)
         break;
 4040364:	0000f406 	br	4040738 <ip_setmoptions+0x56c>
      }
      imo->imo_multicast_loop = *(u_char *)(val);
 4040368:	e0bffd17 	ldw	r2,-12(fp)
 404036c:	10c00003 	ldbu	r3,0(r2)
 4040370:	e0bff617 	ldw	r2,-40(fp)
 4040374:	10c00145 	stb	r3,5(r2)
      break;
 4040378:	0000ef06 	br	4040738 <ip_setmoptions+0x56c>
   case IP_ADD_MEMBERSHIP:
      /*
       * Add a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
 404037c:	e0bffd17 	ldw	r2,-12(fp)
 4040380:	e0bff715 	stw	r2,-36(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 4040384:	e0bff717 	ldw	r2,-36(fp)
 4040388:	10800017 	ldw	r2,0(r2)
 404038c:	1004d63a 	srli	r2,r2,24
 4040390:	10c03fcc 	andi	r3,r2,255
 4040394:	e0bff717 	ldw	r2,-36(fp)
 4040398:	10800017 	ldw	r2,0(r2)
 404039c:	1004d23a 	srli	r2,r2,8
 40403a0:	10bfc00c 	andi	r2,r2,65280
 40403a4:	1886b03a 	or	r3,r3,r2
 40403a8:	e0bff717 	ldw	r2,-36(fp)
 40403ac:	10800017 	ldw	r2,0(r2)
 40403b0:	10bfc00c 	andi	r2,r2,65280
 40403b4:	1004923a 	slli	r2,r2,8
 40403b8:	1886b03a 	or	r3,r3,r2
 40403bc:	e0bff717 	ldw	r2,-36(fp)
 40403c0:	10800017 	ldw	r2,0(r2)
 40403c4:	10803fcc 	andi	r2,r2,255
 40403c8:	1004963a 	slli	r2,r2,24
 40403cc:	1884b03a 	or	r2,r3,r2
 40403d0:	10fc002c 	andhi	r3,r2,61440
 40403d4:	00b80034 	movhi	r2,57344
 40403d8:	18800326 	beq	r3,r2,40403e8 <ip_setmoptions+0x21c>
      {
         error = EINVAL;
 40403dc:	00800584 	movi	r2,22
 40403e0:	e0bff915 	stw	r2,-28(fp)
         break;
 40403e4:	0000d406 	br	4040738 <ip_setmoptions+0x56c>
       * If no interface address was provided, use the interface of
       * the route to the given multicast address.
       * For the Iniche stack implementation, look for a default
       * interface that supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 40403e8:	e0bff717 	ldw	r2,-36(fp)
 40403ec:	11000117 	ldw	r4,4(r2)
 40403f0:	e17ffa04 	addi	r5,fp,-24
 40403f4:	40400840 	call	4040084 <IPADDR_TO_NETP>
      /*
       * See if we found an interface, and confirm that it
       * supports multicast.
       */
      if (netp == NULL || (netp->n_mcastlist) == NULL) 
 40403f8:	e0bffa17 	ldw	r2,-24(fp)
 40403fc:	1005003a 	cmpeq	r2,r2,zero
 4040400:	1000041e 	bne	r2,zero,4040414 <ip_setmoptions+0x248>
 4040404:	e0bffa17 	ldw	r2,-24(fp)
 4040408:	10802b17 	ldw	r2,172(r2)
 404040c:	1004c03a 	cmpne	r2,r2,zero
 4040410:	1000031e 	bne	r2,zero,4040420 <ip_setmoptions+0x254>
      {
         error = EADDRNOTAVAIL;
 4040414:	00801f44 	movi	r2,125
 4040418:	e0bff915 	stw	r2,-28(fp)
         break;
 404041c:	0000c606 	br	4040738 <ip_setmoptions+0x56c>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 4040420:	e03ff80d 	sth	zero,-32(fp)
 4040424:	00001806 	br	4040488 <ip_setmoptions+0x2bc>
      {
         if (imo->imo_membership[i]->inm_netp == netp &&
 4040428:	e0bff80b 	ldhu	r2,-32(fp)
 404042c:	e0fff617 	ldw	r3,-40(fp)
 4040430:	1085883a 	add	r2,r2,r2
 4040434:	1085883a 	add	r2,r2,r2
 4040438:	10c5883a 	add	r2,r2,r3
 404043c:	10800204 	addi	r2,r2,8
 4040440:	10800017 	ldw	r2,0(r2)
 4040444:	10c00117 	ldw	r3,4(r2)
 4040448:	e0bffa17 	ldw	r2,-24(fp)
 404044c:	18800b1e 	bne	r3,r2,404047c <ip_setmoptions+0x2b0>
 4040450:	e0bff80b 	ldhu	r2,-32(fp)
 4040454:	e0fff617 	ldw	r3,-40(fp)
 4040458:	1085883a 	add	r2,r2,r2
 404045c:	1085883a 	add	r2,r2,r2
 4040460:	10c5883a 	add	r2,r2,r3
 4040464:	10800204 	addi	r2,r2,8
 4040468:	10800017 	ldw	r2,0(r2)
 404046c:	10c00017 	ldw	r3,0(r2)
 4040470:	e0bff717 	ldw	r2,-36(fp)
 4040474:	10800017 	ldw	r2,0(r2)
 4040478:	18800826 	beq	r3,r2,404049c <ip_setmoptions+0x2d0>
      }
      /*
       * See if the membership already exists or if all the
       * membership slots are full.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 404047c:	e0bff80b 	ldhu	r2,-32(fp)
 4040480:	10800044 	addi	r2,r2,1
 4040484:	e0bff80d 	sth	r2,-32(fp)
 4040488:	e0bff617 	ldw	r2,-40(fp)
 404048c:	1080018b 	ldhu	r2,6(r2)
 4040490:	10ffffcc 	andi	r3,r2,65535
 4040494:	e0bff80b 	ldhu	r2,-32(fp)
 4040498:	10ffe336 	bltu	r2,r3,4040428 <ip_setmoptions+0x25c>
             == mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i < imo->imo_num_memberships) 
 404049c:	e0bff617 	ldw	r2,-40(fp)
 40404a0:	1080018b 	ldhu	r2,6(r2)
 40404a4:	10ffffcc 	andi	r3,r2,65535
 40404a8:	e0bff80b 	ldhu	r2,-32(fp)
 40404ac:	10c0032e 	bgeu	r2,r3,40404bc <ip_setmoptions+0x2f0>
      {
         error = EADDRINUSE;
 40404b0:	00801c04 	movi	r2,112
 40404b4:	e0bff915 	stw	r2,-28(fp)
         break;
 40404b8:	00009f06 	br	4040738 <ip_setmoptions+0x56c>
      }
      if (i == IP_MAX_MEMBERSHIPS) 
 40404bc:	e0bff80b 	ldhu	r2,-32(fp)
 40404c0:	10800518 	cmpnei	r2,r2,20
 40404c4:	1000031e 	bne	r2,zero,40404d4 <ip_setmoptions+0x308>
      {
         error = ETOOMANYREFS;
 40404c8:	00802044 	movi	r2,129
 40404cc:	e0bff915 	stw	r2,-28(fp)
         break;
 40404d0:	00009906 	br	4040738 <ip_setmoptions+0x56c>
      }
      /*
       * Everything looks good; add a new record to the multicast
       * address list for the given interface.
       */
      if ((imo->imo_membership[i] =
 40404d4:	e43ff80b 	ldhu	r16,-32(fp)
 40404d8:	e13ff717 	ldw	r4,-36(fp)
 40404dc:	e17ffa17 	ldw	r5,-24(fp)
 40404e0:	01800104 	movi	r6,4
 40404e4:	403d7840 	call	403d784 <in_addmulti>
 40404e8:	1009883a 	mov	r4,r2
 40404ec:	e0fff617 	ldw	r3,-40(fp)
 40404f0:	8405883a 	add	r2,r16,r16
 40404f4:	1085883a 	add	r2,r2,r2
 40404f8:	10c5883a 	add	r2,r2,r3
 40404fc:	10800204 	addi	r2,r2,8
 4040500:	11000015 	stw	r4,0(r2)
 4040504:	e0fff617 	ldw	r3,-40(fp)
 4040508:	8405883a 	add	r2,r16,r16
 404050c:	1085883a 	add	r2,r2,r2
 4040510:	10c5883a 	add	r2,r2,r3
 4040514:	10800204 	addi	r2,r2,8
 4040518:	10800017 	ldw	r2,0(r2)
 404051c:	1004c03a 	cmpne	r2,r2,zero
 4040520:	1000031e 	bne	r2,zero,4040530 <ip_setmoptions+0x364>
          in_addmulti(&mreq->imr_multiaddr, netp, 4)) == NULL) 
      {
         error = ENOBUFS;
 4040524:	00801a44 	movi	r2,105
 4040528:	e0bff915 	stw	r2,-28(fp)
         break;
 404052c:	00008206 	br	4040738 <ip_setmoptions+0x56c>
      }
      ++imo->imo_num_memberships;
 4040530:	e0bff617 	ldw	r2,-40(fp)
 4040534:	1080018b 	ldhu	r2,6(r2)
 4040538:	10800044 	addi	r2,r2,1
 404053c:	1007883a 	mov	r3,r2
 4040540:	e0bff617 	ldw	r2,-40(fp)
 4040544:	10c0018d 	sth	r3,6(r2)
      break;
 4040548:	00007b06 	br	4040738 <ip_setmoptions+0x56c>
   case IP_DROP_MEMBERSHIP:
      /*
       * Drop a multicast group membership.
       * Group must be a valid IP multicast address.
       */
      mreq = (struct ip_mreq *)val;
 404054c:	e0bffd17 	ldw	r2,-12(fp)
 4040550:	e0bff715 	stw	r2,-36(fp)
      if (!IN_MULTICAST(ntohl(mreq->imr_multiaddr))) 
 4040554:	e0bff717 	ldw	r2,-36(fp)
 4040558:	10800017 	ldw	r2,0(r2)
 404055c:	1004d63a 	srli	r2,r2,24
 4040560:	10c03fcc 	andi	r3,r2,255
 4040564:	e0bff717 	ldw	r2,-36(fp)
 4040568:	10800017 	ldw	r2,0(r2)
 404056c:	1004d23a 	srli	r2,r2,8
 4040570:	10bfc00c 	andi	r2,r2,65280
 4040574:	1886b03a 	or	r3,r3,r2
 4040578:	e0bff717 	ldw	r2,-36(fp)
 404057c:	10800017 	ldw	r2,0(r2)
 4040580:	10bfc00c 	andi	r2,r2,65280
 4040584:	1004923a 	slli	r2,r2,8
 4040588:	1886b03a 	or	r3,r3,r2
 404058c:	e0bff717 	ldw	r2,-36(fp)
 4040590:	10800017 	ldw	r2,0(r2)
 4040594:	10803fcc 	andi	r2,r2,255
 4040598:	1004963a 	slli	r2,r2,24
 404059c:	1884b03a 	or	r2,r3,r2
 40405a0:	10fc002c 	andhi	r3,r2,61440
 40405a4:	00b80034 	movhi	r2,57344
 40405a8:	18800326 	beq	r3,r2,40405b8 <ip_setmoptions+0x3ec>
      {
         error = EINVAL;
 40405ac:	00800584 	movi	r2,22
 40405b0:	e0bff915 	stw	r2,-28(fp)
         break;
 40405b4:	00006006 	br	4040738 <ip_setmoptions+0x56c>
       * If an interface address was specified, get a pointer
       * to its ifnet structure. If an interface address was not
       * specified, get a pointer to the first interface that
       * supports multicast.
       */
      IPADDR_TO_NETP(mreq->imr_interface, &netp);
 40405b8:	e0bff717 	ldw	r2,-36(fp)
 40405bc:	11000117 	ldw	r4,4(r2)
 40405c0:	e17ffa04 	addi	r5,fp,-24
 40405c4:	40400840 	call	4040084 <IPADDR_TO_NETP>
      if (netp == NULL) 
 40405c8:	e0bffa17 	ldw	r2,-24(fp)
 40405cc:	1004c03a 	cmpne	r2,r2,zero
 40405d0:	1000031e 	bne	r2,zero,40405e0 <ip_setmoptions+0x414>
      {
         error = EADDRNOTAVAIL;
 40405d4:	00801f44 	movi	r2,125
 40405d8:	e0bff915 	stw	r2,-28(fp)
         break;
 40405dc:	00005606 	br	4040738 <ip_setmoptions+0x56c>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 40405e0:	e03ff80d 	sth	zero,-32(fp)
 40405e4:	00001b06 	br	4040654 <ip_setmoptions+0x488>
      {
         if ((netp == NULL ||
 40405e8:	e0bffa17 	ldw	r2,-24(fp)
 40405ec:	1005003a 	cmpeq	r2,r2,zero
 40405f0:	10000a1e 	bne	r2,zero,404061c <ip_setmoptions+0x450>
 40405f4:	e0bff80b 	ldhu	r2,-32(fp)
 40405f8:	e0fff617 	ldw	r3,-40(fp)
 40405fc:	1085883a 	add	r2,r2,r2
 4040600:	1085883a 	add	r2,r2,r2
 4040604:	10c5883a 	add	r2,r2,r3
 4040608:	10800204 	addi	r2,r2,8
 404060c:	10800017 	ldw	r2,0(r2)
 4040610:	10c00117 	ldw	r3,4(r2)
 4040614:	e0bffa17 	ldw	r2,-24(fp)
 4040618:	18800b1e 	bne	r3,r2,4040648 <ip_setmoptions+0x47c>
 404061c:	e0bff80b 	ldhu	r2,-32(fp)
 4040620:	e0fff617 	ldw	r3,-40(fp)
 4040624:	1085883a 	add	r2,r2,r2
 4040628:	1085883a 	add	r2,r2,r2
 404062c:	10c5883a 	add	r2,r2,r3
 4040630:	10800204 	addi	r2,r2,8
 4040634:	10800017 	ldw	r2,0(r2)
 4040638:	10c00017 	ldw	r3,0(r2)
 404063c:	e0bff717 	ldw	r2,-36(fp)
 4040640:	10800017 	ldw	r2,0(r2)
 4040644:	18800826 	beq	r3,r2,4040668 <ip_setmoptions+0x49c>
      }

      /*
       * Find the membership in the membership array.
       */
      for (i = 0; i < imo->imo_num_memberships; ++i) 
 4040648:	e0bff80b 	ldhu	r2,-32(fp)
 404064c:	10800044 	addi	r2,r2,1
 4040650:	e0bff80d 	sth	r2,-32(fp)
 4040654:	e0bff617 	ldw	r2,-40(fp)
 4040658:	1080018b 	ldhu	r2,6(r2)
 404065c:	10ffffcc 	andi	r3,r2,65535
 4040660:	e0bff80b 	ldhu	r2,-32(fp)
 4040664:	10ffe036 	bltu	r2,r3,40405e8 <ip_setmoptions+0x41c>
             mreq->imr_multiaddr)
         {
            break;
         }
      }
      if (i == imo->imo_num_memberships) 
 4040668:	e0bff617 	ldw	r2,-40(fp)
 404066c:	1080018b 	ldhu	r2,6(r2)
 4040670:	10ffffcc 	andi	r3,r2,65535
 4040674:	e0bff80b 	ldhu	r2,-32(fp)
 4040678:	1880031e 	bne	r3,r2,4040688 <ip_setmoptions+0x4bc>
      {
         error = EADDRNOTAVAIL;
 404067c:	00801f44 	movi	r2,125
 4040680:	e0bff915 	stw	r2,-28(fp)
         break;
 4040684:	00002c06 	br	4040738 <ip_setmoptions+0x56c>
      }
      /*
       * Give up the multicast address record to which the
       * membership points.
       */
      in_delmulti(imo->imo_membership[i]);
 4040688:	e0bff80b 	ldhu	r2,-32(fp)
 404068c:	e0fff617 	ldw	r3,-40(fp)
 4040690:	1085883a 	add	r2,r2,r2
 4040694:	1085883a 	add	r2,r2,r2
 4040698:	10c5883a 	add	r2,r2,r3
 404069c:	10800204 	addi	r2,r2,8
 40406a0:	11000017 	ldw	r4,0(r2)
 40406a4:	403d8ec0 	call	403d8ec <in_delmulti>
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 40406a8:	e0bff80b 	ldhu	r2,-32(fp)
 40406ac:	10800044 	addi	r2,r2,1
 40406b0:	e0bff80d 	sth	r2,-32(fp)
 40406b4:	00001206 	br	4040700 <ip_setmoptions+0x534>
         imo->imo_membership[i-1] = imo->imo_membership[i];
 40406b8:	e0bff80b 	ldhu	r2,-32(fp)
 40406bc:	113fffc4 	addi	r4,r2,-1
 40406c0:	e0bff80b 	ldhu	r2,-32(fp)
 40406c4:	e0fff617 	ldw	r3,-40(fp)
 40406c8:	1085883a 	add	r2,r2,r2
 40406cc:	1085883a 	add	r2,r2,r2
 40406d0:	10c5883a 	add	r2,r2,r3
 40406d4:	10800204 	addi	r2,r2,8
 40406d8:	11400017 	ldw	r5,0(r2)
 40406dc:	e0fff617 	ldw	r3,-40(fp)
 40406e0:	2105883a 	add	r2,r4,r4
 40406e4:	1085883a 	add	r2,r2,r2
 40406e8:	10c5883a 	add	r2,r2,r3
 40406ec:	10800204 	addi	r2,r2,8
 40406f0:	11400015 	stw	r5,0(r2)
       */
      in_delmulti(imo->imo_membership[i]);
      /*
       * Remove the gap in the membership array.
       */
      for (++i; i < imo->imo_num_memberships; ++i)
 40406f4:	e0bff80b 	ldhu	r2,-32(fp)
 40406f8:	10800044 	addi	r2,r2,1
 40406fc:	e0bff80d 	sth	r2,-32(fp)
 4040700:	e0bff617 	ldw	r2,-40(fp)
 4040704:	1080018b 	ldhu	r2,6(r2)
 4040708:	10ffffcc 	andi	r3,r2,65535
 404070c:	e0bff80b 	ldhu	r2,-32(fp)
 4040710:	10ffe936 	bltu	r2,r3,40406b8 <ip_setmoptions+0x4ec>
         imo->imo_membership[i-1] = imo->imo_membership[i];
      --imo->imo_num_memberships;
 4040714:	e0bff617 	ldw	r2,-40(fp)
 4040718:	1080018b 	ldhu	r2,6(r2)
 404071c:	10bfffc4 	addi	r2,r2,-1
 4040720:	1007883a 	mov	r3,r2
 4040724:	e0bff617 	ldw	r2,-40(fp)
 4040728:	10c0018d 	sth	r3,6(r2)
      break;
 404072c:	00000206 	br	4040738 <ip_setmoptions+0x56c>

      default:
      error = EOPNOTSUPP;
 4040730:	008017c4 	movi	r2,95
 4040734:	e0bff915 	stw	r2,-28(fp)
   }

      /*
       * If all options have default values, no need to keep the mbuf.
       */
   if (imo->imo_multicast_netp == NULL &&
 4040738:	e0bff617 	ldw	r2,-40(fp)
 404073c:	10800017 	ldw	r2,0(r2)
 4040740:	1004c03a 	cmpne	r2,r2,zero
 4040744:	1000141e 	bne	r2,zero,4040798 <ip_setmoptions+0x5cc>
 4040748:	e0bff617 	ldw	r2,-40(fp)
 404074c:	10800103 	ldbu	r2,4(r2)
 4040750:	10803fcc 	andi	r2,r2,255
 4040754:	10800058 	cmpnei	r2,r2,1
 4040758:	10000f1e 	bne	r2,zero,4040798 <ip_setmoptions+0x5cc>
 404075c:	e0bff617 	ldw	r2,-40(fp)
 4040760:	10800143 	ldbu	r2,5(r2)
 4040764:	10803fcc 	andi	r2,r2,255
 4040768:	10800058 	cmpnei	r2,r2,1
 404076c:	10000a1e 	bne	r2,zero,4040798 <ip_setmoptions+0x5cc>
 4040770:	e0bff617 	ldw	r2,-40(fp)
 4040774:	1080018b 	ldhu	r2,6(r2)
 4040778:	10bfffcc 	andi	r2,r2,65535
 404077c:	1004c03a 	cmpne	r2,r2,zero
 4040780:	1000051e 	bne	r2,zero,4040798 <ip_setmoptions+0x5cc>
       imo->imo_multicast_ttl == IP_DEFAULT_MULTICAST_TTL &&
       imo->imo_multicast_loop == IP_DEFAULT_MULTICAST_LOOP &&
       imo->imo_num_memberships == 0) 
   {
      IM_FREE(*imop);
 4040784:	e0bff517 	ldw	r2,-44(fp)
 4040788:	11000017 	ldw	r4,0(r2)
 404078c:	40266ec0 	call	40266ec <npfree>
      *imop = NULL;
 4040790:	e0bff517 	ldw	r2,-44(fp)
 4040794:	10000015 	stw	zero,0(r2)
   }
   return (error);
 4040798:	e0bff917 	ldw	r2,-28(fp)
 404079c:	e0bffe15 	stw	r2,-8(fp)
 40407a0:	e0bffe17 	ldw	r2,-8(fp)
}
 40407a4:	e037883a 	mov	sp,fp
 40407a8:	dfc00217 	ldw	ra,8(sp)
 40407ac:	df000117 	ldw	fp,4(sp)
 40407b0:	dc000017 	ldw	r16,0(sp)
 40407b4:	dec00304 	addi	sp,sp,12
 40407b8:	f800283a 	ret

040407bc <ip_getmoptions>:
 * RETURNS: 
 */

int
ip_getmoptions(int optname, struct socket * so, void * val)
{
 40407bc:	defff604 	addi	sp,sp,-40
 40407c0:	df000915 	stw	fp,36(sp)
 40407c4:	df000904 	addi	fp,sp,36
 40407c8:	e13ffb15 	stw	r4,-20(fp)
 40407cc:	e17ffc15 	stw	r5,-16(fp)
 40407d0:	e1bffd15 	stw	r6,-12(fp)
   u_char * ttl;
   u_char * loop;
   ip_addr *addr;
   struct ip_moptions*  imo   =  so->inp_moptions;
 40407d4:	e0bffc17 	ldw	r2,-16(fp)
 40407d8:	10800317 	ldw	r2,12(r2)
 40407dc:	e0bff715 	stw	r2,-36(fp)
   /* The following code will be commented out for Iniche stack.
    * Don't allocate a buffer here.
    *
    *        *mp = m_get(M_WAIT, MT_SOOPTS);
    */
   switch (optname) 
 40407e0:	e0bffb17 	ldw	r2,-20(fp)
 40407e4:	e0bfff15 	stw	r2,-4(fp)
 40407e8:	e0ffff17 	ldw	r3,-4(fp)
 40407ec:	18800260 	cmpeqi	r2,r3,9
 40407f0:	10000a1e 	bne	r2,zero,404081c <ip_getmoptions+0x60>
 40407f4:	e0ffff17 	ldw	r3,-4(fp)
 40407f8:	18800250 	cmplti	r2,r3,9
 40407fc:	1000381e 	bne	r2,zero,40408e0 <ip_getmoptions+0x124>
 4040800:	e0ffff17 	ldw	r3,-4(fp)
 4040804:	188002a0 	cmpeqi	r2,r3,10
 4040808:	1000171e 	bne	r2,zero,4040868 <ip_getmoptions+0xac>
 404080c:	e0ffff17 	ldw	r3,-4(fp)
 4040810:	188002e0 	cmpeqi	r2,r3,11
 4040814:	1000231e 	bne	r2,zero,40408a4 <ip_getmoptions+0xe8>
 4040818:	00003106 	br	40408e0 <ip_getmoptions+0x124>
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
 404081c:	e0bffd17 	ldw	r2,-12(fp)
 4040820:	e0bff815 	stw	r2,-32(fp)
      if (imo == NULL || imo->imo_multicast_netp == NULL)
 4040824:	e0bff717 	ldw	r2,-36(fp)
 4040828:	1005003a 	cmpeq	r2,r2,zero
 404082c:	1000041e 	bne	r2,zero,4040840 <ip_getmoptions+0x84>
 4040830:	e0bff717 	ldw	r2,-36(fp)
 4040834:	10800017 	ldw	r2,0(r2)
 4040838:	1004c03a 	cmpne	r2,r2,zero
 404083c:	1000031e 	bne	r2,zero,404084c <ip_getmoptions+0x90>
         *addr = AADDR;
 4040840:	e0bff817 	ldw	r2,-32(fp)
 4040844:	10000015 	stw	zero,0(r2)
   switch (optname) 
   {

   case IP_MULTICAST_IF:
      addr = (ip_addr *)(val);
      if (imo == NULL || imo->imo_multicast_netp == NULL)
 4040848:	00000506 	br	4040860 <ip_getmoptions+0xa4>
         *addr = AADDR;
      else
         *addr = imo->imo_multicast_netp->n_ipaddr;
 404084c:	e0bff717 	ldw	r2,-36(fp)
 4040850:	10800017 	ldw	r2,0(r2)
 4040854:	10c00a17 	ldw	r3,40(r2)
 4040858:	e0bff817 	ldw	r2,-32(fp)
 404085c:	10c00015 	stw	r3,0(r2)
      return (0);
 4040860:	e03ffe15 	stw	zero,-8(fp)
 4040864:	00002006 	br	40408e8 <ip_getmoptions+0x12c>

   case IP_MULTICAST_TTL:
      ttl = (u_char *)val;
 4040868:	e0bffd17 	ldw	r2,-12(fp)
 404086c:	e0bffa15 	stw	r2,-24(fp)
      if (imo == NULL)
 4040870:	e0bff717 	ldw	r2,-36(fp)
 4040874:	1004c03a 	cmpne	r2,r2,zero
 4040878:	1000041e 	bne	r2,zero,404088c <ip_getmoptions+0xd0>
         *ttl = IP_DEFAULT_MULTICAST_TTL;
 404087c:	e0fffa17 	ldw	r3,-24(fp)
 4040880:	00800044 	movi	r2,1
 4040884:	18800005 	stb	r2,0(r3)
 4040888:	00000406 	br	404089c <ip_getmoptions+0xe0>
      else
         *ttl = imo->imo_multicast_ttl;
 404088c:	e0bff717 	ldw	r2,-36(fp)
 4040890:	10c00103 	ldbu	r3,4(r2)
 4040894:	e0bffa17 	ldw	r2,-24(fp)
 4040898:	10c00005 	stb	r3,0(r2)
      return (0);
 404089c:	e03ffe15 	stw	zero,-8(fp)
 40408a0:	00001106 	br	40408e8 <ip_getmoptions+0x12c>

   case IP_MULTICAST_LOOP:
      loop = (u_char *)val;
 40408a4:	e0bffd17 	ldw	r2,-12(fp)
 40408a8:	e0bff915 	stw	r2,-28(fp)
      if (imo == NULL)
 40408ac:	e0bff717 	ldw	r2,-36(fp)
 40408b0:	1004c03a 	cmpne	r2,r2,zero
 40408b4:	1000041e 	bne	r2,zero,40408c8 <ip_getmoptions+0x10c>
         *loop = IP_DEFAULT_MULTICAST_LOOP;
 40408b8:	e0fff917 	ldw	r3,-28(fp)
 40408bc:	00800044 	movi	r2,1
 40408c0:	18800005 	stb	r2,0(r3)
 40408c4:	00000406 	br	40408d8 <ip_getmoptions+0x11c>
      else
         *loop = imo->imo_multicast_loop;
 40408c8:	e0bff717 	ldw	r2,-36(fp)
 40408cc:	10c00143 	ldbu	r3,5(r2)
 40408d0:	e0bff917 	ldw	r2,-28(fp)
 40408d4:	10c00005 	stb	r3,0(r2)
      return (0);
 40408d8:	e03ffe15 	stw	zero,-8(fp)
 40408dc:	00000206 	br	40408e8 <ip_getmoptions+0x12c>

      default:
      return (EOPNOTSUPP);
 40408e0:	008017c4 	movi	r2,95
 40408e4:	e0bffe15 	stw	r2,-8(fp)
 40408e8:	e0bffe17 	ldw	r2,-8(fp)
   }
}
 40408ec:	e037883a 	mov	sp,fp
 40408f0:	df000017 	ldw	fp,0(sp)
 40408f4:	dec00104 	addi	sp,sp,4
 40408f8:	f800283a 	ret

040408fc <ip_freemoptions>:
 * RETURNS: 
 */

void
ip_freemoptions(struct ip_moptions * imo)
{
 40408fc:	defffc04 	addi	sp,sp,-16
 4040900:	dfc00315 	stw	ra,12(sp)
 4040904:	df000215 	stw	fp,8(sp)
 4040908:	df000204 	addi	fp,sp,8
 404090c:	e13fff15 	stw	r4,-4(fp)
   u_short  i;

   if (imo != NULL) 
 4040910:	e0bfff17 	ldw	r2,-4(fp)
 4040914:	1005003a 	cmpeq	r2,r2,zero
 4040918:	1000141e 	bne	r2,zero,404096c <ip_freemoptions+0x70>
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 404091c:	e03ffe0d 	sth	zero,-8(fp)
 4040920:	00000b06 	br	4040950 <ip_freemoptions+0x54>
         in_delmulti(imo->imo_membership[i]);
 4040924:	e0bffe0b 	ldhu	r2,-8(fp)
 4040928:	e0ffff17 	ldw	r3,-4(fp)
 404092c:	1085883a 	add	r2,r2,r2
 4040930:	1085883a 	add	r2,r2,r2
 4040934:	10c5883a 	add	r2,r2,r3
 4040938:	10800204 	addi	r2,r2,8
 404093c:	11000017 	ldw	r4,0(r2)
 4040940:	403d8ec0 	call	403d8ec <in_delmulti>
{
   u_short  i;

   if (imo != NULL) 
   {
      for (i = 0; i < imo->imo_num_memberships; ++i)
 4040944:	e0bffe0b 	ldhu	r2,-8(fp)
 4040948:	10800044 	addi	r2,r2,1
 404094c:	e0bffe0d 	sth	r2,-8(fp)
 4040950:	e0bfff17 	ldw	r2,-4(fp)
 4040954:	1080018b 	ldhu	r2,6(r2)
 4040958:	10ffffcc 	andi	r3,r2,65535
 404095c:	e0bffe0b 	ldhu	r2,-8(fp)
 4040960:	10fff036 	bltu	r2,r3,4040924 <ip_freemoptions+0x28>
         in_delmulti(imo->imo_membership[i]);
      npfree(imo);
 4040964:	e13fff17 	ldw	r4,-4(fp)
 4040968:	40266ec0 	call	40266ec <npfree>
   }
}
 404096c:	e037883a 	mov	sp,fp
 4040970:	dfc00117 	ldw	ra,4(sp)
 4040974:	df000017 	ldw	fp,0(sp)
 4040978:	dec00204 	addi	sp,sp,8
 404097c:	f800283a 	ret

04040980 <u_mctest_init>:
 *
 * RETURNS: 
 */

void u_mctest_init()
{
 4040980:	defffe04 	addi	sp,sp,-8
 4040984:	dfc00115 	stw	ra,4(sp)
 4040988:	df000015 	stw	fp,0(sp)
 404098c:	d839883a 	mov	fp,sp
   printf("mctest init called\n");
 4040990:	01010174 	movhi	r4,1029
 4040994:	2130a404 	addi	r4,r4,-15728
 4040998:	40021940 	call	4002194 <puts>
// altera changes end (cadler@altera.com)
   install_menu(u_mctest_menu);
// altera changes begin (cadler@altera.com)
#endif //IN_MENUS
// altera changes end (cadler@altera.com)
}
 404099c:	e037883a 	mov	sp,fp
 40409a0:	dfc00117 	ldw	ra,4(sp)
 40409a4:	df000017 	ldw	fp,0(sp)
 40409a8:	dec00204 	addi	sp,sp,8
 40409ac:	f800283a 	ret

040409b0 <u_mctest_run>:
 *
 * RETURNS: 
 */

int u_mctest_run(void * pio)
{
 40409b0:	defede04 	addi	sp,sp,-1160
 40409b4:	dfc12115 	stw	ra,1156(sp)
 40409b8:	df012015 	stw	fp,1152(sp)
 40409bc:	df012004 	addi	fp,sp,1152
 40409c0:	e13fff15 	stw	r4,-4(fp)
    struct sockaddr_in   stLocal, stTo, stFrom;
    char  achIn[BUFSIZE];
    char  achOut[] = "Message number:              ";
 40409c4:	00c10174 	movhi	r3,1029
 40409c8:	18f15004 	addi	r3,r3,-15040
 40409cc:	18800017 	ldw	r2,0(r3)
 40409d0:	e0bff215 	stw	r2,-56(fp)
 40409d4:	18800117 	ldw	r2,4(r3)
 40409d8:	e0bff315 	stw	r2,-52(fp)
 40409dc:	18800217 	ldw	r2,8(r3)
 40409e0:	e0bff415 	stw	r2,-48(fp)
 40409e4:	18800317 	ldw	r2,12(r3)
 40409e8:	e0bff515 	stw	r2,-44(fp)
 40409ec:	18800417 	ldw	r2,16(r3)
 40409f0:	e0bff615 	stw	r2,-40(fp)
 40409f4:	18800517 	ldw	r2,20(r3)
 40409f8:	e0bff715 	stw	r2,-36(fp)
 40409fc:	18800617 	ldw	r2,24(r3)
 4040a00:	e0bff815 	stw	r2,-32(fp)
 4040a04:	1880070b 	ldhu	r2,28(r3)
 4040a08:	e0bff90d 	sth	r2,-28(fp)
    struct ip_mreq stMreq;
    u_char cTmp;
    unsigned long endtime;

   /* get a datagram socket */
   s = t_socket(AF_INET,SOCK_DGRAM, 0);
 4040a0c:	01000084 	movi	r4,2
 4040a10:	01400084 	movi	r5,2
 4040a14:	000d883a 	mov	r6,zero
 4040a18:	4028c380 	call	4028c38 <t_socket>
 4040a1c:	e0bee515 	stw	r2,-1132(fp)

   if (s == INVALID_SOCKET) 
 4040a20:	e0bee517 	ldw	r2,-1132(fp)
 4040a24:	10bfffd8 	cmpnei	r2,r2,-1
 4040a28:	1000091e 	bne	r2,zero,4040a50 <u_mctest_run+0xa0>
   {
      ns_printf (pio,"t_socket() failed, Err: %d\n", t_errno(s));
 4040a2c:	e13ee517 	ldw	r4,-1132(fp)
 4040a30:	402a34c0 	call	402a34c <t_errno>
 4040a34:	100d883a 	mov	r6,r2
 4040a38:	e13fff17 	ldw	r4,-4(fp)
 4040a3c:	01410174 	movhi	r5,1029
 4040a40:	2970a904 	addi	r5,r5,-15708
 4040a44:	40210380 	call	4021038 <ns_printf>
      exit(1);
 4040a48:	01000044 	movi	r4,1
 4040a4c:	4045e840 	call	4045e84 <exit>
   }

   /* avoid EADDRINUSE error on bind() */ 
   iTmp = 1;
 4040a50:	00800044 	movi	r2,1
 4040a54:	e0bffa15 	stw	r2,-24(fp)
   iRet = t_setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *)&iTmp, sizeof(iTmp));
 4040a58:	e1fffa04 	addi	r7,fp,-24
 4040a5c:	00800104 	movi	r2,4
 4040a60:	d8800015 	stw	r2,0(sp)
 4040a64:	e13ee517 	ldw	r4,-1132(fp)
 4040a68:	017fffc4 	movi	r5,-1
 4040a6c:	01800104 	movi	r6,4
 4040a70:	40296ec0 	call	40296ec <t_setsockopt>
 4040a74:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
 4040a78:	e0bee317 	ldw	r2,-1140(fp)
 4040a7c:	10bfffd8 	cmpnei	r2,r2,-1
 4040a80:	1000071e 	bne	r2,zero,4040aa0 <u_mctest_run+0xf0>
   {
      ns_printf (pio,"t_setsockopt() SO_REUSEADDR failed, Err: %d\n",
 4040a84:	e13ee517 	ldw	r4,-1132(fp)
 4040a88:	402a34c0 	call	402a34c <t_errno>
 4040a8c:	100d883a 	mov	r6,r2
 4040a90:	e13fff17 	ldw	r4,-4(fp)
 4040a94:	01410174 	movhi	r5,1029
 4040a98:	2970b004 	addi	r5,r5,-15680
 4040a9c:	40210380 	call	4021038 <ns_printf>
       t_errno(s));
   }

   /* name the socket */
   stLocal.sin_family =   AF_INET;
 4040aa0:	00800084 	movi	r2,2
 4040aa4:	e0bee60d 	sth	r2,-1128(fp)
   stLocal.sin_addr.s_addr = htonl(INADDR_ANY);
 4040aa8:	e03ee715 	stw	zero,-1124(fp)
   stLocal.sin_port =   htons(TEST_PORT);
 4040aac:	00a00344 	movi	r2,-32755
 4040ab0:	e0bee68d 	sth	r2,-1126(fp)
   iRet = t_bind(s, (struct sockaddr*) &stLocal, sizeof(struct sockaddr_in));
 4040ab4:	e17ee604 	addi	r5,fp,-1128
 4040ab8:	e13ee517 	ldw	r4,-1132(fp)
 4040abc:	01800404 	movi	r6,16
 4040ac0:	4028cc80 	call	4028cc8 <t_bind>
 4040ac4:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
 4040ac8:	e0bee317 	ldw	r2,-1140(fp)
 4040acc:	10bfffd8 	cmpnei	r2,r2,-1
 4040ad0:	1000061e 	bne	r2,zero,4040aec <u_mctest_run+0x13c>
   {
      printf ("t_bind() failed, Err: %d\n",
 4040ad4:	e13ee517 	ldw	r4,-1132(fp)
 4040ad8:	402a34c0 	call	402a34c <t_errno>
 4040adc:	100b883a 	mov	r5,r2
 4040ae0:	01010174 	movhi	r4,1029
 4040ae4:	2130bc04 	addi	r4,r4,-15632
 4040ae8:	400207c0 	call	400207c <printf>
       t_errno(s));
   }

   /* join the multicast group. TEST_ADDR */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR);
 4040aec:	e13fff17 	ldw	r4,-4(fp)
 4040af0:	01410174 	movhi	r5,1029
 4040af4:	2970c304 	addi	r5,r5,-15604
 4040af8:	01810174 	movhi	r6,1029
 4040afc:	31b0cb04 	addi	r6,r6,-15572
 4040b00:	40210380 	call	4021038 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 4040b04:	01010174 	movhi	r4,1029
 4040b08:	2130cb04 	addi	r4,r4,-15572
 4040b0c:	4041adc0 	call	4041adc <inet_addr>
 4040b10:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 4040b14:	008101b4 	movhi	r2,1030
 4040b18:	10a14804 	addi	r2,r2,-31456
 4040b1c:	10800a17 	ldw	r2,40(r2)
 4040b20:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP,
 4040b24:	e1fffb04 	addi	r7,fp,-20
 4040b28:	00800204 	movi	r2,8
 4040b2c:	d8800015 	stw	r2,0(sp)
 4040b30:	e13ee517 	ldw	r4,-1132(fp)
 4040b34:	000b883a 	mov	r5,zero
 4040b38:	01800304 	movi	r6,12
 4040b3c:	40296ec0 	call	40296ec <t_setsockopt>
 4040b40:	e0bee315 	stw	r2,-1140(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 4040b44:	e0bee317 	ldw	r2,-1140(fp)
 4040b48:	10bfffd8 	cmpnei	r2,r2,-1
 4040b4c:	1000071e 	bne	r2,zero,4040b6c <u_mctest_run+0x1bc>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 4040b50:	e13ee517 	ldw	r4,-1132(fp)
 4040b54:	402a34c0 	call	402a34c <t_errno>
 4040b58:	100d883a 	mov	r6,r2
 4040b5c:	e13fff17 	ldw	r4,-4(fp)
 4040b60:	01410174 	movhi	r5,1029
 4040b64:	2970ce04 	addi	r5,r5,-15560
 4040b68:	40210380 	call	4021038 <ns_printf>
                     t_errno(s));
   } 
   tk_yield();
 4040b6c:	4021aa00 	call	4021aa0 <tk_yield>

   /* join the multicast group. TEST_ADDR1 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR1);
 4040b70:	e13fff17 	ldw	r4,-4(fp)
 4040b74:	01410174 	movhi	r5,1029
 4040b78:	2970c304 	addi	r5,r5,-15604
 4040b7c:	01810174 	movhi	r6,1029
 4040b80:	31b0db04 	addi	r6,r6,-15508
 4040b84:	40210380 	call	4021038 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR1);
 4040b88:	01010174 	movhi	r4,1029
 4040b8c:	2130db04 	addi	r4,r4,-15508
 4040b90:	4041adc0 	call	4041adc <inet_addr>
 4040b94:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 4040b98:	008101b4 	movhi	r2,1030
 4040b9c:	10a14804 	addi	r2,r2,-31456
 4040ba0:	10800a17 	ldw	r2,40(r2)
 4040ba4:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 4040ba8:	e1fffb04 	addi	r7,fp,-20
 4040bac:	00800204 	movi	r2,8
 4040bb0:	d8800015 	stw	r2,0(sp)
 4040bb4:	e13ee517 	ldw	r4,-1132(fp)
 4040bb8:	000b883a 	mov	r5,zero
 4040bbc:	01800304 	movi	r6,12
 4040bc0:	40296ec0 	call	40296ec <t_setsockopt>
 4040bc4:	e0bee315 	stw	r2,-1140(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 4040bc8:	e0bee317 	ldw	r2,-1140(fp)
 4040bcc:	10bfffd8 	cmpnei	r2,r2,-1
 4040bd0:	1000071e 	bne	r2,zero,4040bf0 <u_mctest_run+0x240>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 4040bd4:	e13ee517 	ldw	r4,-1132(fp)
 4040bd8:	402a34c0 	call	402a34c <t_errno>
 4040bdc:	100d883a 	mov	r6,r2
 4040be0:	e13fff17 	ldw	r4,-4(fp)
 4040be4:	01410174 	movhi	r5,1029
 4040be8:	2970ce04 	addi	r5,r5,-15560
 4040bec:	40210380 	call	4021038 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
 4040bf0:	4021aa00 	call	4021aa0 <tk_yield>

   /* join the multicast group. TEST_ADDR2 */

   ns_printf (pio,"Joining multicast group: %s\n", TEST_ADDR2);
 4040bf4:	e13fff17 	ldw	r4,-4(fp)
 4040bf8:	01410174 	movhi	r5,1029
 4040bfc:	2970c304 	addi	r5,r5,-15604
 4040c00:	01810174 	movhi	r6,1029
 4040c04:	31b0de04 	addi	r6,r6,-15496
 4040c08:	40210380 	call	4021038 <ns_printf>
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR2);
 4040c0c:	01010174 	movhi	r4,1029
 4040c10:	2130de04 	addi	r4,r4,-15496
 4040c14:	4041adc0 	call	4041adc <inet_addr>
 4040c18:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 4040c1c:	008101b4 	movhi	r2,1030
 4040c20:	10a14804 	addi	r2,r2,-31456
 4040c24:	10800a17 	ldw	r2,40(r2)
 4040c28:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, 
 4040c2c:	e1fffb04 	addi	r7,fp,-20
 4040c30:	00800204 	movi	r2,8
 4040c34:	d8800015 	stw	r2,0(sp)
 4040c38:	e13ee517 	ldw	r4,-1132(fp)
 4040c3c:	000b883a 	mov	r5,zero
 4040c40:	01800304 	movi	r6,12
 4040c44:	40296ec0 	call	40296ec <t_setsockopt>
 4040c48:	e0bee315 	stw	r2,-1140(fp)
                       (char *)&stMreq, sizeof(stMreq));
   if (iRet == SOCKET_ERROR) 
 4040c4c:	e0bee317 	ldw	r2,-1140(fp)
 4040c50:	10bfffd8 	cmpnei	r2,r2,-1
 4040c54:	1000071e 	bne	r2,zero,4040c74 <u_mctest_run+0x2c4>
   {
      ns_printf (pio,"t_setsockopt() IP_ADD_MEMBERSHIP failed, Err: %d\n",
 4040c58:	e13ee517 	ldw	r4,-1132(fp)
 4040c5c:	402a34c0 	call	402a34c <t_errno>
 4040c60:	100d883a 	mov	r6,r2
 4040c64:	e13fff17 	ldw	r4,-4(fp)
 4040c68:	01410174 	movhi	r5,1029
 4040c6c:	2970ce04 	addi	r5,r5,-15560
 4040c70:	40210380 	call	4021038 <ns_printf>
                     t_errno(s));
   }
   tk_yield();
 4040c74:	4021aa00 	call	4021aa0 <tk_yield>

   /* set TTL to traverse up to multiple routers */
   cTmp = TTL_VALUE;
 4040c78:	00800084 	movi	r2,2
 4040c7c:	e0bffd05 	stb	r2,-12(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, (char *)&cTmp, sizeof(cTmp));
 4040c80:	e1fffd04 	addi	r7,fp,-12
 4040c84:	00800044 	movi	r2,1
 4040c88:	d8800015 	stw	r2,0(sp)
 4040c8c:	e13ee517 	ldw	r4,-1132(fp)
 4040c90:	000b883a 	mov	r5,zero
 4040c94:	01800284 	movi	r6,10
 4040c98:	40296ec0 	call	40296ec <t_setsockopt>
 4040c9c:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
 4040ca0:	e0bee317 	ldw	r2,-1140(fp)
 4040ca4:	10bfffd8 	cmpnei	r2,r2,-1
 4040ca8:	1000071e 	bne	r2,zero,4040cc8 <u_mctest_run+0x318>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_TTL failed, Err: %d\n",
 4040cac:	e13ee517 	ldw	r4,-1132(fp)
 4040cb0:	402a34c0 	call	402a34c <t_errno>
 4040cb4:	100d883a 	mov	r6,r2
 4040cb8:	e13fff17 	ldw	r4,-4(fp)
 4040cbc:	01410174 	movhi	r5,1029
 4040cc0:	2970e104 	addi	r5,r5,-15484
 4040cc4:	40210380 	call	4021038 <ns_printf>
                     t_errno(s));
   }

   /* enable loopback */
   cTmp = 1;
 4040cc8:	00800044 	movi	r2,1
 4040ccc:	e0bffd05 	stb	r2,-12(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, (char *)&cTmp, sizeof(cTmp));
 4040cd0:	e1fffd04 	addi	r7,fp,-12
 4040cd4:	00800044 	movi	r2,1
 4040cd8:	d8800015 	stw	r2,0(sp)
 4040cdc:	e13ee517 	ldw	r4,-1132(fp)
 4040ce0:	000b883a 	mov	r5,zero
 4040ce4:	018002c4 	movi	r6,11
 4040ce8:	40296ec0 	call	40296ec <t_setsockopt>
 4040cec:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
 4040cf0:	e0bee317 	ldw	r2,-1140(fp)
 4040cf4:	10bfffd8 	cmpnei	r2,r2,-1
 4040cf8:	1000071e 	bne	r2,zero,4040d18 <u_mctest_run+0x368>
   {
      ns_printf (pio,"t_setsockopt() IP_MULTICAST_LOOP failed, Err: %d\n",
 4040cfc:	e13ee517 	ldw	r4,-1132(fp)
 4040d00:	402a34c0 	call	402a34c <t_errno>
 4040d04:	100d883a 	mov	r6,r2
 4040d08:	e13fff17 	ldw	r4,-4(fp)
 4040d0c:	01410174 	movhi	r5,1029
 4040d10:	2970ee04 	addi	r5,r5,-15432
 4040d14:	40210380 	call	4021038 <ns_printf>
                     t_errno(s));
   }

   /* assign our destination address */
   stTo.sin_family =      AF_INET;
 4040d18:	00800084 	movi	r2,2
 4040d1c:	e0beea0d 	sth	r2,-1112(fp)
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
 4040d20:	01010174 	movhi	r4,1029
 4040d24:	2130db04 	addi	r4,r4,-15508
 4040d28:	4041adc0 	call	4041adc <inet_addr>
 4040d2c:	e0beeb15 	stw	r2,-1108(fp)
   stTo.sin_port =        htons(TEST_PORT);
 4040d30:	00a00344 	movi	r2,-32755
 4040d34:	e0beea8d 	sth	r2,-1110(fp)
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
 4040d38:	e13fff17 	ldw	r4,-4(fp)
 4040d3c:	01410174 	movhi	r5,1029
 4040d40:	2970fb04 	addi	r5,r5,-15380
 4040d44:	01810174 	movhi	r6,1029
 4040d48:	31b0db04 	addi	r6,r6,-15508
 4040d4c:	40210380 	call	4021038 <ns_printf>
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
 4040d50:	e03ee415 	stw	zero,-1136(fp)
 4040d54:	00008506 	br	4040f6c <u_mctest_run+0x5bc>
   {
      static int iCounter = 1;

      /* send to the multicast address */
      sprintf(&achOut[16], "%d", iCounter++);
 4040d58:	e0bff204 	addi	r2,fp,-56
 4040d5c:	11000404 	addi	r4,r2,16
 4040d60:	d0a04f17 	ldw	r2,-32452(gp)
 4040d64:	100d883a 	mov	r6,r2
 4040d68:	10800044 	addi	r2,r2,1
 4040d6c:	d0a04f15 	stw	r2,-32452(gp)
 4040d70:	01410174 	movhi	r5,1029
 4040d74:	29710a04 	addi	r5,r5,-15320
 4040d78:	40021a80 	call	40021a8 <sprintf>
      iRet = t_sendto(s, achOut, sizeof(achOut), 0, (struct sockaddr*)&stTo,
 4040d7c:	e0beea04 	addi	r2,fp,-1112
 4040d80:	e17ff204 	addi	r5,fp,-56
 4040d84:	d8800015 	stw	r2,0(sp)
 4040d88:	00800404 	movi	r2,16
 4040d8c:	d8800115 	stw	r2,4(sp)
 4040d90:	e13ee517 	ldw	r4,-1132(fp)
 4040d94:	01800784 	movi	r6,30
 4040d98:	000f883a 	mov	r7,zero
 4040d9c:	4029cac0 	call	4029cac <t_sendto>
 4040da0:	e0bee315 	stw	r2,-1140(fp)
                      sizeof(struct sockaddr_in));
      if (iRet < 0) 
 4040da4:	e0bee317 	ldw	r2,-1140(fp)
 4040da8:	1004403a 	cmpge	r2,r2,zero
 4040dac:	1000081e 	bne	r2,zero,4040dd0 <u_mctest_run+0x420>
      {
         /*      perror("sendto() failed\n"); */
         ns_printf (pio,"t_sendto() failed, Error: %d\n", t_errno(s));
 4040db0:	e13ee517 	ldw	r4,-1132(fp)
 4040db4:	402a34c0 	call	402a34c <t_errno>
 4040db8:	100d883a 	mov	r6,r2
 4040dbc:	e13fff17 	ldw	r4,-4(fp)
 4040dc0:	01410174 	movhi	r5,1029
 4040dc4:	29710b04 	addi	r5,r5,-15316
 4040dc8:	40210380 	call	4021038 <ns_printf>
         /*     exit(1); */
         goto exitloop;
 4040dcc:	00006a06 	br	4040f78 <u_mctest_run+0x5c8>
      }

      /* make the socket non-blocking */
      iTmp = 1;
 4040dd0:	00800044 	movi	r2,1
 4040dd4:	e0bffa15 	stw	r2,-24(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&iTmp, sizeof(iTmp));
 4040dd8:	e1fffa04 	addi	r7,fp,-24
 4040ddc:	00800104 	movi	r2,4
 4040de0:	d8800015 	stw	r2,0(sp)
 4040de4:	e13ee517 	ldw	r4,-1132(fp)
 4040de8:	017fffc4 	movi	r5,-1
 4040dec:	01840584 	movi	r6,4118
 4040df0:	40296ec0 	call	40296ec <t_setsockopt>
 4040df4:	e0bee315 	stw	r2,-1140(fp)
      if (iRet == SOCKET_ERROR) 
 4040df8:	e0bee317 	ldw	r2,-1140(fp)
 4040dfc:	10bfffd8 	cmpnei	r2,r2,-1
 4040e00:	1000071e 	bne	r2,zero,4040e20 <u_mctest_run+0x470>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (1) failed, Err: %d\n",
 4040e04:	e13ee517 	ldw	r4,-1132(fp)
 4040e08:	402a34c0 	call	402a34c <t_errno>
 4040e0c:	100d883a 	mov	r6,r2
 4040e10:	e13fff17 	ldw	r4,-4(fp)
 4040e14:	01410174 	movhi	r5,1029
 4040e18:	29711304 	addi	r5,r5,-15284
 4040e1c:	40210380 	call	4021038 <ns_printf>
                        t_errno(s));
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);
 4040e20:	00810174 	movhi	r2,1029
 4040e24:	1081e404 	addi	r2,r2,1936
 4040e28:	10800017 	ldw	r2,0(r2)
 4040e2c:	10807d04 	addi	r2,r2,500
 4040e30:	e0bee215 	stw	r2,-1144(fp)

      while (cticks < endtime)
 4040e34:	00003206 	br	4040f00 <u_mctest_run+0x550>
      {
         int sa_size = sizeof(struct sockaddr_in);
 4040e38:	00800404 	movi	r2,16
 4040e3c:	e0bffe15 	stw	r2,-8(fp)
         tk_yield();
 4040e40:	4021aa00 	call	4021aa0 <tk_yield>

         iRet = t_recvfrom(s, achIn, BUFSIZE, 0, (struct sockaddr*)&stFrom, &sa_size);
 4040e44:	e0beee04 	addi	r2,fp,-1096
 4040e48:	e17ef204 	addi	r5,fp,-1080
 4040e4c:	d8800015 	stw	r2,0(sp)
 4040e50:	e0bffe04 	addi	r2,fp,-8
 4040e54:	d8800115 	stw	r2,4(sp)
 4040e58:	e13ee517 	ldw	r4,-1132(fp)
 4040e5c:	01810004 	movi	r6,1024
 4040e60:	000f883a 	mov	r7,zero
 4040e64:	4029b5c0 	call	4029b5c <t_recvfrom>
 4040e68:	e0bee315 	stw	r2,-1140(fp)
         if (iRet < 0) 
 4040e6c:	e0bee317 	ldw	r2,-1140(fp)
 4040e70:	1004403a 	cmpge	r2,r2,zero
 4040e74:	10000c1e 	bne	r2,zero,4040ea8 <u_mctest_run+0x4f8>
         {
            if (t_errno(s) != EWOULDBLOCK)
 4040e78:	e13ee517 	ldw	r4,-1132(fp)
 4040e7c:	402a34c0 	call	402a34c <t_errno>
 4040e80:	108002e0 	cmpeqi	r2,r2,11
 4040e84:	1000081e 	bne	r2,zero,4040ea8 <u_mctest_run+0x4f8>
            {
               /*      perror("recvfrom() failed\n"); */
               ns_printf (pio,"t_recvfrom() failed, Error: %d\n", t_errno(s));
 4040e88:	e13ee517 	ldw	r4,-1132(fp)
 4040e8c:	402a34c0 	call	402a34c <t_errno>
 4040e90:	100d883a 	mov	r6,r2
 4040e94:	e13fff17 	ldw	r4,-4(fp)
 4040e98:	01410174 	movhi	r5,1029
 4040e9c:	29711f04 	addi	r5,r5,-15236
 4040ea0:	40210380 	call	4021038 <ns_printf>
               /*     exit(1); */
               goto exitloop;
 4040ea4:	00003406 	br	4040f78 <u_mctest_run+0x5c8>
            }
         }
         if (iRet > 0)
 4040ea8:	e0bee317 	ldw	r2,-1140(fp)
 4040eac:	10800050 	cmplti	r2,r2,1
 4040eb0:	1000131e 	bne	r2,zero,4040f00 <u_mctest_run+0x550>
         {
            ns_printf(pio,"From host:%s port:%d, %s\n",
 4040eb4:	e13eef17 	ldw	r4,-1092(fp)
 4040eb8:	4020c580 	call	4020c58 <print_ipad>
 4040ebc:	100d883a 	mov	r6,r2
 4040ec0:	e0beee8b 	ldhu	r2,-1094(fp)
 4040ec4:	10bfffcc 	andi	r2,r2,65535
 4040ec8:	1004d23a 	srli	r2,r2,8
 4040ecc:	10bfffcc 	andi	r2,r2,65535
 4040ed0:	10c03fcc 	andi	r3,r2,255
 4040ed4:	e0beee8b 	ldhu	r2,-1094(fp)
 4040ed8:	10bfffcc 	andi	r2,r2,65535
 4040edc:	1004923a 	slli	r2,r2,8
 4040ee0:	10bfc00c 	andi	r2,r2,65280
 4040ee4:	188eb03a 	or	r7,r3,r2
 4040ee8:	e0bef204 	addi	r2,fp,-1080
 4040eec:	d8800015 	stw	r2,0(sp)
 4040ef0:	e13fff17 	ldw	r4,-4(fp)
 4040ef4:	01410174 	movhi	r5,1029
 4040ef8:	29712704 	addi	r5,r5,-15204
 4040efc:	40210380 	call	4021038 <ns_printf>
      }

      /* loop around for 5 seconds waiting to receive datagrams */
      endtime = cticks + (TPS * 5);

      while (cticks < endtime)
 4040f00:	00810174 	movhi	r2,1029
 4040f04:	1081e404 	addi	r2,r2,1936
 4040f08:	10c00017 	ldw	r3,0(r2)
 4040f0c:	e0bee217 	ldw	r2,-1144(fp)
 4040f10:	18bfc936 	bltu	r3,r2,4040e38 <u_mctest_run+0x488>
             ntohs(stFrom.sin_port), achIn);
         }
      }   /* end while (cticks...) */

      /* make the socket blocking */
      cTmp = 0;
 4040f14:	e03ffd05 	stb	zero,-12(fp)
      iRet = t_setsockopt(s, SOL_SOCKET, SO_NONBLOCK, (char *)&cTmp, sizeof(cTmp));
 4040f18:	e1fffd04 	addi	r7,fp,-12
 4040f1c:	00800044 	movi	r2,1
 4040f20:	d8800015 	stw	r2,0(sp)
 4040f24:	e13ee517 	ldw	r4,-1132(fp)
 4040f28:	017fffc4 	movi	r5,-1
 4040f2c:	01840584 	movi	r6,4118
 4040f30:	40296ec0 	call	40296ec <t_setsockopt>
 4040f34:	e0bee315 	stw	r2,-1140(fp)
      if (iRet == SOCKET_ERROR) 
 4040f38:	e0bee317 	ldw	r2,-1140(fp)
 4040f3c:	10bfffd8 	cmpnei	r2,r2,-1
 4040f40:	1000071e 	bne	r2,zero,4040f60 <u_mctest_run+0x5b0>
      {
         ns_printf (pio,"t_setsockopt() SO_NONBLOCK (0) failed, Err: %d\n",
 4040f44:	e13ee517 	ldw	r4,-1132(fp)
 4040f48:	402a34c0 	call	402a34c <t_errno>
 4040f4c:	100d883a 	mov	r6,r2
 4040f50:	e13fff17 	ldw	r4,-4(fp)
 4040f54:	01410174 	movhi	r5,1029
 4040f58:	29712e04 	addi	r5,r5,-15176
 4040f5c:	40210380 	call	4021038 <ns_printf>
   stTo.sin_addr.s_addr = inet_addr(TEST_ADDR1);
   stTo.sin_port =        htons(TEST_PORT);
   ns_printf (pio,"Now sending to (and receiving from) multicast group: %s\n",
                  TEST_ADDR1);

   for (i = 0; i < LOOPMAX; i++)
 4040f60:	e0bee417 	ldw	r2,-1136(fp)
 4040f64:	10800044 	addi	r2,r2,1
 4040f68:	e0bee415 	stw	r2,-1136(fp)
 4040f6c:	e0bee417 	ldw	r2,-1136(fp)
 4040f70:	108000d0 	cmplti	r2,r2,3
 4040f74:	103f781e 	bne	r2,zero,4040d58 <u_mctest_run+0x3a8>
      }
   }   /* end for(;;) */

exitloop:
   /* delete the multicast group. */
   stMreq.imr_multiaddr = inet_addr(TEST_ADDR);
 4040f78:	01010174 	movhi	r4,1029
 4040f7c:	2130cb04 	addi	r4,r4,-15572
 4040f80:	4041adc0 	call	4041adc <inet_addr>
 4040f84:	e0bffb15 	stw	r2,-20(fp)
   stMreq.imr_interface = netstatic[0].n_ipaddr;
 4040f88:	008101b4 	movhi	r2,1030
 4040f8c:	10a14804 	addi	r2,r2,-31456
 4040f90:	10800a17 	ldw	r2,40(r2)
 4040f94:	e0bffc15 	stw	r2,-16(fp)
   iRet = t_setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, (char *)&stMreq, sizeof(stMreq));
 4040f98:	e1fffb04 	addi	r7,fp,-20
 4040f9c:	00800204 	movi	r2,8
 4040fa0:	d8800015 	stw	r2,0(sp)
 4040fa4:	e13ee517 	ldw	r4,-1132(fp)
 4040fa8:	000b883a 	mov	r5,zero
 4040fac:	01800344 	movi	r6,13
 4040fb0:	40296ec0 	call	40296ec <t_setsockopt>
 4040fb4:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
 4040fb8:	e0bee317 	ldw	r2,-1140(fp)
 4040fbc:	10bfffd8 	cmpnei	r2,r2,-1
 4040fc0:	1000071e 	bne	r2,zero,4040fe0 <u_mctest_run+0x630>
   {
      ns_printf (pio,"t_setsockopt() IP_DROP_MEMBERSHIP failed, Err: %d\n",
 4040fc4:	e13ee517 	ldw	r4,-1132(fp)
 4040fc8:	402a34c0 	call	402a34c <t_errno>
 4040fcc:	100d883a 	mov	r6,r2
 4040fd0:	e13fff17 	ldw	r4,-4(fp)
 4040fd4:	01410174 	movhi	r5,1029
 4040fd8:	29713a04 	addi	r5,r5,-15128
 4040fdc:	40210380 	call	4021038 <ns_printf>
   {
      ns_printf (pio,"t_shutdown failed.  Err: %d\n", t_errno(s));
   }
#endif

   iRet = t_socketclose(s);
 4040fe0:	e13ee517 	ldw	r4,-1132(fp)
 4040fe4:	402a1e40 	call	402a1e4 <t_socketclose>
 4040fe8:	e0bee315 	stw	r2,-1140(fp)
   if (iRet == SOCKET_ERROR) 
 4040fec:	e0bee317 	ldw	r2,-1140(fp)
 4040ff0:	10bfffd8 	cmpnei	r2,r2,-1
 4040ff4:	1000071e 	bne	r2,zero,4041014 <u_mctest_run+0x664>
   {
      ns_printf (pio,"t_socketclose() failed.  Err: %d\n", t_errno(s));
 4040ff8:	e13ee517 	ldw	r4,-1132(fp)
 4040ffc:	402a34c0 	call	402a34c <t_errno>
 4041000:	100d883a 	mov	r6,r2
 4041004:	e13fff17 	ldw	r4,-4(fp)
 4041008:	01410174 	movhi	r5,1029
 404100c:	29714704 	addi	r5,r5,-15076
 4041010:	40210380 	call	4021038 <ns_printf>
   }

   return(0);
 4041014:	0005883a 	mov	r2,zero
}  /* end main() */  
 4041018:	e037883a 	mov	sp,fp
 404101c:	dfc00117 	ldw	ra,4(sp)
 4041020:	df000017 	ldw	fp,0(sp)
 4041024:	dec00204 	addi	sp,sp,8
 4041028:	f800283a 	ret

0404102c <dhc_setup>:
 * RETURNS: void
 */

void
dhc_setup(void)
{  
 404102c:	defff604 	addi	sp,sp,-40
 4041030:	dfc00915 	stw	ra,36(sp)
 4041034:	df000815 	stw	fp,32(sp)
 4041038:	df000804 	addi	fp,sp,32
   int      iface;
   ulong    dhcp_started;
   ip_addr  dhcp_saveaddr[STATIC_NETS];
   int      e;
   int      dhcnets = 0;   /* number of nets doing DHCP */
 404103c:	e03ff815 	stw	zero,-32(fp)

   e = dhc_init();
 4041040:	4021d640 	call	4021d64 <dhc_init>
 4041044:	e0bff915 	stw	r2,-28(fp)

   if (e)
 4041048:	e0bff917 	ldw	r2,-28(fp)
 404104c:	1005003a 	cmpeq	r2,r2,zero
 4041050:	1000051e 	bne	r2,zero,4041068 <dhc_setup+0x3c>
   {
      printf("Error starting DHCP client code.\n");
 4041054:	01010174 	movhi	r4,1029
 4041058:	21315804 	addi	r4,r4,-15008
 404105c:	40021940 	call	4002194 <puts>
      netexit(1);
 4041060:	01000044 	movi	r4,1
 4041064:	403db080 	call	403db08 <netexit>
   }

   dhcp_started = cticks;  /* init timeout */
 4041068:	00810174 	movhi	r2,1029
 404106c:	1081e404 	addi	r2,r2,1936
 4041070:	10800017 	ldw	r2,0(r2)
 4041074:	e0bffa15 	stw	r2,-24(fp)

   for (iface = 0; iface < STATIC_NETS; iface++)
 4041078:	e03ffb15 	stw	zero,-20(fp)
 404107c:	00005106 	br	40411c4 <dhc_setup+0x198>
   {
      if (!nets[iface])
 4041080:	e0bffb17 	ldw	r2,-20(fp)
 4041084:	00c101b4 	movhi	r3,1030
 4041088:	18e20804 	addi	r3,r3,-30688
 404108c:	1085883a 	add	r2,r2,r2
 4041090:	1085883a 	add	r2,r2,r2
 4041094:	10c5883a 	add	r2,r2,r3
 4041098:	10800017 	ldw	r2,0(r2)
 404109c:	1005003a 	cmpeq	r2,r2,zero
 40410a0:	1000451e 	bne	r2,zero,40411b8 <dhc_setup+0x18c>
#ifdef INCLUDE_NVPARMS
      if (inet_nvparms.ifs[iface].client_dhcp)
         nets[iface]->n_flags |= NF_DHCPC ; /* use DHCP Client on this iface */
#endif   /* INCLUDE_NVPARMS */

      if (!(nets[iface]->n_flags & NF_DHCPC))
 40410a4:	e0bffb17 	ldw	r2,-20(fp)
 40410a8:	00c101b4 	movhi	r3,1030
 40410ac:	18e20804 	addi	r3,r3,-30688
 40410b0:	1085883a 	add	r2,r2,r2
 40410b4:	1085883a 	add	r2,r2,r2
 40410b8:	10c5883a 	add	r2,r2,r3
 40410bc:	10800017 	ldw	r2,0(r2)
 40410c0:	10802a17 	ldw	r2,168(r2)
 40410c4:	1080400c 	andi	r2,r2,256
 40410c8:	1005003a 	cmpeq	r2,r2,zero
 40410cc:	10003a1e 	bne	r2,zero,40411b8 <dhc_setup+0x18c>
         continue;

      /* If callback is not already in use (by AutoIP) grab it for
       * our printf routine.
       */
      if(dhc_states[iface].callback == NULL)
 40410d0:	e0bffb17 	ldw	r2,-20(fp)
 40410d4:	00c101b4 	movhi	r3,1030
 40410d8:	18e22e04 	addi	r3,r3,-30536
 40410dc:	10800f24 	muli	r2,r2,60
 40410e0:	10c5883a 	add	r2,r2,r3
 40410e4:	10800e04 	addi	r2,r2,56
 40410e8:	10800017 	ldw	r2,0(r2)
 40410ec:	1004c03a 	cmpne	r2,r2,zero
 40410f0:	1000041e 	bne	r2,zero,4041104 <dhc_setup+0xd8>
      {
         dhc_set_callback(iface, dhc_main_ipset);
 40410f4:	e13ffb17 	ldw	r4,-20(fp)
 40410f8:	01410134 	movhi	r5,1028
 40410fc:	2944ac04 	addi	r5,r5,4784
 4041100:	4021e200 	call	4021e20 <dhc_set_callback>
      }

      /* start DHCP on the iface - first save the default address */
      dhcp_saveaddr[iface] = nets[iface]->n_ipaddr;
 4041104:	e13ffb17 	ldw	r4,-20(fp)
 4041108:	e0bffb17 	ldw	r2,-20(fp)
 404110c:	00c101b4 	movhi	r3,1030
 4041110:	18e20804 	addi	r3,r3,-30688
 4041114:	1085883a 	add	r2,r2,r2
 4041118:	1085883a 	add	r2,r2,r2
 404111c:	10c5883a 	add	r2,r2,r3
 4041120:	10800017 	ldw	r2,0(r2)
 4041124:	10c00a17 	ldw	r3,40(r2)
 4041128:	2105883a 	add	r2,r4,r4
 404112c:	1085883a 	add	r2,r2,r2
 4041130:	e13ff804 	addi	r4,fp,-32
 4041134:	1105883a 	add	r2,r2,r4
 4041138:	10800404 	addi	r2,r2,16
 404113c:	10c00015 	stw	r3,0(r2)

      if (dhcp_saveaddr[iface] == 0L)  /* see if there is a default */
 4041140:	e0bffb17 	ldw	r2,-20(fp)
 4041144:	1085883a 	add	r2,r2,r2
 4041148:	1085883a 	add	r2,r2,r2
 404114c:	e0fff804 	addi	r3,fp,-32
 4041150:	10c5883a 	add	r2,r2,r3
 4041154:	10800404 	addi	r2,r2,16
 4041158:	10800017 	ldw	r2,0(r2)
 404115c:	1004c03a 	cmpne	r2,r2,zero
 4041160:	1000041e 	bne	r2,zero,4041174 <dhc_setup+0x148>
         dhc_state_init(iface, TRUE);  /* Put DHCPClient in INIT state */
 4041164:	e13ffb17 	ldw	r4,-20(fp)
 4041168:	01400044 	movi	r5,1
 404116c:	4024a000 	call	4024a00 <dhc_state_init>
 4041170:	00000306 	br	4041180 <dhc_setup+0x154>
      else
         dhc_state_init(iface, FALSE); /* Put DHCPClient in INIT-REBOOT state */
 4041174:	e13ffb17 	ldw	r4,-20(fp)
 4041178:	000b883a 	mov	r5,zero
 404117c:	4024a000 	call	4024a00 <dhc_state_init>

      e=dhc_second();                  /* To send the DISCOVER/REQUEST pkt */
 4041180:	402420c0 	call	402420c <dhc_second>
 4041184:	e0bff915 	stw	r2,-28(fp)
      if (e)
 4041188:	e0bff917 	ldw	r2,-28(fp)
 404118c:	1005003a 	cmpeq	r2,r2,zero
 4041190:	1000061e 	bne	r2,zero,40411ac <dhc_setup+0x180>
      {
         printf("Error sending DHCP packet on iface %d.\n", iface);
 4041194:	01010174 	movhi	r4,1029
 4041198:	21316104 	addi	r4,r4,-14972
 404119c:	e17ffb17 	ldw	r5,-20(fp)
 40411a0:	400207c0 	call	400207c <printf>
         netexit(1);
 40411a4:	01000044 	movi	r4,1
 40411a8:	403db080 	call	403db08 <netexit>
      /* If we are not using Auto IP then we want to block below waiting
       * for DHCP completion. If we are using Auto IP then we want to
       * return and let the Auto IP code handle the DHCP completion.
       * "dhcnets" is a flag which allows this.
       */
      dhcnets++;
 40411ac:	e0bff817 	ldw	r2,-32(fp)
 40411b0:	10800044 	addi	r2,r2,1
 40411b4:	e0bff815 	stw	r2,-32(fp)
      netexit(1);
   }

   dhcp_started = cticks;  /* init timeout */

   for (iface = 0; iface < STATIC_NETS; iface++)
 40411b8:	e0bffb17 	ldw	r2,-20(fp)
 40411bc:	10800044 	addi	r2,r2,1
 40411c0:	e0bffb15 	stw	r2,-20(fp)
 40411c4:	e0bffb17 	ldw	r2,-20(fp)
 40411c8:	10800110 	cmplti	r2,r2,4
 40411cc:	103fac1e 	bne	r2,zero,4041080 <dhc_setup+0x54>
       */
      dhcnets++;
#endif
   }

   if(dhcnets == 0)  /* no nets doing DHCP? */
 40411d0:	e0bff817 	ldw	r2,-32(fp)
 40411d4:	1005003a 	cmpeq	r2,r2,zero
 40411d8:	1000301e 	bne	r2,zero,404129c <dhc_setup+0x270>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
 40411dc:	00000206 	br	40411e8 <dhc_setup+0x1bc>
   {
      /* let other tasks spin. This is required, since some systems
       * increment cticks in tasks, or use a polling task to receive
       * packets. Without this activity this loop will never exit.
       */
      tk_yield();
 40411e0:	4021aa00 	call	4021aa0 <tk_yield>
      pktdemux();
 40411e4:	401e2fc0 	call	401e2fc <pktdemux>
   /* wait for DHCP activity to conclude */
   /* 
    * Altera Niche Stack Nios port modification:
    * Increase DHCP timeout to > 2 minutes 
    */
   while (((cticks - dhcp_started) < (130*TPS)) &&
 40411e8:	00810174 	movhi	r2,1029
 40411ec:	1081e404 	addi	r2,r2,1936
 40411f0:	10c00017 	ldw	r3,0(r2)
 40411f4:	e0bffa17 	ldw	r2,-24(fp)
 40411f8:	1885c83a 	sub	r2,r3,r2
 40411fc:	108cb228 	cmpgeui	r2,r2,13000
 4041200:	1000031e 	bne	r2,zero,4041210 <dhc_setup+0x1e4>
 4041204:	4024a600 	call	4024a60 <dhc_alldone>
 4041208:	1005003a 	cmpeq	r2,r2,zero
 404120c:	103ff41e 	bne	r2,zero,40411e0 <dhc_setup+0x1b4>
#ifdef SUPERLOOP
      dhc_second ();
#endif
   }

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
 4041210:	4024a600 	call	4024a60 <dhc_alldone>
 4041214:	1004c03a 	cmpne	r2,r2,zero
 4041218:	1000201e 	bne	r2,zero,404129c <dhc_setup+0x270>
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
 404121c:	01010174 	movhi	r4,1029
 4041220:	21316b04 	addi	r4,r4,-14932
 4041224:	40021940 	call	4002194 <puts>
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 4041228:	e03ffb15 	stw	zero,-20(fp)
 404122c:	00001806 	br	4041290 <dhc_setup+0x264>
      {
         if (dhc_ifacedone(iface) == FALSE)
 4041230:	e13ffb17 	ldw	r4,-20(fp)
 4041234:	4024af00 	call	4024af0 <dhc_ifacedone>
 4041238:	1004c03a 	cmpne	r2,r2,zero
 404123c:	1000111e 	bne	r2,zero,4041284 <dhc_setup+0x258>
         {
            dhc_halt(iface);
 4041240:	e13ffb17 	ldw	r4,-20(fp)
 4041244:	40247a80 	call	40247a8 <dhc_halt>
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
 4041248:	e0bffb17 	ldw	r2,-20(fp)
 404124c:	00c101b4 	movhi	r3,1030
 4041250:	18e20804 	addi	r3,r3,-30688
 4041254:	1085883a 	add	r2,r2,r2
 4041258:	1085883a 	add	r2,r2,r2
 404125c:	10c5883a 	add	r2,r2,r3
 4041260:	10c00017 	ldw	r3,0(r2)
 4041264:	e0bffb17 	ldw	r2,-20(fp)
 4041268:	1085883a 	add	r2,r2,r2
 404126c:	1085883a 	add	r2,r2,r2
 4041270:	e13ff804 	addi	r4,fp,-32
 4041274:	1105883a 	add	r2,r2,r4
 4041278:	10800404 	addi	r2,r2,16
 404127c:	10800017 	ldw	r2,0(r2)
 4041280:	18800a15 	stw	r2,40(r3)

   if (dhc_alldone() == FALSE)   /* dhcp timed out? */
   {
      dprintf("DHCP timed out, going back to default IP address(es)\n");
      /* go back to defaults */
      for (iface = 0; iface < STATIC_NETS; iface++)
 4041284:	e0bffb17 	ldw	r2,-20(fp)
 4041288:	10800044 	addi	r2,r2,1
 404128c:	e0bffb15 	stw	r2,-20(fp)
 4041290:	e0bffb17 	ldw	r2,-20(fp)
 4041294:	10800110 	cmplti	r2,r2,4
 4041298:	103fe51e 	bne	r2,zero,4041230 <dhc_setup+0x204>
            dhc_halt(iface);
            nets[iface]->n_ipaddr = dhcp_saveaddr[iface];
         }
      }
   }
}
 404129c:	e037883a 	mov	sp,fp
 40412a0:	dfc00117 	ldw	ra,4(sp)
 40412a4:	df000017 	ldw	fp,0(sp)
 40412a8:	dec00204 	addi	sp,sp,8
 40412ac:	f800283a 	ret

040412b0 <dhc_main_ipset>:
 * RETURNS: 
 */

int
dhc_main_ipset(int iface, int state)
{
 40412b0:	defffc04 	addi	sp,sp,-16
 40412b4:	dfc00315 	stw	ra,12(sp)
 40412b8:	df000215 	stw	fp,8(sp)
 40412bc:	df000204 	addi	fp,sp,8
 40412c0:	e13ffe15 	stw	r4,-8(fp)
 40412c4:	e17fff15 	stw	r5,-4(fp)
   if ( state == DHCS_BOUND )
 40412c8:	e0bfff17 	ldw	r2,-4(fp)
 40412cc:	10800198 	cmpnei	r2,r2,6
 40412d0:	1000321e 	bne	r2,zero,404139c <dhc_main_ipset+0xec>
   {
      /* print IP address acquired through DHCP Client - for user's benefit */
      printf("Acquired IP address via DHCP client for interface: %s\n",
 40412d4:	e0bffe17 	ldw	r2,-8(fp)
 40412d8:	00c101b4 	movhi	r3,1030
 40412dc:	18e20804 	addi	r3,r3,-30688
 40412e0:	1085883a 	add	r2,r2,r2
 40412e4:	1085883a 	add	r2,r2,r2
 40412e8:	10c5883a 	add	r2,r2,r3
 40412ec:	10800017 	ldw	r2,0(r2)
 40412f0:	11400104 	addi	r5,r2,4
 40412f4:	01010174 	movhi	r4,1029
 40412f8:	21317904 	addi	r4,r4,-14876
 40412fc:	400207c0 	call	400207c <printf>
              nets[iface]->name);

      printf("IP address : %s\n", print_ipad(nets[iface]->n_ipaddr));
 4041300:	e0bffe17 	ldw	r2,-8(fp)
 4041304:	00c101b4 	movhi	r3,1030
 4041308:	18e20804 	addi	r3,r3,-30688
 404130c:	1085883a 	add	r2,r2,r2
 4041310:	1085883a 	add	r2,r2,r2
 4041314:	10c5883a 	add	r2,r2,r3
 4041318:	10800017 	ldw	r2,0(r2)
 404131c:	11000a17 	ldw	r4,40(r2)
 4041320:	4020c580 	call	4020c58 <print_ipad>
 4041324:	100b883a 	mov	r5,r2
 4041328:	01010174 	movhi	r4,1029
 404132c:	21318704 	addi	r4,r4,-14820
 4041330:	400207c0 	call	400207c <printf>
      printf("Subnet Mask: %s\n", print_ipad(nets[iface]->snmask));
 4041334:	e0bffe17 	ldw	r2,-8(fp)
 4041338:	00c101b4 	movhi	r3,1030
 404133c:	18e20804 	addi	r3,r3,-30688
 4041340:	1085883a 	add	r2,r2,r2
 4041344:	1085883a 	add	r2,r2,r2
 4041348:	10c5883a 	add	r2,r2,r3
 404134c:	10800017 	ldw	r2,0(r2)
 4041350:	11000c17 	ldw	r4,48(r2)
 4041354:	4020c580 	call	4020c58 <print_ipad>
 4041358:	100b883a 	mov	r5,r2
 404135c:	01010174 	movhi	r4,1029
 4041360:	21318c04 	addi	r4,r4,-14800
 4041364:	400207c0 	call	400207c <printf>
      printf("Gateway    : %s\n", print_ipad(nets[iface]->n_defgw));
 4041368:	e0bffe17 	ldw	r2,-8(fp)
 404136c:	00c101b4 	movhi	r3,1030
 4041370:	18e20804 	addi	r3,r3,-30688
 4041374:	1085883a 	add	r2,r2,r2
 4041378:	1085883a 	add	r2,r2,r2
 404137c:	10c5883a 	add	r2,r2,r3
 4041380:	10800017 	ldw	r2,0(r2)
 4041384:	11000d17 	ldw	r4,52(r2)
 4041388:	4020c580 	call	4020c58 <print_ipad>
 404138c:	100b883a 	mov	r5,r2
 4041390:	01010174 	movhi	r4,1029
 4041394:	21319104 	addi	r4,r4,-14780
 4041398:	400207c0 	call	400207c <printf>
   }
   return 0;
 404139c:	0005883a 	mov	r2,zero
}
 40413a0:	e037883a 	mov	sp,fp
 40413a4:	dfc00117 	ldw	ra,4(sp)
 40413a8:	df000017 	ldw	fp,0(sp)
 40413ac:	dec00204 	addi	sp,sp,8
 40413b0:	f800283a 	ret

040413b4 <init_memdev>:
 * RETURNS: 
 */

int
init_memdev(void)
{
 40413b4:	deffff04 	addi	sp,sp,-4
 40413b8:	df000015 	stw	fp,0(sp)
 40413bc:	d839883a 	mov	fp,sp
   /* add our IO pointer to master list */
   mdio.next = vfsystems;
 40413c0:	00810174 	movhi	r2,1029
 40413c4:	10821004 	addi	r2,r2,2112
 40413c8:	10c00017 	ldw	r3,0(r2)
 40413cc:	00810174 	movhi	r2,1029
 40413d0:	10b96304 	addi	r2,r2,-6772
 40413d4:	10c00015 	stw	r3,0(r2)
   vfsystems = &mdio;
 40413d8:	00c10174 	movhi	r3,1029
 40413dc:	18c21004 	addi	r3,r3,2112
 40413e0:	00810174 	movhi	r2,1029
 40413e4:	10b96304 	addi	r2,r2,-6772
 40413e8:	18800015 	stw	r2,0(r3)

   /* add the memory device files to vfs list */
   mdlist[0].next = vfsfiles;
 40413ec:	00810174 	movhi	r2,1029
 40413f0:	10821204 	addi	r2,r2,2120
 40413f4:	10c00017 	ldw	r3,0(r2)
 40413f8:	00810174 	movhi	r2,1029
 40413fc:	10b96c04 	addi	r2,r2,-6736
 4041400:	10c00015 	stw	r3,0(r2)
   vfsfiles = &mdlist[3];
 4041404:	00c10174 	movhi	r3,1029
 4041408:	18f98d04 	addi	r3,r3,-6604
 404140c:	00810174 	movhi	r2,1029
 4041410:	10821204 	addi	r2,r2,2120
 4041414:	10c00015 	stw	r3,0(r2)

   return 0;
 4041418:	0005883a 	mov	r2,zero
}
 404141c:	e037883a 	mov	sp,fp
 4041420:	df000017 	ldw	fp,0(sp)
 4041424:	dec00104 	addi	sp,sp,4
 4041428:	f800283a 	ret

0404142c <md_fopen>:
 * RETURNS: 
 */

VFILE* 
md_fopen(char * name, char * mode)
{
 404142c:	defffd04 	addi	sp,sp,-12
 4041430:	df000215 	stw	fp,8(sp)
 4041434:	df000204 	addi	fp,sp,8
 4041438:	e13ffe15 	stw	r4,-8(fp)
 404143c:	e17fff15 	stw	r5,-4(fp)
   USE_ARG(mode);
   USE_ARG(name);
   return NULL;
 4041440:	0005883a 	mov	r2,zero
}
 4041444:	e037883a 	mov	sp,fp
 4041448:	df000017 	ldw	fp,0(sp)
 404144c:	dec00104 	addi	sp,sp,4
 4041450:	f800283a 	ret

04041454 <md_fclose>:
 * RETURNS: 
 */

void   
md_fclose(VFILE * vfd)
{
 4041454:	defffe04 	addi	sp,sp,-8
 4041458:	df000115 	stw	fp,4(sp)
 404145c:	df000104 	addi	fp,sp,4
 4041460:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);
}
 4041464:	e037883a 	mov	sp,fp
 4041468:	df000017 	ldw	fp,0(sp)
 404146c:	dec00104 	addi	sp,sp,4
 4041470:	f800283a 	ret

04041474 <md_fread>:
 * RETURNS: 
 */

int    
md_fread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 4041474:	defff604 	addi	sp,sp,-40
 4041478:	dfc00915 	stw	ra,36(sp)
 404147c:	df000815 	stw	fp,32(sp)
 4041480:	df000804 	addi	fp,sp,32
 4041484:	e13ffb15 	stw	r4,-20(fp)
 4041488:	e17ffc15 	stw	r5,-16(fp)
 404148c:	e1bffd15 	stw	r6,-12(fp)
 4041490:	e1fffe15 	stw	r7,-8(fp)
   u_long   bcount;     /* number of bytes put in caller's buffer */
   u_long   location;   /* current offset into file */
   unsigned long file_size = MEMDEV_SIZE;
 4041494:	00800834 	movhi	r2,32
 4041498:	e0bff815 	stw	r2,-32(fp)
   if(vfd && vfd->file)
 404149c:	e0bffe17 	ldw	r2,-8(fp)
 40414a0:	1005003a 	cmpeq	r2,r2,zero
 40414a4:	1000081e 	bne	r2,zero,40414c8 <md_fread+0x54>
 40414a8:	e0bffe17 	ldw	r2,-8(fp)
 40414ac:	10800117 	ldw	r2,4(r2)
 40414b0:	1005003a 	cmpeq	r2,r2,zero
 40414b4:	1000041e 	bne	r2,zero,40414c8 <md_fread+0x54>
   {
      file_size = vfd->file->real_size; 
 40414b8:	e0bffe17 	ldw	r2,-8(fp)
 40414bc:	10800117 	ldw	r2,4(r2)
 40414c0:	10800717 	ldw	r2,28(r2)
 40414c4:	e0bff815 	stw	r2,-32(fp)
#ifdef SEG16_16   /* 16-bit x86 must include segment. */
   if(vfd->cmploc == (u_char*)0xFFFFFFFF)   /* at EOF */
      return 0;
   location = (u_long)(((char huge *)vfd->cmploc) - ((char huge *)vfd->file->data));
#else
   location = (u_long)(vfd->cmploc - vfd->file->data);
 40414c8:	e0bffe17 	ldw	r2,-8(fp)
 40414cc:	10800217 	ldw	r2,8(r2)
 40414d0:	1007883a 	mov	r3,r2
 40414d4:	e0bffe17 	ldw	r2,-8(fp)
 40414d8:	10800117 	ldw	r2,4(r2)
 40414dc:	10800617 	ldw	r2,24(r2)
 40414e0:	1885c83a 	sub	r2,r3,r2
 40414e4:	e0bff915 	stw	r2,-28(fp)
#endif   /* SEG16_16 */

   bcount = (items * (u_long)size);     /* number of bytes to transfer */
 40414e8:	e0fffd17 	ldw	r3,-12(fp)
 40414ec:	e0bffc17 	ldw	r2,-16(fp)
 40414f0:	1885383a 	mul	r2,r3,r2
 40414f4:	e0bffa15 	stw	r2,-24(fp)

   /* if near end of memory, trim read count accordingly */
   if ((location + bcount) > file_size)
 40414f8:	e0fff917 	ldw	r3,-28(fp)
 40414fc:	e0bffa17 	ldw	r2,-24(fp)
 4041500:	1887883a 	add	r3,r3,r2
 4041504:	e0bff817 	ldw	r2,-32(fp)
 4041508:	10c0042e 	bgeu	r2,r3,404151c <md_fread+0xa8>
      bcount = ((u_long)file_size - location);
 404150c:	e0bff817 	ldw	r2,-32(fp)
 4041510:	e0fff917 	ldw	r3,-28(fp)
 4041514:	10c5c83a 	sub	r2,r2,r3
 4041518:	e0bffa15 	stw	r2,-24(fp)

   /* trap bogus size items and end-of-x86 memory conditions */
   if((location >= file_size) ||
 404151c:	e0fff917 	ldw	r3,-28(fp)
 4041520:	e0bff817 	ldw	r2,-32(fp)
 4041524:	1880072e 	bgeu	r3,r2,4041544 <md_fread+0xd0>
 4041528:	e0bffa17 	ldw	r2,-24(fp)
 404152c:	10bfffec 	andhi	r2,r2,65535
 4041530:	1004c03a 	cmpne	r2,r2,zero
 4041534:	1000031e 	bne	r2,zero,4041544 <md_fread+0xd0>
 4041538:	e0bffa17 	ldw	r2,-24(fp)
 404153c:	1004c03a 	cmpne	r2,r2,zero
 4041540:	1000021e 	bne	r2,zero,404154c <md_fread+0xd8>
      (bcount  & 0xFFFF0000) ||
      (bcount == 0))
   {
      return 0;
 4041544:	e03fff15 	stw	zero,-4(fp)
 4041548:	00002406 	br	40415dc <md_fread+0x168>
   /* Use VF_NODATA if memory devices have a size, but no
      data. This can be used to measure file read speed
      without introducing an undefined data copy. */
   /* VF_NODATA is defined in ../h/vfsfiles.h */
   
   if (!(vfd->file->flags & VF_NODATA))
 404154c:	e0bffe17 	ldw	r2,-8(fp)
 4041550:	10800117 	ldw	r2,4(r2)
 4041554:	1080058b 	ldhu	r2,22(r2)
 4041558:	10bfffcc 	andi	r2,r2,65535
 404155c:	10a0001c 	xori	r2,r2,32768
 4041560:	10a00004 	addi	r2,r2,-32768
 4041564:	1004803a 	cmplt	r2,r2,zero
 4041568:	1000111e 	bne	r2,zero,40415b0 <md_fread+0x13c>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 404156c:	e0bffe17 	ldw	r2,-8(fp)
 4041570:	10800117 	ldw	r2,4(r2)
 4041574:	10800103 	ldbu	r2,4(r2)
 4041578:	10803fcc 	andi	r2,r2,255
 404157c:	1080201c 	xori	r2,r2,128
 4041580:	10bfe004 	addi	r2,r2,-128
 4041584:	10801b58 	cmpnei	r2,r2,109
 4041588:	1000091e 	bne	r2,zero,40415b0 <md_fread+0x13c>
         MEMCPY(buf, vfd->cmploc + MEMDEV_BASE, (unsigned)bcount);
 404158c:	e0bffe17 	ldw	r2,-8(fp)
 4041590:	10c00217 	ldw	r3,8(r2)
 4041594:	00800834 	movhi	r2,32
 4041598:	1887883a 	add	r3,r3,r2
 404159c:	e0bffb17 	ldw	r2,-20(fp)
 40415a0:	1009883a 	mov	r4,r2
 40415a4:	180b883a 	mov	r5,r3
 40415a8:	e1bffa17 	ldw	r6,-24(fp)
 40415ac:	4001de40 	call	4001de4 <memcpy>
         vfd->cmploc = (u_char *)cp;
      else     /* read wrapped memory, set pointer to EOF value */
         vfd->cmploc = (u_char*)(0xFFFFFFFF);  /* EOF */
   }
#else
   vfd->cmploc += bcount;  /* adjust location */
 40415b0:	e0bffe17 	ldw	r2,-8(fp)
 40415b4:	10c00217 	ldw	r3,8(r2)
 40415b8:	e0bffa17 	ldw	r2,-24(fp)
 40415bc:	1887883a 	add	r3,r3,r2
 40415c0:	e0bffe17 	ldw	r2,-8(fp)
 40415c4:	10c00215 	stw	r3,8(r2)
#endif
   
   return ((int)bcount/size);
 40415c8:	e0bffa17 	ldw	r2,-24(fp)
 40415cc:	1007883a 	mov	r3,r2
 40415d0:	e0bffc17 	ldw	r2,-16(fp)
 40415d4:	1885203a 	divu	r2,r3,r2
 40415d8:	e0bfff15 	stw	r2,-4(fp)
 40415dc:	e0bfff17 	ldw	r2,-4(fp)
}
 40415e0:	e037883a 	mov	sp,fp
 40415e4:	dfc00117 	ldw	ra,4(sp)
 40415e8:	df000017 	ldw	fp,0(sp)
 40415ec:	dec00204 	addi	sp,sp,8
 40415f0:	f800283a 	ret

040415f4 <md_fwrite>:
 * RETURNS: 
 */

int    
md_fwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 40415f4:	defffa04 	addi	sp,sp,-24
 40415f8:	df000515 	stw	fp,20(sp)
 40415fc:	df000504 	addi	fp,sp,20
 4041600:	e13ffb15 	stw	r4,-20(fp)
 4041604:	e17ffc15 	stw	r5,-16(fp)
 4041608:	e1bffd15 	stw	r6,-12(fp)
 404160c:	e1fffe15 	stw	r7,-8(fp)
   if (vfd->file->name[0] == 'm')   /* memory device */
 4041610:	e0bffe17 	ldw	r2,-8(fp)
 4041614:	10800117 	ldw	r2,4(r2)
 4041618:	10800103 	ldbu	r2,4(r2)
 404161c:	10803fcc 	andi	r2,r2,255
 4041620:	1080201c 	xori	r2,r2,128
 4041624:	10bfe004 	addi	r2,r2,-128
 4041628:	10801b58 	cmpnei	r2,r2,109
 404162c:	1000021e 	bne	r2,zero,4041638 <md_fwrite+0x44>
      return 0;   /* not writable device */
 4041630:	e03fff15 	stw	zero,-4(fp)
 4041634:	00000a06 	br	4041660 <md_fwrite+0x6c>

   vfd->cmploc += (items * size);   /* adjust location */
 4041638:	e0bffe17 	ldw	r2,-8(fp)
 404163c:	11000217 	ldw	r4,8(r2)
 4041640:	e0fffd17 	ldw	r3,-12(fp)
 4041644:	e0bffc17 	ldw	r2,-16(fp)
 4041648:	1885383a 	mul	r2,r3,r2
 404164c:	2087883a 	add	r3,r4,r2
 4041650:	e0bffe17 	ldw	r2,-8(fp)
 4041654:	10c00215 	stw	r3,8(r2)

   USE_ARG(buf);     /* supress compiler warnings */

   return (items);
 4041658:	e0bffd17 	ldw	r2,-12(fp)
 404165c:	e0bfff15 	stw	r2,-4(fp)
 4041660:	e0bfff17 	ldw	r2,-4(fp)
}
 4041664:	e037883a 	mov	sp,fp
 4041668:	df000017 	ldw	fp,0(sp)
 404166c:	dec00104 	addi	sp,sp,4
 4041670:	f800283a 	ret

04041674 <md_fseek>:
 * RETURNS: 
 */

int
md_fseek(VFILE * vfd, long offset, int mode)
{
 4041674:	defffc04 	addi	sp,sp,-16
 4041678:	df000315 	stw	fp,12(sp)
 404167c:	df000304 	addi	fp,sp,12
 4041680:	e13ffd15 	stw	r4,-12(fp)
 4041684:	e17ffe15 	stw	r5,-8(fp)
 4041688:	e1bfff15 	stw	r6,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   USE_ARG(offset);
   USE_ARG(mode);
   return 0;
 404168c:	0005883a 	mov	r2,zero
}
 4041690:	e037883a 	mov	sp,fp
 4041694:	df000017 	ldw	fp,0(sp)
 4041698:	dec00104 	addi	sp,sp,4
 404169c:	f800283a 	ret

040416a0 <md_ftell>:
 * RETURNS: 
 */

long   
md_ftell(VFILE * vfd)
{
 40416a0:	defffe04 	addi	sp,sp,-8
 40416a4:	df000115 	stw	fp,4(sp)
 40416a8:	df000104 	addi	fp,sp,4
 40416ac:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(vfd);     /* supress compiler warnings */
   return MEMDEV_SIZE;
 40416b0:	00800834 	movhi	r2,32
}
 40416b4:	e037883a 	mov	sp,fp
 40416b8:	df000017 	ldw	fp,0(sp)
 40416bc:	dec00104 	addi	sp,sp,4
 40416c0:	f800283a 	ret

040416c4 <md_fgetc>:
 * RETURNS: 
 */

int    
md_fgetc(VFILE * vfd)
{
 40416c4:	defffb04 	addi	sp,sp,-20
 40416c8:	df000415 	stw	fp,16(sp)
 40416cc:	df000404 	addi	fp,sp,16
 40416d0:	e13ffe15 	stw	r4,-8(fp)
   unsigned location;   /* current offset infile */
   int   retval   =  0;
 40416d4:	e03ffc15 	stw	zero,-16(fp)

   location = vfd->cmploc - vfd->file->data;
 40416d8:	e0bffe17 	ldw	r2,-8(fp)
 40416dc:	10800217 	ldw	r2,8(r2)
 40416e0:	1007883a 	mov	r3,r2
 40416e4:	e0bffe17 	ldw	r2,-8(fp)
 40416e8:	10800117 	ldw	r2,4(r2)
 40416ec:	10800617 	ldw	r2,24(r2)
 40416f0:	1885c83a 	sub	r2,r3,r2
 40416f4:	e0bffd15 	stw	r2,-12(fp)
   if (location >= vfd->file->real_size)     /* at end of file? */
 40416f8:	e0bffe17 	ldw	r2,-8(fp)
 40416fc:	10800117 	ldw	r2,4(r2)
 4041700:	10c00717 	ldw	r3,28(r2)
 4041704:	e0bffd17 	ldw	r2,-12(fp)
 4041708:	10c00336 	bltu	r2,r3,4041718 <md_fgetc+0x54>
      return EOF;
 404170c:	00bfffc4 	movi	r2,-1
 4041710:	e0bfff15 	stw	r2,-4(fp)
 4041714:	00001c06 	br	4041788 <md_fgetc+0xc4>

   if (!(vfd->file->flags & VF_NODATA))
 4041718:	e0bffe17 	ldw	r2,-8(fp)
 404171c:	10800117 	ldw	r2,4(r2)
 4041720:	1080058b 	ldhu	r2,22(r2)
 4041724:	10bfffcc 	andi	r2,r2,65535
 4041728:	10a0001c 	xori	r2,r2,32768
 404172c:	10a00004 	addi	r2,r2,-32768
 4041730:	1004803a 	cmplt	r2,r2,zero
 4041734:	10000d1e 	bne	r2,zero,404176c <md_fgetc+0xa8>
   {
      if (vfd->file->name[0] == 'm')   /* memory device */
 4041738:	e0bffe17 	ldw	r2,-8(fp)
 404173c:	10800117 	ldw	r2,4(r2)
 4041740:	10800103 	ldbu	r2,4(r2)
 4041744:	10803fcc 	andi	r2,r2,255
 4041748:	1080201c 	xori	r2,r2,128
 404174c:	10bfe004 	addi	r2,r2,-128
 4041750:	10801b58 	cmpnei	r2,r2,109
 4041754:	1000051e 	bne	r2,zero,404176c <md_fgetc+0xa8>
         retval = (int)(*vfd->cmploc) & 0xFF ;
 4041758:	e0bffe17 	ldw	r2,-8(fp)
 404175c:	10800217 	ldw	r2,8(r2)
 4041760:	10800003 	ldbu	r2,0(r2)
 4041764:	10803fcc 	andi	r2,r2,255
 4041768:	e0bffc15 	stw	r2,-16(fp)
   }

   /* else for null device or files without data, 
      use whatever is in retval */

   vfd->cmploc++;    /* adjust location */
 404176c:	e0bffe17 	ldw	r2,-8(fp)
 4041770:	10800217 	ldw	r2,8(r2)
 4041774:	10c00044 	addi	r3,r2,1
 4041778:	e0bffe17 	ldw	r2,-8(fp)
 404177c:	10c00215 	stw	r3,8(r2)
   return retval;
 4041780:	e0bffc17 	ldw	r2,-16(fp)
 4041784:	e0bfff15 	stw	r2,-4(fp)
 4041788:	e0bfff17 	ldw	r2,-4(fp)
}
 404178c:	e037883a 	mov	sp,fp
 4041790:	df000017 	ldw	fp,0(sp)
 4041794:	dec00104 	addi	sp,sp,4
 4041798:	f800283a 	ret

0404179c <md_unlink>:
 * RETURNS: 
 */

int    
md_unlink(char * filename)
{
 404179c:	defffe04 	addi	sp,sp,-8
 40417a0:	df000115 	stw	fp,4(sp)
 40417a4:	df000104 	addi	fp,sp,4
 40417a8:	e13fff15 	stw	r4,-4(fp)
   USE_ARG(filename);     /* supress compiler warnings */
   return 0;
 40417ac:	0005883a 	mov	r2,zero
}
 40417b0:	e037883a 	mov	sp,fp
 40417b4:	df000017 	ldw	fp,0(sp)
 40417b8:	dec00104 	addi	sp,sp,4
 40417bc:	f800283a 	ret

040417c0 <parse_ipad>:

char *   
parse_ipad(ip_addr * ipout,   /* pointer to IP address to set */
   unsigned *  sbits,      /* default subnet bit number */
   char *   stringin)      /* buffer with ascii to parse */
{
 40417c0:	defff504 	addi	sp,sp,-44
 40417c4:	dfc00a15 	stw	ra,40(sp)
 40417c8:	df000915 	stw	fp,36(sp)
 40417cc:	df000904 	addi	fp,sp,36
 40417d0:	e13ffc15 	stw	r4,-16(fp)
 40417d4:	e17ffd15 	stw	r5,-12(fp)
 40417d8:	e1bffe15 	stw	r6,-8(fp)
   char *   cp;
   int   dots  =  0; /* periods imbedded in input string */
 40417dc:	e03ff915 	stw	zero,-28(fp)
   union   
   {
      u_char   c[4];
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";
 40417e0:	00810174 	movhi	r2,1029
 40417e4:	10b19604 	addi	r2,r2,-14760
 40417e8:	e0bff715 	stw	r2,-36(fp)

   cp = stringin;
 40417ec:	e0bffe17 	ldw	r2,-8(fp)
 40417f0:	e0bffa15 	stw	r2,-24(fp)
   while (*cp)
 40417f4:	00002606 	br	4041890 <parse_ipad+0xd0>
   {
      if (*cp > '9' || *cp < '.' || *cp == '/')
 40417f8:	e0bffa17 	ldw	r2,-24(fp)
 40417fc:	10800003 	ldbu	r2,0(r2)
 4041800:	10803fcc 	andi	r2,r2,255
 4041804:	1080201c 	xori	r2,r2,128
 4041808:	10bfe004 	addi	r2,r2,-128
 404180c:	10800e88 	cmpgei	r2,r2,58
 4041810:	10000e1e 	bne	r2,zero,404184c <parse_ipad+0x8c>
 4041814:	e0bffa17 	ldw	r2,-24(fp)
 4041818:	10800003 	ldbu	r2,0(r2)
 404181c:	10803fcc 	andi	r2,r2,255
 4041820:	1080201c 	xori	r2,r2,128
 4041824:	10bfe004 	addi	r2,r2,-128
 4041828:	10800b90 	cmplti	r2,r2,46
 404182c:	1000071e 	bne	r2,zero,404184c <parse_ipad+0x8c>
 4041830:	e0bffa17 	ldw	r2,-24(fp)
 4041834:	10800003 	ldbu	r2,0(r2)
 4041838:	10803fcc 	andi	r2,r2,255
 404183c:	1080201c 	xori	r2,r2,128
 4041840:	10bfe004 	addi	r2,r2,-128
 4041844:	10800bd8 	cmpnei	r2,r2,47
 4041848:	1000041e 	bne	r2,zero,404185c <parse_ipad+0x9c>
         return("all chars must be digits (0-9) or dots (.)");
 404184c:	00810174 	movhi	r2,1029
 4041850:	10b19f04 	addi	r2,r2,-14724
 4041854:	e0bfff15 	stw	r2,-4(fp)
 4041858:	00009a06 	br	4041ac4 <parse_ipad+0x304>
      if (*cp == '.')dots++;
 404185c:	e0bffa17 	ldw	r2,-24(fp)
 4041860:	10800003 	ldbu	r2,0(r2)
 4041864:	10803fcc 	andi	r2,r2,255
 4041868:	1080201c 	xori	r2,r2,128
 404186c:	10bfe004 	addi	r2,r2,-128
 4041870:	10800b98 	cmpnei	r2,r2,46
 4041874:	1000031e 	bne	r2,zero,4041884 <parse_ipad+0xc4>
 4041878:	e0bff917 	ldw	r2,-28(fp)
 404187c:	10800044 	addi	r2,r2,1
 4041880:	e0bff915 	stw	r2,-28(fp)
         cp++;
 4041884:	e0bffa17 	ldw	r2,-24(fp)
 4041888:	10800044 	addi	r2,r2,1
 404188c:	e0bffa15 	stw	r2,-24(fp)
      u_long   l;
   } retval;
   char *   toobig   = "each number must be less than 255";

   cp = stringin;
   while (*cp)
 4041890:	e0bffa17 	ldw	r2,-24(fp)
 4041894:	10800003 	ldbu	r2,0(r2)
 4041898:	10803fcc 	andi	r2,r2,255
 404189c:	1080201c 	xori	r2,r2,128
 40418a0:	10bfe004 	addi	r2,r2,-128
 40418a4:	1004c03a 	cmpne	r2,r2,zero
 40418a8:	103fd31e 	bne	r2,zero,40417f8 <parse_ipad+0x38>
         return("all chars must be digits (0-9) or dots (.)");
      if (*cp == '.')dots++;
         cp++;
   }

   if ( dots < 1 || dots > 3 )
 40418ac:	e0bff917 	ldw	r2,-28(fp)
 40418b0:	10800050 	cmplti	r2,r2,1
 40418b4:	1000031e 	bne	r2,zero,40418c4 <parse_ipad+0x104>
 40418b8:	e0bff917 	ldw	r2,-28(fp)
 40418bc:	10800110 	cmplti	r2,r2,4
 40418c0:	1000041e 	bne	r2,zero,40418d4 <parse_ipad+0x114>
      return("string must contain 1 - 3 dots (.)");
 40418c4:	00810174 	movhi	r2,1029
 40418c8:	10b1aa04 	addi	r2,r2,-14680
 40418cc:	e0bfff15 	stw	r2,-4(fp)
 40418d0:	00007c06 	br	4041ac4 <parse_ipad+0x304>

   cp = stringin;
 40418d4:	e0bffe17 	ldw	r2,-8(fp)
 40418d8:	e0bffa15 	stw	r2,-24(fp)
   if ((number = atoi(cp)) > 255)   /* set net number */
 40418dc:	e13ffa17 	ldw	r4,-24(fp)
 40418e0:	4045e5c0 	call	4045e5c <atoi>
 40418e4:	e0bff815 	stw	r2,-32(fp)
 40418e8:	e0bff817 	ldw	r2,-32(fp)
 40418ec:	10804010 	cmplti	r2,r2,256
 40418f0:	1000031e 	bne	r2,zero,4041900 <parse_ipad+0x140>
      return(toobig);
 40418f4:	e0bff717 	ldw	r2,-36(fp)
 40418f8:	e0bfff15 	stw	r2,-4(fp)
 40418fc:	00007106 	br	4041ac4 <parse_ipad+0x304>

   retval.c[0] = (u_char)number;
 4041900:	e0bff817 	ldw	r2,-32(fp)
 4041904:	e0bffb05 	stb	r2,-20(fp)

   while (*cp != '.')cp++; /* find dot (end of number) */
 4041908:	00000306 	br	4041918 <parse_ipad+0x158>
 404190c:	e0bffa17 	ldw	r2,-24(fp)
 4041910:	10800044 	addi	r2,r2,1
 4041914:	e0bffa15 	stw	r2,-24(fp)
 4041918:	e0bffa17 	ldw	r2,-24(fp)
 404191c:	10800003 	ldbu	r2,0(r2)
 4041920:	10803fcc 	andi	r2,r2,255
 4041924:	1080201c 	xori	r2,r2,128
 4041928:	10bfe004 	addi	r2,r2,-128
 404192c:	10800b98 	cmpnei	r2,r2,46
 4041930:	103ff61e 	bne	r2,zero,404190c <parse_ipad+0x14c>
      cp++;             /* point past dot */
 4041934:	e0bffa17 	ldw	r2,-24(fp)
 4041938:	10800044 	addi	r2,r2,1
 404193c:	e0bffa15 	stw	r2,-24(fp)

   if (dots == 1 || dots == 2) retval.c[1] = 0;
 4041940:	e0bff917 	ldw	r2,-28(fp)
 4041944:	10800060 	cmpeqi	r2,r2,1
 4041948:	1000031e 	bne	r2,zero,4041958 <parse_ipad+0x198>
 404194c:	e0bff917 	ldw	r2,-28(fp)
 4041950:	10800098 	cmpnei	r2,r2,2
 4041954:	1000021e 	bne	r2,zero,4041960 <parse_ipad+0x1a0>
 4041958:	e03ffb45 	stb	zero,-19(fp)
 404195c:	00001906 	br	40419c4 <parse_ipad+0x204>
      else
   {
      number = atoi(cp);
 4041960:	e13ffa17 	ldw	r4,-24(fp)
 4041964:	4045e5c0 	call	4045e5c <atoi>
 4041968:	e0bff815 	stw	r2,-32(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
 404196c:	00000306 	br	404197c <parse_ipad+0x1bc>
 4041970:	e0bffa17 	ldw	r2,-24(fp)
 4041974:	10800044 	addi	r2,r2,1
 4041978:	e0bffa15 	stw	r2,-24(fp)
 404197c:	e0bffa17 	ldw	r2,-24(fp)
 4041980:	10800003 	ldbu	r2,0(r2)
 4041984:	10803fcc 	andi	r2,r2,255
 4041988:	1080201c 	xori	r2,r2,128
 404198c:	10bfe004 	addi	r2,r2,-128
 4041990:	10800b98 	cmpnei	r2,r2,46
 4041994:	103ff61e 	bne	r2,zero,4041970 <parse_ipad+0x1b0>
         cp++;             /* point past dot */
 4041998:	e0bffa17 	ldw	r2,-24(fp)
 404199c:	10800044 	addi	r2,r2,1
 40419a0:	e0bffa15 	stw	r2,-24(fp)
      if (number > 255) return(toobig);
 40419a4:	e0bff817 	ldw	r2,-32(fp)
 40419a8:	10804010 	cmplti	r2,r2,256
 40419ac:	1000031e 	bne	r2,zero,40419bc <parse_ipad+0x1fc>
 40419b0:	e0bff717 	ldw	r2,-36(fp)
 40419b4:	e0bfff15 	stw	r2,-4(fp)
 40419b8:	00004206 	br	4041ac4 <parse_ipad+0x304>
         retval.c[1] = (u_char)number;
 40419bc:	e0bff817 	ldw	r2,-32(fp)
 40419c0:	e0bffb45 	stb	r2,-19(fp)
   }

   if (dots == 1) retval.c[2] = 0;
 40419c4:	e0bff917 	ldw	r2,-28(fp)
 40419c8:	10800058 	cmpnei	r2,r2,1
 40419cc:	1000021e 	bne	r2,zero,40419d8 <parse_ipad+0x218>
 40419d0:	e03ffb85 	stb	zero,-18(fp)
 40419d4:	00001906 	br	4041a3c <parse_ipad+0x27c>
      else
   {
      number = atoi(cp);
 40419d8:	e13ffa17 	ldw	r4,-24(fp)
 40419dc:	4045e5c0 	call	4045e5c <atoi>
 40419e0:	e0bff815 	stw	r2,-32(fp)
      while (*cp != '.')cp++; /* find dot (end of number) */
 40419e4:	00000306 	br	40419f4 <parse_ipad+0x234>
 40419e8:	e0bffa17 	ldw	r2,-24(fp)
 40419ec:	10800044 	addi	r2,r2,1
 40419f0:	e0bffa15 	stw	r2,-24(fp)
 40419f4:	e0bffa17 	ldw	r2,-24(fp)
 40419f8:	10800003 	ldbu	r2,0(r2)
 40419fc:	10803fcc 	andi	r2,r2,255
 4041a00:	1080201c 	xori	r2,r2,128
 4041a04:	10bfe004 	addi	r2,r2,-128
 4041a08:	10800b98 	cmpnei	r2,r2,46
 4041a0c:	103ff61e 	bne	r2,zero,40419e8 <parse_ipad+0x228>
         cp++;             /* point past dot */
 4041a10:	e0bffa17 	ldw	r2,-24(fp)
 4041a14:	10800044 	addi	r2,r2,1
 4041a18:	e0bffa15 	stw	r2,-24(fp)
      if (number > 255) return(toobig);
 4041a1c:	e0bff817 	ldw	r2,-32(fp)
 4041a20:	10804010 	cmplti	r2,r2,256
 4041a24:	1000031e 	bne	r2,zero,4041a34 <parse_ipad+0x274>
 4041a28:	e0bff717 	ldw	r2,-36(fp)
 4041a2c:	e0bfff15 	stw	r2,-4(fp)
 4041a30:	00002406 	br	4041ac4 <parse_ipad+0x304>
         retval.c[2] = (u_char)number;
 4041a34:	e0bff817 	ldw	r2,-32(fp)
 4041a38:	e0bffb85 	stb	r2,-18(fp)
   }

   if ((number = atoi(cp)) > 255)
 4041a3c:	e13ffa17 	ldw	r4,-24(fp)
 4041a40:	4045e5c0 	call	4045e5c <atoi>
 4041a44:	e0bff815 	stw	r2,-32(fp)
 4041a48:	e0bff817 	ldw	r2,-32(fp)
 4041a4c:	10804010 	cmplti	r2,r2,256
 4041a50:	1000031e 	bne	r2,zero,4041a60 <parse_ipad+0x2a0>
      return(toobig);
 4041a54:	e0bff717 	ldw	r2,-36(fp)
 4041a58:	e0bfff15 	stw	r2,-4(fp)
 4041a5c:	00001906 	br	4041ac4 <parse_ipad+0x304>
   retval.c[3] = (u_char)number;
 4041a60:	e0bff817 	ldw	r2,-32(fp)
 4041a64:	e0bffbc5 	stb	r2,-17(fp)

   if (retval.c[0] < 128) *sbits = 8;
 4041a68:	e0bffb03 	ldbu	r2,-20(fp)
 4041a6c:	10803fcc 	andi	r2,r2,255
 4041a70:	10802028 	cmpgeui	r2,r2,128
 4041a74:	1000041e 	bne	r2,zero,4041a88 <parse_ipad+0x2c8>
 4041a78:	e0fffd17 	ldw	r3,-12(fp)
 4041a7c:	00800204 	movi	r2,8
 4041a80:	18800015 	stw	r2,0(r3)
 4041a84:	00000b06 	br	4041ab4 <parse_ipad+0x2f4>
      else if(retval.c[0] < 192) *sbits = 16;
 4041a88:	e0bffb03 	ldbu	r2,-20(fp)
 4041a8c:	10803fcc 	andi	r2,r2,255
 4041a90:	10803028 	cmpgeui	r2,r2,192
 4041a94:	1000041e 	bne	r2,zero,4041aa8 <parse_ipad+0x2e8>
 4041a98:	e0fffd17 	ldw	r3,-12(fp)
 4041a9c:	00800404 	movi	r2,16
 4041aa0:	18800015 	stw	r2,0(r3)
 4041aa4:	00000306 	br	4041ab4 <parse_ipad+0x2f4>
      else *sbits = 24;
 4041aa8:	e0fffd17 	ldw	r3,-12(fp)
 4041aac:	00800604 	movi	r2,24
 4041ab0:	18800015 	stw	r2,0(r3)

      *ipout = retval.l;      /* everything went OK, return number */
 4041ab4:	e0fffb17 	ldw	r3,-20(fp)
 4041ab8:	e0bffc17 	ldw	r2,-16(fp)
 4041abc:	10c00015 	stw	r3,0(r2)
   return(NULL);        /* return OK code (no error string) */
 4041ac0:	e03fff15 	stw	zero,-4(fp)
 4041ac4:	e0bfff17 	ldw	r2,-4(fp)
}
 4041ac8:	e037883a 	mov	sp,fp
 4041acc:	dfc00117 	ldw	ra,4(sp)
 4041ad0:	df000017 	ldw	fp,0(sp)
 4041ad4:	dec00204 	addi	sp,sp,8
 4041ad8:	f800283a 	ret

04041adc <inet_addr>:
 * RETURNS: u_long ipaddr
 */

u_long 
inet_addr(char FAR * str)
{
 4041adc:	defffa04 	addi	sp,sp,-24
 4041ae0:	dfc00515 	stw	ra,20(sp)
 4041ae4:	df000415 	stw	fp,16(sp)
 4041ae8:	df000404 	addi	fp,sp,16
 4041aec:	e13ffe15 	stw	r4,-8(fp)
    * we need to make the conversion. Usually this function will be 
    * used for debugging, so I think we can bear the STRCPY overhead.
    */
   static char nearBuf[30];

   strcpy((char FAR *)nearBuf,str);
 4041af0:	01010174 	movhi	r4,1029
 4041af4:	2103fc04 	addi	r4,r4,4080
 4041af8:	e17ffe17 	ldw	r5,-8(fp)
 4041afc:	40460e00 	call	40460e0 <strcpy>
   if ( parse_ipad(&ipaddr,&bits,nearBuf) == NULL )
 4041b00:	e17ffd04 	addi	r5,fp,-12
 4041b04:	e13ffc04 	addi	r4,fp,-16
 4041b08:	01810174 	movhi	r6,1029
 4041b0c:	3183fc04 	addi	r6,r6,4080
 4041b10:	40417c00 	call	40417c0 <parse_ipad>
 4041b14:	1004c03a 	cmpne	r2,r2,zero
 4041b18:	1000031e 	bne	r2,zero,4041b28 <inet_addr+0x4c>
   {
      return ipaddr ;
 4041b1c:	e0bffc17 	ldw	r2,-16(fp)
 4041b20:	e0bfff15 	stw	r2,-4(fp)
 4041b24:	00000106 	br	4041b2c <inet_addr+0x50>
   }
   else
   {
      return (u_long)NULL ;
 4041b28:	e03fff15 	stw	zero,-4(fp)
 4041b2c:	e0bfff17 	ldw	r2,-4(fp)
   }
}
 4041b30:	e037883a 	mov	sp,fp
 4041b34:	dfc00117 	ldw	ra,4(sp)
 4041b38:	df000017 	ldw	fp,0(sp)
 4041b3c:	dec00204 	addi	sp,sp,8
 4041b40:	f800283a 	ret

04041b44 <hextoa>:
 * RETURNS: character 0-9 or A-F
 */

char
hextoa(int val)
{
 4041b44:	defffd04 	addi	sp,sp,-12
 4041b48:	df000215 	stw	fp,8(sp)
 4041b4c:	df000204 	addi	fp,sp,8
 4041b50:	e13ffe15 	stw	r4,-8(fp)
   val &= 0x0f;
 4041b54:	e0bffe17 	ldw	r2,-8(fp)
 4041b58:	108003cc 	andi	r2,r2,15
 4041b5c:	e0bffe15 	stw	r2,-8(fp)
   if(val < 10)
 4041b60:	e0bffe17 	ldw	r2,-8(fp)
 4041b64:	10800288 	cmpgei	r2,r2,10
 4041b68:	1000071e 	bne	r2,zero,4041b88 <hextoa+0x44>
      return (char)(val + '0');
 4041b6c:	e0bffe17 	ldw	r2,-8(fp)
 4041b70:	10800c04 	addi	r2,r2,48
 4041b74:	10803fcc 	andi	r2,r2,255
 4041b78:	1080201c 	xori	r2,r2,128
 4041b7c:	10bfe004 	addi	r2,r2,-128
 4041b80:	e0bfff15 	stw	r2,-4(fp)
 4041b84:	00000606 	br	4041ba0 <hextoa+0x5c>
   else
      return (char)(val + 55);   /* converts 10-15 -> "A-F" */
 4041b88:	e0bffe17 	ldw	r2,-8(fp)
 4041b8c:	10800dc4 	addi	r2,r2,55
 4041b90:	10803fcc 	andi	r2,r2,255
 4041b94:	1080201c 	xori	r2,r2,128
 4041b98:	10bfe004 	addi	r2,r2,-128
 4041b9c:	e0bfff15 	stw	r2,-4(fp)
 4041ba0:	e0bfff17 	ldw	r2,-4(fp)
}
 4041ba4:	e037883a 	mov	sp,fp
 4041ba8:	df000017 	ldw	fp,0(sp)
 4041bac:	dec00104 	addi	sp,sp,4
 4041bb0:	f800283a 	ret

04041bb4 <inet_pton>:

char * pton_error = "";

int
inet_pton(int af, const char * src, void * dst)
{
 4041bb4:	defff704 	addi	sp,sp,-36
 4041bb8:	dfc00815 	stw	ra,32(sp)
 4041bbc:	df000715 	stw	fp,28(sp)
 4041bc0:	df000704 	addi	fp,sp,28
 4041bc4:	e13ffc15 	stw	r4,-16(fp)
 4041bc8:	e17ffd15 	stw	r5,-12(fp)
 4041bcc:	e1bffe15 	stw	r6,-8(fp)
   int            words;   /* count of words written to dest */
#endif

#if defined(IP_V4) || defined(MINI_IP)
   /* RFC 2133 wants us to support both types of address */
   if(af == AF_INET)    /* wants a v4 address */
 4041bd0:	e0bffc17 	ldw	r2,-16(fp)
 4041bd4:	10800098 	cmpnei	r2,r2,2
 4041bd8:	10001a1e 	bne	r2,zero,4041c44 <inet_pton+0x90>
   {
      u_long ip4addr;
      unsigned sbits;
      char * err;
      
      err = parse_ipad(&ip4addr, &sbits, (char *) src);
 4041bdc:	e13ffa04 	addi	r4,fp,-24
 4041be0:	e17ffb04 	addi	r5,fp,-20
 4041be4:	e1bffd17 	ldw	r6,-12(fp)
 4041be8:	40417c00 	call	40417c0 <parse_ipad>
 4041bec:	e0bff915 	stw	r2,-28(fp)
      if(err == NULL)
 4041bf0:	e0bff917 	ldw	r2,-28(fp)
 4041bf4:	1004c03a 	cmpne	r2,r2,zero
 4041bf8:	10000c1e 	bne	r2,zero,4041c2c <inet_pton+0x78>
      {
         /* copy the parsed address into caller's buffer, and 
          * return success
          */
         MEMCPY(dst, &ip4addr, sizeof (u_long));
 4041bfc:	e13ffe17 	ldw	r4,-8(fp)
 4041c00:	e0fffa04 	addi	r3,fp,-24
 4041c04:	18800003 	ldbu	r2,0(r3)
 4041c08:	20800005 	stb	r2,0(r4)
 4041c0c:	18800043 	ldbu	r2,1(r3)
 4041c10:	20800045 	stb	r2,1(r4)
 4041c14:	18800083 	ldbu	r2,2(r3)
 4041c18:	20800085 	stb	r2,2(r4)
 4041c1c:	188000c3 	ldbu	r2,3(r3)
 4041c20:	208000c5 	stb	r2,3(r4)
         return 0;
 4041c24:	e03fff15 	stw	zero,-4(fp)
 4041c28:	00000706 	br	4041c48 <inet_pton+0x94>
      }
      else
      {
         /* return failure */
         pton_error = "IPv4 address parse failure";
 4041c2c:	00810174 	movhi	r2,1029
 4041c30:	10b1b404 	addi	r2,r2,-14640
 4041c34:	d0a05115 	stw	r2,-32444(gp)
         return 1;
 4041c38:	00800044 	movi	r2,1
 4041c3c:	e0bfff15 	stw	r2,-4(fp)
 4041c40:	00000106 	br	4041c48 <inet_pton+0x94>
      pton_error = "too short - missing colon?";
      return 1;
   }
   
#endif /* IP_V6 */   
   return 0;
 4041c44:	e03fff15 	stw	zero,-4(fp)
 4041c48:	e0bfff17 	ldw	r2,-4(fp)
}
 4041c4c:	e037883a 	mov	sp,fp
 4041c50:	dfc00117 	ldw	ra,4(sp)
 4041c54:	df000017 	ldw	fp,0(sp)
 4041c58:	dec00204 	addi	sp,sp,8
 4041c5c:	f800283a 	ret

04041c60 <inet_ntop>:
 * address output (40 bytes).
 */

const char *
inet_ntop(int af, const void *addr, char *str, size_t size)
{
 4041c60:	defff704 	addi	sp,sp,-36
 4041c64:	dfc00815 	stw	ra,32(sp)
 4041c68:	df000715 	stw	fp,28(sp)
 4041c6c:	df000704 	addi	fp,sp,28
 4041c70:	e13ffb15 	stw	r4,-20(fp)
 4041c74:	e17ffc15 	stw	r5,-16(fp)
 4041c78:	e1bffd15 	stw	r6,-12(fp)
 4041c7c:	e1fffe15 	stw	r7,-8(fp)
   char *cp;

#if defined(IP_V4) || defined(MINI_IP)
   if (af == AF_INET)
 4041c80:	e0bffb17 	ldw	r2,-20(fp)
 4041c84:	10800098 	cmpnei	r2,r2,2
 4041c88:	1000111e 	bne	r2,zero,4041cd0 <inet_ntop+0x70>
   {
      u_long   ip4addr;

      ip4addr = *(u_long*)addr;
 4041c8c:	e0bffc17 	ldw	r2,-16(fp)
 4041c90:	10800017 	ldw	r2,0(r2)
 4041c94:	e0bff915 	stw	r2,-28(fp)
      cp = print_ipad(ip4addr);
 4041c98:	e13ff917 	ldw	r4,-28(fp)
 4041c9c:	4020c580 	call	4020c58 <print_ipad>
 4041ca0:	e0bffa15 	stw	r2,-24(fp)
      if (strlen(cp) < size)
 4041ca4:	e13ffa17 	ldw	r4,-24(fp)
 4041ca8:	40029d00 	call	40029d0 <strlen>
 4041cac:	1007883a 	mov	r3,r2
 4041cb0:	e0bffe17 	ldw	r2,-8(fp)
 4041cb4:	1880062e 	bgeu	r3,r2,4041cd0 <inet_ntop+0x70>
      {
         strcpy(str, cp);
 4041cb8:	e13ffd17 	ldw	r4,-12(fp)
 4041cbc:	e17ffa17 	ldw	r5,-24(fp)
 4041cc0:	40460e00 	call	40460e0 <strcpy>
         return (str);
 4041cc4:	e0bffd17 	ldw	r2,-12(fp)
 4041cc8:	e0bfff15 	stw	r2,-4(fp)
 4041ccc:	00000106 	br	4041cd4 <inet_ntop+0x74>
         return (str);
      }
   }
#endif

   return ((const char *)NULL);
 4041cd0:	e03fff15 	stw	zero,-4(fp)
 4041cd4:	e0bfff17 	ldw	r2,-4(fp)
}
 4041cd8:	e037883a 	mov	sp,fp
 4041cdc:	dfc00117 	ldw	ra,4(sp)
 4041ce0:	df000017 	ldw	fp,0(sp)
 4041ce4:	dec00204 	addi	sp,sp,8
 4041ce8:	f800283a 	ret

04041cec <print46_addr>:
 *
 * RETURNS: Pointer to string with the address in readable format.
 */

char * print46_addr(struct sockaddr *ipaddr)
{
 4041cec:	defffb04 	addi	sp,sp,-20
 4041cf0:	dfc00415 	stw	ra,16(sp)
 4041cf4:	df000315 	stw	fp,12(sp)
 4041cf8:	df000304 	addi	fp,sp,12
 4041cfc:	e13ffe15 	stw	r4,-8(fp)
   if (ipaddr->sa_family == AF_INET)
 4041d00:	e0bffe17 	ldw	r2,-8(fp)
 4041d04:	1080000b 	ldhu	r2,0(r2)
 4041d08:	10bfffcc 	andi	r2,r2,65535
 4041d0c:	10800098 	cmpnei	r2,r2,2
 4041d10:	1000071e 	bne	r2,zero,4041d30 <print46_addr+0x44>
   {
      struct sockaddr_in * addr = (struct sockaddr_in *)ipaddr;
 4041d14:	e0bffe17 	ldw	r2,-8(fp)
 4041d18:	e0bffd15 	stw	r2,-12(fp)
      return print_ipad(addr->sin_addr.s_addr);
 4041d1c:	e0bffd17 	ldw	r2,-12(fp)
 4041d20:	11000117 	ldw	r4,4(r2)
 4041d24:	4020c580 	call	4020c58 <print_ipad>
 4041d28:	e0bfff15 	stw	r2,-4(fp)
 4041d2c:	00000106 	br	4041d34 <print46_addr+0x48>
      static char namebuf[46];  /* max len of IPv6 addr */
      return (char *)inet_ntop(AF_INET6,&addr->sin6_addr, namebuf, sizeof(namebuf));
   }
#endif

   return NULL;
 4041d30:	e03fff15 	stw	zero,-4(fp)
 4041d34:	e0bfff17 	ldw	r2,-4(fp)
}
 4041d38:	e037883a 	mov	sp,fp
 4041d3c:	dfc00117 	ldw	ra,4(sp)
 4041d40:	df000017 	ldw	fp,0(sp)
 4041d44:	dec00204 	addi	sp,sp,8
 4041d48:	f800283a 	ret

04041d4c <inet46_addr>:
 *
 */

int 
inet46_addr(char * str, struct sockaddr *address)
{
 4041d4c:	defffb04 	addi	sp,sp,-20
 4041d50:	dfc00415 	stw	ra,16(sp)
 4041d54:	df000315 	stw	fp,12(sp)
 4041d58:	df000304 	addi	fp,sp,12
 4041d5c:	e13ffe15 	stw	r4,-8(fp)
 4041d60:	e17fff15 	stw	r5,-4(fp)
   /* Read the IPv4/IPv6 address */
   address->sa_family = AF_INET; /* assume IPv4 address by default */
 4041d64:	e0ffff17 	ldw	r3,-4(fp)
 4041d68:	00800084 	movi	r2,2
 4041d6c:	1880000d 	sth	r2,0(r3)

   if ((str[1] == '.') || (str[2] == '.') || (str[3] == '.'))
 4041d70:	e0bffe17 	ldw	r2,-8(fp)
 4041d74:	10800044 	addi	r2,r2,1
 4041d78:	10800003 	ldbu	r2,0(r2)
 4041d7c:	10803fcc 	andi	r2,r2,255
 4041d80:	1080201c 	xori	r2,r2,128
 4041d84:	10bfe004 	addi	r2,r2,-128
 4041d88:	10800ba0 	cmpeqi	r2,r2,46
 4041d8c:	1000101e 	bne	r2,zero,4041dd0 <inet46_addr+0x84>
 4041d90:	e0bffe17 	ldw	r2,-8(fp)
 4041d94:	10800084 	addi	r2,r2,2
 4041d98:	10800003 	ldbu	r2,0(r2)
 4041d9c:	10803fcc 	andi	r2,r2,255
 4041da0:	1080201c 	xori	r2,r2,128
 4041da4:	10bfe004 	addi	r2,r2,-128
 4041da8:	10800ba0 	cmpeqi	r2,r2,46
 4041dac:	1000081e 	bne	r2,zero,4041dd0 <inet46_addr+0x84>
 4041db0:	e0bffe17 	ldw	r2,-8(fp)
 4041db4:	108000c4 	addi	r2,r2,3
 4041db8:	10800003 	ldbu	r2,0(r2)
 4041dbc:	10803fcc 	andi	r2,r2,255
 4041dc0:	1080201c 	xori	r2,r2,128
 4041dc4:	10bfe004 	addi	r2,r2,-128
 4041dc8:	10800b98 	cmpnei	r2,r2,46
 4041dcc:	10000a1e 	bne	r2,zero,4041df8 <inet46_addr+0xac>
   {
      struct sockaddr_in *addr = (struct sockaddr_in *)address;
 4041dd0:	e0bfff17 	ldw	r2,-4(fp)
 4041dd4:	e0bffd15 	stw	r2,-12(fp)
      addr->sin_addr.s_addr = inet_addr(str);
 4041dd8:	e13ffe17 	ldw	r4,-8(fp)
 4041ddc:	4041adc0 	call	4041adc <inet_addr>
 4041de0:	1007883a 	mov	r3,r2
 4041de4:	e0bffd17 	ldw	r2,-12(fp)
 4041de8:	10c00115 	stw	r3,4(r2)
      addr->sin_family = AF_INET;
 4041dec:	e0fffd17 	ldw	r3,-12(fp)
 4041df0:	00800084 	movi	r2,2
 4041df4:	1880000d 	sth	r2,0(r3)
      inet_pton(AF_INET6, str, &addr->sin6_addr);
      addr->sin6_family = AF_INET6;
   }
#endif

   return 0;
 4041df8:	0005883a 	mov	r2,zero
}
 4041dfc:	e037883a 	mov	sp,fp
 4041e00:	dfc00117 	ldw	ra,4(sp)
 4041e04:	df000017 	ldw	fp,0(sp)
 4041e08:	dec00204 	addi	sp,sp,8
 4041e0c:	f800283a 	ret

04041e10 <inet_setport>:
 *
 * RETURNS: -
 */

void inet_setport(struct sockaddr *addr,int port) 
{
 4041e10:	defffc04 	addi	sp,sp,-16
 4041e14:	df000315 	stw	fp,12(sp)
 4041e18:	df000304 	addi	fp,sp,12
 4041e1c:	e13ffe15 	stw	r4,-8(fp)
 4041e20:	e17fff15 	stw	r5,-4(fp)
   if (addr->sa_family == AF_INET)
 4041e24:	e0bffe17 	ldw	r2,-8(fp)
 4041e28:	1080000b 	ldhu	r2,0(r2)
 4041e2c:	10bfffcc 	andi	r2,r2,65535
 4041e30:	10800098 	cmpnei	r2,r2,2
 4041e34:	10000f1e 	bne	r2,zero,4041e74 <inet_setport+0x64>
   {
      struct sockaddr_in *si = (struct sockaddr_in *)addr;
 4041e38:	e0bffe17 	ldw	r2,-8(fp)
 4041e3c:	e0bffd15 	stw	r2,-12(fp)
      si->sin_port = htons(port);  
 4041e40:	e0bfff17 	ldw	r2,-4(fp)
 4041e44:	1005d23a 	srai	r2,r2,8
 4041e48:	10803fcc 	andi	r2,r2,255
 4041e4c:	1009883a 	mov	r4,r2
 4041e50:	e0bfff17 	ldw	r2,-4(fp)
 4041e54:	1004923a 	slli	r2,r2,8
 4041e58:	1007883a 	mov	r3,r2
 4041e5c:	00bfc004 	movi	r2,-256
 4041e60:	1884703a 	and	r2,r3,r2
 4041e64:	2084b03a 	or	r2,r4,r2
 4041e68:	1007883a 	mov	r3,r2
 4041e6c:	e0bffd17 	ldw	r2,-12(fp)
 4041e70:	10c0008d 	sth	r3,2(r2)
      struct sockaddr_in6 *si = (struct sockaddr_in6 *)addr;
      si->sin6_port = htons(port);
   }
#endif

}
 4041e74:	e037883a 	mov	sp,fp
 4041e78:	df000017 	ldw	fp,0(sp)
 4041e7c:	dec00104 	addi	sp,sp,4
 4041e80:	f800283a 	ret

04041e84 <convert_ip>:
 *Returns:
 *
 */

unsigned long convert_ip(const char *p)
{
 4041e84:	defff804 	addi	sp,sp,-32
 4041e88:	df000715 	stw	fp,28(sp)
 4041e8c:	df000704 	addi	fp,sp,28
 4041e90:	e13ffe15 	stw	r4,-8(fp)
   const char *cp = p;
 4041e94:	e0bffe17 	ldw	r2,-8(fp)
 4041e98:	e0bffc15 	stw	r2,-16(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
 4041e9c:	e0bffd04 	addi	r2,fp,-12
 4041ea0:	e0bffb15 	stw	r2,-20(fp)
   int n = 0;
 4041ea4:	e03ffa15 	stw	zero,-24(fp)
   unsigned short v = 0;
 4041ea8:	e03ff90d 	sth	zero,-28(fp)
   dw = 0;
 4041eac:	e03ffd15 	stw	zero,-12(fp)
   while(*cp)
 4041eb0:	00003306 	br	4041f80 <convert_ip+0xfc>
   {
      if( *cp == '.')
 4041eb4:	e0bffc17 	ldw	r2,-16(fp)
 4041eb8:	10800003 	ldbu	r2,0(r2)
 4041ebc:	10803fcc 	andi	r2,r2,255
 4041ec0:	1080201c 	xori	r2,r2,128
 4041ec4:	10bfe004 	addi	r2,r2,-128
 4041ec8:	10800b98 	cmpnei	r2,r2,46
 4041ecc:	1000101e 	bne	r2,zero,4041f10 <convert_ip+0x8c>
      {
         lpb[n] = (unsigned char) v;
 4041ed0:	e0bffa17 	ldw	r2,-24(fp)
 4041ed4:	1007883a 	mov	r3,r2
 4041ed8:	e0bffb17 	ldw	r2,-20(fp)
 4041edc:	1887883a 	add	r3,r3,r2
 4041ee0:	e0bff90b 	ldhu	r2,-28(fp)
 4041ee4:	18800005 	stb	r2,0(r3)
         v = 0;
 4041ee8:	e03ff90d 	sth	zero,-28(fp)
         n++;
 4041eec:	e0bffa17 	ldw	r2,-24(fp)
 4041ef0:	10800044 	addi	r2,r2,1
 4041ef4:	e0bffa15 	stw	r2,-24(fp)
         if(n > 3)
 4041ef8:	e0bffa17 	ldw	r2,-24(fp)
 4041efc:	10800110 	cmplti	r2,r2,4
 4041f00:	10001c1e 	bne	r2,zero,4041f74 <convert_ip+0xf0>
         {
            return dw;
 4041f04:	e0bffd17 	ldw	r2,-12(fp)
 4041f08:	e0bfff15 	stw	r2,-4(fp)
 4041f0c:	00002b06 	br	4041fbc <convert_ip+0x138>
         }
      }
      else if(((*cp >= '0') && (*cp <= '9')))
 4041f10:	e0bffc17 	ldw	r2,-16(fp)
 4041f14:	10800003 	ldbu	r2,0(r2)
 4041f18:	10803fcc 	andi	r2,r2,255
 4041f1c:	1080201c 	xori	r2,r2,128
 4041f20:	10bfe004 	addi	r2,r2,-128
 4041f24:	10800c10 	cmplti	r2,r2,48
 4041f28:	1000121e 	bne	r2,zero,4041f74 <convert_ip+0xf0>
 4041f2c:	e0bffc17 	ldw	r2,-16(fp)
 4041f30:	10800003 	ldbu	r2,0(r2)
 4041f34:	10803fcc 	andi	r2,r2,255
 4041f38:	1080201c 	xori	r2,r2,128
 4041f3c:	10bfe004 	addi	r2,r2,-128
 4041f40:	10800e88 	cmpgei	r2,r2,58
 4041f44:	10000b1e 	bne	r2,zero,4041f74 <convert_ip+0xf0>
      {
         v = (v * 10) + (*cp - '0');
 4041f48:	e0bff90b 	ldhu	r2,-28(fp)
 4041f4c:	108002a4 	muli	r2,r2,10
 4041f50:	1007883a 	mov	r3,r2
 4041f54:	e0bffc17 	ldw	r2,-16(fp)
 4041f58:	10800003 	ldbu	r2,0(r2)
 4041f5c:	10803fcc 	andi	r2,r2,255
 4041f60:	1080201c 	xori	r2,r2,128
 4041f64:	10bfe004 	addi	r2,r2,-128
 4041f68:	1885883a 	add	r2,r3,r2
 4041f6c:	10bff404 	addi	r2,r2,-48
 4041f70:	e0bff90d 	sth	r2,-28(fp)
      }
      cp++;
 4041f74:	e0bffc17 	ldw	r2,-16(fp)
 4041f78:	10800044 	addi	r2,r2,1
 4041f7c:	e0bffc15 	stw	r2,-16(fp)
   unsigned long dw;
   unsigned char *lpb = (unsigned char *) &dw;
   int n = 0;
   unsigned short v = 0;
   dw = 0;
   while(*cp)
 4041f80:	e0bffc17 	ldw	r2,-16(fp)
 4041f84:	10800003 	ldbu	r2,0(r2)
 4041f88:	10803fcc 	andi	r2,r2,255
 4041f8c:	1080201c 	xori	r2,r2,128
 4041f90:	10bfe004 	addi	r2,r2,-128
 4041f94:	1004c03a 	cmpne	r2,r2,zero
 4041f98:	103fc61e 	bne	r2,zero,4041eb4 <convert_ip+0x30>
      {
         v = (v * 10) + (*cp - '0');
      }
      cp++;
   }
   lpb[n] = (unsigned char) v;
 4041f9c:	e0bffa17 	ldw	r2,-24(fp)
 4041fa0:	1007883a 	mov	r3,r2
 4041fa4:	e0bffb17 	ldw	r2,-20(fp)
 4041fa8:	1887883a 	add	r3,r3,r2
 4041fac:	e0bff90b 	ldhu	r2,-28(fp)
 4041fb0:	18800005 	stb	r2,0(r3)
   return dw;
 4041fb4:	e0bffd17 	ldw	r2,-12(fp)
 4041fb8:	e0bfff15 	stw	r2,-4(fp)
 4041fbc:	e0bfff17 	ldw	r2,-4(fp)
}  /* convert_ip() */
 4041fc0:	e037883a 	mov	sp,fp
 4041fc4:	df000017 	ldw	fp,0(sp)
 4041fc8:	dec00104 	addi	sp,sp,4
 4041fcc:	f800283a 	ret

04041fd0 <tcp_cksum>:
 * RETURNS: 
 */

unshort
tcp_cksum(struct ip * pip)
{
 4041fd0:	defff804 	addi	sp,sp,-32
 4041fd4:	dfc00715 	stw	ra,28(sp)
 4041fd8:	df000615 	stw	fp,24(sp)
 4041fdc:	df000604 	addi	fp,sp,24
 4041fe0:	e13fff15 	stw	r4,-4(fp)
   unshort  oldsum;
   unshort  newsum;
   struct tcphdr * tp;

#ifdef MUTE_WARNS    /* stifle compiler warnings */
   tcpdata = (char *)NULL;
 4041fe4:	e03ffd15 	stw	zero,-12(fp)
#endif   /* MUTE_WARNS */

   IN_PROFILER(PF_TSUM, PF_ENTRY);

   oddchar = 0;
 4041fe8:	e03ffc05 	stb	zero,-16(fp)

   iphlen = (unshort)ip_hlen(pip);
 4041fec:	e0bfff17 	ldw	r2,-4(fp)
 4041ff0:	10800003 	ldbu	r2,0(r2)
 4041ff4:	10803fcc 	andi	r2,r2,255
 4041ff8:	108003cc 	andi	r2,r2,15
 4041ffc:	1085883a 	add	r2,r2,r2
 4042000:	1085883a 	add	r2,r2,r2
 4042004:	e0bffe8d 	sth	r2,-6(fp)
   tcplen = htons(pip->ip_len) - iphlen;
 4042008:	e0bfff17 	ldw	r2,-4(fp)
 404200c:	1080008b 	ldhu	r2,2(r2)
 4042010:	10bfffcc 	andi	r2,r2,65535
 4042014:	1004d23a 	srli	r2,r2,8
 4042018:	10803fcc 	andi	r2,r2,255
 404201c:	1009883a 	mov	r4,r2
 4042020:	e0bfff17 	ldw	r2,-4(fp)
 4042024:	1080008b 	ldhu	r2,2(r2)
 4042028:	10bfffcc 	andi	r2,r2,65535
 404202c:	1004923a 	slli	r2,r2,8
 4042030:	1007883a 	mov	r3,r2
 4042034:	00bfc004 	movi	r2,-256
 4042038:	1884703a 	and	r2,r3,r2
 404203c:	2084b03a 	or	r2,r4,r2
 4042040:	1007883a 	mov	r3,r2
 4042044:	e0bffe8b 	ldhu	r2,-6(fp)
 4042048:	1885c83a 	sub	r2,r3,r2
 404204c:	e0bffe0d 	sth	r2,-8(fp)

   tp = (struct tcphdr*)ip_data(pip);     /* get TCP header */
 4042050:	e0bfff17 	ldw	r2,-4(fp)
 4042054:	10800003 	ldbu	r2,0(r2)
 4042058:	10803fcc 	andi	r2,r2,255
 404205c:	108003cc 	andi	r2,r2,15
 4042060:	1085883a 	add	r2,r2,r2
 4042064:	1085883a 	add	r2,r2,r2
 4042068:	1007883a 	mov	r3,r2
 404206c:	e0bfff17 	ldw	r2,-4(fp)
 4042070:	1885883a 	add	r2,r3,r2
 4042074:	e0bffa15 	stw	r2,-24(fp)
   oldsum = tp->th_sum;       /* Save passed checksum */
 4042078:	e0bffa17 	ldw	r2,-24(fp)
 404207c:	1080040b 	ldhu	r2,16(r2)
 4042080:	e0bffb8d 	sth	r2,-18(fp)
    * cannot overflow a 16 bit field) and put them in the cksum field. 
    * We include the IP addresses by passing them to the lower level 
    * fast sum routine. This results in their values being factored into 
    * the sum and the cksum field contributes zero.
    */
   tp->th_sum = htons(tcplen + 6);
 4042084:	e0bffe0b 	ldhu	r2,-8(fp)
 4042088:	10800184 	addi	r2,r2,6
 404208c:	1005d23a 	srai	r2,r2,8
 4042090:	10803fcc 	andi	r2,r2,255
 4042094:	1009883a 	mov	r4,r2
 4042098:	e0bffe0b 	ldhu	r2,-8(fp)
 404209c:	10800184 	addi	r2,r2,6
 40420a0:	1004923a 	slli	r2,r2,8
 40420a4:	1007883a 	mov	r3,r2
 40420a8:	00bfc004 	movi	r2,-256
 40420ac:	1884703a 	and	r2,r3,r2
 40420b0:	2084b03a 	or	r2,r4,r2
 40420b4:	1007883a 	mov	r3,r2
 40420b8:	e0bffa17 	ldw	r2,-24(fp)
 40420bc:	10c0040d 	sth	r3,16(r2)

   /* zero pad odd sized packets for checksumming */
   if (tcplen & 1)   
 40420c0:	e0bffe0b 	ldhu	r2,-8(fp)
 40420c4:	1080004c 	andi	r2,r2,1
 40420c8:	10803fcc 	andi	r2,r2,255
 40420cc:	1005003a 	cmpeq	r2,r2,zero
 40420d0:	10000f1e 	bne	r2,zero,4042110 <tcp_cksum+0x140>
   {
      tcpdata = ((char*)pip) + iphlen + tcplen;    /* end of packet */
 40420d4:	e0bffe8b 	ldhu	r2,-6(fp)
 40420d8:	1007883a 	mov	r3,r2
 40420dc:	e0bfff17 	ldw	r2,-4(fp)
 40420e0:	1887883a 	add	r3,r3,r2
 40420e4:	e0bffe0b 	ldhu	r2,-8(fp)
 40420e8:	1885883a 	add	r2,r3,r2
 40420ec:	e0bffd15 	stw	r2,-12(fp)
      oddchar = *tcpdata;
 40420f0:	e0bffd17 	ldw	r2,-12(fp)
 40420f4:	10800003 	ldbu	r2,0(r2)
 40420f8:	e0bffc05 	stb	r2,-16(fp)
      *tcpdata = '\0';        /* zero out pad byte */
 40420fc:	e0bffd17 	ldw	r2,-12(fp)
 4042100:	10000005 	stb	zero,0(r2)
      tcplen++;               /* bump length to pass to cksum() */
 4042104:	e0bffe0b 	ldhu	r2,-8(fp)
 4042108:	10800044 	addi	r2,r2,1
 404210c:	e0bffe0d 	sth	r2,-8(fp)

   /* Pass a pointer to the beginning of the IP address area into the IP header
    * the the low level sum routine. Add the size of these two IP addresses to
    * the length, and convert the length to 16 bit words.
    */
   newsum = ~cksum(((char*)tp) - 8, (tcplen + 8) >> 1);
 4042110:	e0bffa17 	ldw	r2,-24(fp)
 4042114:	113ffe04 	addi	r4,r2,-8
 4042118:	e0bffe0b 	ldhu	r2,-8(fp)
 404211c:	10800204 	addi	r2,r2,8
 4042120:	1005d07a 	srai	r2,r2,1
 4042124:	100b883a 	mov	r5,r2
 4042128:	4020a000 	call	4020a00 <cksum>
 404212c:	0084303a 	nor	r2,zero,r2
 4042130:	e0bffb0d 	sth	r2,-20(fp)

   /* If the old checksum is 0xffff, but the actual checksum is 0x0000,
    * declare that to be a match.
    */
   if ((newsum != oldsum) && (oldsum == 0xffff) && (newsum == 0x0000))
 4042134:	e0fffb0b 	ldhu	r3,-20(fp)
 4042138:	e0bffb8b 	ldhu	r2,-18(fp)
 404213c:	18800826 	beq	r3,r2,4042160 <tcp_cksum+0x190>
 4042140:	e0fffb8b 	ldhu	r3,-18(fp)
 4042144:	00bfffd4 	movui	r2,65535
 4042148:	1880051e 	bne	r3,r2,4042160 <tcp_cksum+0x190>
 404214c:	e0bffb0b 	ldhu	r2,-20(fp)
 4042150:	1004c03a 	cmpne	r2,r2,zero
 4042154:	1000021e 	bne	r2,zero,4042160 <tcp_cksum+0x190>
      newsum = 0xffff;
 4042158:	00bfffc4 	movi	r2,-1
 404215c:	e0bffb0d 	sth	r2,-20(fp)

   /* restore what we clobbered */
   tp->th_sum = oldsum;       /* put back passed checksum */
 4042160:	e0fffa17 	ldw	r3,-24(fp)
 4042164:	e0bffb8b 	ldhu	r2,-18(fp)
 4042168:	1880040d 	sth	r2,16(r3)
   if (oddchar)
 404216c:	e0bffc07 	ldb	r2,-16(fp)
 4042170:	1005003a 	cmpeq	r2,r2,zero
 4042174:	1000031e 	bne	r2,zero,4042184 <tcp_cksum+0x1b4>
      *tcpdata = oddchar;     /* restore odd byte if we zeroed it */
 4042178:	e0fffd17 	ldw	r3,-12(fp)
 404217c:	e0bffc03 	ldbu	r2,-16(fp)
 4042180:	18800005 	stb	r2,0(r3)

   IN_PROFILER(PF_TSUM, PF_EXIT);

   return newsum;
 4042184:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4042188:	e037883a 	mov	sp,fp
 404218c:	dfc00117 	ldw	ra,4(sp)
 4042190:	df000017 	ldw	fp,0(sp)
 4042194:	dec00204 	addi	sp,sp,8
 4042198:	f800283a 	ret

0404219c <in_pcballoc>:
 */

int
in_pcballoc(struct socket * so, 
   struct inpcb * head)
{
 404219c:	defffa04 	addi	sp,sp,-24
 40421a0:	dfc00515 	stw	ra,20(sp)
 40421a4:	df000415 	stw	fp,16(sp)
 40421a8:	df000404 	addi	fp,sp,16
 40421ac:	e13ffd15 	stw	r4,-12(fp)
 40421b0:	e17ffe15 	stw	r5,-8(fp)
   struct inpcb * inp;

   inp = INP_ALLOC (sizeof (*inp));
 40421b4:	01000b04 	movi	r4,44
 40421b8:	40265f80 	call	40265f8 <npalloc>
 40421bc:	e0bffc15 	stw	r2,-16(fp)
   if (inp == 0)
 40421c0:	e0bffc17 	ldw	r2,-16(fp)
 40421c4:	1004c03a 	cmpne	r2,r2,zero
 40421c8:	1000031e 	bne	r2,zero,40421d8 <in_pcballoc+0x3c>
      return ENOMEM;
 40421cc:	00800304 	movi	r2,12
 40421d0:	e0bfff15 	stw	r2,-4(fp)
 40421d4:	00001006 	br	4042218 <in_pcballoc+0x7c>
   inp->inp_head = head;
 40421d8:	e0fffc17 	ldw	r3,-16(fp)
 40421dc:	e0bffe17 	ldw	r2,-8(fp)
 40421e0:	18800215 	stw	r2,8(r3)
   inp->inp_socket = so;
 40421e4:	e0fffc17 	ldw	r3,-16(fp)
 40421e8:	e0bffd17 	ldw	r2,-12(fp)
 40421ec:	18800815 	stw	r2,32(r3)

   /* Set Path MTU to a very small default. It should get expanded 
    * later by v4 or v6 specific SYN code. We don't want it zero 
    * in case it doesn't get expanded promptly.
    */
   inp->inp_pmtu = 512;
 40421f0:	e0fffc17 	ldw	r3,-16(fp)
 40421f4:	00808004 	movi	r2,512
 40421f8:	18800615 	stw	r2,24(r3)
   insque(inp, head);
 40421fc:	e13ffc17 	ldw	r4,-16(fp)
 4042200:	e17ffe17 	ldw	r5,-8(fp)
 4042204:	40273380 	call	4027338 <insque>
   so->so_pcb = inp;
 4042208:	e0fffd17 	ldw	r3,-12(fp)
 404220c:	e0bffc17 	ldw	r2,-16(fp)
 4042210:	18800115 	stw	r2,4(r3)
   return 0;
 4042214:	e03fff15 	stw	zero,-4(fp)
 4042218:	e0bfff17 	ldw	r2,-4(fp)
}
 404221c:	e037883a 	mov	sp,fp
 4042220:	dfc00117 	ldw	ra,4(sp)
 4042224:	df000017 	ldw	fp,0(sp)
 4042228:	dec00204 	addi	sp,sp,8
 404222c:	f800283a 	ret

04042230 <in_pcbdetach>:
 * RETURNS: 
 */

void
in_pcbdetach(struct inpcb * inp)
{
 4042230:	defffc04 	addi	sp,sp,-16
 4042234:	dfc00315 	stw	ra,12(sp)
 4042238:	df000215 	stw	fp,8(sp)
 404223c:	df000204 	addi	fp,sp,8
 4042240:	e13fff15 	stw	r4,-4(fp)
   struct socket *   so =  inp->inp_socket;
 4042244:	e0bfff17 	ldw	r2,-4(fp)
 4042248:	10800817 	ldw	r2,32(r2)
 404224c:	e0bffe15 	stw	r2,-8(fp)

   so->so_pcb = 0;
 4042250:	e0bffe17 	ldw	r2,-8(fp)
 4042254:	10000115 	stw	zero,4(r2)
   sofree(so);
 4042258:	e13ffe17 	ldw	r4,-8(fp)
 404225c:	402a7000 	call	402a700 <sofree>
   remque(inp);
 4042260:	e13fff17 	ldw	r4,-4(fp)
 4042264:	40272c80 	call	40272c8 <remque>
   INP_FREE (inp);
 4042268:	e13fff17 	ldw	r4,-4(fp)
 404226c:	40266ec0 	call	40266ec <npfree>
}
 4042270:	e037883a 	mov	sp,fp
 4042274:	dfc00117 	ldw	ra,4(sp)
 4042278:	df000017 	ldw	fp,0(sp)
 404227c:	dec00204 	addi	sp,sp,8
 4042280:	f800283a 	ret

04042284 <in_pcbbind>:

int
in_pcbbind(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 4042284:	defff404 	addi	sp,sp,-48
 4042288:	dfc00b15 	stw	ra,44(sp)
 404228c:	df000a15 	stw	fp,40(sp)
 4042290:	df000a04 	addi	fp,sp,40
 4042294:	e13ffd15 	stw	r4,-12(fp)
 4042298:	e17ffe15 	stw	r5,-8(fp)
   struct socket *   so =  inp->inp_socket;
 404229c:	e0bffd17 	ldw	r2,-12(fp)
 40422a0:	10800817 	ldw	r2,32(r2)
 40422a4:	e0bffc15 	stw	r2,-16(fp)
   struct inpcb * head  =  inp->inp_head;
 40422a8:	e0bffd17 	ldw	r2,-12(fp)
 40422ac:	10800217 	ldw	r2,8(r2)
 40422b0:	e0bffb15 	stw	r2,-20(fp)
   struct sockaddr_in * sin;
   u_short  lport =  0;
 40422b4:	e03ff90d 	sth	zero,-28(fp)


   if (inp->inp_lport || inp->inp_laddr.s_addr != INADDR_ANY)
 40422b8:	e0bffd17 	ldw	r2,-12(fp)
 40422bc:	1080078b 	ldhu	r2,30(r2)
 40422c0:	10bfffcc 	andi	r2,r2,65535
 40422c4:	1004c03a 	cmpne	r2,r2,zero
 40422c8:	1000041e 	bne	r2,zero,40422dc <in_pcbbind+0x58>
 40422cc:	e0bffd17 	ldw	r2,-12(fp)
 40422d0:	10800417 	ldw	r2,16(r2)
 40422d4:	1005003a 	cmpeq	r2,r2,zero
 40422d8:	1000031e 	bne	r2,zero,40422e8 <in_pcbbind+0x64>
      return (EINVAL);
 40422dc:	00800584 	movi	r2,22
 40422e0:	e0bfff15 	stw	r2,-4(fp)
 40422e4:	00007606 	br	40424c0 <in_pcbbind+0x23c>
   if (nam == 0)
 40422e8:	e0bffe17 	ldw	r2,-8(fp)
 40422ec:	1005003a 	cmpeq	r2,r2,zero
 40422f0:	10003e1e 	bne	r2,zero,40423ec <in_pcbbind+0x168>
      goto noname;
   sin = mtod(nam, struct sockaddr_in *);
 40422f4:	e0bffe17 	ldw	r2,-8(fp)
 40422f8:	10800317 	ldw	r2,12(r2)
 40422fc:	e0bffa15 	stw	r2,-24(fp)
   /*
    * removed test here for "if (nam->m_len != sizeof (*sin))"
    * since it really complicatges supporting dual IPv4/v6, and 
    * the 2.0 stack now checks this in t_bind(). -JB-
    */
   if (sin->sin_addr.s_addr != INADDR_ANY) 
 4042300:	e0bffa17 	ldw	r2,-24(fp)
 4042304:	10800117 	ldw	r2,4(r2)
 4042308:	1005003a 	cmpeq	r2,r2,zero
 404230c:	10000a1e 	bne	r2,zero,4042338 <in_pcbbind+0xb4>
   {
      if (ip_mymach(sin->sin_addr.s_addr) != sin->sin_addr.s_addr)
 4042310:	e0bffa17 	ldw	r2,-24(fp)
 4042314:	11000117 	ldw	r4,4(r2)
 4042318:	403a4b00 	call	403a4b0 <ip_mymach>
 404231c:	1007883a 	mov	r3,r2
 4042320:	e0bffa17 	ldw	r2,-24(fp)
 4042324:	10800117 	ldw	r2,4(r2)
 4042328:	18800326 	beq	r3,r2,4042338 <in_pcbbind+0xb4>
      return (EADDRNOTAVAIL);
 404232c:	00801f44 	movi	r2,125
 4042330:	e0bfff15 	stw	r2,-4(fp)
 4042334:	00006206 	br	40424c0 <in_pcbbind+0x23c>
   }
   lport = sin->sin_port;
 4042338:	e0bffa17 	ldw	r2,-24(fp)
 404233c:	1080008b 	ldhu	r2,2(r2)
 4042340:	e0bff90d 	sth	r2,-28(fp)
   if (lport) 
 4042344:	e0bff90b 	ldhu	r2,-28(fp)
 4042348:	1005003a 	cmpeq	r2,r2,zero
 404234c:	1000231e 	bne	r2,zero,40423dc <in_pcbbind+0x158>
   {
      int   wild  =  0;
 4042350:	e03ff815 	stw	zero,-32(fp)

      /* even GROSSER, but this is the Internet */
      if ((so->so_options & SO_REUSEADDR) == 0 &&
 4042354:	e0bffc17 	ldw	r2,-16(fp)
 4042358:	10800417 	ldw	r2,16(r2)
 404235c:	1080010c 	andi	r2,r2,4
 4042360:	1004c03a 	cmpne	r2,r2,zero
 4042364:	10000e1e 	bne	r2,zero,40423a0 <in_pcbbind+0x11c>
 4042368:	e0bffc17 	ldw	r2,-16(fp)
 404236c:	10800217 	ldw	r2,8(r2)
 4042370:	1080010b 	ldhu	r2,4(r2)
 4042374:	10bfffcc 	andi	r2,r2,65535
 4042378:	1080010c 	andi	r2,r2,4
 404237c:	1005003a 	cmpeq	r2,r2,zero
 4042380:	1000051e 	bne	r2,zero,4042398 <in_pcbbind+0x114>
 4042384:	e0bffc17 	ldw	r2,-16(fp)
 4042388:	10800417 	ldw	r2,16(r2)
 404238c:	1080008c 	andi	r2,r2,2
 4042390:	1004c03a 	cmpne	r2,r2,zero
 4042394:	1000021e 	bne	r2,zero,40423a0 <in_pcbbind+0x11c>
          ((so->so_proto->pr_flags & PR_CONNREQUIRED) == 0 ||
          (so->so_options & SO_ACCEPTCONN) == 0))
      {
         wild = INPLOOKUP_WILDCARD;
 4042398:	00800044 	movi	r2,1
 404239c:	e0bff815 	stw	r2,-32(fp)
      }
      if (in_pcblookup(head,
 40423a0:	e0bffa17 	ldw	r2,-24(fp)
 40423a4:	11c00117 	ldw	r7,4(r2)
 40423a8:	e0bff90b 	ldhu	r2,-28(fp)
 40423ac:	d8800015 	stw	r2,0(sp)
 40423b0:	e0bff817 	ldw	r2,-32(fp)
 40423b4:	d8800115 	stw	r2,4(sp)
 40423b8:	e13ffb17 	ldw	r4,-20(fp)
 40423bc:	000b883a 	mov	r5,zero
 40423c0:	000d883a 	mov	r6,zero
 40423c4:	40428400 	call	4042840 <in_pcblookup>
 40423c8:	1005003a 	cmpeq	r2,r2,zero
 40423cc:	1000031e 	bne	r2,zero,40423dc <in_pcbbind+0x158>
          0L, 0, sin->sin_addr.s_addr, lport, wild))
      {
         return (EADDRINUSE);
 40423d0:	00801c04 	movi	r2,112
 40423d4:	e0bfff15 	stw	r2,-4(fp)
 40423d8:	00003906 	br	40424c0 <in_pcbbind+0x23c>
      }
   }
   inp->inp_laddr = sin->sin_addr;
 40423dc:	e0bffa17 	ldw	r2,-24(fp)
 40423e0:	10c00117 	ldw	r3,4(r2)
 40423e4:	e0bffd17 	ldw	r2,-12(fp)
 40423e8:	10c00415 	stw	r3,16(r2)
noname:
   if (lport == 0)
 40423ec:	e0bff90b 	ldhu	r2,-28(fp)
 40423f0:	1004c03a 	cmpne	r2,r2,zero
 40423f4:	10002e1e 	bne	r2,zero,40424b0 <in_pcbbind+0x22c>
   {
      do 
      {
         if (head->inp_lport++ < IPPORT_RESERVED ||
 40423f8:	e0bffb17 	ldw	r2,-20(fp)
 40423fc:	10c0078b 	ldhu	r3,30(r2)
 4042400:	18bfffcc 	andi	r2,r3,65535
 4042404:	10810030 	cmpltui	r2,r2,1024
 4042408:	1009883a 	mov	r4,r2
 404240c:	18800044 	addi	r2,r3,1
 4042410:	1007883a 	mov	r3,r2
 4042414:	e0bffb17 	ldw	r2,-20(fp)
 4042418:	10c0078d 	sth	r3,30(r2)
 404241c:	20803fcc 	andi	r2,r4,255
 4042420:	1004c03a 	cmpne	r2,r2,zero
 4042424:	1000051e 	bne	r2,zero,404243c <in_pcbbind+0x1b8>
 4042428:	e0bffb17 	ldw	r2,-20(fp)
 404242c:	1080078b 	ldhu	r2,30(r2)
 4042430:	10bfffcc 	andi	r2,r2,65535
 4042434:	1084e270 	cmpltui	r2,r2,5001
 4042438:	1000031e 	bne	r2,zero,4042448 <in_pcbbind+0x1c4>
             head->inp_lport > IPPORT_USERRESERVED)
         {
            head->inp_lport = IPPORT_RESERVED;
 404243c:	e0fffb17 	ldw	r3,-20(fp)
 4042440:	00810004 	movi	r2,1024
 4042444:	1880078d 	sth	r2,30(r3)
         }
         lport = htons(head->inp_lport);
 4042448:	e0bffb17 	ldw	r2,-20(fp)
 404244c:	1080078b 	ldhu	r2,30(r2)
 4042450:	10bfffcc 	andi	r2,r2,65535
 4042454:	1004d23a 	srli	r2,r2,8
 4042458:	10803fcc 	andi	r2,r2,255
 404245c:	1009883a 	mov	r4,r2
 4042460:	e0bffb17 	ldw	r2,-20(fp)
 4042464:	1080078b 	ldhu	r2,30(r2)
 4042468:	10bfffcc 	andi	r2,r2,65535
 404246c:	1004923a 	slli	r2,r2,8
 4042470:	1007883a 	mov	r3,r2
 4042474:	00bfc004 	movi	r2,-256
 4042478:	1884703a 	and	r2,r3,r2
 404247c:	2084b03a 	or	r2,r4,r2
 4042480:	e0bff90d 	sth	r2,-28(fp)
      } while(in_pcblookup(head, 0L, 0, inp->inp_laddr.s_addr, lport, 0));
 4042484:	e0bffd17 	ldw	r2,-12(fp)
 4042488:	11c00417 	ldw	r7,16(r2)
 404248c:	e0bff90b 	ldhu	r2,-28(fp)
 4042490:	d8800015 	stw	r2,0(sp)
 4042494:	d8000115 	stw	zero,4(sp)
 4042498:	e13ffb17 	ldw	r4,-20(fp)
 404249c:	000b883a 	mov	r5,zero
 40424a0:	000d883a 	mov	r6,zero
 40424a4:	40428400 	call	4042840 <in_pcblookup>
 40424a8:	1004c03a 	cmpne	r2,r2,zero
 40424ac:	103fd21e 	bne	r2,zero,40423f8 <in_pcbbind+0x174>
   }
   inp->inp_lport = lport;
 40424b0:	e0fffd17 	ldw	r3,-12(fp)
 40424b4:	e0bff90b 	ldhu	r2,-28(fp)
 40424b8:	1880078d 	sth	r2,30(r3)
   return (0);
 40424bc:	e03fff15 	stw	zero,-4(fp)
 40424c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40424c4:	e037883a 	mov	sp,fp
 40424c8:	dfc00117 	ldw	ra,4(sp)
 40424cc:	df000017 	ldw	fp,0(sp)
 40424d0:	dec00204 	addi	sp,sp,8
 40424d4:	f800283a 	ret

040424d8 <in_pcbconnect>:
 */

int
in_pcbconnect(struct inpcb * inp, 
   struct mbuf *  nam)
{
 40424d8:	defff504 	addi	sp,sp,-44
 40424dc:	dfc00a15 	stw	ra,40(sp)
 40424e0:	df000915 	stw	fp,36(sp)
 40424e4:	df000904 	addi	fp,sp,36
 40424e8:	e13ffd15 	stw	r4,-12(fp)
 40424ec:	e17ffe15 	stw	r5,-8(fp)
   unsigned long ifaddr;
   struct sockaddr_in * sin   =  mtod(nam,   struct sockaddr_in *);
 40424f0:	e0bffe17 	ldw	r2,-8(fp)
 40424f4:	10800317 	ldw	r2,12(r2)
 40424f8:	e0bffa15 	stw	r2,-24(fp)

   if (nam->m_len < sizeof (*sin))
 40424fc:	e0bffe17 	ldw	r2,-8(fp)
 4042500:	10800217 	ldw	r2,8(r2)
 4042504:	10800428 	cmpgeui	r2,r2,16
 4042508:	1000031e 	bne	r2,zero,4042518 <in_pcbconnect+0x40>
      return (EINVAL);
 404250c:	00800584 	movi	r2,22
 4042510:	e0bfff15 	stw	r2,-4(fp)
 4042514:	00006e06 	br	40426d0 <in_pcbconnect+0x1f8>
   if (sin->sin_family != AF_INET)
 4042518:	e0bffa17 	ldw	r2,-24(fp)
 404251c:	1080000b 	ldhu	r2,0(r2)
 4042520:	10bfffcc 	andi	r2,r2,65535
 4042524:	10a0001c 	xori	r2,r2,32768
 4042528:	10a00004 	addi	r2,r2,-32768
 404252c:	108000a0 	cmpeqi	r2,r2,2
 4042530:	1000031e 	bne	r2,zero,4042540 <in_pcbconnect+0x68>
      return (EAFNOSUPPORT);
 4042534:	00801a84 	movi	r2,106
 4042538:	e0bfff15 	stw	r2,-4(fp)
 404253c:	00006406 	br	40426d0 <in_pcbconnect+0x1f8>
   if (sin->sin_port == 0)
 4042540:	e0bffa17 	ldw	r2,-24(fp)
 4042544:	1080008b 	ldhu	r2,2(r2)
 4042548:	10bfffcc 	andi	r2,r2,65535
 404254c:	1004c03a 	cmpne	r2,r2,zero
 4042550:	1000031e 	bne	r2,zero,4042560 <in_pcbconnect+0x88>
      return (EADDRNOTAVAIL);
 4042554:	00801f44 	movi	r2,125
 4042558:	e0bfff15 	stw	r2,-4(fp)
 404255c:	00005c06 	br	40426d0 <in_pcbconnect+0x1f8>
    * use the primary local address.
    * If the supplied address is INADDR_BROADCAST,
    * and the primary interface supports broadcast,
    * choose the broadcast address for that interface.
    */
   if (sin->sin_addr.s_addr == INADDR_ANY)
 4042560:	e0bffa17 	ldw	r2,-24(fp)
 4042564:	10800117 	ldw	r2,4(r2)
 4042568:	1004c03a 	cmpne	r2,r2,zero
 404256c:	1000101e 	bne	r2,zero,40425b0 <in_pcbconnect+0xd8>
   {
      if (inp && inp->ifp)
 4042570:	e0bffd17 	ldw	r2,-12(fp)
 4042574:	1005003a 	cmpeq	r2,r2,zero
 4042578:	10000a1e 	bne	r2,zero,40425a4 <in_pcbconnect+0xcc>
 404257c:	e0bffd17 	ldw	r2,-12(fp)
 4042580:	10800a17 	ldw	r2,40(r2)
 4042584:	1005003a 	cmpeq	r2,r2,zero
 4042588:	1000061e 	bne	r2,zero,40425a4 <in_pcbconnect+0xcc>
         sin->sin_addr.s_addr = inp->ifp->n_ipaddr;
 404258c:	e0bffd17 	ldw	r2,-12(fp)
 4042590:	10800a17 	ldw	r2,40(r2)
 4042594:	10c00a17 	ldw	r3,40(r2)
 4042598:	e0bffa17 	ldw	r2,-24(fp)
 404259c:	10c00115 	stw	r3,4(r2)
 40425a0:	00000a06 	br	40425cc <in_pcbconnect+0xf4>
      else
         return (EADDRNOTAVAIL);
 40425a4:	00801f44 	movi	r2,125
 40425a8:	e0bfff15 	stw	r2,-4(fp)
 40425ac:	00004806 	br	40426d0 <in_pcbconnect+0x1f8>
   }
   else if (sin->sin_addr.s_addr == INADDR_BROADCAST)
 40425b0:	e0bffa17 	ldw	r2,-24(fp)
 40425b4:	10800117 	ldw	r2,4(r2)
 40425b8:	10bfffd8 	cmpnei	r2,r2,-1
 40425bc:	1000031e 	bne	r2,zero,40425cc <in_pcbconnect+0xf4>
      return (EADDRNOTAVAIL);
 40425c0:	00801f44 	movi	r2,125
 40425c4:	e0bfff15 	stw	r2,-4(fp)
 40425c8:	00004106 	br	40426d0 <in_pcbconnect+0x1f8>


   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 40425cc:	e0bffd17 	ldw	r2,-12(fp)
 40425d0:	10800417 	ldw	r2,16(r2)
 40425d4:	1004c03a 	cmpne	r2,r2,zero
 40425d8:	10000f1e 	bne	r2,zero,4042618 <in_pcbconnect+0x140>
   {
#ifdef MULTI_HOMED
      ip_addr hop1;     /* dummy for pass to iproute() */
      NET npnet;     /* the netport iface we can send on */
      /* call netport stack's IP routing */
      npnet = iproute(sin->sin_addr.s_addr, &hop1);
 40425dc:	e0bffa17 	ldw	r2,-24(fp)
 40425e0:	11000117 	ldw	r4,4(r2)
 40425e4:	e17ffc04 	addi	r5,fp,-16
 40425e8:	403a8140 	call	403a814 <iproute>
 40425ec:	e0bff915 	stw	r2,-28(fp)
      if (!npnet)
 40425f0:	e0bff917 	ldw	r2,-28(fp)
 40425f4:	1004c03a 	cmpne	r2,r2,zero
 40425f8:	1000031e 	bne	r2,zero,4042608 <in_pcbconnect+0x130>
         return EADDRNOTAVAIL;
 40425fc:	00801f44 	movi	r2,125
 4042600:	e0bfff15 	stw	r2,-4(fp)
 4042604:	00003206 	br	40426d0 <in_pcbconnect+0x1f8>
      ifaddr = npnet->n_ipaddr;  /* local address for this host */
 4042608:	e0bff917 	ldw	r2,-28(fp)
 404260c:	10800a17 	ldw	r2,40(r2)
 4042610:	e0bffb15 	stw	r2,-20(fp)
 4042614:	00000306 	br	4042624 <in_pcbconnect+0x14c>
#else    /* not netport MULTI_HOMED, use 0th (only) iface */
      ifaddr = nets[0]->n_ipaddr;
#endif   /* MULTI_HOMED */
   }
   else  /* inp->inp_laddr.s_addr != INADDR_ANY */
      ifaddr = inp->inp_laddr.s_addr;  /* use address passed */
 4042618:	e0bffd17 	ldw	r2,-12(fp)
 404261c:	10800417 	ldw	r2,16(r2)
 4042620:	e0bffb15 	stw	r2,-20(fp)

   if (in_pcblookup(inp->inp_head,
 4042624:	e0bffd17 	ldw	r2,-12(fp)
 4042628:	11000217 	ldw	r4,8(r2)
 404262c:	e0bffa17 	ldw	r2,-24(fp)
 4042630:	11400117 	ldw	r5,4(r2)
 4042634:	e0bffa17 	ldw	r2,-24(fp)
 4042638:	1080008b 	ldhu	r2,2(r2)
 404263c:	11bfffcc 	andi	r6,r2,65535
 4042640:	e0bffd17 	ldw	r2,-12(fp)
 4042644:	1080078b 	ldhu	r2,30(r2)
 4042648:	10bfffcc 	andi	r2,r2,65535
 404264c:	d8800015 	stw	r2,0(sp)
 4042650:	d8000115 	stw	zero,4(sp)
 4042654:	e1fffb17 	ldw	r7,-20(fp)
 4042658:	40428400 	call	4042840 <in_pcblookup>
 404265c:	1005003a 	cmpeq	r2,r2,zero
 4042660:	1000031e 	bne	r2,zero,4042670 <in_pcbconnect+0x198>
       sin->sin_port,
       ifaddr,
       inp->inp_lport,
       0))
   {
      return (EADDRINUSE);
 4042664:	00801c04 	movi	r2,112
 4042668:	e0bfff15 	stw	r2,-4(fp)
 404266c:	00001806 	br	40426d0 <in_pcbconnect+0x1f8>
   }
   if (inp->inp_laddr.s_addr == INADDR_ANY) 
 4042670:	e0bffd17 	ldw	r2,-12(fp)
 4042674:	10800417 	ldw	r2,16(r2)
 4042678:	1004c03a 	cmpne	r2,r2,zero
 404267c:	10000b1e 	bne	r2,zero,40426ac <in_pcbconnect+0x1d4>
   {
      if (inp->inp_lport == 0)
 4042680:	e0bffd17 	ldw	r2,-12(fp)
 4042684:	1080078b 	ldhu	r2,30(r2)
 4042688:	10bfffcc 	andi	r2,r2,65535
 404268c:	1004c03a 	cmpne	r2,r2,zero
 4042690:	1000031e 	bne	r2,zero,40426a0 <in_pcbconnect+0x1c8>
         (void)in_pcbbind(inp, (struct mbuf *)0);
 4042694:	e13ffd17 	ldw	r4,-12(fp)
 4042698:	000b883a 	mov	r5,zero
 404269c:	40422840 	call	4042284 <in_pcbbind>
      inp->inp_laddr.s_addr = ifaddr;
 40426a0:	e0fffd17 	ldw	r3,-12(fp)
 40426a4:	e0bffb17 	ldw	r2,-20(fp)
 40426a8:	18800415 	stw	r2,16(r3)
   }
   inp->inp_faddr = sin->sin_addr;
 40426ac:	e0bffa17 	ldw	r2,-24(fp)
 40426b0:	10c00117 	ldw	r3,4(r2)
 40426b4:	e0bffd17 	ldw	r2,-12(fp)
 40426b8:	10c00315 	stw	r3,12(r2)
   inp->inp_fport = sin->sin_port;
 40426bc:	e0bffa17 	ldw	r2,-24(fp)
 40426c0:	10c0008b 	ldhu	r3,2(r2)
 40426c4:	e0bffd17 	ldw	r2,-12(fp)
 40426c8:	10c0070d 	sth	r3,28(r2)
   return 0;
 40426cc:	e03fff15 	stw	zero,-4(fp)
 40426d0:	e0bfff17 	ldw	r2,-4(fp)
}
 40426d4:	e037883a 	mov	sp,fp
 40426d8:	dfc00117 	ldw	ra,4(sp)
 40426dc:	df000017 	ldw	fp,0(sp)
 40426e0:	dec00204 	addi	sp,sp,8
 40426e4:	f800283a 	ret

040426e8 <in_pcbdisconnect>:
 * RETURNS: 
 */

void
in_pcbdisconnect(struct inpcb * inp)
{
 40426e8:	defffd04 	addi	sp,sp,-12
 40426ec:	dfc00215 	stw	ra,8(sp)
 40426f0:	df000115 	stw	fp,4(sp)
 40426f4:	df000104 	addi	fp,sp,4
 40426f8:	e13fff15 	stw	r4,-4(fp)

   inp->inp_faddr.s_addr = INADDR_ANY;
 40426fc:	e0bfff17 	ldw	r2,-4(fp)
 4042700:	10000315 	stw	zero,12(r2)
   inp->inp_fport = 0;
 4042704:	e0bfff17 	ldw	r2,-4(fp)
 4042708:	1000070d 	sth	zero,28(r2)
   if (inp->inp_socket->so_state & SS_NOFDREF)
 404270c:	e0bfff17 	ldw	r2,-4(fp)
 4042710:	10800817 	ldw	r2,32(r2)
 4042714:	1080088b 	ldhu	r2,34(r2)
 4042718:	10bfffcc 	andi	r2,r2,65535
 404271c:	1080004c 	andi	r2,r2,1
 4042720:	10803fcc 	andi	r2,r2,255
 4042724:	1005003a 	cmpeq	r2,r2,zero
 4042728:	1000021e 	bne	r2,zero,4042734 <in_pcbdisconnect+0x4c>
      in_pcbdetach (inp);
 404272c:	e13fff17 	ldw	r4,-4(fp)
 4042730:	40422300 	call	4042230 <in_pcbdetach>
}
 4042734:	e037883a 	mov	sp,fp
 4042738:	dfc00117 	ldw	ra,4(sp)
 404273c:	df000017 	ldw	fp,0(sp)
 4042740:	dec00204 	addi	sp,sp,8
 4042744:	f800283a 	ret

04042748 <in_setsockaddr>:
 */

void
in_setsockaddr(struct inpcb * inp, 
   struct mbuf *  nam)
{
 4042748:	defffc04 	addi	sp,sp,-16
 404274c:	df000315 	stw	fp,12(sp)
 4042750:	df000304 	addi	fp,sp,12
 4042754:	e13ffe15 	stw	r4,-8(fp)
 4042758:	e17fff15 	stw	r5,-4(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 404275c:	e0ffff17 	ldw	r3,-4(fp)
 4042760:	00800404 	movi	r2,16
 4042764:	18800215 	stw	r2,8(r3)
   sin = mtod(nam, struct sockaddr_in *);
 4042768:	e0bfff17 	ldw	r2,-4(fp)
 404276c:	10800317 	ldw	r2,12(r2)
 4042770:	e0bffd15 	stw	r2,-12(fp)
   MEMSET(sin, 0, sizeof (*sin));
 4042774:	e0bffd17 	ldw	r2,-12(fp)
 4042778:	10000015 	stw	zero,0(r2)
 404277c:	10000115 	stw	zero,4(r2)
 4042780:	10000215 	stw	zero,8(r2)
 4042784:	10000315 	stw	zero,12(r2)
   sin->sin_family = AF_INET;
 4042788:	e0fffd17 	ldw	r3,-12(fp)
 404278c:	00800084 	movi	r2,2
 4042790:	1880000d 	sth	r2,0(r3)
   sin->sin_port = inp->inp_lport;
 4042794:	e0bffe17 	ldw	r2,-8(fp)
 4042798:	10c0078b 	ldhu	r3,30(r2)
 404279c:	e0bffd17 	ldw	r2,-12(fp)
 40427a0:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_laddr;
 40427a4:	e0bffe17 	ldw	r2,-8(fp)
 40427a8:	10c00417 	ldw	r3,16(r2)
 40427ac:	e0bffd17 	ldw	r2,-12(fp)
 40427b0:	10c00115 	stw	r3,4(r2)
}
 40427b4:	e037883a 	mov	sp,fp
 40427b8:	df000017 	ldw	fp,0(sp)
 40427bc:	dec00104 	addi	sp,sp,4
 40427c0:	f800283a 	ret

040427c4 <in_setpeeraddr>:

void
in_setpeeraddr(
   struct inpcb * inp,
   struct mbuf *  nam)
{
 40427c4:	defffc04 	addi	sp,sp,-16
 40427c8:	df000315 	stw	fp,12(sp)
 40427cc:	df000304 	addi	fp,sp,12
 40427d0:	e13ffe15 	stw	r4,-8(fp)
 40427d4:	e17fff15 	stw	r5,-4(fp)
   struct sockaddr_in * sin;

   nam->m_len = sizeof (*sin);
 40427d8:	e0ffff17 	ldw	r3,-4(fp)
 40427dc:	00800404 	movi	r2,16
 40427e0:	18800215 	stw	r2,8(r3)
   sin = mtod(nam, struct sockaddr_in *);
 40427e4:	e0bfff17 	ldw	r2,-4(fp)
 40427e8:	10800317 	ldw	r2,12(r2)
 40427ec:	e0bffd15 	stw	r2,-12(fp)
   MEMSET(sin, 0, sizeof (*sin));
 40427f0:	e0bffd17 	ldw	r2,-12(fp)
 40427f4:	10000015 	stw	zero,0(r2)
 40427f8:	10000115 	stw	zero,4(r2)
 40427fc:	10000215 	stw	zero,8(r2)
 4042800:	10000315 	stw	zero,12(r2)
   sin->sin_family = AF_INET;
 4042804:	e0fffd17 	ldw	r3,-12(fp)
 4042808:	00800084 	movi	r2,2
 404280c:	1880000d 	sth	r2,0(r3)
   sin->sin_port = inp->inp_fport;
 4042810:	e0bffe17 	ldw	r2,-8(fp)
 4042814:	10c0070b 	ldhu	r3,28(r2)
 4042818:	e0bffd17 	ldw	r2,-12(fp)
 404281c:	10c0008d 	sth	r3,2(r2)
   sin->sin_addr = inp->inp_faddr;
 4042820:	e0bffe17 	ldw	r2,-8(fp)
 4042824:	10c00317 	ldw	r3,12(r2)
 4042828:	e0bffd17 	ldw	r2,-12(fp)
 404282c:	10c00115 	stw	r3,4(r2)
}
 4042830:	e037883a 	mov	sp,fp
 4042834:	df000017 	ldw	fp,0(sp)
 4042838:	dec00104 	addi	sp,sp,4
 404283c:	f800283a 	ret

04042840 <in_pcblookup>:
   u_long   faddr, 
   unshort  xfport,
   u_long   laddr,
   unshort  xlport,
   int   flags)
{
 4042840:	defff404 	addi	sp,sp,-48
 4042844:	df000b15 	stw	fp,44(sp)
 4042848:	df000b04 	addi	fp,sp,44
 404284c:	e13ffa15 	stw	r4,-24(fp)
 4042850:	e17ffb15 	stw	r5,-20(fp)
 4042854:	e1fffd15 	stw	r7,-12(fp)
 4042858:	e0800117 	ldw	r2,4(fp)
 404285c:	e1bffc0d 	sth	r6,-16(fp)
 4042860:	e0bffe0d 	sth	r2,-8(fp)
   struct inpcb * inp, *   match =  0;
 4042864:	e03ff815 	stw	zero,-32(fp)
   unshort  fport =  xfport; 
 4042868:	e0bffc0b 	ldhu	r2,-16(fp)
 404286c:	e0bff78d 	sth	r2,-34(fp)
   unshort  lport =  xlport;
 4042870:	e0bffe0b 	ldhu	r2,-8(fp)
 4042874:	e0bff70d 	sth	r2,-36(fp)
   int   matchwild   =  3;
 4042878:	008000c4 	movi	r2,3
 404287c:	e0bff615 	stw	r2,-40(fp)
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 4042880:	e0bffa17 	ldw	r2,-24(fp)
 4042884:	10800017 	ldw	r2,0(r2)
 4042888:	e0bff915 	stw	r2,-28(fp)
 404288c:	00005006 	br	40429d0 <in_pcblookup+0x190>
   {
      if (inp->inp_lport != lport)
 4042890:	e0bff917 	ldw	r2,-28(fp)
 4042894:	1080078b 	ldhu	r2,30(r2)
 4042898:	10ffffcc 	andi	r3,r2,65535
 404289c:	e0bff70b 	ldhu	r2,-36(fp)
 40428a0:	1880481e 	bne	r3,r2,40429c4 <in_pcblookup+0x184>
         continue;

      /* Skip non IPv4 sockets */
      if(inp->inp_socket->so_domain != AF_INET)
 40428a4:	e0bff917 	ldw	r2,-28(fp)
 40428a8:	10800817 	ldw	r2,32(r2)
 40428ac:	10800517 	ldw	r2,20(r2)
 40428b0:	10800098 	cmpnei	r2,r2,2
 40428b4:	1000431e 	bne	r2,zero,40429c4 <in_pcblookup+0x184>
         continue;

      wildcard = 0;
 40428b8:	e03ff515 	stw	zero,-44(fp)
      if (inp->inp_laddr.s_addr != INADDR_ANY) 
 40428bc:	e0bff917 	ldw	r2,-28(fp)
 40428c0:	10800417 	ldw	r2,16(r2)
 40428c4:	1005003a 	cmpeq	r2,r2,zero
 40428c8:	10000c1e 	bne	r2,zero,40428fc <in_pcblookup+0xbc>
      {
         if (laddr == INADDR_ANY)
 40428cc:	e0bffd17 	ldw	r2,-12(fp)
 40428d0:	1004c03a 	cmpne	r2,r2,zero
 40428d4:	1000041e 	bne	r2,zero,40428e8 <in_pcblookup+0xa8>
            wildcard++;
 40428d8:	e0bff517 	ldw	r2,-44(fp)
 40428dc:	10800044 	addi	r2,r2,1
 40428e0:	e0bff515 	stw	r2,-44(fp)
 40428e4:	00000b06 	br	4042914 <in_pcblookup+0xd4>
         else if (inp->inp_laddr.s_addr != laddr)
 40428e8:	e0bff917 	ldw	r2,-28(fp)
 40428ec:	10c00417 	ldw	r3,16(r2)
 40428f0:	e0bffd17 	ldw	r2,-12(fp)
 40428f4:	1880331e 	bne	r3,r2,40429c4 <in_pcblookup+0x184>
            continue;
 40428f8:	00000606 	br	4042914 <in_pcblookup+0xd4>
      }
      else 
      {
         if (laddr != INADDR_ANY)
 40428fc:	e0bffd17 	ldw	r2,-12(fp)
 4042900:	1005003a 	cmpeq	r2,r2,zero
 4042904:	1000031e 	bne	r2,zero,4042914 <in_pcblookup+0xd4>
            wildcard++;
 4042908:	e0bff517 	ldw	r2,-44(fp)
 404290c:	10800044 	addi	r2,r2,1
 4042910:	e0bff515 	stw	r2,-44(fp)
      }
      if (inp->inp_faddr.s_addr != INADDR_ANY) 
 4042914:	e0bff917 	ldw	r2,-28(fp)
 4042918:	10800317 	ldw	r2,12(r2)
 404291c:	1005003a 	cmpeq	r2,r2,zero
 4042920:	1000111e 	bne	r2,zero,4042968 <in_pcblookup+0x128>
      {
         if (faddr == INADDR_ANY)
 4042924:	e0bffb17 	ldw	r2,-20(fp)
 4042928:	1004c03a 	cmpne	r2,r2,zero
 404292c:	1000041e 	bne	r2,zero,4042940 <in_pcblookup+0x100>
            wildcard++;
 4042930:	e0bff517 	ldw	r2,-44(fp)
 4042934:	10800044 	addi	r2,r2,1
 4042938:	e0bff515 	stw	r2,-44(fp)
 404293c:	00001006 	br	4042980 <in_pcblookup+0x140>
         else if (inp->inp_faddr.s_addr != faddr ||
 4042940:	e0bff917 	ldw	r2,-28(fp)
 4042944:	10c00317 	ldw	r3,12(r2)
 4042948:	e0bffb17 	ldw	r2,-20(fp)
 404294c:	18801d1e 	bne	r3,r2,40429c4 <in_pcblookup+0x184>
 4042950:	e0bff917 	ldw	r2,-28(fp)
 4042954:	1080070b 	ldhu	r2,28(r2)
 4042958:	10ffffcc 	andi	r3,r2,65535
 404295c:	e0bff78b 	ldhu	r2,-34(fp)
 4042960:	1880181e 	bne	r3,r2,40429c4 <in_pcblookup+0x184>
 4042964:	00000606 	br	4042980 <in_pcblookup+0x140>
         {
            continue;
         }
      } else 
      {
         if (faddr != INADDR_ANY)
 4042968:	e0bffb17 	ldw	r2,-20(fp)
 404296c:	1005003a 	cmpeq	r2,r2,zero
 4042970:	1000031e 	bne	r2,zero,4042980 <in_pcblookup+0x140>
            wildcard++;
 4042974:	e0bff517 	ldw	r2,-44(fp)
 4042978:	10800044 	addi	r2,r2,1
 404297c:	e0bff515 	stw	r2,-44(fp)
      }
      if (wildcard && (flags & INPLOOKUP_WILDCARD) == 0)
 4042980:	e0bff517 	ldw	r2,-44(fp)
 4042984:	1005003a 	cmpeq	r2,r2,zero
 4042988:	1000041e 	bne	r2,zero,404299c <in_pcblookup+0x15c>
 404298c:	e0800217 	ldw	r2,8(fp)
 4042990:	1080004c 	andi	r2,r2,1
 4042994:	1005003a 	cmpeq	r2,r2,zero
 4042998:	10000a1e 	bne	r2,zero,40429c4 <in_pcblookup+0x184>
         continue;
      if (wildcard < matchwild) 
 404299c:	e0fff517 	ldw	r3,-44(fp)
 40429a0:	e0bff617 	ldw	r2,-40(fp)
 40429a4:	1880070e 	bge	r3,r2,40429c4 <in_pcblookup+0x184>
      {
         match = inp;
 40429a8:	e0bff917 	ldw	r2,-28(fp)
 40429ac:	e0bff815 	stw	r2,-32(fp)
         matchwild = wildcard;
 40429b0:	e0bff517 	ldw	r2,-44(fp)
 40429b4:	e0bff615 	stw	r2,-40(fp)
         if (matchwild == 0)
 40429b8:	e0bff617 	ldw	r2,-40(fp)
 40429bc:	1005003a 	cmpeq	r2,r2,zero
 40429c0:	1000061e 	bne	r2,zero,40429dc <in_pcblookup+0x19c>
   unshort  fport =  xfport; 
   unshort  lport =  xlport;
   int   matchwild   =  3;
   int   wildcard;

   for (inp = head->inp_next; inp != head; inp = inp->inp_next) 
 40429c4:	e0bff917 	ldw	r2,-28(fp)
 40429c8:	10800017 	ldw	r2,0(r2)
 40429cc:	e0bff915 	stw	r2,-28(fp)
 40429d0:	e0fff917 	ldw	r3,-28(fp)
 40429d4:	e0bffa17 	ldw	r2,-24(fp)
 40429d8:	18bfad1e 	bne	r3,r2,4042890 <in_pcblookup+0x50>
         matchwild = wildcard;
         if (matchwild == 0)
            break;
      }
   }
   if (match == NULL)
 40429dc:	e0bff817 	ldw	r2,-32(fp)
 40429e0:	1004c03a 	cmpne	r2,r2,zero
 40429e4:	1000031e 	bne	r2,zero,40429f4 <in_pcblookup+0x1b4>
      return match;
 40429e8:	e0bff817 	ldw	r2,-32(fp)
 40429ec:	e0bfff15 	stw	r2,-4(fp)
 40429f0:	00002506 	br	4042a88 <in_pcblookup+0x248>

   if (head->inp_next == match)  /* got cache hit? */
 40429f4:	e0bffa17 	ldw	r2,-24(fp)
 40429f8:	10c00017 	ldw	r3,0(r2)
 40429fc:	e0bff817 	ldw	r2,-32(fp)
 4042a00:	1880041e 	bne	r3,r2,4042a14 <in_pcblookup+0x1d4>
   {
      inpcb_cachehits++;
 4042a04:	d0a85017 	ldw	r2,-24256(gp)
 4042a08:	10800044 	addi	r2,r2,1
 4042a0c:	d0a85015 	stw	r2,-24256(gp)
 4042a10:	00001b06 	br	4042a80 <in_pcblookup+0x240>
   }
   else
   {
      inpcb_cachemiss++;
 4042a14:	d0a85117 	ldw	r2,-24252(gp)
 4042a18:	10800044 	addi	r2,r2,1
 4042a1c:	d0a85115 	stw	r2,-24252(gp)
      /* "cache" the match to be first checked next time. */
      match->inp_next->inp_prev = match->inp_prev; /*unlink match */
 4042a20:	e0bff817 	ldw	r2,-32(fp)
 4042a24:	10c00017 	ldw	r3,0(r2)
 4042a28:	e0bff817 	ldw	r2,-32(fp)
 4042a2c:	10800117 	ldw	r2,4(r2)
 4042a30:	18800115 	stw	r2,4(r3)
      match->inp_prev->inp_next = match->inp_next;
 4042a34:	e0bff817 	ldw	r2,-32(fp)
 4042a38:	10c00117 	ldw	r3,4(r2)
 4042a3c:	e0bff817 	ldw	r2,-32(fp)
 4042a40:	10800017 	ldw	r2,0(r2)
 4042a44:	18800015 	stw	r2,0(r3)

      /* relink match as head->inp_next */
      match->inp_next = head->inp_next;
 4042a48:	e0bffa17 	ldw	r2,-24(fp)
 4042a4c:	10c00017 	ldw	r3,0(r2)
 4042a50:	e0bff817 	ldw	r2,-32(fp)
 4042a54:	10c00015 	stw	r3,0(r2)
      head->inp_next = match;
 4042a58:	e0fffa17 	ldw	r3,-24(fp)
 4042a5c:	e0bff817 	ldw	r2,-32(fp)
 4042a60:	18800015 	stw	r2,0(r3)
      match->inp_prev = head;
 4042a64:	e0fff817 	ldw	r3,-32(fp)
 4042a68:	e0bffa17 	ldw	r2,-24(fp)
 4042a6c:	18800115 	stw	r2,4(r3)
      match->inp_next->inp_prev = match;
 4042a70:	e0bff817 	ldw	r2,-32(fp)
 4042a74:	10c00017 	ldw	r3,0(r2)
 4042a78:	e0bff817 	ldw	r2,-32(fp)
 4042a7c:	18800115 	stw	r2,4(r3)
   }
   return (match);
 4042a80:	e0bff817 	ldw	r2,-32(fp)
 4042a84:	e0bfff15 	stw	r2,-4(fp)
 4042a88:	e0bfff17 	ldw	r2,-4(fp)
}
 4042a8c:	e037883a 	mov	sp,fp
 4042a90:	df000017 	ldw	fp,0(sp)
 4042a94:	dec00104 	addi	sp,sp,4
 4042a98:	f800283a 	ret

04042a9c <set_vfopen_error>:
 *
 * RETURNS: 
 */

void set_vfopen_error(int error)
{
 4042a9c:	defffe04 	addi	sp,sp,-8
 4042aa0:	df000115 	stw	fp,4(sp)
 4042aa4:	df000104 	addi	fp,sp,4
 4042aa8:	e13fff15 	stw	r4,-4(fp)
   vfopen_error = error;
 4042aac:	e0bfff17 	ldw	r2,-4(fp)
 4042ab0:	d0a85515 	stw	r2,-24236(gp)
}
 4042ab4:	e037883a 	mov	sp,fp
 4042ab8:	df000017 	ldw	fp,0(sp)
 4042abc:	dec00104 	addi	sp,sp,4
 4042ac0:	f800283a 	ret

04042ac4 <get_vfopen_error>:
 *
 * RETURNS: 
 */

int get_vfopen_error()
{
 4042ac4:	deffff04 	addi	sp,sp,-4
 4042ac8:	df000015 	stw	fp,0(sp)
 4042acc:	d839883a 	mov	fp,sp
   return vfopen_error;
 4042ad0:	d0a85517 	ldw	r2,-24236(gp)
}
 4042ad4:	e037883a 	mov	sp,fp
 4042ad8:	df000017 	ldw	fp,0(sp)
 4042adc:	dec00104 	addi	sp,sp,4
 4042ae0:	f800283a 	ret

04042ae4 <vf_alloc_and_link_vop>:
 *
 * RETURNS: 
 */

VFILE * vf_alloc_and_link_vop()
{
 4042ae4:	defffc04 	addi	sp,sp,-16
 4042ae8:	dfc00315 	stw	ra,12(sp)
 4042aec:	df000215 	stw	fp,8(sp)
 4042af0:	df000204 	addi	fp,sp,8
   struct vfs_open * vop;

   /* enforce maximum number of simultaneously open files */
   if (vfs_open_files >= VFS_MAX_OPEN_FILES)
 4042af4:	d0a85717 	ldw	r2,-24228(gp)
 4042af8:	10803ff0 	cmpltui	r2,r2,255
 4042afc:	1000021e 	bne	r2,zero,4042b08 <vf_alloc_and_link_vop+0x24>
   {
#ifdef VFS_VERBOSE
      dprintf("vfs_open_files too big (%ld) in vf_alloc_and_link_vop()\n",
       vfs_open_files);
#endif   /* VFS_VERBOSE */
      return NULL;
 4042b00:	e03fff15 	stw	zero,-4(fp)
 4042b04:	00001006 	br	4042b48 <vf_alloc_and_link_vop+0x64>
   }

   /* allocate a structure to represent the open file */
   vop = VFS_VFS_OPEN_ALLOC();
 4042b08:	01000504 	movi	r4,20
 4042b0c:	40265f80 	call	40265f8 <npalloc>
 4042b10:	e0bffe15 	stw	r2,-8(fp)

   /* if the allocation succeeded */
   if (vop)
 4042b14:	e0bffe17 	ldw	r2,-8(fp)
 4042b18:	1005003a 	cmpeq	r2,r2,zero
 4042b1c:	1000081e 	bne	r2,zero,4042b40 <vf_alloc_and_link_vop+0x5c>
   {
      /* add to the beginning of the list of open files */
      vop->next = vfiles;
 4042b20:	d0e85317 	ldw	r3,-24244(gp)
 4042b24:	e0bffe17 	ldw	r2,-8(fp)
 4042b28:	10c00015 	stw	r3,0(r2)
      vfiles = vop;
 4042b2c:	e0bffe17 	ldw	r2,-8(fp)
 4042b30:	d0a85315 	stw	r2,-24244(gp)
      /* increment the count of open files */
      vfs_open_files++;
 4042b34:	d0a85717 	ldw	r2,-24228(gp)
 4042b38:	10800044 	addi	r2,r2,1
 4042b3c:	d0a85715 	stw	r2,-24228(gp)
#ifdef VFS_VERBOSE
   else
      dprintf("VFS_VFS_OPEN_ALLOC() failed in vf_alloc_and_link_vop()\n");
#endif   /* VFS_VERBOSE */

   return vop;
 4042b40:	e0bffe17 	ldw	r2,-8(fp)
 4042b44:	e0bfff15 	stw	r2,-4(fp)
 4042b48:	e0bfff17 	ldw	r2,-4(fp)
}
 4042b4c:	e037883a 	mov	sp,fp
 4042b50:	dfc00117 	ldw	ra,4(sp)
 4042b54:	df000017 	ldw	fp,0(sp)
 4042b58:	dec00204 	addi	sp,sp,8
 4042b5c:	f800283a 	ret

04042b60 <vf_alloc_buffer>:
 *
 * RETURNS: 
 */

unsigned char * vf_alloc_buffer(unsigned long size)
{
 4042b60:	defff804 	addi	sp,sp,-32
 4042b64:	dfc00715 	stw	ra,28(sp)
 4042b68:	df000615 	stw	fp,24(sp)
 4042b6c:	df000604 	addi	fp,sp,24
 4042b70:	e13ffe15 	stw	r4,-8(fp)
   unsigned int long_size,int_size;
#endif   /* MUTE_WARNS */

   /* make sure the requested allocation does not exceed the total
      memory space reserved for file buffers */
   if ((vfs_total_rw_space + size) > VFS_MAX_TOTAL_RW_SPACE)
 4042b74:	d0e85817 	ldw	r3,-24224(gp)
 4042b78:	e0bffe17 	ldw	r2,-8(fp)
 4042b7c:	1887883a 	add	r3,r3,r2
 4042b80:	00bfffd4 	movui	r2,65535
 4042b84:	10c0022e 	bgeu	r2,r3,4042b90 <vf_alloc_buffer+0x30>
      return NULL;
 4042b88:	e03fff15 	stw	zero,-4(fp)
 4042b8c:	00002406 	br	4042c20 <vf_alloc_buffer+0xc0>
    * any bigger than what will fit in an unsigned int 
    */
#ifdef MUTE_WARNS
   /* the idiotic hoops you got to jump through to suppress compiler
      warnings */
   long_size   =  sizeof(unsigned   long);
 4042b90:	00800104 	movi	r2,4
 4042b94:	e0bffc15 	stw	r2,-16(fp)
   int_size = sizeof(unsigned int);
 4042b98:	00800104 	movi	r2,4
 4042b9c:	e0bffb15 	stw	r2,-20(fp)
   if (long_size > int_size)
 4042ba0:	e0fffc17 	ldw	r3,-16(fp)
 4042ba4:	e0bffb17 	ldw	r2,-20(fp)
 4042ba8:	10c0112e 	bgeu	r2,r3,4042bf0 <vf_alloc_buffer+0x90>
       * most systems where this "if" expression will evaluate to 
       * true (2 byte ints, 4 byte longs). if any of those upper bits 
       * are on in your requested size, you otta luck.
       */
#ifdef MUTE_WARNS
      switch (int_size)
 4042bac:	e0bffb17 	ldw	r2,-20(fp)
 4042bb0:	108000a0 	cmpeqi	r2,r2,2
 4042bb4:	1000011e 	bne	r2,zero,4042bbc <vf_alloc_buffer+0x5c>
 4042bb8:	00000806 	br	4042bdc <vf_alloc_buffer+0x7c>
#else
      switch (sizeof(unsigned int))
#endif   /* MUTE_WARNS */
      {
      case 2 :
         mem_mask = 0xffff0000;
 4042bbc:	00bffff4 	movhi	r2,65535
 4042bc0:	e0bffa15 	stw	r2,-24(fp)
         default :
            dtrap();    /* you have a weird compiler */
         return NULL;
      }

      if (size & mem_mask)
 4042bc4:	e0fffe17 	ldw	r3,-8(fp)
 4042bc8:	e0bffa17 	ldw	r2,-24(fp)
 4042bcc:	1884703a 	and	r2,r3,r2
 4042bd0:	1004c03a 	cmpne	r2,r2,zero
 4042bd4:	1000041e 	bne	r2,zero,4042be8 <vf_alloc_buffer+0x88>
 4042bd8:	00000506 	br	4042bf0 <vf_alloc_buffer+0x90>
      {
      case 2 :
         mem_mask = 0xffff0000;
         break;
         default :
            dtrap();    /* you have a weird compiler */
 4042bdc:	4025bb40 	call	4025bb4 <dtrap>
         return NULL;
 4042be0:	e03fff15 	stw	zero,-4(fp)
 4042be4:	00000e06 	br	4042c20 <vf_alloc_buffer+0xc0>
      }

      if (size & mem_mask)
         return NULL;
 4042be8:	e03fff15 	stw	zero,-4(fp)
 4042bec:	00000c06 	br	4042c20 <vf_alloc_buffer+0xc0>
   }

   /* try to allocate a buffer of the requested size */
   buffer = (unsigned char *) npalloc((unsigned int) size);
 4042bf0:	e13ffe17 	ldw	r4,-8(fp)
 4042bf4:	40265f80 	call	40265f8 <npalloc>
 4042bf8:	e0bffd15 	stw	r2,-12(fp)

   /* if the allocation succeeded */
   if (buffer)
 4042bfc:	e0bffd17 	ldw	r2,-12(fp)
 4042c00:	1005003a 	cmpeq	r2,r2,zero
 4042c04:	1000041e 	bne	r2,zero,4042c18 <vf_alloc_buffer+0xb8>
   {
      /* add size to the count of total buffer space allocated */
      vfs_total_rw_space += size;
 4042c08:	d0a85817 	ldw	r2,-24224(gp)
 4042c0c:	e0fffe17 	ldw	r3,-8(fp)
 4042c10:	10c5883a 	add	r2,r2,r3
 4042c14:	d0a85815 	stw	r2,-24224(gp)
   }

   return buffer;
 4042c18:	e0bffd17 	ldw	r2,-12(fp)
 4042c1c:	e0bfff15 	stw	r2,-4(fp)
 4042c20:	e0bfff17 	ldw	r2,-4(fp)
}
 4042c24:	e037883a 	mov	sp,fp
 4042c28:	dfc00117 	ldw	ra,4(sp)
 4042c2c:	df000017 	ldw	fp,0(sp)
 4042c30:	dec00204 	addi	sp,sp,8
 4042c34:	f800283a 	ret

04042c38 <vf_free_buffer>:
 *
 * RETURNS: 
 */

void vf_free_buffer(unsigned char * buffer, unsigned long size)
{
 4042c38:	defffc04 	addi	sp,sp,-16
 4042c3c:	dfc00315 	stw	ra,12(sp)
 4042c40:	df000215 	stw	fp,8(sp)
 4042c44:	df000204 	addi	fp,sp,8
 4042c48:	e13ffe15 	stw	r4,-8(fp)
 4042c4c:	e17fff15 	stw	r5,-4(fp)
   /* free the buffer */
   if (buffer)
 4042c50:	e0bffe17 	ldw	r2,-8(fp)
 4042c54:	1005003a 	cmpeq	r2,r2,zero
 4042c58:	1000021e 	bne	r2,zero,4042c64 <vf_free_buffer+0x2c>
      npfree(buffer);
 4042c5c:	e13ffe17 	ldw	r4,-8(fp)
 4042c60:	40266ec0 	call	40266ec <npfree>

   /* and subtract its size from the total buffer space count */
   vfs_total_rw_space -= size;
 4042c64:	d0a85817 	ldw	r2,-24224(gp)
 4042c68:	e0ffff17 	ldw	r3,-4(fp)
 4042c6c:	10c5c83a 	sub	r2,r2,r3
 4042c70:	d0a85815 	stw	r2,-24224(gp)
}
 4042c74:	e037883a 	mov	sp,fp
 4042c78:	dfc00117 	ldw	ra,4(sp)
 4042c7c:	df000017 	ldw	fp,0(sp)
 4042c80:	dec00204 	addi	sp,sp,8
 4042c84:	f800283a 	ret

04042c88 <vfopen_locked>:
 * RETURNS: 
 */

VFILE *
vfopen_locked(char * name, char * mode)
{
 4042c88:	defff804 	addi	sp,sp,-32
 4042c8c:	dfc00715 	stw	ra,28(sp)
 4042c90:	df000615 	stw	fp,24(sp)
 4042c94:	df000604 	addi	fp,sp,24
 4042c98:	e13ffd15 	stw	r4,-12(fp)
 4042c9c:	e17ffe15 	stw	r5,-8(fp)
   struct vfs_file * vfp;
   struct vfs_open * vop;

   /* clear any previous vfopen() error */
   set_vfopen_error(0);
 4042ca0:	0009883a 	mov	r4,zero
 4042ca4:	4042a9c0 	call	4042a9c <set_vfopen_error>

   /* the old code used to do special handling of '?' in files for 
    * the benefit of the web server. the web server should be doing 
    * this now. this is here to make sure that its doing it 
    */
   if (strchr(name,'?'))
 4042ca8:	e13ffd17 	ldw	r4,-12(fp)
 4042cac:	01400fc4 	movi	r5,63
 4042cb0:	400227c0 	call	400227c <strchr>
 4042cb4:	1005003a 	cmpeq	r2,r2,zero
 4042cb8:	1000031e 	bne	r2,zero,4042cc8 <vfopen_locked+0x40>
   {
      dtrap();
 4042cbc:	4025bb40 	call	4025bb4 <dtrap>
      return NULL;
 4042cc0:	e03fff15 	stw	zero,-4(fp)
 4042cc4:	0000c406 	br	4042fd8 <vfopen_locked+0x350>
   }

   /* determine if the file exists */
   /* if the directory exists, vfp will point to its directory entry
      structure else vfp will be NULL */
   vfp = vfslookup_locked(name);
 4042cc8:	e13ffd17 	ldw	r4,-12(fp)
 4042ccc:	40440340 	call	4044034 <vfslookup_locked>
 4042cd0:	e0bffc15 	stw	r2,-16(fp)

   /* if the file exists */
   if (vfp)
 4042cd4:	e0bffc17 	ldw	r2,-16(fp)
 4042cd8:	1005003a 	cmpeq	r2,r2,zero
 4042cdc:	10004e1e 	bne	r2,zero,4042e18 <vfopen_locked+0x190>

#ifdef HT_RWVFS

      /* if mode begins with 'w' we will truncate to end of file */
      /* make sure the file is writable before proceeding */
      if ((*mode == 'w') && !(vfp->flags & VF_WRITE))
 4042ce0:	e0bffe17 	ldw	r2,-8(fp)
 4042ce4:	10800003 	ldbu	r2,0(r2)
 4042ce8:	10803fcc 	andi	r2,r2,255
 4042cec:	1080201c 	xori	r2,r2,128
 4042cf0:	10bfe004 	addi	r2,r2,-128
 4042cf4:	10801dd8 	cmpnei	r2,r2,119
 4042cf8:	10000a1e 	bne	r2,zero,4042d24 <vfopen_locked+0x9c>
 4042cfc:	e0bffc17 	ldw	r2,-16(fp)
 4042d00:	1080058b 	ldhu	r2,22(r2)
 4042d04:	10bfffcc 	andi	r2,r2,65535
 4042d08:	1080080c 	andi	r2,r2,32
 4042d0c:	1004c03a 	cmpne	r2,r2,zero
 4042d10:	1000041e 	bne	r2,zero,4042d24 <vfopen_locked+0x9c>
      {
         set_vfopen_error(ENP_FILEIO);
 4042d14:	013ff984 	movi	r4,-26
 4042d18:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("mode w with no VF_WRITE\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 4042d1c:	e03fff15 	stw	zero,-4(fp)
 4042d20:	0000ad06 	br	4042fd8 <vfopen_locked+0x350>
      }

#endif   /* HT_RWVFS */

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 4042d24:	4042ae40 	call	4042ae4 <vf_alloc_and_link_vop>
 4042d28:	e0bffb15 	stw	r2,-20(fp)

      /* check for failure */
      if (!vop)
 4042d2c:	e0bffb17 	ldw	r2,-20(fp)
 4042d30:	1004c03a 	cmpne	r2,r2,zero
 4042d34:	1000041e 	bne	r2,zero,4042d48 <vfopen_locked+0xc0>
      {
         set_vfopen_error(ENP_NOMEM);
 4042d38:	013ffb04 	movi	r4,-20
 4042d3c:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 1\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 4042d40:	e03fff15 	stw	zero,-4(fp)
 4042d44:	0000a406 	br	4042fd8 <vfopen_locked+0x350>
      }

      /* link to the file's directory entry structure */
      vop->file = vfp;
 4042d48:	e0fffb17 	ldw	r3,-20(fp)
 4042d4c:	e0bffc17 	ldw	r2,-16(fp)
 4042d50:	18800115 	stw	r2,4(r3)

      /* by default start at the beginning of the file */
      /* note that vfp->data could be NULL at this point since empty
         files might have no data buffer allocated to them */
      vop->cmploc = vfp->data;   /* start at beginning of file */
 4042d54:	e0bffc17 	ldw	r2,-16(fp)
 4042d58:	10c00617 	ldw	r3,24(r2)
 4042d5c:	e0bffb17 	ldw	r2,-20(fp)
 4042d60:	10c00215 	stw	r3,8(r2)

#ifdef HT_RWVFS

      /* if mode begins with 'a', seek to end of file */
      if (*mode == 'a')
 4042d64:	e0bffe17 	ldw	r2,-8(fp)
 4042d68:	10800003 	ldbu	r2,0(r2)
 4042d6c:	10803fcc 	andi	r2,r2,255
 4042d70:	1080201c 	xori	r2,r2,128
 4042d74:	10bfe004 	addi	r2,r2,-128
 4042d78:	10801858 	cmpnei	r2,r2,97
 4042d7c:	10000b1e 	bne	r2,zero,4042dac <vfopen_locked+0x124>
      {
         if (vfp->data)
 4042d80:	e0bffc17 	ldw	r2,-16(fp)
 4042d84:	10800617 	ldw	r2,24(r2)
 4042d88:	1005003a 	cmpeq	r2,r2,zero
 4042d8c:	1000071e 	bne	r2,zero,4042dac <vfopen_locked+0x124>
         {
            vop->cmploc = vfp->data + vfp->comp_size;
 4042d90:	e0bffc17 	ldw	r2,-16(fp)
 4042d94:	10c00617 	ldw	r3,24(r2)
 4042d98:	e0bffc17 	ldw	r2,-16(fp)
 4042d9c:	10800817 	ldw	r2,32(r2)
 4042da0:	1887883a 	add	r3,r3,r2
 4042da4:	e0bffb17 	ldw	r2,-20(fp)
 4042da8:	10c00215 	stw	r3,8(r2)
         }
      }

      /* if mode begins with 'w', truncate to end of file */
      if (*mode == 'w')
 4042dac:	e0bffe17 	ldw	r2,-8(fp)
 4042db0:	10800003 	ldbu	r2,0(r2)
 4042db4:	10803fcc 	andi	r2,r2,255
 4042db8:	1080201c 	xori	r2,r2,128
 4042dbc:	10bfe004 	addi	r2,r2,-128
 4042dc0:	10801dd8 	cmpnei	r2,r2,119
 4042dc4:	1000111e 	bne	r2,zero,4042e0c <vfopen_locked+0x184>
      {
         /* set the size of the file before compression to 0 */
         vfp->real_size = 0;
 4042dc8:	e0bffc17 	ldw	r2,-16(fp)
 4042dcc:	10000715 	stw	zero,28(r2)
         /* set the size of the compressed data to 0 */
         vfp->comp_size = 0;
 4042dd0:	e0bffc17 	ldw	r2,-16(fp)
 4042dd4:	10000815 	stw	zero,32(r2)
         /* note we leave the pointer to the file buffer and its length
            alone since first writes will go to it */
         /* flag that the file has been modified */
         vfp->flags |= VF_STALE;
 4042dd8:	e0bffc17 	ldw	r2,-16(fp)
 4042ddc:	1080058b 	ldhu	r2,22(r2)
 4042de0:	10808014 	ori	r2,r2,512
 4042de4:	1007883a 	mov	r3,r2
 4042de8:	e0bffc17 	ldw	r2,-16(fp)
 4042dec:	10c0058d 	sth	r3,22(r2)

         /* turn off the compression flag */
         vfp->flags &= ~VF_HTMLCOMPRESSED;
 4042df0:	e0bffc17 	ldw	r2,-16(fp)
 4042df4:	10c0058b 	ldhu	r3,22(r2)
 4042df8:	00bfff84 	movi	r2,-2
 4042dfc:	1884703a 	and	r2,r3,r2
 4042e00:	1007883a 	mov	r3,r2
 4042e04:	e0bffc17 	ldw	r2,-16(fp)
 4042e08:	10c0058d 	sth	r3,22(r2)
      }

#endif   /* HT_RWVFS */

      return vop;
 4042e0c:	e0bffb17 	ldw	r2,-20(fp)
 4042e10:	e0bfff15 	stw	r2,-4(fp)
 4042e14:	00007006 	br	4042fd8 <vfopen_locked+0x350>

#ifdef HT_EXTDEV

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 4042e18:	e0bffe17 	ldw	r2,-8(fp)
 4042e1c:	10800003 	ldbu	r2,0(r2)
 4042e20:	10803fcc 	andi	r2,r2,255
 4042e24:	1080201c 	xori	r2,r2,128
 4042e28:	10bfe004 	addi	r2,r2,-128
 4042e2c:	10801ca0 	cmpeqi	r2,r2,114
 4042e30:	1000151e 	bne	r2,zero,4042e88 <vfopen_locked+0x200>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
 4042e34:	d0a85217 	ldw	r2,-24248(gp)
 4042e38:	e0bffa15 	stw	r2,-24(fp)
 4042e3c:	00000f06 	br	4042e7c <vfopen_locked+0x1f4>
      {
         if ((vop = vfs->r_fopen(name, mode)) != NULL)
 4042e40:	e0bffa17 	ldw	r2,-24(fp)
 4042e44:	10800117 	ldw	r2,4(r2)
 4042e48:	e13ffd17 	ldw	r4,-12(fp)
 4042e4c:	e17ffe17 	ldw	r5,-8(fp)
 4042e50:	103ee83a 	callr	r2
 4042e54:	e0bffb15 	stw	r2,-20(fp)
 4042e58:	e0bffb17 	ldw	r2,-20(fp)
 4042e5c:	1005003a 	cmpeq	r2,r2,zero
 4042e60:	1000031e 	bne	r2,zero,4042e70 <vfopen_locked+0x1e8>
         {
            return vop;
 4042e64:	e0bffb17 	ldw	r2,-20(fp)
 4042e68:	e0bfff15 	stw	r2,-4(fp)
 4042e6c:	00005a06 	br	4042fd8 <vfopen_locked+0x350>
   {
      /* see if one of the other systems wants to create this file */
      /* if none of the below devices can open the file, continue on */
      struct vfroutines *  vfs;

      for (vfs = vfsystems; vfs; vfs = vfs->next)
 4042e70:	e0bffa17 	ldw	r2,-24(fp)
 4042e74:	10800017 	ldw	r2,0(r2)
 4042e78:	e0bffa15 	stw	r2,-24(fp)
 4042e7c:	e0bffa17 	ldw	r2,-24(fp)
 4042e80:	1004c03a 	cmpne	r2,r2,zero
 4042e84:	103fee1e 	bne	r2,zero,4042e40 <vfopen_locked+0x1b8>

#ifdef HT_RWVFS

   /* if the mode implies that the file should be created if it
      does not exist */
   if (*mode != 'r')
 4042e88:	e0bffe17 	ldw	r2,-8(fp)
 4042e8c:	10800003 	ldbu	r2,0(r2)
 4042e90:	10803fcc 	andi	r2,r2,255
 4042e94:	1080201c 	xori	r2,r2,128
 4042e98:	10bfe004 	addi	r2,r2,-128
 4042e9c:	10801ca0 	cmpeqi	r2,r2,114
 4042ea0:	10004a1e 	bne	r2,zero,4042fcc <vfopen_locked+0x344>
   {
      /* enforce maximum number of files */
      if (vfs_total_dyna_files >= VFS_MAX_DYNA_FILES)
 4042ea4:	d0a85917 	ldw	r2,-24220(gp)
 4042ea8:	10803ff0 	cmpltui	r2,r2,255
 4042eac:	1000041e 	bne	r2,zero,4042ec0 <vfopen_locked+0x238>
      {
         set_vfopen_error(ENP_NOMEM);
 4042eb0:	013ffb04 	movi	r4,-20
 4042eb4:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_total_dyna_files too big in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 4042eb8:	e03fff15 	stw	zero,-4(fp)
 4042ebc:	00004606 	br	4042fd8 <vfopen_locked+0x350>
      }

      /* make sure the file name is not too long for the VFS */
      if (strlen(name) > FILENAMEMAX)
 4042ec0:	e13ffd17 	ldw	r4,-12(fp)
 4042ec4:	40029d00 	call	40029d0 <strlen>
 4042ec8:	10800470 	cmpltui	r2,r2,17
 4042ecc:	1000041e 	bne	r2,zero,4042ee0 <vfopen_locked+0x258>
      {
         set_vfopen_error(ENP_PARAM);
 4042ed0:	013ffd84 	movi	r4,-10
 4042ed4:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("file name too long in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 4042ed8:	e03fff15 	stw	zero,-4(fp)
 4042edc:	00003e06 	br	4042fd8 <vfopen_locked+0x350>
      }

      /* allocate a vfs_file structure to hold the new file entry in */
      vfp = VFS_VFS_FILE_ALLOC();
 4042ee0:	01000b04 	movi	r4,44
 4042ee4:	40265f80 	call	40265f8 <npalloc>
 4042ee8:	e0bffc15 	stw	r2,-16(fp)

      /* check for memory allocation failure */
      if (!vfp)
 4042eec:	e0bffc17 	ldw	r2,-16(fp)
 4042ef0:	1004c03a 	cmpne	r2,r2,zero
 4042ef4:	1000041e 	bne	r2,zero,4042f08 <vfopen_locked+0x280>
      {
         set_vfopen_error(ENP_NOMEM);
 4042ef8:	013ffb04 	movi	r4,-20
 4042efc:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("VFS_VFS_FILE_ALLOC() failed in vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 4042f00:	e03fff15 	stw	zero,-4(fp)
 4042f04:	00003406 	br	4042fd8 <vfopen_locked+0x350>
      }

      /* allocate a VFILE structure to represent the open file */
      vop = vf_alloc_and_link_vop();
 4042f08:	4042ae40 	call	4042ae4 <vf_alloc_and_link_vop>
 4042f0c:	e0bffb15 	stw	r2,-20(fp)

      /* check for memory allocation failure */
      if (!vop)
 4042f10:	e0bffb17 	ldw	r2,-20(fp)
 4042f14:	1004c03a 	cmpne	r2,r2,zero
 4042f18:	1000061e 	bne	r2,zero,4042f34 <vfopen_locked+0x2ac>
      {
         VFS_VFS_FILE_FREE(vfp); /* free the allocated vfs_file entry */
 4042f1c:	e13ffc17 	ldw	r4,-16(fp)
 4042f20:	40266ec0 	call	40266ec <npfree>
         set_vfopen_error(ENP_NOMEM);
 4042f24:	013ffb04 	movi	r4,-20
 4042f28:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
         dprintf("vf_alloc_and_link_vop() failed 2\n");
#endif   /* VFS_VERBOSE */
         return NULL;
 4042f2c:	e03fff15 	stw	zero,-4(fp)
 4042f30:	00002906 	br	4042fd8 <vfopen_locked+0x350>
      }

      /* add the vfs_file structure to the head of the list */

      vfp->next = vfsfiles;
 4042f34:	d0e85417 	ldw	r3,-24240(gp)
 4042f38:	e0bffc17 	ldw	r2,-16(fp)
 4042f3c:	10c00015 	stw	r3,0(r2)
      vfsfiles = vfp;
 4042f40:	e0bffc17 	ldw	r2,-16(fp)
 4042f44:	d0a85415 	stw	r2,-24240(gp)

      /* increment count of total files */
      vfs_total_dyna_files++;
 4042f48:	d0a85917 	ldw	r2,-24220(gp)
 4042f4c:	10800044 	addi	r2,r2,1
 4042f50:	d0a85915 	stw	r2,-24220(gp)

      /* remove leading directory separator before storing name */
      if (*name == '/' || *name == '\\')
 4042f54:	e0bffd17 	ldw	r2,-12(fp)
 4042f58:	10800003 	ldbu	r2,0(r2)
 4042f5c:	10803fcc 	andi	r2,r2,255
 4042f60:	1080201c 	xori	r2,r2,128
 4042f64:	10bfe004 	addi	r2,r2,-128
 4042f68:	10800be0 	cmpeqi	r2,r2,47
 4042f6c:	1000071e 	bne	r2,zero,4042f8c <vfopen_locked+0x304>
 4042f70:	e0bffd17 	ldw	r2,-12(fp)
 4042f74:	10800003 	ldbu	r2,0(r2)
 4042f78:	10803fcc 	andi	r2,r2,255
 4042f7c:	1080201c 	xori	r2,r2,128
 4042f80:	10bfe004 	addi	r2,r2,-128
 4042f84:	10801718 	cmpnei	r2,r2,92
 4042f88:	1000031e 	bne	r2,zero,4042f98 <vfopen_locked+0x310>
         name++;
 4042f8c:	e0bffd17 	ldw	r2,-12(fp)
 4042f90:	10800044 	addi	r2,r2,1
 4042f94:	e0bffd15 	stw	r2,-12(fp)

      /* store the converted name in the directory entry structure */
      strcpy(vfp->name,name);
 4042f98:	e0bffc17 	ldw	r2,-16(fp)
 4042f9c:	11000104 	addi	r4,r2,4
 4042fa0:	e17ffd17 	ldw	r5,-12(fp)
 4042fa4:	40460e00 	call	40460e0 <strcpy>

      /* set the flags */
      vfp->flags = VF_DYNAMICINFO   /* the directory entry was allocated */
 4042fa8:	e0fffc17 	ldw	r3,-16(fp)
 4042fac:	0080d804 	movi	r2,864
 4042fb0:	1880058d 	sth	r2,22(r3)
       * note that this means the data pointer contains a null 
       * because we don't allocate any buffer to hold the data 
       * in until the first write 
       */
      /* link to the file's directory entry structure */
      vop->file = vfp;
 4042fb4:	e0fffb17 	ldw	r3,-20(fp)
 4042fb8:	e0bffc17 	ldw	r2,-16(fp)
 4042fbc:	18800115 	stw	r2,4(r3)
      /* the cmploc and tag fields of the vop retain their NULLs from 
       * npalloc(). cmploc contains NULL because there is no data 
       * buffer to point to yet. tag contains NULL because no 
       * decompression operation has started yet
       */
      return vop;
 4042fc0:	e0bffb17 	ldw	r2,-20(fp)
 4042fc4:	e0bfff15 	stw	r2,-4(fp)
 4042fc8:	00000306 	br	4042fd8 <vfopen_locked+0x350>
   /* pass the open to the local file system */
   return (VFILE *) fopen(name,mode);

#else

   set_vfopen_error(ENP_NOFILE);
 4042fcc:	013ff9c4 	movi	r4,-25
 4042fd0:	4042a9c0 	call	4042a9c <set_vfopen_error>
#ifdef VFS_VERBOSE
   dprintf("fell thru to end of vfopen_locked()\n");
#endif   /* VFS_VERBOSE */
   return NULL;
 4042fd4:	e03fff15 	stw	zero,-4(fp)
 4042fd8:	e0bfff17 	ldw	r2,-4(fp)

#endif   /* HT_LOCALFS */
}
 4042fdc:	e037883a 	mov	sp,fp
 4042fe0:	dfc00117 	ldw	ra,4(sp)
 4042fe4:	df000017 	ldw	fp,0(sp)
 4042fe8:	dec00204 	addi	sp,sp,8
 4042fec:	f800283a 	ret

04042ff0 <vfopen>:
 * RETURNS: 
 */

VFILE *
vfopen(char * name, char * mode)
{
 4042ff0:	defffb04 	addi	sp,sp,-20
 4042ff4:	dfc00415 	stw	ra,16(sp)
 4042ff8:	df000315 	stw	fp,12(sp)
 4042ffc:	df000304 	addi	fp,sp,12
 4043000:	e13ffe15 	stw	r4,-8(fp)
 4043004:	e17fff15 	stw	r5,-4(fp)
   if (vfs_log_file_name)
      dprintf("vfopen() passed >%s<,%s\n",name,mode);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 4043008:	01000144 	movi	r4,5
 404300c:	40261b00 	call	40261b0 <wait_app_sem>

   vfd = vfopen_locked(name,mode);
 4043010:	e13ffe17 	ldw	r4,-8(fp)
 4043014:	e17fff17 	ldw	r5,-4(fp)
 4043018:	4042c880 	call	4042c88 <vfopen_locked>
 404301c:	e0bffd15 	stw	r2,-12(fp)

   vfs_unlock();
 4043020:	01000144 	movi	r4,5
 4043024:	40262640 	call	4026264 <post_app_sem>

   return vfd;
 4043028:	e0bffd17 	ldw	r2,-12(fp)
}
 404302c:	e037883a 	mov	sp,fp
 4043030:	dfc00117 	ldw	ra,4(sp)
 4043034:	df000017 	ldw	fp,0(sp)
 4043038:	dec00204 	addi	sp,sp,8
 404303c:	f800283a 	ret

04043040 <vfclose_locked>:
 * RETURNS: 
 */

void 
vfclose_locked(VFILE * vfd)
{
 4043040:	defff804 	addi	sp,sp,-32
 4043044:	dfc00715 	stw	ra,28(sp)
 4043048:	df000615 	stw	fp,24(sp)
 404304c:	df000604 	addi	fp,sp,24
 4043050:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;
   VFILE * vlast;

   vlast = NULL;
 4043054:	e03ffd15 	stw	zero,-12(fp)

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
 4043058:	d0a85317 	ldw	r2,-24244(gp)
 404305c:	e0bffe15 	stw	r2,-8(fp)
   while (vtmp)
 4043060:	00000806 	br	4043084 <vfclose_locked+0x44>
   {
      /* if this is the one we are looking for, exist search loop */
      if (vfd == vtmp)
 4043064:	e0ffff17 	ldw	r3,-4(fp)
 4043068:	e0bffe17 	ldw	r2,-8(fp)
 404306c:	18800826 	beq	r3,r2,4043090 <vfclose_locked+0x50>
         break;

      /* bump the next and previous pointers along to try the next one */
      vlast = vtmp;
 4043070:	e0bffe17 	ldw	r2,-8(fp)
 4043074:	e0bffd15 	stw	r2,-12(fp)
      vtmp = vtmp->next;
 4043078:	e0bffe17 	ldw	r2,-8(fp)
 404307c:	10800017 	ldw	r2,0(r2)
 4043080:	e0bffe15 	stw	r2,-8(fp)
   vlast = NULL;

   /* see if vfd is in our list of open virtual files. We
      can't use isvfile() since we need a pointer to last. */
   vtmp = vfiles;
   while (vtmp)
 4043084:	e0bffe17 	ldw	r2,-8(fp)
 4043088:	1004c03a 	cmpne	r2,r2,zero
 404308c:	103ff51e 	bne	r2,zero,4043064 <vfclose_locked+0x24>
      vlast = vtmp;
      vtmp = vtmp->next;
   }

   /* if the passed in handle was not in the list we maintain */
   if (vfd != vtmp)
 4043090:	e0ffff17 	ldw	r3,-4(fp)
 4043094:	e0bffe17 	ldw	r2,-8(fp)
 4043098:	18804e1e 	bne	r3,r2,40431d4 <vfclose_locked+0x194>

   /* this not really a forever loop. it exists so we can break easily
      and deal with all the ifdefs */
   while (1)
   {
      struct vfs_file * vfp   =  vfd->file;
 404309c:	e0bfff17 	ldw	r2,-4(fp)
 40430a0:	10800117 	ldw	r2,4(r2)
 40430a4:	e0bffc15 	stw	r2,-16(fp)
      /* vfd->file will be null if somebody unlinked the file after
       * this handle was created to point to it. if the file itself 
       * is gone there is nothing left to do, so break to list 
       * deletion code at bottom of loop
       */
      if (vfp == NULL)
 40430a8:	e0bffc17 	ldw	r2,-16(fp)
 40430ac:	1005003a 	cmpeq	r2,r2,zero
 40430b0:	1000381e 	bne	r2,zero,4043194 <vfclose_locked+0x154>
         break;
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 40430b4:	e0bffc17 	ldw	r2,-16(fp)
 40430b8:	10800a17 	ldw	r2,40(r2)
 40430bc:	1005003a 	cmpeq	r2,r2,zero
 40430c0:	1000081e 	bne	r2,zero,40430e4 <vfclose_locked+0xa4>
      {
         /* call that file system's fclose() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)(vfp->method);
 40430c4:	e0bffc17 	ldw	r2,-16(fp)
 40430c8:	10800a17 	ldw	r2,40(r2)
 40430cc:	e0bffa15 	stw	r2,-24(fp)

         vfs->r_fclose(vfd);
 40430d0:	e0bffa17 	ldw	r2,-24(fp)
 40430d4:	10800217 	ldw	r2,8(r2)
 40430d8:	e13fff17 	ldw	r4,-4(fp)
 40430dc:	103ee83a 	callr	r2
         break;   /* break to list deletion code after end of phoney loop */
 40430e0:	00002c06 	br	4043194 <vfclose_locked+0x154>

      /* if the buffer containing the data was allocated dynamically, 
       * and there are VFS_CLOSE_FRAG_FLOOR bytes of unused data 
       * between the end of the file and the end of the buffer 
       */
      if ((vfp->flags & VF_DYNAMICDATA) &&
 40430e4:	e0bffc17 	ldw	r2,-16(fp)
 40430e8:	1080058b 	ldhu	r2,22(r2)
 40430ec:	10bfffcc 	andi	r2,r2,65535
 40430f0:	1080200c 	andi	r2,r2,128
 40430f4:	1005003a 	cmpeq	r2,r2,zero
 40430f8:	1000261e 	bne	r2,zero,4043194 <vfclose_locked+0x154>
 40430fc:	e0bffc17 	ldw	r2,-16(fp)
 4043100:	10c00917 	ldw	r3,36(r2)
 4043104:	e0bffc17 	ldw	r2,-16(fp)
 4043108:	10800817 	ldw	r2,32(r2)
 404310c:	1885c83a 	sub	r2,r3,r2
 4043110:	10804030 	cmpltui	r2,r2,256
 4043114:	10001f1e 	bne	r2,zero,4043194 <vfclose_locked+0x154>
 4043118:	e0bffc17 	ldw	r2,-16(fp)
 404311c:	10800617 	ldw	r2,24(r2)
 4043120:	1005003a 	cmpeq	r2,r2,zero
 4043124:	10001b1e 	bne	r2,zero,4043194 <vfclose_locked+0x154>
          vfp->data) /* this last test is a sanity check */
      {
         /* try to reclaim the unused data */

         /* allocate a new buffer just big enough for the data */
         new_buffer = vf_alloc_buffer(vfp->comp_size);
 4043128:	e0bffc17 	ldw	r2,-16(fp)
 404312c:	11000817 	ldw	r4,32(r2)
 4043130:	4042b600 	call	4042b60 <vf_alloc_buffer>
 4043134:	e0bffb15 	stw	r2,-20(fp)

         /* if the allocation worked */
         if (new_buffer)
 4043138:	e0bffb17 	ldw	r2,-20(fp)
 404313c:	1005003a 	cmpeq	r2,r2,zero
 4043140:	1000141e 	bne	r2,zero,4043194 <vfclose_locked+0x154>
         {
            /* copy the old buffer to the new one */
            MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 4043144:	e0bffc17 	ldw	r2,-16(fp)
 4043148:	10c00617 	ldw	r3,24(r2)
 404314c:	e0bffc17 	ldw	r2,-16(fp)
 4043150:	11800817 	ldw	r6,32(r2)
 4043154:	e0bffb17 	ldw	r2,-20(fp)
 4043158:	1009883a 	mov	r4,r2
 404315c:	180b883a 	mov	r5,r3
 4043160:	4001de40 	call	4001de4 <memcpy>
            /* free the old buffer */
            vf_free_buffer(vfp->data,vfp->buf_size);
 4043164:	e0bffc17 	ldw	r2,-16(fp)
 4043168:	11000617 	ldw	r4,24(r2)
 404316c:	e0bffc17 	ldw	r2,-16(fp)
 4043170:	11400917 	ldw	r5,36(r2)
 4043174:	4042c380 	call	4042c38 <vf_free_buffer>
            /* update the buffer pointer and size to reflect the
               just big enough buffer */
            vfp->data = new_buffer;
 4043178:	e0fffc17 	ldw	r3,-16(fp)
 404317c:	e0bffb17 	ldw	r2,-20(fp)
 4043180:	18800615 	stw	r2,24(r3)
            vfp->buf_size = vfp->comp_size;
 4043184:	e0bffc17 	ldw	r2,-16(fp)
 4043188:	10c00817 	ldw	r3,32(r2)
 404318c:	e0bffc17 	ldw	r2,-16(fp)
 4043190:	10c00915 	stw	r3,36(r2)
      /* break to list deletion code below */
      break;

   }

   if (vlast)  /* unlink from list of open files */
 4043194:	e0bffd17 	ldw	r2,-12(fp)
 4043198:	1005003a 	cmpeq	r2,r2,zero
 404319c:	1000051e 	bne	r2,zero,40431b4 <vfclose_locked+0x174>
      vlast->next = vtmp->next;
 40431a0:	e0bffe17 	ldw	r2,-8(fp)
 40431a4:	10c00017 	ldw	r3,0(r2)
 40431a8:	e0bffd17 	ldw	r2,-12(fp)
 40431ac:	10c00015 	stw	r3,0(r2)
 40431b0:	00000306 	br	40431c0 <vfclose_locked+0x180>
   else
      vfiles = vtmp->next;
 40431b4:	e0bffe17 	ldw	r2,-8(fp)
 40431b8:	10800017 	ldw	r2,0(r2)
 40431bc:	d0a85315 	stw	r2,-24244(gp)

   /* free structure addressed by open handle */
   VFS_VFS_OPEN_FREE(vtmp);
 40431c0:	e13ffe17 	ldw	r4,-8(fp)
 40431c4:	40266ec0 	call	40266ec <npfree>
   /* decrement the number of open files */
   vfs_open_files--;
 40431c8:	d0a85717 	ldw	r2,-24228(gp)
 40431cc:	10bfffc4 	addi	r2,r2,-1
 40431d0:	d0a85715 	stw	r2,-24228(gp)
   return;
}
 40431d4:	e037883a 	mov	sp,fp
 40431d8:	dfc00117 	ldw	ra,4(sp)
 40431dc:	df000017 	ldw	fp,0(sp)
 40431e0:	dec00204 	addi	sp,sp,8
 40431e4:	f800283a 	ret

040431e8 <vfclose>:
 *
 * RETURNS: 
 */

void vfclose(VFILE * vfd)
{
 40431e8:	defffd04 	addi	sp,sp,-12
 40431ec:	dfc00215 	stw	ra,8(sp)
 40431f0:	df000115 	stw	fp,4(sp)
 40431f4:	df000104 	addi	fp,sp,4
 40431f8:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
 40431fc:	01000144 	movi	r4,5
 4043200:	40261b00 	call	40261b0 <wait_app_sem>

   vfclose_locked(vfd);
 4043204:	e13fff17 	ldw	r4,-4(fp)
 4043208:	40430400 	call	4043040 <vfclose_locked>

   vfs_unlock();
 404320c:	01000144 	movi	r4,5
 4043210:	40262640 	call	4026264 <post_app_sem>
}
 4043214:	e037883a 	mov	sp,fp
 4043218:	dfc00117 	ldw	ra,4(sp)
 404321c:	df000017 	ldw	fp,0(sp)
 4043220:	dec00204 	addi	sp,sp,8
 4043224:	f800283a 	ret

04043228 <vfflush>:
 *
 * RETURNS: 
 */

int vfflush(VFILE * vfd)
{
 4043228:	defffd04 	addi	sp,sp,-12
 404322c:	dfc00215 	stw	ra,8(sp)
 4043230:	df000115 	stw	fp,4(sp)
 4043234:	df000104 	addi	fp,sp,4
 4043238:	e13fff15 	stw	r4,-4(fp)
   vfs_lock();
 404323c:	01000144 	movi	r4,5
 4043240:	40261b00 	call	40261b0 <wait_app_sem>

   printf("vfflush(): This function needs to be implemented\n");
 4043244:	01010174 	movhi	r4,1029
 4043248:	2131bb04 	addi	r4,r4,-14612
 404324c:	40021940 	call	4002194 <puts>

   vfs_unlock();
 4043250:	01000144 	movi	r4,5
 4043254:	40262640 	call	4026264 <post_app_sem>
   return(0);
 4043258:	0005883a 	mov	r2,zero
}
 404325c:	e037883a 	mov	sp,fp
 4043260:	dfc00117 	ldw	ra,4(sp)
 4043264:	df000017 	ldw	fp,0(sp)
 4043268:	dec00204 	addi	sp,sp,8
 404326c:	f800283a 	ret

04043270 <vfgets>:

char * vfgets(char * s, int lim, VFILE * fp) 
{
 4043270:	defff804 	addi	sp,sp,-32
 4043274:	dfc00715 	stw	ra,28(sp)
 4043278:	df000615 	stw	fp,24(sp)
 404327c:	df000604 	addi	fp,sp,24
 4043280:	e13ffc15 	stw	r4,-16(fp)
 4043284:	e17ffd15 	stw	r5,-12(fp)
 4043288:	e1bffe15 	stw	r6,-8(fp)
   int c;
   char * ret;

   ret = s;
 404328c:	e0bffc17 	ldw	r2,-16(fp)
 4043290:	e0bffa15 	stw	r2,-24(fp)
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 4043294:	00001106 	br	40432dc <vfgets+0x6c>
      if (( *ret ++ = c) == '\n')
 4043298:	e0bffb17 	ldw	r2,-20(fp)
 404329c:	1007883a 	mov	r3,r2
 40432a0:	e0bffa17 	ldw	r2,-24(fp)
 40432a4:	10c00005 	stb	r3,0(r2)
 40432a8:	e0bffa17 	ldw	r2,-24(fp)
 40432ac:	10800003 	ldbu	r2,0(r2)
 40432b0:	10803fcc 	andi	r2,r2,255
 40432b4:	1080201c 	xori	r2,r2,128
 40432b8:	10bfe004 	addi	r2,r2,-128
 40432bc:	108002a0 	cmpeqi	r2,r2,10
 40432c0:	1007883a 	mov	r3,r2
 40432c4:	e0bffa17 	ldw	r2,-24(fp)
 40432c8:	10800044 	addi	r2,r2,1
 40432cc:	e0bffa15 	stw	r2,-24(fp)
 40432d0:	18803fcc 	andi	r2,r3,255
 40432d4:	1004c03a 	cmpne	r2,r2,zero
 40432d8:	10000c1e 	bne	r2,zero,404330c <vfgets+0x9c>
{
   int c;
   char * ret;

   ret = s;
   while ( --lim > 0 && (c = vgetc(fp)) != EOF)
 40432dc:	e0bffd17 	ldw	r2,-12(fp)
 40432e0:	10bfffc4 	addi	r2,r2,-1
 40432e4:	e0bffd15 	stw	r2,-12(fp)
 40432e8:	e0bffd17 	ldw	r2,-12(fp)
 40432ec:	10800050 	cmplti	r2,r2,1
 40432f0:	1000061e 	bne	r2,zero,404330c <vfgets+0x9c>
 40432f4:	e13ffe17 	ldw	r4,-8(fp)
 40432f8:	4043fec0 	call	4043fec <vgetc>
 40432fc:	e0bffb15 	stw	r2,-20(fp)
 4043300:	e0bffb17 	ldw	r2,-20(fp)
 4043304:	10bfffd8 	cmpnei	r2,r2,-1
 4043308:	103fe31e 	bne	r2,zero,4043298 <vfgets+0x28>
      if (( *ret ++ = c) == '\n')
         break;
   *ret = '\0';
 404330c:	e0bffa17 	ldw	r2,-24(fp)
 4043310:	10000005 	stb	zero,0(r2)
   return ( c == EOF && ret == s) ? NULL : s;
 4043314:	e0bffb17 	ldw	r2,-20(fp)
 4043318:	10bfffd8 	cmpnei	r2,r2,-1
 404331c:	1000031e 	bne	r2,zero,404332c <vfgets+0xbc>
 4043320:	e0fffa17 	ldw	r3,-24(fp)
 4043324:	e0bffc17 	ldw	r2,-16(fp)
 4043328:	18800326 	beq	r3,r2,4043338 <vfgets+0xc8>
 404332c:	e0bffc17 	ldw	r2,-16(fp)
 4043330:	e0bfff15 	stw	r2,-4(fp)
 4043334:	00000106 	br	404333c <vfgets+0xcc>
 4043338:	e03fff15 	stw	zero,-4(fp)
 404333c:	e0bfff17 	ldw	r2,-4(fp)
}
 4043340:	e037883a 	mov	sp,fp
 4043344:	dfc00117 	ldw	ra,4(sp)
 4043348:	df000017 	ldw	fp,0(sp)
 404334c:	dec00204 	addi	sp,sp,8
 4043350:	f800283a 	ret

04043354 <vfeof>:
 *
 * RETURNS: 1 if the file pointer is at EOF, otherwise 0
 */
 
int vfeof(VFILE * vfd)
{
 4043354:	defffb04 	addi	sp,sp,-20
 4043358:	dfc00415 	stw	ra,16(sp)
 404335c:	df000315 	stw	fp,12(sp)
 4043360:	df000304 	addi	fp,sp,12
 4043364:	e13ffe15 	stw	r4,-8(fp)
   int c = 0;
 4043368:	e03ffd15 	stw	zero,-12(fp)

#ifdef HT_LOCALFS
   return(feof((FILE*)vfd));
#endif
   if ((c = vgetc(vfd)) == EOF )
 404336c:	e13ffe17 	ldw	r4,-8(fp)
 4043370:	4043fec0 	call	4043fec <vgetc>
 4043374:	e0bffd15 	stw	r2,-12(fp)
 4043378:	e0bffd17 	ldw	r2,-12(fp)
 404337c:	10bfffd8 	cmpnei	r2,r2,-1
 4043380:	1000031e 	bne	r2,zero,4043390 <vfeof+0x3c>
   {
      return 1;
 4043384:	00800044 	movi	r2,1
 4043388:	e0bfff15 	stw	r2,-4(fp)
 404338c:	00000106 	br	4043394 <vfeof+0x40>
   }   
   return 0;
 4043390:	e03fff15 	stw	zero,-4(fp)
 4043394:	e0bfff17 	ldw	r2,-4(fp)
}
 4043398:	e037883a 	mov	sp,fp
 404339c:	dfc00117 	ldw	ra,4(sp)
 40433a0:	df000017 	ldw	fp,0(sp)
 40433a4:	dec00204 	addi	sp,sp,8
 40433a8:	f800283a 	ret

040433ac <vunlink_flag_open_files>:
 *
 * RETURNS: 
 */

void vunlink_flag_open_files(struct vfs_file * vfp)
{
 40433ac:	defffd04 	addi	sp,sp,-12
 40433b0:	df000215 	stw	fp,8(sp)
 40433b4:	df000204 	addi	fp,sp,8
 40433b8:	e13fff15 	stw	r4,-4(fp)
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 40433bc:	d0a85317 	ldw	r2,-24244(gp)
 40433c0:	e0bffe15 	stw	r2,-8(fp)
 40433c4:	00000906 	br	40433ec <vunlink_flag_open_files+0x40>
   {
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
 40433c8:	e0bffe17 	ldw	r2,-8(fp)
 40433cc:	10c00117 	ldw	r3,4(r2)
 40433d0:	e0bfff17 	ldw	r2,-4(fp)
 40433d4:	1880021e 	bne	r3,r2,40433e0 <vunlink_flag_open_files+0x34>
         vtmp->file = NULL;
 40433d8:	e0bffe17 	ldw	r2,-8(fp)
 40433dc:	10000115 	stw	zero,4(r2)
void vunlink_flag_open_files(struct vfs_file * vfp)
{
   VFILE * vtmp;

   /* for all open files */
   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 40433e0:	e0bffe17 	ldw	r2,-8(fp)
 40433e4:	10800017 	ldw	r2,0(r2)
 40433e8:	e0bffe15 	stw	r2,-8(fp)
 40433ec:	e0bffe17 	ldw	r2,-8(fp)
 40433f0:	1004c03a 	cmpne	r2,r2,zero
 40433f4:	103ff41e 	bne	r2,zero,40433c8 <vunlink_flag_open_files+0x1c>
      /* if the open file handle is referencing the file we are
         deleting, set that reference to NULL */
      if (vtmp->file == vfp)
         vtmp->file = NULL;
   }
}
 40433f8:	e037883a 	mov	sp,fp
 40433fc:	df000017 	ldw	fp,0(sp)
 4043400:	dec00104 	addi	sp,sp,4
 4043404:	f800283a 	ret

04043408 <vunlink>:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
int
vunlink(const char * const_name)
{
 4043408:	defff504 	addi	sp,sp,-44
 404340c:	dfc00a15 	stw	ra,40(sp)
 4043410:	df000915 	stw	fp,36(sp)
 4043414:	df000904 	addi	fp,sp,36
 4043418:	e13ffe15 	stw	r4,-8(fp)
   struct vfs_file * vfp;
   int   rc =  0;
 404341c:	e03ffc15 	stw	zero,-16(fp)
/*
 * Altera Niche Stack Nios port modification:
 * Change prototype from char * name to const char to
 * follow C library standard.
 */
   char * name = malloc(strlen(const_name));
 4043420:	e13ffe17 	ldw	r4,-8(fp)
 4043424:	40029d00 	call	40029d0 <strlen>
 4043428:	1009883a 	mov	r4,r2
 404342c:	4045ff80 	call	4045ff8 <malloc>
 4043430:	e0bff815 	stw	r2,-32(fp)
   strcpy(name, const_name);
 4043434:	e13ff817 	ldw	r4,-32(fp)
 4043438:	e17ffe17 	ldw	r5,-8(fp)
 404343c:	40460e00 	call	40460e0 <strcpy>
   if (vfs_log_file_name)
      dprintf("vunlink() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 4043440:	01000144 	movi	r4,5
 4043444:	40261b00 	call	40261b0 <wait_app_sem>

   /* see if the converted name is one of the one's in our list */
   /* if it isn't */
   if ((vfp = vfslookup_locked(name)) == NULL)
 4043448:	e13ff817 	ldw	r4,-32(fp)
 404344c:	40440340 	call	4044034 <vfslookup_locked>
 4043450:	e0bffd15 	stw	r2,-12(fp)
 4043454:	e0bffd17 	ldw	r2,-12(fp)
 4043458:	1004c03a 	cmpne	r2,r2,zero
 404345c:	1000071e 	bne	r2,zero,404347c <vunlink+0x74>
   {
      vfs_unlock();
 4043460:	01000144 	movi	r4,5
 4043464:	40262640 	call	4026264 <post_app_sem>
#ifdef HT_LOCALFS
      /* default to call on local system */
      return remove(name);
#else
      /* no local file system, so return error condition */
      free(name);
 4043468:	e13ff817 	ldw	r4,-32(fp)
 404346c:	4045fe40 	call	4045fe4 <free>
      return -1;
 4043470:	00bfffc4 	movi	r2,-1
 4043474:	e0bfff15 	stw	r2,-4(fp)
 4043478:	00006506 	br	4043610 <vunlink+0x208>
#ifdef   HT_RWVFS
   /* save the next link pointer since in one path through the code, 
    * the vfs_file structure gets freed before its unlinked from the 
    * list
    */
   vfnext = vfp->next;
 404347c:	e0bffd17 	ldw	r2,-12(fp)
 4043480:	10800017 	ldw	r2,0(r2)
 4043484:	e0bff915 	stw	r2,-28(fp)

   /* search list of files to determine predecessor in list */
   vflast = NULL;
 4043488:	e03ffa15 	stw	zero,-24(fp)
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 404348c:	d0a85417 	ldw	r2,-24240(gp)
 4043490:	e0bffb15 	stw	r2,-20(fp)
 4043494:	00000806 	br	40434b8 <vunlink+0xb0>
   {
      if (vtmp == vfp)
 4043498:	e0fffb17 	ldw	r3,-20(fp)
 404349c:	e0bffd17 	ldw	r2,-12(fp)
 40434a0:	18800826 	beq	r3,r2,40434c4 <vunlink+0xbc>
         break;
      vflast = vtmp;
 40434a4:	e0bffb17 	ldw	r2,-20(fp)
 40434a8:	e0bffa15 	stw	r2,-24(fp)
    */
   vfnext = vfp->next;

   /* search list of files to determine predecessor in list */
   vflast = NULL;
   for (vtmp = vfsfiles; vtmp != NULL; vtmp = vtmp->next)
 40434ac:	e0bffb17 	ldw	r2,-20(fp)
 40434b0:	10800017 	ldw	r2,0(r2)
 40434b4:	e0bffb15 	stw	r2,-20(fp)
 40434b8:	e0bffb17 	ldw	r2,-20(fp)
 40434bc:	1004c03a 	cmpne	r2,r2,zero
 40434c0:	103ff51e 	bne	r2,zero,4043498 <vunlink+0x90>
      vflast = vtmp;
   }

   /* this shouldn't happen since vfslookup_locked() already searched
      the list, but just in case */
   if (vtmp == NULL)
 40434c4:	e0bffb17 	ldw	r2,-20(fp)
 40434c8:	1004c03a 	cmpne	r2,r2,zero
 40434cc:	1000081e 	bne	r2,zero,40434f0 <vunlink+0xe8>
   {
      dtrap();
 40434d0:	4025bb40 	call	4025bb4 <dtrap>
      vfs_unlock();
 40434d4:	01000144 	movi	r4,5
 40434d8:	40262640 	call	4026264 <post_app_sem>
      free(name);
 40434dc:	e13ff817 	ldw	r4,-32(fp)
 40434e0:	4045fe40 	call	4045fe4 <free>
      return -1;
 40434e4:	00bfffc4 	movi	r2,-1
 40434e8:	e0bfff15 	stw	r2,-4(fp)
 40434ec:	00004806 	br	4043610 <vunlink+0x208>
   while (1)
   {

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfp->method)
 40434f0:	e0bffd17 	ldw	r2,-12(fp)
 40434f4:	10800a17 	ldw	r2,40(r2)
 40434f8:	1005003a 	cmpeq	r2,r2,zero
 40434fc:	1000091e 	bne	r2,zero,4043524 <vunlink+0x11c>
      {
         /* call that file system's unlink() */
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfp->method);
 4043500:	e0bffd17 	ldw	r2,-12(fp)
 4043504:	10800a17 	ldw	r2,40(r2)
 4043508:	e0bff715 	stw	r2,-36(fp)

         rc = vfs->r_unlink(name);
 404350c:	e0bff717 	ldw	r2,-36(fp)
 4043510:	10800817 	ldw	r2,32(r2)
 4043514:	e13ff817 	ldw	r4,-32(fp)
 4043518:	103ee83a 	callr	r2
 404351c:	e0bffc15 	stw	r2,-16(fp)
         break;   /* break to list deletion code after end of phoney loop */
 4043520:	00002806 	br	40435c4 <vunlink+0x1bc>
      }
#endif   /* HT_EXTDEV */

      /* if the file is not write enabled, return error condition */
      if (!(vfp->flags & VF_WRITE))
 4043524:	e0bffd17 	ldw	r2,-12(fp)
 4043528:	1080058b 	ldhu	r2,22(r2)
 404352c:	10bfffcc 	andi	r2,r2,65535
 4043530:	1080080c 	andi	r2,r2,32
 4043534:	1004c03a 	cmpne	r2,r2,zero
 4043538:	1000071e 	bne	r2,zero,4043558 <vunlink+0x150>
      {
         vfs_unlock();
 404353c:	01000144 	movi	r4,5
 4043540:	40262640 	call	4026264 <post_app_sem>
         free(name);
 4043544:	e13ff817 	ldw	r4,-32(fp)
 4043548:	4045fe40 	call	4045fe4 <free>
         return -1;
 404354c:	00bfffc4 	movi	r2,-1
 4043550:	e0bfff15 	stw	r2,-4(fp)
 4043554:	00002e06 	br	4043610 <vunlink+0x208>
      }

      /* if the data buffer containing the file's data was dynamically
         allocated and is not null */
      if ((vfp->flags & VF_DYNAMICDATA) && (vfp->data))
 4043558:	e0bffd17 	ldw	r2,-12(fp)
 404355c:	1080058b 	ldhu	r2,22(r2)
 4043560:	10bfffcc 	andi	r2,r2,65535
 4043564:	1080200c 	andi	r2,r2,128
 4043568:	1005003a 	cmpeq	r2,r2,zero
 404356c:	1000091e 	bne	r2,zero,4043594 <vunlink+0x18c>
 4043570:	e0bffd17 	ldw	r2,-12(fp)
 4043574:	10800617 	ldw	r2,24(r2)
 4043578:	1005003a 	cmpeq	r2,r2,zero
 404357c:	1000051e 	bne	r2,zero,4043594 <vunlink+0x18c>
      {
         /* free the buffer */
         vf_free_buffer(vfp->data,vfp->buf_size);
 4043580:	e0bffd17 	ldw	r2,-12(fp)
 4043584:	11000617 	ldw	r4,24(r2)
 4043588:	e0bffd17 	ldw	r2,-12(fp)
 404358c:	11400917 	ldw	r5,36(r2)
 4043590:	4042c380 	call	4042c38 <vf_free_buffer>
      }

      /* if the vfs_file structure itself was allocated dynamically */
      if (vfp->flags & VF_DYNAMICINFO)
 4043594:	e0bffd17 	ldw	r2,-12(fp)
 4043598:	1080058b 	ldhu	r2,22(r2)
 404359c:	10bfffcc 	andi	r2,r2,65535
 40435a0:	1080100c 	andi	r2,r2,64
 40435a4:	1005003a 	cmpeq	r2,r2,zero
 40435a8:	1000051e 	bne	r2,zero,40435c0 <vunlink+0x1b8>
      {
         /* decrement count of total files */
         vfs_total_dyna_files--;
 40435ac:	d0a85917 	ldw	r2,-24220(gp)
 40435b0:	10bfffc4 	addi	r2,r2,-1
 40435b4:	d0a85915 	stw	r2,-24220(gp)

         /* free the vfs_file structure */
         VFS_VFS_FILE_FREE(vfp);
 40435b8:	e13ffd17 	ldw	r4,-12(fp)
 40435bc:	40266ec0 	call	40266ec <npfree>
         the vfs_file has been deleted from the list */
#ifdef VFS_AUTO_SYNC
      do_sync = 1;
#endif
      /* we were successful at our unlink */
      rc = 0;
 40435c0:	e03ffc15 	stw	zero,-16(fp)

      break;
   }

   /* delete the vfs_file structure from the list headed by vfsfiles */
   if (vflast)
 40435c4:	e0bffa17 	ldw	r2,-24(fp)
 40435c8:	1005003a 	cmpeq	r2,r2,zero
 40435cc:	1000041e 	bne	r2,zero,40435e0 <vunlink+0x1d8>
      vflast->next = vfnext;
 40435d0:	e0fffa17 	ldw	r3,-24(fp)
 40435d4:	e0bff917 	ldw	r2,-28(fp)
 40435d8:	18800015 	stw	r2,0(r3)
 40435dc:	00000206 	br	40435e8 <vunlink+0x1e0>
   else
      vfsfiles = vfnext;
 40435e0:	e0bff917 	ldw	r2,-28(fp)
 40435e4:	d0a85415 	stw	r2,-24240(gp)

   /* fix up references to deleted file in list of currently open VFILEs */
   vunlink_flag_open_files(vfp);
 40435e8:	e13ffd17 	ldw	r4,-12(fp)
 40435ec:	40433ac0 	call	40433ac <vunlink_flag_open_files>

   /* flag that the directory is stale so vfs_sync() knows it has to do
      something */
   vfs_dir_stale = TRUE;
 40435f0:	00800044 	movi	r2,1
 40435f4:	d0a85615 	stw	r2,-24232(gp)

   /* unlinks not allowed on read-only VFS */
   rc = -1;

#endif   /* HT_RWVFS */
   vfs_unlock();
 40435f8:	01000144 	movi	r4,5
 40435fc:	40262640 	call	4026264 <post_app_sem>
   free(name);
 4043600:	e13ff817 	ldw	r4,-32(fp)
 4043604:	4045fe40 	call	4045fe4 <free>
   return rc;
 4043608:	e0bffc17 	ldw	r2,-16(fp)
 404360c:	e0bfff15 	stw	r2,-4(fp)
 4043610:	e0bfff17 	ldw	r2,-4(fp)
}
 4043614:	e037883a 	mov	sp,fp
 4043618:	dfc00117 	ldw	ra,4(sp)
 404361c:	df000017 	ldw	fp,0(sp)
 4043620:	dec00204 	addi	sp,sp,8
 4043624:	f800283a 	ret

04043628 <vfread>:
 * RETURNS: 
 */

int 
vfread(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 4043628:	defff504 	addi	sp,sp,-44
 404362c:	dfc00a15 	stw	ra,40(sp)
 4043630:	df000915 	stw	fp,36(sp)
 4043634:	df000904 	addi	fp,sp,36
 4043638:	e13ffb15 	stw	r4,-20(fp)
 404363c:	e17ffc15 	stw	r5,-16(fp)
 4043640:	e1bffd15 	stw	r6,-12(fp)
 4043644:	e1fffe15 	stw	r7,-8(fp)
   unsigned bcount;  /* number of bytes put in caller's buffer */

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 4043648:	01000144 	movi	r4,5
 404364c:	40261b00 	call	40261b0 <wait_app_sem>

   /* if the file is in our list of open files */
   if (isvfile_locked(vfd))
 4043650:	e13ffe17 	ldw	r4,-8(fp)
 4043654:	404439c0 	call	404439c <isvfile_locked>
 4043658:	1005003a 	cmpeq	r2,r2,zero
 404365c:	1000541e 	bne	r2,zero,40437b0 <vfread+0x188>
   {

#ifdef HT_RWVFS
      /* the caller is trying to read a handle to a file that's been
         deleted, so he gets 0 data back */
      if (vfd->file == NULL)
 4043660:	e0bffe17 	ldw	r2,-8(fp)
 4043664:	10800117 	ldw	r2,4(r2)
 4043668:	1004c03a 	cmpne	r2,r2,zero
 404366c:	1000041e 	bne	r2,zero,4043680 <vfread+0x58>
      {
         vfs_unlock();
 4043670:	01000144 	movi	r4,5
 4043674:	40262640 	call	4026264 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
 4043678:	e03fff15 	stw	zero,-4(fp)
 404367c:	00004f06 	br	40437bc <vfread+0x194>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      /* if the file was created by an external file system */
      if (vfd->file->method)
 4043680:	e0bffe17 	ldw	r2,-8(fp)
 4043684:	10800117 	ldw	r2,4(r2)
 4043688:	10800a17 	ldw	r2,40(r2)
 404368c:	1005003a 	cmpeq	r2,r2,zero
 4043690:	1000111e 	bne	r2,zero,40436d8 <vfread+0xb0>
      {
         struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
 4043694:	e0bffe17 	ldw	r2,-8(fp)
 4043698:	10800117 	ldw	r2,4(r2)
 404369c:	10800a17 	ldw	r2,40(r2)
 40436a0:	e0bff915 	stw	r2,-28(fp)
         int   rc;

         /* call that system's fread() */
         rc = vfs->r_fread(buf,size,items,vfd);
 40436a4:	e0bff917 	ldw	r2,-28(fp)
 40436a8:	10800317 	ldw	r2,12(r2)
 40436ac:	e13ffb17 	ldw	r4,-20(fp)
 40436b0:	e17ffc17 	ldw	r5,-16(fp)
 40436b4:	e1bffd17 	ldw	r6,-12(fp)
 40436b8:	e1fffe17 	ldw	r7,-8(fp)
 40436bc:	103ee83a 	callr	r2
 40436c0:	e0bff815 	stw	r2,-32(fp)
         vfs_unlock();
 40436c4:	01000144 	movi	r4,5
 40436c8:	40262640 	call	4026264 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return rc;
 40436cc:	e0bff817 	ldw	r2,-32(fp)
 40436d0:	e0bfff15 	stw	r2,-4(fp)
 40436d4:	00003906 	br	40437bc <vfread+0x194>
#ifdef HT_RWVFS
      /* the data pointer can be NULL if somebody tries to read from 
       * a freshly created file, in which case there is no data in 
       * the file, so return 0
       */
      if (!(vfd->file->data))
 40436d8:	e0bffe17 	ldw	r2,-8(fp)
 40436dc:	10800117 	ldw	r2,4(r2)
 40436e0:	10800617 	ldw	r2,24(r2)
 40436e4:	1004c03a 	cmpne	r2,r2,zero
 40436e8:	1000041e 	bne	r2,zero,40436fc <vfread+0xd4>
      {
         vfs_unlock();
 40436ec:	01000144 	movi	r4,5
 40436f0:	40262640 	call	4026264 <post_app_sem>
         IN_PROFILER(PF_FS, PF_EXIT);
         return 0;
 40436f4:	e03fff15 	stw	zero,-4(fp)
 40436f8:	00003006 	br	40437bc <vfread+0x194>
      }
#endif   /* HT_RWVFS */

      bcount = items * size;  /* number of bytes to transfer */
 40436fc:	e0fffd17 	ldw	r3,-12(fp)
 4043700:	e0bffc17 	ldw	r2,-16(fp)
 4043704:	1885383a 	mul	r2,r3,r2
 4043708:	e0bffa15 	stw	r2,-24(fp)
         return(items); /* filled user buffer, return # items copied */
      }
      else  /* else fall to faster non-compression code */
#endif   /* HTML_COMPRESSION */
      {  /* get here to do simple uncompressed data read */
         unsigned location = vfd->cmploc - vfd->file->data;
 404370c:	e0bffe17 	ldw	r2,-8(fp)
 4043710:	10800217 	ldw	r2,8(r2)
 4043714:	1007883a 	mov	r3,r2
 4043718:	e0bffe17 	ldw	r2,-8(fp)
 404371c:	10800117 	ldw	r2,4(r2)
 4043720:	10800617 	ldw	r2,24(r2)
 4043724:	1885c83a 	sub	r2,r3,r2
 4043728:	e0bff715 	stw	r2,-36(fp)

         if (((unsigned long)location + bcount) > vfd->file->comp_size)
 404372c:	e0fff717 	ldw	r3,-36(fp)
 4043730:	e0bffa17 	ldw	r2,-24(fp)
 4043734:	1887883a 	add	r3,r3,r2
 4043738:	e0bffe17 	ldw	r2,-8(fp)
 404373c:	10800117 	ldw	r2,4(r2)
 4043740:	10800817 	ldw	r2,32(r2)
 4043744:	10c0062e 	bgeu	r2,r3,4043760 <vfread+0x138>
            bcount = (unsigned)(vfd->file->comp_size - location);
 4043748:	e0bffe17 	ldw	r2,-8(fp)
 404374c:	10800117 	ldw	r2,4(r2)
 4043750:	10c00817 	ldw	r3,32(r2)
 4043754:	e0bff717 	ldw	r2,-36(fp)
 4043758:	1885c83a 	sub	r2,r3,r2
 404375c:	e0bffa15 	stw	r2,-24(fp)
         MEMCPY(buf, vfd->cmploc, bcount);
 4043760:	e0bffe17 	ldw	r2,-8(fp)
 4043764:	10c00217 	ldw	r3,8(r2)
 4043768:	e0bffb17 	ldw	r2,-20(fp)
 404376c:	1009883a 	mov	r4,r2
 4043770:	180b883a 	mov	r5,r3
 4043774:	e1bffa17 	ldw	r6,-24(fp)
 4043778:	4001de40 	call	4001de4 <memcpy>
         vfd->cmploc += bcount;
 404377c:	e0bffe17 	ldw	r2,-8(fp)
 4043780:	10c00217 	ldw	r3,8(r2)
 4043784:	e0bffa17 	ldw	r2,-24(fp)
 4043788:	1887883a 	add	r3,r3,r2
 404378c:	e0bffe17 	ldw	r2,-8(fp)
 4043790:	10c00215 	stw	r3,8(r2)
      }
      vfs_unlock();
 4043794:	01000144 	movi	r4,5
 4043798:	40262640 	call	4026264 <post_app_sem>
      IN_PROFILER(PF_FS, PF_EXIT);
      return (bcount/size);
 404379c:	e0fffa17 	ldw	r3,-24(fp)
 40437a0:	e0bffc17 	ldw	r2,-16(fp)
 40437a4:	1885203a 	divu	r2,r3,r2
 40437a8:	e0bfff15 	stw	r2,-4(fp)
 40437ac:	00000306 	br	40437bc <vfread+0x194>
   }

   vfs_unlock();
 40437b0:	01000144 	movi	r4,5
 40437b4:	40262640 	call	4026264 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fread(buf, size, items, (FILE*)vfd));
#else
   return 0;
 40437b8:	e03fff15 	stw	zero,-4(fp)
 40437bc:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
 40437c0:	e037883a 	mov	sp,fp
 40437c4:	dfc00117 	ldw	ra,4(sp)
 40437c8:	df000017 	ldw	fp,0(sp)
 40437cc:	dec00204 	addi	sp,sp,8
 40437d0:	f800283a 	ret

040437d4 <vfwrite_locked>:
 * RETURNS: 
 */

int 
vfwrite_locked(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 40437d4:	defff104 	addi	sp,sp,-60
 40437d8:	dfc00e15 	stw	ra,56(sp)
 40437dc:	df000d15 	stw	fp,52(sp)
 40437e0:	df000d04 	addi	fp,sp,52
 40437e4:	e13ffb15 	stw	r4,-20(fp)
 40437e8:	e17ffc15 	stw	r5,-16(fp)
 40437ec:	e1bffd15 	stw	r6,-12(fp)
 40437f0:	e1fffe15 	stw	r7,-8(fp)
   unsigned long current_offset;
   struct vfs_file * vfp;
#endif   /* HT_RWVFS */

   /* if the file is not in our list of files */
   if (!isvfile_locked(vfd))
 40437f4:	e13ffe17 	ldw	r4,-8(fp)
 40437f8:	404439c0 	call	404439c <isvfile_locked>
 40437fc:	1004c03a 	cmpne	r2,r2,zero
 4043800:	1000031e 	bne	r2,zero,4043810 <vfwrite_locked+0x3c>
   {
#ifdef HT_LOCALFS
      /* default to call on local system */
      return(fwrite(buf, size, items, (FILE*)vfd));
#else
      return EBADF;
 4043804:	00800244 	movi	r2,9
 4043808:	e0bfff15 	stw	r2,-4(fp)
 404380c:	0000e506 	br	4043ba4 <vfwrite_locked+0x3d0>
   }
   /* this file is in our list of files */

#ifdef HT_EXTDEV
   /* if the file was created by an external file system */
   if (vfd->file->method)
 4043810:	e0bffe17 	ldw	r2,-8(fp)
 4043814:	10800117 	ldw	r2,4(r2)
 4043818:	10800a17 	ldw	r2,40(r2)
 404381c:	1005003a 	cmpeq	r2,r2,zero
 4043820:	10000f1e 	bne	r2,zero,4043860 <vfwrite_locked+0x8c>
   {
      struct vfroutines *  vfs   =  (struct  vfroutines*)   (vfd->file->method);
 4043824:	e0bffe17 	ldw	r2,-8(fp)
 4043828:	10800117 	ldw	r2,4(r2)
 404382c:	10800a17 	ldw	r2,40(r2)
 4043830:	e0bff715 	stw	r2,-36(fp)
      int   rc;

      /* call that system's fwrite() */
      rc = vfs->r_fwrite(buf,size,items,vfd);
 4043834:	e0bff717 	ldw	r2,-36(fp)
 4043838:	10800417 	ldw	r2,16(r2)
 404383c:	e13ffb17 	ldw	r4,-20(fp)
 4043840:	e17ffc17 	ldw	r5,-16(fp)
 4043844:	e1bffd17 	ldw	r6,-12(fp)
 4043848:	e1fffe17 	ldw	r7,-8(fp)
 404384c:	103ee83a 	callr	r2
 4043850:	e0bff615 	stw	r2,-40(fp)
      return rc;
 4043854:	e0bff617 	ldw	r2,-40(fp)
 4043858:	e0bfff15 	stw	r2,-4(fp)
 404385c:	0000d106 	br	4043ba4 <vfwrite_locked+0x3d0>

#else    /* HT_RWVFS */

   /* the caller is trying to write to a file that's been deleted,
      so he writes 0 data */
   if (vfd->file == NULL)
 4043860:	e0bffe17 	ldw	r2,-8(fp)
 4043864:	10800117 	ldw	r2,4(r2)
 4043868:	1004c03a 	cmpne	r2,r2,zero
 404386c:	1000021e 	bne	r2,zero,4043878 <vfwrite_locked+0xa4>
   {
      return 0;
 4043870:	e03fff15 	stw	zero,-4(fp)
 4043874:	0000cb06 	br	4043ba4 <vfwrite_locked+0x3d0>
   }

   vfp = vfd->file;
 4043878:	e0bffe17 	ldw	r2,-8(fp)
 404387c:	10800117 	ldw	r2,4(r2)
 4043880:	e0bff815 	stw	r2,-32(fp)

   /* if the file is not writable, return error condition */
   if (!(vfp->flags & VF_WRITE))
 4043884:	e0bff817 	ldw	r2,-32(fp)
 4043888:	1080058b 	ldhu	r2,22(r2)
 404388c:	10bfffcc 	andi	r2,r2,65535
 4043890:	1080080c 	andi	r2,r2,32
 4043894:	1004c03a 	cmpne	r2,r2,zero
 4043898:	1000051e 	bne	r2,zero,40438b0 <vfwrite_locked+0xdc>
   {
      vfd->error = ENP_FILEIO;
 404389c:	e0fffe17 	ldw	r3,-8(fp)
 40438a0:	00bff984 	movi	r2,-26
 40438a4:	18800415 	stw	r2,16(r3)
      return 0;
 40438a8:	e03fff15 	stw	zero,-4(fp)
 40438ac:	0000bd06 	br	4043ba4 <vfwrite_locked+0x3d0>
   }

   /* compute number of bytes to write */
   bcount = size * items;
 40438b0:	e0fffc17 	ldw	r3,-16(fp)
 40438b4:	e0bffd17 	ldw	r2,-12(fp)
 40438b8:	1885383a 	mul	r2,r3,r2
 40438bc:	e0bffa15 	stw	r2,-24(fp)

   /* get rid of this degenerate case up front */
   if (bcount == 0)
 40438c0:	e0bffa17 	ldw	r2,-24(fp)
 40438c4:	1004c03a 	cmpne	r2,r2,zero
 40438c8:	1000021e 	bne	r2,zero,40438d4 <vfwrite_locked+0x100>
   {
      return 0;
 40438cc:	e03fff15 	stw	zero,-4(fp)
 40438d0:	0000b406 	br	4043ba4 <vfwrite_locked+0x3d0>
   }

   /* if the file currently has no data buffer */
   if (vfp->data == NULL)
 40438d4:	e0bff817 	ldw	r2,-32(fp)
 40438d8:	10800617 	ldw	r2,24(r2)
 40438dc:	1004c03a 	cmpne	r2,r2,zero
 40438e0:	1000401e 	bne	r2,zero,40439e4 <vfwrite_locked+0x210>
   {
      /* compute the size of the buffer to be created */
      /* we round up the size of the data to be written so we dont have
         the overhead of a memory allocation on every write */
      unsigned long buf_size = VFS_ROUND_UP((unsigned long)bcount);
 40438e4:	e0bffa17 	ldw	r2,-24(fp)
 40438e8:	10bfffc4 	addi	r2,r2,-1
 40438ec:	1004d37a 	srli	r2,r2,13
 40438f0:	1004937a 	slli	r2,r2,13
 40438f4:	10880004 	addi	r2,r2,8192
 40438f8:	e0bff515 	stw	r2,-44(fp)

      /* allocate a buffer of that size */
      vfp->data = vf_alloc_buffer(buf_size);
 40438fc:	e13ff517 	ldw	r4,-44(fp)
 4043900:	4042b600 	call	4042b60 <vf_alloc_buffer>
 4043904:	1007883a 	mov	r3,r2
 4043908:	e0bff817 	ldw	r2,-32(fp)
 404390c:	10c00615 	stw	r3,24(r2)

      /* if the allocation failed */
      if (!(vfp->data))
 4043910:	e0bff817 	ldw	r2,-32(fp)
 4043914:	10800617 	ldw	r2,24(r2)
 4043918:	1004c03a 	cmpne	r2,r2,zero
 404391c:	1000051e 	bne	r2,zero,4043934 <vfwrite_locked+0x160>
      {
         vfd->error = ENP_NOMEM;
 4043920:	e0fffe17 	ldw	r3,-8(fp)
 4043924:	00bffb04 	movi	r2,-20
 4043928:	18800415 	stw	r2,16(r3)
         return 0;
 404392c:	e03fff15 	stw	zero,-4(fp)
 4043930:	00009c06 	br	4043ba4 <vfwrite_locked+0x3d0>
      }

      /* store the size of the allocated buffer */
      vfp->buf_size = buf_size;
 4043934:	e0fff817 	ldw	r3,-32(fp)
 4043938:	e0bff517 	ldw	r2,-44(fp)
 404393c:	18800915 	stw	r2,36(r3)

      /* store the number of bytes written in the real and compressed
         file sizes */
      vfp->real_size = bcount;
 4043940:	e0fff817 	ldw	r3,-32(fp)
 4043944:	e0bffa17 	ldw	r2,-24(fp)
 4043948:	18800715 	stw	r2,28(r3)
      vfp->comp_size = bcount;
 404394c:	e0fff817 	ldw	r3,-32(fp)
 4043950:	e0bffa17 	ldw	r2,-24(fp)
 4043954:	18800815 	stw	r2,32(r3)

      /* set the file pointer to the first byte following the last
         byte written */
      vfd->cmploc = vfp->data + bcount;
 4043958:	e0bff817 	ldw	r2,-32(fp)
 404395c:	10c00617 	ldw	r3,24(r2)
 4043960:	e0bffa17 	ldw	r2,-24(fp)
 4043964:	1887883a 	add	r3,r3,r2
 4043968:	e0bffe17 	ldw	r2,-8(fp)
 404396c:	10c00215 	stw	r3,8(r2)

      /* turn off the compression flag */
      vfp->flags &= ~VF_HTMLCOMPRESSED;
 4043970:	e0bff817 	ldw	r2,-32(fp)
 4043974:	10c0058b 	ldhu	r3,22(r2)
 4043978:	00bfff84 	movi	r2,-2
 404397c:	1884703a 	and	r2,r3,r2
 4043980:	1007883a 	mov	r3,r2
 4043984:	e0bff817 	ldw	r2,-32(fp)
 4043988:	10c0058d 	sth	r3,22(r2)

      /* the data in the file is stale */
      vfp->flags |= VF_STALE;
 404398c:	e0bff817 	ldw	r2,-32(fp)
 4043990:	1080058b 	ldhu	r2,22(r2)
 4043994:	10808014 	ori	r2,r2,512
 4043998:	1007883a 	mov	r3,r2
 404399c:	e0bff817 	ldw	r2,-32(fp)
 40439a0:	10c0058d 	sth	r3,22(r2)

      /* the buffer data was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 40439a4:	e0bff817 	ldw	r2,-32(fp)
 40439a8:	1080058b 	ldhu	r2,22(r2)
 40439ac:	10802014 	ori	r2,r2,128
 40439b0:	1007883a 	mov	r3,r2
 40439b4:	e0bff817 	ldw	r2,-32(fp)
 40439b8:	10c0058d 	sth	r3,22(r2)

      /* copy the data to be written to the file buffer */
      MEMCPY(vfp->data,buf,bcount);
 40439bc:	e0bff817 	ldw	r2,-32(fp)
 40439c0:	10800617 	ldw	r2,24(r2)
 40439c4:	e0fffb17 	ldw	r3,-20(fp)
 40439c8:	1009883a 	mov	r4,r2
 40439cc:	180b883a 	mov	r5,r3
 40439d0:	e1bffa17 	ldw	r6,-24(fp)
 40439d4:	4001de40 	call	4001de4 <memcpy>

      /* return the number of "items" written */
      return items;
 40439d8:	e0bffd17 	ldw	r2,-12(fp)
 40439dc:	e0bfff15 	stw	r2,-4(fp)
 40439e0:	00007006 	br	4043ba4 <vfwrite_locked+0x3d0>
   }

   /* compute the current offset into the file */
   current_offset = vfd->cmploc - vfp->data;
 40439e4:	e0bffe17 	ldw	r2,-8(fp)
 40439e8:	10800217 	ldw	r2,8(r2)
 40439ec:	1007883a 	mov	r3,r2
 40439f0:	e0bff817 	ldw	r2,-32(fp)
 40439f4:	10800617 	ldw	r2,24(r2)
 40439f8:	1885c83a 	sub	r2,r3,r2
 40439fc:	e0bff915 	stw	r2,-28(fp)

   /* if the data to be written wont fit into the file buffer */
   if ((current_offset + bcount) > vfp->buf_size)
 4043a00:	e0fff917 	ldw	r3,-28(fp)
 4043a04:	e0bffa17 	ldw	r2,-24(fp)
 4043a08:	1887883a 	add	r3,r3,r2
 4043a0c:	e0bff817 	ldw	r2,-32(fp)
 4043a10:	10800917 	ldw	r2,36(r2)
 4043a14:	10c0382e 	bgeu	r2,r3,4043af8 <vfwrite_locked+0x324>
   {
      /* compute the size of a new buffer to hold the data */
      unsigned long new_buf_size = VFS_ROUND_UP(current_offset + bcount);
 4043a18:	e0fff917 	ldw	r3,-28(fp)
 4043a1c:	e0bffa17 	ldw	r2,-24(fp)
 4043a20:	1885883a 	add	r2,r3,r2
 4043a24:	10bfffc4 	addi	r2,r2,-1
 4043a28:	1004d37a 	srli	r2,r2,13
 4043a2c:	1004937a 	slli	r2,r2,13
 4043a30:	10880004 	addi	r2,r2,8192
 4043a34:	e0bff415 	stw	r2,-48(fp)
      unsigned char *new_buffer;

      /* allocate a new buffer */
      new_buffer = vf_alloc_buffer(new_buf_size);
 4043a38:	e13ff417 	ldw	r4,-48(fp)
 4043a3c:	4042b600 	call	4042b60 <vf_alloc_buffer>
 4043a40:	e0bff315 	stw	r2,-52(fp)

      /* check for allocation failure */
      if (!new_buffer)
 4043a44:	e0bff317 	ldw	r2,-52(fp)
 4043a48:	1004c03a 	cmpne	r2,r2,zero
 4043a4c:	1000051e 	bne	r2,zero,4043a64 <vfwrite_locked+0x290>
      {
         vfd->error = ENP_NOMEM;
 4043a50:	e0fffe17 	ldw	r3,-8(fp)
 4043a54:	00bffb04 	movi	r2,-20
 4043a58:	18800415 	stw	r2,16(r3)
         return 0;
 4043a5c:	e03fff15 	stw	zero,-4(fp)
 4043a60:	00005006 	br	4043ba4 <vfwrite_locked+0x3d0>
      }

      /* copy the old buffer contents to the new buffer */
      MEMCPY(new_buffer,vfp->data,(unsigned int) (vfp->comp_size));
 4043a64:	e0bff817 	ldw	r2,-32(fp)
 4043a68:	10c00617 	ldw	r3,24(r2)
 4043a6c:	e0bff817 	ldw	r2,-32(fp)
 4043a70:	11800817 	ldw	r6,32(r2)
 4043a74:	e0bff317 	ldw	r2,-52(fp)
 4043a78:	1009883a 	mov	r4,r2
 4043a7c:	180b883a 	mov	r5,r3
 4043a80:	4001de40 	call	4001de4 <memcpy>

      /* if the old buffer had been dynamically allocated */
      if (vfp->flags & VF_DYNAMICDATA)
 4043a84:	e0bff817 	ldw	r2,-32(fp)
 4043a88:	1080058b 	ldhu	r2,22(r2)
 4043a8c:	10bfffcc 	andi	r2,r2,65535
 4043a90:	1080200c 	andi	r2,r2,128
 4043a94:	1005003a 	cmpeq	r2,r2,zero
 4043a98:	1000051e 	bne	r2,zero,4043ab0 <vfwrite_locked+0x2dc>
      {
         /* free it */
         vf_free_buffer(vfp->data,vfp->buf_size);
 4043a9c:	e0bff817 	ldw	r2,-32(fp)
 4043aa0:	11000617 	ldw	r4,24(r2)
 4043aa4:	e0bff817 	ldw	r2,-32(fp)
 4043aa8:	11400917 	ldw	r5,36(r2)
 4043aac:	4042c380 	call	4042c38 <vf_free_buffer>
      }

      /* store the new buffer in the file structure */
      vfp->data = new_buffer;
 4043ab0:	e0fff817 	ldw	r3,-32(fp)
 4043ab4:	e0bff317 	ldw	r2,-52(fp)
 4043ab8:	18800615 	stw	r2,24(r3)

      /* store the new buffer size in the file structure */
      vfp->buf_size = new_buf_size;
 4043abc:	e0fff817 	ldw	r3,-32(fp)
 4043ac0:	e0bff417 	ldw	r2,-48(fp)
 4043ac4:	18800915 	stw	r2,36(r3)

      /* the new buffer was dynamically allocated */
      vfp->flags |= VF_DYNAMICDATA;
 4043ac8:	e0bff817 	ldw	r2,-32(fp)
 4043acc:	1080058b 	ldhu	r2,22(r2)
 4043ad0:	10802014 	ori	r2,r2,128
 4043ad4:	1007883a 	mov	r3,r2
 4043ad8:	e0bff817 	ldw	r2,-32(fp)
 4043adc:	10c0058d 	sth	r3,22(r2)
       * buffer note that this means the VFS does not support 
       * simultaneous opens of the same file, since for that to work, 
       * all the other cmploc's that point to this file would 
       * have to be updated also 
       */
      vfd->cmploc = vfp->data + current_offset;
 4043ae0:	e0bff817 	ldw	r2,-32(fp)
 4043ae4:	10c00617 	ldw	r3,24(r2)
 4043ae8:	e0bff917 	ldw	r2,-28(fp)
 4043aec:	1887883a 	add	r3,r3,r2
 4043af0:	e0bffe17 	ldw	r2,-8(fp)
 4043af4:	10c00215 	stw	r3,8(r2)
   }

   /* copy the data to the current file pointer */
   MEMCPY(vfd->cmploc,buf,bcount);
 4043af8:	e0bffe17 	ldw	r2,-8(fp)
 4043afc:	10800217 	ldw	r2,8(r2)
 4043b00:	e0fffb17 	ldw	r3,-20(fp)
 4043b04:	1009883a 	mov	r4,r2
 4043b08:	180b883a 	mov	r5,r3
 4043b0c:	e1bffa17 	ldw	r6,-24(fp)
 4043b10:	4001de40 	call	4001de4 <memcpy>

   /* update the current file pointer */
   vfd->cmploc += bcount;
 4043b14:	e0bffe17 	ldw	r2,-8(fp)
 4043b18:	10c00217 	ldw	r3,8(r2)
 4043b1c:	e0bffa17 	ldw	r2,-24(fp)
 4043b20:	1887883a 	add	r3,r3,r2
 4043b24:	e0bffe17 	ldw	r2,-8(fp)
 4043b28:	10c00215 	stw	r3,8(r2)

   /* if the resulting current offset is greater than the file size */
   if (current_offset + bcount > vfp->comp_size)
 4043b2c:	e0fff917 	ldw	r3,-28(fp)
 4043b30:	e0bffa17 	ldw	r2,-24(fp)
 4043b34:	1887883a 	add	r3,r3,r2
 4043b38:	e0bff817 	ldw	r2,-32(fp)
 4043b3c:	10800817 	ldw	r2,32(r2)
 4043b40:	10c0052e 	bgeu	r2,r3,4043b58 <vfwrite_locked+0x384>
   {
      /* update the "compressed" file size */
      vfp->comp_size = current_offset + bcount;
 4043b44:	e0fff917 	ldw	r3,-28(fp)
 4043b48:	e0bffa17 	ldw	r2,-24(fp)
 4043b4c:	1887883a 	add	r3,r3,r2
 4043b50:	e0bff817 	ldw	r2,-32(fp)
 4043b54:	10c00815 	stw	r3,32(r2)
   }

   /* since we turn off the compression bit below, the "real" size and
      the compressed size must be the same */
   vfp->real_size = vfp->comp_size;
 4043b58:	e0bff817 	ldw	r2,-32(fp)
 4043b5c:	10c00817 	ldw	r3,32(r2)
 4043b60:	e0bff817 	ldw	r2,-32(fp)
 4043b64:	10c00715 	stw	r3,28(r2)

   /* turn off the compression flag */
   vfp->flags &= ~VF_HTMLCOMPRESSED;
 4043b68:	e0bff817 	ldw	r2,-32(fp)
 4043b6c:	10c0058b 	ldhu	r3,22(r2)
 4043b70:	00bfff84 	movi	r2,-2
 4043b74:	1884703a 	and	r2,r3,r2
 4043b78:	1007883a 	mov	r3,r2
 4043b7c:	e0bff817 	ldw	r2,-32(fp)
 4043b80:	10c0058d 	sth	r3,22(r2)

   /* the data in the file is stale */
   vfp->flags |= VF_STALE;
 4043b84:	e0bff817 	ldw	r2,-32(fp)
 4043b88:	1080058b 	ldhu	r2,22(r2)
 4043b8c:	10808014 	ori	r2,r2,512
 4043b90:	1007883a 	mov	r3,r2
 4043b94:	e0bff817 	ldw	r2,-32(fp)
 4043b98:	10c0058d 	sth	r3,22(r2)

   /* return the number of "items" written */
   return items;
 4043b9c:	e0bffd17 	ldw	r2,-12(fp)
 4043ba0:	e0bfff15 	stw	r2,-4(fp)
 4043ba4:	e0bfff17 	ldw	r2,-4(fp)

#endif   /* HT_RWVFS */
}
 4043ba8:	e037883a 	mov	sp,fp
 4043bac:	dfc00117 	ldw	ra,4(sp)
 4043bb0:	df000017 	ldw	fp,0(sp)
 4043bb4:	dec00204 	addi	sp,sp,8
 4043bb8:	f800283a 	ret

04043bbc <vfwrite>:
 * RETURNS: 
 */

int
vfwrite(char * buf, unsigned size, unsigned items, VFILE * vfd)
{
 4043bbc:	defff904 	addi	sp,sp,-28
 4043bc0:	dfc00615 	stw	ra,24(sp)
 4043bc4:	df000515 	stw	fp,20(sp)
 4043bc8:	df000504 	addi	fp,sp,20
 4043bcc:	e13ffc15 	stw	r4,-16(fp)
 4043bd0:	e17ffd15 	stw	r5,-12(fp)
 4043bd4:	e1bffe15 	stw	r6,-8(fp)
 4043bd8:	e1ffff15 	stw	r7,-4(fp)
   int   rc;

   IN_PROFILER(PF_FS, PF_ENTRY);

   /* lock the VFS */
   vfs_lock();
 4043bdc:	01000144 	movi	r4,5
 4043be0:	40261b00 	call	40261b0 <wait_app_sem>

   /* do the write */
   rc = vfwrite_locked(buf, size, items, vfd);
 4043be4:	e13ffc17 	ldw	r4,-16(fp)
 4043be8:	e17ffd17 	ldw	r5,-12(fp)
 4043bec:	e1bffe17 	ldw	r6,-8(fp)
 4043bf0:	e1ffff17 	ldw	r7,-4(fp)
 4043bf4:	40437d40 	call	40437d4 <vfwrite_locked>
 4043bf8:	e0bffb15 	stw	r2,-20(fp)

   /* unlock the VFS */
   vfs_unlock();
 4043bfc:	01000144 	movi	r4,5
 4043c00:	40262640 	call	4026264 <post_app_sem>

   IN_PROFILER(PF_FS, PF_EXIT);

   return rc;
 4043c04:	e0bffb17 	ldw	r2,-20(fp)
}
 4043c08:	e037883a 	mov	sp,fp
 4043c0c:	dfc00117 	ldw	ra,4(sp)
 4043c10:	df000017 	ldw	fp,0(sp)
 4043c14:	dec00204 	addi	sp,sp,8
 4043c18:	f800283a 	ret

04043c1c <vfseek>:
 * RETURNS: 
 */

int 
vfseek(VFILE * vfd, long offset, int mode)
{
 4043c1c:	defff704 	addi	sp,sp,-36
 4043c20:	dfc00815 	stw	ra,32(sp)
 4043c24:	df000715 	stw	fp,28(sp)
 4043c28:	df000704 	addi	fp,sp,28
 4043c2c:	e13ffb15 	stw	r4,-20(fp)
 4043c30:	e17ffc15 	stw	r5,-16(fp)
 4043c34:	e1bffd15 	stw	r6,-12(fp)
   /* lock the VFS */
   vfs_lock();
 4043c38:	01000144 	movi	r4,5
 4043c3c:	40261b00 	call	40261b0 <wait_app_sem>

   if (isvfile_locked(vfd))
 4043c40:	e13ffb17 	ldw	r4,-20(fp)
 4043c44:	404439c0 	call	404439c <isvfile_locked>
 4043c48:	1005003a 	cmpeq	r2,r2,zero
 4043c4c:	1000481e 	bne	r2,zero,4043d70 <vfseek+0x154>
   {
#ifdef HT_RWVFS
      /* the caller is trying to seek a file that's been deleted,
         so return an error indication */
      if (vfd->file == NULL)
 4043c50:	e0bffb17 	ldw	r2,-20(fp)
 4043c54:	10800117 	ldw	r2,4(r2)
 4043c58:	1004c03a 	cmpne	r2,r2,zero
 4043c5c:	1000051e 	bne	r2,zero,4043c74 <vfseek+0x58>
      {
         vfs_unlock();
 4043c60:	01000144 	movi	r4,5
 4043c64:	40262640 	call	4026264 <post_app_sem>
         return -1;
 4043c68:	00bfffc4 	movi	r2,-1
 4043c6c:	e0bffe15 	stw	r2,-8(fp)
 4043c70:	00004306 	br	4043d80 <vfseek+0x164>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 4043c74:	e0bffb17 	ldw	r2,-20(fp)
 4043c78:	10800117 	ldw	r2,4(r2)
 4043c7c:	10800a17 	ldw	r2,40(r2)
 4043c80:	1005003a 	cmpeq	r2,r2,zero
 4043c84:	1000101e 	bne	r2,zero,4043cc8 <vfseek+0xac>
      {
         struct vfroutines *vfp = (struct vfroutines*)(vfd->file->method);
 4043c88:	e0bffb17 	ldw	r2,-20(fp)
 4043c8c:	10800117 	ldw	r2,4(r2)
 4043c90:	10800a17 	ldw	r2,40(r2)
 4043c94:	e0bffa15 	stw	r2,-24(fp)
         int   rc;

         rc = vfp->r_fseek(vfd, offset, mode);
 4043c98:	e0bffa17 	ldw	r2,-24(fp)
 4043c9c:	10800517 	ldw	r2,20(r2)
 4043ca0:	e13ffb17 	ldw	r4,-20(fp)
 4043ca4:	e17ffc17 	ldw	r5,-16(fp)
 4043ca8:	e1bffd17 	ldw	r6,-12(fp)
 4043cac:	103ee83a 	callr	r2
 4043cb0:	e0bff915 	stw	r2,-28(fp)
         vfs_unlock();
 4043cb4:	01000144 	movi	r4,5
 4043cb8:	40262640 	call	4026264 <post_app_sem>
         return rc;
 4043cbc:	e0fff917 	ldw	r3,-28(fp)
 4043cc0:	e0fffe15 	stw	r3,-8(fp)
 4043cc4:	00002e06 	br	4043d80 <vfseek+0x164>
      }
#endif   /* HT_EXTDEV */
      /* this vfseek() currently only supports seek to exact
         end or begining of file */
      switch (mode)
 4043cc8:	e0bffd17 	ldw	r2,-12(fp)
 4043ccc:	e0bfff15 	stw	r2,-4(fp)
 4043cd0:	e0ffff17 	ldw	r3,-4(fp)
 4043cd4:	18800060 	cmpeqi	r2,r3,1
 4043cd8:	10000f1e 	bne	r2,zero,4043d18 <vfseek+0xfc>
 4043cdc:	e0ffff17 	ldw	r3,-4(fp)
 4043ce0:	188000a0 	cmpeqi	r2,r3,2
 4043ce4:	1000131e 	bne	r2,zero,4043d34 <vfseek+0x118>
 4043ce8:	e0ffff17 	ldw	r3,-4(fp)
 4043cec:	1805003a 	cmpeq	r2,r3,zero
 4043cf0:	1000011e 	bne	r2,zero,4043cf8 <vfseek+0xdc>
 4043cf4:	00001a06 	br	4043d60 <vfseek+0x144>
      {
      case SEEK_SET:
         vfd->cmploc = vfd->file->data + offset;
 4043cf8:	e0bffb17 	ldw	r2,-20(fp)
 4043cfc:	10800117 	ldw	r2,4(r2)
 4043d00:	10c00617 	ldw	r3,24(r2)
 4043d04:	e0bffc17 	ldw	r2,-16(fp)
 4043d08:	1887883a 	add	r3,r3,r2
 4043d0c:	e0bffb17 	ldw	r2,-20(fp)
 4043d10:	10c00215 	stw	r3,8(r2)
         break;
 4043d14:	00001206 	br	4043d60 <vfseek+0x144>
      case SEEK_CUR:
         /* If the file is compressed, then the following
          * adjustment is inaccurate. Currently we don't have
          * any scenario where this happens. - handle later */
         vfd->cmploc += offset; 
 4043d18:	e0bffb17 	ldw	r2,-20(fp)
 4043d1c:	10c00217 	ldw	r3,8(r2)
 4043d20:	e0bffc17 	ldw	r2,-16(fp)
 4043d24:	1887883a 	add	r3,r3,r2
 4043d28:	e0bffb17 	ldw	r2,-20(fp)
 4043d2c:	10c00215 	stw	r3,8(r2)
         break;
 4043d30:	00000b06 	br	4043d60 <vfseek+0x144>
      case SEEK_END:
         vfd->cmploc = vfd->file->data + vfd->file->comp_size + offset;
 4043d34:	e0bffb17 	ldw	r2,-20(fp)
 4043d38:	10800117 	ldw	r2,4(r2)
 4043d3c:	10c00617 	ldw	r3,24(r2)
 4043d40:	e0bffb17 	ldw	r2,-20(fp)
 4043d44:	10800117 	ldw	r2,4(r2)
 4043d48:	10800817 	ldw	r2,32(r2)
 4043d4c:	1887883a 	add	r3,r3,r2
 4043d50:	e0bffc17 	ldw	r2,-16(fp)
 4043d54:	1887883a 	add	r3,r3,r2
 4043d58:	e0bffb17 	ldw	r2,-20(fp)
 4043d5c:	10c00215 	stw	r3,8(r2)
         break;
      }
      vfs_unlock();
 4043d60:	01000144 	movi	r4,5
 4043d64:	40262640 	call	4026264 <post_app_sem>
      return(0);
 4043d68:	e03ffe15 	stw	zero,-8(fp)
 4043d6c:	00000406 	br	4043d80 <vfseek+0x164>
   }

   vfs_unlock();
 4043d70:	01000144 	movi	r4,5
 4043d74:	40262640 	call	4026264 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(fseek((FILE*)vfd, offset, mode));
#else
   return -1;
 4043d78:	00bfffc4 	movi	r2,-1
 4043d7c:	e0bffe15 	stw	r2,-8(fp)
 4043d80:	e0bffe17 	ldw	r2,-8(fp)
#endif   /* HT_LOCALFS */
}
 4043d84:	e037883a 	mov	sp,fp
 4043d88:	dfc00117 	ldw	ra,4(sp)
 4043d8c:	df000017 	ldw	fp,0(sp)
 4043d90:	dec00204 	addi	sp,sp,8
 4043d94:	f800283a 	ret

04043d98 <vftell>:
 * RETURNS: 
 */

long
vftell(VFILE * vfd)
{
 4043d98:	defffa04 	addi	sp,sp,-24
 4043d9c:	dfc00515 	stw	ra,20(sp)
 4043da0:	df000415 	stw	fp,16(sp)
 4043da4:	df000404 	addi	fp,sp,16
 4043da8:	e13ffe15 	stw	r4,-8(fp)
   /* lock the VFS */
   vfs_lock();
 4043dac:	01000144 	movi	r4,5
 4043db0:	40261b00 	call	40261b0 <wait_app_sem>

   if (isvfile_locked(vfd))
 4043db4:	e13ffe17 	ldw	r4,-8(fp)
 4043db8:	404439c0 	call	404439c <isvfile_locked>
 4043dbc:	1005003a 	cmpeq	r2,r2,zero
 4043dc0:	1000381e 	bne	r2,zero,4043ea4 <vftell+0x10c>
   {
#ifdef HT_RWVFS
      /* the caller is trying to ftell a deleted file,
         so return an error condition */
      if (vfd->file == NULL)
 4043dc4:	e0bffe17 	ldw	r2,-8(fp)
 4043dc8:	10800117 	ldw	r2,4(r2)
 4043dcc:	1004c03a 	cmpne	r2,r2,zero
 4043dd0:	1000051e 	bne	r2,zero,4043de8 <vftell+0x50>
      {
         vfs_unlock();
 4043dd4:	01000144 	movi	r4,5
 4043dd8:	40262640 	call	4026264 <post_app_sem>
         return -1;
 4043ddc:	00bfffc4 	movi	r2,-1
 4043de0:	e0bfff15 	stw	r2,-4(fp)
 4043de4:	00003306 	br	4043eb4 <vftell+0x11c>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 4043de8:	e0bffe17 	ldw	r2,-8(fp)
 4043dec:	10800117 	ldw	r2,4(r2)
 4043df0:	10800a17 	ldw	r2,40(r2)
 4043df4:	1005003a 	cmpeq	r2,r2,zero
 4043df8:	10000e1e 	bne	r2,zero,4043e34 <vftell+0x9c>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
 4043dfc:	e0bffe17 	ldw	r2,-8(fp)
 4043e00:	10800117 	ldw	r2,4(r2)
 4043e04:	10800a17 	ldw	r2,40(r2)
 4043e08:	e0bffd15 	stw	r2,-12(fp)
         long  rc;

         rc = vfp->r_ftell(vfd);
 4043e0c:	e0bffd17 	ldw	r2,-12(fp)
 4043e10:	10800617 	ldw	r2,24(r2)
 4043e14:	e13ffe17 	ldw	r4,-8(fp)
 4043e18:	103ee83a 	callr	r2
 4043e1c:	e0bffc15 	stw	r2,-16(fp)
         vfs_unlock();
 4043e20:	01000144 	movi	r4,5
 4043e24:	40262640 	call	4026264 <post_app_sem>
         return rc;
 4043e28:	e0bffc17 	ldw	r2,-16(fp)
 4043e2c:	e0bfff15 	stw	r2,-4(fp)
 4043e30:	00002006 	br	4043eb4 <vftell+0x11c>
      }
#endif   /* HT_EXTDEV */
      /* if file has been fseeked to end, return uncompressed size.
         else return current location in compression stream */
      if (vfd->cmploc == vfd->file->data + vfd->file->comp_size)
 4043e34:	e0bffe17 	ldw	r2,-8(fp)
 4043e38:	11000217 	ldw	r4,8(r2)
 4043e3c:	e0bffe17 	ldw	r2,-8(fp)
 4043e40:	10800117 	ldw	r2,4(r2)
 4043e44:	10c00617 	ldw	r3,24(r2)
 4043e48:	e0bffe17 	ldw	r2,-8(fp)
 4043e4c:	10800117 	ldw	r2,4(r2)
 4043e50:	10800817 	ldw	r2,32(r2)
 4043e54:	1885883a 	add	r2,r3,r2
 4043e58:	2080071e 	bne	r4,r2,4043e78 <vftell+0xe0>
      {
         vfs_unlock();
 4043e5c:	01000144 	movi	r4,5
 4043e60:	40262640 	call	4026264 <post_app_sem>

         return vfd->file->comp_size;
 4043e64:	e0bffe17 	ldw	r2,-8(fp)
 4043e68:	10800117 	ldw	r2,4(r2)
 4043e6c:	10800817 	ldw	r2,32(r2)
 4043e70:	e0bfff15 	stw	r2,-4(fp)
 4043e74:	00000f06 	br	4043eb4 <vftell+0x11c>
      }
      else
      {
         vfs_unlock();
 4043e78:	01000144 	movi	r4,5
 4043e7c:	40262640 	call	4026264 <post_app_sem>

         return (vfd->cmploc - vfd->file->data);
 4043e80:	e0bffe17 	ldw	r2,-8(fp)
 4043e84:	10800217 	ldw	r2,8(r2)
 4043e88:	1007883a 	mov	r3,r2
 4043e8c:	e0bffe17 	ldw	r2,-8(fp)
 4043e90:	10800117 	ldw	r2,4(r2)
 4043e94:	10800617 	ldw	r2,24(r2)
 4043e98:	1887c83a 	sub	r3,r3,r2
 4043e9c:	e0ffff15 	stw	r3,-4(fp)
 4043ea0:	00000406 	br	4043eb4 <vftell+0x11c>
      }
   }

   vfs_unlock();
 4043ea4:	01000144 	movi	r4,5
 4043ea8:	40262640 	call	4026264 <post_app_sem>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(ftell((FILE*)vfd));
#else
   return EBADF;
 4043eac:	00800244 	movi	r2,9
 4043eb0:	e0bfff15 	stw	r2,-4(fp)
 4043eb4:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
 4043eb8:	e037883a 	mov	sp,fp
 4043ebc:	dfc00117 	ldw	ra,4(sp)
 4043ec0:	df000017 	ldw	fp,0(sp)
 4043ec4:	dec00204 	addi	sp,sp,8
 4043ec8:	f800283a 	ret

04043ecc <vgetc_locked>:
 * RETURNS: 
 */

int
vgetc_locked(VFILE * vfd)
{
 4043ecc:	defffa04 	addi	sp,sp,-24
 4043ed0:	dfc00515 	stw	ra,20(sp)
 4043ed4:	df000415 	stw	fp,16(sp)
 4043ed8:	df000404 	addi	fp,sp,16
 4043edc:	e13ffe15 	stw	r4,-8(fp)
   int   chr;

   if (isvfile_locked(vfd))
 4043ee0:	e13ffe17 	ldw	r4,-8(fp)
 4043ee4:	404439c0 	call	404439c <isvfile_locked>
 4043ee8:	1005003a 	cmpeq	r2,r2,zero
 4043eec:	1000361e 	bne	r2,zero,4043fc8 <vgetc_locked+0xfc>
   {
#ifdef HT_RWVFS
      /* the caller is trying to read a file that's been deleted,
         so return an error condition */
      if (vfd->file == NULL)
 4043ef0:	e0bffe17 	ldw	r2,-8(fp)
 4043ef4:	10800117 	ldw	r2,4(r2)
 4043ef8:	1004c03a 	cmpne	r2,r2,zero
 4043efc:	1000031e 	bne	r2,zero,4043f0c <vgetc_locked+0x40>
      {
         return EOF;
 4043f00:	00bfffc4 	movi	r2,-1
 4043f04:	e0bfff15 	stw	r2,-4(fp)
 4043f08:	00003206 	br	4043fd4 <vgetc_locked+0x108>
      }
#endif   /* HT_RWVFS */

#ifdef HT_EXTDEV
      if (vfd->file->method)
 4043f0c:	e0bffe17 	ldw	r2,-8(fp)
 4043f10:	10800117 	ldw	r2,4(r2)
 4043f14:	10800a17 	ldw	r2,40(r2)
 4043f18:	1005003a 	cmpeq	r2,r2,zero
 4043f1c:	10000a1e 	bne	r2,zero,4043f48 <vgetc_locked+0x7c>
      {
         struct vfroutines *  vfp   =  (struct  vfroutines*)   (vfd->file->method);
 4043f20:	e0bffe17 	ldw	r2,-8(fp)
 4043f24:	10800117 	ldw	r2,4(r2)
 4043f28:	10800a17 	ldw	r2,40(r2)
 4043f2c:	e0bffc15 	stw	r2,-16(fp)
         return (vfp->r_fgetc(vfd));
 4043f30:	e0bffc17 	ldw	r2,-16(fp)
 4043f34:	10800717 	ldw	r2,28(r2)
 4043f38:	e13ffe17 	ldw	r4,-8(fp)
 4043f3c:	103ee83a 	callr	r2
 4043f40:	e0bfff15 	stw	r2,-4(fp)
 4043f44:	00002306 	br	4043fd4 <vgetc_locked+0x108>
#endif   /* HT_EXTDEV */

#ifdef HT_RWVFS
      /* a freshly created file might not have a data buffer associated
         with it yet */
      if (vfd->file->data == NULL)
 4043f48:	e0bffe17 	ldw	r2,-8(fp)
 4043f4c:	10800117 	ldw	r2,4(r2)
 4043f50:	10800617 	ldw	r2,24(r2)
 4043f54:	1004c03a 	cmpne	r2,r2,zero
 4043f58:	1000031e 	bne	r2,zero,4043f68 <vgetc_locked+0x9c>
         return EOF;
 4043f5c:	00bfffc4 	movi	r2,-1
 4043f60:	e0bfff15 	stw	r2,-4(fp)
 4043f64:	00001b06 	br	4043fd4 <vgetc_locked+0x108>
      }
      else  /* HTML compression flag not set */
      {
#endif   /* HTML_COMPRESSION */
         /* Check to see if read has advanced to end of file */
         if (vfd->cmploc >= (vfd->file->data + vfd->file->comp_size))
 4043f68:	e0bffe17 	ldw	r2,-8(fp)
 4043f6c:	11000217 	ldw	r4,8(r2)
 4043f70:	e0bffe17 	ldw	r2,-8(fp)
 4043f74:	10800117 	ldw	r2,4(r2)
 4043f78:	10c00617 	ldw	r3,24(r2)
 4043f7c:	e0bffe17 	ldw	r2,-8(fp)
 4043f80:	10800117 	ldw	r2,4(r2)
 4043f84:	10800817 	ldw	r2,32(r2)
 4043f88:	1885883a 	add	r2,r3,r2
 4043f8c:	20800336 	bltu	r4,r2,4043f9c <vgetc_locked+0xd0>
            chr = EOF;
 4043f90:	00bfffc4 	movi	r2,-1
 4043f94:	e0bffd15 	stw	r2,-12(fp)
 4043f98:	00000806 	br	4043fbc <vgetc_locked+0xf0>
         else  /* else just get next char to return */
            chr = *(vfd->cmploc++);
 4043f9c:	e0bffe17 	ldw	r2,-8(fp)
 4043fa0:	10c00217 	ldw	r3,8(r2)
 4043fa4:	18800003 	ldbu	r2,0(r3)
 4043fa8:	10803fcc 	andi	r2,r2,255
 4043fac:	e0bffd15 	stw	r2,-12(fp)
 4043fb0:	18c00044 	addi	r3,r3,1
 4043fb4:	e0bffe17 	ldw	r2,-8(fp)
 4043fb8:	10c00215 	stw	r3,8(r2)
#ifdef HTML_COMPRESSION
      }  /* need to close brace form if...else; */
#endif   /* HTML_COMPRESSION */

      return chr;
 4043fbc:	e0bffd17 	ldw	r2,-12(fp)
 4043fc0:	e0bfff15 	stw	r2,-4(fp)
 4043fc4:	00000306 	br	4043fd4 <vgetc_locked+0x108>

#ifdef HT_LOCALFS
   /* default to call on local system */
   return(getc((FILE*)vfd));
#else
   dtrap(); /* can this happen? */
 4043fc8:	4025bb40 	call	4025bb4 <dtrap>
   return EOF;
 4043fcc:	00bfffc4 	movi	r2,-1
 4043fd0:	e0bfff15 	stw	r2,-4(fp)
 4043fd4:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
 4043fd8:	e037883a 	mov	sp,fp
 4043fdc:	dfc00117 	ldw	ra,4(sp)
 4043fe0:	df000017 	ldw	fp,0(sp)
 4043fe4:	dec00204 	addi	sp,sp,8
 4043fe8:	f800283a 	ret

04043fec <vgetc>:
 * RETURNS: 
 */

int
vgetc(VFILE * vfd)
{
 4043fec:	defffc04 	addi	sp,sp,-16
 4043ff0:	dfc00315 	stw	ra,12(sp)
 4043ff4:	df000215 	stw	fp,8(sp)
 4043ff8:	df000204 	addi	fp,sp,8
 4043ffc:	e13fff15 	stw	r4,-4(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 4044000:	01000144 	movi	r4,5
 4044004:	40261b00 	call	40261b0 <wait_app_sem>

   /* get the character */
   rc = vgetc_locked(vfd);
 4044008:	e13fff17 	ldw	r4,-4(fp)
 404400c:	4043ecc0 	call	4043ecc <vgetc_locked>
 4044010:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
 4044014:	01000144 	movi	r4,5
 4044018:	40262640 	call	4026264 <post_app_sem>
   return rc;
 404401c:	e0bffe17 	ldw	r2,-8(fp)
}
 4044020:	e037883a 	mov	sp,fp
 4044024:	dfc00117 	ldw	ra,4(sp)
 4044028:	df000017 	ldw	fp,0(sp)
 404402c:	dec00204 	addi	sp,sp,8
 4044030:	f800283a 	ret

04044034 <vfslookup_locked>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup_locked(char * name)
{
 4044034:	defffa04 	addi	sp,sp,-24
 4044038:	dfc00515 	stw	ra,20(sp)
 404403c:	df000415 	stw	fp,16(sp)
 4044040:	df000404 	addi	fp,sp,16
 4044044:	e13ffe15 	stw	r4,-8(fp)

#ifdef VFS_STRIPPATH
   char *   cp;

   /* If root path is prepended to name, skip past it */
   if (*name == '/' || *name == '\\')
 4044048:	e0bffe17 	ldw	r2,-8(fp)
 404404c:	10800003 	ldbu	r2,0(r2)
 4044050:	10803fcc 	andi	r2,r2,255
 4044054:	1080201c 	xori	r2,r2,128
 4044058:	10bfe004 	addi	r2,r2,-128
 404405c:	10800be0 	cmpeqi	r2,r2,47
 4044060:	1000071e 	bne	r2,zero,4044080 <vfslookup_locked+0x4c>
 4044064:	e0bffe17 	ldw	r2,-8(fp)
 4044068:	10800003 	ldbu	r2,0(r2)
 404406c:	10803fcc 	andi	r2,r2,255
 4044070:	1080201c 	xori	r2,r2,128
 4044074:	10bfe004 	addi	r2,r2,-128
 4044078:	10801718 	cmpnei	r2,r2,92
 404407c:	10001a1e 	bne	r2,zero,40440e8 <vfslookup_locked+0xb4>
   {
      cp = strippath(name);
 4044080:	e13ffe17 	ldw	r4,-8(fp)
 4044084:	40441b40 	call	40441b4 <strippath>
 4044088:	e0bffc15 	stw	r2,-16(fp)

      if (!cp) /* strippath coundn't match our path */
 404408c:	e0bffc17 	ldw	r2,-16(fp)
 4044090:	1004c03a 	cmpne	r2,r2,zero
 4044094:	1000121e 	bne	r2,zero,40440e0 <vfslookup_locked+0xac>
      {
         /* Files like "/hub47.gif" need to be taken care of */
         if (*name == '/' || *name == '\\')
 4044098:	e0bffe17 	ldw	r2,-8(fp)
 404409c:	10800003 	ldbu	r2,0(r2)
 40440a0:	10803fcc 	andi	r2,r2,255
 40440a4:	1080201c 	xori	r2,r2,128
 40440a8:	10bfe004 	addi	r2,r2,-128
 40440ac:	10800be0 	cmpeqi	r2,r2,47
 40440b0:	1000071e 	bne	r2,zero,40440d0 <vfslookup_locked+0x9c>
 40440b4:	e0bffe17 	ldw	r2,-8(fp)
 40440b8:	10800003 	ldbu	r2,0(r2)
 40440bc:	10803fcc 	andi	r2,r2,255
 40440c0:	1080201c 	xori	r2,r2,128
 40440c4:	10bfe004 	addi	r2,r2,-128
 40440c8:	10801718 	cmpnei	r2,r2,92
 40440cc:	1000061e 	bne	r2,zero,40440e8 <vfslookup_locked+0xb4>
            name++;
 40440d0:	e0bffe17 	ldw	r2,-8(fp)
 40440d4:	10800044 	addi	r2,r2,1
 40440d8:	e0bffe15 	stw	r2,-8(fp)
 40440dc:	00000206 	br	40440e8 <vfslookup_locked+0xb4>
      }
      else
         name = cp ;
 40440e0:	e0bffc17 	ldw	r2,-16(fp)
 40440e4:	e0bffe15 	stw	r2,-8(fp)
   }
#endif   /* VFS_STRIPPATH */

   /* see if there is a question mark in the file name */
   if (strchr(name,'?'))
 40440e8:	e13ffe17 	ldw	r4,-8(fp)
 40440ec:	01400fc4 	movi	r5,63
 40440f0:	400227c0 	call	400227c <strchr>
 40440f4:	1005003a 	cmpeq	r2,r2,zero
 40440f8:	1000031e 	bne	r2,zero,4044108 <vfslookup_locked+0xd4>
   {
      dtrap(); /* is this still allowed? */
 40440fc:	4025bb40 	call	4025bb4 <dtrap>
      return NULL;
 4044100:	e03fff15 	stw	zero,-4(fp)
 4044104:	00001306 	br	4044154 <vfslookup_locked+0x120>
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 4044108:	d0a85417 	ldw	r2,-24240(gp)
 404410c:	e0bffd15 	stw	r2,-12(fp)
 4044110:	00000c06 	br	4044144 <vfslookup_locked+0x110>
   {
      if (strcmp(name, vp->name) == 0)
 4044114:	e0bffd17 	ldw	r2,-12(fp)
 4044118:	11400104 	addi	r5,r2,4
 404411c:	e13ffe17 	ldw	r4,-8(fp)
 4044120:	40097900 	call	4009790 <strcmp>
 4044124:	1004c03a 	cmpne	r2,r2,zero
 4044128:	1000031e 	bne	r2,zero,4044138 <vfslookup_locked+0x104>
         return vp;
 404412c:	e0bffd17 	ldw	r2,-12(fp)
 4044130:	e0bfff15 	stw	r2,-4(fp)
 4044134:	00000706 	br	4044154 <vfslookup_locked+0x120>
   {
      dtrap(); /* is this still allowed? */
      return NULL;
   }

   for (vp = vfsfiles; vp; vp = vp->next)    /* search vfs list for name */
 4044138:	e0bffd17 	ldw	r2,-12(fp)
 404413c:	10800017 	ldw	r2,0(r2)
 4044140:	e0bffd15 	stw	r2,-12(fp)
 4044144:	e0bffd17 	ldw	r2,-12(fp)
 4044148:	1004c03a 	cmpne	r2,r2,zero
 404414c:	103ff11e 	bne	r2,zero,4044114 <vfslookup_locked+0xe0>
   {
      if (strcmp(name, vp->name) == 0)
         return vp;
   }

   return NULL;   /* fall to here if not found in for loop */
 4044150:	e03fff15 	stw	zero,-4(fp)
 4044154:	e0bfff17 	ldw	r2,-4(fp)
}
 4044158:	e037883a 	mov	sp,fp
 404415c:	dfc00117 	ldw	ra,4(sp)
 4044160:	df000017 	ldw	fp,0(sp)
 4044164:	dec00204 	addi	sp,sp,8
 4044168:	f800283a 	ret

0404416c <vfslookup>:
 * RETURNS: 
 */

struct vfs_file * 
vfslookup(char * name) 
{
 404416c:	defffc04 	addi	sp,sp,-16
 4044170:	dfc00315 	stw	ra,12(sp)
 4044174:	df000215 	stw	fp,8(sp)
 4044178:	df000204 	addi	fp,sp,8
 404417c:	e13fff15 	stw	r4,-4(fp)
   if (vfs_log_file_name)
      dprintf("vfslookup() passed >%s<\n",name);
#endif   /* VFS_UNIT_TEST */

   /* lock the VFS */
   vfs_lock();
 4044180:	01000144 	movi	r4,5
 4044184:	40261b00 	call	40261b0 <wait_app_sem>

   /* do the lookup */
   vp = vfslookup_locked(name);
 4044188:	e13fff17 	ldw	r4,-4(fp)
 404418c:	40440340 	call	4044034 <vfslookup_locked>
 4044190:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
 4044194:	01000144 	movi	r4,5
 4044198:	40262640 	call	4026264 <post_app_sem>
   return vp;
 404419c:	e0bffe17 	ldw	r2,-8(fp)
}
 40441a0:	e037883a 	mov	sp,fp
 40441a4:	dfc00117 	ldw	ra,4(sp)
 40441a8:	df000017 	ldw	fp,0(sp)
 40441ac:	dec00204 	addi	sp,sp,8
 40441b0:	f800283a 	ret

040441b4 <strippath>:
 * have the http_root_path prepended; or on any error. 
 */

char * 
strippath(char * name)
{
 40441b4:	defff804 	addi	sp,sp,-32
 40441b8:	dfc00715 	stw	ra,28(sp)
 40441bc:	df000615 	stw	fp,24(sp)
 40441c0:	df000604 	addi	fp,sp,24
 40441c4:	e13ffe15 	stw	r4,-8(fp)
   char *   path; /* pointer into system path */
   char *   ptmp; /* another pointer into path */
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
 40441c8:	e13ffe17 	ldw	r4,-8(fp)
 40441cc:	4020fb80 	call	4020fb8 <uslash>
 40441d0:	e0bffb15 	stw	r2,-20(fp)
   path = http_root_path; /* The servers root path, at least one UNIX slash */
 40441d4:	d0a05217 	ldw	r2,-32440(gp)
 40441d8:	e0bffd15 	stw	r2,-12(fp)
   while (*path && *ntmp)
 40441dc:	00003e06 	br	40442d8 <strippath+0x124>
   {
      while (*path == '/') path++;   /* strip leading slash */
 40441e0:	e0bffd17 	ldw	r2,-12(fp)
 40441e4:	10800044 	addi	r2,r2,1
 40441e8:	e0bffd15 	stw	r2,-12(fp)
 40441ec:	e0bffd17 	ldw	r2,-12(fp)
 40441f0:	10800003 	ldbu	r2,0(r2)
 40441f4:	10803fcc 	andi	r2,r2,255
 40441f8:	1080201c 	xori	r2,r2,128
 40441fc:	10bfe004 	addi	r2,r2,-128
 4044200:	10800be0 	cmpeqi	r2,r2,47
 4044204:	103ff61e 	bne	r2,zero,40441e0 <strippath+0x2c>
         if (*path == 0)
 4044208:	e0bffd17 	ldw	r2,-12(fp)
 404420c:	10800003 	ldbu	r2,0(r2)
 4044210:	10803fcc 	andi	r2,r2,255
 4044214:	1080201c 	xori	r2,r2,128
 4044218:	10bfe004 	addi	r2,r2,-128
 404421c:	1005003a 	cmpeq	r2,r2,zero
 4044220:	10003b1e 	bne	r2,zero,4044310 <strippath+0x15c>
         break;
      /* find number of chars in this directory layer's name */
      ptmp = strchr(path, '/');   /* location of next slash in path */
 4044224:	e13ffd17 	ldw	r4,-12(fp)
 4044228:	01400bc4 	movi	r5,47
 404422c:	400227c0 	call	400227c <strchr>
 4044230:	e0bffc15 	stw	r2,-16(fp)
      if (ptmp)
 4044234:	e0bffc17 	ldw	r2,-16(fp)
 4044238:	1005003a 	cmpeq	r2,r2,zero
 404423c:	1000051e 	bne	r2,zero,4044254 <strippath+0xa0>
         dirlen = ptmp - path;
 4044240:	e0bffc17 	ldw	r2,-16(fp)
 4044244:	e0fffd17 	ldw	r3,-12(fp)
 4044248:	10c5c83a 	sub	r2,r2,r3
 404424c:	e0bffa15 	stw	r2,-24(fp)
 4044250:	00000706 	br	4044270 <strippath+0xbc>
      else
         dirlen = strlen(path);
 4044254:	e13ffd17 	ldw	r4,-12(fp)
 4044258:	40029d00 	call	40029d0 <strlen>
 404425c:	e0bffa15 	stw	r2,-24(fp)

      while (*ntmp == '/') ntmp++;   /* strip leading slash */
 4044260:	00000306 	br	4044270 <strippath+0xbc>
 4044264:	e0bffb17 	ldw	r2,-20(fp)
 4044268:	10800044 	addi	r2,r2,1
 404426c:	e0bffb15 	stw	r2,-20(fp)
 4044270:	e0bffb17 	ldw	r2,-20(fp)
 4044274:	10800003 	ldbu	r2,0(r2)
 4044278:	10803fcc 	andi	r2,r2,255
 404427c:	1080201c 	xori	r2,r2,128
 4044280:	10bfe004 	addi	r2,r2,-128
 4044284:	10800be0 	cmpeqi	r2,r2,47
 4044288:	103ff61e 	bne	r2,zero,4044264 <strippath+0xb0>
         if (strncmp(ntmp, path, dirlen) == 0)
 404428c:	e1bffa17 	ldw	r6,-24(fp)
 4044290:	e13ffb17 	ldw	r4,-20(fp)
 4044294:	e17ffd17 	ldw	r5,-12(fp)
 4044298:	404616c0 	call	404616c <strncmp>
 404429c:	1004c03a 	cmpne	r2,r2,zero
 40442a0:	10000b1e 	bne	r2,zero,40442d0 <strippath+0x11c>
      {
         path += dirlen;
 40442a4:	e0bffa17 	ldw	r2,-24(fp)
 40442a8:	1007883a 	mov	r3,r2
 40442ac:	e0bffd17 	ldw	r2,-12(fp)
 40442b0:	10c5883a 	add	r2,r2,r3
 40442b4:	e0bffd15 	stw	r2,-12(fp)
         ntmp += dirlen;
 40442b8:	e0bffa17 	ldw	r2,-24(fp)
 40442bc:	1007883a 	mov	r3,r2
 40442c0:	e0bffb17 	ldw	r2,-20(fp)
 40442c4:	10c5883a 	add	r2,r2,r3
 40442c8:	e0bffb15 	stw	r2,-20(fp)
 40442cc:	00000206 	br	40442d8 <strippath+0x124>
      }
      else
         return NULL;   /* didn't match */
 40442d0:	e03fff15 	stw	zero,-4(fp)
 40442d4:	00002b06 	br	4044384 <strippath+0x1d0>
   char *   ntmp; /* pointer into name text */
   int   dirlen;

   ntmp = uslash(name);      /* uslash() is defined in misclib\in_utils.c */
   path = http_root_path; /* The servers root path, at least one UNIX slash */
   while (*path && *ntmp)
 40442d8:	e0bffd17 	ldw	r2,-12(fp)
 40442dc:	10800003 	ldbu	r2,0(r2)
 40442e0:	10803fcc 	andi	r2,r2,255
 40442e4:	1080201c 	xori	r2,r2,128
 40442e8:	10bfe004 	addi	r2,r2,-128
 40442ec:	1005003a 	cmpeq	r2,r2,zero
 40442f0:	1000071e 	bne	r2,zero,4044310 <strippath+0x15c>
 40442f4:	e0bffb17 	ldw	r2,-20(fp)
 40442f8:	10800003 	ldbu	r2,0(r2)
 40442fc:	10803fcc 	andi	r2,r2,255
 4044300:	1080201c 	xori	r2,r2,128
 4044304:	10bfe004 	addi	r2,r2,-128
 4044308:	1004c03a 	cmpne	r2,r2,zero
 404430c:	103fb71e 	bne	r2,zero,40441ec <strippath+0x38>
         ntmp += dirlen;
      }
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
 4044310:	e0bffd17 	ldw	r2,-12(fp)
 4044314:	10800003 	ldbu	r2,0(r2)
 4044318:	10803fcc 	andi	r2,r2,255
 404431c:	1080201c 	xori	r2,r2,128
 4044320:	10bfe004 	addi	r2,r2,-128
 4044324:	1004c03a 	cmpne	r2,r2,zero
 4044328:	1000151e 	bne	r2,zero,4044380 <strippath+0x1cc>
   {
      while (*ntmp == '\\' || *ntmp == '/')
 404432c:	00000306 	br	404433c <strippath+0x188>
         ntmp++;
 4044330:	e0bffb17 	ldw	r2,-20(fp)
 4044334:	10800044 	addi	r2,r2,1
 4044338:	e0bffb15 	stw	r2,-20(fp)
      else
         return NULL;   /* didn't match */
   }
   if (*path == '\0')
   {
      while (*ntmp == '\\' || *ntmp == '/')
 404433c:	e0bffb17 	ldw	r2,-20(fp)
 4044340:	10800003 	ldbu	r2,0(r2)
 4044344:	10803fcc 	andi	r2,r2,255
 4044348:	1080201c 	xori	r2,r2,128
 404434c:	10bfe004 	addi	r2,r2,-128
 4044350:	10801720 	cmpeqi	r2,r2,92
 4044354:	103ff61e 	bne	r2,zero,4044330 <strippath+0x17c>
 4044358:	e0bffb17 	ldw	r2,-20(fp)
 404435c:	10800003 	ldbu	r2,0(r2)
 4044360:	10803fcc 	andi	r2,r2,255
 4044364:	1080201c 	xori	r2,r2,128
 4044368:	10bfe004 	addi	r2,r2,-128
 404436c:	10800be0 	cmpeqi	r2,r2,47
 4044370:	103fef1e 	bne	r2,zero,4044330 <strippath+0x17c>
         ntmp++;
      return ntmp;
 4044374:	e0bffb17 	ldw	r2,-20(fp)
 4044378:	e0bfff15 	stw	r2,-4(fp)
 404437c:	00000106 	br	4044384 <strippath+0x1d0>
   }
   else
      return NULL;
 4044380:	e03fff15 	stw	zero,-4(fp)
 4044384:	e0bfff17 	ldw	r2,-4(fp)
}
 4044388:	e037883a 	mov	sp,fp
 404438c:	dfc00117 	ldw	ra,4(sp)
 4044390:	df000017 	ldw	fp,0(sp)
 4044394:	dec00204 	addi	sp,sp,8
 4044398:	f800283a 	ret

0404439c <isvfile_locked>:
 * RETURNS: 
 */

int
isvfile_locked(VFILE * vfp)
{
 404439c:	defffc04 	addi	sp,sp,-16
 40443a0:	df000315 	stw	fp,12(sp)
 40443a4:	df000304 	addi	fp,sp,12
 40443a8:	e13ffe15 	stw	r4,-8(fp)
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 40443ac:	d0a85317 	ldw	r2,-24244(gp)
 40443b0:	e0bffd15 	stw	r2,-12(fp)
 40443b4:	00000906 	br	40443dc <isvfile_locked+0x40>
      if (vtmp == vfp)
 40443b8:	e0fffd17 	ldw	r3,-12(fp)
 40443bc:	e0bffe17 	ldw	r2,-8(fp)
 40443c0:	1880031e 	bne	r3,r2,40443d0 <isvfile_locked+0x34>
      return TRUE;
 40443c4:	00800044 	movi	r2,1
 40443c8:	e0bfff15 	stw	r2,-4(fp)
 40443cc:	00000706 	br	40443ec <isvfile_locked+0x50>
int
isvfile_locked(VFILE * vfp)
{
   VFILE * vtmp;

   for (vtmp = vfiles; vtmp; vtmp = vtmp->next)
 40443d0:	e0bffd17 	ldw	r2,-12(fp)
 40443d4:	10800017 	ldw	r2,0(r2)
 40443d8:	e0bffd15 	stw	r2,-12(fp)
 40443dc:	e0bffd17 	ldw	r2,-12(fp)
 40443e0:	1004c03a 	cmpne	r2,r2,zero
 40443e4:	103ff41e 	bne	r2,zero,40443b8 <isvfile_locked+0x1c>
      if (vtmp == vfp)
      return TRUE;

   return FALSE;  /* passed pointer not found in list */
 40443e8:	e03fff15 	stw	zero,-4(fp)
 40443ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40443f0:	e037883a 	mov	sp,fp
 40443f4:	df000017 	ldw	fp,0(sp)
 40443f8:	dec00104 	addi	sp,sp,4
 40443fc:	f800283a 	ret

04044400 <isvfile>:
 * RETURNS: 
 */

int
isvfile(VFILE * vfp)
{
 4044400:	defffc04 	addi	sp,sp,-16
 4044404:	dfc00315 	stw	ra,12(sp)
 4044408:	df000215 	stw	fp,8(sp)
 404440c:	df000204 	addi	fp,sp,8
 4044410:	e13fff15 	stw	r4,-4(fp)
   int   rc;

   /* lock the VFS */
   vfs_lock();
 4044414:	01000144 	movi	r4,5
 4044418:	40261b00 	call	40261b0 <wait_app_sem>

   /* do the lookup */
   rc = isvfile_locked(vfp);
 404441c:	e13fff17 	ldw	r4,-4(fp)
 4044420:	404439c0 	call	404439c <isvfile_locked>
 4044424:	e0bffe15 	stw	r2,-8(fp)

   /* unlock the VFS */
   vfs_unlock();
 4044428:	01000144 	movi	r4,5
 404442c:	40262640 	call	4026264 <post_app_sem>
   return rc;
 4044430:	e0bffe17 	ldw	r2,-8(fp)
}
 4044434:	e037883a 	mov	sp,fp
 4044438:	dfc00117 	ldw	ra,4(sp)
 404443c:	df000017 	ldw	fp,0(sp)
 4044440:	dec00204 	addi	sp,sp,8
 4044444:	f800283a 	ret

04044448 <vferror>:
 * RETURNS: 
 */

int
vferror(VFILE * vfd)
{
 4044448:	defffc04 	addi	sp,sp,-16
 404444c:	dfc00315 	stw	ra,12(sp)
 4044450:	df000215 	stw	fp,8(sp)
 4044454:	df000204 	addi	fp,sp,8
 4044458:	e13ffe15 	stw	r4,-8(fp)
   /* lock the VFS */
   vfs_lock();
 404445c:	01000144 	movi	r4,5
 4044460:	40261b00 	call	40261b0 <wait_app_sem>

   if (isvfile_locked(vfd))
 4044464:	e13ffe17 	ldw	r4,-8(fp)
 4044468:	404439c0 	call	404439c <isvfile_locked>
 404446c:	1005003a 	cmpeq	r2,r2,zero
 4044470:	1000061e 	bne	r2,zero,404448c <vferror+0x44>
   {
      vfs_unlock();
 4044474:	01000144 	movi	r4,5
 4044478:	40262640 	call	4026264 <post_app_sem>

      return vfd->error;
 404447c:	e0bffe17 	ldw	r2,-8(fp)
 4044480:	10800417 	ldw	r2,16(r2)
 4044484:	e0bfff15 	stw	r2,-4(fp)
 4044488:	00000406 	br	404449c <vferror+0x54>
   }

   vfs_unlock();
 404448c:	01000144 	movi	r4,5
 4044490:	40262640 	call	4026264 <post_app_sem>

#ifdef HT_LOCALFS
   return(ferror((FILE*)vfd));
#else /* not a VFILE, and no local FS */
   return -1;  /* should this be an error? */
 4044494:	00bfffc4 	movi	r2,-1
 4044498:	e0bfff15 	stw	r2,-4(fp)
 404449c:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* HT_LOCALFS */
}
 40444a0:	e037883a 	mov	sp,fp
 40444a4:	dfc00117 	ldw	ra,4(sp)
 40444a8:	df000017 	ldw	fp,0(sp)
 40444ac:	dec00204 	addi	sp,sp,8
 40444b0:	f800283a 	ret

040444b4 <vclearerr>:
 *
 * RETURNS: 
 */

void vclearerr(VFILE * vfd)
{
 40444b4:	defffd04 	addi	sp,sp,-12
 40444b8:	dfc00215 	stw	ra,8(sp)
 40444bc:	df000115 	stw	fp,4(sp)
 40444c0:	df000104 	addi	fp,sp,4
 40444c4:	e13fff15 	stw	r4,-4(fp)
   /* lock the VFS */
   vfs_lock();
 40444c8:	01000144 	movi	r4,5
 40444cc:	40261b00 	call	40261b0 <wait_app_sem>

   if (isvfile_locked(vfd))
 40444d0:	e13fff17 	ldw	r4,-4(fp)
 40444d4:	404439c0 	call	404439c <isvfile_locked>
 40444d8:	1005003a 	cmpeq	r2,r2,zero
 40444dc:	1000051e 	bne	r2,zero,40444f4 <vclearerr+0x40>
   {
      vfs_unlock();
 40444e0:	01000144 	movi	r4,5
 40444e4:	40262640 	call	4026264 <post_app_sem>

      vfd->error = 0;
 40444e8:	e0bfff17 	ldw	r2,-4(fp)
 40444ec:	10000415 	stw	zero,16(r2)
      return;
 40444f0:	00000206 	br	40444fc <vclearerr+0x48>
   }

   vfs_unlock();
 40444f4:	01000144 	movi	r4,5
 40444f8:	40262640 	call	4026264 <post_app_sem>

#ifdef HT_LOCALFS
   clearerr((FILE *) vfd);
#endif   /* HT_LOCALFS */
}
 40444fc:	e037883a 	mov	sp,fp
 4044500:	dfc00117 	ldw	ra,4(sp)
 4044504:	df000017 	ldw	fp,0(sp)
 4044508:	dec00204 	addi	sp,sp,8
 404450c:	f800283a 	ret

04044510 <prep_vfs>:
 * PARAMS: NONE
 *
 * RETURNS: Error Code or 0 for OK
 */
int prep_vfs(void)
{
 4044510:	defffe04 	addi	sp,sp,-8
 4044514:	df000115 	stw	fp,4(sp)
 4044518:	df000104 	addi	fp,sp,4
int e = 0;
 404451c:	e03fff15 	stw	zero,-4(fp)
   {
      dprintf("unable to install VFS NVPARMS, reconfigure nv_formats[]\n");
      dtrap();
   }
#endif   /* INCLUDE_NVPARMS */
   return e;
 4044520:	e0bfff17 	ldw	r2,-4(fp)
}
 4044524:	e037883a 	mov	sp,fp
 4044528:	df000017 	ldw	fp,0(sp)
 404452c:	dec00104 	addi	sp,sp,4
 4044530:	f800283a 	ret

04044534 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4044534:	defffb04 	addi	sp,sp,-20
 4044538:	df000415 	stw	fp,16(sp)
 404453c:	df000404 	addi	fp,sp,16
 4044540:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4044544:	008000c4 	movi	r2,3
 4044548:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 404454c:	e0fffc17 	ldw	r3,-16(fp)
 4044550:	008003f4 	movhi	r2,15
 4044554:	10909004 	addi	r2,r2,16960
 4044558:	1887383a 	mul	r3,r3,r2
 404455c:	00817db4 	movhi	r2,1526
 4044560:	10b84004 	addi	r2,r2,-7936
 4044564:	10c7203a 	divu	r3,r2,r3
 4044568:	00a00034 	movhi	r2,32768
 404456c:	10bfffc4 	addi	r2,r2,-1
 4044570:	10c7203a 	divu	r3,r2,r3
 4044574:	e0bfff17 	ldw	r2,-4(fp)
 4044578:	10c5203a 	divu	r2,r2,r3
 404457c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4044580:	e0bffd17 	ldw	r2,-12(fp)
 4044584:	1005003a 	cmpeq	r2,r2,zero
 4044588:	1000251e 	bne	r2,zero,4044620 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
 404458c:	e03ffe15 	stw	zero,-8(fp)
 4044590:	00001406 	br	40445e4 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4044594:	00a00034 	movhi	r2,32768
 4044598:	10bfffc4 	addi	r2,r2,-1
 404459c:	10bfffc4 	addi	r2,r2,-1
 40445a0:	103ffe1e 	bne	r2,zero,404459c <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40445a4:	e0fffc17 	ldw	r3,-16(fp)
 40445a8:	008003f4 	movhi	r2,15
 40445ac:	10909004 	addi	r2,r2,16960
 40445b0:	1887383a 	mul	r3,r3,r2
 40445b4:	00817db4 	movhi	r2,1526
 40445b8:	10b84004 	addi	r2,r2,-7936
 40445bc:	10c7203a 	divu	r3,r2,r3
 40445c0:	00a00034 	movhi	r2,32768
 40445c4:	10bfffc4 	addi	r2,r2,-1
 40445c8:	10c7203a 	divu	r3,r2,r3
 40445cc:	e0bfff17 	ldw	r2,-4(fp)
 40445d0:	10c5c83a 	sub	r2,r2,r3
 40445d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40445d8:	e0bffe17 	ldw	r2,-8(fp)
 40445dc:	10800044 	addi	r2,r2,1
 40445e0:	e0bffe15 	stw	r2,-8(fp)
 40445e4:	e0fffe17 	ldw	r3,-8(fp)
 40445e8:	e0bffd17 	ldw	r2,-12(fp)
 40445ec:	18bfe916 	blt	r3,r2,4044594 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40445f0:	e0fffc17 	ldw	r3,-16(fp)
 40445f4:	008003f4 	movhi	r2,15
 40445f8:	10909004 	addi	r2,r2,16960
 40445fc:	1887383a 	mul	r3,r3,r2
 4044600:	00817db4 	movhi	r2,1526
 4044604:	10b84004 	addi	r2,r2,-7936
 4044608:	10c7203a 	divu	r3,r2,r3
 404460c:	e0bfff17 	ldw	r2,-4(fp)
 4044610:	1885383a 	mul	r2,r3,r2
 4044614:	10bfffc4 	addi	r2,r2,-1
 4044618:	103ffe1e 	bne	r2,zero,4044614 <alt_busy_sleep+0xe0>
 404461c:	00000b06 	br	404464c <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4044620:	e0fffc17 	ldw	r3,-16(fp)
 4044624:	008003f4 	movhi	r2,15
 4044628:	10909004 	addi	r2,r2,16960
 404462c:	1887383a 	mul	r3,r3,r2
 4044630:	00817db4 	movhi	r2,1526
 4044634:	10b84004 	addi	r2,r2,-7936
 4044638:	10c7203a 	divu	r3,r2,r3
 404463c:	e0bfff17 	ldw	r2,-4(fp)
 4044640:	1885383a 	mul	r2,r3,r2
 4044644:	10bfffc4 	addi	r2,r2,-1
 4044648:	00bffe16 	blt	zero,r2,4044644 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 404464c:	0005883a 	mov	r2,zero
}
 4044650:	e037883a 	mov	sp,fp
 4044654:	df000017 	ldw	fp,0(sp)
 4044658:	dec00104 	addi	sp,sp,4
 404465c:	f800283a 	ret

04044660 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 4044660:	defffb04 	addi	sp,sp,-20
 4044664:	df000415 	stw	fp,16(sp)
 4044668:	df000404 	addi	fp,sp,16
 404466c:	e13ffe15 	stw	r4,-8(fp)
 4044670:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
 4044674:	e0fffe17 	ldw	r3,-8(fp)
 4044678:	e0bfff17 	ldw	r2,-4(fp)
 404467c:	1885883a 	add	r2,r3,r2
 4044680:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 4044684:	e0bffe17 	ldw	r2,-8(fp)
 4044688:	e0bffd15 	stw	r2,-12(fp)
 404468c:	00000506 	br	40446a4 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 4044690:	e0bffd17 	ldw	r2,-12(fp)
 4044694:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 4044698:	e0bffd17 	ldw	r2,-12(fp)
 404469c:	10800804 	addi	r2,r2,32
 40446a0:	e0bffd15 	stw	r2,-12(fp)
 40446a4:	e0fffd17 	ldw	r3,-12(fp)
 40446a8:	e0bffc17 	ldw	r2,-16(fp)
 40446ac:	18bff836 	bltu	r3,r2,4044690 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 40446b0:	e0bffe17 	ldw	r2,-8(fp)
 40446b4:	108007cc 	andi	r2,r2,31
 40446b8:	1005003a 	cmpeq	r2,r2,zero
 40446bc:	1000021e 	bne	r2,zero,40446c8 <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
 40446c0:	e0bffd17 	ldw	r2,-12(fp)
 40446c4:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40446c8:	e037883a 	mov	sp,fp
 40446cc:	df000017 	ldw	fp,0(sp)
 40446d0:	dec00104 	addi	sp,sp,4
 40446d4:	f800283a 	ret

040446d8 <alt_fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 40446d8:	defff404 	addi	sp,sp,-48
 40446dc:	dfc00915 	stw	ra,36(sp)
 40446e0:	df000815 	stw	fp,32(sp)
 40446e4:	df000804 	addi	fp,sp,32
 40446e8:	e13ffb15 	stw	r4,-20(fp)
 40446ec:	e1800215 	stw	r6,8(fp)
 40446f0:	e1c00315 	stw	r7,12(fp)
 40446f4:	e17ffc15 	stw	r5,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40446f8:	e0bffb17 	ldw	r2,-20(fp)
 40446fc:	1004803a 	cmplt	r2,r2,zero
 4044700:	1000081e 	bne	r2,zero,4044724 <alt_fcntl+0x4c>
 4044704:	e0bffb17 	ldw	r2,-20(fp)
 4044708:	10800324 	muli	r2,r2,12
 404470c:	1007883a 	mov	r3,r2
 4044710:	00810174 	movhi	r2,1029
 4044714:	10b8fa04 	addi	r2,r2,-7192
 4044718:	1887883a 	add	r3,r3,r2
 404471c:	e0fffe15 	stw	r3,-8(fp)
 4044720:	00000106 	br	4044728 <alt_fcntl+0x50>
 4044724:	e03ffe15 	stw	zero,-8(fp)
 4044728:	e0bffe17 	ldw	r2,-8(fp)
 404472c:	e0bff915 	stw	r2,-28(fp)
  
  if (fd)
 4044730:	e0bff917 	ldw	r2,-28(fp)
 4044734:	1005003a 	cmpeq	r2,r2,zero
 4044738:	1000301e 	bne	r2,zero,40447fc <alt_fcntl+0x124>
  {
    switch (cmd)
 404473c:	e0fffc17 	ldw	r3,-16(fp)
 4044740:	e0ffff15 	stw	r3,-4(fp)
 4044744:	e0ffff17 	ldw	r3,-4(fp)
 4044748:	188000e0 	cmpeqi	r2,r3,3
 404474c:	1000041e 	bne	r2,zero,4044760 <alt_fcntl+0x88>
 4044750:	e0ffff17 	ldw	r3,-4(fp)
 4044754:	18800120 	cmpeqi	r2,r3,4
 4044758:	1000081e 	bne	r2,zero,404477c <alt_fcntl+0xa4>
 404475c:	00002006 	br	40447e0 <alt_fcntl+0x108>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 4044760:	e0bff917 	ldw	r2,-28(fp)
 4044764:	10c00217 	ldw	r3,8(r2)
 4044768:	00900034 	movhi	r2,16384
 404476c:	10bfffc4 	addi	r2,r2,-1
 4044770:	1886703a 	and	r3,r3,r2
 4044774:	e0fffd15 	stw	r3,-12(fp)
 4044778:	00002606 	br	4044814 <alt_fcntl+0x13c>
    case F_SETFL:
      va_start(argp, cmd);
 404477c:	e0800204 	addi	r2,fp,8
 4044780:	e0bffa15 	stw	r2,-24(fp)
      flags = va_arg(argp, long);
 4044784:	e0fffa17 	ldw	r3,-24(fp)
 4044788:	18800104 	addi	r2,r3,4
 404478c:	e0bffa15 	stw	r2,-24(fp)
 4044790:	1805883a 	mov	r2,r3
 4044794:	10800017 	ldw	r2,0(r2)
 4044798:	e0bff815 	stw	r2,-32(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 404479c:	e0bff917 	ldw	r2,-28(fp)
 40447a0:	10c00217 	ldw	r3,8(r2)
 40447a4:	00affdc4 	movi	r2,-16393
 40447a8:	1886703a 	and	r3,r3,r2
 40447ac:	e0bff917 	ldw	r2,-28(fp)
 40447b0:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 40447b4:	e0bff917 	ldw	r2,-28(fp)
 40447b8:	10800217 	ldw	r2,8(r2)
 40447bc:	1007883a 	mov	r3,r2
 40447c0:	e0bff817 	ldw	r2,-32(fp)
 40447c4:	1090020c 	andi	r2,r2,16392
 40447c8:	1884b03a 	or	r2,r3,r2
 40447cc:	1007883a 	mov	r3,r2
 40447d0:	e0bff917 	ldw	r2,-28(fp)
 40447d4:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
 40447d8:	e03ffd15 	stw	zero,-12(fp)
 40447dc:	00000d06 	br	4044814 <alt_fcntl+0x13c>
    default:
      ALT_ERRNO = EINVAL;
 40447e0:	404482c0 	call	404482c <alt_get_errno>
 40447e4:	1007883a 	mov	r3,r2
 40447e8:	00800584 	movi	r2,22
 40447ec:	18800015 	stw	r2,0(r3)
      return -1;
 40447f0:	00bfffc4 	movi	r2,-1
 40447f4:	e0bffd15 	stw	r2,-12(fp)
 40447f8:	00000606 	br	4044814 <alt_fcntl+0x13c>
    }
  }

  ALT_ERRNO = EBADFD;
 40447fc:	404482c0 	call	404482c <alt_get_errno>
 4044800:	1007883a 	mov	r3,r2
 4044804:	00801444 	movi	r2,81
 4044808:	18800015 	stw	r2,0(r3)
  return -1;
 404480c:	00ffffc4 	movi	r3,-1
 4044810:	e0fffd15 	stw	r3,-12(fp)
 4044814:	e0bffd17 	ldw	r2,-12(fp)
}
 4044818:	e037883a 	mov	sp,fp
 404481c:	dfc00117 	ldw	ra,4(sp)
 4044820:	df000017 	ldw	fp,0(sp)
 4044824:	dec00404 	addi	sp,sp,16
 4044828:	f800283a 	ret

0404482c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404482c:	defffd04 	addi	sp,sp,-12
 4044830:	dfc00215 	stw	ra,8(sp)
 4044834:	df000115 	stw	fp,4(sp)
 4044838:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 404483c:	00810174 	movhi	r2,1029
 4044840:	10ba0204 	addi	r2,r2,-6136
 4044844:	10800017 	ldw	r2,0(r2)
 4044848:	1005003a 	cmpeq	r2,r2,zero
 404484c:	1000061e 	bne	r2,zero,4044868 <alt_get_errno+0x3c>
 4044850:	00810174 	movhi	r2,1029
 4044854:	10ba0204 	addi	r2,r2,-6136
 4044858:	10800017 	ldw	r2,0(r2)
 404485c:	103ee83a 	callr	r2
 4044860:	e0bfff15 	stw	r2,-4(fp)
 4044864:	00000306 	br	4044874 <alt_get_errno+0x48>
 4044868:	00810174 	movhi	r2,1029
 404486c:	10819f04 	addi	r2,r2,1660
 4044870:	e0bfff15 	stw	r2,-4(fp)
 4044874:	e0bfff17 	ldw	r2,-4(fp)
}
 4044878:	e037883a 	mov	sp,fp
 404487c:	dfc00117 	ldw	ra,4(sp)
 4044880:	df000017 	ldw	fp,0(sp)
 4044884:	dec00204 	addi	sp,sp,8
 4044888:	f800283a 	ret

0404488c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 404488c:	defffa04 	addi	sp,sp,-24
 4044890:	dfc00515 	stw	ra,20(sp)
 4044894:	df000415 	stw	fp,16(sp)
 4044898:	df000404 	addi	fp,sp,16
 404489c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40448a0:	00810174 	movhi	r2,1029
 40448a4:	10b9fd04 	addi	r2,r2,-6156
 40448a8:	10800017 	ldw	r2,0(r2)
 40448ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40448b0:	00003306 	br	4044980 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 40448b4:	e0bffd17 	ldw	r2,-12(fp)
 40448b8:	11000217 	ldw	r4,8(r2)
 40448bc:	40029d00 	call	40029d0 <strlen>
 40448c0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 40448c4:	e0bffd17 	ldw	r2,-12(fp)
 40448c8:	10c00217 	ldw	r3,8(r2)
 40448cc:	e0bffc17 	ldw	r2,-16(fp)
 40448d0:	1885883a 	add	r2,r3,r2
 40448d4:	10bfffc4 	addi	r2,r2,-1
 40448d8:	10800003 	ldbu	r2,0(r2)
 40448dc:	10803fcc 	andi	r2,r2,255
 40448e0:	1080201c 	xori	r2,r2,128
 40448e4:	10bfe004 	addi	r2,r2,-128
 40448e8:	10800bd8 	cmpnei	r2,r2,47
 40448ec:	1000031e 	bne	r2,zero,40448fc <alt_find_file+0x70>
    {
      len -= 1;
 40448f0:	e0bffc17 	ldw	r2,-16(fp)
 40448f4:	10bfffc4 	addi	r2,r2,-1
 40448f8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40448fc:	e0bffc17 	ldw	r2,-16(fp)
 4044900:	1007883a 	mov	r3,r2
 4044904:	e0bffe17 	ldw	r2,-8(fp)
 4044908:	1885883a 	add	r2,r3,r2
 404490c:	10800003 	ldbu	r2,0(r2)
 4044910:	10803fcc 	andi	r2,r2,255
 4044914:	1080201c 	xori	r2,r2,128
 4044918:	10bfe004 	addi	r2,r2,-128
 404491c:	10800be0 	cmpeqi	r2,r2,47
 4044920:	10000a1e 	bne	r2,zero,404494c <alt_find_file+0xc0>
 4044924:	e0bffc17 	ldw	r2,-16(fp)
 4044928:	1007883a 	mov	r3,r2
 404492c:	e0bffe17 	ldw	r2,-8(fp)
 4044930:	1885883a 	add	r2,r3,r2
 4044934:	10800003 	ldbu	r2,0(r2)
 4044938:	10803fcc 	andi	r2,r2,255
 404493c:	1080201c 	xori	r2,r2,128
 4044940:	10bfe004 	addi	r2,r2,-128
 4044944:	1004c03a 	cmpne	r2,r2,zero
 4044948:	10000a1e 	bne	r2,zero,4044974 <alt_find_file+0xe8>
 404494c:	e0bffd17 	ldw	r2,-12(fp)
 4044950:	11000217 	ldw	r4,8(r2)
 4044954:	e1bffc17 	ldw	r6,-16(fp)
 4044958:	e17ffe17 	ldw	r5,-8(fp)
 404495c:	404600c0 	call	404600c <memcmp>
 4044960:	1004c03a 	cmpne	r2,r2,zero
 4044964:	1000031e 	bne	r2,zero,4044974 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4044968:	e0bffd17 	ldw	r2,-12(fp)
 404496c:	e0bfff15 	stw	r2,-4(fp)
 4044970:	00000806 	br	4044994 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4044974:	e0bffd17 	ldw	r2,-12(fp)
 4044978:	10800017 	ldw	r2,0(r2)
 404497c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4044980:	00c10174 	movhi	r3,1029
 4044984:	18f9fd04 	addi	r3,r3,-6156
 4044988:	e0bffd17 	ldw	r2,-12(fp)
 404498c:	10ffc91e 	bne	r2,r3,40448b4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4044990:	e03fff15 	stw	zero,-4(fp)
 4044994:	e0bfff17 	ldw	r2,-4(fp)
}
 4044998:	e037883a 	mov	sp,fp
 404499c:	dfc00117 	ldw	ra,4(sp)
 40449a0:	df000017 	ldw	fp,0(sp)
 40449a4:	dec00204 	addi	sp,sp,8
 40449a8:	f800283a 	ret

040449ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40449ac:	defff804 	addi	sp,sp,-32
 40449b0:	dfc00715 	stw	ra,28(sp)
 40449b4:	df000615 	stw	fp,24(sp)
 40449b8:	df000604 	addi	fp,sp,24
 40449bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40449c0:	00bffa04 	movi	r2,-24
 40449c4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 40449c8:	00810174 	movhi	r2,1029
 40449cc:	1081f204 	addi	r2,r2,1992
 40449d0:	10800017 	ldw	r2,0(r2)
 40449d4:	e0bffa15 	stw	r2,-24(fp)
 40449d8:	e03ffb0d 	sth	zero,-20(fp)
 40449dc:	e17ffb0b 	ldhu	r5,-20(fp)
 40449e0:	e1bffe04 	addi	r6,fp,-8
 40449e4:	e13ffa17 	ldw	r4,-24(fp)
 40449e8:	40126f00 	call	40126f0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40449ec:	e03ffd15 	stw	zero,-12(fp)
 40449f0:	00001e06 	br	4044a6c <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 40449f4:	e0bffd17 	ldw	r2,-12(fp)
 40449f8:	00c10174 	movhi	r3,1029
 40449fc:	18f8fa04 	addi	r3,r3,-7192
 4044a00:	10800324 	muli	r2,r2,12
 4044a04:	10c5883a 	add	r2,r2,r3
 4044a08:	10800017 	ldw	r2,0(r2)
 4044a0c:	1004c03a 	cmpne	r2,r2,zero
 4044a10:	1000131e 	bne	r2,zero,4044a60 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 4044a14:	e0bffd17 	ldw	r2,-12(fp)
 4044a18:	00c10174 	movhi	r3,1029
 4044a1c:	18f8fa04 	addi	r3,r3,-7192
 4044a20:	10800324 	muli	r2,r2,12
 4044a24:	10c7883a 	add	r3,r2,r3
 4044a28:	e0bfff17 	ldw	r2,-4(fp)
 4044a2c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 4044a30:	00810174 	movhi	r2,1029
 4044a34:	10ba0104 	addi	r2,r2,-6140
 4044a38:	10c00017 	ldw	r3,0(r2)
 4044a3c:	e0bffd17 	ldw	r2,-12(fp)
 4044a40:	1880040e 	bge	r3,r2,4044a54 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 4044a44:	00c10174 	movhi	r3,1029
 4044a48:	18fa0104 	addi	r3,r3,-6140
 4044a4c:	e0bffd17 	ldw	r2,-12(fp)
 4044a50:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4044a54:	e0bffd17 	ldw	r2,-12(fp)
 4044a58:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 4044a5c:	00000606 	br	4044a78 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4044a60:	e0bffd17 	ldw	r2,-12(fp)
 4044a64:	10800044 	addi	r2,r2,1
 4044a68:	e0bffd15 	stw	r2,-12(fp)
 4044a6c:	e0bffd17 	ldw	r2,-12(fp)
 4044a70:	10800810 	cmplti	r2,r2,32
 4044a74:	103fdf1e 	bne	r2,zero,40449f4 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 4044a78:	00810174 	movhi	r2,1029
 4044a7c:	1081f204 	addi	r2,r2,1992
 4044a80:	11000017 	ldw	r4,0(r2)
 4044a84:	4012ae80 	call	4012ae8 <OSSemPost>

  return rc;
 4044a88:	e0bffc17 	ldw	r2,-16(fp)
}
 4044a8c:	e037883a 	mov	sp,fp
 4044a90:	dfc00117 	ldw	ra,4(sp)
 4044a94:	df000017 	ldw	fp,0(sp)
 4044a98:	dec00204 	addi	sp,sp,8
 4044a9c:	f800283a 	ret

04044aa0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4044aa0:	defffb04 	addi	sp,sp,-20
 4044aa4:	df000415 	stw	fp,16(sp)
 4044aa8:	df000404 	addi	fp,sp,16
 4044aac:	e13ffe15 	stw	r4,-8(fp)
 4044ab0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4044ab4:	e0bfff17 	ldw	r2,-4(fp)
 4044ab8:	10840070 	cmpltui	r2,r2,4097
 4044abc:	1000021e 	bne	r2,zero,4044ac8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4044ac0:	00840004 	movi	r2,4096
 4044ac4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4044ac8:	e0fffe17 	ldw	r3,-8(fp)
 4044acc:	e0bfff17 	ldw	r2,-4(fp)
 4044ad0:	1885883a 	add	r2,r3,r2
 4044ad4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4044ad8:	e0bffe17 	ldw	r2,-8(fp)
 4044adc:	e0bffd15 	stw	r2,-12(fp)
 4044ae0:	00000506 	br	4044af8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4044ae4:	e0bffd17 	ldw	r2,-12(fp)
 4044ae8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4044aec:	e0bffd17 	ldw	r2,-12(fp)
 4044af0:	10800804 	addi	r2,r2,32
 4044af4:	e0bffd15 	stw	r2,-12(fp)
 4044af8:	e0fffd17 	ldw	r3,-12(fp)
 4044afc:	e0bffc17 	ldw	r2,-16(fp)
 4044b00:	18bff836 	bltu	r3,r2,4044ae4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4044b04:	e0bffe17 	ldw	r2,-8(fp)
 4044b08:	108007cc 	andi	r2,r2,31
 4044b0c:	1005003a 	cmpeq	r2,r2,zero
 4044b10:	1000021e 	bne	r2,zero,4044b1c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4044b14:	e0bffd17 	ldw	r2,-12(fp)
 4044b18:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4044b1c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4044b20:	e037883a 	mov	sp,fp
 4044b24:	df000017 	ldw	fp,0(sp)
 4044b28:	dec00104 	addi	sp,sp,4
 4044b2c:	f800283a 	ret

04044b30 <icmprcv>:
};
#endif /* USER_PING_TSTAMP */

int
icmprcv(PACKET p)      /* the incoming packet */
{
 4044b30:	deffed04 	addi	sp,sp,-76
 4044b34:	dfc01215 	stw	ra,72(sp)
 4044b38:	df001115 	stw	fp,68(sp)
 4044b3c:	dc401015 	stw	r17,64(sp)
 4044b40:	dc000f15 	stw	r16,60(sp)
 4044b44:	df000f04 	addi	fp,sp,60
 4044b48:	e13ffd15 	stw	r4,-12(fp)
   unsigned short xsum;
#ifdef FULL_ICMP
   struct redirect * rd;
   struct destun *   pdp;
#endif   /* FULL_ICMP */
   char sav_ch = 0;
 4044b4c:	e03ff505 	stb	zero,-44(fp)
   int i;

   icmp_mib.icmpInMsgs++;                 /* received one more icmp */
 4044b50:	008101b4 	movhi	r2,1030
 4044b54:	10a46c04 	addi	r2,r2,-28240
 4044b58:	10800017 	ldw	r2,0(r2)
 4044b5c:	10c00044 	addi	r3,r2,1
 4044b60:	008101b4 	movhi	r2,1030
 4044b64:	10a46c04 	addi	r2,r2,-28240
 4044b68:	10c00015 	stw	r3,0(r2)

   pip = ip_head(p);                      /* find IP header */
 4044b6c:	e0bffd17 	ldw	r2,-12(fp)
 4044b70:	10800317 	ldw	r2,12(r2)
 4044b74:	e0bffa15 	stw	r2,-24(fp)
   len = p->nb_plen - (ip_hlen(pip));     /* strip IP header length */
 4044b78:	e0bffd17 	ldw	r2,-12(fp)
 4044b7c:	10c00417 	ldw	r3,16(r2)
 4044b80:	e0bffa17 	ldw	r2,-24(fp)
 4044b84:	10800003 	ldbu	r2,0(r2)
 4044b88:	10803fcc 	andi	r2,r2,255
 4044b8c:	108003cc 	andi	r2,r2,15
 4044b90:	1085883a 	add	r2,r2,r2
 4044b94:	1085883a 	add	r2,r2,r2
 4044b98:	1885c83a 	sub	r2,r3,r2
 4044b9c:	e0bffc15 	stw	r2,-16(fp)
   host = p->fhost;                       /* filled in by IP layer */
 4044ba0:	e0bffd17 	ldw	r2,-12(fp)
 4044ba4:	10800717 	ldw	r2,28(r2)
 4044ba8:	e0bffb15 	stw	r2,-20(fp)

#ifdef   NPDEBUG
   if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 4044bac:	00810174 	movhi	r2,1029
 4044bb0:	1081bf04 	addi	r2,r2,1788
 4044bb4:	10800017 	ldw	r2,0(r2)
 4044bb8:	1081000c 	andi	r2,r2,1024
 4044bbc:	1005003a 	cmpeq	r2,r2,zero
 4044bc0:	1000161e 	bne	r2,zero,4044c1c <icmprcv+0xec>
 4044bc4:	00810174 	movhi	r2,1029
 4044bc8:	1081bf04 	addi	r2,r2,1788
 4044bcc:	10800017 	ldw	r2,0(r2)
 4044bd0:	1080800c 	andi	r2,r2,512
 4044bd4:	1005003a 	cmpeq	r2,r2,zero
 4044bd8:	1000101e 	bne	r2,zero,4044c1c <icmprcv+0xec>
      dprintf("ICMP: p[%u] from %u.%u.%u.%u\n", len, PUSH_IPADDR(host));
 4044bdc:	e0bffb17 	ldw	r2,-20(fp)
 4044be0:	11803fcc 	andi	r6,r2,255
 4044be4:	e0bffb17 	ldw	r2,-20(fp)
 4044be8:	1004d23a 	srli	r2,r2,8
 4044bec:	11c03fcc 	andi	r7,r2,255
 4044bf0:	e0bffb17 	ldw	r2,-20(fp)
 4044bf4:	1004d43a 	srli	r2,r2,16
 4044bf8:	10c03fcc 	andi	r3,r2,255
 4044bfc:	e0bffb17 	ldw	r2,-20(fp)
 4044c00:	1004d63a 	srli	r2,r2,24
 4044c04:	d8c00015 	stw	r3,0(sp)
 4044c08:	d8800115 	stw	r2,4(sp)
 4044c0c:	01010174 	movhi	r4,1029
 4044c10:	2131c804 	addi	r4,r4,-14560
 4044c14:	e17ffc17 	ldw	r5,-16(fp)
 4044c18:	400207c0 	call	400207c <printf>
#endif

   e = (struct ping *)ip_data(pip);       /* finally, extract ICMP header */
 4044c1c:	e0bffa17 	ldw	r2,-24(fp)
 4044c20:	10800003 	ldbu	r2,0(r2)
 4044c24:	10803fcc 	andi	r2,r2,255
 4044c28:	108003cc 	andi	r2,r2,15
 4044c2c:	1085883a 	add	r2,r2,r2
 4044c30:	1085883a 	add	r2,r2,r2
 4044c34:	1007883a 	mov	r3,r2
 4044c38:	e0bffa17 	ldw	r2,-24(fp)
 4044c3c:	1885883a 	add	r2,r3,r2
 4044c40:	e0bff915 	stw	r2,-28(fp)

   osum = e->pchksum;
 4044c44:	e0bff917 	ldw	r2,-28(fp)
 4044c48:	1080008b 	ldhu	r2,2(r2)
 4044c4c:	e0bff88d 	sth	r2,-30(fp)
   e->pchksum = 0;
 4044c50:	e0bff917 	ldw	r2,-28(fp)
 4044c54:	1000008d 	sth	zero,2(r2)

   if (len&1)
 4044c58:	e0bffc17 	ldw	r2,-16(fp)
 4044c5c:	1080004c 	andi	r2,r2,1
 4044c60:	10803fcc 	andi	r2,r2,255
 4044c64:	1005003a 	cmpeq	r2,r2,zero
 4044c68:	1000091e 	bne	r2,zero,4044c90 <icmprcv+0x160>
   {
      sav_ch = *(((char *) e) + len);
 4044c6c:	e0fff917 	ldw	r3,-28(fp)
 4044c70:	e0bffc17 	ldw	r2,-16(fp)
 4044c74:	1885883a 	add	r2,r3,r2
 4044c78:	10800003 	ldbu	r2,0(r2)
 4044c7c:	e0bff505 	stb	r2,-44(fp)
      ((char *)e)[len] = 0;
 4044c80:	e0fff917 	ldw	r3,-28(fp)
 4044c84:	e0bffc17 	ldw	r2,-16(fp)
 4044c88:	1885883a 	add	r2,r3,r2
 4044c8c:	10000005 	stb	zero,0(r2)
   }

   xsum = ~cksum(e, (len+1)>>1);
 4044c90:	e0bffc17 	ldw	r2,-16(fp)
 4044c94:	10800044 	addi	r2,r2,1
 4044c98:	100ad07a 	srli	r5,r2,1
 4044c9c:	e13ff917 	ldw	r4,-28(fp)
 4044ca0:	4020a000 	call	4020a00 <cksum>
 4044ca4:	0084303a 	nor	r2,zero,r2
 4044ca8:	e0bff80d 	sth	r2,-32(fp)
   if (len&1) *(((char *) e) + len) = sav_ch;
 4044cac:	e0bffc17 	ldw	r2,-16(fp)
 4044cb0:	1080004c 	andi	r2,r2,1
 4044cb4:	10803fcc 	andi	r2,r2,255
 4044cb8:	1005003a 	cmpeq	r2,r2,zero
 4044cbc:	1000051e 	bne	r2,zero,4044cd4 <icmprcv+0x1a4>
 4044cc0:	e0fff917 	ldw	r3,-28(fp)
 4044cc4:	e0bffc17 	ldw	r2,-16(fp)
 4044cc8:	1887883a 	add	r3,r3,r2
 4044ccc:	e0bff503 	ldbu	r2,-44(fp)
 4044cd0:	18800005 	stb	r2,0(r3)
   if (xsum != osum)
 4044cd4:	e0fff80b 	ldhu	r3,-32(fp)
 4044cd8:	e0bff88b 	ldhu	r2,-30(fp)
 4044cdc:	18802c26 	beq	r3,r2,4044d90 <icmprcv+0x260>
   {
      e->pchksum = osum;
 4044ce0:	e0fff917 	ldw	r3,-28(fp)
 4044ce4:	e0bff88b 	ldhu	r2,-30(fp)
 4044ce8:	1880008d 	sth	r2,2(r3)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 4044cec:	00810174 	movhi	r2,1029
 4044cf0:	1081bf04 	addi	r2,r2,1788
 4044cf4:	10800017 	ldw	r2,0(r2)
 4044cf8:	1081000c 	andi	r2,r2,1024
 4044cfc:	1005003a 	cmpeq	r2,r2,zero
 4044d00:	1000131e 	bne	r2,zero,4044d50 <icmprcv+0x220>
 4044d04:	00810174 	movhi	r2,1029
 4044d08:	1081bf04 	addi	r2,r2,1788
 4044d0c:	10800017 	ldw	r2,0(r2)
 4044d10:	1080800c 	andi	r2,r2,512
 4044d14:	1005003a 	cmpeq	r2,r2,zero
 4044d18:	10000d1e 	bne	r2,zero,4044d50 <icmprcv+0x220>
      {
         dprintf("ICMP: Bad xsum %04x should have been %04x\n",
 4044d1c:	e17ff88b 	ldhu	r5,-30(fp)
 4044d20:	e1bff80b 	ldhu	r6,-32(fp)
 4044d24:	01010174 	movhi	r4,1029
 4044d28:	2131d004 	addi	r4,r4,-14528
 4044d2c:	400207c0 	call	400207c <printf>
          osum, xsum);
         if (NDEBUG & DUMP) ip_dump(p);
 4044d30:	00810174 	movhi	r2,1029
 4044d34:	1081bf04 	addi	r2,r2,1788
 4044d38:	10800017 	ldw	r2,0(r2)
 4044d3c:	1080008c 	andi	r2,r2,2
 4044d40:	1005003a 	cmpeq	r2,r2,zero
 4044d44:	1000021e 	bne	r2,zero,4044d50 <icmprcv+0x220>
 4044d48:	e13ffd17 	ldw	r4,-12(fp)
 4044d4c:	403a55c0 	call	403a55c <ip_dump>
      }
#endif
      icmp_mib.icmpInErrors++;
 4044d50:	008101b4 	movhi	r2,1030
 4044d54:	10a46c04 	addi	r2,r2,-28240
 4044d58:	10800117 	ldw	r2,4(r2)
 4044d5c:	10c00044 	addi	r3,r2,1
 4044d60:	008101b4 	movhi	r2,1030
 4044d64:	10a46c04 	addi	r2,r2,-28240
 4044d68:	10c00115 	stw	r3,4(r2)
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4044d6c:	01000084 	movi	r4,2
 4044d70:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 4044d74:	e13ffd17 	ldw	r4,-12(fp)
 4044d78:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4044d7c:	01000084 	movi	r4,2
 4044d80:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_BAD_HEADER;
 4044d84:	00bff804 	movi	r2,-32
 4044d88:	e0bfff15 	stw	r2,-4(fp)
 4044d8c:	00026d06 	br	4045744 <icmprcv+0xc14>
   }

   e->pchksum = osum;
 4044d90:	e0fff917 	ldw	r3,-28(fp)
 4044d94:	e0bff88b 	ldhu	r2,-30(fp)
 4044d98:	1880008d 	sth	r2,2(r3)

   switch (e->ptype) 
 4044d9c:	e0bff917 	ldw	r2,-28(fp)
 4044da0:	10800003 	ldbu	r2,0(r2)
 4044da4:	10803fcc 	andi	r2,r2,255
 4044da8:	1080201c 	xori	r2,r2,128
 4044dac:	10bfe004 	addi	r2,r2,-128
 4044db0:	e0bffe15 	stw	r2,-8(fp)
 4044db4:	e0fffe17 	ldw	r3,-8(fp)
 4044db8:	18800428 	cmpgeui	r2,r3,16
 4044dbc:	1002401e 	bne	r2,zero,40456c0 <icmprcv+0xb90>
 4044dc0:	e13ffe17 	ldw	r4,-8(fp)
 4044dc4:	e13ffe17 	ldw	r4,-8(fp)
 4044dc8:	2105883a 	add	r2,r4,r4
 4044dcc:	1087883a 	add	r3,r2,r2
 4044dd0:	00810134 	movhi	r2,1028
 4044dd4:	10937904 	addi	r2,r2,19940
 4044dd8:	1885883a 	add	r2,r3,r2
 4044ddc:	10800017 	ldw	r2,0(r2)
 4044de0:	1000683a 	jmp	r2
 4044de4:	040450c8 	cmpgei	r16,zero,4419
 4044de8:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044dec:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044df0:	040450f4 	movhi	r16,4419
 4044df4:	040451e4 	muli	r16,zero,4423
 4044df8:	0404528c 	andi	r16,zero,4426
 4044dfc:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044e00:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044e04:	04044e24 	muli	r16,zero,4408
 4044e08:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044e0c:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044e10:	040453ac 	andhi	r16,zero,4430
 4044e14:	040454b4 	movhi	r16,4434
 4044e18:	04045530 	cmpltui	r16,zero,4436
 4044e1c:	040456c0 	call	40456c <OSCtxSw_SWITCH_PC+0x40452c>
 4044e20:	04045680 	call	404568 <OSCtxSw_SWITCH_PC+0x404528>
   {
   case ECHOREQ:  /* got ping request, send reply */
      icmp_mib.icmpInEchos++;
 4044e24:	008101b4 	movhi	r2,1030
 4044e28:	10a46c04 	addi	r2,r2,-28240
 4044e2c:	10800717 	ldw	r2,28(r2)
 4044e30:	10c00044 	addi	r3,r2,1
 4044e34:	008101b4 	movhi	r2,1030
 4044e38:	10a46c04 	addi	r2,r2,-28240
 4044e3c:	10c00715 	stw	r3,28(r2)
#ifdef   NPDEBUG
      if ((NDEBUG & UPCTRACE) && (NDEBUG & IPTRACE))
 4044e40:	00810174 	movhi	r2,1029
 4044e44:	1081bf04 	addi	r2,r2,1788
 4044e48:	10800017 	ldw	r2,0(r2)
 4044e4c:	1081000c 	andi	r2,r2,1024
 4044e50:	1005003a 	cmpeq	r2,r2,zero
 4044e54:	1000141e 	bne	r2,zero,4044ea8 <icmprcv+0x378>
 4044e58:	00810174 	movhi	r2,1029
 4044e5c:	1081bf04 	addi	r2,r2,1788
 4044e60:	10800017 	ldw	r2,0(r2)
 4044e64:	1080800c 	andi	r2,r2,512
 4044e68:	1005003a 	cmpeq	r2,r2,zero
 4044e6c:	10000e1e 	bne	r2,zero,4044ea8 <icmprcv+0x378>
         dprintf("ICMP: echo reply to %u.%u.%u.%u\n", PUSH_IPADDR(host));
 4044e70:	e0bffb17 	ldw	r2,-20(fp)
 4044e74:	11403fcc 	andi	r5,r2,255
 4044e78:	e0bffb17 	ldw	r2,-20(fp)
 4044e7c:	1004d23a 	srli	r2,r2,8
 4044e80:	11803fcc 	andi	r6,r2,255
 4044e84:	e0bffb17 	ldw	r2,-20(fp)
 4044e88:	1004d43a 	srli	r2,r2,16
 4044e8c:	11c03fcc 	andi	r7,r2,255
 4044e90:	e0bffb17 	ldw	r2,-20(fp)
 4044e94:	1004d63a 	srli	r2,r2,24
 4044e98:	d8800015 	stw	r2,0(sp)
 4044e9c:	01010174 	movhi	r4,1029
 4044ea0:	2131db04 	addi	r4,r4,-14484
 4044ea4:	400207c0 	call	400207c <printf>
#endif
      e->ptype = ECHOREP;
 4044ea8:	e0bff917 	ldw	r2,-28(fp)
 4044eac:	10000005 	stb	zero,0(r2)
      e->pchksum = 0;
 4044eb0:	e0bff917 	ldw	r2,-28(fp)
 4044eb4:	1000008d 	sth	zero,2(r2)
      if (len&1)  /* pad odd length packets for checksum routine */
 4044eb8:	e0bffc17 	ldw	r2,-16(fp)
 4044ebc:	1080004c 	andi	r2,r2,1
 4044ec0:	10803fcc 	andi	r2,r2,255
 4044ec4:	1005003a 	cmpeq	r2,r2,zero
 4044ec8:	1000091e 	bne	r2,zero,4044ef0 <icmprcv+0x3c0>
      {
         sav_ch = *(((char *) e) + len);
 4044ecc:	e0fff917 	ldw	r3,-28(fp)
 4044ed0:	e0bffc17 	ldw	r2,-16(fp)
 4044ed4:	1885883a 	add	r2,r3,r2
 4044ed8:	10800003 	ldbu	r2,0(r2)
 4044edc:	e0bff505 	stb	r2,-44(fp)
         ((char *)e)[len] = 0;
 4044ee0:	e0fff917 	ldw	r3,-28(fp)
 4044ee4:	e0bffc17 	ldw	r2,-16(fp)
 4044ee8:	1885883a 	add	r2,r3,r2
 4044eec:	10000005 	stb	zero,0(r2)
      }

      e->pchksum = ~cksum(e, (len+1)>>1);
 4044ef0:	e0bffc17 	ldw	r2,-16(fp)
 4044ef4:	10800044 	addi	r2,r2,1
 4044ef8:	100ad07a 	srli	r5,r2,1
 4044efc:	e13ff917 	ldw	r4,-28(fp)
 4044f00:	4020a000 	call	4020a00 <cksum>
 4044f04:	0084303a 	nor	r2,zero,r2
 4044f08:	1007883a 	mov	r3,r2
 4044f0c:	e0bff917 	ldw	r2,-28(fp)
 4044f10:	10c0008d 	sth	r3,2(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
 4044f14:	e0bffc17 	ldw	r2,-16(fp)
 4044f18:	1080004c 	andi	r2,r2,1
 4044f1c:	10803fcc 	andi	r2,r2,255
 4044f20:	1005003a 	cmpeq	r2,r2,zero
 4044f24:	1000051e 	bne	r2,zero,4044f3c <icmprcv+0x40c>
 4044f28:	e0fff917 	ldw	r3,-28(fp)
 4044f2c:	e0bffc17 	ldw	r2,-16(fp)
 4044f30:	1887883a 	add	r3,r3,r2
 4044f34:	e0bff503 	ldbu	r2,-44(fp)
 4044f38:	18800005 	stb	r2,0(r3)
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
 4044f3c:	e0bffa17 	ldw	r2,-24(fp)
 4044f40:	10800417 	ldw	r2,16(r2)
 4044f44:	10bfffe0 	cmpeqi	r2,r2,-1
 4044f48:	1000211e 	bne	r2,zero,4044fd0 <icmprcv+0x4a0>
 4044f4c:	e0bffa17 	ldw	r2,-24(fp)
 4044f50:	10800417 	ldw	r2,16(r2)
 4044f54:	1004d63a 	srli	r2,r2,24
 4044f58:	10c03fcc 	andi	r3,r2,255
 4044f5c:	e0bffa17 	ldw	r2,-24(fp)
 4044f60:	10800417 	ldw	r2,16(r2)
 4044f64:	1004d23a 	srli	r2,r2,8
 4044f68:	10bfc00c 	andi	r2,r2,65280
 4044f6c:	1886b03a 	or	r3,r3,r2
 4044f70:	e0bffa17 	ldw	r2,-24(fp)
 4044f74:	10800417 	ldw	r2,16(r2)
 4044f78:	10bfc00c 	andi	r2,r2,65280
 4044f7c:	1004923a 	slli	r2,r2,8
 4044f80:	1886b03a 	or	r3,r3,r2
 4044f84:	e0bffa17 	ldw	r2,-24(fp)
 4044f88:	10800417 	ldw	r2,16(r2)
 4044f8c:	10803fcc 	andi	r2,r2,255
 4044f90:	1004963a 	slli	r2,r2,24
 4044f94:	1884b03a 	or	r2,r3,r2
 4044f98:	10fc002c 	andhi	r3,r2,61440
 4044f9c:	00b80034 	movhi	r2,57344
 4044fa0:	18800b26 	beq	r3,r2,4044fd0 <icmprcv+0x4a0>
 4044fa4:	e0bffa17 	ldw	r2,-24(fp)
 4044fa8:	11000417 	ldw	r4,16(r2)
 4044fac:	e0bffd17 	ldw	r2,-12(fp)
 4044fb0:	10800617 	ldw	r2,24(r2)
 4044fb4:	10c00a17 	ldw	r3,40(r2)
 4044fb8:	e0bffd17 	ldw	r2,-12(fp)
 4044fbc:	10800617 	ldw	r2,24(r2)
 4044fc0:	10800c17 	ldw	r2,48(r2)
 4044fc4:	0084303a 	nor	r2,zero,r2
 4044fc8:	1884b03a 	or	r2,r3,r2
 4044fcc:	2080061e 	bne	r4,r2,4044fe8 <icmprcv+0x4b8>
#ifdef IP_MULTICAST
          (IN_MULTICAST(ntohl(pip->ip_dest))) ||
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
 4044fd0:	e0bffd17 	ldw	r2,-12(fp)
 4044fd4:	10800617 	ldw	r2,24(r2)
 4044fd8:	10c00a17 	ldw	r3,40(r2)
 4044fdc:	e0bffa17 	ldw	r2,-24(fp)
 4044fe0:	10c00315 	stw	r3,12(r2)
      if (len&1) *(((char *) e) + len) = sav_ch;
      /* check to see if the destination is the IPv4 broadcast address,
       * or if the destination is a multicast group address, or if the
       * destination address is the subnet-directed broadcast 
       */
      if ((pip->ip_dest == 0xffffffff) || 
 4044fe4:	00000406 	br	4044ff8 <icmprcv+0x4c8>
#endif
          (pip->ip_dest == (p->net->n_ipaddr | (~(p->net->snmask)))))
      {
         pip->ip_src = p->net->n_ipaddr;
      }
      else pip->ip_src = pip->ip_dest;
 4044fe8:	e0bffa17 	ldw	r2,-24(fp)
 4044fec:	10c00417 	ldw	r3,16(r2)
 4044ff0:	e0bffa17 	ldw	r2,-24(fp)
 4044ff4:	10c00315 	stw	r3,12(r2)

      pip->ip_dest = host;
 4044ff8:	e0fffa17 	ldw	r3,-24(fp)
 4044ffc:	e0bffb17 	ldw	r2,-20(fp)
 4045000:	18800415 	stw	r2,16(r3)
      icmp_mib.icmpOutEchoReps++;
 4045004:	008101b4 	movhi	r2,1030
 4045008:	10a46c04 	addi	r2,r2,-28240
 404500c:	10801517 	ldw	r2,84(r2)
 4045010:	10c00044 	addi	r3,r2,1
 4045014:	008101b4 	movhi	r2,1030
 4045018:	10a46c04 	addi	r2,r2,-28240
 404501c:	10c01515 	stw	r3,84(r2)
      icmp_mib.icmpOutMsgs++;
 4045020:	008101b4 	movhi	r2,1030
 4045024:	10a46c04 	addi	r2,r2,-28240
 4045028:	10800d17 	ldw	r2,52(r2)
 404502c:	10c00044 	addi	r3,r2,1
 4045030:	008101b4 	movhi	r2,1030
 4045034:	10a46c04 	addi	r2,r2,-28240
 4045038:	10c00d15 	stw	r3,52(r2)
      p->fhost = host;
 404503c:	e0fffd17 	ldw	r3,-12(fp)
 4045040:	e0bffb17 	ldw	r2,-20(fp)
 4045044:	18800715 	stw	r2,28(r3)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 4045048:	e0bffd17 	ldw	r2,-12(fp)
 404504c:	10c00317 	ldw	r3,12(r2)
 4045050:	e0bffa17 	ldw	r2,-24(fp)
 4045054:	10800003 	ldbu	r2,0(r2)
 4045058:	10803fcc 	andi	r2,r2,255
 404505c:	108003cc 	andi	r2,r2,15
 4045060:	1085883a 	add	r2,r2,r2
 4045064:	1085883a 	add	r2,r2,r2
 4045068:	1887883a 	add	r3,r3,r2
 404506c:	e0bffd17 	ldw	r2,-12(fp)
 4045070:	10c00315 	stw	r3,12(r2)
      p->nb_plen = len;
 4045074:	e0fffd17 	ldw	r3,-12(fp)
 4045078:	e0bffc17 	ldw	r2,-16(fp)
 404507c:	18800415 	stw	r2,16(r3)

      i = ip_write(ICMP_PROT, p);
 4045080:	01000044 	movi	r4,1
 4045084:	e17ffd17 	ldw	r5,-12(fp)
 4045088:	403932c0 	call	403932c <ip_write>
 404508c:	e0bff415 	stw	r2,-48(fp)
      if (i < 0)
 4045090:	e0bff417 	ldw	r2,-48(fp)
 4045094:	1004403a 	cmpge	r2,r2,zero
 4045098:	1000091e 	bne	r2,zero,40450c0 <icmprcv+0x590>
      {
#ifdef   NPDEBUG
         if (NDEBUG & (UPCTRACE))
 404509c:	00810174 	movhi	r2,1029
 40450a0:	1081bf04 	addi	r2,r2,1788
 40450a4:	10800017 	ldw	r2,0(r2)
 40450a8:	1081000c 	andi	r2,r2,1024
 40450ac:	1005003a 	cmpeq	r2,r2,zero
 40450b0:	1000031e 	bne	r2,zero,40450c0 <icmprcv+0x590>
            dprintf("icmp: reply failed\n");
 40450b4:	01010174 	movhi	r4,1029
 40450b8:	2131e404 	addi	r4,r4,-14448
 40450bc:	40021940 	call	4002194 <puts>
#endif
      }
      /* reused p will be freed by net->xxx_send() */
      return 0;
 40450c0:	e03fff15 	stw	zero,-4(fp)
 40450c4:	00019f06 	br	4045744 <icmprcv+0xc14>
   case ECHOREP:
      icmp_mib.icmpInEchoReps++;
 40450c8:	008101b4 	movhi	r2,1030
 40450cc:	10a46c04 	addi	r2,r2,-28240
 40450d0:	10800817 	ldw	r2,32(r2)
 40450d4:	10c00044 	addi	r3,r2,1
 40450d8:	008101b4 	movhi	r2,1030
 40450dc:	10a46c04 	addi	r2,r2,-28240
 40450e0:	10c00815 	stw	r3,32(r2)
      
/* 
 * Altera Niche Stack Nios port modification
 */
#if defined(ALT_INICHE) && !defined(PING_APP) && defined(IP_RAW)
      return(ip_raw_input(p));
 40450e4:	e13ffd17 	ldw	r4,-12(fp)
 40450e8:	403dd080 	call	403dd08 <ip_raw_input>
 40450ec:	e0bfff15 	stw	r2,-4(fp)
 40450f0:	00019406 	br	4045744 <icmprcv+0xc14>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
      return(0);
#endif   /* PING_APP */
#ifdef FULL_ICMP
   case DESTIN:
      icmp_mib.icmpInDestUnreachs++;
 40450f4:	008101b4 	movhi	r2,1030
 40450f8:	10a46c04 	addi	r2,r2,-28240
 40450fc:	10800217 	ldw	r2,8(r2)
 4045100:	10c00044 	addi	r3,r2,1
 4045104:	008101b4 	movhi	r2,1030
 4045108:	10a46c04 	addi	r2,r2,-28240
 404510c:	10c00215 	stw	r3,8(r2)
      pdp = (struct destun *)e;
 4045110:	e0bff917 	ldw	r2,-28(fp)
 4045114:	e0bff615 	stw	r2,-40(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4045118:	00810174 	movhi	r2,1029
 404511c:	1081bf04 	addi	r2,r2,1788
 4045120:	10800017 	ldw	r2,0(r2)
 4045124:	1081000c 	andi	r2,r2,1024
 4045128:	1005003a 	cmpeq	r2,r2,zero
 404512c:	1000291e 	bne	r2,zero,40451d4 <icmprcv+0x6a4>
      {
         dprintf("ICMP: got dest unreachable type ");
 4045130:	01010174 	movhi	r4,1029
 4045134:	2131e904 	addi	r4,r4,-14428
 4045138:	400207c0 	call	400207c <printf>
         dprintf("%u on %u.%u.%u.%u ", pdp->dcode,
 404513c:	e0bff617 	ldw	r2,-40(fp)
 4045140:	10800043 	ldbu	r2,1(r2)
 4045144:	11403fcc 	andi	r5,r2,255
 4045148:	2940201c 	xori	r5,r5,128
 404514c:	297fe004 	addi	r5,r5,-128
 4045150:	e0bff617 	ldw	r2,-40(fp)
 4045154:	10800617 	ldw	r2,24(r2)
 4045158:	11803fcc 	andi	r6,r2,255
 404515c:	e0bff617 	ldw	r2,-40(fp)
 4045160:	10800617 	ldw	r2,24(r2)
 4045164:	1004d23a 	srli	r2,r2,8
 4045168:	11c03fcc 	andi	r7,r2,255
 404516c:	e0bff617 	ldw	r2,-40(fp)
 4045170:	10800617 	ldw	r2,24(r2)
 4045174:	1004d43a 	srli	r2,r2,16
 4045178:	10c03fcc 	andi	r3,r2,255
 404517c:	e0bff617 	ldw	r2,-40(fp)
 4045180:	10800617 	ldw	r2,24(r2)
 4045184:	1004d63a 	srli	r2,r2,24
 4045188:	d8c00015 	stw	r3,0(sp)
 404518c:	d8800115 	stw	r2,4(sp)
 4045190:	01010174 	movhi	r4,1029
 4045194:	2131f204 	addi	r4,r4,-14392
 4045198:	400207c0 	call	400207c <printf>
          PUSH_IPADDR(pdp->dip.ip_dest));
         dprintf("from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 404519c:	e0bffb17 	ldw	r2,-20(fp)
 40451a0:	11403fcc 	andi	r5,r2,255
 40451a4:	e0bffb17 	ldw	r2,-20(fp)
 40451a8:	1004d23a 	srli	r2,r2,8
 40451ac:	11803fcc 	andi	r6,r2,255
 40451b0:	e0bffb17 	ldw	r2,-20(fp)
 40451b4:	1004d43a 	srli	r2,r2,16
 40451b8:	11c03fcc 	andi	r7,r2,255
 40451bc:	e0bffb17 	ldw	r2,-20(fp)
 40451c0:	1004d63a 	srli	r2,r2,24
 40451c4:	d8800015 	stw	r2,0(sp)
 40451c8:	01010174 	movhi	r4,1029
 40451cc:	2131f704 	addi	r4,r4,-14372
 40451d0:	400207c0 	call	400207c <printf>
      }
#endif   /* NPDEBUG */
      icmp_du(p, pdp);
 40451d4:	e13ffd17 	ldw	r4,-12(fp)
 40451d8:	e17ff617 	ldw	r5,-40(fp)
 40451dc:	4045de80 	call	4045de8 <icmp_du>
      break;
 40451e0:	00015606 	br	404573c <icmprcv+0xc0c>
   case SOURCEQ:
      icmp_mib.icmpInSrcQuenchs++;
 40451e4:	008101b4 	movhi	r2,1030
 40451e8:	10a46c04 	addi	r2,r2,-28240
 40451ec:	10800517 	ldw	r2,20(r2)
 40451f0:	10c00044 	addi	r3,r2,1
 40451f4:	008101b4 	movhi	r2,1030
 40451f8:	10a46c04 	addi	r2,r2,-28240
 40451fc:	10c00515 	stw	r3,20(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4045200:	00810174 	movhi	r2,1029
 4045204:	1081bf04 	addi	r2,r2,1788
 4045208:	10800017 	ldw	r2,0(r2)
 404520c:	1081000c 	andi	r2,r2,1024
 4045210:	1005003a 	cmpeq	r2,r2,zero
 4045214:	1000161e 	bne	r2,zero,4045270 <icmprcv+0x740>
      {
         dprintf("ICMP: source quench from %u.%u.%u.%u\n", PUSH_IPADDR(host));
 4045218:	e0bffb17 	ldw	r2,-20(fp)
 404521c:	11403fcc 	andi	r5,r2,255
 4045220:	e0bffb17 	ldw	r2,-20(fp)
 4045224:	1004d23a 	srli	r2,r2,8
 4045228:	11803fcc 	andi	r6,r2,255
 404522c:	e0bffb17 	ldw	r2,-20(fp)
 4045230:	1004d43a 	srli	r2,r2,16
 4045234:	11c03fcc 	andi	r7,r2,255
 4045238:	e0bffb17 	ldw	r2,-20(fp)
 404523c:	1004d63a 	srli	r2,r2,24
 4045240:	d8800015 	stw	r2,0(sp)
 4045244:	01010174 	movhi	r4,1029
 4045248:	2131fc04 	addi	r4,r4,-14352
 404524c:	400207c0 	call	400207c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 4045250:	00810174 	movhi	r2,1029
 4045254:	1081bf04 	addi	r2,r2,1788
 4045258:	10800017 	ldw	r2,0(r2)
 404525c:	1080008c 	andi	r2,r2,2
 4045260:	1005003a 	cmpeq	r2,r2,zero
 4045264:	1000021e 	bne	r2,zero,4045270 <icmprcv+0x740>
 4045268:	e13ffd17 	ldw	r4,-12(fp)
 404526c:	403a55c0 	call	403a55c <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4045270:	01000084 	movi	r4,2
 4045274:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 4045278:	e13ffd17 	ldw	r4,-12(fp)
 404527c:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4045280:	01000084 	movi	r4,2
 4045284:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      break;
 4045288:	00012c06 	br	404573c <icmprcv+0xc0c>
   case REDIR:          /* got an icmp redirect */
      icmp_mib.icmpInRedirects++;
 404528c:	008101b4 	movhi	r2,1030
 4045290:	10a46c04 	addi	r2,r2,-28240
 4045294:	10800617 	ldw	r2,24(r2)
 4045298:	10c00044 	addi	r3,r2,1
 404529c:	008101b4 	movhi	r2,1030
 40452a0:	10a46c04 	addi	r2,r2,-28240
 40452a4:	10c00615 	stw	r3,24(r2)
      rd = (struct redirect *)e;
 40452a8:	e0bff917 	ldw	r2,-28(fp)
 40452ac:	e0bff715 	stw	r2,-36(fp)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40452b0:	00810174 	movhi	r2,1029
 40452b4:	1081bf04 	addi	r2,r2,1788
 40452b8:	10800017 	ldw	r2,0(r2)
 40452bc:	1081000c 	andi	r2,r2,1024
 40452c0:	1005003a 	cmpeq	r2,r2,zero
 40452c4:	1000241e 	bne	r2,zero,4045358 <icmprcv+0x828>
      {
         dprintf("ICMP: rcvd redirect for %u.%u.%u.%u ",
 40452c8:	e0bff717 	ldw	r2,-36(fp)
 40452cc:	10800617 	ldw	r2,24(r2)
 40452d0:	11403fcc 	andi	r5,r2,255
 40452d4:	e0bff717 	ldw	r2,-36(fp)
 40452d8:	10800617 	ldw	r2,24(r2)
 40452dc:	1004d23a 	srli	r2,r2,8
 40452e0:	11803fcc 	andi	r6,r2,255
 40452e4:	e0bff717 	ldw	r2,-36(fp)
 40452e8:	10800617 	ldw	r2,24(r2)
 40452ec:	1004d43a 	srli	r2,r2,16
 40452f0:	11c03fcc 	andi	r7,r2,255
 40452f4:	e0bff717 	ldw	r2,-36(fp)
 40452f8:	10800617 	ldw	r2,24(r2)
 40452fc:	1004d63a 	srli	r2,r2,24
 4045300:	d8800015 	stw	r2,0(sp)
 4045304:	01010174 	movhi	r4,1029
 4045308:	21320604 	addi	r4,r4,-14312
 404530c:	400207c0 	call	400207c <printf>
          PUSH_IPADDR(rd->rdip.ip_dest));
         dprintf("to %u.%u.%u.%u\n", PUSH_IPADDR(rd->rdgw));
 4045310:	e0bff717 	ldw	r2,-36(fp)
 4045314:	10800117 	ldw	r2,4(r2)
 4045318:	11403fcc 	andi	r5,r2,255
 404531c:	e0bff717 	ldw	r2,-36(fp)
 4045320:	10800117 	ldw	r2,4(r2)
 4045324:	1004d23a 	srli	r2,r2,8
 4045328:	11803fcc 	andi	r6,r2,255
 404532c:	e0bff717 	ldw	r2,-36(fp)
 4045330:	10800117 	ldw	r2,4(r2)
 4045334:	1004d43a 	srli	r2,r2,16
 4045338:	11c03fcc 	andi	r7,r2,255
 404533c:	e0bff717 	ldw	r2,-36(fp)
 4045340:	10800117 	ldw	r2,4(r2)
 4045344:	1004d63a 	srli	r2,r2,24
 4045348:	d8800015 	stw	r2,0(sp)
 404534c:	01010174 	movhi	r4,1029
 4045350:	21321004 	addi	r4,r4,-14272
 4045354:	400207c0 	call	400207c <printf>
      }
#endif   /* NPDEBUG */
#ifdef IP_ROUTING
      /* try to add/update route table */
      add_route(rd->rdip.ip_dest, 0xFFFFFFFF, rd->rdgw, 
 4045358:	e0bff717 	ldw	r2,-36(fp)
 404535c:	14000617 	ldw	r16,24(r2)
 4045360:	e0bff717 	ldw	r2,-36(fp)
 4045364:	14400117 	ldw	r17,4(r2)
 4045368:	e0bffd17 	ldw	r2,-12(fp)
 404536c:	11000617 	ldw	r4,24(r2)
 4045370:	401ed640 	call	401ed64 <if_netnumber>
 4045374:	100f883a 	mov	r7,r2
 4045378:	00800104 	movi	r2,4
 404537c:	d8800015 	stw	r2,0(sp)
 4045380:	8009883a 	mov	r4,r16
 4045384:	017fffc4 	movi	r5,-1
 4045388:	880d883a 	mov	r6,r17
 404538c:	403e22c0 	call	403e22c <add_route>
       net_num(p->net), IPRP_ICMP);
#endif   /* IP_ROUTING */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4045390:	01000084 	movi	r4,2
 4045394:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 4045398:	e13ffd17 	ldw	r4,-12(fp)
 404539c:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40453a0:	01000084 	movi	r4,2
 40453a4:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      break;
 40453a8:	0000e406 	br	404573c <icmprcv+0xc0c>
   case TIMEX:
      icmp_mib.icmpInTimeExcds++;
 40453ac:	008101b4 	movhi	r2,1030
 40453b0:	10a46c04 	addi	r2,r2,-28240
 40453b4:	10800317 	ldw	r2,12(r2)
 40453b8:	10c00044 	addi	r3,r2,1
 40453bc:	008101b4 	movhi	r2,1030
 40453c0:	10a46c04 	addi	r2,r2,-28240
 40453c4:	10c00315 	stw	r3,12(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40453c8:	00810174 	movhi	r2,1029
 40453cc:	1081bf04 	addi	r2,r2,1788
 40453d0:	10800017 	ldw	r2,0(r2)
 40453d4:	1081000c 	andi	r2,r2,1024
 40453d8:	1005003a 	cmpeq	r2,r2,zero
 40453dc:	10002e1e 	bne	r2,zero,4045498 <icmprcv+0x968>
      {
         struct timex * pt =  (struct  timex *)e;
 40453e0:	e0bff917 	ldw	r2,-28(fp)
 40453e4:	e0bff315 	stw	r2,-52(fp)

         dprintf("ICMP: timex msg from %u.%u.%u.%u\n",
 40453e8:	e0bffd17 	ldw	r2,-12(fp)
 40453ec:	10800717 	ldw	r2,28(r2)
 40453f0:	11403fcc 	andi	r5,r2,255
 40453f4:	e0bffd17 	ldw	r2,-12(fp)
 40453f8:	10800717 	ldw	r2,28(r2)
 40453fc:	1004d23a 	srli	r2,r2,8
 4045400:	11803fcc 	andi	r6,r2,255
 4045404:	e0bffd17 	ldw	r2,-12(fp)
 4045408:	10800717 	ldw	r2,28(r2)
 404540c:	1004d43a 	srli	r2,r2,16
 4045410:	11c03fcc 	andi	r7,r2,255
 4045414:	e0bffd17 	ldw	r2,-12(fp)
 4045418:	10800717 	ldw	r2,28(r2)
 404541c:	1004d63a 	srli	r2,r2,24
 4045420:	d8800015 	stw	r2,0(sp)
 4045424:	01010174 	movhi	r4,1029
 4045428:	21321404 	addi	r4,r4,-14256
 404542c:	400207c0 	call	400207c <printf>
          PUSH_IPADDR(p->fhost));
         dprintf(" about %u.%u.%u.%u\n", PUSH_IPADDR(pt->tip.ip_dest));
 4045430:	e0bff317 	ldw	r2,-52(fp)
 4045434:	10800617 	ldw	r2,24(r2)
 4045438:	11403fcc 	andi	r5,r2,255
 404543c:	e0bff317 	ldw	r2,-52(fp)
 4045440:	10800617 	ldw	r2,24(r2)
 4045444:	1004d23a 	srli	r2,r2,8
 4045448:	11803fcc 	andi	r6,r2,255
 404544c:	e0bff317 	ldw	r2,-52(fp)
 4045450:	10800617 	ldw	r2,24(r2)
 4045454:	1004d43a 	srli	r2,r2,16
 4045458:	11c03fcc 	andi	r7,r2,255
 404545c:	e0bff317 	ldw	r2,-52(fp)
 4045460:	10800617 	ldw	r2,24(r2)
 4045464:	1004d63a 	srli	r2,r2,24
 4045468:	d8800015 	stw	r2,0(sp)
 404546c:	01010174 	movhi	r4,1029
 4045470:	21321d04 	addi	r4,r4,-14220
 4045474:	400207c0 	call	400207c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 4045478:	00810174 	movhi	r2,1029
 404547c:	1081bf04 	addi	r2,r2,1788
 4045480:	10800017 	ldw	r2,0(r2)
 4045484:	1080008c 	andi	r2,r2,2
 4045488:	1005003a 	cmpeq	r2,r2,zero
 404548c:	1000021e 	bne	r2,zero,4045498 <icmprcv+0x968>
 4045490:	e13ffd17 	ldw	r4,-12(fp)
 4045494:	403a55c0 	call	403a55c <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4045498:	01000084 	movi	r4,2
 404549c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 40454a0:	e13ffd17 	ldw	r4,-12(fp)
 40454a4:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40454a8:	01000084 	movi	r4,2
 40454ac:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      break;
 40454b0:	0000a206 	br	404573c <icmprcv+0xc0c>
   case PARAM:
      icmp_mib.icmpInParmProbs++;
 40454b4:	008101b4 	movhi	r2,1030
 40454b8:	10a46c04 	addi	r2,r2,-28240
 40454bc:	10800417 	ldw	r2,16(r2)
 40454c0:	10c00044 	addi	r3,r2,1
 40454c4:	008101b4 	movhi	r2,1030
 40454c8:	10a46c04 	addi	r2,r2,-28240
 40454cc:	10c00415 	stw	r3,16(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40454d0:	00810174 	movhi	r2,1029
 40454d4:	1081bf04 	addi	r2,r2,1788
 40454d8:	10800017 	ldw	r2,0(r2)
 40454dc:	1081000c 	andi	r2,r2,1024
 40454e0:	1005003a 	cmpeq	r2,r2,zero
 40454e4:	1000031e 	bne	r2,zero,40454f4 <icmprcv+0x9c4>
         dprintf("ICMP: got param problem message\n");
 40454e8:	01010174 	movhi	r4,1029
 40454ec:	21322204 	addi	r4,r4,-14200
 40454f0:	40021940 	call	4002194 <puts>
      if (NDEBUG & DUMP)
 40454f4:	00810174 	movhi	r2,1029
 40454f8:	1081bf04 	addi	r2,r2,1788
 40454fc:	10800017 	ldw	r2,0(r2)
 4045500:	1080008c 	andi	r2,r2,2
 4045504:	1005003a 	cmpeq	r2,r2,zero
 4045508:	1000021e 	bne	r2,zero,4045514 <icmprcv+0x9e4>
      {
         ip_dump(p);
 404550c:	e13ffd17 	ldw	r4,-12(fp)
 4045510:	403a55c0 	call	403a55c <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4045514:	01000084 	movi	r4,2
 4045518:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 404551c:	e13ffd17 	ldw	r4,-12(fp)
 4045520:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4045524:	01000084 	movi	r4,2
 4045528:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      break;
 404552c:	00008306 	br	404573c <icmprcv+0xc0c>
   case TIMEREQ:
      icmp_mib.icmpInTimestamps++;
 4045530:	008101b4 	movhi	r2,1030
 4045534:	10a46c04 	addi	r2,r2,-28240
 4045538:	10800917 	ldw	r2,36(r2)
 404553c:	10c00044 	addi	r3,r2,1
 4045540:	008101b4 	movhi	r2,1030
 4045544:	10a46c04 	addi	r2,r2,-28240
 4045548:	10c00915 	stw	r3,36(r2)
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 404554c:	00810174 	movhi	r2,1029
 4045550:	1081bf04 	addi	r2,r2,1788
 4045554:	10800017 	ldw	r2,0(r2)
 4045558:	1081000c 	andi	r2,r2,1024
 404555c:	1005003a 	cmpeq	r2,r2,zero
 4045560:	1000031e 	bne	r2,zero,4045570 <icmprcv+0xa40>
         dprintf("ICMP: got timestamp request\n");
 4045564:	01010174 	movhi	r4,1029
 4045568:	21322a04 	addi	r4,r4,-14168
 404556c:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG */
      e->ptype = TIMEREP;
 4045570:	e0fff917 	ldw	r3,-28(fp)
 4045574:	00800384 	movi	r2,14
 4045578:	18800005 	stb	r2,0(r3)
      e->pchksum = 0;
 404557c:	e0bff917 	ldw	r2,-28(fp)
 4045580:	1000008d 	sth	zero,2(r2)
		   */
		  sstmp->dtstamp[1] = sstmp->dtstamp[2] = user_UTCtime();
	  }
#endif /* USER_PING_TSTAMP */

      e->pchksum = ~cksum(e, sizeof(struct tstamp)>>1);
 4045584:	e13ff917 	ldw	r4,-28(fp)
 4045588:	01400284 	movi	r5,10
 404558c:	4020a000 	call	4020a00 <cksum>
 4045590:	0084303a 	nor	r2,zero,r2
 4045594:	1007883a 	mov	r3,r2
 4045598:	e0bff917 	ldw	r2,-28(fp)
 404559c:	10c0008d 	sth	r3,2(r2)
      pip->ip_src = pip->ip_dest;
 40455a0:	e0bffa17 	ldw	r2,-24(fp)
 40455a4:	10c00417 	ldw	r3,16(r2)
 40455a8:	e0bffa17 	ldw	r2,-24(fp)
 40455ac:	10c00315 	stw	r3,12(r2)
      pip->ip_dest = host;
 40455b0:	e0fffa17 	ldw	r3,-24(fp)
 40455b4:	e0bffb17 	ldw	r2,-20(fp)
 40455b8:	18800415 	stw	r2,16(r3)
      icmp_mib.icmpOutMsgs++;
 40455bc:	008101b4 	movhi	r2,1030
 40455c0:	10a46c04 	addi	r2,r2,-28240
 40455c4:	10800d17 	ldw	r2,52(r2)
 40455c8:	10c00044 	addi	r3,r2,1
 40455cc:	008101b4 	movhi	r2,1030
 40455d0:	10a46c04 	addi	r2,r2,-28240
 40455d4:	10c00d15 	stw	r3,52(r2)
      icmp_mib.icmpOutTimestampReps++;
 40455d8:	008101b4 	movhi	r2,1030
 40455dc:	10a46c04 	addi	r2,r2,-28240
 40455e0:	10801717 	ldw	r2,92(r2)
 40455e4:	10c00044 	addi	r3,r2,1
 40455e8:	008101b4 	movhi	r2,1030
 40455ec:	10a46c04 	addi	r2,r2,-28240
 40455f0:	10c01715 	stw	r3,92(r2)
      p->nb_prot += ip_hlen(pip);      /* move pointer past IP to ICMP */
 40455f4:	e0bffd17 	ldw	r2,-12(fp)
 40455f8:	10c00317 	ldw	r3,12(r2)
 40455fc:	e0bffa17 	ldw	r2,-24(fp)
 4045600:	10800003 	ldbu	r2,0(r2)
 4045604:	10803fcc 	andi	r2,r2,255
 4045608:	108003cc 	andi	r2,r2,15
 404560c:	1085883a 	add	r2,r2,r2
 4045610:	1085883a 	add	r2,r2,r2
 4045614:	1887883a 	add	r3,r3,r2
 4045618:	e0bffd17 	ldw	r2,-12(fp)
 404561c:	10c00315 	stw	r3,12(r2)
      p->nb_plen = sizeof(struct tstamp);
 4045620:	e0fffd17 	ldw	r3,-12(fp)
 4045624:	00800504 	movi	r2,20
 4045628:	18800415 	stw	r2,16(r3)
      p->fhost = host;
 404562c:	e0fffd17 	ldw	r3,-12(fp)
 4045630:	e0bffb17 	ldw	r2,-20(fp)
 4045634:	18800715 	stw	r2,28(r3)
      i = ip_write(ICMP_PROT, p);
 4045638:	01000044 	movi	r4,1
 404563c:	e17ffd17 	ldw	r5,-12(fp)
 4045640:	403932c0 	call	403932c <ip_write>
 4045644:	e0bff415 	stw	r2,-48(fp)
      if (i < 0)
 4045648:	e0bff417 	ldw	r2,-48(fp)
 404564c:	1004403a 	cmpge	r2,r2,zero
 4045650:	1000091e 	bne	r2,zero,4045678 <icmprcv+0xb48>
      {
#ifdef   NPDEBUG
         if (NDEBUG & UPCTRACE)
 4045654:	00810174 	movhi	r2,1029
 4045658:	1081bf04 	addi	r2,r2,1788
 404565c:	10800017 	ldw	r2,0(r2)
 4045660:	1081000c 	andi	r2,r2,1024
 4045664:	1005003a 	cmpeq	r2,r2,zero
 4045668:	1000031e 	bne	r2,zero,4045678 <icmprcv+0xb48>
            dprintf("icmp: can't send timestamp reply\n");
 404566c:	01010174 	movhi	r4,1029
 4045670:	21323104 	addi	r4,r4,-14140
 4045674:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG */
      }
      /* re-used packet was pk_free()d by net->send() */
      return (0);
 4045678:	e03fff15 	stw	zero,-4(fp)
 404567c:	00003106 	br	4045744 <icmprcv+0xc14>
   case INFO:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 4045680:	00810174 	movhi	r2,1029
 4045684:	1081bf04 	addi	r2,r2,1788
 4045688:	10800017 	ldw	r2,0(r2)
 404568c:	1081000c 	andi	r2,r2,1024
 4045690:	1005003a 	cmpeq	r2,r2,zero
 4045694:	1000031e 	bne	r2,zero,40456a4 <icmprcv+0xb74>
         dprintf("icmp: got info request\n");
 4045698:	01010174 	movhi	r4,1029
 404569c:	21323a04 	addi	r4,r4,-14104
 40456a0:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 40456a4:	01000084 	movi	r4,2
 40456a8:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 40456ac:	e13ffd17 	ldw	r4,-12(fp)
 40456b0:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 40456b4:	01000084 	movi	r4,2
 40456b8:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      break;
 40456bc:	00001f06 	br	404573c <icmprcv+0xc0c>
#endif   /* FULL_ICMP */
   default:
#ifdef   NPDEBUG
      if (NDEBUG & UPCTRACE)
 40456c0:	00810174 	movhi	r2,1029
 40456c4:	1081bf04 	addi	r2,r2,1788
 40456c8:	10800017 	ldw	r2,0(r2)
 40456cc:	1081000c 	andi	r2,r2,1024
 40456d0:	1005003a 	cmpeq	r2,r2,zero
 40456d4:	1000101e 	bne	r2,zero,4045718 <icmprcv+0xbe8>
      {
         dprintf("icmp: unhandled type %u\n", e->ptype);
 40456d8:	e0bff917 	ldw	r2,-28(fp)
 40456dc:	10800003 	ldbu	r2,0(r2)
 40456e0:	11403fcc 	andi	r5,r2,255
 40456e4:	2940201c 	xori	r5,r5,128
 40456e8:	297fe004 	addi	r5,r5,-128
 40456ec:	01010174 	movhi	r4,1029
 40456f0:	21324004 	addi	r4,r4,-14080
 40456f4:	400207c0 	call	400207c <printf>
         if (NDEBUG & DUMP) ip_dump(p);
 40456f8:	00810174 	movhi	r2,1029
 40456fc:	1081bf04 	addi	r2,r2,1788
 4045700:	10800017 	ldw	r2,0(r2)
 4045704:	1080008c 	andi	r2,r2,2
 4045708:	1005003a 	cmpeq	r2,r2,zero
 404570c:	1000021e 	bne	r2,zero,4045718 <icmprcv+0xbe8>
 4045710:	e13ffd17 	ldw	r4,-12(fp)
 4045714:	403a55c0 	call	403a55c <ip_dump>
      }
#endif   /* NPDEBUG */
      LOCK_NET_RESOURCE(FREEQ_RESID);
 4045718:	01000084 	movi	r4,2
 404571c:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
      pk_free(p);
 4045720:	e13ffd17 	ldw	r4,-12(fp)
 4045724:	40253040 	call	4025304 <pk_free>
      UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4045728:	01000084 	movi	r4,2
 404572c:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>
      return ENP_NOT_MINE;
 4045730:	00800084 	movi	r2,2
 4045734:	e0bfff15 	stw	r2,-4(fp)
 4045738:	00000206 	br	4045744 <icmprcv+0xc14>
   }
#ifdef FULL_ICMP
   return ENP_NOT_MINE;
 404573c:	00c00084 	movi	r3,2
 4045740:	e0ffff15 	stw	r3,-4(fp)
 4045744:	e0bfff17 	ldw	r2,-4(fp)
#endif   /* FULL_ICMP */
}
 4045748:	e037883a 	mov	sp,fp
 404574c:	dfc00317 	ldw	ra,12(sp)
 4045750:	df000217 	ldw	fp,8(sp)
 4045754:	dc400117 	ldw	r17,4(sp)
 4045758:	dc000017 	ldw	r16,0(sp)
 404575c:	dec00404 	addi	sp,sp,16
 4045760:	f800283a 	ret

04045764 <icmp_destun>:
icmp_destun(ip_addr host,  /* host to complain to */
   ip_addr src_addr, /* source address for outgoing ICMP/IP packet header */
   struct ip * ip,   /* IP header of offending packet */
   unsigned typecode,    /* type & code of DU to send (PROT, PORT, HOST) */
   NET   net)        /* interface that this packet came in on */
{
 4045764:	defff404 	addi	sp,sp,-48
 4045768:	dfc00b15 	stw	ra,44(sp)
 404576c:	df000a15 	stw	fp,40(sp)
 4045770:	df000a04 	addi	fp,sp,40
 4045774:	e13ffc15 	stw	r4,-16(fp)
 4045778:	e17ffd15 	stw	r5,-12(fp)
 404577c:	e1bffe15 	stw	r6,-8(fp)
 4045780:	e1ffff15 	stw	r7,-4(fp)
   struct destun *   d;
   struct ip * pip;
   int   i;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 4045784:	00810174 	movhi	r2,1029
 4045788:	1081bf04 	addi	r2,r2,1788
 404578c:	10800017 	ldw	r2,0(r2)
 4045790:	1080040c 	andi	r2,r2,16
 4045794:	1005003a 	cmpeq	r2,r2,zero
 4045798:	1000171e 	bne	r2,zero,40457f8 <icmp_destun+0x94>
      dprintf("icmp: sending %s dest unreachable to %u.%u.%u.%u\n",
 404579c:	e0bfff17 	ldw	r2,-4(fp)
 40457a0:	10803fcc 	andi	r2,r2,255
 40457a4:	00c10174 	movhi	r3,1029
 40457a8:	18f9b804 	addi	r3,r3,-6432
 40457ac:	1085883a 	add	r2,r2,r2
 40457b0:	1085883a 	add	r2,r2,r2
 40457b4:	10c5883a 	add	r2,r2,r3
 40457b8:	11400017 	ldw	r5,0(r2)
 40457bc:	e0bffc17 	ldw	r2,-16(fp)
 40457c0:	11803fcc 	andi	r6,r2,255
 40457c4:	e0bffc17 	ldw	r2,-16(fp)
 40457c8:	1004d23a 	srli	r2,r2,8
 40457cc:	11c03fcc 	andi	r7,r2,255
 40457d0:	e0bffc17 	ldw	r2,-16(fp)
 40457d4:	1004d43a 	srli	r2,r2,16
 40457d8:	10c03fcc 	andi	r3,r2,255
 40457dc:	e0bffc17 	ldw	r2,-16(fp)
 40457e0:	1004d63a 	srli	r2,r2,24
 40457e4:	d8c00015 	stw	r3,0(sp)
 40457e8:	d8800115 	stw	r2,4(sp)
 40457ec:	01010174 	movhi	r4,1029
 40457f0:	21325a04 	addi	r4,r4,-13976
 40457f4:	400207c0 	call	400207c <printf>
      dsts[typecode & 0xFF], PUSH_IPADDR(host));
#endif   /* NPDEBUG */

   LOCK_NET_RESOURCE(FREEQ_RESID);
 40457f8:	01000084 	movi	r4,2
 40457fc:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
   p = pk_alloc(512 + IPHSIZ);   /* get packet to send icmp dest unreachable */
 4045800:	01008504 	movi	r4,532
 4045804:	4024f700 	call	4024f70 <pk_alloc>
 4045808:	e0bffb15 	stw	r2,-20(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 404580c:	01000084 	movi	r4,2
 4045810:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 4045814:	e0bffb17 	ldw	r2,-20(fp)
 4045818:	1004c03a 	cmpne	r2,r2,zero
 404581c:	1000111e 	bne	r2,zero,4045864 <icmp_destun+0x100>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 4045820:	00810174 	movhi	r2,1029
 4045824:	1081bf04 	addi	r2,r2,1788
 4045828:	10800017 	ldw	r2,0(r2)
 404582c:	1080800c 	andi	r2,r2,512
 4045830:	1005003a 	cmpeq	r2,r2,zero
 4045834:	1000031e 	bne	r2,zero,4045844 <icmp_destun+0xe0>
         dprintf("icmp: can't alloc pkt\n");
 4045838:	01010174 	movhi	r4,1029
 404583c:	21326704 	addi	r4,r4,-13924
 4045840:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 4045844:	008101b4 	movhi	r2,1030
 4045848:	10a46c04 	addi	r2,r2,-28240
 404584c:	10800e17 	ldw	r2,56(r2)
 4045850:	10c00044 	addi	r3,r2,1
 4045854:	008101b4 	movhi	r2,1030
 4045858:	10a46c04 	addi	r2,r2,-28240
 404585c:	10c00e15 	stw	r3,56(r2)
      return;
 4045860:	00008f06 	br	4045aa0 <icmp_destun+0x33c>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 4045864:	e0bffb17 	ldw	r2,-20(fp)
 4045868:	10800317 	ldw	r2,12(r2)
 404586c:	e0bff915 	stw	r2,-28(fp)
   pip->ip_src = src_addr;
 4045870:	e0fff917 	ldw	r3,-28(fp)
 4045874:	e0bffd17 	ldw	r2,-12(fp)
 4045878:	18800315 	stw	r2,12(r3)
   pip->ip_dest = host;
 404587c:	e0fff917 	ldw	r3,-28(fp)
 4045880:	e0bffc17 	ldw	r2,-16(fp)
 4045884:	18800415 	stw	r2,16(r3)

   /* allow space for icmp header */
   p->nb_prot += sizeof(struct ip);
 4045888:	e0bffb17 	ldw	r2,-20(fp)
 404588c:	10800317 	ldw	r2,12(r2)
 4045890:	10c00504 	addi	r3,r2,20
 4045894:	e0bffb17 	ldw	r2,-20(fp)
 4045898:	10c00315 	stw	r3,12(r2)
   p->nb_plen -= sizeof(struct ip);
 404589c:	e0bffb17 	ldw	r2,-20(fp)
 40458a0:	10800417 	ldw	r2,16(r2)
 40458a4:	10fffb04 	addi	r3,r2,-20
 40458a8:	e0bffb17 	ldw	r2,-20(fp)
 40458ac:	10c00415 	stw	r3,16(r2)
   p->net = net;     /* Put in the interface that this packet came in on */
 40458b0:	e0fffb17 	ldw	r3,-20(fp)
 40458b4:	e0800217 	ldw	r2,8(fp)
 40458b8:	18800615 	stw	r2,24(r3)

   d = (struct destun *)p->nb_prot;
 40458bc:	e0bffb17 	ldw	r2,-20(fp)
 40458c0:	10800317 	ldw	r2,12(r2)
 40458c4:	e0bffa15 	stw	r2,-24(fp)

   if (typecode & 0xFF00)               /* if the type was sent */
 40458c8:	e0bfff17 	ldw	r2,-4(fp)
 40458cc:	10bfc00c 	andi	r2,r2,65280
 40458d0:	1005003a 	cmpeq	r2,r2,zero
 40458d4:	1000061e 	bne	r2,zero,40458f0 <icmp_destun+0x18c>
      d->dtype = (char)(typecode >>8);  /* then use it */
 40458d8:	e0bfff17 	ldw	r2,-4(fp)
 40458dc:	1004d23a 	srli	r2,r2,8
 40458e0:	1007883a 	mov	r3,r2
 40458e4:	e0bffa17 	ldw	r2,-24(fp)
 40458e8:	10c00005 	stb	r3,0(r2)
 40458ec:	00000306 	br	40458fc <icmp_destun+0x198>
   else                                 /* else use default */
      d->dtype = DESTIN;
 40458f0:	e0fffa17 	ldw	r3,-24(fp)
 40458f4:	008000c4 	movi	r2,3
 40458f8:	18800005 	stb	r2,0(r3)
   d->dcode = (char)(typecode & 0xFF);
 40458fc:	e0bfff17 	ldw	r2,-4(fp)
 4045900:	1007883a 	mov	r3,r2
 4045904:	e0bffa17 	ldw	r2,-24(fp)
 4045908:	10c00045 	stb	r3,1(r2)
   d->dno1 = d->dno2 = 0;
 404590c:	e0bffa17 	ldw	r2,-24(fp)
 4045910:	1000018d 	sth	zero,6(r2)
 4045914:	e0bffa17 	ldw	r2,-24(fp)
 4045918:	10c0018b 	ldhu	r3,6(r2)
 404591c:	e0bffa17 	ldw	r2,-24(fp)
 4045920:	10c0010d 	sth	r3,4(r2)
#ifndef ICMP_SUPPRESS_PMTU
   if ((typecode & 0xFF) == DSTFRAG)
 4045924:	e0bfff17 	ldw	r2,-4(fp)
 4045928:	10803fcc 	andi	r2,r2,255
 404592c:	10800118 	cmpnei	r2,r2,4
 4045930:	1000151e 	bne	r2,zero,4045988 <icmp_destun+0x224>
      d->dno2 = htons(net->n_mtu - net->n_lnh);
 4045934:	e0800217 	ldw	r2,8(fp)
 4045938:	10c00917 	ldw	r3,36(r2)
 404593c:	e0800217 	ldw	r2,8(fp)
 4045940:	10800817 	ldw	r2,32(r2)
 4045944:	1885c83a 	sub	r2,r3,r2
 4045948:	1005d23a 	srai	r2,r2,8
 404594c:	10803fcc 	andi	r2,r2,255
 4045950:	1009883a 	mov	r4,r2
 4045954:	e0800217 	ldw	r2,8(fp)
 4045958:	10c00917 	ldw	r3,36(r2)
 404595c:	e0800217 	ldw	r2,8(fp)
 4045960:	10800817 	ldw	r2,32(r2)
 4045964:	1885c83a 	sub	r2,r3,r2
 4045968:	1004923a 	slli	r2,r2,8
 404596c:	1007883a 	mov	r3,r2
 4045970:	00bfc004 	movi	r2,-256
 4045974:	1884703a 	and	r2,r3,r2
 4045978:	2084b03a 	or	r2,r4,r2
 404597c:	1007883a 	mov	r3,r2
 4045980:	e0bffa17 	ldw	r2,-24(fp)
 4045984:	10c0018d 	sth	r3,6(r2)
#endif    /* ICMP_SUPPRESS_PMTU */
   MEMCPY(&d->dip, ip, (sizeof(struct ip) + ICMPDUDATA));
 4045988:	e0bffa17 	ldw	r2,-24(fp)
 404598c:	11000204 	addi	r4,r2,8
 4045990:	e0fffe17 	ldw	r3,-8(fp)
 4045994:	18800017 	ldw	r2,0(r3)
 4045998:	20800015 	stw	r2,0(r4)
 404599c:	18800117 	ldw	r2,4(r3)
 40459a0:	20800115 	stw	r2,4(r4)
 40459a4:	18800217 	ldw	r2,8(r3)
 40459a8:	20800215 	stw	r2,8(r4)
 40459ac:	18800317 	ldw	r2,12(r3)
 40459b0:	20800315 	stw	r2,12(r4)
 40459b4:	18800417 	ldw	r2,16(r3)
 40459b8:	20800415 	stw	r2,16(r4)
 40459bc:	18800517 	ldw	r2,20(r3)
 40459c0:	20800515 	stw	r2,20(r4)
 40459c4:	18800617 	ldw	r2,24(r3)
 40459c8:	20800615 	stw	r2,24(r4)

   d->dchksum = 0;
 40459cc:	e0bffa17 	ldw	r2,-24(fp)
 40459d0:	1000008d 	sth	zero,2(r2)
   d->dchksum = ~cksum(d, sizeof(struct destun)>>1);
 40459d4:	e13ffa17 	ldw	r4,-24(fp)
 40459d8:	01400484 	movi	r5,18
 40459dc:	4020a000 	call	4020a00 <cksum>
 40459e0:	0084303a 	nor	r2,zero,r2
 40459e4:	1007883a 	mov	r3,r2
 40459e8:	e0bffa17 	ldw	r2,-24(fp)
 40459ec:	10c0008d 	sth	r3,2(r2)

   p->nb_plen =  sizeof(struct destun);
 40459f0:	e0fffb17 	ldw	r3,-20(fp)
 40459f4:	00800904 	movi	r2,36
 40459f8:	18800415 	stw	r2,16(r3)
   p->fhost = host;
 40459fc:	e0fffb17 	ldw	r3,-20(fp)
 4045a00:	e0bffc17 	ldw	r2,-16(fp)
 4045a04:	18800715 	stw	r2,28(r3)
   i = ip_write(ICMP_PROT, p);
 4045a08:	01000044 	movi	r4,1
 4045a0c:	e17ffb17 	ldw	r5,-20(fp)
 4045a10:	403932c0 	call	403932c <ip_write>
 4045a14:	e0bff815 	stw	r2,-32(fp)
   if (i < 0)
 4045a18:	e0bff817 	ldw	r2,-32(fp)
 4045a1c:	1004403a 	cmpge	r2,r2,zero
 4045a20:	1000111e 	bne	r2,zero,4045a68 <icmp_destun+0x304>
   {
      icmp_mib.icmpOutErrors++;
 4045a24:	008101b4 	movhi	r2,1030
 4045a28:	10a46c04 	addi	r2,r2,-28240
 4045a2c:	10800e17 	ldw	r2,56(r2)
 4045a30:	10c00044 	addi	r3,r2,1
 4045a34:	008101b4 	movhi	r2,1030
 4045a38:	10a46c04 	addi	r2,r2,-28240
 4045a3c:	10c00e15 	stw	r3,56(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 4045a40:	00810174 	movhi	r2,1029
 4045a44:	1081bf04 	addi	r2,r2,1788
 4045a48:	10800017 	ldw	r2,0(r2)
 4045a4c:	1080860c 	andi	r2,r2,536
 4045a50:	1005003a 	cmpeq	r2,r2,zero
 4045a54:	1000121e 	bne	r2,zero,4045aa0 <icmp_destun+0x33c>
         dprintf("ICMP: Can't send dest unreachable\n");
 4045a58:	01010174 	movhi	r4,1029
 4045a5c:	21326d04 	addi	r4,r4,-13900
 4045a60:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG  */
      return;
 4045a64:	00000e06 	br	4045aa0 <icmp_destun+0x33c>
   }
   icmp_mib.icmpOutMsgs++;
 4045a68:	008101b4 	movhi	r2,1030
 4045a6c:	10a46c04 	addi	r2,r2,-28240
 4045a70:	10800d17 	ldw	r2,52(r2)
 4045a74:	10c00044 	addi	r3,r2,1
 4045a78:	008101b4 	movhi	r2,1030
 4045a7c:	10a46c04 	addi	r2,r2,-28240
 4045a80:	10c00d15 	stw	r3,52(r2)
   icmp_mib.icmpOutDestUnreachs++;
 4045a84:	008101b4 	movhi	r2,1030
 4045a88:	10a46c04 	addi	r2,r2,-28240
 4045a8c:	10800f17 	ldw	r2,60(r2)
 4045a90:	10c00044 	addi	r3,r2,1
 4045a94:	008101b4 	movhi	r2,1030
 4045a98:	10a46c04 	addi	r2,r2,-28240
 4045a9c:	10c00f15 	stw	r3,60(r2)
   return;
}
 4045aa0:	e037883a 	mov	sp,fp
 4045aa4:	dfc00117 	ldw	ra,4(sp)
 4045aa8:	df000017 	ldw	fp,0(sp)
 4045aac:	dec00204 	addi	sp,sp,8
 4045ab0:	f800283a 	ret

04045ab4 <icmp_timex>:
 *
 * RETURNS: void
 */

void icmp_timex (struct ip * ip, char code) 
{
 4045ab4:	defff504 	addi	sp,sp,-44
 4045ab8:	dfc00a15 	stw	ra,40(sp)
 4045abc:	df000915 	stw	fp,36(sp)
 4045ac0:	df000904 	addi	fp,sp,36
 4045ac4:	e13ffe15 	stw	r4,-8(fp)
 4045ac8:	e17fff05 	stb	r5,-4(fp)
   struct ip * pip;
   int i;
   u_char icmp_pkt_len;

#ifdef NPDEBUG
   if (NDEBUG & PROTERR)
 4045acc:	00810174 	movhi	r2,1029
 4045ad0:	1081bf04 	addi	r2,r2,1788
 4045ad4:	10800017 	ldw	r2,0(r2)
 4045ad8:	1080040c 	andi	r2,r2,16
 4045adc:	1005003a 	cmpeq	r2,r2,zero
 4045ae0:	1000301e 	bne	r2,zero,4045ba4 <icmp_timex+0xf0>
      dprintf("icmp: sending ICMP Time Exceeded with code %u to %u.%u.%u.%u\n",
 4045ae4:	e17fff07 	ldb	r5,-4(fp)
 4045ae8:	e0bffe17 	ldw	r2,-8(fp)
 4045aec:	10800317 	ldw	r2,12(r2)
 4045af0:	1004d23a 	srli	r2,r2,8
 4045af4:	10c03fcc 	andi	r3,r2,255
 4045af8:	e0bffe17 	ldw	r2,-8(fp)
 4045afc:	10800317 	ldw	r2,12(r2)
 4045b00:	1004923a 	slli	r2,r2,8
 4045b04:	10bfc00c 	andi	r2,r2,65280
 4045b08:	1884b03a 	or	r2,r3,r2
 4045b0c:	11803fcc 	andi	r6,r2,255
 4045b10:	e0bffe17 	ldw	r2,-8(fp)
 4045b14:	10800317 	ldw	r2,12(r2)
 4045b18:	1004d23a 	srli	r2,r2,8
 4045b1c:	10c03fcc 	andi	r3,r2,255
 4045b20:	e0bffe17 	ldw	r2,-8(fp)
 4045b24:	10800317 	ldw	r2,12(r2)
 4045b28:	1004923a 	slli	r2,r2,8
 4045b2c:	10bfc00c 	andi	r2,r2,65280
 4045b30:	1884b03a 	or	r2,r3,r2
 4045b34:	1004d23a 	srli	r2,r2,8
 4045b38:	11c03fcc 	andi	r7,r2,255
 4045b3c:	e0bffe17 	ldw	r2,-8(fp)
 4045b40:	10800317 	ldw	r2,12(r2)
 4045b44:	1004d23a 	srli	r2,r2,8
 4045b48:	10c03fcc 	andi	r3,r2,255
 4045b4c:	e0bffe17 	ldw	r2,-8(fp)
 4045b50:	10800317 	ldw	r2,12(r2)
 4045b54:	1004923a 	slli	r2,r2,8
 4045b58:	10bfc00c 	andi	r2,r2,65280
 4045b5c:	1884b03a 	or	r2,r3,r2
 4045b60:	1004d43a 	srli	r2,r2,16
 4045b64:	11003fcc 	andi	r4,r2,255
 4045b68:	e0bffe17 	ldw	r2,-8(fp)
 4045b6c:	10800317 	ldw	r2,12(r2)
 4045b70:	1004d23a 	srli	r2,r2,8
 4045b74:	10c03fcc 	andi	r3,r2,255
 4045b78:	e0bffe17 	ldw	r2,-8(fp)
 4045b7c:	10800317 	ldw	r2,12(r2)
 4045b80:	1004923a 	slli	r2,r2,8
 4045b84:	10bfc00c 	andi	r2,r2,65280
 4045b88:	1884b03a 	or	r2,r3,r2
 4045b8c:	1004d63a 	srli	r2,r2,24
 4045b90:	d9000015 	stw	r4,0(sp)
 4045b94:	d8800115 	stw	r2,4(sp)
 4045b98:	01010174 	movhi	r4,1029
 4045b9c:	21327604 	addi	r4,r4,-13864
 4045ba0:	400207c0 	call	400207c <printf>
       code, PUSH_IPADDR((ntohs(ip->ip_src))));
#endif   /* NPDEBUG */

   icmp_pkt_len = ICMPTIMEX_HDR_LEN + ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN;
 4045ba4:	e0bffe17 	ldw	r2,-8(fp)
 4045ba8:	10800003 	ldbu	r2,0(r2)
 4045bac:	108003cc 	andi	r2,r2,15
 4045bb0:	1085883a 	add	r2,r2,r2
 4045bb4:	1085883a 	add	r2,r2,r2
 4045bb8:	10800404 	addi	r2,r2,16
 4045bbc:	e0bff905 	stb	r2,-28(fp)
   LOCK_NET_RESOURCE(FREEQ_RESID);
 4045bc0:	01000084 	movi	r4,2
 4045bc4:	4025e540 	call	4025e54 <LOCK_NET_RESOURCE>
    * length of the "outer" IP header, length of the ICMP header (ICMPTIMEX_HDR_LEN,
    * 8 bytes), length of the "inner" IP header, and length of "user" data 
    * (ICMPTIMEX_PAYLOAD_DATA_LEN, 8 bytes) (just past the "inner" IP header).  The 
    * latter two items are from the packet that the ICMP Time Exceeded message is 
    * being sent in response to. */
   p = pk_alloc(MaxLnh + IPHSIZ + icmp_pkt_len);
 4045bc8:	e0fff903 	ldbu	r3,-28(fp)
 4045bcc:	00810174 	movhi	r2,1029
 4045bd0:	1081bd04 	addi	r2,r2,1780
 4045bd4:	10800017 	ldw	r2,0(r2)
 4045bd8:	1885883a 	add	r2,r3,r2
 4045bdc:	11000504 	addi	r4,r2,20
 4045be0:	4024f700 	call	4024f70 <pk_alloc>
 4045be4:	e0bffd15 	stw	r2,-12(fp)
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
 4045be8:	01000084 	movi	r4,2
 4045bec:	4025f140 	call	4025f14 <UNLOCK_NET_RESOURCE>

   if (p == NULL)
 4045bf0:	e0bffd17 	ldw	r2,-12(fp)
 4045bf4:	1004c03a 	cmpne	r2,r2,zero
 4045bf8:	1000111e 	bne	r2,zero,4045c40 <icmp_timex+0x18c>
   {
#ifdef NPDEBUG
      if (NDEBUG & IPTRACE)
 4045bfc:	00810174 	movhi	r2,1029
 4045c00:	1081bf04 	addi	r2,r2,1788
 4045c04:	10800017 	ldw	r2,0(r2)
 4045c08:	1080800c 	andi	r2,r2,512
 4045c0c:	1005003a 	cmpeq	r2,r2,zero
 4045c10:	1000031e 	bne	r2,zero,4045c20 <icmp_timex+0x16c>
         dprintf("icmp: can't alloc pkt\n");
 4045c14:	01010174 	movhi	r4,1029
 4045c18:	21326704 	addi	r4,r4,-13924
 4045c1c:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG */
      icmp_mib.icmpOutErrors++;
 4045c20:	008101b4 	movhi	r2,1030
 4045c24:	10a46c04 	addi	r2,r2,-28240
 4045c28:	10800e17 	ldw	r2,56(r2)
 4045c2c:	10c00044 	addi	r3,r2,1
 4045c30:	008101b4 	movhi	r2,1030
 4045c34:	10a46c04 	addi	r2,r2,-28240
 4045c38:	10c00e15 	stw	r3,56(r2)
      return;
 4045c3c:	00006506 	br	4045dd4 <icmp_timex+0x320>
   }

   /* build the addresses in the IP header */
   pip = (struct ip *)p->nb_prot;
 4045c40:	e0bffd17 	ldw	r2,-12(fp)
 4045c44:	10800317 	ldw	r2,12(r2)
 4045c48:	e0bffb15 	stw	r2,-20(fp)
   /* source IP address of packet is our address (i.e., destination IP address 
    * in the datagram whose reassembly timed out) */
   pip->ip_src = ip->ip_dest;
 4045c4c:	e0bffe17 	ldw	r2,-8(fp)
 4045c50:	10c00417 	ldw	r3,16(r2)
 4045c54:	e0bffb17 	ldw	r2,-20(fp)
 4045c58:	10c00315 	stw	r3,12(r2)
   /* the destination address is the same as the source IP address of the 
    * datagram whose reassembly timed out */
   pip->ip_dest = ip->ip_src;
 4045c5c:	e0bffe17 	ldw	r2,-8(fp)
 4045c60:	10c00317 	ldw	r3,12(r2)
 4045c64:	e0bffb17 	ldw	r2,-20(fp)
 4045c68:	10c00415 	stw	r3,16(r2)

   /* move past space for IP header to get to start of ICMP header */
   p->nb_prot += sizeof(struct ip);
 4045c6c:	e0bffd17 	ldw	r2,-12(fp)
 4045c70:	10800317 	ldw	r2,12(r2)
 4045c74:	10c00504 	addi	r3,r2,20
 4045c78:	e0bffd17 	ldw	r2,-12(fp)
 4045c7c:	10c00315 	stw	r3,12(r2)

   tx = (struct timex *) p->nb_prot;
 4045c80:	e0bffd17 	ldw	r2,-12(fp)
 4045c84:	10800317 	ldw	r2,12(r2)
 4045c88:	e0bffc15 	stw	r2,-16(fp)

   tx->ttype = TIMEX;
 4045c8c:	e0fffc17 	ldw	r3,-16(fp)
 4045c90:	008002c4 	movi	r2,11
 4045c94:	18800005 	stb	r2,0(r3)
   tx->tcode = code;
 4045c98:	e0fffc17 	ldw	r3,-16(fp)
 4045c9c:	e0bfff03 	ldbu	r2,-4(fp)
 4045ca0:	18800045 	stb	r2,1(r3)
   tx->tno1 = tx->tno2 = 0;
 4045ca4:	e0bffc17 	ldw	r2,-16(fp)
 4045ca8:	1000018d 	sth	zero,6(r2)
 4045cac:	e0bffc17 	ldw	r2,-16(fp)
 4045cb0:	10c0018b 	ldhu	r3,6(r2)
 4045cb4:	e0bffc17 	ldw	r2,-16(fp)
 4045cb8:	10c0010d 	sth	r3,4(r2)
   MEMCPY(&tx->tip, ip, (ip_hlen(ip) + ICMPTIMEX_PAYLOAD_DATA_LEN));
 4045cbc:	e0bffc17 	ldw	r2,-16(fp)
 4045cc0:	11000204 	addi	r4,r2,8
 4045cc4:	e0bffe17 	ldw	r2,-8(fp)
 4045cc8:	10800003 	ldbu	r2,0(r2)
 4045ccc:	10803fcc 	andi	r2,r2,255
 4045cd0:	108003cc 	andi	r2,r2,15
 4045cd4:	1085883a 	add	r2,r2,r2
 4045cd8:	1085883a 	add	r2,r2,r2
 4045cdc:	10800204 	addi	r2,r2,8
 4045ce0:	1007883a 	mov	r3,r2
 4045ce4:	e0bffe17 	ldw	r2,-8(fp)
 4045ce8:	100b883a 	mov	r5,r2
 4045cec:	180d883a 	mov	r6,r3
 4045cf0:	4001de40 	call	4001de4 <memcpy>

   tx->tchksum = 0;
 4045cf4:	e0bffc17 	ldw	r2,-16(fp)
 4045cf8:	1000008d 	sth	zero,2(r2)
   tx->tchksum = ~cksum(tx, (icmp_pkt_len>>1));
 4045cfc:	e0bff903 	ldbu	r2,-28(fp)
 4045d00:	1004d07a 	srli	r2,r2,1
 4045d04:	11403fcc 	andi	r5,r2,255
 4045d08:	e13ffc17 	ldw	r4,-16(fp)
 4045d0c:	4020a000 	call	4020a00 <cksum>
 4045d10:	0084303a 	nor	r2,zero,r2
 4045d14:	1007883a 	mov	r3,r2
 4045d18:	e0bffc17 	ldw	r2,-16(fp)
 4045d1c:	10c0008d 	sth	r3,2(r2)

   p->nb_plen = icmp_pkt_len;
 4045d20:	e0fff903 	ldbu	r3,-28(fp)
 4045d24:	e0bffd17 	ldw	r2,-12(fp)
 4045d28:	10c00415 	stw	r3,16(r2)
   /* p->fhost is expected to be in network byte order */
   p->fhost = pip->ip_dest;
 4045d2c:	e0bffb17 	ldw	r2,-20(fp)
 4045d30:	10c00417 	ldw	r3,16(r2)
 4045d34:	e0bffd17 	ldw	r2,-12(fp)
 4045d38:	10c00715 	stw	r3,28(r2)
   i = ip_write(ICMP_PROT, p);
 4045d3c:	01000044 	movi	r4,1
 4045d40:	e17ffd17 	ldw	r5,-12(fp)
 4045d44:	403932c0 	call	403932c <ip_write>
 4045d48:	e0bffa15 	stw	r2,-24(fp)
   if (i < 0)
 4045d4c:	e0bffa17 	ldw	r2,-24(fp)
 4045d50:	1004403a 	cmpge	r2,r2,zero
 4045d54:	1000111e 	bne	r2,zero,4045d9c <icmp_timex+0x2e8>
   {
      icmp_mib.icmpOutErrors++;
 4045d58:	008101b4 	movhi	r2,1030
 4045d5c:	10a46c04 	addi	r2,r2,-28240
 4045d60:	10800e17 	ldw	r2,56(r2)
 4045d64:	10c00044 	addi	r3,r2,1
 4045d68:	008101b4 	movhi	r2,1030
 4045d6c:	10a46c04 	addi	r2,r2,-28240
 4045d70:	10c00e15 	stw	r3,56(r2)
#ifdef   NPDEBUG
      if (NDEBUG & (IPTRACE|NETERR|PROTERR))
 4045d74:	00810174 	movhi	r2,1029
 4045d78:	1081bf04 	addi	r2,r2,1788
 4045d7c:	10800017 	ldw	r2,0(r2)
 4045d80:	1080860c 	andi	r2,r2,536
 4045d84:	1005003a 	cmpeq	r2,r2,zero
 4045d88:	1000121e 	bne	r2,zero,4045dd4 <icmp_timex+0x320>
         dprintf("ICMP: Can't send Time Exceeded\n");
 4045d8c:	01010174 	movhi	r4,1029
 4045d90:	21328604 	addi	r4,r4,-13800
 4045d94:	40021940 	call	4002194 <puts>
#endif   /* NPDEBUG  */
      return;
 4045d98:	00000e06 	br	4045dd4 <icmp_timex+0x320>
   }
   icmp_mib.icmpOutMsgs++;
 4045d9c:	008101b4 	movhi	r2,1030
 4045da0:	10a46c04 	addi	r2,r2,-28240
 4045da4:	10800d17 	ldw	r2,52(r2)
 4045da8:	10c00044 	addi	r3,r2,1
 4045dac:	008101b4 	movhi	r2,1030
 4045db0:	10a46c04 	addi	r2,r2,-28240
 4045db4:	10c00d15 	stw	r3,52(r2)
   icmp_mib.icmpOutTimeExcds++;
 4045db8:	008101b4 	movhi	r2,1030
 4045dbc:	10a46c04 	addi	r2,r2,-28240
 4045dc0:	10801017 	ldw	r2,64(r2)
 4045dc4:	10c00044 	addi	r3,r2,1
 4045dc8:	008101b4 	movhi	r2,1030
 4045dcc:	10a46c04 	addi	r2,r2,-28240
 4045dd0:	10c01015 	stw	r3,64(r2)
   return;
}
 4045dd4:	e037883a 	mov	sp,fp
 4045dd8:	dfc00117 	ldw	ra,4(sp)
 4045ddc:	df000017 	ldw	fp,0(sp)
 4045de0:	dec00204 	addi	sp,sp,8
 4045de4:	f800283a 	ret

04045de8 <icmp_du>:
 * RETURNS: void
 */

void  
icmp_du(PACKET p, struct destun * pdp)
{
 4045de8:	defffc04 	addi	sp,sp,-16
 4045dec:	dfc00315 	stw	ra,12(sp)
 4045df0:	df000215 	stw	fp,8(sp)
 4045df4:	df000204 	addi	fp,sp,8
 4045df8:	e13ffe15 	stw	r4,-8(fp)
 4045dfc:	e17fff15 	stw	r5,-4(fp)
   /* see if user app wants notification first */
   if (icmpdu_hook)
 4045e00:	d0a85a17 	ldw	r2,-24216(gp)
 4045e04:	1005003a 	cmpeq	r2,r2,zero
 4045e08:	1000041e 	bne	r2,zero,4045e1c <icmp_du+0x34>
      icmpdu_hook(p, pdp);
 4045e0c:	d0a85a17 	ldw	r2,-24216(gp)
 4045e10:	e13ffe17 	ldw	r4,-8(fp)
 4045e14:	e17fff17 	ldw	r5,-4(fp)
 4045e18:	103ee83a 	callr	r2

#ifdef INCLUDE_TCP
   /* Tell the sockets layer so it can correct the problem. */
   so_icmpdu(p, pdp);   /* this call should free packet p */
 4045e1c:	e13ffe17 	ldw	r4,-8(fp)
 4045e20:	e17fff17 	ldw	r5,-4(fp)
 4045e24:	4027de40 	call	4027de4 <so_icmpdu>
done:
   LOCK_NET_RESOURCE(FREEQ_RESID);
   pk_free(p); /* else just free packet */
   UNLOCK_NET_RESOURCE(FREEQ_RESID);
#endif   /* INCLUDE_TCP */
}
 4045e28:	e037883a 	mov	sp,fp
 4045e2c:	dfc00117 	ldw	ra,4(sp)
 4045e30:	df000017 	ldw	fp,0(sp)
 4045e34:	dec00204 	addi	sp,sp,8
 4045e38:	f800283a 	ret

04045e3c <atexit>:
 4045e3c:	200b883a 	mov	r5,r4
 4045e40:	000d883a 	mov	r6,zero
 4045e44:	0009883a 	mov	r4,zero
 4045e48:	000f883a 	mov	r7,zero
 4045e4c:	40466281 	jmpi	4046628 <__register_exitproc>

04045e50 <_atoi_r>:
 4045e50:	000d883a 	mov	r6,zero
 4045e54:	01c00284 	movi	r7,10
 4045e58:	40463181 	jmpi	4046318 <_strtol_r>

04045e5c <atoi>:
 4045e5c:	000b883a 	mov	r5,zero
 4045e60:	01800284 	movi	r6,10
 4045e64:	404655c1 	jmpi	404655c <strtol>

04045e68 <calloc>:
 4045e68:	01810174 	movhi	r6,1029
 4045e6c:	31b9bf04 	addi	r6,r6,-6404
 4045e70:	2007883a 	mov	r3,r4
 4045e74:	31000017 	ldw	r4,0(r6)
 4045e78:	280d883a 	mov	r6,r5
 4045e7c:	180b883a 	mov	r5,r3
 4045e80:	4009a101 	jmpi	4009a10 <_calloc_r>

04045e84 <exit>:
 4045e84:	defffe04 	addi	sp,sp,-8
 4045e88:	000b883a 	mov	r5,zero
 4045e8c:	dc000015 	stw	r16,0(sp)
 4045e90:	dfc00115 	stw	ra,4(sp)
 4045e94:	2021883a 	mov	r16,r4
 4045e98:	40467600 	call	4046760 <__call_exitprocs>
 4045e9c:	00810174 	movhi	r2,1029
 4045ea0:	10b9c004 	addi	r2,r2,-6400
 4045ea4:	11000017 	ldw	r4,0(r2)
 4045ea8:	20800f17 	ldw	r2,60(r4)
 4045eac:	10000126 	beq	r2,zero,4045eb4 <exit+0x30>
 4045eb0:	103ee83a 	callr	r2
 4045eb4:	8009883a 	mov	r4,r16
 4045eb8:	4046b300 	call	4046b30 <_exit>

04045ebc <getc>:
 4045ebc:	defffd04 	addi	sp,sp,-12
 4045ec0:	dc400115 	stw	r17,4(sp)
 4045ec4:	04410174 	movhi	r17,1029
 4045ec8:	8c79bf04 	addi	r17,r17,-6404
 4045ecc:	88c00017 	ldw	r3,0(r17)
 4045ed0:	dc000015 	stw	r16,0(sp)
 4045ed4:	dfc00215 	stw	ra,8(sp)
 4045ed8:	2021883a 	mov	r16,r4
 4045edc:	18000326 	beq	r3,zero,4045eec <getc+0x30>
 4045ee0:	18800e17 	ldw	r2,56(r3)
 4045ee4:	1809883a 	mov	r4,r3
 4045ee8:	10000e26 	beq	r2,zero,4045f24 <getc+0x68>
 4045eec:	80800117 	ldw	r2,4(r16)
 4045ef0:	800b883a 	mov	r5,r16
 4045ef4:	10bfffc4 	addi	r2,r2,-1
 4045ef8:	80800115 	stw	r2,4(r16)
 4045efc:	10000f16 	blt	r2,zero,4045f3c <getc+0x80>
 4045f00:	80c00017 	ldw	r3,0(r16)
 4045f04:	18800003 	ldbu	r2,0(r3)
 4045f08:	18c00044 	addi	r3,r3,1
 4045f0c:	80c00015 	stw	r3,0(r16)
 4045f10:	dfc00217 	ldw	ra,8(sp)
 4045f14:	dc400117 	ldw	r17,4(sp)
 4045f18:	dc000017 	ldw	r16,0(sp)
 4045f1c:	dec00304 	addi	sp,sp,12
 4045f20:	f800283a 	ret
 4045f24:	40065140 	call	4006514 <__sinit>
 4045f28:	80800117 	ldw	r2,4(r16)
 4045f2c:	800b883a 	mov	r5,r16
 4045f30:	10bfffc4 	addi	r2,r2,-1
 4045f34:	80800115 	stw	r2,4(r16)
 4045f38:	103ff10e 	bge	r2,zero,4045f00 <getc+0x44>
 4045f3c:	89000017 	ldw	r4,0(r17)
 4045f40:	dfc00217 	ldw	ra,8(sp)
 4045f44:	dc400117 	ldw	r17,4(sp)
 4045f48:	dc000017 	ldw	r16,0(sp)
 4045f4c:	dec00304 	addi	sp,sp,12
 4045f50:	40460801 	jmpi	4046080 <__srget_r>

04045f54 <_getc_r>:
 4045f54:	defffd04 	addi	sp,sp,-12
 4045f58:	dc400115 	stw	r17,4(sp)
 4045f5c:	dc000015 	stw	r16,0(sp)
 4045f60:	dfc00215 	stw	ra,8(sp)
 4045f64:	2021883a 	mov	r16,r4
 4045f68:	2823883a 	mov	r17,r5
 4045f6c:	20000226 	beq	r4,zero,4045f78 <_getc_r+0x24>
 4045f70:	20800e17 	ldw	r2,56(r4)
 4045f74:	10000f26 	beq	r2,zero,4045fb4 <_getc_r+0x60>
 4045f78:	88800117 	ldw	r2,4(r17)
 4045f7c:	8009883a 	mov	r4,r16
 4045f80:	880b883a 	mov	r5,r17
 4045f84:	10bfffc4 	addi	r2,r2,-1
 4045f88:	88800115 	stw	r2,4(r17)
 4045f8c:	10001016 	blt	r2,zero,4045fd0 <_getc_r+0x7c>
 4045f90:	88c00017 	ldw	r3,0(r17)
 4045f94:	18800003 	ldbu	r2,0(r3)
 4045f98:	18c00044 	addi	r3,r3,1
 4045f9c:	88c00015 	stw	r3,0(r17)
 4045fa0:	dfc00217 	ldw	ra,8(sp)
 4045fa4:	dc400117 	ldw	r17,4(sp)
 4045fa8:	dc000017 	ldw	r16,0(sp)
 4045fac:	dec00304 	addi	sp,sp,12
 4045fb0:	f800283a 	ret
 4045fb4:	40065140 	call	4006514 <__sinit>
 4045fb8:	88800117 	ldw	r2,4(r17)
 4045fbc:	8009883a 	mov	r4,r16
 4045fc0:	880b883a 	mov	r5,r17
 4045fc4:	10bfffc4 	addi	r2,r2,-1
 4045fc8:	88800115 	stw	r2,4(r17)
 4045fcc:	103ff00e 	bge	r2,zero,4045f90 <_getc_r+0x3c>
 4045fd0:	dfc00217 	ldw	ra,8(sp)
 4045fd4:	dc400117 	ldw	r17,4(sp)
 4045fd8:	dc000017 	ldw	r16,0(sp)
 4045fdc:	dec00304 	addi	sp,sp,12
 4045fe0:	40460801 	jmpi	4046080 <__srget_r>

04045fe4 <free>:
 4045fe4:	00810174 	movhi	r2,1029
 4045fe8:	10b9bf04 	addi	r2,r2,-6404
 4045fec:	200b883a 	mov	r5,r4
 4045ff0:	11000017 	ldw	r4,0(r2)
 4045ff4:	40069e41 	jmpi	40069e4 <_free_r>

04045ff8 <malloc>:
 4045ff8:	00810174 	movhi	r2,1029
 4045ffc:	10b9bf04 	addi	r2,r2,-6404
 4046000:	200b883a 	mov	r5,r4
 4046004:	11000017 	ldw	r4,0(r2)
 4046008:	400756c1 	jmpi	400756c <_malloc_r>

0404600c <memcmp>:
 404600c:	00c000c4 	movi	r3,3
 4046010:	1980032e 	bgeu	r3,r6,4046020 <memcmp+0x14>
 4046014:	2144b03a 	or	r2,r4,r5
 4046018:	10c4703a 	and	r2,r2,r3
 404601c:	10000f26 	beq	r2,zero,404605c <memcmp+0x50>
 4046020:	31ffffc4 	addi	r7,r6,-1
 4046024:	3000061e 	bne	r6,zero,4046040 <memcmp+0x34>
 4046028:	00000a06 	br	4046054 <memcmp+0x48>
 404602c:	39ffffc4 	addi	r7,r7,-1
 4046030:	00bfffc4 	movi	r2,-1
 4046034:	21000044 	addi	r4,r4,1
 4046038:	29400044 	addi	r5,r5,1
 404603c:	38800526 	beq	r7,r2,4046054 <memcmp+0x48>
 4046040:	20c00003 	ldbu	r3,0(r4)
 4046044:	28800003 	ldbu	r2,0(r5)
 4046048:	18bff826 	beq	r3,r2,404602c <memcmp+0x20>
 404604c:	1885c83a 	sub	r2,r3,r2
 4046050:	f800283a 	ret
 4046054:	0005883a 	mov	r2,zero
 4046058:	f800283a 	ret
 404605c:	180f883a 	mov	r7,r3
 4046060:	20c00017 	ldw	r3,0(r4)
 4046064:	28800017 	ldw	r2,0(r5)
 4046068:	18bfed1e 	bne	r3,r2,4046020 <memcmp+0x14>
 404606c:	31bfff04 	addi	r6,r6,-4
 4046070:	21000104 	addi	r4,r4,4
 4046074:	29400104 	addi	r5,r5,4
 4046078:	39bff936 	bltu	r7,r6,4046060 <memcmp+0x54>
 404607c:	003fe806 	br	4046020 <memcmp+0x14>

04046080 <__srget_r>:
 4046080:	defffe04 	addi	sp,sp,-8
 4046084:	dc000015 	stw	r16,0(sp)
 4046088:	dfc00115 	stw	ra,4(sp)
 404608c:	2821883a 	mov	r16,r5
 4046090:	40469100 	call	4046910 <__srefill_r>
 4046094:	013fffc4 	movi	r4,-1
 4046098:	1000071e 	bne	r2,zero,40460b8 <__srget_r+0x38>
 404609c:	80800117 	ldw	r2,4(r16)
 40460a0:	81000017 	ldw	r4,0(r16)
 40460a4:	10bfffc4 	addi	r2,r2,-1
 40460a8:	20c00044 	addi	r3,r4,1
 40460ac:	80800115 	stw	r2,4(r16)
 40460b0:	21000003 	ldbu	r4,0(r4)
 40460b4:	80c00015 	stw	r3,0(r16)
 40460b8:	2005883a 	mov	r2,r4
 40460bc:	dfc00117 	ldw	ra,4(sp)
 40460c0:	dc000017 	ldw	r16,0(sp)
 40460c4:	dec00204 	addi	sp,sp,8
 40460c8:	f800283a 	ret

040460cc <__srget>:
 40460cc:	00810174 	movhi	r2,1029
 40460d0:	10b9bf04 	addi	r2,r2,-6404
 40460d4:	200b883a 	mov	r5,r4
 40460d8:	11000017 	ldw	r4,0(r2)
 40460dc:	40460801 	jmpi	4046080 <__srget_r>

040460e0 <strcpy>:
 40460e0:	2904b03a 	or	r2,r5,r4
 40460e4:	108000cc 	andi	r2,r2,3
 40460e8:	10000826 	beq	r2,zero,404610c <strcpy+0x2c>
 40460ec:	2007883a 	mov	r3,r4
 40460f0:	28800003 	ldbu	r2,0(r5)
 40460f4:	29400044 	addi	r5,r5,1
 40460f8:	18800005 	stb	r2,0(r3)
 40460fc:	18c00044 	addi	r3,r3,1
 4046100:	103ffb1e 	bne	r2,zero,40460f0 <strcpy+0x10>
 4046104:	2005883a 	mov	r2,r4
 4046108:	f800283a 	ret
 404610c:	29800017 	ldw	r6,0(r5)
 4046110:	023fbff4 	movhi	r8,65279
 4046114:	423fbfc4 	addi	r8,r8,-257
 4046118:	02a02074 	movhi	r10,32897
 404611c:	52a02004 	addi	r10,r10,-32640
 4046120:	3205883a 	add	r2,r6,r8
 4046124:	0186303a 	nor	r3,zero,r6
 4046128:	10c4703a 	and	r2,r2,r3
 404612c:	1284703a 	and	r2,r2,r10
 4046130:	200f883a 	mov	r7,r4
 4046134:	10000b1e 	bne	r2,zero,4046164 <strcpy+0x84>
 4046138:	4013883a 	mov	r9,r8
 404613c:	5011883a 	mov	r8,r10
 4046140:	39800015 	stw	r6,0(r7)
 4046144:	29400104 	addi	r5,r5,4
 4046148:	29800017 	ldw	r6,0(r5)
 404614c:	39c00104 	addi	r7,r7,4
 4046150:	3245883a 	add	r2,r6,r9
 4046154:	0186303a 	nor	r3,zero,r6
 4046158:	10c4703a 	and	r2,r2,r3
 404615c:	1204703a 	and	r2,r2,r8
 4046160:	103ff726 	beq	r2,zero,4046140 <strcpy+0x60>
 4046164:	3807883a 	mov	r3,r7
 4046168:	003fe106 	br	40460f0 <strcpy+0x10>

0404616c <strncmp>:
 404616c:	30003926 	beq	r6,zero,4046254 <strncmp+0xe8>
 4046170:	2144b03a 	or	r2,r4,r5
 4046174:	108000cc 	andi	r2,r2,3
 4046178:	028000c4 	movi	r10,3
 404617c:	1000241e 	bne	r2,zero,4046210 <strncmp+0xa4>
 4046180:	2011883a 	mov	r8,r4
 4046184:	280f883a 	mov	r7,r5
 4046188:	51801f2e 	bgeu	r10,r6,4046208 <strncmp+0x9c>
 404618c:	21000017 	ldw	r4,0(r4)
 4046190:	28800017 	ldw	r2,0(r5)
 4046194:	20801c1e 	bne	r4,r2,4046208 <strncmp+0x9c>
 4046198:	31bfff04 	addi	r6,r6,-4
 404619c:	30002d26 	beq	r6,zero,4046254 <strncmp+0xe8>
 40461a0:	027fbff4 	movhi	r9,65279
 40461a4:	4a7fbfc4 	addi	r9,r9,-257
 40461a8:	2247883a 	add	r3,r4,r9
 40461ac:	01602074 	movhi	r5,32897
 40461b0:	29602004 	addi	r5,r5,-32640
 40461b4:	1946703a 	and	r3,r3,r5
 40461b8:	0104303a 	nor	r2,zero,r4
 40461bc:	10c4703a 	and	r2,r2,r3
 40461c0:	1000241e 	bne	r2,zero,4046254 <strncmp+0xe8>
 40461c4:	5017883a 	mov	r11,r10
 40461c8:	4815883a 	mov	r10,r9
 40461cc:	2813883a 	mov	r9,r5
 40461d0:	00000a06 	br	40461fc <strncmp+0x90>
 40461d4:	41000017 	ldw	r4,0(r8)
 40461d8:	39400017 	ldw	r5,0(r7)
 40461dc:	2285883a 	add	r2,r4,r10
 40461e0:	1244703a 	and	r2,r2,r9
 40461e4:	0106303a 	nor	r3,zero,r4
 40461e8:	1886703a 	and	r3,r3,r2
 40461ec:	2140061e 	bne	r4,r5,4046208 <strncmp+0x9c>
 40461f0:	31bfff04 	addi	r6,r6,-4
 40461f4:	30001726 	beq	r6,zero,4046254 <strncmp+0xe8>
 40461f8:	1800161e 	bne	r3,zero,4046254 <strncmp+0xe8>
 40461fc:	42000104 	addi	r8,r8,4
 4046200:	39c00104 	addi	r7,r7,4
 4046204:	59bff336 	bltu	r11,r6,40461d4 <strncmp+0x68>
 4046208:	4009883a 	mov	r4,r8
 404620c:	380b883a 	mov	r5,r7
 4046210:	31bfffc4 	addi	r6,r6,-1
 4046214:	01ffffc4 	movi	r7,-1
 4046218:	31c00a1e 	bne	r6,r7,4046244 <strncmp+0xd8>
 404621c:	20c00003 	ldbu	r3,0(r4)
 4046220:	28800003 	ldbu	r2,0(r5)
 4046224:	1885c83a 	sub	r2,r3,r2
 4046228:	f800283a 	ret
 404622c:	30000926 	beq	r6,zero,4046254 <strncmp+0xe8>
 4046230:	18000826 	beq	r3,zero,4046254 <strncmp+0xe8>
 4046234:	31bfffc4 	addi	r6,r6,-1
 4046238:	21000044 	addi	r4,r4,1
 404623c:	29400044 	addi	r5,r5,1
 4046240:	31fff626 	beq	r6,r7,404621c <strncmp+0xb0>
 4046244:	20c00007 	ldb	r3,0(r4)
 4046248:	28800007 	ldb	r2,0(r5)
 404624c:	18bff726 	beq	r3,r2,404622c <strncmp+0xc0>
 4046250:	003ff206 	br	404621c <strncmp+0xb0>
 4046254:	0005883a 	mov	r2,zero
 4046258:	f800283a 	ret

0404625c <strncpy>:
 404625c:	2904b03a 	or	r2,r5,r4
 4046260:	108000cc 	andi	r2,r2,3
 4046264:	00c000c4 	movi	r3,3
 4046268:	1000291e 	bne	r2,zero,4046310 <strncpy+0xb4>
 404626c:	1980282e 	bgeu	r3,r6,4046310 <strncpy+0xb4>
 4046270:	1817883a 	mov	r11,r3
 4046274:	2011883a 	mov	r8,r4
 4046278:	02bfbff4 	movhi	r10,65279
 404627c:	52bfbfc4 	addi	r10,r10,-257
 4046280:	02602074 	movhi	r9,32897
 4046284:	4a602004 	addi	r9,r9,-32640
 4046288:	29c00017 	ldw	r7,0(r5)
 404628c:	3a85883a 	add	r2,r7,r10
 4046290:	01c6303a 	nor	r3,zero,r7
 4046294:	10c4703a 	and	r2,r2,r3
 4046298:	1244703a 	and	r2,r2,r9
 404629c:	1000051e 	bne	r2,zero,40462b4 <strncpy+0x58>
 40462a0:	31bfff04 	addi	r6,r6,-4
 40462a4:	41c00015 	stw	r7,0(r8)
 40462a8:	29400104 	addi	r5,r5,4
 40462ac:	42000104 	addi	r8,r8,4
 40462b0:	59bff536 	bltu	r11,r6,4046288 <strncpy+0x2c>
 40462b4:	400f883a 	mov	r7,r8
 40462b8:	30001326 	beq	r6,zero,4046308 <strncpy+0xac>
 40462bc:	28800003 	ldbu	r2,0(r5)
 40462c0:	31bfffc4 	addi	r6,r6,-1
 40462c4:	38c00044 	addi	r3,r7,1
 40462c8:	38800005 	stb	r2,0(r7)
 40462cc:	10000826 	beq	r2,zero,40462f0 <strncpy+0x94>
 40462d0:	29400044 	addi	r5,r5,1
 40462d4:	30000c26 	beq	r6,zero,4046308 <strncpy+0xac>
 40462d8:	28800003 	ldbu	r2,0(r5)
 40462dc:	31bfffc4 	addi	r6,r6,-1
 40462e0:	29400044 	addi	r5,r5,1
 40462e4:	18800005 	stb	r2,0(r3)
 40462e8:	18c00044 	addi	r3,r3,1
 40462ec:	103ff91e 	bne	r2,zero,40462d4 <strncpy+0x78>
 40462f0:	30000526 	beq	r6,zero,4046308 <strncpy+0xac>
 40462f4:	1805883a 	mov	r2,r3
 40462f8:	30cd883a 	add	r6,r6,r3
 40462fc:	10000005 	stb	zero,0(r2)
 4046300:	10800044 	addi	r2,r2,1
 4046304:	30bffd1e 	bne	r6,r2,40462fc <strncpy+0xa0>
 4046308:	2005883a 	mov	r2,r4
 404630c:	f800283a 	ret
 4046310:	200f883a 	mov	r7,r4
 4046314:	003fe806 	br	40462b8 <strncpy+0x5c>

04046318 <_strtol_r>:
 4046318:	defff304 	addi	sp,sp,-52
 404631c:	00810174 	movhi	r2,1029
 4046320:	10b9be04 	addi	r2,r2,-6408
 4046324:	dcc00615 	stw	r19,24(sp)
 4046328:	14c00017 	ldw	r19,0(r2)
 404632c:	ddc00a15 	stw	r23,40(sp)
 4046330:	dc000315 	stw	r16,12(sp)
 4046334:	dfc00c15 	stw	ra,48(sp)
 4046338:	df000b15 	stw	fp,44(sp)
 404633c:	dd800915 	stw	r22,36(sp)
 4046340:	dd400815 	stw	r21,32(sp)
 4046344:	dd000715 	stw	r20,28(sp)
 4046348:	dc800515 	stw	r18,20(sp)
 404634c:	dc400415 	stw	r17,16(sp)
 4046350:	282f883a 	mov	r23,r5
 4046354:	d9000015 	stw	r4,0(sp)
 4046358:	d9800115 	stw	r6,4(sp)
 404635c:	2821883a 	mov	r16,r5
 4046360:	84400007 	ldb	r17,0(r16)
 4046364:	84000044 	addi	r16,r16,1
 4046368:	9c47883a 	add	r3,r19,r17
 404636c:	18800003 	ldbu	r2,0(r3)
 4046370:	1080020c 	andi	r2,r2,8
 4046374:	103ffa1e 	bne	r2,zero,4046360 <_strtol_r+0x48>
 4046378:	00800b44 	movi	r2,45
 404637c:	88805c26 	beq	r17,r2,40464f0 <_strtol_r+0x1d8>
 4046380:	00800ac4 	movi	r2,43
 4046384:	88805726 	beq	r17,r2,40464e4 <_strtol_r+0x1cc>
 4046388:	0039883a 	mov	fp,zero
 404638c:	3807003a 	cmpeq	r3,r7,zero
 4046390:	1800431e 	bne	r3,zero,40464a0 <_strtol_r+0x188>
 4046394:	00800404 	movi	r2,16
 4046398:	38804126 	beq	r7,r2,40464a0 <_strtol_r+0x188>
 404639c:	3829883a 	mov	r20,r7
 40463a0:	e02cc03a 	cmpne	r22,fp,zero
 40463a4:	b0004b1e 	bne	r22,zero,40464d4 <_strtol_r+0x1bc>
 40463a8:	04a00034 	movhi	r18,32768
 40463ac:	94bfffc4 	addi	r18,r18,-1
 40463b0:	9009883a 	mov	r4,r18
 40463b4:	a00b883a 	mov	r5,r20
 40463b8:	d9c00215 	stw	r7,8(sp)
 40463bc:	400bc280 	call	400bc28 <__umodsi3>
 40463c0:	9009883a 	mov	r4,r18
 40463c4:	a00b883a 	mov	r5,r20
 40463c8:	102b883a 	mov	r21,r2
 40463cc:	400bc200 	call	400bc20 <__udivsi3>
 40463d0:	1011883a 	mov	r8,r2
 40463d4:	9c45883a 	add	r2,r19,r17
 40463d8:	11000003 	ldbu	r4,0(r2)
 40463dc:	000b883a 	mov	r5,zero
 40463e0:	000d883a 	mov	r6,zero
 40463e4:	20c0010c 	andi	r3,r4,4
 40463e8:	d9c00217 	ldw	r7,8(sp)
 40463ec:	18000e26 	beq	r3,zero,4046428 <_strtol_r+0x110>
 40463f0:	88fff404 	addi	r3,r17,-48
 40463f4:	19c0140e 	bge	r3,r7,4046448 <_strtol_r+0x130>
 40463f8:	30003116 	blt	r6,zero,40464c0 <_strtol_r+0x1a8>
 40463fc:	41403036 	bltu	r8,r5,40464c0 <_strtol_r+0x1a8>
 4046400:	2a002e26 	beq	r5,r8,40464bc <_strtol_r+0x1a4>
 4046404:	2d05383a 	mul	r2,r5,r20
 4046408:	01800044 	movi	r6,1
 404640c:	10cb883a 	add	r5,r2,r3
 4046410:	84400007 	ldb	r17,0(r16)
 4046414:	84000044 	addi	r16,r16,1
 4046418:	9c45883a 	add	r2,r19,r17
 404641c:	11000003 	ldbu	r4,0(r2)
 4046420:	20c0010c 	andi	r3,r4,4
 4046424:	183ff21e 	bne	r3,zero,40463f0 <_strtol_r+0xd8>
 4046428:	208000cc 	andi	r2,r4,3
 404642c:	10000626 	beq	r2,zero,4046448 <_strtol_r+0x130>
 4046430:	2080004c 	andi	r2,r4,1
 4046434:	1005003a 	cmpeq	r2,r2,zero
 4046438:	1000231e 	bne	r2,zero,40464c8 <_strtol_r+0x1b0>
 404643c:	00800dc4 	movi	r2,55
 4046440:	8887c83a 	sub	r3,r17,r2
 4046444:	19ffec16 	blt	r3,r7,40463f8 <_strtol_r+0xe0>
 4046448:	30002d16 	blt	r6,zero,4046500 <_strtol_r+0x1e8>
 404644c:	b000231e 	bne	r22,zero,40464dc <_strtol_r+0x1c4>
 4046450:	2807883a 	mov	r3,r5
 4046454:	d8800117 	ldw	r2,4(sp)
 4046458:	10000426 	beq	r2,zero,404646c <_strtol_r+0x154>
 404645c:	30000126 	beq	r6,zero,4046464 <_strtol_r+0x14c>
 4046460:	85ffffc4 	addi	r23,r16,-1
 4046464:	d9000117 	ldw	r4,4(sp)
 4046468:	25c00015 	stw	r23,0(r4)
 404646c:	1805883a 	mov	r2,r3
 4046470:	dfc00c17 	ldw	ra,48(sp)
 4046474:	df000b17 	ldw	fp,44(sp)
 4046478:	ddc00a17 	ldw	r23,40(sp)
 404647c:	dd800917 	ldw	r22,36(sp)
 4046480:	dd400817 	ldw	r21,32(sp)
 4046484:	dd000717 	ldw	r20,28(sp)
 4046488:	dcc00617 	ldw	r19,24(sp)
 404648c:	dc800517 	ldw	r18,20(sp)
 4046490:	dc400417 	ldw	r17,16(sp)
 4046494:	dc000317 	ldw	r16,12(sp)
 4046498:	dec00d04 	addi	sp,sp,52
 404649c:	f800283a 	ret
 40464a0:	00800c04 	movi	r2,48
 40464a4:	88801d26 	beq	r17,r2,404651c <_strtol_r+0x204>
 40464a8:	183fbc26 	beq	r3,zero,404639c <_strtol_r+0x84>
 40464ac:	00800c04 	movi	r2,48
 40464b0:	88802726 	beq	r17,r2,4046550 <_strtol_r+0x238>
 40464b4:	01c00284 	movi	r7,10
 40464b8:	003fb806 	br	404639c <_strtol_r+0x84>
 40464bc:	a8ffd10e 	bge	r21,r3,4046404 <_strtol_r+0xec>
 40464c0:	01bfffc4 	movi	r6,-1
 40464c4:	003fd206 	br	4046410 <_strtol_r+0xf8>
 40464c8:	008015c4 	movi	r2,87
 40464cc:	8887c83a 	sub	r3,r17,r2
 40464d0:	003fdc06 	br	4046444 <_strtol_r+0x12c>
 40464d4:	04a00034 	movhi	r18,32768
 40464d8:	003fb506 	br	40463b0 <_strtol_r+0x98>
 40464dc:	0147c83a 	sub	r3,zero,r5
 40464e0:	003fdc06 	br	4046454 <_strtol_r+0x13c>
 40464e4:	84400007 	ldb	r17,0(r16)
 40464e8:	84000044 	addi	r16,r16,1
 40464ec:	003fa606 	br	4046388 <_strtol_r+0x70>
 40464f0:	84400007 	ldb	r17,0(r16)
 40464f4:	07000044 	movi	fp,1
 40464f8:	84000044 	addi	r16,r16,1
 40464fc:	003fa306 	br	404638c <_strtol_r+0x74>
 4046500:	e005003a 	cmpeq	r2,fp,zero
 4046504:	10000f1e 	bne	r2,zero,4046544 <_strtol_r+0x22c>
 4046508:	00e00034 	movhi	r3,32768
 404650c:	d9000017 	ldw	r4,0(sp)
 4046510:	00800884 	movi	r2,34
 4046514:	20800015 	stw	r2,0(r4)
 4046518:	003fce06 	br	4046454 <_strtol_r+0x13c>
 404651c:	81000007 	ldb	r4,0(r16)
 4046520:	00801e04 	movi	r2,120
 4046524:	20800226 	beq	r4,r2,4046530 <_strtol_r+0x218>
 4046528:	00801604 	movi	r2,88
 404652c:	20bfde1e 	bne	r4,r2,40464a8 <_strtol_r+0x190>
 4046530:	84400047 	ldb	r17,1(r16)
 4046534:	01c00404 	movi	r7,16
 4046538:	84000084 	addi	r16,r16,2
 404653c:	3829883a 	mov	r20,r7
 4046540:	003f9706 	br	40463a0 <_strtol_r+0x88>
 4046544:	00e00034 	movhi	r3,32768
 4046548:	18ffffc4 	addi	r3,r3,-1
 404654c:	003fef06 	br	404650c <_strtol_r+0x1f4>
 4046550:	01c00204 	movi	r7,8
 4046554:	3829883a 	mov	r20,r7
 4046558:	003f9106 	br	40463a0 <_strtol_r+0x88>

0404655c <strtol>:
 404655c:	00810174 	movhi	r2,1029
 4046560:	10b9bf04 	addi	r2,r2,-6404
 4046564:	2013883a 	mov	r9,r4
 4046568:	11000017 	ldw	r4,0(r2)
 404656c:	2805883a 	mov	r2,r5
 4046570:	300f883a 	mov	r7,r6
 4046574:	480b883a 	mov	r5,r9
 4046578:	100d883a 	mov	r6,r2
 404657c:	40463181 	jmpi	4046318 <_strtol_r>

04046580 <_vprintf_r>:
 4046580:	2807883a 	mov	r3,r5
 4046584:	21400217 	ldw	r5,8(r4)
 4046588:	300f883a 	mov	r7,r6
 404658c:	180d883a 	mov	r6,r3
 4046590:	4002aa41 	jmpi	4002aa4 <___vfprintf_internal_r>

04046594 <vprintf>:
 4046594:	00810174 	movhi	r2,1029
 4046598:	10b9bf04 	addi	r2,r2,-6404
 404659c:	12000017 	ldw	r8,0(r2)
 40465a0:	280f883a 	mov	r7,r5
 40465a4:	200d883a 	mov	r6,r4
 40465a8:	41400217 	ldw	r5,8(r8)
 40465ac:	4009883a 	mov	r4,r8
 40465b0:	4002aa41 	jmpi	4002aa4 <___vfprintf_internal_r>

040465b4 <_vsprintf_r>:
 40465b4:	deffe804 	addi	sp,sp,-96
 40465b8:	00808204 	movi	r2,520
 40465bc:	2811883a 	mov	r8,r5
 40465c0:	02600034 	movhi	r9,32768
 40465c4:	4a7fffc4 	addi	r9,r9,-1
 40465c8:	d880030d 	sth	r2,12(sp)
 40465cc:	d80b883a 	mov	r5,sp
 40465d0:	00bfffc4 	movi	r2,-1
 40465d4:	dfc01715 	stw	ra,92(sp)
 40465d8:	da000415 	stw	r8,16(sp)
 40465dc:	da400515 	stw	r9,20(sp)
 40465e0:	d880038d 	sth	r2,14(sp)
 40465e4:	da000015 	stw	r8,0(sp)
 40465e8:	da400215 	stw	r9,8(sp)
 40465ec:	4002aa40 	call	4002aa4 <___vfprintf_internal_r>
 40465f0:	d8c00017 	ldw	r3,0(sp)
 40465f4:	18000005 	stb	zero,0(r3)
 40465f8:	dfc01717 	ldw	ra,92(sp)
 40465fc:	dec01804 	addi	sp,sp,96
 4046600:	f800283a 	ret

04046604 <vsprintf>:
 4046604:	00810174 	movhi	r2,1029
 4046608:	10b9bf04 	addi	r2,r2,-6404
 404660c:	2013883a 	mov	r9,r4
 4046610:	11000017 	ldw	r4,0(r2)
 4046614:	2805883a 	mov	r2,r5
 4046618:	300f883a 	mov	r7,r6
 404661c:	480b883a 	mov	r5,r9
 4046620:	100d883a 	mov	r6,r2
 4046624:	40465b41 	jmpi	40465b4 <_vsprintf_r>

04046628 <__register_exitproc>:
 4046628:	defffa04 	addi	sp,sp,-24
 404662c:	00810174 	movhi	r2,1029
 4046630:	10b9c004 	addi	r2,r2,-6400
 4046634:	dc000015 	stw	r16,0(sp)
 4046638:	14000017 	ldw	r16,0(r2)
 404663c:	dd000415 	stw	r20,16(sp)
 4046640:	2829883a 	mov	r20,r5
 4046644:	81405217 	ldw	r5,328(r16)
 4046648:	dcc00315 	stw	r19,12(sp)
 404664c:	dc800215 	stw	r18,8(sp)
 4046650:	dc400115 	stw	r17,4(sp)
 4046654:	dfc00515 	stw	ra,20(sp)
 4046658:	2023883a 	mov	r17,r4
 404665c:	3027883a 	mov	r19,r6
 4046660:	3825883a 	mov	r18,r7
 4046664:	28002526 	beq	r5,zero,40466fc <__register_exitproc+0xd4>
 4046668:	29000117 	ldw	r4,4(r5)
 404666c:	008007c4 	movi	r2,31
 4046670:	11002716 	blt	r2,r4,4046710 <__register_exitproc+0xe8>
 4046674:	8800101e 	bne	r17,zero,40466b8 <__register_exitproc+0x90>
 4046678:	2105883a 	add	r2,r4,r4
 404667c:	1085883a 	add	r2,r2,r2
 4046680:	20c00044 	addi	r3,r4,1
 4046684:	1145883a 	add	r2,r2,r5
 4046688:	0009883a 	mov	r4,zero
 404668c:	15000215 	stw	r20,8(r2)
 4046690:	28c00115 	stw	r3,4(r5)
 4046694:	2005883a 	mov	r2,r4
 4046698:	dfc00517 	ldw	ra,20(sp)
 404669c:	dd000417 	ldw	r20,16(sp)
 40466a0:	dcc00317 	ldw	r19,12(sp)
 40466a4:	dc800217 	ldw	r18,8(sp)
 40466a8:	dc400117 	ldw	r17,4(sp)
 40466ac:	dc000017 	ldw	r16,0(sp)
 40466b0:	dec00604 	addi	sp,sp,24
 40466b4:	f800283a 	ret
 40466b8:	29802204 	addi	r6,r5,136
 40466bc:	00800044 	movi	r2,1
 40466c0:	110e983a 	sll	r7,r2,r4
 40466c4:	30c04017 	ldw	r3,256(r6)
 40466c8:	2105883a 	add	r2,r4,r4
 40466cc:	1085883a 	add	r2,r2,r2
 40466d0:	1185883a 	add	r2,r2,r6
 40466d4:	19c6b03a 	or	r3,r3,r7
 40466d8:	14802015 	stw	r18,128(r2)
 40466dc:	14c00015 	stw	r19,0(r2)
 40466e0:	00800084 	movi	r2,2
 40466e4:	30c04015 	stw	r3,256(r6)
 40466e8:	88bfe31e 	bne	r17,r2,4046678 <__register_exitproc+0x50>
 40466ec:	30804117 	ldw	r2,260(r6)
 40466f0:	11c4b03a 	or	r2,r2,r7
 40466f4:	30804115 	stw	r2,260(r6)
 40466f8:	003fdf06 	br	4046678 <__register_exitproc+0x50>
 40466fc:	008101b4 	movhi	r2,1030
 4046700:	10a48604 	addi	r2,r2,-28136
 4046704:	100b883a 	mov	r5,r2
 4046708:	80805215 	stw	r2,328(r16)
 404670c:	003fd606 	br	4046668 <__register_exitproc+0x40>
 4046710:	00810134 	movhi	r2,1028
 4046714:	1097fe04 	addi	r2,r2,24568
 4046718:	1000021e 	bne	r2,zero,4046724 <__register_exitproc+0xfc>
 404671c:	013fffc4 	movi	r4,-1
 4046720:	003fdc06 	br	4046694 <__register_exitproc+0x6c>
 4046724:	01006404 	movi	r4,400
 4046728:	103ee83a 	callr	r2
 404672c:	1007883a 	mov	r3,r2
 4046730:	103ffa26 	beq	r2,zero,404671c <__register_exitproc+0xf4>
 4046734:	80805217 	ldw	r2,328(r16)
 4046738:	180b883a 	mov	r5,r3
 404673c:	18000115 	stw	zero,4(r3)
 4046740:	18800015 	stw	r2,0(r3)
 4046744:	80c05215 	stw	r3,328(r16)
 4046748:	18006215 	stw	zero,392(r3)
 404674c:	18006315 	stw	zero,396(r3)
 4046750:	0009883a 	mov	r4,zero
 4046754:	883fc826 	beq	r17,zero,4046678 <__register_exitproc+0x50>
 4046758:	003fd706 	br	40466b8 <__register_exitproc+0x90>

0404675c <register_fini>:
 404675c:	f800283a 	ret

04046760 <__call_exitprocs>:
 4046760:	00810174 	movhi	r2,1029
 4046764:	10b9c004 	addi	r2,r2,-6400
 4046768:	10800017 	ldw	r2,0(r2)
 404676c:	defff304 	addi	sp,sp,-52
 4046770:	df000b15 	stw	fp,44(sp)
 4046774:	d8800115 	stw	r2,4(sp)
 4046778:	00810134 	movhi	r2,1028
 404677c:	1097f904 	addi	r2,r2,24548
 4046780:	1005003a 	cmpeq	r2,r2,zero
 4046784:	d8800215 	stw	r2,8(sp)
 4046788:	d8800117 	ldw	r2,4(sp)
 404678c:	dd400815 	stw	r21,32(sp)
 4046790:	dd000715 	stw	r20,28(sp)
 4046794:	10805204 	addi	r2,r2,328
 4046798:	dfc00c15 	stw	ra,48(sp)
 404679c:	ddc00a15 	stw	r23,40(sp)
 40467a0:	dd800915 	stw	r22,36(sp)
 40467a4:	dcc00615 	stw	r19,24(sp)
 40467a8:	dc800515 	stw	r18,20(sp)
 40467ac:	dc400415 	stw	r17,16(sp)
 40467b0:	dc000315 	stw	r16,12(sp)
 40467b4:	282b883a 	mov	r21,r5
 40467b8:	2039883a 	mov	fp,r4
 40467bc:	d8800015 	stw	r2,0(sp)
 40467c0:	2829003a 	cmpeq	r20,r5,zero
 40467c4:	d8800117 	ldw	r2,4(sp)
 40467c8:	14405217 	ldw	r17,328(r2)
 40467cc:	88001026 	beq	r17,zero,4046810 <__call_exitprocs+0xb0>
 40467d0:	ddc00017 	ldw	r23,0(sp)
 40467d4:	88800117 	ldw	r2,4(r17)
 40467d8:	8c802204 	addi	r18,r17,136
 40467dc:	143fffc4 	addi	r16,r2,-1
 40467e0:	80000916 	blt	r16,zero,4046808 <__call_exitprocs+0xa8>
 40467e4:	05bfffc4 	movi	r22,-1
 40467e8:	a000151e 	bne	r20,zero,4046840 <__call_exitprocs+0xe0>
 40467ec:	8409883a 	add	r4,r16,r16
 40467f0:	2105883a 	add	r2,r4,r4
 40467f4:	1485883a 	add	r2,r2,r18
 40467f8:	10c02017 	ldw	r3,128(r2)
 40467fc:	a8c01126 	beq	r21,r3,4046844 <__call_exitprocs+0xe4>
 4046800:	843fffc4 	addi	r16,r16,-1
 4046804:	85bff81e 	bne	r16,r22,40467e8 <__call_exitprocs+0x88>
 4046808:	d8800217 	ldw	r2,8(sp)
 404680c:	10003126 	beq	r2,zero,40468d4 <__call_exitprocs+0x174>
 4046810:	dfc00c17 	ldw	ra,48(sp)
 4046814:	df000b17 	ldw	fp,44(sp)
 4046818:	ddc00a17 	ldw	r23,40(sp)
 404681c:	dd800917 	ldw	r22,36(sp)
 4046820:	dd400817 	ldw	r21,32(sp)
 4046824:	dd000717 	ldw	r20,28(sp)
 4046828:	dcc00617 	ldw	r19,24(sp)
 404682c:	dc800517 	ldw	r18,20(sp)
 4046830:	dc400417 	ldw	r17,16(sp)
 4046834:	dc000317 	ldw	r16,12(sp)
 4046838:	dec00d04 	addi	sp,sp,52
 404683c:	f800283a 	ret
 4046840:	8409883a 	add	r4,r16,r16
 4046844:	88c00117 	ldw	r3,4(r17)
 4046848:	2105883a 	add	r2,r4,r4
 404684c:	1445883a 	add	r2,r2,r17
 4046850:	18ffffc4 	addi	r3,r3,-1
 4046854:	11800217 	ldw	r6,8(r2)
 4046858:	1c001526 	beq	r3,r16,40468b0 <__call_exitprocs+0x150>
 404685c:	10000215 	stw	zero,8(r2)
 4046860:	303fe726 	beq	r6,zero,4046800 <__call_exitprocs+0xa0>
 4046864:	00c00044 	movi	r3,1
 4046868:	1c06983a 	sll	r3,r3,r16
 404686c:	90804017 	ldw	r2,256(r18)
 4046870:	8cc00117 	ldw	r19,4(r17)
 4046874:	1884703a 	and	r2,r3,r2
 4046878:	10001426 	beq	r2,zero,40468cc <__call_exitprocs+0x16c>
 404687c:	90804117 	ldw	r2,260(r18)
 4046880:	1884703a 	and	r2,r3,r2
 4046884:	10000c1e 	bne	r2,zero,40468b8 <__call_exitprocs+0x158>
 4046888:	2105883a 	add	r2,r4,r4
 404688c:	1485883a 	add	r2,r2,r18
 4046890:	11400017 	ldw	r5,0(r2)
 4046894:	e009883a 	mov	r4,fp
 4046898:	303ee83a 	callr	r6
 404689c:	88800117 	ldw	r2,4(r17)
 40468a0:	98bfc81e 	bne	r19,r2,40467c4 <__call_exitprocs+0x64>
 40468a4:	b8800017 	ldw	r2,0(r23)
 40468a8:	147fd526 	beq	r2,r17,4046800 <__call_exitprocs+0xa0>
 40468ac:	003fc506 	br	40467c4 <__call_exitprocs+0x64>
 40468b0:	8c000115 	stw	r16,4(r17)
 40468b4:	003fea06 	br	4046860 <__call_exitprocs+0x100>
 40468b8:	2105883a 	add	r2,r4,r4
 40468bc:	1485883a 	add	r2,r2,r18
 40468c0:	11000017 	ldw	r4,0(r2)
 40468c4:	303ee83a 	callr	r6
 40468c8:	003ff406 	br	404689c <__call_exitprocs+0x13c>
 40468cc:	303ee83a 	callr	r6
 40468d0:	003ff206 	br	404689c <__call_exitprocs+0x13c>
 40468d4:	88800117 	ldw	r2,4(r17)
 40468d8:	1000081e 	bne	r2,zero,40468fc <__call_exitprocs+0x19c>
 40468dc:	89000017 	ldw	r4,0(r17)
 40468e0:	20000726 	beq	r4,zero,4046900 <__call_exitprocs+0x1a0>
 40468e4:	b9000015 	stw	r4,0(r23)
 40468e8:	8809883a 	mov	r4,r17
 40468ec:	4045fe40 	call	4045fe4 <free>
 40468f0:	bc400017 	ldw	r17,0(r23)
 40468f4:	883fb71e 	bne	r17,zero,40467d4 <__call_exitprocs+0x74>
 40468f8:	003fc506 	br	4046810 <__call_exitprocs+0xb0>
 40468fc:	89000017 	ldw	r4,0(r17)
 4046900:	882f883a 	mov	r23,r17
 4046904:	2023883a 	mov	r17,r4
 4046908:	883fb21e 	bne	r17,zero,40467d4 <__call_exitprocs+0x74>
 404690c:	003fc006 	br	4046810 <__call_exitprocs+0xb0>

04046910 <__srefill_r>:
 4046910:	defffd04 	addi	sp,sp,-12
 4046914:	dc400115 	stw	r17,4(sp)
 4046918:	dc000015 	stw	r16,0(sp)
 404691c:	dfc00215 	stw	ra,8(sp)
 4046920:	2023883a 	mov	r17,r4
 4046924:	2821883a 	mov	r16,r5
 4046928:	20000226 	beq	r4,zero,4046934 <__srefill_r+0x24>
 404692c:	20800e17 	ldw	r2,56(r4)
 4046930:	10004126 	beq	r2,zero,4046a38 <__srefill_r+0x128>
 4046934:	80c0030b 	ldhu	r3,12(r16)
 4046938:	80000115 	stw	zero,4(r16)
 404693c:	1880080c 	andi	r2,r3,32
 4046940:	1000361e 	bne	r2,zero,4046a1c <__srefill_r+0x10c>
 4046944:	1880010c 	andi	r2,r3,4
 4046948:	1000211e 	bne	r2,zero,40469d0 <__srefill_r+0xc0>
 404694c:	1880040c 	andi	r2,r3,16
 4046950:	10005026 	beq	r2,zero,4046a94 <__srefill_r+0x184>
 4046954:	1880020c 	andi	r2,r3,8
 4046958:	1000541e 	bne	r2,zero,4046aac <__srefill_r+0x19c>
 404695c:	8080030b 	ldhu	r2,12(r16)
 4046960:	10800114 	ori	r2,r2,4
 4046964:	8080030d 	sth	r2,12(r16)
 4046968:	80800417 	ldw	r2,16(r16)
 404696c:	10004526 	beq	r2,zero,4046a84 <__srefill_r+0x174>
 4046970:	8080030b 	ldhu	r2,12(r16)
 4046974:	108000cc 	andi	r2,r2,3
 4046978:	1000361e 	bne	r2,zero,4046a54 <__srefill_r+0x144>
 404697c:	81800417 	ldw	r6,16(r16)
 4046980:	80c00817 	ldw	r3,32(r16)
 4046984:	81400717 	ldw	r5,28(r16)
 4046988:	81c00517 	ldw	r7,20(r16)
 404698c:	8809883a 	mov	r4,r17
 4046990:	81800015 	stw	r6,0(r16)
 4046994:	183ee83a 	callr	r3
 4046998:	80c0030b 	ldhu	r3,12(r16)
 404699c:	1009883a 	mov	r4,r2
 40469a0:	80800115 	stw	r2,4(r16)
 40469a4:	00b7ffc4 	movi	r2,-8193
 40469a8:	1884703a 	and	r2,r3,r2
 40469ac:	8080030d 	sth	r2,12(r16)
 40469b0:	0100230e 	bge	zero,r4,4046a40 <__srefill_r+0x130>
 40469b4:	0009883a 	mov	r4,zero
 40469b8:	2005883a 	mov	r2,r4
 40469bc:	dfc00217 	ldw	ra,8(sp)
 40469c0:	dc400117 	ldw	r17,4(sp)
 40469c4:	dc000017 	ldw	r16,0(sp)
 40469c8:	dec00304 	addi	sp,sp,12
 40469cc:	f800283a 	ret
 40469d0:	81400c17 	ldw	r5,48(r16)
 40469d4:	283fe426 	beq	r5,zero,4046968 <__srefill_r+0x58>
 40469d8:	80801004 	addi	r2,r16,64
 40469dc:	28800226 	beq	r5,r2,40469e8 <__srefill_r+0xd8>
 40469e0:	8809883a 	mov	r4,r17
 40469e4:	40069e40 	call	40069e4 <_free_r>
 40469e8:	80800f17 	ldw	r2,60(r16)
 40469ec:	80000c15 	stw	zero,48(r16)
 40469f0:	80800115 	stw	r2,4(r16)
 40469f4:	103fdc26 	beq	r2,zero,4046968 <__srefill_r+0x58>
 40469f8:	80800e17 	ldw	r2,56(r16)
 40469fc:	0009883a 	mov	r4,zero
 4046a00:	80800015 	stw	r2,0(r16)
 4046a04:	2005883a 	mov	r2,r4
 4046a08:	dfc00217 	ldw	ra,8(sp)
 4046a0c:	dc400117 	ldw	r17,4(sp)
 4046a10:	dc000017 	ldw	r16,0(sp)
 4046a14:	dec00304 	addi	sp,sp,12
 4046a18:	f800283a 	ret
 4046a1c:	013fffc4 	movi	r4,-1
 4046a20:	2005883a 	mov	r2,r4
 4046a24:	dfc00217 	ldw	ra,8(sp)
 4046a28:	dc400117 	ldw	r17,4(sp)
 4046a2c:	dc000017 	ldw	r16,0(sp)
 4046a30:	dec00304 	addi	sp,sp,12
 4046a34:	f800283a 	ret
 4046a38:	40065140 	call	4006514 <__sinit>
 4046a3c:	003fbd06 	br	4046934 <__srefill_r+0x24>
 4046a40:	20000b1e 	bne	r4,zero,4046a70 <__srefill_r+0x160>
 4046a44:	10800814 	ori	r2,r2,32
 4046a48:	013fffc4 	movi	r4,-1
 4046a4c:	8080030d 	sth	r2,12(r16)
 4046a50:	003fd906 	br	40469b8 <__srefill_r+0xa8>
 4046a54:	00810174 	movhi	r2,1029
 4046a58:	10b9c004 	addi	r2,r2,-6400
 4046a5c:	11000017 	ldw	r4,0(r2)
 4046a60:	01410134 	movhi	r5,1028
 4046a64:	295ab504 	addi	r5,r5,27348
 4046a68:	400725c0 	call	400725c <_fwalk>
 4046a6c:	003fc306 	br	404697c <__srefill_r+0x6c>
 4046a70:	10801014 	ori	r2,r2,64
 4046a74:	013fffc4 	movi	r4,-1
 4046a78:	8080030d 	sth	r2,12(r16)
 4046a7c:	80000115 	stw	zero,4(r16)
 4046a80:	003fcd06 	br	40469b8 <__srefill_r+0xa8>
 4046a84:	8809883a 	mov	r4,r17
 4046a88:	800b883a 	mov	r5,r16
 4046a8c:	40073d80 	call	40073d8 <__smakebuf_r>
 4046a90:	003fb706 	br	4046970 <__srefill_r+0x60>
 4046a94:	18c01014 	ori	r3,r3,64
 4046a98:	00800244 	movi	r2,9
 4046a9c:	013fffc4 	movi	r4,-1
 4046aa0:	88800015 	stw	r2,0(r17)
 4046aa4:	80c0030d 	sth	r3,12(r16)
 4046aa8:	003fc306 	br	40469b8 <__srefill_r+0xa8>
 4046aac:	8809883a 	mov	r4,r17
 4046ab0:	800b883a 	mov	r5,r16
 4046ab4:	400627c0 	call	400627c <_fflush_r>
 4046ab8:	103fd81e 	bne	r2,zero,4046a1c <__srefill_r+0x10c>
 4046abc:	8080030b 	ldhu	r2,12(r16)
 4046ac0:	80000215 	stw	zero,8(r16)
 4046ac4:	80000615 	stw	zero,24(r16)
 4046ac8:	10bffdcc 	andi	r2,r2,65527
 4046acc:	8080030d 	sth	r2,12(r16)
 4046ad0:	003fa206 	br	404695c <__srefill_r+0x4c>

04046ad4 <lflush>:
 4046ad4:	20c0030b 	ldhu	r3,12(r4)
 4046ad8:	01400244 	movi	r5,9
 4046adc:	0005883a 	mov	r2,zero
 4046ae0:	18c0024c 	andi	r3,r3,9
 4046ae4:	19400126 	beq	r3,r5,4046aec <lflush+0x18>
 4046ae8:	f800283a 	ret
 4046aec:	40064781 	jmpi	4006478 <fflush>

04046af0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4046af0:	defffd04 	addi	sp,sp,-12
 4046af4:	df000215 	stw	fp,8(sp)
 4046af8:	df000204 	addi	fp,sp,8
 4046afc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4046b00:	e0bfff17 	ldw	r2,-4(fp)
 4046b04:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4046b08:	e0bffe17 	ldw	r2,-8(fp)
 4046b0c:	1005003a 	cmpeq	r2,r2,zero
 4046b10:	1000021e 	bne	r2,zero,4046b1c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4046b14:	002af070 	cmpltui	zero,zero,43969
 4046b18:	00000106 	br	4046b20 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4046b1c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4046b20:	e037883a 	mov	sp,fp
 4046b24:	df000017 	ldw	fp,0(sp)
 4046b28:	dec00104 	addi	sp,sp,4
 4046b2c:	f800283a 	ret

04046b30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4046b30:	defffd04 	addi	sp,sp,-12
 4046b34:	dfc00215 	stw	ra,8(sp)
 4046b38:	df000115 	stw	fp,4(sp)
 4046b3c:	df000104 	addi	fp,sp,4
 4046b40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4046b44:	00810174 	movhi	r2,1029
 4046b48:	1081a744 	addi	r2,r2,1693
 4046b4c:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4046b50:	e13fff17 	ldw	r4,-4(fp)
 4046b54:	4046af00 	call	4046af0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4046b58:	003fff06 	br	4046b58 <_exit+0x28>
 4046b5c:	00000010 	cmplti	zero,zero,0
 4046b60:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 4046b64:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
 4046b68:	011f7c01 	jmpi	11f7c0 <OSCtxSw_SWITCH_PC+0x11f780>
 4046b6c:	001b0c0b 	ldhu	zero,27696(zero)
 4046b70:	00000028 	cmpgeui	zero,zero,0
 4046b74:	00000018 	cmpnei	zero,zero,0
 4046b78:	04009e2c 	andhi	r16,zero,632
 4046b7c:	000005dc 	xori	zero,zero,23
 4046b80:	400e4400 	call	400e440 <OS_InitTCBList+0x50>
 4046b84:	92099170 	cmpltui	r8,r18,9797
 4046b88:	95079308 	cmpgei	r20,r18,7756
 4046b8c:	97049605 	stb	fp,4696(r18)
 4046b90:	90019f03 	ldbu	zero,1660(r18)
 4046b94:	9c06940a 	0x9c06940a
 4046b98:	00000002 	0x2
 4046b9c:	00000028 	cmpgeui	zero,zero,0
 4046ba0:	00000044 	movi	zero,1
 4046ba4:	0400a408 	cmpgei	r16,zero,656
 4046ba8:	000005b0 	cmpltui	zero,zero,22
 4046bac:	3c0e4400 	call	3c0e440 <OSCtxSw_SWITCH_PC+0x3c0e400>
 4046bb0:	92099168 	cmpgeui	r8,r18,9797
 4046bb4:	95079308 	cmpgei	r20,r18,7756
 4046bb8:	9c039705 	stb	r16,3676(r19)
 4046bbc:	90019f02 	0x90019f02
 4046bc0:	9606940a 	0x9606940a
 4046bc4:	00000004 	movi	zero,0
 4046bc8:	0404675c 	xori	r16,zero,4509
